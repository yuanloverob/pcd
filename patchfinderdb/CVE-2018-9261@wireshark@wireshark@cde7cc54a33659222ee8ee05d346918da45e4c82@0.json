{
  "cve_id": "CVE-2018-9261",
  "cve_desc": "In Wireshark 2.4.0 to 2.4.5 and 2.2.0 to 2.2.13, the NBAP dissector could crash with a large loop that ends with a heap-based buffer overflow. This was addressed in epan/dissectors/packet-nbap.c by prohibiting the self-linking of DCH-IDs.",
  "repo": "wireshark/wireshark",
  "patch_hash": "cde7cc54a33659222ee8ee05d346918da45e4c82",
  "patch_info": {
    "commit_hash": "cde7cc54a33659222ee8ee05d346918da45e4c82",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/cde7cc54a33659222ee8ee05d346918da45e4c82",
    "files": [
      "epan/dissectors/asn1/nbap/nbap.cnf",
      "epan/dissectors/packet-nbap.c",
      "epan/dissectors/packet-umts_fp.h"
    ],
    "message": "NBAP: avoid linking a DCH-ID to itself\n\nOtherwise it can create an infinite loop, leading to a buffer overflow.\nAlso add explicit cheks on the buffer usage and set its maximum size to\n128 instead of 32 per ASN.1 description.\n\nBug: 14471\nChange-Id: I805f4ce09347bc35143b010b4a558a0d090c0159\nReviewed-on: https://code.wireshark.org/review/26259\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "before_after_code_files": [
      "epan/dissectors/asn1/nbap/nbap.cnf||epan/dissectors/asn1/nbap/nbap.cnf",
      "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c",
      "epan/dissectors/packet-umts_fp.h||epan/dissectors/packet-umts_fp.h"
    ]
  },
  "patch_diff": {
    "epan/dissectors/asn1/nbap/nbap.cnf||epan/dissectors/asn1/nbap/nbap.cnf": [
      "File: epan/dissectors/asn1/nbap/nbap.cnf -> epan/dissectors/asn1/nbap/nbap.cnf",
      "--- Hunk 1 ---",
      "[Context before]",
      "909:   if(num_dch_in_flow>0){",
      "910:       guint32 prev_dch_id = private_data_get_prev_dch_id(actx->pinfo);",
      "911:       nbap_dch_chnl_info[dch_id].next_dch = 0;",
      "913:           nbap_dch_chnl_info[prev_dch_id].next_dch = dch_id;",
      "914:       }",
      "915:   }",
      "",
      "[Removed Lines]",
      "912:       if(prev_dch_id != 0 && prev_dch_id != 0xffffffff){",
      "",
      "[Added Lines]",
      "912:       if(prev_dch_id != 0 && prev_dch_id != 0xffffffff && prev_dch_id != dch_id){",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1161:     nbap_debug(\"    commontransportchannelid %%u next ch %%u\",common_transport_channel_id, nbap_dch_chnl_info[i].next_dch);",
      "1163:     umts_fp_conversation_info->dch_ids_in_flow_list[0] = common_transport_channel_id;",
      "1165:       i = nbap_dch_chnl_info[i].next_dch;",
      "1166:       umts_fp_conversation_info->num_dch_in_flow++;",
      "1167:       umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
      "",
      "[Removed Lines]",
      "1164:     while(nbap_dch_chnl_info[i].next_dch != 0){",
      "",
      "[Added Lines]",
      "1164:     while(nbap_dch_chnl_info[i].next_dch != 0 && umts_fp_conversation_info->num_dch_in_flow < FP_maxNrOfDCHs){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1267:     i = common_physical_channel_id;",
      "1268:     umts_fp_conversation_info->dch_ids_in_flow_list[0] = common_physical_channel_id;",
      "1270:       i = nbap_dch_chnl_info[i].next_dch;",
      "1271:       umts_fp_conversation_info->num_dch_in_flow++;",
      "1272:       umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
      "",
      "[Removed Lines]",
      "1269:     while(nbap_dch_chnl_info[i].next_dch != 0){",
      "",
      "[Added Lines]",
      "1269:     while(nbap_dch_chnl_info[i].next_dch != 0 && umts_fp_conversation_info->num_dch_in_flow < FP_maxNrOfDCHs){",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1533:                     i = dch_id;",
      "1534:                     umts_fp_conversation_info->dch_ids_in_flow_list[0] = dch_id;",
      "1536:                         i = nbap_dch_chnl_info[i].next_dch;",
      "1537:                         umts_fp_conversation_info->num_dch_in_flow++;",
      "",
      "[Removed Lines]",
      "1535:                     while(nbap_dch_chnl_info[i].next_dch != 0){",
      "",
      "[Added Lines]",
      "1535:                     while(nbap_dch_chnl_info[i].next_dch != 0 && umts_fp_conversation_info->num_dch_in_flow < FP_maxNrOfDCHs){",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c": [
      "File: epan/dissectors/packet-nbap.c -> epan/dissectors/packet-nbap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "15425:   if(num_dch_in_flow>0){",
      "15426:       guint32 prev_dch_id = private_data_get_prev_dch_id(actx->pinfo);",
      "15427:       nbap_dch_chnl_info[dch_id].next_dch = 0;",
      "15429:           nbap_dch_chnl_info[prev_dch_id].next_dch = dch_id;",
      "15430:       }",
      "15431:   }",
      "",
      "[Removed Lines]",
      "15428:       if(prev_dch_id != 0 && prev_dch_id != 0xffffffff){",
      "",
      "[Added Lines]",
      "15428:       if(prev_dch_id != 0 && prev_dch_id != 0xffffffff && prev_dch_id != dch_id){",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "29669:                     i = dch_id;",
      "29670:                     umts_fp_conversation_info->dch_ids_in_flow_list[0] = dch_id;",
      "29672:                         i = nbap_dch_chnl_info[i].next_dch;",
      "29673:                         umts_fp_conversation_info->num_dch_in_flow++;",
      "",
      "[Removed Lines]",
      "29671:                     while(nbap_dch_chnl_info[i].next_dch != 0){",
      "",
      "[Added Lines]",
      "29671:                     while(nbap_dch_chnl_info[i].next_dch != 0 && umts_fp_conversation_info->num_dch_in_flow < FP_maxNrOfDCHs){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "33380:     i = common_physical_channel_id;",
      "33381:     umts_fp_conversation_info->dch_ids_in_flow_list[0] = common_physical_channel_id;",
      "33383:       i = nbap_dch_chnl_info[i].next_dch;",
      "33384:       umts_fp_conversation_info->num_dch_in_flow++;",
      "33385:       umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
      "",
      "[Removed Lines]",
      "33382:     while(nbap_dch_chnl_info[i].next_dch != 0){",
      "",
      "[Added Lines]",
      "33382:     while(nbap_dch_chnl_info[i].next_dch != 0 && umts_fp_conversation_info->num_dch_in_flow < FP_maxNrOfDCHs){",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "33557:     nbap_debug(\"    commontransportchannelid %u next ch %u\",common_transport_channel_id, nbap_dch_chnl_info[i].next_dch);",
      "33559:     umts_fp_conversation_info->dch_ids_in_flow_list[0] = common_transport_channel_id;",
      "33561:       i = nbap_dch_chnl_info[i].next_dch;",
      "33562:       umts_fp_conversation_info->num_dch_in_flow++;",
      "33563:       umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
      "",
      "[Removed Lines]",
      "33560:     while(nbap_dch_chnl_info[i].next_dch != 0){",
      "",
      "[Added Lines]",
      "33560:     while(nbap_dch_chnl_info[i].next_dch != 0 && umts_fp_conversation_info->num_dch_in_flow < FP_maxNrOfDCHs){",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-umts_fp.h||epan/dissectors/packet-umts_fp.h": [
      "File: epan/dissectors/packet-umts_fp.h -> epan/dissectors/packet-umts_fp.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "195:     gint num_dch_in_flow;",
      "",
      "[Removed Lines]",
      "196:     gint dch_ids_in_flow_list[FP_maxNrOfTFs];",
      "198:     fp_dch_channel_info_t fp_dch_channel_info[FP_maxNrOfTFs];",
      "",
      "[Added Lines]",
      "196:     gint dch_ids_in_flow_list[FP_maxNrOfDCHs];",
      "198:     fp_dch_channel_info_t fp_dch_channel_info[FP_maxNrOfDCHs];",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bb470c9067a1f44b2665d26d1af38efa722e30a1",
      "candidate_info": {
        "commit_hash": "bb470c9067a1f44b2665d26d1af38efa722e30a1",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/bb470c9067a1f44b2665d26d1af38efa722e30a1",
        "files": [
          "epan/dissectors/asn1/nbap/nbap.cnf",
          "epan/dissectors/asn1/nbap/packet-nbap-template.c",
          "epan/dissectors/packet-nbap.c",
          "epan/dissectors/packet-umts_fp.c"
        ],
        "message": "NBAP: improve conversation management\n\nKeeps the address of the newly opened channels in the CTCH-SetupRqst message\nto match them with the addresses sent in the Respone message to get exatch\nmatch of the conversation.\n\nChange-Id: I445e08480ddd178f65979b9fbc91c6031e206a61\nReviewed-on: https://code.wireshark.org/review/22271\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/asn1/nbap/nbap.cnf||epan/dissectors/asn1/nbap/nbap.cnf",
          "epan/dissectors/asn1/nbap/packet-nbap-template.c||epan/dissectors/asn1/nbap/packet-nbap-template.c",
          "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c",
          "epan/dissectors/packet-umts_fp.c||epan/dissectors/packet-umts_fp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/asn1/nbap/nbap.cnf||epan/dissectors/asn1/nbap/nbap.cnf",
            "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c"
          ],
          "candidate": [
            "epan/dissectors/asn1/nbap/nbap.cnf||epan/dissectors/asn1/nbap/nbap.cnf",
            "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/asn1/nbap/nbap.cnf||epan/dissectors/asn1/nbap/nbap.cnf": [
          "File: epan/dissectors/asn1/nbap/nbap.cnf -> epan/dissectors/asn1/nbap/nbap.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: #.END",
          "112: #.FN_PARS InitiatingMessage/value  FN_VARIANT=_pdu_new  TYPE_REF_FN=dissect_InitiatingMessageValue",
          "114: #.FN_PARS SuccessfulOutcome/value  FN_VARIANT=_pdu_new  TYPE_REF_FN=dissect_SuccessfulOutcomeValue",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: #.FN_PARS TransactionID/shortTransActionId VAL_PTR = &TransactionID",
          "114: #.FN_PARS TransactionID/longTransActionId VAL_PTR = &TransactionID",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165: # CommonTransportChannelSetupRequestTDD",
          "166: # CommonTransportChannelSetupResponse",
          "167: # CommonTransportChannelSetupFailure",
          "168: # CommonTransportChannelReconfigurationRequestFDD",
          "169: # CommonTransportChannelReconfigurationResponse",
          "170: # CommonTransportChannelReconfigurationFailure",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172: # CommonTransportChannel-InformationResponse",
          "173: # CommonTransportChannel-InformationResponse",
          "174: #.FN_BODY CommonTransportChannel-InformationResponse",
          "175: address dst_addr;",
          "176: nbap_setup_conv_t *request_conv;",
          "177: conversation_t *conv;",
          "179: nbap_debug(\"Frame %%u CommonTransportChannel-InformationResponse Start\", actx->pinfo->num);",
          "181: transportLayerAddress_ipv4 = 0;",
          "182: BindingID_port = 0;",
          "184: %(DEFAULT_BODY)s",
          "186:   if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0){",
          "187:     return offset;",
          "188:   }",
          "190:   set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "192:   request_conv = find_setup_conv(TransactionID, ddMode, commontransportchannelid);",
          "194:   if(request_conv == NULL){",
          "195:     return offset;",
          "196:   }",
          "198:   conv = request_conv->conv;",
          "199:   conversation_set_addr2(conv, &dst_addr);",
          "200:   conversation_set_port2(conv, BindingID_port);",
          "202:   delete_setup_conv(request_conv);",
          "203:   nbap_debug(\"    Frame %%u conversation setup frame: %%u %%s:%%u -> %%s:%%u\", actx->pinfo->num, conv->setup_frame,",
          "204:             address_to_str(wmem_packet_scope(), &conv->key_ptr->addr1), conv->key_ptr->port1,",
          "205:             address_to_str(wmem_packet_scope(), &conv->key_ptr->addr2), conv->key_ptr->port2);",
          "207:   nbap_debug(\"Frame %%u CommonTransportChannel-InformationResponse End\", actx->pinfo->num);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "746:   }",
          "748: #.FN_BODY RACH-ParametersItem-CTCH-SetupRqstFDD",
          "750: conversation_t *conversation;",
          "751: fp_rach_channel_info_t* fp_rach_channel_info;",
          "752: umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "",
          "[Removed Lines]",
          "749: address     dst_addr, null_addr;",
          "",
          "[Added Lines]",
          "790: address dst_addr, null_addr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "759: %(DEFAULT_BODY)s",
          "823: #.FN_BODY PICH-Mode VAL_PTR = &PICH_Mode",
          "824: guint32 PICH_Mode = 0;",
          "825: %(DEFAULT_BODY)s",
          "",
          "[Removed Lines]",
          "761:         if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "762:         {",
          "763:             return offset;",
          "764:         }",
          "765:         clear_address(&null_addr);",
          "767:         set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "769:         conversation = find_conversation(actx->pinfo->num,&dst_addr,",
          "770:             &null_addr, PT_UDP, BindingID_port,",
          "771:             0, NO_ADDR_B|NO_PORT_B);",
          "773:         if (conversation == NULL) {",
          "775:             conversation = conversation_new(actx->pinfo->num, &dst_addr,",
          "776:                 &null_addr, PT_UDP,BindingID_port ,",
          "777:                 0, NO_ADDR2|NO_PORT2);",
          "780:             conversation_set_dissector(conversation, fp_handle);",
          "781:             if(actx->pinfo->link_dir==P2P_DIR_DL){",
          "782:                 umts_fp_conversation_info = wmem_new0(wmem_file_scope(), umts_fp_conversation_info_t);",
          "784:                 umts_fp_conversation_info->iface_type        = IuB_Interface;",
          "785:                 umts_fp_conversation_info->division          = Division_FDD;",
          "786:                 umts_fp_conversation_info->channel           = CHANNEL_RACH_FDD;",
          "787:                 umts_fp_conversation_info->dl_frame_number   = 0;",
          "788:                 umts_fp_conversation_info->ul_frame_number   = actx->pinfo->num;",
          "789:                 copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "790:                 umts_fp_conversation_info->crnc_port         = BindingID_port;",
          "791:                 umts_fp_conversation_info->rlc_mode          = FP_RLC_MODE_UNKNOWN;",
          "794:                 fp_rach_channel_info = wmem_new0(wmem_file_scope(), fp_rach_channel_info_t);",
          "795:                 fp_rach_channel_info->crnti_to_urnti_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "796:                 umts_fp_conversation_info->channel_specific_info = (void*)fp_rach_channel_info;",
          "800:                 umts_fp_conversation_info->com_context_id = crcn_context_present ?  com_context_id : 1;",
          "803:                 umts_fp_conversation_info->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "805:                 umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_ul_chans;",
          "806:                 for (j = 0; j < num_tf; j++) {",
          "807:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_tf_size[j];",
          "808:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_num_tbs[j];",
          "809:                 }",
          "812:                 umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_dl_chans;",
          "813:                 for (j = 0; j < num_tf; j++) {",
          "814:                     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_tf_size[j];",
          "815:                     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_num_tbs[j];",
          "816:                 }",
          "818:                 umts_fp_conversation_info->dch_ids_in_flow_list[0] = commonphysicalchannelid;",
          "819:                 umts_fp_conversation_info->num_dch_in_flow=1;",
          "820:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "821:             }",
          "822:         }",
          "",
          "[Added Lines]",
          "802:   if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "803:   {",
          "804:     return offset;",
          "805:   }",
          "806:   clear_address(&null_addr);",
          "808:   set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "810:   conversation = conversation_new(actx->pinfo->num, &dst_addr, &null_addr, PT_UDP,BindingID_port, 0, NO_ADDR2|NO_PORT2);",
          "812:   conversation_set_dissector(conversation, fp_handle);",
          "814:   if(actx->pinfo->link_dir==P2P_DIR_DL){",
          "815:     umts_fp_conversation_info = wmem_new0(wmem_file_scope(), umts_fp_conversation_info_t);",
          "817:     umts_fp_conversation_info->iface_type        = IuB_Interface;",
          "818:     umts_fp_conversation_info->division          = Division_FDD;",
          "819:     umts_fp_conversation_info->channel           = CHANNEL_RACH_FDD;",
          "820:     umts_fp_conversation_info->dl_frame_number   = 0;",
          "821:     umts_fp_conversation_info->ul_frame_number   = actx->pinfo->num;",
          "822:     copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "823:     umts_fp_conversation_info->crnc_port         = BindingID_port;",
          "824:     umts_fp_conversation_info->rlc_mode          = FP_RLC_MODE_UNKNOWN;",
          "827:     fp_rach_channel_info = wmem_new0(wmem_file_scope(), fp_rach_channel_info_t);",
          "828:     fp_rach_channel_info->crnti_to_urnti_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "829:     umts_fp_conversation_info->channel_specific_info = (void*)fp_rach_channel_info;",
          "833:     umts_fp_conversation_info->com_context_id = crcn_context_present ?  com_context_id : 1;",
          "836:     umts_fp_conversation_info->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "838:     umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_ul_chans;",
          "839:     for (j = 0; j < num_tf; j++) {",
          "840:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_tf_size[j];",
          "841:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_num_tbs[j];",
          "842:     }",
          "845:     umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_dl_chans;",
          "846:     for (j = 0; j < num_tf; j++) {",
          "847:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_tf_size[j];",
          "848:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_num_tbs[j];",
          "849:     }",
          "851:     umts_fp_conversation_info->dch_ids_in_flow_list[0] = commonphysicalchannelid;",
          "852:     umts_fp_conversation_info->num_dch_in_flow=1;",
          "853:     set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "856:     add_setup_conv(TransactionID, ddMode, commontransportchannelid, actx->pinfo->num, &dst_addr, BindingID_port, umts_fp_conversation_info, conversation);",
          "857:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "844: #.FN_BODY PCH-ParametersItem-CTCH-SetupRqstFDD",
          "847: conversation_t *conversation;",
          "849: fp_pch_channel_info_t *fp_pch_channel_info;",
          "",
          "[Removed Lines]",
          "846: address     dst_addr, null_addr;",
          "",
          "[Added Lines]",
          "882: address dst_addr, null_addr;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "859: %(DEFAULT_BODY)s",
          "959: #.FN_BODY FACH-ParametersItem-CTCH-SetupRqstFDD",
          "961: conversation_t *conversation;",
          "963: fp_fach_channel_info_t* fp_fach_channel_info;",
          "",
          "[Removed Lines]",
          "861:         if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "862:         {",
          "863:             return offset;",
          "864:         }",
          "865:         clear_address(&null_addr);",
          "867:         set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "869:         conversation = find_conversation(actx->pinfo->num,&dst_addr,",
          "870:             &null_addr, PT_UDP, BindingID_port,",
          "871:             0, NO_ADDR_B|NO_PORT_B);",
          "873:         if (conversation == NULL) {",
          "875:             conversation = conversation_new(actx->pinfo->num, &dst_addr,",
          "876:                 &null_addr, PT_UDP,BindingID_port ,",
          "877:                 0, NO_ADDR2|NO_PORT2);",
          "880:             conversation_set_dissector(conversation, fp_handle);",
          "881:             if(actx->pinfo->link_dir==P2P_DIR_DL){",
          "882:                 umts_fp_conversation_info = wmem_new0(wmem_file_scope(), umts_fp_conversation_info_t);",
          "884:                 umts_fp_conversation_info->iface_type         = IuB_Interface;",
          "885:                 umts_fp_conversation_info->division           = Division_FDD;",
          "886:                 umts_fp_conversation_info->channel            = CHANNEL_PCH;",
          "887:                 umts_fp_conversation_info->dl_frame_number    = 0;",
          "888:                 umts_fp_conversation_info->ul_frame_number    = actx->pinfo->num;",
          "889:                 copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "890:                 umts_fp_conversation_info->crnc_port          = BindingID_port;",
          "891:                 umts_fp_conversation_info->rlc_mode           = FP_RLC_MODE_UNKNOWN;",
          "893:                 fp_pch_channel_info = wmem_new0(wmem_file_scope(), fp_pch_channel_info_t);",
          "894:                 fp_pch_channel_info->paging_indications = paging_indications;",
          "895:                 umts_fp_conversation_info->channel_specific_info = (void*)fp_pch_channel_info;",
          "898:                 umts_fp_conversation_info->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "900:                 umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[commontransportchannelid].num_ul_chans;",
          "902:                 nbap_debug(\"Frame %%u PCH-ParametersItem-CTCH-SetupRqstFDD Start: num_tf %%u\",",
          "903:                         actx->pinfo->num,",
          "904:                         num_tf);",
          "906:                 for (j = 0; j < num_tf; j++) {",
          "907:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[commontransportchannelid].ul_chan_tf_size[j];",
          "908:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[commontransportchannelid].ul_chan_num_tbs[j];",
          "909:                     nbap_debug(\"    UL tf %%u ul_chan_tf_size %%u\",j, nbap_dch_chnl_info[commontransportchannelid].ul_chan_tf_size[j]);",
          "910:                 }",
          "913:                 umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[commontransportchannelid].num_dl_chans;",
          "914:                 for (j = 0; j < num_tf; j++) {",
          "915:                     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[commontransportchannelid].dl_chan_tf_size[j];",
          "916:                     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[commontransportchannelid].dl_chan_num_tbs[j];",
          "917:                     nbap_debug(\"    DL tf %%u ul_chan_tf_size %%u\",j, nbap_dch_chnl_info[commontransportchannelid].dl_chan_tf_size[j]);",
          "918:                 }",
          "921:                 i = commontransportchannelid;",
          "923:                 nbap_debug(\"    commontransportchannelid %%u next ch %%u\",commontransportchannelid, nbap_dch_chnl_info[i].next_dch);",
          "925:                 umts_fp_conversation_info->dch_ids_in_flow_list[0] = commontransportchannelid;",
          "926:                 while(nbap_dch_chnl_info[i].next_dch != 0){",
          "927:                     i = nbap_dch_chnl_info[i].next_dch;",
          "928:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "929:                     umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "931:                     umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_ul_chans = num_tf = nbap_dch_chnl_info[i].num_ul_chans;",
          "932:                     for (j = 0; j < num_tf; j++) {",
          "933:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_tf_size[j] = nbap_dch_chnl_info[i].ul_chan_tf_size[j];",
          "934:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_num_tbs[j] = nbap_dch_chnl_info[i].ul_chan_num_tbs[j];",
          "935:                     }",
          "938:                     umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_dl_chans = num_tf = nbap_dch_chnl_info[i].num_dl_chans;",
          "939:                     for (j = 0; j < num_tf; j++) {",
          "940:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_tf_size[j] = nbap_dch_chnl_info[i].dl_chan_tf_size[j];",
          "941:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_num_tbs[j] = nbap_dch_chnl_info[i].dl_chan_num_tbs[j];",
          "942:                     }",
          "943:                 }",
          "944:                 umts_fp_conversation_info->num_dch_in_flow++;",
          "946:                 nbap_debug(\"    num_dch_in_flow %%u\", umts_fp_conversation_info->num_dch_in_flow);",
          "948:                 umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "949:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "951:                 nbap_debug(\"Frame %%u PCH-ParametersItem-CTCH-SetupRqstFDD End\",",
          "952:                         actx->pinfo->num);",
          "954:             }",
          "956:         }",
          "960: address     dst_addr, null_addr;",
          "",
          "[Added Lines]",
          "897:   if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "898:   {",
          "899:     return offset;",
          "900:   }",
          "901:   clear_address(&null_addr);",
          "903:   set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "905:   conversation = conversation_new(actx->pinfo->num, &dst_addr, &null_addr, PT_UDP,BindingID_port, 0, NO_ADDR2|NO_PORT2);",
          "908:   conversation_set_dissector(conversation, fp_handle);",
          "910:   if(actx->pinfo->link_dir==P2P_DIR_DL){",
          "911:     umts_fp_conversation_info = wmem_new0(wmem_file_scope(), umts_fp_conversation_info_t);",
          "913:     umts_fp_conversation_info->iface_type         = IuB_Interface;",
          "914:     umts_fp_conversation_info->division           = Division_FDD;",
          "915:     umts_fp_conversation_info->channel            = CHANNEL_PCH;",
          "916:     umts_fp_conversation_info->dl_frame_number    = 0;",
          "917:     umts_fp_conversation_info->ul_frame_number    = actx->pinfo->num;",
          "918:     copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "919:     umts_fp_conversation_info->crnc_port          = BindingID_port;",
          "920:     umts_fp_conversation_info->rlc_mode           = FP_RLC_MODE_UNKNOWN;",
          "922:     fp_pch_channel_info = wmem_new0(wmem_file_scope(), fp_pch_channel_info_t);",
          "923:     fp_pch_channel_info->paging_indications = paging_indications;",
          "924:     umts_fp_conversation_info->channel_specific_info = (void*)fp_pch_channel_info;",
          "927:     umts_fp_conversation_info->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "929:     umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[commontransportchannelid].num_ul_chans;",
          "931:     nbap_debug(\"Frame %%u PCH-ParametersItem-CTCH-SetupRqstFDD Start: num_tf %%u\", actx->pinfo->num, num_tf);",
          "933:     for (j = 0; j < num_tf; j++) {",
          "934:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[commontransportchannelid].ul_chan_tf_size[j];",
          "935:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[commontransportchannelid].ul_chan_num_tbs[j];",
          "936:       nbap_debug(\"    UL tf %%u ul_chan_tf_size %%u\",j, nbap_dch_chnl_info[commontransportchannelid].ul_chan_tf_size[j]);",
          "937:     }",
          "940:     umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[commontransportchannelid].num_dl_chans;",
          "941:     for (j = 0; j < num_tf; j++) {",
          "942:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[commontransportchannelid].dl_chan_tf_size[j];",
          "943:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[commontransportchannelid].dl_chan_num_tbs[j];",
          "944:       nbap_debug(\"    DL tf %%u ul_chan_tf_size %%u\",j, nbap_dch_chnl_info[commontransportchannelid].dl_chan_tf_size[j]);",
          "945:     }",
          "948:     i = commontransportchannelid;",
          "950:     nbap_debug(\"    commontransportchannelid %%u next ch %%u\",commontransportchannelid, nbap_dch_chnl_info[i].next_dch);",
          "952:     umts_fp_conversation_info->dch_ids_in_flow_list[0] = commontransportchannelid;",
          "953:     while(nbap_dch_chnl_info[i].next_dch != 0){",
          "954:       i = nbap_dch_chnl_info[i].next_dch;",
          "955:       umts_fp_conversation_info->num_dch_in_flow++;",
          "956:       umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "958:       umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_ul_chans = num_tf = nbap_dch_chnl_info[i].num_ul_chans;",
          "959:       for (j = 0; j < num_tf; j++) {",
          "960:         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_tf_size[j] = nbap_dch_chnl_info[i].ul_chan_tf_size[j];",
          "961:         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_num_tbs[j] = nbap_dch_chnl_info[i].ul_chan_num_tbs[j];",
          "962:       }",
          "965:       umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_dl_chans = num_tf = nbap_dch_chnl_info[i].num_dl_chans;",
          "966:       for (j = 0; j < num_tf; j++) {",
          "967:         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_tf_size[j] = nbap_dch_chnl_info[i].dl_chan_tf_size[j];",
          "968:         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_num_tbs[j] = nbap_dch_chnl_info[i].dl_chan_num_tbs[j];",
          "969:       }",
          "970:     }",
          "971:     umts_fp_conversation_info->num_dch_in_flow++;",
          "973:     nbap_debug(\"    num_dch_in_flow %%u\", umts_fp_conversation_info->num_dch_in_flow);",
          "975:     umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "976:     set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "979:     add_setup_conv(TransactionID, ddMode, commontransportchannelid, actx->pinfo->num, &dst_addr, BindingID_port, umts_fp_conversation_info, conversation);",
          "981:     nbap_debug(\"Frame %%u PCH-ParametersItem-CTCH-SetupRqstFDD End\", actx->pinfo->num);",
          "982:   }",
          "985: address dst_addr, null_addr;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "972: %(DEFAULT_BODY)s",
          "1057: #.FN_HDR DCH-Specific-FDD-InformationList",
          "1058:     g_num_dch_in_flow = 0;",
          "",
          "[Removed Lines]",
          "974:         if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "975:         {",
          "976:             return offset;",
          "977:         }",
          "978:         clear_address(&null_addr);",
          "980:         set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "982:         conversation = find_conversation(actx->pinfo->num,&dst_addr,",
          "983:             &null_addr, PT_UDP, BindingID_port,",
          "984:             0, NO_ADDR_B|NO_PORT_B);",
          "986:         if (conversation == NULL) {",
          "988:             conversation = conversation_new(actx->pinfo->num, &dst_addr,",
          "989:                 &null_addr, PT_UDP,BindingID_port ,",
          "990:                 0, NO_ADDR2|NO_PORT2);",
          "993:             conversation_set_dissector(conversation, fp_handle);",
          "994:             if(actx->pinfo->link_dir==P2P_DIR_DL){",
          "995:                 umts_fp_conversation_info = wmem_new0(wmem_file_scope(), umts_fp_conversation_info_t);",
          "997:                 umts_fp_conversation_info->iface_type        = IuB_Interface;",
          "998:                 umts_fp_conversation_info->division          = Division_FDD;",
          "999:                 umts_fp_conversation_info->channel           = CHANNEL_FACH_FDD;",
          "1000:                 umts_fp_conversation_info->dl_frame_number   = 0;",
          "1001:                 umts_fp_conversation_info->ul_frame_number   = actx->pinfo->num;",
          "1002:                 copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "1003:                 umts_fp_conversation_info->crnc_port         = BindingID_port;",
          "1004:                 umts_fp_conversation_info->rlc_mode          = FP_RLC_MODE_UNKNOWN;",
          "1006:                 umts_fp_conversation_info->com_context_id = crcn_context_present ? com_context_id : 1;",
          "1009:                 fp_fach_channel_info = wmem_new0(wmem_file_scope(), fp_fach_channel_info_t);",
          "1010:                 fp_fach_channel_info->crnti_to_urnti_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "1011:                 umts_fp_conversation_info->channel_specific_info = (void*)fp_fach_channel_info;",
          "1014:                 umts_fp_conversation_info->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "1016:                 umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_ul_chans;",
          "1017:                 for (j = 0; j < num_tf; j++) {",
          "1018:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_tf_size[j];",
          "1019:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_num_tbs[j];",
          "1020:                 }",
          "1023:                 umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_dl_chans;",
          "1024:                 for (j = 0; j < num_tf; j++) {",
          "1025:                     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_tf_size[j];",
          "1026:                     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_num_tbs[j];",
          "1027:                 }",
          "1030:                 i = commonphysicalchannelid;",
          "1031:                 umts_fp_conversation_info->dch_ids_in_flow_list[0] = commonphysicalchannelid;",
          "1032:                 while(nbap_dch_chnl_info[i].next_dch != 0){",
          "1033:                     i = nbap_dch_chnl_info[i].next_dch;",
          "1034:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "1035:                     umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "1037:                     umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_ul_chans = num_tf = nbap_dch_chnl_info[i].num_ul_chans;",
          "1038:                     for (j = 0; j < num_tf; j++) {",
          "1039:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_tf_size[j] = nbap_dch_chnl_info[i].ul_chan_tf_size[j];",
          "1040:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_num_tbs[j] = nbap_dch_chnl_info[i].ul_chan_num_tbs[j];",
          "1041:                     }",
          "1044:                     umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_dl_chans = num_tf = nbap_dch_chnl_info[i].num_dl_chans;",
          "1045:                     for (j = 0; j < num_tf; j++) {",
          "1046:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_tf_size[j] = nbap_dch_chnl_info[i].dl_chan_tf_size[j];",
          "1047:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_num_tbs[j] = nbap_dch_chnl_info[i].dl_chan_num_tbs[j];",
          "1048:                     }",
          "1049:                 }",
          "1050:                 umts_fp_conversation_info->num_dch_in_flow++;",
          "1051:                 umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "1052:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "1053:             }",
          "1055:         }",
          "",
          "[Added Lines]",
          "999:   if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "1000:   {",
          "1001:     return offset;",
          "1002:   }",
          "1003:   clear_address(&null_addr);",
          "1005:   set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "1007:   conversation = conversation_new(actx->pinfo->num, &dst_addr, &null_addr, PT_UDP,BindingID_port, 0, NO_ADDR2|NO_PORT2);",
          "1010:   conversation_set_dissector(conversation, fp_handle);",
          "1012:   if(actx->pinfo->link_dir==P2P_DIR_DL){",
          "1013:     umts_fp_conversation_info = wmem_new0(wmem_file_scope(), umts_fp_conversation_info_t);",
          "1015:     umts_fp_conversation_info->iface_type        = IuB_Interface;",
          "1016:     umts_fp_conversation_info->division          = Division_FDD;",
          "1017:     umts_fp_conversation_info->channel           = CHANNEL_FACH_FDD;",
          "1018:     umts_fp_conversation_info->dl_frame_number   = 0;",
          "1019:     umts_fp_conversation_info->ul_frame_number   = actx->pinfo->num;",
          "1020:     copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "1021:     umts_fp_conversation_info->crnc_port         = BindingID_port;",
          "1022:     umts_fp_conversation_info->rlc_mode          = FP_RLC_MODE_UNKNOWN;",
          "1024:     umts_fp_conversation_info->com_context_id = crcn_context_present ? com_context_id : 1;",
          "1027:     fp_fach_channel_info = wmem_new0(wmem_file_scope(), fp_fach_channel_info_t);",
          "1028:     fp_fach_channel_info->crnti_to_urnti_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "1029:     umts_fp_conversation_info->channel_specific_info = (void*)fp_fach_channel_info;",
          "1032:     umts_fp_conversation_info->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "1034:     umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_ul_chans;",
          "1035:     for (j = 0; j < num_tf; j++) {",
          "1036:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_tf_size[j];",
          "1037:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_num_tbs[j];",
          "1038:     }",
          "1041:     umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_dl_chans;",
          "1042:     for (j = 0; j < num_tf; j++) {",
          "1043:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_tf_size[j];",
          "1044:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_num_tbs[j];",
          "1045:     }",
          "1048:     i = commonphysicalchannelid;",
          "1049:     umts_fp_conversation_info->dch_ids_in_flow_list[0] = commonphysicalchannelid;",
          "1050:     while(nbap_dch_chnl_info[i].next_dch != 0){",
          "1051:       i = nbap_dch_chnl_info[i].next_dch;",
          "1052:       umts_fp_conversation_info->num_dch_in_flow++;",
          "1053:       umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "1055:       umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_ul_chans = num_tf = nbap_dch_chnl_info[i].num_ul_chans;",
          "1056:       for (j = 0; j < num_tf; j++) {",
          "1057:         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_tf_size[j] = nbap_dch_chnl_info[i].ul_chan_tf_size[j];",
          "1058:         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_num_tbs[j] = nbap_dch_chnl_info[i].ul_chan_num_tbs[j];",
          "1059:       }",
          "1062:       umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_dl_chans = num_tf = nbap_dch_chnl_info[i].num_dl_chans;",
          "1063:       for (j = 0; j < num_tf; j++) {",
          "1064:         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_tf_size[j] = nbap_dch_chnl_info[i].dl_chan_tf_size[j];",
          "1065:         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_num_tbs[j] = nbap_dch_chnl_info[i].dl_chan_num_tbs[j];",
          "1066:       }",
          "1067:     }",
          "1068:     umts_fp_conversation_info->num_dch_in_flow++;",
          "1069:     umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "1070:     set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "1073:     add_setup_conv(TransactionID, ddMode, commontransportchannelid, actx->pinfo->num, &dst_addr, BindingID_port, umts_fp_conversation_info, conversation);",
          "1074:   }",
          "",
          "---------------"
        ],
        "epan/dissectors/asn1/nbap/packet-nbap-template.c||epan/dissectors/asn1/nbap/packet-nbap-template.c": [
          "File: epan/dissectors/asn1/nbap/packet-nbap-template.c -> epan/dissectors/asn1/nbap/packet-nbap-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: #define NBAP_IGNORE_PORT 255",
          "58: #define nbap_debug(...) g_warning(__VA_ARGS__)",
          "59: #else",
          "60: #define nbap_debug(...)",
          "",
          "[Removed Lines]",
          "57: #if 0",
          "",
          "[Added Lines]",
          "57: #define DEBUG_NBAP 0",
          "58: #if DEBUG_NBAP",
          "59: #include <epan/to_str.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102: static dissector_handle_t nbap_handle;",
          "107: struct _nbap_msg_info_for_fp",
          "108: {",
          "114: };",
          "116: typedef struct",
          "117: {",
          "127: }nbap_dch_channel_info_t;",
          "129: nbap_dch_channel_info_t nbap_dch_chnl_info[256];",
          "",
          "[Removed Lines]",
          "109:  guint32 ProcedureCode;",
          "110:  guint32 ddMode;",
          "111:  gboolean is_uplink;",
          "118:  gint num_dch_in_flow;",
          "119:  gint next_dch;",
          "120:  gint num_ul_chans;",
          "121:  gint ul_chan_tf_size[MAX_FP_CHANS];",
          "122:  gint ul_chan_num_tbs[MAX_FP_CHANS];",
          "123:  gint num_dl_chans;",
          "124:  gint dl_chan_tf_size[MAX_FP_CHANS];",
          "125:  gint dl_chan_num_tbs[MAX_FP_CHANS];",
          "",
          "[Added Lines]",
          "112: typedef struct nbap_setup_conv",
          "113: {",
          "114:   guint32 transaction_id;",
          "115:   guint32 dd_mode;",
          "116:   guint32 channel_id;",
          "117:   guint32 request_frame_number;",
          "118:   address addr;",
          "119:   guint32 port;",
          "120:   umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "121:   conversation_t *conv;",
          "122: }nbap_setup_conv_t;",
          "128: static wmem_map_t *nbap_setup_conv_table;",
          "135:   guint32 ProcedureCode;",
          "136:   guint32 ddMode;",
          "137:   gboolean is_uplink;",
          "144:   gint num_dch_in_flow;",
          "145:   gint next_dch;",
          "146:   gint num_ul_chans;",
          "147:   gint ul_chan_tf_size[MAX_FP_CHANS];",
          "148:   gint ul_chan_num_tbs[MAX_FP_CHANS];",
          "149:   gint num_dl_chans;",
          "150:   gint dl_chan_tf_size[MAX_FP_CHANS];",
          "151:   gint dl_chan_num_tbs[MAX_FP_CHANS];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136: typedef struct",
          "137: {",
          "146: } nbap_edch_channel_info_t;",
          "148: nbap_edch_channel_info_t nbap_edch_channel_info[maxNrOfEDCHMACdFlows];",
          "151: typedef struct",
          "152: {",
          "156: } nbap_edch_port_info_t;",
          "159: typedef struct",
          "160: {",
          "166: } nbap_hsdsch_channel_info_t;",
          "168: nbap_hsdsch_channel_info_t nbap_hsdsch_channel_info[maxNrOfMACdFlows];",
          "170: typedef struct",
          "171: {",
          "176: } nbap_common_channel_info_t;",
          "180: gint g_num_dch_in_flow;",
          "182: gint g_dch_ids_in_flow_list[maxNrOfTFs];",
          "184: gint hsdsch_macdflow_ids[maxNrOfMACdFlows];",
          "",
          "[Removed Lines]",
          "138:  address  crnc_address;",
          "139:  guint16  crnc_port;",
          "140:  gint  no_ddi_entries;",
          "141:  guint8  edch_ddi[MAX_EDCH_DDIS];",
          "142:  guint  edch_macd_pdu_size[MAX_EDCH_DDIS];",
          "153:  guint32  crnc_address;",
          "154:  guint16  crnc_port[maxNrOfEDCHMACdFlows];",
          "161:  address    crnc_address;",
          "162:  guint16    crnc_port;",
          "163:  enum fp_rlc_mode rlc_mode;",
          "164:  guint32    hsdsch_physical_layer_category;",
          "172:  address    crnc_address;",
          "173:  guint16    crnc_port;",
          "174:  enum fp_rlc_mode rlc_mode;",
          "",
          "[Added Lines]",
          "163:   address crnc_address;",
          "164:   guint16 crnc_port;",
          "165:   gint no_ddi_entries;",
          "166:   guint8 edch_ddi[MAX_EDCH_DDIS];",
          "167:   guint edch_macd_pdu_size[MAX_EDCH_DDIS];",
          "176:   guint32 crnc_address;",
          "177:   guint16 crnc_port[maxNrOfEDCHMACdFlows];",
          "182:   address crnc_address;",
          "183:   guint16 crnc_port;",
          "184:   enum fp_rlc_mode rlc_mode;",
          "185:   guint32 hsdsch_physical_layer_category;",
          "193:  address crnc_address;",
          "194:  guint16 crnc_port;",
          "195:  enum fp_rlc_mode rlc_mode;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "193: typedef struct com_ctxt_{",
          "197: }nbap_com_context_id_t;",
          "199: gboolean crcn_context_present = FALSE;",
          "",
          "[Removed Lines]",
          "195:   guint crnc_context;",
          "196:   guint frame_num;",
          "",
          "[Added Lines]",
          "215:   guint crnc_context;",
          "216:   guint frame_num;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "206: static guint32 ProtocolIE_ID;",
          "207: static guint32 ddMode;",
          "208: static const gchar *ProcedureID;",
          "209: static guint32 t_dch_id, dch_id, prev_dch_id, commonphysicalchannelid, e_dch_macdflow_id, hsdsch_macdflow_id=3,",
          "211: static guint32 MACdPDU_Size, commontransportchannelid;",
          "212: static guint num_items;",
          "213: static gint paging_indications;",
          "",
          "[Removed Lines]",
          "210:     e_dch_ddi_value,logical_channel_id,common_macdflow_id;",
          "",
          "[Added Lines]",
          "229: static guint32 TransactionID;",
          "231:                 e_dch_ddi_value,logical_channel_id,common_macdflow_id;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "216: enum TransportFormatSet_type_enum",
          "217: {",
          "223: };",
          "225: enum TransportFormatSet_type_enum transportFormatSet_type;",
          "",
          "[Removed Lines]",
          "218:  NBAP_DCH_UL,",
          "219:  NBAP_DCH_DL,",
          "220:  NBAP_CPCH,",
          "221:  NBAP_FACH,",
          "222:  NBAP_PCH",
          "",
          "[Added Lines]",
          "239:   NBAP_DCH_UL,",
          "240:   NBAP_DCH_DL,",
          "241:   NBAP_CPCH,",
          "242:   NBAP_FACH,",
          "243:   NBAP_PCH",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "229: guint8 lchId_type_table[]= {",
          "246: };",
          "249: guint8 lchId_rlc_map[] = {",
          "266: };",
          "272: static int lch_contents[16] = {",
          "289: };",
          "290: static const enum_val_t content_types[] = {",
          "297: typedef struct {",
          "301: } preference_strings;",
          "303: static const preference_strings ch_strings[] = {",
          "322: static dissector_table_t nbap_ies_dissector_table;",
          "",
          "[Removed Lines]",
          "232:  MAC_CONTENT_DCCH,",
          "233:  MAC_CONTENT_DCCH,",
          "234:  MAC_CONTENT_DCCH,",
          "236:  MAC_CONTENT_CS_DTCH,",
          "237:  MAC_CONTENT_CS_DTCH,",
          "250:         0,",
          "252:         RLC_AM,",
          "253:         RLC_AM,",
          "254:         RLC_AM,",
          "256:         RLC_TM,",
          "258:         RLC_AM,",
          "259:         RLC_AM,",
          "260:         RLC_AM,",
          "261:         RLC_AM,",
          "262:         RLC_AM,",
          "263:         RLC_AM,",
          "264:         RLC_AM,",
          "273:  MAC_CONTENT_DCCH,",
          "274:  MAC_CONTENT_DCCH,",
          "275:  MAC_CONTENT_DCCH,",
          "276:  MAC_CONTENT_DCCH,",
          "277:  MAC_CONTENT_CS_DTCH,",
          "278:  MAC_CONTENT_CS_DTCH,",
          "279:  MAC_CONTENT_CS_DTCH,",
          "280:  MAC_CONTENT_DCCH,",
          "281:  MAC_CONTENT_PS_DTCH,",
          "282:  MAC_CONTENT_UNKNOWN,",
          "283:  MAC_CONTENT_PS_DTCH,",
          "284:  MAC_CONTENT_PS_DTCH,",
          "285:  MAC_CONTENT_CS_DTCH,",
          "286:  MAC_CONTENT_PS_DTCH,",
          "287:  MAC_CONTENT_CCCH,",
          "288:  MAC_CONTENT_DCCH",
          "291:  {\"MAC_CONTENT_UNKNOWN\", \"MAC_CONTENT_UNKNOWN\", MAC_CONTENT_UNKNOWN},",
          "292:  {\"MAC_CONTENT_DCCH\", \"MAC_CONTENT_DCCH\", MAC_CONTENT_DCCH},",
          "293:  {\"MAC_CONTENT_PS_DTCH\", \"MAC_CONTENT_PS_DTCH\", MAC_CONTENT_PS_DTCH},",
          "294:  {\"MAC_CONTENT_CS_DTCH\", \"MAC_CONTENT_CS_DTCH\", MAC_CONTENT_CS_DTCH},",
          "295:  {\"MAC_CONTENT_CCCH\", \"MAC_CONTENT_CCCH\", MAC_CONTENT_CCCH},",
          "296:  {NULL, NULL, -1}};",
          "298:  const char *name;",
          "299:  const char *title;",
          "300:  const char *description;",
          "304:  {\"lch1_content\", \"Logical Channel 1 Content\", \"foo\"},",
          "305:  {\"lch2_content\", \"Logical Channel 2 Content\", \"foo\"},",
          "306:  {\"lch3_content\", \"Logical Channel 3 Content\", \"foo\"},",
          "307:  {\"lch4_content\", \"Logical Channel 4 Content\", \"foo\"},",
          "308:  {\"lch5_content\", \"Logical Channel 5 Content\", \"foo\"},",
          "309:  {\"lch6_content\", \"Logical Channel 6 Content\", \"foo\"},",
          "310:  {\"lch7_content\", \"Logical Channel 7 Content\", \"foo\"},",
          "311:  {\"lch8_content\", \"Logical Channel 8 Content\", \"foo\"},",
          "312:  {\"lch9_content\", \"Logical Channel 9 Content\", \"foo\"},",
          "313:  {\"lch10_content\", \"Logical Channel 10 Content\", \"foo\"},",
          "314:  {\"lch11_content\", \"Logical Channel 11 Content\", \"foo\"},",
          "315:  {\"lch12_content\", \"Logical Channel 12 Content\", \"foo\"},",
          "316:  {\"lch13_content\", \"Logical Channel 13 Content\", \"foo\"},",
          "317:  {\"lch14_content\", \"Logical Channel 14 Content\", \"foo\"},",
          "318:  {\"lch15_content\", \"Logical Channel 15 Content\", \"foo\"},",
          "319:  {\"lch16_content\", \"Logical Channel 16 Content\", \"foo\"}};",
          "",
          "[Added Lines]",
          "253:   MAC_CONTENT_DCCH,",
          "254:   MAC_CONTENT_DCCH,",
          "255:   MAC_CONTENT_DCCH,",
          "257:   MAC_CONTENT_CS_DTCH,",
          "258:   MAC_CONTENT_CS_DTCH,",
          "271:   0,",
          "273:   RLC_AM,",
          "274:   RLC_AM,",
          "275:   RLC_AM,",
          "277:   RLC_TM,",
          "279:   RLC_AM,",
          "280:   RLC_AM,",
          "281:   RLC_AM,",
          "282:   RLC_AM,",
          "283:   RLC_AM,",
          "284:   RLC_AM,",
          "285:   RLC_AM,",
          "293:   MAC_CONTENT_DCCH,",
          "294:   MAC_CONTENT_DCCH,",
          "295:   MAC_CONTENT_DCCH,",
          "296:   MAC_CONTENT_DCCH,",
          "297:   MAC_CONTENT_CS_DTCH,",
          "298:   MAC_CONTENT_CS_DTCH,",
          "299:   MAC_CONTENT_CS_DTCH,",
          "300:   MAC_CONTENT_DCCH,",
          "301:   MAC_CONTENT_PS_DTCH,",
          "302:   MAC_CONTENT_UNKNOWN,",
          "303:   MAC_CONTENT_PS_DTCH,",
          "304:   MAC_CONTENT_PS_DTCH,",
          "305:   MAC_CONTENT_CS_DTCH,",
          "306:   MAC_CONTENT_PS_DTCH,",
          "307:   MAC_CONTENT_CCCH,",
          "308:   MAC_CONTENT_DCCH",
          "312:   {\"MAC_CONTENT_UNKNOWN\", \"MAC_CONTENT_UNKNOWN\", MAC_CONTENT_UNKNOWN},",
          "313:   {\"MAC_CONTENT_DCCH\", \"MAC_CONTENT_DCCH\", MAC_CONTENT_DCCH},",
          "314:   {\"MAC_CONTENT_PS_DTCH\", \"MAC_CONTENT_PS_DTCH\", MAC_CONTENT_PS_DTCH},",
          "315:   {\"MAC_CONTENT_CS_DTCH\", \"MAC_CONTENT_CS_DTCH\", MAC_CONTENT_CS_DTCH},",
          "316:   {\"MAC_CONTENT_CCCH\", \"MAC_CONTENT_CCCH\", MAC_CONTENT_CCCH},",
          "317:   {NULL, NULL, -1}};",
          "320:   const char *name;",
          "321:   const char *title;",
          "322:   const char *description;",
          "327:   {\"lch1_content\", \"Logical Channel 1 Content\", \"foo\"},",
          "328:   {\"lch2_content\", \"Logical Channel 2 Content\", \"foo\"},",
          "329:   {\"lch3_content\", \"Logical Channel 3 Content\", \"foo\"},",
          "330:   {\"lch4_content\", \"Logical Channel 4 Content\", \"foo\"},",
          "331:   {\"lch5_content\", \"Logical Channel 5 Content\", \"foo\"},",
          "332:   {\"lch6_content\", \"Logical Channel 6 Content\", \"foo\"},",
          "333:   {\"lch7_content\", \"Logical Channel 7 Content\", \"foo\"},",
          "334:   {\"lch8_content\", \"Logical Channel 8 Content\", \"foo\"},",
          "335:   {\"lch9_content\", \"Logical Channel 9 Content\", \"foo\"},",
          "336:   {\"lch10_content\", \"Logical Channel 10 Content\", \"foo\"},",
          "337:   {\"lch11_content\", \"Logical Channel 11 Content\", \"foo\"},",
          "338:   {\"lch12_content\", \"Logical Channel 12 Content\", \"foo\"},",
          "339:   {\"lch13_content\", \"Logical Channel 13 Content\", \"foo\"},",
          "340:   {\"lch14_content\", \"Logical Channel 14 Content\", \"foo\"},",
          "341:   {\"lch15_content\", \"Logical Channel 15 Content\", \"foo\"},",
          "342:   {\"lch16_content\", \"Logical Channel 16 Content\", \"foo\"}};",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "331: static int dissect_SuccessfulOutcomeValue(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *);",
          "332: static int dissect_UnsuccessfulOutcomeValue(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *);",
          "335: static void add_hsdsch_bind(packet_info * pinfo);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "357: static guint32 calculate_setup_conv_key(const guint32 transaction_id, const guint32 dd_mode, const guint32 channel_id);",
          "358: static void add_setup_conv(const guint32 transaction_id, const guint32 dd_mode, const guint32 channel_id, const guint32 req_frame_number,",
          "359:            const address *addr, const guint32 port, umts_fp_conversation_info_t * umts_fp_conversation_info, conversation_t *conv);",
          "360: static nbap_setup_conv_t* find_setup_conv(const guint32 transaction_id, const guint32 dd_mode, const guint32 channel_id);",
          "361: static void delete_setup_conv(nbap_setup_conv_t *conv);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "364:   return (dissector_try_string(nbap_proc_uout_dissector_table, ProcedureID, tvb, pinfo, tree, NULL)) ? tvb_captured_length(tvb) : 0;",
          "365: }",
          "366: static void add_hsdsch_bind(packet_info *pinfo){",
          "430: }",
          "447: }",
          "449: static int",
          "450: dissect_nbap(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "451: {",
          "469: }",
          "472: void proto_register_nbap(void)",
          "473: {",
          "538: }",
          "",
          "[Removed Lines]",
          "367:  address  null_addr;",
          "368:  conversation_t *conversation = NULL;",
          "369:  umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "370:  fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "371:  guint32 i;",
          "373:  if (pinfo->fd->flags.visited){",
          "374:   return;",
          "375:  }",
          "378:  clear_address(&null_addr);",
          "379:  for (i = 0; i < maxNrOfMACdFlows; i++) {",
          "380:   if (nbap_hsdsch_channel_info[i].crnc_port != 0){",
          "381:    conversation = find_conversation(pinfo->num, &(nbap_hsdsch_channel_info[i].crnc_address), &null_addr,",
          "382:                                PT_UDP,",
          "383:                                nbap_hsdsch_channel_info[i].crnc_port, 0, NO_ADDR_B);",
          "386:    if (conversation == NULL) {",
          "388:     conversation = conversation_new(pinfo->num, &(nbap_hsdsch_channel_info[i].crnc_address),",
          "389:      &null_addr, PT_UDP, nbap_hsdsch_channel_info[i].crnc_port,",
          "390:      0, NO_ADDR2|NO_PORT2);",
          "393:     conversation_set_dissector(conversation, fp_handle);",
          "395:     if(pinfo->link_dir==P2P_DIR_DL){",
          "396:      umts_fp_conversation_info = wmem_new0(wmem_file_scope(), umts_fp_conversation_info_t);",
          "399:      umts_fp_conversation_info->iface_type        = IuB_Interface;",
          "400:      umts_fp_conversation_info->division          = Division_FDD;",
          "401:      umts_fp_conversation_info->channel           = CHANNEL_HSDSCH;",
          "402:      umts_fp_conversation_info->dl_frame_number   = 0;",
          "403:      umts_fp_conversation_info->ul_frame_number   = pinfo->num;",
          "404:      copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &nbap_hsdsch_channel_info[i].crnc_address);",
          "405:      umts_fp_conversation_info->crnc_port         = nbap_hsdsch_channel_info[i].crnc_port;",
          "407:      fp_hsdsch_channel_info = wmem_new0(wmem_file_scope(), fp_hsdsch_channel_info_t);",
          "408:      umts_fp_conversation_info->channel_specific_info = (void*)fp_hsdsch_channel_info;",
          "413:      umts_fp_conversation_info->num_dch_in_flow++;",
          "414:      umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow -1] = i;",
          "417:      if(nbap_hsdsch_channel_info[i].entity == entity_not_specified ){",
          "419:       expert_add_info(pinfo, NULL, &ei_nbap_hsdsch_entity_not_specified);",
          "420:      }else{",
          "421:       fp_hsdsch_channel_info->hsdsch_entity = (enum fp_hsdsch_entity)nbap_hsdsch_channel_info[i].entity;",
          "422:      }",
          "423:      umts_fp_conversation_info->rlc_mode = nbap_hsdsch_channel_info[i].rlc_mode;",
          "424:      set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "425:     }",
          "426:    }",
          "427:   }",
          "428:  }",
          "432: static void nbap_init(void){",
          "433:     guint8 i;",
          "435:     com_context_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "438:     edch_flow_port_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "441:     nbap_scrambling_code_crncc_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "442:     nbap_crncc_urnti_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "444:     for (i = 0; i < 15; i++) {",
          "445:         lchId_type_table[i+1] = lch_contents[i];",
          "446:     }",
          "452:  proto_item *nbap_item = NULL;",
          "453:  proto_tree *nbap_tree = NULL;",
          "454:  int i;",
          "456:  col_set_str(pinfo->cinfo, COL_PROTOCOL, \"NBAP\");",
          "459:  nbap_item = proto_tree_add_item(tree, proto_nbap, tvb, 0, -1, ENC_NA);",
          "460:  nbap_tree = proto_item_add_subtree(nbap_item, ett_nbap);",
          "463:  for (i = 0; i < maxNrOfMACdFlows; i++) {",
          "464:   nbap_hsdsch_channel_info[i].entity = hs;",
          "465:  }",
          "466:  ul_scrambling_code = 0;",
          "468:  return dissect_NBAP_PDU_PDU(tvb, pinfo, nbap_tree, data);",
          "474:  module_t *nbap_module;",
          "475:  guint8 i;",
          "478:  static hf_register_info hf[] = {",
          "479:  { &hf_nbap_transportLayerAddress_ipv4,",
          "480:    { \"transportLayerAddress IPv4\", \"nbap.transportLayerAddress_ipv4\",",
          "481:   FT_IPv4, BASE_NONE, NULL, 0,",
          "482:   NULL, HFILL }},",
          "483:  { &hf_nbap_transportLayerAddress_ipv6,",
          "484:    { \"transportLayerAddress IPv6\", \"nbap.transportLayerAddress_ipv6\",",
          "485:   FT_IPv6, BASE_NONE, NULL, 0,",
          "486:   NULL, HFILL }},",
          "487:  { &hf_nbap_transportLayerAddress_nsap,",
          "488:    { \"transportLayerAddress NSAP\", \"nbap.transportLayerAddress_NSAP\",",
          "489:   FT_BYTES, BASE_NONE, NULL, 0,",
          "490:   NULL, HFILL }},",
          "491:  #include \"packet-nbap-hfarr.c\"",
          "492:  };",
          "495:  static gint *ett[] = {",
          "496:   &ett_nbap,",
          "497:   &ett_nbap_TransportLayerAddress,",
          "498:   &ett_nbap_TransportLayerAddress_nsap,",
          "499:   &ett_nbap_ib_sg_data,",
          "500:  #include \"packet-nbap-ettarr.c\"",
          "501:  };",
          "503:  static ei_register_info ei[] = {",
          "504:   { &ei_nbap_no_set_comm_context_id, { \"nbap.no_set_comm_context_id\", PI_MALFORMED, PI_WARN, \"Couldn't not set Communication Context-ID, fragments over reconfigured channels might fail\", EXPFILL }},",
          "505:   { &ei_nbap_no_find_comm_context_id, { \"nbap.no_find_comm_context_id\", PI_MALFORMED, PI_WARN, \"Couldn't not find Communication Context-ID, unable to reconfigure this E-DCH flow.\", EXPFILL }},",
          "506:   { &ei_nbap_no_find_port_info, { \"nbap.no_find_port_info\", PI_MALFORMED, PI_WARN, \"Couldn't not find port information for reconfigured E-DCH flow, unable to reconfigure\", EXPFILL }},",
          "507:   { &ei_nbap_hsdsch_entity_not_specified, { \"nbap.hsdsch_entity_not_specified\", PI_MALFORMED,PI_ERROR, \"HSDSCH Entity not specified!\", EXPFILL }},",
          "508:  };",
          "510:  expert_module_t* expert_nbap;",
          "513:  proto_nbap = proto_register_protocol(PNAME, PSNAME, PFNAME);",
          "515:  proto_register_field_array(proto_nbap, hf, array_length(hf));",
          "516:  proto_register_subtree_array(ett, array_length(ett));",
          "517:  expert_nbap = expert_register_protocol(proto_nbap);",
          "518:  expert_register_field_array(expert_nbap, ei, array_length(ei));",
          "521:  nbap_handle = register_dissector(\"nbap\", dissect_nbap, proto_nbap);",
          "523:  nbap_module = prefs_register_protocol(proto_nbap, NULL);",
          "526:  for (i = 0; i < 16; i++) {",
          "527:   prefs_register_enum_preference(nbap_module, ch_strings[i].name, ch_strings[i].title, ch_strings[i].description, &lch_contents[i], content_types, FALSE);",
          "528:  }",
          "531:  nbap_ies_dissector_table = register_dissector_table(\"nbap.ies\", \"NBAP-PROTOCOL-IES\", proto_nbap, FT_UINT32, BASE_DEC);",
          "532:  nbap_extension_dissector_table = register_dissector_table(\"nbap.extension\", \"NBAP-PROTOCOL-EXTENSION\", proto_nbap, FT_UINT32, BASE_DEC);",
          "533:  nbap_proc_imsg_dissector_table = register_dissector_table(\"nbap.proc.imsg\", \"NBAP-ELEMENTARY-PROCEDURE InitiatingMessage\", proto_nbap, FT_STRING, BASE_NONE);",
          "534:  nbap_proc_sout_dissector_table = register_dissector_table(\"nbap.proc.sout\", \"NBAP-ELEMENTARY-PROCEDURE SuccessfulOutcome\", proto_nbap, FT_STRING, BASE_NONE);",
          "535:  nbap_proc_uout_dissector_table = register_dissector_table(\"nbap.proc.uout\", \"NBAP-ELEMENTARY-PROCEDURE UnsuccessfulOutcome\", proto_nbap, FT_STRING, BASE_NONE);",
          "537:  register_init_routine(nbap_init);",
          "",
          "[Added Lines]",
          "396:   address null_addr;",
          "397:   conversation_t *conversation = NULL;",
          "398:   umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "399:   fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "400:   guint32 i;",
          "402:   if (pinfo->fd->flags.visited){",
          "403:     return;",
          "404:   }",
          "407:   clear_address(&null_addr);",
          "408:   for (i = 0; i < maxNrOfMACdFlows; i++) {",
          "409:     if (nbap_hsdsch_channel_info[i].crnc_port != 0){",
          "410:       conversation = find_conversation(pinfo->num, &(nbap_hsdsch_channel_info[i].crnc_address), &null_addr, PT_UDP,",
          "411:                                       nbap_hsdsch_channel_info[i].crnc_port, 0, NO_ADDR_B);",
          "413:       if (conversation == NULL) {",
          "415:         conversation = conversation_new(pinfo->num, &(nbap_hsdsch_channel_info[i].crnc_address), &null_addr, PT_UDP,",
          "416:                                        nbap_hsdsch_channel_info[i].crnc_port, 0, NO_ADDR2|NO_PORT2);",
          "419:         conversation_set_dissector(conversation, fp_handle);",
          "421:         if(pinfo->link_dir==P2P_DIR_DL){",
          "422:           umts_fp_conversation_info = wmem_new0(wmem_file_scope(), umts_fp_conversation_info_t);",
          "424:           umts_fp_conversation_info->iface_type        = IuB_Interface;",
          "425:           umts_fp_conversation_info->division          = Division_FDD;",
          "426:           umts_fp_conversation_info->channel           = CHANNEL_HSDSCH;",
          "427:           umts_fp_conversation_info->dl_frame_number   = 0;",
          "428:           umts_fp_conversation_info->ul_frame_number   = pinfo->num;",
          "429:           copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &nbap_hsdsch_channel_info[i].crnc_address);",
          "430:           umts_fp_conversation_info->crnc_port         = nbap_hsdsch_channel_info[i].crnc_port;",
          "432:           fp_hsdsch_channel_info = wmem_new0(wmem_file_scope(), fp_hsdsch_channel_info_t);",
          "433:           umts_fp_conversation_info->channel_specific_info = (void*)fp_hsdsch_channel_info;",
          "438:           umts_fp_conversation_info->num_dch_in_flow++;",
          "439:           umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow -1] = i;",
          "442:           if(nbap_hsdsch_channel_info[i].entity == entity_not_specified ){",
          "444:             expert_add_info(pinfo, NULL, &ei_nbap_hsdsch_entity_not_specified);",
          "445:           }else{",
          "446:             fp_hsdsch_channel_info->hsdsch_entity = (enum fp_hsdsch_entity)nbap_hsdsch_channel_info[i].entity;",
          "447:           }",
          "448:           umts_fp_conversation_info->rlc_mode = nbap_hsdsch_channel_info[i].rlc_mode;",
          "449:           set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "450:         }",
          "451:       }",
          "452:     }",
          "453:   }",
          "454: }",
          "459: static guint32 calculate_setup_conv_key(const guint32 transaction_id, const guint32 dd_mode, const guint32 channel_id)",
          "460: {",
          "466:   guint32 key;",
          "467:   key = transaction_id << 16;",
          "468:   key |= (dd_mode & 0x03) << 14;",
          "469:   key |= (channel_id & 0x3fff);",
          "470:   nbap_debug(\"\\tCalculating key 0x%04x\", key);",
          "471:   return key;",
          "472: }",
          "474: static void add_setup_conv(const guint32 transaction_id, const guint32 dd_mode, const guint32 channel_id, const guint32 req_frame_number,",
          "475:               const address *addr, const guint32 port, umts_fp_conversation_info_t * umts_fp_conversation_info, conversation_t *conv)",
          "476: {",
          "477:   nbap_setup_conv_t *new_conv = NULL;",
          "478:   guint32 key;",
          "480:   nbap_debug(\"Creating new setup conv\\t TransactionID: %u\\tddMode: %u\\tChannelID: %u\\t %s:%u\",",
          "481:   transaction_id, dd_mode, channel_id, address_to_str(wmem_packet_scope(), addr), port);",
          "483:   new_conv = wmem_new0(wmem_file_scope(), nbap_setup_conv_t);",
          "486:   new_conv->transaction_id = transaction_id;",
          "487:   new_conv->dd_mode = dd_mode;",
          "488:   new_conv->channel_id = channel_id;",
          "489:   new_conv->request_frame_number = req_frame_number;",
          "490:   copy_address_wmem(wmem_file_scope(), &new_conv->addr, addr);",
          "491:   new_conv->port = port;",
          "492:   new_conv->umts_fp_conversation_info = umts_fp_conversation_info;",
          "493:   new_conv->conv = conv;",
          "495:   key = calculate_setup_conv_key(new_conv->transaction_id, new_conv->dd_mode, new_conv->channel_id);",
          "497:   wmem_map_insert(nbap_setup_conv_table, GUINT_TO_POINTER(key), new_conv);",
          "500: static nbap_setup_conv_t* find_setup_conv(const guint32 transaction_id, const guint32 dd_mode, const guint32 channel_id)",
          "501: {",
          "502:   nbap_setup_conv_t *conv;",
          "503:   guint32 key;",
          "504:   nbap_debug(\"Looking for Setup Conversation match\\t TransactionID: %u\\t ddMode: %u\\t ChannelID: %u\", transaction_id, dd_mode, channel_id);",
          "506:   key = calculate_setup_conv_key(transaction_id, dd_mode, channel_id);",
          "508:   conv = (nbap_setup_conv_t*) wmem_map_lookup(nbap_setup_conv_table, GUINT_TO_POINTER(key));",
          "510:   if(conv == NULL){",
          "511:     nbap_debug(\"\\tDidnt found Setup Conversation match\");",
          "512:   }else{",
          "513:     nbap_debug(\"\\tFOUND Setup Conversation match\\t TransactionID: %u\\t ddMode: %u\\t ChannelID: %u\\t %s:%u\",",
          "514:          conv->transaction_id, conv->dd_mode, conv->channel_id, address_to_str(wmem_packet_scope(), &(conv->addr)), conv->port);",
          "515:   }",
          "517:   return conv;",
          "518: }",
          "520: static void delete_setup_conv(nbap_setup_conv_t *conv)",
          "521: {",
          "522:   guint32 key;",
          "524:   key = calculate_setup_conv_key(conv->transaction_id, conv->dd_mode, conv->channel_id);",
          "526:   if(conv == NULL){",
          "527:     nbap_debug(\"Trying delete Setup Conversation that does not exist (ptr == NULL)\\t\");",
          "528:     return;",
          "529:   }",
          "530:   wmem_map_remove(nbap_setup_conv_table, GUINT_TO_POINTER(key));",
          "531: }",
          "533: static void nbap_init(void){",
          "534:   guint8 i;",
          "536:   com_context_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "539:   edch_flow_port_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "542:   nbap_setup_conv_table = wmem_map_new(wmem_file_scope(), g_direct_hash, g_direct_equal);",
          "544:   nbap_scrambling_code_crncc_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "545:   nbap_crncc_urnti_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "547:   for (i = 0; i < 15; i++) {",
          "548:     lchId_type_table[i+1] = lch_contents[i];",
          "549:   }",
          "555:   proto_item *nbap_item = NULL;",
          "556:   proto_tree *nbap_tree = NULL;",
          "557:   int i;",
          "559:   col_set_str(pinfo->cinfo, COL_PROTOCOL, \"NBAP\");",
          "562:   nbap_item = proto_tree_add_item(tree, proto_nbap, tvb, 0, -1, ENC_NA);",
          "563:   nbap_tree = proto_item_add_subtree(nbap_item, ett_nbap);",
          "566:   for (i = 0; i < maxNrOfMACdFlows; i++) {",
          "567:     nbap_hsdsch_channel_info[i].entity = hs;",
          "568:   }",
          "569:   ul_scrambling_code = 0;",
          "571:   return dissect_NBAP_PDU_PDU(tvb, pinfo, nbap_tree, data);",
          "577:   module_t *nbap_module;",
          "578:   guint8 i;",
          "581:   static hf_register_info hf[] = {",
          "582:   { &hf_nbap_transportLayerAddress_ipv4,",
          "583:     { \"transportLayerAddress IPv4\", \"nbap.transportLayerAddress_ipv4\",",
          "584:     FT_IPv4, BASE_NONE, NULL, 0,",
          "585:   NULL, HFILL }},",
          "586:   { &hf_nbap_transportLayerAddress_ipv6,",
          "587:     { \"transportLayerAddress IPv6\", \"nbap.transportLayerAddress_ipv6\",",
          "588:     FT_IPv6, BASE_NONE, NULL, 0,",
          "589:     NULL, HFILL }},",
          "590:   { &hf_nbap_transportLayerAddress_nsap,",
          "591:     { \"transportLayerAddress NSAP\", \"nbap.transportLayerAddress_NSAP\",",
          "592:     FT_BYTES, BASE_NONE, NULL, 0,",
          "593:     NULL, HFILL }},",
          "594:   #include \"packet-nbap-hfarr.c\"",
          "595:   };",
          "598:   static gint *ett[] = {",
          "599:     &ett_nbap,",
          "600:     &ett_nbap_TransportLayerAddress,",
          "601:     &ett_nbap_TransportLayerAddress_nsap,",
          "602:     &ett_nbap_ib_sg_data,",
          "603:     #include \"packet-nbap-ettarr.c\"",
          "604:   };",
          "606:   static ei_register_info ei[] = {",
          "607:     { &ei_nbap_no_set_comm_context_id, { \"nbap.no_set_comm_context_id\", PI_MALFORMED, PI_WARN, \"Couldn't not set Communication Context-ID, fragments over reconfigured channels might fail\", EXPFILL }},",
          "608:     { &ei_nbap_no_find_comm_context_id, { \"nbap.no_find_comm_context_id\", PI_MALFORMED, PI_WARN, \"Couldn't not find Communication Context-ID, unable to reconfigure this E-DCH flow.\", EXPFILL }},",
          "609:     { &ei_nbap_no_find_port_info, { \"nbap.no_find_port_info\", PI_MALFORMED, PI_WARN, \"Couldn't not find port information for reconfigured E-DCH flow, unable to reconfigure\", EXPFILL }},",
          "610:     { &ei_nbap_hsdsch_entity_not_specified, { \"nbap.hsdsch_entity_not_specified\", PI_MALFORMED,PI_ERROR, \"HSDSCH Entity not specified!\", EXPFILL }},",
          "611:   };",
          "613:   expert_module_t* expert_nbap;",
          "616:   proto_nbap = proto_register_protocol(PNAME, PSNAME, PFNAME);",
          "618:   proto_register_field_array(proto_nbap, hf, array_length(hf));",
          "619:   proto_register_subtree_array(ett, array_length(ett));",
          "620:   expert_nbap = expert_register_protocol(proto_nbap);",
          "621:   expert_register_field_array(expert_nbap, ei, array_length(ei));",
          "624:   nbap_handle = register_dissector(\"nbap\", dissect_nbap, proto_nbap);",
          "626:   nbap_module = prefs_register_protocol(proto_nbap, NULL);",
          "629:   for (i = 0; i < 16; i++) {",
          "630:     prefs_register_enum_preference(nbap_module, ch_strings[i].name, ch_strings[i].title, ch_strings[i].description, &lch_contents[i], content_types, FALSE);",
          "631:   }",
          "634:   nbap_ies_dissector_table = register_dissector_table(\"nbap.ies\", \"NBAP-PROTOCOL-IES\", proto_nbap, FT_UINT32, BASE_DEC);",
          "635:   nbap_extension_dissector_table = register_dissector_table(\"nbap.extension\", \"NBAP-PROTOCOL-EXTENSION\", proto_nbap, FT_UINT32, BASE_DEC);",
          "636:   nbap_proc_imsg_dissector_table = register_dissector_table(\"nbap.proc.imsg\", \"NBAP-ELEMENTARY-PROCEDURE InitiatingMessage\", proto_nbap, FT_STRING, BASE_NONE);",
          "637:   nbap_proc_sout_dissector_table = register_dissector_table(\"nbap.proc.sout\", \"NBAP-ELEMENTARY-PROCEDURE SuccessfulOutcome\", proto_nbap, FT_STRING, BASE_NONE);",
          "638:   nbap_proc_uout_dissector_table = register_dissector_table(\"nbap.proc.uout\", \"NBAP-ELEMENTARY-PROCEDURE UnsuccessfulOutcome\", proto_nbap, FT_STRING, BASE_NONE);",
          "640:   register_init_routine(nbap_init);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "544: void",
          "545: proto_reg_handoff_nbap(void)",
          "546: {",
          "549: #ifdef EXTRA_PPI",
          "551: #endif",
          "554: #include \"packet-nbap-dis-tab.c\"",
          "555: }",
          "",
          "[Removed Lines]",
          "547:  fp_handle = find_dissector(\"fp\");",
          "548:  dissector_add_uint(\"sctp.ppi\", NBAP_PAYLOAD_PROTOCOL_ID, nbap_handle);",
          "550:  dissector_add_uint(\"sctp.ppi\", 17, nbap_handle);",
          "552:  dissector_add_for_decode_as(\"sctp.port\", nbap_handle);",
          "",
          "[Added Lines]",
          "650:   fp_handle = find_dissector(\"fp\");",
          "651:   dissector_add_uint(\"sctp.ppi\", NBAP_PAYLOAD_PROTOCOL_ID, nbap_handle);",
          "653:   dissector_add_uint(\"sctp.ppi\", 17, nbap_handle);",
          "655:   dissector_add_for_decode_as(\"sctp.port\", nbap_handle);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c": [
          "File: epan/dissectors/packet-nbap.c -> epan/dissectors/packet-nbap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: #define NBAP_IGNORE_PORT 255",
          "66: #define nbap_debug(...) g_warning(__VA_ARGS__)",
          "67: #else",
          "68: #define nbap_debug(...)",
          "",
          "[Removed Lines]",
          "65: #if 0",
          "",
          "[Added Lines]",
          "65: #define DEBUG_NBAP 0",
          "66: #if DEBUG_NBAP",
          "67: #include <epan/to_str.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1540: } ProtocolIE_ID_enum;",
          "1546: static int proto_nbap = -1;",
          "",
          "[Removed Lines]",
          "1543: #line 78 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "1545: #line 80 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4844: static int hf_nbap_RACH_SubChannelNumbers_subCh0 = -1;",
          "4850: static int ett_nbap = -1;",
          "",
          "[Removed Lines]",
          "4847: #line 86 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "4849: #line 88 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6483: static gint ett_nbap_Outcome = -1;",
          "6488: static expert_field ei_nbap_no_find_comm_context_id = EI_INIT;",
          "6489: static expert_field ei_nbap_no_find_port_info = EI_INIT;",
          "",
          "[Removed Lines]",
          "6486: #line 94 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "6488: #line 96 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6495: static dissector_handle_t nbap_handle;",
          "6500: struct _nbap_msg_info_for_fp",
          "6501: {",
          "6507: };",
          "6509: typedef struct",
          "6510: {",
          "6520: }nbap_dch_channel_info_t;",
          "6522: nbap_dch_channel_info_t nbap_dch_chnl_info[256];",
          "",
          "[Removed Lines]",
          "6502:  guint32 ProcedureCode;",
          "6503:  guint32 ddMode;",
          "6504:  gboolean is_uplink;",
          "6511:  gint num_dch_in_flow;",
          "6512:  gint next_dch;",
          "6513:  gint num_ul_chans;",
          "6514:  gint ul_chan_tf_size[MAX_FP_CHANS];",
          "6515:  gint ul_chan_num_tbs[MAX_FP_CHANS];",
          "6516:  gint num_dl_chans;",
          "6517:  gint dl_chan_tf_size[MAX_FP_CHANS];",
          "6518:  gint dl_chan_num_tbs[MAX_FP_CHANS];",
          "",
          "[Added Lines]",
          "6505: typedef struct nbap_setup_conv",
          "6506: {",
          "6507:   guint32 transaction_id;",
          "6508:   guint32 dd_mode;",
          "6509:   guint32 channel_id;",
          "6510:   guint32 request_frame_number;",
          "6511:   address addr;",
          "6512:   guint32 port;",
          "6513:   umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "6514:   conversation_t *conv;",
          "6515: }nbap_setup_conv_t;",
          "6521: static wmem_map_t *nbap_setup_conv_table;",
          "6528:   guint32 ProcedureCode;",
          "6529:   guint32 ddMode;",
          "6530:   gboolean is_uplink;",
          "6537:   gint num_dch_in_flow;",
          "6538:   gint next_dch;",
          "6539:   gint num_ul_chans;",
          "6540:   gint ul_chan_tf_size[MAX_FP_CHANS];",
          "6541:   gint ul_chan_num_tbs[MAX_FP_CHANS];",
          "6542:   gint num_dl_chans;",
          "6543:   gint dl_chan_tf_size[MAX_FP_CHANS];",
          "6544:   gint dl_chan_num_tbs[MAX_FP_CHANS];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6529: typedef struct",
          "6530: {",
          "6539: } nbap_edch_channel_info_t;",
          "6541: nbap_edch_channel_info_t nbap_edch_channel_info[maxNrOfEDCHMACdFlows];",
          "6544: typedef struct",
          "6545: {",
          "6549: } nbap_edch_port_info_t;",
          "6552: typedef struct",
          "6553: {",
          "6559: } nbap_hsdsch_channel_info_t;",
          "6561: nbap_hsdsch_channel_info_t nbap_hsdsch_channel_info[maxNrOfMACdFlows];",
          "6563: typedef struct",
          "6564: {",
          "6569: } nbap_common_channel_info_t;",
          "6573: gint g_num_dch_in_flow;",
          "6575: gint g_dch_ids_in_flow_list[maxNrOfTFs];",
          "6577: gint hsdsch_macdflow_ids[maxNrOfMACdFlows];",
          "",
          "[Removed Lines]",
          "6531:  address  crnc_address;",
          "6532:  guint16  crnc_port;",
          "6533:  gint  no_ddi_entries;",
          "6534:  guint8  edch_ddi[MAX_EDCH_DDIS];",
          "6535:  guint  edch_macd_pdu_size[MAX_EDCH_DDIS];",
          "6546:  guint32  crnc_address;",
          "6547:  guint16  crnc_port[maxNrOfEDCHMACdFlows];",
          "6554:  address    crnc_address;",
          "6555:  guint16    crnc_port;",
          "6556:  enum fp_rlc_mode rlc_mode;",
          "6557:  guint32    hsdsch_physical_layer_category;",
          "6565:  address    crnc_address;",
          "6566:  guint16    crnc_port;",
          "6567:  enum fp_rlc_mode rlc_mode;",
          "",
          "[Added Lines]",
          "6556:   address crnc_address;",
          "6557:   guint16 crnc_port;",
          "6558:   gint no_ddi_entries;",
          "6559:   guint8 edch_ddi[MAX_EDCH_DDIS];",
          "6560:   guint edch_macd_pdu_size[MAX_EDCH_DDIS];",
          "6569:   guint32 crnc_address;",
          "6570:   guint16 crnc_port[maxNrOfEDCHMACdFlows];",
          "6575:   address crnc_address;",
          "6576:   guint16 crnc_port;",
          "6577:   enum fp_rlc_mode rlc_mode;",
          "6578:   guint32 hsdsch_physical_layer_category;",
          "6586:  address crnc_address;",
          "6587:  guint16 crnc_port;",
          "6588:  enum fp_rlc_mode rlc_mode;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6586: typedef struct com_ctxt_{",
          "6590: }nbap_com_context_id_t;",
          "6592: gboolean crcn_context_present = FALSE;",
          "",
          "[Removed Lines]",
          "6588:   guint crnc_context;",
          "6589:   guint frame_num;",
          "",
          "[Added Lines]",
          "6608:   guint crnc_context;",
          "6609:   guint frame_num;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6599: static guint32 ProtocolIE_ID;",
          "6600: static guint32 ddMode;",
          "6601: static const gchar *ProcedureID;",
          "6602: static guint32 t_dch_id, dch_id, prev_dch_id, commonphysicalchannelid, e_dch_macdflow_id, hsdsch_macdflow_id=3,",
          "6604: static guint32 MACdPDU_Size, commontransportchannelid;",
          "6605: static guint num_items;",
          "6606: static gint paging_indications;",
          "",
          "[Removed Lines]",
          "6603:     e_dch_ddi_value,logical_channel_id,common_macdflow_id;",
          "",
          "[Added Lines]",
          "6622: static guint32 TransactionID;",
          "6624:                 e_dch_ddi_value,logical_channel_id,common_macdflow_id;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6609: enum TransportFormatSet_type_enum",
          "6610: {",
          "6616: };",
          "6618: enum TransportFormatSet_type_enum transportFormatSet_type;",
          "",
          "[Removed Lines]",
          "6611:  NBAP_DCH_UL,",
          "6612:  NBAP_DCH_DL,",
          "6613:  NBAP_CPCH,",
          "6614:  NBAP_FACH,",
          "6615:  NBAP_PCH",
          "",
          "[Added Lines]",
          "6632:   NBAP_DCH_UL,",
          "6633:   NBAP_DCH_DL,",
          "6634:   NBAP_CPCH,",
          "6635:   NBAP_FACH,",
          "6636:   NBAP_PCH",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6622: guint8 lchId_type_table[]= {",
          "6639: };",
          "6642: guint8 lchId_rlc_map[] = {",
          "6659: };",
          "6665: static int lch_contents[16] = {",
          "6682: };",
          "6683: static const enum_val_t content_types[] = {",
          "6690: typedef struct {",
          "6694: } preference_strings;",
          "6696: static const preference_strings ch_strings[] = {",
          "6715: static dissector_table_t nbap_ies_dissector_table;",
          "",
          "[Removed Lines]",
          "6625:  MAC_CONTENT_DCCH,",
          "6626:  MAC_CONTENT_DCCH,",
          "6627:  MAC_CONTENT_DCCH,",
          "6629:  MAC_CONTENT_CS_DTCH,",
          "6630:  MAC_CONTENT_CS_DTCH,",
          "6643:         0,",
          "6645:         RLC_AM,",
          "6646:         RLC_AM,",
          "6647:         RLC_AM,",
          "6649:         RLC_TM,",
          "6651:         RLC_AM,",
          "6652:         RLC_AM,",
          "6653:         RLC_AM,",
          "6654:         RLC_AM,",
          "6655:         RLC_AM,",
          "6656:         RLC_AM,",
          "6657:         RLC_AM,",
          "6666:  MAC_CONTENT_DCCH,",
          "6667:  MAC_CONTENT_DCCH,",
          "6668:  MAC_CONTENT_DCCH,",
          "6669:  MAC_CONTENT_DCCH,",
          "6670:  MAC_CONTENT_CS_DTCH,",
          "6671:  MAC_CONTENT_CS_DTCH,",
          "6672:  MAC_CONTENT_CS_DTCH,",
          "6673:  MAC_CONTENT_DCCH,",
          "6674:  MAC_CONTENT_PS_DTCH,",
          "6675:  MAC_CONTENT_UNKNOWN,",
          "6676:  MAC_CONTENT_PS_DTCH,",
          "6677:  MAC_CONTENT_PS_DTCH,",
          "6678:  MAC_CONTENT_CS_DTCH,",
          "6679:  MAC_CONTENT_PS_DTCH,",
          "6680:  MAC_CONTENT_CCCH,",
          "6681:  MAC_CONTENT_DCCH",
          "6684:  {\"MAC_CONTENT_UNKNOWN\", \"MAC_CONTENT_UNKNOWN\", MAC_CONTENT_UNKNOWN},",
          "6685:  {\"MAC_CONTENT_DCCH\", \"MAC_CONTENT_DCCH\", MAC_CONTENT_DCCH},",
          "6686:  {\"MAC_CONTENT_PS_DTCH\", \"MAC_CONTENT_PS_DTCH\", MAC_CONTENT_PS_DTCH},",
          "6687:  {\"MAC_CONTENT_CS_DTCH\", \"MAC_CONTENT_CS_DTCH\", MAC_CONTENT_CS_DTCH},",
          "6688:  {\"MAC_CONTENT_CCCH\", \"MAC_CONTENT_CCCH\", MAC_CONTENT_CCCH},",
          "6689:  {NULL, NULL, -1}};",
          "6691:  const char *name;",
          "6692:  const char *title;",
          "6693:  const char *description;",
          "6697:  {\"lch1_content\", \"Logical Channel 1 Content\", \"foo\"},",
          "6698:  {\"lch2_content\", \"Logical Channel 2 Content\", \"foo\"},",
          "6699:  {\"lch3_content\", \"Logical Channel 3 Content\", \"foo\"},",
          "6700:  {\"lch4_content\", \"Logical Channel 4 Content\", \"foo\"},",
          "6701:  {\"lch5_content\", \"Logical Channel 5 Content\", \"foo\"},",
          "6702:  {\"lch6_content\", \"Logical Channel 6 Content\", \"foo\"},",
          "6703:  {\"lch7_content\", \"Logical Channel 7 Content\", \"foo\"},",
          "6704:  {\"lch8_content\", \"Logical Channel 8 Content\", \"foo\"},",
          "6705:  {\"lch9_content\", \"Logical Channel 9 Content\", \"foo\"},",
          "6706:  {\"lch10_content\", \"Logical Channel 10 Content\", \"foo\"},",
          "6707:  {\"lch11_content\", \"Logical Channel 11 Content\", \"foo\"},",
          "6708:  {\"lch12_content\", \"Logical Channel 12 Content\", \"foo\"},",
          "6709:  {\"lch13_content\", \"Logical Channel 13 Content\", \"foo\"},",
          "6710:  {\"lch14_content\", \"Logical Channel 14 Content\", \"foo\"},",
          "6711:  {\"lch15_content\", \"Logical Channel 15 Content\", \"foo\"},",
          "6712:  {\"lch16_content\", \"Logical Channel 16 Content\", \"foo\"}};",
          "",
          "[Added Lines]",
          "6646:   MAC_CONTENT_DCCH,",
          "6647:   MAC_CONTENT_DCCH,",
          "6648:   MAC_CONTENT_DCCH,",
          "6650:   MAC_CONTENT_CS_DTCH,",
          "6651:   MAC_CONTENT_CS_DTCH,",
          "6664:   0,",
          "6666:   RLC_AM,",
          "6667:   RLC_AM,",
          "6668:   RLC_AM,",
          "6670:   RLC_TM,",
          "6672:   RLC_AM,",
          "6673:   RLC_AM,",
          "6674:   RLC_AM,",
          "6675:   RLC_AM,",
          "6676:   RLC_AM,",
          "6677:   RLC_AM,",
          "6678:   RLC_AM,",
          "6686:   MAC_CONTENT_DCCH,",
          "6687:   MAC_CONTENT_DCCH,",
          "6688:   MAC_CONTENT_DCCH,",
          "6689:   MAC_CONTENT_DCCH,",
          "6690:   MAC_CONTENT_CS_DTCH,",
          "6691:   MAC_CONTENT_CS_DTCH,",
          "6692:   MAC_CONTENT_CS_DTCH,",
          "6693:   MAC_CONTENT_DCCH,",
          "6694:   MAC_CONTENT_PS_DTCH,",
          "6695:   MAC_CONTENT_UNKNOWN,",
          "6696:   MAC_CONTENT_PS_DTCH,",
          "6697:   MAC_CONTENT_PS_DTCH,",
          "6698:   MAC_CONTENT_CS_DTCH,",
          "6699:   MAC_CONTENT_PS_DTCH,",
          "6700:   MAC_CONTENT_CCCH,",
          "6701:   MAC_CONTENT_DCCH",
          "6705:   {\"MAC_CONTENT_UNKNOWN\", \"MAC_CONTENT_UNKNOWN\", MAC_CONTENT_UNKNOWN},",
          "6706:   {\"MAC_CONTENT_DCCH\", \"MAC_CONTENT_DCCH\", MAC_CONTENT_DCCH},",
          "6707:   {\"MAC_CONTENT_PS_DTCH\", \"MAC_CONTENT_PS_DTCH\", MAC_CONTENT_PS_DTCH},",
          "6708:   {\"MAC_CONTENT_CS_DTCH\", \"MAC_CONTENT_CS_DTCH\", MAC_CONTENT_CS_DTCH},",
          "6709:   {\"MAC_CONTENT_CCCH\", \"MAC_CONTENT_CCCH\", MAC_CONTENT_CCCH},",
          "6710:   {NULL, NULL, -1}};",
          "6713:   const char *name;",
          "6714:   const char *title;",
          "6715:   const char *description;",
          "6720:   {\"lch1_content\", \"Logical Channel 1 Content\", \"foo\"},",
          "6721:   {\"lch2_content\", \"Logical Channel 2 Content\", \"foo\"},",
          "6722:   {\"lch3_content\", \"Logical Channel 3 Content\", \"foo\"},",
          "6723:   {\"lch4_content\", \"Logical Channel 4 Content\", \"foo\"},",
          "6724:   {\"lch5_content\", \"Logical Channel 5 Content\", \"foo\"},",
          "6725:   {\"lch6_content\", \"Logical Channel 6 Content\", \"foo\"},",
          "6726:   {\"lch7_content\", \"Logical Channel 7 Content\", \"foo\"},",
          "6727:   {\"lch8_content\", \"Logical Channel 8 Content\", \"foo\"},",
          "6728:   {\"lch9_content\", \"Logical Channel 9 Content\", \"foo\"},",
          "6729:   {\"lch10_content\", \"Logical Channel 10 Content\", \"foo\"},",
          "6730:   {\"lch11_content\", \"Logical Channel 11 Content\", \"foo\"},",
          "6731:   {\"lch12_content\", \"Logical Channel 12 Content\", \"foo\"},",
          "6732:   {\"lch13_content\", \"Logical Channel 13 Content\", \"foo\"},",
          "6733:   {\"lch14_content\", \"Logical Channel 14 Content\", \"foo\"},",
          "6734:   {\"lch15_content\", \"Logical Channel 15 Content\", \"foo\"},",
          "6735:   {\"lch16_content\", \"Logical Channel 16 Content\", \"foo\"}};",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6724: static int dissect_SuccessfulOutcomeValue(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *);",
          "6725: static int dissect_UnsuccessfulOutcomeValue(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *);",
          "6728: static void add_hsdsch_bind(packet_info * pinfo);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6750: static guint32 calculate_setup_conv_key(const guint32 transaction_id, const guint32 dd_mode, const guint32 channel_id);",
          "6751: static void add_setup_conv(const guint32 transaction_id, const guint32 dd_mode, const guint32 channel_id, const guint32 req_frame_number,",
          "6752:            const address *addr, const guint32 port, umts_fp_conversation_info_t * umts_fp_conversation_info, conversation_t *conv);",
          "6753: static nbap_setup_conv_t* find_setup_conv(const guint32 transaction_id, const guint32 dd_mode, const guint32 channel_id);",
          "6754: static void delete_setup_conv(nbap_setup_conv_t *conv);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "8171: static int",
          "8173:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8176:   return offset;",
          "8177: }",
          "",
          "[Removed Lines]",
          "8172: dissect_nbap_INTEGER_0_127(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8174:                                                             0U, 127U, NULL, FALSE);",
          "",
          "[Added Lines]",
          "8201: dissect_nbap_T_shortTransActionId(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8203:                                                             0U, 127U, &TransactionID, FALSE);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "8181: static int",
          "8183:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8186:   return offset;",
          "8187: }",
          "",
          "[Removed Lines]",
          "8182: dissect_nbap_INTEGER_0_32767(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8184:                                                             0U, 32767U, NULL, FALSE);",
          "",
          "[Added Lines]",
          "8211: dissect_nbap_T_longTransActionId(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8213:                                                             0U, 32767U, &TransactionID, FALSE);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "8194: };",
          "8196: static const per_choice_t TransactionID_choice[] = {",
          "8199:   { 0, NULL, 0, NULL }",
          "8200: };",
          "",
          "[Removed Lines]",
          "8197:   {   0, &hf_nbap_shortTransActionId, ASN1_NO_EXTENSIONS     , dissect_nbap_INTEGER_0_127 },",
          "8198:   {   1, &hf_nbap_longTransActionId, ASN1_NO_EXTENSIONS     , dissect_nbap_INTEGER_0_32767 },",
          "",
          "[Added Lines]",
          "8226:   {   0, &hf_nbap_shortTransActionId, ASN1_NO_EXTENSIONS     , dissect_nbap_T_shortTransActionId },",
          "8227:   {   1, &hf_nbap_longTransActionId, ASN1_NO_EXTENSIONS     , dissect_nbap_T_longTransActionId },",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "8448: static int",
          "8449: dissect_nbap_UL_ScramblingCodeNumber(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8451:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8452:                                                             0U, 16777215U, &ul_scrambling_code, FALSE);",
          "",
          "[Removed Lines]",
          "8450: #line 743 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "8479: #line 784 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "8714: static int",
          "8715: dissect_nbap_E_DCH_MACdFlow_ID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8718:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8719:                                                             0U, maxNrOfEDCHMACdFlows_1, &e_dch_macdflow_id, FALSE);",
          "",
          "[Removed Lines]",
          "8716: #line 714 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "8745: #line 755 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "8730: static int",
          "8731: dissect_nbap_BindingID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8733:   tvbuff_t *parameter_tvb=NULL;",
          "8735:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "8732: #line 727 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "8761: #line 768 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "8754: static int",
          "8755: dissect_nbap_TransportLayerAddress(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8757:   tvbuff_t *parameter_tvb=NULL;",
          "8758:   proto_item *item;",
          "8759:   proto_tree *subtree, *nsap_tree;",
          "",
          "[Removed Lines]",
          "8756: #line 620 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "8785: #line 661 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "10075: static int",
          "10076: dissect_nbap_CFN(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10078:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "10079:                                                             0U, 255U, &cfn, FALSE);",
          "",
          "[Removed Lines]",
          "10077: #line 2219 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "10106: #line 2238 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "10328: static int",
          "10329: dissect_nbap_HSDSCH_RNTI(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10331: umts_fp_conversation_info_t *umts_fp_conversation_info = NULL;",
          "10332: fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "10333: address     null_addr;",
          "",
          "[Removed Lines]",
          "10330: #line 2181 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "10359: #line 2200 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "10572: static int",
          "10573: dissect_nbap_CommonTransportChannelID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10575:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "10576:                                                             0U, 255U, &commontransportchannelid, FALSE);",
          "",
          "[Removed Lines]",
          "10574: #line 709 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "10603: #line 750 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "11383: static int",
          "11384: dissect_nbap_CommonPhysicalChannelID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "11386:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "11387:                                                             0U, 255U, &commonphysicalchannelid, FALSE);",
          "",
          "[Removed Lines]",
          "11385: #line 704 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "11414: #line 745 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "11553: static int",
          "11554: dissect_nbap_Common_MACFlow_ID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "11557:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "11558:                                                             0U, maxNrOfCommonMACFlows_1, &common_macdflow_id, FALSE);",
          "",
          "[Removed Lines]",
          "11555: #line 2038 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "11584: #line 2057 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "11635: static int",
          "11636: dissect_nbap_PayloadCRC_PresenceIndicator(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "11638: guint32 payload_crc_value;",
          "11640:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "11637: #line 668 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "11666: #line 709 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "11687: static int",
          "11688: dissect_nbap_LogicalChannelID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "11691:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "11692:                                                             1U, 15U, &logical_channel_id, FALSE);",
          "",
          "[Removed Lines]",
          "11689: #line 1686 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "11718: #line 1705 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "11705: static int",
          "11706: dissect_nbap_MAC_PDU_SizeExtended(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "11708:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "11709:                                                             1U, 1504U, NULL, TRUE);",
          "",
          "[Removed Lines]",
          "11707: #line 1788 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "11736: #line 1807 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "12128: static int",
          "12129: dissect_nbap_CommonMACFlow_Specific_InfoItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "12131:     address     dst_addr;",
          "12132:     transportLayerAddress_ipv4 = 0;",
          "12133:     BindingID_port = 0;",
          "",
          "[Removed Lines]",
          "12130: #line 2045 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "12159: #line 2064 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "12173: static int",
          "12174: dissect_nbap_MACdPDU_Size(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "12176:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "12177:                                                             1U, 5000U, &MACdPDU_Size, TRUE);",
          "",
          "[Removed Lines]",
          "12175: #line 1676 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "12204: #line 1695 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "12480: static int",
          "12481: dissect_nbap_CommonTransportChannel_InformationResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "12482:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "12483:                                    ett_nbap_CommonTransportChannel_InformationResponse, CommonTransportChannel_InformationResponse_sequence);",
          "12485:   return offset;",
          "12486: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12511: #line 175 \"./asn1/nbap/nbap.cnf\"",
          "12512: address dst_addr;",
          "12513: nbap_setup_conv_t *request_conv;",
          "12514: conversation_t *conv;",
          "12516: nbap_debug(\"Frame %u CommonTransportChannel-InformationResponse Start\", actx->pinfo->num);",
          "12518: transportLayerAddress_ipv4 = 0;",
          "12519: BindingID_port = 0;",
          "12525:   if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0){",
          "12526:     return offset;",
          "12527:   }",
          "12529:   set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "12531:   request_conv = find_setup_conv(TransactionID, ddMode, commontransportchannelid);",
          "12533:   if(request_conv == NULL){",
          "12534:     return offset;",
          "12535:   }",
          "12537:   conv = request_conv->conv;",
          "12538:   conversation_set_addr2(conv, &dst_addr);",
          "12539:   conversation_set_port2(conv, BindingID_port);",
          "12541:   delete_setup_conv(request_conv);",
          "12542:   nbap_debug(\"    Frame %u conversation setup frame: %u %s:%u -> %s:%u\", actx->pinfo->num, conv->setup_frame,",
          "12543:             address_to_str(wmem_packet_scope(), &conv->key_ptr->addr1), conv->key_ptr->port1,",
          "12544:             address_to_str(wmem_packet_scope(), &conv->key_ptr->addr2), conv->key_ptr->port2);",
          "12546:   nbap_debug(\"Frame %u CommonTransportChannel-InformationResponse End\", actx->pinfo->num);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "13394: static int",
          "13395: dissect_nbap_CRNC_CommunicationContextID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "13397:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "13398:                                                             0U, 1048575U, &com_context_id, FALSE);",
          "",
          "[Removed Lines]",
          "13396: #line 2155 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "13462: #line 2174 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "14825: static int",
          "14826: dissect_nbap_T_dCH_ID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "14829:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "14830:                                                             0U, 255U, &dch_id, FALSE);",
          "",
          "[Removed Lines]",
          "14827: #line 686 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "14893: #line 727 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "14847: static int",
          "14848: dissect_nbap_TransportFormatSet_NrOfTransportBlocks(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "14850: guint32 NrOfTransportBlocks;",
          "14852:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "14849: #line 1097 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "14915: #line 1116 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "14890: static int",
          "14891: dissect_nbap_TransportFormatSet_TransportBlockSize(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "14893: guint32 TransportBlockSize;",
          "14895:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "14892: #line 1129 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "14958: #line 1148 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "15018: static int",
          "15019: dissect_nbap_TransportFormatSet_DynamicPartList_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15021:     num_items++;",
          "",
          "[Removed Lines]",
          "15020: #line 1093 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15086: #line 1112 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "15036: static int",
          "15037: dissect_nbap_TransportFormatSet_DynamicPartList(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15039:     num_items = 0;",
          "",
          "[Removed Lines]",
          "15038: #line 1090 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15104: #line 1109 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "15207: static int",
          "15208: dissect_nbap_T_ul_TransportFormatSet(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15210:     transportFormatSet_type = NBAP_DCH_UL;",
          "15211:     nbap_dch_chnl_info[dch_id].num_ul_chans = 0;",
          "",
          "[Removed Lines]",
          "15209: #line 1068 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15275: #line 1087 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "15221: static int",
          "15222: dissect_nbap_T_dl_TransportFormatSet(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15224:     transportFormatSet_type = NBAP_DCH_DL;",
          "15225:     nbap_dch_chnl_info[dch_id].num_dl_chans = 0;",
          "",
          "[Removed Lines]",
          "15223: #line 1072 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15289: #line 1091 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "15271: static int",
          "15272: dissect_nbap_DCH_Specific_FDD_Item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15274:     g_num_dch_in_flow++;",
          "15277:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "15278:                                    ett_nbap_DCH_Specific_FDD_Item, DCH_Specific_FDD_Item_sequence);",
          "15281:     prev_dch_id = dch_id;",
          "",
          "[Removed Lines]",
          "15273: #line 1062 \"./asn1/nbap/nbap.cnf\"",
          "15280: #line 1065 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15339: #line 1081 \"./asn1/nbap/nbap.cnf\"",
          "15346: #line 1084 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "15292: static int",
          "15293: dissect_nbap_DCH_Specific_FDD_InformationList(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15295:     g_num_dch_in_flow = 0;",
          "15296:     prev_dch_id = 0;",
          "",
          "[Removed Lines]",
          "15294: #line 1058 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15360: #line 1077 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "15571: static int",
          "15572: dissect_nbap_T_dCH_ID_01(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15575:   offset = dissect_nbap_DCH_ID(tvb, offset, actx, tree, hf_index);",
          "",
          "[Removed Lines]",
          "15573: #line 699 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15639: #line 740 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "15586: static int",
          "15587: dissect_nbap_T_ul_TransportFormatSet_01(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15589:     transportFormatSet_type = NBAP_DCH_UL;",
          "15590:     nbap_dch_chnl_info[dch_id].num_ul_chans = 0;",
          "",
          "[Removed Lines]",
          "15588: #line 1076 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15654: #line 1095 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "15600: static int",
          "15601: dissect_nbap_T_dl_TransportFormatSet_01(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15603:     transportFormatSet_type = NBAP_DCH_DL;",
          "15604:     nbap_dch_chnl_info[dch_id].num_dl_chans = 0;",
          "",
          "[Removed Lines]",
          "15602: #line 1080 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15668: #line 1099 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "15656: static int",
          "15657: dissect_nbap_FDD_DCHs_to_ModifyItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15660:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "15661:                                    ett_nbap_FDD_DCHs_to_ModifyItem, FDD_DCHs_to_ModifyItem_sequence);",
          "",
          "[Removed Lines]",
          "15658: #line 1156 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15724: #line 1175 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "18078: static int",
          "18079: dissect_nbap_E_DCH_DDI_Value(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18082:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "18083:                                                             0U, 62U, &e_dch_ddi_value, FALSE);",
          "",
          "[Removed Lines]",
          "18080: #line 1665 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "18146: #line 1684 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "18213: static int",
          "18214: dissect_nbap_E_DCH_LogicalChannelInformationItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18216:     num_items++;",
          "",
          "[Removed Lines]",
          "18215: #line 1662 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "18281: #line 1681 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "18230: static int",
          "18231: dissect_nbap_E_DCH_LogicalChannelInformation(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18233:     num_items = 0;",
          "18235:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "18232: #line 1655 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "18298: #line 1674 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "18263: static int",
          "18264: dissect_nbap_E_DCH_MACdFlow_Specific_InfoItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18266: umts_fp_conversation_info_t *p_conv_data = NULL;",
          "18267: fp_edch_channel_info_t* fp_edch_channel_info = NULL;",
          "18268: address     null_addr;",
          "",
          "[Removed Lines]",
          "18265: #line 1397 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "18331: #line 1416 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "18452: static int",
          "18453: dissect_nbap_E_DCH_LogicalChannelToModifyItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18456:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "18457:                                    ett_nbap_E_DCH_LogicalChannelToModifyItem, E_DCH_LogicalChannelToModifyItem_sequence);",
          "",
          "[Removed Lines]",
          "18454: #line 1650 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "18520: #line 1669 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "18527: static int",
          "18528: dissect_nbap_E_DCH_MACdFlow_Specific_InfoItem_to_Modify(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18530: guint32 no_ddi_entries, i;",
          "18531: address     null_addr;",
          "18532: nbap_edch_port_info_t *old_info;",
          "",
          "[Removed Lines]",
          "18529: #line 1552 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "18595: #line 1571 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "18675: static int",
          "18676: dissect_nbap_E_DCH_FDD_Information_to_Modify(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18679: address     dst_addr, null_addr;",
          "18680: conversation_t *conversation,*old_conversation = NULL;",
          "",
          "[Removed Lines]",
          "18677: #line 1456 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "18743: #line 1475 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "21857: }",
          "21860: static const per_sequence_t GANSS_RX_Pos_sequence[] = {",
          "21861:   { &hf_nbap_latitudeSign   , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_nbap_T_latitudeSign },",
          "21862:   { &hf_nbap_degreesOfLatitude, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_nbap_INTEGER_0_2147483647 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21927: static int",
          "21928: dissect_nbap_INTEGER_0_32767(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "21929:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "21930:                                                             0U, 32767U, NULL, FALSE);",
          "21932:   return offset;",
          "21933: }",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "23260: static int",
          "23261: dissect_nbap_PICH_Mode(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23263: guint32 PICH_Mode = 0;",
          "23264:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "23265:                                      4, &PICH_Mode, TRUE, 0, NULL);",
          "",
          "[Removed Lines]",
          "23262: #line 824 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "23338: #line 860 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "23375: static int",
          "23376: dissect_nbap_HSDSCH_Common_System_InformationFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "",
          "[Removed Lines]",
          "23377: #line 2065 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "23453: #line 2084 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "23461: }",
          "23464: static const per_sequence_t HSSCCH_Codes_sequence[] = {",
          "23465:   { &hf_nbap_codeNumber     , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_nbap_INTEGER_0_127 },",
          "23466:   { &hf_nbap_iE_Extensions  , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_nbap_ProtocolExtensionContainer },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23541: static int",
          "23542: dissect_nbap_INTEGER_0_127(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23543:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "23544:                                                             0U, 127U, NULL, FALSE);",
          "23546:   return offset;",
          "23547: }",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "23511: static int",
          "23512: dissect_nbap_HSDSCH_MACdFlow_ID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23514:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "23515:                                                             0U, maxNrOfMACdFlows_1, &hsdsch_macdflow_id, FALSE);",
          "",
          "[Removed Lines]",
          "23513: #line 719 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "23599: #line 760 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "23538: static int",
          "23539: dissect_nbap_HSDSCH_MACdFlow_Specific_InfoItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23543:     address     dst_addr;",
          "",
          "[Removed Lines]",
          "23540: #line 1766 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "23626: #line 1785 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "23641: static int",
          "23642: dissect_nbap_RLC_Mode(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23644:     guint32 rlc_mode;",
          "23646:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "23643: #line 1693 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "23729: #line 1712 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "23682: static int",
          "23683: dissect_nbap_PriorityQueue_InfoItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23685:     num_items++;",
          "",
          "[Removed Lines]",
          "23684: #line 1757 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "23770: #line 1776 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "23716: static int",
          "23717: dissect_nbap_HSDSCH_MACdFlows_Information(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23720:     int protocol_ie_id;",
          "23721:     guint32 i;",
          "",
          "[Removed Lines]",
          "23718: #line 1717 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "23804: #line 1736 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "23760: static int",
          "23761: dissect_nbap_T_hSDSCH_Physical_Layer_Category(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23763:     guint32 hsdsch_physical_layer_category;",
          "23765:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "23762: #line 1710 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "23848: #line 1729 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "23828: static int",
          "23829: dissect_nbap_HSDSCH_FDD_Information(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "",
          "[Removed Lines]",
          "23830: #line 1818 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "23916: #line 1837 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "23968: static int",
          "23969: dissect_nbap_HSDSCH_MACdFlow_Specific_InfoItem_to_Modify(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23971:     address     dst_addr;",
          "23972:     transportLayerAddress_ipv4 = 0;",
          "23973:     BindingID_port = 0;",
          "",
          "[Removed Lines]",
          "23970: #line 1910 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24056: #line 1929 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "24026: static int",
          "24027: dissect_nbap_PriorityQueue_InfoItem_to_Add(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "24029:     num_items = 1;",
          "",
          "[Removed Lines]",
          "24028: #line 1760 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24114: #line 1779 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "24161: static int",
          "24162: dissect_nbap_HSDSCH_Information_to_Modify(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "",
          "[Removed Lines]",
          "24163: #line 1930 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24249: #line 1949 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "24286: static int",
          "24287: dissect_nbap_HSDSCH_MACdPDUSizeFormat(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "",
          "[Removed Lines]",
          "24288: #line 1795 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24374: #line 1814 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "24397: static int",
          "24398: dissect_nbap_HSDSCH_MACdFlow_Specific_InformationResp_Item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "24400:     num_items++;",
          "",
          "[Removed Lines]",
          "24399: #line 1763 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24485: #line 1782 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "24813: static int",
          "24814: dissect_nbap_HSDSCH_Paging_System_InformationFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "24817:   g_warning(\"HS-DSCH Type 3 NOT Implemented!\");",
          "",
          "[Removed Lines]",
          "24815: #line 2145 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24901: #line 2164 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "25007: static int",
          "25008: dissect_nbap_HSDSCH_MACdFlows_to_Delete_Item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "25010:     num_items++;",
          "",
          "[Removed Lines]",
          "25009: #line 1754 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "25095: #line 1773 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "25024: static int",
          "25025: dissect_nbap_HSDSCH_MACdFlows_to_Delete(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "25027:     num_items = 0;",
          "",
          "[Removed Lines]",
          "25026: #line 1749 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "25112: #line 1768 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "26401: static int",
          "26402: dissect_nbap_IB_SG_DATA(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "26404:   tvbuff_t *parameter_tvb=NULL;",
          "26405:   proto_tree *subtree;",
          "",
          "[Removed Lines]",
          "26403: #line 577 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "26489: #line 618 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "26535: static int",
          "26536: dissect_nbap_IB_Type(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "26538:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "26539:                                      26, &ib_type, TRUE, 15, NULL);",
          "",
          "[Removed Lines]",
          "26537: #line 564 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "26623: #line 605 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "28126: static int",
          "28127: dissect_nbap_NodeB_CommunicationContextID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "28130: nbap_com_context_id_t *cur_val;",
          "",
          "[Removed Lines]",
          "28128: #line 2159 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "28214: #line 2178 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "28691: static int",
          "28692: dissect_nbap_T_dCH_id(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "28695:   offset = dissect_nbap_DCH_ID(tvb, offset, actx, tree, hf_index);",
          "",
          "[Removed Lines]",
          "28693: #line 1162 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "28779: #line 1181 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "28713: static int",
          "28714: dissect_nbap_RL_Specific_DCH_Info_Item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "28716: address     dst_addr, null_addr;",
          "28717: conversation_t *conversation = NULL;",
          "28718: umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "",
          "[Removed Lines]",
          "28715: #line 1167 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "28801: #line 1186 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "28858: static int",
          "28859: dissect_nbap_RL_Specific_E_DCH_Information_Item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "28861: address     dst_addr, null_addr;",
          "28862: conversation_t *conversation;",
          "28863: umts_fp_conversation_info_t *umts_fp_conversation_info = NULL;",
          "",
          "[Removed Lines]",
          "28860: #line 1282 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "28946: #line 1301 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "29905: static int",
          "29906: dissect_nbap_Segment_Type(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "29908:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "29909:                                      7, &segment_type, TRUE, 0, NULL);",
          "",
          "[Removed Lines]",
          "29907: #line 567 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "29993: #line 608 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "32238: static int",
          "32239: dissect_nbap_CommonTransportChannelSetupRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "32241: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonTransportChannelSetupRequest(FDD) \");",
          "32243: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "32240: #line 149 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "32326: #line 153 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "32428: static int",
          "32429: dissect_nbap_FACH_ParametersItem_CTCH_SetupRqstFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "32432: conversation_t *conversation;",
          "32434: fp_fach_channel_info_t* fp_fach_channel_info;",
          "",
          "[Removed Lines]",
          "32430: #line 960 \"./asn1/nbap/nbap.cnf\"",
          "32431: address     dst_addr, null_addr;",
          "",
          "[Added Lines]",
          "32516: #line 985 \"./asn1/nbap/nbap.cnf\"",
          "32517: address dst_addr, null_addr;",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "32444:                                    ett_nbap_FACH_ParametersItem_CTCH_SetupRqstFDD, FACH_ParametersItem_CTCH_SetupRqstFDD_sequence);",
          "",
          "[Removed Lines]",
          "32447:         if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "32448:         {",
          "32449:             return offset;",
          "32450:         }",
          "32451:         clear_address(&null_addr);",
          "32453:         set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "32455:         conversation = find_conversation(actx->pinfo->num,&dst_addr,",
          "32456:             &null_addr, PT_UDP, BindingID_port,",
          "32457:             0, NO_ADDR_B|NO_PORT_B);",
          "32459:         if (conversation == NULL) {",
          "32461:             conversation = conversation_new(actx->pinfo->num, &dst_addr,",
          "32462:                 &null_addr, PT_UDP,BindingID_port ,",
          "32463:                 0, NO_ADDR2|NO_PORT2);",
          "32466:             conversation_set_dissector(conversation, fp_handle);",
          "32467:             if(actx->pinfo->link_dir==P2P_DIR_DL){",
          "32468:                 umts_fp_conversation_info = wmem_new0(wmem_file_scope(), umts_fp_conversation_info_t);",
          "32470:                 umts_fp_conversation_info->iface_type        = IuB_Interface;",
          "32471:                 umts_fp_conversation_info->division          = Division_FDD;",
          "32472:                 umts_fp_conversation_info->channel           = CHANNEL_FACH_FDD;",
          "32473:                 umts_fp_conversation_info->dl_frame_number   = 0;",
          "32474:                 umts_fp_conversation_info->ul_frame_number   = actx->pinfo->num;",
          "32475:                 copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "32476:                 umts_fp_conversation_info->crnc_port         = BindingID_port;",
          "32477:                 umts_fp_conversation_info->rlc_mode          = FP_RLC_MODE_UNKNOWN;",
          "32479:                 umts_fp_conversation_info->com_context_id = crcn_context_present ? com_context_id : 1;",
          "32482:                 fp_fach_channel_info = wmem_new0(wmem_file_scope(), fp_fach_channel_info_t);",
          "32483:                 fp_fach_channel_info->crnti_to_urnti_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "32484:                 umts_fp_conversation_info->channel_specific_info = (void*)fp_fach_channel_info;",
          "32487:                 umts_fp_conversation_info->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "32489:                 umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_ul_chans;",
          "32490:                 for (j = 0; j < num_tf; j++) {",
          "32491:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_tf_size[j];",
          "32492:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_num_tbs[j];",
          "32493:                 }",
          "32496:                 umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_dl_chans;",
          "32497:                 for (j = 0; j < num_tf; j++) {",
          "32498:                     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_tf_size[j];",
          "32499:                     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_num_tbs[j];",
          "32500:                 }",
          "32503:                 i = commonphysicalchannelid;",
          "32504:                 umts_fp_conversation_info->dch_ids_in_flow_list[0] = commonphysicalchannelid;",
          "32505:                 while(nbap_dch_chnl_info[i].next_dch != 0){",
          "32506:                     i = nbap_dch_chnl_info[i].next_dch;",
          "32507:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "32508:                     umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "32510:                     umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_ul_chans = num_tf = nbap_dch_chnl_info[i].num_ul_chans;",
          "32511:                     for (j = 0; j < num_tf; j++) {",
          "32512:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_tf_size[j] = nbap_dch_chnl_info[i].ul_chan_tf_size[j];",
          "32513:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_num_tbs[j] = nbap_dch_chnl_info[i].ul_chan_num_tbs[j];",
          "32514:                     }",
          "32517:                     umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_dl_chans = num_tf = nbap_dch_chnl_info[i].num_dl_chans;",
          "32518:                     for (j = 0; j < num_tf; j++) {",
          "32519:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_tf_size[j] = nbap_dch_chnl_info[i].dl_chan_tf_size[j];",
          "32520:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_num_tbs[j] = nbap_dch_chnl_info[i].dl_chan_num_tbs[j];",
          "32521:                     }",
          "32522:                 }",
          "32523:                 umts_fp_conversation_info->num_dch_in_flow++;",
          "32524:                 umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "32525:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "32526:             }",
          "32528:         }",
          "",
          "[Added Lines]",
          "32533:   if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "32534:   {",
          "32535:     return offset;",
          "32536:   }",
          "32537:   clear_address(&null_addr);",
          "32539:   set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "32541:   conversation = conversation_new(actx->pinfo->num, &dst_addr, &null_addr, PT_UDP,BindingID_port, 0, NO_ADDR2|NO_PORT2);",
          "32544:   conversation_set_dissector(conversation, fp_handle);",
          "32546:   if(actx->pinfo->link_dir==P2P_DIR_DL){",
          "32547:     umts_fp_conversation_info = wmem_new0(wmem_file_scope(), umts_fp_conversation_info_t);",
          "32549:     umts_fp_conversation_info->iface_type        = IuB_Interface;",
          "32550:     umts_fp_conversation_info->division          = Division_FDD;",
          "32551:     umts_fp_conversation_info->channel           = CHANNEL_FACH_FDD;",
          "32552:     umts_fp_conversation_info->dl_frame_number   = 0;",
          "32553:     umts_fp_conversation_info->ul_frame_number   = actx->pinfo->num;",
          "32554:     copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "32555:     umts_fp_conversation_info->crnc_port         = BindingID_port;",
          "32556:     umts_fp_conversation_info->rlc_mode          = FP_RLC_MODE_UNKNOWN;",
          "32558:     umts_fp_conversation_info->com_context_id = crcn_context_present ? com_context_id : 1;",
          "32561:     fp_fach_channel_info = wmem_new0(wmem_file_scope(), fp_fach_channel_info_t);",
          "32562:     fp_fach_channel_info->crnti_to_urnti_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "32563:     umts_fp_conversation_info->channel_specific_info = (void*)fp_fach_channel_info;",
          "32566:     umts_fp_conversation_info->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "32568:     umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_ul_chans;",
          "32569:     for (j = 0; j < num_tf; j++) {",
          "32570:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_tf_size[j];",
          "32571:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_num_tbs[j];",
          "32572:     }",
          "32575:     umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_dl_chans;",
          "32576:     for (j = 0; j < num_tf; j++) {",
          "32577:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_tf_size[j];",
          "32578:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_num_tbs[j];",
          "32579:     }",
          "32582:     i = commonphysicalchannelid;",
          "32583:     umts_fp_conversation_info->dch_ids_in_flow_list[0] = commonphysicalchannelid;",
          "32584:     while(nbap_dch_chnl_info[i].next_dch != 0){",
          "32585:       i = nbap_dch_chnl_info[i].next_dch;",
          "32586:       umts_fp_conversation_info->num_dch_in_flow++;",
          "32587:       umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "32589:       umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_ul_chans = num_tf = nbap_dch_chnl_info[i].num_ul_chans;",
          "32590:       for (j = 0; j < num_tf; j++) {",
          "32591:         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_tf_size[j] = nbap_dch_chnl_info[i].ul_chan_tf_size[j];",
          "32592:         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_num_tbs[j] = nbap_dch_chnl_info[i].ul_chan_num_tbs[j];",
          "32593:       }",
          "32596:       umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_dl_chans = num_tf = nbap_dch_chnl_info[i].num_dl_chans;",
          "32597:       for (j = 0; j < num_tf; j++) {",
          "32598:         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_tf_size[j] = nbap_dch_chnl_info[i].dl_chan_tf_size[j];",
          "32599:         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_num_tbs[j] = nbap_dch_chnl_info[i].dl_chan_num_tbs[j];",
          "32600:       }",
          "32601:     }",
          "32602:     umts_fp_conversation_info->num_dch_in_flow++;",
          "32603:     umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "32604:     set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "32607:     add_setup_conv(TransactionID, ddMode, commontransportchannelid, actx->pinfo->num, &dst_addr, BindingID_port, umts_fp_conversation_info, conversation);",
          "32608:   }",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "32551: static int",
          "32552: dissect_nbap_T_transportFormatSet(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "32554:     transportFormatSet_type = NBAP_PCH;",
          "32555:     nbap_dch_chnl_info[commontransportchannelid].num_dl_chans = 0;",
          "32556:     nbap_dch_chnl_info[commontransportchannelid].num_ul_chans = 0;",
          "",
          "[Removed Lines]",
          "32553: #line 1084 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "32633: #line 1103 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "32596: static int",
          "32597: dissect_nbap_PCH_ParametersItem_CTCH_SetupRqstFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "32601: conversation_t *conversation;",
          "32603: fp_pch_channel_info_t *fp_pch_channel_info;",
          "",
          "[Removed Lines]",
          "32598: #line 845 \"./asn1/nbap/nbap.cnf\"",
          "32600: address     dst_addr, null_addr;",
          "",
          "[Added Lines]",
          "32678: #line 881 \"./asn1/nbap/nbap.cnf\"",
          "32680: address dst_addr, null_addr;",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "32614:                                    ett_nbap_PCH_ParametersItem_CTCH_SetupRqstFDD, PCH_ParametersItem_CTCH_SetupRqstFDD_sequence);",
          "",
          "[Removed Lines]",
          "32617:         if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "32618:         {",
          "32619:             return offset;",
          "32620:         }",
          "32621:         clear_address(&null_addr);",
          "32623:         set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "32625:         conversation = find_conversation(actx->pinfo->num,&dst_addr,",
          "32626:             &null_addr, PT_UDP, BindingID_port,",
          "32627:             0, NO_ADDR_B|NO_PORT_B);",
          "32629:         if (conversation == NULL) {",
          "32631:             conversation = conversation_new(actx->pinfo->num, &dst_addr,",
          "32632:                 &null_addr, PT_UDP,BindingID_port ,",
          "32633:                 0, NO_ADDR2|NO_PORT2);",
          "32636:             conversation_set_dissector(conversation, fp_handle);",
          "32637:             if(actx->pinfo->link_dir==P2P_DIR_DL){",
          "32638:                 umts_fp_conversation_info = wmem_new0(wmem_file_scope(), umts_fp_conversation_info_t);",
          "32640:                 umts_fp_conversation_info->iface_type         = IuB_Interface;",
          "32641:                 umts_fp_conversation_info->division           = Division_FDD;",
          "32642:                 umts_fp_conversation_info->channel            = CHANNEL_PCH;",
          "32643:                 umts_fp_conversation_info->dl_frame_number    = 0;",
          "32644:                 umts_fp_conversation_info->ul_frame_number    = actx->pinfo->num;",
          "32645:                 copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "32646:                 umts_fp_conversation_info->crnc_port          = BindingID_port;",
          "32647:                 umts_fp_conversation_info->rlc_mode           = FP_RLC_MODE_UNKNOWN;",
          "32649:                 fp_pch_channel_info = wmem_new0(wmem_file_scope(), fp_pch_channel_info_t);",
          "32650:                 fp_pch_channel_info->paging_indications = paging_indications;",
          "32651:                 umts_fp_conversation_info->channel_specific_info = (void*)fp_pch_channel_info;",
          "32654:                 umts_fp_conversation_info->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "32656:                 umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[commontransportchannelid].num_ul_chans;",
          "32658:                 nbap_debug(\"Frame %u PCH-ParametersItem-CTCH-SetupRqstFDD Start: num_tf %u\",",
          "32659:                         actx->pinfo->num,",
          "32660:                         num_tf);",
          "32662:                 for (j = 0; j < num_tf; j++) {",
          "32663:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[commontransportchannelid].ul_chan_tf_size[j];",
          "32664:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[commontransportchannelid].ul_chan_num_tbs[j];",
          "32665:                     nbap_debug(\"    UL tf %u ul_chan_tf_size %u\",j, nbap_dch_chnl_info[commontransportchannelid].ul_chan_tf_size[j]);",
          "32666:                 }",
          "32669:                 umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[commontransportchannelid].num_dl_chans;",
          "32670:                 for (j = 0; j < num_tf; j++) {",
          "32671:                     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[commontransportchannelid].dl_chan_tf_size[j];",
          "32672:                     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[commontransportchannelid].dl_chan_num_tbs[j];",
          "32673:                     nbap_debug(\"    DL tf %u ul_chan_tf_size %u\",j, nbap_dch_chnl_info[commontransportchannelid].dl_chan_tf_size[j]);",
          "32674:                 }",
          "32677:                 i = commontransportchannelid;",
          "32679:                 nbap_debug(\"    commontransportchannelid %u next ch %u\",commontransportchannelid, nbap_dch_chnl_info[i].next_dch);",
          "32681:                 umts_fp_conversation_info->dch_ids_in_flow_list[0] = commontransportchannelid;",
          "32682:                 while(nbap_dch_chnl_info[i].next_dch != 0){",
          "32683:                     i = nbap_dch_chnl_info[i].next_dch;",
          "32684:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "32685:                     umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "32687:                     umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_ul_chans = num_tf = nbap_dch_chnl_info[i].num_ul_chans;",
          "32688:                     for (j = 0; j < num_tf; j++) {",
          "32689:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_tf_size[j] = nbap_dch_chnl_info[i].ul_chan_tf_size[j];",
          "32690:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_num_tbs[j] = nbap_dch_chnl_info[i].ul_chan_num_tbs[j];",
          "32691:                     }",
          "32694:                     umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_dl_chans = num_tf = nbap_dch_chnl_info[i].num_dl_chans;",
          "32695:                     for (j = 0; j < num_tf; j++) {",
          "32696:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_tf_size[j] = nbap_dch_chnl_info[i].dl_chan_tf_size[j];",
          "32697:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_num_tbs[j] = nbap_dch_chnl_info[i].dl_chan_num_tbs[j];",
          "32698:                     }",
          "32699:                 }",
          "32700:                 umts_fp_conversation_info->num_dch_in_flow++;",
          "32702:                 nbap_debug(\"    num_dch_in_flow %u\", umts_fp_conversation_info->num_dch_in_flow);",
          "32704:                 umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "32705:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "32707:                 nbap_debug(\"Frame %u PCH-ParametersItem-CTCH-SetupRqstFDD End\",",
          "32708:                         actx->pinfo->num);",
          "32710:             }",
          "32712:         }",
          "",
          "[Added Lines]",
          "32697:   if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "32698:   {",
          "32699:     return offset;",
          "32700:   }",
          "32701:   clear_address(&null_addr);",
          "32703:   set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "32705:   conversation = conversation_new(actx->pinfo->num, &dst_addr, &null_addr, PT_UDP,BindingID_port, 0, NO_ADDR2|NO_PORT2);",
          "32708:   conversation_set_dissector(conversation, fp_handle);",
          "32710:   if(actx->pinfo->link_dir==P2P_DIR_DL){",
          "32711:     umts_fp_conversation_info = wmem_new0(wmem_file_scope(), umts_fp_conversation_info_t);",
          "32713:     umts_fp_conversation_info->iface_type         = IuB_Interface;",
          "32714:     umts_fp_conversation_info->division           = Division_FDD;",
          "32715:     umts_fp_conversation_info->channel            = CHANNEL_PCH;",
          "32716:     umts_fp_conversation_info->dl_frame_number    = 0;",
          "32717:     umts_fp_conversation_info->ul_frame_number    = actx->pinfo->num;",
          "32718:     copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "32719:     umts_fp_conversation_info->crnc_port          = BindingID_port;",
          "32720:     umts_fp_conversation_info->rlc_mode           = FP_RLC_MODE_UNKNOWN;",
          "32722:     fp_pch_channel_info = wmem_new0(wmem_file_scope(), fp_pch_channel_info_t);",
          "32723:     fp_pch_channel_info->paging_indications = paging_indications;",
          "32724:     umts_fp_conversation_info->channel_specific_info = (void*)fp_pch_channel_info;",
          "32727:     umts_fp_conversation_info->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "32729:     umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[commontransportchannelid].num_ul_chans;",
          "32731:     nbap_debug(\"Frame %u PCH-ParametersItem-CTCH-SetupRqstFDD Start: num_tf %u\", actx->pinfo->num, num_tf);",
          "32733:     for (j = 0; j < num_tf; j++) {",
          "32734:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[commontransportchannelid].ul_chan_tf_size[j];",
          "32735:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[commontransportchannelid].ul_chan_num_tbs[j];",
          "32736:       nbap_debug(\"    UL tf %u ul_chan_tf_size %u\",j, nbap_dch_chnl_info[commontransportchannelid].ul_chan_tf_size[j]);",
          "32737:     }",
          "32740:     umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[commontransportchannelid].num_dl_chans;",
          "32741:     for (j = 0; j < num_tf; j++) {",
          "32742:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[commontransportchannelid].dl_chan_tf_size[j];",
          "32743:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[commontransportchannelid].dl_chan_num_tbs[j];",
          "32744:       nbap_debug(\"    DL tf %u ul_chan_tf_size %u\",j, nbap_dch_chnl_info[commontransportchannelid].dl_chan_tf_size[j]);",
          "32745:     }",
          "32748:     i = commontransportchannelid;",
          "32750:     nbap_debug(\"    commontransportchannelid %u next ch %u\",commontransportchannelid, nbap_dch_chnl_info[i].next_dch);",
          "32752:     umts_fp_conversation_info->dch_ids_in_flow_list[0] = commontransportchannelid;",
          "32753:     while(nbap_dch_chnl_info[i].next_dch != 0){",
          "32754:       i = nbap_dch_chnl_info[i].next_dch;",
          "32755:       umts_fp_conversation_info->num_dch_in_flow++;",
          "32756:       umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "32758:       umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_ul_chans = num_tf = nbap_dch_chnl_info[i].num_ul_chans;",
          "32759:       for (j = 0; j < num_tf; j++) {",
          "32760:         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_tf_size[j] = nbap_dch_chnl_info[i].ul_chan_tf_size[j];",
          "32761:         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_num_tbs[j] = nbap_dch_chnl_info[i].ul_chan_num_tbs[j];",
          "32762:       }",
          "32765:       umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_dl_chans = num_tf = nbap_dch_chnl_info[i].num_dl_chans;",
          "32766:       for (j = 0; j < num_tf; j++) {",
          "32767:         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_tf_size[j] = nbap_dch_chnl_info[i].dl_chan_tf_size[j];",
          "32768:         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_num_tbs[j] = nbap_dch_chnl_info[i].dl_chan_num_tbs[j];",
          "32769:       }",
          "32770:     }",
          "32771:     umts_fp_conversation_info->num_dch_in_flow++;",
          "32773:     nbap_debug(\"    num_dch_in_flow %u\", umts_fp_conversation_info->num_dch_in_flow);",
          "32775:     umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "32776:     set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "32779:     add_setup_conv(TransactionID, ddMode, commontransportchannelid, actx->pinfo->num, &dst_addr, BindingID_port, umts_fp_conversation_info, conversation);",
          "32781:     nbap_debug(\"Frame %u PCH-ParametersItem-CTCH-SetupRqstFDD End\", actx->pinfo->num);",
          "32782:   }",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "32747: static int",
          "32748: dissect_nbap_RACH_ParametersItem_CTCH_SetupRqstFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "32751: conversation_t *conversation;",
          "32752: fp_rach_channel_info_t* fp_rach_channel_info;",
          "32753: umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "",
          "[Removed Lines]",
          "32749: #line 749 \"./asn1/nbap/nbap.cnf\"",
          "32750: address     dst_addr, null_addr;",
          "",
          "[Added Lines]",
          "32818: #line 790 \"./asn1/nbap/nbap.cnf\"",
          "32819: address dst_addr, null_addr;",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "32761:                                    ett_nbap_RACH_ParametersItem_CTCH_SetupRqstFDD, RACH_ParametersItem_CTCH_SetupRqstFDD_sequence);",
          "32828:   return offset;",
          "",
          "[Removed Lines]",
          "32764:         if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "32765:         {",
          "32766:             return offset;",
          "32767:         }",
          "32768:         clear_address(&null_addr);",
          "32770:         set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "32772:         conversation = find_conversation(actx->pinfo->num,&dst_addr,",
          "32773:             &null_addr, PT_UDP, BindingID_port,",
          "32774:             0, NO_ADDR_B|NO_PORT_B);",
          "32776:         if (conversation == NULL) {",
          "32778:             conversation = conversation_new(actx->pinfo->num, &dst_addr,",
          "32779:                 &null_addr, PT_UDP,BindingID_port ,",
          "32780:                 0, NO_ADDR2|NO_PORT2);",
          "32783:             conversation_set_dissector(conversation, fp_handle);",
          "32784:             if(actx->pinfo->link_dir==P2P_DIR_DL){",
          "32785:                 umts_fp_conversation_info = wmem_new0(wmem_file_scope(), umts_fp_conversation_info_t);",
          "32787:                 umts_fp_conversation_info->iface_type        = IuB_Interface;",
          "32788:                 umts_fp_conversation_info->division          = Division_FDD;",
          "32789:                 umts_fp_conversation_info->channel           = CHANNEL_RACH_FDD;",
          "32790:                 umts_fp_conversation_info->dl_frame_number   = 0;",
          "32791:                 umts_fp_conversation_info->ul_frame_number   = actx->pinfo->num;",
          "32792:                 copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "32793:                 umts_fp_conversation_info->crnc_port         = BindingID_port;",
          "32794:                 umts_fp_conversation_info->rlc_mode          = FP_RLC_MODE_UNKNOWN;",
          "32797:                 fp_rach_channel_info = wmem_new0(wmem_file_scope(), fp_rach_channel_info_t);",
          "32798:                 fp_rach_channel_info->crnti_to_urnti_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "32799:                 umts_fp_conversation_info->channel_specific_info = (void*)fp_rach_channel_info;",
          "32803:                 umts_fp_conversation_info->com_context_id = crcn_context_present ?  com_context_id : 1;",
          "32806:                 umts_fp_conversation_info->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "32808:                 umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_ul_chans;",
          "32809:                 for (j = 0; j < num_tf; j++) {",
          "32810:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_tf_size[j];",
          "32811:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_num_tbs[j];",
          "32812:                 }",
          "32815:                 umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_dl_chans;",
          "32816:                 for (j = 0; j < num_tf; j++) {",
          "32817:                     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_tf_size[j];",
          "32818:                     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_num_tbs[j];",
          "32819:                 }",
          "32821:                 umts_fp_conversation_info->dch_ids_in_flow_list[0] = commonphysicalchannelid;",
          "32822:                 umts_fp_conversation_info->num_dch_in_flow=1;",
          "32823:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "32824:             }",
          "32825:         }",
          "",
          "[Added Lines]",
          "32833:   if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "32834:   {",
          "32835:     return offset;",
          "32836:   }",
          "32837:   clear_address(&null_addr);",
          "32839:   set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "32841:   conversation = conversation_new(actx->pinfo->num, &dst_addr, &null_addr, PT_UDP,BindingID_port, 0, NO_ADDR2|NO_PORT2);",
          "32843:   conversation_set_dissector(conversation, fp_handle);",
          "32845:   if(actx->pinfo->link_dir==P2P_DIR_DL){",
          "32846:     umts_fp_conversation_info = wmem_new0(wmem_file_scope(), umts_fp_conversation_info_t);",
          "32848:     umts_fp_conversation_info->iface_type        = IuB_Interface;",
          "32849:     umts_fp_conversation_info->division          = Division_FDD;",
          "32850:     umts_fp_conversation_info->channel           = CHANNEL_RACH_FDD;",
          "32851:     umts_fp_conversation_info->dl_frame_number   = 0;",
          "32852:     umts_fp_conversation_info->ul_frame_number   = actx->pinfo->num;",
          "32853:     copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "32854:     umts_fp_conversation_info->crnc_port         = BindingID_port;",
          "32855:     umts_fp_conversation_info->rlc_mode          = FP_RLC_MODE_UNKNOWN;",
          "32858:     fp_rach_channel_info = wmem_new0(wmem_file_scope(), fp_rach_channel_info_t);",
          "32859:     fp_rach_channel_info->crnti_to_urnti_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "32860:     umts_fp_conversation_info->channel_specific_info = (void*)fp_rach_channel_info;",
          "32864:     umts_fp_conversation_info->com_context_id = crcn_context_present ?  com_context_id : 1;",
          "32867:     umts_fp_conversation_info->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "32869:     umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_ul_chans;",
          "32870:     for (j = 0; j < num_tf; j++) {",
          "32871:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_tf_size[j];",
          "32872:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_num_tbs[j];",
          "32873:     }",
          "32876:     umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_dl_chans;",
          "32877:     for (j = 0; j < num_tf; j++) {",
          "32878:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_tf_size[j];",
          "32879:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_num_tbs[j];",
          "32880:     }",
          "32882:     umts_fp_conversation_info->dch_ids_in_flow_list[0] = commonphysicalchannelid;",
          "32883:     umts_fp_conversation_info->num_dch_in_flow=1;",
          "32884:     set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "32887:     add_setup_conv(TransactionID, ddMode, commontransportchannelid, actx->pinfo->num, &dst_addr, BindingID_port, umts_fp_conversation_info, conversation);",
          "32888:   }",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "33533: static int",
          "33534: dissect_nbap_CommonTransportChannelSetupResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "33536: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonTransportChannelSetupResponse \");",
          "33538: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "33535: #line 155 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "33599: #line 159 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "33568: static int",
          "33569: dissect_nbap_CommonTransportChannelSetupFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "33571: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonTransportChannelSetupFailure \");",
          "33573: actx->pinfo->link_dir=P2P_DIR_UL;",
          "33577:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "33578:                                    ett_nbap_CommonTransportChannelSetupFailure, CommonTransportChannelSetupFailure_sequence);",
          "",
          "[Removed Lines]",
          "33570: #line 161 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "33634: #line 165 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "34288: static int",
          "34289: dissect_nbap_UnblockResourceIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "34291: col_set_str(actx->pinfo->cinfo, COL_INFO,\"UnblockResourceIndication \");",
          "34293: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "34290: #line 522 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "34353: #line 563 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "34309: static int",
          "34310: dissect_nbap_AuditRequiredIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "34312: col_set_str(actx->pinfo->cinfo, COL_INFO,\"AuditRequiredIndication \");",
          "34314: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "34311: #line 426 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "34374: #line 467 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "34330: static int",
          "34331: dissect_nbap_AuditRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "34333: col_set_str(actx->pinfo->cinfo, COL_INFO,\"AuditRequest \");",
          "34335: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "34332: #line 179 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "34395: #line 220 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "34351: static int",
          "34352: dissect_nbap_AuditResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "34354: col_set_str(actx->pinfo->cinfo, COL_INFO,\"AuditResponse \");",
          "34356: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "34353: #line 185 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "34416: #line 226 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "34945: static int",
          "34946: dissect_nbap_AuditFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "34948: col_set_str(actx->pinfo->cinfo, COL_INFO,\"AuditFailure \");",
          "34950: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "34947: #line 191 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35010: #line 232 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "34967: static int",
          "34968: dissect_nbap_CommonMeasurementInitiationRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "34970: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementInitiationRequest \");",
          "34972: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "34969: #line 259 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35032: #line 300 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "35085: static int",
          "35086: dissect_nbap_CommonMeasurementInitiationResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35088: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementInitiationResponse \");",
          "35090: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35087: #line 265 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35150: #line 306 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "35201: static int",
          "35202: dissect_nbap_CommonMeasurementInitiationFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35204: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementInitiationFailure \");",
          "35206: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35203: #line 271 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35266: #line 312 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "35222: static int",
          "35223: dissect_nbap_CommonMeasurementReport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35225: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementReport \");",
          "35227: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35224: #line 432 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35287: #line 473 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "35338: static int",
          "35339: dissect_nbap_CommonMeasurementTerminationRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35341: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementTerminationRequest \");",
          "35343: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "35340: #line 438 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35403: #line 479 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "35359: static int",
          "35360: dissect_nbap_CommonMeasurementFailureIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35362: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementFailureIndication \");",
          "35364: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35361: #line 444 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35424: #line 485 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "35380: static int",
          "35381: dissect_nbap_CellSetupRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35383: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CellSetupRequest(FDD) \");",
          "35385: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "35382: #line 121 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35445: #line 125 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "35912: static int",
          "35913: dissect_nbap_CellSetupResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35915: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CellSetupResponse \");",
          "35917: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35914: #line 127 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35977: #line 131 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "35933: static int",
          "35934: dissect_nbap_CellSetupFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35936: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CellSetupFailure \");",
          "35938: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35935: #line 133 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35998: #line 137 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "36476: static int",
          "36477: dissect_nbap_ResourceStatusIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "36479: col_set_str(actx->pinfo->cinfo, COL_INFO,\"ResourceStatusIndication \");",
          "36481: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "36478: #line 420 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "36541: #line 461 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "37234: static int",
          "37235: dissect_nbap_SystemInformationUpdateRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "37237: col_set_str(actx->pinfo->cinfo, COL_INFO,\"SystemInformationUpdateRequest \");",
          "37239: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "37236: #line 238 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "37299: #line 279 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "37305: static int",
          "37306: dissect_nbap_MIB_SB_SIB_InformationItem_SystemInfoUpdateRqst(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "37310:     segment_type = 0;",
          "",
          "[Removed Lines]",
          "37307: #line 570 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "37370: #line 611 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "37373: static int",
          "37374: dissect_nbap_SystemInformationUpdateResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "37376: col_set_str(actx->pinfo->cinfo, COL_INFO,\"SystemInformationUpdateResponse \");",
          "37378: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "37375: #line 244 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "37438: #line 285 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "37394: static int",
          "37395: dissect_nbap_SystemInformationUpdateFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "37397: col_set_str(actx->pinfo->cinfo, COL_INFO,\"SystemInformationUpdateFailure \");",
          "37399: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "37396: #line 250 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "37459: #line 291 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "37416: static int",
          "37417: dissect_nbap_RadioLinkSetupRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "37420:     g_nbap_msg_info_for_fp.ProcedureCode = ProcedureCode;",
          "37421:     g_nbap_msg_info_for_fp.ddMode = ddMode;",
          "",
          "[Removed Lines]",
          "37418: #line 201 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "37481: #line 242 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "37899: static int",
          "37900: dissect_nbap_RadioLinkSetupResponseFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "37903:     g_nbap_msg_info_for_fp.ProcedureCode = ProcedureCode;",
          "37904:     g_nbap_msg_info_for_fp.ddMode = ddMode;",
          "",
          "[Removed Lines]",
          "37901: #line 214 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "37964: #line 255 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "38125: static int",
          "38126: dissect_nbap_RadioLinkSetupFailureFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "38128: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkSetupFailure(FDD) \");",
          "38130: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "38127: #line 227 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "38190: #line 268 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "38410: static int",
          "38411: dissect_nbap_RadioLinkAdditionRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "38413: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkAdditionRequest(FDD) \");",
          "",
          "[Removed Lines]",
          "38412: #line 277 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "38475: #line 318 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "38782: static int",
          "38783: dissect_nbap_RadioLinkAdditionResponseFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "38785: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkAdditionResponse(FDD) \");",
          "",
          "[Removed Lines]",
          "38784: #line 282 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "38847: #line 323 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "39058: static int",
          "39059: dissect_nbap_RadioLinkAdditionFailureFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "39061: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkAdditionRequest(FDD) \");",
          "",
          "[Removed Lines]",
          "39060: #line 288 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "39123: #line 329 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "39343: static int",
          "39344: dissect_nbap_RadioLinkReconfigurationPrepareFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "39346:     col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationPrepare(FDD) \");",
          "39348:     actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "39345: #line 315 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "39408: #line 356 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "40966: static int",
          "40967: dissect_nbap_RadioLinkReconfigurationReady(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "40969: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationReady \");",
          "40971: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "40968: #line 326 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41031: #line 367 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "41048: static int",
          "41049: dissect_nbap_RadioLinkReconfigurationFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41051: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationFailure \");",
          "41053: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "41050: #line 333 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41113: #line 374 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "41157: static int",
          "41158: dissect_nbap_RadioLinkReconfigurationCommit(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41160: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationCommit \");",
          "41162: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "41159: #line 450 \"./asn1/nbap/nbap.cnf\"",
          "41165: #line 2211 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41222: #line 491 \"./asn1/nbap/nbap.cnf\"",
          "41228: #line 2230 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "41187: static int",
          "41188: dissect_nbap_RadioLinkReconfigurationCancel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41190: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationCancel \");",
          "41192: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "41189: #line 456 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41252: #line 497 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "41208: static int",
          "41209: dissect_nbap_RadioLinkReconfigurationRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41211: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationRequestFDD(FDD) \");",
          "41213: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "41210: #line 344 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41273: #line 385 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "41665: static int",
          "41666: dissect_nbap_RadioLinkReconfigurationResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41668: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationResponse \");",
          "",
          "[Removed Lines]",
          "41667: #line 350 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41730: #line 391 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "41726: static int",
          "41727: dissect_nbap_RadioLinkDeletionRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41729: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkDeletionRequest \");",
          "41731: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "41728: #line 301 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41791: #line 342 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "41777: static int",
          "41778: dissect_nbap_RadioLinkDeletionResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41780: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkDeletionResponse \");",
          "41782: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "41779: #line 308 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41842: #line 349 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "41799: static int",
          "41800: dissect_nbap_DL_PowerControlRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41802: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DL-PowerControlRequest \");",
          "41804: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "41801: #line 504 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41864: #line 545 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "41850: static int",
          "41851: dissect_nbap_DL_PowerTimeslotControlRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41853: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DL-PowerTimeslotControlRequest \");",
          "41855: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "41852: #line 510 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41915: #line 551 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "41871: static int",
          "41872: dissect_nbap_DedicatedMeasurementInitiationRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41874: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementInitiationRequest \");",
          "41876: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "41873: #line 366 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41936: #line 407 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "42067: static int",
          "42068: dissect_nbap_DedicatedMeasurementInitiationResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42070: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementInitiationResponse \");",
          "42072: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "42069: #line 372 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42132: #line 413 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "42372: static int",
          "42373: dissect_nbap_DedicatedMeasurementInitiationFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42375: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementInitiationFailure \");",
          "42377: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "42374: #line 379 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42437: #line 420 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "42394: static int",
          "42395: dissect_nbap_DedicatedMeasurementReport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42397: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementReport \");",
          "42399: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "42396: #line 484 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42459: #line 525 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "42577: static int",
          "42578: dissect_nbap_DedicatedMeasurementTerminationRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42580: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementTerminationRequest \");",
          "42582: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "42579: #line 491 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42642: #line 532 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "42598: static int",
          "42599: dissect_nbap_DedicatedMeasurementFailureIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42601: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementFailureIndication \");",
          "42603: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "42600: #line 497 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42663: #line 538 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "42620: static int",
          "42621: dissect_nbap_RadioLinkFailureIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42623: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkFailureIndication \");",
          "42625: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "42622: #line 462 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42685: #line 503 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "42802: static int",
          "42803: dissect_nbap_RadioLinkPreemptionRequiredIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42805: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkPreemptionRequiredIndication \");",
          "42807: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "42804: #line 469 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42867: #line 510 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "42853: static int",
          "42854: dissect_nbap_RadioLinkRestoreIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42856: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkRestoreIndication \");",
          "42858: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "42855: #line 476 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42918: #line 517 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "43033: static int",
          "43034: dissect_nbap_CompressedModeCommand(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "43036: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CompressedModeCommand \");",
          "43038: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "43035: #line 516 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43098: #line 557 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "43054: static int",
          "43055: dissect_nbap_ErrorIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "43057: col_set_str(actx->pinfo->cinfo, COL_INFO,\"ErrorIndication \");",
          "",
          "[Removed Lines]",
          "43056: #line 528 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43119: #line 569 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "43074: static int",
          "43075: dissect_nbap_PrivateMessage(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "43077: col_set_str(actx->pinfo->cinfo, COL_INFO,\"PrivateMessage \");",
          "",
          "[Removed Lines]",
          "43076: #line 537 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43139: #line 578 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "43093: static int",
          "43094: dissect_nbap_PhysicalSharedChannelReconfigurationRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "43096: col_set_str(actx->pinfo->cinfo, COL_INFO,\"PhysicalSharedChannelReconfigurationRequest(FDD) \");",
          "43098: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "43095: #line 386 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43158: #line 427 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 136 ---",
          "[Context before]",
          "45561: static int",
          "45562: dissect_nbap_PhysicalSharedChannelReconfigurationResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "45564: col_set_str(actx->pinfo->cinfo, COL_INFO,\"PhysicalSharedChannelReconfigurationResponse \");",
          "45566: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "45563: #line 392 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "45626: #line 433 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 137 ---",
          "[Context before]",
          "45612: static int",
          "45613: dissect_nbap_PhysicalSharedChannelReconfigurationFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "45615: col_set_str(actx->pinfo->cinfo, COL_INFO,\"PhysicalSharedChannelReconfigurationFailure \");",
          "45617: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "45614: #line 398 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "45677: #line 439 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 138 ---",
          "[Context before]",
          "47065: static int",
          "47066: dissect_nbap_BearerRearrangementIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "47068: col_set_str(actx->pinfo->cinfo, COL_INFO,\"BearerRearrangementIndication \");",
          "",
          "[Removed Lines]",
          "47067: #line 544 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "47130: #line 585 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 139 ---",
          "[Context before]",
          "47367: static int",
          "47368: dissect_nbap_RadioLinkParameterUpdateIndicationFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "47370: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkParameterUpdateIndication(FDD) \");",
          "47372: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "47369: #line 552 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "47432: #line 593 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 140 ---",
          "[Context before]",
          "55266: static int dissect_ProtocolIEFieldValue(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "55267: {",
          "",
          "[Removed Lines]",
          "55264: #line 338 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "55327: #line 367 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 141 ---",
          "[Context before]",
          "55291:   return (dissector_try_string(nbap_proc_uout_dissector_table, ProcedureID, tvb, pinfo, tree, NULL)) ? tvb_captured_length(tvb) : 0;",
          "55292: }",
          "55293: static void add_hsdsch_bind(packet_info *pinfo){",
          "55357: }",
          "55359: static void nbap_init(void){",
          "55374: }",
          "55376: static int",
          "55377: dissect_nbap(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "55378: {",
          "55396: }",
          "55399: void proto_register_nbap(void)",
          "55400: {",
          "55420: #line 1 \"./asn1/nbap/packet-nbap-hfarr.c\"",
          "",
          "[Removed Lines]",
          "55294:  address  null_addr;",
          "55295:  conversation_t *conversation = NULL;",
          "55296:  umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "55297:  fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "55298:  guint32 i;",
          "55300:  if (pinfo->fd->flags.visited){",
          "55301:   return;",
          "55302:  }",
          "55305:  clear_address(&null_addr);",
          "55306:  for (i = 0; i < maxNrOfMACdFlows; i++) {",
          "55307:   if (nbap_hsdsch_channel_info[i].crnc_port != 0){",
          "55308:    conversation = find_conversation(pinfo->num, &(nbap_hsdsch_channel_info[i].crnc_address), &null_addr,",
          "55309:                                PT_UDP,",
          "55310:                                nbap_hsdsch_channel_info[i].crnc_port, 0, NO_ADDR_B);",
          "55313:    if (conversation == NULL) {",
          "55315:     conversation = conversation_new(pinfo->num, &(nbap_hsdsch_channel_info[i].crnc_address),",
          "55316:      &null_addr, PT_UDP, nbap_hsdsch_channel_info[i].crnc_port,",
          "55317:      0, NO_ADDR2|NO_PORT2);",
          "55320:     conversation_set_dissector(conversation, fp_handle);",
          "55322:     if(pinfo->link_dir==P2P_DIR_DL){",
          "55323:      umts_fp_conversation_info = wmem_new0(wmem_file_scope(), umts_fp_conversation_info_t);",
          "55326:      umts_fp_conversation_info->iface_type        = IuB_Interface;",
          "55327:      umts_fp_conversation_info->division          = Division_FDD;",
          "55328:      umts_fp_conversation_info->channel           = CHANNEL_HSDSCH;",
          "55329:      umts_fp_conversation_info->dl_frame_number   = 0;",
          "55330:      umts_fp_conversation_info->ul_frame_number   = pinfo->num;",
          "55331:      copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &nbap_hsdsch_channel_info[i].crnc_address);",
          "55332:      umts_fp_conversation_info->crnc_port         = nbap_hsdsch_channel_info[i].crnc_port;",
          "55334:      fp_hsdsch_channel_info = wmem_new0(wmem_file_scope(), fp_hsdsch_channel_info_t);",
          "55335:      umts_fp_conversation_info->channel_specific_info = (void*)fp_hsdsch_channel_info;",
          "55340:      umts_fp_conversation_info->num_dch_in_flow++;",
          "55341:      umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow -1] = i;",
          "55344:      if(nbap_hsdsch_channel_info[i].entity == entity_not_specified ){",
          "55346:       expert_add_info(pinfo, NULL, &ei_nbap_hsdsch_entity_not_specified);",
          "55347:      }else{",
          "55348:       fp_hsdsch_channel_info->hsdsch_entity = (enum fp_hsdsch_entity)nbap_hsdsch_channel_info[i].entity;",
          "55349:      }",
          "55350:      umts_fp_conversation_info->rlc_mode = nbap_hsdsch_channel_info[i].rlc_mode;",
          "55351:      set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "55352:     }",
          "55353:    }",
          "55354:   }",
          "55355:  }",
          "55360:     guint8 i;",
          "55362:     com_context_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "55365:     edch_flow_port_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "55368:     nbap_scrambling_code_crncc_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "55369:     nbap_crncc_urnti_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "55371:     for (i = 0; i < 15; i++) {",
          "55372:         lchId_type_table[i+1] = lch_contents[i];",
          "55373:     }",
          "55379:  proto_item *nbap_item = NULL;",
          "55380:  proto_tree *nbap_tree = NULL;",
          "55381:  int i;",
          "55383:  col_set_str(pinfo->cinfo, COL_PROTOCOL, \"NBAP\");",
          "55386:  nbap_item = proto_tree_add_item(tree, proto_nbap, tvb, 0, -1, ENC_NA);",
          "55387:  nbap_tree = proto_item_add_subtree(nbap_item, ett_nbap);",
          "55390:  for (i = 0; i < maxNrOfMACdFlows; i++) {",
          "55391:   nbap_hsdsch_channel_info[i].entity = hs;",
          "55392:  }",
          "55393:  ul_scrambling_code = 0;",
          "55395:  return dissect_NBAP_PDU_PDU(tvb, pinfo, nbap_tree, data);",
          "55401:  module_t *nbap_module;",
          "55402:  guint8 i;",
          "55405:  static hf_register_info hf[] = {",
          "55406:  { &hf_nbap_transportLayerAddress_ipv4,",
          "55407:    { \"transportLayerAddress IPv4\", \"nbap.transportLayerAddress_ipv4\",",
          "55408:   FT_IPv4, BASE_NONE, NULL, 0,",
          "55409:   NULL, HFILL }},",
          "55410:  { &hf_nbap_transportLayerAddress_ipv6,",
          "55411:    { \"transportLayerAddress IPv6\", \"nbap.transportLayerAddress_ipv6\",",
          "55412:   FT_IPv6, BASE_NONE, NULL, 0,",
          "55413:   NULL, HFILL }},",
          "55414:  { &hf_nbap_transportLayerAddress_nsap,",
          "55415:    { \"transportLayerAddress NSAP\", \"nbap.transportLayerAddress_NSAP\",",
          "55416:   FT_BYTES, BASE_NONE, NULL, 0,",
          "55417:   NULL, HFILL }},",
          "",
          "[Added Lines]",
          "55357:   address null_addr;",
          "55358:   conversation_t *conversation = NULL;",
          "55359:   umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "55360:   fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "55361:   guint32 i;",
          "55363:   if (pinfo->fd->flags.visited){",
          "55364:     return;",
          "55365:   }",
          "55368:   clear_address(&null_addr);",
          "55369:   for (i = 0; i < maxNrOfMACdFlows; i++) {",
          "55370:     if (nbap_hsdsch_channel_info[i].crnc_port != 0){",
          "55371:       conversation = find_conversation(pinfo->num, &(nbap_hsdsch_channel_info[i].crnc_address), &null_addr, PT_UDP,",
          "55372:                                       nbap_hsdsch_channel_info[i].crnc_port, 0, NO_ADDR_B);",
          "55374:       if (conversation == NULL) {",
          "55376:         conversation = conversation_new(pinfo->num, &(nbap_hsdsch_channel_info[i].crnc_address), &null_addr, PT_UDP,",
          "55377:                                        nbap_hsdsch_channel_info[i].crnc_port, 0, NO_ADDR2|NO_PORT2);",
          "55380:         conversation_set_dissector(conversation, fp_handle);",
          "55382:         if(pinfo->link_dir==P2P_DIR_DL){",
          "55383:           umts_fp_conversation_info = wmem_new0(wmem_file_scope(), umts_fp_conversation_info_t);",
          "55385:           umts_fp_conversation_info->iface_type        = IuB_Interface;",
          "55386:           umts_fp_conversation_info->division          = Division_FDD;",
          "55387:           umts_fp_conversation_info->channel           = CHANNEL_HSDSCH;",
          "55388:           umts_fp_conversation_info->dl_frame_number   = 0;",
          "55389:           umts_fp_conversation_info->ul_frame_number   = pinfo->num;",
          "55390:           copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &nbap_hsdsch_channel_info[i].crnc_address);",
          "55391:           umts_fp_conversation_info->crnc_port         = nbap_hsdsch_channel_info[i].crnc_port;",
          "55393:           fp_hsdsch_channel_info = wmem_new0(wmem_file_scope(), fp_hsdsch_channel_info_t);",
          "55394:           umts_fp_conversation_info->channel_specific_info = (void*)fp_hsdsch_channel_info;",
          "55399:           umts_fp_conversation_info->num_dch_in_flow++;",
          "55400:           umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow -1] = i;",
          "55403:           if(nbap_hsdsch_channel_info[i].entity == entity_not_specified ){",
          "55405:             expert_add_info(pinfo, NULL, &ei_nbap_hsdsch_entity_not_specified);",
          "55406:           }else{",
          "55407:             fp_hsdsch_channel_info->hsdsch_entity = (enum fp_hsdsch_entity)nbap_hsdsch_channel_info[i].entity;",
          "55408:           }",
          "55409:           umts_fp_conversation_info->rlc_mode = nbap_hsdsch_channel_info[i].rlc_mode;",
          "55410:           set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "55411:         }",
          "55412:       }",
          "55413:     }",
          "55414:   }",
          "55415: }",
          "55420: static guint32 calculate_setup_conv_key(const guint32 transaction_id, const guint32 dd_mode, const guint32 channel_id)",
          "55421: {",
          "55427:   guint32 key;",
          "55428:   key = transaction_id << 16;",
          "55429:   key |= (dd_mode & 0x03) << 14;",
          "55430:   key |= (channel_id & 0x3fff);",
          "55431:   nbap_debug(\"\\tCalculating key 0x%04x\", key);",
          "55432:   return key;",
          "55433: }",
          "55435: static void add_setup_conv(const guint32 transaction_id, const guint32 dd_mode, const guint32 channel_id, const guint32 req_frame_number,",
          "55436:               const address *addr, const guint32 port, umts_fp_conversation_info_t * umts_fp_conversation_info, conversation_t *conv)",
          "55437: {",
          "55438:   nbap_setup_conv_t *new_conv = NULL;",
          "55439:   guint32 key;",
          "55441:   nbap_debug(\"Creating new setup conv\\t TransactionID: %u\\tddMode: %u\\tChannelID: %u\\t %s:%u\",",
          "55442:   transaction_id, dd_mode, channel_id, address_to_str(wmem_packet_scope(), addr), port);",
          "55444:   new_conv = wmem_new0(wmem_file_scope(), nbap_setup_conv_t);",
          "55447:   new_conv->transaction_id = transaction_id;",
          "55448:   new_conv->dd_mode = dd_mode;",
          "55449:   new_conv->channel_id = channel_id;",
          "55450:   new_conv->request_frame_number = req_frame_number;",
          "55451:   copy_address_wmem(wmem_file_scope(), &new_conv->addr, addr);",
          "55452:   new_conv->port = port;",
          "55453:   new_conv->umts_fp_conversation_info = umts_fp_conversation_info;",
          "55454:   new_conv->conv = conv;",
          "55456:   key = calculate_setup_conv_key(new_conv->transaction_id, new_conv->dd_mode, new_conv->channel_id);",
          "55458:   wmem_map_insert(nbap_setup_conv_table, GUINT_TO_POINTER(key), new_conv);",
          "55459: }",
          "55461: static nbap_setup_conv_t* find_setup_conv(const guint32 transaction_id, const guint32 dd_mode, const guint32 channel_id)",
          "55462: {",
          "55463:   nbap_setup_conv_t *conv;",
          "55464:   guint32 key;",
          "55465:   nbap_debug(\"Looking for Setup Conversation match\\t TransactionID: %u\\t ddMode: %u\\t ChannelID: %u\", transaction_id, dd_mode, channel_id);",
          "55467:   key = calculate_setup_conv_key(transaction_id, dd_mode, channel_id);",
          "55469:   conv = (nbap_setup_conv_t*) wmem_map_lookup(nbap_setup_conv_table, GUINT_TO_POINTER(key));",
          "55471:   if(conv == NULL){",
          "55472:     nbap_debug(\"\\tDidnt found Setup Conversation match\");",
          "55473:   }else{",
          "55474:     nbap_debug(\"\\tFOUND Setup Conversation match\\t TransactionID: %u\\t ddMode: %u\\t ChannelID: %u\\t %s:%u\",",
          "55475:          conv->transaction_id, conv->dd_mode, conv->channel_id, address_to_str(wmem_packet_scope(), &(conv->addr)), conv->port);",
          "55476:   }",
          "55478:   return conv;",
          "55479: }",
          "55481: static void delete_setup_conv(nbap_setup_conv_t *conv)",
          "55482: {",
          "55483:   guint32 key;",
          "55485:   key = calculate_setup_conv_key(conv->transaction_id, conv->dd_mode, conv->channel_id);",
          "55487:   if(conv == NULL){",
          "55488:     nbap_debug(\"Trying delete Setup Conversation that does not exist (ptr == NULL)\\t\");",
          "55489:     return;",
          "55490:   }",
          "55491:   wmem_map_remove(nbap_setup_conv_table, GUINT_TO_POINTER(key));",
          "55495:   guint8 i;",
          "55497:   com_context_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "55500:   edch_flow_port_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "55503:   nbap_setup_conv_table = wmem_map_new(wmem_file_scope(), g_direct_hash, g_direct_equal);",
          "55505:   nbap_scrambling_code_crncc_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "55506:   nbap_crncc_urnti_map = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "55508:   for (i = 0; i < 15; i++) {",
          "55509:     lchId_type_table[i+1] = lch_contents[i];",
          "55510:   }",
          "55516:   proto_item *nbap_item = NULL;",
          "55517:   proto_tree *nbap_tree = NULL;",
          "55518:   int i;",
          "55520:   col_set_str(pinfo->cinfo, COL_PROTOCOL, \"NBAP\");",
          "55523:   nbap_item = proto_tree_add_item(tree, proto_nbap, tvb, 0, -1, ENC_NA);",
          "55524:   nbap_tree = proto_item_add_subtree(nbap_item, ett_nbap);",
          "55527:   for (i = 0; i < maxNrOfMACdFlows; i++) {",
          "55528:     nbap_hsdsch_channel_info[i].entity = hs;",
          "55529:   }",
          "55530:   ul_scrambling_code = 0;",
          "55532:   return dissect_NBAP_PDU_PDU(tvb, pinfo, nbap_tree, data);",
          "55538:   module_t *nbap_module;",
          "55539:   guint8 i;",
          "55542:   static hf_register_info hf[] = {",
          "55543:   { &hf_nbap_transportLayerAddress_ipv4,",
          "55544:     { \"transportLayerAddress IPv4\", \"nbap.transportLayerAddress_ipv4\",",
          "55545:     FT_IPv4, BASE_NONE, NULL, 0,",
          "55546:   NULL, HFILL }},",
          "55547:   { &hf_nbap_transportLayerAddress_ipv6,",
          "55548:     { \"transportLayerAddress IPv6\", \"nbap.transportLayerAddress_ipv6\",",
          "55549:     FT_IPv6, BASE_NONE, NULL, 0,",
          "55550:     NULL, HFILL }},",
          "55551:   { &hf_nbap_transportLayerAddress_nsap,",
          "55552:     { \"transportLayerAddress NSAP\", \"nbap.transportLayerAddress_NSAP\",",
          "55553:     FT_BYTES, BASE_NONE, NULL, 0,",
          "55554:     NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 142 ---",
          "[Context before]",
          "59241:     { &hf_nbap_shortTransActionId,",
          "59242:       { \"shortTransActionId\", \"nbap.shortTransActionId\",",
          "59243:         FT_UINT32, BASE_DEC, NULL, 0,",
          "59245:     { &hf_nbap_longTransActionId,",
          "59246:       { \"longTransActionId\", \"nbap.longTransActionId\",",
          "59247:         FT_UINT32, BASE_DEC, NULL, 0,",
          "59249:     { &hf_nbap_ProtocolIE_Container_item,",
          "59250:       { \"ProtocolIE-Field\", \"nbap.ProtocolIE_Field_element\",",
          "59251:         FT_NONE, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "59244:         \"INTEGER_0_127\", HFILL }},",
          "59248:         \"INTEGER_0_32767\", HFILL }},",
          "",
          "[Added Lines]",
          "59381:         NULL, HFILL }},",
          "59385:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 143 ---",
          "[Context before]",
          "68580:         NULL, HFILL }},",
          "68594: #line 1 \"./asn1/nbap/packet-nbap-ettarr.c\"",
          "",
          "[Removed Lines]",
          "68583: #line 492 \"./asn1/nbap/packet-nbap-template.c\"",
          "68584:  };",
          "68587:  static gint *ett[] = {",
          "68588:   &ett_nbap,",
          "68589:   &ett_nbap_TransportLayerAddress,",
          "68590:   &ett_nbap_TransportLayerAddress_nsap,",
          "68591:   &ett_nbap_ib_sg_data,",
          "",
          "[Added Lines]",
          "68720: #line 595 \"./asn1/nbap/packet-nbap-template.c\"",
          "68721:   };",
          "68724:   static gint *ett[] = {",
          "68725:     &ett_nbap,",
          "68726:     &ett_nbap_TransportLayerAddress,",
          "68727:     &ett_nbap_TransportLayerAddress_nsap,",
          "68728:     &ett_nbap_ib_sg_data,",
          "",
          "---------------",
          "--- Hunk 144 ---",
          "[Context before]",
          "70220:     &ett_nbap_Outcome,",
          "70261: }",
          "",
          "[Removed Lines]",
          "70223: #line 501 \"./asn1/nbap/packet-nbap-template.c\"",
          "70224:  };",
          "70226:  static ei_register_info ei[] = {",
          "70227:   { &ei_nbap_no_set_comm_context_id, { \"nbap.no_set_comm_context_id\", PI_MALFORMED, PI_WARN, \"Couldn't not set Communication Context-ID, fragments over reconfigured channels might fail\", EXPFILL }},",
          "70228:   { &ei_nbap_no_find_comm_context_id, { \"nbap.no_find_comm_context_id\", PI_MALFORMED, PI_WARN, \"Couldn't not find Communication Context-ID, unable to reconfigure this E-DCH flow.\", EXPFILL }},",
          "70229:   { &ei_nbap_no_find_port_info, { \"nbap.no_find_port_info\", PI_MALFORMED, PI_WARN, \"Couldn't not find port information for reconfigured E-DCH flow, unable to reconfigure\", EXPFILL }},",
          "70230:   { &ei_nbap_hsdsch_entity_not_specified, { \"nbap.hsdsch_entity_not_specified\", PI_MALFORMED,PI_ERROR, \"HSDSCH Entity not specified!\", EXPFILL }},",
          "70231:  };",
          "70233:  expert_module_t* expert_nbap;",
          "70236:  proto_nbap = proto_register_protocol(PNAME, PSNAME, PFNAME);",
          "70238:  proto_register_field_array(proto_nbap, hf, array_length(hf));",
          "70239:  proto_register_subtree_array(ett, array_length(ett));",
          "70240:  expert_nbap = expert_register_protocol(proto_nbap);",
          "70241:  expert_register_field_array(expert_nbap, ei, array_length(ei));",
          "70244:  nbap_handle = register_dissector(\"nbap\", dissect_nbap, proto_nbap);",
          "70246:  nbap_module = prefs_register_protocol(proto_nbap, NULL);",
          "70249:  for (i = 0; i < 16; i++) {",
          "70250:   prefs_register_enum_preference(nbap_module, ch_strings[i].name, ch_strings[i].title, ch_strings[i].description, &lch_contents[i], content_types, FALSE);",
          "70251:  }",
          "70254:  nbap_ies_dissector_table = register_dissector_table(\"nbap.ies\", \"NBAP-PROTOCOL-IES\", proto_nbap, FT_UINT32, BASE_DEC);",
          "70255:  nbap_extension_dissector_table = register_dissector_table(\"nbap.extension\", \"NBAP-PROTOCOL-EXTENSION\", proto_nbap, FT_UINT32, BASE_DEC);",
          "70256:  nbap_proc_imsg_dissector_table = register_dissector_table(\"nbap.proc.imsg\", \"NBAP-ELEMENTARY-PROCEDURE InitiatingMessage\", proto_nbap, FT_STRING, BASE_NONE);",
          "70257:  nbap_proc_sout_dissector_table = register_dissector_table(\"nbap.proc.sout\", \"NBAP-ELEMENTARY-PROCEDURE SuccessfulOutcome\", proto_nbap, FT_STRING, BASE_NONE);",
          "70258:  nbap_proc_uout_dissector_table = register_dissector_table(\"nbap.proc.uout\", \"NBAP-ELEMENTARY-PROCEDURE UnsuccessfulOutcome\", proto_nbap, FT_STRING, BASE_NONE);",
          "70260:  register_init_routine(nbap_init);",
          "",
          "[Added Lines]",
          "70360: #line 604 \"./asn1/nbap/packet-nbap-template.c\"",
          "70361:   };",
          "70363:   static ei_register_info ei[] = {",
          "70364:     { &ei_nbap_no_set_comm_context_id, { \"nbap.no_set_comm_context_id\", PI_MALFORMED, PI_WARN, \"Couldn't not set Communication Context-ID, fragments over reconfigured channels might fail\", EXPFILL }},",
          "70365:     { &ei_nbap_no_find_comm_context_id, { \"nbap.no_find_comm_context_id\", PI_MALFORMED, PI_WARN, \"Couldn't not find Communication Context-ID, unable to reconfigure this E-DCH flow.\", EXPFILL }},",
          "70366:     { &ei_nbap_no_find_port_info, { \"nbap.no_find_port_info\", PI_MALFORMED, PI_WARN, \"Couldn't not find port information for reconfigured E-DCH flow, unable to reconfigure\", EXPFILL }},",
          "70367:     { &ei_nbap_hsdsch_entity_not_specified, { \"nbap.hsdsch_entity_not_specified\", PI_MALFORMED,PI_ERROR, \"HSDSCH Entity not specified!\", EXPFILL }},",
          "70368:   };",
          "70370:   expert_module_t* expert_nbap;",
          "70373:   proto_nbap = proto_register_protocol(PNAME, PSNAME, PFNAME);",
          "70375:   proto_register_field_array(proto_nbap, hf, array_length(hf));",
          "70376:   proto_register_subtree_array(ett, array_length(ett));",
          "70377:   expert_nbap = expert_register_protocol(proto_nbap);",
          "70378:   expert_register_field_array(expert_nbap, ei, array_length(ei));",
          "70381:   nbap_handle = register_dissector(\"nbap\", dissect_nbap, proto_nbap);",
          "70383:   nbap_module = prefs_register_protocol(proto_nbap, NULL);",
          "70386:   for (i = 0; i < 16; i++) {",
          "70387:     prefs_register_enum_preference(nbap_module, ch_strings[i].name, ch_strings[i].title, ch_strings[i].description, &lch_contents[i], content_types, FALSE);",
          "70388:   }",
          "70391:   nbap_ies_dissector_table = register_dissector_table(\"nbap.ies\", \"NBAP-PROTOCOL-IES\", proto_nbap, FT_UINT32, BASE_DEC);",
          "70392:   nbap_extension_dissector_table = register_dissector_table(\"nbap.extension\", \"NBAP-PROTOCOL-EXTENSION\", proto_nbap, FT_UINT32, BASE_DEC);",
          "70393:   nbap_proc_imsg_dissector_table = register_dissector_table(\"nbap.proc.imsg\", \"NBAP-ELEMENTARY-PROCEDURE InitiatingMessage\", proto_nbap, FT_STRING, BASE_NONE);",
          "70394:   nbap_proc_sout_dissector_table = register_dissector_table(\"nbap.proc.sout\", \"NBAP-ELEMENTARY-PROCEDURE SuccessfulOutcome\", proto_nbap, FT_STRING, BASE_NONE);",
          "70395:   nbap_proc_uout_dissector_table = register_dissector_table(\"nbap.proc.uout\", \"NBAP-ELEMENTARY-PROCEDURE UnsuccessfulOutcome\", proto_nbap, FT_STRING, BASE_NONE);",
          "70397:   register_init_routine(nbap_init);",
          "",
          "---------------",
          "--- Hunk 145 ---",
          "[Context before]",
          "70267: void",
          "70268: proto_reg_handoff_nbap(void)",
          "70269: {",
          "70272: #ifdef EXTRA_PPI",
          "70274: #endif",
          "",
          "[Removed Lines]",
          "70270:  fp_handle = find_dissector(\"fp\");",
          "70271:  dissector_add_uint(\"sctp.ppi\", NBAP_PAYLOAD_PROTOCOL_ID, nbap_handle);",
          "70273:  dissector_add_uint(\"sctp.ppi\", 17, nbap_handle);",
          "70275:  dissector_add_for_decode_as(\"sctp.port\", nbap_handle);",
          "",
          "[Added Lines]",
          "70407:   fp_handle = find_dissector(\"fp\");",
          "70408:   dissector_add_uint(\"sctp.ppi\", NBAP_PAYLOAD_PROTOCOL_ID, nbap_handle);",
          "70410:   dissector_add_uint(\"sctp.ppi\", 17, nbap_handle);",
          "70412:   dissector_add_for_decode_as(\"sctp.port\", nbap_handle);",
          "",
          "---------------",
          "--- Hunk 146 ---",
          "[Context before]",
          "71375: }",
          "",
          "[Removed Lines]",
          "71374: #line 555 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "71511: #line 658 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-umts_fp.c||epan/dissectors/packet-umts_fp.c": [
          "File: epan/dissectors/packet-umts_fp.c -> epan/dissectors/packet-umts_fp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5446:     proto_item       *ti;",
          "5447:     gint              offset = 0;",
          "5448:     struct fp_info   *p_fp_info;",
          "5450:     umts_fp_conversation_info_t *p_conv_data = NULL;",
          "",
          "[Removed Lines]",
          "5449:     conversation_t   *p_conv;",
          "",
          "[Added Lines]",
          "5449:     conversation_t   *p_conv = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5462:     p_fp_info = (struct fp_info *)p_get_proto_data(wmem_file_scope(), pinfo, proto_fp, 0);",
          "5465:     p_conv = (conversation_t *)find_conversation(pinfo->num, &pinfo->net_dst, &pinfo->net_src,",
          "5466:                                pinfo->ptype,",
          "5470:     if (p_conv) {",
          "5471:         p_conv_data = (umts_fp_conversation_info_t *)conversation_get_proto_data(p_conv, proto_fp);",
          "5485:             }",
          "5496:             }",
          "5497:         }",
          "5499:     }",
          "5501:     if (pinfo->p2p_dir == P2P_DIR_UNKNOWN) {",
          "",
          "[Removed Lines]",
          "5467:                                pinfo->destport, pinfo->srcport, NO_ADDR_B);",
          "5472:         if (p_conv_data) {",
          "5474:             if (addresses_equal(&(pinfo->net_dst), (&p_conv_data->crnc_address))) {",
          "5476:                 proto_item *item= proto_tree_add_uint(fp_tree, hf_fp_ul_setup_frame,",
          "5477:                                                       tvb, 0, 0, p_conv_data->ul_frame_number);",
          "5479:                 PROTO_ITEM_SET_GENERATED(item);",
          "5481:                 pinfo->link_dir=P2P_DIR_UL;",
          "5482:                 if (p_fp_info == NULL) {",
          "5483:                     p_fp_info = fp_set_per_packet_inf_from_conv(p_conv, p_conv_data, tvb, pinfo, fp_tree);",
          "5484:                 }",
          "5486:             else {",
          "5488:                 proto_item *item= proto_tree_add_uint(fp_tree, hf_fp_dl_setup_frame,",
          "5489:                                                        tvb, 0, 0, p_conv_data->ul_frame_number);",
          "5491:                 PROTO_ITEM_SET_GENERATED(item);",
          "5492:                 pinfo->link_dir=P2P_DIR_DL;",
          "5493:                 if (p_fp_info == NULL) {",
          "5494:                     p_fp_info = fp_set_per_packet_inf_from_conv(p_conv, p_conv_data, tvb, pinfo, fp_tree);",
          "5495:                 }",
          "",
          "[Added Lines]",
          "5468:                                pinfo->destport, pinfo->srcport, 0);",
          "5471:     }",
          "5472:     if (!p_conv || !p_conv_data) {",
          "5475:         p_conv = (conversation_t *)find_conversation(pinfo->num, &pinfo->net_dst, &pinfo->net_src,",
          "5476:                                    pinfo->ptype,",
          "5477:                                    pinfo->destport, pinfo->srcport, NO_ADDR2);",
          "5478:         if (p_conv) {",
          "5479:             p_conv_data = (umts_fp_conversation_info_t *)conversation_get_proto_data(p_conv, proto_fp);",
          "5480:         }",
          "5481:     }",
          "5483:     if (p_conv_data) {",
          "5485:         if (addresses_equal(&(pinfo->net_dst), (&p_conv_data->crnc_address))) {",
          "5487:             proto_item *item= proto_tree_add_uint(fp_tree, hf_fp_ul_setup_frame,",
          "5488:                                                   tvb, 0, 0, p_conv_data->ul_frame_number);",
          "5490:             PROTO_ITEM_SET_GENERATED(item);",
          "5492:             pinfo->link_dir=P2P_DIR_UL;",
          "5493:             if (p_fp_info == NULL) {",
          "5494:                 p_fp_info = fp_set_per_packet_inf_from_conv(p_conv, p_conv_data, tvb, pinfo, fp_tree);",
          "5496:         }",
          "5497:         else {",
          "5499:             proto_item *item= proto_tree_add_uint(fp_tree, hf_fp_dl_setup_frame,",
          "5500:                                                    tvb, 0, 0, p_conv_data->ul_frame_number);",
          "5502:             PROTO_ITEM_SET_GENERATED(item);",
          "5503:             pinfo->link_dir=P2P_DIR_DL;",
          "5504:             if (p_fp_info == NULL) {",
          "5505:                 p_fp_info = fp_set_per_packet_inf_from_conv(p_conv, p_conv_data, tvb, pinfo, fp_tree);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "47726eafe572686e5b36ea2e8798096cf1a07bf9",
      "candidate_info": {
        "commit_hash": "47726eafe572686e5b36ea2e8798096cf1a07bf9",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/47726eafe572686e5b36ea2e8798096cf1a07bf9",
        "files": [
          "epan/dissectors/asn1/nbap/nbap.cnf",
          "epan/dissectors/packet-nbap.c",
          "epan/dissectors/packet-nbap.h"
        ],
        "message": "NBAP: check that DCH ID was initialized before using it\n\nBug: 14443\nChange-Id: I184ed60d09576c00133c74b4376b2cb7106e5f80\nReviewed-on: https://code.wireshark.org/review/25874\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/asn1/nbap/nbap.cnf||epan/dissectors/asn1/nbap/nbap.cnf",
          "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c",
          "epan/dissectors/packet-nbap.h||epan/dissectors/packet-nbap.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/asn1/nbap/nbap.cnf||epan/dissectors/asn1/nbap/nbap.cnf",
            "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c"
          ],
          "candidate": [
            "epan/dissectors/asn1/nbap/nbap.cnf||epan/dissectors/asn1/nbap/nbap.cnf",
            "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/asn1/nbap/nbap.cnf||epan/dissectors/asn1/nbap/nbap.cnf": [
          "File: epan/dissectors/asn1/nbap/nbap.cnf -> epan/dissectors/asn1/nbap/nbap.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "907:   num_dch_in_flow = private_data_get_num_dch_in_flow(actx->pinfo);",
          "908:   private_data_set_dch_id(actx->pinfo, dch_id);",
          "909:   if(num_dch_in_flow>0){",
          "910:       nbap_dch_chnl_info[dch_id].next_dch = 0;",
          "913:       }",
          "914:   }",
          "",
          "[Removed Lines]",
          "911:       if(private_data_get_prev_dch_id(actx->pinfo) != 0){",
          "912:           nbap_dch_chnl_info[private_data_get_prev_dch_id(actx->pinfo)].next_dch = dch_id;",
          "",
          "[Added Lines]",
          "910:       guint32 prev_dch_id = private_data_get_prev_dch_id(actx->pinfo);",
          "912:       if(prev_dch_id != 0 && prev_dch_id != 0xffffffff){",
          "913:           nbap_dch_chnl_info[prev_dch_id].next_dch = dch_id;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1302:     private_data_set_prev_dch_id(actx->pinfo,private_data_get_dch_id(actx->pinfo));",
          "1304: #.FN_HDR DCH-Specific-FDD-Item/ul-TransportFormatSet",
          "1305:     nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "1306:     nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "1307:     private_data_set_transport_format_set_type(actx->pinfo, NBAP_DCH_UL);",
          "1310: #.FN_HDR DCH-Specific-FDD-Item/dl-TransportFormatSet",
          "1311:     nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "1312:     nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "1313:     private_data_set_transport_format_set_type(actx->pinfo, NBAP_DCH_DL);",
          "1316: #.FN_HDR DCH-ModifySpecificItem-FDD/ul-TransportFormatSet",
          "1317:     nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "1318:     nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "1319:     private_data_set_transport_format_set_type(actx->pinfo, NBAP_DCH_UL);",
          "1322: #.FN_HDR DCH-ModifySpecificItem-FDD/dl-TransportFormatSet",
          "1323:     nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "1324:     nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "1325:     private_data_set_transport_format_set_type(actx->pinfo, NBAP_DCH_DL);",
          "1328: #.FN_HDR PCH-ParametersItem-CTCH-SetupRqstFDD/transportFormatSet",
          "1329:     nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "",
          "[Removed Lines]",
          "1308:     nbap_dch_chnl_info[private_data_get_dch_id(actx->pinfo)].num_ul_chans = 0;",
          "1314:     nbap_dch_chnl_info[private_data_get_dch_id(actx->pinfo)].num_dl_chans = 0;",
          "1320:     nbap_dch_chnl_info[private_data_get_dch_id(actx->pinfo)].num_ul_chans = 0;",
          "1326:     nbap_dch_chnl_info[private_data_get_dch_id(actx->pinfo)].num_dl_chans = 0;",
          "",
          "[Added Lines]",
          "1306:     guint32 dch_id = private_data_get_dch_id(actx->pinfo);",
          "1310:     if (dch_id != 0xffffffff) {",
          "1311:         nbap_dch_chnl_info[dch_id].num_ul_chans = 0;",
          "1312:     }",
          "1315:     guint32 dch_id = private_data_get_dch_id(actx->pinfo);",
          "1319:     if (dch_id != 0xffffffff) {",
          "1320:         nbap_dch_chnl_info[dch_id].num_dl_chans = 0;",
          "1321:     }",
          "1324:     guint32 dch_id = private_data_get_dch_id(actx->pinfo);",
          "1328:     if (dch_id != 0xffffffff) {",
          "1329:         nbap_dch_chnl_info[dch_id].num_ul_chans = 0;",
          "1330:     }",
          "1333:     guint32 dch_id = private_data_get_dch_id(actx->pinfo);",
          "1337:     if (dch_id != 0xffffffff) {",
          "1338:         nbap_dch_chnl_info[dch_id].num_dl_chans = 0;",
          "1339:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1354:     if(private_data_get_num_items(actx->pinfo)>0){",
          "1355:         num_items = private_data_get_num_items(actx->pinfo);",
          "1356:         dch_id = private_data_get_dch_id(actx->pinfo);",
          "1382:         }",
          "1383:     }",
          "",
          "[Removed Lines]",
          "1357:         common_physical_channel_id = private_data_get_common_physical_channel_id(actx->pinfo);",
          "1358:         common_transport_channel_id = private_data_get_common_transport_channel_id(actx->pinfo);",
          "1359:         switch(private_data_get_transport_format_set_type(actx->pinfo)){",
          "1360:             case NBAP_DCH_UL:",
          "1361:                 nbap_dch_chnl_info[dch_id].num_ul_chans++;",
          "1362:                 nbap_dch_chnl_info[dch_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "1363:                 break;",
          "1364:             case NBAP_DCH_DL:",
          "1365:                 nbap_dch_chnl_info[dch_id].num_dl_chans++;",
          "1366:                 nbap_dch_chnl_info[dch_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "1367:                 break;",
          "1368:             case NBAP_CPCH:",
          "1369:                 nbap_dch_chnl_info[common_physical_channel_id].num_ul_chans++;",
          "1370:                 nbap_dch_chnl_info[common_physical_channel_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "1371:                 nbap_dch_chnl_info[common_physical_channel_id].num_dl_chans++;",
          "1372:                 nbap_dch_chnl_info[common_physical_channel_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "1373:                 break;",
          "1374:             case NBAP_PCH:",
          "1375:                 nbap_dch_chnl_info[common_transport_channel_id].num_ul_chans++;",
          "1376:                 nbap_dch_chnl_info[common_transport_channel_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "1377:                 nbap_dch_chnl_info[common_transport_channel_id].num_dl_chans++;",
          "1378:                 nbap_dch_chnl_info[common_transport_channel_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "1379:                 break;",
          "1380:             default:",
          "1381:                 break;",
          "",
          "[Added Lines]",
          "1370:         if (num_items > 0 && dch_id != 0xffffffff) {",
          "1371:             common_physical_channel_id = private_data_get_common_physical_channel_id(actx->pinfo);",
          "1372:             common_transport_channel_id = private_data_get_common_transport_channel_id(actx->pinfo);",
          "1373:             switch(private_data_get_transport_format_set_type(actx->pinfo)){",
          "1374:                 case NBAP_DCH_UL:",
          "1375:                     nbap_dch_chnl_info[dch_id].num_ul_chans++;",
          "1376:                     nbap_dch_chnl_info[dch_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "1377:                     break;",
          "1378:                 case NBAP_DCH_DL:",
          "1379:                     nbap_dch_chnl_info[dch_id].num_dl_chans++;",
          "1380:                     nbap_dch_chnl_info[dch_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "1381:                     break;",
          "1382:                 case NBAP_CPCH:",
          "1383:                     nbap_dch_chnl_info[common_physical_channel_id].num_ul_chans++;",
          "1384:                     nbap_dch_chnl_info[common_physical_channel_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "1385:                     nbap_dch_chnl_info[common_physical_channel_id].num_dl_chans++;",
          "1386:                     nbap_dch_chnl_info[common_physical_channel_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "1387:                     break;",
          "1388:                 case NBAP_PCH:",
          "1389:                     nbap_dch_chnl_info[common_transport_channel_id].num_ul_chans++;",
          "1390:                     nbap_dch_chnl_info[common_transport_channel_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "1391:                     nbap_dch_chnl_info[common_transport_channel_id].num_dl_chans++;",
          "1392:                     nbap_dch_chnl_info[common_transport_channel_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "1393:                     break;",
          "1394:                 default:",
          "1395:                     break;",
          "1396:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1396:     if(private_data_get_num_items(actx->pinfo)>0){",
          "1397:         num_items = private_data_get_num_items(actx->pinfo);",
          "1398:         dch_id = private_data_get_dch_id(actx->pinfo);",
          "1418:         }",
          "1419:     }",
          "",
          "[Removed Lines]",
          "1399:         common_physical_channel_id = private_data_get_common_physical_channel_id(actx->pinfo);",
          "1400:         common_transport_channel_id = private_data_get_common_transport_channel_id(actx->pinfo);",
          "1401:         switch(private_data_get_transport_format_set_type(actx->pinfo)){",
          "1402:             case NBAP_DCH_UL:",
          "1403:                 nbap_dch_chnl_info[dch_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;",
          "1404:                 break;",
          "1405:             case NBAP_DCH_DL:",
          "1406:                 nbap_dch_chnl_info[dch_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;",
          "1407:                 break;",
          "1408:             case NBAP_CPCH:",
          "1409:                 nbap_dch_chnl_info[common_physical_channel_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;",
          "1410:                 nbap_dch_chnl_info[common_physical_channel_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;",
          "1411:                 break;",
          "1412:             case NBAP_PCH:",
          "1413:                 nbap_dch_chnl_info[common_transport_channel_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;",
          "1414:                 nbap_dch_chnl_info[common_transport_channel_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;",
          "1415:                 break;",
          "1416:             default:",
          "1417:                 break;",
          "",
          "[Added Lines]",
          "1414:         if (num_items > 0 && dch_id != 0xffffffff) {",
          "1415:             common_physical_channel_id = private_data_get_common_physical_channel_id(actx->pinfo);",
          "1416:             common_transport_channel_id = private_data_get_common_transport_channel_id(actx->pinfo);",
          "1417:             switch(private_data_get_transport_format_set_type(actx->pinfo)){",
          "1418:                 case NBAP_DCH_UL:",
          "1419:                     nbap_dch_chnl_info[dch_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;",
          "1420:                     break;",
          "1421:                 case NBAP_DCH_DL:",
          "1422:                     nbap_dch_chnl_info[dch_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;",
          "1423:                     break;",
          "1424:                 case NBAP_CPCH:",
          "1425:                     nbap_dch_chnl_info[common_physical_channel_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;",
          "1426:                     nbap_dch_chnl_info[common_physical_channel_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;",
          "1427:                     break;",
          "1428:                 case NBAP_PCH:",
          "1429:                     nbap_dch_chnl_info[common_transport_channel_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;",
          "1430:                     nbap_dch_chnl_info[common_transport_channel_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;",
          "1431:                     break;",
          "1432:                 default:",
          "1433:                     break;",
          "1434:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1500:                 dch_id = private_data_get_dch_id(actx->pinfo);",
          "1527:                     for (j = 0; j < num_tf; j++) {",
          "1530:                     }",
          "1534:                     for (j = 0; j < num_tf; j++) {",
          "1537:                     }",
          "1539:                 }",
          "1543:             }",
          "1545:             nbap_debug(\"Frame %%u RL-Specific-DCH-Info-Item Start\", actx->pinfo->num);",
          "",
          "[Removed Lines]",
          "1501:                 umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[private_data_get_dch_id(actx->pinfo)].num_ul_chans;",
          "1502:                 for (j = 0; j < num_tf; j++) {",
          "1503:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[dch_id].ul_chan_tf_size[j];",
          "1504:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[dch_id].ul_chan_num_tbs[j];",
          "1505:                 }",
          "1508:                 umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[dch_id].num_dl_chans;",
          "1509:                 for (j = 0; j < num_tf; j++) {",
          "1510:                     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[dch_id].dl_chan_tf_size[j];",
          "1511:                     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[dch_id].dl_chan_num_tbs[j];",
          "1512:                 }",
          "1515:                 i = dch_id;",
          "1516:                 umts_fp_conversation_info->dch_ids_in_flow_list[0] = dch_id;",
          "1517:                 while(nbap_dch_chnl_info[i].next_dch != 0){",
          "1520:                     i = nbap_dch_chnl_info[i].next_dch;",
          "1521:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "1526:                     umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_ul_chans = num_tf = nbap_dch_chnl_info[i].num_ul_chans;",
          "1528:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_tf_size[j] = nbap_dch_chnl_info[i].ul_chan_tf_size[j];",
          "1529:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_num_tbs[j] = nbap_dch_chnl_info[i].ul_chan_num_tbs[j];",
          "1533:                     umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_dl_chans = num_tf = nbap_dch_chnl_info[i].num_dl_chans;",
          "1535:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_tf_size[j] = nbap_dch_chnl_info[i].dl_chan_tf_size[j];",
          "1536:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_num_tbs[j] = nbap_dch_chnl_info[i].dl_chan_num_tbs[j];",
          "1540:                 umts_fp_conversation_info->num_dch_in_flow++;",
          "1541:                 umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "1542:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "",
          "[Added Lines]",
          "1518:                 if (dch_id != 0xffffffff) {",
          "1519:                     umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[dch_id].num_ul_chans;",
          "1521:                         umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[dch_id].ul_chan_tf_size[j];",
          "1522:                         umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[dch_id].ul_chan_num_tbs[j];",
          "1526:                     umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[dch_id].num_dl_chans;",
          "1528:                         umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[dch_id].dl_chan_tf_size[j];",
          "1529:                         umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[dch_id].dl_chan_num_tbs[j];",
          "1533:                     i = dch_id;",
          "1534:                     umts_fp_conversation_info->dch_ids_in_flow_list[0] = dch_id;",
          "1535:                     while(nbap_dch_chnl_info[i].next_dch != 0){",
          "1536:                         i = nbap_dch_chnl_info[i].next_dch;",
          "1537:                         umts_fp_conversation_info->num_dch_in_flow++;",
          "1542:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_ul_chans = num_tf = nbap_dch_chnl_info[i].num_ul_chans;",
          "1543:                         for (j = 0; j < num_tf; j++) {",
          "1544:                                 umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_tf_size[j] = nbap_dch_chnl_info[i].ul_chan_tf_size[j];",
          "1545:                                 umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_num_tbs[j] = nbap_dch_chnl_info[i].ul_chan_num_tbs[j];",
          "1546:                         }",
          "1549:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_dl_chans = num_tf = nbap_dch_chnl_info[i].num_dl_chans;",
          "1550:                         for (j = 0; j < num_tf; j++) {",
          "1551:                                 umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_tf_size[j] = nbap_dch_chnl_info[i].dl_chan_tf_size[j];",
          "1552:                                 umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_num_tbs[j] = nbap_dch_chnl_info[i].dl_chan_num_tbs[j];",
          "1553:                         }",
          "1554:                     }",
          "1555:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "1556:                     umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "1557:                     set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c": [
          "File: epan/dissectors/packet-nbap.c -> epan/dissectors/packet-nbap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "8: #line 1 \"./asn1/Nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "8: #line 1 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73: #define maxPrivateIEs                  65535",
          "74: #define maxProtocolExtensions          65535",
          "75: #define maxProtocolIEs                 65535",
          "",
          "[Removed Lines]",
          "72: #line 1 \"./asn1/Nbap/packet-nbap-val.h\"",
          "",
          "[Added Lines]",
          "72: #line 1 \"./asn1/nbap/packet-nbap-val.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1525: } ProtocolIE_ID_enum;",
          "1531: static int proto_nbap = -1;",
          "",
          "[Removed Lines]",
          "1528: #line 75 \"./asn1/Nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "1528: #line 63 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1539: #line 1 \"./asn1/Nbap/packet-nbap-hf.c\"",
          "",
          "[Added Lines]",
          "1539: #line 1 \"./asn1/nbap/packet-nbap-hf.c\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4830: static int hf_nbap_RACH_SubChannelNumbers_subCh0 = -1;",
          "4836: static int ett_nbap = -1;",
          "",
          "[Removed Lines]",
          "4833: #line 84 \"./asn1/Nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "4833: #line 72 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4844: static gint ett_nbap_PrivateIE_ID = -1;",
          "4845: static gint ett_nbap_ProcedureID = -1;",
          "4846: static gint ett_nbap_TransactionID = -1;",
          "",
          "[Removed Lines]",
          "4843: #line 1 \"./asn1/Nbap/packet-nbap-ett.c\"",
          "",
          "[Added Lines]",
          "4843: #line 1 \"./asn1/nbap/packet-nbap-ett.c\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6469: static gint ett_nbap_Outcome = -1;",
          "6474: static expert_field ei_nbap_no_find_comm_context_id = EI_INIT;",
          "6475: static expert_field ei_nbap_no_find_port_info = EI_INIT;",
          "",
          "[Removed Lines]",
          "6472: #line 92 \"./asn1/Nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "6472: #line 80 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7214: static const value_string nbap_Criticality_vals[] = {",
          "7215:   {   0, \"reject\" },",
          "",
          "[Removed Lines]",
          "7212: #line 1 \"./asn1/Nbap/packet-nbap-fn.c\"",
          "",
          "[Added Lines]",
          "7212: #line 1 \"./asn1/nbap/packet-nbap-fn.c\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "7349: static int",
          "7350: dissect_nbap_ProcedureCode(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7352:   guint32 procedure_code;",
          "7353:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7354:                                                             0U, 255U, &procedure_code, FALSE);",
          "",
          "[Removed Lines]",
          "7351: #line 94 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "7351: #line 94 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "7375: static int",
          "7376: dissect_nbap_DdMode(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7378:   guint32 dd_mode;",
          "7379:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "7380:                                      3, &dd_mode, TRUE, 0, NULL);",
          "",
          "[Removed Lines]",
          "7377: #line 102 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "7377: #line 102 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "7397: static int",
          "7398: dissect_nbap_ProcedureID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7400:   ProcedureID = NULL;",
          "7401:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "7402:                                    ett_nbap_ProcedureID, ProcedureID_sequence);",
          "",
          "[Removed Lines]",
          "7399: #line 108 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "7399: #line 108 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "8645: static int",
          "8646: dissect_nbap_ProtocolIE_ID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8648:   guint32 protocol_ie_id;",
          "8649:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8650:                                                             0U, maxProtocolIEs, &protocol_ie_id, FALSE);",
          "",
          "[Removed Lines]",
          "8647: #line 81 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "8647: #line 81 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "8663: static int",
          "8664: dissect_nbap_T_shortTransActionId(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8666:   guint32 transaction_id;",
          "8667:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8668:                                                             0U, 127U, &transaction_id, FALSE);",
          "",
          "[Removed Lines]",
          "8665: #line 116 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "8665: #line 116 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "8679: static int",
          "8680: dissect_nbap_T_longTransActionId(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8682:   guint32 transaction_id;",
          "8683:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8684:                                                             0U, 32767U, &transaction_id, FALSE);",
          "",
          "[Removed Lines]",
          "8681: #line 121 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "8681: #line 121 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "8952: static int",
          "8953: dissect_nbap_UL_ScramblingCodeNumber(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8955:   guint32 ul_scrambling_code;",
          "8956:   guint32 com_context_id;",
          "8957:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "8954: #line 975 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "8954: #line 976 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "9222: static int",
          "9223: dissect_nbap_E_DCH_MACdFlow_ID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "9225:   guint32 e_dch_macdflow_id;",
          "9226:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9227:                                                             0U, maxNrOfEDCHMACdFlows_1, &e_dch_macdflow_id, FALSE);",
          "",
          "[Removed Lines]",
          "9224: #line 940 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "9224: #line 941 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "9238: static int",
          "9239: dissect_nbap_BindingID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "9241:   tvbuff_t *parameter_tvb=NULL;",
          "9243:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "9240: #line 959 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "9240: #line 960 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "9262: static int",
          "9263: dissect_nbap_TransportLayerAddress(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "9265:   tvbuff_t *parameter_tvb=NULL;",
          "9266:   proto_item *item;",
          "9267:   proto_tree *subtree, *nsap_tree;",
          "",
          "[Removed Lines]",
          "9264: #line 836 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "9264: #line 836 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "10832: static int",
          "10833: dissect_nbap_HSDSCH_RNTI(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10835:   gint hrnti;",
          "10836: umts_fp_conversation_info_t *umts_fp_conversation_info = NULL;",
          "10837: fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "",
          "[Removed Lines]",
          "10834: #line 2509 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "10834: #line 2525 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "11079: static int",
          "11080: dissect_nbap_CommonTransportChannelID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "11082:   guint32 commontransportchannelid;",
          "11083:   nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "11084:   nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "",
          "[Removed Lines]",
          "11081: #line 931 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "11081: #line 932 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "11894: static int",
          "11895: dissect_nbap_CommonPhysicalChannelID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "11897: guint32 commonphysicalchannelid;",
          "11898: nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "11899: nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "",
          "[Removed Lines]",
          "11896: #line 922 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "11896: #line 923 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "12068: static int",
          "12069: dissect_nbap_Common_MACFlow_ID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "12071: guint32 common_macdflow_id;",
          "12072:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "12073:                                                             0U, maxNrOfCommonMACFlows_1, &common_macdflow_id, FALSE);",
          "",
          "[Removed Lines]",
          "12070: #line 2343 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "12070: #line 2359 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "12151: static int",
          "12152: dissect_nbap_PayloadCRC_PresenceIndicator(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "12154: guint32 payload_crc_value;",
          "12156:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "12153: #line 884 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "12153: #line 884 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "12203: static int",
          "12204: dissect_nbap_LogicalChannelID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "12206:   guint32 logical_channel_id;",
          "12207:   guint num_items;",
          "12208:   nbap_edch_channel_info_t* nbap_edch_channel_info;",
          "",
          "[Removed Lines]",
          "12205: #line 1956 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "12205: #line 1972 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "12227: static int",
          "12228: dissect_nbap_MAC_PDU_SizeExtended(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "12230: guint32 hsdsch_macdflow_id;",
          "12231: nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;",
          "12232: nbap_hsdsch_channel_info = private_data_get_nbap_hsdsch_channel_info(actx->pinfo);",
          "",
          "[Removed Lines]",
          "12229: #line 2074 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "12229: #line 2090 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "12654: static int",
          "12655: dissect_nbap_CommonMACFlow_Specific_InfoItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "12657:     address     dst_addr;",
          "12658:     guint32 transportLayerAddress_ipv4;",
          "12659:     guint16 bindingID;",
          "",
          "[Removed Lines]",
          "12656: #line 2351 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "12656: #line 2367 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "12706: static int",
          "12707: dissect_nbap_MACdPDU_Size(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "12709: guint32 mac_d_pdu_size;",
          "12710: guint num_items;",
          "12711: nbap_edch_channel_info_t* nbap_edch_channel_info;",
          "",
          "[Removed Lines]",
          "12708: #line 1940 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "12708: #line 1956 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "13019: static int",
          "13020: dissect_nbap_CommonTransportChannel_InformationResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "13022: address dst_addr;",
          "13023: nbap_setup_conv_t *request_conv;",
          "13024: conversation_t *conv;",
          "",
          "[Removed Lines]",
          "13021: #line 184 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "13021: #line 184 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "13974: static int",
          "13975: dissect_nbap_CRNC_CommunicationContextID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "13977: guint32 com_context_id;",
          "13978:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "13979:                                                             0U, 1048575U, &com_context_id, FALSE);",
          "",
          "[Removed Lines]",
          "13976: #line 2469 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "13976: #line 2485 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "15361: static int",
          "15362: dissect_nbap_DCH_ID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15364:   guint32 t_dch_id;",
          "15365:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "15366:                                                             0U, 255U, &t_dch_id, FALSE);",
          "",
          "[Removed Lines]",
          "15363: #line 895 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15363: #line 895 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "15413: static int",
          "15414: dissect_nbap_T_dCH_ID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15416:   guint32 dch_id;",
          "15417:   gint num_dch_in_flow;",
          "15418:   nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "",
          "[Removed Lines]",
          "15415: #line 900 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15415: #line 900 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "15423:   num_dch_in_flow = private_data_get_num_dch_in_flow(actx->pinfo);",
          "15424:   private_data_set_dch_id(actx->pinfo, dch_id);",
          "15425:   if(num_dch_in_flow>0){",
          "15426:       nbap_dch_chnl_info[dch_id].next_dch = 0;",
          "15429:       }",
          "15430:   }",
          "",
          "[Removed Lines]",
          "15427:       if(private_data_get_prev_dch_id(actx->pinfo) != 0){",
          "15428:           nbap_dch_chnl_info[private_data_get_prev_dch_id(actx->pinfo)].next_dch = dch_id;",
          "",
          "[Added Lines]",
          "15426:       guint32 prev_dch_id = private_data_get_prev_dch_id(actx->pinfo);",
          "15428:       if(prev_dch_id != 0 && prev_dch_id != 0xffffffff){",
          "15429:           nbap_dch_chnl_info[prev_dch_id].next_dch = dch_id;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "15439: static int",
          "15440: dissect_nbap_TransportFormatSet_NrOfTransportBlocks(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15442: guint32 NrOfTransportBlocks;",
          "15443: guint num_items;",
          "15444: guint32 dch_id;",
          "",
          "[Removed Lines]",
          "15441: #line 1344 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15442: #line 1357 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "15454:     if(private_data_get_num_items(actx->pinfo)>0){",
          "15455:         num_items = private_data_get_num_items(actx->pinfo);",
          "15456:         dch_id = private_data_get_dch_id(actx->pinfo);",
          "15482:         }",
          "15483:     }",
          "",
          "[Removed Lines]",
          "15457:         common_physical_channel_id = private_data_get_common_physical_channel_id(actx->pinfo);",
          "15458:         common_transport_channel_id = private_data_get_common_transport_channel_id(actx->pinfo);",
          "15459:         switch(private_data_get_transport_format_set_type(actx->pinfo)){",
          "15460:             case NBAP_DCH_UL:",
          "15461:                 nbap_dch_chnl_info[dch_id].num_ul_chans++;",
          "15462:                 nbap_dch_chnl_info[dch_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "15463:                 break;",
          "15464:             case NBAP_DCH_DL:",
          "15465:                 nbap_dch_chnl_info[dch_id].num_dl_chans++;",
          "15466:                 nbap_dch_chnl_info[dch_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "15467:                 break;",
          "15468:             case NBAP_CPCH:",
          "15469:                 nbap_dch_chnl_info[common_physical_channel_id].num_ul_chans++;",
          "15470:                 nbap_dch_chnl_info[common_physical_channel_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "15471:                 nbap_dch_chnl_info[common_physical_channel_id].num_dl_chans++;",
          "15472:                 nbap_dch_chnl_info[common_physical_channel_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "15473:                 break;",
          "15474:             case NBAP_PCH:",
          "15475:                 nbap_dch_chnl_info[common_transport_channel_id].num_ul_chans++;",
          "15476:                 nbap_dch_chnl_info[common_transport_channel_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "15477:                 nbap_dch_chnl_info[common_transport_channel_id].num_dl_chans++;",
          "15478:                 nbap_dch_chnl_info[common_transport_channel_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "15479:                 break;",
          "15480:             default:",
          "15481:                 break;",
          "",
          "[Added Lines]",
          "15458:         if (num_items > 0 && dch_id != 0xffffffff) {",
          "15459:             common_physical_channel_id = private_data_get_common_physical_channel_id(actx->pinfo);",
          "15460:             common_transport_channel_id = private_data_get_common_transport_channel_id(actx->pinfo);",
          "15461:             switch(private_data_get_transport_format_set_type(actx->pinfo)){",
          "15462:                 case NBAP_DCH_UL:",
          "15463:                     nbap_dch_chnl_info[dch_id].num_ul_chans++;",
          "15464:                     nbap_dch_chnl_info[dch_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "15465:                     break;",
          "15466:                 case NBAP_DCH_DL:",
          "15467:                     nbap_dch_chnl_info[dch_id].num_dl_chans++;",
          "15468:                     nbap_dch_chnl_info[dch_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "15469:                     break;",
          "15470:                 case NBAP_CPCH:",
          "15471:                     nbap_dch_chnl_info[common_physical_channel_id].num_ul_chans++;",
          "15472:                     nbap_dch_chnl_info[common_physical_channel_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "15473:                     nbap_dch_chnl_info[common_physical_channel_id].num_dl_chans++;",
          "15474:                     nbap_dch_chnl_info[common_physical_channel_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "15475:                     break;",
          "15476:                 case NBAP_PCH:",
          "15477:                     nbap_dch_chnl_info[common_transport_channel_id].num_ul_chans++;",
          "15478:                     nbap_dch_chnl_info[common_transport_channel_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "15479:                     nbap_dch_chnl_info[common_transport_channel_id].num_dl_chans++;",
          "15480:                     nbap_dch_chnl_info[common_transport_channel_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "15481:                     break;",
          "15482:                 default:",
          "15483:                     break;",
          "15484:             }",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "15492: static int",
          "15493: dissect_nbap_TransportFormatSet_TransportBlockSize(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15495: guint32 TransportBlockSize;",
          "15496: guint num_items;",
          "15497: guint32 dch_id;",
          "",
          "[Removed Lines]",
          "15494: #line 1386 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15497: #line 1401 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "15507:     if(private_data_get_num_items(actx->pinfo)>0){",
          "15508:         num_items = private_data_get_num_items(actx->pinfo);",
          "15509:         dch_id = private_data_get_dch_id(actx->pinfo);",
          "15529:         }",
          "15530:     }",
          "",
          "[Removed Lines]",
          "15510:         common_physical_channel_id = private_data_get_common_physical_channel_id(actx->pinfo);",
          "15511:         common_transport_channel_id = private_data_get_common_transport_channel_id(actx->pinfo);",
          "15512:         switch(private_data_get_transport_format_set_type(actx->pinfo)){",
          "15513:             case NBAP_DCH_UL:",
          "15514:                 nbap_dch_chnl_info[dch_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;",
          "15515:                 break;",
          "15516:             case NBAP_DCH_DL:",
          "15517:                 nbap_dch_chnl_info[dch_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;",
          "15518:                 break;",
          "15519:             case NBAP_CPCH:",
          "15520:                 nbap_dch_chnl_info[common_physical_channel_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;",
          "15521:                 nbap_dch_chnl_info[common_physical_channel_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;",
          "15522:                 break;",
          "15523:             case NBAP_PCH:",
          "15524:                 nbap_dch_chnl_info[common_transport_channel_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;",
          "15525:                 nbap_dch_chnl_info[common_transport_channel_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;",
          "15526:                 break;",
          "15527:             default:",
          "15528:                 break;",
          "",
          "[Added Lines]",
          "15513:         if (num_items > 0 && dch_id != 0xffffffff) {",
          "15514:             common_physical_channel_id = private_data_get_common_physical_channel_id(actx->pinfo);",
          "15515:             common_transport_channel_id = private_data_get_common_transport_channel_id(actx->pinfo);",
          "15516:             switch(private_data_get_transport_format_set_type(actx->pinfo)){",
          "15517:                 case NBAP_DCH_UL:",
          "15518:                     nbap_dch_chnl_info[dch_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;",
          "15519:                     break;",
          "15520:                 case NBAP_DCH_DL:",
          "15521:                     nbap_dch_chnl_info[dch_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;",
          "15522:                     break;",
          "15523:                 case NBAP_CPCH:",
          "15524:                     nbap_dch_chnl_info[common_physical_channel_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;",
          "15525:                     nbap_dch_chnl_info[common_physical_channel_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;",
          "15526:                     break;",
          "15527:                 case NBAP_PCH:",
          "15528:                     nbap_dch_chnl_info[common_transport_channel_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;",
          "15529:                     nbap_dch_chnl_info[common_transport_channel_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;",
          "15530:                     break;",
          "15531:                 default:",
          "15532:                     break;",
          "15533:             }",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "15630: static int",
          "15631: dissect_nbap_TransportFormatSet_DynamicPartList_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15633:     private_data_increment_num_items(actx->pinfo);",
          "",
          "[Removed Lines]",
          "15632: #line 1340 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15637: #line 1353 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "15648: static int",
          "15649: dissect_nbap_TransportFormatSet_DynamicPartList(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15651:     private_data_set_num_items(actx->pinfo, 0);",
          "",
          "[Removed Lines]",
          "15650: #line 1337 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15655: #line 1350 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "15819: static int",
          "15820: dissect_nbap_T_ul_TransportFormatSet(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15822:     nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "15823:     nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "15824:     private_data_set_transport_format_set_type(actx->pinfo, NBAP_DCH_UL);",
          "15828:   offset = dissect_nbap_TransportFormatSet(tvb, offset, actx, tree, hf_index);",
          "",
          "[Removed Lines]",
          "15821: #line 1305 \"./asn1/Nbap/nbap.cnf\"",
          "15825:     nbap_dch_chnl_info[private_data_get_dch_id(actx->pinfo)].num_ul_chans = 0;",
          "",
          "[Added Lines]",
          "15826: #line 1306 \"./asn1/nbap/nbap.cnf\"",
          "15827:     guint32 dch_id = private_data_get_dch_id(actx->pinfo);",
          "15831:     if (dch_id != 0xffffffff) {",
          "15832:         nbap_dch_chnl_info[dch_id].num_ul_chans = 0;",
          "15833:     }",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "15835: static int",
          "15836: dissect_nbap_T_dl_TransportFormatSet(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15838:     nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "15839:     nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "15840:     private_data_set_transport_format_set_type(actx->pinfo, NBAP_DCH_DL);",
          "15844:   offset = dissect_nbap_TransportFormatSet(tvb, offset, actx, tree, hf_index);",
          "",
          "[Removed Lines]",
          "15837: #line 1311 \"./asn1/Nbap/nbap.cnf\"",
          "15841:     nbap_dch_chnl_info[private_data_get_dch_id(actx->pinfo)].num_dl_chans = 0;",
          "",
          "[Added Lines]",
          "15845: #line 1315 \"./asn1/nbap/nbap.cnf\"",
          "15846:     guint32 dch_id = private_data_get_dch_id(actx->pinfo);",
          "15850:     if (dch_id != 0xffffffff) {",
          "15851:         nbap_dch_chnl_info[dch_id].num_dl_chans = 0;",
          "15852:     }",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "15887: static int",
          "15888: dissect_nbap_DCH_Specific_FDD_Item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15890:     private_data_increment_num_dch_in_flow(actx->pinfo);",
          "15893:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "15894:                                    ett_nbap_DCH_Specific_FDD_Item, DCH_Specific_FDD_Item_sequence);",
          "15897:     private_data_set_prev_dch_id(actx->pinfo,private_data_get_dch_id(actx->pinfo));",
          "",
          "[Removed Lines]",
          "15889: #line 1299 \"./asn1/Nbap/nbap.cnf\"",
          "15896: #line 1302 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15900: #line 1300 \"./asn1/nbap/nbap.cnf\"",
          "15907: #line 1303 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "15908: static int",
          "15909: dissect_nbap_DCH_Specific_FDD_InformationList(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15911:     private_data_set_num_dch_in_flow(actx->pinfo, 0);",
          "15912:     private_data_set_prev_dch_id(actx->pinfo, 0);",
          "",
          "[Removed Lines]",
          "15910: #line 1295 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15921: #line 1296 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "16187: static int",
          "16188: dissect_nbap_T_dCH_ID_01(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "16191:   offset = dissect_nbap_DCH_ID(tvb, offset, actx, tree, hf_index);",
          "",
          "[Removed Lines]",
          "16189: #line 917 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "16200: #line 918 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "16202: static int",
          "16203: dissect_nbap_T_ul_TransportFormatSet_01(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "16205:     nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "16206:     nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "16207:     private_data_set_transport_format_set_type(actx->pinfo, NBAP_DCH_UL);",
          "16211:   offset = dissect_nbap_TransportFormatSet(tvb, offset, actx, tree, hf_index);",
          "",
          "[Removed Lines]",
          "16204: #line 1317 \"./asn1/Nbap/nbap.cnf\"",
          "16208:     nbap_dch_chnl_info[private_data_get_dch_id(actx->pinfo)].num_ul_chans = 0;",
          "",
          "[Added Lines]",
          "16215: #line 1324 \"./asn1/nbap/nbap.cnf\"",
          "16216:     guint32 dch_id = private_data_get_dch_id(actx->pinfo);",
          "16220:     if (dch_id != 0xffffffff) {",
          "16221:         nbap_dch_chnl_info[dch_id].num_ul_chans = 0;",
          "16222:     }",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "16218: static int",
          "16219: dissect_nbap_T_dl_TransportFormatSet_01(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "16221:     nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "16222:     nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "16223:     private_data_set_transport_format_set_type(actx->pinfo, NBAP_DCH_DL);",
          "16227:   offset = dissect_nbap_TransportFormatSet(tvb, offset, actx, tree, hf_index);",
          "",
          "[Removed Lines]",
          "16220: #line 1323 \"./asn1/Nbap/nbap.cnf\"",
          "16224:     nbap_dch_chnl_info[private_data_get_dch_id(actx->pinfo)].num_dl_chans = 0;",
          "",
          "[Added Lines]",
          "16234: #line 1333 \"./asn1/nbap/nbap.cnf\"",
          "16235:     guint32 dch_id = private_data_get_dch_id(actx->pinfo);",
          "16239:     if (dch_id != 0xffffffff) {",
          "16240:         nbap_dch_chnl_info[dch_id].num_dl_chans = 0;",
          "16241:     }",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "16276: static int",
          "16277: dissect_nbap_FDD_DCHs_to_ModifyItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "16280:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "16281:                                    ett_nbap_FDD_DCHs_to_ModifyItem, FDD_DCHs_to_ModifyItem_sequence);",
          "",
          "[Removed Lines]",
          "16278: #line 1423 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "16295: #line 1440 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "18698: static int",
          "18699: dissect_nbap_E_DCH_DDI_Value(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18701:   guint32 e_dch_ddi_value;",
          "18702:   guint num_items;",
          "18703:   nbap_edch_channel_info_t* nbap_edch_channel_info;",
          "",
          "[Removed Lines]",
          "18700: #line 1924 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "18717: #line 1940 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "18838: static int",
          "18839: dissect_nbap_E_DCH_LogicalChannelInformationItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18841:     private_data_increment_num_items(actx->pinfo);",
          "",
          "[Removed Lines]",
          "18840: #line 1921 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "18857: #line 1937 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "18855: static int",
          "18856: dissect_nbap_E_DCH_LogicalChannelInformation(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18858:     private_data_set_num_items(actx->pinfo, 0);",
          "18859:     nbap_edch_channel_info_t* nbap_edch_channel_info;",
          "18860:     nbap_edch_channel_info = private_data_get_nbap_edch_channel_info(actx->pinfo);",
          "",
          "[Removed Lines]",
          "18857: #line 1912 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "18874: #line 1928 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "18890: static int",
          "18891: dissect_nbap_E_DCH_MACdFlow_Specific_InfoItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18893: umts_fp_conversation_info_t *p_conv_data = NULL;",
          "18894: fp_edch_channel_info_t* fp_edch_channel_info = NULL;",
          "18895: address     null_addr;",
          "",
          "[Removed Lines]",
          "18892: #line 1670 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "18909: #line 1686 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "19075: static int",
          "19076: dissect_nbap_E_DCH_LogicalChannelToModifyItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "19079:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "19080:                                    ett_nbap_E_DCH_LogicalChannelToModifyItem, E_DCH_LogicalChannelToModifyItem_sequence);",
          "",
          "[Removed Lines]",
          "19077: #line 1907 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "19094: #line 1923 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "19150: static int",
          "19151: dissect_nbap_E_DCH_MACdFlow_Specific_InfoItem_to_Modify(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "19153: guint32 no_ddi_entries, i;",
          "19154: address     null_addr;",
          "19155: nbap_edch_port_info_t *old_info;",
          "",
          "[Removed Lines]",
          "19152: #line 1820 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "19169: #line 1836 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "19287: static int",
          "19288: dissect_nbap_E_DCH_FDD_Information_to_Modify(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "19291: address     dst_addr, null_addr;",
          "19292: conversation_t *conversation,*old_conversation = NULL;",
          "",
          "[Removed Lines]",
          "19289: #line 1725 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "19306: #line 1741 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "23881: static int",
          "23882: dissect_nbap_PICH_Mode(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23884: guint32 PICH_Mode = 0;",
          "23885:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "23886:                                      4, &PICH_Mode, TRUE, 0, NULL);",
          "",
          "[Removed Lines]",
          "23883: #line 1063 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "23900: #line 1064 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "23996: static int",
          "23997: dissect_nbap_HSDSCH_Common_System_InformationFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "",
          "[Removed Lines]",
          "23998: #line 2378 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24015: #line 2394 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "24143: static int",
          "24144: dissect_nbap_HSDSCH_MACdFlow_ID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "24146:   guint32 hsdsch_macdflow_id;",
          "24147:   guint num_items;",
          "24148:   gint* hsdsch_macdflow_ids;",
          "",
          "[Removed Lines]",
          "24145: #line 945 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24162: #line 946 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "24176: static int",
          "24177: dissect_nbap_HSDSCH_MACdFlow_Specific_InfoItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "24179:     address     dst_addr;",
          "24180:     guint32 transportLayerAddress_ipv4;",
          "24181:     guint16 bindingID;",
          "",
          "[Removed Lines]",
          "24178: #line 2046 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24195: #line 2062 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "24285: static int",
          "24286: dissect_nbap_RLC_Mode(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "24288:     guint32 rlc_mode;",
          "24289:     nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;",
          "24290:     nbap_hsdsch_channel_info = private_data_get_nbap_hsdsch_channel_info(actx->pinfo);",
          "",
          "[Removed Lines]",
          "24287: #line 1969 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24304: #line 1985 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "24327: static int",
          "24328: dissect_nbap_PriorityQueue_InfoItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "24330:     private_data_increment_num_items(actx->pinfo);",
          "",
          "[Removed Lines]",
          "24329: #line 2037 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24346: #line 2053 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "24361: static int",
          "24362: dissect_nbap_HSDSCH_MACdFlows_Information(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "24364:     int protocol_ie_id;",
          "24365:     guint32 i;",
          "24366:     private_data_set_num_items(actx->pinfo,0);",
          "",
          "[Removed Lines]",
          "24363: #line 1996 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24380: #line 2012 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "24406: static int",
          "24407: dissect_nbap_T_hSDSCH_Physical_Layer_Category(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "24409:     guint32 hsdsch_physical_layer_category;",
          "24410:     nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;",
          "24411:     nbap_hsdsch_channel_info = private_data_get_nbap_hsdsch_channel_info(actx->pinfo);",
          "",
          "[Removed Lines]",
          "24408: #line 1987 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24425: #line 2003 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "24476: static int",
          "24477: dissect_nbap_HSDSCH_FDD_Information(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "",
          "[Removed Lines]",
          "24478: #line 2108 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24495: #line 2124 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "24621: static int",
          "24622: dissect_nbap_HSDSCH_MACdFlow_Specific_InfoItem_to_Modify(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "24624:     address     dst_addr;",
          "24625:     guint32 transportLayerAddress_ipv4;",
          "24626:     guint16 bindingID;",
          "",
          "[Removed Lines]",
          "24623: #line 2205 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24640: #line 2221 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "24684: static int",
          "24685: dissect_nbap_PriorityQueue_InfoItem_to_Add(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "24687:     private_data_set_num_items(actx->pinfo,1);",
          "",
          "[Removed Lines]",
          "24686: #line 2040 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24703: #line 2056 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "24819: static int",
          "24820: dissect_nbap_HSDSCH_Information_to_Modify(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "",
          "[Removed Lines]",
          "24821: #line 2230 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24838: #line 2246 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "24949: static int",
          "24950: dissect_nbap_HSDSCH_MACdPDUSizeFormat(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "",
          "[Removed Lines]",
          "24951: #line 2085 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24968: #line 2101 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "25060: static int",
          "25061: dissect_nbap_HSDSCH_MACdFlow_Specific_InformationResp_Item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "25063:     private_data_increment_num_items(actx->pinfo);",
          "",
          "[Removed Lines]",
          "25062: #line 2043 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "25079: #line 2059 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "25476: static int",
          "25477: dissect_nbap_HSDSCH_Paging_System_InformationFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "25480:   g_warning(\"HS-DSCH Type 3 NOT Implemented!\");",
          "",
          "[Removed Lines]",
          "25478: #line 2459 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "25495: #line 2475 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "25670: static int",
          "25671: dissect_nbap_HSDSCH_MACdFlows_to_Delete_Item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "25673:     private_data_increment_num_items(actx->pinfo);",
          "",
          "[Removed Lines]",
          "25672: #line 2034 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "25689: #line 2050 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "25687: static int",
          "25688: dissect_nbap_HSDSCH_MACdFlows_to_Delete(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "25690:     private_data_set_num_items(actx->pinfo,0);",
          "",
          "[Removed Lines]",
          "25689: #line 2029 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "25706: #line 2045 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "27064: static int",
          "27065: dissect_nbap_IB_SG_DATA(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "27067:   tvbuff_t *parameter_tvb=NULL;",
          "27068:   tvbuff_t *final_tvb=NULL;",
          "27069:   proto_item *ti;",
          "",
          "[Removed Lines]",
          "27066: #line 618 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "27083: #line 618 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "27373: static int",
          "27374: dissect_nbap_IB_Type(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "27376:   guint32 ib_type;",
          "27377:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "27378:                                      26, &ib_type, TRUE, 15, NULL);",
          "",
          "[Removed Lines]",
          "27375: #line 601 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "27392: #line 601 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "28966: static int",
          "28967: dissect_nbap_NodeB_CommunicationContextID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "28969:   gboolean crnc_context_present;",
          "28970:   guint node_b_com_context_id;",
          "28971:   nbap_com_context_id_t *cur_val;",
          "",
          "[Removed Lines]",
          "28968: #line 2475 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "28985: #line 2491 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "29543: static int",
          "29544: dissect_nbap_T_dCH_id(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "29547:   offset = dissect_nbap_DCH_ID(tvb, offset, actx, tree, hf_index);",
          "",
          "[Removed Lines]",
          "29545: #line 1429 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "29562: #line 1446 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "29565: static int",
          "29566: dissect_nbap_RL_Specific_DCH_Info_Item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "29568: address     dst_addr, null_addr;",
          "29569: conversation_t *conversation = NULL;",
          "29570: umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "",
          "[Removed Lines]",
          "29567: #line 1434 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "29584: #line 1451 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "29636:                 dch_id = private_data_get_dch_id(actx->pinfo);",
          "29663:                     for (j = 0; j < num_tf; j++) {",
          "29666:                     }",
          "29670:                     for (j = 0; j < num_tf; j++) {",
          "29673:                     }",
          "29675:                 }",
          "29679:             }",
          "29681:             nbap_debug(\"Frame %u RL-Specific-DCH-Info-Item Start\", actx->pinfo->num);",
          "",
          "[Removed Lines]",
          "29637:                 umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[private_data_get_dch_id(actx->pinfo)].num_ul_chans;",
          "29638:                 for (j = 0; j < num_tf; j++) {",
          "29639:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[dch_id].ul_chan_tf_size[j];",
          "29640:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[dch_id].ul_chan_num_tbs[j];",
          "29641:                 }",
          "29644:                 umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[dch_id].num_dl_chans;",
          "29645:                 for (j = 0; j < num_tf; j++) {",
          "29646:                     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[dch_id].dl_chan_tf_size[j];",
          "29647:                     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[dch_id].dl_chan_num_tbs[j];",
          "29648:                 }",
          "29651:                 i = dch_id;",
          "29652:                 umts_fp_conversation_info->dch_ids_in_flow_list[0] = dch_id;",
          "29653:                 while(nbap_dch_chnl_info[i].next_dch != 0){",
          "29656:                     i = nbap_dch_chnl_info[i].next_dch;",
          "29657:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "29662:                     umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_ul_chans = num_tf = nbap_dch_chnl_info[i].num_ul_chans;",
          "29664:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_tf_size[j] = nbap_dch_chnl_info[i].ul_chan_tf_size[j];",
          "29665:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_num_tbs[j] = nbap_dch_chnl_info[i].ul_chan_num_tbs[j];",
          "29669:                     umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_dl_chans = num_tf = nbap_dch_chnl_info[i].num_dl_chans;",
          "29671:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_tf_size[j] = nbap_dch_chnl_info[i].dl_chan_tf_size[j];",
          "29672:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_num_tbs[j] = nbap_dch_chnl_info[i].dl_chan_num_tbs[j];",
          "29676:                 umts_fp_conversation_info->num_dch_in_flow++;",
          "29677:                 umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "29678:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "",
          "[Added Lines]",
          "29654:                 if (dch_id != 0xffffffff) {",
          "29655:                     umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[dch_id].num_ul_chans;",
          "29657:                         umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[dch_id].ul_chan_tf_size[j];",
          "29658:                         umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[dch_id].ul_chan_num_tbs[j];",
          "29662:                     umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[dch_id].num_dl_chans;",
          "29664:                         umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[dch_id].dl_chan_tf_size[j];",
          "29665:                         umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[dch_id].dl_chan_num_tbs[j];",
          "29669:                     i = dch_id;",
          "29670:                     umts_fp_conversation_info->dch_ids_in_flow_list[0] = dch_id;",
          "29671:                     while(nbap_dch_chnl_info[i].next_dch != 0){",
          "29672:                         i = nbap_dch_chnl_info[i].next_dch;",
          "29673:                         umts_fp_conversation_info->num_dch_in_flow++;",
          "29678:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_ul_chans = num_tf = nbap_dch_chnl_info[i].num_ul_chans;",
          "29679:                         for (j = 0; j < num_tf; j++) {",
          "29680:                                 umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_tf_size[j] = nbap_dch_chnl_info[i].ul_chan_tf_size[j];",
          "29681:                                 umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].ul_chan_num_tbs[j] = nbap_dch_chnl_info[i].ul_chan_num_tbs[j];",
          "29682:                         }",
          "29685:                         umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_dl_chans = num_tf = nbap_dch_chnl_info[i].num_dl_chans;",
          "29686:                         for (j = 0; j < num_tf; j++) {",
          "29687:                                 umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_tf_size[j] = nbap_dch_chnl_info[i].dl_chan_tf_size[j];",
          "29688:                                 umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].dl_chan_num_tbs[j] = nbap_dch_chnl_info[i].dl_chan_num_tbs[j];",
          "29689:                         }",
          "29690:                     }",
          "29691:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "29692:                     umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "29693:                     set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "29718: static int",
          "29719: dissect_nbap_RL_Specific_E_DCH_Information_Item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "29721: address     dst_addr, null_addr;",
          "29722: conversation_t *conversation;",
          "29723: umts_fp_conversation_info_t *umts_fp_conversation_info = NULL;",
          "",
          "[Removed Lines]",
          "29720: #line 1557 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "29736: #line 1573 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "30763: static int",
          "30764: dissect_nbap_Segment_Type(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "30766:   guint32 segment_type;",
          "30767:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "30768:                                      7, &segment_type, TRUE, 0, NULL);",
          "",
          "[Removed Lines]",
          "30765: #line 606 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "30781: #line 606 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "33098: static int",
          "33099: dissect_nbap_CommonTransportChannelSetupRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "33101: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonTransportChannelSetupRequest(FDD) \");",
          "33103: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "33100: #line 162 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "33116: #line 162 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "33288: static int",
          "33289: dissect_nbap_FACH_ParametersItem_CTCH_SetupRqstFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "33291: address dst_addr, null_addr;",
          "33292: conversation_t *conversation;",
          "",
          "[Removed Lines]",
          "33290: #line 1195 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "33306: #line 1196 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "33413: static int",
          "33414: dissect_nbap_T_transportFormatSet(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "33416:     nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "33417:     nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "33418:     private_data_set_transport_format_set_type(actx->pinfo, NBAP_PCH);",
          "",
          "[Removed Lines]",
          "33415: #line 1329 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "33431: #line 1342 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "33460: static int",
          "33461: dissect_nbap_PCH_ParametersItem_CTCH_SetupRqstFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "33464: address dst_addr, null_addr;",
          "33465: conversation_t *conversation;",
          "",
          "[Removed Lines]",
          "33462: #line 1084 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "33478: #line 1085 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "33607: static int",
          "33608: dissect_nbap_RACH_ParametersItem_CTCH_SetupRqstFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "33610: address dst_addr, null_addr;",
          "33611: conversation_t *conversation;",
          "33612: fp_rach_channel_info_t* fp_rach_channel_info;",
          "",
          "[Removed Lines]",
          "33609: #line 985 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "33625: #line 986 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "34396: static int",
          "34397: dissect_nbap_CommonTransportChannelSetupResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "34399: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonTransportChannelSetupResponse \");",
          "34401: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "34398: #line 168 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "34414: #line 168 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "34431: static int",
          "34432: dissect_nbap_CommonTransportChannelSetupFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "34434: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonTransportChannelSetupFailure \");",
          "34436: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "34433: #line 174 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "34449: #line 174 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "35150: static int",
          "35151: dissect_nbap_UnblockResourceIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35153: col_set_str(actx->pinfo->cinfo, COL_INFO,\"UnblockResourceIndication \");",
          "35155: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35152: #line 559 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35168: #line 559 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "35171: static int",
          "35172: dissect_nbap_AuditRequiredIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35174: col_set_str(actx->pinfo->cinfo, COL_INFO,\"AuditRequiredIndication \");",
          "35176: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35173: #line 463 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35189: #line 463 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "35192: static int",
          "35193: dissect_nbap_AuditRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35195: col_set_str(actx->pinfo->cinfo, COL_INFO,\"AuditRequest \");",
          "35197: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35194: #line 233 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35210: #line 233 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "35213: static int",
          "35214: dissect_nbap_AuditResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35216: col_set_str(actx->pinfo->cinfo, COL_INFO,\"AuditResponse \");",
          "35218: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35215: #line 239 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35231: #line 239 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "35807: static int",
          "35808: dissect_nbap_AuditFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35810: col_set_str(actx->pinfo->cinfo, COL_INFO,\"AuditFailure \");",
          "35812: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35809: #line 245 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35825: #line 245 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "35829: static int",
          "35830: dissect_nbap_CommonMeasurementInitiationRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35832: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementInitiationRequest \");",
          "35834: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "35831: #line 301 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35847: #line 301 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "35947: static int",
          "35948: dissect_nbap_CommonMeasurementInitiationResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35950: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementInitiationResponse \");",
          "35952: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35949: #line 307 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35965: #line 307 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "36063: static int",
          "36064: dissect_nbap_CommonMeasurementInitiationFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "36066: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementInitiationFailure \");",
          "36068: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "36065: #line 313 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "36081: #line 313 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "36084: static int",
          "36085: dissect_nbap_CommonMeasurementReport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "36087: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementReport \");",
          "36089: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "36086: #line 469 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "36102: #line 469 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "36200: static int",
          "36201: dissect_nbap_CommonMeasurementTerminationRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "36203: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementTerminationRequest \");",
          "36205: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "36202: #line 475 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "36218: #line 475 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "36221: static int",
          "36222: dissect_nbap_CommonMeasurementFailureIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "36224: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementFailureIndication \");",
          "36226: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "36223: #line 481 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "36239: #line 481 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "36242: static int",
          "36243: dissect_nbap_CellSetupRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "36245: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CellSetupRequest(FDD) \");",
          "36247: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "36244: #line 134 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "36260: #line 134 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "36774: static int",
          "36775: dissect_nbap_CellSetupResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "36777: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CellSetupResponse \");",
          "36779: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "36776: #line 140 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "36792: #line 140 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "36795: static int",
          "36796: dissect_nbap_CellSetupFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "36798: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CellSetupFailure \");",
          "36800: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "36797: #line 146 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "36813: #line 146 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "37338: static int",
          "37339: dissect_nbap_ResourceStatusIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "37341: col_set_str(actx->pinfo->cinfo, COL_INFO,\"ResourceStatusIndication \");",
          "37343: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "37340: #line 457 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "37356: #line 457 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "38096: static int",
          "38097: dissect_nbap_SystemInformationUpdateRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "38099: col_set_str(actx->pinfo->cinfo, COL_INFO,\"SystemInformationUpdateRequest \");",
          "38101: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "38098: #line 280 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "38114: #line 280 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "38167: static int",
          "38168: dissect_nbap_MIB_SB_SIB_InformationItem_SystemInfoUpdateRqst(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "38172:     private_data_set_segment_type(actx->pinfo, 0);",
          "",
          "[Removed Lines]",
          "38169: #line 611 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "38185: #line 611 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "38235: static int",
          "38236: dissect_nbap_SystemInformationUpdateResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "38238: col_set_str(actx->pinfo->cinfo, COL_INFO,\"SystemInformationUpdateResponse \");",
          "38240: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "38237: #line 286 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "38253: #line 286 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "38256: static int",
          "38257: dissect_nbap_SystemInformationUpdateFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "38259: col_set_str(actx->pinfo->cinfo, COL_INFO,\"SystemInformationUpdateFailure \");",
          "38261: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "38258: #line 292 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "38274: #line 292 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "38278: static int",
          "38279: dissect_nbap_RadioLinkSetupRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "38282:     col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkSetupRequest(FDD) \");",
          "",
          "[Removed Lines]",
          "38280: #line 255 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "38296: #line 255 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "38755: static int",
          "38756: dissect_nbap_RadioLinkSetupResponseFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "38759:     col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkSetupResponse(FDD) \");",
          "",
          "[Removed Lines]",
          "38757: #line 262 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "38773: #line 262 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "38975: static int",
          "38976: dissect_nbap_RadioLinkSetupFailureFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "38978: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkSetupFailure(FDD) \");",
          "38980: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "38977: #line 269 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "38993: #line 269 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "39260: static int",
          "39261: dissect_nbap_RadioLinkAdditionRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "39263: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkAdditionRequest(FDD) \");",
          "",
          "[Removed Lines]",
          "39262: #line 319 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "39278: #line 319 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "39632: static int",
          "39633: dissect_nbap_RadioLinkAdditionResponseFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "39635: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkAdditionResponse(FDD) \");",
          "",
          "[Removed Lines]",
          "39634: #line 324 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "39650: #line 324 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "39908: static int",
          "39909: dissect_nbap_RadioLinkAdditionFailureFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "39911: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkAdditionRequest(FDD) \");",
          "",
          "[Removed Lines]",
          "39910: #line 330 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "39926: #line 330 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "40193: static int",
          "40194: dissect_nbap_RadioLinkReconfigurationPrepareFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "40196:     col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationPrepare(FDD) \");",
          "40198:     actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "40195: #line 357 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "40211: #line 357 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "41811: static int",
          "41812: dissect_nbap_RadioLinkReconfigurationReady(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41814: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationReady \");",
          "41816: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "41813: #line 363 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41829: #line 363 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "41893: static int",
          "41894: dissect_nbap_RadioLinkReconfigurationFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41896: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationFailure \");",
          "41898: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "41895: #line 370 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41911: #line 370 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "42002: static int",
          "42003: dissect_nbap_RadioLinkReconfigurationCommit(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42005: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationCommit \");",
          "42007: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "42004: #line 487 \"./asn1/Nbap/nbap.cnf\"",
          "42010: #line 2542 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42020: #line 487 \"./asn1/nbap/nbap.cnf\"",
          "42026: #line 2558 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "42032: static int",
          "42033: dissect_nbap_RadioLinkReconfigurationCancel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42035: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationCancel \");",
          "42037: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "42034: #line 493 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42050: #line 493 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "42053: static int",
          "42054: dissect_nbap_RadioLinkReconfigurationRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42056: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationRequestFDD(FDD) \");",
          "42058: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "42055: #line 381 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42071: #line 381 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "42510: static int",
          "42511: dissect_nbap_RadioLinkReconfigurationResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42513: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationResponse \");",
          "",
          "[Removed Lines]",
          "42512: #line 387 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42528: #line 387 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "42571: static int",
          "42572: dissect_nbap_RadioLinkDeletionRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42574: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkDeletionRequest \");",
          "42576: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "42573: #line 343 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42589: #line 343 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "42622: static int",
          "42623: dissect_nbap_RadioLinkDeletionResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42625: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkDeletionResponse \");",
          "42627: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "42624: #line 350 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42640: #line 350 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "42644: static int",
          "42645: dissect_nbap_DL_PowerControlRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42647: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DL-PowerControlRequest \");",
          "42649: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "42646: #line 541 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42662: #line 541 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "42695: static int",
          "42696: dissect_nbap_DL_PowerTimeslotControlRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42698: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DL-PowerTimeslotControlRequest \");",
          "42700: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "42697: #line 547 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42713: #line 547 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "42716: static int",
          "42717: dissect_nbap_DedicatedMeasurementInitiationRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42719: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementInitiationRequest \");",
          "42721: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "42718: #line 403 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42734: #line 403 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "42912: static int",
          "42913: dissect_nbap_DedicatedMeasurementInitiationResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42915: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementInitiationResponse \");",
          "42917: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "42914: #line 409 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42930: #line 409 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "43217: static int",
          "43218: dissect_nbap_DedicatedMeasurementInitiationFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "43220: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementInitiationFailure \");",
          "43222: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "43219: #line 416 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43235: #line 416 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "43239: static int",
          "43240: dissect_nbap_DedicatedMeasurementReport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "43242: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementReport \");",
          "43244: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "43241: #line 521 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43257: #line 521 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "43422: static int",
          "43423: dissect_nbap_DedicatedMeasurementTerminationRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "43425: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementTerminationRequest \");",
          "43427: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "43424: #line 528 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43440: #line 528 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "43443: static int",
          "43444: dissect_nbap_DedicatedMeasurementFailureIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "43446: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementFailureIndication \");",
          "43448: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "43445: #line 534 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43461: #line 534 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "43465: static int",
          "43466: dissect_nbap_RadioLinkFailureIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "43468: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkFailureIndication \");",
          "43470: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "43467: #line 499 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43483: #line 499 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "43647: static int",
          "43648: dissect_nbap_RadioLinkPreemptionRequiredIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "43650: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkPreemptionRequiredIndication \");",
          "43652: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "43649: #line 506 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43665: #line 506 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "43698: static int",
          "43699: dissect_nbap_RadioLinkRestoreIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "43701: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkRestoreIndication \");",
          "43703: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "43700: #line 513 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43716: #line 513 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "43878: static int",
          "43879: dissect_nbap_CompressedModeCommand(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "43881: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CompressedModeCommand \");",
          "43883: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "43880: #line 553 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43896: #line 553 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "43899: static int",
          "43900: dissect_nbap_ErrorIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "43902: col_set_str(actx->pinfo->cinfo, COL_INFO,\"ErrorIndication \");",
          "",
          "[Removed Lines]",
          "43901: #line 565 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43917: #line 565 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "43919: static int",
          "43920: dissect_nbap_PrivateMessage(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "43922: col_set_str(actx->pinfo->cinfo, COL_INFO,\"PrivateMessage \");",
          "",
          "[Removed Lines]",
          "43921: #line 574 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43937: #line 574 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "43938: static int",
          "43939: dissect_nbap_PhysicalSharedChannelReconfigurationRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "43941: col_set_str(actx->pinfo->cinfo, COL_INFO,\"PhysicalSharedChannelReconfigurationRequest(FDD) \");",
          "43943: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "43940: #line 423 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43956: #line 423 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "46406: static int",
          "46407: dissect_nbap_PhysicalSharedChannelReconfigurationResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "46409: col_set_str(actx->pinfo->cinfo, COL_INFO,\"PhysicalSharedChannelReconfigurationResponse \");",
          "46411: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "46408: #line 429 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "46424: #line 429 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 136 ---",
          "[Context before]",
          "46457: static int",
          "46458: dissect_nbap_PhysicalSharedChannelReconfigurationFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "46460: col_set_str(actx->pinfo->cinfo, COL_INFO,\"PhysicalSharedChannelReconfigurationFailure \");",
          "46462: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "46459: #line 435 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "46475: #line 435 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 137 ---",
          "[Context before]",
          "47910: static int",
          "47911: dissect_nbap_BearerRearrangementIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "47913: col_set_str(actx->pinfo->cinfo, COL_INFO,\"BearerRearrangementIndication \");",
          "",
          "[Removed Lines]",
          "47912: #line 581 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "47928: #line 581 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 138 ---",
          "[Context before]",
          "48212: static int",
          "48213: dissect_nbap_RadioLinkParameterUpdateIndicationFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "48215: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkParameterUpdateIndication(FDD) \");",
          "48217: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "48214: #line 589 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "48230: #line 589 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 139 ---",
          "[Context before]",
          "56111: static int dissect_ProtocolIEFieldValue(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "56112: {",
          "",
          "[Removed Lines]",
          "56109: #line 830 \"./asn1/Nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "56125: #line 818 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 140 ---",
          "[Context before]",
          "56414:     NULL, HFILL }},",
          "56418:     { &hf_nbap_ActivationInformation_PDU,",
          "56419:       { \"ActivationInformation\", \"nbap.ActivationInformation\",",
          "56420:         FT_UINT32, BASE_DEC, NULL, 0,",
          "",
          "[Removed Lines]",
          "56417: #line 1 \"./asn1/Nbap/packet-nbap-hfarr.c\"",
          "",
          "[Added Lines]",
          "56433: #line 1 \"./asn1/nbap/packet-nbap-hfarr.c\"",
          "",
          "---------------",
          "--- Hunk 141 ---",
          "[Context before]",
          "69577:         NULL, HFILL }},",
          "69581:   };",
          "",
          "[Removed Lines]",
          "69580: #line 1136 \"./asn1/Nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "69596: #line 1124 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 142 ---",
          "[Context before]",
          "69588:     &ett_nbap_ib_sg_data,",
          "69592:     &ett_nbap_PrivateIE_ID,",
          "69593:     &ett_nbap_ProcedureID,",
          "69594:     &ett_nbap_TransactionID,",
          "",
          "[Removed Lines]",
          "69591: #line 1 \"./asn1/Nbap/packet-nbap-ettarr.c\"",
          "",
          "[Added Lines]",
          "69607: #line 1 \"./asn1/nbap/packet-nbap-ettarr.c\"",
          "",
          "---------------",
          "--- Hunk 143 ---",
          "[Context before]",
          "71217:     &ett_nbap_Outcome,",
          "71221:   };",
          "71223:   static ei_register_info ei[] = {",
          "",
          "[Removed Lines]",
          "71220: #line 1145 \"./asn1/Nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "71236: #line 1133 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 144 ---",
          "[Context before]",
          "71278:   dissector_add_uint(\"nbap.ies\", id_TUTRANGPSMeasurementValueInformation, create_dissector_handle(dissect_TUTRANGPSMeasurementValueInformation_PDU, proto_nbap));",
          "71279:   dissector_add_uint(\"nbap.ies\", id_SFNSFNMeasurementValueInformation, create_dissector_handle(dissect_SFNSFNMeasurementValueInformation_PDU, proto_nbap));",
          "71280:   dissector_add_uint(\"nbap.ies\", id_TransmittedCarrierPowerOfAllCodesNotUsedForHSTransmission, create_dissector_handle(dissect_TransmittedCarrierPowerOfAllCodesNotUsedForHSTransmissionValue_PDU, proto_nbap));",
          "",
          "[Removed Lines]",
          "71277: #line 1 \"./asn1/Nbap/packet-nbap-dis-tab.c\"",
          "",
          "[Added Lines]",
          "71293: #line 1 \"./asn1/nbap/packet-nbap-dis-tab.c\"",
          "",
          "---------------",
          "--- Hunk 145 ---",
          "[Context before]",
          "72373: }",
          "",
          "[Removed Lines]",
          "72372: #line 1200 \"./asn1/Nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "72388: #line 1188 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-nbap.h||epan/dissectors/packet-nbap.h": [
          "File: epan/dissectors/packet-nbap.h -> epan/dissectors/packet-nbap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "8: #line 1 \"./asn1/Nbap/packet-nbap-template.h\"",
          "",
          "[Added Lines]",
          "8: #line 1 \"./asn1/nbap/packet-nbap-template.h\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6abff3174bb1b62744a91e18d28c95d877a44aa0",
      "candidate_info": {
        "commit_hash": "6abff3174bb1b62744a91e18d28c95d877a44aa0",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/6abff3174bb1b62744a91e18d28c95d877a44aa0",
        "files": [
          "epan/dissectors/asn1/nbap/nbap.cnf",
          "epan/dissectors/asn1/nbap/packet-nbap-template.c",
          "epan/dissectors/packet-nbap.c",
          "epan/dissectors/packet-nbap.h",
          "epan/dissectors/packet-umts_fp.c",
          "epan/dissectors/packet-umts_fp.h"
        ],
        "message": "UMTS FP: Refactored FP Conversation Info struct\n\nMoved some fields which are only relevant to HS-DSCH / E-DCH  channel into appropriate 'channel specific' structs.\nAlso renamed \"dchs_in_flow_list\" to  \"dch_ids_in_flow_list\"\n\nChange-Id: I7bdeb74c7b1eda0872c0243f0e5f229df2691866\nReviewed-on: https://code.wireshark.org/review/21707\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/asn1/nbap/nbap.cnf||epan/dissectors/asn1/nbap/nbap.cnf",
          "epan/dissectors/asn1/nbap/packet-nbap-template.c||epan/dissectors/asn1/nbap/packet-nbap-template.c",
          "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c",
          "epan/dissectors/packet-nbap.h||epan/dissectors/packet-nbap.h",
          "epan/dissectors/packet-umts_fp.c||epan/dissectors/packet-umts_fp.c",
          "epan/dissectors/packet-umts_fp.h||epan/dissectors/packet-umts_fp.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/asn1/nbap/nbap.cnf||epan/dissectors/asn1/nbap/nbap.cnf",
            "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c",
            "epan/dissectors/packet-umts_fp.h||epan/dissectors/packet-umts_fp.h"
          ],
          "candidate": [
            "epan/dissectors/asn1/nbap/nbap.cnf||epan/dissectors/asn1/nbap/nbap.cnf",
            "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c",
            "epan/dissectors/packet-umts_fp.h||epan/dissectors/packet-umts_fp.h"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/asn1/nbap/nbap.cnf||epan/dissectors/asn1/nbap/nbap.cnf": [
          "File: epan/dissectors/asn1/nbap/nbap.cnf -> epan/dissectors/asn1/nbap/nbap.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "678: #.FN_BODY DCH-ID VAL_PTR = &t_dch_id",
          "679: #%(DEFAULT_BODY)s",
          "680: #   if(g_num_dch_in_flow>0)",
          "682: #",
          "683: # Only get the DCH-ID in this particularcase",
          "684: #",
          "",
          "[Removed Lines]",
          "681: #       g_dchs_in_flow_list[g_num_dch_in_flow-1]=dch_id;",
          "",
          "[Added Lines]",
          "681: #       g_dch_ids_in_flow_list[g_num_dch_in_flow-1]=dch_id;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "688:                                                             0U, 255U, &dch_id, FALSE);",
          "690:     if(g_num_dch_in_flow>0){",
          "692:         nbap_dch_chnl_info[dch_id].next_dch = 0;",
          "693:         if(prev_dch_id != 0){",
          "694:             nbap_dch_chnl_info[prev_dch_id].next_dch = dch_id;",
          "",
          "[Removed Lines]",
          "691:         g_dchs_in_flow_list[g_num_dch_in_flow-1]=dch_id;",
          "",
          "[Added Lines]",
          "691:         g_dch_ids_in_flow_list[g_num_dch_in_flow-1]=dch_id;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "815:                     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_num_tbs[j];",
          "816:                 }",
          "819:                 umts_fp_conversation_info->num_dch_in_flow=1;",
          "820:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "821:             }",
          "",
          "[Removed Lines]",
          "818:                 umts_fp_conversation_info->dchs_in_flow_list[0] = commonphysicalchannelid;",
          "",
          "[Added Lines]",
          "818:                 umts_fp_conversation_info->dch_ids_in_flow_list[0] = commonphysicalchannelid;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "923:                 nbap_debug(\"    commontransportchannelid %%u next ch %%u\",commontransportchannelid, nbap_dch_chnl_info[i].next_dch);",
          "926:                 while(nbap_dch_chnl_info[i].next_dch != 0){",
          "927:                     i = nbap_dch_chnl_info[i].next_dch;",
          "928:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "931:                     umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_ul_chans = num_tf = nbap_dch_chnl_info[i].num_ul_chans;",
          "932:                     for (j = 0; j < num_tf; j++) {",
          "",
          "[Removed Lines]",
          "925:                 umts_fp_conversation_info->dchs_in_flow_list[0] = commontransportchannelid;",
          "929:                     umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "[Added Lines]",
          "925:                 umts_fp_conversation_info->dch_ids_in_flow_list[0] = commontransportchannelid;",
          "929:                     umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "946:                 nbap_debug(\"    num_dch_in_flow %%u\", umts_fp_conversation_info->num_dch_in_flow);",
          "949:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "951:                 nbap_debug(\"Frame %%u PCH-ParametersItem-CTCH-SetupRqstFDD End\",",
          "",
          "[Removed Lines]",
          "948:                 umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "[Added Lines]",
          "948:                 umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1030:                 i = commonphysicalchannelid;",
          "1032:                 while(nbap_dch_chnl_info[i].next_dch != 0){",
          "1033:                     i = nbap_dch_chnl_info[i].next_dch;",
          "1034:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "1037:                     umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_ul_chans = num_tf = nbap_dch_chnl_info[i].num_ul_chans;",
          "1038:                     for (j = 0; j < num_tf; j++) {",
          "",
          "[Removed Lines]",
          "1031:                 umts_fp_conversation_info->dchs_in_flow_list[0] = commonphysicalchannelid;",
          "1035:                     umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "[Added Lines]",
          "1031:                 umts_fp_conversation_info->dch_ids_in_flow_list[0] = commonphysicalchannelid;",
          "1035:                     umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1048:                     }",
          "1049:                 }",
          "1050:                 umts_fp_conversation_info->num_dch_in_flow++;",
          "1052:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "1053:             }",
          "",
          "[Removed Lines]",
          "1051:                 umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "[Added Lines]",
          "1051:                 umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1240:                 i = dch_id;",
          "1242:                 while(nbap_dch_chnl_info[i].next_dch != 0){",
          "1245:                     i = nbap_dch_chnl_info[i].next_dch;",
          "1246:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "",
          "[Removed Lines]",
          "1241:                 umts_fp_conversation_info->dchs_in_flow_list[0] = dch_id;",
          "",
          "[Added Lines]",
          "1241:                 umts_fp_conversation_info->dch_ids_in_flow_list[0] = dch_id;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1264:                 }",
          "1265:                 umts_fp_conversation_info->num_dch_in_flow++;",
          "1267:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "1268:             }",
          "",
          "[Removed Lines]",
          "1266:                 umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "[Added Lines]",
          "1266:                 umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1393: #.FN_BODY E-DCH-MACdFlow-Specific-InfoItem",
          "1394: umts_fp_conversation_info_t *p_conv_data = NULL;",
          "1395: address     null_addr;",
          "1396: conversation_t   *p_conv;",
          "1397: guint32 no_ddi_entries, i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1395: fp_edch_channel_info_t* fp_edch_channel_info = NULL;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1415:     if(!p_conv_data)",
          "1416:         return offset;",
          "1419:     for (i = 0; i < no_ddi_entries; i++) {",
          "1425:             e_dch_macdflow_id,",
          "1426:             nbap_edch_channel_info[e_dch_macdflow_id].edch_ddi[i],",
          "",
          "[Removed Lines]",
          "1417:     no_ddi_entries = p_conv_data->no_ddi_entries = nbap_edch_channel_info[e_dch_macdflow_id].no_ddi_entries;",
          "1420:         p_conv_data->edch_ddi[i]            = nbap_edch_channel_info[e_dch_macdflow_id].edch_ddi[i];",
          "1421:         p_conv_data->edch_macd_pdu_size[i]  = nbap_edch_channel_info[e_dch_macdflow_id].edch_macd_pdu_size[i];",
          "",
          "[Added Lines]",
          "1419:     fp_edch_channel_info = (fp_edch_channel_info_t*)p_conv_data->channel_specific_info;",
          "1420:     if(p_conv_data->channel != CHANNEL_EDCH  || !fp_edch_channel_info)",
          "1421:         return offset;",
          "1423:     no_ddi_entries = fp_edch_channel_info->no_ddi_entries = nbap_edch_channel_info[e_dch_macdflow_id].no_ddi_entries;",
          "1426:         fp_edch_channel_info->edch_ddi[i]            = nbap_edch_channel_info[e_dch_macdflow_id].edch_ddi[i];",
          "1427:         fp_edch_channel_info->edch_macd_pdu_size[i]  = nbap_edch_channel_info[e_dch_macdflow_id].edch_macd_pdu_size[i];",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1435:     if( 0 == e_dch_ddi_value ){",
          "1437:     }else{",
          "1440:     }",
          "1442:     p_conv_data->num_dch_in_flow = 1;",
          "1445: #Handle Modified E-DCH Flows",
          "1446: #.FN_BODY E-DCH-FDD-Information-to-Modify",
          "",
          "[Removed Lines]",
          "1443:     p_conv_data->dchs_in_flow_list[0] = e_dch_macdflow_id;",
          "",
          "[Added Lines]",
          "1449:     p_conv_data->dch_ids_in_flow_list[0] = e_dch_macdflow_id;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1541: address     null_addr;",
          "1542: nbap_edch_port_info_t *old_info;",
          "1543: umts_fp_conversation_info_t *p_conv_data = NULL;",
          "1544: conversation_t   *p_conv;",
          "1546: num_items = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1550: fp_edch_channel_info_t* fp_edch_channel_info;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1598:     if(!p_conv_data)",
          "1599:         return offset;",
          "1602:     for (i = 0; i < no_ddi_entries; i++) {",
          "1608:             e_dch_macdflow_id,",
          "1609:             nbap_edch_channel_info[e_dch_macdflow_id].edch_ddi[i],",
          "",
          "[Removed Lines]",
          "1600:     no_ddi_entries = p_conv_data->no_ddi_entries = nbap_edch_channel_info[e_dch_macdflow_id].no_ddi_entries;",
          "1603:         p_conv_data->edch_ddi[i]            = nbap_edch_channel_info[e_dch_macdflow_id].edch_ddi[i];",
          "1604:         p_conv_data->edch_macd_pdu_size[i]  = nbap_edch_channel_info[e_dch_macdflow_id].edch_macd_pdu_size[i];",
          "",
          "[Added Lines]",
          "1608:     fp_edch_channel_info = (fp_edch_channel_info_t*)p_conv_data->channel_specific_info;",
          "1609:     if(p_conv_data->channel != CHANNEL_EDCH  || !fp_edch_channel_info)",
          "1610:         return offset;",
          "1612:     no_ddi_entries = fp_edch_channel_info->no_ddi_entries = nbap_edch_channel_info[e_dch_macdflow_id].no_ddi_entries;",
          "1615:         fp_edch_channel_info->edch_ddi[i]            = nbap_edch_channel_info[e_dch_macdflow_id].edch_ddi[i];",
          "1616:         fp_edch_channel_info->edch_macd_pdu_size[i]  = nbap_edch_channel_info[e_dch_macdflow_id].edch_macd_pdu_size[i];",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1618:     if( 0 == e_dch_ddi_value ){",
          "1620:     }else{",
          "1623:     }",
          "1625:     p_conv_data->num_dch_in_flow = 1;",
          "",
          "[Removed Lines]",
          "1626:     p_conv_data->dchs_in_flow_list[0] = e_dch_macdflow_id;",
          "",
          "[Added Lines]",
          "1638:     p_conv_data->dch_ids_in_flow_list[0] = e_dch_macdflow_id;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1803:     address     null_addr;",
          "1804:     conversation_t *conversation = NULL;",
          "1805:     umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "1806:     guint32 i;",
          "1808:     if (!actx->pinfo->fd->flags.visited){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1818:     fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1857:                     copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &nbap_hsdsch_channel_info[i].crnc_address);",
          "1858:                     umts_fp_conversation_info->crnc_port         = nbap_hsdsch_channel_info[i].crnc_port;",
          "1864:                     umts_fp_conversation_info->com_context_id = com_context_id;",
          "1867:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "1871:                     if(nbap_hsdsch_channel_info[i].entity == entity_not_specified ){",
          "1873:                         if(nbap_hsdsch_channel_info[i].hsdsch_physical_layer_category > 12){",
          "1875:                         }else{",
          "1877:                         }",
          "1878:                     }else{",
          "1880:                     }",
          "1881:                     umts_fp_conversation_info->rlc_mode = nbap_hsdsch_channel_info[i].rlc_mode;",
          "1882:                     set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "",
          "[Removed Lines]",
          "1868:                     umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow -1] = i;",
          "1874:                             umts_fp_conversation_info->hsdsch_entity = ehs;",
          "1876:                             umts_fp_conversation_info->hsdsch_entity = hs;",
          "1879:                         umts_fp_conversation_info->hsdsch_entity = (enum fp_hsdsch_entity)nbap_hsdsch_channel_info[i].entity;",
          "",
          "[Added Lines]",
          "1873:                     fp_hsdsch_channel_info = wmem_new0(wmem_file_scope(), fp_hsdsch_channel_info_t);",
          "1874:                     umts_fp_conversation_info->channel_specific_info = (void*)fp_hsdsch_channel_info;",
          "1883:                     umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow -1] = i;",
          "1889:                             fp_hsdsch_channel_info->hsdsch_entity = ehs;",
          "1891:                             fp_hsdsch_channel_info->hsdsch_entity = hs;",
          "1894:                         fp_hsdsch_channel_info->hsdsch_entity = (enum fp_hsdsch_entity)nbap_hsdsch_channel_info[i].entity;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1916:     address     null_addr;",
          "1917:     conversation_t *conversation = NULL;",
          "1918:     umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "1919:     guint32 i;",
          "1921:     if (!actx->pinfo->fd->flags.visited){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1934:     fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1974:                     copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &nbap_hsdsch_channel_info[i].crnc_address);",
          "1975:                     umts_fp_conversation_info->crnc_port         = nbap_hsdsch_channel_info[i].crnc_port;",
          "1981:                     umts_fp_conversation_info->com_context_id = com_context_id;",
          "1984:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "1988:                     if(nbap_hsdsch_channel_info[i].entity == entity_not_specified ){",
          "1990:                         if(nbap_hsdsch_channel_info[i].hsdsch_physical_layer_category > 12){",
          "1992:                         }else{",
          "1994:                         }",
          "1995:                     }else{",
          "1997:                     }",
          "1999:                     umts_fp_conversation_info->rlc_mode = nbap_hsdsch_channel_info[i].rlc_mode;",
          "",
          "[Removed Lines]",
          "1985:                     umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow -1] = i;",
          "1991:                             umts_fp_conversation_info->hsdsch_entity = ehs;",
          "1993:                             umts_fp_conversation_info->hsdsch_entity = hs;",
          "1996:                         umts_fp_conversation_info->hsdsch_entity = (enum fp_hsdsch_entity)nbap_hsdsch_channel_info[i].entity;",
          "",
          "[Added Lines]",
          "1993:                     fp_hsdsch_channel_info = wmem_new0(wmem_file_scope(), fp_hsdsch_channel_info_t);",
          "1994:                     umts_fp_conversation_info->channel_specific_info = (void*)fp_hsdsch_channel_info;",
          "2003:                     umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow -1] = i;",
          "2009:                             fp_hsdsch_channel_info->hsdsch_entity = ehs;",
          "2011:                             fp_hsdsch_channel_info->hsdsch_entity = hs;",
          "2014:                         fp_hsdsch_channel_info->hsdsch_entity = (enum fp_hsdsch_entity)nbap_hsdsch_channel_info[i].entity;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2051: umts_fp_conversation_info_t *umts_fp_conversation_info = NULL;",
          "2052: address     null_addr;",
          "2053: conversation_t   *conversation = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2070: fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2097:                 copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &nbap_common_channel_info[i].crnc_address);",
          "2098:                 umts_fp_conversation_info->crnc_port         = nbap_common_channel_info[i].crnc_port;",
          "2105:                 umts_fp_conversation_info->num_dch_in_flow++;",
          "2108:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "2109:             }",
          "",
          "[Removed Lines]",
          "2101:                 umts_fp_conversation_info->common_macdflow_id = common_macdflow_id;",
          "2103:                 umts_fp_conversation_info->hsdsch_entity = ehs;",
          "2106:                 umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow -1] = i;",
          "",
          "[Added Lines]",
          "2119:                 fp_hsdsch_channel_info = wmem_new0(wmem_file_scope(), fp_hsdsch_channel_info_t);",
          "2120:                 umts_fp_conversation_info->channel_specific_info = (void*)fp_hsdsch_channel_info;",
          "2121:                 fp_hsdsch_channel_info->common_macdflow_id = common_macdflow_id;",
          "2122:                 fp_hsdsch_channel_info->hsdsch_entity = ehs;",
          "2126:                 umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow -1] = i;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2154: #.FN_BODY HSDSCH-RNTI   VAL_PTR = &hrnti",
          "2155: umts_fp_conversation_info_t *umts_fp_conversation_info = NULL;",
          "2156: address     null_addr;",
          "2157: conversation_t   *conversation = NULL;",
          "2158: int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2176: fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2173:             if(conversation != NULL){",
          "2174:                 umts_fp_conversation_info = (umts_fp_conversation_info_t *)conversation_get_proto_data(conversation, proto_fp);",
          "2175:                 DISSECTOR_ASSERT(umts_fp_conversation_info != NULL);",
          "2177:             }",
          "2178:          }",
          "2179:      }",
          "",
          "[Removed Lines]",
          "2176:                 umts_fp_conversation_info->hrnti = hrnti;",
          "",
          "[Added Lines]",
          "2197:                 fp_hsdsch_channel_info = (fp_hsdsch_channel_info_t*)umts_fp_conversation_info->channel_specific_info;",
          "2198:                 DISSECTOR_ASSERT(fp_hsdsch_channel_info != NULL);",
          "2199:                 fp_hsdsch_channel_info->hrnti = hrnti;",
          "",
          "---------------"
        ],
        "epan/dissectors/asn1/nbap/packet-nbap-template.c||epan/dissectors/asn1/nbap/packet-nbap-template.c": [
          "File: epan/dissectors/asn1/nbap/packet-nbap-template.c -> epan/dissectors/asn1/nbap/packet-nbap-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "180: gint g_num_dch_in_flow;",
          "184: gint hsdsch_macdflow_ids[maxNrOfMACdFlows];",
          "",
          "[Removed Lines]",
          "182: gint g_dchs_in_flow_list[maxNrOfTFs];",
          "",
          "[Added Lines]",
          "182: gint g_dch_ids_in_flow_list[maxNrOfTFs];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "367:  address  null_addr;",
          "368:  conversation_t *conversation = NULL;",
          "369:  umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "370:  guint32 i;",
          "372:  if (pinfo->fd->flags.visited){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "370:  fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "403:      copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &nbap_hsdsch_channel_info[i].crnc_address);",
          "404:      umts_fp_conversation_info->crnc_port         = nbap_hsdsch_channel_info[i].crnc_port;",
          "410:      umts_fp_conversation_info->num_dch_in_flow++;",
          "414:      if(nbap_hsdsch_channel_info[i].entity == entity_not_specified ){",
          "416:       expert_add_info(pinfo, NULL, &ei_nbap_hsdsch_entity_not_specified);",
          "417:      }else{",
          "419:      }",
          "420:      umts_fp_conversation_info->rlc_mode = nbap_hsdsch_channel_info[i].rlc_mode;",
          "421:      set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "",
          "[Removed Lines]",
          "411:      umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow -1] = i;",
          "418:       umts_fp_conversation_info->hsdsch_entity = (enum fp_hsdsch_entity)nbap_hsdsch_channel_info[i].entity;",
          "",
          "[Added Lines]",
          "407:      fp_hsdsch_channel_info = wmem_new0(wmem_file_scope(), fp_hsdsch_channel_info_t);",
          "408:      umts_fp_conversation_info->channel_specific_info = (void*)fp_hsdsch_channel_info;",
          "414:      umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow -1] = i;",
          "421:       fp_hsdsch_channel_info->hsdsch_entity = (enum fp_hsdsch_entity)nbap_hsdsch_channel_info[i].entity;",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c": [
          "File: epan/dissectors/packet-nbap.c -> epan/dissectors/packet-nbap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "8: #line 1 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "8: #line 1 \"./asn1/Nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88: #define maxPrivateIEs                  65535",
          "89: #define maxProtocolExtensions          65535",
          "90: #define maxProtocolIEs                 65535",
          "",
          "[Removed Lines]",
          "87: #line 1 \"./asn1/nbap/packet-nbap-val.h\"",
          "",
          "[Added Lines]",
          "87: #line 1 \"./asn1/Nbap/packet-nbap-val.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1540: } ProtocolIE_ID_enum;",
          "1546: static int proto_nbap = -1;",
          "",
          "[Removed Lines]",
          "1543: #line 78 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "1543: #line 78 \"./asn1/Nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1553: #line 1 \"./asn1/nbap/packet-nbap-hf.c\"",
          "",
          "[Added Lines]",
          "1553: #line 1 \"./asn1/Nbap/packet-nbap-hf.c\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4844: static int hf_nbap_RACH_SubChannelNumbers_subCh0 = -1;",
          "4850: static int ett_nbap = -1;",
          "",
          "[Removed Lines]",
          "4847: #line 86 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "4847: #line 86 \"./asn1/Nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4858: static gint ett_nbap_PrivateIE_ID = -1;",
          "4859: static gint ett_nbap_ProcedureID = -1;",
          "4860: static gint ett_nbap_TransactionID = -1;",
          "",
          "[Removed Lines]",
          "4857: #line 1 \"./asn1/nbap/packet-nbap-ett.c\"",
          "",
          "[Added Lines]",
          "4857: #line 1 \"./asn1/Nbap/packet-nbap-ett.c\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6483: static gint ett_nbap_Outcome = -1;",
          "6488: static expert_field ei_nbap_no_find_comm_context_id = EI_INIT;",
          "6489: static expert_field ei_nbap_no_find_port_info = EI_INIT;",
          "",
          "[Removed Lines]",
          "6486: #line 94 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "6486: #line 94 \"./asn1/Nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6573: gint g_num_dch_in_flow;",
          "6577: gint hsdsch_macdflow_ids[maxNrOfMACdFlows];",
          "",
          "[Removed Lines]",
          "6575: gint g_dchs_in_flow_list[maxNrOfTFs];",
          "",
          "[Added Lines]",
          "6575: gint g_dch_ids_in_flow_list[maxNrOfTFs];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6734: static const value_string nbap_Criticality_vals[] = {",
          "6735:   {   0, \"reject\" },",
          "",
          "[Removed Lines]",
          "6732: #line 1 \"./asn1/nbap/packet-nbap-fn.c\"",
          "",
          "[Added Lines]",
          "6732: #line 1 \"./asn1/Nbap/packet-nbap-fn.c\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6871:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6872:                                                             0U, 255U, &ProcedureCode, FALSE);",
          "6875:      col_add_fstr(actx->pinfo->cinfo, COL_INFO, \"%s \",",
          "6876:                  val_to_str(ProcedureCode, nbap_ProcedureCode_vals,",
          "6877:                             \"unknown message\"));",
          "",
          "[Removed Lines]",
          "6874: #line 93 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "6874: #line 93 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6906: static int",
          "6907: dissect_nbap_ProcedureID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6909:   ProcedureCode = 0xFFFF;",
          "6910:   ddMode = 0xFFFF;",
          "6911:   ProcedureID = NULL;",
          "",
          "[Removed Lines]",
          "6908: #line 100 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "6908: #line 100 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6913:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "6914:                                    ett_nbap_ProcedureID, ProcedureID_sequence);",
          "6917:   ProcedureID = wmem_strdup_printf(wmem_packet_scope(), \"%s/%s\",",
          "6918:                                  val_to_str(ProcedureCode, VALS(nbap_ProcedureCode_vals), \"unknown(%u)\"),",
          "6919:                                  val_to_str(ddMode, VALS(nbap_DdMode_vals), \"unknown(%u)\"));",
          "",
          "[Removed Lines]",
          "6916: #line 106 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "6916: #line 106 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "8158:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8159:                                                             0U, maxProtocolIEs, &ProtocolIE_ID, FALSE);",
          "8162:   if (tree) {",
          "8163:     proto_item_append_text(proto_item_get_parent_nth(actx->created_item, 2), \": %s\", val_to_str_ext(ProtocolIE_ID, &nbap_ProtocolIE_ID_vals_ext, \"unknown (%d)\"));",
          "8164:   }",
          "",
          "[Removed Lines]",
          "8161: #line 82 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "8161: #line 82 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "8448: static int",
          "8449: dissect_nbap_UL_ScramblingCodeNumber(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8451:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8452:                                                             0U, 16777215U, &ul_scrambling_code, FALSE);",
          "",
          "[Removed Lines]",
          "8450: #line 743 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "8450: #line 743 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "8714: static int",
          "8715: dissect_nbap_E_DCH_MACdFlow_ID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8718:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8719:                                                             0U, maxNrOfEDCHMACdFlows_1, &e_dch_macdflow_id, FALSE);",
          "",
          "[Removed Lines]",
          "8716: #line 714 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "8716: #line 714 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "8730: static int",
          "8731: dissect_nbap_BindingID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8733:   tvbuff_t *parameter_tvb=NULL;",
          "8735:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "8732: #line 727 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "8732: #line 727 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "8754: static int",
          "8755: dissect_nbap_TransportLayerAddress(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8757:   tvbuff_t *parameter_tvb=NULL;",
          "8758:   proto_item *item;",
          "8759:   proto_tree *subtree, *nsap_tree;",
          "",
          "[Removed Lines]",
          "8756: #line 620 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "8756: #line 620 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "10075: static int",
          "10076: dissect_nbap_CFN(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10078:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "10079:                                                             0U, 255U, &cfn, FALSE);",
          "",
          "[Removed Lines]",
          "10077: #line 2190 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "10077: #line 2213 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "10328: static int",
          "10329: dissect_nbap_HSDSCH_RNTI(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10331: umts_fp_conversation_info_t *umts_fp_conversation_info = NULL;",
          "10332: address     null_addr;",
          "10333: conversation_t   *conversation = NULL;",
          "10334: int i;",
          "",
          "[Removed Lines]",
          "10330: #line 2155 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "10330: #line 2175 \"./asn1/Nbap/nbap.cnf\"",
          "10332: fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "10351:             if(conversation != NULL){",
          "10352:                 umts_fp_conversation_info = (umts_fp_conversation_info_t *)conversation_get_proto_data(conversation, proto_fp);",
          "10353:                 DISSECTOR_ASSERT(umts_fp_conversation_info != NULL);",
          "10355:             }",
          "10356:          }",
          "10357:      }",
          "",
          "[Removed Lines]",
          "10354:                 umts_fp_conversation_info->hrnti = hrnti;",
          "",
          "[Added Lines]",
          "10355:                 fp_hsdsch_channel_info = (fp_hsdsch_channel_info_t*)umts_fp_conversation_info->channel_specific_info;",
          "10356:                 DISSECTOR_ASSERT(fp_hsdsch_channel_info != NULL);",
          "10357:                 fp_hsdsch_channel_info->hrnti = hrnti;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "10569: static int",
          "10570: dissect_nbap_CommonTransportChannelID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10572:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "10573:                                                             0U, 255U, &commontransportchannelid, FALSE);",
          "",
          "[Removed Lines]",
          "10571: #line 709 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "10574: #line 709 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "11380: static int",
          "11381: dissect_nbap_CommonPhysicalChannelID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "11383:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "11384:                                                             0U, 255U, &commonphysicalchannelid, FALSE);",
          "",
          "[Removed Lines]",
          "11382: #line 704 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "11385: #line 704 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "11550: static int",
          "11551: dissect_nbap_Common_MACFlow_ID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "11554:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "11555:                                                             0U, maxNrOfCommonMACFlows_1, &common_macdflow_id, FALSE);",
          "",
          "[Removed Lines]",
          "11552: #line 2014 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "11555: #line 2032 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "11632: static int",
          "11633: dissect_nbap_PayloadCRC_PresenceIndicator(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "11635: guint32 payload_crc_value;",
          "11637:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "11634: #line 668 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "11637: #line 668 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "11684: static int",
          "11685: dissect_nbap_LogicalChannelID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "11688:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "11689:                                                             1U, 15U, &logical_channel_id, FALSE);",
          "",
          "[Removed Lines]",
          "11686: #line 1668 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "11689: #line 1680 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "11702: static int",
          "11703: dissect_nbap_MAC_PDU_SizeExtended(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "11705:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "11706:                                                             1U, 1504U, NULL, TRUE);",
          "",
          "[Removed Lines]",
          "11704: #line 1770 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "11707: #line 1782 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "12125: static int",
          "12126: dissect_nbap_CommonMACFlow_Specific_InfoItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "12128:     address     dst_addr;",
          "12129:     transportLayerAddress_ipv4 = 0;",
          "12130:     BindingID_port = 0;",
          "",
          "[Removed Lines]",
          "12127: #line 2021 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "12130: #line 2039 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "12170: static int",
          "12171: dissect_nbap_MACdPDU_Size(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "12173:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "12174:                                                             1U, 5000U, &MACdPDU_Size, TRUE);",
          "",
          "[Removed Lines]",
          "12172: #line 1658 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "12175: #line 1670 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "13391: static int",
          "13392: dissect_nbap_CRNC_CommunicationContextID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "13394:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "13395:                                                             0U, 1048575U, &com_context_id, FALSE);",
          "",
          "[Removed Lines]",
          "13393: #line 2129 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "13396: #line 2149 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "14822: static int",
          "14823: dissect_nbap_T_dCH_ID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "14826:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "14827:                                                             0U, 255U, &dch_id, FALSE);",
          "14829:     if(g_num_dch_in_flow>0){",
          "14831:         nbap_dch_chnl_info[dch_id].next_dch = 0;",
          "14832:         if(prev_dch_id != 0){",
          "14833:             nbap_dch_chnl_info[prev_dch_id].next_dch = dch_id;",
          "",
          "[Removed Lines]",
          "14824: #line 686 \"./asn1/nbap/nbap.cnf\"",
          "14830:         g_dchs_in_flow_list[g_num_dch_in_flow-1]=dch_id;",
          "",
          "[Added Lines]",
          "14827: #line 686 \"./asn1/Nbap/nbap.cnf\"",
          "14833:         g_dch_ids_in_flow_list[g_num_dch_in_flow-1]=dch_id;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "14844: static int",
          "14845: dissect_nbap_TransportFormatSet_NrOfTransportBlocks(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "14847: guint32 NrOfTransportBlocks;",
          "14849:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "14846: #line 1097 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "14849: #line 1097 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "14887: static int",
          "14888: dissect_nbap_TransportFormatSet_TransportBlockSize(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "14890: guint32 TransportBlockSize;",
          "14892:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "14889: #line 1129 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "14892: #line 1129 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "15015: static int",
          "15016: dissect_nbap_TransportFormatSet_DynamicPartList_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15018:     num_items++;",
          "",
          "[Removed Lines]",
          "15017: #line 1093 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15020: #line 1093 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "15033: static int",
          "15034: dissect_nbap_TransportFormatSet_DynamicPartList(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15036:     num_items = 0;",
          "",
          "[Removed Lines]",
          "15035: #line 1090 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15038: #line 1090 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "15204: static int",
          "15205: dissect_nbap_T_ul_TransportFormatSet(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15207:     transportFormatSet_type = NBAP_DCH_UL;",
          "15208:     nbap_dch_chnl_info[dch_id].num_ul_chans = 0;",
          "",
          "[Removed Lines]",
          "15206: #line 1068 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15209: #line 1068 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "15218: static int",
          "15219: dissect_nbap_T_dl_TransportFormatSet(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15221:     transportFormatSet_type = NBAP_DCH_DL;",
          "15222:     nbap_dch_chnl_info[dch_id].num_dl_chans = 0;",
          "",
          "[Removed Lines]",
          "15220: #line 1072 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15223: #line 1072 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "15268: static int",
          "15269: dissect_nbap_DCH_Specific_FDD_Item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15271:     g_num_dch_in_flow++;",
          "15274:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "15275:                                    ett_nbap_DCH_Specific_FDD_Item, DCH_Specific_FDD_Item_sequence);",
          "15278:     prev_dch_id = dch_id;",
          "",
          "[Removed Lines]",
          "15270: #line 1062 \"./asn1/nbap/nbap.cnf\"",
          "15277: #line 1065 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15273: #line 1062 \"./asn1/Nbap/nbap.cnf\"",
          "15280: #line 1065 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "15289: static int",
          "15290: dissect_nbap_DCH_Specific_FDD_InformationList(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15292:     g_num_dch_in_flow = 0;",
          "15293:     prev_dch_id = 0;",
          "",
          "[Removed Lines]",
          "15291: #line 1058 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15294: #line 1058 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "15568: static int",
          "15569: dissect_nbap_T_dCH_ID_01(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15572:   offset = dissect_nbap_DCH_ID(tvb, offset, actx, tree, hf_index);",
          "",
          "[Removed Lines]",
          "15570: #line 699 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15573: #line 699 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "15583: static int",
          "15584: dissect_nbap_T_ul_TransportFormatSet_01(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15586:     transportFormatSet_type = NBAP_DCH_UL;",
          "15587:     nbap_dch_chnl_info[dch_id].num_ul_chans = 0;",
          "",
          "[Removed Lines]",
          "15585: #line 1076 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15588: #line 1076 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "15597: static int",
          "15598: dissect_nbap_T_dl_TransportFormatSet_01(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15600:     transportFormatSet_type = NBAP_DCH_DL;",
          "15601:     nbap_dch_chnl_info[dch_id].num_dl_chans = 0;",
          "",
          "[Removed Lines]",
          "15599: #line 1080 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15602: #line 1080 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "15653: static int",
          "15654: dissect_nbap_FDD_DCHs_to_ModifyItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15657:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "15658:                                    ett_nbap_FDD_DCHs_to_ModifyItem, FDD_DCHs_to_ModifyItem_sequence);",
          "",
          "[Removed Lines]",
          "15655: #line 1156 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "15658: #line 1156 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "18075: static int",
          "18076: dissect_nbap_E_DCH_DDI_Value(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18079:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "18080:                                                             0U, 62U, &e_dch_ddi_value, FALSE);",
          "",
          "[Removed Lines]",
          "18077: #line 1647 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "18080: #line 1659 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "18210: static int",
          "18211: dissect_nbap_E_DCH_LogicalChannelInformationItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18213:     num_items++;",
          "",
          "[Removed Lines]",
          "18212: #line 1644 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "18215: #line 1656 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "18227: static int",
          "18228: dissect_nbap_E_DCH_LogicalChannelInformation(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18230:     num_items = 0;",
          "18232:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "18229: #line 1637 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "18232: #line 1649 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "18260: static int",
          "18261: dissect_nbap_E_DCH_MACdFlow_Specific_InfoItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18263: umts_fp_conversation_info_t *p_conv_data = NULL;",
          "18264: address     null_addr;",
          "18265: conversation_t   *p_conv;",
          "18266: guint32 no_ddi_entries, i;",
          "",
          "[Removed Lines]",
          "18262: #line 1394 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "18265: #line 1394 \"./asn1/Nbap/nbap.cnf\"",
          "18267: fp_edch_channel_info_t* fp_edch_channel_info = NULL;",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "18286:     if(!p_conv_data)",
          "18287:         return offset;",
          "18290:     for (i = 0; i < no_ddi_entries; i++) {",
          "18296:             e_dch_macdflow_id,",
          "18297:             nbap_edch_channel_info[e_dch_macdflow_id].edch_ddi[i],",
          "",
          "[Removed Lines]",
          "18288:     no_ddi_entries = p_conv_data->no_ddi_entries = nbap_edch_channel_info[e_dch_macdflow_id].no_ddi_entries;",
          "18291:         p_conv_data->edch_ddi[i]            = nbap_edch_channel_info[e_dch_macdflow_id].edch_ddi[i];",
          "18292:         p_conv_data->edch_macd_pdu_size[i]  = nbap_edch_channel_info[e_dch_macdflow_id].edch_macd_pdu_size[i];",
          "",
          "[Added Lines]",
          "18293:     fp_edch_channel_info = (fp_edch_channel_info_t*)p_conv_data->channel_specific_info;",
          "18294:     if(p_conv_data->channel != CHANNEL_EDCH  || !fp_edch_channel_info)",
          "18295:         return offset;",
          "18297:     no_ddi_entries = fp_edch_channel_info->no_ddi_entries = nbap_edch_channel_info[e_dch_macdflow_id].no_ddi_entries;",
          "18300:         fp_edch_channel_info->edch_ddi[i]            = nbap_edch_channel_info[e_dch_macdflow_id].edch_ddi[i];",
          "18301:         fp_edch_channel_info->edch_macd_pdu_size[i]  = nbap_edch_channel_info[e_dch_macdflow_id].edch_macd_pdu_size[i];",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "18306:     if( 0 == e_dch_ddi_value ){",
          "18308:     }else{",
          "18311:     }",
          "18313:     p_conv_data->num_dch_in_flow = 1;",
          "",
          "[Removed Lines]",
          "18314:     p_conv_data->dchs_in_flow_list[0] = e_dch_macdflow_id;",
          "",
          "[Added Lines]",
          "18323:     p_conv_data->dch_ids_in_flow_list[0] = e_dch_macdflow_id;",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "18443: static int",
          "18444: dissect_nbap_E_DCH_LogicalChannelToModifyItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18447:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "18448:                                    ett_nbap_E_DCH_LogicalChannelToModifyItem, E_DCH_LogicalChannelToModifyItem_sequence);",
          "",
          "[Removed Lines]",
          "18445: #line 1632 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "18454: #line 1644 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "18518: static int",
          "18519: dissect_nbap_E_DCH_MACdFlow_Specific_InfoItem_to_Modify(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18521: guint32 no_ddi_entries, i;",
          "18522: address     null_addr;",
          "18523: nbap_edch_port_info_t *old_info;",
          "18524: umts_fp_conversation_info_t *p_conv_data = NULL;",
          "18525: conversation_t   *p_conv;",
          "18527: num_items = 1;",
          "",
          "[Removed Lines]",
          "18520: #line 1540 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "18529: #line 1546 \"./asn1/Nbap/nbap.cnf\"",
          "18534: fp_edch_channel_info_t* fp_edch_channel_info;",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "18581:     if(!p_conv_data)",
          "18582:         return offset;",
          "18585:     for (i = 0; i < no_ddi_entries; i++) {",
          "18591:             e_dch_macdflow_id,",
          "18592:             nbap_edch_channel_info[e_dch_macdflow_id].edch_ddi[i],",
          "",
          "[Removed Lines]",
          "18583:     no_ddi_entries = p_conv_data->no_ddi_entries = nbap_edch_channel_info[e_dch_macdflow_id].no_ddi_entries;",
          "18586:         p_conv_data->edch_ddi[i]            = nbap_edch_channel_info[e_dch_macdflow_id].edch_ddi[i];",
          "18587:         p_conv_data->edch_macd_pdu_size[i]  = nbap_edch_channel_info[e_dch_macdflow_id].edch_macd_pdu_size[i];",
          "",
          "[Added Lines]",
          "18594:     fp_edch_channel_info = (fp_edch_channel_info_t*)p_conv_data->channel_specific_info;",
          "18595:     if(p_conv_data->channel != CHANNEL_EDCH  || !fp_edch_channel_info)",
          "18596:         return offset;",
          "18598:     no_ddi_entries = fp_edch_channel_info->no_ddi_entries = nbap_edch_channel_info[e_dch_macdflow_id].no_ddi_entries;",
          "18601:         fp_edch_channel_info->edch_ddi[i]            = nbap_edch_channel_info[e_dch_macdflow_id].edch_ddi[i];",
          "18602:         fp_edch_channel_info->edch_macd_pdu_size[i]  = nbap_edch_channel_info[e_dch_macdflow_id].edch_macd_pdu_size[i];",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "18601:     if( 0 == e_dch_ddi_value ){",
          "18603:     }else{",
          "18606:     }",
          "18608:     p_conv_data->num_dch_in_flow = 1;",
          "",
          "[Removed Lines]",
          "18609:     p_conv_data->dchs_in_flow_list[0] = e_dch_macdflow_id;",
          "",
          "[Added Lines]",
          "18624:     p_conv_data->dch_ids_in_flow_list[0] = e_dch_macdflow_id;",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "18660: static int",
          "18661: dissect_nbap_E_DCH_FDD_Information_to_Modify(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18664: address     dst_addr, null_addr;",
          "18665: conversation_t *conversation,*old_conversation = NULL;",
          "",
          "[Removed Lines]",
          "18662: #line 1447 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "18677: #line 1453 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "23242: static int",
          "23243: dissect_nbap_PICH_Mode(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23245: guint32 PICH_Mode = 0;",
          "23246:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "23247:                                      4, &PICH_Mode, TRUE, 0, NULL);",
          "",
          "[Removed Lines]",
          "23244: #line 824 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "23259: #line 824 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "23357: static int",
          "23358: dissect_nbap_HSDSCH_Common_System_InformationFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "",
          "[Removed Lines]",
          "23359: #line 2041 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "23374: #line 2059 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "23370: umts_fp_conversation_info_t *umts_fp_conversation_info = NULL;",
          "23371: address     null_addr;",
          "23372: conversation_t   *conversation = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23386: fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "23418:                 copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &nbap_common_channel_info[i].crnc_address);",
          "23419:                 umts_fp_conversation_info->crnc_port         = nbap_common_channel_info[i].crnc_port;",
          "23426:                 umts_fp_conversation_info->num_dch_in_flow++;",
          "23429:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "23430:             }",
          "",
          "[Removed Lines]",
          "23422:                 umts_fp_conversation_info->common_macdflow_id = common_macdflow_id;",
          "23424:                 umts_fp_conversation_info->hsdsch_entity = ehs;",
          "23427:                 umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow -1] = i;",
          "",
          "[Added Lines]",
          "23437:                 fp_hsdsch_channel_info = wmem_new0(wmem_file_scope(), fp_hsdsch_channel_info_t);",
          "23438:                 umts_fp_conversation_info->channel_specific_info = (void*)fp_hsdsch_channel_info;",
          "23439:                 fp_hsdsch_channel_info->common_macdflow_id = common_macdflow_id;",
          "23440:                 fp_hsdsch_channel_info->hsdsch_entity = ehs;",
          "23444:                 umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow -1] = i;",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "23491: static int",
          "23492: dissect_nbap_HSDSCH_MACdFlow_ID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23494:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "23495:                                                             0U, maxNrOfMACdFlows_1, &hsdsch_macdflow_id, FALSE);",
          "",
          "[Removed Lines]",
          "23493: #line 719 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "23510: #line 719 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "23518: static int",
          "23519: dissect_nbap_HSDSCH_MACdFlow_Specific_InfoItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23523:     address     dst_addr;",
          "",
          "[Removed Lines]",
          "23520: #line 1748 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "23537: #line 1760 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "23621: static int",
          "23622: dissect_nbap_RLC_Mode(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23624:     guint32 rlc_mode;",
          "23626:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "23623: #line 1675 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "23640: #line 1687 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "23662: static int",
          "23663: dissect_nbap_PriorityQueue_InfoItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23665:     num_items++;",
          "",
          "[Removed Lines]",
          "23664: #line 1739 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "23681: #line 1751 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "23696: static int",
          "23697: dissect_nbap_HSDSCH_MACdFlows_Information(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23700:     int protocol_ie_id;",
          "23701:     guint32 i;",
          "",
          "[Removed Lines]",
          "23698: #line 1699 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "23715: #line 1711 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "23740: static int",
          "23741: dissect_nbap_T_hSDSCH_Physical_Layer_Category(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23743:     guint32 hsdsch_physical_layer_category;",
          "23745:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "23742: #line 1692 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "23759: #line 1704 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "23808: static int",
          "23809: dissect_nbap_HSDSCH_FDD_Information(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23814:     address     null_addr;",
          "23815:     conversation_t *conversation = NULL;",
          "23816:     umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "23817:     guint32 i;",
          "23819:     if (!actx->pinfo->fd->flags.visited){",
          "",
          "[Removed Lines]",
          "23810: #line 1800 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "23827: #line 1812 \"./asn1/Nbap/nbap.cnf\"",
          "23834:     fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "23870:                     copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &nbap_hsdsch_channel_info[i].crnc_address);",
          "23871:                     umts_fp_conversation_info->crnc_port         = nbap_hsdsch_channel_info[i].crnc_port;",
          "23877:                     umts_fp_conversation_info->com_context_id = com_context_id;",
          "23880:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "23884:                     if(nbap_hsdsch_channel_info[i].entity == entity_not_specified ){",
          "23886:                         if(nbap_hsdsch_channel_info[i].hsdsch_physical_layer_category > 12){",
          "23888:                         }else{",
          "23890:                         }",
          "23891:                     }else{",
          "23893:                     }",
          "23894:                     umts_fp_conversation_info->rlc_mode = nbap_hsdsch_channel_info[i].rlc_mode;",
          "23895:                     set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "",
          "[Removed Lines]",
          "23881:                     umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow -1] = i;",
          "23887:                             umts_fp_conversation_info->hsdsch_entity = ehs;",
          "23889:                             umts_fp_conversation_info->hsdsch_entity = hs;",
          "23892:                         umts_fp_conversation_info->hsdsch_entity = (enum fp_hsdsch_entity)nbap_hsdsch_channel_info[i].entity;",
          "",
          "[Added Lines]",
          "23891:                     fp_hsdsch_channel_info = wmem_new0(wmem_file_scope(), fp_hsdsch_channel_info_t);",
          "23892:                     umts_fp_conversation_info->channel_specific_info = (void*)fp_hsdsch_channel_info;",
          "23901:                     umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow -1] = i;",
          "23907:                             fp_hsdsch_channel_info->hsdsch_entity = ehs;",
          "23909:                             fp_hsdsch_channel_info->hsdsch_entity = hs;",
          "23912:                         fp_hsdsch_channel_info->hsdsch_entity = (enum fp_hsdsch_entity)nbap_hsdsch_channel_info[i].entity;",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "23945: static int",
          "23946: dissect_nbap_HSDSCH_MACdFlow_Specific_InfoItem_to_Modify(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23948:     address     dst_addr;",
          "23949:     transportLayerAddress_ipv4 = 0;",
          "23950:     BindingID_port = 0;",
          "",
          "[Removed Lines]",
          "23947: #line 1889 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "23967: #line 1904 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "24003: static int",
          "24004: dissect_nbap_PriorityQueue_InfoItem_to_Add(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "24006:     num_items = 1;",
          "",
          "[Removed Lines]",
          "24005: #line 1742 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24025: #line 1754 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "24138: static int",
          "24139: dissect_nbap_HSDSCH_Information_to_Modify(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "",
          "[Removed Lines]",
          "24140: #line 1909 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24160: #line 1924 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "24148:     address     null_addr;",
          "24149:     conversation_t *conversation = NULL;",
          "24150:     umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "24151:     guint32 i;",
          "24153:     if (!actx->pinfo->fd->flags.visited){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24171:     fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "24208:                     copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &nbap_hsdsch_channel_info[i].crnc_address);",
          "24209:                     umts_fp_conversation_info->crnc_port         = nbap_hsdsch_channel_info[i].crnc_port;",
          "24215:                     umts_fp_conversation_info->com_context_id = com_context_id;",
          "24218:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "24222:                     if(nbap_hsdsch_channel_info[i].entity == entity_not_specified ){",
          "24224:                         if(nbap_hsdsch_channel_info[i].hsdsch_physical_layer_category > 12){",
          "24226:                         }else{",
          "24228:                         }",
          "24229:                     }else{",
          "24231:                     }",
          "24233:                     umts_fp_conversation_info->rlc_mode = nbap_hsdsch_channel_info[i].rlc_mode;",
          "",
          "[Removed Lines]",
          "24219:                     umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow -1] = i;",
          "24225:                             umts_fp_conversation_info->hsdsch_entity = ehs;",
          "24227:                             umts_fp_conversation_info->hsdsch_entity = hs;",
          "24230:                         umts_fp_conversation_info->hsdsch_entity = (enum fp_hsdsch_entity)nbap_hsdsch_channel_info[i].entity;",
          "",
          "[Added Lines]",
          "24232:                     fp_hsdsch_channel_info = wmem_new0(wmem_file_scope(), fp_hsdsch_channel_info_t);",
          "24233:                     umts_fp_conversation_info->channel_specific_info = (void*)fp_hsdsch_channel_info;",
          "24242:                     umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow -1] = i;",
          "24248:                             fp_hsdsch_channel_info->hsdsch_entity = ehs;",
          "24250:                             fp_hsdsch_channel_info->hsdsch_entity = hs;",
          "24253:                         fp_hsdsch_channel_info->hsdsch_entity = (enum fp_hsdsch_entity)nbap_hsdsch_channel_info[i].entity;",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "24260: static int",
          "24261: dissect_nbap_HSDSCH_MACdPDUSizeFormat(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "",
          "[Removed Lines]",
          "24262: #line 1777 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24285: #line 1789 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "24371: static int",
          "24372: dissect_nbap_HSDSCH_MACdFlow_Specific_InformationResp_Item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "24374:     num_items++;",
          "",
          "[Removed Lines]",
          "24373: #line 1745 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24396: #line 1757 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "24787: static int",
          "24788: dissect_nbap_HSDSCH_Paging_System_InformationFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "24791:   g_warning(\"HS-DSCH Type 3 NOT Implemented!\");",
          "",
          "[Removed Lines]",
          "24789: #line 2119 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24812: #line 2139 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "24981: static int",
          "24982: dissect_nbap_HSDSCH_MACdFlows_to_Delete_Item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "24984:     num_items++;",
          "",
          "[Removed Lines]",
          "24983: #line 1736 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "25006: #line 1748 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "24998: static int",
          "24999: dissect_nbap_HSDSCH_MACdFlows_to_Delete(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "25001:     num_items = 0;",
          "",
          "[Removed Lines]",
          "25000: #line 1731 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "25023: #line 1743 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "26375: static int",
          "26376: dissect_nbap_IB_SG_DATA(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "26378:   tvbuff_t *parameter_tvb=NULL;",
          "26379:   proto_tree *subtree;",
          "",
          "[Removed Lines]",
          "26377: #line 577 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "26400: #line 577 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "26509: static int",
          "26510: dissect_nbap_IB_Type(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "26512:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "26513:                                      26, &ib_type, TRUE, 15, NULL);",
          "",
          "[Removed Lines]",
          "26511: #line 564 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "26534: #line 564 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "28100: static int",
          "28101: dissect_nbap_NodeB_CommunicationContextID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "28104: nbap_com_context_id_t *cur_val;",
          "",
          "[Removed Lines]",
          "28102: #line 2133 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "28125: #line 2153 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "28665: static int",
          "28666: dissect_nbap_T_dCH_id(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "28669:   offset = dissect_nbap_DCH_ID(tvb, offset, actx, tree, hf_index);",
          "",
          "[Removed Lines]",
          "28667: #line 1162 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "28690: #line 1162 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "28687: static int",
          "28688: dissect_nbap_RL_Specific_DCH_Info_Item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "28690: address     dst_addr, null_addr;",
          "28691: conversation_t *conversation = NULL;",
          "28692: umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "",
          "[Removed Lines]",
          "28689: #line 1167 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "28712: #line 1167 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "28765:                 i = dch_id;",
          "28767:                 while(nbap_dch_chnl_info[i].next_dch != 0){",
          "28770:                     i = nbap_dch_chnl_info[i].next_dch;",
          "28771:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "",
          "[Removed Lines]",
          "28766:                 umts_fp_conversation_info->dchs_in_flow_list[0] = dch_id;",
          "",
          "[Added Lines]",
          "28789:                 umts_fp_conversation_info->dch_ids_in_flow_list[0] = dch_id;",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "28789:                 }",
          "28790:                 umts_fp_conversation_info->num_dch_in_flow++;",
          "28792:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "28793:             }",
          "",
          "[Removed Lines]",
          "28791:                 umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "[Added Lines]",
          "28814:                 umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "28832: static int",
          "28833: dissect_nbap_RL_Specific_E_DCH_Information_Item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "28835: address     dst_addr, null_addr;",
          "28836: conversation_t *conversation;",
          "28837: umts_fp_conversation_info_t *umts_fp_conversation_info = NULL;",
          "",
          "[Removed Lines]",
          "28834: #line 1282 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "28857: #line 1282 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "29876: static int",
          "29877: dissect_nbap_Segment_Type(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "29879:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "29880:                                      7, &segment_type, TRUE, 0, NULL);",
          "",
          "[Removed Lines]",
          "29878: #line 567 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "29901: #line 567 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "32209: static int",
          "32210: dissect_nbap_CommonTransportChannelSetupRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "32212: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonTransportChannelSetupRequest(FDD) \");",
          "32214: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "32211: #line 149 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "32234: #line 149 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "32399: static int",
          "32400: dissect_nbap_FACH_ParametersItem_CTCH_SetupRqstFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "32402: address     dst_addr, null_addr;",
          "32403: conversation_t *conversation;",
          "",
          "[Removed Lines]",
          "32401: #line 960 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "32424: #line 960 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "32474:                 i = commonphysicalchannelid;",
          "32476:                 while(nbap_dch_chnl_info[i].next_dch != 0){",
          "32477:                     i = nbap_dch_chnl_info[i].next_dch;",
          "32478:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "32481:                     umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_ul_chans = num_tf = nbap_dch_chnl_info[i].num_ul_chans;",
          "32482:                     for (j = 0; j < num_tf; j++) {",
          "",
          "[Removed Lines]",
          "32475:                 umts_fp_conversation_info->dchs_in_flow_list[0] = commonphysicalchannelid;",
          "32479:                     umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "[Added Lines]",
          "32498:                 umts_fp_conversation_info->dch_ids_in_flow_list[0] = commonphysicalchannelid;",
          "32502:                     umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "32492:                     }",
          "32493:                 }",
          "32494:                 umts_fp_conversation_info->num_dch_in_flow++;",
          "32496:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "32497:             }",
          "",
          "[Removed Lines]",
          "32495:                 umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "[Added Lines]",
          "32518:                 umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "32522: static int",
          "32523: dissect_nbap_T_transportFormatSet(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "32525:     transportFormatSet_type = NBAP_PCH;",
          "32526:     nbap_dch_chnl_info[commontransportchannelid].num_dl_chans = 0;",
          "32527:     nbap_dch_chnl_info[commontransportchannelid].num_ul_chans = 0;",
          "",
          "[Removed Lines]",
          "32524: #line 1084 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "32547: #line 1084 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "32567: static int",
          "32568: dissect_nbap_PCH_ParametersItem_CTCH_SetupRqstFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "32571: address     dst_addr, null_addr;",
          "32572: conversation_t *conversation;",
          "",
          "[Removed Lines]",
          "32569: #line 845 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "32592: #line 845 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "32650:                 nbap_debug(\"    commontransportchannelid %u next ch %u\",commontransportchannelid, nbap_dch_chnl_info[i].next_dch);",
          "32653:                 while(nbap_dch_chnl_info[i].next_dch != 0){",
          "32654:                     i = nbap_dch_chnl_info[i].next_dch;",
          "32655:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "32658:                     umts_fp_conversation_info->fp_dch_channel_info[umts_fp_conversation_info->num_dch_in_flow].num_ul_chans = num_tf = nbap_dch_chnl_info[i].num_ul_chans;",
          "32659:                     for (j = 0; j < num_tf; j++) {",
          "",
          "[Removed Lines]",
          "32652:                 umts_fp_conversation_info->dchs_in_flow_list[0] = commontransportchannelid;",
          "32656:                     umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "[Added Lines]",
          "32675:                 umts_fp_conversation_info->dch_ids_in_flow_list[0] = commontransportchannelid;",
          "32679:                     umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "32673:                 nbap_debug(\"    num_dch_in_flow %u\", umts_fp_conversation_info->num_dch_in_flow);",
          "32676:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "32678:                 nbap_debug(\"Frame %u PCH-ParametersItem-CTCH-SetupRqstFDD End\",",
          "",
          "[Removed Lines]",
          "32675:                 umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "[Added Lines]",
          "32698:                 umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "32718: static int",
          "32719: dissect_nbap_RACH_ParametersItem_CTCH_SetupRqstFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "32721: address     dst_addr, null_addr;",
          "32722: conversation_t *conversation;",
          "32723: fp_rach_channel_info_t* fp_rach_channel_info;",
          "",
          "[Removed Lines]",
          "32720: #line 749 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "32743: #line 749 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "32789:                     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_num_tbs[j];",
          "32790:                 }",
          "32793:                 umts_fp_conversation_info->num_dch_in_flow=1;",
          "32794:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "32795:             }",
          "",
          "[Removed Lines]",
          "32792:                 umts_fp_conversation_info->dchs_in_flow_list[0] = commonphysicalchannelid;",
          "",
          "[Added Lines]",
          "32815:                 umts_fp_conversation_info->dch_ids_in_flow_list[0] = commonphysicalchannelid;",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "33504: static int",
          "33505: dissect_nbap_CommonTransportChannelSetupResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "33507: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonTransportChannelSetupResponse \");",
          "33509: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "33506: #line 155 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "33529: #line 155 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "33539: static int",
          "33540: dissect_nbap_CommonTransportChannelSetupFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "33542: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonTransportChannelSetupFailure \");",
          "33544: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "33541: #line 161 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "33564: #line 161 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "34259: static int",
          "34260: dissect_nbap_UnblockResourceIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "34262: col_set_str(actx->pinfo->cinfo, COL_INFO,\"UnblockResourceIndication \");",
          "34264: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "34261: #line 522 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "34284: #line 522 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "34280: static int",
          "34281: dissect_nbap_AuditRequiredIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "34283: col_set_str(actx->pinfo->cinfo, COL_INFO,\"AuditRequiredIndication \");",
          "34285: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "34282: #line 426 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "34305: #line 426 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "34301: static int",
          "34302: dissect_nbap_AuditRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "34304: col_set_str(actx->pinfo->cinfo, COL_INFO,\"AuditRequest \");",
          "34306: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "34303: #line 179 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "34326: #line 179 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "34322: static int",
          "34323: dissect_nbap_AuditResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "34325: col_set_str(actx->pinfo->cinfo, COL_INFO,\"AuditResponse \");",
          "34327: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "34324: #line 185 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "34347: #line 185 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "34916: static int",
          "34917: dissect_nbap_AuditFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "34919: col_set_str(actx->pinfo->cinfo, COL_INFO,\"AuditFailure \");",
          "34921: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "34918: #line 191 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "34941: #line 191 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "34938: static int",
          "34939: dissect_nbap_CommonMeasurementInitiationRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "34941: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementInitiationRequest \");",
          "34943: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "34940: #line 259 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "34963: #line 259 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "35056: static int",
          "35057: dissect_nbap_CommonMeasurementInitiationResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35059: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementInitiationResponse \");",
          "35061: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35058: #line 265 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35081: #line 265 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "35172: static int",
          "35173: dissect_nbap_CommonMeasurementInitiationFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35175: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementInitiationFailure \");",
          "35177: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35174: #line 271 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35197: #line 271 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "35193: static int",
          "35194: dissect_nbap_CommonMeasurementReport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35196: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementReport \");",
          "35198: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35195: #line 432 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35218: #line 432 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "35309: static int",
          "35310: dissect_nbap_CommonMeasurementTerminationRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35312: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementTerminationRequest \");",
          "35314: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "35311: #line 438 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35334: #line 438 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "35330: static int",
          "35331: dissect_nbap_CommonMeasurementFailureIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35333: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementFailureIndication \");",
          "35335: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35332: #line 444 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35355: #line 444 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "35351: static int",
          "35352: dissect_nbap_CellSetupRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35354: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CellSetupRequest(FDD) \");",
          "35356: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "35353: #line 121 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35376: #line 121 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "35883: static int",
          "35884: dissect_nbap_CellSetupResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35886: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CellSetupResponse \");",
          "35888: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35885: #line 127 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35908: #line 127 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "35904: static int",
          "35905: dissect_nbap_CellSetupFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35907: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CellSetupFailure \");",
          "35909: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35906: #line 133 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35929: #line 133 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "36447: static int",
          "36448: dissect_nbap_ResourceStatusIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "36450: col_set_str(actx->pinfo->cinfo, COL_INFO,\"ResourceStatusIndication \");",
          "36452: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "36449: #line 420 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "36472: #line 420 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "37205: static int",
          "37206: dissect_nbap_SystemInformationUpdateRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "37208: col_set_str(actx->pinfo->cinfo, COL_INFO,\"SystemInformationUpdateRequest \");",
          "37210: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "37207: #line 238 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "37230: #line 238 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "37276: static int",
          "37277: dissect_nbap_MIB_SB_SIB_InformationItem_SystemInfoUpdateRqst(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "37281:     segment_type = 0;",
          "",
          "[Removed Lines]",
          "37278: #line 570 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "37301: #line 570 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "37344: static int",
          "37345: dissect_nbap_SystemInformationUpdateResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "37347: col_set_str(actx->pinfo->cinfo, COL_INFO,\"SystemInformationUpdateResponse \");",
          "37349: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "37346: #line 244 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "37369: #line 244 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "37365: static int",
          "37366: dissect_nbap_SystemInformationUpdateFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "37368: col_set_str(actx->pinfo->cinfo, COL_INFO,\"SystemInformationUpdateFailure \");",
          "37370: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "37367: #line 250 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "37390: #line 250 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "37387: static int",
          "37388: dissect_nbap_RadioLinkSetupRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "37391:     g_nbap_msg_info_for_fp.ProcedureCode = ProcedureCode;",
          "37392:     g_nbap_msg_info_for_fp.ddMode = ddMode;",
          "",
          "[Removed Lines]",
          "37389: #line 201 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "37412: #line 201 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "37870: static int",
          "37871: dissect_nbap_RadioLinkSetupResponseFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "37874:     g_nbap_msg_info_for_fp.ProcedureCode = ProcedureCode;",
          "37875:     g_nbap_msg_info_for_fp.ddMode = ddMode;",
          "",
          "[Removed Lines]",
          "37872: #line 214 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "37895: #line 214 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "38096: static int",
          "38097: dissect_nbap_RadioLinkSetupFailureFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "38099: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkSetupFailure(FDD) \");",
          "38101: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "38098: #line 227 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "38121: #line 227 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "38381: static int",
          "38382: dissect_nbap_RadioLinkAdditionRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "38384: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkAdditionRequest(FDD) \");",
          "",
          "[Removed Lines]",
          "38383: #line 277 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "38406: #line 277 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "38753: static int",
          "38754: dissect_nbap_RadioLinkAdditionResponseFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "38756: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkAdditionResponse(FDD) \");",
          "",
          "[Removed Lines]",
          "38755: #line 282 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "38778: #line 282 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "39029: static int",
          "39030: dissect_nbap_RadioLinkAdditionFailureFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "39032: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkAdditionRequest(FDD) \");",
          "",
          "[Removed Lines]",
          "39031: #line 288 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "39054: #line 288 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "39314: static int",
          "39315: dissect_nbap_RadioLinkReconfigurationPrepareFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "39317:     col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationPrepare(FDD) \");",
          "39319:     actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "39316: #line 315 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "39339: #line 315 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "40937: static int",
          "40938: dissect_nbap_RadioLinkReconfigurationReady(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "40940: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationReady \");",
          "40942: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "40939: #line 326 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "40962: #line 326 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "41019: static int",
          "41020: dissect_nbap_RadioLinkReconfigurationFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41022: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationFailure \");",
          "41024: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "41021: #line 333 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41044: #line 333 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "41128: static int",
          "41129: dissect_nbap_RadioLinkReconfigurationCommit(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41131: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationCommit \");",
          "41133: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "41130: #line 450 \"./asn1/nbap/nbap.cnf\"",
          "41136: #line 2182 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41153: #line 450 \"./asn1/Nbap/nbap.cnf\"",
          "41159: #line 2205 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "41158: static int",
          "41159: dissect_nbap_RadioLinkReconfigurationCancel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41161: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationCancel \");",
          "41163: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "41160: #line 456 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41183: #line 456 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "41179: static int",
          "41180: dissect_nbap_RadioLinkReconfigurationRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41182: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationRequestFDD(FDD) \");",
          "41184: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "41181: #line 344 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41204: #line 344 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "41636: static int",
          "41637: dissect_nbap_RadioLinkReconfigurationResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41639: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationResponse \");",
          "",
          "[Removed Lines]",
          "41638: #line 350 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41661: #line 350 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "41697: static int",
          "41698: dissect_nbap_RadioLinkDeletionRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41700: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkDeletionRequest \");",
          "41702: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "41699: #line 301 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41722: #line 301 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "41748: static int",
          "41749: dissect_nbap_RadioLinkDeletionResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41751: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkDeletionResponse \");",
          "41753: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "41750: #line 308 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41773: #line 308 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "41770: static int",
          "41771: dissect_nbap_DL_PowerControlRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41773: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DL-PowerControlRequest \");",
          "41775: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "41772: #line 504 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41795: #line 504 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "41821: static int",
          "41822: dissect_nbap_DL_PowerTimeslotControlRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41824: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DL-PowerTimeslotControlRequest \");",
          "41826: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "41823: #line 510 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41846: #line 510 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "41842: static int",
          "41843: dissect_nbap_DedicatedMeasurementInitiationRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41845: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementInitiationRequest \");",
          "41847: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "41844: #line 366 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41867: #line 366 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "42038: static int",
          "42039: dissect_nbap_DedicatedMeasurementInitiationResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42041: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementInitiationResponse \");",
          "42043: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "42040: #line 372 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42063: #line 372 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "42343: static int",
          "42344: dissect_nbap_DedicatedMeasurementInitiationFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42346: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementInitiationFailure \");",
          "42348: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "42345: #line 379 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42368: #line 379 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 136 ---",
          "[Context before]",
          "42365: static int",
          "42366: dissect_nbap_DedicatedMeasurementReport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42368: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementReport \");",
          "42370: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "42367: #line 484 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42390: #line 484 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 137 ---",
          "[Context before]",
          "42548: static int",
          "42549: dissect_nbap_DedicatedMeasurementTerminationRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42551: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementTerminationRequest \");",
          "42553: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "42550: #line 491 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42573: #line 491 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 138 ---",
          "[Context before]",
          "42569: static int",
          "42570: dissect_nbap_DedicatedMeasurementFailureIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42572: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementFailureIndication \");",
          "42574: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "42571: #line 497 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42594: #line 497 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 139 ---",
          "[Context before]",
          "42591: static int",
          "42592: dissect_nbap_RadioLinkFailureIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42594: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkFailureIndication \");",
          "42596: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "42593: #line 462 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42616: #line 462 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 140 ---",
          "[Context before]",
          "42773: static int",
          "42774: dissect_nbap_RadioLinkPreemptionRequiredIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42776: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkPreemptionRequiredIndication \");",
          "42778: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "42775: #line 469 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42798: #line 469 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 141 ---",
          "[Context before]",
          "42824: static int",
          "42825: dissect_nbap_RadioLinkRestoreIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42827: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkRestoreIndication \");",
          "42829: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "42826: #line 476 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42849: #line 476 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 142 ---",
          "[Context before]",
          "43004: static int",
          "43005: dissect_nbap_CompressedModeCommand(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "43007: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CompressedModeCommand \");",
          "43009: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "43006: #line 516 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43029: #line 516 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 143 ---",
          "[Context before]",
          "43025: static int",
          "43026: dissect_nbap_ErrorIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "43028: col_set_str(actx->pinfo->cinfo, COL_INFO,\"ErrorIndication \");",
          "",
          "[Removed Lines]",
          "43027: #line 528 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43050: #line 528 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 144 ---",
          "[Context before]",
          "43045: static int",
          "43046: dissect_nbap_PrivateMessage(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "43048: col_set_str(actx->pinfo->cinfo, COL_INFO,\"PrivateMessage \");",
          "",
          "[Removed Lines]",
          "43047: #line 537 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43070: #line 537 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 145 ---",
          "[Context before]",
          "43064: static int",
          "43065: dissect_nbap_PhysicalSharedChannelReconfigurationRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "43067: col_set_str(actx->pinfo->cinfo, COL_INFO,\"PhysicalSharedChannelReconfigurationRequest(FDD) \");",
          "43069: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "43066: #line 386 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43089: #line 386 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 146 ---",
          "[Context before]",
          "45532: static int",
          "45533: dissect_nbap_PhysicalSharedChannelReconfigurationResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "45535: col_set_str(actx->pinfo->cinfo, COL_INFO,\"PhysicalSharedChannelReconfigurationResponse \");",
          "45537: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "45534: #line 392 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "45557: #line 392 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 147 ---",
          "[Context before]",
          "45583: static int",
          "45584: dissect_nbap_PhysicalSharedChannelReconfigurationFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "45586: col_set_str(actx->pinfo->cinfo, COL_INFO,\"PhysicalSharedChannelReconfigurationFailure \");",
          "45588: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "45585: #line 398 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "45608: #line 398 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 148 ---",
          "[Context before]",
          "47036: static int",
          "47037: dissect_nbap_BearerRearrangementIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "47039: col_set_str(actx->pinfo->cinfo, COL_INFO,\"BearerRearrangementIndication \");",
          "",
          "[Removed Lines]",
          "47038: #line 544 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "47061: #line 544 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 149 ---",
          "[Context before]",
          "47338: static int",
          "47339: dissect_nbap_RadioLinkParameterUpdateIndicationFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "47341: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkParameterUpdateIndication(FDD) \");",
          "47343: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "47340: #line 552 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "47363: #line 552 \"./asn1/Nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 150 ---",
          "[Context before]",
          "55237: static int dissect_ProtocolIEFieldValue(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "55238: {",
          "",
          "[Removed Lines]",
          "55235: #line 338 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "55258: #line 338 \"./asn1/Nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 151 ---",
          "[Context before]",
          "55265:  address  null_addr;",
          "55266:  conversation_t *conversation = NULL;",
          "55267:  umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "55268:  guint32 i;",
          "55270:  if (pinfo->fd->flags.visited){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55291:  fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "",
          "---------------",
          "--- Hunk 152 ---",
          "[Context before]",
          "55301:      copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &nbap_hsdsch_channel_info[i].crnc_address);",
          "55302:      umts_fp_conversation_info->crnc_port         = nbap_hsdsch_channel_info[i].crnc_port;",
          "55308:      umts_fp_conversation_info->num_dch_in_flow++;",
          "55312:      if(nbap_hsdsch_channel_info[i].entity == entity_not_specified ){",
          "55314:       expert_add_info(pinfo, NULL, &ei_nbap_hsdsch_entity_not_specified);",
          "55315:      }else{",
          "55317:      }",
          "55318:      umts_fp_conversation_info->rlc_mode = nbap_hsdsch_channel_info[i].rlc_mode;",
          "55319:      set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "",
          "[Removed Lines]",
          "55309:      umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow -1] = i;",
          "55316:       umts_fp_conversation_info->hsdsch_entity = (enum fp_hsdsch_entity)nbap_hsdsch_channel_info[i].entity;",
          "",
          "[Added Lines]",
          "55328:      fp_hsdsch_channel_info = wmem_new0(wmem_file_scope(), fp_hsdsch_channel_info_t);",
          "55329:      umts_fp_conversation_info->channel_specific_info = (void*)fp_hsdsch_channel_info;",
          "55335:      umts_fp_conversation_info->dch_ids_in_flow_list[umts_fp_conversation_info->num_dch_in_flow -1] = i;",
          "55342:       fp_hsdsch_channel_info->hsdsch_entity = (enum fp_hsdsch_entity)nbap_hsdsch_channel_info[i].entity;",
          "",
          "---------------",
          "--- Hunk 153 ---",
          "[Context before]",
          "55385:   NULL, HFILL }},",
          "55389:     { &hf_nbap_ActivationInformation_PDU,",
          "55390:       { \"ActivationInformation\", \"nbap.ActivationInformation\",",
          "55391:         FT_UINT32, BASE_DEC, NULL, 0,",
          "",
          "[Removed Lines]",
          "55388: #line 1 \"./asn1/nbap/packet-nbap-hfarr.c\"",
          "",
          "[Added Lines]",
          "55414: #line 1 \"./asn1/Nbap/packet-nbap-hfarr.c\"",
          "",
          "---------------",
          "--- Hunk 154 ---",
          "[Context before]",
          "68548:         NULL, HFILL }},",
          "68552:  };",
          "",
          "[Removed Lines]",
          "68551: #line 489 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "68577: #line 492 \"./asn1/Nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 155 ---",
          "[Context before]",
          "68559:   &ett_nbap_ib_sg_data,",
          "68563:     &ett_nbap_PrivateIE_ID,",
          "68564:     &ett_nbap_ProcedureID,",
          "68565:     &ett_nbap_TransactionID,",
          "",
          "[Removed Lines]",
          "68562: #line 1 \"./asn1/nbap/packet-nbap-ettarr.c\"",
          "",
          "[Added Lines]",
          "68588: #line 1 \"./asn1/Nbap/packet-nbap-ettarr.c\"",
          "",
          "---------------",
          "--- Hunk 156 ---",
          "[Context before]",
          "70188:     &ett_nbap_Outcome,",
          "70192:  };",
          "70194:  static ei_register_info ei[] = {",
          "",
          "[Removed Lines]",
          "70191: #line 498 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "70217: #line 501 \"./asn1/Nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 157 ---",
          "[Context before]",
          "70248:   dissector_add_uint(\"nbap.ies\", id_TUTRANGPSMeasurementValueInformation, create_dissector_handle(dissect_TUTRANGPSMeasurementValueInformation_PDU, proto_nbap));",
          "70249:   dissector_add_uint(\"nbap.ies\", id_SFNSFNMeasurementValueInformation, create_dissector_handle(dissect_SFNSFNMeasurementValueInformation_PDU, proto_nbap));",
          "70250:   dissector_add_uint(\"nbap.ies\", id_TransmittedCarrierPowerOfAllCodesNotUsedForHSTransmission, create_dissector_handle(dissect_TransmittedCarrierPowerOfAllCodesNotUsedForHSTransmissionValue_PDU, proto_nbap));",
          "",
          "[Removed Lines]",
          "70247: #line 1 \"./asn1/nbap/packet-nbap-dis-tab.c\"",
          "",
          "[Added Lines]",
          "70273: #line 1 \"./asn1/Nbap/packet-nbap-dis-tab.c\"",
          "",
          "---------------",
          "--- Hunk 158 ---",
          "[Context before]",
          "71343: }",
          "",
          "[Removed Lines]",
          "71342: #line 552 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "71368: #line 555 \"./asn1/Nbap/packet-nbap-template.c\"",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-nbap.h||epan/dissectors/packet-nbap.h": [
          "File: epan/dissectors/packet-nbap.h -> epan/dissectors/packet-nbap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "8: #line 1 \"./asn1/nbap/packet-nbap-template.h\"",
          "",
          "[Added Lines]",
          "8: #line 1 \"./asn1/Nbap/packet-nbap-template.h\"",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-umts_fp.c||epan/dissectors/packet-umts_fp.c": [
          "File: epan/dissectors/packet-umts_fp.c -> epan/dissectors/packet-umts_fp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4134:     }",
          "4135:     umts_fp_conversation_info->channel = CHANNEL_DCH;",
          "4136:     umts_fp_conversation_info->num_dch_in_flow = 1;",
          "4138:     umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = 1;",
          "4139:     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[1] = 1;",
          "4140:     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[1] = 148;",
          "",
          "[Removed Lines]",
          "4137:     umts_fp_conversation_info->dchs_in_flow_list[0] = 31;",
          "",
          "[Added Lines]",
          "4137:     umts_fp_conversation_info->dch_ids_in_flow_list[0] = 31;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4533: {",
          "4534:     conversation_t   *p_conv;",
          "4535:     umts_fp_conversation_info_t* umts_fp_conversation_info;",
          "4536:     struct fp_info *p_fp_info;",
          "4537:     guint32 length;",
          "4538:     guint8 frame_type;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4536:     fp_hsdsch_channel_info_t* fp_hsdsch_channel_info;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4553:         umts_fp_conversation_info = (umts_fp_conversation_info_t *)conversation_get_proto_data(p_conv, proto_fp);",
          "4554:         if (umts_fp_conversation_info) {",
          "4556:                 conversation_set_dissector(p_conv, fp_handle);",
          "4557:                 dissect_fp(tvb, pinfo, tree, data);",
          "4558:                 return TRUE;",
          "",
          "[Removed Lines]",
          "4555:             if (umts_fp_conversation_info->channel == CHANNEL_HSDSCH && umts_fp_conversation_info->hsdsch_entity == hs) {",
          "",
          "[Added Lines]",
          "4556:             fp_hsdsch_channel_info = (fp_hsdsch_channel_info_t*)umts_fp_conversation_info->channel_specific_info;",
          "4557:             if (umts_fp_conversation_info->channel == CHANNEL_HSDSCH && fp_hsdsch_channel_info->hsdsch_entity == hs) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4646:     copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &pinfo->src);",
          "4647:     umts_fp_conversation_info->crnc_port = pinfo->srcport;",
          "4648:     umts_fp_conversation_info->channel = CHANNEL_HSDSCH;",
          "4651:     set_both_sides_umts_fp_conv_data(pinfo, umts_fp_conversation_info);",
          "4652:     conversation_set_dissector(find_or_create_conversation(pinfo), fp_handle);",
          "4653:     dissect_fp(tvb, pinfo, tree, data);",
          "",
          "[Removed Lines]",
          "4649:     umts_fp_conversation_info->hsdsch_entity = hs;",
          "4650:     umts_fp_conversation_info->hsdsch_macdflow_id = 0;",
          "",
          "[Added Lines]",
          "4651:     fp_hsdsch_channel_info = wmem_new0(wmem_file_scope(), fp_hsdsch_channel_info_t);",
          "4652:     fp_hsdsch_channel_info->hsdsch_entity = hs;",
          "4653:     fp_hsdsch_channel_info->hsdsch_macdflow_id = 0;",
          "4654:     umts_fp_conversation_info->channel_specific_info = (void*)fp_hsdsch_channel_info;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4658: {",
          "4659:     conversation_t   *p_conv;",
          "4660:     umts_fp_conversation_info_t* umts_fp_conversation_info;",
          "4661:     struct fp_info *p_fp_info;",
          "4662:     guint32 length;",
          "4663:     guint8 frame_type;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4665:     fp_hsdsch_channel_info_t* fp_hsdsch_channel_info;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4681:         umts_fp_conversation_info = (umts_fp_conversation_info_t *)conversation_get_proto_data(p_conv, proto_fp);",
          "4682:         if (umts_fp_conversation_info) {",
          "4684:                 conversation_set_dissector(p_conv, fp_handle);",
          "4685:                 dissect_fp(tvb, pinfo, tree, data);",
          "4686:                 return TRUE;",
          "",
          "[Removed Lines]",
          "4683:             if (umts_fp_conversation_info->channel == CHANNEL_HSDSCH && umts_fp_conversation_info->hsdsch_entity == ehs) {",
          "",
          "[Added Lines]",
          "4688:             fp_hsdsch_channel_info = (fp_hsdsch_channel_info_t*)umts_fp_conversation_info->channel_specific_info;",
          "4689:             if (umts_fp_conversation_info->channel == CHANNEL_HSDSCH && fp_hsdsch_channel_info->hsdsch_entity == ehs) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4814:     copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &pinfo->src);",
          "4815:     umts_fp_conversation_info->crnc_port = pinfo->srcport;",
          "4816:     umts_fp_conversation_info->channel = CHANNEL_HSDSCH;",
          "4819:     set_both_sides_umts_fp_conv_data(pinfo, umts_fp_conversation_info);",
          "4820:     conversation_set_dissector(find_or_create_conversation(pinfo), fp_handle);",
          "4821:     dissect_fp(tvb, pinfo, tree, data);",
          "",
          "[Removed Lines]",
          "4817:     umts_fp_conversation_info->hsdsch_entity = ehs;",
          "4818:     umts_fp_conversation_info->hsdsch_macdflow_id = 1;",
          "",
          "[Added Lines]",
          "4823:     fp_hsdsch_channel_info = wmem_new0(wmem_file_scope(), fp_hsdsch_channel_info_t);",
          "4824:     fp_hsdsch_channel_info->hsdsch_entity = ehs;",
          "4825:     fp_hsdsch_channel_info->hsdsch_macdflow_id = 1;",
          "4826:     umts_fp_conversation_info->channel_specific_info = (void*)fp_hsdsch_channel_info;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4918:     guint8 fake_lchid=0;",
          "4919:     gint *cur_val=NULL;",
          "4920:     guint32 user_identity;",
          "4923:     fpi = wmem_new0(wmem_file_scope(), fp_info);",
          "4924:     p_add_proto_data(wmem_file_scope(), pinfo, proto_fp, 0, fpi);",
          "",
          "[Removed Lines]",
          "4921:     fp_pch_channel_info_t *fp_pch_channel_info;",
          "",
          "[Added Lines]",
          "4929:     fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "4930:     fp_edch_channel_info_t* fp_edch_channel_info = NULL;",
          "4931:     fp_pch_channel_info_t *fp_pch_channel_info = NULL;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4958:     switch (fpi->channel) {",
          "4961:             macinf = wmem_new0(wmem_file_scope(), umts_mac_info);",
          "4966:             p_add_proto_data(wmem_file_scope(), pinfo, proto_umts_mac, 0, macinf);",
          "4968:             rlcinf = wmem_new0(wmem_file_scope(), rlc_info);",
          "4973:             if (fpi->hsdsch_entity == hs /*&& !rlc_is_ciphered(pinfo)*/) {",
          "4974:                 for (i=0; i<MAX_NUM_HSDHSCH_MACDFLOW; i++) {",
          "4977:                         j = 1 << i;",
          "4978:                         fpi->hsdhsch_macfdlow_is_mux[i] = j & *cur_val;",
          "4979:                     } else {",
          "",
          "[Removed Lines]",
          "4960:             fpi->hsdsch_entity = p_conv_data->hsdsch_entity;",
          "4962:             fpi->hsdsch_macflowd_id = p_conv_data->hsdsch_macdflow_id;",
          "4964:             macinf->lchid[0] = p_conv_data->hsdsch_macdflow_id;",
          "4971:             rlcinf->mode[0] = hsdsch_macdflow_id_rlc_map[p_conv_data->hsdsch_macdflow_id];",
          "4976:                     if ((cur_val=(gint *)g_tree_lookup(hsdsch_muxed_flows, GINT_TO_POINTER((gint)p_conv_data->hrnti))) != NULL) {",
          "",
          "[Added Lines]",
          "4970:             fp_hsdsch_channel_info = (fp_hsdsch_channel_info_t*)p_conv_data->channel_specific_info;",
          "4971:             fpi->hsdsch_entity = fp_hsdsch_channel_info->hsdsch_entity;",
          "4973:             fpi->hsdsch_macflowd_id = fp_hsdsch_channel_info->hsdsch_macdflow_id;",
          "4975:             macinf->lchid[0] = fp_hsdsch_channel_info->hsdsch_macdflow_id;",
          "4981:             rlcinf->mode[0] = hsdsch_macdflow_id_rlc_map[fp_hsdsch_channel_info->hsdsch_macdflow_id];",
          "4986:                     if ((cur_val=(gint *)g_tree_lookup(hsdsch_muxed_flows, GINT_TO_POINTER((gint)fp_hsdsch_channel_info->hrnti))) != NULL) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5012:             return fpi;",
          "5014:         case CHANNEL_EDCH:",
          "5016:             macinf = wmem_new0(wmem_file_scope(), umts_mac_info);",
          "5017:             rlcinf = wmem_new0(wmem_file_scope(), rlc_info);",
          "5019:             for (i=0; i<fpi->no_ddi_entries; i++) {",
          "5026:             }",
          "",
          "[Removed Lines]",
          "5018:             fpi->no_ddi_entries = p_conv_data->no_ddi_entries;",
          "5027:             fpi->edch_type = p_conv_data->edch_type;",
          "",
          "[Added Lines]",
          "5025:             fp_edch_channel_info = (fp_edch_channel_info_t*)p_conv_data->channel_specific_info;",
          "5029:             fpi->no_ddi_entries = fp_edch_channel_info->no_ddi_entries;",
          "5038:             fpi->edch_type = fp_edch_channel_info->edch_type;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "5083:                 for (j=0; j < num_tbs && j+chan < MAX_MAC_FRAMES; j++) {",
          "5088:                     is_known_dcch_tf = (tfi == 1 && num_tbs == 1 && tb_size == 148);",
          "5092:                     if (is_known_dcch_tf || is_special_case_dch_24) {",
          "",
          "[Removed Lines]",
          "5085:                     macinf->trchid[j+chan] = p_conv_data->dchs_in_flow_list[chan];",
          "5090:                     is_special_case_dch_24 = (p_conv_data->dchs_in_flow_list[chan] == 24 && tb_size == 340);",
          "",
          "[Added Lines]",
          "5096:                     macinf->trchid[j+chan] = p_conv_data->dch_ids_in_flow_list[chan];",
          "5101:                     is_special_case_dch_24 = (p_conv_data->dch_ids_in_flow_list[chan] == 24 && tb_size == 340);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "5111:                         macinf->content[j+chan] = lchId_type_table[fake_lchid];",
          "5112:                         rlcinf->mode[j+chan] = lchId_rlc_map[fake_lchid];",
          "",
          "[Removed Lines]",
          "5110:                         fake_lchid = make_fake_lchid(pinfo, p_conv_data->dchs_in_flow_list[chan]);",
          "",
          "[Added Lines]",
          "5121:                         fake_lchid = make_fake_lchid(pinfo, p_conv_data->dch_ids_in_flow_list[chan]);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5380:                                  \"Unknown channel type\"));",
          "5381:     if (p_conv_data) {",
          "5382:         int i;",
          "5384:         for (i=1; i < p_conv_data->num_dch_in_flow; i++) {",
          "5386:         }",
          "5387:         col_append_fstr(pinfo->cinfo, COL_INFO, \") \");",
          "5388:     }",
          "",
          "[Removed Lines]",
          "5383:         col_append_fstr(pinfo->cinfo, COL_INFO, \"(%u\", p_conv_data->dchs_in_flow_list[0]);",
          "5385:             col_append_fstr(pinfo->cinfo, COL_INFO, \",%u\", p_conv_data->dchs_in_flow_list[i]);",
          "",
          "[Added Lines]",
          "5394:         col_append_fstr(pinfo->cinfo, COL_INFO, \"(%u\", p_conv_data->dch_ids_in_flow_list[0]);",
          "5396:             col_append_fstr(pinfo->cinfo, COL_INFO, \",%u\", p_conv_data->dch_ids_in_flow_list[i]);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5647:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = 1;",
          "5648:                 }",
          "5651:                 umts_fp_conversation_info->num_dch_in_flow=1;",
          "5652:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "5653:             default:",
          "",
          "[Removed Lines]",
          "5650:                 umts_fp_conversation_info->dchs_in_flow_list[0] = 1;",
          "",
          "[Added Lines]",
          "5661:                 umts_fp_conversation_info->dch_ids_in_flow_list[0] = 1;",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-umts_fp.h||epan/dissectors/packet-umts_fp.h": [
          "File: epan/dissectors/packet-umts_fp.h -> epan/dissectors/packet-umts_fp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #define CHANNEL_HSDSCH_COMMON_T3 20",
          "47: #define CHANNEL_EDCH_COMMON      21",
          "49: enum fp_interface_type",
          "50: {",
          "51:     IuB_Interface,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: #define MAX_FP_CHANS  64",
          "52: #define MAX_EDCH_DDIS 16",
          "53: #define MAX_NUM_HSDHSCH_MACDFLOW 8",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82: };",
          "142: typedef struct",
          "143: {",
          "144:     gint num_ul_chans;",
          "",
          "[Removed Lines]",
          "86: typedef struct paging_indications_info_t",
          "87: {",
          "88:     guint32 frame_number;",
          "89:     guint8* paging_indications_bitmap;",
          "90: } paging_indications_info_t;",
          "93: typedef struct fp_info",
          "94: {",
          "95:     enum fp_interface_type iface_type;",
          "96:     enum division_type     division;",
          "100:     gboolean is_uplink;",
          "103:     gint num_chans;",
          "104: #define MAX_FP_CHANS  64",
          "105:     gint chan_tf_size[MAX_FP_CHANS];",
          "106:     gint chan_num_tbs[MAX_FP_CHANS];",
          "108: #define MAX_EDCH_DDIS 16",
          "109:     gint   no_ddi_entries;",
          "110:     guint8 edch_ddi[MAX_EDCH_DDIS];",
          "111:     guint  edch_macd_pdu_size[MAX_EDCH_DDIS];",
          "120:     guint16 srcport, destport;",
          "123:     gint paging_indications;",
          "126:     paging_indications_info_t* current_paging_indications;",
          "129:     enum   fp_hsdsch_entity hsdsch_entity;",
          "130:     gint        hsdsch_macflowd_id;",
          "131: #define MAX_NUM_HSDHSCH_MACDFLOW        8",
          "132:     gboolean hsdhsch_macfdlow_is_mux[MAX_NUM_HSDHSCH_MACDFLOW];",
          "133:     enum   fp_link_type link_type;",
          "137: } fp_info;",
          "140: #define FP_maxNrOfTFs           32",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173: } fp_rach_channel_info_t;",
          "176: typedef struct fp_pch_channel_info_t",
          "177: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141: typedef struct paging_indications_info_t",
          "142: {",
          "143:     guint32 frame_number;",
          "144:     guint8* paging_indications_bitmap;",
          "145: } paging_indications_info_t;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "181:     paging_indications_info_t* last_paging_indication_info;",
          "182: } fp_pch_channel_info_t;",
          "184: typedef struct",
          "185: {",
          "186:     enum fp_interface_type iface_type;",
          "187:     enum division_type     division;",
          "191:     address crnc_address;",
          "192:     guint16 crnc_port;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161: typedef struct fp_edch_channel_info_t",
          "162: {",
          "163:     gint   no_ddi_entries;",
          "164:     guint8 edch_ddi[MAX_EDCH_DDIS];",
          "165:     guint  edch_macd_pdu_size[MAX_EDCH_DDIS];",
          "166:     guint8 edch_lchId[MAX_EDCH_DDIS];",
          "168: } fp_edch_channel_info_t;",
          "175: typedef struct fp_hsdsch_channel_info_t",
          "176: {",
          "177:     enum fp_hsdsch_entity hsdsch_entity;",
          "178:     guint8 common_macdflow_id;",
          "179:     guint8 hsdsch_macdflow_id;",
          "181: } fp_hsdsch_channel_info_t;",
          "192:     enum fp_rlc_mode rlc_mode;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "199:     gint num_dch_in_flow;",
          "206:     fp_dch_channel_info_t fp_dch_channel_info[FP_maxNrOfTFs];",
          "209:     gint   no_ddi_entries;",
          "210:     guint8 edch_ddi[MAX_EDCH_DDIS];",
          "211:     guint  edch_macd_pdu_size[MAX_EDCH_DDIS];",
          "231: void set_umts_fp_conv_data(conversation_t *conversation, umts_fp_conversation_info_t *umts_fp_conversation_info);",
          "",
          "[Removed Lines]",
          "200:     gint dchs_in_flow_list[FP_maxNrOfTFs];",
          "203:     enum fp_rlc_mode rlc_mode;",
          "212:     guint8 edch_lchId[MAX_EDCH_DDIS];",
          "216:     enum   fp_hsdsch_entity hsdsch_entity;",
          "217:     guint8 hsdsch_macdflow_id;",
          "219:     guint8 hsdsch_num_chans_per_flow[MAX_NUM_HSDHSCH_MACDFLOW];",
          "222:     guint8 common_macdflow_id;",
          "227:     guint32 cfn;",
          "228:     guint32 cfn_index;",
          "229: } umts_fp_conversation_info_t;",
          "",
          "[Added Lines]",
          "206:     gint dch_ids_in_flow_list[FP_maxNrOfTFs];",
          "212:     guint32 cfn;",
          "213:     guint32 cfn_index;",
          "215: } umts_fp_conversation_info_t;",
          "221: typedef struct fp_info",
          "222: {",
          "223:     enum fp_interface_type iface_type;",
          "224:     enum division_type     division;",
          "228:     gboolean is_uplink;",
          "231:     gint num_chans;",
          "232:     gint chan_tf_size[MAX_FP_CHANS];",
          "233:     gint chan_num_tbs[MAX_FP_CHANS];",
          "246:     guint16 srcport, destport;",
          "249:     gint paging_indications;",
          "252:     paging_indications_info_t* current_paging_indications;",
          "255:     enum   fp_hsdsch_entity hsdsch_entity;",
          "256:     gint        hsdsch_macflowd_id;",
          "257:     gboolean hsdhsch_macfdlow_is_mux[MAX_NUM_HSDHSCH_MACDFLOW];",
          "258:     enum   fp_link_type link_type;",
          "262: } fp_info;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f9990b7657332daad0680107d5230e18437f1da",
      "candidate_info": {
        "commit_hash": "1f9990b7657332daad0680107d5230e18437f1da",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/1f9990b7657332daad0680107d5230e18437f1da",
        "files": [
          "epan/dissectors/asn1/nbap/nbap.cnf",
          "epan/dissectors/asn1/nbap/packet-nbap-template.c",
          "epan/dissectors/packet-nbap.c"
        ],
        "message": "NBAP: Refactor information storing per-packet\n\nMigrating from static variables to a single struct for\ninformation 'carried' between different field in a NBAP packet.\n\nBug: 13879\nBug: 13712\nChange-Id: Ie35619d64c4b9a3d5459d528788f74f952e75c11\nReviewed-on: https://code.wireshark.org/review/22902\nPetri-Dish: Anders Broman <a.broman58@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/asn1/nbap/nbap.cnf||epan/dissectors/asn1/nbap/nbap.cnf",
          "epan/dissectors/asn1/nbap/packet-nbap-template.c||epan/dissectors/asn1/nbap/packet-nbap-template.c",
          "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/asn1/nbap/nbap.cnf||epan/dissectors/asn1/nbap/nbap.cnf",
            "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c"
          ],
          "candidate": [
            "epan/dissectors/asn1/nbap/nbap.cnf||epan/dissectors/asn1/nbap/nbap.cnf",
            "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/asn1/nbap/nbap.cnf||epan/dissectors/asn1/nbap/nbap.cnf": [
          "File: epan/dissectors/asn1/nbap/nbap.cnf -> epan/dissectors/asn1/nbap/nbap.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: ProtocolIE-ContainerPairList",
          "78: #.END",
          "82:   if (tree) {",
          "84:   }",
          "85: #.END",
          "",
          "[Removed Lines]",
          "80: #.FN_PARS ProtocolIE-ID  VAL_PTR = &ProtocolIE_ID",
          "81: #.FN_FTR ProtocolIE-ID",
          "83:     proto_item_append_text(proto_item_get_parent_nth(actx->created_item, 2), \": %s\", val_to_str_ext(ProtocolIE_ID, &nbap_ProtocolIE_ID_vals_ext, \"unknown (%d)\"));",
          "",
          "[Added Lines]",
          "80: #.FN_BODY ProtocolIE-ID  VAL_PTR = &protocol_ie_id",
          "81:   guint32 protocol_ie_id;",
          "82: %(DEFAULT_BODY)s",
          "85:     proto_item_append_text(proto_item_get_parent_nth(actx->created_item, 2), \": %%s\", val_to_str_ext(protocol_ie_id, &nbap_ProtocolIE_ID_vals_ext, \"unknown (%%d)\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89: #.FN_PARS ProtocolExtensionField/extensionValue  FN_VARIANT=_pdu_new  TYPE_REF_FN=dissect_ProtocolExtensionFieldExtensionValue",
          "95:                             \"unknown message\"));",
          "116: #.FN_PARS InitiatingMessage/value  FN_VARIANT=_pdu_new  TYPE_REF_FN=dissect_InitiatingMessageValue",
          "",
          "[Removed Lines]",
          "91: #.FN_PARS  ProcedureCode  VAL_PTR = &ProcedureCode",
          "92: #.FN_FTR ProcedureCode",
          "93:      col_add_fstr(actx->pinfo->cinfo, COL_INFO, \"%s \",",
          "94:                  val_to_str(ProcedureCode, nbap_ProcedureCode_vals,",
          "96: #.END",
          "97: #.FN_PARS ProcedureID/ddMode VAL_PTR = &ddMode",
          "99: #.FN_HDR ProcedureID",
          "100:   ProcedureCode = 0xFFFF;",
          "101:   ddMode = 0xFFFF;",
          "102:   ProcedureID = NULL;",
          "103: #.END",
          "105: #.FN_FTR ProcedureID",
          "106:   ProcedureID = wmem_strdup_printf(wmem_packet_scope(), \"%s/%s\",",
          "107:                                  val_to_str(ProcedureCode, VALS(nbap_ProcedureCode_vals), \"unknown(%u)\"),",
          "108:                                  val_to_str(ddMode, VALS(nbap_DdMode_vals), \"unknown(%u)\"));",
          "110: #.END",
          "112: #.FN_PARS TransactionID/shortTransActionId VAL_PTR = &TransactionID",
          "114: #.FN_PARS TransactionID/longTransActionId VAL_PTR = &TransactionID",
          "",
          "[Added Lines]",
          "93: #.FN_BODY ProcedureCode VAL_PTR = &procedure_code",
          "94:   guint32 procedure_code;",
          "95: %(DEFAULT_BODY)s",
          "96:   private_data_set_procedure_code(actx->pinfo, procedure_code);",
          "97:   col_add_fstr(actx->pinfo->cinfo, COL_INFO, \"%%s \",",
          "98:                  val_to_str(procedure_code, nbap_ProcedureCode_vals,",
          "101: #.FN_BODY ProcedureID/ddMode VAL_PTR = &dd_mode",
          "102:   guint32 dd_mode;",
          "103: %(DEFAULT_BODY)s",
          "104:   private_data_set_dd_mode(actx->pinfo, dd_mode);",
          "107: #.FN_BODY ProcedureID",
          "108:   ProcedureID = NULL;",
          "109: %(DEFAULT_BODY)s",
          "110:   ProcedureID = wmem_strdup_printf(wmem_packet_scope(), \"%%s/%%s\",",
          "111:                                  val_to_str(private_data_get_procedure_code(actx->pinfo), VALS(nbap_ProcedureCode_vals), \"unknown(%%u)\"),",
          "112:                                  val_to_str(private_data_get_dd_mode(actx->pinfo), VALS(nbap_DdMode_vals), \"unknown(%%u)\"));",
          "115: #.FN_BODY TransactionID/shortTransActionId VAL_PTR = &transaction_id",
          "116:   guint32 transaction_id;",
          "117: %(DEFAULT_BODY)s",
          "118:   private_data_set_transaction_id(actx->pinfo, transaction_id);",
          "120: #.FN_BODY TransactionID/longTransActionId VAL_PTR = &transaction_id",
          "121:   guint32 transaction_id;",
          "122: %(DEFAULT_BODY)s",
          "123:   private_data_set_transaction_id(actx->pinfo, transaction_id);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "175: address dst_addr;",
          "176: nbap_setup_conv_t *request_conv;",
          "177: conversation_t *conv;",
          "179: nbap_debug(\"Frame %%u CommonTransportChannel-InformationResponse Start\", actx->pinfo->num);",
          "184: %(DEFAULT_BODY)s",
          "187:     return offset;",
          "188:   }",
          "190:   set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "194:   if(request_conv == NULL){",
          "195:     return offset;",
          "",
          "[Removed Lines]",
          "181: transportLayerAddress_ipv4 = 0;",
          "182: BindingID_port = 0;",
          "186:   if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0){",
          "192:   request_conv = find_setup_conv(TransactionID, ddMode, commontransportchannelid);",
          "",
          "[Added Lines]",
          "187: guint32 transportLayerAddress_ipv4;",
          "188: guint16 bindingID;",
          "192: private_data_set_transportLayerAddress_ipv4(actx->pinfo, 0);",
          "193: private_data_set_binding_id_port(actx->pinfo, 0);",
          "197:   transportLayerAddress_ipv4 = private_data_get_transportLayerAddress_ipv4(actx->pinfo);",
          "198:   bindingID = private_data_get_binding_id_port(actx->pinfo);",
          "199:   if (actx->pinfo->fd->flags.visited || transportLayerAddress_ipv4 == 0 || bindingID == 0){",
          "205:   request_conv = find_setup_conv(private_data_get_transaction_id(actx->pinfo),private_data_get_dd_mode(actx->pinfo),private_data_get_common_transport_channel_id(actx->pinfo));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "198:   conv = request_conv->conv;",
          "199:   conversation_set_addr2(conv, &dst_addr);",
          "202:   delete_setup_conv(request_conv);",
          "203:   nbap_debug(\"    Frame %%u conversation setup frame: %%u %%s:%%u -> %%s:%%u\", actx->pinfo->num, conv->setup_frame,",
          "",
          "[Removed Lines]",
          "200:   conversation_set_port2(conv, BindingID_port);",
          "",
          "[Added Lines]",
          "213:   conversation_set_port2(conv, bindingID);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "240: # RadioLinkSetupRequestFDD",
          "241: #.FN_HDR RadioLinkSetupRequestFDD",
          "249:     col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkSetupRequest(FDD) \");",
          "251:     actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "243:     g_nbap_msg_info_for_fp.ProcedureCode = ProcedureCode;",
          "244:     g_nbap_msg_info_for_fp.ddMode = ddMode;",
          "245:     g_nbap_msg_info_for_fp.is_uplink = TRUE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "253: # RadioLinkSetupResponseFDD",
          "254: #.FN_HDR RadioLinkSetupResponseFDD",
          "262:     col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkSetupResponse(FDD) \");",
          "264:     actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "256:     g_nbap_msg_info_for_fp.ProcedureCode = ProcedureCode;",
          "257:     g_nbap_msg_info_for_fp.ddMode = ddMode;",
          "258:     g_nbap_msg_info_for_fp.is_uplink = FALSE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "356:     col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationPrepare(FDD) \");",
          "358:     actx->pinfo->link_dir=P2P_DIR_DL;",
          "365: # RadioLinkReconfigurationReady",
          "366: #.FN_HDR RadioLinkReconfigurationReady",
          "",
          "[Removed Lines]",
          "359:     g_nbap_msg_info_for_fp.ProcedureCode = ProcedureCode;",
          "360:     g_nbap_msg_info_for_fp.ddMode = ddMode;",
          "361:     g_nbap_msg_info_for_fp.is_uplink = TRUE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "602: # SecondaryULFrequencyUpdateIndication",
          "604: #.FN_BODY IB-Type VAL_PTR = &ib_type",
          "605: %(DEFAULT_BODY)s",
          "607: #.FN_BODY Segment-Type VAL_PTR = &segment_type",
          "608: %(DEFAULT_BODY)s",
          "610: #.FN_BODY MIB-SB-SIB-InformationItem-SystemInfoUpdateRqst",
          "615: %(DEFAULT_BODY)s",
          "617: #.FN_BODY IB-SG-DATA VAL_PTR = &parameter_tvb",
          "618:   tvbuff_t *parameter_tvb=NULL;",
          "619:   proto_tree *subtree;",
          "621: %(DEFAULT_BODY)s",
          "623:     if(!parameter_tvb)",
          "624:         return offset;",
          "625:     if((segment_type == 5 /*complete-SIB */)||(segment_type == 6 /*complete-SIB-short */)){",
          "626:         subtree = proto_item_add_subtree(actx->created_item, ett_nbap_ib_sg_data);",
          "627:     }else{",
          "628:         return offset;",
          "629:     }",
          "632:         case 0:",
          "634:             dissect_rrc_MasterInformationBlock_PDU(parameter_tvb, actx->pinfo, subtree, NULL);",
          "",
          "[Removed Lines]",
          "613:     segment_type = 0;",
          "631:     switch(ib_type){",
          "",
          "[Added Lines]",
          "601:   guint32 ib_type;",
          "603:   private_data_set_ib_type(actx->pinfo, ib_type);",
          "606:   guint32 segment_type;",
          "608:   private_data_set_segment_type(actx->pinfo, segment_type);",
          "613:     private_data_set_segment_type(actx->pinfo, 0);",
          "620:   guint32 segment_type;",
          "626:     segment_type = private_data_get_segment_type(actx->pinfo);",
          "633:     switch(private_data_get_ib_type(actx->pinfo)){",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "676:     if (tvb_len==4){",
          "678:          proto_tree_add_item(subtree, hf_nbap_transportLayerAddress_ipv4, parameter_tvb, 0, tvb_len, ENC_BIG_ENDIAN);",
          "680:     }",
          "681:     if (tvb_len==16){",
          "",
          "[Removed Lines]",
          "679:          transportLayerAddress_ipv4 = tvb_get_ipv4(parameter_tvb, 0);",
          "",
          "[Added Lines]",
          "681:          private_data_set_transportLayerAddress_ipv4(actx->pinfo, tvb_get_ipv4(parameter_tvb, 0));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "699:         nsap_tree = proto_item_add_subtree(item, ett_nbap_TransportLayerAddress_nsap);",
          "700:         if(tvb_get_ntoh24(parameter_tvb,0) == 0x350001){",
          "703:         }",
          "704:         dissect_nsap(nsap_tvb, 0, 20, nsap_tree);",
          "705:     }",
          "",
          "[Removed Lines]",
          "702:             transportLayerAddress_ipv4 = tvb_get_ipv4(parameter_tvb, 3);",
          "",
          "[Added Lines]",
          "704:             private_data_set_transportLayerAddress_ipv4(actx->pinfo, tvb_get_ipv4(parameter_tvb, 3));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "711: %(DEFAULT_BODY)s",
          "713:     if(payload_crc_value == 0){",
          "715:     }else{",
          "717:     }",
          "719: #.FN_BODY DCH-ID VAL_PTR = &t_dch_id",
          "728:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "729:                                                             0U, 255U, &dch_id, FALSE);",
          "739: #.FN_BODY DCH-ModifySpecificItem-FDD/dCH-ID",
          "741: %(DEFAULT_BODY)s",
          "744: #.FN_BODY CommonPhysicalChannelID VAL_PTR = &commonphysicalchannelid",
          "745: %(DEFAULT_BODY)s",
          "746: if(commonphysicalchannelid<maxNrOfDCHs)",
          "747:   nbap_dch_chnl_info[commonphysicalchannelid].next_dch = 0;",
          "749: #.FN_BODY CommonTransportChannelID VAL_PTR = &commontransportchannelid",
          "750: %(DEFAULT_BODY)s",
          "751: if(commontransportchannelid<maxNrOfDCHs)",
          "752:   nbap_dch_chnl_info[commontransportchannelid].next_dch = 0;",
          "754: #.FN_BODY E-DCH-MACdFlow-ID VAL_PTR = &e_dch_macdflow_id",
          "756: %(DEFAULT_BODY)s",
          "759: #.FN_BODY HSDSCH-MACdFlow-ID VAL_PTR = &hsdsch_macdflow_id",
          "760: %(DEFAULT_BODY)s",
          "762: DISSECTOR_ASSERT(num_items < maxNrOfMACdFlows+1);",
          "763: DISSECTOR_ASSERT(num_items > 0);",
          "765: hsdsch_macdflow_ids[num_items-1] = hsdsch_macdflow_id;",
          "767: #.FN_BODY BindingID VAL_PTR = &parameter_tvb",
          "",
          "[Removed Lines]",
          "714:         g_nbap_msg_info_for_fp.dch_crc_present = TRUE;",
          "716:         g_nbap_msg_info_for_fp.dch_crc_present = FALSE;",
          "720: #%(DEFAULT_BODY)s",
          "721: #   if(g_num_dch_in_flow>0)",
          "722: #       g_dch_ids_in_flow_list[g_num_dch_in_flow-1]=dch_id;",
          "723: #",
          "724: # Only get the DCH-ID in this particularcase",
          "725: #",
          "726: #.FN_BODY DCH-Specific-FDD-Item/dCH-ID",
          "731:     if(g_num_dch_in_flow>0){",
          "732:         g_dch_ids_in_flow_list[g_num_dch_in_flow-1]=dch_id;",
          "733:         nbap_dch_chnl_info[dch_id].next_dch = 0;",
          "734:         if(prev_dch_id != 0){",
          "735:             nbap_dch_chnl_info[prev_dch_id].next_dch = dch_id;",
          "736:         }",
          "737:     }",
          "742:     dch_id = t_dch_id;",
          "",
          "[Added Lines]",
          "716:         private_data_set_dch_crc_present(actx->pinfo, TRUE);",
          "718:         private_data_set_dch_crc_present(actx->pinfo, FALSE);",
          "722:   guint32 t_dch_id;",
          "723: %(DEFAULT_BODY)s",
          "724:   private_data_set_t_dch_id(actx->pinfo, t_dch_id);",
          "726: #.FN_BODY DCH-Specific-FDD-Item/dCH-ID",
          "727:   guint32 dch_id;",
          "728:   gint num_dch_in_flow;",
          "729:   nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "730:   nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "734:   num_dch_in_flow = private_data_get_num_dch_in_flow(actx->pinfo);",
          "735:   private_data_set_dch_id(actx->pinfo, dch_id);",
          "736:   if(num_dch_in_flow>0){",
          "737:       nbap_dch_chnl_info[dch_id].next_dch = 0;",
          "738:       if(private_data_get_prev_dch_id(actx->pinfo) != 0){",
          "739:           nbap_dch_chnl_info[private_data_get_prev_dch_id(actx->pinfo)].next_dch = dch_id;",
          "740:       }",
          "741:   }",
          "746:     private_data_set_dch_id(actx->pinfo, private_data_get_t_dch_id(actx->pinfo));",
          "749: guint32 commonphysicalchannelid;",
          "750: nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "751: nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "753: private_data_set_common_physical_channel_id(actx->pinfo, commonphysicalchannelid);",
          "758:   guint32 commontransportchannelid;",
          "759:   nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "760:   nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "762: private_data_set_common_transport_channel_id(actx->pinfo, commontransportchannelid);",
          "767:   guint32 e_dch_macdflow_id;",
          "769:   private_data_set_e_dch_macdflow_id(actx->pinfo, e_dch_macdflow_id);",
          "772:   guint32 hsdsch_macdflow_id;",
          "773:   guint num_items;",
          "774:   gint* hsdsch_macdflow_ids;",
          "776:   private_data_set_hsdsch_macdflow_id(actx->pinfo, hsdsch_macdflow_id);",
          "778:   num_items = private_data_get_num_items(actx->pinfo);",
          "782: hsdsch_macdflow_ids = private_data_get_hsdsch_macdflow_ids(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "776: # -- If the Binding ID includes a UDP port, the UDP port is included in octet 1 and 2.The first octet of",
          "777: # -- the UDP port field is included in the first octet of the Binding ID.",
          "778:   if(tvb_reported_length(parameter_tvb)>=2){",
          "781:   }",
          "783: #.FN_BODY UL-ScramblingCodeNumber VAL_PTR = &ul_scrambling_code",
          "784: %(DEFAULT_BODY)s",
          "785:   if(ul_scrambling_code != 0 && com_context_id != 0) {",
          "786:     wmem_tree_insert32(nbap_scrambling_code_crncc_map,ul_scrambling_code,GUINT_TO_POINTER(com_context_id));",
          "787:   }",
          "",
          "[Removed Lines]",
          "779:     BindingID_port = tvb_get_ntohs(parameter_tvb,0);",
          "780:     proto_item_append_text(actx->created_item, \" (%%u)\",BindingID_port);",
          "",
          "[Added Lines]",
          "797:     private_data_set_binding_id_port(actx->pinfo, tvb_get_ntohs(parameter_tvb,0));",
          "798:     proto_item_append_text(actx->created_item, \" (%%u)\",private_data_get_binding_id_port(actx->pinfo));",
          "802:   guint32 ul_scrambling_code;",
          "803:   guint32 com_context_id;",
          "805:   private_data_set_ul_scrambling_code(actx->pinfo, ul_scrambling_code);",
          "806:   com_context_id = private_data_get_com_context_id(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "792: fp_rach_channel_info_t* fp_rach_channel_info;",
          "793: umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "794: int j, num_tf;",
          "800: %(DEFAULT_BODY)s",
          "804:     return offset;",
          "805:   }",
          "806:   clear_address(&null_addr);",
          "808:   set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "812:   conversation_set_dissector(conversation, fp_handle);",
          "",
          "[Removed Lines]",
          "796: transportLayerAddress_ipv4 = 0;",
          "797: BindingID_port = 0;",
          "798: transportFormatSet_type = NBAP_CPCH;",
          "802:   if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "803:   {",
          "810:   conversation = conversation_new(actx->pinfo->num, &dst_addr, &null_addr, PT_UDP,BindingID_port, 0, NO_ADDR2|NO_PORT2);",
          "",
          "[Added Lines]",
          "817: guint32 transportLayerAddress_ipv4;",
          "818: guint16 bindingID;",
          "819: guint32 common_physical_channel_id;",
          "820: nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "821: nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "823: private_data_set_transportLayerAddress_ipv4(actx->pinfo, 0);",
          "824: private_data_set_binding_id_port(actx->pinfo, 0);",
          "825: private_data_set_transport_format_set_type(actx->pinfo, NBAP_CPCH);",
          "830:   transportLayerAddress_ipv4 = private_data_get_transportLayerAddress_ipv4(actx->pinfo);",
          "831:   bindingID = private_data_get_binding_id_port(actx->pinfo);",
          "832:   if (actx->pinfo->fd->flags.visited || transportLayerAddress_ipv4 == 0 || bindingID == 0){",
          "839:   conversation = conversation_new(actx->pinfo->num, &dst_addr, &null_addr, PT_UDP, bindingID, 0, NO_ADDR2|NO_PORT2);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "820:     umts_fp_conversation_info->dl_frame_number   = 0;",
          "821:     umts_fp_conversation_info->ul_frame_number   = actx->pinfo->num;",
          "822:     copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "824:     umts_fp_conversation_info->rlc_mode          = FP_RLC_MODE_UNKNOWN;",
          "",
          "[Removed Lines]",
          "823:     umts_fp_conversation_info->crnc_port         = BindingID_port;",
          "",
          "[Added Lines]",
          "852:     umts_fp_conversation_info->crnc_port         = bindingID;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "839:     for (j = 0; j < num_tf; j++) {",
          "842:     }",
          "846:     for (j = 0; j < num_tf; j++) {",
          "849:     }",
          "852:     umts_fp_conversation_info->num_dch_in_flow=1;",
          "853:     set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "857:   }",
          "859: #.FN_BODY PICH-Mode VAL_PTR = &PICH_Mode",
          "",
          "[Removed Lines]",
          "833:     umts_fp_conversation_info->com_context_id = crcn_context_present ?  com_context_id : 1;",
          "836:     umts_fp_conversation_info->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "838:     umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_ul_chans;",
          "840:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_tf_size[j];",
          "841:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_num_tbs[j];",
          "845:     umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_dl_chans;",
          "847:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_tf_size[j];",
          "848:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_num_tbs[j];",
          "851:     umts_fp_conversation_info->dch_ids_in_flow_list[0] = commonphysicalchannelid;",
          "856:     add_setup_conv(TransactionID, ddMode, commontransportchannelid, actx->pinfo->num, &dst_addr, BindingID_port, umts_fp_conversation_info, conversation);",
          "",
          "[Added Lines]",
          "862:     umts_fp_conversation_info->com_context_id = private_data_get_crnc_context_present(actx->pinfo) ?  private_data_get_com_context_id(actx->pinfo) : 1;",
          "865:     umts_fp_conversation_info->dch_crc_present = private_data_get_dch_crc_present(actx->pinfo);",
          "867:     common_physical_channel_id = private_data_get_common_physical_channel_id(actx->pinfo);",
          "868:     umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[common_physical_channel_id].num_ul_chans;",
          "870:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[common_physical_channel_id].ul_chan_tf_size[j];",
          "871:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[common_physical_channel_id].ul_chan_num_tbs[j];",
          "875:     umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[common_physical_channel_id].num_dl_chans;",
          "877:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[common_physical_channel_id].dl_chan_tf_size[j];",
          "878:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[common_physical_channel_id].dl_chan_num_tbs[j];",
          "881:     umts_fp_conversation_info->dch_ids_in_flow_list[0] = common_physical_channel_id;",
          "886:     add_setup_conv(private_data_get_transaction_id(actx->pinfo),private_data_get_dd_mode(actx->pinfo),private_data_get_common_transport_channel_id(actx->pinfo), actx->pinfo->num, &dst_addr, bindingID, umts_fp_conversation_info, conversation);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "863:     switch(PICH_Mode){",
          "866:             break;",
          "869:             break;",
          "872:             break;",
          "875:             break;",
          "876:     }",
          "",
          "[Removed Lines]",
          "865:             paging_indications = 18;",
          "868:             paging_indications = 36;",
          "871:             paging_indications = 72;",
          "874:             paging_indications = 144;",
          "",
          "[Added Lines]",
          "895:             private_data_set_paging_indications(actx->pinfo, 18);",
          "898:             private_data_set_paging_indications(actx->pinfo, 36);",
          "901:             private_data_set_paging_indications(actx->pinfo, 72);",
          "904:             private_data_set_paging_indications(actx->pinfo, 144);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "885: fp_pch_channel_info_t *fp_pch_channel_info;",
          "886: umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "887: int i, j, num_tf;",
          "895: %(DEFAULT_BODY)s",
          "899:     return offset;",
          "900:   }",
          "901:   clear_address(&null_addr);",
          "903:   set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "908:   conversation_set_dissector(conversation, fp_handle);",
          "",
          "[Removed Lines]",
          "889: transportLayerAddress_ipv4 = 0;",
          "890: BindingID_port = 0;",
          "893: num_items = 1;",
          "897:   if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "898:   {",
          "905:   conversation = conversation_new(actx->pinfo->num, &dst_addr, &null_addr, PT_UDP,BindingID_port, 0, NO_ADDR2|NO_PORT2);",
          "",
          "[Added Lines]",
          "918: guint32 transportLayerAddress_ipv4;",
          "919: guint16 bindingID;",
          "920: guint32 common_transport_channel_id;",
          "921: nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "922: nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "924: private_data_set_transportLayerAddress_ipv4(actx->pinfo, 0);",
          "925: private_data_set_binding_id_port(actx->pinfo, 0);",
          "928: private_data_set_num_items(actx->pinfo, 1);",
          "932:   transportLayerAddress_ipv4 = private_data_get_transportLayerAddress_ipv4(actx->pinfo);",
          "933:   bindingID = private_data_get_binding_id_port(actx->pinfo);",
          "934:   if (actx->pinfo->fd->flags.visited || transportLayerAddress_ipv4 == 0 || bindingID == 0){",
          "941:   conversation = conversation_new(actx->pinfo->num, &dst_addr, &null_addr, PT_UDP, bindingID, 0, NO_ADDR2|NO_PORT2);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "916:     umts_fp_conversation_info->dl_frame_number    = 0;",
          "917:     umts_fp_conversation_info->ul_frame_number    = actx->pinfo->num;",
          "918:     copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "920:     umts_fp_conversation_info->rlc_mode           = FP_RLC_MODE_UNKNOWN;",
          "922:     fp_pch_channel_info = wmem_new0(wmem_file_scope(), fp_pch_channel_info_t);",
          "924:     umts_fp_conversation_info->channel_specific_info = (void*)fp_pch_channel_info;",
          "931:     nbap_debug(\"Frame %%u PCH-ParametersItem-CTCH-SetupRqstFDD Start: num_tf %%u\", actx->pinfo->num, num_tf);",
          "933:     for (j = 0; j < num_tf; j++) {",
          "937:     }",
          "941:     for (j = 0; j < num_tf; j++) {",
          "945:     }",
          "953:     while(nbap_dch_chnl_info[i].next_dch != 0){",
          "954:       i = nbap_dch_chnl_info[i].next_dch;",
          "955:       umts_fp_conversation_info->num_dch_in_flow++;",
          "",
          "[Removed Lines]",
          "919:     umts_fp_conversation_info->crnc_port          = BindingID_port;",
          "923:     fp_pch_channel_info->paging_indications = paging_indications;",
          "927:     umts_fp_conversation_info->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "929:     umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[commontransportchannelid].num_ul_chans;",
          "934:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[commontransportchannelid].ul_chan_tf_size[j];",
          "935:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[commontransportchannelid].ul_chan_num_tbs[j];",
          "936:       nbap_debug(\"    UL tf %%u ul_chan_tf_size %%u\",j, nbap_dch_chnl_info[commontransportchannelid].ul_chan_tf_size[j]);",
          "940:     umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[commontransportchannelid].num_dl_chans;",
          "942:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[commontransportchannelid].dl_chan_tf_size[j];",
          "943:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[commontransportchannelid].dl_chan_num_tbs[j];",
          "944:       nbap_debug(\"    DL tf %%u ul_chan_tf_size %%u\",j, nbap_dch_chnl_info[commontransportchannelid].dl_chan_tf_size[j]);",
          "948:     i = commontransportchannelid;",
          "950:     nbap_debug(\"    commontransportchannelid %%u next ch %%u\",commontransportchannelid, nbap_dch_chnl_info[i].next_dch);",
          "952:     umts_fp_conversation_info->dch_ids_in_flow_list[0] = commontransportchannelid;",
          "",
          "[Added Lines]",
          "955:     umts_fp_conversation_info->crnc_port          = bindingID;",
          "959:     fp_pch_channel_info->paging_indications = private_data_get_paging_indications(actx->pinfo);",
          "963:     umts_fp_conversation_info->dch_crc_present = private_data_get_dch_crc_present(actx->pinfo);",
          "965:     common_transport_channel_id = private_data_get_common_transport_channel_id(actx->pinfo);",
          "966:     umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[common_transport_channel_id].num_ul_chans;",
          "971:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[common_transport_channel_id].ul_chan_tf_size[j];",
          "972:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[common_transport_channel_id].ul_chan_num_tbs[j];",
          "973:       nbap_debug(\"    UL tf %%u ul_chan_tf_size %%u\",j, nbap_dch_chnl_info[common_transport_channel_id].ul_chan_tf_size[j]);",
          "977:     umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[common_transport_channel_id].num_dl_chans;",
          "979:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[common_transport_channel_id].dl_chan_tf_size[j];",
          "980:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[common_transport_channel_id].dl_chan_num_tbs[j];",
          "981:       nbap_debug(\"    DL tf %%u ul_chan_tf_size %%u\",j, nbap_dch_chnl_info[common_transport_channel_id].dl_chan_tf_size[j]);",
          "985:     i = common_transport_channel_id;",
          "987:     nbap_debug(\"    commontransportchannelid %%u next ch %%u\",common_transport_channel_id, nbap_dch_chnl_info[i].next_dch);",
          "989:     umts_fp_conversation_info->dch_ids_in_flow_list[0] = common_transport_channel_id;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "976:     set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "981:     nbap_debug(\"Frame %%u PCH-ParametersItem-CTCH-SetupRqstFDD End\", actx->pinfo->num);",
          "982:   }",
          "",
          "[Removed Lines]",
          "979:     add_setup_conv(TransactionID, ddMode, commontransportchannelid, actx->pinfo->num, &dst_addr, BindingID_port, umts_fp_conversation_info, conversation);",
          "",
          "[Added Lines]",
          "1016:     add_setup_conv(private_data_get_transaction_id(actx->pinfo), private_data_get_dd_mode(actx->pinfo), common_transport_channel_id, actx->pinfo->num, &dst_addr, bindingID, umts_fp_conversation_info, conversation);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "988: fp_fach_channel_info_t* fp_fach_channel_info;",
          "989: umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "990: int i, j, num_tf;",
          "997: %(DEFAULT_BODY)s",
          "1001:     return offset;",
          "1002:   }",
          "1003:   clear_address(&null_addr);",
          "1005:   set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "1010:   conversation_set_dissector(conversation, fp_handle);",
          "",
          "[Removed Lines]",
          "992: transportLayerAddress_ipv4 = 0;",
          "993: BindingID_port = 0;",
          "995: transportFormatSet_type = NBAP_CPCH;",
          "999:   if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "1000:   {",
          "1007:   conversation = conversation_new(actx->pinfo->num, &dst_addr, &null_addr, PT_UDP,BindingID_port, 0, NO_ADDR2|NO_PORT2);",
          "",
          "[Added Lines]",
          "1028: guint32 transportLayerAddress_ipv4;",
          "1029: guint16 bindingID;",
          "1030: guint32 common_physical_channel_id;",
          "1031: nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "1032: nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "1034: private_data_set_transportLayerAddress_ipv4(actx->pinfo, 0);",
          "1035: private_data_set_binding_id_port(actx->pinfo, 0);",
          "1038: private_data_set_transport_format_set_type(actx->pinfo, NBAP_CPCH);",
          "1042:   transportLayerAddress_ipv4 = private_data_get_transportLayerAddress_ipv4(actx->pinfo);",
          "1043:   bindingID = private_data_get_binding_id_port(actx->pinfo);",
          "1044:   if (actx->pinfo->fd->flags.visited || transportLayerAddress_ipv4 == 0 || bindingID == 0){",
          "1051:   conversation = conversation_new(actx->pinfo->num, &dst_addr, &null_addr, PT_UDP, bindingID, 0, NO_ADDR2|NO_PORT2);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1018:     umts_fp_conversation_info->dl_frame_number   = 0;",
          "1019:     umts_fp_conversation_info->ul_frame_number   = actx->pinfo->num;",
          "1020:     copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "1022:     umts_fp_conversation_info->rlc_mode          = FP_RLC_MODE_UNKNOWN;",
          "1027:     fp_fach_channel_info = wmem_new0(wmem_file_scope(), fp_fach_channel_info_t);",
          "",
          "[Removed Lines]",
          "1021:     umts_fp_conversation_info->crnc_port         = BindingID_port;",
          "1024:     umts_fp_conversation_info->com_context_id = crcn_context_present ? com_context_id : 1;",
          "",
          "[Added Lines]",
          "1065:     umts_fp_conversation_info->crnc_port         = bindingID;",
          "1068:     umts_fp_conversation_info->com_context_id = private_data_get_crnc_context_present(actx->pinfo) ? private_data_get_com_context_id(actx->pinfo) : 1;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1029:     umts_fp_conversation_info->channel_specific_info = (void*)fp_fach_channel_info;",
          "1035:     for (j = 0; j < num_tf; j++) {",
          "1038:     }",
          "1042:     for (j = 0; j < num_tf; j++) {",
          "1045:     }",
          "1050:     while(nbap_dch_chnl_info[i].next_dch != 0){",
          "1051:       i = nbap_dch_chnl_info[i].next_dch;",
          "1052:       umts_fp_conversation_info->num_dch_in_flow++;",
          "",
          "[Removed Lines]",
          "1032:     umts_fp_conversation_info->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "1034:     umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_ul_chans;",
          "1036:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_tf_size[j];",
          "1037:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_num_tbs[j];",
          "1041:     umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_dl_chans;",
          "1043:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_tf_size[j];",
          "1044:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_num_tbs[j];",
          "1048:     i = commonphysicalchannelid;",
          "1049:     umts_fp_conversation_info->dch_ids_in_flow_list[0] = commonphysicalchannelid;",
          "",
          "[Added Lines]",
          "1076:     umts_fp_conversation_info->dch_crc_present = private_data_get_dch_crc_present(actx->pinfo);",
          "1078:     common_physical_channel_id = private_data_get_common_physical_channel_id(actx->pinfo);",
          "1079:     umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[common_physical_channel_id].num_ul_chans;",
          "1081:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[common_physical_channel_id].ul_chan_tf_size[j];",
          "1082:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[common_physical_channel_id].ul_chan_num_tbs[j];",
          "1086:     umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[common_physical_channel_id].num_dl_chans;",
          "1088:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[common_physical_channel_id].dl_chan_tf_size[j];",
          "1089:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[common_physical_channel_id].dl_chan_num_tbs[j];",
          "1093:     i = common_physical_channel_id;",
          "1094:     umts_fp_conversation_info->dch_ids_in_flow_list[0] = common_physical_channel_id;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1070:     set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "1074:   }",
          "1076: #.FN_HDR DCH-Specific-FDD-InformationList",
          "1080: #.FN_HDR DCH-Specific-FDD-Item",
          "1083: #.FN_FTR DCH-Specific-FDD-Item",
          "1086: #.FN_HDR DCH-Specific-FDD-Item/ul-TransportFormatSet",
          "1090: #.FN_HDR DCH-Specific-FDD-Item/dl-TransportFormatSet",
          "1094: #.FN_HDR DCH-ModifySpecificItem-FDD/ul-TransportFormatSet",
          "1098: #.FN_HDR DCH-ModifySpecificItem-FDD/dl-TransportFormatSet",
          "1102: #.FN_HDR PCH-ParametersItem-CTCH-SetupRqstFDD/transportFormatSet",
          "1108: #.FN_HDR TransportFormatSet-DynamicPartList",
          "1111: #.FN_HDR TransportFormatSet-DynamicPartList/_item",
          "1115: #.FN_BODY TransportFormatSet-NrOfTransportBlocks VAL_PTR = &NrOfTransportBlocks",
          "1116: guint32 NrOfTransportBlocks;",
          "1118: %(DEFAULT_BODY)s",
          "1122:             case NBAP_DCH_UL:",
          "1123:                 nbap_dch_chnl_info[dch_id].num_ul_chans++;",
          "1124:                 nbap_dch_chnl_info[dch_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "",
          "[Removed Lines]",
          "1073:     add_setup_conv(TransactionID, ddMode, commontransportchannelid, actx->pinfo->num, &dst_addr, BindingID_port, umts_fp_conversation_info, conversation);",
          "1077:     g_num_dch_in_flow = 0;",
          "1078:     prev_dch_id = 0;",
          "1081:     g_num_dch_in_flow++;",
          "1084:     prev_dch_id = dch_id;",
          "1087:     transportFormatSet_type = NBAP_DCH_UL;",
          "1088:     nbap_dch_chnl_info[dch_id].num_ul_chans = 0;",
          "1091:     transportFormatSet_type = NBAP_DCH_DL;",
          "1092:     nbap_dch_chnl_info[dch_id].num_dl_chans = 0;",
          "1095:     transportFormatSet_type = NBAP_DCH_UL;",
          "1096:     nbap_dch_chnl_info[dch_id].num_ul_chans = 0;",
          "1099:     transportFormatSet_type = NBAP_DCH_DL;",
          "1100:     nbap_dch_chnl_info[dch_id].num_dl_chans = 0;",
          "1103:     transportFormatSet_type = NBAP_PCH;",
          "1104:     nbap_dch_chnl_info[commontransportchannelid].num_dl_chans = 0;",
          "1105:     nbap_dch_chnl_info[commontransportchannelid].num_ul_chans = 0;",
          "1109:     num_items = 0;",
          "1112:     num_items++;",
          "1120:     if(num_items>0){",
          "1121:         switch(transportFormatSet_type){",
          "",
          "[Added Lines]",
          "1118:     add_setup_conv(private_data_get_transaction_id(actx->pinfo),private_data_get_dd_mode(actx->pinfo),private_data_get_common_transport_channel_id(actx->pinfo), actx->pinfo->num, &dst_addr, bindingID, umts_fp_conversation_info, conversation);",
          "1122:     private_data_set_num_dch_in_flow(actx->pinfo, 0);",
          "1123:     private_data_set_prev_dch_id(actx->pinfo, 0);",
          "1126:     private_data_increment_num_dch_in_flow(actx->pinfo);",
          "1129:     private_data_set_prev_dch_id(actx->pinfo,private_data_get_dch_id(actx->pinfo));",
          "1132:     nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "1133:     nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "1134:     private_data_set_transport_format_set_type(actx->pinfo, NBAP_DCH_UL);",
          "1135:     nbap_dch_chnl_info[private_data_get_dch_id(actx->pinfo)].num_ul_chans = 0;",
          "1138:     nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "1139:     nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "1140:     private_data_set_transport_format_set_type(actx->pinfo, NBAP_DCH_DL);",
          "1141:     nbap_dch_chnl_info[private_data_get_dch_id(actx->pinfo)].num_dl_chans = 0;",
          "1144:     nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "1145:     nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "1146:     private_data_set_transport_format_set_type(actx->pinfo, NBAP_DCH_UL);",
          "1147:     nbap_dch_chnl_info[private_data_get_dch_id(actx->pinfo)].num_ul_chans = 0;",
          "1150:     nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "1151:     nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "1152:     private_data_set_transport_format_set_type(actx->pinfo, NBAP_DCH_DL);",
          "1153:     nbap_dch_chnl_info[private_data_get_dch_id(actx->pinfo)].num_dl_chans = 0;",
          "1156:     nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "1157:     nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "1158:     private_data_set_transport_format_set_type(actx->pinfo, NBAP_PCH);",
          "1159:     nbap_dch_chnl_info[private_data_get_common_transport_channel_id(actx->pinfo)].num_dl_chans = 0;",
          "1160:     nbap_dch_chnl_info[private_data_get_common_transport_channel_id(actx->pinfo)].num_ul_chans = 0;",
          "1164:     private_data_set_num_items(actx->pinfo, 0);",
          "1167:     private_data_increment_num_items(actx->pinfo);",
          "1172: guint num_items;",
          "1173: guint32 dch_id;",
          "1174: guint32 common_physical_channel_id;",
          "1175: guint32 common_transport_channel_id;",
          "1176: nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "1177: nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "1181:     if(private_data_get_num_items(actx->pinfo)>0){",
          "1182:         num_items = private_data_get_num_items(actx->pinfo);",
          "1183:         dch_id = private_data_get_dch_id(actx->pinfo);",
          "1184:         common_physical_channel_id = private_data_get_common_physical_channel_id(actx->pinfo);",
          "1185:         common_transport_channel_id = private_data_get_common_transport_channel_id(actx->pinfo);",
          "1186:         switch(private_data_get_transport_format_set_type(actx->pinfo)){",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1128:                 nbap_dch_chnl_info[dch_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "1129:                 break;",
          "1130:             case NBAP_CPCH:",
          "1135:                 break;",
          "1136:             case NBAP_PCH:",
          "1141:                 break;",
          "1142:             default:",
          "1143:                 break;",
          "",
          "[Removed Lines]",
          "1131:                 nbap_dch_chnl_info[commonphysicalchannelid].num_ul_chans++;",
          "1132:                 nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "1133:                 nbap_dch_chnl_info[commonphysicalchannelid].num_dl_chans++;",
          "1134:                 nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "1137:                 nbap_dch_chnl_info[commontransportchannelid].num_ul_chans++;",
          "1138:                 nbap_dch_chnl_info[commontransportchannelid].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "1139:                 nbap_dch_chnl_info[commontransportchannelid].num_dl_chans++;",
          "1140:                 nbap_dch_chnl_info[commontransportchannelid].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "",
          "[Added Lines]",
          "1196:                 nbap_dch_chnl_info[common_physical_channel_id].num_ul_chans++;",
          "1197:                 nbap_dch_chnl_info[common_physical_channel_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "1198:                 nbap_dch_chnl_info[common_physical_channel_id].num_dl_chans++;",
          "1199:                 nbap_dch_chnl_info[common_physical_channel_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "1202:                 nbap_dch_chnl_info[common_transport_channel_id].num_ul_chans++;",
          "1203:                 nbap_dch_chnl_info[common_transport_channel_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "1204:                 nbap_dch_chnl_info[common_transport_channel_id].num_dl_chans++;",
          "1205:                 nbap_dch_chnl_info[common_transport_channel_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1147: #.FN_BODY TransportFormatSet-TransportBlockSize VAL_PTR = &TransportBlockSize",
          "1148: guint32 TransportBlockSize;",
          "1150: %(DEFAULT_BODY)s",
          "1154:             case NBAP_DCH_UL:",
          "1155:                 nbap_dch_chnl_info[dch_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;",
          "1156:                 break;",
          "",
          "[Removed Lines]",
          "1152:     if(num_items>0){",
          "1153:         switch(transportFormatSet_type){",
          "",
          "[Added Lines]",
          "1214: guint num_items;",
          "1215: guint32 dch_id;",
          "1216: guint32 common_physical_channel_id;",
          "1217: guint32 common_transport_channel_id;",
          "1218: nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "1219: nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "1223:     if(private_data_get_num_items(actx->pinfo)>0){",
          "1224:         num_items = private_data_get_num_items(actx->pinfo);",
          "1225:         dch_id = private_data_get_dch_id(actx->pinfo);",
          "1226:         common_physical_channel_id = private_data_get_common_physical_channel_id(actx->pinfo);",
          "1227:         common_transport_channel_id = private_data_get_common_transport_channel_id(actx->pinfo);",
          "1228:         switch(private_data_get_transport_format_set_type(actx->pinfo)){",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1158:                 nbap_dch_chnl_info[dch_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;",
          "1159:                 break;",
          "1160:             case NBAP_CPCH:",
          "1163:                 break;",
          "1164:             case NBAP_PCH:",
          "1167:                 break;",
          "1168:             default:",
          "1169:                 break;",
          "",
          "[Removed Lines]",
          "1161:                 nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_tf_size[num_items-1] = TransportBlockSize;",
          "1162:                 nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_tf_size[num_items-1] = TransportBlockSize;",
          "1165:                 nbap_dch_chnl_info[commontransportchannelid].ul_chan_tf_size[num_items-1] = TransportBlockSize;",
          "1166:                 nbap_dch_chnl_info[commontransportchannelid].dl_chan_tf_size[num_items-1] = TransportBlockSize;",
          "",
          "[Added Lines]",
          "1236:                 nbap_dch_chnl_info[common_physical_channel_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;",
          "1237:                 nbap_dch_chnl_info[common_physical_channel_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;",
          "1240:                 nbap_dch_chnl_info[common_transport_channel_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;",
          "1241:                 nbap_dch_chnl_info[common_transport_channel_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1174: #.FN_BODY FDD-DCHs-to-ModifyItem",
          "1176: %(DEFAULT_BODY)s",
          "1180: #.FN_BODY RL-Specific-DCH-Info-Item/dCH-id",
          "1182: %(DEFAULT_BODY)s",
          "1185: #.FN_BODY RL-Specific-DCH-Info-Item",
          "1186: address     dst_addr, null_addr;",
          "1187: conversation_t *conversation = NULL;",
          "1188: umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "1189: int i, j, num_tf;",
          "1195: %(DEFAULT_BODY)s",
          "1199:             return offset;",
          "1200:         }",
          "1204:                 return offset;",
          "1205:         }",
          "",
          "[Removed Lines]",
          "1183:     dch_id = t_dch_id;",
          "1191: transportLayerAddress_ipv4 = 0;",
          "1192: BindingID_port = 0;",
          "1193: dch_id = 0xFFFFFFFF;",
          "1197:         if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "1198:         {",
          "1203:         if(BindingID_port == NBAP_IGNORE_PORT){",
          "",
          "[Added Lines]",
          "1258:     private_data_set_dch_id(actx->pinfo, private_data_get_t_dch_id(actx->pinfo));",
          "1265: guint32 transportLayerAddress_ipv4;",
          "1266: guint16 bindingID;",
          "1267: guint32 dch_id;",
          "1268: nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "1269: nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "1271: private_data_set_transportLayerAddress_ipv4(actx->pinfo, 0);",
          "1272: private_data_set_binding_id_port(actx->pinfo, 0);",
          "1273: private_data_set_dch_id(actx->pinfo, 0xFFFFFFFF);",
          "1278:         transportLayerAddress_ipv4 = private_data_get_transportLayerAddress_ipv4(actx->pinfo);",
          "1279:         bindingID = private_data_get_binding_id_port(actx->pinfo);",
          "1280:         if (actx->pinfo->fd->flags.visited || transportLayerAddress_ipv4 == 0 || bindingID == 0){",
          "1285:         if(bindingID == NBAP_IGNORE_PORT){",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1209:         set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "1211:         conversation = find_conversation(actx->pinfo->num,&dst_addr,",
          "1213:             0, NO_ADDR_B|NO_PORT_B);",
          "1215:         if (conversation == NULL) {",
          "1217:             conversation = conversation_new(actx->pinfo->num, &dst_addr,",
          "1219:                 0, NO_ADDR2|NO_PORT2);",
          "",
          "[Removed Lines]",
          "1212:             &null_addr, PT_UDP, BindingID_port,",
          "1218:                 &null_addr, PT_UDP,BindingID_port ,",
          "",
          "[Added Lines]",
          "1294:             &null_addr, PT_UDP,private_data_get_binding_id_port(actx->pinfo),",
          "1300:                 &null_addr, PT_UDP,private_data_get_binding_id_port(actx->pinfo),",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1230:                 umts_fp_conversation_info->dl_frame_number   = 0;",
          "1231:                 umts_fp_conversation_info->ul_frame_number   = actx->pinfo->num;",
          "1232:                 copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "1235:                 umts_fp_conversation_info->rlc_mode          = FP_RLC_MODE_UNKNOWN;",
          "1246:                 for (j = 0; j < num_tf; j++) {",
          "1247:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[dch_id].ul_chan_tf_size[j];",
          "1248:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[dch_id].ul_chan_num_tbs[j];",
          "",
          "[Removed Lines]",
          "1233:                 umts_fp_conversation_info->crnc_port         = BindingID_port;",
          "1234:                 umts_fp_conversation_info->scrambling_code   = ul_scrambling_code;",
          "1238:                 umts_fp_conversation_info->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "1241:                 umts_fp_conversation_info->com_context_id = com_context_id;",
          "1245:                 umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[dch_id].num_ul_chans;",
          "",
          "[Added Lines]",
          "1315:                 umts_fp_conversation_info->crnc_port         = bindingID;",
          "1316:                 umts_fp_conversation_info->scrambling_code   = private_data_get_ul_scrambling_code(actx->pinfo);",
          "1320:                 umts_fp_conversation_info->dch_crc_present = private_data_get_dch_crc_present(actx->pinfo);",
          "1323:                 umts_fp_conversation_info->com_context_id = private_data_get_com_context_id(actx->pinfo);",
          "1327:                 dch_id = private_data_get_dch_id(actx->pinfo);",
          "1328:                 umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[private_data_get_dch_id(actx->pinfo)].num_ul_chans;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1303: umts_fp_conversation_info_t *umts_fp_conversation_info = NULL;",
          "1304: fp_edch_channel_info_t* fp_edch_channel_info;",
          "1305: nbap_edch_port_info_t *old_info = NULL;",
          "1311: %(DEFAULT_BODY)s",
          "1315:             return offset;",
          "1316:         }",
          "1317:         clear_address(&null_addr);",
          "",
          "[Removed Lines]",
          "1307: transportLayerAddress_ipv4 = 0;",
          "1308: BindingID_port = 0;",
          "1313:         if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "1314:         {",
          "",
          "[Added Lines]",
          "1389: guint32 transportLayerAddress_ipv4;",
          "1390: guint16 bindingID;",
          "1391: guint32 e_dch_macdflow_id;",
          "1392: nbap_edch_channel_info_t* nbap_edch_channel_info;",
          "1393: nbap_edch_channel_info = private_data_get_nbap_edch_channel_info(actx->pinfo);",
          "1395: private_data_set_transportLayerAddress_ipv4(actx->pinfo, 0);",
          "1396: private_data_set_binding_id_port(actx->pinfo, 0);",
          "1401:         transportLayerAddress_ipv4 = private_data_get_transportLayerAddress_ipv4(actx->pinfo);",
          "1402:         bindingID = private_data_get_binding_id_port(actx->pinfo);",
          "1403:         if (actx->pinfo->fd->flags.visited || transportLayerAddress_ipv4 == 0 || bindingID == 0){",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1319:         set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "1321:         conversation = find_conversation(actx->pinfo->num,&dst_addr,",
          "1323:             0, NO_ADDR_B|NO_PORT_B);",
          "1324:         if (conversation) {",
          "1325:             umts_fp_conversation_info = (umts_fp_conversation_info_t*)conversation_get_proto_data(conversation, proto_fp);",
          "",
          "[Removed Lines]",
          "1322:             &null_addr, PT_UDP, BindingID_port,",
          "",
          "[Added Lines]",
          "1411:             &null_addr, PT_UDP, bindingID,",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1336:             conversation = conversation_new(actx->pinfo->num, &dst_addr,",
          "1338:                 0, NO_ADDR2|NO_PORT2);",
          "",
          "[Removed Lines]",
          "1337:                 &null_addr, PT_UDP,BindingID_port ,",
          "",
          "[Added Lines]",
          "1426:                 &null_addr, PT_UDP, bindingID,",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1348:                 umts_fp_conversation_info->dl_frame_number   = 0;",
          "1349:                 umts_fp_conversation_info->ul_frame_number   = actx->pinfo->num;",
          "1350:                 copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "1354:                 umts_fp_conversation_info->rlc_mode          = FP_RLC_MODE_UNKNOWN;",
          "",
          "[Removed Lines]",
          "1351:                 umts_fp_conversation_info->crnc_port         = BindingID_port;",
          "",
          "[Added Lines]",
          "1440:                 umts_fp_conversation_info->crnc_port         = bindingID;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1356:                 fp_edch_channel_info = wmem_new0(wmem_file_scope(), fp_edch_channel_info_t);",
          "1357:                 umts_fp_conversation_info->channel_specific_info = (void*)fp_edch_channel_info;",
          "1361:                 }else{",
          "1362:                     nbap_com_context_id_t *cur_val;",
          "1364:                         umts_fp_conversation_info->com_context_id = cur_val->crnc_context;",
          "1365:                     }else{",
          "1366:                         expert_add_info(actx->pinfo, NULL, &ei_nbap_no_set_comm_context_id);",
          "",
          "[Removed Lines]",
          "1359:                 if(crcn_context_present){",
          "1360:                     umts_fp_conversation_info->com_context_id = com_context_id;",
          "1363:                     if((cur_val=(nbap_com_context_id_t *)wmem_tree_lookup32(com_context_map, node_b_com_context_id)) != NULL){",
          "",
          "[Added Lines]",
          "1448:                 if(private_data_get_crnc_context_present(actx->pinfo)){",
          "1449:                     umts_fp_conversation_info->com_context_id = private_data_get_com_context_id(actx->pinfo);",
          "1452:                     if((cur_val=(nbap_com_context_id_t *)wmem_tree_lookup32(com_context_map,private_data_get_node_b_com_context_id(actx->pinfo))) != NULL){",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1373:                     nbap_edch_port_info_t * nbap_edch_port_info;",
          "1375:                     nbap_edch_port_info = wmem_new0(wmem_file_scope(), nbap_edch_port_info_t);",
          "1382:                     nbap_debug(\"Frame %%u RL-Specific-E-DCH-Information-Item Start\",",
          "1383:                         actx->pinfo->num);",
          "1385:                     nbap_debug(\"    wmem_tree_insert32(edch_flow_port_map) com_context_id %%u e_dch_macdflow_id %%u IP %%s Port %%u\",",
          "1391:                     wmem_tree_insert32(edch_flow_port_map, umts_fp_conversation_info->com_context_id, nbap_edch_port_info);",
          "1392:                 }else{",
          "1394:                     nbap_debug(\"    Insert in existing edch_flow_port_map com_context_id %%u e_dch_macdflow_id %%u IP %%s Port %%u\",",
          "1402:                 }",
          "1405:                 copy_address(&(nbap_edch_channel_info[e_dch_macdflow_id].crnc_address),&dst_addr);",
          "1408:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "",
          "[Removed Lines]",
          "1372:                 if( (old_info = (nbap_edch_port_info_t *)wmem_tree_lookup32(edch_flow_port_map, com_context_id)) == NULL ){",
          "1378:                     nbap_edch_port_info->crnc_port[e_dch_macdflow_id] = BindingID_port;",
          "1380:                     nbap_edch_port_info->crnc_address = transportLayerAddress_ipv4;",
          "1386:                         umts_fp_conversation_info->com_context_id,",
          "1387:                         e_dch_macdflow_id,",
          "1388:                         address_to_str(wmem_packet_scope(), &dst_addr),",
          "1389:                         BindingID_port);",
          "1395:                         umts_fp_conversation_info->com_context_id,",
          "1396:                         e_dch_macdflow_id,",
          "1397:                         address_to_str(wmem_packet_scope(), &dst_addr),",
          "1398:                         BindingID_port);",
          "1401:                     old_info->crnc_port[e_dch_macdflow_id] = BindingID_port;",
          "1406:                 nbap_edch_channel_info[e_dch_macdflow_id].crnc_port = BindingID_port;",
          "",
          "[Added Lines]",
          "1461:                 e_dch_macdflow_id = private_data_get_e_dch_macdflow_id(actx->pinfo);",
          "1462:                 if( (old_info = (nbap_edch_port_info_t *)wmem_tree_lookup32(edch_flow_port_map,private_data_get_com_context_id(actx->pinfo))) == NULL ){",
          "1468:                     nbap_edch_port_info->crnc_port[e_dch_macdflow_id] = bindingID;",
          "1470:                     nbap_edch_port_info->crnc_address = private_data_get_transportLayerAddress_ipv4(actx->pinfo);",
          "1476:                         umts_fp_conversation_info->com_context_id,e_dch_macdflow_id,",
          "1477:                         address_to_str(wmem_packet_scope(), &dst_addr),bindingID);",
          "1483:                         umts_fp_conversation_info->com_context_id,e_dch_macdflow_id,",
          "1484:                         address_to_str(wmem_packet_scope(), &dst_addr), bindingID);",
          "1487:                     old_info->crnc_port[e_dch_macdflow_id] = bindingID;",
          "1492:                 nbap_edch_channel_info[e_dch_macdflow_id].crnc_port = bindingID;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1418: address     null_addr;",
          "1419: conversation_t   *p_conv;",
          "1420: guint32 no_ddi_entries, i;",
          "1422: %(DEFAULT_BODY)s",
          "1423:     if (actx->pinfo->fd->flags.visited)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1507: guint32 e_dch_macdflow_id;",
          "1508: nbap_edch_channel_info_t* nbap_edch_channel_info;",
          "1509: nbap_edch_channel_info = private_data_get_nbap_edch_channel_info(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1426:     }",
          "1429:     clear_address(&null_addr);",
          "1430:     p_conv = find_conversation(actx->pinfo->num, &nbap_edch_channel_info[e_dch_macdflow_id].crnc_address, &null_addr,",
          "1431:                                PT_UDP,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1518:     e_dch_macdflow_id = private_data_get_e_dch_macdflow_id(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1443:         return offset;",
          "1445:     no_ddi_entries = fp_edch_channel_info->no_ddi_entries = nbap_edch_channel_info[e_dch_macdflow_id].no_ddi_entries;",
          "1447:     for (i = 0; i < no_ddi_entries; i++) {",
          "1448:         fp_edch_channel_info->edch_ddi[i]            = nbap_edch_channel_info[e_dch_macdflow_id].edch_ddi[i];",
          "1449:         fp_edch_channel_info->edch_macd_pdu_size[i]  = nbap_edch_channel_info[e_dch_macdflow_id].edch_macd_pdu_size[i];",
          "1457:     }",
          "1465:     }else{",
          "",
          "[Removed Lines]",
          "1453:             e_dch_macdflow_id,",
          "1454:             nbap_edch_channel_info[e_dch_macdflow_id].edch_ddi[i],",
          "1455:             nbap_edch_channel_info[e_dch_macdflow_id].edch_macd_pdu_size[i]",
          "1460:     p_conv_data->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "1463:     if( 0 == e_dch_ddi_value ){",
          "",
          "[Added Lines]",
          "1540:         fp_edch_channel_info->edch_lchId[i]          =  nbap_edch_channel_info[e_dch_macdflow_id].lchId[i];",
          "1543:     p_conv_data->dch_crc_present = private_data_get_dch_crc_present(actx->pinfo);",
          "1546:     if( 0 == private_data_get_e_dch_ddi_value(actx->pinfo) ){",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1468:     }",
          "1470:     p_conv_data->num_dch_in_flow = 1;",
          "1473: #Handle Modified E-DCH Flows",
          "1474: #.FN_BODY E-DCH-FDD-Information-to-Modify",
          "",
          "[Removed Lines]",
          "1471:     p_conv_data->dch_ids_in_flow_list[0] = e_dch_macdflow_id;",
          "",
          "[Added Lines]",
          "1554:     p_conv_data->dch_ids_in_flow_list[0] = private_data_get_e_dch_macdflow_id(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1478: umts_fp_conversation_info_t *umts_fp_conversation_info _U_;",
          "1479: fp_edch_channel_info_t* fp_edch_channel_info;",
          "1480: void *conv_proto_data = NULL;",
          "1485:  %(DEFAULT_BODY)s",
          "1489:             return offset;",
          "1490:         }",
          "",
          "[Removed Lines]",
          "1482: transportLayerAddress_ipv4 = 0;",
          "1483: BindingID_port = 0;",
          "1487:         if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "1488:         {",
          "",
          "[Added Lines]",
          "1564: guint32 transportLayerAddress_ipv4;",
          "1565: guint16 bindingID;",
          "1566: guint32 e_dch_macdflow_id;",
          "1567: nbap_edch_channel_info_t* nbap_edch_channel_info;",
          "1568: nbap_edch_channel_info = private_data_get_nbap_edch_channel_info(actx->pinfo);",
          "1570: private_data_set_transportLayerAddress_ipv4(actx->pinfo, 0);",
          "1571: private_data_set_binding_id_port(actx->pinfo, 0);",
          "1575:         transportLayerAddress_ipv4 = private_data_get_transportLayerAddress_ipv4(actx->pinfo);",
          "1576:         bindingID = private_data_get_binding_id_port(actx->pinfo);",
          "1577:         if (actx->pinfo->fd->flags.visited || transportLayerAddress_ipv4 == 0 || bindingID == 0){",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1497:         set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "1499:         old_conversation = find_conversation(actx->pinfo->num,&dst_addr,",
          "1501:             0, NO_ADDR_B|NO_PORT_B);",
          "1503:         if(old_conversation){",
          "1504:             nbap_debug(\"Frame %%u E-DCH-FDD-Information-to-Modify: found old conv on IP %%s Port %%u\",",
          "1505:                 actx->pinfo->num,",
          "1508:         }else{",
          "1509:             nbap_debug(\"Frame %%u E-DCH-FDD-Information-to-Modify: Did not find old conv on IP %%s Port %%u\",",
          "1510:                 actx->pinfo->num,",
          "1513:         }",
          "1516:         conversation = conversation_new(actx->pinfo->num, &dst_addr,",
          "1518:                 0, NO_ADDR2|NO_PORT2);",
          "",
          "[Removed Lines]",
          "1500:             &null_addr, PT_UDP, BindingID_port,",
          "1506:                 address_to_str(wmem_packet_scope(), &dst_addr),",
          "1507:                 BindingID_port);",
          "1511:                 address_to_str(wmem_packet_scope(), &dst_addr),",
          "1512:                 BindingID_port);",
          "1517:                 &null_addr, PT_UDP,BindingID_port ,",
          "",
          "[Added Lines]",
          "1589:             &null_addr, PT_UDP, bindingID,",
          "1595:                 address_to_str(wmem_packet_scope(), &dst_addr), bindingID);",
          "1599:                 address_to_str(wmem_packet_scope(), &dst_addr), bindingID);",
          "1604:                 &null_addr, PT_UDP, bindingID,",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1534:                 umts_fp_conversation_info->dl_frame_number   = 0;",
          "1535:                 umts_fp_conversation_info->ul_frame_number   = actx->pinfo->num;",
          "1536:                 copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "1540:                 umts_fp_conversation_info->rlc_mode          = FP_RLC_MODE_UNKNOWN;",
          "",
          "[Removed Lines]",
          "1537:                 umts_fp_conversation_info->crnc_port         = BindingID_port;",
          "",
          "[Added Lines]",
          "1624:                 umts_fp_conversation_info->crnc_port         = bindingID;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1542:                 fp_edch_channel_info = wmem_new0(wmem_file_scope(), fp_edch_channel_info_t);",
          "1543:                 umts_fp_conversation_info->channel_specific_info = (void*)fp_edch_channel_info;",
          "1547:                 }else{",
          "1548:                     nbap_com_context_id_t * cur_val;",
          "1551:                         umts_fp_conversation_info->com_context_id = cur_val->crnc_context;",
          "1552:                     }else{",
          "1553:                         expert_add_info(actx->pinfo, NULL, &ei_nbap_no_set_comm_context_id);",
          "",
          "[Removed Lines]",
          "1545:                 if(crcn_context_present){",
          "1546:                     umts_fp_conversation_info->com_context_id = com_context_id;",
          "1550:                     if((cur_val=(nbap_com_context_id_t *)wmem_tree_lookup32(com_context_map, node_b_com_context_id)) != NULL){",
          "",
          "[Added Lines]",
          "1632:                 if(private_data_get_crnc_context_present(actx->pinfo)){",
          "1633:                     umts_fp_conversation_info->com_context_id = private_data_get_com_context_id(actx->pinfo);",
          "1637:                     if((cur_val=(nbap_com_context_id_t *)wmem_tree_lookup32(com_context_map,private_data_get_node_b_com_context_id(actx->pinfo))) != NULL){",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1555:                 }",
          "1558:                 copy_address(&(nbap_edch_channel_info[e_dch_macdflow_id].crnc_address),&dst_addr);",
          "",
          "[Removed Lines]",
          "1559:                 nbap_edch_channel_info[e_dch_macdflow_id].crnc_port = BindingID_port;",
          "",
          "[Added Lines]",
          "1645:                 e_dch_macdflow_id = private_data_get_e_dch_macdflow_id(actx->pinfo);",
          "1647:                 nbap_edch_channel_info[e_dch_macdflow_id].crnc_port = bindingID;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1574: umts_fp_conversation_info_t *p_conv_data = NULL;",
          "1575: fp_edch_channel_info_t* fp_edch_channel_info;",
          "1576: conversation_t   *p_conv;",
          "1579:  %(DEFAULT_BODY)s",
          "1581:     if (actx->pinfo->fd->flags.visited)",
          "",
          "[Removed Lines]",
          "1578: num_items = 1;",
          "",
          "[Added Lines]",
          "1665: guint32 e_dch_macdflow_id;",
          "1666: nbap_edch_channel_info_t* nbap_edch_channel_info;",
          "1667: nbap_edch_channel_info = private_data_get_nbap_edch_channel_info(actx->pinfo);",
          "1669: private_data_set_num_items(actx->pinfo, 1);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1593:     }else{",
          "1594:         nbap_com_context_id_t * cur_val;",
          "1597:         }else{",
          "1598:             expert_add_info(actx->pinfo, NULL, &ei_nbap_no_find_comm_context_id);",
          "1599:         }",
          "1600:     }",
          "1604:         expert_add_info(actx->pinfo, NULL, &ei_nbap_no_find_port_info);",
          "1605:         return offset;",
          "1606:     }",
          "",
          "[Removed Lines]",
          "1591:     if(crcn_context_present){",
          "1595:         if((cur_val=(nbap_com_context_id_t *)wmem_tree_lookup32(com_context_map, node_b_com_context_id)) != NULL){",
          "1596:             com_context_id= cur_val->crnc_context;",
          "1603:     if(( old_info = (nbap_edch_port_info_t *)wmem_tree_lookup32(edch_flow_port_map, com_context_id)) == NULL ){",
          "1607:     nbap_debug(\"    Found com_context_id %%u\", com_context_id);",
          "1610:     BindingID_port = old_info->crnc_port[e_dch_macdflow_id];",
          "1612:     nbap_debug(\" Port %%u loaded from old_info->crnc_port[e_dch_macdflow_id %%u]\",",
          "1613:         BindingID_port,",
          "1614:         e_dch_macdflow_id);",
          "1617:     transportLayerAddress_ipv4 =  old_info->crnc_address;",
          "",
          "[Added Lines]",
          "1682:     if(private_data_get_crnc_context_present(actx->pinfo)){",
          "1686:         if((cur_val=(nbap_com_context_id_t *)wmem_tree_lookup32(com_context_map,private_data_get_node_b_com_context_id(actx->pinfo))) != NULL){",
          "1687:             private_data_set_com_context_id(actx->pinfo, cur_val->crnc_context);",
          "1694:     if(( old_info = (nbap_edch_port_info_t *)wmem_tree_lookup32(edch_flow_port_map,private_data_get_com_context_id(actx->pinfo))) == NULL ){",
          "1698:     nbap_debug(\"    Found com_context_id %%u\",private_data_get_com_context_id(actx->pinfo));",
          "1701:     e_dch_macdflow_id = private_data_get_e_dch_macdflow_id(actx->pinfo);",
          "1702:     private_data_set_binding_id_port(actx->pinfo, old_info->crnc_port[e_dch_macdflow_id]);",
          "1704:     nbap_debug(\" Port %%u loaded from old_info->crnc_port[e_dch_macdflow_id %%u]\",private_data_get_binding_id_port(actx->pinfo), e_dch_macdflow_id);",
          "1707:     private_data_set_transportLayerAddress_ipv4(actx->pinfo, old_info->crnc_address);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1635:         return offset;",
          "1637:     no_ddi_entries = fp_edch_channel_info->no_ddi_entries = nbap_edch_channel_info[e_dch_macdflow_id].no_ddi_entries;",
          "1639:     for (i = 0; i < no_ddi_entries; i++) {",
          "1640:         fp_edch_channel_info->edch_ddi[i]            = nbap_edch_channel_info[e_dch_macdflow_id].edch_ddi[i];",
          "1641:         fp_edch_channel_info->edch_macd_pdu_size[i]  = nbap_edch_channel_info[e_dch_macdflow_id].edch_macd_pdu_size[i];",
          "1649:     }",
          "1657:     }else{",
          "",
          "[Removed Lines]",
          "1645:             e_dch_macdflow_id,",
          "1646:             nbap_edch_channel_info[e_dch_macdflow_id].edch_ddi[i],",
          "1647:             nbap_edch_channel_info[e_dch_macdflow_id].edch_macd_pdu_size[i]",
          "1652:     p_conv_data->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "1655:     if( 0 == e_dch_ddi_value ){",
          "",
          "[Added Lines]",
          "1732:         fp_edch_channel_info->edch_lchId[i]          =  nbap_edch_channel_info[e_dch_macdflow_id].lchId[i];",
          "1735:     p_conv_data->dch_crc_present = private_data_get_dch_crc_present(actx->pinfo);",
          "1738:     if( 0 == private_data_get_e_dch_ddi_value(actx->pinfo) ){",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1668: #.FN_BODY E-DCH-LogicalChannelToModifyItem",
          "1670: %(DEFAULT_BODY)s",
          "1673: #.FN_BODY E-DCH-LogicalChannelInformation",
          "1676: %(DEFAULT_BODY)s",
          "1680: #.FN_HDR E-DCH-LogicalChannelInformationItem",
          "1683: #.FN_BODY E-DCH-DDI-Value VAL_PTR = &e_dch_ddi_value",
          "1685: %(DEFAULT_BODY)s",
          "1695: %(DEFAULT_BODY)s",
          "1697:     if (actx->pinfo->fd->flags.visited)",
          "1698:     {",
          "1699:         return offset;",
          "1700:     }",
          "1701:     if(num_items>0)",
          "1704: #.FN_BODY LogicalChannelID VAL_PTR = &logical_channel_id",
          "1706: %(DEFAULT_BODY)s",
          "1708:     if(num_items>0)",
          "1711: #.FN_BODY RLC-Mode VAL_PTR = &rlc_mode",
          "1712:     guint32 rlc_mode;",
          "1714: %(DEFAULT_BODY)s",
          "1715:     switch(rlc_mode){",
          "1716:         case 0:",
          "1719:             break;",
          "1720:         case 1:",
          "1723:             break;",
          "1724:         default:",
          "1725:             break;",
          "",
          "[Removed Lines]",
          "1671: num_items++;",
          "1674:     num_items = 0;",
          "1678: nbap_edch_channel_info[e_dch_macdflow_id].no_ddi_entries = num_items;",
          "1681:     num_items++;",
          "1687:     if (actx->pinfo->fd->flags.visited)",
          "1688:     {",
          "1689:         return offset;",
          "1690:     }",
          "1691:     if(num_items>0)",
          "1692:         nbap_edch_channel_info[e_dch_macdflow_id].edch_ddi[num_items-1] = e_dch_ddi_value;",
          "1694: #.FN_BODY MACdPDU-Size VAL_PTR = &MACdPDU_Size",
          "1702:         nbap_edch_channel_info[e_dch_macdflow_id].edch_macd_pdu_size[num_items-1] = MACdPDU_Size;",
          "1709:         nbap_edch_channel_info[e_dch_macdflow_id].lchId[num_items-1] = logical_channel_id;",
          "1718:             nbap_hsdsch_channel_info[hsdsch_macdflow_id].rlc_mode = FP_RLC_AM;",
          "1722:             nbap_hsdsch_channel_info[hsdsch_macdflow_id].rlc_mode = FP_RLC_UM;",
          "",
          "[Added Lines]",
          "1754: private_data_increment_num_items(actx->pinfo);",
          "1757:     private_data_set_num_items(actx->pinfo, 0);",
          "1758:     nbap_edch_channel_info_t* nbap_edch_channel_info;",
          "1759:     nbap_edch_channel_info = private_data_get_nbap_edch_channel_info(actx->pinfo);",
          "1763: nbap_edch_channel_info[private_data_get_e_dch_macdflow_id(actx->pinfo)].no_ddi_entries = private_data_get_num_items(actx->pinfo);",
          "1766:     private_data_increment_num_items(actx->pinfo);",
          "1769:   guint32 e_dch_ddi_value;",
          "1770:   guint num_items;",
          "1771:   nbap_edch_channel_info_t* nbap_edch_channel_info;",
          "1772:   nbap_edch_channel_info = private_data_get_nbap_edch_channel_info(actx->pinfo);",
          "1775:   private_data_set_e_dch_ddi_value(actx->pinfo, e_dch_ddi_value);",
          "1776:   if (actx->pinfo->fd->flags.visited)",
          "1777:   {",
          "1778:       return offset;",
          "1779:   }",
          "1780:   num_items = private_data_get_num_items(actx->pinfo);",
          "1781:   if(num_items>0)",
          "1782:       nbap_edch_channel_info[private_data_get_e_dch_macdflow_id(actx->pinfo)].edch_ddi[num_items-1] = private_data_get_e_dch_ddi_value(actx->pinfo);",
          "1784: #.FN_BODY MACdPDU-Size VAL_PTR = &mac_d_pdu_size",
          "1785: guint32 mac_d_pdu_size;",
          "1786: guint num_items;",
          "1787: nbap_edch_channel_info_t* nbap_edch_channel_info;",
          "1788: nbap_edch_channel_info = private_data_get_nbap_edch_channel_info(actx->pinfo);",
          "1791:     private_data_set_mac_d_pdu_size(actx->pinfo, mac_d_pdu_size);",
          "1796:     num_items = private_data_get_num_items(actx->pinfo);",
          "1798:         nbap_edch_channel_info[private_data_get_e_dch_macdflow_id(actx->pinfo)].edch_macd_pdu_size[num_items-1] = private_data_get_mac_d_pdu_size(actx->pinfo);",
          "1801:   guint32 logical_channel_id;",
          "1802:   guint num_items;",
          "1803:   nbap_edch_channel_info_t* nbap_edch_channel_info;",
          "1804:   nbap_edch_channel_info = private_data_get_nbap_edch_channel_info(actx->pinfo);",
          "1808:     private_data_set_logical_channel_id(actx->pinfo, logical_channel_id);",
          "1809:     num_items = private_data_get_num_items(actx->pinfo);",
          "1811:         nbap_edch_channel_info[private_data_get_e_dch_macdflow_id(actx->pinfo)].lchId[num_items-1] = private_data_get_logical_channel_id(actx->pinfo);",
          "1815:     nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;",
          "1816:     nbap_hsdsch_channel_info = private_data_get_nbap_hsdsch_channel_info(actx->pinfo);",
          "1821:             nbap_hsdsch_channel_info[private_data_get_hsdsch_macdflow_id(actx->pinfo)].rlc_mode = FP_RLC_AM;",
          "1825:             nbap_hsdsch_channel_info[private_data_get_hsdsch_macdflow_id(actx->pinfo)].rlc_mode = FP_RLC_UM;",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1728: #.FN_BODY UE-Capability-Information/hSDSCH-Physical-Layer-Category  VAL_PTR = &hsdsch_physical_layer_category",
          "1729:     guint32 hsdsch_physical_layer_category;",
          "1731: %(DEFAULT_BODY)s",
          "1735: #.FN_BODY HSDSCH-MACdFlows-Information",
          "1737:     int protocol_ie_id;",
          "1738:     guint32 i;",
          "",
          "[Removed Lines]",
          "1733:     nbap_hsdsch_channel_info[hsdsch_macdflow_id].hsdsch_physical_layer_category = hsdsch_physical_layer_category;",
          "1739:     num_items = 0;",
          "1740:     protocol_ie_id = ProtocolIE_ID;",
          "",
          "[Added Lines]",
          "1833:     nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;",
          "1834:     nbap_hsdsch_channel_info = private_data_get_nbap_hsdsch_channel_info(actx->pinfo);",
          "1838:     nbap_hsdsch_channel_info[private_data_get_hsdsch_macdflow_id(actx->pinfo)].hsdsch_physical_layer_category = hsdsch_physical_layer_category;",
          "1843:     private_data_set_num_items(actx->pinfo,0);",
          "1844:     protocol_ie_id = private_data_get_protocol_ie_id(actx->pinfo);",
          "1845:     nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;",
          "1846:     nbap_hsdsch_channel_info = private_data_get_nbap_hsdsch_channel_info(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1766: # Reset num_items before calling the sequence",
          "1767: #.FN_HDR HSDSCH-MACdFlows-to-Delete",
          "1770: # Make sure num_items isn't 0 when accessing HSDSCH-MACdFlow-ID",
          "1771: #",
          "1772: #.FN_HDR HSDSCH-MACdFlows-to-Delete-Item",
          "1775: #.FN_HDR PriorityQueue-InfoItem",
          "1778: #.FN_HDR PriorityQueue-InfoItem-to-Add",
          "1781: #.FN_HDR HSDSCH-MACdFlow-Specific-InformationResp-Item",
          "1784: #.FN_BODY HSDSCH-MACdFlow-Specific-InfoItem",
          "1787:     address     dst_addr;",
          "1791: %(DEFAULT_BODY)s",
          "1796:         return offset;",
          "1797:     }",
          "1799:     set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "1802:     copy_address(&(nbap_hsdsch_channel_info[hsdsch_macdflow_id].crnc_address),&dst_addr);",
          "1806: #.FN_BODY MAC-PDU-SizeExtended",
          "1807: %(DEFAULT_BODY)s",
          "1808:     if(nbap_hsdsch_channel_info[hsdsch_macdflow_id].crnc_port != 0){",
          "1809:             nbap_hsdsch_channel_info[hsdsch_macdflow_id].entity = ehs;",
          "1810:     }",
          "",
          "[Removed Lines]",
          "1768:     num_items = 0;",
          "1773:     num_items++;",
          "1776:     num_items++;",
          "1779:     num_items = 1;",
          "1782:     num_items++;",
          "1788:     transportLayerAddress_ipv4 = 0;",
          "1789:     BindingID_port = 0;",
          "1790:     num_items++;",
          "1794:     if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "1795:     {",
          "1803:     nbap_hsdsch_channel_info[hsdsch_macdflow_id].crnc_port = BindingID_port;",
          "",
          "[Added Lines]",
          "1874:     private_data_set_num_items(actx->pinfo,0);",
          "1879:     private_data_increment_num_items(actx->pinfo);",
          "1882:     private_data_increment_num_items(actx->pinfo);",
          "1885:     private_data_set_num_items(actx->pinfo,1);",
          "1888:     private_data_increment_num_items(actx->pinfo);",
          "1892:     guint32 transportLayerAddress_ipv4;",
          "1893:     guint16 bindingID;",
          "1894:     guint32 hsdsch_macdflow_id;",
          "1895:     nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;",
          "1896:     nbap_hsdsch_channel_info = private_data_get_nbap_hsdsch_channel_info(actx->pinfo);",
          "1898:     private_data_set_transportLayerAddress_ipv4(actx->pinfo, 0);",
          "1899:     private_data_set_binding_id_port(actx->pinfo, 0);",
          "1900:     private_data_increment_num_items(actx->pinfo);",
          "1904:     transportLayerAddress_ipv4 = private_data_get_transportLayerAddress_ipv4(actx->pinfo);",
          "1905:     bindingID = private_data_get_binding_id_port(actx->pinfo);",
          "1906:     if (actx->pinfo->fd->flags.visited || transportLayerAddress_ipv4 == 0 || bindingID == 0){",
          "1913:     hsdsch_macdflow_id = private_data_get_hsdsch_macdflow_id(actx->pinfo);",
          "1915:     nbap_hsdsch_channel_info[hsdsch_macdflow_id].crnc_port = bindingID;",
          "1919: guint32 hsdsch_macdflow_id;",
          "1920: nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;",
          "1921: nbap_hsdsch_channel_info = private_data_get_nbap_hsdsch_channel_info(actx->pinfo);",
          "1923:     hsdsch_macdflow_id = private_data_get_hsdsch_macdflow_id(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1842:     umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "1843:     fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "1844:     guint32 i;",
          "1846:     if (!actx->pinfo->fd->flags.visited){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1961:     nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;",
          "1962:     nbap_hsdsch_channel_info = private_data_get_nbap_hsdsch_channel_info(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1907:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "",
          "[Removed Lines]",
          "1904:                     umts_fp_conversation_info->com_context_id = com_context_id;",
          "",
          "[Added Lines]",
          "2022:                     umts_fp_conversation_info->com_context_id = private_data_get_com_context_id(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1932: #.FN_BODY HSDSCH-MACdFlow-Specific-InfoItem-to-Modify",
          "1933:     address     dst_addr;",
          "1938: %(DEFAULT_BODY)s",
          "1942:         return offset;",
          "1943:     }",
          "1945:     set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "1952: #.FN_BODY HSDSCH-Information-to-Modify",
          "",
          "[Removed Lines]",
          "1934:     transportLayerAddress_ipv4 = 0;",
          "1935:     BindingID_port = 0;",
          "1936:     num_items++;",
          "1940:     if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "1941:     {",
          "1948:     copy_address(&(nbap_hsdsch_channel_info[hsdsch_macdflow_id].crnc_address),&dst_addr);",
          "1949:     nbap_hsdsch_channel_info[hsdsch_macdflow_id].crnc_port = BindingID_port;",
          "",
          "[Added Lines]",
          "2052:     guint32 transportLayerAddress_ipv4;",
          "2053:     guint16 bindingID;",
          "2054:     private_data_set_transportLayerAddress_ipv4(actx->pinfo, 0);",
          "2055:     private_data_set_binding_id_port(actx->pinfo, 0);",
          "2056:     private_data_increment_num_items(actx->pinfo);",
          "2057:     nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;",
          "2058:     nbap_hsdsch_channel_info = private_data_get_nbap_hsdsch_channel_info(actx->pinfo);",
          "2062:     transportLayerAddress_ipv4 = private_data_get_transportLayerAddress_ipv4(actx->pinfo);",
          "2063:     bindingID = private_data_get_binding_id_port(actx->pinfo);",
          "2064:     if (actx->pinfo->fd->flags.visited || transportLayerAddress_ipv4 == 0 || bindingID == 0){",
          "2071:     copy_address(&(nbap_hsdsch_channel_info[private_data_get_hsdsch_macdflow_id(actx->pinfo)].crnc_address),&dst_addr);",
          "2072:     nbap_hsdsch_channel_info[private_data_get_hsdsch_macdflow_id(actx->pinfo)].crnc_port = bindingID;",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1962:     umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "1963:     fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "1964:     guint32 i;",
          "1966:     if (!actx->pinfo->fd->flags.visited){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2088:     nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;",
          "2089:     nbap_hsdsch_channel_info = private_data_get_nbap_hsdsch_channel_info(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2031:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "",
          "[Removed Lines]",
          "2028:                     umts_fp_conversation_info->com_context_id = com_context_id;",
          "",
          "[Added Lines]",
          "2153:                     umts_fp_conversation_info->com_context_id = private_data_get_com_context_id(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2062:     }",
          "2064: #.FN_BODY Common-MACFlow-ID VAL_PTR = &common_macdflow_id",
          "2066: %(DEFAULT_BODY)s",
          "2071: #.FN_BODY CommonMACFlow-Specific-InfoItem",
          "2072:     address     dst_addr;",
          "2077: %(DEFAULT_BODY)s",
          "2081:         return offset;",
          "2082:     }",
          "2084:     set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "2087:     copy_address(&(nbap_common_channel_info[common_macdflow_id].crnc_address),&dst_addr);",
          "2091: #.FN_BODY HSDSCH-Common-System-InformationFDD",
          "",
          "[Removed Lines]",
          "2073:     transportLayerAddress_ipv4 = 0;",
          "2074:     BindingID_port = 0;",
          "2075:     num_items++;",
          "2079:     if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "2080:     {",
          "2088:     nbap_common_channel_info[common_macdflow_id].crnc_port = BindingID_port;",
          "",
          "[Added Lines]",
          "2190: guint32 common_macdflow_id;",
          "2192: private_data_set_common_macdflow_id(actx->pinfo, common_macdflow_id);",
          "2199:     guint32 transportLayerAddress_ipv4;",
          "2200:     guint16 bindingID;",
          "2201:     guint32 common_macdflow_id;",
          "2202:     private_data_set_transportLayerAddress_ipv4(actx->pinfo, 0);",
          "2203:     private_data_set_binding_id_port(actx->pinfo, 0);",
          "2204:     private_data_increment_num_items(actx->pinfo);",
          "2205:     nbap_common_channel_info_t* nbap_common_channel_info;",
          "2206:     nbap_common_channel_info = private_data_get_nbap_common_channel_info(actx->pinfo);",
          "2210:     transportLayerAddress_ipv4 = private_data_get_transportLayerAddress_ipv4(actx->pinfo);",
          "2211:     bindingID = private_data_get_binding_id_port(actx->pinfo);",
          "2212:     if (actx->pinfo->fd->flags.visited || transportLayerAddress_ipv4 == 0 || bindingID == 0){",
          "2219:     common_macdflow_id = private_data_get_common_macdflow_id(actx->pinfo);",
          "2221:     nbap_common_channel_info[common_macdflow_id].crnc_port = private_data_get_binding_id_port(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2103: fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "2104: address     null_addr;",
          "2105: conversation_t   *conversation = NULL;",
          "2107: int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2239: nbap_common_channel_info_t* nbap_common_channel_info;",
          "2240: nbap_common_channel_info = private_data_get_nbap_common_channel_info(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2152:                 fp_hsdsch_channel_info = wmem_new0(wmem_file_scope(), fp_hsdsch_channel_info_t);",
          "2153:                 umts_fp_conversation_info->channel_specific_info = (void*)fp_hsdsch_channel_info;",
          "2155:                 fp_hsdsch_channel_info->hsdsch_entity = ehs;",
          "",
          "[Removed Lines]",
          "2154:                 fp_hsdsch_channel_info->common_macdflow_id = common_macdflow_id;",
          "",
          "[Added Lines]",
          "2289:                 fp_hsdsch_channel_info->common_macdflow_id = private_data_get_common_macdflow_id(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2179: #",
          "2181: #.FN_BODY CRNC-CommunicationContextID VAL_PTR = &com_context_id",
          "2182: %(DEFAULT_BODY)s",
          "2185: #.FN_BODY NodeB-CommunicationContextID VAL_PTR = &node_b_com_context_id",
          "2189: %(DEFAULT_BODY)s",
          "2205:     }",
          "2207: #.FN_BODY HSDSCH-RNTI   VAL_PTR = &hrnti",
          "2208: umts_fp_conversation_info_t *umts_fp_conversation_info = NULL;",
          "2209: fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "2210: address     null_addr;",
          "2211: conversation_t   *conversation = NULL;",
          "2212: int i;",
          "2214: %(DEFAULT_BODY)s",
          "2216:     if (actx->pinfo->fd->flags.visited){",
          "2217:         return offset;",
          "",
          "[Removed Lines]",
          "2183: crcn_context_present = TRUE;",
          "2187: nbap_com_context_id_t *cur_val;",
          "2191:     if (actx->pinfo->fd->flags.visited){",
          "2192:         return offset;",
          "2193:     }",
          "2196: if(crcn_context_present){",
          "2197:         if( wmem_tree_lookup32(com_context_map, node_b_com_context_id) == NULL ){",
          "2199:             cur_val = wmem_new(wmem_file_scope(), nbap_com_context_id_t);",
          "2200:             cur_val->crnc_context = com_context_id;",
          "2201:             cur_val->frame_num = actx->pinfo->num;",
          "2202:             wmem_tree_insert32(com_context_map, node_b_com_context_id, cur_val);",
          "2203:             com_context_id = -1;",
          "2204:         }",
          "",
          "[Added Lines]",
          "2317: guint32 com_context_id;",
          "2319: private_data_set_com_context_id(actx->pinfo, com_context_id);",
          "2320: private_data_set_crnc_context_present(actx->pinfo, TRUE);",
          "2323:   guint node_b_com_context_id;",
          "2325:   nbap_com_context_id_t *cur_val;",
          "2329:   private_data_set_node_b_com_context_id(actx->pinfo, node_b_com_context_id);",
          "2330:   if (actx->pinfo->fd->flags.visited){",
          "2331:       return offset;",
          "2332:   }",
          "2335:   if(private_data_get_crnc_context_present(actx->pinfo)){",
          "2336:     if( wmem_tree_lookup32(com_context_map, node_b_com_context_id) == NULL ){",
          "2338:        cur_val = wmem_new(wmem_file_scope(), nbap_com_context_id_t);",
          "2339:        cur_val->crnc_context = private_data_get_com_context_id(actx->pinfo);",
          "2340:        cur_val->frame_num = actx->pinfo->num;",
          "2341:        wmem_tree_insert32(com_context_map, node_b_com_context_id, cur_val);",
          "2342:        private_data_set_com_context_id(actx->pinfo, -1);",
          "2344:   }",
          "2347:   gint hrnti;",
          "2353: nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;",
          "2354: nbap_hsdsch_channel_info = private_data_get_nbap_hsdsch_channel_info(actx->pinfo);",
          "2357:   private_data_set_hrnti(actx->pinfo, hrnti);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2229:                 DISSECTOR_ASSERT(umts_fp_conversation_info != NULL);",
          "2230:                 fp_hsdsch_channel_info = (fp_hsdsch_channel_info_t*)umts_fp_conversation_info->channel_specific_info;",
          "2231:                 DISSECTOR_ASSERT(fp_hsdsch_channel_info != NULL);",
          "2233:             }",
          "2234:          }",
          "2235:      }",
          "",
          "[Removed Lines]",
          "2232:                 fp_hsdsch_channel_info->hrnti = hrnti;",
          "",
          "[Added Lines]",
          "2375:                 fp_hsdsch_channel_info->hrnti = private_data_get_hrnti(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2243: %(DEFAULT_BODY)s",
          "2248: #.REGISTER",
          "2250: #NBAP-PROTOCOL-IES",
          "",
          "[Removed Lines]",
          "2245: #.FN_BODY CFN VAL_PTR = &cfn",
          "2246: %(DEFAULT_BODY)s",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/dissectors/asn1/nbap/packet-nbap-template.c||epan/dissectors/asn1/nbap/packet-nbap-template.c": [
          "File: epan/dissectors/asn1/nbap/packet-nbap-template.c -> epan/dissectors/asn1/nbap/packet-nbap-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <epan/conversation.h>",
          "32: #include <epan/expert.h>",
          "33: #include <epan/prefs.h>",
          "34: #include <epan/uat.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include <epan/proto_data.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122: static wmem_map_t *nbap_setup_conv_table;",
          "136: typedef struct",
          "137: {",
          "138:   gint num_dch_in_flow;",
          "",
          "[Removed Lines]",
          "127: struct _nbap_msg_info_for_fp",
          "128: {",
          "129:   guint32 ProcedureCode;",
          "130:   guint32 ddMode;",
          "131:   gboolean is_uplink;",
          "134: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "200:   NBAP_PCH",
          "201: };",
          "214: static wmem_tree_t* edch_flow_port_map = NULL;",
          "235: wmem_tree_t *nbap_scrambling_code_crncc_map = NULL;",
          "236: wmem_tree_t *nbap_crncc_urnti_map = NULL;",
          "239: static wmem_tree_t* com_context_map;",
          "",
          "[Removed Lines]",
          "204: static guint32 transportLayerAddress_ipv4;",
          "205: static guint16 BindingID_port;",
          "206: static guint32 ul_scrambling_code;",
          "207: static guint32 com_context_id;",
          "208: static int cfn;",
          "209: gint g_num_dch_in_flow;",
          "210: gint g_dch_ids_in_flow_list[maxNrOfTFs];",
          "211: gint hsdsch_macdflow_ids[maxNrOfMACdFlows];",
          "212: gint hrnti;",
          "213: guint node_b_com_context_id;",
          "215: static guint32 ProcedureCode;",
          "216: static guint32 ProtocolIE_ID;",
          "217: static guint32 ddMode;",
          "218: static const gchar *ProcedureID;",
          "219: static guint32 TransactionID;",
          "220: static guint32 t_dch_id;",
          "221: static guint32 dch_id;",
          "222: static guint32 prev_dch_id;",
          "223: static guint32 commonphysicalchannelid;",
          "224: static guint32 e_dch_macdflow_id;",
          "225: static guint32 hsdsch_macdflow_id=3;",
          "226: static guint32 e_dch_ddi_value;",
          "227: static guint32 logical_channel_id;",
          "228: static guint32 common_macdflow_id;",
          "229: static guint32 MACdPDU_Size;",
          "230: static guint32 commontransportchannelid;",
          "231: static guint num_items;",
          "232: static gint paging_indications;",
          "233: static guint32 ib_type;",
          "234: static guint32 segment_type;",
          "237: enum TransportFormatSet_type_enum transportFormatSet_type;",
          "238: gboolean crcn_context_present = FALSE;",
          "240: nbap_dch_channel_info_t nbap_dch_chnl_info[256];",
          "241: nbap_edch_channel_info_t nbap_edch_channel_info[maxNrOfEDCHMACdFlows];",
          "242: nbap_hsdsch_channel_info_t nbap_hsdsch_channel_info[maxNrOfMACdFlows];",
          "244: struct _nbap_msg_info_for_fp g_nbap_msg_info_for_fp;",
          "",
          "[Added Lines]",
          "200: typedef struct nbap_private_data_t",
          "201: {",
          "202:   guint32 transportLayerAddress_ipv4;",
          "203:   guint16 binding_id_port;",
          "204:   enum TransportFormatSet_type_enum transport_format_set_type;",
          "205:   guint32 procedure_code;",
          "206:   guint num_items;",
          "207:   guint32 ul_scrambling_code;",
          "208:   guint32 com_context_id;",
          "209:   gint num_dch_in_flow;",
          "210:   gint hrnti;",
          "211:   guint node_b_com_context_id;",
          "212:   guint32 protocol_ie_id;",
          "213:   guint32 dd_mode;",
          "214:   guint32 transaction_id;",
          "215:   guint32 t_dch_id;",
          "216:   guint32 dch_id;",
          "217:   guint32 prev_dch_id;",
          "218:   guint32 common_physical_channel_id;",
          "219:   guint32 e_dch_macdflow_id;",
          "220:   guint32 hsdsch_macdflow_id;",
          "221:   guint32 e_dch_ddi_value;",
          "222:   guint32 logical_channel_id;",
          "223:   guint32 common_macdflow_id;",
          "224:   guint32 mac_d_pdu_size;",
          "225:   guint32 common_transport_channel_id;",
          "226:   gint paging_indications;",
          "227:   guint32 ib_type;",
          "228:   guint32 segment_type;",
          "230:   guint8 dch_crc_present;",
          "232:   nbap_dch_channel_info_t nbap_dch_chnl_info[256];",
          "233:   nbap_edch_channel_info_t nbap_edch_channel_info[maxNrOfEDCHMACdFlows];",
          "234:   gint hsdsch_macdflow_ids[maxNrOfMACdFlows];",
          "235:   nbap_hsdsch_channel_info_t nbap_hsdsch_channel_info[maxNrOfMACdFlows];",
          "237: } nbap_private_data_t;",
          "241: static nbap_private_data_t* nbap_get_private_data(packet_info *pinfo)",
          "242: {",
          "243:   guint8 i;",
          "251:   nbap_private_data_t *private_data = (nbap_private_data_t *)p_get_proto_data(pinfo->pool, pinfo, proto_nbap, 0);",
          "252:   if(private_data != NULL ) {",
          "253:     return private_data;",
          "254:   }",
          "255:   else {",
          "256:     private_data = wmem_new0(pinfo->pool, nbap_private_data_t);",
          "257:     p_add_proto_data(pinfo->pool, pinfo, proto_nbap, 0, private_data);",
          "259:     private_data->hsdsch_macdflow_id = 3;",
          "260:     private_data->crnc_context_present = FALSE;",
          "261:     private_data->procedure_code = 0xFFFF;",
          "262:     private_data->dd_mode = 0xFFFF;",
          "264:     for (i = 0; i < maxNrOfMACdFlows; i++) {",
          "265:         private_data->nbap_hsdsch_channel_info[i].entity = hs;",
          "266:     }",
          "267:     return private_data;",
          "268:   }",
          "269: }",
          "272: static void nbap_reset_private_data(packet_info *pinfo)",
          "273: {",
          "274:   p_remove_proto_data(pinfo->pool, pinfo, proto_nbap, 0);",
          "275: }",
          "277: static guint32 private_data_get_transportLayerAddress_ipv4(packet_info *pinfo)",
          "278: {",
          "279:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "280:   return private_data->transportLayerAddress_ipv4;",
          "281: }",
          "283: static void private_data_set_transportLayerAddress_ipv4(packet_info *pinfo, guint32 transportLayerAddress_ipv4)",
          "284: {",
          "285:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "286:   private_data->transportLayerAddress_ipv4 = transportLayerAddress_ipv4;",
          "287: }",
          "289: static guint16 private_data_get_binding_id_port(packet_info *pinfo)",
          "290: {",
          "291:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "292:   return private_data->binding_id_port;",
          "293: }",
          "295: static void private_data_set_binding_id_port(packet_info *pinfo, guint16 binding_id_port)",
          "296: {",
          "297:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "298:   private_data->binding_id_port = binding_id_port;",
          "299: }",
          "301: static guint32 private_data_get_ul_scrambling_code(packet_info *pinfo)",
          "302: {",
          "303:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "304:   return private_data->ul_scrambling_code;",
          "305: }",
          "307: static void private_data_set_ul_scrambling_code(packet_info *pinfo, guint32 ul_scrambling_code)",
          "308: {",
          "309:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "310:   private_data->ul_scrambling_code = ul_scrambling_code;",
          "311: }",
          "313: static enum TransportFormatSet_type_enum private_data_get_transport_format_set_type(packet_info *pinfo)",
          "314: {",
          "315:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "316:   return private_data->transport_format_set_type;",
          "317: }",
          "319: static void private_data_set_transport_format_set_type(packet_info *pinfo, enum TransportFormatSet_type_enum transport_format_set_type)",
          "320: {",
          "321:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "322:   private_data->transport_format_set_type = transport_format_set_type;",
          "323: }",
          "325: static guint32 private_data_get_procedure_code(packet_info *pinfo)",
          "326: {",
          "327:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "328:   return private_data->procedure_code;",
          "329: }",
          "331: static void private_data_set_procedure_code(packet_info *pinfo, guint32 procedure_code)",
          "332: {",
          "333:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "334:   private_data->procedure_code = procedure_code;",
          "335: }",
          "337: static guint private_data_get_num_items(packet_info *pinfo)",
          "338: {",
          "339:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "340:   return private_data->num_items;",
          "341: }",
          "343: static void private_data_set_num_items(packet_info *pinfo, guint num_items)",
          "344: {",
          "345:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "346:   private_data->num_items = num_items;",
          "347: }",
          "349: static guint private_data_increment_num_items(packet_info *pinfo)",
          "350: {",
          "351:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "352:   private_data->num_items++;",
          "353:   return private_data->num_items;",
          "354: }",
          "356: static guint32 private_data_get_com_context_id(packet_info *pinfo)",
          "357: {",
          "358:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "359:   return private_data->com_context_id;",
          "360: }",
          "362: static void private_data_set_com_context_id(packet_info *pinfo, guint32 com_context_id)",
          "363: {",
          "364:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "365:   private_data->com_context_id = com_context_id;",
          "366: }",
          "368: static gint private_data_get_num_dch_in_flow(packet_info *pinfo)",
          "369: {",
          "370:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "371:   return private_data->num_dch_in_flow;",
          "372: }",
          "374: static void private_data_set_num_dch_in_flow(packet_info *pinfo, gint num_dch_in_flow)",
          "375: {",
          "376:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "377:   private_data->num_dch_in_flow = num_dch_in_flow;",
          "378: }",
          "380: static gint private_data_increment_num_dch_in_flow(packet_info *pinfo)",
          "381: {",
          "382:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "383:   private_data->num_dch_in_flow++;",
          "384:   return private_data->num_dch_in_flow;",
          "385: }",
          "387: static gint private_data_get_hrnti(packet_info *pinfo)",
          "388: {",
          "389:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "390:   return private_data->hrnti;",
          "391: }",
          "393: static void private_data_set_hrnti(packet_info *pinfo, gint hrnti)",
          "394: {",
          "395:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "396:   private_data->hrnti = hrnti;",
          "397: }",
          "399: static guint private_data_get_node_b_com_context_id(packet_info *pinfo)",
          "400: {",
          "401:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "402:   return private_data->node_b_com_context_id;",
          "403: }",
          "405: static void private_data_set_node_b_com_context_id(packet_info *pinfo, guint node_b_com_context_id)",
          "406: {",
          "407:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "408:   private_data->node_b_com_context_id = node_b_com_context_id;",
          "409: }",
          "411: static guint32 private_data_get_protocol_ie_id(packet_info *pinfo)",
          "412: {",
          "413:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "414:   return private_data->protocol_ie_id;",
          "415: }",
          "417: static void private_data_set_protocol_ie_id(packet_info *pinfo, guint32 protocol_ie_id)",
          "418: {",
          "419:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "420:   private_data->protocol_ie_id = protocol_ie_id;",
          "421: }",
          "423: static guint32 private_data_get_dd_mode(packet_info *pinfo)",
          "424: {",
          "425:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "426:   return private_data->dd_mode;",
          "427: }",
          "429: static void private_data_set_dd_mode(packet_info *pinfo, guint32 dd_mode)",
          "430: {",
          "431:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "432:   private_data->dd_mode = dd_mode;",
          "433: }",
          "435: static guint32 private_data_get_transaction_id(packet_info *pinfo)",
          "436: {",
          "437:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "438:   return private_data->transaction_id;",
          "439: }",
          "441: static void private_data_set_transaction_id(packet_info *pinfo, guint32 transaction_id)",
          "442: {",
          "443:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "444:   private_data->transaction_id = transaction_id;",
          "445: }",
          "447: static guint32 private_data_get_t_dch_id(packet_info *pinfo)",
          "448: {",
          "449:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "450:   return private_data->t_dch_id;",
          "451: }",
          "453: static void private_data_set_t_dch_id(packet_info *pinfo, guint32 t_dch_id)",
          "454: {",
          "455:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "456:   private_data->t_dch_id = t_dch_id;",
          "457: }",
          "459: static guint32 private_data_get_dch_id(packet_info *pinfo)",
          "460: {",
          "461:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "462:   return private_data->dch_id;",
          "463: }",
          "465: static void private_data_set_dch_id(packet_info *pinfo, guint32 dch_id)",
          "466: {",
          "467:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "468:   private_data->dch_id = dch_id;",
          "469: }",
          "471: static guint32 private_data_get_prev_dch_id(packet_info *pinfo)",
          "472: {",
          "473:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "474:   return private_data->prev_dch_id;",
          "475: }",
          "477: static void private_data_set_prev_dch_id(packet_info *pinfo, guint32 prev_dch_id)",
          "478: {",
          "479:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "480:   private_data->prev_dch_id = prev_dch_id;",
          "481: }",
          "483: static guint32 private_data_get_common_physical_channel_id(packet_info *pinfo)",
          "484: {",
          "485:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "486:   return private_data->common_physical_channel_id;",
          "487: }",
          "489: static void private_data_set_common_physical_channel_id(packet_info *pinfo, guint32 common_physical_channel_id)",
          "490: {",
          "491:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "492:   private_data->common_physical_channel_id = common_physical_channel_id;",
          "493: }",
          "495: static guint32 private_data_get_e_dch_macdflow_id(packet_info *pinfo)",
          "496: {",
          "497:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "498:   return private_data->e_dch_macdflow_id;",
          "499: }",
          "501: static void private_data_set_e_dch_macdflow_id(packet_info *pinfo, guint32 e_dch_macdflow_id)",
          "502: {",
          "503:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "504:   private_data->e_dch_macdflow_id = e_dch_macdflow_id;",
          "505: }",
          "507: static guint32 private_data_get_hsdsch_macdflow_id(packet_info *pinfo)",
          "508: {",
          "509:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "510:   return private_data->hsdsch_macdflow_id;",
          "511: }",
          "513: static void private_data_set_hsdsch_macdflow_id(packet_info *pinfo, guint32 hsdsch_macdflow_id)",
          "514: {",
          "515:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "516:   private_data->hsdsch_macdflow_id = hsdsch_macdflow_id;",
          "517: }",
          "519: static guint32 private_data_get_e_dch_ddi_value(packet_info *pinfo)",
          "520: {",
          "521:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "522:   return private_data->e_dch_ddi_value;",
          "523: }",
          "525: static void private_data_set_e_dch_ddi_value(packet_info *pinfo, guint32 e_dch_ddi_value)",
          "526: {",
          "527:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "528:   private_data->e_dch_ddi_value = e_dch_ddi_value;",
          "529: }",
          "531: static guint32 private_data_get_logical_channel_id(packet_info *pinfo)",
          "532: {",
          "533:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "534:   return private_data->logical_channel_id;",
          "535: }",
          "537: static void private_data_set_logical_channel_id(packet_info *pinfo, guint32 logical_channel_id)",
          "538: {",
          "539:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "540:   private_data->logical_channel_id = logical_channel_id;",
          "541: }",
          "543: static guint32 private_data_get_common_macdflow_id(packet_info *pinfo)",
          "544: {",
          "545:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "546:   return private_data->common_macdflow_id;",
          "547: }",
          "549: static void private_data_set_common_macdflow_id(packet_info *pinfo, guint32 common_macdflow_id)",
          "550: {",
          "551:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "552:   private_data->common_macdflow_id = common_macdflow_id;",
          "553: }",
          "555: static guint32 private_data_get_mac_d_pdu_size(packet_info *pinfo)",
          "556: {",
          "557:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "558:   return private_data->mac_d_pdu_size;",
          "559: }",
          "561: static void private_data_set_mac_d_pdu_size(packet_info *pinfo, guint32 mac_d_pdu_size)",
          "562: {",
          "563:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "564:   private_data->mac_d_pdu_size = mac_d_pdu_size;",
          "565: }",
          "567: static guint32 private_data_get_common_transport_channel_id(packet_info *pinfo)",
          "568: {",
          "569:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "570:   return private_data->common_transport_channel_id;",
          "571: }",
          "573: static void private_data_set_common_transport_channel_id(packet_info *pinfo, guint32 common_transport_channel_id)",
          "574: {",
          "575:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "576:   private_data->common_transport_channel_id = common_transport_channel_id;",
          "577: }",
          "579: static gint private_data_get_paging_indications(packet_info *pinfo)",
          "580: {",
          "581:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "582:   return private_data->paging_indications;",
          "583: }",
          "585: static void private_data_set_paging_indications(packet_info *pinfo, gint paging_indications)",
          "586: {",
          "587:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "588:   private_data->paging_indications = paging_indications;",
          "589: }",
          "591: static guint32 private_data_get_ib_type(packet_info *pinfo)",
          "592: {",
          "593:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "594:   return private_data->ib_type;",
          "595: }",
          "597: static void private_data_set_ib_type(packet_info *pinfo, guint32 ib_type)",
          "598: {",
          "599:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "600:   private_data->ib_type = ib_type;",
          "601: }",
          "603: static guint32 private_data_get_segment_type(packet_info *pinfo)",
          "604: {",
          "605:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "606:   return private_data->segment_type;",
          "607: }",
          "609: static void private_data_set_segment_type(packet_info *pinfo, guint32 segment_type)",
          "610: {",
          "611:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "612:   private_data->segment_type = segment_type;",
          "613: }",
          "615: static gboolean private_data_get_crnc_context_present(packet_info *pinfo)",
          "616: {",
          "617:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "618:   return private_data->crnc_context_present;",
          "619: }",
          "621: static void private_data_set_crnc_context_present(packet_info *pinfo, gboolean crnc_context_present)",
          "622: {",
          "623:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "624:   private_data->crnc_context_present = crnc_context_present;",
          "625: }",
          "627: static guint8 private_data_get_dch_crc_present(packet_info *pinfo)",
          "628: {",
          "629:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "630:   return private_data->dch_crc_present;",
          "631: }",
          "633: static void private_data_set_dch_crc_present(packet_info *pinfo, guint8 dch_crc_present)",
          "634: {",
          "635:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "636:   private_data->dch_crc_present = dch_crc_present;",
          "637: }",
          "639: static nbap_dch_channel_info_t* private_data_get_nbap_dch_chnl_info(packet_info *pinfo)",
          "640: {",
          "641:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "642:   return private_data->nbap_dch_chnl_info;",
          "643: }",
          "645: static nbap_edch_channel_info_t* private_data_get_nbap_edch_channel_info(packet_info *pinfo)",
          "646: {",
          "647:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "648:   return private_data->nbap_edch_channel_info;",
          "649: }",
          "651: static gint* private_data_get_hsdsch_macdflow_ids(packet_info *pinfo)",
          "652: {",
          "653:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "654:   return private_data->hsdsch_macdflow_ids;",
          "655: }",
          "657: static nbap_hsdsch_channel_info_t* private_data_get_nbap_hsdsch_channel_info(packet_info *pinfo)",
          "658: {",
          "659:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "660:   return private_data->nbap_hsdsch_channel_info;",
          "661: }",
          "663: static nbap_common_channel_info_t* private_data_get_nbap_common_channel_info(packet_info *pinfo)",
          "664: {",
          "665:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "666:   return private_data->nbap_common_channel_info;",
          "667: }",
          "675: static  const gchar *ProcedureID;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "366: static int dissect_ProtocolIEFieldValue(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "367: {",
          "369: }",
          "371: static int dissect_ProtocolExtensionFieldExtensionValue(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "372: {",
          "374: }",
          "376: static int dissect_InitiatingMessageValue(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "",
          "[Removed Lines]",
          "368:   return (dissector_try_uint_new(nbap_ies_dissector_table, ProtocolIE_ID, tvb, pinfo, tree, FALSE, NULL)) ? tvb_captured_length(tvb) : 0;",
          "373:   return (dissector_try_uint_new(nbap_extension_dissector_table, ProtocolIE_ID, tvb, pinfo, tree, FALSE, NULL)) ? tvb_captured_length(tvb) : 0;",
          "",
          "[Added Lines]",
          "804:   guint32 protocol_ie_id;",
          "805:   protocol_ie_id = private_data_get_protocol_ie_id(pinfo);",
          "806:   return (dissector_try_uint_new(nbap_ies_dissector_table, protocol_ie_id, tvb, pinfo, tree, FALSE, NULL)) ? tvb_captured_length(tvb) : 0;",
          "811:   guint32 protocol_ie_id;",
          "812:   protocol_ie_id = private_data_get_protocol_ie_id(pinfo);",
          "813:   return (dissector_try_uint_new(nbap_extension_dissector_table, protocol_ie_id, tvb, pinfo, tree, FALSE, NULL)) ? tvb_captured_length(tvb) : 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "396:   umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "397:   fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "398:   guint32 i;",
          "400:   if (pinfo->fd->flags.visited){",
          "401:     return;",
          "402:   }",
          "405:   clear_address(&null_addr);",
          "406:   for (i = 0; i < maxNrOfMACdFlows; i++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "839:   nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;",
          "845:   nbap_hsdsch_channel_info = private_data_get_nbap_hsdsch_channel_info(pinfo);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "551: {",
          "552:   proto_item *nbap_item = NULL;",
          "553:   proto_tree *nbap_tree = NULL;",
          "556:   col_set_str(pinfo->cinfo, COL_PROTOCOL, \"NBAP\");",
          "",
          "[Removed Lines]",
          "554:   int i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "559:   nbap_item = proto_tree_add_item(tree, proto_nbap, tvb, 0, -1, ENC_NA);",
          "560:   nbap_tree = proto_item_add_subtree(nbap_item, ett_nbap);",
          "568:   return dissect_NBAP_PDU_PDU(tvb, pinfo, nbap_tree, data);",
          "569: }",
          "",
          "[Removed Lines]",
          "563:   for (i = 0; i < maxNrOfMACdFlows; i++) {",
          "564:     nbap_hsdsch_channel_info[i].entity = hs;",
          "565:   }",
          "566:   ul_scrambling_code = 0;",
          "",
          "[Added Lines]",
          "1004:   nbap_reset_private_data(pinfo);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c": [
          "File: epan/dissectors/packet-nbap.c -> epan/dissectors/packet-nbap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #include <epan/conversation.h>",
          "40: #include <epan/expert.h>",
          "41: #include <epan/prefs.h>",
          "42: #include <epan/uat.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: #include <epan/proto_data.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1536: } ProtocolIE_ID_enum;",
          "1542: static int proto_nbap = -1;",
          "",
          "[Removed Lines]",
          "1539: #line 74 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "1540: #line 75 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4840: static int hf_nbap_RACH_SubChannelNumbers_subCh0 = -1;",
          "4846: static int ett_nbap = -1;",
          "",
          "[Removed Lines]",
          "4843: #line 82 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "4844: #line 83 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6479: static gint ett_nbap_Outcome = -1;",
          "6484: static expert_field ei_nbap_no_find_comm_context_id = EI_INIT;",
          "6485: static expert_field ei_nbap_no_find_port_info = EI_INIT;",
          "",
          "[Removed Lines]",
          "6482: #line 90 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "6483: #line 91 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6515: static wmem_map_t *nbap_setup_conv_table;",
          "6529: typedef struct",
          "6530: {",
          "6531:   gint num_dch_in_flow;",
          "",
          "[Removed Lines]",
          "6520: struct _nbap_msg_info_for_fp",
          "6521: {",
          "6522:   guint32 ProcedureCode;",
          "6523:   guint32 ddMode;",
          "6524:   gboolean is_uplink;",
          "6527: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6593:   NBAP_PCH",
          "6594: };",
          "6607: static wmem_tree_t* edch_flow_port_map = NULL;",
          "6628: wmem_tree_t *nbap_scrambling_code_crncc_map = NULL;",
          "6629: wmem_tree_t *nbap_crncc_urnti_map = NULL;",
          "6632: static wmem_tree_t* com_context_map;",
          "",
          "[Removed Lines]",
          "6597: static guint32 transportLayerAddress_ipv4;",
          "6598: static guint16 BindingID_port;",
          "6599: static guint32 ul_scrambling_code;",
          "6600: static guint32 com_context_id;",
          "6601: static int cfn;",
          "6602: gint g_num_dch_in_flow;",
          "6603: gint g_dch_ids_in_flow_list[maxNrOfTFs];",
          "6604: gint hsdsch_macdflow_ids[maxNrOfMACdFlows];",
          "6605: gint hrnti;",
          "6606: guint node_b_com_context_id;",
          "6608: static guint32 ProcedureCode;",
          "6609: static guint32 ProtocolIE_ID;",
          "6610: static guint32 ddMode;",
          "6611: static const gchar *ProcedureID;",
          "6612: static guint32 TransactionID;",
          "6613: static guint32 t_dch_id;",
          "6614: static guint32 dch_id;",
          "6615: static guint32 prev_dch_id;",
          "6616: static guint32 commonphysicalchannelid;",
          "6617: static guint32 e_dch_macdflow_id;",
          "6618: static guint32 hsdsch_macdflow_id=3;",
          "6619: static guint32 e_dch_ddi_value;",
          "6620: static guint32 logical_channel_id;",
          "6621: static guint32 common_macdflow_id;",
          "6622: static guint32 MACdPDU_Size;",
          "6623: static guint32 commontransportchannelid;",
          "6624: static guint num_items;",
          "6625: static gint paging_indications;",
          "6626: static guint32 ib_type;",
          "6627: static guint32 segment_type;",
          "6630: enum TransportFormatSet_type_enum transportFormatSet_type;",
          "6631: gboolean crcn_context_present = FALSE;",
          "6633: nbap_dch_channel_info_t nbap_dch_chnl_info[256];",
          "6634: nbap_edch_channel_info_t nbap_edch_channel_info[maxNrOfEDCHMACdFlows];",
          "6635: nbap_hsdsch_channel_info_t nbap_hsdsch_channel_info[maxNrOfMACdFlows];",
          "6637: struct _nbap_msg_info_for_fp g_nbap_msg_info_for_fp;",
          "",
          "[Added Lines]",
          "6593: typedef struct nbap_private_data_t",
          "6594: {",
          "6595:   guint32 transportLayerAddress_ipv4;",
          "6596:   guint16 binding_id_port;",
          "6597:   enum TransportFormatSet_type_enum transport_format_set_type;",
          "6598:   guint32 procedure_code;",
          "6599:   guint num_items;",
          "6600:   guint32 ul_scrambling_code;",
          "6601:   guint32 com_context_id;",
          "6602:   gint num_dch_in_flow;",
          "6603:   gint hrnti;",
          "6604:   guint node_b_com_context_id;",
          "6605:   guint32 protocol_ie_id;",
          "6606:   guint32 dd_mode;",
          "6607:   guint32 transaction_id;",
          "6608:   guint32 t_dch_id;",
          "6609:   guint32 dch_id;",
          "6610:   guint32 prev_dch_id;",
          "6611:   guint32 common_physical_channel_id;",
          "6612:   guint32 e_dch_macdflow_id;",
          "6613:   guint32 hsdsch_macdflow_id;",
          "6614:   guint32 e_dch_ddi_value;",
          "6615:   guint32 logical_channel_id;",
          "6616:   guint32 common_macdflow_id;",
          "6617:   guint32 mac_d_pdu_size;",
          "6618:   guint32 common_transport_channel_id;",
          "6619:   gint paging_indications;",
          "6620:   guint32 ib_type;",
          "6621:   guint32 segment_type;",
          "6623:   guint8 dch_crc_present;",
          "6625:   nbap_dch_channel_info_t nbap_dch_chnl_info[256];",
          "6626:   nbap_edch_channel_info_t nbap_edch_channel_info[maxNrOfEDCHMACdFlows];",
          "6627:   gint hsdsch_macdflow_ids[maxNrOfMACdFlows];",
          "6628:   nbap_hsdsch_channel_info_t nbap_hsdsch_channel_info[maxNrOfMACdFlows];",
          "6630: } nbap_private_data_t;",
          "6634: static nbap_private_data_t* nbap_get_private_data(packet_info *pinfo)",
          "6635: {",
          "6636:   guint8 i;",
          "6644:   nbap_private_data_t *private_data = (nbap_private_data_t *)p_get_proto_data(pinfo->pool, pinfo, proto_nbap, 0);",
          "6645:   if(private_data != NULL ) {",
          "6646:     return private_data;",
          "6647:   }",
          "6648:   else {",
          "6649:     private_data = wmem_new0(pinfo->pool, nbap_private_data_t);",
          "6650:     p_add_proto_data(pinfo->pool, pinfo, proto_nbap, 0, private_data);",
          "6652:     private_data->hsdsch_macdflow_id = 3;",
          "6653:     private_data->crnc_context_present = FALSE;",
          "6654:     private_data->procedure_code = 0xFFFF;",
          "6655:     private_data->dd_mode = 0xFFFF;",
          "6657:     for (i = 0; i < maxNrOfMACdFlows; i++) {",
          "6658:         private_data->nbap_hsdsch_channel_info[i].entity = hs;",
          "6659:     }",
          "6660:     return private_data;",
          "6661:   }",
          "6662: }",
          "6665: static void nbap_reset_private_data(packet_info *pinfo)",
          "6666: {",
          "6667:   p_remove_proto_data(pinfo->pool, pinfo, proto_nbap, 0);",
          "6668: }",
          "6670: static guint32 private_data_get_transportLayerAddress_ipv4(packet_info *pinfo)",
          "6671: {",
          "6672:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6673:   return private_data->transportLayerAddress_ipv4;",
          "6674: }",
          "6676: static void private_data_set_transportLayerAddress_ipv4(packet_info *pinfo, guint32 transportLayerAddress_ipv4)",
          "6677: {",
          "6678:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6679:   private_data->transportLayerAddress_ipv4 = transportLayerAddress_ipv4;",
          "6680: }",
          "6682: static guint16 private_data_get_binding_id_port(packet_info *pinfo)",
          "6683: {",
          "6684:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6685:   return private_data->binding_id_port;",
          "6686: }",
          "6688: static void private_data_set_binding_id_port(packet_info *pinfo, guint16 binding_id_port)",
          "6689: {",
          "6690:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6691:   private_data->binding_id_port = binding_id_port;",
          "6692: }",
          "6694: static guint32 private_data_get_ul_scrambling_code(packet_info *pinfo)",
          "6695: {",
          "6696:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6697:   return private_data->ul_scrambling_code;",
          "6698: }",
          "6700: static void private_data_set_ul_scrambling_code(packet_info *pinfo, guint32 ul_scrambling_code)",
          "6701: {",
          "6702:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6703:   private_data->ul_scrambling_code = ul_scrambling_code;",
          "6704: }",
          "6706: static enum TransportFormatSet_type_enum private_data_get_transport_format_set_type(packet_info *pinfo)",
          "6707: {",
          "6708:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6709:   return private_data->transport_format_set_type;",
          "6710: }",
          "6712: static void private_data_set_transport_format_set_type(packet_info *pinfo, enum TransportFormatSet_type_enum transport_format_set_type)",
          "6713: {",
          "6714:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6715:   private_data->transport_format_set_type = transport_format_set_type;",
          "6716: }",
          "6718: static guint32 private_data_get_procedure_code(packet_info *pinfo)",
          "6719: {",
          "6720:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6721:   return private_data->procedure_code;",
          "6722: }",
          "6724: static void private_data_set_procedure_code(packet_info *pinfo, guint32 procedure_code)",
          "6725: {",
          "6726:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6727:   private_data->procedure_code = procedure_code;",
          "6728: }",
          "6730: static guint private_data_get_num_items(packet_info *pinfo)",
          "6731: {",
          "6732:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6733:   return private_data->num_items;",
          "6734: }",
          "6736: static void private_data_set_num_items(packet_info *pinfo, guint num_items)",
          "6737: {",
          "6738:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6739:   private_data->num_items = num_items;",
          "6740: }",
          "6742: static guint private_data_increment_num_items(packet_info *pinfo)",
          "6743: {",
          "6744:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6745:   private_data->num_items++;",
          "6746:   return private_data->num_items;",
          "6747: }",
          "6749: static guint32 private_data_get_com_context_id(packet_info *pinfo)",
          "6750: {",
          "6751:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6752:   return private_data->com_context_id;",
          "6753: }",
          "6755: static void private_data_set_com_context_id(packet_info *pinfo, guint32 com_context_id)",
          "6756: {",
          "6757:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6758:   private_data->com_context_id = com_context_id;",
          "6759: }",
          "6761: static gint private_data_get_num_dch_in_flow(packet_info *pinfo)",
          "6762: {",
          "6763:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6764:   return private_data->num_dch_in_flow;",
          "6765: }",
          "6767: static void private_data_set_num_dch_in_flow(packet_info *pinfo, gint num_dch_in_flow)",
          "6768: {",
          "6769:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6770:   private_data->num_dch_in_flow = num_dch_in_flow;",
          "6771: }",
          "6773: static gint private_data_increment_num_dch_in_flow(packet_info *pinfo)",
          "6774: {",
          "6775:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6776:   private_data->num_dch_in_flow++;",
          "6777:   return private_data->num_dch_in_flow;",
          "6778: }",
          "6780: static gint private_data_get_hrnti(packet_info *pinfo)",
          "6781: {",
          "6782:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6783:   return private_data->hrnti;",
          "6784: }",
          "6786: static void private_data_set_hrnti(packet_info *pinfo, gint hrnti)",
          "6787: {",
          "6788:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6789:   private_data->hrnti = hrnti;",
          "6790: }",
          "6792: static guint private_data_get_node_b_com_context_id(packet_info *pinfo)",
          "6793: {",
          "6794:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6795:   return private_data->node_b_com_context_id;",
          "6796: }",
          "6798: static void private_data_set_node_b_com_context_id(packet_info *pinfo, guint node_b_com_context_id)",
          "6799: {",
          "6800:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6801:   private_data->node_b_com_context_id = node_b_com_context_id;",
          "6802: }",
          "6804: static guint32 private_data_get_protocol_ie_id(packet_info *pinfo)",
          "6805: {",
          "6806:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6807:   return private_data->protocol_ie_id;",
          "6808: }",
          "6810: static void private_data_set_protocol_ie_id(packet_info *pinfo, guint32 protocol_ie_id)",
          "6811: {",
          "6812:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6813:   private_data->protocol_ie_id = protocol_ie_id;",
          "6814: }",
          "6816: static guint32 private_data_get_dd_mode(packet_info *pinfo)",
          "6817: {",
          "6818:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6819:   return private_data->dd_mode;",
          "6820: }",
          "6822: static void private_data_set_dd_mode(packet_info *pinfo, guint32 dd_mode)",
          "6823: {",
          "6824:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6825:   private_data->dd_mode = dd_mode;",
          "6826: }",
          "6828: static guint32 private_data_get_transaction_id(packet_info *pinfo)",
          "6829: {",
          "6830:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6831:   return private_data->transaction_id;",
          "6832: }",
          "6834: static void private_data_set_transaction_id(packet_info *pinfo, guint32 transaction_id)",
          "6835: {",
          "6836:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6837:   private_data->transaction_id = transaction_id;",
          "6838: }",
          "6840: static guint32 private_data_get_t_dch_id(packet_info *pinfo)",
          "6841: {",
          "6842:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6843:   return private_data->t_dch_id;",
          "6844: }",
          "6846: static void private_data_set_t_dch_id(packet_info *pinfo, guint32 t_dch_id)",
          "6847: {",
          "6848:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6849:   private_data->t_dch_id = t_dch_id;",
          "6850: }",
          "6852: static guint32 private_data_get_dch_id(packet_info *pinfo)",
          "6853: {",
          "6854:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6855:   return private_data->dch_id;",
          "6856: }",
          "6858: static void private_data_set_dch_id(packet_info *pinfo, guint32 dch_id)",
          "6859: {",
          "6860:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6861:   private_data->dch_id = dch_id;",
          "6862: }",
          "6864: static guint32 private_data_get_prev_dch_id(packet_info *pinfo)",
          "6865: {",
          "6866:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6867:   return private_data->prev_dch_id;",
          "6868: }",
          "6870: static void private_data_set_prev_dch_id(packet_info *pinfo, guint32 prev_dch_id)",
          "6871: {",
          "6872:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6873:   private_data->prev_dch_id = prev_dch_id;",
          "6874: }",
          "6876: static guint32 private_data_get_common_physical_channel_id(packet_info *pinfo)",
          "6877: {",
          "6878:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6879:   return private_data->common_physical_channel_id;",
          "6880: }",
          "6882: static void private_data_set_common_physical_channel_id(packet_info *pinfo, guint32 common_physical_channel_id)",
          "6883: {",
          "6884:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6885:   private_data->common_physical_channel_id = common_physical_channel_id;",
          "6886: }",
          "6888: static guint32 private_data_get_e_dch_macdflow_id(packet_info *pinfo)",
          "6889: {",
          "6890:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6891:   return private_data->e_dch_macdflow_id;",
          "6892: }",
          "6894: static void private_data_set_e_dch_macdflow_id(packet_info *pinfo, guint32 e_dch_macdflow_id)",
          "6895: {",
          "6896:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6897:   private_data->e_dch_macdflow_id = e_dch_macdflow_id;",
          "6898: }",
          "6900: static guint32 private_data_get_hsdsch_macdflow_id(packet_info *pinfo)",
          "6901: {",
          "6902:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6903:   return private_data->hsdsch_macdflow_id;",
          "6904: }",
          "6906: static void private_data_set_hsdsch_macdflow_id(packet_info *pinfo, guint32 hsdsch_macdflow_id)",
          "6907: {",
          "6908:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6909:   private_data->hsdsch_macdflow_id = hsdsch_macdflow_id;",
          "6910: }",
          "6912: static guint32 private_data_get_e_dch_ddi_value(packet_info *pinfo)",
          "6913: {",
          "6914:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6915:   return private_data->e_dch_ddi_value;",
          "6916: }",
          "6918: static void private_data_set_e_dch_ddi_value(packet_info *pinfo, guint32 e_dch_ddi_value)",
          "6919: {",
          "6920:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6921:   private_data->e_dch_ddi_value = e_dch_ddi_value;",
          "6922: }",
          "6924: static guint32 private_data_get_logical_channel_id(packet_info *pinfo)",
          "6925: {",
          "6926:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6927:   return private_data->logical_channel_id;",
          "6928: }",
          "6930: static void private_data_set_logical_channel_id(packet_info *pinfo, guint32 logical_channel_id)",
          "6931: {",
          "6932:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6933:   private_data->logical_channel_id = logical_channel_id;",
          "6934: }",
          "6936: static guint32 private_data_get_common_macdflow_id(packet_info *pinfo)",
          "6937: {",
          "6938:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6939:   return private_data->common_macdflow_id;",
          "6940: }",
          "6942: static void private_data_set_common_macdflow_id(packet_info *pinfo, guint32 common_macdflow_id)",
          "6943: {",
          "6944:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6945:   private_data->common_macdflow_id = common_macdflow_id;",
          "6946: }",
          "6948: static guint32 private_data_get_mac_d_pdu_size(packet_info *pinfo)",
          "6949: {",
          "6950:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6951:   return private_data->mac_d_pdu_size;",
          "6952: }",
          "6954: static void private_data_set_mac_d_pdu_size(packet_info *pinfo, guint32 mac_d_pdu_size)",
          "6955: {",
          "6956:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6957:   private_data->mac_d_pdu_size = mac_d_pdu_size;",
          "6958: }",
          "6960: static guint32 private_data_get_common_transport_channel_id(packet_info *pinfo)",
          "6961: {",
          "6962:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6963:   return private_data->common_transport_channel_id;",
          "6964: }",
          "6966: static void private_data_set_common_transport_channel_id(packet_info *pinfo, guint32 common_transport_channel_id)",
          "6967: {",
          "6968:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6969:   private_data->common_transport_channel_id = common_transport_channel_id;",
          "6970: }",
          "6972: static gint private_data_get_paging_indications(packet_info *pinfo)",
          "6973: {",
          "6974:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6975:   return private_data->paging_indications;",
          "6976: }",
          "6978: static void private_data_set_paging_indications(packet_info *pinfo, gint paging_indications)",
          "6979: {",
          "6980:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6981:   private_data->paging_indications = paging_indications;",
          "6982: }",
          "6984: static guint32 private_data_get_ib_type(packet_info *pinfo)",
          "6985: {",
          "6986:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6987:   return private_data->ib_type;",
          "6988: }",
          "6990: static void private_data_set_ib_type(packet_info *pinfo, guint32 ib_type)",
          "6991: {",
          "6992:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6993:   private_data->ib_type = ib_type;",
          "6994: }",
          "6996: static guint32 private_data_get_segment_type(packet_info *pinfo)",
          "6997: {",
          "6998:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "6999:   return private_data->segment_type;",
          "7000: }",
          "7002: static void private_data_set_segment_type(packet_info *pinfo, guint32 segment_type)",
          "7003: {",
          "7004:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "7005:   private_data->segment_type = segment_type;",
          "7006: }",
          "7008: static gboolean private_data_get_crnc_context_present(packet_info *pinfo)",
          "7009: {",
          "7010:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "7011:   return private_data->crnc_context_present;",
          "7012: }",
          "7014: static void private_data_set_crnc_context_present(packet_info *pinfo, gboolean crnc_context_present)",
          "7015: {",
          "7016:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "7017:   private_data->crnc_context_present = crnc_context_present;",
          "7018: }",
          "7020: static guint8 private_data_get_dch_crc_present(packet_info *pinfo)",
          "7021: {",
          "7022:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "7023:   return private_data->dch_crc_present;",
          "7024: }",
          "7026: static void private_data_set_dch_crc_present(packet_info *pinfo, guint8 dch_crc_present)",
          "7027: {",
          "7028:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "7029:   private_data->dch_crc_present = dch_crc_present;",
          "7030: }",
          "7032: static nbap_dch_channel_info_t* private_data_get_nbap_dch_chnl_info(packet_info *pinfo)",
          "7033: {",
          "7034:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "7035:   return private_data->nbap_dch_chnl_info;",
          "7036: }",
          "7038: static nbap_edch_channel_info_t* private_data_get_nbap_edch_channel_info(packet_info *pinfo)",
          "7039: {",
          "7040:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "7041:   return private_data->nbap_edch_channel_info;",
          "7042: }",
          "7044: static gint* private_data_get_hsdsch_macdflow_ids(packet_info *pinfo)",
          "7045: {",
          "7046:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "7047:   return private_data->hsdsch_macdflow_ids;",
          "7048: }",
          "7050: static nbap_hsdsch_channel_info_t* private_data_get_nbap_hsdsch_channel_info(packet_info *pinfo)",
          "7051: {",
          "7052:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "7053:   return private_data->nbap_hsdsch_channel_info;",
          "7054: }",
          "7056: static nbap_common_channel_info_t* private_data_get_nbap_common_channel_info(packet_info *pinfo)",
          "7057: {",
          "7058:   nbap_private_data_t *private_data = (nbap_private_data_t*)nbap_get_private_data(pinfo);",
          "7059:   return private_data->nbap_common_channel_info;",
          "7060: }",
          "7068: static  const gchar *ProcedureID;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6896: static int",
          "6897: dissect_nbap_ProcedureCode(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6898:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6904:                             \"unknown message\"));",
          "6906:   return offset;",
          "6907: }",
          "",
          "[Removed Lines]",
          "6899:                                                             0U, 255U, &ProcedureCode, FALSE);",
          "6901: #line 93 \"./asn1/nbap/nbap.cnf\"",
          "6902:      col_add_fstr(actx->pinfo->cinfo, COL_INFO, \"%s \",",
          "6903:                  val_to_str(ProcedureCode, nbap_ProcedureCode_vals,",
          "",
          "[Added Lines]",
          "7334: #line 94 \"./asn1/nbap/nbap.cnf\"",
          "7335:   guint32 procedure_code;",
          "7337:                                                             0U, 255U, &procedure_code, FALSE);",
          "7339:   private_data_set_procedure_code(actx->pinfo, procedure_code);",
          "7340:   col_add_fstr(actx->pinfo->cinfo, COL_INFO, \"%s \",",
          "7341:                  val_to_str(procedure_code, nbap_ProcedureCode_vals,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6918: static int",
          "6919: dissect_nbap_DdMode(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6920:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "6923:   return offset;",
          "6924: }",
          "",
          "[Removed Lines]",
          "6921:                                      3, &ddMode, TRUE, 0, NULL);",
          "",
          "[Added Lines]",
          "7360: #line 102 \"./asn1/nbap/nbap.cnf\"",
          "7361:   guint32 dd_mode;",
          "7363:                                      3, &dd_mode, TRUE, 0, NULL);",
          "7365:   private_data_set_dd_mode(actx->pinfo, dd_mode);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6933: static int",
          "6934: dissect_nbap_ProcedureID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6938:   ProcedureID = NULL;",
          "6940:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "6941:                                    ett_nbap_ProcedureID, ProcedureID_sequence);",
          "6944:   ProcedureID = wmem_strdup_printf(wmem_packet_scope(), \"%s/%s\",",
          "6949:   return offset;",
          "6950: }",
          "",
          "[Removed Lines]",
          "6935: #line 100 \"./asn1/nbap/nbap.cnf\"",
          "6936:   ProcedureCode = 0xFFFF;",
          "6937:   ddMode = 0xFFFF;",
          "6943: #line 106 \"./asn1/nbap/nbap.cnf\"",
          "6945:                                  val_to_str(ProcedureCode, VALS(nbap_ProcedureCode_vals), \"unknown(%u)\"),",
          "6946:                                  val_to_str(ddMode, VALS(nbap_DdMode_vals), \"unknown(%u)\"));",
          "",
          "[Added Lines]",
          "7382: #line 108 \"./asn1/nbap/nbap.cnf\"",
          "7388:                                  val_to_str(private_data_get_procedure_code(actx->pinfo), VALS(nbap_ProcedureCode_vals), \"unknown(%u)\"),",
          "7389:                                  val_to_str(private_data_get_dd_mode(actx->pinfo), VALS(nbap_DdMode_vals), \"unknown(%u)\"));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "8183: static int",
          "8184: dissect_nbap_ProtocolIE_ID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8185:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8189:   if (tree) {",
          "8191:   }",
          "8193:   return offset;",
          "8194: }",
          "",
          "[Removed Lines]",
          "8186:                                                             0U, maxProtocolIEs, &ProtocolIE_ID, FALSE);",
          "8188: #line 82 \"./asn1/nbap/nbap.cnf\"",
          "8190:     proto_item_append_text(proto_item_get_parent_nth(actx->created_item, 2), \": %s\", val_to_str_ext(ProtocolIE_ID, &nbap_ProtocolIE_ID_vals_ext, \"unknown (%d)\"));",
          "",
          "[Added Lines]",
          "8630: #line 81 \"./asn1/nbap/nbap.cnf\"",
          "8631:   guint32 protocol_ie_id;",
          "8633:                                                             0U, maxProtocolIEs, &protocol_ie_id, FALSE);",
          "8637:     proto_item_append_text(proto_item_get_parent_nth(actx->created_item, 2), \": %s\", val_to_str_ext(protocol_ie_id, &nbap_ProtocolIE_ID_vals_ext, \"unknown (%d)\"));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "8198: static int",
          "8199: dissect_nbap_T_shortTransActionId(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8200:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8203:   return offset;",
          "8204: }",
          "",
          "[Removed Lines]",
          "8201:                                                             0U, 127U, &TransactionID, FALSE);",
          "",
          "[Added Lines]",
          "8648: #line 116 \"./asn1/nbap/nbap.cnf\"",
          "8649:   guint32 transaction_id;",
          "8651:                                                             0U, 127U, &transaction_id, FALSE);",
          "8653:   private_data_set_transaction_id(actx->pinfo, transaction_id);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "8208: static int",
          "8209: dissect_nbap_T_longTransActionId(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8210:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8213:   return offset;",
          "8214: }",
          "",
          "[Removed Lines]",
          "8211:                                                             0U, 32767U, &TransactionID, FALSE);",
          "",
          "[Added Lines]",
          "8664: #line 121 \"./asn1/nbap/nbap.cnf\"",
          "8665:   guint32 transaction_id;",
          "8667:                                                             0U, 32767U, &transaction_id, FALSE);",
          "8669:   private_data_set_transaction_id(actx->pinfo, transaction_id);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "8475: static int",
          "8476: dissect_nbap_UL_ScramblingCodeNumber(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8478:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8479:                                                             0U, 16777215U, &ul_scrambling_code, FALSE);",
          "8481:   if(ul_scrambling_code != 0 && com_context_id != 0) {",
          "8482:     wmem_tree_insert32(nbap_scrambling_code_crncc_map,ul_scrambling_code,GUINT_TO_POINTER(com_context_id));",
          "8483:   }",
          "",
          "[Removed Lines]",
          "8477: #line 784 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "8937: #line 802 \"./asn1/nbap/nbap.cnf\"",
          "8938:   guint32 ul_scrambling_code;",
          "8939:   guint32 com_context_id;",
          "8943:   private_data_set_ul_scrambling_code(actx->pinfo, ul_scrambling_code);",
          "8944:   com_context_id = private_data_get_com_context_id(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "8741: static int",
          "8742: dissect_nbap_E_DCH_MACdFlow_ID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8745:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8746:                                                             0U, maxNrOfEDCHMACdFlows_1, &e_dch_macdflow_id, FALSE);",
          "",
          "[Removed Lines]",
          "8743: #line 755 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "9207: #line 767 \"./asn1/nbap/nbap.cnf\"",
          "9208:   guint32 e_dch_macdflow_id;",
          "9212:   private_data_set_e_dch_macdflow_id(actx->pinfo, e_dch_macdflow_id);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "8757: static int",
          "8758: dissect_nbap_BindingID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8760:   tvbuff_t *parameter_tvb=NULL;",
          "8762:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "8759: #line 768 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "9223: #line 786 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "8767:     return offset;",
          "8769:   if(tvb_reported_length(parameter_tvb)>=2){",
          "8772:   }",
          "",
          "[Removed Lines]",
          "8770:     BindingID_port = tvb_get_ntohs(parameter_tvb,0);",
          "8771:     proto_item_append_text(actx->created_item, \" (%u)\",BindingID_port);",
          "",
          "[Added Lines]",
          "9234:     private_data_set_binding_id_port(actx->pinfo, tvb_get_ntohs(parameter_tvb,0));",
          "9235:     proto_item_append_text(actx->created_item, \" (%u)\",private_data_get_binding_id_port(actx->pinfo));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "8781: static int",
          "8782: dissect_nbap_TransportLayerAddress(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8784:   tvbuff_t *parameter_tvb=NULL;",
          "8785:   proto_item *item;",
          "8786:   proto_tree *subtree, *nsap_tree;",
          "",
          "[Removed Lines]",
          "8783: #line 661 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "9247: #line 663 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "8799:     if (tvb_len==4){",
          "8801:          proto_tree_add_item(subtree, hf_nbap_transportLayerAddress_ipv4, parameter_tvb, 0, tvb_len, ENC_BIG_ENDIAN);",
          "8803:     }",
          "8804:     if (tvb_len==16){",
          "",
          "[Removed Lines]",
          "8802:          transportLayerAddress_ipv4 = tvb_get_ipv4(parameter_tvb, 0);",
          "",
          "[Added Lines]",
          "9266:          private_data_set_transportLayerAddress_ipv4(actx->pinfo, tvb_get_ipv4(parameter_tvb, 0));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "8822:         nsap_tree = proto_item_add_subtree(item, ett_nbap_TransportLayerAddress_nsap);",
          "8823:         if(tvb_get_ntoh24(parameter_tvb,0) == 0x350001){",
          "8826:         }",
          "8827:         dissect_nsap(nsap_tvb, 0, 20, nsap_tree);",
          "8828:     }",
          "",
          "[Removed Lines]",
          "8825:             transportLayerAddress_ipv4 = tvb_get_ipv4(parameter_tvb, 3);",
          "",
          "[Added Lines]",
          "9289:             private_data_set_transportLayerAddress_ipv4(actx->pinfo, tvb_get_ipv4(parameter_tvb, 3));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "10102: static int",
          "10103: dissect_nbap_CFN(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10105:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "10111:   return offset;",
          "10112: }",
          "",
          "[Removed Lines]",
          "10104: #line 2246 \"./asn1/nbap/nbap.cnf\"",
          "10106:                                                             0U, 255U, &cfn, FALSE);",
          "",
          "[Added Lines]",
          "10569:                                                             0U, 255U, NULL, FALSE);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "10355: static int",
          "10356: dissect_nbap_HSDSCH_RNTI(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10358: umts_fp_conversation_info_t *umts_fp_conversation_info = NULL;",
          "10359: fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "10360: address     null_addr;",
          "10361: conversation_t   *conversation = NULL;",
          "10362: int i;",
          "10364:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "10365:                                                             0U, 65535U, &hrnti, FALSE);",
          "10368:     if (actx->pinfo->fd->flags.visited){",
          "10369:         return offset;",
          "",
          "[Removed Lines]",
          "10357: #line 2208 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "10817: #line 2347 \"./asn1/nbap/nbap.cnf\"",
          "10818:   gint hrnti;",
          "10824: nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;",
          "10825: nbap_hsdsch_channel_info = private_data_get_nbap_hsdsch_channel_info(actx->pinfo);",
          "10830:   private_data_set_hrnti(actx->pinfo, hrnti);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "10381:                 DISSECTOR_ASSERT(umts_fp_conversation_info != NULL);",
          "10382:                 fp_hsdsch_channel_info = (fp_hsdsch_channel_info_t*)umts_fp_conversation_info->channel_specific_info;",
          "10383:                 DISSECTOR_ASSERT(fp_hsdsch_channel_info != NULL);",
          "10385:             }",
          "10386:          }",
          "10387:      }",
          "",
          "[Removed Lines]",
          "10384:                 fp_hsdsch_channel_info->hrnti = hrnti;",
          "",
          "[Added Lines]",
          "10848:                 fp_hsdsch_channel_info->hrnti = private_data_get_hrnti(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "10599: static int",
          "10600: dissect_nbap_CommonTransportChannelID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10602:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "10603:                                                             0U, 255U, &commontransportchannelid, FALSE);",
          "10605: if(commontransportchannelid<maxNrOfDCHs)",
          "10606:   nbap_dch_chnl_info[commontransportchannelid].next_dch = 0;",
          "",
          "[Removed Lines]",
          "10601: #line 750 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "11065: #line 758 \"./asn1/nbap/nbap.cnf\"",
          "11066:   guint32 commontransportchannelid;",
          "11067:   nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "11068:   nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "11072: private_data_set_common_transport_channel_id(actx->pinfo, commontransportchannelid);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "11410: static int",
          "11411: dissect_nbap_CommonPhysicalChannelID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "11413:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "11414:                                                             0U, 255U, &commonphysicalchannelid, FALSE);",
          "11416: if(commonphysicalchannelid<maxNrOfDCHs)",
          "11417:   nbap_dch_chnl_info[commonphysicalchannelid].next_dch = 0;",
          "",
          "[Removed Lines]",
          "11412: #line 745 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "11880: #line 749 \"./asn1/nbap/nbap.cnf\"",
          "11881: guint32 commonphysicalchannelid;",
          "11882: nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "11883: nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "11887: private_data_set_common_physical_channel_id(actx->pinfo, commonphysicalchannelid);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "11580: static int",
          "11581: dissect_nbap_Common_MACFlow_ID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "11584:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "11585:                                                             0U, maxNrOfCommonMACFlows_1, &common_macdflow_id, FALSE);",
          "",
          "[Removed Lines]",
          "11582: #line 2065 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "12054: #line 2190 \"./asn1/nbap/nbap.cnf\"",
          "12055: guint32 common_macdflow_id;",
          "12059: private_data_set_common_macdflow_id(actx->pinfo, common_macdflow_id);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "11662: static int",
          "11663: dissect_nbap_PayloadCRC_PresenceIndicator(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "11665: guint32 payload_crc_value;",
          "11667:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "11664: #line 709 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "12137: #line 711 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "11671:     if(payload_crc_value == 0){",
          "11673:     }else{",
          "11675:     }",
          "",
          "[Removed Lines]",
          "11672:         g_nbap_msg_info_for_fp.dch_crc_present = TRUE;",
          "11674:         g_nbap_msg_info_for_fp.dch_crc_present = FALSE;",
          "",
          "[Added Lines]",
          "12145:         private_data_set_dch_crc_present(actx->pinfo, TRUE);",
          "12147:         private_data_set_dch_crc_present(actx->pinfo, FALSE);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "11714: static int",
          "11715: dissect_nbap_LogicalChannelID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "11718:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "11719:                                                             1U, 15U, &logical_channel_id, FALSE);",
          "11722:     if(num_items>0)",
          "",
          "[Removed Lines]",
          "11716: #line 1705 \"./asn1/nbap/nbap.cnf\"",
          "11723:         nbap_edch_channel_info[e_dch_macdflow_id].lchId[num_items-1] = logical_channel_id;",
          "",
          "[Added Lines]",
          "12189: #line 1801 \"./asn1/nbap/nbap.cnf\"",
          "12190:   guint32 logical_channel_id;",
          "12191:   guint num_items;",
          "12192:   nbap_edch_channel_info_t* nbap_edch_channel_info;",
          "12193:   nbap_edch_channel_info = private_data_get_nbap_edch_channel_info(actx->pinfo);",
          "12199:     private_data_set_logical_channel_id(actx->pinfo, logical_channel_id);",
          "12200:     num_items = private_data_get_num_items(actx->pinfo);",
          "12202:         nbap_edch_channel_info[private_data_get_e_dch_macdflow_id(actx->pinfo)].lchId[num_items-1] = private_data_get_logical_channel_id(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "11732: static int",
          "11733: dissect_nbap_MAC_PDU_SizeExtended(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "11735:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "11736:                                                             1U, 1504U, NULL, TRUE);",
          "11738:     if(nbap_hsdsch_channel_info[hsdsch_macdflow_id].crnc_port != 0){",
          "11739:             nbap_hsdsch_channel_info[hsdsch_macdflow_id].entity = ehs;",
          "11740:     }",
          "",
          "[Removed Lines]",
          "11734: #line 1807 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "12213: #line 1919 \"./asn1/nbap/nbap.cnf\"",
          "12214: guint32 hsdsch_macdflow_id;",
          "12215: nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;",
          "12216: nbap_hsdsch_channel_info = private_data_get_nbap_hsdsch_channel_info(actx->pinfo);",
          "12220:     hsdsch_macdflow_id = private_data_get_hsdsch_macdflow_id(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "12155: static int",
          "12156: dissect_nbap_CommonMACFlow_Specific_InfoItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "12158:     address     dst_addr;",
          "12163:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "12164:                                    ett_nbap_CommonMACFlow_Specific_InfoItem, CommonMACFlow_Specific_InfoItem_sequence);",
          "12169:         return offset;",
          "12170:     }",
          "12172:     set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "12175:     copy_address(&(nbap_common_channel_info[common_macdflow_id].crnc_address),&dst_addr);",
          "",
          "[Removed Lines]",
          "12157: #line 2072 \"./asn1/nbap/nbap.cnf\"",
          "12159:     transportLayerAddress_ipv4 = 0;",
          "12160:     BindingID_port = 0;",
          "12161:     num_items++;",
          "12167:     if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "12168:     {",
          "12176:     nbap_common_channel_info[common_macdflow_id].crnc_port = BindingID_port;",
          "",
          "[Added Lines]",
          "12640: #line 2198 \"./asn1/nbap/nbap.cnf\"",
          "12642:     guint32 transportLayerAddress_ipv4;",
          "12643:     guint16 bindingID;",
          "12644:     guint32 common_macdflow_id;",
          "12645:     private_data_set_transportLayerAddress_ipv4(actx->pinfo, 0);",
          "12646:     private_data_set_binding_id_port(actx->pinfo, 0);",
          "12647:     private_data_increment_num_items(actx->pinfo);",
          "12648:     nbap_common_channel_info_t* nbap_common_channel_info;",
          "12649:     nbap_common_channel_info = private_data_get_nbap_common_channel_info(actx->pinfo);",
          "12655:     transportLayerAddress_ipv4 = private_data_get_transportLayerAddress_ipv4(actx->pinfo);",
          "12656:     bindingID = private_data_get_binding_id_port(actx->pinfo);",
          "12657:     if (actx->pinfo->fd->flags.visited || transportLayerAddress_ipv4 == 0 || bindingID == 0){",
          "12664:     common_macdflow_id = private_data_get_common_macdflow_id(actx->pinfo);",
          "12666:     nbap_common_channel_info[common_macdflow_id].crnc_port = private_data_get_binding_id_port(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "12200: static int",
          "12201: dissect_nbap_MACdPDU_Size(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "12203:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "12207:     if (actx->pinfo->fd->flags.visited)",
          "12208:     {",
          "12209:         return offset;",
          "12210:     }",
          "12211:     if(num_items>0)",
          "",
          "[Removed Lines]",
          "12202: #line 1695 \"./asn1/nbap/nbap.cnf\"",
          "12204:                                                             1U, 5000U, &MACdPDU_Size, TRUE);",
          "12212:         nbap_edch_channel_info[e_dch_macdflow_id].edch_macd_pdu_size[num_items-1] = MACdPDU_Size;",
          "",
          "[Added Lines]",
          "12692: #line 1785 \"./asn1/nbap/nbap.cnf\"",
          "12693: guint32 mac_d_pdu_size;",
          "12694: guint num_items;",
          "12695: nbap_edch_channel_info_t* nbap_edch_channel_info;",
          "12696: nbap_edch_channel_info = private_data_get_nbap_edch_channel_info(actx->pinfo);",
          "12698:                                                             1U, 5000U, &mac_d_pdu_size, TRUE);",
          "12701:     private_data_set_mac_d_pdu_size(actx->pinfo, mac_d_pdu_size);",
          "12706:     num_items = private_data_get_num_items(actx->pinfo);",
          "12708:         nbap_edch_channel_info[private_data_get_e_dch_macdflow_id(actx->pinfo)].edch_macd_pdu_size[num_items-1] = private_data_get_mac_d_pdu_size(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "12507: static int",
          "12508: dissect_nbap_CommonTransportChannel_InformationResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "12510: address dst_addr;",
          "12511: nbap_setup_conv_t *request_conv;",
          "12512: conversation_t *conv;",
          "12514: nbap_debug(\"Frame %u CommonTransportChannel-InformationResponse Start\", actx->pinfo->num);",
          "12519:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "12520:                                    ett_nbap_CommonTransportChannel_InformationResponse, CommonTransportChannel_InformationResponse_sequence);",
          "12524:     return offset;",
          "12525:   }",
          "12527:   set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "12531:   if(request_conv == NULL){",
          "12532:     return offset;",
          "",
          "[Removed Lines]",
          "12509: #line 175 \"./asn1/nbap/nbap.cnf\"",
          "12516: transportLayerAddress_ipv4 = 0;",
          "12517: BindingID_port = 0;",
          "12523:   if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0){",
          "12529:   request_conv = find_setup_conv(TransactionID, ddMode, commontransportchannelid);",
          "",
          "[Added Lines]",
          "13005: #line 184 \"./asn1/nbap/nbap.cnf\"",
          "13009: guint32 transportLayerAddress_ipv4;",
          "13010: guint16 bindingID;",
          "13014: private_data_set_transportLayerAddress_ipv4(actx->pinfo, 0);",
          "13015: private_data_set_binding_id_port(actx->pinfo, 0);",
          "13021:   transportLayerAddress_ipv4 = private_data_get_transportLayerAddress_ipv4(actx->pinfo);",
          "13022:   bindingID = private_data_get_binding_id_port(actx->pinfo);",
          "13023:   if (actx->pinfo->fd->flags.visited || transportLayerAddress_ipv4 == 0 || bindingID == 0){",
          "13029:   request_conv = find_setup_conv(private_data_get_transaction_id(actx->pinfo),private_data_get_dd_mode(actx->pinfo),private_data_get_common_transport_channel_id(actx->pinfo));",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "12535:   conv = request_conv->conv;",
          "12536:   conversation_set_addr2(conv, &dst_addr);",
          "12539:   delete_setup_conv(request_conv);",
          "12540:   nbap_debug(\"    Frame %u conversation setup frame: %u %s:%u -> %s:%u\", actx->pinfo->num, conv->setup_frame,",
          "",
          "[Removed Lines]",
          "12537:   conversation_set_port2(conv, BindingID_port);",
          "",
          "[Added Lines]",
          "13037:   conversation_set_port2(conv, bindingID);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "13458: static int",
          "13459: dissect_nbap_CRNC_CommunicationContextID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "13461:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "13462:                                                             0U, 1048575U, &com_context_id, FALSE);",
          "",
          "[Removed Lines]",
          "13460: #line 2182 \"./asn1/nbap/nbap.cnf\"",
          "13464: crcn_context_present = TRUE;",
          "",
          "[Added Lines]",
          "13960: #line 2317 \"./asn1/nbap/nbap.cnf\"",
          "13961: guint32 com_context_id;",
          "13965: private_data_set_com_context_id(actx->pinfo, com_context_id);",
          "13966: private_data_set_crnc_context_present(actx->pinfo, TRUE);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "14843: static int",
          "14844: dissect_nbap_DCH_ID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "14845:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "14846:                                                             0U, 255U, &t_dch_id, FALSE);",
          "14848:   return offset;",
          "14849: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15347: #line 722 \"./asn1/nbap/nbap.cnf\"",
          "15348:   guint32 t_dch_id;",
          "15352:   private_data_set_t_dch_id(actx->pinfo, t_dch_id);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "14889: static int",
          "14890: dissect_nbap_T_dCH_ID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "14891: #line 727 \"./asn1/nbap/nbap.cnf\"",
          "14893:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "14894:                                                             0U, 255U, &dch_id, FALSE);",
          "",
          "[Removed Lines]",
          "14896:     if(g_num_dch_in_flow>0){",
          "14897:         g_dch_ids_in_flow_list[g_num_dch_in_flow-1]=dch_id;",
          "14898:         nbap_dch_chnl_info[dch_id].next_dch = 0;",
          "14899:         if(prev_dch_id != 0){",
          "14900:             nbap_dch_chnl_info[prev_dch_id].next_dch = dch_id;",
          "14901:         }",
          "14902:     }",
          "",
          "[Added Lines]",
          "15400:   guint32 dch_id;",
          "15401:   gint num_dch_in_flow;",
          "15402:   nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "15403:   nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "15407:   num_dch_in_flow = private_data_get_num_dch_in_flow(actx->pinfo);",
          "15408:   private_data_set_dch_id(actx->pinfo, dch_id);",
          "15409:   if(num_dch_in_flow>0){",
          "15410:       nbap_dch_chnl_info[dch_id].next_dch = 0;",
          "15411:       if(private_data_get_prev_dch_id(actx->pinfo) != 0){",
          "15412:           nbap_dch_chnl_info[private_data_get_prev_dch_id(actx->pinfo)].next_dch = dch_id;",
          "15413:       }",
          "15414:   }",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "14911: static int",
          "14912: dissect_nbap_TransportFormatSet_NrOfTransportBlocks(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "14914: guint32 NrOfTransportBlocks;",
          "14916:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "14917:                                                             0U, 512U, &NrOfTransportBlocks, FALSE);",
          "14922:             case NBAP_DCH_UL:",
          "14923:                 nbap_dch_chnl_info[dch_id].num_ul_chans++;",
          "14924:                 nbap_dch_chnl_info[dch_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "",
          "[Removed Lines]",
          "14913: #line 1116 \"./asn1/nbap/nbap.cnf\"",
          "14920:     if(num_items>0){",
          "14921:         switch(transportFormatSet_type){",
          "",
          "[Added Lines]",
          "15425: #line 1171 \"./asn1/nbap/nbap.cnf\"",
          "15427: guint num_items;",
          "15428: guint32 dch_id;",
          "15429: guint32 common_physical_channel_id;",
          "15430: guint32 common_transport_channel_id;",
          "15431: nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "15432: nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "15438:     if(private_data_get_num_items(actx->pinfo)>0){",
          "15439:         num_items = private_data_get_num_items(actx->pinfo);",
          "15440:         dch_id = private_data_get_dch_id(actx->pinfo);",
          "15441:         common_physical_channel_id = private_data_get_common_physical_channel_id(actx->pinfo);",
          "15442:         common_transport_channel_id = private_data_get_common_transport_channel_id(actx->pinfo);",
          "15443:         switch(private_data_get_transport_format_set_type(actx->pinfo)){",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "14928:                 nbap_dch_chnl_info[dch_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "14929:                 break;",
          "14930:             case NBAP_CPCH:",
          "14935:                 break;",
          "14936:             case NBAP_PCH:",
          "14941:                 break;",
          "14942:             default:",
          "14943:                 break;",
          "",
          "[Removed Lines]",
          "14931:                 nbap_dch_chnl_info[commonphysicalchannelid].num_ul_chans++;",
          "14932:                 nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "14933:                 nbap_dch_chnl_info[commonphysicalchannelid].num_dl_chans++;",
          "14934:                 nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "14937:                 nbap_dch_chnl_info[commontransportchannelid].num_ul_chans++;",
          "14938:                 nbap_dch_chnl_info[commontransportchannelid].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "14939:                 nbap_dch_chnl_info[commontransportchannelid].num_dl_chans++;",
          "14940:                 nbap_dch_chnl_info[commontransportchannelid].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "",
          "[Added Lines]",
          "15453:                 nbap_dch_chnl_info[common_physical_channel_id].num_ul_chans++;",
          "15454:                 nbap_dch_chnl_info[common_physical_channel_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "15455:                 nbap_dch_chnl_info[common_physical_channel_id].num_dl_chans++;",
          "15456:                 nbap_dch_chnl_info[common_physical_channel_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "15459:                 nbap_dch_chnl_info[common_transport_channel_id].num_ul_chans++;",
          "15460:                 nbap_dch_chnl_info[common_transport_channel_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "15461:                 nbap_dch_chnl_info[common_transport_channel_id].num_dl_chans++;",
          "15462:                 nbap_dch_chnl_info[common_transport_channel_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "14954: static int",
          "14955: dissect_nbap_TransportFormatSet_TransportBlockSize(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "14957: guint32 TransportBlockSize;",
          "14959:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "14960:                                                             0U, 5000U, &TransportBlockSize, FALSE);",
          "14965:             case NBAP_DCH_UL:",
          "14966:                 nbap_dch_chnl_info[dch_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;",
          "14967:                 break;",
          "",
          "[Removed Lines]",
          "14956: #line 1148 \"./asn1/nbap/nbap.cnf\"",
          "14963:     if(num_items>0){",
          "14964:         switch(transportFormatSet_type){",
          "",
          "[Added Lines]",
          "15478: #line 1213 \"./asn1/nbap/nbap.cnf\"",
          "15480: guint num_items;",
          "15481: guint32 dch_id;",
          "15482: guint32 common_physical_channel_id;",
          "15483: guint32 common_transport_channel_id;",
          "15484: nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "15485: nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "15491:     if(private_data_get_num_items(actx->pinfo)>0){",
          "15492:         num_items = private_data_get_num_items(actx->pinfo);",
          "15493:         dch_id = private_data_get_dch_id(actx->pinfo);",
          "15494:         common_physical_channel_id = private_data_get_common_physical_channel_id(actx->pinfo);",
          "15495:         common_transport_channel_id = private_data_get_common_transport_channel_id(actx->pinfo);",
          "15496:         switch(private_data_get_transport_format_set_type(actx->pinfo)){",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "14969:                 nbap_dch_chnl_info[dch_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;",
          "14970:                 break;",
          "14971:             case NBAP_CPCH:",
          "14974:                 break;",
          "14975:             case NBAP_PCH:",
          "14978:                 break;",
          "14979:             default:",
          "14980:                 break;",
          "",
          "[Removed Lines]",
          "14972:                 nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_tf_size[num_items-1] = TransportBlockSize;",
          "14973:                 nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_tf_size[num_items-1] = TransportBlockSize;",
          "14976:                 nbap_dch_chnl_info[commontransportchannelid].ul_chan_tf_size[num_items-1] = TransportBlockSize;",
          "14977:                 nbap_dch_chnl_info[commontransportchannelid].dl_chan_tf_size[num_items-1] = TransportBlockSize;",
          "",
          "[Added Lines]",
          "15504:                 nbap_dch_chnl_info[common_physical_channel_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;",
          "15505:                 nbap_dch_chnl_info[common_physical_channel_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;",
          "15508:                 nbap_dch_chnl_info[common_transport_channel_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;",
          "15509:                 nbap_dch_chnl_info[common_transport_channel_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "15082: static int",
          "15083: dissect_nbap_TransportFormatSet_DynamicPartList_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "",
          "[Removed Lines]",
          "15084: #line 1112 \"./asn1/nbap/nbap.cnf\"",
          "15085:     num_items++;",
          "",
          "[Added Lines]",
          "15616: #line 1167 \"./asn1/nbap/nbap.cnf\"",
          "15617:     private_data_increment_num_items(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "15100: static int",
          "15101: dissect_nbap_TransportFormatSet_DynamicPartList(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15106:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "15102: #line 1109 \"./asn1/nbap/nbap.cnf\"",
          "15103:     num_items = 0;",
          "",
          "[Added Lines]",
          "15634: #line 1164 \"./asn1/nbap/nbap.cnf\"",
          "15635:     private_data_set_num_items(actx->pinfo, 0);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "15271: static int",
          "15272: dissect_nbap_T_ul_TransportFormatSet(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15278:   offset = dissect_nbap_TransportFormatSet(tvb, offset, actx, tree, hf_index);",
          "",
          "[Removed Lines]",
          "15273: #line 1087 \"./asn1/nbap/nbap.cnf\"",
          "15274:     transportFormatSet_type = NBAP_DCH_UL;",
          "15275:     nbap_dch_chnl_info[dch_id].num_ul_chans = 0;",
          "",
          "[Added Lines]",
          "15805: #line 1132 \"./asn1/nbap/nbap.cnf\"",
          "15806:     nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "15807:     nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "15808:     private_data_set_transport_format_set_type(actx->pinfo, NBAP_DCH_UL);",
          "15809:     nbap_dch_chnl_info[private_data_get_dch_id(actx->pinfo)].num_ul_chans = 0;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "15285: static int",
          "15286: dissect_nbap_T_dl_TransportFormatSet(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15292:   offset = dissect_nbap_TransportFormatSet(tvb, offset, actx, tree, hf_index);",
          "",
          "[Removed Lines]",
          "15287: #line 1091 \"./asn1/nbap/nbap.cnf\"",
          "15288:     transportFormatSet_type = NBAP_DCH_DL;",
          "15289:     nbap_dch_chnl_info[dch_id].num_dl_chans = 0;",
          "",
          "[Added Lines]",
          "15821: #line 1138 \"./asn1/nbap/nbap.cnf\"",
          "15822:     nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "15823:     nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "15824:     private_data_set_transport_format_set_type(actx->pinfo, NBAP_DCH_DL);",
          "15825:     nbap_dch_chnl_info[private_data_get_dch_id(actx->pinfo)].num_dl_chans = 0;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "15335: static int",
          "15336: dissect_nbap_DCH_Specific_FDD_Item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15341:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "15342:                                    ett_nbap_DCH_Specific_FDD_Item, DCH_Specific_FDD_Item_sequence);",
          "15348:   return offset;",
          "",
          "[Removed Lines]",
          "15337: #line 1081 \"./asn1/nbap/nbap.cnf\"",
          "15338:     g_num_dch_in_flow++;",
          "15344: #line 1084 \"./asn1/nbap/nbap.cnf\"",
          "15345:     prev_dch_id = dch_id;",
          "",
          "[Added Lines]",
          "15873: #line 1126 \"./asn1/nbap/nbap.cnf\"",
          "15874:     private_data_increment_num_dch_in_flow(actx->pinfo);",
          "15880: #line 1129 \"./asn1/nbap/nbap.cnf\"",
          "15881:     private_data_set_prev_dch_id(actx->pinfo,private_data_get_dch_id(actx->pinfo));",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "15356: static int",
          "15357: dissect_nbap_DCH_Specific_FDD_InformationList(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15363:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "15358: #line 1077 \"./asn1/nbap/nbap.cnf\"",
          "15359:     g_num_dch_in_flow = 0;",
          "15360:     prev_dch_id = 0;",
          "",
          "[Added Lines]",
          "15894: #line 1122 \"./asn1/nbap/nbap.cnf\"",
          "15895:     private_data_set_num_dch_in_flow(actx->pinfo, 0);",
          "15896:     private_data_set_prev_dch_id(actx->pinfo, 0);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "15635: static int",
          "15636: dissect_nbap_T_dCH_ID_01(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15639:   offset = dissect_nbap_DCH_ID(tvb, offset, actx, tree, hf_index);",
          "",
          "[Removed Lines]",
          "15637: #line 740 \"./asn1/nbap/nbap.cnf\"",
          "15641:     dch_id = t_dch_id;",
          "",
          "[Added Lines]",
          "16173: #line 744 \"./asn1/nbap/nbap.cnf\"",
          "16177:     private_data_set_dch_id(actx->pinfo, private_data_get_t_dch_id(actx->pinfo));",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "15650: static int",
          "15651: dissect_nbap_T_ul_TransportFormatSet_01(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15657:   offset = dissect_nbap_TransportFormatSet(tvb, offset, actx, tree, hf_index);",
          "",
          "[Removed Lines]",
          "15652: #line 1095 \"./asn1/nbap/nbap.cnf\"",
          "15653:     transportFormatSet_type = NBAP_DCH_UL;",
          "15654:     nbap_dch_chnl_info[dch_id].num_ul_chans = 0;",
          "",
          "[Added Lines]",
          "16188: #line 1144 \"./asn1/nbap/nbap.cnf\"",
          "16189:     nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "16190:     nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "16191:     private_data_set_transport_format_set_type(actx->pinfo, NBAP_DCH_UL);",
          "16192:     nbap_dch_chnl_info[private_data_get_dch_id(actx->pinfo)].num_ul_chans = 0;",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "15664: static int",
          "15665: dissect_nbap_T_dl_TransportFormatSet_01(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15671:   offset = dissect_nbap_TransportFormatSet(tvb, offset, actx, tree, hf_index);",
          "",
          "[Removed Lines]",
          "15666: #line 1099 \"./asn1/nbap/nbap.cnf\"",
          "15667:     transportFormatSet_type = NBAP_DCH_DL;",
          "15668:     nbap_dch_chnl_info[dch_id].num_dl_chans = 0;",
          "",
          "[Added Lines]",
          "16204: #line 1150 \"./asn1/nbap/nbap.cnf\"",
          "16205:     nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "16206:     nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "16207:     private_data_set_transport_format_set_type(actx->pinfo, NBAP_DCH_DL);",
          "16208:     nbap_dch_chnl_info[private_data_get_dch_id(actx->pinfo)].num_dl_chans = 0;",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "15720: static int",
          "15721: dissect_nbap_FDD_DCHs_to_ModifyItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15724:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "15725:                                    ett_nbap_FDD_DCHs_to_ModifyItem, FDD_DCHs_to_ModifyItem_sequence);",
          "",
          "[Removed Lines]",
          "15722: #line 1175 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "16262: #line 1250 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "18142: static int",
          "18143: dissect_nbap_E_DCH_DDI_Value(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18146:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "18147:                                                             0U, 62U, &e_dch_ddi_value, FALSE);",
          "",
          "[Removed Lines]",
          "18144: #line 1684 \"./asn1/nbap/nbap.cnf\"",
          "18150:     if (actx->pinfo->fd->flags.visited)",
          "18151:     {",
          "18152:         return offset;",
          "18153:     }",
          "18154:     if(num_items>0)",
          "18155:         nbap_edch_channel_info[e_dch_macdflow_id].edch_ddi[num_items-1] = e_dch_ddi_value;",
          "",
          "[Added Lines]",
          "18684: #line 1769 \"./asn1/nbap/nbap.cnf\"",
          "18685:   guint32 e_dch_ddi_value;",
          "18686:   guint num_items;",
          "18687:   nbap_edch_channel_info_t* nbap_edch_channel_info;",
          "18688:   nbap_edch_channel_info = private_data_get_nbap_edch_channel_info(actx->pinfo);",
          "18693:   private_data_set_e_dch_ddi_value(actx->pinfo, e_dch_ddi_value);",
          "18694:   if (actx->pinfo->fd->flags.visited)",
          "18695:   {",
          "18696:       return offset;",
          "18697:   }",
          "18698:   num_items = private_data_get_num_items(actx->pinfo);",
          "18699:   if(num_items>0)",
          "18700:       nbap_edch_channel_info[private_data_get_e_dch_macdflow_id(actx->pinfo)].edch_ddi[num_items-1] = private_data_get_e_dch_ddi_value(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "18277: static int",
          "18278: dissect_nbap_E_DCH_LogicalChannelInformationItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18283:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "18279: #line 1681 \"./asn1/nbap/nbap.cnf\"",
          "18280:     num_items++;",
          "",
          "[Added Lines]",
          "18824: #line 1766 \"./asn1/nbap/nbap.cnf\"",
          "18825:     private_data_increment_num_items(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "18294: static int",
          "18295: dissect_nbap_E_DCH_LogicalChannelInformation(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18299:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "18300:                                                   ett_nbap_E_DCH_LogicalChannelInformation, E_DCH_LogicalChannelInformation_sequence_of,",
          "18301:                                                   1, maxNoOfLogicalChannels, FALSE);",
          "",
          "[Removed Lines]",
          "18296: #line 1674 \"./asn1/nbap/nbap.cnf\"",
          "18297:     num_items = 0;",
          "18304: nbap_edch_channel_info[e_dch_macdflow_id].no_ddi_entries = num_items;",
          "",
          "[Added Lines]",
          "18841: #line 1757 \"./asn1/nbap/nbap.cnf\"",
          "18842:     private_data_set_num_items(actx->pinfo, 0);",
          "18843:     nbap_edch_channel_info_t* nbap_edch_channel_info;",
          "18844:     nbap_edch_channel_info = private_data_get_nbap_edch_channel_info(actx->pinfo);",
          "18851: nbap_edch_channel_info[private_data_get_e_dch_macdflow_id(actx->pinfo)].no_ddi_entries = private_data_get_num_items(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "18327: static int",
          "18328: dissect_nbap_E_DCH_MACdFlow_Specific_InfoItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18330: umts_fp_conversation_info_t *p_conv_data = NULL;",
          "18331: fp_edch_channel_info_t* fp_edch_channel_info = NULL;",
          "18332: address     null_addr;",
          "18333: conversation_t   *p_conv;",
          "18334: guint32 no_ddi_entries, i;",
          "18336:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "18337:                                    ett_nbap_E_DCH_MACdFlow_Specific_InfoItem, E_DCH_MACdFlow_Specific_InfoItem_sequence);",
          "",
          "[Removed Lines]",
          "18329: #line 1416 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "18876: #line 1502 \"./asn1/nbap/nbap.cnf\"",
          "18882: guint32 e_dch_macdflow_id;",
          "18883: nbap_edch_channel_info_t* nbap_edch_channel_info;",
          "18884: nbap_edch_channel_info = private_data_get_nbap_edch_channel_info(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "18342:     }",
          "18345:     clear_address(&null_addr);",
          "18346:     p_conv = find_conversation(actx->pinfo->num, &nbap_edch_channel_info[e_dch_macdflow_id].crnc_address, &null_addr,",
          "18347:                                PT_UDP,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18895:     e_dch_macdflow_id = private_data_get_e_dch_macdflow_id(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "18359:         return offset;",
          "18361:     no_ddi_entries = fp_edch_channel_info->no_ddi_entries = nbap_edch_channel_info[e_dch_macdflow_id].no_ddi_entries;",
          "18363:     for (i = 0; i < no_ddi_entries; i++) {",
          "18364:         fp_edch_channel_info->edch_ddi[i]            = nbap_edch_channel_info[e_dch_macdflow_id].edch_ddi[i];",
          "18365:         fp_edch_channel_info->edch_macd_pdu_size[i]  = nbap_edch_channel_info[e_dch_macdflow_id].edch_macd_pdu_size[i];",
          "18373:     }",
          "18381:     }else{",
          "",
          "[Removed Lines]",
          "18369:             e_dch_macdflow_id,",
          "18370:             nbap_edch_channel_info[e_dch_macdflow_id].edch_ddi[i],",
          "18371:             nbap_edch_channel_info[e_dch_macdflow_id].edch_macd_pdu_size[i]",
          "18376:     p_conv_data->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "18379:     if( 0 == e_dch_ddi_value ){",
          "",
          "[Added Lines]",
          "18917:         fp_edch_channel_info->edch_lchId[i]          =  nbap_edch_channel_info[e_dch_macdflow_id].lchId[i];",
          "18920:     p_conv_data->dch_crc_present = private_data_get_dch_crc_present(actx->pinfo);",
          "18923:     if( 0 == private_data_get_e_dch_ddi_value(actx->pinfo) ){",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "18384:     }",
          "18386:     p_conv_data->num_dch_in_flow = 1;",
          "",
          "[Removed Lines]",
          "18387:     p_conv_data->dch_ids_in_flow_list[0] = e_dch_macdflow_id;",
          "",
          "[Added Lines]",
          "18931:     p_conv_data->dch_ids_in_flow_list[0] = private_data_get_e_dch_macdflow_id(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "18516: static int",
          "18517: dissect_nbap_E_DCH_LogicalChannelToModifyItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18520:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "18521:                                    ett_nbap_E_DCH_LogicalChannelToModifyItem, E_DCH_LogicalChannelToModifyItem_sequence);",
          "",
          "[Removed Lines]",
          "18518: #line 1669 \"./asn1/nbap/nbap.cnf\"",
          "18523: num_items++;",
          "",
          "[Added Lines]",
          "19062: #line 1752 \"./asn1/nbap/nbap.cnf\"",
          "19067: private_data_increment_num_items(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "18591: static int",
          "18592: dissect_nbap_E_DCH_MACdFlow_Specific_InfoItem_to_Modify(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18594: guint32 no_ddi_entries, i;",
          "18595: address     null_addr;",
          "18596: nbap_edch_port_info_t *old_info;",
          "18597: umts_fp_conversation_info_t *p_conv_data = NULL;",
          "18598: fp_edch_channel_info_t* fp_edch_channel_info;",
          "18599: conversation_t   *p_conv;",
          "18602:    offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "18603:                                    ett_nbap_E_DCH_MACdFlow_Specific_InfoItem_to_Modify, E_DCH_MACdFlow_Specific_InfoItem_to_Modify_sequence);",
          "",
          "[Removed Lines]",
          "18593: #line 1571 \"./asn1/nbap/nbap.cnf\"",
          "18601: num_items = 1;",
          "",
          "[Added Lines]",
          "19137: #line 1659 \"./asn1/nbap/nbap.cnf\"",
          "19144: guint32 e_dch_macdflow_id;",
          "19145: nbap_edch_channel_info_t* nbap_edch_channel_info;",
          "19146: nbap_edch_channel_info = private_data_get_nbap_edch_channel_info(actx->pinfo);",
          "19148: private_data_set_num_items(actx->pinfo, 1);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "18618:     }else{",
          "18619:         nbap_com_context_id_t * cur_val;",
          "18622:         }else{",
          "18623:             expert_add_info(actx->pinfo, NULL, &ei_nbap_no_find_comm_context_id);",
          "18624:         }",
          "18625:     }",
          "18629:         expert_add_info(actx->pinfo, NULL, &ei_nbap_no_find_port_info);",
          "18630:         return offset;",
          "18631:     }",
          "",
          "[Removed Lines]",
          "18616:     if(crcn_context_present){",
          "18620:         if((cur_val=(nbap_com_context_id_t *)wmem_tree_lookup32(com_context_map, node_b_com_context_id)) != NULL){",
          "18621:             com_context_id= cur_val->crnc_context;",
          "18628:     if(( old_info = (nbap_edch_port_info_t *)wmem_tree_lookup32(edch_flow_port_map, com_context_id)) == NULL ){",
          "18632:     nbap_debug(\"    Found com_context_id %u\", com_context_id);",
          "18635:     BindingID_port = old_info->crnc_port[e_dch_macdflow_id];",
          "18637:     nbap_debug(\" Port %u loaded from old_info->crnc_port[e_dch_macdflow_id %u]\",",
          "18638:         BindingID_port,",
          "18639:         e_dch_macdflow_id);",
          "18642:     transportLayerAddress_ipv4 =  old_info->crnc_address;",
          "",
          "[Added Lines]",
          "19163:     if(private_data_get_crnc_context_present(actx->pinfo)){",
          "19167:         if((cur_val=(nbap_com_context_id_t *)wmem_tree_lookup32(com_context_map,private_data_get_node_b_com_context_id(actx->pinfo))) != NULL){",
          "19168:             private_data_set_com_context_id(actx->pinfo, cur_val->crnc_context);",
          "19175:     if(( old_info = (nbap_edch_port_info_t *)wmem_tree_lookup32(edch_flow_port_map,private_data_get_com_context_id(actx->pinfo))) == NULL ){",
          "19179:     nbap_debug(\"    Found com_context_id %u\",private_data_get_com_context_id(actx->pinfo));",
          "19182:     e_dch_macdflow_id = private_data_get_e_dch_macdflow_id(actx->pinfo);",
          "19183:     private_data_set_binding_id_port(actx->pinfo, old_info->crnc_port[e_dch_macdflow_id]);",
          "19185:     nbap_debug(\" Port %u loaded from old_info->crnc_port[e_dch_macdflow_id %u]\",private_data_get_binding_id_port(actx->pinfo), e_dch_macdflow_id);",
          "19188:     private_data_set_transportLayerAddress_ipv4(actx->pinfo, old_info->crnc_address);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "18660:         return offset;",
          "18662:     no_ddi_entries = fp_edch_channel_info->no_ddi_entries = nbap_edch_channel_info[e_dch_macdflow_id].no_ddi_entries;",
          "18664:     for (i = 0; i < no_ddi_entries; i++) {",
          "18665:         fp_edch_channel_info->edch_ddi[i]            = nbap_edch_channel_info[e_dch_macdflow_id].edch_ddi[i];",
          "18666:         fp_edch_channel_info->edch_macd_pdu_size[i]  = nbap_edch_channel_info[e_dch_macdflow_id].edch_macd_pdu_size[i];",
          "18674:     }",
          "18682:     }else{",
          "",
          "[Removed Lines]",
          "18670:             e_dch_macdflow_id,",
          "18671:             nbap_edch_channel_info[e_dch_macdflow_id].edch_ddi[i],",
          "18672:             nbap_edch_channel_info[e_dch_macdflow_id].edch_macd_pdu_size[i]",
          "18677:     p_conv_data->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "18680:     if( 0 == e_dch_ddi_value ){",
          "",
          "[Added Lines]",
          "19213:         fp_edch_channel_info->edch_lchId[i]          =  nbap_edch_channel_info[e_dch_macdflow_id].lchId[i];",
          "19216:     p_conv_data->dch_crc_present = private_data_get_dch_crc_present(actx->pinfo);",
          "19219:     if( 0 == private_data_get_e_dch_ddi_value(actx->pinfo) ){",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "18739: static int",
          "18740: dissect_nbap_E_DCH_FDD_Information_to_Modify(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "18743: address     dst_addr, null_addr;",
          "18744: conversation_t *conversation,*old_conversation = NULL;",
          "18745: umts_fp_conversation_info_t *umts_fp_conversation_info _U_;",
          "18746: fp_edch_channel_info_t* fp_edch_channel_info;",
          "18747: void *conv_proto_data = NULL;",
          "18752:    offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "18753:                                    ett_nbap_E_DCH_FDD_Information_to_Modify, E_DCH_FDD_Information_to_Modify_sequence);",
          "18758:             return offset;",
          "18759:         }",
          "",
          "[Removed Lines]",
          "18741: #line 1475 \"./asn1/nbap/nbap.cnf\"",
          "18749: transportLayerAddress_ipv4 = 0;",
          "18750: BindingID_port = 0;",
          "18756:         if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "18757:         {",
          "",
          "[Added Lines]",
          "19280: #line 1558 \"./asn1/nbap/nbap.cnf\"",
          "19287: guint32 transportLayerAddress_ipv4;",
          "19288: guint16 bindingID;",
          "19289: guint32 e_dch_macdflow_id;",
          "19290: nbap_edch_channel_info_t* nbap_edch_channel_info;",
          "19291: nbap_edch_channel_info = private_data_get_nbap_edch_channel_info(actx->pinfo);",
          "19293: private_data_set_transportLayerAddress_ipv4(actx->pinfo, 0);",
          "19294: private_data_set_binding_id_port(actx->pinfo, 0);",
          "19300:         transportLayerAddress_ipv4 = private_data_get_transportLayerAddress_ipv4(actx->pinfo);",
          "19301:         bindingID = private_data_get_binding_id_port(actx->pinfo);",
          "19302:         if (actx->pinfo->fd->flags.visited || transportLayerAddress_ipv4 == 0 || bindingID == 0){",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "18766:         set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "18768:         old_conversation = find_conversation(actx->pinfo->num,&dst_addr,",
          "18770:             0, NO_ADDR_B|NO_PORT_B);",
          "18772:         if(old_conversation){",
          "18773:             nbap_debug(\"Frame %u E-DCH-FDD-Information-to-Modify: found old conv on IP %s Port %u\",",
          "18774:                 actx->pinfo->num,",
          "18777:         }else{",
          "18778:             nbap_debug(\"Frame %u E-DCH-FDD-Information-to-Modify: Did not find old conv on IP %s Port %u\",",
          "18779:                 actx->pinfo->num,",
          "18782:         }",
          "18785:         conversation = conversation_new(actx->pinfo->num, &dst_addr,",
          "18787:                 0, NO_ADDR2|NO_PORT2);",
          "",
          "[Removed Lines]",
          "18769:             &null_addr, PT_UDP, BindingID_port,",
          "18775:                 address_to_str(wmem_packet_scope(), &dst_addr),",
          "18776:                 BindingID_port);",
          "18780:                 address_to_str(wmem_packet_scope(), &dst_addr),",
          "18781:                 BindingID_port);",
          "18786:                 &null_addr, PT_UDP,BindingID_port ,",
          "",
          "[Added Lines]",
          "19314:             &null_addr, PT_UDP, bindingID,",
          "19320:                 address_to_str(wmem_packet_scope(), &dst_addr), bindingID);",
          "19324:                 address_to_str(wmem_packet_scope(), &dst_addr), bindingID);",
          "19329:                 &null_addr, PT_UDP, bindingID,",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "18803:                 umts_fp_conversation_info->dl_frame_number   = 0;",
          "18804:                 umts_fp_conversation_info->ul_frame_number   = actx->pinfo->num;",
          "18805:                 copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "18809:                 umts_fp_conversation_info->rlc_mode          = FP_RLC_MODE_UNKNOWN;",
          "",
          "[Removed Lines]",
          "18806:                 umts_fp_conversation_info->crnc_port         = BindingID_port;",
          "",
          "[Added Lines]",
          "19349:                 umts_fp_conversation_info->crnc_port         = bindingID;",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "18811:                 fp_edch_channel_info = wmem_new0(wmem_file_scope(), fp_edch_channel_info_t);",
          "18812:                 umts_fp_conversation_info->channel_specific_info = (void*)fp_edch_channel_info;",
          "18816:                 }else{",
          "18817:                     nbap_com_context_id_t * cur_val;",
          "18820:                         umts_fp_conversation_info->com_context_id = cur_val->crnc_context;",
          "18821:                     }else{",
          "18822:                         expert_add_info(actx->pinfo, NULL, &ei_nbap_no_set_comm_context_id);",
          "",
          "[Removed Lines]",
          "18814:                 if(crcn_context_present){",
          "18815:                     umts_fp_conversation_info->com_context_id = com_context_id;",
          "18819:                     if((cur_val=(nbap_com_context_id_t *)wmem_tree_lookup32(com_context_map, node_b_com_context_id)) != NULL){",
          "",
          "[Added Lines]",
          "19357:                 if(private_data_get_crnc_context_present(actx->pinfo)){",
          "19358:                     umts_fp_conversation_info->com_context_id = private_data_get_com_context_id(actx->pinfo);",
          "19362:                     if((cur_val=(nbap_com_context_id_t *)wmem_tree_lookup32(com_context_map,private_data_get_node_b_com_context_id(actx->pinfo))) != NULL){",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "18824:                 }",
          "18827:                 copy_address(&(nbap_edch_channel_info[e_dch_macdflow_id].crnc_address),&dst_addr);",
          "",
          "[Removed Lines]",
          "18828:                 nbap_edch_channel_info[e_dch_macdflow_id].crnc_port = BindingID_port;",
          "",
          "[Added Lines]",
          "19370:                 e_dch_macdflow_id = private_data_get_e_dch_macdflow_id(actx->pinfo);",
          "19372:                 nbap_edch_channel_info[e_dch_macdflow_id].crnc_port = bindingID;",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "23334: static int",
          "23335: dissect_nbap_PICH_Mode(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23337: guint32 PICH_Mode = 0;",
          "23338:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "23339:                                      4, &PICH_Mode, TRUE, 0, NULL);",
          "",
          "[Removed Lines]",
          "23336: #line 860 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "23880: #line 890 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "23342:     switch(PICH_Mode){",
          "23345:             break;",
          "23348:             break;",
          "23351:             break;",
          "23354:             break;",
          "23355:     }",
          "",
          "[Removed Lines]",
          "23344:             paging_indications = 18;",
          "23347:             paging_indications = 36;",
          "23350:             paging_indications = 72;",
          "23353:             paging_indications = 144;",
          "",
          "[Added Lines]",
          "23888:             private_data_set_paging_indications(actx->pinfo, 18);",
          "23891:             private_data_set_paging_indications(actx->pinfo, 36);",
          "23894:             private_data_set_paging_indications(actx->pinfo, 72);",
          "23897:             private_data_set_paging_indications(actx->pinfo, 144);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "23449: static int",
          "23450: dissect_nbap_HSDSCH_Common_System_InformationFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "",
          "[Removed Lines]",
          "23451: #line 2092 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "23995: #line 2225 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "23463: fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "23464: address     null_addr;",
          "23465: conversation_t   *conversation = NULL;",
          "23467: int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24010: nbap_common_channel_info_t* nbap_common_channel_info;",
          "24011: nbap_common_channel_info = private_data_get_nbap_common_channel_info(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "23514:                 fp_hsdsch_channel_info = wmem_new0(wmem_file_scope(), fp_hsdsch_channel_info_t);",
          "23515:                 umts_fp_conversation_info->channel_specific_info = (void*)fp_hsdsch_channel_info;",
          "23517:                 fp_hsdsch_channel_info->hsdsch_entity = ehs;",
          "",
          "[Removed Lines]",
          "23516:                 fp_hsdsch_channel_info->common_macdflow_id = common_macdflow_id;",
          "",
          "[Added Lines]",
          "24062:                 fp_hsdsch_channel_info->common_macdflow_id = private_data_get_common_macdflow_id(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "23595: static int",
          "23596: dissect_nbap_HSDSCH_MACdFlow_ID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23598:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "23599:                                                             0U, maxNrOfMACdFlows_1, &hsdsch_macdflow_id, FALSE);",
          "23602: DISSECTOR_ASSERT(num_items < maxNrOfMACdFlows+1);",
          "23603: DISSECTOR_ASSERT(num_items > 0);",
          "23605: hsdsch_macdflow_ids[num_items-1] = hsdsch_macdflow_id;",
          "",
          "[Removed Lines]",
          "23597: #line 760 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24143: #line 772 \"./asn1/nbap/nbap.cnf\"",
          "24144:   guint32 hsdsch_macdflow_id;",
          "24145:   guint num_items;",
          "24146:   gint* hsdsch_macdflow_ids;",
          "24150:   private_data_set_hsdsch_macdflow_id(actx->pinfo, hsdsch_macdflow_id);",
          "24152:   num_items = private_data_get_num_items(actx->pinfo);",
          "24156: hsdsch_macdflow_ids = private_data_get_hsdsch_macdflow_ids(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "23622: static int",
          "23623: dissect_nbap_HSDSCH_MACdFlow_Specific_InfoItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23627:     address     dst_addr;",
          "23631:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "23632:                                    ett_nbap_HSDSCH_MACdFlow_Specific_InfoItem, HSDSCH_MACdFlow_Specific_InfoItem_sequence);",
          "23638:         return offset;",
          "23639:     }",
          "23641:     set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "23644:     copy_address(&(nbap_hsdsch_channel_info[hsdsch_macdflow_id].crnc_address),&dst_addr);",
          "",
          "[Removed Lines]",
          "23624: #line 1785 \"./asn1/nbap/nbap.cnf\"",
          "23628:     transportLayerAddress_ipv4 = 0;",
          "23629:     BindingID_port = 0;",
          "23630:     num_items++;",
          "23636:     if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "23637:     {",
          "23645:     nbap_hsdsch_channel_info[hsdsch_macdflow_id].crnc_port = BindingID_port;",
          "",
          "[Added Lines]",
          "24176: #line 1891 \"./asn1/nbap/nbap.cnf\"",
          "24178:     guint32 transportLayerAddress_ipv4;",
          "24179:     guint16 bindingID;",
          "24180:     guint32 hsdsch_macdflow_id;",
          "24181:     nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;",
          "24182:     nbap_hsdsch_channel_info = private_data_get_nbap_hsdsch_channel_info(actx->pinfo);",
          "24184:     private_data_set_transportLayerAddress_ipv4(actx->pinfo, 0);",
          "24185:     private_data_set_binding_id_port(actx->pinfo, 0);",
          "24186:     private_data_increment_num_items(actx->pinfo);",
          "24192:     transportLayerAddress_ipv4 = private_data_get_transportLayerAddress_ipv4(actx->pinfo);",
          "24193:     bindingID = private_data_get_binding_id_port(actx->pinfo);",
          "24194:     if (actx->pinfo->fd->flags.visited || transportLayerAddress_ipv4 == 0 || bindingID == 0){",
          "24201:     hsdsch_macdflow_id = private_data_get_hsdsch_macdflow_id(actx->pinfo);",
          "24203:     nbap_hsdsch_channel_info[hsdsch_macdflow_id].crnc_port = bindingID;",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "23725: static int",
          "23726: dissect_nbap_RLC_Mode(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23728:     guint32 rlc_mode;",
          "23730:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "23731:                                      2, &rlc_mode, TRUE, 0, NULL);",
          "23733:     switch(rlc_mode){",
          "23734:         case 0:",
          "23737:             break;",
          "23738:         case 1:",
          "23741:             break;",
          "23742:         default:",
          "23743:             break;",
          "",
          "[Removed Lines]",
          "23727: #line 1712 \"./asn1/nbap/nbap.cnf\"",
          "23736:             nbap_hsdsch_channel_info[hsdsch_macdflow_id].rlc_mode = FP_RLC_AM;",
          "23740:             nbap_hsdsch_channel_info[hsdsch_macdflow_id].rlc_mode = FP_RLC_UM;",
          "",
          "[Added Lines]",
          "24285: #line 1814 \"./asn1/nbap/nbap.cnf\"",
          "24287:     nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;",
          "24288:     nbap_hsdsch_channel_info = private_data_get_nbap_hsdsch_channel_info(actx->pinfo);",
          "24295:             nbap_hsdsch_channel_info[private_data_get_hsdsch_macdflow_id(actx->pinfo)].rlc_mode = FP_RLC_AM;",
          "24299:             nbap_hsdsch_channel_info[private_data_get_hsdsch_macdflow_id(actx->pinfo)].rlc_mode = FP_RLC_UM;",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "23766: static int",
          "23767: dissect_nbap_PriorityQueue_InfoItem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23772:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "23768: #line 1776 \"./asn1/nbap/nbap.cnf\"",
          "23769:     num_items++;",
          "",
          "[Added Lines]",
          "24327: #line 1882 \"./asn1/nbap/nbap.cnf\"",
          "24328:     private_data_increment_num_items(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "23800: static int",
          "23801: dissect_nbap_HSDSCH_MACdFlows_Information(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23804:     int protocol_ie_id;",
          "23805:     guint32 i;",
          "",
          "[Removed Lines]",
          "23802: #line 1736 \"./asn1/nbap/nbap.cnf\"",
          "23806:     num_items = 0;",
          "23807:     protocol_ie_id = ProtocolIE_ID;",
          "",
          "[Added Lines]",
          "24361: #line 1841 \"./asn1/nbap/nbap.cnf\"",
          "24364:     private_data_set_num_items(actx->pinfo,0);",
          "24365:     protocol_ie_id = private_data_get_protocol_ie_id(actx->pinfo);",
          "24366:     nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;",
          "24367:     nbap_hsdsch_channel_info = private_data_get_nbap_hsdsch_channel_info(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "23844: static int",
          "23845: dissect_nbap_T_hSDSCH_Physical_Layer_Category(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "23847:     guint32 hsdsch_physical_layer_category;",
          "23849:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "23850:                                                             1U, 64U, &hsdsch_physical_layer_category, TRUE);",
          "",
          "[Removed Lines]",
          "23846: #line 1729 \"./asn1/nbap/nbap.cnf\"",
          "23853:     nbap_hsdsch_channel_info[hsdsch_macdflow_id].hsdsch_physical_layer_category = hsdsch_physical_layer_category;",
          "",
          "[Added Lines]",
          "24406: #line 1832 \"./asn1/nbap/nbap.cnf\"",
          "24408:     nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;",
          "24409:     nbap_hsdsch_channel_info = private_data_get_nbap_hsdsch_channel_info(actx->pinfo);",
          "24415:     nbap_hsdsch_channel_info[private_data_get_hsdsch_macdflow_id(actx->pinfo)].hsdsch_physical_layer_category = hsdsch_physical_layer_category;",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "23912: static int",
          "23913: dissect_nbap_HSDSCH_FDD_Information(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "",
          "[Removed Lines]",
          "23914: #line 1837 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24476: #line 1953 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "23920:     umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "23921:     fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "23922:     guint32 i;",
          "23924:     if (!actx->pinfo->fd->flags.visited){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24485:     nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;",
          "24486:     nbap_hsdsch_channel_info = private_data_get_nbap_hsdsch_channel_info(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "23987:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "",
          "[Removed Lines]",
          "23984:                     umts_fp_conversation_info->com_context_id = com_context_id;",
          "",
          "[Added Lines]",
          "24548:                     umts_fp_conversation_info->com_context_id = private_data_get_com_context_id(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "24056: static int",
          "24057: dissect_nbap_HSDSCH_MACdFlow_Specific_InfoItem_to_Modify(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "24059:     address     dst_addr;",
          "24064:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "24065:                                    ett_nbap_HSDSCH_MACdFlow_Specific_InfoItem_to_Modify, HSDSCH_MACdFlow_Specific_InfoItem_to_Modify_sequence);",
          "24070:         return offset;",
          "24071:     }",
          "24073:     set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "",
          "[Removed Lines]",
          "24058: #line 1933 \"./asn1/nbap/nbap.cnf\"",
          "24060:     transportLayerAddress_ipv4 = 0;",
          "24061:     BindingID_port = 0;",
          "24062:     num_items++;",
          "24068:     if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "24069:     {",
          "24076:     copy_address(&(nbap_hsdsch_channel_info[hsdsch_macdflow_id].crnc_address),&dst_addr);",
          "24077:     nbap_hsdsch_channel_info[hsdsch_macdflow_id].crnc_port = BindingID_port;",
          "",
          "[Added Lines]",
          "24622: #line 2051 \"./asn1/nbap/nbap.cnf\"",
          "24624:     guint32 transportLayerAddress_ipv4;",
          "24625:     guint16 bindingID;",
          "24626:     private_data_set_transportLayerAddress_ipv4(actx->pinfo, 0);",
          "24627:     private_data_set_binding_id_port(actx->pinfo, 0);",
          "24628:     private_data_increment_num_items(actx->pinfo);",
          "24629:     nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;",
          "24630:     nbap_hsdsch_channel_info = private_data_get_nbap_hsdsch_channel_info(actx->pinfo);",
          "24636:     transportLayerAddress_ipv4 = private_data_get_transportLayerAddress_ipv4(actx->pinfo);",
          "24637:     bindingID = private_data_get_binding_id_port(actx->pinfo);",
          "24638:     if (actx->pinfo->fd->flags.visited || transportLayerAddress_ipv4 == 0 || bindingID == 0){",
          "24645:     copy_address(&(nbap_hsdsch_channel_info[private_data_get_hsdsch_macdflow_id(actx->pinfo)].crnc_address),&dst_addr);",
          "24646:     nbap_hsdsch_channel_info[private_data_get_hsdsch_macdflow_id(actx->pinfo)].crnc_port = bindingID;",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "24114: static int",
          "24115: dissect_nbap_PriorityQueue_InfoItem_to_Add(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "24120:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "24116: #line 1779 \"./asn1/nbap/nbap.cnf\"",
          "24117:     num_items = 1;",
          "",
          "[Added Lines]",
          "24685: #line 1885 \"./asn1/nbap/nbap.cnf\"",
          "24686:     private_data_set_num_items(actx->pinfo,1);",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "24249: static int",
          "24250: dissect_nbap_HSDSCH_Information_to_Modify(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "",
          "[Removed Lines]",
          "24251: #line 1953 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24820: #line 2076 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "24261:     umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "24262:     fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "24263:     guint32 i;",
          "24265:     if (!actx->pinfo->fd->flags.visited){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24833:     nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;",
          "24834:     nbap_hsdsch_channel_info = private_data_get_nbap_hsdsch_channel_info(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "24332:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "",
          "[Removed Lines]",
          "24329:                     umts_fp_conversation_info->com_context_id = com_context_id;",
          "",
          "[Added Lines]",
          "24900:                     umts_fp_conversation_info->com_context_id = private_data_get_com_context_id(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "24378: static int",
          "24379: dissect_nbap_HSDSCH_MACdPDUSizeFormat(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "",
          "[Removed Lines]",
          "24380: #line 1814 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "24951: #line 1930 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "24489: static int",
          "24490: dissect_nbap_HSDSCH_MACdFlow_Specific_InformationResp_Item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "24495:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "24491: #line 1782 \"./asn1/nbap/nbap.cnf\"",
          "24492:     num_items++;",
          "",
          "[Added Lines]",
          "25062: #line 1888 \"./asn1/nbap/nbap.cnf\"",
          "25063:     private_data_increment_num_items(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "24905: static int",
          "24906: dissect_nbap_HSDSCH_Paging_System_InformationFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "24909:   g_warning(\"HS-DSCH Type 3 NOT Implemented!\");",
          "",
          "[Removed Lines]",
          "24907: #line 2172 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "25478: #line 2307 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "25099: static int",
          "25100: dissect_nbap_HSDSCH_MACdFlows_to_Delete_Item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "25105:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "25101: #line 1773 \"./asn1/nbap/nbap.cnf\"",
          "25102:     num_items++;",
          "",
          "[Added Lines]",
          "25672: #line 1879 \"./asn1/nbap/nbap.cnf\"",
          "25673:     private_data_increment_num_items(actx->pinfo);",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "25116: static int",
          "25117: dissect_nbap_HSDSCH_MACdFlows_to_Delete(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "25122:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "25118: #line 1768 \"./asn1/nbap/nbap.cnf\"",
          "25119:     num_items = 0;",
          "",
          "[Added Lines]",
          "25689: #line 1874 \"./asn1/nbap/nbap.cnf\"",
          "25690:     private_data_set_num_items(actx->pinfo,0);",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "26495: #line 618 \"./asn1/nbap/nbap.cnf\"",
          "26496:   tvbuff_t *parameter_tvb=NULL;",
          "26497:   proto_tree *subtree;",
          "26499:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "26500:                                      NO_BOUND, NO_BOUND, FALSE, &parameter_tvb, NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27069:   guint32 segment_type;",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "26503:     if(!parameter_tvb)",
          "26504:         return offset;",
          "26505:     if((segment_type == 5 /*complete-SIB */)||(segment_type == 6 /*complete-SIB-short */)){",
          "26506:         subtree = proto_item_add_subtree(actx->created_item, ett_nbap_ib_sg_data);",
          "26507:     }else{",
          "26508:         return offset;",
          "26509:     }",
          "26512:         case 0:",
          "26514:             dissect_rrc_MasterInformationBlock_PDU(parameter_tvb, actx->pinfo, subtree, NULL);",
          "",
          "[Removed Lines]",
          "26511:     switch(ib_type){",
          "",
          "[Added Lines]",
          "27077:     segment_type = private_data_get_segment_type(actx->pinfo);",
          "27084:     switch(private_data_get_ib_type(actx->pinfo)){",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "26627: static int",
          "26628: dissect_nbap_IB_Type(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "26630:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "26631:                                      26, &ib_type, TRUE, 15, NULL);",
          "",
          "[Removed Lines]",
          "26629: #line 605 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "27202: #line 601 \"./asn1/nbap/nbap.cnf\"",
          "27203:   guint32 ib_type;",
          "27207:   private_data_set_ib_type(actx->pinfo, ib_type);",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "28218: static int",
          "28219: dissect_nbap_NodeB_CommunicationContextID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "28224:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "28225:                                                             0U, 1048575U, &node_b_com_context_id, FALSE);",
          "28242:     }",
          "",
          "[Removed Lines]",
          "28220: #line 2186 \"./asn1/nbap/nbap.cnf\"",
          "28222: nbap_com_context_id_t *cur_val;",
          "28228:     if (actx->pinfo->fd->flags.visited){",
          "28229:         return offset;",
          "28230:     }",
          "28233: if(crcn_context_present){",
          "28234:         if( wmem_tree_lookup32(com_context_map, node_b_com_context_id) == NULL ){",
          "28236:             cur_val = wmem_new(wmem_file_scope(), nbap_com_context_id_t);",
          "28237:             cur_val->crnc_context = com_context_id;",
          "28238:             cur_val->frame_num = actx->pinfo->num;",
          "28239:             wmem_tree_insert32(com_context_map, node_b_com_context_id, cur_val);",
          "28240:             com_context_id = -1;",
          "28241:         }",
          "",
          "[Added Lines]",
          "28795: #line 2323 \"./asn1/nbap/nbap.cnf\"",
          "28796:   guint node_b_com_context_id;",
          "28798:   nbap_com_context_id_t *cur_val;",
          "28804:   private_data_set_node_b_com_context_id(actx->pinfo, node_b_com_context_id);",
          "28805:   if (actx->pinfo->fd->flags.visited){",
          "28806:       return offset;",
          "28807:   }",
          "28810:   if(private_data_get_crnc_context_present(actx->pinfo)){",
          "28811:     if( wmem_tree_lookup32(com_context_map, node_b_com_context_id) == NULL ){",
          "28813:        cur_val = wmem_new(wmem_file_scope(), nbap_com_context_id_t);",
          "28814:        cur_val->crnc_context = private_data_get_com_context_id(actx->pinfo);",
          "28815:        cur_val->frame_num = actx->pinfo->num;",
          "28816:        wmem_tree_insert32(com_context_map, node_b_com_context_id, cur_val);",
          "28817:        private_data_set_com_context_id(actx->pinfo, -1);",
          "28819:   }",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "28783: static int",
          "28784: dissect_nbap_T_dCH_id(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "28787:   offset = dissect_nbap_DCH_ID(tvb, offset, actx, tree, hf_index);",
          "",
          "[Removed Lines]",
          "28785: #line 1181 \"./asn1/nbap/nbap.cnf\"",
          "28789:     dch_id = t_dch_id;",
          "",
          "[Added Lines]",
          "29362: #line 1256 \"./asn1/nbap/nbap.cnf\"",
          "29366:     private_data_set_dch_id(actx->pinfo, private_data_get_t_dch_id(actx->pinfo));",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "28805: static int",
          "28806: dissect_nbap_RL_Specific_DCH_Info_Item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "28808: address     dst_addr, null_addr;",
          "28809: conversation_t *conversation = NULL;",
          "28810: umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "28811: int i, j, num_tf;",
          "28817:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "28818:                                    ett_nbap_RL_Specific_DCH_Info_Item, RL_Specific_DCH_Info_Item_sequence);",
          "28823:             return offset;",
          "28824:         }",
          "28828:                 return offset;",
          "28829:         }",
          "",
          "[Removed Lines]",
          "28807: #line 1186 \"./asn1/nbap/nbap.cnf\"",
          "28813: transportLayerAddress_ipv4 = 0;",
          "28814: BindingID_port = 0;",
          "28815: dch_id = 0xFFFFFFFF;",
          "28821:         if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "28822:         {",
          "28827:         if(BindingID_port == NBAP_IGNORE_PORT){",
          "",
          "[Added Lines]",
          "29384: #line 1261 \"./asn1/nbap/nbap.cnf\"",
          "29389: guint32 transportLayerAddress_ipv4;",
          "29390: guint16 bindingID;",
          "29391: guint32 dch_id;",
          "29392: nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "29393: nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "29395: private_data_set_transportLayerAddress_ipv4(actx->pinfo, 0);",
          "29396: private_data_set_binding_id_port(actx->pinfo, 0);",
          "29397: private_data_set_dch_id(actx->pinfo, 0xFFFFFFFF);",
          "29404:         transportLayerAddress_ipv4 = private_data_get_transportLayerAddress_ipv4(actx->pinfo);",
          "29405:         bindingID = private_data_get_binding_id_port(actx->pinfo);",
          "29406:         if (actx->pinfo->fd->flags.visited || transportLayerAddress_ipv4 == 0 || bindingID == 0){",
          "29411:         if(bindingID == NBAP_IGNORE_PORT){",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "28833:         set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "28835:         conversation = find_conversation(actx->pinfo->num,&dst_addr,",
          "28837:             0, NO_ADDR_B|NO_PORT_B);",
          "28839:         if (conversation == NULL) {",
          "28841:             conversation = conversation_new(actx->pinfo->num, &dst_addr,",
          "28843:                 0, NO_ADDR2|NO_PORT2);",
          "",
          "[Removed Lines]",
          "28836:             &null_addr, PT_UDP, BindingID_port,",
          "28842:                 &null_addr, PT_UDP,BindingID_port ,",
          "",
          "[Added Lines]",
          "29420:             &null_addr, PT_UDP,private_data_get_binding_id_port(actx->pinfo),",
          "29426:                 &null_addr, PT_UDP,private_data_get_binding_id_port(actx->pinfo),",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "28854:                 umts_fp_conversation_info->dl_frame_number   = 0;",
          "28855:                 umts_fp_conversation_info->ul_frame_number   = actx->pinfo->num;",
          "28856:                 copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "28859:                 umts_fp_conversation_info->rlc_mode          = FP_RLC_MODE_UNKNOWN;",
          "28870:                 for (j = 0; j < num_tf; j++) {",
          "28871:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[dch_id].ul_chan_tf_size[j];",
          "28872:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[dch_id].ul_chan_num_tbs[j];",
          "",
          "[Removed Lines]",
          "28857:                 umts_fp_conversation_info->crnc_port         = BindingID_port;",
          "28858:                 umts_fp_conversation_info->scrambling_code   = ul_scrambling_code;",
          "28862:                 umts_fp_conversation_info->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "28865:                 umts_fp_conversation_info->com_context_id = com_context_id;",
          "28869:                 umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[dch_id].num_ul_chans;",
          "",
          "[Added Lines]",
          "29441:                 umts_fp_conversation_info->crnc_port         = bindingID;",
          "29442:                 umts_fp_conversation_info->scrambling_code   = private_data_get_ul_scrambling_code(actx->pinfo);",
          "29446:                 umts_fp_conversation_info->dch_crc_present = private_data_get_dch_crc_present(actx->pinfo);",
          "29449:                 umts_fp_conversation_info->com_context_id = private_data_get_com_context_id(actx->pinfo);",
          "29453:                 dch_id = private_data_get_dch_id(actx->pinfo);",
          "29454:                 umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[private_data_get_dch_id(actx->pinfo)].num_ul_chans;",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "28950: static int",
          "28951: dissect_nbap_RL_Specific_E_DCH_Information_Item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "28953: address     dst_addr, null_addr;",
          "28954: conversation_t *conversation;",
          "28955: umts_fp_conversation_info_t *umts_fp_conversation_info = NULL;",
          "28956: fp_edch_channel_info_t* fp_edch_channel_info;",
          "28957: nbap_edch_port_info_t *old_info = NULL;",
          "28963:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "28964:                                    ett_nbap_RL_Specific_E_DCH_Information_Item, RL_Specific_E_DCH_Information_Item_sequence);",
          "28969:             return offset;",
          "28970:         }",
          "28971:         clear_address(&null_addr);",
          "",
          "[Removed Lines]",
          "28952: #line 1301 \"./asn1/nbap/nbap.cnf\"",
          "28959: transportLayerAddress_ipv4 = 0;",
          "28960: BindingID_port = 0;",
          "28967:         if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "28968:         {",
          "",
          "[Added Lines]",
          "29537: #line 1384 \"./asn1/nbap/nbap.cnf\"",
          "29543: guint32 transportLayerAddress_ipv4;",
          "29544: guint16 bindingID;",
          "29545: guint32 e_dch_macdflow_id;",
          "29546: nbap_edch_channel_info_t* nbap_edch_channel_info;",
          "29547: nbap_edch_channel_info = private_data_get_nbap_edch_channel_info(actx->pinfo);",
          "29549: private_data_set_transportLayerAddress_ipv4(actx->pinfo, 0);",
          "29550: private_data_set_binding_id_port(actx->pinfo, 0);",
          "29557:         transportLayerAddress_ipv4 = private_data_get_transportLayerAddress_ipv4(actx->pinfo);",
          "29558:         bindingID = private_data_get_binding_id_port(actx->pinfo);",
          "29559:         if (actx->pinfo->fd->flags.visited || transportLayerAddress_ipv4 == 0 || bindingID == 0){",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "28973:         set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "28975:         conversation = find_conversation(actx->pinfo->num,&dst_addr,",
          "28977:             0, NO_ADDR_B|NO_PORT_B);",
          "28978:         if (conversation) {",
          "28979:             umts_fp_conversation_info = (umts_fp_conversation_info_t*)conversation_get_proto_data(conversation, proto_fp);",
          "",
          "[Removed Lines]",
          "28976:             &null_addr, PT_UDP, BindingID_port,",
          "",
          "[Added Lines]",
          "29567:             &null_addr, PT_UDP, bindingID,",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "28990:             conversation = conversation_new(actx->pinfo->num, &dst_addr,",
          "28992:                 0, NO_ADDR2|NO_PORT2);",
          "",
          "[Removed Lines]",
          "28991:                 &null_addr, PT_UDP,BindingID_port ,",
          "",
          "[Added Lines]",
          "29582:                 &null_addr, PT_UDP, bindingID,",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "29002:                 umts_fp_conversation_info->dl_frame_number   = 0;",
          "29003:                 umts_fp_conversation_info->ul_frame_number   = actx->pinfo->num;",
          "29004:                 copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "29008:                 umts_fp_conversation_info->rlc_mode          = FP_RLC_MODE_UNKNOWN;",
          "",
          "[Removed Lines]",
          "29005:                 umts_fp_conversation_info->crnc_port         = BindingID_port;",
          "",
          "[Added Lines]",
          "29596:                 umts_fp_conversation_info->crnc_port         = bindingID;",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "29010:                 fp_edch_channel_info = wmem_new0(wmem_file_scope(), fp_edch_channel_info_t);",
          "29011:                 umts_fp_conversation_info->channel_specific_info = (void*)fp_edch_channel_info;",
          "29015:                 }else{",
          "29016:                     nbap_com_context_id_t *cur_val;",
          "29018:                         umts_fp_conversation_info->com_context_id = cur_val->crnc_context;",
          "29019:                     }else{",
          "29020:                         expert_add_info(actx->pinfo, NULL, &ei_nbap_no_set_comm_context_id);",
          "",
          "[Removed Lines]",
          "29013:                 if(crcn_context_present){",
          "29014:                     umts_fp_conversation_info->com_context_id = com_context_id;",
          "29017:                     if((cur_val=(nbap_com_context_id_t *)wmem_tree_lookup32(com_context_map, node_b_com_context_id)) != NULL){",
          "",
          "[Added Lines]",
          "29604:                 if(private_data_get_crnc_context_present(actx->pinfo)){",
          "29605:                     umts_fp_conversation_info->com_context_id = private_data_get_com_context_id(actx->pinfo);",
          "29608:                     if((cur_val=(nbap_com_context_id_t *)wmem_tree_lookup32(com_context_map,private_data_get_node_b_com_context_id(actx->pinfo))) != NULL){",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "29027:                     nbap_edch_port_info_t * nbap_edch_port_info;",
          "29029:                     nbap_edch_port_info = wmem_new0(wmem_file_scope(), nbap_edch_port_info_t);",
          "29036:                     nbap_debug(\"Frame %u RL-Specific-E-DCH-Information-Item Start\",",
          "29037:                         actx->pinfo->num);",
          "29039:                     nbap_debug(\"    wmem_tree_insert32(edch_flow_port_map) com_context_id %u e_dch_macdflow_id %u IP %s Port %u\",",
          "29045:                     wmem_tree_insert32(edch_flow_port_map, umts_fp_conversation_info->com_context_id, nbap_edch_port_info);",
          "29046:                 }else{",
          "29048:                     nbap_debug(\"    Insert in existing edch_flow_port_map com_context_id %u e_dch_macdflow_id %u IP %s Port %u\",",
          "29056:                 }",
          "29059:                 copy_address(&(nbap_edch_channel_info[e_dch_macdflow_id].crnc_address),&dst_addr);",
          "29062:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "",
          "[Removed Lines]",
          "29026:                 if( (old_info = (nbap_edch_port_info_t *)wmem_tree_lookup32(edch_flow_port_map, com_context_id)) == NULL ){",
          "29032:                     nbap_edch_port_info->crnc_port[e_dch_macdflow_id] = BindingID_port;",
          "29034:                     nbap_edch_port_info->crnc_address = transportLayerAddress_ipv4;",
          "29040:                         umts_fp_conversation_info->com_context_id,",
          "29041:                         e_dch_macdflow_id,",
          "29042:                         address_to_str(wmem_packet_scope(), &dst_addr),",
          "29043:                         BindingID_port);",
          "29049:                         umts_fp_conversation_info->com_context_id,",
          "29050:                         e_dch_macdflow_id,",
          "29051:                         address_to_str(wmem_packet_scope(), &dst_addr),",
          "29052:                         BindingID_port);",
          "29055:                     old_info->crnc_port[e_dch_macdflow_id] = BindingID_port;",
          "29060:                 nbap_edch_channel_info[e_dch_macdflow_id].crnc_port = BindingID_port;",
          "",
          "[Added Lines]",
          "29617:                 e_dch_macdflow_id = private_data_get_e_dch_macdflow_id(actx->pinfo);",
          "29618:                 if( (old_info = (nbap_edch_port_info_t *)wmem_tree_lookup32(edch_flow_port_map,private_data_get_com_context_id(actx->pinfo))) == NULL ){",
          "29624:                     nbap_edch_port_info->crnc_port[e_dch_macdflow_id] = bindingID;",
          "29626:                     nbap_edch_port_info->crnc_address = private_data_get_transportLayerAddress_ipv4(actx->pinfo);",
          "29632:                         umts_fp_conversation_info->com_context_id,e_dch_macdflow_id,",
          "29633:                         address_to_str(wmem_packet_scope(), &dst_addr),bindingID);",
          "29639:                         umts_fp_conversation_info->com_context_id,e_dch_macdflow_id,",
          "29640:                         address_to_str(wmem_packet_scope(), &dst_addr), bindingID);",
          "29643:                     old_info->crnc_port[e_dch_macdflow_id] = bindingID;",
          "29648:                 nbap_edch_channel_info[e_dch_macdflow_id].crnc_port = bindingID;",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "29997: static int",
          "29998: dissect_nbap_Segment_Type(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "30000:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "30001:                                      7, &segment_type, TRUE, 0, NULL);",
          "",
          "[Removed Lines]",
          "29999: #line 608 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "30587: #line 606 \"./asn1/nbap/nbap.cnf\"",
          "30588:   guint32 segment_type;",
          "30592:   private_data_set_segment_type(actx->pinfo, segment_type);",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "32330: static int",
          "32331: dissect_nbap_CommonTransportChannelSetupRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "32333: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonTransportChannelSetupRequest(FDD) \");",
          "32335: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "32332: #line 153 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "32922: #line 162 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "32520: static int",
          "32521: dissect_nbap_FACH_ParametersItem_CTCH_SetupRqstFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "32523: address dst_addr, null_addr;",
          "32524: conversation_t *conversation;",
          "32526: fp_fach_channel_info_t* fp_fach_channel_info;",
          "32527: umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "32528: int i, j, num_tf;",
          "32535:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "32536:                                    ett_nbap_FACH_ParametersItem_CTCH_SetupRqstFDD, FACH_ParametersItem_CTCH_SetupRqstFDD_sequence);",
          "32541:     return offset;",
          "32542:   }",
          "32543:   clear_address(&null_addr);",
          "32545:   set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "32550:   conversation_set_dissector(conversation, fp_handle);",
          "",
          "[Removed Lines]",
          "32522: #line 985 \"./asn1/nbap/nbap.cnf\"",
          "32530: transportLayerAddress_ipv4 = 0;",
          "32531: BindingID_port = 0;",
          "32533: transportFormatSet_type = NBAP_CPCH;",
          "32539:   if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "32540:   {",
          "32547:   conversation = conversation_new(actx->pinfo->num, &dst_addr, &null_addr, PT_UDP,BindingID_port, 0, NO_ADDR2|NO_PORT2);",
          "",
          "[Added Lines]",
          "33112: #line 1022 \"./asn1/nbap/nbap.cnf\"",
          "33119: guint32 transportLayerAddress_ipv4;",
          "33120: guint16 bindingID;",
          "33121: guint32 common_physical_channel_id;",
          "33122: nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "33123: nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "33125: private_data_set_transportLayerAddress_ipv4(actx->pinfo, 0);",
          "33126: private_data_set_binding_id_port(actx->pinfo, 0);",
          "33129: private_data_set_transport_format_set_type(actx->pinfo, NBAP_CPCH);",
          "33135:   transportLayerAddress_ipv4 = private_data_get_transportLayerAddress_ipv4(actx->pinfo);",
          "33136:   bindingID = private_data_get_binding_id_port(actx->pinfo);",
          "33137:   if (actx->pinfo->fd->flags.visited || transportLayerAddress_ipv4 == 0 || bindingID == 0){",
          "33144:   conversation = conversation_new(actx->pinfo->num, &dst_addr, &null_addr, PT_UDP, bindingID, 0, NO_ADDR2|NO_PORT2);",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "32558:     umts_fp_conversation_info->dl_frame_number   = 0;",
          "32559:     umts_fp_conversation_info->ul_frame_number   = actx->pinfo->num;",
          "32560:     copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "32562:     umts_fp_conversation_info->rlc_mode          = FP_RLC_MODE_UNKNOWN;",
          "32567:     fp_fach_channel_info = wmem_new0(wmem_file_scope(), fp_fach_channel_info_t);",
          "",
          "[Removed Lines]",
          "32561:     umts_fp_conversation_info->crnc_port         = BindingID_port;",
          "32564:     umts_fp_conversation_info->com_context_id = crcn_context_present ? com_context_id : 1;",
          "",
          "[Added Lines]",
          "33158:     umts_fp_conversation_info->crnc_port         = bindingID;",
          "33161:     umts_fp_conversation_info->com_context_id = private_data_get_crnc_context_present(actx->pinfo) ? private_data_get_com_context_id(actx->pinfo) : 1;",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "32569:     umts_fp_conversation_info->channel_specific_info = (void*)fp_fach_channel_info;",
          "32575:     for (j = 0; j < num_tf; j++) {",
          "32578:     }",
          "32582:     for (j = 0; j < num_tf; j++) {",
          "32585:     }",
          "32590:     while(nbap_dch_chnl_info[i].next_dch != 0){",
          "32591:       i = nbap_dch_chnl_info[i].next_dch;",
          "32592:       umts_fp_conversation_info->num_dch_in_flow++;",
          "",
          "[Removed Lines]",
          "32572:     umts_fp_conversation_info->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "32574:     umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_ul_chans;",
          "32576:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_tf_size[j];",
          "32577:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_num_tbs[j];",
          "32581:     umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_dl_chans;",
          "32583:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_tf_size[j];",
          "32584:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_num_tbs[j];",
          "32588:     i = commonphysicalchannelid;",
          "32589:     umts_fp_conversation_info->dch_ids_in_flow_list[0] = commonphysicalchannelid;",
          "",
          "[Added Lines]",
          "33169:     umts_fp_conversation_info->dch_crc_present = private_data_get_dch_crc_present(actx->pinfo);",
          "33171:     common_physical_channel_id = private_data_get_common_physical_channel_id(actx->pinfo);",
          "33172:     umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[common_physical_channel_id].num_ul_chans;",
          "33174:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[common_physical_channel_id].ul_chan_tf_size[j];",
          "33175:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[common_physical_channel_id].ul_chan_num_tbs[j];",
          "33179:     umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[common_physical_channel_id].num_dl_chans;",
          "33181:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[common_physical_channel_id].dl_chan_tf_size[j];",
          "33182:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[common_physical_channel_id].dl_chan_num_tbs[j];",
          "33186:     i = common_physical_channel_id;",
          "33187:     umts_fp_conversation_info->dch_ids_in_flow_list[0] = common_physical_channel_id;",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "32610:     set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "32614:   }",
          "",
          "[Removed Lines]",
          "32613:     add_setup_conv(TransactionID, ddMode, commontransportchannelid, actx->pinfo->num, &dst_addr, BindingID_port, umts_fp_conversation_info, conversation);",
          "",
          "[Added Lines]",
          "33211:     add_setup_conv(private_data_get_transaction_id(actx->pinfo),private_data_get_dd_mode(actx->pinfo),private_data_get_common_transport_channel_id(actx->pinfo), actx->pinfo->num, &dst_addr, bindingID, umts_fp_conversation_info, conversation);",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "32637: static int",
          "32638: dissect_nbap_T_transportFormatSet(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "",
          "[Removed Lines]",
          "32639: #line 1103 \"./asn1/nbap/nbap.cnf\"",
          "32640:     transportFormatSet_type = NBAP_PCH;",
          "32641:     nbap_dch_chnl_info[commontransportchannelid].num_dl_chans = 0;",
          "32642:     nbap_dch_chnl_info[commontransportchannelid].num_ul_chans = 0;",
          "",
          "[Added Lines]",
          "33237: #line 1156 \"./asn1/nbap/nbap.cnf\"",
          "33238:     nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "33239:     nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "33240:     private_data_set_transport_format_set_type(actx->pinfo, NBAP_PCH);",
          "33241:     nbap_dch_chnl_info[private_data_get_common_transport_channel_id(actx->pinfo)].num_dl_chans = 0;",
          "33242:     nbap_dch_chnl_info[private_data_get_common_transport_channel_id(actx->pinfo)].num_ul_chans = 0;",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "32682: static int",
          "32683: dissect_nbap_PCH_ParametersItem_CTCH_SetupRqstFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "32686: address dst_addr, null_addr;",
          "32687: conversation_t *conversation;",
          "",
          "[Removed Lines]",
          "32684: #line 881 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "33284: #line 911 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "32689: fp_pch_channel_info_t *fp_pch_channel_info;",
          "32690: umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "32691: int i, j, num_tf;",
          "32699:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "32700:                                    ett_nbap_PCH_ParametersItem_CTCH_SetupRqstFDD, PCH_ParametersItem_CTCH_SetupRqstFDD_sequence);",
          "32705:     return offset;",
          "32706:   }",
          "32707:   clear_address(&null_addr);",
          "32709:   set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "32714:   conversation_set_dissector(conversation, fp_handle);",
          "",
          "[Removed Lines]",
          "32693: transportLayerAddress_ipv4 = 0;",
          "32694: BindingID_port = 0;",
          "32697: num_items = 1;",
          "32703:   if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "32704:   {",
          "32711:   conversation = conversation_new(actx->pinfo->num, &dst_addr, &null_addr, PT_UDP,BindingID_port, 0, NO_ADDR2|NO_PORT2);",
          "",
          "[Added Lines]",
          "33292: guint32 transportLayerAddress_ipv4;",
          "33293: guint16 bindingID;",
          "33294: guint32 common_transport_channel_id;",
          "33295: nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "33296: nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "33298: private_data_set_transportLayerAddress_ipv4(actx->pinfo, 0);",
          "33299: private_data_set_binding_id_port(actx->pinfo, 0);",
          "33302: private_data_set_num_items(actx->pinfo, 1);",
          "33308:   transportLayerAddress_ipv4 = private_data_get_transportLayerAddress_ipv4(actx->pinfo);",
          "33309:   bindingID = private_data_get_binding_id_port(actx->pinfo);",
          "33310:   if (actx->pinfo->fd->flags.visited || transportLayerAddress_ipv4 == 0 || bindingID == 0){",
          "33317:   conversation = conversation_new(actx->pinfo->num, &dst_addr, &null_addr, PT_UDP, bindingID, 0, NO_ADDR2|NO_PORT2);",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "32722:     umts_fp_conversation_info->dl_frame_number    = 0;",
          "32723:     umts_fp_conversation_info->ul_frame_number    = actx->pinfo->num;",
          "32724:     copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "32726:     umts_fp_conversation_info->rlc_mode           = FP_RLC_MODE_UNKNOWN;",
          "32728:     fp_pch_channel_info = wmem_new0(wmem_file_scope(), fp_pch_channel_info_t);",
          "32730:     umts_fp_conversation_info->channel_specific_info = (void*)fp_pch_channel_info;",
          "32737:     nbap_debug(\"Frame %u PCH-ParametersItem-CTCH-SetupRqstFDD Start: num_tf %u\", actx->pinfo->num, num_tf);",
          "32739:     for (j = 0; j < num_tf; j++) {",
          "32743:     }",
          "32747:     for (j = 0; j < num_tf; j++) {",
          "32751:     }",
          "32759:     while(nbap_dch_chnl_info[i].next_dch != 0){",
          "32760:       i = nbap_dch_chnl_info[i].next_dch;",
          "32761:       umts_fp_conversation_info->num_dch_in_flow++;",
          "",
          "[Removed Lines]",
          "32725:     umts_fp_conversation_info->crnc_port          = BindingID_port;",
          "32729:     fp_pch_channel_info->paging_indications = paging_indications;",
          "32733:     umts_fp_conversation_info->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "32735:     umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[commontransportchannelid].num_ul_chans;",
          "32740:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[commontransportchannelid].ul_chan_tf_size[j];",
          "32741:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[commontransportchannelid].ul_chan_num_tbs[j];",
          "32742:       nbap_debug(\"    UL tf %u ul_chan_tf_size %u\",j, nbap_dch_chnl_info[commontransportchannelid].ul_chan_tf_size[j]);",
          "32746:     umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[commontransportchannelid].num_dl_chans;",
          "32748:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[commontransportchannelid].dl_chan_tf_size[j];",
          "32749:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[commontransportchannelid].dl_chan_num_tbs[j];",
          "32750:       nbap_debug(\"    DL tf %u ul_chan_tf_size %u\",j, nbap_dch_chnl_info[commontransportchannelid].dl_chan_tf_size[j]);",
          "32754:     i = commontransportchannelid;",
          "32756:     nbap_debug(\"    commontransportchannelid %u next ch %u\",commontransportchannelid, nbap_dch_chnl_info[i].next_dch);",
          "32758:     umts_fp_conversation_info->dch_ids_in_flow_list[0] = commontransportchannelid;",
          "",
          "[Added Lines]",
          "33331:     umts_fp_conversation_info->crnc_port          = bindingID;",
          "33335:     fp_pch_channel_info->paging_indications = private_data_get_paging_indications(actx->pinfo);",
          "33339:     umts_fp_conversation_info->dch_crc_present = private_data_get_dch_crc_present(actx->pinfo);",
          "33341:     common_transport_channel_id = private_data_get_common_transport_channel_id(actx->pinfo);",
          "33342:     umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[common_transport_channel_id].num_ul_chans;",
          "33347:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[common_transport_channel_id].ul_chan_tf_size[j];",
          "33348:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[common_transport_channel_id].ul_chan_num_tbs[j];",
          "33349:       nbap_debug(\"    UL tf %u ul_chan_tf_size %u\",j, nbap_dch_chnl_info[common_transport_channel_id].ul_chan_tf_size[j]);",
          "33353:     umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[common_transport_channel_id].num_dl_chans;",
          "33355:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[common_transport_channel_id].dl_chan_tf_size[j];",
          "33356:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[common_transport_channel_id].dl_chan_num_tbs[j];",
          "33357:       nbap_debug(\"    DL tf %u ul_chan_tf_size %u\",j, nbap_dch_chnl_info[common_transport_channel_id].dl_chan_tf_size[j]);",
          "33361:     i = common_transport_channel_id;",
          "33363:     nbap_debug(\"    commontransportchannelid %u next ch %u\",common_transport_channel_id, nbap_dch_chnl_info[i].next_dch);",
          "33365:     umts_fp_conversation_info->dch_ids_in_flow_list[0] = common_transport_channel_id;",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "32782:     set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "32787:     nbap_debug(\"Frame %u PCH-ParametersItem-CTCH-SetupRqstFDD End\", actx->pinfo->num);",
          "32788:   }",
          "",
          "[Removed Lines]",
          "32785:     add_setup_conv(TransactionID, ddMode, commontransportchannelid, actx->pinfo->num, &dst_addr, BindingID_port, umts_fp_conversation_info, conversation);",
          "",
          "[Added Lines]",
          "33392:     add_setup_conv(private_data_get_transaction_id(actx->pinfo), private_data_get_dd_mode(actx->pinfo), common_transport_channel_id, actx->pinfo->num, &dst_addr, bindingID, umts_fp_conversation_info, conversation);",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "32822: static int",
          "32823: dissect_nbap_RACH_ParametersItem_CTCH_SetupRqstFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "32825: address dst_addr, null_addr;",
          "32826: conversation_t *conversation;",
          "32827: fp_rach_channel_info_t* fp_rach_channel_info;",
          "32828: umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "32829: int j, num_tf;",
          "32835:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "32836:                                    ett_nbap_RACH_ParametersItem_CTCH_SetupRqstFDD, RACH_ParametersItem_CTCH_SetupRqstFDD_sequence);",
          "32841:     return offset;",
          "32842:   }",
          "32843:   clear_address(&null_addr);",
          "32845:   set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);",
          "32849:   conversation_set_dissector(conversation, fp_handle);",
          "",
          "[Removed Lines]",
          "32824: #line 790 \"./asn1/nbap/nbap.cnf\"",
          "32831: transportLayerAddress_ipv4 = 0;",
          "32832: BindingID_port = 0;",
          "32833: transportFormatSet_type = NBAP_CPCH;",
          "32839:   if (actx->pinfo->fd->flags.visited||transportLayerAddress_ipv4==0||BindingID_port == 0)",
          "32840:   {",
          "32847:   conversation = conversation_new(actx->pinfo->num, &dst_addr, &null_addr, PT_UDP,BindingID_port, 0, NO_ADDR2|NO_PORT2);",
          "",
          "[Added Lines]",
          "33431: #line 812 \"./asn1/nbap/nbap.cnf\"",
          "33437: guint32 transportLayerAddress_ipv4;",
          "33438: guint16 bindingID;",
          "33439: guint32 common_physical_channel_id;",
          "33440: nbap_dch_channel_info_t* nbap_dch_chnl_info;",
          "33441: nbap_dch_chnl_info = private_data_get_nbap_dch_chnl_info(actx->pinfo);",
          "33443: private_data_set_transportLayerAddress_ipv4(actx->pinfo, 0);",
          "33444: private_data_set_binding_id_port(actx->pinfo, 0);",
          "33445: private_data_set_transport_format_set_type(actx->pinfo, NBAP_CPCH);",
          "33452:   transportLayerAddress_ipv4 = private_data_get_transportLayerAddress_ipv4(actx->pinfo);",
          "33453:   bindingID = private_data_get_binding_id_port(actx->pinfo);",
          "33454:   if (actx->pinfo->fd->flags.visited || transportLayerAddress_ipv4 == 0 || bindingID == 0){",
          "33461:   conversation = conversation_new(actx->pinfo->num, &dst_addr, &null_addr, PT_UDP, bindingID, 0, NO_ADDR2|NO_PORT2);",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "32857:     umts_fp_conversation_info->dl_frame_number   = 0;",
          "32858:     umts_fp_conversation_info->ul_frame_number   = actx->pinfo->num;",
          "32859:     copy_address_wmem(wmem_file_scope(), &(umts_fp_conversation_info->crnc_address), &dst_addr);",
          "32861:     umts_fp_conversation_info->rlc_mode          = FP_RLC_MODE_UNKNOWN;",
          "",
          "[Removed Lines]",
          "32860:     umts_fp_conversation_info->crnc_port         = BindingID_port;",
          "",
          "[Added Lines]",
          "33474:     umts_fp_conversation_info->crnc_port         = bindingID;",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "32876:     for (j = 0; j < num_tf; j++) {",
          "32879:     }",
          "32883:     for (j = 0; j < num_tf; j++) {",
          "32886:     }",
          "32889:     umts_fp_conversation_info->num_dch_in_flow=1;",
          "32890:     set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "32894:   }",
          "",
          "[Removed Lines]",
          "32870:     umts_fp_conversation_info->com_context_id = crcn_context_present ?  com_context_id : 1;",
          "32873:     umts_fp_conversation_info->dch_crc_present = g_nbap_msg_info_for_fp.dch_crc_present;",
          "32875:     umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_ul_chans;",
          "32877:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_tf_size[j];",
          "32878:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].ul_chan_num_tbs[j];",
          "32882:     umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[commonphysicalchannelid].num_dl_chans;",
          "32884:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_tf_size[j];",
          "32885:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[commonphysicalchannelid].dl_chan_num_tbs[j];",
          "32888:     umts_fp_conversation_info->dch_ids_in_flow_list[0] = commonphysicalchannelid;",
          "32893:     add_setup_conv(TransactionID, ddMode, commontransportchannelid, actx->pinfo->num, &dst_addr, BindingID_port, umts_fp_conversation_info, conversation);",
          "",
          "[Added Lines]",
          "33484:     umts_fp_conversation_info->com_context_id = private_data_get_crnc_context_present(actx->pinfo) ?  private_data_get_com_context_id(actx->pinfo) : 1;",
          "33487:     umts_fp_conversation_info->dch_crc_present = private_data_get_dch_crc_present(actx->pinfo);",
          "33489:     common_physical_channel_id = private_data_get_common_physical_channel_id(actx->pinfo);",
          "33490:     umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[common_physical_channel_id].num_ul_chans;",
          "33492:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[common_physical_channel_id].ul_chan_tf_size[j];",
          "33493:       umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[common_physical_channel_id].ul_chan_num_tbs[j];",
          "33497:     umts_fp_conversation_info->fp_dch_channel_info[0].num_dl_chans = num_tf = nbap_dch_chnl_info[common_physical_channel_id].num_dl_chans;",
          "33499:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[common_physical_channel_id].dl_chan_tf_size[j];",
          "33500:       umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[common_physical_channel_id].dl_chan_num_tbs[j];",
          "33503:     umts_fp_conversation_info->dch_ids_in_flow_list[0] = common_physical_channel_id;",
          "33508:     add_setup_conv(private_data_get_transaction_id(actx->pinfo),private_data_get_dd_mode(actx->pinfo),private_data_get_common_transport_channel_id(actx->pinfo), actx->pinfo->num, &dst_addr, bindingID, umts_fp_conversation_info, conversation);",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "33603: static int",
          "33604: dissect_nbap_CommonTransportChannelSetupResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "33606: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonTransportChannelSetupResponse \");",
          "33608: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "33605: #line 159 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "34220: #line 168 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "33638: static int",
          "33639: dissect_nbap_CommonTransportChannelSetupFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "33641: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonTransportChannelSetupFailure \");",
          "33643: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "33640: #line 165 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "34255: #line 174 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "34357: static int",
          "34358: dissect_nbap_UnblockResourceIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "34360: col_set_str(actx->pinfo->cinfo, COL_INFO,\"UnblockResourceIndication \");",
          "34362: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "34359: #line 563 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "34974: #line 559 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "34378: static int",
          "34379: dissect_nbap_AuditRequiredIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "34381: col_set_str(actx->pinfo->cinfo, COL_INFO,\"AuditRequiredIndication \");",
          "34383: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "34380: #line 467 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "34995: #line 463 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "34399: static int",
          "34400: dissect_nbap_AuditRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "34402: col_set_str(actx->pinfo->cinfo, COL_INFO,\"AuditRequest \");",
          "34404: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "34401: #line 220 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35016: #line 233 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "34420: static int",
          "34421: dissect_nbap_AuditResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "34423: col_set_str(actx->pinfo->cinfo, COL_INFO,\"AuditResponse \");",
          "34425: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "34422: #line 226 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35037: #line 239 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "35014: static int",
          "35015: dissect_nbap_AuditFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35017: col_set_str(actx->pinfo->cinfo, COL_INFO,\"AuditFailure \");",
          "35019: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35016: #line 232 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35631: #line 245 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "35036: static int",
          "35037: dissect_nbap_CommonMeasurementInitiationRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35039: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementInitiationRequest \");",
          "35041: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "35038: #line 300 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35653: #line 301 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "35154: static int",
          "35155: dissect_nbap_CommonMeasurementInitiationResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35157: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementInitiationResponse \");",
          "35159: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35156: #line 306 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35771: #line 307 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "35270: static int",
          "35271: dissect_nbap_CommonMeasurementInitiationFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35273: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementInitiationFailure \");",
          "35275: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35272: #line 312 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35887: #line 313 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "35291: static int",
          "35292: dissect_nbap_CommonMeasurementReport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35294: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementReport \");",
          "35296: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35293: #line 473 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "35908: #line 469 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "35407: static int",
          "35408: dissect_nbap_CommonMeasurementTerminationRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35410: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementTerminationRequest \");",
          "35412: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "35409: #line 479 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "36024: #line 475 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "35428: static int",
          "35429: dissect_nbap_CommonMeasurementFailureIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35431: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CommonMeasurementFailureIndication \");",
          "35433: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35430: #line 485 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "36045: #line 481 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "35449: static int",
          "35450: dissect_nbap_CellSetupRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35452: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CellSetupRequest(FDD) \");",
          "35454: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "35451: #line 125 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "36066: #line 134 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "35981: static int",
          "35982: dissect_nbap_CellSetupResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "35984: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CellSetupResponse \");",
          "35986: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "35983: #line 131 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "36598: #line 140 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "36002: static int",
          "36003: dissect_nbap_CellSetupFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "36005: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CellSetupFailure \");",
          "36007: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "36004: #line 137 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "36619: #line 146 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "36545: static int",
          "36546: dissect_nbap_ResourceStatusIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "36548: col_set_str(actx->pinfo->cinfo, COL_INFO,\"ResourceStatusIndication \");",
          "36550: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "36547: #line 461 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "37162: #line 457 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 136 ---",
          "[Context before]",
          "37303: static int",
          "37304: dissect_nbap_SystemInformationUpdateRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "37306: col_set_str(actx->pinfo->cinfo, COL_INFO,\"SystemInformationUpdateRequest \");",
          "37308: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "37305: #line 279 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "37920: #line 280 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 137 ---",
          "[Context before]",
          "37375: dissect_nbap_MIB_SB_SIB_InformationItem_SystemInfoUpdateRqst(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "37376: #line 611 \"./asn1/nbap/nbap.cnf\"",
          "37381:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "37382:                                    ett_nbap_MIB_SB_SIB_InformationItem_SystemInfoUpdateRqst, MIB_SB_SIB_InformationItem_SystemInfoUpdateRqst_sequence);",
          "",
          "[Removed Lines]",
          "37379:     segment_type = 0;",
          "",
          "[Added Lines]",
          "37994:     private_data_set_segment_type(actx->pinfo, 0);",
          "",
          "---------------",
          "--- Hunk 138 ---",
          "[Context before]",
          "37442: static int",
          "37443: dissect_nbap_SystemInformationUpdateResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "37445: col_set_str(actx->pinfo->cinfo, COL_INFO,\"SystemInformationUpdateResponse \");",
          "37447: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "37444: #line 285 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "38059: #line 286 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 139 ---",
          "[Context before]",
          "37463: static int",
          "37464: dissect_nbap_SystemInformationUpdateFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "37466: col_set_str(actx->pinfo->cinfo, COL_INFO,\"SystemInformationUpdateFailure \");",
          "37468: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "37465: #line 291 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "38080: #line 292 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 140 ---",
          "[Context before]",
          "37485: static int",
          "37486: dissect_nbap_RadioLinkSetupRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "37495:     col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkSetupRequest(FDD) \");",
          "",
          "[Removed Lines]",
          "37487: #line 242 \"./asn1/nbap/nbap.cnf\"",
          "37489:     g_nbap_msg_info_for_fp.ProcedureCode = ProcedureCode;",
          "37490:     g_nbap_msg_info_for_fp.ddMode = ddMode;",
          "37491:     g_nbap_msg_info_for_fp.is_uplink = TRUE;",
          "",
          "[Added Lines]",
          "38102: #line 255 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 141 ---",
          "[Context before]",
          "37968: static int",
          "37969: dissect_nbap_RadioLinkSetupResponseFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "37978:     col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkSetupResponse(FDD) \");",
          "",
          "[Removed Lines]",
          "37970: #line 255 \"./asn1/nbap/nbap.cnf\"",
          "37972:     g_nbap_msg_info_for_fp.ProcedureCode = ProcedureCode;",
          "37973:     g_nbap_msg_info_for_fp.ddMode = ddMode;",
          "37974:     g_nbap_msg_info_for_fp.is_uplink = FALSE;",
          "",
          "[Added Lines]",
          "38579: #line 262 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 142 ---",
          "[Context before]",
          "38194: static int",
          "38195: dissect_nbap_RadioLinkSetupFailureFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "38197: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkSetupFailure(FDD) \");",
          "38199: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "38196: #line 268 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "38799: #line 269 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 143 ---",
          "[Context before]",
          "38479: static int",
          "38480: dissect_nbap_RadioLinkAdditionRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "38482: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkAdditionRequest(FDD) \");",
          "",
          "[Removed Lines]",
          "38481: #line 318 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "39084: #line 319 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 144 ---",
          "[Context before]",
          "38851: static int",
          "38852: dissect_nbap_RadioLinkAdditionResponseFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "38854: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkAdditionResponse(FDD) \");",
          "",
          "[Removed Lines]",
          "38853: #line 323 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "39456: #line 324 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 145 ---",
          "[Context before]",
          "39127: static int",
          "39128: dissect_nbap_RadioLinkAdditionFailureFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "39130: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkAdditionRequest(FDD) \");",
          "",
          "[Removed Lines]",
          "39129: #line 329 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "39732: #line 330 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 146 ---",
          "[Context before]",
          "39412: static int",
          "39413: dissect_nbap_RadioLinkReconfigurationPrepareFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "39415:     col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationPrepare(FDD) \");",
          "39417:     actx->pinfo->link_dir=P2P_DIR_DL;",
          "39425:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "39414: #line 356 \"./asn1/nbap/nbap.cnf\"",
          "39418:     g_nbap_msg_info_for_fp.ProcedureCode = ProcedureCode;",
          "39419:     g_nbap_msg_info_for_fp.ddMode = ddMode;",
          "39420:     g_nbap_msg_info_for_fp.is_uplink = TRUE;",
          "",
          "[Added Lines]",
          "40017: #line 357 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 147 ---",
          "[Context before]",
          "41035: static int",
          "41036: dissect_nbap_RadioLinkReconfigurationReady(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41038: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationReady \");",
          "41040: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "41037: #line 367 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41635: #line 363 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 148 ---",
          "[Context before]",
          "41117: static int",
          "41118: dissect_nbap_RadioLinkReconfigurationFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41120: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationFailure \");",
          "41122: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "41119: #line 374 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41717: #line 370 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 149 ---",
          "[Context before]",
          "41226: static int",
          "41227: dissect_nbap_RadioLinkReconfigurationCommit(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41229: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationCommit \");",
          "41231: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "41228: #line 491 \"./asn1/nbap/nbap.cnf\"",
          "41234: #line 2238 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41826: #line 487 \"./asn1/nbap/nbap.cnf\"",
          "41832: #line 2381 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 150 ---",
          "[Context before]",
          "41256: static int",
          "41257: dissect_nbap_RadioLinkReconfigurationCancel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41259: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationCancel \");",
          "41261: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "41258: #line 497 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41856: #line 493 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 151 ---",
          "[Context before]",
          "41277: static int",
          "41278: dissect_nbap_RadioLinkReconfigurationRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41280: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationRequestFDD(FDD) \");",
          "41282: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "41279: #line 385 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "41877: #line 381 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 152 ---",
          "[Context before]",
          "41734: static int",
          "41735: dissect_nbap_RadioLinkReconfigurationResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41737: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkReconfigurationResponse \");",
          "",
          "[Removed Lines]",
          "41736: #line 391 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42334: #line 387 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 153 ---",
          "[Context before]",
          "41795: static int",
          "41796: dissect_nbap_RadioLinkDeletionRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41798: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkDeletionRequest \");",
          "41800: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "41797: #line 342 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42395: #line 343 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 154 ---",
          "[Context before]",
          "41846: static int",
          "41847: dissect_nbap_RadioLinkDeletionResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41849: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkDeletionResponse \");",
          "41851: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "41848: #line 349 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42446: #line 350 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 155 ---",
          "[Context before]",
          "41868: static int",
          "41869: dissect_nbap_DL_PowerControlRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41871: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DL-PowerControlRequest \");",
          "41873: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "41870: #line 545 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42468: #line 541 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 156 ---",
          "[Context before]",
          "41919: static int",
          "41920: dissect_nbap_DL_PowerTimeslotControlRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41922: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DL-PowerTimeslotControlRequest \");",
          "41924: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "41921: #line 551 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42519: #line 547 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 157 ---",
          "[Context before]",
          "41940: static int",
          "41941: dissect_nbap_DedicatedMeasurementInitiationRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "41943: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementInitiationRequest \");",
          "41945: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "41942: #line 407 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42540: #line 403 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 158 ---",
          "[Context before]",
          "42136: static int",
          "42137: dissect_nbap_DedicatedMeasurementInitiationResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42139: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementInitiationResponse \");",
          "42141: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "42138: #line 413 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "42736: #line 409 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 159 ---",
          "[Context before]",
          "42441: static int",
          "42442: dissect_nbap_DedicatedMeasurementInitiationFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42444: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementInitiationFailure \");",
          "42446: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "42443: #line 420 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43041: #line 416 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 160 ---",
          "[Context before]",
          "42463: static int",
          "42464: dissect_nbap_DedicatedMeasurementReport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42466: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementReport \");",
          "42468: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "42465: #line 525 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43063: #line 521 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 161 ---",
          "[Context before]",
          "42646: static int",
          "42647: dissect_nbap_DedicatedMeasurementTerminationRequest(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42649: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementTerminationRequest \");",
          "42651: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "42648: #line 532 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43246: #line 528 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 162 ---",
          "[Context before]",
          "42667: static int",
          "42668: dissect_nbap_DedicatedMeasurementFailureIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42670: col_set_str(actx->pinfo->cinfo, COL_INFO,\"DedicatedMeasurementFailureIndication \");",
          "42672: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "42669: #line 538 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43267: #line 534 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 163 ---",
          "[Context before]",
          "42689: static int",
          "42690: dissect_nbap_RadioLinkFailureIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42692: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkFailureIndication \");",
          "42694: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "42691: #line 503 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43289: #line 499 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 164 ---",
          "[Context before]",
          "42871: static int",
          "42872: dissect_nbap_RadioLinkPreemptionRequiredIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42874: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkPreemptionRequiredIndication \");",
          "42876: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "42873: #line 510 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43471: #line 506 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 165 ---",
          "[Context before]",
          "42922: static int",
          "42923: dissect_nbap_RadioLinkRestoreIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "42925: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkRestoreIndication \");",
          "42927: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "42924: #line 517 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43522: #line 513 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 166 ---",
          "[Context before]",
          "43102: static int",
          "43103: dissect_nbap_CompressedModeCommand(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "43105: col_set_str(actx->pinfo->cinfo, COL_INFO,\"CompressedModeCommand \");",
          "43107: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "43104: #line 557 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43702: #line 553 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 167 ---",
          "[Context before]",
          "43123: static int",
          "43124: dissect_nbap_ErrorIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "43126: col_set_str(actx->pinfo->cinfo, COL_INFO,\"ErrorIndication \");",
          "",
          "[Removed Lines]",
          "43125: #line 569 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43723: #line 565 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 168 ---",
          "[Context before]",
          "43143: static int",
          "43144: dissect_nbap_PrivateMessage(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "43146: col_set_str(actx->pinfo->cinfo, COL_INFO,\"PrivateMessage \");",
          "",
          "[Removed Lines]",
          "43145: #line 578 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43743: #line 574 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 169 ---",
          "[Context before]",
          "43162: static int",
          "43163: dissect_nbap_PhysicalSharedChannelReconfigurationRequestFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "43165: col_set_str(actx->pinfo->cinfo, COL_INFO,\"PhysicalSharedChannelReconfigurationRequest(FDD) \");",
          "43167: actx->pinfo->link_dir=P2P_DIR_DL;",
          "",
          "[Removed Lines]",
          "43164: #line 427 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "43762: #line 423 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 170 ---",
          "[Context before]",
          "45630: static int",
          "45631: dissect_nbap_PhysicalSharedChannelReconfigurationResponse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "45633: col_set_str(actx->pinfo->cinfo, COL_INFO,\"PhysicalSharedChannelReconfigurationResponse \");",
          "45635: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "45632: #line 433 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "46230: #line 429 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 171 ---",
          "[Context before]",
          "45681: static int",
          "45682: dissect_nbap_PhysicalSharedChannelReconfigurationFailure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "45684: col_set_str(actx->pinfo->cinfo, COL_INFO,\"PhysicalSharedChannelReconfigurationFailure \");",
          "45686: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "45683: #line 439 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "46281: #line 435 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 172 ---",
          "[Context before]",
          "47134: static int",
          "47135: dissect_nbap_BearerRearrangementIndication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "47137: col_set_str(actx->pinfo->cinfo, COL_INFO,\"BearerRearrangementIndication \");",
          "",
          "[Removed Lines]",
          "47136: #line 585 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "47734: #line 581 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 173 ---",
          "[Context before]",
          "47436: static int",
          "47437: dissect_nbap_RadioLinkParameterUpdateIndicationFDD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "47439: col_set_str(actx->pinfo->cinfo, COL_INFO,\"RadioLinkParameterUpdateIndication(FDD) \");",
          "47441: actx->pinfo->link_dir=P2P_DIR_UL;",
          "",
          "[Removed Lines]",
          "47438: #line 593 \"./asn1/nbap/nbap.cnf\"",
          "",
          "[Added Lines]",
          "48036: #line 589 \"./asn1/nbap/nbap.cnf\"",
          "",
          "---------------",
          "--- Hunk 174 ---",
          "[Context before]",
          "55335: static int dissect_ProtocolIEFieldValue(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "55336: {",
          "55338: }",
          "55340: static int dissect_ProtocolExtensionFieldExtensionValue(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "55341: {",
          "55343: }",
          "55345: static int dissect_InitiatingMessageValue(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "",
          "[Removed Lines]",
          "55333: #line 365 \"./asn1/nbap/packet-nbap-template.c\"",
          "55337:   return (dissector_try_uint_new(nbap_ies_dissector_table, ProtocolIE_ID, tvb, pinfo, tree, FALSE, NULL)) ? tvb_captured_length(tvb) : 0;",
          "55342:   return (dissector_try_uint_new(nbap_extension_dissector_table, ProtocolIE_ID, tvb, pinfo, tree, FALSE, NULL)) ? tvb_captured_length(tvb) : 0;",
          "",
          "[Added Lines]",
          "55931: #line 801 \"./asn1/nbap/packet-nbap-template.c\"",
          "55935:   guint32 protocol_ie_id;",
          "55936:   protocol_ie_id = private_data_get_protocol_ie_id(pinfo);",
          "55937:   return (dissector_try_uint_new(nbap_ies_dissector_table, protocol_ie_id, tvb, pinfo, tree, FALSE, NULL)) ? tvb_captured_length(tvb) : 0;",
          "55942:   guint32 protocol_ie_id;",
          "55943:   protocol_ie_id = private_data_get_protocol_ie_id(pinfo);",
          "55944:   return (dissector_try_uint_new(nbap_extension_dissector_table, protocol_ie_id, tvb, pinfo, tree, FALSE, NULL)) ? tvb_captured_length(tvb) : 0;",
          "",
          "---------------",
          "--- Hunk 175 ---",
          "[Context before]",
          "55365:   umts_fp_conversation_info_t *umts_fp_conversation_info;",
          "55366:   fp_hsdsch_channel_info_t* fp_hsdsch_channel_info = NULL;",
          "55367:   guint32 i;",
          "55369:   if (pinfo->fd->flags.visited){",
          "55370:     return;",
          "55371:   }",
          "55374:   clear_address(&null_addr);",
          "55375:   for (i = 0; i < maxNrOfMACdFlows; i++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55970:   nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;",
          "55976:   nbap_hsdsch_channel_info = private_data_get_nbap_hsdsch_channel_info(pinfo);",
          "",
          "---------------",
          "--- Hunk 176 ---",
          "[Context before]",
          "55520: {",
          "55521:   proto_item *nbap_item = NULL;",
          "55522:   proto_tree *nbap_tree = NULL;",
          "55525:   col_set_str(pinfo->cinfo, COL_PROTOCOL, \"NBAP\");",
          "",
          "[Removed Lines]",
          "55523:   int i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 177 ---",
          "[Context before]",
          "55528:   nbap_item = proto_tree_add_item(tree, proto_nbap, tvb, 0, -1, ENC_NA);",
          "55529:   nbap_tree = proto_item_add_subtree(nbap_item, ett_nbap);",
          "55537:   return dissect_NBAP_PDU_PDU(tvb, pinfo, nbap_tree, data);",
          "55538: }",
          "",
          "[Removed Lines]",
          "55532:   for (i = 0; i < maxNrOfMACdFlows; i++) {",
          "55533:     nbap_hsdsch_channel_info[i].entity = hs;",
          "55534:   }",
          "55535:   ul_scrambling_code = 0;",
          "",
          "[Added Lines]",
          "56135:   nbap_reset_private_data(pinfo);",
          "",
          "---------------",
          "--- Hunk 178 ---",
          "[Context before]",
          "68795:         NULL, HFILL }},",
          "68799:   };",
          "",
          "[Removed Lines]",
          "68798: #line 665 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "69398: #line 1103 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 179 ---",
          "[Context before]",
          "70435:     &ett_nbap_Outcome,",
          "70439:   };",
          "70441:   static ei_register_info ei[] = {",
          "",
          "[Removed Lines]",
          "70438: #line 674 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "71038: #line 1112 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 180 ---",
          "[Context before]",
          "71591: }",
          "",
          "[Removed Lines]",
          "71590: #line 729 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "72190: #line 1167 \"./asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "66bc372716e04d6a8afdf6712583c9b5d11fee55",
      "candidate_info": {
        "commit_hash": "66bc372716e04d6a8afdf6712583c9b5d11fee55",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/66bc372716e04d6a8afdf6712583c9b5d11fee55",
        "files": [
          "epan/dissectors/asn1/nbap/nbap.cnf",
          "epan/dissectors/packet-nbap.c",
          "epan/dissectors/packet-umts_fp.h"
        ],
        "message": "NBAP: avoid linking a DCH-ID to itself\n\nOtherwise it can create an infinite loop, leading to a buffer overflow.\nAlso add explicit cheks on the buffer usage and set its maximum size to\n128 instead of 32 per ASN.1 description.\n\nBug: 14471\nChange-Id: I18d26369cf3d1cf2a32c86a972c78ea9f6f7a503\nReviewed-on: https://code.wireshark.org/review/26264\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\n(cherry picked from commit 1c9adc63c2c2892a3f069777dfb8c66f79b9ba38)\nConflicts:\n\tepan/dissectors/asn1/nbap/nbap.cnf\n\tepan/dissectors/packet-nbap.c\n\tepan/dissectors/packet-umts_fp.h\nReviewed-on: https://code.wireshark.org/review/26267",
        "before_after_code_files": [
          "epan/dissectors/asn1/nbap/nbap.cnf||epan/dissectors/asn1/nbap/nbap.cnf",
          "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c",
          "epan/dissectors/packet-umts_fp.h||epan/dissectors/packet-umts_fp.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/asn1/nbap/nbap.cnf||epan/dissectors/asn1/nbap/nbap.cnf",
            "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c",
            "epan/dissectors/packet-umts_fp.h||epan/dissectors/packet-umts_fp.h"
          ],
          "candidate": [
            "epan/dissectors/asn1/nbap/nbap.cnf||epan/dissectors/asn1/nbap/nbap.cnf",
            "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c",
            "epan/dissectors/packet-umts_fp.h||epan/dissectors/packet-umts_fp.h"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/asn1/nbap/nbap.cnf||epan/dissectors/asn1/nbap/nbap.cnf": [
          "File: epan/dissectors/asn1/nbap/nbap.cnf -> epan/dissectors/asn1/nbap/nbap.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "675:     if(g_num_dch_in_flow>0){",
          "676:         g_dchs_in_flow_list[g_num_dch_in_flow-1]=dch_id;",
          "677:         nbap_dch_chnl_info[dch_id].next_dch = 0;",
          "679:             nbap_dch_chnl_info[prev_dch_id].next_dch = dch_id;",
          "680:         }",
          "681:     }",
          "",
          "[Removed Lines]",
          "678:         if(prev_dch_id != 0 && prev_dch_id != 0xffffffff){",
          "",
          "[Added Lines]",
          "678:         if(prev_dch_id != 0 && prev_dch_id != 0xffffffff && prev_dch_id != dch_id){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "891:                 nbap_debug(\"    commontransportchannelid %%u next ch %%u\",commontransportchannelid, nbap_dch_chnl_info[i].next_dch);",
          "893:                 umts_fp_conversation_info->dchs_in_flow_list[0] = commontransportchannelid;",
          "895:                     i = nbap_dch_chnl_info[i].next_dch;",
          "896:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "897:                     umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "[Removed Lines]",
          "894:                 while(nbap_dch_chnl_info[i].next_dch != 0){",
          "",
          "[Added Lines]",
          "894:                 while(nbap_dch_chnl_info[i].next_dch != 0 && umts_fp_conversation_info->num_dch_in_flow < FP_maxNrOfDCHs){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "993:                 i = commonphysicalchannelid;",
          "994:                 umts_fp_conversation_info->dchs_in_flow_list[0] = commonphysicalchannelid;",
          "996:                     i = nbap_dch_chnl_info[i].next_dch;",
          "997:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "998:                     umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "[Removed Lines]",
          "995:                 while(nbap_dch_chnl_info[i].next_dch != 0){",
          "",
          "[Added Lines]",
          "995:                 while(nbap_dch_chnl_info[i].next_dch != 0 && umts_fp_conversation_info->num_dch_in_flow < FP_maxNrOfDCHs){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1211:                     i = dch_id;",
          "1212:                     umts_fp_conversation_info->dchs_in_flow_list[0] = dch_id;",
          "1216:                         i = nbap_dch_chnl_info[i].next_dch;",
          "",
          "[Removed Lines]",
          "1213:                     while(nbap_dch_chnl_info[i].next_dch != 0){",
          "",
          "[Added Lines]",
          "1213:                     while(nbap_dch_chnl_info[i].next_dch != 0 && umts_fp_conversation_info->num_dch_in_flow < FP_maxNrOfDCHs){",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c": [
          "File: epan/dissectors/packet-nbap.c -> epan/dissectors/packet-nbap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14804:     if(g_num_dch_in_flow>0){",
          "14805:         g_dchs_in_flow_list[g_num_dch_in_flow-1]=dch_id;",
          "14806:         nbap_dch_chnl_info[dch_id].next_dch = 0;",
          "14808:             nbap_dch_chnl_info[prev_dch_id].next_dch = dch_id;",
          "14809:         }",
          "14810:     }",
          "",
          "[Removed Lines]",
          "14807:         if(prev_dch_id != 0 && prev_dch_id != 0xffffffff){",
          "",
          "[Added Lines]",
          "14807:         if(prev_dch_id != 0 && prev_dch_id != 0xffffffff && prev_dch_id != dch_id){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28748:                     i = dch_id;",
          "28749:                     umts_fp_conversation_info->dchs_in_flow_list[0] = dch_id;",
          "28753:                         i = nbap_dch_chnl_info[i].next_dch;",
          "",
          "[Removed Lines]",
          "28750:                     while(nbap_dch_chnl_info[i].next_dch != 0){",
          "",
          "[Added Lines]",
          "28750:                     while(nbap_dch_chnl_info[i].next_dch != 0 && umts_fp_conversation_info->num_dch_in_flow < FP_maxNrOfDCHs){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "32453:                 i = commonphysicalchannelid;",
          "32454:                 umts_fp_conversation_info->dchs_in_flow_list[0] = commonphysicalchannelid;",
          "32456:                     i = nbap_dch_chnl_info[i].next_dch;",
          "32457:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "32458:                     umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "[Removed Lines]",
          "32455:                 while(nbap_dch_chnl_info[i].next_dch != 0){",
          "",
          "[Added Lines]",
          "32455:                 while(nbap_dch_chnl_info[i].next_dch != 0 && umts_fp_conversation_info->num_dch_in_flow < FP_maxNrOfDCHs){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "32625:                 nbap_debug(\"    commontransportchannelid %u next ch %u\",commontransportchannelid, nbap_dch_chnl_info[i].next_dch);",
          "32627:                 umts_fp_conversation_info->dchs_in_flow_list[0] = commontransportchannelid;",
          "32629:                     i = nbap_dch_chnl_info[i].next_dch;",
          "32630:                     umts_fp_conversation_info->num_dch_in_flow++;",
          "32631:                     umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "",
          "[Removed Lines]",
          "32628:                 while(nbap_dch_chnl_info[i].next_dch != 0){",
          "",
          "[Added Lines]",
          "32628:                 while(nbap_dch_chnl_info[i].next_dch != 0 && umts_fp_conversation_info->num_dch_in_flow < FP_maxNrOfDCHs){",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-umts_fp.h||epan/dissectors/packet-umts_fp.h": [
          "File: epan/dissectors/packet-umts_fp.h -> epan/dissectors/packet-umts_fp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "124: } fp_info;",
          "129: typedef struct",
          "130: {",
          "",
          "[Removed Lines]",
          "127: #define FP_maxNrOfTFs           32",
          "",
          "[Added Lines]",
          "127: #define FP_maxNrOfDCHs 128",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:     gint num_dch_in_flow;",
          "160:     enum fp_rlc_mode rlc_mode;",
          "166:     gint   no_ddi_entries;",
          "",
          "[Removed Lines]",
          "157:     gint dchs_in_flow_list[FP_maxNrOfTFs];",
          "163:     fp_dch_channel_info_t fp_dch_channel_info[FP_maxNrOfTFs];",
          "",
          "[Added Lines]",
          "157:     gint dchs_in_flow_list[FP_maxNrOfDCHs];",
          "163:     fp_dch_channel_info_t fp_dch_channel_info[FP_maxNrOfDCHs];",
          "",
          "---------------"
        ]
      }
    }
  ]
}