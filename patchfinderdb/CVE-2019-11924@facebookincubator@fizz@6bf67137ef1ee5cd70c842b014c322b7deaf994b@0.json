{
  "cve_id": "CVE-2019-11924",
  "cve_desc": "A peer could send empty handshake fragments containing only padding which would be kept in memory until a full handshake was received, resulting in memory exhaustion. This issue affects versions v2019.01.28.00 and above of fizz, until v2019.08.05.00.",
  "repo": "facebookincubator/fizz",
  "patch_hash": "6bf67137ef1ee5cd70c842b014c322b7deaf994b",
  "patch_info": {
    "commit_hash": "6bf67137ef1ee5cd70c842b014c322b7deaf994b",
    "repo": "facebookincubator/fizz",
    "commit_url": "https://github.com/facebookincubator/fizz/commit/6bf67137ef1ee5cd70c842b014c322b7deaf994b",
    "files": [
      "fizz/record/EncryptedRecordLayer.cpp",
      "fizz/record/test/EncryptedRecordTest.cpp"
    ],
    "message": "Reject zero length handshake records.\n\nSummary:\nZero length (all padding) handshake are forbidden by RFC. Allowing\nthese was a regression in D13754697 (2c6f78a).\n\nThis is a partial fix for CVE-2019-11924\n\nReviewed By: xybu\n\nDifferential Revision: D16285100\n\nfbshipit-source-id: 05a19d31ad74601ce89156a0e59517aaad8dd928",
    "before_after_code_files": [
      "fizz/record/EncryptedRecordLayer.cpp||fizz/record/EncryptedRecordLayer.cpp",
      "fizz/record/test/EncryptedRecordTest.cpp||fizz/record/test/EncryptedRecordTest.cpp"
    ]
  },
  "patch_diff": {
    "fizz/record/EncryptedRecordLayer.cpp||fizz/record/EncryptedRecordLayer.cpp": [
      "File: fizz/record/EncryptedRecordLayer.cpp -> fizz/record/EncryptedRecordLayer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "147:           static_cast<ContentTypeType>(msg.type)));",
      "148:   }",
      "151:     if (msg.type == ContentType::application_data) {",
      "152:       msg.fragment = folly::IOBuf::create(0);",
      "153:     } else {",
      "",
      "[Removed Lines]",
      "150:   if (!msg.fragment) {",
      "",
      "[Added Lines]",
      "150:   if (!msg.fragment || msg.fragment->empty()) {",
      "",
      "---------------"
    ],
    "fizz/record/test/EncryptedRecordTest.cpp||fizz/record/test/EncryptedRecordTest.cpp": [
      "File: fizz/record/test/EncryptedRecordTest.cpp -> fizz/record/test/EncryptedRecordTest.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "180:         expectSame(buf, \"0123456789\");",
      "181:         return getBuf(\"16000000\");",
      "182:       }));",
      "184: }",
      "186: TEST_F(EncryptedRecordTest, TestNoContentType) {",
      "",
      "[Removed Lines]",
      "183:   EXPECT_NO_THROW(read_.read(queue_));",
      "",
      "[Added Lines]",
      "183:   EXPECT_ANY_THROW(read_.read(queue_));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2c6f78a0f1629303990818bea3d6baccfb3d3fb8",
      "candidate_info": {
        "commit_hash": "2c6f78a0f1629303990818bea3d6baccfb3d3fb8",
        "repo": "facebookincubator/fizz",
        "commit_url": "https://github.com/facebookincubator/fizz/commit/2c6f78a0f1629303990818bea3d6baccfb3d3fb8",
        "files": [
          "fizz/crypto/aead/IOBufUtil.cpp",
          "fizz/crypto/aead/IOBufUtil.h",
          "fizz/crypto/aead/OpenSSLEVPCipher-inl.h",
          "fizz/crypto/aead/OpenSSLEVPCipher.h",
          "fizz/record/EncryptedRecordLayer.cpp",
          "fizz/record/test/EncryptedRecordBench.cpp",
          "fizz/record/test/EncryptedRecordTest.cpp"
        ],
        "message": "Fix iobuf iteration\n\nSummary:\n25% improvement in CPU for small writes.\n\nThis fixes several cases in iteration of Iobufs which have overhead.\n\nFor example:\n1. replacing iobuf for each iteration with do ... while() over iobuf\n2. Replacing iteration over the iobufs for figuring out padding\n3. trimming the iobufs\n4. reducing repeated calls to coalesce()\n\nReviewed By: mingtaoy\n\nDifferential Revision: D13754697\n\nfbshipit-source-id: b0ada8c05427a5bef20db5d7f85803b1fe7db39f",
        "before_after_code_files": [
          "fizz/crypto/aead/IOBufUtil.cpp||fizz/crypto/aead/IOBufUtil.cpp",
          "fizz/crypto/aead/IOBufUtil.h||fizz/crypto/aead/IOBufUtil.h",
          "fizz/crypto/aead/OpenSSLEVPCipher-inl.h||fizz/crypto/aead/OpenSSLEVPCipher-inl.h",
          "fizz/crypto/aead/OpenSSLEVPCipher.h||fizz/crypto/aead/OpenSSLEVPCipher.h",
          "fizz/record/EncryptedRecordLayer.cpp||fizz/record/EncryptedRecordLayer.cpp",
          "fizz/record/test/EncryptedRecordBench.cpp||fizz/record/test/EncryptedRecordBench.cpp",
          "fizz/record/test/EncryptedRecordTest.cpp||fizz/record/test/EncryptedRecordTest.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fizz/record/EncryptedRecordLayer.cpp||fizz/record/EncryptedRecordLayer.cpp",
            "fizz/record/test/EncryptedRecordTest.cpp||fizz/record/test/EncryptedRecordTest.cpp"
          ],
          "candidate": [
            "fizz/record/EncryptedRecordLayer.cpp||fizz/record/EncryptedRecordLayer.cpp",
            "fizz/record/test/EncryptedRecordTest.cpp||fizz/record/test/EncryptedRecordTest.cpp"
          ]
        }
      },
      "candidate_diff": {
        "fizz/crypto/aead/IOBufUtil.cpp||fizz/crypto/aead/IOBufUtil.cpp": [
          "File: fizz/crypto/aead/IOBufUtil.cpp -> fizz/crypto/aead/IOBufUtil.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:   auto trim = trimmed.size();",
          "17:   size_t currentTrim = trim;",
          "18:   IOBuf* current = buf.prev();",
          "21:     size_t toTrim =",
          "22:         std::min(currentTrim, static_cast<size_t>(current->length()));",
          "23:     memcpy(",
          "",
          "[Removed Lines]",
          "19:   size_t chainElements = buf.countChainElements();",
          "20:   for (size_t i = 0; i < chainElements && currentTrim != 0; ++i) {",
          "",
          "[Added Lines]",
          "20:   do {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:         toTrim);",
          "27:     current->trimEnd(toTrim);",
          "28:     currentTrim -= toTrim;",
          "29:     current = current->prev();",
          "31: }",
          "33: void XOR(ByteRange first, MutableByteRange second) {",
          "",
          "[Removed Lines]",
          "30:   }",
          "",
          "[Added Lines]",
          "29:     DCHECK(current != &buf || currentTrim == 0);",
          "31:   } while (currentTrim != 0);",
          "32: }",
          "34: void trimStart(IOBuf& buf, size_t toTrim) {",
          "37:   auto currentBuffer = &buf;",
          "38:   do {",
          "39:     auto amtTrim = std::min(currentBuffer->length(), toTrim);",
          "40:     currentBuffer->trimStart(amtTrim);",
          "41:     toTrim -= amtTrim;",
          "42:     currentBuffer = currentBuffer->next();",
          "43:   } while (toTrim > 0 && currentBuffer != &buf);",
          "",
          "---------------"
        ],
        "fizz/crypto/aead/IOBufUtil.h||fizz/crypto/aead/IOBufUtil.h": [
          "File: fizz/crypto/aead/IOBufUtil.h -> fizz/crypto/aead/IOBufUtil.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: void trimBytes(folly::IOBuf& buf, folly::MutableByteRange trimmed);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: void trimStart(folly::IOBuf& buf, size_t toTrim);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: template <typename Func>",
          "38: void transformBuffer(const folly::IOBuf& in, folly::IOBuf& out, Func func) {",
          "39:   folly::IOBuf* currentOut = &out;",
          "40:   size_t offset = 0;",
          "45:     while (currentLength != 0) {",
          "46:       size_t selected = std::min(",
          "47:           static_cast<size_t>(currentOut->length() - offset), currentLength);",
          "48:       func(",
          "49:           currentOut->writableData() + offset,",
          "51:           selected);",
          "52:       currentLength -= selected;",
          "53:       offset += selected;",
          "",
          "[Removed Lines]",
          "42:   for (auto current : in) {",
          "43:     size_t currentLength = current.size();",
          "50:           current.data() + (current.size() - currentLength),",
          "",
          "[Added Lines]",
          "46:   auto current = &in;",
          "52:   do {",
          "53:     size_t currentLength = current->length();",
          "60:           current->data() + (current->length() - currentLength),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:         currentOut = currentOut->next();",
          "57:       }",
          "58:     }",
          "60: }",
          "",
          "[Removed Lines]",
          "59:   }",
          "",
          "[Added Lines]",
          "69:     current = current->next();",
          "70:   } while (current != &in);",
          "",
          "---------------"
        ],
        "fizz/crypto/aead/OpenSSLEVPCipher-inl.h||fizz/crypto/aead/OpenSSLEVPCipher-inl.h": [
          "File: fizz/crypto/aead/OpenSSLEVPCipher-inl.h -> fizz/crypto/aead/OpenSSLEVPCipher-inl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:     throw std::runtime_error(\"Invalid IV\");",
          "92:   }",
          "93:   trafficKey_ = std::move(trafficKey);",
          "94:   if (EVP_EncryptInit_ex(",
          "95:           encryptCtx_.get(),",
          "96:           nullptr,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:   trafficIvKey_ = trafficKey_.iv->coalesce();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:   const size_t prefixLength = EVPImpl::kIVLength - sizeof(uint64_t);",
          "158:   memset(iv.data(), 0, prefixLength);",
          "159:   memcpy(iv.data() + prefixLength, &bigEndianSeqNum, 8);",
          "161:   return iv;",
          "162: }",
          "163: } // namespace fizz",
          "",
          "[Removed Lines]",
          "160:   XOR(trafficKey_.iv->coalesce(), folly::range(iv));",
          "",
          "[Added Lines]",
          "162:   XOR(trafficIvKey_, folly::range(iv));",
          "",
          "---------------"
        ],
        "fizz/crypto/aead/OpenSSLEVPCipher.h||fizz/crypto/aead/OpenSSLEVPCipher.h": [
          "File: fizz/crypto/aead/OpenSSLEVPCipher.h -> fizz/crypto/aead/OpenSSLEVPCipher.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:   std::array<uint8_t, EVPImpl::kIVLength> createIV(uint64_t seqNum) const;",
          "82:   TrafficKey trafficKey_;",
          "83:   size_t headroom_{5};",
          "85:   folly::ssl::EvpCipherCtxUniquePtr encryptCtx_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:   folly::ByteRange trafficIvKey_;",
          "",
          "---------------"
        ],
        "fizz/record/EncryptedRecordLayer.cpp||fizz/record/EncryptedRecordLayer.cpp": [
          "File: fizz/record/EncryptedRecordLayer.cpp -> fizz/record/EncryptedRecordLayer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #include <fizz/record/EncryptedRecordLayer.h>",
          "11: namespace fizz {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include <fizz/crypto/aead/IOBufUtil.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: folly::Optional<Buf> EncryptedReadRecordLayer::getDecryptedBuf(",
          "26:     folly::IOBufQueue& buf) {",
          "27:   while (true) {",
          "30:     if (buf.empty() || !cursor.canAdvance(kEncryptedHeaderSize)) {",
          "31:       return folly::none;",
          "",
          "[Removed Lines]",
          "28:     folly::io::Cursor cursor(buf.front());",
          "",
          "[Added Lines]",
          "31:     auto frontBuf = buf.front();",
          "32:     folly::io::Cursor cursor(frontBuf);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     if (length > kMaxEncryptedRecordSize) {",
          "48:       throw std::runtime_error(\"received too long encrypted record\");",
          "49:     }",
          "51:       return folly::none;",
          "52:     }",
          "",
          "[Removed Lines]",
          "50:     if (buf.chainLength() < (cursor - buf.front()) + length) {",
          "",
          "[Added Lines]",
          "54:     auto consumedBytes = cursor - frontBuf;",
          "55:     if (buf.chainLength() < consumedBytes + length) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "58:           toString(alert.description)));",
          "59:     }",
          "61:     std::unique_ptr<folly::IOBuf> encrypted;",
          "65:     if (contentType == ContentType::change_cipher_spec) {",
          "66:       encrypted->coalesce();",
          "",
          "[Removed Lines]",
          "62:     cursor.clone(encrypted, length);",
          "63:     buf.trimStart(cursor - buf.front());",
          "",
          "[Added Lines]",
          "69:     if (buf.chainLength() == consumedBytes + length) {",
          "70:       encrypted = buf.move();",
          "71:     } else {",
          "72:       encrypted = buf.split(consumedBytes + length);",
          "73:     }",
          "74:     trimStart(*encrypted, consumedBytes);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "102:     return folly::none;",
          "103:   }",
          "112:   TLSMessage msg;",
          "117:   switch (msg.type) {",
          "118:     case ContentType::handshake:",
          "",
          "[Removed Lines]",
          "105:   folly::IOBufQueue decrypted;",
          "106:   decrypted.append(std::move(*decryptedBuf));",
          "108:   folly::io::Cursor paddingCursor(decrypted.front());",
          "109:   paddingCursor.advanceToEnd();",
          "110:   while (!*(paddingCursor -= 1).data()) {",
          "111:   }",
          "113:   msg.type = static_cast<ContentType>(paddingCursor.readBE<ContentTypeType>());",
          "114:   decrypted.trimEnd(paddingCursor.totalLength() + sizeof(ContentType));",
          "115:   msg.fragment = decrypted.move();",
          "",
          "[Added Lines]",
          "120:   auto currentBuf = decryptedBuf->get();",
          "121:   bool nonZeroFound = false;",
          "122:   do {",
          "123:     currentBuf = currentBuf->prev();",
          "124:     size_t i = currentBuf->length();",
          "125:     while (i > 0 && !nonZeroFound) {",
          "126:       nonZeroFound = (currentBuf->data()[i - 1] != 0);",
          "127:       i--;",
          "128:     }",
          "129:     if (nonZeroFound) {",
          "130:       msg.type = static_cast<ContentType>(currentBuf->data()[i]);",
          "131:     }",
          "132:     currentBuf->trimEnd(currentBuf->length() - i);",
          "133:   } while (!nonZeroFound && currentBuf != decryptedBuf->get());",
          "134:   if (!nonZeroFound) {",
          "135:     throw std::runtime_error(\"No content type found\");",
          "136:   }",
          "137:   msg.fragment = std::move(*decryptedBuf);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "133:     }",
          "134:   }",
          "137: }",
          "139: EncryptionLevel EncryptedReadRecordLayer::getEncryptionLevel() const {",
          "",
          "[Removed Lines]",
          "136:   return std::move(msg);",
          "",
          "[Added Lines]",
          "158:   return msg;",
          "",
          "---------------"
        ],
        "fizz/record/test/EncryptedRecordBench.cpp||fizz/record/test/EncryptedRecordBench.cpp": [
          "File: fizz/record/test/EncryptedRecordBench.cpp -> fizz/record/test/EncryptedRecordBench.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #include <vector>",
          "4: #include <folly/Benchmark.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: #include <iostream>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:   folly::doNotOptimizeAway(content);",
          "62: }",
          "64: BENCHMARK_PARAM(encryptGCM, 10);",
          "65: BENCHMARK_PARAM(encryptGCM, 100);",
          "66: BENCHMARK_PARAM(encryptGCM, 1000);",
          "67: BENCHMARK_PARAM(encryptGCM, 4000);",
          "68: BENCHMARK_PARAM(encryptGCM, 8000);",
          "70: #if FOLLY_OPENSSL_IS_110 && !defined(OPENSSL_NO_OCB)",
          "71: void encryptOCB(uint32_t n, size_t size) {",
          "72:   std::unique_ptr<Aead> aead;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: void decryptGCM(uint32_t n, size_t size) {",
          "66:   std::vector<folly::IOBufQueue> contents;",
          "67:   EncryptedReadRecordLayer read{EncryptionLevel::AppTraffic};",
          "68:   BENCHMARK_SUSPEND {",
          "69:     EncryptedWriteRecordLayer write{EncryptionLevel::AppTraffic};",
          "70:     auto writeAead = std::make_unique<OpenSSLEVPCipher<AESGCM128>>();",
          "71:     auto readAead = std::make_unique<OpenSSLEVPCipher<AESGCM128>>();",
          "72:     writeAead->setKey(getKey());",
          "73:     readAead->setKey(getKey());",
          "74:     write.setAead(folly::ByteRange(), std::move(writeAead));",
          "75:     read.setAead(folly::ByteRange(), std::move(readAead));",
          "76:     for (size_t i = 0; i < n; ++i) {",
          "77:       TLSMessage msg{ContentType::application_data, makeRandom(size)};",
          "78:       auto content = write.write(std::move(msg));",
          "79:       folly::IOBufQueue queue{folly::IOBufQueue::cacheChainLength()};",
          "80:       queue.append(std::move(content.data));",
          "81:       folly::doNotOptimizeAway(queue.front());",
          "82:       contents.push_back(std::move(queue));",
          "83:     }",
          "84:   }",
          "86:   folly::Optional<TLSMessage> msg;",
          "87:   for (auto& buf : contents) {",
          "88:     msg = read.read(buf);",
          "89:   }",
          "90:   folly::doNotOptimizeAway(msg);",
          "91: }",
          "93: void decryptGCMNoRecord(uint32_t n, size_t size) {",
          "94:   std::unique_ptr<Aead> readAead;",
          "95:   folly::IOBufQueue queue{folly::IOBufQueue::cacheChainLength()};",
          "96:   std::vector<std::unique_ptr<folly::IOBuf>> contents;",
          "97:   auto aad = folly::IOBuf::copyBuffer(\"aad\");",
          "98:   BENCHMARK_SUSPEND {",
          "99:     auto writeAead = std::make_unique<OpenSSLEVPCipher<AESGCM128>>();",
          "100:     readAead = std::make_unique<OpenSSLEVPCipher<AESGCM128>>();",
          "101:     writeAead->setKey(getKey());",
          "102:     readAead->setKey(getKey());",
          "103:     for (size_t i = 0; i < n; ++i) {",
          "104:       auto out = writeAead->encrypt(makeRandom(size), aad.get(), 0);",
          "105:       contents.push_back(std::move(out));",
          "106:     }",
          "107:   }",
          "109:   std::unique_ptr<folly::IOBuf> in;",
          "110:   for (auto& buf : contents) {",
          "111:     in = readAead->decrypt(std::move(buf), aad.get(), 0);",
          "112:   }",
          "113:   folly::doNotOptimizeAway(in);",
          "114: }",
          "116: void touchEveryByte(uint32_t n, size_t size) {",
          "117:   std::vector<std::unique_ptr<folly::IOBuf>> contents;",
          "118:   BENCHMARK_SUSPEND {",
          "119:     for (size_t i = 0; i < n; ++i) {",
          "120:       contents.push_back(makeRandom(size));",
          "121:     }",
          "122:   }",
          "124:   int isTrue = 0;",
          "125:   for (auto& buf : contents) {",
          "126:     for (size_t i = 0; i < buf->length(); ++i) {",
          "127:       isTrue ^= buf->data()[i];",
          "128:     }",
          "129:   }",
          "130:   folly::doNotOptimizeAway(isTrue);",
          "131: }",
          "139: BENCHMARK_PARAM(decryptGCM, 10);",
          "140: BENCHMARK_PARAM(decryptGCM, 1000);",
          "141: BENCHMARK_PARAM(decryptGCM, 8000);",
          "143: BENCHMARK_PARAM(decryptGCMNoRecord, 10);",
          "144: BENCHMARK_PARAM(decryptGCMNoRecord, 1000);",
          "145: BENCHMARK_PARAM(decryptGCMNoRecord, 8000);",
          "147: BENCHMARK_PARAM(touchEveryByte, 10);",
          "148: BENCHMARK_PARAM(touchEveryByte, 1000);",
          "149: BENCHMARK_PARAM(touchEveryByte, 8000);",
          "",
          "---------------"
        ],
        "fizz/record/test/EncryptedRecordTest.cpp||fizz/record/test/EncryptedRecordTest.cpp": [
          "File: fizz/record/test/EncryptedRecordTest.cpp -> fizz/record/test/EncryptedRecordTest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:         expectSame(buf, \"0123456789\");",
          "181:         return getBuf(\"16000000\");",
          "182:       }));",
          "184: }",
          "186: TEST_F(EncryptedRecordTest, TestNoContentType) {",
          "",
          "[Removed Lines]",
          "183:   EXPECT_ANY_THROW(read_.read(queue_));",
          "",
          "[Added Lines]",
          "183:   EXPECT_NO_THROW(read_.read(queue_));",
          "",
          "---------------"
        ]
      }
    }
  ]
}