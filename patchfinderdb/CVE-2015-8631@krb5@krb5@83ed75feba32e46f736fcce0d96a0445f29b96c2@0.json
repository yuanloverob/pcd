{
  "cve_id": "CVE-2015-8631",
  "cve_desc": "Multiple memory leaks in kadmin/server/server_stubs.c in kadmind in MIT Kerberos 5 (aka krb5) before 1.13.4 and 1.14.x before 1.14.1 allow remote authenticated users to cause a denial of service (memory consumption) via a request specifying a NULL principal name.",
  "repo": "krb5/krb5",
  "patch_hash": "83ed75feba32e46f736fcce0d96a0445f29b96c2",
  "patch_info": {
    "commit_hash": "83ed75feba32e46f736fcce0d96a0445f29b96c2",
    "repo": "krb5/krb5",
    "commit_url": "https://github.com/krb5/krb5/commit/83ed75feba32e46f736fcce0d96a0445f29b96c2",
    "files": [
      "src/kadmin/server/server_stubs.c"
    ],
    "message": "Fix leaks in kadmin server stubs [CVE-2015-8631]\n\nIn each kadmind server stub, initialize the client_name and\nserver_name variables, and release them in the cleanup handler.  Many\nof the stubs will otherwise leak the client and server name if\nkrb5_unparse_name() fails.  Also make sure to free the prime_arg\nvariables in rename_principal_2_svc(), or we can leak the first one if\nunparsing the second one fails.  Discovered by Simo Sorce.\n\nCVE-2015-8631:\n\nIn all versions of MIT krb5, an authenticated attacker can cause\nkadmind to leak memory by supplying a null principal name in a request\nwhich uses one.  Repeating these requests will eventually cause\nkadmind to exhaust all available memory.\n\n    CVSSv2 Vector: AV:N/AC:L/Au:S/C:N/I:N/A:C/E:POC/RL:OF/RC:C\n\nticket: 8343 (new)\ntarget_version: 1.14-next\ntarget_version: 1.13-next\ntags: pullup",
    "before_after_code_files": [
      "src/kadmin/server/server_stubs.c||src/kadmin/server/server_stubs.c"
    ]
  },
  "patch_diff": {
    "src/kadmin/server/server_stubs.c||src/kadmin/server/server_stubs.c": [
      "File: src/kadmin/server/server_stubs.c -> src/kadmin/server/server_stubs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "334: {",
      "335:     static generic_ret          ret;",
      "336:     char                        *prime_arg;",
      "338:     OM_uint32                   minor_stat;",
      "339:     kadm5_server_handle_t       handle;",
      "340:     restriction_t               *rp;",
      "",
      "[Removed Lines]",
      "337:     gss_buffer_desc             client_name, service_name;",
      "",
      "[Added Lines]",
      "337:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
      "338:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "382:             krb5_free_error_message(handle->context, errmsg);",
      "383:     }",
      "384:     free(prime_arg);",
      "388: exit_func:",
      "389:     free_server_handle(handle);",
      "390:     return &ret;",
      "391: }",
      "",
      "[Removed Lines]",
      "385:     gss_release_buffer(&minor_stat, &client_name);",
      "386:     gss_release_buffer(&minor_stat, &service_name);",
      "",
      "[Added Lines]",
      "388:     gss_release_buffer(&minor_stat, &client_name);",
      "389:     gss_release_buffer(&minor_stat, &service_name);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "395: {",
      "396:     static generic_ret          ret;",
      "397:     char                        *prime_arg;",
      "399:     OM_uint32                   minor_stat;",
      "400:     kadm5_server_handle_t       handle;",
      "401:     restriction_t               *rp;",
      "",
      "[Removed Lines]",
      "398:     gss_buffer_desc             client_name, service_name;",
      "",
      "[Added Lines]",
      "399:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
      "400:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "444:             krb5_free_error_message(handle->context, errmsg);",
      "445:     }",
      "446:     free(prime_arg);",
      "450: exit_func:",
      "451:     free_server_handle(handle);",
      "452:     return &ret;",
      "453: }",
      "",
      "[Removed Lines]",
      "447:     gss_release_buffer(&minor_stat, &client_name);",
      "448:     gss_release_buffer(&minor_stat, &service_name);",
      "",
      "[Added Lines]",
      "451:     gss_release_buffer(&minor_stat, &client_name);",
      "452:     gss_release_buffer(&minor_stat, &service_name);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "457: {",
      "458:     static generic_ret              ret;",
      "459:     char                            *prime_arg;",
      "462:     OM_uint32                       minor_stat;",
      "463:     kadm5_server_handle_t           handle;",
      "464:     const char                      *errmsg = NULL;",
      "",
      "[Removed Lines]",
      "460:     gss_buffer_desc                 client_name,",
      "461:         service_name;",
      "",
      "[Added Lines]",
      "462:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
      "463:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "502:     }",
      "503:     free(prime_arg);",
      "507: exit_func:",
      "508:     free_server_handle(handle);",
      "509:     return &ret;",
      "510: }",
      "",
      "[Removed Lines]",
      "504:     gss_release_buffer(&minor_stat, &client_name);",
      "505:     gss_release_buffer(&minor_stat, &service_name);",
      "",
      "[Added Lines]",
      "508:     gss_release_buffer(&minor_stat, &client_name);",
      "509:     gss_release_buffer(&minor_stat, &service_name);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "514: {",
      "515:     static generic_ret              ret;",
      "516:     char                            *prime_arg;",
      "519:     OM_uint32                       minor_stat;",
      "520:     kadm5_server_handle_t           handle;",
      "521:     restriction_t                   *rp;",
      "",
      "[Removed Lines]",
      "517:     gss_buffer_desc                 client_name,",
      "518:         service_name;",
      "",
      "[Added Lines]",
      "519:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
      "520:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "559:             krb5_free_error_message(handle->context, errmsg);",
      "560:     }",
      "561:     free(prime_arg);",
      "562:     gss_release_buffer(&minor_stat, &client_name);",
      "563:     gss_release_buffer(&minor_stat, &service_name);",
      "565:     free_server_handle(handle);",
      "566:     return &ret;",
      "567: }",
      "",
      "[Removed Lines]",
      "564: exit_func:",
      "",
      "[Added Lines]",
      "564: exit_func:",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "570: rename_principal_2_svc(rprinc_arg *arg, struct svc_req *rqstp)",
      "571: {",
      "572:     static generic_ret          ret;",
      "577:     OM_uint32                   minor_stat;",
      "578:     kadm5_server_handle_t       handle;",
      "579:     restriction_t               *rp;",
      "",
      "[Removed Lines]",
      "573:     char                        *prime_arg1,",
      "575:     gss_buffer_desc             client_name,",
      "576:         service_name;",
      "",
      "[Added Lines]",
      "575:     char                        *prime_arg1 = NULL, *prime_arg2 = NULL;",
      "576:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
      "577:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "655:             krb5_free_error_message(handle->context, errmsg);",
      "657:     }",
      "658:     free(prime_arg1);",
      "659:     free(prime_arg2);",
      "660:     gss_release_buffer(&minor_stat, &client_name);",
      "661:     gss_release_buffer(&minor_stat, &service_name);",
      "663:     free_server_handle(handle);",
      "664:     return &ret;",
      "665: }",
      "",
      "[Removed Lines]",
      "662: exit_func:",
      "",
      "[Added Lines]",
      "659: exit_func:",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "669: {",
      "670:     static gprinc_ret               ret;",
      "671:     char                            *prime_arg, *funcname;",
      "674:     OM_uint32                       minor_stat;",
      "675:     kadm5_server_handle_t           handle;",
      "676:     const char                      *errmsg = NULL;",
      "",
      "[Removed Lines]",
      "672:     gss_buffer_desc                 client_name,",
      "673:         service_name;",
      "",
      "[Added Lines]",
      "673:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
      "674:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "719:             krb5_free_error_message(handle->context, errmsg);",
      "720:     }",
      "721:     free(prime_arg);",
      "722:     gss_release_buffer(&minor_stat, &client_name);",
      "723:     gss_release_buffer(&minor_stat, &service_name);",
      "725:     free_server_handle(handle);",
      "726:     return &ret;",
      "727: }",
      "",
      "[Removed Lines]",
      "724: exit_func:",
      "",
      "[Added Lines]",
      "723: exit_func:",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "731: {",
      "732:     static gprincs_ret              ret;",
      "733:     char                            *prime_arg;",
      "736:     OM_uint32                       minor_stat;",
      "737:     kadm5_server_handle_t           handle;",
      "738:     const char                      *errmsg = NULL;",
      "",
      "[Removed Lines]",
      "734:     gss_buffer_desc                 client_name,",
      "735:         service_name;",
      "",
      "[Added Lines]",
      "735:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
      "736:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "777:             krb5_free_error_message(handle->context, errmsg);",
      "779:     }",
      "780:     gss_release_buffer(&minor_stat, &client_name);",
      "781:     gss_release_buffer(&minor_stat, &service_name);",
      "783:     free_server_handle(handle);",
      "784:     return &ret;",
      "785: }",
      "",
      "[Removed Lines]",
      "782: exit_func:",
      "",
      "[Added Lines]",
      "781: exit_func:",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "789: {",
      "790:     static generic_ret              ret;",
      "791:     char                            *prime_arg;",
      "794:     OM_uint32                       minor_stat;",
      "795:     kadm5_server_handle_t           handle;",
      "796:     const char                      *errmsg = NULL;",
      "",
      "[Removed Lines]",
      "792:     gss_buffer_desc                 client_name,",
      "793:         service_name;",
      "",
      "[Added Lines]",
      "793:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
      "794:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "840:     }",
      "842:     free(prime_arg);",
      "843:     gss_release_buffer(&minor_stat, &client_name);",
      "844:     gss_release_buffer(&minor_stat, &service_name);",
      "846:     free_server_handle(handle);",
      "847:     return &ret;",
      "848: }",
      "",
      "[Removed Lines]",
      "845: exit_func:",
      "",
      "[Added Lines]",
      "844: exit_func:",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "852: {",
      "853:     static generic_ret              ret;",
      "854:     char                            *prime_arg;",
      "857:     OM_uint32                       minor_stat;",
      "858:     kadm5_server_handle_t           handle;",
      "859:     const char                      *errmsg = NULL;",
      "",
      "[Removed Lines]",
      "855:     gss_buffer_desc                 client_name,",
      "856:         service_name;",
      "",
      "[Added Lines]",
      "856:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
      "857:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "909:     }",
      "911:     free(prime_arg);",
      "912:     gss_release_buffer(&minor_stat, &client_name);",
      "913:     gss_release_buffer(&minor_stat, &service_name);",
      "915:     free_server_handle(handle);",
      "916:     return &ret;",
      "917: }",
      "",
      "[Removed Lines]",
      "914: exit_func:",
      "",
      "[Added Lines]",
      "913: exit_func:",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "921: {",
      "922:     static generic_ret              ret;",
      "923:     char                            *prime_arg;",
      "926:     OM_uint32                       minor_stat;",
      "927:     kadm5_server_handle_t           handle;",
      "928:     const char                      *errmsg = NULL;",
      "",
      "[Removed Lines]",
      "924:     gss_buffer_desc                 client_name,",
      "925:         service_name;",
      "",
      "[Added Lines]",
      "925:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
      "926:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "969:     }",
      "971:     free(prime_arg);",
      "972:     gss_release_buffer(&minor_stat, &client_name);",
      "973:     gss_release_buffer(&minor_stat, &service_name);",
      "975:     free_server_handle(handle);",
      "976:     return &ret;",
      "977: }",
      "",
      "[Removed Lines]",
      "974: exit_func:",
      "",
      "[Added Lines]",
      "973: exit_func:",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "981: {",
      "982:     static generic_ret              ret;",
      "983:     char                            *prime_arg;",
      "986:     OM_uint32                       minor_stat;",
      "987:     kadm5_server_handle_t           handle;",
      "988:     const char                      *errmsg = NULL;",
      "",
      "[Removed Lines]",
      "984:     gss_buffer_desc                 client_name,",
      "985:         service_name;",
      "",
      "[Added Lines]",
      "985:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
      "986:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "1029:     }",
      "1031:     free(prime_arg);",
      "1032:     gss_release_buffer(&minor_stat, &client_name);",
      "1033:     gss_release_buffer(&minor_stat, &service_name);",
      "1035:     free_server_handle(handle);",
      "1036:     return &ret;",
      "1037: }",
      "",
      "[Removed Lines]",
      "1034: exit_func:",
      "",
      "[Added Lines]",
      "1033: exit_func:",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "1041: {",
      "1042:     static generic_ret              ret;",
      "1043:     char                            *prime_arg;",
      "1046:     OM_uint32                       minor_stat;",
      "1047:     kadm5_server_handle_t           handle;",
      "1048:     const char                      *errmsg = NULL;",
      "",
      "[Removed Lines]",
      "1044:     gss_buffer_desc                 client_name,",
      "1045:         service_name;",
      "",
      "[Added Lines]",
      "1045:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
      "1046:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "1092:     }",
      "1094:     free(prime_arg);",
      "1095:     gss_release_buffer(&minor_stat, &client_name);",
      "1096:     gss_release_buffer(&minor_stat, &service_name);",
      "1098:     free_server_handle(handle);",
      "1099:     return &ret;",
      "1100: }",
      "",
      "[Removed Lines]",
      "1097: exit_func:",
      "",
      "[Added Lines]",
      "1096: exit_func:",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1106:     krb5_keyblock               *k;",
      "1107:     int                         nkeys;",
      "1108:     char                        *prime_arg, *funcname;",
      "1111:     OM_uint32                   minor_stat;",
      "1112:     kadm5_server_handle_t       handle;",
      "1113:     const char                  *errmsg = NULL;",
      "",
      "[Removed Lines]",
      "1109:     gss_buffer_desc             client_name,",
      "1110:         service_name;",
      "",
      "[Added Lines]",
      "1110:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
      "1111:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1164:             krb5_free_error_message(handle->context, errmsg);",
      "1165:     }",
      "1166:     free(prime_arg);",
      "1167:     gss_release_buffer(&minor_stat, &client_name);",
      "1168:     gss_release_buffer(&minor_stat, &service_name);",
      "1170:     free_server_handle(handle);",
      "1171:     return &ret;",
      "1172: }",
      "",
      "[Removed Lines]",
      "1169: exit_func:",
      "",
      "[Added Lines]",
      "1168: exit_func:",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "1178:     krb5_keyblock               *k;",
      "1179:     int                         nkeys;",
      "1180:     char                        *prime_arg, *funcname;",
      "1183:     OM_uint32                   minor_stat;",
      "1184:     kadm5_server_handle_t       handle;",
      "1185:     const char                  *errmsg = NULL;",
      "",
      "[Removed Lines]",
      "1181:     gss_buffer_desc             client_name,",
      "1182:         service_name;",
      "",
      "[Added Lines]",
      "1182:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
      "1183:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "1241:             krb5_free_error_message(handle->context, errmsg);",
      "1242:     }",
      "1243:     free(prime_arg);",
      "1244:     gss_release_buffer(&minor_stat, &client_name);",
      "1245:     gss_release_buffer(&minor_stat, &service_name);",
      "1247:     free_server_handle(handle);",
      "1248:     return &ret;",
      "1249: }",
      "",
      "[Removed Lines]",
      "1246: exit_func:",
      "",
      "[Added Lines]",
      "1245: exit_func:",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "1253: {",
      "1254:     static generic_ret              ret;",
      "1255:     char                            *prime_arg;",
      "1258:     OM_uint32                       minor_stat;",
      "1259:     kadm5_server_handle_t           handle;",
      "1260:     const char                      *errmsg = NULL;",
      "",
      "[Removed Lines]",
      "1256:     gss_buffer_desc                 client_name,",
      "1257:         service_name;",
      "",
      "[Added Lines]",
      "1257:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
      "1258:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "1295:         if (errmsg != NULL)",
      "1296:             krb5_free_error_message(handle->context, errmsg);",
      "1297:     }",
      "1298:     gss_release_buffer(&minor_stat, &client_name);",
      "1299:     gss_release_buffer(&minor_stat, &service_name);",
      "1301:     free_server_handle(handle);",
      "1302:     return &ret;",
      "1303: }",
      "",
      "[Removed Lines]",
      "1300: exit_func:",
      "",
      "[Added Lines]",
      "1299: exit_func:",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "1307: {",
      "1308:     static generic_ret              ret;",
      "1309:     char                            *prime_arg;",
      "1312:     OM_uint32                       minor_stat;",
      "1313:     kadm5_server_handle_t           handle;",
      "1314:     const char                      *errmsg = NULL;",
      "",
      "[Removed Lines]",
      "1310:     gss_buffer_desc                 client_name,",
      "1311:         service_name;",
      "",
      "[Added Lines]",
      "1311:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
      "1312:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "1347:         if (errmsg != NULL)",
      "1348:             krb5_free_error_message(handle->context, errmsg);",
      "1349:     }",
      "1350:     gss_release_buffer(&minor_stat, &client_name);",
      "1351:     gss_release_buffer(&minor_stat, &service_name);",
      "1353:     free_server_handle(handle);",
      "1354:     return &ret;",
      "1355: }",
      "",
      "[Removed Lines]",
      "1352: exit_func:",
      "",
      "[Added Lines]",
      "1351: exit_func:",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "1359: {",
      "1360:     static generic_ret              ret;",
      "1361:     char                            *prime_arg;",
      "1364:     OM_uint32                       minor_stat;",
      "1365:     kadm5_server_handle_t           handle;",
      "1366:     const char                      *errmsg = NULL;",
      "",
      "[Removed Lines]",
      "1362:     gss_buffer_desc                 client_name,",
      "1363:         service_name;",
      "",
      "[Added Lines]",
      "1363:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
      "1364:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1400:         if (errmsg != NULL)",
      "1401:             krb5_free_error_message(handle->context, errmsg);",
      "1402:     }",
      "1403:     gss_release_buffer(&minor_stat, &client_name);",
      "1404:     gss_release_buffer(&minor_stat, &service_name);",
      "1406:     free_server_handle(handle);",
      "1407:     return &ret;",
      "1408: }",
      "",
      "[Removed Lines]",
      "1405: exit_func:",
      "",
      "[Added Lines]",
      "1404: exit_func:",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1413:     static gpol_ret             ret;",
      "1414:     kadm5_ret_t         ret2;",
      "1415:     char                        *prime_arg, *funcname;",
      "1418:     OM_uint32                   minor_stat;",
      "1419:     kadm5_principal_ent_rec     caller_ent;",
      "1420:     kadm5_server_handle_t       handle;",
      "",
      "[Removed Lines]",
      "1416:     gss_buffer_desc             client_name,",
      "1417:         service_name;",
      "",
      "[Added Lines]",
      "1417:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
      "1418:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 36 ---",
      "[Context before]",
      "1475:         log_unauth(funcname, prime_arg,",
      "1476:                    &client_name, &service_name, rqstp);",
      "1477:     }",
      "1478:     gss_release_buffer(&minor_stat, &client_name);",
      "1479:     gss_release_buffer(&minor_stat, &service_name);",
      "1481:     free_server_handle(handle);",
      "1482:     return &ret;",
      "",
      "[Removed Lines]",
      "1480: exit_func:",
      "",
      "[Added Lines]",
      "1479: exit_func:",
      "",
      "---------------",
      "--- Hunk 37 ---",
      "[Context before]",
      "1488: {",
      "1489:     static gpols_ret                ret;",
      "1490:     char                            *prime_arg;",
      "1493:     OM_uint32                       minor_stat;",
      "1494:     kadm5_server_handle_t           handle;",
      "1495:     const char                      *errmsg = NULL;",
      "",
      "[Removed Lines]",
      "1491:     gss_buffer_desc                 client_name,",
      "1492:         service_name;",
      "",
      "[Added Lines]",
      "1492:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
      "1493:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 38 ---",
      "[Context before]",
      "1531:         if (errmsg != NULL)",
      "1532:             krb5_free_error_message(handle->context, errmsg);",
      "1533:     }",
      "1534:     gss_release_buffer(&minor_stat, &client_name);",
      "1535:     gss_release_buffer(&minor_stat, &service_name);",
      "1537:     free_server_handle(handle);",
      "1538:     return &ret;",
      "1539: }",
      "",
      "[Removed Lines]",
      "1536: exit_func:",
      "",
      "[Added Lines]",
      "1535: exit_func:",
      "",
      "---------------",
      "--- Hunk 39 ---",
      "[Context before]",
      "1541: getprivs_ret * get_privs_2_svc(krb5_ui_4 *arg, struct svc_req *rqstp)",
      "1542: {",
      "1543:     static getprivs_ret            ret;",
      "1545:     OM_uint32                      minor_stat;",
      "1546:     kadm5_server_handle_t          handle;",
      "1547:     const char                     *errmsg = NULL;",
      "",
      "[Removed Lines]",
      "1544:     gss_buffer_desc                client_name, service_name;",
      "",
      "[Added Lines]",
      "1545:     gss_buffer_desc                client_name = GSS_C_EMPTY_BUFFER;",
      "1546:     gss_buffer_desc                service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 40 ---",
      "[Context before]",
      "1571:     if (errmsg != NULL)",
      "1572:         krb5_free_error_message(handle->context, errmsg);",
      "1574:     gss_release_buffer(&minor_stat, &client_name);",
      "1575:     gss_release_buffer(&minor_stat, &service_name);",
      "1577:     free_server_handle(handle);",
      "1578:     return &ret;",
      "1579: }",
      "",
      "[Removed Lines]",
      "1576: exit_func:",
      "",
      "[Added Lines]",
      "1576: exit_func:",
      "",
      "---------------",
      "--- Hunk 41 ---",
      "[Context before]",
      "1583: {",
      "1584:     static generic_ret          ret;",
      "1585:     char                        *prime_arg, *funcname;",
      "1587:     OM_uint32                   minor_stat;",
      "1588:     kadm5_server_handle_t       handle;",
      "",
      "[Removed Lines]",
      "1586:     gss_buffer_desc             client_name, service_name;",
      "",
      "[Added Lines]",
      "1588:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
      "1589:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 42 ---",
      "[Context before]",
      "1629:             krb5_free_error_message(handle->context, errmsg);",
      "1630:     }",
      "1631:     free(prime_arg);",
      "1632:     gss_release_buffer(&minor_stat, &client_name);",
      "1633:     gss_release_buffer(&minor_stat, &service_name);",
      "1635:     free_server_handle(handle);",
      "1636:     return &ret;",
      "1637: }",
      "",
      "[Removed Lines]",
      "1634: exit_func:",
      "",
      "[Added Lines]",
      "1635: exit_func:",
      "",
      "---------------",
      "--- Hunk 43 ---",
      "[Context before]",
      "1641: {",
      "1642:     static gstrings_ret             ret;",
      "1643:     char                            *prime_arg;",
      "1646:     OM_uint32                       minor_stat;",
      "1647:     kadm5_server_handle_t           handle;",
      "1648:     const char                      *errmsg = NULL;",
      "",
      "[Removed Lines]",
      "1644:     gss_buffer_desc                 client_name,",
      "1645:         service_name;",
      "",
      "[Added Lines]",
      "1647:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
      "1648:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 44 ---",
      "[Context before]",
      "1688:             krb5_free_error_message(handle->context, errmsg);",
      "1689:     }",
      "1690:     free(prime_arg);",
      "1691:     gss_release_buffer(&minor_stat, &client_name);",
      "1692:     gss_release_buffer(&minor_stat, &service_name);",
      "1694:     free_server_handle(handle);",
      "1695:     return &ret;",
      "1696: }",
      "",
      "[Removed Lines]",
      "1693: exit_func:",
      "",
      "[Added Lines]",
      "1694: exit_func:",
      "",
      "---------------",
      "--- Hunk 45 ---",
      "[Context before]",
      "1700: {",
      "1701:     static generic_ret              ret;",
      "1702:     char                            *prime_arg;",
      "1705:     OM_uint32                       minor_stat;",
      "1706:     kadm5_server_handle_t           handle;",
      "1707:     const char                      *errmsg = NULL;",
      "",
      "[Removed Lines]",
      "1703:     gss_buffer_desc                 client_name,",
      "1704:         service_name;",
      "",
      "[Added Lines]",
      "1706:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
      "1707:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 46 ---",
      "[Context before]",
      "1744:             krb5_free_error_message(handle->context, errmsg);",
      "1745:     }",
      "1746:     free(prime_arg);",
      "1747:     gss_release_buffer(&minor_stat, &client_name);",
      "1748:     gss_release_buffer(&minor_stat, &service_name);",
      "1750:     free_server_handle(handle);",
      "1751:     return &ret;",
      "1752: }",
      "",
      "[Removed Lines]",
      "1749: exit_func:",
      "",
      "[Added Lines]",
      "1750: exit_func:",
      "",
      "---------------",
      "--- Hunk 47 ---",
      "[Context before]",
      "1754: generic_ret *init_2_svc(krb5_ui_4 *arg, struct svc_req *rqstp)",
      "1755: {",
      "1756:     static generic_ret         ret;",
      "1759:     kadm5_server_handle_t      handle;",
      "1760:     OM_uint32                  minor_stat;",
      "1761:     const char                 *errmsg = NULL;",
      "",
      "[Removed Lines]",
      "1757:     gss_buffer_desc            client_name,",
      "1758:         service_name;",
      "",
      "[Added Lines]",
      "1760:     gss_buffer_desc            client_name = GSS_C_EMPTY_BUFFER;",
      "1761:     gss_buffer_desc            service_name = GSS_C_EMPTY_BUFFER;",
      "",
      "---------------",
      "--- Hunk 48 ---",
      "[Context before]",
      "1797:                      rqstp->rq_cred.oa_flavor);",
      "1798:     if (errmsg != NULL)",
      "1799:         krb5_free_error_message(NULL, errmsg);",
      "1803: exit_func:",
      "1804:     return(&ret);",
      "1805: }",
      "",
      "[Removed Lines]",
      "1800:     gss_release_buffer(&minor_stat, &client_name);",
      "1801:     gss_release_buffer(&minor_stat, &service_name);",
      "",
      "[Added Lines]",
      "1805:     gss_release_buffer(&minor_stat, &client_name);",
      "1806:     gss_release_buffer(&minor_stat, &service_name);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3421a1471d635256432f37325310e49a6d039413",
      "candidate_info": {
        "commit_hash": "3421a1471d635256432f37325310e49a6d039413",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/3421a1471d635256432f37325310e49a6d039413",
        "files": [
          "src/kadmin/server/server_stubs.c"
        ],
        "message": "Fix leaks in kadmin server stubs [CVE-2015-8631]\n\nIn each kadmind server stub, initialize the client_name and\nserver_name variables, and release them in the cleanup handler.  Many\nof the stubs will otherwise leak the client and server name if\nkrb5_unparse_name() fails.  Also make sure to free the prime_arg\nvariables in rename_principal_2_svc(), or we can leak the first one if\nunparsing the second one fails.  Discovered by Simo Sorce.\n\nCVE-2015-8631:\n\nIn all versions of MIT krb5, an authenticated attacker can cause\nkadmind to leak memory by supplying a null principal name in a request\nwhich uses one.  Repeating these requests will eventually cause\nkadmind to exhaust all available memory.\n\n    CVSSv2 Vector: AV:N/AC:L/Au:S/C:N/I:N/A:C/E:POC/RL:OF/RC:C\n\n(cherry picked from commit 83ed75feba32e46f736fcce0d96a0445f29b96c2)\n\nticket: 8343\nversion_fixed: 1.13.4\ntags: -pullup\nstatus: resolved",
        "before_after_code_files": [
          "src/kadmin/server/server_stubs.c||src/kadmin/server/server_stubs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/kadmin/server/server_stubs.c||src/kadmin/server/server_stubs.c"
          ],
          "candidate": [
            "src/kadmin/server/server_stubs.c||src/kadmin/server/server_stubs.c"
          ]
        }
      },
      "candidate_diff": {
        "src/kadmin/server/server_stubs.c||src/kadmin/server/server_stubs.c": [
          "File: src/kadmin/server/server_stubs.c -> src/kadmin/server/server_stubs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "334: {",
          "335:     static generic_ret          ret;",
          "336:     char                        *prime_arg;",
          "338:     OM_uint32                   minor_stat;",
          "339:     kadm5_server_handle_t       handle;",
          "340:     restriction_t               *rp;",
          "",
          "[Removed Lines]",
          "337:     gss_buffer_desc             client_name, service_name;",
          "",
          "[Added Lines]",
          "337:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
          "338:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "382:             krb5_free_error_message(handle->context, errmsg);",
          "383:     }",
          "384:     free(prime_arg);",
          "388: exit_func:",
          "389:     free_server_handle(handle);",
          "390:     return &ret;",
          "391: }",
          "",
          "[Removed Lines]",
          "385:     gss_release_buffer(&minor_stat, &client_name);",
          "386:     gss_release_buffer(&minor_stat, &service_name);",
          "",
          "[Added Lines]",
          "388:     gss_release_buffer(&minor_stat, &client_name);",
          "389:     gss_release_buffer(&minor_stat, &service_name);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "395: {",
          "396:     static generic_ret          ret;",
          "397:     char                        *prime_arg;",
          "399:     OM_uint32                   minor_stat;",
          "400:     kadm5_server_handle_t       handle;",
          "401:     restriction_t               *rp;",
          "",
          "[Removed Lines]",
          "398:     gss_buffer_desc             client_name, service_name;",
          "",
          "[Added Lines]",
          "399:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
          "400:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "444:             krb5_free_error_message(handle->context, errmsg);",
          "445:     }",
          "446:     free(prime_arg);",
          "450: exit_func:",
          "451:     free_server_handle(handle);",
          "452:     return &ret;",
          "453: }",
          "",
          "[Removed Lines]",
          "447:     gss_release_buffer(&minor_stat, &client_name);",
          "448:     gss_release_buffer(&minor_stat, &service_name);",
          "",
          "[Added Lines]",
          "451:     gss_release_buffer(&minor_stat, &client_name);",
          "452:     gss_release_buffer(&minor_stat, &service_name);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "457: {",
          "458:     static generic_ret              ret;",
          "459:     char                            *prime_arg;",
          "462:     OM_uint32                       minor_stat;",
          "463:     kadm5_server_handle_t           handle;",
          "464:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "460:     gss_buffer_desc                 client_name,",
          "461:         service_name;",
          "",
          "[Added Lines]",
          "462:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "463:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "502:     }",
          "503:     free(prime_arg);",
          "507: exit_func:",
          "508:     free_server_handle(handle);",
          "509:     return &ret;",
          "510: }",
          "",
          "[Removed Lines]",
          "504:     gss_release_buffer(&minor_stat, &client_name);",
          "505:     gss_release_buffer(&minor_stat, &service_name);",
          "",
          "[Added Lines]",
          "508:     gss_release_buffer(&minor_stat, &client_name);",
          "509:     gss_release_buffer(&minor_stat, &service_name);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "514: {",
          "515:     static generic_ret              ret;",
          "516:     char                            *prime_arg;",
          "519:     OM_uint32                       minor_stat;",
          "520:     kadm5_server_handle_t           handle;",
          "521:     restriction_t                   *rp;",
          "",
          "[Removed Lines]",
          "517:     gss_buffer_desc                 client_name,",
          "518:         service_name;",
          "",
          "[Added Lines]",
          "519:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "520:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "559:             krb5_free_error_message(handle->context, errmsg);",
          "560:     }",
          "561:     free(prime_arg);",
          "562:     gss_release_buffer(&minor_stat, &client_name);",
          "563:     gss_release_buffer(&minor_stat, &service_name);",
          "565:     free_server_handle(handle);",
          "566:     return &ret;",
          "567: }",
          "",
          "[Removed Lines]",
          "564: exit_func:",
          "",
          "[Added Lines]",
          "564: exit_func:",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "570: rename_principal_2_svc(rprinc_arg *arg, struct svc_req *rqstp)",
          "571: {",
          "572:     static generic_ret          ret;",
          "577:     OM_uint32                   minor_stat;",
          "578:     kadm5_server_handle_t       handle;",
          "579:     restriction_t               *rp;",
          "",
          "[Removed Lines]",
          "573:     char                        *prime_arg1,",
          "575:     gss_buffer_desc             client_name,",
          "576:         service_name;",
          "",
          "[Added Lines]",
          "575:     char                        *prime_arg1 = NULL, *prime_arg2 = NULL;",
          "576:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
          "577:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "655:             krb5_free_error_message(handle->context, errmsg);",
          "657:     }",
          "658:     free(prime_arg1);",
          "659:     free(prime_arg2);",
          "660:     gss_release_buffer(&minor_stat, &client_name);",
          "661:     gss_release_buffer(&minor_stat, &service_name);",
          "663:     free_server_handle(handle);",
          "664:     return &ret;",
          "665: }",
          "",
          "[Removed Lines]",
          "662: exit_func:",
          "",
          "[Added Lines]",
          "659: exit_func:",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "669: {",
          "670:     static gprinc_ret               ret;",
          "671:     char                            *prime_arg, *funcname;",
          "674:     OM_uint32                       minor_stat;",
          "675:     kadm5_server_handle_t           handle;",
          "676:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "672:     gss_buffer_desc                 client_name,",
          "673:         service_name;",
          "",
          "[Added Lines]",
          "673:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "674:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "719:             krb5_free_error_message(handle->context, errmsg);",
          "720:     }",
          "721:     free(prime_arg);",
          "722:     gss_release_buffer(&minor_stat, &client_name);",
          "723:     gss_release_buffer(&minor_stat, &service_name);",
          "725:     free_server_handle(handle);",
          "726:     return &ret;",
          "727: }",
          "",
          "[Removed Lines]",
          "724: exit_func:",
          "",
          "[Added Lines]",
          "723: exit_func:",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "731: {",
          "732:     static gprincs_ret              ret;",
          "733:     char                            *prime_arg;",
          "736:     OM_uint32                       minor_stat;",
          "737:     kadm5_server_handle_t           handle;",
          "738:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "734:     gss_buffer_desc                 client_name,",
          "735:         service_name;",
          "",
          "[Added Lines]",
          "735:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "736:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "777:             krb5_free_error_message(handle->context, errmsg);",
          "779:     }",
          "780:     gss_release_buffer(&minor_stat, &client_name);",
          "781:     gss_release_buffer(&minor_stat, &service_name);",
          "783:     free_server_handle(handle);",
          "784:     return &ret;",
          "785: }",
          "",
          "[Removed Lines]",
          "782: exit_func:",
          "",
          "[Added Lines]",
          "781: exit_func:",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "789: {",
          "790:     static generic_ret              ret;",
          "791:     char                            *prime_arg;",
          "794:     OM_uint32                       minor_stat;",
          "795:     kadm5_server_handle_t           handle;",
          "796:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "792:     gss_buffer_desc                 client_name,",
          "793:         service_name;",
          "",
          "[Added Lines]",
          "793:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "794:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "840:     }",
          "842:     free(prime_arg);",
          "843:     gss_release_buffer(&minor_stat, &client_name);",
          "844:     gss_release_buffer(&minor_stat, &service_name);",
          "846:     free_server_handle(handle);",
          "847:     return &ret;",
          "848: }",
          "",
          "[Removed Lines]",
          "845: exit_func:",
          "",
          "[Added Lines]",
          "844: exit_func:",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "852: {",
          "853:     static generic_ret              ret;",
          "854:     char                            *prime_arg;",
          "857:     OM_uint32                       minor_stat;",
          "858:     kadm5_server_handle_t           handle;",
          "859:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "855:     gss_buffer_desc                 client_name,",
          "856:         service_name;",
          "",
          "[Added Lines]",
          "856:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "857:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "909:     }",
          "911:     free(prime_arg);",
          "912:     gss_release_buffer(&minor_stat, &client_name);",
          "913:     gss_release_buffer(&minor_stat, &service_name);",
          "915:     free_server_handle(handle);",
          "916:     return &ret;",
          "917: }",
          "",
          "[Removed Lines]",
          "914: exit_func:",
          "",
          "[Added Lines]",
          "913: exit_func:",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "921: {",
          "922:     static generic_ret              ret;",
          "923:     char                            *prime_arg;",
          "926:     OM_uint32                       minor_stat;",
          "927:     kadm5_server_handle_t           handle;",
          "928:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "924:     gss_buffer_desc                 client_name,",
          "925:         service_name;",
          "",
          "[Added Lines]",
          "925:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "926:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "969:     }",
          "971:     free(prime_arg);",
          "972:     gss_release_buffer(&minor_stat, &client_name);",
          "973:     gss_release_buffer(&minor_stat, &service_name);",
          "975:     free_server_handle(handle);",
          "976:     return &ret;",
          "977: }",
          "",
          "[Removed Lines]",
          "974: exit_func:",
          "",
          "[Added Lines]",
          "973: exit_func:",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "981: {",
          "982:     static generic_ret              ret;",
          "983:     char                            *prime_arg;",
          "986:     OM_uint32                       minor_stat;",
          "987:     kadm5_server_handle_t           handle;",
          "988:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "984:     gss_buffer_desc                 client_name,",
          "985:         service_name;",
          "",
          "[Added Lines]",
          "985:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "986:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1029:     }",
          "1031:     free(prime_arg);",
          "1032:     gss_release_buffer(&minor_stat, &client_name);",
          "1033:     gss_release_buffer(&minor_stat, &service_name);",
          "1035:     free_server_handle(handle);",
          "1036:     return &ret;",
          "1037: }",
          "",
          "[Removed Lines]",
          "1034: exit_func:",
          "",
          "[Added Lines]",
          "1033: exit_func:",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1041: {",
          "1042:     static generic_ret              ret;",
          "1043:     char                            *prime_arg;",
          "1046:     OM_uint32                       minor_stat;",
          "1047:     kadm5_server_handle_t           handle;",
          "1048:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "1044:     gss_buffer_desc                 client_name,",
          "1045:         service_name;",
          "",
          "[Added Lines]",
          "1045:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1046:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1092:     }",
          "1094:     free(prime_arg);",
          "1095:     gss_release_buffer(&minor_stat, &client_name);",
          "1096:     gss_release_buffer(&minor_stat, &service_name);",
          "1098:     free_server_handle(handle);",
          "1099:     return &ret;",
          "1100: }",
          "",
          "[Removed Lines]",
          "1097: exit_func:",
          "",
          "[Added Lines]",
          "1096: exit_func:",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1106:     krb5_keyblock               *k;",
          "1107:     int                         nkeys;",
          "1108:     char                        *prime_arg, *funcname;",
          "1111:     OM_uint32                   minor_stat;",
          "1112:     kadm5_server_handle_t       handle;",
          "1113:     const char                  *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "1109:     gss_buffer_desc             client_name,",
          "1110:         service_name;",
          "",
          "[Added Lines]",
          "1110:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
          "1111:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1164:             krb5_free_error_message(handle->context, errmsg);",
          "1165:     }",
          "1166:     free(prime_arg);",
          "1167:     gss_release_buffer(&minor_stat, &client_name);",
          "1168:     gss_release_buffer(&minor_stat, &service_name);",
          "1170:     free_server_handle(handle);",
          "1171:     return &ret;",
          "1172: }",
          "",
          "[Removed Lines]",
          "1169: exit_func:",
          "",
          "[Added Lines]",
          "1168: exit_func:",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1178:     krb5_keyblock               *k;",
          "1179:     int                         nkeys;",
          "1180:     char                        *prime_arg, *funcname;",
          "1183:     OM_uint32                   minor_stat;",
          "1184:     kadm5_server_handle_t       handle;",
          "1185:     const char                  *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "1181:     gss_buffer_desc             client_name,",
          "1182:         service_name;",
          "",
          "[Added Lines]",
          "1182:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
          "1183:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1241:             krb5_free_error_message(handle->context, errmsg);",
          "1242:     }",
          "1243:     free(prime_arg);",
          "1244:     gss_release_buffer(&minor_stat, &client_name);",
          "1245:     gss_release_buffer(&minor_stat, &service_name);",
          "1247:     free_server_handle(handle);",
          "1248:     return &ret;",
          "1249: }",
          "",
          "[Removed Lines]",
          "1246: exit_func:",
          "",
          "[Added Lines]",
          "1245: exit_func:",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1253: {",
          "1254:     static generic_ret              ret;",
          "1255:     char                            *prime_arg;",
          "1258:     OM_uint32                       minor_stat;",
          "1259:     kadm5_server_handle_t           handle;",
          "1260:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "1256:     gss_buffer_desc                 client_name,",
          "1257:         service_name;",
          "",
          "[Added Lines]",
          "1257:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1258:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1295:         if (errmsg != NULL)",
          "1296:             krb5_free_error_message(handle->context, errmsg);",
          "1297:     }",
          "1298:     gss_release_buffer(&minor_stat, &client_name);",
          "1299:     gss_release_buffer(&minor_stat, &service_name);",
          "1301:     free_server_handle(handle);",
          "1302:     return &ret;",
          "1303: }",
          "",
          "[Removed Lines]",
          "1300: exit_func:",
          "",
          "[Added Lines]",
          "1299: exit_func:",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1307: {",
          "1308:     static generic_ret              ret;",
          "1309:     char                            *prime_arg;",
          "1312:     OM_uint32                       minor_stat;",
          "1313:     kadm5_server_handle_t           handle;",
          "1314:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "1310:     gss_buffer_desc                 client_name,",
          "1311:         service_name;",
          "",
          "[Added Lines]",
          "1311:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1312:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1347:         if (errmsg != NULL)",
          "1348:             krb5_free_error_message(handle->context, errmsg);",
          "1349:     }",
          "1350:     gss_release_buffer(&minor_stat, &client_name);",
          "1351:     gss_release_buffer(&minor_stat, &service_name);",
          "1353:     free_server_handle(handle);",
          "1354:     return &ret;",
          "1355: }",
          "",
          "[Removed Lines]",
          "1352: exit_func:",
          "",
          "[Added Lines]",
          "1351: exit_func:",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1359: {",
          "1360:     static generic_ret              ret;",
          "1361:     char                            *prime_arg;",
          "1364:     OM_uint32                       minor_stat;",
          "1365:     kadm5_server_handle_t           handle;",
          "1366:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "1362:     gss_buffer_desc                 client_name,",
          "1363:         service_name;",
          "",
          "[Added Lines]",
          "1363:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1364:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1400:         if (errmsg != NULL)",
          "1401:             krb5_free_error_message(handle->context, errmsg);",
          "1402:     }",
          "1403:     gss_release_buffer(&minor_stat, &client_name);",
          "1404:     gss_release_buffer(&minor_stat, &service_name);",
          "1406:     free_server_handle(handle);",
          "1407:     return &ret;",
          "1408: }",
          "",
          "[Removed Lines]",
          "1405: exit_func:",
          "",
          "[Added Lines]",
          "1404: exit_func:",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1413:     static gpol_ret             ret;",
          "1414:     kadm5_ret_t         ret2;",
          "1415:     char                        *prime_arg, *funcname;",
          "1418:     OM_uint32                   minor_stat;",
          "1419:     kadm5_principal_ent_rec     caller_ent;",
          "1420:     kadm5_server_handle_t       handle;",
          "",
          "[Removed Lines]",
          "1416:     gss_buffer_desc             client_name,",
          "1417:         service_name;",
          "",
          "[Added Lines]",
          "1417:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
          "1418:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1475:         log_unauth(funcname, prime_arg,",
          "1476:                    &client_name, &service_name, rqstp);",
          "1477:     }",
          "1478:     gss_release_buffer(&minor_stat, &client_name);",
          "1479:     gss_release_buffer(&minor_stat, &service_name);",
          "1481:     free_server_handle(handle);",
          "1482:     return &ret;",
          "",
          "[Removed Lines]",
          "1480: exit_func:",
          "",
          "[Added Lines]",
          "1479: exit_func:",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1488: {",
          "1489:     static gpols_ret                ret;",
          "1490:     char                            *prime_arg;",
          "1493:     OM_uint32                       minor_stat;",
          "1494:     kadm5_server_handle_t           handle;",
          "1495:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "1491:     gss_buffer_desc                 client_name,",
          "1492:         service_name;",
          "",
          "[Added Lines]",
          "1492:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1493:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1531:         if (errmsg != NULL)",
          "1532:             krb5_free_error_message(handle->context, errmsg);",
          "1533:     }",
          "1534:     gss_release_buffer(&minor_stat, &client_name);",
          "1535:     gss_release_buffer(&minor_stat, &service_name);",
          "1537:     free_server_handle(handle);",
          "1538:     return &ret;",
          "1539: }",
          "",
          "[Removed Lines]",
          "1536: exit_func:",
          "",
          "[Added Lines]",
          "1535: exit_func:",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1541: getprivs_ret * get_privs_2_svc(krb5_ui_4 *arg, struct svc_req *rqstp)",
          "1542: {",
          "1543:     static getprivs_ret            ret;",
          "1545:     OM_uint32                      minor_stat;",
          "1546:     kadm5_server_handle_t          handle;",
          "1547:     const char                     *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "1544:     gss_buffer_desc                client_name, service_name;",
          "",
          "[Added Lines]",
          "1545:     gss_buffer_desc                client_name = GSS_C_EMPTY_BUFFER;",
          "1546:     gss_buffer_desc                service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1571:     if (errmsg != NULL)",
          "1572:         krb5_free_error_message(handle->context, errmsg);",
          "1574:     gss_release_buffer(&minor_stat, &client_name);",
          "1575:     gss_release_buffer(&minor_stat, &service_name);",
          "1577:     free_server_handle(handle);",
          "1578:     return &ret;",
          "1579: }",
          "",
          "[Removed Lines]",
          "1576: exit_func:",
          "",
          "[Added Lines]",
          "1576: exit_func:",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1583: {",
          "1584:     static generic_ret          ret;",
          "1585:     char                        *prime_arg, *funcname;",
          "1587:     OM_uint32                   minor_stat;",
          "1588:     kadm5_server_handle_t       handle;",
          "",
          "[Removed Lines]",
          "1586:     gss_buffer_desc             client_name, service_name;",
          "",
          "[Added Lines]",
          "1588:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
          "1589:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1629:             krb5_free_error_message(handle->context, errmsg);",
          "1630:     }",
          "1631:     free(prime_arg);",
          "1632:     gss_release_buffer(&minor_stat, &client_name);",
          "1633:     gss_release_buffer(&minor_stat, &service_name);",
          "1635:     free_server_handle(handle);",
          "1636:     return &ret;",
          "1637: }",
          "",
          "[Removed Lines]",
          "1634: exit_func:",
          "",
          "[Added Lines]",
          "1635: exit_func:",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1641: {",
          "1642:     static gstrings_ret             ret;",
          "1643:     char                            *prime_arg;",
          "1646:     OM_uint32                       minor_stat;",
          "1647:     kadm5_server_handle_t           handle;",
          "1648:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "1644:     gss_buffer_desc                 client_name,",
          "1645:         service_name;",
          "",
          "[Added Lines]",
          "1647:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1648:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1688:             krb5_free_error_message(handle->context, errmsg);",
          "1689:     }",
          "1690:     free(prime_arg);",
          "1691:     gss_release_buffer(&minor_stat, &client_name);",
          "1692:     gss_release_buffer(&minor_stat, &service_name);",
          "1694:     free_server_handle(handle);",
          "1695:     return &ret;",
          "1696: }",
          "",
          "[Removed Lines]",
          "1693: exit_func:",
          "",
          "[Added Lines]",
          "1694: exit_func:",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1700: {",
          "1701:     static generic_ret              ret;",
          "1702:     char                            *prime_arg;",
          "1705:     OM_uint32                       minor_stat;",
          "1706:     kadm5_server_handle_t           handle;",
          "1707:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "1703:     gss_buffer_desc                 client_name,",
          "1704:         service_name;",
          "",
          "[Added Lines]",
          "1706:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1707:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1744:             krb5_free_error_message(handle->context, errmsg);",
          "1745:     }",
          "1746:     free(prime_arg);",
          "1747:     gss_release_buffer(&minor_stat, &client_name);",
          "1748:     gss_release_buffer(&minor_stat, &service_name);",
          "1750:     free_server_handle(handle);",
          "1751:     return &ret;",
          "1752: }",
          "",
          "[Removed Lines]",
          "1749: exit_func:",
          "",
          "[Added Lines]",
          "1750: exit_func:",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1754: generic_ret *init_2_svc(krb5_ui_4 *arg, struct svc_req *rqstp)",
          "1755: {",
          "1756:     static generic_ret         ret;",
          "1759:     kadm5_server_handle_t      handle;",
          "1760:     OM_uint32                  minor_stat;",
          "1761:     const char                 *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "1757:     gss_buffer_desc            client_name,",
          "1758:         service_name;",
          "",
          "[Added Lines]",
          "1760:     gss_buffer_desc            client_name = GSS_C_EMPTY_BUFFER;",
          "1761:     gss_buffer_desc            service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1797:                      rqstp->rq_cred.oa_flavor);",
          "1798:     if (errmsg != NULL)",
          "1799:         krb5_free_error_message(NULL, errmsg);",
          "1803: exit_func:",
          "1804:     return(&ret);",
          "1805: }",
          "",
          "[Removed Lines]",
          "1800:     gss_release_buffer(&minor_stat, &client_name);",
          "1801:     gss_release_buffer(&minor_stat, &service_name);",
          "",
          "[Added Lines]",
          "1805:     gss_release_buffer(&minor_stat, &client_name);",
          "1806:     gss_release_buffer(&minor_stat, &service_name);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9285cbd39d4c68416b057761f2859c275707c12a",
      "candidate_info": {
        "commit_hash": "9285cbd39d4c68416b057761f2859c275707c12a",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/9285cbd39d4c68416b057761f2859c275707c12a",
        "files": [
          "src/kadmin/server/server_stubs.c"
        ],
        "message": "Fix leaks in kadmin server stubs [CVE-2015-8631]\n\nIn each kadmind server stub, initialize the client_name and\nserver_name variables, and release them in the cleanup handler.  Many\nof the stubs will otherwise leak the client and server name if\nkrb5_unparse_name() fails.  Also make sure to free the prime_arg\nvariables in rename_principal_2_svc(), or we can leak the first one if\nunparsing the second one fails.  Discovered by Simo Sorce.\n\nCVE-2015-8631:\n\nIn all versions of MIT krb5, an authenticated attacker can cause\nkadmind to leak memory by supplying a null principal name in a request\nwhich uses one.  Repeating these requests will eventually cause\nkadmind to exhaust all available memory.\n\n    CVSSv2 Vector: AV:N/AC:L/Au:S/C:N/I:N/A:C/E:POC/RL:OF/RC:C\n\n(cherry picked from commit 83ed75feba32e46f736fcce0d96a0445f29b96c2)\n\nticket: 8343\nversion_fixed: 1.14.1",
        "before_after_code_files": [
          "src/kadmin/server/server_stubs.c||src/kadmin/server/server_stubs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/kadmin/server/server_stubs.c||src/kadmin/server/server_stubs.c"
          ],
          "candidate": [
            "src/kadmin/server/server_stubs.c||src/kadmin/server/server_stubs.c"
          ]
        }
      },
      "candidate_diff": {
        "src/kadmin/server/server_stubs.c||src/kadmin/server/server_stubs.c": [
          "File: src/kadmin/server/server_stubs.c -> src/kadmin/server/server_stubs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "334: {",
          "335:     static generic_ret          ret;",
          "336:     char                        *prime_arg;",
          "338:     OM_uint32                   minor_stat;",
          "339:     kadm5_server_handle_t       handle;",
          "340:     restriction_t               *rp;",
          "",
          "[Removed Lines]",
          "337:     gss_buffer_desc             client_name, service_name;",
          "",
          "[Added Lines]",
          "337:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
          "338:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "382:             krb5_free_error_message(handle->context, errmsg);",
          "383:     }",
          "384:     free(prime_arg);",
          "388: exit_func:",
          "389:     free_server_handle(handle);",
          "390:     return &ret;",
          "391: }",
          "",
          "[Removed Lines]",
          "385:     gss_release_buffer(&minor_stat, &client_name);",
          "386:     gss_release_buffer(&minor_stat, &service_name);",
          "",
          "[Added Lines]",
          "388:     gss_release_buffer(&minor_stat, &client_name);",
          "389:     gss_release_buffer(&minor_stat, &service_name);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "395: {",
          "396:     static generic_ret          ret;",
          "397:     char                        *prime_arg;",
          "399:     OM_uint32                   minor_stat;",
          "400:     kadm5_server_handle_t       handle;",
          "401:     restriction_t               *rp;",
          "",
          "[Removed Lines]",
          "398:     gss_buffer_desc             client_name, service_name;",
          "",
          "[Added Lines]",
          "399:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
          "400:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "444:             krb5_free_error_message(handle->context, errmsg);",
          "445:     }",
          "446:     free(prime_arg);",
          "450: exit_func:",
          "451:     free_server_handle(handle);",
          "452:     return &ret;",
          "453: }",
          "",
          "[Removed Lines]",
          "447:     gss_release_buffer(&minor_stat, &client_name);",
          "448:     gss_release_buffer(&minor_stat, &service_name);",
          "",
          "[Added Lines]",
          "451:     gss_release_buffer(&minor_stat, &client_name);",
          "452:     gss_release_buffer(&minor_stat, &service_name);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "457: {",
          "458:     static generic_ret              ret;",
          "459:     char                            *prime_arg;",
          "462:     OM_uint32                       minor_stat;",
          "463:     kadm5_server_handle_t           handle;",
          "464:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "460:     gss_buffer_desc                 client_name,",
          "461:         service_name;",
          "",
          "[Added Lines]",
          "462:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "463:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "502:     }",
          "503:     free(prime_arg);",
          "507: exit_func:",
          "508:     free_server_handle(handle);",
          "509:     return &ret;",
          "510: }",
          "",
          "[Removed Lines]",
          "504:     gss_release_buffer(&minor_stat, &client_name);",
          "505:     gss_release_buffer(&minor_stat, &service_name);",
          "",
          "[Added Lines]",
          "508:     gss_release_buffer(&minor_stat, &client_name);",
          "509:     gss_release_buffer(&minor_stat, &service_name);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "514: {",
          "515:     static generic_ret              ret;",
          "516:     char                            *prime_arg;",
          "519:     OM_uint32                       minor_stat;",
          "520:     kadm5_server_handle_t           handle;",
          "521:     restriction_t                   *rp;",
          "",
          "[Removed Lines]",
          "517:     gss_buffer_desc                 client_name,",
          "518:         service_name;",
          "",
          "[Added Lines]",
          "519:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "520:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "559:             krb5_free_error_message(handle->context, errmsg);",
          "560:     }",
          "561:     free(prime_arg);",
          "562:     gss_release_buffer(&minor_stat, &client_name);",
          "563:     gss_release_buffer(&minor_stat, &service_name);",
          "565:     free_server_handle(handle);",
          "566:     return &ret;",
          "567: }",
          "",
          "[Removed Lines]",
          "564: exit_func:",
          "",
          "[Added Lines]",
          "564: exit_func:",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "570: rename_principal_2_svc(rprinc_arg *arg, struct svc_req *rqstp)",
          "571: {",
          "572:     static generic_ret          ret;",
          "577:     OM_uint32                   minor_stat;",
          "578:     kadm5_server_handle_t       handle;",
          "579:     restriction_t               *rp;",
          "",
          "[Removed Lines]",
          "573:     char                        *prime_arg1,",
          "575:     gss_buffer_desc             client_name,",
          "576:         service_name;",
          "",
          "[Added Lines]",
          "575:     char                        *prime_arg1 = NULL, *prime_arg2 = NULL;",
          "576:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
          "577:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "655:             krb5_free_error_message(handle->context, errmsg);",
          "657:     }",
          "658:     free(prime_arg1);",
          "659:     free(prime_arg2);",
          "660:     gss_release_buffer(&minor_stat, &client_name);",
          "661:     gss_release_buffer(&minor_stat, &service_name);",
          "663:     free_server_handle(handle);",
          "664:     return &ret;",
          "665: }",
          "",
          "[Removed Lines]",
          "662: exit_func:",
          "",
          "[Added Lines]",
          "659: exit_func:",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "669: {",
          "670:     static gprinc_ret               ret;",
          "671:     char                            *prime_arg, *funcname;",
          "674:     OM_uint32                       minor_stat;",
          "675:     kadm5_server_handle_t           handle;",
          "676:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "672:     gss_buffer_desc                 client_name,",
          "673:         service_name;",
          "",
          "[Added Lines]",
          "673:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "674:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "719:             krb5_free_error_message(handle->context, errmsg);",
          "720:     }",
          "721:     free(prime_arg);",
          "722:     gss_release_buffer(&minor_stat, &client_name);",
          "723:     gss_release_buffer(&minor_stat, &service_name);",
          "725:     free_server_handle(handle);",
          "726:     return &ret;",
          "727: }",
          "",
          "[Removed Lines]",
          "724: exit_func:",
          "",
          "[Added Lines]",
          "723: exit_func:",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "731: {",
          "732:     static gprincs_ret              ret;",
          "733:     char                            *prime_arg;",
          "736:     OM_uint32                       minor_stat;",
          "737:     kadm5_server_handle_t           handle;",
          "738:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "734:     gss_buffer_desc                 client_name,",
          "735:         service_name;",
          "",
          "[Added Lines]",
          "735:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "736:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "777:             krb5_free_error_message(handle->context, errmsg);",
          "779:     }",
          "780:     gss_release_buffer(&minor_stat, &client_name);",
          "781:     gss_release_buffer(&minor_stat, &service_name);",
          "783:     free_server_handle(handle);",
          "784:     return &ret;",
          "785: }",
          "",
          "[Removed Lines]",
          "782: exit_func:",
          "",
          "[Added Lines]",
          "781: exit_func:",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "789: {",
          "790:     static generic_ret              ret;",
          "791:     char                            *prime_arg;",
          "794:     OM_uint32                       minor_stat;",
          "795:     kadm5_server_handle_t           handle;",
          "796:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "792:     gss_buffer_desc                 client_name,",
          "793:         service_name;",
          "",
          "[Added Lines]",
          "793:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "794:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "840:     }",
          "842:     free(prime_arg);",
          "843:     gss_release_buffer(&minor_stat, &client_name);",
          "844:     gss_release_buffer(&minor_stat, &service_name);",
          "846:     free_server_handle(handle);",
          "847:     return &ret;",
          "848: }",
          "",
          "[Removed Lines]",
          "845: exit_func:",
          "",
          "[Added Lines]",
          "844: exit_func:",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "852: {",
          "853:     static generic_ret              ret;",
          "854:     char                            *prime_arg;",
          "857:     OM_uint32                       minor_stat;",
          "858:     kadm5_server_handle_t           handle;",
          "859:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "855:     gss_buffer_desc                 client_name,",
          "856:         service_name;",
          "",
          "[Added Lines]",
          "856:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "857:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "909:     }",
          "911:     free(prime_arg);",
          "912:     gss_release_buffer(&minor_stat, &client_name);",
          "913:     gss_release_buffer(&minor_stat, &service_name);",
          "915:     free_server_handle(handle);",
          "916:     return &ret;",
          "917: }",
          "",
          "[Removed Lines]",
          "914: exit_func:",
          "",
          "[Added Lines]",
          "913: exit_func:",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "921: {",
          "922:     static generic_ret              ret;",
          "923:     char                            *prime_arg;",
          "926:     OM_uint32                       minor_stat;",
          "927:     kadm5_server_handle_t           handle;",
          "928:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "924:     gss_buffer_desc                 client_name,",
          "925:         service_name;",
          "",
          "[Added Lines]",
          "925:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "926:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "969:     }",
          "971:     free(prime_arg);",
          "972:     gss_release_buffer(&minor_stat, &client_name);",
          "973:     gss_release_buffer(&minor_stat, &service_name);",
          "975:     free_server_handle(handle);",
          "976:     return &ret;",
          "977: }",
          "",
          "[Removed Lines]",
          "974: exit_func:",
          "",
          "[Added Lines]",
          "973: exit_func:",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "981: {",
          "982:     static generic_ret              ret;",
          "983:     char                            *prime_arg;",
          "986:     OM_uint32                       minor_stat;",
          "987:     kadm5_server_handle_t           handle;",
          "988:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "984:     gss_buffer_desc                 client_name,",
          "985:         service_name;",
          "",
          "[Added Lines]",
          "985:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "986:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1029:     }",
          "1031:     free(prime_arg);",
          "1032:     gss_release_buffer(&minor_stat, &client_name);",
          "1033:     gss_release_buffer(&minor_stat, &service_name);",
          "1035:     free_server_handle(handle);",
          "1036:     return &ret;",
          "1037: }",
          "",
          "[Removed Lines]",
          "1034: exit_func:",
          "",
          "[Added Lines]",
          "1033: exit_func:",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1041: {",
          "1042:     static generic_ret              ret;",
          "1043:     char                            *prime_arg;",
          "1046:     OM_uint32                       minor_stat;",
          "1047:     kadm5_server_handle_t           handle;",
          "1048:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "1044:     gss_buffer_desc                 client_name,",
          "1045:         service_name;",
          "",
          "[Added Lines]",
          "1045:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1046:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1092:     }",
          "1094:     free(prime_arg);",
          "1095:     gss_release_buffer(&minor_stat, &client_name);",
          "1096:     gss_release_buffer(&minor_stat, &service_name);",
          "1098:     free_server_handle(handle);",
          "1099:     return &ret;",
          "1100: }",
          "",
          "[Removed Lines]",
          "1097: exit_func:",
          "",
          "[Added Lines]",
          "1096: exit_func:",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1106:     krb5_keyblock               *k;",
          "1107:     int                         nkeys;",
          "1108:     char                        *prime_arg, *funcname;",
          "1111:     OM_uint32                   minor_stat;",
          "1112:     kadm5_server_handle_t       handle;",
          "1113:     const char                  *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "1109:     gss_buffer_desc             client_name,",
          "1110:         service_name;",
          "",
          "[Added Lines]",
          "1110:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
          "1111:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1164:             krb5_free_error_message(handle->context, errmsg);",
          "1165:     }",
          "1166:     free(prime_arg);",
          "1167:     gss_release_buffer(&minor_stat, &client_name);",
          "1168:     gss_release_buffer(&minor_stat, &service_name);",
          "1170:     free_server_handle(handle);",
          "1171:     return &ret;",
          "1172: }",
          "",
          "[Removed Lines]",
          "1169: exit_func:",
          "",
          "[Added Lines]",
          "1168: exit_func:",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1178:     krb5_keyblock               *k;",
          "1179:     int                         nkeys;",
          "1180:     char                        *prime_arg, *funcname;",
          "1183:     OM_uint32                   minor_stat;",
          "1184:     kadm5_server_handle_t       handle;",
          "1185:     const char                  *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "1181:     gss_buffer_desc             client_name,",
          "1182:         service_name;",
          "",
          "[Added Lines]",
          "1182:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
          "1183:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1241:             krb5_free_error_message(handle->context, errmsg);",
          "1242:     }",
          "1243:     free(prime_arg);",
          "1244:     gss_release_buffer(&minor_stat, &client_name);",
          "1245:     gss_release_buffer(&minor_stat, &service_name);",
          "1247:     free_server_handle(handle);",
          "1248:     return &ret;",
          "1249: }",
          "",
          "[Removed Lines]",
          "1246: exit_func:",
          "",
          "[Added Lines]",
          "1245: exit_func:",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1253: {",
          "1254:     static generic_ret              ret;",
          "1255:     char                            *prime_arg;",
          "1258:     OM_uint32                       minor_stat;",
          "1259:     kadm5_server_handle_t           handle;",
          "1260:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "1256:     gss_buffer_desc                 client_name,",
          "1257:         service_name;",
          "",
          "[Added Lines]",
          "1257:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1258:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1295:         if (errmsg != NULL)",
          "1296:             krb5_free_error_message(handle->context, errmsg);",
          "1297:     }",
          "1298:     gss_release_buffer(&minor_stat, &client_name);",
          "1299:     gss_release_buffer(&minor_stat, &service_name);",
          "1301:     free_server_handle(handle);",
          "1302:     return &ret;",
          "1303: }",
          "",
          "[Removed Lines]",
          "1300: exit_func:",
          "",
          "[Added Lines]",
          "1299: exit_func:",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1307: {",
          "1308:     static generic_ret              ret;",
          "1309:     char                            *prime_arg;",
          "1312:     OM_uint32                       minor_stat;",
          "1313:     kadm5_server_handle_t           handle;",
          "1314:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "1310:     gss_buffer_desc                 client_name,",
          "1311:         service_name;",
          "",
          "[Added Lines]",
          "1311:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1312:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1347:         if (errmsg != NULL)",
          "1348:             krb5_free_error_message(handle->context, errmsg);",
          "1349:     }",
          "1350:     gss_release_buffer(&minor_stat, &client_name);",
          "1351:     gss_release_buffer(&minor_stat, &service_name);",
          "1353:     free_server_handle(handle);",
          "1354:     return &ret;",
          "1355: }",
          "",
          "[Removed Lines]",
          "1352: exit_func:",
          "",
          "[Added Lines]",
          "1351: exit_func:",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1359: {",
          "1360:     static generic_ret              ret;",
          "1361:     char                            *prime_arg;",
          "1364:     OM_uint32                       minor_stat;",
          "1365:     kadm5_server_handle_t           handle;",
          "1366:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "1362:     gss_buffer_desc                 client_name,",
          "1363:         service_name;",
          "",
          "[Added Lines]",
          "1363:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1364:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1400:         if (errmsg != NULL)",
          "1401:             krb5_free_error_message(handle->context, errmsg);",
          "1402:     }",
          "1403:     gss_release_buffer(&minor_stat, &client_name);",
          "1404:     gss_release_buffer(&minor_stat, &service_name);",
          "1406:     free_server_handle(handle);",
          "1407:     return &ret;",
          "1408: }",
          "",
          "[Removed Lines]",
          "1405: exit_func:",
          "",
          "[Added Lines]",
          "1404: exit_func:",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1413:     static gpol_ret             ret;",
          "1414:     kadm5_ret_t         ret2;",
          "1415:     char                        *prime_arg, *funcname;",
          "1418:     OM_uint32                   minor_stat;",
          "1419:     kadm5_principal_ent_rec     caller_ent;",
          "1420:     kadm5_server_handle_t       handle;",
          "",
          "[Removed Lines]",
          "1416:     gss_buffer_desc             client_name,",
          "1417:         service_name;",
          "",
          "[Added Lines]",
          "1417:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
          "1418:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1475:         log_unauth(funcname, prime_arg,",
          "1476:                    &client_name, &service_name, rqstp);",
          "1477:     }",
          "1478:     gss_release_buffer(&minor_stat, &client_name);",
          "1479:     gss_release_buffer(&minor_stat, &service_name);",
          "1481:     free_server_handle(handle);",
          "1482:     return &ret;",
          "",
          "[Removed Lines]",
          "1480: exit_func:",
          "",
          "[Added Lines]",
          "1479: exit_func:",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1488: {",
          "1489:     static gpols_ret                ret;",
          "1490:     char                            *prime_arg;",
          "1493:     OM_uint32                       minor_stat;",
          "1494:     kadm5_server_handle_t           handle;",
          "1495:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "1491:     gss_buffer_desc                 client_name,",
          "1492:         service_name;",
          "",
          "[Added Lines]",
          "1492:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1493:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1531:         if (errmsg != NULL)",
          "1532:             krb5_free_error_message(handle->context, errmsg);",
          "1533:     }",
          "1534:     gss_release_buffer(&minor_stat, &client_name);",
          "1535:     gss_release_buffer(&minor_stat, &service_name);",
          "1537:     free_server_handle(handle);",
          "1538:     return &ret;",
          "1539: }",
          "",
          "[Removed Lines]",
          "1536: exit_func:",
          "",
          "[Added Lines]",
          "1535: exit_func:",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1541: getprivs_ret * get_privs_2_svc(krb5_ui_4 *arg, struct svc_req *rqstp)",
          "1542: {",
          "1543:     static getprivs_ret            ret;",
          "1545:     OM_uint32                      minor_stat;",
          "1546:     kadm5_server_handle_t          handle;",
          "1547:     const char                     *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "1544:     gss_buffer_desc                client_name, service_name;",
          "",
          "[Added Lines]",
          "1545:     gss_buffer_desc                client_name = GSS_C_EMPTY_BUFFER;",
          "1546:     gss_buffer_desc                service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1571:     if (errmsg != NULL)",
          "1572:         krb5_free_error_message(handle->context, errmsg);",
          "1574:     gss_release_buffer(&minor_stat, &client_name);",
          "1575:     gss_release_buffer(&minor_stat, &service_name);",
          "1577:     free_server_handle(handle);",
          "1578:     return &ret;",
          "1579: }",
          "",
          "[Removed Lines]",
          "1576: exit_func:",
          "",
          "[Added Lines]",
          "1576: exit_func:",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1583: {",
          "1584:     static generic_ret          ret;",
          "1585:     char                        *prime_arg, *funcname;",
          "1587:     OM_uint32                   minor_stat;",
          "1588:     kadm5_server_handle_t       handle;",
          "",
          "[Removed Lines]",
          "1586:     gss_buffer_desc             client_name, service_name;",
          "",
          "[Added Lines]",
          "1588:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
          "1589:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1629:             krb5_free_error_message(handle->context, errmsg);",
          "1630:     }",
          "1631:     free(prime_arg);",
          "1632:     gss_release_buffer(&minor_stat, &client_name);",
          "1633:     gss_release_buffer(&minor_stat, &service_name);",
          "1635:     free_server_handle(handle);",
          "1636:     return &ret;",
          "1637: }",
          "",
          "[Removed Lines]",
          "1634: exit_func:",
          "",
          "[Added Lines]",
          "1635: exit_func:",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1641: {",
          "1642:     static gstrings_ret             ret;",
          "1643:     char                            *prime_arg;",
          "1646:     OM_uint32                       minor_stat;",
          "1647:     kadm5_server_handle_t           handle;",
          "1648:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "1644:     gss_buffer_desc                 client_name,",
          "1645:         service_name;",
          "",
          "[Added Lines]",
          "1647:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1648:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1688:             krb5_free_error_message(handle->context, errmsg);",
          "1689:     }",
          "1690:     free(prime_arg);",
          "1691:     gss_release_buffer(&minor_stat, &client_name);",
          "1692:     gss_release_buffer(&minor_stat, &service_name);",
          "1694:     free_server_handle(handle);",
          "1695:     return &ret;",
          "1696: }",
          "",
          "[Removed Lines]",
          "1693: exit_func:",
          "",
          "[Added Lines]",
          "1694: exit_func:",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1700: {",
          "1701:     static generic_ret              ret;",
          "1702:     char                            *prime_arg;",
          "1705:     OM_uint32                       minor_stat;",
          "1706:     kadm5_server_handle_t           handle;",
          "1707:     const char                      *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "1703:     gss_buffer_desc                 client_name,",
          "1704:         service_name;",
          "",
          "[Added Lines]",
          "1706:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1707:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1744:             krb5_free_error_message(handle->context, errmsg);",
          "1745:     }",
          "1746:     free(prime_arg);",
          "1747:     gss_release_buffer(&minor_stat, &client_name);",
          "1748:     gss_release_buffer(&minor_stat, &service_name);",
          "1750:     free_server_handle(handle);",
          "1751:     return &ret;",
          "1752: }",
          "",
          "[Removed Lines]",
          "1749: exit_func:",
          "",
          "[Added Lines]",
          "1750: exit_func:",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1754: generic_ret *init_2_svc(krb5_ui_4 *arg, struct svc_req *rqstp)",
          "1755: {",
          "1756:     static generic_ret         ret;",
          "1759:     kadm5_server_handle_t      handle;",
          "1760:     OM_uint32                  minor_stat;",
          "1761:     const char                 *errmsg = NULL;",
          "",
          "[Removed Lines]",
          "1757:     gss_buffer_desc            client_name,",
          "1758:         service_name;",
          "",
          "[Added Lines]",
          "1760:     gss_buffer_desc            client_name = GSS_C_EMPTY_BUFFER;",
          "1761:     gss_buffer_desc            service_name = GSS_C_EMPTY_BUFFER;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1797:                      rqstp->rq_cred.oa_flavor);",
          "1798:     if (errmsg != NULL)",
          "1799:         krb5_free_error_message(NULL, errmsg);",
          "1803: exit_func:",
          "1804:     return(&ret);",
          "1805: }",
          "",
          "[Removed Lines]",
          "1800:     gss_release_buffer(&minor_stat, &client_name);",
          "1801:     gss_release_buffer(&minor_stat, &service_name);",
          "",
          "[Added Lines]",
          "1805:     gss_release_buffer(&minor_stat, &client_name);",
          "1806:     gss_release_buffer(&minor_stat, &service_name);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01d2bd6ab3f39163f6185ac4c69f6f87535212b4",
      "candidate_info": {
        "commit_hash": "01d2bd6ab3f39163f6185ac4c69f6f87535212b4",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/01d2bd6ab3f39163f6185ac4c69f6f87535212b4",
        "files": [
          "src/kadmin/server/kadm_rpc_svc.c",
          "src/kadmin/server/server_stubs.c",
          "src/lib/kadm5/kadm_rpc.h"
        ],
        "message": "Improve libkadm5 server stubs\n\nChange the server_stubs.c functions to use thread-safe signatures (as\nwould be output by rpcgen -M).  This change has no immediate impact\nsince kadmind is single-threaded, but is cleaner because it avoids the\nuse of static variables.  Factor out some of the common initialization\nand cleanup code from the server functions.\n\n[ghudson@mit.edu: rename stub helper functions and reorder/rename\noutput arguments; error out in stub setup if princ is unexpectedly\nnull]",
        "before_after_code_files": [
          "src/kadmin/server/kadm_rpc_svc.c||src/kadmin/server/kadm_rpc_svc.c",
          "src/kadmin/server/server_stubs.c||src/kadmin/server/server_stubs.c",
          "src/lib/kadm5/kadm_rpc.h||src/lib/kadm5/kadm_rpc.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/kadmin/server/server_stubs.c||src/kadmin/server/server_stubs.c"
          ],
          "candidate": [
            "src/kadmin/server/server_stubs.c||src/kadmin/server/server_stubs.c"
          ]
        }
      },
      "candidate_diff": {
        "src/kadmin/server/kadm_rpc_svc.c||src/kadmin/server/kadm_rpc_svc.c": [
          "File: src/kadmin/server/kadm_rpc_svc.c -> src/kadmin/server/kadm_rpc_svc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:    setkey4_arg setkey_principal4_2_arg;",
          "62:    getpkeys_arg get_principal_keys_2_arg;",
          "63:      } argument;",
          "65:      bool_t (*xdr_argument)(), (*xdr_result)();",
          "68:      if (rqstp->rq_cred.oa_flavor != AUTH_GSSAPI &&",
          "69:   !check_rpcsec_auth(rqstp)) {",
          "",
          "[Removed Lines]",
          "64:      char *result;",
          "66:      char *(*local)();",
          "",
          "[Added Lines]",
          "64:      union {",
          "65:    generic_ret gen_ret;",
          "66:    gprinc_ret get_principal_2_ret;",
          "67:    chrand_ret chrand_principal_2_ret;",
          "68:    gpol_ret get_policy_2_ret;",
          "69:    getprivs_ret get_privs_2_ret;",
          "70:    gprincs_ret get_princs_2_ret;",
          "71:    gpols_ret get_pols_2_ret;",
          "72:    chrand_ret chrand_principal3_2_ret;",
          "73:    gstrings_ret get_string_2_ret;",
          "74:    getpkeys_ret get_principal_keys_ret;",
          "75:      } result;",
          "76:      bool_t retval;",
          "78:      bool_t (*local)();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:      case CREATE_PRINCIPAL:",
          "84:    xdr_argument = xdr_cprinc_arg;",
          "85:    xdr_result = xdr_generic_ret;",
          "87:    break;",
          "89:      case DELETE_PRINCIPAL:",
          "90:    xdr_argument = xdr_dprinc_arg;",
          "91:    xdr_result = xdr_generic_ret;",
          "93:    break;",
          "95:      case MODIFY_PRINCIPAL:",
          "96:    xdr_argument = xdr_mprinc_arg;",
          "97:    xdr_result = xdr_generic_ret;",
          "99:    break;",
          "101:      case RENAME_PRINCIPAL:",
          "102:    xdr_argument = xdr_rprinc_arg;",
          "103:    xdr_result = xdr_generic_ret;",
          "105:    break;",
          "107:      case GET_PRINCIPAL:",
          "108:    xdr_argument = xdr_gprinc_arg;",
          "109:    xdr_result = xdr_gprinc_ret;",
          "111:    break;",
          "113:      case GET_PRINCS:",
          "114:    xdr_argument = xdr_gprincs_arg;",
          "115:    xdr_result = xdr_gprincs_ret;",
          "117:    break;",
          "119:      case CHPASS_PRINCIPAL:",
          "120:    xdr_argument = xdr_chpass_arg;",
          "121:    xdr_result = xdr_generic_ret;",
          "123:    break;",
          "125:      case SETV4KEY_PRINCIPAL:",
          "126:    xdr_argument = xdr_setv4key_arg;",
          "127:    xdr_result = xdr_generic_ret;",
          "129:    break;",
          "131:      case SETKEY_PRINCIPAL:",
          "132:    xdr_argument = xdr_setkey_arg;",
          "133:    xdr_result = xdr_generic_ret;",
          "135:    break;",
          "137:      case CHRAND_PRINCIPAL:",
          "138:    xdr_argument = xdr_chrand_arg;",
          "139:    xdr_result = xdr_chrand_ret;",
          "141:    break;",
          "143:      case CREATE_POLICY:",
          "144:    xdr_argument = xdr_cpol_arg;",
          "145:    xdr_result = xdr_generic_ret;",
          "147:    break;",
          "149:      case DELETE_POLICY:",
          "150:    xdr_argument = xdr_dpol_arg;",
          "151:    xdr_result = xdr_generic_ret;",
          "153:    break;",
          "155:      case MODIFY_POLICY:",
          "156:    xdr_argument = xdr_mpol_arg;",
          "157:    xdr_result = xdr_generic_ret;",
          "159:    break;",
          "161:      case GET_POLICY:",
          "162:    xdr_argument = xdr_gpol_arg;",
          "163:    xdr_result = xdr_gpol_ret;",
          "165:    break;",
          "167:      case GET_POLS:",
          "168:    xdr_argument = xdr_gpols_arg;",
          "169:    xdr_result = xdr_gpols_ret;",
          "171:    break;",
          "173:      case GET_PRIVS:",
          "174:    xdr_argument = xdr_u_int32;",
          "175:    xdr_result = xdr_getprivs_ret;",
          "177:    break;",
          "179:      case INIT:",
          "180:    xdr_argument = xdr_u_int32;",
          "181:    xdr_result = xdr_generic_ret;",
          "183:    break;",
          "185:      case CREATE_PRINCIPAL3:",
          "186:    xdr_argument = xdr_cprinc3_arg;",
          "187:    xdr_result = xdr_generic_ret;",
          "189:    break;",
          "191:      case CHPASS_PRINCIPAL3:",
          "192:    xdr_argument = xdr_chpass3_arg;",
          "193:    xdr_result = xdr_generic_ret;",
          "195:    break;",
          "197:      case CHRAND_PRINCIPAL3:",
          "198:    xdr_argument = xdr_chrand3_arg;",
          "199:    xdr_result = xdr_chrand_ret;",
          "201:    break;",
          "203:      case SETKEY_PRINCIPAL3:",
          "204:    xdr_argument = xdr_setkey3_arg;",
          "205:    xdr_result = xdr_generic_ret;",
          "207:    break;",
          "209:      case PURGEKEYS:",
          "210:    xdr_argument = xdr_purgekeys_arg;",
          "211:    xdr_result = xdr_generic_ret;",
          "213:    break;",
          "215:      case GET_STRINGS:",
          "216:    xdr_argument = xdr_gstrings_arg;",
          "217:    xdr_result = xdr_gstrings_ret;",
          "219:    break;",
          "221:      case SET_STRING:",
          "222:    xdr_argument = xdr_sstring_arg;",
          "223:    xdr_result = xdr_generic_ret;",
          "225:    break;",
          "227:      case SETKEY_PRINCIPAL4:",
          "228:    xdr_argument = xdr_setkey4_arg;",
          "229:    xdr_result = xdr_generic_ret;",
          "231:    break;",
          "233:      case EXTRACT_KEYS:",
          "234:    xdr_argument = xdr_getpkeys_arg;",
          "235:    xdr_result = xdr_getpkeys_ret;",
          "237:    break;",
          "239:      default:",
          "",
          "[Removed Lines]",
          "86:    local = (char *(*)()) create_principal_2_svc;",
          "92:    local = (char *(*)()) delete_principal_2_svc;",
          "98:    local = (char *(*)()) modify_principal_2_svc;",
          "104:    local = (char *(*)()) rename_principal_2_svc;",
          "110:    local = (char *(*)()) get_principal_2_svc;",
          "116:    local = (char *(*)()) get_princs_2_svc;",
          "122:    local = (char *(*)()) chpass_principal_2_svc;",
          "128:    local = (char *(*)()) setv4key_principal_2_svc;",
          "134:    local = (char *(*)()) setkey_principal_2_svc;",
          "140:    local = (char *(*)()) chrand_principal_2_svc;",
          "146:    local = (char *(*)()) create_policy_2_svc;",
          "152:    local = (char *(*)()) delete_policy_2_svc;",
          "158:    local = (char *(*)()) modify_policy_2_svc;",
          "164:    local = (char *(*)()) get_policy_2_svc;",
          "170:    local = (char *(*)()) get_pols_2_svc;",
          "176:    local = (char *(*)()) get_privs_2_svc;",
          "182:    local = (char *(*)()) init_2_svc;",
          "188:    local = (char *(*)()) create_principal3_2_svc;",
          "194:    local = (char *(*)()) chpass_principal3_2_svc;",
          "200:    local = (char *(*)()) chrand_principal3_2_svc;",
          "206:    local = (char *(*)()) setkey_principal3_2_svc;",
          "212:    local = (char *(*)()) purgekeys_2_svc;",
          "218:    local = (char *(*)()) get_strings_2_svc;",
          "224:    local = (char *(*)()) set_string_2_svc;",
          "230:    local = (char *(*)()) setkey_principal4_2_svc;",
          "236:    local = (char *(*)()) get_principal_keys_2_svc;",
          "",
          "[Added Lines]",
          "98:    local = (bool_t (*)()) create_principal_2_svc;",
          "104:    local = (bool_t (*)()) delete_principal_2_svc;",
          "110:    local = (bool_t (*)()) modify_principal_2_svc;",
          "116:    local = (bool_t (*)()) rename_principal_2_svc;",
          "122:    local = (bool_t (*)()) get_principal_2_svc;",
          "128:    local = (bool_t (*)()) get_princs_2_svc;",
          "134:    local = (bool_t (*)()) chpass_principal_2_svc;",
          "140:    local = (bool_t (*)()) setv4key_principal_2_svc;",
          "146:    local = (bool_t (*)()) setkey_principal_2_svc;",
          "152:    local = (bool_t (*)()) chrand_principal_2_svc;",
          "158:    local = (bool_t (*)()) create_policy_2_svc;",
          "164:    local = (bool_t (*)()) delete_policy_2_svc;",
          "170:    local = (bool_t (*)()) modify_policy_2_svc;",
          "176:    local = (bool_t (*)()) get_policy_2_svc;",
          "182:    local = (bool_t (*)()) get_pols_2_svc;",
          "188:    local = (bool_t (*)()) get_privs_2_svc;",
          "194:    local = (bool_t (*)()) init_2_svc;",
          "200:    local = (bool_t (*)()) create_principal3_2_svc;",
          "206:    local = (bool_t (*)()) chpass_principal3_2_svc;",
          "212:    local = (bool_t (*)()) chrand_principal3_2_svc;",
          "218:    local = (bool_t (*)()) setkey_principal3_2_svc;",
          "224:    local = (bool_t (*)()) purgekeys_2_svc;",
          "230:    local = (bool_t (*)()) get_strings_2_svc;",
          "236:    local = (bool_t (*)()) set_string_2_svc;",
          "242:    local = (bool_t (*)()) setkey_principal4_2_svc;",
          "248:    local = (bool_t (*)()) get_principal_keys_2_svc;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "247:    svcerr_decode(transp);",
          "248:    return;",
          "249:      }",
          "252:    krb5_klog_syslog(LOG_ERR, \"WARNING! Unable to send function results, \"",
          "253:    \"continuing.\");",
          "254:    svcerr_systemerr(transp);",
          "",
          "[Removed Lines]",
          "250:      result = (*local)(&argument, rqstp);",
          "251:      if (result != NULL && !svc_sendreply(transp, xdr_result, result)) {",
          "",
          "[Added Lines]",
          "262:      memset(&result, 0, sizeof(result));",
          "263:      retval = (*local)(&argument, &result, rqstp);",
          "264:      if (retval && !svc_sendreply(transp, xdr_result, (void *)&result)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "257:    krb5_klog_syslog(LOG_ERR, \"WARNING! Unable to free arguments, \"",
          "258:    \"continuing.\");",
          "259:      }",
          "260:      return;",
          "261: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "273:      if (!svc_freeargs(transp, xdr_result, &result)) {",
          "274:    krb5_klog_syslog(LOG_ERR, \"WARNING! Unable to free results, \"",
          "275:    \"continuing.\");",
          "276:      }",
          "",
          "---------------"
        ],
        "src/kadmin/server/server_stubs.c||src/kadmin/server/server_stubs.c": [
          "File: src/kadmin/server/server_stubs.c -> src/kadmin/server/server_stubs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "270:     return 0;",
          "271: }",
          "273: static int",
          "274: log_unauth(",
          "275:     char *op,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "279: static kadm5_ret_t",
          "280: stub_setup(krb5_ui_4 api_version, struct svc_req *rqstp, krb5_principal princ,",
          "281:            kadm5_server_handle_t *handle_out, krb5_ui_4 *api_version_out,",
          "282:            gss_buffer_t client_name_out, gss_buffer_t service_name_out,",
          "283:            char **princ_str_out)",
          "284: {",
          "285:     kadm5_ret_t ret;",
          "287:     ret = new_server_handle(api_version, rqstp, handle_out);",
          "288:     if (ret)",
          "289:         return ret;",
          "291:     ret = check_handle(*handle_out);",
          "292:     if (ret)",
          "293:         return ret;",
          "297:     if (setup_gss_names(rqstp, client_name_out, service_name_out) < 0)",
          "298:         return KADM5_FAILURE;",
          "300:     if (princ_str_out != NULL) {",
          "301:         if (princ == NULL)",
          "302:             return KADM5_BAD_PRINCIPAL;",
          "303:         if (krb5_unparse_name((*handle_out)->context, princ, princ_str_out))",
          "304:             return KADM5_BAD_PRINCIPAL;",
          "305:     }",
          "307:     return KADM5_OK;",
          "308: }",
          "311: static void",
          "312: stub_cleanup(kadm5_server_handle_t handle, char *princ_str,",
          "313:              gss_buffer_t client_name, gss_buffer_t service_name)",
          "314: {",
          "315:     OM_uint32 minor_stat;",
          "317:     free_server_handle(handle);",
          "318:     free(princ_str);",
          "319:     gss_release_buffer(&minor_stat, client_name);",
          "320:     gss_release_buffer(&minor_stat, service_name);",
          "321: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329:                             client_addr(rqstp->rq_xprt));",
          "330: }",
          "334: {",
          "337:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
          "338:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
          "340:     kadm5_server_handle_t       handle;",
          "341:     restriction_t               *rp;",
          "342:     const char                  *errmsg = NULL;",
          "350:         goto exit_func;",
          "363:     if (CHANGEPW_SERVICE(rqstp)",
          "364:         || !kadm5int_acl_check(handle->context, rqst2name(rqstp), ACL_ADD,",
          "365:                                arg->rec.principal, &rp)",
          "366:         || kadm5int_acl_impose_restrictions(handle->context,",
          "367:                                             &arg->rec, &arg->mask, rp)) {",
          "369:         log_unauth(\"kadm5_create_principal\", prime_arg,",
          "370:                    &client_name, &service_name, rqstp);",
          "371:     } else {",
          "379:         log_done(\"kadm5_create_principal\", prime_arg, errmsg,",
          "380:                  &client_name, &service_name, rqstp);",
          "",
          "[Removed Lines]",
          "332: generic_ret *",
          "333: create_principal_2_svc(cprinc_arg *arg, struct svc_req *rqstp)",
          "335:     static generic_ret          ret;",
          "336:     char                        *prime_arg;",
          "339:     OM_uint32                   minor_stat;",
          "344:     xdr_free(xdr_generic_ret, &ret);",
          "346:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "347:         goto exit_func;",
          "349:     if ((ret.code = check_handle((void *)handle)))",
          "352:     ret.api_version = handle->api_version;",
          "354:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "355:         ret.code = KADM5_FAILURE;",
          "356:         goto exit_func;",
          "357:     }",
          "358:     if (krb5_unparse_name(handle->context, arg->rec.principal, &prime_arg)) {",
          "359:         ret.code = KADM5_BAD_PRINCIPAL;",
          "360:         goto exit_func;",
          "361:     }",
          "368:         ret.code = KADM5_AUTH_ADD;",
          "372:         ret.code = kadm5_create_principal((void *)handle,",
          "373:                                           &arg->rec, arg->mask,",
          "374:                                           arg->passwd);",
          "376:         if( ret.code != 0 )",
          "377:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "382: bool_t",
          "383: create_principal_2_svc(cprinc_arg *arg, generic_ret *ret,",
          "384:                        struct svc_req *rqstp)",
          "386:     char                        *prime_arg = NULL;",
          "393:     ret->code = stub_setup(arg->api_version, rqstp, arg->rec.principal,",
          "394:                            &handle, &ret->api_version, &client_name,",
          "395:                            &service_name, &prime_arg);",
          "396:     if (ret->code)",
          "404:         ret->code = KADM5_AUTH_ADD;",
          "408:         ret->code = kadm5_create_principal(handle, &arg->rec, arg->mask,",
          "409:                                            arg->passwd);",
          "411:         if (ret->code != 0)",
          "412:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "382:         if (errmsg != NULL)",
          "383:             krb5_free_error_message(handle->context, errmsg);",
          "384:     }",
          "387: exit_func:",
          "392: }",
          "396: {",
          "399:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
          "400:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
          "402:     kadm5_server_handle_t       handle;",
          "403:     restriction_t               *rp;",
          "404:     const char                  *errmsg = NULL;",
          "409:         goto exit_func;",
          "425:     if (CHANGEPW_SERVICE(rqstp)",
          "426:         || !kadm5int_acl_check(handle->context, rqst2name(rqstp), ACL_ADD,",
          "427:                                arg->rec.principal, &rp)",
          "428:         || kadm5int_acl_impose_restrictions(handle->context,",
          "429:                                             &arg->rec, &arg->mask, rp)) {",
          "431:         log_unauth(\"kadm5_create_principal\", prime_arg,",
          "432:                    &client_name, &service_name, rqstp);",
          "433:     } else {",
          "442:         log_done(\"kadm5_create_principal\", prime_arg, errmsg,",
          "443:                  &client_name, &service_name, rqstp);",
          "",
          "[Removed Lines]",
          "385:     free(prime_arg);",
          "388:     gss_release_buffer(&minor_stat, &client_name);",
          "389:     gss_release_buffer(&minor_stat, &service_name);",
          "390:     free_server_handle(handle);",
          "391:     return &ret;",
          "394: generic_ret *",
          "395: create_principal3_2_svc(cprinc3_arg *arg, struct svc_req *rqstp)",
          "397:     static generic_ret          ret;",
          "398:     char                        *prime_arg;",
          "401:     OM_uint32                   minor_stat;",
          "406:     xdr_free(xdr_generic_ret, &ret);",
          "408:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "411:     if ((ret.code = check_handle((void *)handle)))",
          "412:         goto exit_func;",
          "414:     ret.api_version = handle->api_version;",
          "416:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "417:         ret.code = KADM5_FAILURE;",
          "418:         goto exit_func;",
          "419:     }",
          "420:     if (krb5_unparse_name(handle->context, arg->rec.principal, &prime_arg)) {",
          "421:         ret.code = KADM5_BAD_PRINCIPAL;",
          "422:         goto exit_func;",
          "423:     }",
          "430:         ret.code = KADM5_AUTH_ADD;",
          "434:         ret.code = kadm5_create_principal_3((void *)handle,",
          "435:                                             &arg->rec, arg->mask,",
          "436:                                             arg->n_ks_tuple,",
          "437:                                             arg->ks_tuple,",
          "438:                                             arg->passwd);",
          "439:         if( ret.code != 0 )",
          "440:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "422:     stub_cleanup(handle, prime_arg, &client_name, &service_name);",
          "423:     return TRUE;",
          "426: bool_t",
          "427: create_principal3_2_svc(cprinc3_arg *arg, generic_ret *ret,",
          "428:                         struct svc_req *rqstp)",
          "430:     char                        *prime_arg = NULL;",
          "437:     ret->code = stub_setup(arg->api_version, rqstp, arg->rec.principal,",
          "438:                            &handle, &ret->api_version, &client_name,",
          "439:                            &service_name, &prime_arg);",
          "440:     if (ret->code)",
          "448:         ret->code = KADM5_AUTH_ADD;",
          "452:         ret->code = kadm5_create_principal_3(handle, &arg->rec, arg->mask,",
          "453:                                              arg->n_ks_tuple, arg->ks_tuple,",
          "454:                                              arg->passwd);",
          "455:         if (ret->code != 0)",
          "456:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "445:         if (errmsg != NULL)",
          "446:             krb5_free_error_message(handle->context, errmsg);",
          "447:     }",
          "450: exit_func:",
          "455: }",
          "",
          "[Removed Lines]",
          "448:     free(prime_arg);",
          "451:     gss_release_buffer(&minor_stat, &client_name);",
          "452:     gss_release_buffer(&minor_stat, &service_name);",
          "453:     free_server_handle(handle);",
          "454:     return &ret;",
          "",
          "[Added Lines]",
          "466:     stub_cleanup(handle, prime_arg, &client_name, &service_name);",
          "467:     return TRUE;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "469:     return ret;",
          "470: }",
          "474: {",
          "477:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "478:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "480:     kadm5_server_handle_t           handle;",
          "481:     const char                      *errmsg = NULL;",
          "489:         goto exit_func;",
          "502:     if (CHANGEPW_SERVICE(rqstp)",
          "503:         || !kadm5int_acl_check(handle->context, rqst2name(rqstp), ACL_DELETE,",
          "504:                                arg->princ, NULL)) {",
          "506:         log_unauth(\"kadm5_delete_principal\", prime_arg,",
          "507:                    &client_name, &service_name, rqstp);",
          "508:     } else {",
          "511:             log_unauth(\"kadm5_delete_principal\", prime_arg, &client_name,",
          "512:                        &service_name, rqstp);",
          "514:         }",
          "515:     }",
          "523:         log_done(\"kadm5_delete_principal\", prime_arg, errmsg,",
          "524:                  &client_name, &service_name, rqstp);",
          "",
          "[Removed Lines]",
          "472: generic_ret *",
          "473: delete_principal_2_svc(dprinc_arg *arg, struct svc_req *rqstp)",
          "475:     static generic_ret              ret;",
          "476:     char                            *prime_arg;",
          "479:     OM_uint32                       minor_stat;",
          "483:     xdr_free(xdr_generic_ret, &ret);",
          "485:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "486:         goto exit_func;",
          "488:     if ((ret.code = check_handle((void *)handle)))",
          "491:     ret.api_version = handle->api_version;",
          "493:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "494:         ret.code = KADM5_FAILURE;",
          "495:         goto exit_func;",
          "496:     }",
          "497:     if (krb5_unparse_name(handle->context, arg->princ, &prime_arg)) {",
          "498:         ret.code = KADM5_BAD_PRINCIPAL;",
          "499:         goto exit_func;",
          "500:     }",
          "505:         ret.code = KADM5_AUTH_DELETE;",
          "509:         ret.code = check_lockdown_keys(handle, arg->princ);",
          "510:         if (ret.code == KADM5_PROTECT_KEYS) {",
          "513:             ret.code = KADM5_AUTH_DELETE;",
          "517:     if (ret.code == KADM5_OK)",
          "518:         ret.code = kadm5_delete_principal((void *)handle, arg->princ);",
          "519:     if (ret.code != KADM5_AUTH_DELETE) {",
          "520:         if( ret.code != 0 )",
          "521:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "485: bool_t",
          "486: delete_principal_2_svc(dprinc_arg *arg, generic_ret *ret,",
          "487:                        struct svc_req *rqstp)",
          "489:     char                            *prime_arg = NULL;",
          "495:     ret->code = stub_setup(arg->api_version, rqstp, arg->princ, &handle,",
          "496:                            &ret->api_version, &client_name, &service_name,",
          "497:                            &prime_arg);",
          "498:     if (ret->code)",
          "504:         ret->code = KADM5_AUTH_DELETE;",
          "508:         ret->code = check_lockdown_keys(handle, arg->princ);",
          "509:         if (ret->code == KADM5_PROTECT_KEYS) {",
          "512:             ret->code = KADM5_AUTH_DELETE;",
          "516:     if (ret->code == KADM5_OK)",
          "517:         ret->code = kadm5_delete_principal(handle, arg->princ);",
          "518:     if (ret->code != KADM5_AUTH_DELETE) {",
          "519:         if (ret->code != 0)",
          "520:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "527:             krb5_free_error_message(handle->context, errmsg);",
          "529:     }",
          "532: exit_func:",
          "537: }",
          "541: {",
          "544:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "545:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "547:     kadm5_server_handle_t           handle;",
          "548:     restriction_t                   *rp;",
          "549:     const char                      *errmsg = NULL;",
          "554:         goto exit_func;",
          "568:     if (CHANGEPW_SERVICE(rqstp)",
          "569:         || !kadm5int_acl_check(handle->context, rqst2name(rqstp), ACL_MODIFY,",
          "570:                                arg->rec.principal, &rp)",
          "571:         || kadm5int_acl_impose_restrictions(handle->context,",
          "572:                                             &arg->rec, &arg->mask, rp)) {",
          "574:         log_unauth(\"kadm5_modify_principal\", prime_arg,",
          "575:                    &client_name, &service_name, rqstp);",
          "576:     } else if ((arg->mask & KADM5_ATTRIBUTES) &&",
          "577:                (!(arg->rec.attributes & KRB5_KDB_LOCKDOWN_KEYS))) {",
          "580:             log_unauth(\"kadm5_modify_principal\", prime_arg, &client_name,",
          "581:                        &service_name, rqstp);",
          "583:         }",
          "584:     }",
          "592:         log_done(\"kadm5_modify_principal\", prime_arg, errmsg,",
          "593:                  &client_name, &service_name, rqstp);",
          "",
          "[Removed Lines]",
          "530:     free(prime_arg);",
          "533:     gss_release_buffer(&minor_stat, &client_name);",
          "534:     gss_release_buffer(&minor_stat, &service_name);",
          "535:     free_server_handle(handle);",
          "536:     return &ret;",
          "539: generic_ret *",
          "540: modify_principal_2_svc(mprinc_arg *arg, struct svc_req *rqstp)",
          "542:     static generic_ret              ret;",
          "543:     char                            *prime_arg;",
          "546:     OM_uint32                       minor_stat;",
          "551:     xdr_free(xdr_generic_ret, &ret);",
          "553:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "556:     if ((ret.code = check_handle((void *)handle)))",
          "557:         goto exit_func;",
          "559:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "560:         ret.code = KADM5_FAILURE;",
          "561:         goto exit_func;",
          "562:     }",
          "563:     if (krb5_unparse_name(handle->context, arg->rec.principal, &prime_arg)) {",
          "564:         ret.code = KADM5_BAD_PRINCIPAL;",
          "565:         goto exit_func;",
          "566:     }",
          "573:         ret.code = KADM5_AUTH_MODIFY;",
          "578:         ret.code = check_lockdown_keys(handle, arg->rec.principal);",
          "579:         if (ret.code == KADM5_PROTECT_KEYS) {",
          "582:             ret.code = KADM5_AUTH_MODIFY;",
          "586:     if (ret.code == KADM5_OK) {",
          "587:         ret.code = kadm5_modify_principal((void *)handle, &arg->rec,",
          "588:                                           arg->mask);",
          "589:         if( ret.code != 0 )",
          "590:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "531:     stub_cleanup(handle, prime_arg, &client_name, &service_name);",
          "532:     return TRUE;",
          "535: bool_t",
          "536: modify_principal_2_svc(mprinc_arg *arg, generic_ret *ret,",
          "537:                        struct svc_req *rqstp)",
          "539:     char                            *prime_arg = NULL;",
          "546:     ret->code = stub_setup(arg->api_version, rqstp, arg->rec.principal,",
          "547:                            &handle, &ret->api_version, &client_name,",
          "548:                            &service_name, &prime_arg);",
          "549:     if (ret->code)",
          "557:         ret->code = KADM5_AUTH_MODIFY;",
          "562:         ret->code = check_lockdown_keys(handle, arg->rec.principal);",
          "563:         if (ret->code == KADM5_PROTECT_KEYS) {",
          "566:             ret->code = KADM5_AUTH_MODIFY;",
          "570:     if (ret->code == KADM5_OK) {",
          "571:         ret->code = kadm5_modify_principal(handle, &arg->rec, arg->mask);",
          "572:         if (ret->code != 0)",
          "573:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "595:         if (errmsg != NULL)",
          "596:             krb5_free_error_message(handle->context, errmsg);",
          "597:     }",
          "599: exit_func:",
          "604: }",
          "608: {",
          "610:     char                        *prime_arg1 = NULL, *prime_arg2 = NULL;",
          "611:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
          "612:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
          "614:     kadm5_server_handle_t       handle;",
          "615:     restriction_t               *rp;",
          "616:     const char                  *errmsg = NULL;",
          "617:     size_t                      tlen1, tlen2, clen, slen;",
          "618:     char                        *tdots1, *tdots2, *cdots, *sdots;",
          "626:         goto exit_func;",
          "632:     if (krb5_unparse_name(handle->context, arg->src, &prime_arg1) ||",
          "633:         krb5_unparse_name(handle->context, arg->dest, &prime_arg2)) {",
          "635:         goto exit_func;",
          "636:     }",
          "637:     tlen1 = strlen(prime_arg1);",
          "",
          "[Removed Lines]",
          "598:     free(prime_arg);",
          "600:     gss_release_buffer(&minor_stat, &client_name);",
          "601:     gss_release_buffer(&minor_stat, &service_name);",
          "602:     free_server_handle(handle);",
          "603:     return &ret;",
          "606: generic_ret *",
          "607: rename_principal_2_svc(rprinc_arg *arg, struct svc_req *rqstp)",
          "609:     static generic_ret          ret;",
          "613:     OM_uint32                   minor_stat;",
          "620:     xdr_free(xdr_generic_ret, &ret);",
          "622:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "623:         goto exit_func;",
          "625:     if ((ret.code = check_handle((void *)handle)))",
          "628:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "629:         ret.code = KADM5_FAILURE;",
          "630:         goto exit_func;",
          "631:     }",
          "634:         ret.code = KADM5_BAD_PRINCIPAL;",
          "",
          "[Added Lines]",
          "583:     stub_cleanup(handle, prime_arg, &client_name, &service_name);",
          "584:     return TRUE;",
          "587: bool_t",
          "588: rename_principal_2_svc(rprinc_arg *arg, generic_ret *ret,",
          "589:                        struct svc_req *rqstp)",
          "600:     ret->code = stub_setup(arg->api_version, rqstp, NULL, &handle,",
          "601:                            &ret->api_version, &client_name, &service_name,",
          "602:                            NULL);",
          "603:     if (ret->code)",
          "608:         ret->code = KADM5_BAD_PRINCIPAL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "643:     slen = service_name.length;",
          "644:     trunc_name(&slen, &sdots);",
          "647:     if (! CHANGEPW_SERVICE(rqstp)) {",
          "648:         if (!kadm5int_acl_check(handle->context, rqst2name(rqstp),",
          "649:                                 ACL_DELETE, arg->src, NULL))",
          "652:         if (!kadm5int_acl_check(handle->context, rqst2name(rqstp),",
          "653:                                 ACL_ADD, arg->dest, &rp) || rp) {",
          "656:             else",
          "658:         }",
          "662:                 log_unauth(\"kadm5_rename_principal\", prime_arg1, &client_name,",
          "663:                            &service_name, rqstp);",
          "665:             }",
          "666:         }",
          "667:     } else",
          "671:         krb5_klog_syslog(LOG_NOTICE,",
          "672:                          _(\"Unauthorized request: kadm5_rename_principal, \"",
          "",
          "[Removed Lines]",
          "646:     ret.code = KADM5_OK;",
          "650:             ret.code = KADM5_AUTH_DELETE;",
          "654:             if (ret.code == KADM5_AUTH_DELETE)",
          "655:                 ret.code = KADM5_AUTH_INSUFFICIENT;",
          "657:                 ret.code = KADM5_AUTH_ADD;",
          "659:         if (ret.code == KADM5_OK) {",
          "660:             ret.code = check_lockdown_keys(handle, arg->src);",
          "661:             if (ret.code == KADM5_PROTECT_KEYS) {",
          "664:                 ret.code = KADM5_AUTH_DELETE;",
          "668:         ret.code = KADM5_AUTH_INSUFFICIENT;",
          "669:     if (ret.code != KADM5_OK) {",
          "",
          "[Added Lines]",
          "620:     ret->code = KADM5_OK;",
          "624:             ret->code = KADM5_AUTH_DELETE;",
          "628:             if (ret->code == KADM5_AUTH_DELETE)",
          "629:                 ret->code = KADM5_AUTH_INSUFFICIENT;",
          "631:                 ret->code = KADM5_AUTH_ADD;",
          "633:         if (ret->code == KADM5_OK) {",
          "634:             ret->code = check_lockdown_keys(handle, arg->src);",
          "635:             if (ret->code == KADM5_PROTECT_KEYS) {",
          "638:                 ret->code = KADM5_AUTH_DELETE;",
          "642:         ret->code = KADM5_AUTH_INSUFFICIENT;",
          "643:     if (ret->code != KADM5_OK) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "678:                          (int)slen, (char *)service_name.value, sdots,",
          "679:                          client_addr(rqstp->rq_xprt));",
          "680:     } else {",
          "687:         krb5_klog_syslog(LOG_NOTICE,",
          "",
          "[Removed Lines]",
          "681:         ret.code = kadm5_rename_principal((void *)handle, arg->src,",
          "682:                                           arg->dest);",
          "683:         if( ret.code != 0 )",
          "684:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "655:         ret->code = kadm5_rename_principal(handle, arg->src, arg->dest);",
          "656:         if (ret->code != 0)",
          "657:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "702: exit_func:",
          "703:     free(prime_arg1);",
          "704:     free(prime_arg2);",
          "709: }",
          "713: {",
          "716:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "717:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "719:     kadm5_server_handle_t           handle;",
          "720:     const char                      *errmsg = NULL;",
          "725:         goto exit_func;",
          "732:     funcname = \"kadm5_get_principal\";",
          "743:     if (! cmp_gss_krb5_name(handle, rqst2name(rqstp), arg->princ) &&",
          "744:         (CHANGEPW_SERVICE(rqstp) || !kadm5int_acl_check(handle->context,",
          "745:                                                         rqst2name(rqstp),",
          "746:                                                         ACL_INQUIRE,",
          "747:                                                         arg->princ,",
          "748:                                                         NULL))) {",
          "750:         log_unauth(funcname, prime_arg,",
          "751:                    &client_name, &service_name, rqstp);",
          "752:     } else {",
          "759:         log_done(funcname, prime_arg, errmsg,",
          "760:                  &client_name, &service_name, rqstp);",
          "",
          "[Removed Lines]",
          "705:     gss_release_buffer(&minor_stat, &client_name);",
          "706:     gss_release_buffer(&minor_stat, &service_name);",
          "707:     free_server_handle(handle);",
          "708:     return &ret;",
          "711: gprinc_ret *",
          "712: get_principal_2_svc(gprinc_arg *arg, struct svc_req *rqstp)",
          "714:     static gprinc_ret               ret;",
          "715:     char                            *prime_arg, *funcname;",
          "718:     OM_uint32                       minor_stat;",
          "722:     xdr_free(xdr_gprinc_ret, &ret);",
          "724:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "727:     if ((ret.code = check_handle((void *)handle)))",
          "728:         goto exit_func;",
          "730:     ret.api_version = handle->api_version;",
          "734:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "735:         ret.code = KADM5_FAILURE;",
          "736:         goto exit_func;",
          "737:     }",
          "738:     if (krb5_unparse_name(handle->context, arg->princ, &prime_arg)) {",
          "739:         ret.code = KADM5_BAD_PRINCIPAL;",
          "740:         goto exit_func;",
          "741:     }",
          "749:         ret.code = KADM5_AUTH_GET;",
          "753:         ret.code = kadm5_get_principal(handle, arg->princ, &ret.rec,",
          "754:                                        arg->mask);",
          "756:         if( ret.code != 0 )",
          "757:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "678:     stub_cleanup(handle, NULL, &client_name, &service_name);",
          "679:     return TRUE;",
          "682: bool_t",
          "683: get_principal_2_svc(gprinc_arg *arg, gprinc_ret *ret, struct svc_req *rqstp)",
          "685:     char                            *funcname, *prime_arg = NULL;",
          "691:     ret->code = stub_setup(arg->api_version, rqstp, arg->princ, &handle,",
          "692:                            &ret->api_version, &client_name, &service_name,",
          "693:                            &prime_arg);",
          "694:     if (ret->code)",
          "705:         ret->code = KADM5_AUTH_GET;",
          "709:         ret->code = kadm5_get_principal(handle, arg->princ, &ret->rec,",
          "710:                                         arg->mask);",
          "712:         if (ret->code != 0)",
          "713:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "762:         if (errmsg != NULL)",
          "763:             krb5_free_error_message(handle->context, errmsg);",
          "764:     }",
          "766: exit_func:",
          "771: }",
          "775: {",
          "778:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "779:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "781:     kadm5_server_handle_t           handle;",
          "782:     const char                      *errmsg = NULL;",
          "787:         goto exit_func;",
          "798:     prime_arg = arg->exp;",
          "799:     if (prime_arg == NULL)",
          "800:         prime_arg = \"*\";",
          "",
          "[Removed Lines]",
          "765:     free(prime_arg);",
          "767:     gss_release_buffer(&minor_stat, &client_name);",
          "768:     gss_release_buffer(&minor_stat, &service_name);",
          "769:     free_server_handle(handle);",
          "770:     return &ret;",
          "773: gprincs_ret *",
          "774: get_princs_2_svc(gprincs_arg *arg, struct svc_req *rqstp)",
          "776:     static gprincs_ret              ret;",
          "777:     char                            *prime_arg;",
          "780:     OM_uint32                       minor_stat;",
          "784:     xdr_free(xdr_gprincs_ret, &ret);",
          "786:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "789:     if ((ret.code = check_handle((void *)handle)))",
          "790:         goto exit_func;",
          "792:     ret.api_version = handle->api_version;",
          "794:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "795:         ret.code = KADM5_FAILURE;",
          "796:         goto exit_func;",
          "797:     }",
          "",
          "[Added Lines]",
          "723:     stub_cleanup(handle, prime_arg, &client_name, &service_name);",
          "724:     return TRUE;",
          "727: bool_t",
          "728: get_princs_2_svc(gprincs_arg *arg, gprincs_ret *ret, struct svc_req *rqstp)",
          "730:     char                            *prime_arg = NULL;",
          "736:     ret->code = stub_setup(arg->api_version, rqstp, NULL, &handle,",
          "737:                            &ret->api_version, &client_name, &service_name,",
          "738:                            NULL);",
          "739:     if (ret->code)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "804:                                                        ACL_LIST,",
          "805:                                                        NULL,",
          "806:                                                        NULL)) {",
          "808:         log_unauth(\"kadm5_get_principals\", prime_arg,",
          "809:                    &client_name, &service_name, rqstp);",
          "810:     } else {",
          "817:         log_done(\"kadm5_get_principals\", prime_arg, errmsg,",
          "818:                  &client_name, &service_name, rqstp);",
          "",
          "[Removed Lines]",
          "807:         ret.code = KADM5_AUTH_LIST;",
          "811:         ret.code  = kadm5_get_principals((void *)handle,",
          "812:                                          arg->exp, &ret.princs,",
          "813:                                          &ret.count);",
          "814:         if( ret.code != 0 )",
          "815:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "751:         ret->code = KADM5_AUTH_LIST;",
          "755:         ret->code = kadm5_get_principals(handle, arg->exp, &ret->princs,",
          "756:                                          &ret->count);",
          "757:         if (ret->code != 0)",
          "758:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "821:             krb5_free_error_message(handle->context, errmsg);",
          "823:     }",
          "824: exit_func:",
          "829: }",
          "833: {",
          "836:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "837:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "839:     kadm5_server_handle_t           handle;",
          "840:     const char                      *errmsg = NULL;",
          "848:         goto exit_func;",
          "864:             log_unauth(\"kadm5_chpass_principal\", prime_arg, &client_name,",
          "865:                        &service_name, rqstp);",
          "867:         }",
          "868:     } else if (cmp_gss_krb5_name(handle, rqst2name(rqstp), arg->princ)) {",
          "871:     } else if (!(CHANGEPW_SERVICE(rqstp)) &&",
          "872:                kadm5int_acl_check(handle->context, rqst2name(rqstp),",
          "873:                                   ACL_CHANGEPW, arg->princ, NULL)) {",
          "876:     } else {",
          "877:         log_unauth(\"kadm5_chpass_principal\", prime_arg,",
          "878:                    &client_name, &service_name, rqstp);",
          "880:     }",
          "886:         log_done(\"kadm5_chpass_principal\", prime_arg, errmsg,",
          "887:                  &client_name, &service_name, rqstp);",
          "",
          "[Removed Lines]",
          "825:     gss_release_buffer(&minor_stat, &client_name);",
          "826:     gss_release_buffer(&minor_stat, &service_name);",
          "827:     free_server_handle(handle);",
          "828:     return &ret;",
          "831: generic_ret *",
          "832: chpass_principal_2_svc(chpass_arg *arg, struct svc_req *rqstp)",
          "834:     static generic_ret              ret;",
          "835:     char                            *prime_arg;",
          "838:     OM_uint32                       minor_stat;",
          "842:     xdr_free(xdr_generic_ret, &ret);",
          "844:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "845:         goto exit_func;",
          "847:     if ((ret.code = check_handle((void *)handle)))",
          "850:     ret.api_version = handle->api_version;",
          "852:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "853:         ret.code = KADM5_FAILURE;",
          "854:         goto exit_func;",
          "855:     }",
          "856:     if (krb5_unparse_name(handle->context, arg->princ, &prime_arg)) {",
          "857:         ret.code = KADM5_BAD_PRINCIPAL;",
          "858:         goto exit_func;",
          "859:     }",
          "861:     ret.code = check_lockdown_keys(handle, arg->princ);",
          "862:     if (ret.code != KADM5_OK) {",
          "863:         if (ret.code == KADM5_PROTECT_KEYS) {",
          "866:             ret.code = KADM5_AUTH_CHANGEPW;",
          "869:         ret.code = chpass_principal_wrapper_3((void *)handle, arg->princ,",
          "870:                                               FALSE, 0, NULL, arg->pass);",
          "874:         ret.code = kadm5_chpass_principal((void *)handle, arg->princ,",
          "875:                                           arg->pass);",
          "879:         ret.code = KADM5_AUTH_CHANGEPW;",
          "882:     if (ret.code != KADM5_AUTH_CHANGEPW) {",
          "883:         if (ret.code != 0)",
          "884:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "769:     stub_cleanup(handle, NULL, &client_name, &service_name);",
          "770:     return TRUE;",
          "773: bool_t",
          "774: chpass_principal_2_svc(chpass_arg *arg, generic_ret *ret,",
          "775:                        struct svc_req *rqstp)",
          "777:     char                            *prime_arg = NULL;",
          "783:     ret->code = stub_setup(arg->api_version, rqstp, arg->princ, &handle,",
          "784:                            &ret->api_version, &client_name, &service_name,",
          "785:                            &prime_arg);",
          "786:     if (ret->code)",
          "789:     ret->code = check_lockdown_keys(handle, arg->princ);",
          "790:     if (ret->code != KADM5_OK) {",
          "791:         if (ret->code == KADM5_PROTECT_KEYS) {",
          "794:             ret->code = KADM5_AUTH_CHANGEPW;",
          "797:         ret->code = chpass_principal_wrapper_3(handle, arg->princ, FALSE, 0,",
          "798:                                                NULL, arg->pass);",
          "802:         ret->code = kadm5_chpass_principal(handle, arg->princ, arg->pass);",
          "806:         ret->code = KADM5_AUTH_CHANGEPW;",
          "809:     if (ret->code != KADM5_AUTH_CHANGEPW) {",
          "810:         if (ret->code != 0)",
          "811:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "890:             krb5_free_error_message(handle->context, errmsg);",
          "891:     }",
          "894: exit_func:",
          "899: }",
          "903: {",
          "906:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "907:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "909:     kadm5_server_handle_t           handle;",
          "910:     const char                      *errmsg = NULL;",
          "928:         goto exit_func;",
          "934:             log_unauth(\"kadm5_chpass_principal\", prime_arg, &client_name,",
          "935:                        &service_name, rqstp);",
          "937:         }",
          "938:     } else if (cmp_gss_krb5_name(handle, rqst2name(rqstp), arg->princ)) {",
          "944:     } else if (!(CHANGEPW_SERVICE(rqstp)) &&",
          "945:                kadm5int_acl_check(handle->context, rqst2name(rqstp),",
          "946:                                   ACL_CHANGEPW, arg->princ, NULL)) {",
          "952:     } else {",
          "953:         log_unauth(\"kadm5_chpass_principal\", prime_arg,",
          "954:                    &client_name, &service_name, rqstp);",
          "956:     }",
          "962:         log_done(\"kadm5_chpass_principal\", prime_arg, errmsg,",
          "963:                  &client_name, &service_name, rqstp);",
          "",
          "[Removed Lines]",
          "893:     free(prime_arg);",
          "895:     gss_release_buffer(&minor_stat, &client_name);",
          "896:     gss_release_buffer(&minor_stat, &service_name);",
          "897:     free_server_handle(handle);",
          "898:     return &ret;",
          "901: generic_ret *",
          "902: chpass_principal3_2_svc(chpass3_arg *arg, struct svc_req *rqstp)",
          "904:     static generic_ret              ret;",
          "905:     char                            *prime_arg;",
          "908:     OM_uint32                       minor_stat;",
          "912:     xdr_free(xdr_generic_ret, &ret);",
          "914:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "915:         goto exit_func;",
          "917:     if ((ret.code = check_handle((void *)handle)))",
          "918:         goto exit_func;",
          "920:     ret.api_version = handle->api_version;",
          "922:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "923:         ret.code = KADM5_FAILURE;",
          "924:         goto exit_func;",
          "925:     }",
          "926:     if (krb5_unparse_name(handle->context, arg->princ, &prime_arg)) {",
          "927:         ret.code = KADM5_BAD_PRINCIPAL;",
          "929:     }",
          "931:     ret.code = check_lockdown_keys(handle, arg->princ);",
          "932:     if (ret.code != KADM5_OK) {",
          "933:         if (ret.code == KADM5_PROTECT_KEYS) {",
          "936:             ret.code = KADM5_AUTH_CHANGEPW;",
          "939:         ret.code = chpass_principal_wrapper_3((void *)handle, arg->princ,",
          "940:                                               arg->keepold,",
          "941:                                               arg->n_ks_tuple,",
          "942:                                               arg->ks_tuple,",
          "943:                                               arg->pass);",
          "947:         ret.code = kadm5_chpass_principal_3((void *)handle, arg->princ,",
          "948:                                             arg->keepold,",
          "949:                                             arg->n_ks_tuple,",
          "950:                                             arg->ks_tuple,",
          "951:                                             arg->pass);",
          "955:         ret.code = KADM5_AUTH_CHANGEPW;",
          "958:     if(ret.code != KADM5_AUTH_CHANGEPW) {",
          "959:         if( ret.code != 0 )",
          "960:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "821:     stub_cleanup(handle, prime_arg, &client_name, &service_name);",
          "822:     return TRUE;",
          "825: bool_t",
          "826: chpass_principal3_2_svc(chpass3_arg *arg, generic_ret *ret,",
          "827:                         struct svc_req *rqstp)",
          "829:     char                            *prime_arg = NULL;",
          "835:     ret->code = stub_setup(arg->api_version, rqstp, arg->princ, &handle,",
          "836:                            &ret->api_version, &client_name, &service_name,",
          "837:                            &prime_arg);",
          "838:     if (ret->code)",
          "841:     ret->code = check_lockdown_keys(handle, arg->princ);",
          "842:     if (ret->code != KADM5_OK) {",
          "843:         if (ret->code == KADM5_PROTECT_KEYS) {",
          "846:             ret->code = KADM5_AUTH_CHANGEPW;",
          "849:         ret->code = chpass_principal_wrapper_3(handle, arg->princ,",
          "850:                                                arg->keepold, arg->n_ks_tuple,",
          "851:                                                arg->ks_tuple, arg->pass);",
          "855:         ret->code = kadm5_chpass_principal_3(handle, arg->princ, arg->keepold,",
          "856:                                              arg->n_ks_tuple, arg->ks_tuple,",
          "857:                                              arg->pass);",
          "861:         ret->code = KADM5_AUTH_CHANGEPW;",
          "864:     if (ret->code != KADM5_AUTH_CHANGEPW) {",
          "865:         if (ret->code != 0)",
          "866:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "966:             krb5_free_error_message(handle->context, errmsg);",
          "967:     }",
          "970: exit_func:",
          "975: }",
          "979: {",
          "982:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "983:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "985:     kadm5_server_handle_t           handle;",
          "986:     const char                      *errmsg = NULL;",
          "1004:         goto exit_func;",
          "1010:             log_unauth(\"kadm5_setv4key_principal\", prime_arg, &client_name,",
          "1011:                        &service_name, rqstp);",
          "1013:         }",
          "1014:     } else if (!(CHANGEPW_SERVICE(rqstp)) &&",
          "1015:         kadm5int_acl_check(handle->context, rqst2name(rqstp),",
          "1016:                            ACL_SETKEY, arg->princ, NULL)) {",
          "1019:     } else {",
          "1020:         log_unauth(\"kadm5_setv4key_principal\", prime_arg,",
          "1021:                    &client_name, &service_name, rqstp);",
          "1023:     }",
          "1029:         log_done(\"kadm5_setv4key_principal\", prime_arg, errmsg,",
          "1030:                  &client_name, &service_name, rqstp);",
          "",
          "[Removed Lines]",
          "969:     free(prime_arg);",
          "971:     gss_release_buffer(&minor_stat, &client_name);",
          "972:     gss_release_buffer(&minor_stat, &service_name);",
          "973:     free_server_handle(handle);",
          "974:     return &ret;",
          "977: generic_ret *",
          "978: setv4key_principal_2_svc(setv4key_arg *arg, struct svc_req *rqstp)",
          "980:     static generic_ret              ret;",
          "981:     char                            *prime_arg;",
          "984:     OM_uint32                       minor_stat;",
          "988:     xdr_free(xdr_generic_ret, &ret);",
          "990:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "991:         goto exit_func;",
          "993:     if ((ret.code = check_handle((void *)handle)))",
          "994:         goto exit_func;",
          "996:     ret.api_version = handle->api_version;",
          "998:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "999:         ret.code = KADM5_FAILURE;",
          "1000:         goto exit_func;",
          "1001:     }",
          "1002:     if (krb5_unparse_name(handle->context, arg->princ, &prime_arg)) {",
          "1003:         ret.code = KADM5_BAD_PRINCIPAL;",
          "1005:     }",
          "1007:     ret.code = check_lockdown_keys(handle, arg->princ);",
          "1008:     if (ret.code != KADM5_OK) {",
          "1009:         if (ret.code == KADM5_PROTECT_KEYS) {",
          "1012:             ret.code = KADM5_AUTH_SETKEY;",
          "1017:         ret.code = kadm5_setv4key_principal((void *)handle, arg->princ,",
          "1018:                                             arg->keyblock);",
          "1022:         ret.code = KADM5_AUTH_SETKEY;",
          "1025:     if(ret.code != KADM5_AUTH_SETKEY) {",
          "1026:         if( ret.code != 0 )",
          "1027:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "876:     stub_cleanup(handle, prime_arg, &client_name, &service_name);",
          "877:     return TRUE;",
          "880: bool_t",
          "881: setv4key_principal_2_svc(setv4key_arg *arg, generic_ret *ret,",
          "882:                          struct svc_req *rqstp)",
          "884:     char                            *prime_arg = NULL;",
          "890:     ret->code = stub_setup(arg->api_version, rqstp, arg->princ, &handle,",
          "891:                            &ret->api_version, &client_name, &service_name,",
          "892:                            &prime_arg);",
          "893:     if (ret->code)",
          "896:     ret->code = check_lockdown_keys(handle, arg->princ);",
          "897:     if (ret->code != KADM5_OK) {",
          "898:         if (ret->code == KADM5_PROTECT_KEYS) {",
          "901:             ret->code = KADM5_AUTH_SETKEY;",
          "906:         ret->code = kadm5_setv4key_principal(handle, arg->princ,",
          "907:                                              arg->keyblock);",
          "911:         ret->code = KADM5_AUTH_SETKEY;",
          "914:     if (ret->code != KADM5_AUTH_SETKEY) {",
          "915:         if (ret->code != 0)",
          "916:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1033:             krb5_free_error_message(handle->context, errmsg);",
          "1034:     }",
          "1037: exit_func:",
          "1042: }",
          "1046: {",
          "1049:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1050:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "1052:     kadm5_server_handle_t           handle;",
          "1053:     const char                      *errmsg = NULL;",
          "1071:         goto exit_func;",
          "1077:             log_unauth(\"kadm5_setkey_principal\", prime_arg, &client_name,",
          "1078:                        &service_name, rqstp);",
          "1080:         }",
          "1081:     } else if (!(CHANGEPW_SERVICE(rqstp)) &&",
          "1082:         kadm5int_acl_check(handle->context, rqst2name(rqstp),",
          "1083:                            ACL_SETKEY, arg->princ, NULL)) {",
          "1086:     } else {",
          "1087:         log_unauth(\"kadm5_setkey_principal\", prime_arg,",
          "1088:                    &client_name, &service_name, rqstp);",
          "1090:     }",
          "1096:         log_done(\"kadm5_setkey_principal\", prime_arg, errmsg,",
          "1097:                  &client_name, &service_name, rqstp);",
          "",
          "[Removed Lines]",
          "1036:     free(prime_arg);",
          "1038:     gss_release_buffer(&minor_stat, &client_name);",
          "1039:     gss_release_buffer(&minor_stat, &service_name);",
          "1040:     free_server_handle(handle);",
          "1041:     return &ret;",
          "1044: generic_ret *",
          "1045: setkey_principal_2_svc(setkey_arg *arg, struct svc_req *rqstp)",
          "1047:     static generic_ret              ret;",
          "1048:     char                            *prime_arg;",
          "1051:     OM_uint32                       minor_stat;",
          "1055:     xdr_free(xdr_generic_ret, &ret);",
          "1057:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "1058:         goto exit_func;",
          "1060:     if ((ret.code = check_handle((void *)handle)))",
          "1061:         goto exit_func;",
          "1063:     ret.api_version = handle->api_version;",
          "1065:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "1066:         ret.code = KADM5_FAILURE;",
          "1067:         goto exit_func;",
          "1068:     }",
          "1069:     if (krb5_unparse_name(handle->context, arg->princ, &prime_arg)) {",
          "1070:         ret.code = KADM5_BAD_PRINCIPAL;",
          "1072:     }",
          "1074:     ret.code = check_lockdown_keys(handle, arg->princ);",
          "1075:     if (ret.code != KADM5_OK) {",
          "1076:         if (ret.code == KADM5_PROTECT_KEYS) {",
          "1079:             ret.code = KADM5_AUTH_SETKEY;",
          "1084:         ret.code = kadm5_setkey_principal((void *)handle, arg->princ,",
          "1085:                                           arg->keyblocks, arg->n_keys);",
          "1089:         ret.code = KADM5_AUTH_SETKEY;",
          "1092:     if(ret.code != KADM5_AUTH_SETKEY) {",
          "1093:         if( ret.code != 0 )",
          "1094:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "926:     stub_cleanup(handle, prime_arg, &client_name, &service_name);",
          "927:     return TRUE;",
          "931: bool_t",
          "932: setkey_principal_2_svc(setkey_arg *arg, generic_ret *ret,",
          "933:                        struct svc_req *rqstp)",
          "935:     char                            *prime_arg = NULL;",
          "941:     ret->code = stub_setup(arg->api_version, rqstp, arg->princ, &handle,",
          "942:                            &ret->api_version, &client_name, &service_name,",
          "943:                            &prime_arg);",
          "944:     if (ret->code)",
          "947:     ret->code = check_lockdown_keys(handle, arg->princ);",
          "948:     if (ret->code != KADM5_OK) {",
          "949:         if (ret->code == KADM5_PROTECT_KEYS) {",
          "952:             ret->code = KADM5_AUTH_SETKEY;",
          "957:         ret->code = kadm5_setkey_principal(handle, arg->princ, arg->keyblocks,",
          "958:                                            arg->n_keys);",
          "962:         ret->code = KADM5_AUTH_SETKEY;",
          "965:     if (ret->code != KADM5_AUTH_SETKEY) {",
          "966:         if (ret->code != 0)",
          "967:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1100:             krb5_free_error_message(handle->context, errmsg);",
          "1101:     }",
          "1104: exit_func:",
          "1109: }",
          "1113: {",
          "1116:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1117:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "1119:     kadm5_server_handle_t           handle;",
          "1120:     const char                      *errmsg = NULL;",
          "1134:         goto exit_func;",
          "1144:             log_unauth(\"kadm5_setkey_principal\", prime_arg, &client_name,",
          "1145:                        &service_name, rqstp);",
          "1147:         }",
          "1148:     } else if (!(CHANGEPW_SERVICE(rqstp)) &&",
          "1149:         kadm5int_acl_check(handle->context, rqst2name(rqstp),",
          "1150:                            ACL_SETKEY, arg->princ, NULL)) {",
          "1156:     } else {",
          "1157:         log_unauth(\"kadm5_setkey_principal\", prime_arg,",
          "1158:                    &client_name, &service_name, rqstp);",
          "1160:     }",
          "1166:         log_done(\"kadm5_setkey_principal\", prime_arg, errmsg,",
          "1167:                  &client_name, &service_name, rqstp);",
          "",
          "[Removed Lines]",
          "1103:     free(prime_arg);",
          "1105:     gss_release_buffer(&minor_stat, &client_name);",
          "1106:     gss_release_buffer(&minor_stat, &service_name);",
          "1107:     free_server_handle(handle);",
          "1108:     return &ret;",
          "1111: generic_ret *",
          "1112: setkey_principal3_2_svc(setkey3_arg *arg, struct svc_req *rqstp)",
          "1114:     static generic_ret              ret;",
          "1115:     char                            *prime_arg;",
          "1118:     OM_uint32                       minor_stat;",
          "1122:     xdr_free(xdr_generic_ret, &ret);",
          "1124:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "1125:         goto exit_func;",
          "1127:     if ((ret.code = check_handle((void *)handle)))",
          "1128:         goto exit_func;",
          "1130:     ret.api_version = handle->api_version;",
          "1132:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "1133:         ret.code = KADM5_FAILURE;",
          "1135:     }",
          "1136:     if (krb5_unparse_name(handle->context, arg->princ, &prime_arg)) {",
          "1137:         ret.code = KADM5_BAD_PRINCIPAL;",
          "1138:         goto exit_func;",
          "1139:     }",
          "1141:     ret.code = check_lockdown_keys(handle, arg->princ);",
          "1142:     if (ret.code != KADM5_OK) {",
          "1143:         if (ret.code == KADM5_PROTECT_KEYS) {",
          "1146:             ret.code = KADM5_AUTH_SETKEY;",
          "1151:         ret.code = kadm5_setkey_principal_3((void *)handle, arg->princ,",
          "1152:                                             arg->keepold,",
          "1153:                                             arg->n_ks_tuple,",
          "1154:                                             arg->ks_tuple,",
          "1155:                                             arg->keyblocks, arg->n_keys);",
          "1159:         ret.code = KADM5_AUTH_SETKEY;",
          "1162:     if(ret.code != KADM5_AUTH_SETKEY) {",
          "1163:         if( ret.code != 0 )",
          "1164:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "977:     stub_cleanup(handle, prime_arg, &client_name, &service_name);",
          "978:     return TRUE;",
          "981: bool_t",
          "982: setkey_principal3_2_svc(setkey3_arg *arg, generic_ret *ret,",
          "983:                         struct svc_req *rqstp)",
          "985:     char                            *prime_arg = NULL;",
          "991:     ret->code = stub_setup(arg->api_version, rqstp, arg->princ, &handle,",
          "992:                            &ret->api_version, &client_name, &service_name,",
          "993:                            &prime_arg);",
          "994:     if (ret->code)",
          "997:     ret->code = check_lockdown_keys(handle, arg->princ);",
          "998:     if (ret->code != KADM5_OK) {",
          "999:         if (ret->code == KADM5_PROTECT_KEYS) {",
          "1002:             ret->code = KADM5_AUTH_SETKEY;",
          "1007:         ret->code = kadm5_setkey_principal_3(handle, arg->princ, arg->keepold,",
          "1008:                                              arg->n_ks_tuple, arg->ks_tuple,",
          "1009:                                              arg->keyblocks, arg->n_keys);",
          "1013:         ret->code = KADM5_AUTH_SETKEY;",
          "1016:     if (ret->code != KADM5_AUTH_SETKEY) {",
          "1017:         if (ret->code != 0)",
          "1018:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1170:             krb5_free_error_message(handle->context, errmsg);",
          "1171:     }",
          "1174: exit_func:",
          "1179: }",
          "1183: {",
          "1186:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1187:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "1189:     kadm5_server_handle_t           handle;",
          "1190:     const char                      *errmsg = NULL;",
          "1198:         goto exit_func;",
          "1214:             log_unauth(\"kadm5_setkey_principal\", prime_arg, &client_name,",
          "1215:                        &service_name, rqstp);",
          "1217:         }",
          "1218:     } else if (!(CHANGEPW_SERVICE(rqstp)) &&",
          "1224:     } else {",
          "1225:         log_unauth(\"kadm5_setkey_principal\", prime_arg, &client_name,",
          "1226:                    &service_name, rqstp);",
          "1228:     }",
          "1234:         log_done(\"kadm5_setkey_principal\", prime_arg, errmsg, &client_name,",
          "1235:                  &service_name, rqstp);",
          "",
          "[Removed Lines]",
          "1173:     free(prime_arg);",
          "1175:     gss_release_buffer(&minor_stat, &client_name);",
          "1176:     gss_release_buffer(&minor_stat, &service_name);",
          "1177:     free_server_handle(handle);",
          "1178:     return &ret;",
          "1181: generic_ret *",
          "1182: setkey_principal4_2_svc(setkey4_arg *arg, struct svc_req *rqstp)",
          "1184:     static generic_ret              ret;",
          "1185:     char                            *prime_arg;",
          "1188:     OM_uint32                       minor_stat;",
          "1192:     xdr_free(xdr_generic_ret, &ret);",
          "1194:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "1195:         goto exit_func;",
          "1197:     if ((ret.code = check_handle((void *)handle)))",
          "1200:     ret.api_version = handle->api_version;",
          "1202:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "1203:         ret.code = KADM5_FAILURE;",
          "1204:         goto exit_func;",
          "1205:     }",
          "1206:     if (krb5_unparse_name(handle->context, arg->princ, &prime_arg)) {",
          "1207:         ret.code = KADM5_BAD_PRINCIPAL;",
          "1208:         goto exit_func;",
          "1209:     }",
          "1211:     ret.code = check_lockdown_keys(handle, arg->princ);",
          "1212:     if (ret.code != KADM5_OK) {",
          "1213:         if (ret.code == KADM5_PROTECT_KEYS) {",
          "1216:             ret.code = KADM5_AUTH_SETKEY;",
          "1219:         kadm5int_acl_check(handle->context, rqst2name(rqstp), ACL_SETKEY,",
          "1220:                            arg->princ, NULL)) {",
          "1221:         ret.code = kadm5_setkey_principal_4((void *)handle, arg->princ,",
          "1222:                                             arg->keepold, arg->key_data,",
          "1223:                                             arg->n_key_data);",
          "1227:         ret.code = KADM5_AUTH_SETKEY;",
          "1230:     if (ret.code != KADM5_AUTH_SETKEY) {",
          "1231:         if (ret.code != 0)",
          "1232:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "1028:     stub_cleanup(handle, prime_arg, &client_name, &service_name);",
          "1029:     return TRUE;",
          "1032: bool_t",
          "1033: setkey_principal4_2_svc(setkey4_arg *arg, generic_ret *ret,",
          "1034:                         struct svc_req *rqstp)",
          "1036:     char                            *prime_arg = NULL;",
          "1042:     ret->code = stub_setup(arg->api_version, rqstp, arg->princ, &handle,",
          "1043:                            &ret->api_version, &client_name, &service_name,",
          "1044:                            &prime_arg);",
          "1045:     if (ret->code)",
          "1048:     ret->code = check_lockdown_keys(handle, arg->princ);",
          "1049:     if (ret->code != KADM5_OK) {",
          "1050:         if (ret->code == KADM5_PROTECT_KEYS) {",
          "1053:             ret->code = KADM5_AUTH_SETKEY;",
          "1056:         kadm5int_acl_check(handle->context, rqst2name(rqstp),",
          "1057:                            ACL_SETKEY, arg->princ, NULL)) {",
          "1058:         ret->code = kadm5_setkey_principal_4(handle, arg->princ, arg->keepold,",
          "1059:                                              arg->key_data, arg->n_key_data);",
          "1063:         ret->code = KADM5_AUTH_SETKEY;",
          "1066:     if (ret->code != KADM5_AUTH_SETKEY) {",
          "1067:         if (ret->code != 0)",
          "1068:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1238:             krb5_free_error_message(handle->context, errmsg);",
          "1239:     }",
          "1242: exit_func:",
          "1247: }",
          "",
          "[Removed Lines]",
          "1241:     free(prime_arg);",
          "1243:     gss_release_buffer(&minor_stat, &client_name);",
          "1244:     gss_release_buffer(&minor_stat, &service_name);",
          "1245:     free_server_handle(handle);",
          "1246:     return &ret;",
          "",
          "[Added Lines]",
          "1078:     stub_cleanup(handle, prime_arg, &client_name, &service_name);",
          "1079:     return TRUE;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1267:     return (ret == KADM5_PROTECT_KEYS) ? KADM5_OK : ret;",
          "1268: }",
          "1272: {",
          "1277:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
          "1278:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
          "1280:     kadm5_server_handle_t       handle;",
          "1281:     const char                  *errmsg = NULL;",
          "1286:         goto exit_func;",
          "1294:     funcname = \"kadm5_randkey_principal\";",
          "1305:     if (cmp_gss_krb5_name(handle, rqst2name(rqstp), arg->princ)) {",
          "1308:     } else if (!(CHANGEPW_SERVICE(rqstp)) &&",
          "1309:                kadm5int_acl_check(handle->context, rqst2name(rqstp),",
          "1310:                                   ACL_CHANGEPW, arg->princ, NULL)) {",
          "1313:     } else {",
          "1314:         log_unauth(funcname, prime_arg,",
          "1315:                    &client_name, &service_name, rqstp);",
          "1317:     }",
          "1323:     }",
          "1329:         log_done(funcname, prime_arg, errmsg,",
          "1330:                  &client_name, &service_name, rqstp);",
          "",
          "[Removed Lines]",
          "1270: chrand_ret *",
          "1271: chrand_principal_2_svc(chrand_arg *arg, struct svc_req *rqstp)",
          "1273:     static chrand_ret           ret;",
          "1274:     krb5_keyblock               *k;",
          "1275:     int                         nkeys;",
          "1276:     char                        *prime_arg, *funcname;",
          "1279:     OM_uint32                   minor_stat;",
          "1283:     xdr_free(xdr_chrand_ret, &ret);",
          "1285:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "1289:     if ((ret.code = check_handle((void *)handle)))",
          "1290:         goto exit_func;",
          "1292:     ret.api_version = handle->api_version;",
          "1296:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "1297:         ret.code = KADM5_FAILURE;",
          "1298:         goto exit_func;",
          "1299:     }",
          "1300:     if (krb5_unparse_name(handle->context, arg->princ, &prime_arg)) {",
          "1301:         ret.code = KADM5_BAD_PRINCIPAL;",
          "1302:         goto exit_func;",
          "1303:     }",
          "1306:         ret.code = randkey_principal_wrapper_3((void *)handle, arg->princ,",
          "1307:                                                FALSE, 0, NULL, &k, &nkeys);",
          "1311:         ret.code = kadm5_randkey_principal((void *)handle, arg->princ,",
          "1312:                                            &k, &nkeys);",
          "1316:         ret.code = KADM5_AUTH_CHANGEPW;",
          "1319:     if(ret.code == KADM5_OK) {",
          "1320:         ret.code = chrand_check_lockdown(handle, arg->princ, &k, &nkeys);",
          "1321:         ret.keys = k;",
          "1322:         ret.n_keys = nkeys;",
          "1325:     if(ret.code != KADM5_AUTH_CHANGEPW) {",
          "1326:         if( ret.code != 0 )",
          "1327:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "1103: bool_t",
          "1104: chrand_principal_2_svc(chrand_arg *arg, chrand_ret *ret, struct svc_req *rqstp)",
          "1106:     char                        *funcname, *prime_arg = NULL;",
          "1109:     krb5_keyblock               *k;",
          "1110:     int                         nkeys;",
          "1114:     ret->code = stub_setup(arg->api_version, rqstp, arg->princ, &handle,",
          "1115:                            &ret->api_version, &client_name, &service_name,",
          "1116:                            &prime_arg);",
          "1117:     if (ret->code)",
          "1123:         ret->code = randkey_principal_wrapper_3(handle, arg->princ, FALSE, 0,",
          "1124:                                                 NULL, &k, &nkeys);",
          "1128:         ret->code = kadm5_randkey_principal(handle, arg->princ, &k, &nkeys);",
          "1132:         ret->code = KADM5_AUTH_CHANGEPW;",
          "1135:     if (ret->code == KADM5_OK) {",
          "1136:         ret->code = chrand_check_lockdown(handle, arg->princ, &k, &nkeys);",
          "1137:         if (ret->code == KADM5_PROTECT_KEYS)",
          "1138:             ret->code = KADM5_OK;",
          "1139:         ret->keys = k;",
          "1140:         ret->n_keys = nkeys;",
          "1143:     if (ret->code != KADM5_AUTH_CHANGEPW) {",
          "1144:         if (ret->code != 0)",
          "1145:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1332:         if (errmsg != NULL)",
          "1333:             krb5_free_error_message(handle->context, errmsg);",
          "1334:     }",
          "1336: exit_func:",
          "1341: }",
          "1345: {",
          "1350:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
          "1351:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
          "1353:     kadm5_server_handle_t       handle;",
          "1354:     const char                  *errmsg = NULL;",
          "1362:         goto exit_func;",
          "1366:     funcname = \"kadm5_randkey_principal\";",
          "1377:     if (cmp_gss_krb5_name(handle, rqst2name(rqstp), arg->princ)) {",
          "1383:     } else if (!(CHANGEPW_SERVICE(rqstp)) &&",
          "1384:                kadm5int_acl_check(handle->context, rqst2name(rqstp),",
          "1385:                                   ACL_CHANGEPW, arg->princ, NULL)) {",
          "1391:     } else {",
          "1392:         log_unauth(funcname, prime_arg,",
          "1393:                    &client_name, &service_name, rqstp);",
          "1395:     }",
          "1401:     }",
          "1407:         log_done(funcname, prime_arg, errmsg,",
          "1408:                  &client_name, &service_name, rqstp);",
          "",
          "[Removed Lines]",
          "1335:     free(prime_arg);",
          "1337:     gss_release_buffer(&minor_stat, &client_name);",
          "1338:     gss_release_buffer(&minor_stat, &service_name);",
          "1339:     free_server_handle(handle);",
          "1340:     return &ret;",
          "1343: chrand_ret *",
          "1344: chrand_principal3_2_svc(chrand3_arg *arg, struct svc_req *rqstp)",
          "1346:     static chrand_ret           ret;",
          "1347:     krb5_keyblock               *k;",
          "1348:     int                         nkeys;",
          "1349:     char                        *prime_arg, *funcname;",
          "1352:     OM_uint32                   minor_stat;",
          "1356:     xdr_free(xdr_chrand_ret, &ret);",
          "1358:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "1359:         goto exit_func;",
          "1361:     if ((ret.code = check_handle((void *)handle)))",
          "1364:     ret.api_version = handle->api_version;",
          "1368:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "1369:         ret.code = KADM5_FAILURE;",
          "1370:         goto exit_func;",
          "1371:     }",
          "1372:     if (krb5_unparse_name(handle->context, arg->princ, &prime_arg)) {",
          "1373:         ret.code = KADM5_BAD_PRINCIPAL;",
          "1374:         goto exit_func;",
          "1375:     }",
          "1378:         ret.code = randkey_principal_wrapper_3((void *)handle, arg->princ,",
          "1379:                                                arg->keepold,",
          "1380:                                                arg->n_ks_tuple,",
          "1381:                                                arg->ks_tuple,",
          "1382:                                                &k, &nkeys);",
          "1386:         ret.code = kadm5_randkey_principal_3((void *)handle, arg->princ,",
          "1387:                                              arg->keepold,",
          "1388:                                              arg->n_ks_tuple,",
          "1389:                                              arg->ks_tuple,",
          "1390:                                              &k, &nkeys);",
          "1394:         ret.code = KADM5_AUTH_CHANGEPW;",
          "1397:     if(ret.code == KADM5_OK) {",
          "1398:         ret.code = chrand_check_lockdown(handle, arg->princ, &k, &nkeys);",
          "1399:         ret.keys = k;",
          "1400:         ret.n_keys = nkeys;",
          "1403:     if(ret.code != KADM5_AUTH_CHANGEPW) {",
          "1404:         if( ret.code != 0 )",
          "1405:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "1155:     stub_cleanup(handle, prime_arg, &client_name, &service_name);",
          "1156:     return TRUE;",
          "1159: bool_t",
          "1160: chrand_principal3_2_svc(chrand3_arg *arg, chrand_ret *ret,",
          "1161:                         struct svc_req *rqstp)",
          "1163:     char                        *funcname, *prime_arg = NULL;",
          "1166:     krb5_keyblock               *k;",
          "1167:     int                         nkeys;",
          "1171:     ret->code = stub_setup(arg->api_version, rqstp, arg->princ, &handle,",
          "1172:                            &ret->api_version, &client_name, &service_name,",
          "1173:                            &prime_arg);",
          "1174:     if (ret->code)",
          "1180:         ret->code = randkey_principal_wrapper_3(handle, arg->princ,",
          "1181:                                                 arg->keepold, arg->n_ks_tuple,",
          "1182:                                                 arg->ks_tuple, &k, &nkeys);",
          "1186:         ret->code = kadm5_randkey_principal_3(handle, arg->princ, arg->keepold,",
          "1187:                                               arg->n_ks_tuple, arg->ks_tuple,",
          "1188:                                               &k, &nkeys);",
          "1192:         ret->code = KADM5_AUTH_CHANGEPW;",
          "1195:     if (ret->code == KADM5_OK) {",
          "1196:         ret->code = chrand_check_lockdown(handle, arg->princ, &k, &nkeys);",
          "1197:         if (ret->code == KADM5_PROTECT_KEYS)",
          "1198:             ret->code = KADM5_OK;",
          "1199:         ret->keys = k;",
          "1200:         ret->n_keys = nkeys;",
          "1203:     if (ret->code != KADM5_AUTH_CHANGEPW) {",
          "1204:         if (ret->code != 0)",
          "1205:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1410:         if (errmsg != NULL)",
          "1411:             krb5_free_error_message(handle->context, errmsg);",
          "1412:     }",
          "1414: exit_func:",
          "1419: }",
          "1423: {",
          "1426:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1427:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "1429:     kadm5_server_handle_t           handle;",
          "1430:     const char                      *errmsg = NULL;",
          "1435:         goto exit_func;",
          "1446:     prime_arg = arg->rec.policy;",
          "1448:     if (CHANGEPW_SERVICE(rqstp) || !kadm5int_acl_check(handle->context,",
          "1449:                                                        rqst2name(rqstp),",
          "1450:                                                        ACL_ADD, NULL, NULL)) {",
          "1452:         log_unauth(\"kadm5_create_policy\", prime_arg,",
          "1453:                    &client_name, &service_name, rqstp);",
          "1455:     } else {",
          "1461:         log_done(\"kadm5_create_policy\",",
          "1462:                  ((prime_arg == NULL) ? \"(null)\" : prime_arg), errmsg,",
          "",
          "[Removed Lines]",
          "1413:     free(prime_arg);",
          "1415:     gss_release_buffer(&minor_stat, &client_name);",
          "1416:     gss_release_buffer(&minor_stat, &service_name);",
          "1417:     free_server_handle(handle);",
          "1418:     return &ret;",
          "1421: generic_ret *",
          "1422: create_policy_2_svc(cpol_arg *arg, struct svc_req *rqstp)",
          "1424:     static generic_ret              ret;",
          "1425:     char                            *prime_arg;",
          "1428:     OM_uint32                       minor_stat;",
          "1432:     xdr_free(xdr_generic_ret, &ret);",
          "1434:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "1437:     if ((ret.code = check_handle((void *)handle)))",
          "1438:         goto exit_func;",
          "1440:     ret.api_version = handle->api_version;",
          "1442:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "1443:         ret.code = KADM5_FAILURE;",
          "1444:         goto exit_func;",
          "1445:     }",
          "1451:         ret.code = KADM5_AUTH_ADD;",
          "1456:         ret.code = kadm5_create_policy((void *)handle, &arg->rec,",
          "1457:                                        arg->mask);",
          "1458:         if( ret.code != 0 )",
          "1459:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "1215:     stub_cleanup(handle, prime_arg, &client_name, &service_name);",
          "1216:     return TRUE;",
          "1219: bool_t",
          "1220: create_policy_2_svc(cpol_arg *arg, generic_ret *ret, struct svc_req *rqstp)",
          "1222:     char                            *prime_arg = NULL;",
          "1228:     ret->code = stub_setup(arg->api_version, rqstp, NULL, &handle,",
          "1229:                            &ret->api_version, &client_name, &service_name,",
          "1230:                            NULL);",
          "1231:     if (ret->code)",
          "1239:         ret->code = KADM5_AUTH_ADD;",
          "1244:         ret->code = kadm5_create_policy(handle, &arg->rec, arg->mask);",
          "1245:         if (ret->code != 0)",
          "1246:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1465:         if (errmsg != NULL)",
          "1466:             krb5_free_error_message(handle->context, errmsg);",
          "1467:     }",
          "1468: exit_func:",
          "1473: }",
          "1477: {",
          "1480:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1481:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "1483:     kadm5_server_handle_t           handle;",
          "1484:     const char                      *errmsg = NULL;",
          "1489:         goto exit_func;",
          "1500:     prime_arg = arg->name;",
          "1502:     if (CHANGEPW_SERVICE(rqstp) || !kadm5int_acl_check(handle->context,",
          "",
          "[Removed Lines]",
          "1469:     gss_release_buffer(&minor_stat, &client_name);",
          "1470:     gss_release_buffer(&minor_stat, &service_name);",
          "1471:     free_server_handle(handle);",
          "1472:     return &ret;",
          "1475: generic_ret *",
          "1476: delete_policy_2_svc(dpol_arg *arg, struct svc_req *rqstp)",
          "1478:     static generic_ret              ret;",
          "1479:     char                            *prime_arg;",
          "1482:     OM_uint32                       minor_stat;",
          "1486:     xdr_free(xdr_generic_ret, &ret);",
          "1488:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "1491:     if ((ret.code = check_handle((void *)handle)))",
          "1492:         goto exit_func;",
          "1494:     ret.api_version = handle->api_version;",
          "1496:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "1497:         ret.code = KADM5_FAILURE;",
          "1498:         goto exit_func;",
          "1499:     }",
          "",
          "[Added Lines]",
          "1257:     stub_cleanup(handle, NULL, &client_name, &service_name);",
          "1258:     return TRUE;",
          "1261: bool_t",
          "1262: delete_policy_2_svc(dpol_arg *arg, generic_ret *ret, struct svc_req *rqstp)",
          "1264:     char                            *prime_arg = NULL;",
          "1270:     ret->code = stub_setup(arg->api_version, rqstp, NULL, &handle,",
          "1271:                            &ret->api_version, &client_name, &service_name,",
          "1272:                            NULL);",
          "1273:     if (ret->code)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1504:                                                        ACL_DELETE, NULL, NULL)) {",
          "1505:         log_unauth(\"kadm5_delete_policy\", prime_arg,",
          "1506:                    &client_name, &service_name, rqstp);",
          "1508:     } else {",
          "1513:         log_done(\"kadm5_delete_policy\",",
          "1514:                  ((prime_arg == NULL) ? \"(null)\" : prime_arg), errmsg,",
          "",
          "[Removed Lines]",
          "1507:         ret.code = KADM5_AUTH_DELETE;",
          "1509:         ret.code = kadm5_delete_policy((void *)handle, arg->name);",
          "1510:         if( ret.code != 0 )",
          "1511:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "1283:         ret->code = KADM5_AUTH_DELETE;",
          "1285:         ret->code = kadm5_delete_policy(handle, arg->name);",
          "1286:         if (ret->code != 0)",
          "1287:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1517:         if (errmsg != NULL)",
          "1518:             krb5_free_error_message(handle->context, errmsg);",
          "1519:     }",
          "1520: exit_func:",
          "1525: }",
          "1529: {",
          "1532:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1533:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "1535:     kadm5_server_handle_t           handle;",
          "1536:     const char                      *errmsg = NULL;",
          "1544:         goto exit_func;",
          "1552:     prime_arg = arg->rec.policy;",
          "1554:     if (CHANGEPW_SERVICE(rqstp) || !kadm5int_acl_check(handle->context,",
          "",
          "[Removed Lines]",
          "1521:     gss_release_buffer(&minor_stat, &client_name);",
          "1522:     gss_release_buffer(&minor_stat, &service_name);",
          "1523:     free_server_handle(handle);",
          "1524:     return &ret;",
          "1527: generic_ret *",
          "1528: modify_policy_2_svc(mpol_arg *arg, struct svc_req *rqstp)",
          "1530:     static generic_ret              ret;",
          "1531:     char                            *prime_arg;",
          "1534:     OM_uint32                       minor_stat;",
          "1538:     xdr_free(xdr_generic_ret, &ret);",
          "1540:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "1541:         goto exit_func;",
          "1543:     if ((ret.code = check_handle((void *)handle)))",
          "1546:     ret.api_version = handle->api_version;",
          "1548:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "1549:         ret.code = KADM5_FAILURE;",
          "1550:         goto exit_func;",
          "1551:     }",
          "",
          "[Added Lines]",
          "1298:     stub_cleanup(handle, NULL, &client_name, &service_name);",
          "1299:     return TRUE;",
          "1302: bool_t",
          "1303: modify_policy_2_svc(mpol_arg *arg, generic_ret *ret, struct svc_req *rqstp)",
          "1305:     char                            *prime_arg = NULL;",
          "1311:     ret->code = stub_setup(arg->api_version, rqstp, NULL, &handle,",
          "1312:                            &ret->api_version, &client_name, &service_name,",
          "1313:                            NULL);",
          "1314:     if (ret->code)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1556:                                                        ACL_MODIFY, NULL, NULL)) {",
          "1557:         log_unauth(\"kadm5_modify_policy\", prime_arg,",
          "1558:                    &client_name, &service_name, rqstp);",
          "1560:     } else {",
          "1566:         log_done(\"kadm5_modify_policy\",",
          "1567:                  ((prime_arg == NULL) ? \"(null)\" : prime_arg), errmsg,",
          "",
          "[Removed Lines]",
          "1559:         ret.code = KADM5_AUTH_MODIFY;",
          "1561:         ret.code = kadm5_modify_policy((void *)handle, &arg->rec,",
          "1562:                                        arg->mask);",
          "1563:         if( ret.code != 0 )",
          "1564:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "1324:         ret->code = KADM5_AUTH_MODIFY;",
          "1326:         ret->code = kadm5_modify_policy(handle, &arg->rec, arg->mask);",
          "1327:         if (ret->code != 0)",
          "1328:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1570:         if (errmsg != NULL)",
          "1571:             krb5_free_error_message(handle->context, errmsg);",
          "1572:     }",
          "1573: exit_func:",
          "1578: }",
          "1582: {",
          "1586:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
          "1587:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
          "1589:     kadm5_principal_ent_rec     caller_ent;",
          "1590:     kadm5_server_handle_t       handle;",
          "1591:     const char                  *errmsg = NULL;",
          "1596:         goto exit_func;",
          "1603:     funcname = \"kadm5_get_policy\";",
          "1609:     prime_arg = arg->name;",
          "1612:     if (!CHANGEPW_SERVICE(rqstp) && kadm5int_acl_check(handle->context,",
          "1613:                                                        rqst2name(rqstp),",
          "1614:                                                        ACL_INQUIRE, NULL, NULL))",
          "1616:     else {",
          "1622:             if (caller_ent.aux_attributes & KADM5_POLICY &&",
          "1623:                 strcmp(caller_ent.policy, arg->name) == 0) {",
          "1626:             ret2 = kadm5_free_principal_ent(handle->lhandle,",
          "1627:                                             &caller_ent);",
          "1629:         }",
          "1630:     }",
          "1638:         log_done(funcname,",
          "1639:                  ((prime_arg == NULL) ? \"(null)\" : prime_arg), errmsg,",
          "",
          "[Removed Lines]",
          "1574:     gss_release_buffer(&minor_stat, &client_name);",
          "1575:     gss_release_buffer(&minor_stat, &service_name);",
          "1576:     free_server_handle(handle);",
          "1577:     return &ret;",
          "1580: gpol_ret *",
          "1581: get_policy_2_svc(gpol_arg *arg, struct svc_req *rqstp)",
          "1583:     static gpol_ret             ret;",
          "1584:     kadm5_ret_t         ret2;",
          "1585:     char                        *prime_arg, *funcname;",
          "1588:     OM_uint32                   minor_stat;",
          "1593:     xdr_free(xdr_gpol_ret,  &ret);",
          "1595:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "1598:     if ((ret.code = check_handle((void *)handle)))",
          "1599:         goto exit_func;",
          "1601:     ret.api_version = handle->api_version;",
          "1605:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "1606:         ret.code = KADM5_FAILURE;",
          "1607:         goto exit_func;",
          "1608:     }",
          "1611:     ret.code = KADM5_AUTH_GET;",
          "1615:         ret.code = KADM5_OK;",
          "1617:         ret.code = kadm5_get_principal(handle->lhandle,",
          "1618:                                        handle->current_caller,",
          "1619:                                        &caller_ent,",
          "1620:                                        KADM5_PRINCIPAL_NORMAL_MASK);",
          "1621:         if (ret.code == KADM5_OK) {",
          "1624:                 ret.code = KADM5_OK;",
          "1625:             } else ret.code = KADM5_AUTH_GET;",
          "1628:             ret.code = ret.code ? ret.code : ret2;",
          "1632:     if (ret.code == KADM5_OK) {",
          "1633:         ret.code = kadm5_get_policy(handle, arg->name, &ret.rec);",
          "1635:         if( ret.code != 0 )",
          "1636:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "1339:     stub_cleanup(handle, NULL, &client_name, &service_name);",
          "1340:     return TRUE;",
          "1343: bool_t",
          "1344: get_policy_2_svc(gpol_arg *arg, gpol_ret *ret, struct svc_req *rqstp)",
          "1346:     char                        *funcname, *prime_arg = NULL;",
          "1349:     kadm5_ret_t         ret2;",
          "1354:     ret->code = stub_setup(arg->api_version, rqstp, NULL, &handle,",
          "1355:                            &ret->api_version, &client_name, &service_name,",
          "1356:                            NULL);",
          "1357:     if (ret->code)",
          "1364:     ret->code = KADM5_AUTH_GET;",
          "1368:         ret->code = KADM5_OK;",
          "1370:         ret->code = kadm5_get_principal(handle->lhandle,",
          "1371:                                         handle->current_caller, &caller_ent,",
          "1372:                                         KADM5_PRINCIPAL_NORMAL_MASK);",
          "1373:         if (ret->code == KADM5_OK) {",
          "1376:                 ret->code = KADM5_OK;",
          "1377:             } else {",
          "1378:                 ret->code = KADM5_AUTH_GET;",
          "1379:             }",
          "1382:             ret->code = ret->code ? ret->code : ret2;",
          "1386:     if (ret->code == KADM5_OK) {",
          "1387:         ret->code = kadm5_get_policy(handle, arg->name, &ret->rec);",
          "1389:         if (ret->code != 0)",
          "1390:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1645:         log_unauth(funcname, prime_arg,",
          "1646:                    &client_name, &service_name, rqstp);",
          "1647:     }",
          "1654: }",
          "1658: {",
          "1661:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1662:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "1664:     kadm5_server_handle_t           handle;",
          "1665:     const char                      *errmsg = NULL;",
          "1670:         goto exit_func;",
          "1681:     prime_arg = arg->exp;",
          "1682:     if (prime_arg == NULL)",
          "1683:         prime_arg = \"*\";",
          "",
          "[Removed Lines]",
          "1648: exit_func:",
          "1649:     gss_release_buffer(&minor_stat, &client_name);",
          "1650:     gss_release_buffer(&minor_stat, &service_name);",
          "1651:     free_server_handle(handle);",
          "1652:     return &ret;",
          "1656: gpols_ret *",
          "1657: get_pols_2_svc(gpols_arg *arg, struct svc_req *rqstp)",
          "1659:     static gpols_ret                ret;",
          "1660:     char                            *prime_arg;",
          "1663:     OM_uint32                       minor_stat;",
          "1667:     xdr_free(xdr_gpols_ret, &ret);",
          "1669:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "1672:     if ((ret.code = check_handle((void *)handle)))",
          "1673:         goto exit_func;",
          "1675:     ret.api_version = handle->api_version;",
          "1677:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "1678:         ret.code = KADM5_FAILURE;",
          "1679:         goto exit_func;",
          "1680:     }",
          "",
          "[Added Lines]",
          "1403: exit_func:",
          "1404:     stub_cleanup(handle, NULL, &client_name, &service_name);",
          "1405:     return TRUE;",
          "1408: bool_t",
          "1409: get_pols_2_svc(gpols_arg *arg, gpols_ret *ret, struct svc_req *rqstp)",
          "1411:     char                            *prime_arg = NULL;",
          "1417:     ret->code = stub_setup(arg->api_version, rqstp, NULL, &handle,",
          "1418:                            &ret->api_version, &client_name, &service_name,",
          "1419:                            NULL);",
          "1420:     if (ret->code)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1685:     if (CHANGEPW_SERVICE(rqstp) || !kadm5int_acl_check(handle->context,",
          "1686:                                                        rqst2name(rqstp),",
          "1687:                                                        ACL_LIST, NULL, NULL)) {",
          "1689:         log_unauth(\"kadm5_get_policies\", prime_arg,",
          "1690:                    &client_name, &service_name, rqstp);",
          "1691:     } else {",
          "1698:         log_done(\"kadm5_get_policies\", prime_arg, errmsg,",
          "1699:                  &client_name, &service_name, rqstp);",
          "",
          "[Removed Lines]",
          "1688:         ret.code = KADM5_AUTH_LIST;",
          "1692:         ret.code  = kadm5_get_policies((void *)handle,",
          "1693:                                        arg->exp, &ret.pols,",
          "1694:                                        &ret.count);",
          "1695:         if( ret.code != 0 )",
          "1696:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "1430:         ret->code = KADM5_AUTH_LIST;",
          "1434:         ret->code = kadm5_get_policies(handle, arg->exp, &ret->pols,",
          "1435:                                        &ret->count);",
          "1436:         if (ret->code != 0)",
          "1437:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1701:         if (errmsg != NULL)",
          "1702:             krb5_free_error_message(handle->context, errmsg);",
          "1703:     }",
          "1704: exit_func:",
          "1709: }",
          "1712: {",
          "1714:     gss_buffer_desc                client_name = GSS_C_EMPTY_BUFFER;",
          "1715:     gss_buffer_desc                service_name = GSS_C_EMPTY_BUFFER;",
          "1717:     kadm5_server_handle_t          handle;",
          "1718:     const char                     *errmsg = NULL;",
          "1732:         goto exit_func;",
          "1739:     log_done(\"kadm5_get_privs\", client_name.value, errmsg,",
          "1740:              &client_name, &service_name, rqstp);",
          "",
          "[Removed Lines]",
          "1705:     gss_release_buffer(&minor_stat, &client_name);",
          "1706:     gss_release_buffer(&minor_stat, &service_name);",
          "1707:     free_server_handle(handle);",
          "1708:     return &ret;",
          "1711: getprivs_ret * get_privs_2_svc(krb5_ui_4 *arg, struct svc_req *rqstp)",
          "1713:     static getprivs_ret            ret;",
          "1716:     OM_uint32                      minor_stat;",
          "1720:     xdr_free(xdr_getprivs_ret, &ret);",
          "1722:     if ((ret.code = new_server_handle(*arg, rqstp, &handle)))",
          "1723:         goto exit_func;",
          "1725:     if ((ret.code = check_handle((void *)handle)))",
          "1726:         goto exit_func;",
          "1728:     ret.api_version = handle->api_version;",
          "1730:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "1731:         ret.code = KADM5_FAILURE;",
          "1733:     }",
          "1735:     ret.code = kadm5_get_privs((void *)handle, &ret.privs);",
          "1736:     if( ret.code != 0 )",
          "1737:         errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "1447:     stub_cleanup(handle, NULL, &client_name, &service_name);",
          "1448:     return TRUE;",
          "1451: bool_t",
          "1452: get_privs_2_svc(krb5_ui_4 *arg, getprivs_ret *ret, struct svc_req *rqstp)",
          "1459:     ret->code = stub_setup(*arg, rqstp, NULL, &handle, &ret->api_version,",
          "1460:                            &client_name, &service_name, NULL);",
          "1461:     if (ret->code)",
          "1464:     ret->code = kadm5_get_privs(handle, &ret->privs);",
          "1465:     if (ret->code != 0)",
          "1466:         errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1743:         krb5_free_error_message(handle->context, errmsg);",
          "1745: exit_func:",
          "1750: }",
          "1754: {",
          "1757:     gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER;",
          "1758:     gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER;",
          "1760:     kadm5_server_handle_t       handle;",
          "1762:     const char                  *errmsg = NULL;",
          "1770:         goto exit_func;",
          "1774:     funcname = \"kadm5_purgekeys\";",
          "1785:     if (!cmp_gss_krb5_name(handle, rqst2name(rqstp), arg->princ) &&",
          "1786:         (CHANGEPW_SERVICE(rqstp)",
          "1787:          || !kadm5int_acl_check(handle->context, rqst2name(rqstp), ACL_MODIFY,",
          "1788:                                 arg->princ, NULL))) {",
          "1790:         log_unauth(funcname, prime_arg, &client_name, &service_name, rqstp);",
          "1791:     } else {",
          "1797:         log_done(funcname, prime_arg, errmsg,",
          "1798:                  &client_name, &service_name, rqstp);",
          "",
          "[Removed Lines]",
          "1746:     gss_release_buffer(&minor_stat, &client_name);",
          "1747:     gss_release_buffer(&minor_stat, &service_name);",
          "1748:     free_server_handle(handle);",
          "1749:     return &ret;",
          "1752: generic_ret *",
          "1753: purgekeys_2_svc(purgekeys_arg *arg, struct svc_req *rqstp)",
          "1755:     static generic_ret          ret;",
          "1756:     char                        *prime_arg, *funcname;",
          "1759:     OM_uint32                   minor_stat;",
          "1764:     xdr_free(xdr_generic_ret, &ret);",
          "1766:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "1767:         goto exit_func;",
          "1769:     if ((ret.code = check_handle((void *)handle)))",
          "1772:     ret.api_version = handle->api_version;",
          "1776:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "1777:         ret.code = KADM5_FAILURE;",
          "1778:         goto exit_func;",
          "1779:     }",
          "1780:     if (krb5_unparse_name(handle->context, arg->princ, &prime_arg)) {",
          "1781:         ret.code = KADM5_BAD_PRINCIPAL;",
          "1782:         goto exit_func;",
          "1783:     }",
          "1789:         ret.code = KADM5_AUTH_MODIFY;",
          "1792:         ret.code = kadm5_purgekeys((void *)handle, arg->princ,",
          "1793:                                    arg->keepkvno);",
          "1794:         if (ret.code != 0)",
          "1795:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "1475:     stub_cleanup(handle, NULL, &client_name, &service_name);",
          "1476:     return TRUE;",
          "1479: bool_t",
          "1480: purgekeys_2_svc(purgekeys_arg *arg, generic_ret *ret, struct svc_req *rqstp)",
          "1482:     char                        *funcname, *prime_arg = NULL;",
          "1489:     ret->code = stub_setup(arg->api_version, rqstp, arg->princ, &handle,",
          "1490:                            &ret->api_version, &client_name, &service_name,",
          "1491:                            &prime_arg);",
          "1492:     if (ret->code)",
          "1501:         ret->code = KADM5_AUTH_MODIFY;",
          "1504:         ret->code = kadm5_purgekeys(handle, arg->princ, arg->keepkvno);",
          "1505:         if (ret->code != 0)",
          "1506:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1800:         if (errmsg != NULL)",
          "1801:             krb5_free_error_message(handle->context, errmsg);",
          "1802:     }",
          "1804: exit_func:",
          "1809: }",
          "1813: {",
          "1816:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1817:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "1819:     kadm5_server_handle_t           handle;",
          "1820:     const char                      *errmsg = NULL;",
          "1825:         goto exit_func;",
          "1841:     if (! cmp_gss_krb5_name(handle, rqst2name(rqstp), arg->princ) &&",
          "1842:         (CHANGEPW_SERVICE(rqstp) || !kadm5int_acl_check(handle->context,",
          "1843:                                                         rqst2name(rqstp),",
          "1844:                                                         ACL_INQUIRE,",
          "1845:                                                         arg->princ,",
          "1846:                                                         NULL))) {",
          "1848:         log_unauth(\"kadm5_get_strings\", prime_arg,",
          "1849:                    &client_name, &service_name, rqstp);",
          "1850:     } else {",
          "1856:         log_done(\"kadm5_get_strings\", prime_arg, errmsg,",
          "1857:                  &client_name, &service_name, rqstp);",
          "",
          "[Removed Lines]",
          "1803:     free(prime_arg);",
          "1805:     gss_release_buffer(&minor_stat, &client_name);",
          "1806:     gss_release_buffer(&minor_stat, &service_name);",
          "1807:     free_server_handle(handle);",
          "1808:     return &ret;",
          "1811: gstrings_ret *",
          "1812: get_strings_2_svc(gstrings_arg *arg, struct svc_req *rqstp)",
          "1814:     static gstrings_ret             ret;",
          "1815:     char                            *prime_arg;",
          "1818:     OM_uint32                       minor_stat;",
          "1822:     xdr_free(xdr_gstrings_ret, &ret);",
          "1824:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "1827:     if ((ret.code = check_handle((void *)handle)))",
          "1828:         goto exit_func;",
          "1830:     ret.api_version = handle->api_version;",
          "1832:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "1833:         ret.code = KADM5_FAILURE;",
          "1834:         goto exit_func;",
          "1835:     }",
          "1836:     if (krb5_unparse_name(handle->context, arg->princ, &prime_arg)) {",
          "1837:         ret.code = KADM5_BAD_PRINCIPAL;",
          "1838:         goto exit_func;",
          "1839:     }",
          "1847:         ret.code = KADM5_AUTH_GET;",
          "1851:         ret.code = kadm5_get_strings((void *)handle, arg->princ, &ret.strings,",
          "1852:                                      &ret.count);",
          "1853:         if (ret.code != 0)",
          "1854:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "1516:     stub_cleanup(handle, prime_arg, &client_name, &service_name);",
          "1517:     return TRUE;",
          "1520: bool_t",
          "1521: get_strings_2_svc(gstrings_arg *arg, gstrings_ret *ret, struct svc_req *rqstp)",
          "1523:     char                            *prime_arg = NULL;",
          "1529:     ret->code = stub_setup(arg->api_version, rqstp, arg->princ, &handle,",
          "1530:                            &ret->api_version, &client_name, &service_name,",
          "1531:                            &prime_arg);",
          "1532:     if (ret->code)",
          "1541:         ret->code = KADM5_AUTH_GET;",
          "1545:         ret->code = kadm5_get_strings(handle, arg->princ, &ret->strings,",
          "1546:                                       &ret->count);",
          "1547:         if (ret->code != 0)",
          "1548:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1859:         if (errmsg != NULL)",
          "1860:             krb5_free_error_message(handle->context, errmsg);",
          "1861:     }",
          "1863: exit_func:",
          "1868: }",
          "1872: {",
          "1875:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1876:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "1878:     kadm5_server_handle_t           handle;",
          "1879:     const char                      *errmsg = NULL;",
          "1887:         goto exit_func;",
          "1900:     if (CHANGEPW_SERVICE(rqstp)",
          "1901:         || !kadm5int_acl_check(handle->context, rqst2name(rqstp), ACL_MODIFY,",
          "1902:                                arg->princ, NULL)) {",
          "1904:         log_unauth(\"kadm5_mod_strings\", prime_arg,",
          "1905:                    &client_name, &service_name, rqstp);",
          "1906:     } else {",
          "1912:         log_done(\"kadm5_mod_strings\", prime_arg, errmsg,",
          "1913:                  &client_name, &service_name, rqstp);",
          "",
          "[Removed Lines]",
          "1862:     free(prime_arg);",
          "1864:     gss_release_buffer(&minor_stat, &client_name);",
          "1865:     gss_release_buffer(&minor_stat, &service_name);",
          "1866:     free_server_handle(handle);",
          "1867:     return &ret;",
          "1870: generic_ret *",
          "1871: set_string_2_svc(sstring_arg *arg, struct svc_req *rqstp)",
          "1873:     static generic_ret              ret;",
          "1874:     char                            *prime_arg;",
          "1877:     OM_uint32                       minor_stat;",
          "1881:     xdr_free(xdr_generic_ret, &ret);",
          "1883:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "1884:         goto exit_func;",
          "1886:     if ((ret.code = check_handle((void *)handle)))",
          "1889:     ret.api_version = handle->api_version;",
          "1891:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "1892:         ret.code = KADM5_FAILURE;",
          "1893:         goto exit_func;",
          "1894:     }",
          "1895:     if (krb5_unparse_name(handle->context, arg->princ, &prime_arg)) {",
          "1896:         ret.code = KADM5_BAD_PRINCIPAL;",
          "1897:         goto exit_func;",
          "1898:     }",
          "1903:         ret.code = KADM5_AUTH_MODIFY;",
          "1907:         ret.code = kadm5_set_string((void *)handle, arg->princ, arg->key,",
          "1908:                                     arg->value);",
          "1909:         if (ret.code != 0)",
          "1910:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "1558:     stub_cleanup(handle, prime_arg, &client_name, &service_name);",
          "1559:     return TRUE;",
          "1562: bool_t",
          "1563: set_string_2_svc(sstring_arg *arg, generic_ret *ret, struct svc_req *rqstp)",
          "1565:     char                            *prime_arg = NULL;",
          "1571:     ret->code = stub_setup(arg->api_version, rqstp, arg->princ, &handle,",
          "1572:                            &ret->api_version, &client_name, &service_name,",
          "1573:                            &prime_arg);",
          "1574:     if (ret->code)",
          "1580:         ret->code = KADM5_AUTH_MODIFY;",
          "1584:         ret->code = kadm5_set_string(handle, arg->princ, arg->key, arg->value);",
          "1585:         if (ret->code != 0)",
          "1586:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1915:         if (errmsg != NULL)",
          "1916:             krb5_free_error_message(handle->context, errmsg);",
          "1917:     }",
          "1919: exit_func:",
          "1924: }",
          "1927: {",
          "1929:     gss_buffer_desc            client_name = GSS_C_EMPTY_BUFFER;",
          "1930:     gss_buffer_desc            service_name = GSS_C_EMPTY_BUFFER;",
          "1931:     kadm5_server_handle_t      handle;",
          "1933:     const char                 *errmsg = NULL;",
          "1934:     size_t clen, slen;",
          "1935:     char *cdots, *sdots;",
          "1940:         goto exit_func;",
          "1955:     clen = client_name.length;",
          "1956:     trunc_name(&clen, &cdots);",
          "",
          "[Removed Lines]",
          "1918:     free(prime_arg);",
          "1920:     gss_release_buffer(&minor_stat, &client_name);",
          "1921:     gss_release_buffer(&minor_stat, &service_name);",
          "1922:     free_server_handle(handle);",
          "1923:     return &ret;",
          "1926: generic_ret *init_2_svc(krb5_ui_4 *arg, struct svc_req *rqstp)",
          "1928:     static generic_ret         ret;",
          "1932:     OM_uint32                  minor_stat;",
          "1937:     xdr_free(xdr_generic_ret, &ret);",
          "1939:     if ((ret.code = new_server_handle(*arg, rqstp, &handle)))",
          "1941:     if (! (ret.code = check_handle((void *)handle))) {",
          "1942:         ret.api_version = handle->api_version;",
          "1943:     }",
          "1945:     free_server_handle(handle);",
          "1947:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "1948:         ret.code = KADM5_FAILURE;",
          "1949:         goto exit_func;",
          "1950:     }",
          "1952:     if (ret.code != 0)",
          "1953:         errmsg = krb5_get_error_message(NULL, ret.code);",
          "",
          "[Added Lines]",
          "1596:     stub_cleanup(handle, prime_arg, &client_name, &service_name);",
          "1597:     return TRUE;",
          "1600: bool_t",
          "1601: init_2_svc(krb5_ui_4 *arg, generic_ret *ret, struct svc_req *rqstp)",
          "1610:     ret->code = stub_setup(*arg, rqstp, NULL, &handle, &ret->api_version,",
          "1611:                            &client_name, &service_name, NULL);",
          "1612:     if (ret->code)",
          "1615:     if (ret->code != 0)",
          "1616:         errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1965:                      (int)clen, (char *)client_name.value, cdots,",
          "1966:                      (int)slen, (char *)service_name.value, sdots,",
          "1967:                      client_addr(rqstp->rq_xprt),",
          "1969:                      rqstp->rq_cred.oa_flavor);",
          "1970:     if (errmsg != NULL)",
          "1973: exit_func:",
          "1977: }",
          "1979: gss_name_t",
          "",
          "[Removed Lines]",
          "1968:                      ret.api_version & ~(KADM5_API_VERSION_MASK),",
          "1971:         krb5_free_error_message(NULL, errmsg);",
          "1974:     gss_release_buffer(&minor_stat, &client_name);",
          "1975:     gss_release_buffer(&minor_stat, &service_name);",
          "1976:     return(&ret);",
          "",
          "[Added Lines]",
          "1631:                      ret->api_version & ~(KADM5_API_VERSION_MASK),",
          "1634:         krb5_free_error_message(handle->context, errmsg);",
          "1637:     stub_cleanup(handle, NULL, &client_name, &service_name);",
          "1638:     return TRUE;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1986:         return rqstp->rq_clntcred;",
          "1987: }",
          "1991: {",
          "1994:     gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;",
          "1995:     gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;",
          "1997:     kadm5_server_handle_t           handle;",
          "1998:     const char                      *errmsg = NULL;",
          "2003:         goto exit_func;",
          "2019:     if (!(CHANGEPW_SERVICE(rqstp)) &&",
          "2020:         kadm5int_acl_check(handle->context, rqst2name(rqstp),",
          "2021:                            ACL_EXTRACT, arg->princ, NULL)) {",
          "2025:     } else {",
          "2026:         log_unauth(\"kadm5_get_principal_keys\", prime_arg,",
          "2027:                    &client_name, &service_name, rqstp);",
          "2029:     }",
          "2038:         }",
          "2040:             log_unauth(\"kadm5_get_principal_keys\", prime_arg,",
          "2041:                        &client_name, &service_name, rqstp);",
          "2043:         }",
          "2044:     }",
          "2050:         log_done(\"kadm5_get_principal_keys\", prime_arg, errmsg,",
          "2051:                  &client_name, &service_name, rqstp);",
          "",
          "[Removed Lines]",
          "1989: getpkeys_ret *",
          "1990: get_principal_keys_2_svc(getpkeys_arg *arg, struct svc_req *rqstp)",
          "1992:     static getpkeys_ret             ret;",
          "1993:     char                            *prime_arg;",
          "1996:     OM_uint32                       minor_stat;",
          "2000:     xdr_free(xdr_getpkeys_ret, &ret);",
          "2002:     if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))",
          "2005:     if ((ret.code = check_handle((void *)handle)))",
          "2006:         goto exit_func;",
          "2008:     ret.api_version = handle->api_version;",
          "2010:     if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {",
          "2011:         ret.code = KADM5_FAILURE;",
          "2012:         goto exit_func;",
          "2013:     }",
          "2014:     if (krb5_unparse_name(handle->context, arg->princ, &prime_arg)) {",
          "2015:         ret.code = KADM5_BAD_PRINCIPAL;",
          "2016:         goto exit_func;",
          "2017:     }",
          "2022:         ret.code = kadm5_get_principal_keys((void *)handle, arg->princ,",
          "2023:                                             arg->kvno, &ret.key_data,",
          "2024:                                             &ret.n_key_data);",
          "2028:         ret.code = KADM5_AUTH_EXTRACT;",
          "2031:     if (ret.code == KADM5_OK) {",
          "2032:         ret.code = check_lockdown_keys(handle, arg->princ);",
          "2033:         if (ret.code != KADM5_OK) {",
          "2034:             kadm5_free_kadm5_key_data(handle->context, ret.n_key_data,",
          "2035:                                       ret.key_data);",
          "2036:             ret.key_data = NULL;",
          "2037:             ret.n_key_data = 0;",
          "2039:         if (ret.code == KADM5_PROTECT_KEYS) {",
          "2042:             ret.code = KADM5_AUTH_EXTRACT;",
          "2046:     if (ret.code != KADM5_AUTH_EXTRACT) {",
          "2047:         if (ret.code != 0)",
          "2048:             errmsg = krb5_get_error_message(handle->context, ret.code);",
          "",
          "[Added Lines]",
          "1651: bool_t",
          "1652: get_principal_keys_2_svc(getpkeys_arg *arg, getpkeys_ret *ret,",
          "1653:                          struct svc_req *rqstp)",
          "1655:     char                            *prime_arg = NULL;",
          "1661:     ret->code = stub_setup(arg->api_version, rqstp, arg->princ, &handle,",
          "1662:                            &ret->api_version, &client_name, &service_name,",
          "1663:                            &prime_arg);",
          "1664:     if (ret->code)",
          "1670:         ret->code = kadm5_get_principal_keys(handle, arg->princ, arg->kvno,",
          "1671:                                              &ret->key_data, &ret->n_key_data);",
          "1675:         ret->code = KADM5_AUTH_EXTRACT;",
          "1678:     if (ret->code == KADM5_OK) {",
          "1679:         ret->code = check_lockdown_keys(handle, arg->princ);",
          "1680:         if (ret->code != KADM5_OK) {",
          "1681:             kadm5_free_kadm5_key_data(handle->context, ret->n_key_data,",
          "1682:                                       ret->key_data);",
          "1683:             ret->key_data = NULL;",
          "1684:             ret->n_key_data = 0;",
          "1686:         if (ret->code == KADM5_PROTECT_KEYS) {",
          "1689:             ret->code = KADM5_AUTH_EXTRACT;",
          "1693:     if (ret->code != KADM5_AUTH_EXTRACT) {",
          "1694:         if (ret->code != 0)",
          "1695:             errmsg = krb5_get_error_message(handle->context, ret->code);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2054:             krb5_free_error_message(handle->context, errmsg);",
          "2055:     }",
          "2058: exit_func:",
          "2063: }",
          "",
          "[Removed Lines]",
          "2057:     free(prime_arg);",
          "2059:     gss_release_buffer(&minor_stat, &client_name);",
          "2060:     gss_release_buffer(&minor_stat, &service_name);",
          "2061:     free_server_handle(handle);",
          "2062:     return &ret;",
          "",
          "[Added Lines]",
          "1705:     stub_cleanup(handle, prime_arg, &client_name, &service_name);",
          "1706:     return TRUE;",
          "",
          "---------------"
        ],
        "src/lib/kadm5/kadm_rpc.h||src/lib/kadm5/kadm_rpc.h": [
          "File: src/lib/kadm5/kadm_rpc.h -> src/lib/kadm5/kadm_rpc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "258: #define CREATE_PRINCIPAL 1",
          "259: extern  enum clnt_stat create_principal_2(cprinc_arg *, generic_ret *,",
          "260:        CLIENT *);",
          "262: #define DELETE_PRINCIPAL 2",
          "263: extern  enum clnt_stat delete_principal_2(dprinc_arg *, generic_ret *,",
          "264:        CLIENT *);",
          "266: #define MODIFY_PRINCIPAL 3",
          "267: extern  enum clnt_stat modify_principal_2(mprinc_arg *, generic_ret *,",
          "268:        CLIENT *);",
          "270: #define RENAME_PRINCIPAL 4",
          "271: extern  enum clnt_stat rename_principal_2(rprinc_arg *, generic_ret *,",
          "272:        CLIENT *);",
          "274: #define GET_PRINCIPAL 5",
          "275: extern  enum clnt_stat get_principal_2(gprinc_arg *, gprinc_ret *, CLIENT *);",
          "277: #define CHPASS_PRINCIPAL 6",
          "278: extern  enum clnt_stat chpass_principal_2(chpass_arg *, generic_ret *,",
          "279:        CLIENT *);",
          "281: #define CHRAND_PRINCIPAL 7",
          "282: extern  enum clnt_stat chrand_principal_2(chrand_arg *, chrand_ret *,",
          "283:        CLIENT *);",
          "285: #define CREATE_POLICY 8",
          "286: extern  enum clnt_stat create_policy_2(cpol_arg *, generic_ret *, CLIENT *);",
          "288: #define DELETE_POLICY 9",
          "289: extern  enum clnt_stat delete_policy_2(dpol_arg *, generic_ret *, CLIENT *);",
          "291: #define MODIFY_POLICY 10",
          "292: extern  enum clnt_stat modify_policy_2(mpol_arg *, generic_ret *, CLIENT *);",
          "294: #define GET_POLICY 11",
          "295: extern  enum clnt_stat get_policy_2(gpol_arg *, gpol_ret *, CLIENT *);",
          "297: #define GET_PRIVS 12",
          "298: extern  enum clnt_stat get_privs_2(void *, getprivs_ret *, CLIENT *);",
          "300: #define INIT 13",
          "301: extern  enum clnt_stat init_2(void *, generic_ret *, CLIENT *);",
          "303: #define GET_PRINCS 14",
          "304: extern  enum clnt_stat get_princs_2(gprincs_arg *, gprincs_ret *, CLIENT *);",
          "306: #define GET_POLS 15",
          "307: extern  enum clnt_stat get_pols_2(gpols_arg *, gpols_ret *, CLIENT *);",
          "309: #define SETKEY_PRINCIPAL 16",
          "310: extern  enum clnt_stat setkey_principal_2(setkey_arg *, generic_ret *,",
          "311:        CLIENT *);",
          "313: #define SETV4KEY_PRINCIPAL 17",
          "314: extern  enum clnt_stat setv4key_principal_2(setv4key_arg *, generic_ret *,",
          "315:          CLIENT *);",
          "317: #define CREATE_PRINCIPAL3 18",
          "318: extern  enum clnt_stat create_principal3_2(cprinc3_arg *, generic_ret *,",
          "319:         CLIENT *);",
          "321: #define CHPASS_PRINCIPAL3 19",
          "322: extern  enum clnt_stat chpass_principal3_2(chpass3_arg *, generic_ret *,",
          "323:         CLIENT *);",
          "325: #define CHRAND_PRINCIPAL3 20",
          "326: extern  enum clnt_stat chrand_principal3_2(chrand3_arg *, chrand_ret *,",
          "327:         CLIENT *);",
          "329: #define SETKEY_PRINCIPAL3 21",
          "330: extern  enum clnt_stat setkey_principal3_2(setkey3_arg *, generic_ret *,",
          "331:         CLIENT *);",
          "333: #define PURGEKEYS 22",
          "334: extern  enum clnt_stat purgekeys_2(purgekeys_arg *, generic_ret *, CLIENT *);",
          "336: #define GET_STRINGS 23",
          "337: extern  enum clnt_stat get_strings_2(gstrings_arg *, gstrings_ret *, CLIENT *);",
          "339: #define SET_STRING 24",
          "340: extern  enum clnt_stat set_string_2(sstring_arg *, generic_ret *, CLIENT *);",
          "342: #define SETKEY_PRINCIPAL4 25",
          "343: extern  enum clnt_stat setkey_principal4_2(setkey4_arg *, generic_ret *,",
          "344:         CLIENT *);",
          "346: #define EXTRACT_KEYS 26",
          "347: extern enum clnt_stat get_principal_keys_2(getpkeys_arg *, getpkeys_ret *,",
          "348:         CLIENT *);",
          "351: extern bool_t xdr_cprinc_arg ();",
          "352: extern bool_t xdr_cprinc3_arg ();",
          "",
          "[Removed Lines]",
          "261: extern  generic_ret * create_principal_2_svc(cprinc_arg *, struct svc_req *);",
          "265: extern  generic_ret * delete_principal_2_svc(dprinc_arg *, struct svc_req *);",
          "269: extern  generic_ret * modify_principal_2_svc(mprinc_arg *, struct svc_req *);",
          "273: extern  generic_ret * rename_principal_2_svc(rprinc_arg *, struct svc_req *);",
          "276: extern  gprinc_ret * get_principal_2_svc(gprinc_arg *, struct svc_req *);",
          "280: extern  generic_ret * chpass_principal_2_svc(chpass_arg *, struct svc_req *);",
          "284: extern  chrand_ret * chrand_principal_2_svc(chrand_arg *, struct svc_req *);",
          "287: extern  generic_ret * create_policy_2_svc(cpol_arg *, struct svc_req *);",
          "290: extern  generic_ret * delete_policy_2_svc(dpol_arg *, struct svc_req *);",
          "293: extern  generic_ret * modify_policy_2_svc(mpol_arg *, struct svc_req *);",
          "296: extern  gpol_ret * get_policy_2_svc(gpol_arg *, struct svc_req *);",
          "299: extern  getprivs_ret * get_privs_2_svc(krb5_ui_4 *, struct svc_req *);",
          "302: extern  generic_ret * init_2_svc(krb5_ui_4 *, struct svc_req *);",
          "305: extern  gprincs_ret * get_princs_2_svc(gprincs_arg *, struct svc_req *);",
          "308: extern  gpols_ret * get_pols_2_svc(gpols_arg *, struct svc_req *);",
          "312: extern  generic_ret * setkey_principal_2_svc(setkey_arg *, struct svc_req *);",
          "316: extern  generic_ret * setv4key_principal_2_svc(setv4key_arg *, struct svc_req *);",
          "320: extern  generic_ret * create_principal3_2_svc(cprinc3_arg *, struct svc_req *);",
          "324: extern  generic_ret * chpass_principal3_2_svc(chpass3_arg *, struct svc_req *);",
          "328: extern  chrand_ret * chrand_principal3_2_svc(chrand3_arg *, struct svc_req *);",
          "332: extern  generic_ret * setkey_principal3_2_svc(setkey3_arg *, struct svc_req *);",
          "335: extern  generic_ret * purgekeys_2_svc(purgekeys_arg *, struct svc_req *);",
          "338: extern  gstrings_ret * get_strings_2_svc(gstrings_arg *, struct svc_req *);",
          "341: extern  generic_ret * set_string_2_svc(sstring_arg *, struct svc_req *);",
          "345: extern  generic_ret * setkey_principal4_2_svc(setkey4_arg *, struct svc_req *);",
          "349: extern  getpkeys_ret * get_principal_keys_2_svc(getpkeys_arg *, struct svc_req *);",
          "",
          "[Added Lines]",
          "261: extern  bool_t create_principal_2_svc(cprinc_arg *, generic_ret *,",
          "262:           struct svc_req *);",
          "266: extern  bool_t delete_principal_2_svc(dprinc_arg *, generic_ret *,",
          "267:           struct svc_req *);",
          "271: extern  bool_t modify_principal_2_svc(mprinc_arg *, generic_ret *,",
          "272:           struct svc_req *);",
          "276: extern  bool_t rename_principal_2_svc(rprinc_arg *, generic_ret *,",
          "277:           struct svc_req *);",
          "280: extern  bool_t get_principal_2_svc(gprinc_arg *, gprinc_ret *,",
          "281:        struct svc_req *);",
          "285: extern  bool_t chpass_principal_2_svc(chpass_arg *, generic_ret *,",
          "286:           struct svc_req *);",
          "290: extern  bool_t chrand_principal_2_svc(chrand_arg *, chrand_ret *,",
          "291:           struct svc_req *);",
          "294: extern  bool_t create_policy_2_svc(cpol_arg *, generic_ret *,",
          "295:        struct svc_req *);",
          "298: extern  bool_t delete_policy_2_svc(dpol_arg *, generic_ret *,",
          "299:        struct svc_req *);",
          "302: extern  bool_t modify_policy_2_svc(mpol_arg *, generic_ret *,",
          "303:        struct svc_req *);",
          "306: extern  bool_t get_policy_2_svc(gpol_arg *, gpol_ret *, struct svc_req *);",
          "309: extern  bool_t get_privs_2_svc(krb5_ui_4 *, getprivs_ret *, struct svc_req *);",
          "312: extern  bool_t init_2_svc(krb5_ui_4 *, generic_ret *, struct svc_req *);",
          "315: extern  bool_t get_princs_2_svc(gprincs_arg *, gprincs_ret *,",
          "316:     struct svc_req *);",
          "319: extern  bool_t get_pols_2_svc(gpols_arg *, gpols_ret *, struct svc_req *);",
          "323: extern  bool_t setkey_principal_2_svc(setkey_arg *, generic_ret *,",
          "324:           struct svc_req *);",
          "328: extern  bool_t setv4key_principal_2_svc(setv4key_arg *, generic_ret *,",
          "329:      struct svc_req *);",
          "333: extern  bool_t create_principal3_2_svc(cprinc3_arg *, generic_ret *,",
          "334:            struct svc_req *);",
          "338: extern  bool_t chpass_principal3_2_svc(chpass3_arg *, generic_ret *,",
          "339:            struct svc_req *);",
          "343: extern  bool_t chrand_principal3_2_svc(chrand3_arg *, chrand_ret *,",
          "344:            struct svc_req *);",
          "348: extern  bool_t setkey_principal3_2_svc(setkey3_arg *, generic_ret *,",
          "349:            struct svc_req *);",
          "352: extern  bool_t purgekeys_2_svc(purgekeys_arg *, generic_ret *,",
          "353:           struct svc_req *);",
          "356: extern  bool_t get_strings_2_svc(gstrings_arg *, gstrings_ret *,",
          "357:      struct svc_req *);",
          "360: extern  bool_t set_string_2_svc(sstring_arg *, generic_ret *,",
          "361:     struct svc_req *);",
          "365: extern  bool_t setkey_principal4_2_svc(setkey4_arg *, generic_ret *,",
          "366:            struct svc_req *);",
          "370: extern  bool_t get_principal_keys_2_svc(getpkeys_arg *, getpkeys_ret *,",
          "371:      struct svc_req *);",
          "",
          "---------------"
        ]
      }
    }
  ]
}