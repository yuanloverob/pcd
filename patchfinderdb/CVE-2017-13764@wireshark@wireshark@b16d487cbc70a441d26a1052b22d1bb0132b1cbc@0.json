{
  "cve_id": "CVE-2017-13764",
  "cve_desc": "In Wireshark 2.4.0, the Modbus dissector could crash with a NULL pointer dereference. This was addressed in epan/dissectors/packet-mbtcp.c by adding length validation.",
  "repo": "wireshark/wireshark",
  "patch_hash": "b16d487cbc70a441d26a1052b22d1bb0132b1cbc",
  "patch_info": {
    "commit_hash": "b16d487cbc70a441d26a1052b22d1bb0132b1cbc",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/b16d487cbc70a441d26a1052b22d1bb0132b1cbc",
    "files": [
      "epan/dissectors/packet-mbtcp.c"
    ],
    "message": "Modbus: do not trigger an exception before saving pkt_info structure\n\nOtherwise on second pass pkt_info is null, leading to a segmentation fault\n\nBug: 13925\nChange-Id: I61cfbee894506fb6c4205c9a2ad19e6973821f23\nReviewed-on: https://code.wireshark.org/review/22833\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "before_after_code_files": [
      "epan/dissectors/packet-mbtcp.c||epan/dissectors/packet-mbtcp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-mbtcp.c||epan/dissectors/packet-mbtcp.c": [
      "File: epan/dissectors/packet-mbtcp.c -> epan/dissectors/packet-mbtcp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1569:         if (*packet_type == QUERY_PACKET) {",
      "1574:             frame_ptr->fnum = pinfo->num;",
      "1575:             frame_ptr->function_code = function_code;",
      "1579:             wmem_list_prepend(modbus_conv_data->modbus_request_frame_data, frame_ptr);",
      "1580:         }",
      "",
      "[Removed Lines]",
      "1571:             modbus_request_info_t    *frame_ptr = wmem_new(wmem_file_scope(), modbus_request_info_t);",
      "1576:             pkt_info->reg_base = frame_ptr->base_address = tvb_get_ntohs(tvb, 1);",
      "1577:             pkt_info->num_reg = frame_ptr->num_reg = tvb_get_ntohs(tvb, 3);",
      "",
      "[Added Lines]",
      "1571:             modbus_request_info_t    *frame_ptr = wmem_new0(wmem_file_scope(), modbus_request_info_t);",
      "1572:             gint captured_length = tvb_captured_length(tvb);",
      "1577:             if (captured_length >= 3) {",
      "1578:                 pkt_info->reg_base = frame_ptr->base_address = tvb_get_ntohs(tvb, 1);",
      "1579:                 if (captured_length >= 5)",
      "1580:                     pkt_info->num_reg = frame_ptr->num_reg = tvb_get_ntohs(tvb, 3);",
      "1581:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b87ffbd12bddf64582c0a6e082b462744474de94",
      "candidate_info": {
        "commit_hash": "b87ffbd12bddf64582c0a6e082b462744474de94",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/b87ffbd12bddf64582c0a6e082b462744474de94",
        "files": [
          "epan/dissectors/packet-mbtcp.c"
        ],
        "message": "Modbus: do not trigger an exception before saving pkt_info structure\n\nOtherwise on second pass pkt_info is null, leading to a segmentation fault\n\nBug: 13925\nChange-Id: I61cfbee894506fb6c4205c9a2ad19e6973821f23\nReviewed-on: https://code.wireshark.org/review/22833\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit b16d487cbc70a441d26a1052b22d1bb0132b1cbc)\nReviewed-on: https://code.wireshark.org/review/22839",
        "before_after_code_files": [
          "epan/dissectors/packet-mbtcp.c||epan/dissectors/packet-mbtcp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-mbtcp.c||epan/dissectors/packet-mbtcp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-mbtcp.c||epan/dissectors/packet-mbtcp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-mbtcp.c||epan/dissectors/packet-mbtcp.c": [
          "File: epan/dissectors/packet-mbtcp.c -> epan/dissectors/packet-mbtcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1569:         if (*packet_type == QUERY_PACKET) {",
          "1574:             frame_ptr->fnum = pinfo->num;",
          "1575:             frame_ptr->function_code = function_code;",
          "1579:             wmem_list_prepend(modbus_conv_data->modbus_request_frame_data, frame_ptr);",
          "1580:         }",
          "",
          "[Removed Lines]",
          "1571:             modbus_request_info_t    *frame_ptr = wmem_new(wmem_file_scope(), modbus_request_info_t);",
          "1576:             pkt_info->reg_base = frame_ptr->base_address = tvb_get_ntohs(tvb, 1);",
          "1577:             pkt_info->num_reg = frame_ptr->num_reg = tvb_get_ntohs(tvb, 3);",
          "",
          "[Added Lines]",
          "1571:             modbus_request_info_t    *frame_ptr = wmem_new0(wmem_file_scope(), modbus_request_info_t);",
          "1572:             gint captured_length = tvb_captured_length(tvb);",
          "1577:             if (captured_length >= 3) {",
          "1578:                 pkt_info->reg_base = frame_ptr->base_address = tvb_get_ntohs(tvb, 1);",
          "1579:                 if (captured_length >= 5)",
          "1580:                     pkt_info->num_reg = frame_ptr->num_reg = tvb_get_ntohs(tvb, 3);",
          "1581:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91a21b3eda3757da1d82db80025edb18b579e104",
      "candidate_info": {
        "commit_hash": "91a21b3eda3757da1d82db80025edb18b579e104",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/91a21b3eda3757da1d82db80025edb18b579e104",
        "files": [
          "epan/dissectors/packet-mbtcp.c"
        ],
        "message": "[mbtcp] Separate conversation and per-packet data, build ppd on first pass.\n\nChange-Id: I741824b239476a3eafa481344a3f699f986a03c8\nReviewed-on: https://code.wireshark.org/review/20927\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-mbtcp.c||epan/dissectors/packet-mbtcp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-mbtcp.c||epan/dissectors/packet-mbtcp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-mbtcp.c||epan/dissectors/packet-mbtcp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-mbtcp.c||epan/dissectors/packet-mbtcp.c": [
          "File: epan/dissectors/packet-mbtcp.c -> epan/dissectors/packet-mbtcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "193: static gint global_mbus_register_format = MODBUS_PREF_REGISTER_FORMAT_UINT16;",
          "195: static int",
          "196: classify_mbtcp_packet(packet_info *pinfo, guint port)",
          "197: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195: typedef struct {",
          "196:     guint8  function_code;",
          "197:     gint    register_format;",
          "198:     guint16 reg_base;",
          "199:     guint32 req_frame_num;",
          "200:     gboolean request_found;",
          "201: } modbus_pkt_info_t;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "994: static int",
          "996: {",
          "997:     proto_tree    *group_tree;",
          "998:     gint          byte_cnt, group_offset, ii;",
          "1000:     guint8        mei_code;",
          "1001:     guint16       reg_base=0, diagnostic_code;",
          "1002:     guint32       group_byte_cnt, group_word_cnt;",
          "1013:     switch (function_code) {",
          "1015:         case READ_COILS:",
          "",
          "[Removed Lines]",
          "995: dissect_modbus_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *modbus_tree, guint8 function_code, gint payload_start, gint payload_len)",
          "1004:     modbus_conversation   *conv;",
          "1007:     conv = (modbus_conversation *)p_get_proto_data(wmem_file_scope(), pinfo, proto_modbus, 0);",
          "1009:     if (conv) {",
          "1010:         register_format = conv->register_format;",
          "1011:     }",
          "",
          "[Added Lines]",
          "1003: dissect_modbus_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *modbus_tree, guint8 function_code, gint payload_start, gint payload_len, modbus_pkt_info_t *pkt_info)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1027:         case WRITE_SINGLE_COIL:",
          "1028:             proto_tree_add_item(modbus_tree, hf_modbus_reference, tvb, payload_start, 2, ENC_BIG_ENDIAN);",
          "1030:             proto_tree_add_item(modbus_tree, hf_modbus_padding, tvb, payload_start + 3, 1, ENC_NA);",
          "1031:             break;",
          "1033:         case WRITE_SINGLE_REG:",
          "1034:             proto_tree_add_item(modbus_tree, hf_modbus_reference, tvb, payload_start, 2, ENC_BIG_ENDIAN);",
          "1036:             break;",
          "1038:         case READ_EXCEPT_STAT:",
          "",
          "[Removed Lines]",
          "1029:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 2, 1, register_format, reg_base);",
          "1035:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 2, 2, register_format, reg_base);",
          "",
          "[Added Lines]",
          "1027:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 2, 1, pkt_info->register_format, reg_base);",
          "1033:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 2, 2, pkt_info->register_format, reg_base);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1068:                 case CLEAR_OVERRUN_COUNTER_AND_FLAG:",
          "1069:                 default:",
          "1070:                     if (payload_len > 2)",
          "1072:                     break;",
          "1073:             }",
          "1074:             break;",
          "",
          "[Removed Lines]",
          "1071:                         dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start+2, payload_len-2, register_format, reg_base);",
          "",
          "[Added Lines]",
          "1069:                         dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start+2, payload_len-2, pkt_info->register_format, reg_base);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1077:             proto_tree_add_item(modbus_tree, hf_modbus_bitcnt, tvb, payload_start + 2, 2, ENC_BIG_ENDIAN);",
          "1078:             byte_cnt = (guint32)tvb_get_guint8(tvb, payload_start + 4);",
          "1079:             proto_tree_add_uint(modbus_tree, hf_modbus_bytecnt, tvb, payload_start + 4, 1, byte_cnt);",
          "1081:             break;",
          "1083:         case WRITE_MULT_REGS:",
          "",
          "[Removed Lines]",
          "1080:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 5, byte_cnt, register_format, reg_base);",
          "",
          "[Added Lines]",
          "1078:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 5, byte_cnt, pkt_info->register_format, reg_base);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1086:             proto_tree_add_item(modbus_tree, hf_modbus_wordcnt, tvb, payload_start + 2, 2, ENC_BIG_ENDIAN);",
          "1087:             byte_cnt = (guint32)tvb_get_guint8(tvb, payload_start + 4);",
          "1088:             proto_tree_add_uint(modbus_tree, hf_modbus_bytecnt, tvb, payload_start + 4, 1, byte_cnt);",
          "1090:             break;",
          "1092:         case READ_FILE_RECORD:",
          "",
          "[Removed Lines]",
          "1089:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 5, byte_cnt, register_format, reg_base);",
          "",
          "[Added Lines]",
          "1087:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 5, byte_cnt, pkt_info->register_format, reg_base);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1121:                 proto_tree_add_item(group_tree, hf_modbus_reftype, tvb, group_offset, 1, ENC_BIG_ENDIAN);",
          "1122:                 proto_tree_add_item(group_tree, hf_modbus_lreference, tvb, group_offset + 1, 4, ENC_BIG_ENDIAN);",
          "1123:                 proto_tree_add_uint(group_tree, hf_modbus_wordcnt, tvb, group_offset + 5, 2, group_word_cnt);",
          "1125:                 group_offset += group_byte_cnt;",
          "1126:                 byte_cnt -= group_byte_cnt;",
          "1127:                 ii++;",
          "",
          "[Removed Lines]",
          "1124:                 dissect_modbus_data(tvb, pinfo, group_tree, function_code, group_offset + 7, group_byte_cnt - 7, register_format, reg_base);",
          "",
          "[Added Lines]",
          "1122:                 dissect_modbus_data(tvb, pinfo, group_tree, function_code, group_offset + 7, group_byte_cnt - 7, pkt_info->register_format, reg_base);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1141:             proto_tree_add_item(modbus_tree, hf_modbus_writewordcnt, tvb, payload_start + 6, 2, ENC_BIG_ENDIAN);",
          "1142:             byte_cnt = (guint32)tvb_get_guint8(tvb, payload_start + 8);",
          "1143:             proto_tree_add_uint(modbus_tree, hf_modbus_bytecnt, tvb, payload_start + 8, 1, byte_cnt);",
          "1145:             break;",
          "1147:         case READ_FIFO_QUEUE:",
          "",
          "[Removed Lines]",
          "1144:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 9, byte_cnt, register_format, reg_base);",
          "",
          "[Added Lines]",
          "1142:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 9, byte_cnt, pkt_info->register_format, reg_base);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1163:                 default:",
          "1164:                     if (payload_len > 1)",
          "1166:                     break;",
          "1167:             }",
          "",
          "[Removed Lines]",
          "1165:                         dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start, payload_len-1, register_format, reg_base);",
          "",
          "[Added Lines]",
          "1163:                         dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start, payload_len-1, pkt_info->register_format, reg_base);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1171:         case REPORT_SLAVE_ID:",
          "1172:         default:",
          "1173:             if (payload_len > 0)",
          "1175:             break;",
          "",
          "[Removed Lines]",
          "1174:                 dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start, payload_len, register_format, reg_base);",
          "",
          "[Added Lines]",
          "1172:                 dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start, payload_len, pkt_info->register_format, reg_base);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1183: static int",
          "1185: {",
          "1187:     proto_tree    *group_tree, *event_tree, *event_item_tree, *device_objects_tree, *device_objects_item_tree;",
          "1188:     proto_item    *mei;",
          "1189:     gint          byte_cnt, group_offset, event_index, object_index, object_len, num_objects, ii;",
          "1191:     guint8        object_type, mei_code, event_code;",
          "1193:     guint32       group_byte_cnt, group_word_cnt;",
          "1196:     proto_item            *request_frame_item;",
          "1227:     switch (function_code) {",
          "",
          "[Removed Lines]",
          "1184: dissect_modbus_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *modbus_tree, guint8 function_code, gint payload_start, gint payload_len)",
          "1192:     guint16       reg_base=0, diagnostic_code;",
          "1197:     modbus_conversation   *conv;",
          "1198:     guint8                req_function_code;",
          "1199:     guint32               req_frame_num;",
          "1200:     gboolean              request_found = FALSE;",
          "1201:     modbus_request_info_t *request_data;",
          "1204:     conv = (modbus_conversation *)p_get_proto_data(wmem_file_scope(), pinfo, proto_modbus, 0);",
          "1206:     if (conv) {",
          "1208:         wmem_list_frame_t *frame = wmem_list_head(conv->modbus_request_frame_data);",
          "1211:         while (frame && !request_found) {",
          "1212:             request_data = (modbus_request_info_t *)wmem_list_frame_data(frame);",
          "1213:             req_frame_num = request_data->fnum;",
          "1214:             req_function_code = request_data->function_code;",
          "1215:             if ((pinfo->num > req_frame_num) && (req_function_code == function_code)) {",
          "1216:                 request_frame_item = proto_tree_add_uint(modbus_tree, hf_modbus_request_frame, tvb, 0, 0, req_frame_num);",
          "1217:                 reg_base = request_data->base_address;",
          "1218:                 PROTO_ITEM_SET_GENERATED(request_frame_item);",
          "1219:                 request_found = TRUE;",
          "1220:             }",
          "1221:             frame = wmem_list_frame_next(frame);",
          "1222:         }",
          "1224:         register_format = conv->register_format;",
          "",
          "[Added Lines]",
          "1182: dissect_modbus_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *modbus_tree, guint8 function_code, gint payload_start, gint payload_len, modbus_pkt_info_t *pkt_info)",
          "1189:     guint16       diagnostic_code;",
          "1194:     if (pkt_info->request_found == TRUE) {",
          "1195:         request_frame_item = proto_tree_add_uint(modbus_tree, hf_modbus_request_frame, tvb, 0, 0, pkt_info->req_frame_num);",
          "1196:         PROTO_ITEM_SET_GENERATED(request_frame_item);",
          "1197:     }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1230:         case READ_DISCRETE_INPUTS:",
          "1231:             byte_cnt = (guint32)tvb_get_guint8(tvb, payload_start);",
          "1232:             proto_tree_add_uint(modbus_tree, hf_modbus_bytecnt, tvb, payload_start, 1, byte_cnt);",
          "1234:             break;",
          "1236:         case READ_HOLDING_REGS:",
          "1237:         case READ_INPUT_REGS:",
          "1238:             byte_cnt = (guint32)tvb_get_guint8(tvb, payload_start);",
          "1239:             proto_tree_add_uint(modbus_tree, hf_modbus_bytecnt, tvb, payload_start, 1, byte_cnt);",
          "1241:             break;",
          "1243:         case WRITE_SINGLE_COIL:",
          "1244:             proto_tree_add_item(modbus_tree, hf_modbus_reference, tvb, payload_start, 2, ENC_BIG_ENDIAN);",
          "1246:             proto_tree_add_item(modbus_tree, hf_modbus_padding, tvb, payload_start + 3, 1, ENC_NA);",
          "1247:             break;",
          "1249:         case WRITE_SINGLE_REG:",
          "1250:             proto_tree_add_item(modbus_tree, hf_modbus_reference, tvb, payload_start, 2, ENC_BIG_ENDIAN);",
          "1252:             break;",
          "1254:         case READ_EXCEPT_STAT:",
          "1256:             break;",
          "1258:         case DIAGNOSTICS:",
          "",
          "[Removed Lines]",
          "1233:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 1, byte_cnt, register_format, reg_base);",
          "1240:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 1, byte_cnt, register_format, reg_base);",
          "1245:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 2, 1, register_format, reg_base);",
          "1251:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 2, 2, register_format, reg_base);",
          "1255:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start, 1, register_format, reg_base);",
          "",
          "[Added Lines]",
          "1205:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 1, byte_cnt, pkt_info->register_format, pkt_info->reg_base);",
          "1212:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 1, byte_cnt, pkt_info->register_format, pkt_info->reg_base);",
          "1217:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 2, 1, pkt_info->register_format, pkt_info->reg_base);",
          "1223:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 2, 2, pkt_info->register_format, pkt_info->reg_base);",
          "1227:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start, 1, pkt_info->register_format, pkt_info->reg_base);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1305:                 default:",
          "1306:                     if (payload_len > 2)",
          "1308:                     break;",
          "1310:             break;",
          "",
          "[Removed Lines]",
          "1307:                         dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start+2, payload_len-2, register_format, reg_base);",
          "",
          "[Added Lines]",
          "1279:                         dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start+2, payload_len-2, pkt_info->register_format, pkt_info->reg_base);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1401:                 proto_tree_add_uint(group_tree, hf_modbus_bytecnt, tvb, group_offset, 1,",
          "1402:                         group_byte_cnt);",
          "1403:                 proto_tree_add_item(group_tree, hf_modbus_reftype, tvb, group_offset + 1, 1, ENC_BIG_ENDIAN);",
          "1405:                 group_offset += (group_byte_cnt + 1);",
          "1406:                 byte_cnt -= (group_byte_cnt + 1);",
          "1407:                 ii++;",
          "",
          "[Removed Lines]",
          "1404:                 dissect_modbus_data(tvb, pinfo, group_tree, function_code, group_offset + 2, group_byte_cnt - 1, register_format, reg_base);",
          "",
          "[Added Lines]",
          "1376:                 dissect_modbus_data(tvb, pinfo, group_tree, function_code, group_offset + 2, group_byte_cnt - 1, pkt_info->register_format, pkt_info->reg_base);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1423:                 proto_tree_add_item(group_tree, hf_modbus_reftype, tvb, group_offset, 1, ENC_BIG_ENDIAN);",
          "1424:                 proto_tree_add_item(group_tree, hf_modbus_lreference, tvb, group_offset + 1, 4, ENC_BIG_ENDIAN);",
          "1425:                 proto_tree_add_uint(group_tree, hf_modbus_wordcnt, tvb, group_offset + 5, 2, group_word_cnt);",
          "1427:                 group_offset += group_byte_cnt;",
          "1428:                 byte_cnt -= group_byte_cnt;",
          "1429:                 ii++;",
          "",
          "[Removed Lines]",
          "1426:                 dissect_modbus_data(tvb, pinfo, group_tree, function_code, group_offset + 7, group_byte_cnt - 7, register_format, reg_base);",
          "",
          "[Added Lines]",
          "1398:                 dissect_modbus_data(tvb, pinfo, group_tree, function_code, group_offset + 7, group_byte_cnt - 7, pkt_info->register_format, pkt_info->reg_base);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1439:         case READ_WRITE_REG:",
          "1440:             byte_cnt = (guint32)tvb_get_guint8(tvb, payload_start);",
          "1441:             proto_tree_add_uint(modbus_tree, hf_modbus_bytecnt, tvb, payload_start, 1, byte_cnt);",
          "1443:             break;",
          "1445:         case READ_FIFO_QUEUE:",
          "1446:             byte_cnt = (guint32)tvb_get_ntohs(tvb, payload_start);",
          "1447:             proto_tree_add_uint(modbus_tree, hf_modbus_lbytecnt, tvb, payload_start, 2, byte_cnt);",
          "1448:             proto_tree_add_item(modbus_tree, hf_modbus_wordcnt, tvb, payload_start + 2, 2, ENC_BIG_ENDIAN);",
          "1450:             break;",
          "1452:         case ENCAP_INTERFACE_TRANSP:",
          "",
          "[Removed Lines]",
          "1442:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 1, byte_cnt, register_format, reg_base);",
          "1449:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 4, byte_cnt - 2, register_format, reg_base);",
          "",
          "[Added Lines]",
          "1414:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 1, byte_cnt, pkt_info->register_format, pkt_info->reg_base);",
          "1421:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 4, byte_cnt - 2, pkt_info->register_format, pkt_info->reg_base);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1500:                 default:",
          "1501:                     if (payload_len > 1)",
          "1503:                     break;",
          "1505:             break;",
          "",
          "[Removed Lines]",
          "1502:                         dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start, payload_len-1, register_format, reg_base);",
          "",
          "[Added Lines]",
          "1474:                         dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start, payload_len-1, pkt_info->register_format, pkt_info->reg_base);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1507:         case REPORT_SLAVE_ID:",
          "1508:         default:",
          "1509:             if (payload_len > 0)",
          "1511:             break;",
          "",
          "[Removed Lines]",
          "1510:                 dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start, payload_len, register_format, reg_base);",
          "",
          "[Added Lines]",
          "1482:                 dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start, payload_len, pkt_info->register_format, pkt_info->reg_base);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1520: static int",
          "1521: dissect_modbus(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "1522: {",
          "1531:     if (packet_type == NULL)",
          "",
          "[Removed Lines]",
          "1523:     proto_tree    *modbus_tree;",
          "1524:     proto_item    *mi;",
          "1525:     int           offset = 0;",
          "1526:     int*          packet_type = (int*)data;",
          "1527:     gint          payload_start, payload_len, len;",
          "1528:     guint8        function_code, exception_code;",
          "",
          "[Added Lines]",
          "1495:     proto_tree          *modbus_tree;",
          "1496:     proto_item          *mi;",
          "1497:     int                 offset = 0;",
          "1498:     int*                packet_type = (int*)data;",
          "1499:     gint                payload_start, payload_len, len;",
          "1500:     guint8              function_code, exception_code;",
          "1501:     modbus_pkt_info_t   *pkt_info;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1553:         conversation = find_or_create_conversation(pinfo);",
          "1554:         modbus_conv_data = (modbus_conversation *)conversation_get_proto_data(conversation, proto_modbus);",
          "1556:         if (modbus_conv_data == NULL){",
          "1557:            modbus_conv_data = wmem_new(wmem_file_scope(), modbus_conversation);",
          "1558:            modbus_conv_data->modbus_request_frame_data = wmem_list_new(wmem_file_scope());",
          "1559:            modbus_conv_data->register_format = global_mbus_register_format;",
          "1560:            conversation_add_proto_data(conversation, proto_modbus, (void *)modbus_conv_data);",
          "1561:         }",
          "1565:         if (*packet_type == QUERY_PACKET) {",
          "",
          "[Removed Lines]",
          "1563:         p_add_proto_data(wmem_file_scope(), pinfo, proto_modbus, 0, modbus_conv_data);",
          "",
          "[Added Lines]",
          "1528:         pkt_info = wmem_new0(wmem_file_scope(), modbus_pkt_info_t);",
          "1534:            pkt_info->register_format = global_mbus_register_format;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1570:             frame_ptr->fnum = pinfo->num;",
          "1571:             frame_ptr->function_code = function_code;",
          "1573:             frame_ptr->num_reg = tvb_get_ntohs(tvb, 3);",
          "1575:             wmem_list_prepend(modbus_conv_data->modbus_request_frame_data, frame_ptr);",
          "1576:         }",
          "1581:     if (tvb_get_guint8(tvb, offset) & 0x80 ) {",
          "",
          "[Removed Lines]",
          "1572:             frame_ptr->base_address = tvb_get_ntohs(tvb, 1);",
          "",
          "[Added Lines]",
          "1546:             pkt_info->reg_base = frame_ptr->base_address = tvb_get_ntohs(tvb, 1);",
          "1551:         else if (*packet_type == RESPONSE_PACKET) {",
          "1552:             guint8                req_function_code;",
          "1553:             guint32               req_frame_num;",
          "1554:             modbus_request_info_t *request_data;",
          "1556:             wmem_list_frame_t *frame = wmem_list_head(modbus_conv_data->modbus_request_frame_data);",
          "1559:             while (frame && !pkt_info->request_found) {",
          "1560:                 request_data = (modbus_request_info_t *)wmem_list_frame_data(frame);",
          "1561:                 req_frame_num = request_data->fnum;",
          "1562:                 req_function_code = request_data->function_code;",
          "1563:                 if ((pinfo->num > req_frame_num) && (req_function_code == function_code)) {",
          "1564:                     pkt_info->reg_base = request_data->base_address;",
          "1565:                     pkt_info->request_found = TRUE;",
          "1566:                     pkt_info->req_frame_num = req_frame_num;",
          "1567:                 }",
          "1568:                 frame = wmem_list_frame_next(frame);",
          "1569:             }",
          "1572:         }",
          "1573:         p_add_proto_data(wmem_file_scope(), pinfo, proto_modbus, 0, pkt_info);",
          "1575:     }",
          "1577:         pkt_info = (modbus_pkt_info_t *)p_get_proto_data(wmem_file_scope(), pinfo, proto_modbus, 0);",
          "1578:     }",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1604:         if (*packet_type == QUERY_PACKET) {",
          "1606:         }",
          "1607:         else if (*packet_type == RESPONSE_PACKET) {",
          "1609:         }",
          "1611:     }",
          "",
          "[Removed Lines]",
          "1605:             dissect_modbus_request(tvb, pinfo, modbus_tree, function_code, payload_start, payload_len);",
          "1608:             dissect_modbus_response(tvb, pinfo, modbus_tree, function_code, payload_start, payload_len);",
          "",
          "[Added Lines]",
          "1606:             dissect_modbus_request(tvb, pinfo, modbus_tree, function_code, payload_start, payload_len, pkt_info);",
          "1609:             dissect_modbus_response(tvb, pinfo, modbus_tree, function_code, payload_start, payload_len, pkt_info);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1420e0a13a9721c064f72824ca58916f4d8cedcc",
      "candidate_info": {
        "commit_hash": "1420e0a13a9721c064f72824ca58916f4d8cedcc",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/1420e0a13a9721c064f72824ca58916f4d8cedcc",
        "files": [
          "epan/dissectors/packet-mbtcp.c"
        ],
        "message": "Modbus: Add dissection of each bit for holding coils and discrete inputs\n\nBug: 13734\nChange-Id: Ifd89bc1055edd7c123395ce0511594fc88d151a2\nReviewed-on: https://code.wireshark.org/review/21759\nReviewed-by: Graham Bloice <graham.bloice@trihedral.com>\nPetri-Dish: Graham Bloice <graham.bloice@trihedral.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-mbtcp.c||epan/dissectors/packet-mbtcp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-mbtcp.c||epan/dissectors/packet-mbtcp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-mbtcp.c||epan/dissectors/packet-mbtcp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-mbtcp.c||epan/dissectors/packet-mbtcp.c": [
          "File: epan/dissectors/packet-mbtcp.c -> epan/dissectors/packet-mbtcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141: static int hf_modbus_next_object_id = -1;",
          "142: static int hf_modbus_object_str_value = -1;",
          "143: static int hf_modbus_object_value = -1;",
          "144: static int hf_modbus_regnum16 = -1;",
          "145: static int hf_modbus_regnum32 = -1;",
          "146: static int hf_modbus_regval_uint16 = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144: static int hf_modbus_bitnum = -1;",
          "145: static int hf_modbus_bitval = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163: static gint ett_events_send = -1;",
          "164: static gint ett_device_id_objects = -1;",
          "165: static gint ett_device_id_object_items = -1;",
          "166: static gint ett_register = -1;",
          "168: static expert_field ei_mbrtu_crc16_incorrect = EI_INIT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168: static gint ett_bit = -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:     guint8  function_code;",
          "197:     gint    register_format;",
          "198:     guint16 reg_base;",
          "199:     guint32 req_frame_num;",
          "200:     gboolean request_found;",
          "201: } modbus_pkt_info_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "202:     guint16 num_reg;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "852: static void",
          "853: dissect_modbus_data(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint8 function_code,",
          "855: {",
          "856:     gint reported_len, data_offset;",
          "857:     gint16  data16s;",
          "858:     gint32  data32s;",
          "859:     guint16 data16, modflt_lo, modflt_hi, reg_num=reg_base;",
          "860:     guint32 data32, modflt_comb;",
          "861:     gfloat data_float, modfloat;",
          "862:     proto_item    *register_item = NULL;",
          "863:     proto_tree    *register_tree = NULL;",
          "864:     tvbuff_t *next_tvb;",
          "",
          "[Removed Lines]",
          "854:                     gint payload_start, gint payload_len, gint register_format, guint16 reg_base)",
          "",
          "[Added Lines]",
          "858:                     gint payload_start, gint payload_len, gint register_format, guint16 reg_base, guint16 num_reg)",
          "861:     guint8   data8, ii;",
          "862:     gboolean data_bool;",
          "868:     proto_tree    *bit_tree = NULL;",
          "869:     proto_item    *bitnum_ti = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "892:     next_tvb = tvb_new_subset_length_caplen(tvb, payload_start, payload_len, reported_len);",
          "894:     switch ( function_code ) {",
          "896:         case READ_HOLDING_REGS:",
          "897:         case READ_INPUT_REGS:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "903:         case READ_COILS:",
          "904:         case READ_DISCRETE_INPUTS:",
          "906:             while (data_offset < payload_len) {",
          "907:                 data8 = tvb_get_guint8(next_tvb, data_offset);",
          "908:                 for (ii = 0; ii < 8; ii++) {",
          "909:                     data_bool = (data8 & (1 << ii)) > 0;",
          "910:                     bit_tree = proto_tree_add_subtree_format(tree, next_tvb, data_offset, 1,",
          "911:                         ett_bit, NULL, \"Bit %u : %u\", reg_num, data_bool);",
          "912:                     bitnum_ti = proto_tree_add_uint(bit_tree, hf_modbus_bitnum, next_tvb, data_offset, 1, reg_num);",
          "913:                     PROTO_ITEM_SET_GENERATED(bitnum_ti);",
          "914:                     proto_tree_add_boolean(bit_tree, hf_modbus_bitval, next_tvb, data_offset, 1, data_bool);",
          "915:                     reg_num++;",
          "918:                     if ((reg_num - reg_base) >= num_reg) {",
          "919:                         break;",
          "920:                     }",
          "921:                 }",
          "922:                 data_offset++;",
          "923:             }",
          "924:             break;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1025:         case WRITE_SINGLE_COIL:",
          "1026:             proto_tree_add_item(modbus_tree, hf_modbus_reference, tvb, payload_start, 2, ENC_BIG_ENDIAN);",
          "1028:             proto_tree_add_item(modbus_tree, hf_modbus_padding, tvb, payload_start + 3, 1, ENC_NA);",
          "1029:             break;",
          "1031:         case WRITE_SINGLE_REG:",
          "1032:             proto_tree_add_item(modbus_tree, hf_modbus_reference, tvb, payload_start, 2, ENC_BIG_ENDIAN);",
          "1034:             break;",
          "1036:         case READ_EXCEPT_STAT:",
          "",
          "[Removed Lines]",
          "1027:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 2, 1, pkt_info->register_format, reg_base);",
          "1033:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 2, 2, pkt_info->register_format, reg_base);",
          "",
          "[Added Lines]",
          "1057:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 2, 1, pkt_info->register_format, reg_base, 0);",
          "1063:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 2, 2, pkt_info->register_format, reg_base, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1066:                 case CLEAR_OVERRUN_COUNTER_AND_FLAG:",
          "1067:                 default:",
          "1068:                     if (payload_len > 2)",
          "1070:                     break;",
          "1071:             }",
          "1072:             break;",
          "",
          "[Removed Lines]",
          "1069:                         dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start+2, payload_len-2, pkt_info->register_format, reg_base);",
          "",
          "[Added Lines]",
          "1099:                         dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start+2, payload_len-2, pkt_info->register_format, reg_base, 0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1075:             proto_tree_add_item(modbus_tree, hf_modbus_bitcnt, tvb, payload_start + 2, 2, ENC_BIG_ENDIAN);",
          "1076:             byte_cnt = (guint32)tvb_get_guint8(tvb, payload_start + 4);",
          "1077:             proto_tree_add_uint(modbus_tree, hf_modbus_bytecnt, tvb, payload_start + 4, 1, byte_cnt);",
          "1079:             break;",
          "1081:         case WRITE_MULT_REGS:",
          "",
          "[Removed Lines]",
          "1078:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 5, byte_cnt, pkt_info->register_format, reg_base);",
          "",
          "[Added Lines]",
          "1108:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 5, byte_cnt, pkt_info->register_format, reg_base, 0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1084:             proto_tree_add_item(modbus_tree, hf_modbus_wordcnt, tvb, payload_start + 2, 2, ENC_BIG_ENDIAN);",
          "1085:             byte_cnt = (guint32)tvb_get_guint8(tvb, payload_start + 4);",
          "1086:             proto_tree_add_uint(modbus_tree, hf_modbus_bytecnt, tvb, payload_start + 4, 1, byte_cnt);",
          "1088:             break;",
          "1090:         case READ_FILE_RECORD:",
          "",
          "[Removed Lines]",
          "1087:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 5, byte_cnt, pkt_info->register_format, reg_base);",
          "",
          "[Added Lines]",
          "1117:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 5, byte_cnt, pkt_info->register_format, reg_base, 0);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1119:                 proto_tree_add_item(group_tree, hf_modbus_reftype, tvb, group_offset, 1, ENC_BIG_ENDIAN);",
          "1120:                 proto_tree_add_item(group_tree, hf_modbus_lreference, tvb, group_offset + 1, 4, ENC_BIG_ENDIAN);",
          "1121:                 proto_tree_add_uint(group_tree, hf_modbus_wordcnt, tvb, group_offset + 5, 2, group_word_cnt);",
          "1123:                 group_offset += group_byte_cnt;",
          "1124:                 byte_cnt -= group_byte_cnt;",
          "1125:                 ii++;",
          "",
          "[Removed Lines]",
          "1122:                 dissect_modbus_data(tvb, pinfo, group_tree, function_code, group_offset + 7, group_byte_cnt - 7, pkt_info->register_format, reg_base);",
          "",
          "[Added Lines]",
          "1152:                 dissect_modbus_data(tvb, pinfo, group_tree, function_code, group_offset + 7, group_byte_cnt - 7, pkt_info->register_format, reg_base, 0);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1139:             proto_tree_add_item(modbus_tree, hf_modbus_writewordcnt, tvb, payload_start + 6, 2, ENC_BIG_ENDIAN);",
          "1140:             byte_cnt = (guint32)tvb_get_guint8(tvb, payload_start + 8);",
          "1141:             proto_tree_add_uint(modbus_tree, hf_modbus_bytecnt, tvb, payload_start + 8, 1, byte_cnt);",
          "1143:             break;",
          "1145:         case READ_FIFO_QUEUE:",
          "",
          "[Removed Lines]",
          "1142:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 9, byte_cnt, pkt_info->register_format, reg_base);",
          "",
          "[Added Lines]",
          "1172:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 9, byte_cnt, pkt_info->register_format, reg_base, 0);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1161:                 default:",
          "1162:                     if (payload_len > 1)",
          "1164:                     break;",
          "1165:             }",
          "",
          "[Removed Lines]",
          "1163:                         dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start, payload_len-1, pkt_info->register_format, reg_base);",
          "",
          "[Added Lines]",
          "1193:                         dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start, payload_len-1, pkt_info->register_format, reg_base, 0);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1169:         case REPORT_SLAVE_ID:",
          "1170:         default:",
          "1171:             if (payload_len > 0)",
          "1173:             break;",
          "",
          "[Removed Lines]",
          "1172:                 dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start, payload_len, pkt_info->register_format, reg_base);",
          "",
          "[Added Lines]",
          "1202:                 dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start, payload_len, pkt_info->register_format, reg_base, 0);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1202:         case READ_DISCRETE_INPUTS:",
          "1203:             byte_cnt = (guint32)tvb_get_guint8(tvb, payload_start);",
          "1204:             proto_tree_add_uint(modbus_tree, hf_modbus_bytecnt, tvb, payload_start, 1, byte_cnt);",
          "1206:             break;",
          "1208:         case READ_HOLDING_REGS:",
          "1209:         case READ_INPUT_REGS:",
          "1210:             byte_cnt = (guint32)tvb_get_guint8(tvb, payload_start);",
          "1211:             proto_tree_add_uint(modbus_tree, hf_modbus_bytecnt, tvb, payload_start, 1, byte_cnt);",
          "1213:             break;",
          "1215:         case WRITE_SINGLE_COIL:",
          "1216:             proto_tree_add_item(modbus_tree, hf_modbus_reference, tvb, payload_start, 2, ENC_BIG_ENDIAN);",
          "1218:             proto_tree_add_item(modbus_tree, hf_modbus_padding, tvb, payload_start + 3, 1, ENC_NA);",
          "1219:             break;",
          "1221:         case WRITE_SINGLE_REG:",
          "1222:             proto_tree_add_item(modbus_tree, hf_modbus_reference, tvb, payload_start, 2, ENC_BIG_ENDIAN);",
          "1224:             break;",
          "1226:         case READ_EXCEPT_STAT:",
          "1228:             break;",
          "1230:         case DIAGNOSTICS:",
          "",
          "[Removed Lines]",
          "1205:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 1, byte_cnt, pkt_info->register_format, pkt_info->reg_base);",
          "1212:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 1, byte_cnt, pkt_info->register_format, pkt_info->reg_base);",
          "1217:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 2, 1, pkt_info->register_format, pkt_info->reg_base);",
          "1223:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 2, 2, pkt_info->register_format, pkt_info->reg_base);",
          "1227:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start, 1, pkt_info->register_format, pkt_info->reg_base);",
          "",
          "[Added Lines]",
          "1235:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 1, byte_cnt, pkt_info->register_format, pkt_info->reg_base, pkt_info->num_reg);",
          "1242:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 1, byte_cnt, pkt_info->register_format, pkt_info->reg_base, 0);",
          "1247:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 2, 1, pkt_info->register_format, pkt_info->reg_base, 0);",
          "1253:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 2, 2, pkt_info->register_format, pkt_info->reg_base, 0);",
          "1257:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start, 1, pkt_info->register_format, pkt_info->reg_base, 0);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1277:                 default:",
          "1278:                     if (payload_len > 2)",
          "1280:                     break;",
          "1282:             break;",
          "",
          "[Removed Lines]",
          "1279:                         dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start+2, payload_len-2, pkt_info->register_format, pkt_info->reg_base);",
          "",
          "[Added Lines]",
          "1309:                         dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start+2, payload_len-2, pkt_info->register_format, pkt_info->reg_base, 0);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1373:                 proto_tree_add_uint(group_tree, hf_modbus_bytecnt, tvb, group_offset, 1,",
          "1374:                         group_byte_cnt);",
          "1375:                 proto_tree_add_item(group_tree, hf_modbus_reftype, tvb, group_offset + 1, 1, ENC_BIG_ENDIAN);",
          "1377:                 group_offset += (group_byte_cnt + 1);",
          "1378:                 byte_cnt -= (group_byte_cnt + 1);",
          "1379:                 ii++;",
          "",
          "[Removed Lines]",
          "1376:                 dissect_modbus_data(tvb, pinfo, group_tree, function_code, group_offset + 2, group_byte_cnt - 1, pkt_info->register_format, pkt_info->reg_base);",
          "",
          "[Added Lines]",
          "1406:                 dissect_modbus_data(tvb, pinfo, group_tree, function_code, group_offset + 2, group_byte_cnt - 1, pkt_info->register_format, pkt_info->reg_base, 0);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1395:                 proto_tree_add_item(group_tree, hf_modbus_reftype, tvb, group_offset, 1, ENC_BIG_ENDIAN);",
          "1396:                 proto_tree_add_item(group_tree, hf_modbus_lreference, tvb, group_offset + 1, 4, ENC_BIG_ENDIAN);",
          "1397:                 proto_tree_add_uint(group_tree, hf_modbus_wordcnt, tvb, group_offset + 5, 2, group_word_cnt);",
          "1399:                 group_offset += group_byte_cnt;",
          "1400:                 byte_cnt -= group_byte_cnt;",
          "1401:                 ii++;",
          "",
          "[Removed Lines]",
          "1398:                 dissect_modbus_data(tvb, pinfo, group_tree, function_code, group_offset + 7, group_byte_cnt - 7, pkt_info->register_format, pkt_info->reg_base);",
          "",
          "[Added Lines]",
          "1428:                 dissect_modbus_data(tvb, pinfo, group_tree, function_code, group_offset + 7, group_byte_cnt - 7, pkt_info->register_format, pkt_info->reg_base, 0);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1411:         case READ_WRITE_REG:",
          "1412:             byte_cnt = (guint32)tvb_get_guint8(tvb, payload_start);",
          "1413:             proto_tree_add_uint(modbus_tree, hf_modbus_bytecnt, tvb, payload_start, 1, byte_cnt);",
          "1415:             break;",
          "1417:         case READ_FIFO_QUEUE:",
          "1418:             byte_cnt = (guint32)tvb_get_ntohs(tvb, payload_start);",
          "1419:             proto_tree_add_uint(modbus_tree, hf_modbus_lbytecnt, tvb, payload_start, 2, byte_cnt);",
          "1420:             proto_tree_add_item(modbus_tree, hf_modbus_wordcnt, tvb, payload_start + 2, 2, ENC_BIG_ENDIAN);",
          "1422:             break;",
          "1424:         case ENCAP_INTERFACE_TRANSP:",
          "",
          "[Removed Lines]",
          "1414:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 1, byte_cnt, pkt_info->register_format, pkt_info->reg_base);",
          "1421:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 4, byte_cnt - 2, pkt_info->register_format, pkt_info->reg_base);",
          "",
          "[Added Lines]",
          "1444:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 1, byte_cnt, pkt_info->register_format, pkt_info->reg_base, 0);",
          "1451:             dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start + 4, byte_cnt - 2, pkt_info->register_format, pkt_info->reg_base, 0);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1472:                 default:",
          "1473:                     if (payload_len > 1)",
          "1475:                     break;",
          "1477:             break;",
          "",
          "[Removed Lines]",
          "1474:                         dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start, payload_len-1, pkt_info->register_format, pkt_info->reg_base);",
          "",
          "[Added Lines]",
          "1504:                         dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start, payload_len-1, pkt_info->register_format, pkt_info->reg_base, 0);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1479:         case REPORT_SLAVE_ID:",
          "1480:         default:",
          "1481:             if (payload_len > 0)",
          "1483:             break;",
          "",
          "[Removed Lines]",
          "1482:                 dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start, payload_len, pkt_info->register_format, pkt_info->reg_base);",
          "",
          "[Added Lines]",
          "1512:                 dissect_modbus_data(tvb, pinfo, modbus_tree, function_code, payload_start, payload_len, pkt_info->register_format, pkt_info->reg_base, 0);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1544:             frame_ptr->fnum = pinfo->num;",
          "1545:             frame_ptr->function_code = function_code;",
          "1546:             pkt_info->reg_base = frame_ptr->base_address = tvb_get_ntohs(tvb, 1);",
          "1549:             wmem_list_prepend(modbus_conv_data->modbus_request_frame_data, frame_ptr);",
          "1550:         }",
          "",
          "[Removed Lines]",
          "1547:             frame_ptr->num_reg = tvb_get_ntohs(tvb, 3);",
          "",
          "[Added Lines]",
          "1577:             pkt_info->num_reg = frame_ptr->num_reg = tvb_get_ntohs(tvb, 3);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1562:                 req_function_code = request_data->function_code;",
          "1563:                 if ((pinfo->num > req_frame_num) && (req_function_code == function_code)) {",
          "1564:                     pkt_info->reg_base = request_data->base_address;",
          "1565:                     pkt_info->request_found = TRUE;",
          "1566:                     pkt_info->req_frame_num = req_frame_num;",
          "1567:                 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1595:                     pkt_info->num_reg = request_data->num_reg;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1978:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "1979:             NULL, HFILL }",
          "1980:         },",
          "1981:         { &hf_modbus_regnum16,",
          "1982:             { \"Register Number\", \"modbus.regnum16\",",
          "1983:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2012:         { &hf_modbus_bitnum,",
          "2013:             { \"Bit Number\", \"modbus.bitnum\",",
          "2014:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "2015:             NULL, HFILL }",
          "2016:         },",
          "2017:         { &hf_modbus_bitval,",
          "2018:             { \"Bit Value\", \"modbus.bitval\",",
          "2019:             FT_BOOLEAN, 8, NULL, 0x01,",
          "2020:             NULL, HFILL }",
          "2021:         },",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2031:         &ett_events_send,",
          "2032:         &ett_device_id_objects,",
          "2033:         &ett_device_id_object_items,",
          "2034:         &ett_register",
          "2035:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2075:         &ett_bit,",
          "",
          "---------------"
        ]
      }
    }
  ]
}