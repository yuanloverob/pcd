{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "97e4b3a7bff68b6f19edca8d1ca3ea540667fbd3",
      "candidate_info": {
        "commit_hash": "97e4b3a7bff68b6f19edca8d1ca3ea540667fbd3",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/97e4b3a7bff68b6f19edca8d1ca3ea540667fbd3",
        "files": [
          "src/node_isolate.cc",
          "test/simple/test-isolates-ping-pong.js"
        ],
        "message": "isolates: drain message queue completely",
        "before_after_code_files": [
          "src/node_isolate.cc||src/node_isolate.cc",
          "test/simple/test-isolates-ping-pong.js||test/simple/test-isolates-ping-pong.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_isolate.cc||src/node_isolate.cc": [
          "File: src/node_isolate.cc -> src/node_isolate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:     uv_mutex_unlock(&mutex_);",
          "88:   }",
          "91:     uv_mutex_lock(&mutex_);",
          "94:     uv_mutex_unlock(&mutex_);",
          "96:     Message* m = ngx_queue_data(q, Message, queue_);",
          "98:     delete m;",
          "101:   }",
          "103: private:",
          "",
          "[Removed Lines]",
          "90:   T Consume() {",
          "92:     ngx_queue_t* q = ngx_queue_head(&queue_);",
          "93:     ngx_queue_remove(q);",
          "97:     T item = m->item_;",
          "100:     return item;",
          "",
          "[Added Lines]",
          "90:   bool Consume(T& item) {",
          "91:     ngx_queue_t* q = NULL;",
          "94:     if (!ngx_queue_empty(&queue_)) {",
          "95:       q = ngx_queue_head(&queue_);",
          "96:       ngx_queue_remove(q);",
          "97:     }",
          "100:     if (q == NULL) return false;",
          "103:     item = m->item_;",
          "106:     return true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:   }",
          "142:   void OnMessage() {",
          "145:   }",
          "147:   void* arg_;",
          "",
          "[Removed Lines]",
          "143:     T item = queue_.Consume();",
          "144:     callback_(item, arg_);",
          "",
          "[Added Lines]",
          "149:     T item;",
          "150:     while (queue_.Consume(item)) callback_(item, arg_);",
          "",
          "---------------"
        ],
        "test/simple/test-isolates-ping-pong.js||test/simple/test-isolates-ping-pong.js": [
          "File: test/simple/test-isolates-ping-pong.js -> test/simple/test-isolates-ping-pong.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: var isolates = process.binding('isolates');",
          "5: if (process.tid === 1)",
          "6:   master();",
          "",
          "[Removed Lines]",
          "3: var N = 4; // # of child isolates",
          "",
          "[Added Lines]",
          "2: var assert = require('assert');",
          "4: var N_ISOLATES = 4;",
          "5: var N_MESSAGES = 20;",
          "6: var N_MESSAGES_PER_TICK = 4;",
          "8: assert(N_MESSAGES % N_MESSAGES_PER_TICK == 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8:   child();",
          "10: function master() {",
          "13:   function spawn() {",
          "14:     var isolate = isolates.create(process.argv);",
          "15:     isolate.onexit = function() {",
          "17:     };",
          "21:     };",
          "22:   }",
          "23: }",
          "25: function child() {",
          "28:   function send() {",
          "32:   }",
          "34:   send();",
          "36:   process._onmessage = function(m) {",
          "38:   };",
          "39: }",
          "",
          "[Removed Lines]",
          "11:   for (var i = 0; i < N; ++i) spawn();",
          "16:       console.error(\"onexit isolate #%d\", isolate.tid);",
          "18:     isolate.onmessage = function(m) {",
          "19:       console.error(\"parent received message '%s'\", m);",
          "20:       isolate.send(Buffer('ACK ' + m));",
          "26:   var n = 0;",
          "29:     if (++n > 10) return;",
          "30:     process._send(Buffer('SYN' + n));",
          "31:     setTimeout(send, 10);",
          "37:     console.error(\"child %d received message '%s'\", process.tid, m);",
          "",
          "[Added Lines]",
          "16:   for (var i = 0; i < N_ISOLATES; ++i) spawn();",
          "21:     var gotExit = false; // exit event emitted?",
          "22:     var msgId = 0; // message IDs seen so far",
          "23:     var tick = 0;",
          "26:       gotExit = true;",
          "29:     isolate.onmessage = function(buf) {",
          "30:       var msg = JSON.parse(buf);",
          "31:       assert.equal(msg.id, msgId + 1); // verify that messages arrive in order",
          "32:       assert.equal(msg.tick, tick); // and on the proper tick (=full mq drain)",
          "33:       msgId = msg.id;",
          "34:       if (msgId % N_MESSAGES_PER_TICK == 0) tick++;",
          "35:       isolate.send(buf);",
          "38:     process.on('exit', function() {",
          "39:       assert.equal(gotExit, true);",
          "40:       assert.equal(msgId, N_MESSAGES);",
          "41:       assert.equal(tick, N_MESSAGES / N_MESSAGES_PER_TICK);",
          "42:     });",
          "47:   var msgId = 0;",
          "48:   var tick = 0;",
          "53:     for (var i = 0; i < N_MESSAGES_PER_TICK; ++i) {",
          "54:       process.send({tick:tick, id:++msgId});",
          "55:     }",
          "57:     if (msgId < N_MESSAGES) {",
          "58:       setTimeout(send, 10);",
          "59:     }",
          "61:     tick++;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0ce98441ff7315e6a6c268dabcec58fc37da926",
      "candidate_info": {
        "commit_hash": "f0ce98441ff7315e6a6c268dabcec58fc37da926",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f0ce98441ff7315e6a6c268dabcec58fc37da926",
        "files": [
          "lib/fs.js",
          "node.gyp",
          "src/node.cc",
          "src/node_file.cc",
          "src/node_stat_watcher.cc",
          "src/node_stat_watcher.h",
          "test/pummel/test-fs-watch-file.js",
          "test/pummel/test-watch-file.js"
        ],
        "message": "fs: make fs.watchFile() work on windows",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "node.gyp||node.gyp",
          "src/node.cc||src/node.cc",
          "src/node_file.cc||src/node_file.cc",
          "src/node_stat_watcher.cc||src/node_stat_watcher.cc",
          "src/node_stat_watcher.h||src/node_stat_watcher.h",
          "test/pummel/test-fs-watch-file.js||test/pummel/test-fs-watch-file.js",
          "test/pummel/test-watch-file.js||test/pummel/test-watch-file.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "876:   var self = this;",
          "877:   this._handle = new binding.StatWatcher();",
          "880:     self.emit('change', current, previous);",
          "881:   };",
          "",
          "[Removed Lines]",
          "879:   this._handle.onchange = function(current, previous) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "907: fs.watchFile = function(filename) {",
          "912:   var stat;",
          "913:   var options;",
          "914:   var listener;",
          "",
          "[Removed Lines]",
          "908:   if (isWindows) {",
          "909:     throw new Error('use fs.watch api instead');",
          "910:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "node.gyp||node.gyp": [
          "File: node.gyp -> node.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:         'src/node_main.cc',",
          "83:         'src/node_os.cc',",
          "84:         'src/node_script.cc',",
          "85:         'src/node_string.cc',",
          "86:         'src/node_zlib.cc',",
          "87:         'src/pipe_wrap.cc',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:         'src/node_stat_watcher.cc',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "208:           'defines': [ '__POSIX__' ],",
          "209:           'sources': [",
          "210:             'src/node_signal_watcher.cc',",
          "212:             'src/node_io_watcher.cc',",
          "213:           ]",
          "214:         }],",
          "",
          "[Removed Lines]",
          "211:             'src/node_stat_watcher.cc',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: #include \"node_http_parser.h\"",
          "70: #ifdef __POSIX__",
          "71: # include \"node_signal_watcher.h\"",
          "73: #endif",
          "74: #include \"node_constants.h\"",
          "75: #include \"node_javascript.h\"",
          "",
          "[Removed Lines]",
          "72: # include \"node_stat_watcher.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node_file.cc||src/node_file.cc": [
          "File: src/node_file.cc -> src/node_file.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"node.h\"",
          "23: #include \"node_file.h\"",
          "24: #include \"node_buffer.h\"",
          "28: #include \"req_wrap.h\"",
          "30: #include <fcntl.h>",
          "",
          "[Removed Lines]",
          "25: #ifdef __POSIX__",
          "26: # include \"node_stat_watcher.h\"",
          "27: #endif",
          "",
          "[Added Lines]",
          "25: #include \"node_stat_watcher.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "985:   oncomplete_sym = NODE_PSYMBOL(\"oncomplete\");",
          "988:   StatWatcher::Initialize(target);",
          "990: }",
          "992: }  // end namespace node",
          "",
          "[Removed Lines]",
          "987: #ifdef __POSIX__",
          "989: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node_stat_watcher.cc||src/node_stat_watcher.cc": [
          "File: src/node_stat_watcher.cc -> src/node_stat_watcher.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <string.h>",
          "26: #include <stdlib.h>",
          "28: namespace node {",
          "30: using namespace v8;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #define DEFAULT_POLL_INTERVAL 5007",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: }",
          "55:   HandleScope scope;",
          "59:   if (onchange_sym.IsEmpty()) {",
          "60:     onchange_sym = NODE_PSYMBOL(\"onchange\");",
          "61:   }",
          "63: }",
          "",
          "[Removed Lines]",
          "51: void StatWatcher::Callback(EV_P_ ev_stat *watcher, int revents) {",
          "52:   assert(revents == EV_STAT);",
          "53:   StatWatcher *handler = static_cast<StatWatcher*>(watcher->data);",
          "54:   assert(watcher == &handler->watcher_);",
          "56:   Local<Value> argv[2];",
          "57:   argv[0] = BuildStatsObject(&watcher->attr);",
          "58:   argv[1] = BuildStatsObject(&watcher->prev);",
          "62:   MakeCallback(handler->handle_, onchange_sym, ARRAY_SIZE(argv), argv);",
          "",
          "[Added Lines]",
          "57: void StatWatcher::Callback(uv_fs_poll_t* handle,",
          "58:                            int status,",
          "59:                            const uv_statbuf_t* prev,",
          "60:                            const uv_statbuf_t* curr) {",
          "61:   StatWatcher* wrap = container_of(handle, StatWatcher, watcher_);",
          "62:   assert(handle == &wrap->watcher_);",
          "64:   Local<Value> argv[3];",
          "65:   argv[0] = BuildStatsObject(curr);",
          "66:   argv[1] = BuildStatsObject(prev);",
          "67:   argv[2] = Integer::New(status);",
          "68:   if (status == -1) {",
          "69:     SetErrno(uv_last_error(wrap->watcher_.loop));",
          "70:   }",
          "74:   MakeCallback(wrap->handle_, onchange_sym, ARRAY_SIZE(argv), argv);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:   }",
          "71:   HandleScope scope;",
          "73:   s->Wrap(args.Holder());",
          "74:   return args.This();",
          "75: }",
          "",
          "[Removed Lines]",
          "72:   StatWatcher *s = new StatWatcher();",
          "",
          "[Added Lines]",
          "84:   StatWatcher* s = new StatWatcher();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "82:     return ThrowException(Exception::TypeError(String::New(\"Bad arguments\")));",
          "83:   }",
          "86:   String::Utf8Value path(args[0]);",
          "94:   }",
          "103:   }",
          "107:   return Undefined();",
          "108: }",
          "",
          "[Removed Lines]",
          "85:   StatWatcher *handler = ObjectWrap::Unwrap<StatWatcher>(args.Holder());",
          "88:   assert(handler->path_ == NULL);",
          "89:   handler->path_ = strdup(*path);",
          "91:   ev_tstamp interval = 0.;",
          "92:   if (args[2]->IsInt32()) {",
          "93:     interval = NODE_V8_UNIXTIME(args[2]);",
          "96:   ev_stat_set(&handler->watcher_, handler->path_, interval);",
          "97:   ev_stat_start(EV_DEFAULT_UC_ &handler->watcher_);",
          "99:   handler->persistent_ = args[1]->IsTrue();",
          "101:   if (!handler->persistent_) {",
          "102:     ev_unref(EV_DEFAULT_UC);",
          "105:   handler->Ref();",
          "",
          "[Added Lines]",
          "97:   StatWatcher* wrap = ObjectWrap::Unwrap<StatWatcher>(args.Holder());",
          "100:   uint32_t interval = DEFAULT_POLL_INTERVAL;",
          "101:   if (args[2]->IsUint32()) {",
          "102:     interval = args[2]->Uint32Value();",
          "105:   uv_fs_poll_start(&wrap->watcher_, Callback, *path, interval);",
          "107:   wrap->persistent_ = args[1]->IsTrue();",
          "109:   if (!wrap->persistent_) {",
          "110:     uv_unref(reinterpret_cast<uv_handle_t*>(&wrap->watcher_));",
          "113:   wrap->Ref();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "111: Handle<Value> StatWatcher::Stop(const Arguments& args) {",
          "112:   HandleScope scope;",
          "114:   if (onstop_sym.IsEmpty()) {",
          "115:     onstop_sym = NODE_PSYMBOL(\"onstop\");",
          "116:   }",
          "119:   return Undefined();",
          "120: }",
          "123: void StatWatcher::Stop () {",
          "131: }",
          "",
          "[Removed Lines]",
          "113:   StatWatcher *handler = ObjectWrap::Unwrap<StatWatcher>(args.Holder());",
          "117:   MakeCallback(handler->handle_, onstop_sym, 0, NULL);",
          "118:   handler->Stop();",
          "124:   if (watcher_.active) {",
          "125:     if (!persistent_) ev_ref(EV_DEFAULT_UC);",
          "126:     ev_stat_stop(EV_DEFAULT_UC_ &watcher_);",
          "127:     free(path_);",
          "128:     path_ = NULL;",
          "129:     Unref();",
          "130:   }",
          "",
          "[Added Lines]",
          "121:   StatWatcher* wrap = ObjectWrap::Unwrap<StatWatcher>(args.Holder());",
          "125:   MakeCallback(wrap->handle_, onstop_sym, 0, NULL);",
          "126:   wrap->Stop();",
          "132:   if (!uv_is_active(reinterpret_cast<uv_handle_t*>(&watcher_))) return;",
          "133:   uv_fs_poll_stop(&watcher_);",
          "134:   Unref();",
          "",
          "---------------"
        ],
        "src/node_stat_watcher.h||src/node_stat_watcher.h": [
          "File: src/node_stat_watcher.h -> src/node_stat_watcher.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #define NODE_STAT_WATCHER_H_",
          "25: #include \"node.h\"",
          "28: namespace node {",
          "",
          "[Removed Lines]",
          "26: #include \"uv-private/ev.h\"",
          "",
          "[Added Lines]",
          "26: #include \"uv.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:   StatWatcher() : ObjectWrap() {",
          "38:     persistent_ = false;",
          "42:   }",
          "44:   ~StatWatcher() {",
          "45:     Stop();",
          "47:   }",
          "49:   static v8::Handle<v8::Value> New(const v8::Arguments& args);",
          "",
          "[Removed Lines]",
          "39:     path_ = NULL;",
          "40:     ev_init(&watcher_, StatWatcher::Callback);",
          "41:     watcher_.data = this;",
          "46:     assert(path_ == NULL);",
          "",
          "[Added Lines]",
          "39:     uv_fs_poll_init(uv_default_loop(), &watcher_);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:   static v8::Handle<v8::Value> Stop(const v8::Arguments& args);",
          "53:  private:",
          "56:   void Stop();",
          "59:   bool persistent_;",
          "61: };",
          "63: }  // namespace node",
          "",
          "[Removed Lines]",
          "54:   static void Callback(EV_P_ ev_stat *watcher, int revents);",
          "58:   ev_stat watcher_;",
          "60:   char *path_;",
          "",
          "[Added Lines]",
          "51:   static void Callback(uv_fs_poll_t* handle,",
          "52:                        int status,",
          "53:                        const uv_statbuf_t* prev,",
          "54:                        const uv_statbuf_t* curr);",
          "58:   uv_fs_poll_t watcher_;",
          "",
          "---------------"
        ],
        "test/pummel/test-fs-watch-file.js||test/pummel/test-fs-watch-file.js": [
          "File: test/pummel/test-fs-watch-file.js -> test/pummel/test-fs-watch-file.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: var common = require('../common');",
          "29: var assert = require('assert');",
          "30: var path = require('path');",
          "",
          "[Removed Lines]",
          "23: if (process.platform === 'win32') {",
          "24:   process.exit(0);",
          "25: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/pummel/test-watch-file.js||test/pummel/test-watch-file.js": [
          "File: test/pummel/test-watch-file.js -> test/pummel/test-watch-file.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: var common = require('../common');",
          "28: var assert = require('assert');",
          "",
          "[Removed Lines]",
          "23: if (process.platform === 'win32') {",
          "24:   process.exit(0);",
          "25: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "45de259b436ab1bbeb15d7f582f29e795f162202",
      "candidate_info": {
        "commit_hash": "45de259b436ab1bbeb15d7f582f29e795f162202",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/45de259b436ab1bbeb15d7f582f29e795f162202",
        "files": [
          "src/fs_event_wrap.cc",
          "src/handle_wrap.cc",
          "src/node_internals.h",
          "src/pipe_wrap.cc",
          "src/process_wrap.cc",
          "src/stream_wrap.cc",
          "src/tcp_wrap.cc",
          "src/timer_wrap.cc",
          "src/tty_wrap.cc",
          "src/udp_wrap.cc"
        ],
        "message": "Make UNWRAP macro generic.",
        "before_after_code_files": [
          "src/fs_event_wrap.cc||src/fs_event_wrap.cc",
          "src/handle_wrap.cc||src/handle_wrap.cc",
          "src/node_internals.h||src/node_internals.h",
          "src/pipe_wrap.cc||src/pipe_wrap.cc",
          "src/process_wrap.cc||src/process_wrap.cc",
          "src/stream_wrap.cc||src/stream_wrap.cc",
          "src/tcp_wrap.cc||src/tcp_wrap.cc",
          "src/timer_wrap.cc||src/timer_wrap.cc",
          "src/tty_wrap.cc||src/tty_wrap.cc",
          "src/udp_wrap.cc||src/udp_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/fs_event_wrap.cc||src/fs_event_wrap.cc": [
          "File: src/fs_event_wrap.cc -> src/fs_event_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: static Persistent<String> onchange_sym;",
          "45: class FSEventWrap: public HandleWrap {",
          "46: public:",
          "47:   static void Initialize(Handle<Object> target);",
          "",
          "[Removed Lines]",
          "33: #define UNWRAP                                                              \\",
          "34:   assert(!args.Holder().IsEmpty());                                         \\",
          "35:   assert(args.Holder()->InternalFieldCount() > 0);                          \\",
          "36:   FSEventWrap* wrap =                                                       \\",
          "37:       static_cast<FSEventWrap*>(args.Holder()->GetPointerFromInternalField(0)); \\",
          "38:   if (!wrap) {                                                              \\",
          "39:     uv_err_t err;                                                           \\",
          "40:     err.code = UV_EBADF;                                                    \\",
          "41:     SetErrno(err);                                                          \\",
          "42:     return scope.Close(Integer::New(-1));                                   \\",
          "43:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103: Handle<Value> FSEventWrap::Start(const Arguments& args) {",
          "104:   HandleScope scope;",
          "108:   if (args.Length() < 1 || !args[0]->IsString()) {",
          "109:     return ThrowException(Exception::TypeError(String::New(\"Bad arguments\")));",
          "",
          "[Removed Lines]",
          "106:   UNWRAP",
          "",
          "[Added Lines]",
          "94:   UNWRAP(FSEventWrap)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "178: Handle<Value> FSEventWrap::Close(const Arguments& args) {",
          "179:   HandleScope scope;",
          "183:   if (!wrap->initialized_)",
          "184:     return Undefined();",
          "",
          "[Removed Lines]",
          "181:   UNWRAP",
          "",
          "[Added Lines]",
          "169:   UNWRAP(FSEventWrap)",
          "",
          "---------------"
        ],
        "src/handle_wrap.cc||src/handle_wrap.cc": [
          "File: src/handle_wrap.cc -> src/handle_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: using v8::Integer;",
          "58: extern ngx_queue_t handle_wrap_queue;",
          "",
          "[Removed Lines]",
          "44: #define UNWRAP \\",
          "45:   assert(!args.Holder().IsEmpty()); \\",
          "46:   assert(args.Holder()->InternalFieldCount() > 0); \\",
          "47:   HandleWrap* wrap =  \\",
          "48:       static_cast<HandleWrap*>(args.Holder()->GetPointerFromInternalField(0)); \\",
          "49:   if (!wrap) { \\",
          "50:     uv_err_t err; \\",
          "51:     err.code = UV_EBADF; \\",
          "52:     SetErrno(err); \\",
          "53:     return scope.Close(Integer::New(-1)); \\",
          "54:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68: Handle<Value> HandleWrap::Unref(const Arguments& args) {",
          "69:   HandleScope scope;",
          "74:   if (wrap->unref) {",
          "",
          "[Removed Lines]",
          "71:   UNWRAP",
          "",
          "[Added Lines]",
          "58:   UNWRAP(HandleWrap)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86: Handle<Value> HandleWrap::Ref(const Arguments& args) {",
          "87:   HandleScope scope;",
          "92:   if (!wrap->unref) {",
          "",
          "[Removed Lines]",
          "89:   UNWRAP",
          "",
          "[Added Lines]",
          "76:   UNWRAP(HandleWrap)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103: Handle<Value> HandleWrap::Close(const Arguments& args) {",
          "104:   HandleScope scope;",
          "118:   return v8::Null();",
          "119: }",
          "",
          "[Removed Lines]",
          "106:   UNWRAP",
          "109:   if (wrap->handle__ == NULL) return v8::Null();",
          "110:   assert(!wrap->object_.IsEmpty());",
          "111:   uv_close(wrap->handle__, OnClose);",
          "112:   wrap->handle__ = NULL;",
          "114:   HandleWrap::Ref(args);",
          "116:   wrap->StateChange();",
          "",
          "[Added Lines]",
          "93:   HandleWrap *wrap = static_cast<HandleWrap*>(",
          "94:       args.Holder()->GetPointerFromInternalField(0));",
          "96:   if (wrap) {",
          "98:     if (wrap->handle__ == NULL) return v8::Null();",
          "99:     assert(!wrap->object_.IsEmpty());",
          "100:     uv_close(wrap->handle__, OnClose);",
          "101:     wrap->handle__ = NULL;",
          "103:     HandleWrap::Ref(args);",
          "105:     wrap->StateChange();",
          "106:   }",
          "",
          "---------------"
        ],
        "src/node_internals.h||src/node_internals.h": [
          "File: src/node_internals.h -> src/node_internals.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #ifndef SRC_NODE_INTERNALS_H_",
          "23: #define SRC_NODE_INTERNALS_H_",
          "25: #include \"v8.h\"",
          "27: namespace node {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include <stdlib.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:   THROW_ERROR(v8::Exception::RangeError);",
          "82: }",
          "84: } // namespace node",
          "86: #endif // SRC_NODE_INTERNALS_H_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: #define UNWRAP(type)                                                        \\",
          "87:   assert(!args.Holder().IsEmpty());                                         \\",
          "88:   assert(args.Holder()->InternalFieldCount() > 0);                          \\",
          "89:   type* wrap =                                                              \\",
          "90:       static_cast<type*>(args.Holder()->GetPointerFromInternalField(0));    \\",
          "91:   if (!wrap) {                                                              \\",
          "92:     fprintf(stderr, #type \": Aborting due to unwrap failure at %s:%d\\n\",    \\",
          "93:             __FILE__, __LINE__);                                            \\",
          "94:     abort();                                                                \\",
          "95:   }",
          "",
          "---------------"
        ],
        "src/pipe_wrap.cc||src/pipe_wrap.cc": [
          "File: src/pipe_wrap.cc -> src/pipe_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"stream_wrap.h\"",
          "27: #include \"pipe_wrap.h\"",
          "41: namespace node {",
          "43: using v8::Object;",
          "",
          "[Removed Lines]",
          "29: #define UNWRAP \\",
          "30:   assert(!args.Holder().IsEmpty()); \\",
          "31:   assert(args.Holder()->InternalFieldCount() > 0); \\",
          "32:   PipeWrap* wrap =  \\",
          "33:       static_cast<PipeWrap*>(args.Holder()->GetPointerFromInternalField(0)); \\",
          "34:   if (!wrap) { \\",
          "35:     uv_err_t err; \\",
          "36:     err.code = UV_EBADF; \\",
          "37:     SetErrno(err); \\",
          "38:     return scope.Close(Integer::New(-1)); \\",
          "39:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149: Handle<Value> PipeWrap::Bind(const Arguments& args) {",
          "150:   HandleScope scope;",
          "154:   String::AsciiValue name(args[0]);",
          "",
          "[Removed Lines]",
          "152:   UNWRAP",
          "",
          "[Added Lines]",
          "140:   UNWRAP(PipeWrap)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "166: Handle<Value> PipeWrap::SetPendingInstances(const Arguments& args) {",
          "167:   HandleScope scope;",
          "171:   int instances = args[0]->Int32Value();",
          "",
          "[Removed Lines]",
          "169:   UNWRAP",
          "",
          "[Added Lines]",
          "157:   UNWRAP(PipeWrap)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "180: Handle<Value> PipeWrap::Listen(const Arguments& args) {",
          "181:   HandleScope scope;",
          "185:   int backlog = args[0]->Int32Value();",
          "",
          "[Removed Lines]",
          "183:   UNWRAP",
          "",
          "[Added Lines]",
          "171:   UNWRAP(PipeWrap)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "269: Handle<Value> PipeWrap::Open(const Arguments& args) {",
          "270:   HandleScope scope;",
          "274:   int fd = args[0]->IntegerValue();",
          "",
          "[Removed Lines]",
          "272:   UNWRAP",
          "",
          "[Added Lines]",
          "260:   UNWRAP(PipeWrap)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "282: Handle<Value> PipeWrap::Connect(const Arguments& args) {",
          "283:   HandleScope scope;",
          "287:   String::AsciiValue name(args[0]);",
          "",
          "[Removed Lines]",
          "285:   UNWRAP",
          "",
          "[Added Lines]",
          "273:   UNWRAP(PipeWrap)",
          "",
          "---------------"
        ],
        "src/process_wrap.cc||src/process_wrap.cc": [
          "File: src/process_wrap.cc -> src/process_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <string.h>",
          "26: #include <stdlib.h>",
          "40: namespace node {",
          "42: using v8::Object;",
          "",
          "[Removed Lines]",
          "28: #define UNWRAP \\",
          "29:   assert(!args.Holder().IsEmpty()); \\",
          "30:   assert(args.Holder()->InternalFieldCount() > 0); \\",
          "31:   ProcessWrap* wrap =  \\",
          "32:       static_cast<ProcessWrap*>(args.Holder()->GetPointerFromInternalField(0)); \\",
          "33:   if (!wrap) { \\",
          "34:     uv_err_t err; \\",
          "35:     err.code = UV_EBADF; \\",
          "36:     SetErrno(err); \\",
          "37:     return scope.Close(Integer::New(-1)); \\",
          "38:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:   static Handle<Value> Spawn(const Arguments& args) {",
          "98:     HandleScope scope;",
          "102:     Local<Object> js_options = args[0]->ToObject();",
          "",
          "[Removed Lines]",
          "100:     UNWRAP",
          "",
          "[Added Lines]",
          "88:     UNWRAP(ProcessWrap)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "238:   static Handle<Value> Kill(const Arguments& args) {",
          "239:     HandleScope scope;",
          "243:     int signal = args[0]->Int32Value();",
          "",
          "[Removed Lines]",
          "241:     UNWRAP",
          "",
          "[Added Lines]",
          "229:     UNWRAP(ProcessWrap)",
          "",
          "---------------"
        ],
        "src/stream_wrap.cc||src/stream_wrap.cc": [
          "File: src/stream_wrap.cc -> src/stream_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: using v8::Exception;",
          "69: typedef class ReqWrap<uv_shutdown_t> ShutdownWrap;",
          "71: class WriteWrap: public ReqWrap<uv_write_t> {",
          "",
          "[Removed Lines]",
          "56: #define UNWRAP \\",
          "57:   assert(!args.Holder().IsEmpty()); \\",
          "58:   assert(args.Holder()->InternalFieldCount() > 0); \\",
          "59:   StreamWrap* wrap =  \\",
          "60:       static_cast<StreamWrap*>(args.Holder()->GetPointerFromInternalField(0)); \\",
          "61:   if (!wrap) { \\",
          "62:     uv_err_t err; \\",
          "63:     err.code = UV_EBADF; \\",
          "64:     SetErrno(err); \\",
          "65:     return scope.Close(Integer::New(-1)); \\",
          "66:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134: Handle<Value> StreamWrap::ReadStart(const Arguments& args) {",
          "135:   HandleScope scope;",
          "139:   bool ipc_pipe = wrap->stream_->type == UV_NAMED_PIPE &&",
          "140:                   ((uv_pipe_t*)wrap->stream_)->ipc;",
          "",
          "[Removed Lines]",
          "137:   UNWRAP",
          "",
          "[Added Lines]",
          "124:   UNWRAP(StreamWrap)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155: Handle<Value> StreamWrap::ReadStop(const Arguments& args) {",
          "156:   HandleScope scope;",
          "160:   int r = uv_read_stop(wrap->stream_);",
          "",
          "[Removed Lines]",
          "158:   UNWRAP",
          "",
          "[Added Lines]",
          "145:   UNWRAP(StreamWrap)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "248: Handle<Value> StreamWrap::WriteBuffer(const Arguments& args) {",
          "249:   HandleScope scope;",
          "254:   assert(args.Length() >= 1 && Buffer::HasInstance(args[0]));",
          "",
          "[Removed Lines]",
          "251:   UNWRAP",
          "",
          "[Added Lines]",
          "238:   UNWRAP(StreamWrap)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "299:   HandleScope scope;",
          "300:   int r;",
          "304:   if (args.Length() < 1)",
          "305:     return ThrowTypeError(\"Not enough arguments\");",
          "",
          "[Removed Lines]",
          "302:   UNWRAP",
          "",
          "[Added Lines]",
          "289:   UNWRAP(StreamWrap)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "474: Handle<Value> StreamWrap::Shutdown(const Arguments& args) {",
          "475:   HandleScope scope;",
          "479:   ShutdownWrap* req_wrap = new ShutdownWrap();",
          "",
          "[Removed Lines]",
          "477:   UNWRAP",
          "",
          "[Added Lines]",
          "464:   UNWRAP(StreamWrap)",
          "",
          "---------------"
        ],
        "src/tcp_wrap.cc||src/tcp_wrap.cc": [
          "File: src/tcp_wrap.cc -> src/tcp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: # define uv_inet_ntop inet_ntop",
          "44: #endif",
          "58: namespace node {",
          "60: using v8::Arguments;",
          "",
          "[Removed Lines]",
          "46: #define UNWRAP \\",
          "47:   assert(!args.Holder().IsEmpty()); \\",
          "48:   assert(args.Holder()->InternalFieldCount() > 0); \\",
          "49:   TCPWrap* wrap =  \\",
          "50:       static_cast<TCPWrap*>(args.Holder()->GetPointerFromInternalField(0)); \\",
          "51:   if (!wrap) { \\",
          "52:     uv_err_t err; \\",
          "53:     err.code = UV_EBADF; \\",
          "54:     SetErrno(err); \\",
          "55:     return scope.Close(Integer::New(-1)); \\",
          "56:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:   HandleScope scope;",
          "173:   struct sockaddr_storage address;",
          "177:   int addrlen = sizeof(address);",
          "178:   int r = uv_tcp_getsockname(&wrap->handle_,",
          "",
          "[Removed Lines]",
          "175:   UNWRAP",
          "",
          "[Added Lines]",
          "163:   UNWRAP(TCPWrap)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "193:   HandleScope scope;",
          "194:   struct sockaddr_storage address;",
          "198:   int addrlen = sizeof(address);",
          "199:   int r = uv_tcp_getpeername(&wrap->handle_,",
          "",
          "[Removed Lines]",
          "196:   UNWRAP",
          "",
          "[Added Lines]",
          "184:   UNWRAP(TCPWrap)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "213: Handle<Value> TCPWrap::SetNoDelay(const Arguments& args) {",
          "214:   HandleScope scope;",
          "218:   int enable = static_cast<int>(args[0]->BooleanValue());",
          "219:   int r = uv_tcp_nodelay(&wrap->handle_, enable);",
          "",
          "[Removed Lines]",
          "216:   UNWRAP",
          "",
          "[Added Lines]",
          "204:   UNWRAP(TCPWrap)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "227: Handle<Value> TCPWrap::SetKeepAlive(const Arguments& args) {",
          "228:   HandleScope scope;",
          "232:   int enable = args[0]->Int32Value();",
          "233:   unsigned int delay = args[1]->Uint32Value();",
          "",
          "[Removed Lines]",
          "230:   UNWRAP",
          "",
          "[Added Lines]",
          "218:   UNWRAP(TCPWrap)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "244: Handle<Value> TCPWrap::SetSimultaneousAccepts(const Arguments& args) {",
          "245:   HandleScope scope;",
          "249:   bool enable = args[0]->BooleanValue();",
          "",
          "[Removed Lines]",
          "247:   UNWRAP",
          "",
          "[Added Lines]",
          "235:   UNWRAP(TCPWrap)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "260: Handle<Value> TCPWrap::Bind(const Arguments& args) {",
          "261:   HandleScope scope;",
          "265:   String::AsciiValue ip_address(args[0]);",
          "266:   int port = args[1]->Int32Value();",
          "",
          "[Removed Lines]",
          "263:   UNWRAP",
          "",
          "[Added Lines]",
          "251:   UNWRAP(TCPWrap)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "278: Handle<Value> TCPWrap::Bind6(const Arguments& args) {",
          "279:   HandleScope scope;",
          "283:   String::AsciiValue ip6_address(args[0]);",
          "284:   int port = args[1]->Int32Value();",
          "",
          "[Removed Lines]",
          "281:   UNWRAP",
          "",
          "[Added Lines]",
          "269:   UNWRAP(TCPWrap)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "296: Handle<Value> TCPWrap::Listen(const Arguments& args) {",
          "297:   HandleScope scope;",
          "301:   int backlog = args[0]->Int32Value();",
          "",
          "[Removed Lines]",
          "299:   UNWRAP",
          "",
          "[Added Lines]",
          "287:   UNWRAP(TCPWrap)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "374: Handle<Value> TCPWrap::Connect(const Arguments& args) {",
          "375:   HandleScope scope;",
          "379:   String::AsciiValue ip_address(args[0]);",
          "380:   int port = args[1]->Int32Value();",
          "",
          "[Removed Lines]",
          "377:   UNWRAP",
          "",
          "[Added Lines]",
          "365:   UNWRAP(TCPWrap)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "404: Handle<Value> TCPWrap::Connect6(const Arguments& args) {",
          "405:   HandleScope scope;",
          "409:   String::AsciiValue ip_address(args[0]);",
          "410:   int port = args[1]->Int32Value();",
          "",
          "[Removed Lines]",
          "407:   UNWRAP",
          "",
          "[Added Lines]",
          "395:   UNWRAP(TCPWrap)",
          "",
          "---------------"
        ],
        "src/timer_wrap.cc||src/timer_wrap.cc": [
          "File: src/timer_wrap.cc -> src/timer_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"node.h\"",
          "23: #include \"handle_wrap.h\"",
          "37: namespace node {",
          "39: using v8::Object;",
          "",
          "[Removed Lines]",
          "25: #define UNWRAP \\",
          "26:   assert(!args.Holder().IsEmpty()); \\",
          "27:   assert(args.Holder()->InternalFieldCount() > 0); \\",
          "28:   TimerWrap* wrap =  \\",
          "29:       static_cast<TimerWrap*>(args.Holder()->GetPointerFromInternalField(0)); \\",
          "30:   if (!wrap) { \\",
          "31:     uv_err_t err; \\",
          "32:     err.code = UV_EBADF; \\",
          "33:     SetErrno(err); \\",
          "34:     return scope.Close(Integer::New(-1)); \\",
          "35:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:   static Handle<Value> Start(const Arguments& args) {",
          "128:     HandleScope scope;",
          "132:     int64_t timeout = args[0]->IntegerValue();",
          "133:     int64_t repeat = args[1]->IntegerValue();",
          "",
          "[Removed Lines]",
          "130:     UNWRAP",
          "",
          "[Added Lines]",
          "118:     UNWRAP(TimerWrap)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145:   static Handle<Value> Stop(const Arguments& args) {",
          "146:     HandleScope scope;",
          "150:     int r = uv_timer_stop(&wrap->handle_);",
          "",
          "[Removed Lines]",
          "148:     UNWRAP",
          "",
          "[Added Lines]",
          "136:     UNWRAP(TimerWrap)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:   static Handle<Value> Again(const Arguments& args) {",
          "160:     HandleScope scope;",
          "164:     int r = uv_timer_again(&wrap->handle_);",
          "",
          "[Removed Lines]",
          "162:     UNWRAP",
          "",
          "[Added Lines]",
          "150:     UNWRAP(TimerWrap)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "173:   static Handle<Value> SetRepeat(const Arguments& args) {",
          "174:     HandleScope scope;",
          "178:     int64_t repeat = args[0]->IntegerValue();",
          "",
          "[Removed Lines]",
          "176:     UNWRAP",
          "",
          "[Added Lines]",
          "164:     UNWRAP(TimerWrap)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "185:   static Handle<Value> GetRepeat(const Arguments& args) {",
          "186:     HandleScope scope;",
          "190:     int64_t repeat = uv_timer_get_repeat(&wrap->handle_);",
          "",
          "[Removed Lines]",
          "188:     UNWRAP",
          "",
          "[Added Lines]",
          "176:     UNWRAP(TimerWrap)",
          "",
          "---------------"
        ],
        "src/tty_wrap.cc||src/tty_wrap.cc": [
          "File: src/tty_wrap.cc -> src/tty_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: using v8::Integer;",
          "43: using v8::Undefined;",
          "58: class TTYWrap : StreamWrap {",
          "59:  public:",
          "60:   static void Initialize(Handle<Object> target) {",
          "",
          "[Removed Lines]",
          "45: #define UNWRAP \\",
          "46:   assert(!args.Holder().IsEmpty()); \\",
          "47:   assert(args.Holder()->InternalFieldCount() > 0); \\",
          "48:   TTYWrap* wrap =  \\",
          "49:       static_cast<TTYWrap*>(args.Holder()->GetPointerFromInternalField(0)); \\",
          "50:   if (!wrap) { \\",
          "51:     uv_err_t err; \\",
          "52:     err.code = UV_EBADF; \\",
          "53:     SetErrno(err); \\",
          "54:     return scope.Close(Integer::New(-1)); \\",
          "55:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:   static Handle<Value> GetWindowSize(const Arguments& args) {",
          "123:     HandleScope scope;",
          "127:     int width, height;",
          "128:     int r = uv_tty_get_winsize(&wrap->handle_, &width, &height);",
          "",
          "[Removed Lines]",
          "125:     UNWRAP",
          "",
          "[Added Lines]",
          "112:     UNWRAP(TTYWrap)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "142:   static Handle<Value> SetRawMode(const Arguments& args) {",
          "143:     HandleScope scope;",
          "147:     int r = uv_tty_set_mode(&wrap->handle_, args[0]->IsTrue());",
          "",
          "[Removed Lines]",
          "145:     UNWRAP",
          "",
          "[Added Lines]",
          "132:     UNWRAP(TTYWrap)",
          "",
          "---------------"
        ],
        "src/udp_wrap.cc||src/udp_wrap.cc": [
          "File: src/udp_wrap.cc -> src/udp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: namespace node {",
          "64: typedef ReqWrap<uv_udp_send_t> SendWrap;",
          "",
          "[Removed Lines]",
          "52: #define UNWRAP                                                              \\",
          "53:   assert(!args.Holder().IsEmpty());                                         \\",
          "54:   assert(args.Holder()->InternalFieldCount() > 0);                          \\",
          "55:   UDPWrap* wrap =                                                           \\",
          "56:       static_cast<UDPWrap*>(args.Holder()->GetPointerFromInternalField(0)); \\",
          "57:   if (!wrap) {                                                              \\",
          "58:     uv_err_t err;                                                           \\",
          "59:     err.code = UV_EBADF;                                                    \\",
          "60:     SetErrno(err);                                                          \\",
          "61:     return scope.Close(Integer::New(-1));                                   \\",
          "62:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:   HandleScope scope;",
          "170:   int r;",
          "175:   assert(args.Length() == 3);",
          "",
          "[Removed Lines]",
          "172:   UNWRAP",
          "",
          "[Added Lines]",
          "160:   UNWRAP(UDPWrap)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "210: #define X(name, fn)                                                           \\",
          "211:   Handle<Value> UDPWrap::name(const Arguments& args) {                        \\",
          "212:     HandleScope scope;                                                        \\",
          "214:     assert(args.Length() == 1);                                               \\",
          "215:     int flag = args[0]->Int32Value();                                         \\",
          "216:     int r = fn(&wrap->handle_, flag);                                         \\",
          "",
          "[Removed Lines]",
          "213:     UNWRAP                                                                    \\",
          "",
          "[Added Lines]",
          "201:     UNWRAP(UDPWrap)                                                                    \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "229: Handle<Value> UDPWrap::SetMembership(const Arguments& args,",
          "230:                                      uv_membership membership) {",
          "231:   HandleScope scope;",
          "234:   assert(args.Length() == 2);",
          "",
          "[Removed Lines]",
          "232:   UNWRAP",
          "",
          "[Added Lines]",
          "220:   UNWRAP(UDPWrap)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "269:   assert(args.Length() == 5);",
          "273:   assert(Buffer::HasInstance(args[0]));",
          "274:   Local<Object> buffer_obj = args[0]->ToObject();",
          "",
          "[Removed Lines]",
          "271:   UNWRAP",
          "",
          "[Added Lines]",
          "259:   UNWRAP(UDPWrap)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "327: Handle<Value> UDPWrap::RecvStart(const Arguments& args) {",
          "328:   HandleScope scope;",
          "333:   int r = uv_udp_recv_start(&wrap->handle_, OnAlloc, OnRecv);",
          "",
          "[Removed Lines]",
          "330:   UNWRAP",
          "",
          "[Added Lines]",
          "318:   UNWRAP(UDPWrap)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "343: Handle<Value> UDPWrap::RecvStop(const Arguments& args) {",
          "344:   HandleScope scope;",
          "348:   int r = uv_udp_recv_stop(&wrap->handle_);",
          "",
          "[Removed Lines]",
          "346:   UNWRAP",
          "",
          "[Added Lines]",
          "334:   UNWRAP(UDPWrap)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "355:   HandleScope scope;",
          "356:   struct sockaddr_storage address;",
          "360:   int addrlen = sizeof(address);",
          "361:   int r = uv_udp_getsockname(&wrap->handle_,",
          "",
          "[Removed Lines]",
          "358:   UNWRAP",
          "",
          "[Added Lines]",
          "346:   UNWRAP(UDPWrap)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c999fd2855f9bccf99666431cddc9b34930720b",
      "candidate_info": {
        "commit_hash": "6c999fd2855f9bccf99666431cddc9b34930720b",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/6c999fd2855f9bccf99666431cddc9b34930720b",
        "files": [
          "lib/timers.js"
        ],
        "message": "timers: fix assertion in Timeout.unref()\n\nEnsure that the delay >= 0 when detaching the timer from the queue. Fixes the\nfollowing assertion:\n\n  uv_timer_start: Assertion `timeout >= 0' failed.\n\nNo test included, it's timing sensitive.",
        "before_after_code_files": [
          "lib/timers.js||litimers.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/timers.js||litimers.js": [
          "File: lib/timers.js -> litimers.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "254: Timeout.prototype.unref = function() {",
          "255:   if (!this._handle) {",
          "256:     exports.unenroll(this);",
          "257:     this._handle = new Timer();",
          "258:     this._handle.ontimeout = this._onTimeout;",
          "260:     this._handle.domain = this.domain;",
          "261:     this._handle.unref();",
          "262:   } else {",
          "",
          "[Removed Lines]",
          "259:     this._handle.start(this._when - Date.now(), 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a6f3451e2549d0b82ff18990e8bfe28ea4386aba",
      "candidate_info": {
        "commit_hash": "a6f3451e2549d0b82ff18990e8bfe28ea4386aba",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/a6f3451e2549d0b82ff18990e8bfe28ea4386aba",
        "files": [
          "lib/http.js"
        ],
        "message": "http: fix test-http-should-keepalive.js is fail\n\n3df7c90 was removed when conflict was resolved.",
        "before_after_code_files": [
          "lib/http.js||lihttp.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1306:         return true;",
          "1307:       }",
          "",
          "[Removed Lines]",
          "1309:       if (req.shouldKeepAlive && res.headers.connection !== 'keep-alive' &&",
          "1310:           !req.upgradeOrConnect) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}