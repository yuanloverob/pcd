{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3f69c711579dbc513915efd558da05170243fcf5",
      "candidate_info": {
        "commit_hash": "3f69c711579dbc513915efd558da05170243fcf5",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3f69c711579dbc513915efd558da05170243fcf5",
        "files": [
          "lib/readline.js"
        ],
        "message": "readline: explicitly disable and re-enable \"raw mode\" on Ctrl+Z\n\nFixes #3295.",
        "before_after_code_files": [
          "lib/readline.js||lireadline.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/readline.js||lireadline.js": [
          "File: lib/readline.js -> lireadline.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "656:                 self.pause();",
          "657:                 self.emit('SIGCONT');",
          "658:               }",
          "659:             };",
          "660:           })(this));",
          "661:           process.kill(process.pid, 'SIGTSTP');",
          "662:         }",
          "663:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca642b020dbc94efdac38d573d164ab32580a40f",
      "candidate_info": {
        "commit_hash": "ca642b020dbc94efdac38d573d164ab32580a40f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ca642b020dbc94efdac38d573d164ab32580a40f",
        "files": [
          "test/simple/test-http-client-timeout-with-data.js"
        ],
        "message": "test: add http 'data after timeout' test\n\nSee #3234. TDB if this is or is not the desired behavior.",
        "before_after_code_files": [
          "test/simple/test-http-client-timeout-with-data.js||test/simple/test-http-client-timeout-with-data.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-http-client-timeout-with-data.js||test/simple/test-http-client-timeout-with-data.js": [
          "File: test/simple/test-http-client-timeout-with-data.js -> test/simple/test-http-client-timeout-with-data.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var http = require('http');",
          "26: var ntimeouts = 0;",
          "27: var nchunks = 0;",
          "29: process.on('exit', function() {",
          "30:   assert.equal(ntimeouts, 1);",
          "31:   assert.equal(nchunks, 2);",
          "32: });",
          "34: var options = {",
          "35:   method: 'GET',",
          "36:   port: common.PORT,",
          "37:   host: '127.0.0.1',",
          "38:   path: '/'",
          "39: };",
          "41: var server = http.createServer(function(req, res) {",
          "42:   res.writeHead(200, {'Content-Length':'2'});",
          "43:   res.write('*');",
          "44:   setTimeout(function() { res.end('*') }, 20);",
          "45: });",
          "47: server.listen(options.port, options.host, function() {",
          "48:   var req = http.request(options, onresponse);",
          "49:   req.end();",
          "51:   function onresponse(res) {",
          "52:     req.setTimeout(10, function() {",
          "53:       assert.equal(nchunks, 1); // should have received the first chunk by now",
          "54:       ntimeouts++;",
          "55:     });",
          "57:     res.on('data', function(data) {",
          "58:       assert.equal('' + data, '*');",
          "59:       nchunks++;",
          "60:     });",
          "62:     res.on('end', function() {",
          "63:       assert.equal(nchunks, 2);",
          "64:       server.close();",
          "65:     });",
          "66:   }",
          "67: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "356992fe4ded4d48e487aa9f0826a9b9ce022bcb",
      "candidate_info": {
        "commit_hash": "356992fe4ded4d48e487aa9f0826a9b9ce022bcb",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/356992fe4ded4d48e487aa9f0826a9b9ce022bcb",
        "files": [
          "node.gyp",
          "src/cares_wrap.cc",
          "src/fs_event_wrap.cc",
          "src/handle_wrap.cc",
          "src/node.cc",
          "src/node.h",
          "src/node_crypto.cc",
          "src/node_isolate.cc",
          "src/node_isolate.h",
          "src/node_zlib.cc",
          "src/pipe_wrap.cc",
          "src/process_wrap.cc",
          "src/stream_wrap.cc",
          "src/tcp_wrap.cc",
          "src/timer_wrap.cc",
          "src/tty_wrap.cc",
          "src/udp_wrap.cc"
        ],
        "message": "isolates: isolate-ify the main loop",
        "before_after_code_files": [
          "node.gyp||node.gyp",
          "src/cares_wrap.cc||src/cares_wrap.cc",
          "src/fs_event_wrap.cc||src/fs_event_wrap.cc",
          "src/handle_wrap.cc||src/handle_wrap.cc",
          "src/node.cc||src/node.cc",
          "src/node.h||src/node.h",
          "src/node_crypto.cc||src/node_crypto.cc",
          "src/node_isolate.cc||src/node_isolate.cc",
          "src/node_isolate.h||src/node_isolate.h",
          "src/node_zlib.cc||src/node_zlib.cc",
          "src/pipe_wrap.cc||src/pipe_wrap.cc",
          "src/process_wrap.cc||src/process_wrap.cc",
          "src/stream_wrap.cc||src/stream_wrap.cc",
          "src/tcp_wrap.cc||src/tcp_wrap.cc",
          "src/timer_wrap.cc||src/timer_wrap.cc",
          "src/tty_wrap.cc||src/tty_wrap.cc",
          "src/udp_wrap.cc||src/udp_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "node.gyp||node.gyp": [
          "File: node.gyp -> node.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:         'src/node.cc',",
          "75:         'src/node_vars.cc',",
          "76:         'src/node_buffer.cc',",
          "77:         'src/node_constants.cc',",
          "78:         'src/node_extensions.cc',",
          "79:         'src/node_file.cc',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:         'src/node_isolate.cc',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:         'src/node.h',",
          "98:         'src/node_vars.h',",
          "99:         'src/node_buffer.h',",
          "100:         'src/node_constants.h',",
          "101:         'src/node_crypto.h',",
          "102:         'src/node_extensions.h',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:         'src/node_isolate.h',",
          "",
          "---------------"
        ],
        "src/cares_wrap.cc||src/cares_wrap.cc": [
          "File: src/cares_wrap.cc -> src/cares_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "608:   if (status) {",
          "611:     argv[0] = Local<Value>::New(Null());",
          "612:   } else {",
          "",
          "[Removed Lines]",
          "610:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "610:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "710:   hints.ai_family = fam;",
          "711:   hints.ai_socktype = SOCK_STREAM;",
          "714:                          &req_wrap->req_,",
          "715:                          AfterGetAddrInfo,",
          "",
          "[Removed Lines]",
          "713:   int r = uv_getaddrinfo(uv_default_loop(),",
          "",
          "[Added Lines]",
          "713:   int r = uv_getaddrinfo(NODE_LOOP(),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "719:   req_wrap->Dispatched();",
          "721:   if (r) {",
          "723:     delete req_wrap;",
          "724:     return scope.Close(v8::Null());",
          "725:   } else {",
          "",
          "[Removed Lines]",
          "722:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "722:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "736:   assert(r == ARES_SUCCESS);",
          "738:   struct ares_options options;",
          "740:   assert(r == 0);",
          "742:   NODE_SET_METHOD(target, \"queryA\", Query<QueryAWrap>);",
          "",
          "[Removed Lines]",
          "739:   uv_ares_init_options(uv_default_loop(), &ares_channel, &options, 0);",
          "",
          "[Added Lines]",
          "739:   uv_ares_init_options(NODE_LOOP(), &ares_channel, &options, 0);",
          "",
          "---------------"
        ],
        "src/fs_event_wrap.cc||src/fs_event_wrap.cc": [
          "File: src/fs_event_wrap.cc -> src/fs_event_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:   String::Utf8Value path(args[0]->ToString());",
          "113:   if (r == 0) {",
          "115:     if (!args[1]->IsTrue()) {",
          "117:     }",
          "118:     wrap->initialized_ = true;",
          "119:   } else {",
          "121:   }",
          "123:   return scope.Close(Integer::New(r));",
          "",
          "[Removed Lines]",
          "112:   int r = uv_fs_event_init(uv_default_loop(), &wrap->handle_, *path, OnEvent, 0);",
          "116:       uv_unref(uv_default_loop());",
          "120:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "112:   int r = uv_fs_event_init(NODE_LOOP(), &wrap->handle_, *path, OnEvent, 0);",
          "116:       uv_unref(NODE_LOOP());",
          "120:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:   if (status) {",
          "149:     eventStr = String::Empty();",
          "150:   }",
          "151:   else if (events & UV_RENAME) {",
          "",
          "[Removed Lines]",
          "148:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "148:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------"
        ],
        "src/handle_wrap.cc||src/handle_wrap.cc": [
          "File: src/handle_wrap.cc -> src/handle_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:   }",
          "72:   wrap->unref = true;",
          "75:   return v8::Undefined();",
          "76: }",
          "",
          "[Removed Lines]",
          "73:   uv_unref(uv_default_loop());",
          "",
          "[Added Lines]",
          "73:   uv_unref(NODE_LOOP());",
          "",
          "---------------"
        ],
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: static void Check(uv_check_t* watcher, int status) {",
          "171:   assert(watcher == &gc_check);",
          "174:   tick_time_head = (tick_time_head + 1) % RPM_SAMPLES;",
          "176:   StartGCTimer();",
          "",
          "[Removed Lines]",
          "173:   tick_times[tick_time_head] = uv_now(uv_default_loop());",
          "",
          "[Added Lines]",
          "173:   tick_times[tick_time_head] = uv_now(NODE_LOOP());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:   need_tick_cb = false;",
          "201:   if (uv_is_active((uv_handle_t*) &tick_spinner)) {",
          "202:     uv_idle_stop(&tick_spinner);",
          "204:   }",
          "206:   HandleScope scope;",
          "",
          "[Removed Lines]",
          "203:     uv_unref(uv_default_loop());",
          "",
          "[Added Lines]",
          "203:     uv_unref(NODE_LOOP());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "243:   if (!uv_is_active((uv_handle_t*) &tick_spinner)) {",
          "244:     uv_idle_start(&tick_spinner, Spin);",
          "246:   }",
          "247:   return Undefined();",
          "248: }",
          "",
          "[Removed Lines]",
          "245:     uv_ref(uv_default_loop());",
          "",
          "[Added Lines]",
          "245:     uv_ref(NODE_LOOP());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1494:     }",
          "1495:   }",
          "",
          "[Removed Lines]",
          "1497:   double d = uv_now(uv_default_loop()) - TICK_TIME(3);",
          "",
          "[Added Lines]",
          "1497:   double d = uv_now(NODE_LOOP()) - TICK_TIME(3);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1523: v8::Handle<v8::Value> UVCounters(const v8::Arguments& args) {",
          "1524:   HandleScope scope;",
          "1528:   Local<Object> obj = Object::New();",
          "",
          "[Removed Lines]",
          "1526:   uv_counters_t* c = &uv_default_loop()->counters;",
          "",
          "[Added Lines]",
          "1526:   uv_counters_t* c = &NODE_LOOP()->counters;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2566:   RegisterSignalHandler(SIGTERM, SignalExit);",
          "2567: #endif // __POSIX__",
          "2569:   uv_prepare_init(uv_default_loop(), &prepare_tick_watcher);",
          "2570:   uv_prepare_start(&prepare_tick_watcher, PrepareTick);",
          "2573:   uv_check_init(uv_default_loop(), &check_tick_watcher);",
          "2574:   uv_check_start(&check_tick_watcher, node::CheckTick);",
          "2577:   uv_idle_init(uv_default_loop(), &tick_spinner);",
          "2580:   uv_check_init(uv_default_loop(), &gc_check);",
          "2581:   uv_check_start(&gc_check, node::Check);",
          "2584:   uv_idle_init(uv_default_loop(), &gc_idle);",
          "2587:   uv_timer_init(uv_default_loop(), &gc_timer);",
          "2590:   V8::SetFatalErrorHandler(node::OnFatalError);",
          "",
          "[Removed Lines]",
          "2571:   uv_unref(uv_default_loop());",
          "2575:   uv_unref(uv_default_loop());",
          "2578:   uv_unref(uv_default_loop());",
          "2582:   uv_unref(uv_default_loop());",
          "2585:   uv_unref(uv_default_loop());",
          "2588:   uv_unref(uv_default_loop());",
          "",
          "[Added Lines]",
          "2570:   uv_loop_t* const loop = uv_default_loop();",
          "2574:   uv_unref(loop);",
          "2578:   uv_unref(loop);",
          "2581:   uv_unref(loop);",
          "2585:   uv_unref(loop);",
          "2588:   uv_unref(loop);",
          "2591:   uv_unref(loop);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2610:   if (use_debug_agent) {",
          "",
          "[Removed Lines]",
          "2601:   uv_async_init(uv_default_loop(), &debug_watcher, node::DebugMessageCallback);",
          "2603:   uv_unref(uv_default_loop());",
          "2607:   node_isolate = Isolate::GetCurrent();",
          "",
          "[Added Lines]",
          "2604:   uv_async_init(loop, &debug_watcher, node::DebugMessageCallback);",
          "2606:   uv_unref(loop);",
          "2610:   node_isolate = v8::Isolate::GetCurrent();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2646:   Persistent<v8::Context> context = v8::Context::New();",
          "2647:   v8::Context::Scope context_scope(context);",
          "2649:   Handle<Object> process_l = SetupProcessObject(argc, argv);",
          "2650:   v8_typed_array::AttachBindings(context->Global());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2653:   Isolate::New(uv_default_loop());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2663:   EmitExit(process_l);",
          "",
          "[Removed Lines]",
          "2661:   uv_run(uv_default_loop());",
          "",
          "[Added Lines]",
          "2668:   uv_run(NODE_LOOP());",
          "",
          "---------------"
        ],
        "src/node.h||src/node.h": [
          "File: src/node.h -> src/node.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: #include <sys/stat.h>",
          "65: #include <assert.h>",
          "67: #include <node_object_wrap.h>",
          "69: #ifndef offset_of",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: #include <node_isolate.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87: #define NODE_STRINGIFY_HELPER(n) #n",
          "88: #endif",
          "90: namespace node {",
          "92: int Start(int argc, char *argv[]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91: #define NODE_LOOP() (node::Isolate::GetCurrent()->GetLoop())",
          "",
          "---------------"
        ],
        "src/node_crypto.cc||src/node_crypto.cc": [
          "File: src/node_crypto.cc -> src/node_crypto.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4118:   req = new uv_work_t();",
          "4119:   req->data = request;",
          "4121:   return Undefined();",
          "4123: err:",
          "",
          "[Removed Lines]",
          "4120:   uv_queue_work(uv_default_loop(), req, EIO_PBKDF2, EIO_PBKDF2After);",
          "",
          "[Added Lines]",
          "4120:   uv_queue_work(NODE_LOOP(), req, EIO_PBKDF2, EIO_PBKDF2After);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4239:     Local<Function> callback_v = Local<Function>(Function::Cast(*args[1]));",
          "4240:     req->callback_ = Persistent<Function>::New(callback_v);",
          "4243:                   &req->work_req_,",
          "4244:                   RandomBytesWork<generator>,",
          "4245:                   RandomBytesAfter<generator>);",
          "",
          "[Removed Lines]",
          "4242:     uv_queue_work(uv_default_loop(),",
          "",
          "[Added Lines]",
          "4243:     uv_queue_work(NODE_LOOP(),",
          "",
          "---------------"
        ],
        "src/node_isolate.cc||src/node_isolate.cc": [
          "File: src/node_isolate.cc -> src/node_isolate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"node_isolate.h\"",
          "23: #include <assert.h>",
          "26: namespace node {",
          "29: Isolate* Isolate::New(uv_loop_t* loop) {",
          "30:   return new Isolate(loop);",
          "31: }",
          "34: Isolate::Isolate(uv_loop_t* loop) {",
          "35:   loop_ = loop;",
          "36:   isolate_ = v8::Isolate::GetCurrent();",
          "37:   assert(isolate_->GetData() == NULL);",
          "38:   isolate_->SetData(this);",
          "39: }",
          "42: } // namespace node",
          "",
          "---------------"
        ],
        "src/node_isolate.h||src/node_isolate.h": [
          "File: src/node_isolate.h -> src/node_isolate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifndef SRC_NODE_ISOLATE_H_",
          "23: #define SRC_NODE_ISOLATE_H_",
          "25: #include <v8.h>",
          "26: #include <uv.h>",
          "28: #ifdef NDEBUG",
          "29: # define NODE_ISOLATE_CHECK(ptr) ((void) (ptr))",
          "30: #else",
          "31: # include <assert.h>",
          "32: # define NODE_ISOLATE_CHECK(ptr)                        \\",
          "33:   do {                                                  \\",
          "34:     node::Isolate* data_ = node::Isolate::GetCurrent(); \\",
          "35:     assert(data_ == (ptr));                             \\",
          "36:   }                                                     \\",
          "37:   while (0)",
          "38: #endif",
          "41: namespace node {",
          "43: class Isolate {",
          "44: public:",
          "45:   static Isolate* New(uv_loop_t* loop);",
          "47:   static Isolate* GetCurrent() {",
          "48:     return reinterpret_cast<Isolate*>(v8::Isolate::GetCurrent()->GetData());",
          "49:   }",
          "51:   uv_loop_t* GetLoop() {",
          "52:     NODE_ISOLATE_CHECK(this);",
          "53:     return loop_;",
          "54:   }",
          "56:   operator v8::Isolate*() {",
          "57:     NODE_ISOLATE_CHECK(this);",
          "58:     return isolate_;",
          "59:   }",
          "61: private:",
          "62:   Isolate(uv_loop_t* loop);",
          "63:   v8::Isolate* isolate_;",
          "64:   uv_loop_t* loop_;",
          "65: };",
          "67: } // namespace node",
          "69: #endif // SRC_NODE_ISOLATE_H_",
          "",
          "---------------"
        ],
        "src/node_zlib.cc||src/node_zlib.cc": [
          "File: src/node_zlib.cc -> src/node_zlib.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:     uv_work_t* work_req = new uv_work_t();",
          "134:     work_req->data = req_wrap;",
          "137:                   work_req,",
          "138:                   ZCtx<mode>::Process,",
          "139:                   ZCtx<mode>::After);",
          "",
          "[Removed Lines]",
          "136:     uv_queue_work(uv_default_loop(),",
          "",
          "[Added Lines]",
          "136:     uv_queue_work(NODE_LOOP(),",
          "",
          "---------------"
        ],
        "src/pipe_wrap.cc||src/pipe_wrap.cc": [
          "File: src/pipe_wrap.cc -> src/pipe_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "124: PipeWrap::PipeWrap(Handle<Object> object, bool ipc)",
          "125:     : StreamWrap(object, (uv_stream_t*) &handle_) {",
          "127:   assert(r == 0); // How do we proxy this error up to javascript?",
          "129:   handle_.data = reinterpret_cast<void*>(this);",
          "",
          "[Removed Lines]",
          "126:   int r = uv_pipe_init(uv_default_loop(), &handle_, ipc);",
          "",
          "[Added Lines]",
          "126:   int r = uv_pipe_init(NODE_LOOP(), &handle_, ipc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:   int r = uv_pipe_bind(&wrap->handle_, *name);",
          "146:   return scope.Close(Integer::New(r));",
          "147: }",
          "",
          "[Removed Lines]",
          "144:   if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "144:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:   int r = uv_listen((uv_stream_t*)&wrap->handle_, backlog, OnConnection);",
          "177:   return scope.Close(Integer::New(r));",
          "178: }",
          "",
          "[Removed Lines]",
          "175:   if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "175:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "225:   assert(wrap->object_.IsEmpty() == false);",
          "227:   if (status) {",
          "229:   }",
          "231:   Local<Value> argv[3] = {",
          "",
          "[Removed Lines]",
          "228:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "228:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------"
        ],
        "src/process_wrap.cc||src/process_wrap.cc": [
          "File: src/process_wrap.cc -> src/process_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:         Get(String::NewSymbol(\"windowsVerbatimArguments\"))->IsTrue();",
          "176: #endif",
          "180:     wrap->SetHandle((uv_handle_t*)&wrap->process_);",
          "181:     assert(wrap->process_.data == wrap);",
          "",
          "[Removed Lines]",
          "178:     int r = uv_spawn(uv_default_loop(), &wrap->process_, options);",
          "",
          "[Added Lines]",
          "178:     int r = uv_spawn(NODE_LOOP(), &wrap->process_, options);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:       delete [] options.env;",
          "196:     }",
          "200:     return scope.Close(Integer::New(r));",
          "201:   }",
          "",
          "[Removed Lines]",
          "198:     if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "198:     if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "210:     int r = uv_process_kill(&wrap->process_, signal);",
          "214:     return scope.Close(Integer::New(r));",
          "215:   }",
          "",
          "[Removed Lines]",
          "212:     if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "212:     if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------"
        ],
        "src/stream_wrap.cc||src/stream_wrap.cc": [
          "File: src/stream_wrap.cc -> src/stream_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:   }",
          "137:   return scope.Close(Integer::New(r));",
          "138: }",
          "",
          "[Removed Lines]",
          "135:   if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "135:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:   int r = uv_read_stop(wrap->stream_);",
          "151:   return scope.Close(Integer::New(r));",
          "152: }",
          "",
          "[Removed Lines]",
          "149:   if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "149:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "225:       slab_used -= buf.len;",
          "226:     }",
          "229:     MakeCallback(wrap->object_, \"onread\", 0, NULL);",
          "230:     return;",
          "231:   }",
          "",
          "[Removed Lines]",
          "228:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "228:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "338:   wrap->UpdateWriteQueueSize();",
          "340:   if (r) {",
          "342:     delete req_wrap;",
          "343:     return scope.Close(v8::Null());",
          "344:   } else {",
          "",
          "[Removed Lines]",
          "341:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "341:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "358:   assert(wrap->object_.IsEmpty() == false);",
          "360:   if (status) {",
          "362:   }",
          "364:   wrap->UpdateWriteQueueSize();",
          "",
          "[Removed Lines]",
          "361:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "361:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "388:   req_wrap->Dispatched();",
          "390:   if (r) {",
          "392:     delete req_wrap;",
          "393:     return scope.Close(v8::Null());",
          "394:   } else {",
          "",
          "[Removed Lines]",
          "391:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "391:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "408:   HandleScope scope;",
          "410:   if (status) {",
          "412:   }",
          "414:   Local<Value> argv[3] = {",
          "",
          "[Removed Lines]",
          "411:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "411:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------"
        ],
        "src/tcp_wrap.cc||src/tcp_wrap.cc": [
          "File: src/tcp_wrap.cc -> src/tcp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "155: TCPWrap::TCPWrap(Handle<Object> object)",
          "156:     : StreamWrap(object, (uv_stream_t*) &handle_) {",
          "158:   assert(r == 0); // How do we proxy this error up to javascript?",
          "160:   UpdateWriteQueueSize();",
          "",
          "[Removed Lines]",
          "157:   int r = uv_tcp_init(uv_default_loop(), &handle_);",
          "",
          "[Added Lines]",
          "157:   int r = uv_tcp_init(NODE_LOOP(), &handle_);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183:   Local<Object> sockname = Object::New();",
          "184:   if (r != 0) {",
          "186:   } else {",
          "187:     family = address.ss_family;",
          "",
          "[Removed Lines]",
          "185:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "185:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "225:   Local<Object> sockname = Object::New();",
          "226:   if (r != 0) {",
          "228:   } else {",
          "229:     family = address.ss_family;",
          "",
          "[Removed Lines]",
          "227:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "227:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "258:   int r = uv_tcp_nodelay(&wrap->handle_, 1);",
          "259:   if (r)",
          "262:   return Undefined();",
          "263: }",
          "",
          "[Removed Lines]",
          "260:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "260:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "274:   int r = uv_tcp_keepalive(&wrap->handle_, enable, delay);",
          "275:   if (r)",
          "278:   return Undefined();",
          "279: }",
          "",
          "[Removed Lines]",
          "276:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "276:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "290:   int r = uv_tcp_simultaneous_accepts(&wrap->handle_, enable ? 1 : 0);",
          "291:   if (r)",
          "294:   return Undefined();",
          "295: }",
          "",
          "[Removed Lines]",
          "292:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "292:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "308:   int r = uv_tcp_bind(&wrap->handle_, address);",
          "313:   return scope.Close(Integer::New(r));",
          "314: }",
          "",
          "[Removed Lines]",
          "311:   if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "311:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "326:   int r = uv_tcp_bind6(&wrap->handle_, address);",
          "331:   return scope.Close(Integer::New(r));",
          "332: }",
          "",
          "[Removed Lines]",
          "329:   if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "329:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "342:   int r = uv_listen((uv_stream_t*)&wrap->handle_, backlog, OnConnection);",
          "347:   return scope.Close(Integer::New(r));",
          "348: }",
          "",
          "[Removed Lines]",
          "345:   if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "345:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "378:     argv[0] = client_obj;",
          "379:   } else {",
          "381:     argv[0] = v8::Null();",
          "382:   }",
          "",
          "[Removed Lines]",
          "380:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "380:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "396:   assert(wrap->object_.IsEmpty() == false);",
          "398:   if (status) {",
          "400:   }",
          "402:   Local<Value> argv[3] = {",
          "",
          "[Removed Lines]",
          "399:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "399:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "432:   req_wrap->Dispatched();",
          "434:   if (r) {",
          "436:     delete req_wrap;",
          "437:     return scope.Close(v8::Null());",
          "438:   } else {",
          "",
          "[Removed Lines]",
          "435:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "435:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "459:   req_wrap->Dispatched();",
          "461:   if (r) {",
          "463:     delete req_wrap;",
          "464:     return scope.Close(v8::Null());",
          "465:   } else {",
          "",
          "[Removed Lines]",
          "462:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "462:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------"
        ],
        "src/timer_wrap.cc||src/timer_wrap.cc": [
          "File: src/timer_wrap.cc -> src/timer_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:       : HandleWrap(object, (uv_handle_t*) &handle_) {",
          "92:     active_ = false;",
          "95:     assert(r == 0);",
          "97:     handle_.data = this;",
          "",
          "[Removed Lines]",
          "94:     int r = uv_timer_init(uv_default_loop(), &handle_);",
          "",
          "[Added Lines]",
          "94:     int r = uv_timer_init(NODE_LOOP(), &handle_);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:   }",
          "105:   ~TimerWrap() {",
          "107:   }",
          "109:   void StateChange() {",
          "",
          "[Removed Lines]",
          "102:     uv_unref(uv_default_loop());",
          "106:     if (!active_) uv_ref(uv_default_loop());",
          "",
          "[Added Lines]",
          "102:     uv_unref(NODE_LOOP());",
          "106:     if (!active_) uv_ref(NODE_LOOP());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:     if (!was_active && active_) {",
          "117:     } else if (was_active && !active_) {",
          "121:     }",
          "122:   }",
          "",
          "[Removed Lines]",
          "116:       uv_ref(uv_default_loop());",
          "120:       uv_unref(uv_default_loop());",
          "",
          "[Added Lines]",
          "116:       uv_ref(NODE_LOOP());",
          "120:       uv_unref(NODE_LOOP());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:     int r = uv_timer_start(&wrap->handle_, OnTimeout, timeout, repeat);",
          "137:     wrap->StateChange();",
          "",
          "[Removed Lines]",
          "135:     if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "135:     if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "147:     int r = uv_timer_stop(&wrap->handle_);",
          "151:     wrap->StateChange();",
          "",
          "[Removed Lines]",
          "149:     if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "149:     if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "161:     int r = uv_timer_again(&wrap->handle_);",
          "165:     wrap->StateChange();",
          "",
          "[Removed Lines]",
          "163:     if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "163:     if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "187:     int64_t repeat = uv_timer_get_repeat(&wrap->handle_);",
          "191:     return scope.Close(Integer::New(repeat));",
          "192:   }",
          "",
          "[Removed Lines]",
          "189:     if (repeat < 0) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "189:     if (repeat < 0) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------"
        ],
        "src/tty_wrap.cc||src/tty_wrap.cc": [
          "File: src/tty_wrap.cc -> src/tty_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:     int r = uv_tty_get_winsize(&wrap->handle_, &width, &height);",
          "126:     if (r) {",
          "128:       return v8::Undefined();",
          "129:     }",
          "",
          "[Removed Lines]",
          "127:       SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "127:       SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:     int r = uv_tty_set_mode(&wrap->handle_, args[0]->IsTrue());",
          "145:     if (r) {",
          "147:     }",
          "149:     return scope.Close(Integer::New(r));",
          "",
          "[Removed Lines]",
          "146:       SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "146:       SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "170:   TTYWrap(Handle<Object> object, int fd, bool readable)",
          "171:       : StreamWrap(object, (uv_stream_t*)&handle_) {",
          "173:   }",
          "175:   uv_tty_t handle_;",
          "",
          "[Removed Lines]",
          "172:     uv_tty_init(uv_default_loop(), &handle_, fd, readable);",
          "",
          "[Added Lines]",
          "172:     uv_tty_init(NODE_LOOP(), &handle_, fd, readable);",
          "",
          "---------------"
        ],
        "src/udp_wrap.cc||src/udp_wrap.cc": [
          "File: src/udp_wrap.cc -> src/udp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "104: UDPWrap::UDPWrap(Handle<Object> object): HandleWrap(object,",
          "105:                                                     (uv_handle_t*)&handle_) {",
          "107:   assert(r == 0); // can't fail anyway",
          "108:   handle_.data = reinterpret_cast<void*>(this);",
          "109: }",
          "",
          "[Removed Lines]",
          "106:   int r = uv_udp_init(uv_default_loop(), &handle_);",
          "",
          "[Added Lines]",
          "106:   int r = uv_udp_init(NODE_LOOP(), &handle_);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:   }",
          "178:   if (r)",
          "181:   return scope.Close(Integer::New(r));",
          "182: }",
          "",
          "[Removed Lines]",
          "179:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "179:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "233:   req_wrap->Dispatched();",
          "235:   if (r) {",
          "237:     delete req_wrap;",
          "238:     return Null();",
          "239:   }",
          "",
          "[Removed Lines]",
          "236:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "236:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "262:   int r = uv_udp_recv_start(&wrap->handle_, OnAlloc, OnRecv);",
          "265:     return False();",
          "266:   }",
          "",
          "[Removed Lines]",
          "263:   if (r && uv_last_error(uv_default_loop()).code != UV_EALREADY) {",
          "264:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "263:   if (r && uv_last_error(NODE_LOOP()).code != UV_EALREADY) {",
          "264:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "297:     return scope.Close(sockname);",
          "298:   }",
          "299:   else {",
          "301:     return Null();",
          "302:   }",
          "303: }",
          "",
          "[Removed Lines]",
          "300:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "300:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "316:   assert(wrap->object_.IsEmpty() == false);",
          "318:   if (status) {",
          "320:   }",
          "322:   Local<Value> argv[4] = {",
          "",
          "[Removed Lines]",
          "319:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "319:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "364:   };",
          "366:   if (nread == -1) {",
          "368:   }",
          "369:   else {",
          "370:     Local<Object> rinfo = Object::New();",
          "",
          "[Removed Lines]",
          "367:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "367:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4ccdeaf00d7994b4a959a3ddfe8c52a2bd3c30d",
      "candidate_info": {
        "commit_hash": "d4ccdeaf00d7994b4a959a3ddfe8c52a2bd3c30d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d4ccdeaf00d7994b4a959a3ddfe8c52a2bd3c30d",
        "files": [
          "tools/addon.gypi"
        ],
        "message": "build: use -fPIC for native addons on UNIX\n\nNo -fPIC on 32 bits Linux but do enable for the other UNIX flavors.",
        "before_after_code_files": [
          "tools/addon.gypi||tools/addon.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/addon.gypi||tools/addon.gypi": [
          "File: tools/addon.gypi -> tools/addon.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:       }],",
          "16:       [ 'OS==\"win\"', {",
          "17:         'libraries': [ '-l<(node_root_dir)/$(Configuration)/node.lib' ],",
          "18:       }]",
          "19:     ]",
          "20:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:       }],",
          "19:       [ 'OS==\"freebsd\" or OS==\"openbsd\" or OS==\"solaris\" or (OS==\"linux\" and target_arch!=\"ia32\")', {",
          "20:         'cflags': [ '-fPIC' ],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dadc30318f812587405dd58d9a5d10ce392710b3",
      "candidate_info": {
        "commit_hash": "dadc30318f812587405dd58d9a5d10ce392710b3",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/dadc30318f812587405dd58d9a5d10ce392710b3",
        "files": [
          "src/node.cc",
          "src/node_internals.h",
          "src/node_isolate.cc",
          "src/node_isolate.h",
          "test/simple/test-isolates-ping-pong.js",
          "test/simple/test-isolates.js"
        ],
        "message": "isolates: implement message passing\n\nParent and child isolates can now pass arbitrary binary messages between each\nother. The messages are sent and received through a thread-safe queue that\nwakes up the event loop of the receiving thread.",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node_internals.h||src/node_internals.h",
          "src/node_isolate.cc||src/node_isolate.cc",
          "src/node_isolate.h||src/node_isolate.h",
          "test/simple/test-isolates-ping-pong.js||test/simple/test-isolates-ping-pong.js",
          "test/simple/test-isolates.js||test/simple/test-isolates.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2664:   process_l->Set(String::NewSymbol(\"tid\"),",
          "2665:                  Integer::NewFromUnsigned(isolate->id_));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2668:   if (isolate->id_ > 1) {",
          "2669:     process_l->Set(String::NewSymbol(\"_send\"),",
          "2670:                    FunctionTemplate::New(Isolate::Send)->GetFunction());",
          "2671:   }",
          "",
          "---------------"
        ],
        "src/node_internals.h||src/node_internals.h": [
          "File: src/node_internals.h -> src/node_internals.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: #define ARRAY_SIZE(a) (sizeof((a)) / sizeof((a)[0]))",
          "48: #endif",
          "104: } // namespace node",
          "",
          "[Removed Lines]",
          "53: #if HAVE_ISOLATES",
          "55: # if _WIN32",
          "56: #  define THREAD __declspec(thread)",
          "57: # else",
          "58: #  define THREAD __thread",
          "59: # endif",
          "61: # define TLS(type, name)      THREAD type* __tls_##name",
          "62: # define VAR(name)            (*__tls_##name)",
          "63: # define EMPTY(name)          (__tls_##name == NULL)",
          "64: # define ASSIGN(name, val)    ((__tls_##name) = P(val))",
          "66: # define LAZY_ASSIGN(name, val) \\",
          "67:   do if (!__tls_##name) ((__tls_##name) = P(val)); while (0)",
          "69: template <class T> inline v8::Persistent<T>* P(v8::Handle<T> v)",
          "70: {",
          "71:   return new v8::Persistent<T>(v8::Persistent<T>::New(v));",
          "72: }",
          "74: inline v8::Persistent<v8::String>* P(const char* symbol)",
          "75: {",
          "76:   return new v8::Persistent<v8::String>(",
          "77:     v8::Persistent<v8::String>::New(",
          "78:       v8::String::NewSymbol(symbol)));",
          "79: }",
          "81: #else // !HAVE_ISOLATES",
          "84: # define TLS(type, name)    type name",
          "85: # define VAR(name)          (name)",
          "86: # define EMPTY(name)        ((name).IsEmpty())",
          "87: # define ASSIGN(name, val)  ((name) = P(val))",
          "89: # define LAZY_ASSIGN(name, val) \\",
          "90:   do if ((name).IsEmpty()) (name) = P(val); while (0)",
          "92: template <class T> inline v8::Persistent<T> P(v8::Handle<T> v)",
          "93: {",
          "94:   return v8::Persistent<T>(v);",
          "95: }",
          "97: inline v8::Persistent<v8::String> P(const char* symbol)",
          "98: {",
          "99:   return v8::Persistent<v8::String>::New(",
          "100:     v8::String::NewSymbol(symbol));",
          "101: }",
          "102: #endif // HAVE_ISOLATES",
          "",
          "[Added Lines]",
          "50: #define DISALLOW_COPY_AND_ASSIGN(TypeName)        \\",
          "51:   TypeName(const TypeName&);                      \\",
          "52:   void operator=(const TypeName&)",
          "54: #define DISALLOW_IMPLICIT_CONSTRUCTORS(TypeName)  \\",
          "55:   TypeName();                                     \\",
          "56:   DISALLOW_COPY_AND_ASSIGN(TypeName)",
          "",
          "---------------"
        ],
        "src/node_isolate.cc||src/node_isolate.cc": [
          "File: src/node_isolate.cc -> src/node_isolate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <node.h>",
          "23: #include <node_isolate.h>",
          "24: #include <node_internals.h>",
          "27: #include <stdlib.h>",
          "28: #include <string.h>",
          "",
          "[Removed Lines]",
          "25: #include <v8.h>",
          "",
          "[Added Lines]",
          "22: #include <v8.h>",
          "24: #include <node_buffer.h>",
          "27: #include <node_object_wrap.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: using v8::Arguments;",
          "35: using v8::Array;",
          "36: using v8::False;",
          "37: using v8::Handle;",
          "38: using v8::HandleScope;",
          "39: using v8::Integer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: using v8::FunctionTemplate;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41: using v8::Null;",
          "42: using v8::Object;",
          "43: using v8::ObjectTemplate;",
          "44: using v8::String;",
          "45: using v8::True;",
          "46: using v8::Value;",
          "51: static volatile bool initialized;",
          "52: static volatile int id;",
          "",
          "[Removed Lines]",
          "48: static char magic_isolate_cookie_[] = \"magic isolate cookie\";",
          "",
          "[Added Lines]",
          "47: using v8::Persistent;",
          "51: using v8::Undefined;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "55: static ngx_queue_t list_head;",
          "58: void Isolate::Initialize() {",
          "59:   if (!initialized) {",
          "60:     initialized = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: #ifdef NDEBUG",
          "61: # define IF_DEBUG(expr)",
          "62: #else",
          "63: # define IF_DEBUG(expr) expr;",
          "64: #endif",
          "66: template <class T>",
          "67: class Queue {",
          "68: public:",
          "69:   Queue() {",
          "70:     if (uv_mutex_init(&mutex_)) abort();",
          "71:     ngx_queue_init(&queue_);",
          "72:   }",
          "74:   ~Queue() {",
          "75:     IF_DEBUG({",
          "76:       uv_mutex_lock(&mutex_);",
          "77:       assert(ngx_queue_empty(&queue_));",
          "78:       uv_mutex_unlock(&mutex_);",
          "79:     })",
          "80:     uv_mutex_destroy(&mutex_);",
          "81:   }",
          "83:   void Produce(T item) {",
          "84:     Message* m = new Message;",
          "85:     m->item_ = item;",
          "87:     uv_mutex_lock(&mutex_);",
          "88:     ngx_queue_insert_tail(&queue_, &m->queue_);",
          "89:     uv_mutex_unlock(&mutex_);",
          "90:   }",
          "92:   T Consume() {",
          "93:     uv_mutex_lock(&mutex_);",
          "94:     ngx_queue_t* q = ngx_queue_head(&queue_);",
          "95:     ngx_queue_remove(q);",
          "96:     uv_mutex_unlock(&mutex_);",
          "98:     Message* m = ngx_queue_data(q, Message, queue_);",
          "99:     T item = m->item_;",
          "100:     delete m;",
          "102:     return item;",
          "103:   }",
          "105: private:",
          "106:   struct Message {",
          "107:     ngx_queue_t queue_;",
          "108:     T item_;",
          "109:   };",
          "111:   ngx_queue_t queue_;",
          "112:   uv_mutex_t mutex_;",
          "113: };",
          "116: template <class T>",
          "117: class Channel {",
          "118: public:",
          "119:   typedef void (*Callback)(T item, void* arg);",
          "121:   Channel(uv_loop_t* loop, Callback callback, void* arg) {",
          "122:     callback_ = callback;",
          "123:     arg_ = arg;",
          "124:     uv_async_init(loop, &async_, OnMessage);",
          "125:     uv_unref(loop);",
          "126:   }",
          "128:   ~Channel() {",
          "129:     uv_ref(async_.loop);",
          "130:     uv_close(reinterpret_cast<uv_handle_t*>(&async_), NULL);",
          "131:   }",
          "133:   void Send(T item) {",
          "134:     queue_.Produce(item);",
          "135:     uv_async_send(&async_);",
          "136:   }",
          "138: private:",
          "139:   static void OnMessage(uv_async_t* handle, int status) {",
          "140:     Channel* c = container_of(handle, Channel, async_);",
          "141:     c->OnMessage();",
          "142:   }",
          "144:   void OnMessage() {",
          "145:     T item = queue_.Consume();",
          "146:     callback_(item, arg_);",
          "147:   }",
          "149:   void* arg_;",
          "150:   Callback callback_;",
          "151:   uv_async_t async_;",
          "152:   Queue<T> queue_;",
          "153: };",
          "156: struct IsolateMessage {",
          "157:   size_t size_;",
          "158:   char* data_;",
          "160:   IsolateMessage(const char* data, size_t size) {",
          "162:     size_ = size;",
          "163:     data_ = new char[size];",
          "164:     memcpy(data_, data, size);",
          "165:   }",
          "167:   ~IsolateMessage() {",
          "168:     delete[] data_;",
          "169:   }",
          "171:   static void Free(char* data, void* arg) {",
          "172:     IsolateMessage* msg = static_cast<IsolateMessage*>(arg);",
          "173:     assert(data == msg->data_);",
          "174:     delete msg;",
          "175:   }",
          "176: };",
          "179: class IsolateChannel: public Channel<IsolateMessage*> {",
          "180: public:",
          "181:   IsolateChannel(uv_loop_t* loop, Callback callback, void* arg)",
          "182:     : Channel<IsolateMessage*>(loop, callback, arg)",
          "183:   {",
          "184:   }",
          "185: };",
          "188: Handle<Value> Isolate::Send(const Arguments& args) {",
          "189:   HandleScope scope;",
          "191:   Isolate* isolate = Isolate::GetCurrent();",
          "192:   assert(Buffer::HasInstance(args[0]));",
          "193:   assert(isolate->send_channel_ != NULL);",
          "195:   Local<Object> obj = args[0]->ToObject();",
          "196:   const char* data = Buffer::Data(obj);",
          "197:   size_t size = Buffer::Length(obj);",
          "199:   IsolateMessage* msg = new IsolateMessage(data, size);",
          "200:   isolate->send_channel_->Send(msg);",
          "202:   return Undefined();",
          "203: }",
          "206: void Isolate::OnMessage(IsolateMessage* msg, void* arg) {",
          "207:   HandleScope scope;",
          "209:   Isolate* self = static_cast<Isolate*>(arg);",
          "210:   assert(uv_thread_self() == self->tid_);",
          "211:   NODE_ISOLATE_CHECK(self);",
          "213:   Buffer* buf = Buffer::New(msg->data_, msg->size_, IsolateMessage::Free, msg);",
          "214:   Handle<Value> argv[] = { buf->handle_ };",
          "215:   MakeCallback(self->globals_.process, \"_onmessage\", ARRAY_SIZE(argv), argv);",
          "216: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "95: Isolate::Isolate() {",
          "96:   uv_mutex_lock(&list_lock);",
          "98:   assert(initialized && \"node::Isolate::Initialize() hasn't been called\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "257:   send_channel_ = NULL; // set (and deleted) by the parent isolate",
          "258:   recv_channel_ = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "123: }",
          "126: struct globals* Isolate::Globals() {",
          "127:   return &globals_;",
          "128: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290: Isolate::~Isolate() {",
          "291:   if (!argv_) return;",
          "292:   for (size_t i = 0; argv_[i]; ++i) delete[] argv_[i];",
          "293:   delete[] argv_;",
          "294: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "131: void Isolate::AtExit(AtExitCallback callback, void* arg) {",
          "132:   struct AtExitCallbackInfo* it = new AtExitCallbackInfo;",
          "136:   it->callback_ = callback;",
          "137:   it->arg_ = arg;",
          "140: }",
          "",
          "[Removed Lines]",
          "134:   NODE_ISOLATE_CHECK(this);",
          "139:   ngx_queue_insert_head(&at_exit_callbacks_, &it->at_exit_callbacks_);",
          "",
          "[Added Lines]",
          "310:   ngx_queue_insert_head(&at_exit_callbacks_, &it->queue_);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "157: }",
          "160: void Isolate::Dispose() {",
          "161:   uv_mutex_lock(&list_lock);",
          "163:   NODE_ISOLATE_CHECK(this);",
          "169:   assert(v8_context_->InContext());",
          "170:   v8_context_->Exit();",
          "",
          "[Removed Lines]",
          "165:   struct AtExitCallbackInfo* it;",
          "166:   ngx_queue_t* q;",
          "",
          "[Added Lines]",
          "331: void Isolate::Exit() {",
          "332:   NODE_ISOLATE_CHECK(this);",
          "333:   v8_context_->Exit();",
          "334:   v8_isolate_->Exit();",
          "335: }",
          "343:   while (!ngx_queue_empty(&at_exit_callbacks_)) {",
          "344:     ngx_queue_t* q = ngx_queue_head(&at_exit_callbacks_);",
          "345:     ngx_queue_remove(q);",
          "347:     AtExitCallbackInfo* it = ngx_queue_data(q, AtExitCallbackInfo, queue_);",
          "348:     it->callback_(it->arg_);",
          "350:     delete it;",
          "351:   }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "184: }",
          "187: static void RunIsolate(void* arg) {",
          "189:   isolate->Enter();",
          "195:   StartThread(isolate, isolate->argc_, isolate->argv_);",
          "197:   isolate->Dispose();",
          "199: }",
          "",
          "[Removed Lines]",
          "188:   node::Isolate* isolate = reinterpret_cast<node::Isolate*>(arg);",
          "198:   delete isolate;",
          "",
          "[Added Lines]",
          "371: struct IsolateWrap: public ObjectWrap {",
          "372: public:",
          "373:   IsolateWrap(Isolate* parent_isolate) {",
          "374:     parent_isolate_ = parent_isolate;",
          "376:     uv_loop_t* parent_loop = parent_isolate->GetLoop();",
          "377:     recv_channel_ = new IsolateChannel(",
          "378:         parent_loop, IsolateWrap::OnMessage, this);",
          "380:     isolate_ = new Isolate;",
          "381:     send_channel_ = new IsolateChannel(",
          "382:         isolate_->loop_, Isolate::OnMessage, isolate_);",
          "384:     isolate_->send_channel_ = recv_channel_;",
          "385:     isolate_->recv_channel_ = send_channel_;",
          "388:     uv_async_init(parent_loop, &child_exit_, AfterChildExit);",
          "389:     isolate_->AtExit(AtChildExit, this);",
          "391:     HandleScope scope;",
          "392:     Local<ObjectTemplate> tpl = ObjectTemplate::New();",
          "393:     tpl->SetInternalFieldCount(1);",
          "395:     Local<Object> obj = tpl->NewInstance();",
          "396:     Wrap(obj);",
          "397:     Ref(); // unref'd when the child isolate exits",
          "399:     obj->Set(String::NewSymbol(\"tid\"),",
          "400:              Integer::New(isolate_->id_));",
          "402:     obj->Set(String::NewSymbol(\"send\"),",
          "403:              FunctionTemplate::New(Send)->GetFunction());",
          "404:   }",
          "406:   ~IsolateWrap() {",
          "407:     delete isolate_;",
          "408:     delete recv_channel_;",
          "409:     delete send_channel_;",
          "410:   }",
          "412:   Isolate* GetIsolate() {",
          "413:     return isolate_;",
          "414:   }",
          "416: private:",
          "418:   static void AtChildExit(void* arg) {",
          "419:     IsolateWrap* self = static_cast<IsolateWrap*>(arg);",
          "420:     uv_async_send(&self->child_exit_);",
          "421:   }",
          "424:   static void AfterChildExit(uv_async_t* handle, int status) {",
          "425:     IsolateWrap* self = container_of(handle, IsolateWrap, child_exit_);",
          "426:     self->OnExit();",
          "427:   }",
          "429:   void OnExit() {",
          "430:     if (uv_thread_join(&isolate_->tid_)) abort();",
          "431:     uv_close(reinterpret_cast<uv_handle_t*>(&child_exit_), NULL);",
          "432:     MakeCallback(handle_, \"onexit\", 0, NULL);",
          "433:     Unref(); // child is dead, it's safe to GC the JS object now",
          "434:   }",
          "436:   static void OnMessage(IsolateMessage* msg, void* arg) {",
          "437:     IsolateWrap* self = static_cast<IsolateWrap*>(arg);",
          "438:     self->OnMessage(msg);",
          "439:   }",
          "441:   void OnMessage(IsolateMessage* msg) {",
          "442:     assert(uv_thread_self() != isolate_->tid_);",
          "443:     NODE_ISOLATE_CHECK(parent_isolate_);",
          "444:     HandleScope scope;",
          "445:     Buffer* buf = Buffer::New(",
          "446:         msg->data_, msg->size_, IsolateMessage::Free, msg);",
          "447:     Handle<Value> argv[] = { buf->handle_ };",
          "448:     MakeCallback(handle_, \"onmessage\", ARRAY_SIZE(argv), argv);",
          "449:   }",
          "452:   static Handle<Value> Send(const Arguments& args) {",
          "453:     HandleScope scope;",
          "454:     IsolateWrap* self = Unwrap<IsolateWrap>(args.This());",
          "455:     assert(Buffer::HasInstance(args[0]));",
          "457:     Local<Object> obj = args[0]->ToObject();",
          "458:     const char* data = Buffer::Data(obj);",
          "459:     size_t size = Buffer::Length(obj);",
          "461:     IsolateMessage* msg = new IsolateMessage(data, size);",
          "462:     self->send_channel_->Send(msg);",
          "464:     return Undefined();",
          "465:   }",
          "467:   DISALLOW_IMPLICIT_CONSTRUCTORS(IsolateWrap);",
          "468:   Isolate* isolate_;",
          "469:   Isolate* parent_isolate_;",
          "470:   IsolateChannel* send_channel_;",
          "471:   IsolateChannel* recv_channel_;",
          "472:   uv_async_t child_exit_; // side effect: keeps the parent's event loop alive",
          "474: };",
          "478:   Isolate* isolate = static_cast<Isolate*>(arg);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "207:   Local<Array> argv = args[0].As<Array>();",
          "208:   assert(argv->Length() >= 2);",
          "215:   isolate->argc_ = argv->Length();",
          "",
          "[Removed Lines]",
          "212:   Isolate* isolate = new node::Isolate();",
          "",
          "[Added Lines]",
          "493:   Isolate* current_isolate = node::Isolate::GetCurrent();",
          "494:   IsolateWrap* wrap = new IsolateWrap(current_isolate);",
          "495:   Isolate* isolate = wrap->GetIsolate();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "222:   }",
          "223:   isolate->argv_[isolate->argc_] = NULL;",
          "239: }",
          "",
          "[Removed Lines]",
          "225:   if (uv_thread_create(&isolate->tid_, RunIsolate, isolate)) {",
          "226:     delete isolate;",
          "227:     return Null();",
          "228:   }",
          "231:   Local<ObjectTemplate> tpl = ObjectTemplate::New();",
          "232:   tpl->SetInternalFieldCount(2);",
          "234:   Local<Object> obj = tpl->NewInstance();",
          "235:   obj->SetPointerInInternalField(0, magic_isolate_cookie_);",
          "236:   obj->SetPointerInInternalField(1, isolate);",
          "238:   return scope.Close(obj);",
          "",
          "[Added Lines]",
          "508:   if (uv_thread_create(&isolate->tid_, RunIsolate, isolate))",
          "509:     return Null(); // wrap is collected by the GC",
          "510:   else",
          "511:     return wrap->handle_;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "245: }",
          "267: void InitIsolates(Handle<Object> target) {",
          "268:   HandleScope scope;",
          "269:   NODE_SET_METHOD(target, \"create\", CreateIsolate);",
          "270:   NODE_SET_METHOD(target, \"count\", CountIsolate);",
          "272: }",
          "",
          "[Removed Lines]",
          "248: static Handle<Value> JoinIsolate(const Arguments& args) {",
          "249:   HandleScope scope;",
          "251:   assert(args[0]->IsObject());",
          "253:   Local<Object> obj = args[0]->ToObject();",
          "254:   assert(obj->InternalFieldCount() == 2);",
          "255:   assert(obj->GetPointerFromInternalField(0) == magic_isolate_cookie_);",
          "257:   Isolate* ti = reinterpret_cast<Isolate*>(",
          "258:       obj->GetPointerFromInternalField(1));",
          "260:   if (uv_thread_join(&ti->tid_))",
          "261:     return False(); // error",
          "262:   else",
          "263:     return True();  // ok",
          "264: }",
          "271:   NODE_SET_METHOD(target, \"join\", JoinIsolate);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node_isolate.h||src/node_isolate.h": [
          "File: src/node_isolate.h -> src/node_isolate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: namespace node {",
          "45: class Isolate {",
          "46: public:",
          "47:   char** argv_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: class IsolateWrap;",
          "46: class IsolateChannel;",
          "47: class IsolateMessage;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:   typedef void (*AtExitCallback)(void* arg);",
          "57:   static void JoinAll();",
          "59:   static Isolate* GetCurrent() {",
          "60:     return reinterpret_cast<Isolate*>(v8::Isolate::GetCurrent()->GetData());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:   static v8::Handle<v8::Value> Send(const v8::Arguments& args);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:   Isolate();",
          "96:   void Enter();",
          "99:   void Dispose();",
          "101: private:",
          "103:   struct AtExitCallbackInfo {",
          "105:     AtExitCallback callback_;",
          "106:     void* arg_;",
          "107:   };",
          "109:   ngx_queue_t at_exit_callbacks_;",
          "110:   v8::Persistent<v8::Context> v8_context_;",
          "111:   v8::Isolate* v8_isolate_;",
          "112:   uv_loop_t* loop_;",
          "",
          "[Removed Lines]",
          "90:   ~Isolate() {",
          "91:     if (argv_) {",
          "92:       delete argv_;",
          "93:     }",
          "94:   }",
          "104:     ngx_queue_t at_exit_callbacks_;",
          "",
          "[Added Lines]",
          "94:   ~Isolate();",
          "97:   void Exit();",
          "103:   friend class IsolateWrap;",
          "107:     ngx_queue_t queue_;",
          "111:   static void OnMessage(IsolateMessage*, void*);",
          "114:   void operator=(const Isolate&) {}",
          "115:   Isolate(const Isolate&) {}",
          "120:   IsolateChannel* send_channel_;",
          "121:   IsolateChannel* recv_channel_;",
          "",
          "---------------"
        ],
        "test/simple/test-isolates-ping-pong.js||test/simple/test-isolates-ping-pong.js": [
          "File: test/simple/test-isolates-ping-pong.js -> test/simple/test-isolates-ping-pong.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: var isolates = process.binding('isolates');",
          "3: var N = 4; // # of child isolates",
          "5: if (process.tid === 1)",
          "6:   master();",
          "7: else",
          "8:   child();",
          "10: function master() {",
          "11:   for (var i = 0; i < N; ++i) spawn();",
          "13:   function spawn() {",
          "14:     var isolate = isolates.create(process.argv);",
          "15:     isolate.onexit = function() {",
          "16:       console.error(\"onexit isolate #%d\", isolate.tid);",
          "17:     };",
          "18:     isolate.onmessage = function(m) {",
          "19:       console.error(\"parent received message '%s'\", m);",
          "20:       isolate.send(Buffer('ACK ' + m));",
          "21:     };",
          "22:   }",
          "23: }",
          "25: function child() {",
          "26:   var n = 0;",
          "28:   function send() {",
          "29:     if (++n > 10) return;",
          "30:     process._send(Buffer('SYN' + n));",
          "31:     setTimeout(send, 10);",
          "32:   }",
          "34:   send();",
          "36:   process._onmessage = function(m) {",
          "37:     console.error(\"child %d received message '%s'\", process.tid, m);",
          "38:   };",
          "39: }",
          "",
          "---------------"
        ],
        "test/simple/test-isolates.js||test/simple/test-isolates.js": [
          "File: test/simple/test-isolates.js -> test/simple/test-isolates.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: if (process.tid === 1) {",
          "8:   var isolate = isolates.create(process.argv);",
          "10:   console.error(\"master\");",
          "11:   fs.stat(__dirname, function(err, stat) {",
          "12:     if (err) throw err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:   isolate.onmessage = function() {",
          "11:     console.error(\"onmessage\");",
          "12:   };",
          "13:   isolate.onexit = function() {",
          "14:     console.error(\"onexit\");",
          "15:   };",
          "",
          "---------------"
        ]
      }
    }
  ]
}