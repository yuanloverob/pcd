{
  "cve_id": "CVE-2020-22874",
  "cve_desc": "Integer overflow vulnerability in function Jsi_ObjArraySizer in jsish before 3.0.8, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "858da537bde4de9d8c92466d5a866505310bc328",
  "patch_info": {
    "commit_hash": "858da537bde4de9d8c92466d5a866505310bc328",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/858da537bde4de9d8c92466d5a866505310bc328",
    "files": [
      "md/Reference.md",
      "src/jsi.h",
      "src/jsiArray.c",
      "src/jsiCData.c",
      "src/jsiInt.h",
      "src/jsiInterp.c",
      "src/jsiObj.c",
      "src/jsiValue.c",
      "tools/protos.jsi",
      "www/reference.wiki"
    ],
    "message": "Release \"3.0.8\": Address Array alloc sizing issues from issue \"integer overflow and buffer overflow #5\".\n\nFossilOrigin-Name: 8c46a1d465b358110dcfb271721d35fe843a1b52f2fa24ccc10094eb8aaf6fe4",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiArray.c||src/jsiArray.c",
      "src/jsiCData.c||src/jsiCData.c",
      "src/jsiInt.h||src/jsiInt.h",
      "src/jsiInterp.c||src/jsiInterp.c",
      "src/jsiObj.c||src/jsiObj.c",
      "src/jsiValue.c||src/jsiValue.c",
      "tools/protos.jsi||tools/protos.jsi",
      "www/reference.wiki||www/reference.wiki"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 7",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 8",
      "",
      "---------------"
    ],
    "src/jsiArray.c||src/jsiArray.c": [
      "File: src/jsiArray.c -> src/jsiArray.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "267:             rc = jsi_ArrayFlatSub(interp, nobj, t , depth-1);",
      "268:         else if (!Jsi_ValueIsUndef(interp, t))",
      "269:             Jsi_ObjArrayAdd(interp, nobj, t);",
      "271:             return Jsi_LogError(\"array size exceeded\");",
      "272:     }",
      "273:     return rc;",
      "",
      "[Removed Lines]",
      "270:         if ((++n + clen)>interp->maxArrayList)",
      "",
      "[Added Lines]",
      "270:         if ((uint)(++n + clen)>interp->maxArrayList)",
      "",
      "---------------"
    ],
    "src/jsiCData.c||src/jsiCData.c": [
      "File: src/jsiCData.c -> src/jsiCData.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1276:             sf->flags |= JSI_OPT_BITSET_ENUM;",
      "1277:         }",
      "1278:         if (sf->arrSize) {",
      "1281:                 goto bail;",
      "1282:             }",
      "1283:             if (sf->bits || isEnum) {",
      "",
      "[Removed Lines]",
      "1279:             if (sf->arrSize>MAX_ARRAY_LIST) {",
      "1280:                 rc = Jsi_LogError(\"array size too big: %d >= %d\", sf->arrSize, MAX_ARRAY_LIST);",
      "",
      "[Added Lines]",
      "1279:             if (sf->arrSize>interp->maxArrayList) {",
      "1280:                 rc = Jsi_LogError(\"array size too big: %d >= %d\", sf->arrSize, interp->maxArrayList);",
      "",
      "---------------"
    ],
    "src/jsiInt.h||src/jsiInt.h": [
      "File: src/jsiInt.h -> src/jsiInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1259:     Jsi_Value *Top_object;",
      "1260:     Jsi_ScopeStrs *scopes[JSI_MAX_SCOPE];",
      "1261:     int cur_scope;",
      "1263:     int delRBCnt;",
      "1264:     Jsi_Func *activeFunc;  // Currently active function call.",
      "1265:     Jsi_Func *prevActiveFunc;  // Prev active function call.",
      "",
      "[Removed Lines]",
      "1262:     int maxArrayList;",
      "",
      "[Added Lines]",
      "1262:     uint maxArrayList;",
      "",
      "---------------"
    ],
    "src/jsiInterp.c||src/jsiInterp.c": [
      "File: src/jsiInterp.c -> src/jsiInterp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "100:     JSI_OPT(INT,   Jsi_Interp, lockTimeout, .help=\"Thread time-out for mutex lock acquires (milliseconds)\" ),",
      "101:     JSI_OPT(CUSTOM,Jsi_Interp, logOpts,     .help=\"Options for log output to add file/line/time\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=jsi_InterpLogOptions),",
      "102:     JSI_OPT(INT,   Jsi_Interp, maxDepth,    .help=\"Depth limit of recursive function calls (1000)\", .flags=JSI_OPT_LOCKSAFE),",
      "104:     JSI_OPT(INT,   Jsi_Interp, maxIncDepth, .help=\"Maximum allowed source/require nesting depth (50)\", .flags=JSI_OPT_LOCKSAFE),",
      "105:     JSI_OPT(INT,   Jsi_Interp, maxInterpDepth,.help=\"Maximum nested subinterp create depth (10)\", .flags=JSI_OPT_LOCKSAFE),",
      "106:     JSI_OPT(INT,   Jsi_Interp, maxUserObjs, .help=\"Maximum number of 'new' object calls, eg. File, RegExp, etc\", .flags=JSI_OPT_LOCKSAFE ),",
      "",
      "[Removed Lines]",
      "103:     JSI_OPT(INT,   Jsi_Interp, maxArrayList,.help=\"Maximum array convertable to list (100000)\", .flags=JSI_OPT_LOCKSAFE),",
      "",
      "[Added Lines]",
      "103:     JSI_OPT(UINT,  Jsi_Interp, maxArrayList,.help=\"Maximum array convertable to list (100000)\", .flags=JSI_OPT_LOCKSAFE),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1146:     }",
      "1147:     interp->maxDepth = JSI_MAX_EVAL_DEPTH;",
      "1148:     interp->maxIncDepth = JSI_MAX_INCLUDE_DEPTH;",
      "1149:     interp->typeWarnMax = 50;",
      "1150:     interp->subOpts.dblPrec = __DBL_DECIMAL_DIG__-1;",
      "1151:     interp->subOpts.prompt = \"$ \";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1149:     interp->maxArrayList = MAX_ARRAY_LIST;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1482: #endif",
      "1483:     if (interp->typeCheck.all|interp->typeCheck.parse|interp->typeCheck.funcsig)",
      "1484:         interp->staticFuncsTbl = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
      "1486:     if (!jsiIntData.isInit) {",
      "1487:         jsiIntData.isInit = 1;",
      "1488:         jsi_InitValue(interp, 0);",
      "",
      "[Removed Lines]",
      "1485:     interp->maxArrayList = MAX_ARRAY_LIST;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/jsiObj.c||src/jsiObj.c": [
      "File: src/jsiObj.c -> src/jsiObj.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "76:         if (!cp || !isdigit(*cp))",
      "77:             return JSI_OK;",
      "78:         n = (int)strtol(cp, &ep, 0);",
      "80:             return JSI_OK;",
      "81:         hPtr->f.bits.isarrlist = 1;",
      "82:         if (Jsi_ObjArraySizer(interp, obj, n) <= 0)",
      "",
      "[Removed Lines]",
      "79:         if (n<0 || n >= interp->maxArrayList)",
      "",
      "[Added Lines]",
      "79:         if (n<0 || (uint)n >= interp->maxArrayList)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "415: int Jsi_ObjArraySizer(Jsi_Interp *interp, Jsi_Obj *obj, uint len)",
      "416: {",
      "418:     assert(obj->isarrlist);",
      "419:     if (mod>1)",
      "420:         nsiz = nsiz + ((mod-1) - (nsiz + mod - 1)%mod);",
      "423:         return 0;",
      "424:     }",
      "425:     if (len >= obj->arrMaxSize) {",
      "",
      "[Removed Lines]",
      "417:     int nsiz = len + 1, mod = ALLOC_MOD_SIZE;",
      "421:     if (nsiz > MAX_ARRAY_LIST) {",
      "422:         Jsi_LogError(\"array size too large\");",
      "",
      "[Added Lines]",
      "417:     uint nsiz = len + 1, mod = ALLOC_MOD_SIZE;",
      "421:     if (len >= interp->maxArrayList || nsiz > interp->maxArrayList) {",
      "422:         Jsi_LogError(\"array size too big: %u >= %u\", len, interp->maxArrayList);",
      "",
      "---------------"
    ],
    "src/jsiValue.c||src/jsiValue.c": [
      "File: src/jsiValue.c -> src/jsiValue.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1036:     }",
      "1040:         target->vt == JSI_VT_OBJECT && target->d.obj->arr) {",
      "1041:         return jsi_ObjArraySetDup(interp, target->d.obj, value, arrayindex);",
      "1042:     }",
      "",
      "[Removed Lines]",
      "1039:     if (arrayindex >= 0 && arrayindex < MAX_ARRAY_LIST &&",
      "",
      "[Added Lines]",
      "1039:     if (arrayindex >= 0 && (uint)arrayindex < interp->maxArrayList &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1373:     Jsi_Obj *obj = target->d.obj;",
      "1375:     if (obj->isarrlist) {",
      "1377:             Jsi_ObjArraySet(interp, obj, val, key);",
      "1378:             return JSI_OK;",
      "1379:         }",
      "",
      "[Removed Lines]",
      "1376:         if (key >= 0 && key < interp->maxArrayList) {",
      "",
      "[Added Lines]",
      "1376:         if (key >= 0 && (uint)key < interp->maxArrayList) {",
      "",
      "---------------"
    ],
    "tools/protos.jsi||tools/protos.jsi": [
      "File: tools/protos.jsi -> tools/protos.jsi"
    ],
    "www/reference.wiki||www/reference.wiki": [
      "File: www/reference.wiki -> www/reference.wiki",
      "--- Hunk 1 ---",
      "[Context before]",
      "633: <tr><td>lockTimeout</td><td><i>INT</i></td><td>Thread time-out for mutex lock acquires (milliseconds).</td><td><i></i></td></tr>",
      "634: <tr><td>logOpts</td><td><i><a href='#logOptsOptions'>options</a></i></td><td>Options for log output to add file/line/time.</td><td><i></i></td></tr>",
      "635: <tr><td>maxDepth</td><td><i>INT</i></td><td>Depth limit of recursive function calls (1000).</td><td><i></i></td></tr>",
      "637: <tr><td>maxIncDepth</td><td><i>INT</i></td><td>Maximum allowed source/require nesting depth (50).</td><td><i></i></td></tr>",
      "638: <tr><td>maxInterpDepth</td><td><i>INT</i></td><td>Maximum nested subinterp create depth (10).</td><td><i></i></td></tr>",
      "639: <tr><td>maxUserObjs</td><td><i>INT</i></td><td>Maximum number of 'new' object calls, eg. File, RegExp, etc.</td><td><i></i></td></tr>",
      "",
      "[Removed Lines]",
      "636: <tr><td>maxArrayList</td><td><i>INT</i></td><td>Maximum array convertable to list (100000).</td><td><i></i></td></tr>",
      "",
      "[Added Lines]",
      "636: <tr><td>maxArrayList</td><td><i>UINT</i></td><td>Maximum array convertable to list (100000).</td><td><i></i></td></tr>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2886c54f7f36ecfea435ae881d7866f28d5b37ff",
      "candidate_info": {
        "commit_hash": "2886c54f7f36ecfea435ae881d7866f28d5b37ff",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/2886c54f7f36ecfea435ae881d7866f28d5b37ff",
        "files": [
          "lib/web/jsi.js",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiFileCmds.c",
          "src/jsiFilesys.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiNumber.c",
          "src/jsiObj.c",
          "src/jsiValue.c",
          "src/jsiWebSocket.c",
          "tests/badfunc.jsi",
          "tests/file2.jsi",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.9\": Add File.perms to replace File.type; Build fixes.\n\nFossilOrigin-Name: b8145ed9bd25f95a4d2fe4a47af51881e20f58036d67f09e469c81e545736187",
        "before_after_code_files": [
          "lib/web/jsi.js||lib/web/jsi.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiFileCmds.c||src/jsiFileCmds.c",
          "src/jsiFilesys.c||src/jsiFilesys.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiNumber.c||src/jsiNumber.c",
          "src/jsiObj.c||src/jsiObj.c",
          "src/jsiValue.c||src/jsiValue.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tests/badfunc.jsi||tests/badfunc.jsi",
          "tests/file2.jsi||tests/file2.jsi",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiObj.c||src/jsiObj.c",
            "src/jsiValue.c||src/jsiValue.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiObj.c||src/jsiObj.c",
            "src/jsiValue.c||src/jsiValue.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/web/jsi.js||lib/web/jsi.js": [
          "File: lib/web/jsi.js -> lib/web/jsi.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "688:             if (pat === match)",
          "689:                 return;",
          "690:             if (!partial)",
          "692:             var ss = match.substr(1,match.length-2).split(','), sl = {};",
          "693:             for (i=0; i<ss.length; i++) {",
          "694:                 var st = ss[i].split(':');",
          "",
          "[Removed Lines]",
          "691:                 throw('matchOjb failed: expected \"'+pat+'\" not \"'+match+'\"');",
          "",
          "[Added Lines]",
          "691:                 throw('matchOjb failed: expected \"'+match+'\" not \"'+pat+'\"');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "696:             }",
          "697:             for (i in msg) {",
          "698:                 if (sl[i] && gettype(msg[i]) === sl[i]) continue;",
          "700:             }",
          "701:         }",
          "",
          "[Removed Lines]",
          "699:                 throw('matchOjb failed: expected \"'+pat+'\" not \"'+match+'\"');",
          "",
          "[Added Lines]",
          "699:                 throw('matchOjb failed: expected \"'+match+'\" not \"'+pat+'\"');",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 8",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 9",
          "",
          "---------------"
        ],
        "src/jsiFileCmds.c||src/jsiFileCmds.c": [
          "File: src/jsiFileCmds.c -> src/jsiFileCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #define S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)",
          "32: #endif",
          "34: #ifndef MAXPATHLEN",
          "35: #define MAXPATHLEN 1024",
          "36: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #ifndef S_ISUID",
          "35: #define S_ISUID 0004000",
          "36: #define S_ISGID 0002000",
          "37: #define S_ISVTX 0001000",
          "38: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:         || (create && Jsi_InterpAccess(interp, fname, JSI_INTACCESS_CREATE) != JSI_OK))) \\",
          "47:         return Jsi_LogError(\"%s access denied by safe interp: %s\", writ?\"write\":\"read\", GSVal(fname));",
          "51: {",
          "52:     int rc;",
          "53:     Jsi_StatBuf st;",
          "54:     SAFEACCESS(fnam, 0, 1)",
          "55:     if (islstat)",
          "56:         rc = Jsi_Lstat(interp, fnam, &st);",
          "57:     else",
          "",
          "[Removed Lines]",
          "49: Jsi_RC jsi_FileStatCmd(Jsi_Interp *interp, Jsi_Value *fnam, Jsi_Value *_this,",
          "50:     Jsi_Value **ret, Jsi_Func *funcPtr, int islstat)",
          "",
          "[Added Lines]",
          "55: static char* getFileTypeCh(int mode, char smode[])",
          "56: {",
          "57:     char c = '-';",
          "58:     if (S_ISREG(mode))",
          "59:         c = '-';",
          "60:     else if (S_ISDIR(mode))",
          "61:         c = 'd';",
          "62: #ifdef S_ISLNK",
          "63:     else if (S_ISLNK(mode))",
          "64:         c = 'l';",
          "65: #endif",
          "66: #ifdef S_ISCHR",
          "67:     else if (S_ISCHR(mode))",
          "68:         c = 'c';",
          "69: #endif",
          "70: #ifdef S_ISBLK",
          "71:     else if (S_ISBLK(mode))",
          "72:         c = 'b';",
          "73: #endif",
          "74: #ifdef S_ISFIFO",
          "75:     else if (S_ISFIFO(mode))",
          "76:         c = 'p';",
          "77: #endif",
          "78: #ifdef S_ISSOCK",
          "79:     else if (S_ISSOCK(mode))",
          "80:         c = 's';",
          "81: #endif",
          "82:     int i = 0;",
          "83:     smode[i++] = c;",
          "84:     smode[i++] =  ((mode & S_IRUSR)?'r':'-');",
          "85:     smode[i++] =  ((mode & S_IWUSR)?'w':'-');",
          "86:     smode[i++] =  ((mode & S_ISUID)?((mode & S_IXUSR)?'s':'S'): ((mode & S_IXUSR)?'x':'-'));",
          "87:     smode[i++] =  ((mode & S_IRGRP)?'r':'-');",
          "88:     smode[i++] =  ((mode & S_IWGRP)?'w':'-');",
          "89:     smode[i++] =  ((mode & S_ISGID)?((mode & S_IXGRP)?'s':'S'): ((mode & S_IXGRP)?'x':'-'));",
          "90:     smode[i++] =  ((mode & S_IROTH)?'r':'-');",
          "91:     smode[i++] =  ((mode & S_IWOTH)?'w':'-');",
          "92:     smode[i++] =  ((mode & S_ISVTX)?((mode & S_IXOTH)?'t':'T'): ((mode & S_IXOTH)?'x':'-'));",
          "93:     smode[i] = 0;",
          "94:     return smode;",
          "95: }",
          "97: Jsi_RC jsi_FileStatCmd(Jsi_Interp *interp, Jsi_Value *fnam, Jsi_Value **ret, int flags)",
          "102:     int islstat = flags&1;",
          "103:     int isshort = flags&2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:     nnv = Jsi_ValueMakeNumber(interp, NULL, (Jsi_Number)val); \\",
          "69:     Jsi_ObjInsert(interp, ores, nam, nnv, 0);",
          "74: #ifndef __WIN32",
          "76: #endif",
          "79:     Jsi_ValueDup2(interp, ret, vres);",
          "80:     Jsi_DecrRefCount(interp, vres);",
          "81:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "71:     MKDBL(\"dev\",st.st_dev); MKDBL(\"ino\",st.st_ino); MKDBL(\"mode\",st. st_mode);",
          "72:     MKDBL(\"nlink\",st.st_nlink); MKDBL(\"uid\",st.st_uid); MKDBL(\"gid\",st.st_gid);",
          "73:     MKDBL(\"rdev\",st.st_rdev);",
          "75:     MKDBL(\"blksize\",st.st_blksize); MKDBL(\"blocks\",st.st_blocks);",
          "77:     MKDBL(\"atime\",st.st_atime); MKDBL(\"mtime\",st.st_mtime); MKDBL(\"ctime\",st.st_ctime);",
          "78:     MKDBL(\"size\",st.st_size);",
          "",
          "[Added Lines]",
          "120:     MKDBL(\"mtime\",st.st_mtime); MKDBL(\"size\",st.st_size);",
          "121:     MKDBL(\"uid\",st.st_uid); MKDBL(\"gid\",st.st_gid);",
          "122:     MKDBL(\"mode\",st.st_mode);",
          "123:     char smode[30];",
          "124:     getFileTypeCh(st.st_mode, smode);",
          "125:     Jsi_Value *nv = Jsi_ValueNewStringDup(interp, smode);",
          "126:     Jsi_ObjInsert(interp, ores, \"perms\", nv, 0);",
          "127:     if (!isshort) {",
          "128:         MKDBL(\"dev\",st.st_dev); MKDBL(\"ino\",st.st_ino);",
          "129:         MKDBL(\"nlink\",st.st_nlink); MKDBL(\"rdev\",st.st_rdev);",
          "131:         MKDBL(\"blksize\",st.st_blksize); MKDBL(\"blocks\",st.st_blocks);",
          "133:         MKDBL(\"ctime\",st.st_ctime); MKDBL(\"atime\",st.st_atime);",
          "134:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "85: static Jsi_RC FileStatCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "86:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "87: {",
          "89: }",
          "91: static Jsi_RC FileLstatCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "92:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "93: {",
          "95: }",
          "134: FSS_Owned, FSS_Isdir, FSS_Isfile };",
          "136: static Jsi_RC _FileSubstat(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Removed Lines]",
          "88:     return jsi_FileStatCmd(interp, Jsi_ValueArrayIndex(interp, args, 0), _this, ret, funcPtr, 0);",
          "94:     return jsi_FileStatCmd(interp, Jsi_ValueArrayIndex(interp, args, 0), _this, ret, funcPtr, 1);",
          "97: static const char *getFileType(int mode, int lmode)",
          "98: {",
          "99: #ifdef S_ISLNK",
          "100:     if (S_ISLNK(mode) || S_ISLNK(lmode)) {",
          "101:         return \"link\";",
          "102:     }",
          "103: #endif",
          "104:     if (S_ISDIR(mode)) {",
          "105:         return \"directory\";",
          "106:     }",
          "107: #ifdef S_ISCHR",
          "108:     else if (S_ISCHR(mode)) {",
          "109:         return \"characterSpecial\";",
          "110:     }",
          "111: #endif",
          "112: #ifdef S_ISBLK",
          "113:     else if (S_ISBLK(mode)) {",
          "114:         return \"blockSpecial\";",
          "115:     }",
          "116: #endif",
          "117: #ifdef S_ISFIFO",
          "118:     else if (S_ISFIFO(mode)) {",
          "119:         return \"fifo\";",
          "120:     }",
          "121: #endif",
          "122: #ifdef S_ISSOCK",
          "123:     else if (S_ISSOCK(mode)) {",
          "124:         return \"socket\";",
          "125:     }",
          "126: #endif",
          "127:     else if (S_ISREG(mode)) {",
          "128:         return \"file\";",
          "129:     }",
          "130:     return \"unknown\";",
          "131: }",
          "133: enum { FSS_Exists, FSS_Atime, FSS_Mtime, FSS_Writable, FSS_Readable, FSS_Executable, FSS_Type,",
          "",
          "[Added Lines]",
          "144:     return jsi_FileStatCmd(interp, Jsi_ValueArrayIndex(interp, args, 0), ret, 0);",
          "150:     return jsi_FileStatCmd(interp, Jsi_ValueArrayIndex(interp, args, 0), ret, 1);",
          "153: enum { FSS_Exists, FSS_Atime, FSS_Mtime, FSS_Writable, FSS_Readable, FSS_Executable, FSS_Perms,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "139:     Jsi_Value *fnam = Jsi_ValueArrayIndex(interp, args, 0);",
          "140:     int rc;",
          "141:     Jsi_StatBuf st = {}, lst = {};",
          "142:     st.st_uid = -1;",
          "143:     rc = Jsi_Stat(interp, fnam, &st) | Jsi_Lstat(interp, fnam, &lst);",
          "144:     switch (sub) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162:     char smode[30];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "154:             Jsi_ValueMakeBool(interp, ret, 1);",
          "155: #endif",
          "156:             break;",
          "158:         case FSS_Owned:",
          "159: #ifndef __WIN32",
          "160:             Jsi_ValueMakeBool(interp, ret, rc == 0 && geteuid() == st.st_uid);",
          "",
          "[Removed Lines]",
          "157:         case FSS_Type: Jsi_ValueMakeStringKey(interp, ret, (char*)getFileType((int)st.st_mode, (int)lst.st_mode)); break;",
          "",
          "[Added Lines]",
          "178:         case FSS_Perms:",
          "179:             getFileTypeCh((int)st.st_mode, smode);",
          "180:             Jsi_ValueMakeStringKey(interp, ret, smode); break;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "176:     return _FileSubstat(interp, args, _this, ret, funcPtr, FSS_##nam);\\",
          "177: }",
          "178: MAKE_FSS_SUB(Exists) MAKE_FSS_SUB(Atime) MAKE_FSS_SUB(Writable) MAKE_FSS_SUB(Readable)",
          "180: MAKE_FSS_SUB(Isdir) MAKE_FSS_SUB(Isfile) MAKE_FSS_SUB(Mtime)",
          "181: #ifndef __WIN32",
          "182: #define MKDIR_DEFAULT(PATHNAME) mkdir(PATHNAME, 0755)",
          "",
          "[Removed Lines]",
          "179: MAKE_FSS_SUB(Executable) MAKE_FSS_SUB(Type) MAKE_FSS_SUB(Owned)",
          "",
          "[Added Lines]",
          "202: MAKE_FSS_SUB(Executable) MAKE_FSS_SUB(Perms) MAKE_FSS_SUB(Owned)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "844:     int flags;",
          "845:     bool retCount;",
          "847:     int discardCnt;",
          "848:     int maxDiscard;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "869:     bool retInfo;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "856:     const char *prefix;",
          "857: } GlobData;",
          "860: static Jsi_OptionSpec GlobOptions[] = {",
          "861:     JSI_OPT(STRING, GlobData, dir,      .help=\"The start directory: this path will not be prepended to results\"),",
          "862:     JSI_OPT(INT,    GlobData, maxDepth, .help=\"Maximum directory depth to recurse into\"),",
          "",
          "[Removed Lines]",
          "859: const char *globRetValues[] = { \"file\", \"dir\", \"both\", \"count\" };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "868:     JSI_OPT(STRKEY, GlobData, prefix,   .help=\"String prefix to prepend to each file in result list\"),",
          "869:     JSI_OPT(BOOL,   GlobData, recurse,  .help=\"Recurse into sub-directories\"),",
          "870:     JSI_OPT(BOOL,   GlobData, retCount, .help=\"Return only the count of matches\"),",
          "871:     JSI_OPT(BOOL,   GlobData, tails,    .help=\"Returned only tail of path\"),",
          "872:     JSI_OPT(STRKEY, GlobData, types,    .help=\"Filter files to include type: one or more of chars 'fdlpsbc' for file, directory, link, etc\"),",
          "873:     JSI_OPT_END(GlobData, .help=\"Glob options\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "894:     JSI_OPT(BOOL,   GlobData, retInfo,  .help=\"Return file info: size, uid, gid, mode, name, and path\"),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "880:     if (cnt>interp->maxIncDepth || !path)",
          "881:         return Jsi_LogError(\"runaway File.globs\");",
          "882:     struct dirent **namelist;",
          "883:     Jsi_RC rc = JSI_OK;",
          "884:     int i, n, flags = opts->flags, slen;",
          "885:     bool bres = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "907:     char pbuf[PATH_MAX];",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "960:         if (ftyp == DT_LNK) {",
          "961:             if (opts->noTypes && (!(flags&JSI_FILE_TYPE_LINK)))",
          "962:                 continue;",
          "964:             snprintf(pbuf, sizeof(pbuf), \"%s%s%s\", spath, (spath[0]?\"/\":\"\"),  z);",
          "965:             Jsi_StatBuf stat;",
          "966:             Jsi_Value *vpath = Jsi_ValueNewStringConst(interp, pbuf, -1);",
          "",
          "[Removed Lines]",
          "963:             char pbuf[PATH_MAX];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "971:             if (S_ISDIR(stat.st_mode))",
          "972:                 ftyp = DT_DIR;",
          "973:         }",
          "975:             if (mid) {",
          "976:                 if (zPattern != NULL && Jsi_GlobMatch(zPattern, z, 0) == 0)",
          "977:                     continue;",
          "",
          "[Removed Lines]",
          "974:         if (ftyp == DT_DIR) {",
          "",
          "[Added Lines]",
          "998:         if (ftyp != DT_DIR) {",
          "999:             if (!(flags&JSI_FILE_TYPE_FILES) || mid)",
          "1000:                 continue;",
          "1001:         } else {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "999:                     else if (bres!=0 && bres!=1)",
          "1000:                         rc = JSI_ERROR;",
          "1001:                 }",
          "1021:                 zz = Jsi_DSValue(&sStr);",
          "1022:                 rc = SubGlobsDirectory(interp, obj, reg, zPattern, zz, opts, deep+1, cnt+1);",
          "1023:                 Jsi_DSFree(&sStr);",
          "",
          "[Removed Lines]",
          "1002:                 if (opts->types && Jsi_Strchr(opts->types, 'd')) {",
          "1003:                     opts->cnt++;",
          "1004:                     if (!opts->retCount) {",
          "1005:                         Jsi_DString pStr;",
          "1006:                         Jsi_DSInit(&pStr);",
          "1007:                         if (opts->prefix)",
          "1008:                             Jsi_DSAppend(&pStr, opts->prefix, z, NULL);",
          "1009:                         if (!opts->tails && spath[0])",
          "1010:                             Jsi_DSAppend(&pStr, spath, \"/\", NULL);",
          "1011:                         Jsi_DSAppend(&pStr, z, NULL);",
          "1012:                         zz = Jsi_DSValue(&pStr);",
          "1013:                         if (opts->dirLen && Jsi_Strlen(zz)>=(uint)opts->dirLen) {",
          "1014:                             zz += opts->dirLen;",
          "1015:                             if (zz[0] == '/') zz++;",
          "1016:                         }",
          "1017:                         Jsi_ObjArrayAdd(interp, obj, Jsi_ValueNewStringDup(interp, zz));",
          "1018:                         Jsi_DSFree(&pStr);",
          "1019:                     }",
          "1020:                 }",
          "",
          "[Added Lines]",
          "1029:                 if (opts->types && Jsi_Strchr(opts->types, 'd'))",
          "1030:                     goto dumpit;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1030:             }",
          "1031:             if (opts->types==0 && opts->noTypes && (!(flags&JSI_FILE_TYPE_DIRS)))",
          "1032:                 continue;",
          "1036:         }",
          "1038:         if (opts->types) {",
          "",
          "[Removed Lines]",
          "1033:         } else {",
          "1034:             if (!(flags&JSI_FILE_TYPE_FILES) || mid)",
          "1035:                 continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1100:             } else if (bres!=0 && bres!=1)",
          "1101:                 rc = JSI_ERROR;",
          "1102:         }",
          "1103:         opts->cnt++;",
          "1104:         if (!opts->retCount) {",
          "1106:             if (opts->prefix)",
          "1107:                 Jsi_DSAppend(&tStr, opts->prefix, NULL);",
          "1108:             if (!opts->tails)",
          "",
          "[Removed Lines]",
          "1105:             Jsi_DSFree(&tStr);",
          "",
          "[Added Lines]",
          "1110: dumpit:",
          "1113:             Jsi_DSSetLength(&tStr, 0);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1113:                 z += opts->dirLen;",
          "1114:                 if (z[0] == '/') z++;",
          "1115:             }",
          "1118:         }",
          "1119:         if (opts->limit>0 && opts->cnt >= opts->limit)",
          "1120:             break;",
          "",
          "[Removed Lines]",
          "1116:             rc = Jsi_ObjArrayAdd(interp, obj, Jsi_ValueNewStringDup(interp, z));",
          "1117:             Jsi_DSSetLength(&tStr, 0);",
          "",
          "[Added Lines]",
          "1124:             Jsi_Value *nv;",
          "1125:             if (!opts->retInfo)",
          "1126:                 nv = Jsi_ValueNewStringDup(interp, z);",
          "1127:             else {",
          "1128:                 Jsi_Value *info = Jsi_ValueNew1(interp);",
          "1129:                 snprintf(pbuf, sizeof(pbuf), \"%s%s%s\", spath, (spath[0]?\"/\":\"\"),  z);",
          "1130:                 Jsi_Value *vpath = Jsi_ValueNewStringConst(interp, pbuf, -1);",
          "1131:                 Jsi_IncrRefCount(interp, vpath);",
          "1132:                 rc = jsi_FileStatCmd(interp, vpath, &info, 2);",
          "1133:                 Jsi_DecrRefCount(interp, vpath);",
          "1134:                 if (rc != JSI_OK) {",
          "1135:                     Jsi_DecrRefCount(interp, info);",
          "1136:                     break;",
          "1137:                 }",
          "1138:                 nv = Jsi_ValueNewStringDup(interp, z);",
          "1139:                 Jsi_ObjInsert(interp, info->d.obj, \"name\", nv, 0);",
          "1140:                 if (opts->recurse)",
          "1141:                     Jsi_ObjInsert(interp, info->d.obj, \"path\", (spath[0]?Jsi_ValueNewStringDup(interp, pbuf):nv), 0);",
          "1142:                 nv = info;",
          "1143:             }",
          "1144:             rc = Jsi_ObjArrayAdd(interp, obj, nv);",
          "1145:             if (opts->retInfo)",
          "1146:                 Jsi_DecrRefCount(interp, nv);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1196:         }",
          "1197:         Jsi_DSAppend(&dStr, dcp, (*dcp && dcp[Jsi_Strlen(dcp)-1]!='/')?\"/\":\"\", NULL);",
          "1198:     }",
          "1200:         obj = Jsi_ObjNew(interp);",
          "1201:         Jsi_ValueMakeArrayObject(interp, ret, obj);",
          "1202:     }",
          "",
          "[Removed Lines]",
          "1199:     if (!Data.retCount) {",
          "",
          "[Added Lines]",
          "1228:     if (Data.retCount) {",
          "1229:         if (Data.retInfo) {",
          "1230:             rc = Jsi_LogError(\"Can not use both retCount and retInfo\");",
          "1231:             goto done;",
          "1232:         }",
          "1233:     } else {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1258:     { \"mknod\",      FileMknodCmd,       3,  3, \"file:string, mode:number, dev:number\", .help=\"Create unix device file using mknod\"  },",
          "1259:     { \"mtime\",      FileMtimeCmd,       1,  1, \"file:string\",  .help=\"Return file modified time\", .retType=(uint)JSI_TT_NUMBER },",
          "1260:     { \"owned\",      FileOwnedCmd,       1,  1, \"file:string\",  .help=\"Return true if file is owned by user\", .retType=(uint)JSI_TT_BOOLEAN },",
          "1261:     { \"pwd\",        FilePwdCmd,         0,  0, \"\",  .help=\"Return current directory\", .retType=(uint)JSI_TT_STRING },",
          "1262:     { \"remove\",     FileRemoveCmd,      1,  2, \"file:string, force:boolean=false\",  .help=\"Delete a file or direcotry\" },",
          "1263:     { \"rename\",     FileRenameCmd,      2,  3, \"src:string, dest:string, force:boolean=false\",  .help=\"Rename a file, with possible overwrite\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1295:     { \"perms\",      FilePermsCmd,       1,  1, \"file:string\",  .help=\"Return perms string\", .retType=(uint)JSI_TT_STRING },",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1271:     { \"tail\",       FileTailCmd,        1,  1, \"file:string\",  .help=\"Return file name minus dirname\", .retType=(uint)JSI_TT_STRING },",
          "1272:     { \"tempfile\",   FileTempfileCmd,    1,  1, \"file:string\",  .help=\"Create a temp file\", .retType=(uint)JSI_TT_ANY },",
          "1273:     { \"truncate\",   FileTruncateCmd,    2,  2, \"file:string, size:number\",  .help=\"Truncate file\" },",
          "1275:     { \"write\",      FileWriteCmd,       2,  3, \"file:string, str:string, mode:string='wb+'\",  .help=\"Write a file\", .retType=(uint)JSI_TT_NUMBER },",
          "1276:     { \"writable\",   FileWritableCmd,    1,  1, \"file:string\",  .help=\"Return true if file is writable\", .retType=(uint)JSI_TT_BOOLEAN },",
          "1277:     { NULL, 0,0,0,0, .help=\"Commands for accessing the filesystem\" }",
          "",
          "[Removed Lines]",
          "1274:     { \"type\",       FileTypeCmd,        1,  1, \"file:string\",  .help=\"Return type of file\", .retType=(uint)JSI_TT_STRING },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiFilesys.c||src/jsiFilesys.c": [
          "File: src/jsiFilesys.c -> src/jsiFilesys.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "906: {",
          "907:     UdfGet(udf, _this, funcPtr);",
          "908: #if JSI__FILESYS==1",
          "910: #else",
          "911:     return JSI_ERROR;",
          "912: #endif",
          "",
          "[Removed Lines]",
          "909:     return jsi_FileStatCmd(interp, udf->fname, _this, ret, funcPtr, 0);",
          "",
          "[Added Lines]",
          "909:     return jsi_FileStatCmd(interp, udf->fname, ret, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "917: {",
          "918:     UdfGet(udf, _this, funcPtr);",
          "919: #if JSI__FILESYS==1",
          "921: #else",
          "922:     return JSI_ERROR;",
          "923: #endif",
          "",
          "[Removed Lines]",
          "920:     return jsi_FileStatCmd(interp, udf->fname, _this, ret, funcPtr, 1);",
          "",
          "[Added Lines]",
          "920:     return jsi_FileStatCmd(interp, udf->fname, ret, 1);",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "529:     struct Jsi_Obj *constructor;",
          "532: #ifdef JSI_MEM_DEBUG",
          "533:     jsi_ValueDebug VD;",
          "534: #endif",
          "",
          "[Removed Lines]",
          "531:     int gc_refs;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "564:         struct Jsi_Value *lval;",
          "565:         const char *lookupFail;",
          "566:     } d;",
          "568: #ifdef JSI_MEM_DEBUG",
          "569:     jsi_ValueDebug VD;",
          "570: #endif",
          "",
          "[Removed Lines]",
          "567:     struct Jsi_Value *next, *prev;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1147:     Jsi_InterpDebug *dbPtr;",
          "1148:     jsiCallTraceProc traceHook;",
          "1150:     int maxOpCnt;",
          "1151:     int maxUserObjs;",
          "1152:     int userObjCnt;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1149:     int memLeakCnt;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1463: extern Jsi_Value* jsi_MakeFuncValueSpec(Jsi_Interp *interp, Jsi_CmdSpec *cmdSpec, void *privData);",
          "1464: extern bool jsi_FuncArgCheck(Jsi_Interp *interp, Jsi_Func *f, const char *argStr);",
          "1465: extern bool jsi_CommandArgCheck(Jsi_Interp *interp, Jsi_CmdSpec *cmdSpec, Jsi_Func *f, const char *parent);",
          "1468: extern Jsi_RC jsi_LoadLoadCmd(Jsi_Interp *interp, Jsi_Value *args,",
          "1469:     Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr);",
          "1470: extern Jsi_RC jsi_LoadUnloadCmd(Jsi_Interp *interp, Jsi_Value *args,",
          "",
          "[Removed Lines]",
          "1466: extern Jsi_RC jsi_FileStatCmd(Jsi_Interp *interp, Jsi_Value *fnam, Jsi_Value *_this,",
          "1467:     Jsi_Value **ret, Jsi_Func *funcPtr, int islstat);",
          "",
          "[Added Lines]",
          "1466: extern Jsi_RC jsi_FileStatCmd(Jsi_Interp *interp, Jsi_Value *fnam, Jsi_Value **ret, int flags);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1476: extern Jsi_Value *jsi_LoadFunction(Jsi_Interp *interp, const char *str, Jsi_Value *tret);",
          "1477: extern Jsi_RC jsi_SysExecCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1478:     Jsi_Value **ret, Jsi_Func *funcPtr, bool restricted);",
          "1480: extern Jsi_FuncObj *jsi_FuncObjNew(Jsi_Interp *interp, Jsi_Func *func);",
          "1481: extern void jsi_FuncObjFree(Jsi_FuncObj *fobj);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1478: extern void jsi_ObjInsertCheck(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *value, bool add);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1520: extern Jsi_Number jsi_VersionNormalize(Jsi_Number ver, char *obuf, size_t osiz);",
          "1521: extern const char* jsi_FuncGetCode(Jsi_Interp *interp, Jsi_Func *func, int *lenPtr);",
          "1522: extern Jsi_RC jsi_RegExpMatches(Jsi_Interp *interp, Jsi_Value *pattern, const char *str, int slen, Jsi_Value *ret, int *ofs, bool match);",
          "1525: extern Jsi_RC Jsi_CleanValue(Jsi_Interp *interp, Jsi_Interp *tointerp, Jsi_Value *val, Jsi_Value **ret); //TODO: EXPORT",
          "1526: extern void jsi_SysPutsCmdPrefix(Jsi_Interp *interp, jsi_LogOptions *popts,Jsi_DString *dStr, int* quote, const char **fnPtr);",
          "",
          "[Removed Lines]",
          "1523: extern int jsi_AllObjOp(Jsi_Interp *interp, Jsi_Obj* obj, int op);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1568: extern void jsi_DebugObj(Jsi_Obj* o, const char *reason, uint idx, Jsi_Interp *interp);",
          "1570: #define jsi_DebugValueCallIdx() ++interp->dbPtr->memDebugCallIdx",
          "1572: #else",
          "1573: #define VALINIT { __VALSIG__ .refCnt=1, .vt=JSI_VT_UNDEF, .f={.flag=JSI_OM_ISSTATIC}  }",
          "1574: #define jsi_ValueDebugUpdate(interp, vd, v, tbl, file, line, func)",
          "",
          "[Removed Lines]",
          "1571: #define VALINIT { __VALSIG__ .refCnt=1, .vt=JSI_VT_UNDEF, .f={.flag=JSI_OM_ISSTATIC}, .d={}, .next=NULL, .prev=NULL, .VD={.fname=__FILE__, .line=__LINE__,.func=__PRETTY_FUNCTION__}  }",
          "",
          "[Added Lines]",
          "1569: #define VALINIT { __VALSIG__ .refCnt=1, .vt=JSI_VT_UNDEF, .f={.flag=JSI_OM_ISSTATIC}, .d={}, .VD={.fname=__FILE__, .line=__LINE__,.func=__PRETTY_FUNCTION__}  }",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:     JSI_OPT(INT,   Jsi_Interp, maxUserObjs, .help=\"Maximum number of 'new' object calls, eg. File, RegExp, etc\", .flags=JSI_OPT_LOCKSAFE ),",
          "107:     JSI_OPT(INT,   Jsi_Interp, maxOpCnt,    .help=\"Execution limit for op-code evaluation\", jsi_IIOF|JSI_OPT_LOCKSAFE ),",
          "108:     JSI_OPT(INT,   Jsi_Interp, memDebug,    .help=\"Memory debugging level: 1=summary, 2=detail\", .flags=JSI_OPT_NO_CLEAR),",
          "109:     JSI_OPT(STRKEY,Jsi_Interp, name,        .help=\"Optional text name for this interp\"),",
          "110:     JSI_OPT(BOOL,  Jsi_Interp, noAutoLoad,  .help=\"Disable autoload\", .flags=JSI_OPT_LOCKSAFE ),",
          "111:     JSI_OPT(BOOL,  Jsi_Interp, noConfig,    .help=\"Disable use of Interp.conf to change options after create\", jsi_IIOF),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:     JSI_OPT(INT,   Jsi_Interp, memLeakCnt,  .help=\"Leak memory count due to object added to self\", jsi_IIOF|JSI_OPT_LOCKSAFE ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1966:         Jsi_HashDelete(interp->packageHash);",
          "1967:     Jsi_HashDelete(interp->assocTbl);",
          "1968:     interp->cleanup = 1;",
          "1970: #ifdef JSI_MEM_DEBUG",
          "1971:     jsi_DebugDumpValues(interp);",
          "1972: #endif",
          "",
          "[Removed Lines]",
          "1969:     jsi_AllObjOp(interp, NULL, -1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2398:         oldse = se;",
          "2399:         int isExec = se->isExec;",
          "2400:         if (se->acdata) {",
          "2402:         }",
          "2403:         else if (se->acfunc) {",
          "2404:             if (JSI_OK != Jsi_FunctionInvokeJSON(interp, se->acfunc, Jsi_DSValue(&se->data), NULL))",
          "",
          "[Removed Lines]",
          "2401:             jsi_AliasCreateCmd(interp, Jsi_DSValue(&se->func), se->acdata);",
          "",
          "[Added Lines]",
          "2402:             jsi_AliasCreateCmd(interp, Jsi_DSValue(&se->func), (AliasCmd*)se->acdata);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2726:         Jsi_LogError(\"eval failure\");",
          "2727:         interp->threadErrCnt++;",
          "2728:         if (Jsi_MutexLock(interp, interp->Mutex) != JSI_OK)",
          "2729:             return NULL;",
          "2730:         Jsi_MutexUnlock(interp, interp->Mutex);",
          "2731:     }",
          "2732:     interpObjErase(udf);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2730: #ifdef __WIN32",
          "2731:             return;",
          "2732: #else",
          "2734: #endif",
          "",
          "---------------"
        ],
        "src/jsiNumber.c||src/jsiNumber.c": [
          "File: src/jsiNumber.c -> src/jsiNumber.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: }",
          "15: int Jsi_NumberIsInfinity(Jsi_Number a) {",
          "17:     if (!isinf(a))",
          "18:         return 0;",
          "19:     return (a<0 ? -1 : 1);",
          "",
          "[Removed Lines]",
          "16: #if JSI__MUSL==1 || defined(__FreeBSD__) || defined(__WIN32)",
          "",
          "[Added Lines]",
          "16: #if JSI__MUSL==1 || defined(__FreeBSD__) || defined(__WIN32) || defined(__cplusplus)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:     ChkStringN(_this, funcPtr, v);",
          "149:     if (Jsi_GetIntFromValue(interp, Jsi_ValueArrayIndex(interp, args, skip), &prec) != JSI_OK)",
          "150:         return JSI_ERROR;",
          "152:     Jsi_GetDoubleFromValue(interp, v, &num);",
          "153:     snprintf(buf, sizeof(buf),\"%.*\" JSI_NUMFFMT, prec, num);",
          "154:     if (num<0)",
          "",
          "[Removed Lines]",
          "151:     if (prec<=0 || prec>JSI_MAX_NUMBER_STRING) return Jsi_LogError(\"precision must be between 1 and %d\", JSI_MAX_NUMBER_STRING);",
          "",
          "[Added Lines]",
          "151:     if (prec<=0 || (uint)prec>JSI_MAX_NUMBER_STRING) return Jsi_LogError(\"precision must be between 1 and %d\", JSI_MAX_NUMBER_STRING);",
          "",
          "---------------"
        ],
        "src/jsiObj.c||src/jsiObj.c": [
          "File: src/jsiObj.c -> src/jsiObj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:     return JSI_OK;",
          "145: }",
          "148:     if (op==2) {",
          "149:         Jsi_Obj* o = interp->allObjs;",
          "150:         while (o) {",
          "",
          "[Removed Lines]",
          "147: int jsi_AllObjOp(Jsi_Interp *interp, Jsi_Obj* obj, int op) {",
          "",
          "[Added Lines]",
          "148: void jsi_ObjInsertCheck(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *value, bool add)",
          "149: {",
          "150:     if (!add) return;",
          "151:     if (obj == value->d.obj && !interp->memLeakCnt++)",
          "152:         Jsi_LogWarn(\"recursive add of object will leak memory\");",
          "153: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "207: #ifndef JSI_MEM_DEBUG",
          "208: Jsi_Obj * Jsi_ObjNew(Jsi_Interp *interp) {",
          "209:     Jsi_Obj *obj = jsi_ObjNew_(interp);",
          "211:     return obj;",
          "212: }",
          "213: #else",
          "214: Jsi_Obj * jsi_ObjNew(Jsi_Interp *interp, const char *fname, int line, const char *func) {",
          "215:     Jsi_Obj *obj = jsi_ObjNew_(interp);",
          "216:     jsi_ValueDebugUpdate(interp, obj, objDebugTbl, fname, line, func);",
          "218:     return obj;",
          "219: }",
          "",
          "[Removed Lines]",
          "210:     jsi_AllObjOp(interp, obj, 1);",
          "217:     jsi_AllObjOp(interp, obj, 1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "225: #ifdef JSI_MEM_DEBUG",
          "226:     jsi_ValueDebugUpdate(interp, obj, objDebugTbl, NULL, 0, NULL);",
          "227: #endif",
          "229:     return obj;",
          "230: }",
          "231: #define Jsi_ObjNew(interp) jsi_ObjNew(interp, __FILE__, __LINE__,__PRETTY_FUNCTION__)",
          "",
          "[Removed Lines]",
          "228:     jsi_AllObjOp(interp, obj, 1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "258: {",
          "259:     interp->dbPtr->objCnt--;",
          "262: #ifdef JSI_MEM_DEBUG",
          "263:     if (interp != obj->VD.interp)",
          "264:         printf(\"interp mismatch of objFree: %p!=%p : %p\\n\", interp, obj->VD.interp, obj);",
          "",
          "[Removed Lines]",
          "261:     jsi_AllObjOp(interp, obj, 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "339:     if (Jsi_ObjArraySizer(interp, o, len+1) <= 0)",
          "340:         return JSI_ERROR;",
          "341:     o->arr[len] = v;",
          "342:     if (v)",
          "343:         Jsi_IncrRefCount(interp, v);",
          "344:     assert(o->arrCnt<=o->arrMaxSize);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:     if (v && v->vt == JSI_VT_OBJECT)",
          "352:         jsi_ObjInsertCheck(interp, o, v, 1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "358:     obj->arr[n] = value;",
          "359:     if (value)",
          "360:         Jsi_IncrRefCount(interp, value);",
          "361:     m = Jsi_ObjGetLength(interp, obj);",
          "362:     if ((n+1) > m)",
          "363:        Jsi_ObjSetLength(interp, obj, n+1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372:     if (value && value->vt == JSI_VT_OBJECT)",
          "373:         jsi_ObjInsertCheck(interp, obj, value, 1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "369: {",
          "370:     if (Jsi_ObjArraySizer(interp, obj, n) <= 0)",
          "371:         return NULL;",
          "372:     if (obj->arr[n])",
          "373:     {",
          "374:         Jsi_ValueCopy(interp, obj->arr[n], value);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "385:     if (value->vt == JSI_VT_OBJECT)",
          "386:         jsi_ObjInsertCheck(interp, obj, value, 1);",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:     return valPtr;",
          "328: }",
          "366: Jsi_Value *Jsi_ValueObjLookup(Jsi_Interp *interp, Jsi_Value *target, const char *key, int isstrkey)",
          "367: {",
          "",
          "[Removed Lines]",
          "330: #if 0",
          "331: void jsi_AllValueOp(Jsi_Interp *interp, Jsi_Value* val, int op) {",
          "332:     if (op==1) {",
          "334:         assert(interp->allValues!=val);",
          "335:         val->next = interp->allValues;",
          "336:         if (interp->allValues)",
          "337:             interp->allValues->prev = val;",
          "338:         interp->allValues = val;",
          "339:         return;",
          "340:     }",
          "341:     if (op==0) {",
          "343:         if (!val || !interp->allValues) return;",
          "344:         if (val == interp->allValues)",
          "345:             interp->allValues = val->next;",
          "346:         if (val->next)",
          "347:             val->next->prev = val->prev;",
          "348:         if (val->prev)",
          "349:             val->prev->next = val->next;",
          "350:         return;",
          "351:     }",
          "352:     if (op == -1) {",
          "353:         while (interp->allValues) {",
          "354:             printf(\"NEED CLEANUP: %p\\n\", interp->allValues);",
          "355:             Jsi_ValueFree(interp, interp->allValues);",
          "356:         }",
          "357:         return;",
          "358:     }",
          "359: #if JSI__MEMDEBUG",
          "360:     assert(0);",
          "361:     abort();",
          "362: #endif",
          "363: }",
          "364: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1416:     SIGASSERT(val, VALUE);",
          "1419:     hPtr = Jsi_TreeObjSetValue(obj, key, val, (flags&JSI_OM_ISSTRKEY));",
          "1420:     if ((flags&JSI_OM_DONTDEL))",
          "1421:         val->f.bits.dontdel = hPtr->f.bits.dontdel = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1384:     if (val->vt == JSI_VT_OBJECT)",
          "1385:         jsi_ObjInsertCheck(interp, obj, val, 1);",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "848:         if (hPtr) {",
          "849:             jsi_wsFile* fPtr;",
          "850:             if (!isNew)",
          "852:             else {",
          "853:                 fPtr = (jsi_wsFile *)Jsi_Calloc(1, sizeof(*fPtr));",
          "854:                 fPtr->fileVal = name;",
          "",
          "[Removed Lines]",
          "851:                 fPtr = Jsi_HashValueGet(hPtr);",
          "",
          "[Added Lines]",
          "851:                 fPtr = (typeof(fPtr))Jsi_HashValueGet(hPtr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "938:         Jsi_DecrRefCount(interp, fval);",
          "939:     }",
          "942:     struct {",
          "943:         int inif, inelse, matched, elide;",
          "944:     } II[11] = {};",
          "",
          "[Removed Lines]",
          "941:     char *cp, *sp, *se, pref[] = \"<!--#\", suffix[] = \"-->\", *msg = NULL;",
          "",
          "[Added Lines]",
          "941:     char *cp, *se, pref[] = \"<!--#\", suffix[] = \"-->\";",
          "942:     const char *sp, *msg = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1034:             Jsi_DSSetLength(&lStr, llen-2);",
          "1035:             cp += 2;",
          "1038:             while (*cp &&  !isalpha(*cp)) {",
          "1039:                 bool fail = 0;",
          "1040:                 switch (*cp) {",
          "",
          "[Removed Lines]",
          "1037:             bool warn = 0, req = 0, nifval = 0, not = 0, isq=0, isu=0, qfirst=0;",
          "",
          "[Added Lines]",
          "1038:             bool warn = 0, req = 0, nifval = 0, inot = 0, isq=0, isu=0, qfirst=0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1043:                     case '?': isq = 1; break;",
          "1044:                     case '@': warn = !II[ii].matched; break;",
          "1045:                     case '*': req = !II[ii].matched; break;",
          "1047:                     default: fail=1; break;",
          "1048:                 }",
          "1049:                 if (fail) { msg = \"modifier must be one of: !:=?@*\"; break; }",
          "",
          "[Removed Lines]",
          "1046:                     case '!': not = 1; break;",
          "",
          "[Added Lines]",
          "1047:                     case '!': inot = 1; break;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1067:                     Jsi_LogWarn(\"symbol \\\"%s\\\" should be a boolean: %s\", cp, fbuf);",
          "1068:                 }",
          "1069:             }",
          "1071:             if (!iselif) {",
          "1072:                 if (nifval)",
          "1073:                     II[ii].matched = 1;",
          "",
          "[Removed Lines]",
          "1070:             if (not) nifval = !nifval;",
          "",
          "[Added Lines]",
          "1071:             if (inot) nifval = !nifval;",
          "",
          "---------------"
        ],
        "tests/badfunc.jsi||tests/badfunc.jsi": [
          "File: tests/badfunc.jsi -> tests/badfunc.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: =!EXPECTSTART!=",
          "25: e ==> 'xx', functions are: bad big ugly.",
          "27: Info.funcs(x) ==> [ \"bad\", \"big\", \"ugly\" ]",
          "28: Info.data(x) ==> [ \"a\", \"b\" ]",
          "29: Info.data() ==> [ \"x\" ]",
          "",
          "[Removed Lines]",
          "26: e2 ==> 'xx' sub-commands are: atime chdir chmod copy dirname executable exists extension glob isdir isfile isrelative join link lstat mkdir mknod mtime owned pwd read readable readlink realpath remove rename rootname size stat tail tempfile truncate type writable write.",
          "",
          "[Added Lines]",
          "26: e2 ==> 'xx' sub-commands are: atime chdir chmod copy dirname executable exists extension glob isdir isfile isrelative join link lstat mkdir mknod mtime owned perms pwd read readable readlink realpath remove rename rootname size stat tail tempfile truncate writable write.",
          "",
          "---------------"
        ],
        "tests/file2.jsi||tests/file2.jsi": [
          "File: tests/file2.jsi -> tests/file2.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: ;File.dirname('XX1/AA');",
          "9: ;File.rootname('XX1/CC.txt');",
          "10: ;File.tail('XX1/CC.txt');",
          "12: ;File.extension('XX1/CC.txt');",
          "14: ;File.writable('XX1/CC.txt');",
          "",
          "[Removed Lines]",
          "11: ;File.type('XX1/CC.txt');",
          "",
          "[Added Lines]",
          "11: ;File.perms('XX1/CC.txt');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: File.dirname('XX1/AA') ==> XX1",
          "25: File.rootname('XX1/CC.txt') ==> XX1/CC",
          "26: File.tail('XX1/CC.txt') ==> CC.txt",
          "28: File.extension('XX1/CC.txt') ==> .txt",
          "29: File.writable('XX1/CC.txt') ==> true",
          "30: File.readable('XX1/CC.txt') ==> true",
          "",
          "[Removed Lines]",
          "27: File.type('XX1/CC.txt') ==> directory",
          "",
          "[Added Lines]",
          "27: File.perms('XX1/CC.txt') ==> drwxr-xr-x",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "105: File.prototype.mknod = function(file:string, mode:number, dev:number):any {};",
          "106: File.prototype.mtime = function(file:string):number {};",
          "107: File.prototype.owned = function(file:string):boolean {};",
          "108: File.prototype.pwd = function():string {};",
          "109: File.prototype.read = function(file:string, mode:string='rb'):string {};",
          "110: File.prototype.readable = function(file:string):boolean {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108: File.prototype.perms = function(file:string):string {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118: File.prototype.tail = function(file:string):string {};",
          "119: File.prototype.tempfile = function(file:string):any {};",
          "120: File.prototype.truncate = function(file:string, size:number):any {};",
          "122: File.prototype.writable = function(file:string):boolean {};",
          "123: File.prototype.write = function(file:string, str:string, mode:string='wb+'):number {};",
          "124: var Function = function(cmd,args) {};",
          "",
          "[Removed Lines]",
          "121: File.prototype.type = function(file:string):string {};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "460: <tr><td>mknod</td><td>mknod(file:string, mode:number, dev:number) </td><td>Create unix device file using mknod.</td></tr>",
          "461: <tr><td>mtime</td><td>mtime(file:string):number </td><td>Return file modified time.</td></tr>",
          "462: <tr><td>owned</td><td>owned(file:string):boolean </td><td>Return true if file is owned by user.</td></tr>",
          "463: <tr><td>pwd</td><td>pwd():string </td><td>Return current directory.</td></tr>",
          "464: <tr><td>read</td><td>read(file:string, mode:string='rb'):string </td><td>Read a file.</td></tr>",
          "465: <tr><td>readable</td><td>readable(file:string):boolean </td><td>Return true if file is readable.</td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "463: <tr><td>perms</td><td>perms(file:string):string </td><td>Return perms string.</td></tr>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "473: <tr><td>tail</td><td>tail(file:string):string </td><td>Return file name minus dirname.</td></tr>",
          "474: <tr><td>tempfile</td><td>tempfile(file:string) </td><td>Create a temp file.</td></tr>",
          "475: <tr><td>truncate</td><td>truncate(file:string, size:number) </td><td>Truncate file.</td></tr>",
          "477: <tr><td>writable</td><td>writable(file:string):boolean </td><td>Return true if file is writable.</td></tr>",
          "478: <tr><td>write</td><td>write(file:string, str:string, mode:string='wb+'):number </td><td>Write a file.</td></tr>",
          "479: </table>",
          "",
          "[Removed Lines]",
          "476: <tr><td>type</td><td>type(file:string):string </td><td>Return type of file.</td></tr>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "494: <tr><td>prefix</td><td><i>STRKEY</i></td><td>String prefix to prepend to each file in result list.</td><td><i></i></td></tr>",
          "495: <tr><td>recurse</td><td><i>BOOL</i></td><td>Recurse into sub-directories.</td><td><i></i></td></tr>",
          "496: <tr><td>retCount</td><td><i>BOOL</i></td><td>Return only the count of matches.</td><td><i></i></td></tr>",
          "497: <tr><td>tails</td><td><i>BOOL</i></td><td>Returned only tail of path.</td><td><i></i></td></tr>",
          "498: <tr><td>types</td><td><i>STRKEY</i></td><td>Filter files to include type: one or more of chars 'fdlpsbc' for file, directory, link, etc.</td><td><i></i></td></tr>",
          "499: </table>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "497: <tr><td>retInfo</td><td><i>BOOL</i></td><td>Return file info: size, uid, gid, mode, name, and path.</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "639: <tr><td>maxUserObjs</td><td><i>INT</i></td><td>Maximum number of 'new' object calls, eg. File, RegExp, etc.</td><td><i></i></td></tr>",
          "640: <tr><td>maxOpCnt</td><td><i>INT</i></td><td>Execution limit for op-code evaluation.</td><td><i>initOnly</i></td></tr>",
          "641: <tr><td>memDebug</td><td><i>INT</i></td><td>Memory debugging level: 1=summary, 2=detail.</td><td><i></i></td></tr>",
          "642: <tr><td>name</td><td><i>STRKEY</i></td><td>Optional text name for this interp.</td><td><i></i></td></tr>",
          "643: <tr><td>noAutoLoad</td><td><i>BOOL</i></td><td>Disable autoload.</td><td><i></i></td></tr>",
          "644: <tr><td>noConfig</td><td><i>BOOL</i></td><td>Disable use of Interp.conf to change options after create.</td><td><i>initOnly</i></td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "643: <tr><td>memLeakCnt</td><td><i>INT</i></td><td>Leak memory count due to object added to self.</td><td><i>initOnly</i></td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b49584fc5836a03a65af1440b552b016ff31a6ac",
      "candidate_info": {
        "commit_hash": "b49584fc5836a03a65af1440b552b016ff31a6ac",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/b49584fc5836a03a65af1440b552b016ff31a6ac",
        "files": [
          "Makefile",
          "lib/Websrv.jsi",
          "lib/Wget.jsi",
          "lws/Makefile",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiInterp.c",
          "src/jsiWebSocket.c",
          "tools/makeopenssl.sh",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.25\": add openssl\n\nFossilOrigin-Name: 7add7e21ad881efd10061ca40445ff364a076c4a70fc2171bacf954192d5cdb4",
        "before_after_code_files": [
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "lib/Wget.jsi||lib/Wget.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/makeopenssl.sh||tools/makeopenssl.sh",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:         query       :'',        // Query to append to url.",
          "31:         rootdir     :null,      // Base directory.",
          "32:         server      :false,     // Server mode: same as noGui=true and closeTimout=0",
          "33:         srcFile     :'',        // File of code to source inside the Websrv function.",
          "34:         uploadDir   :'/tmp',    // Upload files go here",
          "35:         timeout     :60000,     // Set timeout (in ms) to shutdown. This is idle time, unless negative.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:         ssl         :false,     // Enable ssl",
          "34:         sslCert     :null,      // Used for https",
          "35:         sslKey      :null,      // Used for https",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "403:             port:self.port,",
          "404:             rootdir:self.rootdir,",
          "405:             urlPrefix:self.urlPrefix,",
          "406:             mimeLookupFunc:mimeLookup,",
          "407:         };",
          "408:         switch (self.mode) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "409:             sslCert:self.sslCert,",
          "410:             sslKey:self.sslKey,",
          "411:             ssl:self.ssl,",
          "",
          "---------------"
        ],
        "lib/Wget.jsi||lib/Wget.jsi": [
          "File: lib/Wget.jsi -> lib/Wget.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:         nowait      : false,        // Just return object: caller will call update.",
          "10:         onDone      : null,         // Callback when done.",
          "11:         O           : '',           // Output file name, or - for stdout, . for response: default is url tail.",
          "13:         wsdebug     : 0             // WebSockets debug level.",
          "14:     };",
          "",
          "[Removed Lines]",
          "12:         wsOpts      :{},            // Websocket options.",
          "",
          "[Added Lines]",
          "12:         sslCert     : null,         // Used for https",
          "13:         sslKey      : null,         // Used for https",
          "14:         wsOpts      : {},           // Websocket options.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:             port:self.port,",
          "99:             address:self.address,",
          "100:             protocol:self.protocol,",
          "102:         };",
          "103:         for (var i in self.wsOpts)",
          "104:             wsopts[i] = self.wsOpts[i];",
          "",
          "[Removed Lines]",
          "101:             clientHost:self.address",
          "",
          "[Added Lines]",
          "103:             clientHost:self.address,",
          "104:             sslCert:self.sslCert,",
          "105:             sslKey:self.sslKey,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:             else {",
          "113:                 if (self.port === 80)",
          "114:                     wsopts.port = 443;",
          "116:             }",
          "117:         }",
          "118:         LogTrace(\"Starting:\", conf, wsopts);",
          "",
          "[Removed Lines]",
          "115:                 wsopts.use_ssl = true;",
          "",
          "[Added Lines]",
          "119:                 wsopts.ssl = true;",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 24",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 25",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:     JSI_OPT(BOOL,  Jsi_Interp, coverage,    .help=\"On exit generate detailed code coverage for function calls (with profile)\"),",
          "93:     JSI_OPT(CUSTOM,Jsi_Interp, debugOpts,   .help=\"Options for debugging\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=InterpDebugOptions),",
          "94:     JSI_OPT(BOOL,  Jsi_Interp, interactive, .help=\"Force interactive mode. ie. ignore no_interactive flag\", jsi_IIOF),",
          "96:     JSI_OPT(STRKEY,Jsi_Interp, historyFile, .help=\"In interactive mode, file to use for history (~/.jsish_history)\", jsi_IIOF),",
          "97:     JSI_OPT(BOOL,  Jsi_Interp, isSafe,      .help=\"Is this a safe interp (ie. with limited or no file access)\", jsi_IIOF),",
          "98:     JSI_OPT(STRKEY,Jsi_Interp, jsppChars,   .help=\"Line preprocessor when sourcing files. Line starts with first char, and either ends with it, or matches string\"),",
          "",
          "[Removed Lines]",
          "95:     JSI_OPT(BOOL,  Jsi_Interp, hasOpenSSL,  .help=\"Is SSL available in WebSocket\", jsi_IIOF),",
          "",
          "[Added Lines]",
          "95:     JSI_OPT(BOOL,  Jsi_Interp, hasOpenSSL,  .help=\"WebSocket compiled with SSL is available\", jsi_IIOF),",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:     Jsi_Value *onAuth, *onCloseLast, *onClose, *onFilter, *onOpen, *onRecv,",
          "125:     Jsi_Value* version;",
          "126:     int idx;",
          "127:     int port;",
          "",
          "[Removed Lines]",
          "124:     bool client, noUpdate, noWebsock, noWarn, use_ssl, local, extHandlers, handlersPkg, inUpdate, noCompress, noConfig, echo;",
          "",
          "[Added Lines]",
          "124:     bool client, noUpdate, noWebsock, noWarn, ssl, local, extHandlers, handlersPkg, inUpdate, noCompress, noConfig, echo;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:     const char *protocol;",
          "171:     struct lws_protocols protocols[JWS_PROTOCOL__MAX+1];",
          "172:     int ietf_version;",
          "175:     int ws_uid;",
          "176:     int ws_gid;",
          "177:     const char *clientHost;",
          "",
          "[Removed Lines]",
          "173:     char *ssl_cert_filepath;",
          "174:     char *ssl_private_key_filepath;",
          "",
          "[Added Lines]",
          "173:     const char *sslCert;",
          "174:     const char *sslKey;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "303:     JSI_OPT(BOOL,   jsi_wsCmdObj, client,     .help=\"Run in client mode\", jsi_IIOF),",
          "304:     JSI_OPT(STRKEY, jsi_wsCmdObj, clientHost, .help=\"Override host name for client\"),",
          "305:     JSI_OPT(STRKEY, jsi_wsCmdObj, clientOrigin,.help=\"Override client origin (origin)\"),",
          "307:     JSI_OPT(BOOL,   jsi_wsCmdObj, echo,       .help=\"LogInfo outputs all websock Send/Recv messages\"),",
          "308:     JSI_OPT(STRKEY, jsi_wsCmdObj, formParams, .help=\"Comma seperated list of upload form param names ('text,send,file,upload')\", jsi_IIRO),",
          "309:     JSI_OPT(BOOL,   jsi_wsCmdObj, extHandlers,.help=\"Setup builtin extension-handlers, ie: .htmli, .cssi, .jsi, .mdi\", jsi_IIOF),",
          "",
          "[Removed Lines]",
          "306:     JSI_OPT(INT,    jsi_wsCmdObj, debug,      .help=\"Set debug level. Setting this to 512 will turn on max libwebsocket log levels\"),",
          "",
          "[Added Lines]",
          "306:     JSI_OPT(INT,    jsi_wsCmdObj, debug,      .help=\"Set debug level. Setting this to 512 will turn on max liblws log levels\"),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "347:     JSI_OPT(STRING, jsi_wsCmdObj, rootdir,    .help=\"Directory to serve html from (\\\".\\\")\"),",
          "348:     JSI_OPT(STRKEY, jsi_wsCmdObj, server,     .help=\"String to send out int the header SERVER (jsiWebSocket)\"),",
          "349:     JSI_OPT(OBJ,    jsi_wsCmdObj, ssiExts,    .help=\"Object map of file extensions to apply SSI.  eg. {myext:true, shtml:false} \", jsi_IIOF),",
          "350:     JSI_OPT(CUSTOM, jsi_wsCmdObj, stats,      .help=\"Statistical data\", jsi_IIRO, .custom=Jsi_Opt_SwitchSuboption, .data=WPSStats),",
          "351:     JSI_OPT(TIME_T, jsi_wsCmdObj, startTime,  .help=\"Time of websocket start\", jsi_IIRO),",
          "352:     JSI_OPT(STRKEY, jsi_wsCmdObj, includeFile,.help=\"Default file when no extension given (include.shtml)\"),",
          "353:     JSI_OPT(OBJ,    jsi_wsCmdObj, udata,      .help=\"User data\"),",
          "354:     JSI_OPT(STRKEY, jsi_wsCmdObj, urlPrefix,  .help=\"Prefix in url to strip from path; for reverse proxy\"),",
          "355:     JSI_OPT(STRKEY, jsi_wsCmdObj, urlRedirect,.help=\"Redirect when no url or / is given. Must match urlPrefix, if given\"),",
          "357:     JSI_OPT(STRKEY, jsi_wsCmdObj, useridPass, .help=\"The USERID:PASSWORD to use for basic authentication\"),",
          "358:     JSI_OPT(OBJ,    jsi_wsCmdObj, version,    .help=\"WebSocket version info\", jsi_IIRO),",
          "359:     JSI_OPT_END(jsi_wsCmdObj, .help=\"Websocket options\")",
          "",
          "[Removed Lines]",
          "356:     JSI_OPT(BOOL,   jsi_wsCmdObj, use_ssl,    .help=\"Use https (for client)\", jsi_IIOF),",
          "",
          "[Added Lines]",
          "350:     JSI_OPT(BOOL,   jsi_wsCmdObj, ssl,        .help=\"Use https\", jsi_IIOF),",
          "351:     JSI_OPT(STRKEY, jsi_wsCmdObj, sslCert,    .help=\"SSL certificate file\"),",
          "352:     JSI_OPT(STRKEY, jsi_wsCmdObj, sslKey,     .help=\"SSL key file\"),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2988:     { \"file\",       WebSocketFileCmd,     0,  1, \"name:string=void\",.help=\"Add file to hash, or with no args return file hash\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_VOID },",
          "2989:     { \"query\",      WebSocketQueryCmd,    1,  2, \"id:number, name:string=void\",.help=\"Get one or all query values for connect id\", .retType=(uint)JSI_TT_STRING|JSI_TT_OBJECT|JSI_TT_VOID },",
          "2990:     { \"send\",       WebSocketSendCmd,     2,  2, \"id:number, data:any\", .help=\"Send a websocket message to id\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_wssend },",
          "2992:     { \"unalias\",    WebSocketUnaliasCmd,  1,  1, \"path:string\", .help=\"Return alias reverse lookup\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID},",
          "2993:     { \"update\",     WebSocketUpdateCmd,   0,  0, \"\", .help=\"Service events for just this websocket\", .retType=(uint)JSI_TT_VOID },",
          "2994:     { \"version\",    WebSocketVersionCmd,  0,  0, \"\", .help=\"Runtime library version string\", .retType=(uint)JSI_TT_STRING },",
          "",
          "[Removed Lines]",
          "2991:     { \"status\",     WebSocketStatusCmd,   0,  0, \"\", .help=\"Return libwebsocket server status\", .retType=(uint)JSI_TT_OBJECT|JSI_TT_VOID},",
          "",
          "[Added Lines]",
          "2993:     { \"status\",     WebSocketStatusCmd,   0,  0, \"\", .help=\"Return liblws server status\", .retType=(uint)JSI_TT_OBJECT|JSI_TT_VOID},",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3104:     if (!cmdPtr->noCompress)",
          "3105:         cmdPtr->info.extensions = jsi_lws_exts;",
          "3109:     cmdPtr->info.gid = cmdPtr->ws_gid;",
          "3110:     cmdPtr->info.uid = cmdPtr->ws_uid;",
          "3111:     cmdPtr->opts = LWS_SERVER_OPTION_SKIP_SERVER_CANONICAL_NAME|LWS_SERVER_OPTION_VALIDATE_UTF8;",
          "3112:     cmdPtr->info.options = cmdPtr->opts;",
          "3113:     cmdPtr->info.max_http_header_pool = 16;",
          "3114:     cmdPtr->info.timeout_secs = 5;",
          "3115:     cmdPtr->info.ssl_cipher_list = \"ECDHE-ECDSA-AES256-GCM-SHA384:\"",
          "3116:                    \"ECDHE-RSA-AES256-GCM-SHA384:\"",
          "3117:                    \"DHE-RSA-AES256-GCM-SHA384:\"",
          "",
          "[Removed Lines]",
          "3107:     cmdPtr->info.ssl_cert_filepath = cmdPtr->ssl_cert_filepath;",
          "3108:     cmdPtr->info.ssl_private_key_filepath = cmdPtr->ssl_private_key_filepath;",
          "",
          "[Added Lines]",
          "3115:     cmdPtr->info.ssl_cert_filepath = cmdPtr->sslCert;",
          "3116:     cmdPtr->info.ssl_private_key_filepath = cmdPtr->sslKey;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3127:                    \"!AES256-SHA256\";",
          "3129:     lws_set_log_level(cmdPtr->debug>255?cmdPtr->debug/256:0, NULL);",
          "3132:         cmdPtr->info.options |= LWS_SERVER_OPTION_EXPLICIT_VHOSTS;",
          "3133:     cmdPtr->context = lws_create_context(&cmdPtr->info);",
          "3134:     if (cmdPtr->context == NULL) {",
          "3135: fail:",
          "3137:         goto bail;",
          "3138:     }",
          "3139:     if (cmdPtr->info.options & LWS_SERVER_OPTION_EXPLICIT_VHOSTS) {",
          "",
          "[Removed Lines]",
          "3131:     if (!cmdPtr->client)",
          "3136:         Jsi_LogError(\"libwebsocket init failed on port %d (try another port?)\", cmdPtr->info.port);",
          "",
          "[Added Lines]",
          "3132:     if (!cmdPtr->client) {",
          "3134: #ifdef LWS_OPENSSL_SUPPORT",
          "3135:         cmdPtr->info.client_ssl_cert_filepath = cmdPtr->sslCert;",
          "3136:         cmdPtr->info.client_ssl_private_key_filepath = cmdPtr->sslKey;",
          "3137: #endif",
          "3138:     }",
          "3139:     if (cmdPtr->ssl) {",
          "3140: #ifndef LWS_OPENSSL_SUPPORT",
          "3141:         Jsi_LogError(\"WebSocket not compiled with SSL\");",
          "3142:         goto bail;",
          "3143: #endif",
          "3144:         cmdPtr->info.options |= LWS_SERVER_OPTION_DO_SSL_GLOBAL_INIT;",
          "3145:     }",
          "3149:         Jsi_LogError(\"WebSocket init failed on port %d (try another port?)\", cmdPtr->info.port);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3147:         lci.context = cmdPtr->context;",
          "3148:         lci.address = cmdPtr->address ? Jsi_ValueString(cmdPtr->interp, cmdPtr->address, NULL) : \"127.0.0.1\";",
          "3149:         lci.port = cmdPtr->port;",
          "3151:         lci.path = Jsi_ValueString(cmdPtr->interp, cmdPtr->rootdir, NULL);",
          "3152:         lci.host = cmdPtr->clientHost?cmdPtr->clientHost:lws_canonical_hostname( cmdPtr->context );",
          "3153:         lci.origin = cmdPtr->clientOrigin?cmdPtr->clientOrigin:\"origin\";",
          "3154:         lci.protocol = cmdPtr->protocols[JWS_PROTOCOL_WEBSOCK].name;",
          "3155:         lci.ietf_version_or_minus_one = cmdPtr->ietf_version;",
          "3156: #if (LWS_LIBRARY_VERSION_MAJOR>1)",
          "3157:         if (cmdPtr->post)",
          "3158:             lci.method = \"POST\";",
          "",
          "[Removed Lines]",
          "3150:         lci.ssl_connection = cmdPtr->use_ssl;",
          "",
          "[Added Lines]",
          "3163:         lci.ssl_connection = cmdPtr->ssl;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3231:     return JSI_ERROR;",
          "3232: #endif",
          "3233:     Jsi_Value *info = Jsi_ValueNew1(interp);",
          "3236:     Jsi_PkgOpts wsPkgOpts = { wsObjCmd_Specs, &wsObjCmd, websockCmds, info };",
          "3237:     Jsi_RC rc = Jsi_PkgProvideEx(interp, \"WebSocket\", jsi_WsPkgVersion, Jsi_InitWebSocket, &wsPkgOpts);",
          "3238:     Jsi_DecrRefCount(interp, info);",
          "",
          "[Removed Lines]",
          "3234:     Jsi_JSONParseFmt(interp, &info, \"{libVer:\\\"%s\\\", hdrVer:\\\"%s\\\", pkgVer:%d}\",",
          "3235:         libver, LWS_LIBRARY_VERSION, jsi_WsPkgVersion);",
          "",
          "[Added Lines]",
          "3248:     bool hasSSL = 0;",
          "3249:     const char *sslVerStr = \"\";",
          "3250:     long sslCompat = 0;",
          "3251:     long sslVer = 0;",
          "3252: #ifdef LWS_OPENSSL_SUPPORT",
          "3253:     hasSSL = 1;",
          "3254:     sslVer = OPENSSL_VERSION_NUMBER;",
          "3255:     sslVerStr = OPENSSL_VERSION_TEXT;",
          "3256:     sslCompat = OPENSSL_API_COMPAT;",
          "3257: #endif",
          "3258:     Jsi_JSONParseFmt(interp, &info, \"{libVer:\\\"%s\\\", hdrVer:\\\"%s\\\", pkgVer:%d, ssl:%s, sslVer:%ld, sslVerStr:\\\"%s\\\", sslCompat:%ld}\",",
          "3259:         libver, LWS_LIBRARY_VERSION, jsi_WsPkgVersion, (hasSSL?\"true\":\"false\"), sslVer, sslVerStr, sslCompat);",
          "",
          "---------------"
        ],
        "tools/makeopenssl.sh||tools/makeopenssl.sh": [
          "File: tools/makeopenssl.sh -> tools/makeopenssl.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: cd openssl &&",
          "2: CC=\"musl-gcc -static -idirafter /usr/include/ -idirafter /usr/include/x86_64-linux-gnu/\" ./Configure  no-shared linux-x86_64 &&",
          "3: make build_libs",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "184: Math.prototype.sqrt = function(num:number):number {};",
          "185: Math.prototype.srand = function(seed:number):number {};",
          "186: Math.prototype.tan = function(num:number):number {};",
          "203: var Number = function(cmd,args) {};",
          "204: Number.prototype.isFinite = function():boolean {};",
          "205: Number.prototype.isInteger = function():boolean {};",
          "",
          "[Removed Lines]",
          "187: var MySql = function(cmd,args) {};",
          "188: MySql.prototype.affectedRows = function():number {};",
          "189: MySql.prototype.complete = function(sql:string):boolean {};",
          "190: MySql.prototype.conf = function(options:string|object=void):any {};",
          "191: MySql.prototype.errorNo = function():number {};",
          "192: MySql.prototype.errorState = function():string {};",
          "193: MySql.prototype.eval = function(sql:string):number {};",
          "194: MySql.prototype.exists = function(sql:string):boolean {};",
          "195: MySql.prototype.info = function():object {};",
          "196: MySql.prototype.lastQuery = function():string {};",
          "197: MySql.prototype.lastRowid = function():number {};",
          "198: MySql.prototype.onecolumn = function(sql:string):any {};",
          "199: MySql.prototype.ping = function(noError:boolean=false):number {};",
          "200: MySql.prototype.query = function(sql:string, options:function|string|array|object=void):any {};",
          "201: MySql.prototype.reconnect = function():void {};",
          "202: MySql.prototype.reset = function():number {};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: <a href='#Interp'>Interp</a>",
          "20: <a href='#JSON'>JSON</a>",
          "21: <a href='#Math'>Math</a>",
          "23: <a href='#Number'>Number</a>",
          "24: <a href='#Object'>Object</a>",
          "25: <a href='#RegExp'>RegExp</a>",
          "",
          "[Removed Lines]",
          "22: <a href='#MySql'>MySql</a>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "626: <tr><td>coverage</td><td><i>BOOL</i></td><td>On exit generate detailed code coverage for function calls (with profile).</td><td><i></i></td></tr>",
          "627: <tr><td>debugOpts</td><td><i><a href='#debugOptsOptions'>options</a></i></td><td>Options for debugging.</td><td><i></i></td></tr>",
          "628: <tr><td>interactive</td><td><i>BOOL</i></td><td>Force interactive mode. ie. ignore no_interactive flag.</td><td><i>initOnly</i></td></tr>",
          "630: <tr><td>historyFile</td><td><i>STRKEY</i></td><td>In interactive mode, file to use for history (~/.jsish_history).</td><td><i>initOnly</i></td></tr>",
          "631: <tr><td>isSafe</td><td><i>BOOL</i></td><td>Is this a safe interp (ie. with limited or no file access).</td><td><i>initOnly</i></td></tr>",
          "632: <tr><td>jsppChars</td><td><i>STRKEY</i></td><td>Line preprocessor when sourcing files. Line starts with first char, and either ends with it, or matches string.</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "629: <tr><td>hasOpenSSL</td><td><i>BOOL</i></td><td>Is SSL available in WebSocket.</td><td><i>initOnly</i></td></tr>",
          "",
          "[Added Lines]",
          "628: <tr><td>hasOpenSSL</td><td><i>BOOL</i></td><td>WebSocket compiled with SSL is available.</td><td><i>initOnly</i></td></tr>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "796: </table>",
          "797: <a name=\"Mathend\"></a>",
          "798: <p><a href=\"#TOC\">Return to top</a>",
          "926: <a name=\"Number\"></a>",
          "928: <hr>",
          "",
          "[Removed Lines]",
          "799: <a name=\"MySql\"></a>",
          "801: <hr>",
          "804: <h1>MySql</h1>",
          "806: <font color=red>Synopsis:new MySql(options:object=void):userobj",
          "808: </font><p>Commands for accessing mysql databases.",
          "811: <h2>Methods for \"MySql\"</h2>",
          "812: <table border=\"1\"class=\"cmdstbl table\">",
          "813: <tr><th>Method</th><th>Prototype</th><th>Description</th></tr>",
          "814: <tr><td>MySql</td><td>new MySql(<a href='#new MySqlOptions'>options</a>:object=void):userobj </td><td>Create a new db connection to a MySql database:.</td></tr>",
          "815: <tr><td>affectedRows</td><td>affectedRows():number </td><td>Return affected rows.</td></tr>",
          "816: <tr><td>complete</td><td>complete(sql:string):boolean </td><td>Return true if sql is complete.</td></tr>",
          "817: <tr><td>conf</td><td>conf(<a href='#MySql.confOptions'>options</a>:string|object=void) </td><td>Configure options.</td></tr>",
          "818: <tr><td>errorNo</td><td>errorNo():number </td><td>Return error code returned by most recent call to mysql3_exec().</td></tr>",
          "819: <tr><td>errorState</td><td>errorState():string </td><td>Return the mysql error state str.</td></tr>",
          "820: <tr><td>eval</td><td>eval(sql:string):number </td><td>Run sql commands without input/output.</td></tr>",
          "821: <tr><td>exists</td><td>exists(sql:string):boolean </td><td>Execute sql, and return true if there is at least one result value.</td></tr>",
          "822: <tr><td>info</td><td>info():object </td><td>Return info about last query.</td></tr>",
          "823: <tr><td>lastQuery</td><td>lastQuery():string </td><td>Return info string about most recently executed statement.</td></tr>",
          "824: <tr><td>lastRowid</td><td>lastRowid():number </td><td>Return rowid of last insert.</td></tr>",
          "825: <tr><td>onecolumn</td><td>onecolumn(sql:string) </td><td>Execute sql, and return a single value.</td></tr>",
          "826: <tr><td>ping</td><td>ping(noError:boolean=false):number </td><td>Ping connection.</td></tr>",
          "827: <tr><td>query</td><td>query(sql:string, <a href='#MySql.queryOptions'>options</a>:function|string|array|object=void) </td><td>Run sql query with input and/or outputs..</td></tr>",
          "828: <tr><td>reconnect</td><td>reconnect():void </td><td>Reconnect with current settings.</td></tr>",
          "829: <tr><td>reset</td><td>reset():number </td><td>Reset connection.</td></tr>",
          "830: </table>",
          "833: <a name=\"new MySqlOptions\"></a>",
          "834: <a name=\"MySql.confOptions\"></a>",
          "835: <h2>Options for \"new MySql\"</h2>",
          "836: <table border=\"1\" class=\"optstbl table\">",
          "837: <tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>",
          "838: <tr><td>bindWarn</td><td><i>BOOL</i></td><td>Treat failed variable binds as a warning.</td><td><i>initOnly</i></td></tr>",
          "839: <tr><td>database</td><td><i>STRKEY</i></td><td>Database to use.</td><td><i>initOnly</i></td></tr>",
          "840: <tr><td>debug</td><td><i>ARRAY</i></td><td>Enable debug trace for various operations. (zero or more of: <b>eval</b>, <b>delete</b>, <b>prepare</b>, <b>step</b>)</td><td><i></i></td></tr>",
          "841: <tr><td>enableMulti</td><td><i>BOOL</i></td><td>Accept muiltiple semi-colon separated statements in eval().</td><td><i>initOnly</i></td></tr>",
          "842: <tr><td>errorCnt</td><td><i>INT</i></td><td>Count of errors.</td><td><i>readOnly</i></td></tr>",
          "843: <tr><td>queryOpts</td><td><i><a href='#queryOptsOptions'>options</a></i></td><td>Default options for exec.</td><td><i></i></td></tr>",
          "844: <tr><td>forceInt</td><td><i>BOOL</i></td><td>Bind float as int if possible.</td><td><i></i></td></tr>",
          "845: <tr><td>host</td><td><i>STRING</i></td><td>IP address or host name for mysqld (default is 127.0.0.1).</td><td><i></i></td></tr>",
          "846: <tr><td>maxStmts</td><td><i>INT</i></td><td>Max cache size for compiled statements.</td><td><i></i></td></tr>",
          "847: <tr><td>name</td><td><i>DSTRING</i></td><td>Name for this db handle.</td><td><i></i></td></tr>",
          "848: <tr><td>numStmts</td><td><i>INT</i></td><td>Current size of compiled statement cache.</td><td><i>readOnly</i></td></tr>",
          "849: <tr><td>password</td><td><i>STRKEY</i></td><td>Database password..</td><td><i>initOnly</i></td></tr>",
          "850: <tr><td>port</td><td><i>INT</i></td><td>IP port for mysqld.</td><td><i>initOnly</i></td></tr>",
          "851: <tr><td>reconnect</td><td><i>BOOL</i></td><td>Reconnect.</td><td><i></i></td></tr>",
          "852: <tr><td>sslKey</td><td><i>STRING</i></td><td>SSL key.</td><td><i></i></td></tr>",
          "853: <tr><td>sslCert</td><td><i>STRING</i></td><td>SSL Cert.</td><td><i></i></td></tr>",
          "854: <tr><td>sslCA</td><td><i>STRING</i></td><td>SSL CA.</td><td><i></i></td></tr>",
          "855: <tr><td>sslCAPath</td><td><i>STRING</i></td><td>SSL CA path.</td><td><i></i></td></tr>",
          "856: <tr><td>sslCipher</td><td><i>STRING</i></td><td>SSL Cipher.</td><td><i></i></td></tr>",
          "857: <tr><td>udata</td><td><i>OBJ</i></td><td>User data..</td><td><i></i></td></tr>",
          "858: <tr><td>user</td><td><i>STRKEY</i></td><td>Database user name. Default is current user-name..</td><td><i>initOnly</i></td></tr>",
          "859: <tr><td>version</td><td><i>DOUBLE</i></td><td>Mysql version number.</td><td><i>readOnly</i></td></tr>",
          "860: </table>",
          "863: <a name=\"queryOptsOptions\"></a>",
          "864: <h2>Options for \"queryOpts\"</h2>",
          "865: <table border=\"1\" class=\"optstbl table\">",
          "866: <tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>",
          "867: <tr><td>callback</td><td><i>FUNC</i></td><td>Function to call with each row result. @function(values:object)</td><td><i></i></td></tr>",
          "868: <tr><td>headers</td><td><i>BOOL</i></td><td>First row returned contains column labels.</td><td><i></i></td></tr>",
          "869: <tr><td>limit</td><td><i>INT</i></td><td>Maximum number of returned values.</td><td><i></i></td></tr>",
          "870: <tr><td>mapundef</td><td><i>BOOL</i></td><td>In variable binds, map an 'undefined' var to null.</td><td><i></i></td></tr>",
          "871: <tr><td>maxString</td><td><i>INT</i></td><td>If not using prefetch, the maximum string value size (0=8K).</td><td><i></i></td></tr>",
          "872: <tr><td>mode</td><td><i>STRKEY</i></td><td>Set output mode of returned data. (one of: <b>rows</b>, <b>arrays</b>, <b>array1d</b>, <b>list</b>, <b>column</b>, <b>json</b>, <b>json2</b>, <b>html</b>, <b>csv</b>, <b>insert</b>, <b>line</b>, <b>tabs</b>, <b>none</b>)</td><td><i></i></td></tr>",
          "873: <tr><td>nocache</td><td><i>BOOL</i></td><td>Disable query cache.</td><td><i></i></td></tr>",
          "874: <tr><td>noNamedParams</td><td><i>BOOL</i></td><td>Disable translating sql to support named params.</td><td><i></i></td></tr>",
          "875: <tr><td>nullvalue</td><td><i>STRKEY</i></td><td>Null string output (for non-json mode).</td><td><i></i></td></tr>",
          "876: <tr><td>obj</td><td><i><a href='#objOptions'>options</a></i></td><td>Options for object.</td><td><i></i></td></tr>",
          "877: <tr><td>paramVar</td><td><i>ARRAY</i></td><td>Array var to use for parameters.</td><td><i></i></td></tr>",
          "878: <tr><td>prefetch</td><td><i>BOOL</i></td><td>Let client library cache entire results.</td><td><i></i></td></tr>",
          "879: <tr><td>separator</td><td><i>STRKEY</i></td><td>Separator string (for csv and text mode).</td><td><i></i></td></tr>",
          "880: <tr><td>table</td><td><i>STRKEY</i></td><td>Table name for mode=insert.</td><td><i></i></td></tr>",
          "881: <tr><td>typeCheck</td><td><i>STRKEY</i></td><td>Type check mode (error). (one of: <b>convert</b>, <b>error</b>, <b>warn</b>, <b>disable</b>)</td><td><i></i></td></tr>",
          "882: <tr><td>values</td><td><i>ARRAY</i></td><td>Values for ? bind parameters.</td><td><i></i></td></tr>",
          "883: <tr><td>width</td><td><i>CUSTOM</i></td><td>In column mode, set column widths.</td><td><i></i></td></tr>",
          "884: </table>",
          "887: <a name=\"MySql.queryOptions\"></a>",
          "888: <a name=\"MySql.confOptions\"></a>",
          "889: <h2>Options for \"MySql.query\"</h2>",
          "890: <table border=\"1\" class=\"optstbl table\">",
          "891: <tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>",
          "892: <tr><td>callback</td><td><i>FUNC</i></td><td>Function to call with each row result. @function(values:object)</td><td><i></i></td></tr>",
          "893: <tr><td>headers</td><td><i>BOOL</i></td><td>First row returned contains column labels.</td><td><i></i></td></tr>",
          "894: <tr><td>limit</td><td><i>INT</i></td><td>Maximum number of returned values.</td><td><i></i></td></tr>",
          "895: <tr><td>mapundef</td><td><i>BOOL</i></td><td>In variable binds, map an 'undefined' var to null.</td><td><i></i></td></tr>",
          "896: <tr><td>maxString</td><td><i>INT</i></td><td>If not using prefetch, the maximum string value size (0=8K).</td><td><i></i></td></tr>",
          "897: <tr><td>mode</td><td><i>STRKEY</i></td><td>Set output mode of returned data. (one of: <b>rows</b>, <b>arrays</b>, <b>array1d</b>, <b>list</b>, <b>column</b>, <b>json</b>, <b>json2</b>, <b>html</b>, <b>csv</b>, <b>insert</b>, <b>line</b>, <b>tabs</b>, <b>none</b>)</td><td><i></i></td></tr>",
          "898: <tr><td>nocache</td><td><i>BOOL</i></td><td>Disable query cache.</td><td><i></i></td></tr>",
          "899: <tr><td>noNamedParams</td><td><i>BOOL</i></td><td>Disable translating sql to support named params.</td><td><i></i></td></tr>",
          "900: <tr><td>nullvalue</td><td><i>STRKEY</i></td><td>Null string output (for non-json mode).</td><td><i></i></td></tr>",
          "901: <tr><td>obj</td><td><i><a href='#objOptions'>options</a></i></td><td>Options for object.</td><td><i></i></td></tr>",
          "902: <tr><td>paramVar</td><td><i>ARRAY</i></td><td>Array var to use for parameters.</td><td><i></i></td></tr>",
          "903: <tr><td>prefetch</td><td><i>BOOL</i></td><td>Let client library cache entire results.</td><td><i></i></td></tr>",
          "904: <tr><td>separator</td><td><i>STRKEY</i></td><td>Separator string (for csv and text mode).</td><td><i></i></td></tr>",
          "905: <tr><td>table</td><td><i>STRKEY</i></td><td>Table name for mode=insert.</td><td><i></i></td></tr>",
          "906: <tr><td>typeCheck</td><td><i>STRKEY</i></td><td>Type check mode (error). (one of: <b>convert</b>, <b>error</b>, <b>warn</b>, <b>disable</b>)</td><td><i></i></td></tr>",
          "907: <tr><td>values</td><td><i>ARRAY</i></td><td>Values for ? bind parameters.</td><td><i></i></td></tr>",
          "908: <tr><td>width</td><td><i>CUSTOM</i></td><td>In column mode, set column widths.</td><td><i></i></td></tr>",
          "909: </table>",
          "912: <a name=\"objOptions\"></a>",
          "913: <h2>Options for \"obj\"</h2>",
          "914: <table border=\"1\" class=\"optstbl table\">",
          "915: <tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>",
          "916: <tr><td>name</td><td><i>STRKEY</i></td><td>Name of object var data source for %s.</td><td><i></i></td></tr>",
          "917: <tr><td>skip</td><td><i>ARRAY</i></td><td>Object members to ignore.</td><td><i></i></td></tr>",
          "918: <tr><td>getSql</td><td><i>BOOL</i></td><td>Return expanded SQL without evaluating.</td><td><i></i></td></tr>",
          "919: <tr><td>defaultNull</td><td><i>BOOL</i></td><td>Create with DEFAULT NULL.</td><td><i></i></td></tr>",
          "920: <tr><td>noChecks</td><td><i>BOOL</i></td><td>Create with no CHECK constraints.</td><td><i></i></td></tr>",
          "921: <tr><td>noDefaults</td><td><i>BOOL</i></td><td>Create with no defaults.</td><td><i></i></td></tr>",
          "922: <tr><td>noTypes</td><td><i>BOOL</i></td><td>Create with no types.</td><td><i></i></td></tr>",
          "923: </table>",
          "924: <a name=\"MySqlend\"></a>",
          "925: <p><a href=\"#TOC\">Return to top</a>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1287: <tr><td>values</td><td><i>ARRAY</i></td><td>Values for ? bind parameters.</td><td><i></i></td></tr>",
          "1288: <tr><td>width</td><td><i>CUSTOM</i></td><td>In column mode, set column widths.</td><td><i></i></td></tr>",
          "1289: </table>",
          "1290: <a name=\"Sqliteend\"></a>",
          "1291: <p><a href=\"#TOC\">Return to top</a>",
          "1292: <a name=\"String\"></a>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1164: <a name=\"objOptions\"></a>",
          "1165: <h2>Options for \"obj\"</h2>",
          "1166: <table border=\"1\" class=\"optstbl table\">",
          "1167: <tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>",
          "1168: <tr><td>name</td><td><i>STRKEY</i></td><td>Name of object var data source for %s.</td><td><i></i></td></tr>",
          "1169: <tr><td>skip</td><td><i>ARRAY</i></td><td>Object members to ignore.</td><td><i></i></td></tr>",
          "1170: <tr><td>getSql</td><td><i>BOOL</i></td><td>Return expanded SQL without evaluating.</td><td><i></i></td></tr>",
          "1171: <tr><td>defaultNull</td><td><i>BOOL</i></td><td>Create with DEFAULT NULL.</td><td><i></i></td></tr>",
          "1172: <tr><td>noChecks</td><td><i>BOOL</i></td><td>Create with no CHECK constraints.</td><td><i></i></td></tr>",
          "1173: <tr><td>noDefaults</td><td><i>BOOL</i></td><td>Create with no defaults.</td><td><i></i></td></tr>",
          "1174: <tr><td>noTypes</td><td><i>BOOL</i></td><td>Create with no types.</td><td><i></i></td></tr>",
          "1175: </table>",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1658: <tr><td>ids</td><td>ids(name:string=void):array </td><td>Return list of ids, or lookup one id.</td></tr>",
          "1659: <tr><td>query</td><td>query(id:number, name:string=void):string|object|void </td><td>Get one or all query values for connect id.</td></tr>",
          "1660: <tr><td>send</td><td>send(id:number, data:any):void </td><td>Send a websocket message to id. Send a message to one (or all connections if -1). If not already a string, msg is formatted as JSON prior to the send.</td></tr>",
          "1662: <tr><td>unalias</td><td>unalias(path:string):string|void </td><td>Return alias reverse lookup.</td></tr>",
          "1663: <tr><td>update</td><td>update():void </td><td>Service events for just this websocket.</td></tr>",
          "1664: <tr><td>version</td><td>version():string </td><td>Runtime library version string.</td></tr>",
          "",
          "[Removed Lines]",
          "1661: <tr><td>status</td><td>status():object|void </td><td>Return libwebsocket server status.</td></tr>",
          "",
          "[Added Lines]",
          "1547: <tr><td>status</td><td>status():object|void </td><td>Return liblws server status.</td></tr>",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1675: <tr><td>client</td><td><i>BOOL</i></td><td>Run in client mode.</td><td><i>initOnly</i></td></tr>",
          "1676: <tr><td>clientHost</td><td><i>STRKEY</i></td><td>Override host name for client.</td><td><i></i></td></tr>",
          "1677: <tr><td>clientOrigin</td><td><i>STRKEY</i></td><td>Override client origin (origin).</td><td><i></i></td></tr>",
          "1679: <tr><td>echo</td><td><i>BOOL</i></td><td>LogInfo outputs all websock Send/Recv messages.</td><td><i></i></td></tr>",
          "1680: <tr><td>formParams</td><td><i>STRKEY</i></td><td>Comma seperated list of upload form param names ('text,send,file,upload').</td><td><i>readOnly</i></td></tr>",
          "1681: <tr><td>extHandlers</td><td><i>BOOL</i></td><td>Setup builtin extension-handlers, ie: .htmli, .cssi, .jsi, .mdi.</td><td><i>initOnly</i></td></tr>",
          "",
          "[Removed Lines]",
          "1678: <tr><td>debug</td><td><i>INT</i></td><td>Set debug level. Setting this to 512 will turn on max libwebsocket log levels.</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "1564: <tr><td>debug</td><td><i>INT</i></td><td>Set debug level. Setting this to 512 will turn on max liblws log levels.</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1718: <tr><td>rootdir</td><td><i>STRING</i></td><td>Directory to serve html from (\".\").</td><td><i></i></td></tr>",
          "1719: <tr><td>server</td><td><i>STRKEY</i></td><td>String to send out int the header SERVER (jsiWebSocket).</td><td><i></i></td></tr>",
          "1720: <tr><td>ssiExts</td><td><i>OBJ</i></td><td>Object map of file extensions to apply SSI.  eg. {myext:true, shtml:false} .</td><td><i>initOnly</i></td></tr>",
          "1721: <tr><td>stats</td><td><i><a href='#statsOptions'>options</a></i></td><td>Statistical data.</td><td><i>readOnly</i></td></tr>",
          "1722: <tr><td>startTime</td><td><i>TIME_T</i></td><td>Time of websocket start.</td><td><i>readOnly</i></td></tr>",
          "1723: <tr><td>includeFile</td><td><i>STRKEY</i></td><td>Default file when no extension given (include.shtml).</td><td><i></i></td></tr>",
          "1724: <tr><td>udata</td><td><i>OBJ</i></td><td>User data.</td><td><i></i></td></tr>",
          "1725: <tr><td>urlPrefix</td><td><i>STRKEY</i></td><td>Prefix in url to strip from path; for reverse proxy.</td><td><i></i></td></tr>",
          "1726: <tr><td>urlRedirect</td><td><i>STRKEY</i></td><td>Redirect when no url or / is given. Must match urlPrefix, if given.</td><td><i></i></td></tr>",
          "1728: <tr><td>useridPass</td><td><i>STRKEY</i></td><td>The USERID:PASSWORD to use for basic authentication.</td><td><i></i></td></tr>",
          "1729: <tr><td>version</td><td><i>OBJ</i></td><td>WebSocket version info.</td><td><i>readOnly</i></td></tr>",
          "1730: </table>",
          "",
          "[Removed Lines]",
          "1727: <tr><td>use_ssl</td><td><i>BOOL</i></td><td>Use https (for client).</td><td><i>initOnly</i></td></tr>",
          "",
          "[Added Lines]",
          "1607: <tr><td>ssl</td><td><i>BOOL</i></td><td>Use https.</td><td><i>initOnly</i></td></tr>",
          "1608: <tr><td>sslCert</td><td><i>STRKEY</i></td><td>SSL certificate file.</td><td><i></i></td></tr>",
          "1609: <tr><td>sslKey</td><td><i>STRKEY</i></td><td>SSL key file.</td><td><i></i></td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0292c8db51c65d267b2832b0a61651346192b696",
      "candidate_info": {
        "commit_hash": "0292c8db51c65d267b2832b0a61651346192b696",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/0292c8db51c65d267b2832b0a61651346192b696",
        "files": [
          "lib/Proxy.jsi",
          "lib/Websrv.jsi",
          "lib/Wget.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiRegexp.c",
          "src/jsiSqlite.c",
          "src/jsiStubs.h",
          "src/jsiWebSocket.c",
          "tests/sqlite.jsi",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.21\": Add isError bool to onClose in WebSockets\n\nFossilOrigin-Name: dcdec62220cfef77269c4a8c814885574c11480a795a4ee29152693121740ddd",
        "before_after_code_files": [
          "lib/Proxy.jsi||lib/Proxy.jsi",
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "lib/Wget.jsi||lib/Wget.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiRegexp.c||src/jsiRegexp.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/jsiStubs.h||src/jsiStubs.h",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tests/sqlite.jsi||tests/sqlite.jsi",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/Proxy.jsi||lib/Proxy.jsi": [
          "File: lib/Proxy.jsi -> lib/Proxy.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     }",
          "55:     {",
          "57:     }",
          "59:     function WsCloseLast(ws:userobj|null) // Wait around for a while for reconnect or new clients before exiting",
          "",
          "[Removed Lines]",
          "54:     function WsClose(ws:userobj|null, id:number)",
          "56:         LogTrace(\"Closing WS: \"+id);",
          "",
          "[Added Lines]",
          "54:     function WsClose(ws:userobj|null, id:number, isError:boolean)",
          "56:         LogTrace(\"Closing WS: \"+id, isError);",
          "",
          "---------------"
        ],
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:         LogTrace(\"Opening WS:\",id);",
          "79:     }",
          "82:     {",
          "84:     }",
          "86:     function WsAuth(ws:userobj, id:number, url:string, userpass:string)",
          "",
          "[Removed Lines]",
          "81:     function WsClose(ws:userobj|null, id:number)",
          "83:         LogTrace(\"Closing WS:\",id);",
          "",
          "[Added Lines]",
          "81:     function WsClose(ws:userobj|null, id:number, isError:boolean)",
          "83:         LogTrace(\"Closing WS:\",id, isError);",
          "",
          "---------------"
        ],
        "lib/Wget.jsi||lib/Wget.jsi": [
          "File: lib/Wget.jsi -> lib/Wget.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:         self.fd.write(str);",
          "44:     }",
          "47:         LogTrace(\"CLOSE\");",
          "48:         self.done = true;",
          "49:         if (self.fd) {",
          "50:             self.fd.close();",
          "51:             delete self.fd;",
          "52:         }",
          "53:         if (self.onDone)",
          "55:     }",
          "57:     function main() {",
          "",
          "[Removed Lines]",
          "46:     function WsClose(ws:userobj|null, id:number) {",
          "54:             self.onDone(id);",
          "",
          "[Added Lines]",
          "46:     function WsClose(ws:userobj|null, id:number, isError:boolean) {",
          "48:         if (isError)",
          "49:             puts(\"Connection error\");",
          "56:             self.onDone(id, isError);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:         if (self.O == '')",
          "79:             self.O = File.tail(self.path);",
          "80:         if (self.O !== '-' && self.O !== '.' && File.exists(self.O)) {",
          "81:             if (!self.force)",
          "82:                 throw('output file already exists: '+self.O);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:         if (self.O == '')",
          "83:             self.O = '-';",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 20",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 21",
          "",
          "---------------"
        ],
        "src/jsiRegexp.c||src/jsiRegexp.c": [
          "File: src/jsiRegexp.c -> src/jsiRegexp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     return JSI_OK;",
          "105: }",
          "108:     Jsi_DString dStr = {};",
          "110:     Jsi_Regex *re = Jsi_RegExpNew(interp, Jsi_DSValue(&dStr), 0);",
          "111:     Jsi_DSFree(&dStr);",
          "112:     if (re == NULL)",
          "",
          "[Removed Lines]",
          "107: Jsi_Value* Jsi_ValueNewRegExp(Jsi_Interp *interp, const char *regtxt) {",
          "109:     Jsi_DSAppend(&dStr, \"/\", regtxt, \"/\", NULL);",
          "",
          "[Added Lines]",
          "107: Jsi_Value* Jsi_ValueNewRegExp(Jsi_Interp *interp, const char *regtxt, const char *modifiers) {",
          "109:     Jsi_DSAppend(&dStr, \"/\", regtxt, \"/\", modifiers, NULL);",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1391:     Jsi_Db *jdb = (Jsi_Db*)sqlite3_user_data(context);",
          "1392:     SQLSIGASSERT(jdb,DB);",
          "1393:     Jsi_Interp *interp = jdb->interp;",
          "1396:         return;",
          "1397:     }",
          "1398:     const char *str = (char *)sqlite3_value_text(argv[1]);",
          "1400:     int rc = 0;",
          "1401:     bool isNew = 0;",
          "1402:     Jsi_Value *pat = NULL;",
          "",
          "[Removed Lines]",
          "1394:     if (argc!=2) {",
          "1395:         Jsi_LogWarn(\"sqlite regex, expected: str pattern\");",
          "1399:     char *spat = (char *)sqlite3_value_text(argv[0]);",
          "",
          "[Added Lines]",
          "1394:     if (argc!=2 && argc!=3) {",
          "1395:         Jsi_LogWarn(\"sqlite regex, expected: str pattern ?modifier?\");",
          "1399:     char *spat = (char *)sqlite3_value_text(argv[0]), *mod = (char *)sqlite3_value_text(argv[2]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1408:             Jsi_LogError(\"Regex hash reached max size: %d\", jdb->maxRegexCache);",
          "1409:             return;",
          "1410:         }",
          "1412:         if (!pat)",
          "1413:             return;",
          "1414:         Jsi_IncrRefCount(interp, pat);",
          "",
          "[Removed Lines]",
          "1411:         pat = Jsi_ValueNewRegExp(interp, spat);",
          "",
          "[Added Lines]",
          "1411:         pat = Jsi_ValueNewRegExp(interp, spat, mod);",
          "",
          "---------------"
        ],
        "src/jsiStubs.h||src/jsiStubs.h": [
          "File: src/jsiStubs.h -> src/jsiStubs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #endif",
          "10: #undef JSI_EXTENSION_INI",
          "11: #define JSI_EXTENSION_INI Jsi_Stubs *jsiStubsPtr = NULL;",
          "",
          "[Removed Lines]",
          "8: #define JSI_STUBS_MD5 \"37fc6a9753c3414663cd55c6d7135e39\"",
          "",
          "[Added Lines]",
          "8: #define JSI_STUBS_MD5 \"85902b2a851959de5d6f9dcbc763d0c0\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "447:     bool(*_Jsi_StrIsAlnum)(const char *cp);",
          "448:     Jsi_RC(*_Jsi_SqlObjBinds)(Jsi_Interp* interp, Jsi_DString* zStr, const char *varName, bool addTypes, bool addDefaults, bool nullDefaults, bool addCheck);",
          "449:     Jsi_RC(*_Jsi_UserObjName)(Jsi_Interp *interp, Jsi_Value *v, Jsi_DString *dStr);",
          "451:     void *endPtr;",
          "452: } Jsi_Stubs;",
          "",
          "[Removed Lines]",
          "450:     Jsi_Value*(*_Jsi_ValueNewRegExp)(Jsi_Interp *interp, const char *regtxt);",
          "",
          "[Added Lines]",
          "450:     Jsi_Value*(*_Jsi_ValueNewRegExp)(Jsi_Interp *interp, const char *regtxt, const char* modifiers);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1297: #define Jsi_StrIsAlnum(n0) JSISTUBCALL(jsiStubsPtr, _Jsi_StrIsAlnum(n0))",
          "1298: #define Jsi_SqlObjBinds(n0,n1,n2,n3,n4,n5,n6) JSISTUBCALL(jsiStubsPtr, _Jsi_SqlObjBinds(n0,n1,n2,n3,n4,n5,n6))",
          "1299: #define Jsi_UserObjName(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_UserObjName(n0,n1,n2))",
          "1302: #endif",
          "",
          "[Removed Lines]",
          "1300: #define Jsi_ValueNewRegExp(n0,n1) JSISTUBCALL(jsiStubsPtr, _Jsi_ValueNewRegExp(n0,n1))",
          "",
          "[Added Lines]",
          "1300: #define Jsi_ValueNewRegExp(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_ValueNewRegExp(n0,n1,n2))",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:     JSI_OPT(ARRAY,      jsi_wsPss, headers,     .help=\"Headers to send to browser on connection: name/value pairs\"),",
          "282:     JSI_OPT(BOOL,       jsi_wsPss, isWebsock,   .help=\"Is a websocket connection\" ),",
          "283:     JSI_OPT(STRBUF,     jsi_wsPss, key,         .help=\"String key lookup in ids command for SSI echo ${#}\", jsi_IIRO),",
          "285:     JSI_OPT(FUNC,       jsi_wsPss, onGet,       .help=\"Function to call to server handle http-get\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, url:string, query:array\"),",
          "287:     JSI_OPT(FUNC,       jsi_wsPss, onRecv,      .help=\"Function to call when websock data recieved\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, data:string\"),",
          "288:     JSI_OPT(FUNC,       jsi_wsPss, onUpload,    .help=\"Function to call handle http-post\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, filename:string, data:string, startpos:number, complete:boolean\"),",
          "289:     JSI_OPT(STRING,     jsi_wsPss, rootdir,     .help=\"Directory to serve html from (\\\".\\\")\"),",
          "",
          "[Removed Lines]",
          "284:     JSI_OPT(FUNC,       jsi_wsPss, onClose,     .help=\"Function to call when the websocket connection closes\", .flags=0, .custom=0, .data=(void*)\"ws:userobj|null, id:number\"),",
          "286:     JSI_OPT(FUNC,       jsi_wsPss, onUnknown,   .help=\"Function to call to server out content when no file exists\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, url:string, args:array\"),",
          "",
          "[Added Lines]",
          "284:     JSI_OPT(FUNC,       jsi_wsPss, onClose,     .help=\"Function to call when the websocket connection closes\", .flags=0, .custom=0, .data=(void*)\"ws:userobj|null, id:number, boolean:ok\"),",
          "286:     JSI_OPT(FUNC,       jsi_wsPss, onUnknown,   .help=\"Function to call to serve out content when no file exists\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, url:string, args:array\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1648: }",
          "1650: static Jsi_RC jsi_wsrecv_callback(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, jsi_wsPss *pss,",
          "1652: {",
          "1653:     Jsi_Value *vpargs, *vargs[10];",
          "1654:     Jsi_Value* func = NULL;",
          "",
          "[Removed Lines]",
          "1651:     const char *inPtr, int nlen, bool isClose)",
          "",
          "[Added Lines]",
          "1651:     const char *inPtr, int nlen, bool isClose, bool isError)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1662:         return JSI_OK;",
          "1663:     vargs[n++] = (cmdPtr->deleted?Jsi_ValueNewNull(interp):Jsi_ValueNewObj(interp, cmdPtr->fobj));",
          "1664:     vargs[n++] = Jsi_ValueNewNumber(interp, (Jsi_Number)(pss?pss->wid:0));",
          "1666:         if (nlen<=0)",
          "1667:             return JSI_OK;",
          "1668:         vargs[n++]  = Jsi_ValueNewBlob(interp, (uchar*)inPtr, nlen);",
          "",
          "[Removed Lines]",
          "1665:     if (!isClose) {",
          "",
          "[Added Lines]",
          "1665:     if (isClose)",
          "1666:         vargs[n++] = Jsi_ValueNewBoolean(interp, isError);",
          "1667:     else {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1737:     const char *inPtr = (char*)in;",
          "1738:     char client_name[128], client_ip[128];",
          "1739:     const char *res = \"\";",
          "1740: #ifdef EXTERNAL_POLL",
          "1741:     int m;",
          "1742:     int fd = (int)(long)user;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1742:     int isError = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1824:         break;",
          "1825:     }",
          "1826:     case LWS_CALLBACK_RECEIVE_CLIENT_HTTP_READ:",
          "1828:             rc = 1;",
          "1829:         break;",
          "1831:     case LWS_CALLBACK_COMPLETED_CLIENT_HTTP:",
          "1833:             rc = 1;",
          "1834:         break;",
          "",
          "[Removed Lines]",
          "1827:         if (jsi_wsrecv_callback(interp, cmdPtr, pss, inPtr, len, 0) != JSI_OK)",
          "1832:         if (jsi_wsrecv_callback(interp, cmdPtr, pss, inPtr, len, 1) != JSI_OK)",
          "",
          "[Added Lines]",
          "1830:         if (jsi_wsrecv_callback(interp, cmdPtr, pss, inPtr, len, 0, 0) != JSI_OK)",
          "1834:     case LWS_CALLBACK_CLIENT_CONNECTION_ERROR:",
          "1835:         isError = 1;",
          "1837:         if (jsi_wsrecv_callback(interp, cmdPtr, pss, inPtr, len, 1, isError) != JSI_OK)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2265:         pss = jsi_wsgetPss(cmdPtr, wsi, user, 0, 0);",
          "2266:         if (!pss) break;",
          "2267:         if (cmdPtr->onClose || pss->onClose) {",
          "2269:             if (rc != JSI_OK)",
          "2270:                 return Jsi_LogError(\"websock bad rcv eval\");",
          "2271:         }",
          "",
          "[Removed Lines]",
          "2268:             rc = jsi_wsrecv_callback(interp, cmdPtr, pss, inPtr, len, 1);",
          "",
          "[Added Lines]",
          "2273:             rc = jsi_wsrecv_callback(interp, cmdPtr, pss, inPtr, len, 1, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2362:                     break;",
          "2363:                 }",
          "2364:             }",
          "2366:             if (inPtr != in)",
          "2367:                 Jsi_Free(inPtr);",
          "2368:             if (rc != JSI_OK) {",
          "",
          "[Removed Lines]",
          "2365:             rc = jsi_wsrecv_callback(interp, cmdPtr, pss, inPtr, nlen, 0);",
          "",
          "[Added Lines]",
          "2370:             rc = jsi_wsrecv_callback(interp, cmdPtr, pss, inPtr, nlen, 0, 0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2631:         return JSI_OK;",
          "2632:     cmdPtr->recvBufCnt--;",
          "2633:     const char *inPtr = Jsi_DSFreeDup(&pss->recvBuf);",
          "2635:     if (rc != JSI_OK) {",
          "2636:         pss->stats.recvErrCnt++;",
          "2637:         pss->stats.recvErrLast = time(NULL);",
          "",
          "[Removed Lines]",
          "2634:     Jsi_RC rc = jsi_wsrecv_callback(cmdPtr->interp, cmdPtr, pss, inPtr, nlen, 0);",
          "",
          "[Added Lines]",
          "2639:     Jsi_RC rc = jsi_wsrecv_callback(cmdPtr->interp, cmdPtr, pss, inPtr, nlen, 0, 0);",
          "",
          "---------------"
        ],
        "tests/sqlite.jsi||tests/sqlite.jsi": [
          "File: tests/sqlite.jsi -> tests/sqlite.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: ;db.query('insert into foo values(?,?);', {values:[91,'door']});",
          "66: ;db.query('select * from foo where b REGEXP \"^do\"');",
          "68: ;db.func('bar',function(n) { return n+'.000'; });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: ;db.query('select * from foo where REGEXP(\"^do\",b)');",
          "68: ;db.query('select * from foo where REGEXP(\"^DO\",b,\"i\")');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164: db.query('insert into foo values(?,?);', {values:[91,'dog']}) ==> []",
          "165: db.query('insert into foo values(?,?);', {values:[91,'door']}) ==> []",
          "166: db.query('select * from foo where b REGEXP \"^do\"') ==> [ { a:91, b:\"dog\" }, { a:91, b:\"door\" } ]",
          "167: db.func('bar',function(n) { return n+'.000'; }) ==> undefined",
          "168: db.onecolumn('select bar(a) from foo where b == 2;') ==> 95.000",
          "169: db.conf({onTrace:null}) ==> undefined",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169: db.query('select * from foo where REGEXP(\"^do\",b)') ==> [ { a:91, b:\"dog\" }, { a:91, b:\"door\" } ]",
          "170: db.query('select * from foo where REGEXP(\"^DO\",b,\"i\")') ==> [ { a:91, b:\"dog\" }, { a:91, b:\"door\" } ]",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "1186: <tr><td>noJsonConv</td><td><i>BOOL</i></td><td>Do not JSON auto-convert array and object in CHARJSON columns.</td><td><i></i></td></tr>",
          "1187: <tr><td>lastInsertId</td><td><i>UINT64</i></td><td>The rowid of last insert.</td><td><i></i></td></tr>",
          "1188: <tr><td>load</td><td><i>BOOL</i></td><td>Extensions can be loaded.</td><td><i></i></td></tr>",
          "1189: <tr><td>mutex</td><td><i>STRKEY</i></td><td>Mutex type to use. (one of: <b>default</b>, <b>none</b>, <b>full</b>)</td><td><i>initOnly</i></td></tr>",
          "1190: <tr><td>name</td><td><i>DSTRING</i></td><td>The dbname to use instead of 'main'.</td><td><i>initOnly</i></td></tr>",
          "1191: <tr><td>noConfig</td><td><i>BOOL</i></td><td>Disable use of Sqlite.conf to change options after create.</td><td><i>initOnly</i></td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1189: <tr><td>maxRegexCache</td><td><i>INT</i></td><td>Max cache size for regex patterns; 0=disable, -1=unlimited (100).</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1729: <tr><td>headers</td><td><i>ARRAY</i></td><td>Headers to send to browser on connection: name/value pairs.</td><td><i></i></td></tr>",
          "1730: <tr><td>isWebsock</td><td><i>BOOL</i></td><td>Is a websocket connection.</td><td><i></i></td></tr>",
          "1731: <tr><td>key</td><td><i>STRBUF</i></td><td>String key lookup in ids command for SSI echo ${#}.</td><td><i>readOnly</i></td></tr>",
          "1733: <tr><td>onGet</td><td><i>FUNC</i></td><td>Function to call to server handle http-get. @function(ws:userobj, id:number, url:string, query:array)</td><td><i></i></td></tr>",
          "1735: <tr><td>onRecv</td><td><i>FUNC</i></td><td>Function to call when websock data recieved. @function(ws:userobj, id:number, data:string)</td><td><i></i></td></tr>",
          "1736: <tr><td>onUpload</td><td><i>FUNC</i></td><td>Function to call handle http-post. @function(ws:userobj, id:number, filename:string, data:string, startpos:number, complete:boolean)</td><td><i></i></td></tr>",
          "1737: <tr><td>rootdir</td><td><i>STRING</i></td><td>Directory to serve html from (\".\").</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "1732: <tr><td>onClose</td><td><i>FUNC</i></td><td>Function to call when the websocket connection closes. @function(ws:userobj|null, id:number)</td><td><i></i></td></tr>",
          "1734: <tr><td>onUnknown</td><td><i>FUNC</i></td><td>Function to call to server out content when no file exists. @function(ws:userobj, id:number, url:string, args:array)</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "1733: <tr><td>onClose</td><td><i>FUNC</i></td><td>Function to call when the websocket connection closes. @function(ws:userobj|null, id:number, boolean:ok)</td><td><i></i></td></tr>",
          "1735: <tr><td>onUnknown</td><td><i>FUNC</i></td><td>Function to call to serve out content when no file exists. @function(ws:userobj, id:number, url:string, args:array)</td><td><i></i></td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b439f1babf3e6a32147acefb09638a5aafea12e",
      "candidate_info": {
        "commit_hash": "0b439f1babf3e6a32147acefb09638a5aafea12e",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/0b439f1babf3e6a32147acefb09638a5aafea12e",
        "files": [
          "src/jsi.h",
          "src/jsiEval.c",
          "src/jsiFunc.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.18\": Fixes for issue #16. It is now an error to redefine or assign result of assert/LogDebug/...\n\nFossilOrigin-Name: 9f3a8079d766d1513c2e8e9f5aae19758bafbd336d40f10028088bd61983db3e",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 17",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 18",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1062: #define _JSI_BI_OP_SKIP_SUB(n) {\\",
          "1063:     ip++;\\",
          "1065:         ip++;\\",
          "1066:     continue;\\",
          "1067: }",
          "1068: #define _JSI_BI_OP_SKIP(N,n)  if (!interp->logOpts.N && !(interp->framePtr->logflag &(1<<n))) _JSI_BI_OP_SKIP_SUB(n)",
          "",
          "[Removed Lines]",
          "1064:     if (ip->logflag != n && (ip->op == OP_POP || ip->op == OP_RET || ip->op == OP_ASSIGN))\\",
          "",
          "[Added Lines]",
          "1064:     if (ip->logflag != n)  {\\",
          "1065:         if (ip->op == OP_POP) ip++; \\",
          "1066:         else if (ip->op == OP_RET || ip->op == OP_ASSIGN) { \\",
          "1067:           rc = Jsi_LogError(\"invalid use of return/= here\"); \\",
          "1069:       }}\\",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "548:         }",
          "549:     }",
          "550:     if (name) {",
          "551:         f->name = Jsi_KeyAdd(interp, name);",
          "552:         if ((interp->typeCheck.run|interp->typeCheck.parse|interp->typeCheck.all|interp->typeCheck.funcsig)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "551:         if ((name[0] == 'a' && !Jsi_Strcmp(name,\"assert\"))",
          "552:             || (name[0] == 'L' && (!Jsi_Strcmp(name,\"LogDebug\") || !Jsi_Strcmp(name,\"LogTrace\") || !Jsi_Strcmp(name,\"LogTest\")))) {",
          "553:                 if (line)",
          "554:                     interp->parseLine = line;",
          "555:                 Jsi_LogError(\"invalid redefine of builtin: %s\", name);",
          "556:                 if (line)",
          "557:                     interp->parseLine = NULL;",
          "558:                 pstate->err_count++;",
          "559:         }",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "bd0bd2616cbe5ad13247bf1d80a26de3f051bfc6",
      "candidate_info": {
        "commit_hash": "bd0bd2616cbe5ad13247bf1d80a26de3f051bfc6",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/bd0bd2616cbe5ad13247bf1d80a26de3f051bfc6",
        "files": [
          "src/jsi.h",
          "src/jsiSocket.c",
          "src/jsiWebSocket.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.4\". Cleanup\n\nFossilOrigin-Name: 2026124dc835167ddf9a39f0fc26898376e1171cad69d91fdf7eac4aa1a8cf42",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiSocket.c||src/jsiSocket.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 3",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 4",
          "",
          "---------------"
        ],
        "src/jsiSocket.c||src/jsiSocket.c": [
          "File: src/jsiSocket.c -> src/jsiSocket.c"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:     lws_fop_fd_t fop_fd;",
          "197:     int wid;",
          "199:     bool isWebsock, echo;",
          "200:     const char *clientName;",
          "201:     const char *clientIP;",
          "",
          "[Removed Lines]",
          "198:     int sfd;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415:         pss->stats.createTime = time(NULL);",
          "416:         pss->cnt = cmdPtr->idx++;",
          "417:         pss->wid = sid;",
          "419:         pss->udata = Jsi_ValueNewObj(cmdPtr->interp, NULL);",
          "420:         Jsi_IncrRefCount(cmdPtr->interp, pss->udata);",
          "",
          "[Removed Lines]",
          "418:         pss->sfd = sfd;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "448: static void",
          "449: jsi_wsdeletePss(jsi_wsPss *pss)",
          "450: {",
          "451:     if (pss->sig == 0)",
          "452:         return;",
          "453:     WSSIGASSERT(pss, PWS);",
          "454:     if (pss->state == PWS_DEAD)",
          "455:         return;",
          "457:         fprintf(stderr, \"PSS DELETE: %p\\n\", pss);",
          "460:     if (pss->hPtr) {",
          "461:         Jsi_HashValueSet(pss->hPtr, NULL);",
          "462:         Jsi_HashEntryDelete(pss->hPtr);",
          "463:         pss->hPtr = NULL;",
          "464:     }",
          "466:     if (pss->stack) {",
          "467:         Jsi_StackFreeElements(interp, pss->stack, jsi_wsDelPss);",
          "468:         Jsi_StackFree(pss->stack);",
          "469:     }",
          "474:     Jsi_DSFree(&pss->dHdrs);",
          "475:     if (pss->isWebsock)",
          "476:         pss->cmdPtr->stats.connectCnt--;",
          "478:     pss->state = PWS_DEAD;",
          "479:     Jsi_DSFree(&pss->resultStr);",
          "480:     Jsi_DSFree(&pss->paramDS);",
          "",
          "[Removed Lines]",
          "456:     if (pss->cmdPtr && pss->cmdPtr->debug>3)",
          "459:     jsi_wsrecv_flush(pss->cmdPtr, pss);",
          "465:     Jsi_Interp *interp = pss->cmdPtr->interp;",
          "470:     jsi_wsCmdObj*cmdPtr = pss->cmdPtr;",
          "471:     cmdPtr->sfd = pss->sfd;",
          "",
          "[Added Lines]",
          "451:     jsi_wsCmdObj*cmdPtr = pss->cmdPtr;",
          "457:     if (cmdPtr && cmdPtr->debug>3)",
          "460:     jsi_wsrecv_flush(cmdPtr, pss);",
          "466:     Jsi_Interp *interp = cmdPtr->interp;",
          "474:     Jsi_OptionsFree(cmdPtr->interp, WPSOptions, pss, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "483:     pss->lastData = NULL;",
          "484:     if (pss->spa)",
          "485:         lws_spa_destroy(pss->spa);",
          "487:     Jsi_Free(pss);",
          "488: }",
          "",
          "[Removed Lines]",
          "486:     Jsi_OptionsFree(cmdPtr->interp, WPSOptions, pss, 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    }
  ]
}