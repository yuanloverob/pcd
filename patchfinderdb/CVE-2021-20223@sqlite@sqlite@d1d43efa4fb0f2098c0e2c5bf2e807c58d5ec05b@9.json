{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9e5fdc41c1f46f92776ede52359900b41b2e3a82",
      "candidate_info": {
        "commit_hash": "9e5fdc41c1f46f92776ede52359900b41b2e3a82",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9e5fdc41c1f46f92776ede52359900b41b2e3a82",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/build.c",
          "src/expr.c",
          "test/alter.test",
          "test/alter3.test",
          "test/alter4.test",
          "test/fkey2.test",
          "test/without_rowid3.test"
        ],
        "message": "Release some restrictions on columns added by ALTER TABLE so that they only apply if the table contains one or more rows.\n\nFossilOrigin-Name: 3a16c0ce4d8851f79f670d94786032c8007619154ece44647dc9cc5b1f9654ff",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "test/alter.test||test/alter.test",
          "test/alter3.test||test/alter3.test",
          "test/alter4.test||test/alter4.test",
          "test/fkey2.test||test/fkey2.test",
          "test/without_rowid3.test||test/without_rowid3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0d23a0b209900f4d7c6c13f75d4364f19afc23db72f9cfdb11e05b81502e8040",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "255:   db->mDbFlags = savedDbFlags;",
          "256: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262: static void sqlite3ErrorIfNotEmpty(",
          "267: ){",
          "268:   sqlite3NestedParse(pParse,",
          "269:      \"SELECT raise(ABORT,%Q) FROM \\\"%w\\\".\\\"%w\\\"\",",
          "270:      zErr, zDb, zTab",
          "271:   );",
          "272: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "307:     return;",
          "308:   }",
          "309:   if( pNew->pIndex ){",
          "311:     return;",
          "312:   }",
          "313:   if( (pCol->colFlags & COLFLAG_GENERATED)==0 ){",
          "",
          "[Removed Lines]",
          "310:     sqlite3ErrorMsg(pParse, \"Cannot add a UNIQUE column\");",
          "",
          "[Added Lines]",
          "326:     sqlite3ErrorMsg(pParse,",
          "327:          \"Cannot add a UNIQUE column\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "320:       pDflt = 0;",
          "321:     }",
          "322:     if( (db->flags&SQLITE_ForeignKeys) && pNew->pFKey && pDflt ){",
          "324:           \"Cannot add a REFERENCES column with non-NULL default value\");",
          "326:     }",
          "327:     if( pCol->notNull && !pDflt ){",
          "329:           \"Cannot add a NOT NULL column with default value NULL\");",
          "331:     }",
          "",
          "[Removed Lines]",
          "323:       sqlite3ErrorMsg(pParse,",
          "325:       return;",
          "328:       sqlite3ErrorMsg(pParse,",
          "330:       return;",
          "",
          "[Added Lines]",
          "340:       sqlite3ErrorIfNotEmpty(pParse, zDb, zTab,",
          "344:       sqlite3ErrorIfNotEmpty(pParse, zDb, zTab,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "343:         return;",
          "344:       }",
          "345:       if( !pVal ){",
          "348:       }",
          "349:       sqlite3ValueFree(pVal);",
          "350:     }",
          "351:   }else if( pCol->colFlags & COLFLAG_STORED ){",
          "354:   }",
          "",
          "[Removed Lines]",
          "346:         sqlite3ErrorMsg(pParse,\"Cannot add a column with non-constant default\");",
          "347:         return;",
          "352:     sqlite3ErrorMsg(pParse, \"cannot add a STORED column\");",
          "353:     return;",
          "",
          "[Added Lines]",
          "362:         sqlite3ErrorIfNotEmpty(pParse, zDb, zTab,",
          "363:            \"Cannot add a column with non-constant default\");",
          "368:     sqlite3ErrorIfNotEmpty(pParse, zDb, zTab, \"cannot add a STORED column\");",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4742: ){",
          "4743:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "4745:   if( onError==OE_Abort ){",
          "4746:     sqlite3MayAbort(pParse);",
          "4747:   }",
          "",
          "[Removed Lines]",
          "4744:   assert( (errCode&0xff)==SQLITE_CONSTRAINT );",
          "",
          "[Added Lines]",
          "4744:   assert( (errCode&0xff)==SQLITE_CONSTRAINT || pParse->nested );",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4482:            || pExpr->affExpr==OE_Fail",
          "4483:            || pExpr->affExpr==OE_Ignore",
          "4484:       );",
          "4486:         sqlite3ErrorMsg(pParse,",
          "4487:                        \"RAISE() may only be used within a trigger-program\");",
          "4488:         return 0;",
          "",
          "[Removed Lines]",
          "4485:       if( !pParse->pTriggerTab ){",
          "",
          "[Added Lines]",
          "4485:       if( !pParse->pTriggerTab && !pParse->nested ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4496:             v, OP_Halt, SQLITE_OK, OE_Ignore, 0, pExpr->u.zToken,0);",
          "4497:         VdbeCoverage(v);",
          "4498:       }else{",
          "4501:       }",
          "4503:       break;",
          "",
          "[Removed Lines]",
          "4499:         sqlite3HaltConstraint(pParse, SQLITE_CONSTRAINT_TRIGGER,",
          "4500:                               pExpr->affExpr, pExpr->u.zToken, 0, 0);",
          "",
          "[Added Lines]",
          "4499:         sqlite3HaltConstraint(pParse,",
          "4500:              pParse->pTriggerTab ? SQLITE_CONSTRAINT_TRIGGER : SQLITE_ERROR,",
          "4501:              pExpr->affExpr, pExpr->u.zToken, 0, 0);",
          "",
          "---------------"
        ],
        "test/alter.test||test/alter.test": [
          "File: test/alter.test -> test/alter.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "840: do_test alter-14.1 {",
          "841:   catchsql {",
          "842:     CREATE TABLE t3651(a UNIQUE);",
          "843:     ALTER TABLE t3651 ADD COLUMN b UNIQUE;",
          "844:   }",
          "845: } {1 {Cannot add a UNIQUE column}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "843:     INSERT INTO t3651 VALUES(5);",
          "",
          "---------------"
        ],
        "test/alter3.test||test/alter3.test": [
          "File: test/alter3.test -> test/alter3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "116: do_test alter3-2.1 {",
          "117:   execsql {",
          "118:     CREATE TABLE t1(a, b);",
          "119:   }",
          "120:   catchsql {",
          "121:     ALTER TABLE t1 ADD c PRIMARY KEY;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:     INSERT INTO t1 VALUES(1,2);",
          "",
          "---------------"
        ],
        "test/alter4.test||test/alter4.test": [
          "File: test/alter4.test -> test/alter4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "123: do_test alter4-2.1 {",
          "124:   execsql {",
          "125:     CREATE TABLE temp.t1(a, b);",
          "126:   }",
          "127:   catchsql {",
          "128:     ALTER TABLE t1 ADD c PRIMARY KEY;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:     INSERT INTO t1 VALUES(1,2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "397: reset_db",
          "398: do_execsql_test alter4-11.0 {",
          "399:   CREATE TABLE t1(c INTEGER PRIMARY KEY, d);",
          "400:   PRAGMA foreign_keys = on;",
          "401:   ALTER TABLE t1 ADD COLUMN e;",
          "402: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "401:   INSERT INTO t1(c,d) VALUES(1,2);",
          "",
          "---------------"
        ],
        "test/fkey2.test||test/fkey2.test": [
          "File: test/fkey2.test -> test/fkey2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "955:     execsql {",
          "956:       CREATE TABLE t1(a PRIMARY KEY);",
          "957:       CREATE TABLE t2(a, b);",
          "958:     }",
          "959:     catchsql { ALTER TABLE t2 ADD COLUMN c REFERENCES t1 }",
          "960:   } {0 {}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "958:       INSERT INTO t2 VALUES(1,2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1046:     execsql {",
          "1047:       CREATE TEMP TABLE t1(a PRIMARY KEY);",
          "1048:       CREATE TEMP TABLE t2(a, b);",
          "1049:     }",
          "1050:     catchsql { ALTER TABLE t2 ADD COLUMN c REFERENCES t1 }",
          "1051:   } {0 {}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1050:       INSERT INTO temp.t2 VALUES(1,2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1130:       ATTACH ':memory:' AS aux;",
          "1131:       CREATE TABLE aux.t1(a PRIMARY KEY);",
          "1132:       CREATE TABLE aux.t2(a, b);",
          "1133:     }",
          "1134:     catchsql { ALTER TABLE t2 ADD COLUMN c REFERENCES t1 }",
          "1135:   } {0 {}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1135:       INSERT INTO aux.t2(a,b) VALUES(1,2);",
          "",
          "---------------"
        ],
        "test/without_rowid3.test||test/without_rowid3.test": [
          "File: test/without_rowid3.test -> test/without_rowid3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "921:     execsql {",
          "922:       CREATE TABLE t1(a PRIMARY KEY) WITHOUT rowid;",
          "923:       CREATE TABLE t2(a, b);",
          "924:     }",
          "925:     catchsql { ALTER TABLE t2 ADD COLUMN c REFERENCES t1 }",
          "926:   } {0 {}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "924:       INSERT INTO t2(a,b) VALUES(1,2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1015:     execsql {",
          "1016:       CREATE TEMP TABLE t1(a PRIMARY KEY) WITHOUT rowid;",
          "1017:       CREATE TEMP TABLE t2(a, b);",
          "1018:     }",
          "1019:     catchsql { ALTER TABLE t2 ADD COLUMN c REFERENCES t1 }",
          "1020:   } {0 {}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1019:       INSERT INTO temp.t2(a,b) VALUES(1,2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1102:       ATTACH ':memory:' AS aux;",
          "1103:       CREATE TABLE aux.t1(a PRIMARY KEY) WITHOUT rowid;",
          "1104:       CREATE TABLE aux.t2(a, b);",
          "1105:     }",
          "1106:     catchsql { ALTER TABLE t2 ADD COLUMN c REFERENCES t1 }",
          "1107:   } {0 {}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1107:       INSERT INTO aux.t2(a,b) VALUES(1,2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85d9411c09154932619e77122b3677cd78a44664",
      "candidate_info": {
        "commit_hash": "85d9411c09154932619e77122b3677cd78a44664",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/85d9411c09154932619e77122b3677cd78a44664",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/expr.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h"
        ],
        "message": "Reduce the size of ExprList to 24-bytes per entry, down from 32-bytes per entry.  This helps keep lookaside allocations in the mini-size.\n\nFossilOrigin-Name: bda92d92bf69a73bc6dd498f92578ad6e81111a3f97bc8724d1720e7283a83b6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e392e7f22861ce4b66e4bf84b59c8fd38568fc241a699e001f47fd82011f4d28",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "764:   if( ALWAYS(p->pEList) ){",
          "765:     ExprList *pList = p->pEList;",
          "766:     for(i=0; i<pList->nExpr; i++){",
          "768:         sqlite3RenameTokenRemap(pParse, 0, (void*)pList->a[i].zEName);",
          "769:       }",
          "770:     }",
          "",
          "[Removed Lines]",
          "767:       if( pList->a[i].zEName ){",
          "",
          "[Added Lines]",
          "767:       if( pList->a[i].zEName && pList->a[i].eEName==ENAME_NAME ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "808:     sWalker.xExprCallback = renameUnmapExprCb;",
          "809:     sqlite3WalkExprList(&sWalker, pEList);",
          "810:     for(i=0; i<pEList->nExpr; i++){",
          "812:     }",
          "813:   }",
          "814: }",
          "",
          "[Removed Lines]",
          "811:       sqlite3RenameTokenRemap(pParse, 0, (void*)pEList->a[i].zEName);",
          "",
          "[Added Lines]",
          "811:       if( pEList->a[i].eEName==ENAME_NAME ){",
          "812:         sqlite3RenameTokenRemap(pParse, 0, (void*)pEList->a[i].zEName);",
          "813:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "947:     int i;",
          "948:     for(i=0; i<pEList->nExpr; i++){",
          "949:       char *zName = pEList->a[i].zEName;",
          "951:         renameTokenFind(pParse, pCtx, (void*)zName);",
          "952:       }",
          "953:     }",
          "",
          "[Removed Lines]",
          "950:       if( 0==sqlite3_stricmp(zName, zOld) ){",
          "",
          "[Added Lines]",
          "952:       if( pEList->a[i].eEName==ENAME_NAME",
          "953:        && 0==sqlite3_stricmp(zName, zOld)",
          "954:       ){",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1437:       }",
          "1438:     }",
          "1439:     pItem->zEName = sqlite3DbStrDup(db, pOldItem->zEName);",
          "1441:     pItem->sortFlags = pOldItem->sortFlags;",
          "1442:     pItem->done = 0;",
          "1443:     pItem->bNulls = pOldItem->bNulls;",
          "1445:     pItem->bSorterRef = pOldItem->bSorterRef;",
          "1446:     pItem->u = pOldItem->u;",
          "1447:   }",
          "",
          "[Removed Lines]",
          "1440:     pItem->zSpan = sqlite3DbStrDup(db, pOldItem->zSpan);",
          "1444:     pItem->bSpanIsTab = pOldItem->bSpanIsTab;",
          "",
          "[Added Lines]",
          "1441:     pItem->eEName = pOldItem->eEName;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1746:     assert( pList->nExpr>0 );",
          "1747:     pItem = &pList->a[pList->nExpr-1];",
          "1748:     assert( pItem->zEName==0 );",
          "1749:     pItem->zEName = sqlite3DbStrNDup(pParse->db, pName->z, pName->n);",
          "1750:     if( dequote ) sqlite3Dequote(pItem->zEName);",
          "1751:     if( IN_RENAME_OBJECT ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1748:     assert( pItem->eEName==ENAME_NAME );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1773:   if( pList ){",
          "1774:     struct ExprList_item *pItem = &pList->a[pList->nExpr-1];",
          "1775:     assert( pList->nExpr>0 );",
          "1778:   }",
          "1779: }",
          "",
          "[Removed Lines]",
          "1776:     sqlite3DbFree(db, pItem->zSpan);",
          "1777:     pItem->zSpan = sqlite3DbSpanDup(db, zStart, zEnd);",
          "",
          "[Added Lines]",
          "1776:     if( pItem->zEName==0 ){",
          "1777:       pItem->zEName = sqlite3DbSpanDup(db, zStart, zEnd);",
          "1778:       pItem->eEName = ENAME_SPAN;",
          "1779:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1805:   do{",
          "1806:     sqlite3ExprDelete(db, pItem->pExpr);",
          "1807:     sqlite3DbFree(db, pItem->zEName);",
          "1809:     pItem++;",
          "1810:   }while( --i>0 );",
          "1811:   sqlite3DbFreeNN(db, pList);",
          "",
          "[Removed Lines]",
          "1808:     sqlite3DbFree(db, pItem->zSpan);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:   const char *zCol,",
          "138:   const char *zTab,",
          "139:   const char *zDb",
          "140: ){",
          "141:   int n;",
          "142:   for(n=0; ALWAYS(zSpan[n]) && zSpan[n]!='.'; n++){}",
          "143:   if( zDb && (sqlite3StrNICmp(zSpan, zDb, n)!=0 || zDb[n]!=0) ){",
          "144:     return 0;",
          "",
          "[Removed Lines]",
          "135: int sqlite3MatchSpanName(",
          "136:   const char *zSpan,",
          "",
          "[Added Lines]",
          "135: int sqlite3MatchEName(",
          "136:   const struct ExprList_item *pItem,",
          "142:   const char *zSpan;",
          "143:   if( pItem->eEName!=ENAME_TAB ) return 0;",
          "144:   zSpan = pItem->zEName;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:           int hit = 0;",
          "268:           pEList = pItem->pSelect->pEList;",
          "269:           for(j=0; j<pEList->nExpr; j++){",
          "271:               cnt++;",
          "272:               cntTab = 2;",
          "273:               pMatch = pItem;",
          "",
          "[Removed Lines]",
          "270:             if( sqlite3MatchSpanName(pEList->a[j].zSpan, zCol, zTab, zDb) ){",
          "",
          "[Added Lines]",
          "273:             if( sqlite3MatchEName(&pEList->a[j], zCol, zTab, zDb) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "448:       pEList = pNC->uNC.pEList;",
          "449:       assert( pEList!=0 );",
          "450:       for(j=0; j<pEList->nExpr; j++){",
          "453:           Expr *pOrig;",
          "454:           assert( pExpr->pLeft==0 && pExpr->pRight==0 );",
          "455:           assert( pExpr->x.pList==0 );",
          "",
          "[Removed Lines]",
          "451:         char *zAs = pEList->a[j].zEName;",
          "452:         if( zAs!=0 && sqlite3StrICmp(zAs, zCol)==0 ){",
          "",
          "[Added Lines]",
          "454:         char *zAs;",
          "455:         if( pEList->a[j].eEName==ENAME_NAME",
          "456:          && (zAs = pEList->a[j].zEName)!=0",
          "457:          && sqlite3StrICmp(zAs, zCol)==0",
          "458:         ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1116:     char *zCol = pE->u.zToken;",
          "1117:     for(i=0; i<pEList->nExpr; i++){",
          "1118:       char *zAs = pEList->a[i].zEName;",
          "1120:         return i+1;",
          "1121:       }",
          "1122:     }",
          "",
          "[Removed Lines]",
          "1119:       if( zAs!=0 && sqlite3StrICmp(zAs, zCol)==0 ){",
          "",
          "[Added Lines]",
          "1125:       if( pEList->a[i].eEName==ENAME_NAME",
          "1126:        && (zAs = pEList->a[i].zEName)!=0",
          "1127:        && sqlite3StrICmp(zAs, zCol)==0",
          "1128:       ){",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1539:         iRead = iCol--;",
          "1540:       }",
          "1541:       sqlite3VdbeAddOp3(v, OP_Column, iSortTab, iRead, regRow+i);",
          "1543:     }",
          "1544:   }",
          "1545:   switch( eDest ){",
          "",
          "[Removed Lines]",
          "1542:       VdbeComment((v, \"%s\", aOutEx[i].zEName?aOutEx[i].zEName:aOutEx[i].zSpan));",
          "",
          "[Added Lines]",
          "1542:       VdbeComment((v, \"%s\", aOutEx[i].zEName));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1873:     assert( p!=0 );",
          "1878:       char *zName = pEList->a[i].zEName;",
          "1879:       sqlite3VdbeSetColName(v, i, COLNAME_NAME, zName, SQLITE_TRANSIENT);",
          "",
          "[Removed Lines]",
          "1876:     if( pEList->a[i].zEName ){",
          "",
          "[Added Lines]",
          "1876:     if( pEList->a[i].zEName && pEList->a[i].eEName==ENAME_NAME ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1897:         sqlite3VdbeSetColName(v, i, COLNAME_NAME, zCol, SQLITE_TRANSIENT);",
          "1898:       }",
          "1899:     }else{",
          "1901:       z = z==0 ? sqlite3MPrintf(db, \"column%d\", i+1) : sqlite3DbStrDup(db, z);",
          "1902:       sqlite3VdbeSetColName(v, i, COLNAME_NAME, z, SQLITE_DYNAMIC);",
          "1903:     }",
          "",
          "[Removed Lines]",
          "1900:       const char *z = pEList->a[i].zSpan;",
          "",
          "[Added Lines]",
          "1900:       const char *z = pEList->a[i].zEName;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1959:   for(i=0, pCol=aCol; i<nCol && !db->mallocFailed; i++, pCol++){",
          "1964:     }else{",
          "1965:       Expr *pColExpr = sqlite3ExprSkipCollateAndLikely(pEList->a[i].pExpr);",
          "",
          "[Removed Lines]",
          "1962:     if( (zName = pEList->a[i].zEName)!=0 ){",
          "",
          "[Added Lines]",
          "1962:     if( (zName = pEList->a[i].zEName)!=0 && pEList->a[i].eEName==ENAME_NAME ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1979:         zName = pColExpr->u.zToken;",
          "1980:       }else{",
          "1983:       }",
          "1984:     }",
          "1985:     if( zName ){",
          "",
          "[Removed Lines]",
          "1982:         zName = pEList->a[i].zSpan;",
          "",
          "[Added Lines]",
          "1982:         zName = pEList->a[i].zEName;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5004:         pNew = sqlite3ExprListAppend(pParse, pNew, a[k].pExpr);",
          "5005:         if( pNew ){",
          "5006:           pNew->a[pNew->nExpr-1].zEName = a[k].zEName;",
          "5008:           a[k].zEName = 0;",
          "5010:         }",
          "5011:         a[k].pExpr = 0;",
          "5012:       }else{",
          "",
          "[Removed Lines]",
          "5007:           pNew->a[pNew->nExpr-1].zSpan = a[k].zSpan;",
          "5009:           a[k].zSpan = 0;",
          "",
          "[Added Lines]",
          "5007:           pNew->a[pNew->nExpr-1].eEName = a[k].eEName;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5046:             assert( zName );",
          "5047:             if( zTName && pSub",
          "5049:             ){",
          "5050:               continue;",
          "5051:             }",
          "",
          "[Removed Lines]",
          "5048:              && sqlite3MatchSpanName(pSub->pEList->a[j].zSpan, 0, zTName, 0)==0",
          "",
          "[Added Lines]",
          "5047:              && sqlite3MatchEName(&pSub->pEList->a[j], 0, zTName, 0)==0",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5098:             sqlite3ExprListSetName(pParse, pNew, &sColname, 0);",
          "5099:             if( pNew && (p->selFlags & SF_NestedFrom)!=0 ){",
          "5100:               struct ExprList_item *pX = &pNew->a[pNew->nExpr-1];",
          "5101:               if( pSub ){",
          "5104:               }else{",
          "5106:                                            zSchemaName, zTabName, zColname);",
          "5108:               }",
          "5110:             }",
          "5111:             sqlite3DbFree(db, zToFree);",
          "5112:           }",
          "",
          "[Removed Lines]",
          "5102:                 pX->zSpan = sqlite3DbStrDup(db, pSub->pEList->a[j].zSpan);",
          "5103:                 testcase( pX->zSpan==0 );",
          "5105:                 pX->zSpan = sqlite3MPrintf(db, \"%s.%s.%s\",",
          "5107:                 testcase( pX->zSpan==0 );",
          "5109:               pX->bSpanIsTab = 1;",
          "",
          "[Added Lines]",
          "5100:               sqlite3DbFree(db, pX->zEName);",
          "5102:                 pX->zEName = sqlite3DbStrDup(db, pSub->pEList->a[j].zEName);",
          "5103:                 testcase( pX->zEName==0 );",
          "5105:                 pX->zEName = sqlite3MPrintf(db, \"%s.%s.%s\",",
          "5107:                 testcase( pX->zEName==0 );",
          "5109:               pX->eEName = ENAME_TAB;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4418: int sqlite3CodeSubselect(Parse*, Expr*);",
          "4419: void sqlite3SelectPrep(Parse*, Select*, NameContext*);",
          "4420: void sqlite3SelectWrongNumTermsError(Parse *pParse, Select *p);",
          "4422: int sqlite3ResolveExprNames(NameContext*, Expr*);",
          "4423: int sqlite3ResolveExprListNames(NameContext*, ExprList*);",
          "4424: void sqlite3ResolveSelectNames(Parse*, Select*, NameContext*);",
          "",
          "[Removed Lines]",
          "4421: int sqlite3MatchSpanName(const char*, const char*, const char*, const char*);",
          "",
          "[Added Lines]",
          "4433: int sqlite3MatchEName(",
          "4434:   const struct ExprList_item*,",
          "4435:   const char*,",
          "4436:   const char*,",
          "4437:   const char*",
          "4438: );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d924e7bc78a4ca604bce0f8d9d0390d3feddba01",
      "candidate_info": {
        "commit_hash": "d924e7bc78a4ca604bce0f8d9d0390d3feddba01",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d924e7bc78a4ca604bce0f8d9d0390d3feddba01",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c",
          "src/malloc.c",
          "src/memdb.c",
          "src/printf.c",
          "src/table.c",
          "src/vtab.c",
          "src/wal.c"
        ],
        "message": "Use the sqlite3Realloc() interface internally, rather than the public sqlite3_realloc64() equivalent, to avoid unnecessary calls to sqlite3_initialize().\n\nFossilOrigin-Name: 1313557b512297e7b75ed748894379b2022aecf696d5a58318e46a668321c1ff",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c",
          "src/malloc.c||src/malloc.c",
          "src/memdb.c||src/memdb.c",
          "src/printf.c||src/printf.c",
          "src/table.c||src/table.c",
          "src/vtab.c||src/vtab.c",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 55910b9a7287be92af9f95e0af54af822055d15b7eabbcc81d61410d0bf67726",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1284:           u8 *zOld;",
          "1285:           zOld = zOut;",
          "1287:           if( zOut==0 ){",
          "1288:             sqlite3_result_error_nomem(context);",
          "1289:             sqlite3_free(zOld);",
          "",
          "[Removed Lines]",
          "1286:           zOut = sqlite3_realloc64(zOut, (int)nOut + (nOut - nStr - 1));",
          "",
          "[Added Lines]",
          "1286:           zOut = sqlite3Realloc(zOut, (int)nOut + (nOut - nStr - 1));",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "672:       assert( sqlite3MemdebugHasType(p, (MEMTYPE_LOOKASIDE|MEMTYPE_HEAP)) );",
          "673:       assert( sqlite3MemdebugNoType(p, (u8)~(MEMTYPE_LOOKASIDE|MEMTYPE_HEAP)) );",
          "674:       sqlite3MemdebugSetType(p, MEMTYPE_HEAP);",
          "676:       if( !pNew ){",
          "677:         sqlite3OomFault(db);",
          "678:       }",
          "",
          "[Removed Lines]",
          "675:       pNew = sqlite3_realloc64(p, n);",
          "",
          "[Added Lines]",
          "675:       pNew = sqlite3Realloc(p, n);",
          "",
          "---------------"
        ],
        "src/memdb.c||src/memdb.c": [
          "File: src/memdb.c -> src/memdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:   }",
          "167:   newSz *= 2;",
          "168:   if( newSz>p->szMax ) newSz = p->szMax;",
          "170:   if( pNew==0 ) return SQLITE_NOMEM;",
          "171:   p->aData = pNew;",
          "172:   p->szAlloc = newSz;",
          "",
          "[Removed Lines]",
          "169:   pNew = sqlite3_realloc64(p->aData, newSz);",
          "",
          "[Added Lines]",
          "169:   pNew = sqlite3Realloc(p->aData, newSz);",
          "",
          "---------------"
        ],
        "src/printf.c||src/printf.c": [
          "File: src/printf.c -> src/printf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "924:     if( p->db ){",
          "925:       zNew = sqlite3DbRealloc(p->db, zOld, p->nAlloc);",
          "926:     }else{",
          "928:     }",
          "929:     if( zNew ){",
          "930:       assert( p->zText!=0 || p->nChar==0 );",
          "",
          "[Removed Lines]",
          "927:       zNew = sqlite3_realloc64(zOld, p->nAlloc);",
          "",
          "[Added Lines]",
          "927:       zNew = sqlite3Realloc(zOld, p->nAlloc);",
          "",
          "---------------"
        ],
        "src/table.c||src/table.c": [
          "File: src/table.c -> src/table.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:   if( p->nData + need > p->nAlloc ){",
          "57:     char **azNew;",
          "58:     p->nAlloc = p->nAlloc*2 + need;",
          "60:     if( azNew==0 ) goto malloc_failed;",
          "61:     p->azResult = azNew;",
          "62:   }",
          "",
          "[Removed Lines]",
          "59:     azNew = sqlite3_realloc64( p->azResult, sizeof(char*)*p->nAlloc );",
          "",
          "[Added Lines]",
          "59:     azNew = sqlite3Realloc( p->azResult, sizeof(char*)*p->nAlloc );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:   }",
          "166:   if( res.nAlloc>res.nData ){",
          "167:     char **azNew;",
          "169:     if( azNew==0 ){",
          "170:       sqlite3_free_table(&res.azResult[1]);",
          "171:       db->errCode = SQLITE_NOMEM;",
          "",
          "[Removed Lines]",
          "168:     azNew = sqlite3_realloc64( res.azResult, sizeof(char*)*res.nData );",
          "",
          "[Added Lines]",
          "168:     azNew = sqlite3Realloc( res.azResult, sizeof(char*)*res.nData );",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1177:     if( pTab==pToplevel->apVtabLock[i] ) return;",
          "1178:   }",
          "1179:   n = (pToplevel->nVtabLock+1)*sizeof(pToplevel->apVtabLock[0]);",
          "1181:   if( apVtabLock ){",
          "1182:     pToplevel->apVtabLock = apVtabLock;",
          "1183:     pToplevel->apVtabLock[pToplevel->nVtabLock++] = pTab;",
          "",
          "[Removed Lines]",
          "1180:   apVtabLock = sqlite3_realloc64(pToplevel->apVtabLock, n);",
          "",
          "[Added Lines]",
          "1180:   apVtabLock = sqlite3Realloc(pToplevel->apVtabLock, n);",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "568:   if( pWal->nWiData<=iPage ){",
          "569:     sqlite3_int64 nByte = sizeof(u32*)*(iPage+1);",
          "570:     volatile u32 **apNew;",
          "572:     if( !apNew ){",
          "574:       return SQLITE_NOMEM_BKPT;",
          "",
          "[Removed Lines]",
          "571:     apNew = (volatile u32 **)sqlite3_realloc64((void *)pWal->apWiData, nByte);",
          "",
          "[Added Lines]",
          "571:     apNew = (volatile u32 **)sqlite3Realloc((void *)pWal->apWiData, nByte);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ad996da0f66766e45734fa2d017f4ee985341bc8",
      "candidate_info": {
        "commit_hash": "ad996da0f66766e45734fa2d017f4ee985341bc8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ad996da0f66766e45734fa2d017f4ee985341bc8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/build.c",
          "src/expr.c",
          "src/resolve.c",
          "src/select.c",
          "src/shell.c.in",
          "src/sqliteInt.h",
          "src/util.c",
          "test/altertab.test",
          "test/cse.test",
          "test/fuzzcheck.c",
          "test/fuzzdata8.db",
          "test/select4.test",
          "test/window1.test"
        ],
        "message": "Merge trunk enhancements into the approximate-analyze branch.\n\nFossilOrigin-Name: 17901ea6a1951b8c55671408841901c6660e3f8099378204f080b171a684d718",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/util.c||src/util.c",
          "test/altertab.test||test/altertab.test",
          "test/cse.test||test/cse.test",
          "test/fuzzcheck.c||test/fuzzcheck.c",
          "test/select4.test||test/select4.test",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c20d4fdee21409ebc9c65c9540af8ac48d1f4425499a6674ef9319655c192612",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "469:   for(i=0; i<pNew->nCol; i++){",
          "470:     Column *pCol = &pNew->aCol[i];",
          "471:     pCol->zName = sqlite3DbStrDup(db, pCol->zName);",
          "472:     pCol->zColl = 0;",
          "473:     pCol->pDflt = 0;",
          "474:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "472:     pCol->hName = sqlite3StrIHash(pCol->zName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "697:   RenameToken *pNew;",
          "698:   assert( pPtr || pParse->db->mallocFailed );",
          "699:   renameTokenCheckAll(pParse, pPtr);",
          "701:     pNew = sqlite3DbMallocZero(pParse->db, sizeof(RenameToken));",
          "702:     if( pNew ){",
          "703:       pNew->p = pPtr;",
          "",
          "[Removed Lines]",
          "700:   if( pParse->eParseMode!=PARSE_MODE_UNMAP ){",
          "",
          "[Added Lines]",
          "701:   if( ALWAYS(pParse->eParseMode!=PARSE_MODE_UNMAP) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "755:   }",
          "756: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "762: static void unmapColumnIdlistNames(",
          "763:   Parse *pParse,",
          "764:   IdList *pIdList",
          "765: ){",
          "766:   if( pIdList ){",
          "767:     int ii;",
          "768:     for(ii=0; ii<pIdList->nId; ii++){",
          "769:       sqlite3RenameTokenRemap(pParse, 0, (void*)pIdList->a[ii].zName);",
          "770:     }",
          "771:   }",
          "772: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "776:     for(i=0; i<pSrc->nSrc; i++){",
          "777:       sqlite3RenameTokenRemap(pParse, 0, (void*)pSrc->a[i].zName);",
          "778:       if( sqlite3WalkExpr(pWalker, pSrc->a[i].pOn) ) return WRC_Abort;",
          "779:     }",
          "780:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "795:       unmapColumnIdlistNames(pParse, pSrc->a[i].pUsing);",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "590:   assert( pTable!=0 );",
          "591:   if( (pCol = pTable->aCol)!=0 ){",
          "592:     for(i=0; i<pTable->nCol; i++, pCol++){",
          "593:       sqlite3DbFree(db, pCol->zName);",
          "594:       sqlite3ExprDelete(db, pCol->pDflt);",
          "595:       sqlite3DbFree(db, pCol->zColl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593:       assert( pCol->zName==0 || pCol->hName==sqlite3StrIHash(pCol->zName) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1238:   pCol = &p->aCol[p->nCol];",
          "1239:   memset(pCol, 0, sizeof(p->aCol[0]));",
          "1240:   pCol->zName = z;",
          "1241:   sqlite3ColumnPropertiesFromName(p, pCol);",
          "1243:   if( pType->n==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1242:   pCol->hName = sqlite3StrIHash(z);",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1788: ){",
          "1789:   assert( pList!=0 || pParse->db->mallocFailed!=0 );",
          "1790:   if( pList ){",
          "1791:     struct ExprList_item *pItem;",
          "1792:     assert( pList->nExpr>0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1790:   assert( pParse->eParseMode!=PARSE_MODE_UNMAP || dequote==0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1794:     assert( pItem->zEName==0 );",
          "1795:     assert( pItem->eEName==ENAME_NAME );",
          "1796:     pItem->zEName = sqlite3DbStrNDup(pParse->db, pName->z, pName->n);",
          "1800:     }",
          "1801:   }",
          "1802: }",
          "",
          "[Removed Lines]",
          "1797:     if( dequote ) sqlite3Dequote(pItem->zEName);",
          "1798:     if( IN_RENAME_OBJECT ){",
          "1799:       sqlite3RenameTokenMap(pParse, (void*)pItem->zEName, pName);",
          "",
          "[Added Lines]",
          "1798:     if( dequote ){",
          "1802:       sqlite3Dequote(pItem->zEName);",
          "1803:       if( IN_RENAME_OBJECT ){",
          "1804:         sqlite3RenameTokenMap(pParse, (void*)pItem->zEName, pName);",
          "1805:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3185:   assert( !ExprHasVVAProperty(pExpr,EP_Immutable) );",
          "3186:   pLeft = pExpr->pLeft;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3190:   u8 okConstFactor = pParse->okConstFactor;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3229:   rLhsOrig = exprCodeVector(pParse, pLeft, &iDummy);",
          "3231:   if( i==nVector ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3239:   assert( pParse->okConstFactor==okConstFactor );",
          "3240:   pParse->okConstFactor = 0;",
          "3242:   pParse->okConstFactor = okConstFactor;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3832:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
          "3833:           assert( SQLITE_AFF_BLOB=='A' );",
          "3834:           assert( SQLITE_AFF_TEXT=='B' );",
          "3839:           sqlite3VdbeAddOp4(v, OP_Affinity, iReg, 1, 0,",
          "3840:                             &zAff[(aff-'B')*2], P4_STATIC);",
          "3841:         }",
          "",
          "[Removed Lines]",
          "3835:           if( iReg!=target ){",
          "3836:             sqlite3VdbeAddOp2(v, OP_SCopy, iReg, target);",
          "3837:             iReg = target;",
          "3838:           }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140: ){",
          "141:   int n;",
          "142:   const char *zSpan;",
          "144:   zSpan = pItem->zEName;",
          "145:   for(n=0; ALWAYS(zSpan[n]) && zSpan[n]!='.'; n++){}",
          "146:   if( zDb && (sqlite3StrNICmp(zSpan, zDb, n)!=0 || zDb[n]!=0) ){",
          "",
          "[Removed Lines]",
          "143:   if( NEVER(pItem->eEName!=ENAME_TAB) ) return 0;",
          "",
          "[Added Lines]",
          "143:   if( pItem->eEName!=ENAME_TAB ) return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "295:     if( pSrcList ){",
          "296:       for(i=0, pItem=pSrcList->a; i<pSrcList->nSrc; i++, pItem++){",
          "297:         pTab = pItem->pTab;",
          "298:         assert( pTab!=0 && pTab->zName!=0 );",
          "299:         assert( pTab->nCol>0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297:         u8 hCol;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "327:         if( 0==(cntTab++) ){",
          "328:           pMatch = pItem;",
          "329:         }",
          "330:         for(j=0, pCol=pTab->aCol; j<pTab->nCol; j++, pCol++){",
          "",
          "[Removed Lines]",
          "331:           if( sqlite3StrICmp(pCol->zName, zCol)==0 ){",
          "",
          "[Added Lines]",
          "331:         hCol = sqlite3StrIHash(zCol);",
          "333:           if( pCol->hName==hCol && sqlite3StrICmp(pCol->zName, zCol)==0 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "390:       if( pTab ){",
          "391:         int iCol;",
          "392:         pSchema = pTab->pSchema;",
          "393:         cntTab++;",
          "394:         for(iCol=0, pCol=pTab->aCol; iCol<pTab->nCol; iCol++, pCol++){",
          "396:             if( iCol==pTab->iPKey ){",
          "397:               iCol = -1;",
          "398:             }",
          "",
          "[Removed Lines]",
          "395:           if( sqlite3StrICmp(pCol->zName, zCol)==0 ){",
          "",
          "[Added Lines]",
          "394:         u8 hCol = sqlite3StrIHash(zCol);",
          "398:           if( pCol->hName==hCol && sqlite3StrICmp(pCol->zName, zCol)==0 ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1193:   nc.nErr = 0;",
          "1194:   db = pParse->db;",
          "1195:   savedSuppErr = db->suppressErr;",
          "1197:   rc = sqlite3ResolveExprNames(&nc, pE);",
          "1198:   db->suppressErr = savedSuppErr;",
          "1199:   if( rc ) return 0;",
          "",
          "[Removed Lines]",
          "1196:   db->suppressErr = 1;",
          "",
          "[Added Lines]",
          "1199:   if( IN_RENAME_OBJECT==0 ) db->suppressErr = 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1829: ){",
          "1830:   int i;",
          "1834:     }",
          "1835:   }",
          "1836:   return WRC_Continue;",
          "1837: }",
          "",
          "[Removed Lines]",
          "1831:   if( pList ){",
          "1832:     for(i=0; i<pList->nExpr; i++){",
          "1833:       if( sqlite3ResolveExprNames(pNC, pList->a[i].pExpr) ) return WRC_Abort;",
          "",
          "[Added Lines]",
          "1834:   int savedHasAgg = 0;",
          "1835:   Walker w;",
          "1836:   if( pList==0 ) return WRC_Continue;",
          "1837:   w.pParse = pNC->pParse;",
          "1838:   w.xExprCallback = resolveExprStep;",
          "1839:   w.xSelectCallback = resolveSelectStep;",
          "1840:   w.xSelectCallback2 = 0;",
          "1841:   w.u.pNC = pNC;",
          "1842:   savedHasAgg = pNC->ncFlags & (NC_HasAgg|NC_MinMaxAgg|NC_HasWin);",
          "1843:   pNC->ncFlags &= ~(NC_HasAgg|NC_MinMaxAgg|NC_HasWin);",
          "1844:   for(i=0; i<pList->nExpr; i++){",
          "1845:     Expr *pExpr = pList->a[i].pExpr;",
          "1846:     if( pExpr==0 ) continue;",
          "1847: #if SQLITE_MAX_EXPR_DEPTH>0",
          "1848:     w.pParse->nHeight += pExpr->nHeight;",
          "1849:     if( sqlite3ExprCheckHeight(w.pParse, w.pParse->nHeight) ){",
          "1850:       return WRC_Abort;",
          "1851:     }",
          "1852: #endif",
          "1853:     sqlite3WalkExpr(&w, pExpr);",
          "1854: #if SQLITE_MAX_EXPR_DEPTH>0",
          "1855:     w.pParse->nHeight -= pExpr->nHeight;",
          "1856: #endif",
          "1857:     assert( EP_Agg==NC_HasAgg );",
          "1858:     assert( EP_Win==NC_HasWin );",
          "1859:     testcase( pNC->ncFlags & NC_HasAgg );",
          "1860:     testcase( pNC->ncFlags & NC_HasWin );",
          "1861:     if( pNC->ncFlags & (NC_HasAgg|NC_MinMaxAgg|NC_HasWin) ){",
          "1862:       ExprSetProperty(pExpr, pNC->ncFlags & (NC_HasAgg|NC_HasWin) );",
          "1863:       savedHasAgg |= pNC->ncFlags & (NC_HasAgg|NC_MinMaxAgg|NC_HasWin);",
          "1864:       pNC->ncFlags &= ~(NC_HasAgg|NC_MinMaxAgg|NC_HasWin);",
          "1866:     if( pNC->nErr>0 || w.pParse->nErr>0 ) return WRC_Abort;",
          "1868:   pNC->ncFlags |= savedHasAgg;",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2023:       if( cnt>3 ) sqlite3_randomness(sizeof(cnt), &cnt);",
          "2024:     }",
          "2025:     pCol->zName = zName;",
          "2026:     sqlite3ColumnPropertiesFromName(0, pCol);",
          "2027:     if( zName && sqlite3HashInsert(&ht, zName, pCol)==pCol ){",
          "2028:       sqlite3OomFault(db);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2026:     pCol->hName = sqlite3StrIHash(zName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3476:   ){",
          "3477:     pExpr->iRightJoinTable = pSubst->iNewTable;",
          "3478:   }",
          "3480:     if( pExpr->iColumn<0 ){",
          "3481:       pExpr->op = TK_NULL;",
          "3482:     }else{",
          "",
          "[Removed Lines]",
          "3479:   if( pExpr->op==TK_COLUMN && pExpr->iTable==pSubst->iTable ){",
          "",
          "[Added Lines]",
          "3480:   if( pExpr->op==TK_COLUMN",
          "3481:    && pExpr->iTable==pSubst->iTable",
          "3482:    && !ExprHasProperty(pExpr, EP_FixedCol)",
          "3483:   ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5388:   struct AggInfo_func *pFunc;",
          "5389:   int nReg = pAggInfo->nFunc + pAggInfo->nColumn;",
          "5390:   if( nReg==0 ) return;",
          "5391: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5395:   if( pParse->nErr ) return;",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4568:   const char*",
          "4569: );",
          "4570: Bitmask sqlite3ExprColUsed(Expr*);",
          "4571: int sqlite3ResolveExprNames(NameContext*, Expr*);",
          "4572: int sqlite3ResolveExprListNames(NameContext*, ExprList*);",
          "4573: void sqlite3ResolveSelectNames(Parse*, Select*, NameContext*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4572: u8 sqlite3StrIHash(const char*);",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:   return N<0 ? 0 : UpperToLower[*a] - UpperToLower[*b];",
          "318: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323: u8 sqlite3StrIHash(const char *z){",
          "324:   u8 h = 0;",
          "325:   if( z==0 ) return 0;",
          "326:   while( z[0] ){",
          "327:     h += UpperToLower[(unsigned char)z[0]];",
          "328:     z++;",
          "329:   }",
          "330:   return h;",
          "331: }",
          "",
          "---------------"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "594: do_execsql_test 18.1.0 {",
          "595:   CREATE TABLE t0 (c0 INTEGER, PRIMARY KEY(c0)) WITHOUT ROWID;",
          "596: }",
          "598: do_execsql_test 18.1.1 {",
          "599:   ALTER TABLE t0 RENAME COLUMN c0 TO c1;",
          "600: }",
          "",
          "[Removed Lines]",
          "597: breakpoint",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "630:   SELECT * FROM t2;",
          "631: } {1 1 1 1 1 1 1 1}",
          "633: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "632: # Ticket 4722bdab08cb14",
          "633: reset_db",
          "634: do_execsql_test 20.0 {",
          "635:   CREATE TABLE a(a);",
          "636:   CREATE VIEW b AS SELECT(SELECT *FROM c JOIN a USING(d, a, a, a) JOIN a) IN();",
          "637: }",
          "638: do_execsql_test 20.1 {",
          "639:   ALTER TABLE a RENAME a TO e;",
          "640: } {}",
          "642: reset_db",
          "643: do_execsql_test 21.0 {",
          "644:   CREATE TABLE a(b);",
          "645:   CREATE VIEW c AS",
          "646:       SELECT NULL INTERSECT",
          "647:       SELECT NULL ORDER BY",
          "648:       likelihood(NULL, (d, (SELECT c)));",
          "649: } {}",
          "650: do_catchsql_test 21.1 {",
          "651:   SELECT likelihood(NULL, (d, (SELECT c)));",
          "652: } {1 {second argument to likelihood() must be a constant between 0.0 and 1.0}}",
          "653: do_catchsql_test 21.2 {",
          "654:   SELECT * FROM c;",
          "655: } {1 {1st ORDER BY term does not match any column in the result set}}",
          "657: do_catchsql_test 21.3 {",
          "658:   ALTER TABLE a RENAME TO e;",
          "659: } {1 {error in view c: 1st ORDER BY term does not match any column in the result set}}",
          "",
          "---------------"
        ],
        "test/cse.test||test/cse.test": [
          "File: test/cse.test -> test/cse.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: set testdir [file dirname $argv0]",
          "20: source $testdir/tester.tcl",
          "22: do_test cse-1.1 {",
          "23:   execsql {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: set testprefix cse",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:   } $answer",
          "158: }",
          "160: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161: #-------------------------------------------------------------------------",
          "162: # Ticket fd1bda016d1a",
          "163: #",
          "164: reset_db",
          "165: do_execsql_test 3.0 {",
          "166:   CREATE TABLE t1(a TEXT, b);",
          "167:   INSERT INTO t1 VALUES('hello', 0);",
          "168:   INSERT INTO t1 VALUES('world', 0);",
          "170:   CREATE TABLE t2(x TEXT);",
          "171:   INSERT INTO t2 VALUES('hello');",
          "172:   INSERT INTO t2 VALUES('world');",
          "174:   CREATE TABLE t3(y);",
          "175:   INSERT INTO t3 VALUES(1000);",
          "176: } {}",
          "178: do_execsql_test 3.1 {",
          "179:   SELECT 1000 = y FROM t3",
          "180: } {1}",
          "182: do_execsql_test 3.2 {",
          "183:   SELECT 1000 IN (SELECT x FROM t2), 1000 = y FROM t3",
          "184: } {0 1}",
          "186: do_execsql_test 3.3 {",
          "187:   SELECT 0 IN (SELECT a), (SELECT a LIMIT 0) FROM t1",
          "188: } {0 {} 0 {}}",
          "190: do_execsql_test 3.4 {",
          "191:   SELECT 0 IN (SELECT a) FROM t1 WHERE a = 'hello' OR (SELECT a LIMIT 0);",
          "192: } {0}",
          "194: do_execsql_test 3.5 {",
          "195:   CREATE TABLE v0(v1 VARCHAR0);",
          "196:   INSERT INTO v0 VALUES(2), (3);",
          "197:   SELECT 0 IN(SELECT v1) FROM v0 WHERE v1 = 2 OR(SELECT v1 LIMIT 0);",
          "198: } {0}",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "894:   if( depthLimit>0 ){",
          "895:     sqlite3_limit(cx.db, SQLITE_LIMIT_EXPR_DEPTH, depthLimit);",
          "896:   }",
          "897:   sqlite3_hard_heap_limit64(heapLimit);",
          "899:   if( nDb>=20 && aDb[18]==2 && aDb[19]==2 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "897:   sqlite3_limit(cx.db, SQLITE_LIMIT_LIKE_PATTERN_LENGTH, 100);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1423: \"  -q|--quiet           Reduced output\\n\"",
          "1424: \"  --rebuild            Rebuild and vacuum the database file\\n\"",
          "1425: \"  --result-trace       Show the results of each SQL command\\n\"",
          "1426: \"  --sqlid N            Use only SQL where sqlid=N\\n\"",
          "1427: \"  --timeout N          Abort if any single test needs more than N seconds\\n\"",
          "1428: \"  -v|--verbose         Increased output.  Repeat for more output.\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1427: \"  --spinner            Use a spinner to show progress\\n\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1575:       if( strcmp(z,\"result-trace\")==0 ){",
          "1576:         runFlags |= SQL_OUTPUT;",
          "1577:       }else",
          "1578:       if( strcmp(z,\"sqlid\")==0 ){",
          "1579:         if( i>=argc-1 ) fatalError(\"missing arguments on %s\", argv[i]);",
          "1580:         onlySqlid = integerValue(argv[++i]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1581:       if( strcmp(z,\"spinner\")==0 ){",
          "1582:         bSpinner = 1;",
          "1583:       }else",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1874:     for(pSql=g.pFirstSql; pSql; pSql=pSql->pNext){",
          "1875:       if( isDbSql(pSql->a, pSql->sz) ){",
          "1876:         sqlite3_snprintf(sizeof(g.zTestName), g.zTestName, \"sqlid=%d\",pSql->id);",
          "1878:           printf(\"%s\\n\", g.zTestName);",
          "1879:           fflush(stdout);",
          "1880:         }else if( !quietFlag ){",
          "",
          "[Removed Lines]",
          "1873:     if( !verboseFlag && !quietFlag ) printf(\"%s:\", zDbName);",
          "1877:         if( verboseFlag ){",
          "",
          "[Added Lines]",
          "1879:     if( !verboseFlag && !quietFlag && !bSpinner ) printf(\"%s:\", zDbName);",
          "1883:         if( bSpinner ){",
          "1884:           int nTotal =g.nSql;",
          "1885:           int idx = pSql->seq;",
          "1886:           printf(\"\\r%s: %d/%d   \", zDbName, idx, nTotal);",
          "1887:           fflush(stdout);",
          "1888:         }else if( verboseFlag ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1898:         const char *zVfs = \"inmem\";",
          "1899:         sqlite3_snprintf(sizeof(g.zTestName), g.zTestName, \"sqlid=%d,dbid=%d\",",
          "1900:                          pSql->id, pDb->id);",
          "1902:           printf(\"%s\\n\", g.zTestName);",
          "1903:           fflush(stdout);",
          "1904:         }else if( !quietFlag ){",
          "",
          "[Removed Lines]",
          "1901:         if( verboseFlag ){",
          "",
          "[Added Lines]",
          "1912:         if( bSpinner ){",
          "1913:           int nTotal = g.nDb*g.nSql;",
          "1914:           int idx = pSql->seq*g.nDb + pDb->id - 1;",
          "1915:           printf(\"\\r%s: %d/%d   \", zDbName, idx, nTotal);",
          "1916:           fflush(stdout);",
          "1917:         }else if( verboseFlag ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1977:         }",
          "1978:       }",
          "1979:     }",
          "1981:       printf(\" 100%% - %d tests\\n\", g.nDb*g.nSql);",
          "1982:     }",
          "",
          "[Removed Lines]",
          "1980:     if( !quietFlag && !verboseFlag ){",
          "",
          "[Added Lines]",
          "1996:     if( bSpinner ){",
          "1997:       printf(\"\\n\");",
          "1998:     }else if( !quietFlag && !verboseFlag ){",
          "",
          "---------------"
        ],
        "test/select4.test||test/select4.test": [
          "File: test/select4.test -> test/select4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1005:   ORDER BY +x;",
          "1006: } {1 {LIMIT clause should come after UNION not before}}",
          "1010: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1008: # 2020-04-03 ticket 51166be0159fd2ce from Yong Heng.",
          "1009: # Adverse interaction between the constant propagation and push-down",
          "1010: # optimizations.",
          "1011: #",
          "1012: reset_db",
          "1013: do_execsql_test select4-18.1 {",
          "1014:   CREATE VIEW v0(v0) AS WITH v0 AS(SELECT 0 v0) SELECT(SELECT min(v0) OVER()) FROM v0 GROUP BY v0;",
          "1015:   SELECT *FROM v0 v1 JOIN v0 USING(v0) WHERE datetime(v0) = (v0.v0)AND v0 = 10;",
          "1016: } {}",
          "1017: do_execsql_test select4-18.2 {",
          "1018:   CREATE VIEW t1(aa) AS",
          "1019:      WITH t2(bb) AS (SELECT 123)",
          "1020:      SELECT (SELECT min(bb) OVER()) FROM t2 GROUP BY bb;",
          "1021:   SELECT * FROM t1;",
          "1022: } {123}",
          "1023: do_execsql_test select4-18.3 {",
          "1024:   SELECT * FROM t1 AS z1 JOIN t1 AS z2 USING(aa)",
          "1025:    WHERE abs(z1.aa)=z2.aa AND z1.aa=123;",
          "1026: } {123}",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1653: SELECT * FROM (SELECT * FROM t1 NATURAL JOIN t1 WHERE a%1 OR ((SELECT sum(a)OVER(ORDER BY a)) AND a<=10)) NATURAL JOIN t1 WHERE a=1 OR ((SELECT sum((SELECT * FROM (SELECT * FROM (SELECT * FROM t1 NATURAL JOIN t1 WHERE a%1 OR ((SELECT sum(a)OVER(ORDER BY a)) AND a<=10)) NATURAL JOIN t1 WHERE a=1 OR ((SELECT sum((SELECT * FROM t1 NATURAL JOIN t1 WHERE a=1 OR ((SELECT sum(a)OVER(ORDER BY a)) AND a<=10)))OVER(ORDER BY a% 1 )) AND a<=10)) NATURAL JOIN t1 WHERE a=1 OR ((SELECT sum(a)OVER(ORDER BY a)) AND 10<=a)))OVER(ORDER BY a%5)) AND a<=10);",
          "1654: } {10.0}",
          "",
          "[Removed Lines]",
          "1656: finish_test",
          "",
          "[Added Lines]",
          "1656: # 2020-04-03 ticket af4556bb5c285c08",
          "1657: #",
          "1658: reset_db",
          "1659: do_catchsql_test 51.1 {",
          "1660:   CREATE TABLE a(b, c);",
          "1661:   SELECT c FROM a GROUP BY c",
          "1662:     HAVING(SELECT(sum(b) OVER(ORDER BY b),",
          "1663:                   sum(b) OVER(PARTITION BY min(DISTINCT c), c ORDER BY b)));",
          "1664: } {1 {row value misused}}",
          "1666: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "480620c71340e8dca10d6c842985c45f6ba6cf15",
      "candidate_info": {
        "commit_hash": "480620c71340e8dca10d6c842985c45f6ba6cf15",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/480620c71340e8dca10d6c842985c45f6ba6cf15",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/loadext.c",
          "src/pager.c",
          "src/sqlite.h.in",
          "src/sqlite3ext.h"
        ],
        "message": "Experimental API: sqlite3_database_file_object().\n\nFossilOrigin-Name: ae697b152d22737169892411a0c4d908895ff5fb249cce9bdb1ba0bbe32806f0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/loadext.c||src/loadext.c",
          "src/pager.c||src/pager.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqlite3ext.h||src/sqlite3ext.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2fc80ef16ce5878311ab88a0c64631813572ffbb71f75363b4619c9667e0926b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/loadext.c||src/loadext.c": [
          "File: src/loadext.c -> src/loadext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "478:   sqlite3_create_filename,",
          "479:   sqlite3_free_filename,",
          "480: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "480:   sqlite3_database_file_object,",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4801:   pPager->sjfd = (sqlite3_file*)pPtr;     pPtr += journalFileSize;",
          "4802:   pPager->jfd =  (sqlite3_file*)pPtr;     pPtr += journalFileSize;",
          "4803:   assert( EIGHT_BYTE_ALIGNMENT(pPager->jfd) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4806:   memcpy(pPtr, &pPager, sizeof(pPager));  pPtr += sizeof(pPager);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5001:   return SQLITE_OK;",
          "5002: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5012: sqlite3_file *sqlite3_database_file_object(const char *zName){",
          "5013:   Pager *pPager;",
          "5014:   while( zName[-1]!=0 || zName[-2]!=0 || zName[-3]!=0 || zName[-4]!=0 ){",
          "5015:     zName--;",
          "5016:   }",
          "5017:   pPager = *(Pager**)(zName - 4 - sizeof(Pager*));",
          "5018:   return pPager->fd;",
          "5019: }",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3620: const char *sqlite3_filename_journal(const char*);",
          "3621: const char *sqlite3_filename_wal(const char*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3640: sqlite3_file *sqlite3_database_file_object(const char*);",
          "",
          "---------------"
        ],
        "src/sqlite3ext.h||src/sqlite3ext.h": [
          "File: src/sqlite3ext.h -> src/sqlite3ext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "334:   char *(*create_filename)(const char*,const char*,const char*,",
          "335:                            int,const char**);",
          "336:   void (*free_filename)(char*);",
          "337: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "337:   sqlite3_file *(*database_file_object)(const char*);",
          "",
          "---------------"
        ]
      }
    }
  ]
}