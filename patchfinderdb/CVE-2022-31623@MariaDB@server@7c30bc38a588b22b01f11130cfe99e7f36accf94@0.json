{
  "cve_id": "CVE-2022-31623",
  "cve_desc": "MariaDB Server before 10.7 is vulnerable to Denial of Service. In extra/mariabackup/ds_compress.cc, when an error occurs (i.e., going to the err label) while executing the method create_worker_threads, the held lock thd->ctrl_mutex is not released correctly, which allows local users to trigger a denial of service due to the deadlock. Note: The vendor argues this is just an improper locking bug and not a vulnerability with adverse effects.",
  "repo": "MariaDB/server",
  "patch_hash": "7c30bc38a588b22b01f11130cfe99e7f36accf94",
  "patch_info": {
    "commit_hash": "7c30bc38a588b22b01f11130cfe99e7f36accf94",
    "repo": "MariaDB/server",
    "commit_url": "https://github.com/MariaDB/server/commit/7c30bc38a588b22b01f11130cfe99e7f36accf94",
    "files": [
      "extra/mariabackup/ds_compress.cc"
    ],
    "message": "MDEV-26561 mariabackup release locks\n\nThe previous threads locked need to be released too.\n\nThis occurs if the initialization of any of the non-first\nmutex/conditition variables errors occurs.",
    "before_after_code_files": [
      "extra/mariabackup/ds_compress.cc||extra/mariabackup/ds_compress.cc"
    ]
  },
  "patch_diff": {
    "extra/mariabackup/ds_compress.cc||extra/mariabackup/ds_compress.cc": [
      "File: extra/mariabackup/ds_compress.cc -> extra/mariabackup/ds_compress.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "386:  return threads;",
      "388: err:",
      "389:  my_free(threads);",
      "390:  return NULL;",
      "391: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "389:  while (i > 0) {",
      "390:   comp_thread_ctxt_t *thd;",
      "391:   i--;",
      "392:   thd = threads + i;",
      "393:   pthread_mutex_unlock(&thd->ctrl_mutex);",
      "394:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e1eb39a446c30b8459c39fd7f2ee1c55a36e97d2",
      "candidate_info": {
        "commit_hash": "e1eb39a446c30b8459c39fd7f2ee1c55a36e97d2",
        "repo": "MariaDB/server",
        "commit_url": "https://github.com/MariaDB/server/commit/e1eb39a446c30b8459c39fd7f2ee1c55a36e97d2",
        "files": [
          "extra/mariabackup/ds_compress.cc"
        ],
        "message": "MDEV-26561 Fix a bug due to unreleased lock\n\nFix a bug of unreleased lock ctrl_mutex in the method create_worker_threads",
        "before_after_code_files": [
          "extra/mariabackup/ds_compress.cc||extra/mariabackup/ds_compress.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/MariaDB/server/pull/1938"
        ],
        "olp_code_files": {
          "patch": [
            "extra/mariabackup/ds_compress.cc||extra/mariabackup/ds_compress.cc"
          ],
          "candidate": [
            "extra/mariabackup/ds_compress.cc||extra/mariabackup/ds_compress.cc"
          ]
        }
      },
      "candidate_diff": {
        "extra/mariabackup/ds_compress.cc||extra/mariabackup/ds_compress.cc": [
          "File: extra/mariabackup/ds_compress.cc -> extra/mariabackup/ds_compress.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:        thd)) {",
          "370:    msg(\"compress: pthread_create() failed: \"",
          "371:        \"errno = %d\", errno);",
          "372:    goto err;",
          "373:   }",
          "374:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372:    pthread_mutex_unlock(&thd->ctrl_mutex);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f62dfe676c29437b4a19c4d229e2accd2dda4a6",
      "candidate_info": {
        "commit_hash": "4f62dfe676c29437b4a19c4d229e2accd2dda4a6",
        "repo": "MariaDB/server",
        "commit_url": "https://github.com/MariaDB/server/commit/4f62dfe676c29437b4a19c4d229e2accd2dda4a6",
        "files": [
          "extra/mariabackup/ds_compress.cc"
        ],
        "message": "Revert \"MDEV-28689, MDEV-28690: Incorrect error handling for ctrl_mutex\"\n\nThis reverts commit 863c3eda872b19f70ce6045119bf621584e1312d.",
        "before_after_code_files": [
          "extra/mariabackup/ds_compress.cc||extra/mariabackup/ds_compress.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "extra/mariabackup/ds_compress.cc||extra/mariabackup/ds_compress.cc"
          ],
          "candidate": [
            "extra/mariabackup/ds_compress.cc||extra/mariabackup/ds_compress.cc"
          ]
        }
      },
      "candidate_diff": {
        "extra/mariabackup/ds_compress.cc||extra/mariabackup/ds_compress.cc": [
          "File: extra/mariabackup/ds_compress.cc -> extra/mariabackup/ds_compress.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: Copyright (c) 2011-2013 Percona LLC and/or its affiliates.",
          "5: Compressing datasink implementation for XtraBackup.",
          "",
          "[Removed Lines]",
          "3: Copyright (c) 2022, MariaDB Corporation.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: typedef struct {",
          "34:  pthread_t  id;",
          "35:  uint   num;",
          "36:  pthread_mutex_t  data_mutex;",
          "37:  pthread_cond_t   data_cond;",
          "38:  my_bool   data_avail;",
          "39:  my_bool   cancelled;",
          "40:  const char   *from;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:  pthread_mutex_t  ctrl_mutex;",
          "36:  pthread_cond_t  ctrl_cond;",
          "39:  my_bool   started;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "207:    thd = threads + i;",
          "211:    chunk_len = (len > COMPRESS_CHUNK_SIZE) ?",
          "212:     COMPRESS_CHUNK_SIZE : len;",
          "213:    thd->from = ptr;",
          "214:    thd->from_len = chunk_len;",
          "216:    thd->data_avail = TRUE;",
          "217:    pthread_cond_signal(&thd->data_cond);",
          "218:    pthread_mutex_unlock(&thd->data_mutex);",
          "",
          "[Removed Lines]",
          "209:    pthread_mutex_lock(&thd->data_mutex);",
          "",
          "[Added Lines]",
          "211:    pthread_mutex_lock(&thd->ctrl_mutex);",
          "218:    pthread_mutex_lock(&thd->data_mutex);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "256:         \"failed.\");",
          "257:     return 1;",
          "258:    }",
          "259:   }",
          "260:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262:    pthread_mutex_unlock(&threads[i].ctrl_mutex);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "325:  return ds_write(file, tmp, sizeof(tmp));",
          "326: }",
          "345: static",
          "346: comp_thread_ctxt_t *",
          "347: create_worker_threads(uint n)",
          "",
          "[Removed Lines]",
          "328: static",
          "329: void",
          "330: destroy_worker_thread(comp_thread_ctxt_t *thd)",
          "331: {",
          "332:  pthread_mutex_lock(&thd->data_mutex);",
          "333:  thd->cancelled = TRUE;",
          "334:  pthread_cond_signal(&thd->data_cond);",
          "335:  pthread_mutex_unlock(&thd->data_mutex);",
          "337:  pthread_join(thd->id, NULL);",
          "339:  pthread_cond_destroy(&thd->data_cond);",
          "340:  pthread_mutex_destroy(&thd->data_mutex);",
          "342:  my_free(thd->to);",
          "343: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "356:   comp_thread_ctxt_t *thd = threads + i;",
          "358:   thd->num = i + 1;",
          "359:   thd->cancelled = FALSE;",
          "360:   thd->data_avail = FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "346:   thd->started = FALSE;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "363:          MY_QLZ_COMPRESS_OVERHEAD,",
          "364:          MYF(MY_FAE));",
          "367:   if (pthread_mutex_init(&thd->data_mutex, NULL) ||",
          "368:       pthread_cond_init(&thd->data_cond, NULL)) {",
          "369:    goto err;",
          "370:   }",
          "372:   if (pthread_create(&thd->id, NULL, compress_worker_thread_func,",
          "373:        thd)) {",
          "374:    msg(\"compress: pthread_create() failed: \"",
          "375:        \"errno = %d\", errno);",
          "376:    goto err;",
          "377:   }",
          "378:  }",
          "380:  return threads;",
          "382: err:",
          "385:  }",
          "387:  my_free(threads);",
          "",
          "[Removed Lines]",
          "383:  for (; i; i--) {",
          "384:   destroy_worker_thread(threads + i);",
          "",
          "[Added Lines]",
          "355:   if (pthread_mutex_init(&thd->ctrl_mutex, NULL) ||",
          "356:       pthread_cond_init(&thd->ctrl_cond, NULL)) {",
          "357:    goto err;",
          "358:   }",
          "366:   pthread_mutex_lock(&thd->ctrl_mutex);",
          "372:    pthread_mutex_unlock(&thd->ctrl_mutex);",
          "378:  for (i = 0; i < n; i++) {",
          "379:   comp_thread_ctxt_t *thd = threads + i;",
          "381:   while (thd->started == FALSE)",
          "382:    pthread_cond_wait(&thd->ctrl_cond, &thd->ctrl_mutex);",
          "383:   pthread_mutex_unlock(&thd->ctrl_mutex);",
          "384:  }",
          "389:  while (i > 0) {",
          "390:   comp_thread_ctxt_t *thd;",
          "391:   i--;",
          "392:   thd = threads + i;",
          "393:   pthread_mutex_unlock(&thd->ctrl_mutex);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "395:  uint i;",
          "397:  for (i = 0; i < n; i++) {",
          "399:  }",
          "401:  my_free(threads);",
          "",
          "[Removed Lines]",
          "398:   destroy_worker_thread(threads + i);",
          "",
          "[Added Lines]",
          "407:   comp_thread_ctxt_t *thd = threads + i;",
          "409:   pthread_mutex_lock(&thd->data_mutex);",
          "410:   threads[i].cancelled = TRUE;",
          "411:   pthread_cond_signal(&thd->data_cond);",
          "412:   pthread_mutex_unlock(&thd->data_mutex);",
          "414:   pthread_join(thd->id, NULL);",
          "416:   pthread_cond_destroy(&thd->data_cond);",
          "417:   pthread_mutex_destroy(&thd->data_mutex);",
          "418:   pthread_cond_destroy(&thd->ctrl_cond);",
          "419:   pthread_mutex_destroy(&thd->ctrl_mutex);",
          "421:   my_free(thd->to);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "407: {",
          "408:  comp_thread_ctxt_t *thd = (comp_thread_ctxt_t *) arg;",
          "410:  pthread_mutex_lock(&thd->data_mutex);",
          "412:  while (1) {",
          "413:   while (!thd->data_avail && !thd->cancelled) {",
          "414:    pthread_cond_wait(&thd->data_cond, &thd->data_mutex);",
          "415:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433:  pthread_mutex_lock(&thd->ctrl_mutex);",
          "437:  thd->started = TRUE;",
          "438:  pthread_cond_signal(&thd->ctrl_cond);",
          "440:  pthread_mutex_unlock(&thd->ctrl_mutex);",
          "443:   thd->data_avail = FALSE;",
          "444:   pthread_cond_signal(&thd->data_cond);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b817afaa1c148437e1016d1981f138d0c46ccbc8",
      "candidate_info": {
        "commit_hash": "b817afaa1c148437e1016d1981f138d0c46ccbc8",
        "repo": "MariaDB/server",
        "commit_url": "https://github.com/MariaDB/server/commit/b817afaa1c148437e1016d1981f138d0c46ccbc8",
        "files": [
          "extra/mariabackup/ds_compress.cc"
        ],
        "message": "MDEV-28689, MDEV-28690: Remove ctrl_mutex\n\nThis reverts the revert 4f62dfe676c29437b4a19c4d229e2accd2dda4a6\nand fixes the hang that was introduced when ctrl_mutex was removed.\n\nThe test mariabackup.compress_qpress covers this code, but the\ntest is skipped if a stand-alone qpress executable is not available.\nIt is not available in many software repositories, possibly because\nthe code base has not been updated since 2010.\n\nThis was tested with an executable that was compile from the source\ncode at http://www.quicklz.com/qpress-11-source.zip (after adding\na missing #include <unistd.h> for the definition of isatty()).\n\nCompared to the grandparent commit (before the revert), the changes\nare as follows:\n\ncomp_thread_ctxt_t::done_cond: A separate condition for completed\ncompression, signaling that thd->to_len has been updated.\n\ncompress_write(): Replace some threads[i] with thd.\nReset thd->to_len = 0 after consuming the compressed data.\n\ncompress_worker_thread_func(): After consuming the uncompressed\ndata, set thd->data_avail = FALSE. After compressing, signal\nthd->done_cond.",
        "before_after_code_files": [
          "extra/mariabackup/ds_compress.cc||extra/mariabackup/ds_compress.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "extra/mariabackup/ds_compress.cc||extra/mariabackup/ds_compress.cc"
          ],
          "candidate": [
            "extra/mariabackup/ds_compress.cc||extra/mariabackup/ds_compress.cc"
          ]
        }
      },
      "candidate_diff": {
        "extra/mariabackup/ds_compress.cc||extra/mariabackup/ds_compress.cc": [
          "File: extra/mariabackup/ds_compress.cc -> extra/mariabackup/ds_compress.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: Copyright (c) 2011-2013 Percona LLC and/or its affiliates.",
          "4: Compressing datasink implementation for XtraBackup.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Copyright (c) 2022, MariaDB Corporation.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: typedef struct {",
          "33:  pthread_t  id;",
          "34:  uint   num;",
          "37:  pthread_mutex_t  data_mutex;",
          "38:  pthread_cond_t   data_cond;",
          "40:  my_bool   data_avail;",
          "41:  my_bool   cancelled;",
          "42:  const char   *from;",
          "",
          "[Removed Lines]",
          "35:  pthread_mutex_t  ctrl_mutex;",
          "36:  pthread_cond_t  ctrl_cond;",
          "39:  my_bool   started;",
          "",
          "[Added Lines]",
          "38:  pthread_cond_t   done_cond;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "209:    thd = threads + i;",
          "213:    chunk_len = (len > COMPRESS_CHUNK_SIZE) ?",
          "214:     COMPRESS_CHUNK_SIZE : len;",
          "215:    thd->from = ptr;",
          "216:    thd->from_len = chunk_len;",
          "219:    thd->data_avail = TRUE;",
          "220:    pthread_cond_signal(&thd->data_cond);",
          "221:    pthread_mutex_unlock(&thd->data_mutex);",
          "",
          "[Removed Lines]",
          "211:    pthread_mutex_lock(&thd->ctrl_mutex);",
          "218:    pthread_mutex_lock(&thd->data_mutex);",
          "",
          "[Added Lines]",
          "210:    pthread_mutex_lock(&thd->data_mutex);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "234:    thd = threads + i;",
          "236:    pthread_mutex_lock(&thd->data_mutex);",
          "239:         &thd->data_mutex);",
          "240:    }",
          "244:    bool fail = ds_write(dest_file, \"NEWBNEWB\", 8) ||",
          "245:     write_uint64_le(dest_file,",
          "246:       comp_file->bytes_processed);",
          "249:    if (!fail) {",
          "253:    }",
          "257:    if (fail) {",
          "258:     msg(\"compress: write to the destination stream \"",
          "259:         \"failed.\");",
          "260:     return 1;",
          "261:    }",
          "263:   }",
          "264:  }",
          "",
          "[Removed Lines]",
          "237:    while (thd->data_avail == TRUE) {",
          "238:     pthread_cond_wait(&thd->data_cond,",
          "242:    xb_a(threads[i].to_len > 0);",
          "247:    comp_file->bytes_processed += threads[i].from_len;",
          "250:     fail = write_uint32_le(dest_file, threads[i].adler) ||",
          "251:      ds_write(dest_file, threads[i].to,",
          "252:        threads[i].to_len);",
          "255:    pthread_mutex_unlock(&threads[i].data_mutex);",
          "262:    pthread_mutex_unlock(&threads[i].ctrl_mutex);",
          "",
          "[Added Lines]",
          "235:    while (!thd->to_len) {",
          "236:     pthread_cond_wait(&thd->done_cond,",
          "243:    comp_file->bytes_processed += thd->from_len;",
          "246:     fail = write_uint32_le(dest_file, thd->adler) ||",
          "247:      ds_write(dest_file, thd->to,",
          "248:        thd->to_len);",
          "251:    thd->to_len = 0;",
          "252:    pthread_mutex_unlock(&thd->data_mutex);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "329:  return ds_write(file, tmp, sizeof(tmp));",
          "330: }",
          "332: static",
          "333: comp_thread_ctxt_t *",
          "334: create_worker_threads(uint n)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328: static",
          "329: void",
          "330: destroy_worker_thread(comp_thread_ctxt_t *thd)",
          "331: {",
          "332:  pthread_mutex_lock(&thd->data_mutex);",
          "333:  thd->cancelled = TRUE;",
          "334:  pthread_cond_signal(&thd->data_cond);",
          "335:  pthread_mutex_unlock(&thd->data_mutex);",
          "337:  pthread_join(thd->id, NULL);",
          "339:  pthread_cond_destroy(&thd->data_cond);",
          "340:  pthread_cond_destroy(&thd->done_cond);",
          "341:  pthread_mutex_destroy(&thd->data_mutex);",
          "343:  my_free(thd->to);",
          "344: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "337:  uint    i;",
          "339:  threads = (comp_thread_ctxt_t *)",
          "342:  for (i = 0; i < n; i++) {",
          "343:   comp_thread_ctxt_t *thd = threads + i;",
          "345:   thd->num = i + 1;",
          "350:   thd->to = (char *) my_malloc(COMPRESS_CHUNK_SIZE +",
          "351:          MY_QLZ_COMPRESS_OVERHEAD,",
          "352:          MYF(MY_FAE));",
          "361:   if (pthread_mutex_init(&thd->data_mutex, NULL) ||",
          "363:    goto err;",
          "364:   }",
          "368:   if (pthread_create(&thd->id, NULL, compress_worker_thread_func,",
          "369:        thd)) {",
          "370:    msg(\"compress: pthread_create() failed: \"",
          "371:        \"errno = %d\", errno);",
          "373:    goto err;",
          "374:   }",
          "375:  }",
          "386:  return threads;",
          "388: err:",
          "394:  }",
          "396:  my_free(threads);",
          "",
          "[Removed Lines]",
          "340:   my_malloc(sizeof(comp_thread_ctxt_t) * n, MYF(MY_FAE));",
          "346:   thd->started = FALSE;",
          "347:   thd->cancelled = FALSE;",
          "348:   thd->data_avail = FALSE;",
          "355:   if (pthread_mutex_init(&thd->ctrl_mutex, NULL) ||",
          "356:       pthread_cond_init(&thd->ctrl_cond, NULL)) {",
          "357:    goto err;",
          "358:   }",
          "362:       pthread_cond_init(&thd->data_cond, NULL)) {",
          "366:   pthread_mutex_lock(&thd->ctrl_mutex);",
          "372:    pthread_mutex_unlock(&thd->ctrl_mutex);",
          "378:  for (i = 0; i < n; i++) {",
          "379:   comp_thread_ctxt_t *thd = threads + i;",
          "381:   while (thd->started == FALSE)",
          "382:    pthread_cond_wait(&thd->ctrl_cond, &thd->ctrl_mutex);",
          "383:   pthread_mutex_unlock(&thd->ctrl_mutex);",
          "384:  }",
          "389:  while (i > 0) {",
          "390:   comp_thread_ctxt_t *thd;",
          "391:   i--;",
          "392:   thd = threads + i;",
          "393:   pthread_mutex_unlock(&thd->ctrl_mutex);",
          "",
          "[Added Lines]",
          "354:   my_malloc(n * sizeof *threads, MYF(MY_ZEROFILL|MY_FAE));",
          "366:       pthread_cond_init(&thd->data_cond, NULL) ||",
          "367:       pthread_cond_init(&thd->done_cond, NULL)) {",
          "382:  for (; i; i--) {",
          "383:   destroy_worker_thread(threads + i);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "404:  uint i;",
          "406:  for (i = 0; i < n; i++) {",
          "422:  }",
          "424:  my_free(threads);",
          "",
          "[Removed Lines]",
          "407:   comp_thread_ctxt_t *thd = threads + i;",
          "409:   pthread_mutex_lock(&thd->data_mutex);",
          "410:   threads[i].cancelled = TRUE;",
          "411:   pthread_cond_signal(&thd->data_cond);",
          "412:   pthread_mutex_unlock(&thd->data_mutex);",
          "414:   pthread_join(thd->id, NULL);",
          "416:   pthread_cond_destroy(&thd->data_cond);",
          "417:   pthread_mutex_destroy(&thd->data_mutex);",
          "418:   pthread_cond_destroy(&thd->ctrl_cond);",
          "419:   pthread_mutex_destroy(&thd->ctrl_mutex);",
          "421:   my_free(thd->to);",
          "",
          "[Added Lines]",
          "397:   destroy_worker_thread(threads + i);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "430: {",
          "431:  comp_thread_ctxt_t *thd = (comp_thread_ctxt_t *) arg;",
          "435:  pthread_mutex_lock(&thd->data_mutex);",
          "442:  while (1) {",
          "446:   while (!thd->data_avail && !thd->cancelled) {",
          "447:    pthread_cond_wait(&thd->data_cond, &thd->data_mutex);",
          "448:   }",
          "450:   if (thd->cancelled)",
          "451:    break;",
          "453:   thd->to_len = qlz_compress(thd->from, thd->to, thd->from_len,",
          "454:         &thd->state);",
          "",
          "[Removed Lines]",
          "433:  pthread_mutex_lock(&thd->ctrl_mutex);",
          "437:  thd->started = TRUE;",
          "438:  pthread_cond_signal(&thd->ctrl_cond);",
          "440:  pthread_mutex_unlock(&thd->ctrl_mutex);",
          "443:   thd->data_avail = FALSE;",
          "444:   pthread_cond_signal(&thd->data_cond);",
          "",
          "[Added Lines]",
          "418:   thd->data_avail = FALSE;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "465:   thd->adler = adler32(0x00000001, (uchar *) thd->to,",
          "466:          (uInt)thd->to_len);",
          "467:  }",
          "469:  pthread_mutex_unlock(&thd->data_mutex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433:   pthread_cond_signal(&thd->done_cond);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "863c3eda872b19f70ce6045119bf621584e1312d",
      "candidate_info": {
        "commit_hash": "863c3eda872b19f70ce6045119bf621584e1312d",
        "repo": "MariaDB/server",
        "commit_url": "https://github.com/MariaDB/server/commit/863c3eda872b19f70ce6045119bf621584e1312d",
        "files": [
          "extra/mariabackup/ds_compress.cc"
        ],
        "message": "MDEV-28689, MDEV-28690: Incorrect error handling for ctrl_mutex\n\ncomp_thread_ctxt_t: Remove ctrl_mutex, ctrl_cond, started. We do not\nactually need them for anything.\n\ndestroy_worker_thread(): Split from destroy_worker_threads().\n\ncreate_worker_threads(): We already initialize\nthd->data_avail=FALSE and thd->cancelled=FALSE before\ninvoking pthread_create(). If any thread creation fails,\nclean up by destroy_worker_thread().\n\ncompress_worker_thread_func(): Assume that thd->started and\nthd->data_avail are already initialized.\n\nReviewed by: Vladislav Vaintroub",
        "before_after_code_files": [
          "extra/mariabackup/ds_compress.cc||extra/mariabackup/ds_compress.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "extra/mariabackup/ds_compress.cc||extra/mariabackup/ds_compress.cc"
          ],
          "candidate": [
            "extra/mariabackup/ds_compress.cc||extra/mariabackup/ds_compress.cc"
          ]
        }
      },
      "candidate_diff": {
        "extra/mariabackup/ds_compress.cc||extra/mariabackup/ds_compress.cc": [
          "File: extra/mariabackup/ds_compress.cc -> extra/mariabackup/ds_compress.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: Copyright (c) 2011-2013 Percona LLC and/or its affiliates.",
          "4: Compressing datasink implementation for XtraBackup.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Copyright (c) 2022, MariaDB Corporation.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: typedef struct {",
          "33:  pthread_t  id;",
          "34:  uint   num;",
          "37:  pthread_mutex_t  data_mutex;",
          "38:  pthread_cond_t   data_cond;",
          "40:  my_bool   data_avail;",
          "41:  my_bool   cancelled;",
          "42:  const char   *from;",
          "",
          "[Removed Lines]",
          "35:  pthread_mutex_t  ctrl_mutex;",
          "36:  pthread_cond_t  ctrl_cond;",
          "39:  my_bool   started;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "209:    thd = threads + i;",
          "213:    chunk_len = (len > COMPRESS_CHUNK_SIZE) ?",
          "214:     COMPRESS_CHUNK_SIZE : len;",
          "215:    thd->from = ptr;",
          "216:    thd->from_len = chunk_len;",
          "219:    thd->data_avail = TRUE;",
          "220:    pthread_cond_signal(&thd->data_cond);",
          "221:    pthread_mutex_unlock(&thd->data_mutex);",
          "",
          "[Removed Lines]",
          "211:    pthread_mutex_lock(&thd->ctrl_mutex);",
          "218:    pthread_mutex_lock(&thd->data_mutex);",
          "",
          "[Added Lines]",
          "209:    pthread_mutex_lock(&thd->data_mutex);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "260:    }",
          "262:    pthread_mutex_unlock(&threads[i].data_mutex);",
          "264:   }",
          "265:  }",
          "",
          "[Removed Lines]",
          "263:    pthread_mutex_unlock(&threads[i].ctrl_mutex);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "330:  return ds_write(file, tmp, sizeof(tmp));",
          "331: }",
          "333: static",
          "334: comp_thread_ctxt_t *",
          "335: create_worker_threads(uint n)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329: static",
          "330: void",
          "331: destroy_worker_thread(comp_thread_ctxt_t *thd)",
          "332: {",
          "333:  pthread_mutex_lock(&thd->data_mutex);",
          "334:  thd->cancelled = TRUE;",
          "335:  pthread_cond_signal(&thd->data_cond);",
          "336:  pthread_mutex_unlock(&thd->data_mutex);",
          "338:  pthread_join(thd->id, NULL);",
          "340:  pthread_cond_destroy(&thd->data_cond);",
          "341:  pthread_mutex_destroy(&thd->data_mutex);",
          "343:  my_free(thd->to);",
          "344: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "344:   comp_thread_ctxt_t *thd = threads + i;",
          "346:   thd->num = i + 1;",
          "348:   thd->cancelled = FALSE;",
          "349:   thd->data_avail = FALSE;",
          "",
          "[Removed Lines]",
          "347:   thd->started = FALSE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "352:          MY_QLZ_COMPRESS_OVERHEAD,",
          "353:          MYF(MY_FAE));",
          "362:   if (pthread_mutex_init(&thd->data_mutex, NULL) ||",
          "363:       pthread_cond_init(&thd->data_cond, NULL)) {",
          "364:    goto err;",
          "365:   }",
          "369:   if (pthread_create(&thd->id, NULL, compress_worker_thread_func,",
          "370:        thd)) {",
          "371:    msg(\"compress: pthread_create() failed: \"",
          "372:        \"errno = %d\", errno);",
          "374:    goto err;",
          "375:   }",
          "376:  }",
          "387:  return threads;",
          "389: err:",
          "395:  }",
          "397:  my_free(threads);",
          "",
          "[Removed Lines]",
          "356:   if (pthread_mutex_init(&thd->ctrl_mutex, NULL) ||",
          "357:       pthread_cond_init(&thd->ctrl_cond, NULL)) {",
          "358:    goto err;",
          "359:   }",
          "367:   pthread_mutex_lock(&thd->ctrl_mutex);",
          "373:    pthread_mutex_unlock(&thd->ctrl_mutex);",
          "379:  for (i = 0; i < n; i++) {",
          "380:   comp_thread_ctxt_t *thd = threads + i;",
          "382:   while (thd->started == FALSE)",
          "383:    pthread_cond_wait(&thd->ctrl_cond, &thd->ctrl_mutex);",
          "384:   pthread_mutex_unlock(&thd->ctrl_mutex);",
          "385:  }",
          "390:  while (i > 0) {",
          "391:   comp_thread_ctxt_t *thd;",
          "392:   i--;",
          "393:   thd = threads + i;",
          "394:   pthread_mutex_unlock(&thd->ctrl_mutex);",
          "",
          "[Added Lines]",
          "384:  for (; i; i--) {",
          "385:   destroy_worker_thread(threads + i);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "405:  uint i;",
          "407:  for (i = 0; i < n; i++) {",
          "423:  }",
          "425:  my_free(threads);",
          "",
          "[Removed Lines]",
          "408:   comp_thread_ctxt_t *thd = threads + i;",
          "410:   pthread_mutex_lock(&thd->data_mutex);",
          "411:   threads[i].cancelled = TRUE;",
          "412:   pthread_cond_signal(&thd->data_cond);",
          "413:   pthread_mutex_unlock(&thd->data_mutex);",
          "415:   pthread_join(thd->id, NULL);",
          "417:   pthread_cond_destroy(&thd->data_cond);",
          "418:   pthread_mutex_destroy(&thd->data_mutex);",
          "419:   pthread_cond_destroy(&thd->ctrl_cond);",
          "420:   pthread_mutex_destroy(&thd->ctrl_mutex);",
          "422:   my_free(thd->to);",
          "",
          "[Added Lines]",
          "399:   destroy_worker_thread(threads + i);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "431: {",
          "432:  comp_thread_ctxt_t *thd = (comp_thread_ctxt_t *) arg;",
          "436:  pthread_mutex_lock(&thd->data_mutex);",
          "443:  while (1) {",
          "447:   while (!thd->data_avail && !thd->cancelled) {",
          "448:    pthread_cond_wait(&thd->data_cond, &thd->data_mutex);",
          "449:   }",
          "",
          "[Removed Lines]",
          "434:  pthread_mutex_lock(&thd->ctrl_mutex);",
          "438:  thd->started = TRUE;",
          "439:  pthread_cond_signal(&thd->ctrl_cond);",
          "441:  pthread_mutex_unlock(&thd->ctrl_mutex);",
          "444:   thd->data_avail = FALSE;",
          "445:   pthread_cond_signal(&thd->data_cond);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}