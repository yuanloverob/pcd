{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ced89124d866cd865a8546291f6588f74be2ec36",
      "candidate_info": {
        "commit_hash": "ced89124d866cd865a8546291f6588f74be2ec36",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ced89124d866cd865a8546291f6588f74be2ec36",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "test/window1.test"
        ],
        "message": "Ensure that all the new window-function keywords can still be used as SQL identifiers.\n\nFossilOrigin-Name: a6d61dfd4780eccfce5f7a5ead6c04e3b78bc4a461551fd7dd602550e0d51084",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/window1.test||test/window1.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/window1.test||test/window1.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1fbddf01b1c3fff95b05e2f2f709754e2b514296060b4846518791e7161d9ddb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "218: %endif SQLITE_OMIT_COMPOUND_SELECT",
          "219: %ifndef SQLITE_OMIT_WINDOWFUNC",
          "220:   CURRENT FOLLOWING PARTITION PRECEDING RANGE UNBOUNDED",
          "221: %endif SQLITE_OMIT_WINDOWFUNC",
          "222:   REINDEX RENAME CTIME_KW IF",
          "223:   .",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:   EXCLUDE GROUPS OTHERS TIES",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "924:   ) FROM t1 ORDER BY a ASC;",
          "925: } {{} 200 {} 200 1 3 2 6 3 10 4 14 5 12 a 6 b 7 c 8 d 9 e 10}",
          "927: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "927: #-------------------------------------------------------------------------",
          "928: do_execsql_test 21.0 {",
          "929:   CREATE TABLE keyword_tab(",
          "930:     current, exclude, filter, following, groups, no, others, over,",
          "931:     partition, preceding, range, ties, unbounded, window",
          "932:   );",
          "933: }",
          "934: do_execsql_test 21.1 {",
          "935:   SELECT",
          "936:     current, exclude, filter, following, groups, no, others, over,",
          "937:     partition, preceding, range, ties, unbounded, window",
          "938:   FROM keyword_tab",
          "939: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db7d895e9d145be140b8290f930a3be521861a0a",
      "candidate_info": {
        "commit_hash": "db7d895e9d145be140b8290f930a3be521861a0a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/db7d895e9d145be140b8290f930a3be521861a0a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c",
          "src/btree.c",
          "src/whereexpr.c",
          "test/corruptL.test",
          "test/fuzzdata8.db",
          "test/memdb1.test",
          "test/window1.test"
        ],
        "message": "Merge latest trunk changes into this branch.\n\nFossilOrigin-Name: 0b904517bd6c4c59082381577246d3d2351b4265fc9151438ee4c33cf16f2eb1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c",
          "src/btree.c||src/btree.c",
          "src/whereexpr.c||src/whereexpr.c",
          "test/corruptL.test||test/corruptL.test",
          "test/memdb1.test||test/memdb1.test",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/window1.test||test/window1.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/window1.test||test/window1.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 180be266238e18c01f8bd52c75dd9aa3e26e553620258141cd95189a0ae59ddb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:     sqlite3BtreeEnterAll(db);",
          "235:     db->init.iDb = 0;",
          "236:     db->mDbFlags &= ~(DBFLAG_SchemaKnownOk);",
          "238:     sqlite3BtreeLeaveAll(db);",
          "239:     assert( zErrDyn==0 || rc!=SQLITE_OK );",
          "240:   }",
          "",
          "[Removed Lines]",
          "237:     rc = sqlite3Init(db, &zErrDyn);",
          "",
          "[Added Lines]",
          "237:     if( !REOPEN_AS_MEMDB(db) ){",
          "238:       rc = sqlite3Init(db, &zErrDyn);",
          "239:     }",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1573:     }",
          "1574:     iAddr = pc;",
          "1575:     pc = get2byte(&aData[pc]);",
          "1577:       if( pc ){",
          "",
          "[Removed Lines]",
          "1576:     if( pc<iAddr+size ){",
          "",
          "[Added Lines]",
          "1576:     if( pc<=iAddr+size ){",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1520:   }else if( p->x.pList ){",
          "1521:     mask |= sqlite3WhereExprListUsage(pMaskSet, p->x.pList);",
          "1522:   }",
          "1523:   return mask;",
          "1524: }",
          "1525: Bitmask sqlite3WhereExprUsage(WhereMaskSet *pMaskSet, Expr *p){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1523: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1524:   if( p->op==TK_FUNCTION && p->y.pWin ){",
          "1525:     mask |= sqlite3WhereExprListUsage(pMaskSet, p->y.pWin->pPartition);",
          "1526:     mask |= sqlite3WhereExprListUsage(pMaskSet, p->y.pWin->pOrderBy);",
          "1527:   }",
          "1528: #endif",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "123: do_catchsql_test 1.1 {",
          "124:   PRAGMA cell_size_check = off;",
          "125:   DROP INDEX t1x1;",
          "128: do_catchsql_test 1.2 {",
          "129:   SELECT sum(s+length(b)) FROM t1 WHERE a IN (110,10,150) AND q IS NULL;",
          "132: do_catchsql_test 1.3 {",
          "133:   REINDEX t1;",
          "136: #-------------------------------------------------------------------------",
          "137: reset_db",
          "",
          "[Removed Lines]",
          "126: } {1 {no such index: t1x1}}",
          "130: } {1 {no such table: t1}}",
          "134: } {1 {unable to identify the object to be reindexed}}",
          "",
          "[Added Lines]",
          "126: } {1 {database disk image is malformed}}",
          "130: } {1 {database disk image is malformed}}",
          "134: } {1 {database disk image is malformed}}",
          "136: do_catchsql_test 1.4 {",
          "137:   PRAGMA integrity_check",
          "138: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "test/memdb1.test||test/memdb1.test": [
          "File: test/memdb1.test -> test/memdb1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:   lappend rc $msg",
          "186: } {1 {wrong # args: should be \"db serialize ?DATABASE?\"}}",
          "188: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188: #-------------------------------------------------------------------------",
          "189: reset_db",
          "190: do_execsql_test 700 {",
          "191:   CREATE TABLE t1(a, b);",
          "192:   PRAGMA schema_version = 0;",
          "193: }",
          "194: do_test 710 {",
          "195:   set ser [db serialize main]",
          "196:   db close",
          "197:   sqlite3 db",
          "198:   db deserialize main $ser",
          "199:   catchsql {",
          "200:     CREATE VIRTUAL TABLE t1 USING rtree(id, a, b, c, d);",
          "201:   }",
          "202: } {1 {table t1 already exists}}",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "720:   ORDER BY 10+sum(a) OVER (ORDER BY a) DESC;",
          "721: } {16 13 11}",
          "723: #-------------------------------------------------------------------------",
          "724: # Test error cases from chaining window definitions.",
          "725: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "723: #-------------------------------------------------------------------------",
          "724: #",
          "725: reset_db",
          "726: do_execsql_test 18.0 {",
          "727:   CREATE TABLE t1 ( t1_id INTEGER PRIMARY KEY );",
          "728:   CREATE TABLE t2 ( t2_id INTEGER PRIMARY KEY );",
          "729:   CREATE TABLE t3 ( t3_id INTEGER PRIMARY KEY );",
          "731:   INSERT INTO t1 VALUES(1),  (3), (5);",
          "732:   INSERT INTO t2 VALUES      (3), (5);",
          "733:   INSERT INTO t3 VALUES(10), (11), (12);",
          "734: }",
          "736: do_execsql_test 18.1 {",
          "737:   SELECT t1.* FROM t1, t2 WHERE",
          "738:     t1_id=t2_id AND t1_id IN (",
          "739:         SELECT t1_id + row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "740:     )",
          "741: }",
          "743: do_execsql_test 18.2 {",
          "744:   SELECT t1.* FROM t1, t2 WHERE",
          "745:     t1_id=t2_id AND t1_id IN (",
          "746:         SELECT         row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "747:     )",
          "748: } {3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94809086e50e86bfd34f134eb3385676359f8b3c",
      "candidate_info": {
        "commit_hash": "94809086e50e86bfd34f134eb3385676359f8b3c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/94809086e50e86bfd34f134eb3385676359f8b3c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "Use a separate bit on db->dbOptFlags to disable the xInverse optimization on window functions, rather than reusing the query-flattener disable bit.\n\nFossilOrigin-Name: bc0fb1c324be2fd668bc4398c7d364b7e3c5a98537fe5fb58a125b66f3e6d041",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 10aedce3dd2c0c9f0ee9e0aefd0b4d2c2eb17c4ca72003c4db9768ea5cdafcf4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1092:   pWin->eFrmType = eType;",
          "1093:   pWin->eStart = eStart;",
          "1094:   pWin->eEnd = eEnd;",
          "1096:     eExclude = TK_NO;",
          "1097:   }",
          "1098:   pWin->eExclude = eExclude;",
          "",
          "[Removed Lines]",
          "1095:   if( eExclude==0 && OptimizationDisabled(pParse->db, SQLITE_QueryFlattener) ){",
          "",
          "[Added Lines]",
          "1095:   if( eExclude==0 && OptimizationDisabled(pParse->db, SQLITE_WindowFunc) ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12bf7127073c26905ef40ae2cf972ffe95d01b6b",
      "candidate_info": {
        "commit_hash": "12bf7127073c26905ef40ae2cf972ffe95d01b6b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/12bf7127073c26905ef40ae2cf972ffe95d01b6b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h"
        ],
        "message": "Change the COLFLAG_NOTAVAIL bitmask so that it fits in the single-byte Walker.eCode field.\n\nFossilOrigin-Name: 53847f5c28bdecfbc7b08685d4dcd0565526f6191491b4827c3c966a4b8d4a85",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 18c3a17dc8c07b12427e372ff86668d5bcb6b34d653c46c48561ed576acefa5b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    },
    {
      "candidate_hash": "455100533256d5bd5d67f9bfac7b6bdabeeacceb",
      "candidate_info": {
        "commit_hash": "455100533256d5bd5d67f9bfac7b6bdabeeacceb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/455100533256d5bd5d67f9bfac7b6bdabeeacceb",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "Load all the latest dbsqlfuzz finds into test/fuzzdata8.db.\n\nFossilOrigin-Name: e744d2dd93a78235e6c1d938b08232183b5ce7e355d1b7daf2199e585b03c106",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 97704cb7d29fa7cc4ea9a6761a7844c1946d637ea2b22d287fc787ae0f63c407",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}