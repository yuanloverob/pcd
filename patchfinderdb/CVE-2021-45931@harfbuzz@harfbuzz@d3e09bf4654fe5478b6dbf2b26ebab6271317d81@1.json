{
  "cve_id": "CVE-2021-45931",
  "cve_desc": "HarfBuzz 2.9.0 has an out-of-bounds write in hb_bit_set_invertible_t::set (called from hb_sparseset_t<hb_bit_set_invertible_t>::set and hb_set_copy).",
  "repo": "harfbuzz/harfbuzz",
  "patch_hash": "d3e09bf4654fe5478b6dbf2b26ebab6271317d81",
  "patch_info": {
    "commit_hash": "d3e09bf4654fe5478b6dbf2b26ebab6271317d81",
    "repo": "harfbuzz/harfbuzz",
    "commit_url": "https://github.com/harfbuzz/harfbuzz/commit/d3e09bf4654fe5478b6dbf2b26ebab6271317d81",
    "files": [
      "src/hb-bit-set-invertible.hh",
      "src/hb-map.cc",
      "src/hb-map.hh",
      "src/hb-set.cc"
    ],
    "message": "[set] Make all operators null-safe again\n\nChanged my mind.\n\nAlso for hb_map_clear().\n\nPart of https://github.com/harfbuzz/harfbuzz/pull/3162",
    "before_after_code_files": [
      "src/hb-bit-set-invertible.hh||src/hb-bit-set-invertible.hh",
      "src/hb-map.cc||src/hb-map.cc",
      "src/hb-map.hh||src/hb-map.hh",
      "src/hb-set.cc||src/hb-set.cc"
    ]
  },
  "patch_diff": {
    "src/hb-bit-set-invertible.hh||src/hb-bit-set-invertible.hh": [
      "File: src/hb-bit-set-invertible.hh -> src/hb-bit-set-invertible.hh",
      "--- Hunk 1 ---",
      "[Context before]",
      "46:   bool in_error () const { return s.in_error (); }",
      "47:   explicit operator bool () const { return !is_empty (); }",
      "53:   bool is_empty () const",
      "54:   {",
      "",
      "[Removed Lines]",
      "49:   void reset () { s.reset (); inverted = false; }",
      "50:   void clear () { s.clear (); inverted = false; }",
      "51:   void invert () { inverted = !inverted; }",
      "",
      "[Added Lines]",
      "49:   void reset ()",
      "50:   {",
      "51:     s.reset ();",
      "52:     inverted = false;",
      "53:   }",
      "54:   void clear ()",
      "55:   {",
      "56:     s.clear ();",
      "57:     if (likely (s.successful))",
      "58:       inverted = false;",
      "59:   }",
      "60:   void invert ()",
      "61:   {",
      "62:     if (likely (s.successful))",
      "63:       inverted = !inverted;",
      "64:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "116:     return next (&c) && c <= last;",
      "117:   }",
      "121:   bool is_equal (const hb_bit_set_invertible_t &other) const",
      "122:   {",
      "",
      "[Removed Lines]",
      "119:   void set (const hb_bit_set_invertible_t &other) { s.set (other.s); inverted = other.inverted; }",
      "",
      "[Added Lines]",
      "132:   void set (const hb_bit_set_invertible_t &other)",
      "133:   {",
      "134:     s.set (other.s);",
      "135:     if (likely (s.successful))",
      "136:       inverted = other.inverted;",
      "137:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "161:       else",
      "162:  process (hb_bitwise_lt, other);",
      "163:     }",
      "165:   }",
      "166:   void intersect (const hb_bit_set_invertible_t &other)",
      "167:   {",
      "",
      "[Removed Lines]",
      "164:     inverted = inverted || other.inverted;",
      "",
      "[Added Lines]",
      "182:     if (likely (s.successful))",
      "183:       inverted = inverted || other.inverted;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "179:       else",
      "180:  process (hb_bitwise_gt, other);",
      "181:     }",
      "183:   }",
      "184:   void subtract (const hb_bit_set_invertible_t &other)",
      "185:   {",
      "",
      "[Removed Lines]",
      "182:     inverted = inverted && other.inverted;",
      "",
      "[Added Lines]",
      "201:     if (likely (s.successful))",
      "202:       inverted = inverted && other.inverted;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "197:       else",
      "198:  process (hb_bitwise_and, other);",
      "199:     }",
      "201:   }",
      "202:   void symmetric_difference (const hb_bit_set_invertible_t &other)",
      "203:   {",
      "204:     process (hb_bitwise_xor, other);",
      "206:   }",
      "208:   bool next (hb_codepoint_t *codepoint) const",
      "",
      "[Removed Lines]",
      "200:     inverted = inverted && !other.inverted;",
      "205:     inverted = inverted ^ other.inverted;",
      "",
      "[Added Lines]",
      "220:     if (likely (s.successful))",
      "221:       inverted = inverted && !other.inverted;",
      "226:     if (likely (s.successful))",
      "227:       inverted = inverted ^ other.inverted;",
      "",
      "---------------"
    ],
    "src/hb-map.cc||src/hb-map.cc": [
      "File: src/hb-map.cc -> src/hb-map.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "255: void",
      "256: hb_map_clear (hb_map_t *map)",
      "257: {",
      "261:   return map->clear ();",
      "262: }",
      "",
      "[Removed Lines]",
      "258:   if (unlikely (hb_object_is_immutable (map)))",
      "259:     return;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/hb-map.hh||src/hb-map.hh": [
      "File: src/hb-map.hh -> src/hb-map.hh",
      "--- Hunk 1 ---",
      "[Context before]",
      "170:   void clear ()",
      "171:   {",
      "172:     if (items)",
      "173:       for (auto &_ : hb_iter (items, mask + 1))",
      "174:  _.clear ();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "172:     if (unlikely (!successful)) return;",
      "",
      "---------------"
    ],
    "src/hb-set.cc||src/hb-set.cc": [
      "File: src/hb-set.cc -> src/hb-set.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "201: void",
      "202: hb_set_clear (hb_set_t *set)",
      "203: {",
      "207:   set->clear ();",
      "208: }",
      "",
      "[Removed Lines]",
      "204:   if (unlikely (hb_object_is_immutable (set)))",
      "205:     return;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "368: hb_set_set (hb_set_t       *set,",
      "369:      const hb_set_t *other)",
      "370: {",
      "374:   set->set (*other);",
      "375: }",
      "",
      "[Removed Lines]",
      "371:   if (unlikely (hb_object_is_immutable (set)))",
      "372:     return;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "387: hb_set_union (hb_set_t       *set,",
      "388:        const hb_set_t *other)",
      "389: {",
      "393:   set->union_ (*other);",
      "394: }",
      "",
      "[Removed Lines]",
      "390:   if (unlikely (hb_object_is_immutable (set)))",
      "391:     return;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "406: hb_set_intersect (hb_set_t       *set,",
      "407:     const hb_set_t *other)",
      "408: {",
      "412:   set->intersect (*other);",
      "413: }",
      "",
      "[Removed Lines]",
      "409:   if (unlikely (hb_object_is_immutable (set)))",
      "410:     return;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "425: hb_set_subtract (hb_set_t       *set,",
      "426:    const hb_set_t *other)",
      "427: {",
      "431:   set->subtract (*other);",
      "432: }",
      "",
      "[Removed Lines]",
      "428:   if (unlikely (hb_object_is_immutable (set)))",
      "429:     return;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "445: hb_set_symmetric_difference (hb_set_t       *set,",
      "446:         const hb_set_t *other)",
      "447: {",
      "451:   set->symmetric_difference (*other);",
      "452: }",
      "",
      "[Removed Lines]",
      "448:   if (unlikely (hb_object_is_immutable (set)))",
      "449:     return;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "462: void",
      "463: hb_set_invert (hb_set_t *set)",
      "464: {",
      "468:   set->invert ();",
      "469: }",
      "",
      "[Removed Lines]",
      "465:   if (unlikely (hb_object_is_immutable (set)))",
      "466:     return;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2d39031f7b03543d8e9638354afad1af68872f06",
      "candidate_info": {
        "commit_hash": "2d39031f7b03543d8e9638354afad1af68872f06",
        "repo": "harfbuzz/harfbuzz",
        "commit_url": "https://github.com/harfbuzz/harfbuzz/commit/2d39031f7b03543d8e9638354afad1af68872f06",
        "files": [
          "src/hb-buffer.cc",
          "src/hb-map.cc",
          "src/hb-map.hh",
          "src/hb-set.cc",
          "src/hb-set.hh"
        ],
        "message": "[buffer/set/map] Move immutable check only to C API boundary\n\nThe immutable objects are a concept only enforced by the C API.\nSo move checks only to that region.\n\nThis does assume that the rest of the code is careful not getting\ninto these internal methods on immutable objects, which something\nwe do, but have no way of enforcing (currently).\n\n.",
        "before_after_code_files": [
          "src/hb-buffer.cc||src/hb-buffer.cc",
          "src/hb-map.cc||src/hb-map.cc",
          "src/hb-map.hh||src/hb-map.hh",
          "src/hb-set.cc||src/hb-set.cc",
          "src/hb-set.hh||src/hb-set.hh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/hb-map.cc||src/hb-map.cc",
            "src/hb-map.hh||src/hb-map.hh",
            "src/hb-set.cc||src/hb-set.cc"
          ],
          "candidate": [
            "src/hb-map.cc||src/hb-map.cc",
            "src/hb-map.hh||src/hb-map.hh",
            "src/hb-set.cc||src/hb-set.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/hb-buffer.cc||src/hb-buffer.cc": [
          "File: src/hb-buffer.cc -> src/hb-buffer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "218: void",
          "219: hb_buffer_t::reset ()",
          "220: {",
          "224:   hb_unicode_funcs_destroy (unicode);",
          "225:   unicode = hb_unicode_funcs_reference (hb_unicode_funcs_get_default ());",
          "226:   flags = HB_BUFFER_FLAG_DEFAULT;",
          "",
          "[Removed Lines]",
          "221:   if (unlikely (hb_object_is_immutable (this)))",
          "222:     return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "233: void",
          "234: hb_buffer_t::clear ()",
          "235: {",
          "239:   hb_segment_properties_t default_props = HB_SEGMENT_PROPERTIES_DEFAULT;",
          "240:   props = default_props;",
          "241:   scratch_flags = HB_BUFFER_SCRATCH_FLAG_DEFAULT;",
          "",
          "[Removed Lines]",
          "236:   if (unlikely (hb_object_is_immutable (this)))",
          "237:     return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "290: void",
          "291: hb_buffer_t::remove_output ()",
          "292: {",
          "296:   have_output = false;",
          "297:   have_positions = false;",
          "",
          "[Removed Lines]",
          "293:   if (unlikely (hb_object_is_immutable (this)))",
          "294:     return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "303: void",
          "304: hb_buffer_t::clear_output ()",
          "305: {",
          "309:   have_output = true;",
          "310:   have_positions = false;",
          "",
          "[Removed Lines]",
          "306:   if (unlikely (hb_object_is_immutable (this)))",
          "307:     return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "316: void",
          "317: hb_buffer_t::clear_positions ()",
          "318: {",
          "322:   have_output = false;",
          "323:   have_positions = true;",
          "",
          "[Removed Lines]",
          "319:   if (unlikely (hb_object_is_immutable (this)))",
          "320:     return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1226: void",
          "1227: hb_buffer_reset (hb_buffer_t *buffer)",
          "1228: {",
          "1229:   buffer->reset ();",
          "1230: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1214:   if (unlikely (hb_object_is_immutable (buffer)))",
          "1215:     return;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1241: void",
          "1242: hb_buffer_clear_contents (hb_buffer_t *buffer)",
          "1243: {",
          "1244:   buffer->clear ();",
          "1245: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1232:   if (unlikely (hb_object_is_immutable (buffer)))",
          "1233:     return;",
          "",
          "---------------"
        ],
        "src/hb-map.cc||src/hb-map.cc": [
          "File: src/hb-map.cc -> src/hb-map.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "253: void",
          "254: hb_map_clear (hb_map_t *map)",
          "255: {",
          "256:   return map->clear ();",
          "257: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "256:   if (unlikely (hb_object_is_immutable (map)))",
          "257:     return;",
          "",
          "---------------"
        ],
        "src/hb-map.hh||src/hb-map.hh": [
          "File: src/hb-map.hh -> src/hb-map.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   void reset ()",
          "99:   {",
          "102:     successful = true;",
          "103:     clear ();",
          "104:   }",
          "",
          "[Removed Lines]",
          "100:     if (unlikely (hb_object_is_immutable (this)))",
          "101:       return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:   void clear ()",
          "173:   {",
          "176:     if (items)",
          "177:       for (auto &_ : hb_iter (items, mask + 1))",
          "178:  _.clear ();",
          "",
          "[Removed Lines]",
          "174:     if (unlikely (hb_object_is_immutable (this)))",
          "175:       return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/hb-set.cc||src/hb-set.cc": [
          "File: src/hb-set.cc -> src/hb-set.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "183: void",
          "184: hb_set_clear (hb_set_t *set)",
          "185: {",
          "186:   set->clear ();",
          "187: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:   if (unlikely (hb_object_is_immutable (set)))",
          "187:     return;",
          "",
          "---------------"
        ],
        "src/hb-set.hh||src/hb-set.hh": [
          "File: src/hb-set.hh -> src/hb-set.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:   void reset ()",
          "258:   {",
          "261:     successful = true;",
          "262:     clear ();",
          "263:   }",
          "265:   void clear ()",
          "266:   {",
          "270:     if (resize (0))",
          "271:       population = 0;",
          "272:   }",
          "",
          "[Removed Lines]",
          "259:     if (unlikely (hb_object_is_immutable (this)))",
          "260:       return;",
          "267:     if (unlikely (hb_object_is_immutable (this)))",
          "268:       return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}