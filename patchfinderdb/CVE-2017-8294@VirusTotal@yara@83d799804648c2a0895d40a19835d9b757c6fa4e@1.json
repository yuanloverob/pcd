{
  "cve_id": "CVE-2017-8294",
  "cve_desc": "libyara/re.c in the regex component in YARA 3.5.0 allows remote attackers to cause a denial of service (out-of-bounds read and application crash) via a crafted rule that is mishandled in the yr_re_exec function.",
  "repo": "VirusTotal/yara",
  "patch_hash": "83d799804648c2a0895d40a19835d9b757c6fa4e",
  "patch_info": {
    "commit_hash": "83d799804648c2a0895d40a19835d9b757c6fa4e",
    "repo": "VirusTotal/yara",
    "commit_url": "https://github.com/VirusTotal/yara/commit/83d799804648c2a0895d40a19835d9b757c6fa4e",
    "files": [
      "libyara/exec.c",
      "libyara/include/yara/re.h",
      "libyara/re.c",
      "libyara/scan.c",
      "tests/test-rules.c"
    ],
    "message": "Fix issue #646 (#648)\n\n* Fix issue #646 and some edge cases with wide regexps using \\b and \\B\n\n* Rename function IS_WORD_CHAR to _yr_re_is_word_char",
    "before_after_code_files": [
      "libyara/exec.c||libyara/exec.c",
      "libyara/include/yara/re.h||libyara/include/yara/re.h",
      "libyara/re.c||libyara/re.c",
      "libyara/scan.c||libyara/scan.c",
      "tests/test-rules.c||tests/test-rules.c"
    ]
  },
  "patch_diff": {
    "libyara/exec.c||libyara/exec.c": [
      "File: libyara/exec.c -> libyara/exec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "850:           (uint8_t*) r2.re->code,",
      "851:           (uint8_t*) r1.ss->c_string,",
      "852:           r1.ss->length,",
      "853:           r2.re->flags | RE_FLAGS_SCAN,",
      "854:           NULL,",
      "855:           NULL) >= 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "853:           0,",
      "",
      "---------------"
    ],
    "libyara/include/yara/re.h||libyara/include/yara/re.h": [
      "File: libyara/include/yara/re.h -> libyara/include/yara/re.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "94: #define RE_FLAGS_NO_CASE                0x20",
      "95: #define RE_FLAGS_SCAN                   0x40",
      "96: #define RE_FLAGS_DOT_ALL                0x80",
      "98: #define RE_FLAGS_GREEDY                0x400",
      "99: #define RE_FLAGS_UNGREEDY              0x800",
      "",
      "[Removed Lines]",
      "97: #define RE_FLAGS_NOT_AT_START          0x100",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "107: typedef uint8_t RE_SPLIT_ID_TYPE;",
      "118: struct RE_NODE",
      "119: {",
      "120:   int type;",
      "",
      "[Removed Lines]",
      "110: #define CHAR_IN_CLASS(chr, cls)  \\",
      "111:     ((cls)[(chr) / 8] & 1 << ((chr) % 8))",
      "114: #define IS_WORD_CHAR(chr) \\",
      "115:     (isalnum(chr) || (chr) == '_')",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "213: int yr_re_exec(",
      "214:     uint8_t* re_code,",
      "215:     uint8_t* input,",
      "217:     int flags,",
      "218:     RE_MATCH_CALLBACK_FUNC callback,",
      "219:     void* callback_args);",
      "",
      "[Removed Lines]",
      "216:     size_t input_size,",
      "",
      "[Added Lines]",
      "207:     size_t input_forwards_size,",
      "208:     size_t input_backwards_size,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "222: int yr_re_fast_exec(",
      "223:     uint8_t* re_code,",
      "224:     uint8_t* input,",
      "226:     int flags,",
      "227:     RE_MATCH_CALLBACK_FUNC callback,",
      "228:     void* callback_args);",
      "",
      "[Removed Lines]",
      "225:     size_t input_size,",
      "",
      "[Added Lines]",
      "217:     size_t input_forwards_size,",
      "218:     size_t input_backwards_size,",
      "",
      "---------------"
    ],
    "libyara/re.c||libyara/re.c": [
      "File: libyara/re.c -> libyara/re.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "140: YR_THREAD_STORAGE_KEY thread_storage_key = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "143: #define CHAR_IN_CLASS(chr, cls)  \\",
      "144:     ((cls)[(chr) / 8] & 1 << ((chr) % 8))",
      "147: int _yr_re_is_word_char(",
      "148:     uint8_t* input,",
      "149:     int character_size)",
      "150: {",
      "151:   int result = ((isalnum(*input) || (*input) == '_'));",
      "153:   if (character_size == 2)",
      "154:     result = result && (*(input + 1) == 0);",
      "156:   return result;",
      "157: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "360:       re->code,",
      "361:       (uint8_t*) target,",
      "362:       strlen(target),",
      "363:       re->flags | RE_FLAGS_SCAN,",
      "364:       NULL,",
      "365:       NULL);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "381:       0,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1828: int yr_re_exec(",
      "1829:     uint8_t* re_code,",
      "1830:     uint8_t* input_data,",
      "1832:     int flags,",
      "1833:     RE_MATCH_CALLBACK_FUNC callback,",
      "1834:     void* callback_args)",
      "",
      "[Removed Lines]",
      "1831:     size_t input_size,",
      "",
      "[Added Lines]",
      "1863:     size_t input_forwards_size,",
      "1864:     size_t input_backwards_size,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1858:   #define ACTION_KILL       2",
      "1859:   #define ACTION_KILL_TAIL  3",
      "1862:       { \\",
      "1863:         action = ACTION_KILL; \\",
      "1864:         break; \\",
      "1868:         case ERROR_INSUFFICIENT_MEMORY: \\",
      "1869:           return -2; \\",
      "1870:         case ERROR_TOO_MANY_RE_FIBERS: \\",
      "1871:           return -4; \\",
      "1874:   if (_yr_re_alloc_storage(&storage) != ERROR_SUCCESS)",
      "1875:     return -2;",
      "",
      "[Removed Lines]",
      "1861:   #define prolog if (bytes_matched >= max_bytes_matched) \\",
      "1865:       }",
      "1867:   #define fail_if_error(e) switch (e) { \\",
      "1872:       }",
      "",
      "[Added Lines]",
      "1894:   #define prolog { \\",
      "1895:       if ((bytes_matched >= max_bytes_matched) || \\",
      "1896:           (character_size == 2 && *(input + 1) != 0)) \\",
      "1900:       } \\",
      "1901:     }",
      "1903:   #define fail_if_error(e) { \\",
      "1904:       switch (e) { \\",
      "1909:       } \\",
      "1910:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1885:   if (flags & RE_FLAGS_BACKWARDS)",
      "1886:   {",
      "1887:     input -= character_size;",
      "1888:     input_incr = -input_incr;",
      "1889:   }",
      "1897:   max_bytes_matched = max_bytes_matched - max_bytes_matched % character_size;",
      "",
      "[Removed Lines]",
      "1891:   max_bytes_matched = (int) yr_min(input_size, RE_SCAN_LIMIT);",
      "",
      "[Added Lines]",
      "1925:     max_bytes_matched = (int) yr_min(input_backwards_size, RE_SCAN_LIMIT);",
      "1929:   else",
      "1930:   {",
      "1931:     max_bytes_matched = (int) yr_min(input_forwards_size, RE_SCAN_LIMIT);",
      "1932:   }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1974:         case RE_OPCODE_WORD_CHAR:",
      "1975:           prolog;",
      "1977:           action = match ? ACTION_NONE : ACTION_KILL;",
      "1978:           fiber->ip += 1;",
      "1979:           break;",
      "1981:         case RE_OPCODE_NON_WORD_CHAR:",
      "1982:           prolog;",
      "1984:           action = match ? ACTION_NONE : ACTION_KILL;",
      "1985:           fiber->ip += 1;",
      "1986:           break;",
      "",
      "[Removed Lines]",
      "1976:           match = IS_WORD_CHAR(*input);",
      "1983:           match = !IS_WORD_CHAR(*input);",
      "",
      "[Added Lines]",
      "2017:           match = _yr_re_is_word_char(input, character_size);",
      "2024:           match = !_yr_re_is_word_char(input, character_size);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2028:         case RE_OPCODE_WORD_BOUNDARY:",
      "2029:         case RE_OPCODE_NON_WORD_BOUNDARY:",
      "2034:             match = TRUE;",
      "2035:           else if (bytes_matched >= max_bytes_matched)",
      "2036:             match = TRUE;",
      "2039:           else",
      "2042:           if (*ip == RE_OPCODE_NON_WORD_BOUNDARY)",
      "2043:             match = !match;",
      "",
      "[Removed Lines]",
      "2031:           if (bytes_matched == 0 &&",
      "2032:               !(flags & RE_FLAGS_NOT_AT_START) &&",
      "2033:               !(flags & RE_FLAGS_BACKWARDS))",
      "2037:           else if (IS_WORD_CHAR(*(input - input_incr)) != IS_WORD_CHAR(*input))",
      "2038:             match = TRUE;",
      "2040:             match = FALSE;",
      "",
      "[Added Lines]",
      "2072:           if (bytes_matched == 0 && input_backwards_size < character_size)",
      "2073:           {",
      "2075:           }",
      "2077:           {",
      "2079:           }",
      "2081:           {",
      "2082:             assert(input <  input_data + input_forwards_size);",
      "2083:             assert(input >= input_data - input_backwards_size);",
      "2085:             assert(input - input_incr <  input_data + input_forwards_size);",
      "2086:             assert(input - input_incr >= input_data - input_backwards_size);",
      "2088:             match = _yr_re_is_word_char(input, character_size) != \\",
      "2089:                     _yr_re_is_word_char(input - input_incr, character_size);",
      "2090:           }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2049:         case RE_OPCODE_MATCH_AT_START:",
      "2050:           if (flags & RE_FLAGS_BACKWARDS)",
      "2052:           else",
      "2054:           action = kill ? ACTION_KILL : ACTION_CONTINUE;",
      "2055:           fiber->ip += 1;",
      "2056:           break;",
      "2058:         case RE_OPCODE_MATCH_AT_END:",
      "2059:           kill = flags & RE_FLAGS_BACKWARDS ||",
      "2061:           action = kill ? ACTION_KILL : ACTION_CONTINUE;",
      "2062:           fiber->ip += 1;",
      "2063:           break;",
      "",
      "[Removed Lines]",
      "2051:             kill = input_size > (size_t) bytes_matched;",
      "2053:             kill = (flags & RE_FLAGS_NOT_AT_START) || (bytes_matched != 0);",
      "2060:                  input_size > (size_t) bytes_matched;",
      "",
      "[Added Lines]",
      "2101:             kill = input_backwards_size > (size_t) bytes_matched;",
      "2103:             kill = input_backwards_size > 0 || (bytes_matched != 0);",
      "2110:                  input_forwards_size > (size_t) bytes_matched;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2134:       }",
      "2135:     }",
      "2144:     input += input_incr;",
      "2145:     bytes_matched += character_size;",
      "",
      "[Removed Lines]",
      "2137:     if (flags & RE_FLAGS_WIDE &&",
      "2138:         bytes_matched < max_bytes_matched &&",
      "2140:     {",
      "2141:       _yr_re_fiber_kill_all(&fibers, &storage->fiber_pool);",
      "2142:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2164: int yr_re_fast_exec(",
      "2165:     uint8_t* code,",
      "2166:     uint8_t* input_data,",
      "2168:     int flags,",
      "2169:     RE_MATCH_CALLBACK_FUNC callback,",
      "2170:     void* callback_args)",
      "",
      "[Removed Lines]",
      "2167:     size_t input_size,",
      "",
      "[Added Lines]",
      "2210:     size_t input_forwards_size,",
      "2211:     size_t input_backwards_size,",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "2187:   int input_incr;",
      "2188:   int sp = 0;",
      "2189:   int bytes_matched;",
      "2192:   input_incr = flags & RE_FLAGS_BACKWARDS ? -1 : 1;",
      "",
      "[Removed Lines]",
      "2190:   int max_bytes_matched = input_size;",
      "",
      "[Added Lines]",
      "2234:   int max_bytes_matched;",
      "2236:   max_bytes_matched = flags & RE_FLAGS_BACKWARDS ?",
      "2237:       input_backwards_size :",
      "2238:       input_forwards_size;",
      "",
      "---------------"
    ],
    "libyara/scan.c||libyara/scan.c": [
      "File: libyara/scan.c -> libyara/scan.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "528: typedef int (*RE_EXEC_FUNC)(",
      "529:     uint8_t* code,",
      "530:     uint8_t* input,",
      "532:     int flags,",
      "533:     RE_MATCH_CALLBACK_FUNC callback,",
      "534:     void* callback_args);",
      "",
      "[Removed Lines]",
      "531:     size_t input_size,",
      "",
      "[Added Lines]",
      "531:     size_t input_forwards_size,",
      "532:     size_t input_backwards_size,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "569:         ac_match->forward_code,",
      "570:         data + offset,",
      "571:         data_size - offset,",
      "573:         NULL,",
      "574:         NULL);",
      "575:   }",
      "",
      "[Removed Lines]",
      "572:         offset > 0 ? flags | RE_FLAGS_NOT_AT_START : flags,",
      "",
      "[Added Lines]",
      "573:         offset,",
      "574:         flags,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "581:         ac_match->forward_code,",
      "582:         data + offset,",
      "583:         data_size - offset,",
      "585:         NULL,",
      "586:         NULL);",
      "587:   }",
      "",
      "[Removed Lines]",
      "584:         offset > 0 ? flags | RE_FLAGS_NOT_AT_START : flags,",
      "",
      "[Added Lines]",
      "586:         offset,",
      "587:         flags,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "616:     backward_matches = exec(",
      "617:         ac_match->backward_code,",
      "618:         data + offset,",
      "619:         offset,",
      "620:         flags | RE_FLAGS_BACKWARDS | RE_FLAGS_EXHAUSTIVE,",
      "621:         _yr_scan_match_callback,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "622:         data_size - offset,",
      "",
      "---------------"
    ],
    "tests/test-rules.c||tests/test-rules.c": [
      "File: tests/test-rules.c -> tests/test-rules.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "901:       \"rule test { strings: $a = /a.{1,2}b/ wide condition: !a == 8 }\",",
      "902:       \"a\\0x\\0x\\0b\\0\");",
      "904:   assert_regexp_syntax_error(\")\");",
      "905:   assert_true_regexp(\"abc\", \"abc\", \"abc\");",
      "906:   assert_false_regexp(\"abc\", \"xbc\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "904:   assert_true_rule_blob(",
      "905:       \"rule test { strings: $a = /\\\\babc/ wide condition: $a }\",",
      "906:       \"a\\0b\\0c\\0\");",
      "908:   assert_true_rule_blob(",
      "909:       \"rule test { strings: $a = /\\\\babc/ wide condition: $a }\",",
      "910:       \"\\0a\\0b\\0c\\0\");",
      "912:   assert_true_rule_blob(",
      "913:       \"rule test { strings: $a = /\\\\babc/ wide condition: $a }\",",
      "914:       \"\\ta\\0b\\0c\\0\");",
      "916:   assert_false_rule_blob(",
      "917:       \"rule test { strings: $a = /\\\\babc/ wide condition: $a }\",",
      "918:       \"x\\0a\\0b\\0c\\0\");",
      "920:   assert_true_rule_blob(",
      "921:       \"rule test { strings: $a = /\\\\babc/ wide condition: $a }\",",
      "922:       \"x\\ta\\0b\\0c\\0\");",
      "924:   assert_true_rule_blob(",
      "925:       \"rule test { strings: $a = /abc\\\\b/ wide condition: $a }\",",
      "926:       \"a\\0b\\0c\\0\");",
      "928:   assert_true_rule_blob(",
      "929:       \"rule test { strings: $a = /abc\\\\b/ wide condition: $a }\",",
      "930:       \"a\\0b\\0c\\0\\0\");",
      "932:   assert_true_rule_blob(",
      "933:       \"rule test { strings: $a = /abc\\\\b/ wide condition: $a }\",",
      "934:       \"a\\0b\\0c\\0\\t\");",
      "936:   assert_false_rule_blob(",
      "937:       \"rule test { strings: $a = /abc\\\\b/ wide condition: $a }\",",
      "938:       \"a\\0b\\0c\\0x\\0\");",
      "940:   assert_true_rule_blob(",
      "941:       \"rule test { strings: $a = /abc\\\\b/ wide condition: $a }\",",
      "942:       \"a\\0b\\0c\\0b\\t\");",
      "944:   assert_false_rule_blob(",
      "945:       \"rule test { strings: $a = /\\\\b/ wide condition: $a }\",",
      "946:       \"abc\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c3a6f1ef45e87828e02c73203a8745041594ae0e",
      "candidate_info": {
        "commit_hash": "c3a6f1ef45e87828e02c73203a8745041594ae0e",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/c3a6f1ef45e87828e02c73203a8745041594ae0e",
        "files": [
          "libyara/arena.c",
          "libyara/exec.c",
          "libyara/object.c",
          "libyara/re.c"
        ],
        "message": "Fix warnings and minor code re-styling",
        "before_after_code_files": [
          "libyara/arena.c||libyara/arena.c",
          "libyara/exec.c||libyara/exec.c",
          "libyara/object.c||libyara/object.c",
          "libyara/re.c||libyara/re.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/exec.c||libyara/exec.c",
            "libyara/re.c||libyara/re.c"
          ],
          "candidate": [
            "libyara/exec.c||libyara/exec.c",
            "libyara/re.c||libyara/re.c"
          ]
        }
      },
      "candidate_diff": {
        "libyara/arena.c||libyara/arena.c": [
          "File: libyara/arena.c -> libyara/arena.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "450:     reloc = page->reloc_list_head;",
          "453:     {",
          "454:       reloc->offset += (uint32_t) big_page->used;",
          "455:       reloc = reloc->next;",
          "",
          "[Removed Lines]",
          "452:     while(reloc != NULL)",
          "",
          "[Added Lines]",
          "453:     while (reloc != NULL)",
          "",
          "---------------"
        ],
        "libyara/exec.c||libyara/exec.c": [
          "File: libyara/exec.c -> libyara/exec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "445:         start = clock();",
          "446:         #endif",
          "449:         break;",
          "451:       case OP_OBJ_LOAD:",
          "",
          "[Removed Lines]",
          "448:         assert(sp == 0);",
          "",
          "[Added Lines]",
          "448:         assert(sp == 0); // at this point the stack should be empty.",
          "",
          "---------------"
        ],
        "libyara/object.c||libyara/object.c": [
          "File: libyara/object.c -> libyara/object.c"
        ],
        "libyara/re.c||libyara/re.c": [
          "File: libyara/re.c -> libyara/re.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "147: int _yr_re_is_word_char(",
          "148:     uint8_t* input,",
          "150: {",
          "151:   int result = ((isalnum(*input) || (*input) == '_'));",
          "",
          "[Removed Lines]",
          "149:     int character_size)",
          "",
          "[Added Lines]",
          "149:     uint8_t character_size)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "968:     FAIL_ON_ERROR(_yr_emit_split(",
          "969:         emit_context,",
          "970:         re_node->greedy ? RE_OPCODE_SPLIT_B : RE_OPCODE_SPLIT_A,",
          "972:         NULL,",
          "973:         &split_offset_addr,",
          "974:         &split_size));",
          "",
          "[Removed Lines]",
          "971:         -branch_size,",
          "",
          "[Added Lines]",
          "971:         -((int16_t) branch_size),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1009:     FAIL_ON_ERROR(_yr_emit_inst_arg_int16(",
          "1010:         emit_context,",
          "1011:         RE_OPCODE_JUMP,",
          "1013:         NULL,",
          "1014:         &jmp_offset_addr,",
          "1015:         &jmp_size));",
          "",
          "[Removed Lines]",
          "1012:         -(branch_size + split_size),",
          "",
          "[Added Lines]",
          "1012:         -((uint16_t)(branch_size + split_size)),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1873:   uint8_t* input;",
          "1874:   uint8_t mask;",
          "1875:   uint8_t value;",
          "1877:   RE_FIBER_LIST fibers;",
          "1878:   RE_THREAD_STORAGE* storage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1876:   uint8_t character_size;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1882:   int bytes_matched;",
          "1883:   int max_bytes_matched;",
          "1884:   int match;",
          "1886:   int input_incr;",
          "1887:   int kill;",
          "1888:   int action;",
          "",
          "[Removed Lines]",
          "1885:   int character_size;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94e68908ae50246ec54560461ef4ea490a9dfa92",
      "candidate_info": {
        "commit_hash": "94e68908ae50246ec54560461ef4ea490a9dfa92",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/94e68908ae50246ec54560461ef4ea490a9dfa92",
        "files": [
          "libyara/re.c"
        ],
        "message": "Make integer conversion explicit to avoid warnings",
        "before_after_code_files": [
          "libyara/re.c||libyara/re.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/re.c||libyara/re.c"
          ],
          "candidate": [
            "libyara/re.c||libyara/re.c"
          ]
        }
      },
      "candidate_diff": {
        "libyara/re.c||libyara/re.c": [
          "File: libyara/re.c -> libyara/re.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2218:   int max_bytes_matched;",
          "2220:   max_bytes_matched = flags & RE_FLAGS_BACKWARDS ?",
          "2224:   input_incr = flags & RE_FLAGS_BACKWARDS ? -1 : 1;",
          "",
          "[Removed Lines]",
          "2221:       input_backwards_size :",
          "2222:       input_forwards_size;",
          "",
          "[Added Lines]",
          "2221:       (int) input_backwards_size :",
          "2222:       (int) input_forwards_size;",
          "",
          "---------------"
        ]
      }
    }
  ]
}