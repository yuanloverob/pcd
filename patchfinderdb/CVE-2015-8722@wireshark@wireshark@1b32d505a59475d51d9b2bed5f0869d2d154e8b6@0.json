{
  "cve_id": "CVE-2015-8722",
  "cve_desc": "epan/dissectors/packet-sctp.c in the SCTP dissector in Wireshark 1.12.x before 1.12.9 and 2.0.x before 2.0.1 does not validate the frame pointer, which allows remote attackers to cause a denial of service (NULL pointer dereference and application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "1b32d505a59475d51d9b2bed5f0869d2d154e8b6",
  "patch_info": {
    "commit_hash": "1b32d505a59475d51d9b2bed5f0869d2d154e8b6",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/1b32d505a59475d51d9b2bed5f0869d2d154e8b6",
    "files": [
      "epan/dissectors/packet-sctp.c"
    ],
    "message": "SCTP: add another NULL dereference check\n\nThis is a follow-up of g2259bf8\n\nChange-Id: I4dfb839fcd016a8d7a7210e6358d230025eb96a3\nReviewed-on: https://code.wireshark.org/review/12171\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-sctp.c||epan/dissectors/packet-sctp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-sctp.c||epan/dissectors/packet-sctp.c": [
      "File: epan/dissectors/packet-sctp.c -> epan/dissectors/packet-sctp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3242:     cur = wmem_list_tail(pinfo->layers);",
      "3243:     retval = dissect_payload(new_tvb, pinfo, tree, ppi);",
      "3244:     cur = wmem_list_frame_next(cur);",
      "3251:       }",
      "3252:     }",
      "3253:     return retval;",
      "",
      "[Removed Lines]",
      "3245:     tmp = wmem_list_frame_data(cur);",
      "3246:     proto_id = GPOINTER_TO_UINT(tmp);",
      "3247:     proto_name = proto_get_protocol_filter_name(proto_id);",
      "3248:     if(strcmp(proto_name, \"data\") != 0){",
      "3249:       if (have_tap_listener(exported_pdu_tap)){",
      "3250:         export_sctp_data_chunk(pinfo,payload_tvb, proto_name);",
      "",
      "[Added Lines]",
      "3245:     if (cur) {",
      "3246:       tmp = wmem_list_frame_data(cur);",
      "3247:       proto_id = GPOINTER_TO_UINT(tmp);",
      "3248:       proto_name = proto_get_protocol_filter_name(proto_id);",
      "3249:       if(strcmp(proto_name, \"data\") != 0){",
      "3250:         if (have_tap_listener(exported_pdu_tap)){",
      "3251:           export_sctp_data_chunk(pinfo,payload_tvb, proto_name);",
      "3252:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a9b4be98e90521e6c741eaf38716b3dc33192e11",
      "candidate_info": {
        "commit_hash": "a9b4be98e90521e6c741eaf38716b3dc33192e11",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/a9b4be98e90521e6c741eaf38716b3dc33192e11",
        "files": [
          "epan/dissectors/packet-sctp.c"
        ],
        "message": "SCTP: add another NULL dereference check\n\nThis is a follow-up of g2259bf8\n\nChange-Id: I4dfb839fcd016a8d7a7210e6358d230025eb96a3\nReviewed-on: https://code.wireshark.org/review/12171\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\n(cherry picked from commit 1b32d505a59475d51d9b2bed5f0869d2d154e8b6)\nReviewed-on: https://code.wireshark.org/review/12172",
        "before_after_code_files": [
          "epan/dissectors/packet-sctp.c||epan/dissectors/packet-sctp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-sctp.c||epan/dissectors/packet-sctp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-sctp.c||epan/dissectors/packet-sctp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-sctp.c||epan/dissectors/packet-sctp.c": [
          "File: epan/dissectors/packet-sctp.c -> epan/dissectors/packet-sctp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3241:     cur = wmem_list_tail(pinfo->layers);",
          "3242:     retval = dissect_payload(new_tvb, pinfo, tree, ppi);",
          "3243:     cur = wmem_list_frame_next(cur);",
          "3250:       }",
          "3251:     }",
          "3252:     return retval;",
          "",
          "[Removed Lines]",
          "3244:     tmp = wmem_list_frame_data(cur);",
          "3245:     proto_id = GPOINTER_TO_UINT(tmp);",
          "3246:     proto_name = proto_get_protocol_filter_name(proto_id);",
          "3247:     if(strcmp(proto_name, \"data\") != 0){",
          "3248:       if (have_tap_listener(exported_pdu_tap)){",
          "3249:         export_sctp_data_chunk(pinfo,payload_tvb, proto_name);",
          "",
          "[Added Lines]",
          "3244:     if (cur) {",
          "3245:       tmp = wmem_list_frame_data(cur);",
          "3246:       proto_id = GPOINTER_TO_UINT(tmp);",
          "3247:       proto_name = proto_get_protocol_filter_name(proto_id);",
          "3248:       if(strcmp(proto_name, \"data\") != 0){",
          "3249:         if (have_tap_listener(exported_pdu_tap)){",
          "3250:           export_sctp_data_chunk(pinfo,payload_tvb, proto_name);",
          "3251:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d52322efb3ab782871312950876803334ec018b9",
      "candidate_info": {
        "commit_hash": "d52322efb3ab782871312950876803334ec018b9",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/d52322efb3ab782871312950876803334ec018b9",
        "files": [
          "epan/dissectors/packet-sctp.c",
          "epan/dissectors/packet-sctp.h",
          "ui/gtk/sctp_chunk_stat.c",
          "ui/gtk/sctp_chunk_stat_dlg.c",
          "ui/gtk/sctp_graph_dlg.c",
          "ui/qt/sctp_graph_arwnd_dialog.cpp",
          "ui/qt/sctp_graph_byte_dialog.cpp",
          "ui/qt/sctp_graph_dialog.cpp",
          "ui/tap-sctp-analysis.c",
          "ui/tap-sctp-analysis.h"
        ],
        "message": "SCTP I-DATA support\n\nChange-Id: I459942b9e3287d500dda517568252d4cb56d3216\nReviewed-on: https://code.wireshark.org/review/10802\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nPetri-Dish: Michael T\u00fcxen <tuexen@wireshark.org>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael T\u00fcxen <tuexen@wireshark.org>",
        "before_after_code_files": [
          "epan/dissectors/packet-sctp.c||epan/dissectors/packet-sctp.c",
          "epan/dissectors/packet-sctp.h||epan/dissectors/packet-sctp.h",
          "ui/gtk/sctp_chunk_stat.c||ui/gtk/sctp_chunk_stat.c",
          "ui/gtk/sctp_chunk_stat_dlg.c||ui/gtk/sctp_chunk_stat_dlg.c",
          "ui/gtk/sctp_graph_dlg.c||ui/gtk/sctp_graph_dlg.c",
          "ui/qt/sctp_graph_arwnd_dialog.cpp||ui/qt/sctp_graph_arwnd_dialog.cpp",
          "ui/qt/sctp_graph_byte_dialog.cpp||ui/qt/sctp_graph_byte_dialog.cpp",
          "ui/qt/sctp_graph_dialog.cpp||ui/qt/sctp_graph_dialog.cpp",
          "ui/tap-sctp-analysis.c||ui/tap-sctp-analysis.c",
          "ui/tap-sctp-analysis.h||ui/tap-sctp-analysis.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-sctp.c||epan/dissectors/packet-sctp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-sctp.c||epan/dissectors/packet-sctp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-sctp.c||epan/dissectors/packet-sctp.c": [
          "File: epan/dissectors/packet-sctp.c -> epan/dissectors/packet-sctp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118: static int hf_data_chunk_stream_id = -1;",
          "119: static int hf_data_chunk_stream_seq_number = -1;",
          "120: static int hf_data_chunk_payload_proto_id = -1;",
          "122: static int hf_data_chunk_e_bit = -1;",
          "123: static int hf_data_chunk_b_bit = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121: static int hf_idata_chunk_reserved = -1;",
          "122: static int hf_idata_chunk_mid = -1;",
          "123: static int hf_idata_chunk_fsn = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323: #define SCTP_SHUTDOWN_COMPLETE_CHUNK_ID 14",
          "324: #define SCTP_AUTH_CHUNK_ID              15",
          "325: #define SCTP_NR_SACK_CHUNK_ID           16",
          "326: #define SCTP_ASCONF_ACK_CHUNK_ID      0x80",
          "327: #define SCTP_PKTDROP_CHUNK_ID         0x81",
          "328: #define SCTP_RE_CONFIG_CHUNK_ID       0x82",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329: #define SCTP_I_DATA_CHUNK_ID          0x40",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "349:   { SCTP_SHUTDOWN_COMPLETE_CHUNK_ID, \"SHUTDOWN_COMPLETE\" },",
          "350:   { SCTP_AUTH_CHUNK_ID,              \"AUTH\" },",
          "351:   { SCTP_NR_SACK_CHUNK_ID,           \"NR-SACK\" },",
          "352:   { SCTP_ASCONF_ACK_CHUNK_ID,        \"ASCONF_ACK\" },",
          "353:   { SCTP_PKTDROP_CHUNK_ID,           \"PKTDROP\" },",
          "354:   { SCTP_RE_CONFIG_CHUNK_ID,         \"RE_CONFIG\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356:   { SCTP_I_DATA_CHUNK_ID,            \"I-DATA\" },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "753: static void",
          "754: sctp_ppi_prompt1(packet_info *pinfo _U_, gchar* result)",
          "755: {",
          "758:     if (ppid == LAST_PPID) {",
          "759:         g_snprintf(result, MAX_DECODE_AS_PROMPT_LEN, \"PPID (none)\");",
          "",
          "[Removed Lines]",
          "756:     guint32 ppid = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_sctp, 0));",
          "",
          "[Added Lines]",
          "761:     guint32 ppid;",
          "762:     void *tmp = p_get_proto_data(pinfo->pool, pinfo, proto_sctp, 0);",
          "764:     ppid = GPOINTER_TO_UINT(tmp);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "765: static void",
          "766: sctp_ppi_prompt2(packet_info *pinfo _U_, gchar* result)",
          "767: {",
          "770:     if (ppid == LAST_PPID) {",
          "771:         g_snprintf(result, MAX_DECODE_AS_PROMPT_LEN, \"PPID (none)\");",
          "",
          "[Removed Lines]",
          "768:     guint32 ppid = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_sctp, 1));",
          "",
          "[Added Lines]",
          "776:     guint32 ppid;",
          "777:     void *tmp = p_get_proto_data(pinfo->pool, pinfo, proto_sctp, 1);",
          "779:     ppid = GPOINTER_TO_UINT(tmp);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "934: static void dissect_error_causes(tvbuff_t *, packet_info *, proto_tree *);",
          "938: static void dissect_sctp_packet(tvbuff_t *, packet_info *, proto_tree *, gboolean);",
          "",
          "[Removed Lines]",
          "936: static gboolean dissect_data_chunk(tvbuff_t*, guint16, packet_info*, proto_tree*, proto_tree*, proto_item*, proto_item*, sctp_half_assoc_t*);",
          "",
          "[Added Lines]",
          "947: static gboolean dissect_data_chunk(tvbuff_t*, guint16, packet_info*, proto_tree*, proto_tree*, proto_item*, proto_item*, sctp_half_assoc_t*, gboolean);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2533: #define DATA_CHUNK_STREAM_ID_LENGTH   2",
          "2534: #define DATA_CHUNK_STREAM_SEQ_NUMBER_LENGTH 2",
          "2535: #define DATA_CHUNK_PAYLOAD_PROTOCOL_ID_LENGTH 4",
          "2537: #define DATA_CHUNK_TSN_OFFSET         (CHUNK_VALUE_OFFSET + 0)",
          "2538: #define DATA_CHUNK_STREAM_ID_OFFSET   (DATA_CHUNK_TSN_OFFSET + DATA_CHUNK_TSN_LENGTH)",
          "2539: #define DATA_CHUNK_STREAM_SEQ_NUMBER_OFFSET (DATA_CHUNK_STREAM_ID_OFFSET + \\",
          "2541: #define DATA_CHUNK_PAYLOAD_PROTOCOL_ID_OFFSET (DATA_CHUNK_STREAM_SEQ_NUMBER_OFFSET + \\",
          "2542:                                                DATA_CHUNK_STREAM_SEQ_NUMBER_LENGTH)",
          "2543: #define DATA_CHUNK_PAYLOAD_OFFSET     (DATA_CHUNK_PAYLOAD_PROTOCOL_ID_OFFSET + \\",
          "2544:                                        DATA_CHUNK_PAYLOAD_PROTOCOL_ID_LENGTH)",
          "2546: #define DATA_CHUNK_HEADER_LENGTH      (CHUNK_HEADER_LENGTH + \\",
          "2547:                                        DATA_CHUNK_TSN_LENGTH + \\",
          "2548:                                        DATA_CHUNK_STREAM_ID_LENGTH + \\",
          "2549:                                        DATA_CHUNK_STREAM_SEQ_NUMBER_LENGTH + \\",
          "2550:                                        DATA_CHUNK_PAYLOAD_PROTOCOL_ID_LENGTH)",
          "2552: #define SCTP_DATA_CHUNK_E_BIT 0x01",
          "2553: #define SCTP_DATA_CHUNK_B_BIT 0x02",
          "",
          "[Removed Lines]",
          "2540:                                              DATA_CHUNK_STREAM_SEQ_NUMBER_LENGTH)",
          "",
          "[Added Lines]",
          "2547: #define I_DATA_CHUNK_RESERVED_LENGTH 2",
          "2548: #define I_DATA_CHUNK_MID_LENGTH 4",
          "2549: #define I_DATA_CHUNK_PAYLOAD_PROTOCOL_ID_LENGTH 4",
          "2550: #define I_DATA_CHUNK_FSN_LENGTH 4",
          "2555:                                              DATA_CHUNK_STREAM_ID_LENGTH)",
          "2560: #define I_DATA_CHUNK_RESERVED_OFFSET  (DATA_CHUNK_STREAM_ID_OFFSET + \\",
          "2561:                                        DATA_CHUNK_STREAM_ID_LENGTH)",
          "2562: #define I_DATA_CHUNK_MID_OFFSET       (I_DATA_CHUNK_RESERVED_OFFSET + \\",
          "2563:                                        I_DATA_CHUNK_RESERVED_LENGTH)",
          "2564: #define I_DATA_CHUNK_PAYLOAD_PROTOCOL_ID_OFFSET (I_DATA_CHUNK_MID_OFFSET + \\",
          "2565:                                                  I_DATA_CHUNK_MID_LENGTH)",
          "2566: #define I_DATA_CHUNK_FSN_OFFSET       (I_DATA_CHUNK_MID_OFFSET + \\",
          "2567:                                        I_DATA_CHUNK_MID_LENGTH)",
          "2568: #define I_DATA_CHUNK_PAYLOAD_OFFSET   (I_DATA_CHUNK_PAYLOAD_PROTOCOL_ID_OFFSET + \\",
          "2569:                                        I_DATA_CHUNK_PAYLOAD_PROTOCOL_ID_LENGTH)",
          "2576: #define I_DATA_CHUNK_HEADER_LENGTH    (CHUNK_HEADER_LENGTH + \\",
          "2577:                                        DATA_CHUNK_TSN_LENGTH + \\",
          "2578:                                        DATA_CHUNK_STREAM_ID_LENGTH + \\",
          "2579:                                        I_DATA_CHUNK_RESERVED_LENGTH + \\",
          "2580:                                        I_DATA_CHUNK_MID_LENGTH +\\",
          "2581:                                        I_DATA_CHUNK_PAYLOAD_PROTOCOL_ID_LENGTH)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2563:   guint16 dport;",
          "2564:   guint32 verification_tag;",
          "2565:   guint16 stream_id;",
          "2567: } frag_key;",
          "",
          "[Removed Lines]",
          "2566:   guint16 stream_seq_num;",
          "",
          "[Added Lines]",
          "2597:   guint32 stream_seq_num;",
          "2598:   guint8 u_bit;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2577:            (key1->dport == key2->dport) &&",
          "2578:            (key1->verification_tag == key2->verification_tag) &&",
          "2579:            (key1->stream_id == key2->stream_id) &&",
          "2581:            ? TRUE : FALSE);",
          "2582: }",
          "",
          "[Removed Lines]",
          "2580:            (key1->stream_seq_num == key2->stream_seq_num)",
          "",
          "[Added Lines]",
          "2612:            (key1->stream_seq_num == key2->stream_seq_num) &&",
          "2613:            (key1->u_bit == key2->u_bit)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2588:   const frag_key *key = (const frag_key *) k;",
          "2590:   return key->sport ^ key->dport ^ key->verification_tag ^",
          "2592: }",
          "",
          "[Removed Lines]",
          "2591:          key->stream_id ^ key->stream_seq_num;",
          "",
          "[Added Lines]",
          "2624:          key->stream_id ^ key->stream_seq_num ^ key->u_bit;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2645: static sctp_frag_msg*",
          "2647: {",
          "2648:   frag_key key;",
          "",
          "[Removed Lines]",
          "2646: find_message(guint16 stream_id, guint16 stream_seq_num)",
          "",
          "[Added Lines]",
          "2679: find_message(guint16 stream_id, guint32 stream_seq_num, guint8 u_bit)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2652:   key.verification_tag = sctp_info.verification_tag;",
          "2653:   key.stream_id = stream_id;",
          "2654:   key.stream_seq_num = stream_seq_num;",
          "2656:   return (sctp_frag_msg *)g_hash_table_lookup(frag_table, &key);",
          "2657: }",
          "2660: static sctp_fragment*",
          "2662: {",
          "2663:   sctp_frag_msg *msg;",
          "2664:   sctp_fragment *next_fragment;",
          "2668:   if (msg) {",
          "2669:     next_fragment = msg->fragments;",
          "",
          "[Removed Lines]",
          "2661: find_fragment(guint32 tsn, guint16 stream_id, guint16 stream_seq_num)",
          "2666:   msg = find_message(stream_id, stream_seq_num);",
          "",
          "[Added Lines]",
          "2688:   key.u_bit = u_bit;",
          "2695: find_fragment(guint32 tsn, guint16 stream_id, guint32 stream_seq_num, guint8 u_bit)",
          "2700:   msg = find_message(stream_id, stream_seq_num, u_bit);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2681: static sctp_fragment *",
          "2682: add_fragment(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 tsn,",
          "2684: {",
          "2685:   sctp_frag_msg *msg;",
          "2686:   sctp_fragment *fragment, *last_fragment;",
          "",
          "[Removed Lines]",
          "2683:              guint16 stream_id, guint16 stream_seq_num, guint8 b_bit, guint8 e_bit)",
          "",
          "[Added Lines]",
          "2717:              guint16 stream_id, guint32 stream_seq_num, guint8 b_bit, guint8 e_bit,",
          "2718:              guint8 u_bit, guint32 ppi, gboolean is_idata)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2692:     return NULL;",
          "2697:   if (!msg) {",
          "2698:     msg = (sctp_frag_msg *)g_malloc (sizeof (sctp_frag_msg));",
          "",
          "[Removed Lines]",
          "2695:   msg = find_message(stream_id, stream_seq_num);",
          "",
          "[Added Lines]",
          "2730:   msg = find_message(stream_id, stream_seq_num, u_bit);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2701:     msg->fragments = NULL;",
          "2702:     msg->messages = NULL;",
          "2703:     msg->next = NULL;",
          "2705:     key = (frag_key *)g_malloc(sizeof (frag_key));",
          "2706:     key->sport = sctp_info.sport;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2739:     if (is_idata)",
          "2740:       if (b_bit)",
          "2741:         msg->ppi = ppi;",
          "2742:       else",
          "2743:         msg->ppi = 0;",
          "2744:     else",
          "2745:       msg->ppi = ppi;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2708:     key->verification_tag = sctp_info.verification_tag;",
          "2709:     key->stream_id = stream_id;",
          "2710:     key->stream_seq_num = stream_seq_num;",
          "2712:     g_hash_table_insert(frag_table, key, msg);",
          "2713:   }",
          "2718:   if (fragment) {",
          "",
          "[Removed Lines]",
          "2716:   fragment = find_fragment(tsn, stream_id, stream_seq_num);",
          "",
          "[Added Lines]",
          "2753:     key->u_bit = u_bit;",
          "2756:   } else {",
          "2757:       if (b_bit)",
          "2758:         msg->ppi = ppi;",
          "2762:   fragment = find_fragment(tsn, stream_id, stream_seq_num, u_bit);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2746:   fragment->frame_num = pinfo->fd->num;",
          "2747:   fragment->tsn = tsn;",
          "2748:   fragment->len = tvb_captured_length(tvb);",
          "2749:   fragment->next = NULL;",
          "2750:   fragment->data = (unsigned char *)g_malloc (fragment->len);",
          "2751:   tvb_memcpy(tvb, fragment->data, 0, fragment->len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2795:   fragment->ppi = msg->ppi;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2826: static tvbuff_t*",
          "2827: fragment_reassembly(tvbuff_t *tvb, sctp_fragment *fragment,",
          "2828:                     packet_info *pinfo, proto_tree *tree, guint16 stream_id,",
          "2830: {",
          "2831:   sctp_frag_msg *msg;",
          "2832:   sctp_complete_msg *message, *last_message;",
          "",
          "[Removed Lines]",
          "2829:                     guint16 stream_seq_num)",
          "",
          "[Added Lines]",
          "2876:                     guint32 stream_seq_num, guint8 u_bit)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2837:   proto_item *item;",
          "2838:   proto_tree *ptree;",
          "2842:   if (!msg) {",
          "",
          "[Removed Lines]",
          "2840:   msg = find_message(stream_id, stream_seq_num);",
          "",
          "[Added Lines]",
          "2887:   msg = find_message(stream_id, stream_seq_num, u_bit);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2867:                              message->len, message->end - message->begin + 1);",
          "2869:       if (message->begin > message->end) {",
          "2871:              frag_i;",
          "2872:              frag_i = frag_i->next) {",
          "",
          "[Removed Lines]",
          "2870:         for (frag_i = find_fragment(message->begin, stream_id, stream_seq_num);",
          "",
          "[Added Lines]",
          "2917:         for (frag_i = find_fragment(message->begin, stream_id, stream_seq_num, u_bit);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2891:           mark_frame_as_depended_upon(pinfo, frag_i->frame_num);",
          "2892:         }",
          "2893:       } else {",
          "2895:              frag_i && frag_i->tsn <= message->end;",
          "2896:              frag_i = frag_i->next) {",
          "",
          "[Removed Lines]",
          "2894:         for (frag_i = find_fragment(message->begin, stream_id, stream_seq_num);",
          "",
          "[Added Lines]",
          "2941:         for (frag_i = find_fragment(message->begin, stream_id, stream_seq_num, u_bit);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3106:                          message->len, message->end - message->begin + 1);",
          "3108:   if (message->begin > message->end) {",
          "3110:          frag_i;",
          "3111:          frag_i = frag_i->next) {",
          "",
          "[Removed Lines]",
          "3109:     for (frag_i = find_fragment(message->begin, stream_id, stream_seq_num);",
          "",
          "[Added Lines]",
          "3156:     for (frag_i = find_fragment(message->begin, stream_id, stream_seq_num, u_bit);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3126:       offset += frag_i->len;",
          "3127:     }",
          "3128:   } else {",
          "3130:          frag_i && frag_i->tsn <= message->end;",
          "3131:          frag_i = frag_i->next) {",
          "",
          "[Removed Lines]",
          "3129:     for (frag_i = find_fragment(message->begin, stream_id, stream_seq_num);",
          "",
          "[Added Lines]",
          "3176:     for (frag_i = find_fragment(message->begin, stream_id, stream_seq_num, u_bit);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3165: static gboolean",
          "3166: dissect_fragmented_payload(tvbuff_t *payload_tvb, packet_info *pinfo, proto_tree *tree,",
          "3167:                            proto_tree *chunk_tree, guint32 tsn, guint32 ppi, guint16 stream_id,",
          "3169: {",
          "3170:   sctp_fragment *fragment;",
          "3171:   tvbuff_t *new_tvb = NULL;",
          "",
          "[Removed Lines]",
          "3168:                            guint16 stream_seq_num, guint8 b_bit, guint8 e_bit)",
          "",
          "[Added Lines]",
          "3215:                            guint32 stream_seq_num, guint8 b_bit, guint8 e_bit, guint8 u_bit, gboolean is_idata)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3177:   if (tvb_reported_length(payload_tvb) > tvb_captured_length(payload_tvb))",
          "3178:     return TRUE;",
          "3183:   if (fragment)",
          "3187:   if (new_tvb){",
          "",
          "[Removed Lines]",
          "3181:   fragment = add_fragment(payload_tvb, pinfo, chunk_tree, tsn, stream_id, stream_seq_num, b_bit, e_bit);",
          "3184:     new_tvb = fragment_reassembly(payload_tvb, fragment, pinfo, chunk_tree, stream_id, stream_seq_num);",
          "",
          "[Added Lines]",
          "3228:   fragment = add_fragment(payload_tvb, pinfo, chunk_tree, tsn, stream_id, stream_seq_num, b_bit, e_bit, u_bit, ppi, is_idata);",
          "3231:     new_tvb = fragment_reassembly(payload_tvb, fragment, pinfo, chunk_tree, stream_id, stream_seq_num, u_bit);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3189:     guint proto_id;",
          "3190:     const gchar *proto_name;",
          "3191:     gboolean retval;",
          "3193:     cur = wmem_list_tail(pinfo->layers);",
          "3194:     retval = dissect_payload(new_tvb, pinfo, tree, ppi);",
          "3195:     cur = wmem_list_frame_next(cur);",
          "3197:     proto_name = proto_get_protocol_filter_name(proto_id);",
          "3198:     if(strcmp(proto_name, \"data\") != 0){",
          "3199:       if (have_tap_listener(exported_pdu_tap)){",
          "",
          "[Removed Lines]",
          "3196:     proto_id = GPOINTER_TO_UINT(wmem_list_frame_data(cur));",
          "",
          "[Added Lines]",
          "3239:     void *tmp;",
          "3244:     tmp = wmem_list_frame_data(cur);",
          "3245:     proto_id = GPOINTER_TO_UINT(tmp);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "3235:                    proto_tree *chunk_tree,",
          "3236:                    proto_item *chunk_item,",
          "3237:                    proto_item *flags_item,",
          "3239: {",
          "3240:   guint number_of_ppid;",
          "3242:   tvbuff_t *payload_tvb;",
          "3243:   proto_tree *flags_tree;",
          "3244:   guint8 e_bit, b_bit, u_bit;",
          "3247:   proto_item *tsn_item = NULL;",
          "3248:   gboolean call_subdissector = FALSE;",
          "3249:   gboolean is_retransmission;",
          "3254:   }",
          "3259:   for(number_of_ppid = 0; number_of_ppid < MAX_NUMBER_OF_PPIDS; number_of_ppid++) {",
          "3261:     if ((ppid == LAST_PPID) || (ppid == payload_proto_id))",
          "3262:       break;",
          "3263:   }",
          "",
          "[Removed Lines]",
          "3238:                    sctp_half_assoc_t *ha)",
          "3241:   guint32 payload_proto_id;",
          "3245:   guint16 stream_id, stream_seq_num = 0;",
          "3246:   guint32 tsn, ppid;",
          "3251:   if (chunk_length <= DATA_CHUNK_HEADER_LENGTH) {",
          "3252:     proto_item_append_text(chunk_item, \", bogus chunk length %u < %u)\", chunk_length, DATA_CHUNK_HEADER_LENGTH);",
          "3253:     return TRUE;",
          "3256:   payload_proto_id  = tvb_get_ntohl(chunk_tvb, DATA_CHUNK_PAYLOAD_PROTOCOL_ID_OFFSET);",
          "3260:     ppid = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_sctp, number_of_ppid));",
          "",
          "[Added Lines]",
          "3287:                    sctp_half_assoc_t *ha,",
          "3288:                    gboolean is_idata)",
          "3291:   volatile guint32 payload_proto_id;",
          "3295:   guint16 stream_id;",
          "3296:   guint32 tsn, ppid, stream_seq_num = 0;",
          "3300:   guint16 header_length;",
          "3301:   guint16 payload_offset;",
          "3303:   if (is_idata) {",
          "3304:     if (chunk_length < I_DATA_CHUNK_HEADER_LENGTH) {",
          "3305:       proto_item_append_text(chunk_item, \", bogus chunk length %u < %u)\", chunk_length, I_DATA_CHUNK_HEADER_LENGTH);",
          "3306:       return TRUE;",
          "3307:     }",
          "3308:     payload_proto_id  = tvb_get_ntohl(chunk_tvb, I_DATA_CHUNK_PAYLOAD_PROTOCOL_ID_OFFSET);",
          "3309:   } else {",
          "3310:     if (chunk_length < DATA_CHUNK_HEADER_LENGTH) {",
          "3311:       proto_item_append_text(chunk_item, \", bogus chunk length %u < %u)\", chunk_length, DATA_CHUNK_HEADER_LENGTH);",
          "3312:       return TRUE;",
          "3313:     }",
          "3314:     payload_proto_id  = tvb_get_ntohl(chunk_tvb, DATA_CHUNK_PAYLOAD_PROTOCOL_ID_OFFSET);",
          "3319:     void *tmp = p_get_proto_data(pinfo->pool, pinfo, proto_sctp, number_of_ppid);",
          "3320:     ppid = GPOINTER_TO_UINT(tmp);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "3267:   e_bit = tvb_get_guint8(chunk_tvb, CHUNK_FLAGS_OFFSET) & SCTP_DATA_CHUNK_E_BIT;",
          "3268:   b_bit = tvb_get_guint8(chunk_tvb, CHUNK_FLAGS_OFFSET) & SCTP_DATA_CHUNK_B_BIT;",
          "3269:   u_bit = tvb_get_guint8(chunk_tvb, CHUNK_FLAGS_OFFSET) & SCTP_DATA_CHUNK_U_BIT;",
          "3272:   tsn = tvb_get_ntohl(chunk_tvb, DATA_CHUNK_TSN_OFFSET);",
          "3274:   if (chunk_tree) {",
          "3276:     flags_tree  = proto_item_add_subtree(flags_item, ett_sctp_data_chunk_flags);",
          "3277:     proto_tree_add_item(flags_tree, hf_data_chunk_e_bit,             chunk_tvb, CHUNK_FLAGS_OFFSET,                    CHUNK_FLAGS_LENGTH,                    ENC_BIG_ENDIAN);",
          "3278:     proto_tree_add_item(flags_tree, hf_data_chunk_b_bit,             chunk_tvb, CHUNK_FLAGS_OFFSET,                    CHUNK_FLAGS_LENGTH,                    ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "3270:   stream_id = tvb_get_ntohs(chunk_tvb, DATA_CHUNK_STREAM_ID_OFFSET);",
          "3271:   stream_seq_num = tvb_get_ntohs(chunk_tvb, DATA_CHUNK_STREAM_SEQ_NUMBER_OFFSET);",
          "3275:     proto_item_set_len(chunk_item, DATA_CHUNK_HEADER_LENGTH);",
          "",
          "[Added Lines]",
          "3333:     if (is_idata)",
          "3334:       proto_item_set_len(chunk_item, I_DATA_CHUNK_HEADER_LENGTH);",
          "3335:     else",
          "3336:       proto_item_set_len(chunk_item, DATA_CHUNK_HEADER_LENGTH);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "3280:     proto_tree_add_item(flags_tree, hf_data_chunk_i_bit,             chunk_tvb, CHUNK_FLAGS_OFFSET,                    CHUNK_FLAGS_LENGTH,                    ENC_BIG_ENDIAN);",
          "3281:     tsn_item = proto_tree_add_item(chunk_tree, hf_data_chunk_tsn,    chunk_tvb, DATA_CHUNK_TSN_OFFSET,                 DATA_CHUNK_TSN_LENGTH,                 ENC_BIG_ENDIAN);",
          "3282:     proto_tree_add_item(chunk_tree, hf_data_chunk_stream_id,         chunk_tvb, DATA_CHUNK_STREAM_ID_OFFSET,           DATA_CHUNK_STREAM_ID_LENGTH,           ENC_BIG_ENDIAN);",
          "3286:     proto_item_append_text(chunk_item, \"(%s, \", (u_bit) ? \"unordered\" : \"ordered\");",
          "3287:     if (b_bit) {",
          "3288:       if (e_bit)",
          "",
          "[Removed Lines]",
          "3283:     proto_tree_add_item(chunk_tree, hf_data_chunk_stream_seq_number, chunk_tvb, DATA_CHUNK_STREAM_SEQ_NUMBER_OFFSET,   DATA_CHUNK_STREAM_SEQ_NUMBER_LENGTH,   ENC_BIG_ENDIAN);",
          "3284:     proto_tree_add_item(chunk_tree, hf_data_chunk_payload_proto_id,  chunk_tvb, DATA_CHUNK_PAYLOAD_PROTOCOL_ID_OFFSET, DATA_CHUNK_PAYLOAD_PROTOCOL_ID_LENGTH, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "3344:     if (is_idata) {",
          "3345:       proto_tree_add_item(chunk_tree, hf_idata_chunk_reserved, chunk_tvb, I_DATA_CHUNK_RESERVED_OFFSET, I_DATA_CHUNK_RESERVED_LENGTH, ENC_BIG_ENDIAN);",
          "3346:       proto_tree_add_item(chunk_tree, hf_idata_chunk_mid, chunk_tvb, I_DATA_CHUNK_MID_OFFSET, I_DATA_CHUNK_MID_LENGTH, ENC_BIG_ENDIAN);",
          "3347:       if (b_bit)",
          "3348:         proto_tree_add_item(chunk_tree, hf_data_chunk_payload_proto_id,  chunk_tvb, I_DATA_CHUNK_PAYLOAD_PROTOCOL_ID_OFFSET, I_DATA_CHUNK_PAYLOAD_PROTOCOL_ID_LENGTH, ENC_BIG_ENDIAN);",
          "3349:       else",
          "3350:         proto_tree_add_item(chunk_tree, hf_idata_chunk_fsn, chunk_tvb, I_DATA_CHUNK_FSN_OFFSET, I_DATA_CHUNK_FSN_LENGTH, ENC_BIG_ENDIAN);",
          "3351:     } else {",
          "3352:       proto_tree_add_item(chunk_tree, hf_data_chunk_stream_seq_number, chunk_tvb, DATA_CHUNK_STREAM_SEQ_NUMBER_OFFSET,   DATA_CHUNK_STREAM_SEQ_NUMBER_LENGTH,   ENC_BIG_ENDIAN);",
          "3353:       proto_tree_add_item(chunk_tree, hf_data_chunk_payload_proto_id,  chunk_tvb, DATA_CHUNK_PAYLOAD_PROTOCOL_ID_OFFSET, DATA_CHUNK_PAYLOAD_PROTOCOL_ID_LENGTH, ENC_BIG_ENDIAN);",
          "3354:     }",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "3296:         proto_item_append_text(chunk_item, \"middle\");",
          "3297:     }",
          "3305:   }",
          "3314:   if (b_bit && e_bit) {",
          "",
          "[Removed Lines]",
          "3299:     proto_item_append_text(chunk_item, \" segment, TSN: %u, SID: %u, SSN: %u, PPID: %u, payload length: %u byte%s)\",",
          "3300:                            tvb_get_ntohl(chunk_tvb, DATA_CHUNK_TSN_OFFSET),",
          "3301:                            tvb_get_ntohs(chunk_tvb, DATA_CHUNK_STREAM_ID_OFFSET),",
          "3302:                            tvb_get_ntohs(chunk_tvb, DATA_CHUNK_STREAM_SEQ_NUMBER_OFFSET),",
          "3303:                            payload_proto_id,",
          "3304:                            chunk_length - DATA_CHUNK_HEADER_LENGTH, plurality(chunk_length - DATA_CHUNK_HEADER_LENGTH, \"\", \"s\"));",
          "3307:   is_retransmission = sctp_tsn(pinfo,  chunk_tvb, tsn_item, ha, tsn);",
          "3309:   payload_tvb = tvb_new_subset(chunk_tvb, DATA_CHUNK_PAYLOAD_OFFSET,",
          "3310:                                MIN(chunk_length - DATA_CHUNK_HEADER_LENGTH, tvb_captured_length_remaining(chunk_tvb, DATA_CHUNK_PAYLOAD_OFFSET)),",
          "3311:                                MIN(chunk_length - DATA_CHUNK_HEADER_LENGTH, tvb_reported_length_remaining(chunk_tvb, DATA_CHUNK_PAYLOAD_OFFSET)));",
          "",
          "[Added Lines]",
          "3368:     if (is_idata) {",
          "3369:       if (b_bit)",
          "3370:         proto_item_append_text(chunk_item, \" segment, TSN: %u, SID: %u, MID: %u, payload length: %u byte%s)\",",
          "3371:                                tvb_get_ntohl(chunk_tvb, DATA_CHUNK_TSN_OFFSET),",
          "3372:                                tvb_get_ntohs(chunk_tvb, DATA_CHUNK_STREAM_ID_OFFSET),",
          "3373:                                tvb_get_ntohl(chunk_tvb, I_DATA_CHUNK_MID_OFFSET),",
          "3374:                                chunk_length - I_DATA_CHUNK_HEADER_LENGTH, plurality(chunk_length - I_DATA_CHUNK_HEADER_LENGTH, \"\", \"s\"));",
          "3375:       else",
          "3376:         proto_item_append_text(chunk_item, \" segment, TSN: %u, SID: %u, MID: %u, FSN: %u, payload length: %u byte%s)\",",
          "3377:                                tvb_get_ntohl(chunk_tvb, DATA_CHUNK_TSN_OFFSET),",
          "3378:                                tvb_get_ntohs(chunk_tvb, DATA_CHUNK_STREAM_ID_OFFSET),",
          "3379:                                tvb_get_ntohl(chunk_tvb, I_DATA_CHUNK_MID_OFFSET),",
          "3380:                                tvb_get_ntohl(chunk_tvb, I_DATA_CHUNK_FSN_OFFSET),",
          "3381:                                chunk_length - I_DATA_CHUNK_HEADER_LENGTH, plurality(chunk_length - I_DATA_CHUNK_HEADER_LENGTH, \"\", \"s\"));",
          "3382:     } else",
          "3383:       proto_item_append_text(chunk_item, \" segment, TSN: %u, SID: %u, SSN: %u, PPID: %u, payload length: %u byte%s)\",",
          "3384:                              tvb_get_ntohl(chunk_tvb, DATA_CHUNK_TSN_OFFSET),",
          "3385:                              tvb_get_ntohs(chunk_tvb, DATA_CHUNK_STREAM_ID_OFFSET),",
          "3386:                              tvb_get_ntohs(chunk_tvb, DATA_CHUNK_STREAM_SEQ_NUMBER_OFFSET),",
          "3387:                              payload_proto_id,",
          "3388:                              chunk_length - DATA_CHUNK_HEADER_LENGTH, plurality(chunk_length - DATA_CHUNK_HEADER_LENGTH, \"\", \"s\"));",
          "3391:   is_retransmission = sctp_tsn(pinfo, chunk_tvb, tsn_item, ha, tsn);",
          "3393:   if (is_idata) {",
          "3394:     header_length = I_DATA_CHUNK_HEADER_LENGTH;",
          "3395:     payload_offset = I_DATA_CHUNK_PAYLOAD_OFFSET;",
          "3396:   } else {",
          "3397:     header_length = DATA_CHUNK_HEADER_LENGTH;",
          "3398:     payload_offset = DATA_CHUNK_PAYLOAD_OFFSET;",
          "3399:   }",
          "3400:   payload_tvb = tvb_new_subset(chunk_tvb, I_DATA_CHUNK_PAYLOAD_OFFSET,",
          "3401:                                  MIN(chunk_length - header_length, tvb_captured_length_remaining(chunk_tvb, payload_offset)),",
          "3402:                                  MIN(chunk_length - header_length, tvb_reported_length_remaining(chunk_tvb, payload_offset)));",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "3343:       wmem_list_frame_t *cur;",
          "3344:       guint proto_id;",
          "3345:       const gchar *proto_name;",
          "3347:       cur = wmem_list_tail(pinfo->layers);",
          "3348:       retval = dissect_payload(payload_tvb, pinfo, tree, payload_proto_id);",
          "3349:       cur = wmem_list_frame_next(cur);",
          "3351:       proto_name = proto_get_protocol_filter_name(proto_id);",
          "3353:         if (have_tap_listener(exported_pdu_tap)){",
          "3354:           export_sctp_data_chunk(pinfo,payload_tvb, proto_name);",
          "3355:         }",
          "",
          "[Removed Lines]",
          "3350:       proto_id = GPOINTER_TO_UINT(wmem_list_frame_data(cur));",
          "3352:       if(strcmp(proto_name, \"data\") != 0){",
          "",
          "[Added Lines]",
          "3437:       void *tmp;",
          "3442:       tmp = wmem_list_frame_data(cur);",
          "3443:       proto_id = GPOINTER_TO_UINT(tmp);",
          "3445:       if (strcmp(proto_name, \"data\") != 0){",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "3379:     DISSECTOR_ASSERT(use_reassembly);",
          "3387:   }",
          "3389: }",
          "",
          "[Removed Lines]",
          "3382:     if (u_bit)",
          "3383:       stream_seq_num = 0;",
          "3386:     return dissect_fragmented_payload(payload_tvb, pinfo, tree, chunk_tree, tsn, payload_proto_id, stream_id, stream_seq_num, b_bit, e_bit);",
          "",
          "[Added Lines]",
          "3474:     stream_id = tvb_get_ntohs(chunk_tvb, DATA_CHUNK_STREAM_ID_OFFSET);",
          "3475:     if (is_idata) {",
          "3477:       stream_seq_num = tvb_get_ntohl(chunk_tvb, I_DATA_CHUNK_MID_OFFSET);",
          "3478:       if (b_bit) {",
          "3479:         tsn = 0;",
          "3480:       } else {",
          "3481:         tsn = tvb_get_ntohl(chunk_tvb, I_DATA_CHUNK_FSN_OFFSET);",
          "3482:         payload_proto_id = 0;",
          "3483:       }",
          "3484:     } else {",
          "3486:       if (u_bit)",
          "3487:         stream_seq_num = 0;",
          "3488:       else",
          "3489:         stream_seq_num = tvb_get_ntohs(chunk_tvb, DATA_CHUNK_STREAM_SEQ_NUMBER_OFFSET);",
          "3490:     }",
          "3492:     return dissect_fragmented_payload(payload_tvb, pinfo, tree, chunk_tree, tsn, payload_proto_id, stream_id, stream_seq_num, b_bit, e_bit, u_bit, is_idata);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "4247:   switch(type) {",
          "4248:   case SCTP_DATA_CHUNK_ID:",
          "4250:     break;",
          "4251:   case SCTP_INIT_CHUNK_ID:",
          "4252:     dissect_init_chunk(chunk_tvb, length, pinfo, chunk_tree, chunk_item);",
          "",
          "[Removed Lines]",
          "4249:     result = dissect_data_chunk(chunk_tvb, length, pinfo, tree, chunk_tree, chunk_item, flags_item, ha);",
          "",
          "[Added Lines]",
          "4355:     result = dissect_data_chunk(chunk_tvb, length, pinfo, tree, chunk_tree, chunk_item, flags_item, ha, FALSE);",
          "4356:     break;",
          "4357:   case SCTP_I_DATA_CHUNK_ID:",
          "4358:     result = dissect_data_chunk(chunk_tvb, length, pinfo, tree, chunk_tree, chunk_item, flags_item, ha, TRUE);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "4655: #if 0",
          "4656:     { &hf_cumulative_tsn_ack,                       { \"Cumulative TSN Ack\",                             \"sctp.cumulative_tsn_ack\",                              FT_UINT32,  BASE_DEC,  NULL,                                           0x0,                                NULL, HFILL } },",
          "4657: #endif",
          "4660:     { &hf_data_chunk_stream_seq_number,             { \"Stream sequence number\",                         \"sctp.data_ssn\",                                        FT_UINT16,  BASE_DEC,  NULL,                                           0x0,                                NULL, HFILL } },",
          "4661:     { &hf_data_chunk_payload_proto_id,              { \"Payload protocol identifier\",                    \"sctp.data_payload_proto_id\",                           FT_UINT32,  BASE_DEC,  VALS(sctp_payload_proto_id_values),             0x0,                                NULL, HFILL } },",
          "4662:     { &hf_data_chunk_e_bit,                         { \"E-Bit\",                                          \"sctp.data_e_bit\",                                      FT_BOOLEAN, 8,         TFS(&sctp_data_chunk_e_bit_value),              SCTP_DATA_CHUNK_E_BIT,              NULL, HFILL } },",
          "4663:     { &hf_data_chunk_b_bit,                         { \"B-Bit\",                                          \"sctp.data_b_bit\",                                      FT_BOOLEAN, 8,         TFS(&sctp_data_chunk_b_bit_value),              SCTP_DATA_CHUNK_B_BIT,              NULL, HFILL } },",
          "4664:     { &hf_data_chunk_u_bit,                         { \"U-Bit\",                                          \"sctp.data_u_bit\",                                      FT_BOOLEAN, 8,         TFS(&sctp_data_chunk_u_bit_value),              SCTP_DATA_CHUNK_U_BIT,              NULL, HFILL } },",
          "",
          "[Removed Lines]",
          "4658:     { &hf_data_chunk_tsn,                           { \"TSN\",                                            \"sctp.data_tsn\",                                        FT_UINT32,  BASE_DEC,  NULL,                                           0x0,                                NULL, HFILL } },",
          "4659:     { &hf_data_chunk_stream_id,                     { \"Stream Identifier\",                              \"sctp.data_sid\",                                        FT_UINT16,  BASE_HEX,  NULL,                                           0x0,                                NULL, HFILL } },",
          "",
          "[Added Lines]",
          "4767:     { &hf_data_chunk_tsn,                           { \"Transmission sequence number\",                   \"sctp.data_tsn\",                                        FT_UINT32,  BASE_DEC,  NULL,                                           0x0,                                NULL, HFILL } },",
          "4768:     { &hf_data_chunk_stream_id,                     { \"Stream identifier\",                              \"sctp.data_sid\",                                        FT_UINT16,  BASE_HEX,  NULL,                                           0x0,                                NULL, HFILL } },",
          "4771:     { &hf_idata_chunk_reserved,                     { \"Reserved\",                                       \"sctp.data_reserved\",                                   FT_UINT16,  BASE_DEC,  NULL,                                           0x0,                                NULL, HFILL } },",
          "4772:     { &hf_idata_chunk_mid,                          { \"Message identifier\",                             \"sctp.data_mid\",                                        FT_UINT32,  BASE_DEC,  NULL,                                           0x0,                                NULL, HFILL } },",
          "4773:     { &hf_idata_chunk_fsn,                          { \"Fragment sequence number\",                       \"sctp.data_fsn\",                                        FT_UINT32,  BASE_DEC,  NULL,                                           0x0,                                NULL, HFILL } },",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-sctp.h||epan/dissectors/packet-sctp.h": [
          "File: epan/dissectors/packet-sctp.h -> epan/dissectors/packet-sctp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   guint32 frame_num;",
          "52:   guint32 tsn;",
          "53:   guint32 len;",
          "54:   unsigned char *data;",
          "55:   struct _sctp_fragment *next;",
          "56: } sctp_fragment;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:   guint32 ppi;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:   sctp_frag_be* ends;",
          "75:   sctp_fragment* fragments;",
          "76:   sctp_complete_msg* messages;",
          "77:   struct _sctp_frag_msg* next;",
          "78: } sctp_frag_msg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:   guint32 ppi;",
          "",
          "---------------"
        ],
        "ui/gtk/sctp_chunk_stat.c||ui/gtk/sctp_chunk_stat.c": [
          "File: ui/gtk/sctp_chunk_stat.c -> ui/gtk/sctp_chunk_stat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:   12, tmp->chunk_count[SCTP_ABORT_CHUNK_ID],",
          "208:   13, tmp->chunk_count[SCTP_ERROR_CHUNK_ID],",
          "209:   14, tmp->chunk_count[SCTP_NR_SACK_CHUNK_ID],",
          "215:   -1",
          "216:   );",
          "217:   wmem_free(NULL, src_addr);",
          "",
          "[Removed Lines]",
          "210:   15, tmp->chunk_count[SCTP_ASCONF_ACK_CHUNK_ID],",
          "211:   16, tmp->chunk_count[SCTP_PKTDROP_CHUNK_ID],",
          "212:   17, tmp->chunk_count[SCTP_FORWARD_TSN_CHUNK_ID],",
          "213:   18, tmp->chunk_count[SCTP_ASCONF_CHUNK_ID],",
          "214:   19, tmp->chunk_count[OTHER_CHUNKS_INDEX],",
          "",
          "[Added Lines]",
          "210:   15, tmp->chunk_count[SCTP_I_DATA_CHUNK_ID],",
          "211:   16, tmp->chunk_count[SCTP_ASCONF_ACK_CHUNK_ID],",
          "212:   17, tmp->chunk_count[SCTP_PKTDROP_CHUNK_ID],",
          "213:   18, tmp->chunk_count[SCTP_FORWARD_TSN_CHUNK_ID],",
          "214:   19, tmp->chunk_count[SCTP_ASCONF_CHUNK_ID],",
          "215:   20, tmp->chunk_count[OTHER_CHUNKS_INDEX],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "250:  {G_TYPE_UINT, TAP_ALIGN_RIGHT,  \"ABORT\" },",
          "251:  {G_TYPE_UINT, TAP_ALIGN_RIGHT,  \"ERROR\" },",
          "252:  {G_TYPE_UINT, TAP_ALIGN_RIGHT,  \"NR-SACK\" },",
          "253:  {G_TYPE_UINT, TAP_ALIGN_RIGHT,  \"ASCONF-ACK\" },",
          "254:  {G_TYPE_UINT, TAP_ALIGN_RIGHT,  \"PKTDROP\" },",
          "255:  {G_TYPE_UINT, TAP_ALIGN_RIGHT,  \"FORWARD-TSN\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254:  {G_TYPE_UINT, TAP_ALIGN_RIGHT,  \"I-DATA\" },",
          "",
          "---------------"
        ],
        "ui/gtk/sctp_chunk_stat_dlg.c||ui/gtk/sctp_chunk_stat_dlg.c": [
          "File: ui/gtk/sctp_chunk_stat_dlg.c -> ui/gtk/sctp_chunk_stat_dlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     SHUT_COMPLETE = 14,",
          "57:     AUTH          = 15,",
          "58:     NR_SACK       = 16,",
          "59:     ASCONF_ACK    = 0x80,",
          "60:     PKTDROP       = 0x81,",
          "61:     FORWARD_TSN   = 0xC0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:     I_DATA        = 0x40,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:     SHUT_COMPLETE_COLUMN,",
          "82:     AUTH_COLUMN,",
          "83:     NR_SACK_COLUMN,",
          "84:     ASCONF_ACK_COLUMN,",
          "85:     PKTDROP_COLUMN,",
          "86:     FORWARD_TSN_COLUMN,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:     I_DATA_COLUMN,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "353:     renderer = gtk_cell_renderer_text_new ();",
          "354:     column = gtk_tree_view_column_new_with_attributes (\"ASCONF-ACK\", renderer,",
          "355:                 \"text\", ASCONF_ACK_COLUMN,",
          "356:                 NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "357:     column = gtk_tree_view_column_new_with_attributes (\"I-DATA\", renderer,",
          "358:                 \"text\", I_DATA_COLUMN,",
          "359:                 NULL);",
          "360:     gtk_tree_view_column_set_sort_column_id(column, I_DATA_COLUMN);",
          "361:     gtk_tree_view_column_set_resizable(column, TRUE);",
          "362:     gtk_tree_view_column_set_sizing(column, GTK_TREE_VIEW_COLUMN_FIXED);",
          "363:     gtk_tree_view_column_set_min_width(column, 100);",
          "364:     gtk_tree_view_append_column (list_view, column);",
          "367:     renderer = gtk_cell_renderer_text_new ();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "440:         CASE(SHUT_COMPLETE);",
          "441:         CASE(AUTH);",
          "442:         CASE(NR_SACK);",
          "443:         CASE(ASCONF_ACK);",
          "444:         CASE(PKTDROP);",
          "445:         CASE(FORWARD_TSN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457:         CASE(I_DATA);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "494:     }",
          "496:     gtk_list_store_insert_with_values( list_store , &iter, G_MAXINT,",
          "498:          DATA_COLUMN,            sac->addr_count[SCTP_DATA_CHUNK_ID],",
          "499:          INIT_COLUMN,            sac->addr_count[SCTP_INIT_CHUNK_ID],",
          "500:          INIT_ACK_COLUMN,        sac->addr_count[SCTP_INIT_ACK_CHUNK_ID],",
          "",
          "[Removed Lines]",
          "497:          IP_ADDR_COLUMN,         field[0],",
          "",
          "[Added Lines]",
          "512:          IP_ADDR_COLUMN,         field,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "512:          SHUT_COMPLETE_COLUMN,   sac->addr_count[SCTP_SHUTDOWN_COMPLETE_CHUNK_ID],",
          "513:          AUTH_COLUMN,            sac->addr_count[SCTP_AUTH_CHUNK_ID],",
          "514:          NR_SACK_COLUMN,         sac->addr_count[SCTP_NR_SACK_CHUNK_ID],",
          "515:          ASCONF_ACK_COLUMN,      sac->addr_count[SCTP_ASCONF_ACK_CHUNK_ID],",
          "516:          PKTDROP_COLUMN,         sac->addr_count[SCTP_PKTDROP_CHUNK_ID],",
          "517:          FORWARD_TSN_COLUMN,     sac->addr_count[SCTP_FORWARD_TSN_CHUNK_ID],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "530:          I_DATA_COLUMN,          sac->addr_count[SCTP_I_DATA_CHUNK_ID],",
          "",
          "---------------"
        ],
        "ui/gtk/sctp_graph_dlg.c||ui/gtk/sctp_graph_dlg.c": [
          "File: ui/gtk/sctp_graph_dlg.c -> ui/gtk/sctp_graph_dlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "569:   while (tlist)",
          "570:   {",
          "571:    type = ((struct chunk_header *)tlist->data)->type;",
          "573:     tsnumber = g_ntohl(((struct data_chunk_header *)tlist->data)->tsn);",
          "574:    if (tsnumber >= min_tsn && tsnumber <= max_tsn && tsn->secs >= min_secs)",
          "575:    {",
          "",
          "[Removed Lines]",
          "572:    if (type == SCTP_DATA_CHUNK_ID || type == SCTP_FORWARD_TSN_CHUNK_ID)",
          "",
          "[Added Lines]",
          "572:    if (type == SCTP_DATA_CHUNK_ID || type == SCTP_I_DATA_CHUNK_ID || type == SCTP_FORWARD_TSN_CHUNK_ID)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "589: #else",
          "590:      cr = gdk_cairo_create (u_data->io->pixmap);",
          "591: #endif",
          "593:       gdk_cairo_set_source_rgba (cr, &black_color);",
          "594:      else",
          "595:       gdk_cairo_set_source_rgba (cr, &pink_color);",
          "",
          "[Removed Lines]",
          "592:      if (type == SCTP_DATA_CHUNK_ID)",
          "",
          "[Added Lines]",
          "592:      if ((type == SCTP_DATA_CHUNK_ID) || (type == SCTP_I_DATA_CHUNK_ID))",
          "",
          "---------------"
        ],
        "ui/qt/sctp_graph_arwnd_dialog.cpp||ui/qt/sctp_graph_arwnd_dialog.cpp": [
          "File: ui/qt/sctp_graph_arwnd_dialog.cpp -> ui/qt/sctp_graph_arwnd_dialog.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     if (direction == 1) {",
          "78:         listSACK = g_list_last(selected_assoc->sack1);",
          "80:     } else {",
          "81:         listSACK = g_list_last(selected_assoc->sack2);",
          "83:     }",
          "84:     while (listSACK) {",
          "85:         tsn = (tsn_t*) (listSACK->data);",
          "",
          "[Removed Lines]",
          "79:         startArwnd = selected_assoc->arwnd1;",
          "82:         startArwnd = selected_assoc->arwnd2;",
          "",
          "[Added Lines]",
          "79:         startArwnd = selected_assoc->arwnd2;",
          "82:         startArwnd = selected_assoc->arwnd1;",
          "",
          "---------------"
        ],
        "ui/qt/sctp_graph_byte_dialog.cpp||ui/qt/sctp_graph_byte_dialog.cpp": [
          "File: ui/qt/sctp_graph_byte_dialog.cpp -> ui/qt/sctp_graph_byte_dialog.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:         while (tlist)",
          "91:         {",
          "92:             type = ((struct chunk_header *)tlist->data)->type;",
          "94:                 length = g_ntohs(((struct data_chunk_header *)tlist->data)->length);",
          "95:                 sumBytes += length;",
          "96:                 yb.append(sumBytes);",
          "97:                 xb.append(tsn->secs + tsn->usecs/1000000.0);",
          "",
          "[Removed Lines]",
          "93:             if (type == SCTP_DATA_CHUNK_ID) {",
          "",
          "[Added Lines]",
          "93:             if (type == SCTP_DATA_CHUNK_ID || type == SCTP_I_DATA_CHUNK_ID) {",
          "95:                 if (type == SCTP_DATA_CHUNK_ID)",
          "96:                     length -= DATA_CHUNK_HEADER_LENGTH;",
          "97:                 else",
          "98:                     length -= I_DATA_CHUNK_HEADER_LENGTH;",
          "",
          "---------------"
        ],
        "ui/qt/sctp_graph_dialog.cpp||ui/qt/sctp_graph_dialog.cpp": [
          "File: ui/qt/sctp_graph_dialog.cpp -> ui/qt/sctp_graph_dialog.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:         list = g_list_last(selected_assoc->sack1);",
          "87:         min_tsn = selected_assoc->min_tsn1;",
          "88:     } else {",
          "91:     }",
          "92:     while (list) {",
          "93:         sack = (tsn_t*) (list->data);",
          "",
          "[Removed Lines]",
          "89:         list = g_list_last(selected_assoc->sack1);",
          "90:         min_tsn = selected_assoc->min_tsn1;",
          "",
          "[Added Lines]",
          "89:         list = g_list_last(selected_assoc->sack2);",
          "90:         min_tsn = selected_assoc->min_tsn2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "280:         while (tlist)",
          "281:         {",
          "282:             type = ((struct chunk_header *)tlist->data)->type;",
          "284:                 tsnumber = g_ntohl(((struct data_chunk_header *)tlist->data)->tsn);",
          "285:                 yt.append(tsnumber);",
          "286:                 xt.append(tsn->secs + tsn->usecs/1000000.0);",
          "",
          "[Removed Lines]",
          "283:             if (type == SCTP_DATA_CHUNK_ID || type == SCTP_FORWARD_TSN_CHUNK_ID) {",
          "",
          "[Added Lines]",
          "283:             if (type == SCTP_DATA_CHUNK_ID || type == SCTP_I_DATA_CHUNK_ID || type == SCTP_FORWARD_TSN_CHUNK_ID) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "314: void SCTPGraphDialog::drawGraph(int which)",
          "315: {",
          "316:     guint32 maxTSN, minTSN;",
          "318:     gIsSackChunkPresent = false;",
          "319:     gIsNRSackChunkPresent = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317:     gint64 minBound;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "348:     connect(ui->sctpPlot, SIGNAL(plottableClick(QCPAbstractPlottable*,QMouseEvent*)), this, SLOT(graphClicked(QCPAbstractPlottable*, QMouseEvent*)));",
          "350:     QCPRange myXRange(selected_assoc->min_secs, (selected_assoc->max_secs+1));",
          "352:     ui->sctpPlot->xAxis->setRange(myXRange);",
          "353:     ui->sctpPlot->yAxis->setRange(myYRange);",
          "354:     ui->sctpPlot->replot();",
          "",
          "[Removed Lines]",
          "351:     QCPRange myYRange(minTSN, maxTSN);",
          "",
          "[Added Lines]",
          "352:     if (maxTSN - minTSN < 5) {",
          "353:         minBound = 0;",
          "354:     } else {",
          "355:         minBound = minTSN;",
          "356:     }",
          "357:     QCPRange myYRange(minBound, maxTSN);",
          "",
          "---------------"
        ],
        "ui/tap-sctp-analysis.c||ui/tap-sctp-analysis.c": [
          "File: ui/tap-sctp-analysis.c -> ui/tap-sctp-analysis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "478:    if (((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_INIT_CHUNK_ID) ||",
          "479:        ((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_INIT_ACK_CHUNK_ID) ||",
          "480:        ((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_DATA_CHUNK_ID) ||",
          "481:        ((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_SACK_CHUNK_ID) ||",
          "482:        ((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_NR_SACK_CHUNK_ID) ||",
          "483:        ((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_FORWARD_TSN_CHUNK_ID))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481:        ((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_I_DATA_CHUNK_ID) ||",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "507:     sack->secs=tsn->secs   = (guint32)pinfo->rel_ts.secs;",
          "508:     sack->usecs=tsn->usecs = (guint32)pinfo->rel_ts.nsecs/1000;",
          "509:     if (((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_DATA_CHUNK_ID) ||",
          "510:         ((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_SACK_CHUNK_ID) ||",
          "511:         ((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_NR_SACK_CHUNK_ID) ||",
          "512:         ((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_FORWARD_TSN_CHUNK_ID))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "511:         ((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_I_DATA_CHUNK_ID) ||",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "583:     if (((tvb_get_guint8(sctp_info->tvb[0],0)) != SCTP_INIT_CHUNK_ID) &&",
          "584:         ((tvb_get_guint8(sctp_info->tvb[0],0)) != SCTP_INIT_ACK_CHUNK_ID) &&",
          "585:         ((tvb_get_guint8(sctp_info->tvb[0],0)) != SCTP_DATA_CHUNK_ID) &&",
          "586:         ((tvb_get_guint8(sctp_info->tvb[0],0)) != SCTP_SACK_CHUNK_ID) &&",
          "587:         ((tvb_get_guint8(sctp_info->tvb[0],0)) != SCTP_NR_SACK_CHUNK_ID) &&",
          "588:         ((tvb_get_guint8(sctp_info->tvb[0],0)) != SCTP_FORWARD_TSN_CHUNK_ID))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "588:         ((tvb_get_guint8(sctp_info->tvb[0],0)) != SCTP_I_DATA_CHUNK_ID) &&",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "604:      info->ep1_chunk_count[idx]++;",
          "605:      info = add_chunk_count(&tmp_info.src, info, 1, idx);",
          "608:      {",
          "609:       datachunk = TRUE;",
          "611:       info->n_data_chunks++;",
          "612:       info->n_data_bytes+=length;",
          "613:       info->outstream1 = tvb_get_ntohs((sctp_info->tvb)[chunk_number], DATA_CHUNK_STREAM_ID_OFFSET)+1;",
          "",
          "[Removed Lines]",
          "607:      if ((tvb_get_guint8(sctp_info->tvb[chunk_number],0) == SCTP_DATA_CHUNK_ID))",
          "610:       length = tvb_get_ntohs(sctp_info->tvb[chunk_number], CHUNK_LENGTH_OFFSET)-DATA_CHUNK_HEADER_LENGTH;",
          "",
          "[Added Lines]",
          "610:      if ((tvb_get_guint8(sctp_info->tvb[chunk_number],0) == SCTP_DATA_CHUNK_ID) ||",
          "611:       (tvb_get_guint8(sctp_info->tvb[chunk_number],0) == SCTP_I_DATA_CHUNK_ID))",
          "614:       if (tvb_get_guint8(sctp_info->tvb[chunk_number],0) == SCTP_DATA_CHUNK_ID) {",
          "615:        length = tvb_get_ntohs(sctp_info->tvb[chunk_number], CHUNK_LENGTH_OFFSET) - DATA_CHUNK_HEADER_LENGTH;",
          "616:       } else {",
          "617:        length = tvb_get_ntohs(sctp_info->tvb[chunk_number], CHUNK_LENGTH_OFFSET) - I_DATA_CHUNK_HEADER_LENGTH;",
          "618:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "655:       tsn_s->offset   = 0;",
          "656:       tsn_s->framenumber = framenumber;",
          "657:       if (datachunk)",
          "659:       else",
          "660:        tsn_s->length   = length;",
          "661:       if (tsn->secs < info->min_secs)",
          "",
          "[Removed Lines]",
          "658:        tsn_s->length   = length-DATA_CHUNK_HEADER_LENGTH;",
          "",
          "[Added Lines]",
          "666:        if (tvb_get_guint8(sctp_info->tvb[chunk_number],0) == SCTP_DATA_CHUNK_ID) {",
          "667:         tsn_s->length   = length - DATA_CHUNK_HEADER_LENGTH;",
          "668:        } else {",
          "669:         tsn_s->length   = length - I_DATA_CHUNK_HEADER_LENGTH;",
          "670:        }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "781:   if (((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_INIT_CHUNK_ID) ||",
          "782:       ((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_INIT_ACK_CHUNK_ID) ||",
          "783:       ((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_DATA_CHUNK_ID) ||",
          "784:       ((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_SACK_CHUNK_ID) ||",
          "785:       ((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_NR_SACK_CHUNK_ID) ||",
          "786:       ((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_FORWARD_TSN_CHUNK_ID))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "796:       ((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_I_DATA_CHUNK_ID) ||",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "811:    sack->secs=tsn->secs = (guint32)pinfo->rel_ts.secs;",
          "812:    sack->usecs=tsn->usecs = (guint32)pinfo->rel_ts.nsecs/1000;",
          "813:    if (((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_DATA_CHUNK_ID) ||",
          "814:        ((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_SACK_CHUNK_ID) ||",
          "815:        ((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_NR_SACK_CHUNK_ID) ||",
          "816:        ((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_FORWARD_TSN_CHUNK_ID))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "827:        ((tvb_get_guint8(sctp_info->tvb[0],0)) == SCTP_I_DATA_CHUNK_ID) ||",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "932:   {",
          "933:    if (((tvb_get_guint8(sctp_info->tvb[0],0)) != SCTP_INIT_ACK_CHUNK_ID) &&",
          "934:        ((tvb_get_guint8(sctp_info->tvb[0],0)) != SCTP_DATA_CHUNK_ID) &&",
          "935:        ((tvb_get_guint8(sctp_info->tvb[0],0)) != SCTP_SACK_CHUNK_ID) &&",
          "936:        ((tvb_get_guint8(sctp_info->tvb[0],0)) != SCTP_NR_SACK_CHUNK_ID) &&",
          "937:        ((tvb_get_guint8(sctp_info->tvb[0],0)) != SCTP_FORWARD_TSN_CHUNK_ID))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "949:        ((tvb_get_guint8(sctp_info->tvb[0],0)) != SCTP_I_DATA_CHUNK_ID) &&",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "956:      info->ep2_chunk_count[idx]++;",
          "957:     info = add_chunk_count(&tmp_info.src, info,info->direction, idx);",
          "960:      datachunk = TRUE;",
          "962:      forwardchunk = TRUE;",
          "963:     if ((datachunk || forwardchunk) && tsn != NULL)",
          "964:     {",
          "",
          "[Removed Lines]",
          "959:     if (((tvb_get_guint8(sctp_info->tvb[chunk_number],0)) == SCTP_DATA_CHUNK_ID))",
          "961:     if (((tvb_get_guint8(sctp_info->tvb[chunk_number],0)) == SCTP_FORWARD_TSN_CHUNK_ID))",
          "",
          "[Added Lines]",
          "974:     if ((tvb_get_guint8(sctp_info->tvb[chunk_number],0) == SCTP_DATA_CHUNK_ID) ||",
          "975:         (tvb_get_guint8(sctp_info->tvb[chunk_number],0) == SCTP_I_DATA_CHUNK_ID))",
          "977:     if (tvb_get_guint8(sctp_info->tvb[chunk_number],0) == SCTP_FORWARD_TSN_CHUNK_ID)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "969:      {",
          "970:       t_s_n = (guint8 *)g_malloc(16);",
          "971:       tvb_memcpy(sctp_info->tvb[chunk_number], (guint8 *)(t_s_n),0, 16);",
          "973:       info->n_data_chunks++;",
          "974:       info->n_data_bytes+=length;",
          "975:      }",
          "",
          "[Removed Lines]",
          "972:       length=tvb_get_ntohs(sctp_info->tvb[chunk_number], CHUNK_LENGTH_OFFSET)-DATA_CHUNK_HEADER_LENGTH;",
          "",
          "[Added Lines]",
          "988:       if (tvb_get_guint8(sctp_info->tvb[chunk_number],0) == SCTP_DATA_CHUNK_ID) {",
          "989:        length=tvb_get_ntohs(sctp_info->tvb[chunk_number], CHUNK_LENGTH_OFFSET)-DATA_CHUNK_HEADER_LENGTH;",
          "990:       } else {",
          "991:        length = tvb_get_ntohs(sctp_info->tvb[chunk_number], CHUNK_LENGTH_OFFSET) - I_DATA_CHUNK_HEADER_LENGTH;",
          "992:       }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1056:       {",
          "1057:        if (datachunk)",
          "1058:        {",
          "1060:         info->n_data_chunks_ep2++;",
          "1061:         info->n_data_bytes_ep2+=length;",
          "1062:        }",
          "",
          "[Removed Lines]",
          "1059:         length = tvb_get_ntohs(sctp_info->tvb[chunk_number], CHUNK_LENGTH_OFFSET)-DATA_CHUNK_HEADER_LENGTH;",
          "",
          "[Added Lines]",
          "1079:         if (tvb_get_guint8(sctp_info->tvb[chunk_number],0) == SCTP_DATA_CHUNK_ID) {",
          "1080:          length = tvb_get_ntohs(sctp_info->tvb[chunk_number], CHUNK_LENGTH_OFFSET) - DATA_CHUNK_HEADER_LENGTH;",
          "1081:         } else {",
          "1082:          length = tvb_get_ntohs(sctp_info->tvb[chunk_number], CHUNK_LENGTH_OFFSET) - I_DATA_CHUNK_HEADER_LENGTH;",
          "1083:         }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1070:        info->max_tsn2 = tsnumber;",
          "1071:        if (datachunk)",
          "1072:        {",
          "1074:         info->n_data_chunks_ep2++;",
          "1075:         info->n_data_bytes_ep2+=length;",
          "1076:        }",
          "",
          "[Removed Lines]",
          "1073:         length = tvb_get_ntohs(sctp_info->tvb[chunk_number], CHUNK_LENGTH_OFFSET)-DATA_CHUNK_HEADER_LENGTH;",
          "",
          "[Added Lines]",
          "1097:         if (tvb_get_guint8(sctp_info->tvb[chunk_number],0) == SCTP_DATA_CHUNK_ID) {",
          "1098:          length = tvb_get_ntohs(sctp_info->tvb[chunk_number], CHUNK_LENGTH_OFFSET) - DATA_CHUNK_HEADER_LENGTH;",
          "1099:         } else {",
          "1100:          length = tvb_get_ntohs(sctp_info->tvb[chunk_number], CHUNK_LENGTH_OFFSET) - I_DATA_CHUNK_HEADER_LENGTH;",
          "1101:         }",
          "",
          "---------------"
        ],
        "ui/tap-sctp-analysis.h||ui/tap-sctp-analysis.h": [
          "File: ui/tap-sctp-analysis.h -> ui/tap-sctp-analysis.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #define SCTP_SHUTDOWN_COMPLETE_CHUNK_ID 14",
          "57: #define SCTP_AUTH_CHUNK_ID  15",
          "58: #define SCTP_NR_SACK_CHUNK_ID  16",
          "59: #define SCTP_ASCONF_ACK_CHUNK_ID      0x80",
          "60: #define SCTP_PKTDROP_CHUNK_ID       0x81",
          "61: #define SCTP_RE_CONFIG_CHUNK_ID       0x82",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: #define SCTP_I_DATA_CHUNK_ID          0x40",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65: #define SCTP_IETF_EXT        0xFF",
          "67: #define IS_SCTP_CHUNK_TYPE(t) \\",
          "70: #define CHUNK_TYPE_LENGTH       1",
          "71: #define CHUNK_FLAGS_LENGTH       1",
          "",
          "[Removed Lines]",
          "68:  (((t) <= 16) || ((t) == 0xC0) || ((t) == 0xC1) || ((t) == 0x80) || ((t) == 0x81))",
          "",
          "[Added Lines]",
          "69:  (((t) <= 16) || ((t) == 0x40) || ((t) == 0xC0) || ((t) == 0xC1) || ((t) == 0x80) || ((t) == 0x81))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99: #define DATA_CHUNK_STREAM_ID_LENGTH   2",
          "100: #define DATA_CHUNK_STREAM_SEQ_NUMBER_LENGTH 2",
          "101: #define DATA_CHUNK_PAYLOAD_PROTOCOL_ID_LENGTH 4",
          "102: #define DATA_CHUNK_HEADER_LENGTH      (CHUNK_HEADER_LENGTH + \\",
          "103:            DATA_CHUNK_TSN_LENGTH + \\",
          "104:            DATA_CHUNK_STREAM_ID_LENGTH + \\",
          "105:            DATA_CHUNK_STREAM_SEQ_NUMBER_LENGTH + \\",
          "106:            DATA_CHUNK_PAYLOAD_PROTOCOL_ID_LENGTH)",
          "107: #define MAX_ADDRESS_LEN         47",
          "109: #define SCTP_ABORT_CHUNK_T_BIT       0x01",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103: #define I_DATA_CHUNK_RESERVED_LENGTH 2",
          "104: #define I_DATA_CHUNK_MID_LENGTH 4",
          "105: #define I_DATA_CHUNK_PAYLOAD_PROTOCOL_ID_LENGTH 4",
          "106: #define I_DATA_CHUNK_FSN_LENGTH 4",
          "107: #define I_DATA_CHUNK_RESERVED_OFFSET  (DATA_CHUNK_STREAM_ID_OFFSET + \\",
          "108:                                        DATA_CHUNK_STREAM_ID_LENGTH)",
          "109: #define I_DATA_CHUNK_MID_OFFSET       (I_DATA_CHUNK_RESERVED_OFFSET + \\",
          "110:                                        I_DATA_CHUNK_RESERVED_LENGTH)",
          "111: #define I_DATA_CHUNK_PAYLOAD_PROTOCOL_ID_OFFSET (I_DATA_CHUNK_MID_OFFSET + \\",
          "112:                                                  I_DATA_CHUNK_MID_LENGTH)",
          "113: #define I_DATA_CHUNK_FSN_OFFSET       (I_DATA_CHUNK_MID_OFFSET + \\",
          "114:                                        I_DATA_CHUNK_MID_LENGTH)",
          "115: #define I_DATA_CHUNK_PAYLOAD_OFFSET   (I_DATA_CHUNK_PAYLOAD_PROTOCOL_ID_OFFSET + \\",
          "116:                                        I_DATA_CHUNK_PAYLOAD_PROTOCOL_ID_LENGTH)",
          "122: #define I_DATA_CHUNK_HEADER_LENGTH    (CHUNK_HEADER_LENGTH + \\",
          "123:                                        DATA_CHUNK_TSN_LENGTH + \\",
          "124:                                        DATA_CHUNK_STREAM_ID_LENGTH + \\",
          "125:                                        I_DATA_CHUNK_RESERVED_LENGTH + \\",
          "126:                                        I_DATA_CHUNK_MID_LENGTH +\\",
          "127:                                        I_DATA_CHUNK_PAYLOAD_PROTOCOL_ID_LENGTH)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:  { SCTP_CWR_CHUNK_ID,     \"CWR\" },",
          "160:  { SCTP_SHUTDOWN_COMPLETE_CHUNK_ID, \"SHUTDOWN_COMPLETE\" },",
          "161:  { SCTP_AUTH_CHUNK_ID,     \"AUTH\" },",
          "163:  { SCTP_ASCONF_ACK_CHUNK_ID,    \"ASCONF_ACK\" },",
          "164:  { SCTP_PKTDROP_CHUNK_ID,    \"PKTDROP\" },",
          "165:  { SCTP_RE_CONFIG_CHUNK_ID,    \"RE_CONFIG\" },",
          "",
          "[Removed Lines]",
          "162:  { SCTP_NR_SACK_CHUNK_ID,    \"NR-SACK\" },",
          "",
          "[Added Lines]",
          "183:  { SCTP_NR_SACK_CHUNK_ID,    \"NR_SACK\" },",
          "184:  { SCTP_I_DATA_CHUNK_ID,            \"I_DATA\" },",
          "",
          "---------------"
        ]
      }
    }
  ]
}