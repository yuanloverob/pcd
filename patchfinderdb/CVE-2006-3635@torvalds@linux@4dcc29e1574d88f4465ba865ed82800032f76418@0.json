{
  "cve_id": "CVE-2006-3635",
  "cve_desc": "The ia64 subsystem in the Linux kernel before 2.6.26 allows local users to cause a denial of service (stack consumption and system crash) via a crafted application that leverages the mishandling of invalid Register Stack Engine (RSE) state.",
  "repo": "torvalds/linux",
  "patch_hash": "4dcc29e1574d88f4465ba865ed82800032f76418",
  "patch_info": {
    "commit_hash": "4dcc29e1574d88f4465ba865ed82800032f76418",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/4dcc29e1574d88f4465ba865ed82800032f76418",
    "files": [
      "arch/ia64/kernel/ivt.S",
      "arch/ia64/kernel/minstate.h",
      "arch/ia64/kernel/patch.c",
      "arch/ia64/kernel/setup.c",
      "arch/ia64/kernel/vmlinux.lds.S",
      "include/asm-ia64/patch.h",
      "include/asm-ia64/ptrace.h",
      "include/asm-ia64/sections.h"
    ],
    "message": "[IA64] Workaround for RSE issue\n\nProblem: An application violating the architectural rules regarding\noperation dependencies and having specific Register Stack Engine (RSE)\nstate at the time of the violation, may result in an illegal operation\nfault and invalid RSE state.  Such faults may initiate a cascade of\nrepeated illegal operation faults within OS interruption handlers.\nThe specific behavior is OS dependent.\n\nImplication: An application causing an illegal operation fault with\nspecific RSE state may result in a series of illegal operation faults\nand an eventual OS stack overflow condition.\n\nWorkaround: OS interruption handlers that switch to kernel backing\nstore implement a check for invalid RSE state to avoid the series\nof illegal operation faults.\n\nThe core of the workaround is the RSE_WORKAROUND code sequence\ninserted into each invocation of the SAVE_MIN_WITH_COVER and\nSAVE_MIN_WITH_COVER_R19 macros.  This sequence includes hard-coded\nconstants that depend on the number of stacked physical registers\nbeing 96.  The rest of this patch consists of code to disable this\nworkaround should this not be the case (with the presumption that\nif a future Itanium processor increases the number of registers, it\nwould also remove the need for this patch).\n\nMove the start of the RBS up to a mod32 boundary to avoid some\ncorner cases.\n\nThe dispatch_illegal_op_fault code outgrew the spot it was\nsquatting in when built with this patch and CONFIG_VIRT_CPU_ACCOUNTING=y\nMove it out to the end of the ivt.\n\nSigned-off-by: Tony Luck <tony.luck@intel.com>",
    "before_after_code_files": [
      "arch/ia64/kernel/ivt.S||arch/ia64/kernel/ivt.S",
      "arch/ia64/kernel/minstate.h||arch/ia64/kernel/minstate.h",
      "arch/ia64/kernel/patch.c||arch/ia64/kernel/patch.c",
      "arch/ia64/kernel/setup.c||arch/ia64/kernel/setup.c",
      "arch/ia64/kernel/vmlinux.lds.S||arch/ia64/kernel/vmlinux.lds.S",
      "include/asm-ia64/patch.h||include/asm-ia64/patch.h",
      "include/asm-ia64/ptrace.h||include/asm-ia64/ptrace.h",
      "include/asm-ia64/sections.h||include/asm-ia64/sections.h"
    ]
  },
  "patch_diff": {
    "arch/ia64/kernel/ivt.S||arch/ia64/kernel/ivt.S": [
      "File: arch/ia64/kernel/ivt.S -> arch/ia64/kernel/ivt.S",
      "--- Hunk 1 ---",
      "[Context before]",
      "1076:  DBG_FAULT(15)",
      "1077:  FAULT(15)",
      "1121:  .org ia64_ivt+0x4000",
      "",
      "[Removed Lines]",
      "1088: ENTRY(dispatch_illegal_op_fault)",
      "1089:  .prologue",
      "1090:  .body",
      "1091:  SAVE_MIN_WITH_COVER",
      "1092:  ssm psr.ic | PSR_DEFAULT_BITS",
      "1093:  ;;",
      "1094:  srlz.i  // guarantee that interruption collection is on",
      "1095:  ;;",
      "1096: (p15) ssm psr.i // restore psr.i",
      "1097:  adds r3=8,r2 // set up second base pointer for SAVE_REST",
      "1098:  ;;",
      "1099:  alloc r14=ar.pfs,0,0,1,0 // must be first in insn group",
      "1100:  mov out0=ar.ec",
      "1101:  ;;",
      "1102:  SAVE_REST",
      "1103:  PT_REGS_UNWIND_INFO(0)",
      "1104:  ;;",
      "1105:  br.call.sptk.many rp=ia64_illegal_op_fault",
      "1106: .ret0: ;;",
      "1107:  alloc r14=ar.pfs,0,0,3,0 // must be first in insn group",
      "1108:  mov out0=r9",
      "1109:  mov out1=r10",
      "1110:  mov out2=r11",
      "1111:  movl r15=ia64_leave_kernel",
      "1112:  ;;",
      "1113:  mov rp=r15",
      "1114:  mov b6=r8",
      "1115:  ;;",
      "1116:  cmp.ne p6,p0=0,r8",
      "1117: (p6) br.call.dpnt.many b6=b6  // call returns to ia64_leave_kernel",
      "1118:  br.sptk.many ia64_leave_kernel",
      "1119: END(dispatch_illegal_op_fault)",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1715:  DBG_FAULT(67)",
      "1716:  FAULT(67)",
      "1718: #ifdef CONFIG_IA32_SUPPORT",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1685: ENTRY(dispatch_illegal_op_fault)",
      "1686:  .prologue",
      "1687:  .body",
      "1688:  SAVE_MIN_WITH_COVER",
      "1689:  ssm psr.ic | PSR_DEFAULT_BITS",
      "1690:  ;;",
      "1691:  srlz.i  // guarantee that interruption collection is on",
      "1692:  ;;",
      "1693: (p15) ssm psr.i // restore psr.i",
      "1694:  adds r3=8,r2 // set up second base pointer for SAVE_REST",
      "1695:  ;;",
      "1696:  alloc r14=ar.pfs,0,0,1,0 // must be first in insn group",
      "1697:  mov out0=ar.ec",
      "1698:  ;;",
      "1699:  SAVE_REST",
      "1700:  PT_REGS_UNWIND_INFO(0)",
      "1701:  ;;",
      "1702:  br.call.sptk.many rp=ia64_illegal_op_fault",
      "1703: .ret0: ;;",
      "1704:  alloc r14=ar.pfs,0,0,3,0 // must be first in insn group",
      "1705:  mov out0=r9",
      "1706:  mov out1=r10",
      "1707:  mov out2=r11",
      "1708:  movl r15=ia64_leave_kernel",
      "1709:  ;;",
      "1710:  mov rp=r15",
      "1711:  mov b6=r8",
      "1712:  ;;",
      "1713:  cmp.ne p6,p0=0,r8",
      "1714: (p6) br.call.dpnt.many b6=b6  // call returns to ia64_leave_kernel",
      "1715:  br.sptk.many ia64_leave_kernel",
      "1716: END(dispatch_illegal_op_fault)",
      "",
      "---------------"
    ],
    "arch/ia64/kernel/minstate.h||arch/ia64/kernel/minstate.h": [
      "File: arch/ia64/kernel/minstate.h -> arch/ia64/kernel/minstate.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: #define ACCOUNT_SYS_ENTER",
      "16: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: .section \".data.patch.rse\", \"a\"",
      "19: .previous",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "44:  mov r16=IA64_KR(CURRENT); /* M */       \\",
      "45:  mov r27=ar.rsc;   /* M */       \\",
      "46:  mov r20=r1;   /* A */       \\",
      "",
      "[Removed Lines]",
      "43: #define DO_SAVE_MIN(COVER,SAVE_IFS,EXTRA)       \\",
      "",
      "[Added Lines]",
      "46: #define DO_SAVE_MIN(COVER,SAVE_IFS,EXTRA,WORKAROUND)      \\",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "87:  tbit.nz p15,p0=r29,IA64_PSR_I_BIT;       \\",
      "88:  mov r29=b0          \\",
      "89:  ;;           \\",
      "90:  adds r16=PT(R8),r1; /* initialize first base pointer */    \\",
      "91:  adds r17=PT(R9),r1; /* initialize second base pointer */    \\",
      "92: (pKStk) mov r18=r0;  /* make sure r18 isn't NaT */     \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "93:  WORKAROUND;          \\",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "206:  st8 [r25]=r10;       /* ar.ssd */ \\",
      "207:  ;;",
      "",
      "[Removed Lines]",
      "209: #define SAVE_MIN_WITH_COVER DO_SAVE_MIN(cover, mov r30=cr.ifs,)",
      "210: #define SAVE_MIN_WITH_COVER_R19 DO_SAVE_MIN(cover, mov r30=cr.ifs, mov r15=r19)",
      "211: #define SAVE_MIN  DO_SAVE_MIN(     , mov r30=r0, )",
      "",
      "[Added Lines]",
      "213: #define RSE_WORKAROUND    \\",
      "214: (pUStk) extr.u r17=r18,3,6;   \\",
      "215: (pUStk) sub r16=r18,r22;   \\",
      "216: [1:](pKStk) br.cond.sptk.many 1f;  \\",
      "217:  .xdata4 \".data.patch.rse\",1b-.  \\",
      "218:  ;;     \\",
      "219:  cmp.ge p6,p7 = 33,r17;   \\",
      "220:  ;;     \\",
      "221: (p6) mov r17=0x310;    \\",
      "222: (p7) mov r17=0x308;    \\",
      "223:  ;;     \\",
      "224:  cmp.leu p1,p0=r16,r17;   \\",
      "225: (p1) br.cond.sptk.many 1f;   \\",
      "226:  dep.z r17=r26,0,62;   \\",
      "227:  movl r16=2f;    \\",
      "228:  ;;     \\",
      "229:  mov ar.pfs=r17;    \\",
      "230:  dep r27=r0,r27,16,14;   \\",
      "231:  mov b0=r16;    \\",
      "232:  ;;     \\",
      "233:  br.ret.sptk b0;    \\",
      "234:  ;;     \\",
      "235: 2:      \\",
      "236:  mov ar.rsc=r0    \\",
      "237:  ;;     \\",
      "238:  flushrs;    \\",
      "239:  ;;     \\",
      "240:  mov ar.bspstore=r22   \\",
      "241:  ;;     \\",
      "242:  mov r18=ar.bsp;    \\",
      "243:  ;;     \\",
      "244: 1:      \\",
      "245:  .pred.rel \"mutex\", pKStk, pUStk",
      "247: #define SAVE_MIN_WITH_COVER DO_SAVE_MIN(cover, mov r30=cr.ifs, , RSE_WORKAROUND)",
      "248: #define SAVE_MIN_WITH_COVER_R19 DO_SAVE_MIN(cover, mov r30=cr.ifs, mov r15=r19, RSE_WORKAROUND)",
      "249: #define SAVE_MIN   DO_SAVE_MIN(     , mov r30=r0, , )",
      "",
      "---------------"
    ],
    "arch/ia64/kernel/patch.c||arch/ia64/kernel/patch.c": [
      "File: arch/ia64/kernel/patch.c -> arch/ia64/kernel/patch.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "115:  ia64_srlz_i();",
      "116: }",
      "118: void __init",
      "119: ia64_patch_mckinley_e9 (unsigned long start, unsigned long end)",
      "120: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "123: void __init",
      "124: ia64_patch_rse (unsigned long start, unsigned long end)",
      "125: {",
      "126:  s32 *offp = (s32 *) start;",
      "127:  u64 ip, *b;",
      "129:  while (offp < (s32 *) end) {",
      "130:   ip = (u64) offp + *offp;",
      "132:   b = (u64 *)(ip & -16);",
      "133:   b[1] &= ~0xf800000L;",
      "134:   ia64_fc((void *) ip);",
      "135:   ++offp;",
      "136:  }",
      "137:  ia64_sync_i();",
      "138:  ia64_srlz_i();",
      "139: }",
      "",
      "---------------"
    ],
    "arch/ia64/kernel/setup.c||arch/ia64/kernel/setup.c": [
      "File: arch/ia64/kernel/setup.c -> arch/ia64/kernel/setup.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "561:  ia64_sal_init(__va(efi.sal_systab));",
      "563: #ifdef CONFIG_SMP",
      "564:  cpu_physical_id(0) = hard_smp_processor_id();",
      "565: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "563: #ifdef CONFIG_ITANIUM",
      "564:  ia64_patch_rse((u64) __start___rse_patchlist, (u64) __end___rse_patchlist);",
      "565: #else",
      "566:  {",
      "567:   u64 num_phys_stacked;",
      "569:   if (ia64_pal_rse_info(&num_phys_stacked, 0) == 0 && num_phys_stacked > 96)",
      "570:    ia64_patch_rse((u64) __start___rse_patchlist, (u64) __end___rse_patchlist);",
      "571:  }",
      "572: #endif",
      "",
      "---------------"
    ],
    "arch/ia64/kernel/vmlinux.lds.S||arch/ia64/kernel/vmlinux.lds.S": [
      "File: arch/ia64/kernel/vmlinux.lds.S -> arch/ia64/kernel/vmlinux.lds.S",
      "--- Hunk 1 ---",
      "[Context before]",
      "156:    __end___vtop_patchlist = .;",
      "157:  }",
      "159:   .data.patch.mckinley_e9 : AT(ADDR(.data.patch.mckinley_e9) - LOAD_OFFSET)",
      "160:  {",
      "161:    __start___mckinley_e9_bundles = .;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "159:   .data.patch.rse : AT(ADDR(.data.patch.rse) - LOAD_OFFSET)",
      "160:  {",
      "161:    __start___rse_patchlist = .;",
      "163:    __end___rse_patchlist = .;",
      "164:  }",
      "",
      "---------------"
    ],
    "include/asm-ia64/patch.h||include/asm-ia64/patch.h": [
      "File: include/asm-ia64/patch.h -> include/asm-ia64/patch.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: extern void ia64_patch_mckinley_e9 (unsigned long start, unsigned long end);",
      "22: extern void ia64_patch_vtop (unsigned long start, unsigned long end);",
      "23: extern void ia64_patch_phys_stack_reg(unsigned long val);",
      "24: extern void ia64_patch_gate (void);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: extern void ia64_patch_rse (unsigned long start, unsigned long end);",
      "",
      "---------------"
    ],
    "include/asm-ia64/ptrace.h||include/asm-ia64/ptrace.h": [
      "File: include/asm-ia64/ptrace.h -> include/asm-ia64/ptrace.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "76: # define KERNEL_STACK_SIZE_ORDER  0",
      "77: #endif",
      "80: #define IA64_STK_OFFSET   ((1 << KERNEL_STACK_SIZE_ORDER)*PAGE_SIZE)",
      "82: #define KERNEL_STACK_SIZE  IA64_STK_OFFSET",
      "",
      "[Removed Lines]",
      "79: #define IA64_RBS_OFFSET   ((IA64_TASK_SIZE + IA64_THREAD_INFO_SIZE + 15) & ~15)",
      "",
      "[Added Lines]",
      "79: #define IA64_RBS_OFFSET   ((IA64_TASK_SIZE + IA64_THREAD_INFO_SIZE + 31) & ~31)",
      "",
      "---------------"
    ],
    "include/asm-ia64/sections.h||include/asm-ia64/sections.h": [
      "File: include/asm-ia64/sections.h -> include/asm-ia64/sections.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: extern char __per_cpu_start[], __per_cpu_end[], __phys_per_cpu_start[];",
      "12: extern char __start___vtop_patchlist[], __end___vtop_patchlist[];",
      "13: extern char __start___mckinley_e9_bundles[], __end___mckinley_e9_bundles[];",
      "14: extern char __start___phys_stack_reg_patchlist[], __end___phys_stack_reg_patchlist[];",
      "15: extern char __start_gate_section[];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13: extern char __start___rse_patchlist[], __end___rse_patchlist[];",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "02e32e36f42f8ea7ee6060d02f2d69ad5bad6d50",
      "candidate_info": {
        "commit_hash": "02e32e36f42f8ea7ee6060d02f2d69ad5bad6d50",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/02e32e36f42f8ea7ee6060d02f2d69ad5bad6d50",
        "files": [
          "arch/ia64/kernel/minstate.h",
          "arch/ia64/kernel/paravirt_inst.h",
          "include/asm-ia64/native/inst.h"
        ],
        "message": "[IA64] pvops: paravirtualize minstate.h.\n\nparavirtualize minstate.h which are hand written assembly code.\nThey include sensitive or performance critical privileged\ninstructions. So that they are appropriate for paravirtualization.\n\nCc: Keith Owens <kaos@ocs.com.au>\nCc: Akio Takebe <takebe_akio@jp.fujitsu.com>\nSigned-off-by: Yaozu (Eddie) Dong <eddie.dong@intel.com>\nSigned-off-by: Isaku Yamahata <yamahata@valinux.co.jp>\nSigned-off-by: Tony Luck <tony.luck@intel.com>",
        "before_after_code_files": [
          "arch/ia64/kernel/minstate.h||arch/ia64/kernel/minstate.h",
          "arch/ia64/kernel/paravirt_inst.h||arch/ia64/kernel/paravirt_inst.h",
          "include/asm-ia64/native/inst.h||include/asm-ia64/native/inst.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/ia64/kernel/minstate.h||arch/ia64/kernel/minstate.h"
          ],
          "candidate": [
            "arch/ia64/kernel/minstate.h||arch/ia64/kernel/minstate.h"
          ]
        }
      },
      "candidate_diff": {
        "arch/ia64/kernel/minstate.h||arch/ia64/kernel/minstate.h": [
          "File: arch/ia64/kernel/minstate.h -> arch/ia64/kernel/minstate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #include <asm/cache.h>",
          "4: #include \"entry.h\"",
          "6: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include \"paravirt_inst.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:  mov r16=IA64_KR(CURRENT); /* M */       \\",
          "48:  mov r27=ar.rsc;   /* M */       \\",
          "49:  mov r20=r1;   /* A */       \\",
          "50:  mov r25=ar.unat;  /* M */       \\",
          "52:  mov r26=ar.pfs;   /* I */       \\",
          "54:  mov r21=ar.fpsr;  /* M */       \\",
          "56:  ;;           \\",
          "57:  adds r16=IA64_TASK_THREAD_ON_USTACK_OFFSET,r16;      \\",
          "58:  ;;           \\",
          "",
          "[Removed Lines]",
          "46: #define DO_SAVE_MIN(COVER,SAVE_IFS,EXTRA,WORKAROUND)      \\",
          "51:  mov r29=cr.ipsr;  /* M */       \\",
          "53:  mov r28=cr.iip;   /* M */       \\",
          "55:  COVER;    /* B;; (or nothing) */     \\",
          "",
          "[Added Lines]",
          "47: #define IA64_NATIVE_DO_SAVE_MIN(__COVER,SAVE_IFS,EXTRA,WORKAROUND)    \\",
          "52:  MOV_FROM_IPSR(p0,r29);  /* M */       \\",
          "54:  MOV_FROM_IIP(r28);   /* M */      \\",
          "56:  __COVER;    /* B;; (or nothing) */    \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "244: 1:      \\",
          "245:  .pred.rel \"mutex\", pKStk, pUStk",
          "249: #define SAVE_MIN   DO_SAVE_MIN(     , mov r30=r0, , )",
          "",
          "[Removed Lines]",
          "247: #define SAVE_MIN_WITH_COVER DO_SAVE_MIN(cover, mov r30=cr.ifs, , RSE_WORKAROUND)",
          "248: #define SAVE_MIN_WITH_COVER_R19 DO_SAVE_MIN(cover, mov r30=cr.ifs, mov r15=r19, RSE_WORKAROUND)",
          "",
          "[Added Lines]",
          "248: #define SAVE_MIN_WITH_COVER DO_SAVE_MIN(COVER, mov r30=cr.ifs, , RSE_WORKAROUND)",
          "249: #define SAVE_MIN_WITH_COVER_R19 DO_SAVE_MIN(COVER, mov r30=cr.ifs, mov r15=r19, RSE_WORKAROUND)",
          "",
          "---------------"
        ],
        "arch/ia64/kernel/paravirt_inst.h||arch/ia64/kernel/paravirt_inst.h": [
          "File: arch/ia64/kernel/paravirt_inst.h -> arch/ia64/kernel/paravirt_inst.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #ifdef __IA64_ASM_PARAVIRTUALIZED_XEN",
          "24: #include <asm/xen/inst.h>",
          "25: #include <asm/xen/minstate.h>",
          "26: #else",
          "27: #include <asm/native/inst.h>",
          "28: #endif",
          "",
          "---------------"
        ],
        "include/asm-ia64/native/inst.h||include/asm-ia64/native/inst.h": [
          "File: include/asm-ia64/native/inst.h -> include/asm-ia64/native/inst.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #ifdef CONFIG_PARAVIRT_GUEST_ASM_CLOBBER_CHECK",
          "24: # define PARAVIRT_POISON 0xdeadbeefbaadf00d",
          "25: # define CLOBBER(clob)    \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #define DO_SAVE_MIN  IA64_NATIVE_DO_SAVE_MIN",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "498c5170472ff0c03a29d22dbd33225a0be038f4",
      "candidate_info": {
        "commit_hash": "498c5170472ff0c03a29d22dbd33225a0be038f4",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/498c5170472ff0c03a29d22dbd33225a0be038f4",
        "files": [
          "arch/ia64/kernel/ivt.S"
        ],
        "message": "[IA64] pvops: paravirtualize ivt.S\n\nparavirtualize ivt.S which implements fault handler in hand written\nassembly code.\nThey includes sensitive or performance critical privileged instructions.\nSo they need paravirtualization.\n\nCc: Keith Owens <kaos@ocs.com.au>\nCc: tgingold@free.fr\nCc: Akio Takebe <takebe_akio@jp.fujitsu.com>\nSigned-off-by: Yaozu (Eddie) Dong <eddie.dong@intel.com>\nSigned-off-by: Isaku Yamahata <yamahata@valinux.co.jp>\nSigned-off-by: Tony Luck <tony.luck@intel.com>",
        "before_after_code_files": [
          "arch/ia64/kernel/ivt.S||arch/ia64/kernel/ivt.S"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/ia64/kernel/ivt.S||arch/ia64/kernel/ivt.S"
          ],
          "candidate": [
            "arch/ia64/kernel/ivt.S||arch/ia64/kernel/ivt.S"
          ]
        }
      },
      "candidate_diff": {
        "arch/ia64/kernel/ivt.S||arch/ia64/kernel/ivt.S": [
          "File: arch/ia64/kernel/ivt.S -> arch/ia64/kernel/ivt.S",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: #ifdef CONFIG_HUGETLB_PAGE",
          "107:  movl r18=PAGE_SHIFT",
          "109: #endif",
          "110:  ;;",
          "112:  mov r31=pr    // save the predicate registers",
          "113:  mov r19=IA64_KR(PT_BASE)  // get page table base address",
          "114:  shl r21=r16,3    // shift bit 60 into sign bit",
          "",
          "[Removed Lines]",
          "105:  mov r16=cr.ifa    // get address that caused the TLB miss",
          "108:  mov r25=cr.itir",
          "111:  rsm psr.dt    // use physical addressing for data",
          "",
          "[Added Lines]",
          "113:  MOV_FROM_IFA(r16)   // get address that caused the TLB miss",
          "116:  MOV_FROM_ITIR(r25)",
          "119:  RSM_PSR_DT    // use physical addressing for data",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:  dep r21=r19,r20,3,(PAGE_SHIFT-3) // r21=pte_offset(pmd,addr)",
          "169:  ;;",
          "170: (p7) ld8 r18=[r21]    // read *pte",
          "172:  ;;",
          "173: (p7) tbit.z p6,p7=r18,_PAGE_P_BIT  // page present bit cleared?",
          "175:  ;;     // avoid RAW on p7",
          "176: (p7) tbit.nz.unc p10,p11=r19,32  // is it an instruction TLB miss?",
          "177:  dep r23=0,r20,0,PAGE_SHIFT  // clear low bits to get page address",
          "178:  ;;",
          "181: (p6) br.cond.spnt.many page_fault  // handle bad address/page not present (page fault)",
          "184: #ifdef CONFIG_HUGETLB_PAGE",
          "186: #endif",
          "",
          "[Removed Lines]",
          "171:  mov r19=cr.isr    // cr.isr bit 32 tells us if this is an insn miss",
          "174:  mov r22=cr.iha    // get the VHPT address that caused the TLB miss",
          "179: (p10) itc.i r18    // insert the instruction TLB entry",
          "180: (p11) itc.d r18    // insert the data TLB entry",
          "182:  mov cr.ifa=r22",
          "185: (p8) mov cr.itir=r25    // change to default page-size for VHPT",
          "",
          "[Added Lines]",
          "179:  MOV_FROM_ISR(r19)   // cr.isr bit 32 tells us if this is an insn miss",
          "182:  MOV_FROM_IHA(r22)   // get the VHPT address that caused the TLB miss",
          "187:  ITC_I_AND_D(p10, p11, r18, r24)  // insert the instruction TLB entry and",
          "190:  MOV_TO_IFA(r22, r24)",
          "193:  MOV_TO_ITIR(p8, r25, r24)  // change to default page-size for VHPT",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "193:  adds r24=__DIRTY_BITS_NO_ED|_PAGE_PL_0|_PAGE_AR_RW,r23",
          "194:  ;;",
          "196:  ;;",
          "197: #ifdef CONFIG_SMP",
          "",
          "[Removed Lines]",
          "195: (p7) itc.d r24",
          "",
          "[Added Lines]",
          "203:  ITC_D(p7, r24, r25)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "234: #endif",
          "236:  mov pr=r31,-1    // restore predicate registers",
          "238: END(vhpt_miss)",
          "240:  .org ia64_ivt+0x400",
          "",
          "[Removed Lines]",
          "237:  rfi",
          "",
          "[Added Lines]",
          "245:  RFI",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "252:  mov r29=b0    // save b0",
          "253:  mov r31=pr    // save predicates",
          "254: .itlb_fault:",
          "256:  movl r30=1f    // load nested fault continuation point",
          "257:  ;;",
          "258: 1: ld8 r18=[r17]    // read *pte",
          "",
          "[Removed Lines]",
          "251:  mov r16=cr.ifa    // get virtual address",
          "255:  mov r17=cr.iha    // get virtual address of PTE",
          "",
          "[Added Lines]",
          "259:  MOV_FROM_IFA(r16)   // get virtual address",
          "263:  MOV_FROM_IHA(r17)   // get virtual address of PTE",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "261:  tbit.z p6,p0=r18,_PAGE_P_BIT  // page present bit cleared?",
          "262: (p6) br.cond.spnt page_fault",
          "263:  ;;",
          "265:  ;;",
          "266: #ifdef CONFIG_SMP",
          "",
          "[Removed Lines]",
          "264:  itc.i r18",
          "",
          "[Added Lines]",
          "272:  ITC_I(p0, r18, r19)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "278: (p7) ptc.l r16,r20",
          "279: #endif",
          "280:  mov pr=r31,-1",
          "282: END(itlb_miss)",
          "284:  .org ia64_ivt+0x0800",
          "",
          "[Removed Lines]",
          "281:  rfi",
          "",
          "[Added Lines]",
          "289:  RFI",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "296:  mov r29=b0    // save b0",
          "297:  mov r31=pr    // save predicates",
          "298: dtlb_fault:",
          "300:  movl r30=1f    // load nested fault continuation point",
          "301:  ;;",
          "302: 1: ld8 r18=[r17]    // read *pte",
          "",
          "[Removed Lines]",
          "295:  mov r16=cr.ifa    // get virtual address",
          "299:  mov r17=cr.iha    // get virtual address of PTE",
          "",
          "[Added Lines]",
          "303:  MOV_FROM_IFA(r16)   // get virtual address",
          "307:  MOV_FROM_IHA(r17)   // get virtual address of PTE",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "305:  tbit.z p6,p0=r18,_PAGE_P_BIT  // page present bit cleared?",
          "306: (p6) br.cond.spnt page_fault",
          "307:  ;;",
          "309:  ;;",
          "310: #ifdef CONFIG_SMP",
          "",
          "[Removed Lines]",
          "308:  itc.d r18",
          "",
          "[Added Lines]",
          "316:  ITC_D(p0, r18, r19)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "322: (p7) ptc.l r16,r20",
          "323: #endif",
          "324:  mov pr=r31,-1",
          "326: END(dtlb_miss)",
          "328:  .org ia64_ivt+0x0c00",
          "",
          "[Removed Lines]",
          "325:  rfi",
          "",
          "[Added Lines]",
          "333:  RFI",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "331: ENTRY(alt_itlb_miss)",
          "332:  DBG_FAULT(3)",
          "334:  movl r17=PAGE_KERNEL",
          "336:  movl r19=(((1 << IA64_MAX_PHYS_BITS) - 1) & ~0xfff)",
          "337:  mov r31=pr",
          "338:  ;;",
          "",
          "[Removed Lines]",
          "333:  mov r16=cr.ifa  // get address that caused the TLB miss",
          "335:  mov r21=cr.ipsr",
          "",
          "[Added Lines]",
          "341:  MOV_FROM_IFA(r16) // get address that caused the TLB miss",
          "343:  MOV_FROM_IPSR(p0, r21)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "341:  ;;",
          "342:  cmp.gt p8,p0=6,r22   // user mode",
          "343:  ;;",
          "345:  ;;",
          "347: (p8) mov r29=b0    // save b0",
          "348: (p8) br.cond.dptk .itlb_fault",
          "349: #endif",
          "",
          "[Removed Lines]",
          "344: (p8) thash r17=r16",
          "346: (p8) mov cr.iha=r17",
          "",
          "[Added Lines]",
          "352:  THASH(p8, r17, r16, r23)",
          "354:  MOV_TO_IHA(p8, r17, r23)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "358:  or r19=r19,r18  // set bit 4 (uncached) if the access was to region 6",
          "359: (p8) br.cond.spnt page_fault",
          "360:  ;;",
          "362:  mov pr=r31,-1",
          "364: END(alt_itlb_miss)",
          "366:  .org ia64_ivt+0x1000",
          "",
          "[Removed Lines]",
          "361:  itc.i r19  // insert the TLB entry",
          "363:  rfi",
          "",
          "[Added Lines]",
          "369:  ITC_I(p0, r19, r18) // insert the TLB entry",
          "371:  RFI",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "369: ENTRY(alt_dtlb_miss)",
          "370:  DBG_FAULT(4)",
          "372:  movl r17=PAGE_KERNEL",
          "374:  movl r19=(((1 << IA64_MAX_PHYS_BITS) - 1) & ~0xfff)",
          "376:  mov r31=pr",
          "377:  mov r24=PERCPU_ADDR",
          "378:  ;;",
          "",
          "[Removed Lines]",
          "371:  mov r16=cr.ifa  // get address that caused the TLB miss",
          "373:  mov r20=cr.isr",
          "375:  mov r21=cr.ipsr",
          "",
          "[Added Lines]",
          "379:  MOV_FROM_IFA(r16) // get address that caused the TLB miss",
          "381:  MOV_FROM_ISR(r20)",
          "383:  MOV_FROM_IPSR(p0, r21)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "381:  ;;",
          "382:  cmp.gt p8,p0=6,r22   // access to region 0-5",
          "383:  ;;",
          "385:  ;;",
          "387: (p8) mov r29=b0    // save b0",
          "388: (p8) br.cond.dptk dtlb_fault",
          "389: #endif",
          "",
          "[Removed Lines]",
          "384: (p8) thash r17=r16",
          "386: (p8) mov cr.iha=r17",
          "",
          "[Added Lines]",
          "392:  THASH(p8, r17, r16, r25)",
          "394:  MOV_TO_IHA(p8, r17, r25)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "402:  tbit.nz p9,p0=r20,IA64_ISR_NA_BIT // is non-access bit on?",
          "403:  ;;",
          "404: (p10) sub r19=r19,r26",
          "406:  cmp.ne p8,p0=r0,r23",
          "407: (p9) cmp.eq.or.andcm p6,p7=IA64_ISR_CODE_LFETCH,r22 // check isr.code field",
          "408: (p12) dep r17=-1,r17,4,1   // set ma=UC for region 6 addr",
          "",
          "[Removed Lines]",
          "405: (p10) mov cr.itir=r25",
          "",
          "[Added Lines]",
          "413:  MOV_TO_ITIR(p10, r25, r24)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "411:  dep r21=-1,r21,IA64_PSR_ED_BIT,1",
          "412:  ;;",
          "413:  or r19=r19,r17  // insert PTE control bits into r19",
          "415:  ;;",
          "417:  mov pr=r31,-1",
          "419: END(alt_dtlb_miss)",
          "421:  .org ia64_ivt+0x1400",
          "",
          "[Removed Lines]",
          "414: (p6) mov cr.ipsr=r21",
          "416: (p7) itc.d r19  // insert the TLB entry",
          "418:  rfi",
          "",
          "[Added Lines]",
          "422:  MOV_TO_IPSR(p6, r21, r24)",
          "424:  ITC_D(p7, r19, r18) // insert the TLB entry",
          "426:  RFI",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "448:  mov r19=IA64_KR(PT_BASE)  // get the page table base address",
          "449:  shl r21=r16,3    // shift bit 60 into sign bit",
          "451:  ;;",
          "452:  shr.u r17=r16,61   // get the region number into r17",
          "453:  extr.u r18=r18,2,6   // get the faulting page size",
          "",
          "[Removed Lines]",
          "447:  rsm psr.dt    // switch to using physical data addressing",
          "450:  mov r18=cr.itir",
          "",
          "[Added Lines]",
          "455:  RSM_PSR_DT    // switch to using physical data addressing",
          "458:  MOV_FROM_ITIR(r18)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "512: ENTRY(page_fault)",
          "516:  ;;",
          "517:  SAVE_MIN_WITH_COVER",
          "518:  alloc r15=ar.pfs,0,0,3,0",
          "521:  adds r3=8,r2    // set up second base pointer",
          "528:  movl r14=ia64_leave_kernel",
          "529:  ;;",
          "530:  SAVE_REST",
          "",
          "[Removed Lines]",
          "513:  ssm psr.dt",
          "514:  ;;",
          "515:  srlz.i",
          "519:  mov out0=cr.ifa",
          "520:  mov out1=cr.isr",
          "522:  ;;",
          "523:  ssm psr.ic | PSR_DEFAULT_BITS",
          "524:  ;;",
          "525:  srlz.i     // guarantee that interruption collectin is on",
          "526:  ;;",
          "527: (p15) ssm psr.i    // restore psr.i",
          "",
          "[Added Lines]",
          "521:  SSM_PSR_DT_AND_SRLZ_I",
          "525:  MOV_FROM_IFA(out0)",
          "526:  MOV_FROM_ISR(out1)",
          "527:  SSM_PSR_IC_AND_DEFAULT_BITS_AND_SRLZ_I(r14, r3)",
          "529:  SSM_PSR_I(p15, p15, r14)  // restore psr.i",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "560:  movl r30=1f    // load continuation point in case of nested fault",
          "561:  ;;",
          "563:  mov r29=b0    // save b0 in case of nested fault",
          "564:  mov r31=pr    // save pr",
          "565: #ifdef CONFIG_SMP",
          "",
          "[Removed Lines]",
          "559:  mov r16=cr.ifa    // get the address that caused the fault",
          "562:  thash r17=r16    // compute virtual address of L3 PTE",
          "",
          "[Added Lines]",
          "561:  MOV_FROM_IFA(r16)   // get the address that caused the fault",
          "564:  THASH(p0, r17, r16, r18)  // compute virtual address of L3 PTE",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "576:  ;;",
          "577: (p6) cmp.eq p6,p7=r26,r18   // Only compare if page is present",
          "578:  ;;",
          "580:  ;;",
          "",
          "[Removed Lines]",
          "579: (p6) itc.d r25    // install updated PTE",
          "",
          "[Added Lines]",
          "581:  ITC_D(p6, r25, r18)   // install updated PTE",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "602:  itc.d r18    // install updated PTE",
          "603: #endif",
          "604:  mov pr=r31,-1    // restore pr",
          "606: END(dirty_bit)",
          "608:  .org ia64_ivt+0x2400",
          "",
          "[Removed Lines]",
          "605:  rfi",
          "",
          "[Added Lines]",
          "607:  RFI",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "611: ENTRY(iaccess_bit)",
          "612:  DBG_FAULT(9)",
          "615:  movl r30=1f    // load continuation point in case of nested fault",
          "616:  mov r31=pr    // save predicates",
          "617: #ifdef CONFIG_ITANIUM",
          "622:  ;;",
          "624:  tbit.z p6,p0=r17,IA64_PSR_IS_BIT // IA64 instruction set?",
          "625:  ;;",
          "626: (p6) mov r16=r18    // if so, use cr.iip instead of cr.ifa",
          "628:  ;;",
          "630:  mov r29=b0    // save b0 in case of nested fault)",
          "631: #ifdef CONFIG_SMP",
          "632:  mov r28=ar.ccv    // save ar.ccv",
          "",
          "[Removed Lines]",
          "614:  mov r16=cr.ifa    // get the address that caused the fault",
          "621:  mov r17=cr.ipsr",
          "623:  mov r18=cr.iip",
          "629:  thash r17=r16    // compute virtual address of L3 PTE",
          "",
          "[Added Lines]",
          "616:  MOV_FROM_IFA(r16)   // get the address that caused the fault",
          "623:  MOV_FROM_IPSR(p0, r17)",
          "625:  MOV_FROM_IIP(r18)",
          "631:  THASH(p0, r17, r16, r18)  // compute virtual address of L3 PTE",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "642:  ;;",
          "643: (p6) cmp.eq p6,p7=r26,r18   // Only if page present",
          "644:  ;;",
          "646:  ;;",
          "",
          "[Removed Lines]",
          "645: (p6) itc.i r25    // install updated PTE",
          "",
          "[Added Lines]",
          "647:  ITC_I(p6, r25, r26)   // install updated PTE",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "668:  itc.i r18    // install updated PTE",
          "670:  mov pr=r31,-1",
          "672: END(iaccess_bit)",
          "674:  .org ia64_ivt+0x2800",
          "",
          "[Removed Lines]",
          "671:  rfi",
          "",
          "[Added Lines]",
          "673:  RFI",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "677: ENTRY(daccess_bit)",
          "678:  DBG_FAULT(10)",
          "681:  movl r30=1f    // load continuation point in case of nested fault",
          "682:  ;;",
          "684:  mov r31=pr",
          "685:  mov r29=b0    // save b0 in case of nested fault)",
          "686: #ifdef CONFIG_SMP",
          "",
          "[Removed Lines]",
          "680:  mov r16=cr.ifa    // get the address that caused the fault",
          "683:  thash r17=r16    // compute virtual address of L3 PTE",
          "",
          "[Added Lines]",
          "682:  MOV_FROM_IFA(r16)   // get the address that caused the fault",
          "685:  THASH(p0, r17, r16, r18)  // compute virtual address of L3 PTE",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "697:  ;;",
          "698: (p6) cmp.eq p6,p7=r26,r18   // Only if page is present",
          "699:  ;;",
          "",
          "[Removed Lines]",
          "700: (p6) itc.d r25    // install updated PTE",
          "",
          "[Added Lines]",
          "702:  ITC_D(p6, r25, r26)   // install updated PTE",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "721: #endif",
          "722:  mov b0=r29    // restore b0",
          "723:  mov pr=r31,-1",
          "725: END(daccess_bit)",
          "727:  .org ia64_ivt+0x2c00",
          "",
          "[Removed Lines]",
          "724:  rfi",
          "",
          "[Added Lines]",
          "726:  RFI",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "746:  DBG_FAULT(11)",
          "747:  mov.m r16=IA64_KR(CURRENT)  // M2 r16 <- current task (12 cyc)",
          "749:  mov r31=pr    // I0 (2 cyc)",
          "752:  mov.m r27=ar.rsc   // M2 (12 cyc)",
          "753:  mov r18=__IA64_BREAK_SYSCALL  // A",
          "",
          "[Removed Lines]",
          "748:  mov r29=cr.ipsr    // M2 (12 cyc)",
          "751:  mov r17=cr.iim    // M2 (2 cyc)",
          "",
          "[Added Lines]",
          "750:  MOV_FROM_IPSR(p0, r29)   // M2 (12 cyc)",
          "753:  MOV_FROM_IIM(r17)   // M2 (2 cyc)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "767:  nop.m 0",
          "768:  movl r30=sys_call_table   // X",
          "771:  cmp.eq p0,p7=r18,r17   // I0 is this a system call?",
          "772: (p7) br.cond.spnt non_syscall  // B  no ->",
          "",
          "[Removed Lines]",
          "770:  mov r28=cr.iip    // M2 (2 cyc)",
          "",
          "[Added Lines]",
          "772:  MOV_FROM_IIP(r28)   // M2 (2 cyc)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "864: #endif",
          "865:  mov ar.rsc=0x3    // M2   set eager mode, pl 0, LE, loadrs=0",
          "866:  nop 0",
          "868:  ;;",
          "871:  movl r3=ia64_ret_from_syscall  // X",
          "872:  ;;",
          "875:  mov rp=r3    // I0   set the real return addr",
          "876: (p10) br.cond.spnt.many ia64_ret_from_syscall // B    return if bad call-frame or r15 is a NaT",
          "879: (p14) br.call.sptk.many b6=b6   // B    invoke syscall-handker (ignore return addr)",
          "880:  br.cond.spnt.many ia64_trace_syscall // B do syscall-tracing thingamagic",
          "",
          "[Removed Lines]",
          "867:  bsw.1     // B (6 cyc) regs are saved, switch to bank 1",
          "870:  ssm psr.ic | PSR_DEFAULT_BITS  // M2 now it's safe to re-enable intr.-collection",
          "874:  srlz.i     // M0   ensure interruption collection is on",
          "878: (p15) ssm psr.i    // M2   restore psr.i",
          "",
          "[Added Lines]",
          "869:  BSW_1(r2, r14)    // B (6 cyc) regs are saved, switch to bank 1",
          "872:  SSM_PSR_IC_AND_DEFAULT_BITS_AND_SRLZ_I(r3, r16) // M2 now it's safe to re-enable intr.-collection",
          "879:  SSM_PSR_I(p15, p15, r16)  // M2   restore psr.i",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "899:  mov r31=pr  // prepare to save predicates",
          "900:  ;;",
          "901:  SAVE_MIN_WITH_COVER // uses r31; defines r2 and r3",
          "904:  adds r3=8,r2  // set up second base pointer for SAVE_REST",
          "906:  ;;",
          "907:  SAVE_REST",
          "908:  ;;",
          "909:  MCA_RECOVER_RANGE(interrupt)",
          "910:  alloc r14=ar.pfs,0,0,2,0 // must be first in an insn group",
          "912:  add out1=16,sp  // pass pointer to pt_regs as second arg",
          "913:  ;;",
          "914:  srlz.d   // make sure we see the effect of cr.ivr",
          "",
          "[Removed Lines]",
          "902:  ssm psr.ic | PSR_DEFAULT_BITS",
          "903:  ;;",
          "905:  srlz.i   // ensure everybody knows psr.ic is back on",
          "911:  mov out0=cr.ivr  // pass cr.ivr as first arg",
          "",
          "[Added Lines]",
          "903:  SSM_PSR_IC_AND_DEFAULT_BITS_AND_SRLZ_I(r3, r14)",
          "911:  MOV_FROM_IVR(out0, r8) // pass cr.ivr as first arg",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "981: GLOBAL_ENTRY(ia64_syscall_setup)",
          "982: #if PT(B6) != 0",
          "983: # error This code assumes that b6 is the first field in pt_regs.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "981: #ifdef __IA64_ASM_PARAVIRTUALIZED_NATIVE",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1082:  DBG_FAULT(16)",
          "1083:  FAULT(16)",
          "",
          "[Removed Lines]",
          "1085: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "",
          "[Added Lines]",
          "1087: #if defined(CONFIG_VIRT_CPU_ACCOUNTING) && defined(__IA64_ASM_PARAVIRTUALIZED_NATIVE)",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1097:  add r16=TI_AC_STAMP+IA64_TASK_SIZE,r13",
          "1098:  add r17=TI_AC_LEAVE+IA64_TASK_SIZE,r13",
          "",
          "[Removed Lines]",
          "1095: ENTRY(account_sys_enter)",
          "",
          "[Added Lines]",
          "1097: GLOBAL_ENTRY(account_sys_enter)",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1136:  alloc r14=ar.pfs,0,0,2,0",
          "1138:  add out1=16,sp",
          "1139:  adds r3=8,r2   // set up second base pointer for SAVE_REST",
          "1146:  movl r15=ia64_leave_kernel",
          "1147:  ;;",
          "1148:  SAVE_REST",
          "",
          "[Removed Lines]",
          "1137:  mov out0=cr.iim",
          "1141:  ssm psr.ic | PSR_DEFAULT_BITS",
          "1142:  ;;",
          "1143:  srlz.i    // guarantee that interruption collection is on",
          "1144:  ;;",
          "1145: (p15) ssm psr.i   // restore psr.i",
          "",
          "[Added Lines]",
          "1139:  MOV_FROM_IIM(out0)",
          "1143:  SSM_PSR_IC_AND_DEFAULT_BITS_AND_SRLZ_I(r15, r24)",
          "1145:  SSM_PSR_I(p15, p15, r15) // restore psr.i",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1168:  SAVE_MIN_WITH_COVER",
          "1169:  ;;",
          "1170:  alloc r14=ar.pfs,0,0,2,0  // now it's safe (must be first in insn group!)",
          "1172:  adds out1=16,sp",
          "1179:  adds r3=8,r2    // set up second base pointer",
          "1180:  ;;",
          "1181:  SAVE_REST",
          "",
          "[Removed Lines]",
          "1171:  mov out0=cr.ifa",
          "1174:  ssm psr.ic | PSR_DEFAULT_BITS",
          "1175:  ;;",
          "1176:  srlz.i     // guarantee that interruption collection is on",
          "1177:  ;;",
          "1178: (p15) ssm psr.i    // restore psr.i",
          "",
          "[Added Lines]",
          "1171:  MOV_FROM_IFA(out0)",
          "1174:  SSM_PSR_IC_AND_DEFAULT_BITS_AND_SRLZ_I(r3, r24)",
          "1176:  SSM_PSR_I(p15, p15, r3)   // restore psr.i",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1208:  SAVE_MIN_WITH_COVER_R19",
          "1209:  alloc r14=ar.pfs,0,0,5,0",
          "1215:  ;;",
          "1219:  ;;",
          "1221:  adds r3=8,r2    // set up second base pointer for SAVE_REST",
          "1222:  ;;",
          "1223:  SAVE_REST",
          "",
          "[Removed Lines]",
          "1210:  mov out0=r15",
          "1211:  mov out1=cr.isr",
          "1212:  mov out2=cr.ifa",
          "1213:  mov out3=cr.iim",
          "1214:  mov out4=cr.itir",
          "1216:  ssm psr.ic | PSR_DEFAULT_BITS",
          "1217:  ;;",
          "1218:  srlz.i     // guarantee that interruption collection is on",
          "1220: (p15) ssm psr.i    // restore psr.i",
          "",
          "[Added Lines]",
          "1208:  MOV_FROM_ISR(out1)",
          "1209:  MOV_FROM_IFA(out2)",
          "1210:  MOV_FROM_IIM(out3)",
          "1211:  MOV_FROM_ITIR(out4)",
          "1213:  SSM_PSR_IC_AND_DEFAULT_BITS_AND_SRLZ_I(r3, out0)",
          "1215:  mov out0=r15",
          "1217:  SSM_PSR_I(p15, p15, r3)   // restore psr.i",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1237: ENTRY(page_not_present)",
          "1238:  DBG_FAULT(20)",
          "",
          "[Removed Lines]",
          "1239:  mov r16=cr.ifa",
          "1240:  rsm psr.dt",
          "",
          "[Added Lines]",
          "1236:  MOV_FROM_IFA(r16)",
          "1237:  RSM_PSR_DT",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1257: ENTRY(key_permission)",
          "1258:  DBG_FAULT(21)",
          "1261:  mov r31=pr",
          "1262:  ;;",
          "1263:  srlz.d",
          "",
          "[Removed Lines]",
          "1259:  mov r16=cr.ifa",
          "1260:  rsm psr.dt",
          "",
          "[Added Lines]",
          "1256:  MOV_FROM_IFA(r16)",
          "1257:  RSM_PSR_DT",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1270: ENTRY(iaccess_rights)",
          "1271:  DBG_FAULT(22)",
          "1274:  mov r31=pr",
          "1275:  ;;",
          "1276:  srlz.d",
          "",
          "[Removed Lines]",
          "1272:  mov r16=cr.ifa",
          "1273:  rsm psr.dt",
          "",
          "[Added Lines]",
          "1269:  MOV_FROM_IFA(r16)",
          "1270:  RSM_PSR_DT",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1283: ENTRY(daccess_rights)",
          "1284:  DBG_FAULT(23)",
          "1287:  mov r31=pr",
          "1288:  ;;",
          "1289:  srlz.d",
          "",
          "[Removed Lines]",
          "1285:  mov r16=cr.ifa",
          "1286:  rsm psr.dt",
          "",
          "[Added Lines]",
          "1282:  MOV_FROM_IFA(r16)",
          "1283:  RSM_PSR_DT",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1296: ENTRY(general_exception)",
          "1297:  DBG_FAULT(24)",
          "1299:  mov r31=pr",
          "1300:  ;;",
          "1301:  cmp4.eq p6,p0=0,r16",
          "",
          "[Removed Lines]",
          "1298:  mov r16=cr.isr",
          "",
          "[Added Lines]",
          "1295:  MOV_FROM_ISR(r16)",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1324: ENTRY(nat_consumption)",
          "1325:  DBG_FAULT(26)",
          "1329:  mov r31=pr    // save PR",
          "1330:  ;;",
          "1331:  and r18=0xf,r17    // r18 = cr.ipsr.code{3:0}",
          "",
          "[Removed Lines]",
          "1327:  mov r16=cr.ipsr",
          "1328:  mov r17=cr.isr",
          "",
          "[Added Lines]",
          "1324:  MOV_FROM_IPSR(p0, r16)",
          "1325:  MOV_FROM_ISR(r17)",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1335:  dep r16=-1,r16,IA64_PSR_ED_BIT,1",
          "1336: (p6) br.cond.spnt 1f  // branch if (cr.ispr.na == 0 || cr.ipsr.code{3:0} != LFETCH)",
          "1337:  ;;",
          "1339:  mov pr=r31,-1",
          "1340:  ;;",
          "1343: 1: mov pr=r31,-1",
          "1344:  ;;",
          "",
          "[Removed Lines]",
          "1338:  mov cr.ipsr=r16  // set cr.ipsr.na",
          "1341:  rfi",
          "",
          "[Added Lines]",
          "1335:  MOV_TO_IPSR(p0, r16, r18)",
          "1338:  RFI",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1364:  ;;",
          "1366:  shl r18=r18,43   // put sign bit in position (43=64-21)",
          "1367:  ;;",
          "1370:  shr r18=r18,39   // sign extend (39=43-4)",
          "1371:  ;;",
          "1373:  add r17=r17,r18   // now add the offset",
          "1374:  ;;",
          "1376:  dep r16=0,r16,41,2  // clear EI",
          "1377:  ;;",
          "1380:  ;;",
          "1383: END(speculation_vector)",
          "1385:  .org ia64_ivt+0x5800",
          "",
          "[Removed Lines]",
          "1363:  mov r18=cr.iim",
          "1365:  mov r17=cr.iip",
          "1369:  mov r16=cr.ipsr",
          "1375:  mov cr.iip=r17",
          "1379:  mov cr.ipsr=r16",
          "1382:  rfi    // and go back",
          "",
          "[Added Lines]",
          "1360:  MOV_FROM_IIM(r18)",
          "1362:  MOV_FROM_IIP(r17)",
          "1366:  MOV_FROM_IPSR(p0, r16)",
          "1372:  MOV_FROM_IIP(r17)",
          "1376:  MOV_FROM_IPSR(p0, r16)",
          "1379:  RFI",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1517:  DBG_FAULT(46)",
          "1518: #ifdef CONFIG_IA32_SUPPORT",
          "1519:  mov r31=pr",
          "1521:  ;;",
          "1522:  extr.u r17=r16,16,8 // get ISR.code",
          "1523:  mov r18=ar.eflag",
          "1525:  ;;",
          "1526:  cmp.ne p6,p0=2,r17",
          "1527: (p6) br.cond.spnt 1f  // not a system flag fault",
          "",
          "[Removed Lines]",
          "1520:  mov r16=cr.isr",
          "1524:  mov r19=cr.iim  // old eflag value",
          "",
          "[Added Lines]",
          "1517:  MOV_FROM_ISR(r16)",
          "1521:  MOV_FROM_IIM(r19) // old eflag value",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1533: (p6) br.cond.spnt 1f  // eflags.ac bit didn't change",
          "1534:  ;;",
          "1535:  mov pr=r31,-1  // restore predicate registers",
          "1538: 1:",
          "1539: #endif // CONFIG_IA32_SUPPORT",
          "",
          "[Removed Lines]",
          "1536:  rfi",
          "",
          "[Added Lines]",
          "1533:  RFI",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1686:  .prologue",
          "1687:  .body",
          "1688:  SAVE_MIN_WITH_COVER",
          "1690:  ;;",
          "1694:  adds r3=8,r2 // set up second base pointer for SAVE_REST",
          "1695:  ;;",
          "1696:  alloc r14=ar.pfs,0,0,1,0 // must be first in insn group",
          "",
          "[Removed Lines]",
          "1689:  ssm psr.ic | PSR_DEFAULT_BITS",
          "1691:  srlz.i  // guarantee that interruption collection is on",
          "1692:  ;;",
          "1693: (p15) ssm psr.i // restore psr.i",
          "",
          "[Added Lines]",
          "1686:  SSM_PSR_IC_AND_DEFAULT_BITS_AND_SRLZ_I(r3, r24)",
          "1689:  SSM_PSR_I(p15, p15, r3) // restore psr.i",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1729: ENTRY(dispatch_to_ia32_handler)",
          "1730:  SAVE_MIN",
          "1731:  ;;",
          "1736:  ;;",
          "1738:  adds r3=8,r2  // Base pointer for SAVE_REST",
          "1739:  ;;",
          "1740:  SAVE_REST",
          "",
          "[Removed Lines]",
          "1732:  mov r14=cr.isr",
          "1733:  ssm psr.ic | PSR_DEFAULT_BITS",
          "1734:  ;;",
          "1735:  srlz.i     // guarantee that interruption collection is on",
          "1737: (p15) ssm psr.i",
          "",
          "[Added Lines]",
          "1728:  MOV_FROM_ISR(r14)",
          "1729:  SSM_PSR_IC_AND_DEFAULT_BITS_AND_SRLZ_I(r3, r24)",
          "1732:  SSM_PSR_I(p15, p15, r3)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b64f34cdfe5bef9dfed1304c513220b0f2862eca",
      "candidate_info": {
        "commit_hash": "b64f34cdfe5bef9dfed1304c513220b0f2862eca",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/b64f34cdfe5bef9dfed1304c513220b0f2862eca",
        "files": [
          "arch/ia64/Kconfig",
          "arch/ia64/ia32/elfcore32.h",
          "arch/ia64/kernel/asm-offsets.c",
          "arch/ia64/kernel/entry.S",
          "arch/ia64/kernel/fsys.S",
          "arch/ia64/kernel/head.S",
          "arch/ia64/kernel/ivt.S",
          "arch/ia64/kernel/minstate.h",
          "arch/ia64/kernel/time.c",
          "include/asm-ia64/cputime.h",
          "include/asm-ia64/system.h",
          "include/asm-ia64/thread_info.h"
        ],
        "message": "[IA64] VIRT_CPU_ACCOUNTING (accurate cpu time accounting)\n\nThis patch implements VIRT_CPU_ACCOUNTING for ia64,\nwhich enable us to use more accurate cpu time accounting.\n\nThe VIRT_CPU_ACCOUNTING is an item of kernel config, which s390\nand powerpc arch have.  By turning this config on, these archs\nchange the mechanism of cpu time accounting from tick-sampling\nbased one to state-transition based one.\n\nThe state-transition based accounting is done by checking time\n(cycle counter in processor) at every state-transition point,\nsuch as entrance/exit of kernel, interrupt, softirq etc.\nThe difference between point to point is the actual time consumed\nduring in the state. There is no doubt about that this value is\nmore accurate than that of tick-sampling based accounting.\n\nSigned-off-by: Hidetoshi Seto <seto.hidetoshi@jp.fujitsu.com>\nSigned-off-by: Tony Luck <tony.luck@intel.com>",
        "before_after_code_files": [
          "arch/ia64/ia32/elfcore32.h||arch/ia64/ia32/elfcore32.h",
          "arch/ia64/kernel/asm-offsets.c||arch/ia64/kernel/asm-offsets.c",
          "arch/ia64/kernel/entry.S||arch/ia64/kernel/entry.S",
          "arch/ia64/kernel/fsys.S||arch/ia64/kernel/fsys.S",
          "arch/ia64/kernel/head.S||arch/ia64/kernel/head.S",
          "arch/ia64/kernel/ivt.S||arch/ia64/kernel/ivt.S",
          "arch/ia64/kernel/minstate.h||arch/ia64/kernel/minstate.h",
          "arch/ia64/kernel/time.c||arch/ia64/kernel/time.c",
          "include/asm-ia64/cputime.h||include/asm-ia64/cputime.h",
          "include/asm-ia64/system.h||include/asm-ia64/system.h",
          "include/asm-ia64/thread_info.h||include/asm-ia64/thread_info.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/ia64/kernel/ivt.S||arch/ia64/kernel/ivt.S",
            "arch/ia64/kernel/minstate.h||arch/ia64/kernel/minstate.h"
          ],
          "candidate": [
            "arch/ia64/kernel/ivt.S||arch/ia64/kernel/ivt.S",
            "arch/ia64/kernel/minstate.h||arch/ia64/kernel/minstate.h"
          ]
        }
      },
      "candidate_diff": {
        "arch/ia64/ia32/elfcore32.h||arch/ia64/ia32/elfcore32.h": [
          "File: arch/ia64/ia32/elfcore32.h -> arch/ia64/ia32/elfcore32.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: };",
          "35: struct elf_prstatus",
          "36: {",
          "",
          "[Removed Lines]",
          "33: #define jiffies_to_timeval(a,b) do { (b)->tv_usec = 0; (b)->tv_sec = (a)/HZ; }while(0)",
          "",
          "[Added Lines]",
          "33: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "40: #define cputime_to_timeval(a,b) \\",
          "41:  do { (b)->tv_usec = 0; (b)->tv_sec = (a)/NSEC_PER_SEC; } while(0)",
          "42: #else",
          "43: #define jiffies_to_timeval(a,b) \\",
          "44:  do { (b)->tv_usec = 0; (b)->tv_sec = (a)/HZ; } while(0)",
          "45: #endif",
          "",
          "---------------"
        ],
        "arch/ia64/kernel/asm-offsets.c||arch/ia64/kernel/asm-offsets.c": [
          "File: arch/ia64/kernel/asm-offsets.c -> arch/ia64/kernel/asm-offsets.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:  DEFINE(TI_FLAGS, offsetof(struct thread_info, flags));",
          "40:  DEFINE(TI_CPU, offsetof(struct thread_info, cpu));",
          "41:  DEFINE(TI_PRE_COUNT, offsetof(struct thread_info, preempt_count));",
          "43:  BLANK();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "43:  DEFINE(TI_AC_STAMP, offsetof(struct thread_info, ac_stamp));",
          "44:  DEFINE(TI_AC_LEAVE, offsetof(struct thread_info, ac_leave));",
          "45:  DEFINE(TI_AC_STIME, offsetof(struct thread_info, ac_stime));",
          "46:  DEFINE(TI_AC_UTIME, offsetof(struct thread_info, ac_utime));",
          "47: #endif",
          "",
          "---------------"
        ],
        "arch/ia64/kernel/entry.S||arch/ia64/kernel/entry.S": [
          "File: arch/ia64/kernel/entry.S -> arch/ia64/kernel/entry.S",
          "--- Hunk 1 ---",
          "[Context before]",
          "710: (pUStk) cmp.eq.unc p6,p0=r0,r0  // p6 <- pUStk",
          "711: #endif",
          "712: .work_processed_syscall:",
          "713:  adds r2=PT(LOADRS)+16,r12",
          "714:  adds r3=PT(AR_BSPSTORE)+16,r12",
          "715:  adds r18=TI_FLAGS+IA64_TASK_SIZE,r13",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "713: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "714:  adds r2=PT(LOADRS)+16,r12",
          "715: (pUStk) mov.m r22=ar.itc   // fetch time at leave",
          "716:  adds r18=TI_FLAGS+IA64_TASK_SIZE,r13",
          "717:  ;;",
          "718: (p6) ld4 r31=[r18]    // load current_thread_info()->flags",
          "719:  ld8 r19=[r2],PT(B6)-PT(LOADRS)  // load ar.rsc value for \"loadrs\"",
          "720:  adds r3=PT(AR_BSPSTORE)+16,r12  // deferred",
          "721:  ;;",
          "722: #else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "718:  ld8 r19=[r2],PT(B6)-PT(LOADRS)  // load ar.rsc value for \"loadrs\"",
          "719:  nop.i 0",
          "720:  ;;",
          "721:  mov r16=ar.bsp    // M2  get existing backing store pointer",
          "722:  ld8 r18=[r2],PT(R9)-PT(B6)  // load b6",
          "723: (p6) and r15=TIF_WORK_MASK,r31  // any work other than TIF_SYSCALL_TRACE?",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "731: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "738:  ld8 r29=[r2],16  // M0|1 load cr.ipsr",
          "739:  ld8 r28=[r3],16  // M0|1 load cr.iip",
          "740:  mov r22=r0  // A    clear r22",
          "741:  ;;",
          "742:  ld8 r30=[r2],16  // M0|1 load cr.ifs",
          "743:  ld8 r25=[r3],16  // M0|1 load ar.unat",
          "744: (pUStk) add r14=IA64_TASK_THREAD_ON_USTACK_OFFSET,r13",
          "745:  ;;",
          "746:  ld8 r26=[r2],PT(B0)-PT(AR_PFS) // M0|1 load ar.pfs",
          "747: (pKStk) mov r22=psr   // M2   read PSR now that interrupts are disabled",
          "748:  nop 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "751: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "752: (pUStk) add r14=TI_AC_LEAVE+IA64_TASK_SIZE,r13",
          "753:  ;;",
          "754:  ld8 r30=[r2],16  // M0|1 load cr.ifs",
          "755:  ld8 r25=[r3],16  // M0|1 load ar.unat",
          "756: (pUStk) add r15=IA64_TASK_THREAD_ON_USTACK_OFFSET,r13",
          "757:  ;;",
          "758: #else",
          "765: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "759:  ld8.fill r1=[r3],16   // M0|1 load r1",
          "760: (pUStk) mov r17=1    // A",
          "761:  ;;",
          "762: (pUStk) st1 [r14]=r17    // M2|3",
          "763:  ld8.fill r13=[r3],16   // M0|1",
          "764:  mov f8=f0    // F    clear f8",
          "765:  ;;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "782: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "783: (pUStk) st1 [r15]=r17    // M2|3",
          "784: #else",
          "786: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "775:  shr.u r18=r19,16  // I0|1 get byte size of existing \"dirty\" partition",
          "776:  cover    // B    add current frame into dirty partition & set cr.ifs",
          "777:  ;;",
          "778:  mov r19=ar.bsp   // M2   get new backing store pointer",
          "779:  mov f10=f0   // F    clear f10",
          "781:  nop.m 0",
          "782:  movl r14=__kernel_syscall_via_epc // X",
          "783:  ;;",
          "784:  mov.m ar.csd=r0   // M2   clear ar.csd",
          "785:  mov.m ar.ccv=r0   // M2   clear ar.ccv",
          "786:  mov b7=r14   // I0   clear b7 (hint with __kernel_syscall_via_epc)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "802: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "803:  mov r19=ar.bsp   // M2   get new backing store pointer",
          "804:  st8 [r14]=r22   // M save time at leave",
          "805:  mov f10=f0   // F    clear f10",
          "807:  mov r22=r0   // A clear r22",
          "808:  movl r14=__kernel_syscall_via_epc // X",
          "809:  ;;",
          "810: #else",
          "817: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "913:  adds r16=PT(CR_IPSR)+16,r12",
          "914:  adds r17=PT(CR_IIP)+16,r12",
          "916: (pKStk) mov r22=psr  // M2 read PSR now that interrupts are disabled",
          "917:  nop.i 0",
          "918:  nop.i 0",
          "919:  ;;",
          "920:  ld8 r29=[r16],16 // load cr.ipsr",
          "921:  ld8 r28=[r17],16 // load cr.iip",
          "922:  ;;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "950: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "951:  .pred.rel.mutex pUStk,pKStk",
          "952: (pKStk) mov r22=psr  // M2 read PSR now that interrupts are disabled",
          "953: (pUStk) mov.m r22=ar.itc // M  fetch time at leave",
          "954:  nop.i 0",
          "955:  ;;",
          "956: #else",
          "961: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "938:  ;;",
          "939:  ld8.fill r12=[r16],16",
          "940:  ld8.fill r13=[r17],16",
          "941: (pUStk) adds r18=IA64_TASK_THREAD_ON_USTACK_OFFSET,r18",
          "942:  ;;",
          "943:  ld8 r20=[r16],16 // ar.fpsr",
          "944:  ld8.fill r15=[r17],16",
          "945:  ;;",
          "946:  ld8.fill r14=[r16],16",
          "947:  ld8.fill r2=[r17]",
          "948: (pUStk) mov r17=1",
          "949:  ;;",
          "950:  ld8.fill r3=[r16]",
          "951: (pUStk) st1 [r18]=r17  // restore current->thread.on_ustack",
          "952:  shr.u r18=r19,16 // get byte size of existing \"dirty\" partition",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "983: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "984: (pUStk) adds r3=TI_AC_LEAVE+IA64_TASK_SIZE,r18",
          "985: #else",
          "987: #endif",
          "991: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "992: (pUStk) adds r18=IA64_TASK_THREAD_ON_USTACK_OFFSET,r18 // deferred",
          "993: #endif",
          "999: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "1005: (pUStk) st8 [r3]=r22  // save time at leave",
          "1006: (pUStk) st1 [r18]=r17  // restore current->thread.on_ustack",
          "1007:  shr.u r18=r19,16 // get byte size of existing \"dirty\" partition",
          "1008:  ;;",
          "1009:  ld8.fill r3=[r16] // deferred",
          "1010:  LOAD_PHYS_STACK_REG_SIZE(r17)",
          "1011: (pKStk) br.cond.dpnt skip_rbs_switch",
          "1012:  mov r16=ar.bsp  // get existing backing store pointer",
          "1013: #else",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "954:  mov r16=ar.bsp  // get existing backing store pointer",
          "955:  LOAD_PHYS_STACK_REG_SIZE(r17)",
          "956: (pKStk) br.cond.dpnt skip_rbs_switch",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1021: #endif",
          "",
          "---------------"
        ],
        "arch/ia64/kernel/fsys.S||arch/ia64/kernel/fsys.S": [
          "File: arch/ia64/kernel/fsys.S -> arch/ia64/kernel/fsys.S",
          "--- Hunk 1 ---",
          "[Context before]",
          "660:  nop.i 0",
          "661:  ;;",
          "662:  mov ar.rsc=0    // M2   set enforced lazy mode, pl 0, LE, loadrs=0",
          "663:  nop.m 0",
          "664:  nop.i 0",
          "665:  ;;",
          "666:  mov r23=ar.bspstore   // M2 (12 cyc) save ar.bspstore",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "663: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "664:  mov.m r30=ar.itc   // M    get cycle for accounting",
          "665: #else",
          "667: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "682:  cmp.ne pKStk,pUStk=r0,r0  // A    set pKStk <- 0, pUStk <- 1",
          "683:  br.call.sptk.many b7=ia64_syscall_setup // B",
          "684:  ;;",
          "685:  mov ar.rsc=0x3    // M2   set eager mode, pl 0, LE, loadrs=0",
          "686:  mov rp=r14    // I0   set the real return addr",
          "687:  and r3=_TIF_SYSCALL_TRACEAUDIT,r3 // A",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "689: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "691:  add r16=TI_AC_STAMP+IA64_TASK_SIZE,r2",
          "692:  add r17=TI_AC_LEAVE+IA64_TASK_SIZE,r2",
          "693:  ;;",
          "694:  ld8 r18=[r16],TI_AC_STIME-TI_AC_STAMP // time at last check in kernel",
          "695:  ld8 r19=[r17],TI_AC_UTIME-TI_AC_LEAVE // time at leave kernel",
          "696:  ;;",
          "697:  ld8 r20=[r16],TI_AC_STAMP-TI_AC_STIME // cumulated stime",
          "698:  ld8 r21=[r17]    // cumulated utime",
          "699:  sub r22=r19,r18    // stime before leave kernel",
          "700:  ;;",
          "701:  st8 [r16]=r30,TI_AC_STIME-TI_AC_STAMP // update stamp",
          "702:  sub r18=r30,r19    // elapsed time in user mode",
          "703:  ;;",
          "704:  add r20=r20,r22    // sum stime",
          "705:  add r21=r21,r18    // sum utime",
          "706:  ;;",
          "707:  st8 [r16]=r20    // update stime",
          "708:  st8 [r17]=r21    // update utime",
          "709:  ;;",
          "710: #endif",
          "",
          "---------------"
        ],
        "arch/ia64/kernel/head.S||arch/ia64/kernel/head.S": [
          "File: arch/ia64/kernel/head.S -> arch/ia64/kernel/head.S",
          "--- Hunk 1 ---",
          "[Context before]",
          "1002:  br.ret.sptk.many rp",
          "1003: END(sched_clock)",
          "1005: GLOBAL_ENTRY(start_kernel_thread)",
          "1006:  .prologue",
          "1007:  .save rp, r0    // this is the end of the call-chain",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1005: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "1006: GLOBAL_ENTRY(cycle_to_cputime)",
          "1007:  alloc r16=ar.pfs,1,0,0,0",
          "1008:  addl r8=THIS_CPU(cpu_info) + IA64_CPUINFO_NSEC_PER_CYC_OFFSET,r0",
          "1009:  ;;",
          "1010:  ldf8 f8=[r8]",
          "1011:  ;;",
          "1012:  setf.sig f9=r32",
          "1013:  ;;",
          "1014:  xmpy.lu f10=f9,f8 // calculate low 64 bits of 128-bit product (4 cyc)",
          "1015:  xmpy.hu f11=f9,f8 // calculate high 64 bits of 128-bit product",
          "1016:  ;;",
          "1017:  getf.sig r8=f10  //      (5 cyc)",
          "1018:  getf.sig r9=f11",
          "1019:  ;;",
          "1020:  shrp r8=r9,r8,IA64_NSEC_PER_CYC_SHIFT",
          "1021:  br.ret.sptk.many rp",
          "1022: END(cycle_to_cputime)",
          "",
          "---------------"
        ],
        "arch/ia64/kernel/ivt.S||arch/ia64/kernel/ivt.S": [
          "File: arch/ia64/kernel/ivt.S -> arch/ia64/kernel/ivt.S",
          "--- Hunk 1 ---",
          "[Context before]",
          "806: (p8) adds r28=16,r28    // A    switch cr.iip to next bundle",
          "807: (p9) adds r8=1,r8    // A    increment ei to next slot",
          "808:  nop.i 0",
          "809:  ;;",
          "811:  mov.m r25=ar.unat   // M2 (5 cyc)",
          "812:  dep r29=r8,r29,41,2   // I0   insert new ei into cr.ipsr",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "808: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "809:  ;;",
          "810:  mov b6=r30    // I0   setup syscall handler branch reg early",
          "811: #else",
          "814: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "819:  st1 [r16]=r0    // M2|3 clear current->thread.on_ustack flag",
          "820:  mov b6=r30    // I0   setup syscall handler branch reg early",
          "821:  cmp.eq pKStk,pUStk=r0,r17  // A    were we on kernel stacks already?",
          "823:  and r9=_TIF_SYSCALL_TRACEAUDIT,r9 // A    mask trace or audit",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "825: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "826:  mov.m r30=ar.itc   // M    get cycle for accounting",
          "827: #else",
          "829: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "829:  cmp.eq p14,p0=r9,r0   // A    are syscalls being traced/audited?",
          "830:  br.call.sptk.many b7=ia64_syscall_setup // B",
          "831: 1:",
          "832:  mov ar.rsc=0x3    // M2   set eager mode, pl 0, LE, loadrs=0",
          "833:  nop 0",
          "834:  bsw.1     // B (6 cyc) regs are saved, switch to bank 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "841: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "843:  add r16=TI_AC_STAMP+IA64_TASK_SIZE,r13 // A",
          "844:  add r17=TI_AC_LEAVE+IA64_TASK_SIZE,r13 // A",
          "845: (pKStk) br.cond.spnt .skip_accounting  // B unlikely skip",
          "846:  ;;",
          "847:  ld8 r18=[r16],TI_AC_STIME-TI_AC_STAMP // M  get last stamp",
          "848:  ld8 r19=[r17],TI_AC_UTIME-TI_AC_LEAVE // M  time at leave",
          "849:  ;;",
          "850:  ld8 r20=[r16],TI_AC_STAMP-TI_AC_STIME // M  cumulated stime",
          "851:  ld8 r21=[r17]    // M  cumulated utime",
          "852:  sub r22=r19,r18    // A  stime before leave",
          "853:  ;;",
          "854:  st8 [r16]=r30,TI_AC_STIME-TI_AC_STAMP // M  update stamp",
          "855:  sub r18=r30,r19    // A  elapsed time in user",
          "856:  ;;",
          "857:  add r20=r20,r22    // A  sum stime",
          "858:  add r21=r21,r18    // A  sum utime",
          "859:  ;;",
          "860:  st8 [r16]=r20    // M  update stime",
          "861:  st8 [r17]=r21    // M  update utime",
          "862:  ;;",
          "863: .skip_accounting:",
          "864: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1090:  DBG_FAULT(16)",
          "1091:  FAULT(16)",
          "1093:  .org ia64_ivt+0x4400",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1127: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "1137: ENTRY(account_sys_enter)",
          "1139:  add r16=TI_AC_STAMP+IA64_TASK_SIZE,r13",
          "1140:  add r17=TI_AC_LEAVE+IA64_TASK_SIZE,r13",
          "1141:  ;;",
          "1142:  ld8 r18=[r16],TI_AC_STIME-TI_AC_STAMP // time at last check in kernel",
          "1143:  ld8 r19=[r17],TI_AC_UTIME-TI_AC_LEAVE // time at left from kernel",
          "1144:         ;;",
          "1145:  ld8 r23=[r16],TI_AC_STAMP-TI_AC_STIME // cumulated stime",
          "1146:  ld8 r21=[r17]    // cumulated utime",
          "1147:  sub r22=r19,r18    // stime before leave kernel",
          "1148:  ;;",
          "1149:  st8 [r16]=r20,TI_AC_STIME-TI_AC_STAMP // update stamp",
          "1150:  sub r18=r20,r19    // elapsed time in user mode",
          "1151:  ;;",
          "1152:  add r23=r23,r22    // sum stime",
          "1153:  add r21=r21,r18    // sum utime",
          "1154:  ;;",
          "1155:  st8 [r16]=r23    // update stime",
          "1156:  st8 [r17]=r21    // update utime",
          "1157:  ;;",
          "1158:  br.ret.sptk.many rp",
          "1159: END(account_sys_enter)",
          "1160: #endif",
          "",
          "---------------"
        ],
        "arch/ia64/kernel/minstate.h||arch/ia64/kernel/minstate.h": [
          "File: arch/ia64/kernel/minstate.h -> arch/ia64/kernel/minstate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include \"entry.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "8: #define ACCOUNT_GET_STAMP    \\",
          "9: (pUStk) mov.m r20=ar.itc;",
          "10: #define ACCOUNT_SYS_ENTER    \\",
          "11: (pUStk) br.call.spnt rp=account_sys_enter  \\",
          "12:  ;;",
          "13: #else",
          "14: #define ACCOUNT_GET_STAMP",
          "15: #define ACCOUNT_SYS_ENTER",
          "16: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:  ;;           \\",
          "123: .mem.offset 0,0; st8.spill [r16]=r2,16;        \\",
          "124: .mem.offset 8,0; st8.spill [r17]=r3,16;        \\",
          "125:  adds r2=IA64_PT_REGS_R16_OFFSET,r1;       \\",
          "126:  ;;           \\",
          "127:  EXTRA;           \\",
          "128:  movl r1=__gp;  /* establish kernel global pointer */    \\",
          "129:  ;;           \\",
          "130:  bsw.1;   /* switch back to bank 1 (must be last in insn group) */ \\",
          "131:  ;;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:  ACCOUNT_GET_STAMP         \\",
          "143:  ACCOUNT_SYS_ENTER         \\",
          "",
          "---------------"
        ],
        "arch/ia64/kernel/time.c||arch/ia64/kernel/time.c": [
          "File: arch/ia64/kernel/time.c -> arch/ia64/kernel/time.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: };",
          "60: static struct clocksource *itc_clocksource;",
          "62: static irqreturn_t",
          "63: timer_interrupt (int irq, void *dev_id)",
          "64: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "64: #include <linux/kernel_stat.h>",
          "66: extern cputime_t cycle_to_cputime(u64 cyc);",
          "73: void ia64_account_on_switch(struct task_struct *prev, struct task_struct *next)",
          "74: {",
          "75:  struct thread_info *pi = task_thread_info(prev);",
          "76:  struct thread_info *ni = task_thread_info(next);",
          "77:  cputime_t delta_stime, delta_utime;",
          "78:  __u64 now;",
          "80:  now = ia64_get_itc();",
          "82:  delta_stime = cycle_to_cputime(pi->ac_stime + (now - pi->ac_stamp));",
          "83:  account_system_time(prev, 0, delta_stime);",
          "84:  account_system_time_scaled(prev, delta_stime);",
          "86:  if (pi->ac_utime) {",
          "87:   delta_utime = cycle_to_cputime(pi->ac_utime);",
          "88:   account_user_time(prev, delta_utime);",
          "89:   account_user_time_scaled(prev, delta_utime);",
          "90:  }",
          "92:  pi->ac_stamp = ni->ac_stamp = now;",
          "93:  ni->ac_stime = ni->ac_utime = 0;",
          "94: }",
          "100: void account_system_vtime(struct task_struct *tsk)",
          "101: {",
          "102:  struct thread_info *ti = task_thread_info(tsk);",
          "103:  unsigned long flags;",
          "104:  cputime_t delta_stime;",
          "105:  __u64 now;",
          "107:  local_irq_save(flags);",
          "109:  now = ia64_get_itc();",
          "111:  delta_stime = cycle_to_cputime(ti->ac_stime + (now - ti->ac_stamp));",
          "112:  account_system_time(tsk, 0, delta_stime);",
          "113:  account_system_time_scaled(tsk, delta_stime);",
          "114:  ti->ac_stime = 0;",
          "116:  ti->ac_stamp = now;",
          "118:  local_irq_restore(flags);",
          "119: }",
          "125: void account_process_tick(struct task_struct *p, int user_tick)",
          "126: {",
          "127:  struct thread_info *ti = task_thread_info(p);",
          "128:  cputime_t delta_utime;",
          "130:  if (ti->ac_utime) {",
          "131:   delta_utime = cycle_to_cputime(ti->ac_utime);",
          "132:   account_user_time(p, delta_utime);",
          "133:   account_user_time_scaled(p, delta_utime);",
          "134:   ti->ac_utime = 0;",
          "135:  }",
          "136: }",
          "",
          "---------------"
        ],
        "include/asm-ia64/cputime.h||include/asm-ia64/cputime.h": [
          "File: include/asm-ia64/cputime.h -> include/asm-ia64/cputime.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #ifndef __IA64_CPUTIME_H",
          "2: #define __IA64_CPUTIME_H",
          "4: #include <asm-generic/cputime.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifndef CONFIG_VIRT_CPU_ACCOUNTING",
          "24: #else",
          "26: #include <linux/time.h>",
          "27: #include <linux/jiffies.h>",
          "28: #include <asm/processor.h>",
          "30: typedef u64 cputime_t;",
          "31: typedef u64 cputime64_t;",
          "33: #define cputime_zero   ((cputime_t)0)",
          "34: #define cputime_max   ((~((cputime_t)0) >> 1) - 1)",
          "35: #define cputime_add(__a, __b)  ((__a) +  (__b))",
          "36: #define cputime_sub(__a, __b)  ((__a) -  (__b))",
          "37: #define cputime_div(__a, __n)  ((__a) /  (__n))",
          "38: #define cputime_halve(__a)  ((__a) >> 1)",
          "39: #define cputime_eq(__a, __b)  ((__a) == (__b))",
          "40: #define cputime_gt(__a, __b)  ((__a) >  (__b))",
          "41: #define cputime_ge(__a, __b)  ((__a) >= (__b))",
          "42: #define cputime_lt(__a, __b)  ((__a) <  (__b))",
          "43: #define cputime_le(__a, __b)  ((__a) <= (__b))",
          "45: #define cputime64_zero   ((cputime64_t)0)",
          "46: #define cputime64_add(__a, __b)  ((__a) + (__b))",
          "47: #define cputime64_sub(__a, __b)  ((__a) - (__b))",
          "48: #define cputime_to_cputime64(__ct) (__ct)",
          "53: #define cputime_to_jiffies(__ct) ((__ct) / (NSEC_PER_SEC / HZ))",
          "54: #define jiffies_to_cputime(__jif) ((__jif) * (NSEC_PER_SEC / HZ))",
          "55: #define cputime64_to_jiffies64(__ct) ((__ct) / (NSEC_PER_SEC / HZ))",
          "56: #define jiffies64_to_cputime64(__jif) ((__jif) * (NSEC_PER_SEC / HZ))",
          "61: #define cputime_to_msecs(__ct)  ((__ct) / NSEC_PER_MSEC)",
          "62: #define msecs_to_cputime(__msecs) ((__msecs) * NSEC_PER_MSEC)",
          "67: #define cputime_to_secs(__ct)  ((__ct) / NSEC_PER_SEC)",
          "68: #define secs_to_cputime(__secs)  ((__secs) * NSEC_PER_SEC)",
          "73: static inline cputime_t timespec_to_cputime(const struct timespec *val)",
          "74: {",
          "75:  cputime_t ret = val->tv_sec * NSEC_PER_SEC;",
          "76:  return (ret + val->tv_nsec);",
          "77: }",
          "78: static inline void cputime_to_timespec(const cputime_t ct, struct timespec *val)",
          "79: {",
          "80:  val->tv_sec  = ct / NSEC_PER_SEC;",
          "81:  val->tv_nsec = ct % NSEC_PER_SEC;",
          "82: }",
          "87: static inline cputime_t timeval_to_cputime(struct timeval *val)",
          "88: {",
          "89:  cputime_t ret = val->tv_sec * NSEC_PER_SEC;",
          "90:  return (ret + val->tv_usec * NSEC_PER_USEC);",
          "91: }",
          "92: static inline void cputime_to_timeval(const cputime_t ct, struct timeval *val)",
          "93: {",
          "94:  val->tv_sec = ct / NSEC_PER_SEC;",
          "95:  val->tv_usec = (ct % NSEC_PER_SEC) / NSEC_PER_USEC;",
          "96: }",
          "101: #define cputime_to_clock_t(__ct) ((__ct) / (NSEC_PER_SEC / USER_HZ))",
          "102: #define clock_t_to_cputime(__x)  ((__x) * (NSEC_PER_SEC / USER_HZ))",
          "107: #define cputime64_to_clock_t(__ct)      cputime_to_clock_t((cputime_t)__ct)",
          "",
          "---------------"
        ],
        "include/asm-ia64/system.h||include/asm-ia64/system.h": [
          "File: include/asm-ia64/system.h -> include/asm-ia64/system.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "210: extern void ia64_save_extra (struct task_struct *task);",
          "211: extern void ia64_load_extra (struct task_struct *task);",
          "213: #ifdef CONFIG_PERFMON",
          "214:   DECLARE_PER_CPU(unsigned long, pfm_syst_info);",
          "215: # define PERFMON_IS_SYSWIDE() (__get_cpu_var(pfm_syst_info) & 0x1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "214: extern void ia64_account_on_switch (struct task_struct *prev, struct task_struct *next);",
          "215: # define IA64_ACCOUNT_ON_SWITCH(p,n) ia64_account_on_switch(p,n)",
          "216: #else",
          "217: # define IA64_ACCOUNT_ON_SWITCH(p,n)",
          "218: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222:   || IS_IA32_PROCESS(task_pt_regs(t)) || PERFMON_IS_SYSWIDE())",
          "224: #define __switch_to(prev,next,last) do {        \\",
          "225:  if (IA64_HAS_EXTRA_STATE(prev))         \\",
          "226:   ia64_save_extra(prev);         \\",
          "227:  if (IA64_HAS_EXTRA_STATE(next))         \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:  IA64_ACCOUNT_ON_SWITCH(prev, next);        \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "267: void default_idle(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "278: extern void account_system_vtime(struct task_struct *);",
          "279: #endif",
          "",
          "---------------"
        ],
        "include/asm-ia64/thread_info.h||include/asm-ia64/thread_info.h": [
          "File: include/asm-ia64/thread_info.h -> include/asm-ia64/thread_info.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:  struct restart_block restart_block;",
          "34: };",
          "36: #define THREAD_SIZE   KERNEL_STACK_SIZE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "35:  __u64 ac_stamp;",
          "36:  __u64 ac_leave;",
          "37:  __u64 ac_stime;",
          "38:  __u64 ac_utime;",
          "39: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: #define task_stack_page(tsk) ((void *)(tsk))",
          "64: #define __HAVE_THREAD_FUNCTIONS",
          "65: #define setup_thread_stack(p, org) \\",
          "67:  task_thread_info(p)->task = (p);",
          "68: #define end_of_stack(p) (unsigned long *)((void *)(p) + IA64_RBS_OFFSET)",
          "70: #define __HAVE_ARCH_TASK_STRUCT_ALLOCATOR",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: #ifdef CONFIG_VIRT_CPU_ACCOUNTING",
          "72: #define setup_thread_stack(p, org)   \\",
          "74:  task_thread_info(p)->ac_stime = 0;  \\",
          "75:  task_thread_info(p)->ac_utime = 0;  \\",
          "76:  task_thread_info(p)->task = (p);",
          "77: #else",
          "81: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}