{
  "cve_id": "CVE-2015-4645",
  "cve_desc": "Integer overflow in the read_fragment_table_4 function in unsquash-4.c in Squashfs and sasquatch allows remote attackers to cause a denial of service (application crash) via a crafted input, which triggers a stack-based buffer overflow.",
  "repo": "plougher/squashfs-tools",
  "patch_hash": "f95864afe8833fe3ad782d714b41378e860977b1",
  "patch_info": {
    "commit_hash": "f95864afe8833fe3ad782d714b41378e860977b1",
    "repo": "plougher/squashfs-tools",
    "commit_url": "https://github.com/plougher/squashfs-tools/commit/f95864afe8833fe3ad782d714b41378e860977b1",
    "files": [
      "squashfs-tools/read_xattrs.c",
      "squashfs-tools/unsquash-4.c",
      "squashfs-tools/unsquashfs.c"
    ],
    "message": "unsquashfs-4: Add more sanity checks + fix CVE-2015-4645/6\n\nAdd more filesystem table sanity checks to Unsquashfs-4 and\nalso properly fix CVE-2015-4645 and CVE-2015-4646.\n\nThe CVEs were raised due to Unsquashfs having variable\noveflow and stack overflow in a number of vulnerable\nfunctions.\n\nThe suggested patch only \"fixed\" one such function and fixed\nit badly, and so it was buggy and introduced extra bugs!\n\nThe suggested patch was not only buggy, but, it used the\nessentially wrong approach too.  It was \"fixing\" the\nsymptom but not the cause.  The symptom is wrong values\ncausing overflow, the cause is filesystem corruption.\nThis corruption should be detected and the filesystem\nrejected *before* trying to allocate memory.\n\nThis patch applies the following fixes:\n\n1. The filesystem super-block tables are checked, and the values\n   must match across the filesystem.\n\n   This will trap corrupted filesystems created by Mksquashfs.\n\n2. The maximum (theorectical) size the filesystem tables could grow\n   to, were analysed, and some variables were increased from int to\n   long long.\n\n   This analysis has been added as comments.\n\n3. Stack allocation was removed, and a shared buffer (which is\n   checked and increased as necessary) is used to read the\n   table indexes.\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
    "before_after_code_files": [
      "squashfs-tools/read_xattrs.c||squashfs-tools/read_xattrs.c",
      "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c",
      "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
    ]
  },
  "patch_diff": {
    "squashfs-tools/read_xattrs.c||squashfs-tools/read_xattrs.c": [
      "File: squashfs-tools/read_xattrs.c -> squashfs-tools/read_xattrs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "151: int read_xattrs_from_disk(int fd, struct squashfs_super_block *sBlk, int flag, long long *table_start)",
      "152: {",
      "154:  long long *index, start, end;",
      "155:  struct squashfs_xattr_table id_table;",
      "",
      "[Removed Lines]",
      "153:  int res, bytes, i, indexes, index_bytes, ids;",
      "",
      "[Added Lines]",
      "160:  int res, i, indexes, index_bytes;",
      "161:  unsigned int ids;",
      "162:  long long bytes;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "171:  SQUASHFS_INSWAP_XATTR_TABLE(&id_table);",
      "180:   return id_table.xattr_ids;",
      "191:  index = malloc(index_bytes);",
      "192:  if(index == NULL)",
      "193:   MEM_ERROR();",
      "",
      "[Removed Lines]",
      "173:  if(flag) {",
      "181:  }",
      "187:  ids = id_table.xattr_ids;",
      "188:  xattr_table_start = id_table.xattr_table_start;",
      "189:  index_bytes = SQUASHFS_XATTR_BLOCK_BYTES(ids);",
      "190:  indexes = SQUASHFS_XATTR_BLOCKS(ids);",
      "",
      "[Added Lines]",
      "185:  ids = id_table.xattr_ids;",
      "186:  xattr_table_start = id_table.xattr_table_start;",
      "187:  index_bytes = SQUASHFS_XATTR_BLOCK_BYTES((long long) ids);",
      "188:  indexes = SQUASHFS_XATTR_BLOCKS((long long) ids);",
      "194:  if(index_bytes != (sBlk->bytes_used - (sBlk->xattr_id_table_start + sizeof(id_table)))) {",
      "195:   ERROR(\"read_xattrs_from_disk: Bad xattr_ids count in super block\\n\");",
      "196:   return 0;",
      "197:  }",
      "204:  if(table_start != NULL)",
      "213:  if(flag)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "207:  xattr_ids = malloc(bytes);",
      "208:  if(xattr_ids == NULL)",
      "209:   MEM_ERROR();",
      "",
      "[Removed Lines]",
      "206:  bytes = SQUASHFS_XATTR_BYTES(ids);",
      "",
      "[Added Lines]",
      "235:  bytes = SQUASHFS_XATTR_BYTES((long long) ids);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "213:      bytes & (SQUASHFS_METADATA_SIZE - 1);",
      "214:   int length = read_block(fd, index[i], NULL, expected,",
      "215:    ((unsigned char *) xattr_ids) +",
      "217:   TRACE(\"Read xattr id table block %d, from 0x%llx, length \"",
      "218:    \"%d\\n\", i, index[i], length);",
      "219:   if(length == 0) {",
      "",
      "[Removed Lines]",
      "216:    (i * SQUASHFS_METADATA_SIZE));",
      "",
      "[Added Lines]",
      "245:    ((long long) i * SQUASHFS_METADATA_SIZE));",
      "",
      "---------------"
    ],
    "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c": [
      "File: squashfs-tools/unsquash-4.c -> squashfs-tools/unsquash-4.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: static struct squashfs_fragment_entry *fragment_table;",
      "30: static unsigned int *id_table;",
      "33: {",
      "34:  int res, i;",
      "39:  TRACE(\"read_fragment_table: %d fragments, reading %d fragment indexes \"",
      "40:   \"from 0x%llx\\n\", sBlk.s.fragments, indexes,",
      "41:   sBlk.s.fragment_table_start);",
      "48:  fragment_table = malloc(bytes);",
      "49:  if(fragment_table == NULL)",
      "50:   EXIT_UNSQUASH(\"read_fragment_table: failed to allocate \"",
      "51:    \"fragment table\\n\");",
      "56:  if(res == FALSE) {",
      "57:   ERROR(\"read_fragment_table: failed to read fragment table \"",
      "58:    \"index\\n\");",
      "",
      "[Removed Lines]",
      "32: static int read_fragment_table(long long *directory_table_end)",
      "35:  int bytes = SQUASHFS_FRAGMENT_BYTES(sBlk.s.fragments);",
      "36:  int  indexes = SQUASHFS_FRAGMENT_INDEXES(sBlk.s.fragments);",
      "37:  long long fragment_table_index[indexes];",
      "43:  if(sBlk.s.fragments == 0) {",
      "45:   return TRUE;",
      "46:  }",
      "53:  res = read_fs_bytes(fd, sBlk.s.fragment_table_start,",
      "54:   SQUASHFS_FRAGMENT_INDEX_BYTES(sBlk.s.fragments),",
      "55:   fragment_table_index);",
      "",
      "[Added Lines]",
      "32: long long *alloc_index_table(int indexes)",
      "34:  static long long *alloc_table = NULL;",
      "35:  static int alloc_size = 0;",
      "36:  int length = indexes * sizeof(long long);",
      "38:  if(alloc_size < length) {",
      "39:   long long *table = realloc(alloc_table, length);",
      "41:   if(table == NULL)",
      "42:    EXIT_UNSQUASH(\"alloc_index_table: failed to allocate \"",
      "43:     \"index table\\n\");",
      "45:   alloc_table = table;",
      "46:   alloc_size = length;",
      "47:  }",
      "49:  return alloc_table;",
      "50: }",
      "53: static int read_fragment_table(long long *table_start)",
      "54: {",
      "63:  long long bytes = SQUASHFS_FRAGMENT_BYTES((long long) sBlk.s.fragments);",
      "64:  int indexes = SQUASHFS_FRAGMENT_INDEXES((long long) sBlk.s.fragments);",
      "65:  int length = SQUASHFS_FRAGMENT_INDEX_BYTES((long long) sBlk.s.fragments);",
      "66:  long long *fragment_table_index;",
      "72:  if(length != (*table_start - sBlk.s.fragment_table_start)) {",
      "73:   ERROR(\"read_fragment_table: Bad fragment count in super block\\n\");",
      "74:   return FALSE;",
      "75:  }",
      "81:  fragment_table_index = alloc_index_table(indexes);",
      "87:  res = read_fs_bytes(fd, sBlk.s.fragment_table_start, length,",
      "88:        fragment_table_index);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "356: }",
      "360: {",
      "361:  int res, i;",
      "362:  int bytes = SQUASHFS_ID_BYTES(sBlk.s.no_ids);",
      "363:  int indexes = SQUASHFS_ID_BLOCKS(sBlk.s.no_ids);",
      "368:  id_table = malloc(bytes);",
      "369:  if(id_table == NULL) {",
      "371:   return FALSE;",
      "372:  }",
      "376:  if(res == FALSE) {",
      "378:   return FALSE;",
      "379:  }",
      "380:  SQUASHFS_INSWAP_ID_BLOCKS(id_index_table, indexes);",
      "",
      "[Removed Lines]",
      "359: static int read_uids_guids(long long *table_start)",
      "364:  long long id_index_table[indexes];",
      "366:  TRACE(\"read_uids_guids: no_ids %d\\n\", sBlk.s.no_ids);",
      "370:   ERROR(\"read_uids_guids: failed to allocate id table\\n\");",
      "374:  res = read_fs_bytes(fd, sBlk.s.id_table_start,",
      "375:   SQUASHFS_ID_BLOCK_BYTES(sBlk.s.no_ids), id_index_table);",
      "377:   ERROR(\"read_uids_guids: failed to read id index table\\n\");",
      "",
      "[Added Lines]",
      "392: static int read_id_table(long long *table_start)",
      "404:  int length = SQUASHFS_ID_BLOCK_BYTES(sBlk.s.no_ids);",
      "405:  long long *id_index_table;",
      "411:  if(length != (*table_start - sBlk.s.id_table_start)) {",
      "412:   ERROR(\"read_id_table: Bad id count in super block\\n\");",
      "413:   return FALSE;",
      "414:  }",
      "416:  TRACE(\"read_id_table: no_ids %d\\n\", sBlk.s.no_ids);",
      "418:  id_index_table = alloc_index_table(indexes);",
      "421:   ERROR(\"read_id_table: failed to allocate id table\\n\");",
      "425:  res = read_fs_bytes(fd, sBlk.s.id_table_start, length, id_index_table);",
      "427:   ERROR(\"read_id_table: failed to read id index table\\n\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "393:   res = read_block(fd, id_index_table[i], NULL, expected,",
      "394:    ((char *) id_table) + i * SQUASHFS_METADATA_SIZE);",
      "395:   if(res == FALSE) {",
      "397:     \"\\n\");",
      "398:    return FALSE;",
      "399:   }",
      "",
      "[Removed Lines]",
      "396:    ERROR(\"read_uids_guids: failed to read id table block\"",
      "",
      "[Added Lines]",
      "446:    ERROR(\"read_id_table: failed to read id table block\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "408: static int parse_exports_table(long long *table_start)",
      "409: {",
      "410:  int res;",
      "416:  if(res == FALSE) {",
      "417:   ERROR(\"parse_exports_table: failed to read export index table\\n\");",
      "418:   return FALSE;",
      "",
      "[Removed Lines]",
      "411:  int indexes = SQUASHFS_LOOKUP_BLOCKS(sBlk.s.inodes);",
      "412:  long long export_index_table[indexes];",
      "414:  res = read_fs_bytes(fd, sBlk.s.lookup_table_start,",
      "415:   SQUASHFS_LOOKUP_BLOCK_BYTES(sBlk.s.inodes), export_index_table);",
      "",
      "[Added Lines]",
      "467:  int indexes = SQUASHFS_LOOKUP_BLOCKS((long long) sBlk.s.inodes);",
      "468:  int length = SQUASHFS_LOOKUP_BLOCK_BYTES((long long) sBlk.s.inodes);",
      "469:  long long *export_index_table;",
      "475:  if(length != (*table_start - sBlk.s.lookup_table_start)) {",
      "476:   ERROR(\"parse_exports_table: Bad inode count in super block\\n\");",
      "477:   return FALSE;",
      "478:  }",
      "480:  export_index_table = alloc_index_table(indexes);",
      "482:  res = read_fs_bytes(fd, sBlk.s.lookup_table_start, length,",
      "483:        export_index_table);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "433: int read_filesystem_tables_4()",
      "434: {",
      "453:  if(read_directory_table(sBlk.s.directory_table_start,",
      "457:  if(no_xattrs)",
      "458:   sBlk.s.xattr_id_table_start = SQUASHFS_INVALID_BLK;",
      "460:  return TRUE;",
      "461: }",
      "",
      "[Removed Lines]",
      "435:  long long directory_table_end, table_start;",
      "437:  if(read_xattrs_from_disk(fd, &sBlk.s, no_xattrs, &table_start) == 0)",
      "438:   return FALSE;",
      "440:  if(read_uids_guids(&table_start) == FALSE)",
      "441:   return FALSE;",
      "443:  if(parse_exports_table(&table_start) == FALSE)",
      "444:   return FALSE;",
      "446:  if(read_fragment_table(&directory_table_end) == FALSE)",
      "447:   return FALSE;",
      "449:  if(read_inode_table(sBlk.s.inode_table_start,",
      "450:     sBlk.s.directory_table_start) == FALSE)",
      "451:   return FALSE;",
      "454:     directory_table_end) == FALSE)",
      "455:   return FALSE;",
      "",
      "[Added Lines]",
      "503:  long long table_start;",
      "506:  if(sBlk.s.xattr_id_table_start != SQUASHFS_INVALID_BLK) {",
      "508:   if(sBlk.s.xattr_id_table_start >= sBlk.s.bytes_used) {",
      "509:    ERROR(\"read_filesystem_tables: xattr id table start too large in super block\\n\");",
      "510:    goto corrupted;",
      "511:   }",
      "513:   if(read_xattrs_from_disk(fd, &sBlk.s, no_xattrs, &table_start) == 0)",
      "514:    goto corrupted;",
      "515:  } else",
      "516:   table_start = sBlk.s.bytes_used;",
      "521:  if(sBlk.s.id_table_start >= table_start) {",
      "522:   ERROR(\"read_filesystem_tables: id table start too large in super block\\n\");",
      "523:   goto corrupted;",
      "524:  }",
      "527:  if(sBlk.s.no_ids == 0) {",
      "528:   ERROR(\"read_filesystem_tables: Bad id count in super block\\n\");",
      "529:   goto corrupted;",
      "530:  }",
      "536:  if(sBlk.s.no_ids > (sBlk.s.inodes * 2L)) {",
      "537:   ERROR(\"read_filesystem_tables: Bad id count in super block\\n\");",
      "538:   goto corrupted;",
      "539:  }",
      "541:  if(read_id_table(&table_start) == FALSE)",
      "542:   goto corrupted;",
      "545:  if(sBlk.s.lookup_table_start != SQUASHFS_INVALID_BLK) {",
      "548:   if(sBlk.s.lookup_table_start >= table_start) {",
      "549:    ERROR(\"read_filesystem_tables: lookup table start too large in super block\\n\");",
      "550:    goto corrupted;",
      "551:   }",
      "553:   if(parse_exports_table(&table_start) == FALSE)",
      "554:    goto corrupted;",
      "555:  }",
      "558:  if(sBlk.s.fragments != 0) {",
      "561:   if(sBlk.s.fragment_table_start >= table_start) {",
      "562:    ERROR(\"read_filesystem_tables: fragment table start too large in super block\\n\");",
      "563:    goto corrupted;",
      "564:   }",
      "567:   if(sBlk.s.fragments > sBlk.s.inodes) {",
      "568:    ERROR(\"read_filesystem_tables: Bad fragment count in super block\\n\");",
      "569:    goto corrupted;",
      "570:   }",
      "572:   if(read_fragment_table(&table_start) == FALSE)",
      "573:    goto corrupted;",
      "574:  } else {",
      "579:   if(sBlk.s.fragment_table_start != table_start) {",
      "580:    ERROR(\"read_filesystem_tables: fragment table start invalid in super block\\n\");",
      "581:    goto corrupted;",
      "582:   }",
      "583:  }",
      "588:  if(sBlk.s.directory_table_start >= table_start) {",
      "589:   ERROR(\"read_filesystem_tables: directory table start too large in super block\\n\");",
      "590:   goto corrupted;",
      "591:  }",
      "594:     table_start) == FALSE)",
      "595:   goto corrupted;",
      "600:  if(sBlk.s.inode_table_start >= sBlk.s.directory_table_start) {",
      "601:   ERROR(\"read_filesystem_tables: inode table start too large in super block\\n\");",
      "602:   goto corrupted;",
      "603:  }",
      "605:  if(read_inode_table(sBlk.s.inode_table_start,",
      "606:     sBlk.s.directory_table_start) == FALSE)",
      "607:   goto corrupted;",
      "614: corrupted:",
      "615:  ERROR(\"File system corruption detected\\n\");",
      "616:  return FALSE;",
      "",
      "---------------"
    ],
    "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c": [
      "File: squashfs-tools/unsquashfs.c -> squashfs-tools/unsquashfs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2467: #define VERSION() \\",
      "2469:  printf(\"copyright (C) 2019 Phillip Lougher \"\\",
      "2470:   \"<phillip@squashfs.org.uk>\\n\\n\");\\",
      "2471:      printf(\"This program is free software; you can redistribute it and/or\"\\",
      "",
      "[Removed Lines]",
      "2468:  printf(\"unsquashfs version 4.3-git (2019/07/05)\\n\");\\",
      "",
      "[Added Lines]",
      "2468:  printf(\"unsquashfs version 4.3-git (2019/07/15)\\n\");\\",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e9ed3aab17751feb57baef63bcba6e58f9eaab85",
      "candidate_info": {
        "commit_hash": "e9ed3aab17751feb57baef63bcba6e58f9eaab85",
        "repo": "plougher/squashfs-tools",
        "commit_url": "https://github.com/plougher/squashfs-tools/commit/e9ed3aab17751feb57baef63bcba6e58f9eaab85",
        "files": [
          "squashfs-tools/squashfs_compat.h",
          "squashfs-tools/unsquash-3.c",
          "squashfs-tools/unsquashfs.c",
          "squashfs-tools/unsquashfs.h"
        ],
        "message": "unsquashfs-3: Add more sanity checks + fix CVE-2015-4645/6\n\nThese are the fixes for 3.x Squashfs filesystems.\n\nAdd more filesystem table sanity checks to Unsquashfs-3 and\nalso properly fix CVE-2015-4645 and CVE-2015-4646.\n\nThe CVEs were raised due to Unsquashfs having variable\noveflow and stack overflow in a number of vulnerable\nfunctions.\n\nThe suggested patch only \"fixed\" one such function and fixed\nit badly, and so it was buggy and introduced extra bugs!\n\nThe suggested patch was not only buggy, but, it used the\nessentially wrong approach too.  It was \"fixing\" the\nsymptom but not the cause.  The symptom is wrong values\ncausing overflow, the cause is filesystem corruption.\nThis corruption should be detected and the filesystem\nrejected *before* trying to allocate memory.\n\nThis patch applies the following fixes:\n\n1. The filesystem super-block tables are checked, and the values\n   must match across the filesystem.\n\n   This will trap corrupted filesystems created by Mksquashfs.\n\n2. The maximum (theorectical) size the filesystem tables could grow\n   to, were analysed, and some variables were increased from int to\n   long long.\n\n   This analysis has been added as comments.\n\n3. Stack allocation was removed, and a shared buffer (which is\n   checked and increased as necessary) is used to read the\n   table indexes.\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
        "before_after_code_files": [
          "squashfs-tools/squashfs_compat.h||squashfs-tools/squashfs_compat.h",
          "squashfs-tools/unsquash-3.c||squashfs-tools/unsquash-3.c",
          "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c",
          "squashfs-tools/unsquashfs.h||squashfs-tools/unsquashfs.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ],
          "candidate": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ]
        }
      },
      "candidate_diff": {
        "squashfs-tools/squashfs_compat.h||squashfs-tools/squashfs_compat.h": [
          "File: squashfs-tools/squashfs_compat.h -> squashfs-tools/squashfs_compat.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "437: #define SQUASHFS_FRAGMENT_INDEX_BYTES_3(A) (SQUASHFS_FRAGMENT_INDEXES_3(A) *\\",
          "438:       sizeof(long long))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "441: #define SQUASHFS_LOOKUP_BYTES_3(A) ((A) * sizeof(squashfs_inode))",
          "443: #define SQUASHFS_LOOKUP_BLOCK_3(A)  (SQUASHFS_LOOKUP_BYTES_3(A) / \\",
          "444:       SQUASHFS_METADATA_SIZE)",
          "446: #define SQUASHFS_LOOKUP_BLOCK_OFFSET_3(A) (SQUASHFS_LOOKUP_BYTES_3(A) % \\",
          "447:       SQUASHFS_METADATA_SIZE)",
          "449: #define SQUASHFS_LOOKUP_BLOCKS_3(A) ((SQUASHFS_LOOKUP_BYTES_3(A) + \\",
          "450:      SQUASHFS_METADATA_SIZE - 1) / \\",
          "451:      SQUASHFS_METADATA_SIZE)",
          "453: #define SQUASHFS_LOOKUP_BLOCK_BYTES_3(A) (SQUASHFS_LOOKUP_BLOCKS(A) *\\",
          "454:      sizeof(long long))",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquash-3.c||squashfs-tools/unsquash-3.c": [
          "File: squashfs-tools/unsquash-3.c -> squashfs-tools/unsquash-3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: static squashfs_fragment_entry_3 *fragment_table;",
          "31: {",
          "32:  int res, i;",
          "37:  TRACE(\"read_fragment_table: %d fragments, reading %d fragment indexes \"",
          "38:   \"from 0x%llx\\n\", sBlk.s.fragments, indexes,",
          "39:   sBlk.s.fragment_table_start);",
          "46:  fragment_table = malloc(bytes);",
          "47:  if(fragment_table == NULL)",
          "48:   EXIT_UNSQUASH(\"read_fragment_table: failed to allocate \"",
          "49:    \"fragment table\\n\");",
          "51:  if(swap) {",
          "54:   res = read_fs_bytes(fd, sBlk.s.fragment_table_start,",
          "57:   if(res == FALSE) {",
          "58:    ERROR(\"read_fragment_table: failed to read fragment \"",
          "59:     \"table index\\n\");",
          "",
          "[Removed Lines]",
          "30: static int read_fragment_table(long long *directory_table_end)",
          "33:  int bytes = SQUASHFS_FRAGMENT_BYTES_3(sBlk.s.fragments);",
          "34:  int indexes = SQUASHFS_FRAGMENT_INDEXES_3(sBlk.s.fragments);",
          "35:  long long fragment_table_index[indexes];",
          "41:  if(sBlk.s.fragments == 0) {",
          "43:   return TRUE;",
          "44:  }",
          "52:   long long sfragment_table_index[indexes];",
          "55:    SQUASHFS_FRAGMENT_INDEX_BYTES_3(sBlk.s.fragments),",
          "56:    sfragment_table_index);",
          "",
          "[Added Lines]",
          "30: static long long *salloc_index_table(int indexes)",
          "32:  static long long *alloc_table = NULL;",
          "33:  static int alloc_size = 0;",
          "34:  int length = indexes * sizeof(long long);",
          "36:  if(alloc_size < length || length == 0) {",
          "37:   long long *table = realloc(alloc_table, length);",
          "39:   if(table == NULL && length !=0 )",
          "40:    EXIT_UNSQUASH(\"alloc_index_table: failed to allocate \"",
          "41:     \"index table\\n\");",
          "43:   alloc_table = table;",
          "44:   alloc_size = length;",
          "45:  }",
          "47:  return alloc_table;",
          "48: }",
          "51: static int read_fragment_table(long long *table_start)",
          "52: {",
          "61:  long long bytes = SQUASHFS_FRAGMENT_BYTES_3((long long) sBlk.s.fragments);",
          "62:  int indexes = SQUASHFS_FRAGMENT_INDEXES_3((long long) sBlk.s.fragments);",
          "63:  int length = SQUASHFS_FRAGMENT_INDEX_BYTES_3((long long) sBlk.s.fragments);",
          "64:  long long *fragment_table_index;",
          "70:  if(length != (*table_start - sBlk.s.fragment_table_start)) {",
          "71:   ERROR(\"read_fragment_table: Bad fragment count in super block\\n\");",
          "72:   return FALSE;",
          "73:  }",
          "79:  fragment_table_index = alloc_index_table(indexes);",
          "86:   long long *sfragment_table_index = salloc_index_table(indexes);",
          "89:    length, sfragment_table_index);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:    sfragment_table_index, indexes);",
          "64:  } else {",
          "65:   res = read_fs_bytes(fd, sBlk.s.fragment_table_start,",
          "68:   if(res == FALSE) {",
          "69:    ERROR(\"read_fragment_table: failed to read fragment \"",
          "70:     \"table index\\n\");",
          "",
          "[Removed Lines]",
          "66:    SQUASHFS_FRAGMENT_INDEX_BYTES_3(sBlk.s.fragments),",
          "67:    fragment_table_index);",
          "",
          "[Added Lines]",
          "99:    length, fragment_table_index);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:   int expected = (i + 1) != indexes ? SQUASHFS_METADATA_SIZE :",
          "77:      bytes & (SQUASHFS_METADATA_SIZE - 1);",
          "78:   int length = read_block(fd, fragment_table_index[i], NULL,",
          "80:    SQUASHFS_METADATA_SIZE));",
          "81:   TRACE(\"Read fragment table block %d, from 0x%llx, length %d\\n\",",
          "82:    i, fragment_table_index[i], length);",
          "",
          "[Removed Lines]",
          "79:    expected, ((char *) fragment_table) + (i *",
          "",
          "[Added Lines]",
          "111:    expected, ((char *) fragment_table) + ((long long) i *",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "397: }",
          "401: {",
          "405:   return FALSE;",
          "408:   return FALSE;",
          "410:  if(read_inode_table(sBlk.s.inode_table_start,",
          "411:     sBlk.s.directory_table_start) == FALSE)",
          "418:  return TRUE;",
          "419: }",
          "",
          "[Removed Lines]",
          "400: int read_filesystem_tables_3()",
          "402:  long long directory_table_end;",
          "404:  if(read_uids_guids_1() == FALSE)",
          "407:  if(read_fragment_table(&directory_table_end) == FALSE)",
          "412:   return FALSE;",
          "414:  if(read_directory_table(sBlk.s.directory_table_start,",
          "415:     directory_table_end) == FALSE)",
          "416:   return FALSE;",
          "",
          "[Added Lines]",
          "432: int read_ids(int ids, long long start, long long end, unsigned int **id_table)",
          "438:  int res;",
          "439:  int length = ids * sizeof(unsigned int);",
          "445:  if(length != (end - start)) {",
          "446:   ERROR(\"read_ids: Bad inode count in super block\\n\");",
          "447:   return FALSE;",
          "448:  }",
          "450:  TRACE(\"read_ids: no_ids %d\\n\", ids);",
          "453:  if(*id_table == NULL) {",
          "454:   ERROR(\"read_ids: failed to allocate uid/gid table\\n\");",
          "456:  }",
          "458:  if(swap) {",
          "459:   unsigned int *sid_table = malloc(length);",
          "461:   if(sid_table == NULL) {",
          "462:    ERROR(\"read_ids: failed to allocate uid/gid table\\n\");",
          "463:    return FALSE;",
          "464:   }",
          "466:   res = read_fs_bytes(fd, start, length, sid_table);",
          "467:   if(res == FALSE) {",
          "468:    ERROR(\"read_ids: failed to read uid/gid table\"",
          "469:     \"\\n\");",
          "470:    free(sid_table);",
          "471:    return FALSE;",
          "472:   }",
          "473:   SQUASHFS_SWAP_INTS_3((*id_table), sid_table, ids);",
          "474:   free(sid_table);",
          "475:  } else {",
          "476:   res = read_fs_bytes(fd, start, length, *id_table);",
          "477:   if(res == FALSE) {",
          "478:    ERROR(\"read_ids: failed to read uid/gid table\"",
          "479:     \"\\n\");",
          "480:    return FALSE;",
          "481:   }",
          "482:  }",
          "484:  return TRUE;",
          "485: }",
          "488: static int parse_exports_table(long long *table_start)",
          "489: {",
          "496:  int res;",
          "497:  int indexes = SQUASHFS_LOOKUP_BLOCKS_3((long long) sBlk.s.inodes);",
          "498:  int length = SQUASHFS_LOOKUP_BLOCK_BYTES_3((long long) sBlk.s.inodes);",
          "499:  long long *export_index_table;",
          "505:  if(length != (*table_start - sBlk.s.lookup_table_start)) {",
          "506:   ERROR(\"parse_exports_table: Bad inode count in super block\\n\");",
          "508:  }",
          "510:  export_index_table = alloc_index_table(indexes);",
          "512:  if(swap) {",
          "513:   long long *sexport_index_table = salloc_index_table(indexes);",
          "515:   res = read_fs_bytes(fd, sBlk.s.lookup_table_start,",
          "516:    length, sexport_index_table);",
          "517:   if(res == FALSE) {",
          "518:    ERROR(\"parse_exorts_table: failed to read export \"",
          "519:     \"index table\\n\");",
          "520:    return FALSE;",
          "521:   }",
          "522:   SQUASHFS_SWAP_LOOKUP_BLOCKS_3(export_index_table,",
          "523:    sexport_index_table, indexes);",
          "524:  } else {",
          "525:   res = read_fs_bytes(fd, sBlk.s.lookup_table_start, length,",
          "526:        export_index_table);",
          "527:   if(res == FALSE) {",
          "528:    ERROR(\"parse_exorts_table: failed to read export \"",
          "529:     \"index table\\n\");",
          "530:    return FALSE;",
          "531:   }",
          "532:  }",
          "541:  return TRUE;",
          "542: }",
          "545: int read_filesystem_tables_3()",
          "546: {",
          "547:  long long table_start;",
          "552:  if(sBlk.no_guids) {",
          "553:   if(sBlk.guid_start >= sBlk.s.bytes_used) {",
          "554:    ERROR(\"read_filesystem_tables: gid start too large in super block\\n\");",
          "555:    goto corrupted;",
          "556:   }",
          "558:   if(read_ids(sBlk.no_guids, sBlk.guid_start, sBlk.s.bytes_used, &guid_table) == FALSE)",
          "559:    goto corrupted;",
          "561:   table_start = sBlk.guid_start;",
          "562:  } else {",
          "564:   if(sBlk.guid_start != 0) {",
          "565:    ERROR(\"read_filesystem_tables: gid start too large in super block\\n\");",
          "566:    goto corrupted;",
          "567:   }",
          "569:   table_start = sBlk.s.bytes_used;",
          "570:  }",
          "572:  if(sBlk.uid_start >= table_start) {",
          "573:   ERROR(\"read_filesystem_tables: uid start too large in super block\\n\");",
          "574:   goto corrupted;",
          "575:  }",
          "578:  if(sBlk.no_uids == 0) {",
          "579:   ERROR(\"read_filesystem_tables: uid count bad in super block\\n\");",
          "580:   goto corrupted;",
          "581:  }",
          "583:  if(read_ids(sBlk.no_uids, sBlk.uid_start, table_start, &uid_table) == FALSE)",
          "584:   goto corrupted;",
          "586:  table_start = sBlk.uid_start;",
          "589:  if(sBlk.s.lookup_table_start != SQUASHFS_INVALID_BLK) {",
          "592:   if(sBlk.s.lookup_table_start >= table_start) {",
          "593:    ERROR(\"read_filesystem_tables: lookup table start too large in super block\\n\");",
          "594:    goto corrupted;",
          "595:   }",
          "597:   if(parse_exports_table(&table_start) == FALSE)",
          "598:    goto corrupted;",
          "599:  }",
          "602:  if(sBlk.s.fragments != 0) {",
          "605:   if(sBlk.s.fragment_table_start >= table_start) {",
          "606:    ERROR(\"read_filesystem_tables: fragment table start too large in super block\\n\");",
          "607:    goto corrupted;",
          "608:   }",
          "611:   if(sBlk.s.fragments > sBlk.s.inodes) {",
          "612:    ERROR(\"read_filesystem_tables: Bad fragment count in super block\\n\");",
          "613:    goto corrupted;",
          "614:   }",
          "616:   if(read_fragment_table(&table_start) == FALSE)",
          "617:    goto corrupted;",
          "618:  } else {",
          "623:   if(sBlk.s.fragment_table_start != table_start) {",
          "624:    ERROR(\"read_filesystem_tables: fragment table start invalid in super block\\n\");",
          "625:    goto corrupted;",
          "626:   }",
          "627:  }",
          "632:  if(sBlk.s.directory_table_start >= table_start) {",
          "633:   ERROR(\"read_filesystem_tables: directory table start too large in super block\\n\");",
          "634:   goto corrupted;",
          "635:  }",
          "637:  if(read_directory_table(sBlk.s.directory_table_start,",
          "638:     table_start) == FALSE)",
          "639:   goto corrupted;",
          "644:  if(sBlk.s.inode_table_start >= sBlk.s.directory_table_start) {",
          "645:   ERROR(\"read_filesystem_tables: inode table start too large in super block\\n\");",
          "646:   goto corrupted;",
          "647:  }",
          "651:   goto corrupted;",
          "654:  alloc_index_table(0);",
          "655:  salloc_index_table(0);",
          "659: corrupted:",
          "660:  ERROR(\"File system corruption detected\\n\");",
          "661:  alloc_index_table(0);",
          "662:  salloc_index_table(0);",
          "664:  return FALSE;",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c": [
          "File: squashfs-tools/unsquashfs.c -> squashfs-tools/unsquashfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2467: #define VERSION() \\",
          "2469:  printf(\"copyright (C) 2019 Phillip Lougher \"\\",
          "2470:   \"<phillip@squashfs.org.uk>\\n\\n\");\\",
          "2471:      printf(\"This program is free software; you can redistribute it and/or\"\\",
          "",
          "[Removed Lines]",
          "2468:  printf(\"unsquashfs version 4.3-git (2019/07/15)\\n\");\\",
          "",
          "[Added Lines]",
          "2468:  printf(\"unsquashfs version 4.3-git (2019/07/18)\\n\");\\",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquashfs.h||squashfs-tools/unsquashfs.h": [
          "File: squashfs-tools/unsquashfs.h -> squashfs-tools/unsquashfs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "277: extern struct inode *read_inode_4(unsigned int, unsigned int);",
          "278: extern struct dir *squashfs_opendir_4(unsigned int, unsigned int,",
          "279:  struct inode **);",
          "280: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280: extern long long *alloc_index_table(int);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a6b75b11134c06d63477a1782ac631dcc559cb69",
      "candidate_info": {
        "commit_hash": "a6b75b11134c06d63477a1782ac631dcc559cb69",
        "repo": "plougher/squashfs-tools",
        "commit_url": "https://github.com/plougher/squashfs-tools/commit/a6b75b11134c06d63477a1782ac631dcc559cb69",
        "files": [
          "squashfs-tools/unsquash-1.c",
          "squashfs-tools/unsquash-2.c",
          "squashfs-tools/unsquash-3.c",
          "squashfs-tools/unsquash-4.c",
          "squashfs-tools/unsquashfs.c",
          "squashfs-tools/unsquashfs.h"
        ],
        "message": "unsquashfs: Make inode_table & directory_table local to each fs version\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
        "before_after_code_files": [
          "squashfs-tools/unsquash-1.c||squashfs-tools/unsquash-1.c",
          "squashfs-tools/unsquash-2.c||squashfs-tools/unsquash-2.c",
          "squashfs-tools/unsquash-3.c||squashfs-tools/unsquash-3.c",
          "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c",
          "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c",
          "squashfs-tools/unsquashfs.h||squashfs-tools/unsquashfs.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c",
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ],
          "candidate": [
            "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c",
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ]
        }
      },
      "candidate_diff": {
        "squashfs-tools/unsquash-1.c||squashfs-tools/unsquash-1.c": [
          "File: squashfs-tools/unsquash-1.c -> squashfs-tools/unsquash-1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"squashfs_compat.h\"",
          "28: static unsigned int *uid_table, *guid_table;",
          "30: void read_block_list_1(unsigned int *block_list, char *block_ptr, int blocks)",
          "31: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: static char *inode_table, *directory_table;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "376:   goto corrupted;",
          "377:  }",
          "381:   goto corrupted;",
          "",
          "[Removed Lines]",
          "379:  if(read_directory_table(sBlk.s.directory_table_start,",
          "380:     table_start) == FALSE)",
          "",
          "[Added Lines]",
          "380:  directory_table = read_directory_table(sBlk.s.directory_table_start,",
          "381:     table_start);",
          "382:  if(directory_table == NULL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "388:   goto corrupted;",
          "389:  }",
          "393:   goto corrupted;",
          "395:  return TRUE;",
          "",
          "[Removed Lines]",
          "391:  if(read_inode_table(sBlk.s.inode_table_start,",
          "392:     sBlk.s.directory_table_start) == FALSE)",
          "",
          "[Added Lines]",
          "393:  inode_table = read_inode_table(sBlk.s.inode_table_start,",
          "394:     sBlk.s.directory_table_start);",
          "395:  if(inode_table == NULL)",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquash-2.c||squashfs-tools/unsquash-2.c": [
          "File: squashfs-tools/unsquash-2.c -> squashfs-tools/unsquash-2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: static squashfs_fragment_entry_2 *fragment_table;",
          "29: static unsigned int *uid_table, *guid_table;",
          "31: void read_block_list_2(unsigned int *block_list, char *block_ptr, int blocks)",
          "32: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: static char *inode_table, *directory_table;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "377:   goto corrupted;",
          "378:  }",
          "382:   goto corrupted;",
          "",
          "[Removed Lines]",
          "380:  if(read_directory_table(sBlk.s.directory_table_start,",
          "381:     table_start) == FALSE)",
          "",
          "[Added Lines]",
          "381:  directory_table = read_directory_table(sBlk.s.directory_table_start,",
          "382:     table_start);",
          "383:  if(directory_table == NULL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "389:   goto corrupted;",
          "390:  }",
          "394:   goto corrupted;",
          "396:  return TRUE;",
          "",
          "[Removed Lines]",
          "392:  if(read_inode_table(sBlk.s.inode_table_start,",
          "393:     sBlk.s.directory_table_start) == FALSE)",
          "",
          "[Added Lines]",
          "394:  inode_table = read_inode_table(sBlk.s.inode_table_start,",
          "395:     sBlk.s.directory_table_start);",
          "396:  if(inode_table == NULL)",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquash-3.c||squashfs-tools/unsquash-3.c": [
          "File: squashfs-tools/unsquash-3.c -> squashfs-tools/unsquash-3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: static squashfs_fragment_entry_3 *fragment_table;",
          "29: static unsigned int *uid_table, *guid_table;",
          "31: static long long *salloc_index_table(int indexes)",
          "32: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: static char *inode_table, *directory_table;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "635:   goto corrupted;",
          "636:  }",
          "640:   goto corrupted;",
          "",
          "[Removed Lines]",
          "638:  if(read_directory_table(sBlk.s.directory_table_start,",
          "639:     table_start) == FALSE)",
          "",
          "[Added Lines]",
          "639:  directory_table = read_directory_table(sBlk.s.directory_table_start,",
          "640:     table_start);",
          "641:  if(directory_table == NULL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "647:   goto corrupted;",
          "648:  }",
          "652:   goto corrupted;",
          "655:  alloc_index_table(0);",
          "656:  salloc_index_table(0);",
          "",
          "[Removed Lines]",
          "650:  if(read_inode_table(sBlk.s.inode_table_start,",
          "651:     sBlk.s.directory_table_start) == FALSE)",
          "",
          "[Added Lines]",
          "652:  inode_table = read_inode_table(sBlk.s.inode_table_start,",
          "653:     sBlk.s.directory_table_start);",
          "654:  if(inode_table == NULL)",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c": [
          "File: squashfs-tools/unsquash-4.c -> squashfs-tools/unsquash-4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: static struct squashfs_fragment_entry *fragment_table;",
          "30: static unsigned int *id_table;",
          "32: long long *alloc_index_table(int indexes)",
          "33: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: static char *inode_table, *directory_table;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "590:   goto corrupted;",
          "591:  }",
          "595:   goto corrupted;",
          "",
          "[Removed Lines]",
          "593:  if(read_directory_table(sBlk.s.directory_table_start,",
          "594:     table_start) == FALSE)",
          "",
          "[Added Lines]",
          "594:  directory_table = read_directory_table(sBlk.s.directory_table_start,",
          "595:     table_start);",
          "596:  if(directory_table == NULL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "602:   goto corrupted;",
          "603:  }",
          "607:   goto corrupted;",
          "609:  if(no_xattrs)",
          "",
          "[Removed Lines]",
          "605:  if(read_inode_table(sBlk.s.inode_table_start,",
          "606:     sBlk.s.directory_table_start) == FALSE)",
          "",
          "[Added Lines]",
          "607:  inode_table = read_inode_table(sBlk.s.inode_table_start,",
          "608:     sBlk.s.directory_table_start);",
          "609:  if(inode_table == NULL)",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c": [
          "File: squashfs-tools/unsquashfs.c -> squashfs-tools/unsquashfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: int bytes = 0, swap, file_count = 0, dir_count = 0, sym_count = 0,",
          "57:  dev_count = 0, fifo_count = 0;",
          "58: int FAILED = 0;",
          "60: struct hash_table_entry *inode_table_hash[65536], *directory_table_hash[65536];",
          "61: int fd;",
          "62: unsigned int cached_frag = SQUASHFS_INVALID_FRAG;",
          "",
          "[Removed Lines]",
          "59: char *inode_table = NULL, *directory_table = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "731: }",
          "735: {",
          "736:  int res;",
          "737:  long long size = 0;",
          "738:  long long bytes = 0;",
          "740:  TRACE(\"read_inode_table: start %lld, end %lld\\n\", start, end);",
          "",
          "[Removed Lines]",
          "734: int read_inode_table(long long start, long long end)",
          "",
          "[Added Lines]",
          "733: void *read_inode_table(long long start, long long end)",
          "738:  void *inode_table = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "774:   }",
          "775:  }",
          "779: failed:",
          "780:  free(inode_table);",
          "781:  FAILED = TRUE;",
          "783: }",
          "",
          "[Removed Lines]",
          "777:  return TRUE;",
          "782:  return FALSE;",
          "",
          "[Added Lines]",
          "777:  return inode_table;",
          "782:  return NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1154: }",
          "1158: {",
          "1159:  int res;",
          "1160:  long long bytes = 0;",
          "1161:  long long size = 0;",
          "1163:  TRACE(\"read_directory_table: start %lld, end %lld\\n\", start, end);",
          "",
          "[Removed Lines]",
          "1157: int read_directory_table(long long start, long long end)",
          "",
          "[Added Lines]",
          "1157: void *read_directory_table(long long start, long long end)",
          "1162:  void *directory_table = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1198:   }",
          "1199:  }",
          "1203: failed:",
          "1204:  free(directory_table);",
          "1205:  FAILED = TRUE;",
          "1207: }",
          "",
          "[Removed Lines]",
          "1201:  return TRUE;",
          "1206:  return FALSE;",
          "",
          "[Added Lines]",
          "1202:  return directory_table;",
          "1207:  return NULL;",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquashfs.h||squashfs-tools/unsquashfs.h": [
          "File: squashfs-tools/unsquashfs.h -> squashfs-tools/unsquashfs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "224: extern struct super_block sBlk;",
          "225: extern squashfs_operations s_ops;",
          "226: extern int swap;",
          "228: extern struct hash_table_entry *inode_table_hash[65536],",
          "230: extern pthread_mutex_t screen_mutex;",
          "",
          "[Removed Lines]",
          "227: extern char *inode_table, *directory_table;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237: extern struct cache *fragment_cache, *data_cache;",
          "242: extern long long lookup_entry(struct hash_table_entry **, long long);",
          "243: extern int read_fs_bytes(int fd, long long, int, void *);",
          "244: extern int read_block(int, long long, long long *, int, void *);",
          "",
          "[Removed Lines]",
          "240: extern int read_inode_table(long long, long long);",
          "241: extern int read_directory_table(long long, long long);",
          "",
          "[Added Lines]",
          "239: extern void *read_inode_table(long long, long long);",
          "240: extern void *read_directory_table(long long, long long);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "832a7b9971053d4d741c3230f52e97afd250e956",
      "candidate_info": {
        "commit_hash": "832a7b9971053d4d741c3230f52e97afd250e956",
        "repo": "plougher/squashfs-tools",
        "commit_url": "https://github.com/plougher/squashfs-tools/commit/832a7b9971053d4d741c3230f52e97afd250e956",
        "files": [
          "squashfs-tools/unsquashfs.c"
        ],
        "message": "Unsquashfs: Fix potential NULL pointer dereference if decompressor not supported\n\nEarlier today, I received a report that an analysis driven fuzzer\nhas detected a potential NULL pointer dereference in Unsquashfs, when\na decompressor is not supported.\n\nThe cause scenario is as usual a combination of a couple of issues:\n\n1. If Unsquashfs has been compiled without support for a decompressor,\n   the corresponding decompression functions will be NULL.\n\n2. If Unsquashfs executing -stat detects the filesystem has\n   compression options, *and* the compression options are\n   compressed, the code will attempt to dereference\n   the NULL pointer pointing to the decompression function.\n\n3. The code checks whether the filesystem compression is supported\n   by Unsquashfs, and exits with an error if not.  But, this check is\n   deliberately done after the -stat option, because the -stat option\n   should be able to stat a filesystem even if the decompressor is\n   not supported, as printing the filesystem data should not need\n   support for the decompressor.\n\nObviously, as the compression options are never compressed, the\nabove scenario is in practice impossible to achieve, unless the\nfilesystem is corrupted.\n\nThis is easy to fix.  In the -stat function, if the decompressor\nis not supported, then skip reading and displaying the\ncompression options. As the decompressor is not supported, there\nis no function to display the options anyway.\n\nReported-By: Sebastian Neef <contact@0day.work>\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
        "before_after_code_files": [
          "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ],
          "candidate": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ]
        }
      },
      "candidate_diff": {
        "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c": [
          "File: squashfs-tools/unsquashfs.c -> squashfs-tools/unsquashfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1669:    char buffer[SQUASHFS_METADATA_SIZE] __attribute__ ((aligned));",
          "1670:    int bytes;",
          "1679:   }",
          "1680:  }",
          "",
          "[Removed Lines]",
          "1672:    bytes = read_block(fd, sizeof(sBlk.s), NULL, 0, buffer);",
          "1673:    if(bytes == 0) {",
          "1674:     ERROR(\"Failed to read compressor options\\n\");",
          "1675:     return;",
          "1676:    }",
          "1678:    compressor_display_options(comp, buffer, bytes);",
          "",
          "[Added Lines]",
          "1672:    if(!comp->supported)",
          "1673:     printf(\"\\tCould not display compressor options, because %s compression is not supported\\n\",",
          "1674:       comp->name);",
          "1675:    else {",
          "1676:     bytes = read_block(fd, sizeof(sBlk.s), NULL, 0, buffer);",
          "1677:     if(bytes == 0) {",
          "1678:      ERROR(\"Failed to read compressor options\\n\");",
          "1679:      return;",
          "1680:     }",
          "1682:     compressor_display_options(comp, buffer, bytes);",
          "1683:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2502: #define VERSION() \\",
          "2505:   \"<phillip@squashfs.org.uk>\\n\\n\");\\",
          "2506:      printf(\"This program is free software; you can redistribute it and/or\"\\",
          "2507:   \"\\n\");\\",
          "",
          "[Removed Lines]",
          "2503:  printf(\"unsquashfs version 4.3-git (2017/11/29)\\n\");\\",
          "2504:  printf(\"copyright (C) 2017 Phillip Lougher \"\\",
          "",
          "[Added Lines]",
          "2508:  printf(\"unsquashfs version 4.3-git (2019/06/07)\\n\");\\",
          "2509:  printf(\"copyright (C) 2019 Phillip Lougher \"\\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "643cc4892cb7ad871e9de1c5e9220a8776768d10",
      "candidate_info": {
        "commit_hash": "643cc4892cb7ad871e9de1c5e9220a8776768d10",
        "repo": "plougher/squashfs-tools",
        "commit_url": "https://github.com/plougher/squashfs-tools/commit/643cc4892cb7ad871e9de1c5e9220a8776768d10",
        "files": [
          "squashfs-tools/unsquash-1.c",
          "squashfs-tools/unsquashfs.c",
          "squashfs-tools/unsquashfs.h"
        ],
        "message": "unsquashfs-1: Add more sanity checks + fix CVE-2015-4645/6\n\nThese are the fixes for 1.x Squashfs filesystems.\n\nAdd more filesystem table sanity checks to Unsquashfs-1 and\nalso properly fix CVE-2015-4645 and CVE-2015-4646.\n\nThe CVEs were raised due to Unsquashfs having variable\noveflow and stack overflow in a number of vulnerable\nfunctions.\n\nThe suggested patch only \"fixed\" one such function and fixed\nit badly, and so it was buggy and introduced extra bugs!\n\nThe suggested patch was not only buggy, but, it used the\nessentially wrong approach too.  It was \"fixing\" the\nsymptom but not the cause.  The symptom is wrong values\ncausing overflow, the cause is filesystem corruption.\nThis corruption should be detected and the filesystem\nrejected *before* trying to allocate memory.\n\nThis patch applies the following fixes:\n\n1. The filesystem super-block tables are checked, and the values\n   must match across the filesystem.\n\n   This will trap corrupted filesystems created by Mksquashfs.\n\n2. The maximum (theorectical) size the filesystem tables could grow\n   to, were analysed, and some variables were increased from int to\n   long long.\n\n   This analysis has been added as comments.\n\n3. Stack allocation was removed.\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
        "before_after_code_files": [
          "squashfs-tools/unsquash-1.c||squashfs-tools/unsquash-1.c",
          "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c",
          "squashfs-tools/unsquashfs.h||squashfs-tools/unsquashfs.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ],
          "candidate": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ]
        }
      },
      "candidate_diff": {
        "squashfs-tools/unsquash-1.c||squashfs-tools/unsquash-1.c": [
          "File: squashfs-tools/unsquash-1.c -> squashfs-tools/unsquash-1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "311: }",
          "315: {",
          "339:   }",
          "342:  } else {",
          "349:   }",
          "350:  }",
          "365:  if(read_directory_table(sBlk.s.directory_table_start,",
          "369:  return TRUE;",
          "370: }",
          "",
          "[Removed Lines]",
          "314: int read_uids_guids_1()",
          "316:  int res;",
          "318:  TRACE(\"read_uids_guids: no_uids %d, no_guids %d\\n\", sBlk.no_uids,",
          "319:   sBlk.no_guids);",
          "321:  uid_table = malloc((sBlk.no_uids + sBlk.no_guids) *",
          "322:   sizeof(unsigned int));",
          "323:  if(uid_table == NULL) {",
          "324:   ERROR(\"read_uids_guids: failed to allocate uid/gid table\\n\");",
          "325:   return FALSE;",
          "326:  }",
          "328:  guid_table = uid_table + sBlk.no_uids;",
          "330:  if(swap) {",
          "331:   unsigned int suid_table[sBlk.no_uids + sBlk.no_guids];",
          "333:   res = read_fs_bytes(fd, sBlk.uid_start, (sBlk.no_uids +",
          "334:    sBlk.no_guids) * sizeof(unsigned int), suid_table);",
          "335:   if(res == FALSE) {",
          "336:    ERROR(\"read_uids_guids: failed to read uid/gid table\"",
          "337:     \"\\n\");",
          "338:    return FALSE;",
          "340:   SQUASHFS_SWAP_INTS_3(uid_table, suid_table,",
          "341:    sBlk.no_uids + sBlk.no_guids);",
          "343:   res = read_fs_bytes(fd, sBlk.uid_start, (sBlk.no_uids +",
          "344:    sBlk.no_guids) * sizeof(unsigned int), uid_table);",
          "345:   if(res == FALSE) {",
          "346:    ERROR(\"read_uids_guids: failed to read uid/gid table\"",
          "347:     \"\\n\");",
          "348:    return FALSE;",
          "352:  return TRUE;",
          "353: }",
          "356: int read_filesystem_tables_1()",
          "357: {",
          "358:  if(read_uids_guids_1() == FALSE)",
          "359:   return FALSE;",
          "361:  if(read_inode_table(sBlk.s.inode_table_start,",
          "362:     sBlk.s.directory_table_start) == FALSE)",
          "363:   return FALSE;",
          "366:     sBlk.uid_start) == FALSE)",
          "367:   return FALSE;",
          "",
          "[Added Lines]",
          "314: int read_filesystem_tables_1()",
          "316:  long long table_start;",
          "321:  if(sBlk.no_guids) {",
          "322:   if(sBlk.guid_start >= sBlk.s.bytes_used) {",
          "323:    ERROR(\"read_filesystem_tables: gid start too large in super block\\n\");",
          "324:    goto corrupted;",
          "325:   }",
          "328:   if(sBlk.no_guids > 15) {",
          "329:    ERROR(\"read_filesystem_tables: gids too large in super block\\n\");",
          "330:    goto corrupted;",
          "333:   if(read_ids(sBlk.no_guids, sBlk.guid_start, sBlk.s.bytes_used, &guid_table) == FALSE)",
          "334:    goto corrupted;",
          "336:   table_start = sBlk.guid_start;",
          "339:   if(sBlk.guid_start != 0) {",
          "340:    ERROR(\"read_filesystem_tables: gid start too large in super block\\n\");",
          "341:    goto corrupted;",
          "344:   table_start = sBlk.s.bytes_used;",
          "347:  if(sBlk.uid_start >= table_start) {",
          "348:   ERROR(\"read_filesystem_tables: uid start too large in super block\\n\");",
          "349:   goto corrupted;",
          "350:  }",
          "353:  if(sBlk.no_uids == 0) {",
          "354:   ERROR(\"read_filesystem_tables: uid count bad in super block\\n\");",
          "355:   goto corrupted;",
          "356:  }",
          "359:  if(sBlk.no_uids > 48) {",
          "360:   ERROR(\"read_filesystem_tables: uids too large in super block\\n\");",
          "361:   goto corrupted;",
          "362:  }",
          "364:  if(read_ids(sBlk.no_uids, sBlk.uid_start, table_start, &uid_table) == FALSE)",
          "365:   goto corrupted;",
          "367:  table_start = sBlk.uid_start;",
          "372:  if(sBlk.s.directory_table_start >= table_start) {",
          "373:   ERROR(\"read_filesystem_tables: directory table start too large in super block\\n\");",
          "374:   goto corrupted;",
          "375:  }",
          "378:     table_start) == FALSE)",
          "379:   goto corrupted;",
          "384:  if(sBlk.s.inode_table_start >= sBlk.s.directory_table_start) {",
          "385:   ERROR(\"read_filesystem_tables: inode table start too large in super block\\n\");",
          "386:   goto corrupted;",
          "387:  }",
          "389:  if(read_inode_table(sBlk.s.inode_table_start,",
          "390:     sBlk.s.directory_table_start) == FALSE)",
          "391:   goto corrupted;",
          "395: corrupted:",
          "396:  ERROR(\"File system corruption detected\\n\");",
          "397:  return FALSE;",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c": [
          "File: squashfs-tools/unsquashfs.c -> squashfs-tools/unsquashfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2467: #define VERSION() \\",
          "2469:  printf(\"copyright (C) 2019 Phillip Lougher \"\\",
          "2470:   \"<phillip@squashfs.org.uk>\\n\\n\");\\",
          "2471:      printf(\"This program is free software; you can redistribute it and/or\"\\",
          "",
          "[Removed Lines]",
          "2468:  printf(\"unsquashfs version 4.3-git (2019/07/18)\\n\");\\",
          "",
          "[Added Lines]",
          "2468:  printf(\"unsquashfs version 4.3-git (2019/07/19)\\n\");\\",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquashfs.h||squashfs-tools/unsquashfs.h": [
          "File: squashfs-tools/unsquashfs.h -> squashfs-tools/unsquashfs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "254: extern struct inode *read_inode_1(unsigned int, unsigned int);",
          "255: extern struct dir *squashfs_opendir_1(unsigned int, unsigned int,",
          "256:  struct inode **);",
          "260: extern void read_block_list_2(unsigned int *, char *, int);",
          "",
          "[Removed Lines]",
          "257: extern int read_uids_guids_1();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95230e2c99ddb927ee41ef7e9287d354ed1ce373",
      "candidate_info": {
        "commit_hash": "95230e2c99ddb927ee41ef7e9287d354ed1ce373",
        "repo": "plougher/squashfs-tools",
        "commit_url": "https://github.com/plougher/squashfs-tools/commit/95230e2c99ddb927ee41ef7e9287d354ed1ce373",
        "files": [
          "squashfs-tools/unsquash-1.c",
          "squashfs-tools/unsquash-2.c",
          "squashfs-tools/unsquash-3.c",
          "squashfs-tools/unsquash-4.c",
          "squashfs-tools/unsquashfs.c",
          "squashfs-tools/unsquashfs.h"
        ],
        "message": "unsquashfs: restructure interface between fs versions\n\nNow that all fs specific operations are specific to each\nversion, we can make them static and export them via\na structure passed back from read_filsystem_tables().\n\nThis makes the interface cleaner.\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
        "before_after_code_files": [
          "squashfs-tools/unsquash-1.c||squashfs-tools/unsquash-1.c",
          "squashfs-tools/unsquash-2.c||squashfs-tools/unsquash-2.c",
          "squashfs-tools/unsquash-3.c||squashfs-tools/unsquash-3.c",
          "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c",
          "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c",
          "squashfs-tools/unsquashfs.h||squashfs-tools/unsquashfs.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c",
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ],
          "candidate": [
            "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c",
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ]
        }
      },
      "candidate_diff": {
        "squashfs-tools/unsquash-1.c||squashfs-tools/unsquash-1.c": [
          "File: squashfs-tools/unsquash-1.c -> squashfs-tools/unsquash-1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: static unsigned int *uid_table, *guid_table;",
          "29: static char *inode_table, *directory_table;",
          "32: {",
          "33:  unsigned short block_size;",
          "34:  int i;",
          "",
          "[Removed Lines]",
          "31: void read_block_list_1(unsigned int *block_list, char *block_ptr, int blocks)",
          "",
          "[Added Lines]",
          "30: static squashfs_operations ops;",
          "32: static void read_block_list(unsigned int *block_list, char *block_ptr, int blocks)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: }",
          "53: {",
          "54:  static union squashfs_inode_header_1 header;",
          "55:  long long start = sBlk.s.inode_table_start + start_block;",
          "",
          "[Removed Lines]",
          "52: struct inode *read_inode_1(unsigned int start_block, unsigned int offset)",
          "",
          "[Added Lines]",
          "53: static struct inode *read_inode(unsigned int start_block, unsigned int offset)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196: }",
          "200:  struct inode **i)",
          "201: {",
          "202:  squashfs_dir_header_2 dirh;",
          "",
          "[Removed Lines]",
          "199: struct dir *squashfs_opendir_1(unsigned int block_start, unsigned int offset,",
          "",
          "[Added Lines]",
          "200: static struct dir *squashfs_opendir(unsigned int block_start, unsigned int offset,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "314: }",
          "318: {",
          "319:  long long table_start;",
          "",
          "[Removed Lines]",
          "317: int read_filesystem_tables_1()",
          "",
          "[Added Lines]",
          "318: squashfs_operations *read_filesystem_tables_1()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "395:  if(inode_table == NULL)",
          "396:   goto corrupted;",
          "400: corrupted:",
          "401:  ERROR(\"File system corruption detected\\n\");",
          "403: }",
          "",
          "[Removed Lines]",
          "398:  return TRUE;",
          "402:  return FALSE;",
          "",
          "[Added Lines]",
          "399:  return &ops;",
          "403:  return NULL;",
          "407: static squashfs_operations ops = {",
          "408:  .opendir = squashfs_opendir,",
          "409:  .read_block_list = read_block_list,",
          "410:  .read_inode = read_inode",
          "411: };",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquash-2.c||squashfs-tools/unsquash-2.c": [
          "File: squashfs-tools/unsquash-2.c -> squashfs-tools/unsquash-2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: static squashfs_fragment_entry_2 *fragment_table;",
          "29: static unsigned int *uid_table, *guid_table;",
          "30: static char *inode_table, *directory_table;",
          "33: {",
          "34:  TRACE(\"read_block_list: blocks %d\\n\", blocks);",
          "",
          "[Removed Lines]",
          "32: void read_block_list_2(unsigned int *block_list, char *block_ptr, int blocks)",
          "",
          "[Added Lines]",
          "31: static squashfs_operations ops;",
          "33: static void read_block_list(unsigned int *block_list, char *block_ptr, int blocks)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142: }",
          "146: {",
          "147:  TRACE(\"read_fragment: reading fragment %d\\n\", fragment);",
          "",
          "[Removed Lines]",
          "145: void read_fragment_2(unsigned int fragment, long long *start_block, int *size)",
          "",
          "[Added Lines]",
          "146: static void read_fragment(unsigned int fragment, long long *start_block, int *size)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "152: }",
          "156: {",
          "157:  static union squashfs_inode_header_2 header;",
          "158:  long long start = sBlk.s.inode_table_start + start_block;",
          "",
          "[Removed Lines]",
          "155: struct inode *read_inode_2(unsigned int start_block, unsigned int offset)",
          "",
          "[Added Lines]",
          "156: static struct inode *read_inode(unsigned int start_block, unsigned int offset)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "297: }",
          "301:  struct inode **i)",
          "302: {",
          "303:  squashfs_dir_header_2 dirh;",
          "",
          "[Removed Lines]",
          "300: struct dir *squashfs_opendir_2(unsigned int block_start, unsigned int offset,",
          "",
          "[Added Lines]",
          "301: static struct dir *squashfs_opendir(unsigned int block_start, unsigned int offset,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "415: }",
          "419: {",
          "420:  long long table_start;",
          "",
          "[Removed Lines]",
          "418: int read_filesystem_tables_2()",
          "",
          "[Added Lines]",
          "419: squashfs_operations *read_filesystem_tables_2()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "512:  if(inode_table == NULL)",
          "513:   goto corrupted;",
          "517: corrupted:",
          "518:  ERROR(\"File system corruption detected\\n\");",
          "520: }",
          "",
          "[Removed Lines]",
          "515:  return TRUE;",
          "519:  return FALSE;",
          "",
          "[Added Lines]",
          "516:  return &ops;",
          "520:  return NULL;",
          "524: static squashfs_operations ops = {",
          "525:  .opendir = squashfs_opendir,",
          "526:  .read_fragment = read_fragment,",
          "527:  .read_block_list = read_block_list,",
          "528:  .read_inode = read_inode",
          "529: };",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquash-3.c||squashfs-tools/unsquash-3.c": [
          "File: squashfs-tools/unsquash-3.c -> squashfs-tools/unsquash-3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: static squashfs_fragment_entry_3 *fragment_table;",
          "29: static unsigned int *uid_table, *guid_table;",
          "30: static char *inode_table, *directory_table;",
          "32: static long long *salloc_index_table(int indexes)",
          "33: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: static squashfs_operations ops;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: }",
          "54: {",
          "55:  TRACE(\"read_block_list: blocks %d\\n\", blocks);",
          "",
          "[Removed Lines]",
          "53: void read_block_list_3(unsigned int *block_list, char *block_ptr, int blocks)",
          "",
          "[Added Lines]",
          "54: static void read_block_list(unsigned int *block_list, char *block_ptr, int blocks)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147: }",
          "151: {",
          "152:  TRACE(\"read_fragment: reading fragment %d\\n\", fragment);",
          "",
          "[Removed Lines]",
          "150: void read_fragment_3(unsigned int fragment, long long *start_block, int *size)",
          "",
          "[Added Lines]",
          "151: static void read_fragment(unsigned int fragment, long long *start_block, int *size)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "157: }",
          "161: {",
          "162:  static union squashfs_inode_header_3 header;",
          "163:  long long start = sBlk.s.inode_table_start + start_block;",
          "",
          "[Removed Lines]",
          "160: struct inode *read_inode_3(unsigned int start_block, unsigned int offset)",
          "",
          "[Added Lines]",
          "161: static struct inode *read_inode(unsigned int start_block, unsigned int offset)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "323: }",
          "327:  struct inode **i)",
          "328: {",
          "329:  squashfs_dir_header_3 dirh;",
          "",
          "[Removed Lines]",
          "326: struct dir *squashfs_opendir_3(unsigned int block_start, unsigned int offset,",
          "",
          "[Added Lines]",
          "327: static struct dir *squashfs_opendir(unsigned int block_start, unsigned int offset,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "555: }",
          "559: {",
          "560:  long long table_start;",
          "",
          "[Removed Lines]",
          "558: int read_filesystem_tables_3()",
          "",
          "[Added Lines]",
          "559: squashfs_operations *read_filesystem_tables_3()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "668:  alloc_index_table(0);",
          "669:  salloc_index_table(0);",
          "673: corrupted:",
          "674:  ERROR(\"File system corruption detected\\n\");",
          "675:  alloc_index_table(0);",
          "676:  salloc_index_table(0);",
          "679: }",
          "",
          "[Removed Lines]",
          "671:  return TRUE;",
          "678:  return FALSE;",
          "",
          "[Added Lines]",
          "672:  return &ops;",
          "679:  return NULL;",
          "683: static squashfs_operations ops = {",
          "684:  .opendir = squashfs_opendir,",
          "685:  .read_fragment = read_fragment,",
          "686:  .read_block_list = read_block_list,",
          "687:  .read_inode = read_inode",
          "688: };",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c": [
          "File: squashfs-tools/unsquash-4.c -> squashfs-tools/unsquash-4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: static struct squashfs_fragment_entry *fragment_table;",
          "30: static unsigned int *id_table;",
          "31: static char *inode_table, *directory_table;",
          "33: long long *alloc_index_table(int indexes)",
          "34: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: static squashfs_operations ops;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: }",
          "55: {",
          "56:  TRACE(\"read_block_list: blocks %d\\n\", blocks);",
          "",
          "[Removed Lines]",
          "54: void read_block_list_4(unsigned int *block_list, char *block_ptr, int blocks)",
          "",
          "[Added Lines]",
          "55: static void read_block_list(unsigned int *block_list, char *block_ptr, int blocks)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126: }",
          "130: {",
          "131:  TRACE(\"read_fragment: reading fragment %d\\n\", fragment);",
          "",
          "[Removed Lines]",
          "129: void read_fragment_4(unsigned int fragment, long long *start_block, int *size)",
          "",
          "[Added Lines]",
          "130: static void read_fragment(unsigned int fragment, long long *start_block, int *size)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "138: }",
          "142: {",
          "143:  static union squashfs_inode_header header;",
          "144:  long long start = sBlk.s.inode_table_start + start_block;",
          "",
          "[Removed Lines]",
          "141: struct inode *read_inode_4(unsigned int start_block, unsigned int offset)",
          "",
          "[Added Lines]",
          "142: static struct inode *read_inode(unsigned int start_block, unsigned int offset)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "291: }",
          "295:  struct inode **i)",
          "296: {",
          "297:  struct squashfs_dir_header dirh;",
          "",
          "[Removed Lines]",
          "294: struct dir *squashfs_opendir_4(unsigned int block_start, unsigned int offset,",
          "",
          "[Added Lines]",
          "295: static struct dir *squashfs_opendir(unsigned int block_start, unsigned int offset,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "508: }",
          "512: {",
          "513:  long long table_start;",
          "",
          "[Removed Lines]",
          "511: int read_filesystem_tables_4()",
          "",
          "[Added Lines]",
          "512: squashfs_operations *read_filesystem_tables_4()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "624:  alloc_index_table(0);",
          "628: corrupted:",
          "629:  ERROR(\"File system corruption detected\\n\");",
          "630:  alloc_index_table(0);",
          "633: }",
          "",
          "[Removed Lines]",
          "626:  return TRUE;",
          "632:  return FALSE;",
          "",
          "[Added Lines]",
          "627:  return &ops;",
          "633:  return NULL;",
          "637: static squashfs_operations ops = {",
          "638:  .opendir = squashfs_opendir,",
          "639:  .read_fragment = read_fragment,",
          "640:  .read_block_list = read_block_list,",
          "641:  .read_inode = read_inode",
          "642: };",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c": [
          "File: squashfs-tools/unsquashfs.c -> squashfs-tools/unsquashfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: int processors = -1;",
          "52: struct super_block sBlk;",
          "54: struct compressor *comp;",
          "56: int bytes = 0, swap, file_count = 0, dir_count = 0, sym_count = 0,",
          "",
          "[Removed Lines]",
          "53: squashfs_operations s_ops;",
          "",
          "[Added Lines]",
          "53: squashfs_operations *s_ops;",
          "54: squashfs_operations *(*read_filesystem_tables)();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "990:  if(block_list == NULL)",
          "991:   EXIT_UNSQUASH(\"write_file: unable to malloc block list\\n\");",
          "",
          "[Removed Lines]",
          "993:  s_ops.read_block_list(block_list, inode->block_ptr, inode->blocks);",
          "",
          "[Added Lines]",
          "994:  s_ops->read_block_list(block_list, inode->block_ptr, inode->blocks);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1026:   if(block == NULL)",
          "1027:    EXIT_UNSQUASH(\"write_file: unable to malloc file\\n\");",
          "1029:   block->buffer = cache_get(fragment_cache, start, size);",
          "1030:   block->offset = inode->offset;",
          "1031:   block->size = inode->frag_bytes;",
          "",
          "[Removed Lines]",
          "1028:   s_ops.read_fragment(inode->fragment, &start, &size);",
          "",
          "[Added Lines]",
          "1029:   s_ops->read_fragment(inode->fragment, &start, &size);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1472:  char *name;",
          "1473:  struct pathnames *new;",
          "1474:  struct inode *i;",
          "1477:  if(dir == NULL)",
          "1478:   return;",
          "",
          "[Removed Lines]",
          "1475:  struct dir *dir = s_ops.squashfs_opendir(start_block, offset, &i);",
          "",
          "[Added Lines]",
          "1476:  struct dir *dir = s_ops->opendir(start_block, offset, &i);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1497:   else if(new == NULL) {",
          "1498:    if(type == SQUASHFS_FILE_TYPE ||",
          "1499:      type == SQUASHFS_LREG_TYPE) {",
          "1501:     if(created_inode[i->inode_number - 1] == NULL) {",
          "1502:      created_inode[i->inode_number - 1] =",
          "1503:       (char *) i;",
          "",
          "[Removed Lines]",
          "1500:     i = s_ops.read_inode(start_block, offset);",
          "",
          "[Added Lines]",
          "1501:     i = s_ops->read_inode(start_block, offset);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1524:  char *name;",
          "1525:  struct pathnames *new;",
          "1526:  struct inode *i;",
          "1529:  if(dir == NULL) {",
          "1530:   ERROR(\"dir_scan: failed to read directory %s, skipping\\n\",",
          "",
          "[Removed Lines]",
          "1527:  struct dir *dir = s_ops.squashfs_opendir(start_block, offset, &i);",
          "",
          "[Added Lines]",
          "1528:  struct dir *dir = s_ops->opendir(start_block, offset, &i);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1590:   } else if(new == NULL) {",
          "1591:    update_info(pathname);",
          "1595:    if(lsonly || info)",
          "1596:     print_filename(pathname, i);",
          "",
          "[Removed Lines]",
          "1593:    i = s_ops.read_inode(start_block, offset);",
          "",
          "[Added Lines]",
          "1594:    i = s_ops->read_inode(start_block, offset);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1791:  if(sBlk_4.s_magic == SQUASHFS_MAGIC && sBlk_4.s_major == 4 &&",
          "1792:    sBlk_4.s_minor == 0) {",
          "1798:   memcpy(&sBlk, &sBlk_4, sizeof(sBlk_4));",
          "",
          "[Removed Lines]",
          "1793:   s_ops.read_filesystem_tables = read_filesystem_tables_4;",
          "1794:   s_ops.squashfs_opendir = squashfs_opendir_4;",
          "1795:   s_ops.read_fragment = read_fragment_4;",
          "1796:   s_ops.read_block_list = read_block_list_4;",
          "1797:   s_ops.read_inode = read_inode_4;",
          "",
          "[Added Lines]",
          "1794:   read_filesystem_tables = read_filesystem_tables_4;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1862:   if(sBlk.s.s_major == 1) {",
          "1863:    sBlk.s.block_size = sBlk_3.block_size_1;",
          "1864:    sBlk.s.fragment_table_start = sBlk.uid_start;",
          "1869:   } else {",
          "1870:    sBlk.s.fragment_table_start =",
          "1871:     sBlk_3.fragment_table_start_2;",
          "1877:   }",
          "1878:  } else if(sBlk.s.s_major == 3) {",
          "1884:  } else {",
          "1885:   ERROR(\"Filesystem on %s is (%d:%d), \", source, sBlk.s.s_major,",
          "1886:    sBlk.s.s_minor);",
          "",
          "[Removed Lines]",
          "1865:    s_ops.read_filesystem_tables = read_filesystem_tables_1;",
          "1866:    s_ops.squashfs_opendir = squashfs_opendir_1;",
          "1867:    s_ops.read_block_list = read_block_list_1;",
          "1868:    s_ops.read_inode = read_inode_1;",
          "1872:    s_ops.read_filesystem_tables = read_filesystem_tables_2;",
          "1873:    s_ops.squashfs_opendir = squashfs_opendir_2;",
          "1874:    s_ops.read_fragment = read_fragment_2;",
          "1875:    s_ops.read_block_list = read_block_list_2;",
          "1876:    s_ops.read_inode = read_inode_2;",
          "1879:   s_ops.read_filesystem_tables = read_filesystem_tables_3;",
          "1880:   s_ops.squashfs_opendir = squashfs_opendir_3;",
          "1881:   s_ops.read_fragment = read_fragment_3;",
          "1882:   s_ops.read_block_list = read_block_list_3;",
          "1883:   s_ops.read_inode = read_inode_3;",
          "",
          "[Added Lines]",
          "1862:    read_filesystem_tables = read_filesystem_tables_1;",
          "1866:    read_filesystem_tables = read_filesystem_tables_2;",
          "1869:   read_filesystem_tables = read_filesystem_tables_3;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2480: #define VERSION() \\",
          "2482:  printf(\"copyright (C) 2019 Phillip Lougher \"\\",
          "2483:   \"<phillip@squashfs.org.uk>\\n\\n\");\\",
          "2484:      printf(\"This program is free software; you can redistribute it and/or\"\\",
          "",
          "[Removed Lines]",
          "2481:  printf(\"unsquashfs version 4.3-git (2019/07/19)\\n\");\\",
          "",
          "[Added Lines]",
          "2467:  printf(\"unsquashfs version 4.3-git (2019/07/21)\\n\");\\",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2756:  memset(created_inode, 0, sBlk.s.inodes * sizeof(char *));",
          "2759:   EXIT_UNSQUASH(\"failed to read file system tables\\n\");",
          "2761:  if(path) {",
          "",
          "[Removed Lines]",
          "2758:  if(s_ops.read_filesystem_tables() == FALSE)",
          "",
          "[Added Lines]",
          "2744:  s_ops = read_filesystem_tables();",
          "2745:  if(s_ops == NULL)",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquashfs.h||squashfs-tools/unsquashfs.h": [
          "File: squashfs-tools/unsquashfs.h -> squashfs-tools/unsquashfs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "97: };",
          "99: typedef struct squashfs_operations {",
          "101:   unsigned int offset, struct inode **i);",
          "102:  void (*read_fragment)(unsigned int fragment, long long *start_block,",
          "103:   int *size);",
          "",
          "[Removed Lines]",
          "100:  struct dir *(*squashfs_opendir)(unsigned int block_start,",
          "",
          "[Added Lines]",
          "100:  struct dir *(*opendir)(unsigned int block_start,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:   int blocks);",
          "106:  struct inode *(*read_inode)(unsigned int start_block,",
          "107:   unsigned int offset);",
          "109: } squashfs_operations;",
          "111: struct test {",
          "",
          "[Removed Lines]",
          "108:  int (*read_filesystem_tables)();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "224: extern struct super_block sBlk;",
          "226: extern int swap;",
          "227: extern struct hash_table_entry *inode_table_hash[65536],",
          "",
          "[Removed Lines]",
          "225: extern squashfs_operations s_ops;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "247: extern void dump_cache(struct cache *);",
          "272: extern int read_ids(int, long long, long long, unsigned int **);",
          "282: extern long long *alloc_index_table(int);",
          "283: #endif",
          "",
          "[Removed Lines]",
          "250: extern void read_block_list_1(unsigned int *, char *, int);",
          "251: extern int read_filesystem_tables_1();",
          "252: extern struct inode *read_inode_1(unsigned int, unsigned int);",
          "253: extern struct dir *squashfs_opendir_1(unsigned int, unsigned int,",
          "254:  struct inode **);",
          "257: extern void read_block_list_2(unsigned int *, char *, int);",
          "258: extern int read_filesystem_tables_2();",
          "259: extern void read_fragment_2(unsigned int, long long *, int *);",
          "260: extern struct inode *read_inode_2(unsigned int, unsigned int);",
          "261: extern struct dir *squashfs_opendir_2(unsigned int, unsigned int,",
          "262:  struct inode **);",
          "265: extern void read_block_list_3(unsigned int *, char *, int);",
          "266: extern int read_fragment_table_3(long long *);",
          "267: extern int read_filesystem_tables_3();",
          "268: extern void read_fragment_3(unsigned int, long long *, int *);",
          "269: extern struct inode *read_inode_3(unsigned int, unsigned int);",
          "270: extern struct dir *squashfs_opendir_3(unsigned int, unsigned int,",
          "271:  struct inode **);",
          "275: extern void read_block_list_4(unsigned int *, char *, int);",
          "276: extern int read_fragment_table_4(long long *);",
          "277: extern int read_filesystem_tables_4();",
          "278: extern void read_fragment_4(unsigned int, long long *, int *);",
          "279: extern struct inode *read_inode_4(unsigned int, unsigned int);",
          "280: extern struct dir *squashfs_opendir_4(unsigned int, unsigned int,",
          "281:  struct inode **);",
          "",
          "[Added Lines]",
          "248: extern squashfs_operations *read_filesystem_tables_1();",
          "251: extern squashfs_operations *read_filesystem_tables_2();",
          "254: extern squashfs_operations *read_filesystem_tables_3();",
          "258: extern squashfs_operations *read_filesystem_tables_4();",
          "",
          "---------------"
        ]
      }
    }
  ]
}