{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "77f2cb66d1bdc83d7ff7651b0fd8a32294667c1d",
      "candidate_info": {
        "commit_hash": "77f2cb66d1bdc83d7ff7651b0fd8a32294667c1d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/77f2cb66d1bdc83d7ff7651b0fd8a32294667c1d",
        "files": [
          "src/node_version.h"
        ],
        "message": "Now working on 0.7.2",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NODE_MAJOR_VERSION 0",
          "30: #define NODE_MINOR_VERSION 7",
          "34: #ifndef NODE_STRINGIFY",
          "35: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "31: #define NODE_PATCH_VERSION 1",
          "32: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "31: #define NODE_PATCH_VERSION 2",
          "32: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f411405356cd184560507ce870a664e4ef5417f",
      "candidate_info": {
        "commit_hash": "5f411405356cd184560507ce870a664e4ef5417f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5f411405356cd184560507ce870a664e4ef5417f",
        "files": [
          "deps/uv/include/uv-private/ev.h",
          "deps/uv/src/unix/core.c",
          "deps/uv/src/unix/ev/ev.c",
          "deps/uv/src/uv-common.c",
          "deps/uv/src/win/util.c"
        ],
        "message": "deps: upgrade libuv to 649ad50",
        "before_after_code_files": [
          "deps/uv/include/uv-private/ev.h||deps/uv/include/uv-private/ev.h",
          "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c",
          "deps/uv/src/unix/ev/ev.c||deps/uv/src/unix/ev/ev.c",
          "deps/uv/src/uv-common.c||deps/uv/src/uv-common.c",
          "deps/uv/src/win/util.c||deps/uv/src/win/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/include/uv-private/ev.h||deps/uv/include/uv-private/ev.h": [
          "File: deps/uv/include/uv-private/ev.h -> deps/uv/include/uv-private/ev.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "623: };",
          "625: #if EV_PROTOTYPES",
          "",
          "[Removed Lines]",
          "626: void ev_run (EV_P_ ev_tstamp waittime);",
          "",
          "[Added Lines]",
          "626: void ev_run (EV_P_ int flags EV_CPP (= 0));",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c": [
          "File: deps/uv/src/unix/core.c -> deps/uv/src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "226: }",
          "239: static unsigned int uv__poll_timeout(uv_loop_t* loop) {",
          "240:   if (!uv__has_active_handles(loop))",
          "241:     return 0;",
          "",
          "[Removed Lines]",
          "229: static void uv__poll(uv_loop_t* loop, unsigned int timeout) {",
          "233:   ev_ref(loop->ev);",
          "234:   ev_run(loop->ev, timeout / 1000.);",
          "235:   ev_unref(loop->ev);",
          "236: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247: }",
          "250: static int uv__run(uv_loop_t* loop) {",
          "251:   uv_update_time(loop);",
          "252:   uv__run_timers(loop);",
          "253:   uv__run_idle(loop);",
          "264:   uv__run_closing_handles(loop);",
          "266:   return uv__has_active_handles(loop) || uv__has_active_reqs(loop);",
          "267: }",
          "",
          "[Removed Lines]",
          "255:   if (uv__has_active_handles(loop) || uv__has_active_reqs(loop)) {",
          "256:     uv__run_prepare(loop);",
          "260:     uv__poll(loop, uv__poll_timeout(loop));",
          "261:     uv__run_check(loop);",
          "262:   }",
          "",
          "[Added Lines]",
          "240: static void uv__poll(uv_loop_t* loop) {",
          "241:   void ev__run(EV_P_ ev_tstamp waittime);",
          "242:   ev_invoke_pending(loop->ev);",
          "243:   ev__run(loop->ev, uv__poll_timeout(loop) / 1000.);",
          "244:   ev_invoke_pending(loop->ev);",
          "245: }",
          "252:   uv__run_prepare(loop);",
          "253:   uv__poll(loop);",
          "254:   uv__run_check(loop);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "604:   uv__io_t* handle = container_of(w, uv__io_t, io_watcher);",
          "605:   u.data = handle->io_watcher.data;",
          "606:   u.cb(loop, handle, events & (EV_READ|EV_WRITE|EV_ERROR));",
          "614: }",
          "",
          "[Removed Lines]",
          "612:   if (loop->active_handles == 0)",
          "613:     ev_break(loop->ev, EVBREAK_ONE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/ev/ev.c||deps/uv/src/unix/ev/ev.c": [
          "File: deps/uv/src/unix/ev/ev.c -> deps/uv/src/unix/ev/ev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2389: }",
          "2391: void",
          "2393: {",
          "2394: #if EV_FEATURE_API",
          "2395:   ++loop_depth;",
          "",
          "[Removed Lines]",
          "2392: ev_run (EV_P_ ev_tstamp waittime)",
          "",
          "[Added Lines]",
          "2392: ev_run (EV_P_ int flags)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2426:           }",
          "2427: #endif",
          "2429:       if (expect_false (loop_done))",
          "2430:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2429: #if EV_PREPARE_ENABLE",
          "2431:       if (expect_false (preparecnt))",
          "2432:         {",
          "2433:           queue_events (EV_A_ (W *)prepares, preparecnt, EV_PREPARE);",
          "2434:           EV_INVOKE_PENDING;",
          "2435:         }",
          "2436: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2437:       fd_reify (EV_A);",
          "2439: #if EV_FEATURE_API",
          "2441: #endif",
          "2446:       EV_INVOKE_PENDING;",
          "2447:     }",
          "2450:   if (loop_done == EVBREAK_ONE)",
          "2451:     loop_done = EVBREAK_CANCEL;",
          "",
          "[Removed Lines]",
          "2440:       ++loop_count;",
          "2443:       backend_poll (EV_A_ waittime);",
          "2448:   while (0);",
          "",
          "[Added Lines]",
          "2449:       {",
          "2450:         ev_tstamp waittime  = 0.;",
          "2451:         ev_tstamp sleeptime = 0.;",
          "2454:         ev_tstamp prev_mn_now = mn_now;",
          "2457:         time_update (EV_A_ 1e100);",
          "2459:         if (expect_true (!(flags & EVRUN_NOWAIT || idleall || !activecnt)))",
          "2460:           {",
          "2461:             waittime = MAX_BLOCKTIME;",
          "2463:             if (timercnt)",
          "2464:               {",
          "2465:                 ev_tstamp to = ANHE_at (timers [HEAP0]) - mn_now + backend_fudge;",
          "2466:                 if (waittime > to) waittime = to;",
          "2467:               }",
          "2469: #if EV_PERIODIC_ENABLE",
          "2470:             if (periodiccnt)",
          "2471:               {",
          "2472:                 ev_tstamp to = ANHE_at (periodics [HEAP0]) - ev_rt_now + backend_fudge;",
          "2473:                 if (waittime > to) waittime = to;",
          "2474:               }",
          "2475: #endif",
          "2478:             if (expect_false (waittime < timeout_blocktime))",
          "2479:               waittime = timeout_blocktime;",
          "2482:             if (expect_false (io_blocktime))",
          "2483:               {",
          "2484:                 sleeptime = io_blocktime - (mn_now - prev_mn_now);",
          "2486:                 if (sleeptime > waittime - backend_fudge)",
          "2487:                   sleeptime = waittime - backend_fudge;",
          "2489:                 if (expect_true (sleeptime > 0.))",
          "2490:                   {",
          "2491:                     ev_sleep (sleeptime);",
          "2492:                     waittime -= sleeptime;",
          "2493:                   }",
          "2494:               }",
          "2495:           }",
          "2498:         ++loop_count;",
          "2499: #endif",
          "2501:         backend_poll (EV_A_ waittime);",
          "2505:         time_update (EV_A_ waittime + sleeptime);",
          "2506:       }",
          "2510: #if EV_PERIODIC_ENABLE",
          "2512: #endif",
          "2514: #if EV_IDLE_ENABLE",
          "2516:       idle_reify (EV_A);",
          "2517: #endif",
          "2519: #if EV_CHECK_ENABLE",
          "2521:       if (expect_false (checkcnt))",
          "2522:         queue_events (EV_A_ (W *)checks, checkcnt, EV_CHECK);",
          "2527:   while (expect_true (",
          "2528:     activecnt",
          "2529:     && !loop_done",
          "2530:     && !(flags & (EVRUN_ONCE | EVRUN_NOWAIT))",
          "2531:   ));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2455: #endif",
          "2456: }",
          "2458: void",
          "2459: ev_break (EV_P_ int how)",
          "2460: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2542: void",
          "2543: ev__run (EV_P_ ev_tstamp waittime)",
          "2544: {",
          "2545:   fd_reify (EV_A);",
          "2546:   backend_poll (EV_A_ waittime);",
          "2547: }",
          "",
          "---------------"
        ],
        "deps/uv/src/uv-common.c||deps/uv/src/uv-common.c": [
          "File: deps/uv/src/uv-common.c -> deps/uv/src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"uv.h\"",
          "23: #include \"uv-common.h\"",
          "25: #include <assert.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include <stdio.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329: }",
          "332: void uv_ref(uv_handle_t* handle) {",
          "333:   uv__handle_ref(handle);",
          "334: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "333: #ifndef NDEBUG",
          "334: static void uv__print_handles(uv_loop_t* loop, int only_active) {",
          "335:   const char* type;",
          "336:   ngx_queue_t* q;",
          "337:   uv_handle_t* h;",
          "339:   if (loop == NULL)",
          "340:     loop = uv_default_loop();",
          "342:   ngx_queue_foreach(q, &loop->handle_queue) {",
          "343:     h = ngx_queue_data(q, uv_handle_t, handle_queue);",
          "345:     if (only_active && !uv__is_active(h))",
          "346:       continue;",
          "348:     switch (h->type) {",
          "349: #define X(uc, lc) case UV_##uc: type = #lc; break;",
          "350:       UV_HANDLE_TYPE_MAP(X)",
          "351: #undef X",
          "352:       default: type = \"<unknown>\";",
          "353:     }",
          "355:     fprintf(stderr,",
          "356:             \"[%c%c%c] %-8s %p\\n\",",
          "357:             \"R-\"[!(h->flags & UV__HANDLE_REF)],",
          "358:             \"A-\"[!(h->flags & UV__HANDLE_ACTIVE)],",
          "359:             \"I-\"[!(h->flags & UV__HANDLE_INTERNAL)],",
          "360:             type,",
          "361:             (void*)h);",
          "362:   }",
          "363: }",
          "366: void uv_print_all_handles(uv_loop_t* loop) {",
          "367:   uv__print_handles(loop, 0);",
          "368: }",
          "371: void uv_print_active_handles(uv_loop_t* loop) {",
          "372:   uv__print_handles(loop, 1);",
          "373: }",
          "374: #endif",
          "",
          "---------------"
        ],
        "deps/uv/src/win/util.c||deps/uv/src/win/util.c": [
          "File: deps/uv/src/win/util.c -> deps/uv/src/win/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155: uv_err_t uv_cwd(char* buffer, size_t size) {",
          "156:   DWORD utf16_len;",
          "158:   int r;",
          "160:   if (buffer == NULL || size == 0) {",
          "",
          "[Removed Lines]",
          "157:   WCHAR utf16_buffer[MAX_PATH + 1];",
          "",
          "[Added Lines]",
          "157:   WCHAR utf16_buffer[MAX_PATH];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:   utf16_len = GetCurrentDirectoryW(MAX_PATH, utf16_buffer);",
          "165:   if (utf16_len == 0) {",
          "166:     return uv__new_sys_error(GetLastError());",
          "167:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:   } else if (utf16_len > MAX_PATH) {",
          "170:     return uv__new_artificial_error(UV_EIO);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "197: uv_err_t uv_chdir(const char* dir) {",
          "205:   }",
          "211:   }",
          "217:   }",
          "222:   }",
          "227:   }",
          "234:   }",
          "237: }",
          "",
          "[Removed Lines]",
          "198:   uv_err_t err;",
          "199:   wchar_t* utf16Buffer = NULL;",
          "200:   size_t utf16Size;",
          "202:   if (!dir) {",
          "203:     err.code = UV_EINVAL;",
          "204:     goto done;",
          "207:   utf16Size = uv_utf8_to_utf16(dir, NULL, 0);",
          "208:   if (!utf16Size) {",
          "209:     err = uv__new_sys_error(GetLastError());",
          "210:     goto done;",
          "213:   utf16Buffer = (wchar_t*)malloc(sizeof(wchar_t) * utf16Size);",
          "214:   if (!utf16Buffer) {",
          "215:     err.code = UV_ENOMEM;",
          "216:     goto done;",
          "219:   if (!uv_utf8_to_utf16(dir, utf16Buffer, utf16Size)) {",
          "220:     err = uv__new_sys_error(GetLastError());",
          "221:     goto done;",
          "224:   if (_wchdir(utf16Buffer) == -1) {",
          "225:     err = uv__new_sys_error(_doserrno);",
          "226:     goto done;",
          "229:   err = uv_ok_;",
          "231: done:",
          "232:   if (utf16Buffer) {",
          "233:     free(utf16Buffer);",
          "236:   return err;",
          "",
          "[Added Lines]",
          "202:   WCHAR utf16_buffer[MAX_PATH];",
          "203:   size_t utf16_len;",
          "204:   WCHAR drive_letter, env_var[4];",
          "206:   if (dir == NULL) {",
          "207:     return uv__new_artificial_error(UV_EINVAL);",
          "210:   if (MultiByteToWideChar(CP_UTF8,",
          "211:                           0,",
          "212:                           dir,",
          "213:                           -1,",
          "214:                           utf16_buffer,",
          "215:                           MAX_PATH) == 0) {",
          "216:     DWORD error = GetLastError();",
          "220:     if (error == ERROR_INSUFFICIENT_BUFFER) {",
          "221:       return uv__new_artificial_error(UV_ENAMETOOLONG);",
          "222:     } else {",
          "223:       return uv__new_sys_error(error);",
          "224:     }",
          "227:   if (!SetCurrentDirectoryW(utf16_buffer)) {",
          "228:     return uv__new_sys_error(GetLastError());",
          "234:   utf16_len = GetCurrentDirectoryW(MAX_PATH, utf16_buffer);",
          "235:   if (utf16_len == 0) {",
          "236:     return uv__new_sys_error(GetLastError());",
          "237:   } else if (utf16_len > MAX_PATH) {",
          "238:     return uv__new_artificial_error(UV_EIO);",
          "243:   if (utf16_buffer[utf16_len - 1] == L'\\\\' &&",
          "244:       !(utf16_len == 3 && utf16_buffer[1] == L':')) {",
          "245:     utf16_len--;",
          "246:     utf16_buffer[utf16_len] = L'\\0';",
          "249:   if (utf16_len < 2 || utf16_buffer[1] != L':') {",
          "252:     drive_letter = 0;",
          "253:   } else if (utf16_buffer[0] >= L'A' && utf16_buffer[0] <= L'Z') {",
          "254:     drive_letter = utf16_buffer[0];",
          "255:   } else if (utf16_buffer[0] >= L'a' && utf16_buffer[0] <= L'z') {",
          "257:     drive_letter = utf16_buffer[0] - L'a' + L'A';",
          "258:   } else {",
          "260:     drive_letter = 0;",
          "261:   }",
          "263:   if (drive_letter != 0) {",
          "265:     env_var[0] = L'=';",
          "266:     env_var[1] = drive_letter;",
          "267:     env_var[2] = L':';",
          "268:     env_var[3] = L'\\0';",
          "270:     if (!SetEnvironmentVariableW(env_var, utf16_buffer)) {",
          "271:       return uv__new_sys_error(GetLastError());",
          "272:     }",
          "275:   return uv_ok_;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48893af7bb7fef23a00b8fe672a1fd97e6cbd972",
      "candidate_info": {
        "commit_hash": "48893af7bb7fef23a00b8fe672a1fd97e6cbd972",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/48893af7bb7fef23a00b8fe672a1fd97e6cbd972",
        "files": [
          "deps/v8/src/objects.cc",
          "deps/v8/src/objects.h",
          "deps/v8/test/mjsunit/regress/regress-2156.js"
        ],
        "message": "Fix performance regression caused by r11202.\n\nR=erik.corry@gmail.com\nBUG=v8:2156,v8:2034\nTEST=mjsunit/regress/regress-2156,mjsunit/regress/regress-2034\n\nReview URL: https://chromiumcodereview.appspot.com/10539131\n\ngit-svn-id: https://v8.googlecode.com/svn/branches/bleeding_edge@11800 ce2b1a6d-e550-0410-aec6-3dcde31c8c00",
        "before_after_code_files": [
          "deps/v8/src/objects.cc||deps/v8/src/objects.cc",
          "deps/v8/src/objects.h||deps/v8/src/objects.h",
          "deps/v8/test/mjsunit/regress/regress-2156.js||deps/v8/test/mjsunit/regress/regress-2156.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/src/objects.cc||deps/v8/src/objects.cc": [
          "File: deps/v8/src/objects.cc -> deps/v8/src/objects.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1720:                                    Object* value,",
          "1721:                                    PropertyAttributes attributes,",
          "1722:                                    StrictModeFlag strict_mode,",
          "1724:   ASSERT(!IsJSGlobalProxy());",
          "1725:   Map* map_of_this = map();",
          "1726:   Heap* heap = GetHeap();",
          "1728:     if (strict_mode == kNonStrictMode) {",
          "1729:       return value;",
          "1730:     } else {",
          "",
          "[Removed Lines]",
          "1723:                                    JSReceiver::StoreFromKeyed store_mode) {",
          "1727:   if (!map_of_this->is_extensible()) {",
          "",
          "[Added Lines]",
          "1723:                                    JSReceiver::StoreFromKeyed store_mode,",
          "1724:                                    ExtensibilityCheck extensibility_check) {",
          "1728:   if (extensibility_check == PERFORM_EXTENSIBILITY_CHECK &&",
          "1729:       !map_of_this->is_extensible()) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1763:     String* name,",
          "1764:     Object* value,",
          "1765:     PropertyAttributes attributes,",
          "1768:   LookupResult result(GetIsolate());",
          "1769:   LocalLookupRealNamedProperty(name, &result);",
          "",
          "[Removed Lines]",
          "1766:     StrictModeFlag strict_mode) {",
          "",
          "[Added Lines]",
          "1768:     StrictModeFlag strict_mode,",
          "1769:     ExtensibilityCheck extensibility_check) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1778:       SetPropertyViaPrototypes(name, value, attributes, strict_mode, &done);",
          "1779:   if (done) return result_object;",
          "1782: }",
          "",
          "[Removed Lines]",
          "1781:   return AddProperty(name, value, attributes, strict_mode);",
          "",
          "[Added Lines]",
          "1784:   return AddProperty(name, value, attributes, strict_mode,",
          "1785:                      MAY_BE_STORE_FROM_KEYED, extensibility_check);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1935:       this_handle->SetPropertyPostInterceptor(*name_handle,",
          "1937:                                               attributes,",
          "1939:   RETURN_IF_SCHEDULED_EXCEPTION(isolate);",
          "1940:   return raw_result;",
          "1941: }",
          "",
          "[Removed Lines]",
          "1938:                                               strict_mode);",
          "",
          "[Added Lines]",
          "1942:                                               strict_mode,",
          "1943:                                               PERFORM_EXTENSIBILITY_CHECK);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3664:   MaybeObject* dict_alloc = StringDictionary::Allocate(kInitialSize);",
          "3665:   StringDictionary* dictionary;",
          "3666:   if (!dict_alloc->To<StringDictionary>(&dictionary)) return dict_alloc;",
          "3672: }",
          "",
          "[Removed Lines]",
          "3669:   return HasFastProperties()",
          "3670:       ? AddFastProperty(GetHeap()->hidden_symbol(), dictionary, DONT_ENUM)",
          "3671:       : AddSlowProperty(GetHeap()->hidden_symbol(), dictionary, DONT_ENUM);",
          "",
          "[Added Lines]",
          "3672:   MaybeObject* store_result =",
          "3673:       SetPropertyPostInterceptor(GetHeap()->hidden_symbol(),",
          "3674:                                  dictionary,",
          "3675:                                  DONT_ENUM,",
          "3676:                                  kNonStrictMode,",
          "3677:                                  OMIT_EXTENSIBILITY_CHECK);",
          "3678:   if (store_result->IsFailure()) return store_result;",
          "3679:   return dictionary;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3697:       SetPropertyPostInterceptor(GetHeap()->hidden_symbol(),",
          "3698:                                  dictionary,",
          "3699:                                  DONT_ENUM,",
          "3701:   if (store_result->IsFailure()) return store_result;",
          "3702:   return this;",
          "3703: }",
          "",
          "[Removed Lines]",
          "3700:                                  kNonStrictMode);",
          "",
          "[Added Lines]",
          "3708:                                  kNonStrictMode,",
          "3709:                                  OMIT_EXTENSIBILITY_CHECK);",
          "",
          "---------------"
        ],
        "deps/v8/src/objects.h||deps/v8/src/objects.h": [
          "File: deps/v8/src/objects.h -> deps/v8/src/objects.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1369:     CERTAINLY_NOT_STORE_FROM_KEYED",
          "1370:   };",
          "1373:   static inline JSReceiver* cast(Object* obj);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1374:   enum ExtensibilityCheck {",
          "1375:     PERFORM_EXTENSIBILITY_CHECK,",
          "1376:     OMIT_EXTENSIBILITY_CHECK",
          "1377:   };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1567:       String* name,",
          "1568:       Object* value,",
          "1569:       PropertyAttributes attributes,",
          "1572:   static Handle<Object> SetLocalPropertyIgnoreAttributes(",
          "1573:       Handle<JSObject> object,",
          "",
          "[Removed Lines]",
          "1570:       StrictModeFlag strict_mode);",
          "",
          "[Added Lines]",
          "1577:       StrictModeFlag strict_mode,",
          "1578:       ExtensibilityCheck extensibility_check);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1959:       Object* value,",
          "1960:       PropertyAttributes attributes,",
          "1961:       StrictModeFlag strict_mode,",
          "",
          "[Removed Lines]",
          "1962:       StoreFromKeyed store_mode = MAY_BE_STORE_FROM_KEYED);",
          "",
          "[Added Lines]",
          "1970:       StoreFromKeyed store_mode = MAY_BE_STORE_FROM_KEYED,",
          "1971:       ExtensibilityCheck extensibility_check = PERFORM_EXTENSIBILITY_CHECK);",
          "",
          "---------------"
        ],
        "deps/v8/test/mjsunit/regress/regress-2156.js||deps/v8/test/mjsunit/regress/regress-2156.js": [
          "File: deps/v8/test/mjsunit/regress/regress-2156.js -> deps/v8/test/mjsunit/regress/regress-2156.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: var key1 = {};",
          "31: var key2 = {};",
          "32: var map = new WeakMap;",
          "36: assertTrue(%HaveSameMap(key1, key2));",
          "37: map.set(key1, 1);",
          "38: map.set(key2, 2);",
          "39: assertTrue(%HaveSameMap(key1, key2));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7c96cf289b643373d033decaff5a5534b7f0dc6",
      "candidate_info": {
        "commit_hash": "d7c96cf289b643373d033decaff5a5534b7f0dc6",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d7c96cf289b643373d033decaff5a5534b7f0dc6",
        "files": [
          "lib/tls.js",
          "test/pummel/test-tls-fragmentation.js"
        ],
        "message": "tls: reduce memory overhead, reuse buffer\n\nInstead of allocating a new 64KB buffer each time when checking if there is\nsomething to transform, continue to use the same buffer. Once the buffer is\nexhausted, allocate a new buffer. This solves the problem of huge allocations\nwhen small fragments of data are processed, but will also continue to work\nwell with big pieces of data.",
        "before_after_code_files": [
          "lib/tls.js||litls.js",
          "test/pummel/test-tls-fragmentation.js||test/pummel/test-tls-fragmentation.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/tls.js||litls.js": [
          "File: lib/tls.js -> litls.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:   }",
          "341:   while (!this._paused) {",
          "343:     var chunkBytes = 0;",
          "346:     do {",
          "349:       if (this.pair.ssl && this.pair.ssl.error) {",
          "350:         this.pair.error();",
          "",
          "[Removed Lines]",
          "342:     var bytesRead = 0;",
          "344:     var pool = new Buffer(16 * 4096); // alloc every time?",
          "347:       chunkBytes = this._pusher(pool, bytesRead, pool.length - bytesRead);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "354:       this.pair.maybeInitFinished();",
          "356:       if (chunkBytes >= 0) {",
          "358:       }",
          "362:     assert(bytesRead >= 0);",
          "",
          "[Removed Lines]",
          "357:         bytesRead += chunkBytes;",
          "360:     } while (chunkBytes > 0 && bytesRead < pool.length);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "369:       return;",
          "370:     }",
          "374:     if (this === this.pair.cleartext) {",
          "375:       debug('cleartext emit \"data\" with ' + bytesRead + ' bytes');",
          "",
          "[Removed Lines]",
          "372:     var chunk = pool.slice(0, bytesRead);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "385:     }",
          "389:   }",
          "390: };",
          "",
          "[Removed Lines]",
          "388:     if (this.ondata) this.ondata(pool, 0, bytesRead);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/pummel/test-tls-fragmentation.js||test/pummel/test-tls-fragmentation.js": [
          "File: test/pummel/test-tls-fragmentation.js -> test/pummel/test-tls-fragmentation.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: if (!process.versions.openssl) {",
          "23:   console.error('Skipping because node compiled without OpenSSL.');",
          "24:   process.exit(0);",
          "25: }",
          "27: var common = require('../common');",
          "28: var assert = require('assert');",
          "29: var tls = require('tls');",
          "30: var fs = require('fs');",
          "31: var path = require('path');",
          "33: var options = {",
          "34:   key: fs.readFileSync(path.join(common.fixturesDir, 'test_key.pem')),",
          "35:   cert: fs.readFileSync(path.join(common.fixturesDir, 'test_cert.pem'))",
          "36: };",
          "38: var fragment = 'fr';",
          "39: var dataSize = 1024 * 1024;",
          "40: var sent = 0;",
          "41: var received = 0;",
          "43: var server = tls.createServer(options, function (stream) {",
          "44:   for (sent = 0; sent <= dataSize; sent += fragment.length) {",
          "45:     stream.write(fragment);",
          "46:   }",
          "47:   stream.end();",
          "48: });",
          "50: server.listen(common.PORT, function () {",
          "51:   var client = tls.connect(common.PORT, function () {",
          "52:     client.on('data', function (data) {",
          "53:       received += data.length;",
          "54:     });",
          "55:     client.on('end', function () {",
          "56:       server.close();",
          "57:     });",
          "58:   });",
          "59: });",
          "61: process.on('exit', function () {",
          "62:   assert.equal(sent, received);",
          "63: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "916b5d1fffd9a87a85e3bbf4f9418685ce202878",
      "candidate_info": {
        "commit_hash": "916b5d1fffd9a87a85e3bbf4f9418685ce202878",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/916b5d1fffd9a87a85e3bbf4f9418685ce202878",
        "files": [
          "test/simple/test-tls-ext-key-usage.js",
          "test/simple/test-tls-securepair-client.js"
        ],
        "message": "test: merge tls-ext-key-usage into tls-securepair-client",
        "before_after_code_files": [
          "test/simple/test-tls-ext-key-usage.js||test/simple/test-tls-ext-key-usage.js",
          "test/simple/test-tls-securepair-client.js||test/simple/test-tls-securepair-client.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-tls-ext-key-usage.js||test/simple/test-tls-ext-key-usage.js": [
          "File: test/simple/test-tls-ext-key-usage.js -> test/simple/test-tls-ext-key-usage.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-tls-securepair-client.js||test/simple/test-tls-securepair-client.js": [
          "File: test/simple/test-tls-securepair-client.js -> test/simple/test-tls-securepair-client.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: var exec = require('child_process').exec;",
          "35: var spawn = require('child_process').spawn;",
          "",
          "[Removed Lines]",
          "37: maybe(test);",
          "",
          "[Added Lines]",
          "37: maybe(test1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:   });",
          "51: }",
          "",
          "[Removed Lines]",
          "53: function test() {",
          "",
          "[Added Lines]",
          "54: function test1() {",
          "55:   test('agent.key', 'agent.crt', null, test2);",
          "56: }",
          "59: function test2() {",
          "60:   function check(pair) {",
          "62:     assert.equal(pair.cleartext.getPeerCertificate().ext_key_usage.length, 1);",
          "63:     assert.equal(pair.cleartext.getPeerCertificate().ext_key_usage[0],",
          "64:                  '1.3.6.1.5.5.7.3.2');",
          "65:   }",
          "66:   test('keys/agent4-key.pem', 'keys/agent4-cert.pem', check);",
          "67: }",
          "69: function test(keyfn, certfn, check, next) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:   var connections = 0;",
          "63:   var key = fs.readFileSync(keyfn).toString();",
          "66:   var cert = fs.readFileSync(certfn).toString();",
          "68:   var server = spawn('openssl', ['s_server',",
          "",
          "[Removed Lines]",
          "62:   var keyfn = join(common.fixturesDir, 'agent.key');",
          "65:   var certfn = join(common.fixturesDir, 'agent.crt');",
          "",
          "[Added Lines]",
          "78:   keyfn = join(common.fixturesDir, keyfn);",
          "81:   certfn = join(common.fixturesDir, certfn);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117:   server.on('exit', function(code) {",
          "118:     serverExitCode = code;",
          "119:     clearTimeout(timeout);",
          "120:   });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:     if (next) next();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "146:                   pair.cleartext.getPeerCertificate());",
          "147:       console.log('client pair.cleartext.getCipher(): %j',",
          "148:                   pair.cleartext.getCipher());",
          "149:       setTimeout(function() {",
          "150:         pair.cleartext.write('hello\\r\\n', function() {",
          "151:           gotWriteCallback = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:       if (check) check(pair);",
          "",
          "---------------"
        ]
      }
    }
  ]
}