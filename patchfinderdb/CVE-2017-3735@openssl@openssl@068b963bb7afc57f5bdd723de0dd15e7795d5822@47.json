{
  "cve_id": "CVE-2017-3735",
  "cve_desc": "While parsing an IPAddressFamily extension in an X.509 certificate, it is possible to do a one-byte overread. This would result in an incorrect text display of the certificate. This bug has been present since 2006 and is present in all versions of OpenSSL before 1.0.2m and 1.1.0g.",
  "repo": "openssl/openssl",
  "patch_hash": "068b963bb7afc57f5bdd723de0dd15e7795d5822",
  "patch_info": {
    "commit_hash": "068b963bb7afc57f5bdd723de0dd15e7795d5822",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/068b963bb7afc57f5bdd723de0dd15e7795d5822",
    "files": [
      "crypto/x509v3/v3_addr.c"
    ],
    "message": "Avoid out-of-bounds read\n\nFixes CVE 2017-3735\n\nReviewed-by: Kurt Roeckx <kurt@roeckx.be>\n(Merged from https://github.com/openssl/openssl/pull/4276)\n\n(cherry picked from commit b23171744b01e473ebbfd6edad70c1c3825ffbcd)",
    "before_after_code_files": [
      "crypto/x509v3/v3_addr.c||crypto/x509v3/v3_addr.c"
    ]
  },
  "patch_diff": {
    "crypto/x509v3/v3_addr.c||crypto/x509v3/v3_addr.c": [
      "File: crypto/x509v3/v3_addr.c -> crypto/x509v3/v3_addr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "85: unsigned int X509v3_addr_get_afi(const IPAddressFamily *f)",
      "86: {",
      "91: }",
      "",
      "[Removed Lines]",
      "87:     return ((f != NULL &&",
      "88:              f->addressFamily != NULL && f->addressFamily->data != NULL)",
      "89:             ? ((f->addressFamily->data[0] << 8) | (f->addressFamily->data[1]))",
      "90:             : 0);",
      "",
      "[Added Lines]",
      "87:     if (f == NULL",
      "88:             || f->addressFamily == NULL",
      "89:             || f->addressFamily->data == NULL",
      "90:             || f->addressFamily->length < 2)",
      "91:         return 0;",
      "92:     return (f->addressFamily->data[0] << 8) | f->addressFamily->data[1];",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a701db76e27ffce4c88c2f621269ca5589c984ea",
      "candidate_info": {
        "commit_hash": "a701db76e27ffce4c88c2f621269ca5589c984ea",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a701db76e27ffce4c88c2f621269ca5589c984ea",
        "files": [
          "apps/speed.c"
        ],
        "message": "schlock global variable needs to be volatile\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4000)\n\n(cherry picked from commit e0de4dd5a2b0c0dc27e6a6ab01fabe374d657d23)",
        "before_after_code_files": [
          "apps/speed.c||apps/speed.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/speed.c||apps/speed.c": [
          "File: apps/speed.c -> apps/speed.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "293: # if !defined(SIGALRM)",
          "294: #  define SIGALRM",
          "295: # endif",
          "297: static void alarm_win32(unsigned int secs)",
          "298: {",
          "299:     lapse = secs * 1000;",
          "",
          "[Removed Lines]",
          "296: static unsigned int lapse, schlock;",
          "",
          "[Added Lines]",
          "296: static unsigned int lapse;",
          "297: static volatile unsigned int schlock;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fbd3e06b64a1d4733eb95fc3ed0e35bb4c3a726e",
      "candidate_info": {
        "commit_hash": "fbd3e06b64a1d4733eb95fc3ed0e35bb4c3a726e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/fbd3e06b64a1d4733eb95fc3ed0e35bb4c3a726e",
        "files": [
          "ssl/s3_lib.c"
        ],
        "message": "Fix cipher_compare\n\nUnsigned overflow.  Found by Brian Carpenter\n\nFixes #3889\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3890)\n\n(cherry picked from commit a7ff57965b81ce4fd73a18266ce29abf6b909fdb)",
        "before_after_code_files": [
          "ssl/s3_lib.c||ssl/s3_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2725:     const SSL_CIPHER *ap = (const SSL_CIPHER *)a;",
          "2726:     const SSL_CIPHER *bp = (const SSL_CIPHER *)b;",
          "2729: }",
          "2731: void ssl_sort_cipher_list(void)",
          "",
          "[Removed Lines]",
          "2728:     return ap->id - bp->id;",
          "",
          "[Added Lines]",
          "2728:     if (ap->id == bp->id)",
          "2729:         return 0;",
          "2730:     return ap->id < bp->id ? -1 : 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "20fe5052baaaba7a0dff02471ab484b576587898",
      "candidate_info": {
        "commit_hash": "20fe5052baaaba7a0dff02471ab484b576587898",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/20fe5052baaaba7a0dff02471ab484b576587898",
        "files": [
          "test/enginetest.c"
        ],
        "message": "Backport key redirection test from master branch\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4520)",
        "before_after_code_files": [
          "test/enginetest.c||test/enginetest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/enginetest.c||test/enginetest.c": [
          "File: test/enginetest.c -> test/enginetest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: # include <openssl/crypto.h>",
          "23: # include <openssl/engine.h>",
          "24: # include <openssl/err.h>",
          "26: static void display_engine_list(void)",
          "27: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: # include <openssl/rsa.h>",
          "26: # include <openssl/bn.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:     ENGINE_free(h);",
          "45: }",
          "47: int main(int argc, char *argv[])",
          "48: {",
          "49:     ENGINE *block[512];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: static EVP_PKEY_METHOD *test_rsa = NULL;",
          "52: static int called_encrypt = 0;",
          "55: static int test_encrypt(EVP_PKEY_CTX *ctx, unsigned char *sig,",
          "56:                         size_t *siglen, const unsigned char *tbs, size_t tbslen)",
          "57: {",
          "58:     called_encrypt = 1;",
          "59:     return 1;",
          "60: }",
          "62: static int test_pkey_meths(ENGINE *e, EVP_PKEY_METHOD **pmeth,",
          "63:                            const int **pnids, int nid)",
          "64: {",
          "65:     static const int rnid = EVP_PKEY_RSA;",
          "66:     if (pmeth == NULL) {",
          "68:         return 1;",
          "69:     }",
          "71:     if (nid == EVP_PKEY_RSA) {",
          "73:         return 1;",
          "74:     }",
          "77:     return 0;",
          "78: }",
          "82: static EVP_PKEY *get_test_pkey(void)",
          "83: {",
          "84:     static unsigned char n[] =",
          "85:         \"\\x00\\xAA\\x36\\xAB\\xCE\\x88\\xAC\\xFD\\xFF\\x55\\x52\\x3C\\x7F\\xC4\\x52\\x3F\"",
          "86:         \"\\x90\\xEF\\xA0\\x0D\\xF3\\x77\\x4A\\x25\\x9F\\x2E\\x62\\xB4\\xC5\\xD9\\x9C\\xB5\"",
          "87:         \"\\xAD\\xB3\\x00\\xA0\\x28\\x5E\\x53\\x01\\x93\\x0E\\x0C\\x70\\xFB\\x68\\x76\\x93\"",
          "88:         \"\\x9C\\xE6\\x16\\xCE\\x62\\x4A\\x11\\xE0\\x08\\x6D\\x34\\x1E\\xBC\\xAC\\xA0\\xA1\"",
          "89:         \"\\xF5\";",
          "90:     static unsigned char e[] = \"\\x11\";",
          "92:     RSA *rsa = RSA_new();",
          "93:     EVP_PKEY *pk = EVP_PKEY_new();",
          "95:     if (rsa == NULL || pk == NULL || !EVP_PKEY_assign_RSA(pk, rsa)) {",
          "96:         RSA_free(rsa);",
          "97:         EVP_PKEY_free(pk);",
          "98:         return NULL;",
          "99:     }",
          "101:     if (!RSA_set0_key(rsa, BN_bin2bn(n, sizeof(n)-1, NULL),",
          "102:                       BN_bin2bn(e, sizeof(e)-1, NULL), NULL)) {",
          "103:         EVP_PKEY_free(pk);",
          "104:         return NULL;",
          "105:     }",
          "107:     return pk;",
          "108: }",
          "110: static int test_redirect(void)",
          "111: {",
          "112:     const unsigned char pt[] = \"Hello World\\n\";",
          "113:     unsigned char *tmp = NULL;",
          "114:     size_t len;",
          "115:     EVP_PKEY_CTX *ctx = NULL;",
          "116:     ENGINE *e = NULL;",
          "117:     EVP_PKEY *pkey = NULL;",
          "119:     int to_return = 0;",
          "121:     printf(\"\\nRedirection test\\n\");",
          "123:     if ((pkey = get_test_pkey()) == NULL) {",
          "124:         printf(\"Get test key failed\\n\");",
          "125:         goto err;",
          "126:     }",
          "128:     len = EVP_PKEY_size(pkey);",
          "129:     if ((tmp = OPENSSL_malloc(len)) == NULL) {",
          "130:         printf(\"Buffer alloc failed\\n\");",
          "131:         goto err;",
          "132:     }",
          "134:     if ((ctx = EVP_PKEY_CTX_new(pkey, NULL)) == NULL) {",
          "135:         printf(\"Key context allocation failure\\n\");",
          "136:         goto err;",
          "137:     }",
          "138:     printf(\"EVP_PKEY_encrypt test: no redirection\\n\");",
          "140:     if (EVP_PKEY_encrypt_init(ctx) <= 0",
          "141:             || EVP_PKEY_encrypt(ctx, tmp, &len, pt, sizeof(pt)) <= 0",
          "142:             || called_encrypt) {",
          "143:         printf(\"Test encryption failure\\n\");",
          "144:         goto err;",
          "145:     }",
          "146:     EVP_PKEY_CTX_free(ctx);",
          "147:     ctx = NULL;",
          "150:     if ((e = ENGINE_new()) == NULL",
          "151:             || !ENGINE_set_id(e, \"Test redirect engine\")",
          "152:             || !ENGINE_set_name(e, \"Test redirect engine\")) {",
          "153:         printf(\"Redirection engine setup failure\\n\");",
          "154:         goto err;",
          "155:     }",
          "162:     if (EVP_PKEY_CTX_new(pkey, e) != NULL",
          "163:             || EVP_PKEY_set1_engine(pkey, e) > 0) {",
          "164:         printf(\"Unexpected redirection success\\n\");",
          "165:         goto err;",
          "166:     }",
          "169:     if ((test_rsa = EVP_PKEY_meth_new(EVP_PKEY_RSA, 0)) == NULL) {",
          "170:         printf(\"Test RSA algorithm setup failure\\n\");",
          "171:         goto err;",
          "172:     }",
          "173:     ENGINE_set_pkey_meths(e, test_pkey_meths);",
          "176:     if ((ctx = EVP_PKEY_CTX_new(pkey, e)) == NULL) {",
          "177:         printf(\"Redirected context allocation failed\\n\");",
          "178:         goto err;",
          "179:     }",
          "181:     if (EVP_PKEY_encrypt_init(ctx) > 0) {",
          "182:         printf(\"Encryption redirect unexpected success\\n\");",
          "183:         goto err;",
          "184:     }",
          "185:     EVP_PKEY_CTX_free(ctx);",
          "186:     ctx = NULL;",
          "189:     EVP_PKEY_meth_set_encrypt(test_rsa, 0, test_encrypt);",
          "191:     printf(\"EVP_PKEY_encrypt test: redirection via EVP_PKEY_CTX_new()\\n\");",
          "192:     if ((ctx = EVP_PKEY_CTX_new(pkey, e)) == NULL) {",
          "193:         printf(\"Redirected context allocation failed\\n\");",
          "194:         goto err;",
          "195:     }",
          "197:     if (EVP_PKEY_encrypt_init(ctx) <= 0",
          "198:             || EVP_PKEY_encrypt(ctx, tmp, &len, pt, sizeof(pt)) <= 0",
          "199:             || !called_encrypt) {",
          "200:         printf(\"Redirected key context encryption failed\\n\");",
          "201:         goto err;",
          "202:     }",
          "204:     EVP_PKEY_CTX_free(ctx);",
          "205:     ctx = NULL;",
          "206:     called_encrypt = 0;",
          "208:     printf(\"EVP_PKEY_encrypt test: check default operation not redirected\\n\");",
          "211:     if ((ctx = EVP_PKEY_CTX_new(pkey, NULL)) == NULL",
          "212:             || EVP_PKEY_encrypt_init(ctx) <= 0",
          "213:             || EVP_PKEY_encrypt(ctx, tmp, &len, pt, sizeof(pt)) <= 0",
          "214:             || called_encrypt) {",
          "215:         printf(\"Unredirected key context encryption failed\\n\");",
          "216:         goto err;",
          "217:     }",
          "219:     EVP_PKEY_CTX_free(ctx);",
          "220:     ctx = NULL;",
          "223:     if (!EVP_PKEY_set1_engine(pkey, e)) {",
          "224:         printf(\"Key engine set failed\\n\");",
          "225:         goto err;",
          "226:     }",
          "228:     printf(\"EVP_PKEY_encrypt test: redirection via EVP_PKEY_set1_engine()\\n\");",
          "231:     if ((ctx = EVP_PKEY_CTX_new(pkey, NULL)) == NULL",
          "232:             || EVP_PKEY_encrypt_init(ctx) <= 0",
          "233:             || EVP_PKEY_encrypt(ctx, tmp, &len, pt, sizeof(pt)) <= 0",
          "234:             || !called_encrypt) {",
          "235:         printf(\"Key redirection failure\\n\");",
          "236:         goto err;",
          "237:     }",
          "239:     to_return = 1;",
          "241:  err:",
          "242:     EVP_PKEY_CTX_free(ctx);",
          "243:     EVP_PKEY_free(pkey);",
          "244:     ENGINE_free(e);",
          "245:     OPENSSL_free(tmp);",
          "246:     return to_return;",
          "247: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "183:         OPENSSL_free((void *)ENGINE_get_id(block[loop]));",
          "184:         OPENSSL_free((void *)ENGINE_get_name(block[loop]));",
          "185:     }",
          "186:     printf(\"\\nTests completed happily\\n\");",
          "187:     to_return = 0;",
          "188:  end:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "388:     if (!test_redirect())",
          "389:         goto end;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6f38fb817d831ed093f7d7140325783b5556d8f",
      "candidate_info": {
        "commit_hash": "e6f38fb817d831ed093f7d7140325783b5556d8f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e6f38fb817d831ed093f7d7140325783b5556d8f",
        "files": [
          "Configurations/README",
          "Configurations/unix-Makefile.tmpl",
          "util/mkdef.pl"
        ],
        "message": "Make possible variant SONAMEs and symbol versions\n\nThis small change in the Unix template and shared library build\nscripts enables building \"variant\" shared libraries.  A \"variant\"\nshared library has a non-default SONAME, and non default symbol\nversions.  This makes it possible to build (say) an OpenSSL 1.1.0\nlibrary that can coexist without conflict in the same process address\nspace as the system's default OpenSSL library which may be OpenSSL\n1.0.2.\n\nSuch \"variant\" shared libraries make it possible to link applications\nagainst a custom OpenSSL library installed in /opt/openssl/1.1 or\nsimilar location, and not risk conflict with an indirectly loaded\nOpenSSL runtime that is required by some other dependency.\n\nVariant shared libraries have been fully tested under Linux, and\nbuild successfully on MacOS/X producing variant DYLD names.  MacOS/X\nDarwin has no symbol versioning, but has a non-flat library namespace.\nVariant libraries may therefore support multiple OpenSSL libraries\nin the same address space also with MacOS/X, despite lack of symbol\nversions, but this has not been verified.\n\nVariant shared libraries are optional and off by default.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "Configurations/unix-Makefile.tmpl||Configurations/unix-Makefile.tmpl",
          "util/mkdef.pl||util/mkdef.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Configurations/unix-Makefile.tmpl||Configurations/unix-Makefile.tmpl": [
          "File: Configurations/unix-Makefile.tmpl -> Configurations/unix-Makefile.tmpl",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:      our $exeext = $target{exe_extension} || \"\";",
          "9:      our $libext = $target{lib_extension} || \".a\";",
          "10:      our $shlibext = $target{shared_extension} || \".so\";",
          "11:      our $shlibextsimple = $target{shared_extension_simple} || \".so\";",
          "12:      our $shlibextimport = $target{shared_import_extension} || \"\";",
          "13:      our $dsoext = $target{dso_extension} || \".so\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:      our $shlibvariant = $target{shlib_variant} || \"\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:      sub shlib {",
          "41:          return () if $disabled{shared};",
          "42:          my $lib = shift;",
          "44:      }",
          "45:      sub shlib_simple {",
          "46:          return () if $disabled{shared};",
          "",
          "[Removed Lines]",
          "43:          return $unified_info{sharednames}->{$lib} . $shlibext;",
          "",
          "[Added Lines]",
          "44:          return $unified_info{sharednames}->{$lib}. $shlibvariant. $shlibext;",
          "",
          "---------------"
        ],
        "util/mkdef.pl||util/mkdef.pl": [
          "File: util/mkdef.pl -> util/mkdef.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: use lib \"$FindBin::Bin/perl\";",
          "54: use OpenSSL::Glob;",
          "56: my $debug=0;",
          "58: my $crypto_num= catfile($config{sourcedir},\"util\",\"libcrypto.num\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: # When building a \"variant\" shared library, with a custom SONAME, also customize",
          "57: # all the symbol versions.  This produces a shared object that can coexist",
          "58: # without conflict in the same address space as a default build, or an object",
          "59: # with a different variant tag.",
          "60: #",
          "61: # For example, with a target definition that includes:",
          "62: #",
          "63: #         shlib_variant => \"-opt\",",
          "64: #",
          "65: # we build the following objects:",
          "66: #",
          "67: # $ perl -le '",
          "68: #     for (@ARGV) {",
          "69: #         if ($l = readlink) {",
          "70: #             printf \"%s -> %s\\n\", $_, $l",
          "71: #         } else {",
          "72: #             print",
          "73: #         }",
          "74: #     }' *.so*",
          "75: # libcrypto-opt.so.1.1",
          "76: # libcrypto.so -> libcrypto-opt.so.1.1",
          "77: # libssl-opt.so.1.1",
          "78: # libssl.so -> libssl-opt.so.1.1",
          "79: #",
          "80: # whose SONAMEs and dependencies are:",
          "81: #",
          "82: # $ for l in *.so; do",
          "83: #     echo $l",
          "84: #     readelf -d $l | egrep 'SONAME|NEEDED.*(ssl|crypto)'",
          "85: #   done",
          "86: # libcrypto.so",
          "87: #  0x000000000000000e (SONAME)             Library soname: [libcrypto-opt.so.1.1]",
          "88: # libssl.so",
          "89: #  0x0000000000000001 (NEEDED)             Shared library: [libcrypto-opt.so.1.1]",
          "90: #  0x000000000000000e (SONAME)             Library soname: [libssl-opt.so.1.1]",
          "91: #",
          "92: # We case-fold the variant tag to upper case and replace all non-alnum",
          "93: # characters with \"_\".  This yields the following symbol versions:",
          "94: #",
          "95: # $ nm libcrypto.so | grep -w A",
          "96: # 0000000000000000 A OPENSSL_OPT_1_1_0",
          "97: # 0000000000000000 A OPENSSL_OPT_1_1_0a",
          "98: # 0000000000000000 A OPENSSL_OPT_1_1_0c",
          "99: # 0000000000000000 A OPENSSL_OPT_1_1_0d",
          "100: # 0000000000000000 A OPENSSL_OPT_1_1_0f",
          "101: # 0000000000000000 A OPENSSL_OPT_1_1_0g",
          "102: # $ nm libssl.so | grep -w A",
          "103: # 0000000000000000 A OPENSSL_OPT_1_1_0",
          "104: # 0000000000000000 A OPENSSL_OPT_1_1_0d",
          "105: #",
          "106: (my $SO_VARIANT = qq{\\U$target{\"shlib_variant\"}}) =~ s/\\W/_/g;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1263:       if ($symversion ne $prevsymversion) {",
          "1264:        if ($prevsymversion ne \"\") {",
          "1265:         if ($prevprevsymversion ne \"\") {",
          "1267:             .\"$prevprevsymversion;\\n\\n\";",
          "1268:         } else {",
          "1269:          print OUT \"};\\n\\n\";",
          "1270:         }",
          "1271:        }",
          "1273:        $prevprevsymversion = $prevsymversion;",
          "1274:        $prevsymversion = $symversion;",
          "1275:       }",
          "",
          "[Removed Lines]",
          "1266:          print OUT \"} OPENSSL_\"",
          "1272:        print OUT \"OPENSSL_$symversion {\\n    global:\\n\";",
          "",
          "[Added Lines]",
          "1318:          print OUT \"} OPENSSL${SO_VARIANT}_\"",
          "1324:        print OUT \"OPENSSL${SO_VARIANT}_$symversion {\\n    global:\\n\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1318:  } while ($linux && $thisversion ne $currversion);",
          "1319:  if ($linux) {",
          "1320:   if ($prevprevsymversion ne \"\") {",
          "1322:   } else {",
          "1323:    print OUT \"    local: *;\\n};\\n\\n\";",
          "1324:   }",
          "",
          "[Removed Lines]",
          "1321:    print OUT \"    local: *;\\n} OPENSSL_$prevprevsymversion;\\n\\n\";",
          "",
          "[Added Lines]",
          "1373:    print OUT \"    local: *;\\n} OPENSSL${SO_VARIANT}_$prevprevsymversion;\\n\\n\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "605fa68efaf2ebc891330ed1ae9e5053a2228c1e",
      "candidate_info": {
        "commit_hash": "605fa68efaf2ebc891330ed1ae9e5053a2228c1e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/605fa68efaf2ebc891330ed1ae9e5053a2228c1e",
        "files": [
          "crypto/asn1/ameth_lib.c",
          "crypto/evp/evp_err.c",
          "include/openssl/evp.h"
        ],
        "message": "EVP_PKEY_asn1_add0(): Check that this method isn't already registered\n\nNo two public key ASN.1 methods with the same pkey_id can be\nregistered at the same time.\n\nReviewed-by: Bernd Edlinger <bernd.edlinger@hotmail.de>\n(Merged from https://github.com/openssl/openssl/pull/4620)",
        "before_after_code_files": [
          "crypto/asn1/ameth_lib.c||crypto/asn1/ameth_lib.c",
          "crypto/evp/evp_err.c||crypto/evp/evp_err.c",
          "include/openssl/evp.h||include/openssl/evp.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/asn1/ameth_lib.c||crypto/asn1/ameth_lib.c": [
          "File: crypto/asn1/ameth_lib.c -> crypto/asn1/ameth_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177: int EVP_PKEY_asn1_add0(const EVP_PKEY_ASN1_METHOD *ameth)",
          "178: {",
          "179:     if (app_methods == NULL) {",
          "180:         app_methods = sk_EVP_PKEY_ASN1_METHOD_new(ameth_cmp);",
          "181:         if (app_methods == NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179:     if (pkey_asn1_find(ameth->pkey_id) != NULL) {",
          "180:         EVPerr(EVP_F_EVP_PKEY_ASN1_ADD0,",
          "181:                EVP_R_PKEY_ASN1_METHOD_ALREADY_REGISTERED);",
          "182:         return 0;",
          "183:     }",
          "",
          "---------------"
        ],
        "crypto/evp/evp_err.c||crypto/evp/evp_err.c": [
          "File: crypto/evp/evp_err.c -> crypto/evp/evp_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     {ERR_FUNC(EVP_F_EVP_PBE_SCRYPT), \"EVP_PBE_scrypt\"},",
          "50:     {ERR_FUNC(EVP_F_EVP_PKCS82PKEY), \"EVP_PKCS82PKEY\"},",
          "51:     {ERR_FUNC(EVP_F_EVP_PKEY2PKCS8), \"EVP_PKEY2PKCS8\"},",
          "52:     {ERR_FUNC(EVP_F_EVP_PKEY_COPY_PARAMETERS), \"EVP_PKEY_copy_parameters\"},",
          "53:     {ERR_FUNC(EVP_F_EVP_PKEY_CTX_CTRL), \"EVP_PKEY_CTX_ctrl\"},",
          "54:     {ERR_FUNC(EVP_F_EVP_PKEY_CTX_CTRL_STR), \"EVP_PKEY_CTX_ctrl_str\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:     {ERR_FUNC(EVP_F_EVP_PKEY_ASN1_ADD0), \"EVP_PKEY_asn1_add0\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:     {ERR_REASON(EVP_R_OPERATON_NOT_INITIALIZED), \"operaton not initialized\"},",
          "143:     {ERR_REASON(EVP_R_PARTIALLY_OVERLAPPING),",
          "144:      \"partially overlapping buffers\"},",
          "145:     {ERR_REASON(EVP_R_PRIVATE_KEY_DECODE_ERROR), \"private key decode error\"},",
          "146:     {ERR_REASON(EVP_R_PRIVATE_KEY_ENCODE_ERROR), \"private key encode error\"},",
          "147:     {ERR_REASON(EVP_R_PUBLIC_KEY_NOT_RSA), \"public key not rsa\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:     {ERR_REASON(EVP_R_PKEY_ASN1_METHOD_ALREADY_REGISTERED),",
          "147:      \"pkey asn1 method already registered\"},",
          "",
          "---------------"
        ],
        "include/openssl/evp.h||include/openssl/evp.h": [
          "File: include/openssl/evp.h -> include/openssl/evp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1485: # define EVP_F_EVP_PBE_SCRYPT                             181",
          "1486: # define EVP_F_EVP_PKCS82PKEY                             111",
          "1487: # define EVP_F_EVP_PKEY2PKCS8                             113",
          "1488: # define EVP_F_EVP_PKEY_COPY_PARAMETERS                   103",
          "1489: # define EVP_F_EVP_PKEY_CTX_CTRL                          137",
          "1490: # define EVP_F_EVP_PKEY_CTX_CTRL_STR                      150",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1488: # define EVP_F_EVP_PKEY_ASN1_ADD0                         168",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1569: # define EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE   150",
          "1570: # define EVP_R_OPERATON_NOT_INITIALIZED                   151",
          "1571: # define EVP_R_PARTIALLY_OVERLAPPING                      162",
          "1572: # define EVP_R_PRIVATE_KEY_DECODE_ERROR                   145",
          "1573: # define EVP_R_PRIVATE_KEY_ENCODE_ERROR                   146",
          "1574: # define EVP_R_PUBLIC_KEY_NOT_RSA                         106",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1573: # define EVP_R_PKEY_ASN1_METHOD_ALREADY_REGISTERED        164",
          "",
          "---------------"
        ]
      }
    }
  ]
}