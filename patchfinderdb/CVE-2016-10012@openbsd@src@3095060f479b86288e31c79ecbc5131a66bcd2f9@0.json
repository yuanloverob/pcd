{
  "cve_id": "CVE-2016-10012",
  "cve_desc": "The shared memory manager (associated with pre-authentication compression) in sshd in OpenSSH before 7.4 does not ensure that a bounds check is enforced by all compilers, which might allows local users to gain privileges by leveraging access to a sandboxed privilege-separation process, related to the m_zback and m_zlib data structures.",
  "repo": "openbsd/src",
  "patch_hash": "3095060f479b86288e31c79ecbc5131a66bcd2f9",
  "patch_info": {
    "commit_hash": "3095060f479b86288e31c79ecbc5131a66bcd2f9",
    "repo": "openbsd/src",
    "commit_url": "https://github.com/openbsd/src/commit/3095060f479b86288e31c79ecbc5131a66bcd2f9",
    "files": [
      "usr.bin/ssh/monitor.c",
      "usr.bin/ssh/monitor.h",
      "usr.bin/ssh/monitor_mm.c",
      "usr.bin/ssh/monitor_mm.h",
      "usr.bin/ssh/monitor_wrap.h",
      "usr.bin/ssh/myproposal.h",
      "usr.bin/ssh/opacket.h",
      "usr.bin/ssh/packet.c",
      "usr.bin/ssh/packet.h",
      "usr.bin/ssh/servconf.c",
      "usr.bin/ssh/sshconnect2.c",
      "usr.bin/ssh/sshd.c",
      "usr.bin/ssh/sshd/Makefile"
    ],
    "message": "Remove support for pre-authentication compression. Doing compression early in the protocol probably seemed reasonable in the 1990s, but today it's clearly a bad idea in terms of both cryptography (cf. multiple compression oracle attacks in TLS) and attack surface.\n\nMoreover, to support it across privilege-separation zlib needed\nthe assistance of a complex shared-memory manager that made the\nrequired attack surface considerably larger.\n\nPrompted by Guido Vranken pointing out a compiler-elided security\ncheck in the shared memory manager found by Stack\n(http://css.csail.mit.edu/stack/); ok deraadt@ markus@\n\nNB. pre-auth authentication has been disabled by default in sshd\nfor >10 years.",
    "before_after_code_files": [
      "usr.bin/ssh/monitor.c||usr.bin/ssh/monitor.c",
      "usr.bin/ssh/monitor.h||usr.bin/ssh/monitor.h",
      "usr.bin/ssh/monitor_mm.c||usr.bin/ssh/monitor_mm.c",
      "usr.bin/ssh/monitor_mm.h||usr.bin/ssh/monitor_mm.h",
      "usr.bin/ssh/monitor_wrap.h||usr.bin/ssh/monitor_wrap.h",
      "usr.bin/ssh/myproposal.h||usr.bin/ssh/myproposal.h",
      "usr.bin/ssh/opacket.h||usr.bin/ssh/opacket.h",
      "usr.bin/ssh/packet.c||usr.bin/ssh/packet.c",
      "usr.bin/ssh/packet.h||usr.bin/ssh/packet.h",
      "usr.bin/ssh/servconf.c||usr.bin/ssh/servconf.c",
      "usr.bin/ssh/sshconnect2.c||usr.bin/ssh/sshconnect2.c",
      "usr.bin/ssh/sshd.c||usr.bin/ssh/sshd.c"
    ]
  },
  "patch_diff": {
    "usr.bin/ssh/monitor.c||usr.bin/ssh/monitor.c": [
      "File: usr.bin/ssh/monitor.c -> usr.bin/ssh/monitor.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "70: #include \"misc.h\"",
      "71: #include \"servconf.h\"",
      "72: #include \"monitor.h\"",
      "74: #ifdef GSSAPI",
      "75: #include \"ssh-gss.h\"",
      "76: #endif",
      "",
      "[Removed Lines]",
      "73: #include \"monitor_mm.h\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "335:   monitor_read(pmonitor, mon_dispatch, NULL);",
      "336: }",
      "363: static int",
      "364: monitor_read_log(struct monitor *pmonitor)",
      "365: {",
      "",
      "[Removed Lines]",
      "338: void",
      "339: monitor_sync(struct monitor *pmonitor)",
      "340: {",
      "341:  if (options.compression) {",
      "343:   mm_share_sync(&pmonitor->m_zlib, &pmonitor->m_zback);",
      "344:  }",
      "345: }",
      "348: static void *",
      "349: mm_zalloc(struct mm_master *mm, u_int ncount, u_int size)",
      "350: {",
      "351:  if (size == 0 || ncount == 0 || ncount > SIZE_MAX / size)",
      "352:   fatal(\"%s: mm_zalloc(%u, %u)\", __func__, ncount, size);",
      "354:  return mm_malloc(mm, size * ncount);",
      "355: }",
      "357: static void",
      "358: mm_zfree(struct mm_master *mm, void *address)",
      "359: {",
      "360:  mm_free(mm, address);",
      "361: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1292:   kex->host_key_index=&get_hostkey_index;",
      "1293:   kex->sign = sshd_hostkey_sign;",
      "1294:  }",
      "1302: }",
      "",
      "[Removed Lines]",
      "1297:  if (options.compression) {",
      "1298:   ssh_packet_set_compress_hooks(ssh, pmonitor->m_zlib,",
      "1299:       (ssh_packet_comp_alloc_func *)mm_zalloc,",
      "1300:       (ssh_packet_comp_free_func *)mm_zfree);",
      "1301:  }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1351: struct monitor *",
      "1352: monitor_init(void)",
      "1353: {",
      "1355:  struct monitor *mon;",
      "1357:  mon = xcalloc(1, sizeof(*mon));",
      "1359:  monitor_openfds(mon, 1);",
      "1372:  return mon;",
      "1373: }",
      "",
      "[Removed Lines]",
      "1362:  if (options.compression) {",
      "1363:   mon->m_zback = mm_create(NULL, MM_MEMSIZE);",
      "1364:   mon->m_zlib = mm_create(mon->m_zback, 20 * MM_MEMSIZE);",
      "1367:   ssh_packet_set_compress_hooks(ssh, mon->m_zlib,",
      "1368:       (ssh_packet_comp_alloc_func *)mm_zalloc,",
      "1369:       (ssh_packet_comp_free_func *)mm_zfree);",
      "1370:  }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "usr.bin/ssh/monitor.h||usr.bin/ssh/monitor.h": [
      "File: usr.bin/ssh/monitor.h -> usr.bin/ssh/monitor.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "58:  MONITOR_REQ_TERM = 50,",
      "59: };",
      "62: struct monitor {",
      "63:  int    m_recvfd;",
      "64:  int    m_sendfd;",
      "65:  int    m_log_recvfd;",
      "66:  int    m_log_sendfd;",
      "69:  struct kex  **m_pkex;",
      "70:  pid_t    m_pid;",
      "71: };",
      "73: struct monitor *monitor_init(void);",
      "74: void monitor_reinit(struct monitor *);",
      "77: struct Authctxt;",
      "78: void monitor_child_preauth(struct Authctxt *, struct monitor *);",
      "",
      "[Removed Lines]",
      "61: struct mm_master;",
      "67:  struct mm_master *m_zback;",
      "68:  struct mm_master *m_zlib;",
      "75: void monitor_sync(struct monitor *);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "usr.bin/ssh/monitor_mm.c||usr.bin/ssh/monitor_mm.c": [
      "File: usr.bin/ssh/monitor_mm.c -> usr.bin/ssh/monitor_mm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "usr.bin/ssh/monitor_mm.h||usr.bin/ssh/monitor_mm.h": [
      "File: usr.bin/ssh/monitor_mm.h -> usr.bin/ssh/monitor_mm.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "usr.bin/ssh/monitor_wrap.h||usr.bin/ssh/monitor_wrap.h": [
      "File: usr.bin/ssh/monitor_wrap.h -> usr.bin/ssh/monitor_wrap.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "76: int mm_bsdauth_query(void *, char **, char **, u_int *, char ***, u_int **);",
      "77: int mm_bsdauth_respond(void *, u_int, char **);",
      "",
      "[Removed Lines]",
      "80: void mm_init_compression(struct mm_master *);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "usr.bin/ssh/myproposal.h||usr.bin/ssh/myproposal.h": [
      "File: usr.bin/ssh/myproposal.h -> usr.bin/ssh/myproposal.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "114: #define KEX_DEFAULT_LANG \"\"",
      "116: #define KEX_CLIENT \\",
      "",
      "[Removed Lines]",
      "113: #define KEX_DEFAULT_COMP \"none,zlib@openssh.com,zlib\"",
      "",
      "[Added Lines]",
      "113: #define KEX_DEFAULT_COMP \"none,zlib@openssh.com\"",
      "",
      "---------------"
    ],
    "usr.bin/ssh/opacket.h||usr.bin/ssh/opacket.h": [
      "File: usr.bin/ssh/opacket.h -> usr.bin/ssh/opacket.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "132:  ssh_packet_get_input(active_state)",
      "133: #define packet_get_output() \\",
      "134:  ssh_packet_get_output(active_state)",
      "138: #define packet_check_eom() \\",
      "139:  ssh_packet_check_eom(active_state)",
      "140: #define set_newkeys(mode) \\",
      "",
      "[Removed Lines]",
      "135: #define packet_set_compress_hooks(ctx, allocfunc, freefunc) \\",
      "136:  ssh_packet_set_compress_hooks(active_state, ctx, \\",
      "137:      allocfunc, freefunc);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "usr.bin/ssh/packet.c||usr.bin/ssh/packet.c": [
      "File: usr.bin/ssh/packet.c -> usr.bin/ssh/packet.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "746: }",
      "",
      "[Removed Lines]",
      "749: static int",
      "750: ssh_packet_get_compress_state(struct sshbuf *m, struct ssh *ssh)",
      "751: {",
      "752:  struct session_state *state = ssh->state;",
      "753:  struct sshbuf *b;",
      "754:  int r;",
      "756:  if ((b = sshbuf_new()) == NULL)",
      "757:   return SSH_ERR_ALLOC_FAIL;",
      "758:  if (state->compression_in_started) {",
      "759:   if ((r = sshbuf_put_string(b, &state->compression_in_stream,",
      "760:       sizeof(state->compression_in_stream))) != 0)",
      "761:    goto out;",
      "762:  } else if ((r = sshbuf_put_string(b, NULL, 0)) != 0)",
      "763:   goto out;",
      "764:  if (state->compression_out_started) {",
      "765:   if ((r = sshbuf_put_string(b, &state->compression_out_stream,",
      "766:       sizeof(state->compression_out_stream))) != 0)",
      "767:    goto out;",
      "768:  } else if ((r = sshbuf_put_string(b, NULL, 0)) != 0)",
      "769:   goto out;",
      "770:  r = sshbuf_put_stringb(m, b);",
      "771:  out:",
      "772:  sshbuf_free(b);",
      "773:  return r;",
      "774: }",
      "777: static int",
      "778: ssh_packet_set_compress_state(struct ssh *ssh, struct sshbuf *m)",
      "779: {",
      "780:  struct session_state *state = ssh->state;",
      "781:  struct sshbuf *b = NULL;",
      "782:  int r;",
      "783:  const u_char *inblob, *outblob;",
      "784:  size_t inl, outl;",
      "786:  if ((r = sshbuf_froms(m, &b)) != 0)",
      "787:   goto out;",
      "788:  if ((r = sshbuf_get_string_direct(b, &inblob, &inl)) != 0 ||",
      "789:      (r = sshbuf_get_string_direct(b, &outblob, &outl)) != 0)",
      "790:   goto out;",
      "791:  if (inl == 0)",
      "792:   state->compression_in_started = 0;",
      "793:  else if (inl != sizeof(state->compression_in_stream)) {",
      "794:   r = SSH_ERR_INTERNAL_ERROR;",
      "795:   goto out;",
      "796:  } else {",
      "797:   state->compression_in_started = 1;",
      "798:   memcpy(&state->compression_in_stream, inblob, inl);",
      "799:  }",
      "800:  if (outl == 0)",
      "801:   state->compression_out_started = 0;",
      "802:  else if (outl != sizeof(state->compression_out_stream)) {",
      "803:   r = SSH_ERR_INTERNAL_ERROR;",
      "804:   goto out;",
      "805:  } else {",
      "806:   state->compression_out_started = 1;",
      "807:   memcpy(&state->compression_out_stream, outblob, outl);",
      "808:  }",
      "809:  r = 0;",
      "810:  out:",
      "811:  sshbuf_free(b);",
      "812:  return r;",
      "813: }",
      "815: void",
      "816: ssh_packet_set_compress_hooks(struct ssh *ssh, void *ctx,",
      "817:     void *(*allocfunc)(void *, u_int, u_int),",
      "818:     void (*freefunc)(void *, void *))",
      "819: {",
      "820:  ssh->state->compression_out_stream.zalloc = (alloc_func)allocfunc;",
      "821:  ssh->state->compression_out_stream.zfree = (free_func)freefunc;",
      "822:  ssh->state->compression_out_stream.opaque = ctx;",
      "823:  ssh->state->compression_in_stream.zalloc = (alloc_func)allocfunc;",
      "824:  ssh->state->compression_in_stream.zfree = (free_func)freefunc;",
      "825:  ssh->state->compression_in_stream.opaque = ctx;",
      "826: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2430: static int",
      "2431: ssh_packet_set_postauth(struct ssh *ssh)",
      "2432: {",
      "2436:  debug(\"%s: called\", __func__);",
      "2438:  ssh->state->after_authentication = 1;",
      "2439:  ssh->state->rekeying = 0;",
      "2448:  return 0;",
      "2449: }",
      "",
      "[Removed Lines]",
      "2433:  struct sshcomp *comp;",
      "2434:  int r, mode;",
      "2440:  for (mode = 0; mode < MODE_MAX; mode++) {",
      "2441:   if (ssh->state->newkeys[mode] == NULL)",
      "2442:    continue;",
      "2443:   comp = &ssh->state->newkeys[mode]->comp;",
      "2444:   if (comp && comp->enabled &&",
      "2445:       (r = ssh_packet_init_compression(ssh)) != 0)",
      "2446:    return r;",
      "2447:  }",
      "",
      "[Added Lines]",
      "2353:  int r;",
      "2359:  if ((r = ssh_packet_enable_delayed_compress(ssh)) != 0)",
      "2360:   return r;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2508:    goto out;",
      "2509:  }",
      "2510:  if ((r = sshbuf_put_u32(b, comp->type)) != 0 ||",
      "2512:      (r = sshbuf_put_cstring(b, comp->name)) != 0)",
      "2513:   goto out;",
      "2514:  r = sshbuf_put_stringb(m, b);",
      "",
      "[Removed Lines]",
      "2511:      (r = sshbuf_put_u32(b, comp->enabled)) != 0 ||",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2569:   return r;",
      "2570:  if (cipher_get_keycontext(state->receive_context, p) != (int)rlen)",
      "2571:   return SSH_ERR_INTERNAL_ERROR;",
      "2575:      (r = sshbuf_put_stringb(m, state->output)) != 0)",
      "2576:   return r;",
      "",
      "[Removed Lines]",
      "2573:  if ((r = ssh_packet_get_compress_state(m, ssh)) != 0 ||",
      "2574:      (r = sshbuf_put_stringb(m, state->input)) != 0 ||",
      "",
      "[Added Lines]",
      "2484:  if ((r = sshbuf_put_stringb(m, state->input)) != 0 ||",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2625:   mac->key_len = maclen;",
      "2626:  }",
      "2627:  if ((r = sshbuf_get_u32(b, &comp->type)) != 0 ||",
      "2629:      (r = sshbuf_get_cstring(b, &comp->name, NULL)) != 0)",
      "2630:   goto out;",
      "2631:  if (enc->name == NULL ||",
      "",
      "[Removed Lines]",
      "2628:      (r = sshbuf_get_u32(b, (u_int *)&comp->enabled)) != 0 ||",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2753:  cipher_set_keycontext(state->send_context, keyout);",
      "2754:  cipher_set_keycontext(state->receive_context, keyin);",
      "2758:   return r;",
      "2760:  sshbuf_reset(state->input);",
      "",
      "[Removed Lines]",
      "2756:  if ((r = ssh_packet_set_compress_state(ssh, m)) != 0 ||",
      "2757:      (r = ssh_packet_set_postauth(ssh)) != 0)",
      "",
      "[Added Lines]",
      "2665:  if ((r = ssh_packet_set_postauth(ssh)) != 0)",
      "",
      "---------------"
    ],
    "usr.bin/ssh/packet.h||usr.bin/ssh/packet.h": [
      "File: usr.bin/ssh/packet.h -> usr.bin/ssh/packet.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "106: int  ssh_set_newkeys(struct ssh *, int mode);",
      "107: void  ssh_packet_get_bytes(struct ssh *, u_int64_t *, u_int64_t *);",
      "114: int  ssh_packet_write_poll(struct ssh *);",
      "115: int  ssh_packet_write_wait(struct ssh *);",
      "116: int      ssh_packet_have_data_to_write(struct ssh *);",
      "",
      "[Removed Lines]",
      "109: typedef void *(ssh_packet_comp_alloc_func)(void *, u_int, u_int);",
      "110: typedef void (ssh_packet_comp_free_func)(void *, void *);",
      "111: void  ssh_packet_set_compress_hooks(struct ssh *, void *,",
      "112:     ssh_packet_comp_alloc_func *, ssh_packet_comp_free_func *);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "usr.bin/ssh/servconf.c||usr.bin/ssh/servconf.c": [
      "File: usr.bin/ssh/servconf.c -> usr.bin/ssh/servconf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "875: };",
      "876: static const struct multistate multistate_compression[] = {",
      "877:  { \"delayed\",   COMP_DELAYED },",
      "879:  { \"no\",    COMP_NONE },",
      "880:  { NULL, -1 }",
      "881: };",
      "",
      "[Removed Lines]",
      "878:  { \"yes\",   COMP_ZLIB },",
      "",
      "[Added Lines]",
      "878:  { \"yes\",   COMP_DELAYED },",
      "",
      "---------------"
    ],
    "usr.bin/ssh/sshconnect2.c||usr.bin/ssh/sshconnect2.c": [
      "File: usr.bin/ssh/sshconnect2.c -> usr.bin/ssh/sshconnect2.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "168:      compat_cipher_proposal(options.ciphers);",
      "169:  myproposal[PROPOSAL_COMP_ALGS_CTOS] =",
      "170:      myproposal[PROPOSAL_COMP_ALGS_STOC] = options.compression ?",
      "172:  myproposal[PROPOSAL_MAC_ALGS_CTOS] =",
      "173:      myproposal[PROPOSAL_MAC_ALGS_STOC] = options.macs;",
      "174:  if (options.hostkeyalgorithms != NULL) {",
      "",
      "[Removed Lines]",
      "171:      \"zlib@openssh.com,zlib,none\" : \"none,zlib@openssh.com,zlib\";",
      "",
      "[Added Lines]",
      "171:      \"zlib@openssh.com,none\" : \"none,zlib@openssh.com\";",
      "",
      "---------------"
    ],
    "usr.bin/ssh/sshd.c||usr.bin/ssh/sshd.c": [
      "File: usr.bin/ssh/sshd.c -> usr.bin/ssh/sshd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "96: #include \"dispatch.h\"",
      "97: #include \"channels.h\"",
      "98: #include \"session.h\"",
      "100: #include \"monitor.h\"",
      "101: #ifdef GSSAPI",
      "102: #include \"ssh-gss.h\"",
      "",
      "[Removed Lines]",
      "99: #include \"monitor_mm.h\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "559:    ssh_sandbox_parent_preauth(box, pid);",
      "560:   monitor_child_preauth(authctxt, pmonitor);",
      "566:   while (waitpid(pid, &status, 0) < 0) {",
      "567:    if (errno == EINTR)",
      "",
      "[Removed Lines]",
      "563:   monitor_sync(pmonitor);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1972:  if (options.compression == COMP_NONE) {",
      "1973:   myproposal[PROPOSAL_COMP_ALGS_CTOS] =",
      "1974:       myproposal[PROPOSAL_COMP_ALGS_STOC] = \"none\";",
      "1979:  }",
      "1981:  if (options.rekey_limit || options.rekey_interval)",
      "",
      "[Removed Lines]",
      "1975:  } else if (options.compression == COMP_DELAYED) {",
      "1976:   myproposal[PROPOSAL_COMP_ALGS_CTOS] =",
      "1977:       myproposal[PROPOSAL_COMP_ALGS_STOC] =",
      "1978:       \"none,zlib@openssh.com\";",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "049095fd94e456446a491ae16385a7193aa84c3a",
      "candidate_info": {
        "commit_hash": "049095fd94e456446a491ae16385a7193aa84c3a",
        "repo": "openbsd/src",
        "commit_url": "https://github.com/openbsd/src/commit/049095fd94e456446a491ae16385a7193aa84c3a",
        "files": [
          "usr.bin/ssh/kex.c",
          "usr.bin/ssh/kex.h",
          "usr.bin/ssh/packet.c",
          "usr.bin/ssh/servconf.c",
          "usr.bin/ssh/sshconnect2.c",
          "usr.bin/ssh/sshd_config.5"
        ],
        "message": "restore pre-auth compression support in the client -- the previous commit was intended to remove it from the server only.\n\nremove a few server-side pre-auth compression bits that escaped\n\nadjust wording of Compression directive in sshd_config(5)\n\npointed out by naddy@ ok markus@",
        "before_after_code_files": [
          "usr.bin/ssh/kex.c||usr.bin/ssh/kex.c",
          "usr.bin/ssh/kex.h||usr.bin/ssh/kex.h",
          "usr.bin/ssh/packet.c||usr.bin/ssh/packet.c",
          "usr.bin/ssh/servconf.c||usr.bin/ssh/servconf.c",
          "usr.bin/ssh/sshconnect2.c||usr.bin/ssh/sshconnect2.c",
          "usr.bin/ssh/sshd_config.5||usr.bin/ssh/sshd_config.5"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "usr.bin/ssh/packet.c||usr.bin/ssh/packet.c",
            "usr.bin/ssh/servconf.c||usr.bin/ssh/servconf.c",
            "usr.bin/ssh/sshconnect2.c||usr.bin/ssh/sshconnect2.c"
          ],
          "candidate": [
            "usr.bin/ssh/packet.c||usr.bin/ssh/packet.c",
            "usr.bin/ssh/servconf.c||usr.bin/ssh/servconf.c",
            "usr.bin/ssh/sshconnect2.c||usr.bin/ssh/sshconnect2.c"
          ]
        }
      },
      "candidate_diff": {
        "usr.bin/ssh/kex.c||usr.bin/ssh/kex.c": [
          "File: usr.bin/ssh/kex.c -> usr.bin/ssh/kex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "662:   return SSH_ERR_NO_COMPRESS_ALG_MATCH;",
          "663:  if (strcmp(name, \"zlib@openssh.com\") == 0) {",
          "664:   comp->type = COMP_DELAYED;",
          "667:  } else if (strcmp(name, \"none\") == 0) {",
          "668:   comp->type = COMP_NONE;",
          "669:  } else {",
          "",
          "[Removed Lines]",
          "665:  } else if (strcmp(name, \"zlib\") == 0) {",
          "666:   comp->type = COMP_ZLIB;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usr.bin/ssh/kex.h||usr.bin/ssh/kex.h": [
          "File: usr.bin/ssh/kex.h -> usr.bin/ssh/kex.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #define KEX_CURVE25519_SHA256_OLD \"curve25519-sha256@libssh.org\"",
          "52: #define COMP_NONE 0",
          "56: #define CURVE25519_SIZE 32",
          "",
          "[Removed Lines]",
          "53: #define COMP_ZLIB 1",
          "54: #define COMP_DELAYED 2",
          "",
          "[Added Lines]",
          "53: #define COMP_DELAYED 1",
          "",
          "---------------"
        ],
        "usr.bin/ssh/packet.c||usr.bin/ssh/packet.c": [
          "File: usr.bin/ssh/packet.c -> usr.bin/ssh/packet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "955:     explicit_bzero(enc->key, enc->key_len);",
          "960:   if ((r = ssh_packet_init_compression(ssh)) < 0)",
          "961:    return r;",
          "962:   if (mode == MODE_OUT) {",
          "",
          "[Removed Lines]",
          "957:  if ((comp->type == COMP_ZLIB ||",
          "958:      (comp->type == COMP_DELAYED &&",
          "959:       state->after_authentication)) && comp->enabled == 0) {",
          "",
          "[Added Lines]",
          "957:  if (comp->type == COMP_DELAYED && state->after_authentication &&",
          "958:      comp->enabled == 0) {",
          "",
          "---------------"
        ],
        "usr.bin/ssh/servconf.c||usr.bin/ssh/servconf.c": [
          "File: usr.bin/ssh/servconf.c -> usr.bin/ssh/servconf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "874:  { NULL, -1 }",
          "875: };",
          "876: static const struct multistate multistate_compression[] = {",
          "878:  { \"yes\",   COMP_DELAYED },",
          "879:  { \"no\",    COMP_NONE },",
          "880:  { NULL, -1 }",
          "881: };",
          "",
          "[Removed Lines]",
          "877:  { \"delayed\",   COMP_DELAYED },",
          "",
          "[Added Lines]",
          "878:  { \"delayed\",   COMP_DELAYED },",
          "",
          "---------------"
        ],
        "usr.bin/ssh/sshconnect2.c||usr.bin/ssh/sshconnect2.c": [
          "File: usr.bin/ssh/sshconnect2.c -> usr.bin/ssh/sshconnect2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:      compat_cipher_proposal(options.ciphers);",
          "169:  myproposal[PROPOSAL_COMP_ALGS_CTOS] =",
          "170:      myproposal[PROPOSAL_COMP_ALGS_STOC] = options.compression ?",
          "172:  myproposal[PROPOSAL_MAC_ALGS_CTOS] =",
          "173:      myproposal[PROPOSAL_MAC_ALGS_STOC] = options.macs;",
          "174:  if (options.hostkeyalgorithms != NULL) {",
          "",
          "[Removed Lines]",
          "171:      \"zlib@openssh.com,none\" : \"none,zlib@openssh.com\";",
          "",
          "[Added Lines]",
          "171:      \"zlib@openssh.com,zlib,none\" : \"none,zlib@openssh.com,zlib\";",
          "",
          "---------------"
        ],
        "usr.bin/ssh/sshd_config.5||usr.bin/ssh/sshd_config.5": [
          "File: usr.bin/ssh/sshd_config.5 -> usr.bin/ssh/sshd_config.5",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: .\\\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF",
          "34: .\\\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
          "35: .\\\"",
          "38: .Dt SSHD_CONFIG 5",
          "39: .Os",
          "40: .Sh NAME",
          "",
          "[Removed Lines]",
          "36: .\\\" $OpenBSD: sshd_config.5,v 1.235 2016/09/22 19:19:01 jmc Exp $",
          "37: .Dd $Mdocdate: September 22 2016 $",
          "",
          "[Added Lines]",
          "36: .\\\" $OpenBSD: sshd_config.5,v 1.236 2016/09/28 20:32:42 djm Exp $",
          "37: .Dd $Mdocdate: September 28 2016 $",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "530: The default",
          "531: is 0, indicating that these messages will not be sent to the client.",
          "532: .It Cm Compression",
          "534: the user has authenticated successfully.",
          "535: The argument must be",
          "536: .Dq yes ,",
          "538: or",
          "539: .Dq no .",
          "540: The default is",
          "542: .It Cm DenyGroups",
          "543: This keyword can be followed by a list of group name patterns, separated",
          "544: by spaces.",
          "",
          "[Removed Lines]",
          "533: Specifies whether compression is allowed, or delayed until",
          "537: .Dq delayed ,",
          "541: .Dq delayed .",
          "",
          "[Added Lines]",
          "533: Specifies whether compression is enabled after",
          "537: .Dq delayed",
          "538: (a legacy synonym for",
          "539: .Dq yes )",
          "543: .Dq yes .",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "32a036ab72850c918d7aa521e7844be59c6a3b4a",
      "candidate_info": {
        "commit_hash": "32a036ab72850c918d7aa521e7844be59c6a3b4a",
        "repo": "openbsd/src",
        "commit_url": "https://github.com/openbsd/src/commit/32a036ab72850c918d7aa521e7844be59c6a3b4a",
        "files": [
          "usr.bin/ssh/cipher-chachapoly.c",
          "usr.bin/ssh/cipher.c",
          "usr.bin/ssh/cipher.h",
          "usr.bin/ssh/packet.c",
          "usr.bin/ssh/sshkey.c"
        ],
        "message": "small refactor of cipher.c: make ciphercontext opaque to callers feedback and ok markus@",
        "before_after_code_files": [
          "usr.bin/ssh/cipher-chachapoly.c||usr.bin/ssh/cipher-chachapoly.c",
          "usr.bin/ssh/cipher.c||usr.bin/ssh/cipher.c",
          "usr.bin/ssh/cipher.h||usr.bin/ssh/cipher.h",
          "usr.bin/ssh/packet.c||usr.bin/ssh/packet.c",
          "usr.bin/ssh/sshkey.c||usr.bin/ssh/sshkey.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "usr.bin/ssh/packet.c||usr.bin/ssh/packet.c"
          ],
          "candidate": [
            "usr.bin/ssh/packet.c||usr.bin/ssh/packet.c"
          ]
        }
      },
      "candidate_diff": {
        "usr.bin/ssh/cipher-chachapoly.c||usr.bin/ssh/cipher-chachapoly.c": [
          "File: usr.bin/ssh/cipher-chachapoly.c -> usr.bin/ssh/cipher-chachapoly.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"ssherr.h\"",
          "27: #include \"cipher-chachapoly.h\"",
          "30:     const u_char *key, u_int keylen)",
          "31: {",
          "",
          "[Removed Lines]",
          "29: int chachapoly_init(struct chachapoly_ctx *ctx,",
          "",
          "[Added Lines]",
          "29: int",
          "30: chachapoly_init(struct chachapoly_ctx *ctx,",
          "",
          "---------------"
        ],
        "usr.bin/ssh/cipher.c||usr.bin/ssh/cipher.c": [
          "File: usr.bin/ssh/cipher.c -> usr.bin/ssh/cipher.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: extern int ssh1_3des_iv(EVP_CIPHER_CTX *, int, u_char *, int);",
          "54: #endif",
          "56: struct sshcipher {",
          "57:  char *name;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: struct sshcipher_ctx {",
          "57:  int plaintext;",
          "58:  int encrypt;",
          "59:  EVP_CIPHER_CTX *evp;",
          "62:  const struct sshcipher *cipher;",
          "63: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191:  return (c->flags & CFLAG_CBC) != 0;",
          "192: }",
          "194: u_int",
          "195: cipher_mask_ssh1(int client)",
          "196: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203: u_int",
          "204: cipher_ctx_is_plaintext(struct sshcipher_ctx *cc)",
          "205: {",
          "206:  return cc->plaintext;",
          "207: }",
          "209: u_int",
          "210: cipher_ctx_get_number(struct sshcipher_ctx *cc)",
          "211: {",
          "212:  return cc->cipher->number;",
          "213: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "283: }",
          "285: int",
          "287:     const u_char *key, u_int keylen, const u_char *iv, u_int ivlen,",
          "288:     int do_encrypt)",
          "289: {",
          "291:  int ret = SSH_ERR_INTERNAL_ERROR;",
          "292:  const EVP_CIPHER *type;",
          "293:  int klen;",
          "294:  u_char *junk, *discard;",
          "296:  if (cipher->number == SSH_CIPHER_DES) {",
          "297:   if (keylen > 8)",
          "298:    keylen = 8;",
          "299:  }",
          "301:  cc->plaintext = (cipher->number == SSH_CIPHER_NONE);",
          "302:  cc->encrypt = do_encrypt;",
          "304:  if (keylen < cipher->key_len ||",
          "308:  cc->cipher = cipher;",
          "309:  if ((cc->cipher->flags & CFLAG_CHACHAPOLY) != 0) {",
          "311:  }",
          "312: #ifndef WITH_OPENSSL",
          "313:  if ((cc->cipher->flags & CFLAG_AESCTR) != 0) {",
          "314:   aesctr_keysetup(&cc->ac_ctx, key, 8 * keylen, 8 * ivlen);",
          "315:   aesctr_ivsetup(&cc->ac_ctx, iv);",
          "317:  }",
          "322:  type = (*cipher->evptype)();",
          "325:      (do_encrypt == CIPHER_ENCRYPT)) == 0) {",
          "326:   ret = SSH_ERR_LIBCRYPTO_ERROR;",
          "328:  }",
          "329:  if (cipher_authlen(cipher) &&",
          "331:      -1, (u_char *)iv)) {",
          "332:   ret = SSH_ERR_LIBCRYPTO_ERROR;",
          "334:  }",
          "336:  if (klen > 0 && keylen != (u_int)klen) {",
          "338:    ret = SSH_ERR_LIBCRYPTO_ERROR;",
          "340:   }",
          "341:  }",
          "343:   ret = SSH_ERR_LIBCRYPTO_ERROR;",
          "345:  }",
          "347:  if (cipher->discard_len > 0) {",
          "",
          "[Removed Lines]",
          "286: cipher_init(struct sshcipher_ctx *cc, const struct sshcipher *cipher,",
          "290: #ifdef WITH_OPENSSL",
          "300: #endif",
          "305:      (iv != NULL && ivlen < cipher_ivlen(cipher)))",
          "306:   return SSH_ERR_INVALID_ARGUMENT;",
          "310:   return chachapoly_init(&cc->cp_ctx, key, keylen);",
          "316:   return 0;",
          "318:  if ((cc->cipher->flags & CFLAG_NONE) != 0)",
          "319:   return 0;",
          "320:  return SSH_ERR_INVALID_ARGUMENT;",
          "321: #else",
          "323:  EVP_CIPHER_CTX_init(&cc->evp);",
          "324:  if (EVP_CipherInit(&cc->evp, type, NULL, (u_char *)iv,",
          "327:   goto bad;",
          "330:      !EVP_CIPHER_CTX_ctrl(&cc->evp, EVP_CTRL_GCM_SET_IV_FIXED,",
          "333:   goto bad;",
          "335:  klen = EVP_CIPHER_CTX_key_length(&cc->evp);",
          "337:   if (EVP_CIPHER_CTX_set_key_length(&cc->evp, keylen) == 0) {",
          "339:    goto bad;",
          "342:  if (EVP_CipherInit(&cc->evp, NULL, (u_char *)key, NULL, -1) == 0) {",
          "344:   goto bad;",
          "",
          "[Added Lines]",
          "307: cipher_init(struct sshcipher_ctx **ccp, const struct sshcipher *cipher,",
          "311:  struct sshcipher_ctx *cc = NULL;",
          "313: #ifdef WITH_OPENSSL",
          "317: #endif",
          "320:  if ((cc = calloc(sizeof(*cc), 1)) == NULL)",
          "321:   return SSH_ERR_ALLOC_FAIL;",
          "332:      (iv != NULL && ivlen < cipher_ivlen(cipher))) {",
          "333:   ret = SSH_ERR_INVALID_ARGUMENT;",
          "334:   goto out;",
          "335:  }",
          "339:   ret = chachapoly_init(&cc->cp_ctx, key, keylen);",
          "340:   goto out;",
          "346:   ret = 0;",
          "347:   goto out;",
          "349:  if ((cc->cipher->flags & CFLAG_NONE) != 0) {",
          "350:   ret = 0;",
          "351:   goto out;",
          "352:  }",
          "353:  ret = SSH_ERR_INVALID_ARGUMENT;",
          "354:  goto out;",
          "357:  if ((cc->evp = EVP_CIPHER_CTX_new()) == NULL) {",
          "358:   ret = SSH_ERR_ALLOC_FAIL;",
          "359:   goto out;",
          "360:  }",
          "361:  if (EVP_CipherInit(cc->evp, type, NULL, (u_char *)iv,",
          "364:   goto out;",
          "367:      !EVP_CIPHER_CTX_ctrl(cc->evp, EVP_CTRL_GCM_SET_IV_FIXED,",
          "370:   goto out;",
          "372:  klen = EVP_CIPHER_CTX_key_length(cc->evp);",
          "374:   if (EVP_CIPHER_CTX_set_key_length(cc->evp, keylen) == 0) {",
          "376:    goto out;",
          "379:  if (EVP_CipherInit(cc->evp, NULL, (u_char *)key, NULL, -1) == 0) {",
          "381:   goto out;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "349:       (discard = malloc(cipher->discard_len)) == NULL) {",
          "350:    free(junk);",
          "351:    ret = SSH_ERR_ALLOC_FAIL;",
          "353:   }",
          "355:   explicit_bzero(discard, cipher->discard_len);",
          "356:   free(junk);",
          "357:   free(discard);",
          "358:   if (ret != 1) {",
          "359:    ret = SSH_ERR_LIBCRYPTO_ERROR;",
          "363:   }",
          "364:  }",
          "367: }",
          "",
          "[Removed Lines]",
          "352:    goto bad;",
          "354:   ret = EVP_Cipher(&cc->evp, discard, junk, cipher->discard_len);",
          "360:  bad:",
          "361:    EVP_CIPHER_CTX_cleanup(&cc->evp);",
          "362:    return ret;",
          "365: #endif",
          "366:  return 0;",
          "",
          "[Added Lines]",
          "389:    goto out;",
          "391:   ret = EVP_Cipher(cc->evp, discard, junk, cipher->discard_len);",
          "397:    goto out;",
          "400:  ret = 0;",
          "402:  out:",
          "403:  if (ret == 0) {",
          "406:  } else {",
          "407:   if (cc != NULL) {",
          "408: #ifdef WITH_OPENSSL",
          "409:    if (cc->evp != NULL)",
          "410:     EVP_CIPHER_CTX_free(cc->evp);",
          "412:    explicit_bzero(cc, sizeof(*cc));",
          "413:    free(cc);",
          "414:   }",
          "415:  }",
          "416:  return ret;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "404:   if (authlen != cipher_authlen(cc->cipher))",
          "405:    return SSH_ERR_INVALID_ARGUMENT;",
          "408:       1, lastiv))",
          "409:    return SSH_ERR_LIBCRYPTO_ERROR;",
          "411:   if (!cc->encrypt &&",
          "413:       authlen, (u_char *)src + aadlen + len))",
          "414:    return SSH_ERR_LIBCRYPTO_ERROR;",
          "415:  }",
          "416:  if (aadlen) {",
          "417:   if (authlen &&",
          "419:    return SSH_ERR_LIBCRYPTO_ERROR;",
          "420:   memcpy(dest, src, aadlen);",
          "421:  }",
          "422:  if (len % cc->cipher->block_size)",
          "423:   return SSH_ERR_INVALID_ARGUMENT;",
          "425:      len) < 0)",
          "426:   return SSH_ERR_LIBCRYPTO_ERROR;",
          "427:  if (authlen) {",
          "430:    return cc->encrypt ?",
          "431:        SSH_ERR_LIBCRYPTO_ERROR : SSH_ERR_MAC_INVALID;",
          "432:   if (cc->encrypt &&",
          "434:       authlen, dest + aadlen + len))",
          "435:    return SSH_ERR_LIBCRYPTO_ERROR;",
          "436:  }",
          "",
          "[Removed Lines]",
          "407:   if (!EVP_CIPHER_CTX_ctrl(&cc->evp, EVP_CTRL_GCM_IV_GEN,",
          "412:       !EVP_CIPHER_CTX_ctrl(&cc->evp, EVP_CTRL_GCM_SET_TAG,",
          "418:       EVP_Cipher(&cc->evp, NULL, (u_char *)src, aadlen) < 0)",
          "424:  if (EVP_Cipher(&cc->evp, dest + aadlen, (u_char *)src + aadlen,",
          "429:   if (EVP_Cipher(&cc->evp, NULL, NULL, 0) < 0)",
          "433:       !EVP_CIPHER_CTX_ctrl(&cc->evp, EVP_CTRL_GCM_GET_TAG,",
          "",
          "[Added Lines]",
          "457:   if (!EVP_CIPHER_CTX_ctrl(cc->evp, EVP_CTRL_GCM_IV_GEN,",
          "462:       !EVP_CIPHER_CTX_ctrl(cc->evp, EVP_CTRL_GCM_SET_TAG,",
          "468:       EVP_Cipher(cc->evp, NULL, (u_char *)src, aadlen) < 0)",
          "474:  if (EVP_Cipher(cc->evp, dest + aadlen, (u_char *)src + aadlen,",
          "479:   if (EVP_Cipher(cc->evp, NULL, NULL, 0) < 0)",
          "483:       !EVP_CIPHER_CTX_ctrl(cc->evp, EVP_CTRL_GCM_GET_TAG,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "452:  return 0;",
          "453: }",
          "457: {",
          "460:  if ((cc->cipher->flags & CFLAG_CHACHAPOLY) != 0)",
          "461:   explicit_bzero(&cc->cp_ctx, sizeof(cc->cp_ctx));",
          "462:  else if ((cc->cipher->flags & CFLAG_AESCTR) != 0)",
          "463:   explicit_bzero(&cc->ac_ctx, sizeof(cc->ac_ctx));",
          "464: #ifdef WITH_OPENSSL",
          "467: #endif",
          "469: }",
          "",
          "[Removed Lines]",
          "455: int",
          "456: cipher_cleanup(struct sshcipher_ctx *cc)",
          "458:  if (cc == NULL || cc->cipher == NULL)",
          "459:   return 0;",
          "465:  else if (EVP_CIPHER_CTX_cleanup(&cc->evp) == 0)",
          "466:   return SSH_ERR_LIBCRYPTO_ERROR;",
          "468:  return 0;",
          "",
          "[Added Lines]",
          "505: void",
          "506: cipher_free(struct sshcipher_ctx *cc)",
          "508:  if (cc == NULL)",
          "509:   return;",
          "515:  if (cc->evp != NULL) {",
          "516:   EVP_CIPHER_CTX_free(cc->evp);",
          "517:   cc->evp = NULL;",
          "518:  }",
          "520:  explicit_bzero(cc, sizeof(*cc));",
          "521:  free(cc);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "475: int",
          "478: {",
          "479:  u_char digest[16];",
          "480:  int r = SSH_ERR_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "476: cipher_set_key_string(struct sshcipher_ctx *cc, const struct sshcipher *cipher,",
          "477:     const char *passphrase, int do_encrypt)",
          "",
          "[Added Lines]",
          "529: cipher_set_key_string(struct sshcipher_ctx **ccp,",
          "530:     const struct sshcipher *cipher, const char *passphrase, int do_encrypt)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "484:      digest, sizeof(digest))) != 0)",
          "485:   goto out;",
          "488:  out:",
          "489:  explicit_bzero(digest, sizeof(digest));",
          "490:  return r;",
          "",
          "[Removed Lines]",
          "487:  r = cipher_init(cc, cipher, digest, 16, NULL, 0, do_encrypt);",
          "",
          "[Added Lines]",
          "540:  r = cipher_init(ccp, cipher, digest, 16, NULL, 0, do_encrypt);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "509:   ivlen = sizeof(cc->ac_ctx.ctr);",
          "510: #ifdef WITH_OPENSSL",
          "511:  else",
          "514:  return (ivlen);",
          "515: }",
          "",
          "[Removed Lines]",
          "512:   ivlen = EVP_CIPHER_CTX_iv_length(&cc->evp);",
          "",
          "[Added Lines]",
          "565:   ivlen = EVP_CIPHER_CTX_iv_length(cc->evp);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "541:  case SSH_CIPHER_SSH2:",
          "542:  case SSH_CIPHER_DES:",
          "543:  case SSH_CIPHER_BLOWFISH:",
          "545:   if (evplen == 0)",
          "546:    return 0;",
          "547:   else if (evplen < 0)",
          "",
          "[Removed Lines]",
          "544:   evplen = EVP_CIPHER_CTX_iv_length(&cc->evp);",
          "",
          "[Added Lines]",
          "597:   evplen = EVP_CIPHER_CTX_iv_length(cc->evp);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "549:   if ((u_int)evplen != len)",
          "550:    return SSH_ERR_INVALID_ARGUMENT;",
          "551:   if (cipher_authlen(c)) {",
          "553:       len, iv))",
          "554:           return SSH_ERR_LIBCRYPTO_ERROR;",
          "555:   } else",
          "557:   break;",
          "558: #endif",
          "559: #ifdef WITH_SSH1",
          "560:  case SSH_CIPHER_3DES:",
          "562: #endif",
          "563:  default:",
          "564:   return SSH_ERR_INVALID_ARGUMENT;",
          "",
          "[Removed Lines]",
          "552:    if (!EVP_CIPHER_CTX_ctrl(&cc->evp, EVP_CTRL_GCM_IV_GEN,",
          "556:    memcpy(iv, cc->evp.iv, len);",
          "561:   return ssh1_3des_iv(&cc->evp, 0, iv, 24);",
          "",
          "[Added Lines]",
          "605:    if (!EVP_CIPHER_CTX_ctrl(cc->evp, EVP_CTRL_GCM_IV_GEN,",
          "609:    memcpy(iv, cc->evp->iv, len);",
          "614:   return ssh1_3des_iv(cc->evp, 0, iv, 24);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "584:  case SSH_CIPHER_SSH2:",
          "585:  case SSH_CIPHER_DES:",
          "586:  case SSH_CIPHER_BLOWFISH:",
          "588:   if (evplen <= 0)",
          "589:    return SSH_ERR_LIBCRYPTO_ERROR;",
          "590:   if (cipher_authlen(c)) {",
          "593:        EVP_CTRL_GCM_SET_IV_FIXED, -1, (void *)iv))",
          "594:     return SSH_ERR_LIBCRYPTO_ERROR;",
          "595:   } else",
          "597:   break;",
          "598: #endif",
          "599: #ifdef WITH_SSH1",
          "600:  case SSH_CIPHER_3DES:",
          "602: #endif",
          "603:  default:",
          "604:   return SSH_ERR_INVALID_ARGUMENT;",
          "",
          "[Removed Lines]",
          "587:   evplen = EVP_CIPHER_CTX_iv_length(&cc->evp);",
          "592:    if (!EVP_CIPHER_CTX_ctrl(&cc->evp,",
          "596:    memcpy(cc->evp.iv, iv, evplen);",
          "601:   return ssh1_3des_iv(&cc->evp, 1, (u_char *)iv, 24);",
          "",
          "[Added Lines]",
          "640:   evplen = EVP_CIPHER_CTX_iv_length(cc->evp);",
          "645:    if (!EVP_CIPHER_CTX_ctrl(cc->evp,",
          "649:    memcpy(cc->evp->iv, iv, evplen);",
          "654:   return ssh1_3des_iv(cc->evp, 1, (u_char *)iv, 24);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "607: }",
          "609: #ifdef WITH_OPENSSL",
          "612: #endif",
          "614: int",
          "",
          "[Removed Lines]",
          "610: #define EVP_X_STATE(evp) (evp).cipher_data",
          "611: #define EVP_X_STATE_LEN(evp) (evp).cipher->ctx_size",
          "",
          "[Added Lines]",
          "663: #define EVP_X_STATE(evp) (evp)->cipher_data",
          "664: #define EVP_X_STATE_LEN(evp) (evp)->cipher->ctx_size",
          "",
          "---------------"
        ],
        "usr.bin/ssh/cipher.h||usr.bin/ssh/cipher.h": [
          "File: usr.bin/ssh/cipher.h -> usr.bin/ssh/cipher.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: #define CIPHER_DECRYPT  0",
          "65: struct sshcipher;",
          "75: u_int  cipher_mask_ssh1(int);",
          "76: const struct sshcipher *cipher_by_name(const char *);",
          "",
          "[Removed Lines]",
          "66: struct sshcipher_ctx {",
          "67:  int plaintext;",
          "68:  int encrypt;",
          "69:  EVP_CIPHER_CTX evp;",
          "72:  const struct sshcipher *cipher;",
          "73: };",
          "",
          "[Added Lines]",
          "66: struct sshcipher_ctx;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80: const char *cipher_warning_message(const struct sshcipher_ctx *);",
          "81: int  ciphers_valid(const char *);",
          "82: char *cipher_alg_list(char, int);",
          "84:     const u_char *, u_int, const u_char *, u_int, int);",
          "85: int  cipher_crypt(struct sshcipher_ctx *, u_int, u_char *, const u_char *,",
          "86:     u_int, u_int, u_int);",
          "87: int  cipher_get_length(struct sshcipher_ctx *, u_int *, u_int,",
          "88:     const u_char *, u_int);",
          "92: u_int  cipher_blocksize(const struct sshcipher *);",
          "93: u_int  cipher_keylen(const struct sshcipher *);",
          "94: u_int  cipher_seclen(const struct sshcipher *);",
          "",
          "[Removed Lines]",
          "83: int  cipher_init(struct sshcipher_ctx *, const struct sshcipher *,",
          "89: int  cipher_cleanup(struct sshcipher_ctx *);",
          "90: int  cipher_set_key_string(struct sshcipher_ctx *, const struct sshcipher *,",
          "91:     const char *, int);",
          "",
          "[Added Lines]",
          "76: int  cipher_init(struct sshcipher_ctx **, const struct sshcipher *,",
          "82: void  cipher_free(struct sshcipher_ctx *);",
          "83: int  cipher_set_key_string(struct sshcipher_ctx **,",
          "84:     const struct sshcipher *, const char *, int);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96: u_int  cipher_ivlen(const struct sshcipher *);",
          "97: u_int  cipher_is_cbc(const struct sshcipher *);",
          "99: u_int  cipher_get_number(const struct sshcipher *);",
          "100: int  cipher_get_keyiv(struct sshcipher_ctx *, u_char *, u_int);",
          "101: int  cipher_set_keyiv(struct sshcipher_ctx *, const u_char *);",
          "102: int  cipher_get_keyiv_len(const struct sshcipher_ctx *);",
          "103: int  cipher_get_keycontext(const struct sshcipher_ctx *, u_char *);",
          "104: void  cipher_set_keycontext(struct sshcipher_ctx *, const u_char *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92: u_int  cipher_ctx_is_plaintext(struct sshcipher_ctx *);",
          "93: u_int  cipher_ctx_get_number(struct sshcipher_ctx *);",
          "",
          "---------------"
        ],
        "usr.bin/ssh/packet.c||usr.bin/ssh/packet.c": [
          "File: usr.bin/ssh/packet.c -> usr.bin/ssh/packet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:  u_int remote_protocol_flags;",
          "125:  struct sshbuf *input;",
          "",
          "[Removed Lines]",
          "119:  struct sshcipher_ctx receive_context;",
          "122:  struct sshcipher_ctx send_context;",
          "",
          "[Added Lines]",
          "119:  struct sshcipher_ctx *receive_context;",
          "122:  struct sshcipher_ctx *send_context;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "518: ssh_packet_close(struct ssh *ssh)",
          "519: {",
          "520:  struct session_state *state = ssh->state;",
          "522:  u_int mode;",
          "524:  if (!state->initialized)",
          "",
          "[Removed Lines]",
          "521:  int r;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "562:     inflateEnd(stream);",
          "563:   }",
          "564:  }",
          "569:  free(ssh->remote_ipaddr);",
          "570:  ssh->remote_ipaddr = NULL;",
          "571:  free(ssh->state);",
          "",
          "[Removed Lines]",
          "565:  if ((r = cipher_cleanup(&state->send_context)) != 0)",
          "566:   error(\"%s: cipher_cleanup failed: %s\", __func__, ssh_err(r));",
          "567:  if ((r = cipher_cleanup(&state->receive_context)) != 0)",
          "568:   error(\"%s: cipher_cleanup failed: %s\", __func__, ssh_err(r));",
          "",
          "[Added Lines]",
          "564:  cipher_free(state->send_context);",
          "565:  cipher_free(state->receive_context);",
          "566:  state->send_context = state->receive_context = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "859:      NULL, 0, CIPHER_DECRYPT) != 0))",
          "860:   fatal(\"%s: cipher_init failed: %s\", __func__, ssh_err(r));",
          "861:  if (!state->cipher_warning_done &&",
          "864:   error(\"Warning: %s\", wmsg);",
          "865:   state->cipher_warning_done = 1;",
          "866:  }",
          "",
          "[Removed Lines]",
          "862:      ((wmsg = cipher_warning_message(&state->send_context)) != NULL ||",
          "863:      (wmsg = cipher_warning_message(&state->send_context)) != NULL)) {",
          "",
          "[Added Lines]",
          "860:      ((wmsg = cipher_warning_message(state->send_context)) != NULL ||",
          "861:      (wmsg = cipher_warning_message(state->send_context)) != NULL)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "908:  padding = 8 - len % 8;",
          "910:   cp = sshbuf_mutable_ptr(state->outgoing_packet);",
          "911:   if (cp == NULL) {",
          "912:    r = SSH_ERR_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "909:  if (!state->send_context.plaintext) {",
          "",
          "[Added Lines]",
          "907:  if (!cipher_ctx_is_plaintext(state->send_context)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "936:  if ((r = sshbuf_reserve(state->output,",
          "937:      sshbuf_len(state->outgoing_packet), &cp)) != 0)",
          "938:   goto out;",
          "940:      sshbuf_ptr(state->outgoing_packet),",
          "941:      sshbuf_len(state->outgoing_packet), 0, 0)) != 0)",
          "942:   goto out;",
          "",
          "[Removed Lines]",
          "939:  if ((r = cipher_crypt(&state->send_context, 0, cp,",
          "",
          "[Added Lines]",
          "937:  if ((r = cipher_crypt(state->send_context, 0, cp,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "967:  struct sshenc *enc;",
          "968:  struct sshmac *mac;",
          "969:  struct sshcomp *comp;",
          "971:  u_int64_t *max_blocks;",
          "972:  const char *wmsg;",
          "973:  int r, crypt_type;",
          "",
          "[Removed Lines]",
          "970:  struct sshcipher_ctx *cc;",
          "",
          "[Added Lines]",
          "968:  struct sshcipher_ctx **ccp;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "975:  debug2(\"set_newkeys: mode %d\", mode);",
          "977:  if (mode == MODE_OUT) {",
          "979:   crypt_type = CIPHER_ENCRYPT;",
          "980:   state->p_send.packets = state->p_send.blocks = 0;",
          "981:   max_blocks = &state->max_blocks_out;",
          "982:  } else {",
          "984:   crypt_type = CIPHER_DECRYPT;",
          "985:   state->p_read.packets = state->p_read.blocks = 0;",
          "986:   max_blocks = &state->max_blocks_in;",
          "",
          "[Removed Lines]",
          "978:   cc = &state->send_context;",
          "983:   cc = &state->receive_context;",
          "",
          "[Added Lines]",
          "976:   ccp = &state->send_context;",
          "981:   ccp = &state->receive_context;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "992:      (unsigned long long)state->p_read.blocks,",
          "993:      (unsigned long long)state->p_send.bytes,",
          "994:      (unsigned long long)state->p_send.blocks);",
          "997:   enc  = &state->newkeys[mode]->enc;",
          "998:   mac  = &state->newkeys[mode]->mac;",
          "999:   comp = &state->newkeys[mode]->comp;",
          "",
          "[Removed Lines]",
          "995:   if ((r = cipher_cleanup(cc)) != 0)",
          "996:    return r;",
          "",
          "[Added Lines]",
          "993:   cipher_free(*ccp);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1022:  }",
          "1023:  mac->enabled = 1;",
          "1024:  DBG(debug(\"cipher_init_context: %d\", mode));",
          "1026:      enc->iv, enc->iv_len, crypt_type)) != 0)",
          "1027:   return r;",
          "1028:  if (!state->cipher_warning_done &&",
          "1030:   error(\"Warning: %s\", wmsg);",
          "1031:   state->cipher_warning_done = 1;",
          "1032:  }",
          "",
          "[Removed Lines]",
          "1025:  if ((r = cipher_init(cc, enc->cipher, enc->key, enc->key_len,",
          "1029:      (wmsg = cipher_warning_message(cc)) != NULL) {",
          "",
          "[Added Lines]",
          "1023:  if ((r = cipher_init(ccp, enc->cipher, enc->key, enc->key_len,",
          "1027:      (wmsg = cipher_warning_message(*ccp)) != NULL) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1248:  }",
          "1249:  if ((r = sshbuf_reserve(state->outgoing_packet, padlen, &cp)) != 0)",
          "1250:   goto out;",
          "1253:   arc4random_buf(cp, padlen);",
          "1254:  } else {",
          "",
          "[Removed Lines]",
          "1251:  if (enc && !state->send_context.plaintext) {",
          "",
          "[Added Lines]",
          "1249:  if (enc && !cipher_ctx_is_plaintext(state->send_context)) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1280:  if ((r = sshbuf_reserve(state->output,",
          "1281:      sshbuf_len(state->outgoing_packet) + authlen, &cp)) != 0)",
          "1282:   goto out;",
          "1284:      sshbuf_ptr(state->outgoing_packet),",
          "1285:      len - aadlen, aadlen, authlen)) != 0)",
          "1286:   goto out;",
          "",
          "[Removed Lines]",
          "1283:  if ((r = cipher_crypt(&state->send_context, state->p_send.seqnr, cp,",
          "",
          "[Added Lines]",
          "1281:  if ((r = cipher_crypt(state->send_context, state->p_send.seqnr, cp,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1598:   emsg = NULL;",
          "1599:   switch (detect_attack(&state->deattack,",
          "1600:       sshbuf_ptr(state->input), padded_len)) {",
          "",
          "[Removed Lines]",
          "1597:  if (!state->receive_context.plaintext) {",
          "",
          "[Added Lines]",
          "1595:  if (!cipher_ctx_is_plaintext(state->receive_context)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1623:  sshbuf_reset(state->incoming_packet);",
          "1624:  if ((r = sshbuf_reserve(state->incoming_packet, padded_len, &p)) != 0)",
          "1625:   goto out;",
          "1627:      sshbuf_ptr(state->input), padded_len, 0, 0)) != 0)",
          "1628:   goto out;",
          "",
          "[Removed Lines]",
          "1626:  if ((r = cipher_crypt(&state->receive_context, 0, p,",
          "",
          "[Added Lines]",
          "1624:  if ((r = cipher_crypt(state->receive_context, 0, p,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1721:  aadlen = (mac && mac->enabled && mac->etm) || authlen ? 4 : 0;",
          "1723:  if (aadlen && state->packlen == 0) {",
          "1725:       &state->packlen, state->p_read.seqnr,",
          "1726:       sshbuf_ptr(state->input), sshbuf_len(state->input)) != 0)",
          "1727:    return 0;",
          "",
          "[Removed Lines]",
          "1724:   if (cipher_get_length(&state->receive_context,",
          "",
          "[Added Lines]",
          "1722:   if (cipher_get_length(state->receive_context,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1747:   if ((r = sshbuf_reserve(state->incoming_packet, block_size,",
          "1748:       &cp)) != 0)",
          "1749:    goto out;",
          "1751:       state->p_send.seqnr, cp, sshbuf_ptr(state->input),",
          "1752:       block_size, 0, 0)) != 0)",
          "1753:    goto out;",
          "",
          "[Removed Lines]",
          "1750:   if ((r = cipher_crypt(&state->receive_context,",
          "",
          "[Added Lines]",
          "1748:   if ((r = cipher_crypt(state->receive_context,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1815:  if ((r = sshbuf_reserve(state->incoming_packet, aadlen + need,",
          "1816:      &cp)) != 0)",
          "1817:   goto out;",
          "1819:      sshbuf_ptr(state->input), need, aadlen, authlen)) != 0)",
          "1820:   goto out;",
          "1821:  if ((r = sshbuf_consume(state->input, aadlen + need + authlen)) != 0)",
          "",
          "[Removed Lines]",
          "1818:  if ((r = cipher_crypt(&state->receive_context, state->p_read.seqnr, cp,",
          "",
          "[Added Lines]",
          "1816:  if ((r = cipher_crypt(state->receive_context, state->p_read.seqnr, cp,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2489:  enc = &newkey->enc;",
          "2490:  mac = &newkey->mac;",
          "2491:  comp = &newkey->comp;",
          "2494:  if ((r = cipher_get_keyiv(cc, enc->iv, enc->iv_len)) != 0)",
          "2495:   return r;",
          "2496:  if ((b = sshbuf_new()) == NULL)",
          "",
          "[Removed Lines]",
          "2492:  cc = (mode == MODE_OUT) ? &ssh->state->send_context :",
          "2493:      &ssh->state->receive_context;",
          "",
          "[Added Lines]",
          "2490:  cc = (mode == MODE_OUT) ? ssh->state->send_context :",
          "2491:      ssh->state->receive_context;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2529:  int r, ssh1cipher;",
          "2531:  if (!compat20) {",
          "2535:   if ((r = sshbuf_put_u32(m, state->remote_protocol_flags)) != 0 ||",
          "2536:       (r = sshbuf_put_u32(m, ssh1cipher)) != 0 ||",
          "2537:       (r = sshbuf_put_string(m, state->ssh1_key, state->ssh1_keylen)) != 0 ||",
          "2538:       (r = sshbuf_put_u32(m, slen)) != 0 ||",
          "2539:       (r = sshbuf_reserve(m, slen, &p)) != 0 ||",
          "2541:       (r = sshbuf_put_u32(m, rlen)) != 0 ||",
          "2542:       (r = sshbuf_reserve(m, rlen, &p)) != 0 ||",
          "2544:    return r;",
          "2545:  } else {",
          "2546:   if ((r = kex_to_blob(m, ssh->kex)) != 0 ||",
          "",
          "[Removed Lines]",
          "2532:   ssh1cipher = cipher_get_number(state->receive_context.cipher);",
          "2533:   slen = cipher_get_keyiv_len(&state->send_context);",
          "2534:   rlen = cipher_get_keyiv_len(&state->receive_context);",
          "2540:       (r = cipher_get_keyiv(&state->send_context, p, slen)) != 0 ||",
          "2543:       (r = cipher_get_keyiv(&state->receive_context, p, rlen)) != 0)",
          "",
          "[Added Lines]",
          "2530:   ssh1cipher = cipher_ctx_get_number(state->receive_context);",
          "2531:   slen = cipher_get_keyiv_len(state->send_context);",
          "2532:   rlen = cipher_get_keyiv_len(state->receive_context);",
          "2538:       (r = cipher_get_keyiv(state->send_context, p, slen)) != 0 ||",
          "2541:       (r = cipher_get_keyiv(state->receive_context, p, rlen)) != 0)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2559:    return r;",
          "2560:  }",
          "2564:  if ((r = sshbuf_put_u32(m, slen)) != 0 ||",
          "2565:      (r = sshbuf_reserve(m, slen, &p)) != 0)",
          "2566:   return r;",
          "2568:   return SSH_ERR_INTERNAL_ERROR;",
          "2569:  if ((r = sshbuf_put_u32(m, rlen)) != 0 ||",
          "2570:      (r = sshbuf_reserve(m, rlen, &p)) != 0)",
          "2571:   return r;",
          "2573:   return SSH_ERR_INTERNAL_ERROR;",
          "2575:  if ((r = ssh_packet_get_compress_state(m, ssh)) != 0 ||",
          "",
          "[Removed Lines]",
          "2562:  slen = cipher_get_keycontext(&state->send_context, NULL);",
          "2563:  rlen = cipher_get_keycontext(&state->receive_context, NULL);",
          "2567:  if (cipher_get_keycontext(&state->send_context, p) != (int)slen)",
          "2572:  if (cipher_get_keycontext(&state->receive_context, p) != (int)rlen)",
          "",
          "[Added Lines]",
          "2560:  slen = cipher_get_keycontext(state->send_context, NULL);",
          "2561:  rlen = cipher_get_keycontext(state->receive_context, NULL);",
          "2565:  if (cipher_get_keycontext(state->send_context, p) != (int)slen)",
          "2570:  if (cipher_get_keycontext(state->receive_context, p) != (int)rlen)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2715:    return SSH_ERR_KEY_UNKNOWN_CIPHER;",
          "2716:   ssh_packet_set_encryption_key(ssh, ssh1key, ssh1keylen,",
          "2717:       (int)ssh1cipher);",
          "2720:    return SSH_ERR_INVALID_FORMAT;",
          "2723:    return r;",
          "2724:  } else {",
          "2725:   if ((r = kex_from_blob(m, &ssh->kex)) != 0 ||",
          "",
          "[Removed Lines]",
          "2718:   if (cipher_get_keyiv_len(&state->send_context) != (int)slen ||",
          "2719:       cipher_get_keyiv_len(&state->receive_context) != (int)rlen)",
          "2721:   if ((r = cipher_set_keyiv(&state->send_context, ivout)) != 0 ||",
          "2722:       (r = cipher_set_keyiv(&state->receive_context, ivin)) != 0)",
          "",
          "[Added Lines]",
          "2716:   if (cipher_get_keyiv_len(state->send_context) != (int)slen ||",
          "2717:       cipher_get_keyiv_len(state->receive_context) != (int)rlen)",
          "2719:   if ((r = cipher_set_keyiv(state->send_context, ivout)) != 0 ||",
          "2720:       (r = cipher_set_keyiv(state->receive_context, ivin)) != 0)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2749:  if ((r = sshbuf_get_string_direct(m, &keyout, &slen)) != 0 ||",
          "2750:      (r = sshbuf_get_string_direct(m, &keyin, &rlen)) != 0)",
          "2751:   return r;",
          "2754:   return SSH_ERR_INVALID_FORMAT;",
          "2758:  if ((r = ssh_packet_set_compress_state(ssh, m)) != 0 ||",
          "2759:      (r = ssh_packet_set_postauth(ssh)) != 0)",
          "",
          "[Removed Lines]",
          "2752:  if (cipher_get_keycontext(&state->send_context, NULL) != (int)slen ||",
          "2753:      cipher_get_keycontext(&state->receive_context, NULL) != (int)rlen)",
          "2755:  cipher_set_keycontext(&state->send_context, keyout);",
          "2756:  cipher_set_keycontext(&state->receive_context, keyin);",
          "",
          "[Added Lines]",
          "2750:  if (cipher_get_keycontext(state->send_context, NULL) != (int)slen ||",
          "2751:      cipher_get_keycontext(state->receive_context, NULL) != (int)rlen)",
          "2753:  cipher_set_keycontext(state->send_context, keyout);",
          "2754:  cipher_set_keycontext(state->receive_context, keyin);",
          "",
          "---------------"
        ],
        "usr.bin/ssh/sshkey.c||usr.bin/ssh/sshkey.c": [
          "File: usr.bin/ssh/sshkey.c -> usr.bin/ssh/sshkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2979:  size_t i, pubkeylen, keylen, ivlen, blocksize, authlen;",
          "2980:  u_int check;",
          "2981:  int r = SSH_ERR_INTERNAL_ERROR;",
          "2983:  const struct sshcipher *cipher;",
          "2984:  const char *kdfname = KDFNAME;",
          "2985:  struct sshbuf *encoded = NULL, *encrypted = NULL, *kdf = NULL;",
          "2989:  if (rounds <= 0)",
          "2990:   rounds = DEFAULT_ROUNDS;",
          "2991:  if (passphrase == NULL || !strlen(passphrase)) {",
          "",
          "[Removed Lines]",
          "2982:  struct sshcipher_ctx ciphercontext;",
          "2987:  memset(&ciphercontext, 0, sizeof(ciphercontext));",
          "",
          "[Added Lines]",
          "2982:  struct sshcipher_ctx *ciphercontext = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3072:  if ((r = sshbuf_reserve(encoded,",
          "3073:      sshbuf_len(encrypted) + authlen, &cp)) != 0)",
          "3074:   goto out;",
          "3076:      sshbuf_ptr(encrypted), sshbuf_len(encrypted), 0, authlen)) != 0)",
          "3077:   goto out;",
          "",
          "[Removed Lines]",
          "3075:  if ((r = cipher_crypt(&ciphercontext, 0, cp,",
          "",
          "[Added Lines]",
          "3073:  if ((r = cipher_crypt(ciphercontext, 0, cp,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3104:  sshbuf_free(kdf);",
          "3105:  sshbuf_free(encoded);",
          "3106:  sshbuf_free(encrypted);",
          "3108:  explicit_bzero(salt, sizeof(salt));",
          "3109:  if (key != NULL) {",
          "3110:   explicit_bzero(key, keylen + ivlen);",
          "",
          "[Removed Lines]",
          "3107:  cipher_cleanup(&ciphercontext);",
          "",
          "[Added Lines]",
          "3105:  cipher_free(ciphercontext);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3133:  size_t i, keylen = 0, ivlen = 0, authlen = 0, slen = 0;",
          "3134:  struct sshbuf *encoded = NULL, *decoded = NULL;",
          "3135:  struct sshbuf *kdf = NULL, *decrypted = NULL;",
          "3137:  struct sshkey *k = NULL;",
          "3138:  u_char *key = NULL, *salt = NULL, *dp, pad, last;",
          "3139:  u_int blocksize, rounds, nkeys, encrypted_len, check1, check2;",
          "3142:  if (keyp != NULL)",
          "3144:  if (commentp != NULL)",
          "",
          "[Removed Lines]",
          "3136:  struct sshcipher_ctx ciphercontext;",
          "3141:  memset(&ciphercontext, 0, sizeof(ciphercontext));",
          "",
          "[Added Lines]",
          "3134:  struct sshcipher_ctx *ciphercontext = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3267:      (r = cipher_init(&ciphercontext, cipher, key, keylen,",
          "3268:      key + keylen, ivlen, 0)) != 0)",
          "3269:   goto out;",
          "3271:      encrypted_len, 0, authlen)) != 0) {",
          "3273:   if (r == SSH_ERR_MAC_INVALID)",
          "",
          "[Removed Lines]",
          "3270:  if ((r = cipher_crypt(&ciphercontext, 0, dp, sshbuf_ptr(decoded),",
          "",
          "[Added Lines]",
          "3267:  if ((r = cipher_crypt(ciphercontext, 0, dp, sshbuf_ptr(decoded),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3321:  }",
          "3322:  out:",
          "3323:  pad = 0;",
          "3325:  free(ciphername);",
          "3326:  free(kdfname);",
          "3327:  free(comment);",
          "",
          "[Removed Lines]",
          "3324:  cipher_cleanup(&ciphercontext);",
          "",
          "[Added Lines]",
          "3321:  cipher_free(ciphercontext);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3355:  struct sshbuf *buffer = NULL, *encrypted = NULL;",
          "3356:  u_char buf[8];",
          "3357:  int r, cipher_num;",
          "3359:  const struct sshcipher *cipher;",
          "3360:  u_char *cp;",
          "",
          "[Removed Lines]",
          "3358:  struct sshcipher_ctx ciphercontext;",
          "",
          "[Added Lines]",
          "3355:  struct sshcipher_ctx *ciphercontext = NULL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3425:  if ((r = cipher_set_key_string(&ciphercontext, cipher, passphrase,",
          "3426:      CIPHER_ENCRYPT)) != 0)",
          "3427:   goto out;",
          "3429:      sshbuf_ptr(buffer), sshbuf_len(buffer), 0, 0)) != 0)",
          "3430:   goto out;",
          "3434:  r = sshbuf_putb(blob, encrypted);",
          "3436:  out:",
          "3438:  explicit_bzero(buf, sizeof(buf));",
          "3439:  sshbuf_free(buffer);",
          "3440:  sshbuf_free(encrypted);",
          "",
          "[Removed Lines]",
          "3428:  if ((r = cipher_crypt(&ciphercontext, 0, cp,",
          "3431:  if ((r = cipher_cleanup(&ciphercontext)) != 0)",
          "3432:   goto out;",
          "3437:  explicit_bzero(&ciphercontext, sizeof(ciphercontext));",
          "",
          "[Added Lines]",
          "3425:  if ((r = cipher_crypt(ciphercontext, 0, cp,",
          "3432:  cipher_free(ciphercontext);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3598:  struct sshbuf *decrypted = NULL, *copy = NULL;",
          "3599:  u_char *cp;",
          "3600:  char *comment = NULL;",
          "3602:  const struct sshcipher *cipher;",
          "3603:  struct sshkey *prv = NULL;",
          "",
          "[Removed Lines]",
          "3601:  struct sshcipher_ctx ciphercontext;",
          "",
          "[Added Lines]",
          "3596:  struct sshcipher_ctx *ciphercontext = NULL;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3656:  if ((r = cipher_set_key_string(&ciphercontext, cipher, passphrase,",
          "3657:      CIPHER_DECRYPT)) != 0)",
          "3658:   goto out;",
          "3665:   goto out;",
          "3667:  if ((r = sshbuf_get_u16(decrypted, &check1)) != 0 ||",
          "",
          "[Removed Lines]",
          "3659:  if ((r = cipher_crypt(&ciphercontext, 0, cp,",
          "3660:      sshbuf_ptr(copy), sshbuf_len(copy), 0, 0)) != 0) {",
          "3661:   cipher_cleanup(&ciphercontext);",
          "3662:   goto out;",
          "3663:  }",
          "3664:  if ((r = cipher_cleanup(&ciphercontext)) != 0)",
          "",
          "[Added Lines]",
          "3654:  if ((r = cipher_crypt(ciphercontext, 0, cp,",
          "3655:      sshbuf_ptr(copy), sshbuf_len(copy), 0, 0)) != 0)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3698:   comment = NULL;",
          "3699:  }",
          "3700:  out:",
          "3702:  free(comment);",
          "3703:  sshkey_free(prv);",
          "3704:  sshbuf_free(copy);",
          "",
          "[Removed Lines]",
          "3701:  explicit_bzero(&ciphercontext, sizeof(ciphercontext));",
          "",
          "[Added Lines]",
          "3692:  cipher_free(ciphercontext);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b1c1c1b20ef1c59a78e468bc641712dfb0f23b2",
      "candidate_info": {
        "commit_hash": "1b1c1c1b20ef1c59a78e468bc641712dfb0f23b2",
        "repo": "openbsd/src",
        "commit_url": "https://github.com/openbsd/src/commit/1b1c1c1b20ef1c59a78e468bc641712dfb0f23b2",
        "files": [
          "usr.bin/ssh/sshconnect2.c",
          "usr.bin/ssh/sshd.c"
        ],
        "message": "KNF compression proposal and simplify the client side a little.  ok djm@",
        "before_after_code_files": [
          "usr.bin/ssh/sshconnect2.c||usr.bin/ssh/sshconnect2.c",
          "usr.bin/ssh/sshd.c||usr.bin/ssh/sshd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "usr.bin/ssh/sshconnect2.c||usr.bin/ssh/sshconnect2.c",
            "usr.bin/ssh/sshd.c||usr.bin/ssh/sshd.c"
          ],
          "candidate": [
            "usr.bin/ssh/sshconnect2.c||usr.bin/ssh/sshconnect2.c",
            "usr.bin/ssh/sshd.c||usr.bin/ssh/sshd.c"
          ]
        }
      },
      "candidate_diff": {
        "usr.bin/ssh/sshconnect2.c||usr.bin/ssh/sshconnect2.c": [
          "File: usr.bin/ssh/sshconnect2.c -> usr.bin/ssh/sshconnect2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:      compat_cipher_proposal(options.ciphers);",
          "166:  myproposal[PROPOSAL_ENC_ALGS_STOC] =",
          "167:      compat_cipher_proposal(options.ciphers);",
          "175:  myproposal[PROPOSAL_MAC_ALGS_CTOS] =",
          "176:      myproposal[PROPOSAL_MAC_ALGS_STOC] = options.macs;",
          "177:  if (options.hostkeyalgorithms != NULL) {",
          "",
          "[Removed Lines]",
          "168:  if (options.compression) {",
          "169:   myproposal[PROPOSAL_COMP_ALGS_CTOS] =",
          "170:   myproposal[PROPOSAL_COMP_ALGS_STOC] = \"zlib@openssh.com,zlib,none\";",
          "171:  } else {",
          "172:   myproposal[PROPOSAL_COMP_ALGS_CTOS] =",
          "173:   myproposal[PROPOSAL_COMP_ALGS_STOC] = \"none,zlib@openssh.com,zlib\";",
          "174:  }",
          "",
          "[Added Lines]",
          "168:  myproposal[PROPOSAL_COMP_ALGS_CTOS] =",
          "169:      myproposal[PROPOSAL_COMP_ALGS_STOC] = options.compression ?",
          "170:      \"zlib@openssh.com,zlib,none\" : \"none,zlib@openssh.com,zlib\";",
          "",
          "---------------"
        ],
        "usr.bin/ssh/sshd.c||usr.bin/ssh/sshd.c": [
          "File: usr.bin/ssh/sshd.c -> usr.bin/ssh/sshd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2438:  if (options.compression == COMP_NONE) {",
          "2439:   myproposal[PROPOSAL_COMP_ALGS_CTOS] =",
          "2441:  } else if (options.compression == COMP_DELAYED) {",
          "2442:   myproposal[PROPOSAL_COMP_ALGS_CTOS] =",
          "2444:  }",
          "2446:  if (options.rekey_limit || options.rekey_interval)",
          "",
          "[Removed Lines]",
          "2440:   myproposal[PROPOSAL_COMP_ALGS_STOC] = \"none\";",
          "2443:   myproposal[PROPOSAL_COMP_ALGS_STOC] = \"none,zlib@openssh.com\";",
          "",
          "[Added Lines]",
          "2440:       myproposal[PROPOSAL_COMP_ALGS_STOC] = \"none\";",
          "2443:       myproposal[PROPOSAL_COMP_ALGS_STOC] =",
          "2444:       \"none,zlib@openssh.com\";",
          "",
          "---------------"
        ]
      }
    }
  ]
}