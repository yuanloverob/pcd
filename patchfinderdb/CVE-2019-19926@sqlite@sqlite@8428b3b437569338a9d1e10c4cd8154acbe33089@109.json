{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "71fddaf195df9848b95a96e20bc5401b8e267858",
      "candidate_info": {
        "commit_hash": "71fddaf195df9848b95a96e20bc5401b8e267858",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/71fddaf195df9848b95a96e20bc5401b8e267858",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window8.tcl",
          "test/window8.test"
        ],
        "message": "Fix problems with \"RANGE ... ORDER BY <expr> DESC\" window frames.\n\nFossilOrigin-Name: e7bced731aa071c95bc398cdecd53c939841bf0c52fbcd06e47ba68f8c5cc35a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window8.tcl||test/window8.tcl",
          "test/window8.test||test/window8.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ffc32b246d92d53c66094afe11950b53ffab6a1c230c602eebbfedafb2eb57f4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1559:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1560:   int reg1 = sqlite3GetTempReg(pParse);",
          "1561:   int reg2 = sqlite3GetTempReg(pParse);",
          "1562:   windowReadPeerValues(p, csr1, reg1);",
          "1563:   windowReadPeerValues(p, csr2, reg2);",
          "1565:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1);",
          "1566:   sqlite3VdbeAddOp2(v, OP_Rowid, csr1, reg1);",
          "1567:   sqlite3VdbeAddOp2(v, OP_Rowid, csr2, reg2);",
          "1568:   sqlite3VdbeAddOp3(v, OP_Gt, reg2, lbl, reg1);",
          "1569:   sqlite3ReleaseTempReg(pParse, reg1);",
          "1570:   sqlite3ReleaseTempReg(pParse, reg2);",
          "1573: }",
          "1575: static int windowCodeOp(",
          "",
          "[Removed Lines]",
          "1564:   sqlite3VdbeAddOp3(v, OP_Add, reg1, regVal, reg1);",
          "1572:   assert( op==OP_Ge || op==OP_Gt || op==OP_Lt || op==OP_Le );",
          "",
          "[Added Lines]",
          "1562:   int arith = OP_Add;",
          "1564:   assert( op==OP_Ge || op==OP_Gt || op==OP_Le );",
          "1565:   assert( p->pMWin->pOrderBy && p->pMWin->pOrderBy->nExpr==1 );",
          "1566:   if( p->pMWin->pOrderBy->a[0].sortOrder ){",
          "1567:     switch( op ){",
          "1568:       case OP_Ge: op = OP_Le; break;",
          "1569:       case OP_Gt: op = OP_Lt; break;",
          "1570:       default: assert( op==OP_Le ); op = OP_Ge; break;",
          "1571:     }",
          "1572:     arith = OP_Subtract;",
          "1573:   }",
          "1577:   sqlite3VdbeAddOp3(v, arith, regVal, reg1, reg1);",
          "",
          "---------------"
        ],
        "test/window8.tcl||test/window8.tcl": [
          "File: test/window8.tcl -> test/window8.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   DROP TABLE IF EXISTS t1;",
          "96:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "97:   INSERT INTO t1 VALUES",
          "99: }",
          "101: foreach {tn frame} {",
          "102:   1 { ORDER BY a RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING }",
          "103:   2 { ORDER BY a RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING }",
          "104:   3 { ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING }",
          "105: } {",
          "106:   execsql_test 2.$tn \"SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ($frame)\"",
          "107: }",
          "",
          "[Removed Lines]",
          "98:       (13, 26), (15, 30);",
          "",
          "[Added Lines]",
          "98:       (5, 10), (10, 20), (13, 26), (13, 26),",
          "99:       (15, 30), (20, 40), (22,80), (30, 90);",
          "106:   4 { ORDER BY a DESC RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING }",
          "107:   5 { ORDER BY a DESC RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING }",
          "108:   6 { ORDER BY a DESC RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING }",
          "",
          "---------------"
        ],
        "test/window8.test||test/window8.test": [
          "File: test/window8.test -> test/window8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "439:   DROP TABLE IF EXISTS t1;",
          "440:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "441:   INSERT INTO t1 VALUES",
          "443: } {}",
          "445: do_execsql_test 2.1 {",
          "446:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING )",
          "449: do_execsql_test 2.2 {",
          "450:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING )",
          "453: do_execsql_test 2.3 {",
          "454:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING )",
          "457: finish_test",
          "",
          "[Removed Lines]",
          "442:       (13, 26), (15, 30);",
          "447: } {13 56   15 56}",
          "451: } {13 {}   15 {}}",
          "455: } {13 30   15 {}}",
          "",
          "[Added Lines]",
          "442:       (5, 10), (10, 20), (13, 26), (13, 26),",
          "443:       (15, 30), (20, 40), (22,80), (30, 90);",
          "448: } {5 30   10 112   13 102   13 102   15 142   20 150   22 120   30 90}",
          "452: } {5 {}   10 10   13 10   13 10   15 30   20 102   22 82   30 120}",
          "456: } {5 {}   10 52   13 30   13 30   15 {}   20 80   22 {}   30 {}}",
          "458: do_execsql_test 2.4 {",
          "459:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING )",
          "460: } {30 90   22 120   20 150   15 142   13 102   13 102   10 112   5 30}",
          "462: do_execsql_test 2.5 {",
          "463:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING )",
          "464: } {30 {}   22 90   20 90   15 120   13 120   13 120   10 70   5 102}",
          "466: do_execsql_test 2.6 {",
          "467:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING )",
          "468: } {30 {}   22 40   20 {}   15 52   13 20   13 20   10 {}   5 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "efb02281a4266251292590b5e77ad56be22d1af9",
      "candidate_info": {
        "commit_hash": "efb02281a4266251292590b5e77ad56be22d1af9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/efb02281a4266251292590b5e77ad56be22d1af9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/build.c",
          "src/expr.c"
        ],
        "message": "Change sqlite3SelectDup() to always return NULL if an OOM has occurred.\n\nFossilOrigin-Name: 01ba4641ab436c6065c8725908fc0913f2abded4ea62e004b7534e0116b9451a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1ca5ef84506aac3e2f08baa36095b3befdeedf2a3443fcd9154a277b55cbf64b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1416:   int i;",
          "1417:   RenameCtx *p = pWalker->u.pRename;",
          "1418:   SrcList *pSrc = pSelect->pSrc;",
          "1421:     return WRC_Abort;",
          "1422:   }",
          "1423:   for(i=0; i<pSrc->nSrc; i++){",
          "",
          "[Removed Lines]",
          "1419:   if( pSrc==0 ){",
          "1420:     assert( pWalker->pParse->db->mallocFailed );",
          "",
          "[Added Lines]",
          "1419:   if( NEVER(pSrc==0) ){",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4143: void sqlite3SrcListAssignCursors(Parse *pParse, SrcList *pList){",
          "4144:   int i;",
          "4145:   struct SrcList_item *pItem;",
          "4148:     for(i=0, pItem=pList->a; i<pList->nSrc; i++, pItem++){",
          "4149:       if( pItem->iCursor>=0 ) break;",
          "4150:       pItem->iCursor = pParse->nTab++;",
          "",
          "[Removed Lines]",
          "4146:   assert(pList || pParse->db->mallocFailed );",
          "4147:   if( pList ){",
          "",
          "[Added Lines]",
          "4146:   if( ALWAYS(pList) ){",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1530:     pNext = pNew;",
          "1531:   }",
          "1533:   return pRet;",
          "1534: }",
          "1535: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1533:   if( db->mallocFailed ){",
          "1534:     sqlite3SelectDelete(db, pRet);",
          "1535:     pRet = 0;",
          "1536:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b47f5208247277ee6eaf532e547d4995f56114b",
      "candidate_info": {
        "commit_hash": "8b47f5208247277ee6eaf532e547d4995f56114b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8b47f5208247277ee6eaf532e547d4995f56114b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window8.tcl",
          "test/window8.test"
        ],
        "message": "Fix a bug in RANGE window functions that use \"ORDER BY <expr> DESC NULLS FIRST\" as the window-frame ORDER BY clause.\n\nFossilOrigin-Name: 39b4cad4a51bb5116d62ffb16ac36d96a9280321b049eb2d008605392f52a459",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window8.tcl||test/window8.tcl",
          "test/window8.test||test/window8.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dd66134817ecbda01c59a05ad0d6ac44bee700ab10cd2119c869dd69af293fe2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1865: static void windowCodeRangeTest(",
          "1866:   WindowCodeArg *p,",
          "1872: ){",
          "1873:   Parse *pParse = p->pParse;",
          "1874:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1883:   assert( op==OP_Ge || op==OP_Gt || op==OP_Le );",
          "1884:   assert( pOrderBy && pOrderBy->nExpr==1 );",
          "",
          "[Removed Lines]",
          "1868:   int csr1,",
          "1869:   int regVal,",
          "1870:   int csr2,",
          "1871:   int lbl",
          "1875:   int reg1 = sqlite3GetTempReg(pParse);",
          "1876:   int reg2 = sqlite3GetTempReg(pParse);",
          "1877:   int arith = OP_Add;",
          "1878:   int addrGe;",
          "1879:   ExprList *pOrderBy = p->pMWin->pOrderBy;",
          "1881:   int regString = ++pParse->nMem;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1891:     arith = OP_Subtract;",
          "1892:   }",
          "1894:   windowReadPeerValues(p, csr1, reg1);",
          "1895:   windowReadPeerValues(p, csr2, reg2);",
          "1900:   sqlite3VdbeAddOp4(v, OP_String8, 0, regString, 0, \"\", P4_STATIC);",
          "1901:   addrGe = sqlite3VdbeAddOp3(v, OP_Ge, regString, 0, reg1);",
          "1902:   VdbeCoverage(v);",
          "1903:   sqlite3VdbeAddOp3(v, arith, regVal, reg1, reg1);",
          "1904:   sqlite3VdbeJumpHere(v, addrGe);",
          "1905:   if( pOrderBy->a[0].sortFlags & KEYINFO_ORDER_BIGNULL ){",
          "1908:     switch( op ){",
          "1910:       case OP_Gt:",
          "1911:         sqlite3VdbeAddOp2(v, OP_NotNull, reg2, lbl); VdbeCoverage(v);",
          "1912:         break;",
          "1915:         sqlite3VdbeAddOp2(v, OP_IsNull, reg2, lbl); VdbeCoverage(v);",
          "1916:         break;",
          "1917:     }",
          "1919:     sqlite3VdbeJumpHere(v, addr);",
          "1920:     sqlite3VdbeAddOp2(v, OP_IsNull, reg2, lbl); VdbeCoverage(v);",
          "1921:     if( op==OP_Gt || op==OP_Ge ){",
          "1922:       sqlite3VdbeChangeP2(v, -1, sqlite3VdbeCurrentAddr(v)+1);",
          "1923:     }",
          "1924:   }",
          "1925:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1); VdbeCoverage(v);",
          "1926:   sqlite3VdbeChangeP5(v, SQLITE_NULLEQ);",
          "1927:   assert( op==OP_Ge || op==OP_Gt || op==OP_Lt || op==OP_Le );",
          "1928:   testcase(op==OP_Ge); VdbeCoverageIf(v, op==OP_Ge);",
          "1929:   testcase(op==OP_Lt); VdbeCoverageIf(v, op==OP_Lt);",
          "1930:   testcase(op==OP_Le); VdbeCoverageIf(v, op==OP_Le);",
          "1931:   testcase(op==OP_Gt); VdbeCoverageIf(v, op==OP_Gt);",
          "1933:   sqlite3ReleaseTempReg(pParse, reg1);",
          "1934:   sqlite3ReleaseTempReg(pParse, reg2);",
          "1935: }",
          "",
          "[Removed Lines]",
          "1906:     int addr;",
          "1907:     addr = sqlite3VdbeAddOp1(v, OP_NotNull, reg1); VdbeCoverage(v);",
          "1909:       case OP_Ge: sqlite3VdbeAddOp2(v, OP_Goto, 0, lbl); break;",
          "1913:       default:",
          "1914:         assert( op==OP_Le );",
          "1918:     sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+2);",
          "",
          "[Added Lines]",
          "1909:   VdbeModuleComment((v, \"CodeRangeTest: if( R%d %s R%d %s R%d ) goto lbl\",",
          "1910:       reg1, (arith==OP_Add ? \"+\" : \"-\"), regVal,",
          "1911:       ((op==OP_Ge) ? \">=\" : (op==OP_Le) ? \"<=\" : (op==OP_Gt) ? \">\" : \"<\"), reg2",
          "1912:   ));",
          "1954:     int addr = sqlite3VdbeAddOp1(v, OP_NotNull, reg1); VdbeCoverage(v);",
          "1956:       case OP_Ge:",
          "1957:         sqlite3VdbeAddOp2(v, OP_Goto, 0, lbl);",
          "1958:         break;",
          "1962:       default: assert( op==OP_Le );",
          "1966:     sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+3);",
          "1990:   VdbeModuleComment((v, \"CodeRangeTest: end\"));",
          "",
          "---------------"
        ],
        "test/window8.tcl||test/window8.tcl": [
          "File: test/window8.tcl -> test/window8.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "247:   ) FROM t1 ORDER BY 1 NULLS LAST;",
          "248: }",
          "250: ==========",
          "252: execsql_test 5.0 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250: execsql_test 4.5.1 {",
          "251:   SELECT sum(b) OVER (",
          "252:     ORDER BY a ASC  NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING",
          "253:   ) FROM t1 ORDER BY 1 NULLS LAST;",
          "254: }",
          "255: execsql_test 4.5.2 {",
          "256:   SELECT sum(b) OVER (",
          "257:     ORDER BY a DESC NULLS FIRST RANGE",
          "258:     BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING",
          "259:   ) FROM t1 ORDER BY 1 NULLS LAST;",
          "260: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329:   FROM t2",
          "330: }",
          "334: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344: ==========",
          "",
          "---------------"
        ],
        "test/window8.test||test/window8.test": [
          "File: test/window8.test -> test/window8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "3579:   ) FROM t1 ORDER BY 1 NULLS LAST;",
          "3580: } {5   6   8   9   10}",
          "3582: #==========================================================================",
          "3584: do_execsql_test 5.0 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3582: do_execsql_test 4.5.1 {",
          "3583:   SELECT sum(b) OVER (",
          "3584:     ORDER BY a ASC  NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING",
          "3585:   ) FROM t1 ORDER BY 1 NULLS LAST;",
          "3586: } {9   9   15   15   15}",
          "3588: do_execsql_test 4.5.2 {",
          "3589:   SELECT sum(b) OVER (",
          "3590:     ORDER BY a DESC NULLS FIRST RANGE",
          "3591:     BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING",
          "3592:   ) FROM t1 ORDER BY 1 NULLS LAST;",
          "3593: } {6   6   6   15   15}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6190:   FROM t2",
          "6191: } {{}   A.B   A.B}",
          "6193: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6206: #==========================================================================",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6299681c63e5ea8b61892f4e5dffaac25031723",
      "candidate_info": {
        "commit_hash": "b6299681c63e5ea8b61892f4e5dffaac25031723",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b6299681c63e5ea8b61892f4e5dffaac25031723",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/window4.tcl",
          "test/window4.test"
        ],
        "message": "Add extra test cases related to the previous commit.\n\nFossilOrigin-Name: 3c690b2b05b7338f3325c50a0750c6023e1173afa4388e836ecb2cc49f19a0ac",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/window4.tcl||test/window4.tcl",
          "test/window4.test||test/window4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 712e47714863a8ed7ff73324d9fec569633e8b901c436c633b0220d16a7a9302",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/window4.tcl||test/window4.tcl": [
          "File: test/window4.tcl -> test/window4.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "385:   ) sub;",
          "386: }",
          "389: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "388: execsql_test 12.0 {",
          "389:   DROP TABLE IF EXISTS t2;",
          "390:   CREATE TABLE t2(a INTEGER);",
          "391:   INSERT INTO t2 VALUES(1), (2), (3);",
          "392: }",
          "394: execsql_test 12.1 {",
          "395:   SELECT (SELECT min(a) OVER ()) FROM t2",
          "396: }",
          "398: execsql_float_test 12.2 {",
          "399:   SELECT (SELECT avg(a)) FROM t2 ORDER BY 1",
          "400: }",
          "402: execsql_float_test 12.3 {",
          "403:   SELECT",
          "404:     (SELECT avg(a) UNION SELECT min(a) OVER ())",
          "405:   FROM t2 GROUP BY a",
          "406:   ORDER BY 1",
          "407: }",
          "",
          "---------------"
        ],
        "test/window4.test||test/window4.test": [
          "File: test/window4.test -> test/window4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1324:   ) sub;",
          "1325: } {0   1   2}",
          "1327: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1327: do_execsql_test 12.0 {",
          "1328:   DROP TABLE IF EXISTS t2;",
          "1329:   CREATE TABLE t2(a INTEGER);",
          "1330:   INSERT INTO t2 VALUES(1), (2), (3);",
          "1331: } {}",
          "1333: do_execsql_test 12.1 {",
          "1334:   SELECT (SELECT min(a) OVER ()) FROM t2",
          "1335: } {1   2   3}",
          "1338: do_test 12.2 {",
          "1339:   set myres {}",
          "1340:   foreach r [db eval {SELECT (SELECT avg(a)) FROM t2 ORDER BY 1}] {",
          "1341:     lappend myres [format %.4f [set r]]",
          "1342:   }",
          "1343:   set res2 {2.0000}",
          "1344:   set i 0",
          "1345:   foreach r [set myres] r2 [set res2] {",
          "1346:     if {[set r]<([set r2]-0.0001) || [set r]>([set r2]+0.0001)} {",
          "1347:       error \"list element [set i] does not match: got=[set r] expected=[set r2]\"",
          "1348:     }",
          "1349:     incr i",
          "1350:   }",
          "1351:   set {} {}",
          "1352: } {}",
          "1355: do_test 12.3 {",
          "1356:   set myres {}",
          "1357:   foreach r [db eval {SELECT",
          "1358:     (SELECT avg(a) UNION SELECT min(a) OVER ())",
          "1359:   FROM t2 GROUP BY a",
          "1360:   ORDER BY 1}] {",
          "1361:     lappend myres [format %.4f [set r]]",
          "1362:   }",
          "1363:   set res2 {1.0000 2.0000 3.0000}",
          "1364:   set i 0",
          "1365:   foreach r [set myres] r2 [set res2] {",
          "1366:     if {[set r]<([set r2]-0.0001) || [set r]>([set r2]+0.0001)} {",
          "1367:       error \"list element [set i] does not match: got=[set r] expected=[set r2]\"",
          "1368:     }",
          "1369:     incr i",
          "1370:   }",
          "1371:   set {} {}",
          "1372: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e72bdb5fe78558392bab7c53604b91a20755129",
      "candidate_info": {
        "commit_hash": "3e72bdb5fe78558392bab7c53604b91a20755129",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3e72bdb5fe78558392bab7c53604b91a20755129",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid",
          "test/fts4aa.test"
        ],
        "message": "Detect and prevent infinite recursion in fts3SelectLeaf() due to a malformed FTS3 btree.\n\nFossilOrigin-Name: dfcf081d842629a0b177be7eb2eb8ce719324068991040a581e33ea1d5db3d27",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid",
          "test/fts4aa.test||test/fts4aa.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2023:       rc = sqlite3Fts3ReadBlock(p, piLeaf?*piLeaf:*piLeaf2, &zBlob, &nBlob, 0);",
          "2024:     }",
          "2025:     if( rc==SQLITE_OK ){",
          "2027:     }",
          "2028:     sqlite3_free(zBlob);",
          "2029:   }",
          "",
          "[Removed Lines]",
          "2026:       rc = fts3SelectLeaf(p, zTerm, nTerm, zBlob, nBlob, piLeaf, piLeaf2);",
          "",
          "[Added Lines]",
          "2026:       int iNewHeight = 0;",
          "2027:       fts3GetVarint32(zBlob, &iNewHeight);",
          "2028:       if( iNewHeight<=iHeight ){",
          "2029:         rc = FTS_CORRUPT_VTAB;",
          "2030:       }else{",
          "2031:         rc = fts3SelectLeaf(p, zTerm, nTerm, zBlob, nBlob, piLeaf, piLeaf2);",
          "2032:       }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 10f8a3b718e0f47be528fba086c318e1dfe18ead383d01cfa24dedabad41e0a2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts4aa.test||test/fts4aa.test": [
          "File: test/fts4aa.test -> test/fts4aa.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:   SELECT quote(matchinfo(f,'pnax')) from f where f match '0 1';",
          "238: } {X'0200000000000000000000000E0000000E00000001000000010000000100000001000000'}",
          "241: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240: # 2019-11-18 Detect infinite loop in fts3SelectLeaf()",
          "241: db close",
          "242: sqlite3 db :memory:",
          "243: do_catchsql_test fts4aa-7.10 {",
          "244:   CREATE VIRTUAL TABLE f USING fts4();",
          "245:   INSERT INTO f_segdir VALUES (63,60,60,60,'60 60',x'3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c483c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c20003c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c283c3c3c3c3c3c3c3c3c3c3c223c3c3c3c3c3c3c3c3c');",
          "246:   INSERT INTO f_segments VALUES (60,x'3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c5a3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c2a3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c5e3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c803c3c3c3c3c3c233c3c3c3c1c3c3c3c3c3c3c3c3c3c3c3c1b3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c273c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c1a3c3c3c3c3c3c000200003c3c3c3c3c3c3c3c3c3c3c3c3c383c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d898d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d3c3c3c3c3c3c3c3c3c3cba3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c1c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c00023c3c3c3c3c3c383c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3cbc3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c2c3c3c3c403c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c16161616161616163c3c3c3c3c3c3c3c3c3c3c3c3c583c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c2b3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c1c013c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c20003c3c3c3c3c3c3c3c3c3c3c800000003c3c3c3c3c3c3c2c3c3c3c3c3c3c353c08080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808fc3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c323c3c3c3c3c3c3c3c3c3c3c4f3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3cfcfcfcfcfcfcfcfcfcfcfc10fcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfd02fcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfc03e8fcfcfcfc3c3c3c3c3c3c8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c553c3c3c3c3c3c3c3c3c3c3c3c3c573c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c000000803c3c4dd5d5a6d52cf3d5d5d5d5d5d5d5d5d5d5d5d5d5d53c3c3c3c3f3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c2d3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c013c3c3c3c00643c3c3c3ce93c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c263c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c363c3c3c3c3c3c3c3c3c3c3c3c3c3c543c3c3c3c3c3c3c3c3c3c273c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c330000003c3c3c3c3c3c3c3c3c3c3c3c3c3c4d3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c000010003c3c3c3c3c3c413c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c1c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c403c3c3c3c3c3c3c3c3c3c3c3cec0000fa3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c2d3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c4c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c5e3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c1b3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c593c3c3c3c3c3c243c3c373c3c3c3c3cff3c3c3c3c3c3c3c3c3c3c3c3c3c000080003c3c3c3c3c3c3c3c3c3c353c3c3c3c3c3d3c3c3c3c3c3c3c3c3c3c3c3c4d3c3c3c3c3c3c3c3c3c3c3c3c3c40003c3c3c3c3c293c3c3c3c3c3c3c3c3c3d3c3c3c3c3c3c3c3c353c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c4f3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3f3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3cff7f3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c2d3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3ca43c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3cbf3c3c3c3c3c3c3c3c3c008000003c3c3c3c3c3c3c3c343c3c373c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c593c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c');",
          "247:   SELECT * from f where f match '0';",
          "248: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}