{
  "cve_id": "CVE-2015-0287",
  "cve_desc": "The ASN1_item_ex_d2i function in crypto/asn1/tasn_dec.c in OpenSSL before 0.9.8zf, 1.0.0 before 1.0.0r, 1.0.1 before 1.0.1m, and 1.0.2 before 1.0.2a does not reinitialize CHOICE and ADB data structures, which might allow attackers to cause a denial of service (invalid write operation and memory corruption) by leveraging an application that relies on ASN.1 structure reuse.",
  "repo": "openssl/openssl",
  "patch_hash": "8106d61c354430d6bbbd7f8e7840a39efc0f5829",
  "patch_info": {
    "commit_hash": "8106d61c354430d6bbbd7f8e7840a39efc0f5829",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/8106d61c354430d6bbbd7f8e7840a39efc0f5829",
    "files": [
      "crypto/asn1/tasn_dec.c"
    ],
    "message": "Free up ADB and CHOICE if already initialised.\n\nCVE-2015-0287\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
    "before_after_code_files": [
      "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c"
    ]
  },
  "patch_diff": {
    "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c": [
      "File: crypto/asn1/tasn_dec.c -> crypto/asn1/tasn_dec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "303:     case ASN1_ITYPE_CHOICE:",
      "304:         if (asn1_cb && !asn1_cb(ASN1_OP_D2I_PRE, pval, it, NULL))",
      "305:             goto auxerr;",
      "309:             ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ERR_R_NESTED_ASN1_ERROR);",
      "310:             goto err;",
      "311:         }",
      "",
      "[Removed Lines]",
      "308:         if (!*pval && !ASN1_item_ex_new(pval, it)) {",
      "",
      "[Added Lines]",
      "306:         if (*pval) {",
      "308:             i = asn1_get_choice_selector(pval, it);",
      "309:             if ((i >= 0) && (i < it->tcount)) {",
      "310:                 tt = it->templates + i;",
      "311:                 pchptr = asn1_get_field_ptr(pval, tt);",
      "312:                 ASN1_template_free(pchptr, tt);",
      "313:                 asn1_set_choice_selector(pval, -1, it);",
      "314:             }",
      "315:         } else if (!ASN1_item_ex_new(pval, it)) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "385:         if (asn1_cb && !asn1_cb(ASN1_OP_D2I_PRE, pval, it, NULL))",
      "386:             goto auxerr;",
      "389:         for (i = 0, tt = it->templates; i < it->tcount; i++, tt++) {",
      "390:             const ASN1_TEMPLATE *seqtt;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "396:         for (i = 0, tt = it->templates; i < it->tcount; i++, tt++) {",
      "397:             if (tt->flags & ASN1_TFLG_ADB_MASK) {",
      "398:                 const ASN1_TEMPLATE *seqtt;",
      "399:                 ASN1_VALUE **pseqval;",
      "400:                 seqtt = asn1_do_adb(pval, tt, 1);",
      "401:                 pseqval = asn1_get_field_ptr(pval, seqtt);",
      "402:                 ASN1_template_free(pseqval, seqtt);",
      "403:             }",
      "404:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c315a547e62fc8f1bdc3e9d57138871117dca6f7",
      "candidate_info": {
        "commit_hash": "c315a547e62fc8f1bdc3e9d57138871117dca6f7",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c315a547e62fc8f1bdc3e9d57138871117dca6f7",
        "files": [
          "crypto/asn1/a_bitstr.c",
          "crypto/asn1/a_int.c",
          "crypto/asn1/a_object.c",
          "crypto/asn1/a_type.c",
          "crypto/asn1/asn1.h",
          "crypto/asn1/asn1_locl.h",
          "crypto/asn1/asn1t.h",
          "crypto/asn1/tasn_dec.c",
          "crypto/asn1/tasn_enc.c",
          "crypto/asn1/tasn_fre.c",
          "crypto/asn1/tasn_new.c"
        ],
        "message": "Move more internal only functions to asn1_locl.h\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "crypto/asn1/a_bitstr.c||crypto/asn1/a_bitstr.c",
          "crypto/asn1/a_int.c||crypto/asn1/a_int.c",
          "crypto/asn1/a_object.c||crypto/asn1/a_object.c",
          "crypto/asn1/a_type.c||crypto/asn1/a_type.c",
          "crypto/asn1/asn1.h||crypto/asn1/asn1.h",
          "crypto/asn1/asn1_locl.h||crypto/asn1/asn1_locl.h",
          "crypto/asn1/asn1t.h||crypto/asn1/asn1t.h",
          "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c",
          "crypto/asn1/tasn_enc.c||crypto/asn1/tasn_enc.c",
          "crypto/asn1/tasn_fre.c||crypto/asn1/tasn_fre.c",
          "crypto/asn1/tasn_new.c||crypto/asn1/tasn_new.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c"
          ],
          "candidate": [
            "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/a_bitstr.c||crypto/asn1/a_bitstr.c": [
          "File: crypto/asn1/a_bitstr.c -> crypto/asn1/a_bitstr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: #include <stdio.h>",
          "60: #include \"cryptlib.h\"",
          "61: #include <openssl/asn1.h>",
          "63: int ASN1_BIT_STRING_set(ASN1_BIT_STRING *x, unsigned char *d, int len)",
          "64: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: #include \"asn1_locl.h\"",
          "",
          "---------------"
        ],
        "crypto/asn1/a_int.c||crypto/asn1/a_int.c": [
          "File: crypto/asn1/a_int.c -> crypto/asn1/a_int.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: #include \"cryptlib.h\"",
          "61: #include <openssl/asn1.h>",
          "62: #include <openssl/bn.h>",
          "64: ASN1_INTEGER *ASN1_INTEGER_dup(const ASN1_INTEGER *x)",
          "65: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: #include \"asn1_locl.h\"",
          "",
          "---------------"
        ],
        "crypto/asn1/a_object.c||crypto/asn1/a_object.c": [
          "File: crypto/asn1/a_object.c -> crypto/asn1/a_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: #include <openssl/objects.h>",
          "65: #include <openssl/bn.h>",
          "66: #include \"internal/asn1_int.h\"",
          "68: int i2d_ASN1_OBJECT(ASN1_OBJECT *a, unsigned char **pp)",
          "69: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: #include \"asn1_locl.h\"",
          "",
          "---------------"
        ],
        "crypto/asn1/a_type.c||crypto/asn1/a_type.c": [
          "File: crypto/asn1/a_type.c -> crypto/asn1/a_type.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: #include \"cryptlib.h\"",
          "61: #include <openssl/asn1t.h>",
          "62: #include <openssl/objects.h>",
          "64: int ASN1_TYPE_get(ASN1_TYPE *a)",
          "65: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: #include \"asn1_locl.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73: {",
          "74:     if (a->value.ptr != NULL) {",
          "75:         ASN1_TYPE **tmp_a = &a;",
          "77:     }",
          "78:     a->type = type;",
          "79:     if (type == V_ASN1_BOOLEAN)",
          "",
          "[Removed Lines]",
          "76:         ASN1_primitive_free((ASN1_VALUE **)tmp_a, NULL);",
          "",
          "[Added Lines]",
          "77:         asn1_primitive_free((ASN1_VALUE **)tmp_a, NULL);",
          "",
          "---------------"
        ],
        "crypto/asn1/asn1.h||crypto/asn1/asn1.h": [
          "File: crypto/asn1/asn1.h -> crypto/asn1/asn1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "595: ASN1_OBJECT *ASN1_OBJECT_new(void);",
          "596: void ASN1_OBJECT_free(ASN1_OBJECT *a);",
          "597: int i2d_ASN1_OBJECT(ASN1_OBJECT *a, unsigned char **pp);",
          "600: ASN1_OBJECT *d2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,",
          "601:                              long length);",
          "",
          "[Removed Lines]",
          "598: ASN1_OBJECT *c2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,",
          "599:                              long length);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "623: unsigned char *ASN1_STRING_data(ASN1_STRING *x);",
          "625: DECLARE_ASN1_FUNCTIONS(ASN1_BIT_STRING)",
          "629: int ASN1_BIT_STRING_set(ASN1_BIT_STRING *a, unsigned char *d, int length);",
          "630: int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value);",
          "631: int ASN1_BIT_STRING_get_bit(const ASN1_BIT_STRING *a, int n);",
          "",
          "[Removed Lines]",
          "626: int i2c_ASN1_BIT_STRING(ASN1_BIT_STRING *a, unsigned char **pp);",
          "627: ASN1_BIT_STRING *c2i_ASN1_BIT_STRING(ASN1_BIT_STRING **a,",
          "628:                                      const unsigned char **pp, long length);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "639:                             BIT_STRING_BITNAME *tbl);",
          "641: DECLARE_ASN1_FUNCTIONS(ASN1_INTEGER)",
          "645: ASN1_INTEGER *d2i_ASN1_UINTEGER(ASN1_INTEGER **a, const unsigned char **pp,",
          "646:                                 long length);",
          "647: ASN1_INTEGER *ASN1_INTEGER_dup(const ASN1_INTEGER *x);",
          "",
          "[Removed Lines]",
          "642: int i2c_ASN1_INTEGER(ASN1_INTEGER *a, unsigned char **pp);",
          "643: ASN1_INTEGER *c2i_ASN1_INTEGER(ASN1_INTEGER **a, const unsigned char **pp,",
          "644:                                long length);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/asn1/asn1_locl.h||crypto/asn1/asn1_locl.h": [
          "File: crypto/asn1/asn1_locl.h -> crypto/asn1/asn1_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:                      const ASN1_ITEM *it);",
          "128: int asn1_enc_save(ASN1_VALUE **pval, const unsigned char *in, int inlen,",
          "129:                   const ASN1_ITEM *it);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: void asn1_primitive_free(ASN1_VALUE **pval, const ASN1_ITEM *it);",
          "132: void asn1_template_free(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt);",
          "134: ASN1_OBJECT *c2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,",
          "135:                              long length);",
          "136: int i2c_ASN1_BIT_STRING(ASN1_BIT_STRING *a, unsigned char **pp);",
          "137: ASN1_BIT_STRING *c2i_ASN1_BIT_STRING(ASN1_BIT_STRING **a,",
          "138:                                      const unsigned char **pp, long length);",
          "139: int i2c_ASN1_INTEGER(ASN1_INTEGER *a, unsigned char **pp);",
          "140: ASN1_INTEGER *c2i_ASN1_INTEGER(ASN1_INTEGER **a, const unsigned char **pp,",
          "141:                                long length);",
          "",
          "---------------"
        ],
        "crypto/asn1/asn1t.h||crypto/asn1/asn1t.h": [
          "File: crypto/asn1/asn1t.h -> crypto/asn1/asn1t.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "895: int ASN1_item_ex_new(ASN1_VALUE **pval, const ASN1_ITEM *it);",
          "896: void ASN1_item_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it);",
          "903: int ASN1_item_ex_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,",
          "904:                      const ASN1_ITEM *it, int tag, int aclass, char opt,",
          "905:                      ASN1_TLC *ctx);",
          "907: int ASN1_item_ex_i2d(ASN1_VALUE **pval, unsigned char **out,",
          "908:                      const ASN1_ITEM *it, int tag, int aclass);",
          "913: #ifdef  __cplusplus",
          "914: }",
          "",
          "[Removed Lines]",
          "897: int ASN1_template_new(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt);",
          "898: int ASN1_primitive_new(ASN1_VALUE **pval, const ASN1_ITEM *it);",
          "900: void ASN1_template_free(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt);",
          "901: int ASN1_template_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,",
          "902:                       const ASN1_TEMPLATE *tt);",
          "909: int ASN1_template_i2d(ASN1_VALUE **pval, unsigned char **out,",
          "910:                       const ASN1_TEMPLATE *tt);",
          "911: void ASN1_primitive_free(ASN1_VALUE **pval, const ASN1_ITEM *it);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c": [
          "File: crypto/asn1/tasn_dec.c -> crypto/asn1/tasn_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:     return NULL;",
          "150: }",
          "",
          "[Removed Lines]",
          "152: int ASN1_template_d2i(ASN1_VALUE **pval,",
          "153:                       const unsigned char **in, long len,",
          "154:                       const ASN1_TEMPLATE *tt)",
          "155: {",
          "156:     ASN1_TLC c;",
          "157:     asn1_tlc_clear_nc(&c);",
          "158:     return asn1_template_ex_d2i(pval, in, len, tt, 0, &c);",
          "159: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248:             if ((i >= 0) && (i < it->tcount)) {",
          "249:                 tt = it->templates + i;",
          "250:                 pchptr = asn1_get_field_ptr(pval, tt);",
          "252:                 asn1_set_choice_selector(pval, -1, it);",
          "253:             }",
          "254:         } else if (!ASN1_item_ex_new(pval, it)) {",
          "",
          "[Removed Lines]",
          "251:                 ASN1_template_free(pchptr, tt);",
          "",
          "[Added Lines]",
          "242:                 asn1_template_free(pchptr, tt);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "338:                 ASN1_VALUE **pseqval;",
          "339:                 seqtt = asn1_do_adb(pval, tt, 1);",
          "340:                 pseqval = asn1_get_field_ptr(pval, seqtt);",
          "342:             }",
          "343:         }",
          "",
          "[Removed Lines]",
          "341:                 ASN1_template_free(pseqval, seqtt);",
          "",
          "[Added Lines]",
          "332:                 asn1_template_free(pseqval, seqtt);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "390:                 continue;",
          "391:             }",
          "",
          "[Removed Lines]",
          "389:                 ASN1_template_free(pseqval, seqtt);",
          "",
          "[Added Lines]",
          "380:                 asn1_template_free(pseqval, seqtt);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "417:             if (seqtt->flags & ASN1_TFLG_OPTIONAL) {",
          "418:                 ASN1_VALUE **pseqval;",
          "419:                 pseqval = asn1_get_field_ptr(pval, seqtt);",
          "421:             } else {",
          "422:                 errtt = seqtt;",
          "423:                 ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ASN1_R_FIELD_MISSING);",
          "",
          "[Removed Lines]",
          "420:                 ASN1_template_free(pseqval, seqtt);",
          "",
          "[Added Lines]",
          "411:                 asn1_template_free(pseqval, seqtt);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "520:     return 1;",
          "522:  err:",
          "524:     return 0;",
          "525: }",
          "",
          "[Removed Lines]",
          "523:     ASN1_template_free(val, tt);",
          "",
          "[Added Lines]",
          "514:     asn1_template_free(val, tt);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "639:     return 1;",
          "641:  err:",
          "643:     return 0;",
          "644: }",
          "",
          "[Removed Lines]",
          "642:     ASN1_template_free(val, tt);",
          "",
          "[Added Lines]",
          "633:     asn1_template_free(val, tt);",
          "",
          "---------------"
        ],
        "crypto/asn1/tasn_enc.c||crypto/asn1/tasn_enc.c": [
          "File: crypto/asn1/tasn_enc.c -> crypto/asn1/tasn_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:     return 0;",
          "239: }",
          "247: static int asn1_template_ex_i2d(ASN1_VALUE **pval, unsigned char **out,",
          "248:                                 const ASN1_TEMPLATE *tt, int tag, int iclass)",
          "249: {",
          "",
          "[Removed Lines]",
          "241: int ASN1_template_i2d(ASN1_VALUE **pval, unsigned char **out,",
          "242:                       const ASN1_TEMPLATE *tt)",
          "243: {",
          "244:     return asn1_template_ex_i2d(pval, out, tt, -1, 0);",
          "245: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/asn1/tasn_fre.c||crypto/asn1/tasn_fre.c": [
          "File: crypto/asn1/tasn_fre.c -> crypto/asn1/tasn_fre.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     case ASN1_ITYPE_PRIMITIVE:",
          "102:         if (it->templates)",
          "104:         else",
          "106:         break;",
          "108:     case ASN1_ITYPE_MSTRING:",
          "110:         break;",
          "112:     case ASN1_ITYPE_CHOICE:",
          "",
          "[Removed Lines]",
          "103:             ASN1_template_free(pval, it->templates);",
          "105:             ASN1_primitive_free(pval, it);",
          "109:         ASN1_primitive_free(pval, it);",
          "",
          "[Added Lines]",
          "103:             asn1_template_free(pval, it->templates);",
          "105:             asn1_primitive_free(pval, it);",
          "109:         asn1_primitive_free(pval, it);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:             tt = it->templates + i;",
          "123:             pchval = asn1_get_field_ptr(pval, tt);",
          "125:         }",
          "126:         if (asn1_cb)",
          "127:             asn1_cb(ASN1_OP_FREE_POST, pval, it, NULL);",
          "",
          "[Removed Lines]",
          "124:             ASN1_template_free(pchval, tt);",
          "",
          "[Added Lines]",
          "124:             asn1_template_free(pchval, tt);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "159:             if (!seqtt)",
          "160:                 continue;",
          "161:             pseqval = asn1_get_field_ptr(pval, seqtt);",
          "163:         }",
          "164:         if (asn1_cb)",
          "165:             asn1_cb(ASN1_OP_FREE_POST, pval, it, NULL);",
          "",
          "[Removed Lines]",
          "162:             ASN1_template_free(pseqval, seqtt);",
          "",
          "[Added Lines]",
          "162:             asn1_template_free(pseqval, seqtt);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "171:     }",
          "172: }",
          "175: {",
          "176:     if (tt->flags & ASN1_TFLG_SK_MASK) {",
          "177:         STACK_OF(ASN1_VALUE) *sk = (STACK_OF(ASN1_VALUE) *)*pval;",
          "",
          "[Removed Lines]",
          "174: void ASN1_template_free(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt)",
          "",
          "[Added Lines]",
          "174: void asn1_template_free(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "190:     }",
          "191: }",
          "194: {",
          "195:     int utype;",
          "",
          "[Removed Lines]",
          "193: void ASN1_primitive_free(ASN1_VALUE **pval, const ASN1_ITEM *it)",
          "",
          "[Added Lines]",
          "193: void asn1_primitive_free(ASN1_VALUE **pval, const ASN1_ITEM *it)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "238:         break;",
          "240:     case V_ASN1_ANY:",
          "242:         OPENSSL_free(*pval);",
          "243:         break;",
          "",
          "[Removed Lines]",
          "241:         ASN1_primitive_free(pval, NULL);",
          "",
          "[Added Lines]",
          "241:         asn1_primitive_free(pval, NULL);",
          "",
          "---------------"
        ],
        "crypto/asn1/tasn_new.c||crypto/asn1/tasn_new.c": [
          "File: crypto/asn1/tasn_new.c -> crypto/asn1/tasn_new.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: static int asn1_item_ex_combine_new(ASN1_VALUE **pval, const ASN1_ITEM *it,",
          "69:                                     int combine);",
          "70: static void asn1_item_clear(ASN1_VALUE **pval, const ASN1_ITEM *it);",
          "71: static void asn1_template_clear(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt);",
          "72: static void asn1_primitive_clear(ASN1_VALUE **pval, const ASN1_ITEM *it);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: static int asn1_primitive_new(ASN1_VALUE **pval, const ASN1_ITEM *it);",
          "72: static int asn1_template_new(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:     case ASN1_ITYPE_PRIMITIVE:",
          "122:         if (it->templates) {",
          "124:                 goto memerr;",
          "126:             goto memerr;",
          "127:         break;",
          "129:     case ASN1_ITYPE_MSTRING:",
          "131:             goto memerr;",
          "132:         break;",
          "",
          "[Removed Lines]",
          "123:             if (!ASN1_template_new(pval, it->templates))",
          "125:         } else if (!ASN1_primitive_new(pval, it))",
          "130:         if (!ASN1_primitive_new(pval, it))",
          "",
          "[Added Lines]",
          "125:             if (!asn1_template_new(pval, it->templates))",
          "127:         } else if (!asn1_primitive_new(pval, it))",
          "132:         if (!asn1_primitive_new(pval, it))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "179:         }",
          "180:         for (i = 0, tt = it->templates; i < it->tcount; tt++, i++) {",
          "181:             pseqval = asn1_get_field_ptr(pval, tt);",
          "183:                 goto memerr;",
          "184:         }",
          "185:         if (asn1_cb && !asn1_cb(ASN1_OP_NEW_POST, pval, it, NULL))",
          "",
          "[Removed Lines]",
          "182:             if (!ASN1_template_new(pseqval, tt))",
          "",
          "[Added Lines]",
          "184:             if (!asn1_template_new(pseqval, tt))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "244:     }",
          "245: }",
          "248: {",
          "249:     const ASN1_ITEM *it = ASN1_ITEM_ptr(tt->item);",
          "250:     int ret;",
          "",
          "[Removed Lines]",
          "247: int ASN1_template_new(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt)",
          "",
          "[Added Lines]",
          "249: static int asn1_template_new(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "303: {",
          "304:     ASN1_TYPE *typ;",
          "305:     ASN1_STRING *str;",
          "",
          "[Removed Lines]",
          "302: int ASN1_primitive_new(ASN1_VALUE **pval, const ASN1_ITEM *it)",
          "",
          "[Added Lines]",
          "304: static int asn1_primitive_new(ASN1_VALUE **pval, const ASN1_ITEM *it)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b485d976340d3ca080060c3c7dee9102e2200762",
      "candidate_info": {
        "commit_hash": "b485d976340d3ca080060c3c7dee9102e2200762",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b485d976340d3ca080060c3c7dee9102e2200762",
        "files": [
          "crypto/asn1/tasn_dec.c"
        ],
        "message": "Free up ADB and CHOICE if already initialised.\n\nCVE-2015-0287\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c"
          ],
          "candidate": [
            "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c": [
          "File: crypto/asn1/tasn_dec.c -> crypto/asn1/tasn_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "304:     case ASN1_ITYPE_CHOICE:",
          "305:         if (asn1_cb && !asn1_cb(ASN1_OP_D2I_PRE, pval, it, NULL))",
          "306:             goto auxerr;",
          "310:             ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ERR_R_NESTED_ASN1_ERROR);",
          "311:             goto err;",
          "312:         }",
          "",
          "[Removed Lines]",
          "309:         if (!*pval && !ASN1_item_ex_new(pval, it)) {",
          "",
          "[Added Lines]",
          "307:         if (*pval) {",
          "309:             i = asn1_get_choice_selector(pval, it);",
          "310:             if ((i >= 0) && (i < it->tcount)) {",
          "311:                 tt = it->templates + i;",
          "312:                 pchptr = asn1_get_field_ptr(pval, tt);",
          "313:                 ASN1_template_free(pchptr, tt);",
          "314:                 asn1_set_choice_selector(pval, -1, it);",
          "315:             }",
          "316:         } else if (!ASN1_item_ex_new(pval, it)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "386:         if (asn1_cb && !asn1_cb(ASN1_OP_D2I_PRE, pval, it, NULL))",
          "387:             goto auxerr;",
          "390:         for (i = 0, tt = it->templates; i < it->tcount; i++, tt++) {",
          "391:             const ASN1_TEMPLATE *seqtt;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "397:         for (i = 0, tt = it->templates; i < it->tcount; i++, tt++) {",
          "398:             if (tt->flags & ASN1_TFLG_ADB_MASK) {",
          "399:                 const ASN1_TEMPLATE *seqtt;",
          "400:                 ASN1_VALUE **pseqval;",
          "401:                 seqtt = asn1_do_adb(pval, tt, 1);",
          "402:                 pseqval = asn1_get_field_ptr(pval, seqtt);",
          "403:                 ASN1_template_free(pseqval, seqtt);",
          "404:             }",
          "405:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "674341f1b0548e36a6cc49917334f5cbd09aaa2c",
      "candidate_info": {
        "commit_hash": "674341f1b0548e36a6cc49917334f5cbd09aaa2c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/674341f1b0548e36a6cc49917334f5cbd09aaa2c",
        "files": [
          "crypto/asn1/tasn_dec.c"
        ],
        "message": "Free up ADB and CHOICE if already initialised.\n\nCVE-2015-0287\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c"
          ],
          "candidate": [
            "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c": [
          "File: crypto/asn1/tasn_dec.c -> crypto/asn1/tasn_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:     case ASN1_ITYPE_CHOICE:",
          "303:         if (asn1_cb && !asn1_cb(ASN1_OP_D2I_PRE, pval, it))",
          "304:             goto auxerr;",
          "308:             ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ERR_R_NESTED_ASN1_ERROR);",
          "309:             goto err;",
          "310:         }",
          "",
          "[Removed Lines]",
          "307:         if (!*pval && !ASN1_item_ex_new(pval, it)) {",
          "",
          "[Added Lines]",
          "305:         if (*pval) {",
          "307:             i = asn1_get_choice_selector(pval, it);",
          "308:             if ((i >= 0) && (i < it->tcount)) {",
          "309:                 tt = it->templates + i;",
          "310:                 pchptr = asn1_get_field_ptr(pval, tt);",
          "311:                 ASN1_template_free(pchptr, tt);",
          "312:                 asn1_set_choice_selector(pval, -1, it);",
          "313:             }",
          "314:         } else if (!ASN1_item_ex_new(pval, it)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "384:         if (asn1_cb && !asn1_cb(ASN1_OP_D2I_PRE, pval, it))",
          "385:             goto auxerr;",
          "388:         for (i = 0, tt = it->templates; i < it->tcount; i++, tt++) {",
          "389:             const ASN1_TEMPLATE *seqtt;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "395:         for (i = 0, tt = it->templates; i < it->tcount; i++, tt++) {",
          "396:             if (tt->flags & ASN1_TFLG_ADB_MASK) {",
          "397:                 const ASN1_TEMPLATE *seqtt;",
          "398:                 ASN1_VALUE **pseqval;",
          "399:                 seqtt = asn1_do_adb(pval, tt, 1);",
          "400:                 pseqval = asn1_get_field_ptr(pval, seqtt);",
          "401:                 ASN1_template_free(pseqval, seqtt);",
          "402:             }",
          "403:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7746ff501c65968203f376e46bd1eeb93efb0f64",
      "candidate_info": {
        "commit_hash": "7746ff501c65968203f376e46bd1eeb93efb0f64",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/7746ff501c65968203f376e46bd1eeb93efb0f64",
        "files": [
          "crypto/asn1/tasn_dec.c"
        ],
        "message": "Free up ADB and CHOICE if already initialised.\n\nCVE-2015-0287\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c"
          ],
          "candidate": [
            "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c": [
          "File: crypto/asn1/tasn_dec.c -> crypto/asn1/tasn_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "304:     case ASN1_ITYPE_CHOICE:",
          "305:         if (asn1_cb && !asn1_cb(ASN1_OP_D2I_PRE, pval, it, NULL))",
          "306:             goto auxerr;",
          "310:             ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ERR_R_NESTED_ASN1_ERROR);",
          "311:             goto err;",
          "312:         }",
          "",
          "[Removed Lines]",
          "309:         if (!*pval && !ASN1_item_ex_new(pval, it)) {",
          "",
          "[Added Lines]",
          "307:         if (*pval) {",
          "309:             i = asn1_get_choice_selector(pval, it);",
          "310:             if ((i >= 0) && (i < it->tcount)) {",
          "311:                 tt = it->templates + i;",
          "312:                 pchptr = asn1_get_field_ptr(pval, tt);",
          "313:                 ASN1_template_free(pchptr, tt);",
          "314:                 asn1_set_choice_selector(pval, -1, it);",
          "315:             }",
          "316:         } else if (!ASN1_item_ex_new(pval, it)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "386:         if (asn1_cb && !asn1_cb(ASN1_OP_D2I_PRE, pval, it, NULL))",
          "387:             goto auxerr;",
          "390:         for (i = 0, tt = it->templates; i < it->tcount; i++, tt++) {",
          "391:             const ASN1_TEMPLATE *seqtt;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "397:         for (i = 0, tt = it->templates; i < it->tcount; i++, tt++) {",
          "398:             if (tt->flags & ASN1_TFLG_ADB_MASK) {",
          "399:                 const ASN1_TEMPLATE *seqtt;",
          "400:                 ASN1_VALUE **pseqval;",
          "401:                 seqtt = asn1_do_adb(pval, tt, 1);",
          "402:                 pseqval = asn1_get_field_ptr(pval, seqtt);",
          "403:                 ASN1_template_free(pseqval, seqtt);",
          "404:             }",
          "405:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b717b083073b6cacc0a5e2397b661678aff7ae7f",
      "candidate_info": {
        "commit_hash": "b717b083073b6cacc0a5e2397b661678aff7ae7f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b717b083073b6cacc0a5e2397b661678aff7ae7f",
        "files": [
          "crypto/asn1/tasn_dec.c"
        ],
        "message": "Free up ADB and CHOICE if already initialised.\n\nCVE-2015-0287\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c"
          ],
          "candidate": [
            "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c": [
          "File: crypto/asn1/tasn_dec.c -> crypto/asn1/tasn_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "304:     case ASN1_ITYPE_CHOICE:",
          "305:         if (asn1_cb && !asn1_cb(ASN1_OP_D2I_PRE, pval, it, NULL))",
          "306:             goto auxerr;",
          "310:             ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ERR_R_NESTED_ASN1_ERROR);",
          "311:             goto err;",
          "312:         }",
          "",
          "[Removed Lines]",
          "309:         if (!*pval && !ASN1_item_ex_new(pval, it)) {",
          "",
          "[Added Lines]",
          "307:         if (*pval) {",
          "309:             i = asn1_get_choice_selector(pval, it);",
          "310:             if ((i >= 0) && (i < it->tcount)) {",
          "311:                 tt = it->templates + i;",
          "312:                 pchptr = asn1_get_field_ptr(pval, tt);",
          "313:                 ASN1_template_free(pchptr, tt);",
          "314:                 asn1_set_choice_selector(pval, -1, it);",
          "315:             }",
          "316:         } else if (!ASN1_item_ex_new(pval, it)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "386:         if (asn1_cb && !asn1_cb(ASN1_OP_D2I_PRE, pval, it, NULL))",
          "387:             goto auxerr;",
          "390:         for (i = 0, tt = it->templates; i < it->tcount; i++, tt++) {",
          "391:             const ASN1_TEMPLATE *seqtt;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "397:         for (i = 0, tt = it->templates; i < it->tcount; i++, tt++) {",
          "398:             if (tt->flags & ASN1_TFLG_ADB_MASK) {",
          "399:                 const ASN1_TEMPLATE *seqtt;",
          "400:                 ASN1_VALUE **pseqval;",
          "401:                 seqtt = asn1_do_adb(pval, tt, 1);",
          "402:                 pseqval = asn1_get_field_ptr(pval, seqtt);",
          "403:                 ASN1_template_free(pseqval, seqtt);",
          "404:             }",
          "405:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}