{
  "cve_id": "CVE-2022-0128",
  "cve_desc": "vim is vulnerable to Out-of-bounds Read",
  "repo": "vim/vim",
  "patch_hash": "d3a117814d6acbf0dca3eff1a7626843b9b3734a",
  "patch_info": {
    "commit_hash": "d3a117814d6acbf0dca3eff1a7626843b9b3734a",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/d3a117814d6acbf0dca3eff1a7626843b9b3734a",
    "files": [
      "src/ex_docmd.c",
      "src/testdir/test_vim9_func.vim",
      "src/version.c",
      "src/vim9compile.c"
    ],
    "message": "patch 8.2.4009: reading one byte beyond the end of the line\n\nProblem:    Reading one byte beyond the end of the line.\nSolution:   Check for NUL byte first.",
    "before_after_code_files": [
      "src/ex_docmd.c||src/ex_docmd.c",
      "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
      "src/version.c||src/version.c",
      "src/vim9compile.c||src/vim9compile.c"
    ]
  },
  "patch_diff": {
    "src/ex_docmd.c||src/ex_docmd.c": [
      "File: src/ex_docmd.c -> src/ex_docmd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3632:  }",
      "3636:  {",
      "3637:      eap->cmdidx = *p == '+' ? CMD_increment : CMD_decrement;",
      "3638:      return eap->cmd + 2;",
      "",
      "[Removed Lines]",
      "3635:  if (p == eap->cmd && p[0] == p[1] && (*p == '+' || *p == '-'))",
      "",
      "[Added Lines]",
      "3635:  if (p == eap->cmd && p[0] != NUL && p[0] == p[1]",
      "3636:          && (*p == '+' || *p == '-'))",
      "",
      "---------------"
    ],
    "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim": [
      "File: src/testdir/test_vim9_func.vim -> src/testdir/test_vim9_func.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "3537:   unlet g:mydict",
      "3538: enddef",
      "3540: if has('python3')",
      "3541:   def Test_python3_heredoc()",
      "3542:     py3 << trim EOF",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3540: def Test_go_beyond_end_of_cmd()",
      "3541:   # this was reading the byte after the end of the line",
      "3542:   var lines =<< trim END",
      "3543:     def F()",
      "3544:       cal",
      "3545:     enddef",
      "3546:     defcompile",
      "3547:   END",
      "3548:   CheckScriptFailure(lines, 'E476:')",
      "3549: enddef",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "751: static int included_patches[] =",
      "754:     4008,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "754:     4009,",
      "",
      "---------------"
    ],
    "src/vim9compile.c||src/vim9compile.c": [
      "File: src/vim9compile.c -> src/vim9compile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2781:  cmd = ea.cmd;",
      "2782:  if ((*cmd != '$' || starts_with_colon)",
      "2783:   && (starts_with_colon || !(*cmd == '\\''",
      "2785:  {",
      "2786:      ea.cmd = skip_range(ea.cmd, TRUE, NULL);",
      "2787:      if (ea.cmd > cmd)",
      "",
      "[Removed Lines]",
      "2784:          || (cmd[0] == cmd[1] && (*cmd == '+' || *cmd == '-')))))",
      "",
      "[Added Lines]",
      "2784:          || (cmd[0] != NUL && cmd[0] == cmd[1]",
      "2785:          && (*cmd == '+' || *cmd == '-')))))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "31d9948e3a2529c2f619d56bdb48291dc261233d",
      "candidate_info": {
        "commit_hash": "31d9948e3a2529c2f619d56bdb48291dc261233d",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/31d9948e3a2529c2f619d56bdb48291dc261233d",
        "files": [
          "src/ex_docmd.c",
          "src/proto/ex_docmd.pro",
          "src/testdir/test_vim9_assign.vim",
          "src/testdir/test_vim9_func.vim",
          "src/version.c",
          "src/vim9compile.c",
          "src/vim9type.c"
        ],
        "message": "patch 8.2.5026: Vim9: a few lines not covered by tests\n\nProblem:    Vim9: a few lines not covered by tests.\nSolution:   Delete dead code.  Add a few test cases. make \"12->func()\" work.",
        "before_after_code_files": [
          "src/ex_docmd.c||src/ex_docmd.c",
          "src/proto/ex_docmd.pro||src/proto/ex_docmd.pro",
          "src/testdir/test_vim9_assign.vim||src/testdir/test_vim9_assign.vim",
          "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
          "src/version.c||src/version.c",
          "src/vim9compile.c||src/vim9compile.c",
          "src/vim9type.c||src/vim9type.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ex_docmd.c||src/ex_docmd.c",
            "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
            "src/version.c||src/version.c",
            "src/vim9compile.c||src/vim9compile.c"
          ],
          "candidate": [
            "src/ex_docmd.c||src/ex_docmd.c",
            "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
            "src/version.c||src/version.c",
            "src/vim9compile.c||src/vim9compile.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ex_docmd.c||src/ex_docmd.c": [
          "File: src/ex_docmd.c -> src/ex_docmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3506:     return FALSE;",
          "3507: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3513:     int",
          "3514: number_method(char_u *cmd)",
          "3515: {",
          "3516:     char_u *p = skipdigits(cmd);",
          "3518:     return p > cmd && (p = skipwhite(p))[0] == '-' && p[1] == '>';",
          "3519: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3716:      }",
          "3717:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3732:  if (number_method(eap->cmd))",
          "3733:  {",
          "3734:      eap->cmdidx = CMD_eval;",
          "3735:      return eap->cmd;",
          "3736:  }",
          "",
          "---------------"
        ],
        "src/proto/ex_docmd.pro||src/proto/ex_docmd.pro": [
          "File: src/proto/ex_docmd.pro -> src/proto/ex_docmd.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: void undo_cmdmod(cmdmod_T *cmod);",
          "18: int parse_cmd_address(exarg_T *eap, char **errormsg, int silent);",
          "19: char_u *skip_option_env_lead(char_u *start);",
          "20: char_u *find_ex_command(exarg_T *eap, int *full, int (*lookup)(char_u *, size_t, int cmd, cctx_T *), cctx_T *cctx);",
          "21: int modifier_len(char_u *cmd);",
          "22: int cmd_exists(char_u *name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: int number_method(char_u *cmd);",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_assign.vim||src/testdir/test_vim9_assign.vim": [
          "File: src/testdir/test_vim9_assign.vim -> src/testdir/test_vim9_assign.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1121:   var dict4: dict<any> = {one: 1, two: '2'}",
          "1122:   var dict5: dict<blob> = {one: 0z01, two: 0z02}",
          "1124:   # overwrite",
          "1125:   dict3['key'] = 'another'",
          "1126:   assert_equal(dict3, {key: 'another'})",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1124:   # check the type is OK",
          "1125:   var events: dict<string> = v:event",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2105:       va foo = 123",
          "2106:   END",
          "2107:   v9.CheckDefAndScriptFailure(lines, 'E1065:', 1)",
          "2108: enddef",
          "2110: def Test_var_declaration_inferred()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2112:   lines =<< trim END",
          "2113:       var foo: func(number",
          "2114:   END",
          "2115:   v9.CheckDefAndScriptFailure(lines, 'E110:', 1)",
          "2117:   lines =<< trim END",
          "2118:       var foo: func(number): func(",
          "2119:   END",
          "2120:   v9.CheckDefAndScriptFailure(lines, 'E110:', 1)",
          "2122:   for type in ['num_ber',",
          "2123:                'anys', 'ani',",
          "2124:                'bools', 'boel',",
          "2125:                'blobs', 'blub',",
          "2126:                'channels', 'channol',",
          "2127:                'dicts', 'duct',",
          "2128:                'floats', 'floot',",
          "2129:                'funcs', 'funk',",
          "2130:                'jobs', 'jop',",
          "2131:                'lists', 'last'",
          "2132:                'numbers', 'numbar',",
          "2133:                'strings', 'strung',",
          "2134:                'voids', 'viod']",
          "2135:     v9.CheckDefAndScriptFailure([$'var foo: {type}'], 'E1010:', 1)",
          "2136:   endfor",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2118:       echo GetList()->extend(['x'])",
          "2119:   END",
          "2120:   v9.CheckScriptFailure(lines, 'E1013:', 6)",
          "2121: enddef",
          "2123: def Test_script_local_in_legacy()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2151:   lines =<< trim END",
          "2152:       vim9script",
          "2153:       def GetNr(): number",
          "2154:         return 5",
          "2155:       enddef",
          "2156:       def TestOne()",
          "2157:         var some = [function('len'), GetNr]",
          "2158:         g:res = typename(some)",
          "2159:       enddef",
          "2160:       TestOne()",
          "2161:       assert_equal('list<func(): number>', g:res)",
          "2163:       def TestTwo()",
          "2164:         var some = [function('len'), GetNr]",
          "2165:         g:res = typename(some)",
          "2166:       enddef",
          "2167:       TestTwo()",
          "2168:       assert_equal('list<func(): number>', g:res)",
          "2169:       unlet g:res",
          "2171:       # FIXME: why is the type different?",
          "2172:       var first = [function('len'), GetNr]",
          "2173:       assert_equal('list<func(...): number>', typename(first))",
          "2174:       var second = [GetNr, function('len')]",
          "2175:       assert_equal('list<func(...): number>', typename(second))",
          "2176:   END",
          "2177:   v9.CheckScriptSuccess(lines)",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim": [
          "File: src/testdir/test_vim9_func.vim -> src/testdir/test_vim9_func.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "4051:     echo [0, 1, 2]->map((_) => 123)",
          "4052:   END",
          "4053:   v9.CheckDefAndScriptFailure(lines, ['E176', 'E1106: One argument too many'], 1)",
          "4054: enddef",
          "4056: def Test_closing_brace_at_start_of_line()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4055:   lines =<< trim END",
          "4056:       vim9script",
          "4057:       def OneArgument(arg: string)",
          "4058:         echo arg",
          "4059:       enddef",
          "4060:       var Ref = OneArgument",
          "4061:       Ref('a', 'b')",
          "4062:   END",
          "4063:   v9.CheckScriptFailure(lines, 'E118:')",
          "4064: enddef",
          "4066: def Test_funcref_with_base()",
          "4067:   var lines =<< trim END",
          "4068:       vim9script",
          "4069:       def TwoArguments(str: string, nr: number)",
          "4070:         echo str nr",
          "4071:       enddef",
          "4072:       var Ref = TwoArguments",
          "4073:       Ref('a', 12)",
          "4074:       'b'->Ref(34)",
          "4075:   END",
          "4076:   v9.CheckScriptSuccess(lines)",
          "4078:   lines =<< trim END",
          "4079:       vim9script",
          "4080:       def TwoArguments(str: string, nr: number)",
          "4081:         echo str nr",
          "4082:       enddef",
          "4083:       var Ref = TwoArguments",
          "4084:       'a'->Ref('b')",
          "4085:   END",
          "4086:   v9.CheckScriptFailure(lines, 'E1013: Argument 2: type mismatch, expected number but got string', 6)",
          "4088:   lines =<< trim END",
          "4089:       vim9script",
          "4090:       def TwoArguments(str: string, nr: number)",
          "4091:         echo str nr",
          "4092:       enddef",
          "4093:       var Ref = TwoArguments",
          "4094:       123->Ref(456)",
          "4095:   END",
          "4096:   v9.CheckScriptFailure(lines, 'E1013: Argument 1: type mismatch, expected string but got number')",
          "4098:   lines =<< trim END",
          "4099:       vim9script",
          "4100:       def TwoArguments(nr: number, str: string)",
          "4101:         echo str nr",
          "4102:       enddef",
          "4103:       var Ref = TwoArguments",
          "4104:       123->Ref('b')",
          "4105:       def AndNowCompiled()",
          "4106:         456->Ref('x')",
          "4107:       enddef",
          "4108:       AndNowCompiled()",
          "4109:   END",
          "4110:   v9.CheckScriptSuccess(lines)",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "735: static int included_patches[] =",
          "738:     5025,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "738:     5026,",
          "",
          "---------------"
        ],
        "src/vim9compile.c||src/vim9compile.c": [
          "File: src/vim9compile.c -> src/vim9compile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3008:       || !(*cmd == '\\''",
          "3009:    || (cmd[0] == '0' && cmd[1] == 'z')",
          "3010:    || (cmd[0] != NUL && cmd[0] == cmd[1]",
          "3012:  {",
          "3013:      ea.cmd = skip_range(ea.cmd, TRUE, NULL);",
          "3014:      if (ea.cmd > cmd)",
          "",
          "[Removed Lines]",
          "3011:          && (*cmd == '+' || *cmd == '-')))))",
          "",
          "[Added Lines]",
          "3012:          && (*cmd == '+' || *cmd == '-'))",
          "3013:    || number_method(cmd))))",
          "",
          "---------------"
        ],
        "src/vim9type.c||src/vim9type.c": [
          "File: src/vim9type.c -> src/vim9type.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:     type_T *",
          "251: get_func_type(type_T *ret_type, int argcount, garray_T *type_gap)",
          "252: {",
          "255:     {",
          "289:     }",
          "291:     return alloc_func_type(ret_type, argcount, type_gap);",
          "",
          "[Removed Lines]",
          "254:     if (argcount <= 0)",
          "256:  if (ret_type == &t_unknown || ret_type == NULL)",
          "257:  {",
          "259:      return &t_func_unknown;",
          "260:  }",
          "261:  if (ret_type == &t_void)",
          "262:  {",
          "263:      if (argcount == 0)",
          "264:   return &t_func_0_void;",
          "265:      else",
          "266:   return &t_func_void;",
          "267:  }",
          "268:  if (ret_type == &t_any)",
          "269:  {",
          "270:      if (argcount == 0)",
          "271:   return &t_func_0_any;",
          "272:      else",
          "273:   return &t_func_any;",
          "274:  }",
          "275:  if (ret_type == &t_number)",
          "276:  {",
          "277:      if (argcount == 0)",
          "278:   return &t_func_0_number;",
          "279:      else",
          "280:   return &t_func_number;",
          "281:  }",
          "282:  if (ret_type == &t_string)",
          "283:  {",
          "284:      if (argcount == 0)",
          "285:   return &t_func_0_string;",
          "286:      else",
          "287:   return &t_func_string;",
          "288:  }",
          "",
          "[Added Lines]",
          "253:     if (ret_type == &t_unknown || ret_type == NULL)",
          "256:  return &t_func_unknown;",
          "257:     }",
          "258:     if (ret_type == &t_void)",
          "259:     {",
          "260:  if (argcount == 0)",
          "261:      return &t_func_0_void;",
          "262:  else",
          "263:      return &t_func_void;",
          "264:     }",
          "265:     if (ret_type == &t_any)",
          "266:     {",
          "267:  if (argcount == 0)",
          "268:      return &t_func_0_any;",
          "269:  else",
          "270:      return &t_func_any;",
          "271:     }",
          "272:     if (ret_type == &t_number)",
          "273:     {",
          "274:  if (argcount == 0)",
          "275:      return &t_func_0_number;",
          "276:  else",
          "277:      return &t_func_number;",
          "278:     }",
          "279:     if (ret_type == &t_string)",
          "280:     {",
          "281:  if (argcount == 0)",
          "282:      return &t_func_0_string;",
          "283:  else",
          "284:      return &t_func_string;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "541: {",
          "542:     if (tv->v_type == VAR_LIST)  // e.g. for v:oldfiles",
          "543:  return &t_list_string;",
          "545:  return &t_dict_any;",
          "546:     return typval2type(tv, get_copyID(), type_gap, TVTT_DO_MEMBER);",
          "547: }",
          "",
          "[Removed Lines]",
          "544:     if (tv->v_type == VAR_DICT)  // e.g. for v:completed_item",
          "",
          "[Added Lines]",
          "540:     if (tv->v_type == VAR_DICT)  // e.g. for v:event",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1441: type_name(type_T *type, char **tofree)",
          "1442: {",
          "1443:     char *name;",
          "1446:     if (type == NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1440:     char *arg_free = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1470:  ga_init2(&ga, 1, 100);",
          "1471:  if (ga_grow(&ga, 20) == FAIL)",
          "1473:  STRCPY(ga.ga_data, \"func(\");",
          "1474:  ga.ga_len += 5;",
          "1476:  for (i = 0; i < type->tt_argcount; ++i)",
          "1477:  {",
          "1479:      char *arg_type;",
          "1480:      int  len;",
          "",
          "[Removed Lines]",
          "1472:      return \"[unknown]\";",
          "1478:      char *arg_free = NULL;",
          "",
          "[Added Lines]",
          "1469:      goto failed;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1490:      }",
          "1491:      len = (int)STRLEN(arg_type);",
          "1492:      if (ga_grow(&ga, len + 8) == FAIL)",
          "1498:      if (varargs && i == type->tt_argcount - 1)",
          "1499:   ga_concat(&ga, (char_u *)\"...\");",
          "1500:      else if (i >= type->tt_min_argcount)",
          "1502:      ga_concat(&ga, (char_u *)arg_type);",
          "1504:  }",
          "1505:  if (type->tt_argcount < 0)",
          "",
          "[Removed Lines]",
          "1493:      {",
          "1494:   vim_free(arg_free);",
          "1495:   ga_clear(&ga);",
          "1496:   return \"[unknown]\";",
          "1497:      }",
          "1503:      vim_free(arg_free);",
          "",
          "[Added Lines]",
          "1489:   goto failed;",
          "1495:      VIM_CLEAR(arg_free);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1517:      len = (int)STRLEN(ret_name) + 4;",
          "1518:      if (ga_grow(&ga, len) == FAIL)",
          "1524:      STRCPY((char *)ga.ga_data + ga.ga_len, \"): \");",
          "1525:      STRCPY((char *)ga.ga_data + ga.ga_len + 3, ret_name);",
          "1526:      vim_free(ret_free);",
          "1527:  }",
          "1529:  return ga.ga_data;",
          "1530:     }",
          "1532:     return name;",
          "",
          "[Removed Lines]",
          "1519:      {",
          "1520:   vim_free(ret_free);",
          "1521:   ga_clear(&ga);",
          "1522:   return \"[unknown]\";",
          "1523:      }",
          "",
          "[Added Lines]",
          "1511:   goto failed;",
          "1519: failed:",
          "1520:  vim_free(arg_free);",
          "1521:  ga_clear(&ga);",
          "1522:  return \"[unknown]\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce024c3e20839465dc8c8f79dcccc5414dd8c506",
      "candidate_info": {
        "commit_hash": "ce024c3e20839465dc8c8f79dcccc5414dd8c506",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/ce024c3e20839465dc8c8f79dcccc5414dd8c506",
        "files": [
          "src/testdir/test_vim9_func.vim",
          "src/version.c",
          "src/vim9compile.c"
        ],
        "message": "patch 8.2.3052: Vim9: \"legacy call\" does not work\n\nProblem:    Vim9: \"legacy call\" does not work.\nSolution:   Do not skip \"call\" after \"legacy\". (closes #8454)",
        "before_after_code_files": [
          "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
          "src/version.c||src/version.c",
          "src/vim9compile.c||src/vim9compile.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
            "src/version.c||src/version.c",
            "src/vim9compile.c||src/vim9compile.c"
          ],
          "candidate": [
            "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
            "src/version.c||src/version.c",
            "src/vim9compile.c||src/vim9compile.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim": [
          "File: src/testdir/test_vim9_func.vim -> src/testdir/test_vim9_func.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "2316:   CheckScriptSuccess(lines)",
          "2317: enddef",
          "2319: def Test_legacy_errors()",
          "2320:   for cmd in ['if', 'elseif', 'else', 'endif',",
          "2321:               'for', 'endfor', 'continue', 'break',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2319: def Test_legacy()",
          "2320:   var lines =<< trim END",
          "2321:       vim9script",
          "2322:       func g:LegacyFunction()",
          "2323:         let g:legacyvar = 1",
          "2324:       endfunc",
          "2325:       def Testit()",
          "2326:         legacy call g:LegacyFunction()",
          "2327:       enddef",
          "2328:       Testit()",
          "2329:       assert_equal(1, g:legacyvar)",
          "2330:       unlet g:legacyvar",
          "2331:       delfunc g:LegacyFunction",
          "2332:   END",
          "2333:   CheckScriptSuccess(lines)",
          "2334: enddef",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "756: static int included_patches[] =",
          "759:     3051,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "759:     3052,",
          "",
          "---------------"
        ],
        "src/vim9compile.c||src/vim9compile.c": [
          "File: src/vim9compile.c -> src/vim9compile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9346:   break;",
          "9347:  }",
          "9350:  p = ea.cmd;",
          "9352:  {",
          "9370:  }",
          "",
          "[Removed Lines]",
          "9351:  if (checkforcmd(&ea.cmd, \"call\", 3))",
          "9353:      if (*ea.cmd == '(')",
          "9355:   ea.cmd = p;",
          "9356:      else",
          "9357:   ea.cmd = skipwhite(ea.cmd);",
          "9358:  }",
          "9360:  if (!starts_with_colon)",
          "9361:  {",
          "9362:      int     assign;",
          "9365:      assign = may_compile_assignment(&ea, &line, &cctx);",
          "9366:      if (assign == OK)",
          "9367:   goto nextline;",
          "9368:      if (assign == FAIL)",
          "9369:   goto erret;",
          "",
          "[Added Lines]",
          "9351:  if (!(local_cmdmod.cmod_flags & CMOD_LEGACY))",
          "9353:      if (checkforcmd(&ea.cmd, \"call\", 3))",
          "9354:      {",
          "9355:   if (*ea.cmd == '(')",
          "9357:       ea.cmd = p;",
          "9358:   else",
          "9359:       ea.cmd = skipwhite(ea.cmd);",
          "9360:      }",
          "9362:      if (!starts_with_colon)",
          "9363:      {",
          "9364:   int     assign;",
          "9367:   assign = may_compile_assignment(&ea, &line, &cctx);",
          "9368:   if (assign == OK)",
          "9369:       goto nextline;",
          "9370:   if (assign == FAIL)",
          "9371:       goto erret;",
          "9372:      }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9377:  cmd = ea.cmd;",
          "9380:  {",
          "9381:      ea.cmd = skip_range(ea.cmd, TRUE, NULL);",
          "9382:      if (ea.cmd > cmd)",
          "",
          "[Removed Lines]",
          "9378:  if (starts_with_colon || !(*cmd == '\\''",
          "9379:    || (cmd[0] == cmd[1] && (*cmd == '+' || *cmd == '-'))))",
          "",
          "[Added Lines]",
          "9381:  if (!(local_cmdmod.cmod_flags & CMOD_LEGACY)",
          "9382:   && (starts_with_colon || !(*cmd == '\\''",
          "9383:          || (cmd[0] == cmd[1] && (*cmd == '+' || *cmd == '-')))))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1e6c7bafec1115b690c745a28e1a6338750b137",
      "candidate_info": {
        "commit_hash": "c1e6c7bafec1115b690c745a28e1a6338750b137",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/c1e6c7bafec1115b690c745a28e1a6338750b137",
        "files": [
          "src/evalfunc.c",
          "src/ex_docmd.c",
          "src/testdir/test_vim9_builtin.vim",
          "src/version.c",
          "src/vim9compile.c"
        ],
        "message": "patch 8.2.4426: map() function on string and blob does not check types\n\nProblem:    map() function on string and blob does not check argument types at\n            compile time.\nSolution:   Check string and blob argument types.  Support \"0z1234->func()\".",
        "before_after_code_files": [
          "src/evalfunc.c||src/evalfunc.c",
          "src/ex_docmd.c||src/ex_docmd.c",
          "src/testdir/test_vim9_builtin.vim||src/testdir/test_vim9_builtin.vim",
          "src/version.c||src/version.c",
          "src/vim9compile.c||src/vim9compile.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ex_docmd.c||src/ex_docmd.c",
            "src/version.c||src/version.c",
            "src/vim9compile.c||src/vim9compile.c"
          ],
          "candidate": [
            "src/ex_docmd.c||src/ex_docmd.c",
            "src/version.c||src/version.c",
            "src/vim9compile.c||src/vim9compile.c"
          ]
        }
      },
      "candidate_diff": {
        "src/evalfunc.c||src/evalfunc.c": [
          "File: src/evalfunc.c -> src/evalfunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "566:   t_func_exp.tt_argcount = -1;",
          "567:      else",
          "568:      {",
          "570:       args[0] = &t_number;",
          "572:       args[0] = &t_string;",
          "573:   if (args[0] != NULL)",
          "574:       args[1] = expected_ret;",
          "",
          "[Removed Lines]",
          "569:   if (context->arg_types[0].type_decl->tt_type == VAR_LIST)",
          "571:   else if (context->arg_types[0].type_decl->tt_type == VAR_DICT)",
          "",
          "[Added Lines]",
          "569:   if (context->arg_types[0].type_curr->tt_type == VAR_STRING",
          "570:    || context->arg_types[0].type_curr->tt_type == VAR_BLOB",
          "571:    || context->arg_types[0].type_curr->tt_type == VAR_LIST)",
          "573:   else if (context->arg_types[0].type_curr->tt_type == VAR_DICT)",
          "",
          "---------------"
        ],
        "src/ex_docmd.c||src/ex_docmd.c": [
          "File: src/ex_docmd.c -> src/ex_docmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3457:  char_u *pskip = skip_option_env_lead(eap->cmd);",
          "3459:  if (vim_strchr((char_u *)\"{('[\\\"@&$\", *p) != NULL",
          "3461:  {",
          "3462:      int     oplen;",
          "3463:      int     heredoc;",
          "",
          "[Removed Lines]",
          "3460:         || ((p = to_name_const_end(pskip)) > eap->cmd && *p != NUL))",
          "",
          "[Added Lines]",
          "3460:         || ((p = to_name_const_end(pskip)) > eap->cmd && *p != NUL)",
          "3461:         || (p[0] == '0' && p[1] == 'z'))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3504:     || *eap->cmd == '\\''",
          "3506:     || *eap->cmd == '\"'",
          "3508:     || eap->cmd[1] == ':'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3507:     || (eap->cmd[0] == '0' && eap->cmd[1] == 'z')",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_builtin.vim||src/testdir/test_vim9_builtin.vim": [
          "File: src/testdir/test_vim9_builtin.vim -> src/testdir/test_vim9_builtin.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "2360:   v9.CheckDefAndScriptFailure(['maparg(\"a\", \"b\", true, 2)'], ['E1013: Argument 4: type mismatch, expected bool but got number', 'E1212: Bool required for argument 4'])",
          "2361:   maparg('')->assert_equal('')",
          "2363:   var lines =<< trim END",
          "2364:       var l = [123]",
          "2366:   END",
          "2369:   lines =<< trim END",
          "2370:       ['x']->map((i: string, v: string) => 'y')",
          "2371:   END",
          "",
          "[Removed Lines]",
          "2365:       l->map((_, v: string) => 0)",
          "2367:   v9.CheckDefFailure(lines, 'E1013: Argument 2: type mismatch, expected func(?number, ?number): number but got func(any, string): number')",
          "",
          "[Added Lines]",
          "2363:   # value argument type is checked at compile time",
          "2366:       l->map((i: number, v: string) => 0)",
          "2368:   v9.CheckDefFailure(lines, 'E1013: Argument 2: type mismatch, expected func(?number, ?number): number but got func(number, string): number')",
          "2370:   lines =<< trim END",
          "2371:       var d = {a: 123}",
          "2372:       d->map((i: string, v: string) => 0)",
          "2373:   END",
          "2374:   v9.CheckDefFailure(lines, 'E1013: Argument 2: type mismatch, expected func(?string, ?number): number but got func(string, string): number')",
          "2376:   lines =<< trim END",
          "2377:     var s = 'abc'",
          "2378:     s->map((i: number, v: number) => 'x')",
          "2379:   END",
          "2380:   v9.CheckDefFailure(lines, 'E1013: Argument 2: type mismatch, expected func(?number, ?string): string but got func(number, number): string')",
          "2382:   lines =<< trim END",
          "2383:     var s = 0z1122",
          "2384:     s->map((i: number, v: string) => 0)",
          "2385:   END",
          "2386:   v9.CheckDefFailure(lines, 'E1013: Argument 2: type mismatch, expected func(?number, ?number): number but got func(number, string): number')",
          "2388:   # index argument type is checked at compile time",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2375:     {a: 1}->map((i: number, v: number) => 0)",
          "2376:   END",
          "2377:   v9.CheckDefFailure(lines, 'E1013: Argument 2: type mismatch, expected func(?string, ?any): any but got func(number, number): number')",
          "2378: enddef",
          "2380: def Test_maparg_mapset()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2399:   lines =<< trim END",
          "2400:     'abc'->map((i: string, v: string) => 'x')",
          "2401:   END",
          "2402:   v9.CheckDefFailure(lines, 'E1013: Argument 2: type mismatch, expected func(?number, ?string): string but got func(string, string): string')",
          "2404:   lines =<< trim END",
          "2405:     0z1122->map((i: string, v: number) => 0)",
          "2406:   END",
          "2407:   v9.CheckDefFailure(lines, 'E1013: Argument 2: type mismatch, expected func(?number, ?number): number but got func(string, number): number')",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4425,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4426,",
          "",
          "---------------"
        ],
        "src/vim9compile.c||src/vim9compile.c": [
          "File: src/vim9compile.c -> src/vim9compile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2824:  cmd = ea.cmd;",
          "2825:  if ((*cmd != '$' || starts_with_colon)",
          "2828:          && (*cmd == '+' || *cmd == '-')))))",
          "2829:  {",
          "2830:      ea.cmd = skip_range(ea.cmd, TRUE, NULL);",
          "",
          "[Removed Lines]",
          "2826:   && (starts_with_colon || !(*cmd == '\\''",
          "2827:          || (cmd[0] != NUL && cmd[0] == cmd[1]",
          "",
          "[Added Lines]",
          "2827:   && (starts_with_colon",
          "2828:       || !(*cmd == '\\''",
          "2829:    || (cmd[0] == '0' && cmd[1] == 'z')",
          "2830:    || (cmd[0] != NUL && cmd[0] == cmd[1]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bdc0f1c6986e5d64f647e0924a4de795b47c549a",
      "candidate_info": {
        "commit_hash": "bdc0f1c6986e5d64f647e0924a4de795b47c549a",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/bdc0f1c6986e5d64f647e0924a4de795b47c549a",
        "files": [
          "src/eval.c",
          "src/ex_cmdidxs.h",
          "src/ex_cmds.h",
          "src/ex_docmd.c",
          "src/proto/vim9script.pro",
          "src/testdir/test_vim9_assign.vim",
          "src/testdir/test_vim9_expr.vim",
          "src/version.c",
          "src/vim9compile.c",
          "src/vim9script.c"
        ],
        "message": "patch 8.2.2806: Vim9: using \"++nr\" as a command might not work\n\nProblem:    Vim9: using \"++nr\" as a command might not work.\nSolution:   Do not recognize \"++\" and \"--\" in a following line as addition or\n            subtraction.",
        "before_after_code_files": [
          "src/eval.c||src/eval.c",
          "src/ex_cmdidxs.h||src/ex_cmdidxs.h",
          "src/ex_cmds.h||src/ex_cmds.h",
          "src/ex_docmd.c||src/ex_docmd.c",
          "src/proto/vim9script.pro||src/proto/vim9script.pro",
          "src/testdir/test_vim9_assign.vim||src/testdir/test_vim9_assign.vim",
          "src/testdir/test_vim9_expr.vim||src/testdir/test_vim9_expr.vim",
          "src/version.c||src/version.c",
          "src/vim9compile.c||src/vim9compile.c",
          "src/vim9script.c||src/vim9script.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ex_docmd.c||src/ex_docmd.c",
            "src/version.c||src/version.c",
            "src/vim9compile.c||src/vim9compile.c"
          ],
          "candidate": [
            "src/ex_docmd.c||src/ex_docmd.c",
            "src/version.c||src/version.c",
            "src/vim9compile.c||src/vim9compile.c"
          ]
        }
      },
      "candidate_diff": {
        "src/eval.c||src/eval.c": [
          "File: src/eval.c -> src/eval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2859:  p = eval_next_non_blank(*arg, evalarg, &getnext);",
          "2860:  op = *p;",
          "2861:  concat = op == '.' && (*(p + 1) == '.' || current_sctx.sc_version < 2);",
          "2862:  if ((op != '+' && op != '-' && !concat) || p[1] == '='",
          "2863:             || (p[1] == '.' && p[2] == '='))",
          "2864:      break;",
          "2866:  evaluate = evalarg == NULL ? 0 : (evalarg->eval_flags & EVAL_EVALUATE);",
          "2867:  oplen = (concat && p[1] == '.') ? 2 : 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2866:  if (getnext && (op == '+' || op == '-') && p[0] == p[1])",
          "2867:      break;",
          "",
          "---------------"
        ],
        "src/ex_cmdidxs.h||src/ex_cmdidxs.h": [
          "File: src/ex_cmdidxs.h -> src/ex_cmdidxs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: };",
          "",
          "[Removed Lines]",
          "72: static const int command_count = 577;",
          "",
          "[Added Lines]",
          "72: static const int command_count = 579;",
          "",
          "---------------"
        ],
        "src/ex_cmds.h||src/ex_cmds.h": [
          "File: src/ex_cmds.h -> src/ex_cmds.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1846:  EX_TRLBAR,",
          "1847:  ADDR_NONE),",
          "1849: #undef EXCMD",
          "1851: #ifndef DO_DECLARE_EXCMD",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1850: EXCMD(CMD_increment, \"++\",  ex_incdec,",
          "1851:  EX_EXTRA|EX_NOTRLCOM|EX_SBOXOK|EX_CMDWIN|EX_LOCK_OK,",
          "1852:  ADDR_NONE),",
          "1853: EXCMD(CMD_decrement, \"--\",  ex_incdec,",
          "1854:  EX_EXTRA|EX_NOTRLCOM|EX_SBOXOK|EX_CMDWIN|EX_LOCK_OK,",
          "1855:  ADDR_NONE),",
          "",
          "---------------"
        ],
        "src/ex_docmd.c||src/ex_docmd.c": [
          "File: src/ex_docmd.c -> src/ex_docmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3531:      eap->cmdidx = CMD_eval;",
          "3532:      return eap->cmd;",
          "3533:  }",
          "3534:     }",
          "3535: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3536:  if (p == eap->cmd && p[0] == p[1] && (*p == '+' || *p == '-'))",
          "3537:  {",
          "3538:      eap->cmdidx = *p == '+' ? CMD_increment : CMD_decrement;",
          "3539:      return eap->cmd + 2;",
          "3540:  }",
          "",
          "---------------"
        ],
        "src/proto/vim9script.pro||src/proto/vim9script.pro": [
          "File: src/proto/vim9script.pro -> src/proto/vim9script.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: int not_in_vim9(exarg_T *eap);",
          "6: int vim9_bad_comment(char_u *p);",
          "7: int vim9_comment_start(char_u *p);",
          "8: void ex_export(exarg_T *eap);",
          "9: void free_imports_and_script_vars(int sid);",
          "10: void mark_imports_for_reload(int sid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: void ex_incdec(exarg_T *eap);",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_assign.vim||src/testdir/test_vim9_assign.vim": [
          "File: src/testdir/test_vim9_assign.vim -> src/testdir/test_vim9_assign.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1837:   CheckScriptFailure(lines, 'E704:')",
          "1838: enddef",
          "1841: \" vim: ts=8 sw=2 sts=2 expandtab tw=80 fdm=marker",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1840: def Test_inc_dec()",
          "1841:   var lines =<< trim END",
          "1842:       var nr = 7",
          "1843:       ++nr",
          "1844:       echo nr",
          "1845:       --nr",
          "1846:       echo nr",
          "1848:       var ll = [1, 2]",
          "1849:       --ll[0]",
          "1850:       ++ll[1]",
          "1851:       echo ll",
          "1852:   END",
          "1853:   CheckDefAndScriptSuccess(lines)",
          "1854: enddef",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_expr.vim||src/testdir/test_vim9_expr.vim": [
          "File: src/testdir/test_vim9_expr.vim -> src/testdir/test_vim9_expr.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "2768:     echo + +n",
          "2769:   END",
          "2770:   CheckDefAndScriptFailure(lines, 'E15:')",
          "2784: enddef",
          "2786: def Test_expr7_legacy_script()",
          "",
          "[Removed Lines]",
          "2772:   lines =<< trim END",
          "2773:     var n = 12",
          "2774:     :1",
          "2775:     ++n",
          "2776:   END",
          "2777:   CheckDefAndScriptFailure(lines, 'E1050:')",
          "2778:   lines =<< trim END",
          "2779:     var n = 12",
          "2780:     :1",
          "2781:     --n",
          "2782:   END",
          "2783:   CheckDefAndScriptFailure(lines, 'E1050:')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     2805,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     2806,",
          "",
          "---------------"
        ],
        "src/vim9compile.c||src/vim9compile.c": [
          "File: src/vim9compile.c -> src/vim9compile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4688:  op = may_peek_next_line(cctx, *arg, &next);",
          "4689:  if (*op != '+' && *op != '-' && !(*op == '.' && *(op + 1) == '.'))",
          "4690:      break;",
          "4691:  oplen = (*op == '.' ? 2 : 1);",
          "4692:  if (next != NULL)",
          "4693:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4691:  if (op[0] == op[1] && *op != '.' && next)",
          "4694:      break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6413:     char_u *op;",
          "6414:     int  oplen = 0;",
          "6415:     int  heredoc = FALSE;",
          "6416:     type_T *rhs_type = &t_any;",
          "6417:     char_u *sp;",
          "6418:     int  is_decl = is_decl_command(cmdidx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6421:     int  incdec = FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6447:  error_white_both(op, oplen);",
          "6448:  return NULL;",
          "6449:     }",
          "6451:     if (heredoc)",
          "6452:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6456:     if (eap->cmdidx == CMD_increment || eap->cmdidx == CMD_decrement)",
          "6457:     {",
          "6458:  op = (char_u *)(eap->cmdidx == CMD_increment ? \"+=\" : \"-=\");",
          "6459:  oplen = 2;",
          "6460:  incdec = TRUE;",
          "6461:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6571:        goto theend;",
          "6572:       }",
          "6578:       instr_count = instr->ga_len;",
          "6581:       {",
          "6582:    if (lhs.lhs_new_local)",
          "6583:        ++cctx->ctx_locals.ga_len;",
          "6585:       }",
          "6591:   }",
          "6592:   else if (semicolon && var_idx == var_count - 1)",
          "6593:   {",
          "",
          "[Removed Lines]",
          "6576:       if (lhs.lhs_new_local)",
          "6577:    --cctx->ctx_locals.ga_len;",
          "6579:       wp = op + oplen;",
          "6580:       if (may_get_next_line_error(wp, &p, cctx) == FAIL)",
          "6584:    goto theend;",
          "6586:       r = compile_expr0_ext(&p, cctx, &is_const);",
          "6587:       if (lhs.lhs_new_local)",
          "6588:    ++cctx->ctx_locals.ga_len;",
          "6589:       if (r == FAIL)",
          "6590:    goto theend;",
          "",
          "[Added Lines]",
          "6588:       if (incdec)",
          "6590:    r = generate_PUSHNR(cctx, 1);",
          "6591:       }",
          "6592:       else",
          "6593:       {",
          "6596:    if (lhs.lhs_new_local)",
          "6597:        --cctx->ctx_locals.ga_len;",
          "6598:    wp = op + oplen;",
          "6599:    if (may_get_next_line_error(wp, &p, cctx) == FAIL)",
          "6600:    {",
          "6601:        if (lhs.lhs_new_local)",
          "6602:     ++cctx->ctx_locals.ga_len;",
          "6603:        goto theend;",
          "6604:    }",
          "6605:    r = compile_expr0_ext(&p, cctx, &is_const);",
          "6608:    if (r == FAIL)",
          "6609:        goto theend;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9022:  cmd = ea.cmd;",
          "9024:  {",
          "9025:      ea.cmd = skip_range(ea.cmd, TRUE, NULL);",
          "9026:      if (ea.cmd > cmd)",
          "",
          "[Removed Lines]",
          "9023:  if (*cmd != '\\'' || starts_with_colon)",
          "",
          "[Added Lines]",
          "9044:  if (starts_with_colon || !(*cmd == '\\''",
          "9045:    || (cmd[0] == cmd[1] && (*cmd == '+' || *cmd == '-'))))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "9125:      case CMD_var:",
          "9126:      case CMD_final:",
          "9127:      case CMD_const:",
          "9128:       line = compile_assignment(p, &ea, ea.cmdidx, &cctx);",
          "9129:       if (line == p)",
          "9130:    line = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9150:      case CMD_increment:",
          "9151:      case CMD_decrement:",
          "",
          "---------------"
        ],
        "src/vim9script.c||src/vim9script.c": [
          "File: src/vim9script.c -> src/vim9script.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160: #if defined(FEAT_EVAL) || defined(PROTO)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:     void",
          "166: ex_incdec(exarg_T *eap)",
          "167: {",
          "168:     char_u *cmd = eap->cmd;",
          "169:     size_t len = STRLEN(eap->cmd) + 6;",
          "172:     eap->cmd = alloc(len);",
          "173:     if (eap->cmd == NULL)",
          "174:  return;",
          "175:     vim_snprintf((char *)eap->cmd, len, \"%s %c= 1\", cmd + 2,",
          "176:          eap->cmdidx == CMD_increment ? '+' : '-');",
          "177:     eap->arg = eap->cmd;",
          "178:     eap->cmdidx = CMD_var;",
          "179:     ex_let(eap);",
          "180:     vim_free(eap->cmd);",
          "181:     eap->cmd = cmd;",
          "182: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}