{
  "cve_id": "CVE-2022-36039",
  "cve_desc": "Rizin is a UNIX-like reverse engineering framework and command-line toolset. Versions 0.4.0 and prior are vulnerable to out-of-bounds write when parsing DEX files. A user opening a malicious DEX file could be affected by this vulnerability, allowing an attacker to execute code on the user's machine. A patch is available on the `dev` branch of the repository.",
  "repo": "rizinorg/rizin",
  "patch_hash": "1524f85211445e41506f98180f8f69f7bf115406",
  "patch_info": {
    "commit_hash": "1524f85211445e41506f98180f8f69f7bf115406",
    "repo": "rizinorg/rizin",
    "commit_url": "https://github.com/rizinorg/rizin/commit/1524f85211445e41506f98180f8f69f7bf115406",
    "files": [
      "librz/bin/format/dex/dex.c"
    ],
    "message": "fix #2969 - oob write (1 byte) in dex.c",
    "before_after_code_files": [
      "librz/bin/format/dex/dex.c||librz/bin/format/dex/dex.c"
    ]
  },
  "patch_diff": {
    "librz/bin/format/dex/dex.c||librz/bin/format/dex/dex.c": [
      "File: librz/bin/format/dex/dex.c -> librz/bin/format/dex/dex.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "81:  DexString *string = NULL;",
      "83:  read = rz_buf_uleb128(buf, &size);",
      "84:  data = malloc(size + 1);",
      "85:  if (!data || rz_buf_read(buf, (ut8 *)data, size) != size) {",
      "86:   free(data);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84:  if (UT64_ADD_OVFCHK(size, 1)) {",
      "85:   return NULL;",
      "86:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "905:  }",
      "906:  char *demangled = strdup(library + 1);",
      "907:  rz_str_replace_ch(demangled, '/', '.', 1);",
      "909:  return demangled;",
      "910: }",
      "",
      "[Removed Lines]",
      "908:  demangled[strlen(demangled) - 1] = 0;",
      "",
      "[Added Lines]",
      "912:  if (RZ_STR_ISNOTEMPTY(demangled)) {",
      "913:   demangled[strlen(demangled) - 1] = 0;",
      "914:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "59080758fbe7703eaa851a490fc89215f6a19b97",
      "candidate_info": {
        "commit_hash": "59080758fbe7703eaa851a490fc89215f6a19b97",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/59080758fbe7703eaa851a490fc89215f6a19b97",
        "files": [
          "librz/bin/bfile.c",
          "librz/bin/bin.c",
          "librz/bin/bobj.c",
          "librz/bin/format/dex/dex.c",
          "librz/bin/format/dex/dex.h",
          "librz/bin/format/java/class_bin.c",
          "librz/bin/format/java/class_bin.h",
          "librz/bin/format/objc/mach0_classes.c",
          "librz/bin/i/private.h",
          "librz/bin/p/bin_dex.c",
          "librz/bin/p/bin_java.c",
          "librz/core/cbin.c",
          "librz/core/tui/classes.c",
          "librz/core/tui/hud.c",
          "librz/include/rz_bin.h",
          "librz/include/rz_core.h",
          "librz/main/rz-diff.c",
          "test/db/analysis/dalvik",
          "test/db/analysis/java",
          "test/db/cmd/cmd_i",
          "test/db/cmd/cmd_tc",
          "test/db/formats/dex",
          "test/db/formats/dyldcache",
          "test/db/formats/java",
          "test/db/formats/mach0/arm64e",
          "test/db/formats/mach0/fatmach0",
          "test/db/formats/mach0/objc",
          "test/db/tools/rz_bin",
          "test/db/tools/rz_diff"
        ],
        "message": "Split bin field from class fields and fix demangling on java (#3479)\n\n* Split Bin Field from Class fields.\n* Fix tests and plugins",
        "before_after_code_files": [
          "librz/bin/bfile.c||librz/bin/bfile.c",
          "librz/bin/bin.c||librz/bin/bin.c",
          "librz/bin/bobj.c||librz/bin/bobj.c",
          "librz/bin/format/dex/dex.c||librz/bin/format/dex/dex.c",
          "librz/bin/format/dex/dex.h||librz/bin/format/dex/dex.h",
          "librz/bin/format/javclass_bin.c||librz/bin/format/java/class_bin.c",
          "librz/bin/format/javclass_bin.h||librz/bin/format/java/class_bin.h",
          "librz/bin/format/objc/mach0_classes.c||librz/bin/format/objc/mach0_classes.c",
          "librz/bin/i/private.h||librz/bin/i/private.h",
          "librz/bin/p/bin_dex.c||librz/bin/p/bin_dex.c",
          "librz/bin/p/bin_java.c||librz/bin/p/bin_java.c",
          "librz/core/cbin.c||librz/core/cbin.c",
          "librz/core/tui/classes.c||librz/core/tui/classes.c",
          "librz/core/tui/hud.c||librz/core/tui/hud.c",
          "librz/include/rz_bin.h||librz/include/rz_bin.h",
          "librz/include/rz_core.h||librz/include/rz_core.h",
          "librz/main/rz-diff.c||librz/main/rz-diff.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "librz/bin/format/dex/dex.c||librz/bin/format/dex/dex.c"
          ],
          "candidate": [
            "librz/bin/format/dex/dex.c||librz/bin/format/dex/dex.c"
          ]
        }
      },
      "candidate_diff": {
        "librz/bin/bfile.c||librz/bin/bfile.c": [
          "File: librz/bin/bfile.c -> librz/bin/bfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "511:  return c;",
          "512: }",
          "522:  }",
          "523: }",
          "525: RZ_API RzBinClass *rz_bin_file_add_class(RzBinFile *bf, const char *name, const char *super, int view) {",
          "",
          "[Removed Lines]",
          "514: RZ_IPI void rz_bin_class_free(RzBinClass *k) {",
          "515:  if (k && k->name) {",
          "516:   free(k->name);",
          "517:   free(k->super);",
          "518:   rz_list_free(k->methods);",
          "519:   rz_list_free(k->fields);",
          "520:   free(k->visibility_str);",
          "521:   free(k);",
          "",
          "[Added Lines]",
          "514: RZ_API void rz_bin_class_free(RzBinClass *k) {",
          "515:  if (!k) {",
          "516:   return;",
          "518:  free(k->name);",
          "519:  free(k->super);",
          "520:  rz_list_free(k->methods);",
          "521:  rz_list_free(k->fields);",
          "522:  free(k->visibility_str);",
          "523:  free(k);",
          "",
          "---------------"
        ],
        "librz/bin/bin.c||librz/bin/bin.c": [
          "File: librz/bin/bin.c -> librz/bin/bin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "950: RZ_API RzBinField *rz_bin_field_new(ut64 paddr, ut64 vaddr, int size, const char *name, const char *comment, const char *format, bool format_named) {",
          "951:  RzBinField *ptr = RZ_NEW0(RzBinField);",
          "961:  }",
          "962:  return ptr;",
          "963: }",
          "965: RZ_API void rz_bin_field_free(RzBinField *field) {",
          "973:  }",
          "974: }",
          "976: RZ_API const char *rz_bin_get_meth_flag_string(ut64 flag, bool compact) {",
          "",
          "[Removed Lines]",
          "952:  if (ptr) {",
          "953:   ptr->name = strdup(name);",
          "954:   ptr->comment = (comment && *comment) ? strdup(comment) : NULL;",
          "955:   ptr->format = (format && *format) ? strdup(format) : NULL;",
          "956:   ptr->format_named = format_named;",
          "957:   ptr->paddr = paddr;",
          "958:   ptr->size = size;",
          "960:   ptr->vaddr = vaddr;",
          "966:  if (field) {",
          "967:   free(field->name);",
          "968:   free(field->visibility_str);",
          "969:   free(field->type);",
          "970:   free(field->comment);",
          "971:   free(field->format);",
          "972:   free(field);",
          "",
          "[Added Lines]",
          "952:  if (!ptr) {",
          "953:   return NULL;",
          "956:  ptr->name = rz_str_new(name);",
          "957:  ptr->comment = rz_str_new(comment);",
          "958:  ptr->format = rz_str_new(format);",
          "959:  ptr->format_named = format_named;",
          "960:  ptr->paddr = paddr;",
          "961:  ptr->size = size;",
          "962:  ptr->vaddr = vaddr;",
          "967:  if (!field) {",
          "968:   return;",
          "969:  }",
          "970:  free(field->name);",
          "971:  free(field->type);",
          "972:  free(field->comment);",
          "973:  free(field->format);",
          "974:  free(field);",
          "975: }",
          "978: RZ_API RzBinClassField *rz_bin_class_field_new(ut64 vaddr, ut64 paddr, const char *name, const char *classname, const char *libname, const char *type) {",
          "979:  RzBinClassField *ptr = RZ_NEW0(RzBinClassField);",
          "980:  if (!ptr) {",
          "981:   return NULL;",
          "982:  }",
          "984:  ptr->vaddr = vaddr ? vaddr : UT64_MAX;",
          "985:  ptr->paddr = paddr;",
          "986:  ptr->name = rz_str_new(name);",
          "987:  ptr->classname = rz_str_new(classname);",
          "988:  ptr->libname = rz_str_new(libname);",
          "989:  ptr->type = rz_str_new(type);",
          "990:  return ptr;",
          "991: }",
          "993: RZ_API void rz_bin_class_field_free(RzBinClassField *field) {",
          "994:  if (!field) {",
          "995:   return;",
          "997:  free(field->name);",
          "998:  free(field->classname);",
          "999:  free(field->libname);",
          "1000:  free(field->type);",
          "1001:  free(field->visibility_str);",
          "1002:  free(field);",
          "",
          "---------------"
        ],
        "librz/bin/bobj.c||librz/bin/bobj.c": [
          "File: librz/bin/bobj.c -> librz/bin/bobj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:    char *dn = sym->dname;",
          "258:    char *fn = swiftField(dn, cn);",
          "259:    if (fn) {",
          "261:     rz_list_append(c->fields, f);",
          "262:     free(fn);",
          "263:    } else {",
          "",
          "[Removed Lines]",
          "260:     RzBinField *f = rz_bin_field_new(sym->paddr, sym->vaddr, sym->size, fn, NULL, NULL, false);",
          "",
          "[Added Lines]",
          "260:     RzBinClassField *f = rz_bin_class_field_new(sym->vaddr, sym->paddr, fn, sym->classname, NULL, NULL);",
          "",
          "---------------"
        ],
        "librz/bin/format/dex/dex.c||librz/bin/format/dex/dex.c": [
          "File: librz/bin/format/dex/dex.c -> librz/bin/format/dex/dex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: #define DEX_INVALID_CLASS  \"Lunknown_class;\"",
          "9: #define DEX_INVALID_METHOD \"unknown_method\"",
          "11: typedef struct dex_access_flags_readable_t {",
          "12:  ut32 flag;",
          "13:  const char *readable;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: #define startswith(a, b) (!strncmp(a, b, strlen(b)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "903:  return flags;",
          "904: }",
          "908:   return NULL;",
          "909:  }",
          "915:  return demangled;",
          "916: }",
          "918: static RzBinSymbol *dex_method_to_symbol(RzBinDex *dex, DexEncodedMethod *encoded_method, DexMethodId *method_id, bool is_imported) {",
          "919:  RzBinSymbol *symbol = RZ_NEW0(RzBinSymbol);",
          "920:  if (!symbol) {",
          "",
          "[Removed Lines]",
          "906: static char *dex_resolve_library(const char *library) {",
          "907:  if (!library || library[0] != 'L') {",
          "910:  char *demangled = strdup(library + 1);",
          "911:  rz_str_replace_ch(demangled, '/', '.', 1);",
          "912:  if (RZ_STR_ISNOTEMPTY(demangled)) {",
          "913:   demangled[strlen(demangled) - 1] = 0;",
          "914:  }",
          "",
          "[Added Lines]",
          "908: static char *demangle_java_and_free(char *mangled) {",
          "909:  if (!mangled) {",
          "912:  char *demangled = rz_demangler_java(mangled);",
          "913:  free(mangled);",
          "917: static void set_lib_and_class_name(char *mangled, char **out_class, char **out_lib) {",
          "918:  if (!mangled) {",
          "919:   return;",
          "920:  }",
          "921:  bool is_java_lang = startswith(mangled, \"Ljava/lang\");",
          "923:  char *object = demangle_java_and_free(mangled);",
          "924:  if (!object) {",
          "925:   return;",
          "926:  }",
          "929:  if (!is_java_lang || startswith(object, \"java.lang\")) {",
          "931:  } else {",
          "933:  }",
          "934: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "924:  bool varargs = dex_is_varargs(encoded_method->access_flags);",
          "925:  symbol->name = dex_resolve_string_id(dex, method_id->name_idx);",
          "929:  symbol->bind = dex_is_static(encoded_method->access_flags) ? RZ_BIN_BIND_GLOBAL_STR : RZ_BIN_BIND_LOCAL_STR;",
          "930:  symbol->is_imported = is_imported;",
          "931:  symbol->visibility = encoded_method->access_flags & UT32_MAX;",
          "",
          "[Removed Lines]",
          "926:  symbol->classname = dex_resolve_type_id(dex, method_id->class_idx);",
          "927:  symbol->libname = dex_resolve_library(symbol->classname);",
          "928:  symbol->dname = dex_resolve_proto_id(dex, symbol->name, method_id->proto_idx, varargs);",
          "",
          "[Added Lines]",
          "944:  char *mangled = dex_resolve_type_id(dex, method_id->class_idx);",
          "945:  set_lib_and_class_name(mangled, &symbol->classname, &symbol->libname);",
          "946:  symbol->dname = demangle_java_and_free(dex_resolve_proto_id(dex, symbol->name, method_id->proto_idx, varargs));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "992:  return methods;",
          "993: }",
          "997:  if (!field) {",
          "998:   return NULL;",
          "999:  }",
          "",
          "[Removed Lines]",
          "995: static RzBinField *dex_field_to_bin_field(RzBinDex *dex, DexEncodedField *encoded_field, DexFieldId *field_id, bool is_static) {",
          "996:  RzBinField *field = RZ_NEW0(RzBinField);",
          "",
          "[Added Lines]",
          "1013: static RzBinClassField *dex_field_to_bin_field(RzBinDex *dex, DexEncodedField *encoded_field, DexFieldId *field_id, bool is_static) {",
          "1014:  RzBinClassField *field = RZ_NEW0(RzBinClassField);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1007:  field->paddr = encoded_field->offset;",
          "1008:  field->visibility = encoded_field->access_flags & UT32_MAX;",
          "1009:  field->visibility_str = rz_bin_dex_access_flags_readable(access_flags);",
          "1010:  field->name = dex_resolve_string_id(dex, field_id->name_idx);",
          "1012:  field->flags = dex_access_flags_to_bin_flags(access_flags);",
          "1014:  return field;",
          "1015: }",
          "1019:  if (!fields) {",
          "1020:   return NULL;",
          "1021:  }",
          "",
          "[Removed Lines]",
          "1011:  field->type = dex_resolve_type_id(dex, field_id->type_idx);",
          "1017: static RzList /*<RzBinField *>*/ *dex_resolve_fields_in_class(RzBinDex *dex, DexClassDef *class_def, ut8 *inserted) {",
          "1018:  RzList *fields = rz_list_newf((RzListFree)rz_bin_field_free);",
          "",
          "[Added Lines]",
          "1028:  char *mangled = dex_resolve_type_id(dex, field_id->class_idx);",
          "1029:  set_lib_and_class_name(mangled, &field->classname, &field->libname);",
          "1031:  field->type = demangle_java_and_free(dex_resolve_type_id(dex, field_id->type_idx));",
          "1037: static RzList /*<RzBinClassField *>*/ *dex_resolve_fields_in_class(RzBinDex *dex, DexClassDef *class_def, ut8 *inserted) {",
          "1038:  RzList *fields = rz_list_newf((RzListFree)rz_bin_class_field_free);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1033:   inserted[encoded_field->field_idx] = true;",
          "1034:   field_id = (DexFieldId *)rz_pvector_at(dex->field_ids, encoded_field->field_idx);",
          "1037:   if (!field || !rz_list_append(fields, field)) {",
          "1039:    break;",
          "1040:   }",
          "1041:  }",
          "",
          "[Removed Lines]",
          "1036:   RzBinField *field = dex_field_to_bin_field(dex, encoded_field, field_id, true);",
          "1038:    rz_bin_field_free(field);",
          "",
          "[Added Lines]",
          "1056:   RzBinClassField *field = dex_field_to_bin_field(dex, encoded_field, field_id, true);",
          "1058:    rz_bin_class_field_free(field);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1050:   inserted[encoded_field->field_idx] = true;",
          "1051:   field_id = (DexFieldId *)rz_pvector_at(dex->field_ids, encoded_field->field_idx);",
          "1054:   if (!field || !rz_list_append(fields, field)) {",
          "1056:    break;",
          "1057:   }",
          "1058:  }",
          "",
          "[Removed Lines]",
          "1053:   RzBinField *field = dex_field_to_bin_field(dex, encoded_field, field_id, false);",
          "1055:    rz_bin_field_free(field);",
          "",
          "[Added Lines]",
          "1073:   RzBinClassField *field = dex_field_to_bin_field(dex, encoded_field, field_id, false);",
          "1075:    rz_bin_class_field_free(field);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1066:  }",
          "1068:  field->name = dex_resolve_string_id(dex, field_id->name_idx);",
          "1071:  field->bind = dex_is_static(encoded_field->access_flags) ? RZ_BIN_BIND_GLOBAL_STR : RZ_BIN_BIND_LOCAL_STR;",
          "1072:  field->is_imported = false;",
          "1073:  field->visibility = encoded_field->access_flags & UT32_MAX;",
          "",
          "[Removed Lines]",
          "1069:  field->classname = dex_resolve_type_id(dex, field_id->class_idx);",
          "1070:  field->libname = dex_resolve_library(field->classname);",
          "",
          "[Added Lines]",
          "1089:  char *mangled = dex_resolve_type_id(dex, field_id->class_idx);",
          "1090:  set_lib_and_class_name(mangled, &field->classname, &field->libname);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1122:  return fields;",
          "1123: }",
          "",
          "[Removed Lines]",
          "1125: static void free_rz_bin_class(RzBinClass *bclass) {",
          "1126:  if (!bclass) {",
          "1127:   return;",
          "1128:  }",
          "1129:  rz_list_free(bclass->methods);",
          "1130:  rz_list_free(bclass->fields);",
          "1131:  free(bclass->name);",
          "1132:  free(bclass->super);",
          "1133:  free(bclass->visibility_str);",
          "1134:  free(bclass);",
          "1135: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1156:   return NULL;",
          "1157:  }",
          "1160:  if (!classes) {",
          "1161:   free(inserted_fields);",
          "1162:   free(inserted_methods);",
          "",
          "[Removed Lines]",
          "1159:  classes = rz_list_newf((RzListFree)free_rz_bin_class);",
          "",
          "[Added Lines]",
          "1167:  classes = rz_list_newf((RzListFree)rz_bin_class_free);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1170:    break;",
          "1171:   }",
          "1175:   bclass->visibility = class_def->access_flags;",
          "1176:   bclass->visibility_str = rz_bin_dex_access_flags_readable(class_def->access_flags);",
          "1178:   bclass->addr = class_def->offset;",
          "1179:   bclass->methods = dex_resolve_methods_in_class(dex, class_def, inserted_methods);",
          "1180:   bclass->fields = dex_resolve_fields_in_class(dex, class_def, inserted_fields);",
          "1182:   if (!rz_list_append(classes, bclass)) {",
          "1184:    break;",
          "1185:   }",
          "1186:  }",
          "",
          "[Removed Lines]",
          "1173:   bclass->name = dex_resolve_type_id(dex, class_def->class_idx);",
          "1174:   bclass->super = dex_resolve_type_id(dex, class_def->superclass_idx);",
          "1177:   bclass->index = class_def->class_idx;",
          "1183:    free_rz_bin_class(bclass);",
          "",
          "[Added Lines]",
          "1181:   bclass->name = demangle_java_and_free(dex_resolve_type_id(dex, class_def->class_idx));",
          "1182:   bclass->super = demangle_java_and_free(dex_resolve_type_id(dex, class_def->superclass_idx));",
          "1190:    rz_bin_class_free(bclass);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1236: }",
          "1242:  rz_return_val_if_fail(dex, NULL);",
          "1244:  DexClassDef *class_def;",
          "",
          "[Removed Lines]",
          "1241: RZ_API RZ_OWN RzList /*<RzBinField *>*/ *rz_bin_dex_fields(RZ_NONNULL RzBinDex *dex) {",
          "",
          "[Added Lines]",
          "1248: RZ_API RZ_OWN RzList /*<RzBinClassField *>*/ *rz_bin_dex_fields(RZ_NONNULL RzBinDex *dex) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1251:   return NULL;",
          "1252:  }",
          "1255:  if (!fields) {",
          "1256:   free(inserted);",
          "1257:   return NULL;",
          "",
          "[Removed Lines]",
          "1254:  fields = rz_list_newf((RzListFree)rz_bin_field_free);",
          "",
          "[Added Lines]",
          "1261:  fields = rz_list_newf((RzListFree)rz_bin_class_field_free);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1331:   }",
          "1333:   field->name = dex_resolve_string_id(dex, field_id->name_idx);",
          "1336:   field->bind = RZ_BIN_BIND_WEAK_STR;",
          "1337:   field->type = RZ_BIN_TYPE_FIELD_STR;",
          "1338:   field->is_imported = true;",
          "",
          "[Removed Lines]",
          "1334:   field->classname = dex_resolve_type_id(dex, field_id->class_idx);",
          "1335:   field->libname = dex_resolve_library(field->classname);",
          "",
          "[Added Lines]",
          "1341:   char *mangled = dex_resolve_type_id(dex, field_id->class_idx);",
          "1342:   set_lib_and_class_name(mangled, &field->classname, &field->libname);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1356:   }",
          "1358:   method->name = dex_resolve_string_id(dex, method_id->name_idx);",
          "1362:   method->bind = RZ_BIN_BIND_WEAK_STR;",
          "1363:   method->is_imported = true;",
          "1364:   method->type = RZ_BIN_TYPE_METH_STR;",
          "",
          "[Removed Lines]",
          "1359:   method->classname = dex_resolve_type_id(dex, method_id->class_idx);",
          "1360:   method->libname = dex_resolve_library(method->classname);",
          "1361:   method->dname = dex_resolve_proto_id(dex, method->name, method_id->proto_idx, false);",
          "",
          "[Added Lines]",
          "1366:   char *mangled = dex_resolve_type_id(dex, method_id->class_idx);",
          "1367:   set_lib_and_class_name(mangled, &method->classname, &method->libname);",
          "1368:   method->dname = demangle_java_and_free(dex_resolve_proto_id(dex, method->name, method_id->proto_idx, false));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1437:    break;",
          "1438:   }",
          "1455:   import->name = dex_resolve_string_id(dex, field_id->name_idx);",
          "1458:   import->bind = RZ_BIN_BIND_WEAK_STR;",
          "1459:   import->type = RZ_BIN_TYPE_FIELD_STR;",
          "1460:   import->ordinal = ordinal;",
          "1463:   if (!rz_list_append(imports, import)) {",
          "1464:    rz_bin_import_free(import);",
          "",
          "[Removed Lines]",
          "1440:   char *object = dex_resolve_type_id(dex, field_id->class_idx);",
          "1441:   if (RZ_STR_ISEMPTY(object)) {",
          "1442:    free(object);",
          "1443:    free(import);",
          "1444:    break;",
          "1445:   }",
          "1446:   rz_str_replace_char(object, ';', 0);",
          "1448:   char *class_name = (char *)rz_str_rchr(object, NULL, '/');",
          "1449:   if (class_name) {",
          "1450:    class_name[0] = 0;",
          "1451:    class_name++;",
          "1452:   }",
          "1453:   rz_str_replace_ch(object, '/', '.', 1);",
          "1456:   import->libname = class_name ? strdup(object + 1) : NULL;",
          "1457:   import->classname = strdup(class_name ? class_name : object + 1);",
          "1461:   free(object);",
          "",
          "[Added Lines]",
          "1448:   char *mangled = dex_resolve_type_id(dex, field_id->class_idx);",
          "1449:   set_lib_and_class_name(mangled, &import->classname, &import->libname);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1485:    break;",
          "1486:   }",
          "1503:   char *name = dex_resolve_string_id(dex, method_id->name_idx);",
          "1504:   import->name = dex_resolve_proto_id(dex, name, method_id->proto_idx, false);",
          "1507:   import->bind = RZ_BIN_BIND_WEAK_STR;",
          "1508:   import->type = RZ_BIN_TYPE_FUNC_STR;",
          "1509:   import->ordinal = ordinal;",
          "1510:   free(name);",
          "1513:   if (!rz_list_append(imports, import)) {",
          "1514:    rz_bin_import_free(import);",
          "",
          "[Removed Lines]",
          "1488:   char *object = dex_resolve_type_id(dex, method_id->class_idx);",
          "1489:   if (RZ_STR_ISEMPTY(object)) {",
          "1490:    free(object);",
          "1491:    rz_bin_import_free(import);",
          "1492:    break;",
          "1493:   }",
          "1494:   rz_str_replace_char(object, ';', 0);",
          "1496:   char *class_name = (char *)rz_str_rchr(object, NULL, '/');",
          "1497:   if (class_name) {",
          "1498:    class_name[0] = 0;",
          "1499:    class_name++;",
          "1500:   }",
          "1501:   rz_str_replace_ch(object, '/', '.', 1);",
          "1505:   import->libname = class_name ? strdup(object + 1) : NULL;",
          "1506:   import->classname = strdup(class_name ? class_name : object + 1);",
          "1511:   free(object);",
          "",
          "[Added Lines]",
          "1481:   char *mangled = dex_resolve_type_id(dex, method_id->class_idx);",
          "1482:   set_lib_and_class_name(mangled, &import->classname, &import->libname);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1574:   }",
          "1576:   char *object = dex_resolve_type_id(dex, method_id->class_idx);",
          "1578:    free(object);",
          "1579:    continue;",
          "1580:   }",
          "",
          "[Removed Lines]",
          "1577:   if (RZ_STR_ISEMPTY(object) || *object != 'L' || !strncmp(object, \"Ljava/\", strlen(\"Ljava/\"))) {",
          "",
          "[Added Lines]",
          "1552:   if (RZ_STR_ISEMPTY(object) || *object != 'L' || startswith(object, \"Ljava/\")) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2028:  rz_return_val_if_fail(dex, NULL);",
          "2032:   return strdup(\"Android M3 release (Nov-Dec 2007)\");",
          "2034:   return strdup(\"Android M5 release (Feb-Mar 2008)\");",
          "2036:   return strdup(\"Android 3.2 (API level 13 and earlier)\");",
          "2038:   return strdup(\"Android 7 (API level 24 and earlier)\");",
          "2040:   return strdup(\"Android 8 (API level 26 and earlier)\");",
          "2042:   return strdup(\"Android 9 (API level 28 and earlier)\");",
          "2044:   return strdup(\"Android 10+ (Aug 2019)\");",
          "2045:  }",
          "2046:  return NULL;",
          "",
          "[Removed Lines]",
          "2031:  if (!strncmp((char *)dex->version, \"009\", 3)) {",
          "2033:  } else if (!strncmp((char *)dex->version, \"013\", 3)) {",
          "2035:  } else if (!strncmp((char *)dex->version, \"035\", 3)) {",
          "2037:  } else if (!strncmp((char *)dex->version, \"037\", 3)) {",
          "2039:  } else if (!strncmp((char *)dex->version, \"038\", 3)) {",
          "2041:  } else if (!strncmp((char *)dex->version, \"039\", 3)) {",
          "2043:  } else if (!strncmp((char *)dex->version, \"040\", 3)) {",
          "",
          "[Added Lines]",
          "2006:  if (startswith((char *)dex->version, \"009\")) {",
          "2008:  } else if (startswith((char *)dex->version, \"013\")) {",
          "2010:  } else if (startswith((char *)dex->version, \"035\")) {",
          "2012:  } else if (startswith((char *)dex->version, \"037\")) {",
          "2014:  } else if (startswith((char *)dex->version, \"038\")) {",
          "2016:  } else if (startswith((char *)dex->version, \"039\")) {",
          "2018:  } else if (startswith((char *)dex->version, \"040\")) {",
          "",
          "---------------"
        ],
        "librz/bin/format/dex/dex.h||librz/bin/format/dex/dex.h": [
          "File: librz/bin/format/dex/dex.h -> librz/bin/format/dex/dex.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "210: RZ_API RZ_OWN RzList /*<RzBinString *>*/ *rz_bin_dex_strings(RZ_NONNULL RzBinDex *dex);",
          "211: RZ_API RZ_OWN RzList /*<RzBinClass *>*/ *rz_bin_dex_classes(RZ_NONNULL RzBinDex *dex);",
          "213: RZ_API RZ_OWN RzList /*<RzBinSection *>*/ *rz_bin_dex_sections(RZ_NONNULL RzBinDex *dex);",
          "214: RZ_API RZ_OWN RzList /*<RzBinSymbol *>*/ *rz_bin_dex_symbols(RZ_NONNULL RzBinDex *dex);",
          "215: RZ_API RZ_OWN RzList /*<RzBinImport *>*/ *rz_bin_dex_imports(RZ_NONNULL RzBinDex *dex);",
          "",
          "[Removed Lines]",
          "212: RZ_API RZ_OWN RzList /*<RzBinField *>*/ *rz_bin_dex_fields(RZ_NONNULL RzBinDex *dex);",
          "",
          "[Added Lines]",
          "212: RZ_API RZ_OWN RzList /*<RzBinClassField *>*/ *rz_bin_dex_fields(RZ_NONNULL RzBinDex *dex);",
          "",
          "---------------"
        ],
        "librz/bin/format/javclass_bin.c||librz/bin/format/java/class_bin.c": [
          "File: librz/bin/format/javclass_bin.c -> librz/bin/format/java/class_bin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: #define startswith(a, b) (!strncmp(a, b, strlen(b)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "392:    if (string && startswith(string, \"kotlin/jvm\")) {",
          "395:    } else if (string && startswith(string, \"org/codehaus/groovy/runtime\")) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "477:  char *tmp = java_class_constant_pool_stringify_at(bin, index);",
          "478:  if (!tmp) {",
          "479:   return NULL;",
          "480:  }",
          "481:  char *class_name = rz_str_newf(\"L%s;\", tmp);",
          "482:  free(tmp);",
          "483:  return class_name;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "756:   if (strcmp(tmp, \"Ljava/lang/Object;\") != 0) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1058: static char *demangle_java_and_free(char *mangled) {",
          "1059:  if (!mangled) {",
          "1060:   return NULL;",
          "1061:  }",
          "1062:  if (startswith(mangled, \"unknown_\")) {",
          "1063:   return mangled;",
          "1064:  }",
          "1065:  char *demangled = rz_demangler_java(mangled);",
          "1066:  free(mangled);",
          "1067:  return demangled;",
          "1068: }",
          "1070: static void set_lib_and_class_name(char *mangled, char **out_class, char **out_lib) {",
          "1071:  if (!mangled) {",
          "1072:   return;",
          "1073:  }",
          "1074:  bool is_java_lang = startswith(mangled, \"Ljava/lang\");",
          "1076:  char *object = demangle_java_and_free(mangled);",
          "1077:  if (!object) {",
          "1078:   return;",
          "1079:  }",
          "1082:  if (is_java_lang && !startswith(object, \"java.lang\")) {",
          "1084:  } else {",
          "1086:  }",
          "1087: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1139:    set_lib_and_class_name(rz_bin_java_class_name(bin), &symbol->classname, &symbol->libname);",
          "1140:    symbol->dname = demangle_java_and_free(rz_str_newf(\"%s%s\", method_name, desc));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1298:    set_lib_and_class_name(rz_bin_java_class_name(bin), &symbol->classname, &symbol->libname);",
          "1300:    symbol->dname = rz_demangler_java(symbol->name);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1318: RZ_API RZ_OWN RzList /*<RzBinClassField *>*/ *rz_bin_java_class_fields_as_binfields(RZ_NONNULL RzBinJavaClass *bin) {",
          "1321:  RzList *list = rz_list_newf((RzListFree)rz_bin_class_field_free);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1344:    char *ftype = demangle_java_and_free(java_class_constant_pool_stringify_at(bin, field->descriptor_index));",
          "1345:    RzBinClassField *bf = rz_bin_class_field_new(field->offset, field->offset, name, NULL, NULL, ftype);",
          "1346:    free(ftype);",
          "1348:     set_lib_and_class_name(rz_bin_java_class_name(bin), &bf->classname, &bf->libname);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1527:    if (!classname) {",
          "1528:     classname = strdup(\"unknown_class\");",
          "1529:    }",
          "1531:    set_lib_and_class_name(rz_str_newf(\"L%s;\", classname), &symbol->classname, &symbol->libname);",
          "1538:    symbol->dname = demangle_java_and_free(symbol->dname);",
          "1540:    symbol->type = !strcmp(method_name, \"main\") ? RZ_BIN_TYPE_FUNC_STR : import_type(cpool);",
          "1544:    free(classname);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1596:     free(object);",
          "1600:    set_lib_and_class_name(rz_str_newf(\"L%s;\", object), &import->classname, &import->libname);",
          "1608:    free(object);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1624:    char *object = java_class_constant_pool_stringify_at(bin, class_index);",
          "1625:    if (!object) {",
          "1626:     continue;",
          "1627:    }",
          "1629:    RzBinImport *import = RZ_NEW0(RzBinImport);",
          "1630:    if (!import) {",
          "1631:     rz_warn_if_reached();",
          "1632:     free(object);",
          "1633:     continue;",
          "1634:    }",
          "1636:    set_lib_and_class_name(rz_str_newf(\"L%s;\", object), &import->classname, &import->libname);",
          "1642:    free(object);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2007: RZ_API RZ_OWN RzList /*<RzBinClass *>*/ *rz_bin_java_class_as_classes(RZ_NONNULL RzBinJavaClass *bin) {",
          "2008:  rz_return_val_if_fail(bin, NULL);",
          "2010:  RzBinClass *bclass = NULL;",
          "2011:  RzList *list = rz_list_newf((RzListFree)rz_bin_class_free);",
          "2012:  if (!list) {",
          "2013:   return NULL;",
          "2014:  }",
          "2016:  bclass = RZ_NEW0(RzBinClass);",
          "2017:  if (!bclass) {",
          "2018:   rz_list_free(list);",
          "2019:   return NULL;",
          "2020:  }",
          "2021:  rz_list_append(list, bclass);",
          "2023:  bclass->name = demangle_java_and_free(rz_bin_java_class_name(bin));",
          "2024:  bclass->super = demangle_java_and_free(rz_bin_java_class_super(bin));",
          "2025:  bclass->visibility = rz_bin_java_class_access_flags(bin);",
          "2026:  bclass->visibility_str = rz_bin_java_class_access_flags_readable(bin, ACCESS_FLAG_MASK_ALL_NO_SUPER);",
          "2028:  bclass->methods = rz_bin_java_class_methods_as_symbols(bin);",
          "2029:  bclass->fields = rz_bin_java_class_fields_as_binfields(bin);",
          "2030:  if (!bclass->methods || !bclass->fields) {",
          "2031:   rz_list_free(list);",
          "2032:   return NULL;",
          "2033:  }",
          "2035:  return list;",
          "2036: }",
          "",
          "---------------"
        ],
        "librz/bin/format/javclass_bin.h||librz/bin/format/java/class_bin.h": [
          "File: librz/bin/format/javclass_bin.h -> librz/bin/format/java/class_bin.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90: RZ_API RZ_OWN RzList /*<RzBinClassField *>*/ *rz_bin_java_class_fields_as_binfields(RZ_NONNULL RzBinJavaClass *bin);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: RZ_API RZ_OWN RzList /*<RzBinClass *>*/ *rz_bin_java_class_as_classes(RZ_NONNULL RzBinJavaClass *bin);",
          "",
          "---------------"
        ],
        "librz/bin/format/objc/mach0_classes.c||librz/bin/format/objc/mach0_classes.c": [
          "File: librz/bin/format/objc/mach0_classes.c -> librz/bin/format/objc/mach0_classes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "190: }",
          "192: static int sort_by_offset(const void *_a, const void *_b) {",
          "196: }",
          "198: static bool read_sivarlist(struct MACH0_(SIVarList) * il, RzBuffer *buf, ut64 base, bool bigendian) {",
          "",
          "[Removed Lines]",
          "193:  RzBinField *a = (RzBinField *)_a;",
          "194:  RzBinField *b = (RzBinField *)_b;",
          "195:  return a->offset - b->offset;",
          "",
          "[Added Lines]",
          "193:  RzBinClassField *a = (RzBinClassField *)_a;",
          "194:  RzBinClassField *b = (RzBinClassField *)_b;",
          "195:  return a->paddr - b->paddr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:  int len;",
          "220:  bool bigendian;",
          "221:  mach0_ut ivar_offset;",
          "223:  ut8 offs[sizeof(mach0_ut)] = { 0 };",
          "225:  if (!bf || !bf->o || !bf->o->bin_obj || !bf->o->info) {",
          "",
          "[Removed Lines]",
          "222:  RzBinField *field = NULL;",
          "",
          "[Added Lines]",
          "222:  RzBinClassField *field = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "250:   if (!r) {",
          "251:    return;",
          "252:   }",
          "254:   memset(&i, '\\0', sizeof(struct MACH0_(SIVar)));",
          "255:   if (r + left < r || r + sizeof(struct MACH0_(SIVar)) < r) {",
          "256:    goto error;",
          "",
          "[Removed Lines]",
          "253:   field = RZ_NEW0(RzBinField);",
          "",
          "[Added Lines]",
          "253:   field = rz_bin_class_field_new(UT64_MAX, UT64_MAX, NULL, klass->name, NULL, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "280:     goto error;",
          "281:    }",
          "282:    ivar_offset = rz_read_ble(offs, bigendian, 8 * sizeof(mach0_ut));",
          "284:   }",
          "285:   r = va2pa(i.name, NULL, &left, bf);",
          "286:   if (r) {",
          "",
          "[Removed Lines]",
          "283:    field->offset = ivar_offset;",
          "",
          "[Added Lines]",
          "283:    field->paddr = ivar_offset;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "307:     name[name_len] = 0;",
          "308:    }",
          "311:    RZ_FREE(name);",
          "312:   }",
          "",
          "[Removed Lines]",
          "310:    field->name = rz_str_newf(\"%s::%s%s\", klass->name, \"(ivar)\", name);",
          "",
          "[Added Lines]",
          "310:    field->name = rz_str_newf(\"%s::(ivar)%s\", klass->name, name);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "349:  if (!rz_list_empty(klass->fields)) {",
          "350:   rz_list_sort(klass->fields, sort_by_offset);",
          "351:  }",
          "359:  return;",
          "360: error:",
          "362: }",
          "",
          "[Removed Lines]",
          "352:  RzBinField *isa_field = RZ_NEW0(RzBinField);",
          "353:  isa_field->name = strdup(\"isa\");",
          "354:  isa_field->size = sizeof(mach0_ut);",
          "355:  isa_field->type = strdup(\"struct objc_class *\");",
          "356:  isa_field->vaddr = 0;",
          "357:  isa_field->offset = 0;",
          "358:  rz_list_prepend(klass->fields, isa_field);",
          "361:  rz_bin_field_free(field);",
          "",
          "[Added Lines]",
          "352:  field = rz_bin_class_field_new(UT64_MAX, UT64_MAX, \"isa\", klass->name, NULL, \"struct objc_class *\");",
          "353:  rz_list_prepend(klass->fields, field);",
          "356:  rz_bin_class_field_free(field);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "370:  char *name = NULL;",
          "371:  int len;",
          "372:  bool bigendian;",
          "374:  ut8 sopl[sizeof(struct MACH0_(SObjcPropertyList))] = { 0 };",
          "375:  ut8 sop[sizeof(struct MACH0_(SObjcProperty))] = { 0 };",
          "",
          "[Removed Lines]",
          "373:  RzBinField *property = NULL;",
          "",
          "[Added Lines]",
          "368:  RzBinClassField *property = NULL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "415:    return;",
          "416:   }",
          "419:    return;",
          "420:   }",
          "",
          "[Removed Lines]",
          "418:   if (!(property = RZ_NEW0(RzBinField))) {",
          "",
          "[Added Lines]",
          "413:   if (!(property = rz_bin_class_field_new(UT64_MAX, UT64_MAX, NULL, klass->name, NULL, NULL))) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "465:      goto error;",
          "466:     }",
          "467:    }",
          "470:    RZ_FREE(name);",
          "471:   }",
          "472: #if 0",
          "",
          "[Removed Lines]",
          "468:    property->name = rz_str_newf(\"%s::%s%s\", klass->name,",
          "469:     \"(property)\", name);",
          "",
          "[Added Lines]",
          "463:    property->name = rz_str_newf(\"%s::(property)%s\", klass->name, name);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "836:     }",
          "837:     name[name_len] = 0;",
          "838:    }",
          "840:    RZ_FREE(name);",
          "841:   }",
          "",
          "[Removed Lines]",
          "839:    class_name = rz_str_newf(\"%s::%s%s\", klass->name, \"(protocol)\", name);",
          "",
          "[Added Lines]",
          "833:    class_name = rz_str_newf(\"%s::(protocol)%s\", klass->name, name);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1305:    goto get_classes_error;",
          "1306:   }",
          "1310:    goto get_classes_error;",
          "1311:   }",
          "1315:    goto get_classes_error;",
          "",
          "[Removed Lines]",
          "1307:   if (!(klass->methods = rz_list_new())) {",
          "1312:   if (!(klass->fields = rz_list_new())) {",
          "",
          "[Added Lines]",
          "1301:   if (!(klass->methods = rz_list_newf((RzListFree)rz_bin_symbol_free))) {",
          "1306:   if (!(klass->fields = rz_list_newf((RzListFree)rz_bin_class_field_free))) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1396:   if (!(klass = RZ_NEW0(RzBinClass))) {",
          "1397:    goto error;",
          "1398:   }",
          "1400:    RZ_FREE(klass);",
          "1401:    goto error;",
          "1402:   }",
          "1404:    RZ_FREE(klass);",
          "1405:    goto error;",
          "1406:   }",
          "",
          "[Removed Lines]",
          "1399:   if (!(klass->methods = rz_list_new())) {",
          "1403:   if (!(klass->fields = rz_list_new())) {",
          "",
          "[Added Lines]",
          "1393:   if (!(klass->methods = rz_list_newf((RzListFree)rz_bin_symbol_free))) {",
          "1397:   if (!(klass->fields = rz_list_newf((RzListFree)rz_bin_class_field_free))) {",
          "",
          "---------------"
        ],
        "librz/bin/i/private.h||librz/bin/i/private.h": [
          "File: librz/bin/i/private.h -> librz/bin/i/private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: RZ_IPI RzBinObject *rz_bin_object_get_cur(RzBin *bin);",
          "28: RZ_IPI RzBinObject *rz_bin_object_find_by_arch_bits(RzBinFile *binfile, const char *arch, int bits, const char *name);",
          "31: RZ_IPI RzBinSymbol *rz_bin_class_add_method(RzBinFile *binfile, const char *classname, const char *name, int nargs);",
          "32: RZ_IPI void rz_bin_class_add_field(RzBinFile *binfile, const char *classname, const char *name);",
          "",
          "[Removed Lines]",
          "30: RZ_IPI void rz_bin_class_free(RzBinClass *c);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "librz/bin/p/bin_dex.c||librz/bin/p/bin_dex.c": [
          "File: librz/bin/p/bin_dex.c -> librz/bin/p/bin_dex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:  return rz_bin_dex_symbols(dex);",
          "105: }",
          "116: static RzList /*<char *>*/ *libraries(RzBinFile *bf) {",
          "117:  RzBinDex *dex = rz_bin_file_get_dex(bf);",
          "118:  if (!dex) {",
          "",
          "[Removed Lines]",
          "107: static RzList /*<RzBinField *>*/ *fields(RzBinFile *bf) {",
          "108:  RzBinDex *dex = rz_bin_file_get_dex(bf);",
          "109:  if (!dex) {",
          "110:   return NULL;",
          "111:  }",
          "113:  return rz_bin_dex_fields(dex);",
          "114: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "257:  .get_name = &get_name,",
          "258:  .get_offset = &get_offset,",
          "259:  .info = &info,",
          "261:  .libs = libraries,",
          "262:  .classes = classes,",
          "263:  .demangle_type = demangle_type,",
          "",
          "[Removed Lines]",
          "260:  .fields = fields,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "librz/bin/p/bin_java.c||librz/bin/p/bin_java.c": [
          "File: librz/bin/p/bin_java.c -> librz/bin/p/bin_java.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:  return bf->sdb;",
          "67: }",
          "81: static RzList /*<RzBinClass *>*/ *classes(RzBinFile *bf) {",
          "84:  RzBinJavaClass *jclass = rz_bin_file_get_java_class(bf);",
          "85:  if (!jclass) {",
          "86:   return NULL;",
          "87:  }",
          "114: }",
          "116: static RzList /*<RzBinImport *>*/ *imports(RzBinFile *bf) {",
          "",
          "[Removed Lines]",
          "69: static void free_rz_bin_class(void /*RzBinClass*/ *k) {",
          "70:  RzBinClass *bclass = (RzBinClass *)k;",
          "71:  if (bclass) {",
          "72:   rz_list_free(bclass->methods);",
          "73:   rz_list_free(bclass->fields);",
          "74:   free(bclass->name);",
          "75:   free(bclass->super);",
          "76:   free(bclass->visibility_str);",
          "77:   free(bclass);",
          "78:  }",
          "79: }",
          "82:  RzBinClass *bclass = NULL;",
          "83:  RzList *classes = NULL;",
          "89:  classes = rz_list_newf(free_rz_bin_class);",
          "90:  if (!classes) {",
          "91:   return NULL;",
          "92:  }",
          "94:  bclass = RZ_NEW0(RzBinClass);",
          "95:  if (!bclass) {",
          "96:   rz_list_free(classes);",
          "97:   return NULL;",
          "98:  }",
          "99:  rz_list_append(classes, bclass);",
          "101:  bclass->name = rz_bin_java_class_name(jclass);",
          "102:  bclass->super = rz_bin_java_class_super(jclass);",
          "103:  bclass->visibility = rz_bin_java_class_access_flags(jclass);",
          "104:  bclass->visibility_str = rz_bin_java_class_access_flags_readable(jclass, ACCESS_FLAG_MASK_ALL_NO_SUPER);",
          "106:  bclass->methods = rz_bin_java_class_methods_as_symbols(jclass);",
          "107:  bclass->fields = rz_bin_java_class_fields_as_binfields(jclass);",
          "108:  if (!bclass->methods || !bclass->fields) {",
          "109:   rz_list_free(classes);",
          "110:   return NULL;",
          "111:  }",
          "113:  return classes;",
          "",
          "[Added Lines]",
          "76:  return rz_bin_java_class_as_classes(jclass);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:  return list;",
          "154: }",
          "165: static RzList /*<char *>*/ *libs(RzBinFile *bf) {",
          "166:  RzBinJavaClass *jclass = rz_bin_file_get_java_class(bf);",
          "167:  if (!jclass) {",
          "",
          "[Removed Lines]",
          "156: static RzList /*<RzBinField *>*/ *fields(RzBinFile *bf) {",
          "157:  RzBinJavaClass *jclass = rz_bin_file_get_java_class(bf);",
          "158:  if (!jclass) {",
          "159:   return NULL;",
          "160:  }",
          "162:  return rz_bin_java_class_fields_as_binfields(jclass);",
          "163: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "241:  .entries = &entrypoints,",
          "242:  .maps = &rz_bin_maps_of_file_sections,",
          "243:  .sections = sections,",
          "245:  .imports = &imports,",
          "246:  .strings = &strings,",
          "247:  .enrich_asm = &enrich_asm,",
          "248:  .info = &info,",
          "250:  .libs = libs,",
          "251:  .classes = classes,",
          "252:  .demangle_type = demangle_type,",
          "",
          "[Removed Lines]",
          "244:  .symbols = symbols,",
          "249:  .fields = fields,",
          "",
          "[Added Lines]",
          "198:  .symbols = &symbols,",
          "",
          "---------------"
        ],
        "librz/core/cbin.c||librz/core/cbin.c": [
          "File: librz/core/cbin.c -> librz/core/cbin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3487: static void classdump_c(RzCore *r, RzBinClass *c) {",
          "3488:  rz_cons_printf(\"typedef struct class_%s {\\n\", c->name);",
          "3489:  RzListIter *iter2;",
          "3491:  rz_list_foreach (c->fields, iter2, f) {",
          "3492:   if (f->type && f->name) {",
          "3493:    char *n = objc_name_toc(f->name);",
          "3494:    char *t = objc_type_toc(f->type);",
          "3496:    free(t);",
          "3497:    free(n);",
          "3498:   }",
          "",
          "[Removed Lines]",
          "3490:  RzBinField *f;",
          "3495:    rz_cons_printf(\"    %s %s; // %d\\n\", t, n, f->offset);",
          "",
          "[Added Lines]",
          "3490:  RzBinClassField *f;",
          "3495:    rz_cons_printf(\"    %s %s;\\n\", t, n);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3507:   rz_cons_printf(\"@interface %s\\n{\\n\", c->name);",
          "3508:  }",
          "3509:  RzListIter *iter2, *iter3;",
          "3511:  RzBinSymbol *sym;",
          "3512:  rz_list_foreach (c->fields, iter2, f) {",
          "3513:   if (f->name && rz_regex_match(\"ivar\", \"e\", f->name)) {",
          "",
          "[Removed Lines]",
          "3510:  RzBinField *f;",
          "",
          "[Added Lines]",
          "3510:  RzBinClassField *f;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3541: #define CXX_BIN_VISIBILITY_FLAGS (RZ_BIN_METH_PUBLIC | RZ_BIN_METH_PRIVATE | RZ_BIN_METH_PROTECTED)",
          "3542: static void classdump_cpp(RzCore *r, RzBinClass *c) {",
          "3543:  RzListIter *iter;",
          "3545:  RzBinSymbol *sym;",
          "3546:  ut64 used = UT64_MAX;",
          "3547:  bool has_methods = false;",
          "",
          "[Removed Lines]",
          "3544:  RzBinField *f;",
          "",
          "[Added Lines]",
          "3544:  RzBinClassField *f;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3622:    if (f->visibility & RZ_BIN_METH_CONST) {",
          "3623:     rz_cons_print(\"const \");",
          "3624:    }",
          "3626:   }",
          "3627:  }",
          "3628:  rz_cons_printf(\"}\\n\");",
          "3629: }",
          "3630: #undef CXX_BIN_VISIBILITY_FLAGS",
          "3645: static inline char *demangle_type(const char *any) {",
          "3646:  if (!any) {",
          "3647:   return strdup(\"unknown\");",
          "",
          "[Removed Lines]",
          "3625:    rz_cons_printf(\"%s %s;\\n\", f->type, f->name);",
          "3632: static inline char *demangle_class(const char *classname) {",
          "3633:  if (!classname || classname[0] != 'L') {",
          "3634:   return strdup(classname ? classname : \"?\");",
          "3635:  }",
          "3636:  char *demangled = strdup(classname + 1);",
          "3637:  if (!demangled) {",
          "3638:   return strdup(classname);",
          "3639:  }",
          "3640:  rz_str_replace_ch(demangled, '/', '.', 1);",
          "3641:  demangled[strlen(demangled) - 1] = 0;",
          "3642:  return demangled;",
          "3643: }",
          "",
          "[Added Lines]",
          "3625:    const char *ftype = f->type ? f->type : \"unknown_t\";",
          "3626:    rz_cons_printf(\"%s %s;\\n\", ftype, f->name);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3666: }",
          "3668: static void classdump_java(RzCore *r, RzBinClass *c) {",
          "3670:  RzListIter *iter2, *iter3;",
          "3671:  RzBinSymbol *sym;",
          "3672:  bool simplify = false;",
          "3673:  char *package = NULL, *classname = NULL;",
          "3675:  if (tmp) {",
          "3677:   classname = strdup(tmp + 1);",
          "3678:   classname[strlen(classname) - 1] = 0;",
          "3679:   simplify = true;",
          "3680:  } else {",
          "3681:   package = strdup(\"defpackage\");",
          "3683:  }",
          "3685:  rz_cons_printf(\"package %s;\\n\\n\", package);",
          "",
          "[Removed Lines]",
          "3669:  RzBinField *f;",
          "3674:  char *tmp = (char *)rz_str_rchr(c->name, NULL, '/');",
          "3676:   package = demangle_class(c->name);",
          "3682:   classname = demangle_class(c->name);",
          "",
          "[Added Lines]",
          "3657:  RzBinClassField *f;",
          "3662:  char *tmp = (char *)rz_str_rchr(c->name, NULL, '.');",
          "3664:   package = strdup(c->name);",
          "3670:   classname = strdup(c->name);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3725: static void bin_class_print_rizin(RzCore *r, RzBinClass *c, ut64 at_min) {",
          "3726:  RzListIter *iter2;",
          "3727:  RzBinFile *bf = rz_bin_cur(r->bin);",
          "3729:  RzBinSymbol *sym;",
          "",
          "[Removed Lines]",
          "3728:  RzBinField *f;",
          "",
          "[Added Lines]",
          "3716:  RzBinClassField *f;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3821:  RzListIter *iter, *iter2;",
          "3822:  RzBinClass *c;",
          "3824:  int m = 0;",
          "3826:  const RzList *cs = rz_bin_object_get_classes(bf->o);",
          "",
          "[Removed Lines]",
          "3823:  RzBinField *f;",
          "",
          "[Added Lines]",
          "3811:  RzBinClassField *f;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3946:  RzListIter *iter, *iter2, *iter3;",
          "3947:  RzBinSymbol *sym;",
          "3948:  RzBinClass *c;",
          "3951:  const RzList *cs = rz_bin_object_get_classes(bf->o);",
          "3952:  if (!cs) {",
          "",
          "[Removed Lines]",
          "3949:  RzBinField *f;",
          "",
          "[Added Lines]",
          "3937:  RzBinClassField *f;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4715:  rz_return_val_if_fail(cls && field, NULL);",
          "4716:  if (!cls->name || !field->name) {",
          "4717:   return NULL;",
          "",
          "[Removed Lines]",
          "4714: RZ_API RZ_OWN char *rz_core_bin_field_build_flag_name(RZ_NONNULL RzBinClass *cls, RZ_NONNULL RzBinField *field) {",
          "",
          "[Added Lines]",
          "4702: RZ_API RZ_OWN char *rz_core_bin_field_build_flag_name(RZ_NONNULL RzBinClass *cls, RZ_NONNULL RzBinClassField *field) {",
          "",
          "---------------"
        ],
        "librz/core/tui/classes.c||librz/core/tui/classes.c": [
          "File: librz/core/tui/classes.c -> librz/core/tui/classes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:  RzListIter *iter;",
          "22:  RzBinClass *c, *cur = NULL;",
          "23:  RzBinSymbol *m, *mur = NULL;",
          "25:  int i = 0;",
          "26:  int skip = *idx - 10;",
          "27:  bool found = false;",
          "",
          "[Removed Lines]",
          "24:  RzBinField *f, *fur = NULL;",
          "",
          "[Added Lines]",
          "24:  RzBinClassField *f, *fur = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:  int mode = 'c';",
          "196:  RzBinClass *cur = NULL;",
          "197:  RzBinSymbol *mur = NULL;",
          "199:  void *ptr;",
          "200:  int oldcur = 0;",
          "201:  char *grep = NULL;",
          "",
          "[Removed Lines]",
          "198:  RzBinField *fur = NULL;",
          "",
          "[Added Lines]",
          "198:  RzBinClassField *fur = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "214:   ptr = show_class(core, mode, &index, cur, grep, list);",
          "215:   switch (mode) {",
          "216:   case 'f':",
          "218:    break;",
          "219:   case 'm':",
          "220:    mur = (RzBinSymbol *)ptr;",
          "",
          "[Removed Lines]",
          "217:    fur = (RzBinField *)ptr;",
          "",
          "[Added Lines]",
          "217:    fur = (RzBinClassField *)ptr;",
          "",
          "---------------"
        ],
        "librz/core/tui/hud.c||librz/core/tui/hud.c": [
          "File: librz/core/tui/hud.c -> librz/core/tui/hud.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: RZ_IPI bool rz_core_visual_hudclasses(RzCore *core) {",
          "60:  RzListIter *iter, *iter2;",
          "61:  RzBinClass *c;",
          "63:  RzBinSymbol *m;",
          "64:  ut64 addr;",
          "65:  char *res;",
          "",
          "[Removed Lines]",
          "62:  RzBinField *f;",
          "",
          "[Added Lines]",
          "62:  RzBinClassField *f;",
          "",
          "---------------"
        ],
        "librz/include/rz_bin.h||librz/include/rz_bin.h": [
          "File: librz/include/rz_bin.h -> librz/include/rz_bin.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "653:  int index;",
          "654:  ut64 addr;",
          "655:  RzList /*<RzBinSymbol *>*/ *methods;",
          "658:  int visibility;",
          "659: } RzBinClass;",
          "",
          "[Removed Lines]",
          "656:  RzList /*<RzBinField *>*/ *fields;",
          "",
          "[Added Lines]",
          "656:  RzList /*<RzBinClassField *>*/ *fields;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "765:  ut64 paddr;",
          "766:  int size;",
          "767:  int offset;",
          "769:  char *name;",
          "770:  char *type;",
          "772:  char *comment;",
          "773:  char *format;",
          "774:  bool format_named; // whether format is the name of a format or a raw pf format string",
          "775:  ut64 flags;",
          "776: } RzBinField;",
          "781: typedef struct rz_bin_mem_t {",
          "782:  char *name;",
          "",
          "[Removed Lines]",
          "768:  ut32 visibility;",
          "771:  char *visibility_str;",
          "778: RZ_API RzBinField *rz_bin_field_new(ut64 paddr, ut64 vaddr, int size, const char *name, const char *comment, const char *format, bool format_named);",
          "779: RZ_API void rz_bin_field_free(RzBinField *field);",
          "",
          "[Added Lines]",
          "776: typedef struct rz_bin_class_field_t {",
          "777:  ut64 vaddr;",
          "778:  ut64 paddr;",
          "779:  char *name;",
          "780:  char *classname;",
          "781:  char *libname;",
          "782:  char *type;",
          "783:  ut32 visibility;",
          "784:  char *visibility_str;",
          "785:  ut64 flags;",
          "786: } RzBinClassField;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "815:  ut32 visibility;",
          "816: } RzBinBind;",
          "818: RZ_API void rz_bin_virtual_file_free(RzBinVirtualFile *vfile);",
          "819: RZ_API void rz_bin_map_free(RzBinMap *map);",
          "820: RZ_API bool rz_bin_map_is_data(RZ_NONNULL const RzBinMap *map);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "825: RZ_API RzBinField *rz_bin_field_new(ut64 paddr, ut64 vaddr, int size, const char *name, const char *comment, const char *format, bool format_named);",
          "826: RZ_API void rz_bin_field_free(RzBinField *field);",
          "827: RZ_API RzBinClassField *rz_bin_class_field_new(ut64 vaddr, ut64 paddr, const char *name, const char *classname, const char *libname, const char *type);",
          "828: RZ_API void rz_bin_class_field_free(RzBinClassField *field);",
          "829: RZ_API void rz_bin_class_free(RzBinClass *k);",
          "",
          "---------------"
        ],
        "librz/include/rz_core.h||librz/include/rz_core.h": [
          "File: librz/include/rz_core.h -> librz/include/rz_core.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "976: RZ_API RZ_OWN char *rz_core_bin_class_build_flag_name(RZ_NONNULL RzBinClass *cls);",
          "977: RZ_API RZ_OWN char *rz_core_bin_super_build_flag_name(RZ_NONNULL RzBinClass *cls);",
          "978: RZ_API RZ_OWN char *rz_core_bin_method_build_flag_name(RZ_NONNULL RzBinClass *cls, RZ_NONNULL RzBinSymbol *meth);",
          "980: RZ_API char *rz_core_bin_method_flags_str(ut64 flags, int mode);",
          "981: RZ_API RZ_OWN char *rz_core_bin_pdb_get_filename(RZ_NONNULL RzCore *core);",
          "982: RZ_API bool rz_core_bin_pdb_load(RZ_NONNULL RzCore *core, RZ_NONNULL const char *filename);",
          "",
          "[Removed Lines]",
          "979: RZ_API RZ_OWN char *rz_core_bin_field_build_flag_name(RZ_NONNULL RzBinClass *cls, RZ_NONNULL RzBinField *field);",
          "",
          "[Added Lines]",
          "979: RZ_API RZ_OWN char *rz_core_bin_field_build_flag_name(RZ_NONNULL RzBinClass *cls, RZ_NONNULL RzBinClassField *field);",
          "",
          "---------------"
        ],
        "librz/main/rz-diff.c||librz/main/rz-diff.c": [
          "File: librz/main/rz-diff.c -> librz/main/rz-diff.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "762: static ut32 symbol_hash_addr(const RzBinSymbol *elem) {",
          "767:  hash ^= (ut32)(elem->vaddr >> 32);",
          "768:  hash ^= (ut32)elem->vaddr;",
          "769:  hash ^= (ut32)(elem->paddr >> 32);",
          "",
          "[Removed Lines]",
          "763:  ut32 hash = rz_diff_hash_data((const ut8 *)elem->name, strlen(elem->name));",
          "764:  hash ^= rz_diff_hash_data((const ut8 *)elem->dname, strlen(elem->dname));",
          "765:  hash ^= rz_diff_hash_data((const ut8 *)elem->libname, strlen(elem->libname));",
          "766:  hash ^= rz_diff_hash_data((const ut8 *)elem->classname, strlen(elem->classname));",
          "",
          "[Added Lines]",
          "763:  ut32 hash = rz_diff_hash_data((const ut8 *)elem->name, elem->name ? strlen(elem->name) : 0);",
          "764:  hash ^= rz_diff_hash_data((const ut8 *)elem->dname, elem->dname ? strlen(elem->dname) : 0);",
          "765:  hash ^= rz_diff_hash_data((const ut8 *)elem->libname, elem->libname ? strlen(elem->libname) : 0);",
          "766:  hash ^= rz_diff_hash_data((const ut8 *)elem->classname, elem->classname ? strlen(elem->classname) : 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f2eb45b8405d227454a3e1fc6a788fcdf101ff9",
      "candidate_info": {
        "commit_hash": "8f2eb45b8405d227454a3e1fc6a788fcdf101ff9",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/8f2eb45b8405d227454a3e1fc6a788fcdf101ff9",
        "files": [
          "librz/bin/bin_demangle.c",
          "librz/bin/bobj_process.c",
          "librz/bin/bobj_process_import.c",
          "librz/bin/bobj_process_reloc.c",
          "librz/bin/bobj_process_symbol.c",
          "librz/bin/format/dex/dex.c",
          "librz/bin/format/java/class_bin.c",
          "librz/bin/i/private.h",
          "librz/core/cbin.c",
          "librz/core/cconfig.c",
          "librz/core/cmd/cmd_info.c",
          "librz/core/cpdb.c",
          "librz/core/p/core_java.c",
          "librz/demangler/demangler.c",
          "librz/include/rz_bin.h",
          "librz/include/rz_demangler.h",
          "librz/main/rz-bin.c",
          "subprojects/libdemangle.wrap",
          "test/db/analysis/java",
          "test/db/formats/demangling_bin",
          "test/db/formats/dex"
        ],
        "message": "Add `bin.demangle.flags` to allow users to simplify or not mangled strings (#3659)",
        "before_after_code_files": [
          "librz/bin/bin_demangle.c||librz/bin/bin_demangle.c",
          "librz/bin/bobj_process.c||librz/bin/bobj_process.c",
          "librz/bin/bobj_process_import.c||librz/bin/bobj_process_import.c",
          "librz/bin/bobj_process_reloc.c||librz/bin/bobj_process_reloc.c",
          "librz/bin/bobj_process_symbol.c||librz/bin/bobj_process_symbol.c",
          "librz/bin/format/dex/dex.c||librz/bin/format/dex/dex.c",
          "librz/bin/format/javclass_bin.c||librz/bin/format/java/class_bin.c",
          "librz/bin/i/private.h||librz/bin/i/private.h",
          "librz/core/cbin.c||librz/core/cbin.c",
          "librz/core/cconfig.c||librz/core/cconfig.c",
          "librz/core/cmd/cmd_info.c||librz/core/cmd/cmd_info.c",
          "librz/core/cpdb.c||librz/core/cpdb.c",
          "librz/core/p/core_java.c||librz/core/p/core_java.c",
          "librz/demangler/demangler.c||librz/demangler/demangler.c",
          "librz/include/rz_bin.h||librz/include/rz_bin.h",
          "librz/include/rz_demangler.h||librz/include/rz_demangler.h",
          "librz/main/rz-bin.c||librz/main/rz-bin.c",
          "subprojects/libdemangle.wrap||subprojects/libdemangle.wrap"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "librz/bin/format/dex/dex.c||librz/bin/format/dex/dex.c"
          ],
          "candidate": [
            "librz/bin/format/dex/dex.c||librz/bin/format/dex/dex.c"
          ]
        }
      },
      "candidate_diff": {
        "librz/bin/bin_demangle.c||librz/bin/bin_demangle.c": [
          "File: librz/bin/bin_demangle.c -> librz/bin/bin_demangle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #undef skip_prefix_s",
          "33: #undef skip_prefix_n",
          "37:   return false;",
          "38:  }",
          "",
          "[Removed Lines]",
          "35: RZ_IPI bool rz_bin_demangle_symbol(RzBinSymbol *bsym, const RzDemanglerPlugin *plugin) {",
          "36:  if (!plugin || bsym->dname) {",
          "",
          "[Added Lines]",
          "35: RZ_IPI bool rz_bin_demangle_symbol(RzBinSymbol *bsym, const RzDemanglerPlugin *plugin, RzDemanglerFlag flags, bool force) {",
          "36:  if (!plugin || (bsym->dname && !force)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:   return false;",
          "43:  }",
          "46:  return bsym->dname != NULL;",
          "47: }",
          "51:   return false;",
          "52:  }",
          "",
          "[Removed Lines]",
          "45:  bsym->dname = plugin->demangle(mangled);",
          "49: RZ_IPI bool rz_bin_demangle_import(RzBinImport *import, const RzDemanglerPlugin *plugin) {",
          "50:  if (!plugin) {",
          "",
          "[Added Lines]",
          "45:  free(bsym->dname);",
          "46:  bsym->dname = plugin->demangle(mangled, flags);",
          "50: RZ_IPI bool rz_bin_demangle_import(RzBinImport *import, const RzDemanglerPlugin *plugin, RzDemanglerFlag flags, bool force) {",
          "51:  if (!plugin || (import->dname && !force)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:   return false;",
          "57:  }",
          "60:  if (!demangled) {",
          "61:   return false;",
          "62:  }",
          "64:  import->dname = demangled;",
          "65:  return true;",
          "66: }",
          "",
          "[Removed Lines]",
          "59:  char *demangled = plugin->demangle(mangled);",
          "",
          "[Added Lines]",
          "60:  char *demangled = plugin->demangle(mangled, flags);",
          "65:  free(import->dname);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84:  RzBinLanguage type = language ? rz_bin_language_to_id(language) : RZ_BIN_LANGUAGE_UNKNOWN;",
          "85:  type = RZ_BIN_LANGUAGE_MASK(type);",
          "87:  switch (type) {",
          "88:  case RZ_BIN_LANGUAGE_KOTLIN:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:  RzDemanglerFlag flags = bin ? rz_demangler_get_flags(bin->demangler) : RZ_DEMANGLER_FLAG_ENABLE_ALL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "92:  case RZ_BIN_LANGUAGE_DART:",
          "94:  case RZ_BIN_LANGUAGE_JAVA:",
          "96:  case RZ_BIN_LANGUAGE_OBJC:",
          "98:  case RZ_BIN_LANGUAGE_MSVC:",
          "100:  case RZ_BIN_LANGUAGE_PASCAL:",
          "102:  case RZ_BIN_LANGUAGE_RUST:",
          "104:  case RZ_BIN_LANGUAGE_CXX:",
          "106:  default:",
          "107:   break;",
          "108:  }",
          "",
          "[Removed Lines]",
          "95:   return rz_demangler_java(mangled);",
          "97:   return rz_demangler_objc(mangled);",
          "99:   return rz_demangler_msvc(mangled);",
          "101:   return rz_demangler_pascal(mangled);",
          "103:   return rz_demangler_rust(mangled);",
          "105:   return rz_demangler_cxx(mangled);",
          "",
          "[Added Lines]",
          "98:   return rz_demangler_java(mangled, flags);",
          "100:   return rz_demangler_objc(mangled, flags);",
          "102:   return rz_demangler_msvc(mangled, flags);",
          "104:   return rz_demangler_pascal(mangled, flags);",
          "106:   return rz_demangler_rust(mangled, flags);",
          "108:   return rz_demangler_cxx(mangled, flags);",
          "",
          "---------------"
        ],
        "librz/bin/bobj_process.c||librz/bin/bobj_process.c": [
          "File: librz/bin/bobj_process.c -> librz/bin/bobj_process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include <rz_bin.h>",
          "6: #include \"i/private.h\"",
          "9:  language = RZ_BIN_LANGUAGE_MASK(language);",
          "10:  const char *lang_s = rz_bin_language_to_string(language);",
          "11:  if (!lang_s) {",
          "12:   return NULL;",
          "13:  }",
          "15: }",
          "17: RZ_IPI void rz_bin_process_rust(RzBinObject *o, char *demangled, ut64 paddr, ut64 vaddr, bool is_method) {",
          "",
          "[Removed Lines]",
          "8: static const RzDemanglerPlugin *process_get_demangler_plugin_from_lang(RzBinFile *bf, RzBinLanguage language) {",
          "14:  return rz_demangler_plugin_get(bf->rbin->demangler, lang_s);",
          "",
          "[Added Lines]",
          "8: RZ_IPI const RzDemanglerPlugin *rz_bin_process_get_demangler_plugin_from_lang(RzBin *bin, RzBinLanguage language) {",
          "14:  return rz_demangler_plugin_get(bin->demangler, lang_s);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173:  }",
          "181:  return true;",
          "182: }",
          "",
          "[Removed Lines]",
          "176:  const RzDemanglerPlugin *demangler = process_get_demangler_plugin_from_lang(bf, o->lang);",
          "177:  rz_bin_process_symbols(bf, o, demangler);",
          "178:  rz_bin_process_imports(bf, o, demangler);",
          "179:  rz_bin_set_and_process_relocs(bf, o, demangler);",
          "",
          "[Added Lines]",
          "176:  RzDemanglerFlag flags = rz_demangler_get_flags(bf->rbin->demangler);",
          "177:  const RzDemanglerPlugin *demangler = rz_bin_process_get_demangler_plugin_from_lang(bf->rbin, o->lang);",
          "178:  rz_bin_process_symbols(bf, o, demangler, flags);",
          "179:  rz_bin_process_imports(bf, o, demangler, flags);",
          "180:  rz_bin_set_and_process_relocs(bf, o, demangler, flags);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189:  rz_bin_set_and_process_strings(bf, obj);",
          "190:  return obj->strings != NULL;",
          "191: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200: RZ_API void rz_bin_demangle_with_flags(RZ_NONNULL RzBin *bin, RzDemanglerFlag flags) {",
          "201:  rz_return_if_fail(bin && bin->binfiles);",
          "203:  RzDemanglerFlag f = rz_demangler_get_flags(bin->demangler);",
          "204:  if ((f & flags) == flags) {",
          "205:   return;",
          "206:  }",
          "207:  rz_demangler_set_flags(bin->demangler, flags);",
          "209:  RzBinFile *bf = NULL;",
          "210:  RzListIter *it = NULL;",
          "212:  rz_list_foreach (bin->binfiles, it, bf) {",
          "213:   if (!bf || !bf->o) {",
          "214:    continue;",
          "215:   }",
          "216:   RzBinObject *o = bf->o;",
          "217:   const RzDemanglerPlugin *demangler = rz_bin_process_get_demangler_plugin_from_lang(bin, o->lang);",
          "218:   rz_bin_demangle_relocs_with_flags(o, demangler, flags);",
          "219:   rz_bin_demangle_imports_with_flags(o, demangler, flags);",
          "220:   rz_bin_demangle_symbols_with_flags(o, demangler, flags);",
          "221:  }",
          "222: }",
          "",
          "---------------"
        ],
        "librz/bin/bobj_process_import.c||librz/bin/bobj_process_import.c": [
          "File: librz/bin/bobj_process_import.c -> librz/bin/bobj_process_import.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:  rz_warn_if_fail(o->imports->free);",
          "40: }",
          "43:  if (!demangler || rz_list_length(o->imports) < 1) {",
          "44:   return;",
          "45:  }",
          "",
          "[Removed Lines]",
          "42: RZ_IPI void rz_bin_process_imports(RzBinFile *bf, RzBinObject *o, const RzDemanglerPlugin *demangler) {",
          "",
          "[Added Lines]",
          "42: RZ_IPI void rz_bin_process_imports(RzBinFile *bf, RzBinObject *o, const RzDemanglerPlugin *demangler, RzDemanglerFlag flags) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:   }",
          "58:    !language_cb) {",
          "59:    continue;",
          "60:   }",
          "",
          "[Removed Lines]",
          "57:   if (!rz_bin_demangle_import(element, demangler) ||",
          "",
          "[Added Lines]",
          "57:   if (!rz_bin_demangle_import(element, demangler, flags, false) ||",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:   language_cb(o, element);",
          "66:  }",
          "67: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: RZ_IPI void rz_bin_demangle_imports_with_flags(RzBinObject *o, const RzDemanglerPlugin *demangler, RzDemanglerFlag flags) {",
          "70:  RzListIter *it;",
          "71:  RzBinImport *element;",
          "72:  rz_list_foreach (o->imports, it, element) {",
          "73:   if (!element->name) {",
          "74:    continue;",
          "75:   }",
          "77:   rz_bin_demangle_import(element, demangler, flags, true);",
          "78:  }",
          "79: }",
          "",
          "---------------"
        ],
        "librz/bin/bobj_process_reloc.c||librz/bin/bobj_process_reloc.c": [
          "File: librz/bin/bobj_process_reloc.c -> librz/bin/bobj_process_reloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <rz_bin.h>",
          "5: #include \"i/private.h\"",
          "9:  reloc->paddr += o->opts.loadaddr;",
          "",
          "[Removed Lines]",
          "7: static void process_handle_reloc(RzBinReloc *reloc, RzBinObject *o, const RzDemanglerPlugin *demangler, RzBinProcessLanguage imp_cb, RzBinProcessLanguage sym_cb) {",
          "",
          "[Added Lines]",
          "7: static void process_handle_reloc(RzBinReloc *reloc,",
          "8:  RzBinObject *o,",
          "9:  const RzDemanglerPlugin *demangler,",
          "10:  RzDemanglerFlag flags,",
          "11:  RzBinProcessLanguage imp_cb,",
          "12:  RzBinProcessLanguage sym_cb) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12:   return;",
          "13:  }",
          "16:   imp_cb(o, reloc->import);",
          "17:  }",
          "20:   sym_cb(o, reloc->symbol);",
          "21:  }",
          "22: }",
          "25:  RzBin *bin = bf->rbin;",
          "26:  RzBinPlugin *plugin = o->plugin;",
          "27:  RzList *relocs = NULL;",
          "",
          "[Removed Lines]",
          "15:  if (reloc->import && rz_bin_demangle_import(reloc->import, demangler) && imp_cb) {",
          "19:  if (reloc->symbol && rz_bin_demangle_symbol(reloc->symbol, demangler) && sym_cb) {",
          "24: RZ_IPI void rz_bin_set_and_process_relocs(RzBinFile *bf, RzBinObject *o, const RzDemanglerPlugin *demangler) {",
          "",
          "[Added Lines]",
          "20:  if (reloc->import && rz_bin_demangle_import(reloc->import, demangler, flags, false) && imp_cb) {",
          "24:  if (reloc->symbol && rz_bin_demangle_symbol(reloc->symbol, demangler, flags, false) && sym_cb) {",
          "29: RZ_IPI void rz_bin_set_and_process_relocs(RzBinFile *bf, RzBinObject *o, const RzDemanglerPlugin *demangler, RzDemanglerFlag flags) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38:  RzListIter *it;",
          "39:  RzBinReloc *element;",
          "40:  rz_list_foreach (relocs, it, element) {",
          "42:  }",
          "44:  o->relocs = rz_bin_reloc_storage_new(relocs);",
          "45: }",
          "",
          "[Removed Lines]",
          "41:   process_handle_reloc(element, o, demangler, imp_cb, sym_cb);",
          "",
          "[Added Lines]",
          "46:   process_handle_reloc(element, o, demangler, flags, imp_cb, sym_cb);",
          "52: RZ_IPI void rz_bin_demangle_relocs_with_flags(RzBinObject *o, const RzDemanglerPlugin *demangler, RzDemanglerFlag flags) {",
          "53:  for (size_t i = 0; i < o->relocs->relocs_count; ++i) {",
          "54:   RzBinReloc *reloc = o->relocs->relocs[i];",
          "55:   if (reloc->import) {",
          "56:    rz_bin_demangle_import(reloc->import, demangler, flags, true);",
          "57:   }",
          "58:   if (reloc->symbol) {",
          "59:    rz_bin_demangle_symbol(reloc->symbol, demangler, flags, true);",
          "60:   }",
          "61:  }",
          "62: }",
          "",
          "---------------"
        ],
        "librz/bin/bobj_process_symbol.c||librz/bin/bobj_process_symbol.c": [
          "File: librz/bin/bobj_process_symbol.c -> librz/bin/bobj_process_symbol.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  }",
          "63: }",
          "67:  symbol->paddr += o->opts.loadaddr;",
          "",
          "[Removed Lines]",
          "65: static void process_handle_symbol(RzBinSymbol *symbol, RzBinObject *o, const RzDemanglerPlugin *demangler, RzBinProcessLanguage language_cb) {",
          "",
          "[Added Lines]",
          "65: static void process_handle_symbol(RzBinSymbol *symbol, RzBinObject *o, const RzDemanglerPlugin *demangler, RzDemanglerFlag flags, RzBinProcessLanguage language_cb) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:  }",
          "82:   !language_cb) {",
          "83:   return;",
          "84:  }",
          "",
          "[Removed Lines]",
          "81:  if (!rz_bin_demangle_symbol(symbol, demangler) ||",
          "",
          "[Added Lines]",
          "81:  if (!rz_bin_demangle_symbol(symbol, demangler, flags, false) ||",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:  language_cb(o, symbol);",
          "90: }",
          "93:  if (rz_list_length(o->symbols) < 1) {",
          "94:   return;",
          "95:  }",
          "",
          "[Removed Lines]",
          "92: RZ_IPI void rz_bin_process_symbols(RzBinFile *bf, RzBinObject *o, const RzDemanglerPlugin *demangler) {",
          "",
          "[Added Lines]",
          "92: RZ_IPI void rz_bin_process_symbols(RzBinFile *bf, RzBinObject *o, const RzDemanglerPlugin *demangler, RzDemanglerFlag flags) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "102:  RzListIter *it;",
          "103:  RzBinSymbol *element;",
          "104:  rz_list_foreach (o->symbols, it, element) {",
          "106:  }",
          "107: }",
          "",
          "[Removed Lines]",
          "105:   process_handle_symbol(element, o, demangler, language_cb);",
          "",
          "[Added Lines]",
          "105:   process_handle_symbol(element, o, demangler, flags, language_cb);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "114:   o->symbols = rz_list_newf((RzListFree)rz_bin_symbol_free);",
          "115:  }",
          "116: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118: RZ_IPI void rz_bin_demangle_symbols_with_flags(RzBinObject *o, const RzDemanglerPlugin *demangler, RzDemanglerFlag flags) {",
          "119:  RzListIter *it;",
          "120:  RzBinSymbol *element;",
          "121:  rz_list_foreach (o->symbols, it, element) {",
          "122:   rz_bin_demangle_symbol(element, demangler, flags, true);",
          "123:  }",
          "124: }",
          "",
          "---------------"
        ],
        "librz/bin/format/dex/dex.c||librz/bin/format/dex/dex.c": [
          "File: librz/bin/format/dex/dex.c -> librz/bin/format/dex/dex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "909:  if (!mangled) {",
          "910:   return NULL;",
          "911:  }",
          "913:  free(mangled);",
          "914:  return demangled;",
          "915: }",
          "",
          "[Removed Lines]",
          "912:  char *demangled = rz_demangler_java(mangled);",
          "",
          "[Added Lines]",
          "912:  char *demangled = rz_demangler_java(mangled, RZ_DEMANGLER_FLAG_ENABLE_ALL);",
          "",
          "---------------"
        ],
        "librz/bin/format/javclass_bin.c||librz/bin/format/java/class_bin.c": [
          "File: librz/bin/format/javclass_bin.c -> librz/bin/format/java/class_bin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "744:  dem = rz_demangler_java(tmp, RZ_DEMANGLER_FLAG_ENABLE_ALL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "776:    if ((dem = rz_demangler_java(tmp, RZ_DEMANGLER_FLAG_ENABLE_ALL))) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "826:    dem = rz_demangler_java(tmp, RZ_DEMANGLER_FLAG_ENABLE_ALL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1065:  char *demangled = rz_demangler_java(mangled, RZ_DEMANGLER_FLAG_ENABLE_ALL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1300:    symbol->dname = rz_demangler_java(symbol->name, RZ_DEMANGLER_FLAG_ENABLE_ALL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1679:     char *dem = rz_demangler_java(rtext, RZ_DEMANGLER_FLAG_ENABLE_ALL);",
          "",
          "---------------"
        ],
        "librz/bin/i/private.h||librz/bin/i/private.h": [
          "File: librz/bin/i/private.h -> librz/bin/i/private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: RZ_IPI void rz_bin_string_decode_base64(RZ_NONNULL RzBinString *bstr);",
          "40: RZ_IPI int rz_bin_compare_class(RzBinClass *a, RzBinClass *b);",
          "41: RZ_IPI int rz_bin_compare_method(RzBinSymbol *a, RzBinSymbol *b);",
          "",
          "[Removed Lines]",
          "37: RZ_IPI bool rz_bin_demangle_symbol(RzBinSymbol *bsym, const RzDemanglerPlugin *plugin);",
          "38: RZ_IPI bool rz_bin_demangle_import(RzBinImport *import, const RzDemanglerPlugin *plugin);",
          "",
          "[Added Lines]",
          "37: RZ_IPI bool rz_bin_demangle_symbol(RzBinSymbol *bsym, const RzDemanglerPlugin *plugin, RzDemanglerFlag flags, bool force);",
          "38: RZ_IPI bool rz_bin_demangle_import(RzBinImport *import, const RzDemanglerPlugin *plugin, RzDemanglerFlag flags, bool force);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: RZ_IPI void rz_bin_process_swift(RzBinObject *o, char *classname, char *demangled, ut64 paddr, ut64 vaddr);",
          "51: RZ_IPI void rz_bin_set_and_process_classes(RzBinFile *bf, RzBinObject *o);",
          "52: RZ_IPI void rz_bin_set_and_process_entries(RzBinFile *bf, RzBinObject *o);",
          "53: RZ_IPI void rz_bin_set_and_process_fields(RzBinFile *bf, RzBinObject *o);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: RZ_IPI const RzDemanglerPlugin *rz_bin_process_get_demangler_plugin_from_lang(RzBin *bin, RzBinLanguage language);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57: RZ_IPI void rz_bin_set_and_process_strings(RzBinFile *bf, RzBinObject *o);",
          "58: RZ_IPI void rz_bin_set_imports_from_plugin(RzBinFile *bf, RzBinObject *o);",
          "59: RZ_IPI void rz_bin_set_symbols_from_plugin(RzBinFile *bf, RzBinObject *o);",
          "64: RZ_IPI RzBinProcessLanguage rz_bin_process_language_symbol(RzBinObject *o);",
          "65: RZ_IPI RzBinProcessLanguage rz_bin_process_language_import(RzBinObject *o);",
          "",
          "[Removed Lines]",
          "60: RZ_IPI void rz_bin_set_and_process_relocs(RzBinFile *bf, RzBinObject *o, const RzDemanglerPlugin *demangler);",
          "61: RZ_IPI void rz_bin_process_imports(RzBinFile *bf, RzBinObject *o, const RzDemanglerPlugin *demangler);",
          "62: RZ_IPI void rz_bin_process_symbols(RzBinFile *bf, RzBinObject *o, const RzDemanglerPlugin *demangler);",
          "",
          "[Added Lines]",
          "62: RZ_IPI void rz_bin_set_and_process_relocs(RzBinFile *bf, RzBinObject *o, const RzDemanglerPlugin *demangler, RzDemanglerFlag flags);",
          "63: RZ_IPI void rz_bin_process_imports(RzBinFile *bf, RzBinObject *o, const RzDemanglerPlugin *demangler, RzDemanglerFlag flags);",
          "64: RZ_IPI void rz_bin_process_symbols(RzBinFile *bf, RzBinObject *o, const RzDemanglerPlugin *demangler, RzDemanglerFlag flags);",
          "66: RZ_IPI void rz_bin_demangle_relocs_with_flags(RzBinObject *o, const RzDemanglerPlugin *demangler, RzDemanglerFlag flags);",
          "67: RZ_IPI void rz_bin_demangle_imports_with_flags(RzBinObject *o, const RzDemanglerPlugin *demangler, RzDemanglerFlag flags);",
          "68: RZ_IPI void rz_bin_demangle_symbols_with_flags(RzBinObject *o, const RzDemanglerPlugin *demangler, RzDemanglerFlag flags);",
          "",
          "---------------"
        ],
        "librz/core/cbin.c||librz/core/cbin.c": [
          "File: librz/core/cbin.c -> librz/core/cbin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3574:   return strdup(\"unknown\");",
          "3575:  }",
          "3576:  switch (any[0]) {",
          "3578:  case 'B': return strdup(\"byte\");",
          "3579:  case 'C': return strdup(\"char\");",
          "3580:  case 'D': return strdup(\"double\");",
          "",
          "[Removed Lines]",
          "3577:  case 'L': return rz_demangler_java(any);",
          "",
          "[Added Lines]",
          "3577:  case 'L': return rz_demangler_java(any, RZ_DEMANGLER_FLAG_ENABLE_ALL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3632:  rz_list_foreach (c->methods, iter3, sym) {",
          "3633:   const char *mn = sym->dname ? sym->dname : sym->name;",
          "3634:   visibility = resolve_java_visibility(sym->visibility_str);",
          "3636:   if (!dem) {",
          "3637:    dem = strdup(mn);",
          "3638:   } else if (simplify && dem && package && classname) {",
          "",
          "[Removed Lines]",
          "3635:   char *dem = rz_demangler_java(mn);",
          "",
          "[Added Lines]",
          "3635:   char *dem = rz_demangler_java(mn, RZ_DEMANGLER_FLAG_ENABLE_ALL);",
          "",
          "---------------"
        ],
        "librz/core/cconfig.c||librz/core/cconfig.c": [
          "File: librz/core/cconfig.c -> librz/core/cconfig.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1043:  return true;",
          "1044: }",
          "1046: static bool cb_asmsyntax(void *user, void *data) {",
          "1047:  RzCore *core = (RzCore *)user;",
          "1048:  RzConfigNode *node = (RzConfigNode *)data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1046: static bool cb_bindemangle_flags(void *user, void *data) {",
          "1047:  RzCore *core = (RzCore *)user;",
          "1048:  RzConfigNode *node = (RzConfigNode *)data;",
          "1049:  if (*node->value == '?') {",
          "1050:   print_node_options(node);",
          "1051:   return false;",
          "1052:  }",
          "1053:  if (!strcmp(node->value, \"all\")) {",
          "1054:   rz_bin_demangle_with_flags(core->bin, RZ_DEMANGLER_FLAG_ENABLE_ALL);",
          "1055:  } else if (!strcmp(node->value, \"base\")) {",
          "1056:   rz_bin_demangle_with_flags(core->bin, RZ_DEMANGLER_FLAG_BASE);",
          "1057:  } else if (!strcmp(node->value, \"simplify\")) {",
          "1058:   rz_bin_demangle_with_flags(core->bin, RZ_DEMANGLER_FLAG_SIMPLIFY);",
          "1059:  } else {",
          "1060:   RZ_LOG_ERROR(\"config: invalid option for bin.demangle.flags\\n\");",
          "1061:   return false;",
          "1062:  }",
          "1063:  return true;",
          "1064: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3186:  SETCB(\"bin.filter\", \"true\", &cb_binfilter, \"Filter symbol names to fix dupped names\");",
          "3187:  SETCB(\"bin.force\", \"\", &cb_binforce, \"Force that rbin plugin\");",
          "3188:  SETPREF(\"bin.lang\", \"\", \"Language for bin.demangle\");",
          "3190:  SETBPREF(\"bin.demangle.libs\", \"false\", \"Show library name on demangled symbols names\");",
          "3191:  SETI(\"bin.baddr\", -1, \"Base address of the binary\");",
          "3192:  SETI(\"bin.laddr\", 0, \"Base address for loading library ('*.so')\");",
          "3193:  SETCB(\"bin.dbginfo\", \"true\", &cb_bindbginfo, \"Load debug information at startup if available\");",
          "",
          "[Removed Lines]",
          "3189:  SETCB(\"bin.demangle\", \"true\", &cb_bindemangle, \"Import demangled symbols from RzBin\");",
          "",
          "[Added Lines]",
          "3209:  SETCB(\"bin.demangle\", \"true\", &cb_bindemangle, \"Demangles all symbols parsed via RzBin\");",
          "3211:  n = NODECB(\"bin.demangle.flags\", \"base\", &cb_bindemangle_flags);",
          "3212:  SETDESC(n, \"Sets the flags of the parsed symbols via RzBin\");",
          "3213:  SETOPTIONS(n, \"base\", \"simplify\", \"all\", NULL);",
          "",
          "---------------"
        ],
        "librz/core/cmd/cmd_info.c||librz/core/cmd/cmd_info.c": [
          "File: librz/core/cmd/cmd_info.c -> librz/core/cmd/cmd_info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "532:  return RZ_CMD_STATUS_OK;",
          "533: }",
          "536:  if (!user) {",
          "537:   rz_cons_printf(\"%-6s %-8s %s\\n\", plugin->language, plugin->license, plugin->author);",
          "538:   return true;",
          "",
          "[Removed Lines]",
          "535: static bool print_demangler_info(const RzDemanglerPlugin *plugin, void *user) {",
          "",
          "[Added Lines]",
          "535: static bool print_demangler_info(const RzDemanglerPlugin *plugin, RzDemanglerFlag flags, void *user) {",
          "",
          "---------------"
        ],
        "librz/core/cpdb.c||librz/core/cpdb.c": [
          "File: librz/core/cpdb.c -> librz/core/cpdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:  rz_list_foreach (gsym_data_stream->global_list, it, gdata) {",
          "153:   sctn_header = rz_list_get_n(pe_stream->sections_hdrs, (gdata->segment - 1));",
          "154:   if (sctn_header) {",
          "156:    name = (name) ? name : strdup(gdata->name);",
          "157:    switch (mode) {",
          "158:    case RZ_OUTPUT_MODE_JSON: // JSON",
          "",
          "[Removed Lines]",
          "155:    name = rz_demangler_msvc(gdata->name);",
          "",
          "[Added Lines]",
          "155:    name = rz_demangler_msvc(gdata->name, RZ_DEMANGLER_FLAG_BASE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "212:  if (!pe_stream) {",
          "213:   return;",
          "214:  }",
          "215:  char *file = rz_str_replace(strdup(pdbfile), \".pdb\", \"\", 0);",
          "216:  rz_flag_space_push(core->flags, RZ_FLAGS_FS_SYMBOLS);",
          "217:  rz_list_foreach (gsym_data_stream->global_list, it, gdata) {",
          "218:   sctn_header = rz_list_get_n(pe_stream->sections_hdrs, (gdata->segment - 1));",
          "219:   if (sctn_header) {",
          "221:    name = (name) ? name : strdup(gdata->name);",
          "222:    filtered_name = rz_name_filter2(name, true);",
          "223:    char *fname = rz_str_newf(\"pdb.%s.%s\", file, filtered_name);",
          "",
          "[Removed Lines]",
          "220:    name = rz_demangler_msvc(gdata->name);",
          "",
          "[Added Lines]",
          "215:  RzDemanglerFlag dflags = rz_demangler_get_flags(core->bin->demangler);",
          "221:    name = rz_demangler_msvc(gdata->name, dflags);",
          "",
          "---------------"
        ],
        "librz/core/p/core_java.c||librz/core/p/core_java.c": [
          "File: librz/core/p/core_java.c -> librz/core/p/core_java.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "254:   return RZ_CMD_STATUS_INVALID;",
          "255:  }",
          "258:  if (demangled) {",
          "259:   rz_cons_println(demangled);",
          "260:  } else {",
          "",
          "[Removed Lines]",
          "257:  char *demangled = rz_demangler_java(resolved);",
          "",
          "[Added Lines]",
          "257:  RzDemanglerFlag dflags = rz_demangler_get_flags(core->bin->demangler);",
          "258:  char *demangled = rz_demangler_java(resolved, dflags);",
          "",
          "---------------"
        ],
        "librz/demangler/demangler.c||librz/demangler/demangler.c": [
          "File: librz/demangler/demangler.c -> librz/demangler/demangler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #include <config.h>",
          "11: #define DEFINE_DEMANGLER_PLUGIN(name, lang, lic, auth, handler) \\",
          "12:  RZ_API RzDemanglerPlugin rz_demangler_plugin_##name = { \\",
          "13:   .language = lang, \\",
          "14:   .license = lic, \\",
          "15:   .author = auth, \\",
          "17:  }",
          "19: #if WITH_GPL",
          "",
          "[Removed Lines]",
          "16:   .demangle = &handler, \\",
          "",
          "[Added Lines]",
          "12:  static char *handler##_cast(const char *symbol, RzDemanglerFlag flags) { \\",
          "13:   return handler(symbol, (RzDemangleOpts)flags); \\",
          "14:  } \\",
          "19:   .demangle = &handler##_cast, \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: RZ_LIB_VERSION(rz_demangler);",
          "46: }",
          "53: }",
          "60: }",
          "67: }",
          "74: }",
          "81: }",
          "",
          "[Removed Lines]",
          "44: RZ_API RZ_OWN char *rz_demangler_java(RZ_NULLABLE const char *symbol) {",
          "45:  return libdemangle_handler_java(symbol);",
          "51: RZ_API RZ_OWN char *rz_demangler_cxx(RZ_NONNULL const char *symbol) {",
          "52:  return libdemangle_handler_cxx(symbol);",
          "58: RZ_API RZ_OWN char *rz_demangler_objc(RZ_NONNULL const char *symbol) {",
          "59:  return libdemangle_handler_objc(symbol);",
          "65: RZ_API RZ_OWN char *rz_demangler_pascal(RZ_NONNULL const char *symbol) {",
          "66:  return libdemangle_handler_pascal(symbol);",
          "72: RZ_API RZ_OWN char *rz_demangler_rust(RZ_NONNULL const char *symbol) {",
          "73:  return libdemangle_handler_rust(symbol);",
          "79: RZ_API RZ_OWN char *rz_demangler_msvc(RZ_NONNULL const char *symbol) {",
          "80:  return libdemangle_handler_msvc(symbol);",
          "",
          "[Added Lines]",
          "47: RZ_API RZ_OWN char *rz_demangler_java(RZ_NULLABLE const char *symbol, RzDemanglerFlag flags) {",
          "48:  return libdemangle_handler_java(symbol, (RzDemangleOpts)flags);",
          "54: RZ_API RZ_OWN char *rz_demangler_cxx(RZ_NONNULL const char *symbol, RzDemanglerFlag flags) {",
          "55:  return libdemangle_handler_cxx(symbol, (RzDemangleOpts)flags);",
          "61: RZ_API RZ_OWN char *rz_demangler_objc(RZ_NONNULL const char *symbol, RzDemanglerFlag flags) {",
          "62:  return libdemangle_handler_objc(symbol, (RzDemangleOpts)flags);",
          "68: RZ_API RZ_OWN char *rz_demangler_pascal(RZ_NONNULL const char *symbol, RzDemanglerFlag flags) {",
          "69:  return libdemangle_handler_pascal(symbol, (RzDemangleOpts)flags);",
          "75: RZ_API RZ_OWN char *rz_demangler_rust(RZ_NONNULL const char *symbol, RzDemanglerFlag flags) {",
          "76:  return libdemangle_handler_rust(symbol, (RzDemangleOpts)flags);",
          "82: RZ_API RZ_OWN char *rz_demangler_msvc(RZ_NONNULL const char *symbol, RzDemanglerFlag flags) {",
          "83:  return libdemangle_handler_msvc(symbol, (RzDemangleOpts)flags);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "106:    RZ_LOG_WARN(\"rz_demangler: failed to add '%s' plugin at index %u\", lang, i);",
          "107:   }",
          "108:  }",
          "110:  dem->plugins = plugins;",
          "111:  return dem;",
          "112: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:  dem->flags = RZ_DEMANGLER_FLAG_BASE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "122:  free(dem);",
          "123: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: RZ_API void rz_demangler_set_flags(RZ_NONNULL RzDemangler *demangler, RzDemanglerFlag flags) {",
          "132:  rz_return_if_fail(demangler);",
          "133:  demangler->flags = flags;",
          "134: }",
          "139: RZ_API RzDemanglerFlag rz_demangler_get_flags(RZ_NONNULL RzDemangler *demangler) {",
          "140:  rz_return_val_if_fail(demangler, RZ_DEMANGLER_FLAG_BASE);",
          "141:  return demangler->flags;",
          "142: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135:  RzListIter *it;",
          "137:  rz_list_foreach (dem->plugins, it, plugin) {",
          "139:    break;",
          "140:   }",
          "141:  }",
          "",
          "[Removed Lines]",
          "138:   if (!iter(plugin, data)) {",
          "",
          "[Added Lines]",
          "157:   if (!iter(plugin, dem->flags, data)) {",
          "",
          "---------------"
        ],
        "librz/include/rz_bin.h||librz/include/rz_bin.h": [
          "File: librz/include/rz_bin.h -> librz/include/rz_bin.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1011: RZ_API void rz_bin_mem_free(RZ_NULLABLE void *data);",
          "1014: RZ_API RZ_OWN char *rz_bin_demangle(RZ_NULLABLE RzBin *bin, RZ_NULLABLE const char *language, RZ_NULLABLE const char *mangled);",
          "1015: RZ_API const char *rz_bin_get_meth_flag_string(ut64 flag, bool compact);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1014: RZ_API void rz_bin_demangle_with_flags(RZ_NONNULL RzBin *bin, RzDemanglerFlag flags);",
          "",
          "---------------"
        ],
        "librz/include/rz_demangler.h||librz/include/rz_demangler.h": [
          "File: librz/include/rz_demangler.h -> librz/include/rz_demangler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: RZ_LIB_VERSION_HEADER(rz_demangler);",
          "16: typedef struct rz_demangler_plugin_t {",
          "17:  const char *language; ///< demangler language",
          "18:  const char *author; ///< demangler author",
          "19:  const char *license; ///< demangler license",
          "21: } RzDemanglerPlugin;",
          "23: typedef struct rz_demangler_t {",
          "24:  RzList /*<RzDemanglerPlugin *>*/ *plugins;",
          "25: } RzDemangler;",
          "38: RZ_API RZ_OWN RzDemangler *rz_demangler_new(void);",
          "39: RZ_API void rz_demangler_free(RZ_NULLABLE RzDemangler *demangler);",
          "40: RZ_API void rz_demangler_plugin_iterate(RZ_NONNULL RzDemangler *demangler, RZ_NONNULL RzDemanglerIter iter, RZ_NULLABLE void *data);",
          "41: RZ_API bool rz_demangler_plugin_add(RZ_NONNULL RzDemangler *demangler, RZ_NONNULL RzDemanglerPlugin *plugin);",
          "42: RZ_API bool rz_demangler_plugin_del(RZ_NONNULL RzDemangler *demangler, RZ_NONNULL RzDemanglerPlugin *plugin);",
          "",
          "[Removed Lines]",
          "20:  RZ_OWN char *(*demangle)(RZ_NONNULL const char *symbol); ///< demangler method to resolve the mangled symbol",
          "27: typedef bool (*RzDemanglerIter)(const RzDemanglerPlugin *plugin, void *data);",
          "29: #define rz_demangler_plugin_demangle(x, y) ((x) && RZ_STR_ISNOTEMPTY(y) ? (x)->demangle(y) : NULL)",
          "31: RZ_API RZ_OWN char *rz_demangler_java(RZ_NULLABLE const char *symbol);",
          "32: RZ_API RZ_OWN char *rz_demangler_cxx(RZ_NONNULL const char *symbol);",
          "33: RZ_API RZ_OWN char *rz_demangler_objc(RZ_NONNULL const char *symbol);",
          "34: RZ_API RZ_OWN char *rz_demangler_pascal(RZ_NONNULL const char *symbol);",
          "35: RZ_API RZ_OWN char *rz_demangler_rust(RZ_NONNULL const char *symbol);",
          "36: RZ_API RZ_OWN char *rz_demangler_msvc(RZ_NONNULL const char *symbol);",
          "",
          "[Added Lines]",
          "16: typedef enum {",
          "17:  RZ_DEMANGLER_FLAG_BASE = 0,",
          "18:  RZ_DEMANGLER_FLAG_SIMPLIFY = (1 << 0),",
          "19:  RZ_DEMANGLER_FLAG_ENABLE_ALL = (RZ_DEMANGLER_FLAG_BASE | RZ_DEMANGLER_FLAG_SIMPLIFY),",
          "20: } RzDemanglerFlag;",
          "22: typedef RZ_OWN char *(*RzDemanglerPluginCb)(RZ_NONNULL const char *symbol, RzDemanglerFlag flags);",
          "28:  RzDemanglerPluginCb demangle; ///< demangler method to resolve the mangled symbol",
          "32:  RzDemanglerFlag flags;",
          "36: typedef bool (*RzDemanglerIter)(const RzDemanglerPlugin *plugin, RzDemanglerFlag flags, void *data);",
          "38: #define rz_demangler_plugin_demangle(x, y, o) ((x) && RZ_STR_ISNOTEMPTY(y) ? (x)->demangle(y, o) : NULL)",
          "40: RZ_API RZ_OWN char *rz_demangler_java(RZ_NULLABLE const char *symbol, RzDemanglerFlag flags);",
          "41: RZ_API RZ_OWN char *rz_demangler_cxx(RZ_NONNULL const char *symbol, RzDemanglerFlag flags);",
          "42: RZ_API RZ_OWN char *rz_demangler_objc(RZ_NONNULL const char *symbol, RzDemanglerFlag flags);",
          "43: RZ_API RZ_OWN char *rz_demangler_pascal(RZ_NONNULL const char *symbol, RzDemanglerFlag flags);",
          "44: RZ_API RZ_OWN char *rz_demangler_rust(RZ_NONNULL const char *symbol, RzDemanglerFlag flags);",
          "45: RZ_API RZ_OWN char *rz_demangler_msvc(RZ_NONNULL const char *symbol, RzDemanglerFlag flags);",
          "49: RZ_API void rz_demangler_set_flags(RZ_NONNULL RzDemangler *demangler, RzDemanglerFlag flags);",
          "50: RZ_API RzDemanglerFlag rz_demangler_get_flags(RZ_NONNULL RzDemangler *demangler);",
          "",
          "---------------"
        ],
        "librz/main/rz-bin.c||librz/main/rz-bin.c": [
          "File: librz/main/rz-bin.c -> librz/main/rz-bin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "621:  }",
          "622: }",
          "625:  (void)user;",
          "626:  printf(\"%-6s %-12s %s\\n\", plugin->language, plugin->license, plugin->author);",
          "627:  return true;",
          "",
          "[Removed Lines]",
          "624: static bool print_demangler_info(const RzDemanglerPlugin *plugin, void *user) {",
          "",
          "[Added Lines]",
          "624: static bool print_demangler_info(const RzDemanglerPlugin *plugin, RzDemanglerFlag flags, void *user) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "994:    rz_core_fini(&core);",
          "995:    return 1;",
          "996:   }",
          "997:   if (!strcmp(file, \"-\")) {",
          "998:    for (;;) {",
          "999:     file = stdin_gets(false);",
          "1000:     if (!file || !*file) {",
          "1001:      break;",
          "1002:     }",
          "1004:     if (RZ_STR_ISNOTEMPTY(res)) {",
          "1005:      printf(\"%s\\n\", res);",
          "1006:      ret_num = 0;",
          "",
          "[Removed Lines]",
          "1003:     res = rz_demangler_plugin_demangle(plugin, file);",
          "",
          "[Added Lines]",
          "997:   RzDemanglerFlag dflags = rz_demangler_get_flags(bin->demangler);",
          "1004:     res = rz_demangler_plugin_demangle(plugin, file, dflags);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1012:    }",
          "1013:    stdin_gets(true);",
          "1014:   } else {",
          "1016:    if (RZ_STR_ISNOTEMPTY(res)) {",
          "1017:     printf(\"%s\\n\", res);",
          "1018:     ret_num = 0;",
          "",
          "[Removed Lines]",
          "1015:    res = rz_demangler_plugin_demangle(plugin, file);",
          "",
          "[Added Lines]",
          "1016:    res = rz_demangler_plugin_demangle(plugin, file, dflags);",
          "",
          "---------------"
        ],
        "subprojects/libdemangle.wrap||subprojects/libdemangle.wrap": [
          "File: subprojects/libdemangle.wrap -> subprojects/libdemangle.wrap",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: [wrap-git]",
          "2: url = https://github.com/rizinorg/rz-libdemangle.git",
          "",
          "[Removed Lines]",
          "3: revision = 2c90eaadd9d330a3c8ea01939967af28c207dfb5",
          "",
          "[Added Lines]",
          "3: revision = de95fa539431de045ab1a32476b5712975b9b62d",
          "",
          "---------------"
        ]
      }
    }
  ]
}