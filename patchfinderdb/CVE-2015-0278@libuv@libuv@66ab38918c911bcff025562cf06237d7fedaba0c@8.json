{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a3c3b37bfb7586861ddd138628a9d8a5530c40ca",
      "candidate_info": {
        "commit_hash": "a3c3b37bfb7586861ddd138628a9d8a5530c40ca",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/a3c3b37bfb7586861ddd138628a9d8a5530c40ca",
        "files": [
          "Makefile.am",
          "src/unix/atomic-ops.h",
          "uv.gyp"
        ],
        "message": "unix: add atomic-ops.h\n\nAdd cmpxchgi(), cmpxchgl() and cpu_relax() functions that we can use\nas simple primitives to build spinlocks out of.",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "src/unix/atomic-ops.h||src/unix/atomic-ops.h",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: include_HEADERS += include/uv-unix.h",
          "81: AM_CPPFLAGS += -I$(top_srcdir)/src/unix",
          "82: libuv_la_SOURCES += src/unix/async.c \\",
          "83:                    src/unix/core.c \\",
          "84:                    src/unix/dl.c \\",
          "85:                    src/unix/fs.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:                    src/unix/atomic-ops.h \\",
          "",
          "---------------"
        ],
        "src/unix/atomic-ops.h||src/unix/atomic-ops.h": [
          "File: src/unix/atomic-ops.h -> src/unix/atomic-ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #ifndef UV_ATOMIC_OPS_H_",
          "17: #define UV_ATOMIC_OPS_H_",
          "21: UV_UNUSED(static int cmpxchgi(int* ptr, int oldval, int newval));",
          "22: UV_UNUSED(static long cmpxchgl(long* ptr, long oldval, long newval));",
          "23: UV_UNUSED(static void cpu_relax(void));",
          "28: UV_UNUSED(static int cmpxchgi(int* ptr, int oldval, int newval)) {",
          "29: #if defined(__i386__) || defined(__x86_64__)",
          "30:   int out;",
          "31:   __asm__ __volatile__ (\"lock; cmpxchg %2, %1;\"",
          "32:                         : \"=a\" (out), \"+m\" (*(volatile int*) ptr)",
          "33:                         : \"r\" (newval), \"0\" (oldval)",
          "34:                         : \"memory\");",
          "35:   return out;",
          "36: #else",
          "37:   return __sync_val_compare_and_swap(ptr, oldval, newval);",
          "38: #endif",
          "39: }",
          "41: UV_UNUSED(static long cmpxchgl(long* ptr, long oldval, long newval)) {",
          "42: #if defined(__i386__) || defined(__x86_64__)",
          "43:   long out;",
          "44:   __asm__ __volatile__ (\"lock; cmpxchg %2, %1;\"",
          "45:                         : \"=a\" (out), \"+m\" (*(volatile long*) ptr)",
          "46:                         : \"r\" (newval), \"0\" (oldval)",
          "47:                         : \"memory\");",
          "48:   return out;",
          "49: #else",
          "50:   return __sync_val_compare_and_swap(ptr, oldval, newval);",
          "51: #endif",
          "52: }",
          "54: UV_UNUSED(static void cpu_relax(void)) {",
          "55: #if defined(__i386__) || defined(__x86_64__)",
          "57: #endif",
          "58: }",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:             'include/uv-darwin.h',",
          "135:             'include/uv-bsd.h',",
          "136:             'src/unix/async.c',",
          "137:             'src/unix/core.c',",
          "138:             'src/unix/dl.c',",
          "139:             'src/unix/fs.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:             'src/unix/atomic-ops.h',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e4982f5c96b7bfcaa537ed2a0d318b5b9d1eba9",
      "candidate_info": {
        "commit_hash": "9e4982f5c96b7bfcaa537ed2a0d318b5b9d1eba9",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/9e4982f5c96b7bfcaa537ed2a0d318b5b9d1eba9",
        "files": [
          "include/uv-unix.h"
        ],
        "message": "include: remove UV_IO_PRIVATE_FIELDS macro\n\nIt's an alias for UV_IO_PRIVATE_PLATFORM_FIELDS.  Remove the macro and\nuse UV_IO_PRIVATE_PLATFORM_FIELDS directly.",
        "before_after_code_files": [
          "include/uv-unix.h||include/uv-unix.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-unix.h||include/uv-unix.h": [
          "File: include/uv-unix.h -> include/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: #endif",
          "65: struct uv__io_s;",
          "66: struct uv__async;",
          "67: struct uv_loop_s;",
          "",
          "[Removed Lines]",
          "62: #define UV_IO_PRIVATE_FIELDS                                                  \\",
          "63:   UV_IO_PRIVATE_PLATFORM_FIELDS                                               \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:   int fd;",
          "82: };",
          "84: typedef void (*uv__async_cb)(struct uv_loop_s* loop,",
          "",
          "[Removed Lines]",
          "81:   UV_IO_PRIVATE_FIELDS",
          "",
          "[Added Lines]",
          "78:   UV_IO_PRIVATE_PLATFORM_FIELDS",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b055538d09f54d43bf0d26a478bc5085cd52e143",
      "candidate_info": {
        "commit_hash": "b055538d09f54d43bf0d26a478bc5085cd52e143",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/b055538d09f54d43bf0d26a478bc5085cd52e143",
        "files": [
          "include/uv.h",
          "src/unix/stream.c",
          "src/win/stream.c"
        ],
        "message": "unix, windows: clarify what uv_stream_set_blocking does\n\nAlso replace the assert with an error on unix.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/unix/stream.c||src/unix/stream.c",
          "src/win/stream.c||src/win/stream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h"
        ],
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1513: int uv_stream_set_blocking(uv_stream_t* handle, int blocking) {",
          "1517: }",
          "",
          "[Removed Lines]",
          "1514:   assert(0 && \"implement me\");",
          "1515:   abort();",
          "1516:   return 0;",
          "",
          "[Added Lines]",
          "1514:   return UV_ENOSYS;",
          "",
          "---------------"
        ],
        "src/win/stream.c||src/win/stream.c": [
          "File: src/win/stream.c -> src/win/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "246: int uv_stream_set_blocking(uv_stream_t* handle, int blocking) {",
          "247:   if (blocking != 0)",
          "248:     handle->flags |= UV_HANDLE_BLOCKING_WRITES;",
          "249:   else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:   if (stream->type != UV_NAMED_PIPE)",
          "248:     return UV_EINVAL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "621c4a39290d52fad9fe27b8906f4f07456e4df4",
      "candidate_info": {
        "commit_hash": "621c4a39290d52fad9fe27b8906f4f07456e4df4",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/621c4a39290d52fad9fe27b8906f4f07456e4df4",
        "files": [
          "src/win/process.c",
          "test/test-list.h",
          "test/test-spawn.c"
        ],
        "message": "windows: Fix an infinite loop in uv_spawn\n\nThe PATH-parsing code for windows erroneously contained an infinite\nloop when the PATH started with a leading semicolon. Each iteration of\nthe loop usually bumped over the separator, but if the first character\nwas a semicolon then it would never skip it, causing the infinite\nloop.\n\nCloses #909",
        "before_after_code_files": [
          "src/win/process.c||src/win/process.c",
          "test/test-list.h||test/test-list.h",
          "test/test-spawn.c||test/test-spawn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/process.c||src/win/process.c": [
          "File: src/win/process.c -> src/win/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:       }",
          "382:         dir_end++;",
          "383:       }",
          "",
          "[Removed Lines]",
          "381:       if (dir_end != path) {",
          "",
          "[Added Lines]",
          "381:       if (dir_end != path || *path == L';') {",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "244: TEST_DECLARE   (listen_with_simultaneous_accepts)",
          "245: TEST_DECLARE   (listen_no_simultaneous_accepts)",
          "246: TEST_DECLARE   (fs_stat_root)",
          "247: #else",
          "248: TEST_DECLARE   (emfile)",
          "249: TEST_DECLARE   (close_fd)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247: TEST_DECLARE   (spawn_with_an_odd_path)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "500:   TEST_ENTRY  (listen_with_simultaneous_accepts)",
          "501:   TEST_ENTRY  (listen_no_simultaneous_accepts)",
          "502:   TEST_ENTRY  (fs_stat_root)",
          "503: #else",
          "504:   TEST_ENTRY  (emfile)",
          "505:   TEST_ENTRY  (close_fd)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "504:   TEST_ENTRY  (spawn_with_an_odd_path)",
          "",
          "---------------"
        ],
        "test/test-spawn.c||test/test-spawn.c": [
          "File: test/test-spawn.c -> test/test-spawn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "936:   return 0;",
          "937: }",
          "938: #endif",
          "940: #ifndef _WIN32",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "940: TEST_IMPL(spawn_with_an_odd_path) {",
          "941:   int r;",
          "943:   char newpath[2048];",
          "944:   char *path = getenv(\"PATH\");",
          "945:   ASSERT(path != NULL);",
          "946:   snprintf(newpath, 2048, \";.;%s\", path);",
          "947:   SetEnvironmentVariable(\"PATH\", path);",
          "949:   init_process_options(\"\", exit_cb);",
          "950:   options.file = options.args[0] = \"program-that-had-better-not-exist\";",
          "951:   r = uv_spawn(uv_default_loop(), &process, &options);",
          "952:   ASSERT(r == UV_ENOENT || r == UV_EACCES);",
          "953:   ASSERT(0 == uv_is_active((uv_handle_t*) &process));",
          "954:   uv_close((uv_handle_t*) &process, NULL);",
          "955:   ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_DEFAULT));",
          "957:   MAKE_VALGRIND_HAPPY();",
          "958:   return 0;",
          "959: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d2434bf71e47802841bad218d521fa254d1ca2d",
      "candidate_info": {
        "commit_hash": "5d2434bf71e47802841bad218d521fa254d1ca2d",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/5d2434bf71e47802841bad218d521fa254d1ca2d",
        "files": [
          "include/uv-unix.h",
          "include/uv-win.h",
          "include/uv.h",
          "src/unix/thread.c",
          "src/win/thread.c",
          "test/test-list.h",
          "test/test-thread.c"
        ],
        "message": "unix, windows: add thread-local storage API\n\nUses the pthread_key_{create,delete} and pthread_{get,set}specific\nfunctions on UNIX platforms, Tls{Alloc,Free} and Tls{Get,Set}Value\non Windows.\n\nFixes #904.",
        "before_after_code_files": [
          "include/uv-unix.h||include/uv-unix.h",
          "include/uv-win.h||include/uv-win.h",
          "include/uv.h||include/uv.h",
          "src/unix/thread.c||src/unix/thread.c",
          "src/win/thread.c||src/win/thread.c",
          "test/test-list.h||test/test-list.h",
          "test/test-thread.c||test/test-thread.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-unix.h||include/uv-unix.h": [
          "File: include/uv-unix.h -> include/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "131: typedef pthread_rwlock_t uv_rwlock_t;",
          "132: typedef UV_PLATFORM_SEM_T uv_sem_t;",
          "133: typedef pthread_cond_t uv_cond_t;",
          "136: #if defined(__APPLE__) && defined(__MACH__)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134: typedef pthread_key_t uv_key_t;",
          "",
          "---------------"
        ],
        "include/uv-win.h||include/uv-win.h": [
          "File: include/uv-win.h -> include/uv-win.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:   uv_sem_t turnstile2;",
          "251: } uv_barrier_t;",
          "253: #define UV_ONCE_INIT { 0, NULL }",
          "255: typedef struct uv_once_s {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253: typedef struct {",
          "254:   DWORD tls_index;",
          "255: } uv_key_t;",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2013: UV_EXTERN void uv_once(uv_once_t* guard, void (*callback)(void));",
          "2015: UV_EXTERN int uv_thread_create(uv_thread_t *tid,",
          "2016:     void (*entry)(void *arg), void *arg);",
          "2017: UV_EXTERN unsigned long uv_thread_self(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2022: UV_EXTERN int uv_key_create(uv_key_t* key);",
          "2023: UV_EXTERN void uv_key_delete(uv_key_t* key);",
          "2024: UV_EXTERN void* uv_key_get(uv_key_t* key);",
          "2025: UV_EXTERN void uv_key_set(uv_key_t* key, void* value);",
          "",
          "---------------"
        ],
        "src/unix/thread.c||src/unix/thread.c": [
          "File: src/unix/thread.c -> src/unix/thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "441: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "445: int uv_key_create(uv_key_t* key) {",
          "446:   return -pthread_key_create(key, NULL);",
          "447: }",
          "450: void uv_key_delete(uv_key_t* key) {",
          "451:   if (pthread_key_delete(*key))",
          "452:     abort();",
          "453: }",
          "456: void* uv_key_get(uv_key_t* key) {",
          "457:   return pthread_getspecific(*key);",
          "458: }",
          "461: void uv_key_set(uv_key_t* key, void* value) {",
          "462:   if (pthread_setspecific(*key, value))",
          "463:     abort();",
          "464: }",
          "",
          "---------------"
        ],
        "src/win/thread.c||src/win/thread.c": [
          "File: src/win/thread.c -> src/win/thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "680:   uv_sem_wait(&barrier->turnstile2);",
          "681:   uv_sem_post(&barrier->turnstile2);",
          "682: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "685: int uv_key_create(uv_key_t* key) {",
          "686:   key->tls_index = TlsAlloc();",
          "687:   if (key->tls_index == TLS_OUT_OF_INDEXES)",
          "688:     return UV_ENOMEM;",
          "689:   return 0;",
          "690: }",
          "693: void uv_key_delete(uv_key_t* key) {",
          "694:   if (TlsFree(key->tls_index) == FALSE)",
          "695:     abort();",
          "696:   key->tls_index = TLS_OUT_OF_INDEXES;",
          "697: }",
          "700: void* uv_key_get(uv_key_t* key) {",
          "701:   void* value;",
          "703:   value = TlsGetValue(key->tls_index);",
          "704:   if (value == NULL)",
          "705:     if (GetLastError() != ERROR_SUCCESS)",
          "706:       abort();",
          "708:   return value;",
          "709: }",
          "712: void uv_key_set(uv_key_t* key, void* value) {",
          "713:   if (TlsSetValue(key->tls_index, value) == FALSE)",
          "714:     abort();",
          "715: }",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "203: TEST_DECLARE   (threadpool_cancel_work)",
          "204: TEST_DECLARE   (threadpool_cancel_fs)",
          "205: TEST_DECLARE   (threadpool_cancel_single)",
          "206: TEST_DECLARE   (thread_mutex)",
          "207: TEST_DECLARE   (thread_rwlock)",
          "208: TEST_DECLARE   (thread_create)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206: TEST_DECLARE   (thread_local_storage)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "496:   TEST_ENTRY  (threadpool_cancel_work)",
          "497:   TEST_ENTRY  (threadpool_cancel_fs)",
          "498:   TEST_ENTRY  (threadpool_cancel_single)",
          "499:   TEST_ENTRY  (thread_mutex)",
          "500:   TEST_ENTRY  (thread_rwlock)",
          "501:   TEST_ENTRY  (thread_create)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "500:   TEST_ENTRY  (thread_local_storage)",
          "",
          "---------------"
        ],
        "test/test-thread.c||test/test-thread.c": [
          "File: test/test-thread.c -> test/test-thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: static void fs_cb(uv_fs_t* handle);",
          "57: static volatile int thread_called;",
          "60: static void getaddrinfo_do(struct getaddrinfo_req* req) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: static uv_key_t tls_key;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:   return 0;",
          "183: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187: static void tls_thread(void* arg) {",
          "188:   ASSERT(NULL == uv_key_get(&tls_key));",
          "189:   uv_key_set(&tls_key, arg);",
          "190:   ASSERT(arg == uv_key_get(&tls_key));",
          "191:   uv_key_set(&tls_key, NULL);",
          "192:   ASSERT(NULL == uv_key_get(&tls_key));",
          "193: }",
          "196: TEST_IMPL(thread_local_storage) {",
          "197:   char name[] = \"main\";",
          "198:   uv_thread_t threads[2];",
          "199:   ASSERT(0 == uv_key_create(&tls_key));",
          "200:   ASSERT(NULL == uv_key_get(&tls_key));",
          "201:   uv_key_set(&tls_key, name);",
          "202:   ASSERT(name == uv_key_get(&tls_key));",
          "203:   ASSERT(0 == uv_thread_create(threads + 0, tls_thread, threads + 0));",
          "204:   ASSERT(0 == uv_thread_create(threads + 1, tls_thread, threads + 1));",
          "205:   ASSERT(0 == uv_thread_join(threads + 0));",
          "206:   ASSERT(0 == uv_thread_join(threads + 1));",
          "207:   uv_key_delete(&tls_key);",
          "208:   return 0;",
          "209: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}