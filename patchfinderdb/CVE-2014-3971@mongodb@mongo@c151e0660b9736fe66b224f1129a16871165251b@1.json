{
  "cve_id": "CVE-2014-3971",
  "cve_desc": "The CmdAuthenticate::_authenticateX509 function in db/commands/authentication_commands.cpp in mongod in MongoDB 2.6.x before 2.6.2 allows remote attackers to cause a denial of service (daemon crash) by attempting authentication with an invalid X.509 client certificate.",
  "repo": "mongodb/mongo",
  "patch_hash": "c151e0660b9736fe66b224f1129a16871165251b",
  "patch_info": {
    "commit_hash": "c151e0660b9736fe66b224f1129a16871165251b",
    "repo": "mongodb/mongo",
    "commit_url": "https://github.com/mongodb/mongo/commit/c151e0660b9736fe66b224f1129a16871165251b",
    "files": [
      "src/mongo/db/commands/authentication_commands.cpp"
    ],
    "message": "SERVER-13573 Fix x.509 auth exception",
    "before_after_code_files": [
      "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp"
    ]
  },
  "patch_diff": {
    "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp": [
      "File: src/mongo/db/commands/authentication_commands.cpp -> src/mongo/db/commands/authentication_commands.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "303:         }",
      "304:         else {",
      "305:             std::string srvSubjectName = getSSLManager()->getServerSubjectName();",
      "312:             int clusterAuthMode = serverGlobalParams.clusterAuthMode.load();",
      "314:                 if (clusterAuthMode == ServerGlobalParams::ClusterAuthMode_undefined ||",
      "315:                     clusterAuthMode == ServerGlobalParams::ClusterAuthMode_keyFile) {",
      "316:                     return Status(ErrorCodes::AuthenticationFailed, \"The provided certificate \"",
      "",
      "[Removed Lines]",
      "306:             std::string srvClusterId = srvSubjectName.substr(srvSubjectName.find(\",OU=\"));",
      "307:             std::string peerClusterId = subjectName.substr(subjectName.find(\",OU=\"));",
      "309:             fassert(17002, !srvClusterId.empty() && srvClusterId != srvSubjectName);",
      "313:             if (srvClusterId == peerClusterId) {",
      "",
      "[Added Lines]",
      "307:             size_t srvClusterIdPos = srvSubjectName.find(\",OU=\");",
      "308:             size_t peerClusterIdPos = subjectName.find(\",OU=\");",
      "310:             std::string srvClusterId = srvClusterIdPos != std::string::npos ?",
      "311:                 srvSubjectName.substr(srvClusterIdPos) : \"\";",
      "312:             std::string peerClusterId = peerClusterIdPos != std::string::npos ?",
      "313:                 subjectName.substr(peerClusterIdPos) : \"\";",
      "317:             if (srvClusterId == peerClusterId && !srvClusterId.empty()) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6685c058c7bf4444f14fcae61f56b7783b5edebe",
      "candidate_info": {
        "commit_hash": "6685c058c7bf4444f14fcae61f56b7783b5edebe",
        "repo": "mongodb/mongo",
        "commit_url": "https://github.com/mongodb/mongo/commit/6685c058c7bf4444f14fcae61f56b7783b5edebe",
        "files": [
          "src/mongo/client/dbclient.cpp",
          "src/mongo/client/dbclientinterface.h",
          "src/mongo/db/auth/security_key.cpp",
          "src/mongo/db/auth/security_key.h",
          "src/mongo/db/cmdline.cpp",
          "src/mongo/db/cmdline.h",
          "src/mongo/db/commands/authentication_commands.cpp",
          "src/mongo/db/commands/isself.cpp",
          "src/mongo/db/db.cpp",
          "src/mongo/db/initialize_server_global_state.cpp",
          "src/mongo/db/repl/connections.h",
          "src/mongo/db/repl/oplogreader.cpp",
          "src/mongo/db/repl/sync_source_feedback.cpp",
          "src/mongo/s/server.cpp",
          "src/mongo/s/shard.cpp",
          "src/mongo/util/net/sock.cpp",
          "src/mongo/util/net/ssl_manager.cpp",
          "src/mongo/util/net/ssl_manager.h"
        ],
        "message": "SERVER-7455 keyfile replacement, command line parameters and upgrade",
        "before_after_code_files": [
          "src/mongo/client/dbclient.cpp||src/mongo/client/dbclient.cpp",
          "src/mongo/client/dbclientinterface.h||src/mongo/client/dbclientinterface.h",
          "src/mongo/db/auth/security_key.cpp||src/mongo/db/auth/security_key.cpp",
          "src/mongo/db/auth/security_key.h||src/mongo/db/auth/security_key.h",
          "src/mongo/db/cmdline.cpp||src/mongo/db/cmdline.cpp",
          "src/mongo/db/cmdline.h||src/mongo/db/cmdline.h",
          "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp",
          "src/mongo/db/commands/isself.cpp||src/mongo/db/commands/isself.cpp",
          "src/mongo/db/db.cpp||src/mongo/db/db.cpp",
          "src/mongo/db/initialize_server_global_state.cpp||src/mongo/db/initialize_server_global_state.cpp",
          "src/mongo/db/repl/connections.h||src/mongo/db/repl/connections.h",
          "src/mongo/db/repl/oplogreader.cpp||src/mongo/db/repl/oplogreader.cpp",
          "src/mongo/db/repl/sync_source_feedback.cpp||src/mongo/db/repl/sync_source_feedback.cpp",
          "src/mongo/s/server.cpp||src/mongo/s/server.cpp",
          "src/mongo/s/shard.cpp||src/mongo/s/shard.cpp",
          "src/mongo/util/net/sock.cpp||src/mongo/util/net/sock.cpp",
          "src/mongo/util/net/ssl_manager.cpp||src/mongo/util/net/ssl_manager.cpp",
          "src/mongo/util/net/ssl_manager.h||src/mongo/util/net/ssl_manager.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp"
          ],
          "candidate": [
            "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/mongo/client/dbclient.cpp||src/mongo/client/dbclient.cpp": [
          "File: src/mongo/client/dbclient.cpp -> src/mongo/client/dbclient.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "566:                     errmsg,",
          "567:                     _authMongoCR(userSource, user, password, errmsg, digestPassword));",
          "568:         }",
          "569:         else if (mechanism == StringData(\"MONGODB-X509\", StringData::LiteralTag())){",
          "570:             std::string userSource;",
          "571:             uassertStatusOK(bsonExtractStringField(params,",
          "572:                                                    saslCommandUserSourceFieldName,",
          "573:                                                    &userSource));",
          "579:             std::string errmsg;",
          "580:             uassert(ErrorCodes::AuthenticationFailed,",
          "581:                     errmsg,",
          "583:         }",
          "584:         else if (saslClientAuthenticate != NULL) {",
          "585:             uassertStatusOK(saslClientAuthenticate(this, params));",
          "586:         }",
          "587:         else {",
          "588:             uasserted(ErrorCodes::BadValue,",
          "590:         }",
          "591:     };",
          "",
          "[Removed Lines]",
          "574:             std::string user;",
          "575:             uassertStatusOK(bsonExtractStringField(params,",
          "576:                                                    saslCommandUserFieldName,",
          "577:                                                    &user));",
          "582:                     _authMongoX509(userSource, user, errmsg));",
          "589:                       \"SASL authentication support not compiled into client library.\");",
          "",
          "[Added Lines]",
          "569: #ifdef MONGO_SSL",
          "578:                     _authX509(userSource, getSSLManager()->getClientSubjectName(), errmsg));",
          "580: #endif",
          "586:                       mechanism + \" mechanism support not compiled into client library.\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "614:         }",
          "615:     }",
          "634:     bool DBClientWithCommands::_authMongoCR(const string &dbname,",
          "635:                                             const string &username,",
          "636:                                             const string &password_text,",
          "",
          "[Removed Lines]",
          "617:     bool DBClientWithCommands::_authMongoX509(const string&dbname,",
          "618:                                               const string &username,",
          "619:                                               string& errmsg){",
          "620:         BSONObj authCmd;",
          "621:         BSONObjBuilder cmdBuilder;",
          "622:         cmdBuilder << \"authenticate\" << 1 << \"mechanism\" << \"MONGODB-X509\" << \"user\" << username;",
          "623:         authCmd = cmdBuilder.done();",
          "625:         BSONObj info;",
          "626:         if( runCommand(dbname, authCmd, info) ) {",
          "627:             return true;",
          "628:         }",
          "630:         errmsg = info.toString();",
          "631:         return false;",
          "632:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "679:         return false;",
          "680:     }",
          "682:     void DBClientWithCommands::logout(const string &dbname, BSONObj& info) {",
          "683:         runCommand(dbname, BSON(\"logout\" << 1), info);",
          "684:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "662:     bool DBClientWithCommands::_authX509(const string&dbname,",
          "663:                                               const string &username,",
          "664:                                               string& errmsg){",
          "665:         BSONObj authCmd;",
          "666:         BSONObjBuilder cmdBuilder;",
          "667:         cmdBuilder << \"authenticate\" << 1 << \"mechanism\" << \"MONGODB-X509\" << \"user\" << username;",
          "668:         authCmd = cmdBuilder.done();",
          "670:         BSONObj info;",
          "671:         if( runCommand(dbname, authCmd, info) ) {",
          "672:             return true;",
          "673:         }",
          "675:         errmsg = info.toString();",
          "676:         return false;",
          "677:     }",
          "",
          "---------------"
        ],
        "src/mongo/client/dbclientinterface.h||src/mongo/client/dbclientinterface.h": [
          "File: src/mongo/client/dbclientinterface.h -> src/mongo/client/dbclientinterface.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "992:                             const string &username,",
          "993:                             string& errmsg);",
          "",
          "[Removed Lines]",
          "991:         bool _authMongoX509(const string&dbname,",
          "",
          "[Added Lines]",
          "991:         bool _authX509(const string&dbname,",
          "",
          "---------------"
        ],
        "src/mongo/db/auth/security_key.cpp||src/mongo/db/auth/security_key.cpp": [
          "File: src/mongo/db/auth/security_key.cpp -> src/mongo/db/auth/security_key.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"mongo/db/auth/privilege.h\"",
          "27: #include \"mongo/client/sasl_client_authenticate.h\"",
          "29: namespace mongo {",
          "31:     bool setInternalUserAuthParams(BSONObj authParams) {",
          "34:     }",
          "36:     bool authenticateInternalUser(DBClientWithCommands* conn){",
          "37:         try {",
          "38:             conn->auth(internalSecurity.authParams);",
          "39:             return true;",
          "40:         } catch(const UserException& ex) {",
          "42:             return false;",
          "43:         }",
          "44:     }",
          "",
          "[Removed Lines]",
          "32:         internalSecurity.authParams = authParams.copy();",
          "33:         return true;",
          "41:             log() << \"can't authenticate as internal user, error: \" << ex.what() << endl;",
          "",
          "[Added Lines]",
          "29: static bool authParamsSet = false;",
          "33:     bool isInternalAuthSet() {",
          "34:        return authParamsSet;",
          "35:     }",
          "38:         if (!isInternalAuthSet()) {",
          "39:             internalSecurity.authParams = authParams.copy();",
          "40:             authParamsSet = true;",
          "41:             return true;",
          "42:         }",
          "43:         else {",
          "44:             log() << \"Internal auth params have already been set\" << endl;",
          "45:             return false;",
          "46:         }",
          "50:         if (!isInternalAuthSet()) {",
          "51:             log() << \"ERROR: No authentication params set for internal user\" << endl;",
          "52:             return false;",
          "53:         }",
          "58:             log() << \"can't authenticate to \" << conn->toString() << \" as internal user, error: \"",
          "59:                   << ex.what() << endl;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:         DBClientConnection conn;",
          "116:         internalSecurity.pwd = conn.createPasswordDigest(internalSecurity.user, str);",
          "124:         return true;",
          "125:     }",
          "",
          "[Removed Lines]",
          "118:         setInternalUserAuthParams(BSON(saslCommandMechanismFieldName << \"MONGODB-CR\" <<",
          "119:                        saslCommandUserSourceFieldName << \"local\" <<",
          "120:                        saslCommandUserFieldName << internalSecurity.user <<",
          "121:                        saslCommandPasswordFieldName << internalSecurity.pwd <<",
          "122:                        saslCommandDigestPasswordFieldName << false));",
          "",
          "[Added Lines]",
          "136:         if (cmdLine.clusterAuthMode == \"keyfile\" || cmdLine.clusterAuthMode == \"sendKeyfile\") {",
          "137:             setInternalUserAuthParams(BSON(saslCommandMechanismFieldName << \"MONGODB-CR\" <<",
          "138:                                       saslCommandUserSourceFieldName << \"local\" <<",
          "139:                                       saslCommandUserFieldName << internalSecurity.user <<",
          "140:                                       saslCommandPasswordFieldName << internalSecurity.pwd <<",
          "141:                                       saslCommandDigestPasswordFieldName << false));",
          "142:         }",
          "",
          "---------------"
        ],
        "src/mongo/db/auth/security_key.h||src/mongo/db/auth/security_key.h": [
          "File: src/mongo/db/auth/security_key.h -> src/mongo/db/auth/security_key.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"mongo/client/dbclientinterface.h\"",
          "23: namespace mongo {",
          "29:     extern bool setInternalUserAuthParams(BSONObj authParams);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:     extern bool isInternalAuthSet();",
          "",
          "---------------"
        ],
        "src/mongo/db/cmdline.cpp||src/mongo/db/cmdline.cpp": [
          "File: src/mongo/db/cmdline.cpp -> src/mongo/db/cmdline.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:         (\"setParameter\", po::value< std::vector<std::string> >()->composing(),",
          "89:                 \"Set a configurable parameter\")",
          "90:         (\"httpinterface\", \"enable http interface\")",
          "91: #ifndef _WIN32",
          "92:         (\"nounixsocket\", \"disable listening on unix sockets\")",
          "93:         (\"unixSocketPrefix\", po::value<string>(), \"alternative directory for UNIX domain sockets (defaults to /tmp)\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:         (\"clusterAuthMode\", po::value<std::string>(&cmdLine.clusterAuthMode),",
          "92:          \"Authentication mode used for cluster authentication.\"",
          "93:          \" Alternatives are (keyfile|sendKeyfile|sendX509|x509)\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415:                 }",
          "416:             }",
          "417:         }",
          "419: #ifdef MONGO_SSL",
          "420:         if (params.count(\"sslWeakCertificateValidation\")) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "421:         if (!params.count(\"clusterAuthMode\")){",
          "422:             cmdLine.clusterAuthMode = \"keyfile\";",
          "423:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "451:             log() << \"need to enable sslOnNormalPorts\" << endl;",
          "452:             return false;",
          "453:         }",
          "454: #endif",
          "456:         return true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "460:         if (cmdLine.clusterAuthMode == \"sendKeyfile\" ||",
          "461:             cmdLine.clusterAuthMode == \"sendX509\" ||",
          "462:             cmdLine.clusterAuthMode == \"x509\") {",
          "463:             if (!cmdLine.sslOnNormalPorts){",
          "464:                 log() << \"need to enable sslOnNormalPorts\" << endl;",
          "465:                 return false;",
          "466:             }",
          "467:         }",
          "468:         else if (cmdLine.clusterAuthMode != \"keyfile\") {",
          "469:             log() << \"unsupported value for clusterAuthMode \" << cmdLine.clusterAuthMode << endl;",
          "470:             return false;",
          "471:         }",
          "472: #else // ifdef MONGO_SSL",
          "474:         if (cmdLine.clusterAuthMode != \"keyfile\") {",
          "475:             log() << \"unsupported value for clusterAuthMode \" << cmdLine.clusterAuthMode << endl;",
          "476:             return false;",
          "477:         }",
          "",
          "---------------"
        ],
        "src/mongo/db/cmdline.h||src/mongo/db/cmdline.h": [
          "File: src/mongo/db/cmdline.h -> src/mongo/db/cmdline.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:         std::string logpath;   // Path to log file, if logging to a file; otherwise, empty.",
          "127:         bool logAppend;        // True if logging to a file in append mode.",
          "128:         bool logWithSyslog;    // True if logging to syslog; must not be set if logpath is set.",
          "130: #ifndef _WIN32",
          "131:         ProcessId parentProc;      // --fork pid of initial process",
          "132:         ProcessId leaderProc;      // --fork pid of leader process",
          "133: #endif",
          "135: #ifdef MONGO_SSL",
          "136:         bool sslOnNormalPorts;      // --sslOnNormalPorts",
          "137:         std::string sslPEMKeyFile;       // --sslPEMKeyFile",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:         std::string clusterAuthMode; // Cluster authentication mode",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:         std::string sslClusterPassword;   // --sslInternalKeyPassword",
          "141:         std::string sslCAFile;      // --sslCAFile",
          "142:         std::string sslCRLFile;     // --sslCRLFile",
          "145: #endif",
          "",
          "[Removed Lines]",
          "143:         bool sslWeakCertificateValidation;",
          "144:         bool sslFIPSMode;",
          "",
          "[Added Lines]",
          "143:         bool sslWeakCertificateValidation; // --sslWeakCertificateValidation",
          "144:         bool sslFIPSMode; // --sslFIPSMode",
          "",
          "---------------"
        ],
        "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp": [
          "File: src/mongo/db/commands/authentication_commands.cpp -> src/mongo/db/commands/authentication_commands.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:         string user = cmdObj.getStringField(\"user\");",
          "122:         if (!_areNonceAuthenticateCommandsEnabled) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:         if (user == internalSecurity.user && cmdLine.clusterAuthMode == \"x509\") {",
          "123:             errmsg = \"Mechanism x509 is required for internal cluster authentication\";",
          "124:             result.append(saslCommandCodeFieldName, ErrorCodes::AuthenticationFailed);",
          "125:             return false;",
          "126:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:             return false;",
          "238:         }",
          "239:         else {",
          "241:             StringData srvClusterId = srvSubjectName.substr(0, srvSubjectName.find(\"/CN\")+1);",
          "242:             StringData peerClusterId = subjectName.substr(0, subjectName.find(\"/CN\")+1);",
          "245:             if (srvClusterId == peerClusterId) {",
          "246:                 authorizationSession->grantInternalAuthorization(UserName(user, \"$external\"));",
          "247:             }",
          "249:             else {",
          "250:                 Principal* principal = new Principal(UserName(user, \"$external\"));",
          "251:                 principal->setImplicitPrivilegeAcquisition(true);",
          "",
          "[Removed Lines]",
          "240:             StringData srvSubjectName = getSSLManager()->getSubjectName();",
          "",
          "[Added Lines]",
          "246:             StringData srvSubjectName = getSSLManager()->getServerSubjectName();",
          "252:                 if (cmdLine.clusterAuthMode == \"keyfile\") {",
          "253:                     errmsg = \"X509 authentication is not allowed for cluster authentication\";",
          "254:                     result.append(saslCommandCodeFieldName, ErrorCodes::AuthenticationFailed);",
          "255:                     return false;",
          "256:                 }",
          "",
          "---------------"
        ],
        "src/mongo/db/commands/isself.cpp||src/mongo/db/commands/isself.cpp": [
          "File: src/mongo/db/commands/isself.cpp -> src/mongo/db/commands/isself.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:                 return false;",
          "251:             }",
          "254:                 if (!authenticateInternalUser(&conn)) {",
          "255:                     return false;",
          "256:                 }",
          "",
          "[Removed Lines]",
          "253:             if (AuthorizationManager::isAuthEnabled() && !cmdLine.keyFile.empty() ) {",
          "",
          "[Added Lines]",
          "253:             if (AuthorizationManager::isAuthEnabled() && isInternalAuthSet()) {",
          "",
          "---------------"
        ],
        "src/mongo/db/db.cpp||src/mongo/db/db.cpp": [
          "File: src/mongo/db/db.cpp -> src/mongo/db/db.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: #include \"mongo/util/exception_filter_win32.h\"",
          "65: #include \"mongo/util/file_allocator.h\"",
          "66: #include \"mongo/util/net/message_server.h\"",
          "67: #include \"mongo/util/ntservice.h\"",
          "68: #include \"mongo/util/ramlog.h\"",
          "69: #include \"mongo/util/stacktrace.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: #include \"mongo/util/net/ssl_manager.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1302:     return Status::OK();",
          "1303: }",
          "1305: static int mongoDbMain(int argc, char* argv[], char **envp) {",
          "1306:     static StaticObserver staticObserver;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1306: #ifdef MONGO_SSL",
          "1307: MONGO_INITIALIZER_GENERAL(setSSLManagerType,",
          "1308:                           MONGO_NO_PREREQUISITES,",
          "1309:                           (\"SSLManager\"))(InitializerContext* context) {",
          "1310:     isSSLServer = true;",
          "1311:     return Status::OK();",
          "1312: }",
          "1313: #endif",
          "",
          "---------------"
        ],
        "src/mongo/db/initialize_server_global_state.cpp||src/mongo/db/initialize_server_global_state.cpp": [
          "File: src/mongo/db/initialize_server_global_state.cpp -> src/mongo/db/initialize_server_global_state.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #endif",
          "30: #include \"mongo/base/init.h\"",
          "31: #include \"mongo/db/auth/authorization_manager.h\"",
          "32: #include \"mongo/db/auth/security_key.h\"",
          "33: #include \"mongo/db/cmdline.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include \"mongo/client/sasl_client_authenticate.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: #include \"mongo/platform/process_id.h\"",
          "42: #include \"mongo/util/log.h\"",
          "43: #include \"mongo/util/net/listen.h\"",
          "44: #include \"mongo/util/processinfo.h\"",
          "46: namespace fs = boost::filesystem;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: #include \"mongo/util/net/ssl_manager.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "241:             writePidFile(cmdLine.pidFile);",
          "242:         }",
          "246:             if (!setUpSecurityKey(cmdLine.keyFile)) {",
          "248:                 return false;",
          "",
          "[Removed Lines]",
          "244:         if (!cmdLine.keyFile.empty()) {",
          "",
          "[Added Lines]",
          "246:         if (!cmdLine.keyFile.empty() && cmdLine.clusterAuthMode != \"x509\") {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "251:             AuthorizationManager::setAuthEnabled(true);",
          "252:         }",
          "254:         return true;",
          "255:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255: #ifdef MONGO_SSL",
          "256:         if (cmdLine.clusterAuthMode == \"x509\" || cmdLine.clusterAuthMode == \"sendX509\") {",
          "257:             setInternalUserAuthParams(BSON(saslCommandMechanismFieldName << \"MONGODB-X509\" <<",
          "258:                                            saslCommandUserSourceFieldName << \"$external\" <<",
          "259:                                            saslCommandUserFieldName <<",
          "260:                                            getSSLManager()->getClientSubjectName()));",
          "261:         }",
          "262: #endif",
          "",
          "---------------"
        ],
        "src/mongo/db/repl/connections.h||src/mongo/db/repl/connections.h": [
          "File: src/mongo/db/repl/connections.h -> src/mongo/db/repl/connections.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:           if (AuthorizationManager::isAuthEnabled()) {",
          "136:           }",
          "138:           return true;",
          "",
          "[Removed Lines]",
          "132:               if (!authenticateInternalUser(connInfo->cc.get())) {",
          "133:                   log() << \"could not authenticate against \" << _hostport << \", \" << err << rsLog;",
          "134:                   return false;",
          "135:               }",
          "",
          "[Added Lines]",
          "132:                 return authenticateInternalUser(connInfo->cc.get());",
          "",
          "---------------"
        ],
        "src/mongo/db/repl/oplogreader.cpp||src/mongo/db/repl/oplogreader.cpp": [
          "File: src/mongo/db/repl/oplogreader.cpp -> src/mongo/db/repl/oplogreader.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:             return false;",
          "59:         }",
          "62:             return authenticateInternalUser(conn);",
          "63:         }",
          "64:         BSONObj user;",
          "65:         {",
          "66:             Client::ReadContext ctxt(\"local.\");",
          "",
          "[Removed Lines]",
          "61:         if (internalSecurity.pwd.length() > 0) {",
          "",
          "[Added Lines]",
          "61:         if (isInternalAuthSet()) {",
          "",
          "---------------"
        ],
        "src/mongo/db/repl/sync_source_feedback.cpp||src/mongo/db/repl/sync_source_feedback.cpp": [
          "File: src/mongo/db/repl/sync_source_feedback.cpp -> src/mongo/db/repl/sync_source_feedback.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:             return false;",
          "48:         }",
          "52:         }",
          "53:         BSONObj user;",
          "54:         {",
          "55:             Client::ReadContext ctxt(\"local.\");",
          "",
          "[Removed Lines]",
          "50:         if (internalSecurity.pwd.length() > 0) {",
          "51:             return authenticateInternalUser(_connection.get());",
          "",
          "[Added Lines]",
          "50:         if (isInternalAuthSet()) {",
          "51:             return authenticateInternalUser(_connection.get());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:         massert(16889, \"bad user object? [1]\", !u.empty());",
          "67:         massert(16887, \"bad user object? [2]\", !p.empty());",
          "70:         if( !_connection->auth(\"local\", u.c_str(), p.c_str(), err, false) ) {",
          "71:             log() << \"replauthenticate: can't authenticate to master server, user:\" << u << endl;",
          "72:             return false;",
          "",
          "[Removed Lines]",
          "69:         string err;",
          "",
          "[Added Lines]",
          "70:         std::string err;",
          "",
          "---------------"
        ],
        "src/mongo/s/server.cpp||src/mongo/s/server.cpp": [
          "File: src/mongo/s/server.cpp -> src/mongo/s/server.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: #include \"mongo/util/log.h\"",
          "50: #include \"mongo/util/net/message.h\"",
          "51: #include \"mongo/util/net/message_server.h\"",
          "52: #include \"mongo/util/ntservice.h\"",
          "53: #include \"mongo/util/processinfo.h\"",
          "54: #include \"mongo/util/ramlog.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: #include \"mongo/util/net/ssl_manager.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "551:     return Status::OK();",
          "552: }",
          "554: int mongoSMain(int argc, char* argv[], char** envp) {",
          "555:     static StaticObserver staticObserver;",
          "556:     if (argc < 1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "555: #ifdef MONGO_SSL",
          "556: MONGO_INITIALIZER_GENERAL(setSSLManagerType,",
          "557:                           MONGO_NO_PREREQUISITES,",
          "558:                           (\"SSLManager\"))(InitializerContext* context) {",
          "559:     isSSLServer = true;",
          "560:     return Status::OK();",
          "561: }",
          "562: #endif",
          "",
          "---------------"
        ],
        "src/mongo/s/shard.cpp||src/mongo/s/shard.cpp": [
          "File: src/mongo/s/shard.cpp -> src/mongo/s/shard.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "405:     void ShardingConnectionHook::onCreate( DBClientBase * conn ) {",
          "406:         if(AuthorizationManager::isAuthEnabled()) {",
          "408:             LOG(2) << \"calling onCreate auth for \" << conn->toString() << endl;",
          "410:             bool result = authenticateInternalUser(conn);",
          "412:             uassert( 15847, str::stream() << \"can't authenticate to server \"",
          "414:                      result );",
          "415:         }",
          "",
          "[Removed Lines]",
          "407:             string err;",
          "413:                                           << conn->getServerAddress() << causedBy( err ),",
          "",
          "[Added Lines]",
          "412:                                           << conn->getServerAddress(),",
          "",
          "---------------"
        ],
        "src/mongo/util/net/sock.cpp||src/mongo/util/net/sock.cpp": [
          "File: src/mongo/util/net/sock.cpp -> src/mongo/util/net/sock.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "721: #ifdef MONGO_SSL",
          "722:         if (_ssl) {",
          "724:                            << \" err: \" << _sslManager->SSL_get_error(_ssl , ret)",
          "725:                            << \" \"",
          "726:                            << _sslManager->ERR_error_string(_sslManager->ERR_get_error(), NULL)",
          "",
          "[Removed Lines]",
          "723:             LOG(_logLevel) << \"SSL Error ret: \" << ret",
          "",
          "[Added Lines]",
          "723:             LOG(_logLevel) << \"SSL Error ret when receiving: \" << ret",
          "",
          "---------------"
        ],
        "src/mongo/util/net/ssl_manager.cpp||src/mongo/util/net/ssl_manager.cpp": [
          "File: src/mongo/util/net/ssl_manager.cpp -> src/mongo/util/net/ssl_manager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"mongo/util/net/sock.h\"",
          "33: #include \"mongo/util/scopeguard.h\"",
          "35: namespace mongo {",
          "37:     namespace {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include <openssl/evp.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:         struct Params {",
          "120:             Params(const std::string& pemfile,",
          "121:                    const std::string& pempwd,",
          "122:                    const std::string& cafile = \"\",",
          "123:                    const std::string& crlfile = \"\",",
          "124:                    bool weakCertificateValidation = false,",
          "125:                    bool fipsMode = false) :",
          "126:                 pemfile(pemfile),",
          "127:                 pempwd(pempwd),",
          "128:                 cafile(cafile),",
          "129:                 crlfile(crlfile),",
          "130:                 weakCertificateValidation(weakCertificateValidation),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:                    const std::string& clusterfile,",
          "125:                    const std::string& clusterpwd,",
          "132:                 clusterfile(clusterfile),",
          "133:                 clusterpwd(clusterpwd),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:             std::string pemfile;",
          "134:             std::string pempwd;",
          "135:             std::string cafile;",
          "136:             std::string crlfile;",
          "137:             bool weakCertificateValidation;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:             std::string clusterfile;",
          "142:             std::string clusterpwd;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "141:         class SSLManager : public SSLManagerInterface {",
          "142:         public:",
          "145:             virtual ~SSLManager();",
          "",
          "[Removed Lines]",
          "143:             explicit SSLManager(const Params& params);",
          "",
          "[Added Lines]",
          "151:             explicit SSLManager(const Params& params, bool isServer);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153:             virtual void cleanupThreadLocals();",
          "157:             }",
          "159:             virtual int SSL_read(SSL* ssl, void* buf, int num);",
          "",
          "[Removed Lines]",
          "155:             virtual std::string getSubjectName() {",
          "156:                 return _subjectName;",
          "",
          "[Added Lines]",
          "163:             virtual std::string getServerSubjectName() {",
          "164:                 return _serverSubjectName;",
          "165:             }",
          "167:             virtual std::string getClientSubjectName() {",
          "168:                 return _clientSubjectName;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "171:             virtual void SSL_free(SSL* ssl);",
          "173:         private:",
          "175:             std::string _password;",
          "176:             bool _validateCertificates;",
          "177:             bool _weakValidation;",
          "",
          "[Removed Lines]",
          "174:             SSL_CTX* _context;",
          "178:             std::string _subjectName;",
          "184:             SSL* _secure(int fd);",
          "",
          "[Added Lines]",
          "186:             SSL_CTX* _serverContext;  // SSL context for incoming connections",
          "187:             SSL_CTX* _clientContext;  // SSL context for outgoing connections",
          "191:             std::string _serverSubjectName;",
          "192:             std::string _clientSubjectName;",
          "198:             SSL* _secure(SSL_CTX* context, int fd);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "195:             void _handleSSLError(int code);",
          "",
          "[Removed Lines]",
          "198:             bool _setupPEM( const std::string& keyFile , const std::string& password );",
          "203:             bool _setupCA(const std::string& caFile);",
          "209:             bool _setupCRL(const std::string& crlFile);",
          "",
          "[Added Lines]",
          "214:             bool _initSSLContext(SSL_CTX** context, const Params& params);",
          "219:             bool _setSubjectName(const std::string& keyFile, std::string& subjectName);",
          "222:             bool _setupPEM(SSL_CTX* context,",
          "223:                            const std::string& keyFile,",
          "224:                            const std::string& password);",
          "229:             bool _setupCA(SSL_CTX* context, const std::string& caFile);",
          "235:             bool _setupCRL(SSL_CTX* context, const std::string& crlFile);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "231:     } // namespace",
          "233:     MONGO_INITIALIZER(SSLManager)(InitializerContext* context) {",
          "234:         SimpleMutex::scoped_lock lck(sslManagerMtx);",
          "235:         if (cmdLine.sslOnNormalPorts) {",
          "236:             const Params params(",
          "237:                 cmdLine.sslPEMKeyFile,",
          "238:                 cmdLine.sslPEMKeyPassword,",
          "239:                 cmdLine.sslCAFile,",
          "240:                 cmdLine.sslCRLFile,",
          "241:                 cmdLine.sslWeakCertificateValidation,",
          "242:                 cmdLine.sslFIPSMode);",
          "244:         }",
          "245:         return Status::OK();",
          "246:     }",
          "",
          "[Removed Lines]",
          "243:             theSSLManager = new SSLManager(params);",
          "",
          "[Added Lines]",
          "260:     bool isSSLServer = false;",
          "268:                 cmdLine.sslClusterFile,",
          "269:                 cmdLine.sslClusterPassword,",
          "274:             theSSLManager = new SSLManager(params, isSSLServer);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "278:     SSLManagerInterface::~SSLManagerInterface() {}",
          "281:         _validateCertificates(false),",
          "282:         _weakValidation(params.weakCertificateValidation) {",
          "",
          "[Removed Lines]",
          "280:     SSLManager::SSLManager(const Params& params) :",
          "",
          "[Added Lines]",
          "311:     SSLManager::SSLManager(const Params& params, bool isServer) :",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "294:         OpenSSL_add_all_algorithms();",
          "316:         }",
          "324:             }",
          "325:         }",
          "330:             }",
          "335:             }",
          "336:         }",
          "337:     }",
          "339:     SSLManager::~SSLManager() {",
          "340:     }",
          "342:     int SSLManager::password_cb(char *buf,int num, int rwflag,void *userdata) {",
          "",
          "[Removed Lines]",
          "296:         _context = SSL_CTX_new(SSLv23_method());",
          "297:         massert(15864,",
          "298:                 mongoutils::str::stream() << \"can't create SSL Context: \" <<",
          "299:                 _getSSLErrorMessage(ERR_get_error()),",
          "300:                 _context);",
          "303:         SSL_CTX_set_options(_context, SSL_OP_ALL);",
          "307:         SSL_CTX_set_mode(_context, SSL_MODE_AUTO_RETRY);",
          "310:         int status = SSL_CTX_set_session_id_context(",
          "311:             _context,",
          "312:             static_cast<unsigned char*>(static_cast<void*>(&_context)),",
          "313:             sizeof(_context));",
          "314:         if (!status) {",
          "315:             uasserted(16768,\"ssl initialization problem\");",
          "318:         SSLThreadInfo::init();",
          "319:         SSLThreadInfo::get();",
          "321:         if (!params.pemfile.empty()) {",
          "322:             if (!_setupPEM(params.pemfile, params.pempwd)) {",
          "323:                 uasserted(16562, \"ssl initialization problem\");",
          "326:         if (!params.cafile.empty()) {",
          "328:             if (!_setupCA(params.cafile)) {",
          "329:                 uasserted(16563, \"ssl initialization problem\");",
          "331:         }",
          "332:         if (!params.crlfile.empty()) {",
          "333:             if (!_setupCRL(params.crlfile)) {",
          "334:                 uasserted(16582, \"ssl initialization problem\");",
          "",
          "[Added Lines]",
          "327:         SSLThreadInfo::init();",
          "328:         SSLThreadInfo::get();",
          "330:         if (!_initSSLContext(&_clientContext, params)) {",
          "331:             uasserted(16768, \"ssl initialization problem\");",
          "335:         if (!isServer) {",
          "336:             _serverContext = NULL;",
          "338:             if (!params.pemfile.empty()) {",
          "339:                 if (!_setSubjectName(params.pemfile, _clientSubjectName)) {",
          "340:                     uasserted(16941, \"ssl initialization problem\");",
          "341:                 }",
          "345:         if (isServer) {",
          "346:             if (!_initSSLContext(&_serverContext, params)) {",
          "347:                 uasserted(16562, \"ssl initialization problem\");",
          "350:             if (!_setSubjectName(params.pemfile, _serverSubjectName)) {",
          "351:                 uasserted(16942, \"ssl initialization problem\");",
          "352:             }",
          "354:             if (!params.clusterfile.empty()) {",
          "355:                 if (!_setSubjectName(params.clusterfile, _clientSubjectName)) {",
          "356:                     uasserted(16943, \"ssl initialization problem\");",
          "357:                 }",
          "358:             }",
          "359:             else {",
          "360:                 if (!_setSubjectName(params.pemfile, _clientSubjectName)) {",
          "361:                     uasserted(16944, \"ssl initialization problem\");",
          "362:                 }",
          "368:         ERR_free_strings();",
          "369:         EVP_cleanup();",
          "371:         if (NULL != _serverContext) {",
          "372:             SSL_CTX_free(_serverContext);",
          "373:         }",
          "374:         if (NULL != _clientContext) {",
          "375:             SSL_CTX_free(_clientContext);",
          "376:         }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "389:         log() << \"FIPS 140-2 mode activated\" << endl;",
          "390:     }",
          "397:                 _getSSLErrorMessage(ERR_get_error()) << endl;",
          "398:             return false;",
          "399:         }",
          "406:         }",
          "412:         }",
          "419:         }",
          "422:         BIO *in = BIO_new(BIO_s_file_internal());",
          "424:             error() << \"failed to allocate BIO object: \" <<",
          "425:                 _getSSLErrorMessage(ERR_get_error()) << endl;",
          "426:             return false;",
          "",
          "[Removed Lines]",
          "392:     bool SSLManager::_setupPEM(const std::string& keyFile , const std::string& password) {",
          "393:         _password = password;",
          "395:         if ( SSL_CTX_use_certificate_chain_file( _context , keyFile.c_str() ) != 1 ) {",
          "396:             error() << \"cannot read certificate file: \" << keyFile << ' ' <<",
          "403:         if (!password.empty()) {",
          "404:             SSL_CTX_set_default_passwd_cb_userdata( _context , this );",
          "405:             SSL_CTX_set_default_passwd_cb( _context, &SSLManager::password_cb );",
          "408:         if ( SSL_CTX_use_PrivateKey_file( _context , keyFile.c_str() , SSL_FILETYPE_PEM ) != 1 ) {",
          "409:             error() << \"cannot read key file: \" << keyFile << ' ' <<",
          "410:                 _getSSLErrorMessage(ERR_get_error()) << endl;",
          "411:             return false;",
          "415:         if (SSL_CTX_check_private_key(_context) != 1) {",
          "416:             error() << \"SSL certificate validation: \" << _getSSLErrorMessage(ERR_get_error())",
          "417:                     << endl;",
          "418:             return false;",
          "423:         if(NULL == in){",
          "",
          "[Added Lines]",
          "429:     bool SSLManager::_initSSLContext(SSL_CTX** context, const Params& params) {",
          "431:         massert(15864,",
          "432:                 mongoutils::str::stream() << \"can't create SSL Context: \" <<",
          "433:                 _getSSLErrorMessage(ERR_get_error()),",
          "434:                 context);",
          "437:         SSL_CTX_set_options(*context, SSL_OP_ALL);",
          "441:         SSL_CTX_set_mode(*context, SSL_MODE_AUTO_RETRY);",
          "444:         int status = SSL_CTX_set_session_id_context(",
          "446:             static_cast<unsigned char*>(static_cast<void*>(context)),",
          "447:             sizeof(*context));",
          "449:         if (!status) {",
          "450:             error() << \"failed to set session id context: \" <<",
          "456:         if (context == &_clientContext && !params.clusterfile.empty()) {",
          "457:             EVP_set_pw_prompt(\"Enter cluster certificate passphrase\");",
          "458:             if (!_setupPEM(*context, params.clusterfile, params.clusterpwd)) {",
          "459:                 return false;",
          "460:             }",
          "463:         else if (!params.pemfile.empty()) {",
          "464:             EVP_set_pw_prompt(\"Enter PEM passphrase\");",
          "465:             if (!_setupPEM(*context, params.pemfile, params.pempwd)) {",
          "466:                 return false;",
          "467:             }",
          "470:         if (!params.cafile.empty()) {",
          "472:             if (!_setupCA(*context, params.cafile)) {",
          "473:                 return false;",
          "474:             }",
          "477:         if (!params.crlfile.empty()) {",
          "478:             if (!_setupCRL(*context, params.crlfile)) {",
          "479:                 return false;",
          "480:             }",
          "481:         }",
          "483:         return true;",
          "484:     }",
          "486:     bool SSLManager::_setSubjectName(const std::string& keyFile, std::string& subjectName) {",
          "489:         if (NULL == in){",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "428:         ON_BLOCK_EXIT(BIO_free, in);",
          "430:         if (BIO_read_filename(in, keyFile.c_str()) <= 0){",
          "432:                 _getSSLErrorMessage(ERR_get_error()) << endl;",
          "433:             return false;",
          "434:         }",
          "",
          "[Removed Lines]",
          "431:             error() << \"cannot read key file: \" << keyFile << ' ' <<",
          "",
          "[Added Lines]",
          "497:             error() << \"cannot read key file when setting subject name: \" << keyFile << ' ' <<",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "440:             return false;",
          "441:         }",
          "442:         ON_BLOCK_EXIT(X509_free, x509);",
          "445:         return true;",
          "446:     }",
          "451:             error() << \"cannot read certificate authority file: \" << caFile << \" \" <<",
          "452:                 _getSSLErrorMessage(ERR_get_error()) << endl;",
          "453:             return false;",
          "454:         }",
          "458:         _validateCertificates = true;",
          "459:         return true;",
          "460:     }",
          "464:         fassert(16583, store);",
          "466:         X509_STORE_set_flags(store, X509_V_FLAG_CRL_CHECK);",
          "",
          "[Removed Lines]",
          "443:         _subjectName = getCertificateSubjectName(x509);",
          "448:     bool SSLManager::_setupCA(const std::string& caFile) {",
          "450:         if (SSL_CTX_load_verify_locations(_context, caFile.c_str(), NULL) != 1) {",
          "457:         SSL_CTX_set_verify(_context, SSL_VERIFY_PEER, &SSLManager::verify_cb);",
          "462:     bool SSLManager::_setupCRL(const std::string& crlFile) {",
          "463:         X509_STORE *store = SSL_CTX_get_cert_store(_context);",
          "",
          "[Added Lines]",
          "509:         subjectName = getCertificateSubjectName(x509);",
          "511:         return true;",
          "512:     }",
          "514:     bool SSLManager::_setupPEM(SSL_CTX* context,",
          "515:                                const std::string& keyFile,",
          "516:                                const std::string& password) {",
          "517:         _password = password;",
          "519:         if ( SSL_CTX_use_certificate_chain_file( context , keyFile.c_str() ) != 1 ) {",
          "520:             error() << \"cannot read certificate file: \" << keyFile << ' ' <<",
          "521:                 _getSSLErrorMessage(ERR_get_error()) << endl;",
          "522:             return false;",
          "523:         }",
          "527:         if (!password.empty()) {",
          "528:             SSL_CTX_set_default_passwd_cb_userdata( context , this );",
          "529:             SSL_CTX_set_default_passwd_cb( context, &SSLManager::password_cb );",
          "530:         }",
          "532:         if ( SSL_CTX_use_PrivateKey_file( context , keyFile.c_str() , SSL_FILETYPE_PEM ) != 1 ) {",
          "533:             error() << \"cannot read PEM key file: \" << keyFile << ' ' <<",
          "534:                 _getSSLErrorMessage(ERR_get_error()) << endl;",
          "535:             return false;",
          "536:         }",
          "539:         if (SSL_CTX_check_private_key(context) != 1) {",
          "540:             error() << \"SSL certificate validation: \" << _getSSLErrorMessage(ERR_get_error())",
          "541:                     << endl;",
          "542:             return false;",
          "543:         }",
          "548:     bool SSLManager::_setupCA(SSL_CTX* context, const std::string& caFile) {",
          "550:         if (SSL_CTX_load_verify_locations(context, caFile.c_str(), NULL) != 1) {",
          "557:         SSL_CTX_set_verify(context, SSL_VERIFY_PEER, &SSLManager::verify_cb);",
          "562:     bool SSLManager::_setupCRL(SSL_CTX* context, const std::string& crlFile) {",
          "563:         X509_STORE *store = SSL_CTX_get_cert_store(context);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "479:         return true;",
          "480:     }",
          "485:         SSLThreadInfo::get();",
          "488:         massert(15861,",
          "489:                 _getSSLErrorMessage(ERR_get_error()),",
          "490:                 ssl);",
          "492:         int status = SSL_set_fd( ssl , fd );",
          "493:         massert(16510,",
          "494:                 _getSSLErrorMessage(ERR_get_error()),",
          "",
          "[Removed Lines]",
          "482:     SSL* SSLManager::_secure(int fd) {",
          "487:         SSL * ssl = SSL_new(_context);",
          "",
          "[Added Lines]",
          "582:     SSL* SSLManager::_secure(SSL_CTX* context, int fd) {",
          "587:         SSL * ssl = SSL_new(context);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "513:         return ret;",
          "514:     }",
          "515:     SSL* SSLManager::connect(int fd) {",
          "517:         ScopeGuard guard = MakeGuard(::SSL_free, ssl);",
          "518:         int ret = _ssl_connect(ssl);",
          "519:         if (ret != 1)",
          "",
          "[Removed Lines]",
          "516:         SSL* ssl = _secure(fd);",
          "",
          "[Added Lines]",
          "617:         SSL* ssl = _secure(_clientContext, fd);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "523:     }",
          "525:     SSL* SSLManager::accept(int fd) {",
          "527:         ScopeGuard guard = MakeGuard(::SSL_free, ssl);",
          "528:         int ret = SSL_accept(ssl);",
          "529:         if (ret != 1)",
          "",
          "[Removed Lines]",
          "526:         SSL* ssl = _secure(fd);",
          "",
          "[Added Lines]",
          "627:         SSL* ssl = _secure(_serverContext, fd);",
          "",
          "---------------"
        ],
        "src/mongo/util/net/ssl_manager.h||src/mongo/util/net/ssl_manager.h": [
          "File: src/mongo/util/net/ssl_manager.h -> src/mongo/util/net/ssl_manager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:         virtual void cleanupThreadLocals() = 0;",
          "",
          "[Removed Lines]",
          "63:         virtual std::string getSubjectName() = 0;",
          "",
          "[Added Lines]",
          "63:         virtual std::string getServerSubjectName() = 0;",
          "70:         virtual std::string getClientSubjectName() = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     SSLManagerInterface* getSSLManager();",
          "86: }",
          "87: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:     extern bool isSSLServer;",
          "",
          "---------------"
        ]
      }
    }
  ]
}