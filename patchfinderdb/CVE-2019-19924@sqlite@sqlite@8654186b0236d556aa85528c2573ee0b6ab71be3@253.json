{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4baa75b32f61727693ff2468ab927124e85c0e36",
      "candidate_info": {
        "commit_hash": "4baa75b32f61727693ff2468ab927124e85c0e36",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4baa75b32f61727693ff2468ab927124e85c0e36",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/without_rowid1.test"
        ],
        "message": "Do not de-duplicate columns index columns associated with a WITHOUT ROWID table if the columns have different collating sequences.  This is the fix for ticket [3182d3879020ef3b2].  There is one test case added, but most of the tests are done in TH3.\n\nFossilOrigin-Name: 1b1dd4d48cd79a585e1fa7ee79128e9f2a9ee9846339dc56bbd67b75112dcad5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/without_rowid1.test||test/without_rowid1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 92facbc73a940d2844ac88fafd2d2dadb10886fb0b7c53e23f346d18fa6d6327",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1726:   pIdx->szIdxRow = sqlite3LogEst(wIndex*4);",
          "1727: }",
          "1731: static int hasColumn(const i16 *aiCol, int nCol, int x){",
          "1733:   return 0;",
          "1734: }",
          "",
          "[Removed Lines]",
          "1732:   while( nCol-- > 0 ) if( x==*(aiCol++) ) return 1;",
          "",
          "[Added Lines]",
          "1734:   while( nCol-- > 0 ){",
          "1735:     assert( aiCol[0]>=0 );",
          "1736:     if( x==*(aiCol++) ){",
          "1737:       return 1;",
          "1738:     }",
          "1739:   }",
          "1740:   return 0;",
          "1741: }",
          "1756: static int isDupColumn(Index *pIdx, int nKey, Index *pPk, int iCol){",
          "1757:   int i, j;",
          "1758:   assert( nKey<=pIdx->nColumn );",
          "1759:   assert( iCol<MAX(pPk->nColumn,pPk->nKeyCol) );",
          "1760:   assert( pPk->idxType==SQLITE_IDXTYPE_PRIMARYKEY );",
          "1761:   assert( pPk->pTable->tabFlags & TF_WithoutRowid );",
          "1762:   assert( pPk->pTable==pIdx->pTable );",
          "1763:   testcase( pPk==pIdx );",
          "1764:   j = pPk->aiColumn[iCol];",
          "1765:   assert( j!=XN_ROWID && j!=XN_EXPR );",
          "1766:   for(i=0; i<nKey; i++){",
          "1767:     assert( pIdx->aiColumn[i]>=0 || j>=0 );",
          "1768:     if( pIdx->aiColumn[i]==j",
          "1769:      && sqlite3StrICmp(pIdx->azColl[i], pPk->azColl[iCol])==0",
          "1770:     ){",
          "1771:       return 1;",
          "1772:     }",
          "1773:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1837:     for(i=j=1; i<pPk->nKeyCol; i++){",
          "1839:         pPk->nColumn--;",
          "1840:       }else{",
          "1841:         pPk->aiColumn[j++] = pPk->aiColumn[i];",
          "1842:       }",
          "1843:     }",
          "",
          "[Removed Lines]",
          "1838:       if( hasColumn(pPk->aiColumn, j, pPk->aiColumn[i]) ){",
          "",
          "[Added Lines]",
          "1879:       if( isDupColumn(pPk, j, pPk, i) ){",
          "1882:         testcase( hasColumn(pPk->aiColumn, j, pPk->aiColumn[i]) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1867:     int n;",
          "1868:     if( IsPrimaryKeyIndex(pIdx) ) continue;",
          "1869:     for(i=n=0; i<nPk; i++){",
          "1871:     }",
          "1872:     if( n==0 ){",
          "",
          "[Removed Lines]",
          "1870:       if( !hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) ) n++;",
          "",
          "[Added Lines]",
          "1912:       if( !isDupColumn(pIdx, pIdx->nKeyCol, pPk, i) ){",
          "1913:         testcase( hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) );",
          "1914:         n++;",
          "1915:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1876:     }",
          "1877:     if( resizeIndexObject(db, pIdx, pIdx->nKeyCol+n) ) return;",
          "1878:     for(i=0, j=pIdx->nKeyCol; i<nPk; i++){",
          "1880:         pIdx->aiColumn[j] = pPk->aiColumn[i];",
          "1881:         pIdx->azColl[j] = pPk->azColl[i];",
          "1882:         j++;",
          "",
          "[Removed Lines]",
          "1879:       if( !hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) ){",
          "",
          "[Added Lines]",
          "1924:       if( !isDupColumn(pIdx, pIdx->nKeyCol, pPk, i) ){",
          "1925:         testcase( hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3392:     for(j=0; j<pPk->nKeyCol; j++){",
          "3393:       int x = pPk->aiColumn[j];",
          "3394:       assert( x>=0 );",
          "3396:         pIndex->nColumn--;",
          "3397:       }else{",
          "3398:         pIndex->aiColumn[i] = x;",
          "3399:         pIndex->azColl[i] = pPk->azColl[j];",
          "3400:         pIndex->aSortOrder[i] = pPk->aSortOrder[j];",
          "",
          "[Removed Lines]",
          "3395:       if( hasColumn(pIndex->aiColumn, pIndex->nKeyCol, x) ){",
          "",
          "[Added Lines]",
          "3441:       if( isDupColumn(pIndex, pIndex->nKeyCol, pPk, j) ){",
          "3444:         testcase( hasColumn(pIndex->aiColumn,pIndex->nKeyCol,x) );",
          "",
          "---------------"
        ],
        "test/without_rowid1.test||test/without_rowid1.test": [
          "File: test/without_rowid1.test -> test/without_rowid1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "391:   SELECT * FROM t1;",
          "392: } {b a 3  b b 4}",
          "395: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "394: # 2019-04-29 ticket https://www.sqlite.org/src/info/3182d3879020ef3",
          "395: do_execsql_test 11.1 {",
          "396:   CREATE TABLE t11(a TEXT PRIMARY KEY, b INT) WITHOUT ROWID;",
          "397:   CREATE INDEX t11a ON t11(a COLLATE NOCASE);",
          "398:   INSERT INTO t11(a,b) VALUES ('A',1),('a',2);",
          "399:   PRAGMA integrity_check;",
          "400:   SELECT a FROM t11 ORDER BY a COLLATE binary;",
          "401: } {ok A a}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48eb03bd0e3c36565b639306f21d05b52d8f6c6c",
      "candidate_info": {
        "commit_hash": "48eb03bd0e3c36565b639306f21d05b52d8f6c6c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/48eb03bd0e3c36565b639306f21d05b52d8f6c6c",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "test/json101.test"
        ],
        "message": "Proper surrogate pair decoding added to JSON functions.  See the mailing list bug report and [https://bugs.python.org/issue38749].  More test cases needed here, but it seems to work so far.\n\nFossilOrigin-Name: 51027f08c0478f1bf9d7545d9e268c772c0a5cd5dda4b03d78f16c7d94f2f50d",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "test/json101.test||test/json101.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "522:   sqlite3_result_subtype(pCtx, JSON_SUBTYPE);",
          "523: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "530: static u8 jsonHexToInt(int h){",
          "531:   assert( (h>='0' && h<='9') ||  (h>='a' && h<='f') ||  (h>='A' && h<='F') );",
          "532: #ifdef SQLITE_EBCDIC",
          "533:   h += 9*(1&~(h>>4));",
          "534: #else",
          "535:   h += 9*(1&(h>>6));",
          "536: #endif",
          "537:   return (u8)(h & 0xf);",
          "538: }",
          "543: static u32 jsonHexToInt4(const char *z){",
          "544:   u32 v;",
          "545:   assert( safe_isxdigit(z[0]) );",
          "546:   assert( safe_isxdigit(z[1]) );",
          "547:   assert( safe_isxdigit(z[2]) );",
          "548:   assert( safe_isxdigit(z[3]) );",
          "549:   v = (jsonHexToInt(z[0])<<12)",
          "550:     + (jsonHexToInt(z[1])<<8)",
          "551:     + (jsonHexToInt(z[2])<<4)",
          "552:     + jsonHexToInt(z[3]);",
          "553:   return v;",
          "554: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "615:           }else{",
          "616:             c = z[++i];",
          "617:             if( c=='u' ){",
          "627:               if( v==0 ) break;",
          "628:               if( v<=0x7f ){",
          "629:                 zOut[j++] = (char)v;",
          "",
          "[Removed Lines]",
          "618:               u32 v = 0, k;",
          "619:               for(k=0; k<4; i++, k++){",
          "620:                 assert( i<n-2 );",
          "621:                 c = z[i+1];",
          "622:                 assert( safe_isxdigit(c) );",
          "623:                 if( c<='9' ) v = v*16 + c - '0';",
          "624:                 else if( c<='F' ) v = v*16 + c - 'A' + 10;",
          "625:                 else v = v*16 + c - 'a' + 10;",
          "626:               }",
          "",
          "[Added Lines]",
          "649:               u32 v = jsonHexToInt4(z+i+1);",
          "650:               i += 4;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "631:                 zOut[j++] = (char)(0xc0 | (v>>6));",
          "632:                 zOut[j++] = 0x80 | (v&0x3f);",
          "633:               }else{",
          "637:               }",
          "638:             }else{",
          "639:               if( c=='b' ){",
          "",
          "[Removed Lines]",
          "634:                 zOut[j++] = (char)(0xe0 | (v>>12));",
          "635:                 zOut[j++] = 0x80 | ((v>>6)&0x3f);",
          "636:                 zOut[j++] = 0x80 | (v&0x3f);",
          "",
          "[Added Lines]",
          "658:                 u32 vlo;",
          "659:                 if( (v&0xfc00)==0xd800",
          "660:                   && i<n-6",
          "661:                   && z[i+1]=='\\\\'",
          "662:                   && z[i+2]=='u'",
          "663:                   && ((vlo = jsonHexToInt4(z+i+3))&0xfc00)==0xdc00",
          "664:                 ){",
          "666:                   v = ((v&0x3ff)<<10) + (vlo&0x3ff) + 0x10000;",
          "667:                   i += 6;",
          "668:                   zOut[j++] = 0xf0 | (v>>18);",
          "669:                   zOut[j++] = 0x80 | ((v>>12)&0x3f);",
          "670:                   zOut[j++] = 0x80 | ((v>>6)&0x3f);",
          "671:                   zOut[j++] = 0x80 | (v&0x3f);",
          "672:                 }else{",
          "673:                   zOut[j++] = 0xe0 | (v>>12);",
          "674:                   zOut[j++] = 0x80 | ((v>>6)&0x3f);",
          "675:                   zOut[j++] = 0x80 | (v&0x3f);",
          "676:                 }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f7a74f89dbd58b47bbcb58ea2af71fbe1eb5ec2dbe36d90685c39cb28ecf5250",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/json101.test||test/json101.test": [
          "File: test/json101.test -> test/json101.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "832:   SELECT xyz.* FROM (JSON_EACH('{\"a\":1, \"b\":2}')) AS xyz;",
          "833: } {a 1 integer 1 2 {} {$.a} {$} b 2 integer 2 4 {} {$.b} {$}}",
          "835: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "835: # 2019-11-10",
          "836: # Mailing list bug report on the handling of surrogate pairs",
          "837: # in JSON.",
          "838: #",
          "839: do_execsql_test json-16.10 {",
          "840:   SELECT length(json_extract('\"abc\\uD834\\uDD1Exyz\"','$'));",
          "841: } {7}",
          "842: do_execsql_test json-16.20 {",
          "843:   SELECT length(json_extract('\"\\uD834\\uDD1E\"','$'));",
          "844: } {1}",
          "845: do_execsql_test json-16.30 {",
          "846:   SELECT unicode(json_extract('\"\\uD834\\uDD1E\"','$'));",
          "847: } {119070}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f28e1bdd93e443292fafb3527a594372b40a7c4",
      "candidate_info": {
        "commit_hash": "0f28e1bdd93e443292fafb3527a594372b40a7c4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0f28e1bdd93e443292fafb3527a594372b40a7c4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Remove a NEVER() comparison from sqlite3ExprCompare().\n\nFossilOrigin-Name: f4285297e1e7ebef90bfc0f71402a4e1726d31bc15b69fec13a1f0d98fed1f08",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a1e1ba9145049491c593ac70d9e05149662d34770129c270d702f284cd19a481",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5030:     ){",
          "5031:       if( pA->iColumn!=pB->iColumn ) return 2;",
          "5032:       if( pA->op2!=pB->op2 ) return 2;",
          "5036:     }",
          "5037:   }",
          "5038:   return 0;",
          "",
          "[Removed Lines]",
          "5033:       if( pA->op!=TK_IN",
          "5034:        && pA->iTable!=pB->iTable",
          "5035:        && (pA->iTable!=iTab || NEVER(pB->iTable>=0)) ) return 2;",
          "",
          "[Added Lines]",
          "5033:       if( pA->op!=TK_IN && pA->iTable!=pB->iTable && pA->iTable!=iTab ){",
          "5034:         return 2;",
          "5035:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ded26a53c4df312e9fd06facbbf70377e969983",
      "candidate_info": {
        "commit_hash": "4ded26a53c4df312e9fd06facbbf70377e969983",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4ded26a53c4df312e9fd06facbbf70377e969983",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/sqliteInt.h",
          "test/windowerr.tcl",
          "test/windowerr.test"
        ],
        "message": "Prevent aliases of window functions expressions from being used as arguments to aggregate or other window functions.\n\nFossilOrigin-Name: 1e16d3e8fc60d39ca3899759ff15d355fdd7d3e23b325d8d2b0f954e11ce8dce",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/windowerr.tcl||test/windowerr.tcl",
          "test/windowerr.test||test/windowerr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1ae70ad2ffd36c27b154940126c5e3ed00c05c0d8761d9320a65a03b1b4e4dc6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "435:             sqlite3ErrorMsg(pParse, \"misuse of aliased aggregate %s\", zAs);",
          "436:             return WRC_Abort;",
          "437:           }",
          "438:           if( sqlite3ExprVectorSize(pOrig)!=1 ){",
          "439:             sqlite3ErrorMsg(pParse, \"row value misused\");",
          "440:             return WRC_Abort;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "438:           if( (pNC->ncFlags&NC_AllowWin)==0 && ExprHasProperty(pOrig, EP_Win) ){",
          "439:             sqlite3ErrorMsg(pParse, \"misuse of aliased window function %s\",zAs);",
          "440:             return WRC_Abort;",
          "441:           }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "729:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "730:       zId = pExpr->u.zToken;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "732:       int savedAllowFlags = (pNC->ncFlags & (NC_AllowAgg | NC_AllowWin));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "846:           pNC->nErr++;",
          "847:         }",
          "848:         if( is_agg ){",
          "849: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "851: #else",
          "852:           pNC->ncFlags &= ~NC_AllowAgg;",
          "853: #endif",
          "",
          "[Removed Lines]",
          "850:           pNC->ncFlags &= ~(pExpr->y.pWin ? NC_AllowWin : NC_AllowAgg);",
          "",
          "[Added Lines]",
          "858:           pNC->ncFlags &= ~(NC_AllowWin | (!pExpr->y.pWin ? NC_AllowAgg : 0));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "868:             pExpr->y.pWin->pNextWin = pSel->pWin;",
          "869:             pSel->pWin = pExpr->y.pWin;",
          "870:           }",
          "872:         }else",
          "874:         {",
          "",
          "[Removed Lines]",
          "871:           pNC->ncFlags |= NC_AllowWin;",
          "",
          "[Added Lines]",
          "879:           pNC->ncFlags |= NC_HasWin;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "886:             pNC2->ncFlags |= NC_HasAgg | (pDef->funcFlags & SQLITE_FUNC_MINMAX);",
          "888:           }",
          "890:         }",
          "891:       }",
          "",
          "[Removed Lines]",
          "889:           pNC->ncFlags |= NC_AllowAgg;",
          "",
          "[Added Lines]",
          "898:         pNC->ncFlags |= savedAllowFlags;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1648:   Walker w;",
          "1650:   if( pExpr==0 ) return SQLITE_OK;",
          "1653:   w.pParse = pNC->pParse;",
          "1654:   w.xExprCallback = resolveExprStep;",
          "1655:   w.xSelectCallback = resolveSelectStep;",
          "",
          "[Removed Lines]",
          "1651:   savedHasAgg = pNC->ncFlags & (NC_HasAgg|NC_MinMaxAgg);",
          "1652:   pNC->ncFlags &= ~(NC_HasAgg|NC_MinMaxAgg);",
          "",
          "[Added Lines]",
          "1659:   savedHasAgg = pNC->ncFlags & (NC_HasAgg|NC_MinMaxAgg|NC_HasWin);",
          "1660:   pNC->ncFlags &= ~(NC_HasAgg|NC_MinMaxAgg|NC_HasWin);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1668:   if( pNC->ncFlags & NC_HasAgg ){",
          "1669:     ExprSetProperty(pExpr, EP_Agg);",
          "1670:   }",
          "1671:   pNC->ncFlags |= savedHasAgg;",
          "1672:   return pNC->nErr>0 || w.pParse->nErr>0;",
          "1673: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1679:   if( pNC->ncFlags & NC_HasWin ){",
          "1680:     ExprSetProperty(pExpr, EP_Win);",
          "1681:   }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/windowerr.tcl||test/windowerr.tcl": [
          "File: test/windowerr.tcl -> test/windowerr.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:   ) FROM t1 ORDER BY 1",
          "48:   \"",
          "49: }",
          "51: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: errorsql_test 2.1 {",
          "51:   SELECT sum( sum(a) OVER () ) FROM t1;",
          "52: }",
          "54: errorsql_test 2.2 {",
          "55:   SELECT sum(a) OVER () AS xyz FROM t1 ORDER BY sum(xyz);",
          "56: }",
          "",
          "---------------"
        ],
        "test/windowerr.test||test/windowerr.test": [
          "File: test/windowerr.test -> test/windowerr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   ) FROM t1 ORDER BY 1",
          "87: } } } 1",
          "89: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: # PG says ERROR:  aggregate function calls cannot contain window function calls",
          "90: do_test 2.1 { catch { execsql {",
          "91:   SELECT sum( sum(a) OVER () ) FROM t1;",
          "92: } } } 1",
          "94: # PG says ERROR:  column \"xyz\" does not exist",
          "95: do_test 2.2 { catch { execsql {",
          "96:   SELECT sum(a) OVER () AS xyz FROM t1 ORDER BY sum(xyz);",
          "97: } } } 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13d04020775b10b252029455d2b8dcfcf49a47e4",
      "candidate_info": {
        "commit_hash": "13d04020775b10b252029455d2b8dcfcf49a47e4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/13d04020775b10b252029455d2b8dcfcf49a47e4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c",
          "test/cast.test"
        ],
        "message": "As a special case, casting '-0.0' into numeric should yield 0. Fix for ticket [674385aeba91c774].\n\nFossilOrigin-Name: 491f0f9bbddb6302536d99abd1ea481fd747ddcf6c6eaaacc0338d147b119081",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c",
          "test/cast.test||test/cast.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5c6146b56a75a94f4baa10e95407c54dd0b9314a57a8702a4b96b15c4d7ac48c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: int sqlite3RealSameAsInt(double r1, sqlite3_int64 i){",
          "701:   double r2 = (double)i;",
          "704: }",
          "",
          "[Removed Lines]",
          "702:   return memcmp(&r1, &r2, sizeof(r1))==0",
          "703:       && i >= -2251799813685248 && i < 2251799813685248;",
          "",
          "[Added Lines]",
          "704:   return r1==0.0",
          "705:       || (memcmp(&r1, &r2, sizeof(r1))==0",
          "706:           && i >= -2251799813685248 && i < 2251799813685248);",
          "",
          "---------------"
        ],
        "test/cast.test||test/cast.test": [
          "File: test/cast.test -> test/cast.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:   execsql {SELECT CAST('123.5abc' AS integer)}",
          "184: } 123",
          "187:   execsql {SELECT CAST(null AS REAL)}",
          "188: } {{}}",
          "190:   execsql {SELECT typeof(CAST(null AS REAL))}",
          "191: } {null}",
          "193:   execsql {SELECT CAST(1 AS REAL)}",
          "194: } {1.0}",
          "196:   execsql {SELECT typeof(CAST(1 AS REAL))}",
          "197: } {real}",
          "199:   execsql {SELECT CAST('1' AS REAL)}",
          "200: } {1.0}",
          "202:   execsql {SELECT typeof(CAST('1' AS REAL))}",
          "203: } {real}",
          "205:   execsql {SELECT CAST('abc' AS REAL)}",
          "206: } {0.0}",
          "208:   execsql {SELECT typeof(CAST('abc' AS REAL))}",
          "209: } {real}",
          "211:   execsql {SELECT CAST(x'31' AS REAL)}",
          "212: } {1.0}",
          "214:   execsql {SELECT typeof(CAST(x'31' AS REAL))}",
          "215: } {real}",
          "",
          "[Removed Lines]",
          "186: do_test case-1.60 {",
          "189: do_test case-1.61 {",
          "192: do_test case-1.62 {",
          "195: do_test case-1.63 {",
          "198: do_test case-1.64 {",
          "201: do_test case-1.65 {",
          "204: do_test case-1.66 {",
          "207: do_test case-1.67 {",
          "210: do_test case-1.68 {",
          "213: do_test case-1.69 {",
          "",
          "[Added Lines]",
          "186: do_test cast-1.60 {",
          "189: do_test cast-1.61 {",
          "192: do_test cast-1.62 {",
          "195: do_test cast-1.63 {",
          "198: do_test cast-1.64 {",
          "201: do_test cast-1.65 {",
          "204: do_test cast-1.66 {",
          "207: do_test cast-1.67 {",
          "210: do_test cast-1.68 {",
          "213: do_test cast-1.69 {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "299:     } 9223372036854774784",
          "300:   }",
          "301: }",
          "303:   execsql {SELECT CAST(NULL AS numeric)}",
          "304: } {{}}",
          "",
          "[Removed Lines]",
          "302: do_test case-3.31 {",
          "",
          "[Added Lines]",
          "302: do_test cast-3.31 {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "368: # ignored because it is no part of the integer prefix.",
          "369: # EVIDENCE-OF: R-24225-46995 For example, \"(CAST '123e+5' AS INTEGER)\"",
          "370: # results in 123, not in 12300000.",
          "372:   SELECT CAST('123e+5' AS INTEGER);",
          "373:   SELECT CAST('123e+5' AS NUMERIC);",
          "374:   SELECT CAST('123e+5' AS REAL);",
          "",
          "[Removed Lines]",
          "371: do_execsql_test case-5.3 {",
          "",
          "[Added Lines]",
          "371: do_execsql_test cast-5.3 {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "378: # The following does not have anything to do with the CAST operator,",
          "379: # but it does deal with affinity transformations.",
          "380: #",
          "382:   DROP TABLE IF EXISTS t1;",
          "383:   CREATE TABLE t1(a NUMERIC);",
          "384:   INSERT INTO t1 VALUES",
          "",
          "[Removed Lines]",
          "381: do_execsql_test case-6.1 {",
          "",
          "[Added Lines]",
          "381: do_execsql_test cast-6.1 {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "392: # 2019-06-07",
          "393: # https://www.sqlite.org/src/info/4c2d7639f076aa7c",
          "395:   SELECT CAST('-' AS NUMERIC);",
          "396: } {0}",
          "398:   SELECT CAST('-0' AS NUMERIC);",
          "399: } {0}",
          "401:   SELECT CAST('+' AS NUMERIC);",
          "402: } {0}",
          "404:   SELECT CAST('/' AS NUMERIC);",
          "405: } {0}",
          "407: # 2019-06-07",
          "408: # https://www.sqlite.org/src/info/e8bedb2a184001bb",
          "410:   SELECT '' - 2851427734582196970;",
          "411: } {-2851427734582196970}",
          "413:   SELECT 0 - 2851427734582196970;",
          "414: } {-2851427734582196970}",
          "416:   SELECT '' - 1;",
          "417: } {-1}",
          "",
          "[Removed Lines]",
          "394: do_execsql_test case-7.1 {",
          "397: do_execsql_test case-7.2 {",
          "400: do_execsql_test case-7.3 {",
          "403: do_execsql_test case-7.4 {",
          "409: do_execsql_test case-7.10 {",
          "412: do_execsql_test case-7.11 {",
          "415: do_execsql_test case-7.12 {",
          "",
          "[Added Lines]",
          "394: do_execsql_test cast-7.1 {",
          "397: do_execsql_test cast-7.2 {",
          "400: do_execsql_test cast-7.3 {",
          "403: do_execsql_test cast-7.4 {",
          "409: do_execsql_test cast-7.10 {",
          "412: do_execsql_test cast-7.11 {",
          "415: do_execsql_test cast-7.12 {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "447:   SELECT -CAST('.' AS numeric);",
          "448: } 0",
          "451: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "450: # 2019-06-12",
          "451: # https://www.sqlite.org/src/info/674385aeba91c774",
          "452: #",
          "453: do_execsql_test cast-7.40 {",
          "454:   SELECT CAST('-0.0' AS numeric);",
          "455: } 0",
          "456: do_execsql_test cast-7.41 {",
          "457:   SELECT CAST('0.0' AS numeric);",
          "458: } 0",
          "459: do_execsql_test cast-7.42 {",
          "460:   SELECT CAST('+0.0' AS numeric);",
          "461: } 0",
          "462: do_execsql_test cast-7.43 {",
          "463:   SELECT CAST('-1.0' AS numeric);",
          "464: } -1",
          "",
          "---------------"
        ]
      }
    }
  ]
}