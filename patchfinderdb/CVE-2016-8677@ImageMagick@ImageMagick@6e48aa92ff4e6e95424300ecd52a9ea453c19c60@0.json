{
  "cve_id": "CVE-2016-8677",
  "cve_desc": "The AcquireQuantumPixels function in MagickCore/quantum.c in ImageMagick before 7.0.3-1 allows remote attackers to have unspecified impact via a crafted image file, which triggers a memory allocation failure.",
  "repo": "ImageMagick/ImageMagick",
  "patch_hash": "6e48aa92ff4e6e95424300ecd52a9ea453c19c60",
  "patch_info": {
    "commit_hash": "6e48aa92ff4e6e95424300ecd52a9ea453c19c60",
    "repo": "ImageMagick/ImageMagick",
    "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/6e48aa92ff4e6e95424300ecd52a9ea453c19c60",
    "files": [
      "coders/tiff.c"
    ],
    "message": "https://github.com/ImageMagick/ImageMagick/issues/268",
    "before_after_code_files": [
      "coders/tiff.c||coders/tiff.c"
    ]
  },
  "patch_diff": {
    "coders/tiff.c||coders/tiff.c": [
      "File: coders/tiff.c -> coders/tiff.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1425:       case COMPRESSION_OJPEG: image->compression=JPEGCompression; break;",
      "1426: #if defined(COMPRESSION_LZMA)",
      "1427:       case COMPRESSION_LZMA: image->compression=LZMACompression; break;",
      "1428: #endif",
      "1491:             else",
      "1492:               if (sample_info[i] == EXTRASAMPLE_UNASSALPHA)",
      "1493:                 (void) SetImageProperty(image,\"tiff:alpha\",\"unassociated\",",
      "",
      "[Removed Lines]",
      "1429:       case COMPRESSION_LZW: image->compression=LZWCompression; break;",
      "1430:       case COMPRESSION_DEFLATE: image->compression=ZipCompression; break;",
      "1431:       case COMPRESSION_ADOBE_DEFLATE: image->compression=ZipCompression; break;",
      "1432:       default: image->compression=RLECompression; break;",
      "1433:     }",
      "1435:       Allocate memory for the image and pixel buffer.",
      "1437:     quantum_info=AcquireQuantumInfo(image_info,image);",
      "1438:     if (quantum_info == (QuantumInfo *) NULL)",
      "1439:       {",
      "1440:         TIFFClose(tiff);",
      "1441:         ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
      "1442:       }",
      "1443:     if (sample_format == SAMPLEFORMAT_UINT)",
      "1444:       status=SetQuantumFormat(image,quantum_info,UnsignedQuantumFormat);",
      "1445:     if (sample_format == SAMPLEFORMAT_INT)",
      "1446:       status=SetQuantumFormat(image,quantum_info,SignedQuantumFormat);",
      "1447:     if (sample_format == SAMPLEFORMAT_IEEEFP)",
      "1448:       status=SetQuantumFormat(image,quantum_info,FloatingPointQuantumFormat);",
      "1449:     if (status == MagickFalse)",
      "1450:       {",
      "1451:         TIFFClose(tiff);",
      "1452:         quantum_info=DestroyQuantumInfo(quantum_info);",
      "1453:         ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
      "1454:       }",
      "1455:     status=MagickTrue;",
      "1456:     switch (photometric)",
      "1457:     {",
      "1458:       case PHOTOMETRIC_MINISBLACK:",
      "1459:       {",
      "1460:         quantum_info->min_is_white=MagickFalse;",
      "1461:         break;",
      "1462:       }",
      "1463:       case PHOTOMETRIC_MINISWHITE:",
      "1464:       {",
      "1465:         quantum_info->min_is_white=MagickTrue;",
      "1466:         break;",
      "1467:       }",
      "1468:       default:",
      "1469:         break;",
      "1470:     }",
      "1471:     tiff_status=TIFFGetFieldDefaulted(tiff,TIFFTAG_EXTRASAMPLES,&extra_samples,",
      "1472:       &sample_info);",
      "1473:     if (tiff_status == 1)",
      "1474:       {",
      "1475:         (void) SetImageProperty(image,\"tiff:alpha\",\"unspecified\",exception);",
      "1476:         if (extra_samples == 0)",
      "1477:           {",
      "1478:             if ((samples_per_pixel == 4) && (photometric == PHOTOMETRIC_RGB))",
      "1479:               image->alpha_trait=BlendPixelTrait;",
      "1480:           }",
      "1481:         else",
      "1482:           for (i=0; i < extra_samples; i++)",
      "1483:           {",
      "1484:             image->alpha_trait=BlendPixelTrait;",
      "1485:             if (sample_info[i] == EXTRASAMPLE_ASSOCALPHA)",
      "1486:               {",
      "1487:                 SetQuantumAlphaType(quantum_info,DisassociatedQuantumAlpha);",
      "1488:                 (void) SetImageProperty(image,\"tiff:alpha\",\"associated\",",
      "1489:                   exception);",
      "1490:               }",
      "",
      "[Added Lines]",
      "1428: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1554:               }",
      "1555:           }",
      "1556:         if (image->alpha_trait == UndefinedPixelTrait)",
      "1561:         if (image_info->number_scenes != 0)",
      "1562:           if (image->scene >= (image_info->scene+image_info->number_scenes-1))",
      "1563:             {",
      "1564:               quantum_info=DestroyQuantumInfo(quantum_info);",
      "1565:               break;",
      "1566:             }",
      "1567:         goto next_tiff_frame;",
      "1568:       }",
      "",
      "[Removed Lines]",
      "1557:           image->depth=GetImageDepth(image,exception);",
      "1558:       }",
      "1559:     if (image_info->ping != MagickFalse)",
      "1560:       {",
      "",
      "[Added Lines]",
      "1495:           image->depth=GetImageDepth(image,exception);",
      "1502:         goto next_tiff_frame;",
      "1503:       }",
      "1504:     status=SetImageExtent(image,image->columns,image->rows,exception);",
      "1505:     if (status == MagickFalse)",
      "1506:       return(DestroyImageList(image));",
      "1508:       Allocate memory for the image and pixel buffer.",
      "1510:     quantum_info=AcquireQuantumInfo(image_info,image);",
      "1511:     if (quantum_info == (QuantumInfo *) NULL)",
      "1512:       {",
      "1513:         TIFFClose(tiff);",
      "1514:         ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
      "1515:       }",
      "1516:     if (sample_format == SAMPLEFORMAT_UINT)",
      "1517:       status=SetQuantumFormat(image,quantum_info,UnsignedQuantumFormat);",
      "1518:     if (sample_format == SAMPLEFORMAT_INT)",
      "1519:       status=SetQuantumFormat(image,quantum_info,SignedQuantumFormat);",
      "1520:     if (sample_format == SAMPLEFORMAT_IEEEFP)",
      "1521:       status=SetQuantumFormat(image,quantum_info,FloatingPointQuantumFormat);",
      "1522:     if (status == MagickFalse)",
      "1523:       {",
      "1524:         TIFFClose(tiff);",
      "1525:         quantum_info=DestroyQuantumInfo(quantum_info);",
      "1526:         ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
      "1527:       }",
      "1528:     status=MagickTrue;",
      "1529:     switch (photometric)",
      "1530:     {",
      "1531:       case PHOTOMETRIC_MINISBLACK:",
      "1532:       {",
      "1533:         quantum_info->min_is_white=MagickFalse;",
      "1534:         break;",
      "1535:       }",
      "1536:       case PHOTOMETRIC_MINISWHITE:",
      "1537:       {",
      "1538:         quantum_info->min_is_white=MagickTrue;",
      "1539:         break;",
      "1540:       }",
      "1541:       default:",
      "1542:         break;",
      "1543:     }",
      "1544:     tiff_status=TIFFGetFieldDefaulted(tiff,TIFFTAG_EXTRASAMPLES,&extra_samples,",
      "1545:       &sample_info);",
      "1546:     if (tiff_status == 1)",
      "1547:       {",
      "1548:         (void) SetImageProperty(image,\"tiff:alpha\",\"unspecified\",exception);",
      "1549:         if (extra_samples == 0)",
      "1550:           {",
      "1551:             if ((samples_per_pixel == 4) && (photometric == PHOTOMETRIC_RGB))",
      "1552:               image->alpha_trait=BlendPixelTrait;",
      "1553:           }",
      "1554:         else",
      "1555:           for (i=0; i < extra_samples; i++)",
      "1556:           {",
      "1557:             image->alpha_trait=BlendPixelTrait;",
      "1558:             if (sample_info[i] == EXTRASAMPLE_ASSOCALPHA)",
      "1559:               {",
      "1560:                 SetQuantumAlphaType(quantum_info,DisassociatedQuantumAlpha);",
      "1561:                 (void) SetImageProperty(image,\"tiff:alpha\",\"associated\",",
      "1562:                   exception);",
      "1563:               }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2072:                 break;",
      "2073:             }",
      "2074:         }",
      "2076:         break;",
      "2077:       }",
      "2078:     }",
      "",
      "[Removed Lines]",
      "2075:         pixel_info=RelinquishVirtualMemory(pixel_info);",
      "",
      "[Added Lines]",
      "2073:         pixel_info=RelinquishVirtualMemory(pixel_info);",
      "2074:         break;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "32a3eeb9e0da083cbc05909e4935efdbf9846df9",
      "candidate_info": {
        "commit_hash": "32a3eeb9e0da083cbc05909e4935efdbf9846df9",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/32a3eeb9e0da083cbc05909e4935efdbf9846df9",
        "files": [
          "coders/tiff.c"
        ],
        "message": "https://github.com/ImageMagick/ImageMagick/issues/736",
        "before_after_code_files": [
          "coders/tiff.c||coders/tiff.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "coders/tiff.c||coders/tiff.c"
          ],
          "candidate": [
            "coders/tiff.c||coders/tiff.c"
          ]
        }
      },
      "candidate_diff": {
        "coders/tiff.c||coders/tiff.c": [
          "File: coders/tiff.c -> coders/tiff.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1211: }",
          "1213: #if defined(__cplusplus) || defined(c_plusplus)",
          "1214: }",
          "1215: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1214: }",
          "1215: #endif",
          "1217: static Image *ReadTIFFImage(const ImageInfo *image_info,",
          "1218:   ExceptionInfo *exception)",
          "1219: {",
          "1220: #define ThrowTIFFException(severity,message) \\",
          "1221: { \\",
          "1222:   if (tiff_pixels != (unsigned char *) NULL) \\",
          "1223:     tiff_pixels=(unsigned char *) RelinquishMagickMemory(tiff_pixels); \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1639:             break;",
          "1640:         goto next_tiff_frame;",
          "1641:       }",
          "1642:     status=SetImageExtent(image,image->columns,image->rows,exception);",
          "1643:     if (status == MagickFalse)",
          "1648:     quantum_info=AcquireQuantumInfo(image_info,image);",
          "1649:     if (quantum_info == (QuantumInfo *) NULL)",
          "1650:       {",
          "",
          "[Removed Lines]",
          "1644:       return(DestroyImageList(image));",
          "1646:       Allocate memory for the image and pixel buffer.",
          "",
          "[Added Lines]",
          "1652:     status=SetImageExtent(image,image->columns,image->rows,exception);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1652:         ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
          "1653:       }",
          "1654:     if (sample_format == SAMPLEFORMAT_UINT)",
          "1660:     if (status == MagickFalse)",
          "1661:       {",
          "1662:         TIFFClose(tiff);",
          "",
          "[Removed Lines]",
          "1655:       status=SetQuantumFormat(image,quantum_info,UnsignedQuantumFormat);",
          "1656:     if (sample_format == SAMPLEFORMAT_INT)",
          "1657:       status=SetQuantumFormat(image,quantum_info,SignedQuantumFormat);",
          "1658:     if (sample_format == SAMPLEFORMAT_IEEEFP)",
          "1659:       status=SetQuantumFormat(image,quantum_info,FloatingPointQuantumFormat);",
          "",
          "[Added Lines]",
          "1663:       status=SetQuantumFormat(image,quantum_info,UnsignedQuantumFormat);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1743:       method=ReadStripMethod;",
          "1744:     if (TIFFIsTiled(tiff) != MagickFalse)",
          "1745:       method=ReadTileMethod;",
          "1750:       pow(2.0,ceil(log(bits_per_sample)/log(2.0))))));",
          "1751:     if (tiff_pixels == (unsigned char *) NULL)",
          "1752:       {",
          "",
          "[Removed Lines]",
          "1746:     quantum_info->endian=LSBEndian;",
          "1747:     quantum_type=RGBQuantum;",
          "1748:     tiff_pixels=(unsigned char *) AcquireMagickMemory(MagickMax(",
          "1749:       TIFFScanlineSize(tiff),(ssize_t) (image->columns*samples_per_pixel*",
          "",
          "[Added Lines]",
          "1750:     quantum_info->endian=LSBEndian;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1779:         else",
          "1780:           if (image->storage_class != PseudoClass)",
          "1781:             {",
          "1786:           bits_per_sample)/log(2))));",
          "1787:         if (status == MagickFalse)",
          "1788:           {",
          "",
          "[Removed Lines]",
          "1782:               quantum_type=GrayQuantum;",
          "1783:               pad=(size_t) MagickMax((ssize_t) samples_per_pixel-1,0);",
          "1784:             }",
          "1785:         status=SetQuantumPad(image,quantum_info,pad*pow(2,ceil(log(",
          "",
          "[Added Lines]",
          "1783:               quantum_type=GrayQuantum;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1835:             quantum_type=CMYKQuantum;",
          "1836:             if (image->alpha_trait != UndefinedPixelTrait)",
          "1837:               {",
          "1842:         status=SetQuantumPad(image,quantum_info,pad*((bits_per_sample+7) >> 3));",
          "1843:         if (status == MagickFalse)",
          "1844:           {",
          "",
          "[Removed Lines]",
          "1838:                 quantum_type=CMYKAQuantum;",
          "1839:                 pad=(size_t) MagickMax((size_t) samples_per_pixel-5,0);",
          "1840:               }",
          "1841:           }",
          "",
          "[Added Lines]",
          "1836:                 quantum_type=CMYKAQuantum;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2043:           columns,",
          "2044:           rows;",
          "2049:         if ((TIFFGetField(tiff,TIFFTAG_TILEWIDTH,&columns) != 1) ||",
          "2050:             (TIFFGetField(tiff,TIFFTAG_TILELENGTH,&rows) != 1))",
          "2051:           {",
          "2056:         number_pixels=(MagickSizeType) columns*rows;",
          "2057:         if (HeapOverflowSanityCheck(rows,sizeof(*tile_pixels)) != MagickFalse)",
          "2058:           {",
          "2063:           sizeof(*tile_pixels));",
          "2064:         if (tile_pixels == (uint32 *) NULL)",
          "2065:           {",
          "",
          "[Removed Lines]",
          "2047:           Convert tiled TIFF image to DirectClass MIFF image.",
          "2052:             TIFFClose(tiff);",
          "2053:             ThrowReaderException(CoderError,\"ImageIsNotTiled\");",
          "2054:           }",
          "2055:         (void) SetImageStorageClass(image,DirectClass,exception);",
          "2059:             TIFFClose(tiff);",
          "2060:             ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
          "2061:           }",
          "2062:         tile_pixels=(uint32 *) AcquireQuantumMemory(columns,rows*",
          "",
          "[Added Lines]",
          "2042:           Convert tiled TIFF image to DirectClass MIFF image.",
          "2047:         if ((AcquireMagickResource(WidthResource,columns) == MagickFalse) ||",
          "2051:         number_pixels=(MagickSizeType) columns*rows;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2157:         uint32",
          "2163:         number_pixels=(MagickSizeType) image->columns*image->rows;",
          "2164:         if (HeapOverflowSanityCheck(image->rows,sizeof(*pixels)) != MagickFalse)",
          "2165:           {",
          "2170:           sizeof(uint32));",
          "2171:         if (pixel_info == (MemoryInfo *) NULL)",
          "2172:           {",
          "",
          "[Removed Lines]",
          "2161:           Convert TIFF image to DirectClass MIFF image.",
          "2166:             TIFFClose(tiff);",
          "2167:             ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
          "2168:           }",
          "2169:         pixel_info=AcquireVirtualMemory(image->columns,image->rows*",
          "",
          "[Added Lines]",
          "2152:         number_pixels=(MagickSizeType) image->columns*image->rows;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3116:   ImageInfo",
          "3120:     status;",
          "3122:   PhotoshopProfile",
          "",
          "[Removed Lines]",
          "3119:   MagickBooleanType",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3125:   PSDInfo",
          "3126:     info;",
          "3131:   StringInfo",
          "",
          "[Removed Lines]",
          "3128:   size_t",
          "3129:     length;",
          "",
          "[Added Lines]",
          "3108:   PSDInfo",
          "3109:     info;",
          "",
          "---------------"
        ]
      }
    }
  ]
}