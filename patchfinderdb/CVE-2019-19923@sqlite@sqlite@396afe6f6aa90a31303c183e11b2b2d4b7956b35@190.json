{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "eb80863cbf3709ade2c0d309935610adc413227b",
      "candidate_info": {
        "commit_hash": "eb80863cbf3709ade2c0d309935610adc413227b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/eb80863cbf3709ade2c0d309935610adc413227b",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/e_vacuum.test"
        ],
        "message": "Fix an incorrect comment on a test case for rowid renumbering in VACUUM.\n\nFossilOrigin-Name: 0d293fb43f2eb64026ac1e0422f54d4839b101898cc9913fc7746760c08ed41f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/e_vacuum.test||test/e_vacuum.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 13a0ea6466b051ea5281865ed5285b8b5a99ec4307f400c5f7b03692723f1cd1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/e_vacuum.test||test/e_vacuum.test": [
          "File: test/e_vacuum.test -> test/e_vacuum.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:   DETACH aux1;",
          "267: } {1 x 3 z}",
          "270: # has indexes.",
          "271: do_execsql_test e_vacuum-3.1.7 {",
          "272:   DROP TABLE t5;",
          "",
          "[Removed Lines]",
          "269: # Rowids are renumbered even if the table being vacuumed",
          "",
          "[Added Lines]",
          "269: # Rowids are not renumbered if the table being vacuumed",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c324d44690c7b6dc640c46670e358d7f939e24f5",
      "candidate_info": {
        "commit_hash": "c324d44690c7b6dc640c46670e358d7f939e24f5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c324d44690c7b6dc640c46670e358d7f939e24f5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/in5.test"
        ],
        "message": "When populating an ephemeral b-tree for the RHS of an IN(...) clause, avoid applying an affinity to a value that may be used later on for some other purpose. Fix for [c7a117190].\n\nFossilOrigin-Name: 43e8b14314d876178d487c3b519296ac1de065fdcaa70768e40d684015bceb9d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/in5.test||test/in5.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 500c9152daaf11cf69d778aa8592175f6088337c6667c59af6df3a24cd81eb0e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2787:     int i;",
          "2788:     ExprList *pList = pExpr->x.pList;",
          "2789:     struct ExprList_item *pItem;",
          "2791:     affinity = sqlite3ExprAffinity(pLeft);",
          "2792:     if( affinity<=SQLITE_AFF_NONE ){",
          "2793:       affinity = SQLITE_AFF_BLOB;",
          "",
          "[Removed Lines]",
          "2790:     int r1, r2, r3;",
          "",
          "[Added Lines]",
          "2790:     int r1, r2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2815:       }",
          "2821:     }",
          "2822:     sqlite3ReleaseTempReg(pParse, r1);",
          "2823:     sqlite3ReleaseTempReg(pParse, r2);",
          "",
          "[Removed Lines]",
          "2818:       r3 = sqlite3ExprCodeTarget(pParse, pE2, r1);",
          "2819:       sqlite3VdbeAddOp4(v, OP_MakeRecord, r3, 1, r2, &affinity, 1);",
          "2820:       sqlite3VdbeAddOp4Int(v, OP_IdxInsert, iTab, r2, r3, 1);",
          "",
          "[Added Lines]",
          "2818:       sqlite3ExprCode(pParse, pE2, r1);",
          "2819:       sqlite3VdbeAddOp4(v, OP_MakeRecord, r1, 1, r2, &affinity, 1);",
          "2820:       sqlite3VdbeAddOp4Int(v, OP_IdxInsert, iTab, r2, r1, 1);",
          "",
          "---------------"
        ],
        "test/in5.test||test/in5.test": [
          "File: test/in5.test -> test/in5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:   SELECT * FROM t9 WHERE a IN (44, 45, 44, 45)",
          "249: } {44 45}",
          "252: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251: #-------------------------------------------------------------------------",
          "252: # Test that ticket c7a117190 is fixed.",
          "253: #",
          "254: reset_db",
          "255: do_execsql_test 9.0 {",
          "256:   CREATE TABLE t0(c0);",
          "257:   CREATE VIEW v0(c0) AS SELECT LOWER(CAST('1e500' AS TEXT)) FROM t0;",
          "258:   INSERT INTO t0(c0) VALUES (NULL);",
          "259: }",
          "261: do_execsql_test 9.1 {",
          "262:   SELECT lower('1e500') FROM t0 WHERE rowid NOT IN (0, 0, lower('1e500'));",
          "263: } {1e500}",
          "265: do_execsql_test 9.2 {",
          "266:   SELECT lower('1e500') FROM t0 WHERE rowid != lower('1e500');",
          "267: } {1e500}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ce9b6bcd500c8836748aa5b34bcb02b7f145e90",
      "candidate_info": {
        "commit_hash": "2ce9b6bcd500c8836748aa5b34bcb02b7f145e90",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2ce9b6bcd500c8836748aa5b34bcb02b7f145e90",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Improved comments and extra assert() statements on the OP_Savepoint opcode, just to make the code a little easier to read and reason about.\n\nFossilOrigin-Name: e80b2d9fcbc82ae5dc8a1fc13196f9a30bdb504eb5a5c131d136a78bbd5bbe7b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3cc55e09e6c1de2059d97bdddf2fdfbdcc62c584b513f56faf9d3a39ef80cddd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3099:       }",
          "3100:     }",
          "3101:   }else{",
          "3102:     iSavepoint = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3103:     assert( p1==SAVEPOINT_RELEASE || p1==SAVEPOINT_ROLLBACK );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3152:             if( rc!=SQLITE_OK ) goto abort_due_to_error;",
          "3153:           }",
          "3154:         }else{",
          "3155:           isSchemaChange = 0;",
          "3156:         }",
          "3157:         for(ii=0; ii<db->nDb; ii++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3157:           assert( p1==SAVEPOINT_RELEASE );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3188:           db->nSavepoint--;",
          "3189:         }",
          "3190:       }else{",
          "3191:         db->nDeferredCons = pSavepoint->nDeferredCons;",
          "3192:         db->nDeferredImmCons = pSavepoint->nDeferredImmCons;",
          "3193:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3194:         assert( p1==SAVEPOINT_ROLLBACK );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2305414cdb540d9e0be03e7d00a157f3c782c3c",
      "candidate_info": {
        "commit_hash": "f2305414cdb540d9e0be03e7d00a157f3c782c3c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f2305414cdb540d9e0be03e7d00a157f3c782c3c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/legacy.c"
        ],
        "message": "Ensure that the sqlite3_exec() callback gets the correct number of columns for a query, even if the schema changes out from under it.\n\nFossilOrigin-Name: a16ffb5a4b30f1ac4a8384fccde0a0f69e49545b6f9be9267928609328c4a151",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/legacy.c||src/legacy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d3fea69cbb071867a90ad56ca05123ebf8e44689a92577a525a883c176c791bd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/legacy.c||src/legacy.c": [
          "File: src/legacy.c -> src/legacy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   sqlite3_mutex_enter(db->mutex);",
          "47:   sqlite3Error(db, SQLITE_OK);",
          "48:   while( rc==SQLITE_OK && zSql[0] ){",
          "50:     char **azVals = 0;",
          "52:     pStmt = 0;",
          "",
          "[Removed Lines]",
          "49:     int nCol;",
          "",
          "[Added Lines]",
          "49:     int nCol = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:       zSql = zLeftover;",
          "61:       continue;",
          "62:     }",
          "64:     callbackIsInit = 0;",
          "67:     while( 1 ){",
          "68:       int i;",
          "",
          "[Removed Lines]",
          "65:     nCol = sqlite3_column_count(pStmt);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:           (SQLITE_DONE==rc && !callbackIsInit",
          "74:                            && db->flags&SQLITE_NullCallback)) ){",
          "75:         if( !callbackIsInit ){",
          "76:           azCols = sqlite3DbMallocRaw(db, (2*nCol+1)*sizeof(const char*));",
          "77:           if( azCols==0 ){",
          "78:             goto exec_out;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:           nCol = sqlite3_column_count(pStmt);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3af1b60e3a3963b70399320cdf59286537004f69",
      "candidate_info": {
        "commit_hash": "3af1b60e3a3963b70399320cdf59286537004f69",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3af1b60e3a3963b70399320cdf59286537004f69",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/oserror.test"
        ],
        "message": "Changes to oserror.test so that it works even on systems that allow an unusually large number of file descriptors.\n\nFossilOrigin-Name: a27b0b880d76c6838c0365f66bcd69b1b49b7594470993b608f4e490cbdc4882",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/oserror.test||test/oserror.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1b1dd4d48cd79a585e1fa7ee79128e9f2a9ee9846339dc56bbd67b75112dcad5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/oserror.test||test/oserror.test": [
          "File: test/oserror.test -> test/oserror.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: # an error may be reported for either open() or getcwd() here.",
          "53: #",
          "54: if {![clang_sanitize_address]} {",
          "55:   do_test 1.1.1 {",
          "56:     set ::log [list]",
          "61:   do_test 1.1.2 {",
          "67: }",
          "",
          "[Removed Lines]",
          "57:     list [catch {",
          "58:       for {set i 0} {$i < 20000} {incr i} { sqlite3 dbh_$i test.db -readonly 1 }",
          "59:     } msg] $msg",
          "60:   } {1 {unable to open database file}}",
          "62:     catch { for {set i 0} {$i < 20000} {incr i} { dbh_$i close } }",
          "63:   } {1}",
          "64:   do_re_test 1.1.3 {",
          "65:     lindex $::log 0",
          "66:   } {^os_unix.c:\\d+: \\(\\d+\\) (open|getcwd)\\(.*test.db\\) - }",
          "",
          "[Added Lines]",
          "55:   unset -nocomplain rc",
          "56:   unset -nocomplain nOpen",
          "57:   set nOpen 20000",
          "60:     set ::rc [catch {",
          "61:       for {set i 0} {$i < $::nOpen} {incr i} { sqlite3 dbh_$i test.db -readonly 1 }",
          "62:     } msg]",
          "63:     if {$::rc==0} {",
          "64:       # Some system (ex: Debian) are able to create 20000+ file descriptiors",
          "65:       # such systems will not fail here",
          "66:       set x ok",
          "67:     } elseif {$::rc==1 && $msg==\"unable to open database file\"} {",
          "68:       set x ok",
          "69:     } else {",
          "70:       set x [list $::rc $msg]",
          "71:     }",
          "72:   } {ok}",
          "74:     catch { for {set i 0} {$i < $::nOpen} {incr i} { dbh_$i close } }",
          "75:   } $::rc",
          "76:   if {$rc} {",
          "77:     do_re_test 1.1.3 {",
          "78:       lindex $::log 0",
          "79:     } {^os_unix.c:\\d+: \\(\\d+\\) (open|getcwd)\\(.*test.db\\) - }",
          "80:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}