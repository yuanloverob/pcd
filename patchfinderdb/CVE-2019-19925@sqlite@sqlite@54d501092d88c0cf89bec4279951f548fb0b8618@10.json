{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e12ca5abf6750b38061f16742e71cb93eab3a7d9",
      "candidate_info": {
        "commit_hash": "e12ca5abf6750b38061f16742e71cb93eab3a7d9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e12ca5abf6750b38061f16742e71cb93eab3a7d9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Earlier detection of a database corruption case in balance_nonroot(), to prevent a possible use of an uninitialized variable.\n\nFossilOrigin-Name: c509d8a8aebe0da4847e95cf737c21313a665de9a540da2db57b8ed22f98a402",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b043a54c3de54b286c4eae564eab6b99118a410d99bdb63480faba3123d2ca11",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7636:     u16 maskPage = pOld->maskPage;",
          "7637:     u8 *piCell = aData + pOld->cellOffset;",
          "7638:     u8 *piEnd;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7639:     VVA_ONLY( int nCellAtStart = b.nCell; )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7665:     memset(&b.szCell[b.nCell], 0, sizeof(b.szCell[0])*(limit+pOld->nOverflow));",
          "7666:     if( pOld->nOverflow>0 ){",
          "7667:       limit = pOld->aiOvfl[0];",
          "7668:       for(j=0; j<limit; j++){",
          "7669:         b.apCell[b.nCell] = aData + (maskPage & get2byteAligned(piCell));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7668:       if( limit<pOld->aiOvfl[0] ){",
          "7669:         rc = SQLITE_CORRUPT_BKPT;",
          "7670:         goto balance_cleanup;",
          "7671:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7683:       piCell += 2;",
          "7684:       b.nCell++;",
          "7685:     }",
          "7687:     cntOld[i] = b.nCell;",
          "7688:     if( i<nOld-1 && !leafData){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7691:     assert( (b.nCell-nCellAtStart)==(pOld->nCell+pOld->nOverflow) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29cdbadf8af1ea61e960c5fc7ce8a63efb009c1c",
      "candidate_info": {
        "commit_hash": "29cdbadf8af1ea61e960c5fc7ce8a63efb009c1c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/29cdbadf8af1ea61e960c5fc7ce8a63efb009c1c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/window1.test"
        ],
        "message": "Correctly deal with multi-row VALUES clauses that contain window functions.\n\nFossilOrigin-Name: 26d991f214db143976e2593d3564b5003eb3539a2728d1a0ccae2a2accece76f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7fa664ea0ea1e0283a9af50c9ff8dd360ee6042f9e491a136f53d9bcbbc9c7ef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2474:     assert( p->selFlags & SF_Values );",
          "2475:     assert( p->op==TK_ALL || (p->op==TK_SELECT && p->pPrior==0) );",
          "2476:     assert( p->pNext==0 || p->pEList->nExpr==p->pNext->pEList->nExpr );",
          "2477:     if( p->pPrior==0 ) break;",
          "2478:     assert( p->pPrior->pNext==p );",
          "2479:     p = p->pPrior;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2477:     if( p->pWin ) return -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2565:   if( p->selFlags & SF_MultiValue ){",
          "2566:     rc = multiSelectValues(pParse, p, &dest);",
          "2568:   }",
          "",
          "[Removed Lines]",
          "2567:     goto multi_select_end;",
          "",
          "[Added Lines]",
          "2568:     if( rc>=0 ) goto multi_select_end;",
          "2569:     rc = SQLITE_OK;",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1299:   SELECT sum(x) OVER f FROM t1 WINDOW f AS (ORDER BY x) ORDER BY 1;",
          "1300: } {1 3 6}",
          "1302: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1302: # 2019-12-07 gramfuzz find",
          "1303: #",
          "1304: do_execsql_test 36.10 {",
          "1305:   VALUES(count(*)OVER());",
          "1306: } {1}",
          "1307: do_execsql_test 36.20 {",
          "1308:   VALUES(count(*)OVER()),(2);",
          "1309: } {1 2}",
          "1310: do_execsql_test 36.30 {",
          "1311:   VALUES(2),(count(*)OVER());",
          "1312: } {2 1}",
          "1313: do_execsql_test 36.40 {",
          "1314:   VALUES(2),(3),(count(*)OVER()),(4),(5);",
          "1315: } {2 3 1 4 5}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c285ded26c1a8b368777691cf40ad7385f27919b",
      "candidate_info": {
        "commit_hash": "c285ded26c1a8b368777691cf40ad7385f27919b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c285ded26c1a8b368777691cf40ad7385f27919b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbemem.c",
          "test/cast.test",
          "test/e_expr.test"
        ],
        "message": "Make sure a CAST to \"NUMERIC\" results in an integer if the value can be losslessly expressed as an integer, as the documentation requires. Ticket [dd6bffbfb6e61db9].\n\nFossilOrigin-Name: c0c90961b4fa1c1185772d04fe1915bc1a1af27ed8ddb8db1c524bf90d68ccbf",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbemem.c||src/vdbemem.c",
          "test/cast.test||test/cast.test",
          "test/e_expr.test||test/e_expr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 567b13093956185b5d5e971b81ba4788fd9d26c03688f643b380f0f1c1a94da0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "285: static int alsoAnInt(Mem *pRec, double rValue, i64 *piValue){",
          "286:   i64 iValue = (double)rValue;",
          "287:   if( sqlite3RealSameAsInt(rValue,iValue) ){",
          "299:   }",
          "300:   return 0==sqlite3Atoi64(pRec->z, piValue, pRec->n, pRec->enc);",
          "301: }",
          "",
          "[Removed Lines]",
          "288:     testcase( iValue<-2251799813685248 );",
          "289:     testcase( iValue==-2251799813685248 );",
          "290:     testcase( iValue==-2251799813685247 );",
          "291:     testcase( iValue>-2251799813685247 && iValue<+2251799813685247 );",
          "292:     testcase( iValue==+2251799813685247 );",
          "293:     testcase( iValue==+2251799813685248 );",
          "294:     testcase( iValue>+2251799813685248 );",
          "295:     if( iValue > -2251799813685248 && iValue < 2251799813685248 ){",
          "297:       return 1;",
          "298:     }",
          "",
          "[Added Lines]",
          "289:     return 1;",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: int sqlite3RealSameAsInt(double r1, sqlite3_int64 i){",
          "701:   double r2 = (double)i;",
          "703: }",
          "",
          "[Removed Lines]",
          "702:   return memcmp(&r1, &r2, sizeof(r1))==0;",
          "",
          "[Added Lines]",
          "702:   return memcmp(&r1, &r2, sizeof(r1))==0",
          "703:       && i > -2251799813685248 && i < 2251799813685248;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "721:     assert( (pMem->flags & (MEM_Blob|MEM_Str))!=0 );",
          "722:     assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "723:     rc = sqlite3AtoF(pMem->z, &pMem->u.r, pMem->n, pMem->enc);",
          "732:       pMem->u.i = ix;",
          "733:       MemSetTypeFlag(pMem, MEM_Int);",
          "734:     }else{",
          "",
          "[Removed Lines]",
          "724:     if( rc<=0 ){",
          "725:       if( rc==0 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)<=1 ){",
          "726:         pMem->u.i = ix;",
          "727:         MemSetTypeFlag(pMem, MEM_Int);",
          "728:       }else{",
          "729:         MemSetTypeFlag(pMem, MEM_Real);",
          "730:       }",
          "731:     }else if( rc==1 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)==0 ){",
          "",
          "[Added Lines]",
          "725:     if( ((rc==0 || rc==1) && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)<=1)",
          "726:      || sqlite3RealSameAsInt(pMem->u.r, (ix = (i64)pMem->u.r))",
          "727:     ){",
          "",
          "---------------"
        ],
        "test/cast.test||test/cast.test": [
          "File: test/cast.test -> test/cast.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "371: do_execsql_test case-5.3 {",
          "372:   SELECT CAST('123e+5' AS INTEGER);",
          "373:   SELECT CAST('123e+5' AS NUMERIC);",
          "377: # The following does not have anything to do with the CAST operator,",
          "",
          "[Removed Lines]",
          "374: } {123 12300000.0}",
          "",
          "[Added Lines]",
          "374:   SELECT CAST('123e+5' AS REAL);",
          "375: } {123 12300000 12300000.0}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415:   SELECT '' - 1;",
          "416: } {-1}",
          "418: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "419: # 2019-06-10",
          "420: # https://www.sqlite.org/src/info/dd6bffbfb6e61db9",
          "421: #",
          "422: # EVIDENCE-OF: R-09295-61337 Casting a TEXT or BLOB value into NUMERIC",
          "423: # first does a forced conversion into REAL but then further converts the",
          "424: # result into INTEGER if and only if the conversion from REAL to INTEGER",
          "425: # is lossless and reversible.",
          "426: #",
          "427: do_execsql_test cast-7.20 {",
          "428:   DROP TABLE IF EXISTS t0;",
          "429:   CREATE TABLE t0 (c0 TEXT);",
          "430:   INSERT INTO t0(c0) VALUES ('1.0');",
          "431:   SELECT CAST(c0 AS NUMERIC) FROM t0;",
          "432: } {1}",
          "",
          "---------------"
        ],
        "test/e_expr.test||test/e_expr.test": [
          "File: test/e_expr.test -> test/e_expr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1650: # is lossless and reversible.",
          "1651: #",
          "1652: do_expr_test e_expr-32.1.1 { CAST('45'   AS NUMERIC)  } integer 45",
          "1654: do_expr_test e_expr-32.1.3 { CAST('45.2' AS NUMERIC)  } real 45.2",
          "1655: do_expr_test e_expr-32.1.4 { CAST('11abc' AS NUMERIC) } integer 11",
          "1656: do_expr_test e_expr-32.1.5 { CAST('11.1abc' AS NUMERIC) } real 11.1",
          "",
          "[Removed Lines]",
          "1653: do_expr_test e_expr-32.1.2 { CAST('45.0' AS NUMERIC)  } real 45.0",
          "",
          "[Added Lines]",
          "1653: do_expr_test e_expr-32.1.2 { CAST('45.0' AS NUMERIC)  } integer 45",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1709:  real 9.22337203685478e+18 \\",
          "1710:  real 9.22337203685478e+18 \\",
          "1711:  real 9.22337203685478e+18 \\",
          "1714: ]",
          "1716: # EVIDENCE-OF: R-64550-29191 Note that the result from casting any",
          "",
          "[Removed Lines]",
          "1712:  real -5.0 \\",
          "1713:  real -5.0 \\",
          "",
          "[Added Lines]",
          "1712:  integer -5 \\",
          "1713:  integer -5 \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b28c4e564ab4ac8603f28e662a3a591a40a069b2",
      "candidate_info": {
        "commit_hash": "b28c4e564ab4ac8603f28e662a3a591a40a069b2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b28c4e564ab4ac8603f28e662a3a591a40a069b2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/window2.tcl",
          "test/window2.test"
        ],
        "message": "Minor tweak to patch on this branch to reclaim some cycles.\n\nFossilOrigin-Name: 81eed055de856068109a7e332cca0c3ff1120ebe2bfa5ed6383b165c726e0a7c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/window2.tcl||test/window2.tcl",
          "test/window2.test||test/window2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 28aa1702f7f0334abd1b30e7aa48ea3679539b11bfbba32bc9f0d6049cf18a7b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6240:       sqlite3ExprAnalyzeAggList(&sNC, pExpr->x.pList);",
          "6241: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "6242:       assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "6244: #endif",
          "6245:       sNC.ncFlags &= ~NC_InAggFunc;",
          "6246:     }",
          "",
          "[Removed Lines]",
          "6243:       sqlite3ExprAnalyzeAggregates(&sNC, pExpr->y.pFilter);",
          "",
          "[Added Lines]",
          "6243:       if( pExpr->y.pFilter ){",
          "6244:         sqlite3ExprAnalyzeAggregates(&sNC, pExpr->y.pFilter);",
          "6245:       }",
          "",
          "---------------"
        ],
        "test/window2.tcl||test/window2.tcl": [
          "File: test/window2.tcl -> test/window2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "424:   WINDOW win AS (ORDER BY 1);",
          "425: }",
          "429: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427: execsql_test 4.10 {",
          "428:   SELECT count(*) OVER (ORDER BY b) FROM t1",
          "429: }",
          "",
          "---------------"
        ],
        "test/window2.test||test/window2.test": [
          "File: test/window2.test -> test/window2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "893:   set {} {}",
          "894: } {}",
          "896: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "896: do_execsql_test 4.10 {",
          "897:   SELECT count(*) OVER (ORDER BY b) FROM t1",
          "898: } {3   3   3   6   6   6}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25050f26206456c62f400bdd95215701095b00a0",
      "candidate_info": {
        "commit_hash": "25050f26206456c62f400bdd95215701095b00a0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/25050f26206456c62f400bdd95215701095b00a0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Use an unsigned integer to count free pages in btree.c:freePage2().\n\nFossilOrigin-Name: 8820408597341344b308277ce6ef41b47c7514d6c613520789b05ee52cbedae8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 80704a16f6dbbeacc65fa36a3623df10292a28aeacf9e2c1d2891258479e3b89",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c"
        ]
      }
    }
  ]
}