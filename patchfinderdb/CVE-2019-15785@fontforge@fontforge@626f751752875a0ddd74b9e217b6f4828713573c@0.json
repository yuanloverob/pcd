{
  "cve_id": "CVE-2019-15785",
  "cve_desc": "FontForge 20190813 through 20190820 has a buffer overflow in PrefsUI_LoadPrefs in prefs.c.",
  "repo": "fontforge/fontforge",
  "patch_hash": "626f751752875a0ddd74b9e217b6f4828713573c",
  "patch_info": {
    "commit_hash": "626f751752875a0ddd74b9e217b6f4828713573c",
    "repo": "fontforge/fontforge",
    "commit_url": "https://github.com/fontforge/fontforge/commit/626f751752875a0ddd74b9e217b6f4828713573c",
    "files": [
      "fontforge/views.h",
      "fontforgeexe/fontview.c",
      "fontforgeexe/prefs.c",
      "fontforgeexe/scriptingdlg.c",
      "gdraw/gtextfield.c",
      "inc/gdraw.h",
      "inc/ggadget.h"
    ],
    "message": "Warn users before discarding their unsaved scripts (#3852)\n\n* Warn users before discarding their unsaved scripts\n\nThis closes #3846.",
    "before_after_code_files": [
      "fontforge/views.h||fontforge/views.h",
      "fontforgeexe/fontview.c||fontforgeexe/fontview.c",
      "fontforgeexe/prefs.c||fontforgeexe/prefs.c",
      "fontforgeexe/scriptingdlg.c||fontforgeexe/scriptingdlg.c",
      "gdraw/gtextfield.c||gdraw/gtextfield.c",
      "inc/gdraw.h||inc/gdraw.h",
      "inc/ggadget.h||inc/ggadget.h"
    ]
  },
  "patch_diff": {
    "fontforge/views.h||fontforge/views.h": [
      "File: fontforge/views.h -> fontforge/views.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "476:     struct lookup_subtable *cur_subtable;",
      "477:     struct qg_data *qg;",
      "478:     GPid pid_webfontserver;",
      "479: } FontView;",
      "481: typedef struct findsel {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "479:     bool script_unsaved; // Whether or not there's an unsaved script in script dialog",
      "",
      "---------------"
    ],
    "fontforgeexe/fontview.c||fontforgeexe/fontview.c": [
      "File: fontforgeexe/fontview.c -> fontforgeexe/fontview.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "80: extern int onlycopydisplayed, copymetadata, copyttfinstr, add_char_to_name_list;",
      "81: int home_char='A';",
      "82: int compact_font_on_open=0;",
      "85: static char *fv_fontnames = MONO_UI_FAMILIES;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "83: bool warn_script_unsaved = true;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "534: return( ret );",
      "535: }",
      "537: int _FVMenuGenerate(FontView *fv,int family) {",
      "538:     FVFlattenAllBitmapSelections(fv);",
      "539: return( SFGenerateFont(fv->b.sf,fv->b.active_layer,family,fv->b.normal==NULL?fv->b.map:fv->b.normal) );",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "538: static int AskScriptChanged() {",
      "539:     int ret;",
      "540:     char *buts[4];",
      "542:     buts[0] = _(\"_Yes\");",
      "543:     buts[1] = _(\"Yes, and don't _remind me again\");",
      "544:     buts[2] = _(\"_No\");",
      "545:     buts[3] = NULL;",
      "546:     ret = gwwv_ask( _(\"Unsaved script\"),(const char **) buts,0,2,_(\"You have an unsaved script in the \u00abExecute Script\u00bb dialog. Do you intend to discard it?\"));",
      "547:     if (ret == 1) {",
      "548:         warn_script_unsaved = false;",
      "549:         SavePrefs(true);",
      "550:     }",
      "551: return( ret );",
      "552: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "859:     if ( fv->b.nextsame!=NULL || fv->b.sf->fv!=&fv->b ) {",
      "861:     } else if ( SFAnyChanged(sf) ) {",
      "862:  i = AskChanged(fv->b.sf);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "878:     } else if ( warn_script_unsaved && fv->script_unsaved &&",
      "879:                 AskScriptChanged()==2 ) {",
      "880:         return false;",
      "",
      "---------------"
    ],
    "fontforgeexe/prefs.c||fontforgeexe/prefs.c": [
      "File: fontforgeexe/prefs.c -> fontforgeexe/prefs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "311:  { N_(\"AutoSaveFrequency\"), pr_int, &AutoSaveFrequency, NULL, NULL, '\\0', NULL, 0, N_( \"The number of seconds between autosaves. If you set this to 0 there will be no autosaves.\") },",
      "312:  { N_(\"RevisionsToRetain\"), pr_int, &prefRevisionsToRetain, NULL, NULL, '\\0', NULL, 0, N_( \"When Saving, keep this number of previous versions of the file. file.sfd-01 will be the last saved file, file.sfd-02 will be the file saved before that, and so on. If you set this to 0 then no revisions will be retained.\") },",
      "313:  { N_(\"UndoRedoLimitToSave\"), pr_int, &UndoRedoLimitToSave, NULL, NULL, '\\0', NULL, 0, N_( \"The number of undo and redo operations which will be saved in sfd files.\\nIf you set this to 0 undo/redo information is not saved to sfd files.\\nIf set to -1 then all available undo/redo information is saved without limit.\") },",
      "314:  PREFS_LIST_EMPTY",
      "315: },",
      "316:   new_list[] = {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "315:  { N_(\"WarnScriptUnsaved\"), pr_bool, &warn_script_unsaved, NULL, NULL, '\\0', NULL, 0, N_( \"Whether or not to warn you if you have an unsaved script in the \u00abExecute Script\u00bb dialog.\") },",
      "",
      "---------------"
    ],
    "fontforgeexe/scriptingdlg.c||fontforgeexe/scriptingdlg.c": [
      "File: fontforgeexe/scriptingdlg.c -> fontforgeexe/scriptingdlg.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "190:     if ( event->type==et_close ) {",
      "191:  SD_DoCancel( sd );",
      "192:     } else if ( event->type==et_char ) {",
      "193:  if ( event->u.chr.keysym == GK_F1 || event->u.chr.keysym == GK_Help ) {",
      "194:      help(\"scripting.html\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "192:     } else if ( event->type==et_controlevent && event->u.control.subtype==et_textchanged ) {",
      "193:     sd->fv->script_unsaved = !GTextFieldIsEmpty(GWidgetGetControl(sd->gw,CID_Script));",
      "194:     } else if ( event->type==et_controlevent && event->u.control.subtype==et_save ) {",
      "195:     sd->fv->script_unsaved = false;",
      "",
      "---------------"
    ],
    "gdraw/gtextfield.c||gdraw/gtextfield.c": [
      "File: gdraw/gtextfield.c -> gdraw/gtextfield.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "215:  GDrawPostEvent(&e);",
      "216: }",
      "218: static void GTextFieldFocusChanged(GTextField *gt,int gained) {",
      "219:     GEvent e;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "218: static void GTextFieldSaved(GTextField *gt) {",
      "219:     GEvent e;",
      "221:     e.type = et_controlevent;",
      "222:     e.w = gt->g.base;",
      "223:     e.u.control.subtype = et_save;",
      "224:     e.u.control.g = &gt->g;",
      "225:     if ( gt->g.handle_controlevent != NULL )",
      "226:  (gt->g.handle_controlevent)(&gt->g,&e);",
      "227:     else",
      "228:  GDrawPostEvent(&e);",
      "229: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "878: static unichar_t errort[] = { 'C','o','u','l','d',' ','n','o','t',' ','o','p','e','n',  '\\0' };",
      "879: static unichar_t error[] = { 'C','o','u','l','d',' ','n','o','t',' ','o','p','e','n',' ','%','.','1','0','0','h','s',  '\\0' };",
      "881: static void GTextFieldImport(GTextField *gt) {",
      "882:     unichar_t *ret;",
      "883:     char *cret;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "894: bool GTextFieldIsEmpty(GGadget *g) {",
      "895:     GTextField *gt = (GTextField *) g;",
      "896:     return gt->text == NULL || *gt->text == '\\0';",
      "897: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "970:  }",
      "971:     }",
      "972:     fclose(file);",
      "973: }",
      "975: #define MID_Cut  1",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "991:     GTextFieldSaved(gt);",
      "",
      "---------------"
    ],
    "inc/gdraw.h||inc/gdraw.h": [
      "File: inc/gdraw.h -> inc/gdraw.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "120:     et_listselected, et_listdoubleclick,",
      "121:     et_scrollbarchange,",
      "122:     et_textchanged, et_textfocuschanged,",
      "125: enum sb { et_sb_top, et_sb_uppage, et_sb_up, et_sb_left=et_sb_up,",
      "126:    et_sb_down, et_sb_right=et_sb_down, et_sb_downpage,",
      "",
      "[Removed Lines]",
      "123:     et_lastsubtype };",
      "",
      "[Added Lines]",
      "123:     et_save, et_lastsubtype };",
      "",
      "---------------"
    ],
    "inc/ggadget.h||inc/ggadget.h": [
      "File: inc/ggadget.h -> inc/ggadget.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "406: void GTextFieldSelect(GGadget *g,int sel_start, int sel_end);",
      "407: void GTextFieldShow(GGadget *g,int pos);",
      "408: void GTextFieldReplace(GGadget *g,const unichar_t *txt);",
      "409: void GCompletionFieldSetCompletion(GGadget *g,GTextCompletionHandler completion);",
      "410: void GCompletionFieldSetCompletionMode(GGadget *g,int enabled);",
      "411: void GGadgetClearList(GGadget *g);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "409: bool GTextFieldIsEmpty(GGadget *g);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4775d6d8b77e4b28dedd521abbed1b5820e52582",
      "candidate_info": {
        "commit_hash": "4775d6d8b77e4b28dedd521abbed1b5820e52582",
        "repo": "fontforge/fontforge",
        "commit_url": "https://github.com/fontforge/fontforge/commit/4775d6d8b77e4b28dedd521abbed1b5820e52582",
        "files": [
          "fontforgeexe/fontview.c",
          "fontforgeexe/prefs.c"
        ],
        "message": "Fix AddressSanitizer: global-buffer-overflow\n\n==10627==ERROR: AddressSanitizer: global-buffer-overflow on address 0x00010e2239c1 at pc 0x000111258c3d bp 0x7ffee286c210 sp 0x7ffee286b988\nWRITE of size 4 at 0x00010e2239c1 thread T0\n    #0 0x111258c3c in scanf_common(void*, int, bool, char const*, __va_list_tag*) (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x27c3c)\n    #1 0x111258d6d in wrap_vsscanf (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x27d6d)\n    #2 0x11125902c in wrap_sscanf (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x2802c)\n    #3 0x10de70b21 in PrefsUI_LoadPrefs prefs.c:1230\n    #4 0x10e02e0ce in fontforge_main startui.c:1109\n    #5 0x10d654b11 in main main.c:33\n    #6 0x7fff62d7b3d4 in start (libdyld.dylib:x86_64+0x163d4)\n\n0x00010e2239c1 is located 63 bytes to the left of global variable 'fvhintingneededcol' defined in '../fontforgeexe/fontview.c:123:14' (0x10e223a00) of size 4\n0x00010e2239c1 is located 0 bytes to the right of global variable 'warn_script_unsaved' defined in '../fontforgeexe/fontview.c:83:6' (0x10e2239c0) of size 1\nSUMMARY: AddressSanitizer: global-buffer-overflow (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x27c3c) in scanf_common(void*, int, bool, char const*, __va_list_tag*)\n\nwarn_script_unsaved is declared as bool, but prefs.c:1230 casts its\npointer to int *, leading the issue above. Prefs of type pr_bool should\nbe int as well, FontForge is pre-C99 and does not know bool.",
        "before_after_code_files": [
          "fontforgeexe/fontview.c||fontforgeexe/fontview.c",
          "fontforgeexe/prefs.c||fontforgeexe/prefs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fontforgeexe/fontview.c||fontforgeexe/fontview.c",
            "fontforgeexe/prefs.c||fontforgeexe/prefs.c"
          ],
          "candidate": [
            "fontforgeexe/fontview.c||fontforgeexe/fontview.c",
            "fontforgeexe/prefs.c||fontforgeexe/prefs.c"
          ]
        }
      },
      "candidate_diff": {
        "fontforgeexe/fontview.c||fontforgeexe/fontview.c": [
          "File: fontforgeexe/fontview.c -> fontforgeexe/fontview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: extern int onlycopydisplayed, copymetadata, copyttfinstr, add_char_to_name_list;",
          "81: int home_char='A';",
          "82: int compact_font_on_open=0;",
          "86: static char *fv_fontnames = MONO_UI_FAMILIES;",
          "",
          "[Removed Lines]",
          "83: bool warn_script_unsaved = true;",
          "",
          "[Added Lines]",
          "83: int warn_script_unsaved = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "545:     buts[3] = NULL;",
          "546:     ret = gwwv_ask( _(\"Unsaved script\"),(const char **) buts,0,2,_(\"You have an unsaved script in the \u00abExecute Script\u00bb dialog. Do you intend to discard it?\"));",
          "547:     if (ret == 1) {",
          "549:         SavePrefs(true);",
          "550:     }",
          "551: return( ret );",
          "",
          "[Removed Lines]",
          "548:         warn_script_unsaved = false;",
          "",
          "[Added Lines]",
          "548:         warn_script_unsaved = 0;",
          "",
          "---------------"
        ],
        "fontforgeexe/prefs.c||fontforgeexe/prefs.c": [
          "File: fontforgeexe/prefs.c -> fontforgeexe/prefs.c"
        ]
      }
    }
  ]
}