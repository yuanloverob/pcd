{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9f9c333cbc5cc142beb4afb98c27650d44824721",
      "candidate_info": {
        "commit_hash": "9f9c333cbc5cc142beb4afb98c27650d44824721",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9f9c333cbc5cc142beb4afb98c27650d44824721",
        "files": [
          "src/node_script.cc",
          "test/simple/test-vm-create-context-arg.js"
        ],
        "message": "vm: accept only object as arg of .createContext()\n\nConverting strings and others to objects is very slow and essentially\nwrong.",
        "before_after_code_files": [
          "src/node_script.cc||src/node_script.cc",
          "test/simple/test-vm-create-context-arg.js||test/simple/test-vm-create-context-arg.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_script.cc||src/node_script.cc": [
          "File: src/node_script.cc -> src/node_script.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:   Local<Object> context = WrappedContext::NewInstance();",
          "259:   if (args.Length() > 0) {",
          "263:   }",
          "",
          "[Removed Lines]",
          "260:     Local<Object> sandbox = args[0]->ToObject();",
          "262:     CloneObject(args.This(), sandbox, context);",
          "",
          "[Added Lines]",
          "260:     if (args[0]->IsObject()) {",
          "261:       Local<Object> sandbox = args[0].As<Object>();",
          "263:       CloneObject(args.This(), sandbox, context);",
          "264:     } else {",
          "265:       return ThrowException(Exception::TypeError(String::New(",
          "266:           \"createContext() accept only object as first argument.\")));",
          "267:     }",
          "",
          "---------------"
        ],
        "test/simple/test-vm-create-context-arg.js||test/simple/test-vm-create-context-arg.js": [
          "File: test/simple/test-vm-create-context-arg.js -> test/simple/test-vm-create-context-arg.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var vm = require('vm');",
          "26: assert.throws(function() {",
          "27:   var ctx = vm.createContext('string is not supported');",
          "28: });",
          "30: assert.doesNotThrow(function() {",
          "31:   var ctx = vm.createContext({ a: 1 });",
          "32:   ctx = vm.createContext([0, 1, 2, 3]);",
          "33: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "42ea068a1a6f7528662cf4d77e7c94e64daf7804",
      "candidate_info": {
        "commit_hash": "42ea068a1a6f7528662cf4d77e7c94e64daf7804",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/42ea068a1a6f7528662cf4d77e7c94e64daf7804",
        "files": [
          "test/simple/test-child-process-disconnect.js"
        ],
        "message": "Test for ChildProcess.disconnect()",
        "before_after_code_files": [
          "test/simple/test-child-process-disconnect.js||test/simple/test-child-process-disconnect.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-child-process-disconnect.js||test/simple/test-child-process-disconnect.js": [
          "File: test/simple/test-child-process-disconnect.js -> test/simple/test-child-process-disconnect.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var assert = require('assert');",
          "23: var common = require('../common');",
          "24: var fork = require('child_process').fork;",
          "25: var net = require('net');",
          "28: if (process.argv[2] === 'child') {",
          "30:   var server = net.createServer();",
          "32:   server.on('connection', function (socket) {",
          "34:     process.on('disconnect', function () {",
          "35:       socket.end((process.connected).toString());",
          "36:     });",
          "40:     socket.on('end', function () {",
          "41:       server.close();",
          "42:     });",
          "44:     socket.write('ready');",
          "45:   });",
          "48:   server.on('listening', function () {",
          "49:     process.send('ready');",
          "50:   });",
          "52:   server.listen(common.PORT);",
          "54: } else {",
          "56:   var child = fork(process.argv[1], ['child']);",
          "58:   var childFlag = false;",
          "59:   var childSelfTerminate = false;",
          "60:   var parentEmit = false;",
          "61:   var parentFlag = false;",
          "65:   child.on('disconnect', function () {",
          "66:     parentEmit = true;",
          "67:     parentFlag = child.connected;",
          "68:   });",
          "71:   child.on('exit', function () {",
          "72:     childSelfTerminate = true;",
          "73:   });",
          "76:   child.on('message', function (msg) {",
          "77:     if (msg === 'ready') {",
          "80:       var socket = net.connect(common.PORT);",
          "82:       socket.on('data', function (data) {",
          "83:         data = data.toString();",
          "86:         if (data === 'ready') {",
          "87:           child.disconnect();",
          "88:           return;",
          "89:         }",
          "92:         childFlag = (data === 'true');",
          "93:       });",
          "95:     }",
          "96:   });",
          "98:   process.on('exit', function () {",
          "99:     assert.equal(childFlag, false);",
          "100:     assert.equal(parentFlag, false);",
          "102:     assert.ok(childSelfTerminate);",
          "103:     assert.ok(parentEmit);",
          "104:   });",
          "105: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d13887512e37a0687b50ec66fc3f917620b61bf4",
      "candidate_info": {
        "commit_hash": "d13887512e37a0687b50ec66fc3f917620b61bf4",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d13887512e37a0687b50ec66fc3f917620b61bf4",
        "files": [
          "doc/api/child_process.markdown",
          "doc/api/net.markdown",
          "lib/net.js",
          "test/simple/test-net-lazy-listen.js"
        ],
        "message": "net: lazy listen on handler\n\nThis allow the server to be shared without the need to handle connection\nfrom master",
        "before_after_code_files": [
          "lib/net.js||linet.js",
          "test/simple/test-net-lazy-listen.js||test/simple/test-net-lazy-listen.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "896:   var self = this;",
          "897:   var r = 0;",
          "911:   self._handle.onconnection = onconnection;",
          "912:   self._handle.owner = self;",
          "",
          "[Removed Lines]",
          "901:   if (!self._handle) {",
          "902:     self._handle = createServerHandle(address, port, addressType, fd);",
          "903:     if (!self._handle) {",
          "904:       process.nextTick(function() {",
          "905:         self.emit('error', errnoException(errno, 'listen'));",
          "906:       });",
          "907:       return;",
          "908:     }",
          "909:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "923:     process.nextTick(function() {",
          "924:       self.emit('error', ex);",
          "925:     });",
          "927:   }",
          "930:   this._connectionKey = addressType + ':' + address + ':' + port;",
          "935: };",
          "",
          "[Removed Lines]",
          "926:     return;",
          "932:   process.nextTick(function() {",
          "933:     self.emit('listening');",
          "934:   });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "941:   if (cluster.isWorker) {",
          "942:     cluster._getServer(self, address, port, addressType, fd, function(handle) {",
          "943:       self._handle = handle;",
          "945:     });",
          "946:   } else {",
          "948:   }",
          "949: }",
          "",
          "[Removed Lines]",
          "944:       self._listen2(address, port, addressType, backlog, fd);",
          "947:     self._listen2(address, port, addressType, backlog, fd);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-net-lazy-listen.js||test/simple/test-net-lazy-listen.js": [
          "File: test/simple/test-net-lazy-listen.js -> test/simple/test-net-lazy-listen.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var net = require('net');",
          "24: var fork = require('child_process').fork;",
          "26: if (process.argv[2] === 'worker') {",
          "27:   process.once('disconnect', function () {",
          "28:     process.exit(0);",
          "29:   });",
          "31:   process.on('message', function (msg, server) {",
          "32:     if (msg !== 'server') return;",
          "34:     server.on('connection', function (socket) {",
          "35:       socket.end(process.argv[3]);",
          "36:     });",
          "38:     process.send('listen');",
          "39:   });",
          "41:   process.send('online');",
          "42:   return;",
          "43: }",
          "45: var workers = [];",
          "47: function spawn(server, id, cb) {",
          "49:   var worker = fork(__filename, ['worker', id]);",
          "50:   workers[id] = worker;",
          "53:   worker.on('message', function (msg) {",
          "54:     switch (msg) {",
          "55:       case 'online':",
          "56:         worker.send('server', server);",
          "57:         break;",
          "58:       case 'listen':",
          "59:         cb(worker);",
          "60:         break;",
          "61:       default:",
          "62:         throw new Error('got wrong message' + msg);",
          "63:     }",
          "64:   });",
          "66:   return worker;",
          "67: }",
          "70: var server = net.createServer().listen(common.PORT, function () {",
          "72:   setTimeout(function() {",
          "73:       console.log('spawn worker#0');",
          "74:       spawn(server, 0, function () {",
          "75:         console.log('worker#0 spawned');",
          "76:       });",
          "77:   }, 250);",
          "79:   console.log('testing for standby, expect id 0');",
          "80:   testResponse([0], function () {",
          "83:     testNewWorker(1, [0, 1], function () {",
          "86:       testWorkerDeath(0, [1], function () {",
          "89:         testServerClose(server, [1], function () {",
          "92:           testWorkerDeath(1, [], function () {",
          "93:             console.log('test complete');",
          "94:           });",
          "95:         });",
          "96:       });",
          "97:     });",
          "98:   });",
          "99: });",
          "101: function testServerClose(server, expect, cb) {",
          "102:   console.log('closeing server');",
          "103:   server.close(function () {",
          "104:     testResponse(expect, cb);",
          "105:   });",
          "106: }",
          "108: function testNewWorker(workerId, exptect, cb) {",
          "109:   console.log('spawning worker#' + workerId);",
          "110:   spawn(server, 1, function () {",
          "111:     testResponse(exptect, cb);",
          "112:   });",
          "113: }",
          "115: function testWorkerDeath(workerID, exptect, cb) {",
          "117:   console.log('killing worker#' + workerID);",
          "118:   workers[workerID].kill();",
          "119:   workers[workerID].once('exit', function () {",
          "120:     testResponse(exptect, cb);",
          "121:   });",
          "122: }",
          "124: function testResponse(expect, cb) {",
          "126:   var count = 25;",
          "127:   var missing = expect.slice(0);",
          "129:   var i = count;",
          "130:   while (i--) {",
          "131:     makeConnection(function (error, id) {",
          "132:       if (expect.length === 0) {",
          "133:         if (error === null) {",
          "134:           throw new Error('connect should not be possible');",
          "135:         }",
          "136:       } else {",
          "137:         if (expect.indexOf(id) === -1) {",
          "138:           throw new Error('got unexpected response: ' + id +",
          "139:                           ', expected: ' + expect.join(', '));",
          "140:         }",
          "142:         var index = missing.indexOf(id);",
          "143:         if (index !== -1) missing.splice(index, 1);",
          "144:       }",
          "146:       count -= 1;",
          "147:       if (count === 0) {",
          "148:         if (missing.length !== 0) {",
          "149:           throw new Error('no connection responsed with the following id: ' +",
          "150:                           missing.join(', '));",
          "151:         }",
          "152:         cb();",
          "153:       }",
          "154:     });",
          "155:   }",
          "156: }",
          "158: function makeConnection(cb) {",
          "159:   var client = net.connect({ port: common.PORT });",
          "161:   var id = null;",
          "162:   client.once('data', function(data) {",
          "163:     id = parseInt(data, 10);",
          "164:   });",
          "166:   var error = null;",
          "167:   client.once('error', function (e) {",
          "168:     error = e;",
          "169:   });",
          "171:   client.setTimeout(500);",
          "173:   client.on('close', function () {",
          "174:     cb(error, id);",
          "175:   });",
          "176: }",
          "178: process.on('exit', function () {",
          "179:   workers.forEach(function (worker) {",
          "180:     try { worker.kill(); } catch(e) {}",
          "181:   });",
          "182: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b86a4453f0c76f2707a75c0b2343aba33ec63bc",
      "candidate_info": {
        "commit_hash": "9b86a4453f0c76f2707a75c0b2343aba33ec63bc",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9b86a4453f0c76f2707a75c0b2343aba33ec63bc",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "src/node_version.h"
        ],
        "message": "2012.08.02, Version 0.8.5 (Stable)\n\n* node: tag Encode and friends NODE_EXTERN (Ben Noordhuis)\n\n* fs: fix ReadStream / WriteStream missing callback (Gil Pedersen)\n\n* fs: fix readFileSync(\"/proc/cpuinfo\") regression (Ben Noordhuis)\n\n* installer: don't assume bash is installed (Ben Noordhuis)\n\n* Report errors properly from --eval and stdin (isaacs)\n\n* assert: fix throws() throws an error without message property (koichik)\n\n* cluster: fix libuv assert in net.listen() (Ben Noordhuis)\n\n* build: always link sunos builds with libumem (Trent Mick)\n\n* build: improve armv7 / hard-float detection (Adam Malcontenti-Wilson)\n\n* https: Use host header as effective servername (isaacs)\n\n* sunos: work around OS bug to prevent fs.watch() from spinning (Bryan Cantrill)\n\n* linux: fix 'two watchers, one path' segfault (Ben Noordhuis)\n\n* windows: fix memory leaks in many fs functions (Bert Belder)\n\n* windows: don't allow directories to be opened for writing/appending (Bert Belder)\n\n* windows: make fork() work even when not all stdio handles are valid (Bert Belder)\n\n* windows: make unlink() not remove mount points, and improve performance (Bert Belder)\n\n* build: Sign pkg installer for OS X (isaacs)",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #define NODE_MAJOR_VERSION 0",
          "26: #define NODE_MINOR_VERSION 8",
          "27: #define NODE_PATCH_VERSION 5",
          "30: #ifndef NODE_STRINGIFY",
          "31: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "28: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "28: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f4403f90f846f401cf93ba17cbb6f5ddde8fb03d",
      "candidate_info": {
        "commit_hash": "f4403f90f846f401cf93ba17cbb6f5ddde8fb03d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f4403f90f846f401cf93ba17cbb6f5ddde8fb03d",
        "files": [
          "lib/tty.js"
        ],
        "message": "tty: emit \"error\" instead of throwing when getWindowSize() fails",
        "before_after_code_files": [
          "lib/tty.js||litty.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/tty.js||litty.js": [
          "File: lib/tty.js -> litty.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:   var oldRows = this.rows;",
          "102:   var winSize = this._handle.getWindowSize();",
          "103:   if (!winSize) {",
          "105:   }",
          "106:   var newCols = winSize[0];",
          "107:   var newRows = winSize[1];",
          "",
          "[Removed Lines]",
          "104:     throw errnoException(errno, 'getWindowSize');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}