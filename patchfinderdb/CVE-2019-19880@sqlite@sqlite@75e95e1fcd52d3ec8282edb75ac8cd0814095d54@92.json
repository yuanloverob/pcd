{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4e61e88348693cde472989b3dc1a06b5ff9dd9c0",
      "candidate_info": {
        "commit_hash": "4e61e88348693cde472989b3dc1a06b5ff9dd9c0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4e61e88348693cde472989b3dc1a06b5ff9dd9c0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "src/sqliteInt.h",
          "src/vacuum.c",
          "test/e_vacuum.test"
        ],
        "message": "Only preserve rowid values for VACUUM INTO.  Keep the legacy behavior of renumbering rowids for ordinary VACUUM.\n\nFossilOrigin-Name: 13a0ea6466b051ea5281865ed5285b8b5a99ec4307f400c5f7b03692723f1cd1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vacuum.c||src/vacuum.c",
          "test/e_vacuum.test||test/e_vacuum.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8d3af2010f4f652865f5c0d18e3bc793de05f8e75e75cc77786f61004b2ad28f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2352:       sqlite3RowidConstraint(pParse, onError, pDest);",
          "2353:       sqlite3VdbeJumpHere(v, addr2);",
          "2354:       autoIncStep(pParse, regAutoinc, regRowid);",
          "2356:       addr1 = sqlite3VdbeAddOp2(v, OP_NewRowid, iDest, regRowid);",
          "2357:     }else{",
          "2358:       addr1 = sqlite3VdbeAddOp2(v, OP_Rowid, iSrc, regRowid);",
          "",
          "[Removed Lines]",
          "2355:     }else if( pDest->pIndex==0 && !(db->mDbFlags & DBFLAG_Vacuum) ){",
          "",
          "[Added Lines]",
          "2355:     }else if( pDest->pIndex==0 && !(db->mDbFlags & DBFLAG_VacuumInto) ){",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:     return SQLITE_ERROR;",
          "171:   }",
          "172:   saved_openFlags = db->openFlags;",
          "173:   if( pOut ){",
          "174:     if( sqlite3_value_type(pOut)!=SQLITE_TEXT ){",
          "175:       sqlite3SetString(pzErrMsg, db, \"non-text filename\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:   saved_mDbFlags = db->mDbFlags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:     zOut = (const char*)sqlite3_value_text(pOut);",
          "179:     db->openFlags &= ~SQLITE_OPEN_READONLY;",
          "180:     db->openFlags |= SQLITE_OPEN_CREATE|SQLITE_OPEN_READWRITE;",
          "181:   }else{",
          "182:     zOut = \"\";",
          "183:   }",
          "188:   saved_flags = db->flags;",
          "190:   saved_nChange = db->nChange;",
          "191:   saved_nTotalChange = db->nTotalChange;",
          "192:   saved_mTrace = db->mTrace;",
          "193:   db->flags |= SQLITE_WriteSchema | SQLITE_IgnoreChecks;",
          "195:   db->flags &= ~(u64)(SQLITE_ForeignKeys | SQLITE_ReverseOrder",
          "196:                    | SQLITE_Defensive | SQLITE_CountRows);",
          "197:   db->mTrace = 0;",
          "",
          "[Removed Lines]",
          "189:   saved_mDbFlags = db->mDbFlags;",
          "194:   db->mDbFlags |= DBFLAG_PreferBuiltin | DBFLAG_Vacuum;",
          "",
          "[Added Lines]",
          "182:     db->mDbFlags |= DBFLAG_PreferBuiltin | DBFLAG_Vacuum | DBFLAG_VacuumInto;",
          "185:     db->mDbFlags |= DBFLAG_PreferBuiltin | DBFLAG_Vacuum;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "307:       zDbMain",
          "308:   );",
          "309:   assert( (db->mDbFlags & DBFLAG_Vacuum)!=0 );",
          "311:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "",
          "[Removed Lines]",
          "310:   db->mDbFlags &= ~DBFLAG_Vacuum;",
          "",
          "[Added Lines]",
          "311:   db->mDbFlags &= ~(DBFLAG_Vacuum|DBFLAG_VacuumInto);",
          "",
          "---------------"
        ],
        "test/e_vacuum.test||test/e_vacuum.test": [
          "File: test/e_vacuum.test -> test/e_vacuum.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "232: do_execsql_test e_vacuum-3.1.2 {",
          "233:   VACUUM;",
          "234:   SELECT rowid, x FROM t4;",
          "238: do_execsql_test e_vacuum-3.1.3 {",
          "239:   CREATE TABLE t5(x, y INTEGER PRIMARY KEY);",
          "240:   INSERT INTO t5(x) VALUES('x');",
          "",
          "[Removed Lines]",
          "235: } {1 x 3 z}",
          "236: # Was: {1 x 2 z}",
          "",
          "[Added Lines]",
          "235: } {1 x 2 z}",
          "237: # Rowids are preserved if an INTEGER PRIMARY KEY is used",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248:   SELECT rowid, x FROM t5;",
          "249: } {1 x 3 z}",
          "251: # EVIDENCE-OF: R-49563-33883 A VACUUM will fail if there is an open",
          "252: # transaction, or if there are one or more active SQL statements when it",
          "253: # is run.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251: # Rowid is preserved for VACUUM INTO",
          "252: do_execsql_test e_vacuum-3.1.5 {",
          "253:   DROP TABLE t5;",
          "254:   CREATE TABLE t5(x);",
          "255:   INSERT INTO t5(x) VALUES('x');",
          "256:   INSERT INTO t5(x) VALUES('y');",
          "257:   INSERT INTO t5(x) VALUES('z');",
          "258:   DELETE FROM t5 WHERE x = 'y';",
          "259:   SELECT rowid, x FROM t5;",
          "260: } {1 x 3 z}",
          "261: forcedelete test2.db",
          "262: do_execsql_test e_vacuum-3.1.6 {",
          "263:   VACUUM INTO 'test2.db';",
          "264:   ATTACH 'test2.db' AS aux1;",
          "265:   SELECT rowid, x FROM aux1.t5;",
          "266:   DETACH aux1;",
          "267: } {1 x 3 z}",
          "269: # Rowids are renumbered even if the table being vacuumed",
          "270: # has indexes.",
          "271: do_execsql_test e_vacuum-3.1.7 {",
          "272:   DROP TABLE t5;",
          "273:   CREATE TABLE t5(x,y,z);",
          "274:   INSERT INTO t5(x) VALUES('x');",
          "275:   INSERT INTO t5(x) VALUES('y');",
          "276:   INSERT INTO t5(x) VALUES('z');",
          "277:   UPDATE t5 SET y=x, z=random();",
          "278:   DELETE FROM t5 WHERE x = 'y';",
          "279:   CREATE INDEX t5x ON t5(x);",
          "280:   CREATE UNIQUE INDEX t5y ON t5(y);",
          "281:   CREATE INDEX t5zxy ON t5(z,x,y);",
          "282:   SELECT rowid, x FROM t5;",
          "283: } {1 x 3 z}",
          "284: do_execsql_test e_vacuum-3.1.8 {",
          "285:   VACUUM;",
          "286:   SELECT rowid, x FROM t5;",
          "287: } {1 x 3 z}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1ac03590baf0fffea9437436adeaf4a1db64a65",
      "candidate_info": {
        "commit_hash": "a1ac03590baf0fffea9437436adeaf4a1db64a65",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a1ac03590baf0fffea9437436adeaf4a1db64a65",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/walker.c",
          "test/altertab3.test"
        ],
        "message": "Fix a faulty assert() in walker.c that could fail when processing an ALTER TABLE statement on a schema containing invalid table references that are part of a WINDOW definition.\n\nFossilOrigin-Name: ee076c28d8ee0f5b099cdef83ae6cea6ef5aa209ab528d7c49949dd653ce019c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/walker.c||src/walker.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 47e23064ba0205148f89e12803a62d5a4d6d2054f593f60c031e815112170b9b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:   {",
          "121:     Parse *pParse = pWalker->pParse;",
          "122:     if( pParse && IN_RENAME_OBJECT ){",
          "123:       int rc = walkWindowList(pWalker, p->pWinDefn);",
          "125:       return rc;",
          "126:     }",
          "127:   }",
          "",
          "[Removed Lines]",
          "124:       assert( rc==WRC_Continue );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:   ) IN () OR t1.a=5}",
          "238: }",
          "241: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240: #-------------------------------------------------------------------------",
          "241: reset_db",
          "242: do_execsql_test 11.1 {",
          "243:   CREATE TABLE t1(",
          "244:       a,b,c,d,e,f,g,h,j,jj,jjb,k,aa,bb,cc,dd,ee DEFAULT 3.14,",
          "245:       ff DEFAULT('hiccup'),Wg NOD NULL DEFAULT(false)",
          "246:   );",
          "248:   CREATE TRIGGER b AFTER INSERT ON t1 WHEN new.a BEGIN",
          "249:     SELECT a, sum() w3 FROM t1",
          "250:     WINDOW b AS (ORDER BY NOT EXISTS(SELECT 1 FROM abc));",
          "251:   END;",
          "252: }",
          "254: do_catchsql_test 11.2 {",
          "255:   ALTER TABLE t1 RENAME TO t1x;",
          "256: } {1 {error in trigger b: no such table: abc}}",
          "258: do_execsql_test 11.3 {",
          "259:   DROP TRIGGER b;",
          "260:   CREATE TRIGGER b AFTER INSERT ON t1 WHEN new.a BEGIN",
          "261:     SELECT a, sum() w3 FROM t1",
          "262:     WINDOW b AS (ORDER BY NOT EXISTS(SELECT 1 FROM t1));",
          "263:   END;",
          "264: } {}",
          "266: do_execsql_test 11.4 {",
          "267:   ALTER TABLE t1 RENAME TO t1x;",
          "268:   SELECT sql FROM sqlite_master WHERE name = 'b';",
          "269: } {",
          "270: {CREATE TRIGGER b AFTER INSERT ON \"t1x\" WHEN new.a BEGIN",
          "271:     SELECT a, sum() w3 FROM \"t1x\"",
          "272:     WINDOW b AS (ORDER BY NOT EXISTS(SELECT 1 FROM \"t1x\"));",
          "273:   END}",
          "274: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3ecc05bc3fb414a0a184b4d69d5ecc38ddb24951",
      "candidate_info": {
        "commit_hash": "3ecc05bc3fb414a0a184b4d69d5ecc38ddb24951",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3ecc05bc3fb414a0a184b4d69d5ecc38ddb24951",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "Fix goofy string formatting in lemon.c that dates from the K&amp;R-C days.\n\nFossilOrigin-Name: 48ba5e5a2227257cebafacbb09e9dd91d9b89ab2d52a8b4e4113c1d017d95f41",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4d6d2fc046d586a1e5989bbb2757f13d0371fbfad0acf45a0e2fd77dffd8d8f9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "910:     sp = Symbol_find(lemp->start);",
          "911:     if( sp==0 ){",
          "912:       ErrorMsg(lemp->filename,0,",
          "916:       lemp->errorcnt++;",
          "917:       sp = lemp->startRule->lhs;",
          "918:     }",
          "",
          "[Removed Lines]",
          "913: \"The specified start symbol \\\"%s\\\" is not \\",
          "914: in a nonterminal of the grammar.  \\\"%s\\\" will be used as the start \\",
          "915: symbol instead.\",lemp->start,lemp->startRule->lhs->name);",
          "",
          "[Added Lines]",
          "913:         \"The specified start symbol \\\"%s\\\" is not \"",
          "914:         \"in a nonterminal of the grammar.  \\\"%s\\\" will be used as the start \"",
          "915:         \"symbol instead.\",lemp->start,lemp->startRule->lhs->name);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "928:     for(i=0; i<rp->nrhs; i++){",
          "930:         ErrorMsg(lemp->filename,0,",
          "934:         lemp->errorcnt++;",
          "935:       }",
          "936:     }",
          "",
          "[Removed Lines]",
          "931: \"The start symbol \\\"%s\\\" occurs on the \\",
          "932: right-hand side of a rule. This will result in a parser which \\",
          "933: does not work properly.\",sp->name);",
          "",
          "[Added Lines]",
          "931:           \"The start symbol \\\"%s\\\" occurs on the \"",
          "932:           \"right-hand side of a rule. This will result in a parser which \"",
          "933:           \"does not work properly.\",sp->name);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2274:       }else if( x[0]=='{' ){",
          "2275:         if( psp->prevrule==0 ){",
          "2276:           ErrorMsg(psp->filename,psp->tokenlineno,",
          "2279:           psp->errorcnt++;",
          "2280:         }else if( psp->prevrule->code!=0 ){",
          "2281:           ErrorMsg(psp->filename,psp->tokenlineno,",
          "2284:           psp->errorcnt++;",
          "2285:         }else if( strcmp(x, \"{NEVER-REDUCE\")==0 ){",
          "2286:           psp->prevrule->neverReduce = 1;",
          "",
          "[Removed Lines]",
          "2277: \"There is no prior rule upon which to attach the code \\",
          "2278: fragment which begins on this line.\");",
          "2282: \"Code fragment beginning on this line is not the first \\",
          "2283: to follow the previous rule.\");",
          "",
          "[Added Lines]",
          "2277:             \"There is no prior rule upon which to attach the code \"",
          "2278:             \"fragment which begins on this line.\");",
          "2282:             \"Code fragment beginning on this line is not the first \"",
          "2283:             \"to follow the previous rule.\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2309:         psp->errorcnt++;",
          "2310:       }else if( psp->prevrule->precsym!=0 ){",
          "2311:         ErrorMsg(psp->filename,psp->tokenlineno,",
          "2314:         psp->errorcnt++;",
          "2315:       }else{",
          "2316:         psp->prevrule->precsym = Symbol_new(x);",
          "",
          "[Removed Lines]",
          "2312: \"Precedence mark on this line is not the first \\",
          "2313: to follow the previous rule.\");",
          "",
          "[Added Lines]",
          "2312:           \"Precedence mark on this line is not the first \"",
          "2313:           \"to follow the previous rule.\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2913:       }",
          "2914:       if( c==0 ){",
          "2915:         ErrorMsg(ps.filename,startline,",
          "2917:         ps.errorcnt++;",
          "2918:         nextcp = cp;",
          "2919:       }else{",
          "",
          "[Removed Lines]",
          "2916: \"String starting on this line is not terminated before the end of the file.\");",
          "",
          "[Added Lines]",
          "2916:             \"String starting on this line is not terminated before \"",
          "2917:             \"the end of the file.\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2952:       }",
          "2953:       if( c==0 ){",
          "2954:         ErrorMsg(ps.filename,ps.tokenlineno,",
          "2956:         ps.errorcnt++;",
          "2957:         nextcp = cp;",
          "2958:       }else{",
          "",
          "[Removed Lines]",
          "2955: \"C code starting on this line is not terminated before the end of the file.\");",
          "",
          "[Added Lines]",
          "2956:           \"C code starting on this line is not terminated before \"",
          "2957:           \"the end of the file.\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3bf0d7a8813a7e40f1ad37e10cad744bfd295e74",
      "candidate_info": {
        "commit_hash": "3bf0d7a8813a7e40f1ad37e10cad744bfd295e74",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3bf0d7a8813a7e40f1ad37e10cad744bfd295e74",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/memdb.c"
        ],
        "message": "Remove an incorrect assert() from the deserialize in-memory database VFS.\n\nFossilOrigin-Name: 80151d7e3b9fd84086874a1cebed024b9e14005ea2d0108cf6efcd07373fcf51",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/memdb.c||src/memdb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb72ee0478ce98c48aae059fd5de4e36caf2b8c953e08fcb799bfd119ad46b73",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/memdb.c||src/memdb.c": [
          "File: src/memdb.c -> src/memdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "306: ){",
          "307:   MemFile *p = (MemFile *)pFile;",
          "308:   if( iOfst+iAmt>p->sz ){",
          "311:   }else{",
          "312:     p->nMmap++;",
          "",
          "[Removed Lines]",
          "309:     assert( CORRUPT_DB );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dbdddc99d83130fe22ed63a4bfc19a53a408c51b",
      "candidate_info": {
        "commit_hash": "dbdddc99d83130fe22ed63a4bfc19a53a408c51b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dbdddc99d83130fe22ed63a4bfc19a53a408c51b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Detect oversized strings in the OP_String opcode even if the P4 argument is originally UTF8 and has to be converted to UTF16 to match the database file and that conversion causes the string to become shorter and cross below SQLITE_LIMIT_LENGTH threshold.  This might fix an OSSFuzz problem that we have been so far unable to reproduce.\n\nFossilOrigin-Name: c13d563925db12bc2c91ff9432050261e5bd39d960e2739777a66bf804df2e31",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: be21a6416d47ff7db995006a0422b745044d9b8bb5bad3c53342aa6e2e524771",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1102:   if( encoding!=SQLITE_UTF8 ){",
          "1103:     rc = sqlite3VdbeMemSetStr(pOut, pOp->p4.z, -1, SQLITE_UTF8, SQLITE_STATIC);",
          "1104:     assert( rc==SQLITE_OK || rc==SQLITE_TOOBIG );",
          "1105:     if( SQLITE_OK!=sqlite3VdbeChangeEncoding(pOut, encoding) ) goto no_mem;",
          "1106:     assert( pOut->szMalloc>0 && pOut->zMalloc==pOut->z );",
          "1107:     assert( VdbeMemDynamic(pOut)==0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1105:     if( rc ) goto too_big;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1114:     pOp->p4.z = pOut->z;",
          "1115:     pOp->p1 = pOut->n;",
          "1116:   }",
          "1118: #endif",
          "1119:   if( pOp->p1>db->aLimit[SQLITE_LIMIT_LENGTH] ){",
          "1120:     goto too_big;",
          "",
          "[Removed Lines]",
          "1117:   testcase( rc==SQLITE_TOOBIG );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}