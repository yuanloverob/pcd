{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7ba03ea15aa0adee1cce6eb4ffe4df8046cb3271",
      "candidate_info": {
        "commit_hash": "7ba03ea15aa0adee1cce6eb4ffe4df8046cb3271",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7ba03ea15aa0adee1cce6eb4ffe4df8046cb3271",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/printf.c"
        ],
        "message": "Slight adjustment to the printf formatter large memory allocation detector so that it does not overestimate the amount of space needed for oversize %d conversions.\n\nFossilOrigin-Name: 1aee70d6de8a9b17ebb74a7cb1dad65139cde1b615dcce4d15d3a476fda8676b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/printf.c||src/printf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 179e5d46054e5c86f53a79b7a0823d9a383da8391ad1d3c3b22645927a1e052b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/printf.c||src/printf.c": [
          "File: src/printf.c -> src/printf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "442:           nOut = etBUFSIZE;",
          "443:           zOut = buf;",
          "444:         }else{",
          "446:           zOut = zExtra = printfTempBuf(pAccum, n);",
          "447:           if( zOut==0 ) return;",
          "448:           nOut = (int)n;",
          "",
          "[Removed Lines]",
          "445:           u64 n = (u64)precision + 10 + precision/3;",
          "",
          "[Added Lines]",
          "445:           u64 n;",
          "446:           n = (u64)precision + 10;",
          "447:           if( cThousand ) n += precision/3;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e551b5147289167db2b014e8ec28fc7ea2454fc4",
      "candidate_info": {
        "commit_hash": "e551b5147289167db2b014e8ec28fc7ea2454fc4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e551b5147289167db2b014e8ec28fc7ea2454fc4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix a typo in the CLI help output for the \".dump\" command.\n\nFossilOrigin-Name: 57638248de147efe8d663b3ae1389f590c7b2b7225ecfe295699d68c2893cd09",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2bda9dc41c07092ae37d0c6001c1271e0622bfff7151201fc2bb4c95422c087b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3489:   \"   Options:\",",
          "3490:   \"     --preserve-rowids      Include ROWID values in the output\",",
          "3491:   \"     --newlines             Allow unescaped newline characters in output\",",
          "3493:   \".echo on|off             Turn command echo on or off\",",
          "3494:   \".eqp on|off|full|...     Enable or disable automatic EXPLAIN QUERY PLAN\",",
          "3495:   \"   Other Modes:\",",
          "",
          "[Removed Lines]",
          "3492:   \"   TABLE is LIKE pattern for the tables to dump\",",
          "",
          "[Added Lines]",
          "3492:   \"   TABLE is a LIKE pattern for the tables to dump\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1af9c603c70535a61b5785a4b29ce9cecc8f78d",
      "candidate_info": {
        "commit_hash": "b1af9c603c70535a61b5785a4b29ce9cecc8f78d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b1af9c603c70535a61b5785a4b29ce9cecc8f78d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Progress handler improvements: (1) Invoke the callback after OP_Program opcodes (2) Invoke the callback multiple times in a row to catch up after a long run of no progress checks.\n\nFossilOrigin-Name: 0c5db18d79366d9c23925ce3ed835500311f32a10aa7dbfdd09148b1e8a2507b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fa792714ae62fa980f1767acc6d622a6727ceb677870243c88548423795dcb5b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "823:     assert( db->nProgressOps!=0 );",
          "825:     if( db->xProgress(db->pProgressArg) ){",
          "826:       nProgressLimit = 0xffffffff;",
          "827:       rc = SQLITE_INTERRUPT;",
          "",
          "[Removed Lines]",
          "822:   if( nVmStep>=nProgressLimit && db->xProgress!=0 ){",
          "824:     nProgressLimit = nVmStep + db->nProgressOps - (nVmStep%db->nProgressOps);",
          "",
          "[Added Lines]",
          "822:   while( nVmStep>=nProgressLimit && db->xProgress!=0 ){",
          "824:     nProgressLimit += db->nProgressOps;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6174:   }",
          "6175: #endif",
          "6176:   pOp = &aOp[-1];",
          "6179: }",
          "",
          "[Removed Lines]",
          "6178:   break;",
          "",
          "[Added Lines]",
          "6177:   goto check_for_interrupt;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7586: vdbe_return:",
          "7587: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "7589:     if( db->xProgress(db->pProgressArg) ){",
          "7590:       nProgressLimit = 0xffffffff;",
          "7591:       rc = SQLITE_INTERRUPT;",
          "",
          "[Removed Lines]",
          "7588:   if( nVmStep>=nProgressLimit && db->xProgress!=0 ){",
          "",
          "[Added Lines]",
          "7587:   while( nVmStep>=nProgressLimit && db->xProgress!=0 ){",
          "7588:     nProgressLimit += db->nProgressOps;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b29ef5ef032e6da71785b49709a967737be352c4",
      "candidate_info": {
        "commit_hash": "b29ef5ef032e6da71785b49709a967737be352c4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b29ef5ef032e6da71785b49709a967737be352c4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Fix the OP_SeekRowid opcode so that it works correctly with a Real argument without damaging the value in the register that is the argument. Ticket [b2d4edaffdc156cc].  Test cases in TH3.\n\nFossilOrigin-Name: 3cde82c86b963fa75192907d548febd3882c7d8fc7daf1903fadd5ca46623be1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0b73a09270dfafb27f8d1762b547ef8178c9da66f45e7153ff0b76272dfa92f5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4539:   pIn3 = &aMem[pOp->p3];",
          "4540:   testcase( pIn3->flags & MEM_Int );",
          "4541:   testcase( pIn3->flags & MEM_IntReal );",
          "4542:   if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "4553:   }",
          "4556:   pIn3 = &aMem[pOp->p3];",
          "4557:   assert( (pIn3->flags & MEM_Int)!=0 || pOp->opcode==OP_SeekRowid );",
          "4558:   assert( pOp->p1>=0 && pOp->p1<p->nCursor );",
          "4559:   pC = p->apCsr[pOp->p1];",
          "4560:   assert( pC!=0 );",
          "4561: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "4547:     u16 origFlags = pIn3->flags;",
          "4548:     int isNotInt;",
          "4549:     applyAffinity(pIn3, SQLITE_AFF_NUMERIC, encoding);",
          "4550:     isNotInt = (pIn3->flags & MEM_Int)==0;",
          "4551:     pIn3->flags = origFlags;",
          "4552:     if( isNotInt ) goto jump_to_p2;",
          "",
          "[Added Lines]",
          "4542:   testcase( pIn3->flags & MEM_Real );",
          "4543:   testcase( (pIn3->flags & (MEM_Str|MEM_Int))==MEM_Str );",
          "4550:     Mem x = pIn3[0];",
          "4551:     applyAffinity(&x, SQLITE_AFF_NUMERIC, encoding);",
          "4552:     if( (x.flags & MEM_Int)==0 ) goto jump_to_p2;",
          "4553:     iKey = x.u.i;",
          "4554:     goto notExistsWithKey;",
          "4561:   iKey = pIn3->u.i;",
          "4562: notExistsWithKey:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4566:   pCrsr = pC->uc.pCursor;",
          "4567:   assert( pCrsr!=0 );",
          "4568:   res = 0;",
          "4570:   rc = sqlite3BtreeMovetoUnpacked(pCrsr, 0, iKey, 0, &res);",
          "4571:   assert( rc==SQLITE_OK || res==0 );",
          "",
          "[Removed Lines]",
          "4569:   iKey = pIn3->u.i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f26b1453855dc4d651b59239ef39b43e9447ab15",
      "candidate_info": {
        "commit_hash": "f26b1453855dc4d651b59239ef39b43e9447ab15",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f26b1453855dc4d651b59239ef39b43e9447ab15",
        "files": [
          "ext/fts5/test/fts5aux.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Verify that fts5 auxiliary functions cannot be used in aggregate queries.\n\nFossilOrigin-Name: 122330dba3eb2492875bd02a46442306f73e251408447af5e5914ee0c8d6a110",
        "before_after_code_files": [
          "ext/fts5/test/fts5aux.test||ext/fts5/test/fts5aux.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/test/fts5aux.test||ext/fts5/test/fts5aux.test": [
          "File: ext/fts5/test/fts5aux.test -> ext/fts5/test/fts5aux.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "275:   9 10",
          "276: }",
          "280: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278: #-------------------------------------------------------------------------",
          "279: # Test that aux. functions may not be used in aggregate queries.",
          "280: #",
          "281: reset_db",
          "282: do_execsql_test 10.0 {",
          "283:   CREATE VIRTUAL TABLE t1 USING fts5(x, y, z);",
          "284:   INSERT INTO t1 VALUES('a', 'one two', 1);",
          "285:   INSERT INTO t1 VALUES('b', 'two three', 2);",
          "286:   INSERT INTO t1 VALUES('c', 'three four', 1);",
          "287:   INSERT INTO t1 VALUES('d', 'four five', 2);",
          "288:   INSERT INTO t1 VALUES('e', 'five six', 1);",
          "289:   INSERT INTO t1 VALUES('f', 'six seven', 2);",
          "290: }",
          "292: proc firstcol {cmd} { $cmd xColumnText 0 }",
          "293: sqlite3_fts5_create_function db firstcol firstcol",
          "295: do_execsql_test 10.1.1 {",
          "296:   SELECT firstcol(t1) FROM t1",
          "297: } {a b c d e f}",
          "298: do_execsql_test 10.1.2 {",
          "299:   SELECT group_concat(x, '.') FROM t1",
          "300: } {a.b.c.d.e.f}",
          "302: do_catchsql_test 10.1.3 {",
          "303:   SELECT group_concat(firstcol(t1), '.') FROM t1",
          "304: } {1 {unable to use function firstcol in the requested context}}",
          "306: do_catchsql_test 10.1.4 {",
          "307:   SELECT group_concat(firstcol(t1), '.') FROM t1 GROUP BY rowid",
          "308: } {1 {unable to use function firstcol in the requested context}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 29d02bf2fa9ecacbcc3e862ca70382f5875da8c1dc7fd27366190045fcc42b15",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}