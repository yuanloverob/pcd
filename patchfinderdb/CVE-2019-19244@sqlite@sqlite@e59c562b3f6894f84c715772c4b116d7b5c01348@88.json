{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e22976c5357fb6501cb0dd40220b8d48bd9295bb",
      "candidate_info": {
        "commit_hash": "e22976c5357fb6501cb0dd40220b8d48bd9295bb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e22976c5357fb6501cb0dd40220b8d48bd9295bb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c"
        ],
        "message": "Fix the SQLITE_DIRECT_OVERFLOW_READ compile-time option so that it works with SQLITE_HAS_CODEC.\n\nFossilOrigin-Name: fd085e9260bec18f968704abb2dd324d954baa121d13b67c3f5b801e9e3834aa",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d49c32e6e7cc341b5961d2c7b7c68d1649c6542eeec201660e3f82a55aea9e3b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "837: int sqlite3PagerDirectReadOk(Pager *pPager, Pgno pgno){",
          "838:   if( pPager->fd->pMethods==0 ) return 0;",
          "839:   if( sqlite3PCacheIsDirty(pPager->pPCache) ) return 0;",
          "840: #ifndef SQLITE_OMIT_WAL",
          "841:   if( pPager->pWal ){",
          "842:     u32 iRead = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "840: #ifdef SQLITE_HAS_CODEC",
          "841:   if( pPager->xCodec!=0 ) return 0;",
          "842: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4da4936cdfaf5647d9daf0b861b2e63969a810d",
      "candidate_info": {
        "commit_hash": "d4da4936cdfaf5647d9daf0b861b2e63969a810d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d4da4936cdfaf5647d9daf0b861b2e63969a810d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c"
        ],
        "message": "Avoid downgrading SQLITE_CORRUPT errors detected by the schema parser into SQLITE_NOMEM or SQLITE_ERROR errors.\n\nFossilOrigin-Name: b2e79f8ff0836fcc98a2df9377aad9137307c34058030ecd1b5d4ec3277ed36a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4cc5694cbd69749c146679c367860952fdf3f5356426ddfd1dce470569702bc1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:       if( db->init.orphanTrigger ){",
          "116:         assert( iDb==1 );",
          "117:       }else{",
          "119:         if( rc==SQLITE_NOMEM ){",
          "120:           sqlite3OomFault(db);",
          "121:         }else if( rc!=SQLITE_INTERRUPT && (rc&0xFF)!=SQLITE_LOCKED ){",
          "",
          "[Removed Lines]",
          "118:         pData->rc = rc;",
          "",
          "[Added Lines]",
          "118:         if( rc > pData->rc ) pData->rc = rc;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f6f12bdd35c55d9f98b6eefbe2d40c4a85aab87",
      "candidate_info": {
        "commit_hash": "7f6f12bdd35c55d9f98b6eefbe2d40c4a85aab87",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7f6f12bdd35c55d9f98b6eefbe2d40c4a85aab87",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/window.c",
          "test/window9.test"
        ],
        "message": "Remove Window objects from the corresponding Select.pWin list when they are deleted, as they are, for example, when the ORDER BY clause is optimized out.\n\nFossilOrigin-Name: fd7316cda0fdfe86985f41a97dff3beba188606ec9bc6fef38a686a6976a6e01",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bd37ce3fb8dee8d538f6afc0bfc13cdc3ebdd504e6461f0130c6ecc8af585f68",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1327: static int gatherSelectWindowsCallback(Walker *pWalker, Expr *pExpr){",
          "1328:   if( pExpr->op==TK_FUNCTION && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1330:     assert( IsWindowFunc(pExpr) );",
          "1333:   }",
          "1334:   return WRC_Continue;",
          "1335: }",
          "",
          "[Removed Lines]",
          "1329:     assert( pExpr->y.pWin );",
          "1331:     pExpr->y.pWin->pNextWin = pWalker->u.pSelect->pWin;",
          "1332:     pWalker->u.pSelect->pWin = pExpr->y.pWin;",
          "",
          "[Added Lines]",
          "1329:     Select *pSelect = pWalker->u.pSelect;",
          "1330:     Window *pWin = pExpr->y.pWin;",
          "1331:     assert( pWin );",
          "1333:     if( pSelect->pWin ){",
          "1335:       pSelect->pWin->ppThis = &pWin->pNextWin;",
          "1336:     }",
          "1337:     pWin->pNextWin = pSelect->pWin;",
          "1338:     pWin->ppThis = &pSelect->pWin;",
          "1339:     pSelect->pWin = pWin;",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "901: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "902:         if( pWin ){",
          "903:           Select *pSel = pNC->pWinSelect;",
          "904:           if( IN_RENAME_OBJECT==0 ){",
          "905:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pWin, pDef);",
          "906:           }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "904:           assert( pWin==pExpr->y.pWin );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "910:           if( 0==pSel->pWin",
          "911:            || 0==sqlite3WindowCompare(pParse, pSel->pWin, pWin, 0)",
          "912:           ){",
          "915:           }",
          "916:           pNC->ncFlags |= NC_HasWin;",
          "917:         }else",
          "",
          "[Removed Lines]",
          "913:             pExpr->y.pWin->pNextWin = pSel->pWin;",
          "914:             pSel->pWin = pExpr->y.pWin;",
          "",
          "[Added Lines]",
          "914:             pWin->pNextWin = pSel->pWin;",
          "915:             if( pSel->pWin ){",
          "916:               pSel->pWin->ppThis = &pWin->pNextWin;",
          "917:             }",
          "918:             pSel->pWin = pWin;",
          "919:             pWin->ppThis = &pSel->pWin;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1296: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1300: static int resolveRemoveWindowsCb(Walker *pWalker, Expr *pExpr){",
          "1301:   if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1308:     }",
          "1309:   }",
          "1310:   return WRC_Continue;",
          "",
          "[Removed Lines]",
          "1302:     Window **pp;",
          "1303:     for(pp=&pWalker->u.pSelect->pWin; *pp; pp=&(*pp)->pNextWin){",
          "1304:       if( *pp==pExpr->y.pWin ){",
          "1306:         break;",
          "1307:       }",
          "",
          "[Added Lines]",
          "1307:     Window *pWin = pExpr->y.pWin;",
          "1308:     if( pWin->ppThis ){",
          "1310:       if( pWin->pNextWin ) pWin->pNextWin->ppThis = pWin->ppThis;",
          "1311:       pWin->ppThis = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1323: }",
          "1324: #else",
          "",
          "[Removed Lines]",
          "1317: static void resolveRemoveWindows(Select *pSelect, Expr *pExpr){",
          "1318:   Walker sWalker;",
          "1319:   memset(&sWalker, 0, sizeof(Walker));",
          "1320:   sWalker.xExprCallback = resolveRemoveWindowsCb;",
          "1321:   sWalker.u.pSelect = pSelect;",
          "1322:   sqlite3WalkExpr(&sWalker, pExpr);",
          "1325: # define resolveRemoveWindows(x,y)",
          "1326: #endif",
          "",
          "[Added Lines]",
          "1321: static void windowRemoveExprFromSelect(Select *pSelect, Expr *pExpr){",
          "1322:   if( pSelect->pWin ){",
          "1323:     Walker sWalker;",
          "1324:     memset(&sWalker, 0, sizeof(Walker));",
          "1325:     sWalker.xExprCallback = resolveRemoveWindowsCb;",
          "1326:     sWalker.u.pSelect = pSelect;",
          "1327:     sqlite3WalkExpr(&sWalker, pExpr);",
          "1328:   }",
          "1331: # define windowRemoveExprFromSelect(a, b)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1398:         pItem->u.x.iOrderByCol = j+1;",
          "1399:       }",
          "1400:     }",
          "",
          "[Removed Lines]",
          "1397:         resolveRemoveWindows(pSelect, pE);",
          "",
          "[Added Lines]",
          "1403:         windowRemoveExprFromSelect(pSelect, pE);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:     }",
          "103: #endif",
          "104:     if( OK_IF_ALWAYS_TRUE(p->pWith) ) sqlite3WithDelete(db, p->pWith);",
          "105:     if( bFree ) sqlite3DbFreeNN(db, p);",
          "106:     p = pPrior;",
          "107:     bFree = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     assert( p->pWin==0 );",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1023: void sqlite3WindowDelete(sqlite3 *db, Window *p){",
          "1024:   if( p ){",
          "1025:     sqlite3ExprDelete(db, p->pFilter);",
          "1026:     sqlite3ExprListDelete(db, p->pPartition);",
          "1027:     sqlite3ExprListDelete(db, p->pOrderBy);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1025:     if( p->ppThis ){",
          "1027:       if( p->pNextWin ) p->pNextWin->ppThis = p->ppThis;",
          "1028:     }",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   SELECT b=='2', rank() OVER (ORDER BY a) FROM t1",
          "99: } {1 1   0 2}",
          "101: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: #-------------------------------------------------------------------------",
          "102: reset_db",
          "103: do_execsql_test 3.0 {",
          "104:   CREATE TABLE t1(a);",
          "105:   CREATE TABLE t2(a,b,c);",
          "106: }",
          "108: do_execsql_test 3.1 {",
          "109:   SELECT EXISTS(SELECT 1 FROM t1 ORDER BY sum(a) OVER ()) FROM t1;",
          "110: }",
          "112: do_execsql_test 3.2 {",
          "113:   SELECT sum(a) OVER () FROM t2",
          "114:    ORDER BY EXISTS(SELECT 1 FROM t2 ORDER BY sum(a) OVER ());",
          "115: }",
          "117: do_catchsql_test 3.3 {",
          "118:   SELECT a, sum(a) OVER (ORDER BY a DESC) FROM t2",
          "119:   ORDER BY EXISTS(",
          "120:     SELECT 1 FROM t2 ORDER BY sum(a) OVER (ORDER BY a)",
          "121:   ) OVER (ORDER BY a);",
          "122: } {1 {near \"OVER\": syntax error}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94e95ea46e89f34adeba606db60f4691a25d7c1f",
      "candidate_info": {
        "commit_hash": "94e95ea46e89f34adeba606db60f4691a25d7c1f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/94e95ea46e89f34adeba606db60f4691a25d7c1f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_vfs.c",
          "test/lock_common.tcl",
          "test/shmlock.test",
          "test/wal.test"
        ],
        "message": "Copy some extra test infrastructure from the mutexfree-shmlock branch to trunk.\n\nFossilOrigin-Name: 883337ffdb434b6856ceaada121c0be67e2fdec7b447675f45e85568ef28d7d9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_vfs.c||src/test_vfs.c",
          "test/lock_common.tcl||test/lock_common.tcl",
          "test/shmlock.test||test/shmlock.test",
          "test/wal.test||test/wal.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 95a9a39ff784b960b62dd6298e722a620ba3f9c8b76839a49bbef35d7bc84a8e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1564:   return TCL_ERROR;",
          "1565: }",
          "1567: int Sqlitetestvfs_Init(Tcl_Interp *interp){",
          "1568:   Tcl_CreateObjCommand(interp, \"testvfs\", testvfs_cmd, 0, 0);",
          "1569:   return TCL_OK;",
          "1570: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1567: extern int getDbPointer(Tcl_Interp *interp, const char *zA, sqlite3 **ppDb);",
          "1568: extern const char *sqlite3ErrName(int);",
          "1573: static int SQLITE_TCLAPI test_vfs_shmlock(",
          "1574:   void * clientData,",
          "1575:   Tcl_Interp *interp,",
          "1576:   int objc,",
          "1577:   Tcl_Obj *CONST objv[]",
          "1578: ){",
          "1579:   const char *azArg1[] = {\"shared\", \"exclusive\", 0};",
          "1580:   const char *azArg2[] = {\"lock\", \"unlock\", 0};",
          "1581:   sqlite3 *db = 0;",
          "1582:   int rc = SQLITE_OK;",
          "1583:   const char *zDbname = 0;",
          "1584:   int iArg1 = 0;",
          "1585:   int iArg2 = 0;",
          "1586:   int iOffset = 0;",
          "1587:   int n = 0;",
          "1588:   sqlite3_file *pFd;",
          "1590:   if( objc!=7 ){",
          "1591:     Tcl_WrongNumArgs(interp, 1, objv,",
          "1592:         \"DB DBNAME (shared|exclusive) (lock|unlock) OFFSET N\"",
          "1593:     );",
          "1594:     return TCL_ERROR;",
          "1595:   }",
          "1597:   zDbname = Tcl_GetString(objv[2]);",
          "1598:   if( getDbPointer(interp, Tcl_GetString(objv[1]), &db)",
          "1599:    || Tcl_GetIndexFromObj(interp, objv[3], azArg1, \"ARG\", 0, &iArg1)",
          "1600:    || Tcl_GetIndexFromObj(interp, objv[4], azArg2, \"ARG\", 0, &iArg2)",
          "1601:    || Tcl_GetIntFromObj(interp, objv[5], &iOffset)",
          "1602:    || Tcl_GetIntFromObj(interp, objv[6], &n)",
          "1603:   ){",
          "1604:     return TCL_ERROR;",
          "1605:   }",
          "1607:   sqlite3_file_control(db, zDbname, SQLITE_FCNTL_FILE_POINTER, (void*)&pFd);",
          "1608:   if( pFd==0 ){",
          "1609:     return TCL_ERROR;",
          "1610:   }",
          "1611:   rc = pFd->pMethods->xShmLock(pFd, iOffset, n,",
          "1612:       (iArg1==0 ? SQLITE_SHM_SHARED : SQLITE_SHM_EXCLUSIVE)",
          "1613:     | (iArg2==0 ? SQLITE_SHM_LOCK : SQLITE_SHM_UNLOCK)",
          "1614:   );",
          "1615:   Tcl_SetObjResult(interp, Tcl_NewStringObj(sqlite3ErrName(rc), -1));",
          "1616:   return TCL_OK;",
          "1617: }",
          "1622:   Tcl_CreateObjCommand(interp, \"vfs_shmlock\", test_vfs_shmlock, 0, 0);",
          "",
          "---------------"
        ],
        "test/lock_common.tcl||test/lock_common.tcl": [
          "File: test/lock_common.tcl -> test/lock_common.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: proc do_multiclient_test {varname script} {",
          "19:     if {[info exists ::G(valgrind)]} { db close ; continue }",
          "20:     set ::code2_chan [launch_testfixture]",
          "21:     set ::code3_chan [launch_testfixture]",
          "22:     proc code2 {tcl} { testfixture $::code2_chan $tcl }",
          "23:     proc code3 {tcl} { testfixture $::code3_chan $tcl }",
          "26:     proc code2 {tcl} { uplevel #0 $tcl }",
          "27:     proc code3 {tcl} { uplevel #0 $tcl }",
          "29:   }] {",
          "30:     faultsim_delete_and_reopen",
          "32:     proc code1 {tcl} { uplevel #0 $tcl }",
          "",
          "[Removed Lines]",
          "18:   foreach code [list {",
          "24:     set tn 1",
          "25:   } {",
          "28:     set tn 2",
          "",
          "[Added Lines]",
          "18:   foreach {tn code} [list 1 {",
          "24:   } 2 {",
          "28:     # Do not run multi-process tests with the unix-excl VFS.",
          "29:     #",
          "30:     if {$tn==1 && [permutation]==\"unix-excl\"} continue",
          "",
          "---------------"
        ],
        "test/shmlock.test||test/shmlock.test": [
          "File: test/shmlock.test -> test/shmlock.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 December 6",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "16: set testprefix shmlock",
          "18: ifcapable !wal {finish_test ; return }",
          "20: sqlite3 db2 test.db",
          "21: sqlite3 db3 test.db",
          "23: do_execsql_test 1.0 {",
          "24:   PRAGMA journal_mode = wal;",
          "25:   CREATE TABLE t1(a, b);",
          "26:   INSERT INTO t1 VALUES(1, 2);",
          "27: } {wal}",
          "28: do_test 1.1 { execsql { SELECT * FROM t1 } db2 } {1 2}",
          "29: do_test 1.2 { execsql { SELECT * FROM t1 } db3 } {1 2}",
          "31: foreach {tn dbhandle cmd res} {",
          "32:   1    db  {shared    lock   7 1}    OK",
          "33:   2    db2 {exclusive lock   7 1}    BUSY",
          "34:   3    db  {shared    unlock 7 1}    OK",
          "35:   4    db2 {exclusive lock   7 1}    OK",
          "36:   5    db  {shared    lock   7 1}    BUSY",
          "37:   6    db  {exclusive lock   7 1}    BUSY",
          "38:   7    db2 {exclusive unlock 7 1}    OK",
          "40:   8    db  {exclusive lock   0 8}    OK",
          "41:   9    db  {exclusive unlock 0 8}    OK",
          "42:   10   db2 {exclusive lock   0 8}    OK",
          "43:   11   db2 {exclusive unlock 0 8}    OK",
          "45:   12   db  {shared    lock   0 1}    OK",
          "46:   13   db2 {shared    lock   0 1}    OK",
          "47:   14   db3 {shared    lock   0 1}    OK",
          "48:   15   db3 {shared    unlock 0 1}    OK",
          "49:   16   db3 {exclusive lock   0 1}    BUSY",
          "50:   17   db2 {shared    unlock 0 1}    OK",
          "51:   18   db3 {exclusive lock   0 1}    BUSY",
          "52:   19   db  {shared    unlock 0 1}    OK",
          "53:   20   db3 {exclusive lock   0 1}    OK",
          "54:   21   db3 {exclusive unlock 0 1}    OK",
          "56:   22   db  {shared    lock   3 1}    OK",
          "57:   23   db2 {exclusive lock   2 2}    BUSY",
          "58:   24   db  {shared    lock   2 1}    OK",
          "59:   25   db2 {exclusive lock   0 5}    BUSY",
          "60:   26   db2 {exclusive lock   0 4}    BUSY",
          "61:   27   db2 {exclusive lock   0 3}    BUSY",
          "62:   28   db  {shared    unlock 3 1}    OK",
          "63:   29   db2 {exclusive lock   2 2}    BUSY",
          "64:   28   db  {shared    unlock 2 1}    OK",
          "65:   29   db2 {exclusive lock   2 2}    OK",
          "66:   29   db2 {exclusive unlock 2 2}    OK",
          "67: } {",
          "68:   do_test 1.3.$tn [list vfs_shmlock $dbhandle main {*}$cmd] \"SQLITE_$res\"",
          "69: }",
          "71: db  close",
          "72: db2 close",
          "73: db3 close",
          "75: if {[permutation]==\"unix-excl\"} {",
          "76:   do_test 2.0 {",
          "77:     for {set i 0} {$i < 256} {incr i} {",
          "78:       sqlite3 db$i test.db",
          "79:       execsql { SELECT * FROM t1 } db$i",
          "80:     }",
          "81:     for {set i 0} {$i < 255} {incr i} {",
          "82:       set rc [vfs_shmlock db$i main shared lock 4 1]",
          "83:       if {$rc != \"SQLITE_OK\"} { error $rc }",
          "84:     }",
          "86:     vfs_shmlock db255 main shared lock 4 1",
          "87:   } {SQLITE_BUSY}",
          "89:   do_test 2.1 { vfs_shmlock db255 main exclusive lock   4 1 } SQLITE_BUSY",
          "90:   do_test 2.2 { vfs_shmlock db0   main shared    unlock 4 1 } SQLITE_OK",
          "91:   do_test 2.3 { vfs_shmlock db255 main shared    lock   4 1 } SQLITE_OK",
          "92:   do_test 2.4 { vfs_shmlock db255 main shared    unlock 4 1 } SQLITE_OK",
          "93:   do_test 2.5 { vfs_shmlock db255 main exclusive lock   4 1 } SQLITE_BUSY",
          "95:   do_test 2.6 {",
          "96:     for {set i 1} {$i < 255} {incr i} {",
          "97:       set rc [vfs_shmlock db255 main exclusive lock 4 1]",
          "98:       if {$rc != \"SQLITE_BUSY\"} { error $rc }",
          "99:       set rc [vfs_shmlock db$i main shared unlock 4 1]",
          "100:       if {$rc != \"SQLITE_OK\"} { error $rc }",
          "101:     }",
          "103:     vfs_shmlock db255 main exclusive lock 4 1",
          "104:   } {SQLITE_OK}",
          "106:   vfs_shmlock db255 main exclusive unlock 4 1",
          "108:   for {set i 0} {$i < 256} {incr i} {",
          "109:     db$i close",
          "110:   }",
          "111: }",
          "113: sqlite3 db0 test.db",
          "114: sqlite3 db1 test.db",
          "115: do_test 3.1 { execsql { SELECT * FROM t1 } db0 } {1 2}",
          "116: do_test 3.2 { execsql { SELECT * FROM t1 } db1 } {1 2}",
          "118: set L(0) {n n n n n n n n}",
          "119: set L(1) {n n n n n n n n}",
          "120: proc random_lock_test {idx} {",
          "121:   global L",
          "122:   set iSlot [expr int(rand()*8)]",
          "123:   if {[expr int(rand()*2)]} {",
          "124:     # Unlock operation",
          "125:     if {[lindex $L($idx) $iSlot]!=\"n\"} {",
          "126:       vfs_shmlock db$idx main [lindex $L($idx) $iSlot] unlock $iSlot 1",
          "127:       lset L($idx) $iSlot n",
          "128:     }",
          "129:   } else {",
          "130:     # Lock operation",
          "131:     if {[lindex $L($idx) $iSlot]==\"n\"} {",
          "132:       set locktype [lindex {e s} [expr int(rand()*2)]]",
          "133:       set n 1",
          "134:       if {$locktype==\"e\"} {",
          "135:         for {set l $iSlot} {$l<8 && [lindex $L($idx) $l]==\"n\"} {incr l} {}",
          "136:         set n [expr int(rand()*($l-$iSlot))+1]",
          "137:         # puts \"iSlot=$iSlot l=$l L=$L($idx)\"",
          "138:         # puts \"$iSlot $n\"",
          "139:       }",
          "140:       set res [vfs_shmlock db$idx main $locktype lock $iSlot $n]",
          "142:       set bBusy 0",
          "143:       for {set i $iSlot} {$i<($iSlot+$n)} {incr i} {",
          "144:         set other [lindex $L([expr ($idx+1)%2]) $i]",
          "145:         if {($other!=\"n\" && $locktype==\"e\")||($other==\"e\" && $locktype==\"s\")} {",
          "146:           if {$res != \"SQLITE_BUSY\"} { error \"BUSY not detected\" }",
          "147:           set bBusy 1",
          "148:           break",
          "149:         }",
          "150:       }",
          "152:       if {$bBusy==0} {",
          "153:         if {$res != \"SQLITE_OK\"} { error \"BUSY false-positive\" }",
          "154:         for {set i $iSlot} {$i<($iSlot+$n)} {incr i} {",
          "155:           lset L($idx) $i $locktype",
          "156:         }",
          "157:       }",
          "158:     }",
          "159:   }",
          "160: }",
          "162: set nStep 100000",
          "163: for {set i 0} {$i < $nStep} {incr i} {",
          "164:   random_lock_test 0",
          "165:   random_lock_test 1",
          "166: }",
          "168: db0 close",
          "169: db1 close",
          "171: finish_test",
          "",
          "---------------"
        ],
        "test/wal.test||test/wal.test": [
          "File: test/wal.test -> test/wal.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1297: # At one point, SQLite was failing to grow the mapping of the wal-index",
          "1298: # file in step 3 and the checkpoint was corrupting the database file.",
          "1299: #",
          "1314:     sqlite3 db test.db",
          "1346: catch { db2 close }",
          "1347: catch { db close }",
          "",
          "[Removed Lines]",
          "1300: do_test wal-20.1 {",
          "1301:   catch {db close}",
          "1302:   forcedelete test.db test.db-wal test.db-journal",
          "1303:   sqlite3 db test.db",
          "1304:   execsql {",
          "1305:     PRAGMA journal_mode = WAL;",
          "1306:     CREATE TABLE t1(x);",
          "1307:     INSERT INTO t1 VALUES(randomblob(900));",
          "1308:     SELECT count(*) FROM t1;",
          "1309:   }",
          "1310: } {wal 1}",
          "1311: do_test wal-20.2 {",
          "1312:   set ::buddy [launch_testfixture]",
          "1313:   testfixture $::buddy {",
          "1315:     db transaction { db eval {",
          "1316:       PRAGMA wal_autocheckpoint = 0;",
          "1331:     } }",
          "1332:   }",
          "1333: } {0}",
          "1334: do_test wal-20.3 {",
          "1335:   close $::buddy",
          "1336:   execsql { PRAGMA wal_checkpoint }",
          "1337:   execsql { SELECT count(*) FROM t1 }",
          "1338: } {16384}",
          "1339: do_test wal-20.4 {",
          "1340:   db close",
          "1341:   sqlite3 db test.db",
          "1342:   execsql { SELECT count(*) FROM t1 }",
          "1343: } {16384}",
          "1344: integrity_check wal-20.5",
          "",
          "[Added Lines]",
          "1300: if {[permutation]!=\"unix-excl\"} {",
          "1301:   do_test wal-20.1 {",
          "1302:     catch {db close}",
          "1303:     forcedelete test.db test.db-wal test.db-journal",
          "1305:     execsql {",
          "1306:       PRAGMA journal_mode = WAL;",
          "1307:       CREATE TABLE t1(x);",
          "1308:       INSERT INTO t1 VALUES(randomblob(900));",
          "1309:       SELECT count(*) FROM t1;",
          "1310:     }",
          "1311:   } {wal 1}",
          "1312:   do_test wal-20.2 {",
          "1313:     set ::buddy [launch_testfixture]",
          "1314:     testfixture $::buddy {",
          "1315:       sqlite3 db test.db",
          "1316:       db transaction { db eval {",
          "1317:         PRAGMA wal_autocheckpoint = 0;",
          "1332:       } }",
          "1333:     }",
          "1334:   } {0}",
          "1335:   do_test wal-20.3 {",
          "1336:     close $::buddy",
          "1337:     execsql { PRAGMA wal_checkpoint }",
          "1338:     execsql { SELECT count(*) FROM t1 }",
          "1339:   } {16384}",
          "1340:   do_test wal-20.4 {",
          "1341:     db close",
          "1342:     sqlite3 db test.db",
          "1343:     execsql { SELECT count(*) FROM t1 }",
          "1344:   } {16384}",
          "1345:   integrity_check wal-20.5",
          "1346: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b2bd91d9a4bf91c3dff1caf1ec2687ed9b54873",
      "candidate_info": {
        "commit_hash": "9b2bd91d9a4bf91c3dff1caf1ec2687ed9b54873",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9b2bd91d9a4bf91c3dff1caf1ec2687ed9b54873",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Give a link to the URI Filename document in the documentation to the various sqlite3_uri_parameter() interfaces.\n\nFossilOrigin-Name: 69b0b2ee536fda8975f60643f7f1891db4649958aca476822ea2a632ce731992",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 54f2399fb2a626602d405c857297f2da833f9f048cbc478f9110bed2e9bda299",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    }
  ]
}