{
  "cve_id": "CVE-2022-0408",
  "cve_desc": "Stack-based Buffer Overflow in GitHub repository vim/vim prior to 8.2.",
  "repo": "vim/vim",
  "patch_hash": "06f15416bb8d5636200a10776f1752c4d6e49f31",
  "patch_info": {
    "commit_hash": "06f15416bb8d5636200a10776f1752c4d6e49f31",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/06f15416bb8d5636200a10776f1752c4d6e49f31",
    "files": [
      "src/spellsuggest.c",
      "src/testdir/test_spell.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.4247: stack corruption when looking for spell suggestions\n\nProblem:    Stack corruption when looking for spell suggestions.\nSolution:   Prevent the depth increased too much.  Add a five second time\n            limit to finding suggestions.",
    "before_after_code_files": [
      "src/spellsuggest.c||src/spellsuggest.c",
      "src/testdir/test_spell.vim||src/testdir/test_spell.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/spellsuggest.c||src/spellsuggest.c": [
      "File: src/spellsuggest.c -> src/spellsuggest.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1207: #define TRY_DEEPER(su, stack, depth, add) \\",
      "",
      "[Removed Lines]",
      "1208:   (stack[depth].ts_score + (add) < su->su_maxscore)",
      "",
      "[Added Lines]",
      "1208:     (depth < MAXWLEN && stack[depth].ts_score + (add) < su->su_maxscore)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1277:     char_u changename[MAXWLEN][80];",
      "1278: #endif",
      "1279:     int  breakcheckcount = 1000;",
      "1280:     int  compound_ok;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1280: #ifdef FEAT_RELTIME",
      "1281:     proftime_T time_limit;",
      "1282: #endif",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1321:      sp->ts_state = STATE_START;",
      "1322:  }",
      "1323:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1327: #ifdef FEAT_RELTIME",
      "1330:     profile_setlimit(5000, &time_limit);",
      "1331: #endif",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1359:   {",
      "",
      "[Removed Lines]",
      "1358:   if (byts[arridx] == 0 || n == (int)STATE_NOPREFIX)",
      "",
      "[Added Lines]",
      "1366:   if (depth < MAXWLEN",
      "1367:        && (byts[arridx] == 0 || n == (int)STATE_NOPREFIX))",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2649:      {",
      "2650:   ui_breakcheck();",
      "2651:   breakcheckcount = 1000;",
      "2652:      }",
      "2653:  }",
      "2654:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2661: #ifdef FEAT_RELTIME",
      "2662:   if (profile_passed_limit(&time_limit))",
      "2663:       got_int = TRUE;",
      "2664: #endif",
      "",
      "---------------"
    ],
    "src/testdir/test_spell.vim||src/testdir/test_spell.vim": [
      "File: src/testdir/test_spell.vim -> src/testdir/test_spell.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "773:   set nospell",
      "774: endfunc",
      "776: func LoadAffAndDic(aff_contents, dic_contents)",
      "777:   set enc=latin1",
      "778:   set spellfile=",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "776: func Test_spellsuggest_too_deep()",
      "777:   \" This was incrementing \"depth\" over MAXWLEN.",
      "778:   new",
      "779:   norm \u0016s000G00\ufffd000000000000",
      "780:   sil norm ..vzG................vvzG0     v z=",
      "781:   bwipe!",
      "782: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "751: static int included_patches[] =",
      "754:     4246,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "754:     4247,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ae6f1d8b14c2f63811ee83ef14e32086fb3e9b83",
      "candidate_info": {
        "commit_hash": "ae6f1d8b14c2f63811ee83ef14e32086fb3e9b83",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/ae6f1d8b14c2f63811ee83ef14e32086fb3e9b83",
        "files": [
          "src/autocmd.c",
          "src/charset.c",
          "src/drawline.c",
          "src/drawscreen.c",
          "src/evalfunc.c",
          "src/fileio.c",
          "src/fold.c",
          "src/getchar.c",
          "src/highlight.c",
          "src/memline.c",
          "src/normal.c",
          "src/quickfix.c",
          "src/regexp.c",
          "src/search.c",
          "src/sha256.c",
          "src/spell.c",
          "src/spellfile.c",
          "src/spellsuggest.c",
          "src/syntax.c",
          "src/version.c",
          "src/window.c"
        ],
        "message": "patch 8.2.4402: missing parenthesis may cause unexpected problems\n\nProblem:    Missing parenthesis may cause unexpected problems.\nSolution:   Add more parenthesis is macros. (closes #9788)",
        "before_after_code_files": [
          "src/autocmd.c||src/autocmd.c",
          "src/charset.c||src/charset.c",
          "src/drawline.c||src/drawline.c",
          "src/drawscreen.c||src/drawscreen.c",
          "src/evalfunc.c||src/evalfunc.c",
          "src/fileio.c||src/fileio.c",
          "src/fold.c||src/fold.c",
          "src/getchar.c||src/getchar.c",
          "src/highlight.c||src/highlight.c",
          "src/memline.c||src/memline.c",
          "src/normal.c||src/normal.c",
          "src/quickfix.c||src/quickfix.c",
          "src/regexp.c||src/regexp.c",
          "src/search.c||src/search.c",
          "src/sha256.c||src/sha256.c",
          "src/spell.c||src/spell.c",
          "src/spellfile.c||src/spellfile.c",
          "src/spellsuggest.c||src/spellsuggest.c",
          "src/syntax.c||src/syntax.c",
          "src/version.c||src/version.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/spellsuggest.c||src/spellsuggest.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/spellsuggest.c||src/spellsuggest.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/autocmd.c||src/autocmd.c": [
          "File: src/autocmd.c -> src/autocmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:     NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL",
          "218: };",
          "",
          "[Removed Lines]",
          "220: #define AUGROUP_DEFAULT    -1     // default autocmd group",
          "221: #define AUGROUP_ERROR    -2     // erroneous autocmd group",
          "222: #define AUGROUP_ALL    -3     // all autocmd groups",
          "",
          "[Added Lines]",
          "220: #define AUGROUP_DEFAULT    (-1)     // default autocmd group",
          "221: #define AUGROUP_ERROR    (-2)     // erroneous autocmd group",
          "222: #define AUGROUP_ALL    (-3)     // all autocmd groups",
          "",
          "---------------"
        ],
        "src/charset.c||src/charset.c": [
          "File: src/charset.c -> src/charset.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "386:     int  len = orglen;",
          "388: #define GA_CHAR(i)  ((char_u *)ga.ga_data)[i]",
          "390: #define STR_CHAR(i)  (buf == NULL ? GA_CHAR(i) : buf[i])",
          "394:     if (buf == NULL)",
          "",
          "[Removed Lines]",
          "389: #define GA_PTR(i)   ((char_u *)ga.ga_data + i)",
          "391: #define STR_PTR(i)   (buf == NULL ? GA_PTR(i) : buf + i)",
          "",
          "[Added Lines]",
          "389: #define GA_PTR(i)   ((char_u *)ga.ga_data + (i))",
          "391: #define STR_PTR(i)   (buf == NULL ? GA_PTR(i) : buf + (i))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "707: #ifdef FEAT_VARTABS",
          "708: # define RET_WIN_BUF_CHARTABSIZE(wp, buf, p, col) \\",
          "710:     { \\",
          "711:  return tabstop_padding(col, (buf)->b_p_ts, (buf)->b_p_vts_array); \\",
          "712:     } \\",
          "",
          "[Removed Lines]",
          "709:     if (*(p) == TAB && (!(wp)->w_p_list || wp->w_lcs_chars.tab1)) \\",
          "",
          "[Added Lines]",
          "709:     if (*(p) == TAB && (!(wp)->w_p_list || (wp)->w_lcs_chars.tab1)) \\",
          "",
          "---------------"
        ],
        "src/drawline.c||src/drawline.c": [
          "File: src/drawline.c -> src/drawline.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "405: #define WL_START 0  // nothing done yet",
          "406: #ifdef FEAT_CMDWIN",
          "408: #else",
          "409: # define WL_CMDLINE WL_START",
          "410: #endif",
          "411: #ifdef FEAT_FOLDING",
          "413: #else",
          "414: # define WL_FOLD WL_CMDLINE",
          "415: #endif",
          "416: #ifdef FEAT_SIGNS",
          "418: #else",
          "419: # define WL_SIGN WL_FOLD  // column for signs",
          "420: #endif",
          "422: #ifdef FEAT_LINEBREAK",
          "424: #else",
          "425: # define WL_BRI  WL_NR",
          "426: #endif",
          "427: #if defined(FEAT_LINEBREAK) || defined(FEAT_DIFF)",
          "429: #else",
          "430: # define WL_SBR  WL_BRI",
          "431: #endif",
          "433:     int  draw_state = WL_START; // what to draw next",
          "434: #if defined(FEAT_XIM) && defined(FEAT_GUI_GTK)",
          "435:     int  feedback_col = 0;",
          "",
          "[Removed Lines]",
          "407: # define WL_CMDLINE WL_START + 1 // cmdline window column",
          "412: # define WL_FOLD WL_CMDLINE + 1 // 'foldcolumn'",
          "417: # define WL_SIGN WL_FOLD + 1 // column for signs",
          "421: #define WL_NR  WL_SIGN + 1 // line number",
          "423: # define WL_BRI  WL_NR + 1 // 'breakindent'",
          "428: # define WL_SBR  WL_BRI + 1 // 'showbreak' or 'diff'",
          "432: #define WL_LINE  WL_SBR + 1 // text in the line",
          "",
          "[Added Lines]",
          "407: # define WL_CMDLINE (WL_START + 1) // cmdline window column",
          "412: # define WL_FOLD (WL_CMDLINE + 1) // 'foldcolumn'",
          "417: # define WL_SIGN (WL_FOLD + 1) // column for signs",
          "421: #define WL_NR  (WL_SIGN + 1) // line number",
          "423: # define WL_BRI  (WL_NR + 1) // 'breakindent'",
          "428: # define WL_SBR  (WL_BRI + 1) // 'showbreak' or 'diff'",
          "432: #define WL_LINE  (WL_SBR + 1) // text in the line",
          "",
          "---------------"
        ],
        "src/drawscreen.c||src/drawscreen.c": [
          "File: src/drawscreen.c -> src/drawscreen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1112: # define RL_MEMSET(p, v, l) \\",
          "1113:     do { \\",
          "1114:  if (wp->w_p_rl) \\",
          "1116:         ScreenAttrs[off + (wp->w_width - (p) - (l)) + ri] = v; \\",
          "1117:   else \\",
          "1119:         ScreenAttrs[off + (p) + ri] = v; \\",
          "1120:     } while (0)",
          "1121: #else",
          "",
          "[Removed Lines]",
          "1115:      for (ri = 0; ri < l; ++ri) \\",
          "1118:      for (ri = 0; ri < l; ++ri) \\",
          "",
          "[Added Lines]",
          "1115:      for (ri = 0; ri < (l); ++ri) \\",
          "1118:      for (ri = 0; ri < (l); ++ri) \\",
          "",
          "---------------"
        ],
        "src/evalfunc.c||src/evalfunc.c": [
          "File: src/evalfunc.c -> src/evalfunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7879: }",
          "7882: #define SPLITMIX32(x, z) ( \\",
          "7887:     )",
          "7888: #define SHUFFLE_XOSHIRO128STARSTAR(x, y, z, w) \\",
          "",
          "[Removed Lines]",
          "7881: #define ROTL(x, k) ((x << k) | (x >> (32 - k)))",
          "7883:     z = (x += 0x9e3779b9), \\",
          "7884:     z = (z ^ (z >> 16)) * 0x85ebca6b, \\",
          "7885:     z = (z ^ (z >> 13)) * 0xc2b2ae35, \\",
          "7886:     z ^ (z >> 16) \\",
          "7889:     result = ROTL(y * 5, 7) * 9; \\",
          "7890:     t = y << 9; \\",
          "7891:     z ^= x; \\",
          "7892:     w ^= y; \\",
          "7893:     y ^= z, x ^= w; \\",
          "7894:     z ^= t; \\",
          "7895:     w = ROTL(w, 11);",
          "",
          "[Added Lines]",
          "7881: #define ROTL(x, k) (((x) << (k)) | ((x) >> (32 - (k))))",
          "7883:     (z) = ((x) += 0x9e3779b9), \\",
          "7884:     (z) = ((z) ^ ((z) >> 16)) * 0x85ebca6b, \\",
          "7885:     (z) = ((z) ^ ((z) >> 13)) * 0xc2b2ae35, \\",
          "7886:     (z) ^ ((z) >> 16) \\",
          "7889:     result = ROTL((y) * 5, 7) * 9; \\",
          "7890:     t = (y) << 9; \\",
          "7891:     (z) ^= (x); \\",
          "7892:     (w) ^= (y); \\",
          "7893:     (y) ^= (z), (x) ^= (w); \\",
          "7894:     (z) ^= t; \\",
          "7895:     (w) = ROTL(w, 11);",
          "",
          "---------------"
        ],
        "src/fileio.c||src/fileio.c": [
          "File: src/fileio.c -> src/fileio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4799: # ifdef FEAT_EVAL",
          "4800: #  define FREE_ITEM(item)   do { \\",
          "4801:  if (withattr) \\",
          "4803:  else \\",
          "4804:      vim_free(item); \\",
          "4805:     } while (0)",
          "",
          "[Removed Lines]",
          "4802:      dict_unref((dict_T*)item); \\",
          "",
          "[Added Lines]",
          "4802:      dict_unref((dict_T*)(item)); \\",
          "",
          "---------------"
        ],
        "src/fold.c||src/fold.c": [
          "File: src/fold.c -> src/fold.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3067: #define fold_end(fp) ((fp)->fd_top + (fp)->fd_len - 1)",
          "3068: #define valid_fold(fp, gap) ((gap)->ga_len > 0 && (fp) < ((fold_T *)(gap)->ga_data + (gap)->ga_len))",
          "3071:     void",
          "3072: foldMoveRange(garray_T *gap, linenr_T line1, linenr_T line2, linenr_T dest)",
          "",
          "[Removed Lines]",
          "3069: #define fold_index(fp, gap) ((size_t)(fp - ((fold_T *)(gap)->ga_data)))",
          "",
          "[Added Lines]",
          "3069: #define fold_index(fp, gap) ((size_t)((fp) - ((fold_T *)(gap)->ga_data)))",
          "",
          "---------------"
        ],
        "src/getchar.c||src/getchar.c": [
          "File: src/getchar.c -> src/getchar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3595:  if (got_int)",
          "3596:  {",
          "3598:      char_u dum[DUM_LEN + 1];",
          "3600:      for (;;)",
          "",
          "[Removed Lines]",
          "3597: #define DUM_LEN MAXMAPLEN * 3 + 3",
          "",
          "[Added Lines]",
          "3597: #define DUM_LEN (MAXMAPLEN * 3 + 3)",
          "",
          "---------------"
        ],
        "src/highlight.c||src/highlight.c": [
          "File: src/highlight.c -> src/highlight.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:       \"italic\", \"reverse\", \"inverse\", \"nocombine\", \"strikethrough\", \"NONE\"};",
          "30: static int hl_attr_table[] =",
          "31:     {HL_BOLD, HL_STANDOUT, HL_UNDERLINE, HL_UNDERCURL, HL_ITALIC, HL_INVERSE, HL_INVERSE, HL_NOCOMBINE, HL_STRIKETHROUGH, 0};",
          "",
          "[Removed Lines]",
          "32: #define ATTR_COMBINE(attr_a, attr_b) ((((attr_b) & HL_NOCOMBINE) ? attr_b : (attr_a)) | (attr_b))",
          "",
          "[Added Lines]",
          "32: #define ATTR_COMBINE(attr_a, attr_b) ((((attr_b) & HL_NOCOMBINE) ? (attr_b) : (attr_a)) | (attr_b))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2260: #  undef RGB",
          "2261: # endif",
          "2262: # ifndef RGB",
          "2264: # endif",
          "2266: # ifdef VIMDLL",
          "",
          "[Removed Lines]",
          "2263: #  define RGB(r, g, b) ((r<<16) | (g<<8) | (b))",
          "",
          "[Added Lines]",
          "2263: #  define RGB(r, g, b) (((r)<<16) | ((g)<<8) | (b))",
          "",
          "---------------"
        ],
        "src/memline.c||src/memline.c": [
          "File: src/memline.c -> src/memline.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "227: #define ML_INSERT 0x12     // insert line",
          "228: #define ML_FIND  0x13     // just find the line",
          "229: #define ML_FLUSH 0x02     // flush locked block",
          "233: typedef enum {",
          "",
          "[Removed Lines]",
          "230: #define ML_SIMPLE(x) (x & 0x10)  // DEL, INS or FIND",
          "",
          "[Added Lines]",
          "230: #define ML_SIMPLE(x) ((x) & 0x10)  // DEL, INS or FIND",
          "",
          "---------------"
        ],
        "src/normal.c||src/normal.c": [
          "File: src/normal.c -> src/normal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1567: static char_u showcmd_buf[SHOWCMD_BUFLEN];",
          "1568: static char_u old_showcmd_buf[SHOWCMD_BUFLEN];  // For push_showcmd()",
          "1569: static int showcmd_is_clear = TRUE;",
          "",
          "[Removed Lines]",
          "1566: #define SHOWCMD_BUFLEN SHOWCMD_COLS + 1 + 30",
          "",
          "[Added Lines]",
          "1566: #define SHOWCMD_BUFLEN (SHOWCMD_COLS + 1 + 30)",
          "",
          "---------------"
        ],
        "src/quickfix.c||src/quickfix.c": [
          "File: src/quickfix.c -> src/quickfix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "189: static qf_info_T *ll_get_or_alloc_list(win_T *);",
          "210: #define FOR_ALL_QFL_ITEMS(qfl, qfp, i) \\",
          "",
          "[Removed Lines]",
          "192: #define IS_QF_WINDOW(wp) (bt_quickfix(wp->w_buffer) && wp->w_llist_ref == NULL)",
          "194: #define IS_LL_WINDOW(wp) (bt_quickfix(wp->w_buffer) && wp->w_llist_ref != NULL)",
          "197: #define IS_QF_STACK(qi)  (qi->qfl_type == QFLT_QUICKFIX)",
          "198: #define IS_LL_STACK(qi)  (qi->qfl_type == QFLT_LOCATION)",
          "199: #define IS_QF_LIST(qfl)  (qfl->qfl_type == QFLT_QUICKFIX)",
          "200: #define IS_LL_LIST(qfl)  (qfl->qfl_type == QFLT_LOCATION)",
          "206: #define GET_LOC_LIST(wp) (IS_LL_WINDOW(wp) ? wp->w_llist_ref : wp->w_llist)",
          "211:       for (i = 1, qfp = qfl->qf_start; \\",
          "212:        !got_int && i <= qfl->qf_count && qfp != NULL; \\",
          "213:        ++i, qfp = qfp->qf_next)",
          "",
          "[Added Lines]",
          "192: #define IS_QF_WINDOW(wp) (bt_quickfix((wp)->w_buffer) && (wp)->w_llist_ref == NULL)",
          "194: #define IS_LL_WINDOW(wp) (bt_quickfix((wp)->w_buffer) && (wp)->w_llist_ref != NULL)",
          "197: #define IS_QF_STACK(qi)  ((qi)->qfl_type == QFLT_QUICKFIX)",
          "198: #define IS_LL_STACK(qi)  ((qi)->qfl_type == QFLT_LOCATION)",
          "199: #define IS_QF_LIST(qfl)  ((qfl)->qfl_type == QFLT_QUICKFIX)",
          "200: #define IS_LL_LIST(qfl)  ((qfl)->qfl_type == QFLT_LOCATION)",
          "206: #define GET_LOC_LIST(wp) (IS_LL_WINDOW(wp) ? (wp)->w_llist_ref : (wp)->w_llist)",
          "211:       for ((i) = 1, (qfp) = (qfl)->qf_start; \\",
          "212:        !got_int && (i) <= (qfl)->qf_count && (qfp) != NULL; \\",
          "213:        ++(i), (qfp) = (qfp)->qf_next)",
          "",
          "---------------"
        ],
        "src/regexp.c||src/regexp.c": [
          "File: src/regexp.c -> src/regexp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "247:     done = TRUE;",
          "248: }",
          "261: #define RF_ICASE    1 // ignore case",
          "",
          "[Removed Lines]",
          "250: #define ri_digit(c) (c < 0x100 && (class_tab[c] & RI_DIGIT))",
          "251: #define ri_hex(c) (c < 0x100 && (class_tab[c] & RI_HEX))",
          "252: #define ri_octal(c) (c < 0x100 && (class_tab[c] & RI_OCTAL))",
          "253: #define ri_word(c) (c < 0x100 && (class_tab[c] & RI_WORD))",
          "254: #define ri_head(c) (c < 0x100 && (class_tab[c] & RI_HEAD))",
          "255: #define ri_alpha(c) (c < 0x100 && (class_tab[c] & RI_ALPHA))",
          "256: #define ri_lower(c) (c < 0x100 && (class_tab[c] & RI_LOWER))",
          "257: #define ri_upper(c) (c < 0x100 && (class_tab[c] & RI_UPPER))",
          "258: #define ri_white(c) (c < 0x100 && (class_tab[c] & RI_WHITE))",
          "",
          "[Added Lines]",
          "250: #define ri_digit(c) ((c) < 0x100 && (class_tab[c] & RI_DIGIT))",
          "251: #define ri_hex(c) ((c) < 0x100 && (class_tab[c] & RI_HEX))",
          "252: #define ri_octal(c) ((c) < 0x100 && (class_tab[c] & RI_OCTAL))",
          "253: #define ri_word(c) ((c) < 0x100 && (class_tab[c] & RI_WORD))",
          "254: #define ri_head(c) ((c) < 0x100 && (class_tab[c] & RI_HEAD))",
          "255: #define ri_alpha(c) ((c) < 0x100 && (class_tab[c] & RI_ALPHA))",
          "256: #define ri_lower(c) ((c) < 0x100 && (class_tab[c] & RI_LOWER))",
          "257: #define ri_upper(c) ((c) < 0x100 && (class_tab[c] & RI_UPPER))",
          "258: #define ri_white(c) ((c) < 0x100 && (class_tab[c] & RI_WHITE))",
          "",
          "---------------"
        ],
        "src/search.c||src/search.c": [
          "File: src/search.c -> src/search.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4301: #define FIRST_LETTER_BONUS 15",
          "4313: #define FUZZY_MATCH_RECURSION_LIMIT 10",
          "",
          "[Removed Lines]",
          "4303: #define LEADING_LETTER_PENALTY -5",
          "4305: #define MAX_LEADING_LETTER_PENALTY -15",
          "4307: #define UNMATCHED_LETTER_PENALTY -1",
          "4309: #define GAP_PENALTY -2",
          "4311: #define SCORE_NONE -9999",
          "",
          "[Added Lines]",
          "4303: #define LEADING_LETTER_PENALTY (-5)",
          "4305: #define MAX_LEADING_LETTER_PENALTY (-15)",
          "4307: #define UNMATCHED_LETTER_PENALTY (-1)",
          "4309: #define GAP_PENALTY (-2)",
          "4311: #define SCORE_NONE (-9999)",
          "",
          "---------------"
        ],
        "src/sha256.c||src/sha256.c": [
          "File: src/sha256.c -> src/sha256.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:     GET_UINT32(W[14], data, 56);",
          "80:     GET_UINT32(W[15], data, 60);",
          "85: #define S0(x) (ROTR(x, 7) ^ ROTR(x, 18) ^  SHR(x, 3))",
          "86: #define S1(x) (ROTR(x, 17) ^ ROTR(x, 19) ^  SHR(x, 10))",
          "",
          "[Removed Lines]",
          "82: #define  SHR(x, n) ((x & 0xFFFFFFFF) >> n)",
          "83: #define ROTR(x, n) (SHR(x, n) | (x << (32 - n)))",
          "",
          "[Added Lines]",
          "82: #define  SHR(x, n) (((x) & 0xFFFFFFFF) >> (n))",
          "83: #define ROTR(x, n) (SHR(x, n) | ((x) << (32 - (n))))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88: #define S2(x) (ROTR(x, 2) ^ ROTR(x, 13) ^ ROTR(x, 22))",
          "89: #define S3(x) (ROTR(x, 6) ^ ROTR(x, 11) ^ ROTR(x, 25))",
          "94: #define R(t)    \\",
          "95: (     \\",
          "98: )",
          "100: #define P(a,b,c,d,e,f,g,h,x,K)       \\",
          "101: {          \\",
          "103:     temp2 = S2(a) + F0(a, b, c);      \\",
          "105: }",
          "107:     A = ctx->state[0];",
          "",
          "[Removed Lines]",
          "91: #define F0(x, y, z) ((x & y) | (z & (x | y)))",
          "92: #define F1(x, y, z) (z ^ (x & (y ^ z)))",
          "96:     W[t] = S1(W[t -  2]) + W[t -  7] + \\",
          "97:     S0(W[t - 15]) + W[t - 16] \\",
          "102:     temp1 = h + S3(e) + F1(e, f, g) + K + x; \\",
          "104:     d += temp1; h = temp1 + temp2;      \\",
          "",
          "[Added Lines]",
          "91: #define F0(x, y, z) (((x) & (y)) | ((z) & ((x) | (y))))",
          "92: #define F1(x, y, z) ((z) ^ ((x) & ((y) ^ (z))))",
          "96:     W[t] = S1(W[(t) -  2]) + W[(t) -  7] + \\",
          "97:     S0(W[(t) - 15]) + W[(t) - 16] \\",
          "102:     temp1 = (h) + S3(e) + F1(e, f, g) + (K) + (x); \\",
          "104:     (d) += temp1; (h) = temp1 + temp2;      \\",
          "",
          "---------------"
        ],
        "src/spell.c||src/spell.c": [
          "File: src/spell.c -> src/spell.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: #define REGION_ALL 0xff  // word valid in all regions",
          "71: #define SP_OK  0",
          "72: #define SP_RARE  1",
          "73: #define SP_LOCAL 2",
          "",
          "[Removed Lines]",
          "70: #define SP_BANNED -1",
          "",
          "[Added Lines]",
          "70: #define SP_BANNED (-1)",
          "",
          "---------------"
        ],
        "src/spellfile.c||src/spellfile.c": [
          "File: src/spellfile.c -> src/spellfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2024: #define CONDIT_COMB 1 // affix must combine",
          "",
          "[Removed Lines]",
          "2021: #define PFX_FLAGS -256",
          "",
          "[Added Lines]",
          "2021: #define PFX_FLAGS (-256)",
          "",
          "---------------"
        ],
        "src/spellsuggest.c||src/spellsuggest.c": [
          "File: src/spellsuggest.c -> src/spellsuggest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #define WF_MIXCAP   0x20 // mix of upper and lower case: macaRONI",
          "",
          "[Removed Lines]",
          "26: #define RESCORE(word_score, sound_score) ((3 * word_score + sound_score) / 4)",
          "32: #define MAXSCORE(word_score, sound_score) ((4 * word_score - sound_score) / 3)",
          "",
          "[Added Lines]",
          "26: #define RESCORE(word_score, sound_score) ((3 * (word_score) + (sound_score)) / 4)",
          "32: #define MAXSCORE(word_score, sound_score) ((4 * (word_score) - (sound_score)) / 3)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: #define SUG(ga, i) (((suggest_T *)(ga).ga_data)[i])",
          "",
          "[Removed Lines]",
          "73: #define WAS_BANNED(su, word) (!HASHITEM_EMPTY(hash_find(&su->su_banned, word)))",
          "",
          "[Added Lines]",
          "73: #define WAS_BANNED(su, word) (!HASHITEM_EMPTY(hash_find(&(su)->su_banned, word)))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118: #define SCORE_SFMAX2 300 // maximum score for second try",
          "119: #define SCORE_SFMAX3 400 // maximum score for third try",
          "122: #define SCORE_MAXMAX 999999  // accept any score",
          "123: #define SCORE_LIMITMAX 350  // for spell_edit_score_limit()",
          "",
          "[Removed Lines]",
          "121: #define SCORE_BIG SCORE_INS * 3 // big difference",
          "",
          "[Added Lines]",
          "121: #define SCORE_BIG (SCORE_INS * 3) // big difference",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1216: #define TRY_DEEPER(su, stack, depth, add) \\",
          "",
          "[Removed Lines]",
          "1217:        (depth < MAXWLEN - 1 && stack[depth].ts_score + (add) < su->su_maxscore)",
          "",
          "[Added Lines]",
          "1217:        ((depth) < MAXWLEN - 1 && (stack)[depth].ts_score + (add) < (su)->su_maxscore)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3077: } sftword_T;",
          "3079: static sftword_T dumsft;",
          "3081: #define HI2SFT(hi)     HIKEY2SFT((hi)->hi_key)",
          "",
          "[Removed Lines]",
          "3080: #define HIKEY2SFT(p)  ((sftword_T *)(p - (dumsft.sft_word - (char_u *)&dumsft)))",
          "",
          "[Added Lines]",
          "3080: #define HIKEY2SFT(p)  ((sftword_T *)((p) - (dumsft.sft_word - (char_u *)&dumsft)))",
          "",
          "---------------"
        ],
        "src/syntax.c||src/syntax.c": [
          "File: src/syntax.c -> src/syntax.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: #define SYN_ITEMS(buf) ((synpat_T *)((buf)->b_syn_patterns.ga_data))",
          "",
          "[Removed Lines]",
          "84: #define NONE_IDX -2 // value of sp_sync_idx for \"NONE\"",
          "",
          "[Added Lines]",
          "84: #define NONE_IDX (-2) // value of sp_sync_idx for \"NONE\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "208: } stateitem_T;",
          "214: #ifdef FEAT_CONCEAL",
          "",
          "[Removed Lines]",
          "210: #define KEYWORD_IDX -1     // value of si_idx for keywords",
          "211: #define ID_LIST_ALL (short *)-1 // valid of si_cont_list for containing all",
          "",
          "[Added Lines]",
          "210: #define KEYWORD_IDX (-1)     // value of si_idx for keywords",
          "211: #define ID_LIST_ALL ((short *)-1) // valid of si_cont_list for containing all",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4401,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4402,",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: static win_T *win_alloc(win_T *after, int hidden);",
          "69: #define ROWS_AVAIL (Rows - p_ch - tabline_height())",
          "",
          "[Removed Lines]",
          "67: #define NOWIN  (win_T *)-1 // non-existing window",
          "",
          "[Added Lines]",
          "67: #define NOWIN  ((win_T *)-1) // non-existing window",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "585ee07cfef307b2fc828537e0d31fdc22d7e79f",
      "candidate_info": {
        "commit_hash": "585ee07cfef307b2fc828537e0d31fdc22d7e79f",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/585ee07cfef307b2fc828537e0d31fdc22d7e79f",
        "files": [
          "runtime/doc/options.txt",
          "src/spellsuggest.c",
          "src/testdir/test_spell.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.4249: the timeout limit for spell suggestions is always 5000\n\nProblem:    The timeout limit for spell suggestions is always 5000 milli\n            seconds.\nSolution:   Add the \"timeout\" entry to 'spellsuggest'.",
        "before_after_code_files": [
          "src/spellsuggest.c||src/spellsuggest.c",
          "src/testdir/test_spell.vim||src/testdir/test_spell.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/spellsuggest.c||src/spellsuggest.c",
            "src/testdir/test_spell.vim||src/testdir/test_spell.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/spellsuggest.c||src/spellsuggest.c",
            "src/testdir/test_spell.vim||src/testdir/test_spell.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/spellsuggest.c||src/spellsuggest.c": [
          "File: src/spellsuggest.c -> src/spellsuggest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "197: #define PFD_PREFIXTREE 0xfe // walking through the prefix tree",
          "198: #define PFD_NOTSPECIAL 0xfd // highest value that's not special",
          "200: static void spell_find_suggest(char_u *badptr, int badlen, suginfo_T *su, int maxcount, int banbadword, int need_cap, int interactive);",
          "201: #ifdef FEAT_EVAL",
          "202: static void spell_suggest_expr(suginfo_T *su, char_u *expr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200: static long spell_suggest_timeout = 5000;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "429:  else if (STRCMP(buf, \"double\") == 0)",
          "430:      f = SPS_DOUBLE;",
          "431:  else if (STRNCMP(buf, \"expr:\", 5) != 0",
          "433:      f = -1;",
          "435:  if (f == -1 || (sps_flags != 0 && f != 0))",
          "",
          "[Removed Lines]",
          "432:   && STRNCMP(buf, \"file:\", 5) != 0)",
          "",
          "[Added Lines]",
          "434:   && STRNCMP(buf, \"file:\", 5) != 0",
          "435:   && (STRNCMP(buf, \"timeout:\", 8) != 0",
          "436:       || (!VIM_ISDIGIT(buf[8])",
          "437:       && !(buf[8] == '-' && VIM_ISDIGIT(buf[9])))))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "842:     sps_copy = vim_strsave(p_sps);",
          "843:     if (sps_copy == NULL)",
          "844:  return;",
          "847:     for (p = sps_copy; *p != NUL; )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "850:     spell_suggest_timeout = 5000;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "864:  else if (STRNCMP(buf, \"file:\", 5) == 0)",
          "866:      spell_suggest_file(su, buf + 5);",
          "867:  else if (!did_intern)",
          "868:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "873:  else if (STRNCMP(buf, \"timeout:\", 8) == 0)",
          "875:      spell_suggest_timeout = atol((char *)buf + 8);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1325:  }",
          "1326:     }",
          "1327: #ifdef FEAT_RELTIME",
          "1331: #endif",
          "",
          "[Removed Lines]",
          "1330:     profile_setlimit(5000, &time_limit);",
          "",
          "[Added Lines]",
          "1339:     if (spell_suggest_timeout > 0)",
          "1340:  profile_setlimit(spell_suggest_timeout, &time_limit);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2659:   ui_breakcheck();",
          "2660:   breakcheckcount = 1000;",
          "2661: #ifdef FEAT_RELTIME",
          "2663:       got_int = TRUE;",
          "2664: #endif",
          "2665:      }",
          "",
          "[Removed Lines]",
          "2662:   if (profile_passed_limit(&time_limit))",
          "",
          "[Added Lines]",
          "2672:   if (spell_suggest_timeout > 0",
          "2673:        && profile_passed_limit(&time_limit))",
          "",
          "---------------"
        ],
        "src/testdir/test_spell.vim||src/testdir/test_spell.vim": [
          "File: src/testdir/test_spell.vim -> src/testdir/test_spell.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "446:   delfunc MySuggest3",
          "447: endfunc",
          "449: func Test_spellinfo()",
          "450:   new",
          "451:   let runtime = substitute($VIMRUNTIME, '\\\\', '/', 'g')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "449: func Test_spellsuggest_timeout()",
          "450:   set spellsuggest=timeout:30",
          "451:   set spellsuggest=timeout:-123",
          "452:   set spellsuggest=timeout:999999",
          "453:   call assert_fails('set spellsuggest=timeout', 'E474:')",
          "454:   call assert_fails('set spellsuggest=timeout:x', 'E474:')",
          "455:   call assert_fails('set spellsuggest=timeout:-x', 'E474:')",
          "456:   call assert_fails('set spellsuggest=timeout:--9', 'E474:')",
          "457: endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4248,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4249,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6970e1e36a1ecdb4d330d6ac9ca76f97fa515e36",
      "candidate_info": {
        "commit_hash": "6970e1e36a1ecdb4d330d6ac9ca76f97fa515e36",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/6970e1e36a1ecdb4d330d6ac9ca76f97fa515e36",
        "files": [
          "src/spellsuggest.c",
          "src/version.c"
        ],
        "message": "patch 8.2.4258: Coverity warns for array overrun\n\nProblem:    Coverity warns for array overrun.\nSolution:   Restrict depth to MAXWLEN - 1.",
        "before_after_code_files": [
          "src/spellsuggest.c||src/spellsuggest.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/spellsuggest.c||src/spellsuggest.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/spellsuggest.c||src/spellsuggest.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/spellsuggest.c||src/spellsuggest.c": [
          "File: src/spellsuggest.c -> src/spellsuggest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1216: #define TRY_DEEPER(su, stack, depth, add) \\",
          "",
          "[Removed Lines]",
          "1217:     (depth < MAXWLEN && stack[depth].ts_score + (add) < su->su_maxscore)",
          "",
          "[Added Lines]",
          "1217:        (depth < MAXWLEN - 1 && stack[depth].ts_score + (add) < su->su_maxscore)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1377:        && (byts[arridx] == 0 || n == (int)STATE_NOPREFIX))",
          "1378:   {",
          "",
          "[Removed Lines]",
          "1376:   if (depth < MAXWLEN",
          "",
          "[Added Lines]",
          "1376:   if (depth < MAXWLEN - 1",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4257,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4258,",
          "",
          "---------------"
        ]
      }
    }
  ]
}