{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e3863b5176ae43740f1722ec93e698afd122bd16",
      "candidate_info": {
        "commit_hash": "e3863b5176ae43740f1722ec93e698afd122bd16",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e3863b5176ae43740f1722ec93e698afd122bd16",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.c",
          "src/vdbe.c",
          "test/altertab.test"
        ],
        "message": "Ensure that the \"PRAGMA schema_version\" command causes the schema to be reparsed and reloaded.\n\nFossilOrigin-Name: 27d4a9a7b530c77a5b2593d1a5232b10746da9906f8d12890de7a8fbd7270256",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c",
          "src/vdbe.c||src/vdbe.c",
          "test/altertab.test||test/altertab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2094da753feb847254473b148d11e535c44dbae9b17454f1a4f8f7e90aefba3f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1890:       aOp[1].p1 = iDb;",
          "1891:       aOp[1].p2 = iCookie;",
          "1892:       aOp[1].p3 = sqlite3Atoi(zRight);",
          "1893:     }else{",
          "1895:       static const VdbeOpList readCookie[] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1893:       aOp[1].p5 = 1;",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3654:   rc = sqlite3BtreeUpdateMeta(pDb->pBt, pOp->p2, pOp->p3);",
          "3655:   if( pOp->p2==BTREE_SCHEMA_VERSION ){",
          "3658:     db->mDbFlags |= DBFLAG_SchemaChange;",
          "3659:   }else if( pOp->p2==BTREE_FILE_FORMAT ){",
          "",
          "[Removed Lines]",
          "3657:     pDb->pSchema->schema_cookie = pOp->p3;",
          "",
          "[Added Lines]",
          "3662:     pDb->pSchema->schema_cookie = pOp->p3 - pOp->p5;",
          "",
          "---------------"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "658:   ALTER TABLE a RENAME TO e;",
          "659: } {1 {error in view c: 1st ORDER BY term does not match any column in the result set}}",
          "662: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "661: # After forum thread https://sqlite.org/forum/forumpost/ddbe1c7efa",
          "662: # Ensure that PRAGMA schema_version=N causes a full schema reload.",
          "663: #",
          "664: reset_db",
          "665: do_execsql_test 22.0 {",
          "666:   CREATE TABLE t1(a INT, b TEXT NOT NULL);",
          "667:   INSERT INTO t1 VALUES(1,2),('a','b');",
          "668:   BEGIN;",
          "669:   PRAGMA writable_schema=ON;",
          "670:   UPDATE sqlite_schema SET sql='CREATE TABLE t1(a INT, b TEXT)' WHERE name LIKE 't1';",
          "671:   PRAGMA schema_version=1234;",
          "672:   COMMIT;",
          "673:   PRAGMA integrity_check;",
          "674: } {ok}",
          "675: do_execsql_test 22.1 {",
          "676:   ALTER TABLE t1 ADD COLUMN c INT DEFAULT 78;",
          "677:   SELECT * FROM t1;",
          "678: } {1 2 78 a b 78}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55550b76026ce20732bd3cfdbe37dd0d0ac8fb34",
      "candidate_info": {
        "commit_hash": "55550b76026ce20732bd3cfdbe37dd0d0ac8fb34",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/55550b76026ce20732bd3cfdbe37dd0d0ac8fb34",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/showdb.c"
        ],
        "message": "Enhance showdb to be 32-bit clean.\n\nFossilOrigin-Name: a8200327d4e8e78abef09c64345e0036f730fbbb20ae88935ef6c9972e6c7d5e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/showdb.c||tool/showdb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d2aac001204621062e6cb3230ce2ac1b4545cb83b3ebb6bfebccee4d51162e97",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/showdb.c||tool/showdb.c": [
          "File: tool/showdb.c -> tool/showdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:   return (z[0]<<24) + (z[1]<<16) + (z[2]<<8) + z[3];",
          "59: }",
          "",
          "[Removed Lines]",
          "57: static unsigned int decodeInt32(const unsigned char *z){",
          "",
          "[Added Lines]",
          "58: static u32 decodeInt32(const u8 *z){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141: static unsigned char *fileRead(sqlite3_int64 ofst, int nByte){",
          "142:   unsigned char *aData;",
          "143:   int got;",
          "145:   if( aData==0 ) out_of_memory();",
          "146:   memset(aData, 0, nByte+32);",
          "147:   if( g.bRaw==0 ){",
          "",
          "[Removed Lines]",
          "144:   aData = sqlite3_malloc(nByte+32);",
          "",
          "[Added Lines]",
          "145:   aData = sqlite3_malloc64(32+(i64)nByte);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "166:   if( g.bRaw==0 ){",
          "167:     int rc = g.pFd->pMethods->xFileSize(g.pFd, &res);",
          "168:     if( rc!=SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "164: static sqlite3_int64 fileGetsize(void){",
          "165:   sqlite3_int64 res = 0;",
          "",
          "[Added Lines]",
          "165: static i64 fileGetsize(void){",
          "166:   i64 res = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "208:   aData = fileRead(ofst, nByte);",
          "209:   for(i=0; i<nByte; i += g.perLine){",
          "210:     fprintf(stdout, zOfstFmt, i+printOfst);",
          "211:     for(j=0; j<g.perLine; j++){",
          "212:       if( i+j>nByte ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:     int go = 0;",
          "212:     for(j=0; j<g.perLine; j++){",
          "213:       if( i+j>nByte ){ break; }",
          "214:       if( aData[i+j] ){ go = 1; break; }",
          "215:     }",
          "216:     if( !go && i>0 && i+g.perLine<nByte ) continue;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "235:   unsigned char *aData;",
          "238:           iPg, iStart, iStart+g.pagesize-1);",
          "239:   aData = print_byte_range(iStart, g.pagesize, 0);",
          "240:   sqlite3_free(aData);",
          "241: }",
          "246: static void print_decode_line(",
          "",
          "[Removed Lines]",
          "233: static void print_page(int iPg){",
          "234:   int iStart;",
          "236:   iStart = (iPg-1)*g.pagesize;",
          "237:   fprintf(stdout, \"Page %d:   (offsets 0x%x..0x%x)\\n\",",
          "",
          "[Added Lines]",
          "240: static void print_page(u32 iPg){",
          "241:   i64 iStart;",
          "243:   iStart = ((i64)(iPg-1))*g.pagesize;",
          "244:   fprintf(stdout, \"Page %u:   (offsets 0x%llx..0x%llx)\\n\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "250: ){",
          "251:   int i, j;",
          "253:   char zBuf[100];",
          "254:   sprintf(zBuf, \" %03x: %02x\", ofst, aData[ofst]);",
          "255:   i = (int)strlen(zBuf);",
          "",
          "[Removed Lines]",
          "252:   int val = aData[ofst];",
          "",
          "[Added Lines]",
          "259:   u32 val = aData[ofst];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "262:     }",
          "263:     i += (int)strlen(&zBuf[i]);",
          "264:   }",
          "266:   printf(\"%s  %s\\n\", zBuf, zMsg);",
          "267: }",
          "",
          "[Removed Lines]",
          "265:   sprintf(&zBuf[i], \"   %9d\", val);",
          "",
          "[Added Lines]",
          "272:   sprintf(&zBuf[i], \"   %10u\", val);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "296:   print_decode_line(aData, 88, 4, \"meta[12]\");",
          "297:   print_decode_line(aData, 92, 4, \"Change counter for version number\");",
          "298:   print_decode_line(aData, 96, 4, \"SQLite version number\");",
          "299: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "306:   sqlite3_free(aData);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "408:   int i;",
          "409:   i64 nDesc = 0;",
          "410:   int n = 0;",
          "412:   i64 nPayload;",
          "413:   i64 rowid;",
          "414:   i64 nLocal;",
          "",
          "[Removed Lines]",
          "411:   int leftChild;",
          "",
          "[Added Lines]",
          "419:   u32 leftChild;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "418:     leftChild = ((a[0]*256 + a[1])*256 + a[2])*256 + a[3];",
          "419:     a += 4;",
          "420:     n += 4;",
          "422:     nDesc = strlen(zDesc);",
          "423:   }",
          "424:   if( cType!=5 ){",
          "",
          "[Removed Lines]",
          "421:     sprintf(zDesc, \"lx: %d \", leftChild);",
          "",
          "[Added Lines]",
          "429:     sprintf(zDesc, \"lx: %u \", leftChild);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "439:     nDesc += strlen(&zDesc[nDesc]);",
          "440:   }",
          "441:   if( nLocal<nPayload ){",
          "443:     unsigned char *b = &a[nLocal];",
          "444:     ovfl = ((b[0]*256 + b[1])*256 + b[2])*256 + b[3];",
          "446:     nDesc += strlen(&zDesc[nDesc]);",
          "447:     n += 4;",
          "448:   }",
          "",
          "[Removed Lines]",
          "442:     int ovfl;",
          "445:     sprintf(&zDesc[nDesc], \"ov: %d \", ovfl);",
          "",
          "[Added Lines]",
          "450:     u32 ovfl;",
          "453:     sprintf(&zDesc[nDesc], \"ov: %u \", ovfl);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "486: ){",
          "487:   int i, j = 0;",
          "489:   i64 k;",
          "490:   i64 nPayload;",
          "491:   i64 rowid;",
          "",
          "[Removed Lines]",
          "488:   int leftChild;",
          "",
          "[Added Lines]",
          "496:   u32 leftChild;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "504:   if( cType<=5 ){",
          "505:     leftChild = ((x[0]*256 + x[1])*256 + x[2])*256 + x[3];",
          "506:     printBytes(a, x, 4);",
          "508:     x += 4;",
          "509:   }",
          "510:   if( cType!=5 ){",
          "",
          "[Removed Lines]",
          "507:     printf(\"left child page:: %d\\n\", leftChild);",
          "",
          "[Added Lines]",
          "515:     printf(\"left child page:: %u\\n\", leftChild);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "622:   }",
          "623:   if( nLocal<nPayload ){",
          "624:     printBytes(a, x+nLocal, 4);",
          "626:   }",
          "627: }",
          "",
          "[Removed Lines]",
          "625:     printf(\"overflow-page: %d\\n\", decodeInt32(x+nLocal));",
          "",
          "[Added Lines]",
          "633:     printf(\"overflow-page: %u\\n\", decodeInt32(x+nLocal));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "731: static void decode_trunk_page(",
          "735: ){",
          "737:   unsigned char *a;",
          "738:   while( pgno>0 ){",
          "739:     a = fileRead((pgno-1)*g.pagesize, g.pagesize);",
          "",
          "[Removed Lines]",
          "736:   int n, i;",
          "",
          "[Added Lines]",
          "744:   u32 i;",
          "745:   u32 n;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "741:     print_decode_line(a, 0, 4, \"Next freelist trunk page\");",
          "742:     print_decode_line(a, 4, 4, \"Number of entries on this page\");",
          "743:     if( detail ){",
          "747:         char zIdx[10];",
          "748:         sprintf(zIdx, \"[%d]\", i);",
          "749:         printf(\"  %5s %7u\", zIdx, x);",
          "",
          "[Removed Lines]",
          "744:       n = (int)decodeInt32(&a[4]);",
          "745:       for(i=0; i<n; i++){",
          "746:         unsigned int x = decodeInt32(&a[8+4*i]);",
          "",
          "[Added Lines]",
          "753:       n = decodeInt32(&a[4]);",
          "754:       for(i=0; i<n && i<g.pagesize/4; i++){",
          "755:         u32 x = decodeInt32(&a[8+4*i]);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "754:     if( !recursive ){",
          "755:       pgno = 0;",
          "756:     }else{",
          "758:     }",
          "759:     sqlite3_free(a);",
          "760:   }",
          "",
          "[Removed Lines]",
          "757:       pgno = (int)decodeInt32(&a[0]);",
          "",
          "[Added Lines]",
          "766:       pgno = decodeInt32(&a[0]);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "772:   va_list ap;",
          "773:   char *zMsg;",
          "",
          "[Removed Lines]",
          "771: static void page_usage_msg(int pgno, const char *zFormat, ...){",
          "",
          "[Added Lines]",
          "780: static void page_usage_msg(u32 pgno, const char *zFormat, ...){",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "776:   zMsg = sqlite3_vmprintf(zFormat, ap);",
          "777:   va_end(ap);",
          "778:   if( pgno<=0 || pgno>g.mxPage ){",
          "780:             pgno, g.mxPage, zMsg);",
          "781:     sqlite3_free(zMsg);",
          "782:     return;",
          "",
          "[Removed Lines]",
          "779:     printf(\"ERROR: page %d out of range 1..%d: %s\\n\",",
          "",
          "[Added Lines]",
          "788:     printf(\"ERROR: page %d out of range 1..%u: %s\\n\",",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "823:     n += i;",
          "824:   }",
          "825:   if( nLocal<nPayload ){",
          "828:     while( ovfl && (cnt++)<g.mxPage ){",
          "830:                      cnt, cellno, pgno);",
          "831:       a = fileRead((ovfl-1)*(sqlite3_int64)g.pagesize, 4);",
          "832:       ovfl = decodeInt32(a);",
          "",
          "[Removed Lines]",
          "826:     int ovfl = decodeInt32(a+nLocal);",
          "827:     int cnt = 0;",
          "829:       page_usage_msg(ovfl, \"overflow %d from cell %d of page %d\",",
          "",
          "[Added Lines]",
          "835:     u32 ovfl = decodeInt32(a+nLocal);",
          "836:     u32 cnt = 0;",
          "838:       page_usage_msg(ovfl, \"overflow %d from cell %d of page %u\",",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "901:   }",
          "902:   if( a[hdr]==2 || a[hdr]==5 ){",
          "903:     int cellstart = hdr+12;",
          "905:     for(i=0; i<nCell; i++){",
          "908:       ofst = cellstart + i*2;",
          "909:       ofst = a[ofst]*256 + a[ofst+1];",
          "",
          "[Removed Lines]",
          "904:     unsigned int child;",
          "906:       int ofst;",
          "",
          "[Added Lines]",
          "913:     u32 child;",
          "915:       u32 ofst;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "932:   unsigned char *a;",
          "933:   int cnt = 0;",
          "934:   int i;",
          "",
          "[Removed Lines]",
          "931: static void page_usage_freelist(int pgno){",
          "",
          "[Added Lines]",
          "940: static void page_usage_freelist(u32 pgno){",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "959:   if( decodeInt32(a+52) ){",
          "960:     int usable = g.pagesize - a[20];",
          "962:     int perPage = usable/5;",
          "963:     while( pgno<=g.mxPage ){",
          "965:                            pgno+1, pgno+perPage);",
          "966:       pgno += perPage + 1;",
          "967:     }",
          "",
          "[Removed Lines]",
          "958: static void page_usage_ptrmap(unsigned char *a){",
          "961:     int pgno = 2;",
          "964:       page_usage_msg(pgno, \"PTRMAP page covering %d..%d\",",
          "",
          "[Added Lines]",
          "967: static void page_usage_ptrmap(u8 *a){",
          "970:     u64 pgno = 2;",
          "973:       page_usage_msg((u32)pgno, \"PTRMAP page covering %llu..%llu\",",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "974: static void page_usage_report(const char *zPrg, const char *zDbName){",
          "976:   int rc;",
          "977:   sqlite3 *db;",
          "978:   sqlite3_stmt *pStmt;",
          "",
          "[Removed Lines]",
          "975:   int i, j;",
          "",
          "[Added Lines]",
          "984:   u32 i, j;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "994:   if( zPageUse==0 ) out_of_memory();",
          "995:   memset(zPageUse, 0, sizeof(zPageUse[0])*(g.mxPage+1));",
          "",
          "[Removed Lines]",
          "993:   zPageUse = sqlite3_malloc( sizeof(zPageUse[0])*(g.mxPage+1) );",
          "",
          "[Added Lines]",
          "1002:   zPageUse = sqlite3_malloc64( sizeof(zPageUse[0])*(g.mxPage+1) );",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1008:     rc = sqlite3_prepare_v2(db, zQuery, -1, &pStmt, 0);",
          "1009:     if( rc==SQLITE_OK ){",
          "1010:       while( sqlite3_step(pStmt)==SQLITE_ROW ){",
          "1012:         page_usage_btree(pgno, 0, 0, (const char*)sqlite3_column_text(pStmt,1));",
          "1013:       }",
          "1014:     }else{",
          "",
          "[Removed Lines]",
          "1011:         int pgno = sqlite3_column_int(pStmt, 2);",
          "",
          "[Added Lines]",
          "1020:         u32 pgno = (u32)sqlite3_column_int64(pStmt, 2);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1023:   for(i=1; i<=g.mxPage; i++){",
          "1024:     if( zPageUse[i]==0 ) page_usage_btree(i, -1, 0, 0);",
          "1026:     sqlite3_free(zPageUse[i]);",
          "1027:   }",
          "1028:   sqlite3_free(zPageUse);",
          "",
          "[Removed Lines]",
          "1025:     printf(\"%5d: %s\\n\", i, zPageUse[i] ? zPageUse[i] : \"???\");",
          "",
          "[Added Lines]",
          "1034:     printf(\"%5u: %s\\n\", i, zPageUse[i] ? zPageUse[i] : \"???\");",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1035: static void ptrmap_coverage_report(const char *zDbName){",
          "1037:   unsigned char *aHdr;",
          "1038:   unsigned char *a;",
          "1039:   int usable;",
          "",
          "[Removed Lines]",
          "1036:   int pgno;",
          "",
          "[Added Lines]",
          "1045:   u64 pgno;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1057:   sqlite3_free(aHdr);",
          "1058:   printf(\"%5d: root of sqlite_schema\\n\", 1);",
          "1059:   for(pgno=2; pgno<=g.mxPage; pgno += perPage+1){",
          "1061:            pgno+1, pgno+perPage);",
          "1062:     a = fileRead((pgno-1)*g.pagesize, usable);",
          "1063:     for(i=0; i+5<=usable && pgno+1+i/5<=g.mxPage; i+=5){",
          "1064:       const char *zType = \"???\";",
          "1066:       switch( a[i] ){",
          "1067:         case 1:  zType = \"b-tree root page\";        break;",
          "1068:         case 2:  zType = \"freelist page\";           break;",
          "",
          "[Removed Lines]",
          "1060:     printf(\"%5d: PTRMAP page covering %d..%d\\n\", pgno,",
          "1065:       unsigned int iFrom = decodeInt32(&a[i+1]);",
          "",
          "[Added Lines]",
          "1069:     printf(\"%5llu: PTRMAP page covering %llu..%llu\\n\", pgno,",
          "1074:       u32 iFrom = decodeInt32(&a[i+1]);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1070:         case 4:  zType = \"later page of overflow\";  break;",
          "1071:         case 5:  zType = \"b-tree non-root page\";    break;",
          "1072:       }",
          "1074:     }",
          "1075:     sqlite3_free(a);",
          "1076:   }",
          "",
          "[Removed Lines]",
          "1073:       printf(\"%5d: %s, parent=%u\\n\", pgno+1+i/5, zType, iFrom);",
          "",
          "[Added Lines]",
          "1082:       printf(\"%5llu: %s, parent=%u\\n\", pgno+1+i/5, zType, iFrom);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1132:   sqlite3_free(zPgSz);",
          "1134:   printf(\"Pagesize: %d\\n\", g.pagesize);",
          "1138:   if( nArg==2 ){",
          "1140:     for(i=1; i<=g.mxPage; i++) print_page(i);",
          "1141:   }else{",
          "1142:     int i;",
          "1143:     for(i=2; i<nArg; i++){",
          "1145:       char *zLeft;",
          "1146:       if( strcmp(azArg[i], \"dbheader\")==0 ){",
          "1147:         print_db_header();",
          "",
          "[Removed Lines]",
          "1135:   g.mxPage = (int)((szFile+g.pagesize-1)/g.pagesize);",
          "1137:   printf(\"Available pages: 1..%d\\n\", g.mxPage);",
          "1139:     int i;",
          "1144:       int iStart, iEnd;",
          "",
          "[Added Lines]",
          "1144:   g.mxPage = (u32)((szFile+g.pagesize-1)/g.pagesize);",
          "1146:   printf(\"Available pages: 1..%u\\n\", g.mxPage);",
          "1148:     u32 i;",
          "1153:       u32 iStart, iEnd;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1163:         fprintf(stderr, \"%s: unknown option: [%s]\\n\", zPrg, azArg[i]);",
          "1164:         continue;",
          "1165:       }",
          "1167:       if( zLeft && strcmp(zLeft,\"..end\")==0 ){",
          "1168:         iEnd = g.mxPage;",
          "1169:       }else if( zLeft && zLeft[0]=='.' && zLeft[1]=='.' ){",
          "",
          "[Removed Lines]",
          "1166:       iStart = strtol(azArg[i], &zLeft, 0);",
          "",
          "[Added Lines]",
          "1175:       iStart = strtoul(azArg[i], &zLeft, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc2cf3b2952d09c31cf0e1e192caf8e222324d50",
      "candidate_info": {
        "commit_hash": "bc2cf3b2952d09c31cf0e1e192caf8e222324d50",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bc2cf3b2952d09c31cf0e1e192caf8e222324d50",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata8.db"
        ],
        "message": "Early detection of freelist size corruption in incremental vacuum.\n\nFossilOrigin-Name: f25a56c26e28abd44373230c6b5763aed35c9a7648abede8a53409dccc0bee1d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9cb03beae42d814a1b1b69f72865fde502d3f443313ec29edd010d1de40225eb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3886:     Pgno nFree = get4byte(&pBt->pPage1->aData[36]);",
          "3887:     Pgno nFin = finalDbSize(pBt, nOrig, nFree);",
          "3890:       rc = SQLITE_CORRUPT_BKPT;",
          "3891:     }else if( nFree>0 ){",
          "3892:       rc = saveAllCursors(pBt, 0, 0);",
          "",
          "[Removed Lines]",
          "3889:     if( nOrig<nFin ){",
          "",
          "[Added Lines]",
          "3889:     if( nOrig<nFin || nFree>=nOrig ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f82ce382f97abddc967ed2c989eb6db310b2e087",
      "candidate_info": {
        "commit_hash": "f82ce382f97abddc967ed2c989eb6db310b2e087",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f82ce382f97abddc967ed2c989eb6db310b2e087",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix the columnar output modes in the CLI so that they work with parameters. See [https://sqlite.org/forum/forumpost/17ba6aac24] for details of the problem fixed.\n\nFossilOrigin-Name: d573aa9b1299bc25e46fc8a4b4f7c665263490db86c66f11e2d903dcd7071995",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8cf342d4e5eb67b17aee595d9d75f7798eccaebc1ec88e646d344d8d4ab64977",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3053: ){",
          "3055:   int nColumn = 0;",
          "3056:   char **azData = 0;",
          "3058:   const char *z;",
          "3059:   int rc;",
          "3061:   const char *colSep = 0;",
          "3062:   const char *rowSep = 0;",
          "3071:   }",
          "3073:   if( nColumn>p->nWidth ){",
          "3074:     p->colWidth = realloc(p->colWidth, nColumn*2*sizeof(int));",
          "3075:     if( p->colWidth==0 ) shell_out_of_memory();",
          "",
          "[Removed Lines]",
          "3054:   int nRow = 0;",
          "3057:   char *zMsg = 0;",
          "3060:   int i, j, nTotal, w, n;",
          "3064:   rc = sqlite3_get_table(p->db, sqlite3_sql(pStmt),",
          "3065:                          &azData, &nRow, &nColumn, &zMsg);",
          "3066:   if( rc ){",
          "3067:     utf8_printf(p->out, \"ERROR: %s\\n\", zMsg);",
          "3068:     sqlite3_free(zMsg);",
          "3069:     sqlite3_free_table(azData);",
          "3070:     return;",
          "3072:   if( nRow==0 || nColumn==0 ) goto columnar_end;",
          "",
          "[Added Lines]",
          "3054:   sqlite3_int64 nRow = 0;",
          "3057:   sqlite3_int64 nAlloc = 0;",
          "3060:   sqlite3_int64 i, nData;",
          "3061:   int j, nTotal, w, n;",
          "3065:   rc = sqlite3_step(pStmt);",
          "3066:   if( rc!=SQLITE_ROW ) return;",
          "3067:   nColumn = sqlite3_column_count(pStmt);",
          "3068:   nAlloc = nColumn*4;",
          "3069:   azData = sqlite3_malloc64( nAlloc*sizeof(char*) );",
          "3070:   if( azData==0 ) shell_out_of_memory();",
          "3071:   for(i=0; i<nColumn; i++){",
          "3072:     azData[i] = strdup(sqlite3_column_name(pStmt,i));",
          "3074:   do{",
          "3075:     if( (nRow+2)*nColumn >= nAlloc ){",
          "3076:       nAlloc *= 2;",
          "3077:       azData = sqlite3_realloc64(azData, nAlloc*sizeof(char*));",
          "3078:       if( azData==0 ) shell_out_of_memory();",
          "3079:     }",
          "3080:     nRow++;",
          "3081:     for(i=0; i<nColumn; i++){",
          "3082:       z = (const char*)sqlite3_column_text(pStmt,i);",
          "3083:       azData[nRow*nColumn + i] = z ? strdup(z) : 0;",
          "3084:     }",
          "3085:   }while( (rc = sqlite3_step(pStmt))==SQLITE_ROW );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3179:   if( seenInterrupt ){",
          "3180:     utf8_printf(p->out, \"Interrupt\\n\");",
          "3181:   }",
          "3183: }",
          "",
          "[Removed Lines]",
          "3182:   sqlite3_free_table(azData);",
          "",
          "[Added Lines]",
          "3195:   nData = (nRow+1)*nColumn;",
          "3196:   for(i=0; i<nData; i++) free(azData[i]);",
          "3197:   sqlite3_free(azData);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "751a44ed24b5a877564d89977b228d77394644cd",
      "candidate_info": {
        "commit_hash": "751a44ed24b5a877564d89977b228d77394644cd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/751a44ed24b5a877564d89977b228d77394644cd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Fix a crash.  Not all tests pass, but tests do at least run to completion now.\n\nFossilOrigin-Name: b5d38e28c62dbc4f5f0e1b2590c9d6c2de9a140cc3528cae1968fd741e337fb0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 221e021077e2bbce693a89a16361418ced20f4e8f5a27e8c461648cff663a2c5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4427:             }",
          "4428:           }",
          "4429:         }",
          "4431:             && (pWInfo->wctrlFlags & (WHERE_ORDERBY_MIN|WHERE_ORDERBY_MAX))!=0",
          "4432:             ){",
          "4433:         pFrom->aLoop[nLoop-1]->wsFlags |= WHERE_ONEROW;",
          "",
          "[Removed Lines]",
          "4430:       }else if( pWInfo->nOBSat==1",
          "",
          "[Added Lines]",
          "4430:       }else if( nLoop",
          "4431:             && pWInfo->nOBSat==1",
          "",
          "---------------"
        ]
      }
    }
  ]
}