{
  "cve_id": "CVE-2021-3658",
  "cve_desc": "bluetoothd from bluez incorrectly saves adapters' Discoverable status when a device is powered down, and restores it when powered up. If a device is powered down while discoverable, it will be discoverable when powered on again. This could lead to inadvertent exposure of the bluetooth stack to physically nearby attackers.",
  "repo": "bluez/bluez",
  "patch_hash": "b497b5942a8beb8f89ca1c359c54ad67ec843055",
  "patch_info": {
    "commit_hash": "b497b5942a8beb8f89ca1c359c54ad67ec843055",
    "repo": "bluez/bluez",
    "commit_url": "https://github.com/bluez/bluez/commit/b497b5942a8beb8f89ca1c359c54ad67ec843055",
    "files": [
      "src/adapter.c"
    ],
    "message": "adapter: Fix storing discoverable setting\n\ndiscoverable setting shall only be store when changed via Discoverable\nproperty and not when discovery client set it as that be considered\ntemporary just for the lifetime of the discovery.",
    "before_after_code_files": [
      "src/adapter.c||src/adapter.c"
    ]
  },
  "patch_diff": {
    "src/adapter.c||src/adapter.c": [
      "File: src/adapter.c -> src/adapter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "560:  if (changed_mask & MGMT_SETTING_DISCOVERABLE) {",
      "561:   g_dbus_emit_property_changed(dbus_conn, adapter->path,",
      "562:      ADAPTER_INTERFACE, \"Discoverable\");",
      "564:   btd_adv_manager_refresh(adapter->adv_manager);",
      "565:  }",
      "",
      "[Removed Lines]",
      "563:   store_adapter_info(adapter);",
      "",
      "[Added Lines]",
      "566:   if (!adapter->discovery_discoverable)",
      "567:    store_adapter_info(adapter);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2162: static int update_discovery_filter(struct btd_adapter *adapter)",
      "2163: {",
      "2164:  struct mgmt_cp_start_service_discovery *sd_cp;",
      "2168:  DBG(\"\");",
      "",
      "[Removed Lines]",
      "2165:  GSList *l;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2173:   return -ENOMEM;",
      "2174:  }",
      "",
      "[Removed Lines]",
      "2176:  for (l = adapter->discovery_list; l; l = g_slist_next(l)) {",
      "2177:   struct discovery_client *client = l->data;",
      "2179:   if (!client->discovery_filter)",
      "2180:    continue;",
      "2182:   if (client->discovery_filter->discoverable)",
      "2183:    break;",
      "2184:  }",
      "2186:  set_discovery_discoverable(adapter, l ? true : false);",
      "",
      "[Added Lines]",
      "2181:  if (!(adapter->current_settings & MGMT_OP_SET_DISCOVERABLE)) {",
      "2182:   GSList *l;",
      "2184:   for (l = adapter->discovery_list; l; l = g_slist_next(l)) {",
      "2185:    struct discovery_client *client = l->data;",
      "2187:    if (!client->discovery_filter)",
      "2188:     continue;",
      "2190:    if (client->discovery_filter->discoverable) {",
      "2191:     set_discovery_discoverable(adapter, true);",
      "2192:     break;",
      "2193:    }",
      "2194:   }",
      "2195:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2216:   return 0;",
      "2217:  }",
      "",
      "[Removed Lines]",
      "2219:  if (adapter->discovery_discoverable)",
      "2220:   set_discovery_discoverable(adapter, false);",
      "",
      "[Added Lines]",
      "2228:  set_discovery_discoverable(adapter, false);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "6913:  g_free(adapter->current_discovery_filter);",
      "6914:  adapter->current_discovery_filter = NULL;",
      "6916:  adapter->discovering = false;",
      "6918:  while (adapter->connections) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6924:  set_discovery_discoverable(adapter, false);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7903bbe1005bd05f542f64cf6af251f0f648d3ac",
      "candidate_info": {
        "commit_hash": "7903bbe1005bd05f542f64cf6af251f0f648d3ac",
        "repo": "bluez/bluez",
        "commit_url": "https://github.com/bluez/bluez/commit/7903bbe1005bd05f542f64cf6af251f0f648d3ac",
        "files": [
          "src/adapter.c"
        ],
        "message": "adapter: Fix check of DISCOVERABLE setting\n\nThe test for `DISCOVERABLE` should be done with\n`MGMT_SETTING_DISCOVERABLE` instead of `MGMT_OP_SET_DISCOVERABLE`.\nAcked-by: Paul Menzel <pmenzel@molgen.mpg.de>",
        "before_after_code_files": [
          "src/adapter.c||src/adapter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/adapter.c||src/adapter.c"
          ],
          "candidate": [
            "src/adapter.c||src/adapter.c"
          ]
        }
      },
      "candidate_diff": {
        "src/adapter.c||src/adapter.c": [
          "File: src/adapter.c -> src/adapter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1993:   return true;",
          "1997:   return true;",
          "1999:  adapter->discovery_discoverable = enable;",
          "",
          "[Removed Lines]",
          "1996:  if (enable && (adapter->current_settings & MGMT_OP_SET_DISCOVERABLE))",
          "",
          "[Added Lines]",
          "1996:  if (enable && (adapter->current_settings & MGMT_SETTING_DISCOVERABLE))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2233:   GSList *l;",
          "2235:   for (l = adapter->discovery_list; l; l = g_slist_next(l)) {",
          "",
          "[Removed Lines]",
          "2232:  if (!(adapter->current_settings & MGMT_OP_SET_DISCOVERABLE)) {",
          "",
          "[Added Lines]",
          "2232:  if (!(adapter->current_settings & MGMT_SETTING_DISCOVERABLE)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}