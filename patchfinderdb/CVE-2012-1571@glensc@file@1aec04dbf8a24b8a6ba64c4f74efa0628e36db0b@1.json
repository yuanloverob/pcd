{
  "cve_id": "CVE-2012-1571",
  "cve_desc": "file before 5.11 and libmagic allow remote attackers to cause a denial of service (crash) via a crafted Composite Document File (CDF) file that triggers (1) an out-of-bounds read or (2) an invalid pointer dereference.",
  "repo": "glensc/file",
  "patch_hash": "1aec04dbf8a24b8a6ba64c4f74efa0628e36db0b",
  "patch_info": {
    "commit_hash": "1aec04dbf8a24b8a6ba64c4f74efa0628e36db0b",
    "repo": "glensc/file",
    "commit_url": "https://github.com/glensc/file/commit/1aec04dbf8a24b8a6ba64c4f74efa0628e36db0b",
    "files": [
      "src/cdf.c"
    ],
    "message": "Fix bounds checks again.",
    "before_after_code_files": [
      "src/cdf.c||src/cdf.c"
    ]
  },
  "patch_diff": {
    "src/cdf.c||src/cdf.c": [
      "File: src/cdf.c -> src/cdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #include \"file.h\"",
      "37: #ifndef lint",
      "39: #endif",
      "41: #include <assert.h>",
      "",
      "[Removed Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.48 2012/02/17 05:27:45 christos Exp $\")",
      "",
      "[Added Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.49 2012/02/20 20:04:37 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "351: cdf_read_short_sector(const cdf_stream_t *sst, void *buf, size_t offs,",
      "352:     size_t len, const cdf_header_t *h, cdf_secid_t id)",
      "353: {",
      "355:  size_t pos = CDF_SHORT_SEC_POS(h, id);",
      "356:  assert(ss == len);",
      "358:   DPRINTF((\"Out of bounds read %\" SIZE_T_FORMAT \"u > %\"",
      "359:       SIZE_T_FORMAT \"u\\n\",",
      "361:   return -1;",
      "362:  }",
      "363:  (void)memcpy(((char *)buf) + offs,",
      "",
      "[Removed Lines]",
      "354:  size_t ss = CDF_SEC_SIZE(h);",
      "357:  if (pos > ss * sst->sst_len) {",
      "360:       pos, ss * sst->sst_len));",
      "",
      "[Added Lines]",
      "355:  size_t ss = CDF_SHORT_SEC_SIZE(h);",
      "358:  if (pos > CDF_SEC_SIZE(h) * sst->sst_len) {",
      "361:       pos, CDF_SEC_SIZE(h) * sst->sst_len));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "529:     const cdf_sat_t *ssat, const cdf_stream_t *sst,",
      "530:     cdf_secid_t sid, size_t len, cdf_stream_t *scn)",
      "531: {",
      "533:  scn->sst_len = cdf_count_chain(ssat, sid, CDF_SEC_SIZE(h));",
      "534:  scn->sst_dirlen = len;",
      "",
      "[Removed Lines]",
      "532:  size_t ss = CDF_SEC_SIZE(h), i, j;",
      "",
      "[Added Lines]",
      "533:  size_t ss = CDF_SHORT_SEC_SIZE(h), i, j;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "798:  if (cdf_check_stream_offset(sst, h, e, 0, __LINE__) == -1)",
      "799:   goto out;",
      "800:  for (i = 0; i < sh.sh_properties; i++) {",
      "801:   q = (const uint8_t *)(const void *)",
      "804:   if (q > e) {",
      "805:    DPRINTF((\"Ran of the end %p > %p\\n\", q, e));",
      "806:    goto out;",
      "807:   }",
      "808:   inp[i].pi_id = CDF_GETUINT32(p, i << 1);",
      "809:   inp[i].pi_type = CDF_GETUINT32(q, 0);",
      "813:   if (inp[i].pi_type & CDF_VECTOR) {",
      "814:    nelements = CDF_GETUINT32(q, 1);",
      "815:    o = 2;",
      "",
      "[Removed Lines]",
      "802:       ((const char *)(const void *)p +",
      "803:       CDF_GETUINT32(p, (i << 1) + 1)) - 2 * sizeof(uint32_t);",
      "810:   DPRINTF((\"%\" SIZE_T_FORMAT \"u) id=%x type=%x offs=0x%tx,0x%x\\n\", i,",
      "811:       inp[i].pi_id, inp[i].pi_type, q - p,",
      "812:       CDF_GETUINT32(p, (i << 1) + 1)));",
      "",
      "[Added Lines]",
      "802:   size_t ofs = CDF_GETUINT32(p, (i << 1) + 1);",
      "804:       ((const char *)(const void *)p + ofs",
      "805:       - 2 * sizeof(uint32_t));",
      "812:   DPRINTF((\"%\" SIZE_T_FORMAT \"u) id=%x type=%x offs=0x%tx,0x%x\\n\",",
      "813:       i, inp[i].pi_id, inp[i].pi_type, q - p, offs));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1140872578eedaeecf828f1841d17ff574372dba",
      "candidate_info": {
        "commit_hash": "1140872578eedaeecf828f1841d17ff574372dba",
        "repo": "glensc/file",
        "commit_url": "https://github.com/glensc/file/commit/1140872578eedaeecf828f1841d17ff574372dba",
        "files": [
          "src/cdf.c",
          "src/cdf.h",
          "src/readcdf.c"
        ],
        "message": "- add float and double types - fix debug printf formats - fix short stream sizes - don't fail if we don't know about a type",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c",
          "src/cdf.h||src/cdf.h",
          "src/readcdf.c||src/readcdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.46 2011/09/16 21:23:59 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.47 2012/02/17 04:23:30 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "351: cdf_read_short_sector(const cdf_stream_t *sst, void *buf, size_t offs,",
          "352:     size_t len, const cdf_header_t *h, cdf_secid_t id)",
          "353: {",
          "355:  size_t pos = CDF_SHORT_SEC_POS(h, id);",
          "356:  assert(ss == len);",
          "359:   return -1;",
          "360:  }",
          "361:  (void)memcpy(((char *)buf) + offs,",
          "",
          "[Removed Lines]",
          "354:  size_t ss = CDF_SHORT_SEC_SIZE(h);",
          "357:  if (sst->sst_len < (size_t)id) {",
          "358:   DPRINTF((\"bad sector id %d > %d\\n\", id, sst->sst_len));",
          "",
          "[Added Lines]",
          "354:  size_t ss = CDF_SEC_SIZE(h);",
          "357:  if (pos > ss * sst->sst_len) {",
          "358:   DPRINTF((\"Out of bounds read %\" SIZE_T_FORMAT \"u > %\"",
          "359:       SIZE_T_FORMAT \"u\\n\",",
          "360:       pos, ss * sst->sst_len));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "426:    if (sec < 0)",
          "427:     goto out;",
          "428:    if (i >= sat->sat_len) {",
          "431:        errno = EFTYPE;",
          "432:        goto out2;",
          "433:    }",
          "",
          "[Removed Lines]",
          "429:        DPRINTF((\"Out of bounds reading MSA %u >= %u\",",
          "430:     i, sat->sat_len));",
          "",
          "[Added Lines]",
          "431:        DPRINTF((\"Out of bounds reading MSA %\" SIZE_T_FORMAT",
          "432:     \"u >= %\" SIZE_T_FORMAT \"u\", i, sat->sat_len));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "500:   }",
          "501:   if (i >= scn->sst_len) {",
          "502:    DPRINTF((\"Out of bounds reading long sector chain \"",
          "504:    errno = EFTYPE;",
          "505:    goto out;",
          "506:   }",
          "",
          "[Removed Lines]",
          "503:        \"%u > %u\\n\", i, scn->sst_len));",
          "",
          "[Added Lines]",
          "505:        \"%\" SIZE_T_FORMAT \"u > %\" SIZE_T_FORMAT \"u\\n\", i,",
          "506:        scn->sst_len));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "526:     const cdf_sat_t *ssat, const cdf_stream_t *sst,",
          "527:     cdf_secid_t sid, size_t len, cdf_stream_t *scn)",
          "528: {",
          "530:  scn->sst_len = cdf_count_chain(ssat, sid, CDF_SEC_SIZE(h));",
          "531:  scn->sst_dirlen = len;",
          "",
          "[Removed Lines]",
          "529:  size_t ss = CDF_SHORT_SEC_SIZE(h), i, j;",
          "",
          "[Added Lines]",
          "532:  size_t ss = CDF_SEC_SIZE(h), i, j;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "545:   }",
          "546:   if (i >= scn->sst_len) {",
          "547:    DPRINTF((\"Out of bounds reading short sector chain \"",
          "549:    errno = EFTYPE;",
          "550:    goto out;",
          "551:   }",
          "",
          "[Removed Lines]",
          "548:        \"%u > %u\\n\", i, scn->sst_len));",
          "",
          "[Added Lines]",
          "551:        \"%\" SIZE_T_FORMAT \"u > %\" SIZE_T_FORMAT \"u\\n\",",
          "552:        i, scn->sst_len));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "653:   }",
          "654:   if (i >= ssat->sat_len) {",
          "655:    DPRINTF((\"Out of bounds reading short sector chain \"",
          "657:    errno = EFTYPE;",
          "658:    goto out;",
          "659:   }",
          "",
          "[Removed Lines]",
          "656:        \"%u > %u\\n\", i, ssat->sat_len));",
          "",
          "[Added Lines]",
          "660:        \"%\" SIZE_T_FORMAT \"u > %\" SIZE_T_FORMAT \"u\\n\", i,",
          "661:        ssat->sat_len));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "802:   }",
          "803:   inp[i].pi_id = CDF_GETUINT32(p, i << 1);",
          "804:   inp[i].pi_type = CDF_GETUINT32(q, 0);",
          "807:   if (inp[i].pi_type & CDF_VECTOR) {",
          "808:    nelements = CDF_GETUINT32(q, 1);",
          "809:    o = 2;",
          "",
          "[Removed Lines]",
          "805:   DPRINTF((\"%d) id=%x type=%x offs=%x,%d\\n\", i, inp[i].pi_id,",
          "806:       inp[i].pi_type, q - p, CDF_GETUINT32(p, (i << 1) + 1)));",
          "",
          "[Added Lines]",
          "810:   DPRINTF((\"%\" SIZE_T_FORMAT \"u) id=%x type=%x offs=%tx,%d\\n\", i,",
          "811:       inp[i].pi_id, inp[i].pi_type, q - p,",
          "812:       CDF_GETUINT32(p, (i << 1) + 1)));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "849:    (void)memcpy(&u64, &q[o4], sizeof(u64));",
          "850:    inp[i].pi_u64 = CDF_TOLE8((uint64_t)u64);",
          "851:    break;",
          "852:   case CDF_LENGTH32_STRING:",
          "853:   case CDF_LENGTH32_WSTRING:",
          "854:    if (nelements > 1) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "858:   case CDF_FLOAT:",
          "859:    if (inp[i].pi_type & CDF_VECTOR)",
          "860:     goto unknown;",
          "861:    (void)memcpy(&u32, &q[o4], sizeof(u32));",
          "862:    u32 = CDF_TOLE4(u32);",
          "863:    memcpy(&inp[i].pi_f, &u32, sizeof(inp[i].pi_f));",
          "864:    break;",
          "865:   case CDF_DOUBLE:",
          "866:    if (inp[i].pi_type & CDF_VECTOR)",
          "867:     goto unknown;",
          "868:    (void)memcpy(&u64, &q[o4], sizeof(u64));",
          "869:    u64 = CDF_TOLE8((uint64_t)u64);",
          "870:    memcpy(&inp[i].pi_d, &u64, sizeof(inp[i].pi_d));",
          "871:    break;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "865:     inp = *info + nelem;",
          "866:    }",
          "868:    for (j = 0; j < nelements; j++, i++) {",
          "869:     uint32_t l = CDF_GETUINT32(q, o);",
          "870:     inp[i].pi_str.s_len = l;",
          "871:     inp[i].pi_str.s_buf = (const char *)",
          "872:         (const void *)(&q[o4 + sizeof(l)]);",
          "874:         CDF_ROUND(l, sizeof(l)),",
          "875:         inp[i].pi_str.s_buf));",
          "876:     l = 4 + (uint32_t)CDF_ROUND(l, sizeof(l));",
          "",
          "[Removed Lines]",
          "867:    DPRINTF((\"nelements = %d\\n\", nelements));",
          "873:     DPRINTF((\"l = %d, r = %d, s = %s\\n\", l,",
          "",
          "[Added Lines]",
          "887:    DPRINTF((\"nelements = %\" SIZE_T_FORMAT \"u\\n\",",
          "888:        nelements));",
          "894:     DPRINTF((\"l = %d, r = %\" SIZE_T_FORMAT",
          "895:         \"u, s = %s\\n\", l,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "895:   unknown:",
          "896:    DPRINTF((\"Don't know how to deal with %x\\n\",",
          "897:        inp[i].pi_type));",
          "899:   }",
          "900:  }",
          "901:  return 0;",
          "",
          "[Removed Lines]",
          "898:    goto out;",
          "",
          "[Added Lines]",
          "920:    break;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "934:    return -1;",
          "935:   }",
          "936:   if (cdf_read_property_info(sst, h, CDF_TOLE4(sd->sd_offset),",
          "938:    return -1;",
          "939:  }",
          "940:  return 0;",
          "941: }",
          "",
          "[Removed Lines]",
          "937:       info, count, &maxcount) == -1)",
          "",
          "[Added Lines]",
          "959:       info, count, &maxcount) == -1) {",
          "961:   }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1060:  size_t i, j, s = size / sizeof(cdf_secid_t);",
          "1062:  for (i = 0; i < sat->sat_len; i++) {",
          "1065:   for (j = 0; j < s; j++) {",
          "1066:    (void)fprintf(stderr, \"%5d, \",",
          "1067:        CDF_TOLE4(sat->sat_tab[s * i + j]));",
          "1068:    if ((j + 1) % 10 == 0)",
          "1071:   }",
          "1072:   (void)fprintf(stderr, \"\\n\");",
          "1073:  }",
          "",
          "[Removed Lines]",
          "1063:   (void)fprintf(stderr, \"%s[%\" SIZE_T_FORMAT \"u]:\\n%.6d: \",",
          "1064:       prefix, i, i * s);",
          "1069:     (void)fprintf(stderr, \"\\n%.6d: \",",
          "1070:         i * s + j + 1);",
          "",
          "[Added Lines]",
          "1086:   (void)fprintf(stderr, \"%s[%\" SIZE_T_FORMAT \"u]:\\n%.6\"",
          "1087:       SIZE_T_FORMAT \"u: \", prefix, i, i * s);",
          "1092:     (void)fprintf(stderr, \"\\n%.6\" SIZE_T_FORMAT",
          "1093:         \"u: \", i * s + j + 1);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1086:   if (j == 16) {",
          "1087:    j = 0;",
          "1088:    abuf[15] = '\\0';",
          "1090:   }",
          "1091:  }",
          "1092:  (void)fprintf(stderr, \"\\n\");",
          "",
          "[Removed Lines]",
          "1089:    (void)fprintf(stderr, \"%s\\n%.4x: \", abuf, i + 1);",
          "",
          "[Added Lines]",
          "1112:    (void)fprintf(stderr, \"%s\\n%.4\" SIZE_T_FORMAT \"x: \",",
          "1113:        abuf, i + 1);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1184:    (void)fprintf(stderr, \"unsigned 32 [%u]\\n\",",
          "1185:        info[i].pi_u32);",
          "1186:    break;",
          "1187:   case CDF_LENGTH32_STRING:",
          "1188:    (void)fprintf(stderr, \"string %u [%.*s]\\n\",",
          "1189:        info[i].pi_str.s_len,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1211:   case CDF_FLOAT:",
          "1212:    (void)fprintf(stderr, \"float [%g]\\n\",",
          "1213:        info[i].pi_f);",
          "1214:    break;",
          "1215:   case CDF_DOUBLE:",
          "1216:    (void)fprintf(stderr, \"double [%g]\\n\",",
          "1217:        info[i].pi_d);",
          "1218:    break;",
          "",
          "---------------"
        ],
        "src/cdf.h||src/cdf.h": [
          "File: src/cdf.h -> src/cdf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:         cdf_secid_t h_master_sat[436/4];",
          "77: } cdf_header_t;",
          "80: #define CDF_SEC_POS(h, secid) (CDF_SEC_SIZE(h) + (secid) * CDF_SEC_SIZE(h))",
          "82: #define CDF_SHORT_SEC_POS(h, secid) ((secid) * CDF_SHORT_SEC_SIZE(h))",
          "84: typedef int32_t cdf_dirid_t;",
          "",
          "[Removed Lines]",
          "79: #define CDF_SEC_SIZE(h) (1 << (h)->h_sec_size_p2)",
          "81: #define CDF_SHORT_SEC_SIZE(h) (1 << (h)->h_short_sec_size_p2)",
          "",
          "[Added Lines]",
          "79: #define CDF_SEC_SIZE(h) ((size_t)(1 << (h)->h_sec_size_p2))",
          "81: #define CDF_SHORT_SEC_SIZE(h) ((size_t)(1 << (h)->h_short_sec_size_p2))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:                 uint64_t _pi_u64;",
          "171:                 int64_t  _pi_s64;",
          "172:                 cdf_timestamp_t _pi_tp;",
          "173:                 struct {",
          "174:                         uint32_t s_len;",
          "175:                         const char *s_buf;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:   float  _pi_f;",
          "174:   double  _pi_d;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "181: #define pi_s32 pi_val._pi_s32",
          "182: #define pi_u16 pi_val._pi_u16",
          "183: #define pi_s16 pi_val._pi_s16",
          "184: #define pi_tp pi_val._pi_tp",
          "185: #define pi_str pi_val._pi_str",
          "186: } cdf_property_info_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186: #define pi_f pi_val._pi_f",
          "187: #define pi_d pi_val._pi_d",
          "",
          "---------------"
        ],
        "src/readcdf.c||src/readcdf.c": [
          "File: src/readcdf.c -> src/readcdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"file.h\"",
          "28: #ifndef lint",
          "30: #endif",
          "32: #include <stdlib.h>",
          "",
          "[Removed Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.26 2011/08/26 13:38:28 christos Exp $\")",
          "",
          "[Added Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.27 2011/09/28 13:30:10 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:                             info[i].pi_u32) == -1)",
          "73:                                 return -1;",
          "74:                         break;",
          "75:                 case CDF_LENGTH32_STRING:",
          "76:                 case CDF_LENGTH32_WSTRING:",
          "77:                         len = info[i].pi_str.s_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:                 case CDF_FLOAT:",
          "76:                         if (NOTMIME(ms) && file_printf(ms, \", %s: %g\", buf,",
          "77:                             info[i].pi_f) == -1)",
          "78:                                 return -1;",
          "79:                         break;",
          "80:                 case CDF_DOUBLE:",
          "81:                         if (NOTMIME(ms) && file_printf(ms, \", %s: %g\", buf,",
          "82:                             info[i].pi_d) == -1)",
          "83:                                 return -1;",
          "84:                         break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "901672189f6d1d1251df84d945bb3cd9c210a066",
      "candidate_info": {
        "commit_hash": "901672189f6d1d1251df84d945bb3cd9c210a066",
        "repo": "glensc/file",
        "commit_url": "https://github.com/glensc/file/commit/901672189f6d1d1251df84d945bb3cd9c210a066",
        "files": [
          "src/cdf.c"
        ],
        "message": "- simplify rounding - use 0x for hex printing",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.47 2012/02/17 04:23:30 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.48 2012/02/17 05:27:45 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "807:   }",
          "808:   inp[i].pi_id = CDF_GETUINT32(p, i << 1);",
          "809:   inp[i].pi_type = CDF_GETUINT32(q, 0);",
          "811:       inp[i].pi_id, inp[i].pi_type, q - p,",
          "812:       CDF_GETUINT32(p, (i << 1) + 1)));",
          "813:   if (inp[i].pi_type & CDF_VECTOR) {",
          "",
          "[Removed Lines]",
          "810:   DPRINTF((\"%\" SIZE_T_FORMAT \"u) id=%x type=%x offs=%tx,%d\\n\", i,",
          "",
          "[Added Lines]",
          "810:   DPRINTF((\"%\" SIZE_T_FORMAT \"u) id=%x type=%x offs=0x%tx,0x%x\\n\", i,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "895:         \"u, s = %s\\n\", l,",
          "896:         CDF_ROUND(l, sizeof(l)),",
          "897:         inp[i].pi_str.s_buf));",
          "900:     if (q + o >= e)",
          "901:      goto out;",
          "902:     o4 = o * sizeof(uint32_t);",
          "",
          "[Removed Lines]",
          "898:     l = 4 + (uint32_t)CDF_ROUND(l, sizeof(l));",
          "899:     o += l >> 2;",
          "",
          "[Added Lines]",
          "898:     if (l & 1)",
          "899:      l++;",
          "900:     o += l >> 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c85e77c20699c02859eb1eb517831cab23eac55",
      "candidate_info": {
        "commit_hash": "2c85e77c20699c02859eb1eb517831cab23eac55",
        "repo": "glensc/file",
        "commit_url": "https://github.com/glensc/file/commit/2c85e77c20699c02859eb1eb517831cab23eac55",
        "files": [
          "src/cdf.c"
        ],
        "message": "allow size <= to the size we have not just <",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.49 2012/02/20 20:04:37 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.50 2012/02/20 22:35:29 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "268:  const char *b = (const char *)sst->sst_tab;",
          "269:  const char *e = ((const char *)p) + tail;",
          "270:  (void)&line;",
          "272:   return 0;",
          "275:      SIZE_T_FORMAT \"u]\\n\", line, b, e, (size_t)(e - b),",
          "276:      CDF_SEC_SIZE(h) * sst->sst_len, CDF_SEC_SIZE(h), sst->sst_len));",
          "277:  errno = EFTYPE;",
          "",
          "[Removed Lines]",
          "271:  if (e >= b && (size_t)(e - b) < CDF_SEC_SIZE(h) * sst->sst_len)",
          "273:  DPRINTF((\"%d: offset begin %p end %p %\" SIZE_T_FORMAT \"u\"",
          "274:      \" >= %\" SIZE_T_FORMAT \"u [%\" SIZE_T_FORMAT \"u %\"",
          "",
          "[Added Lines]",
          "271:  if (e >= b && (size_t)(e - b) <= CDF_SEC_SIZE(h) * sst->sst_len)",
          "273:  DPRINTF((\"%d: offset begin %p < end %p || %\" SIZE_T_FORMAT \"u\"",
          "274:      \" > %\" SIZE_T_FORMAT \"u [%\" SIZE_T_FORMAT \"u %\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1859fdb4e67c49c463c4e0078054335cd46ba295",
      "candidate_info": {
        "commit_hash": "1859fdb4e67c49c463c4e0078054335cd46ba295",
        "repo": "glensc/file",
        "commit_url": "https://github.com/glensc/file/commit/1859fdb4e67c49c463c4e0078054335cd46ba295",
        "files": [
          "src/cdf.c"
        ],
        "message": "add more check found by cert's fuzzer.",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.45 2011/08/28 08:38:48 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.46 2011/09/16 21:23:59 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "341: cdf_read_sector(const cdf_info_t *info, void *buf, size_t offs, size_t len,",
          "342:     const cdf_header_t *h, cdf_secid_t id)",
          "343: {",
          "347: }",
          "349: ssize_t",
          "350: cdf_read_short_sector(const cdf_stream_t *sst, void *buf, size_t offs,",
          "351:     size_t len, const cdf_header_t *h, cdf_secid_t id)",
          "352: {",
          "354:  (void)memcpy(((char *)buf) + offs,",
          "356:  return len;",
          "357: }",
          "",
          "[Removed Lines]",
          "344:  assert((size_t)CDF_SEC_SIZE(h) == len);",
          "345:  return cdf_read(info, (off_t)CDF_SEC_POS(h, id),",
          "346:      ((char *)buf) + offs, len);",
          "353:  assert((size_t)CDF_SHORT_SEC_SIZE(h) == len);",
          "355:      ((const char *)sst->sst_tab) + CDF_SHORT_SEC_POS(h, id), len);",
          "",
          "[Added Lines]",
          "344:  size_t ss = CDF_SEC_SIZE(h);",
          "345:  size_t pos = CDF_SEC_POS(h, id);",
          "346:  assert(ss == len);",
          "347:  return cdf_read(info, (off_t)pos, ((char *)buf) + offs, len);",
          "354:  size_t ss = CDF_SHORT_SEC_SIZE(h);",
          "355:  size_t pos = CDF_SHORT_SEC_POS(h, id);",
          "356:  assert(ss == len);",
          "357:  if (sst->sst_len < (size_t)id) {",
          "358:   DPRINTF((\"bad sector id %d > %d\\n\", id, sst->sst_len));",
          "359:   return -1;",
          "360:  }",
          "362:      ((const char *)sst->sst_tab) + pos, len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "868:         inp[i].pi_str.s_buf));",
          "869:     l = 4 + (uint32_t)CDF_ROUND(l, sizeof(l));",
          "870:     o += l >> 2;",
          "871:     o4 = o * sizeof(uint32_t);",
          "872:    }",
          "873:    i--;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "878:     if (q + o >= e)",
          "879:      goto out;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c9f3105beec59e109a580824d96e0f05a303688d",
      "candidate_info": {
        "commit_hash": "c9f3105beec59e109a580824d96e0f05a303688d",
        "repo": "glensc/file",
        "commit_url": "https://github.com/glensc/file/commit/c9f3105beec59e109a580824d96e0f05a303688d",
        "files": [
          "src/cdf.c"
        ],
        "message": "Fix bounds checks again.",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.49 2012/02/20 20:04:37 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.50 2012/02/20 22:35:29 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "351: cdf_read_short_sector(const cdf_stream_t *sst, void *buf, size_t offs,",
          "352:     size_t len, const cdf_header_t *h, cdf_secid_t id)",
          "353: {",
          "355:  size_t pos = CDF_SHORT_SEC_POS(h, id);",
          "356:  assert(ss == len);",
          "358:   DPRINTF((\"Out of bounds read %\" SIZE_T_FORMAT \"u > %\"",
          "359:       SIZE_T_FORMAT \"u\\n\",",
          "361:   return -1;",
          "362:  }",
          "363:  (void)memcpy(((char *)buf) + offs,",
          "",
          "[Removed Lines]",
          "354:  size_t ss = CDF_SEC_SIZE(h);",
          "357:  if (pos > ss * sst->sst_len) {",
          "360:       pos, ss * sst->sst_len));",
          "",
          "[Added Lines]",
          "355:  size_t ss = CDF_SHORT_SEC_SIZE(h);",
          "358:  if (pos > CDF_SEC_SIZE(h) * sst->sst_len) {",
          "361:       pos, CDF_SEC_SIZE(h) * sst->sst_len));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "529:     const cdf_sat_t *ssat, const cdf_stream_t *sst,",
          "530:     cdf_secid_t sid, size_t len, cdf_stream_t *scn)",
          "531: {",
          "533:  scn->sst_len = cdf_count_chain(ssat, sid, CDF_SEC_SIZE(h));",
          "534:  scn->sst_dirlen = len;",
          "",
          "[Removed Lines]",
          "532:  size_t ss = CDF_SEC_SIZE(h), i, j;",
          "",
          "[Added Lines]",
          "533:  size_t ss = CDF_SHORT_SEC_SIZE(h), i, j;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "798:  if (cdf_check_stream_offset(sst, h, e, 0, __LINE__) == -1)",
          "799:   goto out;",
          "800:  for (i = 0; i < sh.sh_properties; i++) {",
          "801:   q = (const uint8_t *)(const void *)",
          "804:   if (q > e) {",
          "805:    DPRINTF((\"Ran of the end %p > %p\\n\", q, e));",
          "806:    goto out;",
          "807:   }",
          "808:   inp[i].pi_id = CDF_GETUINT32(p, i << 1);",
          "809:   inp[i].pi_type = CDF_GETUINT32(q, 0);",
          "813:   if (inp[i].pi_type & CDF_VECTOR) {",
          "814:    nelements = CDF_GETUINT32(q, 1);",
          "815:    o = 2;",
          "",
          "[Removed Lines]",
          "802:       ((const char *)(const void *)p +",
          "803:       CDF_GETUINT32(p, (i << 1) + 1)) - 2 * sizeof(uint32_t);",
          "810:   DPRINTF((\"%\" SIZE_T_FORMAT \"u) id=%x type=%x offs=0x%tx,0x%x\\n\", i,",
          "811:       inp[i].pi_id, inp[i].pi_type, q - p,",
          "812:       CDF_GETUINT32(p, (i << 1) + 1)));",
          "",
          "[Added Lines]",
          "802:   size_t ofs = CDF_GETUINT32(p, (i << 1) + 1);",
          "804:       ((const char *)(const void *)p + ofs",
          "805:       - 2 * sizeof(uint32_t));",
          "812:   DPRINTF((\"%\" SIZE_T_FORMAT \"u) id=%x type=%x offs=0x%tx,0x%x\\n\",",
          "813:       i, inp[i].pi_id, inp[i].pi_type, q - p, offs));",
          "",
          "---------------"
        ]
      }
    }
  ]
}