{
  "cve_id": "CVE-2018-7331",
  "cve_desc": "In Wireshark 2.4.0 to 2.4.4 and 2.2.0 to 2.2.12, epan/dissectors/packet-ber.c had an infinite loop that was addressed by validating a length.",
  "repo": "wireshark/wireshark",
  "patch_hash": "2b74b5c4c8836f413c675d8f7f80c8356b6b1722",
  "patch_info": {
    "commit_hash": "2b74b5c4c8836f413c675d8f7f80c8356b6b1722",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/2b74b5c4c8836f413c675d8f7f80c8356b6b1722",
    "files": [
      "epan/dissectors/packet-ber.c"
    ],
    "message": "BER: Add a length check.\n\nAdd a common large length reporting function. Add a length check to\ndissect_ber_set.\n\nBug: 14444.\nChange-Id: I6093b5342439cd0ee08f060b8d74b3ae54b3b8f8\nReviewed-on: https://code.wireshark.org/review/25931\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "before_after_code_files": [
      "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c": [
      "File: epan/dissectors/packet-ber.c -> epan/dissectors/packet-ber.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "704:     return ti;",
      "705: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "710: static void",
      "711: ber_add_large_length_error(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb,",
      "712:                          const gint offset, const guint32 length)",
      "713: {",
      "714:     proto_item *cause;",
      "716:     cause = proto_tree_add_string_format_value(",
      "717:         tree, hf_ber_error, tvb, offset, length, \"illegal_length\",",
      "718:         \"length %u longer than tvb_reported_length_remaining: %d\",",
      "719:         length,",
      "720:         tvb_reported_length_remaining(tvb, offset));",
      "721:     expert_add_info(pinfo, cause, &ei_ber_error_length);",
      "722: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "842:             offset = dissect_ber_identifier(pinfo, tree, tvb, start_offset, &ber_class, &pc, &tag);",
      "843:             offset = dissect_ber_length(pinfo, tree, tvb, offset, &len, NULL);",
      "844:         }",
      "851:         return tvb_reported_length(tvb);",
      "852:     }",
      "",
      "[Removed Lines]",
      "845:         cause = proto_tree_add_string_format_value(",
      "846:             tree, hf_ber_error, tvb, offset, len, \"illegal_length\",",
      "847:             \"length:%u longer than tvb_reported_length_remaining:%d\",",
      "848:             len,",
      "849:             tvb_reported_length_remaining(tvb, offset));",
      "850:         expert_add_info(pinfo, cause, &ei_ber_error_length);",
      "",
      "[Added Lines]",
      "862:         ber_add_large_length_error(pinfo, tree, tvb, offset, len);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1598:             return end_offset;",
      "1599:         }",
      "",
      "[Removed Lines]",
      "1592:             cause = proto_tree_add_string_format_value(",
      "1593:                 tree, hf_ber_error, tvb, offset, len, \"illegal_length\",",
      "1594:                 \"length:%u longer than tvb_reported_length_remaining:%d\",",
      "1595:                 len,",
      "1596:                 len_remain);",
      "1597:             expert_add_info(actx->pinfo, cause, &ei_ber_error_length);",
      "",
      "[Added Lines]",
      "1604:             ber_add_large_length_error(actx->pinfo, tree, tvb, offset, len);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2053:         len_remain = (guint32)tvb_reported_length_remaining(tvb, offset);",
      "2054:         if (len_remain < val_length) {",
      "2062:             return end_offset;",
      "2063:         }",
      "2064:     }",
      "",
      "[Removed Lines]",
      "2056:             cause = proto_tree_add_string_format_value(",
      "2057:                 tree, hf_ber_error, tvb, offset, val_length, \"illegal_length\",",
      "2058:                 \"length:%u longer than tvb_reported_length_remaining:%d\",",
      "2059:                 val_length,",
      "2060:                 len_remain);",
      "2061:             expert_add_info(actx->pinfo, cause, &ei_ber_error_length);",
      "",
      "[Added Lines]",
      "2063:             ber_add_large_length_error(actx->pinfo, tree, tvb, offset, val_length);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2560:         offset  = get_ber_length(tvb, offset, &len, &ind_field);",
      "2561:         eoffset = offset + len;",
      "2570:         for (first_pass = TRUE, cset = set, set_idx = 0; cset->func || first_pass; cset++, set_idx++) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2565:         if (len > (guint32)(end_offset - offset) || len > (guint32) tvb_reported_length_remaining(tvb, offset)) {",
      "2566:             ber_add_large_length_error(actx->pinfo, tree, tvb, offset, len);",
      "2567:             return end_offset;",
      "2568:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9518aaa254243e4cc637287218aaa2bc3fd63e87",
      "candidate_info": {
        "commit_hash": "9518aaa254243e4cc637287218aaa2bc3fd63e87",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/9518aaa254243e4cc637287218aaa2bc3fd63e87",
        "files": [
          "epan/dissectors/packet-ber.c"
        ],
        "message": "Use proto_tree_add_expert{_format}() to report errors.\n\nDon't create fake string items.\n\nHave the item cover the part of the packet that has the issue, e.g. if\nthere's an unexpected identifier, or an invalid length, cover that\nrather than the value; that 1) shows where the problem is and 2) avoids\nthrowing an exception.\n\nClean up the error messages and expert info items while we're at it.\n\nChange-Id: If698db98158f7a5532a865be02f1028d92af262f\nReviewed-on: https://code.wireshark.org/review/28093\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 0a9e92d585a3b8a42aff8ad968710ea1d6a4e7ff)\nReviewed-on: https://code.wireshark.org/review/28094",
        "before_after_code_files": [
          "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c": [
          "File: epan/dissectors/packet-ber.c -> epan/dissectors/packet-ber.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105: static gint hf_ber_unknown_REAL = -1;",
          "106: static gint hf_ber_unknown_BITSTRING = -1;",
          "107: static gint hf_ber_unknown_ENUMERATED = -1;",
          "",
          "[Removed Lines]",
          "108: static gint hf_ber_error = -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118: static int hf_ber_seq_of_eoc = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: static gint hf_ber_extra_data = -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180: static expert_field ei_ber_invalid_format_utctime = EI_INIT;",
          "181: static expert_field ei_hf_field_not_integer_type = EI_INIT;",
          "182: static expert_field ei_ber_constr_bitstr = EI_INIT;",
          "184: static dissector_handle_t ber_handle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183: static expert_field ei_ber_real_not_primitive = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "201: static gboolean last_pc;",
          "202: static gint32   last_tag;",
          "203: static guint32  last_length;",
          "204: static gboolean last_ind;",
          "206: static const value_string ber_class_codes[] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205: static tvbuff_t *last_length_tvb;",
          "206: static int      last_length_offset;",
          "207: static int      last_length_len;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "629: {",
          "630:     gint8       tmp_cls;",
          "631:     gint32      tmp_tag;",
          "632:     guint32     tmp_len;",
          "633:     tvbuff_t   *next_tvb = tvb;",
          "636: #ifdef DEBUG_BER",
          "637: {",
          "",
          "[Removed Lines]",
          "634:     proto_item *cause;",
          "",
          "[Added Lines]",
          "636:     int         identifier_offset;",
          "637:     int         identifier_len;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "656:         return offset;",
          "657:     }",
          "659:     offset = dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &tmp_cls, NULL, &tmp_tag);",
          "660:     offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, &tmp_len, NULL);",
          "662:     if ((tmp_cls != tag_cls) || (tmp_tag != tag_tag)) {",
          "666:             val_to_str_const(tag_cls, ber_class_codes, \"Unknown\"),",
          "667:             tag_cls,",
          "668:             tag_tag,",
          "",
          "[Removed Lines]",
          "663:         cause = proto_tree_add_string_format_value(",
          "664:             tree, hf_ber_error, tvb, offset, tmp_len, \"wrong_tag\",",
          "665:             \"Wrong tag in tagged type - expected class:%s(%d) tag:%d (%s) but found class:%s(%d) tag:%d\",",
          "",
          "[Added Lines]",
          "664:     identifier_offset = offset;",
          "666:     identifier_len = offset - identifier_offset;",
          "670:         proto_tree_add_expert_format(",
          "671:             tree, actx->pinfo, &ei_ber_wrong_tag_in_tagged_type,",
          "672:             tvb, identifier_offset, identifier_len,",
          "673:             \"BER Error: Wrong tag in tagged type - expected class:%s(%d) tag:%d (%s) but found class:%s(%d) tag:%d\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "670:             val_to_str_const(tmp_cls, ber_class_codes, \"Unknown\"),",
          "671:             tmp_cls,",
          "672:             tmp_tag);",
          "674:     }",
          "676:     if (tag_impl) {",
          "",
          "[Removed Lines]",
          "673:         expert_add_info(actx->pinfo, cause, &ei_ber_wrong_tag_in_tagged_type);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "694: {",
          "695:     proto_item *ti;",
          "700:         name, length);",
          "704:     return ti;",
          "705: }",
          "",
          "[Removed Lines]",
          "697:     ti = proto_tree_add_string_format(",
          "698:         tree, hf_ber_error, tvb, start, length, \"illegal_length\",",
          "699:         \"%s: length of item (%d) is not valid\",",
          "701:     expert_add_info_format(",
          "702:         pinfo, ti, &ei_ber_error_length,",
          "703:         \"Length of item (%d) is not valid\", length);",
          "",
          "[Added Lines]",
          "704:     ti = proto_tree_add_expert_format(",
          "705:         tree, pinfo, &ei_ber_error_length, tvb, start, length,",
          "706:         \"BER Error: %s: length of item (%d) is not valid\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "710: static void",
          "711: ber_add_large_length_error(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb,",
          "713: {",
          "719:         length,",
          "720:         tvb_reported_length_remaining(tvb, offset));",
          "722: }",
          "",
          "[Removed Lines]",
          "712:                          const gint offset, const guint32 length)",
          "714:     proto_item *cause;",
          "716:     cause = proto_tree_add_string_format_value(",
          "717:         tree, hf_ber_error, tvb, offset, length, \"illegal_length\",",
          "718:         \"length %u longer than tvb_reported_length_remaining: %d\",",
          "721:     expert_add_info(pinfo, cause, &ei_ber_error_length);",
          "",
          "[Added Lines]",
          "716:                          int offset, int length, tvbuff_t *len_tvb,",
          "717:                          const gint len_offset, const guint32 len_length)",
          "719:     proto_tree_add_expert_format(",
          "720:         tree, pinfo, &ei_ber_error_length, len_tvb, len_offset, len_length,",
          "721:         \"BER Error: length %u longer than tvb_reported_length_remaining: %d\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "827:     gint8              ber_class;",
          "828:     gboolean           pc, ind;",
          "829:     gint32             tag;",
          "830:     guint32            len;",
          "831:     int                hdr_len;",
          "832:     proto_item        *item      = NULL;",
          "833:     proto_tree        *next_tree = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "832:     int                identifier_offset;",
          "833:     int                identifier_len;",
          "835:     int                len_offset;",
          "836:     int                len_len;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "835:     guint32            i;",
          "836:     gboolean           is_printable;",
          "837:     volatile gboolean  is_decoded_as;",
          "839:     asn1_ctx_t         asn1_ctx;",
          "841:     if (nest_level > BER_MAX_NESTING) {",
          "",
          "[Removed Lines]",
          "838:     proto_item        *pi, *cause;",
          "",
          "[Added Lines]",
          "844:     proto_item        *pi;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "847:     asn1_ctx_init(&asn1_ctx, ASN1_ENC_BER, TRUE, pinfo);",
          "849:     offset = get_ber_identifier(tvb, offset, &ber_class, &pc, &tag);",
          "850:     offset = get_ber_length(tvb, offset, &len, &ind);",
          "852:     if (len > (guint32)tvb_reported_length_remaining(tvb, offset)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "856:     len_offset = offset;",
          "858:     len_len = offset - len_offset;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "859:             offset = dissect_ber_identifier(pinfo, tree, tvb, start_offset, &ber_class, &pc, &tag);",
          "860:             offset = dissect_ber_length(pinfo, tree, tvb, offset, &len, NULL);",
          "861:         }",
          "863:         return tvb_reported_length(tvb);",
          "864:     }",
          "",
          "[Removed Lines]",
          "862:         ber_add_large_length_error(pinfo, tree, tvb, offset, len);",
          "",
          "[Added Lines]",
          "870:         ber_add_large_length_error(pinfo, tree, tvb, offset, len, tvb, len_offset, len_len);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "963:                 offset = dissect_ber_boolean(FALSE, &asn1_ctx, tree, tvb, start_offset, hf_ber_unknown_BOOLEAN, NULL);",
          "964:                 break;",
          "965:             default:",
          "966:                 offset = dissect_ber_identifier(pinfo, tree, tvb, start_offset, &ber_class, &pc, &tag);",
          "967:                 offset = dissect_ber_length(pinfo, tree, tvb, offset, &len, NULL);",
          "971:                     tag);",
          "973:                 offset += len;",
          "974:             }",
          "975:             break;",
          "",
          "[Removed Lines]",
          "968:                 cause = proto_tree_add_string_format_value(",
          "969:                     tree, hf_ber_error, tvb, offset, len, \"unknown_universal_tag\",",
          "970:                     \"can not handle universal tag:%d\",",
          "972:                 expert_add_info(pinfo, cause, &ei_ber_universal_tag_unknown);",
          "",
          "[Added Lines]",
          "974:                 identifier_offset = start_offset;",
          "976:                 identifier_len = offset - identifier_offset;",
          "978:                 proto_tree_add_expert_format(",
          "979:                     tree, pinfo, &ei_ber_universal_tag_unknown,",
          "980:                     tvb, identifier_offset, identifier_len,",
          "981:                     \"BER Error: can not handle universal tag:%d\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1157:         if (syntax == NULL) {",
          "1158:             item = proto_tree_add_expert_format(",
          "1159:                     tree, pinfo, &ei_ber_no_oid, next_tvb, 0, tvb_reported_length_remaining(tvb, offset),",
          "1161:         } else {",
          "1162:             item = proto_tree_add_expert_format(",
          "1163:                     tree, pinfo, &ei_ber_syntax_not_implemented, next_tvb, 0, tvb_reported_length_remaining(tvb, offset),",
          "",
          "[Removed Lines]",
          "1160:                     \"BER: No syntax supplied to call_ber_syntax_callback\");",
          "",
          "[Added Lines]",
          "1170:                     \"BER Error: No syntax supplied to call_ber_syntax_callback\");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1370: }",
          "1372: static void",
          "1374: {",
          "1375:     if (length)",
          "1377:     if (ind)",
          "1379: }",
          "",
          "[Removed Lines]",
          "1373: get_last_ber_length(guint32 *length, gboolean *ind)",
          "",
          "[Added Lines]",
          "1383: get_last_ber_length(guint32 *length, gboolean *ind, tvbuff_t **len_tvb, int *len_offset, int *len_len)",
          "1389:     if (len_tvb)",
          "1391:     if (len_offset)",
          "1393:     if (len_len)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1409:     last_length = tmp_length;",
          "1410:     last_ind = tmp_ind;",
          "1412:     return offset;",
          "1413: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1427:     last_length_tvb = tvb;",
          "1428:     last_length_offset = old_offset;",
          "1429:     last_length_len = offset - old_offset;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1531:     gint8       ber_class;",
          "1532:     gboolean    pc, ind;",
          "1533:     gint32      tag;",
          "1534:     guint32     len;",
          "1535:     guint       encoding;",
          "1536:     int         hoffset;",
          "1537:     int         end_offset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1553:     int         identifier_offset;",
          "1554:     int         identifier_len;",
          "1556:     tvbuff_t   *len_tvb;",
          "1557:     int         len_offset;",
          "1558:     int         len_len;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1562:     if (!implicit_tag) {",
          "1563:         hoffset = offset;",
          "1565:         offset = dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &ber_class, &pc, &tag);",
          "1566:         offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, &len, &ind);",
          "1567:         end_offset = offset+len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1589:         identifier_offset = offset;",
          "1591:         identifier_len = offset - identifier_offset;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1571:             if ( (ber_class != BER_CLASS_UNI)",
          "1572:               || ((tag < BER_UNI_TAG_NumericString) && (tag != BER_UNI_TAG_OCTETSTRING) && (tag != BER_UNI_TAG_UTF8String)) ) {",
          "1573:                 tvb_ensure_bytes_exist(tvb, hoffset, 2);",
          "1577:                     val_to_str_const(ber_class, ber_class_codes, \"Unknown\"),",
          "1578:                     ber_class,",
          "1579:                     pc ? ber_pc_codes_short.true_string : ber_pc_codes_short.false_string,",
          "1580:                     tag);",
          "1582:                 if (decode_unexpected) {",
          "1583:                     proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "1584:                     dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "1574:                 cause = proto_tree_add_string_format_value(",
          "1575:                     tree, hf_ber_error, tvb, offset, len, \"octetstring_expected\",",
          "1576:                     \"OctetString expected but class:%s(%d) %s tag:%d was unexpected\",",
          "1581:                 expert_add_info(actx->pinfo, cause, &ei_ber_expected_octet_string);",
          "",
          "[Added Lines]",
          "1600:                 cause = proto_tree_add_expert_format(",
          "1601:                     tree, actx->pinfo, &ei_ber_expected_octet_string,",
          "1602:                     tvb, identifier_offset, identifier_len,",
          "1603:                     \"BER Error: OctetString expected but class:%s(%d) %s tag:%d was unexpected\",",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1592:         get_last_ber_identifier(&ber_class, &pc, &tag);",
          "1595:         end_offset = offset+len;",
          "",
          "[Removed Lines]",
          "1593:         get_last_ber_length(&len, &ind);",
          "",
          "[Added Lines]",
          "1619:         get_last_ber_length(&len, &ind, &len_tvb, &len_offset, &len_len);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1610:             return end_offset;",
          "1611:         }",
          "",
          "[Removed Lines]",
          "1609:             ber_add_large_length_error(actx->pinfo, tree, tvb, offset, len);",
          "",
          "[Added Lines]",
          "1635:             ber_add_large_length_error(actx->pinfo, tree, tvb, offset, len, len_tvb, len_offset, len_len);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1779:     gint8       ber_class;",
          "1780:     gboolean    pc;",
          "1781:     gint32      tag;",
          "1782:     guint32     len;",
          "1786:     if (!implicit_tag) {",
          "1788:         offset = dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &ber_class, &pc, &tag);",
          "1789:         if (pc ||",
          "1790:             (!implicit_tag && ((ber_class != BER_CLASS_UNI) || (tag != BER_UNI_TAG_NULL)))) {",
          "1794:                 val_to_str_const(ber_class, ber_class_codes, \"Unknown\"),",
          "1795:                 ber_class,",
          "1796:                 pc ? ber_pc_codes_short.true_string : ber_pc_codes_short.false_string,",
          "1797:                 tag);",
          "1799:         }",
          "1802:         offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, &len, NULL);",
          "1803:         if (len) {",
          "1807:                 len);",
          "1812:             offset += len;",
          "1813:         }",
          "1814:     }",
          "",
          "[Removed Lines]",
          "1783:     int         offset_old;",
          "1784:     proto_item* cause;",
          "1787:         offset_old = offset;",
          "1791:             cause = proto_tree_add_string_format_value(",
          "1792:                 tree, hf_ber_error, tvb, offset_old, offset - offset_old, \"null_expected\",",
          "1793:                 \"NULL expected but class:%s(%d) %s tag:%d was unexpected\",",
          "1798:             expert_add_info(actx->pinfo, cause, &ei_ber_expected_null);",
          "1801:         offset_old = offset;",
          "1804:             proto_tree_add_string_format_value(",
          "1805:                 tree, hf_ber_error, tvb, offset_old, offset - offset_old, \"illegal_length\",",
          "1806:                 \"NULL expect zero length but Length=%d\",",
          "1808:             cause = proto_tree_add_string_format_value(",
          "1809:                 tree, hf_ber_error, tvb, offset, len, \"unexpected_data\",",
          "1810:                 \"unexpected data in NULL type\");",
          "1811:             expert_add_info(actx->pinfo, cause, &ei_ber_expected_null_zero_length);",
          "",
          "[Added Lines]",
          "1808:     int         identifier_offset;",
          "1809:     int         identifier_len;",
          "1811:     int         len_offset;",
          "1812:     int         len_len;",
          "1815:         identifier_offset = offset;",
          "1817:         identifier_len = offset - identifier_offset;",
          "1820:             proto_tree_add_expert_format(",
          "1821:                 tree, actx->pinfo, &ei_ber_expected_null,",
          "1822:                 tvb, identifier_offset, identifier_len,",
          "1823:                 \"BER Error: NULL expected but class:%s(%d) %s tag:%d was unexpected\",",
          "1830:         len_offset = offset;",
          "1832:         len_len = offset - len_offset;",
          "1834:             proto_tree_add_expert_format(",
          "1835:                 tree, actx->pinfo, &ei_ber_expected_null_zero_length,",
          "1836:                 tvb, len_offset, len_len,",
          "1837:                 \"BER Error: NULL type expects zero length data but Length=%d\",",
          "1839:             proto_tree_add_item(tree, hf_ber_extra_data, tvb, offset, len, ENC_NA);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1906:     if (hf_id >= 0) {",
          "1908:         if ((len < 1) || (len > 9) || ((len == 9) && (first != 0))) {",
          "1912:               len);",
          "1915:         } else {",
          "1916:             header_field_info* hfi;",
          "",
          "[Removed Lines]",
          "1909:           proto_item *pi = proto_tree_add_string_format_value(",
          "1910:               tree, hf_ber_error, tvb, offset-len, len, \"invalid length\",",
          "1911:               \"Can't handle integer length: %u\",",
          "1913:           expert_add_info_format(actx->pinfo, pi, &ei_ber_error_length,",
          "1914:               \"BER Error: Illegal integer length: %u\", len);",
          "",
          "[Added Lines]",
          "1937:           proto_tree_add_expert_format(",
          "1938:               tree, actx->pinfo, &ei_ber_error_length, tvb, offset-len, len,",
          "1939:               \"BER Error: Can't handle integer length: %u\",",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2046:     gboolean pc;",
          "2047:     gint32   tag;",
          "2048:     guint32  val_length = 0, len_remain, end_offset;",
          "2049:     double   val        = 0;",
          "2052:     if (!implicit_tag) {",
          "2053:         offset = dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &ber_class, &pc, &tag);",
          "",
          "[Removed Lines]",
          "2050:     proto_item *cause;",
          "",
          "[Added Lines]",
          "2075:     tvbuff_t *len_tvb;",
          "2076:     int      len_offset;",
          "2077:     int      len_len;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2057:     } else {",
          "2059:         get_last_ber_identifier(&ber_class, &pc, &tag);",
          "2062:         end_offset = offset + val_length;",
          "",
          "[Removed Lines]",
          "2060:         get_last_ber_length(&val_length, NULL);",
          "",
          "[Added Lines]",
          "2088:         get_last_ber_length(&val_length, NULL, &len_tvb, &len_offset, &len_len);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2065:         len_remain = (guint32)tvb_reported_length_remaining(tvb, offset);",
          "2066:         if (len_remain < val_length) {",
          "2069:             return end_offset;",
          "2070:         }",
          "2071:     }",
          "2073:     if(pc) {",
          "2079:     }",
          "2081:     val = asn1_get_real(tvb_get_ptr(tvb, offset, val_length), val_length);",
          "",
          "[Removed Lines]",
          "2068:             ber_add_large_length_error(actx->pinfo, tree, tvb, offset, val_length);",
          "2075:       cause = proto_tree_add_string_format_value(",
          "2076:           tree, hf_ber_error, tvb, offset - 2, 1, \"wrong_tag\",",
          "2077:           \"REAL class must be encoded as primitive\");",
          "2078:       expert_add_info(actx->pinfo, cause, &ei_ber_error_length);",
          "",
          "[Added Lines]",
          "2096:             ber_add_large_length_error(actx->pinfo, tree, tvb, offset, val_length, len_tvb, len_offset, len_len);",
          "2103:       proto_tree_add_expert(",
          "2104:           tree, actx->pinfo, &ei_ber_real_not_primitive, tvb, offset - 2, 1);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2094:     gint8       classx;",
          "2095:     gboolean    pcx, ind   = 0, ind_field, imp_tag = FALSE;",
          "2096:     gint32      tagx;",
          "2097:     guint32     lenx;",
          "2098:     proto_tree *tree       = parent_tree;",
          "2099:     proto_item *item       = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2123:     int         identifier_offset;",
          "2124:     int         identifier_len;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2140:     if (!implicit_tag) {",
          "2142:         offset = dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &classx, &pcx, &tagx);",
          "2143:         offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, &lenx, &ind);",
          "2144:         if (ind) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2170:         identifier_offset = offset;",
          "2172:         identifier_len = offset - identifier_offset;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2154:             if (!pcx",
          "2155:              || (!implicit_tag && ((classx != BER_CLASS_UNI) || (tagx != BER_UNI_TAG_SEQUENCE)))) {",
          "2156:                 tvb_ensure_bytes_exist(tvb, hoffset, 2);",
          "2160:                     val_to_str_const(classx, ber_class_codes, \"Unknown\"),",
          "2161:                     classx,",
          "2162:                     pcx ? ber_pc_codes_short.true_string : ber_pc_codes_short.false_string,",
          "2163:                     tagx);",
          "2165:                 if (decode_unexpected) {",
          "2166:                     proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "2167:                     dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "2157:                 cause = proto_tree_add_string_format_value(",
          "2158:                     tree, hf_ber_error, tvb, offset, lenx, \"sequence_expected\",",
          "2159:                     \"Sequence expected but class:%s(%d) %s tag:%d was unexpected\",",
          "2164:                 expert_add_info(actx->pinfo, cause, &ei_ber_expected_sequence);",
          "",
          "[Added Lines]",
          "2187:                 cause = proto_tree_add_expert_format(",
          "2188:                     tree, actx->pinfo, &ei_ber_expected_sequence,",
          "2189:                     tvb, identifier_offset, identifier_len,",
          "2190:                     \"BER Error: Sequence expected but class:%s(%d) %s tag:%d was unexpected\",",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2220:             offset = dissect_ber_identifier(actx->pinfo, tree, tvb, hoffset, NULL, NULL, NULL);",
          "2221:             offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, NULL, NULL);",
          "2226:             if (decode_unexpected) {",
          "2227:                 proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "2228:                 dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "2222:             cause = proto_tree_add_string_format_value(",
          "2223:                 tree, hf_ber_error, tvb, offset, len, \"unknown_field\",",
          "2224:                 \"This field lies beyond the end of the known sequence definition.\");",
          "2225:             expert_add_info(actx->pinfo, cause, &ei_ber_unknown_field_sequence);",
          "",
          "[Added Lines]",
          "2252:             cause = proto_tree_add_expert_format(",
          "2253:                 tree, actx->pinfo, &ei_ber_unknown_field_sequence,",
          "2254:                 tvb, hoffset, -1,",
          "2255:                 \"BER Error: This field lies beyond the end of the known sequence definition.\");",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2253:                     seq++;",
          "2254:                     goto ber_sequence_try_again;",
          "2255:                 }",
          "2256:                 offset = dissect_ber_identifier(actx->pinfo, tree, tvb, hoffset, NULL, NULL, NULL);",
          "2257:                 offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, NULL, NULL);",
          "2258:                 if (seq->ber_class == BER_CLASS_UNI) {",
          "2262:                         val_to_str_const(seq->ber_class, ber_class_codes, \"Unknown\"),",
          "2263:                         seq->ber_class,",
          "2264:                         seq->tag,",
          "",
          "[Removed Lines]",
          "2259:                     cause = proto_tree_add_string_format_value(",
          "2260:                         tree, hf_ber_error, tvb, offset, len, \"wrong_field\",",
          "2261:                         \"Wrong field in SEQUENCE  expected class:%s(%d) tag:%d (%s) but found class:%s(%d) tag:%d\",",
          "",
          "[Added Lines]",
          "2286:                 identifier_offset = hoffset;",
          "2288:                 identifier_len = offset - identifier_offset;",
          "2291:                     cause = proto_tree_add_expert_format(",
          "2292:                         tree, actx->pinfo, &ei_ber_sequence_field_wrong,",
          "2293:                         tvb, identifier_offset, identifier_len,",
          "2294:                         \"BER Error: Wrong field in SEQUENCE: expected class:%s(%d) tag:%d (%s) but found class:%s(%d) tag:%d\",",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2267:                         ber_class,",
          "2268:                         tag);",
          "2269:                 } else {",
          "2273:                         val_to_str_const(seq->ber_class, ber_class_codes, \"Unknown\"),",
          "2274:                         seq->ber_class,",
          "2275:                         seq->tag,",
          "",
          "[Removed Lines]",
          "2270:                     cause = proto_tree_add_string_format_value(",
          "2271:                         tree, hf_ber_error, tvb, offset, len, \"wrong_field\",",
          "2272:                         \"Wrong field in SEQUENCE  expected class:%s(%d) tag:%d but found class:%s(%d) tag:%d\",",
          "",
          "[Added Lines]",
          "2303:                     cause = proto_tree_add_expert_format(",
          "2304:                         tree, actx->pinfo, &ei_ber_sequence_field_wrong,",
          "2305:                         tvb, identifier_offset, identifier_len,",
          "2306:                         \"BER Error: Wrong field in SEQUENCE: expected class:%s(%d) tag:%d but found class:%s(%d) tag:%d\",",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2277:                         ber_class,",
          "2278:                         tag);",
          "2279:                 }",
          "2281:                 if (decode_unexpected) {",
          "2282:                     proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "2283:                     dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "2280:                 expert_add_info(actx->pinfo, cause, &ei_ber_sequence_field_wrong);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2298:                     goto ber_sequence_try_again;",
          "2299:                 }",
          "2301:                 offset = dissect_ber_identifier(actx->pinfo, tree, tvb, hoffset, NULL, NULL, NULL);",
          "2302:                 offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, NULL, NULL);",
          "2303:                 if ( seq->ber_class == BER_CLASS_UNI) {",
          "2307:                         val_to_str_const(seq->ber_class, ber_class_codes, \"Unknown\"),",
          "2308:                         seq->ber_class,",
          "2309:                         seq->tag,",
          "",
          "[Removed Lines]",
          "2304:                     cause = proto_tree_add_string_format_value(",
          "2305:                         tree, hf_ber_error, tvb, offset, len, \"wrong_field\",",
          "2306:                         \"Wrong field in SEQUENCE  expected class:%s(%d) tag:%d(%s) but found class:%s(%d) tag:%d\",",
          "",
          "[Added Lines]",
          "2334:                 identifier_offset = hoffset;",
          "2336:                 identifier_len = offset - identifier_offset;",
          "2339:                     cause = proto_tree_add_expert_format(",
          "2340:                         tree, actx->pinfo, &ei_ber_sequence_field_wrong,",
          "2341:                         tvb, identifier_offset, identifier_len,",
          "2342:                         \"BER Error: Wrong field in SEQUENCE: expected class:%s(%d) tag:%d(%s) but found class:%s(%d) tag:%d\",",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2311:                         val_to_str_const(ber_class, ber_class_codes, \"Unknown\"),",
          "2312:                         ber_class, tag);",
          "2313:                 } else {",
          "2317:                         val_to_str_const(seq->ber_class, ber_class_codes, \"Unknown\"),",
          "2318:                         seq->ber_class,",
          "2319:                         seq->tag,",
          "",
          "[Removed Lines]",
          "2314:                     cause = proto_tree_add_string_format_value(",
          "2315:                         tree, hf_ber_error, tvb, offset, len, \"wrong_field\",",
          "2316:                         \"Wrong field in SEQUENCE  expected class:%s(%d) tag:%d but found class:%s(%d) tag:%d\",",
          "",
          "[Added Lines]",
          "2350:                     cause = proto_tree_add_expert_format(",
          "2351:                         tree, actx->pinfo, &ei_ber_sequence_field_wrong,",
          "2352:                         tvb, identifier_offset, identifier_len,",
          "2353:                         \"BER Error: Wrong field in SEQUENCE: expected class:%s(%d) tag:%d but found class:%s(%d) tag:%d\",",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2321:                         ber_class,",
          "2322:                         tag);",
          "2323:                 }",
          "2325:                 if (decode_unexpected) {",
          "2326:                     proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "2327:                     dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "2324:                 expert_add_info(actx->pinfo, cause, &ei_ber_sequence_field_wrong);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2428:     if (offset != end_offset) {",
          "2429:         tvb_ensure_bytes_exist(tvb, offset-2, 2);",
          "2433:             offset - end_offset);",
          "2436:     }",
          "2437:     if (ind) {",
          "",
          "[Removed Lines]",
          "2430:         cause = proto_tree_add_string_format_value(",
          "2431:             tree, hf_ber_error, tvb, offset-2, 2, \"illegal_length\",",
          "2432:             \"Sequence ate %d too many bytes\",",
          "2434:         expert_add_info_format(actx->pinfo, cause, &ei_ber_error_length,",
          "2435:             \"BER Error: too many bytes in Sequence\");",
          "",
          "[Added Lines]",
          "2466:         proto_tree_add_expert_format(",
          "2467:             tree, actx->pinfo, &ei_ber_error_length, tvb, offset-2, 2,",
          "2468:             \"BER Error: SEQUENCE is %d too many bytes long\",",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2452:     gint8       classx;",
          "2453:     gboolean    pcx, ind = 0, ind_field, imp_tag = FALSE;",
          "2454:     gint32      tagx;",
          "2455:     guint32     lenx;",
          "2456:     proto_tree *tree     = parent_tree;",
          "2457:     proto_item *item     = NULL;",
          "2458:     proto_item *cause;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2489:     int         identifier_offset;",
          "2490:     int         identifier_len;",
          "2492:     int         len_offset;",
          "2493:     int         len_len;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2489:     if (!implicit_tag) {",
          "2490:         hoffset = offset;",
          "2492:         offset = dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &classx, &pcx, &tagx);",
          "2493:         offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, &lenx, &ind);",
          "2494:         if (ind) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2530:         identifier_offset = offset;",
          "2532:         identifier_len = offset - identifier_offset;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2505:              || (!implicit_tag && ((classx != BER_CLASS_UNI)",
          "2506:                                 || (tagx != BER_UNI_TAG_SET)))) {",
          "2507:                 tvb_ensure_bytes_exist(tvb, hoffset, 2);",
          "2511:                     val_to_str_const(classx, ber_class_codes, \"Unknown\"),",
          "2512:                     classx,",
          "2513:                     pcx ? ber_pc_codes_short.true_string : ber_pc_codes_short.false_string,",
          "2514:                     tagx);",
          "2516:                 if (decode_unexpected) {",
          "2517:                     proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "2518:                     dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "2508:                 cause = proto_tree_add_string_format_value(",
          "2509:                     tree, hf_ber_error, tvb, offset, lenx, \"set_expected\",",
          "2510:                     \"SET expected but class:%s(%d) %s tag:%d was found\",",
          "2515:                 expert_add_info(actx->pinfo, cause, &ei_ber_expected_set);",
          "",
          "[Added Lines]",
          "2548:                 cause = proto_tree_add_expert_format(",
          "2549:                     tree, actx->pinfo, &ei_ber_expected_set,",
          "2550:                     tvb, identifier_offset, identifier_len,",
          "2551:                     \"BER Error: SET expected but class:%s(%d) %s tag:%d was found\",",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2525:         lenx = tvb_reported_length_remaining(tvb, offset);",
          "2526:         end_offset = offset+lenx;",
          "2527:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2567:         identifier_offset = 0;",
          "2568:         identifier_len = 0;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2564:         hoffset = offset;",
          "2566:         offset  = get_ber_identifier(tvb, offset, &ber_class, &pc, &tag);",
          "2567:         offset  = get_ber_length(tvb, offset, &len, &ind_field);",
          "2568:         eoffset = offset + len;",
          "2570:         if (len > (guint32)(end_offset - offset) || len > (guint32) tvb_reported_length_remaining(tvb, offset)) {",
          "2572:             return end_offset;",
          "2573:         }",
          "",
          "[Removed Lines]",
          "2571:             ber_add_large_length_error(actx->pinfo, tree, tvb, offset, len);",
          "",
          "[Added Lines]",
          "2608:         identifier_offset = offset;",
          "2610:         identifier_len = offset - identifier_offset;",
          "2611:         len_offset = offset;",
          "2613:         len_len = offset - len_offset;",
          "2617:             ber_add_large_length_error(actx->pinfo, tree, tvb, offset, len, tvb, len_offset, len_len);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2670:         if (!cset->func) {",
          "2675:                 val_to_str_const(ber_class, ber_class_codes, \"Unknown\"),",
          "2676:                 ber_class,",
          "2677:                 tag);",
          "2679:             if (decode_unexpected) {",
          "2680:                 proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "2681:                 dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "2672:             cause = proto_tree_add_string_format_value(",
          "2673:                 tree, hf_ber_error, tvb, offset, len, \"unknown_field\",",
          "2674:                 \"Unknown field in SET class:%s(%d) tag:%d\",",
          "2678:             expert_add_info(actx->pinfo, cause, &ei_ber_unknown_field_set);",
          "",
          "[Added Lines]",
          "2718:             cause = proto_tree_add_expert_format(",
          "2719:                 tree, actx->pinfo, &ei_ber_unknown_field_set,",
          "2720:                 tvb, identifier_offset, identifier_len,",
          "2721:                 \"BER Error: Unknown field in SET class:%s(%d) tag:%d\",",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2691:         for (set_idx = 0;  (cset = &set[set_idx])->func && (set_idx < MAX_SET_ELEMENTS); set_idx++) {",
          "2692:             if (mandatory_fields & (1 << set_idx)) {",
          "2697:                     val_to_str_const(cset->ber_class, ber_class_codes, \"Unknown\"),",
          "2698:                     cset->ber_class,",
          "2699:                     cset->tag);",
          "2702:             }",
          "2704:         }",
          "",
          "[Removed Lines]",
          "2694:                 cause = proto_tree_add_string_format_value(",
          "2695:                     tree, hf_ber_error, tvb, offset, lenx, \"missing_field\",",
          "2696:                     \"Missing field in SET class:%s(%d) tag:%d expected\",",
          "2700:                 expert_add_info(actx->pinfo, cause, &ei_ber_missing_field_set);",
          "",
          "[Added Lines]",
          "2740:                 proto_tree_add_expert_format(",
          "2741:                     tree, actx->pinfo, &ei_ber_missing_field_set,",
          "2742:                     tvb, identifier_offset, identifier_len,",
          "2743:                     \"BER Error: Missing field in SET class:%s(%d) tag:%d expected\",",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2708:     if (offset != end_offset) {",
          "2709:         tvb_ensure_bytes_exist(tvb, offset-2, 2);",
          "2713:             offset - end_offset);",
          "2716:     }",
          "2718:     if (ind) {",
          "",
          "[Removed Lines]",
          "2710:         cause = proto_tree_add_string_format_value(",
          "2711:             tree, hf_ber_error, tvb, offset-2, 2, \"illegal_length\",",
          "2712:             \"SET ate %d too many bytes\",",
          "2714:         expert_add_info_format(actx->pinfo, cause, &ei_ber_error_length,",
          "2715:             \"BER Error: too many bytes in SET\");",
          "",
          "[Added Lines]",
          "2755:         proto_tree_add_expert_format(",
          "2756:             tree, actx->pinfo, &ei_ber_error_length, tvb, offset-2, 2,",
          "2757:             \"BER Error: SET is %d too many bytes long\",",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2738:     gint8       ber_class;",
          "2739:     gboolean    pc, ind, imp_tag = FALSE;",
          "2740:     gint32      tag;",
          "2741:     guint32     len;",
          "2742:     proto_tree *tree = parent_tree;",
          "2743:     proto_item *item = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2784:     int         identifier_offset;",
          "2785:     int         identifier_len;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2773:     }",
          "2775:     if (tvb_reported_length_remaining(tvb, offset) == 0) {",
          "2780:         return offset;",
          "2781:     }",
          "2784:     offset = get_ber_identifier(tvb, offset, &ber_class, &pc, &tag);",
          "2785:     offset = get_ber_length(tvb, offset, &len, &ind);",
          "2786:     end_offset = offset + len ;",
          "",
          "[Removed Lines]",
          "2776:         item = proto_tree_add_string_format_value(",
          "2777:             parent_tree, hf_ber_error, tvb, offset, 0, \"empty_choice\",",
          "2778:             \"Empty choice was found\");",
          "2779:         expert_add_info(actx->pinfo, item, &ei_ber_empty_choice);",
          "",
          "[Added Lines]",
          "2821:         proto_tree_add_expert(",
          "2822:             parent_tree, actx->pinfo, &ei_ber_empty_choice, tvb, offset, 0);",
          "2827:     identifier_offset = offset;",
          "2829:     identifier_len = offset - identifier_offset;",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2798:             break;",
          "2799:         default:",
          "2800:             proto_tree_add_expert_format(",
          "2803:                 actx->pinfo->num, offset, hfinfo->abbrev);",
          "2804:             return end_offset;",
          "2805:         }",
          "",
          "[Removed Lines]",
          "2801:                 tree, actx->pinfo, &ei_hf_field_not_integer_type, tvb, offset, len,",
          "2802:                 \"dissect_ber_choice(): frame:%u offset:%d Was passed an HF field that was not integer type : %s\",",
          "",
          "[Added Lines]",
          "2846:                 tree, actx->pinfo, &ei_hf_field_not_integer_type,",
          "2847:                 tvb, identifier_offset, identifier_len,",
          "2848:                 \"BER Error: dissect_ber_choice(): frame:%u offset:%d Was passed an HF field that was not integer type : %s\",",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2955:     return end_offset;",
          "2956: #endif",
          "",
          "[Removed Lines]",
          "2951:     item = proto_tree_add_string_format_value(",
          "2952:         tree, hf_ber_error, tvb, offset, len, \"missing_choice_field\",",
          "2953:         \"This choice field was not found.\");",
          "2954:     expert_add_info(actx->pinfo, item, &ei_ber_choice_not_found);",
          "",
          "[Added Lines]",
          "2997:     proto_tree_add_expert(",
          "2998:         tree, actx->pinfo, &ei_ber_choice_not_found, tvb, offset, len);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2967:     gint8       ber_class;",
          "2968:     gboolean    pc;",
          "2969:     gint32      tag;",
          "2970:     guint32     len;",
          "2971:     int         end_offset;",
          "2972:     int         hoffset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3014:     int         identifier_offset;",
          "3015:     int         identifier_len;",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2985:     hoffset = offset;",
          "2987:     offset = dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &ber_class, &pc, &tag);",
          "2988:     offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, &len, NULL);",
          "2989:     end_offset = offset + len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3033:     identifier_offset = offset;",
          "3035:     identifier_len = offset - identifier_offset;",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2992:     if ( (ber_class != BER_CLASS_UNI)",
          "2993:       || (tag != BER_UNI_TAG_GENSTR) ) {",
          "2994:         tvb_ensure_bytes_exist(tvb, hoffset, 2);",
          "2998:             val_to_str_const(ber_class, ber_class_codes, \"Unknown\"),",
          "2999:             ber_class, pc ? ber_pc_codes_short.true_string : ber_pc_codes_short.false_string,",
          "3000:             tag);",
          "3003:         if (decode_unexpected) {",
          "3004:             proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3005:             dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "2995:         cause = proto_tree_add_string_format_value(",
          "2996:             tree, hf_ber_error, tvb, offset, len, \"generalstring_expected\",",
          "2997:             \"GeneralString expected but class:%s(%d) %s tag:%d was unexpected\",",
          "3001:         expert_add_info(actx->pinfo, cause, &ei_ber_expected_general_string,",
          "3002:             \"BER Error: GeneralString expected\");",
          "",
          "[Added Lines]",
          "3043:         cause = proto_tree_add_expert_format(",
          "3044:             tree, actx->pinfo, &ei_ber_expected_general_string,",
          "3045:             tvb, identifier_offset, identifier_len,",
          "3046:             \"BER Error: GeneralString expected but class:%s(%d) %s tag:%d was unexpected\",",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "3027:     gint8       ber_class;",
          "3028:     gboolean    pc;",
          "3029:     gint32      tag;",
          "3030:     guint32     len;",
          "3031:     int         eoffset;",
          "3032:     int         hoffset = offset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3077:     int         identifier_offset;",
          "3078:     int         identifier_len;",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "3051: #endif",
          "3053:     if (!implicit_tag) {",
          "3054:         offset  = get_ber_identifier(tvb, offset, &ber_class, &pc, &tag);",
          "3055:         offset  = get_ber_length(tvb, offset, &len, NULL);",
          "3056:         eoffset = offset + len;",
          "3059:         if ( (ber_class != BER_CLASS_UNI)",
          "3060:           || (tag != type) ) {",
          "3065:                 type,",
          "3066:                 val_to_str_const(ber_class, ber_class_codes, \"Unknown\"),",
          "3067:                 ber_class, pc ? ber_pc_codes_short.true_string : ber_pc_codes_short.false_string,",
          "3068:                 tag);",
          "3070:             if (decode_unexpected) {",
          "3071:                 proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3072:                 dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "3061:                 tvb_ensure_bytes_exist(tvb, hoffset, 2);",
          "3062:             cause = proto_tree_add_string_format_value(",
          "3063:                 tree, hf_ber_error, tvb, offset, len, \"string_expected\",",
          "3064:                 \"String with tag=%d expected but class:%s(%d) %s tag:%d was unexpected\",",
          "3069:             expert_add_info(actx->pinfo, cause, &ei_ber_expected_string);",
          "",
          "[Added Lines]",
          "3103:      identifier_offset = offset;",
          "3105:         identifier_len = offset - identifier_offset;",
          "3112:             tvb_ensure_bytes_exist(tvb, hoffset, 2);",
          "3113:             cause = proto_tree_add_expert_format(",
          "3114:                 tree, actx->pinfo, &ei_ber_expected_string,",
          "3115:                 tvb, identifier_offset, identifier_len,",
          "3116:                 \"BER Error: String with tag=%d expected but class:%s(%d) %s tag:%d was unexpected\",",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "3121:     gint8        ber_class;",
          "3122:     gboolean     pc;",
          "3123:     gint32       tag;",
          "3124:     guint32      len;",
          "3125:     int          eoffset;",
          "3126:     int          hoffset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3175:     int          identifier_offset;",
          "3176:     int          identifier_len;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "3149:     if (!implicit_tag) {",
          "3150:         hoffset = offset;",
          "3152:         offset = dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &ber_class, &pc, &tag);",
          "3153:         offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, &len, NULL);",
          "3154:         eoffset = offset + len;",
          "3155:         if ( (ber_class != BER_CLASS_UNI)",
          "3156:           || (is_absolute && tag != BER_UNI_TAG_OID)",
          "3157:           || (!is_absolute && tag != BER_UNI_TAG_RELATIVE_OID) ) {",
          "3158:                 tvb_ensure_bytes_exist(tvb, hoffset, 2);",
          "3162:                 val_to_str_const(ber_class, ber_class_codes, \"Unknown\"),",
          "3163:                 ber_class,",
          "3164:                 pc ? ber_pc_codes_short.true_string : ber_pc_codes_short.false_string,",
          "3165:                 tag);",
          "3167:             if (decode_unexpected) {",
          "3168:                 proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3169:                 dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "3159:             cause = proto_tree_add_string_format_value(",
          "3160:                 tree, hf_ber_error, tvb, offset, len, \"oid_expected\",",
          "3161:                 \"Object Identifier expected but class:%s(%d) %s tag:%d was unexpected\",",
          "3166:             expert_add_info(actx->pinfo, cause, &ei_ber_expected_object_identifier);",
          "",
          "[Added Lines]",
          "3205:         identifier_offset = offset;",
          "3207:         identifier_len = offset - identifier_offset;",
          "3214:             cause = proto_tree_add_expert_format(",
          "3215:                 tree, actx->pinfo, &ei_ber_expected_object_identifier,",
          "3216:                 tvb, identifier_offset, identifier_len,",
          "3217:                 \"BER Error: Object Identifier expected but class:%s(%d) %s tag:%d was unexpected\",",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "3255:     gint8              classx;",
          "3256:     gboolean           pcx, ind = FALSE, ind_field;",
          "3257:     gint32             tagx;",
          "3258:     guint32            lenx;",
          "3260:     proto_tree        *tree     = parent_tree;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3313:     int                identifier_offset;",
          "3314:     int                identifier_len;",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "3286:     if (!implicit_tag) {",
          "3287:         hoffsetx = offset;",
          "3289:         offset = dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &classx, &pcx, &tagx);",
          "3290:         offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, &lenx, &ind);",
          "3291:         end_offset = offset + lenx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3346:         identifier_offset = offset;",
          "3348:         identifier_len = offset - identifier_offset;",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "3296:              || (!implicit_tag && ((classx != BER_CLASS_UNI)",
          "3297:                                 || (tagx != type)))) {",
          "3298:                 tvb_ensure_bytes_exist(tvb, hoffsetx, 2);",
          "3304:                     val_to_str_const(classx, ber_class_codes, \"Unknown\"),",
          "3305:                     classx, pcx ? ber_pc_codes_short.true_string : ber_pc_codes_short.false_string,",
          "3306:                     tagx);",
          "3316:                 if (decode_unexpected) {",
          "3317:                     proto_tree *unknown_tree = proto_item_add_subtree(causex, ett_ber_unknown);",
          "3318:                     dissect_unknown_ber(actx->pinfo, tvb, hoffsetx, unknown_tree);",
          "",
          "[Removed Lines]",
          "3299:                 causex = proto_tree_add_string_format_value(",
          "3300:                     tree, hf_ber_error, tvb, offset, lenx,",
          "3301:                     (type == BER_UNI_TAG_SEQUENCE) ? \"set_of_expected\" : \"sequence_of_expected\",",
          "3302:                     \"%s Of expected but class:%s(%d) %s tag:%d was unexpected\",",
          "3303:                     (type == BER_UNI_TAG_SEQUENCE) ? \"Set\" : \"Sequence\",",
          "3307:                 if (type == BER_UNI_TAG_SEQUENCE) {",
          "3308:                     expert_add_info_format(",
          "3309:                         actx->pinfo, causex, &ei_ber_expected_set,",
          "3310:                         \"BER Error: Set Of expected\");",
          "3311:                 } else {",
          "3312:                     expert_add_info_format(",
          "3313:                         actx->pinfo, causex, &ei_ber_expected_sequence,",
          "3314:                         \"BER Error: Sequence Of expected\");",
          "3315:                 }",
          "",
          "[Added Lines]",
          "3358:                 causex = proto_tree_add_expert_format(",
          "3359:                     tree, actx->pinfo,",
          "3360:                     (type == BER_UNI_TAG_SEQUENCE) ? &ei_ber_expected_set : &ei_ber_expected_sequence,",
          "3361:                     tvb, identifier_offset, identifier_len,",
          "3362:                     \"BER Error: %s OF expected but class:%s(%d) %s tag:%d was unexpected\",",
          "3363:                     (type == BER_UNI_TAG_SEQUENCE) ? \"SET\" : \"SEQUENCE\",",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "3411:             }",
          "3414:         offset  = get_ber_identifier(tvb, offset, &ber_class, &pc, &tag);",
          "3415:         offset  = get_ber_length(tvb, offset, &len, &ind_field);",
          "3416:         eoffset = offset + len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3465:         identifier_offset = offset;",
          "3467:         identifier_len = offset - identifier_offset;",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "3431:            || (seq->tag != tag) ) {",
          "3432:             if (!(seq->flags & BER_FLAGS_NOTCHKTAG)) {",
          "3433:                 if ( seq->ber_class == BER_CLASS_UNI) {",
          "3437:                         val_to_str_const(seq->ber_class, ber_class_codes, \"Unknown\"),",
          "3438:                         seq->ber_class,",
          "3439:                         seq->tag,",
          "",
          "[Removed Lines]",
          "3434:                     cause = proto_tree_add_string_format_value(",
          "3435:                         tree, hf_ber_error, tvb, offset, len, \"wrong_field\",",
          "3436:                         \"Wrong field in SQ OF  expected class:%s(%d) tag:%d(%s) but found class:%s(%d) tag:%d\",",
          "",
          "[Added Lines]",
          "3487:                     cause = proto_tree_add_expert_format(",
          "3488:                         tree, actx->pinfo, &ei_ber_sequence_field_wrong,",
          "3489:                         tvb, identifier_offset, identifier_len,",
          "3490:                         \"BER Error: Wrong field in SEQUENCE OF: expected class:%s(%d) tag:%d(%s) but found class:%s(%d) tag:%d\",",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "3441:                         val_to_str_const(ber_class, ber_class_codes, \"Unknown\"),",
          "3442:                         ber_class, tag);",
          "3443:                 } else {",
          "3447:                         val_to_str_const(seq->ber_class, ber_class_codes, \"Unknown\"),",
          "3448:                         seq->ber_class,",
          "3449:                         seq->tag,",
          "",
          "[Removed Lines]",
          "3444:                     cause = proto_tree_add_string_format_value(",
          "3445:                         tree, hf_ber_error, tvb, offset, len, \"wrong_field\",",
          "3446:                         \"Wrong field in SQ OF  expected class:%s(%d) tag:%d but found class:%s(%d) tag:%d\",",
          "",
          "[Added Lines]",
          "3498:                     cause = proto_tree_add_expert_format(",
          "3499:                         tree, actx->pinfo, &ei_ber_sequence_field_wrong,",
          "3500:                         tvb, identifier_offset, identifier_len,",
          "3501:                         \"BER Error: Wrong field in SEQUENCE OF: expected class:%s(%d) tag:%d but found class:%s(%d) tag:%d\",",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "3451:                         ber_class,",
          "3452:                         tag);",
          "3453:                 }",
          "3457:                 if (decode_unexpected) {",
          "3458:                     proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3459:                     dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "3454:                 expert_add_info_format(",
          "3455:                     actx->pinfo, cause, &ei_ber_sequence_field_wrong,",
          "3456:                     \"BER Error: Wrong field in SEQUENCE OF\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "3496:     if (offset != end_offset) {",
          "3497:         tvb_ensure_bytes_exist(tvb, offset-2, 2);",
          "3502:             offset - end_offset);",
          "3506:     }",
          "3508:     return end_offset;",
          "",
          "[Removed Lines]",
          "3498:         causex = proto_tree_add_string_format_value(",
          "3499:             tree, hf_ber_error, tvb, offset-2, 2, \"illegal_length\",",
          "3500:             \"%s Of ate %d too many bytes\",",
          "3501:             (type == BER_UNI_TAG_SEQUENCE) ? \"Set\" : \"Sequence\",",
          "3503:         expert_add_info_format(actx->pinfo, causex, &ei_ber_error_length,",
          "3504:             \"BER Error:too many byte in %s\",",
          "3505:             (type == BER_UNI_TAG_SEQUENCE) ? \"Set\" : \"Sequence\");",
          "",
          "[Added Lines]",
          "3550:         proto_tree_add_expert_format(",
          "3551:             tree, actx->pinfo, &ei_ber_error_length, tvb, offset-2, 2,",
          "3552:             \"BER Error: %s OF contained %d too many bytes\",",
          "3553:             (type == BER_UNI_TAG_SEQUENCE) ? \"SET\" : \"SEQUENCE\",",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "3543:     gint8         ber_class;",
          "3544:     gboolean      pc;",
          "3545:     gint32        tag;",
          "3546:     guint32       len;",
          "3547:     int           end_offset;",
          "3548:     int           hoffset;",
          "3549:     proto_item   *cause;",
          "3551:     if (!implicit_tag) {",
          "3552:         hoffset = offset;",
          "3553:         offset = dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &ber_class, &pc, &tag);",
          "3554:         offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, &len, NULL);",
          "3555:         end_offset = offset+len;",
          "3558:         if ( (ber_class != BER_CLASS_UNI)",
          "3559:           || (tag != BER_UNI_TAG_GeneralizedTime)) {",
          "3560:             tvb_ensure_bytes_exist(tvb, hoffset, 2);",
          "3564:                 val_to_str_const(ber_class, ber_class_codes, \"Unknown\"),",
          "3565:                 ber_class,",
          "3566:                 pc ? ber_pc_codes_short.true_string : ber_pc_codes_short.false_string,",
          "3567:                 tag);",
          "3569:             if (decode_unexpected) {",
          "3570:                 proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3571:                 dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "3561:             cause = proto_tree_add_string_format_value(",
          "3562:                 tree, hf_ber_error, tvb, offset, len, \"generalized_time_expected\",",
          "3563:                 \"GeneralizedTime expected but class:%s(%d) %s tag:%d was unexpected\",",
          "3568:             expert_add_info(actx->pinfo, cause, &ei_ber_expected_generalized_time);",
          "",
          "[Added Lines]",
          "3595:     int           identifier_offset;",
          "3596:     int           identifier_len;",
          "3598:     int           len_offset;",
          "3599:     int           len_len;",
          "3606:         identifier_offset = offset;",
          "3608:         identifier_len = offset - identifier_offset;",
          "3609:         len_offset = offset;",
          "3611:         len_len = offset - len_offset;",
          "3618:             cause = proto_tree_add_expert_format(",
          "3619:                 tree, actx->pinfo, &ei_ber_expected_generalized_time,",
          "3620:                 tvb, identifier_offset, identifier_len,",
          "3621:                 \"BER Error: GeneralizedTime expected but class:%s(%d) %s tag:%d was unexpected\",",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "3574:         }",
          "3575:     } else {",
          "3576:         len = tvb_reported_length_remaining(tvb, offset);",
          "3577:         end_offset = offset+len;",
          "3578:     }",
          "3580:     if ((len < 14) || (len > 23)) {",
          "3584:             len);",
          "3587:         if (decode_unexpected) {",
          "3588:             proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3589:             dissect_unknown_ber(actx->pinfo, tvb, offset, unknown_tree);",
          "",
          "[Removed Lines]",
          "3581:         cause = proto_tree_add_string_format_value(",
          "3582:             tree, hf_ber_error, tvb, offset, len, \"illegal_length\",",
          "3583:             \"GeneralizedTime invalid length: %u\",",
          "3585:         expert_add_info_format(actx->pinfo, cause, &ei_ber_error_length,",
          "3586:             \"BER Error: GeneralizedTime invalid length\");",
          "",
          "[Added Lines]",
          "3634:         len_offset = 0;",
          "3635:         len_len = 0;",
          "3640:         cause = proto_tree_add_expert_format(",
          "3641:             tree, actx->pinfo, &ei_ber_error_length,",
          "3642:             tvb, len_offset, len_len,",
          "3643:             \"BER Error: GeneralizedTime invalid length: %u\",",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "3695:     return offset;",
          "3697: invalid:",
          "3701:         tmpstr);",
          "3703:     if (decode_unexpected) {",
          "3704:         proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3705:         dissect_unknown_ber(actx->pinfo, tvb, offset, unknown_tree);",
          "",
          "[Removed Lines]",
          "3698:     cause = proto_tree_add_string_format_value(",
          "3699:         tree, hf_ber_error, tvb, offset, len, \"invalid_generalized_time\",",
          "3700:         \"GeneralizedTime invalid format: %s\",",
          "3702:     expert_add_info(actx->pinfo, cause, &ei_ber_invalid_format_generalized_time);",
          "",
          "[Added Lines]",
          "3756:     cause = proto_tree_add_expert_format(",
          "3757:         tree, actx->pinfo, &ei_ber_invalid_format_generalized_time,",
          "3758:         tvb, offset, len,",
          "3759:         \"BER Error: GeneralizedTime invalid format: %s\",",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "3717:     gint8         ber_class;",
          "3718:     gboolean      pc;",
          "3719:     gint32        tag;",
          "3720:     guint32       len, i, n;",
          "3721:     int           hoffset;",
          "3722:     proto_item   *cause;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3778:     int           identifier_offset;",
          "3779:     int           identifier_len;",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "3726:     if (!implicit_tag) {",
          "3727:         hoffset = offset;",
          "3728:         offset  = dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &ber_class, &pc, &tag);",
          "3729:         offset  = dissect_ber_length(actx->pinfo, tree, tvb, offset, &len, NULL);",
          "3732:         if ( (ber_class != BER_CLASS_UNI) || (tag != BER_UNI_TAG_UTCTime) ) {",
          "3733:             tvb_ensure_bytes_exist(tvb, hoffset, 2);",
          "3737:                 val_to_str_const(ber_class, ber_class_codes, \"Unknown\"),",
          "3738:                 ber_class,",
          "3739:                 pc ? ber_pc_codes_short.true_string : ber_pc_codes_short.false_string,",
          "3740:                 tag);",
          "3742:             if (decode_unexpected) {",
          "3743:                 proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3744:                 dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "3734:             cause = proto_tree_add_string_format_value(",
          "3735:                 tree, hf_ber_error, tvb, offset, len, \"utctime_expected\",",
          "3736:                 \"UTCTime expected but class:%s(%d) %s tag:%d was unexpected\",",
          "3741:             expert_add_info(actx->pinfo, cause, &ei_ber_expected_utc_time);",
          "",
          "[Added Lines]",
          "3788:         identifier_offset = offset;",
          "3790:         identifier_len = offset - identifier_offset;",
          "3796:             cause = proto_tree_add_expert_format(",
          "3797:                 tree, actx->pinfo, &ei_ber_expected_utc_time,",
          "3798:                 tvb, identifier_offset, identifier_len,",
          "3799:                 \"BER Error: UTCTime expected but class:%s(%d) %s tag:%d was unexpected\",",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "3844:         error_tree = tree;",
          "3845:     }",
          "3849:         \"%s\",",
          "3850:         error_str);",
          "3853:     return offset+len;",
          "3854: }",
          "",
          "[Removed Lines]",
          "3847:     cause = proto_tree_add_string_format(",
          "3848:         error_tree, hf_ber_error, tvb, offset, len, \"invalid_utctime\",",
          "3851:     expert_add_info(actx->pinfo, cause, &ei_ber_invalid_format_utctime);",
          "",
          "[Added Lines]",
          "3909:     proto_tree_add_expert_format(",
          "3910:         error_tree, actx->pinfo, &ei_ber_invalid_format_utctime,",
          "3911:         tvb, offset, len,",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "3861:     gint8       ber_class;",
          "3862:     gboolean    pc, ind;",
          "3863:     gint32      tag;",
          "3864:     guint32     len, byteno;",
          "3865:     guint8      pad  = 0, b0, b1, val, *bitstring;",
          "3866:     int         end_offset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3926:     int         identifier_offset;",
          "3927:     int         identifier_len;",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "3875:     if (!implicit_tag) {",
          "3876:         hoffset = offset;",
          "3878:         offset = dissect_ber_identifier(actx->pinfo, parent_tree, tvb, offset, &ber_class, &pc, &tag);",
          "3879:         offset = dissect_ber_length(actx->pinfo, parent_tree, tvb, offset, &len, &ind);",
          "3880:         end_offset = offset + len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3942:         identifier_offset = offset;",
          "3944:         identifier_len = offset - identifier_offset;",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "3891:             if ( (ber_class != BER_CLASS_UNI)",
          "3892:               || (tag != BER_UNI_TAG_BITSTRING) ) {",
          "3893:                 tvb_ensure_bytes_exist(tvb, hoffset, 2);",
          "3897:                     val_to_str_const(ber_class, ber_class_codes, \"Unknown\"),",
          "3898:                     ber_class, pc ? ber_pc_codes_short.true_string : ber_pc_codes_short.false_string,",
          "3899:                     tag);",
          "3901:                 if (decode_unexpected) {",
          "3902:                     proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3903:                     dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "3894:                 cause = proto_tree_add_string_format_value(",
          "3895:                     parent_tree, hf_ber_error, tvb, offset, len, \"bitstring_expected\",",
          "3896:                     \"BitString expected but class:%s(%d) %s tag:%d was unexpected\",",
          "3900:                 expert_add_info(actx->pinfo, cause, &ei_ber_expected_bitstring);",
          "",
          "[Added Lines]",
          "3960:                 cause = proto_tree_add_expert_format(",
          "3961:                     parent_tree, actx->pinfo, &ei_ber_expected_bitstring,",
          "3962:                     tvb, identifier_offset, identifier_len,",
          "3963:                     \"BER Error: BitString expected but class:%s(%d) %s tag:%d was unexpected\",",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "3913:     if ((int)len <= 0) {",
          "3914:         proto_tree_add_expert_format(",
          "3915:             parent_tree, actx->pinfo, &ei_ber_constr_bitstr, tvb, offset, len,",
          "3917:             actx->pinfo->num, offset, len);",
          "3918:         return offset;",
          "3919:     }",
          "",
          "[Removed Lines]",
          "3916:             \"dissect_ber_constrained_bitstring(): frame:%u offset:%d Was passed an illegal length of %d\",",
          "",
          "[Added Lines]",
          "3982:             \"BER Error: dissect_ber_constrained_bitstring(): frame:%u offset:%d Was passed an illegal length of %d\",",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "4367:         { &hf_ber_unknown_ENUMERATED, {",
          "4368:                 \"ENUMERATED\", \"ber.unknown.ENUMERATED\", FT_UINT32, BASE_DEC,",
          "4369:                 NULL, 0, \"This is an unknown ENUMERATED\", HFILL }},",
          "4373:         { &hf_ber_direct_reference,",
          "4374:           { \"direct-reference\", \"ber.direct_reference\",",
          "4375:             FT_OID, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "4370:         { &hf_ber_error, {",
          "4371:                 \"BER Error\", \"ber.error\", FT_STRING, BASE_NONE,",
          "4372:                 NULL, 0, NULL, HFILL }},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "4398:           { \"single-ASN1-type\", \"ber.single_ASN1_type\",",
          "4399:             FT_NONE, BASE_NONE, NULL, 0,",
          "4400:             \"ber.T_single_ASN1_type\", HFILL }},",
          "4403:         { &hf_ber_fragments,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4464:         { &hf_ber_extra_data,",
          "4465:           { \"Extra data\", \"ber.extra_data\",",
          "4466:             FT_BYTES, BASE_NONE, NULL, 0,",
          "4467:             NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "4466:         { &ei_ber_sequence_field_wrong, { \"ber.error.sequence.field_wrong\", PI_MALFORMED, PI_WARN, \"BER Error: Wrong field in SEQUENCE\", EXPFILL }},",
          "4467:         { &ei_ber_expected_octet_string, { \"ber.error.expected.octet_string\", PI_MALFORMED, PI_WARN, \"BER Error: OctetString expected\", EXPFILL }},",
          "4468:         { &ei_ber_expected_null, { \"ber.error.expected.null\", PI_MALFORMED, PI_WARN, \"BER Error: NULL expected\", EXPFILL }},",
          "4470:         { &ei_ber_expected_sequence, { \"ber.error.expected.sequence\", PI_MALFORMED, PI_WARN, \"BER Error: Sequence expected\", EXPFILL }},",
          "4471:         { &ei_ber_expected_set, { \"ber.error.expected.set\", PI_MALFORMED, PI_WARN, \"BER Error: SET expected\", EXPFILL }},",
          "4472:         { &ei_ber_expected_string, { \"ber.error.expected.string\", PI_MALFORMED, PI_WARN, \"BER Error: String expected\", EXPFILL }},",
          "",
          "[Removed Lines]",
          "4469:         { &ei_ber_expected_null_zero_length, { \"ber.error.expected.null_zero_length\", PI_MALFORMED, PI_WARN, \"BER Error: NULL expect zero length\", EXPFILL }},",
          "",
          "[Added Lines]",
          "4536:         { &ei_ber_expected_null_zero_length, { \"ber.error.expected.null_zero_length\", PI_MALFORMED, PI_WARN, \"BER Error: NULL type expects zero length data\", EXPFILL }},",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "4474:         { &ei_ber_expected_generalized_time, { \"ber.error.expected.generalized_time\", PI_MALFORMED, PI_WARN, \"BER Error: GeneralizedTime expected\", EXPFILL }},",
          "4475:         { &ei_ber_expected_utc_time, { \"ber.error.expected.utc_time\", PI_MALFORMED, PI_WARN, \"BER Error: UTCTime expected\", EXPFILL }},",
          "4476:         { &ei_ber_expected_bitstring, { \"ber.error.expected.bitstring\", PI_MALFORMED, PI_WARN, \"BER Error: BitString expected\", EXPFILL }},",
          "4478:         { &ei_ber_wrong_tag_in_tagged_type, { \"ber.error.wrong_tag_in_tagged_type\", PI_MALFORMED, PI_WARN, \"BER Error: Wrong tag in tagged type\", EXPFILL }},",
          "4479:         { &ei_ber_universal_tag_unknown, { \"ber.error.universal_tag_unknown\", PI_MALFORMED, PI_WARN, \"BER Error: can not handle universal\", EXPFILL }},",
          "4480:         { &ei_ber_no_oid, { \"ber.error.no_oid\", PI_MALFORMED, PI_WARN, \"BER Error: No OID supplied to call_ber_oid_callback\", EXPFILL }},",
          "4481:         { &ei_ber_oid_not_implemented, { \"ber.error.oid_not_implemented\", PI_UNDECODED, PI_WARN, \"BER: Dissector for OID not implemented. Contact Wireshark developers if you want this supported\", EXPFILL }},",
          "4483:         { &ei_ber_value_too_many_bytes, { \"ber.error.value_too_many_bytes\", PI_MALFORMED, PI_WARN, \"Value is encoded with too many bytes\", EXPFILL }},",
          "4484:         { &ei_ber_unknown_field_sequence, { \"ber.error.unknown_field.sequence\", PI_MALFORMED, PI_WARN, \"BER Error: Unknown field in Sequence\", EXPFILL }},",
          "4485:         { &ei_ber_unknown_field_set, { \"ber.error.unknown_field.set\", PI_MALFORMED, PI_WARN, \"BER Error: Unknown field in SET\", EXPFILL }},",
          "",
          "[Removed Lines]",
          "4477:         { &ei_ber_error_length, { \"ber.error.length\", PI_MALFORMED, PI_WARN, \"BER Error length\", EXPFILL }},",
          "4482:         { &ei_ber_syntax_not_implemented, { \"ber.error.syntax_not_implemented\", PI_UNDECODED, PI_WARN, \"BER: Syntax not implemented\", EXPFILL }},",
          "",
          "[Added Lines]",
          "4544:         { &ei_ber_error_length, { \"ber.error.length\", PI_MALFORMED, PI_WARN, \"BER Error: length is not valid\", EXPFILL }},",
          "4549:         { &ei_ber_syntax_not_implemented, { \"ber.error.syntax_not_implemented\", PI_UNDECODED, PI_WARN, \"BER: Dissector for syntax not implemented\", EXPFILL }},",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "4493:         { &ei_ber_invalid_format_utctime, { \"ber.error.invalid_format.utctime\", PI_MALFORMED, PI_WARN, \"BER Error: malformed UTCTime encoding\", EXPFILL }},",
          "4494:         { &ei_hf_field_not_integer_type, { \"ber.error.hf_field_not_integer_type\", PI_PROTOCOL, PI_ERROR, \"Was passed a HF field that was not integer type\", EXPFILL }},",
          "4495:         { &ei_ber_constr_bitstr,{ \"ber.error.constr_bitstr.len\", PI_MALFORMED, PI_WARN, \"BER Error: malformed Bitstring encoding\", EXPFILL } },",
          "4496:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4563:         { &ei_ber_real_not_primitive,{ \"ber.error.not_primitive.real\", PI_MALFORMED, PI_WARN, \"BER Error: REAL class not encoded as primitive\", EXPFILL } },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a9e92d585a3b8a42aff8ad968710ea1d6a4e7ff",
      "candidate_info": {
        "commit_hash": "0a9e92d585a3b8a42aff8ad968710ea1d6a4e7ff",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/0a9e92d585a3b8a42aff8ad968710ea1d6a4e7ff",
        "files": [
          "epan/dissectors/packet-ber.c"
        ],
        "message": "Use proto_tree_add_expert{_format}() to report errors.\n\nDon't create fake string items.\n\nHave the item cover the part of the packet that has the issue, e.g. if\nthere's an unexpected identifier, or an invalid length, cover that\nrather than the value; that 1) shows where the problem is and 2) avoids\nthrowing an exception.\n\nClean up the error messages and expert info items while we're at it.\n\nChange-Id: If698db98158f7a5532a865be02f1028d92af262f\nReviewed-on: https://code.wireshark.org/review/28093\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c": [
          "File: epan/dissectors/packet-ber.c -> epan/dissectors/packet-ber.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105: static gint hf_ber_unknown_REAL = -1;",
          "106: static gint hf_ber_unknown_BITSTRING = -1;",
          "107: static gint hf_ber_unknown_ENUMERATED = -1;",
          "",
          "[Removed Lines]",
          "108: static gint hf_ber_error = -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118: static int hf_ber_seq_of_eoc = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: static gint hf_ber_extra_data = -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180: static expert_field ei_ber_invalid_format_utctime = EI_INIT;",
          "181: static expert_field ei_hf_field_not_integer_type = EI_INIT;",
          "182: static expert_field ei_ber_constr_bitstr = EI_INIT;",
          "184: static dissector_handle_t ber_handle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183: static expert_field ei_ber_real_not_primitive = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "201: static gboolean last_pc;",
          "202: static gint32   last_tag;",
          "203: static guint32  last_length;",
          "204: static gboolean last_ind;",
          "206: static const value_string ber_class_codes[] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205: static tvbuff_t *last_length_tvb;",
          "206: static int      last_length_offset;",
          "207: static int      last_length_len;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "629: {",
          "630:     gint8       tmp_cls;",
          "631:     gint32      tmp_tag;",
          "632:     guint32     tmp_len;",
          "633:     tvbuff_t   *next_tvb = tvb;",
          "636: #ifdef DEBUG_BER",
          "637: {",
          "",
          "[Removed Lines]",
          "634:     proto_item *cause;",
          "",
          "[Added Lines]",
          "636:     int         identifier_offset;",
          "637:     int         identifier_len;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "656:         return offset;",
          "657:     }",
          "659:     offset = dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &tmp_cls, NULL, &tmp_tag);",
          "660:     offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, &tmp_len, NULL);",
          "662:     if ((tmp_cls != tag_cls) || (tmp_tag != tag_tag)) {",
          "666:             val_to_str_const(tag_cls, ber_class_codes, \"Unknown\"),",
          "667:             tag_cls,",
          "668:             tag_tag,",
          "",
          "[Removed Lines]",
          "663:         cause = proto_tree_add_string_format_value(",
          "664:             tree, hf_ber_error, tvb, offset, tmp_len, \"wrong_tag\",",
          "665:             \"Wrong tag in tagged type - expected class:%s(%d) tag:%d (%s) but found class:%s(%d) tag:%d\",",
          "",
          "[Added Lines]",
          "664:     identifier_offset = offset;",
          "666:     identifier_len = offset - identifier_offset;",
          "670:         proto_tree_add_expert_format(",
          "671:             tree, actx->pinfo, &ei_ber_wrong_tag_in_tagged_type,",
          "672:             tvb, identifier_offset, identifier_len,",
          "673:             \"BER Error: Wrong tag in tagged type - expected class:%s(%d) tag:%d (%s) but found class:%s(%d) tag:%d\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "670:             val_to_str_const(tmp_cls, ber_class_codes, \"Unknown\"),",
          "671:             tmp_cls,",
          "672:             tmp_tag);",
          "674:     }",
          "676:     if (tag_impl) {",
          "",
          "[Removed Lines]",
          "673:         expert_add_info(actx->pinfo, cause, &ei_ber_wrong_tag_in_tagged_type);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "694: {",
          "695:     proto_item *ti;",
          "700:         name, length);",
          "704:     return ti;",
          "705: }",
          "",
          "[Removed Lines]",
          "697:     ti = proto_tree_add_string_format(",
          "698:         tree, hf_ber_error, tvb, start, length, \"illegal_length\",",
          "699:         \"%s: length of item (%d) is not valid\",",
          "701:     expert_add_info_format(",
          "702:         pinfo, ti, &ei_ber_error_length,",
          "703:         \"Length of item (%d) is not valid\", length);",
          "",
          "[Added Lines]",
          "704:     ti = proto_tree_add_expert_format(",
          "705:         tree, pinfo, &ei_ber_error_length, tvb, start, length,",
          "706:         \"BER Error: %s: length of item (%d) is not valid\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "710: static void",
          "711: ber_add_large_length_error(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb,",
          "713: {",
          "719:         length,",
          "720:         tvb_reported_length_remaining(tvb, offset));",
          "722: }",
          "",
          "[Removed Lines]",
          "712:                          const gint offset, const guint32 length)",
          "714:     proto_item *cause;",
          "716:     cause = proto_tree_add_string_format_value(",
          "717:         tree, hf_ber_error, tvb, offset, length, \"illegal_length\",",
          "718:         \"length %u longer than tvb_reported_length_remaining: %d\",",
          "721:     expert_add_info(pinfo, cause, &ei_ber_error_length);",
          "",
          "[Added Lines]",
          "716:                          int offset, int length, tvbuff_t *len_tvb,",
          "717:                          const gint len_offset, const guint32 len_length)",
          "719:     proto_tree_add_expert_format(",
          "720:         tree, pinfo, &ei_ber_error_length, len_tvb, len_offset, len_length,",
          "721:         \"BER Error: length %u longer than tvb_reported_length_remaining: %d\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "827:     gint8              ber_class;",
          "828:     gboolean           pc, ind;",
          "829:     gint32             tag;",
          "830:     guint32            len;",
          "831:     int                hdr_len;",
          "832:     proto_item        *item      = NULL;",
          "833:     proto_tree        *next_tree = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "832:     int                identifier_offset;",
          "833:     int                identifier_len;",
          "835:     int                len_offset;",
          "836:     int                len_len;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "835:     guint32            i;",
          "836:     gboolean           is_printable;",
          "837:     volatile gboolean  is_decoded_as;",
          "839:     asn1_ctx_t         asn1_ctx;",
          "841:     if (nest_level > BER_MAX_NESTING) {",
          "",
          "[Removed Lines]",
          "838:     proto_item        *pi, *cause;",
          "",
          "[Added Lines]",
          "844:     proto_item        *pi;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "847:     asn1_ctx_init(&asn1_ctx, ASN1_ENC_BER, TRUE, pinfo);",
          "849:     offset = get_ber_identifier(tvb, offset, &ber_class, &pc, &tag);",
          "850:     offset = get_ber_length(tvb, offset, &len, &ind);",
          "852:     if (len > (guint32)tvb_reported_length_remaining(tvb, offset)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "856:     len_offset = offset;",
          "858:     len_len = offset - len_offset;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "859:             offset = dissect_ber_identifier(pinfo, tree, tvb, start_offset, &ber_class, &pc, &tag);",
          "860:             offset = dissect_ber_length(pinfo, tree, tvb, offset, &len, NULL);",
          "861:         }",
          "863:         return tvb_reported_length(tvb);",
          "864:     }",
          "",
          "[Removed Lines]",
          "862:         ber_add_large_length_error(pinfo, tree, tvb, offset, len);",
          "",
          "[Added Lines]",
          "870:         ber_add_large_length_error(pinfo, tree, tvb, offset, len, tvb, len_offset, len_len);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "963:                 offset = dissect_ber_boolean(FALSE, &asn1_ctx, tree, tvb, start_offset, hf_ber_unknown_BOOLEAN, NULL);",
          "964:                 break;",
          "965:             default:",
          "966:                 offset = dissect_ber_identifier(pinfo, tree, tvb, start_offset, &ber_class, &pc, &tag);",
          "967:                 offset = dissect_ber_length(pinfo, tree, tvb, offset, &len, NULL);",
          "971:                     tag);",
          "973:                 offset += len;",
          "974:             }",
          "975:             break;",
          "",
          "[Removed Lines]",
          "968:                 cause = proto_tree_add_string_format_value(",
          "969:                     tree, hf_ber_error, tvb, offset, len, \"unknown_universal_tag\",",
          "970:                     \"can not handle universal tag:%d\",",
          "972:                 expert_add_info(pinfo, cause, &ei_ber_universal_tag_unknown);",
          "",
          "[Added Lines]",
          "974:                 identifier_offset = start_offset;",
          "976:                 identifier_len = offset - identifier_offset;",
          "978:                 proto_tree_add_expert_format(",
          "979:                     tree, pinfo, &ei_ber_universal_tag_unknown,",
          "980:                     tvb, identifier_offset, identifier_len,",
          "981:                     \"BER Error: can not handle universal tag:%d\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1157:         if (syntax == NULL) {",
          "1158:             item = proto_tree_add_expert_format(",
          "1159:                     tree, pinfo, &ei_ber_no_oid, next_tvb, 0, tvb_reported_length_remaining(tvb, offset),",
          "1161:         } else {",
          "1162:             item = proto_tree_add_expert_format(",
          "1163:                     tree, pinfo, &ei_ber_syntax_not_implemented, next_tvb, 0, tvb_reported_length_remaining(tvb, offset),",
          "",
          "[Removed Lines]",
          "1160:                     \"BER: No syntax supplied to call_ber_syntax_callback\");",
          "",
          "[Added Lines]",
          "1170:                     \"BER Error: No syntax supplied to call_ber_syntax_callback\");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1370: }",
          "1372: static void",
          "1374: {",
          "1375:     if (length)",
          "1377:     if (ind)",
          "1379: }",
          "",
          "[Removed Lines]",
          "1373: get_last_ber_length(guint32 *length, gboolean *ind)",
          "",
          "[Added Lines]",
          "1383: get_last_ber_length(guint32 *length, gboolean *ind, tvbuff_t **len_tvb, int *len_offset, int *len_len)",
          "1389:     if (len_tvb)",
          "1391:     if (len_offset)",
          "1393:     if (len_len)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1409:     last_length = tmp_length;",
          "1410:     last_ind = tmp_ind;",
          "1412:     return offset;",
          "1413: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1427:     last_length_tvb = tvb;",
          "1428:     last_length_offset = old_offset;",
          "1429:     last_length_len = offset - old_offset;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1531:     gint8       ber_class;",
          "1532:     gboolean    pc, ind;",
          "1533:     gint32      tag;",
          "1534:     guint32     len;",
          "1535:     guint       encoding;",
          "1536:     int         hoffset;",
          "1537:     int         end_offset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1553:     int         identifier_offset;",
          "1554:     int         identifier_len;",
          "1556:     tvbuff_t   *len_tvb;",
          "1557:     int         len_offset;",
          "1558:     int         len_len;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1562:     if (!implicit_tag) {",
          "1563:         hoffset = offset;",
          "1565:         offset = dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &ber_class, &pc, &tag);",
          "1566:         offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, &len, &ind);",
          "1567:         end_offset = offset+len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1589:         identifier_offset = offset;",
          "1591:         identifier_len = offset - identifier_offset;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1571:             if ( (ber_class != BER_CLASS_UNI)",
          "1572:               || ((tag < BER_UNI_TAG_NumericString) && (tag != BER_UNI_TAG_OCTETSTRING) && (tag != BER_UNI_TAG_UTF8String)) ) {",
          "1573:                 tvb_ensure_bytes_exist(tvb, hoffset, 2);",
          "1577:                     val_to_str_const(ber_class, ber_class_codes, \"Unknown\"),",
          "1578:                     ber_class,",
          "1579:                     pc ? ber_pc_codes_short.true_string : ber_pc_codes_short.false_string,",
          "1580:                     tag);",
          "1582:                 if (decode_unexpected) {",
          "1583:                     proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "1584:                     dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "1574:                 cause = proto_tree_add_string_format_value(",
          "1575:                     tree, hf_ber_error, tvb, offset, len, \"octetstring_expected\",",
          "1576:                     \"OctetString expected but class:%s(%d) %s tag:%d was unexpected\",",
          "1581:                 expert_add_info(actx->pinfo, cause, &ei_ber_expected_octet_string);",
          "",
          "[Added Lines]",
          "1600:                 cause = proto_tree_add_expert_format(",
          "1601:                     tree, actx->pinfo, &ei_ber_expected_octet_string,",
          "1602:                     tvb, identifier_offset, identifier_len,",
          "1603:                     \"BER Error: OctetString expected but class:%s(%d) %s tag:%d was unexpected\",",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1592:         get_last_ber_identifier(&ber_class, &pc, &tag);",
          "1595:         end_offset = offset+len;",
          "",
          "[Removed Lines]",
          "1593:         get_last_ber_length(&len, &ind);",
          "",
          "[Added Lines]",
          "1619:         get_last_ber_length(&len, &ind, &len_tvb, &len_offset, &len_len);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1610:             return end_offset;",
          "1611:         }",
          "",
          "[Removed Lines]",
          "1609:             ber_add_large_length_error(actx->pinfo, tree, tvb, offset, len);",
          "",
          "[Added Lines]",
          "1635:             ber_add_large_length_error(actx->pinfo, tree, tvb, offset, len, len_tvb, len_offset, len_len);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1779:     gint8       ber_class;",
          "1780:     gboolean    pc;",
          "1781:     gint32      tag;",
          "1782:     guint32     len;",
          "1786:     if (!implicit_tag) {",
          "1788:         offset = dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &ber_class, &pc, &tag);",
          "1789:         if (pc ||",
          "1790:             (!implicit_tag && ((ber_class != BER_CLASS_UNI) || (tag != BER_UNI_TAG_NULL)))) {",
          "1794:                 val_to_str_const(ber_class, ber_class_codes, \"Unknown\"),",
          "1795:                 ber_class,",
          "1796:                 pc ? ber_pc_codes_short.true_string : ber_pc_codes_short.false_string,",
          "1797:                 tag);",
          "1799:         }",
          "1802:         offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, &len, NULL);",
          "1803:         if (len) {",
          "1807:                 len);",
          "1812:             offset += len;",
          "1813:         }",
          "1814:     }",
          "",
          "[Removed Lines]",
          "1783:     int         offset_old;",
          "1784:     proto_item* cause;",
          "1787:         offset_old = offset;",
          "1791:             cause = proto_tree_add_string_format_value(",
          "1792:                 tree, hf_ber_error, tvb, offset_old, offset - offset_old, \"null_expected\",",
          "1793:                 \"NULL expected but class:%s(%d) %s tag:%d was unexpected\",",
          "1798:             expert_add_info(actx->pinfo, cause, &ei_ber_expected_null);",
          "1801:         offset_old = offset;",
          "1804:             proto_tree_add_string_format_value(",
          "1805:                 tree, hf_ber_error, tvb, offset_old, offset - offset_old, \"illegal_length\",",
          "1806:                 \"NULL expect zero length but Length=%d\",",
          "1808:             cause = proto_tree_add_string_format_value(",
          "1809:                 tree, hf_ber_error, tvb, offset, len, \"unexpected_data\",",
          "1810:                 \"unexpected data in NULL type\");",
          "1811:             expert_add_info(actx->pinfo, cause, &ei_ber_expected_null_zero_length);",
          "",
          "[Added Lines]",
          "1808:     int         identifier_offset;",
          "1809:     int         identifier_len;",
          "1811:     int         len_offset;",
          "1812:     int         len_len;",
          "1815:         identifier_offset = offset;",
          "1817:         identifier_len = offset - identifier_offset;",
          "1820:             proto_tree_add_expert_format(",
          "1821:                 tree, actx->pinfo, &ei_ber_expected_null,",
          "1822:                 tvb, identifier_offset, identifier_len,",
          "1823:                 \"BER Error: NULL expected but class:%s(%d) %s tag:%d was unexpected\",",
          "1830:         len_offset = offset;",
          "1832:         len_len = offset - len_offset;",
          "1834:             proto_tree_add_expert_format(",
          "1835:                 tree, actx->pinfo, &ei_ber_expected_null_zero_length,",
          "1836:                 tvb, len_offset, len_len,",
          "1837:                 \"BER Error: NULL type expects zero length data but Length=%d\",",
          "1839:             proto_tree_add_item(tree, hf_ber_extra_data, tvb, offset, len, ENC_NA);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1906:     if (hf_id >= 0) {",
          "1908:         if ((len < 1) || (len > 9) || ((len == 9) && (first != 0))) {",
          "1912:               len);",
          "1915:         } else {",
          "1916:             header_field_info* hfi;",
          "",
          "[Removed Lines]",
          "1909:           proto_item *pi = proto_tree_add_string_format_value(",
          "1910:               tree, hf_ber_error, tvb, offset-len, len, \"invalid length\",",
          "1911:               \"Can't handle integer length: %u\",",
          "1913:           expert_add_info_format(actx->pinfo, pi, &ei_ber_error_length,",
          "1914:               \"BER Error: Illegal integer length: %u\", len);",
          "",
          "[Added Lines]",
          "1937:           proto_tree_add_expert_format(",
          "1938:               tree, actx->pinfo, &ei_ber_error_length, tvb, offset-len, len,",
          "1939:               \"BER Error: Can't handle integer length: %u\",",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2046:     gboolean pc;",
          "2047:     gint32   tag;",
          "2048:     guint32  val_length = 0, len_remain, end_offset;",
          "2049:     double   val        = 0;",
          "2052:     if (!implicit_tag) {",
          "2053:         offset = dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &ber_class, &pc, &tag);",
          "",
          "[Removed Lines]",
          "2050:     proto_item *cause;",
          "",
          "[Added Lines]",
          "2075:     tvbuff_t *len_tvb;",
          "2076:     int      len_offset;",
          "2077:     int      len_len;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2057:     } else {",
          "2059:         get_last_ber_identifier(&ber_class, &pc, &tag);",
          "2062:         end_offset = offset + val_length;",
          "",
          "[Removed Lines]",
          "2060:         get_last_ber_length(&val_length, NULL);",
          "",
          "[Added Lines]",
          "2088:         get_last_ber_length(&val_length, NULL, &len_tvb, &len_offset, &len_len);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2065:         len_remain = (guint32)tvb_reported_length_remaining(tvb, offset);",
          "2066:         if (len_remain < val_length) {",
          "2069:             return end_offset;",
          "2070:         }",
          "2071:     }",
          "2073:     if(pc) {",
          "2079:     }",
          "2081:     val = asn1_get_real(tvb_get_ptr(tvb, offset, val_length), val_length);",
          "",
          "[Removed Lines]",
          "2068:             ber_add_large_length_error(actx->pinfo, tree, tvb, offset, val_length);",
          "2075:       cause = proto_tree_add_string_format_value(",
          "2076:           tree, hf_ber_error, tvb, offset - 2, 1, \"wrong_tag\",",
          "2077:           \"REAL class must be encoded as primitive\");",
          "2078:       expert_add_info(actx->pinfo, cause, &ei_ber_error_length);",
          "",
          "[Added Lines]",
          "2096:             ber_add_large_length_error(actx->pinfo, tree, tvb, offset, val_length, len_tvb, len_offset, len_len);",
          "2103:       proto_tree_add_expert(",
          "2104:           tree, actx->pinfo, &ei_ber_real_not_primitive, tvb, offset - 2, 1);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2094:     gint8       classx;",
          "2095:     gboolean    pcx, ind   = 0, ind_field, imp_tag = FALSE;",
          "2096:     gint32      tagx;",
          "2097:     guint32     lenx;",
          "2098:     proto_tree *tree       = parent_tree;",
          "2099:     proto_item *item       = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2123:     int         identifier_offset;",
          "2124:     int         identifier_len;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2140:     if (!implicit_tag) {",
          "2142:         offset = dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &classx, &pcx, &tagx);",
          "2143:         offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, &lenx, &ind);",
          "2144:         if (ind) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2170:         identifier_offset = offset;",
          "2172:         identifier_len = offset - identifier_offset;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2154:             if (!pcx",
          "2155:              || (!implicit_tag && ((classx != BER_CLASS_UNI) || (tagx != BER_UNI_TAG_SEQUENCE)))) {",
          "2156:                 tvb_ensure_bytes_exist(tvb, hoffset, 2);",
          "2160:                     val_to_str_const(classx, ber_class_codes, \"Unknown\"),",
          "2161:                     classx,",
          "2162:                     pcx ? ber_pc_codes_short.true_string : ber_pc_codes_short.false_string,",
          "2163:                     tagx);",
          "2165:                 if (decode_unexpected) {",
          "2166:                     proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "2167:                     dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "2157:                 cause = proto_tree_add_string_format_value(",
          "2158:                     tree, hf_ber_error, tvb, offset, lenx, \"sequence_expected\",",
          "2159:                     \"Sequence expected but class:%s(%d) %s tag:%d was unexpected\",",
          "2164:                 expert_add_info(actx->pinfo, cause, &ei_ber_expected_sequence);",
          "",
          "[Added Lines]",
          "2187:                 cause = proto_tree_add_expert_format(",
          "2188:                     tree, actx->pinfo, &ei_ber_expected_sequence,",
          "2189:                     tvb, identifier_offset, identifier_len,",
          "2190:                     \"BER Error: Sequence expected but class:%s(%d) %s tag:%d was unexpected\",",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2220:             offset = dissect_ber_identifier(actx->pinfo, tree, tvb, hoffset, NULL, NULL, NULL);",
          "2221:             offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, NULL, NULL);",
          "2226:             if (decode_unexpected) {",
          "2227:                 proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "2228:                 dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "2222:             cause = proto_tree_add_string_format_value(",
          "2223:                 tree, hf_ber_error, tvb, offset, len, \"unknown_field\",",
          "2224:                 \"This field lies beyond the end of the known sequence definition.\");",
          "2225:             expert_add_info(actx->pinfo, cause, &ei_ber_unknown_field_sequence);",
          "",
          "[Added Lines]",
          "2252:             cause = proto_tree_add_expert_format(",
          "2253:                 tree, actx->pinfo, &ei_ber_unknown_field_sequence,",
          "2254:                 tvb, hoffset, -1,",
          "2255:                 \"BER Error: This field lies beyond the end of the known sequence definition.\");",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2253:                     seq++;",
          "2254:                     goto ber_sequence_try_again;",
          "2255:                 }",
          "2256:                 offset = dissect_ber_identifier(actx->pinfo, tree, tvb, hoffset, NULL, NULL, NULL);",
          "2257:                 offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, NULL, NULL);",
          "2258:                 if (seq->ber_class == BER_CLASS_UNI) {",
          "2262:                         val_to_str_const(seq->ber_class, ber_class_codes, \"Unknown\"),",
          "2263:                         seq->ber_class,",
          "2264:                         seq->tag,",
          "",
          "[Removed Lines]",
          "2259:                     cause = proto_tree_add_string_format_value(",
          "2260:                         tree, hf_ber_error, tvb, offset, len, \"wrong_field\",",
          "2261:                         \"Wrong field in SEQUENCE  expected class:%s(%d) tag:%d (%s) but found class:%s(%d) tag:%d\",",
          "",
          "[Added Lines]",
          "2286:                 identifier_offset = hoffset;",
          "2288:                 identifier_len = offset - identifier_offset;",
          "2291:                     cause = proto_tree_add_expert_format(",
          "2292:                         tree, actx->pinfo, &ei_ber_sequence_field_wrong,",
          "2293:                         tvb, identifier_offset, identifier_len,",
          "2294:                         \"BER Error: Wrong field in SEQUENCE: expected class:%s(%d) tag:%d (%s) but found class:%s(%d) tag:%d\",",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2267:                         ber_class,",
          "2268:                         tag);",
          "2269:                 } else {",
          "2273:                         val_to_str_const(seq->ber_class, ber_class_codes, \"Unknown\"),",
          "2274:                         seq->ber_class,",
          "2275:                         seq->tag,",
          "",
          "[Removed Lines]",
          "2270:                     cause = proto_tree_add_string_format_value(",
          "2271:                         tree, hf_ber_error, tvb, offset, len, \"wrong_field\",",
          "2272:                         \"Wrong field in SEQUENCE  expected class:%s(%d) tag:%d but found class:%s(%d) tag:%d\",",
          "",
          "[Added Lines]",
          "2303:                     cause = proto_tree_add_expert_format(",
          "2304:                         tree, actx->pinfo, &ei_ber_sequence_field_wrong,",
          "2305:                         tvb, identifier_offset, identifier_len,",
          "2306:                         \"BER Error: Wrong field in SEQUENCE: expected class:%s(%d) tag:%d but found class:%s(%d) tag:%d\",",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2277:                         ber_class,",
          "2278:                         tag);",
          "2279:                 }",
          "2281:                 if (decode_unexpected) {",
          "2282:                     proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "2283:                     dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "2280:                 expert_add_info(actx->pinfo, cause, &ei_ber_sequence_field_wrong);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2298:                     goto ber_sequence_try_again;",
          "2299:                 }",
          "2301:                 offset = dissect_ber_identifier(actx->pinfo, tree, tvb, hoffset, NULL, NULL, NULL);",
          "2302:                 offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, NULL, NULL);",
          "2303:                 if ( seq->ber_class == BER_CLASS_UNI) {",
          "2307:                         val_to_str_const(seq->ber_class, ber_class_codes, \"Unknown\"),",
          "2308:                         seq->ber_class,",
          "2309:                         seq->tag,",
          "",
          "[Removed Lines]",
          "2304:                     cause = proto_tree_add_string_format_value(",
          "2305:                         tree, hf_ber_error, tvb, offset, len, \"wrong_field\",",
          "2306:                         \"Wrong field in SEQUENCE  expected class:%s(%d) tag:%d(%s) but found class:%s(%d) tag:%d\",",
          "",
          "[Added Lines]",
          "2334:                 identifier_offset = hoffset;",
          "2336:                 identifier_len = offset - identifier_offset;",
          "2339:                     cause = proto_tree_add_expert_format(",
          "2340:                         tree, actx->pinfo, &ei_ber_sequence_field_wrong,",
          "2341:                         tvb, identifier_offset, identifier_len,",
          "2342:                         \"BER Error: Wrong field in SEQUENCE: expected class:%s(%d) tag:%d(%s) but found class:%s(%d) tag:%d\",",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2311:                         val_to_str_const(ber_class, ber_class_codes, \"Unknown\"),",
          "2312:                         ber_class, tag);",
          "2313:                 } else {",
          "2317:                         val_to_str_const(seq->ber_class, ber_class_codes, \"Unknown\"),",
          "2318:                         seq->ber_class,",
          "2319:                         seq->tag,",
          "",
          "[Removed Lines]",
          "2314:                     cause = proto_tree_add_string_format_value(",
          "2315:                         tree, hf_ber_error, tvb, offset, len, \"wrong_field\",",
          "2316:                         \"Wrong field in SEQUENCE  expected class:%s(%d) tag:%d but found class:%s(%d) tag:%d\",",
          "",
          "[Added Lines]",
          "2350:                     cause = proto_tree_add_expert_format(",
          "2351:                         tree, actx->pinfo, &ei_ber_sequence_field_wrong,",
          "2352:                         tvb, identifier_offset, identifier_len,",
          "2353:                         \"BER Error: Wrong field in SEQUENCE: expected class:%s(%d) tag:%d but found class:%s(%d) tag:%d\",",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2321:                         ber_class,",
          "2322:                         tag);",
          "2323:                 }",
          "2325:                 if (decode_unexpected) {",
          "2326:                     proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "2327:                     dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "2324:                 expert_add_info(actx->pinfo, cause, &ei_ber_sequence_field_wrong);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2428:     if (offset != end_offset) {",
          "2429:         tvb_ensure_bytes_exist(tvb, offset-2, 2);",
          "2433:             offset - end_offset);",
          "2436:     }",
          "2437:     if (ind) {",
          "",
          "[Removed Lines]",
          "2430:         cause = proto_tree_add_string_format_value(",
          "2431:             tree, hf_ber_error, tvb, offset-2, 2, \"illegal_length\",",
          "2432:             \"Sequence ate %d too many bytes\",",
          "2434:         expert_add_info_format(actx->pinfo, cause, &ei_ber_error_length,",
          "2435:             \"BER Error: too many bytes in Sequence\");",
          "",
          "[Added Lines]",
          "2466:         proto_tree_add_expert_format(",
          "2467:             tree, actx->pinfo, &ei_ber_error_length, tvb, offset-2, 2,",
          "2468:             \"BER Error: SEQUENCE is %d too many bytes long\",",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2452:     gint8       classx;",
          "2453:     gboolean    pcx, ind = 0, ind_field, imp_tag = FALSE;",
          "2454:     gint32      tagx;",
          "2455:     guint32     lenx;",
          "2456:     proto_tree *tree     = parent_tree;",
          "2457:     proto_item *item     = NULL;",
          "2458:     proto_item *cause;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2489:     int         identifier_offset;",
          "2490:     int         identifier_len;",
          "2492:     int         len_offset;",
          "2493:     int         len_len;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2489:     if (!implicit_tag) {",
          "2490:         hoffset = offset;",
          "2492:         offset = dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &classx, &pcx, &tagx);",
          "2493:         offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, &lenx, &ind);",
          "2494:         if (ind) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2530:         identifier_offset = offset;",
          "2532:         identifier_len = offset - identifier_offset;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2505:              || (!implicit_tag && ((classx != BER_CLASS_UNI)",
          "2506:                                 || (tagx != BER_UNI_TAG_SET)))) {",
          "2507:                 tvb_ensure_bytes_exist(tvb, hoffset, 2);",
          "2511:                     val_to_str_const(classx, ber_class_codes, \"Unknown\"),",
          "2512:                     classx,",
          "2513:                     pcx ? ber_pc_codes_short.true_string : ber_pc_codes_short.false_string,",
          "2514:                     tagx);",
          "2516:                 if (decode_unexpected) {",
          "2517:                     proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "2518:                     dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "2508:                 cause = proto_tree_add_string_format_value(",
          "2509:                     tree, hf_ber_error, tvb, offset, lenx, \"set_expected\",",
          "2510:                     \"SET expected but class:%s(%d) %s tag:%d was found\",",
          "2515:                 expert_add_info(actx->pinfo, cause, &ei_ber_expected_set);",
          "",
          "[Added Lines]",
          "2548:                 cause = proto_tree_add_expert_format(",
          "2549:                     tree, actx->pinfo, &ei_ber_expected_set,",
          "2550:                     tvb, identifier_offset, identifier_len,",
          "2551:                     \"BER Error: SET expected but class:%s(%d) %s tag:%d was found\",",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2525:         lenx = tvb_reported_length_remaining(tvb, offset);",
          "2526:         end_offset = offset+lenx;",
          "2527:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2567:         identifier_offset = 0;",
          "2568:         identifier_len = 0;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2564:         hoffset = offset;",
          "2566:         offset  = get_ber_identifier(tvb, offset, &ber_class, &pc, &tag);",
          "2567:         offset  = get_ber_length(tvb, offset, &len, &ind_field);",
          "2568:         eoffset = offset + len;",
          "2570:         if (len > (guint32)(end_offset - offset) || len > (guint32) tvb_reported_length_remaining(tvb, offset)) {",
          "2572:             return end_offset;",
          "2573:         }",
          "",
          "[Removed Lines]",
          "2571:             ber_add_large_length_error(actx->pinfo, tree, tvb, offset, len);",
          "",
          "[Added Lines]",
          "2608:         identifier_offset = offset;",
          "2610:         identifier_len = offset - identifier_offset;",
          "2611:         len_offset = offset;",
          "2613:         len_len = offset - len_offset;",
          "2617:             ber_add_large_length_error(actx->pinfo, tree, tvb, offset, len, tvb, len_offset, len_len);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2670:         if (!cset->func) {",
          "2675:                 val_to_str_const(ber_class, ber_class_codes, \"Unknown\"),",
          "2676:                 ber_class,",
          "2677:                 tag);",
          "2679:             if (decode_unexpected) {",
          "2680:                 proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "2681:                 dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "2672:             cause = proto_tree_add_string_format_value(",
          "2673:                 tree, hf_ber_error, tvb, offset, len, \"unknown_field\",",
          "2674:                 \"Unknown field in SET class:%s(%d) tag:%d\",",
          "2678:             expert_add_info(actx->pinfo, cause, &ei_ber_unknown_field_set);",
          "",
          "[Added Lines]",
          "2718:             cause = proto_tree_add_expert_format(",
          "2719:                 tree, actx->pinfo, &ei_ber_unknown_field_set,",
          "2720:                 tvb, identifier_offset, identifier_len,",
          "2721:                 \"BER Error: Unknown field in SET class:%s(%d) tag:%d\",",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2691:         for (set_idx = 0;  (cset = &set[set_idx])->func && (set_idx < MAX_SET_ELEMENTS); set_idx++) {",
          "2692:             if (mandatory_fields & (1U << set_idx)) {",
          "2697:                     val_to_str_const(cset->ber_class, ber_class_codes, \"Unknown\"),",
          "2698:                     cset->ber_class,",
          "2699:                     cset->tag);",
          "2702:             }",
          "2704:         }",
          "",
          "[Removed Lines]",
          "2694:                 cause = proto_tree_add_string_format_value(",
          "2695:                     tree, hf_ber_error, tvb, offset, lenx, \"missing_field\",",
          "2696:                     \"Missing field in SET class:%s(%d) tag:%d expected\",",
          "2700:                 expert_add_info(actx->pinfo, cause, &ei_ber_missing_field_set);",
          "",
          "[Added Lines]",
          "2740:                 proto_tree_add_expert_format(",
          "2741:                     tree, actx->pinfo, &ei_ber_missing_field_set,",
          "2742:                     tvb, identifier_offset, identifier_len,",
          "2743:                     \"BER Error: Missing field in SET class:%s(%d) tag:%d expected\",",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2708:     if (offset != end_offset) {",
          "2709:         tvb_ensure_bytes_exist(tvb, offset-2, 2);",
          "2713:             offset - end_offset);",
          "2716:     }",
          "2718:     if (ind) {",
          "",
          "[Removed Lines]",
          "2710:         cause = proto_tree_add_string_format_value(",
          "2711:             tree, hf_ber_error, tvb, offset-2, 2, \"illegal_length\",",
          "2712:             \"SET ate %d too many bytes\",",
          "2714:         expert_add_info_format(actx->pinfo, cause, &ei_ber_error_length,",
          "2715:             \"BER Error: too many bytes in SET\");",
          "",
          "[Added Lines]",
          "2755:         proto_tree_add_expert_format(",
          "2756:             tree, actx->pinfo, &ei_ber_error_length, tvb, offset-2, 2,",
          "2757:             \"BER Error: SET is %d too many bytes long\",",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2738:     gint8       ber_class;",
          "2739:     gboolean    pc, ind, imp_tag = FALSE;",
          "2740:     gint32      tag;",
          "2741:     guint32     len;",
          "2742:     proto_tree *tree = parent_tree;",
          "2743:     proto_item *item = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2784:     int         identifier_offset;",
          "2785:     int         identifier_len;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2773:     }",
          "2775:     if (tvb_reported_length_remaining(tvb, offset) == 0) {",
          "2780:         return offset;",
          "2781:     }",
          "2784:     offset = get_ber_identifier(tvb, offset, &ber_class, &pc, &tag);",
          "2785:     offset = get_ber_length(tvb, offset, &len, &ind);",
          "2786:     end_offset = offset + len ;",
          "",
          "[Removed Lines]",
          "2776:         item = proto_tree_add_string_format_value(",
          "2777:             parent_tree, hf_ber_error, tvb, offset, 0, \"empty_choice\",",
          "2778:             \"Empty choice was found\");",
          "2779:         expert_add_info(actx->pinfo, item, &ei_ber_empty_choice);",
          "",
          "[Added Lines]",
          "2821:         proto_tree_add_expert(",
          "2822:             parent_tree, actx->pinfo, &ei_ber_empty_choice, tvb, offset, 0);",
          "2827:     identifier_offset = offset;",
          "2829:     identifier_len = offset - identifier_offset;",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2798:             break;",
          "2799:         default:",
          "2800:             proto_tree_add_expert_format(",
          "2803:                 actx->pinfo->num, offset, hfinfo->abbrev);",
          "2804:             return end_offset;",
          "2805:         }",
          "",
          "[Removed Lines]",
          "2801:                 tree, actx->pinfo, &ei_hf_field_not_integer_type, tvb, offset, len,",
          "2802:                 \"dissect_ber_choice(): frame:%u offset:%d Was passed an HF field that was not integer type : %s\",",
          "",
          "[Added Lines]",
          "2846:                 tree, actx->pinfo, &ei_hf_field_not_integer_type,",
          "2847:                 tvb, identifier_offset, identifier_len,",
          "2848:                 \"BER Error: dissect_ber_choice(): frame:%u offset:%d Was passed an HF field that was not integer type : %s\",",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2955:     return end_offset;",
          "2956: #endif",
          "",
          "[Removed Lines]",
          "2951:     item = proto_tree_add_string_format_value(",
          "2952:         tree, hf_ber_error, tvb, offset, len, \"missing_choice_field\",",
          "2953:         \"This choice field was not found.\");",
          "2954:     expert_add_info(actx->pinfo, item, &ei_ber_choice_not_found);",
          "",
          "[Added Lines]",
          "2997:     proto_tree_add_expert(",
          "2998:         tree, actx->pinfo, &ei_ber_choice_not_found, tvb, offset, len);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2967:     gint8       ber_class;",
          "2968:     gboolean    pc;",
          "2969:     gint32      tag;",
          "2970:     guint32     len;",
          "2971:     int         end_offset;",
          "2972:     int         hoffset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3014:     int         identifier_offset;",
          "3015:     int         identifier_len;",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2985:     hoffset = offset;",
          "2987:     offset = dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &ber_class, &pc, &tag);",
          "2988:     offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, &len, NULL);",
          "2989:     end_offset = offset + len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3033:     identifier_offset = offset;",
          "3035:     identifier_len = offset - identifier_offset;",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2992:     if ( (ber_class != BER_CLASS_UNI)",
          "2993:       || (tag != BER_UNI_TAG_GENSTR) ) {",
          "2994:         tvb_ensure_bytes_exist(tvb, hoffset, 2);",
          "2998:             val_to_str_const(ber_class, ber_class_codes, \"Unknown\"),",
          "2999:             ber_class, pc ? ber_pc_codes_short.true_string : ber_pc_codes_short.false_string,",
          "3000:             tag);",
          "3003:         if (decode_unexpected) {",
          "3004:             proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3005:             dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "2995:         cause = proto_tree_add_string_format_value(",
          "2996:             tree, hf_ber_error, tvb, offset, len, \"generalstring_expected\",",
          "2997:             \"GeneralString expected but class:%s(%d) %s tag:%d was unexpected\",",
          "3001:         expert_add_info(actx->pinfo, cause, &ei_ber_expected_general_string,",
          "3002:             \"BER Error: GeneralString expected\");",
          "",
          "[Added Lines]",
          "3043:         cause = proto_tree_add_expert_format(",
          "3044:             tree, actx->pinfo, &ei_ber_expected_general_string,",
          "3045:             tvb, identifier_offset, identifier_len,",
          "3046:             \"BER Error: GeneralString expected but class:%s(%d) %s tag:%d was unexpected\",",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "3027:     gint8       ber_class;",
          "3028:     gboolean    pc;",
          "3029:     gint32      tag;",
          "3030:     guint32     len;",
          "3031:     int         eoffset;",
          "3032:     int         hoffset = offset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3077:     int         identifier_offset;",
          "3078:     int         identifier_len;",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "3051: #endif",
          "3053:     if (!implicit_tag) {",
          "3054:         offset  = get_ber_identifier(tvb, offset, &ber_class, &pc, &tag);",
          "3055:         offset  = get_ber_length(tvb, offset, &len, NULL);",
          "3056:         eoffset = offset + len;",
          "3059:         if ( (ber_class != BER_CLASS_UNI)",
          "3060:           || (tag != type) ) {",
          "3065:                 type,",
          "3066:                 val_to_str_const(ber_class, ber_class_codes, \"Unknown\"),",
          "3067:                 ber_class, pc ? ber_pc_codes_short.true_string : ber_pc_codes_short.false_string,",
          "3068:                 tag);",
          "3070:             if (decode_unexpected) {",
          "3071:                 proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3072:                 dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "3061:                 tvb_ensure_bytes_exist(tvb, hoffset, 2);",
          "3062:             cause = proto_tree_add_string_format_value(",
          "3063:                 tree, hf_ber_error, tvb, offset, len, \"string_expected\",",
          "3064:                 \"String with tag=%d expected but class:%s(%d) %s tag:%d was unexpected\",",
          "3069:             expert_add_info(actx->pinfo, cause, &ei_ber_expected_string);",
          "",
          "[Added Lines]",
          "3103:      identifier_offset = offset;",
          "3105:         identifier_len = offset - identifier_offset;",
          "3112:             tvb_ensure_bytes_exist(tvb, hoffset, 2);",
          "3113:             cause = proto_tree_add_expert_format(",
          "3114:                 tree, actx->pinfo, &ei_ber_expected_string,",
          "3115:                 tvb, identifier_offset, identifier_len,",
          "3116:                 \"BER Error: String with tag=%d expected but class:%s(%d) %s tag:%d was unexpected\",",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "3121:     gint8        ber_class;",
          "3122:     gboolean     pc;",
          "3123:     gint32       tag;",
          "3124:     guint32      len;",
          "3125:     int          eoffset;",
          "3126:     int          hoffset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3175:     int          identifier_offset;",
          "3176:     int          identifier_len;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "3149:     if (!implicit_tag) {",
          "3150:         hoffset = offset;",
          "3152:         offset = dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &ber_class, &pc, &tag);",
          "3153:         offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, &len, NULL);",
          "3154:         eoffset = offset + len;",
          "3155:         if ( (ber_class != BER_CLASS_UNI)",
          "3156:           || (is_absolute && tag != BER_UNI_TAG_OID)",
          "3157:           || (!is_absolute && tag != BER_UNI_TAG_RELATIVE_OID) ) {",
          "3158:                 tvb_ensure_bytes_exist(tvb, hoffset, 2);",
          "3162:                 val_to_str_const(ber_class, ber_class_codes, \"Unknown\"),",
          "3163:                 ber_class,",
          "3164:                 pc ? ber_pc_codes_short.true_string : ber_pc_codes_short.false_string,",
          "3165:                 tag);",
          "3167:             if (decode_unexpected) {",
          "3168:                 proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3169:                 dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "3159:             cause = proto_tree_add_string_format_value(",
          "3160:                 tree, hf_ber_error, tvb, offset, len, \"oid_expected\",",
          "3161:                 \"Object Identifier expected but class:%s(%d) %s tag:%d was unexpected\",",
          "3166:             expert_add_info(actx->pinfo, cause, &ei_ber_expected_object_identifier);",
          "",
          "[Added Lines]",
          "3205:         identifier_offset = offset;",
          "3207:         identifier_len = offset - identifier_offset;",
          "3214:             cause = proto_tree_add_expert_format(",
          "3215:                 tree, actx->pinfo, &ei_ber_expected_object_identifier,",
          "3216:                 tvb, identifier_offset, identifier_len,",
          "3217:                 \"BER Error: Object Identifier expected but class:%s(%d) %s tag:%d was unexpected\",",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "3255:     gint8              classx;",
          "3256:     gboolean           pcx, ind = FALSE, ind_field;",
          "3257:     gint32             tagx;",
          "3258:     guint32            lenx;",
          "3260:     proto_tree        *tree     = parent_tree;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3313:     int                identifier_offset;",
          "3314:     int                identifier_len;",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "3286:     if (!implicit_tag) {",
          "3287:         hoffsetx = offset;",
          "3289:         offset = dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &classx, &pcx, &tagx);",
          "3290:         offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, &lenx, &ind);",
          "3291:         end_offset = offset + lenx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3346:         identifier_offset = offset;",
          "3348:         identifier_len = offset - identifier_offset;",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "3296:              || (!implicit_tag && ((classx != BER_CLASS_UNI)",
          "3297:                                 || (tagx != type)))) {",
          "3298:                 tvb_ensure_bytes_exist(tvb, hoffsetx, 2);",
          "3304:                     val_to_str_const(classx, ber_class_codes, \"Unknown\"),",
          "3305:                     classx, pcx ? ber_pc_codes_short.true_string : ber_pc_codes_short.false_string,",
          "3306:                     tagx);",
          "3316:                 if (decode_unexpected) {",
          "3317:                     proto_tree *unknown_tree = proto_item_add_subtree(causex, ett_ber_unknown);",
          "3318:                     dissect_unknown_ber(actx->pinfo, tvb, hoffsetx, unknown_tree);",
          "",
          "[Removed Lines]",
          "3299:                 causex = proto_tree_add_string_format_value(",
          "3300:                     tree, hf_ber_error, tvb, offset, lenx,",
          "3301:                     (type == BER_UNI_TAG_SEQUENCE) ? \"set_of_expected\" : \"sequence_of_expected\",",
          "3302:                     \"%s Of expected but class:%s(%d) %s tag:%d was unexpected\",",
          "3303:                     (type == BER_UNI_TAG_SEQUENCE) ? \"Set\" : \"Sequence\",",
          "3307:                 if (type == BER_UNI_TAG_SEQUENCE) {",
          "3308:                     expert_add_info_format(",
          "3309:                         actx->pinfo, causex, &ei_ber_expected_set,",
          "3310:                         \"BER Error: Set Of expected\");",
          "3311:                 } else {",
          "3312:                     expert_add_info_format(",
          "3313:                         actx->pinfo, causex, &ei_ber_expected_sequence,",
          "3314:                         \"BER Error: Sequence Of expected\");",
          "3315:                 }",
          "",
          "[Added Lines]",
          "3358:                 causex = proto_tree_add_expert_format(",
          "3359:                     tree, actx->pinfo,",
          "3360:                     (type == BER_UNI_TAG_SEQUENCE) ? &ei_ber_expected_set : &ei_ber_expected_sequence,",
          "3361:                     tvb, identifier_offset, identifier_len,",
          "3362:                     \"BER Error: %s OF expected but class:%s(%d) %s tag:%d was unexpected\",",
          "3363:                     (type == BER_UNI_TAG_SEQUENCE) ? \"SET\" : \"SEQUENCE\",",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "3411:             }",
          "3414:         offset  = get_ber_identifier(tvb, offset, &ber_class, &pc, &tag);",
          "3415:         offset  = get_ber_length(tvb, offset, &len, &ind_field);",
          "3416:         eoffset = offset + len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3465:         identifier_offset = offset;",
          "3467:         identifier_len = offset - identifier_offset;",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "3431:            || (seq->tag != tag) ) {",
          "3432:             if (!(seq->flags & BER_FLAGS_NOTCHKTAG)) {",
          "3433:                 if ( seq->ber_class == BER_CLASS_UNI) {",
          "3437:                         val_to_str_const(seq->ber_class, ber_class_codes, \"Unknown\"),",
          "3438:                         seq->ber_class,",
          "3439:                         seq->tag,",
          "",
          "[Removed Lines]",
          "3434:                     cause = proto_tree_add_string_format_value(",
          "3435:                         tree, hf_ber_error, tvb, offset, len, \"wrong_field\",",
          "3436:                         \"Wrong field in SQ OF  expected class:%s(%d) tag:%d(%s) but found class:%s(%d) tag:%d\",",
          "",
          "[Added Lines]",
          "3487:                     cause = proto_tree_add_expert_format(",
          "3488:                         tree, actx->pinfo, &ei_ber_sequence_field_wrong,",
          "3489:                         tvb, identifier_offset, identifier_len,",
          "3490:                         \"BER Error: Wrong field in SEQUENCE OF: expected class:%s(%d) tag:%d(%s) but found class:%s(%d) tag:%d\",",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "3441:                         val_to_str_const(ber_class, ber_class_codes, \"Unknown\"),",
          "3442:                         ber_class, tag);",
          "3443:                 } else {",
          "3447:                         val_to_str_const(seq->ber_class, ber_class_codes, \"Unknown\"),",
          "3448:                         seq->ber_class,",
          "3449:                         seq->tag,",
          "",
          "[Removed Lines]",
          "3444:                     cause = proto_tree_add_string_format_value(",
          "3445:                         tree, hf_ber_error, tvb, offset, len, \"wrong_field\",",
          "3446:                         \"Wrong field in SQ OF  expected class:%s(%d) tag:%d but found class:%s(%d) tag:%d\",",
          "",
          "[Added Lines]",
          "3498:                     cause = proto_tree_add_expert_format(",
          "3499:                         tree, actx->pinfo, &ei_ber_sequence_field_wrong,",
          "3500:                         tvb, identifier_offset, identifier_len,",
          "3501:                         \"BER Error: Wrong field in SEQUENCE OF: expected class:%s(%d) tag:%d but found class:%s(%d) tag:%d\",",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "3451:                         ber_class,",
          "3452:                         tag);",
          "3453:                 }",
          "3457:                 if (decode_unexpected) {",
          "3458:                     proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3459:                     dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "3454:                 expert_add_info_format(",
          "3455:                     actx->pinfo, cause, &ei_ber_sequence_field_wrong,",
          "3456:                     \"BER Error: Wrong field in SEQUENCE OF\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "3496:     if (offset != end_offset) {",
          "3497:         tvb_ensure_bytes_exist(tvb, offset-2, 2);",
          "3502:             offset - end_offset);",
          "3506:     }",
          "3508:     return end_offset;",
          "",
          "[Removed Lines]",
          "3498:         causex = proto_tree_add_string_format_value(",
          "3499:             tree, hf_ber_error, tvb, offset-2, 2, \"illegal_length\",",
          "3500:             \"%s Of ate %d too many bytes\",",
          "3501:             (type == BER_UNI_TAG_SEQUENCE) ? \"Set\" : \"Sequence\",",
          "3503:         expert_add_info_format(actx->pinfo, causex, &ei_ber_error_length,",
          "3504:             \"BER Error:too many byte in %s\",",
          "3505:             (type == BER_UNI_TAG_SEQUENCE) ? \"Set\" : \"Sequence\");",
          "",
          "[Added Lines]",
          "3550:         proto_tree_add_expert_format(",
          "3551:             tree, actx->pinfo, &ei_ber_error_length, tvb, offset-2, 2,",
          "3552:             \"BER Error: %s OF contained %d too many bytes\",",
          "3553:             (type == BER_UNI_TAG_SEQUENCE) ? \"SET\" : \"SEQUENCE\",",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "3543:     gint8         ber_class;",
          "3544:     gboolean      pc;",
          "3545:     gint32        tag;",
          "3546:     guint32       len;",
          "3547:     int           end_offset;",
          "3548:     int           hoffset;",
          "3549:     proto_item   *cause;",
          "3551:     if (!implicit_tag) {",
          "3552:         hoffset = offset;",
          "3553:         offset = dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &ber_class, &pc, &tag);",
          "3554:         offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, &len, NULL);",
          "3555:         end_offset = offset+len;",
          "3558:         if ( (ber_class != BER_CLASS_UNI)",
          "3559:           || (tag != BER_UNI_TAG_GeneralizedTime)) {",
          "3560:             tvb_ensure_bytes_exist(tvb, hoffset, 2);",
          "3564:                 val_to_str_const(ber_class, ber_class_codes, \"Unknown\"),",
          "3565:                 ber_class,",
          "3566:                 pc ? ber_pc_codes_short.true_string : ber_pc_codes_short.false_string,",
          "3567:                 tag);",
          "3569:             if (decode_unexpected) {",
          "3570:                 proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3571:                 dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "3561:             cause = proto_tree_add_string_format_value(",
          "3562:                 tree, hf_ber_error, tvb, offset, len, \"generalized_time_expected\",",
          "3563:                 \"GeneralizedTime expected but class:%s(%d) %s tag:%d was unexpected\",",
          "3568:             expert_add_info(actx->pinfo, cause, &ei_ber_expected_generalized_time);",
          "",
          "[Added Lines]",
          "3595:     int           identifier_offset;",
          "3596:     int           identifier_len;",
          "3598:     int           len_offset;",
          "3599:     int           len_len;",
          "3606:         identifier_offset = offset;",
          "3608:         identifier_len = offset - identifier_offset;",
          "3609:         len_offset = offset;",
          "3611:         len_len = offset - len_offset;",
          "3618:             cause = proto_tree_add_expert_format(",
          "3619:                 tree, actx->pinfo, &ei_ber_expected_generalized_time,",
          "3620:                 tvb, identifier_offset, identifier_len,",
          "3621:                 \"BER Error: GeneralizedTime expected but class:%s(%d) %s tag:%d was unexpected\",",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "3574:         }",
          "3575:     } else {",
          "3576:         len = tvb_reported_length_remaining(tvb, offset);",
          "3577:         end_offset = offset+len;",
          "3578:     }",
          "3580:     if ((len < 14) || (len > 23)) {",
          "3584:             len);",
          "3587:         if (decode_unexpected) {",
          "3588:             proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3589:             dissect_unknown_ber(actx->pinfo, tvb, offset, unknown_tree);",
          "",
          "[Removed Lines]",
          "3581:         cause = proto_tree_add_string_format_value(",
          "3582:             tree, hf_ber_error, tvb, offset, len, \"illegal_length\",",
          "3583:             \"GeneralizedTime invalid length: %u\",",
          "3585:         expert_add_info_format(actx->pinfo, cause, &ei_ber_error_length,",
          "3586:             \"BER Error: GeneralizedTime invalid length\");",
          "",
          "[Added Lines]",
          "3634:         len_offset = 0;",
          "3635:         len_len = 0;",
          "3640:         cause = proto_tree_add_expert_format(",
          "3641:             tree, actx->pinfo, &ei_ber_error_length,",
          "3642:             tvb, len_offset, len_len,",
          "3643:             \"BER Error: GeneralizedTime invalid length: %u\",",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "3695:     return offset;",
          "3697: invalid:",
          "3701:         tmpstr);",
          "3703:     if (decode_unexpected) {",
          "3704:         proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3705:         dissect_unknown_ber(actx->pinfo, tvb, offset, unknown_tree);",
          "",
          "[Removed Lines]",
          "3698:     cause = proto_tree_add_string_format_value(",
          "3699:         tree, hf_ber_error, tvb, offset, len, \"invalid_generalized_time\",",
          "3700:         \"GeneralizedTime invalid format: %s\",",
          "3702:     expert_add_info(actx->pinfo, cause, &ei_ber_invalid_format_generalized_time);",
          "",
          "[Added Lines]",
          "3756:     cause = proto_tree_add_expert_format(",
          "3757:         tree, actx->pinfo, &ei_ber_invalid_format_generalized_time,",
          "3758:         tvb, offset, len,",
          "3759:         \"BER Error: GeneralizedTime invalid format: %s\",",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "3717:     gint8         ber_class;",
          "3718:     gboolean      pc;",
          "3719:     gint32        tag;",
          "3720:     guint32       len, i, n;",
          "3721:     int           hoffset;",
          "3722:     proto_item   *cause;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3778:     int           identifier_offset;",
          "3779:     int           identifier_len;",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "3726:     if (!implicit_tag) {",
          "3727:         hoffset = offset;",
          "3728:         offset  = dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &ber_class, &pc, &tag);",
          "3729:         offset  = dissect_ber_length(actx->pinfo, tree, tvb, offset, &len, NULL);",
          "3732:         if ( (ber_class != BER_CLASS_UNI) || (tag != BER_UNI_TAG_UTCTime) ) {",
          "3733:             tvb_ensure_bytes_exist(tvb, hoffset, 2);",
          "3737:                 val_to_str_const(ber_class, ber_class_codes, \"Unknown\"),",
          "3738:                 ber_class,",
          "3739:                 pc ? ber_pc_codes_short.true_string : ber_pc_codes_short.false_string,",
          "3740:                 tag);",
          "3742:             if (decode_unexpected) {",
          "3743:                 proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3744:                 dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "3734:             cause = proto_tree_add_string_format_value(",
          "3735:                 tree, hf_ber_error, tvb, offset, len, \"utctime_expected\",",
          "3736:                 \"UTCTime expected but class:%s(%d) %s tag:%d was unexpected\",",
          "3741:             expert_add_info(actx->pinfo, cause, &ei_ber_expected_utc_time);",
          "",
          "[Added Lines]",
          "3788:         identifier_offset = offset;",
          "3790:         identifier_len = offset - identifier_offset;",
          "3796:             cause = proto_tree_add_expert_format(",
          "3797:                 tree, actx->pinfo, &ei_ber_expected_utc_time,",
          "3798:                 tvb, identifier_offset, identifier_len,",
          "3799:                 \"BER Error: UTCTime expected but class:%s(%d) %s tag:%d was unexpected\",",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "3844:         error_tree = tree;",
          "3845:     }",
          "3849:         \"%s\",",
          "3850:         error_str);",
          "3853:     return offset+len;",
          "3854: }",
          "",
          "[Removed Lines]",
          "3847:     cause = proto_tree_add_string_format(",
          "3848:         error_tree, hf_ber_error, tvb, offset, len, \"invalid_utctime\",",
          "3851:     expert_add_info(actx->pinfo, cause, &ei_ber_invalid_format_utctime);",
          "",
          "[Added Lines]",
          "3909:     proto_tree_add_expert_format(",
          "3910:         error_tree, actx->pinfo, &ei_ber_invalid_format_utctime,",
          "3911:         tvb, offset, len,",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "3861:     gint8       ber_class;",
          "3862:     gboolean    pc, ind;",
          "3863:     gint32      tag;",
          "3864:     guint32     len, byteno;",
          "3865:     guint8      pad  = 0, b0, b1, val, *bitstring;",
          "3866:     int         end_offset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3926:     int         identifier_offset;",
          "3927:     int         identifier_len;",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "3875:     if (!implicit_tag) {",
          "3876:         hoffset = offset;",
          "3878:         offset = dissect_ber_identifier(actx->pinfo, parent_tree, tvb, offset, &ber_class, &pc, &tag);",
          "3879:         offset = dissect_ber_length(actx->pinfo, parent_tree, tvb, offset, &len, &ind);",
          "3880:         end_offset = offset + len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3942:         identifier_offset = offset;",
          "3944:         identifier_len = offset - identifier_offset;",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "3891:             if ( (ber_class != BER_CLASS_UNI)",
          "3892:               || (tag != BER_UNI_TAG_BITSTRING) ) {",
          "3893:                 tvb_ensure_bytes_exist(tvb, hoffset, 2);",
          "3897:                     val_to_str_const(ber_class, ber_class_codes, \"Unknown\"),",
          "3898:                     ber_class, pc ? ber_pc_codes_short.true_string : ber_pc_codes_short.false_string,",
          "3899:                     tag);",
          "3901:                 if (decode_unexpected) {",
          "3902:                     proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3903:                     dissect_unknown_ber(actx->pinfo, tvb, hoffset, unknown_tree);",
          "",
          "[Removed Lines]",
          "3894:                 cause = proto_tree_add_string_format_value(",
          "3895:                     parent_tree, hf_ber_error, tvb, offset, len, \"bitstring_expected\",",
          "3896:                     \"BitString expected but class:%s(%d) %s tag:%d was unexpected\",",
          "3900:                 expert_add_info(actx->pinfo, cause, &ei_ber_expected_bitstring);",
          "",
          "[Added Lines]",
          "3960:                 cause = proto_tree_add_expert_format(",
          "3961:                     parent_tree, actx->pinfo, &ei_ber_expected_bitstring,",
          "3962:                     tvb, identifier_offset, identifier_len,",
          "3963:                     \"BER Error: BitString expected but class:%s(%d) %s tag:%d was unexpected\",",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "3913:     if ((int)len <= 0) {",
          "3914:         proto_tree_add_expert_format(",
          "3915:             parent_tree, actx->pinfo, &ei_ber_constr_bitstr, tvb, offset, len,",
          "3917:             actx->pinfo->num, offset, len);",
          "3918:         return offset;",
          "3919:     }",
          "",
          "[Removed Lines]",
          "3916:             \"dissect_ber_constrained_bitstring(): frame:%u offset:%d Was passed an illegal length of %d\",",
          "",
          "[Added Lines]",
          "3982:             \"BER Error: dissect_ber_constrained_bitstring(): frame:%u offset:%d Was passed an illegal length of %d\",",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "4367:         { &hf_ber_unknown_ENUMERATED, {",
          "4368:                 \"ENUMERATED\", \"ber.unknown.ENUMERATED\", FT_UINT32, BASE_DEC,",
          "4369:                 NULL, 0, \"This is an unknown ENUMERATED\", HFILL }},",
          "4373:         { &hf_ber_direct_reference,",
          "4374:           { \"direct-reference\", \"ber.direct_reference\",",
          "4375:             FT_OID, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "4370:         { &hf_ber_error, {",
          "4371:                 \"BER Error\", \"ber.error\", FT_STRING, BASE_NONE,",
          "4372:                 NULL, 0, NULL, HFILL }},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "4398:           { \"single-ASN1-type\", \"ber.single_ASN1_type\",",
          "4399:             FT_NONE, BASE_NONE, NULL, 0,",
          "4400:             \"ber.T_single_ASN1_type\", HFILL }},",
          "4403:         { &hf_ber_fragments,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4464:         { &hf_ber_extra_data,",
          "4465:           { \"Extra data\", \"ber.extra_data\",",
          "4466:             FT_BYTES, BASE_NONE, NULL, 0,",
          "4467:             NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "4466:         { &ei_ber_sequence_field_wrong, { \"ber.error.sequence.field_wrong\", PI_MALFORMED, PI_WARN, \"BER Error: Wrong field in SEQUENCE\", EXPFILL }},",
          "4467:         { &ei_ber_expected_octet_string, { \"ber.error.expected.octet_string\", PI_MALFORMED, PI_WARN, \"BER Error: OctetString expected\", EXPFILL }},",
          "4468:         { &ei_ber_expected_null, { \"ber.error.expected.null\", PI_MALFORMED, PI_WARN, \"BER Error: NULL expected\", EXPFILL }},",
          "4470:         { &ei_ber_expected_sequence, { \"ber.error.expected.sequence\", PI_MALFORMED, PI_WARN, \"BER Error: Sequence expected\", EXPFILL }},",
          "4471:         { &ei_ber_expected_set, { \"ber.error.expected.set\", PI_MALFORMED, PI_WARN, \"BER Error: SET expected\", EXPFILL }},",
          "4472:         { &ei_ber_expected_string, { \"ber.error.expected.string\", PI_MALFORMED, PI_WARN, \"BER Error: String expected\", EXPFILL }},",
          "",
          "[Removed Lines]",
          "4469:         { &ei_ber_expected_null_zero_length, { \"ber.error.expected.null_zero_length\", PI_MALFORMED, PI_WARN, \"BER Error: NULL expect zero length\", EXPFILL }},",
          "",
          "[Added Lines]",
          "4536:         { &ei_ber_expected_null_zero_length, { \"ber.error.expected.null_zero_length\", PI_MALFORMED, PI_WARN, \"BER Error: NULL type expects zero length data\", EXPFILL }},",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "4474:         { &ei_ber_expected_generalized_time, { \"ber.error.expected.generalized_time\", PI_MALFORMED, PI_WARN, \"BER Error: GeneralizedTime expected\", EXPFILL }},",
          "4475:         { &ei_ber_expected_utc_time, { \"ber.error.expected.utc_time\", PI_MALFORMED, PI_WARN, \"BER Error: UTCTime expected\", EXPFILL }},",
          "4476:         { &ei_ber_expected_bitstring, { \"ber.error.expected.bitstring\", PI_MALFORMED, PI_WARN, \"BER Error: BitString expected\", EXPFILL }},",
          "4478:         { &ei_ber_wrong_tag_in_tagged_type, { \"ber.error.wrong_tag_in_tagged_type\", PI_MALFORMED, PI_WARN, \"BER Error: Wrong tag in tagged type\", EXPFILL }},",
          "4479:         { &ei_ber_universal_tag_unknown, { \"ber.error.universal_tag_unknown\", PI_MALFORMED, PI_WARN, \"BER Error: can not handle universal\", EXPFILL }},",
          "4480:         { &ei_ber_no_oid, { \"ber.error.no_oid\", PI_MALFORMED, PI_WARN, \"BER Error: No OID supplied to call_ber_oid_callback\", EXPFILL }},",
          "4481:         { &ei_ber_oid_not_implemented, { \"ber.error.oid_not_implemented\", PI_UNDECODED, PI_WARN, \"BER: Dissector for OID not implemented. Contact Wireshark developers if you want this supported\", EXPFILL }},",
          "4483:         { &ei_ber_value_too_many_bytes, { \"ber.error.value_too_many_bytes\", PI_MALFORMED, PI_WARN, \"Value is encoded with too many bytes\", EXPFILL }},",
          "4484:         { &ei_ber_unknown_field_sequence, { \"ber.error.unknown_field.sequence\", PI_MALFORMED, PI_WARN, \"BER Error: Unknown field in Sequence\", EXPFILL }},",
          "4485:         { &ei_ber_unknown_field_set, { \"ber.error.unknown_field.set\", PI_MALFORMED, PI_WARN, \"BER Error: Unknown field in SET\", EXPFILL }},",
          "",
          "[Removed Lines]",
          "4477:         { &ei_ber_error_length, { \"ber.error.length\", PI_MALFORMED, PI_WARN, \"BER Error length\", EXPFILL }},",
          "4482:         { &ei_ber_syntax_not_implemented, { \"ber.error.syntax_not_implemented\", PI_UNDECODED, PI_WARN, \"BER: Syntax not implemented\", EXPFILL }},",
          "",
          "[Added Lines]",
          "4544:         { &ei_ber_error_length, { \"ber.error.length\", PI_MALFORMED, PI_WARN, \"BER Error: length is not valid\", EXPFILL }},",
          "4549:         { &ei_ber_syntax_not_implemented, { \"ber.error.syntax_not_implemented\", PI_UNDECODED, PI_WARN, \"BER: Dissector for syntax not implemented\", EXPFILL }},",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "4493:         { &ei_ber_invalid_format_utctime, { \"ber.error.invalid_format.utctime\", PI_MALFORMED, PI_WARN, \"BER Error: malformed UTCTime encoding\", EXPFILL }},",
          "4494:         { &ei_hf_field_not_integer_type, { \"ber.error.hf_field_not_integer_type\", PI_PROTOCOL, PI_ERROR, \"Was passed a HF field that was not integer type\", EXPFILL }},",
          "4495:         { &ei_ber_constr_bitstr,{ \"ber.error.constr_bitstr.len\", PI_MALFORMED, PI_WARN, \"BER Error: malformed Bitstring encoding\", EXPFILL } },",
          "4496:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4563:         { &ei_ber_real_not_primitive,{ \"ber.error.not_primitive.real\", PI_MALFORMED, PI_WARN, \"BER Error: REAL class not encoded as primitive\", EXPFILL } },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "157712b2f5f89b19ef2497ea89c5938eb29529da",
      "candidate_info": {
        "commit_hash": "157712b2f5f89b19ef2497ea89c5938eb29529da",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/157712b2f5f89b19ef2497ea89c5938eb29529da",
        "files": [
          "epan/dissectors/packet-ber.c"
        ],
        "message": "BER: Add a length check.\n\nAdd a common large length reporting function. Add a length check to\ndissect_ber_set.\n\nBug: 14444.\nChange-Id: I6093b5342439cd0ee08f060b8d74b3ae54b3b8f8\nReviewed-on: https://code.wireshark.org/review/25933\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c": [
          "File: epan/dissectors/packet-ber.c -> epan/dissectors/packet-ber.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "718:     return ti;",
          "719: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "724: static void",
          "725: ber_add_large_length_error(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb,",
          "726:                          const gint offset, const guint32 length)",
          "727: {",
          "728:     proto_item *cause;",
          "730:     cause = proto_tree_add_string_format_value(",
          "731:         tree, hf_ber_error, tvb, offset, length, \"illegal_length\",",
          "732:         \"length %u longer than tvb_reported_length_remaining: %d\",",
          "733:         length,",
          "734:         tvb_reported_length_remaining(tvb, offset));",
          "735:     expert_add_info(pinfo, cause, &ei_ber_error_length);",
          "736: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "856:             offset = dissect_ber_identifier(pinfo, tree, tvb, start_offset, &ber_class, &pc, &tag);",
          "857:             offset = dissect_ber_length(pinfo, tree, tvb, offset, &len, NULL);",
          "858:         }",
          "865:         return tvb_reported_length(tvb);",
          "866:     }",
          "",
          "[Removed Lines]",
          "859:         cause = proto_tree_add_string_format_value(",
          "860:             tree, hf_ber_error, tvb, offset, len, \"illegal_length\",",
          "861:             \"length:%u longer than tvb_reported_length_remaining:%d\",",
          "862:             len,",
          "863:             tvb_reported_length_remaining(tvb, offset));",
          "864:         expert_add_info(pinfo, cause, &ei_ber_error_length);",
          "",
          "[Added Lines]",
          "876:         ber_add_large_length_error(pinfo, tree, tvb, offset, len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1621:             return end_offset;",
          "1622:         }",
          "",
          "[Removed Lines]",
          "1615:             cause = proto_tree_add_string_format_value(",
          "1616:                 tree, hf_ber_error, tvb, offset, len, \"illegal_length\",",
          "1617:                 \"length:%u longer than tvb_reported_length_remaining:%d\",",
          "1618:                 len,",
          "1619:                 len_remain);",
          "1620:             expert_add_info(actx->pinfo, cause, &ei_ber_error_length);",
          "",
          "[Added Lines]",
          "1627:             ber_add_large_length_error(actx->pinfo, tree, tvb, offset, len);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2086:         len_remain = (guint32)tvb_reported_length_remaining(tvb, offset);",
          "2087:         if (len_remain < val_length) {",
          "2095:             return end_offset;",
          "2096:         }",
          "2097:     }",
          "",
          "[Removed Lines]",
          "2089:             cause = proto_tree_add_string_format_value(",
          "2090:                 tree, hf_ber_error, tvb, offset, val_length, \"illegal_length\",",
          "2091:                 \"length:%u longer than tvb_reported_length_remaining:%d\",",
          "2092:                 val_length,",
          "2093:                 len_remain);",
          "2094:             expert_add_info(actx->pinfo, cause, &ei_ber_error_length);",
          "",
          "[Added Lines]",
          "2096:             ber_add_large_length_error(actx->pinfo, tree, tvb, offset, val_length);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2593:         offset  = get_ber_length(tvb, offset, &len, &ind_field);",
          "2594:         eoffset = offset + len;",
          "2603:         for (first_pass = TRUE, cset = set, set_idx = 0; cset->func || first_pass; cset++, set_idx++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2598:         if (len > (guint32)(end_offset - offset) || len > (guint32) tvb_reported_length_remaining(tvb, offset)) {",
          "2599:             ber_add_large_length_error(actx->pinfo, tree, tvb, offset, len);",
          "2600:             return end_offset;",
          "2601:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aef51005adc2496d3678162a949093ea4a26f339",
      "candidate_info": {
        "commit_hash": "aef51005adc2496d3678162a949093ea4a26f339",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/aef51005adc2496d3678162a949093ea4a26f339",
        "files": [
          "epan/dissectors/packet-ber.c"
        ],
        "message": "BER: Add a length check.\n\nAdd a common large length reporting function. Add a length check to\ndissect_ber_set.\n\nBug: 14444.\nChange-Id: I6093b5342439cd0ee08f060b8d74b3ae54b3b8f8\nReviewed-on: https://code.wireshark.org/review/25932\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c": [
          "File: epan/dissectors/packet-ber.c -> epan/dissectors/packet-ber.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "721:     return ti;",
          "722: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "727: static void",
          "728: ber_add_large_length_error(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb,",
          "729:                          const gint offset, const guint32 length)",
          "730: {",
          "731:     proto_item *cause;",
          "733:     cause = proto_tree_add_string_format_value(",
          "734:         tree, hf_ber_error, tvb, offset, length, \"illegal_length\",",
          "735:         \"length %u longer than tvb_reported_length_remaining: %d\",",
          "736:         length,",
          "737:         tvb_reported_length_remaining(tvb, offset));",
          "738:     expert_add_info(pinfo, cause, &ei_ber_error_length);",
          "739: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "859:             offset = dissect_ber_identifier(pinfo, tree, tvb, start_offset, &ber_class, &pc, &tag);",
          "860:             offset = dissect_ber_length(pinfo, tree, tvb, offset, &len, NULL);",
          "861:         }",
          "868:         return tvb_reported_length(tvb);",
          "869:     }",
          "",
          "[Removed Lines]",
          "862:         cause = proto_tree_add_string_format_value(",
          "863:             tree, hf_ber_error, tvb, offset, len, \"illegal_length\",",
          "864:             \"length:%u longer than tvb_reported_length_remaining:%d\",",
          "865:             len,",
          "866:             tvb_reported_length_remaining(tvb, offset));",
          "867:         expert_add_info(pinfo, cause, &ei_ber_error_length);",
          "",
          "[Added Lines]",
          "879:         ber_add_large_length_error(pinfo, tree, tvb, offset, len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1615:             return end_offset;",
          "1616:         }",
          "",
          "[Removed Lines]",
          "1609:             cause = proto_tree_add_string_format_value(",
          "1610:                 tree, hf_ber_error, tvb, offset, len, \"illegal_length\",",
          "1611:                 \"length:%u longer than tvb_reported_length_remaining:%d\",",
          "1612:                 len,",
          "1613:                 len_remain);",
          "1614:             expert_add_info(actx->pinfo, cause, &ei_ber_error_length);",
          "",
          "[Added Lines]",
          "1621:             ber_add_large_length_error(actx->pinfo, tree, tvb, offset, len);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2070:         len_remain = (guint32)tvb_reported_length_remaining(tvb, offset);",
          "2071:         if (len_remain < val_length) {",
          "2079:             return end_offset;",
          "2080:         }",
          "2081:     }",
          "",
          "[Removed Lines]",
          "2073:             cause = proto_tree_add_string_format_value(",
          "2074:                 tree, hf_ber_error, tvb, offset, val_length, \"illegal_length\",",
          "2075:                 \"length:%u longer than tvb_reported_length_remaining:%d\",",
          "2076:                 val_length,",
          "2077:                 len_remain);",
          "2078:             expert_add_info(actx->pinfo, cause, &ei_ber_error_length);",
          "",
          "[Added Lines]",
          "2080:             ber_add_large_length_error(actx->pinfo, tree, tvb, offset, val_length);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2577:         offset  = get_ber_length(tvb, offset, &len, &ind_field);",
          "2578:         eoffset = offset + len;",
          "2587:         for (first_pass = TRUE, cset = set, set_idx = 0; cset->func || first_pass; cset++, set_idx++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2582:         if (len > (guint32)(end_offset - offset) || len > (guint32) tvb_reported_length_remaining(tvb, offset)) {",
          "2583:             ber_add_large_length_error(actx->pinfo, tree, tvb, offset, len);",
          "2584:             return end_offset;",
          "2585:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}