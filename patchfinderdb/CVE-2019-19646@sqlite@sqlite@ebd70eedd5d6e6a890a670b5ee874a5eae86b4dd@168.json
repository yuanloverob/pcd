{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "58eaf763551db55e78bce1c9f99ba291e29b92eb",
      "candidate_info": {
        "commit_hash": "58eaf763551db55e78bce1c9f99ba291e29b92eb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/58eaf763551db55e78bce1c9f99ba291e29b92eb",
        "files": [
          "README.md",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Simplify the \"Verifying Code Authenticity\" section of the README.md file. No code changes.\n\nFossilOrigin-Name: adebffc18e6165672947a6bda5ca23ea7723cca7ab8da4feb81fca8f83e4fcaf",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bc7d2c1656396bb4f5f1f814e60dbf816cc91c5a521b54ad593cd3da0fe8dcb4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "664d6d139eb0ed6ec51aef76db4e22e7f41bc31c",
      "candidate_info": {
        "commit_hash": "664d6d139eb0ed6ec51aef76db4e22e7f41bc31c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/664d6d139eb0ed6ec51aef76db4e22e7f41bc31c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/index6.test",
          "test/index7.test"
        ],
        "message": "Fix the NOT NULL logic in the theorem prover that determines when a partial index can be used.  Ticket [5c6955204c392ae763a95].\n\nFossilOrigin-Name: c2e439bccc40825e211bfa9a88e6a251ff066ca7453d4e7cb5eab56ce7332635",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/index6.test||test/index6.test",
          "test/index7.test||test/index7.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5862b83eb36b93016d37e5b86ebb183d891bb553901facab1e5d83e114a38ec3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4943:   ){",
          "4944:     return 1;",
          "4945:   }",
          "4947:     Expr *pX = sqlite3ExprSkipCollate(pE1->pLeft);",
          "4948:     testcase( pX!=pE1->pLeft );",
          "4949:     if( sqlite3ExprCompare(pParse, pX, pE2->pLeft, iTab)==0 ) return 1;",
          "",
          "[Removed Lines]",
          "4946:   if( pE2->op==TK_NOTNULL && pE1->op!=TK_ISNULL && pE1->op!=TK_IS ){",
          "",
          "[Added Lines]",
          "4946:   if( pE2->op==TK_NOTNULL",
          "4947:    && pE1->op!=TK_ISNULL",
          "4948:    && pE1->op!=TK_IS",
          "4949:    && pE1->op!=TK_OR",
          "4950:   ){",
          "",
          "---------------"
        ],
        "test/index6.test||test/index6.test": [
          "File: test/index6.test -> test/index6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "410: do_execsql_test index6-12.2 {",
          "411:   SELECT x FROM t2 WHERE x IN (SELECT a FROM t1) ORDER BY +x;",
          "412: } {1 2}",
          "413: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "414: # 2019-05-04",
          "415: # Ticket https://www.sqlite.org/src/tktview/5c6955204c392ae763a95",
          "416: # Theorem prover error",
          "417: #",
          "418: do_execsql_test index6-13.1 {",
          "419:   DROP TABLE IF EXISTS t0;",
          "420:   CREATE TABLE t0(c0);",
          "421:   CREATE INDEX index_0 ON t0(c0) WHERE c0 NOT NULL;",
          "422:   INSERT INTO t0(c0) VALUES (NULL);",
          "423:   SELECT * FROM t0 WHERE c0 OR 1;",
          "424: } {{}}",
          "",
          "---------------"
        ],
        "test/index7.test||test/index7.test": [
          "File: test/index7.test -> test/index7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:   }",
          "187: } {t1 {15 1} t1a {10 1} t1b {8 1} t1c {15 1} ok}",
          "190: #",
          "191: do_test index7-2.1 {",
          "192:   execsql {",
          "",
          "[Removed Lines]",
          "189: # Queries use partial indices as appropriate times.",
          "",
          "[Added Lines]",
          "189: # Queries use partial indices at appropriate times.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f245174a3fd67a23b248c260942133f54b34b9b",
      "candidate_info": {
        "commit_hash": "8f245174a3fd67a23b248c260942133f54b34b9b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8f245174a3fd67a23b248c260942133f54b34b9b",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/window1.test"
        ],
        "message": "Fix a typo in test file window1.test.\n\nFossilOrigin-Name: 8c80e81d01abde9a5032cdc1a492d0fccd8db139f78d2db9413a60cfdc8e0f64",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 871796bb19e61c1282d8ac97a82d8b57bde50f2a2a08004ab53136d77c138df4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "259: } {1 {no such window: abc}}",
          "260: do_catchsql_test 7.1.8 {",
          "261:   SELECT row_number(x) OVER () FROM t1",
          "264: do_execsql_test 7.2 {",
          "265:   SELECT",
          "",
          "[Removed Lines]",
          "262: } {1 {wrong number of arguments to function row_number}}",
          "",
          "[Added Lines]",
          "262: } {1 {wrong number of arguments to function row_number()}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8bf4126c84341c5674fce578146992a36e5c26a8",
      "candidate_info": {
        "commit_hash": "8bf4126c84341c5674fce578146992a36e5c26a8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8bf4126c84341c5674fce578146992a36e5c26a8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/corruptL.test",
          "test/fuzzdata8.db"
        ],
        "message": "Change the error message slightly for when two or more indexes have the same rootpage.\n\nFossilOrigin-Name: 916c52dad414b224695d455a42af36f85dff216504c2aa67d1d2c5818cdca8d6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/corruptL.test||test/corruptL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6b360bc0b9ad18ccda9d58d43a8388d19999432bfdf294abcf5beb44ef990cb4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3490:       if( pTblName!=0 ){",
          "3491:         pIndex->tnum = db->init.newTnum;",
          "3492:         if( sqlite3IndexHasDuplicateRootPage(pIndex) ){",
          "3494:           pParse->rc = SQLITE_CORRUPT_BKPT;",
          "3495:           goto exit_create_index;",
          "3496:         }",
          "",
          "[Removed Lines]",
          "3493:           sqlite3ErrorMsg(pParse, \"invalid root page\");",
          "",
          "[Added Lines]",
          "3493:           sqlite3ErrorMsg(pParse, \"invalid rootpage\");",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "627:     INSERT INTO t1(b) VALUES(1);",
          "628:     INSERT INTO t1(b) VALUES(2);",
          "629:   COMMIT;",
          "632: #-------------------------------------------------------------------------",
          "633: reset_db",
          "",
          "[Removed Lines]",
          "630: } {1 {malformed database schema (t1b) - invalid root page}}",
          "",
          "[Added Lines]",
          "630: } {1 {malformed database schema (t1b) - invalid rootpage}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "721: do_catchsql_test 7.1 {",
          "722:   SELECT * FROM sqlite_master;",
          "725: finish_test",
          "",
          "[Removed Lines]",
          "723: } {1 {malformed database schema (t1x1) - invalid root page}}",
          "",
          "[Added Lines]",
          "723: } {1 {malformed database schema (t1x1) - invalid rootpage}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83420823af71c148073a042c6a5452fac28c6369",
      "candidate_info": {
        "commit_hash": "83420823af71c148073a042c6a5452fac28c6369",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/83420823af71c148073a042c6a5452fac28c6369",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_vfs.c",
          "test/walvfs.test"
        ],
        "message": "Fix a use-after-free problem in the test suite. No changes to production code.\n\nFossilOrigin-Name: 0d1055a5da8274a59f35170b1f9469597ce4c5a4c5e851a1b81d3be2ccd32871",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_vfs.c||src/test_vfs.c",
          "test/walvfs.test||test/walvfs.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a0f6d526baecd061a5e2bec5eb698fb5dfb10122ac79c853d7b3f4a48bc9f49b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1391:   Testvfs *p = (Testvfs *)cd;",
          "1392:   if( p->pScript ) Tcl_DecrRefCount(p->pScript);",
          "1393:   sqlite3_vfs_unregister(p->pVfs);",
          "1394:   ckfree((char *)p->pVfs);",
          "1395:   ckfree((char *)p);",
          "1396: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1394:   memset(p->pVfs, 0, sizeof(sqlite3_vfs));",
          "1395:   memset(p, 0, sizeof(Testvfs));",
          "",
          "---------------"
        ],
        "test/walvfs.test||test/walvfs.test": [
          "File: test/walvfs.test -> test/walvfs.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:   PRAGMA wal_checkpoint;",
          "388:   SELECT count(*) FROM t1",
          "389: } {0 5 5 21}",
          "390: tvfs2 delete",
          "392: #-------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390: db close",
          "",
          "---------------"
        ]
      }
    }
  ]
}