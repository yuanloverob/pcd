{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dc96192eefed7a08931454035cb25210529cc46c",
      "candidate_info": {
        "commit_hash": "dc96192eefed7a08931454035cb25210529cc46c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dc96192eefed7a08931454035cb25210529cc46c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c",
          "src/vdbeaux.c"
        ],
        "message": "Ensure all file names passed to the VFS layer are double-zero terminated.\n\nFossilOrigin-Name: 251230cf43c591cf49cf9d2f392581c57d334b791bc3407814d216b5999c32f4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2e98b42fcb7bc38e22808a9dc1d7a4231ed08ffa97c9f08f33e6e8cd8726856c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1359:     len = 0;",
          "1360:   }",
          "1361:   zMaster[len] = '\\0';",
          "1363:   return SQLITE_OK;",
          "1364: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1362:   zMaster[len+1] = '\\0';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2595:   rc = sqlite3OsFileSize(pMaster, &nMasterJournal);",
          "2596:   if( rc!=SQLITE_OK ) goto delmaster_out;",
          "2597:   nMasterPtr = pVfs->mxPathname+1;",
          "2599:   if( !zMasterJournal ){",
          "2600:     rc = SQLITE_NOMEM_BKPT;",
          "2601:     goto delmaster_out;",
          "2602:   }",
          "2604:   rc = sqlite3OsRead(pMaster, zMasterJournal, (int)nMasterJournal, 0);",
          "2605:   if( rc!=SQLITE_OK ) goto delmaster_out;",
          "2606:   zMasterJournal[nMasterJournal] = 0;",
          "2608:   zJournal = zMasterJournal;",
          "2609:   while( (zJournal-zMasterJournal)<nMasterJournal ){",
          "",
          "[Removed Lines]",
          "2598:   zMasterJournal = sqlite3Malloc(nMasterJournal + nMasterPtr + 1);",
          "2603:   zMasterPtr = &zMasterJournal[nMasterJournal+1];",
          "",
          "[Added Lines]",
          "2599:   zMasterJournal = sqlite3Malloc(nMasterJournal + nMasterPtr + 2);",
          "2604:   zMasterPtr = &zMasterJournal[nMasterJournal+2];",
          "2608:   zMasterJournal[nMasterJournal+1] = 0;",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2651:     nMainFile = sqlite3Strlen30(zMainFile);",
          "2653:     if( zMaster==0 ) return SQLITE_NOMEM_BKPT;",
          "2654:     do {",
          "2655:       u32 iRandom;",
          "",
          "[Removed Lines]",
          "2652:     zMaster = sqlite3MPrintf(db, \"%s-mjXXXXXX9XXz\", zMainFile);",
          "",
          "[Added Lines]",
          "2652:     zMaster = sqlite3MPrintf(db, \"%s-mjXXXXXX9XXz%c%c\", zMainFile, 0, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75fa266341f5f7ae87c34a153c7db990d63ccfd4",
      "candidate_info": {
        "commit_hash": "75fa266341f5f7ae87c34a153c7db990d63ccfd4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/75fa266341f5f7ae87c34a153c7db990d63ccfd4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/whereInt.h",
          "src/wherecode.c",
          "src/whereexpr.c"
        ],
        "message": "Small performance improvement and size reduction by reducing the size of the WhereTerm object.\n\nFossilOrigin-Name: 43f7ddad800acf40917c5cc3d926640dbec17c34d5f1cbbb74bd80f44eeed0a5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/wherecode.c||src/wherecode.c",
          "src/whereexpr.c||src/whereexpr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d3d13df31a97648f952beb2e1a783f947a80ec843227985ad9ebd14452d2f654",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:     do{",
          "258:       for(pTerm=pWC->a+k; k<pWC->nTerm; k++, pTerm++){",
          "259:         if( pTerm->leftCursor==iCur",
          "261:          && (iColumn!=XN_EXPR",
          "262:              || sqlite3ExprCompareSkip(pTerm->pExpr->pLeft,",
          "263:                                        pScan->pIdxExpr,iCur)==0)",
          "",
          "[Removed Lines]",
          "260:          && pTerm->u.leftColumn==iColumn",
          "",
          "[Added Lines]",
          "260:          && pTerm->u.x.leftColumn==iColumn",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "679:     return 0;",
          "680:   }",
          "681:   if( (pTerm->prereqRight & notReady)!=0 ) return 0;",
          "684:   if( !sqlite3IndexAffinityOk(pTerm->pExpr, aff) ) return 0;",
          "685:   testcase( pTerm->pExpr->op==TK_IS );",
          "686:   return 1;",
          "",
          "[Removed Lines]",
          "682:   if( pTerm->u.leftColumn<0 ) return 0;",
          "683:   aff = pSrc->pTab->aCol[pTerm->u.leftColumn].affinity;",
          "",
          "[Added Lines]",
          "682:   if( pTerm->u.x.leftColumn<0 ) return 0;",
          "683:   aff = pSrc->pTab->aCol[pTerm->u.x.leftColumn].affinity;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "751:                                 sqlite3ExprDup(pParse->db, pExpr, 0));",
          "752:     }",
          "753:     if( termCanDriveIndex(pTerm, pSrc, notReady) ){",
          "755:       Bitmask cMask = iCol>=BMS ? MASKBIT(BMS-1) : MASKBIT(iCol);",
          "756:       testcase( iCol==BMS );",
          "757:       testcase( iCol==BMS-1 );",
          "",
          "[Removed Lines]",
          "754:       int iCol = pTerm->u.leftColumn;",
          "",
          "[Added Lines]",
          "754:       int iCol = pTerm->u.x.leftColumn;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "804:   idxCols = 0;",
          "805:   for(pTerm=pWC->a; pTerm<pWCEnd; pTerm++){",
          "806:     if( termCanDriveIndex(pTerm, pSrc, notReady) ){",
          "808:       Bitmask cMask = iCol>=BMS ? MASKBIT(BMS-1) : MASKBIT(iCol);",
          "809:       testcase( iCol==BMS-1 );",
          "810:       testcase( iCol==BMS );",
          "811:       if( (idxCols & cMask)==0 ){",
          "812:         Expr *pX = pTerm->pExpr;",
          "813:         idxCols |= cMask;",
          "815:         pColl = sqlite3ExprCompareCollSeq(pParse, pX);",
          "817:         pIdx->azColl[n] = pColl ? pColl->zName : sqlite3StrBINARY;",
          "",
          "[Removed Lines]",
          "807:       int iCol = pTerm->u.leftColumn;",
          "814:         pIdx->aiColumn[n] = pTerm->u.leftColumn;",
          "",
          "[Added Lines]",
          "807:       int iCol = pTerm->u.x.leftColumn;",
          "814:         pIdx->aiColumn[n] = pTerm->u.x.leftColumn;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "932:     testcase( pTerm->eOperator & WO_ALL );",
          "933:     if( (pTerm->eOperator & ~(WO_EQUIV))==0 ) continue;",
          "934:     if( pTerm->wtFlags & TERM_VNULL ) continue;",
          "936:     nTerm++;",
          "937:   }",
          "",
          "[Removed Lines]",
          "935:     assert( pTerm->u.leftColumn>=(-1) );",
          "",
          "[Added Lines]",
          "935:     assert( pTerm->u.x.leftColumn>=(-1) );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "992:     ){",
          "993:       continue;",
          "994:     }",
          "997:     pIdxCons[j].iTermOffset = i;",
          "998:     op = pTerm->eOperator & WO_ALL;",
          "999:     if( op==WO_IN ) op = WO_EQ;",
          "",
          "[Removed Lines]",
          "995:     assert( pTerm->u.leftColumn>=(-1) );",
          "996:     pIdxCons[j].iColumn = pTerm->u.leftColumn;",
          "",
          "[Added Lines]",
          "995:     assert( pTerm->u.x.leftColumn>=(-1) );",
          "996:     pIdxCons[j].iColumn = pTerm->u.x.leftColumn;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1756:     if( pTerm->wtFlags & TERM_CODED  ) zType[3] = 'C';",
          "1757:     if( pTerm->eOperator & WO_SINGLE ){",
          "1758:       sqlite3_snprintf(sizeof(zLeft),zLeft,\"left={%d:%d}\",",
          "1760:     }else if( (pTerm->eOperator & WO_OR)!=0 && pTerm->u.pOrInfo!=0 ){",
          "1761:       sqlite3_snprintf(sizeof(zLeft),zLeft,\"indexable=0x%lld\",",
          "1762:                        pTerm->u.pOrInfo->indexable);",
          "",
          "[Removed Lines]",
          "1759:                        pTerm->leftCursor, pTerm->u.leftColumn);",
          "",
          "[Added Lines]",
          "1759:                        pTerm->leftCursor, pTerm->u.x.leftColumn);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1772:       sqlite3DebugPrintf(\" prob=%-3d prereq=%llx,%llx\",",
          "1773:         pTerm->truthProb, (u64)pTerm->prereqAll, (u64)pTerm->prereqRight);",
          "1774:     }",
          "1777:     }",
          "1778:     if( pTerm->iParent>=0 ){",
          "1779:       sqlite3DebugPrintf(\" iParent=%d\", pTerm->iParent);",
          "",
          "[Removed Lines]",
          "1775:     if( pTerm->iField ){",
          "1776:       sqlite3DebugPrintf(\" iField=%d\", pTerm->iField);",
          "",
          "[Added Lines]",
          "1775:     if( pTerm->u.x.iField ){",
          "1776:       sqlite3DebugPrintf(\" iField=%d\", pTerm->u.x.iField);",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "265:   union {",
          "269:   } u;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:     struct {",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "428:     for(i=iEq; i<pLoop->nLTerm; i++){",
          "429:       if( pLoop->aLTerm[i]->pExpr==pX ){",
          "432:         pRhs = sqlite3ExprListAppend(pParse, pRhs, pOrigRhs->a[iField].pExpr);",
          "433:         pOrigRhs->a[iField].pExpr = 0;",
          "",
          "[Removed Lines]",
          "430:         int iField = pLoop->aLTerm[i]->iField - 1;",
          "",
          "[Added Lines]",
          "430:         int iField = pLoop->aLTerm[i]->u.x.iField - 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2414: #endif",
          "2415:     assert( !ExprHasProperty(pE, EP_FromJoin) );",
          "2416:     assert( (pTerm->prereqRight & pLevel->notReady)!=0 );",
          "2418:                     WO_EQ|WO_IN|WO_IS, 0);",
          "2419:     if( pAlt==0 ) continue;",
          "2420:     if( pAlt->wtFlags & (TERM_CODED) ) continue;",
          "",
          "[Removed Lines]",
          "2417:     pAlt = sqlite3WhereFindTerm(pWC, iCur, pTerm->u.leftColumn, notReady,",
          "",
          "[Added Lines]",
          "2417:     pAlt = sqlite3WhereFindTerm(pWC, iCur, pTerm->u.x.leftColumn, notReady,",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "798:           assert( pOrTerm->wtFlags & (TERM_COPIED|TERM_VIRTUAL) );",
          "799:           continue;",
          "800:         }",
          "802:         iCursor = pOrTerm->leftCursor;",
          "803:         pLeft = pOrTerm->pExpr->pLeft;",
          "804:         break;",
          "",
          "[Removed Lines]",
          "801:         iColumn = pOrTerm->u.leftColumn;",
          "",
          "[Added Lines]",
          "801:         iColumn = pOrTerm->u.x.leftColumn;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "820:         assert( pOrTerm->eOperator & WO_EQ );",
          "821:         if( pOrTerm->leftCursor!=iCursor ){",
          "822:           pOrTerm->wtFlags &= ~TERM_OR_OK;",
          "824:                && sqlite3ExprCompare(pParse, pOrTerm->pExpr->pLeft, pLeft, -1)",
          "825:         )){",
          "826:           okToChngToIN = 0;",
          "",
          "[Removed Lines]",
          "823:         }else if( pOrTerm->u.leftColumn!=iColumn || (iColumn==XN_EXPR",
          "",
          "[Added Lines]",
          "823:         }else if( pOrTerm->u.x.leftColumn!=iColumn || (iColumn==XN_EXPR",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "855:         if( (pOrTerm->wtFlags & TERM_OR_OK)==0 ) continue;",
          "856:         assert( pOrTerm->eOperator & WO_EQ );",
          "857:         assert( pOrTerm->leftCursor==iCursor );",
          "859:         pDup = sqlite3ExprDup(db, pOrTerm->pExpr->pRight, 0);",
          "860:         pList = sqlite3ExprListAppend(pWInfo->pParse, pList, pDup);",
          "861:         pLeft = pOrTerm->pExpr->pLeft;",
          "",
          "[Removed Lines]",
          "858:         assert( pOrTerm->u.leftColumn==iColumn );",
          "",
          "[Added Lines]",
          "858:         assert( pOrTerm->u.x.leftColumn==iColumn );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1091:     Expr *pRight = sqlite3ExprSkipCollate(pExpr->pRight);",
          "1092:     u16 opMask = (pTerm->prereqRight & prereqLeft)==0 ? WO_ALL : WO_EQUIV;",
          "1095:       assert( op==TK_IN );",
          "1096:       assert( pLeft->op==TK_VECTOR );",
          "1098:     }",
          "1100:     if( exprMightBeIndexed(pSrc, prereqLeft, aiCurCol, pLeft, op) ){",
          "1101:       pTerm->leftCursor = aiCurCol[0];",
          "1103:       pTerm->eOperator = operatorMask(op) & opMask;",
          "1104:     }",
          "1105:     if( op==TK_IS ) pTerm->wtFlags |= TERM_IS;",
          "",
          "[Removed Lines]",
          "1094:     if( pTerm->iField>0 ){",
          "1097:       pLeft = pLeft->x.pList->a[pTerm->iField-1].pExpr;",
          "1102:       pTerm->u.leftColumn = aiCurCol[1];",
          "",
          "[Added Lines]",
          "1094:     if( pTerm->u.x.iField>0 ){",
          "1097:       pLeft = pLeft->x.pList->a[pTerm->u.x.iField-1].pExpr;",
          "1102:       pTerm->u.x.leftColumn = aiCurCol[1];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1109:       WhereTerm *pNew;",
          "1110:       Expr *pDup;",
          "1113:       if( pTerm->leftCursor>=0 ){",
          "1114:         int idxNew;",
          "1115:         pDup = sqlite3ExprDup(db, pExpr, 0);",
          "",
          "[Removed Lines]",
          "1112:       assert( pTerm->iField==0 );",
          "",
          "[Added Lines]",
          "1112:       assert( pTerm->u.x.iField==0 );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1135:       }",
          "1136:       pNew->wtFlags |= exprCommute(pParse, pDup);",
          "1137:       pNew->leftCursor = aiCurCol[0];",
          "1139:       testcase( (prereqLeft | extraRight) != prereqLeft );",
          "1140:       pNew->prereqRight = prereqLeft | extraRight;",
          "1141:       pNew->prereqAll = prereqAll;",
          "",
          "[Removed Lines]",
          "1138:       pNew->u.leftColumn = aiCurCol[1];",
          "",
          "[Added Lines]",
          "1138:       pNew->u.x.leftColumn = aiCurCol[1];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1309:         pNewTerm = &pWC->a[idxNew];",
          "1310:         pNewTerm->prereqRight = prereqExpr;",
          "1311:         pNewTerm->leftCursor = pLeft->iTable;",
          "1313:         pNewTerm->eOperator = WO_AUX;",
          "1314:         pNewTerm->eMatchOp = eOp2;",
          "1315:         markTermAsChild(pWC, idxNew, idxTerm);",
          "",
          "[Removed Lines]",
          "1312:         pNewTerm->u.leftColumn = pLeft->iColumn;",
          "",
          "[Added Lines]",
          "1312:         pNewTerm->u.x.leftColumn = pLeft->iColumn;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1366:    && pExpr->pLeft->op==TK_VECTOR",
          "1367:    && pExpr->x.pSelect->pPrior==0",
          "1368: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "[Removed Lines]",
          "1365:   if( pWC->op==TK_AND && pExpr->op==TK_IN && pTerm->iField==0",
          "",
          "[Added Lines]",
          "1365:   if( pWC->op==TK_AND && pExpr->op==TK_IN && pTerm->u.x.iField==0",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1373:     for(i=0; i<sqlite3ExprVectorSize(pExpr->pLeft); i++){",
          "1374:       int idxNew;",
          "1375:       idxNew = whereClauseInsert(pWC, pExpr, TERM_VIRTUAL);",
          "1377:       exprAnalyze(pSrc, pWC, idxNew);",
          "1378:       markTermAsChild(pWC, idxNew, idxTerm);",
          "1379:     }",
          "",
          "[Removed Lines]",
          "1376:       pWC->a[idxNew].iField = i+1;",
          "",
          "[Added Lines]",
          "1376:       pWC->a[idxNew].u.x.iField = i+1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1408:       pNewTerm = &pWC->a[idxNew];",
          "1409:       pNewTerm->prereqRight = 0;",
          "1410:       pNewTerm->leftCursor = pLeft->iTable;",
          "1412:       pNewTerm->eOperator = WO_GT;",
          "1413:       markTermAsChild(pWC, idxNew, idxTerm);",
          "1414:       pTerm = &pWC->a[idxTerm];",
          "",
          "[Removed Lines]",
          "1411:       pNewTerm->u.leftColumn = pLeft->iColumn;",
          "",
          "[Added Lines]",
          "1411:       pNewTerm->u.x.leftColumn = pLeft->iColumn;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31f170f396b6eaad5a222dd854ca08247ebb7692",
      "candidate_info": {
        "commit_hash": "31f170f396b6eaad5a222dd854ca08247ebb7692",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/31f170f396b6eaad5a222dd854ca08247ebb7692",
        "files": [
          "ext/expert/expert1.test",
          "manifest",
          "manifest.uuid",
          "src/attach.c",
          "src/build.c",
          "src/dbstat.c",
          "src/resolve.c",
          "src/sqliteInt.h",
          "src/trigger.c",
          "test/attach.test",
          "test/e_createtable.test",
          "test/e_dropview.test",
          "test/misc8.test",
          "test/permutations.test",
          "test/tester.tcl"
        ],
        "message": "Ensure that \"main\" can always be used to refer to the main database, even if it has been renamed using SQLITE_DBCONFIG_MAINDBNAME.\n\nFossilOrigin-Name: 682b426f5658254e63dff02c960b557fb33cb3e944fdd14faa0aa9988af7269a",
        "before_after_code_files": [
          "ext/expert/expert1.test||ext/expert/expert1.test",
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c",
          "src/build.c||src/build.c",
          "src/dbstat.c||src/dbstat.c",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/trigger.c||src/trigger.c",
          "test/attach.test||test/attach.test",
          "test/e_createtable.test||test/e_createtable.test",
          "test/e_dropview.test||test/e_dropview.test",
          "test/misc8.test||test/misc8.test",
          "test/permutations.test||test/permutations.test",
          "test/tester.tcl||test/tester.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/expert/expert1.test||ext/expert/expert1.test": [
          "File: ext/expert/expert1.test -> ext/expert/expert1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: proc do_setup_rec_test {tn setup sql res} {",
          "39:   reset_db",
          "40:   db eval $setup",
          "41:   uplevel [list do_rec_test $tn $sql $res]",
          "42: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:   if {[info exists ::set_main_db_name]} {",
          "41:     dbconfig_maindbname_icecube db",
          "42:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:     }",
          "77:   }",
          "78:   3 {",
          "79:     if {![file executable $CLI]} { continue }",
          "81:     proc do_rec_test {tn sql res} {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:     if {[info commands sqlite3_expert_new]==\"\"} { continue }",
          "83:     set ::set_main_db_name 1",
          "84:   }",
          "85:   4 {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "338: reset_db",
          "340:   CREATE TABLE t1(a, b);",
          "341:   CREATE TABLE t2(c, d);",
          "",
          "[Removed Lines]",
          "339: do_execsql_test 4.0 {",
          "",
          "[Added Lines]",
          "346: do_execsql_test 5.0 {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "346:   WITH s(i) AS ( VALUES(1) UNION ALL SELECT i+1 FROM s WHERE i<100)",
          "347:   INSERT INTO t2 SELECT (i-1)/20, (i-1)/5 FROM s;",
          "348: }",
          "350:   SELECT * FROM t1,t2 WHERE (b=? OR a=?) AND (c=? OR d=?)",
          "351: } {",
          "352:   CREATE INDEX t1_idx_00000062 ON t1(b); -- stat1: 100 20",
          "",
          "[Removed Lines]",
          "349: do_candidates_test 4.1 {",
          "",
          "[Added Lines]",
          "356: do_candidates_test 5.1 {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "355:   CREATE INDEX t2_idx_00000064 ON t2(d); -- stat1: 100 5",
          "356: }",
          "359:   SELECT * FROM t1,t2 WHERE a=? AND b=? AND c=? AND d=?",
          "360: } {",
          "361:   CREATE INDEX t1_idx_000123a7 ON t1(a, b); -- stat1: 100 50 17",
          "362:   CREATE INDEX t2_idx_0001295b ON t2(c, d); -- stat1: 100 20 5",
          "363: }",
          "366:   CREATE INDEX t1_idx_00000061 ON t1(a); -- stat1: 100 50",
          "367:   CREATE INDEX t1_idx_00000062 ON t1(b); -- stat1: 100 20",
          "368:   CREATE INDEX t1_idx_000123a7 ON t1(a, b); -- stat1: 100 50 16",
          "",
          "[Removed Lines]",
          "358: do_candidates_test 4.2 {",
          "365: do_execsql_test 4.3 {",
          "",
          "[Added Lines]",
          "365: do_candidates_test 5.2 {",
          "372: do_execsql_test 5.3 {",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0d4d3c642494ad494b4ec937215eaf833158e62e5ae59ed981d6b546220c13b8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:   return rc;",
          "46: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: int sqlite3DbIsNamed(sqlite3 *db, int iDb, const char *zName){",
          "53:   return (",
          "54:       sqlite3StrICmp(db->aDb[iDb].zDbSName, zName)==0",
          "55:    || (iDb==0 && sqlite3StrICmp(\"main\", zName)==0)",
          "56:   );",
          "57: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:       goto attach_error;",
          "118:     }",
          "119:     for(i=0; i<db->nDb; i++){",
          "123:         zErrDyn = sqlite3MPrintf(db, \"database %s is already in use\", zName);",
          "124:         goto attach_error;",
          "125:       }",
          "",
          "[Removed Lines]",
          "120:       char *z = db->aDb[i].zDbSName;",
          "121:       assert( z && zName );",
          "122:       if( sqlite3StrICmp(z, zName)==0 ){",
          "",
          "[Added Lines]",
          "131:       assert( zName );",
          "132:       if( sqlite3DbIsNamed(db, i, zName) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "272:   for(i=0; i<db->nDb; i++){",
          "273:     pDb = &db->aDb[i];",
          "274:     if( pDb->pBt==0 ) continue;",
          "276:   }",
          "278:   if( i>=db->nDb ){",
          "",
          "[Removed Lines]",
          "275:     if( sqlite3StrICmp(pDb->zDbSName, zName)==0 ) break;",
          "",
          "[Added Lines]",
          "285:     if( sqlite3DbIsNamed(db, i, zName) ) break;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "465:   int i;",
          "466:   const char *zDb;",
          "467:   struct SrcList_item *pItem;",
          "469:   if( NEVER(pList==0) ) return 0;",
          "470:   zDb = pFix->zDb;",
          "471:   for(i=0, pItem=pList->a; i<pList->nSrc; i++, pItem++){",
          "472:     if( pFix->bTemp==0 ){",
          "474:         sqlite3ErrorMsg(pFix->pParse,",
          "475:             \"%s %T cannot reference objects in database %s\",",
          "476:             pFix->zType, pFix->pName, pItem->zDatabase);",
          "",
          "[Removed Lines]",
          "473:       if( pItem->zDatabase && sqlite3StrICmp(pItem->zDatabase, zDb) ){",
          "",
          "[Added Lines]",
          "478:   sqlite3 *db = pFix->pParse->db;",
          "479:   const char *zAlt = 0;",
          "489:   if( sqlite3StrICmp(db->aDb[0].zDbSName, zDb)==0 ){",
          "490:     zAlt = \"main\";",
          "491:   }else if( sqlite3StrICmp(\"main\", zDb)==0 ){",
          "492:     zAlt = db->aDb[0].zDbSName;",
          "493:   }",
          "497:       if( pItem->zDatabase",
          "498:        && sqlite3StrICmp(pItem->zDatabase, zDb)",
          "499:        && sqlite3_stricmp(pItem->zDatabase, zAlt)",
          "500:       ){",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:   while(1){",
          "316:     for(i=OMIT_TEMPDB; i<db->nDb; i++){",
          "319:         assert( sqlite3SchemaMutexHeld(db, j, 0) );",
          "320:         p = sqlite3HashFind(&db->aDb[j].pSchema->tblHash, zName);",
          "321:         if( p ) return p;",
          "",
          "[Removed Lines]",
          "318:       if( zDatabase==0 || sqlite3StrICmp(zDatabase, db->aDb[j].zDbSName)==0 ){",
          "",
          "[Added Lines]",
          "318:       if( zDatabase==0 || sqlite3DbIsNamed(db, j, zDatabase) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "438:     Schema *pSchema = db->aDb[j].pSchema;",
          "439:     assert( pSchema );",
          "441:     assert( sqlite3SchemaMutexHeld(db, j, 0) );",
          "442:     p = sqlite3HashFind(&pSchema->idxHash, zName);",
          "443:     if( p ) break;",
          "",
          "[Removed Lines]",
          "440:     if( zDb && sqlite3StrICmp(zDb, db->aDb[j].zDbSName) ) continue;",
          "",
          "[Added Lines]",
          "440:     if( zDb && sqlite3DbIsNamed(db, j, zDb)==0 ) continue;",
          "",
          "---------------"
        ],
        "src/dbstat.c||src/dbstat.c": [
          "File: src/dbstat.c -> src/dbstat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:   i = 0;",
          "239:   if( iSchema>=0 ){",
          "240:     pIdxInfo->aConstraintUsage[iSchema].argvIndex = ++i;",
          "241:     pIdxInfo->idxNum |= 0x01;",
          "242:   }",
          "243:   if( iName>=0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241:     pIdxInfo->aConstraintUsage[iSchema].omit = 1;",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "252:           break;",
          "253:         }",
          "254:       }",
          "255:     }",
          "256:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255:       if( i==db->nDb && sqlite3StrICmp(\"main\", zDb)==0 ){",
          "258:         pSchema = db->aDb[0].pSchema;",
          "259:         zDb = db->aDb[0].zDbSName;",
          "260:       }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4395: # define sqlite3AuthContextPush(a,b,c)",
          "4396: # define sqlite3AuthContextPop(a)  ((void)(a))",
          "4397: #endif",
          "4398: void sqlite3Attach(Parse*, Expr*, Expr*, Expr*);",
          "4399: void sqlite3Detach(Parse*, Expr*);",
          "4400: void sqlite3FixInit(DbFixer*, Parse*, int, const char*, const Token*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4398: int sqlite3DbIsNamed(sqlite3 *db, int iDb, const char *zName);",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "580:   assert( zDb!=0 || sqlite3BtreeHoldsAllMutexes(db) );",
          "581:   for(i=OMIT_TEMPDB; i<db->nDb; i++){",
          "584:     assert( sqlite3SchemaMutexHeld(db, j, 0) );",
          "585:     pTrigger = sqlite3HashFind(&(db->aDb[j].pSchema->trigHash), zName);",
          "586:     if( pTrigger ) break;",
          "",
          "[Removed Lines]",
          "583:     if( zDb && sqlite3StrICmp(db->aDb[j].zDbSName, zDb) ) continue;",
          "",
          "[Added Lines]",
          "583:     if( zDb && sqlite3DbIsNamed(db, j, zDb)==0 ) continue;",
          "",
          "---------------"
        ],
        "test/attach.test||test/attach.test": [
          "File: test/attach.test -> test/attach.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:     ATTACH 'test.db' as db9;",
          "149:   }",
          "150: } {1 {database db9 is already in use}}",
          "155: } {1 {database main is already in use}}",
          "156: ifcapable tempdb {",
          "157:   do_test attach-1.16 {",
          "",
          "[Removed Lines]",
          "151: do_test attach-1.15 {",
          "152:   catchsql {",
          "153:     ATTACH 'test.db' as main;",
          "154:   }",
          "",
          "[Added Lines]",
          "151: do_catchsql_test attach-1.15 {",
          "152:   ATTACH 'test.db' as main;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160:     }",
          "161:   } {1 {database temp is already in use}}",
          "162: }",
          "167: } {1 {database MAIN is already in use}}",
          "168: do_test attach-1.18 {",
          "169:   catchsql {",
          "",
          "[Removed Lines]",
          "163: do_test attach-1.17 {",
          "164:   catchsql {",
          "165:     ATTACH 'test.db' as MAIN;",
          "166:   }",
          "",
          "[Added Lines]",
          "161: do_catchsql_test attach-1.17 {",
          "162:   ATTACH 'test.db' as MAIN;",
          "",
          "---------------"
        ],
        "test/e_createtable.test||test/e_createtable.test": [
          "File: test/e_createtable.test -> test/e_createtable.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "395:   4    {CREATE TABLE auxb.xyz(z)}                {}",
          "396: }",
          "397: drop_all_tables",
          "409: }",
          "411: # EVIDENCE-OF: R-18895-27365 If the \"TEMP\" or \"TEMPORARY\" keyword occurs",
          "",
          "[Removed Lines]",
          "398: do_createtable_tests 1.3 -tclquery {",
          "399:   unset -nocomplain X",
          "400:   array set X [table_list]",
          "401:   list $X(main) $X(temp) $X(auxa) $X(auxb)",
          "402: } {",
          "403:   1    \"CREATE TABLE main.abc(a, b, c)\"  {abc {} {} {}}",
          "404:   2    \"CREATE TABLE main.t1(a, b, c)\"   {{abc t1} {} {} {}}",
          "405:   3    \"CREATE TABLE temp.tmp(a, b, c)\"  {{abc t1} tmp {} {}}",
          "406:   4    \"CREATE TABLE auxb.tbl(x, y)\"     {{abc t1} tmp {} tbl}",
          "407:   5    \"CREATE TABLE auxb.t1(k, v)\"      {{abc t1} tmp {} {t1 tbl}}",
          "408:   6    \"CREATE TABLE auxa.next(c, d)\"    {{abc t1} tmp next {t1 tbl}}",
          "",
          "[Added Lines]",
          "398: if {[permutation]!=\"maindbname\"} {",
          "399:   do_createtable_tests 1.3 -tclquery {",
          "400:     unset -nocomplain X",
          "401:     array set X [table_list]",
          "402:     list $X(main) $X(temp) $X(auxa) $X(auxb)",
          "403:   } {",
          "404:     1    \"CREATE TABLE main.abc(a, b, c)\"  {abc {} {} {}}",
          "405:     2    \"CREATE TABLE main.t1(a, b, c)\"   {{abc t1} {} {} {}}",
          "406:     3    \"CREATE TABLE temp.tmp(a, b, c)\"  {{abc t1} tmp {} {}}",
          "407:     4    \"CREATE TABLE auxb.tbl(x, y)\"     {{abc t1} tmp {} tbl}",
          "408:     5    \"CREATE TABLE auxb.t1(k, v)\"      {{abc t1} tmp {} {t1 tbl}}",
          "409:     6    \"CREATE TABLE auxa.next(c, d)\"    {{abc t1} tmp next {t1 tbl}}",
          "410:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "413: # temp database.",
          "414: #",
          "415: drop_all_tables",
          "423: }",
          "425: # EVIDENCE-OF: R-23976-43329 It is an error to specify both a",
          "",
          "[Removed Lines]",
          "416: do_createtable_tests 1.4 -tclquery {",
          "417:   unset -nocomplain X",
          "418:   array set X [table_list]",
          "419:   list $X(main) $X(temp) $X(auxa) $X(auxb)",
          "420: } {",
          "421:   1    \"CREATE TEMP TABLE t1(a, b)\"      {{} t1 {} {}}",
          "422:   2    \"CREATE TEMPORARY TABLE t2(a, b)\" {{} {t1 t2} {} {}}",
          "",
          "[Added Lines]",
          "418: if {[permutation]!=\"maindbname\"} {",
          "419:   do_createtable_tests 1.4 -tclquery {",
          "420:     unset -nocomplain X",
          "421:     array set X [table_list]",
          "422:     list $X(main) $X(temp) $X(auxa) $X(auxb)",
          "423:   } {",
          "424:     1    \"CREATE TEMP TABLE t1(a, b)\"      {{} t1 {} {}}",
          "425:     2    \"CREATE TEMPORARY TABLE t2(a, b)\" {{} {t1 t2} {} {}}",
          "426:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "436:   4    \"CREATE TEMPORARY TABLE main.xxx(x)\"     {}",
          "437: }",
          "438: drop_all_tables",
          "448: }",
          "450: # EVIDENCE-OF: R-31997-24564 If no schema name is specified and the TEMP",
          "451: # keyword is not present then the table is created in the main database.",
          "452: #",
          "453: drop_all_tables",
          "463: }",
          "465: drop_all_tables",
          "",
          "[Removed Lines]",
          "439: do_createtable_tests 1.5.2 -tclquery {",
          "440:   unset -nocomplain X",
          "441:   array set X [table_list]",
          "442:   list $X(main) $X(temp) $X(auxa) $X(auxb)",
          "443: } {",
          "444:   1    \"CREATE TEMP TABLE temp.t1(a, b)\"        {{} t1 {} {}}",
          "445:   2    \"CREATE TEMPORARY TABLE temp.t2(a, b)\"   {{} {t1 t2} {} {}}",
          "446:   3    \"CREATE TEMP TABLE TEMP.t3(a, b)\"        {{} {t1 t2 t3} {} {}}",
          "447:   4    \"CREATE TEMPORARY TABLE TEMP.xxx(x)\"     {{} {t1 t2 t3 xxx} {} {}}",
          "454: do_createtable_tests 1.6 -tclquery {",
          "455:   unset -nocomplain X",
          "456:   array set X [table_list]",
          "457:   list $X(main) $X(temp) $X(auxa) $X(auxb)",
          "458: } {",
          "459:   1    \"CREATE TABLE t1(a, b)\"   {t1 {} {} {}}",
          "460:   2    \"CREATE TABLE t2(a, b)\"   {{t1 t2} {} {} {}}",
          "461:   3    \"CREATE TABLE t3(a, b)\"   {{t1 t2 t3} {} {} {}}",
          "462:   4    \"CREATE TABLE xxx(x)\"     {{t1 t2 t3 xxx} {} {} {}}",
          "",
          "[Added Lines]",
          "443: if {[permutation]!=\"maindbname\"} {",
          "444:   do_createtable_tests 1.5.2 -tclquery {",
          "445:     unset -nocomplain X",
          "446:     array set X [table_list]",
          "447:     list $X(main) $X(temp) $X(auxa) $X(auxb)",
          "448:   } {",
          "449:     1    \"CREATE TEMP TABLE temp.t1(a, b)\"        {{} t1 {} {}}",
          "450:     2    \"CREATE TEMPORARY TABLE temp.t2(a, b)\"   {{} {t1 t2} {} {}}",
          "451:     3    \"CREATE TEMP TABLE TEMP.t3(a, b)\"        {{} {t1 t2 t3} {} {}}",
          "452:     4    \"CREATE TEMPORARY TABLE TEMP.xxx(x)\"     {{} {t1 t2 t3 xxx} {} {}}",
          "453:   }",
          "460: if {[permutation]!=\"maindbname\"} {",
          "461:   do_createtable_tests 1.6 -tclquery {",
          "462:     unset -nocomplain X",
          "463:     array set X [table_list]",
          "464:     list $X(main) $X(temp) $X(auxa) $X(auxb)",
          "465:   } {",
          "466:     1    \"CREATE TABLE t1(a, b)\"   {t1 {} {} {}}",
          "467:     2    \"CREATE TABLE t2(a, b)\"   {{t1 t2} {} {} {}}",
          "468:     3    \"CREATE TABLE t3(a, b)\"   {{t1 t2 t3} {} {} {}}",
          "469:     4    \"CREATE TABLE xxx(x)\"     {{t1 t2 t3 xxx} {} {} {}}",
          "470:   }",
          "",
          "---------------"
        ],
        "test/e_dropview.test||test/e_dropview.test": [
          "File: test/e_dropview.test -> test/e_dropview.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: do_execsql_test  3.1.1 { DROP VIEW temp.v1 } {}",
          "127: do_catchsql_test 3.1.2 { SELECT * FROM temp.v1 } {1 {no such table: temp.v1}}",
          "128: do_test          3.1.3 { list_all_views } {main.v1 main.v2 aux.v1 aux.v2 aux.v3}",
          "131: do_execsql_test  3.2.0 { SELECT * FROM v1 } {{a main} {b main}}",
          "132: do_execsql_test  3.2.1 { DROP VIEW v1 } {}",
          "133: do_catchsql_test 3.2.2 { SELECT * FROM main.v1 } {1 {no such table: main.v1}}",
          "134: do_test          3.2.3 { list_all_views } {main.v2 aux.v1 aux.v2 aux.v3}",
          "137: do_execsql_test  3.3.0 { SELECT * FROM v2 } {{a main} {b main}}",
          "138: do_execsql_test  3.3.1 { DROP VIEW v2 } {}",
          "139: do_catchsql_test 3.3.2 { SELECT * FROM main.v2 } {1 {no such table: main.v2}}",
          "140: do_test          3.3.3 { list_all_views } {aux.v1 aux.v2 aux.v3}",
          "143: do_execsql_test  3.4.0 { SELECT * FROM v1 } {{a aux} {b aux}}",
          "144: do_execsql_test  3.4.1 { DROP VIEW v1 } {}",
          "145: do_catchsql_test 3.4.2 { SELECT * FROM v1 } {1 {no such table: v1}}",
          "146: do_test          3.4.3 { list_all_views } {aux.v2 aux.v3}",
          "161: # EVIDENCE-OF: R-25558-37487 If the specified view cannot be found and",
          "162: # the IF EXISTS clause is not present, it is an error.",
          "",
          "[Removed Lines]",
          "129: do_test          3.1.4 { list_all_data  } $databasedata",
          "135: do_test          3.2.4 { list_all_data  } $databasedata",
          "141: do_test          3.3.4 { list_all_data  } $databasedata",
          "147: do_test          3.4.4 { list_all_data  } $databasedata",
          "149: do_execsql_test  3.4.0 { SELECT * FROM aux.v2 } {{a aux} {b aux}}",
          "150: do_execsql_test  3.4.1 { DROP VIEW aux.v2 } {}",
          "151: do_catchsql_test 3.4.2 { SELECT * FROM aux.v2 } {1 {no such table: aux.v2}}",
          "152: do_test          3.4.3 { list_all_views } {aux.v3}",
          "153: do_test          3.4.4 { list_all_data  } $databasedata",
          "155: do_execsql_test  3.5.0 { SELECT * FROM v3 } {{a aux} {b aux}}",
          "156: do_execsql_test  3.5.1 { DROP VIEW v3 } {}",
          "157: do_catchsql_test 3.5.2 { SELECT * FROM v3 } {1 {no such table: v3}}",
          "158: do_test          3.5.3 { list_all_views } {}",
          "159: do_test          3.5.4 { list_all_data  } $databasedata",
          "",
          "[Added Lines]",
          "129: do_test          3.1.4 { string compare [list_all_data] $databasedata } 0",
          "135: do_test          3.2.4 { string compare [list_all_data] $databasedata } 0",
          "141: do_test          3.3.4 { string compare [list_all_data] $databasedata } 0",
          "147: do_test          3.4.4 { string compare [list_all_data] $databasedata } 0",
          "149: do_execsql_test  3.5.0 { SELECT * FROM aux.v2 } {{a aux} {b aux}}",
          "150: do_execsql_test  3.5.1 { DROP VIEW aux.v2 } {}",
          "151: do_catchsql_test 3.5.2 { SELECT * FROM aux.v2 } {1 {no such table: aux.v2}}",
          "152: do_test          3.5.3 { list_all_views } {aux.v3}",
          "153: do_test          3.5.4 { string compare [list_all_data] $databasedata } 0",
          "155: do_execsql_test  3.6.0 { SELECT * FROM v3 } {{a aux} {b aux}}",
          "156: do_execsql_test  3.6.1 { DROP VIEW v3 } {}",
          "157: do_catchsql_test 3.6.2 { SELECT * FROM v3 } {1 {no such table: v3}}",
          "158: do_test          3.6.3 { list_all_views } {}",
          "159: do_test          3.6.4 { string compare [list_all_data] $databasedata } 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "179:   dropview_reopen_db",
          "180: } -tclquery {",
          "181:   list_all_views",
          "183: } {",
          "187: }",
          "",
          "[Removed Lines]",
          "182:   expr {[list_all_views] == \"main.v1 main.v2 temp.v1 aux.v1 aux.v2 aux.v3\"}",
          "184:   1    \"DROP VIEW IF EXISTS xx\"       1",
          "185:   2    \"DROP VIEW IF EXISTS main.xx\"  1",
          "186:   3    \"DROP VIEW IF EXISTS temp.v2\"  1",
          "",
          "[Added Lines]",
          "182:   #expr {[list_all_views] == \"main.v1 main.v2 temp.v1 aux.v1 aux.v2 aux.v3\"}",
          "184:   1    \"DROP VIEW IF EXISTS xx\" \"main.v1 main.v2 temp.v1 aux.v1 aux.v2 aux.v3\"",
          "185:   2    \"DROP VIEW IF EXISTS main.xx\" \"main.v1 main.v2 temp.v1 aux.v1 aux.v2 aux.v3\"",
          "186:   3    \"DROP VIEW IF EXISTS temp.v2\" \"main.v1 main.v2 temp.v1 aux.v1 aux.v2 aux.v3\"",
          "",
          "---------------"
        ],
        "test/misc8.test||test/misc8.test": [
          "File: test/misc8.test -> test/misc8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: do_execsql_test misc8-4.2 {",
          "133:   SELECT name FROM icecube.sqlite_master;",
          "134: } {t1}",
          "",
          "[Removed Lines]",
          "135: do_execsql_test misc8-4.3 {",
          "136:   PRAGMA database_list;",
          "137: } {/0 icecube .* 2 aux2/}",
          "",
          "[Added Lines]",
          "135: do_test misc8-4.3 {",
          "136:   regexp {0 icecube .* 2 aux2} [db eval {PRAGMA database_list}]",
          "137: } 1",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1075:   autoinstall_test_functions",
          "1076: }",
          "1078: # End of tests",
          "1079: #############################################################################",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1078: test_suite \"maindbname\" -prefix \"\" -description {",
          "1079:   Run the \"veryquick\" test suite with SQLITE_DBCONFIG_MAINDBNAME used to",
          "1080:   set the name of database 0 to \"icecube\".",
          "1081: } -files [",
          "1082:   test_set $allquicktests -exclude *malloc* *ioerr* *fault* *bigfile* *_err* \\",
          "1084: ] -dbconfig {",
          "1085:   dbconfig_maindbname_icecube $::dbhandle",
          "1086: }",
          "",
          "---------------"
        ],
        "test/tester.tcl||test/tester.tcl": [
          "File: test/tester.tcl -> test/tester.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "782:       output2 \"\\nError: $result\"",
          "783:       fail_test $name",
          "784:     } else {",
          "785:       if {[regexp {^[~#]?/.*/$} $expected]} {",
          "786:         # \"expected\" is of the form \"/PATTERN/\" then the result if correct if",
          "787:         # regular expression PATTERN matches the result.  \"~/PATTERN/\" means",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "785:       if {[permutation]==\"maindbname\"} {",
          "786:         set result [string map [list [string tolower ICECUBE] main] $result]",
          "787:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "409f3370af8cafde7659855f9f8a35958a72c0b0",
      "candidate_info": {
        "commit_hash": "409f3370af8cafde7659855f9f8a35958a72c0b0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/409f3370af8cafde7659855f9f8a35958a72c0b0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/select.c",
          "test/altertab3.test"
        ],
        "message": "Second attempt to fix a problem with unwinding the WITH stack of the Parse object following an error.\n\nFossilOrigin-Name: 315d1f1a503e8c186739658c85b92fa3d12514e5baaa26925c85664b5e85d1c0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/select.c||src/select.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0d743585c242ebd898b232f42937a2306752aaed0a6756705e3ef1cf7593aa97",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2625:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel, SQLITE_AFF_NONE);",
          "2626: #endif",
          "2627:     pParse->nTab = n;",
          "",
          "[Removed Lines]",
          "2628:     if( pTable->pCheck ){",
          "",
          "[Added Lines]",
          "2628:     if( pSelTab==0 ){",
          "2629:       pTable->nCol = 0;",
          "2630:       nErr++;",
          "2631:     }else if( pTable->pCheck ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2641:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTable, pSel,",
          "2642:                                                SQLITE_AFF_NONE);",
          "2643:       }",
          "",
          "[Removed Lines]",
          "2644:     }else if( pSelTab ){",
          "",
          "[Added Lines]",
          "2647:     }else{",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2651:       pSelTab->nCol = 0;",
          "2652:       pSelTab->aCol = 0;",
          "2653:       assert( sqlite3SchemaMutexHeld(db, 0, pTable->pSchema) );",
          "2657:     }",
          "2658:     pTable->nNVCol = pTable->nCol;",
          "2659:     sqlite3DeleteTable(db, pSelTab);",
          "",
          "[Removed Lines]",
          "2654:     }else{",
          "2655:       pTable->nCol = 0;",
          "2656:       nErr++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4982:     return WRC_Abort;",
          "4983:   }",
          "",
          "[Removed Lines]",
          "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
          "",
          "[Added Lines]",
          "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "531:   ALTER TABLE t1 RENAME TO t1x;",
          "532: } {1 {error in trigger r1: no such table: main.t2}}",
          "534: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "534: #------------------------------------------------------------------------",
          "535: #",
          "536: reset_db",
          "537: do_execsql_test 23.1 {",
          "538:   CREATE TABLE v0 (a);",
          "539:   CREATE VIEW v2 (v3) AS",
          "540:     WITH x1 AS (SELECT * FROM v2)",
          "541:     SELECT v3 AS x, v3 AS y FROM v2;",
          "542: }",
          "544: do_catchsql_test 23.2 {",
          "545:   SELECT * FROM v2",
          "546: } {1 {view v2 is circularly defined}}",
          "548: db close",
          "549: sqlite3 db test.db",
          "551: do_catchsql_test 23.3 {",
          "552:   ALTER TABLE v0 RENAME TO t3 ;",
          "553: } {1 {error in view v2: view v2 is circularly defined}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56215eaff4a28d291bfbbcc2d1433c9d3bc3b0a8",
      "candidate_info": {
        "commit_hash": "56215eaff4a28d291bfbbcc2d1433c9d3bc3b0a8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/56215eaff4a28d291bfbbcc2d1433c9d3bc3b0a8",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/corruptL.test"
        ],
        "message": "Add second test case for the improvement in [30735432].\n\nFossilOrigin-Name: 1bd18ca35bdbf3034591bf8981fd3a985f0920379bc4dc81e0e6a819667998e9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/corruptL.test||test/corruptL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 30735432bc33cb953b6d7d2a2de9eb378f9740e0e663f50c727c3f138cd43a2b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1266: do_execsql_test 15.1 {",
          "1267:   UPDATE c1 SET c= NOT EXISTS(SELECT 1 FROM c1 ORDER BY (SELECT 1 FROM c1 ORDER BY a)) +10 WHERE d BETWEEN 4 AND 7;",
          "1268: } {}",
          "1269: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1270: #-------------------------------------------------------------------------",
          "1271: reset_db",
          "1272: do_execsql_test 16.0 {",
          "1273:   CREATE TABLE t1(w, x, y, z, UNIQUE(w, x), UNIQUE(y, z));",
          "1274:   INSERT INTO t1 VALUES(1, 1, 1, 1);",
          "1276:   CREATE TABLE t1idx(x, y, i INTEGER, PRIMARY KEY(x)) WITHOUT ROWID;",
          "1277:   INSERT INTO t1idx VALUES(10, NULL, 5);",
          "1279:   PRAGMA writable_schema = 1;",
          "1280:   UPDATE sqlite_master SET rootpage = (",
          "1281:     SELECT rootpage FROM sqlite_master WHERE name='t1idx'",
          "1282:   ) WHERE type = 'index';",
          "1283: }",
          "1285: db close",
          "1286: sqlite3 db test.db",
          "1288: do_catchsql_test 16.1 {",
          "1289:   PRAGMA writable_schema = ON;",
          "1290:   INSERT INTO t1(rowid, w, x, y, z) VALUES(5, 10, 11, 10, NULL);",
          "1291: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}