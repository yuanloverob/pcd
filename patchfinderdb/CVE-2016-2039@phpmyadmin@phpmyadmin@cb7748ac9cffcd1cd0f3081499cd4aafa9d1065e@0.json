{
  "cve_id": "CVE-2016-2039",
  "cve_desc": "libraries/session.inc.php in phpMyAdmin 4.0.x before 4.0.10.13, 4.4.x before 4.4.15.3, and 4.5.x before 4.5.4 does not properly generate CSRF token values, which allows remote attackers to bypass intended access restrictions by predicting a value.",
  "repo": "phpmyadmin/phpmyadmin",
  "patch_hash": "cb7748ac9cffcd1cd0f3081499cd4aafa9d1065e",
  "patch_info": {
    "commit_hash": "cb7748ac9cffcd1cd0f3081499cd4aafa9d1065e",
    "repo": "phpmyadmin/phpmyadmin",
    "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/cb7748ac9cffcd1cd0f3081499cd4aafa9d1065e",
    "files": [
      "libraries/phpseclib/Crypt/AES.php",
      "libraries/phpseclib/Crypt/Base.php",
      "libraries/phpseclib/Crypt/Random.php",
      "libraries/phpseclib/Crypt/Rijndael.php"
    ],
    "message": "Update phpseclib to 2.0.1\n\nNew version uses PHP 7.0 random_bytes to generate cryptographically secure\npseudo-random bytes.\n\nSigned-off-by: Michal \u010ciha\u0159 <michal@cihar.com>",
    "before_after_code_files": [
      "libraries/phpseclib/Crypt/AES.php||libraries/phpseclib/Crypt/AES.php",
      "libraries/phpseclib/Crypt/Base.php||libraries/phpseclib/Crypt/Base.php",
      "libraries/phpseclib/Crypt/Random.php||libraries/phpseclib/Crypt/Random.php",
      "libraries/phpseclib/Crypt/Rijndael.php||libraries/phpseclib/Crypt/Rijndael.php"
    ]
  },
  "patch_diff": {
    "libraries/phpseclib/Crypt/AES.php||libraries/phpseclib/Crypt/AES.php": [
      "File: libraries/phpseclib/Crypt/AES.php -> libraries/phpseclib/Crypt/AES.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "114:             $length = strlen($key);",
      "115:             switch (true) {",
      "116:                 case $length <= 16:",
      "118:                     break;",
      "119:                 case $length <= 24:",
      "121:                     break;",
      "122:                 default:",
      "124:             }",
      "125:             $this->_setEngine();",
      "126:         }",
      "",
      "[Removed Lines]",
      "117:                     $this->key_size = 16;",
      "120:                     $this->key_size = 24;",
      "123:                     $this->key_size = 32;",
      "",
      "[Added Lines]",
      "117:                     $this->key_length = 16;",
      "120:                     $this->key_length = 24;",
      "123:                     $this->key_length = 32;",
      "",
      "---------------"
    ],
    "libraries/phpseclib/Crypt/Base.php||libraries/phpseclib/Crypt/Base.php": [
      "File: libraries/phpseclib/Crypt/Base.php -> libraries/phpseclib/Crypt/Base.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "379:     var $cipher_name_openssl_ecb;",
      "397:     var $password_default_salt = 'phpseclib/salt';",
      "",
      "[Removed Lines]",
      "388:     var $password_key_size = 32;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "441:     var $openssl_options;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "441:     var $explicit_key_length = false;",
      "450:     var $skip_key_adjustment = false;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "512:         $this->changed = true;",
      "513:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "530:     function setKeyLength($length)",
      "531:     {",
      "532:         $this->explicit_key_length = true;",
      "533:         $this->changed = true;",
      "534:         $this->_setEngine();",
      "535:     }",
      "543:     function getKeyLength()",
      "544:     {",
      "545:         return $this->key_length << 3;",
      "546:     }",
      "554:     function getBlockLength()",
      "555:     {",
      "556:         return $this->block_size << 3;",
      "557:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "529:     function setKey($key)",
      "530:     {",
      "531:         $this->key = $key;",
      "532:         $this->changed = true;",
      "533:         $this->_setEngine();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "575:         if (!$this->explicit_key_length) {",
      "576:             $this->setKeyLength(strlen($key) << 3);",
      "577:             $this->explicit_key_length = false;",
      "578:         }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "571:                 if (isset($func_args[5])) {",
      "572:                     $dkLen = $func_args[5];",
      "573:                 } else {",
      "575:                 }",
      "577:                 switch (true) {",
      "",
      "[Removed Lines]",
      "574:                     $dkLen = $method == 'pbkdf1' ? 2 * $this->password_key_size : $this->password_key_size;",
      "",
      "[Added Lines]",
      "623:                     $dkLen = $method == 'pbkdf1' ? 2 * $this->key_length : $this->key_length;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "914:                 if ($this->continuousBuffer) {",
      "915:                     $this->encryptIV = $xor;",
      "916:                     if ($start = strlen($plaintext) % $block_size) {",
      "918:                     }",
      "919:                 }",
      "920:                 break;",
      "",
      "[Removed Lines]",
      "917:                          $buffer['xor'] = substr($key, $start) . $buffer['xor'];",
      "",
      "[Added Lines]",
      "966:                         $buffer['xor'] = substr($key, $start) . $buffer['xor'];",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1204:                 if ($this->continuousBuffer) {",
      "1205:                     $this->decryptIV = $xor;",
      "1206:                     if ($start = strlen($ciphertext) % $block_size) {",
      "1208:                     }",
      "1209:                 }",
      "1210:                 break;",
      "",
      "[Removed Lines]",
      "1207:                          $buffer['xor'] = substr($key, $start) . $buffer['xor'];",
      "",
      "[Added Lines]",
      "1256:                         $buffer['xor'] = substr($key, $start) . $buffer['xor'];",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1834:         $this->encryptIV = $this->decryptIV = str_pad(substr($this->iv, 0, $this->block_size), $this->block_size, \"\\0\");",
      "1835:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1884:         if (!$this->skip_key_adjustment) {",
      "1885:             $this->key = str_pad(substr($this->key, 0, $this->key_length), $this->key_length, \"\\0\");",
      "1886:         }",
      "",
      "---------------"
    ],
    "libraries/phpseclib/Crypt/Random.php||libraries/phpseclib/Crypt/Random.php": [
      "File: libraries/phpseclib/Crypt/Random.php -> libraries/phpseclib/Crypt/Random.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "55:     {",
      "56:         if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {",
      "60:                 return mcrypt_create_iv($length);",
      "61:             }",
      "",
      "[Removed Lines]",
      "54:     public static function string($length)",
      "59:             if (function_exists('mcrypt_create_iv') && function_exists('class_alias')) {",
      "",
      "[Added Lines]",
      "54:     static function string($length)",
      "56:         if (version_compare(PHP_VERSION, '7.0.0', '>=')) {",
      "57:             try {",
      "58:                 return \\random_bytes($length);",
      "59:             } catch (\\Throwable $e) {",
      "66:             }",
      "67:         }",
      "72:             if (extension_loaded('mcrypt') && function_exists('class_alias')) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "76:                 return openssl_random_pseudo_bytes($length);",
      "77:             }",
      "78:         } else {",
      "81:                 return openssl_random_pseudo_bytes($length);",
      "82:             }",
      "",
      "[Removed Lines]",
      "75:             if (function_exists('openssl_random_pseudo_bytes') && version_compare(PHP_VERSION, '5.3.4', '>=')) {",
      "80:             if (function_exists('openssl_random_pseudo_bytes')) {",
      "",
      "[Added Lines]",
      "88:             if (extension_loaded('openssl') && version_compare(PHP_VERSION, '5.3.4', '>=')) {",
      "93:             if (extension_loaded('openssl')) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "99:                 return mcrypt_create_iv($length, MCRYPT_DEV_URANDOM);",
      "100:             }",
      "101:         }",
      "",
      "[Removed Lines]",
      "98:             if (function_exists('mcrypt_create_iv')) {",
      "",
      "[Added Lines]",
      "111:             if (extension_loaded('mcrypt')) {",
      "",
      "---------------"
    ],
    "libraries/phpseclib/Crypt/Rijndael.php||libraries/phpseclib/Crypt/Rijndael.php": [
      "File: libraries/phpseclib/Crypt/Rijndael.php -> libraries/phpseclib/Crypt/Rijndael.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "66: class Rijndael extends Base",
      "67: {",
      "92:     var $cipher_name_mcrypt = 'rijndael-128';",
      "",
      "[Removed Lines]",
      "76:     var $password_key_size = 16;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "102:     var $password_default_salt = 'phpseclib';",
      "120:     var $w;",
      "",
      "[Removed Lines]",
      "111:     var $explicit_key_length = false;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "142:     var $Nb = 4;",
      "",
      "[Removed Lines]",
      "155:     var $key_size = 16;",
      "",
      "[Added Lines]",
      "136:     var $key_length = 16;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "190:     var $kl;",
      "",
      "[Removed Lines]",
      "232:     function setKey($key)",
      "233:     {",
      "234:         if (!$this->explicit_key_length) {",
      "235:             $length = strlen($key);",
      "236:             switch (true) {",
      "237:                 case $length <= 16:",
      "238:                     $this->key_size = 16;",
      "239:                     break;",
      "240:                 case $length <= 20:",
      "241:                     $this->key_size = 20;",
      "242:                     break;",
      "243:                 case $length <= 24:",
      "244:                     $this->key_size = 24;",
      "245:                     break;",
      "246:                 case $length <= 28:",
      "247:                     $this->key_size = 28;",
      "248:                     break;",
      "249:                 default:",
      "250:                     $this->key_size = 32;",
      "251:             }",
      "252:         }",
      "253:         parent::setKey($key);",
      "254:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "276:     function setKeyLength($length)",
      "277:     {",
      "278:         switch (true) {",
      "285:             case $length <= 128:",
      "287:                 break;",
      "288:             case $length <= 192:",
      "290:                 break;",
      "291:             default:",
      "293:         }",
      "298:     }",
      "",
      "[Removed Lines]",
      "279:             case $length == 160:",
      "280:                 $this->key_size = 20;",
      "281:                 break;",
      "282:             case $length == 224:",
      "283:                 $this->key_size = 28;",
      "284:                 break;",
      "286:                 $this->key_size = 16;",
      "289:                 $this->key_size = 24;",
      "292:                 $this->key_size = 32;",
      "295:         $this->explicit_key_length = true;",
      "296:         $this->changed = true;",
      "297:         $this->_setEngine();",
      "",
      "[Added Lines]",
      "197:                 $this->key_length = 16;",
      "198:                 break;",
      "199:             case $length <= 160:",
      "200:                 $this->key_length = 20;",
      "203:                 $this->key_length = 24;",
      "204:                 break;",
      "205:             case $length <= 224:",
      "206:                 $this->key_length = 28;",
      "209:                 $this->key_length = 32;",
      "212:         parent::setKeyLength($length);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "337:                 if ($this->block_size != 16) {",
      "338:                     return false;",
      "339:                 }",
      "342:                 break;",
      "343:             case self::ENGINE_MCRYPT:",
      "344:                 $this->cipher_name_mcrypt = 'rijndael-' . ($this->block_size << 3);",
      "347:                     return false;",
      "348:                 }",
      "",
      "[Removed Lines]",
      "340:                 $this->cipher_name_openssl_ecb = 'aes-' . ($this->key_size << 3) . '-ecb';",
      "341:                 $this->cipher_name_openssl = 'aes-' . ($this->key_size << 3) . '-' . $this->_openssl_translate_mode();",
      "345:                 if ($this->key_size % 8) { // is it a 160/224-bit key?",
      "",
      "[Added Lines]",
      "255:                 $this->cipher_name_openssl_ecb = 'aes-' . ($this->key_length << 3) . '-ecb';",
      "256:                 $this->cipher_name_openssl = 'aes-' . ($this->key_length << 3) . '-' . $this->_openssl_translate_mode();",
      "260:                 if ($this->key_length % 8) { // is it a 160/224-bit key?",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "351:         return parent::isValidEngine($engine);",
      "352:     }",
      "373:     function _encryptBlock($in)",
      "374:     {",
      "",
      "[Removed Lines]",
      "360:     function _setupMcrypt()",
      "361:     {",
      "362:         $this->key = str_pad(substr($this->key, 0, $this->key_size), $this->key_size, \"\\0\");",
      "363:         parent::_setupMcrypt();",
      "364:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "573:             0x7D000000, 0xFA000000, 0xEF000000, 0xC5000000, 0x91000000",
      "574:         );",
      "580:             return;",
      "581:         }",
      "586:         $this->Nr = max($this->Nk, $this->Nb) + 6;",
      "",
      "[Removed Lines]",
      "576:         $this->key = str_pad(substr($this->key, 0, $this->key_size), $this->key_size, \"\\0\");",
      "578:         if (isset($this->kl['key']) && $this->key === $this->kl['key'] && $this->key_size === $this->kl['key_size'] && $this->block_size === $this->kl['block_size']) {",
      "582:         $this->kl = array('key' => $this->key, 'key_size' => $this->key_size, 'block_size' => $this->block_size);",
      "584:         $this->Nk = $this->key_size >> 2;",
      "",
      "[Added Lines]",
      "479:         if (isset($this->kl['key']) && $this->key === $this->kl['key'] && $this->key_length === $this->kl['key_length'] && $this->block_size === $this->kl['block_size']) {",
      "483:         $this->kl = array('key' => $this->key, 'key_length' => $this->key_length, 'block_size' => $this->block_size);",
      "485:         $this->Nk = $this->key_length >> 2;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "678:     function _subWord($word)",
      "679:     {",
      "680:         static $sbox;",
      "681:         if (empty($sbox)) {",
      "683:         }",
      "685:         return  $sbox[$word       & 0x000000FF]        |",
      "",
      "[Removed Lines]",
      "682:             list(,,,, $sbox) = $this->_getTables();",
      "",
      "[Added Lines]",
      "583:             list(, , , , $sbox) = $this->_getTables();",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "884:         $code_hash = \"Crypt_Rijndael, {$this->mode}, {$this->Nr}, {$this->Nb}\";",
      "",
      "[Removed Lines]",
      "881:         $gen_hi_opt_code = (bool)( count($lambda_functions) < 10 );",
      "",
      "[Added Lines]",
      "782:         $gen_hi_opt_code = (bool)(count($lambda_functions) < 10);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ea422a327ef73ba8bd60bf6f23205ef069563781",
      "candidate_info": {
        "commit_hash": "ea422a327ef73ba8bd60bf6f23205ef069563781",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/ea422a327ef73ba8bd60bf6f23205ef069563781",
        "files": [
          "libraries/phpseclib/Crypt/AES.php",
          "libraries/phpseclib/Crypt/Base.php",
          "libraries/phpseclib/Crypt/Random.php",
          "libraries/phpseclib/Crypt/Rijndael.php",
          "libraries/phpseclib/LICENSE",
          "libraries/plugins/auth/AuthenticationCookie.class.php"
        ],
        "message": "Fix #11387 phpseclib < 2.0 produces deprecated messages on PHP Update phpseclib to version 2.0.0\n\nSigned-off-by: Madhura Jayaratne <madhura.cj@gmail.com>",
        "before_after_code_files": [
          "libraries/phpseclib/Crypt/AES.php||libraries/phpseclib/Crypt/AES.php",
          "libraries/phpseclib/Crypt/Base.php||libraries/phpseclib/Crypt/Base.php",
          "libraries/phpseclib/Crypt/Random.php||libraries/phpseclib/Crypt/Random.php",
          "libraries/phpseclib/Crypt/Rijndael.php||libraries/phpseclib/Crypt/Rijndael.php",
          "libraries/plugins/auth/AuthenticationCookie.class.php||libraries/plugins/auth/AuthenticationCookie.class.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libraries/phpseclib/Crypt/AES.php||libraries/phpseclib/Crypt/AES.php",
            "libraries/phpseclib/Crypt/Base.php||libraries/phpseclib/Crypt/Base.php",
            "libraries/phpseclib/Crypt/Random.php||libraries/phpseclib/Crypt/Random.php",
            "libraries/phpseclib/Crypt/Rijndael.php||libraries/phpseclib/Crypt/Rijndael.php"
          ],
          "candidate": [
            "libraries/phpseclib/Crypt/AES.php||libraries/phpseclib/Crypt/AES.php",
            "libraries/phpseclib/Crypt/Base.php||libraries/phpseclib/Crypt/Base.php",
            "libraries/phpseclib/Crypt/Random.php||libraries/phpseclib/Crypt/Random.php",
            "libraries/phpseclib/Crypt/Rijndael.php||libraries/phpseclib/Crypt/Rijndael.php"
          ]
        }
      },
      "candidate_diff": {
        "libraries/phpseclib/Crypt/AES.php||libraries/phpseclib/Crypt/AES.php": [
          "File: libraries/phpseclib/Crypt/AES.php -> libraries/phpseclib/Crypt/AES.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: {",
          "167:     {",
          "169:     }",
          "181:     {",
          "183:     }",
          "184: }",
          "",
          "[Removed Lines]",
          "67: if (!class_exists('Crypt_Rijndael')) {",
          "68:     include_once 'Rijndael.php';",
          "69: }",
          "83: define('CRYPT_AES_MODE_CTR', CRYPT_MODE_CTR);",
          "89: define('CRYPT_AES_MODE_ECB', CRYPT_MODE_ECB);",
          "95: define('CRYPT_AES_MODE_CBC', CRYPT_MODE_CBC);",
          "101: define('CRYPT_AES_MODE_CFB', CRYPT_MODE_CFB);",
          "107: define('CRYPT_AES_MODE_OFB', CRYPT_MODE_OFB);",
          "117: define('CRYPT_AES_MODE_INTERNAL', CRYPT_MODE_INTERNAL);",
          "121: define('CRYPT_AES_MODE_MCRYPT', CRYPT_MODE_MCRYPT);",
          "131: class Crypt_AES extends Crypt_Rijndael",
          "140:     var $const_namespace = 'AES';",
          "166:     function Crypt_AES($mode = CRYPT_AES_MODE_CBC)",
          "168:         parent::Crypt_Rijndael($mode);",
          "180:     function setBlockLength($length)",
          "182:         return;",
          "",
          "[Added Lines]",
          "50: namespace phpseclib\\Crypt;",
          "52: use phpseclib\\Crypt\\Rijndael;",
          "61: class AES extends Rijndael",
          "72:     function setBlockLength($length)",
          "73:     {",
          "74:         return;",
          "75:     }",
          "87:     function setKeyLength($length)",
          "89:         switch ($length) {",
          "90:             case 160:",
          "91:                 $length = 192;",
          "92:                 break;",
          "93:             case 224:",
          "94:                 $length = 256;",
          "95:         }",
          "96:         parent::setKeyLength($length);",
          "109:     function setKey($key)",
          "111:         parent::setKey($key);",
          "113:         if (!$this->explicit_key_length) {",
          "114:             $length = strlen($key);",
          "115:             switch (true) {",
          "116:                 case $length <= 16:",
          "117:                     $this->key_size = 16;",
          "118:                     break;",
          "119:                 case $length <= 24:",
          "120:                     $this->key_size = 24;",
          "121:                     break;",
          "122:                 default:",
          "123:                     $this->key_size = 32;",
          "124:             }",
          "125:             $this->_setEngine();",
          "126:         }",
          "",
          "---------------"
        ],
        "libraries/phpseclib/Crypt/Base.php||libraries/phpseclib/Crypt/Base.php": [
          "File: libraries/phpseclib/Crypt/Base.php -> libraries/phpseclib/Crypt/Base.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "122: {",
          "",
          "[Removed Lines]",
          "67: define('CRYPT_MODE_CTR', -1);",
          "73: define('CRYPT_MODE_ECB', 1);",
          "79: define('CRYPT_MODE_CBC', 2);",
          "85: define('CRYPT_MODE_CFB', 3);",
          "91: define('CRYPT_MODE_OFB', 4);",
          "96: define('CRYPT_MODE_STREAM', 5);",
          "106: define('CRYPT_MODE_INTERNAL', 1);",
          "110: define('CRYPT_MODE_MCRYPT', 2);",
          "121: class Crypt_Base",
          "",
          "[Added Lines]",
          "37: namespace phpseclib\\Crypt;",
          "39: use phpseclib\\Crypt\\Hash;",
          "48: abstract class Base",
          "62:     const MODE_CTR = -1;",
          "68:     const MODE_ECB = 1;",
          "74:     const MODE_CBC = 2;",
          "80:     const MODE_CFB = 3;",
          "86:     const MODE_OFB = 4;",
          "90:     const MODE_STREAM = 5;",
          "100:     static $WHIRLPOOL_AVAILABLE;",
          "109:     const ENGINE_INTERNAL = 1;",
          "113:     const ENGINE_MCRYPT = 2;",
          "117:     const ENGINE_OPENSSL = 3;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "340:     var $engine;",
          "353:     var $cipher_name_mcrypt;",
          "",
          "[Removed Lines]",
          "362:     var $password_key_size = 32;",
          "371:     var $password_default_salt = 'phpseclib/salt';",
          "394:     var $const_namespace;",
          "",
          "[Added Lines]",
          "343:     var $preferredEngine;",
          "367:     var $cipher_name_openssl;",
          "379:     var $cipher_name_openssl_ecb;",
          "388:     var $password_key_size = 32;",
          "397:     var $password_default_salt = 'phpseclib/salt';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "420:     var $use_inline_crypt;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "432:     var $openssl_emulate_ctr = false;",
          "441:     var $openssl_options;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "447:     {",
          "475:         switch ($mode) {",
          "477:                 $this->paddable = true;",
          "479:                 break;",
          "484:                 $this->mode = $mode;",
          "485:                 break;",
          "487:             default:",
          "488:                 $this->paddable = true;",
          "490:         }",
          "493:         if ($this->use_inline_crypt !== false && function_exists('create_function')) {",
          "494:             $this->use_inline_crypt = true;",
          "",
          "[Removed Lines]",
          "446:     function Crypt_Base($mode = CRYPT_MODE_CBC)",
          "448:         $const_crypt_mode = 'CRYPT_' . $this->const_namespace . '_MODE';",
          "451:         if (!defined($const_crypt_mode)) {",
          "452:             switch (true) {",
          "453:                 case extension_loaded('mcrypt') && in_array($this->cipher_name_mcrypt, mcrypt_list_algorithms()):",
          "454:                     define($const_crypt_mode, CRYPT_MODE_MCRYPT);",
          "455:                     break;",
          "456:                 default:",
          "457:                     define($const_crypt_mode, CRYPT_MODE_INTERNAL);",
          "458:             }",
          "459:         }",
          "463:         switch (true) {",
          "464:             case empty($this->cipher_name_mcrypt): // The cipher module has no mcrypt-engine support at all so we force CRYPT_MODE_INTERNAL",
          "465:                 $this->engine = CRYPT_MODE_INTERNAL;",
          "466:                 break;",
          "467:             case constant($const_crypt_mode) == CRYPT_MODE_MCRYPT:",
          "468:                 $this->engine = CRYPT_MODE_MCRYPT;",
          "469:                 break;",
          "470:             default:",
          "471:                 $this->engine = CRYPT_MODE_INTERNAL;",
          "472:         }",
          "476:             case CRYPT_MODE_ECB:",
          "478:                 $this->mode = $mode;",
          "480:             case CRYPT_MODE_CTR:",
          "481:             case CRYPT_MODE_CFB:",
          "482:             case CRYPT_MODE_OFB:",
          "483:             case CRYPT_MODE_STREAM:",
          "486:             case CRYPT_MODE_CBC:",
          "489:                 $this->mode = CRYPT_MODE_CBC;",
          "",
          "[Added Lines]",
          "467:     function __construct($mode = self::MODE_CBC)",
          "471:             case self::MODE_ECB:",
          "473:                 $this->mode = self::MODE_ECB;",
          "475:             case self::MODE_CTR:",
          "476:             case self::MODE_CFB:",
          "477:             case self::MODE_OFB:",
          "478:             case self::MODE_STREAM:",
          "481:             case self::MODE_CBC:",
          "484:                 $this->mode = self::MODE_CBC;",
          "487:         $this->_setEngine();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "509:     function setIV($iv)",
          "510:     {",
          "512:             return;",
          "513:         }",
          "",
          "[Removed Lines]",
          "511:         if ($this->mode == CRYPT_MODE_ECB) {",
          "",
          "[Added Lines]",
          "507:         if ($this->mode == self::MODE_ECB) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "534:     function setKey($key)",
          "535:     {",
          "536:         $this->key = $key;",
          "537:         $this->changed = true;",
          "538:     }",
          "556:     function setPassword($password, $method = 'pbkdf2')",
          "557:     {",
          "558:         $key = '';",
          "560:         switch ($method) {",
          "562:                 $func_args = func_get_args();",
          "",
          "[Removed Lines]",
          "561:             default: // 'pbkdf2'",
          "",
          "[Added Lines]",
          "533:         $this->_setEngine();",
          "557:             default: // 'pbkdf2' or 'pbkdf1'",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "572:                 $count = isset($func_args[4]) ? $func_args[4] : 1000;",
          "578:                 switch (true) {",
          "579:                     case !function_exists('hash_pbkdf2'):",
          "580:                     case !function_exists('hash_algos'):",
          "581:                     case !in_array($hash, hash_algos()):",
          "585:                         $i = 1;",
          "586:                         while (strlen($key) < $dkLen) {",
          "588:                             $hmac->setHash($hash);",
          "589:                             $hmac->setKey($password);",
          "590:                             $f = $u = $hmac->hash($salt . pack('N', $i++));",
          "",
          "[Removed Lines]",
          "575:                 $dkLen = isset($func_args[5]) ? $func_args[5] : $this->password_key_size;",
          "582:                         if (!class_exists('Crypt_Hash')) {",
          "583:                             include_once 'Crypt/Hash.php';",
          "584:                         }",
          "587:                             $hmac = new Crypt_Hash();",
          "",
          "[Added Lines]",
          "571:                 if (isset($func_args[5])) {",
          "572:                     $dkLen = $func_args[5];",
          "573:                 } else {",
          "574:                     $dkLen = $method == 'pbkdf1' ? 2 * $this->password_key_size : $this->password_key_size;",
          "575:                 }",
          "578:                     case $method == 'pbkdf1':",
          "579:                         $hashObj = new Hash();",
          "580:                         $hashObj->setHash($hash);",
          "581:                         if ($dkLen > $hashObj->getLength()) {",
          "582:                             user_error('Derived key too long');",
          "583:                             return false;",
          "584:                         }",
          "585:                         $t = $password . $salt;",
          "586:                         for ($i = 0; $i < $count; ++$i) {",
          "587:                             $t = $hashObj->hash($t);",
          "588:                         }",
          "589:                         $key = substr($t, 0, $dkLen);",
          "591:                         $this->setKey(substr($key, 0, $dkLen >> 1));",
          "592:                         $this->setIV(substr($key, $dkLen >> 1));",
          "594:                         return true;",
          "601:                             $hmac = new Hash();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "602:         }",
          "604:         $this->setKey($key);",
          "605:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "620:         return true;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "628:     function encrypt($plaintext)",
          "629:     {",
          "631:             if ($this->changed) {",
          "632:                 $this->_setupMcrypt();",
          "633:                 $this->changed = false;",
          "",
          "[Removed Lines]",
          "630:         if ($this->engine == CRYPT_MODE_MCRYPT) {",
          "",
          "[Added Lines]",
          "645:         if ($this->paddable) {",
          "646:             $plaintext = $this->_pad($plaintext);",
          "647:         }",
          "649:         if ($this->engine === self::ENGINE_OPENSSL) {",
          "650:             if ($this->changed) {",
          "651:                 $this->_clearBuffers();",
          "652:                 $this->changed = false;",
          "653:             }",
          "654:             switch ($this->mode) {",
          "655:                 case self::MODE_STREAM:",
          "656:                     return openssl_encrypt($plaintext, $this->cipher_name_openssl, $this->key, $this->openssl_options);",
          "657:                 case self::MODE_ECB:",
          "658:                     $result = openssl_encrypt($plaintext, $this->cipher_name_openssl, $this->key, $this->openssl_options);",
          "659:                     return !defined('OPENSSL_RAW_DATA') ? substr($result, 0, -$this->block_size) : $result;",
          "660:                 case self::MODE_CBC:",
          "661:                     $result = openssl_encrypt($plaintext, $this->cipher_name_openssl, $this->key, $this->openssl_options, $this->encryptIV);",
          "662:                     if ($this->continuousBuffer) {",
          "663:                         $this->encryptIV = substr($result, -$this->block_size);",
          "664:                     }",
          "665:                     return !defined('OPENSSL_RAW_DATA') ? substr($result, 0, -$this->block_size) : $result;",
          "666:                 case self::MODE_CTR:",
          "667:                     return $this->_openssl_ctr_process($plaintext, $this->encryptIV, $this->enbuffer);",
          "668:                 case self::MODE_CFB:",
          "671:                     $ciphertext = '';",
          "672:                     if ($this->continuousBuffer) {",
          "673:                         $iv = &$this->encryptIV;",
          "674:                         $pos = &$this->enbuffer['pos'];",
          "675:                     } else {",
          "676:                         $iv = $this->encryptIV;",
          "677:                         $pos = 0;",
          "678:                     }",
          "679:                     $len = strlen($plaintext);",
          "680:                     $i = 0;",
          "681:                     if ($pos) {",
          "682:                         $orig_pos = $pos;",
          "683:                         $max = $this->block_size - $pos;",
          "684:                         if ($len >= $max) {",
          "685:                             $i = $max;",
          "686:                             $len-= $max;",
          "687:                             $pos = 0;",
          "688:                         } else {",
          "689:                             $i = $len;",
          "690:                             $pos+= $len;",
          "691:                             $len = 0;",
          "692:                         }",
          "694:                         $ciphertext = substr($iv, $orig_pos) ^ $plaintext;",
          "695:                         $iv = substr_replace($iv, $ciphertext, $orig_pos, $i);",
          "696:                         $plaintext = substr($plaintext, $i);",
          "697:                     }",
          "699:                     $overflow = $len % $this->block_size;",
          "701:                     if ($overflow) {",
          "702:                         $ciphertext.= openssl_encrypt(substr($plaintext, 0, -$overflow) . str_repeat(\"\\0\", $this->block_size), $this->cipher_name_openssl, $this->key, $this->openssl_options, $iv);",
          "703:                         $iv = $this->_string_pop($ciphertext, $this->block_size);",
          "705:                         $size = $len - $overflow;",
          "706:                         $block = $iv ^ substr($plaintext, -$overflow);",
          "707:                         $iv = substr_replace($iv, $block, 0, $overflow);",
          "708:                         $ciphertext.= $block;",
          "709:                         $pos = $overflow;",
          "710:                     } elseif ($len) {",
          "711:                         $ciphertext = openssl_encrypt($plaintext, $this->cipher_name_openssl, $this->key, $this->openssl_options, $iv);",
          "712:                         $iv = substr($ciphertext, -$this->block_size);",
          "713:                     }",
          "715:                     return $ciphertext;",
          "716:                 case self::MODE_OFB:",
          "717:                     return $this->_openssl_ofb_process($plaintext, $this->encryptIV, $this->enbuffer);",
          "718:             }",
          "719:         }",
          "721:         if ($this->engine === self::ENGINE_MCRYPT) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "644:                 $block_size = $this->block_size;",
          "645:                 $iv = &$this->encryptIV;",
          "646:                 $pos = &$this->enbuffer['pos'];",
          "",
          "[Removed Lines]",
          "643:             if ($this->mode == CRYPT_MODE_CFB && $this->continuousBuffer) {",
          "",
          "[Added Lines]",
          "734:             if ($this->mode == self::MODE_CFB && $this->continuousBuffer) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "693:                 return $ciphertext;",
          "694:             }",
          "700:             $ciphertext = mcrypt_generic($this->enmcrypt, $plaintext);",
          "702:             if (!$this->continuousBuffer) {",
          "",
          "[Removed Lines]",
          "696:             if ($this->paddable) {",
          "697:                 $plaintext = $this->_pad($plaintext);",
          "698:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "714:             $inline = $this->inline_crypt;",
          "715:             return $inline('encrypt', $this, $plaintext);",
          "716:         }",
          "721:         $buffer = &$this->enbuffer;",
          "722:         $block_size = $this->block_size;",
          "723:         $ciphertext = '';",
          "724:         switch ($this->mode) {",
          "726:                 for ($i = 0; $i < strlen($plaintext); $i+=$block_size) {",
          "727:                     $ciphertext.= $this->_encryptBlock(substr($plaintext, $i, $block_size));",
          "728:                 }",
          "729:                 break;",
          "731:                 $xor = $this->encryptIV;",
          "732:                 for ($i = 0; $i < strlen($plaintext); $i+=$block_size) {",
          "733:                     $block = substr($plaintext, $i, $block_size);",
          "",
          "[Removed Lines]",
          "717:         if ($this->paddable) {",
          "718:             $plaintext = $this->_pad($plaintext);",
          "719:         }",
          "725:             case CRYPT_MODE_ECB:",
          "730:             case CRYPT_MODE_CBC:",
          "",
          "[Added Lines]",
          "809:             case self::MODE_ECB:",
          "814:             case self::MODE_CBC:",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "739:                     $this->encryptIV = $xor;",
          "740:                 }",
          "741:                 break;",
          "743:                 $xor = $this->encryptIV;",
          "745:                     for ($i = 0; $i < strlen($plaintext); $i+=$block_size) {",
          "746:                         $block = substr($plaintext, $i, $block_size);",
          "749:                         }",
          "751:                         $ciphertext.= $block ^ $key;",
          "752:                     }",
          "753:                 } else {",
          "754:                     for ($i = 0; $i < strlen($plaintext); $i+=$block_size) {",
          "755:                         $block = substr($plaintext, $i, $block_size);",
          "757:                         $ciphertext.= $block ^ $key;",
          "758:                     }",
          "759:                 }",
          "760:                 if ($this->continuousBuffer) {",
          "761:                     $this->encryptIV = $xor;",
          "762:                     if ($start = strlen($plaintext) % $block_size) {",
          "764:                     }",
          "765:                 }",
          "766:                 break;",
          "770:                 if ($this->continuousBuffer) {",
          "",
          "[Removed Lines]",
          "742:             case CRYPT_MODE_CTR:",
          "744:                 if (strlen($buffer['encrypted'])) {",
          "747:                         if (strlen($block) > strlen($buffer['encrypted'])) {",
          "748:                             $buffer['encrypted'].= $this->_encryptBlock($this->_generateXor($xor, $block_size));",
          "750:                         $key = $this->_stringShift($buffer['encrypted'], $block_size);",
          "756:                         $key = $this->_encryptBlock($this->_generateXor($xor, $block_size));",
          "763:                         $buffer['encrypted'] = substr($key, $start) . $buffer['encrypted'];",
          "767:             case CRYPT_MODE_CFB:",
          "",
          "[Added Lines]",
          "826:             case self::MODE_CTR:",
          "828:                 if (strlen($buffer['ciphertext'])) {",
          "831:                         if (strlen($block) > strlen($buffer['ciphertext'])) {",
          "832:                             $buffer['ciphertext'].= $this->_encryptBlock($xor);",
          "834:                         $this->_increment_str($xor);",
          "835:                         $key = $this->_string_shift($buffer['ciphertext'], $block_size);",
          "841:                         $key = $this->_encryptBlock($xor);",
          "842:                         $this->_increment_str($xor);",
          "849:                         $buffer['ciphertext'] = substr($key, $start) . $buffer['ciphertext'];",
          "853:             case self::MODE_CFB:",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "806:                     $pos = $len;",
          "807:                 }",
          "808:                 break;",
          "810:                 $xor = $this->encryptIV;",
          "811:                 if (strlen($buffer['xor'])) {",
          "812:                     for ($i = 0; $i < strlen($plaintext); $i+=$block_size) {",
          "",
          "[Removed Lines]",
          "809:             case CRYPT_MODE_OFB:",
          "",
          "[Added Lines]",
          "895:             case self::MODE_OFB:",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "815:                             $xor = $this->_encryptBlock($xor);",
          "816:                             $buffer['xor'].= $xor;",
          "817:                         }",
          "819:                         $ciphertext.= $block ^ $key;",
          "820:                     }",
          "821:                 } else {",
          "",
          "[Removed Lines]",
          "818:                         $key = $this->_stringShift($buffer['xor'], $block_size);",
          "",
          "[Added Lines]",
          "904:                         $key = $this->_string_shift($buffer['xor'], $block_size);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "832:                     }",
          "833:                 }",
          "834:                 break;",
          "836:                 $ciphertext = $this->_encryptBlock($plaintext);",
          "837:                 break;",
          "838:         }",
          "",
          "[Removed Lines]",
          "835:             case CRYPT_MODE_STREAM:",
          "",
          "[Added Lines]",
          "921:             case self::MODE_STREAM:",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "856:     function decrypt($ciphertext)",
          "857:     {",
          "859:             $block_size = $this->block_size;",
          "860:             if ($this->changed) {",
          "861:                 $this->_setupMcrypt();",
          "",
          "[Removed Lines]",
          "858:         if ($this->engine == CRYPT_MODE_MCRYPT) {",
          "",
          "[Added Lines]",
          "943:         if ($this->paddable) {",
          "946:             $ciphertext = str_pad($ciphertext, strlen($ciphertext) + ($this->block_size - strlen($ciphertext) % $this->block_size) % $this->block_size, chr(0));",
          "947:         }",
          "949:         if ($this->engine === self::ENGINE_OPENSSL) {",
          "950:             if ($this->changed) {",
          "951:                 $this->_clearBuffers();",
          "952:                 $this->changed = false;",
          "953:             }",
          "954:             switch ($this->mode) {",
          "955:                 case self::MODE_STREAM:",
          "956:                     $plaintext = openssl_decrypt($ciphertext, $this->cipher_name_openssl, $this->key, $this->openssl_options);",
          "957:                     break;",
          "958:                 case self::MODE_ECB:",
          "959:                     if (!defined('OPENSSL_RAW_DATA')) {",
          "960:                         $ciphetext.= openssl_encrypt('', $this->cipher_name_openssl_ecb, $this->key, true);",
          "961:                     }",
          "962:                     $plaintext = openssl_decrypt($ciphertext, $this->cipher_name_openssl, $this->key, $this->openssl_options);",
          "963:                     break;",
          "964:                 case self::MODE_CBC:",
          "965:                     if (!defined('OPENSSL_RAW_DATA')) {",
          "966:                         $padding = str_repeat(chr($this->block_size), $this->block_size) ^ substr($ciphertext, -$this->block_size);",
          "967:                         $ciphertext.= substr(openssl_encrypt($padding, $this->cipher_name_openssl_ecb, $this->key, true), 0, $this->block_size);",
          "968:                     }",
          "969:                     $plaintext = openssl_decrypt($ciphertext, $this->cipher_name_openssl, $this->key, $this->openssl_options, $this->decryptIV);",
          "970:                     if ($this->continuousBuffer) {",
          "971:                         $this->decryptIV = substr($ciphertext, -$this->block_size);",
          "972:                     }",
          "973:                     break;",
          "974:                 case self::MODE_CTR:",
          "975:                     $plaintext = $this->_openssl_ctr_process($ciphertext, $this->decryptIV, $this->debuffer);",
          "976:                     break;",
          "977:                 case self::MODE_CFB:",
          "980:                     $plaintext = '';",
          "981:                     if ($this->continuousBuffer) {",
          "982:                         $iv = &$this->decryptIV;",
          "983:                         $pos = &$this->buffer['pos'];",
          "984:                     } else {",
          "985:                         $iv = $this->decryptIV;",
          "986:                         $pos = 0;",
          "987:                     }",
          "988:                     $len = strlen($ciphertext);",
          "989:                     $i = 0;",
          "990:                     if ($pos) {",
          "991:                         $orig_pos = $pos;",
          "992:                         $max = $this->block_size - $pos;",
          "993:                         if ($len >= $max) {",
          "994:                             $i = $max;",
          "995:                             $len-= $max;",
          "996:                             $pos = 0;",
          "997:                         } else {",
          "998:                             $i = $len;",
          "999:                             $pos+= $len;",
          "1000:                             $len = 0;",
          "1001:                         }",
          "1003:                         $plaintext = substr($iv, $orig_pos) ^ $ciphertext;",
          "1004:                         $iv = substr_replace($iv, substr($ciphertext, 0, $i), $orig_pos, $i);",
          "1005:                         $ciphertext = substr($ciphertext, $i);",
          "1006:                     }",
          "1007:                     $overflow = $len % $this->block_size;",
          "1008:                     if ($overflow) {",
          "1009:                         $plaintext.= openssl_decrypt(substr($ciphertext, 0, -$overflow), $this->cipher_name_openssl, $this->key, $this->openssl_options, $iv);",
          "1010:                         if ($len - $overflow) {",
          "1011:                             $iv = substr($ciphertext, -$overflow - $this->block_size, -$overflow);",
          "1012:                         }",
          "1013:                         $iv = openssl_encrypt(str_repeat(\"\\0\", $this->block_size), $this->cipher_name_openssl, $this->key, $this->openssl_options, $iv);",
          "1014:                         $plaintext.= $iv ^ substr($ciphertext, -$overflow);",
          "1015:                         $iv = substr_replace($iv, substr($ciphertext, -$overflow), 0, $overflow);",
          "1016:                         $pos = $overflow;",
          "1017:                     } elseif ($len) {",
          "1018:                         $plaintext.= openssl_decrypt($ciphertext, $this->cipher_name_openssl, $this->key, $this->openssl_options, $iv);",
          "1019:                         $iv = substr($ciphertext, -$this->block_size);",
          "1020:                     }",
          "1021:                     break;",
          "1022:                 case self::MODE_OFB:",
          "1023:                     $plaintext = $this->_openssl_ofb_process($ciphertext, $this->decryptIV, $this->debuffer);",
          "1024:             }",
          "1026:             return $this->paddable ? $this->_unpad($plaintext) : $plaintext;",
          "1027:         }",
          "1029:         if ($this->engine === self::ENGINE_MCRYPT) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "866:                 $this->dechanged = false;",
          "867:             }",
          "870:                 $iv = &$this->decryptIV;",
          "871:                 $pos = &$this->debuffer['pos'];",
          "872:                 $len = strlen($ciphertext);",
          "",
          "[Removed Lines]",
          "869:             if ($this->mode == CRYPT_MODE_CFB && $this->continuousBuffer) {",
          "",
          "[Added Lines]",
          "1040:             if ($this->mode == self::MODE_CFB && $this->continuousBuffer) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "904:                 return $plaintext;",
          "905:             }",
          "913:             $plaintext = mdecrypt_generic($this->demcrypt, $ciphertext);",
          "915:             if (!$this->continuousBuffer) {",
          "",
          "[Removed Lines]",
          "907:             if ($this->paddable) {",
          "910:                 $ciphertext = str_pad($ciphertext, strlen($ciphertext) + ($block_size - strlen($ciphertext) % $block_size) % $block_size, chr(0));",
          "911:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "929:         }",
          "931:         $block_size = $this->block_size;",
          "937:         $buffer = &$this->debuffer;",
          "938:         $plaintext = '';",
          "939:         switch ($this->mode) {",
          "941:                 for ($i = 0; $i < strlen($ciphertext); $i+=$block_size) {",
          "942:                     $plaintext.= $this->_decryptBlock(substr($ciphertext, $i, $block_size));",
          "943:                 }",
          "944:                 break;",
          "946:                 $xor = $this->decryptIV;",
          "947:                 for ($i = 0; $i < strlen($ciphertext); $i+=$block_size) {",
          "948:                     $block = substr($ciphertext, $i, $block_size);",
          "",
          "[Removed Lines]",
          "932:         if ($this->paddable) {",
          "934:             $ciphertext = str_pad($ciphertext, strlen($ciphertext) + ($block_size - strlen($ciphertext) % $block_size) % $block_size, chr(0));",
          "935:         }",
          "940:             case CRYPT_MODE_ECB:",
          "945:             case CRYPT_MODE_CBC:",
          "",
          "[Added Lines]",
          "1101:             case self::MODE_ECB:",
          "1106:             case self::MODE_CBC:",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "953:                     $this->decryptIV = $xor;",
          "954:                 }",
          "955:                 break;",
          "957:                 $xor = $this->decryptIV;",
          "958:                 if (strlen($buffer['ciphertext'])) {",
          "959:                     for ($i = 0; $i < strlen($ciphertext); $i+=$block_size) {",
          "960:                         $block = substr($ciphertext, $i, $block_size);",
          "961:                         if (strlen($block) > strlen($buffer['ciphertext'])) {",
          "963:                         }",
          "965:                         $plaintext.= $block ^ $key;",
          "966:                     }",
          "967:                 } else {",
          "968:                     for ($i = 0; $i < strlen($ciphertext); $i+=$block_size) {",
          "969:                         $block = substr($ciphertext, $i, $block_size);",
          "971:                         $plaintext.= $block ^ $key;",
          "972:                     }",
          "973:                 }",
          "",
          "[Removed Lines]",
          "956:             case CRYPT_MODE_CTR:",
          "962:                             $buffer['ciphertext'].= $this->_encryptBlock($this->_generateXor($xor, $block_size));",
          "964:                         $key = $this->_stringShift($buffer['ciphertext'], $block_size);",
          "970:                         $key = $this->_encryptBlock($this->_generateXor($xor, $block_size));",
          "",
          "[Added Lines]",
          "1117:             case self::MODE_CTR:",
          "1123:                             $buffer['ciphertext'].= $this->_encryptBlock($xor);",
          "1124:                             $this->_increment_str($xor);",
          "1126:                         $key = $this->_string_shift($buffer['ciphertext'], $block_size);",
          "1132:                         $key = $this->_encryptBlock($xor);",
          "1133:                         $this->_increment_str($xor);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "978:                     }",
          "979:                 }",
          "980:                 break;",
          "982:                 if ($this->continuousBuffer) {",
          "983:                     $iv = &$this->decryptIV;",
          "984:                     $pos = &$buffer['pos'];",
          "",
          "[Removed Lines]",
          "981:             case CRYPT_MODE_CFB:",
          "",
          "[Added Lines]",
          "1144:             case self::MODE_CFB:",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1019:                     $pos = $len;",
          "1020:                 }",
          "1021:                 break;",
          "1023:                 $xor = $this->decryptIV;",
          "1024:                 if (strlen($buffer['xor'])) {",
          "1025:                     for ($i = 0; $i < strlen($ciphertext); $i+=$block_size) {",
          "",
          "[Removed Lines]",
          "1022:             case CRYPT_MODE_OFB:",
          "",
          "[Added Lines]",
          "1185:             case self::MODE_OFB:",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1028:                             $xor = $this->_encryptBlock($xor);",
          "1029:                             $buffer['xor'].= $xor;",
          "1030:                         }",
          "1032:                         $plaintext.= $block ^ $key;",
          "1033:                     }",
          "1034:                 } else {",
          "",
          "[Removed Lines]",
          "1031:                         $key = $this->_stringShift($buffer['xor'], $block_size);",
          "",
          "[Added Lines]",
          "1194:                         $key = $this->_string_shift($buffer['xor'], $block_size);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1045:                     }",
          "1046:                 }",
          "1047:                 break;",
          "1049:                 $plaintext = $this->_decryptBlock($ciphertext);",
          "1050:                 break;",
          "1051:         }",
          "1052:         return $this->paddable ? $this->_unpad($plaintext) : $plaintext;",
          "1053:     }",
          "",
          "[Removed Lines]",
          "1048:             case CRYPT_MODE_STREAM:",
          "",
          "[Added Lines]",
          "1211:             case self::MODE_STREAM:",
          "1234:     function _openssl_ctr_process($plaintext, &$encryptIV, &$buffer)",
          "1235:     {",
          "1236:         $ciphertext = '';",
          "1238:         $block_size = $this->block_size;",
          "1239:         $key = $this->key;",
          "1241:         if ($this->openssl_emulate_ctr) {",
          "1242:             $xor = $encryptIV;",
          "1243:             if (strlen($buffer['ciphertext'])) {",
          "1244:                 for ($i = 0; $i < strlen($plaintext); $i+=$block_size) {",
          "1245:                     $block = substr($plaintext, $i, $block_size);",
          "1246:                     if (strlen($block) > strlen($buffer['ciphertext'])) {",
          "1247:                         $result = openssl_encrypt($xor, $this->cipher_name_openssl_ecb, $key, $this->openssl_options);",
          "1248:                         $result = !defined('OPENSSL_RAW_DATA') ? substr($result, 0, -$this->block_size) : $result;",
          "1249:                         $buffer['ciphertext'].= $result;",
          "1250:                     }",
          "1251:                     $this->_increment_str($xor);",
          "1252:                     $otp = $this->_string_shift($buffer['ciphertext'], $block_size);",
          "1253:                     $ciphertext.= $block ^ $otp;",
          "1254:                 }",
          "1255:             } else {",
          "1256:                 for ($i = 0; $i < strlen($plaintext); $i+=$block_size) {",
          "1257:                     $block = substr($plaintext, $i, $block_size);",
          "1258:                     $otp = openssl_encrypt($xor, $this->cipher_name_openssl_ecb, $key, $this->openssl_options);",
          "1259:                     $otp = !defined('OPENSSL_RAW_DATA') ? substr($otp, 0, -$this->block_size) : $otp;",
          "1260:                     $this->_increment_str($xor);",
          "1261:                     $ciphertext.= $block ^ $otp;",
          "1262:                 }",
          "1263:             }",
          "1264:             if ($this->continuousBuffer) {",
          "1265:                 $encryptIV = $xor;",
          "1266:                 if ($start = strlen($plaintext) % $block_size) {",
          "1267:                     $buffer['ciphertext'] = substr($key, $start) . $buffer['ciphertext'];",
          "1268:                 }",
          "1269:             }",
          "1271:             return $ciphertext;",
          "1272:         }",
          "1274:         if (strlen($buffer['ciphertext'])) {",
          "1275:             $ciphertext = $plaintext ^ $this->_string_shift($buffer['ciphertext'], strlen($plaintext));",
          "1276:             $plaintext = substr($plaintext, strlen($ciphertext));",
          "1278:             if (!strlen($plaintext)) {",
          "1279:                 return $ciphertext;",
          "1280:             }",
          "1281:         }",
          "1283:         $overflow = strlen($plaintext) % $block_size;",
          "1284:         if ($overflow) {",
          "1285:             $plaintext2 = $this->_string_pop($plaintext, $overflow); // ie. trim $plaintext to a multiple of $block_size and put rest of $plaintext in $plaintext2",
          "1286:             $encrypted = openssl_encrypt($plaintext . str_repeat(\"\\0\", $block_size), $this->cipher_name_openssl, $key, $this->openssl_options, $encryptIV);",
          "1287:             $temp = $this->_string_pop($encrypted, $block_size);",
          "1288:             $ciphertext.= $encrypted . ($plaintext2 ^ $temp);",
          "1289:             if ($this->continuousBuffer) {",
          "1290:                 $buffer['ciphertext'] = substr($temp, $overflow);",
          "1291:                 $encryptIV = $temp;",
          "1292:             }",
          "1293:         } elseif (!strlen($buffer['ciphertext'])) {",
          "1294:             $ciphertext.= openssl_encrypt($plaintext . str_repeat(\"\\0\", $block_size), $this->cipher_name_openssl, $key, $this->openssl_options, $encryptIV);",
          "1295:             $temp = $this->_string_pop($ciphertext, $block_size);",
          "1296:             if ($this->continuousBuffer) {",
          "1297:                 $encryptIV = $temp;",
          "1298:             }",
          "1299:         }",
          "1300:         if ($this->continuousBuffer) {",
          "1301:             if (!defined('OPENSSL_RAW_DATA')) {",
          "1302:                 $encryptIV.= openssl_encrypt('', $this->cipher_name_openssl_ecb, $key, $this->openssl_options);",
          "1303:             }",
          "1304:             $encryptIV = openssl_decrypt($encryptIV, $this->cipher_name_openssl_ecb, $key, $this->openssl_options);",
          "1305:             if ($overflow) {",
          "1306:                 $this->_increment_str($encryptIV);",
          "1307:             }",
          "1308:         }",
          "1310:         return $ciphertext;",
          "1311:     }",
          "1328:     function _openssl_ofb_process($plaintext, &$encryptIV, &$buffer)",
          "1329:     {",
          "1330:         if (strlen($buffer['xor'])) {",
          "1331:             $ciphertext = $plaintext ^ $buffer['xor'];",
          "1332:             $buffer['xor'] = substr($buffer['xor'], strlen($ciphertext));",
          "1333:             $plaintext = substr($plaintext, strlen($ciphertext));",
          "1334:         } else {",
          "1335:             $ciphertext = '';",
          "1336:         }",
          "1338:         $block_size = $this->block_size;",
          "1340:         $len = strlen($plaintext);",
          "1341:         $key = $this->key;",
          "1342:         $overflow = $len % $block_size;",
          "1344:         if (strlen($plaintext)) {",
          "1345:             if ($overflow) {",
          "1346:                 $ciphertext.= openssl_encrypt(substr($plaintext, 0, -$overflow) . str_repeat(\"\\0\", $block_size), $this->cipher_name_openssl, $key, $this->openssl_options, $encryptIV);",
          "1347:                 $xor = $this->_string_pop($ciphertext, $block_size);",
          "1348:                 if ($this->continuousBuffer) {",
          "1349:                     $encryptIV = $xor;",
          "1350:                 }",
          "1351:                 $ciphertext.= $this->_string_shift($xor, $overflow) ^ substr($plaintext, -$overflow);",
          "1352:                 if ($this->continuousBuffer) {",
          "1353:                     $buffer['xor'] = $xor;",
          "1354:                 }",
          "1355:             } else {",
          "1356:                 $ciphertext = openssl_encrypt($plaintext, $this->cipher_name_openssl, $key, $this->openssl_options, $encryptIV);",
          "1357:                 if ($this->continuousBuffer) {",
          "1358:                     $encryptIV = substr($ciphertext, -$block_size) ^ substr($plaintext, -$block_size);",
          "1359:                 }",
          "1360:             }",
          "1361:         }",
          "1363:         return $ciphertext;",
          "1364:     }",
          "1374:     function _openssl_translate_mode()",
          "1375:     {",
          "1376:         switch ($this->mode) {",
          "1377:             case self::MODE_ECB:",
          "1378:                 return 'ecb';",
          "1379:             case self::MODE_CBC:",
          "1380:                 return 'cbc';",
          "1381:             case self::MODE_CTR:",
          "1382:                 return 'ctr';",
          "1383:             case self::MODE_CFB:",
          "1384:                 return 'cfb';",
          "1385:             case self::MODE_OFB:",
          "1386:                 return 'ofb';",
          "1387:         }",
          "1388:     }",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1125:     function enableContinuousBuffer()",
          "1126:     {",
          "1128:             return;",
          "1129:         }",
          "1131:         $this->continuousBuffer = true;",
          "1132:     }",
          "",
          "[Removed Lines]",
          "1127:         if ($this->mode == CRYPT_MODE_ECB) {",
          "",
          "[Added Lines]",
          "1461:         if ($this->mode == self::MODE_ECB) {",
          "1467:         $this->_setEngine();",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1144:     function disableContinuousBuffer()",
          "1145:     {",
          "1147:             return;",
          "1148:         }",
          "1149:         if (!$this->continuousBuffer) {",
          "",
          "[Removed Lines]",
          "1146:         if ($this->mode == CRYPT_MODE_ECB) {",
          "",
          "[Added Lines]",
          "1481:         if ($this->mode == self::MODE_ECB) {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1153:         $this->continuousBuffer = false;",
          "1154:         $this->changed = true;",
          "1155:     }",
          "",
          "[Removed Lines]",
          "1166:     function _encryptBlock($in)",
          "1167:     {",
          "1168:         user_error((version_compare(PHP_VERSION, '5.0.0', '>=')  ? __METHOD__ : __FUNCTION__)  . '() must extend by class ' . get_class($this), E_USER_ERROR);",
          "1169:     }",
          "1180:     function _decryptBlock($in)",
          "1181:     {",
          "1182:         user_error((version_compare(PHP_VERSION, '5.0.0', '>=')  ? __METHOD__ : __FUNCTION__)  . '() must extend by class ' . get_class($this), E_USER_ERROR);",
          "1183:     }",
          "1195:     function _setupKey()",
          "1196:     {",
          "1197:         user_error((version_compare(PHP_VERSION, '5.0.0', '>=')  ? __METHOD__ : __FUNCTION__)  . '() must extend by class ' . get_class($this), E_USER_ERROR);",
          "1198:     }",
          "",
          "[Added Lines]",
          "1491:         $this->_setEngine();",
          "1492:     }",
          "1502:     function isValidEngine($engine)",
          "1503:     {",
          "1504:         switch ($engine) {",
          "1505:             case self::ENGINE_OPENSSL:",
          "1506:                 if ($this->mode == self::MODE_STREAM && $this->continuousBuffer) {",
          "1507:                     return false;",
          "1508:                 }",
          "1509:                 $this->openssl_emulate_ctr = false;",
          "1510:                 $result = $this->cipher_name_openssl &&",
          "1511:                           extension_loaded('openssl') &&",
          "1513:                           version_compare(PHP_VERSION, '5.3.3', '>=');",
          "1514:                 if (!$result) {",
          "1515:                     return false;",
          "1516:                 }",
          "1520:                 if (!defined('OPENSSL_RAW_DATA')) {",
          "1521:                     $this->openssl_options = true;",
          "1522:                 } else {",
          "1523:                     $this->openssl_options = OPENSSL_RAW_DATA | OPENSSL_ZERO_PADDING;",
          "1524:                 }",
          "1526:                 $methods = openssl_get_cipher_methods();",
          "1527:                 if (in_array($this->cipher_name_openssl, $methods)) {",
          "1528:                     return true;",
          "1529:                 }",
          "1532:                 switch ($this->mode) {",
          "1533:                     case self::MODE_CTR:",
          "1534:                         if (in_array($this->cipher_name_openssl_ecb, $methods)) {",
          "1535:                             $this->openssl_emulate_ctr = true;",
          "1536:                             return true;",
          "1537:                         }",
          "1538:                 }",
          "1539:                 return false;",
          "1540:             case self::ENGINE_MCRYPT:",
          "1541:                 return $this->cipher_name_mcrypt &&",
          "1542:                        extension_loaded('mcrypt') &&",
          "1543:                        in_array($this->cipher_name_mcrypt, mcrypt_list_algorithms());",
          "1544:             case self::ENGINE_INTERNAL:",
          "1545:                 return true;",
          "1546:         }",
          "1548:         return false;",
          "1549:     }",
          "1568:     function setPreferredEngine($engine)",
          "1569:     {",
          "1570:         switch ($engine) {",
          "1572:             case self::ENGINE_MCRYPT:",
          "1573:             case self::ENGINE_INTERNAL:",
          "1574:                 $this->preferredEngine = $engine;",
          "1575:                 break;",
          "1576:             default:",
          "1577:                 $this->preferredEngine = self::ENGINE_OPENSSL;",
          "1578:         }",
          "1580:         $this->_setEngine();",
          "1581:     }",
          "1589:     function getEngine()",
          "1590:     {",
          "1591:         return $this->engine;",
          "1592:     }",
          "1600:     function _setEngine()",
          "1601:     {",
          "1602:         $this->engine = null;",
          "1604:         $candidateEngines = array(",
          "1605:             $this->preferredEngine,",
          "1606:             self::ENGINE_OPENSSL,",
          "1607:             self::ENGINE_MCRYPT",
          "1608:         );",
          "1609:         foreach ($candidateEngines as $engine) {",
          "1610:             if ($this->isValidEngine($engine)) {",
          "1611:                 $this->engine = $engine;",
          "1612:                 break;",
          "1613:             }",
          "1614:         }",
          "1615:         if (!$this->engine) {",
          "1616:             $this->engine = self::ENGINE_INTERNAL;",
          "1617:         }",
          "1619:         if ($this->engine != self::ENGINE_MCRYPT && $this->enmcrypt) {",
          "1622:             mcrypt_module_close($this->enmcrypt);",
          "1623:             mcrypt_module_close($this->demcrypt);",
          "1624:             $this->enmcrypt = null;",
          "1625:             $this->demcrypt = null;",
          "1627:             if ($this->ecb) {",
          "1628:                 mcrypt_module_close($this->ecb);",
          "1629:                 $this->ecb = null;",
          "1630:             }",
          "1631:         }",
          "1633:         $this->changed = true;",
          "1645:     abstract function _encryptBlock($in);",
          "1656:     abstract function _decryptBlock($in);",
          "1668:     abstract function _setupKey();",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1266:         if (!isset($this->enmcrypt)) {",
          "1267:             static $mcrypt_modes = array(",
          "1274:             );",
          "1276:             $this->demcrypt = mcrypt_module_open($this->cipher_name_mcrypt, '', $mcrypt_modes[$this->mode], '');",
          "",
          "[Removed Lines]",
          "1268:                 CRYPT_MODE_CTR    => 'ctr',",
          "1269:                 CRYPT_MODE_ECB    => MCRYPT_MODE_ECB,",
          "1270:                 CRYPT_MODE_CBC    => MCRYPT_MODE_CBC,",
          "1271:                 CRYPT_MODE_CFB    => 'ncfb',",
          "1272:                 CRYPT_MODE_OFB    => MCRYPT_MODE_NOFB,",
          "1273:                 CRYPT_MODE_STREAM => MCRYPT_MODE_STREAM,",
          "",
          "[Added Lines]",
          "1734:                 self::MODE_CTR    => 'ctr',",
          "1735:                 self::MODE_ECB    => MCRYPT_MODE_ECB,",
          "1736:                 self::MODE_CBC    => MCRYPT_MODE_CBC,",
          "1737:                 self::MODE_CFB    => 'ncfb',",
          "1738:                 self::MODE_OFB    => MCRYPT_MODE_NOFB,",
          "1739:                 self::MODE_STREAM => MCRYPT_MODE_STREAM,",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1283:                 $this->ecb = mcrypt_module_open($this->cipher_name_mcrypt, '', MCRYPT_MODE_ECB, '');",
          "1284:             }",
          "1286:         } // else should mcrypt_generic_deinit be called?",
          "1289:             mcrypt_generic_init($this->ecb, $this->key, str_repeat(\"\\0\", $this->block_size));",
          "1290:         }",
          "1291:     }",
          "",
          "[Removed Lines]",
          "1282:             if ($this->mode == CRYPT_MODE_CFB) {",
          "1288:         if ($this->mode == CRYPT_MODE_CFB) {",
          "",
          "[Added Lines]",
          "1748:             if ($this->mode == self::MODE_CFB) {",
          "1754:         if ($this->mode == self::MODE_CFB) {",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1363:     function _clearBuffers()",
          "1364:     {",
          "",
          "[Removed Lines]",
          "1365:         $this->enbuffer = array('encrypted'  => '', 'xor' => '', 'pos' => 0, 'enmcrypt_init' => true);",
          "1366:         $this->debuffer = array('ciphertext' => '', 'xor' => '', 'pos' => 0, 'demcrypt_init' => true);",
          "",
          "[Added Lines]",
          "1830:         $this->enbuffer = $this->debuffer = array('ciphertext' => '', 'xor' => '', 'pos' => 0, 'enmcrypt_init' => true);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1384:     {",
          "1385:         $substr = substr($string, 0, $index);",
          "1386:         $string = substr($string, $index);",
          "",
          "[Removed Lines]",
          "1383:     function _stringShift(&$string, $index = 1)",
          "",
          "[Added Lines]",
          "1847:     function _string_shift(&$string, $index = 1)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1388:     }",
          "1404:     {",
          "1424:             }",
          "1425:         }",
          "1428:     }",
          "",
          "[Removed Lines]",
          "1403:     function _generateXor(&$iv, $length)",
          "1405:         $xor = '';",
          "1406:         $block_size = $this->block_size;",
          "1407:         $num_blocks = floor(($length + ($block_size - 1)) / $block_size);",
          "1408:         for ($i = 0; $i < $num_blocks; $i++) {",
          "1409:             $xor.= $iv;",
          "1410:             for ($j = 4; $j <= $block_size; $j+= 4) {",
          "1411:                 $temp = substr($iv, -$j, 4);",
          "1412:                 switch ($temp) {",
          "1413:                     case \"\\xFF\\xFF\\xFF\\xFF\":",
          "1414:                         $iv = substr_replace($iv, \"\\x00\\x00\\x00\\x00\", -$j, 4);",
          "1415:                         break;",
          "1416:                     case \"\\x7F\\xFF\\xFF\\xFF\":",
          "1417:                         $iv = substr_replace($iv, \"\\x80\\x00\\x00\\x00\", -$j, 4);",
          "1418:                         break 2;",
          "1419:                     default:",
          "1420:                         extract(unpack('Ncount', $temp));",
          "1421:                         $iv = substr_replace($iv, pack('N', $count + 1), -$j, 4);",
          "1422:                         break 2;",
          "1423:                 }",
          "1427:         return $xor;",
          "",
          "[Added Lines]",
          "1864:     function _string_pop(&$string, $index = 1)",
          "1866:         $substr = substr($string, -$index);",
          "1867:         $string = substr($string, 0, -$index);",
          "1868:         return $substr;",
          "1869:     }",
          "1879:     function _increment_str(&$var)",
          "1880:     {",
          "1881:         for ($i = 4; $i <= strlen($var); $i+= 4) {",
          "1882:             $temp = substr($var, -$i, 4);",
          "1883:             switch ($temp) {",
          "1884:                 case \"\\xFF\\xFF\\xFF\\xFF\":",
          "1885:                     $var = substr_replace($var, \"\\x00\\x00\\x00\\x00\", -$i, 4);",
          "1886:                     break;",
          "1887:                 case \"\\x7F\\xFF\\xFF\\xFF\":",
          "1888:                     $var = substr_replace($var, \"\\x80\\x00\\x00\\x00\", -$i, 4);",
          "1889:                     return;",
          "1890:                 default:",
          "1891:                     $temp = unpack('Nnum', $temp);",
          "1892:                     $var = substr_replace($var, pack('N', $temp['num'] + 1), -$i, 4);",
          "1893:                     return;",
          "1897:         $remainder = strlen($var) % 4;",
          "1899:         if ($remainder == 0) {",
          "1900:             return;",
          "1901:         }",
          "1903:         $temp = unpack('Nnum', str_pad(substr($var, 0, $remainder), 4, \"\\0\", STR_PAD_LEFT));",
          "1904:         $temp = substr(pack('N', $temp['num'] + 1), -$remainder);",
          "1905:         $var = substr_replace($var, $temp, 0, $remainder);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1628:         switch ($this->mode) {",
          "1630:                 $encrypt = $init_encrypt . '",
          "1631:                     $_ciphertext = \"\";",
          "1633:                     $_plaintext_len = strlen($_text);",
          "1635:                     for ($_i = 0; $_i < $_plaintext_len; $_i+= '.$block_size.') {",
          "",
          "[Removed Lines]",
          "1629:             case CRYPT_MODE_ECB:",
          "1632:                     $_text = $self->_pad($_text);",
          "",
          "[Added Lines]",
          "2106:             case self::MODE_ECB:",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1655:                     return $self->_unpad($_plaintext);",
          "1656:                     ';",
          "1657:                 break;",
          "1659:                 $encrypt = $init_encrypt . '",
          "1660:                     $_ciphertext = \"\";",
          "1661:                     $_plaintext_len = strlen($_text);",
          "1662:                     $_xor = $self->encryptIV;",
          "1663:                     $_buffer = &$self->enbuffer;",
          "1666:                         for ($_i = 0; $_i < $_plaintext_len; $_i+= '.$block_size.') {",
          "1667:                             $_block = substr($_text, $_i, '.$block_size.');",
          "1670:                                 '.$encrypt_block.'",
          "1672:                             }",
          "1674:                             $_ciphertext.= $_block ^ $_key;",
          "1675:                         }",
          "1676:                     } else {",
          "1677:                         for ($_i = 0; $_i < $_plaintext_len; $_i+= '.$block_size.') {",
          "1678:                             $_block = substr($_text, $_i, '.$block_size.');",
          "1680:                             '.$encrypt_block.'",
          "1681:                             $_key = $in;",
          "1682:                             $_ciphertext.= $_block ^ $_key;",
          "1683:                         }",
          "",
          "[Removed Lines]",
          "1658:             case CRYPT_MODE_CTR:",
          "1665:                     if (strlen($_buffer[\"encrypted\"])) {",
          "1668:                             if (strlen($_block) > strlen($_buffer[\"encrypted\"])) {",
          "1669:                                 $in = $self->_generateXor($_xor, '.$block_size.');",
          "1671:                                 $_buffer[\"encrypted\"].= $in;",
          "1673:                             $_key = $self->_stringShift($_buffer[\"encrypted\"], '.$block_size.');",
          "1679:                             $in = $self->_generateXor($_xor, '.$block_size.');",
          "",
          "[Added Lines]",
          "2134:             case self::MODE_CTR:",
          "2140:                     if (strlen($_buffer[\"ciphertext\"])) {",
          "2143:                             if (strlen($_block) > strlen($_buffer[\"ciphertext\"])) {",
          "2144:                                 $in = $_xor;",
          "2146:                                 $self->_increment_str($_xor);",
          "2147:                                 $_buffer[\"ciphertext\"].= $in;",
          "2149:                             $_key = $self->_string_shift($_buffer[\"ciphertext\"], '.$block_size.');",
          "2155:                             $in = $_xor;",
          "2157:                             $self->_increment_str($_xor);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1685:                     if ($self->continuousBuffer) {",
          "1686:                         $self->encryptIV = $_xor;",
          "1687:                         if ($_start = $_plaintext_len % '.$block_size.') {",
          "1689:                         }",
          "1690:                     }",
          "",
          "[Removed Lines]",
          "1688:                             $_buffer[\"encrypted\"] = substr($_key, $_start) . $_buffer[\"encrypted\"];",
          "",
          "[Added Lines]",
          "2165:                             $_buffer[\"ciphertext\"] = substr($_key, $_start) . $_buffer[\"ciphertext\"];",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1702:                         for ($_i = 0; $_i < $_ciphertext_len; $_i+= '.$block_size.') {",
          "1703:                             $_block = substr($_text, $_i, '.$block_size.');",
          "1704:                             if (strlen($_block) > strlen($_buffer[\"ciphertext\"])) {",
          "1706:                                 '.$encrypt_block.'",
          "1707:                                 $_buffer[\"ciphertext\"].= $in;",
          "1708:                             }",
          "1710:                             $_plaintext.= $_block ^ $_key;",
          "1711:                         }",
          "1712:                     } else {",
          "1713:                         for ($_i = 0; $_i < $_ciphertext_len; $_i+= '.$block_size.') {",
          "1714:                             $_block = substr($_text, $_i, '.$block_size.');",
          "1716:                             '.$encrypt_block.'",
          "1717:                             $_key = $in;",
          "1718:                             $_plaintext.= $_block ^ $_key;",
          "1719:                         }",
          "",
          "[Removed Lines]",
          "1705:                                 $in = $self->_generateXor($_xor, '.$block_size.');",
          "1709:                             $_key = $self->_stringShift($_buffer[\"ciphertext\"], '.$block_size.');",
          "1715:                             $in = $self->_generateXor($_xor, '.$block_size.');",
          "",
          "[Added Lines]",
          "2182:                                 $in = $_xor;",
          "2184:                                 $self->_increment_str($_xor);",
          "2187:                             $_key = $self->_string_shift($_buffer[\"ciphertext\"], '.$block_size.');",
          "2193:                             $in = $_xor;",
          "2195:                             $self->_increment_str($_xor);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1728:                     return $_plaintext;",
          "1729:                     ';",
          "1730:                 break;",
          "1732:                 $encrypt = $init_encrypt . '",
          "1733:                     $_ciphertext = \"\";",
          "1734:                     $_buffer = &$self->enbuffer;",
          "",
          "[Removed Lines]",
          "1731:             case CRYPT_MODE_CFB:",
          "",
          "[Added Lines]",
          "2210:             case self::MODE_CFB:",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1827:                     return $_plaintext;",
          "1828:                     ';",
          "1829:                 break;",
          "1831:                 $encrypt = $init_encrypt . '",
          "1832:                     $_ciphertext = \"\";",
          "1833:                     $_plaintext_len = strlen($_text);",
          "",
          "[Removed Lines]",
          "1830:             case CRYPT_MODE_OFB:",
          "",
          "[Added Lines]",
          "2309:             case self::MODE_OFB:",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1843:                                 $_xor = $in;",
          "1844:                                 $_buffer[\"xor\"].= $_xor;",
          "1845:                             }",
          "1847:                             $_ciphertext.= $_block ^ $_key;",
          "1848:                         }",
          "1849:                     } else {",
          "",
          "[Removed Lines]",
          "1846:                             $_key = $self->_stringShift($_buffer[\"xor\"], '.$block_size.');",
          "",
          "[Added Lines]",
          "2325:                             $_key = $self->_string_shift($_buffer[\"xor\"], '.$block_size.');",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1879:                                 $_xor = $in;",
          "1880:                                 $_buffer[\"xor\"].= $_xor;",
          "1881:                             }",
          "1883:                             $_plaintext.= $_block ^ $_key;",
          "1884:                         }",
          "1885:                     } else {",
          "",
          "[Removed Lines]",
          "1882:                             $_key = $self->_stringShift($_buffer[\"xor\"], '.$block_size.');",
          "",
          "[Added Lines]",
          "2361:                             $_key = $self->_string_shift($_buffer[\"xor\"], '.$block_size.');",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1900:                     return $_plaintext;",
          "1901:                     ';",
          "1902:                 break;",
          "1904:                 $encrypt = $init_encrypt . '",
          "1905:                     $_ciphertext = \"\";",
          "1906:                     '.$encrypt_block.'",
          "",
          "[Removed Lines]",
          "1903:             case CRYPT_MODE_STREAM:",
          "",
          "[Added Lines]",
          "2382:             case self::MODE_STREAM:",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1912:                     return $_plaintext;",
          "1913:                     ';",
          "1914:                 break;",
          "1916:             default:",
          "1917:                 $encrypt = $init_encrypt . '",
          "1918:                     $_ciphertext = \"\";",
          "1920:                     $_plaintext_len = strlen($_text);",
          "1922:                     $in = $self->encryptIV;",
          "",
          "[Removed Lines]",
          "1919:                     $_text = $self->_pad($_text);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1979:     function &_getLambdaFunctions()",
          "1980:     {",
          "1981:         static $functions = array();",
          "1982:         return $functions;",
          "1983:     }",
          "1984: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2471:     function _hashInlineCryptFunction($bytes)",
          "2472:     {",
          "2473:         if (!isset(self::$WHIRLPOOL_AVAILABLE)) {",
          "2474:             self::$WHIRLPOOL_AVAILABLE = extension_loaded('hash') && in_array('whirlpool', hash_algos());",
          "2475:         }",
          "2477:         $result = '';",
          "2478:         $hash = $bytes;",
          "2480:         switch (true) {",
          "2481:             case self::$WHIRLPOOL_AVAILABLE:",
          "2482:                 foreach (str_split($bytes, 64) as $t) {",
          "2483:                     $hash = hash('whirlpool', $hash, true);",
          "2484:                     $result .= $t ^ $hash;",
          "2485:                 }",
          "2486:                 return $result . hash('whirlpool', $hash, true);",
          "2487:             default:",
          "2488:                 $len = strlen($bytes);",
          "2489:                 for ($i = 0; $i < $len; $i+=20) {",
          "2490:                     $t = substr($bytes, $i, 20);",
          "2491:                     $hash = pack('H*', sha1($hash));",
          "2492:                     $result .= $t ^ $hash;",
          "2493:                 }",
          "2494:                 return $result . pack('H*', sha1($hash));",
          "2495:         }",
          "2496:     }",
          "",
          "---------------"
        ],
        "libraries/phpseclib/Crypt/Random.php||libraries/phpseclib/Crypt/Random.php": [
          "File: libraries/phpseclib/Crypt/Random.php -> libraries/phpseclib/Crypt/Random.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "46: if (!function_exists('crypt_random_string')) {",
          "52:     define('CRYPT_RANDOM_IS_WINDOWS', strtoupper(substr(PHP_OS, 0, 3)) === 'WIN');",
          "",
          "[Added Lines]",
          "25: namespace phpseclib\\Crypt;",
          "27: use phpseclib\\Crypt\\AES;",
          "28: use phpseclib\\Crypt\\Base;",
          "29: use phpseclib\\Crypt\\Blowfish;",
          "30: use phpseclib\\Crypt\\DES;",
          "31: use phpseclib\\Crypt\\RC4;",
          "32: use phpseclib\\Crypt\\TripleDES;",
          "33: use phpseclib\\Crypt\\Twofish;",
          "42: class Random",
          "43: {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:     {",
          "70:             if (function_exists('mcrypt_create_iv') && function_exists('class_alias')) {",
          "",
          "[Removed Lines]",
          "65:     function crypt_random_string($length)",
          "67:         if (CRYPT_RANDOM_IS_WINDOWS) {",
          "",
          "[Added Lines]",
          "54:     public static function string($length)",
          "56:         if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168:                 ini_set('session.use_cookies', $old_use_cookies);",
          "169:                 session_cache_limiter($old_session_cache_limiter);",
          "170:             } else {",
          "174:                 } else {",
          "175:                     unset($_SESSION);",
          "176:                 }",
          "",
          "[Removed Lines]",
          "171:                if ($_OLD_SESSION !== false) {",
          "172:                    $_SESSION = $_OLD_SESSION;",
          "173:                    unset($_OLD_SESSION);",
          "",
          "[Added Lines]",
          "160:                 if ($_OLD_SESSION !== false) {",
          "161:                     $_SESSION = $_OLD_SESSION;",
          "162:                     unset($_OLD_SESSION);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "193:             switch (true) {",
          "196:                     break;",
          "199:                     break;",
          "202:                     break;",
          "205:                     break;",
          "206:                 default:",
          "209:             }",
          "211:             $crypto->setKey($key);",
          "",
          "[Removed Lines]",
          "194:                 case class_exists('Crypt_AES'):",
          "195:                     $crypto = new Crypt_AES(CRYPT_AES_MODE_CTR);",
          "197:                 case class_exists('Crypt_TripleDES'):",
          "198:                     $crypto = new Crypt_TripleDES(CRYPT_DES_MODE_CTR);",
          "200:                 case class_exists('Crypt_DES'):",
          "201:                     $crypto = new Crypt_DES(CRYPT_DES_MODE_CTR);",
          "203:                 case class_exists('Crypt_RC4'):",
          "204:                     $crypto = new Crypt_RC4();",
          "207:                     $crypto = $seed;",
          "208:                     return crypt_random_string($length);",
          "",
          "[Added Lines]",
          "183:                 case class_exists('\\phpseclib\\Crypt\\AES'):",
          "184:                     $crypto = new AES(Base::MODE_CTR);",
          "185:                     break;",
          "186:                 case class_exists('\\phpseclib\\Crypt\\Twofish'):",
          "187:                     $crypto = new Twofish(Base::MODE_CTR);",
          "189:                 case class_exists('\\phpseclib\\Crypt\\Blowfish'):",
          "190:                     $crypto = new Blowfish(Base::MODE_CTR);",
          "192:                 case class_exists('\\phpseclib\\Crypt\\TripleDES'):",
          "193:                     $crypto = new TripleDES(Base::MODE_CTR);",
          "195:                 case class_exists('\\phpseclib\\Crypt\\DES'):",
          "196:                     $crypto = new DES(Base::MODE_CTR);",
          "197:                     break;",
          "198:                 case class_exists('\\phpseclib\\Crypt\\RC4'):",
          "199:                     $crypto = new RC4();",
          "202:                     user_error(__CLASS__ . ' requires at least one symmetric cipher be loaded');",
          "203:                     return false;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "213:             $crypto->enableContinuousBuffer();",
          "214:         }",
          "242:         $result = '';",
          "243:         while (strlen($result) < $length) {",
          "247:             $result.= $r;",
          "248:         }",
          "249:         return substr($result, 0, $length);",
          "",
          "[Removed Lines]",
          "216:         if (is_string($crypto)) {",
          "228:             $result = '';",
          "229:             while (strlen($result) < $length) { // each loop adds 20 bytes",
          "232:                 $i = pack('H*', sha1(microtime()));",
          "233:                 $r = pack('H*', sha1($i ^ $v));",
          "234:                 $v = pack('H*', sha1($r ^ $i));",
          "235:                 $result.= $r;",
          "236:             }",
          "237:             return substr($result, 0, $length);",
          "238:         }",
          "244:             $i = $crypto->encrypt(microtime());",
          "245:             $r = $crypto->encrypt($i ^ $v);",
          "246:             $v = $crypto->encrypt($r ^ $i);",
          "",
          "[Added Lines]",
          "223:             $i = $crypto->encrypt(microtime()); // strlen(microtime()) == 21",
          "224:             $r = $crypto->encrypt($i ^ $v); // strlen($v) == 20",
          "225:             $v = $crypto->encrypt($r ^ $i); // strlen($r) == 20",
          "",
          "---------------"
        ],
        "libraries/phpseclib/Crypt/Rijndael.php||libraries/phpseclib/Crypt/Rijndael.php": [
          "File: libraries/phpseclib/Crypt/Rijndael.php -> libraries/phpseclib/Crypt/Rijndael.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "143: {",
          "152:     var $password_key_size = 16;",
          "",
          "[Removed Lines]",
          "78: if (!class_exists('Crypt_Base')) {",
          "79:     include_once 'Base.php';",
          "80: }",
          "94: define('CRYPT_RIJNDAEL_MODE_CTR', CRYPT_MODE_CTR);",
          "100: define('CRYPT_RIJNDAEL_MODE_ECB', CRYPT_MODE_ECB);",
          "106: define('CRYPT_RIJNDAEL_MODE_CBC', CRYPT_MODE_CBC);",
          "112: define('CRYPT_RIJNDAEL_MODE_CFB', CRYPT_MODE_CFB);",
          "118: define('CRYPT_RIJNDAEL_MODE_OFB', CRYPT_MODE_OFB);",
          "128: define('CRYPT_RIJNDAEL_MODE_INTERNAL', CRYPT_MODE_INTERNAL);",
          "132: define('CRYPT_RIJNDAEL_MODE_MCRYPT', CRYPT_MODE_MCRYPT);",
          "142: class Crypt_Rijndael extends Crypt_Base",
          "161:     var $const_namespace = 'RIJNDAEL';",
          "",
          "[Added Lines]",
          "55: namespace phpseclib\\Crypt;",
          "57: use phpseclib\\Crypt\\Base;",
          "66: class Rijndael extends Base",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "276:     var $kl;",
          "",
          "[Removed Lines]",
          "290:     var $t0 = array(",
          "291:         0xC66363A5, 0xF87C7C84, 0xEE777799, 0xF67B7B8D, 0xFFF2F20D, 0xD66B6BBD, 0xDE6F6FB1, 0x91C5C554,",
          "292:         0x60303050, 0x02010103, 0xCE6767A9, 0x562B2B7D, 0xE7FEFE19, 0xB5D7D762, 0x4DABABE6, 0xEC76769A,",
          "293:         0x8FCACA45, 0x1F82829D, 0x89C9C940, 0xFA7D7D87, 0xEFFAFA15, 0xB25959EB, 0x8E4747C9, 0xFBF0F00B,",
          "294:         0x41ADADEC, 0xB3D4D467, 0x5FA2A2FD, 0x45AFAFEA, 0x239C9CBF, 0x53A4A4F7, 0xE4727296, 0x9BC0C05B,",
          "295:         0x75B7B7C2, 0xE1FDFD1C, 0x3D9393AE, 0x4C26266A, 0x6C36365A, 0x7E3F3F41, 0xF5F7F702, 0x83CCCC4F,",
          "296:         0x6834345C, 0x51A5A5F4, 0xD1E5E534, 0xF9F1F108, 0xE2717193, 0xABD8D873, 0x62313153, 0x2A15153F,",
          "297:         0x0804040C, 0x95C7C752, 0x46232365, 0x9DC3C35E, 0x30181828, 0x379696A1, 0x0A05050F, 0x2F9A9AB5,",
          "298:         0x0E070709, 0x24121236, 0x1B80809B, 0xDFE2E23D, 0xCDEBEB26, 0x4E272769, 0x7FB2B2CD, 0xEA75759F,",
          "299:         0x1209091B, 0x1D83839E, 0x582C2C74, 0x341A1A2E, 0x361B1B2D, 0xDC6E6EB2, 0xB45A5AEE, 0x5BA0A0FB,",
          "300:         0xA45252F6, 0x763B3B4D, 0xB7D6D661, 0x7DB3B3CE, 0x5229297B, 0xDDE3E33E, 0x5E2F2F71, 0x13848497,",
          "301:         0xA65353F5, 0xB9D1D168, 0x00000000, 0xC1EDED2C, 0x40202060, 0xE3FCFC1F, 0x79B1B1C8, 0xB65B5BED,",
          "302:         0xD46A6ABE, 0x8DCBCB46, 0x67BEBED9, 0x7239394B, 0x944A4ADE, 0x984C4CD4, 0xB05858E8, 0x85CFCF4A,",
          "303:         0xBBD0D06B, 0xC5EFEF2A, 0x4FAAAAE5, 0xEDFBFB16, 0x864343C5, 0x9A4D4DD7, 0x66333355, 0x11858594,",
          "304:         0x8A4545CF, 0xE9F9F910, 0x04020206, 0xFE7F7F81, 0xA05050F0, 0x783C3C44, 0x259F9FBA, 0x4BA8A8E3,",
          "305:         0xA25151F3, 0x5DA3A3FE, 0x804040C0, 0x058F8F8A, 0x3F9292AD, 0x219D9DBC, 0x70383848, 0xF1F5F504,",
          "306:         0x63BCBCDF, 0x77B6B6C1, 0xAFDADA75, 0x42212163, 0x20101030, 0xE5FFFF1A, 0xFDF3F30E, 0xBFD2D26D,",
          "307:         0x81CDCD4C, 0x180C0C14, 0x26131335, 0xC3ECEC2F, 0xBE5F5FE1, 0x359797A2, 0x884444CC, 0x2E171739,",
          "308:         0x93C4C457, 0x55A7A7F2, 0xFC7E7E82, 0x7A3D3D47, 0xC86464AC, 0xBA5D5DE7, 0x3219192B, 0xE6737395,",
          "309:         0xC06060A0, 0x19818198, 0x9E4F4FD1, 0xA3DCDC7F, 0x44222266, 0x542A2A7E, 0x3B9090AB, 0x0B888883,",
          "310:         0x8C4646CA, 0xC7EEEE29, 0x6BB8B8D3, 0x2814143C, 0xA7DEDE79, 0xBC5E5EE2, 0x160B0B1D, 0xADDBDB76,",
          "311:         0xDBE0E03B, 0x64323256, 0x743A3A4E, 0x140A0A1E, 0x924949DB, 0x0C06060A, 0x4824246C, 0xB85C5CE4,",
          "312:         0x9FC2C25D, 0xBDD3D36E, 0x43ACACEF, 0xC46262A6, 0x399191A8, 0x319595A4, 0xD3E4E437, 0xF279798B,",
          "313:         0xD5E7E732, 0x8BC8C843, 0x6E373759, 0xDA6D6DB7, 0x018D8D8C, 0xB1D5D564, 0x9C4E4ED2, 0x49A9A9E0,",
          "314:         0xD86C6CB4, 0xAC5656FA, 0xF3F4F407, 0xCFEAEA25, 0xCA6565AF, 0xF47A7A8E, 0x47AEAEE9, 0x10080818,",
          "315:         0x6FBABAD5, 0xF0787888, 0x4A25256F, 0x5C2E2E72, 0x381C1C24, 0x57A6A6F1, 0x73B4B4C7, 0x97C6C651,",
          "316:         0xCBE8E823, 0xA1DDDD7C, 0xE874749C, 0x3E1F1F21, 0x964B4BDD, 0x61BDBDDC, 0x0D8B8B86, 0x0F8A8A85,",
          "317:         0xE0707090, 0x7C3E3E42, 0x71B5B5C4, 0xCC6666AA, 0x904848D8, 0x06030305, 0xF7F6F601, 0x1C0E0E12,",
          "318:         0xC26161A3, 0x6A35355F, 0xAE5757F9, 0x69B9B9D0, 0x17868691, 0x99C1C158, 0x3A1D1D27, 0x279E9EB9,",
          "319:         0xD9E1E138, 0xEBF8F813, 0x2B9898B3, 0x22111133, 0xD26969BB, 0xA9D9D970, 0x078E8E89, 0x339494A7,",
          "320:         0x2D9B9BB6, 0x3C1E1E22, 0x15878792, 0xC9E9E920, 0x87CECE49, 0xAA5555FF, 0x50282878, 0xA5DFDF7A,",
          "321:         0x038C8C8F, 0x59A1A1F8, 0x09898980, 0x1A0D0D17, 0x65BFBFDA, 0xD7E6E631, 0x844242C6, 0xD06868B8,",
          "322:         0x824141C3, 0x299999B0, 0x5A2D2D77, 0x1E0F0F11, 0x7BB0B0CB, 0xA85454FC, 0x6DBBBBD6, 0x2C16163A",
          "323:     );",
          "333:     var $t1 = array(",
          "334:         0xA5C66363, 0x84F87C7C, 0x99EE7777, 0x8DF67B7B, 0x0DFFF2F2, 0xBDD66B6B, 0xB1DE6F6F, 0x5491C5C5,",
          "335:         0x50603030, 0x03020101, 0xA9CE6767, 0x7D562B2B, 0x19E7FEFE, 0x62B5D7D7, 0xE64DABAB, 0x9AEC7676,",
          "336:         0x458FCACA, 0x9D1F8282, 0x4089C9C9, 0x87FA7D7D, 0x15EFFAFA, 0xEBB25959, 0xC98E4747, 0x0BFBF0F0,",
          "337:         0xEC41ADAD, 0x67B3D4D4, 0xFD5FA2A2, 0xEA45AFAF, 0xBF239C9C, 0xF753A4A4, 0x96E47272, 0x5B9BC0C0,",
          "338:         0xC275B7B7, 0x1CE1FDFD, 0xAE3D9393, 0x6A4C2626, 0x5A6C3636, 0x417E3F3F, 0x02F5F7F7, 0x4F83CCCC,",
          "339:         0x5C683434, 0xF451A5A5, 0x34D1E5E5, 0x08F9F1F1, 0x93E27171, 0x73ABD8D8, 0x53623131, 0x3F2A1515,",
          "340:         0x0C080404, 0x5295C7C7, 0x65462323, 0x5E9DC3C3, 0x28301818, 0xA1379696, 0x0F0A0505, 0xB52F9A9A,",
          "341:         0x090E0707, 0x36241212, 0x9B1B8080, 0x3DDFE2E2, 0x26CDEBEB, 0x694E2727, 0xCD7FB2B2, 0x9FEA7575,",
          "342:         0x1B120909, 0x9E1D8383, 0x74582C2C, 0x2E341A1A, 0x2D361B1B, 0xB2DC6E6E, 0xEEB45A5A, 0xFB5BA0A0,",
          "343:         0xF6A45252, 0x4D763B3B, 0x61B7D6D6, 0xCE7DB3B3, 0x7B522929, 0x3EDDE3E3, 0x715E2F2F, 0x97138484,",
          "344:         0xF5A65353, 0x68B9D1D1, 0x00000000, 0x2CC1EDED, 0x60402020, 0x1FE3FCFC, 0xC879B1B1, 0xEDB65B5B,",
          "345:         0xBED46A6A, 0x468DCBCB, 0xD967BEBE, 0x4B723939, 0xDE944A4A, 0xD4984C4C, 0xE8B05858, 0x4A85CFCF,",
          "346:         0x6BBBD0D0, 0x2AC5EFEF, 0xE54FAAAA, 0x16EDFBFB, 0xC5864343, 0xD79A4D4D, 0x55663333, 0x94118585,",
          "347:         0xCF8A4545, 0x10E9F9F9, 0x06040202, 0x81FE7F7F, 0xF0A05050, 0x44783C3C, 0xBA259F9F, 0xE34BA8A8,",
          "348:         0xF3A25151, 0xFE5DA3A3, 0xC0804040, 0x8A058F8F, 0xAD3F9292, 0xBC219D9D, 0x48703838, 0x04F1F5F5,",
          "349:         0xDF63BCBC, 0xC177B6B6, 0x75AFDADA, 0x63422121, 0x30201010, 0x1AE5FFFF, 0x0EFDF3F3, 0x6DBFD2D2,",
          "350:         0x4C81CDCD, 0x14180C0C, 0x35261313, 0x2FC3ECEC, 0xE1BE5F5F, 0xA2359797, 0xCC884444, 0x392E1717,",
          "351:         0x5793C4C4, 0xF255A7A7, 0x82FC7E7E, 0x477A3D3D, 0xACC86464, 0xE7BA5D5D, 0x2B321919, 0x95E67373,",
          "352:         0xA0C06060, 0x98198181, 0xD19E4F4F, 0x7FA3DCDC, 0x66442222, 0x7E542A2A, 0xAB3B9090, 0x830B8888,",
          "353:         0xCA8C4646, 0x29C7EEEE, 0xD36BB8B8, 0x3C281414, 0x79A7DEDE, 0xE2BC5E5E, 0x1D160B0B, 0x76ADDBDB,",
          "354:         0x3BDBE0E0, 0x56643232, 0x4E743A3A, 0x1E140A0A, 0xDB924949, 0x0A0C0606, 0x6C482424, 0xE4B85C5C,",
          "355:         0x5D9FC2C2, 0x6EBDD3D3, 0xEF43ACAC, 0xA6C46262, 0xA8399191, 0xA4319595, 0x37D3E4E4, 0x8BF27979,",
          "356:         0x32D5E7E7, 0x438BC8C8, 0x596E3737, 0xB7DA6D6D, 0x8C018D8D, 0x64B1D5D5, 0xD29C4E4E, 0xE049A9A9,",
          "357:         0xB4D86C6C, 0xFAAC5656, 0x07F3F4F4, 0x25CFEAEA, 0xAFCA6565, 0x8EF47A7A, 0xE947AEAE, 0x18100808,",
          "358:         0xD56FBABA, 0x88F07878, 0x6F4A2525, 0x725C2E2E, 0x24381C1C, 0xF157A6A6, 0xC773B4B4, 0x5197C6C6,",
          "359:         0x23CBE8E8, 0x7CA1DDDD, 0x9CE87474, 0x213E1F1F, 0xDD964B4B, 0xDC61BDBD, 0x860D8B8B, 0x850F8A8A,",
          "360:         0x90E07070, 0x427C3E3E, 0xC471B5B5, 0xAACC6666, 0xD8904848, 0x05060303, 0x01F7F6F6, 0x121C0E0E,",
          "361:         0xA3C26161, 0x5F6A3535, 0xF9AE5757, 0xD069B9B9, 0x91178686, 0x5899C1C1, 0x273A1D1D, 0xB9279E9E,",
          "362:         0x38D9E1E1, 0x13EBF8F8, 0xB32B9898, 0x33221111, 0xBBD26969, 0x70A9D9D9, 0x89078E8E, 0xA7339494,",
          "363:         0xB62D9B9B, 0x223C1E1E, 0x92158787, 0x20C9E9E9, 0x4987CECE, 0xFFAA5555, 0x78502828, 0x7AA5DFDF,",
          "364:         0x8F038C8C, 0xF859A1A1, 0x80098989, 0x171A0D0D, 0xDA65BFBF, 0x31D7E6E6, 0xC6844242, 0xB8D06868,",
          "365:         0xC3824141, 0xB0299999, 0x775A2D2D, 0x111E0F0F, 0xCB7BB0B0, 0xFCA85454, 0xD66DBBBB, 0x3A2C1616",
          "366:     );",
          "376:     var $t2 = array(",
          "377:         0x63A5C663, 0x7C84F87C, 0x7799EE77, 0x7B8DF67B, 0xF20DFFF2, 0x6BBDD66B, 0x6FB1DE6F, 0xC55491C5,",
          "378:         0x30506030, 0x01030201, 0x67A9CE67, 0x2B7D562B, 0xFE19E7FE, 0xD762B5D7, 0xABE64DAB, 0x769AEC76,",
          "379:         0xCA458FCA, 0x829D1F82, 0xC94089C9, 0x7D87FA7D, 0xFA15EFFA, 0x59EBB259, 0x47C98E47, 0xF00BFBF0,",
          "380:         0xADEC41AD, 0xD467B3D4, 0xA2FD5FA2, 0xAFEA45AF, 0x9CBF239C, 0xA4F753A4, 0x7296E472, 0xC05B9BC0,",
          "381:         0xB7C275B7, 0xFD1CE1FD, 0x93AE3D93, 0x266A4C26, 0x365A6C36, 0x3F417E3F, 0xF702F5F7, 0xCC4F83CC,",
          "382:         0x345C6834, 0xA5F451A5, 0xE534D1E5, 0xF108F9F1, 0x7193E271, 0xD873ABD8, 0x31536231, 0x153F2A15,",
          "383:         0x040C0804, 0xC75295C7, 0x23654623, 0xC35E9DC3, 0x18283018, 0x96A13796, 0x050F0A05, 0x9AB52F9A,",
          "384:         0x07090E07, 0x12362412, 0x809B1B80, 0xE23DDFE2, 0xEB26CDEB, 0x27694E27, 0xB2CD7FB2, 0x759FEA75,",
          "385:         0x091B1209, 0x839E1D83, 0x2C74582C, 0x1A2E341A, 0x1B2D361B, 0x6EB2DC6E, 0x5AEEB45A, 0xA0FB5BA0,",
          "386:         0x52F6A452, 0x3B4D763B, 0xD661B7D6, 0xB3CE7DB3, 0x297B5229, 0xE33EDDE3, 0x2F715E2F, 0x84971384,",
          "387:         0x53F5A653, 0xD168B9D1, 0x00000000, 0xED2CC1ED, 0x20604020, 0xFC1FE3FC, 0xB1C879B1, 0x5BEDB65B,",
          "388:         0x6ABED46A, 0xCB468DCB, 0xBED967BE, 0x394B7239, 0x4ADE944A, 0x4CD4984C, 0x58E8B058, 0xCF4A85CF,",
          "389:         0xD06BBBD0, 0xEF2AC5EF, 0xAAE54FAA, 0xFB16EDFB, 0x43C58643, 0x4DD79A4D, 0x33556633, 0x85941185,",
          "390:         0x45CF8A45, 0xF910E9F9, 0x02060402, 0x7F81FE7F, 0x50F0A050, 0x3C44783C, 0x9FBA259F, 0xA8E34BA8,",
          "391:         0x51F3A251, 0xA3FE5DA3, 0x40C08040, 0x8F8A058F, 0x92AD3F92, 0x9DBC219D, 0x38487038, 0xF504F1F5,",
          "392:         0xBCDF63BC, 0xB6C177B6, 0xDA75AFDA, 0x21634221, 0x10302010, 0xFF1AE5FF, 0xF30EFDF3, 0xD26DBFD2,",
          "393:         0xCD4C81CD, 0x0C14180C, 0x13352613, 0xEC2FC3EC, 0x5FE1BE5F, 0x97A23597, 0x44CC8844, 0x17392E17,",
          "394:         0xC45793C4, 0xA7F255A7, 0x7E82FC7E, 0x3D477A3D, 0x64ACC864, 0x5DE7BA5D, 0x192B3219, 0x7395E673,",
          "395:         0x60A0C060, 0x81981981, 0x4FD19E4F, 0xDC7FA3DC, 0x22664422, 0x2A7E542A, 0x90AB3B90, 0x88830B88,",
          "396:         0x46CA8C46, 0xEE29C7EE, 0xB8D36BB8, 0x143C2814, 0xDE79A7DE, 0x5EE2BC5E, 0x0B1D160B, 0xDB76ADDB,",
          "397:         0xE03BDBE0, 0x32566432, 0x3A4E743A, 0x0A1E140A, 0x49DB9249, 0x060A0C06, 0x246C4824, 0x5CE4B85C,",
          "398:         0xC25D9FC2, 0xD36EBDD3, 0xACEF43AC, 0x62A6C462, 0x91A83991, 0x95A43195, 0xE437D3E4, 0x798BF279,",
          "399:         0xE732D5E7, 0xC8438BC8, 0x37596E37, 0x6DB7DA6D, 0x8D8C018D, 0xD564B1D5, 0x4ED29C4E, 0xA9E049A9,",
          "400:         0x6CB4D86C, 0x56FAAC56, 0xF407F3F4, 0xEA25CFEA, 0x65AFCA65, 0x7A8EF47A, 0xAEE947AE, 0x08181008,",
          "401:         0xBAD56FBA, 0x7888F078, 0x256F4A25, 0x2E725C2E, 0x1C24381C, 0xA6F157A6, 0xB4C773B4, 0xC65197C6,",
          "402:         0xE823CBE8, 0xDD7CA1DD, 0x749CE874, 0x1F213E1F, 0x4BDD964B, 0xBDDC61BD, 0x8B860D8B, 0x8A850F8A,",
          "403:         0x7090E070, 0x3E427C3E, 0xB5C471B5, 0x66AACC66, 0x48D89048, 0x03050603, 0xF601F7F6, 0x0E121C0E,",
          "404:         0x61A3C261, 0x355F6A35, 0x57F9AE57, 0xB9D069B9, 0x86911786, 0xC15899C1, 0x1D273A1D, 0x9EB9279E,",
          "405:         0xE138D9E1, 0xF813EBF8, 0x98B32B98, 0x11332211, 0x69BBD269, 0xD970A9D9, 0x8E89078E, 0x94A73394,",
          "406:         0x9BB62D9B, 0x1E223C1E, 0x87921587, 0xE920C9E9, 0xCE4987CE, 0x55FFAA55, 0x28785028, 0xDF7AA5DF,",
          "407:         0x8C8F038C, 0xA1F859A1, 0x89800989, 0x0D171A0D, 0xBFDA65BF, 0xE631D7E6, 0x42C68442, 0x68B8D068,",
          "408:         0x41C38241, 0x99B02999, 0x2D775A2D, 0x0F111E0F, 0xB0CB7BB0, 0x54FCA854, 0xBBD66DBB, 0x163A2C16",
          "409:     );",
          "419:     var $t3 = array(",
          "420:         0x6363A5C6, 0x7C7C84F8, 0x777799EE, 0x7B7B8DF6, 0xF2F20DFF, 0x6B6BBDD6, 0x6F6FB1DE, 0xC5C55491,",
          "421:         0x30305060, 0x01010302, 0x6767A9CE, 0x2B2B7D56, 0xFEFE19E7, 0xD7D762B5, 0xABABE64D, 0x76769AEC,",
          "422:         0xCACA458F, 0x82829D1F, 0xC9C94089, 0x7D7D87FA, 0xFAFA15EF, 0x5959EBB2, 0x4747C98E, 0xF0F00BFB,",
          "423:         0xADADEC41, 0xD4D467B3, 0xA2A2FD5F, 0xAFAFEA45, 0x9C9CBF23, 0xA4A4F753, 0x727296E4, 0xC0C05B9B,",
          "424:         0xB7B7C275, 0xFDFD1CE1, 0x9393AE3D, 0x26266A4C, 0x36365A6C, 0x3F3F417E, 0xF7F702F5, 0xCCCC4F83,",
          "425:         0x34345C68, 0xA5A5F451, 0xE5E534D1, 0xF1F108F9, 0x717193E2, 0xD8D873AB, 0x31315362, 0x15153F2A,",
          "426:         0x04040C08, 0xC7C75295, 0x23236546, 0xC3C35E9D, 0x18182830, 0x9696A137, 0x05050F0A, 0x9A9AB52F,",
          "427:         0x0707090E, 0x12123624, 0x80809B1B, 0xE2E23DDF, 0xEBEB26CD, 0x2727694E, 0xB2B2CD7F, 0x75759FEA,",
          "428:         0x09091B12, 0x83839E1D, 0x2C2C7458, 0x1A1A2E34, 0x1B1B2D36, 0x6E6EB2DC, 0x5A5AEEB4, 0xA0A0FB5B,",
          "429:         0x5252F6A4, 0x3B3B4D76, 0xD6D661B7, 0xB3B3CE7D, 0x29297B52, 0xE3E33EDD, 0x2F2F715E, 0x84849713,",
          "430:         0x5353F5A6, 0xD1D168B9, 0x00000000, 0xEDED2CC1, 0x20206040, 0xFCFC1FE3, 0xB1B1C879, 0x5B5BEDB6,",
          "431:         0x6A6ABED4, 0xCBCB468D, 0xBEBED967, 0x39394B72, 0x4A4ADE94, 0x4C4CD498, 0x5858E8B0, 0xCFCF4A85,",
          "432:         0xD0D06BBB, 0xEFEF2AC5, 0xAAAAE54F, 0xFBFB16ED, 0x4343C586, 0x4D4DD79A, 0x33335566, 0x85859411,",
          "433:         0x4545CF8A, 0xF9F910E9, 0x02020604, 0x7F7F81FE, 0x5050F0A0, 0x3C3C4478, 0x9F9FBA25, 0xA8A8E34B,",
          "434:         0x5151F3A2, 0xA3A3FE5D, 0x4040C080, 0x8F8F8A05, 0x9292AD3F, 0x9D9DBC21, 0x38384870, 0xF5F504F1,",
          "435:         0xBCBCDF63, 0xB6B6C177, 0xDADA75AF, 0x21216342, 0x10103020, 0xFFFF1AE5, 0xF3F30EFD, 0xD2D26DBF,",
          "436:         0xCDCD4C81, 0x0C0C1418, 0x13133526, 0xECEC2FC3, 0x5F5FE1BE, 0x9797A235, 0x4444CC88, 0x1717392E,",
          "437:         0xC4C45793, 0xA7A7F255, 0x7E7E82FC, 0x3D3D477A, 0x6464ACC8, 0x5D5DE7BA, 0x19192B32, 0x737395E6,",
          "438:         0x6060A0C0, 0x81819819, 0x4F4FD19E, 0xDCDC7FA3, 0x22226644, 0x2A2A7E54, 0x9090AB3B, 0x8888830B,",
          "439:         0x4646CA8C, 0xEEEE29C7, 0xB8B8D36B, 0x14143C28, 0xDEDE79A7, 0x5E5EE2BC, 0x0B0B1D16, 0xDBDB76AD,",
          "440:         0xE0E03BDB, 0x32325664, 0x3A3A4E74, 0x0A0A1E14, 0x4949DB92, 0x06060A0C, 0x24246C48, 0x5C5CE4B8,",
          "441:         0xC2C25D9F, 0xD3D36EBD, 0xACACEF43, 0x6262A6C4, 0x9191A839, 0x9595A431, 0xE4E437D3, 0x79798BF2,",
          "442:         0xE7E732D5, 0xC8C8438B, 0x3737596E, 0x6D6DB7DA, 0x8D8D8C01, 0xD5D564B1, 0x4E4ED29C, 0xA9A9E049,",
          "443:         0x6C6CB4D8, 0x5656FAAC, 0xF4F407F3, 0xEAEA25CF, 0x6565AFCA, 0x7A7A8EF4, 0xAEAEE947, 0x08081810,",
          "444:         0xBABAD56F, 0x787888F0, 0x25256F4A, 0x2E2E725C, 0x1C1C2438, 0xA6A6F157, 0xB4B4C773, 0xC6C65197,",
          "445:         0xE8E823CB, 0xDDDD7CA1, 0x74749CE8, 0x1F1F213E, 0x4B4BDD96, 0xBDBDDC61, 0x8B8B860D, 0x8A8A850F,",
          "446:         0x707090E0, 0x3E3E427C, 0xB5B5C471, 0x6666AACC, 0x4848D890, 0x03030506, 0xF6F601F7, 0x0E0E121C,",
          "447:         0x6161A3C2, 0x35355F6A, 0x5757F9AE, 0xB9B9D069, 0x86869117, 0xC1C15899, 0x1D1D273A, 0x9E9EB927,",
          "448:         0xE1E138D9, 0xF8F813EB, 0x9898B32B, 0x11113322, 0x6969BBD2, 0xD9D970A9, 0x8E8E8907, 0x9494A733,",
          "449:         0x9B9BB62D, 0x1E1E223C, 0x87879215, 0xE9E920C9, 0xCECE4987, 0x5555FFAA, 0x28287850, 0xDFDF7AA5,",
          "450:         0x8C8C8F03, 0xA1A1F859, 0x89898009, 0x0D0D171A, 0xBFBFDA65, 0xE6E631D7, 0x4242C684, 0x6868B8D0,",
          "451:         0x4141C382, 0x9999B029, 0x2D2D775A, 0x0F0F111E, 0xB0B0CB7B, 0x5454FCA8, 0xBBBBD66D, 0x16163A2C",
          "452:     );",
          "462:     var $dt0 = array(",
          "463:         0x51F4A750, 0x7E416553, 0x1A17A4C3, 0x3A275E96, 0x3BAB6BCB, 0x1F9D45F1, 0xACFA58AB, 0x4BE30393,",
          "464:         0x2030FA55, 0xAD766DF6, 0x88CC7691, 0xF5024C25, 0x4FE5D7FC, 0xC52ACBD7, 0x26354480, 0xB562A38F,",
          "465:         0xDEB15A49, 0x25BA1B67, 0x45EA0E98, 0x5DFEC0E1, 0xC32F7502, 0x814CF012, 0x8D4697A3, 0x6BD3F9C6,",
          "466:         0x038F5FE7, 0x15929C95, 0xBF6D7AEB, 0x955259DA, 0xD4BE832D, 0x587421D3, 0x49E06929, 0x8EC9C844,",
          "467:         0x75C2896A, 0xF48E7978, 0x99583E6B, 0x27B971DD, 0xBEE14FB6, 0xF088AD17, 0xC920AC66, 0x7DCE3AB4,",
          "468:         0x63DF4A18, 0xE51A3182, 0x97513360, 0x62537F45, 0xB16477E0, 0xBB6BAE84, 0xFE81A01C, 0xF9082B94,",
          "469:         0x70486858, 0x8F45FD19, 0x94DE6C87, 0x527BF8B7, 0xAB73D323, 0x724B02E2, 0xE31F8F57, 0x6655AB2A,",
          "470:         0xB2EB2807, 0x2FB5C203, 0x86C57B9A, 0xD33708A5, 0x302887F2, 0x23BFA5B2, 0x02036ABA, 0xED16825C,",
          "471:         0x8ACF1C2B, 0xA779B492, 0xF307F2F0, 0x4E69E2A1, 0x65DAF4CD, 0x0605BED5, 0xD134621F, 0xC4A6FE8A,",
          "472:         0x342E539D, 0xA2F355A0, 0x058AE132, 0xA4F6EB75, 0x0B83EC39, 0x4060EFAA, 0x5E719F06, 0xBD6E1051,",
          "473:         0x3E218AF9, 0x96DD063D, 0xDD3E05AE, 0x4DE6BD46, 0x91548DB5, 0x71C45D05, 0x0406D46F, 0x605015FF,",
          "474:         0x1998FB24, 0xD6BDE997, 0x894043CC, 0x67D99E77, 0xB0E842BD, 0x07898B88, 0xE7195B38, 0x79C8EEDB,",
          "475:         0xA17C0A47, 0x7C420FE9, 0xF8841EC9, 0x00000000, 0x09808683, 0x322BED48, 0x1E1170AC, 0x6C5A724E,",
          "476:         0xFD0EFFFB, 0x0F853856, 0x3DAED51E, 0x362D3927, 0x0A0FD964, 0x685CA621, 0x9B5B54D1, 0x24362E3A,",
          "477:         0x0C0A67B1, 0x9357E70F, 0xB4EE96D2, 0x1B9B919E, 0x80C0C54F, 0x61DC20A2, 0x5A774B69, 0x1C121A16,",
          "478:         0xE293BA0A, 0xC0A02AE5, 0x3C22E043, 0x121B171D, 0x0E090D0B, 0xF28BC7AD, 0x2DB6A8B9, 0x141EA9C8,",
          "479:         0x57F11985, 0xAF75074C, 0xEE99DDBB, 0xA37F60FD, 0xF701269F, 0x5C72F5BC, 0x44663BC5, 0x5BFB7E34,",
          "480:         0x8B432976, 0xCB23C6DC, 0xB6EDFC68, 0xB8E4F163, 0xD731DCCA, 0x42638510, 0x13972240, 0x84C61120,",
          "481:         0x854A247D, 0xD2BB3DF8, 0xAEF93211, 0xC729A16D, 0x1D9E2F4B, 0xDCB230F3, 0x0D8652EC, 0x77C1E3D0,",
          "482:         0x2BB3166C, 0xA970B999, 0x119448FA, 0x47E96422, 0xA8FC8CC4, 0xA0F03F1A, 0x567D2CD8, 0x223390EF,",
          "483:         0x87494EC7, 0xD938D1C1, 0x8CCAA2FE, 0x98D40B36, 0xA6F581CF, 0xA57ADE28, 0xDAB78E26, 0x3FADBFA4,",
          "484:         0x2C3A9DE4, 0x5078920D, 0x6A5FCC9B, 0x547E4662, 0xF68D13C2, 0x90D8B8E8, 0x2E39F75E, 0x82C3AFF5,",
          "485:         0x9F5D80BE, 0x69D0937C, 0x6FD52DA9, 0xCF2512B3, 0xC8AC993B, 0x10187DA7, 0xE89C636E, 0xDB3BBB7B,",
          "486:         0xCD267809, 0x6E5918F4, 0xEC9AB701, 0x834F9AA8, 0xE6956E65, 0xAAFFE67E, 0x21BCCF08, 0xEF15E8E6,",
          "487:         0xBAE79BD9, 0x4A6F36CE, 0xEA9F09D4, 0x29B07CD6, 0x31A4B2AF, 0x2A3F2331, 0xC6A59430, 0x35A266C0,",
          "488:         0x744EBC37, 0xFC82CAA6, 0xE090D0B0, 0x33A7D815, 0xF104984A, 0x41ECDAF7, 0x7FCD500E, 0x1791F62F,",
          "489:         0x764DD68D, 0x43EFB04D, 0xCCAA4D54, 0xE49604DF, 0x9ED1B5E3, 0x4C6A881B, 0xC12C1FB8, 0x4665517F,",
          "490:         0x9D5EEA04, 0x018C355D, 0xFA877473, 0xFB0B412E, 0xB3671D5A, 0x92DBD252, 0xE9105633, 0x6DD64713,",
          "491:         0x9AD7618C, 0x37A10C7A, 0x59F8148E, 0xEB133C89, 0xCEA927EE, 0xB761C935, 0xE11CE5ED, 0x7A47B13C,",
          "492:         0x9CD2DF59, 0x55F2733F, 0x1814CE79, 0x73C737BF, 0x53F7CDEA, 0x5FFDAA5B, 0xDF3D6F14, 0x7844DB86,",
          "493:         0xCAAFF381, 0xB968C43E, 0x3824342C, 0xC2A3405F, 0x161DC372, 0xBCE2250C, 0x283C498B, 0xFF0D9541,",
          "494:         0x39A80171, 0x080CB3DE, 0xD8B4E49C, 0x6456C190, 0x7BCB8461, 0xD532B670, 0x486C5C74, 0xD0B85742",
          "495:     );",
          "505:     var $dt1 = array(",
          "506:         0x5051F4A7, 0x537E4165, 0xC31A17A4, 0x963A275E, 0xCB3BAB6B, 0xF11F9D45, 0xABACFA58, 0x934BE303,",
          "507:         0x552030FA, 0xF6AD766D, 0x9188CC76, 0x25F5024C, 0xFC4FE5D7, 0xD7C52ACB, 0x80263544, 0x8FB562A3,",
          "508:         0x49DEB15A, 0x6725BA1B, 0x9845EA0E, 0xE15DFEC0, 0x02C32F75, 0x12814CF0, 0xA38D4697, 0xC66BD3F9,",
          "509:         0xE7038F5F, 0x9515929C, 0xEBBF6D7A, 0xDA955259, 0x2DD4BE83, 0xD3587421, 0x2949E069, 0x448EC9C8,",
          "510:         0x6A75C289, 0x78F48E79, 0x6B99583E, 0xDD27B971, 0xB6BEE14F, 0x17F088AD, 0x66C920AC, 0xB47DCE3A,",
          "511:         0x1863DF4A, 0x82E51A31, 0x60975133, 0x4562537F, 0xE0B16477, 0x84BB6BAE, 0x1CFE81A0, 0x94F9082B,",
          "512:         0x58704868, 0x198F45FD, 0x8794DE6C, 0xB7527BF8, 0x23AB73D3, 0xE2724B02, 0x57E31F8F, 0x2A6655AB,",
          "513:         0x07B2EB28, 0x032FB5C2, 0x9A86C57B, 0xA5D33708, 0xF2302887, 0xB223BFA5, 0xBA02036A, 0x5CED1682,",
          "514:         0x2B8ACF1C, 0x92A779B4, 0xF0F307F2, 0xA14E69E2, 0xCD65DAF4, 0xD50605BE, 0x1FD13462, 0x8AC4A6FE,",
          "515:         0x9D342E53, 0xA0A2F355, 0x32058AE1, 0x75A4F6EB, 0x390B83EC, 0xAA4060EF, 0x065E719F, 0x51BD6E10,",
          "516:         0xF93E218A, 0x3D96DD06, 0xAEDD3E05, 0x464DE6BD, 0xB591548D, 0x0571C45D, 0x6F0406D4, 0xFF605015,",
          "517:         0x241998FB, 0x97D6BDE9, 0xCC894043, 0x7767D99E, 0xBDB0E842, 0x8807898B, 0x38E7195B, 0xDB79C8EE,",
          "518:         0x47A17C0A, 0xE97C420F, 0xC9F8841E, 0x00000000, 0x83098086, 0x48322BED, 0xAC1E1170, 0x4E6C5A72,",
          "519:         0xFBFD0EFF, 0x560F8538, 0x1E3DAED5, 0x27362D39, 0x640A0FD9, 0x21685CA6, 0xD19B5B54, 0x3A24362E,",
          "520:         0xB10C0A67, 0x0F9357E7, 0xD2B4EE96, 0x9E1B9B91, 0x4F80C0C5, 0xA261DC20, 0x695A774B, 0x161C121A,",
          "521:         0x0AE293BA, 0xE5C0A02A, 0x433C22E0, 0x1D121B17, 0x0B0E090D, 0xADF28BC7, 0xB92DB6A8, 0xC8141EA9,",
          "522:         0x8557F119, 0x4CAF7507, 0xBBEE99DD, 0xFDA37F60, 0x9FF70126, 0xBC5C72F5, 0xC544663B, 0x345BFB7E,",
          "523:         0x768B4329, 0xDCCB23C6, 0x68B6EDFC, 0x63B8E4F1, 0xCAD731DC, 0x10426385, 0x40139722, 0x2084C611,",
          "524:         0x7D854A24, 0xF8D2BB3D, 0x11AEF932, 0x6DC729A1, 0x4B1D9E2F, 0xF3DCB230, 0xEC0D8652, 0xD077C1E3,",
          "525:         0x6C2BB316, 0x99A970B9, 0xFA119448, 0x2247E964, 0xC4A8FC8C, 0x1AA0F03F, 0xD8567D2C, 0xEF223390,",
          "526:         0xC787494E, 0xC1D938D1, 0xFE8CCAA2, 0x3698D40B, 0xCFA6F581, 0x28A57ADE, 0x26DAB78E, 0xA43FADBF,",
          "527:         0xE42C3A9D, 0x0D507892, 0x9B6A5FCC, 0x62547E46, 0xC2F68D13, 0xE890D8B8, 0x5E2E39F7, 0xF582C3AF,",
          "528:         0xBE9F5D80, 0x7C69D093, 0xA96FD52D, 0xB3CF2512, 0x3BC8AC99, 0xA710187D, 0x6EE89C63, 0x7BDB3BBB,",
          "529:         0x09CD2678, 0xF46E5918, 0x01EC9AB7, 0xA8834F9A, 0x65E6956E, 0x7EAAFFE6, 0x0821BCCF, 0xE6EF15E8,",
          "530:         0xD9BAE79B, 0xCE4A6F36, 0xD4EA9F09, 0xD629B07C, 0xAF31A4B2, 0x312A3F23, 0x30C6A594, 0xC035A266,",
          "531:         0x37744EBC, 0xA6FC82CA, 0xB0E090D0, 0x1533A7D8, 0x4AF10498, 0xF741ECDA, 0x0E7FCD50, 0x2F1791F6,",
          "532:         0x8D764DD6, 0x4D43EFB0, 0x54CCAA4D, 0xDFE49604, 0xE39ED1B5, 0x1B4C6A88, 0xB8C12C1F, 0x7F466551,",
          "533:         0x049D5EEA, 0x5D018C35, 0x73FA8774, 0x2EFB0B41, 0x5AB3671D, 0x5292DBD2, 0x33E91056, 0x136DD647,",
          "534:         0x8C9AD761, 0x7A37A10C, 0x8E59F814, 0x89EB133C, 0xEECEA927, 0x35B761C9, 0xEDE11CE5, 0x3C7A47B1,",
          "535:         0x599CD2DF, 0x3F55F273, 0x791814CE, 0xBF73C737, 0xEA53F7CD, 0x5B5FFDAA, 0x14DF3D6F, 0x867844DB,",
          "536:         0x81CAAFF3, 0x3EB968C4, 0x2C382434, 0x5FC2A340, 0x72161DC3, 0x0CBCE225, 0x8B283C49, 0x41FF0D95,",
          "537:         0x7139A801, 0xDE080CB3, 0x9CD8B4E4, 0x906456C1, 0x617BCB84, 0x70D532B6, 0x74486C5C, 0x42D0B857",
          "538:     );",
          "548:     var $dt2 = array(",
          "549:         0xA75051F4, 0x65537E41, 0xA4C31A17, 0x5E963A27, 0x6BCB3BAB, 0x45F11F9D, 0x58ABACFA, 0x03934BE3,",
          "550:         0xFA552030, 0x6DF6AD76, 0x769188CC, 0x4C25F502, 0xD7FC4FE5, 0xCBD7C52A, 0x44802635, 0xA38FB562,",
          "551:         0x5A49DEB1, 0x1B6725BA, 0x0E9845EA, 0xC0E15DFE, 0x7502C32F, 0xF012814C, 0x97A38D46, 0xF9C66BD3,",
          "552:         0x5FE7038F, 0x9C951592, 0x7AEBBF6D, 0x59DA9552, 0x832DD4BE, 0x21D35874, 0x692949E0, 0xC8448EC9,",
          "553:         0x896A75C2, 0x7978F48E, 0x3E6B9958, 0x71DD27B9, 0x4FB6BEE1, 0xAD17F088, 0xAC66C920, 0x3AB47DCE,",
          "554:         0x4A1863DF, 0x3182E51A, 0x33609751, 0x7F456253, 0x77E0B164, 0xAE84BB6B, 0xA01CFE81, 0x2B94F908,",
          "555:         0x68587048, 0xFD198F45, 0x6C8794DE, 0xF8B7527B, 0xD323AB73, 0x02E2724B, 0x8F57E31F, 0xAB2A6655,",
          "556:         0x2807B2EB, 0xC2032FB5, 0x7B9A86C5, 0x08A5D337, 0x87F23028, 0xA5B223BF, 0x6ABA0203, 0x825CED16,",
          "557:         0x1C2B8ACF, 0xB492A779, 0xF2F0F307, 0xE2A14E69, 0xF4CD65DA, 0xBED50605, 0x621FD134, 0xFE8AC4A6,",
          "558:         0x539D342E, 0x55A0A2F3, 0xE132058A, 0xEB75A4F6, 0xEC390B83, 0xEFAA4060, 0x9F065E71, 0x1051BD6E,",
          "559:         0x8AF93E21, 0x063D96DD, 0x05AEDD3E, 0xBD464DE6, 0x8DB59154, 0x5D0571C4, 0xD46F0406, 0x15FF6050,",
          "560:         0xFB241998, 0xE997D6BD, 0x43CC8940, 0x9E7767D9, 0x42BDB0E8, 0x8B880789, 0x5B38E719, 0xEEDB79C8,",
          "561:         0x0A47A17C, 0x0FE97C42, 0x1EC9F884, 0x00000000, 0x86830980, 0xED48322B, 0x70AC1E11, 0x724E6C5A,",
          "562:         0xFFFBFD0E, 0x38560F85, 0xD51E3DAE, 0x3927362D, 0xD9640A0F, 0xA621685C, 0x54D19B5B, 0x2E3A2436,",
          "563:         0x67B10C0A, 0xE70F9357, 0x96D2B4EE, 0x919E1B9B, 0xC54F80C0, 0x20A261DC, 0x4B695A77, 0x1A161C12,",
          "564:         0xBA0AE293, 0x2AE5C0A0, 0xE0433C22, 0x171D121B, 0x0D0B0E09, 0xC7ADF28B, 0xA8B92DB6, 0xA9C8141E,",
          "565:         0x198557F1, 0x074CAF75, 0xDDBBEE99, 0x60FDA37F, 0x269FF701, 0xF5BC5C72, 0x3BC54466, 0x7E345BFB,",
          "566:         0x29768B43, 0xC6DCCB23, 0xFC68B6ED, 0xF163B8E4, 0xDCCAD731, 0x85104263, 0x22401397, 0x112084C6,",
          "567:         0x247D854A, 0x3DF8D2BB, 0x3211AEF9, 0xA16DC729, 0x2F4B1D9E, 0x30F3DCB2, 0x52EC0D86, 0xE3D077C1,",
          "568:         0x166C2BB3, 0xB999A970, 0x48FA1194, 0x642247E9, 0x8CC4A8FC, 0x3F1AA0F0, 0x2CD8567D, 0x90EF2233,",
          "569:         0x4EC78749, 0xD1C1D938, 0xA2FE8CCA, 0x0B3698D4, 0x81CFA6F5, 0xDE28A57A, 0x8E26DAB7, 0xBFA43FAD,",
          "570:         0x9DE42C3A, 0x920D5078, 0xCC9B6A5F, 0x4662547E, 0x13C2F68D, 0xB8E890D8, 0xF75E2E39, 0xAFF582C3,",
          "571:         0x80BE9F5D, 0x937C69D0, 0x2DA96FD5, 0x12B3CF25, 0x993BC8AC, 0x7DA71018, 0x636EE89C, 0xBB7BDB3B,",
          "572:         0x7809CD26, 0x18F46E59, 0xB701EC9A, 0x9AA8834F, 0x6E65E695, 0xE67EAAFF, 0xCF0821BC, 0xE8E6EF15,",
          "573:         0x9BD9BAE7, 0x36CE4A6F, 0x09D4EA9F, 0x7CD629B0, 0xB2AF31A4, 0x23312A3F, 0x9430C6A5, 0x66C035A2,",
          "574:         0xBC37744E, 0xCAA6FC82, 0xD0B0E090, 0xD81533A7, 0x984AF104, 0xDAF741EC, 0x500E7FCD, 0xF62F1791,",
          "575:         0xD68D764D, 0xB04D43EF, 0x4D54CCAA, 0x04DFE496, 0xB5E39ED1, 0x881B4C6A, 0x1FB8C12C, 0x517F4665,",
          "576:         0xEA049D5E, 0x355D018C, 0x7473FA87, 0x412EFB0B, 0x1D5AB367, 0xD25292DB, 0x5633E910, 0x47136DD6,",
          "577:         0x618C9AD7, 0x0C7A37A1, 0x148E59F8, 0x3C89EB13, 0x27EECEA9, 0xC935B761, 0xE5EDE11C, 0xB13C7A47,",
          "578:         0xDF599CD2, 0x733F55F2, 0xCE791814, 0x37BF73C7, 0xCDEA53F7, 0xAA5B5FFD, 0x6F14DF3D, 0xDB867844,",
          "579:         0xF381CAAF, 0xC43EB968, 0x342C3824, 0x405FC2A3, 0xC372161D, 0x250CBCE2, 0x498B283C, 0x9541FF0D,",
          "580:         0x017139A8, 0xB3DE080C, 0xE49CD8B4, 0xC1906456, 0x84617BCB, 0xB670D532, 0x5C74486C, 0x5742D0B8",
          "581:     );",
          "591:     var $dt3 = array(",
          "592:         0xF4A75051, 0x4165537E, 0x17A4C31A, 0x275E963A, 0xAB6BCB3B, 0x9D45F11F, 0xFA58ABAC, 0xE303934B,",
          "593:         0x30FA5520, 0x766DF6AD, 0xCC769188, 0x024C25F5, 0xE5D7FC4F, 0x2ACBD7C5, 0x35448026, 0x62A38FB5,",
          "594:         0xB15A49DE, 0xBA1B6725, 0xEA0E9845, 0xFEC0E15D, 0x2F7502C3, 0x4CF01281, 0x4697A38D, 0xD3F9C66B,",
          "595:         0x8F5FE703, 0x929C9515, 0x6D7AEBBF, 0x5259DA95, 0xBE832DD4, 0x7421D358, 0xE0692949, 0xC9C8448E,",
          "596:         0xC2896A75, 0x8E7978F4, 0x583E6B99, 0xB971DD27, 0xE14FB6BE, 0x88AD17F0, 0x20AC66C9, 0xCE3AB47D,",
          "597:         0xDF4A1863, 0x1A3182E5, 0x51336097, 0x537F4562, 0x6477E0B1, 0x6BAE84BB, 0x81A01CFE, 0x082B94F9,",
          "598:         0x48685870, 0x45FD198F, 0xDE6C8794, 0x7BF8B752, 0x73D323AB, 0x4B02E272, 0x1F8F57E3, 0x55AB2A66,",
          "599:         0xEB2807B2, 0xB5C2032F, 0xC57B9A86, 0x3708A5D3, 0x2887F230, 0xBFA5B223, 0x036ABA02, 0x16825CED,",
          "600:         0xCF1C2B8A, 0x79B492A7, 0x07F2F0F3, 0x69E2A14E, 0xDAF4CD65, 0x05BED506, 0x34621FD1, 0xA6FE8AC4,",
          "601:         0x2E539D34, 0xF355A0A2, 0x8AE13205, 0xF6EB75A4, 0x83EC390B, 0x60EFAA40, 0x719F065E, 0x6E1051BD,",
          "602:         0x218AF93E, 0xDD063D96, 0x3E05AEDD, 0xE6BD464D, 0x548DB591, 0xC45D0571, 0x06D46F04, 0x5015FF60,",
          "603:         0x98FB2419, 0xBDE997D6, 0x4043CC89, 0xD99E7767, 0xE842BDB0, 0x898B8807, 0x195B38E7, 0xC8EEDB79,",
          "604:         0x7C0A47A1, 0x420FE97C, 0x841EC9F8, 0x00000000, 0x80868309, 0x2BED4832, 0x1170AC1E, 0x5A724E6C,",
          "605:         0x0EFFFBFD, 0x8538560F, 0xAED51E3D, 0x2D392736, 0x0FD9640A, 0x5CA62168, 0x5B54D19B, 0x362E3A24,",
          "606:         0x0A67B10C, 0x57E70F93, 0xEE96D2B4, 0x9B919E1B, 0xC0C54F80, 0xDC20A261, 0x774B695A, 0x121A161C,",
          "607:         0x93BA0AE2, 0xA02AE5C0, 0x22E0433C, 0x1B171D12, 0x090D0B0E, 0x8BC7ADF2, 0xB6A8B92D, 0x1EA9C814,",
          "608:         0xF1198557, 0x75074CAF, 0x99DDBBEE, 0x7F60FDA3, 0x01269FF7, 0x72F5BC5C, 0x663BC544, 0xFB7E345B,",
          "609:         0x4329768B, 0x23C6DCCB, 0xEDFC68B6, 0xE4F163B8, 0x31DCCAD7, 0x63851042, 0x97224013, 0xC6112084,",
          "610:         0x4A247D85, 0xBB3DF8D2, 0xF93211AE, 0x29A16DC7, 0x9E2F4B1D, 0xB230F3DC, 0x8652EC0D, 0xC1E3D077,",
          "611:         0xB3166C2B, 0x70B999A9, 0x9448FA11, 0xE9642247, 0xFC8CC4A8, 0xF03F1AA0, 0x7D2CD856, 0x3390EF22,",
          "612:         0x494EC787, 0x38D1C1D9, 0xCAA2FE8C, 0xD40B3698, 0xF581CFA6, 0x7ADE28A5, 0xB78E26DA, 0xADBFA43F,",
          "613:         0x3A9DE42C, 0x78920D50, 0x5FCC9B6A, 0x7E466254, 0x8D13C2F6, 0xD8B8E890, 0x39F75E2E, 0xC3AFF582,",
          "614:         0x5D80BE9F, 0xD0937C69, 0xD52DA96F, 0x2512B3CF, 0xAC993BC8, 0x187DA710, 0x9C636EE8, 0x3BBB7BDB,",
          "615:         0x267809CD, 0x5918F46E, 0x9AB701EC, 0x4F9AA883, 0x956E65E6, 0xFFE67EAA, 0xBCCF0821, 0x15E8E6EF,",
          "616:         0xE79BD9BA, 0x6F36CE4A, 0x9F09D4EA, 0xB07CD629, 0xA4B2AF31, 0x3F23312A, 0xA59430C6, 0xA266C035,",
          "617:         0x4EBC3774, 0x82CAA6FC, 0x90D0B0E0, 0xA7D81533, 0x04984AF1, 0xECDAF741, 0xCD500E7F, 0x91F62F17,",
          "618:         0x4DD68D76, 0xEFB04D43, 0xAA4D54CC, 0x9604DFE4, 0xD1B5E39E, 0x6A881B4C, 0x2C1FB8C1, 0x65517F46,",
          "619:         0x5EEA049D, 0x8C355D01, 0x877473FA, 0x0B412EFB, 0x671D5AB3, 0xDBD25292, 0x105633E9, 0xD647136D,",
          "620:         0xD7618C9A, 0xA10C7A37, 0xF8148E59, 0x133C89EB, 0xA927EECE, 0x61C935B7, 0x1CE5EDE1, 0x47B13C7A,",
          "621:         0xD2DF599C, 0xF2733F55, 0x14CE7918, 0xC737BF73, 0xF7CDEA53, 0xFDAA5B5F, 0x3D6F14DF, 0x44DB8678,",
          "622:         0xAFF381CA, 0x68C43EB9, 0x24342C38, 0xA3405FC2, 0x1DC37216, 0xE2250CBC, 0x3C498B28, 0x0D9541FF,",
          "623:         0xA8017139, 0x0CB3DE08, 0xB4E49CD8, 0x56C19064, 0xCB84617B, 0x32B670D5, 0x6C5C7448, 0xB85742D0",
          "624:     );",
          "633:     var $sbox = array(",
          "634:         0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,",
          "635:         0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,",
          "636:         0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,",
          "637:         0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,",
          "638:         0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,",
          "639:         0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,",
          "640:         0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,",
          "641:         0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,",
          "642:         0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,",
          "643:         0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,",
          "644:         0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,",
          "645:         0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,",
          "646:         0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,",
          "647:         0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,",
          "648:         0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,",
          "649:         0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16",
          "650:     );",
          "659:     var $isbox = array(",
          "660:         0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,",
          "661:         0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,",
          "662:         0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,",
          "663:         0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,",
          "664:         0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,",
          "665:         0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,",
          "666:         0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,",
          "667:         0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,",
          "668:         0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,",
          "669:         0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,",
          "670:         0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,",
          "671:         0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,",
          "672:         0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,",
          "673:         0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,",
          "674:         0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,",
          "675:         0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D",
          "676:     );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "701:     function Crypt_Rijndael($mode = CRYPT_RIJNDAEL_MODE_CBC)",
          "702:     {",
          "703:         parent::Crypt_Base($mode);",
          "704:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "723:     function setKey($key)",
          "724:     {",
          "727:         if (!$this->explicit_key_length) {",
          "728:             $length = strlen($key);",
          "729:             switch (true) {",
          "730:                 case $length <= 16:",
          "731:                     $this->key_size = 16;",
          "732:                     break;",
          "733:                 case $length <= 24:",
          "734:                     $this->key_size = 24;",
          "735:                     break;",
          "736:                 default:",
          "737:                     $this->key_size = 32;",
          "738:             }",
          "740:         }",
          "741:     }",
          "",
          "[Removed Lines]",
          "725:         parent::setKey($key);",
          "739:             $this->_setupEngine();",
          "",
          "[Added Lines]",
          "240:                 case $length <= 20:",
          "241:                     $this->key_size = 20;",
          "242:                     break;",
          "246:                 case $length <= 28:",
          "247:                     $this->key_size = 28;",
          "248:                     break;",
          "253:         parent::setKey($key);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "782:         $this->explicit_key_length = true;",
          "783:         $this->changed = true;",
          "785:     }",
          "",
          "[Removed Lines]",
          "784:         $this->_setupEngine();",
          "",
          "[Added Lines]",
          "297:         $this->_setEngine();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "798:         $length >>= 5;",
          "799:         if ($length > 8) {",
          "800:             $length = 8;",
          "802:             $length = 4;",
          "803:         }",
          "804:         $this->Nb = $length;",
          "805:         $this->block_size = $length << 2;",
          "806:         $this->changed = true;",
          "808:     }",
          "824:     {",
          "838:                 break;",
          "846:         }",
          "865:     }",
          "873:     function _setupMcrypt()",
          "",
          "[Removed Lines]",
          "801:         } else if ($length < 4) {",
          "807:         $this->_setupEngine();",
          "823:     function _setupEngine()",
          "825:         if (constant('CRYPT_' . $this->const_namespace . '_MODE') == CRYPT_MODE_INTERNAL) {",
          "827:             return;",
          "828:         }",
          "831:         $cipher_name_mcrypt = 'rijndael-' . ($this->block_size << 3);",
          "834:         switch (true) {",
          "835:             case $this->key_size % 8: // mcrypt is not usable for 160/224-bit keys, only for 128/192/256-bit keys",
          "836:             case !in_array($cipher_name_mcrypt, mcrypt_list_algorithms()): // $cipher_name_mcrypt is not available for the current $block_size",
          "837:                 $engine = CRYPT_MODE_INTERNAL;",
          "839:             default:",
          "840:                 $engine = CRYPT_MODE_MCRYPT;",
          "841:         }",
          "843:         if ($this->engine == $engine && $this->cipher_name_mcrypt == $cipher_name_mcrypt) {",
          "845:             return;",
          "849:         $this->engine = $engine;",
          "850:         $this->cipher_name_mcrypt = $cipher_name_mcrypt;",
          "852:         if ($this->enmcrypt) {",
          "855:             mcrypt_module_close($this->enmcrypt);",
          "856:             mcrypt_module_close($this->demcrypt);",
          "857:             $this->enmcrypt = null;",
          "858:             $this->demcrypt = null;",
          "860:             if ($this->ecb) {",
          "861:                 mcrypt_module_close($this->ecb);",
          "862:                 $this->ecb = null;",
          "863:             }",
          "864:         }",
          "",
          "[Added Lines]",
          "314:         } elseif ($length < 4) {",
          "320:         $this->_setEngine();",
          "333:     function isValidEngine($engine)",
          "335:         switch ($engine) {",
          "336:             case self::ENGINE_OPENSSL:",
          "337:                 if ($this->block_size != 16) {",
          "338:                     return false;",
          "339:                 }",
          "340:                 $this->cipher_name_openssl_ecb = 'aes-' . ($this->key_size << 3) . '-ecb';",
          "341:                 $this->cipher_name_openssl = 'aes-' . ($this->key_size << 3) . '-' . $this->_openssl_translate_mode();",
          "343:             case self::ENGINE_MCRYPT:",
          "344:                 $this->cipher_name_mcrypt = 'rijndael-' . ($this->block_size << 3);",
          "345:                 if ($this->key_size % 8) { // is it a 160/224-bit key?",
          "347:                     return false;",
          "348:                 }",
          "351:         return parent::isValidEngine($engine);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "886:     function _encryptBlock($in)",
          "887:     {",
          "897:         }",
          "899:         $state = array();",
          "900:         $words = unpack('N*', $in);",
          "",
          "[Removed Lines]",
          "888:         static $t0, $t1, $t2, $t3, $sbox;",
          "889:         if (!$t0) {",
          "890:             for ($i = 0; $i < 256; ++$i) {",
          "891:                 $t0[] = (int)$this->t0[$i];",
          "892:                 $t1[] = (int)$this->t1[$i];",
          "893:                 $t2[] = (int)$this->t2[$i];",
          "894:                 $t3[] = (int)$this->t3[$i];",
          "895:                 $sbox[] = (int)$this->sbox[$i];",
          "896:             }",
          "",
          "[Added Lines]",
          "375:         static $tables;",
          "376:         if (empty($tables)) {",
          "377:             $tables = &$this->_getTables();",
          "379:         $t0   = $tables[0];",
          "380:         $t1   = $tables[1];",
          "381:         $t2   = $tables[2];",
          "382:         $t3   = $tables[3];",
          "383:         $sbox = $tables[4];",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "905:         $Nr = $this->Nr;",
          "909:         foreach ($words as $word) {",
          "911:         }",
          "",
          "[Removed Lines]",
          "908:         $i = -1;",
          "910:             $state[] = $word ^ $w[0][++$i];",
          "",
          "[Added Lines]",
          "394:         $wc = $Nb - 1;",
          "396:             $state[] = $word ^ $w[++$wc];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "930:                             $t1[$state[$j] >> 16 & 0x000000FF] ^",
          "931:                             $t2[$state[$k] >>  8 & 0x000000FF] ^",
          "932:                             $t3[$state[$l]       & 0x000000FF] ^",
          "934:                 ++$i;",
          "935:                 $j = ($j + 1) % $Nb;",
          "936:                 $k = ($k + 1) % $Nb;",
          "",
          "[Removed Lines]",
          "933:                             $w[$round][$i];",
          "",
          "[Added Lines]",
          "419:                             $w[++$wc];",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "957:                         ($state[$j] & 0x00FF0000) ^",
          "958:                         ($state[$k] & 0x0000FF00) ^",
          "959:                         ($state[$l] & 0x000000FF) ^",
          "961:             ++$i;",
          "962:             $j = ($j + 1) % $Nb;",
          "963:             $k = ($k + 1) % $Nb;",
          "",
          "[Removed Lines]",
          "960:                          $w[$Nr][$i];",
          "",
          "[Added Lines]",
          "446:                          $w[$i];",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "988:     function _decryptBlock($in)",
          "989:     {",
          "999:         }",
          "1001:         $state = array();",
          "1002:         $words = unpack('N*', $in);",
          "",
          "[Removed Lines]",
          "990:         static $dt0, $dt1, $dt2, $dt3, $isbox;",
          "991:         if (!$dt0) {",
          "992:             for ($i = 0; $i < 256; ++$i) {",
          "993:                 $dt0[] = (int)$this->dt0[$i];",
          "994:                 $dt1[] = (int)$this->dt1[$i];",
          "995:                 $dt2[] = (int)$this->dt2[$i];",
          "996:                 $dt3[] = (int)$this->dt3[$i];",
          "997:                 $isbox[] = (int)$this->isbox[$i];",
          "998:             }",
          "",
          "[Added Lines]",
          "476:         static $invtables;",
          "477:         if (empty($invtables)) {",
          "478:             $invtables = &$this->_getInvTables();",
          "480:         $dt0   = $invtables[0];",
          "481:         $dt1   = $invtables[1];",
          "482:         $dt2   = $invtables[2];",
          "483:         $dt3   = $invtables[3];",
          "484:         $isbox = $invtables[4];",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1007:         $Nr = $this->Nr;",
          "1011:         foreach ($words as $word) {",
          "1013:         }",
          "1015:         $temp = array();",
          "",
          "[Removed Lines]",
          "1010:         $i = -1;",
          "1012:             $state[] = $word ^ $dw[$Nr][++$i];",
          "",
          "[Added Lines]",
          "495:         $wc = $Nb - 1;",
          "497:             $state[] = $word ^ $dw[++$wc];",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1024:                             $dt1[$state[$j] >> 16 & 0x000000FF] ^",
          "1025:                             $dt2[$state[$k] >>  8 & 0x000000FF] ^",
          "1026:                             $dt3[$state[$l]       & 0x000000FF] ^",
          "1028:                 ++$i;",
          "1029:                 $j = ($j + 1) % $Nb;",
          "1030:                 $k = ($k + 1) % $Nb;",
          "",
          "[Removed Lines]",
          "1027:                             $dw[$round][$i];",
          "",
          "[Added Lines]",
          "512:                             $dw[++$wc];",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1045:                     ($state[$k] & 0x0000FF00) |",
          "1046:                     ($state[$l] & 0x000000FF);",
          "1052:             ++$i;",
          "1053:             $j = ($j + 1) % $Nb;",
          "1054:             $k = ($k + 1) % $Nb;",
          "",
          "[Removed Lines]",
          "1048:             $temp[$i] = $dw[0][$i] ^ ($isbox[$word       & 0x000000FF]        |",
          "1049:                                      ($isbox[$word >>  8 & 0x000000FF] <<  8) |",
          "1050:                                      ($isbox[$word >> 16 & 0x000000FF] << 16) |",
          "1051:                                      ($isbox[$word >> 24 & 0x000000FF] << 24));",
          "",
          "[Added Lines]",
          "533:             $temp[$i] = $dw[$i] ^ ($isbox[$word       & 0x000000FF]        |",
          "534:                                   ($isbox[$word >>  8 & 0x000000FF] <<  8) |",
          "535:                                   ($isbox[$word >> 16 & 0x000000FF] << 16) |",
          "536:                                   ($isbox[$word >> 24 & 0x000000FF] << 24));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1130:                 $temp = (($temp << 8) & 0xFFFFFF00) | (($temp >> 24) & 0x000000FF); // rotWord",
          "1131:                 $temp = $this->_subWord($temp) ^ $rcon[$i / $this->Nk];",
          "1133:                 $temp = $this->_subWord($temp);",
          "1134:             }",
          "1135:             $w[$i] = $w[$i - $this->Nk] ^ $temp;",
          "",
          "[Removed Lines]",
          "1132:             } else if ($this->Nk > 6 && $i % $this->Nk == 4) {",
          "",
          "[Added Lines]",
          "617:             } elseif ($this->Nk > 6 && $i % $this->Nk == 4) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1145:         $temp = $this->w = $this->dw = array();",
          "1146:         for ($i = $row = $col = 0; $i < $length; $i++, $col++) {",
          "1147:             if ($col == $this->Nb) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "630:         list($dt0, $dt1, $dt2, $dt3) = $this->_getInvTables();",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1152:                     $j = 0;",
          "1153:                     while ($j < $this->Nb) {",
          "1154:                         $dw = $this->_subWord($this->w[$row][$j]);",
          "1159:                         $j++;",
          "1160:                     }",
          "1161:                     $this->dw[$row] = $temp;",
          "",
          "[Removed Lines]",
          "1155:                         $temp[$j] = $this->dt0[$dw >> 24 & 0x000000FF] ^",
          "1156:                                     $this->dt1[$dw >> 16 & 0x000000FF] ^",
          "1157:                                     $this->dt2[$dw >>  8 & 0x000000FF] ^",
          "1158:                                     $this->dt3[$dw       & 0x000000FF];",
          "",
          "[Added Lines]",
          "641:                         $temp[$j] = $dt0[$dw >> 24 & 0x000000FF] ^",
          "642:                                     $dt1[$dw >> 16 & 0x000000FF] ^",
          "643:                                     $dt2[$dw >>  8 & 0x000000FF] ^",
          "644:                                     $dt3[$dw       & 0x000000FF];",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1170:         $this->dw[$row] = $this->w[$row];",
          "1182:             }",
          "1185:         }",
          "1186:     }",
          "",
          "[Removed Lines]",
          "1173:         if ($this->use_inline_crypt) {",
          "1174:             $this->dw = array_reverse($this->dw);",
          "1175:             $w  = array_pop($this->w);",
          "1176:             $dw = array_pop($this->dw);",
          "1177:             foreach ($this->w as $r => $wr) {",
          "1178:                 foreach ($wr as $c => $wc) {",
          "1179:                     $w[]  = $wc;",
          "1180:                     $dw[] = $this->dw[$r][$c];",
          "1181:                 }",
          "1183:             $this->w  = $w;",
          "1184:             $this->dw = $dw;",
          "",
          "[Added Lines]",
          "659:         $this->dw = array_reverse($this->dw);",
          "660:         $w  = array_pop($this->w);",
          "661:         $dw = array_pop($this->dw);",
          "662:         foreach ($this->w as $r => $wr) {",
          "663:             foreach ($wr as $c => $wc) {",
          "664:                 $w[]  = $wc;",
          "665:                 $dw[] = $this->dw[$r][$c];",
          "668:         $this->w  = $w;",
          "669:         $this->dw = $dw;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1194:     function _subWord($word)",
          "1195:     {",
          "1198:         return  $sbox[$word       & 0x000000FF]        |",
          "1199:                ($sbox[$word >>  8 & 0x000000FF] <<  8) |",
          "",
          "[Removed Lines]",
          "1196:         $sbox = $this->sbox;",
          "",
          "[Added Lines]",
          "680:         static $sbox;",
          "681:         if (empty($sbox)) {",
          "682:             list(,,,, $sbox) = $this->_getTables();",
          "683:         }",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1201:                ($sbox[$word >> 24 & 0x000000FF] << 24);",
          "1202:     }",
          "1210:     function _setupInlineCrypt()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "700:     function &_getTables()",
          "701:     {",
          "702:         static $tables;",
          "703:         if (empty($tables)) {",
          "707:             $t3 = array_map('intval', array(",
          "710:                 0x6363A5C6, 0x7C7C84F8, 0x777799EE, 0x7B7B8DF6, 0xF2F20DFF, 0x6B6BBDD6, 0x6F6FB1DE, 0xC5C55491,",
          "711:                 0x30305060, 0x01010302, 0x6767A9CE, 0x2B2B7D56, 0xFEFE19E7, 0xD7D762B5, 0xABABE64D, 0x76769AEC,",
          "712:                 0xCACA458F, 0x82829D1F, 0xC9C94089, 0x7D7D87FA, 0xFAFA15EF, 0x5959EBB2, 0x4747C98E, 0xF0F00BFB,",
          "713:                 0xADADEC41, 0xD4D467B3, 0xA2A2FD5F, 0xAFAFEA45, 0x9C9CBF23, 0xA4A4F753, 0x727296E4, 0xC0C05B9B,",
          "714:                 0xB7B7C275, 0xFDFD1CE1, 0x9393AE3D, 0x26266A4C, 0x36365A6C, 0x3F3F417E, 0xF7F702F5, 0xCCCC4F83,",
          "715:                 0x34345C68, 0xA5A5F451, 0xE5E534D1, 0xF1F108F9, 0x717193E2, 0xD8D873AB, 0x31315362, 0x15153F2A,",
          "716:                 0x04040C08, 0xC7C75295, 0x23236546, 0xC3C35E9D, 0x18182830, 0x9696A137, 0x05050F0A, 0x9A9AB52F,",
          "717:                 0x0707090E, 0x12123624, 0x80809B1B, 0xE2E23DDF, 0xEBEB26CD, 0x2727694E, 0xB2B2CD7F, 0x75759FEA,",
          "718:                 0x09091B12, 0x83839E1D, 0x2C2C7458, 0x1A1A2E34, 0x1B1B2D36, 0x6E6EB2DC, 0x5A5AEEB4, 0xA0A0FB5B,",
          "719:                 0x5252F6A4, 0x3B3B4D76, 0xD6D661B7, 0xB3B3CE7D, 0x29297B52, 0xE3E33EDD, 0x2F2F715E, 0x84849713,",
          "720:                 0x5353F5A6, 0xD1D168B9, 0x00000000, 0xEDED2CC1, 0x20206040, 0xFCFC1FE3, 0xB1B1C879, 0x5B5BEDB6,",
          "721:                 0x6A6ABED4, 0xCBCB468D, 0xBEBED967, 0x39394B72, 0x4A4ADE94, 0x4C4CD498, 0x5858E8B0, 0xCFCF4A85,",
          "722:                 0xD0D06BBB, 0xEFEF2AC5, 0xAAAAE54F, 0xFBFB16ED, 0x4343C586, 0x4D4DD79A, 0x33335566, 0x85859411,",
          "723:                 0x4545CF8A, 0xF9F910E9, 0x02020604, 0x7F7F81FE, 0x5050F0A0, 0x3C3C4478, 0x9F9FBA25, 0xA8A8E34B,",
          "724:                 0x5151F3A2, 0xA3A3FE5D, 0x4040C080, 0x8F8F8A05, 0x9292AD3F, 0x9D9DBC21, 0x38384870, 0xF5F504F1,",
          "725:                 0xBCBCDF63, 0xB6B6C177, 0xDADA75AF, 0x21216342, 0x10103020, 0xFFFF1AE5, 0xF3F30EFD, 0xD2D26DBF,",
          "726:                 0xCDCD4C81, 0x0C0C1418, 0x13133526, 0xECEC2FC3, 0x5F5FE1BE, 0x9797A235, 0x4444CC88, 0x1717392E,",
          "727:                 0xC4C45793, 0xA7A7F255, 0x7E7E82FC, 0x3D3D477A, 0x6464ACC8, 0x5D5DE7BA, 0x19192B32, 0x737395E6,",
          "728:                 0x6060A0C0, 0x81819819, 0x4F4FD19E, 0xDCDC7FA3, 0x22226644, 0x2A2A7E54, 0x9090AB3B, 0x8888830B,",
          "729:                 0x4646CA8C, 0xEEEE29C7, 0xB8B8D36B, 0x14143C28, 0xDEDE79A7, 0x5E5EE2BC, 0x0B0B1D16, 0xDBDB76AD,",
          "730:                 0xE0E03BDB, 0x32325664, 0x3A3A4E74, 0x0A0A1E14, 0x4949DB92, 0x06060A0C, 0x24246C48, 0x5C5CE4B8,",
          "731:                 0xC2C25D9F, 0xD3D36EBD, 0xACACEF43, 0x6262A6C4, 0x9191A839, 0x9595A431, 0xE4E437D3, 0x79798BF2,",
          "732:                 0xE7E732D5, 0xC8C8438B, 0x3737596E, 0x6D6DB7DA, 0x8D8D8C01, 0xD5D564B1, 0x4E4ED29C, 0xA9A9E049,",
          "733:                 0x6C6CB4D8, 0x5656FAAC, 0xF4F407F3, 0xEAEA25CF, 0x6565AFCA, 0x7A7A8EF4, 0xAEAEE947, 0x08081810,",
          "734:                 0xBABAD56F, 0x787888F0, 0x25256F4A, 0x2E2E725C, 0x1C1C2438, 0xA6A6F157, 0xB4B4C773, 0xC6C65197,",
          "735:                 0xE8E823CB, 0xDDDD7CA1, 0x74749CE8, 0x1F1F213E, 0x4B4BDD96, 0xBDBDDC61, 0x8B8B860D, 0x8A8A850F,",
          "736:                 0x707090E0, 0x3E3E427C, 0xB5B5C471, 0x6666AACC, 0x4848D890, 0x03030506, 0xF6F601F7, 0x0E0E121C,",
          "737:                 0x6161A3C2, 0x35355F6A, 0x5757F9AE, 0xB9B9D069, 0x86869117, 0xC1C15899, 0x1D1D273A, 0x9E9EB927,",
          "738:                 0xE1E138D9, 0xF8F813EB, 0x9898B32B, 0x11113322, 0x6969BBD2, 0xD9D970A9, 0x8E8E8907, 0x9494A733,",
          "739:                 0x9B9BB62D, 0x1E1E223C, 0x87879215, 0xE9E920C9, 0xCECE4987, 0x5555FFAA, 0x28287850, 0xDFDF7AA5,",
          "740:                 0x8C8C8F03, 0xA1A1F859, 0x89898009, 0x0D0D171A, 0xBFBFDA65, 0xE6E631D7, 0x4242C684, 0x6868B8D0,",
          "741:                 0x4141C382, 0x9999B029, 0x2D2D775A, 0x0F0F111E, 0xB0B0CB7B, 0x5454FCA8, 0xBBBBD66D, 0x16163A2C",
          "742:             ));",
          "744:             foreach ($t3 as $t3i) {",
          "745:                 $t0[] = (($t3i << 24) & 0xFF000000) | (($t3i >>  8) & 0x00FFFFFF);",
          "746:                 $t1[] = (($t3i << 16) & 0xFFFF0000) | (($t3i >> 16) & 0x0000FFFF);",
          "747:                 $t2[] = (($t3i <<  8) & 0xFFFFFF00) | (($t3i >> 24) & 0x000000FF);",
          "748:             }",
          "750:             $tables = array(",
          "752:                 $t0,",
          "753:                 $t1,",
          "754:                 $t2,",
          "755:                 $t3,",
          "757:                 array(",
          "758:                     0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,",
          "759:                     0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,",
          "760:                     0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,",
          "761:                     0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,",
          "762:                     0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,",
          "763:                     0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,",
          "764:                     0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,",
          "765:                     0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,",
          "766:                     0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,",
          "767:                     0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,",
          "768:                     0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,",
          "769:                     0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,",
          "770:                     0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,",
          "771:                     0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,",
          "772:                     0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,",
          "773:                     0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16",
          "774:                 )",
          "775:             );",
          "776:         }",
          "777:         return $tables;",
          "778:     }",
          "789:     function &_getInvTables()",
          "790:     {",
          "791:         static $tables;",
          "792:         if (empty($tables)) {",
          "793:             $dt3 = array_map('intval', array(",
          "794:                 0xF4A75051, 0x4165537E, 0x17A4C31A, 0x275E963A, 0xAB6BCB3B, 0x9D45F11F, 0xFA58ABAC, 0xE303934B,",
          "795:                 0x30FA5520, 0x766DF6AD, 0xCC769188, 0x024C25F5, 0xE5D7FC4F, 0x2ACBD7C5, 0x35448026, 0x62A38FB5,",
          "796:                 0xB15A49DE, 0xBA1B6725, 0xEA0E9845, 0xFEC0E15D, 0x2F7502C3, 0x4CF01281, 0x4697A38D, 0xD3F9C66B,",
          "797:                 0x8F5FE703, 0x929C9515, 0x6D7AEBBF, 0x5259DA95, 0xBE832DD4, 0x7421D358, 0xE0692949, 0xC9C8448E,",
          "798:                 0xC2896A75, 0x8E7978F4, 0x583E6B99, 0xB971DD27, 0xE14FB6BE, 0x88AD17F0, 0x20AC66C9, 0xCE3AB47D,",
          "799:                 0xDF4A1863, 0x1A3182E5, 0x51336097, 0x537F4562, 0x6477E0B1, 0x6BAE84BB, 0x81A01CFE, 0x082B94F9,",
          "800:                 0x48685870, 0x45FD198F, 0xDE6C8794, 0x7BF8B752, 0x73D323AB, 0x4B02E272, 0x1F8F57E3, 0x55AB2A66,",
          "801:                 0xEB2807B2, 0xB5C2032F, 0xC57B9A86, 0x3708A5D3, 0x2887F230, 0xBFA5B223, 0x036ABA02, 0x16825CED,",
          "802:                 0xCF1C2B8A, 0x79B492A7, 0x07F2F0F3, 0x69E2A14E, 0xDAF4CD65, 0x05BED506, 0x34621FD1, 0xA6FE8AC4,",
          "803:                 0x2E539D34, 0xF355A0A2, 0x8AE13205, 0xF6EB75A4, 0x83EC390B, 0x60EFAA40, 0x719F065E, 0x6E1051BD,",
          "804:                 0x218AF93E, 0xDD063D96, 0x3E05AEDD, 0xE6BD464D, 0x548DB591, 0xC45D0571, 0x06D46F04, 0x5015FF60,",
          "805:                 0x98FB2419, 0xBDE997D6, 0x4043CC89, 0xD99E7767, 0xE842BDB0, 0x898B8807, 0x195B38E7, 0xC8EEDB79,",
          "806:                 0x7C0A47A1, 0x420FE97C, 0x841EC9F8, 0x00000000, 0x80868309, 0x2BED4832, 0x1170AC1E, 0x5A724E6C,",
          "807:                 0x0EFFFBFD, 0x8538560F, 0xAED51E3D, 0x2D392736, 0x0FD9640A, 0x5CA62168, 0x5B54D19B, 0x362E3A24,",
          "808:                 0x0A67B10C, 0x57E70F93, 0xEE96D2B4, 0x9B919E1B, 0xC0C54F80, 0xDC20A261, 0x774B695A, 0x121A161C,",
          "809:                 0x93BA0AE2, 0xA02AE5C0, 0x22E0433C, 0x1B171D12, 0x090D0B0E, 0x8BC7ADF2, 0xB6A8B92D, 0x1EA9C814,",
          "810:                 0xF1198557, 0x75074CAF, 0x99DDBBEE, 0x7F60FDA3, 0x01269FF7, 0x72F5BC5C, 0x663BC544, 0xFB7E345B,",
          "811:                 0x4329768B, 0x23C6DCCB, 0xEDFC68B6, 0xE4F163B8, 0x31DCCAD7, 0x63851042, 0x97224013, 0xC6112084,",
          "812:                 0x4A247D85, 0xBB3DF8D2, 0xF93211AE, 0x29A16DC7, 0x9E2F4B1D, 0xB230F3DC, 0x8652EC0D, 0xC1E3D077,",
          "813:                 0xB3166C2B, 0x70B999A9, 0x9448FA11, 0xE9642247, 0xFC8CC4A8, 0xF03F1AA0, 0x7D2CD856, 0x3390EF22,",
          "814:                 0x494EC787, 0x38D1C1D9, 0xCAA2FE8C, 0xD40B3698, 0xF581CFA6, 0x7ADE28A5, 0xB78E26DA, 0xADBFA43F,",
          "815:                 0x3A9DE42C, 0x78920D50, 0x5FCC9B6A, 0x7E466254, 0x8D13C2F6, 0xD8B8E890, 0x39F75E2E, 0xC3AFF582,",
          "816:                 0x5D80BE9F, 0xD0937C69, 0xD52DA96F, 0x2512B3CF, 0xAC993BC8, 0x187DA710, 0x9C636EE8, 0x3BBB7BDB,",
          "817:                 0x267809CD, 0x5918F46E, 0x9AB701EC, 0x4F9AA883, 0x956E65E6, 0xFFE67EAA, 0xBCCF0821, 0x15E8E6EF,",
          "818:                 0xE79BD9BA, 0x6F36CE4A, 0x9F09D4EA, 0xB07CD629, 0xA4B2AF31, 0x3F23312A, 0xA59430C6, 0xA266C035,",
          "819:                 0x4EBC3774, 0x82CAA6FC, 0x90D0B0E0, 0xA7D81533, 0x04984AF1, 0xECDAF741, 0xCD500E7F, 0x91F62F17,",
          "820:                 0x4DD68D76, 0xEFB04D43, 0xAA4D54CC, 0x9604DFE4, 0xD1B5E39E, 0x6A881B4C, 0x2C1FB8C1, 0x65517F46,",
          "821:                 0x5EEA049D, 0x8C355D01, 0x877473FA, 0x0B412EFB, 0x671D5AB3, 0xDBD25292, 0x105633E9, 0xD647136D,",
          "822:                 0xD7618C9A, 0xA10C7A37, 0xF8148E59, 0x133C89EB, 0xA927EECE, 0x61C935B7, 0x1CE5EDE1, 0x47B13C7A,",
          "823:                 0xD2DF599C, 0xF2733F55, 0x14CE7918, 0xC737BF73, 0xF7CDEA53, 0xFDAA5B5F, 0x3D6F14DF, 0x44DB8678,",
          "824:                 0xAFF381CA, 0x68C43EB9, 0x24342C38, 0xA3405FC2, 0x1DC37216, 0xE2250CBC, 0x3C498B28, 0x0D9541FF,",
          "825:                 0xA8017139, 0x0CB3DE08, 0xB4E49CD8, 0x56C19064, 0xCB84617B, 0x32B670D5, 0x6C5C7448, 0xB85742D0",
          "826:             ));",
          "828:             foreach ($dt3 as $dt3i) {",
          "829:                 $dt0[] = (($dt3i << 24) & 0xFF000000) | (($dt3i >>  8) & 0x00FFFFFF);",
          "830:                 $dt1[] = (($dt3i << 16) & 0xFFFF0000) | (($dt3i >> 16) & 0x0000FFFF);",
          "831:                 $dt2[] = (($dt3i <<  8) & 0xFFFFFF00) | (($dt3i >> 24) & 0x000000FF);",
          "832:             };",
          "834:             $tables = array(",
          "836:                 $dt0,",
          "837:                 $dt1,",
          "838:                 $dt2,",
          "839:                 $dt3,",
          "841:                 array(",
          "842:                     0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,",
          "843:                     0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,",
          "844:                     0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,",
          "845:                     0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,",
          "846:                     0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,",
          "847:                     0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,",
          "848:                     0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,",
          "849:                     0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,",
          "850:                     0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,",
          "851:                     0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,",
          "852:                     0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,",
          "853:                     0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,",
          "854:                     0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,",
          "855:                     0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,",
          "856:                     0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,",
          "857:                     0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D",
          "858:                 )",
          "859:             );",
          "860:         }",
          "861:         return $tables;",
          "862:     }",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1237:         if (!isset($lambda_functions[$code_hash])) {",
          "1238:             $Nr = $this->Nr;",
          "1239:             $Nb = $this->Nb;",
          "1240:             $c  = $this->c;",
          "1243:             $init_encrypt.= '",
          "1253:                 }",
          "1254:             ';",
          "1256:             $s  = 'e';",
          "",
          "[Removed Lines]",
          "1216:         $lambda_functions =& Crypt_Rijndael::_getLambdaFunctions();",
          "1221:         if (count($lambda_functions) < 10) {",
          "1222:             $w  = $this->w;",
          "1223:             $dw = $this->dw;",
          "1224:             $init_encrypt = '';",
          "1225:             $init_decrypt = '';",
          "1226:         } else {",
          "1227:             for ($i = 0, $cw = count($this->w); $i < $cw; ++$i) {",
          "1228:                 $w[]  = '$w['  . $i . ']';",
          "1229:                 $dw[] = '$dw[' . $i . ']';",
          "1230:             }",
          "1231:             $init_encrypt = '$w = $self->w;';",
          "1232:             $init_decrypt = '$dw = $self->dw;';",
          "1233:         }",
          "1235:         $code_hash = md5(str_pad(\"Crypt_Rijndael, {$this->mode}, {$this->block_size}, \", 32, \"\\0\") . implode(',', $w));",
          "1244:                 static $t0, $t1, $t2, $t3, $sbox;",
          "1245:                 if (!$t0) {",
          "1246:                     for ($i = 0; $i < 256; ++$i) {",
          "1247:                         $t0[$i]    = (int)$self->t0[$i];",
          "1248:                         $t1[$i]    = (int)$self->t1[$i];",
          "1249:                         $t2[$i]    = (int)$self->t2[$i];",
          "1250:                         $t3[$i]    = (int)$self->t3[$i];",
          "1251:                         $sbox[$i]  = (int)$self->sbox[$i];",
          "1252:                     }",
          "",
          "[Added Lines]",
          "876:         $lambda_functions =& self::_getLambdaFunctions();",
          "881:         $gen_hi_opt_code = (bool)( count($lambda_functions) < 10 );",
          "884:         $code_hash = \"Crypt_Rijndael, {$this->mode}, {$this->Nr}, {$this->Nb}\";",
          "885:         if ($gen_hi_opt_code) {",
          "886:             $code_hash = str_pad($code_hash, 32) . $this->_hashInlineCryptFunction($this->key);",
          "887:         }",
          "890:             switch (true) {",
          "891:                 case $gen_hi_opt_code:",
          "893:                     $w  = $this->w;",
          "894:                     $dw = $this->dw;",
          "895:                     $init_encrypt = '';",
          "896:                     $init_decrypt = '';",
          "897:                     break;",
          "898:                 default:",
          "899:                     for ($i = 0, $cw = count($this->w); $i < $cw; ++$i) {",
          "900:                         $w[]  = '$w['  . $i . ']';",
          "901:                         $dw[] = '$dw[' . $i . ']';",
          "902:                     }",
          "903:                     $init_encrypt = '$w  = $self->w;';",
          "904:                     $init_decrypt = '$dw = $self->dw;';",
          "905:             }",
          "913:                 static $tables;",
          "914:                 if (empty($tables)) {",
          "915:                     $tables = &$self->_getTables();",
          "917:                 $t0   = $tables[0];",
          "918:                 $t1   = $tables[1];",
          "919:                 $t2   = $tables[2];",
          "920:                 $t3   = $tables[3];",
          "921:                 $sbox = $tables[4];",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1289:             $encrypt_block .= '$in = pack(\"N*\"'.\"\\n\";",
          "1290:             for ($i = 0; $i < $Nb; ++$i) {",
          "1291:                 $encrypt_block.= ',",
          "1296:                     '.$w[$i].\"\\n\";",
          "1297:             }",
          "1298:             $encrypt_block .= ');';",
          "1301:             $init_decrypt.= '",
          "1311:                 }",
          "1312:             ';",
          "1314:             $s  = 'e';",
          "",
          "[Removed Lines]",
          "1292:                     ($'.$e.$i                  .' & 0xFF000000) ^",
          "1293:                     ($'.$e.(($i + $c[1]) % $Nb).' & 0x00FF0000) ^",
          "1294:                     ($'.$e.(($i + $c[2]) % $Nb).' & 0x0000FF00) ^",
          "1295:                     ($'.$e.(($i + $c[3]) % $Nb).' & 0x000000FF) ^",
          "1302:                 static $dt0, $dt1, $dt2, $dt3, $isbox;",
          "1303:                 if (!$dt0) {",
          "1304:                     for ($i = 0; $i < 256; ++$i) {",
          "1305:                         $dt0[$i]   = (int)$self->dt0[$i];",
          "1306:                         $dt1[$i]   = (int)$self->dt1[$i];",
          "1307:                         $dt2[$i]   = (int)$self->dt2[$i];",
          "1308:                         $dt3[$i]   = (int)$self->dt3[$i];",
          "1309:                         $isbox[$i] = (int)$self->isbox[$i];",
          "1310:                     }",
          "",
          "[Added Lines]",
          "960:                     ($'.$e.$i                  .' & '.((int)0xFF000000).') ^",
          "961:                     ($'.$e.(($i + $c[1]) % $Nb).' &         0x00FF0000   ) ^",
          "962:                     ($'.$e.(($i + $c[2]) % $Nb).' &         0x0000FF00   ) ^",
          "963:                     ($'.$e.(($i + $c[3]) % $Nb).' &         0x000000FF   ) ^",
          "970:                 static $invtables;",
          "971:                 if (empty($invtables)) {",
          "972:                     $invtables = &$self->_getInvTables();",
          "974:                 $dt0   = $invtables[0];",
          "975:                 $dt1   = $invtables[1];",
          "976:                 $dt2   = $invtables[2];",
          "977:                 $dt3   = $invtables[3];",
          "978:                 $isbox = $invtables[4];",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1347:             $decrypt_block .= '$in = pack(\"N*\"'.\"\\n\";",
          "1348:             for ($i = 0; $i < $Nb; ++$i) {",
          "1349:                 $decrypt_block.= ',",
          "1354:                     '.$dw[$i].\"\\n\";",
          "1355:             }",
          "1356:             $decrypt_block .= ');';",
          "",
          "[Removed Lines]",
          "1350:                     ($'.$e.$i.                        ' & 0xFF000000) ^",
          "1351:                     ($'.$e.(($Nb + $i - $c[1]) % $Nb).' & 0x00FF0000) ^",
          "1352:                     ($'.$e.(($Nb + $i - $c[2]) % $Nb).' & 0x0000FF00) ^",
          "1353:                     ($'.$e.(($Nb + $i - $c[3]) % $Nb).' & 0x000000FF) ^",
          "",
          "[Added Lines]",
          "1017:                     ($'.$e.$i.                        ' & '.((int)0xFF000000).') ^",
          "1018:                     ($'.$e.(($Nb + $i - $c[1]) % $Nb).' &         0x00FF0000   ) ^",
          "1019:                     ($'.$e.(($Nb + $i - $c[2]) % $Nb).' &         0x0000FF00   ) ^",
          "1020:                     ($'.$e.(($Nb + $i - $c[3]) % $Nb).' &         0x000000FF   ) ^",
          "",
          "---------------"
        ],
        "libraries/plugins/auth/AuthenticationCookie.class.php||libraries/plugins/auth/AuthenticationCookie.class.php": [
          "File: libraries/plugins/auth/AuthenticationCookie.class.php -> libraries/plugins/auth/AuthenticationCookie.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:     exit;",
          "11: }",
          "14: require_once 'libraries/plugins/AuthenticationPlugin.class.php';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: use phpseclib\\Crypt;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     || ! function_exists('openssl_random_pseudo_bytes')",
          "37:     || PHP_VERSION_ID < 50304",
          "38: ) {",
          "39:     require PHPSECLIB_INC_DIR . '/Crypt/AES.php';",
          "40:     require PHPSECLIB_INC_DIR . '/Crypt/Random.php';",
          "41: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     require PHPSECLIB_INC_DIR . '/Crypt/Base.php';",
          "42:     require PHPSECLIB_INC_DIR . '/Crypt/Rijndael.php';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "725:             if ($this->_useOpenSSL()) {",
          "726:                 $_SESSION['encryption_key'] = openssl_random_pseudo_bytes(256);",
          "727:             } else {",
          "729:             }",
          "730:         }",
          "731:         return $_SESSION['encryption_key'];",
          "",
          "[Removed Lines]",
          "728:                 $_SESSION['encryption_key'] = crypt_random_string(256);",
          "",
          "[Added Lines]",
          "732:                 $_SESSION['encryption_key'] = Crypt\\Random::string(256);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "766:                 $this->_cookie_iv",
          "767:             );",
          "768:         } else {",
          "770:             $cipher->setIV($this->_cookie_iv);",
          "771:             $cipher->setKey($secret);",
          "772:             return base64_encode($cipher->encrypt($data));",
          "",
          "[Removed Lines]",
          "769:             $cipher = new Crypt_AES(CRYPT_AES_MODE_CBC);",
          "",
          "[Added Lines]",
          "773:             $cipher = new Crypt\\AES(Crypt\\Base::MODE_CBC);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "800:                 $this->_cookie_iv",
          "801:             );",
          "802:         } else {",
          "804:             $cipher->setIV($this->_cookie_iv);",
          "805:             $cipher->setKey($secret);",
          "806:             return $cipher->decrypt(base64_decode($encdata));",
          "",
          "[Removed Lines]",
          "803:             $cipher = new Crypt_AES(CRYPT_AES_MODE_CBC);",
          "",
          "[Added Lines]",
          "807:             $cipher = new Crypt\\AES(Crypt\\Base::MODE_CBC);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "817:         if ($this->_useOpenSSL()) {",
          "818:             return openssl_cipher_iv_length('AES-128-CBC');",
          "819:         }",
          "821:         return $cipher->block_size;",
          "822:     }",
          "",
          "[Removed Lines]",
          "820:         $cipher = new Crypt_AES(CRYPT_AES_MODE_CBC);",
          "",
          "[Added Lines]",
          "824:         $cipher = new Crypt\\AES(Crypt\\Base::MODE_CBC);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "836:                 $this->getIVSize()",
          "837:             );",
          "838:         } else {",
          "840:                 $this->getIVSize()",
          "841:             );",
          "842:         }",
          "",
          "[Removed Lines]",
          "839:             $this->_cookie_iv = crypt_random_string(",
          "",
          "[Added Lines]",
          "843:             $this->_cookie_iv = Crypt\\Random::string(",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13384f7f47dadb02cfe950af0413c7d3e136df8e",
      "candidate_info": {
        "commit_hash": "13384f7f47dadb02cfe950af0413c7d3e136df8e",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/13384f7f47dadb02cfe950af0413c7d3e136df8e",
        "files": [
          "libraries/phpseclib/Crypt/AES.php",
          "libraries/phpseclib/Crypt/Base.php",
          "libraries/phpseclib/Crypt/Random.php",
          "libraries/phpseclib/Crypt/Rijndael.php"
        ],
        "message": "Update phpseclib to 2.0.1\n\nNew version uses PHP 7.0 random_bytes to generate cryptographically secure\npseudo-random bytes.\n\nSigned-off-by: Michal \u010ciha\u0159 <michal@cihar.com>",
        "before_after_code_files": [
          "libraries/phpseclib/Crypt/AES.php||libraries/phpseclib/Crypt/AES.php",
          "libraries/phpseclib/Crypt/Base.php||libraries/phpseclib/Crypt/Base.php",
          "libraries/phpseclib/Crypt/Random.php||libraries/phpseclib/Crypt/Random.php",
          "libraries/phpseclib/Crypt/Rijndael.php||libraries/phpseclib/Crypt/Rijndael.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libraries/phpseclib/Crypt/AES.php||libraries/phpseclib/Crypt/AES.php",
            "libraries/phpseclib/Crypt/Base.php||libraries/phpseclib/Crypt/Base.php",
            "libraries/phpseclib/Crypt/Random.php||libraries/phpseclib/Crypt/Random.php",
            "libraries/phpseclib/Crypt/Rijndael.php||libraries/phpseclib/Crypt/Rijndael.php"
          ],
          "candidate": [
            "libraries/phpseclib/Crypt/AES.php||libraries/phpseclib/Crypt/AES.php",
            "libraries/phpseclib/Crypt/Base.php||libraries/phpseclib/Crypt/Base.php",
            "libraries/phpseclib/Crypt/Random.php||libraries/phpseclib/Crypt/Random.php",
            "libraries/phpseclib/Crypt/Rijndael.php||libraries/phpseclib/Crypt/Rijndael.php"
          ]
        }
      },
      "candidate_diff": {
        "libraries/phpseclib/Crypt/AES.php||libraries/phpseclib/Crypt/AES.php": [
          "File: libraries/phpseclib/Crypt/AES.php -> libraries/phpseclib/Crypt/AES.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:             $length = strlen($key);",
          "115:             switch (true) {",
          "116:                 case $length <= 16:",
          "118:                     break;",
          "119:                 case $length <= 24:",
          "121:                     break;",
          "122:                 default:",
          "124:             }",
          "125:             $this->_setEngine();",
          "126:         }",
          "",
          "[Removed Lines]",
          "117:                     $this->key_size = 16;",
          "120:                     $this->key_size = 24;",
          "123:                     $this->key_size = 32;",
          "",
          "[Added Lines]",
          "117:                     $this->key_length = 16;",
          "120:                     $this->key_length = 24;",
          "123:                     $this->key_length = 32;",
          "",
          "---------------"
        ],
        "libraries/phpseclib/Crypt/Base.php||libraries/phpseclib/Crypt/Base.php": [
          "File: libraries/phpseclib/Crypt/Base.php -> libraries/phpseclib/Crypt/Base.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "379:     var $cipher_name_openssl_ecb;",
          "397:     var $password_default_salt = 'phpseclib/salt';",
          "",
          "[Removed Lines]",
          "388:     var $password_key_size = 32;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "441:     var $openssl_options;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "441:     var $explicit_key_length = false;",
          "450:     var $skip_key_adjustment = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "512:         $this->changed = true;",
          "513:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "530:     function setKeyLength($length)",
          "531:     {",
          "532:         $this->explicit_key_length = true;",
          "533:         $this->changed = true;",
          "534:         $this->_setEngine();",
          "535:     }",
          "543:     function getKeyLength()",
          "544:     {",
          "545:         return $this->key_length << 3;",
          "546:     }",
          "554:     function getBlockLength()",
          "555:     {",
          "556:         return $this->block_size << 3;",
          "557:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "529:     function setKey($key)",
          "530:     {",
          "531:         $this->key = $key;",
          "532:         $this->changed = true;",
          "533:         $this->_setEngine();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "575:         if (!$this->explicit_key_length) {",
          "576:             $this->setKeyLength(strlen($key) << 3);",
          "577:             $this->explicit_key_length = false;",
          "578:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "571:                 if (isset($func_args[5])) {",
          "572:                     $dkLen = $func_args[5];",
          "573:                 } else {",
          "575:                 }",
          "577:                 switch (true) {",
          "",
          "[Removed Lines]",
          "574:                     $dkLen = $method == 'pbkdf1' ? 2 * $this->password_key_size : $this->password_key_size;",
          "",
          "[Added Lines]",
          "623:                     $dkLen = $method == 'pbkdf1' ? 2 * $this->key_length : $this->key_length;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "914:                 if ($this->continuousBuffer) {",
          "915:                     $this->encryptIV = $xor;",
          "916:                     if ($start = strlen($plaintext) % $block_size) {",
          "918:                     }",
          "919:                 }",
          "920:                 break;",
          "",
          "[Removed Lines]",
          "917:                          $buffer['xor'] = substr($key, $start) . $buffer['xor'];",
          "",
          "[Added Lines]",
          "966:                         $buffer['xor'] = substr($key, $start) . $buffer['xor'];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1204:                 if ($this->continuousBuffer) {",
          "1205:                     $this->decryptIV = $xor;",
          "1206:                     if ($start = strlen($ciphertext) % $block_size) {",
          "1208:                     }",
          "1209:                 }",
          "1210:                 break;",
          "",
          "[Removed Lines]",
          "1207:                          $buffer['xor'] = substr($key, $start) . $buffer['xor'];",
          "",
          "[Added Lines]",
          "1256:                         $buffer['xor'] = substr($key, $start) . $buffer['xor'];",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1834:         $this->encryptIV = $this->decryptIV = str_pad(substr($this->iv, 0, $this->block_size), $this->block_size, \"\\0\");",
          "1835:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1884:         if (!$this->skip_key_adjustment) {",
          "1885:             $this->key = str_pad(substr($this->key, 0, $this->key_length), $this->key_length, \"\\0\");",
          "1886:         }",
          "",
          "---------------"
        ],
        "libraries/phpseclib/Crypt/Random.php||libraries/phpseclib/Crypt/Random.php": [
          "File: libraries/phpseclib/Crypt/Random.php -> libraries/phpseclib/Crypt/Random.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     {",
          "56:         if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {",
          "60:                 return mcrypt_create_iv($length);",
          "61:             }",
          "",
          "[Removed Lines]",
          "54:     public static function string($length)",
          "59:             if (function_exists('mcrypt_create_iv') && function_exists('class_alias')) {",
          "",
          "[Added Lines]",
          "54:     static function string($length)",
          "56:         if (version_compare(PHP_VERSION, '7.0.0', '>=')) {",
          "57:             try {",
          "58:                 return \\random_bytes($length);",
          "59:             } catch (\\Throwable $e) {",
          "66:             }",
          "67:         }",
          "72:             if (extension_loaded('mcrypt') && function_exists('class_alias')) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:                 return openssl_random_pseudo_bytes($length);",
          "77:             }",
          "78:         } else {",
          "81:                 return openssl_random_pseudo_bytes($length);",
          "82:             }",
          "",
          "[Removed Lines]",
          "75:             if (function_exists('openssl_random_pseudo_bytes') && version_compare(PHP_VERSION, '5.3.4', '>=')) {",
          "80:             if (function_exists('openssl_random_pseudo_bytes')) {",
          "",
          "[Added Lines]",
          "88:             if (extension_loaded('openssl') && version_compare(PHP_VERSION, '5.3.4', '>=')) {",
          "93:             if (extension_loaded('openssl')) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:                 return mcrypt_create_iv($length, MCRYPT_DEV_URANDOM);",
          "100:             }",
          "101:         }",
          "",
          "[Removed Lines]",
          "98:             if (function_exists('mcrypt_create_iv')) {",
          "",
          "[Added Lines]",
          "111:             if (extension_loaded('mcrypt')) {",
          "",
          "---------------"
        ],
        "libraries/phpseclib/Crypt/Rijndael.php||libraries/phpseclib/Crypt/Rijndael.php": [
          "File: libraries/phpseclib/Crypt/Rijndael.php -> libraries/phpseclib/Crypt/Rijndael.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: class Rijndael extends Base",
          "67: {",
          "92:     var $cipher_name_mcrypt = 'rijndael-128';",
          "",
          "[Removed Lines]",
          "76:     var $password_key_size = 16;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     var $password_default_salt = 'phpseclib';",
          "120:     var $w;",
          "",
          "[Removed Lines]",
          "111:     var $explicit_key_length = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "142:     var $Nb = 4;",
          "",
          "[Removed Lines]",
          "155:     var $key_size = 16;",
          "",
          "[Added Lines]",
          "136:     var $key_length = 16;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "190:     var $kl;",
          "",
          "[Removed Lines]",
          "232:     function setKey($key)",
          "233:     {",
          "234:         if (!$this->explicit_key_length) {",
          "235:             $length = strlen($key);",
          "236:             switch (true) {",
          "237:                 case $length <= 16:",
          "238:                     $this->key_size = 16;",
          "239:                     break;",
          "240:                 case $length <= 20:",
          "241:                     $this->key_size = 20;",
          "242:                     break;",
          "243:                 case $length <= 24:",
          "244:                     $this->key_size = 24;",
          "245:                     break;",
          "246:                 case $length <= 28:",
          "247:                     $this->key_size = 28;",
          "248:                     break;",
          "249:                 default:",
          "250:                     $this->key_size = 32;",
          "251:             }",
          "252:         }",
          "253:         parent::setKey($key);",
          "254:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "276:     function setKeyLength($length)",
          "277:     {",
          "278:         switch (true) {",
          "285:             case $length <= 128:",
          "287:                 break;",
          "288:             case $length <= 192:",
          "290:                 break;",
          "291:             default:",
          "293:         }",
          "298:     }",
          "",
          "[Removed Lines]",
          "279:             case $length == 160:",
          "280:                 $this->key_size = 20;",
          "281:                 break;",
          "282:             case $length == 224:",
          "283:                 $this->key_size = 28;",
          "284:                 break;",
          "286:                 $this->key_size = 16;",
          "289:                 $this->key_size = 24;",
          "292:                 $this->key_size = 32;",
          "295:         $this->explicit_key_length = true;",
          "296:         $this->changed = true;",
          "297:         $this->_setEngine();",
          "",
          "[Added Lines]",
          "197:                 $this->key_length = 16;",
          "198:                 break;",
          "199:             case $length <= 160:",
          "200:                 $this->key_length = 20;",
          "203:                 $this->key_length = 24;",
          "204:                 break;",
          "205:             case $length <= 224:",
          "206:                 $this->key_length = 28;",
          "209:                 $this->key_length = 32;",
          "212:         parent::setKeyLength($length);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "337:                 if ($this->block_size != 16) {",
          "338:                     return false;",
          "339:                 }",
          "342:                 break;",
          "343:             case self::ENGINE_MCRYPT:",
          "344:                 $this->cipher_name_mcrypt = 'rijndael-' . ($this->block_size << 3);",
          "347:                     return false;",
          "348:                 }",
          "",
          "[Removed Lines]",
          "340:                 $this->cipher_name_openssl_ecb = 'aes-' . ($this->key_size << 3) . '-ecb';",
          "341:                 $this->cipher_name_openssl = 'aes-' . ($this->key_size << 3) . '-' . $this->_openssl_translate_mode();",
          "345:                 if ($this->key_size % 8) { // is it a 160/224-bit key?",
          "",
          "[Added Lines]",
          "255:                 $this->cipher_name_openssl_ecb = 'aes-' . ($this->key_length << 3) . '-ecb';",
          "256:                 $this->cipher_name_openssl = 'aes-' . ($this->key_length << 3) . '-' . $this->_openssl_translate_mode();",
          "260:                 if ($this->key_length % 8) { // is it a 160/224-bit key?",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "351:         return parent::isValidEngine($engine);",
          "352:     }",
          "373:     function _encryptBlock($in)",
          "374:     {",
          "",
          "[Removed Lines]",
          "360:     function _setupMcrypt()",
          "361:     {",
          "362:         $this->key = str_pad(substr($this->key, 0, $this->key_size), $this->key_size, \"\\0\");",
          "363:         parent::_setupMcrypt();",
          "364:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "573:             0x7D000000, 0xFA000000, 0xEF000000, 0xC5000000, 0x91000000",
          "574:         );",
          "580:             return;",
          "581:         }",
          "586:         $this->Nr = max($this->Nk, $this->Nb) + 6;",
          "",
          "[Removed Lines]",
          "576:         $this->key = str_pad(substr($this->key, 0, $this->key_size), $this->key_size, \"\\0\");",
          "578:         if (isset($this->kl['key']) && $this->key === $this->kl['key'] && $this->key_size === $this->kl['key_size'] && $this->block_size === $this->kl['block_size']) {",
          "582:         $this->kl = array('key' => $this->key, 'key_size' => $this->key_size, 'block_size' => $this->block_size);",
          "584:         $this->Nk = $this->key_size >> 2;",
          "",
          "[Added Lines]",
          "479:         if (isset($this->kl['key']) && $this->key === $this->kl['key'] && $this->key_length === $this->kl['key_length'] && $this->block_size === $this->kl['block_size']) {",
          "483:         $this->kl = array('key' => $this->key, 'key_length' => $this->key_length, 'block_size' => $this->block_size);",
          "485:         $this->Nk = $this->key_length >> 2;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "678:     function _subWord($word)",
          "679:     {",
          "680:         static $sbox;",
          "681:         if (empty($sbox)) {",
          "683:         }",
          "685:         return  $sbox[$word       & 0x000000FF]        |",
          "",
          "[Removed Lines]",
          "682:             list(,,,, $sbox) = $this->_getTables();",
          "",
          "[Added Lines]",
          "583:             list(, , , , $sbox) = $this->_getTables();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "884:         $code_hash = \"Crypt_Rijndael, {$this->mode}, {$this->Nr}, {$this->Nb}\";",
          "",
          "[Removed Lines]",
          "881:         $gen_hi_opt_code = (bool)( count($lambda_functions) < 10 );",
          "",
          "[Added Lines]",
          "782:         $gen_hi_opt_code = (bool)(count($lambda_functions) < 10);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "555e73f177982ad23d0b07d87d018fa77229ff63",
      "candidate_info": {
        "commit_hash": "555e73f177982ad23d0b07d87d018fa77229ff63",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/555e73f177982ad23d0b07d87d018fa77229ff63",
        "files": [
          "ChangeLog",
          "libraries/phpseclib/Crypt/Random.php",
          "libraries/session.inc.php"
        ],
        "message": "Fix #11891 Error with PMA 4.0.10.13 with PHP 5.2\n\nSigned-off-by: Madhura Jayaratne <madhura.cj@gmail.com>",
        "before_after_code_files": [
          "libraries/phpseclib/Crypt/Random.php||libraries/phpseclib/Crypt/Random.php",
          "libraries/session.inc.php||libraries/session.inc.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "libraries/phpseclib/Crypt/Random.php||libraries/phpseclib/Crypt/Random.php"
          ],
          "candidate": [
            "libraries/phpseclib/Crypt/Random.php||libraries/phpseclib/Crypt/Random.php"
          ]
        }
      },
      "candidate_diff": {
        "libraries/phpseclib/Crypt/Random.php||libraries/phpseclib/Crypt/Random.php": [
          "File: libraries/phpseclib/Crypt/Random.php -> libraries/phpseclib/Crypt/Random.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "25: namespace phpseclib\\Crypt;",
          "27: use phpseclib\\Crypt\\AES;",
          "28: use phpseclib\\Crypt\\Base;",
          "29: use phpseclib\\Crypt\\Blowfish;",
          "30: use phpseclib\\Crypt\\DES;",
          "31: use phpseclib\\Crypt\\RC4;",
          "32: use phpseclib\\Crypt\\TripleDES;",
          "33: use phpseclib\\Crypt\\Twofish;",
          "42: class Random",
          "43: {",
          "",
          "[Added Lines]",
          "49: if (!function_exists('crypt_random_string')) {",
          "55:     define('CRYPT_RANDOM_IS_WINDOWS', strtoupper(substr(PHP_OS, 0, 3)) === 'WIN');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:     {",
          "60:                 return mcrypt_create_iv($length);",
          "61:             }",
          "",
          "[Removed Lines]",
          "54:     public static function string($length)",
          "56:         if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {",
          "59:             if (function_exists('mcrypt_create_iv') && function_exists('class_alias')) {",
          "",
          "[Added Lines]",
          "68:     function crypt_random_string($length)",
          "70:         if (CRYPT_RANDOM_IS_WINDOWS) {",
          "72:             if (extension_loaded('mcrypt') && version_compare(PHP_VERSION, '5.3.0', '>=')) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:                 return openssl_random_pseudo_bytes($length);",
          "77:             }",
          "78:         } else {",
          "81:                 return openssl_random_pseudo_bytes($length);",
          "82:             }",
          "",
          "[Removed Lines]",
          "75:             if (function_exists('openssl_random_pseudo_bytes') && version_compare(PHP_VERSION, '5.3.4', '>=')) {",
          "80:             if (function_exists('openssl_random_pseudo_bytes')) {",
          "",
          "[Added Lines]",
          "88:             if (extension_loaded('openssl') && version_compare(PHP_VERSION, '5.3.4', '>=')) {",
          "93:             if (extension_loaded('openssl') && version_compare(PHP_VERSION, '5.3.0', '>=')) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "99:                 return mcrypt_create_iv($length, MCRYPT_DEV_URANDOM);",
          "100:             }",
          "101:         }",
          "",
          "[Removed Lines]",
          "98:             if (function_exists('mcrypt_create_iv')) {",
          "",
          "[Added Lines]",
          "111:             if (extension_loaded('mcrypt')) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "182:             switch (true) {",
          "185:                     break;",
          "188:                     break;",
          "191:                     break;",
          "194:                     break;",
          "197:                     break;",
          "200:                     break;",
          "201:                 default:",
          "203:                     return false;",
          "204:             }",
          "",
          "[Removed Lines]",
          "183:                 case class_exists('\\phpseclib\\Crypt\\AES'):",
          "184:                     $crypto = new AES(Base::MODE_CTR);",
          "186:                 case class_exists('\\phpseclib\\Crypt\\Twofish'):",
          "187:                     $crypto = new Twofish(Base::MODE_CTR);",
          "189:                 case class_exists('\\phpseclib\\Crypt\\Blowfish'):",
          "190:                     $crypto = new Blowfish(Base::MODE_CTR);",
          "192:                 case class_exists('\\phpseclib\\Crypt\\TripleDES'):",
          "193:                     $crypto = new TripleDES(Base::MODE_CTR);",
          "195:                 case class_exists('\\phpseclib\\Crypt\\DES'):",
          "196:                     $crypto = new DES(Base::MODE_CTR);",
          "198:                 case class_exists('\\phpseclib\\Crypt\\RC4'):",
          "199:                     $crypto = new RC4();",
          "202:                     user_error(__CLASS__ . ' requires at least one symmetric cipher be loaded');",
          "",
          "[Added Lines]",
          "196:                 case phpseclib_resolve_include_path('Crypt/AES.php'):",
          "197:                     if (!class_exists('Crypt_AES')) {",
          "198:                         include_once 'AES.php';",
          "199:                     }",
          "200:                     $crypto = new Crypt_AES(CRYPT_AES_MODE_CTR);",
          "202:                 case phpseclib_resolve_include_path('Crypt/Twofish.php'):",
          "203:                     if (!class_exists('Crypt_Twofish')) {",
          "204:                         include_once 'Twofish.php';",
          "205:                     }",
          "206:                     $crypto = new Crypt_Twofish(CRYPT_TWOFISH_MODE_CTR);",
          "208:                 case phpseclib_resolve_include_path('Crypt/Blowfish.php'):",
          "209:                     if (!class_exists('Crypt_Blowfish')) {",
          "210:                         include_once 'Blowfish.php';",
          "211:                     }",
          "212:                     $crypto = new Crypt_Blowfish(CRYPT_BLOWFISH_MODE_CTR);",
          "214:                 case phpseclib_resolve_include_path('Crypt/TripleDES.php'):",
          "215:                     if (!class_exists('Crypt_TripleDES')) {",
          "216:                         include_once 'TripleDES.php';",
          "217:                     }",
          "218:                     $crypto = new Crypt_TripleDES(CRYPT_DES_MODE_CTR);",
          "220:                 case phpseclib_resolve_include_path('Crypt/DES.php'):",
          "221:                     if (!class_exists('Crypt_DES')) {",
          "222:                         include_once 'DES.php';",
          "223:                     }",
          "224:                     $crypto = new Crypt_DES(CRYPT_DES_MODE_CTR);",
          "226:                 case phpseclib_resolve_include_path('Crypt/RC4.php'):",
          "227:                     if (!class_exists('Crypt_RC4')) {",
          "228:                         include_once 'RC4.php';",
          "229:                     }",
          "230:                     $crypto = new Crypt_RC4();",
          "233:                     user_error('crypt_random_string requires at least one symmetric cipher be loaded');",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "228:         return substr($result, 0, $length);",
          "229:     }",
          "230: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263: if (!function_exists('phpseclib_resolve_include_path')) {",
          "274:     function phpseclib_resolve_include_path($filename)",
          "275:     {",
          "276:         if (function_exists('stream_resolve_include_path')) {",
          "277:             return stream_resolve_include_path($filename);",
          "278:         }",
          "281:         if (file_exists($filename)) {",
          "282:             return realpath($filename);",
          "283:         }",
          "285:         $paths = PATH_SEPARATOR == ':' ?",
          "286:             preg_split('#(?<!phar):#', get_include_path()) :",
          "287:             explode(PATH_SEPARATOR, get_include_path());",
          "288:         foreach ($paths as $prefix) {",
          "290:             $ds = substr($prefix, -1) == DIRECTORY_SEPARATOR ? '' : DIRECTORY_SEPARATOR;",
          "291:             $file = $prefix . $ds . $filename;",
          "292:             if (file_exists($file)) {",
          "293:                 return realpath($file);",
          "294:             }",
          "295:         }",
          "297:         return false;",
          "298:     }",
          "299: }",
          "",
          "---------------"
        ],
        "libraries/session.inc.php||libraries/session.inc.php": [
          "File: libraries/session.inc.php -> libraries/session.inc.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "105: if (! isset($_SESSION[' PMA_token '])) {",
          "107: }",
          "",
          "[Removed Lines]",
          "106:     $_SESSION[' PMA_token '] = bin2hex(phpseclib\\Crypt\\Random::string(16));",
          "",
          "[Added Lines]",
          "106:     $_SESSION[' PMA_token '] = bin2hex(crypt_random_string(16));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117: {",
          "119:     session_regenerate_id(true);",
          "121: }",
          "122: ?>",
          "",
          "[Removed Lines]",
          "120:     $_SESSION[' PMA_token '] = bin2hex(phpseclib\\Crypt\\Random::string(16));",
          "",
          "[Added Lines]",
          "120:     $_SESSION[' PMA_token '] = bin2hex(crypt_random_string(16));",
          "",
          "---------------"
        ]
      }
    }
  ]
}