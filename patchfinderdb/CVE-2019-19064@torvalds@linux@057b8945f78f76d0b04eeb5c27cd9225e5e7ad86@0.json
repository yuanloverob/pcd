{
  "cve_id": "CVE-2019-19064",
  "cve_desc": "A memory leak in the fsl_lpspi_probe() function in drivers/spi/spi-fsl-lpspi.c in the Linux kernel through 5.3.11 allows attackers to cause a denial of service (memory consumption) by triggering pm_runtime_get_sync() failures, aka CID-057b8945f78f. NOTE: third parties dispute the relevance of this because an attacker cannot realistically control these failures at probe time",
  "repo": "torvalds/linux",
  "patch_hash": "057b8945f78f76d0b04eeb5c27cd9225e5e7ad86",
  "patch_info": {
    "commit_hash": "057b8945f78f76d0b04eeb5c27cd9225e5e7ad86",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/057b8945f78f76d0b04eeb5c27cd9225e5e7ad86",
    "files": [
      "drivers/spi/spi-fsl-lpspi.c"
    ],
    "message": "spi: lpspi: fix memory leak in fsl_lpspi_probe\n\nIn fsl_lpspi_probe an SPI controller is allocated either via\nspi_alloc_slave or spi_alloc_master. In all but one error cases this\ncontroller is put by going to error handling code. This commit fixes the\ncase when pm_runtime_get_sync fails and it should go to the error\nhandling path.\n\nFixes: 944c01a889d9 (\"spi: lpspi: enable runtime pm for lpspi\")\nSigned-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>\nLink: https://lore.kernel.org/r/20190930034602.1467-1-navid.emamdoost@gmail.com\nSigned-off-by: Mark Brown <broonie@kernel.org>",
    "before_after_code_files": [
      "drivers/spi/spi-fsl-lpspi.c||drivers/spi/spi-fsl-lpspi.c"
    ]
  },
  "patch_diff": {
    "drivers/spi/spi-fsl-lpspi.c||drivers/spi/spi-fsl-lpspi.c": [
      "File: drivers/spi/spi-fsl-lpspi.c -> drivers/spi/spi-fsl-lpspi.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "938:  ret = pm_runtime_get_sync(fsl_lpspi->dev);",
      "939:  if (ret < 0) {",
      "940:   dev_err(fsl_lpspi->dev, \"failed to enable clock\\n\");",
      "942:  }",
      "944:  temp = readl(fsl_lpspi->base + IMX7ULP_PARAM);",
      "",
      "[Removed Lines]",
      "941:   return ret;",
      "",
      "[Added Lines]",
      "941:   goto out_controller_put;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f5e5afdb0e56e81123e02b6a64dd32adc19a90d4",
      "candidate_info": {
        "commit_hash": "f5e5afdb0e56e81123e02b6a64dd32adc19a90d4",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f5e5afdb0e56e81123e02b6a64dd32adc19a90d4",
        "files": [
          "drivers/spi/spi-fsl-lpspi.c"
        ],
        "message": "spi: lpspi: Add i.MX8 boards support for lpspi\n\nAdd both ipg and per clock for lpspi to support i.MX8QM/QXP boards.\n\nSigned-off-by: Clark Wang <xiaoning.wang@nxp.com>\nSigned-off-by: Mark Brown <broonie@kernel.org>",
        "before_after_code_files": [
          "drivers/spi/spi-fsl-lpspi.c||drivers/spi/spi-fsl-lpspi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/spi/spi-fsl-lpspi.c||drivers/spi/spi-fsl-lpspi.c"
          ],
          "candidate": [
            "drivers/spi/spi-fsl-lpspi.c||drivers/spi/spi-fsl-lpspi.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/spi/spi-fsl-lpspi.c||drivers/spi/spi-fsl-lpspi.c": [
          "File: drivers/spi/spi-fsl-lpspi.c -> drivers/spi/spi-fsl-lpspi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: struct fsl_lpspi_data {",
          "85:  struct device *dev;",
          "86:  void __iomem *base;",
          "88:  bool is_slave;",
          "90:  void *rx_buf;",
          "",
          "[Removed Lines]",
          "87:  struct clk *clk;",
          "",
          "[Added Lines]",
          "87:  struct clk *clk_ipg;",
          "88:  struct clk *clk_per;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151: {",
          "152:  struct fsl_lpspi_data *fsl_lpspi =",
          "153:     spi_controller_get_devdata(controller);",
          "156: }",
          "158: static int lpspi_unprepare_xfer_hardware(struct spi_controller *controller)",
          "",
          "[Removed Lines]",
          "155:  return clk_prepare_enable(fsl_lpspi->clk);",
          "",
          "[Added Lines]",
          "155:  int ret;",
          "157:  ret = clk_prepare_enable(fsl_lpspi->clk_ipg);",
          "158:  if (ret)",
          "159:   return ret;",
          "161:  ret = clk_prepare_enable(fsl_lpspi->clk_per);",
          "162:  if (ret) {",
          "163:   clk_disable_unprepare(fsl_lpspi->clk_ipg);",
          "164:   return ret;",
          "165:  }",
          "167:  return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:  struct fsl_lpspi_data *fsl_lpspi =",
          "161:     spi_controller_get_devdata(controller);",
          "165:  return 0;",
          "166: }",
          "",
          "[Removed Lines]",
          "163:  clk_disable_unprepare(fsl_lpspi->clk);",
          "",
          "[Added Lines]",
          "175:  clk_disable_unprepare(fsl_lpspi->clk_ipg);",
          "176:  clk_disable_unprepare(fsl_lpspi->clk_per);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "241:  unsigned int perclk_rate, scldiv;",
          "242:  u8 prescale;",
          "245:  for (prescale = 0; prescale < 8; prescale++) {",
          "246:   scldiv = perclk_rate /",
          "247:     (clkdivs[prescale] * config.speed_hz) - 2;",
          "",
          "[Removed Lines]",
          "244:  perclk_rate = clk_get_rate(fsl_lpspi->clk);",
          "",
          "[Added Lines]",
          "257:  perclk_rate = clk_get_rate(fsl_lpspi->clk_per);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "526:   goto out_controller_put;",
          "527:  }",
          "532:   goto out_controller_put;",
          "533:  }",
          "536:  if (ret) {",
          "538:   goto out_controller_put;",
          "539:  }",
          "",
          "[Removed Lines]",
          "529:  fsl_lpspi->clk = devm_clk_get(&pdev->dev, \"ipg\");",
          "530:  if (IS_ERR(fsl_lpspi->clk)) {",
          "531:   ret = PTR_ERR(fsl_lpspi->clk);",
          "535:  ret = clk_prepare_enable(fsl_lpspi->clk);",
          "537:   dev_err(&pdev->dev, \"can't enable lpspi clock, ret=%d\\n\", ret);",
          "",
          "[Added Lines]",
          "542:  fsl_lpspi->clk_per = devm_clk_get(&pdev->dev, \"per\");",
          "543:  if (IS_ERR(fsl_lpspi->clk_per)) {",
          "544:   ret = PTR_ERR(fsl_lpspi->clk_per);",
          "545:   goto out_controller_put;",
          "546:  }",
          "548:  fsl_lpspi->clk_ipg = devm_clk_get(&pdev->dev, \"ipg\");",
          "549:  if (IS_ERR(fsl_lpspi->clk_ipg)) {",
          "550:   ret = PTR_ERR(fsl_lpspi->clk_ipg);",
          "551:   goto out_controller_put;",
          "552:  }",
          "554:  ret = clk_prepare_enable(fsl_lpspi->clk_ipg);",
          "555:  if (ret) {",
          "556:   dev_err(&pdev->dev,",
          "557:    \"can't enable lpspi ipg clock, ret=%d\\n\", ret);",
          "561:  ret = clk_prepare_enable(fsl_lpspi->clk_per);",
          "563:   dev_err(&pdev->dev,",
          "564:    \"can't enable lpspi per clock, ret=%d\\n\", ret);",
          "565:   clk_disable_unprepare(fsl_lpspi->clk_ipg);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "542:  fsl_lpspi->txfifosize = 1 << (temp & 0x0f);",
          "543:  fsl_lpspi->rxfifosize = 1 << ((temp >> 8) & 0x0f);",
          "547:  ret = devm_spi_register_controller(&pdev->dev, controller);",
          "548:  if (ret < 0) {",
          "",
          "[Removed Lines]",
          "545:  clk_disable_unprepare(fsl_lpspi->clk);",
          "",
          "[Added Lines]",
          "573:  clk_disable_unprepare(fsl_lpspi->clk_per);",
          "574:  clk_disable_unprepare(fsl_lpspi->clk_ipg);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "564:  struct fsl_lpspi_data *fsl_lpspi =",
          "565:     spi_controller_get_devdata(controller);",
          "569:  return 0;",
          "570: }",
          "",
          "[Removed Lines]",
          "567:  clk_disable_unprepare(fsl_lpspi->clk);",
          "",
          "[Added Lines]",
          "596:  clk_disable_unprepare(fsl_lpspi->clk_per);",
          "597:  clk_disable_unprepare(fsl_lpspi->clk_ipg);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d728808194a12186ce5af0b72c8a47b42476bc3",
      "candidate_info": {
        "commit_hash": "8d728808194a12186ce5af0b72c8a47b42476bc3",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/8d728808194a12186ce5af0b72c8a47b42476bc3",
        "files": [
          "drivers/spi/spi-fsl-lpspi.c"
        ],
        "message": "spi: spi-fsl-lpspi: Fix runtime PM imbalance on error\n\npm_runtime_get_sync() increments the runtime PM usage counter even\nwhen it returns an error code. Thus a pairing decrement is needed on\nthe error handling path to keep the counter balanced.\n\nSigned-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>\nLink: https://lore.kernel.org/r/20200523133859.5625-1-dinghao.liu@zju.edu.cn\nSigned-off-by: Mark Brown <broonie@kernel.org>",
        "before_after_code_files": [
          "drivers/spi/spi-fsl-lpspi.c||drivers/spi/spi-fsl-lpspi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/spi/spi-fsl-lpspi.c||drivers/spi/spi-fsl-lpspi.c"
          ],
          "candidate": [
            "drivers/spi/spi-fsl-lpspi.c||drivers/spi/spi-fsl-lpspi.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/spi/spi-fsl-lpspi.c||drivers/spi/spi-fsl-lpspi.c": [
          "File: drivers/spi/spi-fsl-lpspi.c -> drivers/spi/spi-fsl-lpspi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "940:  ret = pm_runtime_get_sync(fsl_lpspi->dev);",
          "941:  if (ret < 0) {",
          "942:   dev_err(fsl_lpspi->dev, \"failed to enable clock\\n\");",
          "944:  }",
          "946:  temp = readl(fsl_lpspi->base + IMX7ULP_PARAM);",
          "",
          "[Removed Lines]",
          "943:   goto out_controller_put;",
          "",
          "[Added Lines]",
          "943:   goto out_pm_get;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "950:  ret = fsl_lpspi_dma_init(&pdev->dev, fsl_lpspi, controller);",
          "951:  if (ret == -EPROBE_DEFER)",
          "954:  if (ret < 0)",
          "955:   dev_err(&pdev->dev, \"dma setup error %d, use pio\\n\", ret);",
          "957:  return 0;",
          "959: out_controller_put:",
          "960:  spi_controller_put(controller);",
          "",
          "[Removed Lines]",
          "952:   goto out_controller_put;",
          "",
          "[Added Lines]",
          "952:   goto out_pm_get;",
          "959: out_pm_get:",
          "960:  pm_runtime_put_noidle(fsl_lpspi->dev);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "944c01a889d97dc08e1b71f4ed868f4023fd6034",
      "candidate_info": {
        "commit_hash": "944c01a889d97dc08e1b71f4ed868f4023fd6034",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/944c01a889d97dc08e1b71f4ed868f4023fd6034",
        "files": [
          "drivers/spi/spi-fsl-lpspi.c"
        ],
        "message": "spi: lpspi: enable runtime pm for lpspi\n\nEnable the runtime power management for lpspi module.\n\nDo some adaptation work from kernel 4.9 to 4.14.\n\nSigned-off-by: Clark Wang <xiaoning.wang@nxp.com>\nSigned-off-by: Han Xu <han.xu@nxp.com>\nReviewed-by: Frank Li <frank.li@nxp.com>\nSigned-off-by: Mark Brown <broonie@kernel.org>",
        "before_after_code_files": [
          "drivers/spi/spi-fsl-lpspi.c||drivers/spi/spi-fsl-lpspi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/spi/spi-fsl-lpspi.c||drivers/spi/spi-fsl-lpspi.c"
          ],
          "candidate": [
            "drivers/spi/spi-fsl-lpspi.c||drivers/spi/spi-fsl-lpspi.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/spi/spi-fsl-lpspi.c||drivers/spi/spi-fsl-lpspi.c": [
          "File: drivers/spi/spi-fsl-lpspi.c -> drivers/spi/spi-fsl-lpspi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include <linux/module.h>",
          "17: #include <linux/of.h>",
          "18: #include <linux/of_device.h>",
          "19: #include <linux/platform_device.h>",
          "20: #include <linux/slab.h>",
          "21: #include <linux/spi/spi.h>",
          "22: #include <linux/spi/spi_bitbang.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <linux/pinctrl/consumer.h>",
          "21: #include <linux/pm_runtime.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:     spi_controller_get_devdata(controller);",
          "155:  int ret;",
          "164:   return ret;",
          "165:  }",
          "",
          "[Removed Lines]",
          "157:  ret = clk_prepare_enable(fsl_lpspi->clk_ipg);",
          "158:  if (ret)",
          "159:   return ret;",
          "161:  ret = clk_prepare_enable(fsl_lpspi->clk_per);",
          "162:  if (ret) {",
          "163:   clk_disable_unprepare(fsl_lpspi->clk_ipg);",
          "",
          "[Added Lines]",
          "161:  ret = pm_runtime_get_sync(fsl_lpspi->dev);",
          "162:  if (ret < 0) {",
          "163:   dev_err(fsl_lpspi->dev, \"failed to enable clock\\n\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:  struct fsl_lpspi_data *fsl_lpspi =",
          "173:     spi_controller_get_devdata(controller);",
          "178:  return 0;",
          "179: }",
          "",
          "[Removed Lines]",
          "175:  clk_disable_unprepare(fsl_lpspi->clk_ipg);",
          "176:  clk_disable_unprepare(fsl_lpspi->clk_per);",
          "",
          "[Added Lines]",
          "175:  pm_runtime_mark_last_busy(fsl_lpspi->dev);",
          "176:  pm_runtime_put_autosuspend(fsl_lpspi->dev);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "480:  return IRQ_NONE;",
          "481: }",
          "483: static int fsl_lpspi_probe(struct platform_device *pdev)",
          "484: {",
          "485:  struct fsl_lpspi_data *fsl_lpspi;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "483: int fsl_lpspi_runtime_resume(struct device *dev)",
          "484: {",
          "485:  struct fsl_lpspi_data *fsl_lpspi = dev_get_drvdata(dev);",
          "486:  int ret;",
          "488:  ret = clk_prepare_enable(fsl_lpspi->clk_per);",
          "489:  if (ret)",
          "490:   return ret;",
          "492:  ret = clk_prepare_enable(fsl_lpspi->clk_ipg);",
          "493:  if (ret) {",
          "494:   clk_disable_unprepare(fsl_lpspi->clk_per);",
          "495:   return ret;",
          "496:  }",
          "498:  return 0;",
          "499: }",
          "501: int fsl_lpspi_runtime_suspend(struct device *dev)",
          "502: {",
          "503:  struct fsl_lpspi_data *fsl_lpspi = dev_get_drvdata(dev);",
          "505:  clk_disable_unprepare(fsl_lpspi->clk_per);",
          "506:  clk_disable_unprepare(fsl_lpspi->clk_ipg);",
          "508:  return 0;",
          "509: }",
          "511: static int fsl_lpspi_init_rpm(struct fsl_lpspi_data *fsl_lpspi)",
          "512: {",
          "513:  struct device *dev = fsl_lpspi->dev;",
          "515:  pm_runtime_enable(dev);",
          "516:  pm_runtime_set_autosuspend_delay(dev, FSL_LPSPI_RPM_TIMEOUT);",
          "517:  pm_runtime_use_autosuspend(dev);",
          "519:  return 0;",
          "520: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "506:  fsl_lpspi = spi_controller_get_devdata(controller);",
          "507:  fsl_lpspi->dev = &pdev->dev;",
          "508:  fsl_lpspi->is_slave = of_property_read_bool((&pdev->dev)->of_node,",
          "509:           \"spi-slave\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "547:  dev_set_drvdata(&pdev->dev, fsl_lpspi);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "551:   goto out_controller_put;",
          "552:  }",
          "558:   goto out_controller_put;",
          "567:  }",
          "569:  temp = readl(fsl_lpspi->base + IMX7ULP_PARAM);",
          "570:  fsl_lpspi->txfifosize = 1 << (temp & 0x0f);",
          "571:  fsl_lpspi->rxfifosize = 1 << ((temp >> 8) & 0x0f);",
          "576:  ret = devm_spi_register_controller(&pdev->dev, controller);",
          "577:  if (ret < 0) {",
          "578:   dev_err(&pdev->dev, \"spi_register_controller error.\\n\");",
          "",
          "[Removed Lines]",
          "554:  ret = clk_prepare_enable(fsl_lpspi->clk_ipg);",
          "555:  if (ret) {",
          "556:   dev_err(&pdev->dev,",
          "557:    \"can't enable lpspi ipg clock, ret=%d\\n\", ret);",
          "559:  }",
          "561:  ret = clk_prepare_enable(fsl_lpspi->clk_per);",
          "562:  if (ret) {",
          "563:   dev_err(&pdev->dev,",
          "564:    \"can't enable lpspi per clock, ret=%d\\n\", ret);",
          "565:   clk_disable_unprepare(fsl_lpspi->clk_ipg);",
          "566:   goto out_controller_put;",
          "573:  clk_disable_unprepare(fsl_lpspi->clk_per);",
          "574:  clk_disable_unprepare(fsl_lpspi->clk_ipg);",
          "",
          "[Added Lines]",
          "595:  ret = fsl_lpspi_init_rpm(fsl_lpspi);",
          "596:  if (ret)",
          "599:  ret = pm_runtime_get_sync(fsl_lpspi->dev);",
          "600:  if (ret < 0) {",
          "601:   dev_err(fsl_lpspi->dev, \"failed to enable clock\\n\");",
          "602:   return ret;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "593:  struct fsl_lpspi_data *fsl_lpspi =",
          "594:     spi_controller_get_devdata(controller);",
          "599:  return 0;",
          "600: }",
          "602: static struct platform_driver fsl_lpspi_driver = {",
          "603:  .driver = {",
          "604:   .name = DRIVER_NAME,",
          "605:   .of_match_table = fsl_lpspi_dt_ids,",
          "606:  },",
          "607:  .probe = fsl_lpspi_probe,",
          "608:  .remove = fsl_lpspi_remove,",
          "",
          "[Removed Lines]",
          "596:  clk_disable_unprepare(fsl_lpspi->clk_per);",
          "597:  clk_disable_unprepare(fsl_lpspi->clk_ipg);",
          "",
          "[Added Lines]",
          "629:  pm_runtime_disable(fsl_lpspi->dev);",
          "631:  spi_master_put(controller);",
          "633:  return 0;",
          "634: }",
          "636: #ifdef CONFIG_PM_SLEEP",
          "637: static int fsl_lpspi_suspend(struct device *dev)",
          "638: {",
          "639:  int ret;",
          "641:  pinctrl_pm_select_sleep_state(dev);",
          "642:  ret = pm_runtime_force_suspend(dev);",
          "643:  return ret;",
          "644: }",
          "646: static int fsl_lpspi_resume(struct device *dev)",
          "647: {",
          "648:  int ret;",
          "650:  ret = pm_runtime_force_resume(dev);",
          "651:  if (ret) {",
          "652:   dev_err(dev, \"Error in resume: %d\\n\", ret);",
          "653:   return ret;",
          "654:  }",
          "656:  pinctrl_pm_select_default_state(dev);",
          "662: static const struct dev_pm_ops fsl_lpspi_pm_ops = {",
          "663:  SET_RUNTIME_PM_OPS(fsl_lpspi_runtime_suspend,",
          "664:     fsl_lpspi_runtime_resume, NULL)",
          "665:  SET_SYSTEM_SLEEP_PM_OPS(fsl_lpspi_suspend, fsl_lpspi_resume)",
          "666: };",
          "672:   .pm = &fsl_lpspi_pm_ops,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07d71557494c05b0651def1651bf6d7e7f47bbbb",
      "candidate_info": {
        "commit_hash": "07d71557494c05b0651def1651bf6d7e7f47bbbb",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/07d71557494c05b0651def1651bf6d7e7f47bbbb",
        "files": [
          "drivers/spi/spi-fsl-lpspi.c"
        ],
        "message": "spi: lpspi: Replace all \"master\" with \"controller\"\n\nIn order to enable the slave mode and make the code more readable,\nreplace all related structure names and object names which is\nnamed \"master\" with \"controller\".\n\nSigned-off-by: Clark Wang <xiaoning.wang@nxp.com>\nSigned-off-by: Mark Brown <broonie@kernel.org>",
        "before_after_code_files": [
          "drivers/spi/spi-fsl-lpspi.c||drivers/spi/spi-fsl-lpspi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/spi/spi-fsl-lpspi.c||drivers/spi/spi-fsl-lpspi.c"
          ],
          "candidate": [
            "drivers/spi/spi-fsl-lpspi.c||drivers/spi/spi-fsl-lpspi.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/spi/spi-fsl-lpspi.c||drivers/spi/spi-fsl-lpspi.c": [
          "File: drivers/spi/spi-fsl-lpspi.c -> drivers/spi/spi-fsl-lpspi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:  writel(enable, fsl_lpspi->base + IMX7ULP_IER);",
          "138: }",
          "141: {",
          "144:  return clk_prepare_enable(fsl_lpspi->clk);",
          "145: }",
          "148: {",
          "151:  clk_disable_unprepare(fsl_lpspi->clk);",
          "",
          "[Removed Lines]",
          "140: static int lpspi_prepare_xfer_hardware(struct spi_master *master)",
          "142:  struct fsl_lpspi_data *fsl_lpspi = spi_master_get_devdata(master);",
          "147: static int lpspi_unprepare_xfer_hardware(struct spi_master *master)",
          "149:  struct fsl_lpspi_data *fsl_lpspi = spi_master_get_devdata(master);",
          "",
          "[Added Lines]",
          "141: static int lpspi_prepare_xfer_hardware(struct spi_controller *controller)",
          "143:  struct fsl_lpspi_data *fsl_lpspi =",
          "144:     spi_controller_get_devdata(controller);",
          "149: static int lpspi_unprepare_xfer_hardware(struct spi_controller *controller)",
          "151:  struct fsl_lpspi_data *fsl_lpspi =",
          "152:     spi_controller_get_devdata(controller);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "291: static void fsl_lpspi_setup_transfer(struct spi_device *spi,",
          "292:          struct spi_transfer *t)",
          "293: {",
          "296:  fsl_lpspi->config.mode = spi->mode;",
          "297:  fsl_lpspi->config.bpw = t ? t->bits_per_word : spi->bits_per_word;",
          "",
          "[Removed Lines]",
          "294:  struct fsl_lpspi_data *fsl_lpspi = spi_master_get_devdata(spi->master);",
          "",
          "[Added Lines]",
          "297:  struct fsl_lpspi_data *fsl_lpspi =",
          "298:     spi_controller_get_devdata(spi->controller);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "318:  fsl_lpspi_config(fsl_lpspi);",
          "319: }",
          "322:       struct spi_device *spi,",
          "323:       struct spi_transfer *t)",
          "324: {",
          "326:  int ret;",
          "328:  fsl_lpspi->tx_buf = t->tx_buf;",
          "",
          "[Removed Lines]",
          "321: static int fsl_lpspi_transfer_one(struct spi_master *master,",
          "325:  struct fsl_lpspi_data *fsl_lpspi = spi_master_get_devdata(master);",
          "",
          "[Added Lines]",
          "325: static int fsl_lpspi_transfer_one(struct spi_controller *controller,",
          "329:  struct fsl_lpspi_data *fsl_lpspi =",
          "330:     spi_controller_get_devdata(controller);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "347:  return 0;",
          "348: }",
          "351:           struct spi_message *msg)",
          "352: {",
          "354:  struct spi_device *spi = msg->spi;",
          "355:  struct spi_transfer *xfer;",
          "356:  bool is_first_xfer = true;",
          "",
          "[Removed Lines]",
          "350: static int fsl_lpspi_transfer_one_msg(struct spi_master *master,",
          "353:  struct fsl_lpspi_data *fsl_lpspi = spi_master_get_devdata(master);",
          "",
          "[Added Lines]",
          "355: static int fsl_lpspi_transfer_one_msg(struct spi_controller *controller,",
          "358:  struct fsl_lpspi_data *fsl_lpspi =",
          "359:     spi_controller_get_devdata(controller);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "367:   is_first_xfer = false;",
          "370:   if (ret < 0)",
          "371:    goto complete;",
          "",
          "[Removed Lines]",
          "369:   ret = fsl_lpspi_transfer_one(master, spi, xfer);",
          "",
          "[Added Lines]",
          "375:   ret = fsl_lpspi_transfer_one(controller, spi, xfer);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "380:  writel(temp, fsl_lpspi->base + IMX7ULP_TCR);",
          "382:  msg->status = ret;",
          "385:  return ret;",
          "386: }",
          "",
          "[Removed Lines]",
          "383:  spi_finalize_current_message(master);",
          "",
          "[Added Lines]",
          "389:  spi_finalize_current_message(controller);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "410: static int fsl_lpspi_probe(struct platform_device *pdev)",
          "411: {",
          "412:  struct fsl_lpspi_data *fsl_lpspi;",
          "414:  struct resource *res;",
          "415:  int ret, irq;",
          "416:  u32 temp;",
          "420:   return -ENOMEM;",
          "428:  fsl_lpspi->dev = &pdev->dev;",
          "438:  init_completion(&fsl_lpspi->xfer_done);",
          "",
          "[Removed Lines]",
          "413:  struct spi_master *master;",
          "418:  master = spi_alloc_master(&pdev->dev, sizeof(struct fsl_lpspi_data));",
          "419:  if (!master)",
          "422:  platform_set_drvdata(pdev, master);",
          "424:  master->bits_per_word_mask = SPI_BPW_RANGE_MASK(8, 32);",
          "425:  master->bus_num = pdev->id;",
          "427:  fsl_lpspi = spi_master_get_devdata(master);",
          "430:  master->transfer_one_message = fsl_lpspi_transfer_one_msg;",
          "431:  master->prepare_transfer_hardware = lpspi_prepare_xfer_hardware;",
          "432:  master->unprepare_transfer_hardware = lpspi_unprepare_xfer_hardware;",
          "433:  master->mode_bits = SPI_CPOL | SPI_CPHA | SPI_CS_HIGH;",
          "434:  master->flags = SPI_MASTER_MUST_RX | SPI_MASTER_MUST_TX;",
          "435:  master->dev.of_node = pdev->dev.of_node;",
          "436:  master->bus_num = pdev->id;",
          "",
          "[Added Lines]",
          "419:  struct spi_controller *controller;",
          "424:  controller = spi_alloc_master(&pdev->dev,",
          "425:      sizeof(struct fsl_lpspi_data));",
          "426:  if (!controller)",
          "429:  platform_set_drvdata(pdev, controller);",
          "431:  controller->bits_per_word_mask = SPI_BPW_RANGE_MASK(8, 32);",
          "432:  controller->bus_num = pdev->id;",
          "434:  fsl_lpspi = spi_controller_get_devdata(controller);",
          "437:  controller->transfer_one_message = fsl_lpspi_transfer_one_msg;",
          "438:  controller->prepare_transfer_hardware = lpspi_prepare_xfer_hardware;",
          "439:  controller->unprepare_transfer_hardware = lpspi_unprepare_xfer_hardware;",
          "440:  controller->mode_bits = SPI_CPOL | SPI_CPHA | SPI_CS_HIGH;",
          "441:  controller->flags = SPI_MASTER_MUST_RX | SPI_MASTER_MUST_TX;",
          "442:  controller->dev.of_node = pdev->dev.of_node;",
          "443:  controller->bus_num = pdev->id;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "441:  fsl_lpspi->base = devm_ioremap_resource(&pdev->dev, res);",
          "442:  if (IS_ERR(fsl_lpspi->base)) {",
          "443:   ret = PTR_ERR(fsl_lpspi->base);",
          "445:  }",
          "447:  irq = platform_get_irq(pdev, 0);",
          "448:  if (irq < 0) {",
          "449:   ret = irq;",
          "451:  }",
          "453:  ret = devm_request_irq(&pdev->dev, irq, fsl_lpspi_isr, 0,",
          "454:           dev_name(&pdev->dev), fsl_lpspi);",
          "455:  if (ret) {",
          "456:   dev_err(&pdev->dev, \"can't get irq%d: %d\\n\", irq, ret);",
          "458:  }",
          "460:  fsl_lpspi->clk = devm_clk_get(&pdev->dev, \"ipg\");",
          "461:  if (IS_ERR(fsl_lpspi->clk)) {",
          "462:   ret = PTR_ERR(fsl_lpspi->clk);",
          "464:  }",
          "466:  ret = clk_prepare_enable(fsl_lpspi->clk);",
          "467:  if (ret) {",
          "468:   dev_err(&pdev->dev, \"can't enable lpspi clock, ret=%d\\n\", ret);",
          "470:  }",
          "472:  temp = readl(fsl_lpspi->base + IMX7ULP_PARAM);",
          "",
          "[Removed Lines]",
          "444:   goto out_master_put;",
          "450:   goto out_master_put;",
          "457:   goto out_master_put;",
          "463:   goto out_master_put;",
          "469:   goto out_master_put;",
          "",
          "[Added Lines]",
          "451:   goto out_controller_put;",
          "457:   goto out_controller_put;",
          "464:   goto out_controller_put;",
          "470:   goto out_controller_put;",
          "476:   goto out_controller_put;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "476:  clk_disable_unprepare(fsl_lpspi->clk);",
          "479:  if (ret < 0) {",
          "482:  }",
          "484:  return 0;",
          "489:  return ret;",
          "490: }",
          "492: static int fsl_lpspi_remove(struct platform_device *pdev)",
          "493: {",
          "497:  clk_disable_unprepare(fsl_lpspi->clk);",
          "",
          "[Removed Lines]",
          "478:  ret = devm_spi_register_master(&pdev->dev, master);",
          "480:   dev_err(&pdev->dev, \"spi_register_master error.\\n\");",
          "481:   goto out_master_put;",
          "486: out_master_put:",
          "487:  spi_master_put(master);",
          "494:  struct spi_master *master = platform_get_drvdata(pdev);",
          "495:  struct fsl_lpspi_data *fsl_lpspi = spi_master_get_devdata(master);",
          "",
          "[Added Lines]",
          "485:  ret = devm_spi_register_controller(&pdev->dev, controller);",
          "487:   dev_err(&pdev->dev, \"spi_register_controller error.\\n\");",
          "488:   goto out_controller_put;",
          "493: out_controller_put:",
          "494:  spi_controller_put(controller);",
          "501:  struct spi_controller *controller = platform_get_drvdata(pdev);",
          "502:  struct fsl_lpspi_data *fsl_lpspi =",
          "503:     spi_controller_get_devdata(controller);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "509: };",
          "510: module_platform_driver(fsl_lpspi_driver);",
          "513: MODULE_AUTHOR(\"Gao Pan <pandy.gao@nxp.com>\");",
          "514: MODULE_LICENSE(\"GPL\");",
          "",
          "[Removed Lines]",
          "512: MODULE_DESCRIPTION(\"LPSPI Master Controller driver\");",
          "",
          "[Added Lines]",
          "520: MODULE_DESCRIPTION(\"LPSPI Controller driver\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}