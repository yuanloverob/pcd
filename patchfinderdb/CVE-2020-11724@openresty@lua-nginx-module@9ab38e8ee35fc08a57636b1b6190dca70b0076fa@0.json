{
  "cve_id": "CVE-2020-11724",
  "cve_desc": "An issue was discovered in OpenResty before 1.15.8.4. ngx_http_lua_subrequest.c allows HTTP request smuggling, as demonstrated by the ngx.location.capture API.",
  "repo": "openresty/lua-nginx-module",
  "patch_hash": "9ab38e8ee35fc08a57636b1b6190dca70b0076fa",
  "patch_info": {
    "commit_hash": "9ab38e8ee35fc08a57636b1b6190dca70b0076fa",
    "repo": "openresty/lua-nginx-module",
    "commit_url": "https://github.com/openresty/lua-nginx-module/commit/9ab38e8ee35fc08a57636b1b6190dca70b0076fa",
    "files": [
      "src/ngx_http_lua_subrequest.c",
      "t/020-subrequest.t"
    ],
    "message": "bugfix: prevented request smuggling in the ngx.location.capture API.\n\nSigned-off-by: Yichun Zhang (agentzh) <yichun@openresty.com>",
    "before_after_code_files": [
      "src/ngx_http_lua_subrequest.c||src/ngx_http_lua_subrequest.c",
      "t/020-subrequest.t||t/020-subrequest.t"
    ]
  },
  "patch_diff": {
    "src/ngx_http_lua_subrequest.c||src/ngx_http_lua_subrequest.c": [
      "File: src/ngx_http_lua_subrequest.c -> src/ngx_http_lua_subrequest.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "57:     ngx_string(\"Content-Length\");",
      "62: static ngx_int_t ngx_http_lua_adjust_subrequest(ngx_http_request_t *sr,",
      "63:     ngx_uint_t method, int forward_body,",
      "64:     ngx_http_request_body_t *body, unsigned vars_action,",
      "",
      "[Removed Lines]",
      "60: static ngx_int_t ngx_http_lua_set_content_length_header(ngx_http_request_t *r,",
      "61:     off_t len);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "79: static ngx_int_t ngx_http_post_request_to_head(ngx_http_request_t *r);",
      "80: static ngx_int_t ngx_http_lua_copy_in_file_request_body(ngx_http_request_t *r);",
      "81: static ngx_int_t ngx_http_lua_copy_request_headers(ngx_http_request_t *sr,",
      "85: enum {",
      "",
      "[Removed Lines]",
      "82:     ngx_http_request_t *r);",
      "",
      "[Added Lines]",
      "80:     ngx_http_request_t *pr, int pr_not_chunked);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "634:     unsigned vars_action, ngx_array_t *extra_vars)",
      "635: {",
      "636:     ngx_http_request_t          *r;",
      "638:     ngx_http_core_main_conf_t   *cmcf;",
      "639:     size_t                       size;",
      "641:     r = sr->parent;",
      "",
      "[Removed Lines]",
      "637:     ngx_int_t                    rc;",
      "",
      "[Added Lines]",
      "636:     int                          pr_not_chunked = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "645:     if (body) {",
      "646:         sr->request_body = body;",
      "657:     } else if (!always_forward_body",
      "658:                && method != NGX_HTTP_PUT",
      "659:                && method != NGX_HTTP_POST",
      "660:                && r->headers_in.content_length_n > 0)",
      "661:     {",
      "668:         sr->request_body = NULL;",
      "671:     } else {",
      "674:         }",
      "684:             }",
      "685:         }",
      "686:     }",
      "688:     sr->method = method;",
      "690:     switch (method) {",
      "",
      "[Removed Lines]",
      "648:         rc = ngx_http_lua_set_content_length_header(sr,",
      "649:                                                     body->buf",
      "650:                                                     ? ngx_buf_size(body->buf)",
      "651:                                                     : 0);",
      "653:         if (rc != NGX_OK) {",
      "654:             return NGX_ERROR;",
      "655:         }",
      "662:         rc = ngx_http_lua_set_content_length_header(sr, 0);",
      "663:         if (rc != NGX_OK) {",
      "664:             return NGX_ERROR;",
      "665:         }",
      "667: #if 1",
      "669: #endif",
      "672:         if (ngx_http_lua_copy_request_headers(sr, r) != NGX_OK) {",
      "673:             return NGX_ERROR;",
      "676:         if (sr->request_body) {",
      "680:             if (sr->request_body->temp_file) {",
      "681:                 if (ngx_http_lua_copy_in_file_request_body(sr) != NGX_OK) {",
      "682:                     return NGX_ERROR;",
      "683:                 }",
      "",
      "[Added Lines]",
      "654:         if (!r->headers_in.chunked) {",
      "655:             pr_not_chunked = 1;",
      "658:         if (sr->request_body && sr->request_body->temp_file) {",
      "662:             if (ngx_http_lua_copy_in_file_request_body(sr) != NGX_OK) {",
      "663:                 return NGX_ERROR;",
      "668:     if (ngx_http_lua_copy_request_headers(sr, r, pr_not_chunked) != NGX_OK) {",
      "669:         return NGX_ERROR;",
      "670:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1134: }",
      "1231: static void",
      "1232: ngx_http_lua_handle_subreq_responses(ngx_http_request_t *r,",
      "1233:     ngx_http_lua_ctx_t *ctx)",
      "",
      "[Removed Lines]",
      "1137: static ngx_int_t",
      "1138: ngx_http_lua_set_content_length_header(ngx_http_request_t *r, off_t len)",
      "1139: {",
      "1140:     ngx_table_elt_t                 *h, *header;",
      "1141:     u_char                          *p;",
      "1142:     ngx_list_part_t                 *part;",
      "1143:     ngx_http_request_t              *pr;",
      "1144:     ngx_uint_t                       i;",
      "1146:     r->headers_in.content_length_n = len;",
      "1148:     if (ngx_list_init(&r->headers_in.headers, r->pool, 20,",
      "1149:                       sizeof(ngx_table_elt_t)) != NGX_OK)",
      "1150:     {",
      "1151:         return NGX_ERROR;",
      "1152:     }",
      "1154:     h = ngx_list_push(&r->headers_in.headers);",
      "1155:     if (h == NULL) {",
      "1156:         return NGX_ERROR;",
      "1157:     }",
      "1159:     h->key = ngx_http_lua_content_length_header_key;",
      "1160:     h->lowcase_key = ngx_pnalloc(r->pool, h->key.len);",
      "1161:     if (h->lowcase_key == NULL) {",
      "1162:         return NGX_ERROR;",
      "1163:     }",
      "1165:     ngx_strlow(h->lowcase_key, h->key.data, h->key.len);",
      "1167:     r->headers_in.content_length = h;",
      "1169:     p = ngx_palloc(r->pool, NGX_OFF_T_LEN);",
      "1170:     if (p == NULL) {",
      "1171:         return NGX_ERROR;",
      "1172:     }",
      "1174:     h->value.data = p;",
      "1176:     h->value.len = ngx_sprintf(h->value.data, \"%O\", len) - h->value.data;",
      "1178:     h->hash = ngx_http_lua_content_length_hash;",
      "1180: #if 0",
      "1181:     dd(\"content length hash: %lu == %lu\", (unsigned long) h->hash,",
      "1182:        ngx_hash_key_lc((u_char *) \"Content-Length\",",
      "1183:                        sizeof(\"Content-Length\") - 1));",
      "1184: #endif",
      "1186:     dd(\"r content length: %.*s\",",
      "1187:        (int) r->headers_in.content_length->value.len,",
      "1188:        r->headers_in.content_length->value.data);",
      "1190:     pr = r->parent;",
      "1192:     if (pr == NULL) {",
      "1193:         return NGX_OK;",
      "1194:     }",
      "1198:     part = &pr->headers_in.headers.part;",
      "1199:     header = part->elts;",
      "1201:     for (i = 0; /* void */; i++) {",
      "1203:         if (i >= part->nelts) {",
      "1204:             if (part->next == NULL) {",
      "1205:                 break;",
      "1206:             }",
      "1208:             part = part->next;",
      "1209:             header = part->elts;",
      "1210:             i = 0;",
      "1211:         }",
      "1213:         if (header[i].key.len == sizeof(\"Content-Length\") - 1",
      "1214:             && ngx_strncasecmp(header[i].key.data, (u_char *) \"Content-Length\",",
      "1215:                                sizeof(\"Content-Length\") - 1) == 0)",
      "1216:         {",
      "1217:             continue;",
      "1218:         }",
      "1220:         if (ngx_http_lua_set_input_header(r, header[i].key,",
      "1221:                                           header[i].value, 0) == NGX_ERROR)",
      "1222:         {",
      "1223:             return NGX_ERROR;",
      "1224:         }",
      "1225:     }",
      "1227:     return NGX_OK;",
      "1228: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1744: static ngx_int_t",
      "1746: {",
      "1748:     ngx_list_part_t                 *part;",
      "1749:     ngx_uint_t                       i;",
      "1751:     if (ngx_list_init(&sr->headers_in.headers, sr->pool, 20,",
      "1752:                       sizeof(ngx_table_elt_t)) != NGX_OK)",
      "",
      "[Removed Lines]",
      "1745: ngx_http_lua_copy_request_headers(ngx_http_request_t *sr, ngx_http_request_t *r)",
      "1747:     ngx_table_elt_t                 *header;",
      "",
      "[Added Lines]",
      "1635: ngx_http_lua_copy_request_headers(ngx_http_request_t *sr,",
      "1636:     ngx_http_request_t *pr, int pr_not_chunked)",
      "1638:     ngx_table_elt_t                 *clh, *header;",
      "1641:     u_char                          *p;",
      "1642:     off_t                            len;",
      "1644:     dd(\"before: parent req headers count: %d\",",
      "1645:        (int) pr->headers_in.headers.part.nelts);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1754:         return NGX_ERROR;",
      "1755:     }",
      "1761:     header = part->elts;",
      "1763:     for (i = 0; /* void */; i++) {",
      "",
      "[Removed Lines]",
      "1757:     dd(\"before: parent req headers count: %d\",",
      "1758:        (int) r->headers_in.headers.part.nelts);",
      "1760:     part = &r->headers_in.headers.part;",
      "",
      "[Added Lines]",
      "1653:     if (sr->request_body && !pr_not_chunked) {",
      "1657:         len = sr->request_body->buf ? ngx_buf_size(sr->request_body->buf) : 0;",
      "1659:         clh = ngx_list_push(&sr->headers_in.headers);",
      "1660:         if (clh == NULL) {",
      "1661:             return NGX_ERROR;",
      "1662:         }",
      "1664:         clh->hash = ngx_http_lua_content_length_hash;",
      "1665:         clh->key = ngx_http_lua_content_length_header_key;",
      "1666:         clh->lowcase_key = ngx_pnalloc(sr->pool, clh->key.len);",
      "1667:         if (clh->lowcase_key == NULL) {",
      "1668:             return NGX_ERROR;",
      "1669:         }",
      "1671:         ngx_strlow(clh->lowcase_key, clh->key.data, clh->key.len);",
      "1673:         p = ngx_palloc(sr->pool, NGX_OFF_T_LEN);",
      "1674:         if (p == NULL) {",
      "1675:             return NGX_ERROR;",
      "1676:         }",
      "1678:         clh->value.data = p;",
      "1679:         clh->value.len = ngx_sprintf(clh->value.data, \"%O\", len)",
      "1680:                          - clh->value.data;",
      "1682:         sr->headers_in.content_length = clh;",
      "1683:         sr->headers_in.content_length_n = len;",
      "1685:         dd(\"sr crafted content-length: %.*s\",",
      "1686:            (int) sr->headers_in.content_length->value.len,",
      "1687:            sr->headers_in.content_length->value.data);",
      "1688:     }",
      "1692:     part = &pr->headers_in.headers.part;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1772:             i = 0;",
      "1773:         }",
      "1776:            header[i].key.data, (int) header[i].value.len,",
      "1777:            header[i].value.data);",
      "",
      "[Removed Lines]",
      "1775:         dd(\"setting request header %.*s: %.*s\", (int) header[i].key.len,",
      "",
      "[Added Lines]",
      "1707:         if (!pr_not_chunked && header[i].key.len == sizeof(\"Content-Length\") - 1",
      "1708:             && ngx_strncasecmp(header[i].key.data, (u_char *) \"Content-Length\",",
      "1709:                                sizeof(\"Content-Length\") - 1) == 0)",
      "1710:         {",
      "1711:             continue;",
      "1712:         }",
      "1714:         dd(\"sr copied req header %.*s: %.*s\", (int) header[i].key.len,",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1784:     }",
      "1786:     dd(\"after: parent req headers count: %d\",",
      "1789:     return NGX_OK;",
      "1790: }",
      "",
      "[Removed Lines]",
      "1787:        (int) r->headers_in.headers.part.nelts);",
      "",
      "[Added Lines]",
      "1726:        (int) pr->headers_in.headers.part.nelts);",
      "",
      "---------------"
    ],
    "t/020-subrequest.t||t/020-subrequest.t": [
      "File: t/020-subrequest.t -> t/020-subrequest.t",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: plan tests => repeat_each() * (blocks() * 3 + 23);",
      "16: $ENV{TEST_NGINX_MEMCACHED_PORT} ||= 11211;",
      "18: #no_diff();",
      "19: no_long_string();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: $ENV{TEST_NGINX_HTML_DIR} ||= html_dir();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "214: --- config",
      "215:     location /other {",
      "216:         default_type 'foo/bar';",
      "",
      "[Removed Lines]",
      "213: === TEST 8: PUT (nobody, proxy method)",
      "",
      "[Added Lines]",
      "214: === TEST 8: PUT (with body, proxy method)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "246: --- config",
      "247:     location /other {",
      "248:         default_type 'foo/bar';",
      "",
      "[Removed Lines]",
      "245: === TEST 9: PUT (nobody, no proxy method)",
      "",
      "[Added Lines]",
      "246: === TEST 9: PUT (with body, no proxy method)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "275: --- config",
      "276:     location /other {",
      "277:         default_type 'foo/bar';",
      "",
      "[Removed Lines]",
      "274: === TEST 10: PUT (nobody, no proxy method)",
      "",
      "[Added Lines]",
      "275: === TEST 10: PUT (no body, no proxy method)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2877: --- no_error_log",
      "2878: [error]",
      "2879: --- error_code: 200",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2884: === TEST 77: avoid request smuggling 1/4 (default capture + smuggle in header)",
      "2885: --- http_config",
      "2886:     upstream backend {",
      "2887:         server unix:$TEST_NGINX_HTML_DIR/nginx.sock;",
      "2888:         keepalive 32;",
      "2889:     }",
      "2891:     server {",
      "2892:         listen unix:$TEST_NGINX_HTML_DIR/nginx.sock;",
      "2894:         location / {",
      "2895:             content_by_lua_block {",
      "2896:                 ngx.say(\"method: \", ngx.var.request_method,",
      "2897:                         \", uri: \", ngx.var.uri,",
      "2898:                         \", X: \", ngx.var.http_x)",
      "2899:             }",
      "2900:         }",
      "2901:     }",
      "2902: --- config",
      "2903:     location /proxy {",
      "2904:         proxy_http_version 1.1;",
      "2905:         proxy_set_header   Connection \"\";",
      "2906:         proxy_pass         http://backend/foo;",
      "2907:     }",
      "2909:     location /capture {",
      "2910:         server_tokens off;",
      "2911:         more_clear_headers Date;",
      "2913:         content_by_lua_block {",
      "2914:             local res = ngx.location.capture(\"/proxy\")",
      "2915:             ngx.print(res.body)",
      "2916:         }",
      "2917:     }",
      "2919:     location /t {",
      "2920:         content_by_lua_block {",
      "2921:             local req = [[",
      "2922: GET /capture HTTP/1.1",
      "2923: Host: test.com",
      "2924: Content-Length: 37",
      "2925: Transfer-Encoding: chunked",
      "2927: 0",
      "2929: GET /capture HTTP/1.1",
      "2930: Host: test.com",
      "2931: X: GET /bar HTTP/1.0",
      "2933: ]]",
      "2935:             local sock = ngx.socket.tcp()",
      "2936:             sock:settimeout(1000)",
      "2938:             local ok, err = sock:connect(\"127.0.0.1\", $TEST_NGINX_SERVER_PORT)",
      "2939:             if not ok then",
      "2940:                 ngx.say(\"failed to connect: \", err)",
      "2941:                 return",
      "2942:             end",
      "2944:             local bytes, err = sock:send(req)",
      "2945:             if not bytes then",
      "2946:                 ngx.say(\"failed to send req: \", err)",
      "2947:                 return",
      "2948:             end",
      "2950:             ngx.say(\"req bytes: \", bytes)",
      "2952:             local n_resp = 0",
      "2954:             local reader = sock:receiveuntil(\"\\r\\n\")",
      "2955:             while true do",
      "2956:                 local line, err = reader()",
      "2957:                 if line then",
      "2958:                     ngx.say(line)",
      "2959:                     if line == \"0\" then",
      "2960:                         n_resp = n_resp + 1",
      "2961:                     end",
      "2963:                     if n_resp >= 2 then",
      "2964:                         break",
      "2965:                     end",
      "2967:                 else",
      "2968:                     ngx.say(\"err: \", err)",
      "2969:                     break",
      "2970:                 end",
      "2971:             end",
      "2973:             sock:close()",
      "2974:         }",
      "2975:     }",
      "2976: --- request",
      "2977: GET /t",
      "2978: --- response_body",
      "2979: req bytes: 146",
      "2980: HTTP/1.1 200 OK",
      "2981: Server: nginx",
      "2982: Content-Type: text/plain",
      "2983: Transfer-Encoding: chunked",
      "2984: Connection: keep-alive",
      "2986: 1f",
      "2987: method: GET, uri: /foo, X: nil",
      "2989: 0",
      "2991: HTTP/1.1 200 OK",
      "2992: Server: nginx",
      "2993: Content-Type: text/plain",
      "2994: Transfer-Encoding: chunked",
      "2995: Connection: keep-alive",
      "2997: 2d",
      "2998: method: GET, uri: /foo, X: GET /bar HTTP/1.0",
      "3000: 0",
      "3001: --- no_error_log",
      "3002: [error]",
      "3006: === TEST 78: avoid request smuggling 2/4 (POST capture + smuggle in body)",
      "3007: --- http_config",
      "3008:     upstream backend {",
      "3009:         server unix:$TEST_NGINX_HTML_DIR/nginx.sock;",
      "3010:         keepalive 32;",
      "3011:     }",
      "3013:     server {",
      "3014:         listen unix:$TEST_NGINX_HTML_DIR/nginx.sock;",
      "3016:         location / {",
      "3017:             content_by_lua_block {",
      "3018:                 ngx.say(\"method: \", ngx.var.request_method,",
      "3019:                         \", uri: \", ngx.var.uri)",
      "3020:             }",
      "3021:         }",
      "3022:     }",
      "3023: --- config",
      "3024:     location /proxy {",
      "3025:         proxy_http_version 1.1;",
      "3026:         proxy_set_header   Connection \"\";",
      "3027:         proxy_pass         http://backend/foo;",
      "3028:     }",
      "3030:     location /capture {",
      "3031:         server_tokens off;",
      "3032:         more_clear_headers Date;",
      "3034:         content_by_lua_block {",
      "3035:             ngx.req.read_body()",
      "3036:             local res = ngx.location.capture(\"/proxy\", { method = ngx.HTTP_POST })",
      "3037:             ngx.print(res.body)",
      "3038:         }",
      "3039:     }",
      "3041:     location /t {",
      "3042:         content_by_lua_block {",
      "3043:             local req = [[",
      "3044: GET /capture HTTP/1.1",
      "3045: Host: test.com",
      "3046: Content-Length: 57",
      "3047: Transfer-Encoding: chunked",
      "3049: 0",
      "3051: POST /capture HTTP/1.1",
      "3052: Host: test.com",
      "3053: Content-Length: 60",
      "3055: POST /bar HTTP/1.1",
      "3056: Host: test.com",
      "3057: Content-Length: 5",
      "3059: hello",
      "3061: ]]",
      "3063:             local sock = ngx.socket.tcp()",
      "3064:             sock:settimeout(1000)",
      "3066:             local ok, err = sock:connect(\"127.0.0.1\", $TEST_NGINX_SERVER_PORT)",
      "3067:             if not ok then",
      "3068:                 ngx.say(\"failed to connect: \", err)",
      "3069:                 return",
      "3070:             end",
      "3072:             local bytes, err = sock:send(req)",
      "3073:             if not bytes then",
      "3074:                 ngx.say(\"failed to send req: \", err)",
      "3075:                 return",
      "3076:             end",
      "3078:             ngx.say(\"req bytes: \", bytes)",
      "3080:             local n_resp = 0",
      "3082:             local reader = sock:receiveuntil(\"\\r\\n\")",
      "3083:             while true do",
      "3084:                 local line, err = reader()",
      "3085:                 if line then",
      "3086:                     ngx.say(line)",
      "3087:                     if line == \"0\" then",
      "3088:                         n_resp = n_resp + 1",
      "3089:                     end",
      "3091:                     if n_resp >= 2 then",
      "3092:                         break",
      "3093:                     end",
      "3095:                 else",
      "3096:                     ngx.say(\"err: \", err)",
      "3097:                     break",
      "3098:                 end",
      "3099:             end",
      "3101:             sock:close()",
      "3102:         }",
      "3103:     }",
      "3104: --- request",
      "3105: GET /t",
      "3106: --- response_body",
      "3107: req bytes: 205",
      "3108: HTTP/1.1 200 OK",
      "3109: Server: nginx",
      "3110: Content-Type: text/plain",
      "3111: Transfer-Encoding: chunked",
      "3112: Connection: keep-alive",
      "3114: 18",
      "3115: method: POST, uri: /foo",
      "3117: 0",
      "3119: HTTP/1.1 200 OK",
      "3120: Server: nginx",
      "3121: Content-Type: text/plain",
      "3122: Transfer-Encoding: chunked",
      "3123: Connection: keep-alive",
      "3125: 18",
      "3126: method: POST, uri: /foo",
      "3128: 0",
      "3129: --- no_error_log",
      "3130: [error]",
      "3134: === TEST 79: avoid request smuggling 3/4 (POST capture w/ always_forward_body + smuggle in body)",
      "3135: --- http_config",
      "3136:     upstream backend {",
      "3137:         server unix:$TEST_NGINX_HTML_DIR/nginx.sock;",
      "3138:         keepalive 32;",
      "3139:     }",
      "3141:     server {",
      "3142:         listen unix:$TEST_NGINX_HTML_DIR/nginx.sock;",
      "3144:         location / {",
      "3145:             content_by_lua_block {",
      "3146:                 ngx.say(\"method: \", ngx.var.request_method,",
      "3147:                         \", uri: \", ngx.var.uri)",
      "3148:             }",
      "3149:         }",
      "3150:     }",
      "3151: --- config",
      "3152:     location /proxy {",
      "3153:         proxy_http_version 1.1;",
      "3154:         proxy_set_header   Connection \"\";",
      "3155:         proxy_pass         http://backend/foo;",
      "3156:     }",
      "3158:     location /capture {",
      "3159:         server_tokens off;",
      "3160:         more_clear_headers Date;",
      "3162:         content_by_lua_block {",
      "3163:             ngx.req.read_body()",
      "3164:             local res = ngx.location.capture(\"/proxy\", {",
      "3165:                 method = ngx.HTTP_POST,",
      "3166:                 always_forward_body = true",
      "3167:             })",
      "3168:             ngx.print(res.body)",
      "3169:         }",
      "3170:     }",
      "3172:     location /t {",
      "3173:         content_by_lua_block {",
      "3174:             local req = [[",
      "3175: GET /capture HTTP/1.1",
      "3176: Host: test.com",
      "3177: Content-Length: 57",
      "3178: Transfer-Encoding: chunked",
      "3180: 0",
      "3182: POST /capture HTTP/1.1",
      "3183: Host: test.com",
      "3184: Content-Length: 60",
      "3186: POST /bar HTTP/1.1",
      "3187: Host: test.com",
      "3188: Content-Length: 5",
      "3190: hello",
      "3192: ]]",
      "3194:             local sock = ngx.socket.tcp()",
      "3195:             sock:settimeout(1000)",
      "3197:             local ok, err = sock:connect(\"127.0.0.1\", $TEST_NGINX_SERVER_PORT)",
      "3198:             if not ok then",
      "3199:                 ngx.say(\"failed to connect: \", err)",
      "3200:                 return",
      "3201:             end",
      "3203:             local bytes, err = sock:send(req)",
      "3204:             if not bytes then",
      "3205:                 ngx.say(\"failed to send req: \", err)",
      "3206:                 return",
      "3207:             end",
      "3209:             ngx.say(\"req bytes: \", bytes)",
      "3211:             local n_resp = 0",
      "3213:             local reader = sock:receiveuntil(\"\\r\\n\")",
      "3214:             while true do",
      "3215:                 local line, err = reader()",
      "3216:                 if line then",
      "3217:                     ngx.say(line)",
      "3218:                     if line == \"0\" then",
      "3219:                         n_resp = n_resp + 1",
      "3220:                     end",
      "3222:                     if n_resp >= 2 then",
      "3223:                         break",
      "3224:                     end",
      "3226:                 else",
      "3227:                     ngx.say(\"err: \", err)",
      "3228:                     break",
      "3229:                 end",
      "3230:             end",
      "3232:             sock:close()",
      "3233:         }",
      "3234:     }",
      "3235: --- request",
      "3236: GET /t",
      "3237: --- response_body",
      "3238: req bytes: 205",
      "3239: HTTP/1.1 200 OK",
      "3240: Server: nginx",
      "3241: Content-Type: text/plain",
      "3242: Transfer-Encoding: chunked",
      "3243: Connection: keep-alive",
      "3245: 18",
      "3246: method: POST, uri: /foo",
      "3248: 0",
      "3250: HTTP/1.1 200 OK",
      "3251: Server: nginx",
      "3252: Content-Type: text/plain",
      "3253: Transfer-Encoding: chunked",
      "3254: Connection: keep-alive",
      "3256: 18",
      "3257: method: POST, uri: /foo",
      "3259: 0",
      "3260: --- no_error_log",
      "3261: [error]",
      "3265: === TEST 80: avoid request smuggling 4/4 (POST capture w/ body + smuggle in body)",
      "3266: --- http_config",
      "3267:     upstream backend {",
      "3268:         server unix:$TEST_NGINX_HTML_DIR/nginx.sock;",
      "3269:         keepalive 32;",
      "3270:     }",
      "3272:     server {",
      "3273:         listen unix:$TEST_NGINX_HTML_DIR/nginx.sock;",
      "3275:         location / {",
      "3276:             content_by_lua_block {",
      "3277:                 ngx.say(\"method: \", ngx.var.request_method,",
      "3278:                         \", uri: \", ngx.var.uri)",
      "3279:             }",
      "3280:         }",
      "3281:     }",
      "3282: --- config",
      "3283:     location /proxy {",
      "3284:         proxy_http_version 1.1;",
      "3285:         proxy_set_header   Connection \"\";",
      "3286:         proxy_pass         http://backend/foo;",
      "3287:     }",
      "3289:     location /capture {",
      "3290:         server_tokens off;",
      "3291:         more_clear_headers Date;",
      "3293:         content_by_lua_block {",
      "3294:             ngx.req.read_body()",
      "3295:             local res = ngx.location.capture(\"/proxy\", {",
      "3296:                 method = ngx.HTTP_POST,",
      "3297:                 always_forward_body = true,",
      "3298:                 body = ngx.req.get_body_data()",
      "3299:             })",
      "3300:             ngx.print(res.body)",
      "3301:         }",
      "3302:     }",
      "3304:     location /t {",
      "3305:         content_by_lua_block {",
      "3306:             local req = [[",
      "3307: GET /capture HTTP/1.1",
      "3308: Host: test.com",
      "3309: Content-Length: 57",
      "3310: Transfer-Encoding: chunked",
      "3312: 0",
      "3314: POST /capture HTTP/1.1",
      "3315: Host: test.com",
      "3316: Content-Length: 60",
      "3318: POST /bar HTTP/1.1",
      "3319: Host: test.com",
      "3320: Content-Length: 5",
      "3322: hello",
      "3324: ]]",
      "3326:             local sock = ngx.socket.tcp()",
      "3327:             sock:settimeout(1000)",
      "3329:             local ok, err = sock:connect(\"127.0.0.1\", $TEST_NGINX_SERVER_PORT)",
      "3330:             if not ok then",
      "3331:                 ngx.say(\"failed to connect: \", err)",
      "3332:                 return",
      "3333:             end",
      "3335:             local bytes, err = sock:send(req)",
      "3336:             if not bytes then",
      "3337:                 ngx.say(\"failed to send req: \", err)",
      "3338:                 return",
      "3339:             end",
      "3341:             ngx.say(\"req bytes: \", bytes)",
      "3343:             local n_resp = 0",
      "3345:             local reader = sock:receiveuntil(\"\\r\\n\")",
      "3346:             while true do",
      "3347:                 local line, err = reader()",
      "3348:                 if line then",
      "3349:                     ngx.say(line)",
      "3350:                     if line == \"0\" then",
      "3351:                         n_resp = n_resp + 1",
      "3352:                     end",
      "3354:                     if n_resp >= 2 then",
      "3355:                         break",
      "3356:                     end",
      "3358:                 else",
      "3359:                     ngx.say(\"err: \", err)",
      "3360:                     break",
      "3361:                 end",
      "3362:             end",
      "3364:             sock:close()",
      "3365:         }",
      "3366:     }",
      "3367: --- request",
      "3368: GET /t",
      "3369: --- response_body",
      "3370: req bytes: 205",
      "3371: HTTP/1.1 200 OK",
      "3372: Server: nginx",
      "3373: Content-Type: text/plain",
      "3374: Transfer-Encoding: chunked",
      "3375: Connection: keep-alive",
      "3377: 18",
      "3378: method: POST, uri: /foo",
      "3380: 0",
      "3382: HTTP/1.1 200 OK",
      "3383: Server: nginx",
      "3384: Content-Type: text/plain",
      "3385: Transfer-Encoding: chunked",
      "3386: Connection: keep-alive",
      "3388: 18",
      "3389: method: POST, uri: /foo",
      "3391: 0",
      "3392: --- no_error_log",
      "3393: [error]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "49268a417851cc1622c1fae0da0e58d63fe68caa",
      "candidate_info": {
        "commit_hash": "49268a417851cc1622c1fae0da0e58d63fe68caa",
        "repo": "openresty/lua-nginx-module",
        "commit_url": "https://github.com/openresty/lua-nginx-module/commit/49268a417851cc1622c1fae0da0e58d63fe68caa",
        "files": [
          "src/ngx_http_lua_subrequest.c"
        ],
        "message": "bugfix: wrong pipelined request body length when request body is parent's request body.",
        "before_after_code_files": [
          "src/ngx_http_lua_subrequest.c||src/ngx_http_lua_subrequest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ngx_http_lua_subrequest.c||src/ngx_http_lua_subrequest.c"
          ],
          "candidate": [
            "src/ngx_http_lua_subrequest.c||src/ngx_http_lua_subrequest.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ngx_http_lua_subrequest.c||src/ngx_http_lua_subrequest.c": [
          "File: src/ngx_http_lua_subrequest.c -> src/ngx_http_lua_subrequest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1653:     if (sr->request_body && !pr_not_chunked) {",
          "1659:         clh = ngx_list_push(&sr->headers_in.headers);",
          "1660:         if (clh == NULL) {",
          "",
          "[Removed Lines]",
          "1657:         len = sr->request_body->buf ? ngx_buf_size(sr->request_body->buf) : 0;",
          "",
          "[Added Lines]",
          "1656:         if (pr && sr->request_body == pr->request_body) {",
          "1657:             len = pr->headers_in.content_length_n;",
          "1658:         } else {",
          "1659:             len = sr->request_body->buf ? ngx_buf_size(sr->request_body->buf) : 0;",
          "1660:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "65d87507489b31b86419b0fcecc1c75ce46d0ece",
      "candidate_info": {
        "commit_hash": "65d87507489b31b86419b0fcecc1c75ce46d0ece",
        "repo": "openresty/lua-nginx-module",
        "commit_url": "https://github.com/openresty/lua-nginx-module/commit/65d87507489b31b86419b0fcecc1c75ce46d0ece",
        "files": [
          "src/ngx_http_lua_subrequest.c"
        ],
        "message": "bugfix: wrong pipelined request body length when request body is parent's request body. (#1814)",
        "before_after_code_files": [
          "src/ngx_http_lua_subrequest.c||src/ngx_http_lua_subrequest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ngx_http_lua_subrequest.c||src/ngx_http_lua_subrequest.c"
          ],
          "candidate": [
            "src/ngx_http_lua_subrequest.c||src/ngx_http_lua_subrequest.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ngx_http_lua_subrequest.c||src/ngx_http_lua_subrequest.c": [
          "File: src/ngx_http_lua_subrequest.c -> src/ngx_http_lua_subrequest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1637: {",
          "1638:     ngx_table_elt_t                 *clh, *header;",
          "1639:     ngx_list_part_t                 *part;",
          "1640:     ngx_uint_t                       i;",
          "1641:     u_char                          *p;",
          "1642:     off_t                            len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1640:     ngx_chain_t                     *in;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1653:     if (sr->request_body && !pr_not_chunked) {",
          "1659:         clh = ngx_list_push(&sr->headers_in.headers);",
          "1660:         if (clh == NULL) {",
          "",
          "[Removed Lines]",
          "1657:         len = sr->request_body->buf ? ngx_buf_size(sr->request_body->buf) : 0;",
          "",
          "[Added Lines]",
          "1657:         len = 0;",
          "1659:         for (in = sr->request_body->bufs; in; in = in->next) {",
          "1660:             len += ngx_buf_size(in->buf);",
          "1661:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "366a84579dfc834a62ca79497d855c1288040897",
      "candidate_info": {
        "commit_hash": "366a84579dfc834a62ca79497d855c1288040897",
        "repo": "openresty/lua-nginx-module",
        "commit_url": "https://github.com/openresty/lua-nginx-module/commit/366a84579dfc834a62ca79497d855c1288040897",
        "files": [
          "src/ngx_http_lua_subrequest.c"
        ],
        "message": "style: added a new line.",
        "before_after_code_files": [
          "src/ngx_http_lua_subrequest.c||src/ngx_http_lua_subrequest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ngx_http_lua_subrequest.c||src/ngx_http_lua_subrequest.c"
          ],
          "candidate": [
            "src/ngx_http_lua_subrequest.c||src/ngx_http_lua_subrequest.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ngx_http_lua_subrequest.c||src/ngx_http_lua_subrequest.c": [
          "File: src/ngx_http_lua_subrequest.c -> src/ngx_http_lua_subrequest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1656:         if (pr && sr->request_body == pr->request_body) {",
          "1657:             len = pr->headers_in.content_length_n;",
          "1658:         } else {",
          "1660:         }",
          "1662:         clh = ngx_list_push(&sr->headers_in.headers);",
          "",
          "[Removed Lines]",
          "1659:             len = sr->request_body->buf ? ngx_buf_size(sr->request_body->buf) : 0;",
          "",
          "[Added Lines]",
          "1660:             len = sr->request_body->buf",
          "1661:                   ? ngx_buf_size(sr->request_body->buf) : 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}