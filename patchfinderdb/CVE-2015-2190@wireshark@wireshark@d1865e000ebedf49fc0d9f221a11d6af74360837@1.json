{
  "cve_id": "CVE-2015-2190",
  "cve_desc": "epan/proto.c in Wireshark 1.12.x before 1.12.4 does not properly handle integer data types greater than 32 bits in size, which allows remote attackers to cause a denial of service (assertion failure and application exit) via a crafted packet that is improperly handled by the LLDP dissector.",
  "repo": "wireshark/wireshark",
  "patch_hash": "d1865e000ebedf49fc0d9f221a11d6af74360837",
  "patch_info": {
    "commit_hash": "d1865e000ebedf49fc0d9f221a11d6af74360837",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/d1865e000ebedf49fc0d9f221a11d6af74360837",
    "files": [
      "epan/proto.c"
    ],
    "message": "Make FT_{U}INT{40,48,56,64} handle BASE_CUSTOM.\n\nFinish the job of handling integral values > 32 bits similarly to who we\nhandle values 32 bits or less.\n\nIn cases that \"should not happen\", and where we might *not* be executing\nin the context of a dissector (filling in the field label can be done\nlazily, being deferred to \"print\" time, and that doesn't happen in the\ncontext of a dissector), use g_assert_not_reached() rather than\nDISSECTOR_ASSERT_NOT_REACHED() - the latter throws an assertion that's\nnot caught if we're not doing dissection, so we crash anyway.\n\nBug: 10983\nChange-Id: Ia81a0a4925394f99aa35193a333f3e9659a9b93d\nReviewed-on: https://code.wireshark.org/review/7307\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
    "before_after_code_files": [
      "epan/proto.c||epan/proto.c"
    ]
  },
  "patch_diff": {
    "epan/proto.c||epan/proto.c": [
      "File: epan/proto.c -> epan/proto.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "174: static const char *hfinfo_numeric_value_format(const header_field_info *hfinfo, char buf[32], guint32 value);",
      "175: static const char *hfinfo_numeric_value_format64(const header_field_info *hfinfo, char buf[32], guint64 value);",
      "180: static proto_item *",
      "181: proto_tree_add_node(proto_tree *tree, field_info *fi);",
      "",
      "[Removed Lines]",
      "177: static const char* hfinfo_uint64_format(const header_field_info *hfinfo);",
      "178: static const char* hfinfo_int64_format(const header_field_info *hfinfo);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "6659: static void",
      "6660: fill_label_number64(field_info *fi, gchar *label_str, gboolean is_signed)",
      "6661: {",
      "6663:  header_field_info *hfinfo = fi->hfinfo;",
      "6664:  guint64            value;",
      "6670:   value = fvalue_get_sinteger64(&fi->value);",
      "6673:   value = fvalue_get_uinteger64(&fi->value);",
      "6683:   const char *val_str = hf_try_val64_to_str_const(value, hfinfo, \"Unknown\");",
      "6686:    label_fill(label_str, 0, hfinfo, val_str);",
      "6691:  }",
      "6692:  else {",
      "6694:  }",
      "6695: }",
      "",
      "[Removed Lines]",
      "6662:  const char        *format = NULL;",
      "6665:  char               tmp[ITEM_LABEL_LENGTH+1];",
      "6668:  if (is_signed) {",
      "6669:   format = hfinfo_int64_format(hfinfo);",
      "6671:  } else {",
      "6672:   format = hfinfo_uint64_format(hfinfo);",
      "6674:  }",
      "6677:  if (IS_BASE_DUAL(hfinfo->display))",
      "6678:   g_snprintf(tmp, ITEM_LABEL_LENGTH, format, value, value);",
      "6679:  else",
      "6680:   g_snprintf(tmp, ITEM_LABEL_LENGTH, format, value);",
      "6682:  if (hfinfo->strings) {",
      "6685:   if ((hfinfo->display & FIELD_DISPLAY_E_MASK) == BASE_NONE) {",
      "6687:   }",
      "6688:   else {",
      "6689:    label_fill_descr(label_str, 0, hfinfo, val_str, tmp);",
      "6690:   }",
      "6693:   label_fill(label_str, 0, hfinfo, tmp);",
      "",
      "[Added Lines]",
      "6662:  char               buf[32];",
      "6663:  const char        *out;",
      "6665:  if (is_signed)",
      "6667:  else",
      "6671:  if (hfinfo->display == BASE_CUSTOM) {",
      "6672:   gchar tmp[ITEM_LABEL_LENGTH];",
      "6673:   const custom_fmt_func_64_t fmtfunc64 = (const custom_fmt_func_64_t)hfinfo->strings;",
      "6675:   DISSECTOR_ASSERT(fmtfunc64);",
      "6676:   fmtfunc64(tmp, value);",
      "6677:   label_fill(label_str, 0, hfinfo, tmp);",
      "6678:  }",
      "6679:  else if (hfinfo->strings) {",
      "6682:   out = hfinfo_number_vals_format64(hfinfo, buf, value);",
      "6685:   else",
      "6686:    label_fill_descr(label_str, 0, hfinfo, val_str, out);",
      "6689:   out = hfinfo_number_value_format64(hfinfo, buf, value);",
      "6691:   label_fill(label_str, 0, hfinfo, out);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "6830:     return ptr;",
      "6832:    default:",
      "6835:   }",
      "6836:  return ptr;",
      "6837: }",
      "",
      "[Removed Lines]",
      "6833:     DISSECTOR_ASSERT_NOT_REACHED();",
      "6834:     ;",
      "",
      "[Added Lines]",
      "6831:     g_assert_not_reached();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "6871:     return ptr;",
      "6873:    default:",
      "6876:   }",
      "6877:  return ptr;",
      "6878: }",
      "",
      "[Removed Lines]",
      "6874:     DISSECTOR_ASSERT_NOT_REACHED();",
      "6875:     ;",
      "",
      "[Added Lines]",
      "6871:     g_assert_not_reached();",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "7003:  return hfinfo_number_value_format_display64(hfinfo, display, buf, value);",
      "7004: }",
      "7064: const char *",
      "7065: proto_registrar_get_name(const int n)",
      "7066: {",
      "",
      "[Removed Lines]",
      "7006: static const char *",
      "7007: hfinfo_uint64_format(const header_field_info *hfinfo)",
      "7008: {",
      "7009:  const char *format = NULL;",
      "7012:  switch (hfinfo->display & FIELD_DISPLAY_E_MASK) {",
      "7013:   case BASE_DEC:",
      "7014:    format = \"%\" G_GINT64_MODIFIER \"u\";",
      "7015:    break;",
      "7016:   case BASE_DEC_HEX:",
      "7017:    format = \"%\" G_GINT64_MODIFIER \"u (0x%016\" G_GINT64_MODIFIER \"x)\";",
      "7018:    break;",
      "7020:    format = \"%#\" G_GINT64_MODIFIER \"o\";",
      "7021:    break;",
      "7022:   case BASE_HEX:",
      "7023:    format = \"0x%016\" G_GINT64_MODIFIER \"x\";",
      "7024:    break;",
      "7025:   case BASE_HEX_DEC:",
      "7026:    format = \"0x%016\" G_GINT64_MODIFIER \"x (%\" G_GINT64_MODIFIER \"u)\";",
      "7027:    break;",
      "7028:   default:",
      "7029:    DISSECTOR_ASSERT_NOT_REACHED();",
      "7030:    ;",
      "7031:  }",
      "7032:  return format;",
      "7033: }",
      "7035: static const char *",
      "7036: hfinfo_int64_format(const header_field_info *hfinfo)",
      "7037: {",
      "7038:  const char *format = NULL;",
      "7041:  switch (hfinfo->display & FIELD_DISPLAY_E_MASK) {",
      "7042:   case BASE_DEC:",
      "7043:    format = \"%\" G_GINT64_MODIFIER \"d\";",
      "7044:    break;",
      "7045:   case BASE_DEC_HEX:",
      "7046:    format = \"%\" G_GINT64_MODIFIER \"d (0x%016\" G_GINT64_MODIFIER \"x)\";",
      "7047:    break;",
      "7049:    format = \"%#\" G_GINT64_MODIFIER \"o\";",
      "7050:    break;",
      "7051:   case BASE_HEX:",
      "7052:    format = \"0x%016\" G_GINT64_MODIFIER \"x\";",
      "7053:    break;",
      "7054:   case BASE_HEX_DEC:",
      "7055:    format = \"0x%016\" G_GINT64_MODIFIER \"x (%\" G_GINT64_MODIFIER \"d)\";",
      "7056:    break;",
      "7057:   default:",
      "7058:    DISSECTOR_ASSERT_NOT_REACHED();",
      "7059:    ;",
      "7060:  }",
      "7061:  return format;",
      "7062: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "afc48b4d2153af6bff8efcba7f0427e7e3e8698e",
      "candidate_info": {
        "commit_hash": "afc48b4d2153af6bff8efcba7f0427e7e3e8698e",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/afc48b4d2153af6bff8efcba7f0427e7e3e8698e",
        "files": [
          "epan/dissectors/packet-lldp.c",
          "epan/proto.c"
        ],
        "message": "FT_{U}INT64 doesn't work with BASE_CUSTOM.\n\nThis is the 1.12 branch, so we do a quick fix:\n\nGet rid of the one place we're using it.\n\nReject it in tmp_fld_check_assert(), so using it will blow up early in\nthe initialization process rather than blowing up when dissecting.\n\nIn cases that, with the tmp_fld_check_assert() change, \"should not\nhappen\", and where we might *not* be executing in the context of a\ndissector (filling in the field label can be done lazily, being deferred\nto \"print\" time, and that doesn't happen in the context of a dissector),\nuse g_assert_not_reached() rather than DISSECTOR_ASSERT_NOT_REACHED() -\nthe latter throws an assertion that's not caught if we're not doing\ndissection, so we crash anyway.\n\nBug: 10983\nChange-Id: Id4cb1b8ed17cab976b8151e41ec6b6b79478214d\nReviewed-on: https://code.wireshark.org/review/7304\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-lldp.c||epan/dissectors/packet-lldp.c",
          "epan/proto.c||epan/proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "epan/proto.c||epan/proto.c"
          ],
          "candidate": [
            "epan/proto.c||epan/proto.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-lldp.c||epan/dissectors/packet-lldp.c": [
          "File: epan/dissectors/packet-lldp.c -> epan/dissectors/packet-lldp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "876:   option = 0 -> Latitude",
          "877:   option = 1 -> Longitude",
          "881: {",
          "883:  guint64 tempValue = value;",
          "884:  gboolean negativeNum = FALSE;",
          "885:  guint32 integerPortion = 0;",
          "",
          "[Removed Lines]",
          "879: static void",
          "880: get_latitude_or_longitude(gchar *buf, int option, guint64 unmasked_value)",
          "882:  guint64 value = (unmasked_value & G_GINT64_CONSTANT(0x03FFFFFFFF000000)) >> 24;",
          "",
          "[Added Lines]",
          "879: static gchar *",
          "880: get_latitude_or_longitude(int option, guint64 value)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "925:    direction = \"East\";",
          "926:  }",
          "940: }",
          "",
          "[Removed Lines]",
          "928:  g_snprintf(buf, ITEM_LABEL_LENGTH, \"%u.%04\" G_GINT64_MODIFIER \"u degrees %s (0x%16\" G_GINT64_MODIFIER \"X))\",",
          "929:      integerPortion, tempValue, direction, value);",
          "930: }",
          "932: static void",
          "933: latitude_base(gchar *buf, guint64 value) {",
          "934:  get_latitude_or_longitude(buf, 0, value);",
          "935: }",
          "937: static void",
          "938: longitude_base(gchar *buf, guint64 value) {",
          "939:  get_latitude_or_longitude(buf, 1, value);",
          "",
          "[Added Lines]",
          "927:  return wmem_strdup_printf(wmem_packet_scope(), \"%u.%04\" G_GINT64_MODIFIER \"u degrees %s\",",
          "928:      integerPortion, tempValue, direction);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2363:  guint8 subType;",
          "2364:  guint8 tempByte;",
          "2365:  guint32 LCI_Length;",
          "2367:  proto_tree *media_flags = NULL;",
          "2368:  proto_item *tf = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2355:  guint64 temp64bit = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2480:    proto_tree_add_item(tree, hf_media_loc_lat_resolution, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2485:    offset += 5;",
          "",
          "[Removed Lines]",
          "2483:    proto_tree_add_item(tree, hf_media_loc_lat, tvb, offset, 5, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "2473:    temp64bit = tvb_get_ntoh40(tvb, offset);",
          "2474:    temp64bit = temp64bit & G_GINT64_CONSTANT(0x03FFFFFFFF);",
          "2475:    if (tree)",
          "2476:     proto_tree_add_string_format_value(tree, hf_media_loc_lat, tvb, offset, 5, \"\", \"%s (0x%\" G_GINT64_MODIFIER \"X)\",",
          "2477:         get_latitude_or_longitude(0, temp64bit),",
          "2478:         temp64bit);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2488:    proto_tree_add_item(tree, hf_media_loc_long_resolution, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2493:    offset += 5;",
          "",
          "[Removed Lines]",
          "2491:    proto_tree_add_item(tree, hf_media_loc_long, tvb, offset, 5, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "2486:    temp64bit = tvb_get_ntoh40(tvb, offset);",
          "2487:    temp64bit = temp64bit & G_GINT64_CONSTANT(0x03FFFFFFFF);",
          "2488:    if (tree)",
          "2489:     proto_tree_add_string_format_value(tree, hf_media_loc_long, tvb, offset, 5, \"\", \"%s (0x%\" G_GINT64_MODIFIER \"X)\",",
          "2490:         get_latitude_or_longitude(1, temp64bit),",
          "2491:         temp64bit);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4131:    NULL, 0xFC, NULL, HFILL }",
          "4132:   },",
          "4133:   { &hf_media_loc_lat,",
          "4136:   },",
          "4137:   { &hf_media_loc_long_resolution,",
          "4138:    { \"Longitude Resolution\", \"lldp.media.loc.long_resolution\", FT_UINT8, BASE_DEC,",
          "4139:    NULL, 0xFC, NULL, HFILL }",
          "4140:   },",
          "4141:   { &hf_media_loc_long,",
          "4144:   },",
          "4145:   { &hf_media_loc_alt_type,",
          "4146:    { \"Altitude Type\", \"lldp.media.loc.alt_type\", FT_UINT8, BASE_DEC,",
          "",
          "[Removed Lines]",
          "4134:    { \"Latitude\", \"lldp.media.loc.latitude\", FT_UINT64, BASE_CUSTOM,",
          "4135:    latitude_base, 0x0, NULL, HFILL }",
          "4142:    { \"Longitude\", \"lldp.media.loc.longitude\", FT_UINT64, BASE_CUSTOM,",
          "4143:    longitude_base, 0x0, NULL, HFILL }",
          "",
          "[Added Lines]",
          "4134:    { \"Latitude\", \"lldp.media.loc.latitude\", FT_STRING, BASE_NONE,",
          "4135:    NULL, 0x0, NULL, HFILL }",
          "4142:    { \"Longitude\", \"lldp.media.loc.longitude\", FT_STRING, BASE_NONE,",
          "4143:    NULL, 0x0, NULL, HFILL }",
          "",
          "---------------"
        ],
        "epan/proto.c||epan/proto.c": [
          "File: epan/proto.c -> epan/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5400:     case BASE_OCT:",
          "5401:     case BASE_DEC_HEX:",
          "5402:     case BASE_HEX_DEC:",
          "5404:      break;",
          "5405:     default:",
          "5406:      g_error(\"Field '%s' (%s) is an integral value (%s)\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5403:      break;",
          "5405:      if (hfinfo->type == FT_INT64 ||",
          "5406:          hfinfo->type == FT_UINT64) {",
          "5408:       g_error(\"Field '%s' (%s) is a 64-bit field (%s) but is being displayed with BASE_CUSTOM\\n\",",
          "5409:        hfinfo->name, hfinfo->abbrev,",
          "5410:        ftype_name(hfinfo->type));",
          "5411:      }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6265:     return ptr;",
          "6267:    default:",
          "6270:   }",
          "6271:  return ptr;",
          "6272: }",
          "",
          "[Removed Lines]",
          "6268:     DISSECTOR_ASSERT_NOT_REACHED();",
          "6269:     ;",
          "",
          "[Added Lines]",
          "6277:     g_assert_not_reached();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6357:    format = \"0x%016\" G_GINT64_MODIFIER \"x (%\" G_GINT64_MODIFIER \"u)\";",
          "6358:    break;",
          "6359:   default:",
          "6362:  }",
          "6363:  return format;",
          "6364: }",
          "",
          "[Removed Lines]",
          "6360:    DISSECTOR_ASSERT_NOT_REACHED();",
          "6361:    ;",
          "",
          "[Added Lines]",
          "6368:    g_assert_not_reached();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6386:    format = \"0x%016\" G_GINT64_MODIFIER \"x (%\" G_GINT64_MODIFIER \"d)\";",
          "6387:    break;",
          "6388:   default:",
          "6391:  }",
          "6392:  return format;",
          "6393: }",
          "",
          "[Removed Lines]",
          "6389:    DISSECTOR_ASSERT_NOT_REACHED();",
          "6390:    ;",
          "",
          "[Added Lines]",
          "6396:    g_assert_not_reached();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5b715e72143792faf43782f9df01dbdc8ae3676a",
      "candidate_info": {
        "commit_hash": "5b715e72143792faf43782f9df01dbdc8ae3676a",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/5b715e72143792faf43782f9df01dbdc8ae3676a",
        "files": [
          "epan/dissectors/packet-lldp.c",
          "epan/proto.c"
        ],
        "message": "FT_{U}INT64 doesn't work with BASE_CUSTOM.\n\nThis is the 1.12 branch, so we do a quick fix:\n\nGet rid of the one place we're using it.\n\nReject it in tmp_fld_check_assert(), so using it will blow up early in\nthe initialization process rather than blowing up when dissecting.\n\nIn cases that, with the tmp_fld_check_assert() change, \"should not\nhappen\", and where we might *not* be executing in the context of a\ndissector (filling in the field label can be done lazily, being deferred\nto \"print\" time, and that doesn't happen in the context of a dissector),\nuse g_assert_not_reached() rather than DISSECTOR_ASSERT_NOT_REACHED() -\nthe latter throws an assertion that's not caught if we're not doing\ndissection, so we crash anyway.\n\nBug: 10983\nChange-Id: Id4cb1b8ed17cab976b8151e41ec6b6b79478214d\nReviewed-on: https://code.wireshark.org/review/7304\nReviewed-by: Guy Harris <guy@alum.mit.edu>\nReviewed-on: https://code.wireshark.org/review/7705\nReviewed-by: Balint Reczey <balint@balintreczey.hu>\nTested-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "epan/dissectors/packet-lldp.c||epan/dissectors/packet-lldp.c",
          "epan/proto.c||epan/proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "epan/proto.c||epan/proto.c"
          ],
          "candidate": [
            "epan/proto.c||epan/proto.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-lldp.c||epan/dissectors/packet-lldp.c": [
          "File: epan/dissectors/packet-lldp.c -> epan/dissectors/packet-lldp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "876:   option = 0 -> Latitude",
          "877:   option = 1 -> Longitude",
          "881: {",
          "883:  guint64 tempValue = value;",
          "884:  gboolean negativeNum = FALSE;",
          "885:  guint32 integerPortion = 0;",
          "",
          "[Removed Lines]",
          "879: static void",
          "880: get_latitude_or_longitude(gchar *buf, int option, guint64 unmasked_value)",
          "882:  guint64 value = (unmasked_value & G_GINT64_CONSTANT(0x03FFFFFFFF000000)) >> 24;",
          "",
          "[Added Lines]",
          "879: static gchar *",
          "880: get_latitude_or_longitude(int option, guint64 value)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "925:    direction = \"East\";",
          "926:  }",
          "940: }",
          "",
          "[Removed Lines]",
          "928:  g_snprintf(buf, ITEM_LABEL_LENGTH, \"%u.%04\" G_GINT64_MODIFIER \"u degrees %s (0x%16\" G_GINT64_MODIFIER \"X))\",",
          "929:      integerPortion, tempValue, direction, value);",
          "930: }",
          "932: static void",
          "933: latitude_base(gchar *buf, guint64 value) {",
          "934:  get_latitude_or_longitude(buf, 0, value);",
          "935: }",
          "937: static void",
          "938: longitude_base(gchar *buf, guint64 value) {",
          "939:  get_latitude_or_longitude(buf, 1, value);",
          "",
          "[Added Lines]",
          "927:  return wmem_strdup_printf(wmem_packet_scope(), \"%u.%04\" G_GINT64_MODIFIER \"u degrees %s\",",
          "928:      integerPortion, tempValue, direction);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2363:  guint8 subType;",
          "2364:  guint8 tempByte;",
          "2365:  guint32 LCI_Length;",
          "2367:  proto_tree *media_flags = NULL;",
          "2368:  proto_item *tf = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2355:  guint64 temp64bit = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2492:    proto_tree_add_item(tree, hf_media_loc_lat_resolution, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2497:    offset += 5;",
          "",
          "[Removed Lines]",
          "2495:    proto_tree_add_item(tree, hf_media_loc_lat, tvb, offset, 5, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "2485:    temp64bit = tvb_get_ntoh40(tvb, offset);",
          "2486:    temp64bit = temp64bit & G_GINT64_CONSTANT(0x03FFFFFFFF);",
          "2487:    if (tree)",
          "2488:     proto_tree_add_string_format_value(tree, hf_media_loc_lat, tvb, offset, 5, \"\", \"%s (0x%\" G_GINT64_MODIFIER \"X)\",",
          "2489:         get_latitude_or_longitude(0, temp64bit),",
          "2490:         temp64bit);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2500:    proto_tree_add_item(tree, hf_media_loc_long_resolution, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2505:    offset += 5;",
          "",
          "[Removed Lines]",
          "2503:    proto_tree_add_item(tree, hf_media_loc_long, tvb, offset, 5, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "2498:    temp64bit = tvb_get_ntoh40(tvb, offset);",
          "2499:    temp64bit = temp64bit & G_GINT64_CONSTANT(0x03FFFFFFFF);",
          "2500:    if (tree)",
          "2501:     proto_tree_add_string_format_value(tree, hf_media_loc_long, tvb, offset, 5, \"\", \"%s (0x%\" G_GINT64_MODIFIER \"X)\",",
          "2502:         get_latitude_or_longitude(1, temp64bit),",
          "2503:         temp64bit);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4143:    NULL, 0xFC, NULL, HFILL }",
          "4144:   },",
          "4145:   { &hf_media_loc_lat,",
          "4148:   },",
          "4149:   { &hf_media_loc_long_resolution,",
          "4150:    { \"Longitude Resolution\", \"lldp.media.loc.long_resolution\", FT_UINT8, BASE_DEC,",
          "4151:    NULL, 0xFC, NULL, HFILL }",
          "4152:   },",
          "4153:   { &hf_media_loc_long,",
          "4156:   },",
          "4157:   { &hf_media_loc_alt_type,",
          "4158:    { \"Altitude Type\", \"lldp.media.loc.alt_type\", FT_UINT8, BASE_DEC,",
          "",
          "[Removed Lines]",
          "4146:    { \"Latitude\", \"lldp.media.loc.latitude\", FT_UINT64, BASE_CUSTOM,",
          "4147:    latitude_base, 0x0, NULL, HFILL }",
          "4154:    { \"Longitude\", \"lldp.media.loc.longitude\", FT_UINT64, BASE_CUSTOM,",
          "4155:    longitude_base, 0x0, NULL, HFILL }",
          "",
          "[Added Lines]",
          "4146:    { \"Latitude\", \"lldp.media.loc.latitude\", FT_STRING, BASE_NONE,",
          "4147:    NULL, 0x0, NULL, HFILL }",
          "4154:    { \"Longitude\", \"lldp.media.loc.longitude\", FT_STRING, BASE_NONE,",
          "4155:    NULL, 0x0, NULL, HFILL }",
          "",
          "---------------"
        ],
        "epan/proto.c||epan/proto.c": [
          "File: epan/proto.c -> epan/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5401:     case BASE_OCT:",
          "5402:     case BASE_DEC_HEX:",
          "5403:     case BASE_HEX_DEC:",
          "5405:      break;",
          "5406:     default:",
          "5407:      g_error(\"Field '%s' (%s) is an integral value (%s)\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5404:      break;",
          "5406:      if (hfinfo->type == FT_INT64 ||",
          "5407:          hfinfo->type == FT_UINT64) {",
          "5409:       g_error(\"Field '%s' (%s) is a 64-bit field (%s) but is being displayed with BASE_CUSTOM\\n\",",
          "5410:        hfinfo->name, hfinfo->abbrev,",
          "5411:        ftype_name(hfinfo->type));",
          "5412:      }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6266:     return ptr;",
          "6268:    default:",
          "6271:   }",
          "6272:  return ptr;",
          "6273: }",
          "",
          "[Removed Lines]",
          "6269:     DISSECTOR_ASSERT_NOT_REACHED();",
          "6270:     ;",
          "",
          "[Added Lines]",
          "6278:     g_assert_not_reached();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6358:    format = \"0x%016\" G_GINT64_MODIFIER \"x (%\" G_GINT64_MODIFIER \"u)\";",
          "6359:    break;",
          "6360:   default:",
          "6363:  }",
          "6364:  return format;",
          "6365: }",
          "",
          "[Removed Lines]",
          "6361:    DISSECTOR_ASSERT_NOT_REACHED();",
          "6362:    ;",
          "",
          "[Added Lines]",
          "6369:    g_assert_not_reached();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6387:    format = \"0x%016\" G_GINT64_MODIFIER \"x (%\" G_GINT64_MODIFIER \"d)\";",
          "6388:    break;",
          "6389:   default:",
          "6392:  }",
          "6393:  return format;",
          "6394: }",
          "",
          "[Removed Lines]",
          "6390:    DISSECTOR_ASSERT_NOT_REACHED();",
          "6391:    ;",
          "",
          "[Added Lines]",
          "6397:    g_assert_not_reached();",
          "",
          "---------------"
        ]
      }
    }
  ]
}