{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "16d7e87caa1e02fabf6c226f1c0cf89c820c6a73",
      "candidate_info": {
        "commit_hash": "16d7e87caa1e02fabf6c226f1c0cf89c820c6a73",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/16d7e87caa1e02fabf6c226f1c0cf89c820c6a73",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Further simplifications to sqlite3VdbeMemSetStr().\n\nFossilOrigin-Name: 1d212957079a2caa30f3c9d80f43464781bc9634c2b5181a5814efbddae31711",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5c499da8a4d0babc56883aa362ae124772fd9214a51169a88a5dee523d051658",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1045:     assert( enc!=0 );",
          "1046:     if( enc==SQLITE_UTF8 ){",
          "1047:       nByte = 0x7fffffff & (int)strlen(z);",
          "1049:     }else{",
          "1050:       for(nByte=0; nByte<=iLimit && (z[nByte] | z[nByte+1]); nByte+=2){}",
          "1051:     }",
          "",
          "[Removed Lines]",
          "1048:       if( nByte>iLimit ) nByte = iLimit+1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1059:   if( xDel==SQLITE_TRANSIENT ){",
          "1061:     if( flags&MEM_Term ){",
          "1062:       nAlloc += (enc==SQLITE_UTF8?1:2);",
          "1063:     }",
          "",
          "[Removed Lines]",
          "1060:     int nAlloc = nByte;",
          "",
          "[Added Lines]",
          "1059:     u32 nAlloc = nByte;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1067:     testcase( nAlloc==0 );",
          "1068:     testcase( nAlloc==31 );",
          "1069:     testcase( nAlloc==32 );",
          "1071:       return SQLITE_NOMEM_BKPT;",
          "1072:     }",
          "1073:     memcpy(pMem->z, z, nAlloc);",
          "1078:   }else{",
          "1079:     sqlite3VdbeMemRelease(pMem);",
          "1080:     pMem->z = (char *)z;",
          "1083:   }",
          "1085:   pMem->n = nByte;",
          "",
          "[Removed Lines]",
          "1070:     if( sqlite3VdbeMemClearAndResize(pMem, MAX(nAlloc,32)) ){",
          "1074:   }else if( xDel==SQLITE_DYNAMIC ){",
          "1075:     sqlite3VdbeMemRelease(pMem);",
          "1076:     pMem->zMalloc = pMem->z = (char *)z;",
          "1077:     pMem->szMalloc = sqlite3DbMallocSize(pMem->db, pMem->zMalloc);",
          "1081:     pMem->xDel = xDel;",
          "1082:     flags |= ((xDel==SQLITE_STATIC)?MEM_Static:MEM_Dyn);",
          "",
          "[Added Lines]",
          "1069:     if( sqlite3VdbeMemClearAndResize(pMem, (int)MAX(nAlloc,32)) ){",
          "1076:     if( xDel==SQLITE_DYNAMIC ){",
          "1077:       pMem->zMalloc = pMem->z;",
          "1078:       pMem->szMalloc = sqlite3DbMallocSize(pMem->db, pMem->zMalloc);",
          "1079:     }else{",
          "1080:       pMem->xDel = xDel;",
          "1081:       flags |= ((xDel==SQLITE_STATIC)?MEM_Static:MEM_Dyn);",
          "1082:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a98b586c8f4c9b00e64d77668917ce8fc0304b9",
      "candidate_info": {
        "commit_hash": "2a98b586c8f4c9b00e64d77668917ce8fc0304b9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2a98b586c8f4c9b00e64d77668917ce8fc0304b9",
        "files": [
          "ext/misc/fossildelta.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Enhance the xBestIndex method on delta_parse() to return SQLITE_CONSTRAINT if no delta argument is supplied.\n\nFossilOrigin-Name: f16d127c3b4a735afae1fc236bcf90f31adff079c7d3a896f901d908ff8b8532",
        "before_after_code_files": [
          "ext/misc/fossildelta.c||ext/misc/fossildelta.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fossildelta.c||ext/misc/fossildelta.c": [
          "File: ext/misc/fossildelta.c -> ext/misc/fossildelta.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "974:   pIdxInfo->idxNum = 0;",
          "975:   pIdxInfo->estimatedCost = (double)0x7fffffff;",
          "976:   pIdxInfo->estimatedRows = 0x7fffffff;",
          "978: }",
          "",
          "[Removed Lines]",
          "977:   return SQLITE_OK;",
          "",
          "[Added Lines]",
          "977:   return SQLITE_CONSTRAINT;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d91fcc267bf1be795dfdb1fbfb40c2aea79ddff247a51d26462136c325b7a6d3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d446165f7d712dddbecb2f5eaeec418f019b4b7b",
      "candidate_info": {
        "commit_hash": "d446165f7d712dddbecb2f5eaeec418f019b4b7b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d446165f7d712dddbecb2f5eaeec418f019b4b7b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Minor optimization in sqlite3WindowCodeStep().\n\nFossilOrigin-Name: b1322ffb6e63a110998068bf4f0a903028bd4fc0464ae1e517d745fb46423f39",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 25ff7091cb12c63b1864ce68a9151f8432af5804b5ae905a2175761ab4b9fdd8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2154:   s.start.csr = s.current.csr+2;",
          "2155:   s.end.csr = s.current.csr+3;",
          "2157:   regNew = pParse->nMem+1;",
          "2158:   pParse->nMem += nInput;",
          "2159:   regRecord = ++pParse->nMem;",
          "2160:   regRowid = ++pParse->nMem;",
          "",
          "[Removed Lines]",
          "2161:   regFlushPart = ++pParse->nMem;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2203:     int regNewPart = regNew + pMWin->nBufferCol;",
          "2204:     KeyInfo *pKeyInfo = sqlite3KeyInfoFromExprList(pParse, pPart, 0, 0);",
          "2206:     addr = sqlite3VdbeAddOp3(v, OP_Compare, regNewPart, pMWin->regPart, nPart);",
          "2207:     sqlite3VdbeAppendP4(v, (void*)pKeyInfo, P4_KEYINFO);",
          "2208:     sqlite3VdbeAddOp3(v, OP_Jump, addr+2, addr+4, addr+2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2208:     regFlushPart = ++pParse->nMem;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc7a850f2e89e9cf6e893a6320ac9407f630f877",
      "candidate_info": {
        "commit_hash": "cc7a850f2e89e9cf6e893a6320ac9407f630f877",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cc7a850f2e89e9cf6e893a6320ac9407f630f877",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "Remove \"cache mode\" from the window frame code generator. Handle the same cases by editing the window frame specification itself.\n\nFossilOrigin-Name: 081263538332bb9c07e62630629007ccbba31bef5dc890f60b4ba58a355f70ac",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6bd1a07949ff3d394056bfcc813444401ef00806e3f0e0423ff6962541e84bdb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3581:   int regFirst;",
          "3583: };",
          "3585: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "[Removed Lines]",
          "3582:   int regSize;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:   sqlite3_value **apArg",
          "242: ){",
          "243:   struct CallCount *p;",
          "246:   p = (struct CallCount*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "247:   if( p ){",
          "255:   }",
          "256: }",
          "257: static void percent_rankValueFunc(sqlite3_context *pCtx){",
          "258:   struct CallCount *p;",
          "259:   p = (struct CallCount*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "260:   if( p ){",
          "261:     if( p->nTotal>1 ){",
          "263:       sqlite3_result_double(pCtx, r);",
          "264:     }else{",
          "265:       sqlite3_result_double(pCtx, 0.0);",
          "266:     }",
          "268:   }",
          "269: }",
          "277: static void cume_distStepFunc(",
          "278:   sqlite3_context *pCtx,",
          "",
          "[Removed Lines]",
          "244:   UNUSED_PARAMETER(nArg); assert( nArg==1 );",
          "248:     if( p->nTotal==0 ){",
          "249:       p->nTotal = sqlite3_value_int64(apArg[0]);",
          "250:     }",
          "251:     p->nStep++;",
          "252:     if( p->nValue==0 ){",
          "253:       p->nValue = p->nStep;",
          "254:     }",
          "262:       double r = (double)(p->nValue-1) / (double)(p->nTotal-1);",
          "267:     p->nValue = 0;",
          "",
          "[Added Lines]",
          "244:   UNUSED_PARAMETER(nArg); assert( nArg==0 );",
          "247:     p->nTotal++;",
          "250: static void percent_rankInvFunc(",
          "251:   sqlite3_context *pCtx,",
          "252:   int nArg,",
          "253:   sqlite3_value **apArg",
          "254: ){",
          "255:   struct CallCount *p;",
          "256:   UNUSED_PARAMETER(nArg); assert( nArg==0 );",
          "257:   p = (struct CallCount*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "258:   p->nStep++;",
          "259: }",
          "264:     p->nValue = p->nStep;",
          "266:       double r = (double)p->nValue / (double)(p->nTotal-1);",
          "273: #define percent_rankFinalizeFunc percent_rankValueFunc",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "280:   sqlite3_value **apArg",
          "281: ){",
          "282:   struct CallCount *p;",
          "285:   p = (struct CallCount*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "286:   if( p ){",
          "291:   }",
          "292: }",
          "293: static void cume_distValueFunc(sqlite3_context *pCtx){",
          "294:   struct CallCount *p;",
          "295:   p = (struct CallCount*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "",
          "[Removed Lines]",
          "283:   assert( nArg==1 ); UNUSED_PARAMETER(nArg);",
          "287:     if( p->nTotal==0 ){",
          "288:       p->nTotal = sqlite3_value_int64(apArg[0]);",
          "289:     }",
          "290:     p->nStep++;",
          "",
          "[Added Lines]",
          "287:   UNUSED_PARAMETER(nArg); assert( nArg==0 );",
          "290:     p->nTotal++;",
          "293: static void cume_distInvFunc(",
          "294:   sqlite3_context *pCtx,",
          "295:   int nArg,",
          "296:   sqlite3_value **apArg",
          "297: ){",
          "298:   struct CallCount *p;",
          "299:   UNUSED_PARAMETER(nArg); assert( nArg==0 );",
          "300:   p = (struct CallCount*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "301:   p->nStep++;",
          "302: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "298:     sqlite3_result_double(pCtx, r);",
          "299:   }",
          "300: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311: #define cume_distFinalizeFunc cume_distValueFunc",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "320:   sqlite3_value **apArg",
          "321: ){",
          "322:   struct NtileCtx *p;",
          "324:   p = (struct NtileCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "325:   if( p ){",
          "326:     if( p->nTotal==0 ){",
          "327:       p->nParam = sqlite3_value_int64(apArg[0]);",
          "329:       if( p->nParam<=0 ){",
          "330:         sqlite3_result_error(",
          "331:             pCtx, \"argument of ntile must be a positive integer\", -1",
          "332:         );",
          "333:       }",
          "334:     }",
          "336:   }",
          "337: }",
          "338: static void ntileValueFunc(sqlite3_context *pCtx){",
          "339:   struct NtileCtx *p;",
          "340:   p = (struct NtileCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "341:   if( p && p->nParam>0 ){",
          "342:     int nSize = (p->nTotal / p->nParam);",
          "343:     if( nSize==0 ){",
          "345:     }else{",
          "346:       i64 nLarge = p->nTotal - p->nParam*nSize;",
          "347:       i64 iSmall = nLarge*(nSize+1);",
          "350:       assert( (nLarge*(nSize+1) + (p->nParam-nLarge)*nSize)==p->nTotal );",
          "",
          "[Removed Lines]",
          "323:   assert( nArg==2 ); UNUSED_PARAMETER(nArg);",
          "328:       p->nTotal = sqlite3_value_int64(apArg[1]);",
          "335:     p->iRow++;",
          "344:       sqlite3_result_int64(pCtx, p->iRow);",
          "348:       i64 iRow = p->iRow-1;",
          "",
          "[Added Lines]",
          "334:   assert( nArg==1 ); UNUSED_PARAMETER(nArg);",
          "345:     p->nTotal++;",
          "348: static void ntileInvFunc(",
          "349:   sqlite3_context *pCtx,",
          "350:   int nArg,",
          "351:   sqlite3_value **apArg",
          "352: ){",
          "353:   struct NtileCtx *p;",
          "354:   assert( nArg==1 ); UNUSED_PARAMETER(nArg);",
          "355:   p = (struct NtileCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "356:   p->iRow++;",
          "357: }",
          "364:       sqlite3_result_int64(pCtx, p->iRow+1);",
          "368:       i64 iRow = p->iRow;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "357:     }",
          "358:   }",
          "359: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "380: #define ntileFinalizeFunc ntileValueFunc",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "496:     WINDOWFUNCX(row_number, 0, 0),",
          "497:     WINDOWFUNCX(dense_rank, 0, 0),",
          "498:     WINDOWFUNCX(rank, 0, 0),",
          "502:     WINDOWFUNCALL(last_value, 1, 0),",
          "503:     WINDOWFUNCNOOP(nth_value, 2, 0),",
          "504:     WINDOWFUNCNOOP(first_value, 1, 0),",
          "",
          "[Removed Lines]",
          "499:     WINDOWFUNCX(percent_rank, 0, SQLITE_FUNC_WINDOW_SIZE),",
          "500:     WINDOWFUNCX(cume_dist, 0, SQLITE_FUNC_WINDOW_SIZE),",
          "501:     WINDOWFUNCX(ntile, 1, SQLITE_FUNC_WINDOW_SIZE),",
          "",
          "[Added Lines]",
          "521:     WINDOWFUNCALL(percent_rank, 0, 0),",
          "522:     WINDOWFUNCALL(cume_dist, 0, 0),",
          "523:     WINDOWFUNCALL(ntile, 1, 0),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "573:       sqlite3ErrorMsg(pParse,",
          "574:           \"FILTER clause may only be used with aggregate window functions\"",
          "575:       );",
          "595:     }",
          "596:   }",
          "597:   pWin->pFunc = pFunc;",
          "",
          "[Removed Lines]",
          "576:     }else",
          "577:     if( pFunc->zName==row_numberName || pFunc->zName==ntileName ){",
          "578:       sqlite3ExprDelete(db, pWin->pStart);",
          "579:       sqlite3ExprDelete(db, pWin->pEnd);",
          "580:       pWin->pStart = pWin->pEnd = 0;",
          "581:       pWin->eType = TK_ROWS;",
          "582:       pWin->eStart = TK_UNBOUNDED;",
          "583:       pWin->eEnd = TK_CURRENT;",
          "584:     }else",
          "586:     if( pFunc->zName==dense_rankName || pFunc->zName==rankName",
          "587:      || pFunc->zName==percent_rankName || pFunc->zName==cume_distName",
          "588:     ){",
          "589:       sqlite3ExprDelete(db, pWin->pStart);",
          "590:       sqlite3ExprDelete(db, pWin->pEnd);",
          "591:       pWin->pStart = pWin->pEnd = 0;",
          "592:       pWin->eType = TK_RANGE;",
          "593:       pWin->eStart = TK_UNBOUNDED;",
          "594:       pWin->eEnd = TK_CURRENT;",
          "",
          "[Added Lines]",
          "600:     }else{",
          "601:       struct WindowUpdate {",
          "602:         const char *zFunc;",
          "603:         int eType;",
          "604:         int eStart;",
          "605:         int eEnd;",
          "606:       } aUp[] = {",
          "607:         { row_numberName,   TK_ROWS,   TK_UNBOUNDED, TK_CURRENT },",
          "608:         { dense_rankName,   TK_RANGE,  TK_UNBOUNDED, TK_CURRENT },",
          "609:         { rankName,         TK_RANGE,  TK_UNBOUNDED, TK_CURRENT },",
          "610:         { percent_rankName, TK_GROUPS, TK_CURRENT,   TK_UNBOUNDED },",
          "611:         { cume_distName,    TK_GROUPS, TK_FOLLOWING, TK_UNBOUNDED },",
          "612:         { ntileName,        TK_ROWS,   TK_CURRENT,   TK_UNBOUNDED },",
          "613:         { leadName,         TK_ROWS,   TK_UNBOUNDED, TK_UNBOUNDED },",
          "614:       };",
          "615:       int i;",
          "616:       for(i=0; i<ArraySize(aUp); i++){",
          "617:         if( pFunc->zName==aUp[i].zFunc ){",
          "618:           sqlite3ExprDelete(db, pWin->pStart);",
          "619:           sqlite3ExprDelete(db, pWin->pEnd);",
          "620:           pWin->pEnd = pWin->pStart = 0;",
          "621:           pWin->eType = aUp[i].eType;",
          "622:           pWin->eStart = aUp[i].eStart;",
          "623:           pWin->eEnd = aUp[i].eEnd;",
          "624:           if( pWin->eStart==TK_FOLLOWING ){",
          "625:             pWin->pStart = sqlite3Expr(db, TK_INTEGER, \"1\");",
          "626:           }",
          "627:           break;",
          "628:         }",
          "629:       }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1093:   pMWin->regFirst = ++pParse->nMem;",
          "1094:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "1098:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1099:     FuncDef *p = pWin->pFunc;",
          "",
          "[Removed Lines]",
          "1095:   pMWin->regSize = ++pParse->nMem;",
          "1096:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regSize);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1206:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1207:   Window *pWin;",
          "1208:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1210:     int regArg;",
          "1211:     int nArg = windowArgCount(pWin);",
          "",
          "[Removed Lines]",
          "1209:     int flags = pWin->pFunc->funcFlags;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1216:         sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol+i, reg+i);",
          "1217:       }",
          "1218:       regArg = reg;",
          "1227:     }else{",
          "1229:       regArg = reg + pWin->iArgCol;",
          "1230:     }",
          "",
          "[Removed Lines]",
          "1219:       if( flags & SQLITE_FUNC_WINDOW_SIZE ){",
          "1220:         if( nArg==0 ){",
          "1221:           regArg = regPartSize;",
          "1222:         }else{",
          "1223:           sqlite3VdbeAddOp2(v, OP_SCopy, regPartSize, reg+nArg);",
          "1224:         }",
          "1225:         nArg++;",
          "1226:       }",
          "1228:       assert( !(flags & SQLITE_FUNC_WINDOW_SIZE) );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1440:   return regArg;",
          "1441: }",
          "1448:   Window *pWin;",
          "1449:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1450:     FuncDef *pFunc = pWin->pFunc;",
          "1453:      || (pFunc->zName==first_valueName)",
          "1455:      || (pFunc->zName==lagName)",
          "1456:     ){",
          "1457:       return 1;",
          "",
          "[Removed Lines]",
          "1447: static int windowCachePartition(Window *pMWin){",
          "1451:     if( (pFunc->funcFlags & SQLITE_FUNC_WINDOW_SIZE)",
          "1452:      || (pFunc->zName==nth_valueName)",
          "1454:      || (pFunc->zName==leadName)",
          "",
          "[Added Lines]",
          "1466: #if 0",
          "1471: static int windowCacheFrame(Window *pMWin){",
          "1475:     if( (pFunc->zName==nth_valueName)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1459:   }",
          "1460:   return 0;",
          "1461: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1485: #endif",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1659:     case WINDOW_AGGINVERSE:",
          "1660:       csr = p->start.csr;",
          "1661:       reg = p->start.reg;",
          "1663:       break;",
          "1665:     case WINDOW_AGGSTEP:",
          "1666:       csr = p->end.csr;",
          "1667:       reg = p->end.reg;",
          "1669:       break;",
          "1670:   }",
          "",
          "[Removed Lines]",
          "1662:       windowAggStep(pParse, pMWin, csr, 1, p->regArg, pMWin->regSize);",
          "1668:       windowAggStep(pParse, pMWin, csr, 0, p->regArg, pMWin->regSize);",
          "",
          "[Added Lines]",
          "1686:       windowAggStep(pParse, pMWin, csr, 1, p->regArg, 0);",
          "1692:       windowAggStep(pParse, pMWin, csr, 0, p->regArg, 0);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1992:   memset(&s, 0, sizeof(WindowCodeArg));",
          "",
          "[Removed Lines]",
          "1989:   bCache = windowCachePartition(pMWin);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2062:   sqlite3VdbeAddOp2(v, OP_NewRowid, csrWrite, regRowid);",
          "2063:   sqlite3VdbeAddOp3(v, OP_Insert, csrWrite, regRecord, regRowid);",
          "2079:   s.regArg = windowInitAccum(pParse, pMWin);",
          "",
          "[Removed Lines]",
          "2064:   sqlite3VdbeAddOp2(v, OP_AddImm, pMWin->regSize, 1);",
          "2066:   if( bCache ){",
          "2067:     sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regFirst);",
          "2068:     sqlite3WhereEnd(pWInfo);",
          "2069:     addrInteger = sqlite3VdbeAddOp2(v, OP_Integer, 0, regFlushPart);",
          "2070:     if( pMWin->pPartition ){",
          "2071:       sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "2072:     }",
          "2073:     addrCacheRewind = sqlite3VdbeAddOp1(v, OP_Rewind, csrWrite);",
          "2074:   }else{",
          "2075:     addrIfNot = sqlite3VdbeAddOp1(v, OP_IfNot, pMWin->regFirst);",
          "2076:   }",
          "",
          "[Added Lines]",
          "2065:   addrIfNot = sqlite3VdbeAddOp1(v, OP_IfNot, pMWin->regFirst);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2091:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2092:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "2093:     windowAggFinal(pParse, pMWin, 0);",
          "2104:     addrShortcut = sqlite3VdbeAddOp0(v, OP_Goto);",
          "2105:     sqlite3VdbeJumpHere(v, addrGe);",
          "2106:   }",
          "",
          "[Removed Lines]",
          "2094:     if( bCache ){",
          "2095:       sqlite3VdbeAddOp2(v, OP_Rowid, csrWrite, regRowid);",
          "2096:       sqlite3VdbeAddOp3(v, OP_NotExists, s.current.csr, 0, regRowid);",
          "2097:       windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2098:       sqlite3VdbeAddOp2(v, OP_Next, csrWrite, addrCacheRewind+1);",
          "2099:     }else{",
          "2100:       sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2101:       windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2102:       sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "2103:     }",
          "",
          "[Added Lines]",
          "2083:     sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2084:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2085:     sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2115:   sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2116:   sqlite3VdbeAddOp2(v, OP_Rewind, s.end.csr, 1);",
          "2117:   if( regPeer && pOrderBy ){",
          "2123:     sqlite3VdbeAddOp3(v, OP_Copy, regPeer, s.start.reg, pOrderBy->nExpr-1);",
          "2124:     sqlite3VdbeAddOp3(v, OP_Copy, regPeer, s.current.reg, pOrderBy->nExpr-1);",
          "2125:     sqlite3VdbeAddOp3(v, OP_Copy, regPeer, s.end.reg, pOrderBy->nExpr-1);",
          "",
          "[Removed Lines]",
          "2118:     if( bCache ){",
          "2119:       windowReadPeerValues(&s, csrWrite, regPeer);",
          "2120:     }else{",
          "2121:       sqlite3VdbeAddOp3(v, OP_Copy, regNewPeer, regPeer, pOrderBy->nExpr-1);",
          "2122:     }",
          "",
          "[Added Lines]",
          "2100:     sqlite3VdbeAddOp3(v, OP_Copy, regNewPeer, regPeer, pOrderBy->nExpr-1);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2132:   VdbeModuleComment((pParse->pVdbe, \"Begin WindowCodeStep.SECOND_ROW\"));",
          "2141:   if( regPeer ){",
          "2142:     addrPeerJump = windowIfNewPeer(pParse, pOrderBy, regNewPeer, regPeer);",
          "2143:   }",
          "",
          "[Removed Lines]",
          "2133:   if( bCache ){",
          "2134:     addrCacheNext = sqlite3VdbeCurrentAddr(v);",
          "2135:     if( pMWin->eType!=TK_ROWS ){",
          "2136:       windowReadPeerValues(&s, csrWrite, regNewPeer);",
          "2137:     }",
          "2138:   }else{",
          "2139:     sqlite3VdbeJumpHere(v, addrIfNot);",
          "2140:   }",
          "",
          "[Added Lines]",
          "2111:   sqlite3VdbeJumpHere(v, addrIfNot);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2196:   sqlite3VdbeJumpHere(v, addrGoto);",
          "2207:     addrInteger = sqlite3VdbeAddOp2(v, OP_Integer, 0, regFlushPart);",
          "2208:     sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "2209:   }",
          "",
          "[Removed Lines]",
          "2197:   if( bCache ){",
          "2198:     sqlite3VdbeAddOp2(v, OP_Next, csrWrite, addrCacheNext);",
          "2199:     sqlite3VdbeJumpHere(v, addrCacheRewind);",
          "2200:   }else{",
          "2201:     if( addrShortcut>0 ) sqlite3VdbeJumpHere(v, addrShortcut);",
          "2202:     sqlite3WhereEnd(pWInfo);",
          "2203:   }",
          "2206:   if( pMWin->pPartition && bCache==0 ){",
          "",
          "[Added Lines]",
          "2168:   if( addrShortcut>0 ) sqlite3VdbeJumpHere(v, addrShortcut);",
          "2169:   sqlite3WhereEnd(pWInfo);",
          "2172:   if( pMWin->pPartition ){",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2255:   sqlite3VdbeJumpHere(v, addrEmpty);",
          "2258:   sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "2261:   VdbeModuleComment((pParse->pVdbe, \"End WindowCodeStep.FLUSH\"));",
          "2262:   if( pMWin->pPartition ){",
          "2263:     sqlite3VdbeChangeP1(v, addrInteger, sqlite3VdbeCurrentAddr(v));",
          "",
          "[Removed Lines]",
          "2257:   if( bCache && addrShortcut>0 ) sqlite3VdbeJumpHere(v, addrShortcut);",
          "2259:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regSize);",
          "2260:   if( bCache==0 ) sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "",
          "[Added Lines]",
          "2224:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "818a3b548647d7a314771f455c93be5ff6440047",
      "candidate_info": {
        "commit_hash": "818a3b548647d7a314771f455c93be5ff6440047",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/818a3b548647d7a314771f455c93be5ff6440047",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteInt.h"
        ],
        "message": "Fix sqlite3ExprCompare() so that it ignores differences in the Expr.iTable field for IN operators, as otherwise it can lead to false negatives, which is usually harmless, but can cause problems for an assert() in the window function logic.\n\nFossilOrigin-Name: 6a204b192a6c6f21988cab217366f21b14c672b81ceadc43675761a6d8c4484f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 352878fe1cbcf7b6803624544bba5a95565d1638d4dd09e91764ddad17889301",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4957:       if( pA->iColumn!=pB->iColumn ) return 2;",
          "4958:       if( pA->op2!=pB->op2 ) return 2;",
          "4959:       if( pA->iTable!=pB->iTable",
          "4960:        && (pA->iTable!=iTab || NEVER(pB->iTable>=0)) ) return 2;",
          "4961:     }",
          "4962:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4960:        && pA->op!=TK_IN",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    }
  ]
}