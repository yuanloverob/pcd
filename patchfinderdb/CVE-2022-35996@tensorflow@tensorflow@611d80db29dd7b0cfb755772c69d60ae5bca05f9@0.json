{
  "cve_id": "CVE-2022-35996",
  "cve_desc": "TensorFlow is an open source platform for machine learning. If `Conv2D` is given empty `input` and the `filter` and `padding` sizes are valid, the output is all-zeros. This causes division-by-zero floating point exceptions that can be used to trigger a denial of service attack. We have patched the issue in GitHub commit 611d80db29dd7b0cfb755772c69d60ae5bca05f9. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "611d80db29dd7b0cfb755772c69d60ae5bca05f9",
  "patch_info": {
    "commit_hash": "611d80db29dd7b0cfb755772c69d60ae5bca05f9",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/611d80db29dd7b0cfb755772c69d60ae5bca05f9",
    "files": [
      "tensorflow/core/kernels/conv_ops.cc",
      "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py"
    ],
    "message": "Fix conv2d crash when input size is empty.\n\nIf the input is empty (so convolution is only applied to padding), and if\nthe filter and padding sizes are still valid, then the output will be\nall-zeros.  This previously caused a division-by-zero crash in multiple\nkernels.\n\nPiperOrigin-RevId: 463179650",
    "before_after_code_files": [
      "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc",
      "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py||tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc": [
      "File: tensorflow/core/kernels/conv_ops.cc -> tensorflow/core/kernels/conv_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "44: #include \"tensorflow/core/framework/types.h\"",
      "45: #include \"tensorflow/core/kernels/conv_2d.h\"",
      "46: #include \"tensorflow/core/kernels/deep_conv2d.h\"",
      "47: #include \"tensorflow/core/kernels/ops_util.h\"",
      "48: #include \"tensorflow/core/lib/core/errors.h\"",
      "49: #include \"tensorflow/core/lib/gtl/array_slice.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47: #include \"tensorflow/core/kernels/fill_functor.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "701:       return;",
      "702:     }",
      "704: #ifdef TENSORFLOW_USE_LIBXSMM_CONVOLUTIONS",
      "705:     if (params_.padding != EXPLICIT &&",
      "706:         LaunchXsmmConvOp<Device, T>::Run(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "706:     if (input.NumElements() == 0) {",
      "708:       functor::SetZeroFunctor<Device, T>()(context->eigen_device<Device>(),",
      "709:                                            output->template flat<T>());",
      "711:       return;",
      "712:     }",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py||tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py": [
      "File: tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py -> tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "759:         padding=[[2, 1], [1, 2]],",
      "760:         dilations=[2, 3])",
      "762:   def testConv2DExplicitPaddingWithLayoutOptimizer(self):",
      "763:     # Test with Grappler's layout optimizer, to ensure the layout optimizer",
      "764:     # handles explicit padding correctly.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "762:   @test_util.run_in_graph_and_eager_modes()",
      "763:   def testConv2dOnlyPaddingReturnsZeros(self):",
      "764:     self._VerifyValues(",
      "765:         tensor_in_sizes=[1, 0, 2, 1],",
      "766:         filter_in_sizes=[1, 1, 1, 1],",
      "767:         strides=[1, 1],",
      "768:         padding=[[1, 1], [1, 1]],",
      "769:         expected=[0, 0, 0, 0, 0, 0, 0, 0])",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b818dc4d1187e9fd0991af618b7bcdfd68066108",
      "candidate_info": {
        "commit_hash": "b818dc4d1187e9fd0991af618b7bcdfd68066108",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/b818dc4d1187e9fd0991af618b7bcdfd68066108",
        "files": [
          "tensorflow/core/kernels/conv_ops.cc",
          "tensorflow/python/kernel_tests/conv_ops_test.py"
        ],
        "message": "Fix conv2d crash when input size is empty.\n\nIf the input is empty (so convolution is only applied to padding), and if\nthe filter and padding sizes are still valid, then the output will be\nall-zeros.  This previously caused a division-by-zero crash in multiple\nkernels.\n\nPiperOrigin-RevId: 463179650",
        "before_after_code_files": [
          "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc",
          "tensorflow/python/kernel_tests/conv_ops_test.py||tensorflow/python/kernel_tests/conv_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc": [
          "File: tensorflow/core/kernels/conv_ops.cc -> tensorflow/core/kernels/conv_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #include \"tensorflow/core/framework/types.h\"",
          "44: #include \"tensorflow/core/kernels/conv_2d.h\"",
          "45: #include \"tensorflow/core/kernels/deep_conv2d.h\"",
          "46: #include \"tensorflow/core/kernels/ops_util.h\"",
          "47: #include \"tensorflow/core/lib/core/errors.h\"",
          "48: #include \"tensorflow/core/lib/gtl/array_slice.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: #include \"tensorflow/core/kernels/fill_functor.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "700:       return;",
          "701:     }",
          "703: #ifdef TENSORFLOW_USE_LIBXSMM_CONVOLUTIONS",
          "704:     if (params_.padding != EXPLICIT &&",
          "705:         LaunchXsmmConvOp<Device, T>::Run(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "705:     if (input.NumElements() == 0) {",
          "707:       functor::SetZeroFunctor<Device, T>()(context->eigen_device<Device>(),",
          "708:                                            output->template flat<T>());",
          "710:       return;",
          "711:     }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/conv_ops_test.py||tensorflow/python/kernel_tests/conv_ops_test.py": [
          "File: tensorflow/python/kernel_tests/conv_ops_test.py -> tensorflow/python/kernel_tests/conv_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "763:         padding=[[2, 1], [1, 2]],",
          "764:         dilations=[2, 3])",
          "766:   def testConv2DExplicitPaddingWithLayoutOptimizer(self):",
          "767:     # Test with Grappler's layout optimizer, to ensure the layout optimizer",
          "768:     # handles explicit padding correctly.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "766:   @test_util.run_in_graph_and_eager_modes()",
          "767:   def testConv2dOnlyPaddingReturnsZeros(self):",
          "768:     self._VerifyValues(",
          "769:         tensor_in_sizes=[1, 0, 2, 1],",
          "770:         filter_in_sizes=[1, 1, 1, 1],",
          "771:         strides=[1, 1],",
          "772:         padding=[[1, 1], [1, 1]],",
          "773:         expected=[0, 0, 0, 0, 0, 0, 0, 0])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57a0eaab86d95d8bf23ff8e75359d1e35fce0324",
      "candidate_info": {
        "commit_hash": "57a0eaab86d95d8bf23ff8e75359d1e35fce0324",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/57a0eaab86d95d8bf23ff8e75359d1e35fce0324",
        "files": [
          "tensorflow/core/kernels/conv_ops.cc",
          "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py"
        ],
        "message": "Fix conv2d crash when input size is empty.\n\nIf the input is empty (so convolution is only applied to padding), and if\nthe filter and padding sizes are still valid, then the output will be\nall-zeros.  This previously caused a division-by-zero crash in multiple\nkernels.\n\nPiperOrigin-RevId: 463179650",
        "before_after_code_files": [
          "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc",
          "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py||tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc",
            "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py||tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc",
            "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py||tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc": [
          "File: tensorflow/core/kernels/conv_ops.cc -> tensorflow/core/kernels/conv_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #include \"tensorflow/core/framework/types.h\"",
          "44: #include \"tensorflow/core/kernels/conv_2d.h\"",
          "45: #include \"tensorflow/core/kernels/deep_conv2d.h\"",
          "46: #include \"tensorflow/core/kernels/ops_util.h\"",
          "47: #include \"tensorflow/core/lib/core/errors.h\"",
          "48: #include \"tensorflow/core/lib/gtl/array_slice.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: #include \"tensorflow/core/kernels/fill_functor.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "700:       return;",
          "701:     }",
          "703: #ifdef TENSORFLOW_USE_LIBXSMM_CONVOLUTIONS",
          "704:     if (params_.padding != EXPLICIT &&",
          "705:         LaunchXsmmConvOp<Device, T>::Run(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "705:     if (input.NumElements() == 0) {",
          "707:       functor::SetZeroFunctor<Device, T>()(context->eigen_device<Device>(),",
          "708:                                            output->template flat<T>());",
          "710:       return;",
          "711:     }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py||tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py -> tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "759:         padding=[[2, 1], [1, 2]],",
          "760:         dilations=[2, 3])",
          "762:   def testConv2DExplicitPaddingWithLayoutOptimizer(self):",
          "763:     # Test with Grappler's layout optimizer, to ensure the layout optimizer",
          "764:     # handles explicit padding correctly.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "762:   @test_util.run_in_graph_and_eager_modes()",
          "763:   def testConv2dOnlyPaddingReturnsZeros(self):",
          "764:     self._VerifyValues(",
          "765:         tensor_in_sizes=[1, 0, 2, 1],",
          "766:         filter_in_sizes=[1, 1, 1, 1],",
          "767:         strides=[1, 1],",
          "768:         padding=[[1, 1], [1, 1]],",
          "769:         expected=[0, 0, 0, 0, 0, 0, 0, 0])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64e569c80dd7e23b2ee0d02cfb74a7d6f60cbde5",
      "candidate_info": {
        "commit_hash": "64e569c80dd7e23b2ee0d02cfb74a7d6f60cbde5",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/64e569c80dd7e23b2ee0d02cfb74a7d6f60cbde5",
        "files": [
          "tensorflow/core/kernels/conv_ops.cc",
          "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py"
        ],
        "message": "Fix conv2d crash when input size is empty.\n\nIf the input is empty (so convolution is only applied to padding), and if\nthe filter and padding sizes are still valid, then the output will be\nall-zeros.  This previously caused a division-by-zero crash in multiple\nkernels.\n\nPiperOrigin-RevId: 463179650",
        "before_after_code_files": [
          "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc",
          "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py||tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc",
            "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py||tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc",
            "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py||tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc": [
          "File: tensorflow/core/kernels/conv_ops.cc -> tensorflow/core/kernels/conv_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #include \"tensorflow/core/framework/types.h\"",
          "44: #include \"tensorflow/core/kernels/conv_2d.h\"",
          "45: #include \"tensorflow/core/kernels/deep_conv2d.h\"",
          "46: #include \"tensorflow/core/kernels/ops_util.h\"",
          "47: #include \"tensorflow/core/lib/core/errors.h\"",
          "48: #include \"tensorflow/core/lib/gtl/array_slice.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: #include \"tensorflow/core/kernels/fill_functor.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "700:       return;",
          "701:     }",
          "703: #ifdef TENSORFLOW_USE_LIBXSMM_CONVOLUTIONS",
          "704:     if (params_.padding != EXPLICIT &&",
          "705:         LaunchXsmmConvOp<Device, T>::Run(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "705:     if (input.NumElements() == 0) {",
          "707:       functor::SetZeroFunctor<Device, T>()(context->eigen_device<Device>(),",
          "708:                                            output->template flat<T>());",
          "710:       return;",
          "711:     }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py||tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py -> tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "759:         padding=[[2, 1], [1, 2]],",
          "760:         dilations=[2, 3])",
          "762:   def testConv2DExplicitPaddingWithLayoutOptimizer(self):",
          "763:     # Test with Grappler's layout optimizer, to ensure the layout optimizer",
          "764:     # handles explicit padding correctly.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "762:   @test_util.run_in_graph_and_eager_modes()",
          "763:   def testConv2dOnlyPaddingReturnsZeros(self):",
          "764:     self._VerifyValues(",
          "765:         tensor_in_sizes=[1, 0, 2, 1],",
          "766:         filter_in_sizes=[1, 1, 1, 1],",
          "767:         strides=[1, 1],",
          "768:         padding=[[1, 1], [1, 1]],",
          "769:         expected=[0, 0, 0, 0, 0, 0, 0, 0])",
          "",
          "---------------"
        ]
      }
    }
  ]
}