{
  "cve_id": "CVE-2022-0139",
  "cve_desc": "Use After Free in GitHub repository radareorg/radare2 prior to 5.6.0.",
  "repo": "radareorg/radare2",
  "patch_hash": "37897226a1a31f982bfefdc4aeefc2e50355c73c",
  "patch_info": {
    "commit_hash": "37897226a1a31f982bfefdc4aeefc2e50355c73c",
    "repo": "radareorg/radare2",
    "commit_url": "https://github.com/radareorg/radare2/commit/37897226a1a31f982bfefdc4aeefc2e50355c73c",
    "files": [
      "libr/io/io_bank.c"
    ],
    "message": "Fix use-after-free in iobank rbtree usage ##io\n\n* See havoc4 bin for reproducer\n* Reported via huntr.dev by 'Cen Zhang'",
    "before_after_code_files": [
      "libr/io/io_bank.c||libr/io/io_bank.c"
    ]
  },
  "patch_diff": {
    "libr/io/io_bank.c||libr/io/io_bank.c": [
      "File: libr/io/io_bank.c -> libr/io/io_bank.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "231:   RRBNode *next = r_rbnode_next (entry);",
      "234:   entry = next;",
      "235:  }",
      "236:  if (entry && r_io_submap_from (((RIOSubMap *)entry->data)) <= r_io_submap_to (sm)) {",
      "",
      "[Removed Lines]",
      "233:   r_crbtree_delete (bank->submaps, entry->data, _find_sm_by_from_vaddr_cb, NULL);",
      "",
      "[Added Lines]",
      "233:   bool a = r_crbtree_delete (bank->submaps, entry->data, _find_sm_by_from_vaddr_cb, NULL);",
      "234:   if (!a) {",
      "235:    break;",
      "236:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "194815a99aae2d7a31966351049699f4d3415cdf",
      "candidate_info": {
        "commit_hash": "194815a99aae2d7a31966351049699f4d3415cdf",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/194815a99aae2d7a31966351049699f4d3415cdf",
        "files": [
          "libr/include/r_io.h",
          "libr/io/io_bank.c"
        ],
        "message": "Use new rbtree API in io_bank.c ##io",
        "before_after_code_files": [
          "libr/include/r_io.h||libr/include/r_io.h",
          "libr/io/io_bank.c||libr/io/io_bank.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/io/io_bank.c||libr/io/io_bank.c"
          ],
          "candidate": [
            "libr/io/io_bank.c||libr/io/io_bank.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/include/r_io.h||libr/include/r_io.h": [
          "File: libr/include/r_io.h -> libr/include/r_io.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "222: typedef struct r_io_bank_t {",
          "223:  char *name;",
          "225:  RList *maprefs; // references to maps, avoid double-free and dups",
          "226:  RQueue *todo; // needed for operating on submap tree",
          "227:  ut32 id; // for fast selection with RIDStorage",
          "",
          "[Removed Lines]",
          "224:  RContRBTree *submaps;",
          "",
          "[Added Lines]",
          "224:  RRBTree *submaps;",
          "",
          "---------------"
        ],
        "libr/io/io_bank.c||libr/io/io_bank.c": [
          "File: libr/io/io_bank.c -> libr/io/io_bank.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:   return NULL;",
          "13:  }",
          "14:  bank->name = strdup (name);",
          "16:  if (!bank->submaps) {",
          "17:   free (bank);",
          "18:   return NULL;",
          "19:  }",
          "20:  bank->maprefs = r_list_newf (free);",
          "21:  if (!bank->maprefs) {",
          "23:   free (bank);",
          "24:   return NULL;",
          "25:  }",
          "26:  bank->todo = r_queue_new (8);",
          "27:  if (!bank->todo) {",
          "28:   r_list_free (bank->maprefs);",
          "30:   free (bank);",
          "31:   return NULL;",
          "32:  }",
          "",
          "[Removed Lines]",
          "15:  bank->submaps = r_rbtree_cont_newf (free);",
          "22:   r_rbtree_cont_free (bank->submaps);",
          "29:   r_rbtree_cont_free (bank->submaps);",
          "",
          "[Added Lines]",
          "15:  bank->submaps = r_crbtree_new (free);",
          "22:   r_crbtree_free (bank->submaps);",
          "29:   r_crbtree_free (bank->submaps);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:  }",
          "40:  r_queue_free (bank->todo);",
          "41:  r_list_free (bank->maprefs);",
          "43:  free (bank->name);",
          "44:  free (bank);",
          "45: }",
          "",
          "[Removed Lines]",
          "42:  r_rbtree_cont_free (bank->submaps);",
          "",
          "[Added Lines]",
          "42:  r_crbtree_free (bank->submaps);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137: }",
          "142:  if (!node) {",
          "143:   return NULL;",
          "144:  }",
          "146:  while (prev && r_io_submap_overlap (((RIOSubMap *)prev->data), sm)) {",
          "147:   node = prev;",
          "149:  }",
          "150:  return node;",
          "151: }",
          "",
          "[Removed Lines]",
          "140: static RContRBNode *_find_entry_submap_node(RIOBank *bank, RIOSubMap *sm) {",
          "141:  RContRBNode *node = r_rbtree_cont_find_node (bank->submaps, sm, _find_lowest_intersection_sm_cb, NULL);",
          "145:  RContRBNode *prev = r_rbtree_cont_node_prev (node);",
          "148:   prev = r_rbtree_cont_node_prev (node);",
          "",
          "[Added Lines]",
          "140: static RRBNode *_find_entry_submap_node(RIOBank *bank, RIOSubMap *sm) {",
          "141:  RRBNode *node = r_crbtree_find_node (bank->submaps, sm, _find_lowest_intersection_sm_cb, NULL);",
          "145:  RRBNode *prev = r_rbnode_prev (node);",
          "148:   prev = r_rbnode_prev (node);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "163:   free (mapref);",
          "164:   return false;",
          "165:  }",
          "167:  if (!entry) {",
          "170:    free (sm);",
          "171:    free (mapref);",
          "172:    return false;",
          "",
          "[Removed Lines]",
          "166:  RContRBNode *entry = _find_entry_submap_node (bank, sm);",
          "169:   if (!r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL)) {",
          "",
          "[Added Lines]",
          "166:  RRBNode *entry = _find_entry_submap_node (bank, sm);",
          "169:   if (!r_crbtree_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "201:   r_io_submap_set_to (bd, r_io_submap_from (sm) - 1);",
          "202: #endif",
          "205:    free (sm);",
          "206:    free (bdsm);",
          "207:    free (mapref);",
          "208:    return false;",
          "209:   }",
          "212:    free (sm);",
          "213:    free (bdsm);",
          "214:    free (mapref);",
          "",
          "[Removed Lines]",
          "204:   if (!r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL)) {",
          "210:   if (!r_rbtree_cont_insert (bank->submaps, bdsm, _find_sm_by_from_vaddr_cb, NULL)) {",
          "211:    r_rbtree_cont_delete (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "204:   if (!r_crbtree_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL)) {",
          "210:   if (!r_crbtree_insert (bank->submaps, bdsm, _find_sm_by_from_vaddr_cb, NULL)) {",
          "211:    r_crbtree_delete (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "223: #else",
          "224:  r_io_submap_set_to (bd, r_io_submap_from (sm) -1);",
          "225: #endif",
          "227:  while (entry && r_io_submap_to (((RIOSubMap *)entry->data)) <= r_io_submap_to (sm)) {",
          "232:   entry = next;",
          "233:  }",
          "234:  if (entry && r_io_submap_from (((RIOSubMap *)entry->data)) <= r_io_submap_to (sm)) {",
          "",
          "[Removed Lines]",
          "226:  entry = r_rbtree_cont_node_next (entry);",
          "229:   RContRBNode *next = r_rbtree_cont_node_next (entry);",
          "231:   r_rbtree_cont_delete (bank->submaps, entry->data, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "226:  entry = r_rbnode_next (entry);",
          "229:   RRBNode *next = r_rbnode_next (entry);",
          "231:   r_crbtree_delete (bank->submaps, entry->data, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "240:   r_io_submap_set_from (bd, r_io_submap_to (sm) + 1);",
          "241: #endif",
          "242:  }",
          "244:   free (sm);",
          "245:   free (mapref);",
          "246:   return false;",
          "",
          "[Removed Lines]",
          "243:  if (!r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL)) {",
          "",
          "[Added Lines]",
          "243:  if (!r_crbtree_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "262:   free (mapref);",
          "263:   return false;",
          "264:  }",
          "266:  if (!entry) {",
          "269:    free (sm);",
          "270:    free (mapref);",
          "271:    return false;",
          "",
          "[Removed Lines]",
          "265:  RContRBNode *entry = _find_entry_submap_node (bank, sm);",
          "268:   if (!r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL)) {",
          "",
          "[Added Lines]",
          "265:  RRBNode *entry = _find_entry_submap_node (bank, sm);",
          "268:   if (!r_crbtree_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "278:   if (r_io_submap_from (sm) < r_io_submap_from (bd)) {",
          "279:    RIOSubMap *bdsm = R_NEWCOPY (RIOSubMap, sm);",
          "280:    r_io_submap_set_to (bdsm, r_io_submap_from (bd) - 1);",
          "282:   }",
          "283:   if (r_io_submap_to (sm) <= r_io_submap_to (bd)) {",
          "284:    r_list_prepend (bank->maprefs, mapref);",
          "",
          "[Removed Lines]",
          "281:    r_rbtree_cont_insert (bank->submaps, bdsm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "281:    r_crbtree_insert (bank->submaps, bdsm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "286:    return true;",
          "287:   }",
          "288:   r_io_submap_set_from (sm, r_io_submap_to (bd) + 1);",
          "290:  }",
          "292:  r_list_prepend (bank->maprefs, mapref);",
          "293:  return true;",
          "294: }",
          "",
          "[Removed Lines]",
          "289:   entry = r_rbtree_cont_node_next (entry);",
          "291:  r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "289:   entry = r_rbnode_next (entry);",
          "291:  r_crbtree_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "312:  if (!sm) {",
          "313:   return false;",
          "314:  }",
          "316:  if (!entry) {",
          "318:   free (sm);",
          "",
          "[Removed Lines]",
          "315:  RContRBNode *entry = _find_entry_submap_node (bank, sm);",
          "",
          "[Added Lines]",
          "315:  RRBNode *entry = _find_entry_submap_node (bank, sm);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "347: #endif",
          "349:   r_list_iter_to_top (bank->maprefs, iter);",
          "352:  }",
          "",
          "[Removed Lines]",
          "350:   return r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL) &",
          "351:    r_rbtree_cont_insert (bank->submaps, bdsm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "350:   return r_crbtree_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL) &",
          "351:    r_crbtree_insert (bank->submaps, bdsm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "358: #else",
          "359:  r_io_submap_set_to (bd, r_io_submap_from (sm) - 1);",
          "360: #endif",
          "362:  while (entry && r_io_submap_to (((RIOSubMap *)entry->data)) <= r_io_submap_to (sm)) {",
          "367:   entry = next;",
          "368:  }",
          "369:  if (entry && r_io_submap_from (((RIOSubMap *)entry->data)) <= r_io_submap_to (sm)) {",
          "",
          "[Removed Lines]",
          "361:  entry = r_rbtree_cont_node_next (entry);",
          "364:   RContRBNode *next = r_rbtree_cont_node_next (entry);",
          "366:   r_rbtree_cont_delete (bank->submaps, entry->data, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "361:  entry = r_rbnode_next (entry);",
          "364:   RRBNode *next = r_rbnode_next (entry);",
          "366:   r_crbtree_delete (bank->submaps, entry->data, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "376: #endif",
          "377:  }",
          "378:  r_list_iter_to_top (bank->maprefs, iter);",
          "380: }",
          "",
          "[Removed Lines]",
          "379:  return r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "379:  return r_crbtree_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "387:  RIOSubMap fake_sm;",
          "388:  fake_sm.itv = map->itv;",
          "389:  fake_sm.mapref.id = map->id;",
          "391:  RIOSubMap *bd = (RIOSubMap *)entry->data;",
          "392:  while (bd && r_io_submap_overlap (bd, (&fake_sm))) {",
          "396:   if (bd->mapref.id == fake_sm.mapref.id) {",
          "397:    r_queue_enqueue (bank->todo, R_NEWCOPY (RIOSubMap, bd));",
          "399:   }",
          "400:   entry = next;",
          "401:   bd = entry ? (RIOSubMap *)entry->data : NULL;",
          "",
          "[Removed Lines]",
          "390:  RContRBNode *entry = _find_entry_submap_node (bank, &fake_sm);",
          "395:   RContRBNode *next = r_rbtree_cont_node_next (entry);",
          "398:    r_rbtree_cont_delete (bank->submaps, bd, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "390:  RRBNode *entry = _find_entry_submap_node (bank, &fake_sm);",
          "395:   RRBNode *next = r_rbnode_next (entry);",
          "398:    r_crbtree_delete (bank->submaps, bd, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "433:    if (r_io_submap_from (sm) >= r_io_map_from (map)) {",
          "435:     r_io_submap_set_from (bd, r_io_submap_from (sm));",
          "437:     if (r_io_submap_to (sm) <= r_io_map_to (map)) {",
          "439:      r_io_submap_set_to (bd, r_io_submap_to (sm));",
          "",
          "[Removed Lines]",
          "436:     r_rbtree_cont_insert (bank->submaps, bd, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "436:     r_crbtree_insert (bank->submaps, bd, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "449:     r_io_submap_set_to (bd, r_io_submap_to (sm));",
          "451:     r_io_submap_set_to (sm, r_io_submap_from (bd) - 1);",
          "453:     continue;",
          "454:    }",
          "456:    RIOSubMap *bdsm = R_NEWCOPY (RIOSubMap, sm);",
          "457:    r_io_submap_set_to (sm, r_io_submap_from (bd) - 1);",
          "458:    r_io_submap_set_from (bdsm, r_io_submap_to (bd) + 1);",
          "460:    r_queue_enqueue (bank->todo, bdsm);",
          "461:   }",
          "462:   free (sm);",
          "",
          "[Removed Lines]",
          "452:     r_rbtree_cont_insert (bank->submaps, bd, _find_sm_by_from_vaddr_cb, NULL);",
          "459:    r_rbtree_cont_insert (bank->submaps, bd, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "452:     r_crbtree_insert (bank->submaps, bd, _find_sm_by_from_vaddr_cb, NULL);",
          "459:    r_crbtree_insert (bank->submaps, bd, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "548:  fake_map.itv.size = oto - ofrom + 1;",
          "549:  _delete_submaps_from_bank_tree (io, bank, iter, &fake_map);",
          "552:  if (!entry) {",
          "557:   return true;",
          "558:  }",
          "",
          "[Removed Lines]",
          "551:  RContRBNode *entry = _find_entry_submap_node (bank, sm);",
          "554:   r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "551:  RRBNode *entry = _find_entry_submap_node (bank, sm);",
          "554:   r_crbtree_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "575:    r_io_submap_set_from (bdsm, r_io_submap_to (sm) + 1);",
          "576:    r_io_submap_set_to (bd, r_io_submap_from (sm) - 1);",
          "580:    return true;",
          "581:   }",
          "582:   r_io_submap_set_to (bd, r_io_submap_from (sm) -1);",
          "",
          "[Removed Lines]",
          "578:    r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "579:    r_rbtree_cont_insert (bank->submaps, bdsm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "578:    r_crbtree_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "579:    r_crbtree_insert (bank->submaps, bdsm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "595:    r_io_submap_set_from (sm, r_io_submap_to (bd) + 1);",
          "596:   }",
          "597:  }",
          "601:  while (entry && r_io_submap_from (((RIOSubMap *)entry->data)) <= r_io_submap_to (sm)) {",
          "603:   bd = (RIOSubMap *)entry->data;",
          "606:   if (_mapref_priority_cmp (bank, &sm->mapref, &bd->mapref) == 1) {",
          "609:   } else {",
          "",
          "[Removed Lines]",
          "598:  entry = r_rbtree_cont_node_next (entry);",
          "604:   entry = r_rbtree_cont_node_next (entry);",
          "608:    r_rbtree_cont_delete (bank->submaps, bd, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "598:  entry = r_rbnode_next (entry);",
          "604:   entry = r_rbnode_next (entry);",
          "608:    r_crbtree_delete (bank->submaps, bd, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "614:    if (r_io_submap_from (sm) < r_io_submap_from (bd)) {",
          "615:     RIOSubMap *bdsm = R_NEWCOPY (RIOSubMap, sm);",
          "616:     r_io_submap_set_to (bdsm, r_io_submap_from (bd) - 1);",
          "618:    }",
          "619:    if (r_io_submap_to (sm) == r_io_submap_from (bd)) {",
          "",
          "[Removed Lines]",
          "617:     r_rbtree_cont_insert (bank->submaps, bdsm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "617:     r_crbtree_insert (bank->submaps, bdsm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "626:   }",
          "627:  }",
          "628:  if (!entry) {",
          "630:   return true;",
          "631:  }",
          "632:  bd = (RIOSubMap *)entry->data;",
          "",
          "[Removed Lines]",
          "629:   r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "629:   r_crbtree_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "634:   if (r_io_submap_from (bd) <= r_io_submap_to (sm)) {",
          "635:    r_io_submap_set_from (bd, r_io_submap_to (sm) + 1);",
          "636:   }",
          "638:  } else {",
          "639:   if (r_io_submap_from (sm) < r_io_submap_from (bd)) {",
          "640:    if (r_io_submap_to (sm) >= r_io_submap_from (bd)) {",
          "641:     r_io_submap_set_to (sm, r_io_submap_from (bd) - 1);",
          "642:    }",
          "644:   } else {",
          "646:    free (sm);",
          "",
          "[Removed Lines]",
          "637:   r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "643:    r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "637:   r_crbtree_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "643:    r_crbtree_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "660:  memset (&fake_sm, 0x00, sizeof(RIOSubMap));",
          "661:  fake_sm.itv.addr = *addr + (load_align - *addr % load_align) % load_align;",
          "662:  fake_sm.itv.size = size;",
          "664:  if (!entry) {",
          "",
          "[Removed Lines]",
          "663:  RContRBNode *entry = _find_entry_submap_node (bank, &fake_sm);",
          "",
          "[Added Lines]",
          "663:  RRBNode *entry = _find_entry_submap_node (bank, &fake_sm);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "678:   }",
          "679:   next_location = (r_io_submap_to (sm) + 1) +",
          "680:    (load_align - ((r_io_submap_to (sm) + 1) % load_align)) % load_align;",
          "682:  }",
          "683:  if (next_location == 0LL) {",
          "",
          "[Removed Lines]",
          "681:   entry = r_rbtree_cont_node_next (entry);",
          "",
          "[Added Lines]",
          "681:   entry = r_rbnode_next (entry);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "699:  fake_sm.itv.addr = addr;",
          "700:  fake_sm.itv.size = len;",
          "703:  memset (buf, io->Oxff, len);",
          "704:  RIOSubMap *sm = node ? (RIOSubMap *)node->data : NULL;",
          "705:  bool ret = true;",
          "",
          "[Removed Lines]",
          "702:  RContRBNode *node = _find_entry_submap_node (bank, &fake_sm);",
          "",
          "[Added Lines]",
          "702:  RRBNode *node = _find_entry_submap_node (bank, &fake_sm);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "718:   const ut64 paddr = addr + buf_off - r_io_map_from (map) + map->delta;",
          "719:   ret &= (r_io_fd_read_at (io, map->fd, paddr, &buf[buf_off], read_len) == read_len);",
          "722:   sm = node ? (RIOSubMap *)node->data : NULL;",
          "723:  }",
          "724:  return ret;",
          "",
          "[Removed Lines]",
          "721:   node = r_rbtree_cont_node_next (node);",
          "",
          "[Added Lines]",
          "721:   node = r_rbnode_next (node);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "732:  fake_sm.itv.addr = addr;",
          "733:  fake_sm.itv.size = len;",
          "736:  RIOSubMap *sm = node ? (RIOSubMap *)node->data : NULL;",
          "737:  bool ret = true;",
          "738:  while (sm && r_io_submap_overlap ((&fake_sm), sm)) {",
          "",
          "[Removed Lines]",
          "735:  RContRBNode *node = _find_entry_submap_node (bank, &fake_sm);",
          "",
          "[Added Lines]",
          "735:  RRBNode *node = _find_entry_submap_node (bank, &fake_sm);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "750:   const ut64 paddr = addr + buf_off - r_io_map_from (map) + map->delta;",
          "751:   ret &= (r_io_fd_write_at (io, map->fd, paddr, &buf[buf_off], write_len) == write_len);",
          "754:   sm = node ? (RIOSubMap *)node->data : NULL;",
          "755:  }",
          "756:  return ret;",
          "",
          "[Removed Lines]",
          "753:   node = r_rbtree_cont_node_next (node);",
          "",
          "[Added Lines]",
          "753:   node = r_rbnode_next (node);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "764:  if (!len) {",
          "765:   return 0;",
          "766:  }",
          "768:  if (!node) {",
          "769:   return 0;",
          "770:  }",
          "",
          "[Removed Lines]",
          "767:  RContRBNode *node = r_rbtree_cont_find_node (bank->submaps, &addr, _find_sm_by_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "767:  RRBNode *node = r_crbtree_find_node (bank->submaps, &addr, _find_sm_by_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "789:  if (!len) {",
          "790:   return 0;",
          "791:  }",
          "793:  if (!node) {",
          "794:   return 0;",
          "795:  }",
          "",
          "[Removed Lines]",
          "792:  RContRBNode *node = r_rbtree_cont_find_node (bank->submaps, &addr, _find_sm_by_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "792:  RRBNode *node = r_crbtree_find_node (bank->submaps, &addr, _find_sm_by_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "809: R_API RIOMap *r_io_bank_get_map_at(RIO *io, const ut32 bankid, ut64 addr) {",
          "810:  RIOBank *bank = r_io_bank_get (io, bankid);",
          "811:  r_return_val_if_fail (io && bank, NULL);",
          "813:  if (!node) {",
          "814:   return NULL;",
          "815:  }",
          "",
          "[Removed Lines]",
          "812:  RContRBNode *node = r_rbtree_cont_find_node (bank->submaps, &addr, _find_sm_by_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "812:  RRBNode *node = r_crbtree_find_node (bank->submaps, &addr, _find_sm_by_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "852:  if (!bank) {",
          "853:   return;",
          "854:  }",
          "857:  while (node) {",
          "859:   if (next) {",
          "860:    RIOSubMap *bd = (RIOSubMap *)node->data;",
          "861:    RIOSubMap *sm = (RIOSubMap *)next->data;",
          "862:    if (!memcmp (&bd->mapref, &sm->mapref, sizeof (RIOMapRef))) {",
          "863:     r_io_submap_set_to (bd, r_io_submap_to (sm));",
          "865:     continue;",
          "866:    }",
          "867:   }",
          "",
          "[Removed Lines]",
          "855:  RContRBNode *node = r_rbtree_cont_node_first (bank->submaps);",
          "856:  RContRBNode *next = NULL;",
          "858:   next = r_rbtree_cont_node_next (node);",
          "864:     r_rbtree_cont_delete (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "855:  RRBNode *node = r_crbtree_first_node (bank->submaps);",
          "856:  RRBNode *next = NULL;",
          "858:   next = r_rbnode_next (node);",
          "864:     r_crbtree_delete (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dfeb6b04036db241db8971e0bc5b68f444ace082",
      "candidate_info": {
        "commit_hash": "dfeb6b04036db241db8971e0bc5b68f444ace082",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/dfeb6b04036db241db8971e0bc5b68f444ace082",
        "files": [
          "libr/io/io_bank.c"
        ],
        "message": "Revert \"Fix use-after-free in iobank rbtree usage ##io\"\n\nThis reverts commit 37897226a1a31f982bfefdc4aeefc2e50355c73c.",
        "before_after_code_files": [
          "libr/io/io_bank.c||libr/io/io_bank.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/io/io_bank.c||libr/io/io_bank.c"
          ],
          "candidate": [
            "libr/io/io_bank.c||libr/io/io_bank.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/io/io_bank.c||libr/io/io_bank.c": [
          "File: libr/io/io_bank.c -> libr/io/io_bank.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:   RRBNode *next = r_rbnode_next (entry);",
          "243:   entry = next;",
          "244:  }",
          "245:  if (entry && r_io_submap_from (((RIOSubMap *)entry->data)) <= r_io_submap_to (sm)) {",
          "",
          "[Removed Lines]",
          "239:   bool a = r_crbtree_delete (bank->submaps, entry->data, _find_sm_by_from_vaddr_cb, NULL);",
          "240:   if (!a) {",
          "241:    break;",
          "242:   }",
          "",
          "[Added Lines]",
          "239:   r_crbtree_delete (bank->submaps, entry->data, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b05dfda99f3bc3e36cebe1de4536386033ca293",
      "candidate_info": {
        "commit_hash": "4b05dfda99f3bc3e36cebe1de4536386033ca293",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/4b05dfda99f3bc3e36cebe1de4536386033ca293",
        "files": [
          "libr/core/cmd_open.c",
          "libr/include/r_io.h",
          "libr/io/io_bank.c",
          "libr/io/io_map.c"
        ],
        "message": "Add r_io_bank_get_map_at and enable banks in r_io_get_map_at ##io",
        "before_after_code_files": [
          "libr/core/cmd_open.c||libr/core/cmd_open.c",
          "libr/include/r_io.h||libr/include/r_io.h",
          "libr/io/io_bank.c||libr/io/io_bank.c",
          "libr/io/io_map.c||libr/io/io_map.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/io/io_bank.c||libr/io/io_bank.c"
          ],
          "candidate": [
            "libr/io/io_bank.c||libr/io/io_bank.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/core/cmd_open.c||libr/core/cmd_open.c": [
          "File: libr/core/cmd_open.c -> libr/core/cmd_open.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "772:    int mapid = atoi (argv[1]);",
          "773:    RIOBank *bank = r_io_bank_get (core->io, core->io->bank);",
          "774:    if (bank) {",
          "776:    } else {",
          "777:     eprintf (\"Unknown bank id\\n\");",
          "778:    }",
          "",
          "[Removed Lines]",
          "775:     r_io_bank_delete_map (core->io, core->io->bank, mapid);",
          "",
          "[Added Lines]",
          "775:     r_io_bank_del_map (core->io, core->io->bank, mapid);",
          "",
          "---------------"
        ],
        "libr/include/r_io.h||libr/include/r_io.h": [
          "File: libr/include/r_io.h -> libr/include/r_io.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "364: R_API RIOBank *r_io_bank_new(const char *name);",
          "365: R_API void r_io_bank_del(RIO *io, const ut32 bankid);",
          "366: R_API ut32 r_io_bank_first(RIO *io);",
          "368: R_API bool r_io_bank_add(RIO *io, RIOBank *bank);",
          "369: R_API void r_io_bank_free(RIOBank *bank);",
          "370: R_API void r_io_bank_init(RIO *io);",
          "",
          "[Removed Lines]",
          "367: R_API void r_io_bank_delete_map(RIO *io, const ut32 bankid, const ut32 mapid);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "377: R_API bool r_io_bank_map_depriorize(RIO *io, const ut32 bankid, const ut32 mapid);",
          "378: R_API bool r_io_bank_update_map_boundaries(RIO *io, const ut32 bankid, const ut32 mapid, ut64 ofrom, ut64 oto);",
          "379: R_API bool r_io_bank_locate(RIO *io, const ut32 bankid, const ut64 size, ut64 *addr);",
          "380: R_API bool r_io_bank_read_at(RIO *io, const ut32 bankid, ut64 addr, ut8 *buf, int len);",
          "381: R_API bool r_io_bank_write_at(RIO *io, const ut32 bankid, ut64 addr, ut8 *buf, int len);",
          "382: R_API void r_io_bank_drain(RIO *io, const ut32 bankid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "379: R_API void r_io_bank_del_map(RIO *io, const ut32 bankid, const ut32 mapid);",
          "380: R_API RIOMap *r_io_bank_get_map_at(RIO *io, const ut32 bankid, const ut64 addr);",
          "",
          "---------------"
        ],
        "libr/io/io_bank.c||libr/io/io_bank.c": [
          "File: libr/io/io_bank.c -> libr/io/io_bank.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:  return mapref;",
          "101: }",
          "104:  RIOSubMap *bd = (RIOSubMap *)incoming, *sm = (RIOSubMap *)in;",
          "106:   return -1;",
          "107:  }",
          "109:   return 1;",
          "110:  }",
          "111:  return 0;",
          "112: }",
          "114: static int _find_lowest_intersection_sm_cb(void *incoming, void *in, void *user) {",
          "115:  RIOSubMap *bd = (RIOSubMap *)incoming, *sm = (RIOSubMap *)in;",
          "116:  if (r_io_submap_overlap (bd, sm)) {",
          "117:   return 0;",
          "118:  }",
          "120:   return -1;",
          "121:  }",
          "122:  return 1;",
          "",
          "[Removed Lines]",
          "103: static int _find_sm_by_vaddr_cb(void *incoming, void *in, void *user) {",
          "105:  if (bd->itv.addr > sm->itv.addr) {",
          "108:  if (bd->itv.addr < sm->itv.addr) {",
          "119:  if (bd->itv.addr > sm->itv.addr) {",
          "",
          "[Added Lines]",
          "104: static int _find_sm_by_from_vaddr_cb(void *incoming, void *in, void *user) {",
          "106:  if (r_io_submap_from (bd) > r_io_submap_from (sm)) {",
          "109:  if (r_io_submap_from (bd) < r_io_submap_from (sm)) {",
          "115: static int _find_sm_by_vaddr_cb(void *incoming, void *in, void *user) {",
          "116:  const ut64 addr = ((ut64 *)incoming)[0];",
          "117:  RIOSubMap *sm = (RIOSubMap *)in;",
          "118:  if (r_io_submap_contain (sm, addr)) {",
          "119:   return 0;",
          "120:  }",
          "121:  if (addr > r_io_submap_from (sm)) {",
          "122:   return -1;",
          "123:  }",
          "124:  return 1;",
          "125: }",
          "132:  if (r_io_submap_from (bd) > r_io_submap_from (sm)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:  RContRBNode *entry = _find_entry_submap_node (bank, sm);",
          "153:  if (!entry) {",
          "156:    free (sm);",
          "157:    free (mapref);",
          "158:    return false;",
          "",
          "[Removed Lines]",
          "155:   if (!r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_vaddr_cb, NULL)) {",
          "",
          "[Added Lines]",
          "168:   if (!r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "187:   r_io_submap_set_to (bd, r_io_submap_from (sm) - 1);",
          "188: #endif",
          "191:    free (sm);",
          "192:    free (bdsm);",
          "193:    free (mapref);",
          "194:    return false;",
          "195:   }",
          "198:    free (sm);",
          "199:    free (bdsm);",
          "200:    free (mapref);",
          "",
          "[Removed Lines]",
          "190:   if (!r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_vaddr_cb, NULL)) {",
          "196:   if (!r_rbtree_cont_insert (bank->submaps, bdsm, _find_sm_by_vaddr_cb, NULL)) {",
          "197:    r_rbtree_cont_delete (bank->submaps, sm, _find_sm_by_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "203:   if (!r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL)) {",
          "209:   if (!r_rbtree_cont_insert (bank->submaps, bdsm, _find_sm_by_from_vaddr_cb, NULL)) {",
          "210:    r_rbtree_cont_delete (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "215:   RContRBNode *next = r_rbtree_cont_node_next (entry);",
          "218:   entry = next;",
          "219:  }",
          "220:  if (entry && r_io_submap_from (((RIOSubMap *)entry->data)) <= r_io_submap_to (sm)) {",
          "",
          "[Removed Lines]",
          "217:   r_rbtree_cont_delete (bank->submaps, entry->data, _find_sm_by_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "230:   r_rbtree_cont_delete (bank->submaps, entry->data, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "226:   r_io_submap_set_from (bd, r_io_submap_to (sm) + 1);",
          "227: #endif",
          "228:  }",
          "230:   free (sm);",
          "231:   free (mapref);",
          "232:   return false;",
          "",
          "[Removed Lines]",
          "229:  if (!r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_vaddr_cb, NULL)) {",
          "",
          "[Added Lines]",
          "242:  if (!r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "251:  RContRBNode *entry = _find_entry_submap_node (bank, sm);",
          "252:  if (!entry) {",
          "255:    free (sm);",
          "256:    free (mapref);",
          "257:    return false;",
          "",
          "[Removed Lines]",
          "254:   if (!r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_vaddr_cb, NULL)) {",
          "",
          "[Added Lines]",
          "267:   if (!r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "264:   if (r_io_submap_from (sm) < r_io_submap_from (bd)) {",
          "265:    RIOSubMap *bdsm = R_NEWCOPY (RIOSubMap, sm);",
          "266:    r_io_submap_set_to (bdsm, r_io_submap_from (bd) - 1);",
          "268:   }",
          "269:   if (r_io_submap_to (sm) <= r_io_submap_to (bd)) {",
          "270:    r_list_prepend (bank->maprefs, mapref);",
          "",
          "[Removed Lines]",
          "267:    r_rbtree_cont_insert (bank->submaps, bdsm, _find_sm_by_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "280:    r_rbtree_cont_insert (bank->submaps, bdsm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "274:   r_io_submap_set_from (sm, r_io_submap_to (bd) + 1);",
          "275:   entry = r_rbtree_cont_node_next (entry);",
          "276:  }",
          "278:  r_list_prepend (bank->maprefs, mapref);",
          "279:  return true;",
          "280: }",
          "",
          "[Removed Lines]",
          "277:  r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "290:  r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "333: #endif",
          "335:   r_list_iter_to_top (bank->maprefs, iter);",
          "338:  }",
          "",
          "[Removed Lines]",
          "336:   return r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_vaddr_cb, NULL) &",
          "337:    r_rbtree_cont_insert (bank->submaps, bdsm, _find_sm_by_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "349:   return r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL) &",
          "350:    r_rbtree_cont_insert (bank->submaps, bdsm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "350:   RContRBNode *next = r_rbtree_cont_node_next (entry);",
          "353:   entry = next;",
          "354:  }",
          "355:  if (entry && r_io_submap_from (((RIOSubMap *)entry->data)) <= r_io_submap_to (sm)) {",
          "",
          "[Removed Lines]",
          "352:   r_rbtree_cont_delete (bank->submaps, entry->data, _find_sm_by_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "365:   r_rbtree_cont_delete (bank->submaps, entry->data, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "362: #endif",
          "363:  }",
          "364:  r_list_iter_to_top (bank->maprefs, iter);",
          "366: }",
          "",
          "[Removed Lines]",
          "365:  return r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "378:  return r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "381:   RContRBNode *next = r_rbtree_cont_node_next (entry);",
          "382:   if (bd->mapref.id == fake_sm.mapref.id) {",
          "383:    r_queue_enqueue (bank->todo, R_NEWCOPY (RIOSubMap, bd));",
          "385:   }",
          "386:   entry = next;",
          "387:   bd = entry ? (RIOSubMap *)entry->data : NULL;",
          "",
          "[Removed Lines]",
          "384:    r_rbtree_cont_delete (bank->submaps, bd, _find_sm_by_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "397:    r_rbtree_cont_delete (bank->submaps, bd, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "416:    if (r_io_submap_from (sm) >= r_io_map_from (map)) {",
          "418:     r_io_submap_set_from (bd, r_io_submap_from (sm));",
          "420:     if (r_io_submap_to (sm) <= r_io_map_to (map)) {",
          "422:      r_io_submap_set_to (bd, r_io_submap_to (sm));",
          "",
          "[Removed Lines]",
          "419:     r_rbtree_cont_insert (bank->submaps, bd, _find_sm_by_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "432:     r_rbtree_cont_insert (bank->submaps, bd, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "432:     r_io_submap_set_to (bd, r_io_submap_to (sm));",
          "434:     r_io_submap_set_to (sm, r_io_submap_from (bd) - 1);",
          "436:     continue;",
          "437:    }",
          "439:    RIOSubMap *bdsm = R_NEWCOPY (RIOSubMap, sm);",
          "440:    r_io_submap_set_to (sm, r_io_submap_from (bd) - 1);",
          "441:    r_io_submap_set_from (bdsm, r_io_submap_to (bd) + 1);",
          "443:    r_queue_enqueue (bank->todo, bdsm);",
          "444:   }",
          "445:   free (sm);",
          "",
          "[Removed Lines]",
          "435:     r_rbtree_cont_insert (bank->submaps, bd, _find_sm_by_vaddr_cb, NULL);",
          "442:    r_rbtree_cont_insert (bank->submaps, bd, _find_sm_by_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "448:     r_rbtree_cont_insert (bank->submaps, bd, _find_sm_by_from_vaddr_cb, NULL);",
          "455:    r_rbtree_cont_insert (bank->submaps, bd, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "534:  RContRBNode *entry = _find_entry_submap_node (bank, sm);",
          "535:  if (!entry) {",
          "540:   return true;",
          "",
          "[Removed Lines]",
          "537:   r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "550:   r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "558:    r_io_submap_set_from (bdsm, r_io_submap_to (sm) + 1);",
          "559:    r_io_submap_set_to (bd, r_io_submap_from (sm) - 1);",
          "563:    return true;",
          "564:   }",
          "565:   r_io_submap_set_to (bd, r_io_submap_from (sm) -1);",
          "",
          "[Removed Lines]",
          "561:    r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_vaddr_cb, NULL);",
          "562:    r_rbtree_cont_insert (bank->submaps, bdsm, _find_sm_by_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "574:    r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "575:    r_rbtree_cont_insert (bank->submaps, bdsm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "589:   if (_mapref_priority_cmp (bank, &sm->mapref, &bd->mapref) == 1) {",
          "592:   } else {",
          "",
          "[Removed Lines]",
          "591:    r_rbtree_cont_delete (bank->submaps, bd, _find_sm_by_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "604:    r_rbtree_cont_delete (bank->submaps, bd, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "597:    if (r_io_submap_from (sm) < r_io_submap_from (bd)) {",
          "598:     RIOSubMap *bdsm = R_NEWCOPY (RIOSubMap, sm);",
          "599:     r_io_submap_set_to (bdsm, r_io_submap_from (bd) - 1);",
          "601:    }",
          "602:    if (r_io_submap_to (sm) == r_io_submap_from (bd)) {",
          "",
          "[Removed Lines]",
          "600:     r_rbtree_cont_insert (bank->submaps, bdsm, _find_sm_by_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "613:     r_rbtree_cont_insert (bank->submaps, bdsm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "609:   }",
          "610:  }",
          "611:  if (!entry) {",
          "613:   return true;",
          "614:  }",
          "615:  bd = (RIOSubMap *)entry->data;",
          "",
          "[Removed Lines]",
          "612:   r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "625:   r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "617:   if (r_io_submap_from (bd) <= r_io_submap_to (sm)) {",
          "618:    r_io_submap_set_from (bd, r_io_submap_to (sm) + 1);",
          "619:   }",
          "621:  } else {",
          "622:   if (r_io_submap_from (sm) < r_io_submap_from (bd)) {",
          "623:    if (r_io_submap_to (sm) >= r_io_submap_from (bd)) {",
          "624:     r_io_submap_set_to (sm, r_io_submap_from (bd) - 1);",
          "625:    }",
          "627:   } else {",
          "629:    free (sm);",
          "",
          "[Removed Lines]",
          "620:   r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_vaddr_cb, NULL);",
          "626:    r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "633:   r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "639:    r_rbtree_cont_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "725:  return true;",
          "726: }",
          "730:  RIOBank *bank = r_io_bank_get (io, bankid);",
          "731:  RIOMap *map = r_io_map_get (io, mapid);",
          "",
          "[Removed Lines]",
          "728: R_API void r_io_bank_delete_map(RIO *io, const ut32 bankid, const ut32 mapid) {",
          "",
          "[Added Lines]",
          "741: R_API RIOMap *r_io_bank_get_map_at(RIO *io, const ut32 bankid, ut64 addr) {",
          "742:  RIOBank *bank = r_io_bank_get (io, bankid);",
          "743:  r_return_val_if_fail (io && bank, NULL);",
          "744:  RContRBNode *node = r_rbtree_cont_find_node (bank->submaps, &addr, _find_sm_by_vaddr_cb, NULL);",
          "745:  if (!node) {",
          "746:   return NULL;",
          "747:  }",
          "748:  RIOSubMap *sm = (RIOSubMap *)node->data;",
          "749:  if (!r_io_submap_contain (sm, addr)) {",
          "750:   return NULL;",
          "751:  }",
          "752:  return r_io_map_get_by_ref (io, &sm->mapref);",
          "753: }",
          "755: R_API void r_io_bank_del_map(RIO *io, const ut32 bankid, const ut32 mapid) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "764:    RIOSubMap *sm = (RIOSubMap *)next->data;",
          "765:    if (!memcmp (&bd->mapref, &sm->mapref, sizeof (RIOMapRef))) {",
          "766:     r_io_submap_set_to (bd, r_io_submap_to (sm));",
          "768:     continue;",
          "769:    }",
          "770:   }",
          "",
          "[Removed Lines]",
          "767:     r_rbtree_cont_delete (bank->submaps, sm, _find_sm_by_vaddr_cb, NULL);",
          "",
          "[Added Lines]",
          "794:     r_rbtree_cont_delete (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------"
        ],
        "libr/io/io_map.c||libr/io/io_map.c": [
          "File: libr/io/io_map.c -> libr/io/io_map.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "174: R_API RIOMap *r_io_map_get_at(RIO* io, ut64 addr) {",
          "175:  r_return_val_if_fail (io, NULL);",
          "177: }",
          "179: R_API bool r_io_map_is_mapped(RIO* io, ut64 addr) {",
          "",
          "[Removed Lines]",
          "176:  return r_skyline_get (&io->map_skyline, addr);",
          "",
          "[Added Lines]",
          "175:  return io->use_banks ? r_io_bank_get_map_at (io, io->bank, addr):",
          "176:   r_skyline_get (&io->map_skyline, addr);",
          "",
          "---------------"
        ]
      }
    }
  ]
}