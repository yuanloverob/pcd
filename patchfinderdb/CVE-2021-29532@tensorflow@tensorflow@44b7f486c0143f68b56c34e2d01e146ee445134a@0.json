{
  "cve_id": "CVE-2021-29532",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. An attacker can force accesses outside the bounds of heap allocated arrays by passing in invalid tensor values to `tf.raw_ops.RaggedCross`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/efea03b38fb8d3b81762237dc85e579cc5fc6e87/tensorflow/core/kernels/ragged_cross_op.cc#L456-L487) lacks validation for the user supplied arguments. Each of the above branches call a helper function after accessing array elements via a `*_list[next_*]` pattern, followed by incrementing the `next_*` index. However, as there is no validation that the `next_*` values are in the valid range for the corresponding `*_list` arrays, this results in heap OOB reads. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "44b7f486c0143f68b56c34e2d01e146ee445134a",
  "patch_info": {
    "commit_hash": "44b7f486c0143f68b56c34e2d01e146ee445134a",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/44b7f486c0143f68b56c34e2d01e146ee445134a",
    "files": [
      "tensorflow/core/kernels/ragged_cross_op.cc"
    ],
    "message": "Fix out of bounds read in `ragged_cross_op.cc`.\n\nPiperOrigin-RevId: 369757702\nChange-Id: Ie6e5d2c21513a8d56bf41fcf35960caf76e890f9",
    "before_after_code_files": [
      "tensorflow/core/kernels/ragged_cross_op.cc||tensorflow/core/kernels/ragged_cross_op.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/ragged_cross_op.cc||tensorflow/core/kernels/ragged_cross_op.cc": [
      "File: tensorflow/core/kernels/ragged_cross_op.cc -> tensorflow/core/kernels/ragged_cross_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: #include \"tensorflow/core/framework/register_types.h\"",
      "22: #include \"tensorflow/core/framework/tensor.h\"",
      "23: #include \"tensorflow/core/framework/tensor_shape.h\"",
      "24: #include \"tensorflow/core/platform/fingerprint.h\"",
      "25: #include \"tensorflow/core/util/util.h\"",
      "26: #include \"tensorflow/core/util/work_sharder.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: #include \"tensorflow/core/platform/errors.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "466:     int next_dense = 0;",
      "467:     for (char c : input_order_) {",
      "468:       if (c == 'R') {",
      "469:         TF_RETURN_IF_ERROR(BuildRaggedFeatureReader(",
      "470:             ragged_values_list[next_ragged], ragged_splits_list[next_ragged],",
      "471:             features));",
      "472:         next_ragged++;",
      "473:       } else if (c == 'S') {",
      "474:         TF_RETURN_IF_ERROR(BuildSparseFeatureReader(",
      "475:             sparse_indices_list[next_sparse], sparse_values_list[next_sparse],",
      "476:             batch_size, features));",
      "477:         next_sparse++;",
      "478:       } else if (c == 'D') {",
      "479:         TF_RETURN_IF_ERROR(",
      "480:             BuildDenseFeatureReader(dense_list[next_dense++], features));",
      "481:       } else {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "470:         if (next_ragged >= ragged_values_list.size())",
      "471:           return errors::InvalidArgument(",
      "472:               \"input_order \\\"\", input_order_,",
      "473:               \"\\\" specifies reading a ragged tensor value at index \",",
      "474:               next_ragged, \" from a list of \", ragged_values_list.size(),",
      "475:               \" values.\");",
      "476:         if (next_ragged >= ragged_splits_list.size())",
      "477:           return errors::InvalidArgument(",
      "478:               \"input_order \\\"\", input_order_,",
      "479:               \"\\\" specifies reading a ragged tensor split at index \",",
      "480:               next_ragged, \" from a list of \", ragged_splits_list.size(),",
      "481:               \" splits.\");",
      "487:         if (next_sparse >= sparse_values_list.size())",
      "488:           return errors::InvalidArgument(",
      "489:               \"input_order \\\"\", input_order_,",
      "490:               \"\\\" specifies reading a sparse tensor value at index \",",
      "491:               next_sparse, \" from a list of \", sparse_values_list.size(),",
      "492:               \" values.\");",
      "493:         if (next_sparse >= sparse_indices_list.size())",
      "494:           return errors::InvalidArgument(",
      "495:               \"input_order \\\"\", input_order_,",
      "496:               \"\\\" specifies reading a sparse tensor index at index \",",
      "497:               next_sparse, \" from a list of \", sparse_indices_list.size(),",
      "498:               \" indices.\");",
      "504:         if (next_dense >= dense_list.size())",
      "505:           return errors::InvalidArgument(",
      "506:               \"input_order \\\"\", input_order_,",
      "507:               \"\\\" specifies reading a dense tensor at index \", next_dense,",
      "508:               \" from a list of \", dense_list.size(), \" tensors.\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ab88c6f3df5454a38a456531571b312756b1365a",
      "candidate_info": {
        "commit_hash": "ab88c6f3df5454a38a456531571b312756b1365a",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/ab88c6f3df5454a38a456531571b312756b1365a",
        "files": [
          "tensorflow/core/kernels/ragged_cross_op.cc"
        ],
        "message": "Fix out of bounds read in `ragged_cross_op.cc`.\n\nPiperOrigin-RevId: 369757702\nChange-Id: Ie6e5d2c21513a8d56bf41fcf35960caf76e890f9",
        "before_after_code_files": [
          "tensorflow/core/kernels/ragged_cross_op.cc||tensorflow/core/kernels/ragged_cross_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/ragged_cross_op.cc||tensorflow/core/kernels/ragged_cross_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/ragged_cross_op.cc||tensorflow/core/kernels/ragged_cross_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/ragged_cross_op.cc||tensorflow/core/kernels/ragged_cross_op.cc": [
          "File: tensorflow/core/kernels/ragged_cross_op.cc -> tensorflow/core/kernels/ragged_cross_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"tensorflow/core/framework/register_types.h\"",
          "22: #include \"tensorflow/core/framework/tensor.h\"",
          "23: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "24: #include \"tensorflow/core/platform/fingerprint.h\"",
          "25: #include \"tensorflow/core/util/util.h\"",
          "26: #include \"tensorflow/core/util/work_sharder.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "466:     int next_dense = 0;",
          "467:     for (char c : input_order_) {",
          "468:       if (c == 'R') {",
          "469:         TF_RETURN_IF_ERROR(BuildRaggedFeatureReader(",
          "470:             ragged_values_list[next_ragged], ragged_splits_list[next_ragged],",
          "471:             features));",
          "472:         next_ragged++;",
          "473:       } else if (c == 'S') {",
          "474:         TF_RETURN_IF_ERROR(BuildSparseFeatureReader(",
          "475:             sparse_indices_list[next_sparse], sparse_values_list[next_sparse],",
          "476:             batch_size, features));",
          "477:         next_sparse++;",
          "478:       } else if (c == 'D') {",
          "479:         TF_RETURN_IF_ERROR(",
          "480:             BuildDenseFeatureReader(dense_list[next_dense++], features));",
          "481:       } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "470:         if (next_ragged >= ragged_values_list.size())",
          "471:           return errors::InvalidArgument(",
          "472:               \"input_order \\\"\", input_order_,",
          "473:               \"\\\" specifies reading a ragged tensor value at index \",",
          "474:               next_ragged, \" from a list of \", ragged_values_list.size(),",
          "475:               \" values.\");",
          "476:         if (next_ragged >= ragged_splits_list.size())",
          "477:           return errors::InvalidArgument(",
          "478:               \"input_order \\\"\", input_order_,",
          "479:               \"\\\" specifies reading a ragged tensor split at index \",",
          "480:               next_ragged, \" from a list of \", ragged_splits_list.size(),",
          "481:               \" splits.\");",
          "487:         if (next_sparse >= sparse_values_list.size())",
          "488:           return errors::InvalidArgument(",
          "489:               \"input_order \\\"\", input_order_,",
          "490:               \"\\\" specifies reading a sparse tensor value at index \",",
          "491:               next_sparse, \" from a list of \", sparse_values_list.size(),",
          "492:               \" values.\");",
          "493:         if (next_sparse >= sparse_indices_list.size())",
          "494:           return errors::InvalidArgument(",
          "495:               \"input_order \\\"\", input_order_,",
          "496:               \"\\\" specifies reading a sparse tensor index at index \",",
          "497:               next_sparse, \" from a list of \", sparse_indices_list.size(),",
          "498:               \" indices.\");",
          "504:         if (next_dense >= dense_list.size())",
          "505:           return errors::InvalidArgument(",
          "506:               \"input_order \\\"\", input_order_,",
          "507:               \"\\\" specifies reading a dense tensor at index \", next_dense,",
          "508:               \" from a list of \", dense_list.size(), \" tensors.\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83b0ccdabdb47aef1a091a79149f37627a23efe6",
      "candidate_info": {
        "commit_hash": "83b0ccdabdb47aef1a091a79149f37627a23efe6",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/83b0ccdabdb47aef1a091a79149f37627a23efe6",
        "files": [
          "tensorflow/core/kernels/ragged_cross_op.cc"
        ],
        "message": "Fix out of bounds read in `ragged_cross_op.cc`.\n\nPiperOrigin-RevId: 369757702\nChange-Id: Ie6e5d2c21513a8d56bf41fcf35960caf76e890f9",
        "before_after_code_files": [
          "tensorflow/core/kernels/ragged_cross_op.cc||tensorflow/core/kernels/ragged_cross_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/ragged_cross_op.cc||tensorflow/core/kernels/ragged_cross_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/ragged_cross_op.cc||tensorflow/core/kernels/ragged_cross_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/ragged_cross_op.cc||tensorflow/core/kernels/ragged_cross_op.cc": [
          "File: tensorflow/core/kernels/ragged_cross_op.cc -> tensorflow/core/kernels/ragged_cross_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"tensorflow/core/framework/register_types.h\"",
          "22: #include \"tensorflow/core/framework/tensor.h\"",
          "23: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "24: #include \"tensorflow/core/platform/fingerprint.h\"",
          "25: #include \"tensorflow/core/util/util.h\"",
          "26: #include \"tensorflow/core/util/work_sharder.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "466:     int next_dense = 0;",
          "467:     for (char c : input_order_) {",
          "468:       if (c == 'R') {",
          "469:         TF_RETURN_IF_ERROR(BuildRaggedFeatureReader(",
          "470:             ragged_values_list[next_ragged], ragged_splits_list[next_ragged],",
          "471:             features));",
          "472:         next_ragged++;",
          "473:       } else if (c == 'S') {",
          "474:         TF_RETURN_IF_ERROR(BuildSparseFeatureReader(",
          "475:             sparse_indices_list[next_sparse], sparse_values_list[next_sparse],",
          "476:             batch_size, features));",
          "477:         next_sparse++;",
          "478:       } else if (c == 'D') {",
          "479:         TF_RETURN_IF_ERROR(",
          "480:             BuildDenseFeatureReader(dense_list[next_dense++], features));",
          "481:       } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "470:         if (next_ragged >= ragged_values_list.size())",
          "471:           return errors::InvalidArgument(",
          "472:               \"input_order \\\"\", input_order_,",
          "473:               \"\\\" specifies reading a ragged tensor value at index \",",
          "474:               next_ragged, \" from a list of \", ragged_values_list.size(),",
          "475:               \" values.\");",
          "476:         if (next_ragged >= ragged_splits_list.size())",
          "477:           return errors::InvalidArgument(",
          "478:               \"input_order \\\"\", input_order_,",
          "479:               \"\\\" specifies reading a ragged tensor split at index \",",
          "480:               next_ragged, \" from a list of \", ragged_splits_list.size(),",
          "481:               \" splits.\");",
          "487:         if (next_sparse >= sparse_values_list.size())",
          "488:           return errors::InvalidArgument(",
          "489:               \"input_order \\\"\", input_order_,",
          "490:               \"\\\" specifies reading a sparse tensor value at index \",",
          "491:               next_sparse, \" from a list of \", sparse_values_list.size(),",
          "492:               \" values.\");",
          "493:         if (next_sparse >= sparse_indices_list.size())",
          "494:           return errors::InvalidArgument(",
          "495:               \"input_order \\\"\", input_order_,",
          "496:               \"\\\" specifies reading a sparse tensor index at index \",",
          "497:               next_sparse, \" from a list of \", sparse_indices_list.size(),",
          "498:               \" indices.\");",
          "504:         if (next_dense >= dense_list.size())",
          "505:           return errors::InvalidArgument(",
          "506:               \"input_order \\\"\", input_order_,",
          "507:               \"\\\" specifies reading a dense tensor at index \", next_dense,",
          "508:               \" from a list of \", dense_list.size(), \" tensors.\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a6e729acf7ae9769d0d115526b90a1d404e22b5b",
      "candidate_info": {
        "commit_hash": "a6e729acf7ae9769d0d115526b90a1d404e22b5b",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/a6e729acf7ae9769d0d115526b90a1d404e22b5b",
        "files": [
          "tensorflow/core/kernels/ragged_cross_op.cc"
        ],
        "message": "Fix out of bounds read in `ragged_cross_op.cc`.\n\nPiperOrigin-RevId: 369757702\nChange-Id: Ie6e5d2c21513a8d56bf41fcf35960caf76e890f9",
        "before_after_code_files": [
          "tensorflow/core/kernels/ragged_cross_op.cc||tensorflow/core/kernels/ragged_cross_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/ragged_cross_op.cc||tensorflow/core/kernels/ragged_cross_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/ragged_cross_op.cc||tensorflow/core/kernels/ragged_cross_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/ragged_cross_op.cc||tensorflow/core/kernels/ragged_cross_op.cc": [
          "File: tensorflow/core/kernels/ragged_cross_op.cc -> tensorflow/core/kernels/ragged_cross_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"tensorflow/core/framework/register_types.h\"",
          "22: #include \"tensorflow/core/framework/tensor.h\"",
          "23: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "24: #include \"tensorflow/core/platform/fingerprint.h\"",
          "25: #include \"tensorflow/core/util/util.h\"",
          "26: #include \"tensorflow/core/util/work_sharder.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "466:     int next_dense = 0;",
          "467:     for (char c : input_order_) {",
          "468:       if (c == 'R') {",
          "469:         TF_RETURN_IF_ERROR(BuildRaggedFeatureReader(",
          "470:             ragged_values_list[next_ragged], ragged_splits_list[next_ragged],",
          "471:             features));",
          "472:         next_ragged++;",
          "473:       } else if (c == 'S') {",
          "474:         TF_RETURN_IF_ERROR(BuildSparseFeatureReader(",
          "475:             sparse_indices_list[next_sparse], sparse_values_list[next_sparse],",
          "476:             batch_size, features));",
          "477:         next_sparse++;",
          "478:       } else if (c == 'D') {",
          "479:         TF_RETURN_IF_ERROR(",
          "480:             BuildDenseFeatureReader(dense_list[next_dense++], features));",
          "481:       } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "470:         if (next_ragged >= ragged_values_list.size())",
          "471:           return errors::InvalidArgument(",
          "472:               \"input_order \\\"\", input_order_,",
          "473:               \"\\\" specifies reading a ragged tensor value at index \",",
          "474:               next_ragged, \" from a list of \", ragged_values_list.size(),",
          "475:               \" values.\");",
          "476:         if (next_ragged >= ragged_splits_list.size())",
          "477:           return errors::InvalidArgument(",
          "478:               \"input_order \\\"\", input_order_,",
          "479:               \"\\\" specifies reading a ragged tensor split at index \",",
          "480:               next_ragged, \" from a list of \", ragged_splits_list.size(),",
          "481:               \" splits.\");",
          "487:         if (next_sparse >= sparse_values_list.size())",
          "488:           return errors::InvalidArgument(",
          "489:               \"input_order \\\"\", input_order_,",
          "490:               \"\\\" specifies reading a sparse tensor value at index \",",
          "491:               next_sparse, \" from a list of \", sparse_values_list.size(),",
          "492:               \" values.\");",
          "493:         if (next_sparse >= sparse_indices_list.size())",
          "494:           return errors::InvalidArgument(",
          "495:               \"input_order \\\"\", input_order_,",
          "496:               \"\\\" specifies reading a sparse tensor index at index \",",
          "497:               next_sparse, \" from a list of \", sparse_indices_list.size(),",
          "498:               \" indices.\");",
          "504:         if (next_dense >= dense_list.size())",
          "505:           return errors::InvalidArgument(",
          "506:               \"input_order \\\"\", input_order_,",
          "507:               \"\\\" specifies reading a dense tensor at index \", next_dense,",
          "508:               \" from a list of \", dense_list.size(), \" tensors.\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}