{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "20e34f911045436190ded0c5464827fced22c87b",
      "candidate_info": {
        "commit_hash": "20e34f911045436190ded0c5464827fced22c87b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/20e34f911045436190ded0c5464827fced22c87b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c"
        ],
        "message": "Simplify the initialization of built-in extensions.\n\nFossilOrigin-Name: 729f2397358d0382e255ba0058bf70bc9ed410b7621a67466da13de437d3ba5c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d1ba026d882f070b351280028e2fa88a3cca59b46d4683302e24c6677e0951b9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #if defined(SQLITE_ENABLE_ICU) || defined(SQLITE_ENABLE_ICU_COLLATIONS)",
          "26: # include \"sqliteicu.h\"",
          "27: #endif",
          "28: #ifdef SQLITE_ENABLE_JSON1",
          "29: int sqlite3Json1Init(sqlite3*);",
          "30: #endif",
          "31: #ifdef SQLITE_ENABLE_STMTVTAB",
          "32: int sqlite3StmtVtabInit(sqlite3*);",
          "33: #endif",
          "34: #ifdef SQLITE_ENABLE_FTS5",
          "36: #endif",
          "38: #ifndef SQLITE_AMALGAMATION",
          "",
          "[Removed Lines]",
          "35: int sqlite3Fts5Init(sqlite3*);",
          "",
          "[Added Lines]",
          "34: static int sqlite3TestExtInit(sqlite3 *db){",
          "35:   (void)db;",
          "36:   return sqlite3FaultSim(500);",
          "37: }",
          "44: #ifdef SQLITE_ENABLE_FTS1",
          "45: int sqlite3Fts1Init(sqlite3*);",
          "46: #endif",
          "47: #ifdef SQLITE_ENABLE_FTS2",
          "48: int sqlite3Fts2Init(sqlite3*);",
          "49: #endif",
          "50: #ifdef SQLITE_ENABLE_FTS5",
          "51: int sqlite3Fts5Init(sqlite3*);",
          "52: #endif",
          "64: static int (*const sqlite3BuiltinExtensions[])(sqlite3*) = {",
          "65: #ifdef SQLITE_ENABLE_FTS1",
          "66:   sqlite3Fts1Init,",
          "67: #endif",
          "68: #ifdef SQLITE_ENABLE_FTS2",
          "69:   sqlite3Fts2Init,",
          "70: #endif",
          "71: #ifdef SQLITE_ENABLE_FTS3",
          "72:   sqlite3Fts3Init,",
          "73: #endif",
          "75:   sqlite3Fts5Init,",
          "76: #endif",
          "77: #if defined(SQLITE_ENABLE_ICU) || defined(SQLITE_ENABLE_ICU_COLLATIONS)",
          "78:   sqlite3IcuInit,",
          "80: #ifdef SQLITE_ENABLE_RTREE",
          "81:   sqlite3RtreeInit,",
          "82: #endif",
          "83: #ifdef SQLITE_ENABLE_DBPAGE_VTAB",
          "84:   sqlite3DbpageRegister,",
          "85: #endif",
          "86: #ifdef SQLITE_ENABLE_DBSTAT_VTAB",
          "87:   sqlite3DbstatRegister,",
          "88: #endif",
          "89:   sqlite3TestExtInit,",
          "90: #ifdef SQLITE_ENABLE_JSON1",
          "91:   sqlite3Json1Init,",
          "92: #endif",
          "93: #ifdef SQLITE_ENABLE_STMTVTAB",
          "94:   sqlite3StmtVtabInit,",
          "95: #endif",
          "96: #ifdef SQLITE_ENABLE_BYTECODE_VTAB",
          "97:   sqlite3VdbeBytecodeVtabInit,",
          "98: #endif",
          "99: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3282:   sqlite3RegisterPerConnectionBuiltinFunctions(db);",
          "3283:   rc = sqlite3_errcode(db);",
          "3291:   }",
          "",
          "[Removed Lines]",
          "3285: #ifdef SQLITE_ENABLE_FTS5",
          "3289:   if( !db->mallocFailed && rc==SQLITE_OK ){",
          "3290:     rc = sqlite3Fts5Init(db);",
          "3292: #endif",
          "",
          "[Added Lines]",
          "3351:   for(i=0; rc==SQLITE_OK && i<ArraySize(sqlite3BuiltinExtensions); i++){",
          "3352:     rc = sqlite3BuiltinExtensions[i](db);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3302:     }",
          "3303:   }",
          "3367: #ifdef SQLITE_ENABLE_INTERNAL_FUNCTIONS",
          "",
          "[Removed Lines]",
          "3305: #ifdef SQLITE_ENABLE_FTS1",
          "3306:   if( !db->mallocFailed ){",
          "3307:     extern int sqlite3Fts1Init(sqlite3*);",
          "3308:     rc = sqlite3Fts1Init(db);",
          "3309:   }",
          "3310: #endif",
          "3312: #ifdef SQLITE_ENABLE_FTS2",
          "3313:   if( !db->mallocFailed && rc==SQLITE_OK ){",
          "3314:     extern int sqlite3Fts2Init(sqlite3*);",
          "3315:     rc = sqlite3Fts2Init(db);",
          "3316:   }",
          "3317: #endif",
          "3320:   if( !db->mallocFailed && rc==SQLITE_OK ){",
          "3321:     rc = sqlite3Fts3Init(db);",
          "3322:   }",
          "3323: #endif",
          "3325: #if defined(SQLITE_ENABLE_ICU) || defined(SQLITE_ENABLE_ICU_COLLATIONS)",
          "3326:   if( !db->mallocFailed && rc==SQLITE_OK ){",
          "3327:     rc = sqlite3IcuInit(db);",
          "3328:   }",
          "3329: #endif",
          "3331: #ifdef SQLITE_ENABLE_RTREE",
          "3332:   if( !db->mallocFailed && rc==SQLITE_OK){",
          "3333:     rc = sqlite3RtreeInit(db);",
          "3334:   }",
          "3335: #endif",
          "3337: #ifdef SQLITE_ENABLE_DBPAGE_VTAB",
          "3338:   if( !db->mallocFailed && rc==SQLITE_OK){",
          "3339:     rc = sqlite3DbpageRegister(db);",
          "3340:   }",
          "3341: #endif",
          "3343: #ifdef SQLITE_ENABLE_DBSTAT_VTAB",
          "3344:   if( !db->mallocFailed && rc==SQLITE_OK){",
          "3345:     rc = sqlite3DbstatRegister(db);",
          "3346:   }",
          "3347: #endif",
          "3349: #ifdef SQLITE_ENABLE_JSON1",
          "3350:   if( !db->mallocFailed && rc==SQLITE_OK){",
          "3351:     rc = sqlite3Json1Init(db);",
          "3352:   }",
          "3353: #endif",
          "3355: #ifdef SQLITE_ENABLE_STMTVTAB",
          "3356:   if( !db->mallocFailed && rc==SQLITE_OK){",
          "3357:     rc = sqlite3StmtVtabInit(db);",
          "3358:   }",
          "3359: #endif",
          "3361: #ifdef SQLITE_ENABLE_BYTECODE_VTAB",
          "3362:   if( !db->mallocFailed && rc==SQLITE_OK){",
          "3363:     rc = sqlite3VdbeBytecodeVtabInit(db);",
          "3364:   }",
          "3365: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "19ca76af384cfbc05740f1a5e5f570127b5cec8e",
      "candidate_info": {
        "commit_hash": "19ca76af384cfbc05740f1a5e5f570127b5cec8e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/19ca76af384cfbc05740f1a5e5f570127b5cec8e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/select.c",
          "src/sqlite.h.in",
          "src/util.c",
          "src/vdbe.c",
          "test/atof1.test",
          "test/whereL.test"
        ],
        "message": "Merge recent changes from trunk.\n\nFossilOrigin-Name: 5962921fceaf2ec645379a5f1d18e2c2c13abbf92cf64606caee69f45a21c500",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/select.c||src/select.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/util.c||src/util.c",
          "src/vdbe.c||src/vdbe.c",
          "test/atof1.test||test/atof1.test",
          "test/whereL.test||test/whereL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4c21373c21c9b17b222ae65297a039a035e6ec6b505c00c33704e3c03f94f834",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2139: static Pgno btreePagecount(BtShared *pBt){",
          "2140:   assert( (pBt->nPage & 0x80000000)==0 || CORRUPT_DB );",
          "2142: }",
          "2143: u32 sqlite3BtreeLastPage(Btree *p){",
          "2144:   assert( sqlite3BtreeHoldsMutex(p) );",
          "2146: }",
          "",
          "[Removed Lines]",
          "2141:   return pBt->nPage & 0x7fffffff;",
          "2145:   return btreePagecount(p->pBt);",
          "",
          "[Added Lines]",
          "2141:   return pBt->nPage;",
          "2145:   return btreePagecount(p->pBt) & 0x7fffffff;",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4151: static void constInsert(",
          "4155: ){",
          "4156:   int i;",
          "4157:   assert( pColumn->op==TK_COLUMN );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4163:   assert( sqlite3ExprIsConstant(pValue) );",
          "4165:   if( !ExprHasProperty(pValue, EP_FixedCol) && sqlite3ExprAffinity(pValue)!=0 ){",
          "4166:     return;",
          "4167:   }",
          "4168:   if( !sqlite3IsBinary(sqlite3ExprCompareCollSeq(pConst->pParse,pExpr)) ){",
          "4169:     return;",
          "4170:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4174:   if( pConst->apExpr==0 ){",
          "4175:     pConst->nConst = 0;",
          "4176:   }else{",
          "4178:     pConst->apExpr[pConst->nConst*2-2] = pColumn;",
          "4179:     pConst->apExpr[pConst->nConst*2-1] = pValue;",
          "4180:   }",
          "",
          "[Removed Lines]",
          "4177:     if( ExprHasProperty(pValue, EP_FixedCol) ) pValue = pValue->pLeft;",
          "",
          "[Added Lines]",
          "4190:     if( ExprHasProperty(pValue, EP_FixedCol) ){",
          "4191:       pValue = pValue->pLeft;",
          "4192:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4200:   pLeft = pExpr->pLeft;",
          "4201:   assert( pRight!=0 );",
          "4202:   assert( pLeft!=0 );",
          "4216:   }",
          "4217: }",
          "",
          "[Removed Lines]",
          "4203:   if( pRight->op==TK_COLUMN",
          "4204:    && !ExprHasProperty(pRight, EP_FixedCol)",
          "4205:    && sqlite3ExprIsConstant(pLeft)",
          "4206:    && sqlite3IsBinary(sqlite3ExprCompareCollSeq(pConst->pParse,pExpr))",
          "4207:   ){",
          "4208:     constInsert(pConst, pRight, pLeft);",
          "4209:   }else",
          "4210:   if( pLeft->op==TK_COLUMN",
          "4211:    && !ExprHasProperty(pLeft, EP_FixedCol)",
          "4212:    && sqlite3ExprIsConstant(pRight)",
          "4213:    && sqlite3IsBinary(sqlite3ExprCompareCollSeq(pConst->pParse,pExpr))",
          "4214:   ){",
          "4215:     constInsert(pConst, pLeft, pRight);",
          "",
          "[Added Lines]",
          "4218:   if( pRight->op==TK_COLUMN && sqlite3ExprIsConstant(pLeft) ){",
          "4219:     constInsert(pConst,pRight,pLeft,pExpr);",
          "4220:   }",
          "4221:   if( pLeft->op==TK_COLUMN && sqlite3ExprIsConstant(pRight) ){",
          "4222:     constInsert(pConst,pLeft,pRight,pExpr);",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "411:   }else{",
          "412:     int i;",
          "413:     incr = 2;",
          "414:     assert( SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );",
          "415:     testcase( enc==SQLITE_UTF16LE );",
          "416:     testcase( enc==SQLITE_UTF16BE );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "414:     length &= ~1;",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "499:     }else{",
          "500:       c = 's';",
          "501:     }",
          "503:     for(i=0; i<25 && i<pMem->n; i++){",
          "504:       sqlite3_str_appendf(pStr, \"%02X\", ((int)pMem->z[i] & 0xFF));",
          "505:     }",
          "",
          "[Removed Lines]",
          "502:     sqlite3_str_appendf(pStr, \"%cx\", c);",
          "",
          "[Added Lines]",
          "502:     sqlite3_str_appendf(pStr, \"%cx[\", c);",
          "",
          "---------------"
        ],
        "test/atof1.test||test/atof1.test": [
          "File: test/atof1.test -> test/atof1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:   } {1}",
          "57: }",
          "60: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: # 2020-01-08 ticket 9eda2697f5cc1aba",
          "60: # When running sqlite3AtoF() on a blob with an odd number of bytes using",
          "61: # UTF16, ignore the last byte so that the string has an integer number of",
          "62: # UTF16 code points.",
          "63: #",
          "64: reset_db",
          "65: do_execsql_test atof1-2.10 {",
          "66:   PRAGMA encoding = 'UTF16be';",
          "67:   CREATE TABLE t1(a, b);",
          "68:   INSERT INTO t1(rowid,a) VALUES (1,x'00'),(2,3);",
          "69:   SELECT substr(a,',') is true FROM t1 ORDER BY rowid;",
          "70: } {0 1}",
          "71: do_execsql_test atof1-2.20 {",
          "72:   SELECT substr(a,',') is true FROM t1 ORDER BY rowid DESC;",
          "73: } {1 0}",
          "74: do_execsql_test atof1-2.30 {",
          "75:   CREATE INDEX i1 ON t1(a);",
          "76:   SELECT count(*) FROM t1 WHERE substr(a,',');",
          "77: } {1}",
          "",
          "---------------"
        ],
        "test/whereL.test||test/whereL.test": [
          "File: test/whereL.test -> test/whereL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:   SELECT x.a FROM x JOIN y ON x.c = y.a WHERE x.b = 1 AND x.b = 1;",
          "123: } {}",
          "125: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125: # 2020-01-07: ticket 82ac75ba0093e5dc",
          "126: # Incorrect join result due to mishandling of affinity in constant",
          "127: # propagation.",
          "128: #",
          "129: reset_db",
          "130: do_execsql_test 500 {",
          "131:   PRAGMA automatic_index=OFF;",
          "132:   CREATE TABLE t0(c0);",
          "133:   INSERT INTO t0 VALUES('0');",
          "134:   CREATE VIEW v0(c0) AS SELECT CAST(0 AS INT) FROM t0;",
          "135:   SELECT 200, * FROM t0, v0 WHERE 0 = t0.c0 AND t0.c0 = v0.c0;",
          "136: } {}",
          "137: do_execsql_test 510 {",
          "138:   SELECT 200, * FROM t0, v0 WHERE t0.c0 = 0 AND t0.c0 = v0.c0;",
          "139: } {}",
          "140: do_execsql_test 520 {",
          "141:   SELECT 200, * FROM t0, v0 WHERE 0 = t0.c0 AND v0.c0 = t0.c0;",
          "142: } {}",
          "143: do_execsql_test 530 {",
          "144:   SELECT 200, * FROM t0, v0 WHERE t0.c0 = 0 AND v0.c0 = t0.c0;",
          "145: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ffe421c76ad11c29287cbabe3548a7d95569ac37",
      "candidate_info": {
        "commit_hash": "ffe421c76ad11c29287cbabe3548a7d95569ac37",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ffe421c76ad11c29287cbabe3548a7d95569ac37",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c",
          "src/sqliteInt.h"
        ],
        "message": "Remove unused constant SQLITE_FUNC_COALESCE.\n\nFossilOrigin-Name: a116b20f863e9732cd08fbfbb1aa48204a17d611c9c1edde85dcf59310bde782",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fda57d4d2f1499c861d43026aa9362d1a30d67c9c002ebf5b0cdc25251537fbb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1980:     FUNCTION(upper,              1, 0, 0, upperFunc        ),",
          "1981:     FUNCTION(lower,              1, 0, 0, lowerFunc        ),",
          "1982:     FUNCTION(hex,                1, 0, 0, hexFunc          ),",
          "1984:     VFUNCTION(random,            0, 0, 0, randomFunc       ),",
          "1985:     VFUNCTION(randomblob,        1, 0, 0, randomBlob       ),",
          "1986:     FUNCTION(nullif,             2, 0, 1, nullifFunc       ),",
          "",
          "[Removed Lines]",
          "1983:     INLINE_FUNC(ifnull,          2, INLINEFUNC_coalesce, SQLITE_FUNC_COALESCE),",
          "",
          "[Added Lines]",
          "1983:     INLINE_FUNC(ifnull,          2, INLINEFUNC_coalesce, 0 ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2020: #endif",
          "2021:     FUNCTION(coalesce,           1, 0, 0, 0                ),",
          "2022:     FUNCTION(coalesce,           0, 0, 0, 0                ),",
          "2024:   };",
          "2025: #ifndef SQLITE_OMIT_ALTERTABLE",
          "2026:   sqlite3AlterFunctions();",
          "",
          "[Removed Lines]",
          "2023:     INLINE_FUNC(coalesce,       -1, INLINEFUNC_coalesce, SQLITE_FUNC_COALESCE),",
          "",
          "[Added Lines]",
          "2023:     INLINE_FUNC(coalesce,       -1, INLINEFUNC_coalesce, 0 ),",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    },
    {
      "candidate_hash": "5d762b2d1d5abc0fe8f438ee7e588bb29f830ab8",
      "candidate_info": {
        "commit_hash": "5d762b2d1d5abc0fe8f438ee7e588bb29f830ab8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5d762b2d1d5abc0fe8f438ee7e588bb29f830ab8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/update.test"
        ],
        "message": "Make a hard copy of strings in constraint checks prior to applying OP_RealAffinity, to avoid problems with a pointer accounting assert. This change is not strictly necessary - the correct answer is obtained without it and no UB occurs - however the pointer accounting asserts are useful to prevent other problems so it is a simple matter to bring this piece into compliance.  Ticket [5ad2aa6921faa1ee]\n\nFossilOrigin-Name: 89a9dad6330270a4c3b962f86a208088d2ea9883c7d291351a77f058e0ed8b0c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/update.test||test/update.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ef604882a275d3d5ebd4d5a08e3fe43e148f169b7d5c3a81464fbe7f54f3582a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3674:           }else",
          "3676:           if( pCol->affinity==SQLITE_AFF_REAL ){",
          "3678:             sqlite3VdbeAddOp1(v, OP_RealAffinity, target);",
          "3679:             return target;",
          "3680:           }else{",
          "",
          "[Removed Lines]",
          "3677:             sqlite3VdbeAddOp2(v, OP_SCopy, iSrc, target);",
          "",
          "[Added Lines]",
          "3677:             sqlite3VdbeAddOp2(v, OP_Copy, iSrc, target);",
          "",
          "---------------"
        ],
        "test/update.test||test/update.test": [
          "File: test/update.test -> test/update.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "656:   SELECT * FROM t1;",
          "657: } {2 3}",
          "661: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "659: # 2019-12-22 ticket 5ad2aa6921faa1ee",
          "660: # Make a hard-copy of values that need to be run through OP_RealAffinity",
          "661: # rather than a soft-copy.  This is not strictly necessary, but it avoids",
          "662: # a memory-accounting assert().",
          "663: #",
          "664: reset_db",
          "665: do_execsql_test update-18.10 {",
          "666:   PRAGMA encoding = 'UTF16';",
          "667:   CREATE TABLE t0(c0 REAL, c1);",
          "668:   INSERT INTO t0(c0,c1) VALUES('xyz',11),('uvw',22);",
          "669:   CREATE INDEX i0 ON t0(c1) WHERE c0 GLOB 3;",
          "670:   CREATE INDEX i1 ON t0(c0,c1) WHERE typeof(c0)='text' AND typeof(c1)='integer';",
          "671:   UPDATE t0 SET c1=345;",
          "672:   SELECT * FROM t0;",
          "673: } {xyz 345 uvw 345}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16dc07f7568bb2063d159fb41ab68ccf749c5e84",
      "candidate_info": {
        "commit_hash": "16dc07f7568bb2063d159fb41ab68ccf749c5e84",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/16dc07f7568bb2063d159fb41ab68ccf749c5e84",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h"
        ],
        "message": "Minor fix to a comment.  No code changes.\n\nFossilOrigin-Name: efdbb2b499bda8ffcfe54f5d6ece08a2c58fe7a490d9550785d806bd404abb8c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d08d3405878d394e08e5d3af281246edfbd81ca74cc8d16458808591512fb93d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    }
  ]
}