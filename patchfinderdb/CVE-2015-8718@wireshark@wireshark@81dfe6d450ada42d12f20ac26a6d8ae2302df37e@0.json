{
  "cve_id": "CVE-2015-8718",
  "cve_desc": "Double free vulnerability in epan/dissectors/packet-nlm.c in the NLM dissector in Wireshark 1.12.x before 1.12.9 and 2.0.x before 2.0.1, when the \"Match MSG/RES packets for async NLM\" option is enabled, allows remote attackers to cause a denial of service (application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "81dfe6d450ada42d12f20ac26a6d8ae2302df37e",
  "patch_info": {
    "commit_hash": "81dfe6d450ada42d12f20ac26a6d8ae2302df37e",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/81dfe6d450ada42d12f20ac26a6d8ae2302df37e",
    "files": [
      "epan/dissectors/packet-nlm.c"
    ],
    "message": "NLM: fix double memory free when using \"Match MSG/RES packets for async NLM\" option\n\nChange-Id: Ie4f5f8e1ccf9d7b6c7fbee6126697c65f2cc17df\nReviewed-on: https://code.wireshark.org/review/11431\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-nlm.c||epan/dissectors/packet-nlm.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-nlm.c||epan/dissectors/packet-nlm.c": [
      "File: epan/dissectors/packet-nlm.c -> epan/dissectors/packet-nlm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "117: {",
      "118:  nlm_msg_res_unmatched_data *umd = (nlm_msg_res_unmatched_data *)value;",
      "121:  g_free(umd);",
      "122: }",
      "",
      "[Removed Lines]",
      "120:  g_free((gpointer)umd->cookie);",
      "",
      "[Added Lines]",
      "120:  wmem_free(NULL, (gpointer)umd->cookie);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "241:  old_umd=(nlm_msg_res_unmatched_data *)g_hash_table_lookup(nlm_msg_res_unmatched, (gconstpointer)&umd);",
      "242:  if(old_umd){",
      "252:   g_hash_table_remove(nlm_msg_res_unmatched, (gconstpointer)old_umd);",
      "255:  }",
      "256: }",
      "",
      "[Removed Lines]",
      "243:   nlm_msg_res_matched_data *md;",
      "245:   md=(nlm_msg_res_matched_data *)g_malloc(sizeof(nlm_msg_res_matched_data));",
      "246:   md->req_frame=old_umd->req_frame;",
      "247:   md->rep_frame=pinfo->fd->num;",
      "248:   md->ns=old_umd->ns;",
      "249:   g_hash_table_insert(nlm_msg_res_matched, GINT_TO_POINTER(md->req_frame), (gpointer)md);",
      "250:   g_hash_table_insert(nlm_msg_res_matched, GINT_TO_POINTER(md->rep_frame), (gpointer)md);",
      "253:   g_free((gpointer)old_umd->cookie);",
      "254:   g_free(old_umd);",
      "",
      "[Added Lines]",
      "243:   nlm_msg_res_matched_data *md_req, *md_rep;",
      "245:   md_req=(nlm_msg_res_matched_data *)g_malloc(sizeof(nlm_msg_res_matched_data));",
      "246:   md_req->req_frame=old_umd->req_frame;",
      "247:   md_req->rep_frame=pinfo->fd->num;",
      "248:   md_req->ns=old_umd->ns;",
      "249:   md_rep=(nlm_msg_res_matched_data *)g_memdup(md_req, sizeof(nlm_msg_res_matched_data));",
      "250:   g_hash_table_insert(nlm_msg_res_matched, GINT_TO_POINTER(md_req->req_frame), (gpointer)md_req);",
      "251:   g_hash_table_insert(nlm_msg_res_matched, GINT_TO_POINTER(md_rep->rep_frame), (gpointer)md_rep);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "272:  old_umd=(nlm_msg_res_unmatched_data *)g_hash_table_lookup(nlm_msg_res_unmatched, (gconstpointer)umd);",
      "273:  if(old_umd){",
      "274:   g_hash_table_remove(nlm_msg_res_unmatched, (gconstpointer)old_umd);",
      "277:  }",
      "",
      "[Removed Lines]",
      "275:   g_free((gpointer)old_umd->cookie);",
      "276:   g_free(old_umd);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "851782caa51b4fff93937b9460e79016fe5a6e2d",
      "candidate_info": {
        "commit_hash": "851782caa51b4fff93937b9460e79016fe5a6e2d",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/851782caa51b4fff93937b9460e79016fe5a6e2d",
        "files": [
          "epan/dissectors/packet-nlm.c"
        ],
        "message": "NLM: fix double memory free when using \"Match MSG/RES packets for async NLM\" option\n\nChange-Id: Ie4f5f8e1ccf9d7b6c7fbee6126697c65f2cc17df\nReviewed-on: https://code.wireshark.org/review/11431\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\n(cherry picked from commit 81dfe6d450ada42d12f20ac26a6d8ae2302df37e)\nReviewed-on: https://code.wireshark.org/review/11438",
        "before_after_code_files": [
          "epan/dissectors/packet-nlm.c||epan/dissectors/packet-nlm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-nlm.c||epan/dissectors/packet-nlm.c"
          ],
          "candidate": [
            "epan/dissectors/packet-nlm.c||epan/dissectors/packet-nlm.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-nlm.c||epan/dissectors/packet-nlm.c": [
          "File: epan/dissectors/packet-nlm.c -> epan/dissectors/packet-nlm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117: {",
          "118:  nlm_msg_res_unmatched_data *umd = (nlm_msg_res_unmatched_data *)value;",
          "121:  g_free(umd);",
          "122: }",
          "",
          "[Removed Lines]",
          "120:  g_free((gpointer)umd->cookie);",
          "",
          "[Added Lines]",
          "120:  wmem_free(NULL, (gpointer)umd->cookie);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "241:  old_umd=(nlm_msg_res_unmatched_data *)g_hash_table_lookup(nlm_msg_res_unmatched, (gconstpointer)&umd);",
          "242:  if(old_umd){",
          "252:   g_hash_table_remove(nlm_msg_res_unmatched, (gconstpointer)old_umd);",
          "255:  }",
          "256: }",
          "",
          "[Removed Lines]",
          "243:   nlm_msg_res_matched_data *md;",
          "245:   md=(nlm_msg_res_matched_data *)g_malloc(sizeof(nlm_msg_res_matched_data));",
          "246:   md->req_frame=old_umd->req_frame;",
          "247:   md->rep_frame=pinfo->fd->num;",
          "248:   md->ns=old_umd->ns;",
          "249:   g_hash_table_insert(nlm_msg_res_matched, GINT_TO_POINTER(md->req_frame), (gpointer)md);",
          "250:   g_hash_table_insert(nlm_msg_res_matched, GINT_TO_POINTER(md->rep_frame), (gpointer)md);",
          "253:   g_free((gpointer)old_umd->cookie);",
          "254:   g_free(old_umd);",
          "",
          "[Added Lines]",
          "243:   nlm_msg_res_matched_data *md_req, *md_rep;",
          "245:   md_req=(nlm_msg_res_matched_data *)g_malloc(sizeof(nlm_msg_res_matched_data));",
          "246:   md_req->req_frame=old_umd->req_frame;",
          "247:   md_req->rep_frame=pinfo->fd->num;",
          "248:   md_req->ns=old_umd->ns;",
          "249:   md_rep=(nlm_msg_res_matched_data *)g_memdup(md_req, sizeof(nlm_msg_res_matched_data));",
          "250:   g_hash_table_insert(nlm_msg_res_matched, GINT_TO_POINTER(md_req->req_frame), (gpointer)md_req);",
          "251:   g_hash_table_insert(nlm_msg_res_matched, GINT_TO_POINTER(md_rep->rep_frame), (gpointer)md_rep);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "272:  old_umd=(nlm_msg_res_unmatched_data *)g_hash_table_lookup(nlm_msg_res_unmatched, (gconstpointer)umd);",
          "273:  if(old_umd){",
          "274:   g_hash_table_remove(nlm_msg_res_unmatched, (gconstpointer)old_umd);",
          "277:  }",
          "",
          "[Removed Lines]",
          "275:   g_free((gpointer)old_umd->cookie);",
          "276:   g_free(old_umd);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "916dfc5895a3b18572d9128fa686ce3d32f9810a",
      "candidate_info": {
        "commit_hash": "916dfc5895a3b18572d9128fa686ce3d32f9810a",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/916dfc5895a3b18572d9128fa686ce3d32f9810a",
        "files": [
          "epan/dissectors/packet-nlm.c"
        ],
        "message": "NLM: fix double memory free when using \"Match MSG/RES packets for async NLM\" option\n\nChange-Id: I8ac8bbb7830a49c1a0973b16378515b00a1a7b65\nReviewed-on: https://code.wireshark.org/review/11432\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-nlm.c||epan/dissectors/packet-nlm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-nlm.c||epan/dissectors/packet-nlm.c"
          ],
          "candidate": [
            "epan/dissectors/packet-nlm.c||epan/dissectors/packet-nlm.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-nlm.c||epan/dissectors/packet-nlm.c": [
          "File: epan/dissectors/packet-nlm.c -> epan/dissectors/packet-nlm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "119: {",
          "120:  nlm_msg_res_unmatched_data *umd = (nlm_msg_res_unmatched_data *)value;",
          "123:  g_free(umd);",
          "125:  return TRUE;",
          "",
          "[Removed Lines]",
          "122:  g_free((gpointer)umd->cookie);",
          "",
          "[Added Lines]",
          "122:  wmem_free(NULL, (gpointer)umd->cookie);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "256:  old_umd=(nlm_msg_res_unmatched_data *)g_hash_table_lookup(nlm_msg_res_unmatched, (gconstpointer)&umd);",
          "257:  if(old_umd){",
          "267:   g_hash_table_remove(nlm_msg_res_unmatched, (gconstpointer)old_umd);",
          "269:   g_free(old_umd);",
          "270:  }",
          "271: }",
          "",
          "[Removed Lines]",
          "258:   nlm_msg_res_matched_data *md;",
          "260:   md=(nlm_msg_res_matched_data *)g_malloc(sizeof(nlm_msg_res_matched_data));",
          "261:   md->req_frame=old_umd->req_frame;",
          "262:   md->rep_frame=pinfo->fd->num;",
          "263:   md->ns=old_umd->ns;",
          "264:   g_hash_table_insert(nlm_msg_res_matched, GINT_TO_POINTER(md->req_frame), (gpointer)md);",
          "265:   g_hash_table_insert(nlm_msg_res_matched, GINT_TO_POINTER(md->rep_frame), (gpointer)md);",
          "268:   g_free((gpointer)old_umd->cookie);",
          "",
          "[Added Lines]",
          "258:   nlm_msg_res_matched_data *md_req, *md_rep;",
          "260:   md_req=(nlm_msg_res_matched_data *)g_malloc(sizeof(nlm_msg_res_matched_data));",
          "261:   md_req->req_frame=old_umd->req_frame;",
          "262:   md_req->rep_frame=pinfo->fd->num;",
          "263:   md_req->ns=old_umd->ns;",
          "264:   md_rep=(nlm_msg_res_matched_data *)g_memdup(md_req, sizeof(nlm_msg_res_matched_data));",
          "265:   g_hash_table_insert(nlm_msg_res_matched, GINT_TO_POINTER(md_req->req_frame), (gpointer)md_req);",
          "266:   g_hash_table_insert(nlm_msg_res_matched, GINT_TO_POINTER(md_rep->rep_frame), (gpointer)md_rep);",
          "269:   wmem_free(NULL, (gpointer)old_umd->cookie);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "287:  old_umd=(nlm_msg_res_unmatched_data *)g_hash_table_lookup(nlm_msg_res_unmatched, (gconstpointer)umd);",
          "288:  if(old_umd){",
          "289:   g_hash_table_remove(nlm_msg_res_unmatched, (gconstpointer)old_umd);",
          "291:   g_free(old_umd);",
          "292:  }",
          "",
          "[Removed Lines]",
          "290:   g_free((gpointer)old_umd->cookie);",
          "",
          "[Added Lines]",
          "291:   wmem_free(NULL, (gpointer)old_umd->cookie);",
          "",
          "---------------"
        ]
      }
    }
  ]
}