{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d6f252490e126360ddbd0185f450773679ae9efa",
      "candidate_info": {
        "commit_hash": "d6f252490e126360ddbd0185f450773679ae9efa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d6f252490e126360ddbd0185f450773679ae9efa",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Incremental improvements to tabular output modes in the CLI.  The \"markdown\" and \"table\" modes no have headers turned on by default.\n\nFossilOrigin-Name: af28bff91ad7e2d69db0052323c9c05c75a41d4134974bd1305f1c4f579d3558",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 77933dc4dbe0e0af3b13a14293a8bd684edc5056f4ae9291c6f95d4433bf90ce",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1992:     case MODE_Markdown:",
          "1993:     case MODE_Explain:",
          "1994:     case MODE_Column: {",
          "1997:       int showHdr;",
          "1998:       char *rowSep;",
          "1999:       char *colSep;",
          "2000:       char *rowStart;",
          "2002:       if( p->cMode==MODE_Column ){",
          "2005:         showHdr = p->showHeader;",
          "2006:         rowSep = p->rowSeparator;",
          "2007:         colSep = \"  \";",
          "2008:         rowStart = \"\";",
          "2009:       }else if( p->cMode==MODE_Explain ){",
          "2012:         showHdr = 1;",
          "2013:         rowSep = SEP_Row;",
          "2014:         colSep = \"  \";",
          "2015:         rowStart = \"\";",
          "2016:       }else{",
          "2020:         rowSep = \" |\\n\";",
          "2021:         colSep = \" | \";",
          "2022:         rowStart = \"| \";",
          "2023:       }",
          "2024:       if( p->cnt++==0 ){",
          "2025:         for(i=0; i<nArg; i++){",
          "2026:           int w, n;",
          "2027:           if( i<nWidth ){",
          "",
          "[Removed Lines]",
          "1995:       static const int aExplainWidths[] = {4, 13, 4, 4, 4, 13, 2, 13};",
          "1996:       const int *colWidth;",
          "2001:       int nWidth;",
          "2003:         colWidth = p->colWidth;",
          "2004:         nWidth = ArraySize(p->colWidth);",
          "2010:         colWidth = aExplainWidths;",
          "2011:         nWidth = ArraySize(aExplainWidths);",
          "2017:         colWidth = p->colWidth;",
          "2018:         nWidth = ArraySize(p->colWidth);",
          "2019:         showHdr = p->showHeader;",
          "",
          "[Added Lines]",
          "2010:         showHdr = 1;",
          "2022:         static const int aExplainWidths[] = {4, 13, 4, 4, 4, 13, 2, 13};",
          "2023:         const int *colWidth;",
          "2024:         int nWidth;",
          "2025:         if( p->cMode==MODE_Explain ){",
          "2026:           colWidth = aExplainWidths;",
          "2027:           nWidth = ArraySize(aExplainWidths);",
          "2028:         }else{",
          "2029:           colWidth = p->colWidth;",
          "2030:           nWidth = ArraySize(p->colWidth);",
          "2031:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2039:             p->actualWidth[i] = w;",
          "2040:           }",
          "2041:         }",
          "2042:         if( showHdr ){",
          "2046:           fputs(rowStart, p->out);",
          "2047:           for(i=0; i<nArg; i++){",
          "2048:             int w;",
          "",
          "[Removed Lines]",
          "2043:           if( p->cMode==MODE_Table ){",
          "2044:             print_row_separator(p, nArg, \"+\");",
          "2045:           }",
          "",
          "[Added Lines]",
          "2049:         if( p->cMode==MODE_Table ){",
          "2050:           print_row_separator(p, nArg, \"+\");",
          "2051:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2087:         }else{",
          "2088:            w = 10;",
          "2089:         }",
          "2096:           }",
          "2098:         }",
          "2099:         utf8_width_print(p->out, w, azArg[i] ? azArg[i] : p->nullValue);",
          "2100:         utf8_printf(p->out, \"%s\", i==nArg-1 ? rowSep : colSep);",
          "",
          "[Removed Lines]",
          "2090:         if( p->cMode==MODE_Explain && azArg[i] && strlenChar(azArg[i])>w ){",
          "2091:           w = strlenChar(azArg[i]);",
          "2092:         }",
          "2093:         if( i==1 && p->aiIndent && p->pStmt ){",
          "2094:           if( p->iIndent<p->nIndent ){",
          "2095:             utf8_printf(p->out, \"%*.s\", p->aiIndent[p->iIndent], \"\");",
          "2097:           p->iIndent++;",
          "",
          "[Added Lines]",
          "2097:         if( p->cMode==MODE_Explain ){",
          "2098:           if( azArg[i] && strlenChar(azArg[i])>w ){",
          "2099:             w = strlenChar(azArg[i]);",
          "2100:           }",
          "2101:           if( i==1 && p->aiIndent && p->pStmt ){",
          "2102:             if( p->iIndent<p->nIndent ){",
          "2103:               utf8_printf(p->out, \"%*.s\", p->aiIndent[p->iIndent], \"\");",
          "2104:             }",
          "2105:             p->iIndent++;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd853c382a48304f6f6c4c392e4db8dccbb86b16",
      "candidate_info": {
        "commit_hash": "dd853c382a48304f6f6c4c392e4db8dccbb86b16",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dd853c382a48304f6f6c4c392e4db8dccbb86b16",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "In the CLI, only interrupt tabular outputs at the end of a line.  And print \"Interrupt\" on a line after stopping the output.\n\nFossilOrigin-Name: f3bd689336fecaa1e2928b826c6aedb0178d322f4633ac429dd1ae6fbc08e7f1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 95379da0e1ad5110648a5b3af24e7caab66a6f1ad6efdf374c83ae4ef1fed515",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3137:     }",
          "3138:   }",
          "3139:   for(i=nColumn, j=0; i<nTotal; i++, j++){",
          "3141:     if( j==0 && p->cMode!=MODE_Column ){",
          "3142:       utf8_printf(p->out, \"%s\", p->cMode==MODE_Box?BOX_13\" \":\"| \");",
          "3143:     }",
          "",
          "[Removed Lines]",
          "3140:     if( seenInterrupt ) goto columnar_end;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3149:     if( j==nColumn-1 ){",
          "3150:       utf8_printf(p->out, \"%s\", rowSep);",
          "3151:       j = -1;",
          "3152:     }else{",
          "3153:       utf8_printf(p->out, \"%s\", colSep);",
          "3154:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3151:       if( seenInterrupt ) goto columnar_end;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3159:     print_box_row_separator(p, nColumn, BOX_12, BOX_124, BOX_14);",
          "3160:   }",
          "3161: columnar_end:",
          "3162:   sqlite3_free_table(azData);",
          "3163: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3162:   if( seenInterrupt ){",
          "3163:     utf8_printf(p->out, \"Interrupt\\n\");",
          "3164:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67c826536fba0cf3f430fc1abe42e0795de50de5",
      "candidate_info": {
        "commit_hash": "67c826536fba0cf3f430fc1abe42e0795de50de5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/67c826536fba0cf3f430fc1abe42e0795de50de5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/resolve.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/sqliteInt.h"
        ],
        "message": "Refactor the names of the new controls for restricting what actions the schema can take behind the application's back.\n\nFossilOrigin-Name: 65d7d39a858c51ffd781f5a6335e029895e597aeb1e1ccdadea8ce79c8ad412f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/resolve.c||src/resolve.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7a8d7ca726666f4384925f959df0d58f7622229e06f1b5e643a3caccd539bb6e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "887:         { SQLITE_DBCONFIG_DQS_DDL,               SQLITE_DqsDDL         },",
          "888:         { SQLITE_DBCONFIG_DQS_DML,               SQLITE_DqsDML         },",
          "889:         { SQLITE_DBCONFIG_LEGACY_FILE_FORMAT,    SQLITE_LegacyFileFmt  },",
          "892:       };",
          "893:       unsigned int i;",
          "",
          "[Removed Lines]",
          "890:         { SQLITE_DBCONFIG_UNSAFE_FUNC_IN_VIEW,   SQLITE_UnsafeInView   },",
          "891:         { SQLITE_DBCONFIG_VTAB_IN_VIEW,          SQLITE_VtabInView     },",
          "",
          "[Added Lines]",
          "890:         { SQLITE_DBCONFIG_ENABLE_UNSAFE_DDL,     SQLITE_UnsafeDDL      },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3128:                  | SQLITE_EnableTrigger",
          "3129:                  | SQLITE_EnableView",
          "3130:                  | SQLITE_CacheSpill",
          "",
          "[Removed Lines]",
          "3131:                  | SQLITE_UnsafeInView",
          "3132:                  | SQLITE_VtabInView",
          "",
          "[Added Lines]",
          "3130:                  | SQLITE_UnsafeDDL",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "891:          && !IN_RENAME_OBJECT",
          "892:         ){",
          "893:           if( (pDef->funcFlags & SQLITE_FUNC_DIRECT)!=0",
          "895:           ){",
          "902:             sqlite3ErrorMsg(pParse, \"%s() prohibited in triggers and views\",",
          "903:                             pDef->zName);",
          "",
          "[Removed Lines]",
          "894:            || (pParse->db->flags & SQLITE_UnsafeInView)==0",
          "",
          "[Added Lines]",
          "894:            || (pParse->db->flags & SQLITE_UnsafeDDL)==0",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7165:         { \"enable_fkey\",        SQLITE_DBCONFIG_ENABLE_FKEY           },",
          "7166:         { \"enable_qpsg\",        SQLITE_DBCONFIG_ENABLE_QPSG           },",
          "7167:         { \"enable_trigger\",     SQLITE_DBCONFIG_ENABLE_TRIGGER        },",
          "7168:         { \"enable_view\",        SQLITE_DBCONFIG_ENABLE_VIEW           },",
          "7169:         { \"fts3_tokenizer\",     SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER },",
          "7170:         { \"legacy_alter_table\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE    },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7168:         { \"enable_unsafe_ddl\",  SQLITE_DBCONFIG_ENABLE_UNSAFE_DDL     },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7173:         { \"no_ckpt_on_close\",   SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE      },",
          "7174:         { \"reset_database\",     SQLITE_DBCONFIG_RESET_DATABASE        },",
          "7175:         { \"trigger_eqp\",        SQLITE_DBCONFIG_TRIGGER_EQP           },",
          "7178:         { \"writable_schema\",    SQLITE_DBCONFIG_WRITABLE_SCHEMA       },",
          "7179:     };",
          "7180:     int ii, v;",
          "",
          "[Removed Lines]",
          "7176:         { \"unsafe_func_in_view\",SQLITE_DBCONFIG_UNSAFE_FUNC_IN_VIEW   },",
          "7177:         { \"vtab_in_view\",       SQLITE_DBCONFIG_VTAB_IN_VIEW          },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1584: #define SQLITE_UnsafeInView   0x00000080  /* Allow functions with side-effect",
          "1586: #define SQLITE_VtabInView     0x00000100  /* Allow views and triggers to access",
          "",
          "[Added Lines]",
          "1584: #define SQLITE_UnsafeDDL      0x00000080  /* Allow unsafe functions and vtabs",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "46daa99b8d054d851e51e0eb5f12079b9791c491",
      "candidate_info": {
        "commit_hash": "46daa99b8d054d851e51e0eb5f12079b9791c491",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/46daa99b8d054d851e51e0eb5f12079b9791c491",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/window1.test"
        ],
        "message": "Avoid rewriting compound SELECT statements that use a different collation sequence for ORDER BY and record processing a second time if they contain window functions. Fix for [b706351c].\n\nFossilOrigin-Name: 32a88bdd4be5acdc1b80856bf6e32724dc3a467d5050bec0fe1a3dfedcc06f34",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 30c6d895b573d5f2a53487b3b7a0d20be7e382c7a0bc87336bd43fbd2fa89bf4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4621:   for(pX=p; pX && (pX->op==TK_ALL || pX->op==TK_SELECT); pX=pX->pPrior){}",
          "4622:   if( pX==0 ) return WRC_Continue;",
          "4623:   a = p->pOrderBy->a;",
          "4624:   for(i=p->pOrderBy->nExpr-1; i>=0; i--){",
          "4625:     if( a[i].pExpr->flags & EP_Collate ) break;",
          "4626:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4624: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "4630:   if( a[0].u.x.iOrderByCol ) return WRC_Continue;",
          "4631: #endif",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1917:       ) WHERE c>10;",
          "1918: } {15.0 30.0}",
          "1920: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1920: #-------------------------------------------------------------------------",
          "1921: reset_db",
          "1922: do_execsql_test 63.1 {",
          "1923:   CREATE TABLE t1(b, x);",
          "1924:   CREATE TABLE t2(c, d);",
          "1925:   CREATE TABLE t3(e, f);",
          "1926: }",
          "1928: do_execsql_test 63.2 {",
          "1929:   SELECT max(b) OVER(",
          "1930:       ORDER BY SUM(",
          "1931:         (SELECT c FROM t2 UNION SELECT x ORDER BY c)",
          "1932:       )",
          "1933:   ) FROM t1;",
          "1934: } {{}}",
          "1936: do_execsql_test 63.3 {",
          "1937:   SELECT sum(b) over(",
          "1938:       ORDER BY (",
          "1939:         SELECT max(b) OVER(",
          "1940:           ORDER BY sum(",
          "1941:             (SELECT x AS c UNION SELECT 1234 ORDER BY c)",
          "1942:           )",
          "1943:         ) AS e",
          "1944:         ORDER BY e",
          "1945:       )",
          "1946:     )",
          "1947:   FROM t1;",
          "1948: } {{}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0285d98de74baa44617ca67694385fbfd21127c9",
      "candidate_info": {
        "commit_hash": "0285d98de74baa44617ca67694385fbfd21127c9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0285d98de74baa44617ca67694385fbfd21127c9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Space to hold the \".width\" of columns in the CLI is now obtained from malloc() and hence is not limited in the number of columns supported.\n\nFossilOrigin-Name: 445ed5dab2c26e9f4a7fb5277abdba3359d23cf5318cfd0d8322162d9616ee7a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: af28bff91ad7e2d69db0052323c9c05c75a41d4134974bd1305f1c4f579d3558",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2027:           nWidth = ArraySize(aExplainWidths);",
          "2028:         }else{",
          "2029:           colWidth = p->colWidth;",
          "2031:         }",
          "2032:         for(i=0; i<nArg; i++){",
          "2033:           int w, n;",
          "",
          "[Removed Lines]",
          "2030:           nWidth = ArraySize(p->colWidth);",
          "",
          "[Added Lines]",
          "2031:           nWidth = p->nWidth;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9510:       raw_printf(p->out, \"\\n\");",
          "9511:     utf8_printf(p->out, \"%12.12s: %s\\n\",\"stats\", azBool[p->statsOn!=0]);",
          "9512:     utf8_printf(p->out, \"%12.12s: \", \"width\");",
          "9514:       raw_printf(p->out, \"%d \", p->colWidth[i]);",
          "9515:     }",
          "9516:     raw_printf(p->out, \"\\n\");",
          "",
          "[Removed Lines]",
          "9513:     for (i=0;i<(int)ArraySize(p->colWidth) && p->colWidth[i] != 0;i++) {",
          "",
          "[Added Lines]",
          "9514:     for (i=0;i<p->nWidth;i++) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "10059:   if( c=='w' && strncmp(azArg[0], \"width\", n)==0 ){",
          "10060:     int j;",
          "10061:     assert( nArg<=ArraySize(azArg) );",
          "10063:       p->colWidth[j-1] = (int)integerValue(azArg[j]);",
          "10064:     }",
          "10065:   }else",
          "",
          "[Removed Lines]",
          "10062:     for(j=1; j<nArg && j<ArraySize(p->colWidth); j++){",
          "",
          "[Added Lines]",
          "10063:     p->nWidth = nArg-1;",
          "10064:     p->colWidth = realloc(p->colWidth, p->nWidth*sizeof(int)*2);",
          "10065:     if( p->colWidth==0 && p->nWidth>0 ) shell_out_of_memory();",
          "10066:     if( p->nWidth ) p->actualWidth = &p->colWidth[p->nWidth];",
          "10067:     for(j=1; j<nArg; j++){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "11068:   for(i=0; i<argcToFree; i++) free(argvToFree[i]);",
          "11069:   free(argvToFree);",
          "11070: #endif",
          "11073:   memset(&data, 0, sizeof(data));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11076:   free(data.colWidth);",
          "",
          "---------------"
        ]
      }
    }
  ]
}