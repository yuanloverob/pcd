{
  "cve_id": "CVE-2019-15922",
  "cve_desc": "An issue was discovered in the Linux kernel before 5.0.9. There is a NULL pointer dereference for a pf data structure if alloc_disk fails in drivers/block/paride/pf.c.",
  "repo": "torvalds/linux",
  "patch_hash": "58ccd2d31e502c37e108b285bf3d343eb00c235b",
  "patch_info": {
    "commit_hash": "58ccd2d31e502c37e108b285bf3d343eb00c235b",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/58ccd2d31e502c37e108b285bf3d343eb00c235b",
    "files": [
      "drivers/block/paride/pf.c"
    ],
    "message": "paride/pf: Fix potential NULL pointer dereference\n\nSyzkaller report this:\n\npf: pf version 1.04, major 47, cluster 64, nice 0\npf: No ATAPI disk detected\nkasan: CONFIG_KASAN_INLINE enabled\nkasan: GPF could be caused by NULL-ptr deref or user memory access\ngeneral protection fault: 0000 [#1] SMP KASAN PTI\nCPU: 0 PID: 9887 Comm: syz-executor.0 Tainted: G         C        5.1.0-rc3+ #8\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014\nRIP: 0010:pf_init+0x7af/0x1000 [pf]\nCode: 46 77 d2 48 89 d8 48 c1 e8 03 80 3c 28 00 74 08 48 89 df e8 03 25 a6 d2 4c 8b 23 49 8d bc 24 80 05 00 00 48 89 f8 48 c1 e8 03 <80> 3c 28 00 74 05 e8 e6 24 a6 d2 49 8b bc 24 80 05 00 00 e8 79 34\nRSP: 0018:ffff8881abcbf998 EFLAGS: 00010202\nRAX: 00000000000000b0 RBX: ffffffffc1e4a8a8 RCX: ffffffffaec50788\nRDX: 0000000000039b10 RSI: ffffc9000153c000 RDI: 0000000000000580\nRBP: dffffc0000000000 R08: ffffed103ee44e59 R09: ffffed103ee44e59\nR10: 0000000000000001 R11: ffffed103ee44e58 R12: 0000000000000000\nR13: ffffffffc1e4b028 R14: 0000000000000000 R15: 0000000000000020\nFS:  00007f1b78a91700(0000) GS:ffff8881f7200000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00007f6d72b207f8 CR3: 00000001d5790004 CR4: 00000000007606f0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nPKRU: 55555554\nCall Trace:\n ? 0xffffffffc1e50000\n do_one_initcall+0xbc/0x47d init/main.c:901\n do_init_module+0x1b5/0x547 kernel/module.c:3456\n load_module+0x6405/0x8c10 kernel/module.c:3804\n __do_sys_finit_module+0x162/0x190 kernel/module.c:3898\n do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\nRIP: 0033:0x462e99\nCode: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48\nRSP: 002b:00007f1b78a90c58 EFLAGS: 00000246 ORIG_RAX: 0000000000000139\nRAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99\nRDX: 0000000000000000 RSI: 0000000020000180 RDI: 0000000000000003\nRBP: 00007f1b78a90c70 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000000 R11: 0000000000000246 R12: 00007f1b78a916bc\nR13: 00000000004bcefa R14: 00000000006f6fb0 R15: 0000000000000004\nModules linked in: pf(+) paride gpio_tps65218 tps65218 i2c_cht_wc ati_remote dc395x act_meta_skbtcindex act_ife ife ecdh_generic rc_xbox_dvd sky81452_regulator v4l2_fwnode leds_blinkm snd_usb_hiface comedi(C) aes_ti slhc cfi_cmdset_0020 mtd cfi_util sx8654 mdio_gpio of_mdio fixed_phy mdio_bitbang libphy alcor_pci matrix_keymap hid_uclogic usbhid scsi_transport_fc videobuf2_v4l2 videobuf2_dma_sg snd_soc_pcm179x_spi snd_soc_pcm179x_codec i2c_demux_pinctrl mdev snd_indigodj isl6405 mii enc28j60 cmac adt7316_i2c(C) adt7316(C) fmc_trivial fmc nf_reject_ipv4 authenc rc_dtt200u rtc_ds1672 dvb_usb_dibusb_mc dvb_usb_dibusb_mc_common dib3000mc dibx000_common dvb_usb_dibusb_common dvb_usb dvb_core videobuf2_common videobuf2_vmalloc videobuf2_memops regulator_haptic adf7242 mac802154 ieee802154 s5h1409 da9034_ts snd_intel8x0m wmi cx24120 usbcore sdhci_cadence sdhci_pltfm sdhci mmc_core joydev i2c_algo_bit scsi_transport_iscsi iscsi_boot_sysfs ves1820 lockd grace nfs_acl auth_rpcgss sunrp\n c\n ip_vs snd_soc_adau7002 snd_cs4281 snd_rawmidi gameport snd_opl3_lib snd_seq_device snd_hwdep snd_ac97_codec ad7418 hid_primax hid snd_soc_cs4265 snd_soc_core snd_pcm_dmaengine snd_pcm snd_timer ac97_bus snd_compress snd soundcore ti_adc108s102 eeprom_93cx6 i2c_algo_pca mlxreg_hotplug st_pressure st_sensors industrialio_triggered_buffer kfifo_buf industrialio v4l2_common videodev media snd_soc_adau_utils rc_pinnacle_grey rc_core pps_gpio leds_lm3692x nandcore ledtrig_pattern iptable_security iptable_raw iptable_mangle iptable_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 iptable_filter bpfilter ip6_vti ip_vti ip_gre ipip sit tunnel4 ip_tunnel hsr veth netdevsim vxcan batman_adv cfg80211 rfkill chnl_net caif nlmon dummy team bonding vcan bridge stp llc ip6_gre gre ip6_tunnel tunnel6 tun mousedev ppdev tpm kvm_intel kvm irqbypass crct10dif_pclmul crc32_pclmul crc32c_intel ghash_clmulni_intel aesni_intel ide_pci_generic aes_x86_64 piix crypto_simd input_leds psmouse cryp\n td\n glue_helper ide_core intel_agp serio_raw intel_gtt agpgart ata_generic i2c_piix4 pata_acpi parport_pc parport rtc_cmos floppy sch_fq_codel ip_tables x_tables sha1_ssse3 sha1_generic ipv6 [last unloaded: paride]\nDumping ftrace buffer:\n  (ftrace buffer empty)\n---[ end trace 7a818cf5f210d79e ]---\n\nIf alloc_disk fails in pf_init_units, pf->disk will be\nNULL, however in pf_detect and pf_exit, it's not check\nthis before free.It may result a NULL pointer dereference.\n\nAlso when register_blkdev failed, blk_cleanup_queue() and\nblk_mq_free_tag_set() should be called to free resources.\n\nReported-by: Hulk Robot <hulkci@huawei.com>\nFixes: 6ce59025f118 (\"paride/pf: cleanup queues when detection fails\")\nSigned-off-by: YueHaibing <yuehaibing@huawei.com>\n\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
    "before_after_code_files": [
      "drivers/block/paride/pf.c||drivers/block/paride/pf.c"
    ]
  },
  "patch_diff": {
    "drivers/block/paride/pf.c||drivers/block/paride/pf.c": [
      "File: drivers/block/paride/pf.c -> drivers/block/paride/pf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "763:  printk(\"%s: No ATAPI disk detected\\n\", name);",
      "764:  for (pf = units, unit = 0; unit < PF_UNITS; pf++, unit++) {",
      "765:   blk_cleanup_queue(pf->disk->queue);",
      "766:   pf->disk->queue = NULL;",
      "767:   blk_mq_free_tag_set(&pf->tag_set);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "765:   if (!pf->disk)",
      "766:    continue;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1029:  pf_busy = 0;",
      "1031:  if (register_blkdev(major, name)) {",
      "1033:    put_disk(pf->disk);",
      "1034:   return -EBUSY;",
      "1035:  }",
      "",
      "[Removed Lines]",
      "1032:   for (pf = units, unit = 0; unit < PF_UNITS; pf++, unit++)",
      "",
      "[Added Lines]",
      "1034:   for (pf = units, unit = 0; unit < PF_UNITS; pf++, unit++) {",
      "1035:    if (!pf->disk)",
      "1036:     continue;",
      "1037:    blk_cleanup_queue(pf->disk->queue);",
      "1038:    blk_mq_free_tag_set(&pf->tag_set);",
      "1040:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1051:  int unit;",
      "1052:  unregister_blkdev(major, name);",
      "1053:  for (pf = units, unit = 0; unit < PF_UNITS; pf++, unit++) {",
      "1054:   if (pf->present)",
      "1055:    del_gendisk(pf->disk);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1061:   if (!pf->disk)",
      "1062:    continue;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2011fccfb61bbd1d7c8864b2b3ed7012342e9ba3",
      "candidate_info": {
        "commit_hash": "2011fccfb61bbd1d7c8864b2b3ed7012342e9ba3",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/2011fccfb61bbd1d7c8864b2b3ed7012342e9ba3",
        "files": [
          "kernel/bpf/verifier.c"
        ],
        "message": "bpf: Support variable offset stack access from helpers\n\nCurrently there is a difference in how verifier checks memory access for\nhelper arguments for PTR_TO_MAP_VALUE and PTR_TO_STACK with regard to\nvariable part of offset.\n\ncheck_map_access, that is used for PTR_TO_MAP_VALUE, can handle variable\noffsets just fine, so that BPF program can call a helper like this:\n\n  some_helper(map_value_ptr + off, size);\n\n, where offset is unknown at load time, but is checked by program to be\nin a safe rage (off >= 0 && off + size < map_value_size).\n\nBut it's not the case for check_stack_boundary, that is used for\nPTR_TO_STACK, and same code with pointer to stack is rejected by\nverifier:\n\n  some_helper(stack_value_ptr + off, size);\n\nFor example:\n  0: (7a) *(u64 *)(r10 -16) = 0\n  1: (7a) *(u64 *)(r10 -8) = 0\n  2: (61) r2 = *(u32 *)(r1 +0)\n  3: (57) r2 &= 4\n  4: (17) r2 -= 16\n  5: (0f) r2 += r10\n  6: (18) r1 = 0xffff888111343a80\n  8: (85) call bpf_map_lookup_elem#1\n  invalid variable stack read R2 var_off=(0xfffffffffffffff0; 0x4)\n\nAdd support for variable offset access to check_stack_boundary so that\nif offset is checked by program to be in a safe range it's accepted by\nverifier.\n\nSigned-off-by: Andrey Ignatov <rdna@fb.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>",
        "before_after_code_files": [
          "kernel/bpf/verifier.c||kernel/bpf/verifier.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kernel/bpf/verifier.c||kernel/bpf/verifier.c": [
          "File: kernel/bpf/verifier.c -> kernel/bpf/verifier.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2157:     BPF_SIZE(insn->code), BPF_WRITE, -1, true);",
          "2158: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2160: static int __check_stack_boundary(struct bpf_verifier_env *env, u32 regno,",
          "2161:       int off, int access_size,",
          "2162:       bool zero_size_allowed)",
          "2163: {",
          "2164:  struct bpf_reg_state *reg = reg_state(env, regno);",
          "2166:  if (off >= 0 || off < -MAX_BPF_STACK || off + access_size > 0 ||",
          "2167:      access_size < 0 || (access_size == 0 && !zero_size_allowed)) {",
          "2168:   if (tnum_is_const(reg->var_off)) {",
          "2169:    verbose(env, \"invalid stack type R%d off=%d access_size=%d\\n\",",
          "2170:     regno, off, access_size);",
          "2171:   } else {",
          "2172:    char tn_buf[48];",
          "2174:    tnum_strn(tn_buf, sizeof(tn_buf), reg->var_off);",
          "2175:    verbose(env, \"invalid stack type R%d var_off=%s access_size=%d\\n\",",
          "2176:     regno, tn_buf, access_size);",
          "2177:   }",
          "2178:   return -EACCES;",
          "2179:  }",
          "2180:  return 0;",
          "2181: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2169: {",
          "2170:  struct bpf_reg_state *reg = reg_state(env, regno);",
          "2171:  struct bpf_func_state *state = func(env, reg);",
          "2174:  if (reg->type != PTR_TO_STACK) {",
          "",
          "[Removed Lines]",
          "2172:  int off, i, slot, spi;",
          "",
          "[Added Lines]",
          "2195:  int err, min_off, max_off, i, slot, spi;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2183:   return -EACCES;",
          "2184:  }",
          "2201:  }",
          "2203:  if (meta && meta->raw_mode) {",
          "",
          "[Removed Lines]",
          "2187:  if (!tnum_is_const(reg->var_off)) {",
          "2188:   char tn_buf[48];",
          "2190:   tnum_strn(tn_buf, sizeof(tn_buf), reg->var_off);",
          "2191:   verbose(env, \"invalid variable stack read R%d var_off=%s\\n\",",
          "2192:    regno, tn_buf);",
          "2193:   return -EACCES;",
          "2194:  }",
          "2195:  off = reg->off + reg->var_off.value;",
          "2196:  if (off >= 0 || off < -MAX_BPF_STACK || off + access_size > 0 ||",
          "2197:      access_size < 0 || (access_size == 0 && !zero_size_allowed)) {",
          "2198:   verbose(env, \"invalid stack type R%d off=%d access_size=%d\\n\",",
          "2199:    regno, off, access_size);",
          "2200:   return -EACCES;",
          "",
          "[Added Lines]",
          "2209:  if (tnum_is_const(reg->var_off)) {",
          "2210:   min_off = max_off = reg->var_off.value + reg->off;",
          "2211:   err = __check_stack_boundary(env, regno, min_off, access_size,",
          "2212:           zero_size_allowed);",
          "2213:   if (err)",
          "2214:    return err;",
          "2215:  } else {",
          "2216:   min_off = reg->smin_value + reg->off;",
          "2217:   max_off = reg->umax_value + reg->off;",
          "2218:   err = __check_stack_boundary(env, regno, min_off, access_size,",
          "2219:           zero_size_allowed);",
          "2220:   if (err)",
          "2221:    return err;",
          "2222:   err = __check_stack_boundary(env, regno, max_off, access_size,",
          "2223:           zero_size_allowed);",
          "2224:   if (err)",
          "2225:    return err;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2206:   return 0;",
          "2207:  }",
          "2210:   u8 *stype;",
          "2213:   spi = slot / BPF_REG_SIZE;",
          "2214:   if (state->allocated_stack <= slot)",
          "2215:    goto err;",
          "",
          "[Removed Lines]",
          "2209:  for (i = 0; i < access_size; i++) {",
          "2212:   slot = -(off + i) - 1;",
          "",
          "[Added Lines]",
          "2234:  for (i = min_off; i < max_off + access_size; i++) {",
          "2237:   slot = -i - 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2222:    goto mark;",
          "2223:   }",
          "2224: err:",
          "2227:   return -EACCES;",
          "2228: mark:",
          "",
          "[Removed Lines]",
          "2225:   verbose(env, \"invalid indirect read from stack off %d+%d size %d\\n\",",
          "2226:    off, i, access_size);",
          "",
          "[Added Lines]",
          "2250:   if (tnum_is_const(reg->var_off)) {",
          "2251:    verbose(env, \"invalid indirect read from stack off %d+%d size %d\\n\",",
          "2252:     min_off, i - min_off, access_size);",
          "2253:   } else {",
          "2254:    char tn_buf[48];",
          "2256:    tnum_strn(tn_buf, sizeof(tn_buf), reg->var_off);",
          "2257:    verbose(env, \"invalid indirect read from stack var_off %s+%d size %d\\n\",",
          "2258:     tn_buf, i - min_off, access_size);",
          "2259:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2232:   mark_reg_read(env, &state->stack[spi].spilled_ptr,",
          "2233:          state->stack[spi].spilled_ptr.parent);",
          "2234:  }",
          "2236: }",
          "2238: static int check_helper_mem_access(struct bpf_verifier_env *env, int regno,",
          "",
          "[Removed Lines]",
          "2235:  return update_stack_depth(env, state, off);",
          "",
          "[Added Lines]",
          "2268:  return update_stack_depth(env, state, min_off);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5b56d996dd50a9d2ca87c25ebb50c07b255b7e04",
      "candidate_info": {
        "commit_hash": "5b56d996dd50a9d2ca87c25ebb50c07b255b7e04",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/5b56d996dd50a9d2ca87c25ebb50c07b255b7e04",
        "files": [
          "mm/compaction.c"
        ],
        "message": "mm/compaction.c: abort search if isolation fails\n\nRunning LTP oom01 in a tight loop or memory stress testing put the system\nin a low-memory situation could triggers random memory corruption like\npage flag corruption below due to in fast_isolate_freepages(), if\nisolation fails, next_search_order() does not abort the search immediately\ncould lead to improper accesses.\n\nUBSAN: Undefined behaviour in ./include/linux/mm.h:1195:50\nindex 7 is out of range for type 'zone [5]'\nCall Trace:\n dump_stack+0x62/0x9a\n ubsan_epilogue+0xd/0x7f\n __ubsan_handle_out_of_bounds+0x14d/0x192\n __isolate_free_page+0x52c/0x600\n compaction_alloc+0x886/0x25f0\n unmap_and_move+0x37/0x1e70\n migrate_pages+0x2ca/0xb20\n compact_zone+0x19cb/0x3620\n kcompactd_do_work+0x2df/0x680\n kcompactd+0x1d8/0x6c0\n kthread+0x32c/0x3f0\n ret_from_fork+0x35/0x40\n------------[ cut here ]------------\nkernel BUG at mm/page_alloc.c:3124!\ninvalid opcode: 0000 [#1] SMP DEBUG_PAGEALLOC KASAN PTI\nRIP: 0010:__isolate_free_page+0x464/0x600\nRSP: 0000:ffff888b9e1af848 EFLAGS: 00010007\nRAX: 0000000030000000 RBX: ffff888c39fcf0f8 RCX: 0000000000000000\nRDX: 1ffff111873f9e25 RSI: 0000000000000004 RDI: ffffed1173c35ef6\nRBP: ffff888b9e1af898 R08: fffffbfff4fc2461 R09: fffffbfff4fc2460\nR10: fffffbfff4fc2460 R11: ffffffffa7e12303 R12: 0000000000000008\nR13: dffffc0000000000 R14: 0000000000000000 R15: 0000000000000007\nFS:  0000000000000000(0000) GS:ffff888ba8e80000(0000)\nknlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00007fc7abc00000 CR3: 0000000752416004 CR4: 00000000001606a0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nCall Trace:\n compaction_alloc+0x886/0x25f0\n unmap_and_move+0x37/0x1e70\n migrate_pages+0x2ca/0xb20\n compact_zone+0x19cb/0x3620\n kcompactd_do_work+0x2df/0x680\n kcompactd+0x1d8/0x6c0\n kthread+0x32c/0x3f0\n ret_from_fork+0x35/0x40\n\nLink: http://lkml.kernel.org/r/20190320192648.52499-1-cai@lca.pw\nFixes: dbe2d4e4f12e (\"mm, compaction: round-robin the order while searching the free lists for a target\")\nSigned-off-by: Qian Cai <cai@lca.pw>\nAcked-by: Mel Gorman <mgorman@techsingularity.net>\nCc: Daniel Jordan <daniel.m.jordan@oracle.com>\nCc: Mikhail Gavrilov <mikhail.v.gavrilov@gmail.com>\nCc: Vlastimil Babka <vbabka@suse.cz>\nCc: Pavel Tatashin <pasha.tatashin@soleen.com>\nSigned-off-by: Mel Gorman <mgorman@techsingularity.net>",
        "before_after_code_files": [
          "mm/compaction.c||mm/compaction.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "mm/compaction.c||mm/compaction.c": [
          "File: mm/compaction.c -> mm/compaction.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1370:     count_compact_events(COMPACTISOLATED, nr_isolated);",
          "1371:    } else {",
          "1374:     page = NULL;",
          "1375:    }",
          "1376:   }",
          "",
          "[Removed Lines]",
          "1373:     order = -1;",
          "",
          "[Added Lines]",
          "1373:     order = cc->search_order + 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ec1ed2aa68782b342458681aa4d16b65c9014d6",
      "candidate_info": {
        "commit_hash": "2ec1ed2aa68782b342458681aa4d16b65c9014d6",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/2ec1ed2aa68782b342458681aa4d16b65c9014d6",
        "files": [
          "drivers/net/ethernet/cavium/thunder/nicvf_main.c"
        ],
        "message": "net: thunderx: fix NULL pointer dereference in nicvf_open/nicvf_stop\n\nWhen a bpf program is uploaded, the driver computes the number of\nxdp tx queues resulting in the allocation of additional qsets.\nStarting from commit '2ecbe4f4a027 (\"net: thunderx: replace global\nnicvf_rx_mode_wq work queue for all VFs to private for each of them\")'\nthe driver runs link state polling for each VF resulting in the\nfollowing NULL pointer dereference:\n\n[   56.169256] Unable to handle kernel NULL pointer dereference at virtual address 0000000000000020\n[   56.178032] Mem abort info:\n[   56.180834]   ESR = 0x96000005\n[   56.183877]   Exception class = DABT (current EL), IL = 32 bits\n[   56.189792]   SET = 0, FnV = 0\n[   56.192834]   EA = 0, S1PTW = 0\n[   56.195963] Data abort info:\n[   56.198831]   ISV = 0, ISS = 0x00000005\n[   56.202662]   CM = 0, WnR = 0\n[   56.205619] user pgtable: 64k pages, 48-bit VAs, pgdp = 0000000021f0c7a0\n[   56.212315] [0000000000000020] pgd=0000000000000000, pud=0000000000000000\n[   56.219094] Internal error: Oops: 96000005 [#1] SMP\n[   56.260459] CPU: 39 PID: 2034 Comm: ip Not tainted 5.1.0-rc3+ #3\n[   56.266452] Hardware name: GIGABYTE R120-T33/MT30-GS1, BIOS T49 02/02/2018\n[   56.273315] pstate: 80000005 (Nzcv daif -PAN -UAO)\n[   56.278098] pc : __ll_sc___cmpxchg_case_acq_64+0x4/0x20\n[   56.283312] lr : mutex_lock+0x2c/0x50\n[   56.286962] sp : ffff0000219af1b0\n[   56.290264] x29: ffff0000219af1b0 x28: ffff800f64de49a0\n[   56.295565] x27: 0000000000000000 x26: 0000000000000015\n[   56.300865] x25: 0000000000000000 x24: 0000000000000000\n[   56.306165] x23: 0000000000000000 x22: ffff000011117000\n[   56.311465] x21: ffff800f64dfc080 x20: 0000000000000020\n[   56.316766] x19: 0000000000000020 x18: 0000000000000001\n[   56.322066] x17: 0000000000000000 x16: ffff800f2e077080\n[   56.327367] x15: 0000000000000004 x14: 0000000000000000\n[   56.332667] x13: ffff000010964438 x12: 0000000000000002\n[   56.337967] x11: 0000000000000000 x10: 0000000000000c70\n[   56.343268] x9 : ffff0000219af120 x8 : ffff800f2e077d50\n[   56.348568] x7 : 0000000000000027 x6 : 000000062a9d6a84\n[   56.353869] x5 : 0000000000000000 x4 : ffff800f2e077480\n[   56.359169] x3 : 0000000000000008 x2 : ffff800f2e077080\n[   56.364469] x1 : 0000000000000000 x0 : 0000000000000020\n[   56.369770] Process ip (pid: 2034, stack limit = 0x00000000c862da3a)\n[   56.376110] Call trace:\n[   56.378546]  __ll_sc___cmpxchg_case_acq_64+0x4/0x20\n[   56.383414]  drain_workqueue+0x34/0x198\n[   56.387247]  nicvf_open+0x48/0x9e8 [nicvf]\n[   56.391334]  nicvf_open+0x898/0x9e8 [nicvf]\n[   56.395507]  nicvf_xdp+0x1bc/0x238 [nicvf]\n[   56.399595]  dev_xdp_install+0x68/0x90\n[   56.403333]  dev_change_xdp_fd+0xc8/0x240\n[   56.407333]  do_setlink+0x8e0/0xbe8\n[   56.410810]  __rtnl_newlink+0x5b8/0x6d8\n[   56.414634]  rtnl_newlink+0x54/0x80\n[   56.418112]  rtnetlink_rcv_msg+0x22c/0x2f8\n[   56.422199]  netlink_rcv_skb+0x60/0x120\n[   56.426023]  rtnetlink_rcv+0x28/0x38\n[   56.429587]  netlink_unicast+0x1c8/0x258\n[   56.433498]  netlink_sendmsg+0x1b4/0x350\n[   56.437410]  sock_sendmsg+0x4c/0x68\n[   56.440887]  ___sys_sendmsg+0x240/0x280\n[   56.444711]  __sys_sendmsg+0x68/0xb0\n[   56.448275]  __arm64_sys_sendmsg+0x2c/0x38\n[   56.452361]  el0_svc_handler+0x9c/0x128\n[   56.456186]  el0_svc+0x8/0xc\n[   56.459056] Code: 35ffff91 2a1003e0 d65f03c0 f9800011 (c85ffc10)\n[   56.465166] ---[ end trace 4a57fdc27b0a572c ]---\n[   56.469772] Kernel panic - not syncing: Fatal exception\n\nFix it by checking nicvf_rx_mode_wq pointer in nicvf_open and nicvf_stop\n\nFixes: 2ecbe4f4a027 (\"net: thunderx: replace global nicvf_rx_mode_wq work queue for all VFs to private for each of them\")\nFixes: 2c632ad8bc74 (\"net: thunderx: move link state polling function to VF\")\nReported-by: Matteo Croce <mcroce@redhat.com>\nSigned-off-by: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>\nTested-by: Matteo Croce <mcroce@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "drivers/net/ethernet/cavium/thunder/nicvf_main.c||drivers/net/ethernet/cavium/thunder/nicvf_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/net/ethernet/cavium/thunder/nicvf_main.c||drivers/net/ethernet/cavium/thunder/nicvf_main.c": [
          "File: drivers/net/ethernet/cavium/thunder/nicvf_main.c -> drivers/net/ethernet/cavium/thunder/nicvf_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1328:  struct nicvf_cq_poll *cq_poll = NULL;",
          "1329:  union nic_mbx mbx = {};",
          "1336:  mbx.msg.msg = NIC_MBOX_MSG_SHUTDOWN;",
          "1337:  nicvf_send_msg_to_pf(nic, &mbx);",
          "",
          "[Removed Lines]",
          "1331:  cancel_delayed_work_sync(&nic->link_change_work);",
          "1334:  drain_workqueue(nic->nicvf_rx_mode_wq);",
          "",
          "[Added Lines]",
          "1332:  if (nic->nicvf_rx_mode_wq) {",
          "1333:   cancel_delayed_work_sync(&nic->link_change_work);",
          "1334:   drain_workqueue(nic->nicvf_rx_mode_wq);",
          "1335:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1452:  struct nicvf_cq_poll *cq_poll = NULL;",
          "1457:  netif_carrier_off(netdev);",
          "",
          "[Removed Lines]",
          "1455:  drain_workqueue(nic->nicvf_rx_mode_wq);",
          "",
          "[Added Lines]",
          "1456:  if (nic->nicvf_rx_mode_wq)",
          "1457:   drain_workqueue(nic->nicvf_rx_mode_wq);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1551:  nicvf_send_cfg_done(nic);",
          "1558:  return 0;",
          "1559: cleanup:",
          "",
          "[Removed Lines]",
          "1553:  INIT_DELAYED_WORK(&nic->link_change_work,",
          "1554:      nicvf_link_status_check_task);",
          "1555:  queue_delayed_work(nic->nicvf_rx_mode_wq,",
          "1556:       &nic->link_change_work, 0);",
          "",
          "[Added Lines]",
          "1555:  if (nic->nicvf_rx_mode_wq) {",
          "1556:   INIT_DELAYED_WORK(&nic->link_change_work,",
          "1557:       nicvf_link_status_check_task);",
          "1558:   queue_delayed_work(nic->nicvf_rx_mode_wq,",
          "1559:        &nic->link_change_work, 0);",
          "1560:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c446e6f96997f2a95bf0037ef463802162d2323",
      "candidate_info": {
        "commit_hash": "3c446e6f96997f2a95bf0037ef463802162d2323",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/3c446e6f96997f2a95bf0037ef463802162d2323",
        "files": [
          "net/kcm/kcmsock.c"
        ],
        "message": "kcm: switch order of device registration to fix a crash\n\nWhen kcm is loaded while many processes try to create a KCM socket, a\ncrash occurs:\n BUG: unable to handle kernel NULL pointer dereference at 000000000000000e\n IP: mutex_lock+0x27/0x40 kernel/locking/mutex.c:240\n PGD 8000000016ef2067 P4D 8000000016ef2067 PUD 3d6e9067 PMD 0\n Oops: 0002 [#1] SMP KASAN PTI\n CPU: 0 PID: 7005 Comm: syz-executor.5 Not tainted 4.12.14-396-default #1 SLE15-SP1 (unreleased)\n RIP: 0010:mutex_lock+0x27/0x40 kernel/locking/mutex.c:240\n RSP: 0018:ffff88000d487a00 EFLAGS: 00010246\n RAX: 0000000000000000 RBX: 000000000000000e RCX: 1ffff100082b0719\n ...\n CR2: 000000000000000e CR3: 000000004b1bc003 CR4: 0000000000060ef0\n Call Trace:\n  kcm_create+0x600/0xbf0 [kcm]\n  __sock_create+0x324/0x750 net/socket.c:1272\n ...\n\nThis is due to race between sock_create and unfinished\nregister_pernet_device. kcm_create tries to do \"net_generic(net,\nkcm_net_id)\". but kcm_net_id is not initialized yet.\n\nSo switch the order of the two to close the race.\n\nThis can be reproduced with mutiple processes doing socket(PF_KCM, ...)\nand one process doing module removal.\n\nFixes: ab7ac4eb9832 (\"kcm: Kernel Connection Multiplexor module\")\nReviewed-by: Michal Kubecek <mkubecek@suse.cz>\nSigned-off-by: Jiri Slaby <jslaby@suse.cz>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/kcm/kcmsock.c||net/kcm/kcmsock.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/kcm/kcmsock.c||net/kcm/kcmsock.c": [
          "File: net/kcm/kcmsock.c -> net/kcm/kcmsock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2054:  if (err)",
          "2055:   goto fail;",
          "2061:  err = register_pernet_device(&kcm_net_ops);",
          "2062:  if (err)",
          "2063:   goto net_ops_fail;",
          "2065:  err = kcm_proc_init();",
          "2066:  if (err)",
          "2067:   goto proc_init_fail;",
          "",
          "[Removed Lines]",
          "2057:  err = sock_register(&kcm_family_ops);",
          "2058:  if (err)",
          "2059:   goto sock_register_fail;",
          "",
          "[Added Lines]",
          "2061:  err = sock_register(&kcm_family_ops);",
          "2062:  if (err)",
          "2063:   goto sock_register_fail;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2069:  return 0;",
          "2071: proc_init_fail:",
          "2075:  sock_unregister(PF_KCM);",
          "2077: sock_register_fail:",
          "2078:  proto_unregister(&kcm_proto);",
          "2080: fail:",
          "",
          "[Removed Lines]",
          "2072:  unregister_pernet_device(&kcm_net_ops);",
          "2074: net_ops_fail:",
          "",
          "[Added Lines]",
          "2075:  unregister_pernet_device(&kcm_net_ops);",
          "2077: net_ops_fail:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2090: static void __exit kcm_exit(void)",
          "2091: {",
          "2092:  kcm_proc_exit();",
          "2094:  sock_unregister(PF_KCM);",
          "2095:  proto_unregister(&kcm_proto);",
          "2096:  destroy_workqueue(kcm_wq);",
          "",
          "[Removed Lines]",
          "2093:  unregister_pernet_device(&kcm_net_ops);",
          "",
          "[Added Lines]",
          "2094:  unregister_pernet_device(&kcm_net_ops);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fae2708174ae95d98d19f194e03d6e8f688ae195",
      "candidate_info": {
        "commit_hash": "fae2708174ae95d98d19f194e03d6e8f688ae195",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/fae2708174ae95d98d19f194e03d6e8f688ae195",
        "files": [
          "net/sched/act_sample.c",
          "tools/testing/selftests/tc-testing/tc-tests/actions/sample.json"
        ],
        "message": "net/sched: act_sample: fix divide by zero in the traffic path\n\nthe control path of 'sample' action does not validate the value of 'rate'\nprovided by the user, but then it uses it as divisor in the traffic path.\nValidate it in tcf_sample_init(), and return -EINVAL with a proper extack\nmessage in case that value is zero, to fix a splat with the script below:\n\n # tc f a dev test0 egress matchall action sample rate 0 group 1 index 2\n # tc -s a s action sample\n total acts 1\n\n         action order 0: sample rate 1/0 group 1 pipe\n          index 2 ref 1 bind 1 installed 19 sec used 19 sec\n         Action statistics:\n         Sent 0 bytes 0 pkt (dropped 0, overlimits 0 requeues 0)\n         backlog 0b 0p requeues 0\n # ping 192.0.2.1 -I test0 -c1 -q\n\n divide error: 0000 [#1] SMP PTI\n CPU: 1 PID: 6192 Comm: ping Not tainted 5.1.0-rc2.diag2+ #591\n Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011\n RIP: 0010:tcf_sample_act+0x9e/0x1e0 [act_sample]\n Code: 6a f1 85 c0 74 0d 80 3d 83 1a 00 00 00 0f 84 9c 00 00 00 4d 85 e4 0f 84 85 00 00 00 e8 9b d7 9c f1 44 8b 8b e0 00 00 00 31 d2 <41> f7 f1 85 d2 75 70 f6 85 83 00 00 00 10 48 8b 45 10 8b 88 08 01\n RSP: 0018:ffffae320190ba30 EFLAGS: 00010246\n RAX: 00000000b0677d21 RBX: ffff8af1ed9ec000 RCX: 0000000059a9fe49\n RDX: 0000000000000000 RSI: 000000000c7e33b7 RDI: ffff8af23daa0af0\n RBP: ffff8af1ee11b200 R08: 0000000074fcaf7e R09: 0000000000000000\n R10: 0000000000000050 R11: ffffffffb3088680 R12: ffff8af232307f80\n R13: 0000000000000003 R14: ffff8af1ed9ec000 R15: 0000000000000000\n FS:  00007fe9c6d2f740(0000) GS:ffff8af23da80000(0000) knlGS:0000000000000000\n CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n CR2: 00007fff6772f000 CR3: 00000000746a2004 CR4: 00000000001606e0\n Call Trace:\n  tcf_action_exec+0x7c/0x1c0\n  tcf_classify+0x57/0x160\n  __dev_queue_xmit+0x3dc/0xd10\n  ip_finish_output2+0x257/0x6d0\n  ip_output+0x75/0x280\n  ip_send_skb+0x15/0x40\n  raw_sendmsg+0xae3/0x1410\n  sock_sendmsg+0x36/0x40\n  __sys_sendto+0x10e/0x140\n  __x64_sys_sendto+0x24/0x30\n  do_syscall_64+0x60/0x210\n  entry_SYSCALL_64_after_hwframe+0x49/0xbe\n  [...]\n  Kernel panic - not syncing: Fatal exception in interrupt\n\nAdd a TDC selftest to document that 'rate' is now being validated.\n\nReported-by: Matteo Croce <mcroce@redhat.com>\nFixes: 5c5670fae430 (\"net/sched: Introduce sample tc action\")\nSigned-off-by: Davide Caratti <dcaratti@redhat.com>\nAcked-by: Yotam Gigi <yotam.gi@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/sched/act_sample.c||net/sched/act_sample.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/sched/act_sample.c||net/sched/act_sample.c": [
          "File: net/sched/act_sample.c -> net/sched/act_sample.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:  struct nlattr *tb[TCA_SAMPLE_MAX + 1];",
          "46:  struct psample_group *psample_group;",
          "47:  struct tcf_chain *goto_ch = NULL;",
          "48:  struct tc_sample *parm;",
          "50:  struct tcf_sample *s;",
          "51:  bool exists = false;",
          "52:  int ret, err;",
          "",
          "[Removed Lines]",
          "49:  u32 psample_group_num;",
          "",
          "[Added Lines]",
          "48:  u32 psample_group_num, rate;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:  if (err < 0)",
          "86:   goto release_idr;",
          "88:  psample_group_num = nla_get_u32(tb[TCA_SAMPLE_PSAMPLE_GROUP]);",
          "89:  psample_group = psample_group_get(net, psample_group_num);",
          "90:  if (!psample_group) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:  rate = nla_get_u32(tb[TCA_SAMPLE_RATE]);",
          "89:  if (!rate) {",
          "90:   NL_SET_ERR_MSG(extack, \"invalid sample rate\");",
          "91:   err = -EINVAL;",
          "92:   goto put_chain;",
          "93:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:  spin_lock_bh(&s->tcf_lock);",
          "98:  goto_ch = tcf_action_set_ctrlact(*a, parm->action, goto_ch);",
          "100:  s->psample_group_num = psample_group_num;",
          "101:  RCU_INIT_POINTER(s->psample_group, psample_group);",
          "",
          "[Removed Lines]",
          "99:  s->rate = nla_get_u32(tb[TCA_SAMPLE_RATE]);",
          "",
          "[Added Lines]",
          "105:  s->rate = rate;",
          "",
          "---------------"
        ]
      }
    }
  ]
}