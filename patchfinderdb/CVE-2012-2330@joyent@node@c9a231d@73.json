{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "91701c2db1055fcd7c79a5cacf7a0823d2bf1eb6",
      "candidate_info": {
        "commit_hash": "91701c2db1055fcd7c79a5cacf7a0823d2bf1eb6",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/91701c2db1055fcd7c79a5cacf7a0823d2bf1eb6",
        "files": [
          "src/node_file.cc"
        ],
        "message": "MakeCallback: Use in node_file.cc",
        "before_after_code_files": [
          "src/node_file.cc||src/node_file.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_file.cc||src/node_file.cc": [
          "File: src/node_file.cc -> src/node_file.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:   FSReqWrap* req_wrap = (FSReqWrap*) req->data;",
          "84:   assert(&req_wrap->req_ == req);",
          "90:   int argc = 1;",
          "",
          "[Removed Lines]",
          "85:   Local<Value> callback_v = req_wrap->object_->Get(oncomplete_sym);",
          "86:   assert(callback_v->IsFunction());",
          "87:   Local<Function> callback = Local<Function>::Cast(callback_v);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "196:     }",
          "197:   }",
          "207:   uv_fs_req_cleanup(&req_wrap->req_);",
          "208:   delete req_wrap;",
          "",
          "[Removed Lines]",
          "199:   TryCatch try_catch;",
          "201:   callback->Call(req_wrap->object_, argc, argv);",
          "203:   if (try_catch.HasCaught()) {",
          "204:     FatalException(try_catch);",
          "205:   }",
          "",
          "[Added Lines]",
          "196:   MakeCallback(req_wrap->object_, \"oncomplete\", argc, argv);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c23ac14cba2df76fa049f1d1304bf7863ed24b08",
      "candidate_info": {
        "commit_hash": "c23ac14cba2df76fa049f1d1304bf7863ed24b08",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c23ac14cba2df76fa049f1d1304bf7863ed24b08",
        "files": [
          "deps/openssl/openssl/crypto/x509/by_dir.c"
        ],
        "message": "openssl: backward compatibility after x509 hash function change\n\nThere are many symbolic links under /etc/ssl/certs created by using hash of\nthe pem certificates in order for OpenSSL to find those certificate.\nOpenssl has a tool to help you create hash symbolic links. (See tools/c_rehash)\nHowever the new openssl changed the hash algorithm, Unless you compile/install\nthe latest openssl library and re-create all related symbolic links, the new\nopenssl can not find some certificates because the links of those certificates\nwere created by using old hash algorithm, which causes some tests failed.\n\nThis patch gives a way to find a certificate according to its hash by using both\nnew algorithm and old algorithm.\n\ncrbug.com/111045 is used to track this issue.\n\nThis patch is taken from the Chromium project.",
        "before_after_code_files": [
          "deps/openssl/openssl/crypto/x509/by_dir.c||deps/openssl/openssl/crypto/x509/by_dir.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/openssl/openssl/crypto/x509/by_dir.c||deps/openssl/openssl/crypto/x509/by_dir.c": [
          "File: deps/openssl/openssl/crypto/x509/by_dir.c -> deps/openssl/openssl/crypto/x509/by_dir.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "287:  int ok=0;",
          "288:  int i,j,k;",
          "289:  unsigned long h;",
          "290:  BUF_MEM *b=NULL;",
          "291:  X509_OBJECT stmp,*tmp;",
          "292:  const char *postfix=\"\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290:  unsigned long hash_array[2];",
          "291:  int hash_index;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323:  ctx=(BY_DIR *)xl->method_data;",
          "325:  h=X509_NAME_hash(name);",
          "326:  for (i=0; i < sk_BY_DIR_ENTRY_num(ctx->dirs); i++)",
          "327:   {",
          "328:   BY_DIR_ENTRY *ent;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328:  hash_array[0]=h;",
          "329:  hash_array[1]=X509_NAME_hash_old(name);",
          "330:  for (hash_index=0; hash_index < 2; hash_index++)",
          "331:   {",
          "332:   h=hash_array[hash_index];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "476:    goto finish;",
          "477:    }",
          "478:   }",
          "479: finish:",
          "480:  if (b != NULL) BUF_MEM_free(b);",
          "481:  return(ok);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "486:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "53716eb0b5338999761d115fad9d392077836e63",
      "candidate_info": {
        "commit_hash": "53716eb0b5338999761d115fad9d392077836e63",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/53716eb0b5338999761d115fad9d392077836e63",
        "files": [
          "lib/http.js",
          "lib/https.js"
        ],
        "message": "http/https: pass request to .createConnection()\n\nIt's useful for passing some additional options of request object to the\nunderlying API",
        "before_after_code_files": [
          "lib/http.js||lihttp.js",
          "lib/https.js||lihttps.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1067:   }",
          "1068:   if (this.sockets[name].length < this.maxSockets) {",
          "1071:   } else {",
          "1073:     if (!this.requests[name]) {",
          "",
          "[Removed Lines]",
          "1070:     req.onSocket(this.createSocket(name, host, port, localAddress));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1076:     this.requests[name].push(req);",
          "1077:   }",
          "1078: };",
          "1080:   var self = this;",
          "1081:   var options = util._extend({}, self.options);",
          "1082:   options.port = port;",
          "1083:   options.host = host;",
          "1084:   options.localAddress = localAddress;",
          "1086:   if (!self.sockets[name]) {",
          "1087:     self.sockets[name] = [];",
          "1088:   }",
          "",
          "[Removed Lines]",
          "1079: Agent.prototype.createSocket = function(name, host, port, localAddress) {",
          "1085:   var s = self.createConnection(options);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1123:   }",
          "1124:   if (this.requests[name] && this.requests[name].length) {",
          "1127:   }",
          "1128: };",
          "",
          "[Removed Lines]",
          "1126:     this.createSocket(name, host, port, localAddress).emit('free');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1135:   var self = this;",
          "1136:   OutgoingMessage.call(self);",
          "1138:   self.agent = options.agent === undefined ? globalAgent : options.agent;",
          "1140:   var defaultPort = options.defaultPort || 80;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1194:     self._last = true;",
          "1195:     self.shouldKeepAlive = false;",
          "1196:     if (options.createConnection) {",
          "1198:     } else {",
          "1199:       self.onSocket(net.createConnection(self.socketPath));",
          "1200:     }",
          "",
          "[Removed Lines]",
          "1197:       self.onSocket(options.createConnection(self.socketPath));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1210:     if (options.createConnection) {",
          "1211:       options.port = port;",
          "1212:       options.host = host;",
          "1214:     } else {",
          "1215:       var conn = net.createConnection({",
          "1216:         port: port,",
          "",
          "[Removed Lines]",
          "1213:       var conn = options.createConnection(options);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/https.js||lihttps.js": [
          "File: lib/https.js -> lihttps.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: var tls = require('tls');",
          "23: var http = require('http');",
          "26: function Server(opts, requestListener) {",
          "27:   if (!(this instanceof Server)) return new Server(opts, requestListener);",
          "",
          "[Removed Lines]",
          "24: var inherits = require('util').inherits;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: function createConnection(/* [port, host, options] */) {",
          "57:   if (typeof arguments[0] === 'object') {",
          "59:   } else if (typeof arguments[1] === 'object') {",
          "61:     options.port = arguments[0];",
          "62:   } else if (typeof arguments[2] === 'object') {",
          "64:     options.port = arguments[0];",
          "65:     options.host = arguments[1];",
          "66:   } else {",
          "",
          "[Removed Lines]",
          "55:   var options = {};",
          "58:     options = arguments[0];",
          "60:     options = arguments[1];",
          "63:     options = arguments[2];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f0af55a0aadf3ca1a960de1b6072f6f4175434e",
      "candidate_info": {
        "commit_hash": "0f0af55a0aadf3ca1a960de1b6072f6f4175434e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0f0af55a0aadf3ca1a960de1b6072f6f4175434e",
        "files": [
          "lib/net.js",
          "test/simple/test-net-write-slow.js"
        ],
        "message": "net: fix large file downloads failing\n\nFixes #2678.",
        "before_after_code_files": [
          "lib/net.js||linet.js",
          "test/simple/test-net-write-slow.js||test/simple/test-net-write-slow.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "481:     return;",
          "482:   }",
          "486:   self._pendingWriteReqs--;",
          "",
          "[Removed Lines]",
          "484:   timers.active(this);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-net-write-slow.js||test/simple/test-net-write-slow.js": [
          "File: test/simple/test-net-write-slow.js -> test/simple/test-net-write-slow.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var net = require('net');",
          "26: var SIZE = 1E5;",
          "27: var N = 10;",
          "28: var received = 0;",
          "29: var buf = new Buffer(SIZE);",
          "30: buf.fill(0x61); // 'a'",
          "32: var server = net.createServer(function(socket) {",
          "33:   socket.setNoDelay();",
          "34:   socket.setTimeout(500);",
          "35:   socket.on('timeout', function() {",
          "36:     assert.fail();",
          "37:   });",
          "39:   for (var i = 0; i < N; ++i) {",
          "40:     socket.write(buf);",
          "41:   }",
          "42:   socket.end();",
          "44: }).listen(common.PORT, function() {",
          "45:   var conn = net.connect(common.PORT);",
          "46:   conn.on('data', function(buf) {",
          "47:     received += buf.length;",
          "48:     conn.pause();",
          "49:     setTimeout(function() {",
          "50:       conn.resume();",
          "51:     }, 50);",
          "52:   });",
          "53:   conn.on('end', function() {",
          "54:     server.close();",
          "55:   });",
          "56: });",
          "58: process.on('exit', function() {",
          "59:   assert.equal(received, SIZE * N);",
          "60: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83b1dda12fa646a2a5f201a4401149c789ad9b1c",
      "candidate_info": {
        "commit_hash": "83b1dda12fa646a2a5f201a4401149c789ad9b1c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/83b1dda12fa646a2a5f201a4401149c789ad9b1c",
        "files": [
          "src/node.cc",
          "test/simple/test-cli-eval.js"
        ],
        "message": "cli: make argument to -p optional",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "test/simple/test-cli-eval.js||test/simple/test-cli-eval.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2389:                strcmp(arg, \"--print\") == 0  ||",
          "2390:                strcmp(arg, \"-pe\") == 0      ||",
          "2391:                strcmp(arg, \"-p\") == 0) {",
          "2393:         fprintf(stderr, \"Error: %s requires an argument\\n\", arg);",
          "2394:         exit(1);",
          "2395:       }",
          "2397:       argv[i] = const_cast<char*>(\"\");",
          "2398:       eval_string = argv[++i];",
          "2399:     } else if (strcmp(arg, \"--interactive\") == 0 || strcmp(arg, \"-i\") == 0) {",
          "2400:       force_repl = true;",
          "2401:       argv[i] = const_cast<char*>(\"\");",
          "",
          "[Removed Lines]",
          "2392:       if (argc <= i + 1) {",
          "2396:       print_eval = print_eval || strchr(arg, 'p') != NULL;",
          "",
          "[Added Lines]",
          "2392:       bool is_eval = strchr(arg, 'e') != NULL;",
          "2393:       bool is_print = strchr(arg, 'p') != NULL;",
          "2396:       if (is_eval == true && i + 1 >= argc) {",
          "2401:       print_eval = print_eval || is_print;",
          "2405:       if (is_eval == true) {",
          "2406:         eval_string = argv[++i];",
          "2407:         continue;",
          "2408:       }",
          "2413:       if (argv[i + 1] == NULL) continue;",
          "2414:       if (argv[i + 1][0] == '-') continue;",
          "2416:       if (strncmp(eval_string, \"\\\\-\", 2) == 0) ++eval_string;",
          "",
          "---------------"
        ],
        "test/simple/test-cli-eval.js||test/simple/test-cli-eval.js": [
          "File: test/simple/test-cli-eval.js -> test/simple/test-cli-eval.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:     });",
          "52:   var cmd = nodejs + ' ' + s + ' ';",
          "54:   child.exec(cmd + '42',",
          "",
          "[Removed Lines]",
          "51: '--print -pe -p'.split(' ').forEach(function(s) {",
          "",
          "[Added Lines]",
          "51: ['--print', '-p -e', '-pe', '-p'].forEach(function(s) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:   assert.equal(stdout, '');",
          "80:   assert.equal(stderr, '');",
          "81: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: child.exec(nodejs + ' -p \"\\\\-42\"',",
          "85:     function(err, stdout, stderr) {",
          "86:       assert.equal(stdout, '-42\\n');",
          "87:     });",
          "",
          "---------------"
        ]
      }
    }
  ]
}