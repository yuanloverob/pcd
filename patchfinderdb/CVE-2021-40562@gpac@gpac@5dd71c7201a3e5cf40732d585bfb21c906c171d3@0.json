{
  "cve_id": "CVE-2021-40562",
  "cve_desc": "A Segmentation fault caused by a floating point exception exists in Gpac through 1.0.1 using mp4box via the naludmx_enqueue_or_dispatch function in reframe_nalu.c, which causes a denial of service.",
  "repo": "gpac/gpac",
  "patch_hash": "5dd71c7201a3e5cf40732d585bfb21c906c171d3",
  "patch_info": {
    "commit_hash": "5dd71c7201a3e5cf40732d585bfb21c906c171d3",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/5dd71c7201a3e5cf40732d585bfb21c906c171d3",
    "files": [
      "src/filters/reframe_nalu.c"
    ],
    "message": "fixed #1901",
    "before_after_code_files": [
      "src/filters/reframe_nalu.c||src/filters/reframe_nalu.c"
    ]
  },
  "patch_diff": {
    "src/filters/reframe_nalu.c||src/filters/reframe_nalu.c": [
      "File: src/filters/reframe_nalu.c -> src/filters/reframe_nalu.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1352:      else",
      "1353:       DeltaTfiDivisorIdx = (ctx->avc_state->sei.pic_timing.pic_struct+1) / 2;",
      "1354:     }",
      "1356:      ctx->cur_fps.num = 2 * sps->vui.time_scale;",
      "1359:      if (!ctx->fps.num && ctx->dts==ctx->fps.den)",
      "1360:       ctx->dts = ctx->cur_fps.den;",
      "",
      "[Removed Lines]",
      "1355:     if (!ctx->timescale) {",
      "1357:      ctx->cur_fps.den =  2 * sps->vui.num_units_in_tick * DeltaTfiDivisorIdx;",
      "",
      "[Added Lines]",
      "1355:     if (!ctx->timescale && sps->vui.time_scale && sps->vui.num_units_in_tick) {",
      "1357:      ctx->cur_fps.den = 2 * sps->vui.num_units_in_tick * DeltaTfiDivisorIdx;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7a7cb1fd663d55a22e2125611f1ca0b95c293d0e",
      "candidate_info": {
        "commit_hash": "7a7cb1fd663d55a22e2125611f1ca0b95c293d0e",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/7a7cb1fd663d55a22e2125611f1ca0b95c293d0e",
        "files": [
          "share/doc/man/gpac-filters.1",
          "share/doc/man/gpac.1",
          "share/doc/man/mp4box.1",
          "share/doc/man/mp4client.1",
          "src/filters/reframe_av1.c",
          "src/filters/reframe_h263.c",
          "src/filters/reframe_mpgvid.c",
          "src/filters/reframe_nalu.c",
          "src/filters/reframe_prores.c"
        ],
        "message": "added notime option to video reframers",
        "before_after_code_files": [
          "src/filters/reframe_av1.c||src/filters/reframe_av1.c",
          "src/filters/reframe_h263.c||src/filters/reframe_h263.c",
          "src/filters/reframe_mpgvid.c||src/filters/reframe_mpgvid.c",
          "src/filters/reframe_nalu.c||src/filters/reframe_nalu.c",
          "src/filters/reframe_prores.c||src/filters/reframe_prores.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/filters/reframe_nalu.c||src/filters/reframe_nalu.c"
          ],
          "candidate": [
            "src/filters/reframe_nalu.c||src/filters/reframe_nalu.c"
          ]
        }
      },
      "candidate_diff": {
        "src/filters/reframe_av1.c||src/filters/reframe_av1.c": [
          "File: src/filters/reframe_av1.c -> src/filters/reframe_av1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:  GF_Fraction fps;",
          "51:  Double index;",
          "52:  Bool importer;",
          "55:  u32 bsdbg;",
          "",
          "[Removed Lines]",
          "53:  Bool deps;",
          "",
          "[Added Lines]",
          "53:  Bool deps, notime;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:   gf_filter_pid_copy_properties(ctx->opid, ctx->ipid);",
          "128:   gf_filter_pid_set_property(ctx->opid, GF_PROP_PID_UNFRAMED, NULL);",
          "129:  }",
          "132:   p = gf_filter_pid_get_property(pid, GF_PROP_PID_FPS);",
          "133:   if (p) ctx->cur_fps = p->value.frac;",
          "",
          "[Removed Lines]",
          "130:  if (ctx->timescale) {",
          "",
          "[Added Lines]",
          "132:  if (!ctx->timescale) {",
          "133:   ctx->notime = GF_TRUE;",
          "134:  } else {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "462:  assert(ctx->cur_fps.num);",
          "463:  assert(ctx->cur_fps.den);",
          "466:   u64 inc = ctx->cur_fps.den;",
          "467:   inc *= ctx->timescale;",
          "468:   inc /= ctx->cur_fps.num;",
          "",
          "[Removed Lines]",
          "465:  if (ctx->timescale) {",
          "",
          "[Added Lines]",
          "469:  if (!ctx->notime) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1005:  data = (char *) gf_filter_pck_get_data(pck, &pck_size);",
          "1008:  if (ctx->timescale) {",
          "1009:   Bool start, end;",
          "1012:   e = GF_OK;",
          "",
          "[Removed Lines]",
          "1010:   u64 cts;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1037:   }",
          "1043:   if (ctx->src_pck) gf_filter_pck_unref(ctx->src_pck);",
          "1044:   ctx->src_pck = pck;",
          "1045:   gf_filter_pck_ref_props(&ctx->src_pck);",
          "",
          "[Removed Lines]",
          "1040:   cts = gf_filter_pck_get_cts(pck);",
          "1041:   if (cts != GF_FILTER_NO_TS)",
          "1042:    ctx->cts = cts;",
          "",
          "[Added Lines]",
          "1043:   if (!ctx->notime) {",
          "1044:    u64 cts = gf_filter_pck_get_cts(pck);",
          "1045:    if (cts != GF_FILTER_NO_TS)",
          "1046:     ctx->cts = cts;",
          "1047:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1192:  { OFFS(importer), \"compatibility with old importer\", GF_PROP_BOOL, \"false\", NULL, GF_FS_ARG_HINT_ADVANCED},",
          "1193:  { OFFS(deps), \"import samples dependencies information\", GF_PROP_BOOL, \"false\", NULL, GF_FS_ARG_HINT_EXPERT},",
          "1195:  { OFFS(bsdbg), \"debug NAL parsing in parser@debug logs\\n\"",
          "1196:   \"- off: not enabled\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1199:  { OFFS(notime), \"ignore input timestamps, rebuild from 0\", GF_PROP_BOOL, \"false\", NULL, GF_FS_ARG_HINT_ADVANCED},",
          "",
          "---------------"
        ],
        "src/filters/reframe_h263.c||src/filters/reframe_h263.c": [
          "File: src/filters/reframe_h263.c -> src/filters/reframe_h263.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:  GF_Fraction fps;",
          "40:  Double index;",
          "43:  GF_FilterPid *ipid;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:  Bool notime;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:   gf_filter_pid_copy_properties(ctx->opid, ctx->ipid);",
          "96:   gf_filter_pid_set_property(ctx->opid, GF_PROP_PID_UNFRAMED, NULL);",
          "97:  }",
          "98:  return GF_OK;",
          "99: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:  if (!ctx->timescale) ctx->notime = GF_TRUE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "309:  assert(ctx->fps.num);",
          "310:  assert(ctx->fps.den);",
          "313:   u64 inc = ctx->fps.den;",
          "314:   inc *= ctx->timescale;",
          "315:   inc /= ctx->fps.num;",
          "",
          "[Removed Lines]",
          "312:  if (ctx->timescale) {",
          "",
          "[Added Lines]",
          "317:  if (!ctx->notime) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "421: #endif",
          "423:  }",
          "425:  else if (ctx->timescale) {",
          "429:   if (ctx->src_pck) gf_filter_pck_unref(ctx->src_pck);",
          "430:   ctx->src_pck = pck;",
          "431:   gf_filter_pck_ref_props(&ctx->src_pck);",
          "",
          "[Removed Lines]",
          "426:   u64 cts = gf_filter_pck_get_cts(pck);",
          "427:   if (cts != GF_FILTER_NO_TS)",
          "428:    ctx->cts = cts;",
          "",
          "[Added Lines]",
          "431:   if (!ctx->notime) {",
          "432:    u64 cts = gf_filter_pck_get_cts(pck);",
          "433:    if (cts != GF_FILTER_NO_TS)",
          "434:     ctx->cts = cts;",
          "435:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "719: {",
          "720:  { OFFS(fps), \"import frame rate\", GF_PROP_FRACTION, \"15000/1000\", NULL, 0},",
          "721:  { OFFS(index), \"indexing window length\", GF_PROP_DOUBLE, \"1.0\", NULL, 0},",
          "722:  {0}",
          "723: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "729:  { OFFS(notime), \"ignore input timestamps, rebuild from 0\", GF_PROP_BOOL, \"false\", NULL, GF_FS_ARG_HINT_ADVANCED},",
          "",
          "---------------"
        ],
        "src/filters/reframe_mpgvid.c||src/filters/reframe_mpgvid.c": [
          "File: src/filters/reframe_mpgvid.c -> src/filters/reframe_mpgvid.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:  GF_Fraction fps;",
          "43:  Double index;",
          "47:  GF_FilterPid *ipid;",
          "",
          "[Removed Lines]",
          "44:  Bool vfr, importer;",
          "",
          "[Added Lines]",
          "44:  Bool vfr, importer, notime;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160:   gf_filter_pid_copy_properties(ctx->opid, ctx->ipid);",
          "161:   gf_filter_pid_set_property(ctx->opid, GF_PROP_PID_UNFRAMED, NULL);",
          "162:  }",
          "163:  return GF_OK;",
          "164: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:  if (!ctx->timescale) ctx->notime = GF_TRUE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "475: {",
          "476:  assert(ctx->cur_fps.num);",
          "479:   u64 inc = 3000;",
          "480:   if (ctx->cur_fps.den && ctx->cur_fps.num) {",
          "481:    inc = ctx->cur_fps.den;",
          "",
          "[Removed Lines]",
          "478:  if (ctx->timescale) {",
          "",
          "[Added Lines]",
          "481:  if (!ctx->notime) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "559:  start = data;",
          "560:  remain = pck_size;",
          "563:  if (!ctx->resume_from && ctx->timescale) {",
          "581:    }",
          "582:   }",
          "583:   gf_filter_pck_get_framing(pck, &ctx->input_is_au_start, &ctx->input_is_au_end);",
          "585:   if (ctx->recompute_cts) ctx->input_is_au_start = GF_FALSE;",
          "",
          "[Removed Lines]",
          "564:   u64 ts = gf_filter_pck_get_cts(pck);",
          "565:   if (ts != GF_FILTER_NO_TS) {",
          "566:    if (!ctx->cts || !ctx->recompute_cts)",
          "567:     ctx->cts = ts;",
          "568:   }",
          "569:   ts = gf_filter_pck_get_dts(pck);",
          "570:   if (ts != GF_FILTER_NO_TS) {",
          "571:    if (!ctx->dts || !ctx->recompute_cts)",
          "572:     ctx->dts = ts;",
          "574:    if (!ctx->prev_dts) ctx->prev_dts = ts;",
          "575:    else if (ctx->prev_dts != ts) {",
          "576:     u64 diff = ts;",
          "577:     diff -= ctx->prev_dts;",
          "578:     if (!ctx->cur_fps.den) ctx->cur_fps.den = (u32) diff;",
          "579:     else if (ctx->cur_fps.den > diff)",
          "580:      ctx->cur_fps.den = (u32) diff;",
          "",
          "[Added Lines]",
          "567:   if (!ctx->notime) {",
          "568:    u64 ts = gf_filter_pck_get_cts(pck);",
          "569:    if (ts != GF_FILTER_NO_TS) {",
          "570:     if (!ctx->cts || !ctx->recompute_cts)",
          "571:      ctx->cts = ts;",
          "572:    }",
          "573:    ts = gf_filter_pck_get_dts(pck);",
          "574:    if (ts != GF_FILTER_NO_TS) {",
          "575:     if (!ctx->dts || !ctx->recompute_cts)",
          "576:      ctx->dts = ts;",
          "578:     if (!ctx->prev_dts) ctx->prev_dts = ts;",
          "579:     else if (ctx->prev_dts != ts) {",
          "580:      u64 diff = ts;",
          "581:      diff -= ctx->prev_dts;",
          "582:      if (!ctx->cur_fps.den) ctx->cur_fps.den = (u32) diff;",
          "583:      else if (ctx->cur_fps.den > diff)",
          "584:       ctx->cur_fps.den = (u32) diff;",
          "585:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1232:  { OFFS(index), \"indexing window length\", GF_PROP_DOUBLE, \"1.0\", NULL, 0},",
          "1233:  { OFFS(vfr), \"set variable frame rate import\", GF_PROP_BOOL, \"false\", NULL, GF_FS_ARG_HINT_ADVANCED},",
          "1234:  { OFFS(importer), \"compatibility with old importer, displays import results\", GF_PROP_BOOL, \"false\", NULL, GF_FS_ARG_HINT_ADVANCED},",
          "1235:  {0}",
          "1236: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1241:  { OFFS(notime), \"ignore input timestamps, rebuild from 0\", GF_PROP_BOOL, \"false\", NULL, GF_FS_ARG_HINT_ADVANCED},",
          "",
          "---------------"
        ],
        "src/filters/reframe_nalu.c||src/filters/reframe_nalu.c": [
          "File: src/filters/reframe_nalu.c -> src/filters/reframe_nalu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:  GF_Fraction fps;",
          "62:  Double index;",
          "64:  u32 nal_length;",
          "65:  u32 strict_poc;",
          "66:  u32 bsdbg;",
          "",
          "[Removed Lines]",
          "63:  Bool explicit, force_sync, nosei, importer, subsamples, nosvc, novpsext, deps, seirw, audelim, analyze;",
          "",
          "[Added Lines]",
          "63:  Bool explicit, force_sync, nosei, importer, subsamples, nosvc, novpsext, deps, seirw, audelim, analyze, notime;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "360:   ctx->full_au_source = GF_TRUE;",
          "361:  }",
          "364:  if (ctx->opid) {",
          "365:   if (ctx->poc_probe_done) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "364:  if (!ctx->timescale) ctx->notime = GF_TRUE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1043:    }",
          "1048:     && (sps->time_scale <= 1000*sps->num_units_in_tick)",
          "1049:    ) {",
          "",
          "[Removed Lines]",
          "1046:    if (!ctx->timescale && first && (!ctx->fps.num || !ctx->fps.den) && sps->has_timing_info",
          "",
          "[Added Lines]",
          "1049:    if (ctx->notime && first && (!ctx->fps.num || !ctx->fps.den) && sps->has_timing_info",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1216:    }",
          "1221:     && (sps->time_scale <= 1000*sps->num_units_in_tick)",
          "1222:    ) {",
          "",
          "[Removed Lines]",
          "1219:    if (!ctx->timescale && first && (!ctx->fps.num || !ctx->fps.den) && sps->has_timing_info",
          "",
          "[Added Lines]",
          "1222:    if (ctx->notime && first && (!ctx->fps.num || !ctx->fps.den) && sps->has_timing_info",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1369:      else",
          "1370:       DeltaTfiDivisorIdx = (ctx->avc_state->sei.pic_timing.pic_struct+1) / 2;",
          "1371:     }",
          "1373:      ctx->cur_fps.num = 2 * sps->vui.time_scale;",
          "1374:      ctx->cur_fps.den = 2 * sps->vui.num_units_in_tick * DeltaTfiDivisorIdx;",
          "",
          "[Removed Lines]",
          "1372:     if (!ctx->timescale && sps->vui.time_scale && sps->vui.num_units_in_tick) {",
          "",
          "[Added Lines]",
          "1375:     if (ctx->notime && sps->vui.time_scale && sps->vui.num_units_in_tick) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1479:  dsi = dsi_enh = NULL;",
          "1482:   ctx->cur_fps = ctx->fps;",
          "1483:   if (!ctx->cur_fps.num || !ctx->cur_fps.den) {",
          "1484:    ctx->cur_fps.num = 25000;",
          "",
          "[Removed Lines]",
          "1481:  if (!ctx->timescale) {",
          "",
          "[Added Lines]",
          "1484:  if (ctx->notime) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1703: {",
          "1704:  assert(ctx->cur_fps.num);",
          "1708:   u64 dts_inc = ctx->cur_fps.den ? ctx->cur_fps.den : 3000;",
          "1709:   ctx->cts += dts_inc;",
          "",
          "[Removed Lines]",
          "1706:  if (ctx->timescale) {",
          "",
          "[Added Lines]",
          "1709:  if (!ctx->notime) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1919:   naludmx_enqueue_or_dispatch(ctx, NULL, GF_TRUE);",
          "1921:  ctx->first_pck_in_au = NULL;",
          "",
          "[Removed Lines]",
          "1918:  if (ctx->timescale || (!ctx->strict_poc && ctx->poc_probe_done) )",
          "",
          "[Added Lines]",
          "1921:  if (!ctx->notime || (!ctx->strict_poc && ctx->poc_probe_done) )",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1932: }",
          "1967: GF_FilterPacket *naludmx_start_nalu(GF_NALUDmxCtx *ctx, u32 nal_size, Bool skip_nal_field, Bool *au_start, u8 **pck_data)",
          "1968: {",
          "1969:  GF_FilterPacket *dst_pck = gf_filter_pck_new_alloc(ctx->opid, nal_size + (skip_nal_field ? 0 : ctx->nal_length), pck_data);",
          "",
          "[Removed Lines]",
          "1935: GF_Err naludmx_realloc_last_pck(GF_NALUDmxCtx *ctx, u32 nb_bytes_to_add, u8 **data_ptr)",
          "1936: {",
          "1937:  GF_Err e;",
          "1938:  u8 *pck_data;",
          "1939:  u32 full_size;",
          "1940:  GF_FilterPacket *pck = gf_list_last(ctx->pck_queue);",
          "1942:  if (!pck) {",
          "1943:   GF_LOG(GF_LOG_ERROR, GF_LOG_PARSER, (\"[%s] attempt to reallocate a non-existing packet!\\n\", ctx->log_name));",
          "1944:   return GF_SERVICE_ERROR;",
          "1945:  }",
          "1946:  e = gf_filter_pck_expand(pck, nb_bytes_to_add, &pck_data, data_ptr, &full_size);",
          "1947:  if (e) {",
          "1948:   GF_LOG(GF_LOG_ERROR, GF_LOG_PARSER, (\"[%s] Failed to reallocate packet buffer: %s\\n\", ctx->log_name, gf_error_to_string(e) ));",
          "1949:   return e;",
          "1950:  }",
          "1951:  assert(ctx->bs_w);",
          "1953:  full_size -= ctx->nal_length;",
          "1954:  gf_bs_reassign_buffer(ctx->bs_w, pck_data, ctx->nal_length);",
          "1955:  gf_bs_write_int(ctx->bs_w, full_size, 8*ctx->nal_length);",
          "1956:  naludmx_update_nalu_maxsize(ctx, full_size);",
          "1958:  if (ctx->subsamples) {",
          "1959:   assert(ctx->subsamp_buffer_size>=14);",
          "1961:   gf_bs_reassign_buffer(ctx->bs_w, ctx->subsamp_buffer + ctx->subsamp_buffer_size-14 + 4, 14 - 4);",
          "1962:   gf_bs_write_u32(ctx->bs_w, full_size + ctx->nal_length);",
          "1963:  }",
          "1964:  return GF_OK;",
          "1965: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1990:    gf_filter_pck_set_dts(dst_pck, ctx->dts);",
          "1991:   }",
          "1995:   gf_filter_pck_set_duration(dst_pck, ctx->pck_duration ? ctx->pck_duration : ctx->cur_fps.den);",
          "1996:   if (ctx->in_seek) gf_filter_pck_set_seek_flag(dst_pck, GF_TRUE);",
          "",
          "[Removed Lines]",
          "1993:   gf_filter_pck_set_carousel_version(dst_pck, ctx->timescale ? 0 : 1);",
          "",
          "[Added Lines]",
          "1964:   gf_filter_pck_set_carousel_version(dst_pck, ctx->notime ? 1 : 0);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2552: static void naldmx_switch_timestamps(GF_NALUDmxCtx *ctx, GF_FilterPacket *pck)",
          "2553: {",
          "2556:   u64 ts = gf_filter_pck_get_cts(pck);",
          "2557:   if (ts != GF_FILTER_NO_TS) {",
          "2558:    ctx->prev_cts = ctx->cts;",
          "",
          "[Removed Lines]",
          "2555:  if (ctx->timescale) {",
          "",
          "[Added Lines]",
          "2526:  if (!ctx->notime) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2635: {",
          "2636:  GF_NALUDmxCtx *ctx = gf_filter_get_udta(filter);",
          "2637:  GF_FilterPacket *pck;",
          "2639:  u8 *start;",
          "2640:  u32 nalu_before = ctx->nb_nalus;",
          "2641:  u32 nalu_store_before = 0;",
          "",
          "[Removed Lines]",
          "2638:  GF_Err e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2779:   if (current == remain)",
          "2780:    current = -1;",
          "2783:   if (current<0) {",
          "2791:    break;",
          "2792:   }",
          "2794:   assert(current>=0);",
          "2798:    assert(remain>=current);",
          "2801:    start += current;",
          "2802:    remain -= current;",
          "2803:    current = 0;",
          "2818:    naldmx_check_timestamp_switch(ctx, &nalu_store_before, current, &drop_packet, pck);",
          "2819:   }",
          "2820:   if (!remain)",
          "2821:    break;",
          "",
          "[Removed Lines]",
          "2784:    if (!is_eos && !ctx->full_au_source) {",
          "2785:     break;",
          "2786:    }",
          "2787:    e = naludmx_realloc_last_pck(ctx, (u32) remain, &pck_data);",
          "2788:    if (e==GF_OK)",
          "2789:     memcpy(pck_data, start, (size_t) remain);",
          "2790:    remain = 0;",
          "2797:   if (!ctx->opid && current) {",
          "2799:             assert((s32) current >= 0);",
          "2804:   }",
          "2807:   if (current>0) {",
          "2809:    if (gf_list_count(ctx->pck_queue)) {",
          "2810:     e = naludmx_realloc_last_pck(ctx, current, &pck_data);",
          "2811:     if (e==GF_OK) {",
          "2812:      memcpy(pck_data, start, current);",
          "2813:     }",
          "2814:    }",
          "2815:    assert(remain>=current);",
          "2816:    start += current;",
          "2817:    remain -= current;",
          "",
          "[Added Lines]",
          "2760:   if (current) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3779:  { OFFS(seirw), \"rewrite AVC sei messages for ISOBMFF constraints\", GF_PROP_BOOL, \"true\", NULL, GF_FS_ARG_HINT_EXPERT},",
          "3780:  { OFFS(audelim), \"keep Access Unit delimiter in payload\", GF_PROP_BOOL, \"false\", NULL, GF_FS_ARG_HINT_EXPERT},",
          "3781:  { OFFS(analyze), \"skip reformat of decoder config and SEI and dispatch all NAL in input order - shall only be used with inspect filter analyze mode!\", GF_PROP_UINT, \"off\", \"off|on|bs|full\", GF_FS_ARG_HINT_HIDE},",
          "3783:  { OFFS(bsdbg), \"debug NAL parsing in parser@debug logs\\n\"",
          "3784:   \"- off: not enabled\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3730:  { OFFS(notime), \"ignore input timestamps, rebuild from 0\", GF_PROP_BOOL, \"false\", NULL, GF_FS_ARG_HINT_ADVANCED},",
          "",
          "---------------"
        ],
        "src/filters/reframe_prores.c||src/filters/reframe_prores.c": [
          "File: src/filters/reframe_prores.c -> src/filters/reframe_prores.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: {",
          "36:  GF_Fraction fps;",
          "38:  char *cid;",
          "",
          "[Removed Lines]",
          "37:  Bool findex;",
          "",
          "[Added Lines]",
          "37:  Bool findex, notime;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:   gf_filter_pid_copy_properties(ctx->opid, ctx->ipid);",
          "98:   gf_filter_pid_set_property(ctx->opid, GF_PROP_PID_UNFRAMED, NULL);",
          "99:  }",
          "102:   p = gf_filter_pid_get_property(pid, GF_PROP_PID_FPS);",
          "103:   if (p) ctx->cur_fps = p->value.frac;",
          "",
          "[Removed Lines]",
          "100:  if (ctx->timescale) {",
          "",
          "[Added Lines]",
          "102:  if (!ctx->timescale) {",
          "103:   ctx->notime = GF_TRUE;",
          "104:  } else {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "657:  { OFFS(findex), \"index frames. If true, filter will be able to work in rewind mode\", GF_PROP_BOOL, \"true\", NULL, 0},",
          "659:  { OFFS(cid), \"set QT 4CC for the imported media. If not set, defaults to 'ap4h' for YUV444 or 'apch' for YUV422\", GF_PROP_STRING, NULL, NULL, GF_FS_ARG_HINT_ADVANCED},",
          "660:  {0}",
          "661: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "664:  { OFFS(notime), \"ignore input timestamps, rebuild from 0\", GF_PROP_BOOL, \"false\", NULL, GF_FS_ARG_HINT_ADVANCED},",
          "",
          "---------------"
        ]
      }
    }
  ]
}