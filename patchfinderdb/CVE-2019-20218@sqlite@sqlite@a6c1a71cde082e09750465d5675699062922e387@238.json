{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "84d17bdaa7feac66828ac7fda23d4d080dd400c6",
      "candidate_info": {
        "commit_hash": "84d17bdaa7feac66828ac7fda23d4d080dd400c6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/84d17bdaa7feac66828ac7fda23d4d080dd400c6",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix an assert() added as part of commit [a11b393dc] that can fail if fts5 database records are corrupt.\n\nFossilOrigin-Name: 4630c1ec013a4c2e54a34c9a64b2c803ac3912450de660497eb34ee21c91f426",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5731: static int fts5TestUtf8(const char *z, int n){",
          "5733:   int i = 0;",
          "5734:   while( i<n ){",
          "5735:     if( (z[i] & 0x80)==0x00 ){",
          "",
          "[Removed Lines]",
          "5732:   assert( n>0 );",
          "",
          "[Added Lines]",
          "5732:   assert_nc( n>0 );",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "9886:   ), * FROM ttt('e')",
          "9887: } {1 {database disk image is malformed}}",
          "9889: sqlite3_fts5_may_be_corrupt 0",
          "9890: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9889: #-------------------------------------------------------------------------",
          "9890: #",
          "9891: reset_db",
          "9892: do_test 68.0 {",
          "9893:   sqlite3 db {}",
          "9894:   db deserialize [decode_hexdb {",
          "9895: .open --hexdb",
          "9896: | size 32768 pagesize 4096 filename crash-41234e232809e7.db",
          "9897: | page 1 offset 0",
          "9898: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "9899: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 08   .....@  ........",
          "9900: |     32: 00 00 00 02 00 00 00 01 00 00 00 09 00 00 00 04   ................",
          "9901: |     96: 00 00 00 00 0d 0f c7 00 07 0d 92 00 0f 8d 0f 36   ...............6",
          "9902: |    112: 0e cb 0e 6b 0e 0e 0d b6 0d 92 0d 92 00 00 00 00   ...k............",
          "9903: |   3472: 00 00 22 08 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "9904: |   3488: 32 74 32 08 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "9905: |   3504: 20 74 32 28 78 29 56 07 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "9906: |   3520: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "9907: |   3536: 6f 6e 66 69 67 07 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "9908: |   3552: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "9909: |   3568: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "9910: |   3584: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 06    WITHOUT ROWID[.",
          "9911: |   3600: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "9912: |   3616: 6f 63 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsizet1_docsize",
          "9913: |   3632: 06 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "9914: |   3648: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "9915: |   3664: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "9916: |   3680: 59 2c 20 73 7a 20 42 4c 4f 42 29 5e 05 07 17 21   Y, sz BLOB)^...!",
          "9917: |   3696: 21 01 81 07 74 61 62 6c 65 74 31 5f 63 6f 6e 74   !...tablet1_cont",
          "9918: |   3712: 65 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 05 43 52   entt1_content.CR",
          "9919: |   3728: 45 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63   EATE TABLE 't1_c",
          "9920: |   3744: 6f 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47   ontent'(id INTEG",
          "9921: |   3760: 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20   ER PRIMARY KEY,",
          "9922: |   3776: 63 30 2c 20 63 31 2c 20 63 32 29 69 04 07 17 19   c0, c1, c2)i....",
          "9923: |   3792: 19 01 81 2d 74 61 62 6c 65 74 31 5f 69 64 78 74   ...-tablet1_idxt",
          "9924: |   3808: 31 5f 69 64 78 04 43 52 45 41 54 45 20 54 41 42   1_idx.CREATE TAB",
          "9925: |   3824: 4c 45 20 27 74 31 5f 69 64 78 27 28 73 65 67 69   LE 't1_idx'(segi",
          "9926: |   3840: 64 2c 20 74 65 72 6d 2c 20 70 67 6e 6f 2c 20 50   d, term, pgno, P",
          "9927: |   3856: 52 49 4d 41 52 59 20 4b 45 59 28 73 65 67 69 64   RIMARY KEY(segid",
          "9928: |   3872: 2c 20 74 65 72 6d 29 29 20 57 49 54 48 4f 55 54   , term)) WITHOUT",
          "9929: |   3888: 20 52 4f 57 49 44 55 03 07 17 1b 1b 01 81 01 74    ROWIDU........t",
          "9930: |   3904: 61 62 6c 65 74 31 5f 64 61 74 61 74 31 5f 64 61   ablet1_datat1_da",
          "9931: |   3920: 74 61 03 43 52 45 41 54 45 20 54 41 42 4c 45 20   ta.CREATE TABLE",
          "9932: |   3936: 27 74 31 5f 64 61 74 61 27 28 69 64 20 49 4e 54   't1_data'(id INT",
          "9933: |   3952: 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59   EGER PRIMARY KEY",
          "9934: |   3968: 2c 20 62 6c 6f 63 6b 20 42 4c 4f 42 29 38 02 06   , block BLOB)8..",
          "9935: |   3984: 17 11 11 08 5f 74 61 62 6c 65 74 31 74 31 43 52   ...._tablet1t1CR",
          "9936: |   4000: 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41 42   EATE VIRTUAL TAB",
          "9937: |   4016: 4c 45 20 74 31 20 55 53 49 4e 47 20 66 74 73 35   LE t1 USING fts5",
          "9938: |   4032: 28 61 2c 62 2c 63 29 00 00 00 00 00 00 00 00 00   (a,b,c).........",
          "9939: | page 3 offset 8192",
          "9940: |      0: 0d 00 00 00 03 0c 94 00 0f e6 0f ef 0c 94 00 00   ................",
          "9941: |     16: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00   ................",
          "9942: |   3216: 00 00 00 00 86 4a 84 80 80 80 80 01 04 00 8d 18   .....J..........",
          "9943: |   3232: 00 00 03 2b 02 30 30 01 02 06 01 02 06 01 02 06   ...+.00.........",
          "9944: |   3248: 1f 02 03 01 02 03 01 02 03 01 08 32 30 31 36 30   ...........20160",
          "9945: |   3264: 36 30 39 01 02 07 01 02 07 01 02 07 00 01 34 01   609...........4.",
          "9946: |   3280: 02 05 01 02 05 01 02 05 01 01 35 01 02 04 01 02   ..........5.....",
          "9947: |   3296: 04 01 02 04 02 07 30 30 30 30 30 30 30 1c 02 04   ......0000000...",
          "9948: |   3312: 01 02 04 01 02 03 f1 06 62 69 6e 62 72 79 03 06   ........binbry..",
          "9949: |   3328: 01 02 02 03 06 01 02 02 03 06 01 02 01 03 16 01   ................",
          "9950: |   3344: 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02   ................",
          "9951: |   3360: 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02 02   ................",
          "9952: |   3376: 03 04 71 02 02 03 06 11 02 02 01 08 63 6f 6d 70   ..q.........comp",
          "9953: |   3392: 69 6c 65 72 01 02 02 01 02 02 01 02 02 01 06 64   iler...........d",
          "9954: |   3408: 62 73 74 61 74 07 02 03 01 02 03 01 02 03 02 04   bstat...........",
          "9955: |   3424: 65 62 75 67 04 02 02 01 02 02 01 02 02 01 06 65   ebug...........e",
          "9956: |   3440: 6e 61 62 6c 65 07 02 02 01 02 02 01 02 02 01 02   nable...........",
          "9957: |   3456: 02 01 02 02 01 02 02 01 02 02 01 02 02 01 03 02   ................",
          "9958: |   3472: 00 02 02 01 02 02 01 02 02 01 02 02 01 02 02 01   ................",
          "9959: |   3488: 02 02 01 02 02 01 02 02 01 02 02 01 02 02 01 02   ................",
          "9960: |   3504: 02 01 02 02 02 08 78 74 65 6e 73 69 6f 6e 1f 02   ......xtension..",
          "9961: |   3520: 04 01 02 04 01 02 04 01 04 66 74 73 34 0a 02 03   .........fts4...",
          "9962: |   3536: 01 02 03 01 02 03 04 01 35 0d 02 03 01 02 03 01   ........5.......",
          "9963: |   3552: 02 03 01 03 66 63 63 01 02 03 01 02 03 01 02 03   ....fcc.........",
          "9964: |   3568: 02 06 65 6f 70 6f 6c 79 10 02 03 01 02 03 01 02   ..eopoly........",
          "9965: |   3584: 03 01 05 6a 73 6f 5e 31 13 02 03 01 02 03 01 02   ...jso^1........",
          "9966: |   3600: 03 01 04 6c 6f 61 64 1f 02 03 01 02 03 01 02 03   ...load.........",
          "9967: |   3616: 01 03 6d 61 78 1c 02 02 01 02 02 01 02 02 02 05   ..max...........",
          "9968: |   3632: 65 6d 6f 72 79 1c 02 03 01 02 03 01 02 03 04 04   emory...........",
          "9969: |   3648: 73 79 73 35 16 02 03 01 02 03 01 02 03 01 06 6e   sys5...........n",
          "9970: |   3664: 6f 63 61 73 65 02 06 01 02 02 03 06 01 02 02 03   ocase...........",
          "9971: |   3680: 06 01 02 02 03 06 01 02 02 03 06 01 02 02 13 06   ................",
          "9972: |   3696: 01 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01   ................",
          "9973: |   3712: 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02   ................",
          "9974: |   3728: 02 01 04 6f 6d 69 74 1f 02 02 01 02 02 01 02 02   ...omit.........",
          "9975: |   3744: 01 05 72 74 72 65 65 19 02 03 01 02 03 01 02 03   ..rtree.........",
          "9976: |   3760: 04 02 69 6d 01 06 01 02 02 03 06 01 12 02 03 06   ..im............",
          "9977: |   3776: 01 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01   ................",
          "9978: |   3792: 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02   ................",
          "9979: |   3808: 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02 02   ................",
          "9980: |   3824: 01 0a 74 68 72 65 61 64 73 61 66 65 22 02 02 01   ..threadsafe....",
          "9981: |   3840: 02 02 01 02 02 01 04 76 74 61 62 07 02 04 01 02   .......vtab.....",
          "9982: |   3856: 04 01 02 04 01 01 78 01 06 01 01 02 01 06 01 01   ......x.........",
          "9983: |   3872: 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02   ................",
          "9984: |   3888: 01 06 01 01 02 01 06 01 01 02 01 05 f1 01 02 01   ................",
          "9985: |   3904: 06 01 01 02 01 06 01 5b 02 01 06 01 01 02 01 06   .......[........",
          "9986: |   3920: 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01   ................",
          "9987: |   3936: 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01   ................",
          "9988: |   3952: 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02   ................",
          "9989: |   3968: 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01   ................",
          "9990: |   3984: 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06   ................",
          "9991: |   4000: 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01   ................",
          "9992: |   4016: 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01   ................",
          "9993: |   4032: 02 01 06 01 01 02 01 06 01 01 02 04 15 13 0c 0c   ................",
          "9994: |   4048: 12 44 13 11 0f 47 13 0f 0c 0e 11 10 0f 0e 10 0f   .D...G..........",
          "9995: |   4064: 44 0f 10 40 15 0f 07 01 03 00 14 24 5a 24 24 0f   D..@.......$Z$$.",
          "9996: |   4080: 0a 03 00 24 00 00 00 00 01 01 01 00 01 01 01 01   ...$............",
          "9997: | page 4 offset 12288",
          "9998: |      0: 0a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "9999: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0b 01 02   ................",
          "10000: | page 5 offset 16384",
          "10001: |      0: 0d 00 00 00 24 0c 0a 00 0f d8 0f af 0f 86 0f 74   ....$..........t",
          "10002: |     16: 0f 61 0f 4e 0f 2f 0f 0f 0e ef 0e d7 0e be 0e a5   .a.N./..........",
          "10003: |     32: 0e 8d 0e 74 0e 5b 0e 40 0e 24 0e 08 0d ef 0d d5   ...t.[.@.$......",
          "10004: |     48: 0d bb 0d a0 0d 84 0d 68 0d 4f 0d 35 0d 1b 0c fb   .......h.O.5....",
          "10005: |     64: 0c da 0c b9 0c 99 0c 78 0c 57 0c 3e 0c 24 0c 0a   .......x.W.>.$..",
          "10006: |   3072: 00 00 00 00 00 00 00 00 00 00 18 24 05 00 25 0f   ...........$..%.",
          "10007: |   3088: 19 54 48 52 45 41 44 53 41 46 45 3d 30 58 42 49   .THREADSAFE=0XBI",
          "10008: |   3104: 4f 41 52 59 18 23 05 00 25 0f 19 54 48 52 45 41   OARY.#..%..THREA",
          "10009: |   3120: 44 53 41 46 45 3d 30 58 4e 4f 43 41 53 45 17 22   DSAFE=0XNOCASE..",
          "10010: |   3136: 05 00 25 0f 17 54 48 52 45 41 44 53 41 46 45 3d   ..%..THREADSAFE=",
          "10011: |   3152: 30 58 52 54 52 49 4d 1f 21 05 00 33 0f 19 4f 4d   0XRTRIM.!..3..OM",
          "10012: |   3168: 49 54 20 4c 4f 41 44 20 45 58 54 45 4e 53 49 4f   IT LOAD EXTENSIO",
          "10013: |   3184: 4e 58 42 49 4e 41 52 59 1f 20 05 00 33 0f 19 4f   NXBINARY. ..3..O",
          "10014: |   3200: 4d 49 54 20 4c 4f 41 44 20 45 58 54 45 4e 53 49   MIT LOAD EXTENSI",
          "10015: |   3216: 4f 4e 58 4e 4f 43 41 53 45 1e 1f 05 00 33 0f 17   ONXNOCASE....3..",
          "10016: |   3232: 4f 4d 49 54 20 4c 4f 41 44 20 45 58 54 45 4e 53   OMIT LOAD EXTENS",
          "10017: |   3248: 49 4f 4e 58 52 54 52 49 4d 1f 1e 05 00 33 0f 19   IONXRTRIM....3..",
          "10018: |   3264: 4d 41 58 20 4d 45 4d 4f 52 59 3d 35 30 30 30 30   MAX MEMORY=50000",
          "10019: |   3280: 30 30 30 58 42 49 4e 41 52 59 1f 1d 05 00 33 0f   000XBINARY....3.",
          "10020: |   3296: 19 4d 41 58 20 4d 45 4d 4f 52 59 3d 35 30 30 30   .MAX MEMORY=5000",
          "10021: |   3312: 30 30 30 30 58 4e 4f 43 41 53 45 1e 1c 05 00 33   0000XNOCASE....3",
          "10022: |   3328: 0f 17 4d 41 58 20 4d 45 4d 4f 52 59 3d 35 30 30   ..MAX MEMORY=500",
          "10023: |   3344: 30 30 30 30 30 58 52 54 52 49 4d 18 1b 05 00 25   00000XRTRIM....%",
          "10024: |   3360: 0f 19 45 4e 41 42 4c 45 20 52 54 52 45 45 58 42   ..ENABLE RTREEXB",
          "10025: |   3376: 49 4e 41 52 59 18 1a 05 00 25 0f 19 45 4e 41 42   INARY....%..ENAB",
          "10026: |   3392: 4c 45 20 52 54 52 46 45 58 4e 4f 43 41 53 45 17   LE RTRFEXNOCASE.",
          "10027: |   3408: 19 05 00 25 0f 17 45 4e 41 42 4c 45 20 52 54 52   ...%..ENABLE RTR",
          "10028: |   3424: 45 45 58 52 54 52 49 4d 1a 18 05 00 29 0f 19 45   EEXRTRIM....)..E",
          "10029: |   3440: 49 41 42 4c 45 20 4d 45 4d 53 59 53 35 58 42 49   IABLE MEMSYS5XBI",
          "10030: |   3456: 4e 41 52 59 1a 17 05 00 29 0f 19 45 4e 41 42 4c   NARY....)..ENABL",
          "10031: |   3472: 45 20 4d 45 4d 53 59 53 35 58 4e 4f 43 41 53 45   E MEMSYS5XNOCASE",
          "10032: |   3488: 19 16 05 00 29 0f 17 45 4e 41 42 4c 45 20 4d 45   ....)..ENABLE ME",
          "10033: |   3504: 4d 53 59 53 35 58 52 54 52 49 4d 18 15 05 00 25   MSYS5XRTRIM....%",
          "10034: |   3520: 0f 19 45 4e 41 42 4c 45 20 4a 53 4f 4e 31 58 42   ..ENABLE JSON1XB",
          "10035: |   3536: 49 4e 41 52 59 18 14 05 00 25 0f 19 45 4e 41 42   INARY....%..ENAB",
          "10036: |   3552: 4c 45 20 4a 53 4f 4e 31 58 4e 4f 43 41 53 45 17   LE JSON1XNOCASE.",
          "10037: |   3568: 13 05 00 25 0f 17 45 4e 41 42 4c 45 20 4a 53 4f   ...%..ENABLE JSO",
          "10038: |   3584: 4e 31 58 52 54 52 49 4d 1a 12 05 00 29 0f 19 45   N1XRTRIM....)..E",
          "10039: |   3600: 4e 41 42 4c 45 20 47 45 4f 50 4f 4c 59 57 42 49   NABLE GEOPOLYWBI",
          "10040: |   3616: 4e 41 52 59 1a 11 05 00 29 0f 19 45 4e 41 42 4c   NARY....)..ENABL",
          "10041: |   3632: 45 20 47 45 4f 50 4f 4c 59 58 4e 4f 42 41 53 45   E GEOPOLYXNOBASE",
          "10042: |   3648: 19 10 05 00 29 0f 17 45 4e 41 42 4c 45 20 47 45   ....)..ENABLE GE",
          "10043: |   3664: 4f 50 4f 4c 59 58 52 54 52 49 4d 17 0f 05 00 23   OPOLYXRTRIM....#",
          "10044: |   3680: 0f 19 45 4e 41 42 4c 45 20 46 54 53 35 58 42 49   ..ENABLE FTS5XBI",
          "10045: |   3696: 4e 41 52 59 17 0e 05 00 23 0f 19 45 4e 41 42 4c   NARY....#..ENABL",
          "10046: |   3712: 45 20 46 54 53 35 58 4e 4f 43 41 53 45 16 0d 05   E FTS5XNOCASE...",
          "10047: |   3728: 00 23 0f 17 45 4e 41 42 4c 45 20 46 54 53 35 58   .#..ENABLE FTS5X",
          "10048: |   3744: 52 54 52 49 4d 17 0c 05 00 23 0f 19 45 4e 41 42   RTRIM....#..ENAB",
          "10049: |   3760: 4c 45 20 46 54 53 34 58 42 49 4e 41 52 59 17 0b   LE FTS4XBINARY..",
          "10050: |   3776: 05 00 23 0f 19 45 4e 41 42 4c 45 20 46 54 53 34   ..#..ENABLE FTS4",
          "10051: |   3792: 58 4e 4f 43 41 53 45 16 0a 05 00 23 0f 17 45 4e   XNOCASE....#..EN",
          "10052: |   3808: 41 42 4c 45 20 46 54 53 34 58 52 54 52 49 4d 1e   ABLE FTS4XRTRIM.",
          "10053: |   3824: 09 05 00 31 0f 19 45 4e 41 42 4c 45 20 44 42 53   ...1..ENABLE DBS",
          "10054: |   3840: 54 41 54 20 56 54 41 42 58 42 49 4e 41 52 59 1e   TAT VTABXBINARY.",
          "10055: |   3856: 08 05 00 31 0f 19 45 4e 41 42 4c 45 20 44 42 53   ...1..ENABLE DBS",
          "10056: |   3872: 54 41 54 20 56 54 41 42 58 4e 4f 43 41 53 45 1d   TAT VTABXNOCASE.",
          "10057: |   3888: 07 05 00 31 0f 17 b7 4e 41 42 4c 45 20 44 42 53   ...1...NABLE DBS",
          "10058: |   3904: 54 41 54 20 66 54 41 42 58 52 54 52 49 4d 11 06   TAT fTABXRTRIM..",
          "10059: |   3920: 05 00 17 0f 19 44 45 42 55 47 58 42 49 4e 41 52   .....DEBUGXBINAR",
          "10060: |   3936: 59 11 05 05 00 17 0f 19 44 45 42 55 47 58 4e 4f   Y.......DEBUGXNO",
          "10061: |   3952: 43 41 53 45 10 04 05 00 17 0f 17 44 45 42 55 47   CASE.......DEBUG",
          "10062: |   3968: 58 62 54 52 49 4d 27 03 05 00 43 0f 19 43 4f 4d   XbTRIM'...C..COM",
          "10063: |   3984: 50 49 4c 45 52 3d 67 63 63 2d 35 2e 34 2e 30 20   PILER=gcc-5.4.0",
          "10064: |   4000: 32 30 31 36 30 36 30 39 52 02 4a 4e 41 52 59 27   20160609R.JNARY'",
          "10065: |   4016: 02 05 00 43 0f 19 43 4f 4d 50 49 4c 45 52 3d 67   ...C..COMPILER=g",
          "10066: |   4032: 63 63 2d 35 2e 34 2e 30 20 32 30 31 36 30 36 30   cc-5.4.0 2016060",
          "10067: |   4048: 39 58 4e 4f 43 41 53 45 26 01 05 00 43 0f 17 43   9XNOCASE&...C..C",
          "10068: |   4064: 4f 4d 50 49 4c 45 52 3d 67 63 63 2d 35 2e 34 2e   OMPILER=gcc-5.4.",
          "10069: |   4080: 30 20 32 30 31 36 30 36 30 39 58 52 54 52 49 4d   0 20160609XRTRIM",
          "10070: | page 6 offset 20480",
          "10071: |      0: 0d 00 00 00 24 0e e0 00 0f f8 0f f0 0f e8 0f e0   ....$...........",
          "10072: |     16: 0f d8 0f d0 0f c8 0f c0 0f b8 0f b0 0f a8 0f a0   ................",
          "10073: |     32: 0f 98 0f 90 0f 88 0f 80 0f 78 0f 70 0f 68 0f 60   .........x.p.h.`",
          "10074: |     48: 0f 58 0f 50 0f 48 0f 40 0f 38 0f 30 0f 28 0f 20   .X.P.H.@.8.0.(.",
          "10075: |     64: 0f 18 0f 10 0f 08 0f 00 0e f8 0e f0 0e e8 0e e0   ................",
          "10076: |   3808: 06 24 03 00 12 02 01 01 06 23 03 00 12 02 01 01   .$.......#......",
          "10077: |   3824: 06 22 03 00 12 02 01 01 06 21 03 00 12 03 01 01   .........!......",
          "10078: |   3840: 06 20 03 00 12 03 01 01 06 1f 03 00 12 03 01 01   . ..............",
          "10079: |   3856: 06 1e 03 00 12 03 01 01 06 1d 03 00 12 03 01 01   ................",
          "10080: |   3872: 06 1c 03 00 12 03 01 01 06 1b 03 00 12 02 01 01   ................",
          "10081: |   3888: 06 1a 03 00 12 02 01 01 06 19 03 00 12 02 01 01   ................",
          "10082: |   3904: 06 18 03 00 12 02 01 01 06 17 03 00 12 02 01 01   ................",
          "10083: |   3920: 06 16 03 00 12 02 01 01 06 15 03 00 12 02 01 01   ................",
          "10084: |   3936: 06 14 03 00 12 02 01 01 06 13 03 00 12 02 01 01   ................",
          "10085: |   3952: 06 12 03 00 12 02 01 01 06 11 03 00 12 02 01 01   ................",
          "10086: |   3968: 06 10 03 00 12 02 01 01 06 0f 03 00 12 02 01 01   ................",
          "10087: |   3984: 06 0e 03 00 12 02 01 01 06 0d 03 00 12 02 01 01   ................",
          "10088: |   4000: 06 0c 03 00 12 02 01 01 06 0b 03 00 12 02 01 01   ................",
          "10089: |   4016: 06 0a 03 00 12 02 01 01 06 09 03 00 12 03 01 01   ................",
          "10090: |   4032: 06 08 03 00 12 03 01 01 06 07 03 00 12 03 01 01   ................",
          "10091: |   4048: 06 06 03 00 12 01 01 01 06 05 03 00 12 01 01 01   ................",
          "10092: |   4064: 06 04 03 00 12 01 01 01 06 03 03 00 12 06 01 01   ................",
          "10093: |   4080: 06 02 03 00 12 06 01 01 06 01 03 00 12 06 01 01   ................",
          "10094: | page 7 offset 24576",
          "10095: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "10096: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "10097: | page 8 offset 28672",
          "10098: |      0: 0d 00 00 00 03 0f d6 00 0f f4 0f e9 0f d6 00 00   ................",
          "10099: |   4048: 00 00 00 00 00 00 11 04 02 2b 69 6e 74 65 67 72   .........+integr",
          "10100: |   4064: 69 74 79 2d 63 68 65 63 6b 09 02 02 1b 72 65 62   ity-check....reb",
          "10101: |   4080: 75 69 6c 64 0a 01 02 1d 6f 70 74 69 5d 69 71 a5   uild....opti]iq.",
          "10102: | end crash-41234e232809e7.db",
          "10103: .testctrl prng_seed 1 db",
          "10104: }]} {}",
          "10106: do_catchsql_test 68.1 {",
          "10107:   PRAGMA reverse_unordered_selects=ON;",
          "10108:   INSERT INTO t1(t1) SELECT x FROM t2;",
          "10109: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0a70f5ddaf3567f335cc0fd0fcd5303e2afb5e38a6388faddf5cab1f2a74e3dd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f3ce2483f52a31b5d63dcf292f7f766f21178839",
      "candidate_info": {
        "commit_hash": "f3ce2483f52a31b5d63dcf292f7f766f21178839",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f3ce2483f52a31b5d63dcf292f7f766f21178839",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c",
          "src/vdbeaux.c"
        ],
        "message": "Save CPU cycles in sqlite3Prepare() by, among other things, shifting the EXPLAIN column label logic over to sqlite3VdbeMakeReady().\n\nFossilOrigin-Name: 1ca5ef84506aac3e2f08baa36095b3befdeedf2a3443fcd9154a277b55cbf64b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 238e0835714696aba0631f288fcc30ec5fddb43893d469c6bf017f386b3cddee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "643:   }",
          "644:   assert( 0==sParse.nQueryLoop );",
          "647:   if( sParse.checkSchema ){",
          "648:     schemaIsValid(&sParse);",
          "649:   }",
          "653:   if( pzTail ){",
          "655:   }",
          "684:   if( db->init.busy==0 ){",
          "685:     sqlite3VdbeSetSql(sParse.pVdbe, zSql, (int)(sParse.zTail-zSql), prepFlags);",
          "686:   }",
          "688:     if( sParse.pVdbe ) sqlite3VdbeFinalize(sParse.pVdbe);",
          "689:     assert(!(*ppStmt));",
          "690:   }else{",
          "",
          "[Removed Lines]",
          "646:   if( sParse.rc==SQLITE_DONE ) sParse.rc = SQLITE_OK;",
          "650:   if( db->mallocFailed ){",
          "651:     sParse.rc = SQLITE_NOMEM_BKPT;",
          "652:   }",
          "656:   rc = sParse.rc;",
          "658: #ifndef SQLITE_OMIT_EXPLAIN",
          "662:   if( sParse.explain && rc==SQLITE_OK && ALWAYS(sParse.pVdbe) ){",
          "663:     static const char * const azColName[] = {",
          "664:        \"addr\", \"opcode\", \"p1\", \"p2\", \"p3\", \"p4\", \"p5\", \"comment\",",
          "665:        \"id\", \"parent\", \"notused\", \"detail\"",
          "666:     };",
          "667:     int iFirst, mx;",
          "668:     if( sParse.explain==2 ){",
          "669:       sqlite3VdbeSetNumCols(sParse.pVdbe, 4);",
          "670:       iFirst = 8;",
          "671:       mx = 12;",
          "672:     }else{",
          "673:       sqlite3VdbeSetNumCols(sParse.pVdbe, 8);",
          "674:       iFirst = 0;",
          "675:       mx = 8;",
          "676:     }",
          "677:     for(i=iFirst; i<mx; i++){",
          "678:       sqlite3VdbeSetColName(sParse.pVdbe, i-iFirst, COLNAME_NAME,",
          "679:                             azColName[i], SQLITE_STATIC);",
          "680:     }",
          "681:   }",
          "682: #endif",
          "687:   if( rc!=SQLITE_OK || db->mallocFailed ){",
          "",
          "[Added Lines]",
          "646:   if( sParse.rc==SQLITE_DONE ){",
          "647:     sParse.rc = SQLITE_OK;",
          "648:   }",
          "659:   if( db->mallocFailed ){",
          "660:     sParse.rc = SQLITE_NOMEM_BKPT;",
          "661:   }",
          "662:   rc = sParse.rc;",
          "663:   if( rc!=SQLITE_OK ){",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2224:   resolveP2Values(p, &nArg);",
          "2225:   p->usesStmtJournal = (u8)(pParse->isMultiWrite && pParse->mayAbort);",
          "2228:   }",
          "2229:   p->expired = 0;",
          "",
          "[Removed Lines]",
          "2226:   if( pParse->explain && nMem<10 ){",
          "2227:     nMem = 10;",
          "",
          "[Added Lines]",
          "2226:   if( pParse->explain ){",
          "2227:     static const char * const azColName[] = {",
          "2228:        \"addr\", \"opcode\", \"p1\", \"p2\", \"p3\", \"p4\", \"p5\", \"comment\",",
          "2229:        \"id\", \"parent\", \"notused\", \"detail\"",
          "2230:     };",
          "2231:     int iFirst, mx, i;",
          "2232:     if( nMem<10 ) nMem = 10;",
          "2233:     if( pParse->explain==2 ){",
          "2234:       sqlite3VdbeSetNumCols(p, 4);",
          "2235:       iFirst = 8;",
          "2236:       mx = 12;",
          "2237:     }else{",
          "2238:       sqlite3VdbeSetNumCols(p, 8);",
          "2239:       iFirst = 0;",
          "2240:       mx = 8;",
          "2241:     }",
          "2242:     for(i=iFirst; i<mx; i++){",
          "2243:       sqlite3VdbeSetColName(p, i-iFirst, COLNAME_NAME,",
          "2244:                             azColName[i], SQLITE_STATIC);",
          "2245:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "996f5ccb3328b12e8b8c65b0f536e1f717a60067",
      "candidate_info": {
        "commit_hash": "996f5ccb3328b12e8b8c65b0f536e1f717a60067",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/996f5ccb3328b12e8b8c65b0f536e1f717a60067",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Fix an incorrect assert() in balance_nonroot().\n\nFossilOrigin-Name: 59c9e73f86b89ee17b0bce47bcb93f5b5ace5b7985678287195002afb9d40cd8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9ec92939cb2d2c96ae15bc496feed233ce31424c25a6bf86ace7e0ef3eedec5b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6664:   assert( pPage->nOverflow<=ArraySize(pPage->apOvfl) );",
          "6665:   assert( ArraySize(pPage->apOvfl)==ArraySize(pPage->aiOvfl) );",
          "6666:   assert( sqlite3_mutex_held(pPage->pBt->mutex) );",
          "6673:   assert( pPage->nFree>=0 );",
          "6674:   if( pPage->nOverflow || sz+2>pPage->nFree ){",
          "6675:     if( pTemp ){",
          "",
          "[Removed Lines]",
          "6672:   assert( sz==pPage->xCellSize(pPage, pCell) || (sz==8 && iChild>0) );",
          "",
          "[Added Lines]",
          "6667:   assert( sz==pPage->xCellSize(pPage, pCell) || CORRUPT_DB );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57c45147207fcf1d94a8a3a324ecf4d19922dfa1",
      "candidate_info": {
        "commit_hash": "57c45147207fcf1d94a8a3a324ecf4d19922dfa1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/57c45147207fcf1d94a8a3a324ecf4d19922dfa1",
        "files": [
          "ext/rbu/rbuvacuum4.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Optimize further cases of restarting an RBU vacuum.\n\nFossilOrigin-Name: 6b3261bfa1d762aa29a57244a30cf5e35655f1fe9c30ee682c186dec29d7a2c2",
        "before_after_code_files": [
          "ext/rbu/rbuvacuum4.test||ext/rbu/rbuvacuum4.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbuvacuum4.test||ext/rbu/rbuvacuum4.test": [
          "File: ext/rbu/rbuvacuum4.test -> ext/rbu/rbuvacuum4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 Jan 3",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # This file contains tests for the RBU module. More specifically, it",
          "13: # contains tests to ensure that the sqlite3rbu_vacuum() API works as",
          "14: # expected.",
          "15: #",
          "17: source [file join [file dirname [info script]] rbu_common.tcl]",
          "18: set testprefix rbuvacuum4",
          "20: set step 1",
          "22: do_execsql_test 1.0 {",
          "23:   CREATE TABLE t1(a PRIMARY KEY, b, c) WITHOUT ROWID;",
          "24:   INSERT INTO t1 VALUES(1, 2, 3);",
          "25:   INSERT INTO t1 VALUES(4, 5, 6);",
          "26:   INSERT INTO t1 VALUES(7, 8, 9);",
          "27: }",
          "28: do_rbu_vacuum_test 1.1 1",
          "30: #-------------------------------------------------------------------------",
          "31: reset_db",
          "33: do_execsql_test 2.0 {",
          "34:   CREATE TABLE t1(a, b, c, PRIMARY KEY(a, b, c)) WITHOUT ROWID;",
          "35:   INSERT INTO t1 VALUES(1, 2, 3);",
          "36:   INSERT INTO t1 VALUES(4, 5, 6);",
          "37:   INSERT INTO t1 VALUES(7, 8, 9);",
          "38: }",
          "39: do_rbu_vacuum_test 2.1 1",
          "40: do_execsql_test 2.2 {",
          "41:   SELECT * FROM t1;",
          "42: } {1 2 3 4 5 6 7 8 9}",
          "44: #-------------------------------------------------------------------------",
          "45: reset_db",
          "47: do_execsql_test 3.0 {",
          "48:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b, c);",
          "49:   CREATE INDEX i1 oN t1(b, c);",
          "50:   INSERT INTO t1 VALUES(1, 2, 3);",
          "51:   INSERT INTO t1 VALUES(4, 5, 6);",
          "52:   INSERT INTO t1 VALUES(7, 8, 9);",
          "53: }",
          "55: do_rbu_vacuum_test 3.1 1",
          "57: do_execsql_test 3.2 {",
          "58:   SELECT * FROM t1;",
          "59: } {1 2 3 4 5 6 7 8 9}",
          "61: #-------------------------------------------------------------------------",
          "62: reset_db",
          "63: do_execsql_test 4.0 {",
          "64:   CREATE TABLE x1(a, b, c, d, PRIMARY KEY(c, b)) WITHOUT ROWID;",
          "65:   INSERT INTO x1 VALUES(1, 1, 1, 1);",
          "66:   INSERT INTO x1 VALUES(1, 1, 2, 1);",
          "67:   INSERT INTO x1 VALUES(1, 2, 2, 1);",
          "69:   INSERT INTO x1 VALUES(NULL, 2, 3, NULL);",
          "70:   INSERT INTO x1 VALUES(NULL, 2, 4, NULL);",
          "71:   INSERT INTO x1 VALUES(NULL, 2, 5, NULL);",
          "73:   CREATE INDEX x1ad ON x1(d, a);",
          "74: }",
          "76: do_rbu_vacuum_test 4.1.1 1",
          "78: do_execsql_test 4.2 {",
          "79:   SELECT count(*) fROM x1",
          "80: } 6",
          "82: do_rbu_vacuum_test 4.1.2 0",
          "84: finish_test",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1476:           zSelect = rbuMPrintf(p, \"%z%squote(\\\"%w\\\")\", zSelect, zSep2, zCol);",
          "1477:           zSep = \", \";",
          "1478:           zSep2 = \"||','||\";",
          "1479:         }",
          "1480:       }",
          "1481:       if( i==pIter->nTblCol ) break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1479:           break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1503:   return zRet;",
          "1504: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1507: char *rbuVacuumIndexStart(",
          "1508:   sqlite3rbu *p,",
          "1509:   RbuObjIter *pIter",
          "1510: ){",
          "1511:   char *zOrder = 0;",
          "1512:   char *zLhs = 0;",
          "1513:   char *zSelect = 0;",
          "1514:   char *zVector = 0;",
          "1515:   char *zRet = 0;",
          "1516:   int bFailed = 0;",
          "1518:   if( p->rc==SQLITE_OK ){",
          "1519:     const char *zSep = \"\";",
          "1520:     int iCol = 0;",
          "1521:     sqlite3_stmt *pXInfo = 0;",
          "1522:     p->rc = prepareFreeAndCollectError(p->dbMain, &pXInfo, &p->zErrmsg,",
          "1523:         sqlite3_mprintf(\"PRAGMA main.index_xinfo = %Q\", pIter->zIdx)",
          "1524:     );",
          "1525:     while( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pXInfo) ){",
          "1526:       int iCid = sqlite3_column_int(pXInfo, 1);",
          "1527:       const char *zCollate = (const char*)sqlite3_column_text(pXInfo, 4);",
          "1528:       const char *zCol;",
          "1529:       if( sqlite3_column_int(pXInfo, 3) ){",
          "1530:         bFailed = 1;",
          "1531:         break;",
          "1532:       }",
          "1534:       if( iCid<0 ){",
          "1535:         if( pIter->eType==RBU_PK_IPK ){",
          "1536:           int i;",
          "1537:           for(i=0; pIter->abTblPk[i]==0; i++);",
          "1538:           assert( i<pIter->nTblCol );",
          "1539:           zCol = pIter->azTblCol[i];",
          "1540:         }else{",
          "1541:           zCol = \"_rowid_\";",
          "1542:         }",
          "1543:       }else{",
          "1544:         zCol = pIter->azTblCol[iCid];",
          "1545:       }",
          "1547:       zLhs = rbuMPrintf(p, \"%z%s \\\"%w\\\" COLLATE %Q\",",
          "1548:           zLhs, zSep, zCol, zCollate",
          "1549:       );",
          "1550:       zOrder = rbuMPrintf(p, \"%z%s \\\"rbu_imp_%d%w\\\" COLLATE %Q DESC\",",
          "1551:           zOrder, zSep, iCol, zCol, zCollate",
          "1552:       );",
          "1553:       zSelect = rbuMPrintf(p, \"%z%s quote(\\\"rbu_imp_%d%w\\\")\",",
          "1554:           zSelect, zSep, iCol, zCol",
          "1555:       );",
          "1556:       zSep = \", \";",
          "1557:       iCol++;",
          "1558:     }",
          "1559:     rbuFinalize(p, pXInfo);",
          "1560:   }",
          "1561:   if( bFailed ) goto index_start_out;",
          "1563:   if( p->rc==SQLITE_OK ){",
          "1564:     int iCol;",
          "1565:     sqlite3_stmt *pSel = 0;",
          "1567:     if( p->rc==SQLITE_OK ){",
          "1568:       p->rc = prepareFreeAndCollectError(p->dbMain, &pSel, &p->zErrmsg,",
          "1569:           sqlite3_mprintf(\"SELECT %s FROM \\\"rbu_imp_%w\\\" ORDER BY %s LIMIT 1\",",
          "1570:             zSelect, pIter->zTbl, zOrder",
          "1571:           )",
          "1572:       );",
          "1573:     }",
          "1574:     if( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pSel) ){",
          "1575:       const char *zSep = \"\";",
          "1576:       for(iCol=0; iCol<pIter->nCol; iCol++){",
          "1577:         const char *zQuoted = (const char*)sqlite3_column_text(pSel, iCol);",
          "1578:         if( zQuoted[0]=='N' ){",
          "1579:           bFailed = 1;",
          "1580:           break;",
          "1581:         }",
          "1582:         zVector = rbuMPrintf(p, \"%z%s%s\", zVector, zSep, zQuoted);",
          "1583:         zSep = \", \";",
          "1584:       }",
          "1586:       if( !bFailed ){",
          "1587:         zRet = rbuMPrintf(p, \"(%s) > (%s)\", zLhs, zVector);",
          "1588:       }",
          "1589:     }",
          "1590:     rbuFinalize(p, pSel);",
          "1591:   }",
          "1593:  index_start_out:",
          "1594:   sqlite3_free(zOrder);",
          "1595:   sqlite3_free(zSelect);",
          "1596:   sqlite3_free(zVector);",
          "1597:   sqlite3_free(zLhs);",
          "1598:   return zRet;",
          "1599: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2179:       if( p->rc==SQLITE_OK ){",
          "2180:         char *zSql;",
          "2181:         if( rbuIsVacuum(p) ){",
          "2182:           zSql = sqlite3_mprintf(",
          "2184:               zCollist,",
          "2185:               pIter->zDataTbl,",
          "2187:           );",
          "2188:         }else",
          "2190:         if( pIter->eType==RBU_PK_EXTERNAL || pIter->eType==RBU_PK_NONE ){",
          "",
          "[Removed Lines]",
          "2183:               \"SELECT %s, 0 AS rbu_control FROM '%q' %s ORDER BY %s%s\",",
          "2186:               zPart, zCollist, zLimit",
          "",
          "[Added Lines]",
          "2277:           const char *zStart = 0;",
          "2278:           if( nOffset ){",
          "2279:             zStart = rbuVacuumIndexStart(p, pIter);",
          "2280:             if( zStart ){",
          "2281:               sqlite3_free(zLimit);",
          "2282:               zLimit = 0;",
          "2283:             }",
          "2284:           }",
          "2287:               \"SELECT %s, 0 AS rbu_control FROM '%q' %s %s %s ORDER BY %s%s\",",
          "2290:               zPart,",
          "2291:               (zStart ? (zPart ? \"AND\" : \"WHERE\") : \"\"), zStart,",
          "2292:               zCollist, zLimit",
          "2294:           sqlite3_free(zStart);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2207:               zCollist, zLimit",
          "2208:           );",
          "2209:         }",
          "2211:       }",
          "2213:       sqlite3_free(zImposterCols);",
          "",
          "[Removed Lines]",
          "2210:         p->rc = prepareFreeAndCollectError(p->dbRbu, &pIter->pSelect, pz, zSql);",
          "",
          "[Added Lines]",
          "2317:         if( p->rc==SQLITE_OK ){",
          "2318:           p->rc = prepareFreeAndCollectError(p->dbRbu,&pIter->pSelect,pz,zSql);",
          "2319:         }else{",
          "2320:           sqlite3_free(zSql);",
          "2321:         }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cdc09867ed6522026ae7bfac1f59cd79b60fba6d07d49b99b030a501a7059ee4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df9d32441a3d2abf62ecfec60f2605dc1630b76b",
      "candidate_info": {
        "commit_hash": "df9d32441a3d2abf62ecfec60f2605dc1630b76b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/df9d32441a3d2abf62ecfec60f2605dc1630b76b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/expr.c",
          "src/parse.y",
          "src/prepare.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/vdbeaux.c",
          "src/walker.c",
          "src/window.c",
          "test/filter1.test",
          "test/filter2.tcl",
          "test/filter2.test",
          "test/window2.tcl",
          "test/window2.test"
        ],
        "message": "Add support for attaching a FILTER clause to an aggregate function.\n\nFossilOrigin-Name: ee293e5aeac0b05a8b809095610fd8b4fdaf8e68cd368de90ec0d45e3582ffe5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/prepare.c||src/prepare.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/walker.c||src/walker.c",
          "src/window.c||src/window.c",
          "test/filter1.test||test/filter1.test",
          "test/filter2.tcl||test/filter2.tcl",
          "test/filter2.test||test/filter2.test",
          "test/window2.tcl||test/window2.tcl",
          "test/window2.test||test/window2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0d7287e1bfdd5a392bf2fb17699e7cfd0b08bf61fab6cbf4b4bb347b3c4b4610",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8307:   VVA_ONLY( int balance_deeper_called = 0 );",
          "8309:   do {",
          "8311:     MemPage *pPage = pCur->pPage;",
          "8313:     if( NEVER(pPage->nFree<0) && btreeComputeFreeSpace(pPage) ) break;",
          "8315:       if( pPage->nOverflow ){",
          "",
          "[Removed Lines]",
          "8310:     int iPage = pCur->iPage;",
          "8314:     if( iPage==0 ){",
          "",
          "[Added Lines]",
          "8310:     int iPage;",
          "8314:     if( pPage->nOverflow==0 && pPage->nFree<=nMin ){",
          "8315:       break;",
          "8316:     }else if( (iPage = pCur->iPage)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8332:       }else{",
          "8333:         break;",
          "8334:       }",
          "8337:     }else{",
          "8338:       MemPage * const pParent = pCur->apPage[iPage-1];",
          "8339:       int const iIdx = pCur->aiIdx[iPage-1];",
          "",
          "[Removed Lines]",
          "8335:     }else if( pPage->nOverflow==0 && pPage->nFree<=nMin ){",
          "8336:       break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1040:     assert( p->x.pList==0 || p->pRight==0 );",
          "1041:     if( p->pLeft && p->op!=TK_SELECT_COLUMN ) sqlite3ExprDeleteNN(db, p->pLeft);",
          "1042:     if( p->pRight ){",
          "1043:       sqlite3ExprDeleteNN(db, p->pRight);",
          "1044:     }else if( ExprHasProperty(p, EP_xIsSelect) ){",
          "1045:       sqlite3SelectDelete(db, p->x.pSelect);",
          "1046:     }else{",
          "1047:       sqlite3ExprListDelete(db, p->x.pList);",
          "1052:     }",
          "1053:   }",
          "1054:   if( ExprHasProperty(p, EP_MemToken) ) sqlite3DbFree(db, p->u.zToken);",
          "",
          "[Removed Lines]",
          "1048:     }",
          "1049:     if( ExprHasProperty(p, EP_WinFunc) ){",
          "1050:       assert( p->op==TK_FUNCTION );",
          "1051:       sqlite3WindowDelete(db, p->y.pWin);",
          "",
          "[Added Lines]",
          "1043:       assert( !ExprHasProperty(p, EP_WinFunc) );",
          "1046:       assert( !ExprHasProperty(p, EP_WinFunc) );",
          "1050: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1051:       if( ExprHasProperty(p, EP_WinFunc) ){",
          "1052:         sqlite3WindowDelete(db, p->y.pWin);",
          "1053:       }",
          "1054: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1334: static int gatherSelectWindowsCallback(Walker *pWalker, Expr *pExpr){",
          "1337:     pExpr->y.pWin->pNextWin = pWalker->u.pSelect->pWin;",
          "1338:     pWalker->u.pSelect->pWin = pExpr->y.pWin;",
          "1339:   }",
          "",
          "[Removed Lines]",
          "1335:   if( pExpr->op==TK_FUNCTION && pExpr->y.pWin!=0 ){",
          "1336:     assert( ExprHasProperty(pExpr, EP_WinFunc) );",
          "",
          "[Added Lines]",
          "1338:   if( pExpr->op==TK_FUNCTION && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1339:     assert( pExpr->y.pWin );",
          "1340:     assert( IsWindowFunc(pExpr) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4839:     return 2;",
          "4840:   }",
          "4841:   if( pA->op!=TK_COLUMN && pA->op!=TK_AGG_COLUMN && pA->u.zToken ){",
          "4843:       if( sqlite3StrICmp(pA->u.zToken,pB->u.zToken)!=0 ) return 2;",
          "4844: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "4854:       if( ExprHasProperty(pA,EP_WinFunc) ){",
          "4856:       }",
          "4857: #endif",
          "4858:     }else if( pA->op==TK_NULL ){",
          "",
          "[Removed Lines]",
          "4842:     if( pA->op==TK_FUNCTION ){",
          "4853:       assert( ExprHasProperty(pA,EP_WinFunc)==ExprHasProperty(pB,EP_WinFunc) );",
          "4855:         if( sqlite3WindowCompare(pParse,pA->y.pWin,pB->y.pWin)!=0 ) return 2;",
          "",
          "[Added Lines]",
          "4846:     if( pA->op==TK_FUNCTION || pA->op==TK_AGG_FUNCTION ){",
          "4849:       assert( pA->op==pB->op );",
          "4850:       if( ExprHasProperty(pA,EP_WinFunc)!=ExprHasProperty(pB,EP_WinFunc) ){",
          "4851:         return 2;",
          "4852:       }",
          "4854:         if( sqlite3WindowCompare(pParse, pA->y.pWin, pB->y.pWin, 1)!=0 ){",
          "4855:           return 2;",
          "4856:         }",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1044: }",
          "1046: %ifndef SQLITE_OMIT_WINDOWFUNC",
          "1048:   A = sqlite3ExprFunction(pParse, Y, &X, D);",
          "1049:   sqlite3WindowAttach(pParse, A, Z);",
          "1050: }",
          "1052:   A = sqlite3ExprFunction(pParse, 0, &X, 0);",
          "1053:   sqlite3WindowAttach(pParse, A, Z);",
          "1054: }",
          "",
          "[Removed Lines]",
          "1047: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP over_clause(Z). {",
          "1051: expr(A) ::= id(X) LP STAR RP over_clause(Z). {",
          "",
          "[Added Lines]",
          "1047: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP filter_over(Z). {",
          "1051: expr(A) ::= id(X) LP STAR RP filter_over(Z). {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1657: %type part_opt {ExprList*}",
          "1658: %destructor part_opt {sqlite3ExprListDelete(pParse->db, $$);}",
          "1663: %type range_or_rows {int}",
          "",
          "[Removed Lines]",
          "1660: %type filter_opt {Expr*}",
          "1661: %destructor filter_opt {sqlite3ExprDelete(pParse->db, $$);}",
          "",
          "[Added Lines]",
          "1660: %type filter_clause {Expr*}",
          "1661: %destructor filter_clause {sqlite3ExprDelete(pParse->db, $$);}",
          "1663: %type over_clause {Window*}",
          "1664: %destructor over_clause {sqlite3WindowDelete(pParse->db, $$);}",
          "1666: %type filter_over {Window*}",
          "1667: %destructor filter_over {sqlite3WindowDelete(pParse->db, $$);}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1724: %destructor window_clause {sqlite3WindowListDelete(pParse->db, $$);}",
          "1725: window_clause(A) ::= WINDOW windowdefn_list(B). { A = B; }",
          "1730:   A = Z;",
          "1731:   assert( A!=0 );",
          "1733: }",
          "1735:   A = (Window*)sqlite3DbMallocZero(pParse->db, sizeof(Window));",
          "1736:   if( A ){",
          "1737:     A->zName = sqlite3DbStrNDup(pParse->db, Z.z, Z.n);",
          "1741:   }",
          "1742: }",
          "",
          "[Removed Lines]",
          "1727: %type over_clause {Window*}",
          "1728: %destructor over_clause {sqlite3WindowDelete(pParse->db, $$);}",
          "1729: over_clause(A) ::= filter_opt(W) OVER LP window(Z) RP. {",
          "1732:   A->pFilter = W;",
          "1734: over_clause(A) ::= filter_opt(W) OVER nm(Z). {",
          "1738:     A->pFilter = W;",
          "1739:   }else{",
          "1740:     sqlite3ExprDelete(pParse->db, W);",
          "1744: filter_opt(A) ::= .                            { A = 0; }",
          "1745: filter_opt(A) ::= FILTER LP WHERE expr(X) RP.  { A = X; }",
          "",
          "[Added Lines]",
          "1733: filter_over(A) ::= filter_clause(F) over_clause(O). {",
          "1734:   O->pFilter = F;",
          "1735:   A = O;",
          "1736: }",
          "1737: filter_over(A) ::= over_clause(O). {",
          "1738:   A = O;",
          "1739: }",
          "1740: filter_over(A) ::= filter_clause(F). {",
          "1741:   A = (Window*)sqlite3DbMallocZero(pParse->db, sizeof(Window));",
          "1742:   if( A ){",
          "1743:     A->eFrmType = TK_FILTER;",
          "1744:     A->pFilter = F;",
          "1745:   }",
          "1746: }",
          "1748: over_clause(A) ::= OVER LP window(Z) RP. {",
          "1752: over_clause(A) ::= OVER nm(Z). {",
          "1759: filter_clause(A) ::= FILTER LP WHERE expr(X) RP.  { A = X; }",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "635:   rc = sParse.rc;",
          "637: #ifndef SQLITE_OMIT_EXPLAIN",
          "639:     static const char * const azColName[] = {",
          "640:        \"addr\", \"opcode\", \"p1\", \"p2\", \"p3\", \"p4\", \"p5\", \"comment\",",
          "641:        \"id\", \"parent\", \"notused\", \"detail\"",
          "",
          "[Removed Lines]",
          "638:   if( rc==SQLITE_OK && sParse.pVdbe && sParse.explain ){",
          "",
          "[Added Lines]",
          "638:   if( sParse.explain && rc==SQLITE_OK && sParse.pVdbe ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "660:   if( db->init.busy==0 ){",
          "661:     sqlite3VdbeSetSql(sParse.pVdbe, zSql, (int)(sParse.zTail-zSql), prepFlags);",
          "662:   }",
          "665:     assert(!(*ppStmt));",
          "666:   }else{",
          "",
          "[Removed Lines]",
          "663:   if( sParse.pVdbe && (rc!=SQLITE_OK || db->mallocFailed) ){",
          "664:     sqlite3VdbeFinalize(sParse.pVdbe);",
          "",
          "[Added Lines]",
          "663:   if( rc!=SQLITE_OK || db->mallocFailed ){",
          "664:     if( sParse.pVdbe ) sqlite3VdbeFinalize(sParse.pVdbe);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751:       int savedAllowFlags = (pNC->ncFlags & (NC_AllowAgg | NC_AllowWin));",
          "753:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "754:       zId = pExpr->u.zToken;",
          "755:       nId = sqlite3Strlen30(zId);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "752: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "753:       Window *pWin = (IsWindowFunc(pExpr) ? pExpr->y.pWin : 0);",
          "754: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "830:           || (pDef->xValue==0 && pDef->xInverse==0)",
          "831:           || (pDef->xValue && pDef->xInverse && pDef->xSFunc && pDef->xFinalize)",
          "832:         );",
          "834:           sqlite3ErrorMsg(pParse,",
          "835:               \"%.*s() may not be used as a window function\", nId, zId",
          "836:           );",
          "837:           pNC->nErr++;",
          "838:         }else if(",
          "839:               (is_agg && (pNC->ncFlags & NC_AllowAgg)==0)",
          "842:         ){",
          "843:           const char *zType;",
          "845:             zType = \"window\";",
          "846:           }else{",
          "847:             zType = \"aggregate\";",
          "",
          "[Removed Lines]",
          "833:         if( pDef && pDef->xValue==0 && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "840:            || (is_agg && (pDef->funcFlags&SQLITE_FUNC_WINDOW) && !pExpr->y.pWin)",
          "841:            || (is_agg && pExpr->y.pWin && (pNC->ncFlags & NC_AllowWin)==0)",
          "844:           if( (pDef->funcFlags & SQLITE_FUNC_WINDOW) || pExpr->y.pWin ){",
          "",
          "[Added Lines]",
          "835:         if( pDef && pDef->xValue==0 && pWin ){",
          "842:            || (is_agg && (pDef->funcFlags&SQLITE_FUNC_WINDOW) && !pWin)",
          "843:            || (is_agg && pWin && (pNC->ncFlags & NC_AllowWin)==0)",
          "846:           if( (pDef->funcFlags & SQLITE_FUNC_WINDOW) || pWin ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "849:           sqlite3ErrorMsg(pParse, \"misuse of %s function %.*s()\",zType,nId,zId);",
          "850:           pNC->nErr++;",
          "851:           is_agg = 0;",
          "852:         }",
          "853: #else",
          "854:         if( (is_agg && (pNC->ncFlags & NC_AllowAgg)==0) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "854:         }else if( is_agg==0 && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "855:           assert( !IsWindowFunc(pExpr) );",
          "856:           sqlite3ErrorMsg(pParse,",
          "857:               \"filter clause may not be used with non-aggregate %.*s()\",",
          "858:               nId, zId",
          "859:           );",
          "860:           pNC->nErr++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "876: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "878: #else",
          "879:           pNC->ncFlags &= ~NC_AllowAgg;",
          "880: #endif",
          "",
          "[Removed Lines]",
          "877:           pNC->ncFlags &= ~(NC_AllowWin | (!pExpr->y.pWin ? NC_AllowAgg : 0));",
          "",
          "[Added Lines]",
          "886:           pNC->ncFlags &= ~(NC_AllowWin | (!pWin ? NC_AllowAgg : 0));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "883:       sqlite3WalkExprList(pWalker, pList);",
          "884:       if( is_agg ){",
          "885: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "887:           Select *pSel = pNC->pWinSelect;",
          "888:           if( IN_RENAME_OBJECT==0 ){",
          "890:           }",
          "894:           if( 0==pSel->pWin",
          "896:           ){",
          "897:             pExpr->y.pWin->pNextWin = pSel->pWin;",
          "898:             pSel->pWin = pExpr->y.pWin;",
          "",
          "[Removed Lines]",
          "886:         if( pExpr->y.pWin ){",
          "889:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pExpr->y.pWin, pDef);",
          "891:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pPartition);",
          "892:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pOrderBy);",
          "893:           sqlite3WalkExpr(pWalker, pExpr->y.pWin->pFilter);",
          "895:            || 0==sqlite3WindowCompare(pParse, pSel->pWin, pExpr->y.pWin)",
          "",
          "[Added Lines]",
          "895:         if( pWin ){",
          "898:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pWin, pDef);",
          "900:           sqlite3WalkExprList(pWalker, pWin->pPartition);",
          "901:           sqlite3WalkExprList(pWalker, pWin->pOrderBy);",
          "902:           sqlite3WalkExpr(pWalker, pWin->pFilter);",
          "904:            || 0==sqlite3WindowCompare(pParse, pSel->pWin, pWin, 0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "904:           NameContext *pNC2 = pNC;",
          "905:           pExpr->op = TK_AGG_FUNCTION;",
          "906:           pExpr->op2 = 0;",
          "907:           while( pNC2 && !sqlite3FunctionUsesThisSrc(pExpr, pNC2->pSrcList) ){",
          "908:             pExpr->op2++;",
          "909:             pNC2 = pNC2->pNext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "916: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "917:           if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "918:             sqlite3WalkExpr(pWalker, pExpr->y.pWin->pFilter);",
          "919:           }",
          "920: #endif",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4404:   assert( *ppMinMax==0 );",
          "4405:   assert( pFunc->op==TK_AGG_FUNCTION );",
          "4407:   zFunc = pFunc->u.zToken;",
          "4408:   if( sqlite3StrICmp(zFunc, \"min\")==0 ){",
          "4409:     eRet = WHERE_ORDERBY_MIN;",
          "",
          "[Removed Lines]",
          "4406:   if( pEList==0 || pEList->nExpr!=1 ) return eRet;",
          "",
          "[Added Lines]",
          "4406:   assert( !IsWindowFunc(pFunc) );",
          "4407:   if( pEList==0 || pEList->nExpr!=1 || ExprHasProperty(pFunc, EP_WinFunc) ){",
          "4408:     return eRet;",
          "4409:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4450:   if( pExpr->op!=TK_AGG_FUNCTION ) return 0;",
          "4451:   if( NEVER(pAggInfo->nFunc==0) ) return 0;",
          "4452:   if( (pAggInfo->aFunc[0].pFunc->funcFlags&SQLITE_FUNC_COUNT)==0 ) return 0;",
          "4455:   return pTab;",
          "4456: }",
          "",
          "[Removed Lines]",
          "4453:   if( pExpr->flags&EP_Distinct ) return 0;",
          "",
          "[Added Lines]",
          "4456:   if( ExprHasProperty(pExpr, EP_Distinct|EP_WinFunc) ) return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5330:     int regAgg;",
          "5331:     ExprList *pList = pF->pExpr->x.pList;",
          "5332:     assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );",
          "5333:     if( pList ){",
          "5334:       nArg = pList->nExpr;",
          "5335:       regAgg = sqlite3GetTempRange(pParse, nArg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5336:     assert( !IsWindowFunc(pF->pExpr) );",
          "5337:     if( ExprHasProperty(pF->pExpr, EP_WinFunc) ){",
          "5338:       Expr *pFilter = pF->pExpr->y.pWin->pFilter;",
          "5339:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "5340:       sqlite3ExprIfFalse(pParse, pFilter, addrNext, SQLITE_JUMPIFNULL);",
          "5341:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5339:       regAgg = 0;",
          "5340:     }",
          "5341:     if( pF->iDistinct>=0 ){",
          "5345:       codeDistinct(pParse, pF->iDistinct, addrNext, 1, regAgg);",
          "",
          "[Removed Lines]",
          "5342:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Added Lines]",
          "5351:       if( addrNext==0 ){",
          "5352:         addrNext = sqlite3VdbeMakeLabel(pParse);",
          "5353:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6222:       minMaxFlag = WHERE_ORDERBY_NORMAL;",
          "6223:     }",
          "6224:     for(i=0; i<sAggInfo.nFunc; i++){",
          "6226:       sNC.ncFlags |= NC_InAggFunc;",
          "6228:       sNC.ncFlags &= ~NC_InAggFunc;",
          "6229:     }",
          "6230:     sAggInfo.mxReg = pParse->nMem;",
          "",
          "[Removed Lines]",
          "6225:       assert( !ExprHasProperty(sAggInfo.aFunc[i].pExpr, EP_xIsSelect) );",
          "6227:       sqlite3ExprAnalyzeAggList(&sNC, sAggInfo.aFunc[i].pExpr->x.pList);",
          "",
          "[Added Lines]",
          "6236:       Expr *pExpr = sAggInfo.aFunc[i].pExpr;",
          "6237:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "6239:       sqlite3ExprAnalyzeAggList(&sNC, pExpr->x.pList);",
          "6240: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "6241:       assert( !IsWindowFunc(pExpr) );",
          "6242:       if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "6243:         sqlite3ExprAnalyzeAggregates(&sNC, pExpr->y.pWin->pFilter);",
          "6244:       }",
          "6245: #endif",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2586: #define IsWindowFunc(p) ( \\",
          "2587:     ExprHasProperty((p), EP_WinFunc) && p->y.pWin->eFrmType!=TK_FILTER \\",
          "2588: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3603: void sqlite3WindowListDelete(sqlite3 *db, Window *p);",
          "3604: Window *sqlite3WindowAlloc(Parse*, int, int, Expr*, int , Expr*, u8);",
          "3605: void sqlite3WindowAttach(Parse*, Expr*, Window*);",
          "3607: void sqlite3WindowCodeInit(Parse*, Window*);",
          "3608: void sqlite3WindowCodeStep(Parse*, Select*, WhereInfo*, int, int);",
          "3609: int sqlite3WindowRewrite(Parse*, Select*);",
          "",
          "[Removed Lines]",
          "3606: int sqlite3WindowCompare(Parse*, Window*, Window*);",
          "",
          "[Added Lines]",
          "3619: int sqlite3WindowCompare(Parse*, Window*, Window*, int);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4607:     nCmp = MIN( pPKey2->aMem[0].n, nStr );",
          "4608:     res = memcmp(&aKey1[szHdr], pPKey2->aMem[0].z, nCmp);",
          "4611:       res = nStr - pPKey2->aMem[0].n;",
          "4612:       if( res==0 ){",
          "4613:         if( pPKey2->nField>1 ){",
          "",
          "[Removed Lines]",
          "4610:     if( res==0 ){",
          "",
          "[Added Lines]",
          "4610:     if( res>0 ){",
          "4611:       res = pPKey2->r2;",
          "4612:     }else if( res<0 ){",
          "4613:       res = pPKey2->r1;",
          "4614:     }else{",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4621:       }else{",
          "4622:         res = pPKey2->r1;",
          "4623:       }",
          "4628:     }",
          "4629:   }",
          "",
          "[Removed Lines]",
          "4624:     }else if( res>0 ){",
          "4625:       res = pPKey2->r2;",
          "4626:     }else{",
          "4627:       res = pPKey2->r1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:       if( pExpr->pLeft && walkExpr(pWalker, pExpr->pLeft) ) return WRC_Abort;",
          "64:        assert( pExpr->x.pList==0 || pExpr->pRight==0 );",
          "65:       if( pExpr->pRight ){",
          "66:         pExpr = pExpr->pRight;",
          "67:         continue;",
          "68:       }else if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "69:         if( sqlite3WalkSelect(pWalker, pExpr->x.pSelect) ) return WRC_Abort;",
          "73: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "77: #endif",
          "78:     }",
          "79:     break;",
          "80:   }",
          "",
          "[Removed Lines]",
          "70:       }else if( pExpr->x.pList ){",
          "71:         if( sqlite3WalkExprList(pWalker, pExpr->x.pList) ) return WRC_Abort;",
          "72:       }",
          "74:       if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "75:         if( walkWindowList(pWalker, pExpr->y.pWin) ) return WRC_Abort;",
          "76:       }",
          "",
          "[Added Lines]",
          "66:         assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "70:         assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "72:       }else{",
          "73:         if( pExpr->x.pList ){",
          "74:           if( sqlite3WalkExprList(pWalker, pExpr->x.pList) ) return WRC_Abort;",
          "75:         }",
          "77:         if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "78:           if( walkWindowList(pWalker, pExpr->y.pWin) ) return WRC_Abort;",
          "79:         }",
          "81:       }",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1196: void sqlite3WindowAttach(Parse *pParse, Expr *p, Window *pWin){",
          "1197:   if( p ){",
          "1198:     assert( p->op==TK_FUNCTION );",
          "1210:     }",
          "1211:   }else{",
          "1212:     sqlite3WindowDelete(pParse->db, pWin);",
          "",
          "[Removed Lines]",
          "1202:     if( ALWAYS(pWin) ){",
          "1203:       p->y.pWin = pWin;",
          "1204:       ExprSetProperty(p, EP_WinFunc);",
          "1205:       pWin->pOwner = p;",
          "1206:       if( p->flags & EP_Distinct ){",
          "1207:         sqlite3ErrorMsg(pParse,",
          "1208:            \"DISTINCT is not supported for window functions\");",
          "1209:       }",
          "",
          "[Added Lines]",
          "1199:     assert( pWin );",
          "1200:     p->y.pWin = pWin;",
          "1201:     ExprSetProperty(p, EP_WinFunc);",
          "1202:     pWin->pOwner = p;",
          "1203:     if( (p->flags & EP_Distinct) && pWin->eFrmType!=TK_FILTER ){",
          "1204:       sqlite3ErrorMsg(pParse,",
          "1205:           \"DISTINCT is not supported for window functions\"",
          "1206:       );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1221:   if( p1->eFrmType!=p2->eFrmType ) return 1;",
          "1222:   if( p1->eStart!=p2->eStart ) return 1;",
          "1223:   if( p1->eEnd!=p2->eEnd ) return 1;",
          "",
          "[Removed Lines]",
          "1220: int sqlite3WindowCompare(Parse *pParse, Window *p1, Window *p2){",
          "",
          "[Added Lines]",
          "1217: int sqlite3WindowCompare(Parse *pParse, Window *p1, Window *p2, int bFilter){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1226:   if( sqlite3ExprCompare(pParse, p1->pEnd, p2->pEnd, -1) ) return 1;",
          "1227:   if( sqlite3ExprListCompare(p1->pPartition, p2->pPartition, -1) ) return 1;",
          "1228:   if( sqlite3ExprListCompare(p1->pOrderBy, p2->pOrderBy, -1) ) return 1;",
          "1229:   return 0;",
          "1230: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1226:   if( bFilter ){",
          "1227:     if( sqlite3ExprCompare(pParse, p1->pFilter, p2->pFilter, -1) ) return 1;",
          "1228:   }",
          "",
          "---------------"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 May 8",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix filter1",
          "18: ifcapable !windowfunc {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE t1(a);",
          "25:   CREATE INDEX i1 ON t1(a);",
          "26:   INSERT INTO t1 VALUES(1), (2), (3), (4), (5), (6), (7), (8), (9);",
          "27: }",
          "29: do_execsql_test 1.1 { SELECT sum(a) FROM t1; } 45",
          "30: do_execsql_test 1.2 { SELECT sum(a) FILTER( WHERE a<5 ) FROM t1; } 10",
          "32: do_execsql_test 1.3 {",
          "33:   SELECT sum(a) FILTER( WHERE a>9 ),",
          "34:          sum(a) FILTER( WHERE a>8 ),",
          "35:          sum(a) FILTER( WHERE a>7 ),",
          "36:          sum(a) FILTER( WHERE a>6 ),",
          "37:          sum(a) FILTER( WHERE a>5 ),",
          "38:          sum(a) FILTER( WHERE a>4 ),",
          "39:          sum(a) FILTER( WHERE a>3 ),",
          "40:          sum(a) FILTER( WHERE a>2 ),",
          "41:          sum(a) FILTER( WHERE a>1 ),",
          "42:          sum(a) FILTER( WHERE a>0 )",
          "43:   FROM t1;",
          "44: } {{} 9 17 24 30 35 39 42 44 45}",
          "46: do_execsql_test 1.4 {",
          "47:   SELECT max(a) FILTER (WHERE (a % 2)==0) FROM t1",
          "48: } {8}",
          "50: do_execsql_test 1.5 {",
          "51:   SELECT min(a) FILTER (WHERE a>4) FROM t1",
          "52: } {5}",
          "54: do_execsql_test 1.6 {",
          "55:   SELECT count(*) FILTER (WHERE a!=5) FROM t1",
          "56: } {8}",
          "58: do_execsql_test 1.7 {",
          "59:   SELECT min(a) FILTER (WHERE a>3) FROM t1 GROUP BY (a%2) ORDER BY 1;",
          "60: } {4 5}",
          "62: do_execsql_test 1.8 {",
          "63:   CREATE VIEW vv AS",
          "64:   SELECT sum(a) FILTER( WHERE a>9 ),",
          "65:          sum(a) FILTER( WHERE a>8 ),",
          "66:          sum(a) FILTER( WHERE a>7 ),",
          "67:          sum(a) FILTER( WHERE a>6 ),",
          "68:          sum(a) FILTER( WHERE a>5 ),",
          "69:          sum(a) FILTER( WHERE a>4 ),",
          "70:          sum(a) FILTER( WHERE a>3 ),",
          "71:          sum(a) FILTER( WHERE a>2 ),",
          "72:          sum(a) FILTER( WHERE a>1 ),",
          "73:          sum(a) FILTER( WHERE a>0 )",
          "74:   FROM t1;",
          "75:   SELECT * FROM vv;",
          "76: } {{} 9 17 24 30 35 39 42 44 45}",
          "79: #-------------------------------------------------------------------------",
          "80: # Test some errors:",
          "81: #",
          "82: #   .1 FILTER on a non-aggregate function,",
          "83: #   .2 Window function in FILTER clause,",
          "84: #   .3 Aggregate function in FILTER clause,",
          "85: #",
          "86: reset_db",
          "87: do_execsql_test 2.0 {",
          "88:   CREATE TABLE t1(a);",
          "89:   INSERT INTO t1 VALUES(1), (2), (3), (4), (5), (6), (7), (8), (9);",
          "90: }",
          "92: do_catchsql_test 2.1 {",
          "93:   SELECT upper(a) FILTER (WHERE a=1) FROM t1",
          "94: } {1 {filter clause may not be used with non-aggregate upper()}}",
          "96: do_catchsql_test 2.2 {",
          "97:   SELECT sum(a) FILTER (WHERE 1 - max(a) OVER () > 0) FROM t1",
          "98: } {1 {misuse of window function max()}}",
          "100: do_catchsql_test 2.3 {",
          "101:   SELECT sum(a) FILTER (WHERE 1 - count(a)) FROM t1",
          "102: } {1 {misuse of aggregate function count()}}",
          "104: finish_test",
          "",
          "---------------"
        ],
        "test/filter2.tcl||test/filter2.tcl": [
          "File: test/filter2.tcl -> test/filter2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 May 19",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: source [file join [file dirname $argv0] pg_common.tcl]",
          "15: #=========================================================================",
          "18: start_test filter2 \"2019 July 2\"",
          "20: ifcapable !windowfunc",
          "22: execsql_test 1.0 {",
          "23:   DROP TABLE IF EXISTS t1;",
          "24:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b INTEGER);",
          "25:   INSERT INTO t1 VALUES",
          "26:    (1, 7), (2, 3), (3, 5), (4, 30), (5, 26), (6, 23), (7, 27),",
          "27:    (8, 3), (9, 17), (10, 26), (11, 33), (12, 25), (13, NULL), (14, 47),",
          "28:    (15, 36), (16, 13), (17, 45), (18, 31), (19, 11), (20, 36), (21, 37),",
          "29:    (22, 21), (23, 22), (24, 14), (25, 16), (26, 3), (27, 7), (28, 29),",
          "30:    (29, 50), (30, 38), (31, 3), (32, 36), (33, 12), (34, 4), (35, 46),",
          "31:    (36, 3), (37, 48), (38, 23), (39, NULL), (40, 24), (41, 5), (42, 46),",
          "32:    (43, 11), (44, NULL), (45, 18), (46, 25), (47, 15), (48, 18), (49, 23);",
          "33: }",
          "35: execsql_test 1.1 { SELECT sum(b) FROM t1 }",
          "37: execsql_test 1.2 { SELECT sum(b) FILTER (WHERE a<10) FROM t1 }",
          "39: execsql_test 1.3 { SELECT count(DISTINCT b) FROM t1 }",
          "41: execsql_test 1.4 { SELECT count(DISTINCT b) FILTER (WHERE a!=19) FROM t1 }",
          "43: execsql_test 1.5 {",
          "44:   SELECT min(b) FILTER (WHERE a>19),",
          "45:          min(b) FILTER (WHERE a>0),",
          "46:          max(a+b) FILTER (WHERE a>19),",
          "47:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "48:   FROM t1;",
          "49: }",
          "51: execsql_test 1.6 {",
          "52:   SELECT min(b),",
          "53:          min(b),",
          "54:          max(a+b),",
          "55:          max(b+a)",
          "56:   FROM t1",
          "57:   GROUP BY (a%10)",
          "58:   ORDER BY 1, 2, 3, 4;",
          "59: }",
          "61: execsql_test 1.7 {",
          "62:   SELECT min(b) FILTER (WHERE a>19),",
          "63:          min(b) FILTER (WHERE a>0),",
          "64:          max(a+b) FILTER (WHERE a>19),",
          "65:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "66:   FROM t1",
          "67:   GROUP BY (a%10)",
          "68:   ORDER BY 1, 2, 3, 4;",
          "69: }",
          "71: execsql_test 1.8 {",
          "72:   SELECT sum(a+b) FILTER (WHERE a=NULL) FROM t1",
          "73: }",
          "75: execsql_test 1.9 {",
          "76:   SELECT (a%5) FROM t1 GROUP BY (a%5)",
          "77:   HAVING sum(b) FILTER (WHERE b<20) > 34",
          "78:   ORDER BY 1",
          "79: }",
          "81: execsql_test 1.10 {",
          "82:   SELECT (a%5), sum(b) FILTER (WHERE b<20) AS bbb",
          "83:   FROM t1",
          "84:   GROUP BY (a%5) HAVING sum(b) FILTER (WHERE b<20) >34",
          "85:   ORDER BY 1",
          "86: }",
          "88: execsql_test 1.11 {",
          "89:   SELECT (a%5), sum(b) FILTER (WHERE b<20) AS bbb",
          "90:   FROM t1",
          "91:   GROUP BY (a%5) HAVING sum(b) FILTER (WHERE b<20) >34",
          "92:   ORDER BY 2",
          "93: }",
          "95: execsql_test 1.12 {",
          "96:   SELECT (a%5),",
          "97:     sum(b) FILTER (WHERE b<20) AS bbb,",
          "98:     count(distinct b) FILTER (WHERE b<20 OR a=13) AS ccc",
          "99:   FROM t1 GROUP BY (a%5)",
          "100:   ORDER BY 2",
          "101: }",
          "103: execsql_test 1.13 {",
          "104:   SELECT",
          "105:     string_agg(CAST(b AS TEXT), '_') FILTER (WHERE b%2!=0),",
          "106:     string_agg(CAST(b AS TEXT), '_') FILTER (WHERE b%2!=1),",
          "107:     count(*) FILTER (WHERE b%2!=0),",
          "108:     count(*) FILTER (WHERE b%2!=1)",
          "109:   FROM t1;",
          "110: }",
          "112: execsql_float_test 1.14 {",
          "113:   SELECT",
          "114:     avg(b) FILTER (WHERE b>a),",
          "115:     avg(b) FILTER (WHERE b<a)",
          "116:   FROM t1 GROUP BY (a%2) ORDER BY 1,2;",
          "117: }",
          "119: execsql_test 1.15 {",
          "120:   SELECT",
          "121:     a/5,",
          "122:     sum(b) FILTER (WHERE a%5=0),",
          "123:     sum(b) FILTER (WHERE a%5=1),",
          "124:     sum(b) FILTER (WHERE a%5=2),",
          "125:     sum(b) FILTER (WHERE a%5=3),",
          "126:     sum(b) FILTER (WHERE a%5=4)",
          "127:   FROM t1 GROUP BY (a/5) ORDER BY 1;",
          "128: }",
          "130: finish_test",
          "",
          "---------------"
        ],
        "test/filter2.test||test/filter2.test": [
          "File: test/filter2.test -> test/filter2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 July 2",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: ####################################################",
          "15: # DO NOT EDIT! THIS FILE IS AUTOMATICALLY GENERATED!",
          "16: ####################################################",
          "18: set testdir [file dirname $argv0]",
          "19: source $testdir/tester.tcl",
          "20: set testprefix filter2",
          "22: ifcapable !windowfunc { finish_test ; return }",
          "23: do_execsql_test 1.0 {",
          "24:   DROP TABLE IF EXISTS t1;",
          "25:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b INTEGER);",
          "26:   INSERT INTO t1 VALUES",
          "27:    (1, 7), (2, 3), (3, 5), (4, 30), (5, 26), (6, 23), (7, 27),",
          "28:    (8, 3), (9, 17), (10, 26), (11, 33), (12, 25), (13, NULL), (14, 47),",
          "29:    (15, 36), (16, 13), (17, 45), (18, 31), (19, 11), (20, 36), (21, 37),",
          "30:    (22, 21), (23, 22), (24, 14), (25, 16), (26, 3), (27, 7), (28, 29),",
          "31:    (29, 50), (30, 38), (31, 3), (32, 36), (33, 12), (34, 4), (35, 46),",
          "32:    (36, 3), (37, 48), (38, 23), (39, NULL), (40, 24), (41, 5), (42, 46),",
          "33:    (43, 11), (44, NULL), (45, 18), (46, 25), (47, 15), (48, 18), (49, 23);",
          "34: } {}",
          "36: do_execsql_test 1.1 {",
          "37:   SELECT sum(b) FROM t1",
          "38: } {1041}",
          "40: do_execsql_test 1.2 {",
          "41:   SELECT sum(b) FILTER (WHERE a<10) FROM t1",
          "42: } {141}",
          "44: do_execsql_test 1.3 {",
          "45:   SELECT count(DISTINCT b) FROM t1",
          "46: } {31}",
          "48: do_execsql_test 1.4 {",
          "49:   SELECT count(DISTINCT b) FILTER (WHERE a!=19) FROM t1",
          "50: } {31}",
          "52: do_execsql_test 1.5 {",
          "53:   SELECT min(b) FILTER (WHERE a>19),",
          "54:          min(b) FILTER (WHERE a>0),",
          "55:          max(a+b) FILTER (WHERE a>19),",
          "56:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "57:   FROM t1;",
          "58: } {3 3 88 85}",
          "60: do_execsql_test 1.6 {",
          "61:   SELECT min(b),",
          "62:          min(b),",
          "63:          max(a+b),",
          "64:          max(b+a)",
          "65:   FROM t1",
          "66:   GROUP BY (a%10)",
          "67:   ORDER BY 1, 2, 3, 4;",
          "68: } {3 3 58 58   3 3 66 66   3 3 71 71   3 3 88 88   4 4 61 61   5 5 54 54",
          "69:   7 7 85 85   11 11 79 79   16 16 81 81   24 24 68 68}",
          "71: do_execsql_test 1.7 {",
          "72:   SELECT min(b) FILTER (WHERE a>19),",
          "73:          min(b) FILTER (WHERE a>0),",
          "74:          max(a+b) FILTER (WHERE a>19),",
          "75:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "76:   FROM t1",
          "77:   GROUP BY (a%10)",
          "78:   ORDER BY 1, 2, 3, 4;",
          "79: } {3 3 58 58   3 3 71 39   4 4 38 61   7 7 85 85   11 5 54 45   16 16 81 81",
          "80:   18 3 66 61   21 3 88 68   23 11 79 79   24 24 68 68}",
          "82: do_execsql_test 1.8 {",
          "83:   SELECT sum(a+b) FILTER (WHERE a=NULL) FROM t1",
          "84: } {{}}",
          "86: do_execsql_test 1.9 {",
          "87:   SELECT (a%5) FROM t1 GROUP BY (a%5)",
          "88:   HAVING sum(b) FILTER (WHERE b<20) > 34",
          "89:   ORDER BY 1",
          "90: } {3   4}",
          "92: do_execsql_test 1.10 {",
          "93:   SELECT (a%5), sum(b) FILTER (WHERE b<20) AS bbb",
          "94:   FROM t1",
          "95:   GROUP BY (a%5) HAVING sum(b) FILTER (WHERE b<20) >34",
          "96:   ORDER BY 1",
          "97: } {3 49   4 46}",
          "99: do_execsql_test 1.11 {",
          "100:   SELECT (a%5), sum(b) FILTER (WHERE b<20) AS bbb",
          "101:   FROM t1",
          "102:   GROUP BY (a%5) HAVING sum(b) FILTER (WHERE b<20) >34",
          "103:   ORDER BY 2",
          "104: } {4 46   3 49}",
          "106: do_execsql_test 1.12 {",
          "107:   SELECT (a%5),",
          "108:     sum(b) FILTER (WHERE b<20) AS bbb,",
          "109:     count(distinct b) FILTER (WHERE b<20 OR a=13) AS ccc",
          "110:   FROM t1 GROUP BY (a%5)",
          "111:   ORDER BY 2",
          "112: } {2 25 3   0 34 2   1 34 4   4 46 4   3 49 5}",
          "114: do_execsql_test 1.13 {",
          "115:   SELECT",
          "116:     group_concat(CAST(b AS TEXT), '_') FILTER (WHERE b%2!=0),",
          "117:     group_concat(CAST(b AS TEXT), '_') FILTER (WHERE b%2!=1),",
          "118:     count(*) FILTER (WHERE b%2!=0),",
          "119:     count(*) FILTER (WHERE b%2!=1)",
          "120:   FROM t1;",
          "121: } {7_3_5_23_27_3_17_33_25_47_13_45_31_11_37_21_3_7_29_3_3_23_5_11_25_15_23 30_26_26_36_36_22_14_16_50_38_36_12_4_46_48_24_46_18_18 27 19}",
          "124: do_test 1.14 {",
          "125:   set myres {}",
          "126:   foreach r [db eval {SELECT",
          "127:     avg(b) FILTER (WHERE b>a),",
          "128:     avg(b) FILTER (WHERE b<a)",
          "129:   FROM t1 GROUP BY (a%2) ORDER BY 1,2;}] {",
          "130:     lappend myres [format %.4f [set r]]",
          "131:   }",
          "132:   set res2 {30.8333 13.7273 31.4167 13.0000}",
          "133:   set i 0",
          "134:   foreach r [set myres] r2 [set res2] {",
          "135:     if {[set r]<([set r2]-0.0001) || [set r]>([set r2]+0.0001)} {",
          "136:       error \"list element [set i] does not match: got=[set r] expected=[set r2]\"",
          "137:     }",
          "138:     incr i",
          "139:   }",
          "140:   set {} {}",
          "141: } {}",
          "143: do_execsql_test 1.15 {",
          "144:   SELECT",
          "145:     a/5,",
          "146:     sum(b) FILTER (WHERE a%5=0),",
          "147:     sum(b) FILTER (WHERE a%5=1),",
          "148:     sum(b) FILTER (WHERE a%5=2),",
          "149:     sum(b) FILTER (WHERE a%5=3),",
          "150:     sum(b) FILTER (WHERE a%5=4)",
          "151:   FROM t1 GROUP BY (a/5) ORDER BY 1;",
          "152: } {0 {} 7 3 5 30   1 26 23 27 3 17   2 26 33 25 {} 47   3 36 13 45 31 11",
          "153:   4 36 37 21 22 14   5 16 3 7 29 50   6 38 3 36 12 4   7 46 3 48 23 {}",
          "154:   8 24 5 46 11 {}   9 18 25 15 18 23}",
          "156: finish_test",
          "",
          "---------------"
        ],
        "test/window2.tcl||test/window2.tcl": [
          "File: test/window2.tcl -> test/window2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "424:   WINDOW win AS (ORDER BY 1);",
          "425: }",
          "429: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427: execsql_test 4.10 {",
          "428:   SELECT count(*) OVER (ORDER BY b) FROM t1",
          "429: }",
          "431: execsql_test 4.11 {",
          "432:   SELECT count(distinct a) FILTER (WHERE b='odd') FROM t1",
          "433: }",
          "",
          "---------------"
        ],
        "test/window2.test||test/window2.test": [
          "File: test/window2.test -> test/window2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "893:   set {} {}",
          "894: } {}",
          "896: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "896: do_execsql_test 4.10 {",
          "897:   SELECT count(*) OVER (ORDER BY b) FROM t1",
          "898: } {3   3   3   6   6   6}",
          "900: do_execsql_test 4.11 {",
          "901:   SELECT count(distinct a) FILTER (WHERE b='odd') FROM t1",
          "902: } {3}",
          "",
          "---------------"
        ]
      }
    }
  ]
}