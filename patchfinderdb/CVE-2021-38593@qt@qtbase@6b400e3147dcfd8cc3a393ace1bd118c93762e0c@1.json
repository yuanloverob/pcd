{
  "cve_id": "CVE-2021-38593",
  "cve_desc": "Qt 5.x before 5.15.6 and 6.x through 6.1.2 has an out-of-bounds write in QOutlineMapper::convertPath (called from QRasterPaintEngine::fill and QPaintEngineEx::stroke).",
  "repo": "qt/qtbase",
  "patch_hash": "6b400e3147dcfd8cc3a393ace1bd118c93762e0c",
  "patch_info": {
    "commit_hash": "6b400e3147dcfd8cc3a393ace1bd118c93762e0c",
    "repo": "qt/qtbase",
    "commit_url": "https://github.com/qt/qtbase/commit/6b400e3147dcfd8cc3a393ace1bd118c93762e0c",
    "files": [
      "src/gui/painting/qpaintengineex.cpp"
    ],
    "message": "Improve fix for avoiding huge number of tiny dashes\n\nSome pathological cases were not caught by the previous fix.\n\nFixes: QTBUG-95239\nPick-to: 6.2 6.1 5.15\nChange-Id: I0337ee3923ff93ccb36c4d7b810a9c0667354cc5\nReviewed-by: Robert L\u00f6hning <robert.loehning@qt.io>",
    "before_after_code_files": [
      "src/gui/painting/qpaintengineex.cpp||src/gui/painting/qpaintengineex.cpp"
    ]
  },
  "patch_diff": {
    "src/gui/painting/qpaintengineex.cpp||src/gui/painting/qpaintengineex.cpp": [
      "File: src/gui/painting/qpaintengineex.cpp -> src/gui/painting/qpaintengineex.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "426:             patternLength *= pen.widthF();",
      "427:         if (qFuzzyIsNull(patternLength)) {",
      "428:             pen.setStyle(Qt::NoPen);",
      "431:             pen.setStyle(Qt::SolidLine);",
      "432:             QColor color(pen.color());",
      "",
      "[Removed Lines]",
      "429:         } else if (extent / patternLength > 10000) {",
      "",
      "[Added Lines]",
      "429:         } else if (qFuzzyIsNull(extent) || extent / patternLength > 10000) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "84aba80944a2e1c3058d7a1372e0e66676411884",
      "candidate_info": {
        "commit_hash": "84aba80944a2e1c3058d7a1372e0e66676411884",
        "repo": "qt/qtbase",
        "commit_url": "https://github.com/qt/qtbase/commit/84aba80944a2e1c3058d7a1372e0e66676411884",
        "files": [
          "src/gui/painting/qpaintengineex.cpp",
          "tests/auto/gui/painting/qpainter/tst_qpainter.cpp"
        ],
        "message": "Refix for avoiding huge number of tiny dashes\n\nPrevious fix hit too widely so some valid horizontal and vertical\nlines were affected; the root problem being that such lines have an\nempty control point rect (width or height is 0). Fix by caculating in\nthe pen width.\n\nPick-to: 6.2 6.1 5.15\nChange-Id: I7a436e873f6d485028f6759d0e2c6456f07eebdc\nReviewed-by: Allan Sandfeld Jensen <allan.jensen@qt.io>",
        "before_after_code_files": [
          "src/gui/painting/qpaintengineex.cpp||src/gui/painting/qpaintengineex.cpp",
          "tests/auto/gui/painting/qpainter/tst_qpainter.cpp||tests/auto/gui/painting/qpainter/tst_qpainter.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gui/painting/qpaintengineex.cpp||src/gui/painting/qpaintengineex.cpp"
          ],
          "candidate": [
            "src/gui/painting/qpaintengineex.cpp||src/gui/painting/qpaintengineex.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/gui/painting/qpaintengineex.cpp||src/gui/painting/qpaintengineex.cpp": [
          "File: src/gui/painting/qpaintengineex.cpp -> src/gui/painting/qpaintengineex.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "415:             clipRect = xf.inverted().mapRect(QRectF(d->exDeviceRect));",
          "416:         }",
          "419:         qreal extent = qMax(extentRect.width(), extentRect.height());",
          "420:         qreal patternLength = 0;",
          "421:         const QList<qreal> pattern = pen.dashPattern();",
          "422:         const int patternSize = qMin(pattern.size(), 32);",
          "423:         for (int i = 0; i < patternSize; i++)",
          "424:             patternLength += qMax(pattern.at(i), qreal(0));",
          "427:         if (qFuzzyIsNull(patternLength)) {",
          "428:             pen.setStyle(Qt::NoPen);",
          "431:             pen.setStyle(Qt::SolidLine);",
          "432:             QColor color(pen.color());",
          "",
          "[Removed Lines]",
          "418:         QRectF extentRect = cpRect & clipRect;",
          "425:         if (pen.widthF())",
          "426:             patternLength *= pen.widthF();",
          "429:         } else if (qFuzzyIsNull(extent) || extent / patternLength > 10000) {",
          "",
          "[Added Lines]",
          "418:         qreal pw = pen.widthF() ? pen.widthF() : 1;",
          "419:         QRectF extentRect = cpRect.adjusted(-pw, -pw, pw, pw) & clipRect;",
          "426:         patternLength *= pw;",
          "429:         } else if (extent / patternLength > 10000) {",
          "",
          "---------------"
        ],
        "tests/auto/gui/painting/qpainter/tst_qpainter.cpp||tests/auto/gui/painting/qpainter/tst_qpainter.cpp": [
          "File: tests/auto/gui/painting/qpainter/tst_qpainter.cpp -> tests/auto/gui/painting/qpainter/tst_qpainter.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "300:     void fillPolygon();",
          "302:     void drawImageAtPointF();",
          "304: private:",
          "305:     void fillData();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:     void scaledDashes();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5362:     paint.end();",
          "5363: }",
          "5365: QTEST_MAIN(tst_QPainter)",
          "5367: #include \"tst_qpainter.moc\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5366: void tst_QPainter::scaledDashes()",
          "5367: {",
          "5369:     QRgb fore = qRgb(0, 0, 0xff);",
          "5370:     QRgb back = qRgb(0xff, 0xff, 0);",
          "5371:     QImage image(5, 32, QImage::Format_RGB32);",
          "5372:     image.fill(back);",
          "5373:     QPainter p(&image);",
          "5374:     QPen pen(QColor(fore), 3, Qt::DotLine);",
          "5375:     p.setPen(pen);",
          "5376:     p.scale(1, 2);",
          "5377:     p.drawLine(2, 0, 2, 16);",
          "5378:     p.end();",
          "5380:     bool foreFound = false;",
          "5381:     bool backFound = false;",
          "5382:     int i = 0;",
          "5383:     while (i < 32 && (!foreFound || !backFound)) {",
          "5384:         QRgb pix = image.pixel(3, i);",
          "5385:         if (pix == fore)",
          "5386:             foreFound = true;",
          "5387:         else if (pix == back)",
          "5388:             backFound = true;",
          "5389:         i++;",
          "5390:     }",
          "5392:     QVERIFY(foreFound);",
          "5393:     QVERIFY(backFound);",
          "5394: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f4d791b330d02777fcaf02938732892eb3167e9b",
      "candidate_info": {
        "commit_hash": "f4d791b330d02777fcaf02938732892eb3167e9b",
        "repo": "qt/qtbase",
        "commit_url": "https://github.com/qt/qtbase/commit/f4d791b330d02777fcaf02938732892eb3167e9b",
        "files": [
          "src/gui/painting/qpaintengineex.cpp",
          "tests/auto/other/lancelot/scripts/tinydashes.qps"
        ],
        "message": "Avoid processing-intensive painting of high number of tiny dashes\n\nWhen stroking a dashed path, an unnecessary amount of processing would\nbe spent if there is a huge number of dashes visible, e.g. because of\nscaling. Since the dashes are too small to be indivdually visible\nanyway, just replace with a semi-transparent solid line for such\ncases.\n\nPick-to: 6.1 6.0 5.15\nChange-Id: I9e9f7861257ad5bce46a0cf113d1a9d7824911e6\nReviewed-by: Allan Sandfeld Jensen <allan.jensen@qt.io>",
        "before_after_code_files": [
          "src/gui/painting/qpaintengineex.cpp||src/gui/painting/qpaintengineex.cpp",
          "tests/auto/other/lancelot/scripts/tinydashes.qps||tests/auto/other/lancelot/scripts/tinydashes.qps"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gui/painting/qpaintengineex.cpp||src/gui/painting/qpaintengineex.cpp"
          ],
          "candidate": [
            "src/gui/painting/qpaintengineex.cpp||src/gui/painting/qpaintengineex.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/gui/painting/qpaintengineex.cpp||src/gui/painting/qpaintengineex.cpp": [
          "File: src/gui/painting/qpaintengineex.cpp -> src/gui/painting/qpaintengineex.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "386: Q_GUI_EXPORT extern bool qt_scaleForTransform(const QTransform &transform, qreal *scale); // qtransform.cpp",
          "389: {",
          "390: #ifdef QT_DEBUG_DRAW",
          "391:     qDebug() << \"QPaintEngineEx::stroke()\" << pen;",
          "",
          "[Removed Lines]",
          "388: void QPaintEngineEx::stroke(const QVectorPath &path, const QPen &pen)",
          "",
          "[Added Lines]",
          "388: void QPaintEngineEx::stroke(const QVectorPath &path, const QPen &inPen)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "403:         d->stroker.setCubicToHook(qpaintengineex_cubicTo);",
          "404:     }",
          "406:     if (!qpen_fast_equals(pen, d->strokerPen)) {",
          "407:         d->strokerPen = pen;",
          "408:         d->stroker.setJoinStyle(pen.joinStyle());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "406:     QRectF clipRect;",
          "407:     QPen pen = inPen;",
          "408:     if (pen.style() > Qt::SolidLine) {",
          "409:         QRectF cpRect = path.controlPointRect();",
          "410:         const QTransform &xf = state()->matrix;",
          "411:         if (pen.isCosmetic()) {",
          "412:             clipRect = d->exDeviceRect;",
          "413:             cpRect.translate(xf.dx(), xf.dy());",
          "414:         } else {",
          "415:             clipRect = xf.inverted().mapRect(QRectF(d->exDeviceRect));",
          "416:         }",
          "418:         QRectF extentRect = cpRect & clipRect;",
          "419:         qreal extent = qMax(extentRect.width(), extentRect.height());",
          "420:         qreal patternLength = 0;",
          "421:         const QList<qreal> pattern = pen.dashPattern();",
          "422:         const int patternSize = qMin(pattern.size(), 32);",
          "423:         for (int i = 0; i < patternSize; i++)",
          "424:             patternLength += qMax(pattern.at(i), qreal(0));",
          "425:         if (pen.widthF())",
          "426:             patternLength *= pen.widthF();",
          "427:         if (qFuzzyIsNull(patternLength)) {",
          "428:             pen.setStyle(Qt::NoPen);",
          "429:         } else if (extent / patternLength > 10000) {",
          "431:             pen.setStyle(Qt::SolidLine);",
          "432:             QColor color(pen.color());",
          "433:             color.setAlpha(color.alpha() / 2);",
          "434:             pen.setColor(color);",
          "435:         }",
          "436:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "430:         return;",
          "431:     }",
          "442:     if (d->activeStroker == &d->stroker)",
          "443:         d->stroker.setForceOpen(path.hasExplicitOpen());",
          "",
          "[Removed Lines]",
          "433:     if (pen.style() > Qt::SolidLine) {",
          "434:         if (pen.isCosmetic()) {",
          "435:             d->activeStroker->setClipRect(d->exDeviceRect);",
          "436:         } else {",
          "437:             QRectF clipRect = state()->matrix.inverted().mapRect(QRectF(d->exDeviceRect));",
          "438:             d->activeStroker->setClipRect(clipRect);",
          "439:         }",
          "440:     }",
          "",
          "[Added Lines]",
          "465:     if (!clipRect.isNull())",
          "466:         d->activeStroker->setClipRect(clipRect);",
          "",
          "---------------"
        ],
        "tests/auto/other/lancelot/scripts/tinydashes.qps||tests/auto/other/lancelot/scripts/tinydashes.qps": [
          "File: tests/auto/other/lancelot/scripts/tinydashes.qps -> tests/auto/other/lancelot/scripts/tinydashes.qps",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Version: 1",
          "2: # CheckVsReference: 5%",
          "4: path_addEllipse mypath 20.0 20.0 200.0 200.0",
          "6: save",
          "7: setPen blue 20 SolidLine FlatCap",
          "8: pen_setCosmetic true",
          "9: pen_setDashPattern [ 0.0004 0.0004 ]",
          "10: setBrush yellow",
          "12: drawPath mypath",
          "13: translate 300 0",
          "14: setRenderHint Antialiasing true",
          "15: drawPath mypath",
          "16: restore",
          "18: path_addEllipse bigpath 200000.0 200000.0 2000000.0 2000000.0",
          "20: setPen blue 20 DotLine FlatCap",
          "21: setBrush yellow",
          "23: save",
          "24: translate 0 300",
          "25: scale 0.0001 0.00011",
          "26: drawPath bigpath",
          "27: restore",
          "29: save",
          "30: translate 300 300",
          "31: setRenderHint Antialiasing true",
          "32: scale 0.0001 0.00011",
          "33: drawPath bigpath",
          "34: restore",
          "",
          "---------------"
        ]
      }
    }
  ]
}