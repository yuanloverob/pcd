{
  "cve_id": "CVE-2019-15923",
  "cve_desc": "An issue was discovered in the Linux kernel before 5.0.9. There is a NULL pointer dereference for a cd data structure if alloc_disk fails in drivers/block/paride/pf.c.",
  "repo": "torvalds/linux",
  "patch_hash": "f0d1762554014ce0ae347b9f0d088f2c157c8c72",
  "patch_info": {
    "commit_hash": "f0d1762554014ce0ae347b9f0d088f2c157c8c72",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/f0d1762554014ce0ae347b9f0d088f2c157c8c72",
    "files": [
      "drivers/block/paride/pcd.c"
    ],
    "message": "paride/pcd: Fix potential NULL pointer dereference and mem leak\n\nSyzkaller report this:\n\npcd: pcd version 1.07, major 46, nice 0\npcd0: Autoprobe failed\npcd: No CD-ROM drive found\nkasan: CONFIG_KASAN_INLINE enabled\nkasan: GPF could be caused by NULL-ptr deref or user memory access\ngeneral protection fault: 0000 [#1] SMP KASAN PTI\nCPU: 1 PID: 4525 Comm: syz-executor.0 Not tainted 5.1.0-rc3+ #8\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014\nRIP: 0010:pcd_init+0x95c/0x1000 [pcd]\nCode: c4 ab f7 48 89 d8 48 c1 e8 03 80 3c 28 00 74 08 48 89 df e8 56 a3 da f7 4c 8b 23 49 8d bc 24 80 05 00 00 48 89 f8 48 c1 e8 03 <80> 3c 28 00 74 05 e8 39 a3 da f7 49 8b bc 24 80 05 00 00 e8 cc b2\nRSP: 0018:ffff8881e84df880 EFLAGS: 00010202\nRAX: 00000000000000b0 RBX: ffffffffc155a088 RCX: ffffffffc1508935\nRDX: 0000000000040000 RSI: ffffc900014f0000 RDI: 0000000000000580\nRBP: dffffc0000000000 R08: ffffed103ee658b8 R09: ffffed103ee658b8\nR10: 0000000000000001 R11: ffffed103ee658b7 R12: 0000000000000000\nR13: ffffffffc155a778 R14: ffffffffc155a4a8 R15: 0000000000000003\nFS:  00007fe71bee3700(0000) GS:ffff8881f7300000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 000055a7334441a8 CR3: 00000001e9674003 CR4: 00000000007606e0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nPKRU: 55555554\nCall Trace:\n ? 0xffffffffc1508000\n ? 0xffffffffc1508000\n do_one_initcall+0xbc/0x47d init/main.c:901\n do_init_module+0x1b5/0x547 kernel/module.c:3456\n load_module+0x6405/0x8c10 kernel/module.c:3804\n __do_sys_finit_module+0x162/0x190 kernel/module.c:3898\n do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\nRIP: 0033:0x462e99\nCode: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48\nRSP: 002b:00007fe71bee2c58 EFLAGS: 00000246 ORIG_RAX: 0000000000000139\nRAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99\nRDX: 0000000000000000 RSI: 0000000020000180 RDI: 0000000000000003\nRBP: 00007fe71bee2c70 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000000 R11: 0000000000000246 R12: 00007fe71bee36bc\nR13: 00000000004bcefa R14: 00000000006f6fb0 R15: 0000000000000004\nModules linked in: pcd(+) paride solos_pci atm ts_fsm rtc_mt6397 mac80211 nhc_mobility nhc_udp nhc_ipv6 nhc_hop nhc_dest nhc_fragment nhc_routing 6lowpan rtc_cros_ec memconsole intel_xhci_usb_role_switch roles rtc_wm8350 usbcore industrialio_triggered_buffer kfifo_buf industrialio asc7621 dm_era dm_persistent_data dm_bufio dm_mod tpm gnss_ubx gnss_serial serdev gnss max2165 cpufreq_dt hid_penmount hid menf21bmc_wdt rc_core n_tracesink ide_gd_mod cdns_csi2tx v4l2_fwnode videodev media pinctrl_lewisburg pinctrl_intel iptable_security iptable_raw iptable_mangle iptable_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 iptable_filter bpfilter ip6_vti ip_vti ip_gre ipip sit tunnel4 ip_tunnel hsr veth netdevsim vxcan batman_adv cfg80211 rfkill chnl_net caif nlmon dummy team bonding vcan bridge stp llc ip6_gre gre ip6_tunnel tunnel6 tun joydev mousedev ppdev kvm_intel kvm irqbypass crct10dif_pclmul crc32_pclmul crc32c_intel ghash_clmulni_intel aesni_intel aes_x86_64 crypto_simd\n ide_pci_generic piix input_leds cryptd glue_helper psmouse ide_core intel_agp serio_raw intel_gtt ata_generic i2c_piix4 agpgart pata_acpi parport_pc parport floppy rtc_cmos sch_fq_codel ip_tables x_tables sha1_ssse3 sha1_generic ipv6 [last unloaded: bmc150_magn]\nDumping ftrace buffer:\n   (ftrace buffer empty)\n---[ end trace d873691c3cd69f56 ]---\n\nIf alloc_disk fails in pcd_init_units, cd->disk will be\nNULL, however in pcd_detect and pcd_exit, it's not check\nthis before free.It may result a NULL pointer dereference.\n\nAlso when register_blkdev failed, blk_cleanup_queue() and\nblk_mq_free_tag_set() should be called to free resources.\n\nReported-by: Hulk Robot <hulkci@huawei.com>\nFixes: 81b74ac68c28 (\"paride/pcd: cleanup queues when detection fails\")\nSigned-off-by: YueHaibing <yuehaibing@huawei.com>\n\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
    "before_after_code_files": [
      "drivers/block/paride/pcd.c||drivers/block/paride/pcd.c"
    ]
  },
  "patch_diff": {
    "drivers/block/paride/pcd.c||drivers/block/paride/pcd.c": [
      "File: drivers/block/paride/pcd.c -> drivers/block/paride/pcd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "314:   disk->queue = blk_mq_init_sq_queue(&cd->tag_set, &pcd_mq_ops,",
      "315:          1, BLK_MQ_F_SHOULD_MERGE);",
      "316:   if (IS_ERR(disk->queue)) {",
      "317:    disk->queue = NULL;",
      "318:    continue;",
      "319:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "317:    put_disk(disk);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "751:  printk(\"%s: No CD-ROM drive found\\n\", name);",
      "752:  for (unit = 0, cd = pcd; unit < PCD_UNITS; unit++, cd++) {",
      "753:   blk_cleanup_queue(cd->disk->queue);",
      "754:   cd->disk->queue = NULL;",
      "755:   blk_mq_free_tag_set(&cd->tag_set);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "754:   if (!cd->disk)",
      "755:    continue;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1010:  pcd_probe_capabilities();",
      "1012:  if (register_blkdev(major, name)) {",
      "1014:    put_disk(cd->disk);",
      "1015:   return -EBUSY;",
      "1016:  }",
      "",
      "[Removed Lines]",
      "1013:   for (unit = 0, cd = pcd; unit < PCD_UNITS; unit++, cd++)",
      "",
      "[Added Lines]",
      "1016:   for (unit = 0, cd = pcd; unit < PCD_UNITS; unit++, cd++) {",
      "1017:    if (!cd->disk)",
      "1018:     continue;",
      "1020:    blk_cleanup_queue(cd->disk->queue);",
      "1021:    blk_mq_free_tag_set(&cd->tag_set);",
      "1023:   }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1032:  int unit;",
      "1034:  for (unit = 0, cd = pcd; unit < PCD_UNITS; unit++, cd++) {",
      "1035:   if (cd->present) {",
      "1036:    del_gendisk(cd->disk);",
      "1037:    pi_release(cd->pi);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1044:   if (!cd->disk)",
      "1045:    continue;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5b56d996dd50a9d2ca87c25ebb50c07b255b7e04",
      "candidate_info": {
        "commit_hash": "5b56d996dd50a9d2ca87c25ebb50c07b255b7e04",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/5b56d996dd50a9d2ca87c25ebb50c07b255b7e04",
        "files": [
          "mm/compaction.c"
        ],
        "message": "mm/compaction.c: abort search if isolation fails\n\nRunning LTP oom01 in a tight loop or memory stress testing put the system\nin a low-memory situation could triggers random memory corruption like\npage flag corruption below due to in fast_isolate_freepages(), if\nisolation fails, next_search_order() does not abort the search immediately\ncould lead to improper accesses.\n\nUBSAN: Undefined behaviour in ./include/linux/mm.h:1195:50\nindex 7 is out of range for type 'zone [5]'\nCall Trace:\n dump_stack+0x62/0x9a\n ubsan_epilogue+0xd/0x7f\n __ubsan_handle_out_of_bounds+0x14d/0x192\n __isolate_free_page+0x52c/0x600\n compaction_alloc+0x886/0x25f0\n unmap_and_move+0x37/0x1e70\n migrate_pages+0x2ca/0xb20\n compact_zone+0x19cb/0x3620\n kcompactd_do_work+0x2df/0x680\n kcompactd+0x1d8/0x6c0\n kthread+0x32c/0x3f0\n ret_from_fork+0x35/0x40\n------------[ cut here ]------------\nkernel BUG at mm/page_alloc.c:3124!\ninvalid opcode: 0000 [#1] SMP DEBUG_PAGEALLOC KASAN PTI\nRIP: 0010:__isolate_free_page+0x464/0x600\nRSP: 0000:ffff888b9e1af848 EFLAGS: 00010007\nRAX: 0000000030000000 RBX: ffff888c39fcf0f8 RCX: 0000000000000000\nRDX: 1ffff111873f9e25 RSI: 0000000000000004 RDI: ffffed1173c35ef6\nRBP: ffff888b9e1af898 R08: fffffbfff4fc2461 R09: fffffbfff4fc2460\nR10: fffffbfff4fc2460 R11: ffffffffa7e12303 R12: 0000000000000008\nR13: dffffc0000000000 R14: 0000000000000000 R15: 0000000000000007\nFS:  0000000000000000(0000) GS:ffff888ba8e80000(0000)\nknlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00007fc7abc00000 CR3: 0000000752416004 CR4: 00000000001606a0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nCall Trace:\n compaction_alloc+0x886/0x25f0\n unmap_and_move+0x37/0x1e70\n migrate_pages+0x2ca/0xb20\n compact_zone+0x19cb/0x3620\n kcompactd_do_work+0x2df/0x680\n kcompactd+0x1d8/0x6c0\n kthread+0x32c/0x3f0\n ret_from_fork+0x35/0x40\n\nLink: http://lkml.kernel.org/r/20190320192648.52499-1-cai@lca.pw\nFixes: dbe2d4e4f12e (\"mm, compaction: round-robin the order while searching the free lists for a target\")\nSigned-off-by: Qian Cai <cai@lca.pw>\nAcked-by: Mel Gorman <mgorman@techsingularity.net>\nCc: Daniel Jordan <daniel.m.jordan@oracle.com>\nCc: Mikhail Gavrilov <mikhail.v.gavrilov@gmail.com>\nCc: Vlastimil Babka <vbabka@suse.cz>\nCc: Pavel Tatashin <pasha.tatashin@soleen.com>\nSigned-off-by: Mel Gorman <mgorman@techsingularity.net>",
        "before_after_code_files": [
          "mm/compaction.c||mm/compaction.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "mm/compaction.c||mm/compaction.c": [
          "File: mm/compaction.c -> mm/compaction.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1370:     count_compact_events(COMPACTISOLATED, nr_isolated);",
          "1371:    } else {",
          "1374:     page = NULL;",
          "1375:    }",
          "1376:   }",
          "",
          "[Removed Lines]",
          "1373:     order = -1;",
          "",
          "[Added Lines]",
          "1373:     order = cc->search_order + 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c861168b7c219838637aaa8c3acc81707aa495f6",
      "candidate_info": {
        "commit_hash": "c861168b7c219838637aaa8c3acc81707aa495f6",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/c861168b7c219838637aaa8c3acc81707aa495f6",
        "files": [
          "tools/testing/selftests/bpf/test_btf.c"
        ],
        "message": "bpf, selftest: add test cases for BTF Var and DataSec\n\nExtend test_btf with various positive and negative tests around\nBTF verification of kind Var and DataSec. All passing as well:\n\n  # ./test_btf\n  [...]\n  BTF raw test[4] (global data test #1): OK\n  BTF raw test[5] (global data test #2): OK\n  BTF raw test[6] (global data test #3): OK\n  BTF raw test[7] (global data test #4, unsupported linkage): OK\n  BTF raw test[8] (global data test #5, invalid var type): OK\n  BTF raw test[9] (global data test #6, invalid var type (fwd type)): OK\n  BTF raw test[10] (global data test #7, invalid var type (fwd type)): OK\n  BTF raw test[11] (global data test #8, invalid var size): OK\n  BTF raw test[12] (global data test #9, invalid var size): OK\n  BTF raw test[13] (global data test #10, invalid var size): OK\n  BTF raw test[14] (global data test #11, multiple section members): OK\n  BTF raw test[15] (global data test #12, invalid offset): OK\n  BTF raw test[16] (global data test #13, invalid offset): OK\n  BTF raw test[17] (global data test #14, invalid offset): OK\n  BTF raw test[18] (global data test #15, not var kind): OK\n  BTF raw test[19] (global data test #16, invalid var referencing sec): OK\n  BTF raw test[20] (global data test #17, invalid var referencing var): OK\n  BTF raw test[21] (global data test #18, invalid var loop): OK\n  BTF raw test[22] (global data test #19, invalid var referencing var): OK\n  BTF raw test[23] (global data test #20, invalid ptr referencing var): OK\n  BTF raw test[24] (global data test #21, var included in struct): OK\n  BTF raw test[25] (global data test #22, array of var): OK\n  [...]\n  PASS:167 SKIP:0 FAIL:0\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Martin KaFai Lau <kafai@fb.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>",
        "before_after_code_files": [
          "tools/testing/selftests/bpf/test_btf.c||tools/testing/selftests/bpf/test_btf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/testing/selftests/bpf/test_btf.c||tools/testing/selftests/bpf/test_btf.c": [
          "File: tools/testing/selftests/bpf/test_btf.c -> tools/testing/selftests/bpf/test_btf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: #define BTF_UNION_ENC(name, nr_elems, sz) \\",
          "86:  BTF_TYPE_ENC(name, BTF_INFO_ENC(BTF_KIND_UNION, 0, nr_elems), sz)",
          "88: #define BTF_MEMBER_ENC(name, type, bits_offset) \\",
          "89:  (name), (type), (bits_offset)",
          "90: #define BTF_ENUM_ENC(name, val) (name), (val)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: #define BTF_VAR_ENC(name, type, linkage) \\",
          "89:  BTF_TYPE_ENC(name, BTF_INFO_ENC(BTF_KIND_VAR, 0, 0), type), (linkage)",
          "90: #define BTF_VAR_SECINFO_ENC(type, offset, size) \\",
          "91:  (type), (offset), (size)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "319:  .btf_load_err = true,",
          "320:  .err_str = \"Invalid member bits_offset\",",
          "321: },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "335: {",
          "336:  .descr = \"global data test #1\",",
          "337:  .raw_types = {",
          "347:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_STRUCT, 0, 4), 48),",
          "353:   BTF_END_RAW,",
          "354:  },",
          "355:  .str_sec = \"\\0A\\0m\\0n\\0o\\0p\",",
          "356:  .str_sec_size = sizeof(\"\\0A\\0m\\0n\\0o\\0p\"),",
          "357:  .map_type = BPF_MAP_TYPE_ARRAY,",
          "358:  .map_name = \"struct_test1_map\",",
          "359:  .key_size = sizeof(int),",
          "360:  .value_size = 48,",
          "361:  .key_type_id = 1,",
          "362:  .value_type_id = 5,",
          "363:  .max_entries = 4,",
          "364: },",
          "375: {",
          "376:  .descr = \"global data test #2\",",
          "377:  .raw_types = {",
          "387:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_STRUCT, 0, 4), 48),",
          "396:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_DATASEC, 0, 1), 48),",
          "397:   BTF_VAR_SECINFO_ENC(6, 0, 48),",
          "398:   BTF_END_RAW,",
          "399:  },",
          "400:  .str_sec = \"\\0A\\0m\\0n\\0o\\0p\\0t\\0.bss\",",
          "401:  .str_sec_size = sizeof(\"\\0A\\0m\\0n\\0o\\0p\\0t\\0.bss\"),",
          "402:  .map_type = BPF_MAP_TYPE_ARRAY,",
          "403:  .map_name = \".bss\",",
          "404:  .key_size = sizeof(int),",
          "405:  .value_size = 48,",
          "406:  .key_type_id = 0,",
          "407:  .value_type_id = 7,",
          "408:  .max_entries = 1,",
          "409: },",
          "410: {",
          "411:  .descr = \"global data test #3\",",
          "412:  .raw_types = {",
          "418:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_DATASEC, 0, 1), 4),",
          "419:   BTF_VAR_SECINFO_ENC(2, 0, 4),",
          "420:   BTF_END_RAW,",
          "421:  },",
          "422:  .str_sec = \"\\0t\\0.bss\",",
          "423:  .str_sec_size = sizeof(\"\\0t\\0.bss\"),",
          "424:  .map_type = BPF_MAP_TYPE_ARRAY,",
          "425:  .map_name = \".bss\",",
          "426:  .key_size = sizeof(int),",
          "427:  .value_size = 4,",
          "428:  .key_type_id = 0,",
          "429:  .value_type_id = 3,",
          "430:  .max_entries = 1,",
          "431: },",
          "432: {",
          "433:  .descr = \"global data test #4, unsupported linkage\",",
          "434:  .raw_types = {",
          "440:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_DATASEC, 0, 1), 4),",
          "441:   BTF_VAR_SECINFO_ENC(2, 0, 4),",
          "442:   BTF_END_RAW,",
          "443:  },",
          "444:  .str_sec = \"\\0t\\0.bss\",",
          "445:  .str_sec_size = sizeof(\"\\0t\\0.bss\"),",
          "446:  .map_type = BPF_MAP_TYPE_ARRAY,",
          "447:  .map_name = \".bss\",",
          "448:  .key_size = sizeof(int),",
          "449:  .value_size = 4,",
          "450:  .key_type_id = 0,",
          "451:  .value_type_id = 3,",
          "452:  .max_entries = 1,",
          "453:  .btf_load_err = true,",
          "454:  .err_str = \"Linkage not supported\",",
          "455: },",
          "456: {",
          "457:  .descr = \"global data test #5, invalid var type\",",
          "458:  .raw_types = {",
          "462:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_DATASEC, 0, 1), 4),",
          "463:   BTF_VAR_SECINFO_ENC(1, 0, 4),",
          "464:   BTF_END_RAW,",
          "465:  },",
          "466:  .str_sec = \"\\0t\\0.bss\",",
          "467:  .str_sec_size = sizeof(\"\\0t\\0.bss\"),",
          "468:  .map_type = BPF_MAP_TYPE_ARRAY,",
          "469:  .map_name = \".bss\",",
          "470:  .key_size = sizeof(int),",
          "471:  .value_size = 4,",
          "472:  .key_type_id = 0,",
          "473:  .value_type_id = 2,",
          "474:  .max_entries = 1,",
          "475:  .btf_load_err = true,",
          "476:  .err_str = \"Invalid type_id\",",
          "477: },",
          "478: {",
          "479:  .descr = \"global data test #6, invalid var type (fwd type)\",",
          "480:  .raw_types = {",
          "482:   BTF_TYPE_ENC(NAME_TBD,",
          "487:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_DATASEC, 0, 1), 4),",
          "488:   BTF_VAR_SECINFO_ENC(2, 0, 4),",
          "489:   BTF_END_RAW,",
          "490:  },",
          "491:  .str_sec = \"\\0A\\0t\\0.bss\",",
          "492:  .str_sec_size = sizeof(\"\\0A\\0t\\0.bss\"),",
          "493:  .map_type = BPF_MAP_TYPE_ARRAY,",
          "494:  .map_name = \".bss\",",
          "495:  .key_size = sizeof(int),",
          "496:  .value_size = 4,",
          "497:  .key_type_id = 0,",
          "498:  .value_type_id = 2,",
          "499:  .max_entries = 1,",
          "500:  .btf_load_err = true,",
          "501:  .err_str = \"Invalid type\",",
          "502: },",
          "503: {",
          "504:  .descr = \"global data test #7, invalid var type (fwd type)\",",
          "505:  .raw_types = {",
          "507:   BTF_TYPE_ENC(NAME_TBD,",
          "512:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_DATASEC, 0, 1), 4),",
          "513:   BTF_VAR_SECINFO_ENC(1, 0, 4),",
          "514:   BTF_END_RAW,",
          "515:  },",
          "516:  .str_sec = \"\\0A\\0t\\0.bss\",",
          "517:  .str_sec_size = sizeof(\"\\0A\\0t\\0.bss\"),",
          "518:  .map_type = BPF_MAP_TYPE_ARRAY,",
          "519:  .map_name = \".bss\",",
          "520:  .key_size = sizeof(int),",
          "521:  .value_size = 4,",
          "522:  .key_type_id = 0,",
          "523:  .value_type_id = 2,",
          "524:  .max_entries = 1,",
          "525:  .btf_load_err = true,",
          "526:  .err_str = \"Invalid type\",",
          "527: },",
          "528: {",
          "529:  .descr = \"global data test #8, invalid var size\",",
          "530:  .raw_types = {",
          "540:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_STRUCT, 0, 4), 48),",
          "549:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_DATASEC, 0, 1), 48),",
          "550:   BTF_VAR_SECINFO_ENC(6, 0, 47),",
          "551:   BTF_END_RAW,",
          "552:  },",
          "553:  .str_sec = \"\\0A\\0m\\0n\\0o\\0p\\0t\\0.bss\",",
          "554:  .str_sec_size = sizeof(\"\\0A\\0m\\0n\\0o\\0p\\0t\\0.bss\"),",
          "555:  .map_type = BPF_MAP_TYPE_ARRAY,",
          "556:  .map_name = \".bss\",",
          "557:  .key_size = sizeof(int),",
          "558:  .value_size = 48,",
          "559:  .key_type_id = 0,",
          "560:  .value_type_id = 7,",
          "561:  .max_entries = 1,",
          "562:  .btf_load_err = true,",
          "563:  .err_str = \"Invalid size\",",
          "564: },",
          "565: {",
          "566:  .descr = \"global data test #9, invalid var size\",",
          "567:  .raw_types = {",
          "577:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_STRUCT, 0, 4), 48),",
          "586:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_DATASEC, 0, 1), 46),",
          "587:   BTF_VAR_SECINFO_ENC(6, 0, 48),",
          "588:   BTF_END_RAW,",
          "589:  },",
          "590:  .str_sec = \"\\0A\\0m\\0n\\0o\\0p\\0t\\0.bss\",",
          "591:  .str_sec_size = sizeof(\"\\0A\\0m\\0n\\0o\\0p\\0t\\0.bss\"),",
          "592:  .map_type = BPF_MAP_TYPE_ARRAY,",
          "593:  .map_name = \".bss\",",
          "594:  .key_size = sizeof(int),",
          "595:  .value_size = 48,",
          "596:  .key_type_id = 0,",
          "597:  .value_type_id = 7,",
          "598:  .max_entries = 1,",
          "599:  .btf_load_err = true,",
          "600:  .err_str = \"Invalid size\",",
          "601: },",
          "602: {",
          "603:  .descr = \"global data test #10, invalid var size\",",
          "604:  .raw_types = {",
          "614:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_STRUCT, 0, 4), 48),",
          "623:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_DATASEC, 0, 1), 46),",
          "624:   BTF_VAR_SECINFO_ENC(6, 0, 46),",
          "625:   BTF_END_RAW,",
          "626:  },",
          "627:  .str_sec = \"\\0A\\0m\\0n\\0o\\0p\\0t\\0.bss\",",
          "628:  .str_sec_size = sizeof(\"\\0A\\0m\\0n\\0o\\0p\\0t\\0.bss\"),",
          "629:  .map_type = BPF_MAP_TYPE_ARRAY,",
          "630:  .map_name = \".bss\",",
          "631:  .key_size = sizeof(int),",
          "632:  .value_size = 48,",
          "633:  .key_type_id = 0,",
          "634:  .value_type_id = 7,",
          "635:  .max_entries = 1,",
          "636:  .btf_load_err = true,",
          "637:  .err_str = \"Invalid size\",",
          "638: },",
          "639: {",
          "640:  .descr = \"global data test #11, multiple section members\",",
          "641:  .raw_types = {",
          "651:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_STRUCT, 0, 4), 48),",
          "662:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_DATASEC, 0, 2), 62),",
          "663:   BTF_VAR_SECINFO_ENC(6, 10, 48),",
          "664:   BTF_VAR_SECINFO_ENC(7, 58, 4),",
          "665:   BTF_END_RAW,",
          "666:  },",
          "667:  .str_sec = \"\\0A\\0m\\0n\\0o\\0p\\0t\\0u\\0.bss\",",
          "668:  .str_sec_size = sizeof(\"\\0A\\0m\\0n\\0o\\0p\\0t\\0u\\0.bss\"),",
          "669:  .map_type = BPF_MAP_TYPE_ARRAY,",
          "670:  .map_name = \".bss\",",
          "671:  .key_size = sizeof(int),",
          "672:  .value_size = 62,",
          "673:  .key_type_id = 0,",
          "674:  .value_type_id = 8,",
          "675:  .max_entries = 1,",
          "676: },",
          "677: {",
          "678:  .descr = \"global data test #12, invalid offset\",",
          "679:  .raw_types = {",
          "689:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_STRUCT, 0, 4), 48),",
          "700:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_DATASEC, 0, 2), 62),",
          "701:   BTF_VAR_SECINFO_ENC(6, 10, 48),",
          "702:   BTF_VAR_SECINFO_ENC(7, 60, 4),",
          "703:   BTF_END_RAW,",
          "704:  },",
          "705:  .str_sec = \"\\0A\\0m\\0n\\0o\\0p\\0t\\0u\\0.bss\",",
          "706:  .str_sec_size = sizeof(\"\\0A\\0m\\0n\\0o\\0p\\0t\\0u\\0.bss\"),",
          "707:  .map_type = BPF_MAP_TYPE_ARRAY,",
          "708:  .map_name = \".bss\",",
          "709:  .key_size = sizeof(int),",
          "710:  .value_size = 62,",
          "711:  .key_type_id = 0,",
          "712:  .value_type_id = 8,",
          "713:  .max_entries = 1,",
          "714:  .btf_load_err = true,",
          "715:  .err_str = \"Invalid offset+size\",",
          "716: },",
          "717: {",
          "718:  .descr = \"global data test #13, invalid offset\",",
          "719:  .raw_types = {",
          "729:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_STRUCT, 0, 4), 48),",
          "740:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_DATASEC, 0, 2), 62),",
          "741:   BTF_VAR_SECINFO_ENC(6, 10, 48),",
          "742:   BTF_VAR_SECINFO_ENC(7, 12, 4),",
          "743:   BTF_END_RAW,",
          "744:  },",
          "745:  .str_sec = \"\\0A\\0m\\0n\\0o\\0p\\0t\\0u\\0.bss\",",
          "746:  .str_sec_size = sizeof(\"\\0A\\0m\\0n\\0o\\0p\\0t\\0u\\0.bss\"),",
          "747:  .map_type = BPF_MAP_TYPE_ARRAY,",
          "748:  .map_name = \".bss\",",
          "749:  .key_size = sizeof(int),",
          "750:  .value_size = 62,",
          "751:  .key_type_id = 0,",
          "752:  .value_type_id = 8,",
          "753:  .max_entries = 1,",
          "754:  .btf_load_err = true,",
          "755:  .err_str = \"Invalid offset\",",
          "756: },",
          "757: {",
          "758:  .descr = \"global data test #14, invalid offset\",",
          "759:  .raw_types = {",
          "769:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_STRUCT, 0, 4), 48),",
          "780:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_DATASEC, 0, 2), 62),",
          "781:   BTF_VAR_SECINFO_ENC(7, 58, 4),",
          "782:   BTF_VAR_SECINFO_ENC(6, 10, 48),",
          "783:   BTF_END_RAW,",
          "784:  },",
          "785:  .str_sec = \"\\0A\\0m\\0n\\0o\\0p\\0t\\0u\\0.bss\",",
          "786:  .str_sec_size = sizeof(\"\\0A\\0m\\0n\\0o\\0p\\0t\\0u\\0.bss\"),",
          "787:  .map_type = BPF_MAP_TYPE_ARRAY,",
          "788:  .map_name = \".bss\",",
          "789:  .key_size = sizeof(int),",
          "790:  .value_size = 62,",
          "791:  .key_type_id = 0,",
          "792:  .value_type_id = 8,",
          "793:  .max_entries = 1,",
          "794:  .btf_load_err = true,",
          "795:  .err_str = \"Invalid offset\",",
          "796: },",
          "797: {",
          "798:  .descr = \"global data test #15, not var kind\",",
          "799:  .raw_types = {",
          "804:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_DATASEC, 0, 1), 4),",
          "805:   BTF_VAR_SECINFO_ENC(1, 0, 4),",
          "806:   BTF_END_RAW,",
          "807:  },",
          "808:  .str_sec = \"\\0A\\0t\\0.bss\",",
          "809:  .str_sec_size = sizeof(\"\\0A\\0t\\0.bss\"),",
          "810:  .map_type = BPF_MAP_TYPE_ARRAY,",
          "811:  .map_name = \".bss\",",
          "812:  .key_size = sizeof(int),",
          "813:  .value_size = 4,",
          "814:  .key_type_id = 0,",
          "815:  .value_type_id = 3,",
          "816:  .max_entries = 1,",
          "817:  .btf_load_err = true,",
          "818:  .err_str = \"Not a VAR kind member\",",
          "819: },",
          "820: {",
          "821:  .descr = \"global data test #16, invalid var referencing sec\",",
          "822:  .raw_types = {",
          "828:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_DATASEC, 0, 1), 4),",
          "829:   BTF_VAR_SECINFO_ENC(3, 0, 4),",
          "831:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_DATASEC, 0, 1), 4),",
          "832:   BTF_VAR_SECINFO_ENC(6, 0, 4),",
          "834:   BTF_END_RAW,",
          "835:  },",
          "836:  .str_sec = \"\\0A\\0t\\0s\\0a\\0a\",",
          "837:  .str_sec_size = sizeof(\"\\0A\\0t\\0s\\0a\\0a\"),",
          "838:  .map_type = BPF_MAP_TYPE_ARRAY,",
          "839:  .map_name = \".bss\",",
          "840:  .key_size = sizeof(int),",
          "841:  .value_size = 4,",
          "842:  .key_type_id = 0,",
          "843:  .value_type_id = 4,",
          "844:  .max_entries = 1,",
          "845:  .btf_load_err = true,",
          "846:  .err_str = \"Invalid type_id\",",
          "847: },",
          "848: {",
          "849:  .descr = \"global data test #17, invalid var referencing var\",",
          "850:  .raw_types = {",
          "856:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_DATASEC, 0, 1), 4),",
          "857:   BTF_VAR_SECINFO_ENC(3, 0, 4),",
          "858:   BTF_END_RAW,",
          "859:  },",
          "860:  .str_sec = \"\\0A\\0t\\0s\\0a\\0a\",",
          "861:  .str_sec_size = sizeof(\"\\0A\\0t\\0s\\0a\\0a\"),",
          "862:  .map_type = BPF_MAP_TYPE_ARRAY,",
          "863:  .map_name = \".bss\",",
          "864:  .key_size = sizeof(int),",
          "865:  .value_size = 4,",
          "866:  .key_type_id = 0,",
          "867:  .value_type_id = 4,",
          "868:  .max_entries = 1,",
          "869:  .btf_load_err = true,",
          "870:  .err_str = \"Invalid type_id\",",
          "871: },",
          "872: {",
          "873:  .descr = \"global data test #18, invalid var loop\",",
          "874:  .raw_types = {",
          "879:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_DATASEC, 0, 1), 4),",
          "880:   BTF_VAR_SECINFO_ENC(2, 0, 4),",
          "881:   BTF_END_RAW,",
          "882:  },",
          "883:  .str_sec = \"\\0A\\0t\\0aaa\",",
          "884:  .str_sec_size = sizeof(\"\\0A\\0t\\0aaa\"),",
          "885:  .map_type = BPF_MAP_TYPE_ARRAY,",
          "886:  .map_name = \".bss\",",
          "887:  .key_size = sizeof(int),",
          "888:  .value_size = 4,",
          "889:  .key_type_id = 0,",
          "890:  .value_type_id = 4,",
          "891:  .max_entries = 1,",
          "892:  .btf_load_err = true,",
          "893:  .err_str = \"Invalid type_id\",",
          "894: },",
          "895: {",
          "896:  .descr = \"global data test #19, invalid var referencing var\",",
          "897:  .raw_types = {",
          "902:   BTF_END_RAW,",
          "903:  },",
          "904:  .str_sec = \"\\0A\\0t\\0s\\0a\\0a\",",
          "905:  .str_sec_size = sizeof(\"\\0A\\0t\\0s\\0a\\0a\"),",
          "906:  .map_type = BPF_MAP_TYPE_ARRAY,",
          "907:  .map_name = \".bss\",",
          "908:  .key_size = sizeof(int),",
          "909:  .value_size = 4,",
          "910:  .key_type_id = 0,",
          "911:  .value_type_id = 4,",
          "912:  .max_entries = 1,",
          "913:  .btf_load_err = true,",
          "914:  .err_str = \"Invalid type_id\",",
          "915: },",
          "916: {",
          "917:  .descr = \"global data test #20, invalid ptr referencing var\",",
          "918:  .raw_types = {",
          "922:   BTF_TYPE_ENC(0, BTF_INFO_ENC(BTF_KIND_PTR, 0, 0), 3),",
          "924:   BTF_END_RAW,",
          "925:  },",
          "926:  .str_sec = \"\\0A\\0t\\0s\\0a\\0a\",",
          "927:  .str_sec_size = sizeof(\"\\0A\\0t\\0s\\0a\\0a\"),",
          "928:  .map_type = BPF_MAP_TYPE_ARRAY,",
          "929:  .map_name = \".bss\",",
          "930:  .key_size = sizeof(int),",
          "931:  .value_size = 4,",
          "932:  .key_type_id = 0,",
          "933:  .value_type_id = 4,",
          "934:  .max_entries = 1,",
          "935:  .btf_load_err = true,",
          "936:  .err_str = \"Invalid type_id\",",
          "937: },",
          "938: {",
          "939:  .descr = \"global data test #21, var included in struct\",",
          "940:  .raw_types = {",
          "944:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_STRUCT, 0, 2), sizeof(int) * 2),",
          "949:   BTF_END_RAW,",
          "950:  },",
          "951:  .str_sec = \"\\0A\\0t\\0s\\0a\\0a\",",
          "952:  .str_sec_size = sizeof(\"\\0A\\0t\\0s\\0a\\0a\"),",
          "953:  .map_type = BPF_MAP_TYPE_ARRAY,",
          "954:  .map_name = \".bss\",",
          "955:  .key_size = sizeof(int),",
          "956:  .value_size = 4,",
          "957:  .key_type_id = 0,",
          "958:  .value_type_id = 4,",
          "959:  .max_entries = 1,",
          "960:  .btf_load_err = true,",
          "961:  .err_str = \"Invalid member\",",
          "962: },",
          "963: {",
          "964:  .descr = \"global data test #22, array of var\",",
          "965:  .raw_types = {",
          "970:   BTF_END_RAW,",
          "971:  },",
          "972:  .str_sec = \"\\0A\\0t\\0s\\0a\\0a\",",
          "973:  .str_sec_size = sizeof(\"\\0A\\0t\\0s\\0a\\0a\"),",
          "974:  .map_type = BPF_MAP_TYPE_ARRAY,",
          "975:  .map_name = \".bss\",",
          "976:  .key_size = sizeof(int),",
          "977:  .value_size = 4,",
          "978:  .key_type_id = 0,",
          "979:  .value_type_id = 4,",
          "980:  .max_entries = 1,",
          "981:  .btf_load_err = true,",
          "982:  .err_str = \"Invalid elem\",",
          "983: },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ec1ed2aa68782b342458681aa4d16b65c9014d6",
      "candidate_info": {
        "commit_hash": "2ec1ed2aa68782b342458681aa4d16b65c9014d6",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/2ec1ed2aa68782b342458681aa4d16b65c9014d6",
        "files": [
          "drivers/net/ethernet/cavium/thunder/nicvf_main.c"
        ],
        "message": "net: thunderx: fix NULL pointer dereference in nicvf_open/nicvf_stop\n\nWhen a bpf program is uploaded, the driver computes the number of\nxdp tx queues resulting in the allocation of additional qsets.\nStarting from commit '2ecbe4f4a027 (\"net: thunderx: replace global\nnicvf_rx_mode_wq work queue for all VFs to private for each of them\")'\nthe driver runs link state polling for each VF resulting in the\nfollowing NULL pointer dereference:\n\n[   56.169256] Unable to handle kernel NULL pointer dereference at virtual address 0000000000000020\n[   56.178032] Mem abort info:\n[   56.180834]   ESR = 0x96000005\n[   56.183877]   Exception class = DABT (current EL), IL = 32 bits\n[   56.189792]   SET = 0, FnV = 0\n[   56.192834]   EA = 0, S1PTW = 0\n[   56.195963] Data abort info:\n[   56.198831]   ISV = 0, ISS = 0x00000005\n[   56.202662]   CM = 0, WnR = 0\n[   56.205619] user pgtable: 64k pages, 48-bit VAs, pgdp = 0000000021f0c7a0\n[   56.212315] [0000000000000020] pgd=0000000000000000, pud=0000000000000000\n[   56.219094] Internal error: Oops: 96000005 [#1] SMP\n[   56.260459] CPU: 39 PID: 2034 Comm: ip Not tainted 5.1.0-rc3+ #3\n[   56.266452] Hardware name: GIGABYTE R120-T33/MT30-GS1, BIOS T49 02/02/2018\n[   56.273315] pstate: 80000005 (Nzcv daif -PAN -UAO)\n[   56.278098] pc : __ll_sc___cmpxchg_case_acq_64+0x4/0x20\n[   56.283312] lr : mutex_lock+0x2c/0x50\n[   56.286962] sp : ffff0000219af1b0\n[   56.290264] x29: ffff0000219af1b0 x28: ffff800f64de49a0\n[   56.295565] x27: 0000000000000000 x26: 0000000000000015\n[   56.300865] x25: 0000000000000000 x24: 0000000000000000\n[   56.306165] x23: 0000000000000000 x22: ffff000011117000\n[   56.311465] x21: ffff800f64dfc080 x20: 0000000000000020\n[   56.316766] x19: 0000000000000020 x18: 0000000000000001\n[   56.322066] x17: 0000000000000000 x16: ffff800f2e077080\n[   56.327367] x15: 0000000000000004 x14: 0000000000000000\n[   56.332667] x13: ffff000010964438 x12: 0000000000000002\n[   56.337967] x11: 0000000000000000 x10: 0000000000000c70\n[   56.343268] x9 : ffff0000219af120 x8 : ffff800f2e077d50\n[   56.348568] x7 : 0000000000000027 x6 : 000000062a9d6a84\n[   56.353869] x5 : 0000000000000000 x4 : ffff800f2e077480\n[   56.359169] x3 : 0000000000000008 x2 : ffff800f2e077080\n[   56.364469] x1 : 0000000000000000 x0 : 0000000000000020\n[   56.369770] Process ip (pid: 2034, stack limit = 0x00000000c862da3a)\n[   56.376110] Call trace:\n[   56.378546]  __ll_sc___cmpxchg_case_acq_64+0x4/0x20\n[   56.383414]  drain_workqueue+0x34/0x198\n[   56.387247]  nicvf_open+0x48/0x9e8 [nicvf]\n[   56.391334]  nicvf_open+0x898/0x9e8 [nicvf]\n[   56.395507]  nicvf_xdp+0x1bc/0x238 [nicvf]\n[   56.399595]  dev_xdp_install+0x68/0x90\n[   56.403333]  dev_change_xdp_fd+0xc8/0x240\n[   56.407333]  do_setlink+0x8e0/0xbe8\n[   56.410810]  __rtnl_newlink+0x5b8/0x6d8\n[   56.414634]  rtnl_newlink+0x54/0x80\n[   56.418112]  rtnetlink_rcv_msg+0x22c/0x2f8\n[   56.422199]  netlink_rcv_skb+0x60/0x120\n[   56.426023]  rtnetlink_rcv+0x28/0x38\n[   56.429587]  netlink_unicast+0x1c8/0x258\n[   56.433498]  netlink_sendmsg+0x1b4/0x350\n[   56.437410]  sock_sendmsg+0x4c/0x68\n[   56.440887]  ___sys_sendmsg+0x240/0x280\n[   56.444711]  __sys_sendmsg+0x68/0xb0\n[   56.448275]  __arm64_sys_sendmsg+0x2c/0x38\n[   56.452361]  el0_svc_handler+0x9c/0x128\n[   56.456186]  el0_svc+0x8/0xc\n[   56.459056] Code: 35ffff91 2a1003e0 d65f03c0 f9800011 (c85ffc10)\n[   56.465166] ---[ end trace 4a57fdc27b0a572c ]---\n[   56.469772] Kernel panic - not syncing: Fatal exception\n\nFix it by checking nicvf_rx_mode_wq pointer in nicvf_open and nicvf_stop\n\nFixes: 2ecbe4f4a027 (\"net: thunderx: replace global nicvf_rx_mode_wq work queue for all VFs to private for each of them\")\nFixes: 2c632ad8bc74 (\"net: thunderx: move link state polling function to VF\")\nReported-by: Matteo Croce <mcroce@redhat.com>\nSigned-off-by: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>\nTested-by: Matteo Croce <mcroce@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "drivers/net/ethernet/cavium/thunder/nicvf_main.c||drivers/net/ethernet/cavium/thunder/nicvf_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/net/ethernet/cavium/thunder/nicvf_main.c||drivers/net/ethernet/cavium/thunder/nicvf_main.c": [
          "File: drivers/net/ethernet/cavium/thunder/nicvf_main.c -> drivers/net/ethernet/cavium/thunder/nicvf_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1328:  struct nicvf_cq_poll *cq_poll = NULL;",
          "1329:  union nic_mbx mbx = {};",
          "1336:  mbx.msg.msg = NIC_MBOX_MSG_SHUTDOWN;",
          "1337:  nicvf_send_msg_to_pf(nic, &mbx);",
          "",
          "[Removed Lines]",
          "1331:  cancel_delayed_work_sync(&nic->link_change_work);",
          "1334:  drain_workqueue(nic->nicvf_rx_mode_wq);",
          "",
          "[Added Lines]",
          "1332:  if (nic->nicvf_rx_mode_wq) {",
          "1333:   cancel_delayed_work_sync(&nic->link_change_work);",
          "1334:   drain_workqueue(nic->nicvf_rx_mode_wq);",
          "1335:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1452:  struct nicvf_cq_poll *cq_poll = NULL;",
          "1457:  netif_carrier_off(netdev);",
          "",
          "[Removed Lines]",
          "1455:  drain_workqueue(nic->nicvf_rx_mode_wq);",
          "",
          "[Added Lines]",
          "1456:  if (nic->nicvf_rx_mode_wq)",
          "1457:   drain_workqueue(nic->nicvf_rx_mode_wq);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1551:  nicvf_send_cfg_done(nic);",
          "1558:  return 0;",
          "1559: cleanup:",
          "",
          "[Removed Lines]",
          "1553:  INIT_DELAYED_WORK(&nic->link_change_work,",
          "1554:      nicvf_link_status_check_task);",
          "1555:  queue_delayed_work(nic->nicvf_rx_mode_wq,",
          "1556:       &nic->link_change_work, 0);",
          "",
          "[Added Lines]",
          "1555:  if (nic->nicvf_rx_mode_wq) {",
          "1556:   INIT_DELAYED_WORK(&nic->link_change_work,",
          "1557:       nicvf_link_status_check_task);",
          "1558:   queue_delayed_work(nic->nicvf_rx_mode_wq,",
          "1559:        &nic->link_change_work, 0);",
          "1560:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fae2708174ae95d98d19f194e03d6e8f688ae195",
      "candidate_info": {
        "commit_hash": "fae2708174ae95d98d19f194e03d6e8f688ae195",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/fae2708174ae95d98d19f194e03d6e8f688ae195",
        "files": [
          "net/sched/act_sample.c",
          "tools/testing/selftests/tc-testing/tc-tests/actions/sample.json"
        ],
        "message": "net/sched: act_sample: fix divide by zero in the traffic path\n\nthe control path of 'sample' action does not validate the value of 'rate'\nprovided by the user, but then it uses it as divisor in the traffic path.\nValidate it in tcf_sample_init(), and return -EINVAL with a proper extack\nmessage in case that value is zero, to fix a splat with the script below:\n\n # tc f a dev test0 egress matchall action sample rate 0 group 1 index 2\n # tc -s a s action sample\n total acts 1\n\n         action order 0: sample rate 1/0 group 1 pipe\n          index 2 ref 1 bind 1 installed 19 sec used 19 sec\n         Action statistics:\n         Sent 0 bytes 0 pkt (dropped 0, overlimits 0 requeues 0)\n         backlog 0b 0p requeues 0\n # ping 192.0.2.1 -I test0 -c1 -q\n\n divide error: 0000 [#1] SMP PTI\n CPU: 1 PID: 6192 Comm: ping Not tainted 5.1.0-rc2.diag2+ #591\n Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011\n RIP: 0010:tcf_sample_act+0x9e/0x1e0 [act_sample]\n Code: 6a f1 85 c0 74 0d 80 3d 83 1a 00 00 00 0f 84 9c 00 00 00 4d 85 e4 0f 84 85 00 00 00 e8 9b d7 9c f1 44 8b 8b e0 00 00 00 31 d2 <41> f7 f1 85 d2 75 70 f6 85 83 00 00 00 10 48 8b 45 10 8b 88 08 01\n RSP: 0018:ffffae320190ba30 EFLAGS: 00010246\n RAX: 00000000b0677d21 RBX: ffff8af1ed9ec000 RCX: 0000000059a9fe49\n RDX: 0000000000000000 RSI: 000000000c7e33b7 RDI: ffff8af23daa0af0\n RBP: ffff8af1ee11b200 R08: 0000000074fcaf7e R09: 0000000000000000\n R10: 0000000000000050 R11: ffffffffb3088680 R12: ffff8af232307f80\n R13: 0000000000000003 R14: ffff8af1ed9ec000 R15: 0000000000000000\n FS:  00007fe9c6d2f740(0000) GS:ffff8af23da80000(0000) knlGS:0000000000000000\n CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n CR2: 00007fff6772f000 CR3: 00000000746a2004 CR4: 00000000001606e0\n Call Trace:\n  tcf_action_exec+0x7c/0x1c0\n  tcf_classify+0x57/0x160\n  __dev_queue_xmit+0x3dc/0xd10\n  ip_finish_output2+0x257/0x6d0\n  ip_output+0x75/0x280\n  ip_send_skb+0x15/0x40\n  raw_sendmsg+0xae3/0x1410\n  sock_sendmsg+0x36/0x40\n  __sys_sendto+0x10e/0x140\n  __x64_sys_sendto+0x24/0x30\n  do_syscall_64+0x60/0x210\n  entry_SYSCALL_64_after_hwframe+0x49/0xbe\n  [...]\n  Kernel panic - not syncing: Fatal exception in interrupt\n\nAdd a TDC selftest to document that 'rate' is now being validated.\n\nReported-by: Matteo Croce <mcroce@redhat.com>\nFixes: 5c5670fae430 (\"net/sched: Introduce sample tc action\")\nSigned-off-by: Davide Caratti <dcaratti@redhat.com>\nAcked-by: Yotam Gigi <yotam.gi@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/sched/act_sample.c||net/sched/act_sample.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/sched/act_sample.c||net/sched/act_sample.c": [
          "File: net/sched/act_sample.c -> net/sched/act_sample.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:  struct nlattr *tb[TCA_SAMPLE_MAX + 1];",
          "46:  struct psample_group *psample_group;",
          "47:  struct tcf_chain *goto_ch = NULL;",
          "48:  struct tc_sample *parm;",
          "50:  struct tcf_sample *s;",
          "51:  bool exists = false;",
          "52:  int ret, err;",
          "",
          "[Removed Lines]",
          "49:  u32 psample_group_num;",
          "",
          "[Added Lines]",
          "48:  u32 psample_group_num, rate;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:  if (err < 0)",
          "86:   goto release_idr;",
          "88:  psample_group_num = nla_get_u32(tb[TCA_SAMPLE_PSAMPLE_GROUP]);",
          "89:  psample_group = psample_group_get(net, psample_group_num);",
          "90:  if (!psample_group) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:  rate = nla_get_u32(tb[TCA_SAMPLE_RATE]);",
          "89:  if (!rate) {",
          "90:   NL_SET_ERR_MSG(extack, \"invalid sample rate\");",
          "91:   err = -EINVAL;",
          "92:   goto put_chain;",
          "93:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:  spin_lock_bh(&s->tcf_lock);",
          "98:  goto_ch = tcf_action_set_ctrlact(*a, parm->action, goto_ch);",
          "100:  s->psample_group_num = psample_group_num;",
          "101:  RCU_INIT_POINTER(s->psample_group, psample_group);",
          "",
          "[Removed Lines]",
          "99:  s->rate = nla_get_u32(tb[TCA_SAMPLE_RATE]);",
          "",
          "[Added Lines]",
          "105:  s->rate = rate;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da23379f1508dba4a02feb1ed4f53122fb4ecf64",
      "candidate_info": {
        "commit_hash": "da23379f1508dba4a02feb1ed4f53122fb4ecf64",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/da23379f1508dba4a02feb1ed4f53122fb4ecf64",
        "files": [
          "drivers/gpu/drm/i915/i915_globals.c"
        ],
        "message": "drm/i915: Use static allocation for i915_globals_park()\n\nIn order to avoid the malloc inside i915_globals_park() occurring\nunderneath a lock connected to the shrinker (thus causing circular\nlockdeps warnings), move the rcu_worker to a global.\n\n<4> [39.085073] ======================================================\n<4> [39.085273] WARNING: possible circular locking dependency detected\n<4> [39.085552] 5.1.0-rc3-CI-Trybot_4088+ #1 Tainted: G     U\n<4> [39.085752] ------------------------------------------------------\n<4> [39.085949] kswapd0/32 is trying to acquire lock:\n<4> [39.086121] 00000000004b5f91 (wakeref#3){+.+.}, at: intel_engine_pm_put+0x1b/0x40 [i915]\n<4> [39.086493]\nbut task is already holding lock:\n<4> [39.086682] 00000000dd009a9a (fs_reclaim){+.+.}, at: __fs_reclaim_acquire+0x0/0x30\n<4> [39.086910]\nwhich lock already depends on the new lock.\n\n<4> [39.087139]\nthe existing dependency chain (in reverse order) is:\n<4> [39.087356]\n-> #2 (fs_reclaim){+.+.}:\n<4> [39.087604]        fs_reclaim_acquire.part.24+0x24/0x30\n<4> [39.087785]        kmem_cache_alloc_trace+0x2a/0x290\n<4> [39.087998]        i915_globals_park+0x22/0xa0 [i915]\n<4> [39.088478]        idle_work_handler+0x1df/0x220 [i915]\n<4> [39.089016]        process_one_work+0x245/0x610\n<4> [39.089447]        worker_thread+0x37/0x380\n<4> [39.089956]        kthread+0x119/0x130\n<4> [39.090374]        ret_from_fork+0x3a/0x50\n<4> [39.090868]\n-> #1 (wakeref#4){+.+.}:\n<4> [39.091569]        __mutex_lock+0x8c/0x960\n<4> [39.092054]        atomic_dec_and_mutex_lock+0x33/0x50\n<4> [39.092521]        intel_gt_pm_put+0x1b/0x40 [i915]\n<4> [39.093047]        intel_engine_park+0xeb/0x1d0 [i915]\n<4> [39.093514]        __intel_wakeref_put_once+0x10/0x30 [i915]\n<4> [39.094062]        i915_request_retire+0x477/0xaf0 [i915]\n<4> [39.094547]        ring_retire_requests+0x86/0x160 [i915]\n<4> [39.095110]        i915_retire_requests+0x58/0xc0 [i915]\n<4> [39.095587]        i915_gem_wait_for_idle.part.22+0xb2/0xf0 [i915]\n<4> [39.096142]        switch_to_kernel_context_sync+0x2a/0x70 [i915]\n<4> [39.096633]        i915_gem_init+0x59c/0x9c0 [i915]\n<4> [39.097174]        i915_driver_load+0xd96/0x1880 [i915]\n<4> [39.097640]        i915_pci_probe+0x29/0xa0 [i915]\n<4> [39.098145]        pci_device_probe+0xa1/0x120\n<4> [39.098607]        really_probe+0xf3/0x3e0\n<4> [39.099031]        driver_probe_device+0x10a/0x120\n<4> [39.099599]        device_driver_attach+0x4b/0x50\n<4> [39.100033]        __driver_attach+0x97/0x130\n<4> [39.100525]        bus_for_each_dev+0x74/0xc0\n<4> [39.100954]        bus_add_driver+0x13f/0x210\n<4> [39.101441]        driver_register+0x56/0xe0\n<4> [39.101891]        do_one_initcall+0x58/0x2e0\n<4> [39.102319]        do_init_module+0x56/0x1ea\n<4> [39.102805]        load_module+0x2701/0x29e0\n<4> [39.103231]        __se_sys_finit_module+0xd3/0xf0\n<4> [39.103727]        do_syscall_64+0x55/0x190\n<4> [39.104153]        entry_SYSCALL_64_after_hwframe+0x49/0xbe\n<4> [39.104736]\n-> #0 (wakeref#3){+.+.}:\n<4> [39.105437]        lock_acquire+0xa6/0x1c0\n<4> [39.105923]        __mutex_lock+0x8c/0x960\n<4> [39.106345]        atomic_dec_and_mutex_lock+0x33/0x50\n<4> [39.106897]        intel_engine_pm_put+0x1b/0x40 [i915]\n<4> [39.107375]        i915_request_retire+0x477/0xaf0 [i915]\n<4> [39.107930]        ring_retire_requests+0x86/0x160 [i915]\n<4> [39.108412]        i915_retire_requests+0x58/0xc0 [i915]\n<4> [39.108934]        i915_gem_shrink+0xd8/0x5b0 [i915]\n<4> [39.109431]        i915_gem_shrinker_scan+0x59/0x130 [i915]\n<4> [39.109884]        do_shrink_slab+0x131/0x3e0\n<4> [39.110380]        shrink_slab+0x228/0x2c0\n<4> [39.110810]        shrink_node+0x177/0x460\n<4> [39.111317]        balance_pgdat+0x239/0x580\n<4> [39.111743]        kswapd+0x186/0x570\n<4> [39.112221]        kthread+0x119/0x130\n<4> [39.112641]        ret_from_fork+0x3a/0x50\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: https://patchwork.freedesktop.org/patch/msgid/20190408091728.20207-3-chris@chris-wilson.co.uk",
        "before_after_code_files": [
          "drivers/gpu/drm/i915/i915_globals.c||drivers/gpu/drm/i915/i915_globals.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/i915/i915_globals.c||drivers/gpu/drm/i915/i915_globals.c": [
          "File: drivers/gpu/drm/i915/i915_globals.c -> drivers/gpu/drm/i915/i915_globals.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: static LIST_HEAD(globals);",
          "20: void __init i915_global_register(struct i915_global *global)",
          "21: {",
          "22:  GEM_BUG_ON(!global->shrink);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: static atomic_t active;",
          "21: static atomic_t epoch;",
          "22: static struct park_work {",
          "23:  struct rcu_work work;",
          "24:  int epoch;",
          "25: } park;",
          "27: static void i915_globals_shrink(void)",
          "28: {",
          "29:  struct i915_global *global;",
          "36:  list_for_each_entry(global, &globals, link)",
          "37:   global->shrink();",
          "38: }",
          "40: static void __i915_globals_park(struct work_struct *work)",
          "41: {",
          "43:  if (park.epoch == atomic_read(&epoch))",
          "44:   i915_globals_shrink();",
          "45: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:   }",
          "58:  }",
          "60:  return 0;",
          "61: }",
          "94: void i915_globals_park(void)",
          "95: {",
          "",
          "[Removed Lines]",
          "63: static void i915_globals_shrink(void)",
          "64: {",
          "65:  struct i915_global *global;",
          "72:  list_for_each_entry(global, &globals, link)",
          "73:   global->shrink();",
          "74: }",
          "76: static atomic_t active;",
          "77: static atomic_t epoch;",
          "78: struct park_work {",
          "79:  struct rcu_work work;",
          "80:  int epoch;",
          "81: };",
          "83: static void __i915_globals_park(struct work_struct *work)",
          "84: {",
          "85:  struct park_work *wrk = container_of(work, typeof(*wrk), work.work);",
          "88:  if (wrk->epoch == atomic_read(&epoch))",
          "89:   i915_globals_shrink();",
          "91:  kfree(wrk);",
          "92: }",
          "96:  struct park_work *wrk;",
          "",
          "[Added Lines]",
          "87:  INIT_RCU_WORK(&park.work, __i915_globals_park);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:  if (!atomic_dec_and_test(&active))",
          "108:   return;",
          "117: }",
          "119: void i915_globals_unpark(void)",
          "",
          "[Removed Lines]",
          "110:  wrk = kmalloc(sizeof(*wrk), GFP_KERNEL);",
          "111:  if (!wrk)",
          "112:   return;",
          "114:  wrk->epoch = atomic_inc_return(&epoch);",
          "115:  INIT_RCU_WORK(&wrk->work, __i915_globals_park);",
          "116:  queue_rcu_work(system_wq, &wrk->work);",
          "",
          "[Added Lines]",
          "105:  park.epoch = atomic_inc_return(&epoch);",
          "106:  queue_rcu_work(system_wq, &park.work);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125: void __exit i915_globals_exit(void)",
          "126: {",
          "131:  __i915_globals_cleanup();",
          "",
          "[Removed Lines]",
          "128:  rcu_barrier();",
          "129:  flush_scheduled_work();",
          "",
          "[Added Lines]",
          "118:  atomic_inc(&epoch);",
          "119:  flush_rcu_work(&park.work);",
          "",
          "---------------"
        ]
      }
    }
  ]
}