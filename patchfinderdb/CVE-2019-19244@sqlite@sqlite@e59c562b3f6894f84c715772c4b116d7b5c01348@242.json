{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "19d9a3ca6ce3d0f8ee0d6c249faf4e972af47e00",
      "candidate_info": {
        "commit_hash": "19d9a3ca6ce3d0f8ee0d6c249faf4e972af47e00",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/19d9a3ca6ce3d0f8ee0d6c249faf4e972af47e00",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/vtab1.test",
          "test/without_rowid1.test",
          "test/without_rowid6.test"
        ],
        "message": "New test cases for PRAGMA index_xinfo on a WITHOUT ROWID table.  And new testcases using index_xinfo to verify that WITHOUT ROWID tables are constructed correctly.\n\nFossilOrigin-Name: 340378c1e60da80263523776f4b6366a9d332a7ee25986637e8b157f4e8e4bd3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/vtab1.test||test/vtab1.test",
          "test/without_rowid1.test||test/without_rowid1.test",
          "test/without_rowid6.test||test/without_rowid6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 62274ff683ba077d8b0fa34ad653ce235a8c5cbfdb7ab8558469af7333d03698",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/vtab1.test||test/vtab1.test": [
          "File: test/vtab1.test -> test/vtab1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "875:   }",
          "876: } {}",
          "878: ifcapable attach {",
          "879:   do_test vtab1.8-1 {",
          "880:     set echo_module \"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "878: # PRAGMA index_info and index_xinfo are no-ops on a virtual table",
          "879: do_test vtab1.7-14 {",
          "880:   execsql {",
          "881:     PRAGMA index_info('echo_abc');",
          "882:     PRAGMA index_xinfo('echo_abc');",
          "883:   }",
          "884: } {}",
          "",
          "---------------"
        ],
        "test/without_rowid1.test||test/without_rowid1.test": [
          "File: test/without_rowid1.test -> test/without_rowid1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: integrity_check without_rowid1-1.0ic",
          "34: do_execsql_test without_rowid1-1.1 {",
          "35:   SELECT *, '|' FROM t1 ORDER BY +c, a;",
          "36: } {arctic sleep ammonia helena | journal sherman ammonia helena | dynamic juliet flipper command | journal sherman gamma patriot |}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: do_execsql_test without_rowid1-1.0ixi {",
          "35:   SELECT name, key FROM pragma_index_xinfo('t1');",
          "36: } {c 1 a 1 b 0 d 0}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:   UPDATE t4 SET a = 'ABC';",
          "121:   SELECT * FROM t4;",
          "122: } {ABC def}",
          "124: do_execsql_test 2.2.1 {",
          "125:   DROP TABLE t4;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127: do_execsql_test 2.1.3 {",
          "128:   SELECT name, coll, key FROM pragma_index_xinfo('t4');",
          "129: } {a nocase 1 b BINARY 0}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:   SELECT * FROM t4;",
          "134: } {xyz ABC}",
          "136: do_execsql_test 2.3.1 {",
          "137:   CREATE TABLE t5 (a, b, PRIMARY KEY(b, a)) WITHOUT ROWID;",
          "138:   INSERT INTO t5(a, b) VALUES('abc', 'def');",
          "139:   UPDATE t5 SET a='abc', b='def';",
          "140: } {}",
          "142: do_execsql_test 2.4.1 {",
          "143:   CREATE TABLE t6 (",
          "144:     a COLLATE nocase, b, c UNIQUE, PRIMARY KEY(b, a)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143: do_execsql_test 2.2.3 {",
          "144:   SELECT name, coll, key FROM pragma_index_xinfo('t4');",
          "145: } {a nocase 1 b BINARY 0}",
          "154: do_execsql_test 2.3.2 {",
          "155:   SELECT name, coll, key FROM pragma_index_xinfo('t5');",
          "156: } {b BINARY 1 a BINARY 1}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "153:   SELECT * FROM t6 ORDER BY c;",
          "154: } {ABC def ghi ABC def ghi}",
          "156: #-------------------------------------------------------------------------",
          "157: # Unless the destination table is completely empty, the xfer optimization",
          "158: # is disabled for WITHOUT ROWID tables. The following tests check for",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173: do_execsql_test 2.4.3 {",
          "174:   SELECT name, coll, key FROM pragma_index_xinfo('t6');",
          "175: } {b BINARY 1 a nocase 1 c BINARY 0}",
          "",
          "---------------"
        ],
        "test/without_rowid6.test||test/without_rowid6.test": [
          "File: test/without_rowid6.test -> test/without_rowid6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:   INSERT INTO t1(a,b,c,d,e) SELECT i, i+1000, printf('x%dy',i), 0, 0 FROM c;",
          "25:   ANALYZE;",
          "26: } {}",
          "27: do_execsql_test without_rowid6-110 {",
          "28:   SELECT c FROM t1 WHERE a=123;",
          "29: } {x123y}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: do_execsql_test without_rowid6-101 {",
          "28:   SELECT name, key FROM pragma_index_xinfo('t1');",
          "29: } {a 1 b 1 c 1 d 1 e 0}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:   INSERT INTO t1(a,b,c) VALUES(1,8,3),(4,5,6),(7,2,9);",
          "52:   SELECT a FROM t1 WHERE b>3 ORDER BY b;",
          "53: } {4 1}",
          "54: do_execsql_test without_rowid6-210 {",
          "55:   EXPLAIN QUERY PLAN",
          "56:   SELECT a FROM t1 WHERE b>3 ORDER BY b;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: do_execsql_test without_rowid6-201 {",
          "58:   SELECT name, key FROM pragma_index_xinfo('t1');",
          "59: } {b 1 a 0 c 0}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:   INSERT INTO t1(a,b,c) VALUES(1,8,3),(4,5,6),(7,2,9);",
          "106:   SELECT a FROM t1 WHERE b>3 ORDER BY b;",
          "107: } {4 1}",
          "108: do_execsql_test without_rowid6-510 {",
          "109:   EXPLAIN QUERY PLAN",
          "110:   SELECT a FROM t1 WHERE b>3 ORDER BY b;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114: do_execsql_test without_rowid6-501 {",
          "115:   SELECT name, key FROM pragma_index_xinfo('t1');",
          "116: } {b 1 c 1 a 0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8cc8b30b4421ae22f2e63cea68f0d9e1440920a",
      "candidate_info": {
        "commit_hash": "d8cc8b30b4421ae22f2e63cea68f0d9e1440920a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d8cc8b30b4421ae22f2e63cea68f0d9e1440920a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzcheck.c"
        ],
        "message": "Fix a bug in fuzzcheck that cause it to overlook a pointer-map bug that was trigger by the fuzzcheck test data, and also fix the pointer-map bug.\n\nFossilOrigin-Name: cc42dd15100db28a9796254f69a4e367ea5eae29f546be055017cf3e12aa66ba",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 18740bd448887d618fafee0b5a7c004aa2f2632244f7d29e2428772baa36b828",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "993:     return;",
          "994:   }",
          "995:   offset = PTRMAP_PTROFFSET(iPtrmap, key);",
          "996:   if( offset<0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "995:   if( ((char*)sqlite3PagerGetExtra(pDbPage))[0]!=0 ){",
          "1000:     goto ptrmap_exit;",
          "1001:   }",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "447:   if( iOfst+iAmt>pVFile->sz ){",
          "448:     memset(pData, 0, iAmt);",
          "449:     iAmt = (int)(pVFile->sz - iOfst);",
          "451:     return SQLITE_IOERR_SHORT_READ;",
          "452:   }",
          "453:   memcpy(pData, pVFile->a + iOfst, iAmt);",
          "",
          "[Removed Lines]",
          "450:     memcpy(pData, pVFile->a, iAmt);",
          "",
          "[Added Lines]",
          "450:     memcpy(pData, pVFile->a + iOfst, iAmt);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "829d4253ffa2e0bb5cc6ca37f0bf5053fd8db930",
      "candidate_info": {
        "commit_hash": "829d4253ffa2e0bb5cc6ca37f0bf5053fd8db930",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/829d4253ffa2e0bb5cc6ca37f0bf5053fd8db930",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata7.db"
        ],
        "message": "Add test cases to test/fuzzdata7.db for (harmless) dbfuzz2 finds.\n\nFossilOrigin-Name: 1eb2a628e4bfae51fea43e8f40fedfe23f2118024d9cce35828c3cbe92a9b392",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4b05caeb1b9767ba58cb4261ecc22cdd495216b3258d45f2165cdbd3ea079495",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dfcecdfea8e0c4260109a38bb0f5d14b4b8cc9ca",
      "candidate_info": {
        "commit_hash": "dfcecdfea8e0c4260109a38bb0f5d14b4b8cc9ca",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dfcecdfea8e0c4260109a38bb0f5d14b4b8cc9ca",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata7.db"
        ],
        "message": "Earlier detections of errors in the byte-offset-to-cell-content integer at offset 5 in the header of a btree page.\n\nFossilOrigin-Name: a0819086a521fb0ca4ffd12f959b168a89ea2e30a2844bbbd39831b2b9ecf29b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3c75605b4652ae88659465d832953ac9d467369f9cb417f73b3d8599ec60b18b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1630:   top = get2byte(&data[hdr+5]);",
          "1632:   if( gap>top ){",
          "1634:       top = 65536;",
          "1635:     }else{",
          "1636:       return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "[Removed Lines]",
          "1633:     if( top==0 && pPage->pBt->usableSize==65536 ){",
          "",
          "[Added Lines]",
          "1633:     if( top==0 && ALWAYS(pPage->pBt->usableSize==65536) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1929:     return SQLITE_CORRUPT_PAGE(pPage);",
          "1930:   }",
          "1931:   pPage->nFree = (u16)(nFree - iCellFirst);",
          "",
          "[Removed Lines]",
          "1928:   if( nFree>usableSize ){",
          "",
          "[Added Lines]",
          "1928:   if( nFree>usableSize || nFree<iCellFirst ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8068:     assert( sz<=pBt->maxLocal+23 );",
          "8069:     assert( iOvflSpace <= (int)pBt->pageSize );",
          "8070:     insertCell(pParent, nxDiv+i, pCell, sz, pTemp, pNew->pgno, &rc);",
          "8072:     assert( sqlite3PagerIswriteable(pParent->pDbPage) );",
          "8073:   }",
          "",
          "[Removed Lines]",
          "8071:     if( rc!=SQLITE_OK ) goto balance_cleanup;",
          "",
          "[Added Lines]",
          "8071:     if( NEVER(rc!=SQLITE_OK) ) goto balance_cleanup;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "229ae1ae72d3693e675703be2b986f62fb536cb1",
      "candidate_info": {
        "commit_hash": "229ae1ae72d3693e675703be2b986f62fb536cb1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/229ae1ae72d3693e675703be2b986f62fb536cb1",
        "files": [
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a potential crash in fts5 caused by using an auxiliary function on a \"special\" query like '*id' or '*reads'.\n\nFossilOrigin-Name: 9490683ae883561fa347cbe54ebdd61188d849b4852d904b508250ba5d0807ef",
        "before_after_code_files": [
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "988:   assert( pTab->p.base.zErrMsg==0 );",
          "989:   pCsr->ePlan = FTS5_PLAN_SPECIAL;",
          "992:     pCsr->iSpecial = sqlite3Fts5IndexReads(pTab->p.pIndex);",
          "993:   }",
          "995:     pCsr->iSpecial = pCsr->iCsrId;",
          "996:   }",
          "997:   else{",
          "",
          "[Removed Lines]",
          "991:   if( 0==sqlite3_strnicmp(\"reads\", z, n) ){",
          "994:   else if( 0==sqlite3_strnicmp(\"id\", z, n) ){",
          "",
          "[Added Lines]",
          "991:   if( n==5 && 0==sqlite3_strnicmp(\"reads\", z, n) ){",
          "994:   else if( n==2 && 0==sqlite3_strnicmp(\"id\", z, n) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2239:   iCsrId = sqlite3_value_int64(argv[0]);",
          "2241:   pCsr = fts5CursorFromCsrid(pAux->pGlobal, iCsrId);",
          "2243:     char *zErr = sqlite3_mprintf(\"no such cursor: %lld\", iCsrId);",
          "2244:     sqlite3_result_error(context, zErr, -1);",
          "2245:     sqlite3_free(zErr);",
          "",
          "[Removed Lines]",
          "2242:   if( pCsr==0 ){",
          "",
          "[Added Lines]",
          "2242:   if( pCsr==0 || pCsr->ePlan==0 ){",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 September 02",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS5 module.",
          "13: #",
          "15: source [file join [file dirname [info script]] fts5_common.tcl]",
          "16: set testprefix fts5misc",
          "18: # If SQLITE_ENABLE_FTS5 is not defined, omit this file.",
          "19: ifcapable !fts5 {",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: do_execsql_test 1.0 {",
          "25:   CREATE VIRTUAL TABLE t1 USING fts5(a);",
          "26: }",
          "28: do_catchsql_test 1.1.1 {",
          "29:   SELECT highlight(t1, 4, '<b>', '</b>') FROM t1('*');",
          "30: } {1 {unknown special query: }}",
          "31: do_catchsql_test 1.1.2 {",
          "32:   SELECT a FROM t1",
          "33:     WHERE rank = (SELECT highlight(t1, 4, '<b>', '</b>') FROM t1('*'));",
          "34: } {1 {unknown special query: }}",
          "36: do_catchsql_test 1.2.1 {",
          "37:   SELECT highlight(t1, 4, '<b>', '</b>') FROM t1('*id');",
          "38: } {0 {{}}}",
          "40: do_catchsql_test 1.2.2 {",
          "41:   SELECT a FROM t1",
          "42:     WHERE rank = (SELECT highlight(t1, 4, '<b>', '</b>') FROM t1('*id'));",
          "43: } {0 {}}",
          "45: do_catchsql_test 1.3.1 {",
          "46:   SELECT highlight(t1, 4, '<b>', '</b>') FROM t1('*reads');",
          "47: } {1 {no such cursor: 1}}",
          "49: do_catchsql_test 1.3.2 {",
          "50:   SELECT a FROM t1",
          "51:     WHERE rank = (SELECT highlight(t1, 4, '<b>', '</b>') FROM t1('*reads'));",
          "52: } {1 {no such cursor: 1}}",
          "54: db close",
          "55: sqlite3 db test.db",
          "57: do_catchsql_test 1.3.3 {",
          "58:   SELECT a FROM t1",
          "59:     WHERE rank = (SELECT highlight(t1, 4, '<b>', '</b>') FROM t1('*reads'));",
          "60: } {1 {no such cursor: 1}}",
          "62: finish_test",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 88833a9c2849c959a37a80e0e4d2b211ce3c83a48319724c89b172b060c876b4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}