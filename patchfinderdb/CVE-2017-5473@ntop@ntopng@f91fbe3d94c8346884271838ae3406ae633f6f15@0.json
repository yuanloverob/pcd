{
  "cve_id": "CVE-2017-5473",
  "cve_desc": "Cross-site request forgery (CSRF) vulnerability in ntopng through 2.4 allows remote attackers to hijack the authentication of arbitrary users, as demonstrated by admin/add_user.lua, admin/change_user_prefs.lua, admin/delete_user.lua, and admin/password_reset.lua.",
  "repo": "ntop/ntopng",
  "patch_hash": "f91fbe3d94c8346884271838ae3406ae633f6f15",
  "patch_info": {
    "commit_hash": "f91fbe3d94c8346884271838ae3406ae633f6f15",
    "repo": "ntop/ntopng",
    "commit_url": "https://github.com/ntop/ntopng/commit/f91fbe3d94c8346884271838ae3406ae633f6f15",
    "files": [
      "src/Lua.cpp"
    ],
    "message": "Check for presence of crsf in admin scripts",
    "before_after_code_files": [
      "src/Lua.cpp||src/Lua.cpp"
    ]
  },
  "patch_diff": {
    "src/Lua.cpp||src/Lua.cpp": [
      "File: src/Lua.cpp -> src/Lua.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "5680:   char *_cookies, user[64] = { '\\0' }, outbuf[FILENAME_MAX];",
      "5681:   AddressTree ptree;",
      "5682:   int rc;",
      "5684:   if(!L) return(-1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5683:   bool csrf_found = false;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5759:         msg, PAGE_ERROR, query_string, msg));",
      "5760:   } else",
      "5761:     ntop->getRedis()->delKey(decoded_buf);",
      "5762:        }",
      "5764:        lua_push_str_table_entry(L, tok, decoded_buf);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5764:   csrf_found = true;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "5777:     } else",
      "5778:       ntop->getTrace()->traceEvent(TRACE_WARNING, \"Not enough memory\");",
      "5779:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5784:   if(strstr(request_info->uri, \"/admin/\") && (!csrf_found)) {",
      "5785:     const char *msg = \"Missing CSRF parameter\";",
      "5787:     return(send_error(conn, 500 /* Internal server error */, msg, PAGE_ERROR, request_info->uri, msg));",
      "5788:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "87212ac1c16e17c7b9de3b53eb77c89969cb6b18",
      "candidate_info": {
        "commit_hash": "87212ac1c16e17c7b9de3b53eb77c89969cb6b18",
        "repo": "ntop/ntopng",
        "commit_url": "https://github.com/ntop/ntopng/commit/87212ac1c16e17c7b9de3b53eb77c89969cb6b18",
        "files": [
          "scripts/lua/host_details_ndpi.lua",
          "src/Lua.cpp"
        ],
        "message": "Security fix (uri params cleanup for POST requests)",
        "before_after_code_files": [
          "scripts/luhost_details_ndpi.lua||scripts/lua/host_details_ndpi.lua",
          "src/Lua.cpp||src/Lua.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Lua.cpp||src/Lua.cpp"
          ],
          "candidate": [
            "src/Lua.cpp||src/Lua.cpp"
          ]
        }
      },
      "candidate_diff": {
        "scripts/luhost_details_ndpi.lua||scripts/lua/host_details_ndpi.lua": [
          "File: scripts/luhost_details_ndpi.lua -> scripts/lua/host_details_ndpi.lua",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: print(\"<li>An icon like <i class=\\\"fa fa-warning fa-sm\\\" style=\\\"color: orange;\\\"></i> indicates a possible probing (or application server down) alert as the host has received traffic for a specific application protocol without sending back any data. You can use <A HREF=\\\"\"..ntop.getHttpPrefix()..\"/lua/host_details.lua?ifname=\"..ifid..\"&host=\".._GET[\"host\"]..\"&page=historical\\\">historical reports</A> to drill-down this issue.\")",
          "",
          "---------------"
        ],
        "src/Lua.cpp||src/Lua.cpp": [
          "File: src/Lua.cpp -> src/Lua.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5881:     tok = strtok_r(query_string, \"&\", &where);",
          "5883:     while(tok != NULL) {",
          "5888:  char *decoded_buf;",
          "5889:         int len;",
          "",
          "[Removed Lines]",
          "5885:       char *_equal = strchr(tok, '=');",
          "5887:       if(_equal) {",
          "",
          "[Added Lines]",
          "5884:       char *_equal;",
          "5887:   && (_equal = strchr(tok, '='))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5925:           free(decoded_buf);",
          "5926:         } else",
          "",
          "[Removed Lines]",
          "5921:    if(strcmp(tok, \"csrf\") != 0)",
          "5922:      lua_push_str_table_entry(vm, tok, decoded_buf);",
          "",
          "[Added Lines]",
          "5921:    lua_push_str_table_entry(vm, tok, decoded_buf);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5977:     mg_get_cookie(conn, \"user\", user, sizeof(user));",
          "5979:     if((ntop->getRedis()->get(csrf, rsp, sizeof(rsp)) == -1)",
          "5981: #if 0",
          "5982:       const char *msg = \"The submitted form is expired. Please reload the page and try again. <p>[ <A HREF=/>Home</A> ]\";",
          "",
          "[Removed Lines]",
          "5980:         || (strcmp(rsp, user) != 0)) {",
          "",
          "[Added Lines]",
          "5978:        || (strcmp(rsp, user) != 0)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5995:       ntop->getRedis()->del(csrf);",
          "5996:     }",
          "6029:     setParamsTable(L, \"_POST\", NULL /* Empty */);",
          "6032:     setParamsTable(L, \"_GET\", request_info->query_string);",
          "6036:   lua_newtable(L);",
          "",
          "[Removed Lines]",
          "5998:     if(valid_csrf) {",
          "6000:       setParamsTable(L, \"_POST\", post_data);",
          "6001:     } else {",
          "6002:       lua_newtable(L);",
          "6004:     }",
          "6006:     if(request_info->query_string) {",
          "6007:       char *k, *t1;",
          "6009:       lua_newtable(L);",
          "6011:       k = strtok_r((char*)request_info->query_string, \"&\", &t1);",
          "6012:       while(k != NULL) {",
          "6013:  char *a, *b, *t2;",
          "6015:  if((a = strtok_r(k, \"=\", &t2)) != NULL) {",
          "6016:    b = strtok_r(NULL, \"=\", &t2);",
          "6018:    if(b) lua_push_str_table_entry(L, a, b);",
          "6020:  }",
          "6022:  k = strtok_r(NULL, \"&\", &t1);",
          "6023:       }",
          "6025:       lua_setglobal(L, (char*)\"_GET\");",
          "6026:     } else",
          "6027:       setParamsTable(L, \"_GET\", NULL /* Empty */);",
          "6028:   } else {",
          "6033:   }",
          "",
          "[Added Lines]",
          "5996:     if(valid_csrf)",
          "5998:     else",
          "5999:       setParamsTable(L, \"_POST\", NULL /* Empty */);",
          "6000:   } else",
          "6004:   if(request_info->query_string)",
          "6006:   else",
          "6007:     setParamsTable(L, \"_GET\", NULL /* Empty */);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7394d8f688102291c906e00a8cd428a7ce7398d",
      "candidate_info": {
        "commit_hash": "d7394d8f688102291c906e00a8cd428a7ce7398d",
        "repo": "ntop/ntopng",
        "commit_url": "https://github.com/ntop/ntopng/commit/d7394d8f688102291c906e00a8cd428a7ce7398d",
        "files": [
          "scripts/lua/admin/prefs.lua",
          "src/Lua.cpp"
        ],
        "message": "Simulated _GET even when _POST is used Fixed parameter reload issue on preferences",
        "before_after_code_files": [
          "scripts/lua/admin/prefs.lua||scripts/lua/admin/prefs.lua",
          "src/Lua.cpp||src/Lua.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Lua.cpp||src/Lua.cpp"
          ],
          "candidate": [
            "src/Lua.cpp||src/Lua.cpp"
          ]
        }
      },
      "candidate_diff": {
        "scripts/lua/admin/prefs.lua||scripts/lua/admin/prefs.lua": [
          "File: scripts/lua/admin/prefs.lua -> scripts/lua/admin/prefs.lua",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:      <h2>Runtime Preferences</h2>",
          "32:       ]]",
          "58: if(info[\"version.enterprise_edition\"]) then",
          "59:    table.insert(menu_subpages, {id=\"bridging\",          label=\"Traffic Bridging\",     advanced=false,  pro_only=true,   disabled=false})",
          "",
          "[Removed Lines]",
          "34: subpage_active = _GET[\"subpage_active\"]",
          "36: if toboolean(_POST[\"show_advanced_prefs\"]) ~= nil then",
          "37:   ntop.setPref(show_advanced_prefs_key, _POST[\"show_advanced_prefs\"])",
          "38:   show_advanced_prefs = toboolean(_POST[\"show_advanced_prefs\"])",
          "39:   notifyNtopng(show_advanced_prefs_key, _POST[\"show_advanced_prefs\"])",
          "40: else",
          "41:    show_advanced_prefs = toboolean(ntop.getPref(show_advanced_prefs_key))",
          "42:   if isEmptyString(show_advanced_prefs) then show_advanced_prefs = false end",
          "43: end",
          "45: local menu_subpages = {",
          "46:   {id=\"users\",         label=\"Users\",                advanced=false, pro_only=false,  disabled=false},",
          "47:   {id=\"ifaces\",        label=\"Network Interfaces\",   advanced=true,  pro_only=false,  disabled=false},",
          "48:   {id=\"in_memory\",     label=\"In-Memory Data\",       advanced=true,  pro_only=false,  disabled=false},",
          "49:   {id=\"on_disk_rrds\",  label=\"On-Disk Timeseries\",   advanced=false, pro_only=false,  disabled=false},",
          "50:   {id=\"on_disk_dbs\",   label=\"On-Disk Databases\",    advanced=true,  pro_only=false,  disabled=false},",
          "51:   {id=\"alerts\",        label=\"Alerts\",               advanced=false, pro_only=false,  disabled=(prefs.has_cmdl_disable_alerts == true)},",
          "52:   {id=\"protocols\",     label=\"Protocols\",            advanced=false, pro_only=false,  disabled=false},",
          "53:   {id=\"report\",        label=\"Units of Measurement\", advanced=false, pro_only=false,  disabled=false},",
          "54:   {id=\"logging\",       label=\"Log Level\",            advanced=false, pro_only=false,  disabled=(prefs.has_cmdl_trace_lvl == true)},",
          "55:   {id=\"nbox\",          label=\"nBox Integration\",     advanced=true,  pro_only=true,   disabled=false},",
          "56: }",
          "",
          "[Added Lines]",
          "34:    if(false) then",
          "35:       io.write(\"------- SERVER ----------------\\n\")",
          "36:       tprint(_SERVER)",
          "37:       io.write(\"-------- GET ---------------\\n\")",
          "38:       tprint(_GET)",
          "39:       io.write(\"-------- POST ---------------\\n\")",
          "40:       tprint(_POST)",
          "41:       io.write(\"-----------------------\\n\")",
          "42:    end",
          "44:    subpage_active = _GET[\"subpage_active\"]",
          "47:    if toboolean(_POST[\"show_advanced_prefs\"]) ~= nil then",
          "48:       ntop.setPref(show_advanced_prefs_key, _POST[\"show_advanced_prefs\"])",
          "49:       show_advanced_prefs = toboolean(_POST[\"show_advanced_prefs\"])",
          "50:       notifyNtopng(show_advanced_prefs_key, _POST[\"show_advanced_prefs\"])",
          "51:    else",
          "52:       show_advanced_prefs = toboolean(ntop.getPref(show_advanced_prefs_key))",
          "53:       if isEmptyString(show_advanced_prefs) then show_advanced_prefs = false end",
          "54:    end",
          "56:    local menu_subpages = {",
          "57:       {id=\"users\",         label=\"Users\",                advanced=false, pro_only=false,  disabled=false},",
          "58:       {id=\"ifaces\",        label=\"Network Interfaces\",   advanced=true,  pro_only=false,  disabled=false},",
          "59:       {id=\"in_memory\",     label=\"In-Memory Data\",       advanced=true,  pro_only=false,  disabled=false},",
          "60:       {id=\"on_disk_rrds\",  label=\"On-Disk Timeseries\",   advanced=false, pro_only=false,  disabled=false},",
          "61:       {id=\"on_disk_dbs\",   label=\"On-Disk Databases\",    advanced=true,  pro_only=false,  disabled=false},",
          "62:       {id=\"alerts\",        label=\"Alerts\",               advanced=false, pro_only=false,  disabled=(prefs.has_cmdl_disable_alerts == true)},",
          "63:       {id=\"protocols\",     label=\"Protocols\",            advanced=false, pro_only=false,  disabled=false},",
          "64:       {id=\"report\",        label=\"Units of Measurement\", advanced=false, pro_only=false,  disabled=false},",
          "65:       {id=\"logging\",       label=\"Log Level\",            advanced=false, pro_only=false,  disabled=(prefs.has_cmdl_trace_lvl == true)},",
          "66:       {id=\"nbox\",          label=\"nBox Integration\",     advanced=true,  pro_only=true,   disabled=false},",
          "67:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "746: $(\"form[id!='search-host-form']\").validator({disable:true});",
          "747: </script>]])",
          "751:   ntop.reloadPreferences()",
          "752: end",
          "754: if(_POST[\"toggle_malware_probing\"] ~= nil) then",
          "",
          "[Removed Lines]",
          "749: if(_POST[\"disable_alerts_generation\"] ~= nil) then",
          "750:   -- Check if we navigate the page or if we have set something",
          "",
          "[Added Lines]",
          "760: if(_SERVER[\"REQUEST_METHOD\"] == \"POST\") then",
          "761:    -- Something has changed",
          "763:   io.write(\"$$$$$$$$$$$ RELOAD $$$$$$$$$$$\")",
          "",
          "---------------"
        ],
        "src/Lua.cpp||src/Lua.cpp": [
          "File: src/Lua.cpp -> src/Lua.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5894:     if((ntop->getRedis()->get(csrf, rsp, sizeof(rsp)) == -1)",
          "5895:         || (strcmp(rsp, user) != 0)) {",
          "5898:       ntop->getTrace()->traceEvent(TRACE_WARNING,",
          "5899:           \"Invalid CSRF parameter specified [%s][%s][%s][%s]: page expired?\",",
          "",
          "[Removed Lines]",
          "5896:       const char *msg = \"The submitted form is expired. Please reload the page and try again\";",
          "",
          "[Added Lines]",
          "5894:       const char *msg = \"The submitted form is expired. Please reload the page and try again. <p>[ <A HREF=/>Home</A> ]\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5910:     setParamsTable(L, \"_POST\", post_data);",
          "5912:     setParamsTable(L, \"_POST\", NULL /* Empty */);",
          "5917:   lua_newtable(L);",
          "5919:     lua_push_str_table_entry(L,",
          "5920:         request_info->http_headers[i].name,",
          "5922:   lua_setglobal(L, (char*)\"_SERVER\");",
          "5932:   lua_newtable(L);",
          "5933:   if((_cookies = (char*)mg_get_header(conn, \"Cookie\")) != NULL) {",
          "",
          "[Removed Lines]",
          "5911:   } else",
          "5915:   setParamsTable(L, \"_GET\", request_info->query_string);",
          "5918:   for(int i=0; request_info->http_headers[i].name != NULL; i++)",
          "5921:         (char*)request_info->http_headers[i].value);",
          "5925:   lua_newtable(L);",
          "5926:   lua_push_str_table_entry(L, \"HTTP_REFERER\", (char*)mg_get_header(conn, \"Referer\"));",
          "5927:   lua_push_str_table_entry(L, \"HTTP_USER_AGENT\", (char*)mg_get_header(conn, \"User-Agent\"));",
          "5928:   lua_push_str_table_entry(L, \"SERVER_NAME\", (char*)mg_get_header(conn, \"Host\"));",
          "",
          "[Added Lines]",
          "5910:     if(request_info->query_string) {",
          "5911:       char *k, *t1;",
          "5913:       lua_newtable(L);",
          "5915:       k = strtok_r((char*)request_info->query_string, \"&\", &t1);",
          "5916:       while(k != NULL) {",
          "5917:  char *a, *b, *t2;",
          "5919:  if((a = strtok_r(k, \"=\", &t2)) != NULL) {",
          "5920:    b = strtok_r(NULL, \"=\", &t2);",
          "5922:    if(b) lua_push_str_table_entry(L, a, b);",
          "5924:  }",
          "5926:  k = strtok_r(NULL, \"&\", &t1);",
          "5927:       }",
          "5929:       lua_setglobal(L, (char*)\"_GET\");",
          "5930:     } else",
          "5931:       setParamsTable(L, \"_GET\", NULL /* Empty */);",
          "5932:   } else {",
          "5936:     setParamsTable(L, \"_GET\", request_info->query_string);",
          "5937:   }",
          "5941:   lua_push_str_table_entry(L, \"REQUEST_METHOD\", (char*)request_info->request_method);",
          "5942:   lua_push_str_table_entry(L, \"URI\", (char*)request_info->uri);",
          "5943:   if(request_info->remote_user)  lua_push_str_table_entry(L, \"REMOTE_USER\", (char*)request_info->remote_user);",
          "5944:   if(request_info->query_string) lua_push_str_table_entry(L, \"QUERY_STRING\", (char*)request_info->query_string);",
          "5946:   for(int i=0; ((request_info->http_headers[i].name != NULL)",
          "5947:   && request_info->http_headers[i].name[0] != '\\0'); i++)",
          "5950:         (char*)request_info->http_headers[i].value);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ada218c00e640734d0df79d6fbf0d84c00a03ec4",
      "candidate_info": {
        "commit_hash": "ada218c00e640734d0df79d6fbf0d84c00a03ec4",
        "repo": "ntop/ntopng",
        "commit_url": "https://github.com/ntop/ntopng/commit/ada218c00e640734d0df79d6fbf0d84c00a03ec4",
        "files": [
          "scripts/lua/modules/lua_utils.lua",
          "src/Lua.cpp"
        ],
        "message": "Fixed possible undefined interface name If CSRF has been validated, valid_csrf is now put on _GET",
        "before_after_code_files": [
          "scripts/lua/modules/lua_utils.lua||scripts/lua/modules/lua_utils.lua",
          "src/Lua.cpp||src/Lua.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Lua.cpp||src/Lua.cpp"
          ],
          "candidate": [
            "src/Lua.cpp||src/Lua.cpp"
          ]
        }
      },
      "candidate_diff": {
        "scripts/lua/modules/lua_utils.lua||scripts/lua/modules/lua_utils.lua": [
          "File: scripts/lua/modules/lua_utils.lua -> scripts/lua/modules/lua_utils.lua",
          "--- Hunk 1 ---",
          "[Context before]",
          "1624: function getInterfaceNameAlias(interface_name)",
          "1625:    -- io.write(debug.traceback()..\"\\n\")",
          "1626:    label = ntop.getCache('ntopng.prefs.'..interface_name..'.name')",
          "1627:    if((label == nil) or (label == \"\")) then",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1625:    if(interface_name == nil) then return(\"\") end",
          "",
          "---------------"
        ],
        "src/Lua.cpp||src/Lua.cpp": [
          "File: src/Lua.cpp -> src/Lua.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5781:       ntop->getTrace()->traceEvent(TRACE_WARNING, \"Not enough memory\");",
          "5782:   }",
          "",
          "[Removed Lines]",
          "5784:   if(strstr(request_info->uri, \"/admin/\") && (!csrf_found)) {",
          "5785:     const char *msg = \"Missing CSRF parameter\";",
          "5787:     return(send_error(conn, 500 /* Internal server error */, msg, PAGE_ERROR, request_info->uri, msg));",
          "5788:   }",
          "",
          "[Added Lines]",
          "5784:   lua_push_bool_table_entry(L, \"valid_csrf\", csrf_found);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "910fdcdc4ac51a9401eb3051fd51a3c619a1cc6d",
      "candidate_info": {
        "commit_hash": "910fdcdc4ac51a9401eb3051fd51a3c619a1cc6d",
        "repo": "ntop/ntopng",
        "commit_url": "https://github.com/ntop/ntopng/commit/910fdcdc4ac51a9401eb3051fd51a3c619a1cc6d",
        "files": [
          "src/Lua.cpp"
        ],
        "message": "Add support for POST parameters and make CSRF mandatory for them",
        "before_after_code_files": [
          "src/Lua.cpp||src/Lua.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Lua.cpp||src/Lua.cpp"
          ],
          "candidate": [
            "src/Lua.cpp||src/Lua.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/Lua.cpp||src/Lua.cpp": [
          "File: src/Lua.cpp -> src/Lua.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5671:   }",
          "5672: }",
          "5782:   }",
          "",
          "[Removed Lines]",
          "5676: int Lua::handle_script_request(struct mg_connection *conn,",
          "5677:           const struct mg_request_info *request_info,",
          "5678:           char *script_path) {",
          "5679:   char buf[64], key[64], ifname[MAX_INTERFACE_NAME_LEN];",
          "5680:   char *_cookies, user[64] = { '\\0' }, outbuf[FILENAME_MAX];",
          "5681:   AddressTree ptree;",
          "5682:   int rc;",
          "5683:   bool csrf_found = false;",
          "5685:   if(!L) return(-1);",
          "5690:   lua_pushlightuserdata(L, (char*)conn);",
          "5691:   lua_setglobal(L, CONST_HTTP_CONN);",
          "5694:   lua_newtable(L);",
          "5695:   if(request_info->query_string != NULL) {",
          "5696:     char *query_string = strdup(request_info->query_string);",
          "5698:     if(query_string) {",
          "5699:       char *where;",
          "5700:       char *tok;",
          "5704:       tok = strtok_r(query_string, \"&\", &where);",
          "5706:       while(tok != NULL) {",
          "5708:  char *_equal = strchr(tok, '=');",
          "5710:  if(_equal) {",
          "5711:    char *equal;",
          "5712:    int len;",
          "5714:    _equal[0] = '\\0';",
          "5715:    _equal = &_equal[1];",
          "5716:    len = strlen(_equal);",
          "5718:    purifyHTTPParameter(tok), purifyHTTPParameter(_equal);",
          "5722:    if((equal = (char*)malloc(len+1)) != NULL) {",
          "5723:      char *decoded_buf;",
          "5725:      Utils::urlDecode(_equal, equal, len+1);",
          "5727:      if((decoded_buf = http_decode(equal)) != NULL) {",
          "5728:        FILE *fd;",
          "5730:        Utils::purifyHTTPparam(tok, true, false);",
          "5731:        Utils::purifyHTTPparam(decoded_buf, false, false);",
          "5734:        if((decoded_buf[0] == '.')",
          "5735:    && ((fd = fopen(decoded_buf, \"r\"))",
          "5736:        || (fd = fopen(realpath(decoded_buf, outbuf), \"r\")))) {",
          "5737:   ntop->getTrace()->traceEvent(TRACE_WARNING, \"Discarded '%s'='%s' as argument is a valid file path\",",
          "5738:           tok, decoded_buf);",
          "5740:   decoded_buf[0] = '\\0';",
          "5741:   fclose(fd);",
          "5742:        }",
          "5746:        if(strcmp(tok, \"csrf\") == 0) {",
          "5747:   char rsp[32], user[64] = { '\\0' };",
          "5749:   mg_get_cookie(conn, \"user\", user, sizeof(user));",
          "5751:   if((ntop->getRedis()->get(decoded_buf, rsp, sizeof(rsp)) == -1)",
          "5752:      || (strcmp(rsp, user) != 0)) {",
          "5753:     const char *msg = \"The submitted form is expired. Please reload the page and try again\";",
          "5755:     ntop->getTrace()->traceEvent(TRACE_WARNING,",
          "5756:             \"Invalid CSRF parameter specified [%s][%s][%s][%s]: page expired?\",",
          "5757:             decoded_buf, rsp, user, tok);",
          "5758:     free(equal);",
          "5759:     return(send_error(conn, 500 /* Internal server error */,",
          "5760:         msg, PAGE_ERROR, query_string, msg));",
          "5761:   } else",
          "5762:     ntop->getRedis()->delKey(decoded_buf);",
          "5764:   csrf_found = true;",
          "5765:        }",
          "5767:        lua_push_str_table_entry(L, tok, decoded_buf);",
          "5768:        free(decoded_buf);",
          "5769:      }",
          "5771:      free(equal);",
          "5772:    } else",
          "5773:      ntop->getTrace()->traceEvent(TRACE_WARNING, \"Not enough memory\");",
          "5774:  }",
          "5776:  tok = strtok_r(NULL, \"&\", &where);",
          "5779:       free(query_string);",
          "5780:     } else",
          "5781:       ntop->getTrace()->traceEvent(TRACE_WARNING, \"Not enough memory\");",
          "5784:   lua_push_bool_table_entry(L, \"valid_csrf\", csrf_found);",
          "",
          "[Added Lines]",
          "5674: static void query_parameters_fill_lua_table(Lua *lua, struct mg_connection *conn,",
          "5675:           lua_State* vm, const char* query) {",
          "5676:   char outbuf[FILENAME_MAX];",
          "5677:   char *where;",
          "5678:   char *tok;",
          "5680:   char *query_string = strdup(query);",
          "5682:   if (query_string) {",
          "5685:     tok = strtok_r(query_string, \"&\", &where);",
          "5687:     while(tok != NULL) {",
          "5689:       char *_equal = strchr(tok, '=');",
          "5691:       if(_equal) {",
          "5692:         char *equal;",
          "5693:         int len;",
          "5695:         _equal[0] = '\\0';",
          "5696:         _equal = &_equal[1];",
          "5697:         len = strlen(_equal);",
          "5699:         lua->purifyHTTPParameter(tok), lua->purifyHTTPParameter(_equal);",
          "5703:         if((equal = (char*)malloc(len+1)) != NULL) {",
          "5704:           char *decoded_buf;",
          "5706:           Utils::urlDecode(_equal, equal, len+1);",
          "5708:           if((decoded_buf = http_decode(equal)) != NULL) {",
          "5709:             FILE *fd;",
          "5711:             Utils::purifyHTTPparam(tok, true, false);",
          "5712:             Utils::purifyHTTPparam(decoded_buf, false, false);",
          "5715:             if((decoded_buf[0] == '.')",
          "5716:                 && ((fd = fopen(decoded_buf, \"r\"))",
          "5717:                 || (fd = fopen(realpath(decoded_buf, outbuf), \"r\")))) {",
          "5719:               ntop->getTrace()->traceEvent(TRACE_WARNING, \"Discarded '%s'='%s' as argument is a valid file path\",",
          "5720:                   tok, decoded_buf);",
          "5721:               decoded_buf[0] = '\\0';",
          "5722:               fclose(fd);",
          "5723:             }",
          "5728:             if(strcmp(tok, \"csrf\") != 0)",
          "5729:               lua_push_str_table_entry(vm, tok, decoded_buf);",
          "5731:             free(decoded_buf);",
          "5732:           }",
          "5734:           free(equal);",
          "5735:         } else",
          "5736:           ntop->getTrace()->traceEvent(TRACE_WARNING, \"Not enough memory\");",
          "5737:       }",
          "5739:       tok = strtok_r(NULL, \"&\", &where);",
          "5742:     free(query_string);",
          "5743:   } else",
          "5744:     ntop->getTrace()->traceEvent(TRACE_WARNING, \"Not enough memory\");",
          "5745: }",
          "5749: int Lua::handle_script_request(struct mg_connection *conn,",
          "5750:           const struct mg_request_info *request_info,",
          "5751:           char *script_path) {",
          "5752:   char buf[64], key[64], ifname[MAX_INTERFACE_NAME_LEN];",
          "5753:   char *_cookies, user[64] = { '\\0' };",
          "5754:   AddressTree ptree;",
          "5755:   int rc;",
          "5756:   const char * content_type;",
          "5758:   if(!L) return(-1);",
          "5763:   lua_pushlightuserdata(L, (char*)conn);",
          "5764:   lua_setglobal(L, CONST_HTTP_CONN);",
          "5766:   content_type = mg_get_header(conn, \"Content-Type\");",
          "5769:   lua_newtable(L);",
          "5770:   if((strcmp(request_info->request_method, \"POST\") == 0) &&",
          "5771:       ((content_type != NULL) && (strstr(content_type, \"application/x-www-form-urlencoded\") == content_type))) {",
          "5772:     char post_data[1024] = { '\\0' };",
          "5773:     char rsp[32];",
          "5774:     char csrf[64] = { '\\0' };",
          "5775:     char user[64] = { '\\0' };",
          "5776:     int post_data_len = mg_read(conn, post_data, sizeof(post_data));",
          "5777:     post_data[sizeof(post_data)-1] = '\\0';",
          "5780:     mg_get_var(post_data, post_data_len, \"csrf\", csrf, sizeof(csrf));",
          "5781:     mg_get_cookie(conn, \"user\", user, sizeof(user));",
          "5783:     if((ntop->getRedis()->get(csrf, rsp, sizeof(rsp)) == -1)",
          "5784:         || (strcmp(rsp, user) != 0)) {",
          "5785:       const char *msg = \"The submitted form is expired. Please reload the page and try again\";",
          "5787:       ntop->getTrace()->traceEvent(TRACE_WARNING,",
          "5788:           \"Invalid CSRF parameter specified [%s][%s][%s][%s]: page expired?\",",
          "5789:           csrf, rsp, user, \"csrf\");",
          "5791:       return(send_error(conn, 500 /* Internal server error */,",
          "5792:           msg, PAGE_ERROR, ((request_info->query_string) ? (request_info->query_string) : (\"\")), msg));",
          "5793:     } else {",
          "5795:       ntop->getRedis()->delKey(csrf);",
          "5796:     }",
          "5799:     query_parameters_fill_lua_table(this, conn, L, post_data);",
          "5801:   lua_setglobal(L, \"_POST\");",
          "5804:   lua_newtable(L);",
          "5805:   if(request_info->query_string != NULL)",
          "5806:     query_parameters_fill_lua_table(this, conn, L, request_info->query_string);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a3c76491ac27cffc2dc41bfa0d32c8f7e5a53426",
      "candidate_info": {
        "commit_hash": "a3c76491ac27cffc2dc41bfa0d32c8f7e5a53426",
        "repo": "ntop/ntopng",
        "commit_url": "https://github.com/ntop/ntopng/commit/a3c76491ac27cffc2dc41bfa0d32c8f7e5a53426",
        "files": [
          "include/Lua.h",
          "src/Lua.cpp"
        ],
        "message": "Reworks Lua C function",
        "before_after_code_files": [
          "include/Lua.h||include/Lua.h",
          "src/Lua.cpp||src/Lua.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Lua.cpp||src/Lua.cpp"
          ],
          "candidate": [
            "src/Lua.cpp||src/Lua.cpp"
          ]
        }
      },
      "candidate_diff": {
        "include/Lua.h||include/Lua.h": [
          "File: include/Lua.h -> include/Lua.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:        const struct mg_request_info *request_info,",
          "80:        char *script_path);",
          "83:   void setInterface(const char *user);",
          "84: };",
          "",
          "[Removed Lines]",
          "82:   void purifyHTTPParameter(char *param);",
          "",
          "[Added Lines]",
          "83:   void setParamsTable(lua_State* vm,",
          "84:         const char* table_name,",
          "85:         const char* query) const;",
          "86:   static void purifyHTTPParameter(char *param);",
          "",
          "---------------"
        ],
        "src/Lua.cpp||src/Lua.cpp": [
          "File: src/Lua.cpp -> src/Lua.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5671:   }",
          "5672: }",
          "5676:   char outbuf[FILENAME_MAX];",
          "5677:   char *where;",
          "5678:   char *tok;",
          "5682:   if (query_string) {",
          "",
          "[Removed Lines]",
          "5674: static void query_parameters_fill_lua_table(Lua *lua, struct mg_connection *conn,",
          "5675:           lua_State* vm, const char* query) {",
          "5680:   char *query_string = strdup(query);",
          "",
          "[Added Lines]",
          "5674: void Lua::setParamsTable(lua_State* vm, const char* table_name,",
          "5675:     const char* query) const {",
          "5680:   char *query_string = query ? strdup(query) : NULL;",
          "5682:   lua_newtable(L);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5696:         _equal = &_equal[1];",
          "5697:         len = strlen(_equal);",
          "",
          "[Removed Lines]",
          "5699:         lua->purifyHTTPParameter(tok), lua->purifyHTTPParameter(_equal);",
          "",
          "[Added Lines]",
          "5701:         purifyHTTPParameter(tok), purifyHTTPParameter(_equal);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5739:       tok = strtok_r(NULL, \"&\", &where);",
          "5745: }",
          "",
          "[Removed Lines]",
          "5742:     free(query_string);",
          "5743:   } else",
          "5744:     ntop->getTrace()->traceEvent(TRACE_WARNING, \"Not enough memory\");",
          "",
          "[Added Lines]",
          "5745:   }",
          "5747:   if(query_string) free(query_string);",
          "5749:   if(table_name)",
          "5750:     lua_setglobal(L, table_name);",
          "5751:   else",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5766:   content_type = mg_get_header(conn, \"Content-Type\");",
          "5770:   if((strcmp(request_info->request_method, \"POST\") == 0) &&",
          "5771:       ((content_type != NULL) && (strstr(content_type, \"application/x-www-form-urlencoded\") == content_type))) {",
          "5772:     char post_data[1024] = { '\\0' };",
          "",
          "[Removed Lines]",
          "5769:   lua_newtable(L);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5796:     }",
          "5810:   lua_newtable(L);",
          "",
          "[Removed Lines]",
          "5799:     query_parameters_fill_lua_table(this, conn, L, post_data);",
          "5800:   }",
          "5801:   lua_setglobal(L, \"_POST\");",
          "5804:   lua_newtable(L);",
          "5805:   if(request_info->query_string != NULL)",
          "5806:     query_parameters_fill_lua_table(this, conn, L, request_info->query_string);",
          "",
          "[Added Lines]",
          "5806:     setParamsTable(L, \"_POST\", post_data);",
          "5807:   } else",
          "5808:     setParamsTable(L, \"_POST\", NULL /* Empty */);",
          "5811:   setParamsTable(L, \"_GET\", request_info->query_string);",
          "",
          "---------------"
        ]
      }
    }
  ]
}