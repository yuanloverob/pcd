{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e4a9e4d0e57be6228936dc06936a7aa09e551d46",
      "candidate_info": {
        "commit_hash": "e4a9e4d0e57be6228936dc06936a7aa09e551d46",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e4a9e4d0e57be6228936dc06936a7aa09e551d46",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "test/altertab3.test"
        ],
        "message": "Have ALTER TABLE commands ignore the lhs of \"expr IN ()\" and \"expr NOT IN ()\" expressions, just as other queries do. Fix for [533010b8ca].\n\nFossilOrigin-Name: 71643deb6bbad4b4a511bfd43b32245b50a555b508b90f33adf0656ae53292c6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7078d77effc296c63c91ec032c866e2b320f081d58e57e9e83cc58373169bda3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1188:     }else if( Y->nExpr==1 ){",
          "",
          "[Removed Lines]",
          "1182:       if( IN_RENAME_OBJECT==0 ){",
          "1183:         sqlite3ExprDelete(pParse->db, A);",
          "1184:         A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "1185:       }else{",
          "1186:         A = sqlite3PExpr(pParse, TK_UPLUS, A, 0);",
          "1187:       }",
          "",
          "[Added Lines]",
          "1182:       sqlite3ExprDelete(pParse->db, A);",
          "1183:       A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: do_execsql_test 3.2 {",
          "81:   SELECT sql FROM sqlite_master WHERE name = 'v1'",
          "84: #-------------------------------------------------------------------------",
          "85: reset_db",
          "",
          "[Removed Lines]",
          "82: } {{CREATE VIEW v1 AS SELECT * FROM t1 WHERE a=1 OR (bbb IN ())}}",
          "",
          "[Added Lines]",
          "82: } {{CREATE VIEW v1 AS SELECT * FROM t1 WHERE a=1 OR (b IN ())}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:   {CREATE INDEX i0 ON \"t1\"('1' IN ())}",
          "190: }",
          "193: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192: do_execsql_test 8.2.1 {",
          "193:   CREATE TABLE t2 (c0);",
          "194:   CREATE INDEX i2 ON t2((LIKELIHOOD(c0, 100) IN ()));",
          "195:   ALTER TABLE t2 RENAME COLUMN c0 TO c1;",
          "196: }",
          "197: do_execsql_test 8.2.2 {",
          "198:   SELECT sql FROM sqlite_master WHERE tbl_name = 't2';",
          "199: } {",
          "200:   {CREATE TABLE t2 (c1)}",
          "201:   {CREATE INDEX i2 ON t2((LIKELIHOOD(c0, 100) IN ()))}",
          "202: }",
          "203: do_test 8.2.3 {",
          "204:   sqlite3 db2 test.db",
          "205:   db2 eval { INSERT INTO t2 VALUES (1), (2), (3) }",
          "206:   db close",
          "207: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2964225247f1b9418aef50a042b2997edb3b6ad6",
      "candidate_info": {
        "commit_hash": "2964225247f1b9418aef50a042b2997edb3b6ad6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2964225247f1b9418aef50a042b2997edb3b6ad6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/printf.c"
        ],
        "message": "Prevent the printf formatter from doing large memory allocations - larger than either the size of the static buffer for interfaces like sqlite3_snprintf(), or larger than SQLITE_LIMIT_LENGTH for interfaces that are associated with a database connection.  This helps to prevent DOS attacks on products that let hostile sources inject arbitrary SQL.  It also helps fuzzers run faster and more effectively.\n\nFossilOrigin-Name: 179e5d46054e5c86f53a79b7a0823d9a383da8391ad1d3c3b22645927a1e052b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/printf.c||src/printf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 40d8f8ae87abf928542c4e558a4c3a3eab18776a3e8db7ca1c5e5f744ca0bce3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/printf.c||src/printf.c": [
          "File: src/printf.c -> src/printf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:   return (char*)sqlite3_value_text(p->apArg[p->nUsed++]);",
          "156: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167: static char *printfTempBuf(sqlite3_str *pAccum, sqlite3_int64 n){",
          "168:   char *z;",
          "169:   if( n>pAccum->nAlloc && n>pAccum->mxAlloc ){",
          "170:     setStrAccumError(pAccum, SQLITE_TOOBIG);",
          "171:     return 0;",
          "172:   }",
          "173:   z = sqlite3DbMallocRaw(pAccum->db, n);",
          "174:   if( z==0 ){",
          "175:     setStrAccumError(pAccum, SQLITE_NOMEM);",
          "176:   }",
          "177:   return z;",
          "178: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "422:           zOut = buf;",
          "423:         }else{",
          "424:           u64 n = (u64)precision + 10 + precision/3;",
          "430:           nOut = (int)n;",
          "431:         }",
          "432:         bufpt = &zOut[nOut-1];",
          "",
          "[Removed Lines]",
          "425:           zOut = zExtra = sqlite3Malloc( n );",
          "426:           if( zOut==0 ){",
          "427:             setStrAccumError(pAccum, SQLITE_NOMEM);",
          "428:             return;",
          "429:           }",
          "",
          "[Added Lines]",
          "446:           zOut = zExtra = printfTempBuf(pAccum, n);",
          "447:           if( zOut==0 ) return;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "545:         }else{",
          "546:           e2 = exp;",
          "547:         }",
          "554:           }",
          "555:         }",
          "556:         zOut = bufpt;",
          "",
          "[Removed Lines]",
          "548:         if( MAX(e2,0)+(i64)precision+(i64)width > etBUFSIZE - 15 ){",
          "549:           bufpt = zExtra",
          "550:               = sqlite3Malloc( MAX(e2,0)+(i64)precision+(i64)width+15 );",
          "551:           if( bufpt==0 ){",
          "552:             setStrAccumError(pAccum, SQLITE_NOMEM);",
          "553:             return;",
          "",
          "[Added Lines]",
          "566:         {",
          "568:           szBufNeeded = MAX(e2,0)+(i64)precision+(i64)width+15;",
          "569:           if( szBufNeeded > etBUFSIZE ){",
          "570:             bufpt = zExtra = printfTempBuf(pAccum, szBufNeeded);",
          "571:             if( bufpt==0 ) return;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "774:         needQuote = !isnull && xtype==etSQLESCAPE2;",
          "775:         n += i + 3;",
          "776:         if( n>etBUFSIZE ){",
          "782:         }else{",
          "783:           bufpt = buf;",
          "784:         }",
          "",
          "[Removed Lines]",
          "777:           bufpt = zExtra = sqlite3Malloc( n );",
          "778:           if( bufpt==0 ){",
          "779:             setStrAccumError(pAccum, SQLITE_NOMEM);",
          "780:             return;",
          "781:           }",
          "",
          "[Added Lines]",
          "795:           bufpt = zExtra = printfTempBuf(pAccum, n);",
          "796:           if( bufpt==0 ) return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29c992cb049c0fbf3185082d3f81dd76c13e746d",
      "candidate_info": {
        "commit_hash": "29c992cb049c0fbf3185082d3f81dd76c13e746d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/29c992cb049c0fbf3185082d3f81dd76c13e746d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/delete.c",
          "src/fkey.c",
          "src/parse.y",
          "src/select.c",
          "src/sqliteInt.h",
          "src/trigger.c",
          "src/window.c",
          "test/with1.test"
        ],
        "message": "Revamp the SrcList allocator routines to be methods of Parse instead of being methods of the \"sqlite3\" object, so that they can leave better error messages when the SrcList object grows too large.\n\nFossilOrigin-Name: df08d472b090b212fb77ce2aae0e1ffe79ae5db4b1accf55e6fdb18e8b0a7098",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/delete.c||src/delete.c",
          "src/fkey.c||src/fkey.c",
          "src/parse.y||src/parse.y",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/trigger.c||src/trigger.c",
          "src/window.c||src/window.c",
          "test/with1.test||test/with1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7cac614d5df55eb092b863163483b6782b942b21bd15fd787576fef5619fa849",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3873:     SrcList *pNew;",
          "3874:     int nAlloc = pSrc->nSrc*2+nExtra;",
          "3875:     int nGot;",
          "3877:     if( pSrc->nSrc+nExtra>=SQLITE_MAX_SRCLIST ){",
          "3885:     }",
          "3886:     if( nAlloc>SQLITE_MAX_SRCLIST ) nAlloc = SQLITE_MAX_SRCLIST;",
          "3887:     pNew = sqlite3DbRealloc(db, pSrc,",
          "3888:                sizeof(*pSrc) + (nAlloc-1)*sizeof(pSrc->a[0]) );",
          "3889:     if( pNew==0 ){",
          "3890:       assert( db->mallocFailed );",
          "3892:     }",
          "3893:     pSrc = pNew;",
          "3894:     nGot = (sqlite3DbMallocSize(db, pNew) - sizeof(*pSrc))/sizeof(pSrc->a[0])+1;",
          "",
          "[Removed Lines]",
          "3883:       sqlite3OomFault(db);",
          "3884:       return pSrc;",
          "3891:       return pSrc;",
          "",
          "[Added Lines]",
          "3877:     sqlite3 *db = pParse->db;",
          "3880:       sqlite3ErrorMsg(pParse, \"too many FROM clause terms, max: %d\",",
          "3881:                       SQLITE_MAX_SRCLIST);",
          "3882:       return 0;",
          "3889:       return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3950: SrcList *sqlite3SrcListAppend(",
          "3955: ){",
          "3956:   struct SrcList_item *pItem;",
          "3959:   if( pList==0 ){",
          "3961:     if( pList==0 ) return 0;",
          "3962:     pList->nAlloc = 1;",
          "3963:     pList->nSrc = 1;",
          "3964:     memset(&pList->a[0], 0, sizeof(pList->a[0]));",
          "3965:     pList->a[0].iCursor = -1;",
          "3966:   }else{",
          "3972:   }",
          "3973:   pItem = &pList->a[pList->nSrc-1];",
          "3974:   if( pDatabase && pDatabase->z==0 ){",
          "",
          "[Removed Lines]",
          "3958:   assert( db!=0 );",
          "3960:     pList = sqlite3DbMallocRawNN(db, sizeof(SrcList) );",
          "3967:     pList = sqlite3SrcListEnlarge(db, pList, 1, pList->nSrc);",
          "3968:   }",
          "3969:   if( db->mallocFailed ){",
          "3970:     sqlite3SrcListDelete(db, pList);",
          "3971:     return 0;",
          "",
          "[Added Lines]",
          "3956:   sqlite3 *db;",
          "3958:   assert( pParse!=0 );",
          "3959:   assert( pParse->db!=0 );",
          "3960:   db = pParse->db;",
          "3962:     pList = sqlite3DbMallocRawNN(pParse->db, sizeof(SrcList) );",
          "3969:     SrcList *pNew = sqlite3SrcListEnlarge(pParse, pList, 1, pList->nSrc);",
          "3970:     if( pNew==0 ){",
          "3971:       sqlite3SrcListDelete(db, pList);",
          "3972:       return 0;",
          "3973:     }else{",
          "3974:       pList = pNew;",
          "3975:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4057:     );",
          "4058:     goto append_from_error;",
          "4059:   }",
          "4061:   if( p==0 ){",
          "4062:     goto append_from_error;",
          "4063:   }",
          "",
          "[Removed Lines]",
          "4060:   p = sqlite3SrcListAppend(db, p, pTable, pDatabase);",
          "",
          "[Added Lines]",
          "4064:   p = sqlite3SrcListAppend(pParse, p, pTable, pDatabase);",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:   sqlite3 *db = pParse->db;",
          "118:   int iDb = sqlite3SchemaToIndex(db, pView->pSchema);",
          "119:   pWhere = sqlite3ExprDup(db, pWhere, 0);",
          "121:   if( pFrom ){",
          "122:     assert( pFrom->nSrc==1 );",
          "123:     pFrom->a[0].zName = sqlite3DbStrDup(db, pView->zName);",
          "",
          "[Removed Lines]",
          "120:   pFrom = sqlite3SrcListAppend(db, 0, 0, 0);",
          "",
          "[Added Lines]",
          "120:   pFrom = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1018:     if( pSrc ){",
          "1019:       struct SrcList_item *pItem = pSrc->a;",
          "1020:       pItem->pTab = pFKey->pFrom;",
          "",
          "[Removed Lines]",
          "1017:     pSrc = sqlite3SrcListAppend(db, 0, 0, 0);",
          "",
          "[Added Lines]",
          "1017:     pSrc = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1291:       }",
          "1292:       pSelect = sqlite3SelectNew(pParse,",
          "1293:           sqlite3ExprListAppend(pParse, 0, pRaise),",
          "1295:           pWhere,",
          "1296:           0, 0, 0, 0, 0",
          "1297:       );",
          "",
          "[Removed Lines]",
          "1294:           sqlite3SrcListAppend(db, 0, &tFrom, 0),",
          "",
          "[Added Lines]",
          "1294:           sqlite3SrcListAppend(pParse, 0, &tFrom, 0),",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "690: %type fullname {SrcList*}",
          "691: %destructor fullname {sqlite3SrcListDelete(pParse->db, $$);}",
          "692: fullname(A) ::= nm(X).  {",
          "694:   if( IN_RENAME_OBJECT && A ) sqlite3RenameTokenMap(pParse, A->a[0].zName, &X);",
          "695: }",
          "696: fullname(A) ::= nm(X) DOT nm(Y). {",
          "698:   if( IN_RENAME_OBJECT && A ) sqlite3RenameTokenMap(pParse, A->a[0].zName, &Y);",
          "699: }",
          "701: %type xfullname {SrcList*}",
          "702: %destructor xfullname {sqlite3SrcListDelete(pParse->db, $$);}",
          "703: xfullname(A) ::= nm(X).",
          "705: xfullname(A) ::= nm(X) DOT nm(Y).",
          "707: xfullname(A) ::= nm(X) DOT nm(Y) AS nm(Z).  {",
          "709:    if( A ) A->a[0].zAlias = sqlite3NameFromToken(pParse->db, &Z);",
          "710: }",
          "711: xfullname(A) ::= nm(X) AS nm(Z). {",
          "713:    if( A ) A->a[0].zAlias = sqlite3NameFromToken(pParse->db, &Z);",
          "714: }",
          "",
          "[Removed Lines]",
          "693:   A = sqlite3SrcListAppend(pParse->db,0,&X,0);",
          "697:   A = sqlite3SrcListAppend(pParse->db,0,&X,&Y);",
          "704:    {A = sqlite3SrcListAppend(pParse->db,0,&X,0); /*A-overwrites-X*/}",
          "706:    {A = sqlite3SrcListAppend(pParse->db,0,&X,&Y); /*A-overwrites-X*/}",
          "",
          "[Added Lines]",
          "693:   A = sqlite3SrcListAppend(pParse,0,&X,0);",
          "697:   A = sqlite3SrcListAppend(pParse,0,&X,&Y);",
          "704:    {A = sqlite3SrcListAppend(pParse,0,&X,0); /*A-overwrites-X*/}",
          "706:    {A = sqlite3SrcListAppend(pParse,0,&X,&Y); /*A-overwrites-X*/}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1216:     if( N ) A = sqlite3PExpr(pParse, TK_NOT, A, 0);",
          "1217:   }",
          "1218:   expr(A) ::= expr(A) in_op(N) nm(Y) dbnm(Z) paren_exprlist(E). [IN] {",
          "1220:     Select *pSelect = sqlite3SelectNew(pParse, 0,pSrc,0,0,0,0,0,0);",
          "1221:     if( E )  sqlite3SrcListFuncArgs(pParse, pSelect ? pSrc : 0, E);",
          "1222:     A = sqlite3PExpr(pParse, TK_IN, A, 0);",
          "",
          "[Removed Lines]",
          "1219:     SrcList *pSrc = sqlite3SrcListAppend(pParse->db, 0,&Y,&Z);",
          "",
          "[Added Lines]",
          "1219:     SrcList *pSrc = sqlite3SrcListAppend(pParse, 0,&Y,&Z);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1287: cmd ::= createkw(S) uniqueflag(U) INDEX ifnotexists(NE) nm(X) dbnm(D)",
          "1288:         ON nm(Y) LP sortlist(Z) RP where_opt(W). {",
          "1289:   sqlite3CreateIndex(pParse, &X, &D,",
          "1291:                       &S, W, SQLITE_SO_ASC, NE, SQLITE_IDXTYPE_APPDEF);",
          "1292:   if( IN_RENAME_OBJECT && pParse->pNewIndex ){",
          "1293:     sqlite3RenameTokenMap(pParse, pParse->pNewIndex->zName, &Y);",
          "",
          "[Removed Lines]",
          "1290:                      sqlite3SrcListAppend(pParse->db,0,&Y,0), Z, U,",
          "",
          "[Added Lines]",
          "1290:                      sqlite3SrcListAppend(pParse,0,&Y,0), Z, U,",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3960:       jointype = pSubitem->fg.jointype;",
          "3961:     }else{",
          "3968:     }",
          "",
          "[Removed Lines]",
          "3963:       pSrc = pParent->pSrc = sqlite3SrcListAppend(db, 0, 0, 0);",
          "3964:       if( pSrc==0 ){",
          "3965:         assert( db->mallocFailed );",
          "3966:         break;",
          "3967:       }",
          "",
          "[Added Lines]",
          "3963:       pSrc = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "3964:       if( pSrc==0 ) break;",
          "3965:       pParent->pSrc = pSrc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3985:     if( nSubSrc>1 ){",
          "3990:     }",
          "",
          "[Removed Lines]",
          "3986:       pParent->pSrc = pSrc = sqlite3SrcListEnlarge(db, pSrc, nSubSrc-1,iFrom+1);",
          "3987:       if( db->mallocFailed ){",
          "3988:         break;",
          "3989:       }",
          "",
          "[Added Lines]",
          "3984:       pSrc = sqlite3SrcListEnlarge(pParse, pSrc, nSubSrc-1,iFrom+1);",
          "3985:       if( pSrc==0 ) break;",
          "3986:       pParent->pSrc = pSrc;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3929: void *sqlite3ArrayAllocate(sqlite3*,void*,int,int*,int*);",
          "3930: IdList *sqlite3IdListAppend(Parse*, IdList*, Token*);",
          "3931: int sqlite3IdListIndex(IdList*,const char*);",
          "3934: SrcList *sqlite3SrcListAppendFromTerm(Parse*, SrcList*, Token*, Token*,",
          "3935:                                       Token*, Select*, Expr*, IdList*);",
          "3936: void sqlite3SrcListIndexedBy(Parse *, SrcList *, Token *);",
          "",
          "[Removed Lines]",
          "3932: SrcList *sqlite3SrcListEnlarge(sqlite3*, SrcList*, int, int);",
          "3933: SrcList *sqlite3SrcListAppend(sqlite3*, SrcList*, Token*, Token*);",
          "",
          "[Added Lines]",
          "3932: SrcList *sqlite3SrcListEnlarge(Parse*, SrcList*, int, int);",
          "3933: SrcList *sqlite3SrcListAppend(Parse*, SrcList*, Token*, Token*);",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "735:   if( pSrc ){",
          "736:     assert( pSrc->nSrc>0 );",
          "737:     pSrc->a[pSrc->nSrc-1].zName = sqlite3DbStrDup(db, pStep->zTarget);",
          "",
          "[Removed Lines]",
          "734:   pSrc = sqlite3SrcListAppend(db, 0, 0, 0);",
          "",
          "[Added Lines]",
          "734:   pSrc = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "823:     pSub = sqlite3SelectNew(",
          "824:         pParse, pSublist, pSrc, pWhere, pGroupBy, pHaving, pSort, 0, 0",
          "825:     );",
          "828:     if( p->pSrc ){",
          "829:       p->pSrc->a[0].pSelect = pSub;",
          "830:       sqlite3SrcListAssignCursors(pParse, p->pSrc);",
          "",
          "[Removed Lines]",
          "826:     p->pSrc = sqlite3SrcListAppend(db, 0, 0, 0);",
          "827:     assert( p->pSrc || db->mallocFailed );",
          "",
          "[Added Lines]",
          "826:     p->pSrc = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "",
          "---------------"
        ],
        "test/with1.test||test/with1.test": [
          "File: test/with1.test -> test/with1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1089:      SELECT 3 FROM c,c,c,c,c,c,c,c,c",
          "1090:   )",
          "1091:   SELECT 4 FROM c,c,c,c,c,c,c,c,c;",
          "1094: finish_test",
          "",
          "[Removed Lines]",
          "1092: } {1 {out of memory}}",
          "",
          "[Added Lines]",
          "1092: } {1 {at most 64 tables in a join}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e88c0cde6caa0136fb9b6b3b2ea3330faf8547d1",
      "candidate_info": {
        "commit_hash": "e88c0cde6caa0136fb9b6b3b2ea3330faf8547d1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e88c0cde6caa0136fb9b6b3b2ea3330faf8547d1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_devsym.c",
          "test/permutations.test"
        ],
        "message": "As it requires wal mode support, do not run test file chunksize.test as part of the \"journaltest\" permutation.\n\nFossilOrigin-Name: acd2df36c2876ff3cc477889fc99f493cdf53a656bdb84bde6121676c9eeed1f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_devsym.c||src/test_devsym.c",
          "test/permutations.test||test/permutations.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 971b4422ae7a8eed67f5db62c0e1cc061faac9404ff5f7051d7e07decf2207a4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_devsym.c||src/test_devsym.c": [
          "File: src/test_devsym.c -> src/test_devsym.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "506: void devsym_unregister(){",
          "507:   sqlite3_vfs_unregister(&devsym_vfs);",
          "508:   g.pVfs = 0;",
          "509:   g.iDeviceChar = 0;",
          "510:   g.iSectorSize = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508:   sqlite3_vfs_unregister(&writecrash_vfs);",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "966:   async4.test bigfile.test backcompat.test e_wal* fstat.test mmap2.test",
          "967:   pager1.test syscall.test tkt3457.test *malloc* mmap* multiplex* nolock*",
          "968:   pager2.test *fault* rowal* snapshot* superlock* symlink.test",
          "970: }]",
          "972: if {[info commands register_demovfs] != \"\"} {",
          "",
          "[Removed Lines]",
          "969:   delete_db.test shmlock.test",
          "",
          "[Added Lines]",
          "969:   delete_db.test shmlock.test chunksize.test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7476115ad9c9090cc3be93fb5bfc42bcd60961e",
      "candidate_info": {
        "commit_hash": "e7476115ad9c9090cc3be93fb5bfc42bcd60961e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e7476115ad9c9090cc3be93fb5bfc42bcd60961e",
        "files": [
          "ext/misc/fileio.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the writefile() SQL function implemented by ext/misc/fileio.c such that any directories created have standard umask permissions, not permissions of the file that is to be written.\n\nFossilOrigin-Name: f11c89595dc65f89be6df62830c8cddd3933acfd4baaecd348ecd99e71db5831",
        "before_after_code_files": [
          "ext/misc/fileio.c||ext/misc/fileio.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fileio.c||ext/misc/fileio.c": [
          "File: ext/misc/fileio.c -> ext/misc/fileio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "302: static int makeDirectory(",
          "305: ){",
          "306:   char *zCopy = sqlite3_mprintf(\"%s\", zFile);",
          "307:   int rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "303:   const char *zFile,",
          "304:   mode_t mode",
          "",
          "[Added Lines]",
          "304:   const char *zFile",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323:       rc2 = fileStat(zCopy, &sStat);",
          "324:       if( rc2!=0 ){",
          "326:       }else{",
          "327:         if( !S_ISDIR(sStat.st_mode) ) rc = SQLITE_ERROR;",
          "328:       }",
          "",
          "[Removed Lines]",
          "325:         if( mkdir(zCopy, mode & 0777) ) rc = SQLITE_ERROR;",
          "",
          "[Added Lines]",
          "325:         if( mkdir(zCopy, 0777) ) rc = SQLITE_ERROR;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "481:   res = writeFile(context, zFile, argv[1], mode, mtime);",
          "482:   if( res==1 && errno==ENOENT ){",
          "484:       res = writeFile(context, zFile, argv[1], mode, mtime);",
          "485:     }",
          "486:   }",
          "",
          "[Removed Lines]",
          "483:     if( makeDirectory(zFile, mode)==SQLITE_OK ){",
          "",
          "[Added Lines]",
          "483:     if( makeDirectory(zFile)==SQLITE_OK ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 191a023ae708490eca61b3a42a3df41bb6709079f3905881abb82ebd46182607",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}