{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a51297200ff4c6825e299fab8f9debf25c3e6207",
      "candidate_info": {
        "commit_hash": "a51297200ff4c6825e299fab8f9debf25c3e6207",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a51297200ff4c6825e299fab8f9debf25c3e6207",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/with3.test"
        ],
        "message": "Fix a memory-leak/segfault caused by using OP_OpenDup and OP_OpenEphemeral on the same VM cursor.\n\nFossilOrigin-Name: a9b90aa12eecdd9f2a8b2d23da8b7cac43d8b1789f5cefa3f4e939d9f2b59269",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/with3.test||test/with3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 74ef97bf51dd531a277cf22fa4d42043d93799d5a5bd550812648834460fe0b7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "260:     sqlite3VdbeFreeCursor(p, p->apCsr[iCur]);",
          "261:     p->apCsr[iCur] = 0;",
          "262:   }",
          "",
          "[Removed Lines]",
          "259:     p->apCsr[iCur]->isEphemeral = 0;",
          "",
          "[Added Lines]",
          "259:     if( p->apCsr[iCur]->pBtx==0 ) p->apCsr[iCur]->isEphemeral = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3710:   if( pCx ){",
          "3714:   }else{",
          "3715:     pCx = allocateCursor(p, pOp->p1, pOp->p2, -1, CURTYPE_BTREE);",
          "3716:     if( pCx==0 ) goto no_mem;",
          "",
          "[Removed Lines]",
          "3713:     rc = sqlite3BtreeClearTable(pCx->pBtx, pCx->pgnoRoot, 0);",
          "",
          "[Added Lines]",
          "3713:     assert( pCx->isEphemeral );",
          "3714:     if( pCx->pBtx ){",
          "3715:       rc = sqlite3BtreeClearTable(pCx->pBtx, pCx->pgnoRoot, 0);",
          "3716:     }",
          "",
          "---------------"
        ],
        "test/with3.test||test/with3.test": [
          "File: test/with3.test -> test/with3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:   `--SEARCH TABLE w1 USING INTEGER PRIMARY KEY (rowid=?)",
          "131: }",
          "133: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133: do_execsql_test 4.0 {",
          "134:   WITH t5(t5col1) AS (",
          "135:     SELECT (",
          "136:       WITH t3(t3col1) AS (",
          "137:         WITH t2 AS (",
          "138:           WITH t1 AS (SELECT 1 AS c1 GROUP BY 1)",
          "139:           SELECT a.c1 FROM t1 AS a, t1 AS b",
          "140:           WHERE anoncol1 = 1",
          "141:         )",
          "142:         SELECT (SELECT 1 FROM t2) FROM t2",
          "143:       )",
          "144:       SELECT t3col1 FROM t3 WHERE t3col1",
          "145:     ) FROM (SELECT 1 AS anoncol1)",
          "146:   )",
          "147:   SELECT t5col1, t5col1 FROM t5",
          "148: } {1 1}",
          "149: do_execsql_test 4.1 {",
          "150:   SELECT EXISTS (",
          "151:     WITH RECURSIVE Table0 AS (",
          "152:       WITH RECURSIVE Table0(Col0) AS (SELECT ALL 1  )",
          "153:       SELECT ALL (",
          "154:         WITH RECURSIVE Table0 AS (",
          "155:           WITH RECURSIVE Table0 AS (",
          "156:             WITH RECURSIVE Table0 AS (SELECT DISTINCT 1  GROUP BY 1  )",
          "157:             SELECT DISTINCT * FROM Table0 NATURAL INNER JOIN Table0",
          "158:             WHERE Col0 = 1",
          "159:           )",
          "160:           SELECT ALL (SELECT DISTINCT * FROM Table0) FROM Table0 WHERE Col0 = 1",
          "161:         )",
          "162:         SELECT ALL * FROM Table0  NATURAL INNER JOIN  Table0",
          "163:       ) FROM Table0 )",
          "164:       SELECT DISTINCT * FROM Table0  NATURAL INNER JOIN  Table0",
          "165:     );",
          "166: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed457037c4ea851dd58b79df0ec965103e0e1c8d",
      "candidate_info": {
        "commit_hash": "ed457037c4ea851dd58b79df0ec965103e0e1c8d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ed457037c4ea851dd58b79df0ec965103e0e1c8d",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c"
        ],
        "message": "Fix harmless compiler warnings in fuzzcheck\n\nFossilOrigin-Name: a82539665718c8183d9d0bb7bcb3adcb1a23294b8c30f364829a982dab89a332",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 202f9919c222ee933924c63c15ad36ec4481457b1e4d9179af14c9f284117c0c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "468: #ifdef SQLITE_EBCDIC",
          "470: #else",
          "",
          "[Removed Lines]",
          "467: static unsigned int hexToInt(unsigned int h){",
          "",
          "[Added Lines]",
          "467: static unsigned char hexToInt(unsigned int h){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "526:   unsigned char b = 0;",
          "527:   if( nIn<4 ) return -1;",
          "528:   n = (unsigned int)nIn;",
          "530:   if( a==0 ){",
          "531:     fprintf(stderr, \"Out of memory!\\n\");",
          "532:     exit(1);",
          "",
          "[Removed Lines]",
          "529:   a = sqlite3_malloc( nAlloc );",
          "",
          "[Added Lines]",
          "529:   a = sqlite3_malloc64( nAlloc );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "562:             }",
          "563:             newSize = MX_FILE_SZ;",
          "564:           }",
          "566:           if( a==0 ){",
          "567:             fprintf(stderr, \"Out of memory!\\n\");",
          "568:             exit(1);",
          "",
          "[Removed Lines]",
          "565:           a = sqlite3_realloc( a, newSize );",
          "",
          "[Added Lines]",
          "565:           a = sqlite3_realloc64( a, newSize );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "744:   memset(&cx, 0, sizeof(cx));",
          "745:   iSql = decodeDatabase((unsigned char*)aData, (int)nByte, &aDb, &nDb);",
          "746:   if( iSql<0 ) return 0;",
          "748:   if( eVerbosity>=3 ){",
          "749:     printf(",
          "750:       \"****** %d-byte input, %d-byte database, %d-byte script \"",
          "",
          "[Removed Lines]",
          "747:   nSql = nByte - iSql;",
          "",
          "[Added Lines]",
          "747:   nSql = (int)(nByte - iSql);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1454:       }else",
          "1455:       if( strcmp(z,\"version\")==0 ){",
          "1456:         int ii;",
          "1458:         printf(\"SQLite %s %s\\n\", sqlite3_libversion(), sqlite3_sourceid());",
          "1461:         }",
          "1462:         return 0;",
          "1463:       }else",
          "",
          "[Removed Lines]",
          "1457:         const char *z;",
          "1459:         for(ii=0; (z = sqlite3_compileoption_get(ii))!=0; ii++){",
          "1460:           printf(\"%s\\n\", z);",
          "",
          "[Added Lines]",
          "1457:         const char *zz;",
          "1459:         for(ii=0; (zz = sqlite3_compileoption_get(ii))!=0; ii++){",
          "1460:           printf(\"%s\\n\", zz);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c014f8b0c63b3b8c8c2ae30dd9c9cbe1b883952",
      "candidate_info": {
        "commit_hash": "9c014f8b0c63b3b8c8c2ae30dd9c9cbe1b883952",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9c014f8b0c63b3b8c8c2ae30dd9c9cbe1b883952",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Unless the \"--freelist-corrupt\" option is specified, do not have the .recover command attempt to recover data from pages that are on the database free-list.\n\nFossilOrigin-Name: 8d2f52bb640d6d0f84b18d746043e56f45a73ace93239be1d036701f7f4018fd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 959bbd11e92cc789973daf20dfcb8a6d8dc724dd603b286cbdd59e5d1fdb2909",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3934: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3943: static void shellInt32(",
          "3944:   sqlite3_context *context,",
          "3945:   int argc,",
          "3946:   sqlite3_value **argv",
          "3947: ){",
          "3948:   const unsigned char *pBlob;",
          "3949:   int nBlob;",
          "3950:   int iInt;",
          "3952:   nBlob = sqlite3_value_bytes(argv[0]);",
          "3953:   pBlob = (const unsigned char*)sqlite3_value_blob(argv[0]);",
          "3954:   iInt = sqlite3_value_int(argv[1]);",
          "3956:   if( iInt>=0 && (iInt+1)*4<=nBlob ){",
          "3957:     const unsigned char *a = &pBlob[iInt*4];",
          "3958:     sqlite3_int64 iVal = ((sqlite3_int64)a[0]<<24)",
          "3959:                        + ((sqlite3_int64)a[1]<<16)",
          "3960:                        + ((sqlite3_int64)a[2]<< 8)",
          "3961:                        + ((sqlite3_int64)a[3]<< 0);",
          "3962:     sqlite3_result_int64(context, iVal);",
          "3963:   }",
          "3964: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4105:                             shellPutsFunc, 0, 0);",
          "4106:     sqlite3_create_function(p->db, \"shell_escape_crnl\", 1, SQLITE_UTF8, 0,",
          "4107:                             shellEscapeCrnl, 0, 0);",
          "4108: #ifndef SQLITE_NOHAVE_SYSTEM",
          "4109:     sqlite3_create_function(p->db, \"edit\", 1, SQLITE_UTF8, 0,",
          "4110:                             editFunc, 0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4137:     sqlite3_create_function(p->db, \"shell_int32\", 2, SQLITE_UTF8, 0,",
          "4138:                             shellInt32, 0, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6378:   shellExec(pState->db, &rc,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6408:   int i;",
          "6411:   for(i=1; i<nArg; i++){",
          "6412:     char *z = azArg[i];",
          "6413:     int n;",
          "6414:     if( z[0]=='-' && z[1]=='-' ) z++;",
          "6415:     n = strlen(z);",
          "6416:     if( n<=17 && memcmp(\"-freelist-corrupt\", z, n)==0 ){",
          "6417:       bFreelist = 0;",
          "6418:     }",
          "6419:     else{",
          "6420:       raw_printf(stderr,",
          "6421:         \"unexpected option: %s - expected \\\"--freelist-corrupt\\\"\\n\",",
          "6422:         azArg[i]",
          "6423:       );",
          "6424:       return 1;",
          "6425:     }",
          "6426:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6395:     \"  SELECT child FROM recovery.dbptr GROUP BY child HAVING count(*)>1\"",
          "6396:     \");\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6448:     \"CREATE TABLE recovery.freelist(pgno INTEGER PRIMARY KEY);\"",
          "6449:   );",
          "6451:   if( bFreelist ){",
          "6452:     shellExec(pState->db, &rc,",
          "6453:       \"WITH trunk(pgno) AS (\"",
          "6454:       \"  SELECT shell_int32(\"",
          "6455:       \"      (SELECT data FROM sqlite_dbpage WHERE pgno=1), 8) AS x \"",
          "6456:       \"      WHERE x>0\"",
          "6457:       \"    UNION\"",
          "6458:       \"  SELECT shell_int32(\"",
          "6459:       \"      (SELECT data FROM sqlite_dbpage WHERE pgno=trunk.pgno), 0) AS x \"",
          "6460:       \"      FROM trunk WHERE x>0\"",
          "6461:       \"),\"",
          "6462:       \"freelist(data, n, freepgno) AS (\"",
          "6463:       \"  SELECT data, shell_int32(data, 1)-1, t.pgno \"",
          "6464:       \"      FROM trunk t, sqlite_dbpage s WHERE s.pgno=t.pgno\"",
          "6465:       \"    UNION ALL\"",
          "6466:       \"  SELECT data, n-1, shell_int32(data, 2+n) \"",
          "6467:       \"      FROM freelist WHERE n>=0\"",
          "6468:       \")\"",
          "6469:       \"REPLACE INTO recovery.freelist SELECT freepgno FROM freelist;\"",
          "6470:     );",
          "6471:   }",
          "6473:   shellExec(pState->db, &rc,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6424:     \"    )\"",
          "6425:     \"    SELECT pgno FROM p WHERE (parent IS NULL OR pgno = orig)\"",
          "6426:     \") \"",
          "6428:     \"UPDATE recovery.map AS o SET intkey = (\"",
          "6429:     \"  SELECT substr(data, 1, 1)==X'0D' FROM sqlite_dbpage WHERE pgno=o.pgno\"",
          "6430:     \");\"",
          "",
          "[Removed Lines]",
          "6427:     \"FROM pages WHERE maxlen > 0;\"",
          "",
          "[Added Lines]",
          "6503:     \"FROM pages WHERE maxlen > 0 AND i NOT IN freelist;\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8cd2e4ae0370efc24aad29f6e2581ef650ca17c5",
      "candidate_info": {
        "commit_hash": "8cd2e4ae0370efc24aad29f6e2581ef650ca17c5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8cd2e4ae0370efc24aad29f6e2581ef650ca17c5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/altertab2.test",
          "test/altertab3.test",
          "test/autoindex5.test"
        ],
        "message": "Build and test fixes for SQLITE_OMIT_WINDOWFUNC builds.\n\nFossilOrigin-Name: 8824115a9776e876a3677f0cb479e311ee65584d43872b37766a146afec72d8f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/altertab2.test||test/altertab2.test",
          "test/altertab3.test||test/altertab3.test",
          "test/autoindex5.test||test/autoindex5.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4a4952d38e8177ed8d59aaa575410bebf76787dd6d801fdbdb809d4f8c670da0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1533:       }",
          "1534:     }",
          "1536:     if( IN_RENAME_OBJECT ){",
          "1537:       Window *pWin;",
          "1538:       for(pWin=p->pWinDefn; pWin; pWin=pWin->pNextWin){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1536: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1543:         }",
          "1544:       }",
          "1545:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1547: #endif",
          "",
          "---------------"
        ],
        "test/altertab2.test||test/altertab2.test": [
          "File: test/altertab2.test -> test/altertab2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "179: }",
          "181: #-------------------------------------------------------------------------",
          "182: do_execsql_test 5.0 {",
          "183:   CREATE TABLE t2(a);",
          "184:   CREATE TRIGGER r2 AFTER INSERT ON t2 WHEN new.a NOT NULL BEGIN",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182: ifcapable windowfunc {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235: do_execsql_test 5.3 {",
          "236:   INSERT INTO t2x VALUES(1);",
          "237: } {}",
          "239: #-------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "239: } ;# windowfunc",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE t1(a, b);",
          "25:   CREATE TRIGGER tr1 AFTER INSERT ON t1 BEGIN",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: ifcapable windowfunc {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: do_execsql_test 1.3 {",
          "41:   INSERT INTO t1 VALUES(1, 2);",
          "42: }",
          "44: #-------------------------------------------------------------------------",
          "45: reset_db",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: } ;# windowfunc",
          "",
          "---------------"
        ],
        "test/autoindex5.test||test/autoindex5.test": [
          "File: test/autoindex5.test -> test/autoindex5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: # Segfault due to multiple uses of the same subquery where the",
          "129: # subquery is implemented via coroutine.",
          "130: #",
          "131: sqlite3 db :memory:",
          "132: do_execsql_test 3.0 {",
          "133:   -- This is the original test case reported on the mailing list",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: ifcapable windowfunc {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:       AND (albums.id IN (1, 2)))",
          "167:   ));",
          "168: } {1 Ar}",
          "169: # The remaining test cases were discovered (by Dan) during trouble-shooting",
          "170: sqlite3 db :memory:",
          "171: do_execsql_test 3.1 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170: } ;# windowfunc",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "00c12a51e3f69ca8f1a01447bfae8216a3039a53",
      "candidate_info": {
        "commit_hash": "00c12a51e3f69ca8f1a01447bfae8216a3039a53",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/00c12a51e3f69ca8f1a01447bfae8216a3039a53",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/select1.test"
        ],
        "message": "Fix faulty asserts in the code generator. Ticket [c52b09c7f38903b1]\n\nFossilOrigin-Name: 01cdc590f7894ea23ee0d674747d7ebf8196efbef3c87d47e72dbc1ab6ae2883",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/select1.test||test/select1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9c458acba5a100a76148a3efb78ea9f57b85751e80788e4532694bd8976608a0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "5873:     assert( pItem->addrFillSub==0 );",
          "",
          "[Added Lines]",
          "5880:     testcase( pItem->addrFillSub!=0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5944:       int retAddr;",
          "5945:       struct SrcList_item *pPrior;",
          "5948:       pItem->regReturn = ++pParse->nMem;",
          "5949:       topAddr = sqlite3VdbeAddOp2(v, OP_Integer, 0, pItem->regReturn);",
          "5950:       pItem->addrFillSub = topAddr+1;",
          "",
          "[Removed Lines]",
          "5947:       assert( pItem->addrFillSub==0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/select1.test||test/select1.test": [
          "File: test/select1.test -> test/select1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1100:          UNION ALL SELECT * FROM t2 WHERE y=3 ORDER BY y,z LIMIT 4);",
          "1101: } {1 2 3}",
          "1103: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1103: # 2019-07-24 Ticket https://sqlite.org/src/tktview/c52b09c7f38903b1311",
          "1104: #",
          "1105: do_execsql_test select1-18.1 {",
          "1106:   DROP TABLE IF EXISTS t1;",
          "1107:   DROP TABLE IF EXISTS t2;",
          "1108:   CREATE TABLE t1(c);",
          "1109:   CREATE TABLE t2(x PRIMARY KEY, y);",
          "1110:   INSERT INTO t1(c) VALUES(123);",
          "1111:   INSERT INTO t2(x) VALUES(123);",
          "1112:   SELECT x FROM t2, t1 WHERE x BETWEEN c AND null OR x AND",
          "1113:   x IN ((SELECT x FROM (SELECT x FROM t2, t1",
          "1114:   WHERE x BETWEEN (SELECT x FROM (SELECT x COLLATE rtrim",
          "1115:   FROM t2, t1 WHERE x BETWEEN c AND null",
          "1116:   OR x AND x IN (c)), t1 WHERE x BETWEEN c AND null",
          "1117:   OR x AND x IN (c)) AND null",
          "1118:   OR NOT EXISTS(SELECT -4.81 FROM t1, t2 WHERE x BETWEEN c AND null",
          "1119:   OR x AND x IN ((SELECT x FROM (SELECT x FROM t2, t1",
          "1120:   WHERE x BETWEEN (SELECT x FROM (SELECT x BETWEEN c AND null",
          "1121:   OR x AND x IN (c)), t1 WHERE x BETWEEN c AND null",
          "1122:   OR x AND x IN (c)) AND null",
          "1123:   OR x AND x IN (c)), t1 WHERE x BETWEEN c AND null",
          "1124:   OR x AND x IN (c)))) AND x IN (c)",
          "1125:   ), t1 WHERE x BETWEEN c AND null",
          "1126:   OR x AND x IN (c)));",
          "1127: } {}",
          "1128: do_execsql_test select1-18.2 {",
          "1129:   DROP TABLE IF EXISTS t1;",
          "1130:   DROP TABLE IF EXISTS t2;",
          "1131:   CREATE TABLE t1(c);",
          "1132:   CREATE TABLE t2(x PRIMARY KEY, y);",
          "1133:   INSERT INTO t1(c) VALUES(123);",
          "1134:   INSERT INTO t2(x) VALUES(123);",
          "1135:   SELECT x FROM t2, t1 WHERE x BETWEEN c AND (c+1) OR x AND",
          "1136:   x IN ((SELECT x FROM (SELECT x FROM t2, t1",
          "1137:   WHERE x BETWEEN (SELECT x FROM (SELECT x COLLATE rtrim",
          "1138:   FROM t2, t1 WHERE x BETWEEN c AND (c+1)",
          "1139:   OR x AND x IN (c)), t1 WHERE x BETWEEN c AND (c+1)",
          "1140:   OR x AND x IN (c)) AND (c+1)",
          "1141:   OR NOT EXISTS(SELECT -4.81 FROM t1, t2 WHERE x BETWEEN c AND (c+1)",
          "1142:   OR x AND x IN ((SELECT x FROM (SELECT x FROM t2, t1",
          "1143:   WHERE x BETWEEN (SELECT x FROM (SELECT x BETWEEN c AND (c+1)",
          "1144:   OR x AND x IN (c)), t1 WHERE x BETWEEN c AND (c+1)",
          "1145:   OR x AND x IN (c)) AND (c+1)",
          "1146:   OR x AND x IN (c)), t1 WHERE x BETWEEN c AND (c+1)",
          "1147:   OR x AND x IN (c)))) AND x IN (c)",
          "1148:   ), t1 WHERE x BETWEEN c AND (c+1)",
          "1149:   OR x AND x IN (c)));",
          "1150: } {123}",
          "1151: do_execsql_test select1-18.3 {",
          "1152:   SELECT 1 FROM t1 WHERE (",
          "1153:     SELECT 2 FROM t2 WHERE (",
          "1154:       SELECT 3 FROM (",
          "1155:         SELECT x FROM t2 WHERE x=c OR x=(SELECT x FROM (VALUES(0)))",
          "1156:       ) WHERE x>c OR x=c",
          "1157:     )",
          "1158:   );",
          "1159: } {1}",
          "1160: do_execsql_test select1-18.4 {",
          "1161:   SELECT 1 FROM t1, t2 WHERE (",
          "1162:     SELECT 3 FROM (",
          "1163:       SELECT x FROM t2 WHERE x=c OR x=(SELECT x FROM (VALUES(0)))",
          "1164:     ) WHERE x>c OR x=c",
          "1165:   );",
          "1166: } {1}",
          "",
          "---------------"
        ]
      }
    }
  ]
}