{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "10c0e7115b2ed28a2af6f3b59a9c2862b1b25f9d",
      "candidate_info": {
        "commit_hash": "10c0e7115b2ed28a2af6f3b59a9c2862b1b25f9d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/10c0e7115b2ed28a2af6f3b59a9c2862b1b25f9d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/loadext.c",
          "src/malloc.c",
          "src/pragma.c",
          "src/pragma.h",
          "src/sqlite.h.in",
          "src/sqlite3ext.h",
          "src/test1.c",
          "src/treeview.c",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Add the sqlite3_hard_heap_limit64() interface and the corresponding \"PRAGMA hard_heap_limit=N\" command.\n\nFossilOrigin-Name: b0ccef61a7f92d20228becbf4f997bf0f4e46dad2deaf0896dc63b976ad1dd11",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/loadext.c||src/loadext.c",
          "src/malloc.c||src/malloc.c",
          "src/pragma.c||src/pragma.c",
          "src/pragma.h||src/pragma.h",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqlite3ext.h||src/sqlite3ext.h",
          "src/test1.c||src/test1.c",
          "src/treeview.c||src/treeview.c",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7be6222c9ec44596e4eddd906c831eb1272b90fbdf68641d791f216264feb7cf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/loadext.c||src/loadext.c": [
          "File: src/loadext.c -> src/loadext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "461: #endif",
          "463:   sqlite3_stmt_isexplain,",
          "465: };",
          "",
          "[Removed Lines]",
          "464:   sqlite3_value_frombind",
          "",
          "[Added Lines]",
          "464:   sqlite3_value_frombind,",
          "466:   sqlite3_hard_heap_limit64",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:     sqlite3_mutex_leave(mem0.mutex);",
          "92:     return priorLimit;",
          "93:   }",
          "94:   mem0.alarmThreshold = n;",
          "95:   nUsed = sqlite3StatusValue(SQLITE_STATUS_MEMORY_USED);",
          "96:   mem0.nearlyFull = (n>0 && n<=nUsed);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:   if( mem0.hardLimit>0 && (n>mem0.hardLimit || n==0) ){",
          "103:     n = mem0.hardLimit;",
          "104:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:   sqlite3_soft_heap_limit64(n);",
          "105: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130: sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 n){",
          "131:   sqlite3_int64 priorLimit;",
          "132: #ifndef SQLITE_OMIT_AUTOINIT",
          "133:   int rc = sqlite3_initialize();",
          "134:   if( rc ) return -1;",
          "135: #endif",
          "136:   sqlite3_mutex_enter(mem0.mutex);",
          "137:   priorLimit = mem0.hardLimit;",
          "138:   if( n>=0 ){",
          "139:     mem0.hardLimit = n;",
          "140:     if( n<mem0.alarmThreshold || mem0.alarmThreshold==0 ){",
          "141:       mem0.alarmThreshold = n;",
          "142:     }",
          "143:   }",
          "144:   sqlite3_mutex_leave(mem0.mutex);",
          "145:   return priorLimit;",
          "146: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203:     if( nUsed >= mem0.alarmThreshold - nFull ){",
          "204:       mem0.nearlyFull = 1;",
          "205:       sqlite3MallocAlarm(nFull);",
          "206:     }else{",
          "207:       mem0.nearlyFull = 0;",
          "208:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:       if( mem0.hardLimit ){",
          "249:         nUsed = sqlite3StatusValue(SQLITE_STATUS_MEMORY_USED);",
          "250:         if( nUsed >= mem0.hardLimit - nFull ){",
          "252:           return;",
          "253:         }",
          "254:       }",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2064:     break;",
          "2065:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2078:   case PragTyp_HARD_HEAP_LIMIT: {",
          "2079:     sqlite3_int64 N;",
          "2080:     if( zRight && sqlite3DecOrHexToI64(zRight, &N)==SQLITE_OK ){",
          "2081:       sqlite3_int64 iPrior = sqlite3_hard_heap_limit64(-1);",
          "2082:       if( N>0 && (iPrior==0 || iPrior>N) ) sqlite3_hard_heap_limit64(N);",
          "2083:     }",
          "2084:     returnSingleInt(v, sqlite3_soft_heap_limit64(-1));",
          "2085:     break;",
          "2086:   }",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #define PragTyp_FOREIGN_KEY_CHECK             13",
          "22: #define PragTyp_FOREIGN_KEY_LIST              14",
          "23: #define PragTyp_FUNCTION_LIST                 15",
          "",
          "[Removed Lines]",
          "24: #define PragTyp_INCREMENTAL_VACUUM            16",
          "25: #define PragTyp_INDEX_INFO                    17",
          "26: #define PragTyp_INDEX_LIST                    18",
          "27: #define PragTyp_INTEGRITY_CHECK               19",
          "28: #define PragTyp_JOURNAL_MODE                  20",
          "29: #define PragTyp_JOURNAL_SIZE_LIMIT            21",
          "30: #define PragTyp_LOCK_PROXY_FILE               22",
          "31: #define PragTyp_LOCKING_MODE                  23",
          "32: #define PragTyp_PAGE_COUNT                    24",
          "33: #define PragTyp_MMAP_SIZE                     25",
          "34: #define PragTyp_MODULE_LIST                   26",
          "35: #define PragTyp_OPTIMIZE                      27",
          "36: #define PragTyp_PAGE_SIZE                     28",
          "37: #define PragTyp_PRAGMA_LIST                   29",
          "38: #define PragTyp_SECURE_DELETE                 30",
          "39: #define PragTyp_SHRINK_MEMORY                 31",
          "40: #define PragTyp_SOFT_HEAP_LIMIT               32",
          "41: #define PragTyp_SYNCHRONOUS                   33",
          "42: #define PragTyp_TABLE_INFO                    34",
          "43: #define PragTyp_TEMP_STORE                    35",
          "44: #define PragTyp_TEMP_STORE_DIRECTORY          36",
          "45: #define PragTyp_THREADS                       37",
          "46: #define PragTyp_WAL_AUTOCHECKPOINT            38",
          "47: #define PragTyp_WAL_CHECKPOINT                39",
          "48: #define PragTyp_ACTIVATE_EXTENSIONS           40",
          "49: #define PragTyp_HEXKEY                        41",
          "50: #define PragTyp_KEY                           42",
          "51: #define PragTyp_LOCK_STATUS                   43",
          "52: #define PragTyp_STATS                         44",
          "",
          "[Added Lines]",
          "24: #define PragTyp_HARD_HEAP_LIMIT               16",
          "25: #define PragTyp_INCREMENTAL_VACUUM            17",
          "26: #define PragTyp_INDEX_INFO                    18",
          "27: #define PragTyp_INDEX_LIST                    19",
          "28: #define PragTyp_INTEGRITY_CHECK               20",
          "29: #define PragTyp_JOURNAL_MODE                  21",
          "30: #define PragTyp_JOURNAL_SIZE_LIMIT            22",
          "31: #define PragTyp_LOCK_PROXY_FILE               23",
          "32: #define PragTyp_LOCKING_MODE                  24",
          "33: #define PragTyp_PAGE_COUNT                    25",
          "34: #define PragTyp_MMAP_SIZE                     26",
          "35: #define PragTyp_MODULE_LIST                   27",
          "36: #define PragTyp_OPTIMIZE                      28",
          "37: #define PragTyp_PAGE_SIZE                     29",
          "38: #define PragTyp_PRAGMA_LIST                   30",
          "39: #define PragTyp_SECURE_DELETE                 31",
          "40: #define PragTyp_SHRINK_MEMORY                 32",
          "41: #define PragTyp_SOFT_HEAP_LIMIT               33",
          "42: #define PragTyp_SYNCHRONOUS                   34",
          "43: #define PragTyp_TABLE_INFO                    35",
          "44: #define PragTyp_TEMP_STORE                    36",
          "45: #define PragTyp_TEMP_STORE_DIRECTORY          37",
          "46: #define PragTyp_THREADS                       38",
          "47: #define PragTyp_WAL_AUTOCHECKPOINT            39",
          "48: #define PragTyp_WAL_CHECKPOINT                40",
          "49: #define PragTyp_ACTIVATE_EXTENSIONS           41",
          "50: #define PragTyp_HEXKEY                        42",
          "51: #define PragTyp_KEY                           43",
          "52: #define PragTyp_LOCK_STATUS                   44",
          "53: #define PragTyp_STATS                         45",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "319: #endif",
          "320: #endif",
          "321: #if defined(SQLITE_HAS_CODEC)",
          "322:  {/* zName:     */ \"hexkey\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:  {/* zName:     */ \"hard_heap_limit\",",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6089: sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 N);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6103: sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 N);",
          "",
          "---------------"
        ],
        "src/sqlite3ext.h||src/sqlite3ext.h": [
          "File: src/sqlite3ext.h -> src/sqlite3ext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "323:   int (*stmt_isexplain)(sqlite3_stmt*);",
          "324:   int (*value_frombind)(sqlite3_value*);",
          "325: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "326:   sqlite3_int64 (*hard_heap_limit64)(sqlite3_int64);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "615: #define sqlite3_stmt_isexplain         sqlite3_api->isexplain",
          "616: #define sqlite3_value_frombind         sqlite3_api->frombind",
          "619: #if !defined(SQLITE_CORE) && !defined(SQLITE_OMIT_LOAD_EXTENSION)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "620: #define sqlite3_hard_heap_limit64      sqlite3_api->hard_heap_limit64",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5477:   return TCL_OK;",
          "5478: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5487: static int SQLITE_TCLAPI test_hard_heap_limit(",
          "5488:   void * clientData,",
          "5489:   Tcl_Interp *interp,",
          "5490:   int objc,",
          "5491:   Tcl_Obj *CONST objv[]",
          "5492: ){",
          "5493:   sqlite3_int64 amt;",
          "5494:   Tcl_WideInt N = -1;",
          "5495:   if( objc!=1 && objc!=2 ){",
          "5496:     Tcl_WrongNumArgs(interp, 1, objv, \"?N?\");",
          "5497:     return TCL_ERROR;",
          "5498:   }",
          "5499:   if( objc==2 ){",
          "5500:     if( Tcl_GetWideIntFromObj(interp, objv[1], &N) ) return TCL_ERROR;",
          "5501:   }",
          "5502:   amt = sqlite3_hard_heap_limit64(N);",
          "5503:   Tcl_SetObjResult(interp, Tcl_NewWideIntObj(amt));",
          "5504:   return TCL_OK;",
          "5505: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7880:      { \"sqlite3_db_filename\",           test_db_filename,        0},",
          "7881:      { \"sqlite3_db_readonly\",           test_db_readonly,        0},",
          "7882:      { \"sqlite3_soft_heap_limit\",       test_soft_heap_limit,    0},",
          "7883:      { \"sqlite3_thread_cleanup\",        test_thread_cleanup,     0},",
          "7884:      { \"sqlite3_pager_refcounts\",       test_pager_refcounts,    0},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7910:      { \"sqlite3_soft_heap_limit64\",     test_soft_heap_limit,    0},",
          "7911:      { \"sqlite3_hard_heap_limit64\",     test_hard_heap_limit,    0},",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     va_start(ap, zFormat);",
          "67:     sqlite3_str_vappendf(&acc, zFormat, ap);",
          "68:     va_end(ap);",
          "70:     sqlite3_str_append(&acc, \"\\n\", 1);",
          "71:   }",
          "72:   sqlite3StrAccumFinish(&acc);",
          "",
          "[Removed Lines]",
          "69:     assert( acc.nChar>0 );",
          "",
          "[Added Lines]",
          "69:     assert( acc.nChar>0 || acc.accError );",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "405:   NAME: soft_heap_limit",
          "406:   FLAG: Result0",
          "408:   NAME: threads",
          "409:   FLAG: Result0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "408:   NAME: hard_heap_limit",
          "409:   FLAG: Result0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3d8e7a2f9778f969f57858e89c0fc3aaf862d4f8",
      "candidate_info": {
        "commit_hash": "3d8e7a2f9778f969f57858e89c0fc3aaf862d4f8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3d8e7a2f9778f969f57858e89c0fc3aaf862d4f8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Change the assert() back into a testcase().  See also check-ins [9ab985a9c8160b90] and [ddb17d92df194337] and other check-ins that those reference.  Fix for ticket [9d708e474201c001]\n\nFossilOrigin-Name: 2c44c73499154bc57634a54cb743642d0aacc93a1336fbb8bb3eb5dbbf616357",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 36fdeb4f0a66970a35de688b617f90899c89cfdfab659f864df99aa7ebf854ea",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2028:       if( (flags1 | flags3)&MEM_Str ){",
          "2029:         if( (flags1 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "2030:           applyNumericAffinity(pIn1,0);",
          "2037:           flags3 = pIn3->flags;",
          "2038:         }",
          "2039:         if( (flags3 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "",
          "[Removed Lines]",
          "2031:           assert( flags3==pIn3->flags );",
          "",
          "[Added Lines]",
          "2031:           testcase( flags3!=pIn3->flags );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1548d5276ff53f78130ef0adfe6397d24f88ad3c",
      "candidate_info": {
        "commit_hash": "1548d5276ff53f78130ef0adfe6397d24f88ad3c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1548d5276ff53f78130ef0adfe6397d24f88ad3c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "test/fuzzdata8.db"
        ],
        "message": "Do not continue an ALTER TABLE tree walk of a subquery if a prior error is seen in the tree.  Report the problem immediately, without continuing.\n\nFossilOrigin-Name: 01ca865f31c0c817ede7f357401ef76cf311ae662397908464f53e1c147f5b6b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 07beb3629e648e7feae4e786191514339ac1d8f6ba5bb6e7cc8a04bc1f1cd6ab",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1527:             assert( pSelect->selFlags & SF_View );",
          "1528:             pSelect->selFlags &= ~SF_View;",
          "1529:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
          "1532:           }",
          "1533:         }else{",
          "",
          "[Removed Lines]",
          "1530:             if( sParse.nErr ) rc = sParse.rc;",
          "1531:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
          "",
          "[Added Lines]",
          "1530:             if( sParse.nErr ){",
          "1531:               rc = sParse.rc;",
          "1532:             }else{",
          "1533:               sqlite3WalkSelect(&sWalker, pTab->pSelect);",
          "1534:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1cd73f671d55d3f59f93e4949aba54de7f9bf66",
      "candidate_info": {
        "commit_hash": "e1cd73f671d55d3f59f93e4949aba54de7f9bf66",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e1cd73f671d55d3f59f93e4949aba54de7f9bf66",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Minor changes for better test coverage.\n\nFossilOrigin-Name: ae3ac297d2deee2a687ae2e9cf98aaf3e1b41196363238101a19d38092aebec6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 949eec2530bbe7f48daddfb3022d60ea5d7a43f0f5d120e71c682054feb721db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1717:       int n = ai[0];   /* The first element of an INTARRAY is always the",
          "1719:       for(i=1; i<=n; i++){",
          "1721:       }",
          "1723:       sqlite3_str_append(&x, \"]\", 1);",
          "1724:       break;",
          "1725:     }",
          "",
          "[Removed Lines]",
          "1720:         sqlite3_str_appendf(&x, \",%d\", ai[i]);",
          "1722:       if( !x.accError ) x.zText[0] = '[';",
          "",
          "[Added Lines]",
          "1720:         sqlite3_str_appendf(&x, \"%c%d\", (i==1 ? '[' : ','), ai[i]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1740:     }",
          "1741:   }",
          "1742:   if( zP4 ) sqlite3_str_appendall(&x, zP4);",
          "1744:     sqlite3OomFault(db);",
          "1745:   }",
          "1746:   return sqlite3StrAccumFinish(&x);",
          "",
          "[Removed Lines]",
          "1743:   if( (x.accError & SQLITE_NOMEM)!=0 && db!=0 ){",
          "",
          "[Added Lines]",
          "1742:   if( (x.accError & SQLITE_NOMEM)!=0 ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1834: void sqlite3VdbePrintOp(FILE *pOut, int pc, VdbeOp *pOp){",
          "1835:   char *zP4;",
          "1836:   char *zCom;",
          "1837:   static const char *zFormat1 = \"%4d %-13s %4d %4d %4d %-13s %.2X %s\\n\";",
          "1838:   if( pOut==0 ) pOut = stdout;",
          "1840: #ifdef SQLITE_ENABLE_EXPLAIN_COMMENTS",
          "1841:   zCom = sqlite3VdbeDisplayComment(0, pOp, zP4);",
          "1842: #else",
          "",
          "[Removed Lines]",
          "1839:   zP4 = sqlite3VdbeDisplayP4(0, pOp);",
          "",
          "[Added Lines]",
          "1836:   sqlite3 dummyDb;",
          "1839:   dummyDb.mallocFailed = 1;",
          "1840:   zP4 = sqlite3VdbeDisplayP4(&dummyDb, pOp);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe03dac236fb191c03bef60c30abbfa35e648e4c",
      "candidate_info": {
        "commit_hash": "fe03dac236fb191c03bef60c30abbfa35e648e4c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fe03dac236fb191c03bef60c30abbfa35e648e4c",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "Add the new -S option to the lemon parser generator to cause it to output SQL that describes the input grammar.\n\nFossilOrigin-Name: 4dbd398d640852d4a696d68c72ee039968023d402a8053b5e6b4ef1d75e982a8",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1053: parse.c: $(TOP)/src/parse.y lemon$(BEXE)",
          "1054:  cp $(TOP)/src/parse.y .",
          "1057: sqlite3.h: $(TOP)/src/sqlite.h.in $(TOP)/manifest mksourceid$(BEXE) $(TOP)/VERSION",
          "1058:  $(TCLSH_CMD) $(TOP)/tool/mksqlite3h.tcl $(TOP) >sqlite3.h",
          "",
          "[Removed Lines]",
          "1055:  ./lemon$(BEXE) $(OPT_FEATURE_FLAGS) $(OPTS) parse.y",
          "",
          "[Added Lines]",
          "1055:  ./lemon$(BEXE) $(OPT_FEATURE_FLAGS) $(OPTS) -S parse.y",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1180: fts5parse.c: $(TOP)/ext/fts5/fts5parse.y lemon",
          "1181:  cp $(TOP)/ext/fts5/fts5parse.y .",
          "1182:  rm -f fts5parse.h",
          "1185: fts5parse.h: fts5parse.c",
          "",
          "[Removed Lines]",
          "1183:  ./lemon$(BEXE) $(OPTS) fts5parse.y",
          "",
          "[Added Lines]",
          "1183:  ./lemon$(BEXE) $(OPTS) -S fts5parse.y",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2141: parse.c: $(TOP)\\src\\parse.y lemon.exe",
          "2142:  del /Q parse.y parse.h parse.h.temp 2>NUL",
          "2143:  copy $(TOP)\\src\\parse.y .",
          "2146: $(SQLITE3H): $(TOP)\\src\\sqlite.h.in $(TOP)\\manifest mksourceid.exe $(TOP)\\VERSION",
          "2147:  $(TCLSH_CMD) $(TOP)\\tool\\mksqlite3h.tcl $(TOP:\\=/) > $(SQLITE3H) $(MKSQLITE3H_ARGS)",
          "",
          "[Removed Lines]",
          "2144:  .\\lemon.exe $(REQ_FEATURE_FLAGS) $(OPT_FEATURE_FLAGS) $(EXT_FEATURE_FLAGS) $(OPTS) parse.y",
          "",
          "[Added Lines]",
          "2144:  .\\lemon.exe $(REQ_FEATURE_FLAGS) $(OPT_FEATURE_FLAGS) $(EXT_FEATURE_FLAGS) $(OPTS) -S parse.y",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2301: fts5parse.c: $(TOP)\\ext\\fts5\\fts5parse.y lemon.exe",
          "2302:  copy $(TOP)\\ext\\fts5\\fts5parse.y .",
          "2303:  del /Q fts5parse.h 2>NUL",
          "2306: fts5parse.h: fts5parse.c",
          "",
          "[Removed Lines]",
          "2304:  .\\lemon.exe $(REQ_FEATURE_FLAGS) $(OPT_FEATURE_FLAGS) $(EXT_FEATURE_FLAGS) $(OPTS) fts5parse.y",
          "",
          "[Added Lines]",
          "2304:  .\\lemon.exe $(REQ_FEATURE_FLAGS) $(OPT_FEATURE_FLAGS) $(EXT_FEATURE_FLAGS) $(OPTS) -S fts5parse.y",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5d9a369301a65f320a0696fcf1f062ca5976ef34350590c07aecf5335c66d872",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219: void Reprint(struct lemon *);",
          "220: void ReportOutput(struct lemon *);",
          "222: void ReportHeader(struct lemon *);",
          "223: void CompressTables(struct lemon *);",
          "224: void ResortStates(struct lemon *);",
          "",
          "[Removed Lines]",
          "221: void ReportTable(struct lemon *, int);",
          "",
          "[Added Lines]",
          "221: void ReportTable(struct lemon *, int, int);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1632:   static int mhflag = 0;",
          "1633:   static int nolinenosflag = 0;",
          "1634:   static int noResort = 0;",
          "1636:   static struct s_options options[] = {",
          "1637:     {OPT_FLAG, \"b\", (char*)&basisflag, \"Print only the basis in report.\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1635:   static int sqlFlag = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1650:     {OPT_FLAG, \"r\", (char*)&noResort, \"Do not sort or renumber states\"},",
          "1651:     {OPT_FLAG, \"s\", (char*)&statistics,",
          "1652:                                    \"Print parser stats to standard output.\"},",
          "1653:     {OPT_FLAG, \"x\", (char*)&version, \"Print the version number.\"},",
          "1654:     {OPT_FSTR, \"T\", (char*)handle_T_option, \"Specify a template file.\"},",
          "1655:     {OPT_FSTR, \"W\", 0, \"Ignored.  (Placeholder for '-W' compiler options.)\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1654:     {OPT_FLAG, \"S\", (char*)&sqlFlag,",
          "1655:                     \"Generate the *.sql file describing the parser tables.\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1758:     if( !quiet ) ReportOutput(&lem);",
          "",
          "[Removed Lines]",
          "1761:     ReportTable(&lem, mhflag);",
          "",
          "[Added Lines]",
          "1764:     ReportTable(&lem, mhflag, sqlFlag);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4144: void ReportTable(",
          "4145:   struct lemon *lemp,",
          "4147: ){",
          "4149:   char line[LINESIZE];",
          "4150:   int  lineno;",
          "4151:   struct state *stp;",
          "",
          "[Removed Lines]",
          "4148:   FILE *out, *in;",
          "",
          "[Added Lines]",
          "4152:   FILE *out, *in, *sql;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4175:     fclose(in);",
          "4176:     return;",
          "4177:   }",
          "4178:   lineno = 1;",
          "4179:   tplt_xfer(lemp->name,in,out,&lineno);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4182:   if( sqlFlag==0 ){",
          "4183:     sql = 0;",
          "4184:   }else{",
          "4185:     sql = file_open(lemp, \".sql\", \"wb\");",
          "4186:     if( sql==0 ){",
          "4187:       fclose(in);",
          "4188:       fclose(out);",
          "4189:       return;",
          "4190:     }",
          "4191:     fprintf(sql,",
          "4192:        \"CREATE TABLE symbol(\\n\"",
          "4193:        \"  id INTEGER PRIMARY KEY,\\n\"",
          "4194:        \"  name TEXT NOT NULL,\\n\"",
          "4195:        \"  isTerminal BOOLEAN NOT NULL,\\n\"",
          "4196:        \"  fallback INTEGER REFERENCES symbol\\n\"",
          "4197:        \");\\n\"",
          "4198:     );",
          "4199:     for(i=0; i<lemp->nsymbol; i++){",
          "4200:       fprintf(sql,",
          "4201:          \"INSERT INTO symbol(id,name,isTerminal,fallback)\"",
          "4202:          \"VALUES(%d,'%s',%s\",",
          "4203:          i, lemp->symbols[i]->name,",
          "4204:          i<lemp->nterminal ? \"TRUE\" : \"FALSE\"",
          "4205:       );",
          "4206:       if( lemp->symbols[i]->fallback ){",
          "4207:         fprintf(sql, \",%d);\\n\", lemp->symbols[i]->fallback->index);",
          "4208:       }else{",
          "4209:         fprintf(sql, \",NULL);\\n\");",
          "4210:       }",
          "4211:     }",
          "4212:     fprintf(sql,",
          "4213:       \"CREATE TABLE rule(\\n\"",
          "4214:       \"  ruleid INTEGER PRIMARY KEY,\\n\"",
          "4215:       \"  lhs INTEGER REFERENCES symbol(id)\\n\"",
          "4216:       \");\\n\"",
          "4217:       \"CREATE TABLE rulerhs(\\n\"",
          "4218:       \"  ruleid INTEGER REFERENCES rule(ruleid),\\n\"",
          "4219:       \"  pos INTEGER,\\n\"",
          "4220:       \"  sym INTEGER REFERENCES symbol(id)\\n\"",
          "4221:       \");\\n\"",
          "4222:     );",
          "4223:     for(i=0, rp=lemp->rule; rp; rp=rp->next, i++){",
          "4224:       assert( i==rp->iRule );",
          "4225:       fprintf(sql,",
          "4226:         \"INSERT INTO rule(ruleid,lhs)VALUES(%d,%d);\\n\",",
          "4227:         rp->iRule, rp->lhs->index",
          "4228:       );",
          "4229:       for(j=0; j<rp->nrhs; j++){",
          "4230:         struct symbol *sp = rp->rhs[j];",
          "4231:         if( sp->type!=MULTITERMINAL ){",
          "4232:           fprintf(sql,",
          "4233:             \"INSERT INTO rulerhs(ruleid,pos,sym)VALUES(%d,%d,%d);\\n\",",
          "4234:             i,j,sp->index",
          "4235:           );",
          "4236:         }else{",
          "4237:           int k;",
          "4238:           for(k=0; k<sp->nsubsym; k++){",
          "4239:             fprintf(sql,",
          "4240:               \"INSERT INTO rulerhs(ruleid,pos,sym)VALUES(%d,%d,%d);\\n\",",
          "4241:               i,j,sp->subsym[k]->index",
          "4242:             );",
          "4243:           }",
          "4244:         }",
          "4245:       }",
          "4246:     }",
          "4247:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4697:   acttab_free(pActtab);",
          "4698:   fclose(in);",
          "4699:   fclose(out);",
          "4700:   return;",
          "4701: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4770:   if( sql ) fclose(sql);",
          "",
          "---------------"
        ]
      }
    }
  ]
}