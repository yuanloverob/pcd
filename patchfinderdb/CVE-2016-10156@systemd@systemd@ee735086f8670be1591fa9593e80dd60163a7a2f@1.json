{
  "cve_id": "CVE-2016-10156",
  "cve_desc": "A flaw in systemd v228 in /src/basic/fs-util.c caused world writable suid files to be created when using the systemd timers features, allowing local attackers to escalate their privileges to root. This is fixed in v229.",
  "repo": "systemd/systemd",
  "patch_hash": "ee735086f8670be1591fa9593e80dd60163a7a2f",
  "patch_info": {
    "commit_hash": "ee735086f8670be1591fa9593e80dd60163a7a2f",
    "repo": "systemd/systemd",
    "commit_url": "https://github.com/systemd/systemd/commit/ee735086f8670be1591fa9593e80dd60163a7a2f",
    "files": [
      "src/basic/fs-util.c",
      "src/core/timer.c",
      "src/test/test-conf-files.c"
    ],
    "message": "util-lib: use MODE_INVALID as invalid value for mode_t everywhere",
    "before_after_code_files": [
      "src/basic/fs-util.c||src/basic/fs-util.c",
      "src/core/timer.c||src/core/timer.c",
      "src/test/test-conf-files.c||src/test/test-conf-files.c"
    ]
  },
  "patch_diff": {
    "src/basic/fs-util.c||src/basic/fs-util.c": [
      "File: src/basic/fs-util.c -> src/basic/fs-util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "311:         if (fd < 0)",
      "312:                 return -errno;",
      "315:                 r = fchmod(fd, mode);",
      "316:                 if (r < 0)",
      "317:                         return -errno;",
      "",
      "[Removed Lines]",
      "314:         if (mode > 0) {",
      "",
      "[Added Lines]",
      "314:         if (mode != MODE_INVALID) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "338: }",
      "340: int touch(const char *path) {",
      "342: }",
      "344: int symlink_idempotent(const char *from, const char *to) {",
      "",
      "[Removed Lines]",
      "341:         return touch_file(path, false, USEC_INFINITY, UID_INVALID, GID_INVALID, 0);",
      "",
      "[Added Lines]",
      "341:         return touch_file(path, false, USEC_INFINITY, UID_INVALID, GID_INVALID, MODE_INVALID);",
      "",
      "---------------"
    ],
    "src/core/timer.c||src/core/timer.c": [
      "File: src/core/timer.c -> src/core/timer.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "519:         dual_timestamp_get(&t->last_trigger);",
      "521:         if (t->stamp_path)",
      "524:         timer_set_state(t, TIMER_RUNNING);",
      "525:         return;",
      "",
      "[Removed Lines]",
      "522:                 touch_file(t->stamp_path, true, t->last_trigger.realtime, UID_INVALID, GID_INVALID, 0);",
      "",
      "[Added Lines]",
      "522:                 touch_file(t->stamp_path, true, t->last_trigger.realtime, UID_INVALID, GID_INVALID, MODE_INVALID);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "559:         }",
      "561:         t->result = TIMER_SUCCESS;",
      "",
      "[Removed Lines]",
      "558:                         touch_file(t->stamp_path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, 0);",
      "",
      "[Added Lines]",
      "558:                         touch_file(t->stamp_path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, MODE_INVALID);",
      "",
      "---------------"
    ],
    "src/test/test-conf-files.c||src/test/test-conf-files.c": [
      "File: src/test/test-conf-files.c -> src/test/test-conf-files.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #include \"conf-files.h\"",
      "27: #include \"fs-util.h\"",
      "28: #include \"macro.h\"",
      "29: #include \"rm-rf.h\"",
      "30: #include \"string-util.h\"",
      "31: #include \"strv.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: #include \"parse-util.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40:         va_start(ap, files);",
      "41:         while (files != NULL) {",
      "42:                 _cleanup_free_ char *path = strappend(tmp_dir, files);",
      "44:                 files = va_arg(ap, const char *);",
      "45:         }",
      "46:         va_end(ap);",
      "",
      "[Removed Lines]",
      "43:                 assert_se(touch_file(path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, 0) == 0);",
      "",
      "[Added Lines]",
      "44:                 assert_se(touch_file(path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, MODE_INVALID) == 0);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "176ee07b690a14b7f231eb719a8baa5d568c3657",
      "candidate_info": {
        "commit_hash": "176ee07b690a14b7f231eb719a8baa5d568c3657",
        "repo": "systemd/systemd",
        "commit_url": "https://github.com/systemd/systemd/commit/176ee07b690a14b7f231eb719a8baa5d568c3657",
        "files": [
          "src/journal/journalctl.c"
        ],
        "message": "journalctl: refuse to --machine= in combination with --flush, --sync or --rotate",
        "before_after_code_files": [
          "src/journal/journalctl.c||src/journal/journalctl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/systemd/systemd/pull/1854"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/journal/journalctl.c||src/journal/journalctl.c": [
          "File: src/journal/journalctl.c -> src/journal/journalctl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1771:         _cleanup_close_ int watch_fd = -1;",
          "1772:         int r;",
          "1775:         if (access(\"/run/systemd/journal/flushed\", F_OK) >= 0)",
          "1776:                 return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1774:         if (arg_machine) {",
          "1775:                 log_error(\"--flush is not supported in conjunction with --machine=.\");",
          "1776:                 return -EOPNOTSUPP;",
          "1777:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1828:         usec_t start;",
          "1829:         int r;",
          "1831:         start = now(CLOCK_REALTIME);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1836:         if (arg_machine) {",
          "1837:                 log_error(\"--sync and --rotate are not supported in conjunction with --machine=.\");",
          "1838:                 return -EOPNOTSUPP;",
          "1839:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "45f06b3450174a9649a51a0b48fdbbbe98f2bb5d",
      "candidate_info": {
        "commit_hash": "45f06b3450174a9649a51a0b48fdbbbe98f2bb5d",
        "repo": "systemd/systemd",
        "commit_url": "https://github.com/systemd/systemd/commit/45f06b3450174a9649a51a0b48fdbbbe98f2bb5d",
        "files": [
          "src/core/service.c"
        ],
        "message": "core: pull in dbus.socket from Type=dbus services\n\nDo so only on non-kdbus systems. And on non-kdbus systems don't bother\nwith .busname units.",
        "before_after_code_files": [
          "src/core/service.c||src/core/service.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/systemd/systemd/pull/1854"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/core/service.c||src/core/service.c": [
          "File: src/core/service.c -> src/core/service.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "516:         assert(s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "518:         if (!UNIT(s)->default_dependencies)",
          "519:                 return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "565:                 s->exec_context.std_output = UNIT(s)->manager->default_std_output;",
          "566: }",
          "568: static int service_add_extras(Service *s) {",
          "569:         int r;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "571: static int service_setup_bus_name(Service *s) {",
          "572:         int r;",
          "574:         assert(s);",
          "576:         if (!s->bus_name)",
          "577:                 return 0;",
          "579:         if (is_kdbus_available()) {",
          "580:                 const char *n;",
          "582:                 n = strjoina(s->bus_name, \".busname\");",
          "583:                 r = unit_add_dependency_by_name(UNIT(s), UNIT_AFTER, n, NULL, true);",
          "584:                 if (r < 0)",
          "585:                         return log_unit_error_errno(UNIT(s), r, \"Failed to add dependency to .busname unit: %m\");",
          "587:         } else {",
          "589:                 r = unit_add_dependency_by_name(UNIT(s), UNIT_REQUIRES, SPECIAL_DBUS_SOCKET, NULL, true);",
          "590:                 if (r < 0)",
          "591:                         return log_unit_error_errno(UNIT(s), r, \"Failed to add dependency on \" SPECIAL_DBUS_SOCKET \": %m\");",
          "592:         }",
          "595:         r = unit_add_dependency_by_name(UNIT(s), UNIT_AFTER, SPECIAL_DBUS_SOCKET, NULL, true);",
          "596:         if (r < 0)",
          "597:                 return log_unit_error_errno(UNIT(s), r, \"Failed to add depdendency on \" SPECIAL_DBUS_SOCKET \": %m\");",
          "599:         r = unit_watch_bus_name(UNIT(s), s->bus_name);",
          "600:         if (r == -EEXIST)",
          "601:                 return log_unit_error_errno(UNIT(s), r, \"Two services allocated for the same bus name %s, refusing operation.\", s->bus_name);",
          "602:         if (r < 0)",
          "603:                 return log_unit_error_errno(UNIT(s), r, \"Cannot watch bus name %s: %m\", s->bus_name);",
          "605:         return 0;",
          "606: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "604:         if (s->watchdog_usec > 0 && s->notify_access == NOTIFY_NONE)",
          "605:                 s->notify_access = NOTIFY_MAIN;",
          "628:         return 0;",
          "629: }",
          "",
          "[Removed Lines]",
          "607:         if (s->bus_name) {",
          "608:                 const char *n;",
          "610:                 n = strjoina(s->bus_name, \".busname\");",
          "611:                 r = unit_add_dependency_by_name(UNIT(s), UNIT_AFTER, n, NULL, true);",
          "612:                 if (r < 0)",
          "613:                         return r;",
          "615:                 r = unit_watch_bus_name(UNIT(s), s->bus_name);",
          "616:                 if (r == -EEXIST)",
          "617:                         return log_unit_error_errno(UNIT(s), r, \"Two services allocated for the same bus name %s, refusing operation.\", s->bus_name);",
          "618:                 if (r < 0)",
          "619:                         return log_unit_error_errno(UNIT(s), r, \"Cannot watch bus name %s: %m\", s->bus_name);",
          "620:         }",
          "622:         if (UNIT(s)->default_dependencies) {",
          "623:                 r = service_add_default_dependencies(s);",
          "624:                 if (r < 0)",
          "625:                         return r;",
          "626:         }",
          "",
          "[Added Lines]",
          "647:         r = service_add_default_dependencies(s);",
          "648:         if (r < 0)",
          "649:                 return r;",
          "651:         r = service_setup_bus_name(s);",
          "652:         if (r < 0)",
          "653:                 return r;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea0ec5cea734239bf1f25aa63c62853a4beae1ff",
      "candidate_info": {
        "commit_hash": "ea0ec5cea734239bf1f25aa63c62853a4beae1ff",
        "repo": "systemd/systemd",
        "commit_url": "https://github.com/systemd/systemd/commit/ea0ec5cea734239bf1f25aa63c62853a4beae1ff",
        "files": [
          "src/core/mount.c"
        ],
        "message": "core: simplify mount unit dependency generation a bit\n\nLet's make the code a bit more explicit. Should not change execution\nlogic in any way.",
        "before_after_code_files": [
          "src/core/mount.c||src/core/mount.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/systemd/systemd/pull/1854"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/core/mount.c||src/core/mount.c": [
          "File: src/core/mount.c -> src/core/mount.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "387: }",
          "389: static int mount_add_default_dependencies(Mount *m) {",
          "391:         MountParameters *p;",
          "392:         int r;",
          "394:         assert(m);",
          "",
          "[Removed Lines]",
          "390:         const char *after, *after2, *online;",
          "",
          "[Added Lines]",
          "391:         const char *after;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "416:                 return 0;",
          "418:         if (mount_is_network(p)) {",
          "434:                 if (r < 0)",
          "435:                         return r;",
          "440:                 if (r < 0)",
          "441:                         return r;",
          "444:         if (should_umount(m)) {",
          "445:                 r = unit_add_two_dependencies_by_name(UNIT(m), UNIT_BEFORE, UNIT_CONFLICTS, SPECIAL_UMOUNT_TARGET, NULL, true);",
          "",
          "[Removed Lines]",
          "419:                 after = SPECIAL_REMOTE_FS_PRE_TARGET;",
          "420:                 after2 = SPECIAL_NETWORK_TARGET;",
          "421:                 online = SPECIAL_NETWORK_ONLINE_TARGET;",
          "422:         } else {",
          "423:                 after = SPECIAL_LOCAL_FS_PRE_TARGET;",
          "424:                 after2 = NULL;",
          "425:                 online = NULL;",
          "426:         }",
          "428:         r = unit_add_dependency_by_name(UNIT(m), UNIT_AFTER, after, NULL, true);",
          "429:         if (r < 0)",
          "430:                 return r;",
          "432:         if (after2) {",
          "433:                 r = unit_add_dependency_by_name(UNIT(m), UNIT_AFTER, after2, NULL, true);",
          "436:         }",
          "438:         if (online) {",
          "439:                 r = unit_add_two_dependencies_by_name(UNIT(m), UNIT_WANTS, UNIT_AFTER, online, NULL, true);",
          "442:         }",
          "",
          "[Added Lines]",
          "425:                 r = unit_add_dependency_by_name(UNIT(m), UNIT_AFTER, SPECIAL_NETWORK_TARGET, NULL, true);",
          "436:                 r = unit_add_two_dependencies_by_name(UNIT(m), UNIT_WANTS, UNIT_AFTER, SPECIAL_NETWORK_ONLINE_TARGET, NULL, true);",
          "440:                 after = SPECIAL_REMOTE_FS_PRE_TARGET;",
          "441:         } else",
          "442:                 after = SPECIAL_LOCAL_FS_PRE_TARGET;",
          "444:         r = unit_add_dependency_by_name(UNIT(m), UNIT_AFTER, after, NULL, true);",
          "445:         if (r < 0)",
          "446:                 return r;",
          "",
          "---------------"
        ]
      }
    }
  ]
}