{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0e3c50c5dc156fd5f05d7284510c5905494f04db",
      "candidate_info": {
        "commit_hash": "0e3c50c5dc156fd5f05d7284510c5905494f04db",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0e3c50c5dc156fd5f05d7284510c5905494f04db",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window9.test"
        ],
        "message": "Eliminate some more cases of redundant sorting in window-function queries.\n\nFossilOrigin-Name: 8158d2aca68c5a253054376fdf1b8eaab2db874f4b93524742be7340e9c50dd5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 193c87fc96f964984a144c1a4506ef9db033ab2b80e64dd4d09d820fef466407",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "935:     pSort = sqlite3ExprListDup(db, pMWin->pPartition, 0);",
          "936:     pSort = exprListAppendList(pParse, pSort, pMWin->pOrderBy, 1);",
          "938:       if( sqlite3ExprListCompare(pSort, p->pOrderBy, -1)==0 ){",
          "939:         sqlite3ExprListDelete(db, p->pOrderBy);",
          "940:         p->pOrderBy = 0;",
          "941:       }",
          "942:     }",
          "",
          "[Removed Lines]",
          "937:     if( pSort && p->pOrderBy ){",
          "",
          "[Added Lines]",
          "937:     if( pSort && p->pOrderBy && p->pOrderBy->nExpr<=pSort->nExpr ){",
          "938:       int nSave = pSort->nExpr;",
          "939:       pSort->nExpr = p->pOrderBy->nExpr;",
          "944:       pSort->nExpr = nSave;",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   SELECT b, b=count(*), group_concat(b) OVER () FROM t1 GROUP BY b;",
          "146: } {1 0 1,2 2 1 1,2}",
          "150: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148: #--------------------------------------------------------------------------",
          "149: reset_db",
          "150: do_execsql_test 5.0 {",
          "151:   CREATE TABLE t1(a, b, c, d, e);",
          "152:   CREATE INDEX i1 ON t1(a, b, c, d, e);",
          "153: }",
          "155: foreach {tn sql} {",
          "156:   1 {",
          "157:     SELECT",
          "158:       sum(e) OVER (),",
          "159:       sum(e) OVER (ORDER BY a),",
          "160:       sum(e) OVER (PARTITION BY a ORDER BY b),",
          "161:       sum(e) OVER (PARTITION BY a, b ORDER BY c),",
          "162:       sum(e) OVER (PARTITION BY a, b, c ORDER BY d)",
          "163:     FROM t1;",
          "164:   }",
          "165:   2 {",
          "166:     SELECT sum(e) OVER (PARTITION BY a ORDER BY b) FROM t1 ORDER BY a;",
          "167:   }",
          "168: } {",
          "169:   do_test 5.1.$tn {",
          "170:     execsql \"EXPLAIN QUERY PLAN $sql\"",
          "171:   } {~/ORDER/}",
          "172: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4eac5f04ab996fc5bf262edfcead84bc4e8a3ccb",
      "candidate_info": {
        "commit_hash": "4eac5f04ab996fc5bf262edfcead84bc4e8a3ccb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4eac5f04ab996fc5bf262edfcead84bc4e8a3ccb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/fuzzdata8.db"
        ],
        "message": "Extra defense against problems following an OOM.  dbsqlfuzz find.  Also import the latest dbsqlfuzz test cases.\n\nFossilOrigin-Name: 0a70f5ddaf3567f335cc0fd0fcd5303e2afb5e38a6388faddf5cab1f2a74e3dd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a11b393dc2c882cf0b3c47c3405bf43ca1d6459605bd39cccce4d32da653a72d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2207:     case TK_COLUMN:",
          "2208:       return ExprHasProperty(p, EP_CanBeNull) ||",
          "2211:     default:",
          "2212:       return 1;",
          "2213:   }",
          "",
          "[Removed Lines]",
          "2210:              (p->iColumn>=0 && p->y.pTab->aCol[p->iColumn].notNull==0);",
          "",
          "[Added Lines]",
          "2210:              (p->iColumn>=0",
          "2212:               && p->y.pTab->aCol[p->iColumn].notNull==0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3224:   }else{",
          "3225:     destStep2 = destStep6 = sqlite3VdbeMakeLabel(pParse);",
          "3226:   }",
          "3227:   for(i=0; i<nVector; i++){",
          "3228:     Expr *p = sqlite3VectorFieldSubexpr(pExpr->pLeft, i);",
          "3229:     if( sqlite3ExprCanBeNull(p) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3229:   if( pParse->nErr ) goto sqlite3ExprCodeIN_finished;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a4c1bf85662b428235f99b92a07980191ba1e10",
      "candidate_info": {
        "commit_hash": "4a4c1bf85662b428235f99b92a07980191ba1e10",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4a4c1bf85662b428235f99b92a07980191ba1e10",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Make the result of sqlite3_normalized_sql() survive its statement being reprepared.\n\nFossilOrigin-Name: 4330f0795dbc2ab41dddd41d5979331fb9b78c477c66367c4be52f929531a45f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 175c15008e9f19b8f6762c2fe4a545735128765081980eed01d5e46ca4acb500",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:   zTmp = pA->zSql;",
          "134:   pA->zSql = pB->zSql;",
          "135:   pB->zSql = zTmp;",
          "137:   zTmp = pA->zNormSql;",
          "138:   pA->zNormSql = pB->zNormSql;",
          "139:   pB->zNormSql = zTmp;",
          "",
          "[Removed Lines]",
          "136: #if 0",
          "",
          "[Added Lines]",
          "136: #ifdef SQLITE_ENABLE_NORMALIZE",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62be2dc753b56629cf31b1d3d502edc00f768005",
      "candidate_info": {
        "commit_hash": "62be2dc753b56629cf31b1d3d502edc00f768005",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/62be2dc753b56629cf31b1d3d502edc00f768005",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window1.test"
        ],
        "message": "Avoid evaluating PARTITION BY or ORDER BY expressions multiple times for window function queries that use multiple window functions with the same window-definition.\n\nFossilOrigin-Name: 57070c68bbe15fc1d19a765182432e844c082909bdbc63b58fd86b96e2c521dd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ffeec62cb5223ae70bc1889df4c0b241f5d17b1a10156362ca59953028741480",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "788:     case TK_AGG_FUNCTION:",
          "789:     case TK_COLUMN: {",
          "792:       if( p->pSub ){",
          "793:         assert( ExprHasProperty(pExpr, EP_Static)==0 );",
          "794:         ExprSetProperty(pExpr, EP_Static);",
          "",
          "[Removed Lines]",
          "790:       Expr *pDup = sqlite3ExprDup(pParse->db, pExpr, 0);",
          "791:       p->pSub = sqlite3ExprListAppend(pParse, p->pSub, pDup);",
          "",
          "[Added Lines]",
          "790:       int iCol = -1;",
          "791:       if( p->pSub ){",
          "792:         int i;",
          "793:         for(i=0; i<p->pSub->nExpr; i++){",
          "794:           if( 0==sqlite3ExprCompare(0, p->pSub->a[i].pExpr, pExpr, -1) ){",
          "795:             iCol = i;",
          "796:             break;",
          "797:           }",
          "798:         }",
          "799:       }",
          "800:       if( iCol<0 ){",
          "801:         Expr *pDup = sqlite3ExprDup(pParse->db, pExpr, 0);",
          "802:         p->pSub = sqlite3ExprListAppend(pParse, p->pSub, pDup);",
          "803:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "797:         memset(pExpr, 0, sizeof(Expr));",
          "799:         pExpr->op = TK_COLUMN;",
          "801:         pExpr->iTable = p->pWin->iEphCsr;",
          "802:         pExpr->y.pTab = p->pTab;",
          "803:       }",
          "",
          "[Removed Lines]",
          "800:         pExpr->iColumn = p->pSub->nExpr-1;",
          "",
          "[Added Lines]",
          "812:         pExpr->iColumn = (iCol<0 ? p->pSub->nExpr-1: iCol);",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1256:   ORDER BY 1;",
          "1257: } {6 1}",
          "1259: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1259: reset_db",
          "1260: do_execsql_test 34.1 {",
          "1261:   CREATE TABLE t1(a,b,c);",
          "1262: }",
          "1263: do_execsql_test 34.2 {",
          "1264:   SELECT avg(a) OVER (",
          "1265:       ORDER BY (SELECT sum(b) OVER ()",
          "1266:         FROM t1 ORDER BY (",
          "1267:           SELECT total(d) OVER (ORDER BY c)",
          "1268:           FROM (SELECT 1 AS d) ORDER BY 1",
          "1269:           )",
          "1270:         )",
          "1271:       )",
          "1272:   FROM t1;",
          "1273: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57b1a3e30309c1b5f96aa1308722ac1dc3a5a29e",
      "candidate_info": {
        "commit_hash": "57b1a3e30309c1b5f96aa1308722ac1dc3a5a29e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/57b1a3e30309c1b5f96aa1308722ac1dc3a5a29e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in",
          "src/test_func.c",
          "src/vdbe.c",
          "src/vdbeInt.h",
          "src/vdbeapi.c",
          "test/func.test"
        ],
        "message": "Initial implementation of the sqlite3_value_frombind() interface.\n\nFossilOrigin-Name: 98da62dfdacc6b3c490c387d1f8a74cc5daa978776967e264ad4800c380b0ddf",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/test_func.c||src/test_func.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeapi.c||src/vdbeapi.c",
          "test/func.test||test/func.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 965cbcea117835d2c6d2ec58c8025b227f491c35805e282cb31228436bc6bec1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "5085: int sqlite3_value_type(sqlite3_value*);",
          "5086: int sqlite3_value_numeric_type(sqlite3_value*);",
          "5087: int sqlite3_value_nochange(sqlite3_value*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5095: int sqlite3_value_frombind(sqlite3_value*);",
          "",
          "---------------"
        ],
        "src/test_func.c||src/test_func.c": [
          "File: src/test_func.c -> src/test_func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "630:   sqlite3_result_int(context, (int)sqlite3_value_subtype(argv[0]));",
          "631: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "638: static void test_frombind(",
          "639:   sqlite3_context *context,",
          "640:   int argc,",
          "641:   sqlite3_value **argv",
          "642: ){",
          "643:   sqlite3_uint64 m = 0;",
          "644:   int i;",
          "645:   for(i=0; i<argc && i<63; i++){",
          "646:     if( sqlite3_value_frombind(argv[i]) ) m |= ((sqlite3_uint64)1)<<i;",
          "647:   }",
          "648:   sqlite3_result_int64(context, (sqlite3_int64)m);",
          "649: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "675:     { \"test_zeroblob\",  1, SQLITE_UTF8|SQLITE_DETERMINISTIC, test_zeroblob},",
          "676:     { \"test_getsubtype\",       1, SQLITE_UTF8, test_getsubtype},",
          "677:     { \"test_setsubtype\",       2, SQLITE_UTF8, test_setsubtype},",
          "678:   };",
          "679:   int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "696:     { \"test_frombind\",        -1, SQLITE_UTF8, test_frombind},",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1237:   }",
          "1238:   pOut = &aMem[pOp->p2];",
          "1239:   sqlite3VdbeMemShallowCopy(pOut, pVar, MEM_Static);",
          "1240:   UPDATE_MAX_BLOBSIZE(pOut);",
          "1241:   break;",
          "1242: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1240:   pOut->flags |= MEM_FromBind;",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "275:   return (pVal->flags&(MEM_Null|MEM_Zero))==(MEM_Null|MEM_Zero);",
          "276: }",
          "280: sqlite3_value *sqlite3_value_dup(const sqlite3_value *pOrig){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "279: int sqlite3_value_frombind(sqlite3_value *pVal){",
          "280:   return (pVal->flags&MEM_FromBind)!=0;",
          "281: }",
          "",
          "---------------"
        ],
        "test/func.test||test/func.test": [
          "File: test/func.test -> test/func.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1391: do_execsql_test func-31.1 {",
          "1392:   SELECT char(), length(char()), typeof(char())",
          "1393: } {{} 0 text}",
          "1394: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1395: # sqlite3_value_frombind()",
          "1396: #",
          "1397: do_execsql_test func-32.100 {",
          "1398:   SELECT test_frombind(1,2,3,4);",
          "1399: } {0}",
          "1400: do_execsql_test func-32.110 {",
          "1401:   SELECT test_frombind(1,2,?,4);",
          "1402: } {4}",
          "1403: do_execsql_test func-32.120 {",
          "1404:   SELECT test_frombind(1,(?),4,?+7);",
          "1405: } {2}",
          "1406: do_execsql_test func-32.130 {",
          "1407:   DROP TABLE IF EXISTS t1;",
          "1408:   CREATE TABLE t1(a,b,c,e,f);",
          "1409:   INSERT INTO t1 VALUES(1,2.5,'xyz',x'e0c1b2a3',null);",
          "1410:   SELECT test_frombind(a,b,c,e,f,$xyz) FROM t1;",
          "1411: } {32}",
          "1412: do_execsql_test func-32.140 {",
          "1413:   SELECT test_frombind(a,b,c,e,f,$xyz+f) FROM t1;",
          "1414: } {0}",
          "1415: do_execsql_test func-32.150 {",
          "1416:   SELECT test_frombind(x.a,y.b,x.c,:123,y.e,x.f,$xyz+y.f) FROM t1 x, t1 y;",
          "1417: } {8}",
          "",
          "---------------"
        ]
      }
    }
  ]
}