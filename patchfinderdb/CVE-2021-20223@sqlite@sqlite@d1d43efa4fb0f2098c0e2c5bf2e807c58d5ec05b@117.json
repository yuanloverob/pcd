{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "85f2c76cf9eeae30fb410c73c7427724dbb02182",
      "candidate_info": {
        "commit_hash": "85f2c76cf9eeae30fb410c73c7427724dbb02182",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/85f2c76cf9eeae30fb410c73c7427724dbb02182",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "When running ALTER TABLE, avoid adding some internally generated tokens to the token map to improve performance on schemas with nested views.\n\nFossilOrigin-Name: 4cf8721f5ceb1fdaefdc355b3211f75c53c4cdf9d2582ca70fc96777a9b057c2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 921448f0e24a3753374b32be9d7bf36a9ca5d8522eff9f0b51dc243f08652419",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1794:     assert( pItem->zEName==0 );",
          "1795:     assert( pItem->eEName==ENAME_NAME );",
          "1796:     pItem->zEName = sqlite3DbStrNDup(pParse->db, pName->z, pName->n);",
          "1800:     }",
          "1801:   }",
          "1802: }",
          "",
          "[Removed Lines]",
          "1797:     if( dequote ) sqlite3Dequote(pItem->zEName);",
          "1798:     if( IN_RENAME_OBJECT ){",
          "1799:       sqlite3RenameTokenMap(pParse, (void*)pItem->zEName, pName);",
          "",
          "[Added Lines]",
          "1797:     if( dequote ){",
          "1801:       sqlite3Dequote(pItem->zEName);",
          "1802:       if( IN_RENAME_OBJECT ){",
          "1803:         sqlite3RenameTokenMap(pParse, (void*)pItem->zEName, pName);",
          "1804:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8337da6678bc2f83c0ba84aec89c751cdeadf1e5",
      "candidate_info": {
        "commit_hash": "8337da6678bc2f83c0ba84aec89c751cdeadf1e5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8337da6678bc2f83c0ba84aec89c751cdeadf1e5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c"
        ],
        "message": "Modify the unixShmLock() function to avoid iterating through the (possibly large) set of connections to the same database file.\n\nFossilOrigin-Name: e0faddf0dfc3a40b6b94408296dd781dd0264ecc9f2129ce4405438433fb00e0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1a04920998368e56276fd0b100be8343609c6ff8a731cf8e26a0490f9c6dabdf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4795:   return rc;",
          "4796: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4806: #ifdef SQLITE_DEBUG",
          "4807: static int assertLockingArrayOk(unixShmNode *pShmNode){",
          "4808:   unixShm *pX;",
          "4809:   int aLock[SQLITE_SHM_NLOCK];",
          "4810:   assert( sqlite3_mutex_held(pShmNode->pShmMutex) );",
          "4812:   memset(aLock, 0, sizeof(aLock));",
          "4813:   for(pX=pShmNode->pFirst; pX; pX=pX->pNext){",
          "4814:     int i;",
          "4815:     for(i=0; i<SQLITE_SHM_NLOCK; i++){",
          "4816:       if( pX->exclMask & (1<<i) ){",
          "4817:         assert( aLock[i]==0 );",
          "4818:         aLock[i] = -1;",
          "4819:       }else if( pX->sharedMask & (1<<i) ){",
          "4820:         assert( aLock[i]>=0 );",
          "4821:         aLock[i]++;",
          "4822:       }",
          "4823:     }",
          "4824:   }",
          "4826:   assert( 0==memcmp(pShmNode->aLock, aLock, sizeof(aLock)) );",
          "4827:   return (memcmp(pShmNode->aLock, aLock, sizeof(aLock))==0);",
          "4828: }",
          "4829: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4811: ){",
          "4819:   assert( pShmNode==pDbFd->pInode->pShmNode );",
          "4820:   assert( pShmNode->pInode==pDbFd->pInode );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4850:   int *aLock = pShmNode->aLock;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4853:   mask = (1<<(ofst+n)) - (1<<ofst);",
          "4854:   assert( n>1 || mask==(1<<ofst) );",
          "4855:   sqlite3_mutex_enter(pShmNode->pShmMutex);",
          "4856:   if( flags & SQLITE_SHM_UNLOCK ){",
          "4864:     }",
          "4868:       rc = unixShmSystemLock(pDbFd, F_UNLCK, ofst+UNIX_SHM_BASE, n);",
          "4871:     }",
          "",
          "[Removed Lines]",
          "4860:     for(pX=pShmNode->pFirst; pX; pX=pX->pNext){",
          "4861:       if( pX==p ) continue;",
          "4862:       assert( (pX->exclMask & (p->exclMask|p->sharedMask))==0 );",
          "4863:       allMask |= pX->sharedMask;",
          "4867:     if( (mask & allMask)==0 ){",
          "4869:     }else{",
          "4870:       rc = SQLITE_OK;",
          "",
          "[Added Lines]",
          "4889:   assert( assertLockingArrayOk(pShmNode) );",
          "4891:     int ii;",
          "4892:     int bUnlock = 1;",
          "4894:     for(ii=ofst; ii<ofst+n; ii++){",
          "4895:       if( aLock[ii]>((p->sharedMask & (1<<ii)) ? 1 : 0) ){",
          "4896:         bUnlock = 0;",
          "4897:       }",
          "4900:     if( bUnlock ){",
          "4902:       if( rc==SQLITE_OK ){",
          "4903:         memset(&aLock[ofst], 0, sizeof(int)*n);",
          "4904:       }",
          "4905:     }else if( p->sharedMask & (1<<ofst) ){",
          "4906:       assert( n==1 && aLock[ofst]>1 );",
          "4907:       aLock[ofst]--;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4876:       p->sharedMask &= ~mask;",
          "4877:     }",
          "4878:   }else if( flags & SQLITE_SHM_SHARED ){",
          "4887:         rc = SQLITE_BUSY;",
          "4896:         rc = unixShmSystemLock(pDbFd, F_RDLCK, ofst+UNIX_SHM_BASE, n);",
          "4899:       }",
          "4905:     }",
          "4906:   }else{",
          "4912:         rc = SQLITE_BUSY;",
          "4913:         break;",
          "4914:       }",
          "4915:     }",
          "4920:     if( rc==SQLITE_OK ){",
          "4921:       rc = unixShmSystemLock(pDbFd, F_WRLCK, ofst+UNIX_SHM_BASE, n);",
          "4922:       if( rc==SQLITE_OK ){",
          "4923:         assert( (p->sharedMask & mask)==0 );",
          "4924:         p->exclMask |= mask;",
          "4925:       }",
          "4926:     }",
          "4927:   }",
          "4928:   sqlite3_mutex_leave(pShmNode->pShmMutex);",
          "4929:   OSTRACE((\"SHM-LOCK shmid-%d, pid-%d got %03x,%03x\\n\",",
          "4930:            p->id, osGetpid(0), p->sharedMask, p->exclMask));",
          "",
          "[Removed Lines]",
          "4885:     for(pX=pShmNode->pFirst; pX; pX=pX->pNext){",
          "4886:       if( (pX->exclMask & mask)!=0 ){",
          "4888:         break;",
          "4889:       }",
          "4890:       allShared |= pX->sharedMask;",
          "4891:     }",
          "4894:     if( rc==SQLITE_OK ){",
          "4895:       if( (allShared & mask)==0 ){",
          "4897:       }else{",
          "4898:         rc = SQLITE_OK;",
          "4900:     }",
          "4903:     if( rc==SQLITE_OK ){",
          "4904:       p->sharedMask |= mask;",
          "4910:     for(pX=pShmNode->pFirst; pX; pX=pX->pNext){",
          "4911:       if( (pX->exclMask & mask)!=0 || (pX->sharedMask & mask)!=0 ){",
          "",
          "[Added Lines]",
          "4916:     assert( n==1 );",
          "4917:     assert( (p->exclMask & (1<<ofst))==0 );",
          "4918:     if( (p->sharedMask & mask)==0 ){",
          "4919:       if( aLock[ofst]<0 ){",
          "4921:       }else if( aLock[ofst]==0 ){",
          "4926:       if( rc==SQLITE_OK ){",
          "4927:         p->sharedMask |= mask;",
          "4928:         aLock[ofst]++;",
          "4929:       }",
          "4934:     int ii;",
          "4935:     for(ii=ofst; ii<ofst+n; ii++){",
          "4936:       assert( (p->sharedMask & mask)==0 );",
          "4937:       if( (p->exclMask & (1<<ii))==0 && aLock[ii] ){",
          "4950:         for(ii=ofst; ii<ofst+n; ii++){",
          "4951:           aLock[ii] = -1;",
          "4952:         }",
          "4956:   assert( assertLockingArrayOk(pShmNode) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12a4c419176327c4c129ee06aa3b32963a695aeb",
      "candidate_info": {
        "commit_hash": "12a4c419176327c4c129ee06aa3b32963a695aeb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/12a4c419176327c4c129ee06aa3b32963a695aeb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix a shell tool build error caused by some combinations of options.\n\nFossilOrigin-Name: 33cd5341ac2ec84c86fbd3371f15c9153f83c1739f85dd8c3956fe2093d49afd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9d670a318381f219b467653f5f9539097808b887ae37291ce13be462dedfb18d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2883: #if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_SELECTTRACE)",
          "2885: static int savedSelectTrace;",
          "2886: #endif",
          "2887: #if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_WHERETRACE)",
          "",
          "[Removed Lines]",
          "2884: extern u32 sqlite3_unsupported_selecttrace;",
          "",
          "[Added Lines]",
          "2884: extern unsigned int sqlite3_unsupported_selecttrace;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7877b2d6b49f3e1dc304717cf6af75527f66e26",
      "candidate_info": {
        "commit_hash": "e7877b2d6b49f3e1dc304717cf6af75527f66e26",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e7877b2d6b49f3e1dc304717cf6af75527f66e26",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/attach.c",
          "src/parse.y",
          "src/sqliteInt.h",
          "src/trigger.c",
          "test/altertab3.test",
          "test/triggerupfrom.test",
          "test/upfrom3.test"
        ],
        "message": "Support UPDATE...FROM statements in trigger programs.\n\nFossilOrigin-Name: 4f6d8d0ebf40029218a1d3b05ea657c0c5953b01c6f0b6a628465aa44c67e7f3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/attach.c||src/attach.c",
          "src/parse.y||src/parse.y",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/trigger.c||src/trigger.c",
          "test/altertab3.test||test/altertab3.test",
          "test/triggerupfrom.test||test/triggerupfrom.test",
          "test/upfrom3.test||test/upfrom3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4f3dff045ab90e80479960fed64cf36f23dd0e13144edbde15043913ad3faac5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1191:       if( pParse->nErr ) rc = pParse->rc;",
          "1192:     }",
          "1193:     if( rc==SQLITE_OK && pStep->zTarget ){",
          "1205:           rc = sqlite3ResolveExprNames(&sNC, pStep->pWhere);",
          "1206:         }",
          "1207:         if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "1194:       Table *pTarget = sqlite3LocateTable(pParse, 0, pStep->zTarget, zDb);",
          "1195:       if( pTarget==0 ){",
          "1196:         rc = SQLITE_ERROR;",
          "1197:       }else if( SQLITE_OK==(rc = sqlite3ViewGetColumnNames(pParse, pTarget)) ){",
          "1198:         SrcList sSrc;",
          "1199:         memset(&sSrc, 0, sizeof(sSrc));",
          "1200:         sSrc.nSrc = 1;",
          "1201:         sSrc.a[0].zName = pStep->zTarget;",
          "1202:         sSrc.a[0].pTab = pTarget;",
          "1203:         sNC.pSrcList = &sSrc;",
          "1204:         if( pStep->pWhere ){",
          "",
          "[Added Lines]",
          "1194:       SrcList *pSrc = sqlite3TriggerStepSrc(pParse, pStep);",
          "1195:       if( pSrc ){",
          "1196:         int i;",
          "1197:         for(i=0; i<pSrc->nSrc; i++){",
          "1198:           struct SrcList_item *p = &pSrc->a[i];",
          "1199:           p->pTab = sqlite3LocateTableItem(pParse, 0, p);",
          "1200:           p->iCursor = pParse->nTab++;",
          "1201:           if( p->pTab==0 ){",
          "1202:             rc = SQLITE_ERROR;",
          "1203:           }else{",
          "1204:             p->pTab->nTabRef++;",
          "1205:             rc = sqlite3ViewGetColumnNames(pParse, p->pTab);",
          "1206:           }",
          "1207:         }",
          "1208:         sNC.pSrcList = pSrc;",
          "1209:         if( rc==SQLITE_OK && pStep->pWhere ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1211:         if( pStep->pUpsert ){",
          "1212:           Upsert *pUpsert = pStep->pUpsert;",
          "1213:           assert( rc==SQLITE_OK );",
          "1215:           sNC.uNC.pUpsert = pUpsert;",
          "1216:           sNC.ncFlags = NC_UUpsert;",
          "1217:           rc = sqlite3ResolveExprListNames(&sNC, pUpsert->pUpsertTarget);",
          "",
          "[Removed Lines]",
          "1214:           pUpsert->pUpsertSrc = &sSrc;",
          "",
          "[Added Lines]",
          "1219:           pUpsert->pUpsertSrc = pSrc;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1228:           sNC.ncFlags = 0;",
          "1229:         }",
          "1230:         sNC.pSrcList = 0;",
          "1231:       }",
          "1232:     }",
          "1233:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1236:         sqlite3SrcListDelete(db, pSrc);",
          "1237:       }else{",
          "1238:         rc = SQLITE_NOMEM;",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "599:     if( sqlite3FixExprList(pFix, pStep->pExprList) ){",
          "600:       return 1;",
          "601:     }",
          "602: #ifndef SQLITE_OMIT_UPSERT",
          "603:     if( pStep->pUpsert ){",
          "604:       Upsert *pUp = pStep->pUpsert;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "602:     if( pStep->pFrom && sqlite3FixSrcList(pFix, pStep->pFrom) ){",
          "603:       return 1;",
          "604:     }",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1517: %destructor trigger_cmd {sqlite3DeleteTriggerStep(pParse->db, $$);}",
          "1519: trigger_cmd(A) ::=",
          "1524: trigger_cmd(A) ::= scanpt(B) insert_cmd(R) INTO",
          "",
          "[Removed Lines]",
          "1520:    UPDATE(B) orconf(R) trnm(X) tridxby SET setlist(Y) where_opt(Z) scanpt(E).",
          "1521:    {A = sqlite3TriggerUpdateStep(pParse, &X, Y, Z, R, B.z, E);}",
          "",
          "[Added Lines]",
          "1520:    UPDATE(B) orconf(R) trnm(X) tridxby SET setlist(Y) from(F) where_opt(Z) scanpt(E).",
          "1521:    {A = sqlite3TriggerUpdateStep(pParse, &X, F, Y, Z, R, B.z, E);}",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4402:   TriggerStep *sqlite3TriggerInsertStep(Parse*,Token*, IdList*,",
          "4403:                                         Select*,u8,Upsert*,",
          "4404:                                         const char*,const char*);",
          "4407:   TriggerStep *sqlite3TriggerDeleteStep(Parse*,Token*, Expr*,",
          "4408:                                         const char*,const char*);",
          "4409:   void sqlite3DeleteTrigger(sqlite3*, Trigger*);",
          "4410:   void sqlite3UnlinkAndDeleteTrigger(sqlite3*,int,const char*);",
          "4411:   u32 sqlite3TriggerColmask(Parse*,Trigger*,ExprList*,int,int,Table*,int);",
          "4412: # define sqlite3ParseToplevel(p) ((p)->pToplevel ? (p)->pToplevel : (p))",
          "4413: # define sqlite3IsToplevel(p) ((p)->pToplevel==0)",
          "4414: #else",
          "",
          "[Removed Lines]",
          "4405:   TriggerStep *sqlite3TriggerUpdateStep(Parse*,Token*,ExprList*, Expr*, u8,",
          "4406:                                         const char*,const char*);",
          "",
          "[Added Lines]",
          "4406:   TriggerStep *sqlite3TriggerUpdateStep(Parse*,Token*,SrcList*,ExprList*,",
          "4407:                                         Expr*, u8, const char*,const char*);",
          "4413:   SrcList *sqlite3TriggerStepSrc(Parse*, TriggerStep*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4422: # define sqlite3ParseToplevel(p) p",
          "4423: # define sqlite3IsToplevel(p) 1",
          "4424: # define sqlite3TriggerColmask(A,B,C,D,E,F,G) 0",
          "4425: #endif",
          "4427: int sqlite3JoinType(Parse*, Token*, Token*, Token*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4427: # define sqlite3TriggerStepSrc(A,B) 0",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:     sqlite3SelectDelete(db, pTmp->pSelect);",
          "27:     sqlite3IdListDelete(db, pTmp->pIdList);",
          "28:     sqlite3UpsertDelete(db, pTmp->pUpsert);",
          "29:     sqlite3DbFree(db, pTmp->zSpan);",
          "31:     sqlite3DbFree(db, pTmp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:     sqlite3SrcListDelete(db, pTmp->pFrom);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "486: TriggerStep *sqlite3TriggerUpdateStep(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "490:   SrcList *pFrom,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "500:     if( IN_RENAME_OBJECT ){",
          "501:       pTriggerStep->pExprList = pEList;",
          "502:       pTriggerStep->pWhere = pWhere;",
          "503:       pEList = 0;",
          "504:       pWhere = 0;",
          "505:     }else{",
          "506:       pTriggerStep->pExprList = sqlite3ExprListDup(db, pEList, EXPRDUP_REDUCE);",
          "507:       pTriggerStep->pWhere = sqlite3ExprDup(db, pWhere, EXPRDUP_REDUCE);",
          "508:     }",
          "509:     pTriggerStep->orconf = orconf;",
          "510:   }",
          "511:   sqlite3ExprListDelete(db, pEList);",
          "512:   sqlite3ExprDelete(db, pWhere);",
          "513:   return pTriggerStep;",
          "514: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "505:       pTriggerStep->pFrom = pFrom;",
          "508:       pFrom = 0;",
          "512:       pTriggerStep->pFrom = sqlite3SrcListDup(db, pFrom, EXPRDUP_REDUCE);",
          "515:   }else{",
          "516:     sqlite3SrcListDelete(db, pFrom);",
          "520:   sqlite3SrcListDelete(db, pFrom);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "742: ){",
          "743:   sqlite3 *db = pParse->db;",
          "747:   pSrc = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "748:   if( pSrc ){",
          "757:     }",
          "758:   }",
          "759:   return pSrc;",
          "760: }",
          "",
          "[Removed Lines]",
          "739: static SrcList *targetSrcList(",
          "749:     assert( pSrc->nSrc>0 );",
          "750:     pSrc->a[pSrc->nSrc-1].zName = sqlite3DbStrDup(db, pStep->zTarget);",
          "751:     iDb = sqlite3SchemaToIndex(db, pStep->pTrig->pSchema);",
          "752:     if( iDb==0 || iDb>=2 ){",
          "753:       const char *zDb;",
          "754:       assert( iDb<db->nDb );",
          "755:       zDb = db->aDb[iDb].zDbSName;",
          "756:       pSrc->a[pSrc->nSrc-1].zDatabase =  sqlite3DbStrDup(db, zDb);",
          "",
          "[Added Lines]",
          "747: SrcList *sqlite3TriggerStepSrc(",
          "753:   char *zName = sqlite3DbStrDup(db, pStep->zTarget);",
          "755:   assert( pSrc==0 || pSrc->nSrc==1 );",
          "756:   assert( zName || pSrc==0 );",
          "758:     Schema *pSchema = pStep->pTrig->pSchema;",
          "759:     pSrc->a[0].zName = zName;",
          "760:     if( pSchema!=db->aDb[1].pSchema ){",
          "761:       pSrc->a[0].pSchema = pSchema;",
          "763:     if( pStep->pFrom ){",
          "764:       SrcList *pDup = sqlite3SrcListDup(db, pStep->pFrom, 0);",
          "765:       pSrc = sqlite3SrcListAppendList(pParse, pSrc, pDup);",
          "766:     }",
          "767:   }else{",
          "768:     sqlite3DbFree(db, zName);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "803:     switch( pStep->op ){",
          "804:       case TK_UPDATE: {",
          "805:         sqlite3Update(pParse,",
          "807:           sqlite3ExprListDup(db, pStep->pExprList, 0),",
          "808:           sqlite3ExprDup(db, pStep->pWhere, 0),",
          "809:           pParse->eOrconf, 0, 0, 0",
          "",
          "[Removed Lines]",
          "806:           targetSrcList(pParse, pStep),",
          "",
          "[Added Lines]",
          "817:           sqlite3TriggerStepSrc(pParse, pStep),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "812:       }",
          "813:       case TK_INSERT: {",
          "814:         sqlite3Insert(pParse,",
          "816:           sqlite3SelectDup(db, pStep->pSelect, 0),",
          "817:           sqlite3IdListDup(db, pStep->pIdList),",
          "818:           pParse->eOrconf,",
          "",
          "[Removed Lines]",
          "815:           targetSrcList(pParse, pStep),",
          "",
          "[Added Lines]",
          "826:           sqlite3TriggerStepSrc(pParse, pStep),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "822:       }",
          "823:       case TK_DELETE: {",
          "824:         sqlite3DeleteFrom(pParse,",
          "826:           sqlite3ExprDup(db, pStep->pWhere, 0), 0, 0",
          "827:         );",
          "828:         break;",
          "",
          "[Removed Lines]",
          "825:           targetSrcList(pParse, pStep),",
          "",
          "[Added Lines]",
          "836:           sqlite3TriggerStepSrc(pParse, pStep),",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "586:     DELETE FROM v2;",
          "587:   END}}",
          "589: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "589: #------------------------------------------------------------------------",
          "590: #",
          "591: reset_db",
          "592: do_execsql_test 25.1 {",
          "593:   CREATE TABLE t1(a, b, c);",
          "594:   CREATE TABLE t2(a, b, c);",
          "595:   CREATE TRIGGER ttt AFTER INSERT ON t1 BEGIN",
          "596:     UPDATE t1 SET a=t2.a FROM t2 WHERE t1.a=t2.a;",
          "597:   END;",
          "598: }",
          "599: #do_execsql_test 25.2 {",
          "600: #  ALTER TABLE t2 RENAME COLUMN a TO aaa;",
          "601: #}",
          "",
          "---------------"
        ],
        "test/triggerupfrom.test||test/triggerupfrom.test": [
          "File: test/triggerupfrom.test -> test/triggerupfrom.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2020 July 14",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "15: set testprefix triggerupfrom",
          "17: do_execsql_test 1.0 {",
          "18:   CREATE TABLE map(k, v);",
          "19:   INSERT INTO map VALUES(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four');",
          "21:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b, c);",
          "23:   CREATE TRIGGER tr AFTER INSERT ON t1 BEGIN",
          "24:     UPDATE t1 SET c = v FROM map WHERE k=new.a AND a=new.a;",
          "25:   END;",
          "26: }",
          "28: do_execsql_test 1.1 {",
          "29:   INSERT INTO t1(a) VALUES(1);",
          "30: }",
          "32: do_execsql_test 1.2 {",
          "33:   SELECT a, c FROM t1 ORDER BY a;",
          "34: } {1 one}",
          "36: do_execsql_test 1.3 {",
          "37:   INSERT INTO t1(a) VALUES(2), (3), (4), (5);",
          "38:   SELECT a, c FROM t1 ORDER BY a;",
          "39: } {1 one 2 two 3 three 4 four 5 {}}",
          "41: forcedelete test.db2",
          "42: do_execsql_test 2.0 {",
          "43:   ATTACH 'test.db2' AS aux;",
          "44:   CREATE TABLE aux.t3(x, y);",
          "45:   INSERT INTO aux.t3 VALUES('x', 'y');",
          "46: }",
          "48: do_catchsql_test 2.1 {",
          "49:   CREATE TRIGGER tr2 AFTER INSERT ON t1 BEGIN",
          "50:     UPDATE t1 SET b = y FROM aux.t3 WHERE k=new.a;",
          "51:   END;",
          "52: } {1 {trigger tr2 cannot reference objects in database aux}}",
          "54: do_execsql_test 2.2 {",
          "55:   CREATE TEMP TRIGGER tr2 AFTER INSERT ON t1 BEGIN",
          "56:     UPDATE t1 SET b = y FROM aux.t3 WHERE a=new.a;",
          "57:   END;",
          "58:   INSERT INTO t1(a) VALUES(10), (20);",
          "59:   SELECT * FROM t1;",
          "60: } {",
          "61:   1 {} one",
          "62:   2 {} two",
          "63:   3 {} three",
          "64:   4 {} four",
          "65:   5 {} {}",
          "66:   10 y {}",
          "67:   20 y {}",
          "68: }",
          "70: do_execsql_test 2.3 {",
          "71:   CREATE TABLE link(f, t);",
          "72:   INSERT INTO link VALUES(5, 2), (20, 10), (2, 1);",
          "73:   CREATE TRIGGER tr3 BEFORE DELETE ON t1 BEGIN",
          "74:     UPDATE t1 SET b=coalesce(old.b,old.c) FROM main.link WHERE a=t AND old.a=f;",
          "75:   END;",
          "76:   DELETE FROM t1 WHERE a=2;",
          "77:   SELECT * FROM t1;",
          "78: } {",
          "79:   1 two one",
          "80:   3 {} three",
          "81:   4 {} four",
          "82:   5 {} {}",
          "83:   10 y {}",
          "84:   20 y {}",
          "85: }",
          "87: db close",
          "88: sqlite3 db \"\"",
          "89: do_catchsql_test 2.4 {",
          "90:   ATTACH 'test.db' AS yyy;",
          "91:   SELECT * FROM t1;",
          "92: } {1 {malformed database schema (tr3) - trigger tr3 cannot reference objects in database main}}",
          "94: #-------------------------------------------------------------------------",
          "95: reset_db",
          "96: forcedelete test.db2",
          "97: do_execsql_test 3.0 {",
          "98:   CREATE TABLE mmm(x, y);",
          "99:   INSERT INTO mmm VALUES(1, 'one');",
          "100:   INSERT INTO mmm VALUES(2, 'two');",
          "101:   INSERT INTO mmm VALUES(3, 'three');",
          "103:   ATTACH 'test.db2' AS aux;",
          "104:   CREATE TABLE aux.t1(a, b);",
          "105:   CREATE TABLE aux.mmm(x, y);",
          "106:   INSERT INTO aux.mmm VALUES(1, 'ONE');",
          "107:   INSERT INTO aux.mmm VALUES(2, 'TWO');",
          "108:   INSERT INTO aux.mmm VALUES(3, 'THREE');",
          "110:   CREATE TRIGGER aux.ttt AFTER INSERT ON t1 BEGIN",
          "111:     UPDATE t1 SET b=y FROM mmm WHERE x=new.a AND a=new.a;",
          "112:   END;",
          "114:   INSERT INTO t1(a) VALUES (2);",
          "115:   SELECT * FROM t1;",
          "116: } {2 TWO}",
          "119: finish_test",
          "",
          "---------------"
        ],
        "test/upfrom3.test||test/upfrom3.test": [
          "File: test/upfrom3.test -> test/upfrom3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: source $testdir/tester.tcl",
          "15: set testprefix upfrom3",
          "17: foreach {tn wo} {",
          "18:   1 \"\"",
          "19:   2 \"WITHOUT ROWID\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: # Test plan:",
          "18: #",
          "19: #   1.*: Test UPDATE ... FROM statements that modify IPK fields. And that",
          "20: #        modify \"INTEGER PRIMARY KEY\" fields on WITHOUT ROWID tables.",
          "21: #",
          "22: #   2.*: Test UPDATE ... FROM statements that modify PK fields of WITHOUT",
          "23: #        ROWID tables.",
          "24: #",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7bb8b8a4f743c1bab707a01ba61c7f1fe3695195",
      "candidate_info": {
        "commit_hash": "7bb8b8a4f743c1bab707a01ba61c7f1fe3695195",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7bb8b8a4f743c1bab707a01ba61c7f1fe3695195",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/os_unix.c",
          "src/sqlite.h.in",
          "src/wal.c",
          "test/walsetlk.test"
        ],
        "message": "Add error code SQLITE_BUSY_TIMEOUT, used internally by the OS layer to indicate that a call to xShmLock() has failed due to timeout of a blocking lock.\n\nFossilOrigin-Name: f3ef9c7c2b4ba3de1057ad569f068b241d5f23e6629d8e0dacf85e57fd13b8aa",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/os_unix.c||src/os_unix.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/wal.c||src/wal.c",
          "test/walsetlk.test||test/walsetlk.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 22de99ef410ba2a540871f3e61157d8dc4b969416f14808aeca73971b17fcd51",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3375: int sqlite3BtreeBeginTrans(Btree *p, int wrflag, int *pSchemaVersion){",
          "3376:   BtShared *pBt = p->pBt;",
          "3377:   int rc = SQLITE_OK;",
          "3379:   sqlite3BtreeEnter(p);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3377:   Pager *pPager = pBt->pPager;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3389:   assert( pBt->inTransaction==TRANS_WRITE || IfNotOmitAV(pBt->bDoTruncate)==0 );",
          "3391:   if( (p->db->flags & SQLITE_ResetDatabase)",
          "3393:   ){",
          "3394:     pBt->btsFlags &= ~BTS_READ_ONLY;",
          "3395:   }",
          "",
          "[Removed Lines]",
          "3392:    && sqlite3PagerIsreadonly(pBt->pPager)==0",
          "",
          "[Added Lines]",
          "3393:    && sqlite3PagerIsreadonly(pPager)==0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3437:   pBt->btsFlags &= ~BTS_INITIALLY_EMPTY;",
          "3438:   if( pBt->nPage==0 ) pBt->btsFlags |= BTS_INITIALLY_EMPTY;",
          "3439:   do {",
          "3442: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "3446:     if( pBt->pPage1==0 && wrflag ){",
          "3447:       assert( pBt->inTransaction==TRANS_NONE );",
          "3448:       rc = sqlite3PagerWalWriteLock(pPager, 1);",
          "3450:     }",
          "3451: #endif",
          "",
          "[Removed Lines]",
          "3440:     Pager *pPager = pBt->pPager;",
          "3445:     sqlite3PagerWalDb(pPager, p->db);",
          "3449:       if( rc!=SQLITE_OK ) break;",
          "",
          "[Added Lines]",
          "3440:   sqlite3PagerWalDb(pPager, p->db);",
          "3449:       if( rc!=SQLITE_BUSY && rc!=SQLITE_OK ) break;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3479:       (void)sqlite3PagerWalWriteLock(pPager, 0);",
          "3480:       unlockBtreeIfUnused(pBt);",
          "3481:     }",
          "3483:   }while( (rc&0xFF)==SQLITE_BUSY && pBt->inTransaction==TRANS_NONE &&",
          "3484:           btreeInvokeBusyHandler(pBt) );",
          "3486:   if( rc==SQLITE_OK ){",
          "3487:     if( p->inTrans==TRANS_NONE ){",
          "",
          "[Removed Lines]",
          "3482:     sqlite3PagerWalDb(pPager, 0);",
          "",
          "[Added Lines]",
          "3484:   sqlite3PagerWalDb(pPager, 0);",
          "3485: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "3486:   if( rc==SQLITE_BUSY_TIMEOUT ) rc = SQLITE_BUSY;",
          "3487: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3537:     }",
          "3538:   }",
          "",
          "[Removed Lines]",
          "3536:       rc = sqlite3PagerOpenSavepoint(pBt->pPager, p->db->nSavepoint);",
          "",
          "[Added Lines]",
          "3539:       rc = sqlite3PagerOpenSavepoint(pPager, p->db->nSavepoint);",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1567: ){",
          "1568:   int rc = osFcntl(h,F_SETLK,pLock);",
          "",
          "[Removed Lines]",
          "1569:   while( rc<0 && pFile->iBusyTimeout>0 ){",
          "",
          "[Added Lines]",
          "1568:   int tm = pFile->iBusyTimeout;",
          "1570:   while( rc<0 && tm>0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1575:     usleep(1000);",
          "1576:     rc = osFcntl(h,F_SETLK,pLock);",
          "1578:   }",
          "1579:   return rc;",
          "1580: }",
          "",
          "[Removed Lines]",
          "1577:     pFile->iBusyTimeout--;",
          "",
          "[Added Lines]",
          "1578:     tm--;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4316:   assert( n>=1 && n<=SQLITE_SHM_NLOCK );",
          "4318:   if( pShmNode->hShm>=0 ){",
          "4320:     f.l_type = lockType;",
          "4321:     f.l_whence = SEEK_SET;",
          "4322:     f.l_start = ofst;",
          "4323:     f.l_len = n;",
          "4326:   }",
          "",
          "[Removed Lines]",
          "4324:     rc = osSetPosixAdvisoryLock(pShmNode->hShm, &f, pFile);",
          "4325:     rc = (rc!=(-1)) ? SQLITE_OK : SQLITE_BUSY;",
          "",
          "[Added Lines]",
          "4320:     int res;",
          "4326:     res = osSetPosixAdvisoryLock(pShmNode->hShm, &f, pFile);",
          "4327:     if( res==-1 ){",
          "4328:       rc = (pFile->iBusyTimeout ? SQLITE_BUSY_TIMEOUT : SQLITE_BUSY);",
          "4329:     }",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "508: #define SQLITE_LOCKED_VTAB             (SQLITE_LOCKED |  (2<<8))",
          "509: #define SQLITE_BUSY_RECOVERY           (SQLITE_BUSY   |  (1<<8))",
          "510: #define SQLITE_BUSY_SNAPSHOT           (SQLITE_BUSY   |  (2<<8))",
          "511: #define SQLITE_CANTOPEN_NOTEMPDIR      (SQLITE_CANTOPEN | (1<<8))",
          "512: #define SQLITE_CANTOPEN_ISDIR          (SQLITE_CANTOPEN | (2<<8))",
          "513: #define SQLITE_CANTOPEN_FULLPATH       (SQLITE_CANTOPEN | (3<<8))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "511: #define SQLITE_BUSY_TIMEOUT            (SQLITE_BUSY   |  (3<<8))",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "843:                         SQLITE_SHM_LOCK | SQLITE_SHM_SHARED);",
          "844:   WALTRACE((\"WAL%p: acquire SHARED-%s %s\\n\", pWal,",
          "845:             walLockName(lockIdx), rc ? \"failed\" : \"ok\"));",
          "847:   return rc;",
          "848: }",
          "849: static void walUnlockShared(Wal *pWal, int lockIdx){",
          "",
          "[Removed Lines]",
          "846:   VVA_ONLY( pWal->lockError = (u8)(rc!=SQLITE_OK && rc!=SQLITE_BUSY); )",
          "",
          "[Added Lines]",
          "846:   VVA_ONLY( pWal->lockError = (u8)(rc!=SQLITE_OK && (rc&0xFF)!=SQLITE_BUSY); )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "859:                         SQLITE_SHM_LOCK | SQLITE_SHM_EXCLUSIVE);",
          "860:   WALTRACE((\"WAL%p: acquire EXCLUSIVE-%s cnt=%d %s\\n\", pWal,",
          "861:             walLockName(lockIdx), n, rc ? \"failed\" : \"ok\"));",
          "863:   return rc;",
          "864: }",
          "865: static void walUnlockExclusive(Wal *pWal, int lockIdx, int n){",
          "",
          "[Removed Lines]",
          "862:   VVA_ONLY( pWal->lockError = (u8)(rc!=SQLITE_OK && rc!=SQLITE_BUSY); )",
          "",
          "[Added Lines]",
          "862:   VVA_ONLY( pWal->lockError = (u8)(rc!=SQLITE_OK && (rc&0xFF)!=SQLITE_BUSY); )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1679:   return rc;",
          "1680: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1682: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "1689: static int walEnableBlocking(Wal *pWal){",
          "1690:   int res = 0;",
          "1691:   if( pWal->db ){",
          "1692:     int tmout = pWal->db->busyTimeout;",
          "1693:     if( tmout ){",
          "1694:       int rc;",
          "1695:       rc = sqlite3OsFileControl(",
          "1696:           pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout",
          "1697:       );",
          "1698:       res = (rc==SQLITE_OK);",
          "1699:     }",
          "1700:   }",
          "1701:   return res;",
          "1702: }",
          "1707: static void walDisableBlocking(Wal *pWal){",
          "1708:   int tmout = 0;",
          "1709:   sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout);",
          "1710: }",
          "1721: int sqlite3WalWriteLock(Wal *pWal, int bLock){",
          "1722:   int rc = SQLITE_OK;",
          "1723:   assert( pWal->readLock<0 || bLock==0 );",
          "1724:   if( bLock ){",
          "1725:     assert( pWal->db );",
          "1726:     if( walEnableBlocking(pWal) ){",
          "1727:       rc = walLockExclusive(pWal, WAL_WRITE_LOCK, 1);",
          "1728:       if( rc==SQLITE_OK ){",
          "1729:         pWal->writeLock = 1;",
          "1730:       }",
          "1731:       walDisableBlocking(pWal);",
          "1732:     }",
          "1733:   }else if( pWal->writeLock ){",
          "1734:     walUnlockExclusive(pWal, WAL_WRITE_LOCK, 1);",
          "1735:     pWal->writeLock = 0;",
          "1736:   }",
          "1737:   return rc;",
          "1738: }",
          "1743: void sqlite3WalDb(Wal *pWal, sqlite3 *db){",
          "1744:   pWal->db = db;",
          "1745: }",
          "1750: static int walLockWriter(Wal *pWal){",
          "1751:   int rc;",
          "1752:   walEnableBlocking(pWal);",
          "1753:   rc = walLockExclusive(pWal, WAL_WRITE_LOCK, 1);",
          "1754:   walDisableBlocking(pWal);",
          "1755:   return rc;",
          "1756: }",
          "1757: #else",
          "1758: # define walEnableBlocking(x) 0",
          "1759: # define walDisableBlocking(x)",
          "1760: # define walLockWriter(pWal) walLockExclusive((pWal), WAL_WRITE_LOCK, 1)",
          "1761: # define sqlite3WalDb(pWal, db)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1696:   do {",
          "1697:     rc = walLockExclusive(pWal, lockIdx, n);",
          "1698:   }while( xBusy && rc==SQLITE_BUSY && xBusy(pBusyArg) );",
          "1699:   return rc;",
          "1700: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1782: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "1783:   if( rc==SQLITE_BUSY_TIMEOUT ){",
          "1784:     walDisableBlocking(pWal);",
          "1785:     rc = SQLITE_BUSY;",
          "1786:   }",
          "1787: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2119: #define WAL_RETRY  (-1)",
          "",
          "[Removed Lines]",
          "2121: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "2128: static int walEnableBlocking(Wal *pWal){",
          "2129:   int res = 0;",
          "2130:   if( pWal->db ){",
          "2131:     int tmout = pWal->db->busyTimeout;",
          "2132:     if( tmout ){",
          "2133:       int rc;",
          "2134:       rc = sqlite3OsFileControl(",
          "2135:           pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout",
          "2136:           );",
          "2137:       res = (rc==SQLITE_OK);",
          "2138:     }",
          "2139:   }",
          "2140:   return res;",
          "2141: }",
          "2146: static void walDisableBlocking(Wal *pWal){",
          "2147:   int tmout = 0;",
          "2148:   sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout);",
          "2149: }",
          "2160: int sqlite3WalWriteLock(Wal *pWal, int bLock){",
          "2161:   int rc = SQLITE_OK;",
          "2162:   assert( pWal->readLock<0 || bLock==0 );",
          "2163:   if( bLock ){",
          "2164:     assert( pWal->db );",
          "2165:     if( walEnableBlocking(pWal) ){",
          "2166:       rc = walLockExclusive(pWal, WAL_WRITE_LOCK, 1);",
          "2167:       if( rc==SQLITE_OK ){",
          "2168:         pWal->writeLock = 1;",
          "2169:       }",
          "2170:       walDisableBlocking(pWal);",
          "2171:     }",
          "2172:   }else if( pWal->writeLock ){",
          "2173:     walUnlockExclusive(pWal, WAL_WRITE_LOCK, 1);",
          "2174:     pWal->writeLock = 0;",
          "2175:   }",
          "2176:   return rc;",
          "2177: }",
          "2182: void sqlite3WalDb(Wal *pWal, sqlite3 *db){",
          "2183:   pWal->db = db;",
          "2184: }",
          "2189: static int walLockWriter(Wal *pWal){",
          "2190:   int rc;",
          "2191:   walEnableBlocking(pWal);",
          "2192:   rc = walLockExclusive(pWal, WAL_WRITE_LOCK, 1);",
          "2193:   walDisableBlocking(pWal);",
          "2194:   return rc;",
          "2195: }",
          "2196: #else",
          "2197: # define walEnableBlocking(x) 0",
          "2198: # define walDisableBlocking(x)",
          "2199: # define walLockWriter(pWal) walLockExclusive((pWal), WAL_WRITE_LOCK, 1)",
          "2200: # define sqlite3WalDb(pWal, db)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3690:   sqlite3WalDb(pWal, db);",
          "",
          "[Removed Lines]",
          "3691:   if( walEnableBlocking(pWal) ){",
          "3692:     xBusy2 = 0;",
          "3693:   }",
          "",
          "[Added Lines]",
          "3698:   walEnableBlocking(pWal);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3774:     pWal->ckptLock = 0;",
          "3775:   }",
          "3776:   WALTRACE((\"WAL%p: checkpoint %s\\n\", pWal, rc ? \"failed\" : \"ok\"));",
          "3777:   return (rc==SQLITE_OK && eMode!=eMode2 ? SQLITE_BUSY : rc);",
          "3778: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3782: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "3783:   if( rc==SQLITE_BUSY_TIMEOUT ) rc = SQLITE_BUSY;",
          "3784: #endif",
          "",
          "---------------"
        ],
        "test/walsetlk.test||test/walsetlk.test": [
          "File: test/walsetlk.test -> test/walsetlk.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "15: set testprefix walsetlk",
          "17: ifcapable !wal {finish_test ; return }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: source $testdir/lock_common.tcl",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:   file size test.db-wal",
          "72: } 0",
          "74: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: db close",
          "76: db2 close",
          "77: #-------------------------------------------------------------------------",
          "79: do_multiclient_test tn {",
          "81:   do_test 2.$tn.1 {",
          "82:     sql1 {",
          "83:       PRAGMA journal_mode = wal;",
          "84:       CREATE TABLE t1(s, v);",
          "85:       INSERT INTO t1 VALUES(1, 2);",
          "86:       INSERT INTO t1 VALUES(3, 4);",
          "87:       INSERT INTO t1 VALUES(5, 6);",
          "88:     }",
          "89:     code1 { db timeout 2000 }",
          "90:   } {}",
          "92:   do_test 2.$tn.2 {",
          "93:     sql2 {",
          "94:       BEGIN;",
          "95:         INSERT INTO t1 VALUES(7, 8);",
          "96:     }",
          "97:   } {}",
          "99:   do_test 2.$tn.3 {",
          "100:     set us [lindex [time { catch {db eval \"BEGIN EXCLUSIVE\"} }] 0]",
          "101:     expr $us>1000000 && $us<4000000",
          "102:   } {1}",
          "104:   do_test 2.$tn.4 {",
          "105:     sql2 { COMMIT }",
          "106:     sql1 { SELECT * FROM t1 }",
          "107:   } {1 2 3 4 5 6 7 8}",
          "109:   do_test 2.$tn.5 {",
          "110:     sql2 {",
          "111:       BEGIN;",
          "112:         INSERT INTO t1 VALUES(9, 10);",
          "113:     }",
          "114:   } {}",
          "116:   do_test 2.$tn.6 {",
          "117:     set us [lindex [time { catch {db eval \"PRAGMA wal_checkpoint=RESTART\"} }] 0]",
          "118:     expr $us>1000000 && $us<4000000",
          "119:   } {1}",
          "121:   do_test 2.$tn.7 {",
          "122:     sql2 {",
          "123:       COMMIT;",
          "124:       BEGIN;",
          "125:         SELECT * FROM t1;",
          "126:     }",
          "127:   } {1 2 3 4 5 6 7 8 9 10}",
          "129:   do_test 2.$tn.8 {",
          "130:     set us [lindex [time { catch {db eval \"PRAGMA wal_checkpoint=RESTART\"} }] 0]",
          "131:     expr $us>1000000 && $us<4000000",
          "132:   } {1}",
          "134:   do_test 2.$tn.9 {",
          "135:     sql3 {",
          "136:       INSERT INTO t1 VALUES(11, 12);",
          "137:     }",
          "138:     sql2 {",
          "139:       COMMIT;",
          "140:       BEGIN;",
          "141:         SELECT * FROM t1;",
          "142:     }",
          "143:     sql3 {",
          "144:       INSERT INTO t1 VALUES(13, 14);",
          "145:     }",
          "146:   } {}",
          "148:   do_test 2.$tn.10 {",
          "149:     set us [lindex [time { catch {db eval \"PRAGMA wal_checkpoint=RESTART\"} }] 0]",
          "150:     expr $us>1000000 && $us<4000000",
          "151:   } {1}",
          "153:   do_test 2.$tn.11 {",
          "154:     sql3 {",
          "155:       BEGIN;",
          "156:         SELECT * FROM t1;",
          "157:     }",
          "158:     sql1 { INSERT INTO t1 VALUES(15, 16); }",
          "159:   } {}",
          "161:   do_test 2.$tn.12 {",
          "162:     set us [lindex [time { catch {db eval \"PRAGMA wal_checkpoint=RESTART\"} }] 0]",
          "163:     expr $us>1000000 && $us<4000000",
          "164:   } {1}",
          "166:   do_test 2.$tn.13 {",
          "167:     sql2 {",
          "168:       COMMIT;",
          "169:       BEGIN;",
          "170:         SELECT * FROM t1;",
          "171:     }",
          "172:     sql1 { INSERT INTO t1 VALUES(17, 18); }",
          "173:   } {}",
          "175:   do_test 2.$tn.14 {",
          "176:     set us [lindex [time { catch {db eval \"PRAGMA wal_checkpoint=RESTART\"} }] 0]",
          "177:     puts $us",
          "178:     expr $us>1000000 && $us<4000000",
          "179:   } {1}",
          "181: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}