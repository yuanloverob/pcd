{
  "cve_id": "CVE-2022-35974",
  "cve_desc": "TensorFlow is an open source platform for machine learning. If `QuantizeDownAndShrinkRange` is given nonscalar inputs for `input_min` or `input_max`, it results in a segfault that can be used to trigger a denial of service attack. We have patched the issue in GitHub commit 73ad1815ebcfeb7c051f9c2f7ab5024380ca8613. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "73ad1815ebcfeb7c051f9c2f7ab5024380ca8613",
  "patch_info": {
    "commit_hash": "73ad1815ebcfeb7c051f9c2f7ab5024380ca8613",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/73ad1815ebcfeb7c051f9c2f7ab5024380ca8613",
    "files": [
      "tensorflow/core/kernels/quantize_down_and_shrink_range.cc",
      "tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc",
      "tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py"
    ],
    "message": "Add IsScalar (rank == 0) check to input_min/max tensors for QuantizeDownAndShrinkRangeOp.\n\nPiperOrigin-RevId: 462401306",
    "before_after_code_files": [
      "tensorflow/core/kernels/quantize_down_and_shrink_range.cc||tensorflow/core/kernels/quantize_down_and_shrink_range.cc",
      "tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc||tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc",
      "tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py||tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/quantize_down_and_shrink_range.cc||tensorflow/core/kernels/quantize_down_and_shrink_range.cc": [
      "File: tensorflow/core/kernels/quantize_down_and_shrink_range.cc -> tensorflow/core/kernels/quantize_down_and_shrink_range.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "41:   void Compute(OpKernelContext* ctx) override {",
      "42:     const Tensor& input = ctx->input(0);",
      "45:     Tensor* output = nullptr;",
      "46:     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, input.shape(), &output));",
      "47:     Tensor* output_min = nullptr;",
      "",
      "[Removed Lines]",
      "43:     const float input_min_float = ctx->input(1).flat<float>()(0);",
      "44:     const float input_max_float = ctx->input(2).flat<float>()(0);",
      "",
      "[Added Lines]",
      "43:     const Tensor& input_min = ctx->input(1);",
      "44:     const Tensor& input_max = ctx->input(2);",
      "46:     OP_REQUIRES(",
      "47:         ctx, TensorShapeUtils::IsScalar(input_min.shape()),",
      "48:         errors::InvalidArgument(\"`input_min` must be rank 0 but is rank \",",
      "49:                                 input_min.dims()));",
      "50:     OP_REQUIRES(",
      "51:         ctx, TensorShapeUtils::IsScalar(input_max.shape()),",
      "52:         errors::InvalidArgument(\"`input_max` must be rank 0 but is rank \",",
      "53:                                 input_max.dims()));",
      "55:     const float input_min_float = input_min.scalar<float>()();",
      "56:     const float input_max_float = input_max.scalar<float>()();",
      "",
      "---------------"
    ],
    "tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc||tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc": [
      "File: tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc -> tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:   const int value_count = 3;",
      "54:   AddInputFromArray<qint32>(TensorShape({value_count}),",
      "55:                             {-(1 << 23), 0, (1 << 23)});",
      "58:   TF_ASSERT_OK(RunOpKernel());",
      "59:   Tensor expected(allocator(), DT_QUINT8, TensorShape({value_count}));",
      "60:   test::FillValues<quint8>(&expected, {0, 128, 255});",
      "",
      "[Removed Lines]",
      "56:   AddInputFromArray<float>(TensorShape({1}), {-256.0f});",
      "57:   AddInputFromArray<float>(TensorShape({1}), {256.0f});",
      "",
      "[Added Lines]",
      "56:   AddInputFromArray<float>(TensorShape({}), {-256.0f});",
      "57:   AddInputFromArray<float>(TensorShape({}), {256.0f});",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py||tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py": [
      "File: tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py -> tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "261:               out_type=dtypes.quint8))",
      "264: if __name__ == \"__main__\":",
      "265:   googletest.main()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "264: class QuantizeDownAndShrinkRangeOpTest(test_util.TensorFlowTestCase):",
      "266:   @test_util.run_in_graph_and_eager_modes",
      "267:   def test_invalid_inputs(self):",
      "268:     inputs = constant_op.constant(",
      "269:         np.int32(0), shape=[3, 3, 3, 3], dtype=dtypes.qint32)",
      "271:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
      "272:                                 \"must be rank 0\"):",
      "273:       self.evaluate(",
      "274:           math_ops.quantize_down_and_shrink_range(input=inputs,",
      "275:                                                   input_min=[],",
      "276:                                                   input_max=4.0,",
      "277:                                                   out_type=dtypes.quint8))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f3cf67ac5705f4f04721d15e485e192bb319feed",
      "candidate_info": {
        "commit_hash": "f3cf67ac5705f4f04721d15e485e192bb319feed",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/f3cf67ac5705f4f04721d15e485e192bb319feed",
        "files": [
          "tensorflow/core/kernels/fake_quant_ops.cc",
          "tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py"
        ],
        "message": "Add IsScalar / IsVector (rank) checks to input min/max tensors for FakeQuantWithMinMaxVarsPerChannelGradientOp and FakeQuantWithMinMaxVarsGradientOp.\n\nPiperOrigin-RevId: 462542629",
        "before_after_code_files": [
          "tensorflow/core/kernels/fake_quant_ops.cc||tensorflow/core/kernels/fake_quant_ops.cc",
          "tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py||tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py||tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py"
          ],
          "candidate": [
            "tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py||tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fake_quant_ops.cc||tensorflow/core/kernels/fake_quant_ops.cc": [
          "File: tensorflow/core/kernels/fake_quant_ops.cc -> tensorflow/core/kernels/fake_quant_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:                 InvalidArgument(\"gradient and input must be the same size\"));",
          "262:     const Tensor& min = context->input(2);",
          "263:     const Tensor& max = context->input(3);",
          "265:     Tensor* grad_wrt_input;",
          "266:     OP_REQUIRES_OK(context,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "264:     OP_REQUIRES(",
          "265:         context, TensorShapeUtils::IsScalar(min.shape()),",
          "266:         InvalidArgument(\"`min` must be rank 0 but is rank \", min.dims()));",
          "267:     OP_REQUIRES(",
          "268:         context, TensorShapeUtils::IsScalar(max.shape()),",
          "269:         InvalidArgument(\"`max` must be rank 0 but is rank \", max.dims()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "414:                 InvalidArgument(\"gradient and input must be the same size\"));",
          "415:     const int depth = input.dim_size(input.dims() - 1);  // last dimension size.",
          "416:     const Tensor& min = context->input(2);",
          "417:     OP_REQUIRES(context, min.dim_size(0) == depth,",
          "418:                 InvalidArgument(\"min has incorrect size, expected \", depth,",
          "419:                                 \" was \", min.dim_size(0)));",
          "420:     const Tensor& max = context->input(3);",
          "421:     OP_REQUIRES(context, max.dim_size(0) == depth,",
          "422:                 InvalidArgument(\"max has incorrect size, expected \", depth,",
          "423:                                 \" was \", max.dim_size(0)));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "423:     OP_REQUIRES(",
          "424:         context, TensorShapeUtils::IsVector(min.shape()),",
          "425:         InvalidArgument(\"`min` must be rank 1 but is rank \", min.dims()));",
          "430:     OP_REQUIRES(",
          "431:         context, TensorShapeUtils::IsVector(max.shape()),",
          "432:         InvalidArgument(\"`max` must be rank 1 but is rank \", max.dims()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py||tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py": [
          "File: tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py -> tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:               inputs=inputs, min=[0.0], max=[1.0, 1.1]))",
          "80: class QuantizedBiasedAddTest(test_util.TensorFlowTestCase):",
          "82:   @test_util.run_in_graph_and_eager_modes",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80: class FakeQuantWithMinMaxVarsGradientOpTest(test_util.TensorFlowTestCase):",
          "82:   @test_util.run_in_graph_and_eager_modes",
          "83:   def test_invalid_inputs(self):",
          "84:     gradients = constant_op.constant(",
          "85:         value=[[1.0], [2.0], [4.0]], dtype=dtypes.float32)",
          "86:     inputs = constant_op.constant(",
          "87:         value=[[1.0], [2.0], [4.0]], dtype=dtypes.float32)",
          "89:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "90:                                 \"must be equal rank|must be rank 0\"):",
          "91:       self.evaluate(",
          "92:           array_ops.fake_quant_with_min_max_vars_gradient(",
          "93:               gradients=gradients,",
          "94:               inputs=inputs,",
          "95:               min=0.0,",
          "96:               max=[[1.0], [2.0], [4.0]]))",
          "98:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "99:                                 \"must be rank 0\"):",
          "100:       self.evaluate(",
          "101:           array_ops.fake_quant_with_min_max_vars_gradient(",
          "102:               gradients=gradients,",
          "103:               inputs=inputs,",
          "104:               min=[[1.0], [2.0], [4.0]],",
          "105:               max=[[1.0], [2.0], [4.0]]))",
          "108: class FakeQuantWithMinMaxVarsPerChannelGradientOpTest(",
          "109:     test_util.TensorFlowTestCase):",
          "111:   @test_util.run_in_graph_and_eager_modes",
          "112:   def test_invalid_inputs(self):",
          "113:     gradients = constant_op.constant(",
          "114:         value=[[1.0], [2.0], [4.0]], dtype=dtypes.float32)",
          "115:     inputs = constant_op.constant(",
          "116:         value=[[1.0], [2.0], [4.0]], dtype=dtypes.float32)",
          "118:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "119:                                 \"Shapes must be equal rank|must be rank 1\"):",
          "120:       self.evaluate(",
          "121:           array_ops.fake_quant_with_min_max_vars_per_channel_gradient(",
          "122:               gradients=gradients, inputs=inputs, min=[[0.0]], max=[1.0]))",
          "124:     with self.assertRaisesRegex(",
          "125:         (ValueError, errors.InvalidArgumentError),",
          "126:         \"Dimension 0 in both shapes must be equal|incorrect size\"):",
          "127:       self.evaluate(",
          "128:           array_ops.fake_quant_with_min_max_vars_per_channel_gradient(",
          "129:               gradients=gradients, inputs=inputs, min=[0.0, 0.1], max=[1.0]))",
          "131:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "132:                                 \"Shapes must be equal rank|must be rank 1\"):",
          "133:       self.evaluate(",
          "134:           array_ops.fake_quant_with_min_max_vars_per_channel_gradient(",
          "135:               gradients=gradients, inputs=inputs, min=[1.0], max=[[1.0]]))",
          "137:     with self.assertRaisesRegex(",
          "138:         (ValueError, errors.InvalidArgumentError),",
          "139:         \"Dimension 0 in both shapes must be equal|incorrect size\"):",
          "140:       self.evaluate(",
          "141:           array_ops.fake_quant_with_min_max_vars_per_channel_gradient(",
          "142:               gradients=gradients, inputs=inputs, min=[0.0], max=[1.0, 1.1]))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "337:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "338:                                 \"must be rank 0\"):",
          "339:       self.evaluate(",
          "346: if __name__ == \"__main__\":",
          "",
          "[Removed Lines]",
          "340:           math_ops.quantize_down_and_shrink_range(input=inputs,",
          "341:                                                   input_min=[],",
          "342:                                                   input_max=4.0,",
          "343:                                                   out_type=dtypes.quint8))",
          "",
          "[Added Lines]",
          "405:           math_ops.quantize_down_and_shrink_range(",
          "406:               input=inputs, input_min=[], input_max=4.0,",
          "407:               out_type=dtypes.quint8))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce0600b8c76a33d92949e67e69ea1073f547e8a8",
      "candidate_info": {
        "commit_hash": "ce0600b8c76a33d92949e67e69ea1073f547e8a8",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/ce0600b8c76a33d92949e67e69ea1073f547e8a8",
        "files": [
          "tensorflow/core/kernels/quantize_down_and_shrink_range.cc",
          "tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc",
          "tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py"
        ],
        "message": "Add IsScalar (rank == 0) check to input_min/max tensors for QuantizeDownAndShrinkRangeOp.\n\nPiperOrigin-RevId: 462401306",
        "before_after_code_files": [
          "tensorflow/core/kernels/quantize_down_and_shrink_range.cc||tensorflow/core/kernels/quantize_down_and_shrink_range.cc",
          "tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc||tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc",
          "tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py||tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/quantize_down_and_shrink_range.cc||tensorflow/core/kernels/quantize_down_and_shrink_range.cc",
            "tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc||tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc",
            "tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py||tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/quantize_down_and_shrink_range.cc||tensorflow/core/kernels/quantize_down_and_shrink_range.cc",
            "tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc||tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc",
            "tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py||tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/quantize_down_and_shrink_range.cc||tensorflow/core/kernels/quantize_down_and_shrink_range.cc": [
          "File: tensorflow/core/kernels/quantize_down_and_shrink_range.cc -> tensorflow/core/kernels/quantize_down_and_shrink_range.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:   void Compute(OpKernelContext* ctx) override {",
          "42:     const Tensor& input = ctx->input(0);",
          "45:     Tensor* output = nullptr;",
          "46:     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, input.shape(), &output));",
          "47:     Tensor* output_min = nullptr;",
          "",
          "[Removed Lines]",
          "43:     const float input_min_float = ctx->input(1).flat<float>()(0);",
          "44:     const float input_max_float = ctx->input(2).flat<float>()(0);",
          "",
          "[Added Lines]",
          "43:     const Tensor& input_min = ctx->input(1);",
          "44:     const Tensor& input_max = ctx->input(2);",
          "46:     OP_REQUIRES(",
          "47:         ctx, TensorShapeUtils::IsScalar(input_min.shape()),",
          "48:         errors::InvalidArgument(\"`input_min` must be rank 0 but is rank \",",
          "49:                                 input_min.dims()));",
          "50:     OP_REQUIRES(",
          "51:         ctx, TensorShapeUtils::IsScalar(input_max.shape()),",
          "52:         errors::InvalidArgument(\"`input_max` must be rank 0 but is rank \",",
          "53:                                 input_max.dims()));",
          "55:     const float input_min_float = input_min.scalar<float>()();",
          "56:     const float input_max_float = input_max.scalar<float>()();",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc||tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc": [
          "File: tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc -> tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   const int value_count = 3;",
          "54:   AddInputFromArray<qint32>(TensorShape({value_count}),",
          "55:                             {-(1 << 23), 0, (1 << 23)});",
          "58:   TF_ASSERT_OK(RunOpKernel());",
          "59:   Tensor expected(allocator(), DT_QUINT8, TensorShape({value_count}));",
          "60:   test::FillValues<quint8>(&expected, {0, 127, 255});",
          "",
          "[Removed Lines]",
          "56:   AddInputFromArray<float>(TensorShape({1}), {-256.0f});",
          "57:   AddInputFromArray<float>(TensorShape({1}), {256.0f});",
          "",
          "[Added Lines]",
          "56:   AddInputFromArray<float>(TensorShape({}), {-256.0f});",
          "57:   AddInputFromArray<float>(TensorShape({}), {256.0f});",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py||tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py": [
          "File: tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py -> tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "381:       self.fail(",
          "382:           \"Did not raise an exception where it is expected to raise either \"",
          "383:           \"a ValueError or errors.InvalidArgumentError.\")",
          "386: if __name__ == \"__main__\":",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "384: class QuantizeDownAndShrinkRangeOpTest(test_util.TensorFlowTestCase):",
          "386:   @test_util.run_in_graph_and_eager_modes",
          "387:   def test_invalid_inputs(self):",
          "388:     inputs = constant_op.constant(",
          "389:         np.int32(0), shape=[3, 3, 3, 3], dtype=dtypes.qint32)",
          "391:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "392:                                 \"must be rank 0\"):",
          "393:       self.evaluate(",
          "394:           math_ops.quantize_down_and_shrink_range(input=inputs,",
          "395:                                                   input_min=[],",
          "396:                                                   input_max=4.0,",
          "397:                                                   out_type=dtypes.quint8))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a18f7c1633fa415bdd117d21a4ea5401ba7093a",
      "candidate_info": {
        "commit_hash": "1a18f7c1633fa415bdd117d21a4ea5401ba7093a",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/1a18f7c1633fa415bdd117d21a4ea5401ba7093a",
        "files": [
          "tensorflow/core/kernels/quantize_down_and_shrink_range.cc",
          "tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc",
          "tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py"
        ],
        "message": "Add IsScalar (rank == 0) check to input_min/max tensors for QuantizeDownAndShrinkRangeOp.\n\nPiperOrigin-RevId: 462401306",
        "before_after_code_files": [
          "tensorflow/core/kernels/quantize_down_and_shrink_range.cc||tensorflow/core/kernels/quantize_down_and_shrink_range.cc",
          "tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc||tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc",
          "tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py||tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/quantize_down_and_shrink_range.cc||tensorflow/core/kernels/quantize_down_and_shrink_range.cc",
            "tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc||tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc",
            "tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py||tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/quantize_down_and_shrink_range.cc||tensorflow/core/kernels/quantize_down_and_shrink_range.cc",
            "tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc||tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc",
            "tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py||tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/quantize_down_and_shrink_range.cc||tensorflow/core/kernels/quantize_down_and_shrink_range.cc": [
          "File: tensorflow/core/kernels/quantize_down_and_shrink_range.cc -> tensorflow/core/kernels/quantize_down_and_shrink_range.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:   void Compute(OpKernelContext* ctx) override {",
          "42:     const Tensor& input = ctx->input(0);",
          "45:     Tensor* output = nullptr;",
          "46:     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, input.shape(), &output));",
          "47:     Tensor* output_min = nullptr;",
          "",
          "[Removed Lines]",
          "43:     const float input_min_float = ctx->input(1).flat<float>()(0);",
          "44:     const float input_max_float = ctx->input(2).flat<float>()(0);",
          "",
          "[Added Lines]",
          "43:     const Tensor& input_min = ctx->input(1);",
          "44:     const Tensor& input_max = ctx->input(2);",
          "46:     OP_REQUIRES(",
          "47:         ctx, TensorShapeUtils::IsScalar(input_min.shape()),",
          "48:         errors::InvalidArgument(\"`input_min` must be rank 0 but is rank \",",
          "49:                                 input_min.dims()));",
          "50:     OP_REQUIRES(",
          "51:         ctx, TensorShapeUtils::IsScalar(input_max.shape()),",
          "52:         errors::InvalidArgument(\"`input_max` must be rank 0 but is rank \",",
          "53:                                 input_max.dims()));",
          "55:     const float input_min_float = input_min.scalar<float>()();",
          "56:     const float input_max_float = input_max.scalar<float>()();",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc||tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc": [
          "File: tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc -> tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   const int value_count = 3;",
          "54:   AddInputFromArray<qint32>(TensorShape({value_count}),",
          "55:                             {-(1 << 23), 0, (1 << 23)});",
          "58:   TF_ASSERT_OK(RunOpKernel());",
          "59:   Tensor expected(allocator(), DT_QUINT8, TensorShape({value_count}));",
          "60:   test::FillValues<quint8>(&expected, {0, 128, 255});",
          "",
          "[Removed Lines]",
          "56:   AddInputFromArray<float>(TensorShape({1}), {-256.0f});",
          "57:   AddInputFromArray<float>(TensorShape({1}), {256.0f});",
          "",
          "[Added Lines]",
          "56:   AddInputFromArray<float>(TensorShape({}), {-256.0f});",
          "57:   AddInputFromArray<float>(TensorShape({}), {256.0f});",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py||tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py": [
          "File: tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py -> tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "382:           \"Did not raise an exception where it is expected to raise either \"",
          "383:           \"a ValueError or errors.InvalidArgumentError.\")",
          "385: if __name__ == \"__main__\":",
          "386:   googletest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "385: class QuantizeDownAndShrinkRangeOpTest(test_util.TensorFlowTestCase):",
          "387:   @test_util.run_in_graph_and_eager_modes",
          "388:   def test_invalid_inputs(self):",
          "389:     inputs = constant_op.constant(",
          "390:         np.int32(0), shape=[3, 3, 3, 3], dtype=dtypes.qint32)",
          "392:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "393:                                 \"must be rank 0\"):",
          "394:       self.evaluate(",
          "395:           math_ops.quantize_down_and_shrink_range(input=inputs,",
          "396:                                                   input_min=[],",
          "397:                                                   input_max=4.0,",
          "398:                                                   out_type=dtypes.quint8))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c16787969c2ca94429c5cdf44d58e83d98980a6d",
      "candidate_info": {
        "commit_hash": "c16787969c2ca94429c5cdf44d58e83d98980a6d",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c16787969c2ca94429c5cdf44d58e83d98980a6d",
        "files": [
          "tensorflow/core/kernels/quantize_down_and_shrink_range.cc",
          "tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc",
          "tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py"
        ],
        "message": "Add IsScalar (rank == 0) check to input_min/max tensors for QuantizeDownAndShrinkRangeOp.\n\nPiperOrigin-RevId: 462401306",
        "before_after_code_files": [
          "tensorflow/core/kernels/quantize_down_and_shrink_range.cc||tensorflow/core/kernels/quantize_down_and_shrink_range.cc",
          "tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc||tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc",
          "tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py||tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/quantize_down_and_shrink_range.cc||tensorflow/core/kernels/quantize_down_and_shrink_range.cc",
            "tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc||tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc",
            "tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py||tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/quantize_down_and_shrink_range.cc||tensorflow/core/kernels/quantize_down_and_shrink_range.cc",
            "tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc||tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc",
            "tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py||tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/quantize_down_and_shrink_range.cc||tensorflow/core/kernels/quantize_down_and_shrink_range.cc": [
          "File: tensorflow/core/kernels/quantize_down_and_shrink_range.cc -> tensorflow/core/kernels/quantize_down_and_shrink_range.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:   void Compute(OpKernelContext* ctx) override {",
          "42:     const Tensor& input = ctx->input(0);",
          "45:     Tensor* output = nullptr;",
          "46:     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, input.shape(), &output));",
          "47:     Tensor* output_min = nullptr;",
          "",
          "[Removed Lines]",
          "43:     const float input_min_float = ctx->input(1).flat<float>()(0);",
          "44:     const float input_max_float = ctx->input(2).flat<float>()(0);",
          "",
          "[Added Lines]",
          "43:     const Tensor& input_min = ctx->input(1);",
          "44:     const Tensor& input_max = ctx->input(2);",
          "46:     OP_REQUIRES(",
          "47:         ctx, TensorShapeUtils::IsScalar(input_min.shape()),",
          "48:         errors::InvalidArgument(\"`input_min` must be rank 0 but is rank \",",
          "49:                                 input_min.dims()));",
          "50:     OP_REQUIRES(",
          "51:         ctx, TensorShapeUtils::IsScalar(input_max.shape()),",
          "52:         errors::InvalidArgument(\"`input_max` must be rank 0 but is rank \",",
          "53:                                 input_max.dims()));",
          "55:     const float input_min_float = input_min.scalar<float>()();",
          "56:     const float input_max_float = input_max.scalar<float>()();",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc||tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc": [
          "File: tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc -> tensorflow/core/kernels/quantize_down_and_shrink_range_op_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   const int value_count = 3;",
          "54:   AddInputFromArray<qint32>(TensorShape({value_count}),",
          "55:                             {-(1 << 23), 0, (1 << 23)});",
          "58:   TF_ASSERT_OK(RunOpKernel());",
          "59:   Tensor expected(allocator(), DT_QUINT8, TensorShape({value_count}));",
          "60:   test::FillValues<quint8>(&expected, {0, 127, 255});",
          "",
          "[Removed Lines]",
          "56:   AddInputFromArray<float>(TensorShape({1}), {-256.0f});",
          "57:   AddInputFromArray<float>(TensorShape({1}), {256.0f});",
          "",
          "[Added Lines]",
          "56:   AddInputFromArray<float>(TensorShape({}), {-256.0f});",
          "57:   AddInputFromArray<float>(TensorShape({}), {256.0f});",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py||tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py": [
          "File: tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py -> tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "381:       self.fail(",
          "382:           \"Did not raise an exception where it is expected to raise either \"",
          "383:           \"a ValueError or errors.InvalidArgumentError.\")",
          "385: if __name__ == \"__main__\":",
          "386:   googletest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "385: class QuantizeDownAndShrinkRangeOpTest(test_util.TensorFlowTestCase):",
          "387:   @test_util.run_in_graph_and_eager_modes",
          "388:   def test_invalid_inputs(self):",
          "389:     inputs = constant_op.constant(",
          "390:         np.int32(0), shape=[3, 3, 3, 3], dtype=dtypes.qint32)",
          "392:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "393:                                 \"must be rank 0\"):",
          "394:       self.evaluate(",
          "395:           math_ops.quantize_down_and_shrink_range(input=inputs,",
          "396:                                                   input_min=[],",
          "397:                                                   input_max=4.0,",
          "398:                                                   out_type=dtypes.quint8))",
          "",
          "---------------"
        ]
      }
    }
  ]
}