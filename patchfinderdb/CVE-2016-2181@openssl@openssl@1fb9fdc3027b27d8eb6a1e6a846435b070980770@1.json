{
  "cve_id": "CVE-2016-2181",
  "cve_desc": "The Anti-Replay feature in the DTLS implementation in OpenSSL before 1.1.0 mishandles early use of a new epoch number in conjunction with a large sequence number, which allows remote attackers to cause a denial of service (false-positive packet drops) via spoofed DTLS records, related to rec_layer_d1.c and ssl3_record.c.",
  "repo": "openssl/openssl",
  "patch_hash": "1fb9fdc3027b27d8eb6a1e6a846435b070980770",
  "patch_info": {
    "commit_hash": "1fb9fdc3027b27d8eb6a1e6a846435b070980770",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/1fb9fdc3027b27d8eb6a1e6a846435b070980770",
    "files": [
      "include/openssl/ssl.h",
      "ssl/record/rec_layer_d1.c",
      "ssl/record/record_locl.h",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_err.c"
    ],
    "message": "Fix DTLS replay protection\n\nThe DTLS implementation provides some protection against replay attacks\nin accordance with RFC6347 section 4.1.2.6.\n\nA sliding \"window\" of valid record sequence numbers is maintained with\nthe \"right\" hand edge of the window set to the highest sequence number we\nhave received so far. Records that arrive that are off the \"left\" hand\nedge of the window are rejected. Records within the window are checked\nagainst a list of records received so far. If we already received it then\nwe also reject the new record.\n\nIf we have not already received the record, or the sequence number is off\nthe right hand edge of the window then we verify the MAC of the record.\nIf MAC verification fails then we discard the record. Otherwise we mark\nthe record as received. If the sequence number was off the right hand edge\nof the window, then we slide the window along so that the right hand edge\nis in line with the newly received sequence number.\n\nRecords may arrive for future epochs, i.e. a record from after a CCS being\nsent, can arrive before the CCS does if the packets get re-ordered. As we\nhave not yet received the CCS we are not yet in a position to decrypt or\nvalidate the MAC of those records. OpenSSL places those records on an\nunprocessed records queue. It additionally updates the window immediately,\neven though we have not yet verified the MAC. This will only occur if\ncurrently in a handshake/renegotiation.\n\nThis could be exploited by an attacker by sending a record for the next\nepoch (which does not have to decrypt or have a valid MAC), with a very\nlarge sequence number. This means the right hand edge of the window is\nmoved very far to the right, and all subsequent legitimate packets are\ndropped causing a denial of service.\n\nA similar effect can be achieved during the initial handshake. In this\ncase there is no MAC key negotiated yet. Therefore an attacker can send a\nmessage for the current epoch with a very large sequence number. The code\nwill process the record as normal. If the hanshake message sequence number\n(as opposed to the record sequence number that we have been talking about\nso far) is in the future then the injected message is bufferred to be\nhandled later, but the window is still updated. Therefore all subsequent\nlegitimate handshake records are dropped. This aspect is not considered a\nsecurity issue because there are many ways for an attacker to disrupt the\ninitial handshake and prevent it from completing successfully (e.g.\ninjection of a handshake message will cause the Finished MAC to fail and\nthe handshake to be aborted). This issue comes about as a result of trying\nto do replay protection, but having no integrity mechanism in place yet.\nDoes it even make sense to have replay protection in epoch 0? That\nissue isn't addressed here though.\n\nThis addressed an OCAP Audit issue.\n\nCVE-2016-2181\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl.h||include/openssl/ssl.h",
      "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
      "ssl/record/record_locl.h||ssl/record/record_locl.h",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_err.c||ssl/ssl_err.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl.h||include/openssl/ssl.h": [
      "File: include/openssl/ssl.h -> include/openssl/ssl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "2066: # define SSL_F_DTLS1_CHECK_TIMEOUT_NUM                    318",
      "2067: # define SSL_F_DTLS1_HEARTBEAT                            305",
      "2068: # define SSL_F_DTLS1_PREPROCESS_FRAGMENT                  288",
      "2069: # define SSL_F_DTLS1_PROCESS_RECORD                       257",
      "2070: # define SSL_F_DTLS1_READ_BYTES                           258",
      "2071: # define SSL_F_DTLS1_READ_FAILED                          339",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2069: # define SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS             423",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c": [
      "File: ssl/record/rec_layer_d1.c -> ssl/record/rec_layer_d1.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "230: {",
      "231:     pitem *item;",
      "232:     SSL3_BUFFER *rb;",
      "234:     item = pqueue_peek(s->rlayer.d->unprocessed_rcds.q);",
      "235:     if (item) {",
      "237:         if (s->rlayer.d->unprocessed_rcds.epoch != s->rlayer.d->r_epoch)",
      "240:         rb = RECORD_LAYER_get_rbuf(&s->rlayer);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "233:     SSL3_RECORD *rr;",
      "234:     DTLS1_BITMAP *bitmap;",
      "235:     unsigned int is_next_epoch;",
      "236:     int replayok = 1;",
      "244:         rr = RECORD_LAYER_get_rrec(&s->rlayer);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "253:         while (pqueue_peek(s->rlayer.d->unprocessed_rcds.q)) {",
      "254:             dtls1_get_unprocessed_record(s);",
      "257:             if (dtls1_buffer_record(s, &(s->rlayer.d->processed_rcds),",
      "261:         }",
      "262:     }",
      "",
      "[Removed Lines]",
      "255:             if (!dtls1_process_record(s))",
      "256:                 return (0);",
      "258:                                     SSL3_RECORD_get_seq_num(s->rlayer.rrec)) <",
      "259:                 0)",
      "260:                 return -1;",
      "",
      "[Added Lines]",
      "261:             bitmap = dtls1_get_bitmap(s, rr, &is_next_epoch);",
      "262:             if (bitmap == NULL) {",
      "268:                  SSLerr(SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS,",
      "269:                         ERR_R_INTERNAL_ERROR);",
      "270:                  return 0;",
      "271:             }",
      "272: #ifndef OPENSSL_NO_SCTP",
      "274:             if (!BIO_dgram_is_sctp(SSL_get_rbio(s)))",
      "275: #endif",
      "276:             {",
      "283:                 replayok = dtls1_record_replay_check(s, bitmap);",
      "284:             }",
      "286:             if (!replayok || !dtls1_process_record(s, bitmap)) {",
      "288:                 rr->length = 0;",
      "289:                 RECORD_LAYER_reset_packet_length(&s->rlayer);",
      "290:                 continue;",
      "291:             }",
      "294:                     SSL3_RECORD_get_seq_num(s->rlayer.rrec)) < 0)",
      "295:                 return 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "268:     s->rlayer.d->processed_rcds.epoch = s->rlayer.d->r_epoch;",
      "269:     s->rlayer.d->unprocessed_rcds.epoch = s->rlayer.d->r_epoch + 1;",
      "272: }",
      "",
      "[Removed Lines]",
      "271:     return (1);",
      "",
      "[Added Lines]",
      "306:     return 1;",
      "",
      "---------------"
    ],
    "ssl/record/record_locl.h||ssl/record/record_locl.h": [
      "File: ssl/record/record_locl.h -> ssl/record/record_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "110: __owur int tls1_cbc_remove_padding(const SSL *s,",
      "111:                                    SSL3_RECORD *rec,",
      "112:                                    unsigned block_size, unsigned mac_size);",
      "114: __owur int dtls1_get_record(SSL *s);",
      "",
      "[Removed Lines]",
      "113: int dtls1_process_record(SSL *s);",
      "",
      "[Added Lines]",
      "113: int dtls1_process_record(SSL *s, DTLS1_BITMAP *bitmap);",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1273: #endif",
      "1274: }",
      "1277: {",
      "1278:     int i, al;",
      "1279:     int enc_err;",
      "",
      "[Removed Lines]",
      "1276: int dtls1_process_record(SSL *s)",
      "",
      "[Added Lines]",
      "1276: int dtls1_process_record(SSL *s, DTLS1_BITMAP *bitmap)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1431:     RECORD_LAYER_reset_packet_length(&s->rlayer);",
      "1432:     return (1);",
      "1434:  f_err:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1434:     dtls1_record_bitmap_update(s, bitmap);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1476:         return -1;",
      "",
      "[Removed Lines]",
      "1475:     if (dtls1_process_buffered_records(s) < 0)",
      "",
      "[Added Lines]",
      "1479:     if (!dtls1_process_buffered_records(s))",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1604:                 (s, &(DTLS_RECORD_LAYER_get_unprocessed_rcds(&s->rlayer)),",
      "1605:                  rr->seq_num) < 0)",
      "1606:                 return -1;",
      "1609:         }",
      "1610:         rr->length = 0;",
      "1611:         RECORD_LAYER_reset_packet_length(&s->rlayer);",
      "1612:         goto again;",
      "1613:     }",
      "1616:         rr->length = 0;",
      "1619:     }",
      "1622:     return (1);",
      "",
      "[Removed Lines]",
      "1608:             dtls1_record_bitmap_update(s, bitmap);",
      "1615:     if (!dtls1_process_record(s)) {",
      "",
      "[Added Lines]",
      "1621:     if (!dtls1_process_record(s, bitmap)) {",
      "",
      "---------------"
    ],
    "ssl/ssl_err.c||ssl/ssl_err.c": [
      "File: ssl/ssl_err.c -> ssl/ssl_err.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "32:     {ERR_FUNC(SSL_F_DTLS1_CHECK_TIMEOUT_NUM), \"dtls1_check_timeout_num\"},",
      "33:     {ERR_FUNC(SSL_F_DTLS1_HEARTBEAT), \"dtls1_heartbeat\"},",
      "34:     {ERR_FUNC(SSL_F_DTLS1_PREPROCESS_FRAGMENT), \"dtls1_preprocess_fragment\"},",
      "35:     {ERR_FUNC(SSL_F_DTLS1_PROCESS_RECORD), \"dtls1_process_record\"},",
      "36:     {ERR_FUNC(SSL_F_DTLS1_READ_BYTES), \"dtls1_read_bytes\"},",
      "37:     {ERR_FUNC(SSL_F_DTLS1_READ_FAILED), \"dtls1_read_failed\"},",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35:     {ERR_FUNC(SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS),",
      "36:      \"dtls1_process_buffered_records\"},",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b612799a80af398040efc2416e0d09dcb0da1cf5",
      "candidate_info": {
        "commit_hash": "b612799a80af398040efc2416e0d09dcb0da1cf5",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b612799a80af398040efc2416e0d09dcb0da1cf5",
        "files": [
          "Configure",
          "apps/openssl.c",
          "apps/s_cb.c",
          "apps/s_client.c",
          "apps/s_server.c",
          "include/openssl/ssl.h",
          "include/openssl/ssl3.h",
          "include/openssl/tls1.h",
          "ssl/s3_lib.c",
          "ssl/ssl_err.c",
          "ssl/t1_trce.c",
          "util/mkdef.pl"
        ],
        "message": "Revert \"Remove heartbeats completely\"\n\nDone too soon, this is for future OpenSSL 1.2.0\n\nThis reverts commit 6c62f9e1639a7d1a879f363a99882920104dfedb.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "apps/openssl.c||apps/openssl.c",
          "apps/s_cb.c||apps/s_cb.c",
          "apps/s_client.c||apps/s_client.c",
          "apps/s_server.c||apps/s_server.c",
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "include/openssl/ssl3.h||include/openssl/ssl3.h",
          "include/openssl/tls1.h||include/openssl/tls1.h",
          "ssl/s3_lib.c||ssl/s3_lib.c",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/t1_trce.c||ssl/t1_trce.c",
          "util/mkdef.pl||util/mkdef.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ],
          "candidate": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ]
        }
      },
      "candidate_diff": {
        "apps/openssl.c||apps/openssl.c": [
          "File: apps/openssl.c -> apps/openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "628: #ifdef OPENSSL_NO_GOST",
          "629:     BIO_puts(bio_out, \"GOST\\n\");",
          "630: #endif",
          "631: #ifdef OPENSSL_NO_IDEA",
          "632:     BIO_puts(bio_out, \"IDEA\\n\");",
          "633: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "631: #ifdef OPENSSL_NO_HEARTBEATS",
          "632:     BIO_puts(bio_out, \"HEARTBEATS\\n\");",
          "633: #endif",
          "",
          "---------------"
        ],
        "apps/s_cb.c||apps/s_cb.c": [
          "File: apps/s_cb.c -> apps/s_cb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "555:         case 23:",
          "556:             str_content_type = \"ApplicationData\";",
          "557:             break;",
          "558:         }",
          "559:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "558: #ifndef OPENSSL_NO_HEARTBEATS",
          "559:         case 24:",
          "560:             str_details1 = \", Heartbeat\";",
          "562:             if (len > 0) {",
          "563:                 switch (bp[0]) {",
          "564:                 case 1:",
          "565:                     str_details1 = \", HeartbeatRequest\";",
          "566:                     break;",
          "567:                 case 2:",
          "568:                     str_details1 = \", HeartbeatResponse\";",
          "569:                     break;",
          "570:                 }",
          "571:             }",
          "572:             break;",
          "573: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "595:     {\"SRP\", TLSEXT_TYPE_srp},",
          "596:     {\"signature algorithms\", TLSEXT_TYPE_signature_algorithms},",
          "597:     {\"use SRTP\", TLSEXT_TYPE_use_srtp},",
          "598:     {\"session ticket\", TLSEXT_TYPE_session_ticket},",
          "599:     {\"renegotiation info\", TLSEXT_TYPE_renegotiate},",
          "600:     {\"signed certificate timestamps\", TLSEXT_TYPE_signed_certificate_timestamp},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "614:     {\"heartbeat\", TLSEXT_TYPE_heartbeat},",
          "",
          "---------------"
        ],
        "apps/s_client.c||apps/s_client.c": [
          "File: apps/s_client.c -> apps/s_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2448:                 SSL_renegotiate(con);",
          "2449:                 cbuf_len = 0;",
          "2450:             }",
          "2451:             else {",
          "2452:                 cbuf_len = i;",
          "2453:                 cbuf_off = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2451: #ifndef OPENSSL_NO_HEARTBEATS",
          "2452:             else if ((!c_ign_eof) && (cbuf[0] == 'B' && cmdletters)) {",
          "2453:                 BIO_printf(bio_err, \"HEARTBEATING\\n\");",
          "2454:                 SSL_heartbeat(con);",
          "2455:                 cbuf_len = 0;",
          "2456:             }",
          "2457: #endif",
          "",
          "---------------"
        ],
        "apps/s_server.c||apps/s_server.c": [
          "File: apps/s_server.c -> apps/s_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2227:                     goto err;",
          "2228:                 }",
          "2229:                 if ((buf[0] == 'r') && ((buf[1] == '\\n') || (buf[1] == '\\r'))) {",
          "2230:                     SSL_renegotiate(con);",
          "2231:                     i = SSL_do_handshake(con);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2229: #ifndef OPENSSL_NO_HEARTBEATS",
          "2230:                 if ((buf[0] == 'B') && ((buf[1] == '\\n') || (buf[1] == '\\r'))) {",
          "2231:                     BIO_printf(bio_err, \"HEARTBEATING\\n\");",
          "2232:                     SSL_heartbeat(con);",
          "2233:                     i = 0;",
          "2234:                     continue;",
          "2235:                 }",
          "2236: #endif",
          "",
          "---------------"
        ],
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "509: # define SSL_get_secure_renegotiation_support(ssl) \\",
          "510:         SSL_ctrl((ssl), SSL_CTRL_GET_RI_SUPPORT, 0, NULL)",
          "512: # define SSL_CTX_set_cert_flags(ctx,op) \\",
          "513:         SSL_CTX_ctrl((ctx),SSL_CTRL_CERT_FLAGS,(op),NULL)",
          "514: # define SSL_set_cert_flags(s,op) \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "512: # ifndef OPENSSL_NO_HEARTBEATS",
          "513: #  define SSL_heartbeat(ssl) \\",
          "514:         SSL_ctrl((ssl),SSL_CTRL_DTLS_EXT_SEND_HEARTBEAT,0,NULL)",
          "515: # endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1090: # define SSL_CTRL_SET_TLS_EXT_SRP_USERNAME               79",
          "1091: # define SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH               80",
          "1092: # define SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD               81",
          "1093: # define DTLS_CTRL_GET_TIMEOUT           73",
          "1094: # define DTLS_CTRL_HANDLE_TIMEOUT        74",
          "1095: # define SSL_CTRL_GET_RI_SUPPORT                 76",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1098: # ifndef OPENSSL_NO_HEARTBEATS",
          "1099: #  define SSL_CTRL_DTLS_EXT_SEND_HEARTBEAT               85",
          "1100: #  define SSL_CTRL_GET_DTLS_EXT_HEARTBEAT_PENDING        86",
          "1101: #  define SSL_CTRL_SET_DTLS_EXT_HEARTBEAT_NO_REQUESTS    87",
          "1102: # endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2075: # define SSL_F_DO_SSL3_WRITE                              104",
          "2076: # define SSL_F_DTLS1_BUFFER_RECORD                        247",
          "2077: # define SSL_F_DTLS1_CHECK_TIMEOUT_NUM                    318",
          "2078: # define SSL_F_DTLS1_PREPROCESS_FRAGMENT                  288",
          "2079: # define SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS             424",
          "2080: # define SSL_F_DTLS1_PROCESS_RECORD                       257",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2088: # define SSL_F_DTLS1_HEARTBEAT                            305",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2499: # define SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE             1111",
          "2500: # define SSL_R_TLSV1_UNRECOGNIZED_NAME                    1112",
          "2501: # define SSL_R_TLSV1_UNSUPPORTED_EXTENSION                1110",
          "2502: # define SSL_R_TLS_ILLEGAL_EXPORTER_LABEL                 367",
          "2503: # define SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST             157",
          "2504: # define SSL_R_TOO_MANY_WARN_ALERTS                       409",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2513: # define SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT           365",
          "2514: # define SSL_R_TLS_HEARTBEAT_PENDING                      366",
          "",
          "---------------"
        ],
        "include/openssl/ssl3.h||include/openssl/ssl3.h": [
          "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "204: # define SSL3_RT_ALERT                   21",
          "205: # define SSL3_RT_HANDSHAKE               22",
          "206: # define SSL3_RT_APPLICATION_DATA        23",
          "209: # define TLS1_RT_CRYPTO                  0x1000",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207: # define DTLS1_RT_HEARTBEAT              24",
          "",
          "---------------"
        ],
        "include/openssl/tls1.h||include/openssl/tls1.h": [
          "File: include/openssl/tls1.h -> include/openssl/tls1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "147: # define TLSEXT_TYPE_use_srtp    14",
          "150: # define TLSEXT_TYPE_application_layer_protocol_negotiation 16",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150: # define TLSEXT_TYPE_heartbeat   15",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "322: # define SSL_CTX_set_tlsext_ticket_key_cb(ssl, cb) \\",
          "323: SSL_CTX_callback_ctrl(ssl,SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB,(void (*)(void))cb)",
          "326: # define TLS1_CK_PSK_WITH_RC4_128_SHA                    0x0300008A",
          "327: # define TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA               0x0300008B",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328: # ifndef OPENSSL_NO_HEARTBEATS",
          "329: #  define SSL_DTLSEXT_HB_ENABLED                   0x01",
          "330: #  define SSL_DTLSEXT_HB_DONT_SEND_REQUESTS        0x02",
          "331: #  define SSL_DTLSEXT_HB_DONT_RECV_REQUESTS        0x04",
          "332: #  define SSL_get_dtlsext_heartbeat_pending(ssl) \\",
          "333:         SSL_ctrl((ssl),SSL_CTRL_GET_DTLS_EXT_HEARTBEAT_PENDING,0,NULL)",
          "334: #  define SSL_set_dtlsext_heartbeat_no_requests(ssl, arg) \\",
          "335:         SSL_ctrl((ssl),SSL_CTRL_SET_DTLS_EXT_HEARTBEAT_NO_REQUESTS,arg,NULL)",
          "337: #  if OPENSSL_API_COMPAT < 0x10100000L",
          "338: #   define SSL_CTRL_TLS_EXT_SEND_HEARTBEAT \\",
          "339:         SSL_CTRL_DTLS_EXT_SEND_HEARTBEAT",
          "340: #   define SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING \\",
          "341:         SSL_CTRL_GET_DTLS_EXT_HEARTBEAT_PENDING",
          "342: #   define SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS \\",
          "343:         SSL_CTRL_SET_DTLS_EXT_HEARTBEAT_NO_REQUESTS",
          "344: #   define SSL_TLSEXT_HB_ENABLED \\",
          "345:         SSL_DTLSEXT_HB_ENABLED",
          "346: #   define SSL_TLSEXT_HB_DONT_SEND_REQUESTS \\",
          "347:         SSL_DTLSEXT_HB_DONT_SEND_REQUESTS",
          "348: #   define SSL_TLSEXT_HB_DONT_RECV_REQUESTS \\",
          "349:         SSL_DTLSEXT_HB_DONT_RECV_REQUESTS",
          "350: #   define SSL_get_tlsext_heartbeat_pending(ssl) \\",
          "351:         SSL_get_dtlsext_heartbeat_pending(ssl)",
          "352: #   define SSL_set_tlsext_heartbeat_no_requests(ssl, arg) \\",
          "353:         SSL_set_dtlsext_heartbeat_no_requests(ssl, arg)",
          "354: #  endif",
          "355: # endif",
          "",
          "---------------"
        ],
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3047:         ret = 1;",
          "3048:         break;",
          "3050:     case SSL_CTRL_CHAIN:",
          "3051:         if (larg)",
          "3052:             return ssl_cert_set1_chain(s, NULL, (STACK_OF(X509) *)parg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3050: #ifndef OPENSSL_NO_HEARTBEATS",
          "3051:     case SSL_CTRL_DTLS_EXT_SEND_HEARTBEAT:",
          "3052:     case SSL_CTRL_GET_DTLS_EXT_HEARTBEAT_PENDING:",
          "3053:     case SSL_CTRL_SET_DTLS_EXT_HEARTBEAT_NO_REQUESTS:",
          "3054:         break;",
          "3055: #endif",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     {ERR_FUNC(SSL_F_DO_SSL3_WRITE), \"do_ssl3_write\"},",
          "31:     {ERR_FUNC(SSL_F_DTLS1_BUFFER_RECORD), \"dtls1_buffer_record\"},",
          "32:     {ERR_FUNC(SSL_F_DTLS1_CHECK_TIMEOUT_NUM), \"dtls1_check_timeout_num\"},",
          "33:     {ERR_FUNC(SSL_F_DTLS1_PREPROCESS_FRAGMENT), \"dtls1_preprocess_fragment\"},",
          "34:     {ERR_FUNC(SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS),",
          "35:      \"dtls1_process_buffered_records\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:     {ERR_FUNC(SSL_F_DTLS1_HEARTBEAT), \"dtls1_heartbeat\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "619:     {ERR_REASON(SSL_R_TLSV1_UNRECOGNIZED_NAME), \"tlsv1 unrecognized name\"},",
          "620:     {ERR_REASON(SSL_R_TLSV1_UNSUPPORTED_EXTENSION),",
          "621:      \"tlsv1 unsupported extension\"},",
          "622:     {ERR_REASON(SSL_R_TLS_ILLEGAL_EXPORTER_LABEL),",
          "623:      \"tls illegal exporter label\"},",
          "624:     {ERR_REASON(SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "623:     {ERR_REASON(SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT),",
          "624:      \"peer does not accept heartbeats\"},",
          "625:     {ERR_REASON(SSL_R_TLS_HEARTBEAT_PENDING),",
          "626:      \"heartbeat request already pending\"},",
          "",
          "---------------"
        ],
        "ssl/t1_trce.c||ssl/t1_trce.c": [
          "File: ssl/t1_trce.c -> ssl/t1_trce.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "710:         }",
          "711:         break;",
          "713:     case TLSEXT_TYPE_session_ticket:",
          "714:         if (extlen != 0)",
          "715:             ssl_print_hex(bio, indent + 4, \"ticket\", ext, extlen);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "713:     case TLSEXT_TYPE_heartbeat:",
          "714:         return 0;",
          "",
          "---------------"
        ],
        "util/mkdef.pl||util/mkdef.pl": [
          "File: util/mkdef.pl -> util/mkdef.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     # RFC3779",
          "102:     \"RFC3779\",",
          "103:     # TLS",
          "105:     # CMS",
          "106:     \"CMS\",",
          "107:                          \"OCSP\",",
          "",
          "[Removed Lines]",
          "104:     \"PSK\", \"SRP\",",
          "",
          "[Added Lines]",
          "104:     \"PSK\", \"SRP\", \"HEARTBEATS\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3884b47b7c255c2e94d9b387ee83c7e8bb981258",
      "candidate_info": {
        "commit_hash": "3884b47b7c255c2e94d9b387ee83c7e8bb981258",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3884b47b7c255c2e94d9b387ee83c7e8bb981258",
        "files": [
          "ssl/d1_pkt.c",
          "ssl/ssl.h",
          "ssl/ssl_err.c"
        ],
        "message": "Fix DTLS replay protection\n\nThe DTLS implementation provides some protection against replay attacks\nin accordance with RFC6347 section 4.1.2.6.\n\nA sliding \"window\" of valid record sequence numbers is maintained with\nthe \"right\" hand edge of the window set to the highest sequence number we\nhave received so far. Records that arrive that are off the \"left\" hand\nedge of the window are rejected. Records within the window are checked\nagainst a list of records received so far. If we already received it then\nwe also reject the new record.\n\nIf we have not already received the record, or the sequence number is off\nthe right hand edge of the window then we verify the MAC of the record.\nIf MAC verification fails then we discard the record. Otherwise we mark\nthe record as received. If the sequence number was off the right hand edge\nof the window, then we slide the window along so that the right hand edge\nis in line with the newly received sequence number.\n\nRecords may arrive for future epochs, i.e. a record from after a CCS being\nsent, can arrive before the CCS does if the packets get re-ordered. As we\nhave not yet received the CCS we are not yet in a position to decrypt or\nvalidate the MAC of those records. OpenSSL places those records on an\nunprocessed records queue. It additionally updates the window immediately,\neven though we have not yet verified the MAC. This will only occur if\ncurrently in a handshake/renegotiation.\n\nThis could be exploited by an attacker by sending a record for the next\nepoch (which does not have to decrypt or have a valid MAC), with a very\nlarge sequence number. This means the right hand edge of the window is\nmoved very far to the right, and all subsequent legitimate packets are\ndropped causing a denial of service.\n\nA similar effect can be achieved during the initial handshake. In this\ncase there is no MAC key negotiated yet. Therefore an attacker can send a\nmessage for the current epoch with a very large sequence number. The code\nwill process the record as normal. If the hanshake message sequence number\n(as opposed to the record sequence number that we have been talking about\nso far) is in the future then the injected message is bufferred to be\nhandled later, but the window is still updated. Therefore all subsequent\nlegitimate handshake records are dropped. This aspect is not considered a\nsecurity issue because there are many ways for an attacker to disrupt the\ninitial handshake and prevent it from completing successfully (e.g.\ninjection of a handshake message will cause the Finished MAC to fail and\nthe handshake to be aborted). This issue comes about as a result of trying\nto do replay protection, but having no integrity mechanism in place yet.\nDoes it even make sense to have replay protection in epoch 0? That\nissue isn't addressed here though.\n\nThis addressed an OCAP Audit issue.\n\nCVE-2016-2181\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_pkt.c||ssl/d1_pkt.c",
          "ssl/ssl.h||ssl/ssl.h",
          "ssl/ssl_err.c||ssl/ssl_err.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ],
          "candidate": [
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_pkt.c||ssl/d1_pkt.c": [
          "File: ssl/d1_pkt.c -> ssl/d1_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "194: #endif",
          "195: static int dtls1_buffer_record(SSL *s, record_pqueue *q,",
          "196:                                unsigned char *priority);",
          "200: static int dtls1_copy_record(SSL *s, pitem *item)",
          "",
          "[Removed Lines]",
          "197: static int dtls1_process_record(SSL *s);",
          "",
          "[Added Lines]",
          "197: static int dtls1_process_record(SSL *s, DTLS1_BITMAP *bitmap);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "320: {",
          "321:     pitem *item;",
          "322:     SSL3_BUFFER *rb;",
          "324:     item = pqueue_peek(s->d1->unprocessed_rcds.q);",
          "325:     if (item) {",
          "327:         if (s->d1->unprocessed_rcds.epoch != s->d1->r_epoch)",
          "330:         rb = &s->s3->rbuf;",
          "332:         if (rb->left > 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323:     SSL3_RECORD *rr;",
          "324:     DTLS1_BITMAP *bitmap;",
          "325:     unsigned int is_next_epoch;",
          "326:     int replayok = 1;",
          "334:         rr = &s->s3->rrec;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "344:         while (pqueue_peek(s->d1->unprocessed_rcds.q)) {",
          "345:             dtls1_get_unprocessed_record(s);",
          "348:             if (dtls1_buffer_record(s, &(s->d1->processed_rcds),",
          "349:                                     s->s3->rrec.seq_num) < 0)",
          "351:         }",
          "352:     }",
          "",
          "[Removed Lines]",
          "346:             if (!dtls1_process_record(s))",
          "347:                 return (0);",
          "350:                 return -1;",
          "",
          "[Added Lines]",
          "351:             bitmap = dtls1_get_bitmap(s, rr, &is_next_epoch);",
          "352:             if (bitmap == NULL) {",
          "358:                  SSLerr(SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS,",
          "359:                         ERR_R_INTERNAL_ERROR);",
          "360:                  return 0;",
          "361:             }",
          "362: #ifndef OPENSSL_NO_SCTP",
          "364:             if (!BIO_dgram_is_sctp(SSL_get_rbio(s)))",
          "365: #endif",
          "366:             {",
          "373:                 replayok = dtls1_record_replay_check(s, bitmap);",
          "374:             }",
          "376:             if (!replayok || !dtls1_process_record(s, bitmap)) {",
          "378:                 rr->length = 0;",
          "379:                 s->packet_length = 0;",
          "380:                 continue;",
          "381:             }",
          "385:                 return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "358:     s->d1->processed_rcds.epoch = s->d1->r_epoch;",
          "359:     s->d1->unprocessed_rcds.epoch = s->d1->r_epoch + 1;",
          "362: }",
          "364: #if 0",
          "",
          "[Removed Lines]",
          "361:     return (1);",
          "",
          "[Added Lines]",
          "396:     return 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "406: #endif",
          "409: {",
          "410:     int i, al;",
          "411:     int enc_err;",
          "",
          "[Removed Lines]",
          "408: static int dtls1_process_record(SSL *s)",
          "",
          "[Added Lines]",
          "443: static int dtls1_process_record(SSL *s, DTLS1_BITMAP *bitmap)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "567:     s->packet_length = 0;",
          "568:     return (1);",
          "570:  f_err:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "605:     dtls1_record_bitmap_update(s, bitmap);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "604:         return -1;",
          "",
          "[Removed Lines]",
          "603:     if (dtls1_process_buffered_records(s) < 0)",
          "",
          "[Added Lines]",
          "642:     if (!dtls1_process_buffered_records(s))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "735:             if (dtls1_buffer_record",
          "736:                 (s, &(s->d1->unprocessed_rcds), rr->seq_num) < 0)",
          "737:                 return -1;",
          "740:         }",
          "741:         rr->length = 0;",
          "742:         s->packet_length = 0;",
          "743:         goto again;",
          "744:     }",
          "747:         rr->length = 0;",
          "750:     }",
          "753:     return (1);",
          "",
          "[Removed Lines]",
          "739:             dtls1_record_bitmap_update(s, bitmap);",
          "746:     if (!dtls1_process_record(s)) {",
          "",
          "[Added Lines]",
          "783:     if (!dtls1_process_record(s, bitmap)) {",
          "",
          "---------------"
        ],
        "ssl/ssl.h||ssl/ssl.h": [
          "File: ssl/ssl.h -> ssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2615: # define SSL_F_DTLS1_HEARTBEAT                            305",
          "2616: # define SSL_F_DTLS1_OUTPUT_CERT_CHAIN                    255",
          "2617: # define SSL_F_DTLS1_PREPROCESS_FRAGMENT                  288",
          "2618: # define SSL_F_DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE           256",
          "2619: # define SSL_F_DTLS1_PROCESS_RECORD                       257",
          "2620: # define SSL_F_DTLS1_READ_BYTES                           258",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2618: # define SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS             404",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:     {ERR_FUNC(SSL_F_DTLS1_HEARTBEAT), \"dtls1_heartbeat\"},",
          "94:     {ERR_FUNC(SSL_F_DTLS1_OUTPUT_CERT_CHAIN), \"dtls1_output_cert_chain\"},",
          "95:     {ERR_FUNC(SSL_F_DTLS1_PREPROCESS_FRAGMENT), \"DTLS1_PREPROCESS_FRAGMENT\"},",
          "96:     {ERR_FUNC(SSL_F_DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE),",
          "97:      \"DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE\"},",
          "98:     {ERR_FUNC(SSL_F_DTLS1_PROCESS_RECORD), \"DTLS1_PROCESS_RECORD\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     {ERR_FUNC(SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS),",
          "97:      \"DTLS1_PROCESS_BUFFERED_RECORDS\"},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b77ab018b79a00f789b0fb85596b446b08be4c9d",
      "candidate_info": {
        "commit_hash": "b77ab018b79a00f789b0fb85596b446b08be4c9d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b77ab018b79a00f789b0fb85596b446b08be4c9d",
        "files": [
          "ssl/d1_pkt.c",
          "ssl/ssl.h",
          "ssl/ssl_err.c"
        ],
        "message": "Fix DTLS replay protection\n\nThe DTLS implementation provides some protection against replay attacks\nin accordance with RFC6347 section 4.1.2.6.\n\nA sliding \"window\" of valid record sequence numbers is maintained with\nthe \"right\" hand edge of the window set to the highest sequence number we\nhave received so far. Records that arrive that are off the \"left\" hand\nedge of the window are rejected. Records within the window are checked\nagainst a list of records received so far. If we already received it then\nwe also reject the new record.\n\nIf we have not already received the record, or the sequence number is off\nthe right hand edge of the window then we verify the MAC of the record.\nIf MAC verification fails then we discard the record. Otherwise we mark\nthe record as received. If the sequence number was off the right hand edge\nof the window, then we slide the window along so that the right hand edge\nis in line with the newly received sequence number.\n\nRecords may arrive for future epochs, i.e. a record from after a CCS being\nsent, can arrive before the CCS does if the packets get re-ordered. As we\nhave not yet received the CCS we are not yet in a position to decrypt or\nvalidate the MAC of those records. OpenSSL places those records on an\nunprocessed records queue. It additionally updates the window immediately,\neven though we have not yet verified the MAC. This will only occur if\ncurrently in a handshake/renegotiation.\n\nThis could be exploited by an attacker by sending a record for the next\nepoch (which does not have to decrypt or have a valid MAC), with a very\nlarge sequence number. This means the right hand edge of the window is\nmoved very far to the right, and all subsequent legitimate packets are\ndropped causing a denial of service.\n\nA similar effect can be achieved during the initial handshake. In this\ncase there is no MAC key negotiated yet. Therefore an attacker can send a\nmessage for the current epoch with a very large sequence number. The code\nwill process the record as normal. If the hanshake message sequence number\n(as opposed to the record sequence number that we have been talking about\nso far) is in the future then the injected message is bufferred to be\nhandled later, but the window is still updated. Therefore all subsequent\nlegitimate handshake records are dropped. This aspect is not considered a\nsecurity issue because there are many ways for an attacker to disrupt the\ninitial handshake and prevent it from completing successfully (e.g.\ninjection of a handshake message will cause the Finished MAC to fail and\nthe handshake to be aborted). This issue comes about as a result of trying\nto do replay protection, but having no integrity mechanism in place yet.\nDoes it even make sense to have replay protection in epoch 0? That\nissue isn't addressed here though.\n\nThis addressed an OCAP Audit issue.\n\nCVE-2016-2181\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_pkt.c||ssl/d1_pkt.c",
          "ssl/ssl.h||ssl/ssl.h",
          "ssl/ssl_err.c||ssl/ssl_err.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ],
          "candidate": [
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_pkt.c||ssl/d1_pkt.c": [
          "File: ssl/d1_pkt.c -> ssl/d1_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "194: #endif",
          "195: static int dtls1_buffer_record(SSL *s, record_pqueue *q,",
          "196:                                unsigned char *priority);",
          "200: static int dtls1_copy_record(SSL *s, pitem *item)",
          "",
          "[Removed Lines]",
          "197: static int dtls1_process_record(SSL *s);",
          "",
          "[Added Lines]",
          "197: static int dtls1_process_record(SSL *s, DTLS1_BITMAP *bitmap);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "320: {",
          "321:     pitem *item;",
          "322:     SSL3_BUFFER *rb;",
          "324:     item = pqueue_peek(s->d1->unprocessed_rcds.q);",
          "325:     if (item) {",
          "327:         if (s->d1->unprocessed_rcds.epoch != s->d1->r_epoch)",
          "330:         rb = &s->s3->rbuf;",
          "332:         if (rb->left > 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323:     SSL3_RECORD *rr;",
          "324:     DTLS1_BITMAP *bitmap;",
          "325:     unsigned int is_next_epoch;",
          "326:     int replayok = 1;",
          "334:         rr = &s->s3->rrec;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "344:         while (pqueue_peek(s->d1->unprocessed_rcds.q)) {",
          "345:             dtls1_get_unprocessed_record(s);",
          "348:             if (dtls1_buffer_record(s, &(s->d1->processed_rcds),",
          "349:                                     s->s3->rrec.seq_num) < 0)",
          "351:         }",
          "352:     }",
          "",
          "[Removed Lines]",
          "346:             if (!dtls1_process_record(s))",
          "347:                 return (0);",
          "350:                 return -1;",
          "",
          "[Added Lines]",
          "351:             bitmap = dtls1_get_bitmap(s, rr, &is_next_epoch);",
          "352:             if (bitmap == NULL) {",
          "358:                  SSLerr(SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS,",
          "359:                         ERR_R_INTERNAL_ERROR);",
          "360:                  return 0;",
          "361:             }",
          "362: #ifndef OPENSSL_NO_SCTP",
          "364:             if (!BIO_dgram_is_sctp(SSL_get_rbio(s)))",
          "365: #endif",
          "366:             {",
          "373:                 replayok = dtls1_record_replay_check(s, bitmap);",
          "374:             }",
          "376:             if (!replayok || !dtls1_process_record(s, bitmap)) {",
          "378:                 rr->length = 0;",
          "379:                 s->packet_length = 0;",
          "380:                 continue;",
          "381:             }",
          "385:                 return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "358:     s->d1->processed_rcds.epoch = s->d1->r_epoch;",
          "359:     s->d1->unprocessed_rcds.epoch = s->d1->r_epoch + 1;",
          "362: }",
          "364: #if 0",
          "",
          "[Removed Lines]",
          "361:     return (1);",
          "",
          "[Added Lines]",
          "396:     return 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "406: #endif",
          "409: {",
          "410:     int i, al;",
          "411:     int enc_err;",
          "",
          "[Removed Lines]",
          "408: static int dtls1_process_record(SSL *s)",
          "",
          "[Added Lines]",
          "443: static int dtls1_process_record(SSL *s, DTLS1_BITMAP *bitmap)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "567:     s->packet_length = 0;",
          "568:     return (1);",
          "570:  f_err:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "605:     dtls1_record_bitmap_update(s, bitmap);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "604:         return -1;",
          "",
          "[Removed Lines]",
          "603:     if (dtls1_process_buffered_records(s) < 0)",
          "",
          "[Added Lines]",
          "642:     if (!dtls1_process_buffered_records(s))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "731:             if (dtls1_buffer_record",
          "732:                 (s, &(s->d1->unprocessed_rcds), rr->seq_num) < 0)",
          "733:                 return -1;",
          "736:         }",
          "737:         rr->length = 0;",
          "738:         s->packet_length = 0;",
          "739:         goto again;",
          "740:     }",
          "743:         rr->length = 0;",
          "746:     }",
          "749:     return (1);",
          "",
          "[Removed Lines]",
          "735:             dtls1_record_bitmap_update(s, bitmap);",
          "742:     if (!dtls1_process_record(s)) {",
          "",
          "[Added Lines]",
          "779:     if (!dtls1_process_record(s, bitmap)) {",
          "",
          "---------------"
        ],
        "ssl/ssl.h||ssl/ssl.h": [
          "File: ssl/ssl.h -> ssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2256: # define SSL_F_DTLS1_HEARTBEAT                            305",
          "2257: # define SSL_F_DTLS1_OUTPUT_CERT_CHAIN                    255",
          "2258: # define SSL_F_DTLS1_PREPROCESS_FRAGMENT                  288",
          "2259: # define SSL_F_DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE           256",
          "2260: # define SSL_F_DTLS1_PROCESS_RECORD                       257",
          "2261: # define SSL_F_DTLS1_READ_BYTES                           258",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2259: # define SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS             404",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:     {ERR_FUNC(SSL_F_DTLS1_HEARTBEAT), \"DTLS1_HEARTBEAT\"},",
          "94:     {ERR_FUNC(SSL_F_DTLS1_OUTPUT_CERT_CHAIN), \"DTLS1_OUTPUT_CERT_CHAIN\"},",
          "95:     {ERR_FUNC(SSL_F_DTLS1_PREPROCESS_FRAGMENT), \"DTLS1_PREPROCESS_FRAGMENT\"},",
          "96:     {ERR_FUNC(SSL_F_DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE),",
          "97:      \"DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE\"},",
          "98:     {ERR_FUNC(SSL_F_DTLS1_PROCESS_RECORD), \"DTLS1_PROCESS_RECORD\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     {ERR_FUNC(SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS),",
          "97:      \"DTLS1_PROCESS_BUFFERED_RECORDS\"},",
          "",
          "---------------"
        ]
      }
    }
  ]
}