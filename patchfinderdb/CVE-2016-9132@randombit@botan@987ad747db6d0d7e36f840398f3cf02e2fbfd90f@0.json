{
  "cve_id": "CVE-2016-9132",
  "cve_desc": "In Botan 1.8.0 through 1.11.33, when decoding BER data an integer overflow could occur, which would cause an incorrect length field to be computed. Some API callers may use the returned (incorrect and attacker controlled) length field in a way which later causes memory corruption or other failure.",
  "repo": "randombit/botan",
  "patch_hash": "987ad747db6d0d7e36f840398f3cf02e2fbfd90f",
  "patch_info": {
    "commit_hash": "987ad747db6d0d7e36f840398f3cf02e2fbfd90f",
    "repo": "randombit/botan",
    "commit_url": "https://github.com/randombit/botan/commit/987ad747db6d0d7e36f840398f3cf02e2fbfd90f",
    "files": [
      "doc/security.rst",
      "src/lib/asn1/ber_dec.cpp",
      "src/lib/utils/info.txt",
      "src/lib/utils/safeint.h",
      "configure.py",
      "doc/manual/tls.rst",
      "src/cli/tls_client.cpp",
      "src/lib/entropy/cryptoapi_rng/es_capi.cpp",
      "src/lib/entropy/win32_stats/es_win32.cpp",
      "src/lib/rng/system_rng/system_rng.cpp",
      "src/lib/tls/msg_cert_status.cpp",
      "src/lib/tls/msg_client_hello.cpp",
      "src/lib/tls/msg_server_hello.cpp",
      "src/lib/tls/tls_callbacks.cpp",
      "src/lib/tls/tls_callbacks.h",
      "src/lib/tls/tls_client.cpp",
      "src/lib/tls/tls_extensions.cpp",
      "src/lib/tls/tls_extensions.h",
      "src/lib/tls/tls_handshake_state.cpp",
      "src/lib/tls/tls_handshake_state.h",
      "src/lib/tls/tls_messages.h",
      "src/lib/tls/tls_policy.cpp",
      "src/lib/tls/tls_policy.h",
      "src/lib/tls/tls_server.cpp",
      "src/lib/utils/dyn_load/dyn_load.cpp",
      "src/lib/utils/mem_ops.cpp",
      "src/lib/utils/os_utils.cpp",
      "src/lib/x509/ocsp.cpp",
      "src/lib/x509/ocsp.h",
      "src/lib/x509/x509path.cpp",
      "src/lib/x509/x509path.h"
    ],
    "message": "Fix BER decoder integer overflow",
    "before_after_code_files": [
      "src/lib/asn1/ber_dec.cpp||src/lib/asn1/ber_dec.cpp",
      "src/lib/utils/safeint.h||src/lib/utils/safeint.h"
    ]
  },
  "patch_diff": {
    "src/lib/asn1/ber_dec.cpp||src/lib/asn1/ber_dec.cpp": [
      "File: src/lib/asn1/ber_dec.cpp -> src/lib/asn1/ber_dec.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: #include <botan/ber_dec.h>",
      "10: #include <botan/bigint.h>",
      "11: #include <botan/loadstor.h>",
      "13: namespace Botan {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: #include <botan/internal/safeint.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "126:       size_t item_size = decode_length(&source, length_size);",
      "127:       source.discard_next(item_size);",
      "131:       if(type_tag == EOC && class_tag == UNIVERSAL)",
      "132:          break;",
      "",
      "[Removed Lines]",
      "129:       length += item_size + length_size + tag_size;",
      "",
      "[Added Lines]",
      "130:       length = BOTAN_CHECKED_ADD(length, item_size);",
      "131:       length = BOTAN_CHECKED_ADD(length, tag_size);",
      "132:       length = BOTAN_CHECKED_ADD(length, length_size);",
      "",
      "---------------"
    ],
    "src/lib/utils/safeint.h||src/lib/utils/safeint.h": [
      "File: src/lib/utils/safeint.h -> src/lib/utils/safeint.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8: #ifndef BOTAN_UTILS_SAFE_INT_H__",
      "9: #define BOTAN_UTILS_SAFE_INT_H__",
      "11: #include <botan/exceptn.h>",
      "12: #include <string>",
      "14: namespace Botan {",
      "16: class Integer_Overflow_Detected : public Exception",
      "17:    {",
      "18:    public:",
      "19:       Integer_Overflow_Detected(const std::string& file, int line) :",
      "20:          Exception(\"Integer overflow detected at \" + file + \":\" + std::to_string(line))",
      "21:          {}",
      "22:    };",
      "24: inline size_t checked_add(size_t x, size_t y, const char* file, int line)",
      "25:    {",
      "27:    size_t z = x + y;",
      "28:    if(z < x)",
      "29:       {",
      "30:       throw Integer_Overflow_Detected(file, line);",
      "31:       }",
      "32:    return z;",
      "33:    }",
      "35: #define BOTAN_CHECKED_ADD(x,y) checked_add(x,y,__FILE__,__LINE__)",
      "37: }",
      "39: #endif",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8fce1edc0214b1149cbf4723322714f2e22032eb",
      "candidate_info": {
        "commit_hash": "8fce1edc0214b1149cbf4723322714f2e22032eb",
        "repo": "randombit/botan",
        "commit_url": "https://github.com/randombit/botan/commit/8fce1edc0214b1149cbf4723322714f2e22032eb",
        "files": [
          "doc/log.txt",
          "src/asn1/ber_dec.cpp",
          "src/utils/info.txt",
          "src/utils/safeint.h"
        ],
        "message": "Fix BER integer overflow (CVE-2016-9132)",
        "before_after_code_files": [
          "src/asn1/ber_dec.cpp||src/asn1/ber_dec.cpp",
          "src/utils/safeint.h||src/utils/safeint.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/asn1/ber_dec.cpp||src/asn1/ber_dec.cpp": [
          "File: src/asn1/ber_dec.cpp -> src/asn1/ber_dec.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: #include <botan/ber_dec.h>",
          "9: #include <botan/bigint.h>",
          "10: #include <botan/get_byte.h>",
          "12: namespace Botan {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: #include <botan/internal/safeint.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:       size_t item_size = decode_length(&source, length_size);",
          "126:       source.discard_next(item_size);",
          "130:       if(type_tag == EOC && class_tag == UNIVERSAL)",
          "131:          break;",
          "",
          "[Removed Lines]",
          "128:       length += item_size + length_size + tag_size;",
          "",
          "[Added Lines]",
          "129:       length = BOTAN_CHECKED_ADD(length, item_size);",
          "130:       length = BOTAN_CHECKED_ADD(length, tag_size);",
          "131:       length = BOTAN_CHECKED_ADD(length, length_size);",
          "",
          "---------------"
        ],
        "src/utils/safeint.h||src/utils/safeint.h": [
          "File: src/utils/safeint.h -> src/utils/safeint.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: #ifndef BOTAN_UTILS_SAFE_INT_H__",
          "9: #define BOTAN_UTILS_SAFE_INT_H__",
          "11: #include <botan/exceptn.h>",
          "12: #include <string>",
          "14: namespace Botan {",
          "16: class Integer_Overflow_Detected : public Exception",
          "17:    {",
          "18:    public:",
          "19:       Integer_Overflow_Detected(const std::string& file, int line) :",
          "20:          Exception(\"Integer overflow detected at \" + file + \":\" + std::to_string(line))",
          "21:          {}",
          "22:    };",
          "24: inline size_t checked_add(size_t x, size_t y, const char* file, int line)",
          "25:    {",
          "27:    size_t z = x + y;",
          "28:    if(z < x)",
          "29:       {",
          "30:       throw Integer_Overflow_Detected(file, line);",
          "31:       }",
          "32:    return z;",
          "33:    }",
          "35: #define BOTAN_CHECKED_ADD(x,y) checked_add(x,y,__FILE__,__LINE__)",
          "37: }",
          "39: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}