{
  "cve_id": "CVE-2017-8071",
  "cve_desc": "drivers/hid/hid-cp2112.c in the Linux kernel 4.9.x before 4.9.9 uses a spinlock without considering that sleeping is possible in a USB HID request callback, which allows local users to cause a denial of service (deadlock) via unspecified vectors.",
  "repo": "torvalds/linux",
  "patch_hash": "7a7b5df84b6b4e5d599c7289526eed96541a0654",
  "patch_info": {
    "commit_hash": "7a7b5df84b6b4e5d599c7289526eed96541a0654",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/7a7b5df84b6b4e5d599c7289526eed96541a0654",
    "files": [
      "drivers/hid/hid-cp2112.c"
    ],
    "message": "HID: cp2112: fix sleep-while-atomic\n\nA recent commit fixing DMA-buffers on stack added a shared transfer\nbuffer protected by a spinlock. This is broken as the USB HID request\ncallbacks can sleep. Fix this up by replacing the spinlock with a mutex.\n\nFixes: 1ffb3c40ffb5 (\"HID: cp2112: make transfer buffers DMA capable\")\nCc: stable <stable@vger.kernel.org>\t# 4.9\nSigned-off-by: Johan Hovold <johan@kernel.org>\nReviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>\nSigned-off-by: Jiri Kosina <jkosina@suse.cz>",
    "before_after_code_files": [
      "drivers/hid/hid-cp2112.c||drivers/hid/hid-cp2112.c"
    ]
  },
  "patch_diff": {
    "drivers/hid/hid-cp2112.c||drivers/hid/hid-cp2112.c": [
      "File: drivers/hid/hid-cp2112.c -> drivers/hid/hid-cp2112.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "168:  atomic_t xfer_avail;",
      "169:  struct gpio_chip gc;",
      "170:  u8 *in_out_buffer;",
      "173:  struct gpio_desc *desc[8];",
      "174:  bool gpio_poll;",
      "",
      "[Removed Lines]",
      "171:  spinlock_t lock;",
      "",
      "[Added Lines]",
      "171:  struct mutex lock;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "186:  struct cp2112_device *dev = gpiochip_get_data(chip);",
      "187:  struct hid_device *hdev = dev->hdev;",
      "188:  u8 *buf = dev->in_out_buffer;",
      "190:  int ret;",
      "194:  ret = hid_hw_raw_request(hdev, CP2112_GPIO_CONFIG, buf,",
      "195:      CP2112_GPIO_CONFIG_LENGTH, HID_FEATURE_REPORT,",
      "",
      "[Removed Lines]",
      "189:  unsigned long flags;",
      "192:  spin_lock_irqsave(&dev->lock, flags);",
      "",
      "[Added Lines]",
      "191:  mutex_lock(&dev->lock);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "213:  ret = 0;",
      "215: exit:",
      "217:  return ret <= 0 ? ret : -EIO;",
      "218: }",
      "",
      "[Removed Lines]",
      "216:  spin_unlock_irqrestore(&dev->lock, flags);",
      "",
      "[Added Lines]",
      "215:  mutex_unlock(&dev->lock);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "222:  struct cp2112_device *dev = gpiochip_get_data(chip);",
      "223:  struct hid_device *hdev = dev->hdev;",
      "224:  u8 *buf = dev->in_out_buffer;",
      "226:  int ret;",
      "230:  buf[0] = CP2112_GPIO_SET;",
      "231:  buf[1] = value ? 0xff : 0;",
      "",
      "[Removed Lines]",
      "225:  unsigned long flags;",
      "228:  spin_lock_irqsave(&dev->lock, flags);",
      "",
      "[Added Lines]",
      "226:  mutex_lock(&dev->lock);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "237:  if (ret < 0)",
      "238:   hid_err(hdev, \"error setting GPIO values: %d\\n\", ret);",
      "241: }",
      "243: static int cp2112_gpio_get_all(struct gpio_chip *chip)",
      "",
      "[Removed Lines]",
      "240:  spin_unlock_irqrestore(&dev->lock, flags);",
      "",
      "[Added Lines]",
      "238:  mutex_unlock(&dev->lock);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "245:  struct cp2112_device *dev = gpiochip_get_data(chip);",
      "246:  struct hid_device *hdev = dev->hdev;",
      "247:  u8 *buf = dev->in_out_buffer;",
      "249:  int ret;",
      "253:  ret = hid_hw_raw_request(hdev, CP2112_GPIO_GET, buf,",
      "254:      CP2112_GPIO_GET_LENGTH, HID_FEATURE_REPORT,",
      "",
      "[Removed Lines]",
      "248:  unsigned long flags;",
      "251:  spin_lock_irqsave(&dev->lock, flags);",
      "",
      "[Added Lines]",
      "248:  mutex_lock(&dev->lock);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "262:  ret = buf[1];",
      "264: exit:",
      "267:  return ret;",
      "268: }",
      "",
      "[Removed Lines]",
      "265:  spin_unlock_irqrestore(&dev->lock, flags);",
      "",
      "[Added Lines]",
      "262:  mutex_unlock(&dev->lock);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "284:  struct cp2112_device *dev = gpiochip_get_data(chip);",
      "285:  struct hid_device *hdev = dev->hdev;",
      "286:  u8 *buf = dev->in_out_buffer;",
      "288:  int ret;",
      "292:  ret = hid_hw_raw_request(hdev, CP2112_GPIO_CONFIG, buf,",
      "293:      CP2112_GPIO_CONFIG_LENGTH, HID_FEATURE_REPORT,",
      "",
      "[Removed Lines]",
      "287:  unsigned long flags;",
      "290:  spin_lock_irqsave(&dev->lock, flags);",
      "",
      "[Added Lines]",
      "286:  mutex_lock(&dev->lock);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "308:   goto fail;",
      "309:  }",
      "",
      "[Removed Lines]",
      "311:  spin_unlock_irqrestore(&dev->lock, flags);",
      "",
      "[Added Lines]",
      "307:  mutex_unlock(&dev->lock);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "319:  return 0;",
      "321: fail:",
      "323:  return ret < 0 ? ret : -EIO;",
      "324: }",
      "",
      "[Removed Lines]",
      "322:  spin_unlock_irqrestore(&dev->lock, flags);",
      "",
      "[Added Lines]",
      "318:  mutex_unlock(&dev->lock);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1235:  if (!dev->in_out_buffer)",
      "1236:   return -ENOMEM;",
      "1240:  ret = hid_parse(hdev);",
      "1241:  if (ret) {",
      "",
      "[Removed Lines]",
      "1238:  spin_lock_init(&dev->lock);",
      "",
      "[Added Lines]",
      "1234:  mutex_init(&dev->lock);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1ffb3c40ffb5c51bc39736409b11816c4260218e",
      "candidate_info": {
        "commit_hash": "1ffb3c40ffb5c51bc39736409b11816c4260218e",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1ffb3c40ffb5c51bc39736409b11816c4260218e",
        "files": [
          "drivers/hid/hid-cp2112.c"
        ],
        "message": "HID: cp2112: make transfer buffers DMA capable\n\nKernel v4.9 strictly enforces DMA capable buffers, so we need to remove\nbuffers allocated on the stack.\n\nUse a spinlock to prevent concurrent accesses to the buffer.\n\nSigned-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>\nSigned-off-by: Jiri Kosina <jkosina@suse.cz>",
        "before_after_code_files": [
          "drivers/hid/hid-cp2112.c||drivers/hid/hid-cp2112.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/hid/hid-cp2112.c||drivers/hid/hid-cp2112.c"
          ],
          "candidate": [
            "drivers/hid/hid-cp2112.c||drivers/hid/hid-cp2112.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/hid/hid-cp2112.c||drivers/hid/hid-cp2112.c": [
          "File: drivers/hid/hid-cp2112.c -> drivers/hid/hid-cp2112.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include <linux/usb/ch9.h>",
          "33: #include \"hid-ids.h\"",
          "35: enum {",
          "36:  CP2112_GPIO_CONFIG  = 0x02,",
          "37:  CP2112_GPIO_GET   = 0x03,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #define CP2112_REPORT_MAX_LENGTH  64",
          "36: #define CP2112_GPIO_CONFIG_LENGTH  5",
          "37: #define CP2112_GPIO_GET_LENGTH   2",
          "38: #define CP2112_GPIO_SET_LENGTH   3",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:  atomic_t read_avail;",
          "162:  atomic_t xfer_avail;",
          "163:  struct gpio_chip gc;",
          "164: };",
          "166: static int gpio_push_pull = 0xFF;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:  u8 *in_out_buffer;",
          "170:  spinlock_t lock;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171: {",
          "172:  struct cp2112_device *dev = gpiochip_get_data(chip);",
          "173:  struct hid_device *hdev = dev->hdev;",
          "175:  int ret;",
          "177:  ret = hid_hw_raw_request(hdev, CP2112_GPIO_CONFIG, buf,",
          "181:   hid_err(hdev, \"error requesting GPIO config: %d\\n\", ret);",
          "183:  }",
          "185:  buf[1] &= ~(1 << offset);",
          "186:  buf[2] = gpio_push_pull;",
          "190:  if (ret < 0) {",
          "191:   hid_err(hdev, \"error setting GPIO config: %d\\n\", ret);",
          "193:  }",
          "196: }",
          "198: static void cp2112_gpio_set(struct gpio_chip *chip, unsigned offset, int value)",
          "199: {",
          "200:  struct cp2112_device *dev = gpiochip_get_data(chip);",
          "201:  struct hid_device *hdev = dev->hdev;",
          "203:  int ret;",
          "205:  buf[0] = CP2112_GPIO_SET;",
          "206:  buf[1] = value ? 0xff : 0;",
          "207:  buf[2] = 1 << offset;",
          "211:  if (ret < 0)",
          "212:   hid_err(hdev, \"error setting GPIO values: %d\\n\", ret);",
          "213: }",
          "215: static int cp2112_gpio_get(struct gpio_chip *chip, unsigned offset)",
          "216: {",
          "217:  struct cp2112_device *dev = gpiochip_get_data(chip);",
          "218:  struct hid_device *hdev = dev->hdev;",
          "220:  int ret;",
          "225:   hid_err(hdev, \"error requesting GPIO values: %d\\n\", ret);",
          "227:  }",
          "230: }",
          "232: static int cp2112_gpio_direction_output(struct gpio_chip *chip,",
          "",
          "[Removed Lines]",
          "174:  u8 buf[5];",
          "178:            sizeof(buf), HID_FEATURE_REPORT,",
          "179:            HID_REQ_GET_REPORT);",
          "180:  if (ret != sizeof(buf)) {",
          "182:   return ret;",
          "188:  ret = hid_hw_raw_request(hdev, CP2112_GPIO_CONFIG, buf, sizeof(buf),",
          "189:      HID_FEATURE_REPORT, HID_REQ_SET_REPORT);",
          "192:   return ret;",
          "195:  return 0;",
          "202:  u8 buf[3];",
          "209:  ret = hid_hw_raw_request(hdev, CP2112_GPIO_SET, buf, sizeof(buf),",
          "210:      HID_FEATURE_REPORT, HID_REQ_SET_REPORT);",
          "219:  u8 buf[2];",
          "222:  ret = hid_hw_raw_request(hdev, CP2112_GPIO_GET, buf, sizeof(buf),",
          "223:            HID_FEATURE_REPORT, HID_REQ_GET_REPORT);",
          "224:  if (ret != sizeof(buf)) {",
          "226:   return ret;",
          "229:  return (buf[1] >> offset) & 1;",
          "",
          "[Added Lines]",
          "181:  u8 *buf = dev->in_out_buffer;",
          "182:  unsigned long flags;",
          "185:  spin_lock_irqsave(&dev->lock, flags);",
          "188:      CP2112_GPIO_CONFIG_LENGTH, HID_FEATURE_REPORT,",
          "189:      HID_REQ_GET_REPORT);",
          "190:  if (ret != CP2112_GPIO_CONFIG_LENGTH) {",
          "192:   goto exit;",
          "198:  ret = hid_hw_raw_request(hdev, CP2112_GPIO_CONFIG, buf,",
          "199:      CP2112_GPIO_CONFIG_LENGTH, HID_FEATURE_REPORT,",
          "200:      HID_REQ_SET_REPORT);",
          "203:   goto exit;",
          "206:  ret = 0;",
          "208: exit:",
          "209:  spin_unlock_irqrestore(&dev->lock, flags);",
          "210:  return ret <= 0 ? ret : -EIO;",
          "217:  u8 *buf = dev->in_out_buffer;",
          "218:  unsigned long flags;",
          "221:  spin_lock_irqsave(&dev->lock, flags);",
          "227:  ret = hid_hw_raw_request(hdev, CP2112_GPIO_SET, buf,",
          "228:      CP2112_GPIO_SET_LENGTH, HID_FEATURE_REPORT,",
          "229:      HID_REQ_SET_REPORT);",
          "233:  spin_unlock_irqrestore(&dev->lock, flags);",
          "240:  u8 *buf = dev->in_out_buffer;",
          "241:  unsigned long flags;",
          "244:  spin_lock_irqsave(&dev->lock, flags);",
          "246:  ret = hid_hw_raw_request(hdev, CP2112_GPIO_GET, buf,",
          "247:      CP2112_GPIO_GET_LENGTH, HID_FEATURE_REPORT,",
          "248:      HID_REQ_GET_REPORT);",
          "249:  if (ret != CP2112_GPIO_GET_LENGTH) {",
          "251:   ret = ret < 0 ? ret : -EIO;",
          "252:   goto exit;",
          "255:  ret = (buf[1] >> offset) & 1;",
          "257: exit:",
          "258:  spin_unlock_irqrestore(&dev->lock, flags);",
          "260:  return ret;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "234: {",
          "235:  struct cp2112_device *dev = gpiochip_get_data(chip);",
          "236:  struct hid_device *hdev = dev->hdev;",
          "238:  int ret;",
          "240:  ret = hid_hw_raw_request(hdev, CP2112_GPIO_CONFIG, buf,",
          "244:   hid_err(hdev, \"error requesting GPIO config: %d\\n\", ret);",
          "246:  }",
          "248:  buf[1] |= 1 << offset;",
          "249:  buf[2] = gpio_push_pull;",
          "253:  if (ret < 0) {",
          "254:   hid_err(hdev, \"error setting GPIO config: %d\\n\", ret);",
          "256:  }",
          "",
          "[Removed Lines]",
          "237:  u8 buf[5];",
          "241:            sizeof(buf), HID_FEATURE_REPORT,",
          "242:            HID_REQ_GET_REPORT);",
          "243:  if (ret != sizeof(buf)) {",
          "245:   return ret;",
          "251:  ret = hid_hw_raw_request(hdev, CP2112_GPIO_CONFIG, buf, sizeof(buf),",
          "252:      HID_FEATURE_REPORT, HID_REQ_SET_REPORT);",
          "255:   return ret;",
          "",
          "[Added Lines]",
          "268:  u8 *buf = dev->in_out_buffer;",
          "269:  unsigned long flags;",
          "272:  spin_lock_irqsave(&dev->lock, flags);",
          "275:      CP2112_GPIO_CONFIG_LENGTH, HID_FEATURE_REPORT,",
          "276:      HID_REQ_GET_REPORT);",
          "277:  if (ret != CP2112_GPIO_CONFIG_LENGTH) {",
          "279:   goto fail;",
          "285:  ret = hid_hw_raw_request(hdev, CP2112_GPIO_CONFIG, buf,",
          "286:      CP2112_GPIO_CONFIG_LENGTH, HID_FEATURE_REPORT,",
          "287:      HID_REQ_SET_REPORT);",
          "290:   goto fail;",
          "293:  spin_unlock_irqrestore(&dev->lock, flags);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "262:  cp2112_gpio_set(chip, offset, value);",
          "264:  return 0;",
          "265: }",
          "267: static int cp2112_hid_get(struct hid_device *hdev, unsigned char report_number,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303: fail:",
          "304:  spin_unlock_irqrestore(&dev->lock, flags);",
          "305:  return ret < 0 ? ret : -EIO;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1007:  struct cp2112_smbus_config_report config;",
          "1008:  int ret;",
          "1010:  ret = hid_parse(hdev);",
          "1011:  if (ret) {",
          "1012:   hid_err(hdev, \"parse failed\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1051:  dev = devm_kzalloc(&hdev->dev, sizeof(*dev), GFP_KERNEL);",
          "1052:  if (!dev)",
          "1053:   return -ENOMEM;",
          "1055:  dev->in_out_buffer = devm_kzalloc(&hdev->dev, CP2112_REPORT_MAX_LENGTH,",
          "1056:        GFP_KERNEL);",
          "1057:  if (!dev->in_out_buffer)",
          "1058:   return -ENOMEM;",
          "1060:  spin_lock_init(&dev->lock);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1063:   goto err_power_normal;",
          "1064:  }",
          "1072:  hid_set_drvdata(hdev, (void *)dev);",
          "1073:  dev->hdev  = hdev;",
          "1074:  dev->adap.owner  = THIS_MODULE;",
          "",
          "[Removed Lines]",
          "1066:  dev = kzalloc(sizeof(*dev), GFP_KERNEL);",
          "1067:  if (!dev) {",
          "1068:   ret = -ENOMEM;",
          "1069:   goto err_power_normal;",
          "1070:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1088:  if (ret) {",
          "1089:   hid_err(hdev, \"error registering i2c adapter\\n\");",
          "1091:  }",
          "1093:  hid_dbg(hdev, \"adapter registered\\n\");",
          "",
          "[Removed Lines]",
          "1090:   goto err_free_dev;",
          "",
          "[Added Lines]",
          "1136:   goto err_power_normal;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1123:  gpiochip_remove(&dev->gc);",
          "1124: err_free_i2c:",
          "1125:  i2c_del_adapter(&dev->adap);",
          "1128: err_power_normal:",
          "1129:  hid_hw_power(hdev, PM_HINT_NORMAL);",
          "1130: err_hid_close:",
          "",
          "[Removed Lines]",
          "1126: err_free_dev:",
          "1127:  kfree(dev);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1150:  hid_hw_close(hdev);",
          "1151:  hid_hw_stop(hdev);",
          "1153: }",
          "1155: static int cp2112_raw_event(struct hid_device *hdev, struct hid_report *report,",
          "",
          "[Removed Lines]",
          "1152:  kfree(dev);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}