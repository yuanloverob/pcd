{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4e2d3d40dcc32a70d3a481bae9a5707fc93237fc",
      "candidate_info": {
        "commit_hash": "4e2d3d40dcc32a70d3a481bae9a5707fc93237fc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4e2d3d40dcc32a70d3a481bae9a5707fc93237fc",
        "files": [
          "Makefile.msc",
          "ext/session/changesetfuzz.c",
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "tool/dbtotxt.c"
        ],
        "message": "Fix harmless compiler warnings seen with MSVC.\n\nFossilOrigin-Name: 6cf8b18ec20f11c25ff7396f29c742404d3a88d5e97a5fd53ccfaff51dec3f33",
        "before_after_code_files": [
          "Makefile.msc||Makefile.msc",
          "ext/session/changesetfuzz.c||ext/session/changesetfuzz.c",
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "tool/dbtotxt.c||tool/dbtotxt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2560:  del /Q .target_source 2>NUL",
          "2561:  del /Q tclsqlite3.exe $(SQLITETCLH) $(SQLITETCLDECLSH) 2>NUL",
          "2562:  del /Q lsm.dll lsmtest.exe 2>NUL",
          "2563:  del /Q testloadext.dll 2>NUL",
          "2564:  del /Q testfixture.exe test.db 2>NUL",
          "2565:  del /Q LogEst.exe fts3view.exe rollback-test.exe showdb.exe dbdump.exe 2>NUL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2563:  del /Q atrc.exe changesetfuzz.exe dbtotxt.exe index_usage.exe 2>NUL",
          "",
          "---------------"
        ],
        "ext/session/changesetfuzz.c||ext/session/changesetfuzz.c": [
          "File: ext/session/changesetfuzz.c -> ext/session/changesetfuzz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:   pBuf = sqlite3_malloc64( sz ? sz : 1 );",
          "155:   if( pBuf==0 ){",
          "156:     fprintf(stderr, \"cannot allocate %d to hold content of \\\"%s\\\"\\n\",",
          "158:     exit(1);",
          "159:   }",
          "160:   if( sz>0 ){",
          "163:       exit(1);",
          "164:     }",
          "165:     fclose(f);",
          "166:   }",
          "169: }",
          "",
          "[Removed Lines]",
          "157:             sz, zFilename);",
          "161:     if( fread(pBuf, sz, 1, f)!=1 ){",
          "162:       fprintf(stderr, \"cannot read all %d bytes of \\\"%s\\\"\\n\", sz, zFilename);",
          "",
          "[Added Lines]",
          "157:             (int)sz, zFilename);",
          "161:     if( fread(pBuf, (size_t)sz, 1, f)!=1 ){",
          "162:       fprintf(stderr, \"cannot read all %d bytes of \\\"%s\\\"\\n\",",
          "163:               (int)sz, zFilename);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "343: static void *fuzzMalloc(sqlite3_int64 nByte){",
          "344:   void *pRet = sqlite3_malloc64(nByte);",
          "345:   if( pRet ){",
          "347:   }",
          "348:   return pRet;",
          "349: }",
          "",
          "[Removed Lines]",
          "346:     memset(pRet, 0, nByte);",
          "",
          "[Added Lines]",
          "347:     memset(pRet, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384: static int fuzzPutVarint(u8 *p, int nVal){",
          "385:   assert( nVal>0 && nVal<2097152 );",
          "386:   if( nVal<128 ){",
          "388:     return 1;",
          "389:   }",
          "390:   if( nVal<16384 ){",
          "",
          "[Removed Lines]",
          "387:     p[0] = nVal;",
          "",
          "[Added Lines]",
          "388:     p[0] = (u8)nVal;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "459:       pGrp->aPK = p;",
          "460:       p += pGrp->nCol;",
          "461:       pGrp->zTab = (const char*)p;",
          "464:       if( p>=pEnd ){",
          "465:         rc = fuzzCorrupt();",
          "",
          "[Removed Lines]",
          "462:       p = &p[strlen(p)+1];",
          "",
          "[Added Lines]",
          "463:       p = &p[strlen((const char*)p)+1];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "697:           int nTxt;",
          "700:           p += fuzzGetVarint(p, &nTxt);",
          "701:           printf(\"%s%s\", zPre, eType==0x03 ? \"'\" : \"X'\");",
          "702:           for(i=0; i<nTxt; i++){",
          "",
          "[Removed Lines]",
          "698:           int sz;",
          "699:           int i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "861:           int nByte = fuzzRandomInt(48);",
          "863:           fuzzRandomBlob(nByte, &pChange->aSub[2]);",
          "864:           if( pChange->aSub[0]==0x03 ){",
          "865:             int i;",
          "",
          "[Removed Lines]",
          "862:           pChange->aSub[1] = nByte;",
          "",
          "[Added Lines]",
          "861:           pChange->aSub[1] = (u8)nByte;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1004:       }else if( p==pFuzz->pSub2 ){",
          "1005:         pCopy = pFuzz->pSub1;",
          "1006:       }else if( i==iUndef ){",
          "1008:       }",
          "1010:       if( pCopy[0]==0x00 && eNew!=eType && eType==SQLITE_UPDATE && iRec==0 ){",
          "",
          "[Removed Lines]",
          "1007:         pCopy = \"\\0\";",
          "",
          "[Added Lines]",
          "1006:         pCopy = (u8*)\"\\0\";",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1067:       for(i=0; i<pGrp->nCol; i++){",
          "1068:         int sz;",
          "1069:         u8 *pCopy = pCsr;",
          "1071:         fuzzChangeSize(pCopy, &sz);",
          "1072:         memcpy(pOut, pCopy, sz);",
          "1073:         pOut += sz;",
          "",
          "[Removed Lines]",
          "1070:         if( pGrp->aPK[i] ) pCopy = \"\\0\";",
          "",
          "[Added Lines]",
          "1069:         if( pGrp->aPK[i] ) pCopy = (u8*)\"\\0\";",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8af0caeb6d1e55f66ad2f12af94845dccfe1d0420faf326f5917fc07f8aa6050",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "834: static int btreeRestoreCursorPosition(BtCursor *pCur){",
          "835:   int rc;",
          "837:   assert( cursorOwnsBtShared(pCur) );",
          "838:   assert( pCur->eState>=CURSOR_REQUIRESEEK );",
          "839:   if( pCur->eState==CURSOR_FAULT ){",
          "",
          "[Removed Lines]",
          "836:   int skipNext;",
          "",
          "[Added Lines]",
          "836:   int skipNext = 0;",
          "",
          "---------------"
        ],
        "tool/dbtotxt.c||tool/dbtotxt.c": [
          "File: tool/dbtotxt.c -> tool/dbtotxt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   memset(bShow, '.', sizeof(bShow));",
          "53:   for(i=' '; i<='~'; i++){",
          "55:   }",
          "56:   for(i=1; i<argc; i++){",
          "57:     if( argv[i][0]=='-' ){",
          "",
          "[Removed Lines]",
          "54:     if( i!='{' && i!='}' && i!='\"' && i!='\\\\' ) bShow[i] = i;",
          "",
          "[Added Lines]",
          "54:     if( i!='{' && i!='}' && i!='\"' && i!='\\\\' ) bShow[i] = (unsigned char)i;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e0155b7af92be5eacd49d1ab94b3d8c20a3d6450",
      "candidate_info": {
        "commit_hash": "e0155b7af92be5eacd49d1ab94b3d8c20a3d6450",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e0155b7af92be5eacd49d1ab94b3d8c20a3d6450",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/windowfault.test"
        ],
        "message": "Fix a test script problem in windowfault.test.\n\nFossilOrigin-Name: 47010bf17cb080cc1c693c84d16b986ea4addf9c54bd7e22de1e0f6b555ea9d1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/windowfault.test||test/windowfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 36295dcebcb5487f2a462eabb41900ac28b8e839898ef0fae0aa4730bf9b0671",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/windowfault.test||test/windowfault.test": [
          "File: test/windowfault.test -> test/windowfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:   return $ret",
          "210: }",
          "212: do_faultsim_test 9 -end 25 -faults tmpread -body {",
          "213:   execsql {",
          "214:     SELECT sum(y) OVER win FROM t",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212: set L [db eval {SELECT 0.0 FROM t}]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:     )",
          "218:   }",
          "219: } -test {",
          "221: }",
          "223: catch {db close}",
          "",
          "[Removed Lines]",
          "220:   faultsim_test_result {0 {}}",
          "",
          "[Added Lines]",
          "221:   faultsim_test_result [list 0 $::L]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31f69626df74d7f5d011cee54da6a05acd32970c",
      "candidate_info": {
        "commit_hash": "31f69626df74d7f5d011cee54da6a05acd32970c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/31f69626df74d7f5d011cee54da6a05acd32970c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c",
          "src/build.c",
          "src/fkey.c",
          "src/main.c",
          "src/malloc.c",
          "src/parse.y",
          "src/prepare.c",
          "src/sqliteInt.h"
        ],
        "message": "Performance optimization to the lookaside-memory disabling mechanism.\n\nFossilOrigin-Name: 17ce1c49cb0ed6fdd8c7c33431bc2afa217f1092c99b8dd608890a8e7aec7fb1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c",
          "src/build.c||src/build.c",
          "src/fkey.c||src/fkey.c",
          "src/main.c||src/main.c",
          "src/malloc.c||src/malloc.c",
          "src/parse.y||src/parse.y",
          "src/prepare.c||src/prepare.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c20a35336432025445f9f7e289d0cc3e4003fb17f45a4ce74c6269c407c6e09f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1855: #ifdef SQLITE_ENABLE_STAT4",
          "1856:   if( rc==SQLITE_OK ){",
          "1858:     rc = loadStat4(db, sInfo.zDatabase);",
          "1860:   }",
          "1861:   for(i=sqliteHashFirst(&pSchema->idxHash); i; i=sqliteHashNext(i)){",
          "1862:     Index *pIdx = sqliteHashData(i);",
          "",
          "[Removed Lines]",
          "1857:     db->lookaside.bDisable++;",
          "1859:     db->lookaside.bDisable--;",
          "",
          "[Added Lines]",
          "1857:     DisableLookaside;",
          "1859:     EnableLookaside;",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2447:     n = pParse->nTab;",
          "2448:     sqlite3SrcListAssignCursors(pParse, pSel->pSrc);",
          "2449:     pTable->nCol = -1;",
          "2451: #ifndef SQLITE_OMIT_AUTHORIZATION",
          "2452:     xAuth = db->xAuth;",
          "2453:     db->xAuth = 0;",
          "",
          "[Removed Lines]",
          "2450:     db->lookaside.bDisable++;",
          "",
          "[Added Lines]",
          "2450:     DisableLookaside;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2489:     }",
          "2490:     sqlite3DeleteTable(db, pSelTab);",
          "2491:     sqlite3SelectDelete(db, pSel);",
          "2493: #ifndef SQLITE_OMIT_ALTERTABLE",
          "2494:     pParse->eParseMode = eParseMode;",
          "2495: #endif",
          "",
          "[Removed Lines]",
          "2492:     db->lookaside.bDisable--;",
          "",
          "[Added Lines]",
          "2492:     EnableLookaside;",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1299:     }",
          "1304:     pTrigger = (Trigger *)sqlite3DbMallocZero(db,",
          "",
          "[Removed Lines]",
          "1302:     db->lookaside.bDisable++;",
          "",
          "[Added Lines]",
          "1302:     DisableLookaside;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1321:     }",
          "1326:     sqlite3ExprDelete(db, pWhere);",
          "1327:     sqlite3ExprDelete(db, pWhen);",
          "",
          "[Removed Lines]",
          "1324:     db->lookaside.bDisable--;",
          "",
          "[Added Lines]",
          "1324:     EnableLookaside;",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "715:   db->lookaside.pInit = 0;",
          "716:   db->lookaside.pFree = 0;",
          "717:   db->lookaside.sz = (u16)sz;",
          "718:   if( pStart ){",
          "719:     int i;",
          "720:     LookasideSlot *p;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "718:   db->lookaside.szTrue = (u16)sz;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "733:     db->lookaside.pStart = db;",
          "734:     db->lookaside.pEnd = db;",
          "735:     db->lookaside.bDisable = 1;",
          "736:     db->lookaside.bMalloced = 0;",
          "737:     db->lookaside.nSlot = 0;",
          "738:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "737:     db->lookaside.sz = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3064:   db->magic = SQLITE_MAGIC_BUSY;",
          "3065:   db->aDb = db->aDbStatic;",
          "3066:   db->lookaside.bDisable = 1;",
          "3068:   assert( sizeof(db->aLimit)==sizeof(aHardLimit) );",
          "3069:   memcpy(db->aLimit, aHardLimit, sizeof(db->aLimit));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3069:   db->lookaside.sz = 0;",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:     return sqlite3GlobalConfig.m.xSize(p);",
          "299:   }else{",
          "300:     assert( sqlite3_mutex_held(db->mutex) );",
          "302:   }",
          "303: }",
          "304: sqlite3_uint64 sqlite3_msize(void *p){",
          "",
          "[Removed Lines]",
          "301:     return db->lookaside.sz;",
          "",
          "[Added Lines]",
          "301:     return db->lookaside.szTrue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "350:       LookasideSlot *pBuf = (LookasideSlot*)p;",
          "351: #ifdef SQLITE_DEBUG",
          "354: #endif",
          "355:       pBuf->pNext = db->lookaside.pFree;",
          "356:       db->lookaside.pFree = pBuf;",
          "",
          "[Removed Lines]",
          "353:       memset(p, 0xaa, db->lookaside.sz);",
          "",
          "[Added Lines]",
          "353:       memset(p, 0xaa, db->lookaside.szTrue);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "510:   assert( db!=0 );",
          "511:   assert( sqlite3_mutex_held(db->mutex) );",
          "512:   assert( db->pnBytesFreed==0 );",
          "527:     }",
          "530:   }",
          "531: #else",
          "532:   assert( db!=0 );",
          "",
          "[Removed Lines]",
          "513:   if( db->lookaside.bDisable==0 ){",
          "514:     assert( db->mallocFailed==0 );",
          "515:     if( n>db->lookaside.sz ){",
          "516:       db->lookaside.anStat[1]++;",
          "517:     }else if( (pBuf = db->lookaside.pFree)!=0 ){",
          "518:       db->lookaside.pFree = pBuf->pNext;",
          "519:       db->lookaside.anStat[0]++;",
          "520:       return (void*)pBuf;",
          "521:     }else if( (pBuf = db->lookaside.pInit)!=0 ){",
          "522:       db->lookaside.pInit = pBuf->pNext;",
          "523:       db->lookaside.anStat[0]++;",
          "524:       return (void*)pBuf;",
          "525:     }else{",
          "526:       db->lookaside.anStat[2]++;",
          "528:   }else if( db->mallocFailed ){",
          "529:     return 0;",
          "",
          "[Added Lines]",
          "513:   if( n>db->lookaside.sz ){",
          "514:     if( db->lookaside.bDisable ){",
          "515:       return db->mallocFailed ? 0 : dbMallocRawFinish(db, n);",
          "517:     db->lookaside.anStat[1]++;",
          "518:   }else if( (pBuf = db->lookaside.pFree)!=0 ){",
          "519:     db->lookaside.pFree = pBuf->pNext;",
          "520:     db->lookaside.anStat[0]++;",
          "521:     return (void*)pBuf;",
          "522:   }else if( (pBuf = db->lookaside.pInit)!=0 ){",
          "523:     db->lookaside.pInit = pBuf->pNext;",
          "524:     db->lookaside.anStat[0]++;",
          "525:     return (void*)pBuf;",
          "526:   }else{",
          "527:     db->lookaside.anStat[2]++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "550:   assert( db!=0 );",
          "551:   if( p==0 ) return sqlite3DbMallocRawNN(db, n);",
          "552:   assert( sqlite3_mutex_held(db->mutex) );",
          "554:   return dbReallocFinish(db, p, n);",
          "555: }",
          "556: static SQLITE_NOINLINE void *dbReallocFinish(sqlite3 *db, void *p, u64 n){",
          "",
          "[Removed Lines]",
          "553:   if( isLookaside(db,p) && n<=db->lookaside.sz ) return p;",
          "",
          "[Added Lines]",
          "551:   if( isLookaside(db,p) && n<=db->lookaside.szTrue ) return p;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "561:     if( isLookaside(db, p) ){",
          "562:       pNew = sqlite3DbMallocRawNN(db, n);",
          "563:       if( pNew ){",
          "565:         sqlite3DbFree(db, p);",
          "566:       }",
          "567:     }else{",
          "",
          "[Removed Lines]",
          "564:         memcpy(pNew, p, db->lookaside.sz);",
          "",
          "[Added Lines]",
          "562:         memcpy(pNew, p, db->lookaside.szTrue);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "660:     if( db->nVdbeExec>0 ){",
          "661:       db->u1.isInterrupted = 1;",
          "662:     }",
          "664:     if( db->pParse ){",
          "665:       db->pParse->rc = SQLITE_NOMEM_BKPT;",
          "666:     }",
          "",
          "[Removed Lines]",
          "663:     db->lookaside.bDisable++;",
          "",
          "[Added Lines]",
          "661:     DisableLookaside;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "679:     db->mallocFailed = 0;",
          "680:     db->u1.isInterrupted = 0;",
          "681:     assert( db->lookaside.bDisable>0 );",
          "683:   }",
          "684: }",
          "",
          "[Removed Lines]",
          "682:     db->lookaside.bDisable--;",
          "",
          "[Added Lines]",
          "680:     EnableLookaside;",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "108: static void disableLookaside(Parse *pParse){",
          "109:   pParse->disableLookaside++;",
          "111: }",
          "113: } // end %include",
          "",
          "[Removed Lines]",
          "110:   pParse->db->lookaside.bDisable++;",
          "",
          "[Added Lines]",
          "109:   sqlite3 *db = pParse->db;",
          "111:   DisableLookaside;",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "527:   if( db ){",
          "528:     assert( db->lookaside.bDisable >= pParse->disableLookaside );",
          "529:     db->lookaside.bDisable -= pParse->disableLookaside;",
          "530:   }",
          "531:   pParse->disableLookaside = 0;",
          "532: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "530:     db->lookaside.sz = db->lookaside.bDisable ? 0 : db->lookaside.szTrue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "561:   if( prepFlags & SQLITE_PREPARE_PERSISTENT ){",
          "562:     sParse.disableLookaside++;",
          "564:   }",
          "565:   sParse.disableVtab = (prepFlags & SQLITE_PREPARE_NO_VTAB)!=0;",
          "",
          "[Removed Lines]",
          "563:     db->lookaside.bDisable++;",
          "",
          "[Added Lines]",
          "564:     DisableLookaside;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1288: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1297: #define DisableLookaside  db->lookaside.bDisable++;db->lookaside.sz=0",
          "1298: #define EnableLookaside   db->lookaside.bDisable--;\\",
          "1299:    db->lookaside.sz=db->lookaside.bDisable?0:db->lookaside.szTrue",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2829df082cdf5feea6cc0be95bf517dd49d33319",
      "candidate_info": {
        "commit_hash": "2829df082cdf5feea6cc0be95bf517dd49d33319",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2829df082cdf5feea6cc0be95bf517dd49d33319",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Remove an unused variable.\n\nFossilOrigin-Name: a19884455b9bafcdc769362d61cfd02df1b5643263e004cb533698bbcfca752b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5fe15c1d8383989257e11d1806e6b035acacd1b504ae385ba58d20db10f26eee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1586:       sqlite3VdbeAddOp2(v, OP_AddImm, pWin->regApp+1-bInverse, 1);",
          "1587:     }else if( pFunc->xSFunc!=noopStepFunc ){",
          "1588:       int addrIf = 0;",
          "1590:       if( pWin->pFilter ){",
          "1591:         int regTmp;",
          "1592:         assert( pWin->bExprArgs || !nArg ||nArg==pWin->pOwner->x.pList->nExpr );",
          "",
          "[Removed Lines]",
          "1589:       int addrIf2 = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1627:         sqlite3ReleaseTempRange(pParse, regArg, nArg);",
          "1628:       }",
          "1629:       if( addrIf ) sqlite3VdbeJumpHere(v, addrIf);",
          "1631:     }",
          "1632:   }",
          "1633: }",
          "",
          "[Removed Lines]",
          "1630:       if( addrIf2 ) sqlite3VdbeJumpHere(v, addrIf2);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db3a32ed1cfb3b90cc5baa9df54e48afa9b18ee6",
      "candidate_info": {
        "commit_hash": "db3a32ed1cfb3b90cc5baa9df54e48afa9b18ee6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/db3a32ed1cfb3b90cc5baa9df54e48afa9b18ee6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/windowA.test"
        ],
        "message": "Back out the change at [47cd634c98b502d4] which was incorrect.  Add a test case so that we don't accidently back out that change again.\n\nFossilOrigin-Name: 596ac2a4eab28b74f4050fb4eb71883f2a1421fdbccf302413e4653391bb52c9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/windowA.test||test/windowA.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 900464567b2a5ce0c278a3297e4be1968f609258608aa0fbe2fc67709aa22a4b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2016:         sqlite3VdbeAddOp2(v, OP_Goto, 0, lbl);",
          "2017:         break;",
          "2018:       case OP_Gt:",
          "2020:         break;",
          "2023:         break;",
          "2024:     }",
          "2025:     sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+3);",
          "",
          "[Removed Lines]",
          "2019:         sqlite3VdbeAddOp2(v, OP_NotNull, reg2, lbl); VdbeCoverage(v);",
          "2021:       default: assert( op==OP_Le );",
          "2022:         sqlite3VdbeAddOp2(v, OP_IsNull, reg2, lbl); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2019:         sqlite3VdbeAddOp2(v, OP_NotNull, reg2, lbl);",
          "2020:         VdbeCoverage(v);",
          "2022:       case OP_Le:",
          "2023:         sqlite3VdbeAddOp2(v, OP_IsNull, reg2, lbl);",
          "2024:         VdbeCoverage(v);",
          "2026:       default: assert( op==OP_Lt ); /* no-op */ break;",
          "",
          "---------------"
        ],
        "test/windowA.test||test/windowA.test": [
          "File: test/windowA.test -> test/windowA.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:   1 A   5.4 A        \\",
          "290: ]",
          "292: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "292: do_execsql_test 4.0 {",
          "293:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "294:   WINDOW w1 AS",
          "295:      (ORDER BY d DESC NULLS FIRST",
          "296:       RANGE BETWEEN 2.50 PRECEDING AND 0.5 PRECEDING)",
          "297:   ORDER BY +d DESC NULLS FIRST, +a;",
          "298: } [list \\",
          "299:   6 N  NULL NN  \\",
          "300:   7 N  NULL NN  \\",
          "301:   5 E 10.26 {}  \\",
          "302:   4 D 10.25 {}  \\",
          "303:   3 C   8.0 ED  \\",
          "304:   2 B  5.55 C   \\",
          "305:   1 A   5.4 {}  \\",
          "306: ]",
          "",
          "---------------"
        ]
      }
    }
  ]
}