{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "14b7c4327f4547bed14bf2059321375b75d9c45e",
      "candidate_info": {
        "commit_hash": "14b7c4327f4547bed14bf2059321375b75d9c45e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/14b7c4327f4547bed14bf2059321375b75d9c45e",
        "files": [
          "deps/uv/config-unix.mk",
          "deps/uv/include/uv.h",
          "deps/uv/src/unix/error.c",
          "deps/uv/src/unix/freebsd.c",
          "deps/uv/src/unix/kqueue.c",
          "deps/uv/src/unix/tcp.c",
          "deps/uv/src/unix/udp.c",
          "deps/uv/src/win/error.c",
          "deps/uv/src/win/fs.c",
          "deps/uv/src/win/tty.c",
          "deps/uv/src/win/udp.c",
          "deps/uv/test/test-fs.c",
          "deps/uv/test/test-list.h",
          "deps/uv/uv.gyp"
        ],
        "message": "uv: upgrade to 3de0411",
        "before_after_code_files": [
          "deps/uv/config-unix.mk||deps/uv/config-unix.mk",
          "deps/uv/include/uv.h||deps/uv/include/uv.h",
          "deps/uv/src/unix/error.c||deps/uv/src/unix/error.c",
          "deps/uv/src/unix/freebsd.c||deps/uv/src/unix/freebsd.c",
          "deps/uv/src/unix/kqueue.c||deps/uv/src/unix/kqueue.c",
          "deps/uv/src/unix/tcp.c||deps/uv/src/unix/tcp.c",
          "deps/uv/src/unix/udp.c||deps/uv/src/unix/udp.c",
          "deps/uv/src/win/error.c||deps/uv/src/win/error.c",
          "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c",
          "deps/uv/src/win/tty.c||deps/uv/src/win/tty.c",
          "deps/uv/src/win/udp.c||deps/uv/src/win/udp.c",
          "deps/uv/test/test-fs.c||deps/uv/test/test-fs.c",
          "deps/uv/test/test-list.h||deps/uv/test/test-list.h",
          "deps/uv/uv.gyp||deps/uv/uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/config-unix.mk||deps/uv/config-unix.mk": [
          "File: deps/uv/config-unix.mk -> deps/uv/config-unix.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: EV_CONFIG=config_freebsd.h",
          "71: EIO_CONFIG=config_freebsd.h",
          "72: CPPFLAGS += -Isrc/ares/config_freebsd",
          "74: OBJS += src/unix/freebsd.o",
          "75: OBJS += src/unix/kqueue.o",
          "76: endif",
          "",
          "[Removed Lines]",
          "73: LINKFLAGS+=",
          "",
          "[Added Lines]",
          "73: LINKFLAGS+=-lkvm",
          "",
          "---------------"
        ],
        "deps/uv/include/uv.h||deps/uv/include/uv.h": [
          "File: deps/uv/include/uv.h -> deps/uv/include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:   XX( 45, EAISOCKTYPE, \"\") \\",
          "116:   XX( 46, ESHUTDOWN, \"\") \\",
          "117:   XX( 47, EEXIST, \"file already exists\") \\",
          "121: #define UV_ERRNO_GEN(val, name, s) UV_##name = val,",
          "",
          "[Removed Lines]",
          "118:   XX( 48, ESRCH, \"no such process\")",
          "",
          "[Added Lines]",
          "118:   XX( 48, ESRCH, \"no such process\") \\",
          "119:   XX( 49, ENAMETOOLONG, \"name too long\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "653:     const char* multicast_addr, const char* interface_addr,",
          "654:     uv_membership membership);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "669: UV_EXTERN int uv_udp_set_multicast_loop(uv_udp_t* handle, int on);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "667: int uv_udp_set_multicast_ttl(uv_udp_t* handle, int ttl);",
          "",
          "[Added Lines]",
          "682: UV_EXTERN int uv_udp_set_multicast_ttl(uv_udp_t* handle, int ttl);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "680: int uv_udp_set_broadcast(uv_udp_t* handle, int on);",
          "",
          "[Added Lines]",
          "695: UV_EXTERN int uv_udp_set_broadcast(uv_udp_t* handle, int on);",
          "708: UV_EXTERN int uv_udp_set_ttl(uv_udp_t* handle, int ttl);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/error.c||deps/uv/src/unix/error.c": [
          "File: deps/uv/src/unix/error.c -> deps/uv/src/unix/error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:     case EFAULT: return UV_EFAULT;",
          "72:     case EMFILE: return UV_EMFILE;",
          "73:     case EMSGSIZE: return UV_EMSGSIZE;",
          "74:     case EINVAL: return UV_EINVAL;",
          "75:     case ECONNREFUSED: return UV_ECONNREFUSED;",
          "76:     case EADDRINUSE: return UV_EADDRINUSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:     case ENAMETOOLONG: return UV_ENAMETOOLONG;",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/freebsd.c||deps/uv/src/unix/freebsd.c": [
          "File: deps/uv/src/unix/freebsd.c -> deps/uv/src/unix/freebsd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:   unsigned int ticks = (unsigned int)sysconf(_SC_CLK_TCK),",
          "198:                multiplier = ((uint64_t)1000L / ticks), cpuspeed, maxcpus,",
          "199:                cur = 0;",
          "200:   char model[512];",
          "201:   int numcpus;",
          "202:   size_t size;",
          "205:   size = sizeof(model);",
          "206:   if (sysctlbyname(\"hw.model\", &model, &size, NULL, 0) < 0) {",
          "",
          "[Removed Lines]",
          "203:   uv_cpu_info_t* cpu_info;",
          "",
          "[Added Lines]",
          "200:   uv_cpu_info_t* cpu_info;",
          "202:   long* cp_times;",
          "205:   int i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "223:     free(*cpu_infos);",
          "224:     return uv__new_sys_error(errno);",
          "225:   }",
          "227:   size = sizeof(maxcpus);",
          "228:   if (sysctlbyname(\"kern.smp.maxcpus\", &maxcpus, &size, NULL, 0) < 0) {",
          "229:     free(*cpu_infos);",
          "230:     return uv__new_sys_error(errno);",
          "231:   }",
          "232:   size = maxcpus * CPUSTATES * sizeof(long);",
          "234:   if (sysctlbyname(\"kern.cp_times\", &cp_times, &size, NULL, 0) < 0) {",
          "235:     free(*cpu_infos);",
          "236:     return uv__new_sys_error(errno);",
          "237:   }",
          "240:     cpu_info = &(*cpu_infos)[i];",
          "242:     cpu_info->cpu_times.user = (uint64_t)(cp_times[CP_USER+cur]) * multiplier;",
          "",
          "[Removed Lines]",
          "233:   long cp_times[size];",
          "239:   for (int i = 0; i < numcpus; i++) {",
          "",
          "[Added Lines]",
          "237:   cp_times = malloc(size);",
          "238:   if (cp_times == NULL) {",
          "239:     free(*cpu_infos);",
          "240:     return uv__new_sys_error(ENOMEM);",
          "241:   }",
          "244:     free(cp_times);",
          "249:   for (i = 0; i < numcpus; i++) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "251:     cur+=CPUSTATES;",
          "252:   }",
          "254:   return uv_ok_;",
          "255: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "264:   free(cp_times);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/kqueue.c||deps/uv/src/unix/kqueue.c": [
          "File: deps/uv/src/unix/kqueue.c -> deps/uv/src/unix/kqueue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <sys/sysctl.h>",
          "32: #include <sys/types.h>",
          "33: #include <sys/event.h>",
          "34: #include <fcntl.h>",
          "35: #include <time.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include <unistd.h>",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/tcp.c||deps/uv/src/unix/tcp.c": [
          "File: deps/uv/src/unix/tcp.c -> deps/uv/src/unix/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"uv.h\"",
          "23: #include \"internal.h\"",
          "25: #include <assert.h>",
          "26: #include <errno.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include <unistd.h>",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/udp.c||deps/uv/src/unix/udp.c": [
          "File: deps/uv/src/unix/udp.c -> deps/uv/src/unix/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <string.h>",
          "27: #include <errno.h>",
          "28: #include <stdlib.h>",
          "31: static void uv__udp_run_completed(uv_udp_t* handle);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include <unistd.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "343:     goto out;",
          "344:   }",
          "346:   if (flags & UV_UDP_IPV6ONLY) {",
          "347: #ifdef IPV6_V6ONLY",
          "348:     yes = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:   yes = 1;",
          "349:   if (setsockopt(fd, SOL_SOCKET, SO_REUSEPORT, &yes, sizeof yes) == -1) {",
          "350:     uv__set_sys_error(handle->loop, errno);",
          "351:     goto out;",
          "352:   }",
          "353: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "512:   return 0;",
          "513: }",
          "528:   }",
          "536:   socklen_t socklen;",
          "537:   int saved_errno;",
          "538:   int rv = 0;",
          "",
          "[Removed Lines]",
          "515: int uv_udp_set_multicast_ttl(uv_udp_t* handle, int ttl) {",
          "516:   if (setsockopt(handle->fd, IPPROTO_IP, IP_MULTICAST_TTL, &ttl, sizeof ttl) == -1) {",
          "517:     uv__set_sys_error(handle->loop, errno);",
          "518:     return -1;",
          "519:   }",
          "521:   return 0;",
          "522: }",
          "524: int uv_udp_set_broadcast(uv_udp_t* handle, int on) {",
          "525:   if (setsockopt(handle->fd, SOL_SOCKET, SO_BROADCAST, &on, sizeof on) == -1) {",
          "526:     uv__set_sys_error(handle->loop, errno);",
          "527:     return -1;",
          "530:   return 0;",
          "531: }",
          "534: int uv_udp_getsockname(uv_udp_t* handle, struct sockaddr* name,",
          "535:     int* namelen) {",
          "",
          "[Added Lines]",
          "525: #define X(name, level, option)                                                \\",
          "526:   int uv_udp_set_##name(uv_udp_t* handle, int flag) {                         \\",
          "527:     if (setsockopt(handle->fd, level, option, &flag, sizeof(flag))) {         \\",
          "528:       uv__set_sys_error(handle->loop, errno);                                 \\",
          "529:       return -1;                                                              \\",
          "530:     }                                                                         \\",
          "531:     return 0;                                                                 \\",
          "534: X(multicast_loop, IPPROTO_IP, IP_MULTICAST_LOOP)",
          "535: X(multicast_ttl, IPPROTO_IP, IP_MULTICAST_TTL)",
          "536: X(broadcast, SOL_SOCKET, SO_BROADCAST)",
          "537: X(ttl, IPPROTO_IP, IP_TTL)",
          "539: #undef X",
          "542: int uv_udp_getsockname(uv_udp_t* handle, struct sockaddr* name, int* namelen) {",
          "",
          "---------------"
        ],
        "deps/uv/src/win/error.c||deps/uv/src/win/error.c": [
          "File: deps/uv/src/win/error.c -> deps/uv/src/win/error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     case WSAEMSGSIZE:                       return UV_EMSGSIZE;",
          "95:     case ERROR_NETWORK_UNREACHABLE:         return UV_ENETUNREACH;",
          "96:     case WSAENETUNREACH:                    return UV_ENETUNREACH;",
          "97:     case ERROR_OUTOFMEMORY:                 return UV_ENOMEM;",
          "98:     case ERROR_NOT_CONNECTED:               return UV_ENOTCONN;",
          "99:     case WSAENOTCONN:                       return UV_ENOTCONN;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:     case WSAENOBUFS:                        return UV_ENOBUFS;",
          "",
          "---------------"
        ],
        "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c": [
          "File: deps/uv/src/win/fs.c -> deps/uv/src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "489: }",
          "492: void fs__stat(uv_fs_t* req, const wchar_t* path) {",
          "493:   HANDLE file;",
          "494:   WIN32_FIND_DATAW ent;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "492: #define IS_SLASH(c) \\",
          "493:   ((wchar_t) c == L'/' || (wchar_t) c == L'\\\\')",
          "494: #define IS_COLON(c) \\",
          "495:   ((wchar_t) c == L':')",
          "496: #define IS_LETTER(c) \\",
          "497:   ((((wchar_t) c >= L'a') && ((wchar_t) c <= L'z')) || \\",
          "498:    (((wchar_t) c >= L'A') && ((wchar_t) c <= L'Z')))",
          "499: #define IS_QUESTION(c) \\",
          "500:   ((wchar_t) c == L'?')",
          "503: static int uv__count_slash_separated_words(const wchar_t* pos,",
          "504:                                            const wchar_t* end,",
          "505:                                            int limit) {",
          "506:   char last_was_slash = 1, count = 0;",
          "508:   for (; pos < end; pos++) {",
          "509:     if (IS_SLASH(*pos)) {",
          "511:       if (last_was_slash) {",
          "512:         return 0;",
          "513:       } else {",
          "514:         last_was_slash = 1;",
          "515:       }",
          "516:     } else {",
          "517:       if (last_was_slash) {",
          "519:         count++;",
          "520:         if (count > limit) {",
          "521:           return -1;",
          "522:         }",
          "523:         last_was_slash = 0;",
          "524:       }",
          "525:     }",
          "526:   }",
          "528:   return count;",
          "529: }",
          "540: static int uv__is_root(const wchar_t* path) {",
          "541:   size_t len = wcslen(path);",
          "544:   if (len == 0 && IS_SLASH(path[0])) {",
          "545:     return 1;",
          "546:   }",
          "548:   if (len < 3) {",
          "549:     return 0;",
          "550:   }",
          "553:   if (IS_LETTER(path[0]) && IS_COLON(path[1]) && IS_SLASH(path[2])) {",
          "554:     return 1;",
          "555:   }",
          "557:   if (!IS_SLASH(path[0]) || !IS_SLASH(path[1])) {",
          "558:     return 0;",
          "559:   }",
          "562:   if (!IS_QUESTION(path[2])) {",
          "563:     return uv__count_slash_separated_words(path + 2, path + len, 2) == 2;",
          "564:   }",
          "566:   if (!IS_SLASH(path[3])) {",
          "567:     return 0;",
          "568:   }",
          "570:   if ((len == 6 || len == 7) &&",
          "571:       IS_LETTER(path[4]) && IS_COLON(path[5]) &&",
          "572:       (len == 6 || IS_SLASH(path[6]))) {",
          "573:     return 1;",
          "574:   }",
          "577:   if (len >= 8 &&",
          "578:       (path[4] == L'u' || path[4] == L'U') &&",
          "579:       (path[5] == L'n' || path[5] == L'N') &&",
          "580:       (path[6] == L'c' || path[6] == L'C') &&",
          "581:       IS_SLASH(path[7])) {",
          "582:     return uv__count_slash_separated_words(path + 8, path + len, 2) == 2;",
          "583:   }",
          "585:   return 0;",
          "586: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "497:   req->ptr = NULL;",
          "499:   file = FindFirstFileExW(path, FindExInfoStandard, &ent,",
          "500:     FindExSearchNameMatch, NULL, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "596:   if (uv__is_root(path)) {",
          "599:     DWORD drive_type = GetDriveTypeW(path);",
          "600:     if (drive_type == DRIVE_UNKNOWN || drive_type == DRIVE_NO_ROOT_DIR) {",
          "601:       req->last_error = ERROR_PATH_NOT_FOUND;",
          "602:       req->errorno = UV_ENOENT;",
          "603:       req->result = -1;",
          "604:       return;",
          "605:     }",
          "607:     memset(&req->stat, 0, sizeof req->stat);",
          "609:     req->stat.st_nlink = 1;",
          "610:     req->stat.st_mode = ((_S_IREAD|_S_IWRITE) + ((_S_IREAD|_S_IWRITE) >> 3) +",
          "611:         ((_S_IREAD|_S_IWRITE) >> 6)) | S_IFDIR;",
          "613:     req->last_error = ERROR_SUCCESS;",
          "614:     req->errorno = UV_OK;",
          "615:     req->result = 0;",
          "616:     req->ptr = &req->stat;",
          "617:     return;",
          "618:   }",
          "",
          "---------------"
        ],
        "deps/uv/src/win/tty.c||deps/uv/src/win/tty.c": [
          "File: deps/uv/src/win/tty.c -> deps/uv/src/win/tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1069:       bg_bright = 0;",
          "1071:     } else if (arg == 1) {",
          "1073:       fg_bright = 1;",
          "1075:     } else if (arg == 21 || arg == 22) {",
          "1077:       fg_bright = 0;",
          "1079:     } else if (arg >= 30 && arg <= 37) {",
          "1081:       fg_color = arg - 30;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1075:     } else if (arg == 2) {",
          "1077:       fg_bright = 0;",
          "1078:       bg_bright = 0;",
          "1080:     } else if (arg == 5) {",
          "1082:       bg_bright = 1;",
          "1088:     } else if (arg == 25) {",
          "1090:       bg_bright = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1091:     } else if (arg ==  49) {",
          "1093:       bg_color = 0;",
          "1094:     }",
          "1095:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1108:     } else if (arg >= 90 && arg <= 97) {",
          "1110:       fg_bright = 1;",
          "1111:       fg_color = arg - 90;",
          "1113:     } else if (arg >= 100 && arg <= 107) {",
          "1115:       bg_bright = 1;",
          "1116:       bg_color = arg - 100;",
          "",
          "---------------"
        ],
        "deps/uv/src/win/udp.c||deps/uv/src/win/udp.c": [
          "File: deps/uv/src/win/udp.c -> deps/uv/src/win/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "575: }",
          "578: int uv_udp_set_multicast_ttl(uv_udp_t* handle, int ttl) {",
          "579:   if (setsockopt(handle->socket, IPPROTO_IP, IP_MULTICAST_TTL,",
          "580:       (const char*)&ttl, sizeof ttl) == -1) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "578: int uv_udp_set_multicast_loop(uv_udp_t* handle, int on) {",
          "579:   uv__set_artificial_error(handle->loop, UV_ENOSYS);",
          "580:   return -1;",
          "581: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "596:   return 0;",
          "597: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "606: int uv_udp_set_ttl(uv_udp_t* handle, int ttl) {",
          "607:   uv__set_artificial_error(handle->loop, UV_ENOSYS);",
          "608:   return -1;",
          "609: }",
          "",
          "---------------"
        ],
        "deps/uv/test/test-fs.c||deps/uv/test/test-fs.c": [
          "File: deps/uv/test/test-fs.c -> deps/uv/test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: # define close _close",
          "46: #endif",
          "49: typedef struct {",
          "50:   const char* path;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: #define TOO_LONG_NAME_LENGTH 8192",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "416:   uv_fs_req_cleanup(req);",
          "417: }",
          "420: TEST_IMPL(fs_file_noent) {",
          "421:   uv_fs_t req;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "420: static void open_nametoolong_cb(uv_fs_t* req) {",
          "421:   ASSERT(req->fs_type == UV_FS_OPEN);",
          "422:   ASSERT(req->errorno == UV_ENAMETOOLONG);",
          "423:   ASSERT(req->result == -1);",
          "424:   open_cb_count++;",
          "425:   uv_fs_req_cleanup(req);",
          "426: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "441:   return 0;",
          "442: }",
          "445: static void check_utime(const char* path, double atime, double mtime) {",
          "446:   struct stat* s;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453: TEST_IMPL(fs_file_nametoolong) {",
          "454:   uv_fs_t req;",
          "455:   int r;",
          "456:   char name[TOO_LONG_NAME_LENGTH + 1];",
          "458:   loop = uv_default_loop();",
          "460:   memset(name, 'a', TOO_LONG_NAME_LENGTH);",
          "461:   name[TOO_LONG_NAME_LENGTH] = 0;",
          "463:   r = uv_fs_open(loop, &req, name, O_RDONLY, 0, NULL);",
          "464:   ASSERT(r == -1);",
          "465:   ASSERT(req.result == -1);",
          "466:   ASSERT(uv_last_error(loop).code == UV_ENAMETOOLONG);",
          "467:   uv_fs_req_cleanup(&req);",
          "469:   r = uv_fs_open(loop, &req, name, O_RDONLY, 0, open_nametoolong_cb);",
          "470:   ASSERT(r == 0);",
          "472:   ASSERT(open_cb_count == 0);",
          "473:   uv_run(loop);",
          "474:   ASSERT(open_cb_count == 1);",
          "476:   return 0;",
          "477: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1254: }",
          "1257: TEST_IMPL(fs_futime) {",
          "1258:   utime_check_t checkme;",
          "1259:   const char* path = \"test_file\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1291: #ifdef _WIN32",
          "1292: TEST_IMPL(fs_stat_root) {",
          "1293:   int r;",
          "1294:   uv_loop_t* loop = uv_default_loop();",
          "1296:   r = uv_fs_stat(loop, &stat_req, \"c:\\\\\", NULL);",
          "1297:   ASSERT(r == 0);",
          "1299:   r = uv_fs_stat(loop, &stat_req, \"\\\\\\\\?\\\\C:\\\\\", NULL);",
          "1300:   ASSERT(r == 0);",
          "1302:   return 0;",
          "1303: }",
          "1304: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1543:   unlink(\"test_file2\");",
          "1545:   return 0;",
          "",
          "[Removed Lines]",
          "1546: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/test/test-list.h||deps/uv/test/test-list.h": [
          "File: deps/uv/test/test-list.h -> deps/uv/test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: TEST_DECLARE   (spawn_and_ping)",
          "107: TEST_DECLARE   (kill)",
          "108: TEST_DECLARE   (fs_file_noent)",
          "109: TEST_DECLARE   (fs_file_async)",
          "110: TEST_DECLARE   (fs_file_sync)",
          "111: TEST_DECLARE   (fs_async_dir)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109: TEST_DECLARE   (fs_file_nametoolong)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143: TEST_DECLARE   (environment_creation)",
          "144: TEST_DECLARE   (listen_with_simultaneous_accepts)",
          "145: TEST_DECLARE   (listen_no_simultaneous_accepts)",
          "146: #endif",
          "147: HELPER_DECLARE (tcp4_echo_server)",
          "148: HELPER_DECLARE (tcp6_echo_server)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147: TEST_DECLARE   (fs_stat_root)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "281:   TEST_ENTRY  (environment_creation)",
          "282:   TEST_ENTRY  (listen_with_simultaneous_accepts)",
          "283:   TEST_ENTRY  (listen_no_simultaneous_accepts)",
          "284: #endif",
          "286:   TEST_ENTRY  (fs_file_noent)",
          "287:   TEST_ENTRY  (fs_file_async)",
          "288:   TEST_ENTRY  (fs_file_sync)",
          "289:   TEST_ENTRY  (fs_async_dir)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286:   TEST_ENTRY  (fs_stat_root)",
          "290:   TEST_ENTRY  (fs_file_nametoolong)",
          "",
          "---------------"
        ],
        "deps/uv/uv.gyp||deps/uv/uv.gyp": [
          "File: deps/uv/uv.gyp -> deps/uv/uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:             'EV_CONFIG_H=\"config_freebsd.h\"',",
          "251:             'EIO_CONFIG_H=\"config_freebsd.h\"',",
          "252:           ],",
          "253:         }],",
          "254:         [ 'OS==\"openbsd\"', {",
          "255:           'include_dirs': [ 'src/ares/config_openbsd' ],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:           'direct_dependent_settings': {",
          "254:             'libraries': [",
          "255:               '-lkvm',",
          "256:             ],",
          "257:           },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "defa637378ae3ce3978908c7b604082308868a8c",
      "candidate_info": {
        "commit_hash": "defa637378ae3ce3978908c7b604082308868a8c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/defa637378ae3ce3978908c7b604082308868a8c",
        "files": [
          "lib/dgram.js",
          "src/udp_wrap.cc",
          "test/simple/test-dgram-oob-buffer.js"
        ],
        "message": "dgram: fix out-of-bound memory read",
        "before_after_code_files": [
          "lib/dgram.js||lidgram.js",
          "src/udp_wrap.cc||src/udp_wrap.cc",
          "test/simple/test-dgram-oob-buffer.js||test/simple/test-dgram-oob-buffer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/dgram.js||lidgram.js": [
          "File: lib/dgram.js -> lidgram.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:                                  callback) {",
          "166:   var self = this;",
          "168:   callback = callback || noop;",
          "170:   self._healthCheck();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/udp_wrap.cc||src/udp_wrap.cc": [
          "File: src/udp_wrap.cc -> src/udp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "287:   size_t offset = args[1]->Uint32Value();",
          "288:   size_t length = args[2]->Uint32Value();",
          "290:   SendWrap* req_wrap = new SendWrap();",
          "291:   req_wrap->object_->SetHiddenValue(buffer_sym, buffer_obj);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "289:   assert(offset < Buffer::Length(buffer_obj));",
          "290:   assert(length <= Buffer::Length(buffer_obj) - offset);",
          "",
          "---------------"
        ],
        "test/simple/test-dgram-oob-buffer.js||test/simple/test-dgram-oob-buffer.js": [
          "File: test/simple/test-dgram-oob-buffer.js -> test/simple/test-dgram-oob-buffer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: var common = require('../common');",
          "27: var assert = require('assert');",
          "28: var dgram = require('dgram');",
          "30: var socket = dgram.createSocket('udp4');",
          "31: var buf = Buffer([1,2,3,4]);",
          "33: function ok() {}",
          "34: socket.send(buf, 0, 0, common.PORT, '127.0.0.1', ok); // useful? no",
          "35: socket.send(buf, 0, 4, common.PORT, '127.0.0.1', ok);",
          "36: socket.send(buf, 1, 3, common.PORT, '127.0.0.1', ok);",
          "37: socket.send(buf, 3, 1, common.PORT, '127.0.0.1', ok);",
          "39: assert.throws(function() {",
          "40:   socket.send(buf, 0, 5, common.PORT, '127.0.0.1', assert.fail);",
          "41: });",
          "42: assert.throws(function() {",
          "43:   socket.send(buf, 2, 3, common.PORT, '127.0.0.1', assert.fail);",
          "44: });",
          "45: assert.throws(function() {",
          "46:   socket.send(buf, 4, 0, common.PORT, '127.0.0.1', assert.fail);",
          "47: });",
          "48: assert.throws(function() {",
          "49:   socket.send(buf, 4, 4, common.PORT, '127.0.0.1', assert.fail);",
          "50: });",
          "52: socket.close(); // FIXME should not be necessary",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4cfdc57712ef4657157fbb0c14481bb05f91577f",
      "candidate_info": {
        "commit_hash": "4cfdc57712ef4657157fbb0c14481bb05f91577f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/4cfdc57712ef4657157fbb0c14481bb05f91577f",
        "files": [
          "lib/tls.js"
        ],
        "message": "Inline timeout function, avoiding declaration in conditional\n\nMoving it out would require an anonymous function, or bind(), anyway.\nLuckily It's a tiny function. Fixes crash in strict mode.",
        "before_after_code_files": [
          "lib/tls.js||litls.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/tls.js||litls.js": [
          "File: lib/tls.js -> litls.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "574:   var self = this, ssl = this.ssl;",
          "576:   if (ssl.timer === null) {",
          "578:       ssl.handshakes = 0;",
          "579:       ssl.timer = null;",
          "582:   }",
          "583:   else if (++ssl.handshakes > exports.CLIENT_RENEG_LIMIT) {",
          "",
          "[Removed Lines]",
          "577:     function timeout() {",
          "580:     }",
          "581:     ssl.timer = setTimeout(timeout, exports.CLIENT_RENEG_WINDOW * 1000);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05282588e00502f5cae597c0654005b0cb685c6c",
      "candidate_info": {
        "commit_hash": "05282588e00502f5cae597c0654005b0cb685c6c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/05282588e00502f5cae597c0654005b0cb685c6c",
        "files": [
          "doc/api/buffer.markdown",
          "lib/buffer.js",
          "test/simple/test-buffer.js"
        ],
        "message": "Buffer.isEncoding(enc)\n\nRe: #3918",
        "before_after_code_files": [
          "lib/buffer.js||libuffer.js",
          "test/simple/test-buffer.js||test/simple/test-buffer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/buffer.js||libuffer.js": [
          "File: lib/buffer.js -> libuffer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "274: exports.SlowBuffer = SlowBuffer;",
          "275: exports.Buffer = Buffer;",
          "277: Buffer.poolSize = 8 * 1024;",
          "278: var pool;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-buffer.js||test/simple/test-buffer.js": [
          "File: test/simple/test-buffer.js -> test/simple/test-buffer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "729: Buffer(Buffer(0), 0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "732: [ 'hex',",
          "733:   'utf8',",
          "734:   'utf-8',",
          "735:   'ascii',",
          "736:   'binary',",
          "737:   'base64',",
          "738:   'ucs2',",
          "739:   'ucs-2',",
          "740:   'utf16le',",
          "741:   'utf-16le' ].forEach(function(enc) {",
          "742:     assert.equal(Buffer.isEncoding(enc), true);",
          "743:   });",
          "745: [ 'utf9',",
          "746:   'utf-7',",
          "747:   'Unicode-FTW',",
          "748:   'new gnu gun'  ].forEach(function(enc) {",
          "749:     assert.equal(Buffer.isEncoding(enc), false);",
          "750:   });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e50282ae8672ea2b6ea320e74389160bec951f0",
      "candidate_info": {
        "commit_hash": "1e50282ae8672ea2b6ea320e74389160bec951f0",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/1e50282ae8672ea2b6ea320e74389160bec951f0",
        "files": [
          "deps/uv/include/uv.h",
          "deps/uv/src/unix/error.c",
          "deps/uv/src/unix/stream.c",
          "deps/uv/src/unix/sunos.c",
          "deps/uv/src/win/error.c",
          "deps/uv/test/test-fs.c"
        ],
        "message": "deps: upgrade libuv to 4d42af2",
        "before_after_code_files": [
          "deps/uv/include/uv.h||deps/uv/include/uv.h",
          "deps/uv/src/unix/error.c||deps/uv/src/unix/error.c",
          "deps/uv/src/unix/stream.c||deps/uv/src/unix/stream.c",
          "deps/uv/src/unix/sunos.c||deps/uv/src/unix/sunos.c",
          "deps/uv/src/win/error.c||deps/uv/src/win/error.c",
          "deps/uv/test/test-fs.c||deps/uv/test/test-fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/include/uv.h||deps/uv/include/uv.h": [
          "File: deps/uv/include/uv.h -> deps/uv/include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:   XX( 53, ENOTEMPTY, \"directory not empty\") \\",
          "127:   XX( 54, ENOSPC, \"no space left on device\") \\",
          "128:   XX( 55, EIO, \"i/o error\") \\",
          "132: #define UV_ERRNO_GEN(val, name, s) UV_##name = val,",
          "",
          "[Removed Lines]",
          "129:   XX( 56, EROFS, \"read-only file system\" )",
          "",
          "[Added Lines]",
          "129:   XX( 56, EROFS, \"read-only file system\" ) \\",
          "130:   XX( 57, ENODEV, \"no such device\" )",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/error.c||deps/uv/src/unix/error.c": [
          "File: deps/uv/src/unix/error.c -> deps/uv/src/unix/error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     case EADDRNOTAVAIL: return UV_EADDRNOTAVAIL;",
          "87:     case ENOTDIR: return UV_ENOTDIR;",
          "88:     case EISDIR: return UV_EISDIR;",
          "89:     case ENOTCONN: return UV_ENOTCONN;",
          "90:     case EEXIST: return UV_EEXIST;",
          "91:     case EHOSTUNREACH: return UV_EHOSTUNREACH;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:     case ENODEV: return UV_ENODEV;",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/stream.c||deps/uv/src/unix/stream.c": [
          "File: deps/uv/src/unix/stream.c -> deps/uv/src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "802:   int sockfd;",
          "803:   int r;",
          "805:   if (stream->fd <= 0) {",
          "811:     if (uv__stream_open(stream,",
          "812:                         sockfd,",
          "813:                         UV_STREAM_READABLE | UV_STREAM_WRITABLE)) {",
          "814:       close(sockfd);",
          "816:     }",
          "817:   }",
          "837:     r = connect(stream->fd, addr, addrlen);",
          "839:   while (r == -1 && errno == EINTR);",
          "859:   }",
          "861:   uv__io_start(stream->loop, &stream->write_watcher);",
          "863:   if (stream->delayed_error)",
          "",
          "[Removed Lines]",
          "806:     if ((sockfd = uv__socket(addr->sa_family, SOCK_STREAM, 0)) == -1) {",
          "807:       uv__set_sys_error(stream->loop, errno);",
          "808:       return -1;",
          "809:     }",
          "815:       return -2;",
          "819:   uv__req_init(stream->loop, req, UV_CONNECT);",
          "820:   req->cb = cb;",
          "821:   req->handle = stream;",
          "822:   ngx_queue_init(&req->queue);",
          "824:   if (stream->connect_req) {",
          "825:     uv__set_sys_error(stream->loop, EALREADY);",
          "826:     return -1;",
          "827:   }",
          "829:   if (stream->type != UV_TCP) {",
          "830:     uv__set_sys_error(stream->loop, ENOTSOCK);",
          "831:     return -1;",
          "832:   }",
          "834:   stream->connect_req = req;",
          "836:   do {",
          "838:   }",
          "841:   stream->delayed_error = 0;",
          "843:   if (r != 0 && errno != EINPROGRESS) {",
          "844:     switch (errno) {",
          "851:       case ECONNREFUSED:",
          "852:         stream->delayed_error = errno;",
          "853:         break;",
          "855:       default:",
          "856:         uv__set_sys_error(stream->loop, errno);",
          "857:         return -1;",
          "858:     }",
          "",
          "[Added Lines]",
          "805:   if (stream->type != UV_TCP)",
          "806:     return uv__set_sys_error(stream->loop, ENOTSOCK);",
          "808:   if (stream->connect_req)",
          "809:     return uv__set_sys_error(stream->loop, EALREADY);",
          "812:     sockfd = uv__socket(addr->sa_family, SOCK_STREAM, 0);",
          "814:     if (sockfd == -1)",
          "815:       return uv__set_sys_error(stream->loop, errno);",
          "821:       return -1;",
          "825:   stream->delayed_error = 0;",
          "827:   do",
          "831:   if (r == -1) {",
          "832:     if (errno == EINPROGRESS)",
          "834:     else if (errno == ECONNREFUSED)",
          "839:       stream->delayed_error = errno;",
          "840:     else",
          "841:       return uv__set_sys_error(stream->loop, errno);",
          "844:   uv__req_init(stream->loop, req, UV_CONNECT);",
          "845:   req->cb = cb;",
          "846:   req->handle = stream;",
          "847:   ngx_queue_init(&req->queue);",
          "848:   stream->connect_req = req;",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/sunos.c||deps/uv/src/unix/sunos.c": [
          "File: deps/uv/src/unix/sunos.c -> deps/uv/src/unix/sunos.c"
        ],
        "deps/uv/src/win/error.c||deps/uv/src/win/error.c": [
          "File: deps/uv/src/win/error.c -> deps/uv/src/win/error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     case ERROR_MOD_NOT_FOUND:               return UV_ENOENT;",
          "87:     case ERROR_PATH_NOT_FOUND:              return UV_ENOENT;",
          "88:     case ERROR_ACCESS_DENIED:               return UV_EPERM;",
          "89:     case ERROR_NOACCESS:                    return UV_EACCES;",
          "90:     case WSAEACCES:                         return UV_EACCES;",
          "91:     case ERROR_ADDRESS_ALREADY_ASSOCIATED:  return UV_EADDRINUSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:     case ERROR_PRIVILEGE_NOT_HELD:          return UV_EPERM;",
          "",
          "---------------"
        ],
        "deps/uv/test/test-fs.c||deps/uv/test/test-fs.c": [
          "File: deps/uv/test/test-fs.c -> deps/uv/test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1226:       return 0;",
          "1232:       return 0;",
          "1233:     }",
          "",
          "[Removed Lines]",
          "1227:     } else if (uv_last_error(loop).sys_errno_ == ERROR_PRIVILEGE_NOT_HELD) {",
          "",
          "[Added Lines]",
          "1227:     } else if (uv_last_error(loop).code == UV_EPERM) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}