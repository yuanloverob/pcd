{
  "cve_id": "CVE-2017-13083",
  "cve_desc": "Akeo Consulting Rufus prior to version 2.17.1187 does not adequately validate the integrity of updates downloaded over HTTP, allowing an attacker to easily convince a user to execute arbitrary code",
  "repo": "pbatard/rufus",
  "patch_hash": "c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
  "patch_info": {
    "commit_hash": "c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
    "repo": "pbatard/rufus",
    "commit_url": "https://github.com/pbatard/rufus/commit/c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
    "files": [
      "res/localization/rufus.loc",
      "src/pki.c",
      "src/rufus.rc",
      "src/stdlg.c"
    ],
    "message": "[pki] fix https://www.kb.cert.org/vuls/id/403768\n\n* This commit effectively fixes https://www.kb.cert.org/vuls/id/403768 (CVE-2017-13083) as\n  it is described per its revision 11, which is the latest revision at the time of this commit,\n  by disabling Windows prompts, enacted during signature validation, that allow the user to\n  bypass the intended signature verification checks.\n* It needs to be pointed out that the vulnerability (\"allow(ing) the use of a self-signed\n  certificate\"), which relies on the end-user actively ignoring a Windows prompt that tells\n  them that the update failed the signature validation whilst also advising against running it,\n  is being fully addressed, even as the update protocol remains HTTP.\n* It also need to be pointed out that the extended delay (48 hours) between the time the\n  vulnerability was reported and the moment it is fixed in our codebase has to do with\n  the fact that the reporter chose to deviate from standard security practices by not\n  disclosing the details of the vulnerability with us, be it publicly or privately,\n  before creating the cert.org report. The only advance notification we received was a\n  generic note about the use of HTTP vs HTTPS, which, as have established, is not\n  immediately relevant to addressing the reported vulnerability.\n* Closes #1009\n* Note: The other vulnerability scenario described towards the end of #1009, which\n  doesn't have to do with the \"lack of CA checking\", will be addressed separately.",
    "before_after_code_files": [
      "res/localization/rufus.loc||res/localization/rufus.loc",
      "src/pki.c||src/pki.c",
      "src/rufus.rc||src/rufus.rc",
      "src/stdlg.c||src/stdlg.c"
    ]
  },
  "patch_diff": {
    "res/localization/rufus.loc||res/localization/rufus.loc": [
      "File: res/localization/rufus.loc -> res/localization/rufus.loc",
      "--- Hunk 1 ---",
      "[Context before]",
      "487: # eg. \"Partitioning (MBR)...\"",
      "488: t MSG_238 \"Partitioning (%s)...\"",
      "489: t MSG_239 \"Deleting partitions...\"",
      "490: t MSG_241 \"Downloading: %0.1f%%\"",
      "491: t MSG_242 \"Failed to download file.\"",
      "492: t MSG_243 \"Checking for Rufus updates...\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: t MSG_240 \"The signature for the downloaded update can not be validated. This could mean that your \"",
      "491:  \"system is improperly configured for signature validation or indicate a malicious download.\\n\\n\"",
      "492:  \"The download will be deleted. Please check the log for more details.\"",
      "",
      "---------------"
    ],
    "src/pki.c||src/pki.c": [
      "File: src/pki.c -> src/pki.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:  static char error_string[64];",
      "54:  DWORD error_code = GetLastError();",
      "57:   return WindowsErrorString();",
      "59:  switch (error_code) {",
      "",
      "[Removed Lines]",
      "56:  if ((error_code >> 16) != 0x8009)",
      "",
      "[Added Lines]",
      "56:  if (((error_code >> 16) != 0x8009) && ((error_code >> 16) != 0x800B))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "113:   return \"Cannot complete usage check.\";",
      "114:  case CRYPT_E_NO_TRUSTED_SIGNER:",
      "115:   return \"None of the signers of the cryptographic message or certificate trust list is trusted.\";",
      "116:  default:",
      "117:   static_sprintf(error_string, \"Unknown PKI error 0x%08lX\", error_code);",
      "118:   return error_string;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "116:  case CERT_E_UNTRUSTEDROOT:",
      "117:   return \"The root certificate is not trusted.\";",
      "118:  case TRUST_E_NOSIGNATURE:",
      "119:   return \"Not digitally signed.\";",
      "120:  case TRUST_E_EXPLICIT_DISTRUST:",
      "121:   return \"One of the certificates used was marked as untrusted by the user.\";",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "268:  }",
      "270:  trust_data.cbStruct = sizeof(trust_data);",
      "273:  trust_data.fdwRevocationChecks = WTD_REVOKE_WHOLECHAIN;",
      "",
      "[Removed Lines]",
      "271:  trust_data.dwUIChoice = WTD_UI_ALL;",
      "",
      "[Added Lines]",
      "283:  trust_data.dwUIChoice = WTD_UI_NONE;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "279:  r = WinVerifyTrust(NULL, &guid_generic_verify, &trust_data);",
      "280:  safe_free(trust_file.pcwszFilePath);",
      "282:  return r;",
      "283: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "293:  switch (r) {",
      "294:  case ERROR_SUCCESS:",
      "295:   break;",
      "296:  case TRUST_E_NOSIGNATURE:",
      "298:   uprintf(\"PKI: File does not appear to be signed: %s\", WinPKIErrorString());",
      "299:   MessageBoxExU(hDlg, lmprintf(MSG_284), lmprintf(MSG_283), MB_OK | MB_ICONERROR | MB_IS_RTL, selected_langid);",
      "300:   break;",
      "301:  default:",
      "302:   uprintf(\"PKI: Failed to validate signature: %s\", WinPKIErrorString());",
      "303:   MessageBoxExU(hDlg, lmprintf(MSG_240), lmprintf(MSG_283), MB_OK | MB_ICONERROR | MB_IS_RTL, selected_langid);",
      "304:   break;",
      "305:  }",
      "",
      "---------------"
    ],
    "src/rufus.rc||src/rufus.rc": [
      "File: src/rufus.rc -> src/rufus.rc",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
      "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
      "35: EXSTYLE WS_EX_ACCEPTFILES",
      "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
      "38: BEGIN",
      "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
      "",
      "[Removed Lines]",
      "36: CAPTION \"Rufus 2.17.1186\"",
      "",
      "[Added Lines]",
      "36: CAPTION \"Rufus 2.17.1187\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "368: VS_VERSION_INFO VERSIONINFO",
      "371:  FILEFLAGSMASK 0x3fL",
      "372: #ifdef _DEBUG",
      "373:  FILEFLAGS 0x1L",
      "",
      "[Removed Lines]",
      "369:  FILEVERSION 2,17,1186,0",
      "370:  PRODUCTVERSION 2,17,1186,0",
      "",
      "[Added Lines]",
      "369:  FILEVERSION 2,17,1187,0",
      "370:  PRODUCTVERSION 2,17,1187,0",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "384:         BEGIN",
      "385:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
      "386:             VALUE \"FileDescription\", \"Rufus\"",
      "388:             VALUE \"InternalName\", \"Rufus\"",
      "389:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
      "390:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
      "391:             VALUE \"OriginalFilename\", \"rufus.exe\"",
      "392:             VALUE \"ProductName\", \"Rufus\"",
      "394:         END",
      "395:     END",
      "396:     BLOCK \"VarFileInfo\"",
      "",
      "[Removed Lines]",
      "387:             VALUE \"FileVersion\", \"2.17.1186\"",
      "393:             VALUE \"ProductVersion\", \"2.17.1186\"",
      "",
      "[Added Lines]",
      "387:             VALUE \"FileVersion\", \"2.17.1187\"",
      "393:             VALUE \"ProductVersion\", \"2.17.1187\"",
      "",
      "---------------"
    ],
    "src/stdlg.c||src/stdlg.c": [
      "File: src/stdlg.c -> src/stdlg.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674:    case 2:  // Launch newer version and close this one",
      "1675:     Sleep(1000); // Add a delay on account of antivirus scanners",
      "1678:      break;",
      "1680:     memset(&si, 0, sizeof(si));",
      "1681:     memset(&pi, 0, sizeof(pi));",
      "",
      "[Removed Lines]",
      "1677:     if (ValidateSignature(hDlg, filepath) != NO_ERROR)",
      "",
      "[Added Lines]",
      "1677:     if (ValidateSignature(hDlg, filepath) != NO_ERROR) {",
      "1679:      _unlinkU(filepath);",
      "1680:      EnableWindow(GetDlgItem(hDlg, IDC_DOWNLOAD), FALSE);",
      "1682:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7b372088206938a2035d4fc8f2857f24b48278a8",
      "candidate_info": {
        "commit_hash": "7b372088206938a2035d4fc8f2857f24b48278a8",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/7b372088206938a2035d4fc8f2857f24b48278a8",
        "files": [
          "src/process.c",
          "src/process.h",
          "src/rufus.rc"
        ],
        "message": "[process] print access rights\n\n* Also clean up the code",
        "before_after_code_files": [
          "src/process.c||src/process.c",
          "src/process.h||src/process.h",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "src/process.c||src/process.c": [
          "File: src/process.c -> src/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "346: BOOL SearchProcess(char* HandleName, BOOL bPartialMatch, BOOL bIgnoreSelf)",
          "347: {",
          "348:  NTSTATUS status = STATUS_SUCCESS;",
          "349:  PSYSTEM_HANDLE_INFORMATION_EX handles = NULL;",
          "350:  POBJECT_NAME_INFORMATION buffer = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:  const char *access_rights_str[4] = { \"n\", \"r\", \"w\", \"rw\" };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "361:  HANDLE dupHandle = NULL;",
          "362:  HANDLE processHandle = NULL;",
          "363:  BOOLEAN bFound = FALSE;",
          "367:  PF_INIT_OR_SET_STATUS(NtQueryObject, Ntdll);",
          "368:  PF_INIT_OR_SET_STATUS(NtDuplicateObject, NtDll);",
          "369:  PF_INIT_OR_SET_STATUS(NtClose, NtDll);",
          "370: #ifdef USE_OBJECT_TYPES",
          "372: #endif",
          "374:  if (NT_SUCCESS(status))",
          "",
          "[Removed Lines]",
          "364:  char exe[2][MAX_PATH];",
          "365:  int cur_exe, cur_pid;",
          "371:  PF_INIT(RtlInitUnicodeString, NtDll);",
          "",
          "[Added Lines]",
          "365:  ULONG access_rights = 0;",
          "366:  char exe_path[MAX_PATH];",
          "367:  int cur_pid;",
          "373:  PF_INIT_OR_SET_STATUS(RtlInitUnicodeString, NtDll);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "382:   goto out;",
          "383:  }",
          "386:  cur_pid = 1;",
          "390:  wHandleName = utf8_to_wchar(HandleName);",
          "391:  wHandleNameLen = (USHORT)wcslen(wHandleName);",
          "",
          "[Removed Lines]",
          "385:  pid[0] = (ULONG_PTR)NULL;",
          "387:  exe[0][0] = 0;",
          "388:  cur_exe = 1;",
          "",
          "[Added Lines]",
          "387:  exe_path[0] = 0;",
          "388:  pid[0] = (ULONG_PTR)0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "400:  fileObjectTypeIndex = PhGetObjectTypeNumber(&fileTypeName);",
          "401:  if (fileObjectTypeIndex < 0)",
          "402:   uprintf(\"Warning: Could not get Object Index for file types\");",
          "404: #endif",
          "406:  for (i = 0; ; i++) {",
          "",
          "[Removed Lines]",
          "403:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "427:   if (pid[0] != pid[1]) {",
          "428:    cur_pid = (cur_pid + 1) % 2;",
          "430:    if (processHandle != NULL) {",
          "431:     if (processHandle != NtCurrentProcess())",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "431:    if (bFound) {",
          "432:     uprintf(\"o '%s' (pid: %ld, access: %s)\", exe_path, pid[cur_pid], access_rights_str[access_rights & 0x3]);",
          "433:     bFound = FALSE;",
          "434:     access_rights = 0;",
          "435:    }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "513:   if (wcsncmp(wHandleName, buffer->Name.Buffer, wHandleNameLen) != 0)",
          "514:    continue;",
          "531:  }",
          "533: out:",
          "535:   uprintf(\"You should try to close these applications before attempting to reformat the drive.\");",
          "536:  else",
          "539:  free(wHandleName);",
          "540:  PhFree(buffer);",
          "",
          "[Removed Lines]",
          "516:   if (!bFound) {",
          "517:    uprintf(\"\\r\\nNOTE: The following process(es) are accessing %s:\", HandleName);",
          "518:    bFound = TRUE;",
          "519:   }",
          "522:   if (GetModuleFileNameExU(processHandle, 0, exe[cur_exe], MAX_PATH - 1)) {",
          "524:    if (strcmp(exe[0], exe[1]) != 0) {",
          "525:     uprintf(\"o %s\", exe[cur_exe]);",
          "526:     cur_exe = (cur_exe + 1) % 2;",
          "527:    }",
          "528:   } else {",
          "529:    uprintf(\"o Unknown (Process ID %d)\", GetProcessId(processHandle));",
          "530:   }",
          "534:  if (bFound)",
          "537:   uprintf(\"NOTE: \" APPLICATION_NAME \" was not able to identify the process(es) preventing access to %s\", HandleName);",
          "",
          "[Added Lines]",
          "525:   bFound = TRUE;",
          "528:   access_rights |= handleInfo->GrantedAccess;",
          "531:   if (exe_path[0] == 0)",
          "532:    uprintf(\"\\r\\nNOTE: The following process(es) or service(s) are accessing %s:\", HandleName);",
          "534:   if (!GetModuleFileNameExU(processHandle, 0, exe_path, MAX_PATH - 1))",
          "535:    safe_sprintf(exe_path, MAX_PATH, \"Unknown_Process_%ld\", handleInfo->UniqueProcessId);",
          "539:  if (exe_path[0] != 0)",
          "542:   uprintf(APPLICATION_NAME \" was unable to identify the process(es) or service(s) preventing access to %s\", HandleName);",
          "",
          "---------------"
        ],
        "src/process.h||src/process.h": [
          "File: src/process.h -> src/process.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:  ULONG DefaultNonPagedPoolCharge;",
          "110: } OBJECT_TYPE_INFORMATION, *POBJECT_TYPE_INFORMATION;",
          "123: #endif",
          "125: typedef struct _OBJECT_TYPES_INFORMATION",
          "126: {",
          "",
          "[Removed Lines]",
          "112: typedef enum _MY_OBJECT_INFORMATION_CLASS",
          "113: {",
          "114:  _ObjectBasicInformation, // OBJECT_BASIC_INFORMATION",
          "115:  ObjectNameInformation, // OBJECT_NAME_INFORMATION",
          "116:  _ObjectTypeInformation, // OBJECT_TYPE_INFORMATION",
          "117:  ObjectTypesInformation, // OBJECT_TYPES_INFORMATION",
          "118:  ObjectHandleFlagInformation, // OBJECT_HANDLE_FLAG_INFORMATION",
          "119:  ObjectSessionInformation,",
          "120:  ObjectSessionObjectInformation,",
          "121:  MaxObjectInfoClass",
          "122: } MY_OBJECT_INFORMATION_CLASS;",
          "",
          "[Added Lines]",
          "112: #define ObjectNameInformation  1",
          "114: #define ObjectTypesInformation 3",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.15.1100\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.15.1101\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336: VS_VERSION_INFO VERSIONINFO",
          "339:  FILEFLAGSMASK 0x3fL",
          "340: #ifdef _DEBUG",
          "341:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "337:  FILEVERSION 2,15,1100,0",
          "338:  PRODUCTVERSION 2,15,1100,0",
          "",
          "[Added Lines]",
          "337:  FILEVERSION 2,15,1101,0",
          "338:  PRODUCTVERSION 2,15,1101,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:         BEGIN",
          "353:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "354:             VALUE \"FileDescription\", \"Rufus\"",
          "356:             VALUE \"InternalName\", \"Rufus\"",
          "357:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "358:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "359:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "360:             VALUE \"ProductName\", \"Rufus\"",
          "362:         END",
          "363:     END",
          "364:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "355:             VALUE \"FileVersion\", \"2.15.1100\"",
          "361:             VALUE \"ProductVersion\", \"2.15.1100\"",
          "",
          "[Added Lines]",
          "355:             VALUE \"FileVersion\", \"2.15.1101\"",
          "361:             VALUE \"ProductVersion\", \"2.15.1101\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "36cadcfcca1e3a0bcfa5428e3e71eefe1cc618d4",
      "candidate_info": {
        "commit_hash": "36cadcfcca1e3a0bcfa5428e3e71eefe1cc618d4",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/36cadcfcca1e3a0bcfa5428e3e71eefe1cc618d4",
        "files": [
          "src/pki.c",
          "src/rufus.c",
          "src/rufus.rc"
        ],
        "message": "[pki] improve error handling\n\n* FormatMessage() does not handle PKI errors\n* Also fix an issue with non-official version detection when the language is not English",
        "before_after_code_files": [
          "src/pki.c||src/pki.c",
          "src/rufus.c||src/rufus.c",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/pki.c||src/pki.c",
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "src/pki.c||src/pki.c",
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "src/pki.c||src/pki.c": [
          "File: src/pki.c -> src/pki.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:  LPWSTR lpszMoreInfoLink;",
          "45: } SPROG_PUBLISHERINFO, *PSPROG_PUBLISHERINFO;",
          "48: char* GetSignatureName(const char* path)",
          "49: {",
          "50:  static char szSubjectName[128];",
          "52:  BOOL r;",
          "53:  HCERTSTORE hStore = NULL;",
          "54:  HCRYPTMSG hMsg = NULL;",
          "55:  PCCERT_CONTEXT pCertContext = NULL;",
          "57:  PCMSG_SIGNER_INFO pSignerInfo = NULL;",
          "58:  PCMSG_SIGNER_INFO pCounterSignerInfo = NULL;",
          "59:  DWORD dwSignerInfo = 0;",
          "60:  CERT_INFO CertInfo = { 0 };",
          "61:  SPROG_PUBLISHERINFO ProgPubInfo = { 0 };",
          "65:  if (path == NULL) {",
          "66:   szFileName = calloc(MAX_PATH, sizeof(wchar_t));",
          "67:   if (szFileName == NULL)",
          "68:    return NULL;",
          "70:  }",
          "",
          "[Removed Lines]",
          "51:  char* p = NULL;",
          "56:  DWORD dwEncoding, dwContentType, dwFormatType, dwSubjectSize;",
          "62:  wchar_t *szFileName = utf8_to_wchar(path);",
          "69:   GetModuleFileNameW(GetModuleHandle(NULL), szFileName, MAX_PATH);",
          "",
          "[Added Lines]",
          "51: const char* WinPKIErrorString(void)",
          "52: {",
          "53:  static char error_string[64];",
          "54:  DWORD error_code = GetLastError();",
          "56:  if ((error_code >> 16) != 0x8009)",
          "57:   return WindowsErrorString();",
          "59:  switch (error_code) {",
          "60:  case NTE_BAD_UID:",
          "61:   return \"Bad UID.\";",
          "62:  case CRYPT_E_MSG_ERROR:",
          "63:   return \"An error occurred while performing an operation on a cryptographic message.\";",
          "64:  case CRYPT_E_UNKNOWN_ALGO:",
          "65:   return \"Unknown cryptographic algorithm.\";",
          "66:  case CRYPT_E_INVALID_MSG_TYPE:",
          "67:   return \"Invalid cryptographic message type.\";",
          "68:  case CRYPT_E_HASH_VALUE:",
          "69:   return \"The hash value is not correct\";",
          "70:  case CRYPT_E_ISSUER_SERIALNUMBER:",
          "71:   return \"Invalid issuer and/or serial number.\";",
          "72:  case CRYPT_E_BAD_LEN:",
          "73:   return \"The length specified for the output data was insufficient.\";",
          "74:  case CRYPT_E_BAD_ENCODE:",
          "75:   return \"An error occurred during encode or decode operation.\";",
          "76:  case CRYPT_E_FILE_ERROR:",
          "77:   return \"An error occurred while reading or writing to a file.\";",
          "78:  case CRYPT_E_NOT_FOUND:",
          "79:   return \"Cannot find object or property.\";",
          "80:  case CRYPT_E_EXISTS:",
          "81:   return \"The object or property already exists.\";",
          "82:  case CRYPT_E_NO_PROVIDER:",
          "83:   return \"No provider was specified for the store or object.\";",
          "84:  case CRYPT_E_DELETED_PREV:",
          "85:   return \"The previous certificate or CRL context was deleted.\";",
          "86:  case CRYPT_E_NO_MATCH:",
          "87:   return \"Cannot find the requested object.\";",
          "88:  case CRYPT_E_UNEXPECTED_MSG_TYPE:",
          "89:  case CRYPT_E_NO_KEY_PROPERTY:",
          "90:  case CRYPT_E_NO_DECRYPT_CERT:",
          "91:   return \"Private key or certificate issue\";",
          "92:  case CRYPT_E_BAD_MSG:",
          "93:   return \"Not a cryptographic message.\";",
          "94:  case CRYPT_E_NO_SIGNER:",
          "95:   return \"The signed cryptographic message does not have a signer for the specified signer index.\";",
          "96:  case CRYPT_E_REVOKED:",
          "97:   return \"The certificate is revoked.\";",
          "98:  case CRYPT_E_NO_REVOCATION_DLL:",
          "99:  case CRYPT_E_NO_REVOCATION_CHECK:",
          "100:  case CRYPT_E_REVOCATION_OFFLINE:",
          "101:  case CRYPT_E_NOT_IN_REVOCATION_DATABASE:",
          "102:   return \"Cannot check certificate revocation.\";",
          "103:  case CRYPT_E_INVALID_NUMERIC_STRING:",
          "104:  case CRYPT_E_INVALID_PRINTABLE_STRING:",
          "105:  case CRYPT_E_INVALID_IA5_STRING:",
          "106:  case CRYPT_E_INVALID_X500_STRING:",
          "107:  case  CRYPT_E_NOT_CHAR_STRING:",
          "108:   return \"Invalid string.\";",
          "109:  case CRYPT_E_SECURITY_SETTINGS:",
          "110:   return \"The cryptographic operation failed due to a local security option setting.\";",
          "111:  case CRYPT_E_NO_VERIFY_USAGE_CHECK:",
          "112:  case CRYPT_E_VERIFY_USAGE_OFFLINE:",
          "113:   return \"Cannot complete usage check.\";",
          "114:  case CRYPT_E_NO_TRUSTED_SIGNER:",
          "115:   return \"None of the signers of the cryptographic message or certificate trust list is trusted.\";",
          "116:  default:",
          "117:   static_sprintf(error_string, \"Unknown PKI error 0x%08lX\", error_code);",
          "118:   return error_string;",
          "119:  }",
          "120: }",
          "126:  char *p = NULL, *mpath = NULL;",
          "128:  HMODULE hm;",
          "132:  DWORD dwSize, dwEncoding, dwContentType, dwFormatType, dwSubjectSize;",
          "138:  wchar_t *szFileName;",
          "145:   hm = GetModuleHandle(NULL);",
          "146:   if (hm == NULL) {",
          "147:    uprintf(\"PKI: Could not get current executable handle: %s\", WinPKIErrorString());",
          "148:    return NULL;",
          "149:   }",
          "150:   dwSize = GetModuleFileNameW(hm, szFileName, MAX_PATH);",
          "151:   if ((dwSize == 0) || ((dwSize == MAX_PATH) && (GetLastError() == ERROR_INSUFFICIENT_BUFFER))) {",
          "152:    uprintf(\"PKI: Could not get module filename: %s\", WinPKIErrorString());",
          "153:    return NULL;",
          "154:   }",
          "155:   mpath = wchar_to_utf8(szFileName);",
          "156:  } else {",
          "157:   szFileName = utf8_to_wchar(path);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:   CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED, CERT_QUERY_FORMAT_FLAG_BINARY,",
          "75:   0, &dwEncoding, &dwContentType, &dwFormatType, &hStore, &hMsg, NULL);",
          "76:  if (!r) {",
          "78:   goto out;",
          "79:  }",
          "82:  r = CryptMsgGetParam(hMsg, CMSG_SIGNER_INFO_PARAM, 0, NULL, &dwSignerInfo);",
          "83:  if (!r) {",
          "85:   goto out;",
          "86:  }",
          "",
          "[Removed Lines]",
          "77:   uprintf(\"PKI: Failed to get store handle for '%s': %s\", path, WindowsErrorString());",
          "84:   uprintf(\"PKI: Failed to get signer size: %s\", WindowsErrorString);",
          "",
          "[Added Lines]",
          "165:   uprintf(\"PKI: Failed to get signature for '%s': %s\", (path==NULL)?mpath:path, WinPKIErrorString());",
          "172:   uprintf(\"PKI: Failed to get signer size: %s\", WinPKIErrorString());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:  r = CryptMsgGetParam(hMsg, CMSG_SIGNER_INFO_PARAM, 0, (PVOID)pSignerInfo, &dwSignerInfo);",
          "97:  if (!r) {",
          "99:   goto out;",
          "100:  }",
          "",
          "[Removed Lines]",
          "98:   uprintf(\"PKI: Failed to get signer information: %s\", WindowsErrorString());",
          "",
          "[Added Lines]",
          "186:   uprintf(\"PKI: Failed to get signer information: %s\", WinPKIErrorString());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:  pCertContext = CertFindCertificateInStore(hStore, ENCODING, 0, CERT_FIND_SUBJECT_CERT, (PVOID)&CertInfo, NULL);",
          "107:  if (!pCertContext) {",
          "109:   goto out;",
          "110:  }",
          "",
          "[Removed Lines]",
          "108:   uprintf(\"PKI: Failed to locate signer certificate in temporary store: %s\", WindowsErrorString());",
          "",
          "[Added Lines]",
          "196:   uprintf(\"PKI: Failed to locate signer certificate in temporary store: %s\", WinPKIErrorString());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "121:  p = szSubjectName;",
          "123: out:",
          "124:  safe_free(szFileName);",
          "125:  safe_free(ProgPubInfo.lpszProgramName);",
          "126:  safe_free(ProgPubInfo.lpszPublisherLink);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212:  safe_free(mpath);",
          "",
          "---------------"
        ],
        "src/rufus.c||src/rufus.c": [
          "File: src/rufus.c -> src/rufus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3232:  }",
          "3233:  selected_langid = get_language_id(selected_locale);",
          "3245:  if (!IsCurrentProcessElevated()) {",
          "",
          "[Removed Lines]",
          "3235:  if (!vc) {",
          "3236:   get_loc_data_file(loc_file, selected_locale);",
          "3237:   right_to_left_mode = ((selected_locale->ctrl_id) & LOC_RIGHT_TO_LEFT);",
          "3238:   if (MessageBoxExU(NULL, lmprintf(MSG_296), lmprintf(MSG_295),",
          "3239:    MB_YESNO | MB_ICONWARNING | MB_IS_RTL | MB_SYSTEMMODAL, selected_langid) != IDYES)",
          "3240:    goto out;",
          "3241:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3311:  if (get_loc_data_file(loc_file, selected_locale))",
          "3312:   WriteSettingStr(SETTING_LOCALE, selected_locale->txt[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3306:  if (!vc) {",
          "3307:   if (MessageBoxExU(NULL, lmprintf(MSG_296), lmprintf(MSG_295),",
          "3308:    MB_YESNO | MB_ICONWARNING | MB_IS_RTL | MB_SYSTEMMODAL, selected_langid) != IDYES)",
          "3309:    goto out;",
          "3310:   vc = TRUE;",
          "3311:  }",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.17.1183\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.17.1184\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "368: VS_VERSION_INFO VERSIONINFO",
          "371:  FILEFLAGSMASK 0x3fL",
          "372: #ifdef _DEBUG",
          "373:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "369:  FILEVERSION 2,17,1183,0",
          "370:  PRODUCTVERSION 2,17,1183,0",
          "",
          "[Added Lines]",
          "369:  FILEVERSION 2,17,1184,0",
          "370:  PRODUCTVERSION 2,17,1184,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384:         BEGIN",
          "385:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "386:             VALUE \"FileDescription\", \"Rufus\"",
          "388:             VALUE \"InternalName\", \"Rufus\"",
          "389:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "390:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "391:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "392:             VALUE \"ProductName\", \"Rufus\"",
          "394:         END",
          "395:     END",
          "396:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "387:             VALUE \"FileVersion\", \"2.17.1183\"",
          "393:             VALUE \"ProductVersion\", \"2.17.1183\"",
          "",
          "[Added Lines]",
          "387:             VALUE \"FileVersion\", \"2.17.1184\"",
          "393:             VALUE \"ProductVersion\", \"2.17.1184\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "86c530ac5094bcda992d86b1224f25d1eb0e1a7d",
      "candidate_info": {
        "commit_hash": "86c530ac5094bcda992d86b1224f25d1eb0e1a7d",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/86c530ac5094bcda992d86b1224f25d1eb0e1a7d",
        "files": [
          "res/localization/rufus.loc",
          "src/rufus.rc"
        ],
        "message": "[loc] Fix typos in Italian translation\n\n* Closes #975",
        "before_after_code_files": [
          "res/localization/rufus.loc||res/localization/rufus.loc",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "res/localization/rufus.loc||res/localization/rufus.loc": [
          "File: res/localization/rufus.loc -> res/localization/rufus.loc",
          "--- Hunk 1 ---",
          "[Context before]",
          "7968: # Messages used throughout the application",
          "7969: t MSG_001 \"Rilevata altra istanza Rufus\"",
          "7970: t MSG_002 \"\u00c8 in esecuzione un'altra applicazione Rufus.\\n\"",
          "7972: t MSG_003 \"ATTENZIONE: TUTTI I DATI SULL'UNITA' '%s' SARANNO CANCELLATI.\\n\"",
          "7973:  \"Per continuare seleziona 'OK'. Per anullare seleziona 'ANNULLA'.\"",
          "7974: t MSG_004 \"Policy aggiornamenti Rufus\"",
          "",
          "[Removed Lines]",
          "7971:  \"Chiudi la prima applicazione prima di eseguirna una seconda.\"",
          "",
          "[Added Lines]",
          "7971:  \"Chiudi la prima applicazione prima di eseguirne una seconda.\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8077: t MSG_091 \"Quando usi una destinazione di tipo UEFI, sono supportate solo immagini ISO avviabili EFI. \"",
          "8078:  \"Scegli un'immagine avviabile EFI o imposta una destinazione di tipo BIOS.\"",
          "8079: t MSG_092 \"Filesystem non supportato\"",
          "8081:  \"Questo pu\u00f2 includere partizioni/volumi che non sono elencati anche se visibili da Windows.\"",
          "8082:  \"Se vuoi procedere, sei responsabile per qualsiasi perdita di dati in queste partizioni.\"",
          "8083: t MSG_094 \"Rilevate partizioni multiple\"",
          "8084: t MSG_095 \"Immagine DD\"",
          "8085: t MSG_096 \"Il file system attualmente selezionato non pu\u00f2 essere usato con questo tipo di file ISO. \"",
          "8088: t MSG_098 \"IMPORTANTE: stai tentando di installare 'Windows To Go', ma l'unit\u00e0 destinazione non ha \"",
          "8090:  \"poich\u00e8 non \u00e8 stato disegnato per lavorare con unit\u00e0 che hanno invece l'attributo 'RIMUOVIBILE'.\\n\\n\"",
          "8091:  \"Vuoi ancora procedere?\\n\\n\"",
          "8093:  \"usando strumenti personalizzati del produttore dell'unit\u00e0. Comunque questi strumenti non sono QUASI MAI \"",
          "8094:  \"forniti all'utente...\"",
          "8095: t MSG_099 \"Limitazione filesystem\"",
          "",
          "[Removed Lines]",
          "8080: t MSG_093 \"IMPORTANTE: QUESTA UNITA' CONTIENE PARTIZIONI MULTIPLE!!\\n\\n\"",
          "8086:  \"Seelziona un differente file system o usa un differente file ISO.\"",
          "8087: t MSG_097 \"'%s' pu\u00f2 essere applicato soolo se il file system \u00e8 NTFS.\"",
          "8089:  \"l'attributo 'FISSO'. Poich\u00e8 Windows molto probabilmente si bloccher\u00e0 durante il boot, \"",
          "8092:  \"Nota: l'attributo 'FISSO/RIMUOVIBILE' \u00e8 una propriet\u00e0 hardware che pu\u00f2 essere modificata solo \"",
          "",
          "[Added Lines]",
          "8080: t MSG_093 \"IMPORTANTE: QUESTA UNITA' CONTIENE PARTIZIONI MULTIPLE!\\n\\n\"",
          "8086:  \"Seleziona un differente file system o usa un differente file ISO.\"",
          "8087: t MSG_097 \"'%s' pu\u00f2 essere applicato solo se il file system \u00e8 NTFS.\"",
          "8089:  \"l'attributo 'FISSO'. Windows molto probabilmente si bloccher\u00e0 durante il boot, \"",
          "8092:  \"Nota: l'attributo 'FISSO/RIMOVIBILE' \u00e8 una propriet\u00e0 hardware che pu\u00f2 essere modificata solo \"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8098: t MSG_101 \"Supporto WIN mancante\"",
          "8099: t MSG_102 \"Il tuo sistema operativo non pu\u00f2 estrarre file dall'archivio WIM. L'estrazione WIM \"",
          "8100:  \"\u00e8 necessaria per creare una unit\u00e0 USB avviabile EFI Windows 7 e Windows Vista. Puoi correggere ci\u00f2 \"",
          "8102: t MSG_103 \"Download %s?\"",
          "8103: t MSG_104 \"%s o successivo richiedono l'installazione di un file '%s'.\\n\"",
          "8104:  \"Poich\u00e8 questo file \u00e8 pi\u00f9 grande di 100 KB, ed \u00e8 sempre presente nell'immagine ISO di %s, \"",
          "",
          "[Removed Lines]",
          "8101:  \"installando una versione recente di 7-Zip.\\nVuoi visitare la pagina di downlaod di 7-zip download page?\"",
          "",
          "[Added Lines]",
          "8101:  \"installando una versione recente di 7-Zip.\\nVuoi visitare la pagina di downlaod di 7-zip?\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8121: # \"%d:%02d\" below is a duration (mins:secs)",
          "8122: t MSG_112 \"La formattazione di un volume UDF di grandi dimensioni pu\u00f2 richiedere molto tempo. in modo USB 2.0, il tempo stimato \"",
          "8123:  \"per la formattazione sar\u00e0 di %d:%02d, durante il quale la barra di progresso non verr\u00e0 aggiornata. Attendi il completamento dell'operazione!\"",
          "8125: t MSG_114 \"Questa immagine usa Syslinux %s%s ma questa applicazione include solo i file di installazione per \"",
          "8126:  \"Syslinux %s%s.\\n\\nPoich\u00e9 le nuove versioni di Syslinux non sono compatibili con le precedenti e \"",
          "8127:  \"non sarebbe possibile per Rufus includerle tutte, devono essere scaricati da Internet due file aggiuntivi \"",
          "",
          "[Removed Lines]",
          "8124: t MSG_113 \"Voume UDF di grandi dimensioni\"",
          "",
          "[Added Lines]",
          "8124: t MSG_113 \"Volume UDF di grandi dimensioni\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8164: t MSG_166 \"Abilita questa opzione per permettere la visualizzazione delle etichette internazionali \"",
          "8165:  \"e impostare una icona dispositivo (creer\u00e0 un file autorun.inf)\"",
          "8166: t MSG_167 \"Installa un MBR che permette la selezione all'avvio e maschera l'ID unit\u00e0 USB del BIOS\"",
          "8168:  \"Questo potrebbe essere necessario solo se installi Windows XP e hai pi\u00f9 di un disco\"",
          "8169: t MSG_169 \"Crea una partizione aggiuntiva e nascosta e prova ad allineare le diverse partizioni.\\n\"",
          "8170:  \"Questo pu\u00f2 migliorare il rilevamento all'avvio con vecchi BIOS\"",
          "8171: t MSG_170 \"Abilita il rilevamento per i dischi USB. USALO A TUO RISCHIO!!!\"",
          "8173: t MSG_172 \"Informazioni licenza e ringraziamenti\"",
          "8174: t MSG_173 \"Fai clic per selezionare...\"",
          "8175: t MSG_174 \"Rufus - Utility affidabile formattazione unit\u00e0 USB\"",
          "",
          "[Removed Lines]",
          "8167: t MSG_168 \"Prova prima a macsherare l'unit\u00e0 avviabile USB (normalmente 0x80) come un dsico differente.\\n\"",
          "8172: t MSG_171 \"Avvia l'operazione di formattazione.\\nQuesta operazione DISTRUGGERA' qualsiasi dato sull'unit\u00e0 di destinazione!\"",
          "",
          "[Added Lines]",
          "8167: t MSG_168 \"Prova prima a mascherare l'unit\u00e0 avviabile USB (normalmente 0x80) come un disco differente.\\n\"",
          "8172: t MSG_171 \"Avvia l'operazione di formattazione.\\nQuesta operazione DISTRUGGER\u00c0 qualsiasi dato sull'unit\u00e0 di destinazione!\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "8210: t MSG_200 \"Scegli se vuoi installare Windows direttamente dal dispositivo selezionato.\"",
          "8212: # Status messages - these messages will appear on the status bar",
          "8214: # Parameter: the name of an obsolete Syslinux .c32 module. eg: \"Obsolete vesamenu.c32 detected\"",
          "8215: t MSG_202 \"Analisi immagine...\"",
          "8216: t MSG_203 \"Analisi immagine fallita\"",
          "",
          "[Removed Lines]",
          "8213: t MSG_201 \"Annullamneto...\"",
          "",
          "[Added Lines]",
          "8213: t MSG_201 \"Annullamento...\"",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.15.1122\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.15.1123\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336: VS_VERSION_INFO VERSIONINFO",
          "339:  FILEFLAGSMASK 0x3fL",
          "340: #ifdef _DEBUG",
          "341:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "337:  FILEVERSION 2,15,1122,0",
          "338:  PRODUCTVERSION 2,15,1122,0",
          "",
          "[Added Lines]",
          "337:  FILEVERSION 2,15,1123,0",
          "338:  PRODUCTVERSION 2,15,1123,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:         BEGIN",
          "353:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "354:             VALUE \"FileDescription\", \"Rufus\"",
          "356:             VALUE \"InternalName\", \"Rufus\"",
          "357:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "358:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "359:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "360:             VALUE \"ProductName\", \"Rufus\"",
          "362:         END",
          "363:     END",
          "364:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "355:             VALUE \"FileVersion\", \"2.15.1122\"",
          "361:             VALUE \"ProductVersion\", \"2.15.1122\"",
          "",
          "[Added Lines]",
          "355:             VALUE \"FileVersion\", \"2.15.1123\"",
          "361:             VALUE \"ProductVersion\", \"2.15.1123\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d371088cb00d34e1193ad64dc34b6dc0ece2304",
      "candidate_info": {
        "commit_hash": "5d371088cb00d34e1193ad64dc34b6dc0ece2304",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/5d371088cb00d34e1193ad64dc34b6dc0ece2304",
        "files": [
          "src/format.c",
          "src/iso.c",
          "src/msapi_utf8.h",
          "src/rufus.c",
          "src/rufus.h",
          "src/rufus.rc"
        ],
        "message": "[iso] add EFI boot support from 'efi.img' FAT images\n\n* Required to support Debian Live 9.1 in ISO mode\n* Note that this only works if the efi.img boot files do not require\n  additional content besides the one extracted from the ISO.",
        "before_after_code_files": [
          "src/format.c||src/format.c",
          "src/iso.c||src/iso.c",
          "src/msapi_utf8.h||src/msapi_utf8.h",
          "src/rufus.c||src/rufus.c",
          "src/rufus.h||src/rufus.h",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "src/format.c||src/format.c": [
          "File: src/format.c -> src/format.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2042:      efi_dst[0] = drive_name[0];",
          "2043:      efi_dst[sizeof(efi_dst) - sizeof(\"\\\\bootx64.efi\")] = 0;",
          "2044:      if (!CreateDirectoryA(efi_dst, 0)) {",
          "2046:       FormatStatus = ERROR_SEVERITY_ERROR|FAC(FACILITY_STORAGE)|APPERR(ERROR_CANT_PATCH);",
          "2047:      } else {",
          "2048:       efi_dst[sizeof(efi_dst) - sizeof(\"\\\\bootx64.efi\")] = '\\\\';",
          "",
          "[Removed Lines]",
          "2045:       uprintf(\"Could not create directory '%s': %s\\n\", WindowsErrorString());",
          "",
          "[Added Lines]",
          "2045:       uprintf(\"Could not create directory '%s': %s\\n\", efi_dst, WindowsErrorString());",
          "",
          "---------------"
        ],
        "src/iso.c||src/iso.c": [
          "File: src/iso.c -> src/iso.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #include <cdio/udf.h>",
          "41: #include \"rufus.h\"",
          "42: #include \"missing.h\"",
          "43: #include \"resource.h\"",
          "44: #include \"msapi_utf8.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: #include \"libfat.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73: static const char* ldlinux_name = \"ldlinux.sys\";",
          "74: static const char* ldlinux_c32 = \"ldlinux.c32\";",
          "75: static const char* efi_dirname = \"/efi/boot\";",
          "76: static const char* efi_bootname[] = { \"bootia32.efi\", \"bootia64.efi\", \"bootx64.efi\", \"bootarm.efi\", \"bootaa64.efi\", \"bootebc.efi\" };",
          "77: static const char* install_wim_path = \"/sources\";",
          "78: static const char* install_wim_name[] = { \"install.wim\", \"install.swm\" };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: static const char* efi_img_name = \"efi.img\"; // Used by Debian Live ISOHybrids",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:   if ((img_report.reactos_path[0] == 0) && (safe_stricmp(psz_basename, reactos_name) == 0))",
          "203:    safe_strcpy(img_report.reactos_path, sizeof(img_report.reactos_path), psz_fullpath);",
          "206:   if (safe_stricmp(psz_dirname, efi_dirname) == 0) {",
          "207:    for (i=0; i<ARRAYSIZE(efi_bootname); i++)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208:   if (!HAS_EFI_IMG(img_report) && (safe_stricmp(psz_basename, efi_img_name) == 0))",
          "209:    safe_strcpy(img_report.efi_img_path, sizeof(img_report.efi_img_path), psz_fullpath);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "841:     uprintf(\"  Warning: Could not detect Isolinux version - Forcing to %s (embedded)\",",
          "842:      img_report.sl_version_str);",
          "843:    }",
          "844:   }",
          "845:   if (HAS_WINPE(img_report)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "850:    if (!IS_EFI_BOOTABLE(img_report) && HAS_EFI_IMG(img_report) && ExtractEfiImgFiles(NULL)) {",
          "851:     img_report.has_efi = 0x80;",
          "852:    }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "889:   StrArrayDestroy(&config_path);",
          "890:   StrArrayDestroy(&isolinux_path);",
          "891:   SendMessage(hMainDialog, UM_PROGRESS_EXIT, 0, 0);",
          "905:    if (fd == NULL) {",
          "915:     }",
          "917:    }",
          "918:   }",
          "921:  }",
          "922:  if (p_iso != NULL)",
          "923:   iso9660_close(p_iso);",
          "",
          "[Removed Lines]",
          "892:  } else if (HAS_SYSLINUX(img_report)) {",
          "893:   safe_sprintf(path, sizeof(path), \"%s\\\\syslinux.cfg\", dest_dir);",
          "895:   fd = fopen(path, \"r\");",
          "896:   if (fd != NULL && img_report.needs_syslinux_overwrite) {",
          "897:    fclose(fd);",
          "898:    fd = NULL;",
          "899:    safe_sprintf(path2, sizeof(path2), \"%s\\\\syslinux.org\", dest_dir);",
          "900:    uprintf(\"Renaming: %s \u2794 %s\", path, path2);",
          "901:    IGNORE_RETVAL(rename(path, path2));",
          "902:   }",
          "903:   if (fd == NULL) {",
          "904:    fd = fopen(path, \"w\"); // No \"/syslinux.cfg\" => create a new one",
          "906:     uprintf(\"Unable to create %s - booting from USB will not work\", path);",
          "907:     r = 1;",
          "908:    } else {",
          "909:     fprintf(fd, \"DEFAULT loadconfig\\n\\nLABEL loadconfig\\n  CONFIG %s\\n\", img_report.cfg_path);",
          "910:     for (i=safe_strlen(img_report.cfg_path); (i>0)&&(img_report.cfg_path[i]!='/'); i--);",
          "911:     if (i>0) {",
          "912:      img_report.cfg_path[i] = 0;",
          "913:      fprintf(fd, \"  APPEND %s/\\n\", img_report.cfg_path);",
          "914:      img_report.cfg_path[i] = '/';",
          "916:     uprintf(\"Created: %s\", path);",
          "919:   if (fd != NULL)",
          "920:    fclose(fd);",
          "",
          "[Added Lines]",
          "901:  } else {",
          "903:   if (img_report.has_efi == 0x80)",
          "904:    ExtractEfiImgFiles(dest_dir);",
          "905:   if (HAS_SYSLINUX(img_report)) {",
          "906:    safe_sprintf(path, sizeof(path), \"%s\\\\syslinux.cfg\", dest_dir);",
          "908:    fd = fopen(path, \"r\");",
          "909:    if (fd != NULL && img_report.needs_syslinux_overwrite) {",
          "910:     fclose(fd);",
          "911:     fd = NULL;",
          "912:     safe_sprintf(path2, sizeof(path2), \"%s\\\\syslinux.org\", dest_dir);",
          "913:     uprintf(\"Renaming: %s \u2794 %s\", path, path2);",
          "914:     IGNORE_RETVAL(rename(path, path2));",
          "915:    }",
          "917:     fd = fopen(path, \"w\"); // No \"/syslinux.cfg\" => create a new one",
          "918:     if (fd == NULL) {",
          "919:      uprintf(\"Unable to create %s - booting from USB will not work\", path);",
          "920:      r = 1;",
          "921:     } else {",
          "922:      fprintf(fd, \"DEFAULT loadconfig\\n\\nLABEL loadconfig\\n  CONFIG %s\\n\", img_report.cfg_path);",
          "923:      for (i = safe_strlen(img_report.cfg_path); (i > 0) && (img_report.cfg_path[i] != '/'); i--);",
          "924:      if (i > 0) {",
          "925:       img_report.cfg_path[i] = 0;",
          "926:       fprintf(fd, \"  APPEND %s/\\n\", img_report.cfg_path);",
          "927:       img_report.cfg_path[i] = '/';",
          "928:      }",
          "929:      uprintf(\"Created: %s\", path);",
          "932:    if (fd != NULL)",
          "933:     fclose(fd);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "945:  file_handle = CreateFileU(dest_file, GENERIC_READ | GENERIC_WRITE,",
          "946:   FILE_SHARE_READ, NULL, CREATE_ALWAYS, attributes, NULL);",
          "947:  if (file_handle == INVALID_HANDLE_VALUE) {",
          "949:   goto out;",
          "950:  }",
          "",
          "[Removed Lines]",
          "948:   uprintf(\"  Unable to create file %s: %s\\n\", dest_file, WindowsErrorString());",
          "",
          "[Added Lines]",
          "962:   uprintf(\"  Could not create file %s: %s\", dest_file, WindowsErrorString());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "957:  p_udf_root = udf_get_root(p_udf, true, 0);",
          "958:  if (p_udf_root == NULL) {",
          "960:   goto out;",
          "961:  }",
          "962:  p_udf_file = udf_fopen(p_udf_root, iso_file);",
          "963:  if (!p_udf_file) {",
          "965:   goto out;",
          "966:  }",
          "967:  file_length = udf_get_file_length(p_udf_file);",
          "",
          "[Removed Lines]",
          "959:   uprintf(\"Could not locate UDF root directory\\n\");",
          "964:   uprintf(\"Could not locate file %s in ISO image\\n\", iso_file);",
          "",
          "[Added Lines]",
          "973:   uprintf(\"Could not locate UDF root directory\");",
          "978:   uprintf(\"Could not locate file %s in ISO image\", iso_file);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "969:   memset(buf, 0, UDF_BLOCKSIZE);",
          "970:   read_size = udf_read_block(p_udf_file, buf, 1);",
          "971:   if (read_size < 0) {",
          "973:    goto out;",
          "974:   }",
          "975:   buf_size = (DWORD)MIN(file_length, read_size);",
          "976:   if (!WriteFileWithRetry(file_handle, buf, buf_size, &wr_size, WRITE_RETRIES)) {",
          "978:    goto out;",
          "979:   }",
          "980:   file_length -= read_size;",
          "",
          "[Removed Lines]",
          "972:    uprintf(\"Error reading UDF file %s\\n\", iso_file);",
          "977:    uprintf(\"  Error writing file %s: %s\\n\", dest_file, WindowsErrorString());",
          "",
          "[Added Lines]",
          "986:    uprintf(\"Error reading UDF file %s\", iso_file);",
          "991:    uprintf(\"  Error writing file %s: %s\", dest_file, WindowsErrorString());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "985: try_iso:",
          "986:  p_iso = iso9660_open(iso);",
          "987:  if (p_iso == NULL) {",
          "989:   goto out;",
          "990:  }",
          "992:  p_statbuf = iso9660_ifs_stat_translate(p_iso, iso_file);",
          "993:  if (p_statbuf == NULL) {",
          "995:   goto out;",
          "996:  }",
          "",
          "[Removed Lines]",
          "988:   uprintf(\"Unable to open image '%s'.\\n\", iso);",
          "994:   uprintf(\"Could not get ISO-9660 file information for file %s\\n\", iso_file);",
          "",
          "[Added Lines]",
          "1002:   uprintf(\"Unable to open image '%s'\", iso);",
          "1008:   uprintf(\"Could not get ISO-9660 file information for file %s\", iso_file);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1000:   memset(buf, 0, ISO_BLOCKSIZE);",
          "1001:   lsn = p_statbuf->lsn + (lsn_t)i;",
          "1002:   if (iso9660_iso_seek_read(p_iso, buf, lsn, 1) != ISO_BLOCKSIZE) {",
          "1004:    goto out;",
          "1005:   }",
          "1006:   buf_size = (DWORD)MIN(file_length, ISO_BLOCKSIZE);",
          "1007:   if (!WriteFileWithRetry(file_handle, buf, buf_size, &wr_size, WRITE_RETRIES)) {",
          "1009:    goto out;",
          "1010:   }",
          "1011:   file_length -= ISO_BLOCKSIZE;",
          "",
          "[Removed Lines]",
          "1003:    uprintf(\"  Error reading ISO9660 file %s at LSN %lu\\n\", iso_file, (long unsigned int)lsn);",
          "1008:    uprintf(\"  Error writing file %s: %s\\n\", dest_file, WindowsErrorString());",
          "",
          "[Added Lines]",
          "1017:    uprintf(\"  Error reading ISO9660 file %s at LSN %lu\", iso_file, (long unsigned int)lsn);",
          "1022:    uprintf(\"  Error writing file %s: %s\", dest_file, WindowsErrorString());",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1053:  p_udf_root = udf_get_root(p_udf, true, 0);",
          "1054:  if (p_udf_root == NULL) {",
          "1056:   goto out;",
          "1057:  }",
          "1058:  p_udf_file = udf_fopen(p_udf_root, wim_path);",
          "1059:  if (!p_udf_file) {",
          "1061:   goto out;",
          "1062:  }",
          "1063:  if (udf_read_block(p_udf_file, buf, 1) != UDF_BLOCKSIZE) {",
          "1065:   goto out;",
          "1066:  }",
          "1067:  r = wim_header[3];",
          "",
          "[Removed Lines]",
          "1055:   uprintf(\"Could not locate UDF root directory\\n\");",
          "1060:   uprintf(\"Could not locate file %s in ISO image\\n\", wim_path);",
          "1064:   uprintf(\"Error reading UDF file %s\\n\", wim_path);",
          "",
          "[Added Lines]",
          "1069:   uprintf(\"Could not locate UDF root directory\");",
          "1074:   uprintf(\"Could not locate file %s in ISO image\", wim_path);",
          "1078:   uprintf(\"Error reading UDF file %s\", wim_path);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1070: try_iso:",
          "1071:  p_iso = iso9660_open(iso);",
          "1072:  if (p_iso == NULL) {",
          "1074:   goto out;",
          "1075:  }",
          "1076:  p_statbuf = iso9660_ifs_stat_translate(p_iso, wim_path);",
          "1077:  if (p_statbuf == NULL) {",
          "1079:   goto out;",
          "1080:  }",
          "1081:  if (iso9660_iso_seek_read(p_iso, buf, p_statbuf->lsn, 1) != ISO_BLOCKSIZE) {",
          "1083:   goto out;",
          "1084:  }",
          "1085:  r = wim_header[3];",
          "",
          "[Removed Lines]",
          "1073:   uprintf(\"Unable to open image '%s'.\\n\", iso);",
          "1078:   uprintf(\"Could not get ISO-9660 file information for file %s\\n\", wim_path);",
          "1082:   uprintf(\"Error reading ISO9660 file %s at LSN %lu\\n\", wim_path, (long unsigned int)p_statbuf->lsn);",
          "",
          "[Added Lines]",
          "1087:   uprintf(\"Could not open image '%s'\", iso);",
          "1092:   uprintf(\"Could not get ISO-9660 file information for file %s\", wim_path);",
          "1096:   uprintf(\"Error reading ISO-9660 file %s at LSN %lu\", wim_path, (long unsigned int)p_statbuf->lsn);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1100:  return bswap_uint32(r);",
          "1101: }",
          "1104: PF_TYPE_DECL(WINAPI, DWORD, OpenVirtualDisk, (PVIRTUAL_STORAGE_TYPE, PCWSTR,",
          "1105:  VIRTUAL_DISK_ACCESS_MASK, OPEN_VIRTUAL_DISK_FLAG, POPEN_VIRTUAL_DISK_PARAMETERS, PHANDLE));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1117: #define ISO_NB_BLOCKS 16",
          "1118: typedef struct {",
          "1119:  iso9660_t*      p_iso;",
          "1120:  lsn_t           lsn;",
          "1121:  libfat_sector_t sec_start;",
          "1123:  uint8_t         buf[ISO_BLOCKSIZE * ISO_NB_BLOCKS];",
          "1124: } iso9660_readfat_private;",
          "1130: int iso9660_readfat(intptr_t pp, void *buf, size_t secsize, libfat_sector_t sec)",
          "1131: {",
          "1132:  iso9660_readfat_private* p_private = (iso9660_readfat_private*)pp;",
          "1134:  if (sizeof(p_private->buf) % secsize != 0) {",
          "1135:   uprintf(\"iso9660_readfat: Sector size %d is not a divisor of %d\", secsize, sizeof(p_private->buf));",
          "1136:   return 0;",
          "1137:  }",
          "1139:  if ((sec < p_private->sec_start) || (sec >= p_private->sec_start + sizeof(p_private->buf) / secsize)) {",
          "1141:   p_private->sec_start = (((sec * secsize) / ISO_BLOCKSIZE) * ISO_BLOCKSIZE) / secsize;",
          "1142:   if (iso9660_iso_seek_read(p_private->p_iso, p_private->buf,",
          "1143:    p_private->lsn + (lsn_t)((p_private->sec_start * secsize) / ISO_BLOCKSIZE), ISO_NB_BLOCKS)",
          "1144:    != ISO_NB_BLOCKS * ISO_BLOCKSIZE) {",
          "1145:    uprintf(\"Error reading ISO-9660 file %s at LSN %lu\\n\", img_report.efi_img_path,",
          "1146:     (long unsigned int)(p_private->lsn + (p_private->sec_start * secsize) / ISO_BLOCKSIZE));",
          "1147:    return 0;",
          "1148:   }",
          "1149:  }",
          "1150:  memcpy(buf, &p_private->buf[(sec - p_private->sec_start)*secsize], secsize);",
          "1151:  return (int)secsize;",
          "1152: }",
          "1159: BOOL ExtractEfiImgFiles(const char* dir)",
          "1160: {",
          "1161:  BOOL ret = FALSE;",
          "1162:  HANDLE handle;",
          "1163:  DWORD size, file_size, written;",
          "1164:  iso9660_t* p_iso = NULL;",
          "1165:  iso9660_stat_t* p_statbuf = NULL;",
          "1166:  iso9660_readfat_private* p_private = NULL;",
          "1167:  libfat_sector_t s;",
          "1168:  int32_t dc, c;",
          "1169:  struct libfat_filesystem *fs;",
          "1170:  struct libfat_direntry direntry;",
          "1171:  char name[12] = { 0 };",
          "1172:  char path[64];",
          "1173:  int i, j, k;",
          "1174:  void* buf;",
          "1176:  if ((image_path == NULL) || !HAS_EFI_IMG(img_report))",
          "1177:   return FALSE;",
          "1179:  p_iso = iso9660_open(image_path);",
          "1180:  if (p_iso == NULL) {",
          "1181:   uprintf(\"Could not open image '%s' as an ISO-9660 file system\", image_path);",
          "1182:   goto out;",
          "1183:  }",
          "1184:  p_statbuf = iso9660_ifs_stat_translate(p_iso, img_report.efi_img_path);",
          "1185:  if (p_statbuf == NULL) {",
          "1186:   uprintf(\"Could not get ISO-9660 file information for file %s\\n\", img_report.efi_img_path);",
          "1187:   goto out;",
          "1188:  }",
          "1189:  p_private = malloc(sizeof(iso9660_readfat_private));",
          "1190:  if (p_private == NULL)",
          "1191:   goto out;",
          "1192:  p_private->p_iso = p_iso;",
          "1193:  p_private->lsn = p_statbuf->lsn;",
          "1194:  p_private->sec_start = 0;",
          "1196:  if (iso9660_iso_seek_read(p_private->p_iso, p_private->buf, p_private->lsn, ISO_NB_BLOCKS) != ISO_NB_BLOCKS * ISO_BLOCKSIZE) {",
          "1197:   uprintf(\"Error reading ISO-9660 file %s at LSN %lu\\n\", img_report.efi_img_path, (long unsigned int)p_private->lsn);",
          "1198:   goto out;",
          "1199:  }",
          "1200:  fs = libfat_open(iso9660_readfat, (intptr_t)p_private);",
          "1201:  if (fs == NULL) {",
          "1202:   uprintf(\"FAT access error\");",
          "1203:   goto out;",
          "1204:  }",
          "1207:  if (libfat_searchdir(fs, 0, \"EFI        \", &direntry) < 0)",
          "1208:   goto out;",
          "1209:  dc = direntry.entry[26] + (direntry.entry[27] << 8);",
          "1210:  if (libfat_searchdir(fs, dc, \"BOOT       \", &direntry) < 0)",
          "1211:   goto out;",
          "1212:  dc = direntry.entry[26] + (direntry.entry[27] << 8);",
          "1214:  for (i = 0; i < ARRAYSIZE(efi_bootname); i++) {",
          "1216:   if (strlen(efi_bootname[i]) > 12) {",
          "1217:    uprintf(\"Internal error: FAT 8.3\");",
          "1218:    continue;",
          "1219:   }",
          "1220:   for (j = 0, k = 0; efi_bootname[i][j] != 0; j++) {",
          "1221:    if (efi_bootname[i][j] == '.') {",
          "1222:     while (k < 8)",
          "1223:      name[k++] = ' ';",
          "1224:    } else",
          "1225:     name[k++] = toupper(efi_bootname[i][j]);",
          "1226:   }",
          "1227:   c = libfat_searchdir(fs, dc, name, &direntry);",
          "1228:   if (c > 0) {",
          "1229:    if (dir == NULL) {",
          "1230:     if (!ret)",
          "1231:      uprintf(\"  Detected EFI bootloader(s) (from '%s'):\", img_report.efi_img_path);",
          "1232:     uprintf(\"  \u25cf '%s'\", efi_bootname[i]);",
          "1233:     ret = TRUE;",
          "1234:    } else {",
          "1235:     file_size = direntry.entry[28] + (direntry.entry[29] << 8) + (direntry.entry[30] << 16) +",
          "1236:      (direntry.entry[31] << 24);",
          "1238:     if (file_size > 64 * MB) {",
          "1239:      uprintf(\"Warning: File size is larger than 64 MB => not extracted\");",
          "1240:      continue;",
          "1241:     }",
          "1242:     static_sprintf(path, \"%s\\\\efi\", dir);",
          "1243:     if (!CreateDirectoryA(path, 0) && (GetLastError() != ERROR_ALREADY_EXISTS)) {",
          "1244:      uprintf(\"Could not create directory '%s': %s\\n\", path, WindowsErrorString());",
          "1245:      continue;",
          "1246:     }",
          "1247:     safe_strcat(path, sizeof(path), \"\\\\boot\");",
          "1248:     if (!CreateDirectoryA(path, 0) && (GetLastError() != ERROR_ALREADY_EXISTS)) {",
          "1249:      uprintf(\"Could not create directory '%s': %s\\n\", path, WindowsErrorString());",
          "1250:      continue;",
          "1251:     }",
          "1252:     safe_strcat(path, sizeof(path), \"\\\\\");",
          "1253:     safe_strcat(path, sizeof(path), efi_bootname[i]);",
          "1254:     uprintf(\"Extracting: %s (from '%s', %s)\", path, img_report.efi_img_path,",
          "1255:      SizeToHumanReadable(file_size, FALSE, FALSE));",
          "1256:     handle = CreateFileA(path, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ,",
          "1257:      NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);",
          "1258:     if (handle == INVALID_HANDLE_VALUE) {",
          "1259:      uprintf(\"Unable to create '%s': %s\", path, WindowsErrorString());",
          "1260:      continue;",
          "1261:     }",
          "1263:     written = 0;",
          "1264:     s = libfat_clustertosector(fs, c);",
          "1265:     while ((s != 0) && (s < 0xFFFFFFFFULL) && (written < file_size)) {",
          "1266:      buf = libfat_get_sector(fs, s);",
          "1267:      size = MIN(LIBFAT_SECTOR_SIZE, file_size - written);",
          "1268:      if (!WriteFileWithRetry(handle, buf, size, &size, WRITE_RETRIES) ||",
          "1269:       (size != MIN(LIBFAT_SECTOR_SIZE, file_size - written))) {",
          "1270:       uprintf(\"Error writing '%s': %s\", path, WindowsErrorString());",
          "1271:       CloseHandle(handle);",
          "1272:       continue;",
          "1273:      }",
          "1274:      written += size;",
          "1275:      s = libfat_nextsector(fs, s);",
          "1276:     }",
          "1277:     CloseHandle(handle);",
          "1278:     ret = TRUE;",
          "1279:    }",
          "1280:   }",
          "1281:  }",
          "1283: out:",
          "1284:  if (fs != NULL)",
          "1285:   libfat_close(fs);",
          "1286:  if (p_statbuf != NULL)",
          "1287:   safe_free(p_statbuf->rr.psz_symlink);",
          "1288:  safe_free(p_statbuf);",
          "1289:  safe_free(p_private);",
          "1290:  if (p_iso != NULL)",
          "1291:   iso9660_close(p_iso);",
          "1292:  return ret;",
          "1293: }",
          "",
          "---------------"
        ],
        "src/msapi_utf8.h||src/msapi_utf8.h": [
          "File: src/msapi_utf8.h -> src/msapi_utf8.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:  return ret;",
          "294: }",
          "296: static __inline int DrawTextU(HDC hDC, LPCSTR lpText, int nCount, LPRECT lpRect, UINT uFormat)",
          "297: {",
          "298:  int ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "296: static __inline HMODULE LoadLibraryU(LPCSTR lpFileName)",
          "297: {",
          "298:  HMODULE ret;",
          "299:  DWORD err = ERROR_INVALID_DATA;",
          "300:  wconvert(lpFileName);",
          "301:  ret = LoadLibraryW(wlpFileName);",
          "302:  err = GetLastError();",
          "303:  wfree(lpFileName);",
          "304:  SetLastError(err);",
          "305:  return ret;",
          "306: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1027:  return ret;",
          "1028: }",
          "1039: #ifdef __cplusplus",
          "1040: }",
          "1041: #endif",
          "",
          "[Removed Lines]",
          "1030: static __inline HMODULE LoadLibraryU(LPCSTR lpFileName)",
          "1031: {",
          "1032:  HMODULE h;",
          "1033:  wconvert(lpFileName);",
          "1034:  h = LoadLibraryW(wlpFileName);",
          "1035:  wfree(lpFileName);",
          "1036:  return h;",
          "1037: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/rufus.c||src/rufus.c": [
          "File: src/rufus.c -> src/rufus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "992:  PRINT_ISO_PROP(HAS_REACTOS(img_report), \"  Uses: ReactOS\");",
          "993:  PRINT_ISO_PROP(img_report.has_grub4dos, \"  Uses: Grub4DOS\");",
          "994:  PRINT_ISO_PROP(img_report.has_grub2, \"  Uses: GRUB2\");",
          "996:  PRINT_ISO_PROP(HAS_BOOTMGR(img_report), \"  Uses: Bootmgr\");",
          "997:  PRINT_ISO_PROP(HAS_WINPE(img_report), \"  Uses: WinPE %s\", (img_report.uses_minint) ? \"(with /minint)\" : \"\");",
          "998:  if (HAS_INSTALL_WIM(img_report)) {",
          "",
          "[Removed Lines]",
          "995:  PRINT_ISO_PROP(img_report.has_efi, \"  Uses: EFI %s\", HAS_WIN7_EFI(img_report) ? \"(win7_x64)\" : \"\");",
          "",
          "[Added Lines]",
          "995:  if (img_report.has_efi == 0x80)",
          "996:   uprintf(\"  Uses: EFI (through '%s')\", img_report.efi_img_path);",
          "997:  else",
          "998:   PRINT_ISO_PROP(img_report.has_efi, \"  Uses: EFI %s\", HAS_WIN7_EFI(img_report) ? \"(win7_x64)\" : \"\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2259:  case WM_COMMAND:",
          "2260: #ifdef RUFUS_TEST",
          "2261:   if (LOWORD(wParam) == IDC_TEST) {",
          "2265:    break;",
          "",
          "[Removed Lines]",
          "2262:    uprintf(\"Proceed = %s\", CheckDriveAccess(2000)?\"True\":\"False\");",
          "",
          "[Added Lines]",
          "2265:    ExtractEfiImgFiles(\"C:\\\\rufus\");",
          "",
          "---------------"
        ],
        "src/rufus.h||src/rufus.h": [
          "File: src/rufus.h -> src/rufus.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "261: #define HAS_WINPE(r)        (((r.winpe & WINPE_MININT) == WINPE_MININT)||((r.winpe & WINPE_I386) == WINPE_I386))",
          "262: #define HAS_WINDOWS(r)      (HAS_BOOTMGR(r) || (r.uses_minint) || HAS_WINPE(r))",
          "263: #define HAS_WIN7_EFI(r)     ((r.has_efi == 1) && HAS_INSTALL_WIM(r))",
          "264: #define IS_DD_BOOTABLE(r)   (r.is_bootable_img)",
          "266: #define IS_BIOS_BOOTABLE(r) (HAS_BOOTMGR(r) || HAS_SYSLINUX(r) || HAS_WINPE(r) || HAS_GRUB(r) || HAS_REACTOS(r) || HAS_KOLIBRIOS(r))",
          "267: #define HAS_WINTOGO(r)      (HAS_BOOTMGR(r) && IS_EFI_BOOTABLE(r) && HAS_INSTALL_WIM(r) && (r.install_wim_version < MAX_WIM_VERSION))",
          "268: #define IS_FAT(fs)          ((fs == FS_FAT16) || (fs == FS_FAT32))",
          "",
          "[Removed Lines]",
          "265: #define IS_EFI_BOOTABLE(r)  (r.has_efi)",
          "",
          "[Added Lines]",
          "264: #define HAS_EFI_IMG(r)      (r.efi_img_path[0] != 0)",
          "266: #define IS_EFI_BOOTABLE(r)  (r.has_efi != 0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "440: extern BOOL ExtractDOS(const char* path);",
          "441: extern BOOL ExtractISO(const char* src_iso, const char* dest_dir, BOOL scan);",
          "442: extern int64_t ExtractISOFile(const char* iso, const char* iso_file, const char* dest_file, DWORD attributes);",
          "443: extern char* MountISO(const char* path);",
          "444: extern void UnMountISO(void);",
          "445: extern BOOL InstallSyslinux(DWORD drive_index, char drive_letter, int fs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "445: extern BOOL ExtractEfiImgFiles(const char* dir);",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.16.1173\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.16.1174\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "368: VS_VERSION_INFO VERSIONINFO",
          "371:  FILEFLAGSMASK 0x3fL",
          "372: #ifdef _DEBUG",
          "373:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "369:  FILEVERSION 2,16,1173,0",
          "370:  PRODUCTVERSION 2,16,1173,0",
          "",
          "[Added Lines]",
          "369:  FILEVERSION 2,16,1174,0",
          "370:  PRODUCTVERSION 2,16,1174,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384:         BEGIN",
          "385:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "386:             VALUE \"FileDescription\", \"Rufus\"",
          "388:             VALUE \"InternalName\", \"Rufus\"",
          "389:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "390:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "391:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "392:             VALUE \"ProductName\", \"Rufus\"",
          "394:         END",
          "395:     END",
          "396:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "387:             VALUE \"FileVersion\", \"2.16.1173\"",
          "393:             VALUE \"ProductVersion\", \"2.16.1173\"",
          "",
          "[Added Lines]",
          "387:             VALUE \"FileVersion\", \"2.16.1174\"",
          "393:             VALUE \"ProductVersion\", \"2.16.1174\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f05d5d1e6c4f372e0b0aa52bdd4d137b1b1b961",
      "candidate_info": {
        "commit_hash": "9f05d5d1e6c4f372e0b0aa52bdd4d137b1b1b961",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/9f05d5d1e6c4f372e0b0aa52bdd4d137b1b1b961",
        "files": [
          "res/localization/rufus.loc",
          "src/rufus.rc"
        ],
        "message": "[loc] update Bulgarian translation to latest\n\n* Also remove trailing whitespaces",
        "before_after_code_files": [
          "res/localization/rufus.loc||res/localization/rufus.loc",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "res/localization/rufus.loc||res/localization/rufus.loc": [
          "File: res/localization/rufus.loc -> res/localization/rufus.loc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1486: ######################################################################",
          "1487: l \"bg-BG\" \"Bulgarian (\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438)\" 0x0402",
          "1489: b \"en-US\"",
          "1491: # Main dialog",
          "",
          "[Removed Lines]",
          "1488: v 1.0.20",
          "",
          "[Added Lines]",
          "1488: v 1.0.21",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1964:  \"\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0430 \u0437\u043b\u043e\u043d\u0430\u043c\u0435\u0440\u0435\u043d\u0430 \u0434\u0435\u0439\u043d\u043e\u0441\u0442...\\n\u0421\u0438\u0433\u0443\u0440\u043d\u0438 \u043b\u0438 \u0441\u0442\u0435 \u0447\u0435 \u0438\u0441\u043a\u0430\u0442\u0435 \u0434\u0430 \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430\u0442\u0435 \u0442\u0430\u0437\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0430?",
          "1965: t MSG_286 \"\u041d\u0443\u043b\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e\u0442\u043e: %0.1f%% \u0437\u0430\u0432\u044a\u0440\u0448\u0435\u043d\u043e\"",
          "1966: t MSG_287 \"\u041e\u0442\u043a\u0440\u0438\u0432\u0430\u043d\u0435 \u043d\u0430 \u043f\u0440\u0435\u043d\u043e\u0441\u0438\u043c\u0438 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u043d\u0435 \u0438\u0437\u043f\u043e\u0437\u0432\u0430\u0449\u0438 USB\"",
          "1968: ################################################################################",
          "1969: l \"zh-CN\" \"Chinese Simplified (\u7b80\u4f53\u4e2d\u6587)\" 0x0804, 0x1004",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1967: t MSG_288 \"\u041b\u0438\u043f\u0441\u0432\u0430\u0449\u0438 \u043f\u043e\u0432\u0438\u0448\u0435\u043d\u0438 \u043f\u0440\u0430\u0432\u043e\u043c\u043e\u0449\u0438\u044f\"",
          "1968: t MSG_289 \"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0438 \u0441\u0430\u043c\u043e \u0441 \u043f\u043e\u0432\u0438\u0448\u0435\u043d\u0438 \u043f\u0440\u0430\u0432\u043e\u043c\u043e\u0449\u0438\u044f\"",
          "1969: t MSG_290 \"\u0418\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u0444\u0430\u0439\u043b\"",
          "1970: t MSG_291 \"\u0418\u0437\u0431\u043e\u0440 \u043d\u0430 \u0432\u0435\u0440\u0441\u0438\u044f\"",
          "1971: t MSG_292 \"\u041c\u043e\u043b\u044f \u0438\u0437\u0431\u0435\u0440\u0435\u0442\u0435 \u0432\u0435\u0440\u0441\u0438\u044f\u0442\u0430 \u043d\u0430 Windows \u043a\u043e\u044f\u0442\u043e \u0436\u0435\u043b\u0430\u0435\u0442\u0435 \u0434\u0430 \u0438\u043d\u0441\u0442\u0430\u043b\u0438\u0440\u0430\u0442\u0435:\"",
          "1972: t MSG_293 \"\u041d\u0435\u043f\u043e\u0434\u044a\u0440\u0436\u0430\u043d\u0430 \u0432\u0435\u0440\u0441\u0438\u044f \u043d\u0430 Windows\"",
          "1973: t MSG_294 \"\u0422\u0430\u0437\u0438 \u0432\u0435\u0440\u0441\u0438\u044f \u043d\u0430 Windows \u0432\u0435\u0447\u0435 \u043d\u0435 \u0441\u0435 \u043f\u043e\u0434\u044a\u0440\u0436\u0430 \u043e\u0442 Rufus\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3265: t MSG_285 \"Preuzeta aplikacija je potpisana od strane \u2018%s\u2019.\\nOvo nije prepoznatljiv izvor \"",
          "3266:  \"i mo\u017ee biti zlonamjeran...\\n\u017delite li svejedno pokrenuti program?\"",
          "3267: t MSG_286 \"\u010ci\u0161\u0107enje ure\u0111aja: %0.1f%% zavr\u0161eno\"",
          "3270: ################################################################################",
          "3271: l \"cs-CZ\" \"Czech (\u010ce\u0161tina)\" 0x0405",
          "",
          "[Removed Lines]",
          "3268: t MSG_287 \"Prikazivanje ostalih uklonjivih medija\"",
          "",
          "[Added Lines]",
          "3275: t MSG_287 \"Prikazivanje ostalih uklonjivih medija\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "10149: t MSG_285 \"Atsi\u0173st\u0105 vykdom\u0105j\u012f fail\u0105 pasira\u0161\u0117 '%s'.\\n\u0160io para\u0161o mes neatpa\u017e\u012fstame ir tai gali \"",
          "10150:  \"b\u016bti tam tikros kenk\u0117ji\u0161kos veiklos po\u017eymis...\\nAr j\u016bs tikrai norite vykdyti \u0161\u012f fail\u0105?\"",
          "10151: t MSG_286 \"Nulinamas diskas: %0.1f%% baigta\"",
          "10154: ################################################################################",
          "10155: l \"ms-MY\" \"Malay (Bahasa Malaysia)\" 0x043e, 0x083e",
          "",
          "[Removed Lines]",
          "10152: t MSG_287 \"Ne USB kei\u010diam\u0173 disk\u0173 aptikimas\"",
          "",
          "[Added Lines]",
          "10159: t MSG_287 \"Ne USB kei\u010diam\u0173 disk\u0173 aptikimas\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "11112: t MSG_291 \"Versjons valg\"",
          "11113: t MSG_292 \"Vennligst velg den versjonen av Windows du \u00f8nsker \u00e5 installere:\"",
          "11114: t MSG_293 \"Ikke st\u00f8ttet Windows versjon\"",
          "11117: ################################################################################",
          "11118: l \"fa-IR\" \"Persian (\u0641\u0627\u0631\u0633\u06cc)\" 0x0429",
          "",
          "[Removed Lines]",
          "11115: t MSG_294 \"Denne versjonen av Windows er ikke st\u00f8ttet av Rufus lengre.\"",
          "",
          "[Added Lines]",
          "11122: t MSG_294 \"Denne versjonen av Windows er ikke st\u00f8ttet av Rufus lengre.\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "13474: t MSG_284 \"Executabilul desc\u0103rcat nu este semnat.\"",
          "13475: t MSG_285 \"Executabilul desc\u0103rcat este semnat de c\u0103tre '%s'.\\nAceasta nu este o semn\u0103tur\u0103 recunoscut\u0103 \u0219i ar putea \"",
          "13476:  \"indica o anumit\u0103 form\u0103 de activitate d\u0103un\u0103toare...\\nSunte\u021bi sigur c\u0103 dori\u021bi s\u0103 executa\u021bi acest fi\u0219ier?\"",
          "13478: t MSG_287 \"Detectarea unit\u0103\u021bilor mobile de baz\u0103 non-USB\"",
          "13479: t MSG_288 \"Lips\u0103 privilegii ridicate\"",
          "13480: t MSG_289 \"Aceast\u0103 aplica\u021bie ruleaz\u0103 numai cu privilegii ridicate\"",
          "",
          "[Removed Lines]",
          "13477: t MSG_286 \"Unitatea zero: %0.1f%% finisat\"",
          "",
          "[Added Lines]",
          "13484: t MSG_286 \"Unitatea zero: %0.1f%% finisat\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "14850: t MSG_285 \"Stiahnut\u00fd in\u0161tal\u00e1tor podp\u00edsal '%s'.\\nTento podpis nebol rozoznan\u00fd a m\u00f4\u017ee znamena\u0165 \"",
          "14851:  \"nejak\u00fa formu \u0161kodlivej aktivity...\\nSte si ist\u00fd, \u017ee chcete spusti\u0165 tento s\u00fabor?\"",
          "14852: t MSG_286 \"Vymaz\u00e1vanie zariadenia: %0.1f%% dokon\u010den\u00fdch\"",
          "14854: t MSG_288 \"Ch\u00fdbaj\u00face opr\u00e1vnenia\"",
          "14855: t MSG_289 \"Tento program je mo\u017en\u00e9 spusti\u0165 len s pr\u00e1vami spr\u00e1vcu\"",
          "14856: t MSG_290 \"Indexovanie s\u00faborov\"",
          "14857: t MSG_291 \"V\u00fdber verzie\"",
          "14858: t MSG_292 \"Vyberte verziu syst\u00e9mu Windows, ktor\u00fa chcete nain\u0161talova\u0165:\"",
          "14859: t MSG_293 \"Nepodporovan\u00e1 veria syst\u00e9mu Windows\"",
          "14862: ################################################################################",
          "14863: l \"sl-SI\" \"Slovenian (Sloven\u0161\u010dina)\" 0x0424",
          "",
          "[Removed Lines]",
          "14853: t MSG_287 \"Zis\u0165ovanie nie-USB vymenite\u013en\u00fdch zariaden\u00ed\"",
          "14860: t MSG_294 \"T\u00e1to verzia syst\u00e9mu Windows u\u017e nie je podporovan\u00e1 programom Rufus.\"",
          "",
          "[Added Lines]",
          "14860: t MSG_287 \"Zis\u0165ovanie nie-USB vymenite\u013en\u00fdch zariaden\u00ed\"",
          "14867: t MSG_294 \"T\u00e1to verzia syst\u00e9mu Windows u\u017e nie je podporovan\u00e1 programom Rufus.\"",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.12.1042\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.12.1043\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336: VS_VERSION_INFO VERSIONINFO",
          "339:  FILEFLAGSMASK 0x3fL",
          "340: #ifdef _DEBUG",
          "341:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "337:  FILEVERSION 2,12,1042,0",
          "338:  PRODUCTVERSION 2,12,1042,0",
          "",
          "[Added Lines]",
          "337:  FILEVERSION 2,12,1043,0",
          "338:  PRODUCTVERSION 2,12,1043,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:         BEGIN",
          "353:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "354:             VALUE \"FileDescription\", \"Rufus\"",
          "356:             VALUE \"InternalName\", \"Rufus\"",
          "357:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "358:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "359:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "360:             VALUE \"ProductName\", \"Rufus\"",
          "362:         END",
          "363:     END",
          "364:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "355:             VALUE \"FileVersion\", \"2.12.1042\"",
          "361:             VALUE \"ProductVersion\", \"2.12.1042\"",
          "",
          "[Added Lines]",
          "355:             VALUE \"FileVersion\", \"2.12.1043\"",
          "361:             VALUE \"ProductVersion\", \"2.12.1043\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}