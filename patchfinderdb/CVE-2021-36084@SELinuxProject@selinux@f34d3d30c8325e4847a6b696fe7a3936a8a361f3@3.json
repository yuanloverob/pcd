{
  "cve_id": "CVE-2021-36084",
  "cve_desc": "The CIL compiler in SELinux 3.2 has a use-after-free in __cil_verify_classperms (called from __cil_verify_classpermission and __cil_pre_verify_helper).",
  "repo": "SELinuxProject/selinux",
  "patch_hash": "f34d3d30c8325e4847a6b696fe7a3936a8a361f3",
  "patch_info": {
    "commit_hash": "f34d3d30c8325e4847a6b696fe7a3936a8a361f3",
    "repo": "SELinuxProject/selinux",
    "commit_url": "https://github.com/SELinuxProject/selinux/commit/f34d3d30c8325e4847a6b696fe7a3936a8a361f3",
    "files": [
      "libsepol/cil/src/cil_reset_ast.c"
    ],
    "message": "libsepol/cil: Destroy classperms list when resetting classpermission\n\nNicolas Iooss reports:\n  A few months ago, OSS-Fuzz found a crash in the CIL compiler, which\n  got reported as\n  https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=28648 (the title\n  is misleading, or is caused by another issue that conflicts with the\n  one I report in this message). Here is a minimized CIL policy which\n  reproduces the issue:\n\n  (class CLASS (PERM))\n  (classorder (CLASS))\n  (sid SID)\n  (sidorder (SID))\n  (user USER)\n  (role ROLE)\n  (type TYPE)\n  (category CAT)\n  (categoryorder (CAT))\n  (sensitivity SENS)\n  (sensitivityorder (SENS))\n  (sensitivitycategory SENS (CAT))\n  (allow TYPE self (CLASS (PERM)))\n  (roletype ROLE TYPE)\n  (userrole USER ROLE)\n  (userlevel USER (SENS))\n  (userrange USER ((SENS)(SENS (CAT))))\n  (sidcontext SID (USER ROLE TYPE ((SENS)(SENS))))\n\n  (classpermission CLAPERM)\n\n  (optional OPT\n      (roletype nonexistingrole nonexistingtype)\n      (classpermissionset CLAPERM (CLASS (PERM)))\n  )\n\n  The CIL policy fuzzer (which mimics secilc built with clang Address\n  Sanitizer) reports:\n\n  ==36541==ERROR: AddressSanitizer: heap-use-after-free on address\n  0x603000004f98 at pc 0x56445134c842 bp 0x7ffe2a256590 sp\n  0x7ffe2a256588\n  READ of size 8 at 0x603000004f98 thread T0\n      #0 0x56445134c841 in __cil_verify_classperms\n  /selinux/libsepol/src/../cil/src/cil_verify.c:1620:8\n      #1 0x56445134a43e in __cil_verify_classpermission\n  /selinux/libsepol/src/../cil/src/cil_verify.c:1650:9\n      #2 0x56445134a43e in __cil_pre_verify_helper\n  /selinux/libsepol/src/../cil/src/cil_verify.c:1715:8\n      #3 0x5644513225ac in cil_tree_walk_core\n  /selinux/libsepol/src/../cil/src/cil_tree.c:272:9\n      #4 0x564451322ab1 in cil_tree_walk\n  /selinux/libsepol/src/../cil/src/cil_tree.c:316:7\n      #5 0x5644513226af in cil_tree_walk_core\n  /selinux/libsepol/src/../cil/src/cil_tree.c:284:9\n      #6 0x564451322ab1 in cil_tree_walk\n  /selinux/libsepol/src/../cil/src/cil_tree.c:316:7\n      #7 0x5644512b88fd in cil_pre_verify\n  /selinux/libsepol/src/../cil/src/cil_post.c:2510:7\n      #8 0x5644512b88fd in cil_post_process\n  /selinux/libsepol/src/../cil/src/cil_post.c:2524:7\n      #9 0x5644511856ff in cil_compile\n  /selinux/libsepol/src/../cil/src/cil.c:564:7\n\nThe classperms list of a classpermission rule is created and filled\nin when classpermissionset rules are processed, so it doesn't own any\npart of the list and shouldn't retain any of it when it is reset.\n\nDestroy the classperms list (without destroying the data in it)  when\nresetting a classpermission rule.\n\nReported-by: Nicolas Iooss <nicolas.iooss@m4x.org>\nSigned-off-by: James Carter <jwcart2@gmail.com>",
    "before_after_code_files": [
      "libsepol/cil/src/cil_reset_ast.c||libsepol/cil/src/cil_reset_ast.c"
    ]
  },
  "patch_diff": {
    "libsepol/cil/src/cil_reset_ast.c||libsepol/cil/src/cil_reset_ast.c": [
      "File: libsepol/cil/src/cil_reset_ast.c -> libsepol/cil/src/cil_reset_ast.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:   return;",
      "55:  }",
      "58: }",
      "60: static void cil_reset_classperms_set(struct cil_classperms_set *cp_set)",
      "",
      "[Removed Lines]",
      "57:  cil_reset_classperms_list(cp->classperms);",
      "",
      "[Added Lines]",
      "57:  cil_list_destroy(&cp->classperms, CIL_FALSE);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a0a342c37bc8562320ac13f1aa04e8a25e883fea",
      "candidate_info": {
        "commit_hash": "a0a342c37bc8562320ac13f1aa04e8a25e883fea",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/a0a342c37bc8562320ac13f1aa04e8a25e883fea",
        "files": [
          "checkpolicy/policy_define.c"
        ],
        "message": "checkpolicy: free extended permission memory\n\ndefine_te_avtab_xperms_helper() allocates memory for the avrule, while\ndefine_te_avtab_ioctl() does not transfer any ownership of it.\nFree the affected memory.\n\n    Direct leak of 272 byte(s) in 2 object(s) allocated from:\n        #0 0x49bb8d in __interceptor_malloc (./checkpolicy/checkmodule+0x49bb8d)\n        #1 0x4f379c in define_te_avtab_xperms_helper ./checkpolicy/policy_define.c:2047:24\n        #2 0x4f379c in define_te_avtab_extended_perms ./checkpolicy/policy_define.c:2469:6\n        #3 0x4cf417 in yyparse ./checkpolicy/policy_parse.y:494:30\n        #4 0x4eaf35 in read_source_policy ./checkpolicy/parse_util.c:63:6\n        #5 0x50cccd in main ./checkpolicy/checkmodule.c:278:7\n        #6 0x7fbfa455ce49 in __libc_start_main csu/../csu/libc-start.c:314:16\n\n    Direct leak of 32 byte(s) in 2 object(s) allocated from:\n        #0 0x49bb8d in __interceptor_malloc (./checkpolicy/checkmodule+0x49bb8d)\n        #1 0x4f4a38 in avrule_sort_ioctls ./checkpolicy/policy_define.c:1844:12\n        #2 0x4f4a38 in avrule_ioctl_ranges ./checkpolicy/policy_define.c:2021:6\n        #3 0x4f4a38 in define_te_avtab_ioctl ./checkpolicy/policy_define.c:2399:6\n        #4 0x4f4a38 in define_te_avtab_extended_perms ./checkpolicy/policy_define.c:2475:7\n        #5 0x4cf417 in yyparse ./checkpolicy/policy_parse.y:494:30\n        #6 0x4eaf35 in read_source_policy ./checkpolicy/parse_util.c:63:6\n        #7 0x50cccd in main ./checkpolicy/checkmodule.c:278:7\n        #8 0x7fbfa455ce49 in __libc_start_main csu/../csu/libc-start.c:314:16\n\nReported-by: liwugang <liwugang@163.com>\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "checkpolicy/policy_define.c||checkpolicy/policy_define.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "checkpolicy/policy_define.c||checkpolicy/policy_define.c": [
          "File: checkpolicy/policy_define.c -> checkpolicy/policy_define.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2390: static int define_te_avtab_ioctl(const avrule_t *avrule_template)",
          "2391: {",
          "2392:  avrule_t *avrule;",
          "2394:  av_extended_perms_t *complete_driver, *partial_driver, *xperms;",
          "2395:  unsigned int i;",
          "",
          "[Removed Lines]",
          "2393:  struct av_ioctl_range_list *rangelist;",
          "",
          "[Added Lines]",
          "2393:  struct av_ioctl_range_list *rangelist, *r;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2448:  if (partial_driver)",
          "2449:   free(partial_driver);",
          "2451:  return 0;",
          "2452: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2451:  while (rangelist != NULL) {",
          "2452:   r = rangelist;",
          "2453:   rangelist = rangelist->next;",
          "2454:   free(r);",
          "2455:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2456:  char *id;",
          "2457:  unsigned int i;",
          "2458:  avrule_t *avrule_template;",
          "2460:  if (pass == 1) {",
          "2461:   for (i = 0; i < 4; i++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2465:  int rc = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2472:  id = queue_remove(id_queue);",
          "2473:  if (strcmp(id,\"ioctl\") == 0) {",
          "2477:  } else {",
          "2478:   yyerror(\"only ioctl extended permissions are supported\");",
          "2481:  }",
          "2483: }",
          "2485: static int define_te_avtab_helper(int which, avrule_t ** rule)",
          "",
          "[Removed Lines]",
          "2474:   free(id);",
          "2475:   if (define_te_avtab_ioctl(avrule_template))",
          "2476:    return -1;",
          "2479:   free(id);",
          "2480:   return -1;",
          "2482:  return 0;",
          "",
          "[Added Lines]",
          "2481:   rc = define_te_avtab_ioctl(avrule_template);",
          "2484:   rc = -1;",
          "2487:  free(id);",
          "2488:  avrule_destroy(avrule_template);",
          "2489:  free(avrule_template);",
          "2491:  return rc;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8565e2c5c85aef216ef6e2b997ce1ba0e5ec1854",
      "candidate_info": {
        "commit_hash": "8565e2c5c85aef216ef6e2b997ce1ba0e5ec1854",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/8565e2c5c85aef216ef6e2b997ce1ba0e5ec1854",
        "files": [
          "libsepol/src/policydb.c"
        ],
        "message": "libsepol: zero member before potential dereference\n\nThe `next` member might be checked against NULL and dereferenced before\nit gets assigned, due to jumps from failure gotos to the cleanup\nsection.\n\n    ==31017==ERROR: AddressSanitizer: SEGV on unknown address (pc 0x000000579654 bp 0x7ffd3a07d110 sp 0x7ffd3a07d000 T0)\n    ==31017==The signal is caused by a READ memory access.\n    ==31017==Hint: this fault was caused by a dereference of a high value address (see register values below).  Disassemble the provided pc to learn which register was used.\n        #0 0x579654 in filename_trans_read_one ./libsepol/src/policydb.c:2874:55\n        #1 0x579654 in filename_trans_read ./libsepol/src/policydb.c:2902:9\n        #2 0x5771b7 in policydb_read ./libsepol/src/policydb.c:4509:7\n        #3 0x55a1f5 in LLVMFuzzerTestOneInput ./libsepol/fuzz/binpolicy-fuzzer.c:24:6\n        #4 0x45aed3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) fuzzer.o\n        #5 0x446a12 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) fuzzer.o\n        #6 0x44c93b in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) fuzzer.o\n        #7 0x475dd2 in main (./out/binpolicy-fuzzer+0x475dd2)\n        #8 0x7f2a4e7f97ec in __libc_start_main csu/../csu/libc-start.c:332:16\n        #9 0x423689 in _start (./out/binpolicy-fuzzer+0x423689)\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "libsepol/src/policydb.c||libsepol/src/policydb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/src/policydb.c||libsepol/src/policydb.c": [
          "File: libsepol/src/policydb.c -> libsepol/src/policydb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2780:   if (!datum)",
          "2781:    goto err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2783:   datum->next = NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c12b7d907a4e5865a9e8ed1d30536f9760254c94",
      "candidate_info": {
        "commit_hash": "c12b7d907a4e5865a9e8ed1d30536f9760254c94",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/c12b7d907a4e5865a9e8ed1d30536f9760254c94",
        "files": [
          "libsepol/src/kernel_to_common.c"
        ],
        "message": "libsepol: do not underflow on short format arguments\n\nHandle format arguments that do not have a size of at least 2.\n\n    kernel_to_common.c:69:20: runtime error: unsigned integer overflow: 1 - 2 cannot be represented in type 'unsigned long'\n        #0 0x557b0b in create_str_helper ./libsepol/src/kernel_to_common.c:69:20\n        #1 0x5577b8 in create_str ./libsepol/src/kernel_to_common.c:99:8\n        #2 0x56448c in cond_expr_to_str ./libsepol/src/kernel_to_conf.c:82:15\n        #3 0x56448c in write_cond_nodes_to_conf ./libsepol/src/kernel_to_conf.c:2103:10\n        #4 0x55bd9b in sepol_kernel_policydb_to_conf ./libsepol/src/kernel_to_conf.c:3171:7\n        #5 0x4f9d79 in main ./checkpolicy/checkpolicy.c:684:11\n        #6 0x7fe2a342b7ec in __libc_start_main csu/../csu/libc-start.c:332:16\n        #7 0x41f3a9 in _start (./checkpolicy/checkpolicy+0x41f3a9)\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "libsepol/src/kernel_to_common.c||libsepol/src/kernel_to_common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/src/kernel_to_common.c||libsepol/src/kernel_to_common.c": [
          "File: libsepol/src/kernel_to_common.c -> libsepol/src/kernel_to_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:  va_list vargs2;",
          "58:  char *str = NULL;",
          "59:  char *s;",
          "61:  int i, rc;",
          "63:  va_copy(vargs2, vargs);",
          "",
          "[Removed Lines]",
          "60:  size_t len;",
          "",
          "[Added Lines]",
          "60:  size_t len, s_len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:  for (i=0; i<num; i++) {",
          "68:   s = va_arg(vargs, char *);",
          "70:  }",
          "72:  str = malloc(len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:   s_len = strlen(s);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0d98f83d28a0cdf437b4cafe229e27cb91eb493",
      "candidate_info": {
        "commit_hash": "f0d98f83d28a0cdf437b4cafe229e27cb91eb493",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/f0d98f83d28a0cdf437b4cafe229e27cb91eb493",
        "files": [
          "libsepol/cil/src/cil_reset_ast.c"
        ],
        "message": "libsepol/cil: Fix heap-use-after-free in __class_reset_perm_values()\n\nNicolas Iooss reports:\n  A few weeks ago, OSS-Fuzz got configured in order to fuzz the CIL\n  policy compiler (cf.\n  https://github.com/SELinuxProject/selinux/issues/215 and\n  https://github.com/google/oss-fuzz/pull/4790). It reported a bunch of\n  simple issues, for which I will submit patches. There are also more\n  subtle bugs, like the one triggered by this CIL policy:\n\n  (class CLASS (PERM))\n  (classorder (CLASS))\n  (sid SID)\n  (sidorder (SID))\n  (sensitivity SENS)\n  (sensitivityorder (SENS))\n  (type TYPE)\n  (allow TYPE self (CLASS (PERM)))\n\n  (block b\n      (optional o\n          (sensitivitycategory SENS (C)) ; Non-existing category\n  triggers disabling the optional\n          (common COMMON (PERM1))\n          (classcommon CLASS COMMON)\n          (allow TYPE self (CLASS (PERM1)))\n      )\n  )\n\n  On my computer, secilc manages to build this policy fine, but when\n  clang's Address Sanitizer is enabled, running secilc leads to the\n  following report:\n\n  $ make -C libsepol/src CC=clang CFLAGS='-g -fsanitize=address' libsepol.a\n  $ clang -g -fsanitize=address secilc/secilc.c libsepol/src/libsepol.a\n  -o my_secilc\n  $ ./my_secilc -vv testcase.cil\n  Parsing testcase.cil\n  Building AST from Parse Tree\n  Destroying Parse Tree\n  Resolving AST\n  Failed to resolve sensitivitycategory statement at testcase.cil:12\n  Disabling optional 'o' at testcase.cil:11\n  Resetting declarations\n  =================================================================\n  ==181743==ERROR: AddressSanitizer: heap-use-after-free on address\n  0x6070000000c0 at pc 0x55ff7e445d24 bp 0x7ffe7eecfba0 sp\n  0x7ffe7eecfb98\n  READ of size 4 at 0x6070000000c0 thread T0\n      #0 0x55ff7e445d23 in __class_reset_perm_values\n  /git/selinux-userspace/libsepol/src/../cil/src/cil_reset_ast.c:17:17\n\nThe problem is that the optional branch is destroyed when it is disabled,\nso the common has already been destroyed when the reset code tries to\naccess the number of common permissions, so that it can change the\nvalue of the class permissions back to their original values.\n\nThe solution is to count the number of class permissions and then\ncalculate the number of common permissions.\n\nReported-by: Nicolas Iooss <nicolas.iooss@m4x.org>\nSigned-off-by: James Carter <jwcart2@gmail.com>",
        "before_after_code_files": [
          "libsepol/cil/src/cil_reset_ast.c||libsepol/cil/src/cil_reset_ast.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "libsepol/cil/src/cil_reset_ast.c||libsepol/cil/src/cil_reset_ast.c"
          ],
          "candidate": [
            "libsepol/cil/src/cil_reset_ast.c||libsepol/cil/src/cil_reset_ast.c"
          ]
        }
      },
      "candidate_diff": {
        "libsepol/cil/src/cil_reset_ast.c||libsepol/cil/src/cil_reset_ast.c": [
          "File: libsepol/cil/src/cil_reset_ast.c -> libsepol/cil/src/cil_reset_ast.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: static void cil_reset_class(struct cil_class *class)",
          "23: {",
          "24:  if (class->common != NULL) {",
          "31:  }",
          "32:  class->ordered = CIL_FALSE;",
          "",
          "[Removed Lines]",
          "25:   struct cil_class *common = class->common;",
          "26:   cil_symtab_map(&class->perms, __class_reset_perm_values, &common->num_perms);",
          "29:   class->num_perms -= common->num_perms;",
          "",
          "[Added Lines]",
          "26:   int num_common_perms = class->num_perms - class->perms.nprim;",
          "27:   cil_symtab_map(&class->perms, __class_reset_perm_values, &num_common_perms);",
          "30:   class->num_perms = class->perms.nprim;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f816232457aaa226873b4f077b7063a6b0e50b7",
      "candidate_info": {
        "commit_hash": "5f816232457aaa226873b4f077b7063a6b0e50b7",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/5f816232457aaa226873b4f077b7063a6b0e50b7",
        "files": [
          "libsepol/src/policydb_validate.c"
        ],
        "message": "libsepol: validate type of avtab type rules\n\n    ==80903==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6020000005c0 at pc 0x0000005696c8 bp 0x7ffdb11ea560 sp 0x7ffdb11ea558\n    READ of size 8 at 0x6020000005c0 thread T0\n        #0 0x5696c7 in avtab_node_to_str ./libsepol/src/kernel_to_conf.c:1736:9\n        #1 0x569013 in map_avtab_write_helper ./libsepol/src/kernel_to_conf.c:1767:10\n        #2 0x5ab837 in avtab_map ./libsepol/src/avtab.c:347:10\n        #3 0x561f9a in write_avtab_flavor_to_conf ./libsepol/src/kernel_to_conf.c:1798:7\n        #4 0x561f9a in write_avtab_to_conf ./libsepol/src/kernel_to_conf.c:1819:8\n        #5 0x55afba in sepol_kernel_policydb_to_conf ./libsepol/src/kernel_to_conf.c:3159:7\n        #6 0x55a34f in LLVMFuzzerTestOneInput ./libsepol/fuzz/binpolicy-fuzzer.c:38:9\n        #7 0x45aed3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) fuzzer.o\n        #8 0x446a12 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) fuzzer.o\n        #9 0x44c93b in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) fuzzer.o\n        #10 0x475dd2 in main (./out/binpolicy-fuzzer+0x475dd2)\n        #11 0x7f97a83fd7ec in __libc_start_main csu/../csu/libc-start.c:332:16\n        #12 0x423689 in _start (./out/binpolicy-fuzzer+0x423689)\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "libsepol/src/policydb_validate.c||libsepol/src/policydb_validate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/src/policydb_validate.c||libsepol/src/policydb_validate.c": [
          "File: libsepol/src/policydb_validate.c -> libsepol/src/policydb_validate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "547:  return -1;",
          "548: }",
          "551: {",
          "552:  validate_t *flavors = (validate_t *)args;",
          "554: }",
          "556: static int validate_avtab(sepol_handle_t *handle, avtab_t *avtab, validate_t flavors[])",
          "557: {",
          "559:   ERR(handle, \"Invalid avtab\");",
          "560:   return -1;",
          "561:  }",
          "",
          "[Removed Lines]",
          "550: static int validate_avtab_key_wrapper(avtab_key_t *k,  __attribute__ ((unused)) avtab_datum_t *d, void *args)",
          "553:  return validate_avtab_key(k, flavors);",
          "558:  if (avtab_map(avtab, validate_avtab_key_wrapper, flavors)) {",
          "",
          "[Added Lines]",
          "550: static int validate_avtab_key_and_datum(avtab_key_t *k, avtab_datum_t *d, void *args)",
          "554:  if (validate_avtab_key(k, flavors))",
          "555:   return -1;",
          "557:  if ((k->specified & AVTAB_TYPE) && validate_value(d->data, &flavors[SYM_TYPES]))",
          "558:   return -1;",
          "560:  return 0;",
          "565:  if (avtab_map(avtab, validate_avtab_key_and_datum, flavors)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}