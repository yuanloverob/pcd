{
  "cve_id": "CVE-2013-0178",
  "cve_desc": "Insecure temporary file vulnerability in Redis before 2.6 related to /tmp/redis-%p.vm.",
  "repo": "antirez/redis",
  "patch_hash": "697af434fbeb2e3ba2ba9687cd283ed1a2734fa5",
  "patch_info": {
    "commit_hash": "697af434fbeb2e3ba2ba9687cd283ed1a2734fa5",
    "repo": "antirez/redis",
    "commit_url": "https://github.com/antirez/redis/commit/697af434fbeb2e3ba2ba9687cd283ed1a2734fa5",
    "files": [
      "src/diskstore.c",
      "src/networking.c",
      "src/redis.c",
      "src/redis.h"
    ],
    "message": "initial changes needed to turn the current VM code into a cache system. Tons of work to do still.",
    "before_after_code_files": [
      "src/diskstore.c||src/diskstore.c",
      "src/networking.c||src/networking.c",
      "src/redis.c||src/redis.c",
      "src/redis.h||src/redis.h"
    ]
  },
  "patch_diff": {
    "src/diskstore.c||src/diskstore.c": [
      "File: src/diskstore.c -> src/diskstore.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "68: int dsOpen(void) {",
      "69:     struct stat sb;",
      "70:     int retval;",
      "73:     if ((retval = stat(path,&sb) == -1) && errno != ENOENT) {",
      "74:         redisLog(REDIS_WARNING, \"Error opening disk store at %s: %s\",",
      "",
      "[Removed Lines]",
      "71:     char *path = server.diskstore_path;",
      "",
      "[Added Lines]",
      "80:     char *path = server.ds_path;",
      "",
      "---------------"
    ],
    "src/networking.c||src/networking.c": [
      "File: src/networking.c -> src/networking.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "168: void addReply(redisClient *c, robj *obj) {",
      "169:     if (_installWriteEvent(c) != REDIS_OK) return;",
      "",
      "[Removed Lines]",
      "170:     redisAssert(!server.vm_enabled || obj->storage == REDIS_VM_MEMORY);",
      "",
      "[Added Lines]",
      "170:     redisAssert(!server.ds_enabled || obj->storage == REDIS_VM_MEMORY);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "462:     if (c->flags & REDIS_IO_WAIT) {",
      "464:         if (listLength(c->io_keys) == 0) {",
      "465:             ln = listSearchKey(server.io_ready_clients,c);",
      "",
      "[Removed Lines]",
      "463:         redisAssert(server.vm_enabled);",
      "",
      "[Added Lines]",
      "463:         redisAssert(server.ds_enabled);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "474:                 dontWaitForSwappedKey(c,ln->value);",
      "475:             }",
      "476:         }",
      "478:     }",
      "479:     listRelease(c->io_keys);",
      "",
      "[Removed Lines]",
      "477:         server.vm_blocked_clients--;",
      "",
      "[Added Lines]",
      "477:         server.cache_blocked_clients--;",
      "",
      "---------------"
    ],
    "src/redis.c||src/redis.c": [
      "File: src/redis.c -> src/redis.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "619:     if (server.masterhost == NULL) activeExpireCycle();",
      "642:     }",
      "",
      "[Removed Lines]",
      "623:     if (vmCanSwapOut()) {",
      "624:         while (server.vm_enabled && zmalloc_used_memory() >",
      "625:                 server.vm_max_memory)",
      "626:         {",
      "627:             int retval = (server.vm_max_threads == 0) ?",
      "628:                         vmSwapOneObjectBlocking() :",
      "629:                         vmSwapOneObjectThreaded();",
      "630:             if (retval == REDIS_ERR && !(loops % 300) &&",
      "631:                 zmalloc_used_memory() >",
      "632:                 (server.vm_max_memory+server.vm_max_memory/10))",
      "633:             {",
      "634:                 redisLog(REDIS_WARNING,\"WARNING: vm-max-memory limit exceeded by more than 10%% but unable to swap more objects out!\");",
      "635:             }",
      "640:             if (retval == REDIS_ERR || server.vm_max_threads > 0) break;",
      "641:         }",
      "",
      "[Added Lines]",
      "623:     while (server.ds_enabled && zmalloc_used_memory() >",
      "624:             server.cache_max_memory)",
      "625:     {",
      "626:         cacheFreeOneEntry();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "656:     listNode *ln;",
      "657:     redisClient *c;",
      "661:         listIter li;",
      "663:         listRewind(server.io_ready_clients,&li);",
      "",
      "[Removed Lines]",
      "660:     if (server.vm_enabled && listLength(server.io_ready_clients)) {",
      "",
      "[Added Lines]",
      "645:     if (server.ds_enabled && listLength(server.io_ready_clients)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "669:             listDelNode(server.io_ready_clients,ln);",
      "670:             c->flags &= (~REDIS_IO_WAIT);",
      "672:             aeCreateFileEvent(server.el, c->fd, AE_READABLE,",
      "673:                 readQueryFromClient, c);",
      "674:             cmd = lookupCommand(c->argv[0]->ptr);",
      "",
      "[Removed Lines]",
      "671:             server.vm_blocked_clients--;",
      "",
      "[Added Lines]",
      "656:             server.cache_blocked_clients--;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "787:     server.maxmemory = 0;",
      "788:     server.maxmemory_policy = REDIS_MAXMEMORY_VOLATILE_LRU;",
      "789:     server.maxmemory_samples = 3;",
      "797:     server.hash_max_zipmap_entries = REDIS_HASH_MAX_ZIPMAP_ENTRIES;",
      "798:     server.hash_max_zipmap_value = REDIS_HASH_MAX_ZIPMAP_VALUE;",
      "799:     server.list_max_ziplist_entries = REDIS_LIST_MAX_ZIPLIST_ENTRIES;",
      "",
      "[Removed Lines]",
      "790:     server.vm_enabled = 0;",
      "791:     server.vm_swap_file = zstrdup(\"/tmp/redis-%p.vm\");",
      "795:     server.vm_max_threads = 4;",
      "796:     server.vm_blocked_clients = 0;",
      "",
      "[Added Lines]",
      "775:     server.ds_enabled = 0;",
      "776:     server.ds_path = zstrdup(\"/tmp/redis.ds\");",
      "778:     server.cache_blocked_clients = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "873:         server.db[j].expires = dictCreate(&keyptrDictType,NULL);",
      "874:         server.db[j].blocking_keys = dictCreate(&keylistDictType,NULL);",
      "875:         server.db[j].watched_keys = dictCreate(&keylistDictType,NULL);",
      "877:             server.db[j].io_keys = dictCreate(&keylistDictType,NULL);",
      "878:         server.db[j].id = j;",
      "879:     }",
      "",
      "[Removed Lines]",
      "876:         if (server.vm_enabled)",
      "",
      "[Added Lines]",
      "858:         if (server.ds_enabled)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "911:         }",
      "912:     }",
      "915: }",
      "",
      "[Removed Lines]",
      "914:     if (server.vm_enabled) vmInit();",
      "",
      "[Added Lines]",
      "896:     if (server.ds_enabled) dsInit();",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1050:         queueMultiCommand(c,cmd);",
      "1051:         addReply(c,shared.queued);",
      "1052:     } else {",
      "1055:         call(c,cmd);",
      "1056:     }",
      "1057:     return REDIS_OK;",
      "",
      "[Removed Lines]",
      "1053:         if (server.vm_enabled && server.vm_max_threads > 0 &&",
      "1054:             blockClientOnSwappedKeys(c,cmd)) return REDIS_ERR;",
      "",
      "[Added Lines]",
      "1035:         if (server.ds_enabled && blockClientOnSwappedKeys(c,cmd))",
      "1036:             return REDIS_ERR;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1072:     if (server.appendonly) {",
      "1074:         aof_fsync(server.appendfd);",
      "1076:     } else if (server.saveparamslen > 0) {",
      "1078:         if (rdbSave(server.dbfilename) != REDIS_OK) {",
      "",
      "[Removed Lines]",
      "1075:         if (server.vm_enabled) unlink(server.vm_swap_file);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1185:         \"hash_max_zipmap_value:%zu\\r\\n\"",
      "1186:         \"pubsub_channels:%ld\\r\\n\"",
      "1187:         \"pubsub_patterns:%u\\r\\n\"",
      "1189:         \"role:%s\\r\\n\"",
      "1190:         ,REDIS_VERSION,",
      "1191:         redisGitSHA1(),",
      "",
      "[Removed Lines]",
      "1188:         \"vm_enabled:%d\\r\\n\"",
      "",
      "[Added Lines]",
      "1169:         \"ds_enabled:%d\\r\\n\"",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1228:         server.hash_max_zipmap_value,",
      "1229:         dictSize(server.pubsub_channels),",
      "1230:         listLength(server.pubsub_patterns),",
      "1232:         server.masterhost == NULL ? \"master\" : \"slave\"",
      "1233:     );",
      "1234:     if (server.masterhost) {",
      "",
      "[Removed Lines]",
      "1231:         server.vm_enabled != 0,",
      "",
      "[Added Lines]",
      "1212:         server.ds_enabled != 0,",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1255:             );",
      "1256:         }",
      "1257:     }",
      "1259:         lockThreadedIO();",
      "1260:         info = sdscatprintf(info,",
      "1285:         );",
      "1286:         unlockThreadedIO();",
      "1287:     }",
      "",
      "[Removed Lines]",
      "1258:     if (server.vm_enabled) {",
      "1261:             \"vm_conf_max_memory:%llu\\r\\n\"",
      "1262:             \"vm_conf_page_size:%llu\\r\\n\"",
      "1263:             \"vm_conf_pages:%llu\\r\\n\"",
      "1264:             \"vm_stats_used_pages:%llu\\r\\n\"",
      "1265:             \"vm_stats_swapped_objects:%llu\\r\\n\"",
      "1266:             \"vm_stats_swappin_count:%llu\\r\\n\"",
      "1267:             \"vm_stats_swappout_count:%llu\\r\\n\"",
      "1268:             \"vm_stats_io_newjobs_len:%lu\\r\\n\"",
      "1269:             \"vm_stats_io_processing_len:%lu\\r\\n\"",
      "1270:             \"vm_stats_io_processed_len:%lu\\r\\n\"",
      "1271:             \"vm_stats_io_active_threads:%lu\\r\\n\"",
      "1272:             \"vm_stats_blocked_clients:%lu\\r\\n\"",
      "1273:             ,(unsigned long long) server.vm_max_memory,",
      "1274:             (unsigned long long) server.vm_page_size,",
      "1275:             (unsigned long long) server.vm_pages,",
      "1276:             (unsigned long long) server.vm_stats_used_pages,",
      "1277:             (unsigned long long) server.vm_stats_swapped_objects,",
      "1278:             (unsigned long long) server.vm_stats_swapins,",
      "1279:             (unsigned long long) server.vm_stats_swapouts,",
      "1280:             (unsigned long) listLength(server.io_newjobs),",
      "1281:             (unsigned long) listLength(server.io_processing),",
      "1282:             (unsigned long) listLength(server.io_processed),",
      "1283:             (unsigned long) server.io_active_threads,",
      "1284:             (unsigned long) server.vm_blocked_clients",
      "",
      "[Added Lines]",
      "1239:     if (server.ds_enabled) {",
      "1242:             \"cache_max_memory:%llu\\r\\n\"",
      "1243:             \"cache_blocked_clients:%lu\\r\\n\"",
      "1244:             ,(unsigned long long) server.cache_max_memory,",
      "1245:             (unsigned long) server.cache_blocked_clients",
      "",
      "---------------"
    ],
    "src/redis.h||src/redis.h": [
      "File: src/redis.h -> src/redis.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "440:     int maxmemory_samples;",
      "442:     unsigned int bpop_blocked_clients;",
      "444:     list *unblocked_clients;",
      "",
      "[Removed Lines]",
      "443:     unsigned int vm_blocked_clients;",
      "",
      "[Added Lines]",
      "443:     unsigned int cache_blocked_clients;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "448:     int sort_alpha;",
      "449:     int sort_bypattern;",
      "457:     size_t hash_max_zipmap_entries;",
      "458:     size_t hash_max_zipmap_value;",
      "",
      "[Removed Lines]",
      "451:     int vm_enabled;",
      "452:     char *vm_swap_file;",
      "453:     off_t vm_page_size;",
      "454:     off_t vm_pages;",
      "455:     unsigned long long vm_max_memory;",
      "",
      "[Added Lines]",
      "453:     unsigned long long cache_max_memory;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "62ec599c363f36a8f2b0b7d39c1533895f491631",
      "candidate_info": {
        "commit_hash": "62ec599c363f36a8f2b0b7d39c1533895f491631",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/62ec599c363f36a8f2b0b7d39c1533895f491631",
        "files": [
          "src/redis.c",
          "src/redis.h",
          "src/replication.c"
        ],
        "message": "typos and minor stuff fixed in the new non blocking replication code",
        "before_after_code_files": [
          "src/redis.c||src/redis.c",
          "src/redis.h||src/redis.h",
          "src/replication.c||src/replication.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ],
          "candidate": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ]
        }
      },
      "candidate_diff": {
        "src/redis.c||src/redis.c": [
          "File: src/redis.c -> src/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "640:     return 100;",
          "641: }",
          "",
          "[Removed Lines]",
          "638:     if (!(loops % 10)) replicationCron(void);",
          "",
          "[Added Lines]",
          "638:     if (!(loops % 10)) replicationCron();",
          "",
          "---------------"
        ],
        "src/redis.h||src/redis.h": [
          "File: src/redis.h -> src/redis.h"
        ],
        "src/replication.c||src/replication.c": [
          "File: src/replication.c -> src/replication.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "308: void readSyncBulkPayload(aeEventLoop *el, int fd, void *privdata, int mask) {",
          "314:     nread = read(fd,buf,readlen);",
          "315:     if (nread <= 0) {",
          "316:         redisLog(REDIS_WARNING,\"I/O error trying to sync with MASTER: %s\",",
          "",
          "[Removed Lines]",
          "309:     unsigned char buf[4096]",
          "310:     size_t nread, readlen;",
          "312:     readlen = (server.repl_transfer_left < sizeof(buf)) ?",
          "313:         server.repl_transfer_left : sizeof(buf);",
          "",
          "[Added Lines]",
          "309:     unsigned char buf[4096];",
          "310:     ssize_t nread, readlen;",
          "311:     REDIS_NOTUSED(el);",
          "312:     REDIS_NOTUSED(privdata);",
          "313:     REDIS_NOTUSED(mask);",
          "315:     readlen = (server.repl_transfer_left < (signed)sizeof(buf)) ?",
          "316:         server.repl_transfer_left : (signed)sizeof(buf);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "425:     }",
          "430:     {",
          "431:         close(fd);",
          "432:         redisLog(REDIS_WARNING,\"Can't create readable event for SYNC\");",
          "",
          "[Removed Lines]",
          "428:     if (aeCreateFileEvent(server.el, fd, AE_READABLE,readSyncBulkPayload) ==",
          "429:         AE_ERR)",
          "",
          "[Added Lines]",
          "431:     if (aeCreateFileEvent(server.el, fd, AE_READABLE, readSyncBulkPayload, NULL)",
          "432:             == AE_ERR)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "481:     }",
          "485:         redisLog(REDIS_NOTICE,\"Connecting to MASTER...\");",
          "486:         if (syncWithMaster() == REDIS_OK) {",
          "487:             redisLog(REDIS_NOTICE,\"MASTER <-> SLAVE sync succeeded\");",
          "",
          "[Removed Lines]",
          "484:     if (server.replstate == REDIS_REPL_CONNECT && !(loops % 10)) {",
          "",
          "[Added Lines]",
          "487:     if (server.replstate == REDIS_REPL_CONNECT) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a9b18e54d4e348dd678a396cc8691dd693687de7",
      "candidate_info": {
        "commit_hash": "a9b18e54d4e348dd678a396cc8691dd693687de7",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/a9b18e54d4e348dd678a396cc8691dd693687de7",
        "files": [
          "src/object.c",
          "src/redis.c",
          "src/redis.h",
          "src/vm.c"
        ],
        "message": "Stop using the freelist robj* cache",
        "before_after_code_files": [
          "src/object.c||src/object.c",
          "src/redis.c||src/redis.c",
          "src/redis.h||src/redis.h",
          "src/vm.c||src/vm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ],
          "candidate": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ]
        }
      },
      "candidate_diff": {
        "src/object.c||src/object.c": [
          "File: src/object.c -> src/object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <math.h>",
          "5: robj *createObject(int type, void *ptr) {",
          "18:     o->type = type;",
          "19:     o->encoding = REDIS_ENCODING_RAW;",
          "20:     o->ptr = ptr;",
          "21:     o->refcount = 1;",
          "",
          "[Removed Lines]",
          "6:     robj *o;",
          "8:     if (server.vm_enabled) pthread_mutex_lock(&server.obj_freelist_mutex);",
          "9:     if (listLength(server.objfreelist)) {",
          "10:         listNode *head = listFirst(server.objfreelist);",
          "11:         o = listNodeValue(head);",
          "12:         listDelNode(server.objfreelist,head);",
          "13:         if (server.vm_enabled) pthread_mutex_unlock(&server.obj_freelist_mutex);",
          "14:     } else {",
          "15:         if (server.vm_enabled) pthread_mutex_unlock(&server.obj_freelist_mutex);",
          "16:         o = zmalloc(sizeof(*o));",
          "17:     }",
          "",
          "[Added Lines]",
          "6:     robj *o = zmalloc(sizeof(*o));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204:         default: redisPanic(\"Unknown object type\"); break;",
          "205:         }",
          "212:     }",
          "213: }",
          "",
          "[Removed Lines]",
          "207:         if (server.vm_enabled) pthread_mutex_lock(&server.obj_freelist_mutex);",
          "208:         if (listLength(server.objfreelist) > REDIS_OBJFREELIST_MAX ||",
          "209:             !listAddNodeHead(server.objfreelist,o))",
          "210:             zfree(o);",
          "211:         if (server.vm_enabled) pthread_mutex_unlock(&server.obj_freelist_mutex);",
          "",
          "[Added Lines]",
          "197:         zfree(o);",
          "",
          "---------------"
        ],
        "src/redis.c||src/redis.c": [
          "File: src/redis.c -> src/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "616:         while (server.vm_enabled && zmalloc_used_memory() >",
          "617:                 server.vm_max_memory)",
          "618:         {",
          "623:                         vmSwapOneObjectBlocking() :",
          "624:                         vmSwapOneObjectThreaded();",
          "625:             if (retval == REDIS_ERR && !(loops % 300) &&",
          "",
          "[Removed Lines]",
          "619:             int retval;",
          "621:             if (tryFreeOneObjectFromFreelist() == REDIS_OK) continue;",
          "622:             retval = (server.vm_max_threads == 0) ?",
          "",
          "[Added Lines]",
          "619:             int retval = (server.vm_max_threads == 0) ?",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "825:     server.clients = listCreate();",
          "826:     server.slaves = listCreate();",
          "827:     server.monitors = listCreate();",
          "829:     createSharedObjects();",
          "830:     server.el = aeCreateEventLoop();",
          "831:     server.db = zmalloc(sizeof(redisDb)*server.dbnum);",
          "",
          "[Removed Lines]",
          "828:     server.objfreelist = listCreate();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1268: int tryFreeOneObjectFromFreelist(void) {",
          "1269:     robj *o;",
          "1271:     if (server.vm_enabled) pthread_mutex_lock(&server.obj_freelist_mutex);",
          "1272:     if (listLength(server.objfreelist)) {",
          "1273:         listNode *head = listFirst(server.objfreelist);",
          "1274:         o = listNodeValue(head);",
          "1275:         listDelNode(server.objfreelist,head);",
          "1276:         if (server.vm_enabled) pthread_mutex_unlock(&server.obj_freelist_mutex);",
          "1277:         zfree(o);",
          "1278:         return REDIS_OK;",
          "1279:     } else {",
          "1280:         if (server.vm_enabled) pthread_mutex_unlock(&server.obj_freelist_mutex);",
          "1281:         return REDIS_ERR;",
          "1282:     }",
          "1283: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1299:     while (server.maxmemory && zmalloc_used_memory() > server.maxmemory) {",
          "1300:         int j, k, freed = 0;",
          "1305:         for (j = 0; j < server.dbnum; j++) {",
          "1307:             sds bestkey = NULL;",
          "",
          "[Removed Lines]",
          "1303:         if (tryFreeOneObjectFromFreelist() == REDIS_OK) continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/redis.h||src/redis.h": [
          "File: src/redis.h -> src/redis.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "685: robj *tryObjectEncoding(robj *o);",
          "686: robj *getDecodedObject(robj *o);",
          "687: size_t stringObjectLen(robj *o);",
          "689: robj *createStringObjectFromLongLong(long long value);",
          "690: robj *createListObject(void);",
          "691: robj *createZiplistObject(void);",
          "",
          "[Removed Lines]",
          "688: int tryFreeOneObjectFromFreelist(void);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vm.c||src/vm.c": [
          "File: src/vm.c -> src/vm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     server.io_processed = listCreate();",
          "97:     server.io_ready_clients = listCreate();",
          "98:     pthread_mutex_init(&server.io_mutex,NULL);",
          "100:     pthread_mutex_init(&server.io_swapfile_mutex,NULL);",
          "101:     server.io_active_threads = 0;",
          "102:     if (pipe(pipefds) == -1) {",
          "",
          "[Removed Lines]",
          "99:     pthread_mutex_init(&server.obj_freelist_mutex,NULL);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e394114d95395fe9babb0a658de263a0811ec330",
      "candidate_info": {
        "commit_hash": "e394114d95395fe9babb0a658de263a0811ec330",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/e394114d95395fe9babb0a658de263a0811ec330",
        "files": [
          "src/aof.c",
          "src/config.c",
          "src/db.c",
          "src/multi.c",
          "src/redis.c",
          "src/redis.h",
          "src/replication.c"
        ],
        "message": "AOF refactoring, now with three states: ON, OFF, WAIT_REWRITE.",
        "before_after_code_files": [
          "src/aof.c||src/aof.c",
          "src/config.c||src/config.c",
          "src/db.c||src/db.c",
          "src/multi.c||src/multi.c",
          "src/redis.c||src/redis.c",
          "src/redis.h||src/redis.h",
          "src/replication.c||src/replication.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ],
          "candidate": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ]
        }
      },
      "candidate_diff": {
        "src/aof.c||src/aof.c": [
          "File: src/aof.c -> src/aof.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: void stopAppendOnly(void) {",
          "22:     flushAppendOnlyFile(1);",
          "23:     aof_fsync(server.appendfd);",
          "24:     close(server.appendfd);",
          "26:     server.appendfd = -1;",
          "27:     server.appendseldb = -1;",
          "31:     if (server.bgrewritechildpid != -1) {",
          "32:         int statloc;",
          "",
          "[Removed Lines]",
          "28:     server.appendonly = 0;",
          "29:     server.aof_wait_rewrite = 0;",
          "",
          "[Added Lines]",
          "22:     redisAssert(server.aof_state != REDIS_AOF_OFF);",
          "29:     server.aof_state = REDIS_AOF_OFF;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: int startAppendOnly(void) {",
          "47:     server.lastfsync = time(NULL);",
          "48:     server.appendfd = open(server.appendfilename,O_WRONLY|O_APPEND|O_CREAT,0644);",
          "49:     if (server.appendfd == -1) {",
          "50:         redisLog(REDIS_WARNING,\"Redis needs to enable the AOF but can't open the append only file: %s\",strerror(errno));",
          "51:         return REDIS_ERR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:     redisAssert(server.aof_state == REDIS_AOF_OFF);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57:     }",
          "62:     return REDIS_OK;",
          "63: }",
          "",
          "[Removed Lines]",
          "60:     server.appendonly = 1;",
          "61:     server.aof_wait_rewrite = 1;",
          "",
          "[Added Lines]",
          "61:     server.aof_state = REDIS_AOF_WAIT_REWRITE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "268:         server.aofbuf = sdscatlen(server.aofbuf,buf,sdslen(buf));",
          "",
          "[Removed Lines]",
          "267:     if (!server.aof_wait_rewrite) {",
          "269:     }",
          "",
          "[Added Lines]",
          "262:     if (server.aof_state == REDIS_AOF_ON)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "316:     struct redisClient *fakeClient;",
          "317:     FILE *fp = fopen(filename,\"r\");",
          "318:     struct redis_stat sb;",
          "320:     long loops = 0;",
          "322:     if (fp && redis_fstat(fileno(fp),&sb) != -1 && sb.st_size == 0) {",
          "",
          "[Removed Lines]",
          "319:     int appendonly = server.appendonly;",
          "",
          "[Added Lines]",
          "313:     int old_aof_state = server.aof_state;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "337:     fakeClient = createFakeClient();",
          "338:     startLoading(fp);",
          "",
          "[Removed Lines]",
          "335:     server.appendonly = 0;",
          "",
          "[Added Lines]",
          "329:     server.aof_state = REDIS_AOF_OFF;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "402:     fclose(fp);",
          "403:     freeFakeClient(fakeClient);",
          "405:     stopLoading();",
          "406:     aofUpdateCurrentSize();",
          "407:     server.auto_aofrewrite_base_size = server.appendonly_current_size;",
          "",
          "[Removed Lines]",
          "404:     server.appendonly = appendonly;",
          "",
          "[Added Lines]",
          "398:     server.aof_state = old_aof_state;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "964:         }",
          "966:         redisLog(REDIS_NOTICE, \"Background AOF rewrite successful\");",
          "970:         if (oldfd != -1) bioCreateBackgroundJob(REDIS_BIO_CLOSE_FILE,(void*)(long)oldfd,NULL,NULL);",
          "",
          "[Removed Lines]",
          "967:         server.aof_wait_rewrite = 0;",
          "",
          "[Added Lines]",
          "962:         if (server.aof_state == REDIS_AOF_WAIT_REWRITE)",
          "963:             server.aof_state = REDIS_AOF_ON;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "984:     server.bgrewritebuf = sdsempty();",
          "985:     aofRemoveTempFile(server.bgrewritechildpid);",
          "986:     server.bgrewritechildpid = -1;",
          "993: }",
          "",
          "[Removed Lines]",
          "992:     if (server.aof_wait_rewrite) server.aofrewrite_scheduled = 1;",
          "",
          "[Added Lines]",
          "984:     if (server.aof_state == REDIS_AOF_WAIT_REWRITE)",
          "985:         server.aofrewrite_scheduled = 1;",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:                 err = \"argument must be 'yes' or 'no'\"; goto loaderr;",
          "214:             }",
          "215:         } else if (!strcasecmp(argv[0],\"appendonly\") && argc == 2) {",
          "217:                 err = \"argument must be 'yes' or 'no'\"; goto loaderr;",
          "218:             }",
          "219:         } else if (!strcasecmp(argv[0],\"appendfilename\") && argc == 2) {",
          "220:             zfree(server.appendfilename);",
          "221:             server.appendfilename = zstrdup(argv[1]);",
          "",
          "[Removed Lines]",
          "216:             if ((server.appendonly = yesnotoi(argv[1])) == -1) {",
          "",
          "[Added Lines]",
          "216:             int yes;",
          "218:             if ((yes = yesnotoi(argv[1])) == -1) {",
          "221:             server.aof_state = yes ? REDIS_AOF_ON : REDIS_AOF_OFF;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "426:         if (yn == -1) goto badfmt;",
          "427:         server.no_appendfsync_on_rewrite = yn;",
          "428:     } else if (!strcasecmp(c->argv[2]->ptr,\"appendonly\")) {",
          "442:             }",
          "443:         }",
          "444:     } else if (!strcasecmp(c->argv[2]->ptr,\"auto-aof-rewrite-percentage\")) {",
          "",
          "[Removed Lines]",
          "429:         int old = server.appendonly;",
          "430:         int new = yesnotoi(o->ptr);",
          "432:         if (new == -1) goto badfmt;",
          "433:         if (old != new) {",
          "434:             if (new == 0) {",
          "435:                 stopAppendOnly();",
          "436:             } else {",
          "437:                 if (startAppendOnly() == REDIS_ERR) {",
          "438:                     addReplyError(c,",
          "439:                         \"Unable to turn on AOF. Check server logs.\");",
          "440:                     return;",
          "441:                 }",
          "",
          "[Added Lines]",
          "432:         int enable = yesnotoi(o->ptr);",
          "434:         if (enable == -1) goto badfmt;",
          "435:         if (enable == 0 && server.aof_state != REDIS_AOF_OFF) {",
          "436:             stopAppendOnly();",
          "437:         } else if (enable && server.aof_state == REDIS_AOF_OFF) {",
          "438:             if (startAppendOnly() == REDIS_ERR) {",
          "439:                 addReplyError(c,",
          "440:                     \"Unable to turn on AOF. Check server logs.\");",
          "441:                 return;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "616:     }",
          "617:     if (stringmatch(pattern,\"appendonly\",0)) {",
          "618:         addReplyBulkCString(c,\"appendonly\");",
          "620:         matches++;",
          "621:     }",
          "622:     if (stringmatch(pattern,\"no-appendfsync-on-rewrite\",0)) {",
          "",
          "[Removed Lines]",
          "619:         addReplyBulkCString(c,server.appendonly ? \"yes\" : \"no\");",
          "",
          "[Added Lines]",
          "619:         addReplyBulkCString(c,server.aof_state == REDIS_AOF_OFF ? \"no\" : \"yes\");",
          "",
          "---------------"
        ],
        "src/db.c||src/db.c": [
          "File: src/db.c -> src/db.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "487:     argv[1] = key;",
          "488:     incrRefCount(key);",
          "491:         feedAppendOnlyFile(server.delCommand,db->id,argv,2);",
          "492:     if (listLength(server.slaves))",
          "493:         replicationFeedSlaves(server.slaves,db->id,argv,2);",
          "",
          "[Removed Lines]",
          "490:     if (server.appendonly)",
          "",
          "[Added Lines]",
          "490:     if (server.aof_state != REDIS_AOF_OFF)",
          "",
          "---------------"
        ],
        "src/multi.c||src/multi.c": [
          "File: src/multi.c -> src/multi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: void execCommandReplicateMulti(redisClient *c) {",
          "68:     robj *multistring = createStringObject(\"MULTI\",5);",
          "71:         feedAppendOnlyFile(server.multiCommand,c->db->id,&multistring,1);",
          "72:     if (listLength(server.slaves))",
          "73:         replicationFeedSlaves(server.slaves,c->db->id,&multistring,1);",
          "",
          "[Removed Lines]",
          "70:     if (server.appendonly)",
          "",
          "[Added Lines]",
          "70:     if (server.aof_state != REDIS_AOF_OFF)",
          "",
          "---------------"
        ],
        "src/redis.c||src/redis.c": [
          "File: src/redis.c -> src/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "873:     server.syslog_ident = zstrdup(\"redis\");",
          "874:     server.syslog_facility = LOG_LOCAL0;",
          "875:     server.daemonize = 0;",
          "877:     server.appendfsync = APPENDFSYNC_EVERYSEC;",
          "878:     server.no_appendfsync_on_rewrite = 0;",
          "879:     server.auto_aofrewrite_perc = REDIS_AUTO_AOFREWRITE_PERC;",
          "880:     server.auto_aofrewrite_min_size = REDIS_AUTO_AOFREWRITE_MIN_SIZE;",
          "881:     server.auto_aofrewrite_base_size = 0;",
          "882:     server.aofrewrite_scheduled = 0;",
          "884:     server.lastfsync = time(NULL);",
          "885:     server.appendfd = -1;",
          "",
          "[Removed Lines]",
          "876:     server.appendonly = 0;",
          "883:     server.aof_wait_rewrite = 0;",
          "",
          "[Added Lines]",
          "876:     server.aof_state = REDIS_AOF_OFF;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "924:     server.masterauth = NULL;",
          "925:     server.masterhost = NULL;",
          "926:     server.masterport = 6379;",
          "",
          "[Removed Lines]",
          "923:     server.isslave = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1069:     if (server.sofd > 0 && aeCreateFileEvent(server.el,server.sofd,AE_READABLE,",
          "1070:         acceptUnixHandler,NULL) == AE_ERR) oom(\"creating file event\");",
          "1074:         if (server.appendfd == -1) {",
          "1075:             redisLog(REDIS_WARNING, \"Can't open the append-only file: %s\",",
          "1076:                 strerror(errno));",
          "",
          "[Removed Lines]",
          "1072:     if (server.appendonly) {",
          "1073:         server.appendfd = open(server.appendfilename,O_WRONLY|O_APPEND|O_CREAT,0644);",
          "",
          "[Added Lines]",
          "1070:     if (server.aof_state == REDIS_AOF_ON) {",
          "1071:         server.appendfd = open(server.appendfilename,",
          "1072:                                O_WRONLY|O_APPEND|O_CREAT,0644);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1156:     slowlogPushEntryIfNeeded(c->argv,c->argc,duration);",
          "1157:     c->cmd->calls++;",
          "1160:         feedAppendOnlyFile(c->cmd,c->db->id,c->argv,c->argc);",
          "1161:     if ((dirty > 0 || c->cmd->flags & REDIS_CMD_FORCE_REPLICATION) &&",
          "1162:         listLength(server.slaves))",
          "",
          "[Removed Lines]",
          "1159:     if (server.appendonly && dirty > 0)",
          "",
          "[Added Lines]",
          "1158:     if (server.aof_state != REDIS_AOF_OFF && dirty > 0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1311:         kill(server.bgsavechildpid,SIGKILL);",
          "1312:         rdbRemoveTempFile(server.bgsavechildpid);",
          "1313:     }",
          "1317:         if (server.bgrewritechildpid != -1) {",
          "",
          "[Removed Lines]",
          "1314:     if (server.appendonly) {",
          "",
          "[Added Lines]",
          "1313:     if (server.aof_state != REDIS_AOF_OFF) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1498:             \"last_save_time:%ld\\r\\n\"",
          "1499:             \"bgrewriteaof_in_progress:%d\\r\\n\",",
          "1500:             server.loading,",
          "1502:             server.dirty,",
          "1503:             server.bgsavechildpid != -1,",
          "1504:             server.lastsave,",
          "1505:             server.bgrewritechildpid != -1);",
          "1508:             info = sdscatprintf(info,",
          "1509:                 \"aof_current_size:%lld\\r\\n\"",
          "1510:                 \"aof_base_size:%lld\\r\\n\"",
          "",
          "[Removed Lines]",
          "1501:             server.appendonly,",
          "1507:         if (server.appendonly) {",
          "",
          "[Added Lines]",
          "1500:             server.aof_state != REDIS_AOF_OFF,",
          "1506:         if (server.aof_state != REDIS_AOF_OFF) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2099:     linuxOvercommitMemoryWarning();",
          "2100: #endif",
          "2101:     start = ustime();",
          "2103:         if (loadAppendOnlyFile(server.appendfilename) == REDIS_OK)",
          "2104:             redisLog(REDIS_NOTICE,\"DB loaded from append only file: %.3f seconds\",(float)(ustime()-start)/1000000);",
          "2105:     } else {",
          "",
          "[Removed Lines]",
          "2102:     if (server.appendonly) {",
          "",
          "[Added Lines]",
          "2101:     if (server.aof_state == REDIS_AOF_ON) {",
          "",
          "---------------"
        ],
        "src/redis.h||src/redis.h": [
          "File: src/redis.h -> src/redis.h"
        ],
        "src/replication.c||src/replication.c": [
          "File: src/replication.c -> src/replication.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "365:             int retry = 10;",
          "367:             stopAppendOnly();",
          "",
          "[Removed Lines]",
          "364:         if (server.appendonly) {",
          "",
          "[Added Lines]",
          "364:         if (server.aof_state != REDIS_AOF_OFF) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2da3a620ce7d9462613a93c07022bb805eb5c90",
      "candidate_info": {
        "commit_hash": "f2da3a620ce7d9462613a93c07022bb805eb5c90",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/f2da3a620ce7d9462613a93c07022bb805eb5c90",
        "files": [
          "src/dscache.c",
          "src/redis.c",
          "src/redis.h"
        ],
        "message": "more work converting vm into object cache",
        "before_after_code_files": [
          "src/dscache.c||src/dscache.c",
          "src/redis.c||src/redis.c",
          "src/redis.h||src/redis.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ],
          "candidate": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ]
        }
      },
      "candidate_diff": {
        "src/dscache.c||src/dscache.c": [
          "File: src/dscache.c -> src/dscache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:     off_t totsize;",
          "114:     int pipefds[2];",
          "115:     size_t stacksize;",
          "116:     struct flock fl;",
          "141:         exit(1);",
          "164:     server.io_newjobs = listCreate();",
          "165:     server.io_processing = listCreate();",
          "166:     server.io_processed = listCreate();",
          "167:     server.io_ready_clients = listCreate();",
          "168:     pthread_mutex_init(&server.io_mutex,NULL);",
          "170:     server.io_active_threads = 0;",
          "171:     if (pipe(pipefds) == -1) {",
          "173:             ,strerror(errno));",
          "174:         exit(1);",
          "175:     }",
          "",
          "[Removed Lines]",
          "112: void vmInit(void) {",
          "118:     if (server.vm_max_threads != 0)",
          "121:     redisLog(REDIS_NOTICE,\"Using '%s' as swap file\",server.vm_swap_file);",
          "123:     if ((server.vm_fp = fopen(server.vm_swap_file,\"r+b\")) == NULL) {",
          "124:         server.vm_fp = fopen(server.vm_swap_file,\"w+b\");",
          "125:     }",
          "126:     if (server.vm_fp == NULL) {",
          "127:         redisLog(REDIS_WARNING,",
          "128:             \"Can't open the swap file: %s. Exiting.\",",
          "129:             strerror(errno));",
          "130:         exit(1);",
          "131:     }",
          "132:     server.vm_fd = fileno(server.vm_fp);",
          "135:     fl.l_type = F_WRLCK;",
          "136:     fl.l_whence = SEEK_SET;",
          "137:     fl.l_start = fl.l_len = 0;",
          "138:     if (fcntl(server.vm_fd,F_SETLK,&fl) == -1) {",
          "139:         redisLog(REDIS_WARNING,",
          "140:             \"Can't lock the swap file at '%s': %s. Make sure it is not used by another Redis instance.\", server.vm_swap_file, strerror(errno));",
          "142:     }",
          "144:     server.vm_next_page = 0;",
          "145:     server.vm_near_pages = 0;",
          "146:     server.vm_stats_used_pages = 0;",
          "147:     server.vm_stats_swapped_objects = 0;",
          "148:     server.vm_stats_swapouts = 0;",
          "149:     server.vm_stats_swapins = 0;",
          "150:     totsize = server.vm_pages*server.vm_page_size;",
          "151:     redisLog(REDIS_NOTICE,\"Allocating %lld bytes of swap file\",totsize);",
          "152:     if (ftruncate(server.vm_fd,totsize) == -1) {",
          "153:         redisLog(REDIS_WARNING,\"Can't ftruncate swap file: %s. Exiting.\",",
          "154:             strerror(errno));",
          "155:         exit(1);",
          "156:     } else {",
          "157:         redisLog(REDIS_NOTICE,\"Swap file allocated with success\");",
          "158:     }",
          "159:     server.vm_bitmap = zcalloc((server.vm_pages+7)/8);",
          "160:     redisLog(REDIS_VERBOSE,\"Allocated %lld bytes page table for %lld pages\",",
          "161:         (long long) (server.vm_pages+7)/8, server.vm_pages);",
          "169:     pthread_mutex_init(&server.io_swapfile_mutex,NULL);",
          "172:         redisLog(REDIS_WARNING,\"Unable to intialized VM: pipe(2): %s. Exiting.\"",
          "",
          "[Added Lines]",
          "112: void dsInit(void) {",
          "120:     redisLog(REDIS_NOTICE,\"Initializing Disk Store at %s\", server.ds_path);",
          "122:     if (dsOpen() != REDIS_OK) {",
          "123:         redisLog(REDIS_WARNING,\"Fatal error opening disk store. Exiting.\");",
          "125:     };",
          "135:         redisLog(REDIS_WARNING,\"Unable to intialized DS: pipe(2): %s. Exiting.\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190:     if (aeCreateFileEvent(server.el, server.io_ready_pipe_read, AE_READABLE,",
          "191:         vmThreadedIOCompletedJob, NULL) == AE_ERR)",
          "192:         oom(\"creating file event\");",
          "280: }",
          "313: double computeObjectSwappability(robj *o) {",
          "316:     return (double) estimateObjectIdleTime(o);",
          "317: }",
          "326:     int j, i;",
          "327:     struct dictEntry *best = NULL;",
          "328:     double best_swappability = 0;",
          "",
          "[Removed Lines]",
          "193: }",
          "196: int vmWriteObjectOnSwap(robj *o, off_t page) {",
          "197:     if (server.vm_enabled) pthread_mutex_lock(&server.io_swapfile_mutex);",
          "198:     if (fseeko(server.vm_fp,page*server.vm_page_size,SEEK_SET) == -1) {",
          "199:         if (server.vm_enabled) pthread_mutex_unlock(&server.io_swapfile_mutex);",
          "200:         redisLog(REDIS_WARNING,",
          "201:             \"Critical VM problem in vmWriteObjectOnSwap(): can't seek: %s\",",
          "202:             strerror(errno));",
          "203:         return REDIS_ERR;",
          "204:     }",
          "205:     rdbSaveObject(server.vm_fp,o);",
          "206:     fflush(server.vm_fp);",
          "207:     if (server.vm_enabled) pthread_mutex_unlock(&server.io_swapfile_mutex);",
          "208:     return REDIS_OK;",
          "209: }",
          "217: vmpointer *vmSwapObjectBlocking(robj *val) {",
          "218:     off_t pages = rdbSavedObjectPages(val);",
          "219:     off_t page;",
          "220:     vmpointer *vp;",
          "222:     redisAssert(val->storage == REDIS_VM_MEMORY);",
          "223:     redisAssert(val->refcount == 1);",
          "224:     if (vmFindContiguousPages(&page,pages) == REDIS_ERR) return NULL;",
          "225:     if (vmWriteObjectOnSwap(val,page) == REDIS_ERR) return NULL;",
          "227:     vp = createVmPointer(val->type);",
          "228:     vp->page = page;",
          "229:     vp->usedpages = pages;",
          "231:     vmMarkPagesUsed(page,pages);",
          "232:     redisLog(REDIS_DEBUG,\"VM: object %p swapped out at %lld (%lld pages)\",",
          "233:         (void*) val,",
          "234:         (unsigned long long) page, (unsigned long long) pages);",
          "235:     server.vm_stats_swapped_objects++;",
          "236:     server.vm_stats_swapouts++;",
          "237:     return vp;",
          "238: }",
          "240: robj *vmReadObjectFromSwap(off_t page, int type) {",
          "241:     robj *o;",
          "243:     if (server.vm_enabled) pthread_mutex_lock(&server.io_swapfile_mutex);",
          "244:     if (fseeko(server.vm_fp,page*server.vm_page_size,SEEK_SET) == -1) {",
          "245:         redisLog(REDIS_WARNING,",
          "246:             \"Unrecoverable VM problem in vmReadObjectFromSwap(): can't seek: %s\",",
          "247:             strerror(errno));",
          "248:         _exit(1);",
          "249:     }",
          "250:     o = rdbLoadObject(type,server.vm_fp);",
          "251:     if (o == NULL) {",
          "252:         redisLog(REDIS_WARNING, \"Unrecoverable VM problem in vmReadObjectFromSwap(): can't load object from swap file: %s\", strerror(errno));",
          "253:         _exit(1);",
          "254:     }",
          "255:     if (server.vm_enabled) pthread_mutex_unlock(&server.io_swapfile_mutex);",
          "256:     return o;",
          "257: }",
          "264: robj *vmGenericLoadObject(vmpointer *vp, int preview) {",
          "265:     robj *val;",
          "267:     redisAssert(vp->type == REDIS_VMPOINTER &&",
          "268:         (vp->storage == REDIS_VM_SWAPPED || vp->storage == REDIS_VM_LOADING));",
          "269:     val = vmReadObjectFromSwap(vp->page,vp->vtype);",
          "270:     if (!preview) {",
          "271:         redisLog(REDIS_DEBUG, \"VM: object %p loaded from disk\", (void*)vp);",
          "272:         vmMarkPagesFree(vp->page,vp->usedpages);",
          "273:         zfree(vp);",
          "274:         server.vm_stats_swapped_objects--;",
          "275:     } else {",
          "276:         redisLog(REDIS_DEBUG, \"VM: object %p previewed from disk\", (void*)vp);",
          "277:     }",
          "278:     server.vm_stats_swapins++;",
          "279:     return val;",
          "286: robj *vmLoadObject(robj *o) {",
          "289:     if (o->storage == REDIS_VM_LOADING)",
          "290:         vmCancelThreadedIOJob(o);",
          "291:     return vmGenericLoadObject((vmpointer*)o,0);",
          "292: }",
          "298: robj *vmPreviewObject(robj *o) {",
          "299:     return vmGenericLoadObject((vmpointer*)o,1);",
          "300: }",
          "325: int vmSwapOneObject(int usethreads) {",
          "",
          "[Added Lines]",
          "158:     spawnIOThread();",
          "170: int cacheFreeOneEntry(void) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "356:                 continue;",
          "357:             }",
          "",
          "[Removed Lines]",
          "354:             if (val->storage != REDIS_VM_MEMORY || val->refcount != 1) {",
          "",
          "[Added Lines]",
          "199:             if (val->storage != REDIS_DS_MEMORY) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "363:             }",
          "364:         }",
          "365:     }",
          "367:     key = dictGetEntryKey(best);",
          "368:     val = dictGetEntryVal(best);",
          "371:         key, best_swappability);",
          "388:     }",
          "389: }",
          "403:     return (server.bgsavechildpid == -1 && server.bgrewritechildpid == -1);",
          "404: }",
          "",
          "[Removed Lines]",
          "366:     if (best == NULL) return REDIS_ERR;",
          "370:     redisLog(REDIS_DEBUG,\"Key with best swappability: %s, %f\",",
          "374:     if (usethreads) {",
          "375:         robj *keyobj = createStringObject(key,sdslen(key));",
          "376:         vmSwapObjectThreaded(keyobj,val,best_db);",
          "377:         decrRefCount(keyobj);",
          "378:         return REDIS_OK;",
          "379:     } else {",
          "380:         vmpointer *vp;",
          "382:         if ((vp = vmSwapObjectBlocking(val)) != NULL) {",
          "383:             dictGetEntryVal(best) = vp;",
          "384:             return REDIS_OK;",
          "385:         } else {",
          "386:             return REDIS_ERR;",
          "387:         }",
          "391: int vmSwapOneObjectBlocking() {",
          "392:     return vmSwapOneObject(0);",
          "393: }",
          "395: int vmSwapOneObjectThreaded() {",
          "396:     return vmSwapOneObject(1);",
          "397: }",
          "402: int vmCanSwapOut(void) {",
          "",
          "[Added Lines]",
          "211:     if (best == NULL) {",
          "216:         return REDIS_ERR;",
          "217:     }",
          "221:     redisLog(REDIS_DEBUG,\"Key selected for cache eviction: %s swappability:%f\",",
          "225:     {",
          "226:         robj *kobj = createStringObject(key,sdslen(key));",
          "227:         dbDelete(best_db,kobj);",
          "228:         decrRefCount(kobj);",
          "235: int dsCanTouchDiskStore(void) {",
          "",
          "---------------"
        ],
        "src/redis.c||src/redis.c": [
          "File: src/redis.c -> src/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:     while (server.ds_enabled && zmalloc_used_memory() >",
          "624:             server.cache_max_memory)",
          "625:     {",
          "627:     }",
          "",
          "[Removed Lines]",
          "626:         cacheFreeOneEntry();",
          "",
          "[Added Lines]",
          "626:         if (cacheFreeOneEntry() == REDIS_ERR) break;",
          "",
          "---------------"
        ],
        "src/redis.h||src/redis.h": [
          "File: src/redis.h -> src/redis.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "446:     size_t list_max_ziplist_entries;",
          "447:     size_t list_max_ziplist_value;",
          "448:     size_t set_max_intset_entries;",
          "",
          "[Removed Lines]",
          "450:     FILE *vm_fp;",
          "451:     int vm_fd;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a3e60027e7d4419971406c6da7d6e8accbcaf9b0",
      "candidate_info": {
        "commit_hash": "a3e60027e7d4419971406c6da7d6e8accbcaf9b0",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/a3e60027e7d4419971406c6da7d6e8accbcaf9b0",
        "files": [
          "src/aof.c",
          "src/rdb.c",
          "src/redis.c"
        ],
        "message": "Now maxmemory, VM, and everything else uses the fast RSS memory used estimation instead of raw memory reported by zmalloc(). This means that setting maxmemory to 2GB will really have the effect of using up to 2GB of memory.",
        "before_after_code_files": [
          "src/aof.c||src/aof.c",
          "src/rdb.c||src/rdb.c",
          "src/redis.c||src/redis.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/redis.c||src/redis.c"
          ],
          "candidate": [
            "src/redis.c||src/redis.c"
          ]
        }
      },
      "candidate_diff": {
        "src/aof.c||src/aof.c": [
          "File: src/aof.c -> src/aof.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:         force_swapout = 0;",
          "284:             force_swapout = 1;",
          "286:         if (server.vm_enabled && force_swapout) {",
          "288:                 if (vmSwapOneObjectBlocking() == REDIS_ERR) break;",
          "289:             }",
          "290:         }",
          "",
          "[Removed Lines]",
          "283:         if ((zmalloc_used_memory() - server.vm_max_memory) > 1024*1024*32)",
          "287:             while (zmalloc_used_memory() > server.vm_max_memory) {",
          "",
          "[Added Lines]",
          "283:         if ((redisEstimateRSS() - server.vm_max_memory) > 1024*1024*32)",
          "287:             while (redisEstimateRSS() > server.vm_max_memory) {",
          "",
          "---------------"
        ],
        "src/rdb.c||src/rdb.c": [
          "File: src/rdb.c -> src/rdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "887:         force_swapout = 0;",
          "889:             force_swapout = 1;",
          "893:         if (!swap_all_values && server.vm_enabled && force_swapout) {",
          "895:                 if (vmSwapOneObjectBlocking() == REDIS_ERR) break;",
          "896:             }",
          "899:         }",
          "900:     }",
          "",
          "[Removed Lines]",
          "888:         if ((zmalloc_used_memory() - server.vm_max_memory) > 1024*1024*32)",
          "894:             while (zmalloc_used_memory() > server.vm_max_memory) {",
          "897:             if (zmalloc_used_memory() > server.vm_max_memory)",
          "",
          "[Added Lines]",
          "888:         if ((redisEstimateRSS() - server.vm_max_memory) > 1024*1024*32)",
          "894:             while (redisEstimateRSS() > server.vm_max_memory) {",
          "897:             if (redisEstimateRSS() > server.vm_max_memory)",
          "",
          "---------------"
        ],
        "src/redis.c||src/redis.c": [
          "File: src/redis.c -> src/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "545:         redisLog(REDIS_VERBOSE,\"%d clients connected (%d slaves), %zu bytes in use\",",
          "546:             listLength(server.clients)-listLength(server.slaves),",
          "547:             listLength(server.slaves),",
          "549:     }",
          "",
          "[Removed Lines]",
          "548:             zmalloc_used_memory());",
          "",
          "[Added Lines]",
          "548:             redisEstimateRSS());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "592:     if (vmCanSwapOut()) {",
          "596:             int retval;",
          "598:             if (tryFreeOneObjectFromFreelist() == REDIS_OK) continue;",
          "",
          "[Removed Lines]",
          "593:         while (server.vm_enabled && zmalloc_used_memory() >",
          "594:                 server.vm_max_memory)",
          "595:         {",
          "",
          "[Added Lines]",
          "593:         while (server.vm_enabled && redisEstimateRSS() > server.vm_max_memory) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "600:                         vmSwapOneObjectBlocking() :",
          "601:                         vmSwapOneObjectThreaded();",
          "602:             if (retval == REDIS_ERR && !(loops % 300) &&",
          "604:                 (server.vm_max_memory+server.vm_max_memory/10))",
          "605:             {",
          "606:                 redisLog(REDIS_WARNING,\"WARNING: vm-max-memory limit exceeded by more than 10%% but unable to swap more objects out!\");",
          "",
          "[Removed Lines]",
          "603:                 zmalloc_used_memory() >",
          "",
          "[Added Lines]",
          "601:                 redisEstimateRSS() >",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "941:     if (server.maxmemory) freeMemoryIfNeeded();",
          "942:     if (server.maxmemory && (cmd->flags & REDIS_CMD_DENYOOM) &&",
          "944:     {",
          "945:         addReplyError(c,\"command not allowed when used memory > 'maxmemory'\");",
          "946:         return REDIS_OK;",
          "",
          "[Removed Lines]",
          "943:         zmalloc_used_memory() > server.maxmemory)",
          "",
          "[Added Lines]",
          "941:         redisEstimateRSS() > server.maxmemory)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1059:     getrusage(RUSAGE_SELF, &self_ru);",
          "1060:     getrusage(RUSAGE_CHILDREN, &c_ru);",
          "1063:     info = sdscatprintf(sdsempty(),",
          "1064:         \"redis_version:%s\\r\\n\"",
          "1065:         \"redis_git_sha1:%s\\r\\n\"",
          "",
          "[Removed Lines]",
          "1062:     bytesToHuman(hmem,zmalloc_used_memory());",
          "",
          "[Added Lines]",
          "1060:     bytesToHuman(hmem,redisEstimateRSS());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1079:         \"blocked_clients:%d\\r\\n\"",
          "1080:         \"used_memory:%zu\\r\\n\"",
          "1081:         \"used_memory_human:%s\\r\\n\"",
          "1084:         \"mem_fragmentation_ratio:%.2f\\r\\n\"",
          "1085:         \"use_tcmalloc:%d\\r\\n\"",
          "1086:         \"changes_since_last_save:%lld\\r\\n\"",
          "",
          "[Removed Lines]",
          "1082:         \"used_memory_rss:%zu\\r\\n\"",
          "1083:         \"used_memory_estimated_rss:%zu\\r\\n\"",
          "",
          "[Added Lines]",
          "1080:         \"used_memory_zmalloc:%zu\\r\\n\"",
          "1081:         \"used_memory_raw_rss:%zu\\r\\n\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1114:         listLength(server.clients)-listLength(server.slaves),",
          "1115:         listLength(server.slaves),",
          "1116:         server.blpop_blocked_clients,",
          "1118:         hmem,",
          "1119:         zmalloc_get_rss(),",
          "1121:         zmalloc_get_fragmentation_ratio(),",
          "1122: #ifdef USE_TCMALLOC",
          "1123:         1,",
          "",
          "[Removed Lines]",
          "1117:         zmalloc_used_memory(),",
          "1120:         redisEstimateRSS(),",
          "",
          "[Added Lines]",
          "1115:         redisEstimateRSS(),",
          "1117:         zmalloc_used_memory(),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1285: void freeMemoryIfNeeded(void) {",
          "1289:         int j, k, freed = 0;",
          "",
          "[Removed Lines]",
          "1288:     while (server.maxmemory && zmalloc_used_memory() > server.maxmemory) {",
          "",
          "[Added Lines]",
          "1286:     while (server.maxmemory && redisEstimateRSS() > server.maxmemory) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}