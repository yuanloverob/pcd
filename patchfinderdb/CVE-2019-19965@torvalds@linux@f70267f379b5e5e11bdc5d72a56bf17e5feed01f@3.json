{
  "cve_id": "CVE-2019-19965",
  "cve_desc": "In the Linux kernel through 5.4.6, there is a NULL pointer dereference in drivers/scsi/libsas/sas_discover.c because of mishandling of port disconnection during discovery, related to a PHY down race condition, aka CID-f70267f379b5.",
  "repo": "torvalds/linux",
  "patch_hash": "f70267f379b5e5e11bdc5d72a56bf17e5feed01f",
  "patch_info": {
    "commit_hash": "f70267f379b5e5e11bdc5d72a56bf17e5feed01f",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/f70267f379b5e5e11bdc5d72a56bf17e5feed01f",
    "files": [
      "drivers/scsi/libsas/sas_discover.c"
    ],
    "message": "scsi: libsas: stop discovering if oob mode is disconnected\n\nThe discovering of sas port is driven by workqueue in libsas. When libsas\nis processing port events or phy events in workqueue, new events may rise\nup and change the state of some structures such as asd_sas_phy.  This may\ncause some problems such as follows:\n\n==>thread 1                       ==>thread 2\n\n                                  ==>phy up\n                                  ==>phy_up_v3_hw()\n                                    ==>oob_mode = SATA_OOB_MODE;\n                                  ==>phy down quickly\n                                  ==>hisi_sas_phy_down()\n                                    ==>sas_ha->notify_phy_event()\n                                    ==>sas_phy_disconnected()\n                                      ==>oob_mode = OOB_NOT_CONNECTED\n==>workqueue wakeup\n==>sas_form_port()\n  ==>sas_discover_domain()\n    ==>sas_get_port_device()\n      ==>oob_mode is OOB_NOT_CONNECTED and device\n         is wrongly taken as expander\n\nThis at last lead to the panic when libsas trying to issue a command to\ndiscover the device.\n\n[183047.614035] Unable to handle kernel NULL pointer dereference at\nvirtual address 0000000000000058\n[183047.622896] Mem abort info:\n[183047.625762]   ESR = 0x96000004\n[183047.628893]   Exception class = DABT (current EL), IL = 32 bits\n[183047.634888]   SET = 0, FnV = 0\n[183047.638015]   EA = 0, S1PTW = 0\n[183047.641232] Data abort info:\n[183047.644189]   ISV = 0, ISS = 0x00000004\n[183047.648100]   CM = 0, WnR = 0\n[183047.651145] user pgtable: 4k pages, 48-bit VAs, pgdp =\n00000000b7df67be\n[183047.657834] [0000000000000058] pgd=0000000000000000\n[183047.662789] Internal error: Oops: 96000004 [#1] SMP\n[183047.667740] Process kworker/u16:2 (pid: 31291, stack limit =\n0x00000000417c4974)\n[183047.675208] CPU: 0 PID: 3291 Comm: kworker/u16:2 Tainted: G\nW  OE 4.19.36-vhulk1907.1.0.h410.eulerosv2r8.aarch64 #1\n[183047.687015] Hardware name: N/A N/A/Kunpeng Desktop Board D920S10,\nBIOS 0.15 10/22/2019\n[183047.695007] Workqueue: 0000:74:02.0_disco_q sas_discover_domain\n[183047.700999] pstate: 20c00009 (nzCv daif +PAN +UAO)\n[183047.705864] pc : prep_ata_v3_hw+0xf8/0x230 [hisi_sas_v3_hw]\n[183047.711510] lr : prep_ata_v3_hw+0xb0/0x230 [hisi_sas_v3_hw]\n[183047.717153] sp : ffff00000f28ba60\n[183047.720541] x29: ffff00000f28ba60 x28: ffff8026852d7228\n[183047.725925] x27: ffff8027dba3e0a8 x26: ffff8027c05fc200\n[183047.731310] x25: 0000000000000000 x24: ffff8026bafa8dc0\n[183047.736695] x23: ffff8027c05fc218 x22: ffff8026852d7228\n[183047.742079] x21: ffff80007c2f2940 x20: ffff8027c05fc200\n[183047.747464] x19: 0000000000f80800 x18: 0000000000000010\n[183047.752848] x17: 0000000000000000 x16: 0000000000000000\n[183047.758232] x15: ffff000089a5a4ff x14: 0000000000000005\n[183047.763617] x13: ffff000009a5a50e x12: ffff8026bafa1e20\n[183047.769001] x11: ffff0000087453b8 x10: ffff00000f28b870\n[183047.774385] x9 : 0000000000000000 x8 : ffff80007e58f9b0\n[183047.779770] x7 : 0000000000000000 x6 : 000000000000003f\n[183047.785154] x5 : 0000000000000040 x4 : ffffffffffffffe0\n[183047.790538] x3 : 00000000000000f8 x2 : 0000000002000007\n[183047.795922] x1 : 0000000000000008 x0 : 0000000000000000\n[183047.801307] Call trace:\n[183047.803827]  prep_ata_v3_hw+0xf8/0x230 [hisi_sas_v3_hw]\n[183047.809127]  hisi_sas_task_prep+0x750/0x888 [hisi_sas_main]\n[183047.814773]  hisi_sas_task_exec.isra.7+0x88/0x1f0 [hisi_sas_main]\n[183047.820939]  hisi_sas_queue_command+0x28/0x38 [hisi_sas_main]\n[183047.826757]  smp_execute_task_sg+0xec/0x218\n[183047.831013]  smp_execute_task+0x74/0xa0\n[183047.834921]  sas_discover_expander.part.7+0x9c/0x5f8\n[183047.839959]  sas_discover_root_expander+0x90/0x160\n[183047.844822]  sas_discover_domain+0x1b8/0x1e8\n[183047.849164]  process_one_work+0x1b4/0x3f8\n[183047.853246]  worker_thread+0x54/0x470\n[183047.856981]  kthread+0x134/0x138\n[183047.860283]  ret_from_fork+0x10/0x18\n[183047.863931] Code: f9407a80 528000e2 39409281 72a04002 (b9405800)\n[183047.870097] kernel fault(0x1) notification starting on CPU 0\n[183047.875828] kernel fault(0x1) notification finished on CPU 0\n[183047.881559] Modules linked in: unibsp(OE) hns3(OE) hclge(OE)\nhnae3(OE) mem_drv(OE) hisi_sas_v3_hw(OE) hisi_sas_main(OE)\n[183047.892418] ---[ end trace 4cc26083fc11b783  ]---\n[183047.897107] Kernel panic - not syncing: Fatal exception\n[183047.902403] kernel fault(0x5) notification starting on CPU 0\n[183047.908134] kernel fault(0x5) notification finished on CPU 0\n[183047.913865] SMP: stopping secondary CPUs\n[183047.917861] Kernel Offset: disabled\n[183047.921422] CPU features: 0x2,a2a00a38\n[183047.925243] Memory Limit: none\n[183047.928372] kernel reboot(0x2) notification starting on CPU 0\n[183047.934190] kernel reboot(0x2) notification finished on CPU 0\n[183047.940008] ---[ end Kernel panic - not syncing: Fatal exception\n]---\n\nFixes: 2908d778ab3e (\"[SCSI] aic94xx: new driver\")\nLink: https://lore.kernel.org/r/20191206011118.46909-1-yanaijie@huawei.com\nReported-by: Gao Chuan <gaochuan4@huawei.com>\nReviewed-by: John Garry <john.garry@huawei.com>\nSigned-off-by: Jason Yan <yanaijie@huawei.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
    "before_after_code_files": [
      "drivers/scsi/libsas/sas_discover.c||drivers/scsi/libsas/sas_discover.c"
    ]
  },
  "patch_diff": {
    "drivers/scsi/libsas/sas_discover.c||drivers/scsi/libsas/sas_discover.c": [
      "File: drivers/scsi/libsas/sas_discover.c -> drivers/scsi/libsas/sas_discover.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "81:   else",
      "82:    dev->dev_type = SAS_SATA_DEV;",
      "83:   dev->tproto = SAS_PROTOCOL_SATA;",
      "85:   struct sas_identify_frame *id =",
      "86:    (struct sas_identify_frame *) dev->frame_rcvd;",
      "87:   dev->dev_type = id->dev_type;",
      "88:   dev->iproto = id->initiator_bits;",
      "89:   dev->tproto = id->target_bits;",
      "90:  }",
      "92:  sas_init_dev(dev);",
      "",
      "[Removed Lines]",
      "84:  } else {",
      "",
      "[Added Lines]",
      "84:  } else if (port->oob_mode == SAS_OOB_MODE) {",
      "90:  } else {",
      "95:   sas_put_device(dev);",
      "96:   pr_warn(\"Port %016llx is disconnected when discovering\\n\",",
      "97:    SAS_ADDR(port->attached_sas_addr));",
      "98:   return -ENODEV;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ecb6186cf78803663cbd7c70241bfe1af439ca03",
      "candidate_info": {
        "commit_hash": "ecb6186cf78803663cbd7c70241bfe1af439ca03",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/ecb6186cf78803663cbd7c70241bfe1af439ca03",
        "files": [
          "block/blk-core.c"
        ],
        "message": "block: fix NULL pointer dereference in account statistics with IDE\n\nThe IDE driver creates some passthru requests which never get\nsubmitted to the block layer in such a way that blk_account_io_start()\ngets called. However, the driver still calls __blk_mq_end_request() in\nide_end_rq() which will call blk_account_io_completion() which tries\nto dereferences req->part which is never set. See ide_prep_sense() for\nan example of where these requests come from.\n\nTo fix this, blk_account_io_completion() and blk_account_io_done()\nshould do nothing if req->part is not set.\n\nThe back trace of this bug is:\n\n    BUG: kernel NULL pointer dereference, address: 000002ac\n    #PF: supervisor write access in kernel mode\n    #PF: error_code(0x0002) - not-present page\n    *pde = 00000000\n    Oops: 0002 [#1]\n    CPU: 0 PID: 237 Comm: kworker/0:1H Not tainted\n    5.4.0-rc2-00011-g48d9b0d43105e #1\n    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1\n    04/01/2014\n    Workqueue: kblockd drive_rq_insert_work\n    EIP: blk_account_io_completion+0x7a/0xf0\n    Code: 89 54 24 08 31 d2 89 4c 24 04 31 c9 c7 04 24 02 00 00 00 c1 ee\n    09 e8 f5 21 a6 ff e8 70 5c a7 ff 8b 53 60 8d 04 bd 00 00 00 00 <01> b4\n    02 ac 02 00 00 8b 9a 88 02 00 00 85 db 74 11 85 d2 74 51 8b\n    EAX: 00000000 EBX: f5b80000 ECX: 00000000 EDX: 00000000\n    ESI: 00000000 EDI: 00000000 EBP: f3031e70 ESP: f3031e54\n    DS: 007b ES: 007b FS: 0000 GS: 0000 SS: 0068 EFLAGS: 00010046\n    CR0: 80050033 CR2: 000002ac CR3: 03c25000 CR4: 000406d0\n    Call Trace:\n     <IRQ>\n      blk_update_request+0x85/0x420\n      ide_end_rq+0x38/0xa0\n      ide_complete_rq+0x3d/0x70\n      cdrom_newpc_intr+0x258/0xba0\n      ide_intr+0x135/0x250\n      __handle_irq_event_percpu+0x3e/0x250\n      handle_irq_event_percpu+0x1f/0x50\n      handle_irq_event+0x32/0x60\n      handle_level_irq+0x6c/0x110\n      handle_irq+0x72/0xa0\n      </IRQ>\n      do_IRQ+0x45/0xad\n      common_interrupt+0x115/0x11c\n\nFixes: 48d9b0d43105 (\"block: account statistics for passthrough requests\")\nReported-by: kernel test robot <rong.a.chen@intel.com>\nSigned-off-by: Logan Gunthorpe <logang@deltatee.com>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "block/blk-core.c||block/blk-core.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "block/blk-core.c||block/blk-core.c": [
          "File: block/blk-core.c -> block/blk-core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1311: void blk_account_io_completion(struct request *req, unsigned int bytes)",
          "1312: {",
          "1314:   const int sgrp = op_stat_group(req_op(req));",
          "1315:   struct hd_struct *part;",
          "",
          "[Removed Lines]",
          "1313:  if (blk_do_io_stat(req)) {",
          "",
          "[Added Lines]",
          "1313:  if (req->part && blk_do_io_stat(req)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1332:   const int sgrp = op_stat_group(req_op(req));",
          "1333:   struct hd_struct *part;",
          "",
          "[Removed Lines]",
          "1331:  if (blk_do_io_stat(req) && !(req->rq_flags & RQF_FLUSH_SEQ)) {",
          "",
          "[Added Lines]",
          "1331:  if (req->part && blk_do_io_stat(req) &&",
          "1332:      !(req->rq_flags & RQF_FLUSH_SEQ)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df95467b6d2bfce49667ee4b71c67249b01957f7",
      "candidate_info": {
        "commit_hash": "df95467b6d2bfce49667ee4b71c67249b01957f7",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/df95467b6d2bfce49667ee4b71c67249b01957f7",
        "files": [
          "net/hsr/hsr_device.c"
        ],
        "message": "hsr: fix a NULL pointer dereference in hsr_dev_xmit()\n\nhsr_dev_xmit() calls hsr_port_get_hsr() to find master node and that would\nreturn NULL if master node is not existing in the list.\nBut hsr_dev_xmit() doesn't check return pointer so a NULL dereference\ncould occur.\n\nTest commands:\n    ip netns add nst\n    ip link add veth0 type veth peer name veth1\n    ip link add veth2 type veth peer name veth3\n    ip link set veth1 netns nst\n    ip link set veth3 netns nst\n    ip link set veth0 up\n    ip link set veth2 up\n    ip link add hsr0 type hsr slave1 veth0 slave2 veth2\n    ip a a 192.168.100.1/24 dev hsr0\n    ip link set hsr0 up\n    ip netns exec nst ip link set veth1 up\n    ip netns exec nst ip link set veth3 up\n    ip netns exec nst ip link add hsr1 type hsr slave1 veth1 slave2 veth3\n    ip netns exec nst ip a a 192.168.100.2/24 dev hsr1\n    ip netns exec nst ip link set hsr1 up\n    hping3 192.168.100.2 -2 --flood &\n    modprobe -rv hsr\n\nSplat looks like:\n[  217.351122][ T1635] kasan: CONFIG_KASAN_INLINE enabled\n[  217.352969][ T1635] kasan: GPF could be caused by NULL-ptr deref or user memory access\n[  217.354297][ T1635] general protection fault: 0000 [#1] SMP DEBUG_PAGEALLOC KASAN PTI\n[  217.355507][ T1635] CPU: 1 PID: 1635 Comm: hping3 Not tainted 5.4.0+ #192\n[  217.356472][ T1635] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006\n[  217.357804][ T1635] RIP: 0010:hsr_dev_xmit+0x34/0x90 [hsr]\n[  217.373010][ T1635] Code: 48 8d be 00 0c 00 00 be 04 00 00 00 48 83 ec 08 e8 21 be ff ff 48 8d 78 10 48 ba 00 b\n[  217.376919][ T1635] RSP: 0018:ffff8880cd8af058 EFLAGS: 00010202\n[  217.377571][ T1635] RAX: 0000000000000000 RBX: ffff8880acde6840 RCX: 0000000000000002\n[  217.379465][ T1635] RDX: dffffc0000000000 RSI: 0000000000000004 RDI: 0000000000000010\n[  217.380274][ T1635] RBP: ffff8880acde6840 R08: ffffed101b440d5d R09: 0000000000000001\n[  217.381078][ T1635] R10: 0000000000000001 R11: ffffed101b440d5c R12: ffff8880bffcc000\n[  217.382023][ T1635] R13: ffff8880bffcc088 R14: 0000000000000000 R15: ffff8880ca675c00\n[  217.383094][ T1635] FS:  00007f060d9d1740(0000) GS:ffff8880da000000(0000) knlGS:0000000000000000\n[  217.384289][ T1635] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[  217.385009][ T1635] CR2: 00007faf15381dd0 CR3: 00000000d523c001 CR4: 00000000000606e0\n[  217.385940][ T1635] Call Trace:\n[  217.386544][ T1635]  dev_hard_start_xmit+0x160/0x740\n[  217.387114][ T1635]  __dev_queue_xmit+0x1961/0x2e10\n[  217.388118][ T1635]  ? check_object+0xaf/0x260\n[  217.391466][ T1635]  ? __alloc_skb+0xb9/0x500\n[  217.392017][ T1635]  ? init_object+0x6b/0x80\n[  217.392629][ T1635]  ? netdev_core_pick_tx+0x2e0/0x2e0\n[  217.393175][ T1635]  ? __alloc_skb+0xb9/0x500\n[  217.393727][ T1635]  ? rcu_read_lock_sched_held+0x90/0xc0\n[  217.394331][ T1635]  ? rcu_read_lock_bh_held+0xa0/0xa0\n[  217.395013][ T1635]  ? kasan_unpoison_shadow+0x30/0x40\n[  217.395668][ T1635]  ? __kasan_kmalloc.constprop.4+0xa0/0xd0\n[  217.396280][ T1635]  ? __kmalloc_node_track_caller+0x3a8/0x3f0\n[  217.399007][ T1635]  ? __kasan_kmalloc.constprop.4+0xa0/0xd0\n[  217.400093][ T1635]  ? __kmalloc_reserve.isra.46+0x2e/0xb0\n[  217.401118][ T1635]  ? memset+0x1f/0x40\n[  217.402529][ T1635]  ? __alloc_skb+0x317/0x500\n[  217.404915][ T1635]  ? arp_xmit+0xca/0x2c0\n[ ... ]\n\nFixes: 311633b60406 (\"hsr: switch ->dellink() to ->ndo_uninit()\")\nAcked-by: Cong Wang <xiyou.wangcong@gmail.com>\nSigned-off-by: Taehee Yoo <ap420073@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/hsr/hsr_device.c||net/hsr/hsr_device.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/hsr/hsr_device.c||net/hsr/hsr_device.c": [
          "File: net/hsr/hsr_device.c -> net/hsr/hsr_device.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:  struct hsr_port *master;",
          "229:  master = hsr_port_get_hsr(hsr, HSR_PT_MASTER);",
          "232:  return NETDEV_TX_OK;",
          "233: }",
          "",
          "[Removed Lines]",
          "230:  skb->dev = master->dev;",
          "231:  hsr_forward_skb(skb, master);",
          "",
          "[Added Lines]",
          "230:  if (master) {",
          "231:   skb->dev = master->dev;",
          "232:   hsr_forward_skb(skb, master);",
          "233:  } else {",
          "234:   atomic_long_inc(&dev->tx_dropped);",
          "235:   dev_kfree_skb_any(skb);",
          "236:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16c46fd505fbe33ee480f8bb67aa3807b3507c72",
      "candidate_info": {
        "commit_hash": "16c46fd505fbe33ee480f8bb67aa3807b3507c72",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/16c46fd505fbe33ee480f8bb67aa3807b3507c72",
        "files": [
          "drivers/gpu/drm/i915/gem/i915_gem_domain.c",
          "drivers/gpu/drm/i915/i915_drv.h",
          "drivers/gpu/drm/i915/i915_gem.c"
        ],
        "message": "drm/i915/gem: Avoid rcu_barrier() from shrinker paths\n\nAs i915_gem_object_unbind() waits on an rcu_barrier() to flush vm\nreleases (and destruction of their bound vma), we have to be careful not\nto invoke that barrier from beneath the shrinker:\n\n<4> [430.222671] WARNING: possible circular locking dependency detected\n<4> [430.222673] 5.4.0-rc8-CI-CI_DRM_7508+ #1 Tainted: G     U\n<4> [430.222675] ------------------------------------------------------\n<4> [430.222677] gem_pwrite/2317 is trying to acquire lock:\n<4> [430.222678] ffffffff82248218 (rcu_state.barrier_mutex){+.+.}, at: rcu_barrier+0x23/0x190\n<4> [430.222685]\nbut task is already holding lock:\n<4> [430.222687] ffffffff82263a40 (fs_reclaim){+.+.}, at: fs_reclaim_acquire.part.117+0x0/0x30\n<4> [430.222691]\nwhich lock already depends on the new lock.\n\n<4> [430.222693]\nthe existing dependency chain (in reverse order) is:\n<4> [430.222695]\n-> #2 (fs_reclaim){+.+.}:\n<4> [430.222698]        fs_reclaim_acquire.part.117+0x24/0x30\n<4> [430.222702]        kmem_cache_alloc_trace+0x2a/0x2c0\n<4> [430.222705]        intel_cpuc_prepare+0x37/0x1a0\n<4> [430.222709]        cpuhp_invoke_callback+0x9b/0x9d0\n<4> [430.222712]        _cpu_up+0xa2/0x140\n<4> [430.222714]        do_cpu_up+0x61/0xa0\n<4> [430.222718]        smp_init+0x57/0x96\n<4> [430.222722]        kernel_init_freeable+0xac/0x1c7\n<4> [430.222725]        kernel_init+0x5/0x100\n<4> [430.222728]        ret_from_fork+0x24/0x50\n<4> [430.222729]\n-> #1 (cpu_hotplug_lock.rw_sem){++++}:\n<4> [430.222733]        cpus_read_lock+0x34/0xd0\n<4> [430.222734]        rcu_barrier+0xaa/0x190\n<4> [430.222736]        kernel_init+0x21/0x100\n<4> [430.222737]        ret_from_fork+0x24/0x50\n<4> [430.222739]\n-> #0 (rcu_state.barrier_mutex){+.+.}:\n<4> [430.222742]        __lock_acquire+0x1328/0x15d0\n<4> [430.222743]        lock_acquire+0xa7/0x1c0\n<4> [430.222746]        __mutex_lock+0x9a/0x9d0\n<4> [430.222747]        rcu_barrier+0x23/0x190\n<4> [430.222850]        i915_gem_object_unbind+0x264/0x3d0 [i915]\n<4> [430.222882]        i915_gem_shrink+0x297/0x5f0 [i915]\n<4> [430.222912]        i915_gem_shrink_all+0x38/0x60 [i915]\n<4> [430.222934]        i915_drop_caches_set+0x1f0/0x240 [i915]\n<4> [430.222938]        simple_attr_write+0xb0/0xd0\n<4> [430.222941]        full_proxy_write+0x51/0x80\n<4> [430.222943]        vfs_write+0xb9/0x1d0\n<4> [430.222944]        ksys_write+0x9f/0xe0\n<4> [430.222946]        do_syscall_64+0x4f/0x210\n<4> [430.222948]        entry_SYSCALL_64_after_hwframe+0x49/0xbe\n<4> [430.222950]\nother info that might help us debug this:\n\n<4> [430.222952] Chain exists of:\n  rcu_state.barrier_mutex --> cpu_hotplug_lock.rw_sem --> fs_reclaim\n\n<4> [430.222955]  Possible unsafe locking scenario:\n\n<4> [430.222957]        CPU0                    CPU1\n<4> [430.222958]        ----                    ----\n<4> [430.222960]   lock(fs_reclaim);\n<4> [430.222961]                                lock(cpu_hotplug_lock.rw_sem);\n<4> [430.222963]                                lock(fs_reclaim);\n<4> [430.222964]   lock(rcu_state.barrier_mutex);\n<4> [430.222966]\n *** DEADLOCK ***\n\n<4> [430.222968] 3 locks held by gem_pwrite/2317:\n<4> [430.222969]  #0: ffff88849e2d9408 (sb_writers#14){.+.+}, at: vfs_write+0x1a4/0x1d0\n<4> [430.222973]  #1: ffff888496976db0 (&attr->mutex){+.+.}, at: simple_attr_write+0x36/0xd0\n<4> [430.222976]  #2: ffffffff82263a40 (fs_reclaim){+.+.}, at: fs_reclaim_acquire.part.117+0x0/0x30\n<4> [430.222980]\nstack backtrace:\n<4> [430.222982] CPU: 1 PID: 2317 Comm: gem_pwrite Tainted: G     U            5.4.0-rc8-CI-CI_DRM_7508+ #1\n<4> [430.222985] Hardware name: Intel Corporation Tiger Lake Client Platform/TigerLake U DDR4 SODIMM RVP, BIOS TGLSFWI1.R00.2321.A08.1909162051 09/16/2019\n<4> [430.222989] Call Trace:\n<4> [430.222992]  dump_stack+0x71/0x9b\n<4> [430.222995]  check_noncircular+0x19b/0x1c0\n<4> [430.222998]  ? __lock_acquire+0x1328/0x15d0\n<4> [430.222999]  __lock_acquire+0x1328/0x15d0\n<4> [430.223001]  ? mark_held_locks+0x49/0x70\n<4> [430.223003]  lock_acquire+0xa7/0x1c0\n<4> [430.223005]  ? rcu_barrier+0x23/0x190\n<4> [430.223008]  __mutex_lock+0x9a/0x9d0\n<4> [430.223009]  ? rcu_barrier+0x23/0x190\n<4> [430.223011]  ? rcu_barrier+0x23/0x190\n<4> [430.223013]  ? find_held_lock+0x2d/0x90\n<4> [430.223045]  ? i915_gem_object_unbind+0x24a/0x3d0 [i915]\n<4> [430.223048]  ? rcu_barrier+0x23/0x190\n<4> [430.223049]  rcu_barrier+0x23/0x190\n<4> [430.223081]  i915_gem_object_unbind+0x264/0x3d0 [i915]\n<4> [430.223119]  i915_gem_shrink+0x297/0x5f0 [i915]\n\nCloses: https://gitlab.freedesktop.org/drm/intel/issues/743\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Matthew Auld <matthew.auld@intel.com>\nLink: https://patchwork.freedesktop.org/patch/msgid/20191208161252.3015727-1-chris@chris-wilson.co.uk",
        "before_after_code_files": [
          "drivers/gpu/drm/i915/gem/i915_gem_domain.c||drivers/gpu/drm/i915/gem/i915_gem_domain.c",
          "drivers/gpu/drm/i915/i915_drv.h||drivers/gpu/drm/i915/i915_drv.h",
          "drivers/gpu/drm/i915/i915_gem.c||drivers/gpu/drm/i915/i915_gem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/i915/gem/i915_gem_domain.c||drivers/gpu/drm/i915/gem/i915_gem_domain.c": [
          "File: drivers/gpu/drm/i915/gem/i915_gem_domain.c -> drivers/gpu/drm/i915/gem/i915_gem_domain.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:  i915_gem_object_unlock(obj);",
          "207: }",
          "209: int i915_gem_get_caching_ioctl(struct drm_device *dev, void *data,",
          "",
          "[Removed Lines]",
          "206:  return i915_gem_object_unbind(obj, I915_GEM_OBJECT_UNBIND_ACTIVE);",
          "",
          "[Added Lines]",
          "206:  return i915_gem_object_unbind(obj,",
          "207:           I915_GEM_OBJECT_UNBIND_ACTIVE |",
          "208:           I915_GEM_OBJECT_UNBIND_BARRIER);",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/i915/i915_drv.h||drivers/gpu/drm/i915/i915_drv.h": [
          "File: drivers/gpu/drm/i915/i915_drv.h -> drivers/gpu/drm/i915/i915_drv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1845: int i915_gem_object_unbind(struct drm_i915_gem_object *obj,",
          "1846:       unsigned long flags);",
          "1847: #define I915_GEM_OBJECT_UNBIND_ACTIVE BIT(0)",
          "1849: void i915_gem_runtime_suspend(struct drm_i915_private *dev_priv);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1848: #define I915_GEM_OBJECT_UNBIND_BARRIER BIT(1)",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/i915/i915_gem.c||drivers/gpu/drm/i915/i915_gem.c": [
          "File: drivers/gpu/drm/i915/i915_gem.c -> drivers/gpu/drm/i915/i915_gem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:  list_splice_init(&still_in_list, &obj->vma.list);",
          "179:  spin_unlock(&obj->vma.lock);",
          "183:   goto try_again;",
          "184:  }",
          "",
          "[Removed Lines]",
          "181:  if (ret == -EAGAIN && flags & I915_GEM_OBJECT_UNBIND_ACTIVE) {",
          "",
          "[Added Lines]",
          "181:  if (ret == -EAGAIN && flags & I915_GEM_OBJECT_UNBIND_BARRIER) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aef820799274e3bd66e1857f6aa3ee8cff2c30eb",
      "candidate_info": {
        "commit_hash": "aef820799274e3bd66e1857f6aa3ee8cff2c30eb",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/aef820799274e3bd66e1857f6aa3ee8cff2c30eb",
        "files": [
          "drivers/gpu/drm/i915/gem/i915_gem_context.c"
        ],
        "message": "drm/i915/gem: Pin gen6_ppgtt prior to constructing the request\n\nAll pinning must be done prior to i915_request_create, to avoid\ntimeline->mutex inversions.\n\nHere we slightly abuse the context_barrier_task stages to utilise the\n'skip' decision as an opportunity to acquire the pin on the new ppgtt.\nConsider it s/skip/prepare/. At the moment, we only have on user of\ncontext_barrier_task, so it might be worth breaking it down for the\nspecific task of set-vm and refactor it later if we find a second\npurpose.\n\n<4> [402.377487] WARNING: possible circular locking dependency detected\n<4> [402.377493] 5.4.0-rc8-CI-CI_DRM_7491+ #1 Tainted: G     U\n<4> [402.377497] ------------------------------------------------------\n<4> [402.377502] gem_exec_parall/2506 is trying to acquire lock:\n<4> [402.377507] ffff888403cdac70 (&kernel#2){+.+.}, at: i915_request_create+0x16/0x1c0 [i915]\n<4> [402.377593]\nbut task is already holding lock:\n<4> [402.377597] ffff88835efad550 (&ppgtt->pin_mutex){+.+.}, at: gen6_ppgtt_pin+0x4d/0x110 [i915]\n<4> [402.377660]\nwhich lock already depends on the new lock.\n\n<4> [402.377664]\nthe existing dependency chain (in reverse order) is:\n<4> [402.377668]\n-> #1 (&ppgtt->pin_mutex){+.+.}:\n<4> [402.377674]        __mutex_lock+0x9a/0x9d0\n<4> [402.377713]        gen6_ppgtt_pin+0x4d/0x110 [i915]\n<4> [402.377756]        emit_ppgtt_update+0x1dc/0x370 [i915]\n<4> [402.377801]        context_barrier_task+0x176/0x310 [i915]\n<4> [402.377844]        ctx_setparam+0x400/0xb10 [i915]\n<4> [402.377886]        i915_gem_context_setparam_ioctl+0xc8/0x160 [i915]\n<4> [402.377891]        drm_ioctl_kernel+0xa7/0xf0\n<4> [402.377895]        drm_ioctl+0x2e1/0x390\n<4> [402.377899]        do_vfs_ioctl+0xa0/0x6f0\n<4> [402.377903]        ksys_ioctl+0x35/0x60\n<4> [402.377906]        __x64_sys_ioctl+0x11/0x20\n<4> [402.377910]        do_syscall_64+0x4f/0x210\n<4> [402.377914]        entry_SYSCALL_64_after_hwframe+0x49/0xbe\n<4> [402.377917]\n-> #0 (&kernel#2){+.+.}:\n<4> [402.377923]        __lock_acquire+0x1328/0x15d0\n<4> [402.377926]        lock_acquire+0xa7/0x1c0\n<4> [402.377930]        __mutex_lock+0x9a/0x9d0\n<4> [402.377977]        i915_request_create+0x16/0x1c0 [i915]\n<4> [402.378013]        intel_engine_flush_barriers+0x4c/0x100 [i915]\n<4> [402.378062]        i915_ggtt_pin+0x7d/0x130 [i915]\n<4> [402.378108]        gen6_ppgtt_pin+0x9c/0x110 [i915]\n<4> [402.378148]        ring_context_pin+0x2e/0xc0 [i915]\n<4> [402.378183]        __intel_context_do_pin+0x6b/0x190 [i915]\n<4> [402.378226]        i915_gem_do_execbuffer+0x180c/0x26b0 [i915]\n<4> [402.378268]        i915_gem_execbuffer2_ioctl+0x11b/0x460 [i915]\n<4> [402.378272]        drm_ioctl_kernel+0xa7/0xf0\n<4> [402.378275]        drm_ioctl+0x2e1/0x390\n<4> [402.378279]        do_vfs_ioctl+0xa0/0x6f0\n<4> [402.378282]        ksys_ioctl+0x35/0x60\n<4> [402.378286]        __x64_sys_ioctl+0x11/0x20\n<4> [402.378289]        do_syscall_64+0x4f/0x210\n<4> [402.378292]        entry_SYSCALL_64_after_hwframe+0x49/0xbe\n<4> [402.378295]\nother info that might help us debug this:\n\n<4> [402.378299]  Possible unsafe locking scenario:\n\n<4> [402.378302]        CPU0                    CPU1\n<4> [402.378305]        ----                    ----\n<4> [402.378307]   lock(&ppgtt->pin_mutex);\n<4> [402.378310]                                lock(&kernel#2);\n<4> [402.378314]                                lock(&ppgtt->pin_mutex);\n<4> [402.378317]   lock(&kernel#2);\n<4> [402.378320]\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Andi Shyti <andi.shyti@intel.com>\nLink: https://patchwork.freedesktop.org/patch/msgid/20191206105527.1130413-4-chris@chris-wilson.co.uk",
        "before_after_code_files": [
          "drivers/gpu/drm/i915/gem/i915_gem_context.c||drivers/gpu/drm/i915/gem/i915_gem_context.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/i915/gem/i915_gem_context.c||drivers/gpu/drm/i915/gem/i915_gem_context.c": [
          "File: drivers/gpu/drm/i915/gem/i915_gem_context.c -> drivers/gpu/drm/i915/gem/i915_gem_context.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1140:   }",
          "1142:   intel_ring_advance(rq, cs);",
          "1146:  }",
          "1148:  return 0;",
          "",
          "[Removed Lines]",
          "1143:  } else {",
          "1145:   gen6_ppgtt_pin(i915_vm_to_ppgtt(vm));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1151: static bool skip_ppgtt_update(struct intel_context *ce, void *data)",
          "1152: {",
          "1153:  if (HAS_LOGICAL_RING_CONTEXTS(ce->engine->i915))",
          "1157: }",
          "1159: static int set_ppgtt(struct drm_i915_file_private *file_priv,",
          "",
          "[Removed Lines]",
          "1154:   return !ce->state;",
          "1155:  else",
          "1156:   return !atomic_read(&ce->pin_count);",
          "",
          "[Added Lines]",
          "1150:  if (!test_bit(CONTEXT_ALLOC_BIT, &ce->flags))",
          "1151:   return true;",
          "1154:   return false;",
          "1156:  if (!atomic_read(&ce->pin_count))",
          "1157:   return true;",
          "1160:  if (gen6_ppgtt_pin(i915_vm_to_ppgtt(ce->vm)))",
          "1161:   return true;",
          "1163:  return false;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec2058ac8f507865f7a7c353473bf0f4ebce5fc0",
      "candidate_info": {
        "commit_hash": "ec2058ac8f507865f7a7c353473bf0f4ebce5fc0",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/ec2058ac8f507865f7a7c353473bf0f4ebce5fc0",
        "files": [
          "drivers/soc/fsl/qe/qe_common.c"
        ],
        "message": "soc: fsl: qe: refactor cpm_muram_alloc_common to prevent BUG on error path\n\nIf the kmalloc() fails, we try to undo the gen_pool allocation we've\njust done. Unfortunately, start has already been modified to subtract\nthe GENPOOL_OFFSET bias, so we're freeing something that very likely\ndoesn't exist in the gen_pool, meaning we hit the\n\n kernel BUG at lib/genalloc.c:399!\n Internal error: Oops - BUG: 0 [#1] PREEMPT SMP ARM\n ...\n [<803fd0e8>] (gen_pool_free) from [<80426bc8>] (cpm_muram_alloc_common+0xb0/0xc8)\n [<80426bc8>] (cpm_muram_alloc_common) from [<80426c28>] (cpm_muram_alloc+0x48/0x80)\n [<80426c28>] (cpm_muram_alloc) from [<80428214>] (ucc_slow_init+0x110/0x4f0)\n [<80428214>] (ucc_slow_init) from [<8044a718>] (qe_uart_request_port+0x3c/0x1d8)\n\n(this was tested by just injecting a random failure by adding\n\"|| (get_random_int()&7) == 0\" to the \"if (!entry)\" condition).\n\nRefactor the code so we do the kmalloc() first, meaning that's the\nthing that needs undoing in case gen_pool_alloc_algo() then\nfails. This allows a later cleanup to move the locking from the\ncallers into the _common function, keeping the kmalloc() out of the\ncritical region and then, hopefully (if all the muram_alloc callers\nallow) change it to a GFP_KERNEL allocation.\n\nReviewed-by: Timur Tabi <timur@kernel.org>\nSigned-off-by: Rasmus Villemoes <linux@rasmusvillemoes.dk>\nSigned-off-by: Li Yang <leoyang.li@nxp.com>",
        "before_after_code_files": [
          "drivers/soc/fsl/qe/qe_common.c||drivers/soc/fsl/qe/qe_common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/soc/fsl/qe/qe_common.c||drivers/soc/fsl/qe/qe_common.c": [
          "File: drivers/soc/fsl/qe/qe_common.c -> drivers/soc/fsl/qe/qe_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:  struct muram_block *entry;",
          "120:  s32 start;",
          "122:  start = gen_pool_alloc_algo(muram_pool, size, algo, data);",
          "125:  start = start - GENPOOL_OFFSET;",
          "126:  memset_io(cpm_muram_addr(start), 0, size);",
          "130:  entry->start = start;",
          "131:  entry->size = size;",
          "132:  list_add(&entry->head, &muram_block_list);",
          "134:  return start;",
          "139: }",
          "",
          "[Removed Lines]",
          "123:  if (!start)",
          "124:   goto out2;",
          "127:  entry = kmalloc(sizeof(*entry), GFP_ATOMIC);",
          "128:  if (!entry)",
          "129:   goto out1;",
          "135: out1:",
          "136:  gen_pool_free(muram_pool, start, size);",
          "137: out2:",
          "138:  return -ENOMEM;",
          "",
          "[Added Lines]",
          "122:  entry = kmalloc(sizeof(*entry), GFP_ATOMIC);",
          "123:  if (!entry)",
          "124:   return -ENOMEM;",
          "126:  if (!start) {",
          "127:   kfree(entry);",
          "128:   return -ENOMEM;",
          "129:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}