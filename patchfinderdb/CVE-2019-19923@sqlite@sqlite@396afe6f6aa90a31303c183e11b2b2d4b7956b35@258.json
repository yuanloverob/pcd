{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ced89124d866cd865a8546291f6588f74be2ec36",
      "candidate_info": {
        "commit_hash": "ced89124d866cd865a8546291f6588f74be2ec36",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ced89124d866cd865a8546291f6588f74be2ec36",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "test/window1.test"
        ],
        "message": "Ensure that all the new window-function keywords can still be used as SQL identifiers.\n\nFossilOrigin-Name: a6d61dfd4780eccfce5f7a5ead6c04e3b78bc4a461551fd7dd602550e0d51084",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1fbddf01b1c3fff95b05e2f2f709754e2b514296060b4846518791e7161d9ddb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "218: %endif SQLITE_OMIT_COMPOUND_SELECT",
          "219: %ifndef SQLITE_OMIT_WINDOWFUNC",
          "220:   CURRENT FOLLOWING PARTITION PRECEDING RANGE UNBOUNDED",
          "221: %endif SQLITE_OMIT_WINDOWFUNC",
          "222:   REINDEX RENAME CTIME_KW IF",
          "223:   .",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:   EXCLUDE GROUPS OTHERS TIES",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "924:   ) FROM t1 ORDER BY a ASC;",
          "925: } {{} 200 {} 200 1 3 2 6 3 10 4 14 5 12 a 6 b 7 c 8 d 9 e 10}",
          "927: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "927: #-------------------------------------------------------------------------",
          "928: do_execsql_test 21.0 {",
          "929:   CREATE TABLE keyword_tab(",
          "930:     current, exclude, filter, following, groups, no, others, over,",
          "931:     partition, preceding, range, ties, unbounded, window",
          "932:   );",
          "933: }",
          "934: do_execsql_test 21.1 {",
          "935:   SELECT",
          "936:     current, exclude, filter, following, groups, no, others, over,",
          "937:     partition, preceding, range, ties, unbounded, window",
          "938:   FROM keyword_tab",
          "939: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95d5a880584bfb6f21fc3843737f9a6f4aed3cf1",
      "candidate_info": {
        "commit_hash": "95d5a880584bfb6f21fc3843737f9a6f4aed3cf1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/95d5a880584bfb6f21fc3843737f9a6f4aed3cf1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/indexexpr2.test"
        ],
        "message": "Make indexes on CAST(...) expressions work.\n\nFossilOrigin-Name: 3ef711d98fb239cf24472f124e7b36b0dde33355de5a2c9a3a978bbdd042a735",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/indexexpr2.test||test/indexexpr2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a9faf9033910927c74553e66c474d84ed3386f263cef3eec299e25d8306f410d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "348:     if( iColumn==XN_EXPR ){",
          "349:       pScan->pIdxExpr = pIdx->aColExpr->a[j].pExpr;",
          "350:       pScan->zCollName = pIdx->azColl[j];",
          "351:     }else if( iColumn==pIdx->pTable->iPKey ){",
          "352:       iColumn = XN_ROWID;",
          "353:     }else if( iColumn>=0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:       pScan->idxaff = sqlite3ExprAffinity(pScan->pIdxExpr);",
          "",
          "---------------"
        ],
        "test/indexexpr2.test||test/indexexpr2.test": [
          "File: test/indexexpr2.test -> test/indexexpr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:   SELECT * FROM t5 WHERE abs(a)=2 or abs(b)=9;",
          "250: } {2 4 3 9}",
          "254: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252: #-------------------------------------------------------------------------",
          "253: do_execsql_test 6.0 {",
          "254:   CREATE TABLE x1(a INTEGER PRIMARY KEY, b);",
          "255:   INSERT INTO x1 VALUES",
          "256:       (1, 123), (2, '123'), (3, '123abc'), (4, 123.0), (5, 1234);",
          "257: }",
          "259: do_execsql_test 6.1.1 {",
          "260:   SELECT a, b FROM x1 WHERE CAST(b AS INTEGER) = 123;",
          "261: } {1 123   2 123   3 123abc  4 123.0}",
          "262: do_execsql_test 6.1.2 {",
          "263:   CREATE INDEX x1i ON x1( CAST(b AS INTEGER) );",
          "264:   SELECT a, b FROM x1 WHERE CAST(b AS INTEGER) = 123;",
          "265: } {1 123   2 123   3 123abc  4 123.0}",
          "266: do_eqp_test 6.1.3 {",
          "267:   SELECT a, b FROM x1 WHERE CAST(b AS INTEGER) = 123;",
          "268: } {SEARCH TABLE x1 USING INDEX x1i (<expr>=?)}",
          "270: do_execsql_test 6.2.1 {",
          "271:   SELECT a, b FROM x1 WHERE CAST(b AS TEXT) = 123;",
          "272: } {1 123   2 123}",
          "273: do_execsql_test 6.2.2 {",
          "274:   CREATE INDEX x1i2 ON x1( CAST(b AS TEXT) );",
          "275:   SELECT a, b FROM x1 WHERE CAST(b AS TEXT) = 123;",
          "276: } {1 123   2 123}",
          "277: do_eqp_test 6.2.3 {",
          "278:   SELECT a, b FROM x1 WHERE CAST(b AS TEXT) = 123;",
          "279: } {SEARCH TABLE x1 USING INDEX x1i2 (<expr>=?)}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b42eb3571c35341ae2171fcd5dc63ca9a49784c0",
      "candidate_info": {
        "commit_hash": "b42eb3571c35341ae2171fcd5dc63ca9a49784c0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b42eb3571c35341ae2171fcd5dc63ca9a49784c0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/windowB.test"
        ],
        "message": "Fix a problem with processing CTEs that use a WINDOW clause.\n\nFossilOrigin-Name: ca564d4b5b19fe56842a04f31bb61352e6ae9d72a7e7634eb27ebcf5f670545a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/windowB.test||test/windowB.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 01d71b947a7422081d5c7d6ac2c91b9c936dc41926ab58c92f4a088a64e8c051",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2215:     pNew = sqlite3DbMallocZero(db, sizeof(Window));",
          "2216:     if( pNew ){",
          "2217:       pNew->zName = sqlite3DbStrDup(db, p->zName);",
          "2218:       pNew->pFilter = sqlite3ExprDup(db, p->pFilter, 0);",
          "2219:       pNew->pFunc = p->pFunc;",
          "2220:       pNew->pPartition = sqlite3ExprListDup(db, p->pPartition, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2218:       pNew->zBase = sqlite3DbStrDup(db, p->zBase);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2227:       pNew->pStart = sqlite3ExprDup(db, p->pStart, 0);",
          "2228:       pNew->pEnd = sqlite3ExprDup(db, p->pEnd, 0);",
          "2229:       pNew->pOwner = pOwner;",
          "2230:     }",
          "2231:   }",
          "2232:   return pNew;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2231:       pNew->bImplicitFrame = p->bImplicitFrame;",
          "",
          "---------------"
        ],
        "test/windowB.test||test/windowB.test": [
          "File: test/windowB.test -> test/windowB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:   }",
          "203: }",
          "205: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205: #-------------------------------------------------------------------------",
          "206: reset_db",
          "207: do_execsql_test 4.0 {",
          "208:   CREATE TABLE x(a);",
          "209:   INSERT INTO x VALUES(1);",
          "210:   INSERT INTO x VALUES(2);",
          "211: }",
          "213: do_execsql_test 4.1 {",
          "214:   WITH y AS (",
          "215:       SELECT Row_Number() OVER (win) FROM x WINDOW win AS (PARTITION BY a)",
          "216:   )",
          "217:   SELECT * FROM y;",
          "218: } {",
          "219:   1 1",
          "220: }",
          "222: do_catchsql_test 4.2 {",
          "223:   WITH y AS (",
          "224:     SELECT Row_Number() OVER (win) FROM x WINDOW win AS (PARTITION",
          "225:   BY fake_column))",
          "226:   SELECT * FROM y;",
          "227: } {1 {no such column: fake_column}}",
          "229: do_catchsql_test 4.3 {",
          "230:   SELECT 1 WINDOW win AS (PARTITION BY fake_column);",
          "231: } {0 1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bdf4cf0b900792a0565e743f98707a493f490961",
      "candidate_info": {
        "commit_hash": "bdf4cf0b900792a0565e743f98707a493f490961",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bdf4cf0b900792a0565e743f98707a493f490961",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "test/fuzzdata8.db"
        ],
        "message": "Ensure that sqlite3RenameExprUnmap() does an unmap of the result set alias names in subqueries when ALTER TABLE fails because of a syntax error in a trigger.\n\nFossilOrigin-Name: d3b6f1665f6fb5fc5cf1c0864d779d0b24746ada530f755c7b6ff34766bd2188",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 23e49f9984f74f242602c6e56bfc645585c7c86bcdd585c322ab0d8e20958d86",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "733: static int renameUnmapSelectCb(Walker *pWalker, Select *p){",
          "739:     }",
          "740:   }",
          "741:   return WRC_Continue;",
          "",
          "[Removed Lines]",
          "735:     Parse *pParse = pWalker->pParse;",
          "736:     int i;",
          "737:     for(i=0; i<p->pSrc->nSrc; i++){",
          "738:       sqlite3RenameTokenRemap(pParse, 0, (void*)p->pSrc->a[0].zName);",
          "",
          "[Added Lines]",
          "734:   Parse *pParse = pWalker->pParse;",
          "735:   int i;",
          "736:   if( ALWAYS(p->pEList) ){",
          "737:     ExprList *pList = p->pEList;",
          "738:     for(i=0; i<pList->nExpr; i++){",
          "739:       if( pList->a[i].zName ){",
          "740:         sqlite3RenameTokenRemap(pParse, 0, (void*)pList->a[i].zName);",
          "741:       }",
          "742:     }",
          "743:   }",
          "745:     SrcList *pSrc = p->pSrc;",
          "746:     for(i=0; i<pSrc->nSrc; i++){",
          "747:       sqlite3RenameTokenRemap(pParse, 0, (void*)pSrc->a[i].zName);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1641f11f4c365aa17e2415d1f8018e3b66df0628",
      "candidate_info": {
        "commit_hash": "1641f11f4c365aa17e2415d1f8018e3b66df0628",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1641f11f4c365aa17e2415d1f8018e3b66df0628",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/dbfuzz001.test"
        ],
        "message": "Fix a problem in sqlite3BtreeDelete() in which deleting an entry from a corrupt database can leave a btree page with zero cells.\n\nFossilOrigin-Name: 682053d1e603c21b8085c39db618a39b23ec8d2c4d822fd19634db0e03038ea2",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "test/dbfuzz001.test||test/dbfuzz001.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1190: TESTFIXTURE_FLAGS += -DSQLITE_DEFAULT_PAGE_SIZE=1024",
          "1191: TESTFIXTURE_FLAGS += -DSQLITE_ENABLE_STMTVTAB",
          "1192: TESTFIXTURE_FLAGS += -DSQLITE_ENABLE_DBPAGE_VTAB",
          "1194: TESTFIXTURE_SRC0 = $(TESTSRC2) libsqlite3.la",
          "1195: TESTFIXTURE_SRC1 = sqlite3.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1193: TESTFIXTURE_FLAGS += -DSQLITE_ENABLE_DESERIALIZE",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2298: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_ENABLE_STMTVTAB=1",
          "2299: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_ENABLE_DBPAGE_VTAB=1",
          "2300: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_ENABLE_JSON1=1",
          "2301: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) $(TEST_CCONV_OPTS)",
          "2303: TESTFIXTURE_SRC0 = $(TESTEXT) $(TESTSRC2)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2301: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_ENABLE_DESERIALIZE=1",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1f583c53f3b7318c69f6e235934d97ef9493278feeab0837217076d7d071c35b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c"
        ],
        "test/dbfuzz001.test||test/dbfuzz001.test": [
          "File: test/dbfuzz001.test -> test/dbfuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   return",
          "20: }",
          "22: do_test dbfuzz001-100 {",
          "23:   sqlite3 db {}",
          "24:   db deserialize [decode_hexdb {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: # In the following database file, there is 384 bytes of free space",
          "23: # on page 8 that does not appear on the freeblock list.",
          "24: #",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167:   db eval {PRAGMA integrity_check}",
          "168: } {/Fragmentation of 384 bytes reported as 0 on page 8/}",
          "170: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173: # The DELETE query below deletes the very last cell from page 8.",
          "174: # Prior to a certain fix to sqlite3BtreeDelete() and because of the",
          "175: # corruption to the freeblock list on page 8, this would fail to",
          "176: # cause a rebalance operation, which would leave the btree in a weird",
          "177: # state that would lead to segfaults and or assertion faults.",
          "178: #",
          "179: do_execsql_test dbfuzz001-110 {",
          "180:   DELETE FROM t3 WHERE x IS NOT NULL AND +rowid=6;",
          "181: } {}",
          "",
          "---------------"
        ]
      }
    }
  ]
}