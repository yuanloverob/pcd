{
  "cve_id": "CVE-2017-0028",
  "cve_desc": "A remote code execution vulnerability exists when Microsoft scripting engine improperly accesses objects in memory. The vulnerability could corrupt memory in a way that enables an attacker to execute arbitrary code in the context of the current user. An attacker who successfully exploited the vulnerability could gain the same user rights as the current user, aka \"Scripting Engine Memory Corruption Vulnerability.\"",
  "repo": "Microsoft/ChakraCore",
  "patch_hash": "402f3d967c0a905ec5b9ca9c240783d3f2c15724",
  "patch_info": {
    "commit_hash": "402f3d967c0a905ec5b9ca9c240783d3f2c15724",
    "repo": "Microsoft/ChakraCore",
    "commit_url": "https://github.com/Microsoft/ChakraCore/commit/402f3d967c0a905ec5b9ca9c240783d3f2c15724",
    "files": [
      "lib/Parser/Parse.cpp",
      "test/es6/lambda-params-shadow.js"
    ],
    "message": "[CVE-2017-0028] Fix binding of 'async' identifier in the presence of async arrow function.",
    "before_after_code_files": [
      "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp",
      "test/es6/lambda-params-shadow.js||test/es6/lambda-params-shadow.js"
    ]
  },
  "patch_diff": {
    "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp": [
      "File: lib/Parser/Parse.cpp -> lib/Parser/Parse.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "2863:     _Inout_opt_ charcount_t *plastRParen /*= nullptr*/)",
      "2864: {",
      "2865:     ParseNodePtr pnode = nullptr;",
      "2866:     charcount_t ichMin = 0;",
      "2867:     size_t iecpMin = 0;",
      "2868:     size_t iuMin;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2866:     PidRefStack *savedTopAsyncRef = nullptr;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2915:                 isLambdaExpr = true;",
      "2916:                 goto LFunction;",
      "2917:             }",
      "2918:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2919:             else if (m_token.tk == tkLParen)",
      "2920:             {",
      "2924:                 savedTopAsyncRef = pid->GetTopRef();",
      "2925:             }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3270:     pnode = ParsePostfixOperators<buildAST>(pnode, fAllowCall, fInNew, isAsyncExpr, &fCanAssign, &term, pfIsDotOrIndex);",
      "3273:     if (pToken && term.tk == tkID)",
      "3274:     {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3280:     if (savedTopAsyncRef != nullptr &&",
      "3281:         this->m_token.tk == tkDArrow)",
      "3282:     {",
      "3285:         for (IdentPtr pid = wellKnownPropertyPids.async; pid->GetTopRef() != savedTopAsyncRef;)",
      "3286:         {",
      "3287:             Assert(pid->GetTopRef() != nullptr);",
      "3288:             pid->RemovePrevPidRef(nullptr);",
      "3289:         }",
      "3290:     }",
      "",
      "---------------"
    ],
    "test/es6/lambda-params-shadow.js||test/es6/lambda-params-shadow.js": [
      "File: test/es6/lambda-params-shadow.js -> test/es6/lambda-params-shadow.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "18:     }",
      "19: }",
      "20: let b = new B();",
      "22:     WScript.Echo('fail');",
      "23: }",
      "",
      "[Removed Lines]",
      "21: if (count !== 3) {",
      "",
      "[Added Lines]",
      "21: class async extends A {",
      "22:     constructor() {",
      "23:         super();",
      "24:         let Q = async A => { A };",
      "25:     }",
      "26: }",
      "27: let a = new async();",
      "28: if (count !== 4) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1750d475e26e52bbcd7dbf36d7553c9b1263da4b",
      "candidate_info": {
        "commit_hash": "1750d475e26e52bbcd7dbf36d7553c9b1263da4b",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/1750d475e26e52bbcd7dbf36d7553c9b1263da4b",
        "files": [
          "lib/Runtime/Base/Debug.cpp",
          "lib/Runtime/Language/JavascriptStackWalker.cpp",
          "lib/Runtime/Language/JavascriptStackWalker.h",
          "lib/Runtime/Language/StackTraceArguments.cpp",
          "lib/Runtime/Library/ArgumentsObject.cpp",
          "lib/Runtime/Library/JavascriptFunction.cpp"
        ],
        "message": "[CVE-2017-0138] fix issue with ExtraArg not being accounted correctly in stackwalker",
        "before_after_code_files": [
          "lib/Runtime/Base/Debug.cpp||lib/Runtime/Base/Debug.cpp",
          "lib/Runtime/Language/JavascriptStackWalker.cpp||lib/Runtime/Language/JavascriptStackWalker.cpp",
          "lib/Runtime/Language/JavascriptStackWalker.h||lib/Runtime/Language/JavascriptStackWalker.h",
          "lib/Runtime/Language/StackTraceArguments.cpp||lib/Runtime/Language/StackTraceArguments.cpp",
          "lib/Runtime/Library/ArgumentsObject.cpp||lib/Runtime/Library/ArgumentsObject.cpp",
          "lib/Runtime/Library/JavascriptFunction.cpp||lib/Runtime/Library/JavascriptFunction.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Runtime/Base/Debug.cpp||lib/Runtime/Base/Debug.cpp": [
          "File: lib/Runtime/Base/Debug.cpp -> lib/Runtime/Base/Debug.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:             Js::JavascriptFunction *jsFunc = walker.GetCurrentFunction();",
          "34:             Js::FunctionBody * jsBody = jsFunc->GetFunctionBody();",
          "36:             const WCHAR* sourceFileName = _u(\"NULL\");",
          "37:             ULONG line = 0; LONG column = 0;",
          "38:             walker.GetSourcePosition(&sourceFileName, &line, &column);",
          "40:             StringCchPrintf(buffer, _countof(buffer), _u(\"%s [%s] (0x%p, Args=%u\"), jsBody->GetDisplayName(), jsBody->GetDebugNumberSet(debugStringBuffer), jsFunc,",
          "42:             sb.AppendSz(buffer);",
          "45:             {",
          "46:                 StringCchPrintf(buffer, _countof(buffer), _u(\", 0x%p\"), walker.GetJavascriptArgs()[i]);",
          "47:                 sb.AppendSz(buffer);",
          "",
          "[Removed Lines]",
          "35:             Js::CallInfo const * callInfo = walker.GetCallInfo();",
          "41:                 callInfo->Count);",
          "44:             for (uint i = 0; i < callInfo->Count; i++)",
          "",
          "[Added Lines]",
          "35:             const Js::CallInfo callInfo = walker.GetCallInfo();",
          "41:                 callInfo.Count);",
          "44:             for (uint i = 0; i < callInfo.Count; i++)",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptStackWalker.cpp||lib/Runtime/Language/JavascriptStackWalker.cpp": [
          "File: lib/Runtime/Language/JavascriptStackWalker.cpp -> lib/Runtime/Language/JavascriptStackWalker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:         Assert(IsJavascriptFrame());",
          "155:         AssertMsg(this->GetCurrentFunction()->IsScriptFunction(), \"GetPermanentArguments should not be called for non-script function as there is no slot allocated for it.\");",
          "158:         if (paramCount == 0)",
          "159:         {",
          "",
          "[Removed Lines]",
          "157:         const uint32 paramCount = GetCallInfo()->Count;",
          "",
          "[Added Lines]",
          "157:         const uint32 paramCount = GetCallInfo().Count;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:         else",
          "207: #endif",
          "208:         {",
          "211:             {",
          "213:                 return false;",
          "",
          "[Removed Lines]",
          "209:             CallInfo const *callInfo = this->GetCallInfo();",
          "210:             if (callInfo->Count == 0)",
          "",
          "[Added Lines]",
          "209:             const CallInfo callInfo = this->GetCallInfo();",
          "210:             if (callInfo.Count == 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "218:         }",
          "219:     }",
          "222:     {",
          "224:     }",
          "226:     BOOL JavascriptStackWalker::IsCallerGlobalFunction() const",
          "227:     {",
          "230:         JavascriptFunction* function = this->GetCurrentFunction();",
          "231:         if (IsLibraryStackFrameEnabled(this->scriptContext) && !function->IsScriptFunction())",
          "",
          "[Removed Lines]",
          "221:     BOOL IsEval(const CallInfo* callInfo)",
          "223:         return (callInfo->Flags & CallFlags_Eval) != 0;",
          "228:         CallInfo const* callInfo = this->GetCallInfo();",
          "",
          "[Added Lines]",
          "221:     BOOL IsEval(CallInfo callInfo)",
          "223:         return (callInfo.Flags & CallFlags_Eval) != 0;",
          "228:         const CallInfo callInfo = this->GetCallInfo();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "241:         else",
          "242:         {",
          "243:             AssertMsg(FALSE, \"Here we should only have script functions which were already parsed/deserialized.\");",
          "245:         }",
          "246:     }",
          "248:     BOOL JavascriptStackWalker::IsEvalCaller() const",
          "249:     {",
          "252:     }",
          "254:     Var JavascriptStackWalker::GetCurrentNativeArgumentsObject() const",
          "",
          "[Removed Lines]",
          "244:             return callInfo->Count == 0 || IsEval(callInfo);",
          "250:         CallInfo const* callInfo = this->GetCallInfo();",
          "251:         return (callInfo->Flags & CallFlags_Eval) != 0;",
          "",
          "[Added Lines]",
          "244:             return callInfo.Count == 0 || IsEval(callInfo);",
          "250:         const CallInfo callInfo = this->GetCallInfo();",
          "251:         return (callInfo.Flags & CallFlags_Eval) != 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "835:             if (this->IsJavascriptFrame() && this->GetCurrentFunction() == funcTarget)",
          "836:             {",
          "839:                 return true;",
          "840:             }",
          "841:         }",
          "",
          "[Removed Lines]",
          "838:                 Assert( !(this->GetCallInfo()->Flags & CallFlags_InternalFrame) );",
          "",
          "[Added Lines]",
          "838:                 Assert( !(this->GetCallInfo().Flags & CallFlags_InternalFrame) );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1012:         return GetCurrentFunction(false);",
          "1013:     }",
          "1016:     {",
          "1017:         Assert(this->IsJavascriptFrame());",
          "1018:         if (includeInlinedFrames && inlinedFramesBeingWalked)",
          "1019:         {",
          "1023:         }",
          "1024:         else if (this->GetCurrentFunction()->GetFunctionInfo()->IsCoroutine())",
          "1025:         {",
          "1026:             JavascriptGenerator* gen = JavascriptGenerator::FromVar(this->GetCurrentArgv()[JavascriptFunctionArgIndex_This]);",
          "1028:         }",
          "1029:         else if (this->isNativeLibraryFrame)",
          "1030:         {",
          "1033:         }",
          "1034:         else",
          "1035:         {",
          "1037:         }",
          "1038:     }",
          "1041:     {",
          "1042:         return GetCallInfo(false);",
          "1043:     }",
          "",
          "[Removed Lines]",
          "1015:     CallInfo const * JavascriptStackWalker::GetCallInfo(bool includeInlinedFrames /* = true */) const",
          "1022:             return (CallInfo const *)&inlinedFrameCallInfo;",
          "1027:             return &gen->GetArguments().Info;",
          "1032:             return &this->prevNativeLibraryEntry->callInfo;",
          "1036:             return (CallInfo const *)&this->GetCurrentArgv()[JavascriptFunctionArgIndex_CallInfo];",
          "1040:     CallInfo const *JavascriptStackWalker::GetCallInfoFromPhysicalFrame() const",
          "",
          "[Added Lines]",
          "1015:     CallInfo JavascriptStackWalker::GetCallInfo(bool includeInlinedFrames /* = true */) const",
          "1018:         CallInfo callInfo;",
          "1023:             callInfo = inlinedFrameCallInfo;",
          "1028:             callInfo = gen->GetArguments().Info;",
          "1033:             callInfo = this->prevNativeLibraryEntry->callInfo;",
          "1037:             callInfo = *(CallInfo const *)&this->GetCurrentArgv()[JavascriptFunctionArgIndex_CallInfo];",
          "1040:         if (callInfo.Flags & Js::CallFlags_ExtraArg)",
          "1041:         {",
          "1042:             callInfo.Flags = (CallFlags)(callInfo.Flags & ~Js::CallFlags_ExtraArg);",
          "1043:             callInfo.Count--;",
          "1044:         }",
          "1046:         return callInfo;",
          "1049:     CallInfo JavascriptStackWalker::GetCallInfoFromPhysicalFrame() const",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1081:     bool JavascriptStackWalker::IsCurrentPhysicalFrameForLoopBody() const",
          "1082:     {",
          "1084:     }",
          "1086:     bool JavascriptStackWalker::IsWalkable(ScriptContext *scriptContext)",
          "",
          "[Removed Lines]",
          "1083:         return !!(this->GetCallInfoFromPhysicalFrame()->Flags & CallFlags_InternalFrame);",
          "",
          "[Added Lines]",
          "1092:         return !!(this->GetCallInfoFromPhysicalFrame().Flags & CallFlags_InternalFrame);",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptStackWalker.h||lib/Runtime/Language/JavascriptStackWalker.h": [
          "File: lib/Runtime/Language/JavascriptStackWalker.h -> lib/Runtime/Language/JavascriptStackWalker.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:         JavascriptFunction *GetCurrentFunction(bool includeInlinedFrames = true) const;",
          "214:         void SetCurrentFunction(JavascriptFunction *  function);",
          "217:         bool GetThis(Var *pThis, int moduleId) const;",
          "218:         Js::Var * GetJavascriptArgs() const;",
          "219:         void **GetCurrentArgv() const;",
          "",
          "[Removed Lines]",
          "215:         CallInfo const *GetCallInfo(bool includeInlinedFrames = true) const;",
          "216:         CallInfo const *GetCallInfoFromPhysicalFrame() const;",
          "",
          "[Added Lines]",
          "215:         CallInfo GetCallInfo(bool includeInlinedFrames = true) const;",
          "216:         CallInfo GetCallInfoFromPhysicalFrame() const;",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/StackTraceArguments.cpp||lib/Runtime/Language/StackTraceArguments.cpp": [
          "File: lib/Runtime/Language/StackTraceArguments.cpp -> lib/Runtime/Language/StackTraceArguments.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:         types = 0;",
          "69:         if (!walker.IsCallerGlobalFunction())",
          "70:         {",
          "72:             if (numberOfArguments > 0) numberOfArguments --; // Don't consider 'this'",
          "74:             {",
          "75:                 Assert(numberOfArguments > 0 );",
          "",
          "[Removed Lines]",
          "71:             int64 numberOfArguments = walker.GetCallInfo()->Count;",
          "73:             if (walker.GetCallInfo()->Flags & Js::CallFlags_ExtraArg)",
          "",
          "[Added Lines]",
          "71:             const CallInfo callInfo = walker.GetCallInfo();",
          "72:             int64 numberOfArguments = callInfo.Count;",
          "74:             if (callInfo.Flags & Js::CallFlags_ExtraArg)",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/ArgumentsObject.cpp||lib/Runtime/Library/ArgumentsObject.cpp": [
          "File: lib/Runtime/Library/ArgumentsObject.cpp -> lib/Runtime/Library/ArgumentsObject.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:         AssertMsg(JavascriptOperators::GetTypeId(funcCaller) == TypeIds_Function, \"non function caller\");",
          "74:         if (paramCount == 0 || (flags & CallFlags_Eval))",
          "75:         {",
          "",
          "[Removed Lines]",
          "70:         CallInfo const *callInfo = walker->GetCallInfo();",
          "71:         uint32 paramCount = callInfo->Count;",
          "72:         CallFlags flags = callInfo->Flags;",
          "",
          "[Added Lines]",
          "70:         const CallInfo callInfo = walker->GetCallInfo();",
          "71:         uint32 paramCount = callInfo.Count;",
          "72:         CallFlags flags = callInfo.Flags;",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptFunction.cpp||lib/Runtime/Library/JavascriptFunction.cpp": [
          "File: lib/Runtime/Library/JavascriptFunction.cpp -> lib/Runtime/Library/JavascriptFunction.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2760:                 Var args = nullptr;",
          "2764:                 args = JavascriptOperators::LoadHeapArguments(",
          "2766:                     walker.GetJavascriptArgs(),",
          "2767:                     scriptContext->GetLibrary()->GetNull(),",
          "2768:                     scriptContext->GetLibrary()->GetNull(),",
          "",
          "[Removed Lines]",
          "2763:                 CallInfo const *callInfo = walker.GetCallInfo();",
          "2765:                     this, callInfo->Count - 1,",
          "",
          "[Added Lines]",
          "2763:                 const CallInfo callInfo = walker.GetCallInfo();",
          "2765:                     this, callInfo.Count - 1,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db504eba489528434dfb56257b0f202209741fe9",
      "candidate_info": {
        "commit_hash": "db504eba489528434dfb56257b0f202209741fe9",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/db504eba489528434dfb56257b0f202209741fe9",
        "files": [
          "lib/Runtime/Library/JavascriptArray.cpp"
        ],
        "message": "[CVE-2017-0141] ReverseHelper Heap Overflow",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5282:                 pArr->SetHasNoMissingValues(false);",
          "5283:             }",
          "5285:             SparseArraySegmentBase* seg = pArr->head;",
          "5286:             SparseArraySegmentBase *prevSeg = nullptr;",
          "5287:             SparseArraySegmentBase *nextSeg = nullptr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5288:             length = pArr->length;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd6f65b326119d514443231b74965b035e78bfb5",
      "candidate_info": {
        "commit_hash": "cd6f65b326119d514443231b74965b035e78bfb5",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/cd6f65b326119d514443231b74965b035e78bfb5",
        "files": [
          "test/Array/array_conv_src.js"
        ],
        "message": "add copyright notice to new UT",
        "before_after_code_files": [
          "test/Array/array_conv_src.js||test/Array/array_conv_src.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/Array/array_conv_src.js||test/Array/array_conv_src.js": [
          "File: test/Array/array_conv_src.js -> test/Array/array_conv_src.js"
        ]
      }
    },
    {
      "candidate_hash": "f1a8c50ed66c169cb32b75cb5265a6ae7e76afc6",
      "candidate_info": {
        "commit_hash": "f1a8c50ed66c169cb32b75cb5265a6ae7e76afc6",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/f1a8c50ed66c169cb32b75cb5265a6ae7e76afc6",
        "files": [
          "lib/Runtime/Language/AsmJs.cpp"
        ],
        "message": "[CVE-2017-0010] asm.js return object with no properties should not validate",
        "before_after_code_files": [
          "lib/Runtime/Language/AsmJs.cpp||lib/Runtime/Language/AsmJs.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Runtime/Language/AsmJs.cpp||lib/Runtime/Language/AsmJs.cpp": [
          "File: lib/Runtime/Language/AsmJs.cpp -> lib/Runtime/Language/AsmJs.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "965:         }",
          "967:         ParseNode* objectElement = ParserWrapper::GetUnaryNode(objNode);",
          "968:         while( objectElement )",
          "969:         {",
          "970:             ParseNode* member = nullptr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "968:         if (!objectElement)",
          "969:         {",
          "970:             return m.Fail(node, _u(\"Return object must not be empty\"));",
          "971:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70e23dc5de959cc2f9aed25f17187714af853fde",
      "candidate_info": {
        "commit_hash": "70e23dc5de959cc2f9aed25f17187714af853fde",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/70e23dc5de959cc2f9aed25f17187714af853fde",
        "files": [
          "lib/Backend/amd64/LowererMDArch.cpp",
          "lib/Backend/i386/LowererMDArch.cpp"
        ],
        "message": "fix bug in lowering of simd.js bound checks",
        "before_after_code_files": [
          "lib/Backend/amd64/LowererMDArch.cpp||lib/Backend/amd64/LowererMDArch.cpp",
          "lib/Backend/i386/LowererMDArch.cpp||lib/Backend/i386/LowererMDArch.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Backend/amd64/LowererMDArch.cpp||lib/Backend/amd64/LowererMDArch.cpp": [
          "File: lib/Backend/amd64/LowererMDArch.cpp -> lib/Backend/amd64/LowererMDArch.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1178:             Lowerer::InsertMove(tmp, cmpOpnd, helperLabel);",
          "1183:             lowererMD->m_lowerer->InsertCompareBranch(tmp, instr->UnlinkSrc2(), Js::OpCode::BrGt_A, true, helperLabel, helperLabel);",
          "",
          "[Removed Lines]",
          "1180:             Lowerer::InsertAdd(false, tmp, tmp, IR::IntConstOpnd::New((uint32)dataWidth, tmp->GetType(), m_func, true), helperLabel);",
          "",
          "[Added Lines]",
          "1180:             Lowerer::InsertAdd(true, tmp, tmp, IR::IntConstOpnd::New((uint32)dataWidth, tmp->GetType(), m_func, true), helperLabel);",
          "1182:             Lowerer::InsertBranch(Js::OpCode::JB, helperLabel, helperLabel);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1254:             Lowerer::InsertMove(tmp, cmpOpnd, helperLabel);",
          "1259:             lowererMD->m_lowerer->InsertCompareBranch(tmp, instr->UnlinkSrc2(), Js::OpCode::BrGt_A, true, helperLabel, helperLabel);",
          "",
          "[Removed Lines]",
          "1256:             Lowerer::InsertAdd(false, tmp, tmp, IR::IntConstOpnd::New((uint32)dataWidth, tmp->GetType(), m_func, true), helperLabel);",
          "",
          "[Added Lines]",
          "1258:             Lowerer::InsertAdd(true, tmp, tmp, IR::IntConstOpnd::New((uint32)dataWidth, tmp->GetType(), m_func, true), helperLabel);",
          "1260:             Lowerer::InsertBranch(Js::OpCode::JB, helperLabel, helperLabel);",
          "",
          "---------------"
        ],
        "lib/Backend/i386/LowererMDArch.cpp||lib/Backend/i386/LowererMDArch.cpp": [
          "File: lib/Backend/i386/LowererMDArch.cpp -> lib/Backend/i386/LowererMDArch.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1028:         Lowerer::InsertMove(tmp, cmpOpnd, helperLabel);",
          "1033:         lowererMD->m_lowerer->InsertCompareBranch(tmp, instr->UnlinkSrc2(), Js::OpCode::BrGt_A, true, helperLabel, helperLabel);",
          "",
          "[Removed Lines]",
          "1030:         Lowerer::InsertAdd(false, tmp, tmp, IR::IntConstOpnd::New((uint32)dataWidth, tmp->GetType(), m_func, true), helperLabel);",
          "",
          "[Added Lines]",
          "1030:         Lowerer::InsertAdd(true, tmp, tmp, IR::IntConstOpnd::New((uint32)dataWidth, tmp->GetType(), m_func, true), helperLabel);",
          "1032:         Lowerer::InsertBranch(Js::OpCode::JB, helperLabel, helperLabel);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1088:         Lowerer::InsertMove(tmp, cmpOpnd, helperLabel);",
          "1093:         lowererMD->m_lowerer->InsertCompareBranch(tmp, instr->UnlinkSrc2(), Js::OpCode::BrGt_A, true, helperLabel, helperLabel);",
          "",
          "[Removed Lines]",
          "1090:         Lowerer::InsertAdd(false, tmp, tmp, IR::IntConstOpnd::New((uint32)dataWidth, tmp->GetType(), m_func, true), helperLabel);",
          "",
          "[Added Lines]",
          "1092:         Lowerer::InsertAdd(true, tmp, tmp, IR::IntConstOpnd::New((uint32)dataWidth, tmp->GetType(), m_func, true), helperLabel);",
          "1094:         Lowerer::InsertBranch(Js::OpCode::JB, helperLabel, helperLabel);",
          "",
          "---------------"
        ]
      }
    }
  ]
}