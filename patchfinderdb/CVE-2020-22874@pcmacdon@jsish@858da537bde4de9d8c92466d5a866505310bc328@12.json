{
  "cve_id": "CVE-2020-22874",
  "cve_desc": "Integer overflow vulnerability in function Jsi_ObjArraySizer in jsish before 3.0.8, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "858da537bde4de9d8c92466d5a866505310bc328",
  "patch_info": {
    "commit_hash": "858da537bde4de9d8c92466d5a866505310bc328",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/858da537bde4de9d8c92466d5a866505310bc328",
    "files": [
      "md/Reference.md",
      "src/jsi.h",
      "src/jsiArray.c",
      "src/jsiCData.c",
      "src/jsiInt.h",
      "src/jsiInterp.c",
      "src/jsiObj.c",
      "src/jsiValue.c",
      "tools/protos.jsi",
      "www/reference.wiki"
    ],
    "message": "Release \"3.0.8\": Address Array alloc sizing issues from issue \"integer overflow and buffer overflow #5\".\n\nFossilOrigin-Name: 8c46a1d465b358110dcfb271721d35fe843a1b52f2fa24ccc10094eb8aaf6fe4",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiArray.c||src/jsiArray.c",
      "src/jsiCData.c||src/jsiCData.c",
      "src/jsiInt.h||src/jsiInt.h",
      "src/jsiInterp.c||src/jsiInterp.c",
      "src/jsiObj.c||src/jsiObj.c",
      "src/jsiValue.c||src/jsiValue.c",
      "tools/protos.jsi||tools/protos.jsi",
      "www/reference.wiki||www/reference.wiki"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 7",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 8",
      "",
      "---------------"
    ],
    "src/jsiArray.c||src/jsiArray.c": [
      "File: src/jsiArray.c -> src/jsiArray.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "267:             rc = jsi_ArrayFlatSub(interp, nobj, t , depth-1);",
      "268:         else if (!Jsi_ValueIsUndef(interp, t))",
      "269:             Jsi_ObjArrayAdd(interp, nobj, t);",
      "271:             return Jsi_LogError(\"array size exceeded\");",
      "272:     }",
      "273:     return rc;",
      "",
      "[Removed Lines]",
      "270:         if ((++n + clen)>interp->maxArrayList)",
      "",
      "[Added Lines]",
      "270:         if ((uint)(++n + clen)>interp->maxArrayList)",
      "",
      "---------------"
    ],
    "src/jsiCData.c||src/jsiCData.c": [
      "File: src/jsiCData.c -> src/jsiCData.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1276:             sf->flags |= JSI_OPT_BITSET_ENUM;",
      "1277:         }",
      "1278:         if (sf->arrSize) {",
      "1281:                 goto bail;",
      "1282:             }",
      "1283:             if (sf->bits || isEnum) {",
      "",
      "[Removed Lines]",
      "1279:             if (sf->arrSize>MAX_ARRAY_LIST) {",
      "1280:                 rc = Jsi_LogError(\"array size too big: %d >= %d\", sf->arrSize, MAX_ARRAY_LIST);",
      "",
      "[Added Lines]",
      "1279:             if (sf->arrSize>interp->maxArrayList) {",
      "1280:                 rc = Jsi_LogError(\"array size too big: %d >= %d\", sf->arrSize, interp->maxArrayList);",
      "",
      "---------------"
    ],
    "src/jsiInt.h||src/jsiInt.h": [
      "File: src/jsiInt.h -> src/jsiInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1259:     Jsi_Value *Top_object;",
      "1260:     Jsi_ScopeStrs *scopes[JSI_MAX_SCOPE];",
      "1261:     int cur_scope;",
      "1263:     int delRBCnt;",
      "1264:     Jsi_Func *activeFunc;  // Currently active function call.",
      "1265:     Jsi_Func *prevActiveFunc;  // Prev active function call.",
      "",
      "[Removed Lines]",
      "1262:     int maxArrayList;",
      "",
      "[Added Lines]",
      "1262:     uint maxArrayList;",
      "",
      "---------------"
    ],
    "src/jsiInterp.c||src/jsiInterp.c": [
      "File: src/jsiInterp.c -> src/jsiInterp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "100:     JSI_OPT(INT,   Jsi_Interp, lockTimeout, .help=\"Thread time-out for mutex lock acquires (milliseconds)\" ),",
      "101:     JSI_OPT(CUSTOM,Jsi_Interp, logOpts,     .help=\"Options for log output to add file/line/time\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=jsi_InterpLogOptions),",
      "102:     JSI_OPT(INT,   Jsi_Interp, maxDepth,    .help=\"Depth limit of recursive function calls (1000)\", .flags=JSI_OPT_LOCKSAFE),",
      "104:     JSI_OPT(INT,   Jsi_Interp, maxIncDepth, .help=\"Maximum allowed source/require nesting depth (50)\", .flags=JSI_OPT_LOCKSAFE),",
      "105:     JSI_OPT(INT,   Jsi_Interp, maxInterpDepth,.help=\"Maximum nested subinterp create depth (10)\", .flags=JSI_OPT_LOCKSAFE),",
      "106:     JSI_OPT(INT,   Jsi_Interp, maxUserObjs, .help=\"Maximum number of 'new' object calls, eg. File, RegExp, etc\", .flags=JSI_OPT_LOCKSAFE ),",
      "",
      "[Removed Lines]",
      "103:     JSI_OPT(INT,   Jsi_Interp, maxArrayList,.help=\"Maximum array convertable to list (100000)\", .flags=JSI_OPT_LOCKSAFE),",
      "",
      "[Added Lines]",
      "103:     JSI_OPT(UINT,  Jsi_Interp, maxArrayList,.help=\"Maximum array convertable to list (100000)\", .flags=JSI_OPT_LOCKSAFE),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1146:     }",
      "1147:     interp->maxDepth = JSI_MAX_EVAL_DEPTH;",
      "1148:     interp->maxIncDepth = JSI_MAX_INCLUDE_DEPTH;",
      "1149:     interp->typeWarnMax = 50;",
      "1150:     interp->subOpts.dblPrec = __DBL_DECIMAL_DIG__-1;",
      "1151:     interp->subOpts.prompt = \"$ \";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1149:     interp->maxArrayList = MAX_ARRAY_LIST;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1482: #endif",
      "1483:     if (interp->typeCheck.all|interp->typeCheck.parse|interp->typeCheck.funcsig)",
      "1484:         interp->staticFuncsTbl = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
      "1486:     if (!jsiIntData.isInit) {",
      "1487:         jsiIntData.isInit = 1;",
      "1488:         jsi_InitValue(interp, 0);",
      "",
      "[Removed Lines]",
      "1485:     interp->maxArrayList = MAX_ARRAY_LIST;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/jsiObj.c||src/jsiObj.c": [
      "File: src/jsiObj.c -> src/jsiObj.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "76:         if (!cp || !isdigit(*cp))",
      "77:             return JSI_OK;",
      "78:         n = (int)strtol(cp, &ep, 0);",
      "80:             return JSI_OK;",
      "81:         hPtr->f.bits.isarrlist = 1;",
      "82:         if (Jsi_ObjArraySizer(interp, obj, n) <= 0)",
      "",
      "[Removed Lines]",
      "79:         if (n<0 || n >= interp->maxArrayList)",
      "",
      "[Added Lines]",
      "79:         if (n<0 || (uint)n >= interp->maxArrayList)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "415: int Jsi_ObjArraySizer(Jsi_Interp *interp, Jsi_Obj *obj, uint len)",
      "416: {",
      "418:     assert(obj->isarrlist);",
      "419:     if (mod>1)",
      "420:         nsiz = nsiz + ((mod-1) - (nsiz + mod - 1)%mod);",
      "423:         return 0;",
      "424:     }",
      "425:     if (len >= obj->arrMaxSize) {",
      "",
      "[Removed Lines]",
      "417:     int nsiz = len + 1, mod = ALLOC_MOD_SIZE;",
      "421:     if (nsiz > MAX_ARRAY_LIST) {",
      "422:         Jsi_LogError(\"array size too large\");",
      "",
      "[Added Lines]",
      "417:     uint nsiz = len + 1, mod = ALLOC_MOD_SIZE;",
      "421:     if (len >= interp->maxArrayList || nsiz > interp->maxArrayList) {",
      "422:         Jsi_LogError(\"array size too big: %u >= %u\", len, interp->maxArrayList);",
      "",
      "---------------"
    ],
    "src/jsiValue.c||src/jsiValue.c": [
      "File: src/jsiValue.c -> src/jsiValue.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1036:     }",
      "1040:         target->vt == JSI_VT_OBJECT && target->d.obj->arr) {",
      "1041:         return jsi_ObjArraySetDup(interp, target->d.obj, value, arrayindex);",
      "1042:     }",
      "",
      "[Removed Lines]",
      "1039:     if (arrayindex >= 0 && arrayindex < MAX_ARRAY_LIST &&",
      "",
      "[Added Lines]",
      "1039:     if (arrayindex >= 0 && (uint)arrayindex < interp->maxArrayList &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1373:     Jsi_Obj *obj = target->d.obj;",
      "1375:     if (obj->isarrlist) {",
      "1377:             Jsi_ObjArraySet(interp, obj, val, key);",
      "1378:             return JSI_OK;",
      "1379:         }",
      "",
      "[Removed Lines]",
      "1376:         if (key >= 0 && key < interp->maxArrayList) {",
      "",
      "[Added Lines]",
      "1376:         if (key >= 0 && (uint)key < interp->maxArrayList) {",
      "",
      "---------------"
    ],
    "tools/protos.jsi||tools/protos.jsi": [
      "File: tools/protos.jsi -> tools/protos.jsi"
    ],
    "www/reference.wiki||www/reference.wiki": [
      "File: www/reference.wiki -> www/reference.wiki",
      "--- Hunk 1 ---",
      "[Context before]",
      "633: <tr><td>lockTimeout</td><td><i>INT</i></td><td>Thread time-out for mutex lock acquires (milliseconds).</td><td><i></i></td></tr>",
      "634: <tr><td>logOpts</td><td><i><a href='#logOptsOptions'>options</a></i></td><td>Options for log output to add file/line/time.</td><td><i></i></td></tr>",
      "635: <tr><td>maxDepth</td><td><i>INT</i></td><td>Depth limit of recursive function calls (1000).</td><td><i></i></td></tr>",
      "637: <tr><td>maxIncDepth</td><td><i>INT</i></td><td>Maximum allowed source/require nesting depth (50).</td><td><i></i></td></tr>",
      "638: <tr><td>maxInterpDepth</td><td><i>INT</i></td><td>Maximum nested subinterp create depth (10).</td><td><i></i></td></tr>",
      "639: <tr><td>maxUserObjs</td><td><i>INT</i></td><td>Maximum number of 'new' object calls, eg. File, RegExp, etc.</td><td><i></i></td></tr>",
      "",
      "[Removed Lines]",
      "636: <tr><td>maxArrayList</td><td><i>INT</i></td><td>Maximum array convertable to list (100000).</td><td><i></i></td></tr>",
      "",
      "[Added Lines]",
      "636: <tr><td>maxArrayList</td><td><i>UINT</i></td><td>Maximum array convertable to list (100000).</td><td><i></i></td></tr>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a14b026e6d908e567aa73f3a87b623908ca36ab9",
      "candidate_info": {
        "commit_hash": "a14b026e6d908e567aa73f3a87b623908ca36ab9",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/a14b026e6d908e567aa73f3a87b623908ca36ab9",
        "files": [
          "js-demos/log/other.jsi",
          "js-demos/modDebug.jsi",
          "js-demos/module.jsi",
          "js-demos/warndemo.jsi",
          "lib/Testing.jsi",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiFormat.c",
          "src/jsiFunc.c",
          "src/jsiHash.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiOptions.c",
          "src/jsiProto.c",
          "src/jsiPstate.c",
          "src/jsiTree.c",
          "src/jsiUtils.c",
          "src/jsiValue.c",
          "tests/expr.jsi",
          "tests/strict.jsi",
          "tests/syntax.jsi"
        ],
        "message": "Release \"3.1.9\": Fix set/get issues, cleanup typeCheck\n\nFossilOrigin-Name: 349b99793c392c66eff1cd30219eec6cc6a6d077bb324703f31a0ec0240f49af",
        "before_after_code_files": [
          "js-demos/log/other.jsi||js-demos/log/other.jsi",
          "js-demos/modDebug.jsi||js-demos/modDebug.jsi",
          "js-demos/module.jsi||js-demos/module.jsi",
          "js-demos/warndemo.jsi||js-demos/warndemo.jsi",
          "lib/Testing.jsi||lib/Testing.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFormat.c||src/jsiFormat.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiHash.c||src/jsiHash.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiOptions.c||src/jsiOptions.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiPstate.c||src/jsiPstate.c",
          "src/jsiTree.c||src/jsiTree.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "src/jsiValue.c||src/jsiValue.c",
          "tests/expr.jsi||tests/expr.jsi",
          "tests/strict.jsi||tests/strict.jsi",
          "tests/syntax.jsi||tests/syntax.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiValue.c||src/jsiValue.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiValue.c||src/jsiValue.c"
          ]
        }
      },
      "candidate_diff": {
        "js-demos/log/other.jsi||js-demos/log/other.jsi": [
          "File: js-demos/log/other.jsi -> js-demos/log/other.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: provide(other, 1);",
          "27: if (isMain()) {",
          "29:         return runModule(other);",
          "32: ;   other();",
          "33: ;// other('',{badArg:0});",
          "",
          "[Removed Lines]",
          "28:     if (!Interp.conf('unitTest'))",
          "31: ;'  other unit-test';",
          "",
          "[Added Lines]",
          "28:     if (!Interp.conf('testMode'))",
          "31: ;'  other test';",
          "",
          "---------------"
        ],
        "js-demos/modDebug.jsi||js-demos/modDebug.jsi": [
          "File: js-demos/modDebug.jsi -> js-demos/modDebug.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: ;'\\n === Enabling LogDebug in fileSize.jsi only ===';",
          "4: ;require('fileSize');",
          "5: ;fileSize('fileSize.jsi');",
          "7: ;fileSize('fileSize.jsi');",
          "8: ;require('module');",
          "9: ;module([1]);",
          "11: ;module([2]);",
          "13: ;'\\n === Trace function calls in fileSize.jsi ===';",
          "15: ;fileSize('fileSize.jsi');",
          "16: ;module([2]);",
          "17: ;require('fileSize', 0, {traceCall:[]});",
          "",
          "[Removed Lines]",
          "6: ;require('fileSize', 0, {Debug:true, Test:true});",
          "10: ;require('module', 0, {Debug:true, Test:true});",
          "14: ;require('fileSize', 0, {Debug:false, traceCall:['funcs']});",
          "",
          "[Added Lines]",
          "6: ;require('fileSize', 0, {log:{Debug:true, Test:true}});",
          "10: ;require('module', 0, {log:{Debug:true, Test:true}});",
          "14: ;require('fileSize', 0, {log:{Debug:false}, traceCall:['funcs']});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:  === Enabling LogDebug in fileSize.jsi only ==='",
          "34: require('fileSize') ==> 1",
          "35: fileSize('fileSize.jsi') ==> 907",
          "37: fileSize('fileSize.jsi') ==> \"TEST:  Starting\", fileSize.jsi:27, fileSize()",
          "38: \"DEBUG: Len [ \"fileSize.jsi\" ]\", fileSize.jsi:15, getLength()",
          "39: 907",
          "40: require('module') ==> 1",
          "41: module([1]) ==> undefined",
          "43: module([2]) ==> \"TEST:  Starting [ 2 ]\", module.jsi:14, main()",
          "44: \"DEBUG: Done\", module.jsi:23, main()",
          "45: undefined",
          "46: '",
          "47:  === Trace function calls in fileSize.jsi ==='",
          "49: fileSize('fileSize.jsi') ==>   #2: > fileSize() in modDebug.jsi:15",
          "50: \"TEST:  Starting\", fileSize.jsi:27, fileSize()",
          "51: 907",
          "",
          "[Removed Lines]",
          "36: require('fileSize', 0, {Debug:true, Test:true}) ==> 1",
          "42: require('module', 0, {Debug:true, Test:true}) ==> 1",
          "48: require('fileSize', 0, {Debug:false, traceCall:['funcs']}) ==> 1",
          "",
          "[Added Lines]",
          "36: require('fileSize', 0, {log:{Debug:true, Test:true}) ==> 1",
          "42: require('module', 0, {log:{Debug:true, Test:true}) ==> 1",
          "48: require('fileSize', 0, {log:{Debug:false, traceCall:['funcs']}) ==> 1",
          "",
          "---------------"
        ],
        "js-demos/module.jsi||js-demos/module.jsi": [
          "File: js-demos/module.jsi -> js-demos/module.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: provide(module, 1);",
          "31: if (isMain()) {",
          "33:         return runModule(module);",
          "36: ;   module();",
          "37: ;// module('',{badArg:0});",
          "",
          "[Removed Lines]",
          "32:     if (!Interp.conf('unitTest'))",
          "35: ;'  module unit-test';",
          "",
          "[Added Lines]",
          "32:     if (!Interp.conf('testMode'))",
          "35: ;'  module test';",
          "",
          "---------------"
        ],
        "js-demos/warndemo.jsi||js-demos/warndemo.jsi": [
          "File: js-demos/warndemo.jsi -> js-demos/warndemo.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: function warndemoA() {",
          "10: }",
          "",
          "[Removed Lines]",
          "1: #!/usr/local/bin/jsish --I testMode=1 %s",
          "7: Interp.conf({logOpts:{ftail:true}});",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env jsish",
          "5: Interp.conf({noError:true, logOpts:{ftail:true}});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18: =!EXPECTSTART!=",
          "31: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "19: warndemo2.jsi:4: warn: got 0 args, expected 1-2, calling function exec(val:string, options:string|object=void)    (at or near \"warndemo2\")",
          "21: warndemo2.jsi:5: warn: got 4 args, expected 1-2, calling function exec(val:string, options:string|object=void)    (at or near \"warndemo2\")",
          "23: warndemo2.jsi:6: warn: got 3 args, expected 0, calling function warndemoA()    (at or near \"warndemo2\")",
          "25: warndemo2.jsi:7: warn: got 0 args, expected 1, calling function warndemoB(n:number)    (at or near \"warndemo2\")",
          "27: warndemo2.jsi:8: warn: got 3 args, expected 1, calling function warndemoB(n:number)    (at or near \"warndemo2\")",
          "29: warndemo2.jsi:9: error: type mismatch for argument arg 1 'warndemoB': expected \"number\" but got \"string\", in call to 'warndemoB' declared at warndemo.jsi:12.2    (at or near \"warndemo2\")",
          "",
          "[Added Lines]",
          "17: warndemo2.jsi:6: warn: got 0 args, expected 1-2, calling function exec(val:string, options:string|object=void)",
          "18: warndemo2.jsi:7: warn: got 4 args, expected 1-2, calling function exec(val:string, options:string|object=void)",
          "19: warndemo2.jsi:9: warn: got 0 args, expected 1, calling function warndemoB(n:number)",
          "20: warndemo2.jsi:10: warn: got 3 args, expected 1, calling function warndemoB(n:number)",
          "",
          "---------------"
        ],
        "lib/Testing.jsi||lib/Testing.jsi": [
          "File: lib/Testing.jsi -> lib/Testing.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:                 res = dres.trim();",
          "168:                 puts(res);",
          "169:             } else if (self.silent)",
          "171:             else",
          "172:                 puts('\\n'+res);",
          "173:             return 0;",
          "",
          "[Removed Lines]",
          "170:                 puts(res.trim());",
          "",
          "[Added Lines]",
          "170:                 puts(res?res.trim():res);",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   1",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 8",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 9",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "745:     Jsi_Key_Type keyType; // Read-only",
          "746:     Jsi_Interp *interp;",
          "747:     Jsi_Wide flags;",
          "749:     void *user, *user2;",
          "750:     Jsi_MapFmtKeyProc *fmtKeyProc;",
          "751:     Jsi_RBCompareProc *compareTreeProc;",
          "",
          "[Removed Lines]",
          "748:     int refCnt;           // Shared map.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3819:     func->d.obj->d.fobj->func->parentName = parentName;",
          "3820:     func->d.obj->d.fobj->func->pkg = pkg;",
          "3821:     func->d.obj->d.fobj->func->parentSpec = cSpec;",
          "3823:         jsi_CommandArgCheck(interp, cmdSpec, f, parentName);",
          "3825:     f->retType = cmdSpec->retType;",
          "",
          "[Removed Lines]",
          "3822:     if (cmdSpec->argStr && interp->typeCheck.all)",
          "",
          "[Added Lines]",
          "3822:     if (cmdSpec->argStr && !interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4897:     { \"log\",    consoleLogCmd,      1, -1, \"val, ...\", .help=\"Like System.puts, but goes to stderr and includes file:line.\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4898:     { \"logp\",   consoleLogPCmd,     1, -1, \"val, ...\", .help=\"Same as console.log, but first arg is string prefix and if second is a boolean it controls output\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4899:     { \"printf\", consolePrintfCmd,   1, -1, \"format:string, ...\", .help=\"Same as System.printf but goes to stderr\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4901:     { \"warn\",   consoleLogCmd,      1, -1, \"val, ...\", .help=\"Same as log\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4902:     { NULL, 0,0,0,0,  .help=\"Console input and output to stderr\" }",
          "4903: };",
          "",
          "[Removed Lines]",
          "4900:     { \"puts\",   consolePutsCmd,     1, -1, \"val, ...\", .help=\"Same as System.puts, but goes to stderr\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "",
          "[Added Lines]",
          "4900:     { \"puts\",   consolePutsCmd,     1, -1, \"val:any, ...\", .help=\"Same as System.puts, but goes to stderr\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5049:     { \"parseOpts\",  SysParseOptsCmd, 3,  3, \"self:object|userobj, options:object, conf:object|null|undefined\", .help=\"Parse module options: similar to moduleOpts but arg order different and no freeze\", .retType=(uint)JSI_TT_OBJECT, .flags=0},",
          "5050:     { \"printf\",     SysPrintfCmd,    1, -1, \"format:string, ...\", .help=\"Formatted output to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "5051:     { \"provide\",    SysProvideCmd,   0,  3, \"name:string|null|function=void, version:number|string=void, options:object=void\", .help=\"Provide a package for use with require.\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_provide, .opts=jsiModuleOptions  },",
          "5053:     { \"quote\",      SysQuoteCmd,     1,  1, \"val:string\", .help=\"Return quoted string\", .retType=(uint)JSI_TT_STRING },",
          "5054:     { \"require\",    SysRequireCmd,   0,  3, \"name:string=void, version:number|string=1, options:object=void\", .help=\"Load/query packages\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT|JSI_TT_ARRAY, .flags=0, .info=FN_require, .opts=jsiModuleOptions },",
          "5055:     { \"runModule\",  SysModuleRunCmd, 0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"Invoke named module. If name is empty, uses file basename. If isMain invokes function with same name as file. With no args will invoke provide\", .retType=(uint)JSI_TT_ANY, .flags=0},",
          "",
          "[Removed Lines]",
          "5052:     { \"puts\",       SysPutsCmd,      1, -1, \"val, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
          "",
          "[Added Lines]",
          "5052:     { \"puts\",       SysPutsCmd,      1, -1, \"val:any, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "151: {",
          "152:     Jsi_Value *v;",
          "153:     if (dst->vt != JSI_VT_VARIABLE) {",
          "155:             return Jsi_LogError(\"operand not a left value\");",
          "156:     } else {",
          "157:         v = dst->d.lval;",
          "158:         SIGASSERT(v, VALUE);",
          "160:         if (strict && lop == OP_PUSHFUN && interp->curIp[-1].local)",
          "161:             dst->f.bits.local = 1;",
          "162:         if (strict && dst->f.bits.local==0) {",
          "",
          "[Removed Lines]",
          "154:         if (interp->typeCheck.strict)",
          "159:         int strict = interp->typeCheck.strict;",
          "",
          "[Added Lines]",
          "154:         if (!interp->noCheck)",
          "159:         int strict = !interp->noCheck;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:             return JSI_OK;",
          "173:         bool ro = v->f.bits.readonly;",
          "174:         if (ro && v->vt != JSI_VT_UNDEF) {",
          "176:                 return Jsi_LogError(\"assign to readonly variable\");",
          "177:             return JSI_OK;",
          "178:         }",
          "",
          "[Removed Lines]",
          "175:             if (interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "175:             if (!interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "240: static Jsi_RC jsiLogicLess(Jsi_Interp* interp, int i1, int i2) {",
          "241:     Jsi_Value *v, *v1 = _jsi_STACK[interp->framePtr->Sp-i1], *v2 = _jsi_STACK[interp->framePtr->Sp-i2], *res = _jsi_TOQ;",
          "242:     int val = 0, l1 = 0, l2 = 0;",
          "244:     Jsi_RC rc = JSI_OK;",
          "245:     rc = _jsi_StrictUChk2(v1, v2);",
          "246:     if (rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "243:     bool strict = interp->typeCheck.strict;",
          "",
          "[Added Lines]",
          "243:     bool strict = !interp->noCheck;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1094:     jsi_TryList  *trylist = NULL;",
          "1095:     jsi_Frame *fp = interp->framePtr;",
          "1096:     Jsi_HashEntry *hPtrGet = NULL;",
          "1098:     const char *curFile = NULL, *throwStr;",
          "1100:     if (currentScope->vt != JSI_VT_OBJECT) {",
          "",
          "[Removed Lines]",
          "1097:     bool strict = interp->typeCheck.strict;",
          "",
          "[Added Lines]",
          "1097:     bool strict = !interp->noCheck;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1252:                         throwStr = \"fcall\";",
          "1253:                         rc = JSI_ERROR;",
          "1254:                 }",
          "1257:                 break;",
          "1258:             }",
          "",
          "[Removed Lines]",
          "1255:                 strict = interp->typeCheck.strict;",
          "",
          "[Added Lines]",
          "1255:                 strict = !interp->noCheck;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1690:                     t->d.num -= inc;",
          "1691:                 }",
          "1692:                 if (hPtrGet) {",
          "1695:                     hPtrGet = NULL;",
          "1696:                 }",
          "1697:                 break;",
          "",
          "[Removed Lines]",
          "1694:                     jsi_SetterCall(interp, hPtrGet, v, _jsi_TOQ, 0);",
          "",
          "[Added Lines]",
          "1694:                     Jsi_Value *v2 = (fp->Sp>1?_jsi_TOQ:_jsi_TOP);",
          "1695:                     jsi_SetterCall(interp, hPtrGet, v, v2, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2379:                     goto bail;",
          "2380:                 }",
          "2381:             }",
          "2383:             if (cp && !Jsi_Strcmp(cp, \".jsi\") && interp->isMain) {",
          "2384:                 interp->typeCheck.parse = interp->typeCheck.run = interp->typeCheck.all = 1;",
          "2387:             bool isNew;",
          "2388:             Jsi_HashEntry *hPtr;",
          "2389:             hPtr = Jsi_HashEntryNew(interp->fileTbl, fname, &isNew);",
          "",
          "[Removed Lines]",
          "2382:             cp = Jsi_Strrchr(fname, '.');",
          "2385:                 interp->typeCheck.strict = 1;",
          "2386:             }",
          "",
          "[Added Lines]",
          "2386:                 interp->noCheck = 0;",
          "",
          "---------------"
        ],
        "src/jsiFormat.c||src/jsiFormat.c": [
          "File: src/jsiFormat.c -> src/jsiFormat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:             goto doprec;",
          "279:         case 's':",
          "280:             v = Jsi_ValueArrayIndex(interp, args, argIndex);",
          "282:                 msg = \"expected string argument\";",
          "283:                 goto error;",
          "284:             } else",
          "",
          "[Removed Lines]",
          "281:             if (interp->typeCheck.strict && !Jsi_ValueIsString(interp, v)) {",
          "",
          "[Added Lines]",
          "281:             if (!interp->noCheck && !Jsi_ValueIsString(interp, v)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "347:                 p += sprintf(p, \".%ld\", precision);",
          "348:             }",
          "349:             v = Jsi_ValueArrayIndex(interp, args, argIndex);",
          "351:                 msg = \"expected number argument\";",
          "352:                 goto error;",
          "353:             }",
          "",
          "[Removed Lines]",
          "350:             if (interp->typeCheck.strict && !Jsi_ValueIsNumber(interp, v)) {",
          "",
          "[Added Lines]",
          "350:             if (!interp->noCheck && !Jsi_ValueIsNumber(interp, v)) {",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "199: Jsi_RC jsi_ArgTypeCheck(Jsi_Interp *interp, int typ,  Jsi_Value *arg, const char *p1,",
          "200:     const char *p2, int index, Jsi_Func *func, bool isdefault) {",
          "201:     Jsi_RC rc = JSI_OK;",
          "203:     char idxBuf[JSI_MAX_NUMBER_STRING*2];",
          "204:     idxBuf[0] = 0;",
          "206:         snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
          "207:         jsi_TypeMismatch(interp);",
          "",
          "[Removed Lines]",
          "202:     if (interp->typeCheck.none) return JSI_OK;",
          "205:     if (func && arg->vt == JSI_VT_UNDEF && !interp->typeCheck.noundef && index>0 && !isdefault && !(typ&JSI_TT_UNDEFINED)) {",
          "",
          "[Added Lines]",
          "201:     if (interp->noCheck) return JSI_OK;",
          "205:     if (func && arg->vt == JSI_VT_UNDEF && !interp->typeCheck.noundef && index>0 && !isdefault && !(typ&(JSI_TT_UNDEFINED|JSI_TT_ANY))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215:         return JSI_OK;",
          "224:         return JSI_OK;",
          "225:     if ((typ&JSI_TT_ANY)) return JSI_OK;",
          "226:     if (index == 0 && arg->vt == JSI_VT_UNDEF) {",
          "",
          "[Removed Lines]",
          "218:     if (interp->typeCheck.all==0) {",
          "219:         if (func ? (interp->typeCheck.run==0) : (interp->typeCheck.parse==0))",
          "220:             return JSI_OK;",
          "221:     }",
          "222:     if (index == 0 && func && func->type == FC_BUILDIN &&",
          "223:         interp->typeCheck.all == 0) // Normally do not check return types for builtins.",
          "",
          "[Added Lines]",
          "218:     if (index == 0 && func && func->type == FC_BUILDIN && !interp->typeCheck.builtins) // BUILTIN returns",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "250:         const char *vtyp = jsi_ValueTypeName(interp, arg);",
          "251:         if (index>0)",
          "252:             snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
          "254:             rc = JSI_ERROR;",
          "255:         jsi_TypeMismatch(interp);",
          "256:         Jsi_DString fStr = {};",
          "",
          "[Removed Lines]",
          "253:         if (interp->typeCheck.error)",
          "",
          "[Added Lines]",
          "248:         if (!interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "263: }",
          "265: Jsi_RC jsi_StaticArgTypeCheck(Jsi_Interp *interp, int atyp, const char *p1, const char *p2, int index, Jsi_Func *func, jsi_Pline *line) {",
          "266:     Assert(index>0);",
          "267:     Jsi_RC rc;",
          "270:     int ai = index-1+func->callflags.bits.addargs;",
          "271:     if (func->argnames == NULL || ai>=func->argnames->count || ai<0)",
          "272:         return JSI_OK;",
          "",
          "[Removed Lines]",
          "268:     if (interp->typeCheck.parse==0 && interp->typeCheck.all==0)",
          "269:         return JSI_OK;",
          "",
          "[Added Lines]",
          "261:     if (interp->noCheck) return JSI_OK;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "274:     if (typ <= 0)",
          "275:         return JSI_OK;",
          "276:     if (index == 0 && func && func->type == FC_BUILDIN &&",
          "278:         return JSI_OK;",
          "279:     if ((typ&JSI_TT_ANY)) return JSI_OK;",
          "280:     if (index == 0 && atyp == JSI_VT_UNDEF) {",
          "",
          "[Removed Lines]",
          "277:         interp->typeCheck.all==0) // Normally do not check return types for builtins.",
          "",
          "[Added Lines]",
          "271:         interp->typeCheck.builtins==0) // Normally do not check return types for builtins.",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "312:             snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
          "313:         if (line)",
          "314:             interp->parseLine = line;",
          "316:             rc = JSI_ERROR;",
          "317:         jsi_TypeMismatch(interp);",
          "318:         Jsi_DString fStr = {};",
          "",
          "[Removed Lines]",
          "315:         if (interp->typeCheck.error)",
          "",
          "[Added Lines]",
          "309:         if (!interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "340: Jsi_RC jsi_RunFuncCallCheck(Jsi_Interp *interp, Jsi_Func *func, int argc, const char *name, jsi_Pline *line, Jsi_OpCodes *argCodes, bool isParse)",
          "341: {",
          "342:     Jsi_RC rc = JSI_OK;",
          "349:     Jsi_CmdSpec *spec = func->cmdSpec;",
          "350:     Jsi_ScopeStrs *ss = func->argnames;",
          "351:     if (ss==NULL && spec == NULL)",
          "",
          "[Removed Lines]",
          "343:     if (interp->typeCheck.none) return JSI_OK;",
          "344:     if (interp->typeCheck.all==0) {",
          "345:         if (!argCodes ? (interp->typeCheck.run==0) : (interp->typeCheck.parse==0))",
          "346:             return JSI_OK;",
          "347:     }",
          "",
          "[Added Lines]",
          "336:     if (interp->noCheck) return JSI_OK;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "361:         minArgs = (ss->firstDef>0 ? ss->firstDef-1 : ss->count);",
          "362:         maxArgs = ss->count;",
          "363:         mis = (argc != ss->count);",
          "365:             return JSI_OK;",
          "366:     }",
          "367:     if (varargs) {",
          "",
          "[Removed Lines]",
          "364:         if (func->retType == 0 && ss && ss->typeCnt == 0 && interp->typeCheck.all==0)",
          "",
          "[Added Lines]",
          "353:         if (func->retType == 0 && ss && ss->typeCnt == 0)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "379:             snprintf(nbuf, sizeof(nbuf), \"%d\", maxArgs);",
          "380:         if (line)",
          "381:             interp->parseLine = line;",
          "383:             rc = JSI_ERROR;",
          "384:         Jsi_DString dStr = {};",
          "385:         Jsi_FuncObjToString(interp, func, &dStr, 2);",
          "390:         jsi_TypeMismatch(interp);",
          "391:         Jsi_DSFree(&dStr);",
          "392:         if (line)",
          "",
          "[Removed Lines]",
          "382:         if (interp->typeCheck.error)",
          "386:         if (isParse)",
          "387:             Jsi_LogWarn(\"got %d args, expected %s, calling %s\", argc, nbuf, Jsi_DSValue(&dStr));",
          "388:         else",
          "389:             rc = Jsi_LogType(\"got %d args, expected %s, calling %s\", argc, nbuf, Jsi_DSValue(&dStr));",
          "",
          "[Added Lines]",
          "371:         if (!interp->noCheck)",
          "375:         rc = Jsi_LogType(\"got %d args, expected %s, calling %s\", argc, nbuf, Jsi_DSValue(&dStr));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "435: void jsi_FuncCallCheck(jsi_Pstate *p, jsi_Pline *line, int argc, bool isNew, const char *name, const char *namePre, Jsi_OpCodes *argCodes)",
          "436: {",
          "437:     Jsi_Interp *interp = p->interp;",
          "440:         return;",
          "441:     if (name && isdigit(name[0]))",
          "442:         return;",
          "",
          "[Removed Lines]",
          "438:     if (interp->typeCheck.none) return;",
          "439:     if (name == NULL || !(interp->typeCheck.funcsig|interp->typeCheck.all|interp->typeCheck.parse))",
          "",
          "[Added Lines]",
          "424:     if (interp->noCheck) return;",
          "425:     if (name == NULL || interp->typeCheck.funcdecl)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "451:     }",
          "452:     if (f)",
          "453:         jsi_RunFuncCallCheck(interp, f, argc, name, line, argCodes, 1);",
          "455:         if (line)",
          "456:             interp->parseLine = line;",
          "457:         Jsi_LogWarn(\"called function '%s' with no previous definition\", name);",
          "",
          "[Removed Lines]",
          "454:     else if (interp->typeCheck.funcsig && (namePre==NULL || jsi_BuiltinCmd(interp, namePre))) {",
          "",
          "[Added Lines]",
          "440:     else if (interp->typeCheck.funcdecl && (namePre==NULL || jsi_BuiltinCmd(interp, namePre))) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "459:         if (line)",
          "460:             interp->parseLine = NULL;",
          "461:     }",
          "462: }",
          "464: int jsi_FuncSigsMatch(jsi_Pstate *pstate, Jsi_Func *f1, Jsi_Func *f2)",
          "465: {",
          "467:     if (f1->retType==0 && f1->argnames->typeCnt==0 && f1->argnames->varargs==0 &&",
          "470:         return 1;",
          "471:     if (f1->retType != f2->retType)",
          "472:         return 0;",
          "",
          "[Removed Lines]",
          "468:         f2->retType==0 && f2->argnames->typeCnt==0 && f2->argnames->varargs==0 &&",
          "469:         pstate->interp->typeCheck.all==0)",
          "",
          "[Added Lines]",
          "456:         f2->retType==0 && f2->argnames->typeCnt==0 && f2->argnames->varargs==0)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "521:         Jsi_LogWarn(\"invalid use of 'undefined' in a return type: %s\", name?name:\"\");",
          "523:     pstate->argType = 0;",
          "525:         int i, j;",
          "526:         for (i=0; i<args->count; i++) {",
          "527:             for (j=0; j<args->count; j++) {",
          "",
          "[Removed Lines]",
          "524:     if (localvar && args && (interp->typeCheck.strict)) {",
          "",
          "[Added Lines]",
          "511:     if (localvar && args && (!interp->noCheck)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "557:                 pstate->err_count++;",
          "558:         }",
          "559:         f->name = Jsi_KeyAdd(interp, name);",
          "562:             if (f->retType && !(f->retType&JSI_TT_VOID) && ops && ops->code_len && ops->codes[ops->code_len-1].op != OP_RET) {",
          "563:                 if (line)",
          "",
          "[Removed Lines]",
          "560:         if ((interp->typeCheck.run|interp->typeCheck.parse|interp->typeCheck.all|interp->typeCheck.funcsig)) {",
          "",
          "[Added Lines]",
          "547:         if (!interp->noCheck) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "570:             }",
          "573:                 Jsi_Func *fo = (Jsi_Func*)Jsi_HashGet(interp->staticFuncsTbl, (void*)name, 0);",
          "577:                     if (!jsi_FuncSigsMatch(pstate, f, fo)) {",
          "578:                         if (line)",
          "579:                             interp->parseLine = line;",
          "",
          "[Removed Lines]",
          "572:             if (interp->staticFuncsTbl) {",
          "576:                 if (interp->typeCheck.funcsig && fo && fo->opcodes && fo->opcodes->code_len == 1 && fo->opcodes->codes->op == OP_NOP) {",
          "",
          "[Added Lines]",
          "559:             if (interp->typeCheck.funcdecl) {",
          "563:                 if (interp->typeCheck.funcdecl && fo && fo->opcodes && fo->opcodes->code_len == 1 && fo->opcodes->codes->op == OP_NOP) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "805: bool jsi_FuncArgCheck(Jsi_Interp *interp, Jsi_Func *f, const char *argStr)",
          "806: {",
          "807:     int i, atyp, ftyp, rc = 0, acnt;",
          "808:     Jsi_DString dStr;",
          "809:     Jsi_DSInit(&dStr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "794:     if (interp->noCheck) return 1;",
          "",
          "---------------"
        ],
        "src/jsiHash.c||src/jsiHash.c": [
          "File: src/jsiHash.c -> src/jsiHash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "407:     tablePtr->opts.mapType = (Jsi_Map_Type)JSI_MAP_HASH;",
          "408:     tablePtr->typ = JSI_MAP_HASH;",
          "409:     tablePtr->opts.interp = interp;",
          "411:     tablePtr->buckets = tablePtr->staticBuckets;",
          "412: #if !(JSI_SMALL_HASH_TABLE && !(JSI_SMALL_HASH_TABLE & (JSI_SMALL_HASH_TABLE - 1)))",
          "413: #error \"small hash must be a power of two\"",
          "",
          "[Removed Lines]",
          "410:     tablePtr->opts.refCnt = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "523: int",
          "524: Jsi_HashDelete(Jsi_Hash *tablePtr)",
          "525: {",
          "529:     Jsi_HashClear(tablePtr);",
          "530:     Jsi_Free(tablePtr);",
          "531:     return 0;",
          "",
          "[Removed Lines]",
          "526:     SIGASSERT(tablePtr, HASH);",
          "527:     if (--tablePtr->opts.refCnt>0) // Shared hash check.",
          "528:         return tablePtr->opts.refCnt;",
          "",
          "[Added Lines]",
          "525:     SIGASSERTRET(tablePtr, HASH, 0);",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:     JSI_SIG_NAMEDATA, JSI_SIG_ACCESSOR",
          "260: } jsi_Sig;",
          "263: extern const char *jsi_LogCodes[], *jsi_LogCodesU[];",
          "264: extern uint jsi_GetLogFlag(Jsi_Interp *interp, uint mask, Jsi_PkgOpts* popts);",
          "",
          "[Removed Lines]",
          "262: #define Jsi_LogType(fmt,...) Jsi_LogMsg(interp, NULL, (interp->typeCheck.strict || interp->typeCheck.error)?JSI_LOG_ERROR:JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "",
          "[Added Lines]",
          "262: #define Jsi_LogType(fmt,...) Jsi_LogMsg(interp, NULL, (interp->noError?JSI_LOG_WARN:(interp->inParse?JSI_LOG_PARSE:JSI_LOG_ERROR)), fmt, ##__VA_ARGS__)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "960: } jsi_numUnion;",
          "962: typedef struct {",
          "969:     uint noundef:1;",
          "970:     uint nowith:1;",
          "973: } Jsi_TypeCheck;",
          "975: typedef enum {",
          "",
          "[Removed Lines]",
          "963:     uint none:1;",
          "964:     uint parse:1;",
          "965:     uint run:1;",
          "966:     uint all:1;",
          "967:     uint error:1;",
          "968:     uint strict:1;",
          "971:     uint funcsig:1;",
          "972:     uint unused:24;",
          "",
          "[Added Lines]",
          "963:     uint noreturn:1;",
          "966:     uint builtins:1;",
          "967:     uint funcdecl:1;",
          "968:     uint unused:27;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1154:     Jsi_Value *stdinStr;",
          "1155:     Jsi_Value *stdoutStr;",
          "1156:     Jsi_TypeCheck typeCheck;",
          "1157:     jsi_LogOptions logOpts;",
          "1158:     uint log;",
          "1159:     int typeWarnMax;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1152:     bool noError;",
          "1153:     bool noCheck;",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: };",
          "75: static const char *jsi_SafeModeStrs[] = { \"none\", \"read\", \"write\", \"writeRead\", \"lockdown\", NULL };",
          "77: const char *jsi_callTraceStrs[] = { \"funcs\", \"cmds\", \"new\", \"return\", \"args\", \"notrunc\", \"noparent\", \"full\", \"before\", NULL};",
          "78: const char *jsi_AssertModeStrs[] = { \"throw\", \"log\", \"puts\", NULL};",
          "",
          "[Removed Lines]",
          "76: static const char *jsi_TypeChkStrs[] = { \"none\", \"parse\", \"run\", \"all\", \"error\", \"strict\", \"noundef\", \"nowith\", \"funcsig\", NULL };",
          "",
          "[Added Lines]",
          "76: static const char *jsi_TypeChkStrs[] = { \"noreturn\", \"noundef\", \"nowith\", \"builtins\", \"funcdecl\", NULL };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:     JSI_OPT(INT,   Jsi_Interp, memLeakCnt,  .help=\"Leak memory count due to object added to self\", jsi_IIOF|JSI_OPT_LOCKSAFE ),",
          "109:     JSI_OPT(STRKEY,Jsi_Interp, name,        .help=\"Optional text name for this interp\"),",
          "110:     JSI_OPT(BOOL,  Jsi_Interp, noAutoLoad,  .help=\"Disable autoload\", .flags=JSI_OPT_LOCKSAFE ),",
          "111:     JSI_OPT(BOOL,  Jsi_Interp, noConfig,    .help=\"Disable use of Interp.conf to change options after create\", jsi_IIOF),",
          "112:     JSI_OPT(BOOL,  Jsi_Interp, noEval,      .help=\"Disable eval: just parses file to check syntax\", jsi_IIOF),",
          "113:     JSI_OPT(BOOL,  Jsi_Interp, noInput,     .help=\"Disable use of console.input()\", .flags=JSI_OPT_LOCKSAFE),",
          "114:     JSI_OPT(BOOL,  Jsi_Interp, noLoad,      .help=\"Disable load of shared libs\", .flags=JSI_OPT_LOCKSAFE),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:     JSI_OPT(BOOL,  Jsi_Interp, noCheck,     .help=\"Disable type checking\", .flags=JSI_OPT_LOCKSAFE ),",
          "113:     JSI_OPT(BOOL,  Jsi_Interp, noError,     .help=\"Type checks failures are warning\", .flags=JSI_OPT_LOCKSAFE ),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1111:     interp->logOpts.file = 1;",
          "1112:     interp->logOpts.func = 1;",
          "1113:     interp->logOpts.before = 1;",
          "1115:     interp->log = Jsi_LogDefVal;",
          "1116:     int argc = interp->opts.argc;",
          "1117:     char **argv = interp->opts.argv;",
          "1118:     char *argv0 = (argv?argv[0]:NULL);",
          "",
          "[Removed Lines]",
          "1114:     interp->typeCheck.strict = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1408:     interp->codesTbl = (interp == jsiIntData.mainInterp ? Jsi_HashNew(interp, JSI_KEYS_ONEWORD, NULL) : jsiIntData.mainInterp->codesTbl);",
          "1409: #endif",
          "1410:     interp->GetterValue = Jsi_ValueNew1(interp);",
          "1413:     if (!jsiIntData.isInit) {",
          "1414:         jsiIntData.isInit = 1;",
          "1415:         jsi_InitValue(interp, 0);",
          "",
          "[Removed Lines]",
          "1411:     if (interp->typeCheck.all|interp->typeCheck.parse|interp->typeCheck.funcsig)",
          "1412:         interp->staticFuncsTbl = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
          "",
          "[Added Lines]",
          "1413:     interp->staticFuncsTbl = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1666:         }",
          "1667:     }",
          "1668: }",
          "1670: void jsi_DebugDumpValues(Jsi_Interp *interp)",
          "1671: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1670: #define Jsi_DecrRefCountIF(i,s) if (s) Jsi_DecrRefCount(i,s)",
          "1671: #define Jsi_HashDeleteIF(s) if (s) Jsi_HashDelete(s)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1773:                 fprintf(stderr, \"unfreed opcodes: %d\\n\", vp->id);",
          "1774:             }",
          "1775:     }",
          "1779:     bool isMainInt = (interp == jsiIntData.mainInterp);",
          "1780:     if (isMainInt && vdLev>3)",
          "1781:         _exit(1); // Avoid sanitize output.",
          "",
          "[Removed Lines]",
          "1776:     Jsi_HashDelete(interp->dbPtr->valueDebugTbl);",
          "1777:     Jsi_HashDelete(interp->dbPtr->objDebugTbl);",
          "1778:     Jsi_HashDelete(interp->codesTbl);",
          "",
          "[Added Lines]",
          "1779:     Jsi_HashDeleteIF(interp->dbPtr->valueDebugTbl);",
          "1780:     Jsi_HashDeleteIF(interp->dbPtr->objDebugTbl);",
          "1781:     Jsi_HashDeleteIF(interp->codesTbl);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1804:         Jsi_Free(interp->Stack);",
          "1805:         Jsi_Free(interp->Obj_this);",
          "1806:     }",
          "1821:     if (interp->profileCnt) { // TODO: resolve some values from dbPtr, others not.",
          "1822:         double endTime = jsi_GetTimestamp();",
          "1823:         double coverage = (int)(100.0*interp->coverHit/interp->coverAll);",
          "",
          "[Removed Lines]",
          "1808:     if (interp->argv0)",
          "1809:         Jsi_DecrRefCount(interp, interp->argv0);",
          "1810:     if (interp->console)",
          "1811:         Jsi_DecrRefCount(interp, interp->console);",
          "1812:     if (interp->lastSubscriptFail)",
          "1813:         Jsi_DecrRefCount(interp, interp->lastSubscriptFail);",
          "1814:     if (interp->nullFuncRet)",
          "1815:         Jsi_DecrRefCount(interp, interp->nullFuncRet);",
          "1816:     Jsi_HashDelete(interp->codeTbl);",
          "1817:     Jsi_MapDelete(interp->cmdSpecTbl);",
          "1818:     Jsi_HashDelete(interp->fileTbl);",
          "1819:     Jsi_HashDelete(interp->funcObjTbl);",
          "1820:     Jsi_HashDelete(interp->funcsTbl);",
          "",
          "[Added Lines]",
          "1810:     Jsi_DecrRefCountIF(interp, interp->argv0);",
          "1811:     Jsi_DecrRefCountIF(interp, interp->console);",
          "1812:     Jsi_DecrRefCountIF(interp, interp->lastSubscriptFail);",
          "1813:     Jsi_DecrRefCountIF(interp, interp->nullFuncRet);",
          "1814:     Jsi_HashDeleteIF(interp->codeTbl);",
          "1815:     if (interp->cmdSpecTbl) Jsi_MapDelete(interp->cmdSpecTbl);",
          "1816:     Jsi_HashDeleteIF(interp->funcObjTbl);",
          "1817:     Jsi_HashDeleteIF(interp->funcsTbl);",
          "1818:     Jsi_HashDeleteIF(interp->fileTbl);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1831:         Jsi_DSFree(&dStr);",
          "1832:     }",
          "1833:     if (isMainInt)",
          "1836:     if (interp->subthread)",
          "1837:         jsiIntData.mainInterp->threadCnt--;",
          "1838:     if (interp->subthread && interp->strKeyTbl == jsiIntData.mainInterp->strKeyTbl)",
          "",
          "[Removed Lines]",
          "1834:         Jsi_HashDelete(interp->lexkeyTbl);",
          "1835:     Jsi_HashDelete(interp->protoTbl);",
          "",
          "[Added Lines]",
          "1832:         Jsi_HashDeleteIF(interp->lexkeyTbl);",
          "1833:     Jsi_HashDeleteIF(interp->protoTbl);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1844:         jsiIntData.mainInterp->strKeyTbl->v.hash->opts.lockHashProc = NULL;",
          "1845: #endif",
          "1857:     if (interp->preserveTbl->numEntries!=0)",
          "1858:         Jsi_LogBug(\"Preserves unbalanced\");",
          "1860:     if (interp->curDir)",
          "1861:         Jsi_Free(interp->curDir);",
          "1862:     if (isMainInt) {",
          "",
          "[Removed Lines]",
          "1847:     Jsi_HashDelete(interp->thisTbl);",
          "1848:     Jsi_HashDelete(interp->varTbl);",
          "1849:     Jsi_HashDelete(interp->genValueTbl);",
          "1850:     Jsi_HashDelete(interp->genObjTbl);",
          "1851:     Jsi_HashDelete(interp->aliasHash);",
          "1852:     Jsi_DecrRefCount(interp, interp->GetterValue);",
          "1853:     if (interp->staticFuncsTbl)",
          "1854:         Jsi_HashDelete(interp->staticFuncsTbl);",
          "1855:     if (interp->breakpointHash)",
          "1856:         Jsi_HashDelete(interp->breakpointHash);",
          "1859:     Jsi_HashDelete(interp->preserveTbl);",
          "",
          "[Added Lines]",
          "1845:     Jsi_HashDeleteIF(interp->thisTbl);",
          "1846:     Jsi_HashDeleteIF(interp->varTbl);",
          "1847:     Jsi_HashDeleteIF(interp->genValueTbl);",
          "1848:     Jsi_HashDeleteIF(interp->genObjTbl);",
          "1849:     Jsi_HashDeleteIF(interp->aliasHash);",
          "1850:     Jsi_DecrRefCountIF(interp, interp->GetterValue);",
          "1851:     Jsi_HashDeleteIF(interp->staticFuncsTbl);",
          "1852:     Jsi_HashDeleteIF(interp->breakpointHash);",
          "1855:     Jsi_HashDeleteIF(interp->preserveTbl);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1887:         Jsi_MutexDelete(interp, interp->QMutex);",
          "1888:         Jsi_DSFree(&interp->interpEvalQ);",
          "1889:     }",
          "1894:     if (interp->Function_prototype_prototype) {",
          "1895:         if (interp->Function_prototype_prototype->refCnt>1)",
          "1901:     }",
          "1903:     Jsi_OptionsFree(interp, InterpOptions, interp, 0);",
          "1914:     for (i=0; interp->cleanObjs[i]; i++) {",
          "1915:         interp->cleanObjs[i]->tree->opts.freeHashProc = 0;",
          "1916:         Jsi_ObjFree(interp, interp->cleanObjs[i]);",
          "1917:     }",
          "1919:     for (i = 0; i <= interp->cur_scope; i++)",
          "1920:         jsi_ScopeStrsFree(interp, interp->scopes[i]);",
          "1921: #if JSI__ZVFS==1",
          "1922:     Jsi_InitZvfs(interp, mainFlag);",
          "1923: #endif",
          "1929:     interp->cleanup = 1;",
          "1931: #ifdef JSI_MEM_DEBUG",
          "",
          "[Removed Lines]",
          "1890:     if (interp->nullFuncArg)",
          "1891:         Jsi_DecrRefCount(interp, interp->nullFuncArg);",
          "1892:     if (interp->NullValue)",
          "1893:         Jsi_DecrRefCount(interp, interp->NullValue);",
          "1896:             Jsi_DecrRefCount(interp, interp->Function_prototype_prototype);",
          "1897:         Jsi_DecrRefCount(interp, interp->Function_prototype_prototype);",
          "1898:     }",
          "1899:     if (interp->Object_prototype) {",
          "1900:         Jsi_DecrRefCount(interp, interp->Object_prototype);",
          "1902:     Jsi_HashDelete(interp->regexpTbl);",
          "1904:     Jsi_HashDelete(interp->userdataTbl);",
          "1905:     Jsi_HashDelete(interp->eventTbl);",
          "1906:     if (interp->inopts)",
          "1907:         Jsi_DecrRefCount(interp, interp->inopts);",
          "1908:     if (interp->safeWriteDirs)",
          "1909:         Jsi_DecrRefCount(interp, interp->safeWriteDirs);",
          "1910:     if (interp->safeReadDirs)",
          "1911:         Jsi_DecrRefCount(interp, interp->safeReadDirs);",
          "1912:     if (interp->pkgDirs)",
          "1913:         Jsi_DecrRefCount(interp, interp->pkgDirs);",
          "1918:     Jsi_HashDelete(interp->bindTbl);",
          "1925:         Jsi_HashDelete(interp->loadTbl);",
          "1926:     if (interp->packageHash)",
          "1927:         Jsi_HashDelete(interp->packageHash);",
          "1928:     Jsi_HashDelete(interp->assocTbl);",
          "",
          "[Added Lines]",
          "1886:     Jsi_DecrRefCountIF(interp, interp->nullFuncArg);",
          "1887:     Jsi_DecrRefCountIF(interp, interp->NullValue);",
          "1890:             Jsi_DecrRefCountIF(interp, interp->Function_prototype_prototype);",
          "1891:         Jsi_DecrRefCountIF(interp, interp->Function_prototype_prototype);",
          "1893:     Jsi_DecrRefCountIF(interp, interp->Object_prototype);",
          "1894:     Jsi_HashDeleteIF(interp->regexpTbl);",
          "1896:     Jsi_HashDeleteIF(interp->userdataTbl);",
          "1897:     Jsi_HashDeleteIF(interp->eventTbl);",
          "1898:     Jsi_DecrRefCountIF(interp, interp->inopts);",
          "1899:     Jsi_DecrRefCountIF(interp, interp->safeWriteDirs);",
          "1900:     Jsi_DecrRefCountIF(interp, interp->safeReadDirs);",
          "1901:     Jsi_DecrRefCountIF(interp, interp->pkgDirs);",
          "1906:     Jsi_HashDeleteIF(interp->bindTbl);",
          "1913:     Jsi_HashDeleteIF(interp->loadTbl);",
          "1914:     Jsi_HashDeleteIF(interp->packageHash);",
          "1915:     Jsi_HashDeleteIF(interp->assocTbl);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2104:     }",
          "2105:     if (interp->subOpts.mutexUnlock) Jsi_MutexUnlock(interp, interp->Mutex);",
          "2106:     if (!isthrd) {",
          "2108:         if (interp->isSafe)",
          "2110:         sinterp->level++;",
          "2111:         if (interp->framePtr->tryDepth)",
          "2112:             sinterp->framePtr->tryDepth++;",
          "",
          "[Removed Lines]",
          "2107:         int ostrict = sinterp->typeCheck.strict;",
          "2109:             sinterp->typeCheck.strict = 1;",
          "",
          "[Added Lines]",
          "2094:         int onoerror = sinterp->noCheck;",
          "2096:             sinterp->noCheck = 0;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2126:         else {",
          "2127:             rc = (jsi_evalStrFile(sinterp, NULL, cp, 0, lev) == 0 ? JSI_OK : JSI_ERROR);",
          "2128:         }",
          "2130:         if (interp->framePtr->tryDepth) {",
          "2131:             sinterp->framePtr->tryDepth--;",
          "2132:             if (rc != JSI_OK && interp != sinterp) {",
          "",
          "[Removed Lines]",
          "2129:         sinterp->typeCheck.strict = ostrict;",
          "",
          "[Added Lines]",
          "2116:         sinterp->noCheck = onoerror;",
          "",
          "---------------"
        ],
        "src/jsiOptions.c||src/jsiOptions.c": [
          "File: src/jsiOptions.c -> src/jsiOptions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "349:         switch (specPtr->id) {",
          "350: #define _JSI_OPTSETNTYP(typ, n, ptr) if (!argValue) *(typ*)ptr = 0; else { if (isIncr) n += *((typ *)ptr); \\",
          "351:             interp->cdataIncrVal = *((typ *)ptr) = (typ)(n); \\",
          "354:             case JSI_OPTION_NUMBER: _JSI_OPTSETNTYP(Jsi_Number, nv, ptr); break;",
          "355:             case JSI_OPTION_LDOUBLE: _JSI_OPTSETNTYP(ldouble, nv, ptr); break;",
          "",
          "[Removed Lines]",
          "352:             if (interp->typeCheck.strict && Jsi_NumberIsNaN((Jsi_Number)(*((typ *)ptr)))) return Jsi_LogError(\"not a number\"); }",
          "",
          "[Added Lines]",
          "352:             if (!interp->noCheck && Jsi_NumberIsNaN((Jsi_Number)(*((typ *)ptr)))) return Jsi_LogError(\"not a number\"); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "502:         _JSI_OPT_CHECKNULL(argValue);",
          "503:         if (argValue->vt != JSI_VT_OBJECT || argValue->d.obj->ot != JSI_OT_FUNCTION)",
          "504:             goto bail;",
          "509:         _JSI_OPT_ARGSET(argValue, ptr);",
          "510:         break;",
          "",
          "[Removed Lines]",
          "505:         if (specPtr->data && !interp->typeCheck.none && (interp->typeCheck.run|interp->typeCheck.all))",
          "506:             if (!jsi_FuncArgCheck(interp, argValue->d.obj->d.fobj->func, (char*)specPtr->data))",
          "507:                 return Jsi_LogError(\"failed setting func pointer for %s\", specPtr->name);",
          "",
          "[Added Lines]",
          "505:         if (specPtr->data && !jsi_FuncArgCheck(interp, argValue->d.obj->d.fobj->func, (char*)specPtr->data))",
          "506:             return Jsi_LogError(\"failed setting func pointer for %s\", specPtr->name);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1808:         return Jsi_LogError(\"value not found in parent: %s\", s);",
          "1809:     if (!Jsi_ValueIsFunction(pinterp, val))",
          "1810:         return Jsi_LogError(\"expected a func value\");",
          "1812:         if (!jsi_FuncIsNoop(pinterp, val)",
          "1813:             && !jsi_FuncArgCheck(pinterp, val->d.obj->d.fobj->func, (char*)spec->data))",
          "1814:             return Jsi_LogError(\"failed setting func pointer for %s\", spec->name);",
          "",
          "[Removed Lines]",
          "1811:     if (spec->data && (interp->typeCheck.strict || pinterp->typeCheck.strict))",
          "",
          "[Added Lines]",
          "1810:     if (spec->data && (!interp->noCheck || !pinterp->noCheck))",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:         func->argnames = jsi_ParseArgStr(interp, argStr);",
          "119:     argnames = func->argnames;",
          "120:     int argc = Jsi_ValueGetLength(interp, args);",
          "123:         nrc = JSI_ERROR;",
          "124:     if (!argnames)",
          "125:         return nrc;",
          "",
          "[Removed Lines]",
          "121:     if (alloc && (interp->typeCheck.all|interp->typeCheck.run) && jsi_RunFuncCallCheck(interp, func, argc, func->name, NULL, NULL, 0) != JSI_OK",
          "122:         && (interp->typeCheck.strict || interp->typeCheck.error))",
          "",
          "[Added Lines]",
          "121:     if (alloc && jsi_RunFuncCallCheck(interp, func, argc, func->name, NULL, NULL, 0) != JSI_OK)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:                 dv = v = argnames->args[n].defValue;",
          "150:             if (v && rc == JSI_OK && i >= addargs) {",
          "151:                 int typ = argnames->args[n].type;",
          "154:             }",
          "155:             if (func->type == FC_BUILDIN)",
          "156:                 continue;",
          "",
          "[Removed Lines]",
          "152:                 if ((typ && interp->typeCheck.run) || interp->typeCheck.all)",
          "153:                     rc = jsi_ArgTypeCheck(interp, typ, v, \"for argument\", argkey, i+1, func, (dv!=NULL));",
          "",
          "[Added Lines]",
          "151:                 rc = jsi_ArgTypeCheck(interp, typ, v, \"for argument\", argkey, i+1, func, (dv!=NULL));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "262:         if (rc == JSI_OK && calltrc && (tc&jsi_callTraceReturn))",
          "263:             jsi_TraceFuncCall(interp, funcPtr, NULL, fthis, NULL, *ret, tc);",
          "265:             rc = jsi_ArgTypeCheck(interp, funcPtr->retType, *ret, \"returned from\", funcPtr->name, 0, funcPtr, 0);",
          "266:         interp->callDepth--;",
          "267:     }",
          "",
          "[Removed Lines]",
          "264:         if (rc == JSI_OK && !as_cons && funcPtr->retType && (interp->typeCheck.all || interp->typeCheck.run))",
          "",
          "[Added Lines]",
          "262:         if (rc == JSI_OK && !as_cons && funcPtr->retType && !interp->typeCheck.noreturn)",
          "",
          "---------------"
        ],
        "src/jsiPstate.c||src/jsiPstate.c": [
          "File: src/jsiPstate.c -> src/jsiPstate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:         if (atyp)",
          "113:             jsi_ArgTypeCheck(interp, atyp, defValue, \"default value\", name, a->argCnt, NULL, 1);",
          "114:     } else {",
          "117:     }",
          "118:     interp->parseLine = opl;",
          "119:     return a;",
          "",
          "[Removed Lines]",
          "115:         if (a->firstDef && (interp->typeCheck.run || interp->typeCheck.all) )",
          "116:             Jsi_LogWarn(\"expected default value in argument list: \\\"%s\\\"\", name);",
          "",
          "[Added Lines]",
          "115:         if (a->firstDef && !interp->noCheck)",
          "116:             Jsi_LogType(\"expected default value in argument list: \\\"%s\\\"\", name);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:     for (i = 0; i < interp->scopes[interp->cur_scope]->count; ++i) {",
          "155:         if (Jsi_Strcmp(str, interp->scopes[interp->cur_scope]->args[i].name) == 0) {",
          "156:             Jsi_Interp *interp = ps->interp;",
          "158:                 interp->parseLine = line;",
          "159:                 Jsi_LogWarn(\"duplicate var: %s\", str);",
          "160:                 interp->parseLine = NULL;",
          "",
          "[Removed Lines]",
          "157:             if (interp && interp->typeCheck.strict) {",
          "",
          "[Added Lines]",
          "157:             if (interp && !interp->noCheck) {",
          "",
          "---------------"
        ],
        "src/jsiTree.c||src/jsiTree.c": [
          "File: src/jsiTree.c -> src/jsiTree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "451:     treePtr->typ = (Jsi_Map_Type)JSI_MAP_TREE;",
          "452:     treePtr->root = NULL;",
          "453:     treePtr->opts.interp = interp;",
          "455:     treePtr->numEntries = 0;",
          "456:     treePtr->epoch = 0;",
          "457:     treePtr->opts.keyType = (Jsi_Key_Type)keyType;",
          "",
          "[Removed Lines]",
          "454:     treePtr->opts.refCnt = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "511: int Jsi_TreeDelete (Jsi_Tree *treePtr)",
          "512: {",
          "513:     SIGASSERTV(treePtr, TREE);",
          "519:     treePtr->flags.destroyed = 1;",
          "520:     destroy_node(treePtr->opts.interp, treePtr->root);",
          "",
          "[Removed Lines]",
          "514:     if (--treePtr->opts.refCnt>0) // Shared tree check.",
          "515:         return treePtr->opts.refCnt;",
          "516:     if (treePtr->flags.destroyed)",
          "517:         return -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:     if (isHelp) mt = \"help\";",
          "204:     assert((JSI__LOGLAST+2) == (sizeof(jsi_LogCodes)/sizeof(jsi_LogCodes[0])));",
          "205:     if (!Jsi_Strchr(format,'\\n')) term = \"\\n\";",
          "207:         ss = (char*)Jsi_ValueToString(interp, interp->lastParseOpt, NULL);",
          "208:     if (isExt)",
          "209:         snprintf(pbuf, sizeof(pbuf), \"    (c-extn [%s])\", popts->cmdSpec->name);",
          "",
          "[Removed Lines]",
          "206:     if (interp->typeCheck.strict && interp->lastParseOpt)",
          "",
          "[Added Lines]",
          "206:     if (!interp->noCheck && interp->lastParseOpt)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "283:                 lastCnt++;",
          "284:                 goto done;",
          "285:             } else if (lastMsg[0] && lastCnt>1 ) {",
          "287:             }",
          "288:             if (buf1[0] == 0 || (buf1[0] == '.' && buf1[1] == 0))",
          "289:                 goto done;",
          "",
          "[Removed Lines]",
          "286:                 fprintf(stderr, \"REPEAT: Last msg repeated %d times...\\\"\\n\" ,lastCnt);",
          "",
          "[Added Lines]",
          "286:                 fprintf(stderr, \"REPEAT: Last msg repeated %d times...\\\"\\n\" ,lastCnt-1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "315:     }",
          "316:     if ((code & jsi_fatalexit) && !interp->opts.no_exit)",
          "317:         jsi_DoExit(interp, 1);",
          "319: }",
          "321: const char* Jsi_KeyAdd(Jsi_Interp *interp, const char *str)",
          "",
          "[Removed Lines]",
          "318:     return (code==JSI_LOG_ERROR?JSI_ERROR:JSI_OK);",
          "",
          "[Added Lines]",
          "318:     return (code==JSI_LOG_ERROR||code==JSI_LOG_PARSE?JSI_ERROR:JSI_OK);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1132: #if JSI__SIGNAL",
          "1133:   signal(SIGINT, jsi_InteractiveSignal);",
          "1134: #endif",
          "1137:     interp->isInteractive = 1;",
          "1138:     jsi_interactiveInterp = interp;",
          "1139:     interp->subOpts.istty = 1;",
          "",
          "[Removed Lines]",
          "1135:     interp->typeCheck.parse = interp->typeCheck.run = interp->typeCheck.all = 1;",
          "1136:     interp->typeCheck.strict = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1178:                  fprintf(stderr, \"abandoned input\");",
          "1179:             } else",
          "1180:                 Jsi_DSAppend(&dStr, buf, NULL);",
          "1182:         } else {",
          "1183:             done = 1;",
          "1184:         }",
          "",
          "[Removed Lines]",
          "1181:             free(buf);",
          "",
          "[Added Lines]",
          "1179:             Jsi_Free(buf);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1439:     list->opts.flags = flags;",
          "1440:     list->opts.freeHashProc = freeProc;",
          "1441:     list->opts.interp = interp;",
          "1443:     list->opts.mapType = JSI_MAP_LIST;",
          "1444:     list->opts.keyType = (Jsi_Key_Type)-1;",
          "1445:     return list;",
          "",
          "[Removed Lines]",
          "1442:     list->opts.refCnt = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1459: int Jsi_ListDelete(Jsi_List *list) {",
          "1460:     SIGASSERT(list, LIST);",
          "1463:     Jsi_ListClear(list);",
          "1465:     return 0;",
          "1466: }",
          "",
          "[Removed Lines]",
          "1461:     if (--list->opts.refCnt>0) // Shared hash check.",
          "1462:         return list->opts.refCnt;",
          "1464:     free(list);",
          "",
          "[Added Lines]",
          "1459:     Jsi_Free(list);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1650:     return r;",
          "1651: }",
          "1652: Jsi_MapEntry* Jsi_MapSet(Jsi_Map *mapPtr, const void *key, const void *value){",
          "1654:     Jsi_MapEntry* mptr = NULL;",
          "1655:     switch (mapPtr->typ) {",
          "1656:         case JSI_MAP_HASH: mptr = (Jsi_MapEntry*)Jsi_HashSet(mapPtr->v.hash, (void*)key, (void*)value); break;",
          "",
          "[Removed Lines]",
          "1653:     SIGASSERT(mapPtr, MAP);",
          "",
          "[Added Lines]",
          "1648:     SIGASSERTRET(mapPtr, MAP,NULL);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1665:     return mptr;",
          "1666: }",
          "1667: void* Jsi_MapGet(Jsi_Map *mapPtr, const void *key, int flags){",
          "1669:     switch (mapPtr->typ) {",
          "1670:         case JSI_MAP_HASH: return Jsi_HashGet(mapPtr->v.hash, (void*)key, flags);",
          "1671:         case JSI_MAP_TREE: return Jsi_TreeGet(mapPtr->v.tree, (void*)key, flags);",
          "",
          "[Removed Lines]",
          "1668:     SIGASSERT(mapPtr, MAP);",
          "",
          "[Added Lines]",
          "1663:     SIGASSERTRET(mapPtr, MAP, NULL);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2646:     if (!value)",
          "2647:         return JSI_ERROR;",
          "2649:         jsi_ValueToOInt32(interp, value);",
          "2650:     if (!Jsi_ValueIsNumber(interp, value))",
          "",
          "[Removed Lines]",
          "2648:     if (!interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "2643:     if (interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2658: {",
          "2659:     if (!value)",
          "2660:         return JSI_ERROR;",
          "2662:         jsi_ValueToOInt32(interp, value);",
          "2663:     if (!Jsi_ValueIsNumber(interp, value))",
          "",
          "[Removed Lines]",
          "2661:     if (!interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "2656:     if (interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2672: {",
          "2673:     if (!value)",
          "2674:         return JSI_ERROR;",
          "2676:         Jsi_ValueToNumber(interp, value);",
          "2677:     if (!Jsi_ValueIsNumber(interp, value))",
          "",
          "[Removed Lines]",
          "2675:     if (!interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "2670:     if (interp->noCheck)",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: bool Jsi_IsShared(Jsi_Interp* interp, Jsi_Value *v)",
          "27: {",
          "29:     return (v->refCnt > 1);",
          "30: }",
          "32: int Jsi_IncrRefCount(Jsi_Interp* interp, Jsi_Value *v)",
          "33: {",
          "35:     assert(v->refCnt>=0);",
          "36:     jsi_DebugValue(v,\"Incr\", jsi_DebugValueCallIdx(), interp);",
          "37:     return ++(v->refCnt);",
          "38: }",
          "40: int Jsi_DecrRefCount(Jsi_Interp* interp, Jsi_Value *v) {",
          "42:     if (v->refCnt<=0) {",
          "43: #ifdef JSI_MEM_DEBUG",
          "44:         fprintf(stderr, \"Value decr with ref %d: VD.Idx=%d\\n\", v->refCnt, v->VD.Idx);",
          "",
          "[Removed Lines]",
          "28:     SIGASSERT(v,VALUE);",
          "34:     SIGASSERT(v,VALUE);",
          "41:     SIGASSERT(v,VALUE);",
          "",
          "[Added Lines]",
          "28:     SIGASSERTRET(v,VALUE,0);",
          "34:     SIGASSERTRET(v,VALUE,-1);",
          "41:     SIGASSERTRET(v,VALUE,0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336:         }",
          "337:     }",
          "338:     if (target->vt != JSI_VT_OBJECT) {",
          "340:             Jsi_LogWarn(\"Target is not object: %d\", target->vt);",
          "341:         return NULL;",
          "342:     }",
          "",
          "[Removed Lines]",
          "339:         if (interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "339:         if (!interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "699:     switch(v->vt) {",
          "700:         case JSI_VT_UNDEF:",
          "701:         case JSI_VT_NULL:",
          "703:                 rc = Jsi_LogError(\"converting a undefined/null value to object\");",
          "704:             o->d.num = 0;",
          "705:             o->ot = JSI_OT_NUMBER;",
          "",
          "[Removed Lines]",
          "702:             if (interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "702:             if (!interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "992:     if (obj->getters) {",
          "993:         Jsi_HashEntry *hPtr = Jsi_HashEntryFind(obj->getters, keyStr);",
          "994:         if (hPtr) {",
          "996:             if (rc == JSI_OK) {",
          "997:                 v = interp->GetterValue;",
          "998:                 v->f.bits.isgetter = 1;",
          "1001:                 return v;",
          "1002:             }",
          "",
          "[Removed Lines]",
          "995:             Jsi_RC rc = jsi_GetterCall(interp, hPtr, &interp->GetterValue, target, 0);",
          "999:                 if (obj->setters)",
          "1000:                     interp->hPtrGet = Jsi_HashEntryFind(obj->setters, keyStr);",
          "",
          "[Added Lines]",
          "995:             Jsi_RC rc = jsi_GetterCall(interp, hPtr, &interp->GetterValue, target, JSI_ACCESSOR_TOOBJECT);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1150:             io->isArrayList = 1;",
          "1151:             io->count = to->arrCnt;",
          "1152:         } else {",
          "1154:                 Jsi_LogWarn(\"non-array in 'for...of'\");",
          "1155:             Jsi_IterGetKeys(interp, target, io, 0);",
          "1156:         }",
          "",
          "[Removed Lines]",
          "1153:             if (isof &&interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "1151:             if (isof && !interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1371:     Jsi_Value *vcall = (Jsi_Value*)Jsi_HashValueGet(hPtr);",
          "1372:     if (!vcall || !key)",
          "1373:         return Jsi_LogBug(\"bad getter\");",
          "1375:     Jsi_FuncObj *fobj = vcall->d.obj->d.fobj;",
          "1378:         vargs[i++] = Jsi_ValueNewStringDup(interp, key);",
          "1379:         Jsi_IncrRefCount(interp, vargs[0]);",
          "1380:         vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vargs, i, 0));",
          "",
          "[Removed Lines]",
          "1374:     Jsi_Value *vpargs = NULL, *vargs[2];",
          "1376:     int i = 0;",
          "1377:     if (!fobj->func->isGet) {",
          "",
          "[Added Lines]",
          "1372:     Jsi_Value *v, *vpargs = NULL, *vargs[2];",
          "1374:     int i = 0, isCext = !fobj->func->isGet;",
          "1375:     if (isCext) { // C-extension: add key name",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1386:         Jsi_DecrRefCount(interp, vargs[0]);",
          "1387:         Jsi_DecrRefCount(interp, vpargs);",
          "1388:     }",
          "1389:     return rc;",
          "1390: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1387:     v = (*vres);",
          "1388:     Jsi_Obj *obj = _this->d.obj;",
          "1389:     if (rc == JSI_OK && flags&JSI_ACCESSOR_TOOBJECT) {",
          "1390:         if (obj->setters && v->vt != JSI_VT_OBJECT)",
          "1391:             interp->hPtrGet = Jsi_HashEntryFind(obj->setters, key);",
          "1394:             Jsi_ValueToObject(interp, v);",
          "1395:         else if (obj->setters && v->vt != JSI_VT_OBJECT)",
          "1397:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1446: {",
          "1447:     if (!target) return;",
          "1448:     if (target->vt != JSI_VT_OBJECT) {",
          "1450:             Jsi_LogWarn(\"operand is not a object\");",
          "1451:         return;",
          "1452:     }",
          "",
          "[Removed Lines]",
          "1449:         if (interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "1458:         if (!interp->noCheck)",
          "",
          "---------------"
        ],
        "tests/expr.jsi||tests/expr.jsi": [
          "File: tests/expr.jsi -> tests/expr.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: ;a.a += true;",
          "83: ;a.a += 'fock';",
          "86: ;-NaN;",
          "87: ;-Infinity;",
          "88: ;NaN + NaN;",
          "",
          "[Removed Lines]",
          "85: Interp.conf({typeCheck:{strict:false}});",
          "",
          "[Added Lines]",
          "85: Interp.conf({noCheck:true});",
          "",
          "---------------"
        ],
        "tests/strict.jsi||tests/strict.jsi": [
          "File: tests/strict.jsi -> tests/strict.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: Interp.conf({maxDumpStack:0});",
          "",
          "[Removed Lines]",
          "1: #!/usr/local/bin/jsish -u %s",
          "",
          "[Added Lines]",
          "1: #!/usr/local/bin/jsish",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "208: bar2() ==> e ==> function created global: \"j\"",
          "209: bar3() ==> e ==> function created global: \"k\"",
          "210: bar4() ==> e ==> function created global: \"l\"",
          "214: foo3() ==> e ==> got 0 args, expected 1, calling function foo3(n:string)",
          "215: foo3(1) ==> e ==> type mismatch for argument arg 1 'n': expected \"string\" but got \"number\", in call to 'foo3' declared at strict.jsi:78.2 <1>.",
          "216: foo4(1) ==> e ==> type mismatch for argument arg 1 'n': expected \"string\" but got \"number\", in call to 'foo4' declared at strict.jsi:91.2 <1>.",
          "",
          "[Removed Lines]",
          "211: foo1(1) ==> e ==> got 1 args, expected 0, calling function foo1()",
          "212: foo2() ==> e ==> got 0 args, expected 1, calling function foo2(n)",
          "213: foo2(1,2) ==> e ==> got 2 args, expected 1, calling function foo2(n)",
          "",
          "[Added Lines]",
          "211: foo1(1) ==> undefined",
          "212: foo2() ==> undefined",
          "213: foo2(1,2) ==> undefined",
          "",
          "---------------"
        ],
        "tests/syntax.jsi||tests/syntax.jsi": [
          "File: tests/syntax.jsi -> tests/syntax.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/local/bin/jsish -u %s",
          "4: function foo() {",
          "5:   var i = Info; // Prevents static type check detections.",
          "6:   i.cmds(1,2,3,4);",
          "",
          "[Removed Lines]",
          "3: Interp.conf({typeCheck:['error'], maxDumpStack:0});",
          "",
          "[Added Lines]",
          "3: ;Interp.conf({noError:true, maxDumpStack:0});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: =!EXPECTSTART!=",
          "17: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "16: foo() ==> e ==> got 4 args, expected 0-2, calling function cmds(val:string|regexp='*', options:object=void)",
          "",
          "[Added Lines]",
          "16: Interp.conf({noError:true, maxDumpStack:0}) ==> undefined",
          "17: foo() ==> /home/pmacdona/src/jsi3/tests/syntax.jsi:6: warn: got 4 args, expected 0-2, calling function cmds(val:string|regexp='*', options:object=void)",
          "18: /home/pmacdona/src/jsi3/tests/syntax.jsi:6: warn: type mismatch for argument arg 1 'val': expected \"string|regexp\" but got \"number\", in call to 'cmds' declared at syntax.jsi:0.0 <1>.",
          "19: /home/pmacdona/src/jsi3/tests/syntax.jsi:6: warn: type mismatch for argument arg 2 'options': expected \"object\" but got \"number\", in call to 'cmds' declared at syntax.jsi:0.0 <2>.",
          "20: e ==> extra args, expected \"cmds(val:string|regexp='*', options:object=void)\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "49ddaf521a95690ba7ad1c98887996e316eb25d1",
      "candidate_info": {
        "commit_hash": "49ddaf521a95690ba7ad1c98887996e316eb25d1",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/49ddaf521a95690ba7ad1c98887996e316eb25d1",
        "files": [
          "lib/Jsi_Vfs.jsi",
          "lib/Jsish.jsi",
          "lib/autoload.jsi",
          "src/jsi.h",
          "src/jsiArray.c",
          "src/jsiFunc.c",
          "src/jsiInterp.c",
          "src/jsiProto.c",
          "src/jsiUtils.c",
          "tests/interp2.jsi",
          "tests/prob/bind.js",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.13\": Add Jsi_TableObj.  Fix several crash bugs.\n\nFossilOrigin-Name: 2c4f7caa63c06173e976adb447c171c662a4b943a26cb7eb8d7b206fe9a2d6b8",
        "before_after_code_files": [
          "lib/Jsi_Vfs.jsi||lib/Jsi_Vfs.jsi",
          "lib/Jsish.jsi||lib/Jsish.jsi",
          "lib/autoload.jsi||lib/autoload.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiArray.c||src/jsiArray.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "tests/interp2.jsi||tests/interp2.jsi",
          "tests/prob/bind.js||tests/prob/bind.js",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiArray.c||src/jsiArray.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiArray.c||src/jsiArray.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/Jsi_Vfs.jsi||lib/Jsi_Vfs.jsi": [
          "File: lib/Jsi_Vfs.jsi -> lib/Jsi_Vfs.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:             }",
          "134:             if (!ver || ver === '') ver = 'tip';",
          "135:             if (!self.quiet && ver !== '')",
          "137:             info = dosplit(self.exec('fossil info \"' + ver + '\" ' + sfx), info);",
          "138:             info.mntTag = ver;",
          "139:             if (ver.match(/^ver-[0-9]+\\.[0-9]+$/))",
          "",
          "[Removed Lines]",
          "136:                 puts('mounting version:', ver);",
          "",
          "[Added Lines]",
          "136:                 puts('Fossil mount:', ver);",
          "",
          "---------------"
        ],
        "lib/Jsish.jsi||lib/Jsish.jsi": [
          "File: lib/Jsish.jsi -> lib/Jsish.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:     return 'VALUES($'+name+'('+val.keys().join('),$'+name+'(')+'))';",
          "258: }",
          "309: function Jsi_TableObj(db:userobj, table:string, data:object, conf:object=void) {",
          "310:     var self = {};",
          "311:     var options = {",
          "",
          "[Removed Lines]",
          "261: function Jsi_ObjToSchema(db:userobj, table:string, data:object, conf:object=void) {",
          "262:     var self = {};",
          "263:     var options = {",
          "264:         noCreate    :false,     // Create table, if not exists.",
          "265:         objOpts     :{},        // Options for objOpts",
          "266:         verbose     :false",
          "267:     };",
          "268:     parseOpts(self, options, conf);",
          "269:     var cl = {}, cols = db.query('PRAGMA table_info(\"'+table+'\")');",
          "270:     if (!cols.length) {",
          "271:         if (!self.noCreate)",
          "272:             db.query(\"CREATE TABLE '\"+table+\"' %s\", {objName:'data'});",
          "273:         return true;",
          "274:     }",
          "275:     for (var c=0; c<cols.length; c++)",
          "276:         cl[cols[c].name] = cols[c];",
          "277:     var oo = self.objOpts;",
          "278:     oo.getSql = true;",
          "280:     var fs = db.query(\"CREATE TABLE '\"+table+\"' %s\", {objName:'data', objOpts:oo});",
          "281:     var s = fs;",
          "282:     s = ','+s.substr( s.indexOf('(')+1);",
          "283:     s = s.substr(0, s.length-2);",
          "284:     s +=',';",
          "285:     for (var i in data) {",
          "286:         if (cl[i]) continue;",
          "287:         var rec = s.substr( s.indexOf(','+i+' '));",
          "288:         if (!rec) throw('failed to find schema: '+i);",
          "289:         rec = rec.substr(1);",
          "290:         var re = rec.indexOf(',');",
          "291:         if (rec[re+1] == ' ' && ((re = rec.indexOf(')', re))>=0))",
          "292:             re = rec.indexOf(',', re);",
          "293:         rec = rec.substr(0, re);",
          "294:         var sql = 'ALTER TABLE \"'+table+'\" ADD COLUMN '+rec;",
          "295:         puts(\"RR: \",sql);",
          "296:         if (self.verbose)",
          "297:             LogInfo('SCHEMA:',sql);",
          "298:         db.eval(sql);",
          "299:         cl[i] = rec;",
          "300:     }",
          "303:     if (fs === t)",
          "304:         return true;",
          "306:     return false;",
          "307: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "322:     }",
          "323:     var oo = self.objOpts;",
          "324:     oo.getSql = true;",
          "326:     var cs = db.onecolumn(\"SELECT sql from sqlite_master where type='table' and name=@table\").trim();",
          "327:     var fs = db.query(\"CREATE TABLE '\"+table+\"' %s\", {objName:'data', objOpts:oo}).trim();",
          "328:     if (fs === cs)",
          "329:         return true;",
          "334:         return true;",
          "335:     var cln = cl.length, fln=fl.length;",
          "338:         return false;",
          "339:     }",
          "347:     }",
          "357:         var sql = 'ALTER TABLE \"'+table+'\" ADD COLUMN '+rec;",
          "359:         if (self.verbose)",
          "363:     }",
          "365:     return false;",
          "366: }",
          "369: function Jsi__Init() {",
          "",
          "[Removed Lines]",
          "330:     var f = fs.substr( fs.indexOf('(')+1, fs.length-1));",
          "331:     var c = cs.substr( cs.indexOf('(')+1, cs.length-1));",
          "332:     var fl = f.split(',[').sort(), cl = c.split(',[').sort();",
          "333:     if (fl.join(',[') == cl.join(',[')",
          "336:     if (cln >= fln) {",
          "337:         LogWarn('Can not sync obj with fewer fields than table: \"'+table+'\"')",
          "340:     var ci = 0, fi = 0;",
          "341:     while (cl<cln && fi<fln) {",
          "342:         if (cl[ci] === fl[fi]) {",
          "343:             ci++; fi++; continue;",
          "344:         }",
          "345:         var cn = cl[ci].substr(0, cl[ci].indexOf(']')-1),",
          "346:             fn = fl[fi].substr(0, fl[fi].indexOf(']')-1);",
          "348:     for (var i in data) {",
          "349:         if (cl[i]) continue;",
          "350:         var rec = s.substr( s.indexOf(','+i+' '));",
          "351:         if (!rec) throw('failed to find schema: '+i);",
          "352:         rec = rec.substr(1);",
          "353:         var re = rec.indexOf(',');",
          "354:         if (rec[re+1] == ' ' && ((re = rec.indexOf(')', re))>=0))",
          "355:             re = rec.indexOf(',', re);",
          "356:         rec = rec.substr(0, re);",
          "358:         puts(\"RR: \",sql);",
          "360:             LogInfo('SCHEMA:',sql);",
          "361:         db.eval(sql);",
          "362:         cl[i] = rec;",
          "",
          "[Added Lines]",
          "281:     var f = fs.substring( fs.indexOf('([')+2, fs.length-2);",
          "282:     var c = cs.substring( cs.indexOf('([')+2, cs.length-2);",
          "283:     var fl = f.split(', [').sort(), cl = c.split(', [').sort();",
          "284:     if (fl.join('') == cl.join(''))",
          "287:     if (cln > fln) {",
          "288:         LogWarn('Can not sync obj with fewer fields than table: \"'+table+'\"');",
          "291:     var fadds = cl.filter( n => !fl.includes(n) );",
          "292:     if (fadds.length) {",
          "293:         LogWarn('Can not sync, obj is missing fields in table: \"'+table+'\"\\n'+fadds.join('\\n|'));",
          "294:         return false;",
          "296:     var cadds = fl.filter( n => !cl.includes(n) );",
          "297:     for (var i in cadds) {",
          "298:         var rec = '['+cadds[i];",
          "301:             LogInfo('UPGRADE:',sql);",
          "302:         try { db.eval(sql); } catch(e) { LogError('SQL:'+e+' : '+sql); }",
          "",
          "---------------"
        ],
        "lib/autoload.jsi||lib/autoload.jsi": [
          "File: lib/autoload.jsi -> lib/autoload.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: Jsi_Auto.Jsi_LogFile    =",
          "16: Jsi_Auto.Jsi_Opts       =",
          "17: Jsi_Auto.Jsi_SqlValues  =",
          "19: Jsi_Auto.Jsi_Conf       = 'source(\"'+Info.scriptDir()+'/Jsish.jsi\")';",
          "20: Jsi_Auto.Htmlpp     = 'source(\"'+Info.scriptDir()+'/Htmlpp.jsi\")';",
          "21: Jsi_Auto.Csspp      = 'source(\"'+Info.scriptDir()+'/Csspp.jsi\")';",
          "",
          "[Removed Lines]",
          "18: Jsi_Auto.Jsi_ObjToSchema =",
          "",
          "[Added Lines]",
          "18: Jsi_Auto.Jsi_TableObj   =",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 12",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 13",
          "",
          "---------------"
        ],
        "src/jsiArray.c||src/jsiArray.c": [
          "File: src/jsiArray.c -> src/jsiArray.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "778:         v = obj->arr[0];",
          "779:         memmove(obj->arr, obj->arr+1, n*sizeof(Jsi_Value*));",
          "780:         obj->arr[n] = NULL;",
          "781:         Jsi_ValueDup2(interp, ret, v);",
          "782:         Jsi_DecrRefCount(interp, v);",
          "783:         Jsi_ObjSetLength(interp, obj, n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "781:         if (!v) return JSI_OK;",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "516:     f->endPos = l->cur;",
          "517:     f->startPos = -1; // Have to get these from newline count.",
          "518:     if (f->retType & JSI_TT_UNDEFINED)",
          "522:     pstate->argType = 0;",
          "523:     if (localvar && args && (interp->strict)) {",
          "524:         int i, j;",
          "",
          "[Removed Lines]",
          "519:         Jsi_LogWarn(\"illegal use of 'undefined' in a return type: %s\", name?name:\"\");",
          "",
          "[Added Lines]",
          "519:         Jsi_LogWarn(\"invalid use of 'undefined' in a return type: %s\", name?name:\"\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "527:                 if (i != j && !Jsi_Strcmp(args->args[i].name, args->args[j].name)) {",
          "528:                         if (line)",
          "529:                             interp->parseLine = line;",
          "531:                         if (line)",
          "532:                             interp->parseLine = NULL;",
          "536:                 }",
          "537:             }",
          "538:             for (j=0; j<localvar->count; j++) {",
          "539:                 if (!Jsi_Strcmp(localvar->args[j].name, args->args[i].name)) {",
          "540:                         if (line)",
          "541:                             interp->parseLine = line;",
          "543:                         if (line)",
          "544:                             interp->parseLine = NULL;",
          "548:                 }",
          "549:             }",
          "550:         }",
          "",
          "[Removed Lines]",
          "530:                         Jsi_LogWarn(\"function %s():  duplicate parameter name '%s'\", name?name:\"\", args->args[i].name);",
          "533:                         jsi_TypeMismatch(interp);",
          "534:                         if (interp->typeCheck.error)",
          "535:                             pstate->err_count++;",
          "542:                         Jsi_LogWarn(\"function %s():  parameter name conflicts with 'var %s'\", name?name:\"\", localvar->args[j].name);",
          "545:                         jsi_TypeMismatch(interp);",
          "546:                         if (interp->typeCheck.error)",
          "547:                             pstate->err_count++;",
          "",
          "[Added Lines]",
          "529:                         Jsi_LogError(\"function %s():  duplicate parameter name '%s'\", name?name:\"\", args->args[i].name);",
          "532:                         pstate->err_count++;",
          "539:                         Jsi_LogError(\"function %s():  parameter name conflicts with local '%s'\", name?name:\"\", localvar->args[j].name);",
          "542:                         pstate->err_count++;",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:     JSI_OPT(STRING,Jsi_Interp, scriptFile,  .help=\"Interp init script file\"),",
          "130:     JSI_OPT(STRING,Jsi_Interp, stdinStr,    .help=\"String to use as stdin for console.input()\"),",
          "131:     JSI_OPT(STRING,Jsi_Interp, stdoutStr,   .help=\"String to collect stdout for puts()\"),",
          "133:     JSI_OPT(CUSTOM,Jsi_Interp, subOpts,     .help=\"Infrequently used sub-options\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=InterpSubOptions),",
          "134:     JSI_OPT(BOOL,  Jsi_Interp, subthread,   .help=\"Create a threaded Interp\", jsi_IIOF|JSI_OPT_LOCKSAFE),",
          "135:     JSI_OPT(CUSTOM,Jsi_Interp, traceCall,   .help=\"Trace commands\", .flags=0,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_callTraceStrs),",
          "",
          "[Removed Lines]",
          "132:     JSI_OPT(BOOL,  Jsi_Interp, strict,      .help=\"Globally enable strict: same as 'use strict' in main program\"),",
          "",
          "[Added Lines]",
          "132:     JSI_OPT(BOOL,  Jsi_Interp, strict,      .help=\"Globally enable strict: same as 'use strict' in main program\", .flags=JSI_OPT_LOCKSAFE),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2143:     if (interp->subOpts.mutexUnlock) Jsi_MutexUnlock(interp, interp->Mutex);",
          "2144:     if (!isthrd) {",
          "2145:         int ostrict = sinterp->strict;",
          "2147:         sinterp->level++;",
          "2148:         if (interp->framePtr->tryDepth)",
          "2149:             sinterp->framePtr->tryDepth++;",
          "",
          "[Removed Lines]",
          "2146:         sinterp->strict = 0;",
          "",
          "[Added Lines]",
          "2146:         sinterp->strict = !interp->isSafe;",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "183: {",
          "184:     Jsi_FuncObj *fo = funcPtr->fobj;",
          "185:     Jsi_Value *nargs = args, *fargs = fo->bindArgs;",
          "186:     int i, argc = Jsi_ValueGetLength(interp, args);",
          "187:     int fargc = (fargs? Jsi_ValueGetLength(interp, fargs) : 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:     if (!fo)",
          "186:         return Jsi_LogError(\"bind failure\"); // TODO: fix via \"call\" failure?",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "591:                 Jsi_DSAppend(&sStr,\")\", NULL);",
          "592:             }",
          "593:         }",
          "595:     }",
          "596:     if (!create)",
          "597:         Jsi_DSAppend(&vStr, \")\", NULL);",
          "",
          "[Removed Lines]",
          "594:         pre = \",\";",
          "",
          "[Added Lines]",
          "594:         pre = \", \";",
          "",
          "---------------"
        ],
        "tests/interp2.jsi||tests/interp2.jsi": [
          "File: tests/interp2.jsi -> tests/interp2.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: ;File.write('/tmp/xx.txt','');",
          "27: ;ii.eval('var db = new Sqlite(\\'/tmp/xx.txt\\'); db.eval(\\'CREATE TABLE foo(a,b)\\');');",
          "31: File.remove('/tmp/xx.txt',true);",
          "32: delete ii;",
          "",
          "[Removed Lines]",
          "29: ;//ii.eval('var db = new Sqlite(\\'/tmp/xx.db\\');//LOCKWRITE');",
          "",
          "[Added Lines]",
          "29: ;//ii.eval('db = new Sqlite(\\'/tmp/xx.db\\');//LOCKWRITE');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63: File.remove('/tmp/xx.txt',true) ==> undefined",
          "64: File.write('/tmp/xx.txt','') ==> 0",
          "65: ii.eval('var db = new Sqlite('/tmp/xx.txt'); db.eval('CREATE TABLE foo(a,b)');') ==> undefined",
          "67: PASS!: err = Safe accces denied",
          "68: SAFE EXEC:  no exec in safe mode",
          "69: SUBINTERP:  subinterps disallowed",
          "",
          "[Removed Lines]",
          "66: ii.eval('var db = new Sqlite('/tmp/xx.db');//LOCKWRITE') ==>",
          "",
          "[Added Lines]",
          "66: ii.eval('db = new Sqlite('/tmp/xx.db');//LOCKWRITE') ==>",
          "",
          "---------------"
        ],
        "tests/prob/bind.js||tests/prob/bind.js": [
          "File: tests/prob/bind.js -> tests/prob/bind.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: function h(a) { return {a: a, th: this}; }",
          "2: var i = h.bind({str: \"foo\"}, 2);",
          "4: i.call({x: 1});",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "302b16da546cfe23faaff60ce903c455918648d6",
      "candidate_info": {
        "commit_hash": "302b16da546cfe23faaff60ce903c455918648d6",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/302b16da546cfe23faaff60ce903c455918648d6",
        "files": [
          "Makefile",
          "make.conf",
          "src/jsi.h",
          "tests/freeze.jsi",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.2.0\": Revised build system to not require configure\n\nFossilOrigin-Name: 61320a09ce69800eba082103b7f69db537d58b6891dbe8877ca26fb77760ef0e",
        "before_after_code_files": [
          "make.conf||make.conf",
          "src/jsi.h||src/jsi.h",
          "tests/freeze.jsi||tests/freeze.jsi",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "make.conf||make.conf": [
          "File: make.conf -> make.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #define __JSI_H__",
          "5: #define JSI_VERSION_MAJOR   3",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "6: #define JSI_VERSION_MINOR   1",
          "7: #define JSI_VERSION_RELEASE 10",
          "",
          "[Added Lines]",
          "6: #define JSI_VERSION_MINOR   2",
          "7: #define JSI_VERSION_RELEASE 0",
          "",
          "---------------"
        ],
        "tests/freeze.jsi||tests/freeze.jsi": [
          "File: tests/freeze.jsi -> tests/freeze.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: var x, j;",
          "2: ;x = {a:1, b:2};",
          "3: ;'\\n---- Freeze object';",
          "4: ;Object.freeze(x);",
          "6: ;'\\n---- Query freeze state';",
          "7: ;Info.obj(x);",
          "8: ;x.a = 9;",
          "9: ;++x.b;",
          "11: ;'\\n---- Bad write/read';",
          "12: ;//x.c = 8;",
          "13: ;//j= x.c;",
          "15: ;'\\n---- Disable modify';",
          "16: ;Object.freeze(x,true,false);",
          "17: ;//x.a = 10;",
          "19: ;'\\n---- Disable modify and readcheck';",
          "20: ;Object.freeze(x,true,false,false);",
          "21: ;//x.a = 11;",
          "22: ;x.e;",
          "24: ;'\\n---- Unfreeze';",
          "25: ;Object.freeze(x,false);",
          "26: ;x.f=13;",
          "30: =!EXPECTSTART!=",
          "31: x = {a:1, b:2} ==> { a:1, b:2 }",
          "32: '",
          "33: ---- Freeze object'",
          "34: Object.freeze(x) ==> undefined",
          "35: '",
          "36: ---- Query freeze state'",
          "37: Info.obj(x) ==> { freeze:true, freezeModify:true, freezeReadCheck:true, getters:[], objType:\"object\", setters:[], spec:undefined }",
          "38: x.a = 9 ==> 9",
          "39: ++x.b ==> 3",
          "40: '",
          "41: ---- Bad write/read'",
          "42: x.c = 8 ==>",
          "43: [PASS]!: err = object freeze: attempted assign \"c\"",
          "44: j= x.c ==>",
          "45: [PASS]!: err = object freeze: read undefined \"c\"",
          "46: '",
          "47: ---- Disable modify'",
          "48: Object.freeze(x,true,false) ==> undefined",
          "49: x.a = 10 ==>",
          "50: [PASS]!: err = object freeze: attempted assign/modify \"a\"",
          "51: '",
          "52: ---- Disable modify and readcheck'",
          "53: Object.freeze(x,true,false,false) ==> undefined",
          "54: x.a = 11 ==>",
          "55: [PASS]!: err = object freeze: attempted assign/modify \"a\"",
          "56: x.e ==> undefined",
          "57: '",
          "58: ---- Unfreeze'",
          "59: Object.freeze(x,false) ==> undefined",
          "60: x.f=13 ==> 13",
          "61: =!EXPECTEND!=",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "92ed157603a00d173cdae919994a6c22853fd9ef",
      "candidate_info": {
        "commit_hash": "92ed157603a00d173cdae919994a6c22853fd9ef",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/92ed157603a00d173cdae919994a6c22853fd9ef",
        "files": [
          "lib/Websrv.jsi",
          "lib/www/js/Jsish.js",
          "src/jsi.h",
          "src/jsiWebSocket.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.4.2\": add ip address in WS connections, Websrv -es5test\n\nFossilOrigin-Name: 903c89e828af1dd8fa4f1b858aa3fa0e8d2f6936a2f0254842782dbaf379084a",
        "before_after_code_files": [
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "lib/www/js/Jsish.js||lib/www/js/Jsish.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:         closeTimeout:0,         // Time til exit after close of final client websocket (ms).",
          "28:         confFile    :'',        // JSON file of options (eg. for useridPass or wsOpts).",
          "29:         docs        :'',        // Display markdown docs from this directory.",
          "30:         hist        :false,     // Let Vue employ history mode, short for urlFallback=url: useful for -docs/-app.",
          "31:         ignoreExit  :false,     // Ignore exit request.",
          "32:         initArg     :[],        // List of app modules to run.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:         es5test     :'',        // Verify as parsable-es5 all .js scripts within dir and below, then exit.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398:             File.write(to, out);",
          "399:         }",
          "400:     }",
          "402:     if (self.srcFile !== '')",
          "403:         source(self.srcFile);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "403:     function es5test() {",
          "404:         var d = self.es5test;",
          "405:         if (!File.isdir(d))",
          "406:             throw 'not a directory: '+d;",
          "407:         var i, lst = File.glob('*.js', {dir:d, recurse:true});",
          "408:         for (i of lst) {",
          "409:             var int = new Interp({noEval:true, noES6:true, scriptFile:i});",
          "410:             delete int;",
          "411:         }",
          "412:     }",
          "414:     if (self.es5test)",
          "415:         return es5test();",
          "",
          "---------------"
        ],
        "lib/www/js/Jsish.js||lib/www/js/Jsish.js": [
          "File: lib/www/js/Jsish.js -> lib/www/js/Jsish.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:     return fn.substr(i+1);",
          "243: }",
          "246:     var f=document.createElement('script');",
          "247:     f.setAttribute(\"type\",\"text/javascript\");",
          "249:         f.innerHTML = fn;",
          "250:     else {",
          "251:         f.setAttribute(\"src\", fn);",
          "",
          "[Removed Lines]",
          "245: function addScript(fn, asData) { // Add script into page.",
          "248:     if (asData)",
          "",
          "[Added Lines]",
          "245: function addScript(fn) { // Add script into page.",
          "248:     if (fn.indexOf('\\n')>=0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "499:     },",
          "500:     htmladd: function(str) { output(str) },",
          "503:         var f=document.createElement('script');",
          "504:         f.setAttribute(\"type\",\"text/javascript\");",
          "505:         f.setAttribute(\"src\", fn);",
          "",
          "[Removed Lines]",
          "502:     inc: function(fn, onload, onerror) {",
          "",
          "[Added Lines]",
          "502:     inc: function(fn, onload, onerror) { $jsig('fn:string, success:function, error:function', arguments)();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "531:                         str = SigConvert(str);",
          "533:                     }",
          "536:                 },",
          "537:                 error:function(str) {",
          "",
          "[Removed Lines]",
          "534:                     addScript(str, true);",
          "",
          "[Added Lines]",
          "534:                     if (str.indexOf('\\n')>=0)",
          "535:                         addScript(str);",
          "536:                     else",
          "537:                         console.warn('no newline', str);",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   4",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 1",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 2",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2521:         break;",
          "2523:     case LWS_CALLBACK_FILTER_PROTOCOL_CONNECTION:",
          "2530:         if (cmdPtr->onFilter && !cmdPtr->deleted) {",
          "2533:             int killcon = 0, n = 0;",
          "2534:             Jsi_Obj *oarg1;",
          "2535:             Jsi_Value *vpargs, *vargs[10], *ret = Jsi_ValueNew1(interp);",
          "",
          "[Removed Lines]",
          "2524:         pss = jsi_wsgetPss(cmdPtr, wsi, user, 1, 1);",
          "2525:         Jsi_DSSet(&pss->url, inPtr);",
          "2526:         if (cmdPtr->instCtx == context && (cmdPtr->clientName[0] || cmdPtr->clientIP[0])) {",
          "2527:             pss->clientName = cmdPtr->clientName;",
          "2528:             pss->clientIP = cmdPtr->clientIP;",
          "2529:         }",
          "2531:             if (!pss)",
          "2532:                 pss = jsi_wsgetPss(cmdPtr, wsi, user, 1, 0);",
          "",
          "[Added Lines]",
          "2525:             pss = jsi_wsgetPss(cmdPtr, wsi, user, 1, 0);",
          "2526:             Jsi_DSSet(&pss->url, inPtr);",
          "2527:             if (cmdPtr->instCtx == context && (cmdPtr->clientName[0] || cmdPtr->clientIP[0])) {",
          "2528:                 pss->clientName = cmdPtr->clientName;",
          "2529:                 pss->clientIP = cmdPtr->clientIP;",
          "2530:                 if (cmdPtr->debug>1)",
          "2531:                     fprintf(stderr,  \"Filter ws msg %d from %s (%s)\\n\", pss->wid,",
          "2532:                          pss->clientName, pss->clientIP);",
          "2534:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2569:         }",
          "2570:         if (!pss)",
          "2571:             pss = jsi_wsgetPss(cmdPtr, wsi, user, 1, 0);",
          "2574:             Jsi_Obj *oarg1;",
          "2575:             Jsi_Value *vpargs, *vargs[10];",
          "",
          "[Removed Lines]",
          "2572:         if (cmdPtr->onOpen && !cmdPtr->deleted) {",
          "",
          "[Added Lines]",
          "2574:         if (cmdPtr->instCtx == context && (cmdPtr->clientName[0] || cmdPtr->clientIP[0])) {",
          "2575:             pss->clientName = cmdPtr->clientName;",
          "2576:             pss->clientIP = cmdPtr->clientIP;",
          "2577:             if (cmdPtr->debug>1)",
          "2578:                 fprintf(stderr,  \"Establish WS msg %d from %s (%s)\\n\", pss->wid,",
          "2579:                      pss->clientName, pss->clientIP);",
          "2580:         }",
          "2581:          if (cmdPtr->onOpen && !cmdPtr->deleted) {",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "a179e99442d3dfa23c1cde7c100f0e6019650cf6",
      "candidate_info": {
        "commit_hash": "a179e99442d3dfa23c1cde7c100f0e6019650cf6",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/a179e99442d3dfa23c1cde7c100f0e6019650cf6",
        "files": [
          "c-demos/Makefile",
          "c-demos/cextn/Bag.jsc",
          "c-demos/cextn/Baker.jsc",
          "c-demos/cextn/Bee.jsc",
          "c-demos/cextn/Car.jsc",
          "c-demos/cextn/Makefile",
          "c-demos/cextn/Sum.jsc",
          "c-demos/cextn/Tiny.jsc",
          "c-demos/cextn/bagtest.jsi",
          "c-demos/cextn/ext_test.jsi",
          "c-demos/cextn/logtest.jsi",
          "c-demos/cextn/new/Bee.jsi",
          "c-demos/cextn/new/Tiny.jsi",
          "c-demos/cextn/tinytest.jsi",
          "lib/Cextn.jsi",
          "lib/Debug.jsi",
          "lib/DebugUI/DebugUI.jsi",
          "lib/autoload.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCData.c",
          "src/jsiCmds.c",
          "src/jsiFunc.c",
          "src/jsiInterp.c",
          "src/jsiValue.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.1.4\": rename Cdata to Cextn\n\nFossilOrigin-Name: c9c793f06b0e18ce42f93e12bb25ae5f11fbd6d044317d9aab73c7dccb0c9802",
        "before_after_code_files": [
          "lib/Cdata.jsi||lib/Cextn.jsi",
          "lib/Debug.jsi||lib/Debug.jsi",
          "lib/DebugUI/DebugUI.jsi||lib/DebugUI/DebugUI.jsi",
          "lib/autoload.jsi||lib/autoload.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCData.c||src/jsiCData.c",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiValue.c||src/jsiValue.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCData.c||src/jsiCData.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiValue.c||src/jsiValue.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCData.c||src/jsiCData.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiValue.c||src/jsiValue.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/Cdata.jsi||lib/Cextn.jsi": [
          "File: lib/Cdata.jsi -> lib/Cextn.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: {",
          "10:     var options = {         // The C-API preprocessor for structs and enums.",
          "",
          "[Removed Lines]",
          "7: function Cdata(args:array, conf:object=void)",
          "",
          "[Added Lines]",
          "7: function Cextn(args:array, conf:object=void)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:         Trace       :false, jscHeaderStr:'', parmFlags:'',",
          "37:         objOptCmdStr:'', objCmdStr:'', selfSuffix:'',",
          "38:     };",
          "40:     self.version = self.pkg.version;",
          "41:     self.verStr = self.pkg.verStr;",
          "42:     var Ex = {asize:0, offs:1, size:2, sig:3};",
          "",
          "[Removed Lines]",
          "39:     self.pkg = require('Cdata', 0);",
          "",
          "[Added Lines]",
          "39:     self.pkg = require('Cextn', 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1716:     return retval;",
          "1717: }",
          "1720: if (isMain())",
          "",
          "[Removed Lines]",
          "1719: provide(Cdata, \"2\", {logmask:'debug,trace'});",
          "1721:     puts(moduleRun(Cdata));",
          "",
          "[Added Lines]",
          "1719: provide(Cextn, \"2\", {logmask:'debug,trace'});",
          "1721:     puts(moduleRun(Cextn));",
          "",
          "---------------"
        ],
        "lib/Debug.jsi||lib/Debug.jsi": [
          "File: lib/Debug.jsi -> lib/Debug.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:             return;",
          "182:         switch (cmd) {",
          "183:             case 'breakpoints':",
          "185:                 for (var i in blst.sort()) {",
          "187:                     str = format(\"#%-5d: enabled=%s hits=%d, \", bp.id, bp.enabled?\"true, \":\"false,\", bp.hits);",
          "188:                     switch (bp.type) {",
          "189:                         case 'line': str += format(\"file=%s:%d\", bp.file, bp.line); break;",
          "",
          "[Removed Lines]",
          "184:                 var blst = self.interp.eval('Debugger.info()');",
          "186:                     var bp = self.interp.eval('Debugger.info('+blst[i]+')');",
          "",
          "[Added Lines]",
          "184:                 var blst = self.interp.eval('Util.dbgInfo()');",
          "186:                     var bp = self.interp.eval('Util.dbgInfo('+blst[i]+')');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248:         }",
          "250:         try {",
          "252:             puts((temp?\"temporary \":\"\") +\"breakpoint #\"+b+\" set: \"+bp);",
          "253:         } catch(e) {",
          "254:             puts(\"add failed: \"+e);",
          "",
          "[Removed Lines]",
          "251:             var b = self.interp.eval('Debugger.add(\"'+bp+'\", '+(temp?\"true\":\"false\")+')');",
          "",
          "[Added Lines]",
          "251:             var b = self.interp.eval('Util.dbgAdd(\"'+bp+'\", '+(temp?\"true\":\"false\")+')');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "258:     function cmdDelete(lst:array, line:number, func:string, file:string) {",
          "259:         var bp, num, val = lst[1];",
          "260:         if (lst.length == 1) {",
          "262:             for (var i in bps) {",
          "264:             }",
          "265:             return;",
          "266:         }",
          "",
          "[Removed Lines]",
          "261:             var bps = self.interp.eval('Debugger.info()');",
          "263:                 self.interp.eval('Debugger.remove('+bps[i]+')');",
          "",
          "[Added Lines]",
          "261:             var bps = self.interp.eval('Util.dbgInfo()');",
          "263:                 self.interp.eval('Util.dbgRemove('+bps[i]+')');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "269:             return;",
          "270:         }",
          "271:         try {",
          "273:         } catch(e) {",
          "274:             eputs(\"remove failed: \"+e);",
          "275:         }",
          "",
          "[Removed Lines]",
          "272:             self.interp.eval('Debugger.remove('+num+')');",
          "",
          "[Added Lines]",
          "272:             self.interp.eval('Util.dbgRemove('+num+')');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "278:     function cmdEnable(lst:array, on:boolean) {",
          "279:         var bp, num, val = lst[1];",
          "280:         if (lst.length == 1) {",
          "282:             for (var i in bps) {",
          "284:             }",
          "285:             return;",
          "286:         }",
          "287:         if (val === undefined || (num=parseIntN(val))<=0)",
          "288:             return eputs(\"bad index: \"+val);",
          "289:         try {",
          "291:         } catch(e) {",
          "292:             eputs(\"enable failed: \"+e);",
          "293:         }",
          "",
          "[Removed Lines]",
          "281:             var bps = self.interp.eval('Debugger.info()');",
          "283:                 self.interp.eval('Debugger.enable('+bps[i]+','+on+')');",
          "290:             self.interp.eval('Debugger.enable('+num+','+on+')');",
          "",
          "[Added Lines]",
          "281:             var bps = self.interp.eval('Util.dbgInfo()');",
          "283:                 self.interp.eval('Util.dbgEnable('+bps[i]+','+on+')');",
          "290:             self.interp.eval('Util.dbgEnable('+num+','+on+')');",
          "",
          "---------------"
        ],
        "lib/DebugUI/DebugUI.jsi||lib/DebugUI/DebugUI.jsi": [
          "File: lib/DebugUI/DebugUI.jsi -> lib/DebugUI/DebugUI.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "361:             return;",
          "362:         switch (cmd) {",
          "363:             case 'bp':",
          "365:                 if ((!blst) || blst.length<=0)",
          "366:                     return;",
          "367:                 for (var i in blst.sort()) {",
          "369:                     str = format(\"#%-5d: enabled=%s hits=%d, \", bp.id, bp.enabled?\"true, \":\"false,\", bp.hits);",
          "370:                     switch (bp.type) {",
          "371:                         case 'line': str += format(\"file=%s:%d\", bp.file, bp.line); break;",
          "",
          "[Removed Lines]",
          "364:                 var blst = self.interp.eval('Debugger.info()');",
          "368:                     var bp = self.interp.eval('Debugger.info('+blst[i]+')');",
          "",
          "[Added Lines]",
          "364:                 var blst = self.interp.eval('Util.dbgInfo()');",
          "368:                     var bp = self.interp.eval('Util.dbgInfo('+blst[i]+')');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "395:     }",
          "397:     function webBPUpdate() {",
          "399:         if (blst && blst.length) {",
          "400:             for (var i in blst.sort()) {",
          "402:                 bps.push(bp);",
          "403:             }",
          "404:         }",
          "",
          "[Removed Lines]",
          "398:         var bps = [], blst = self.interp.eval('Debugger.info()');",
          "401:                 var bp = self.interp.eval('Debugger.info('+blst[i]+')');",
          "",
          "[Added Lines]",
          "398:         var bps = [], blst = self.interp.eval('Util.dbgIfo()');",
          "401:                 var bp = self.interp.eval('Util.dbgInfo('+blst[i]+')');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "442:         var done = false;",
          "443:         try {",
          "445:             wputs((temp?\"temporary \":\"\") +\"breakpoint #\"+b+\" set: \"+bp);",
          "446:             done = true;",
          "447:         } catch(e) {",
          "",
          "[Removed Lines]",
          "444:             var b = self.interp.eval('Debugger.add(\"'+bp+'\", '+(temp?\"true\":\"false\")+')');",
          "",
          "[Added Lines]",
          "444:             var b = self.interp.eval('Util.dbgAdd(\"'+bp+'\", '+(temp?\"true\":\"false\")+')');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "457:     function cmdDelete(lst:array, line:number, func:string, file:string) {",
          "458:         var bp, num, val = lst[1];",
          "459:         if (lst.length == 1) {",
          "461:             for (var i in bps) {",
          "463:             }",
          "464:         } else {",
          "465:             if (val === undefined || (num=parseIntN(val))<=0) {",
          "",
          "[Removed Lines]",
          "460:             var bps = self.interp.eval('Debugger.info()');",
          "462:                 self.interp.eval('Debugger.remove('+bps[i]+')');",
          "",
          "[Added Lines]",
          "460:             var bps = self.interp.eval('Util.dbgInfo()');",
          "462:                 self.interp.eval('Util.dbgRemove('+bps[i]+')');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "467:                 return;",
          "468:             }",
          "469:             try {",
          "471:             } catch(e) {",
          "472:                 eputs(\"remove failed: \"+e);",
          "473:             }",
          "",
          "[Removed Lines]",
          "470:                 self.interp.eval('Debugger.remove('+num+')');",
          "",
          "[Added Lines]",
          "470:                 self.interp.eval('Util.dbgRemove('+num+')');",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "478:     function cmdEnable(lst:array, on:boolean) {",
          "479:         var bp, num, val = lst[1];",
          "480:         if (lst.length == 1) {",
          "482:             for (var i in bps) {",
          "484:             }",
          "485:         } else {",
          "486:             if (val === undefined || (num=parseIntN(val))<=0)",
          "487:                 return eputs(\"bad index: \"+val);",
          "488:             try {",
          "490:             } catch(e) {",
          "491:                 return eputs(\"enable failed: \"+e);",
          "492:             }",
          "",
          "[Removed Lines]",
          "481:             var bps = self.interp.eval('Debugger.info()');",
          "483:                 self.interp.eval('Debugger.enable('+bps[i]+','+on+')');",
          "489:                 self.interp.eval('Debugger.enable('+num+','+on+')');",
          "",
          "[Added Lines]",
          "481:             var bps = self.interp.eval('Util.dbgInfo()');",
          "483:                 self.interp.eval('Util.dbgEnable('+bps[i]+','+on+')');",
          "489:                 self.interp.eval('Util.dbgEnable('+num+','+on+')');",
          "",
          "---------------"
        ],
        "lib/autoload.jsi||lib/autoload.jsi": [
          "File: lib/autoload.jsi -> lib/autoload.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: Jsi_Auto.Htmlpp     = 'source(\"'+Info.scriptDir()+'/Htmlpp.jsi\")';",
          "16: Jsi_Auto.Csspp      = 'source(\"'+Info.scriptDir()+'/Csspp.jsi\")';",
          "17: Jsi_Auto.Jspp       = 'source(\"'+Info.scriptDir()+'/Jspp.jsi\")';",
          "19: Jsi_Auto.Websrv     = 'source(\"'+Info.scriptDir()+'/Websrv.jsi\")';",
          "20: Jsi_Auto.Wget       = 'source(\"'+Info.scriptDir()+'/Wget.jsi\")';",
          "21: Jsi_Auto.Debug      = 'source(\"'+Info.scriptDir()+'/Debug.jsi\")';",
          "",
          "[Removed Lines]",
          "18: Jsi_Auto.Cdata      = 'source(\"'+Info.scriptDir()+'/Cdata.jsi\")';",
          "",
          "[Added Lines]",
          "18: Jsi_Auto.Cextn      = 'source(\"'+Info.scriptDir()+'/Cextn.jsi\")';",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   1",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 3",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 4",
          "",
          "---------------"
        ],
        "src/jsiCData.c||src/jsiCData.c": [
          "File: src/jsiCData.c -> src/jsiCData.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include <stdint.h>",
          "18: #include <sys/time.h>",
          "25: enum { jsi_CTYP_DYN_MEMORY=(1LL<<32), jsi_CTYP_STRUCT=(1LL<<33), jsi_CTYP_ENUM=(1LL<<34) };",
          "27: typedef struct {",
          "",
          "[Removed Lines]",
          "20: #define UdcGet(udf, _this, funcPtr) \\",
          "21:    CDataObj *udf = (typeof(udf))Jsi_UserObjGetData(interp, _this, funcPtr); \\",
          "22:     if (!udf) \\",
          "23:         return Jsi_LogError(\"CData.%s called with non-CData object\", funcPtr->cmdSpec->name);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4901: };",
          "4902: #endif",
          "4914: static Jsi_CmdSpec infoCmds[] = {",
          "4915:     { \"argv0\",      InfoArgv0Cmd,       0,  0, \"\", .help=\"Return initial start script file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
          "4916:     { \"cmds\",       InfoCmdsCmd,        0,  2, \"val:string|regexp='*', options:object=void\", .help=\"Return details or list of matching commands\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT, .flags=0, .info=0, .opts=InfoCmdsOptions },",
          "",
          "[Removed Lines]",
          "4904: #ifndef JSI_OMIT_DEBUG",
          "4905: static Jsi_CmdSpec debugCmds[] = {",
          "4906:     { \"add\",        DebugAddCmd,    1,  2, \"val:string|number, temp:boolean=false\", .help=\"Add a breakpoint for line, file:line or func\", .retType=(uint)JSI_TT_NUMBER },",
          "4907:     { \"remove\",     DebugRemoveCmd, 1,  1, \"id:number\", .help=\"Remove breakpoint\", .retType=(uint)JSI_TT_VOID },",
          "4908:     { \"enable\",     DebugEnableCmd, 2,  2, \"id:number, on:boolean\", .help=\"Enable/disable breakpoint\", .retType=(uint)JSI_TT_VOID },",
          "4909:     { \"info\",       DebugInfoCmd,   0,  1, \"id:number=void\", .help=\"Return info about one breakpoint, or list of bp numbers\", .retType=(uint)JSI_TT_OBJECT|JSI_TT_ARRAY },",
          "4910:     { NULL, 0,0,0,0,  .help=\"Debugger breakpoint management\" }",
          "4911: };",
          "4912: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4992: static Jsi_CmdSpec utilCmds[] = {",
          "4993: #ifndef JSI_OMIT_BASE64",
          "4994:     { \"argArray\",   SysArgArrayCmd,  1,  1, \"arg:any|undefined\", .help=\"Coerces non-null to an array, if necessary\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_NULL },",
          "4995:     { \"complete\",   SysCompleteCmd,  1,  1, \"val:string\",.help=\"Return true if string is complete command with balanced braces, etc\", .retType=(uint)JSI_TT_BOOLEAN },",
          "4996:     { \"base64\",     SysBase64Cmd,    1,  2, \"val:string, decode:boolean=false\",.help=\"Base64 encode/decode a string\", .retType=(uint)JSI_TT_STRING },",
          "4997:     { \"hexStr\",     SysHexStrCmd,    1,  2, \"val:string, decode:boolean=false\",.help=\"Hex encode/decode a string\", .retType=(uint)JSI_TT_STRING },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4985: #ifndef JSI_OMIT_DEBUG",
          "4986:     { \"dbgAdd\",     DebugAddCmd,    1,  2, \"val:string|number, temp:boolean=false\", .help=\"Debugger add a breakpoint for line, file:line or func\", .retType=(uint)JSI_TT_NUMBER },",
          "4987:     { \"dbgRemove\",  DebugRemoveCmd, 1,  1, \"id:number\", .help=\"Debugger remove breakpoint\", .retType=(uint)JSI_TT_VOID },",
          "4988:     { \"dbgEnable\",  DebugEnableCmd, 2,  2, \"id:number, on:boolean\", .help=\"Debugger enable/disable breakpoint\", .retType=(uint)JSI_TT_VOID },",
          "4989:     { \"dbgInfo\",    DebugInfoCmd,   0,  1, \"id:number=void\", .help=\"Debugger return info about one breakpoint, or list of bp numbers\", .retType=(uint)JSI_TT_OBJECT|JSI_TT_ARRAY },",
          "4990: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5081:     Jsi_CommandCreateSpecs(interp, \"Util\",   utilCmds,   NULL, 0);",
          "5082: #ifndef JSI_OMIT_EVENT",
          "5083:     Jsi_CommandCreateSpecs(interp, \"Event\",  eventCmds,  NULL, 0);",
          "5087: #endif",
          "5088:     return JSI_OK;",
          "5089: }",
          "",
          "[Removed Lines]",
          "5084: #endif",
          "5085: #ifndef JSI_OMIT_DEBUG",
          "5086:     Jsi_CommandCreateSpecs(interp, \"Debugger\",  debugCmds,  NULL, 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "620:                 Jsi_Value *v __attribute__((unused));",
          "621:                 Jsi_Value *kPtr = &key; // Note: a string key so no reset needed.",
          "622:                 Jsi_ValueMakeStringKey(interp, &kPtr, argkey);",
          "625:             }",
          "626:         }",
          "627:     }",
          "",
          "[Removed Lines]",
          "623:                 v = jsi_ValueObjKeyAssign(interp, arguments, kPtr, NULL, JSI_OM_DONTENUM);",
          "624:                 jsi_ValueDebugLabel(v, \"locals\", who->name);",
          "",
          "[Added Lines]",
          "623:                 jsi_ValueObjKeyAssign(interp, arguments, kPtr, NULL, JSI_OM_DONTENUM);",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "804:                 rc = Jsi_EvalString(interp, \"moduleRun('Archive');\", JSI_EVAL_ISMAIN);",
          "805:                 break;",
          "806:             case 'c':",
          "808:                 break;",
          "809:             case 'd':",
          "810:                 interp->debugOpts.isDebugger = 1;",
          "",
          "[Removed Lines]",
          "807:                 rc = Jsi_EvalString(interp, \"puts(moduleRun('Cdata'));\", JSI_EVAL_ISMAIN);",
          "",
          "[Added Lines]",
          "807:                 rc = Jsi_EvalString(interp, \"puts(moduleRun('Cextn'));\", JSI_EVAL_ISMAIN);",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1010:     if (!kstr)",
          "1011:         kstr = Jsi_ValueToString(interp, keyval, NULL);",
          "1013:         Jsi_Value *v = (Jsi_Value*)Jsi_HashGet(obj->setters, kstr, 0);",
          "1014:         if (v) {",
          "1015:             Jsi_Value *vpargs, *vargs[2], *retStr = Jsi_ValueNew1(interp);",
          "",
          "[Removed Lines]",
          "1012:     if (obj && obj->setters) {",
          "",
          "[Added Lines]",
          "1012:     if (obj && obj->setters && value) {",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: Channel.prototype.tell = function():number {};",
          "46: Channel.prototype.truncate = function(pos:number):number {};",
          "47: Channel.prototype.write = function(data):number {};",
          "53: var Event = function(cmd,args) {};",
          "54: Event.prototype.clearInterval = function(id:number):void {};",
          "55: Event.prototype.info = function(id:number):object {};",
          "",
          "[Removed Lines]",
          "48: var Debugger = function(cmd,args) {};",
          "49: Debugger.prototype.add = function(val:string|number, temp:boolean=false):number {};",
          "50: Debugger.prototype.enable = function(id:number, on:boolean):void {};",
          "51: Debugger.prototype.info = function(id:number=void):array|object {};",
          "52: Debugger.prototype.remove = function(id:number):void {};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "309: Util.prototype.base64 = function(val:string, decode:boolean=false):string {};",
          "310: Util.prototype.complete = function(val:string):boolean {};",
          "311: Util.prototype.crc32 = function(val:string, crcSeed=0):number {};",
          "312: Util.prototype.decrypt = function(val:string, key:string):string {};",
          "313: Util.prototype.encrypt = function(val:string, key:string):string {};",
          "314: Util.prototype.fromCharCode = function(code:number):string {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307: Util.prototype.dbgAdd = function(val:string|number, temp:boolean=false):number {};",
          "308: Util.prototype.dbgEnable = function(id:number, on:boolean):void {};",
          "309: Util.prototype.dbgInfo = function(id:number=void):array|object {};",
          "310: Util.prototype.dbgRemove = function(id:number):void {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: |write|(data):number |Write data to file.|",
          "108: ## Event",
          "",
          "[Removed Lines]",
          "92: ## Debugger",
          "96: Debugger breakpoint management.",
          "99: ### Methods",
          "100: |Method|Function Argument Types|Description|",
          "101: |---|---|---|",
          "102: |add|(val:string&#124;number, temp:boolean=false):number |Add a breakpoint for line, file:line or func.|",
          "103: |enable|(id:number, on:boolean):void |Enable/disable breakpoint.|",
          "104: |info|(id:number=void):array&#124;object |Return info about one breakpoint, or list of bp numbers.|",
          "105: |remove|(id:number):void |Remove breakpoint.|",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1006: |base64|(val:string, decode:boolean=false):string |Base64 encode/decode a string.|",
          "1007: |complete|(val:string):boolean |Return true if string is complete command with balanced braces, etc.|",
          "1008: |crc32|(val:string, crcSeed=0):number |Calculate 32-bit CRC.|",
          "1009: |decrypt|(val:string, key:string):string |Decrypt data using BTEA encryption. Keys that are not 16 bytes use the MD5 hash of the key.|",
          "1010: |encrypt|(val:string, key:string):string |Encrypt data using BTEA encryption. Keys that are not 16 bytes use the MD5 hash of the key.|",
          "1011: |fromCharCode|(code:number):string |Return char with given character code.|",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "993: |dbgAdd|(val:string&#124;number, temp:boolean=false):number |Debugger add a breakpoint for line, file:line or func.|",
          "994: |dbgEnable|(id:number, on:boolean):void |Debugger enable/disable breakpoint.|",
          "995: |dbgInfo|(id:number=void):array&#124;object |Debugger return info about one breakpoint, or list of bp numbers.|",
          "996: |dbgRemove|(id:number):void |Debugger remove breakpoint.|",
          "",
          "---------------"
        ]
      }
    }
  ]
}