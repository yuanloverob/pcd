{
  "cve_id": "CVE-2013-0178",
  "cve_desc": "Insecure temporary file vulnerability in Redis before 2.6 related to /tmp/redis-%p.vm.",
  "repo": "antirez/redis",
  "patch_hash": "697af434fbeb2e3ba2ba9687cd283ed1a2734fa5",
  "patch_info": {
    "commit_hash": "697af434fbeb2e3ba2ba9687cd283ed1a2734fa5",
    "repo": "antirez/redis",
    "commit_url": "https://github.com/antirez/redis/commit/697af434fbeb2e3ba2ba9687cd283ed1a2734fa5",
    "files": [
      "src/diskstore.c",
      "src/networking.c",
      "src/redis.c",
      "src/redis.h"
    ],
    "message": "initial changes needed to turn the current VM code into a cache system. Tons of work to do still.",
    "before_after_code_files": [
      "src/diskstore.c||src/diskstore.c",
      "src/networking.c||src/networking.c",
      "src/redis.c||src/redis.c",
      "src/redis.h||src/redis.h"
    ]
  },
  "patch_diff": {
    "src/diskstore.c||src/diskstore.c": [
      "File: src/diskstore.c -> src/diskstore.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "68: int dsOpen(void) {",
      "69:     struct stat sb;",
      "70:     int retval;",
      "73:     if ((retval = stat(path,&sb) == -1) && errno != ENOENT) {",
      "74:         redisLog(REDIS_WARNING, \"Error opening disk store at %s: %s\",",
      "",
      "[Removed Lines]",
      "71:     char *path = server.diskstore_path;",
      "",
      "[Added Lines]",
      "80:     char *path = server.ds_path;",
      "",
      "---------------"
    ],
    "src/networking.c||src/networking.c": [
      "File: src/networking.c -> src/networking.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "168: void addReply(redisClient *c, robj *obj) {",
      "169:     if (_installWriteEvent(c) != REDIS_OK) return;",
      "",
      "[Removed Lines]",
      "170:     redisAssert(!server.vm_enabled || obj->storage == REDIS_VM_MEMORY);",
      "",
      "[Added Lines]",
      "170:     redisAssert(!server.ds_enabled || obj->storage == REDIS_VM_MEMORY);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "462:     if (c->flags & REDIS_IO_WAIT) {",
      "464:         if (listLength(c->io_keys) == 0) {",
      "465:             ln = listSearchKey(server.io_ready_clients,c);",
      "",
      "[Removed Lines]",
      "463:         redisAssert(server.vm_enabled);",
      "",
      "[Added Lines]",
      "463:         redisAssert(server.ds_enabled);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "474:                 dontWaitForSwappedKey(c,ln->value);",
      "475:             }",
      "476:         }",
      "478:     }",
      "479:     listRelease(c->io_keys);",
      "",
      "[Removed Lines]",
      "477:         server.vm_blocked_clients--;",
      "",
      "[Added Lines]",
      "477:         server.cache_blocked_clients--;",
      "",
      "---------------"
    ],
    "src/redis.c||src/redis.c": [
      "File: src/redis.c -> src/redis.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "619:     if (server.masterhost == NULL) activeExpireCycle();",
      "642:     }",
      "",
      "[Removed Lines]",
      "623:     if (vmCanSwapOut()) {",
      "624:         while (server.vm_enabled && zmalloc_used_memory() >",
      "625:                 server.vm_max_memory)",
      "626:         {",
      "627:             int retval = (server.vm_max_threads == 0) ?",
      "628:                         vmSwapOneObjectBlocking() :",
      "629:                         vmSwapOneObjectThreaded();",
      "630:             if (retval == REDIS_ERR && !(loops % 300) &&",
      "631:                 zmalloc_used_memory() >",
      "632:                 (server.vm_max_memory+server.vm_max_memory/10))",
      "633:             {",
      "634:                 redisLog(REDIS_WARNING,\"WARNING: vm-max-memory limit exceeded by more than 10%% but unable to swap more objects out!\");",
      "635:             }",
      "640:             if (retval == REDIS_ERR || server.vm_max_threads > 0) break;",
      "641:         }",
      "",
      "[Added Lines]",
      "623:     while (server.ds_enabled && zmalloc_used_memory() >",
      "624:             server.cache_max_memory)",
      "625:     {",
      "626:         cacheFreeOneEntry();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "656:     listNode *ln;",
      "657:     redisClient *c;",
      "661:         listIter li;",
      "663:         listRewind(server.io_ready_clients,&li);",
      "",
      "[Removed Lines]",
      "660:     if (server.vm_enabled && listLength(server.io_ready_clients)) {",
      "",
      "[Added Lines]",
      "645:     if (server.ds_enabled && listLength(server.io_ready_clients)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "669:             listDelNode(server.io_ready_clients,ln);",
      "670:             c->flags &= (~REDIS_IO_WAIT);",
      "672:             aeCreateFileEvent(server.el, c->fd, AE_READABLE,",
      "673:                 readQueryFromClient, c);",
      "674:             cmd = lookupCommand(c->argv[0]->ptr);",
      "",
      "[Removed Lines]",
      "671:             server.vm_blocked_clients--;",
      "",
      "[Added Lines]",
      "656:             server.cache_blocked_clients--;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "787:     server.maxmemory = 0;",
      "788:     server.maxmemory_policy = REDIS_MAXMEMORY_VOLATILE_LRU;",
      "789:     server.maxmemory_samples = 3;",
      "797:     server.hash_max_zipmap_entries = REDIS_HASH_MAX_ZIPMAP_ENTRIES;",
      "798:     server.hash_max_zipmap_value = REDIS_HASH_MAX_ZIPMAP_VALUE;",
      "799:     server.list_max_ziplist_entries = REDIS_LIST_MAX_ZIPLIST_ENTRIES;",
      "",
      "[Removed Lines]",
      "790:     server.vm_enabled = 0;",
      "791:     server.vm_swap_file = zstrdup(\"/tmp/redis-%p.vm\");",
      "795:     server.vm_max_threads = 4;",
      "796:     server.vm_blocked_clients = 0;",
      "",
      "[Added Lines]",
      "775:     server.ds_enabled = 0;",
      "776:     server.ds_path = zstrdup(\"/tmp/redis.ds\");",
      "778:     server.cache_blocked_clients = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "873:         server.db[j].expires = dictCreate(&keyptrDictType,NULL);",
      "874:         server.db[j].blocking_keys = dictCreate(&keylistDictType,NULL);",
      "875:         server.db[j].watched_keys = dictCreate(&keylistDictType,NULL);",
      "877:             server.db[j].io_keys = dictCreate(&keylistDictType,NULL);",
      "878:         server.db[j].id = j;",
      "879:     }",
      "",
      "[Removed Lines]",
      "876:         if (server.vm_enabled)",
      "",
      "[Added Lines]",
      "858:         if (server.ds_enabled)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "911:         }",
      "912:     }",
      "915: }",
      "",
      "[Removed Lines]",
      "914:     if (server.vm_enabled) vmInit();",
      "",
      "[Added Lines]",
      "896:     if (server.ds_enabled) dsInit();",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1050:         queueMultiCommand(c,cmd);",
      "1051:         addReply(c,shared.queued);",
      "1052:     } else {",
      "1055:         call(c,cmd);",
      "1056:     }",
      "1057:     return REDIS_OK;",
      "",
      "[Removed Lines]",
      "1053:         if (server.vm_enabled && server.vm_max_threads > 0 &&",
      "1054:             blockClientOnSwappedKeys(c,cmd)) return REDIS_ERR;",
      "",
      "[Added Lines]",
      "1035:         if (server.ds_enabled && blockClientOnSwappedKeys(c,cmd))",
      "1036:             return REDIS_ERR;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1072:     if (server.appendonly) {",
      "1074:         aof_fsync(server.appendfd);",
      "1076:     } else if (server.saveparamslen > 0) {",
      "1078:         if (rdbSave(server.dbfilename) != REDIS_OK) {",
      "",
      "[Removed Lines]",
      "1075:         if (server.vm_enabled) unlink(server.vm_swap_file);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1185:         \"hash_max_zipmap_value:%zu\\r\\n\"",
      "1186:         \"pubsub_channels:%ld\\r\\n\"",
      "1187:         \"pubsub_patterns:%u\\r\\n\"",
      "1189:         \"role:%s\\r\\n\"",
      "1190:         ,REDIS_VERSION,",
      "1191:         redisGitSHA1(),",
      "",
      "[Removed Lines]",
      "1188:         \"vm_enabled:%d\\r\\n\"",
      "",
      "[Added Lines]",
      "1169:         \"ds_enabled:%d\\r\\n\"",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1228:         server.hash_max_zipmap_value,",
      "1229:         dictSize(server.pubsub_channels),",
      "1230:         listLength(server.pubsub_patterns),",
      "1232:         server.masterhost == NULL ? \"master\" : \"slave\"",
      "1233:     );",
      "1234:     if (server.masterhost) {",
      "",
      "[Removed Lines]",
      "1231:         server.vm_enabled != 0,",
      "",
      "[Added Lines]",
      "1212:         server.ds_enabled != 0,",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1255:             );",
      "1256:         }",
      "1257:     }",
      "1259:         lockThreadedIO();",
      "1260:         info = sdscatprintf(info,",
      "1285:         );",
      "1286:         unlockThreadedIO();",
      "1287:     }",
      "",
      "[Removed Lines]",
      "1258:     if (server.vm_enabled) {",
      "1261:             \"vm_conf_max_memory:%llu\\r\\n\"",
      "1262:             \"vm_conf_page_size:%llu\\r\\n\"",
      "1263:             \"vm_conf_pages:%llu\\r\\n\"",
      "1264:             \"vm_stats_used_pages:%llu\\r\\n\"",
      "1265:             \"vm_stats_swapped_objects:%llu\\r\\n\"",
      "1266:             \"vm_stats_swappin_count:%llu\\r\\n\"",
      "1267:             \"vm_stats_swappout_count:%llu\\r\\n\"",
      "1268:             \"vm_stats_io_newjobs_len:%lu\\r\\n\"",
      "1269:             \"vm_stats_io_processing_len:%lu\\r\\n\"",
      "1270:             \"vm_stats_io_processed_len:%lu\\r\\n\"",
      "1271:             \"vm_stats_io_active_threads:%lu\\r\\n\"",
      "1272:             \"vm_stats_blocked_clients:%lu\\r\\n\"",
      "1273:             ,(unsigned long long) server.vm_max_memory,",
      "1274:             (unsigned long long) server.vm_page_size,",
      "1275:             (unsigned long long) server.vm_pages,",
      "1276:             (unsigned long long) server.vm_stats_used_pages,",
      "1277:             (unsigned long long) server.vm_stats_swapped_objects,",
      "1278:             (unsigned long long) server.vm_stats_swapins,",
      "1279:             (unsigned long long) server.vm_stats_swapouts,",
      "1280:             (unsigned long) listLength(server.io_newjobs),",
      "1281:             (unsigned long) listLength(server.io_processing),",
      "1282:             (unsigned long) listLength(server.io_processed),",
      "1283:             (unsigned long) server.io_active_threads,",
      "1284:             (unsigned long) server.vm_blocked_clients",
      "",
      "[Added Lines]",
      "1239:     if (server.ds_enabled) {",
      "1242:             \"cache_max_memory:%llu\\r\\n\"",
      "1243:             \"cache_blocked_clients:%lu\\r\\n\"",
      "1244:             ,(unsigned long long) server.cache_max_memory,",
      "1245:             (unsigned long) server.cache_blocked_clients",
      "",
      "---------------"
    ],
    "src/redis.h||src/redis.h": [
      "File: src/redis.h -> src/redis.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "440:     int maxmemory_samples;",
      "442:     unsigned int bpop_blocked_clients;",
      "444:     list *unblocked_clients;",
      "",
      "[Removed Lines]",
      "443:     unsigned int vm_blocked_clients;",
      "",
      "[Added Lines]",
      "443:     unsigned int cache_blocked_clients;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "448:     int sort_alpha;",
      "449:     int sort_bypattern;",
      "457:     size_t hash_max_zipmap_entries;",
      "458:     size_t hash_max_zipmap_value;",
      "",
      "[Removed Lines]",
      "451:     int vm_enabled;",
      "452:     char *vm_swap_file;",
      "453:     off_t vm_page_size;",
      "454:     off_t vm_pages;",
      "455:     unsigned long long vm_max_memory;",
      "",
      "[Added Lines]",
      "453:     unsigned long long cache_max_memory;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ff2145adac3108196bf6afcab61a5babc64ce4ed",
      "candidate_info": {
        "commit_hash": "ff2145adac3108196bf6afcab61a5babc64ce4ed",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/ff2145adac3108196bf6afcab61a5babc64ce4ed",
        "files": [
          "src/aof.c",
          "src/db.c",
          "src/rdb.c",
          "src/redis.c",
          "src/redis.h"
        ],
        "message": "more AOF server struct fields renamed.",
        "before_after_code_files": [
          "src/aof.c||src/aof.c",
          "src/db.c||src/db.c",
          "src/rdb.c||src/rdb.c",
          "src/redis.c||src/redis.c",
          "src/redis.h||src/redis.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ],
          "candidate": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ]
        }
      },
      "candidate_diff": {
        "src/aof.c||src/aof.c": [
          "File: src/aof.c -> src/aof.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: void stopAppendOnly(void) {",
          "22:     redisAssert(server.aof_state != REDIS_AOF_OFF);",
          "23:     flushAppendOnlyFile(1);",
          "29:     server.aof_state = REDIS_AOF_OFF;",
          "32:         int statloc;",
          "35:             wait3(&statloc,0,NULL);",
          "41:     }",
          "42: }",
          "46: int startAppendOnly(void) {",
          "49:     redisAssert(server.aof_state == REDIS_AOF_OFF);",
          "51:         redisLog(REDIS_WARNING,\"Redis needs to enable the AOF but can't open the append only file: %s\",strerror(errno));",
          "52:         return REDIS_ERR;",
          "53:     }",
          "54:     if (rewriteAppendOnlyFileBackground() == REDIS_ERR) {",
          "56:         redisLog(REDIS_WARNING,\"Redis needs to enable the AOF but can't trigger a background AOF rewrite operation. Check the above logs for more info about the error.\");",
          "57:         return REDIS_ERR;",
          "58:     }",
          "",
          "[Removed Lines]",
          "24:     aof_fsync(server.appendfd);",
          "25:     close(server.appendfd);",
          "27:     server.appendfd = -1;",
          "28:     server.appendseldb = -1;",
          "31:     if (server.bgrewritechildpid != -1) {",
          "34:         if (kill(server.bgrewritechildpid,SIGKILL) != -1)",
          "37:         sdsfree(server.bgrewritebuf);",
          "38:         server.bgrewritebuf = sdsempty();",
          "39:         aofRemoveTempFile(server.bgrewritechildpid);",
          "40:         server.bgrewritechildpid = -1;",
          "47:     server.lastfsync = time(NULL);",
          "48:     server.appendfd = open(server.aof_filename,O_WRONLY|O_APPEND|O_CREAT,0644);",
          "50:     if (server.appendfd == -1) {",
          "55:         close(server.appendfd);",
          "",
          "[Added Lines]",
          "24:     aof_fsync(server.aof_fd);",
          "25:     close(server.aof_fd);",
          "27:     server.aof_fd = -1;",
          "28:     server.aof_selected_db = -1;",
          "31:     if (server.aof_child_pid != -1) {",
          "34:         if (kill(server.aof_child_pid,SIGKILL) != -1)",
          "37:         sdsfree(server.aof_rewrite_buf);",
          "38:         server.aof_rewrite_buf = sdsempty();",
          "39:         aofRemoveTempFile(server.aof_child_pid);",
          "40:         server.aof_child_pid = -1;",
          "47:     server.aof_last_fsync = time(NULL);",
          "48:     server.aof_fd = open(server.aof_filename,O_WRONLY|O_APPEND|O_CREAT,0644);",
          "50:     if (server.aof_fd == -1) {",
          "55:         close(server.aof_fd);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     ssize_t nwritten;",
          "85:     int sync_in_progress = 0;",
          "89:     if (server.aof_fsync == AOF_FSYNC_EVERYSEC)",
          "90:         sync_in_progress = bioPendingJobsOfType(REDIS_BIO_AOF_FSYNC) != 0;",
          "",
          "[Removed Lines]",
          "87:     if (sdslen(server.aofbuf) == 0) return;",
          "",
          "[Added Lines]",
          "87:     if (sdslen(server.aof_buf) == 0) return;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "121:     nwritten = write(server.appendfd,server.aofbuf,sdslen(server.aofbuf));",
          "122:     if (nwritten != (signed)sdslen(server.aofbuf)) {",
          "",
          "[Added Lines]",
          "121:     nwritten = write(server.aof_fd,server.aof_buf,sdslen(server.aof_buf));",
          "122:     if (nwritten != (signed)sdslen(server.aof_buf)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "139:     } else {",
          "142:     }",
          "146:     if (server.aof_no_fsync_on_rewrite &&",
          "148:             return;",
          "151:     if (server.aof_fsync == AOF_FSYNC_ALWAYS) {",
          "156:     } else if ((server.aof_fsync == AOF_FSYNC_EVERYSEC &&",
          "160:     }",
          "161: }",
          "",
          "[Removed Lines]",
          "137:     if ((sdslen(server.aofbuf)+sdsavail(server.aofbuf)) < 4000) {",
          "138:         sdsclear(server.aofbuf);",
          "140:         sdsfree(server.aofbuf);",
          "141:         server.aofbuf = sdsempty();",
          "147:         (server.bgrewritechildpid != -1 || server.bgsavechildpid != -1))",
          "155:         server.lastfsync = server.unixtime;",
          "157:                 server.unixtime > server.lastfsync)) {",
          "158:         if (!sync_in_progress) aof_background_fsync(server.appendfd);",
          "159:         server.lastfsync = server.unixtime;",
          "",
          "[Added Lines]",
          "137:     if ((sdslen(server.aof_buf)+sdsavail(server.aof_buf)) < 4000) {",
          "138:         sdsclear(server.aof_buf);",
          "140:         sdsfree(server.aof_buf);",
          "141:         server.aof_buf = sdsempty();",
          "147:         (server.aof_child_pid != -1 || server.bgsavechildpid != -1))",
          "155:         server.aof_last_fsync = server.unixtime;",
          "157:                 server.unixtime > server.aof_last_fsync)) {",
          "158:         if (!sync_in_progress) aof_background_fsync(server.aof_fd);",
          "159:         server.aof_last_fsync = server.unixtime;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "232:         char seldb[64];",
          "234:         snprintf(seldb,sizeof(seldb),\"%d\",dictid);",
          "235:         buf = sdscatprintf(buf,\"*2\\r\\n$6\\r\\nSELECT\\r\\n$%lu\\r\\n%s\\r\\n\",",
          "236:             (unsigned long)strlen(seldb),seldb);",
          "238:     }",
          "240:     if (cmd->proc == expireCommand || cmd->proc == pexpireCommand ||",
          "",
          "[Removed Lines]",
          "231:     if (dictid != server.appendseldb) {",
          "237:         server.appendseldb = dictid;",
          "",
          "[Added Lines]",
          "231:     if (dictid != server.aof_selected_db) {",
          "237:         server.aof_selected_db = dictid;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "262:     if (server.aof_state == REDIS_AOF_ON)",
          "272:     sdsfree(buf);",
          "273: }",
          "",
          "[Removed Lines]",
          "263:         server.aofbuf = sdscatlen(server.aofbuf,buf,sdslen(buf));",
          "269:     if (server.bgrewritechildpid != -1)",
          "270:         server.bgrewritebuf = sdscatlen(server.bgrewritebuf,buf,sdslen(buf));",
          "",
          "[Added Lines]",
          "263:         server.aof_buf = sdscatlen(server.aof_buf,buf,sdslen(buf));",
          "269:     if (server.aof_child_pid != -1)",
          "270:         server.aof_rewrite_buf = sdscatlen(server.aof_rewrite_buf,buf,sdslen(buf));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "774:     pid_t childpid;",
          "775:     long long start;",
          "778:     start = ustime();",
          "779:     if ((childpid = fork()) == 0) {",
          "780:         char tmpfile[256];",
          "",
          "[Removed Lines]",
          "777:     if (server.bgrewritechildpid != -1) return REDIS_ERR;",
          "",
          "[Added Lines]",
          "777:     if (server.aof_child_pid != -1) return REDIS_ERR;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "800:         redisLog(REDIS_NOTICE,",
          "801:             \"Background append only file rewriting started by pid %d\",childpid);",
          "802:         server.aof_rewrite_scheduled = 0;",
          "804:         updateDictResizePolicy();",
          "810:         return REDIS_OK;",
          "811:     }",
          "813: }",
          "815: void bgrewriteaofCommand(redisClient *c) {",
          "817:         addReplyError(c,\"Background append only file rewriting already in progress\");",
          "818:     } else if (server.bgsavechildpid != -1) {",
          "819:         server.aof_rewrite_scheduled = 1;",
          "",
          "[Removed Lines]",
          "803:         server.bgrewritechildpid = childpid;",
          "809:         server.appendseldb = -1;",
          "816:     if (server.bgrewritechildpid != -1) {",
          "",
          "[Added Lines]",
          "803:         server.aof_child_pid = childpid;",
          "809:         server.aof_selected_db = -1;",
          "816:     if (server.aof_child_pid != -1) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "839: void aofUpdateCurrentSize(void) {",
          "840:     struct redis_stat sb;",
          "843:         redisLog(REDIS_WARNING,\"Unable to check the AOF length: %s\",",
          "844:             strerror(errno));",
          "845:     } else {",
          "",
          "[Removed Lines]",
          "842:     if (redis_fstat(server.appendfd,&sb) == -1) {",
          "",
          "[Added Lines]",
          "842:     if (redis_fstat(server.aof_fd,&sb) == -1) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "864:         snprintf(tmpfile,256,\"temp-rewriteaof-bg-%d.aof\",",
          "866:         newfd = open(tmpfile,O_WRONLY|O_APPEND);",
          "867:         if (newfd == -1) {",
          "868:             redisLog(REDIS_WARNING,",
          "",
          "[Removed Lines]",
          "865:             (int)server.bgrewritechildpid);",
          "",
          "[Added Lines]",
          "865:             (int)server.aof_child_pid);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "870:             goto cleanup;",
          "871:         }",
          "875:             if (nwritten == -1) {",
          "876:                 redisLog(REDIS_WARNING,",
          "877:                     \"Error trying to flush the parent diff to the rewritten AOF: %s\", strerror(errno));",
          "",
          "[Removed Lines]",
          "873:         nwritten = write(newfd,server.bgrewritebuf,sdslen(server.bgrewritebuf));",
          "874:         if (nwritten != (signed)sdslen(server.bgrewritebuf)) {",
          "",
          "[Added Lines]",
          "873:         nwritten = write(newfd,server.aof_rewrite_buf,sdslen(server.aof_rewrite_buf));",
          "874:         if (nwritten != (signed)sdslen(server.aof_rewrite_buf)) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "916:         if (server.appendfd == -1) {",
          "",
          "[Added Lines]",
          "916:         if (server.aof_fd == -1) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "935:             goto cleanup;",
          "936:         }",
          "941:             close(newfd);",
          "942:         } else {",
          "946:             if (server.aof_fsync == AOF_FSYNC_ALWAYS)",
          "947:                 aof_fsync(newfd);",
          "948:             else if (server.aof_fsync == AOF_FSYNC_EVERYSEC)",
          "949:                 aof_background_fsync(newfd);",
          "951:             aofUpdateCurrentSize();",
          "952:             server.aof_rewrite_base_size = server.aof_current_size;",
          "958:         }",
          "960:         redisLog(REDIS_NOTICE, \"Background AOF rewrite successful\");",
          "",
          "[Removed Lines]",
          "938:         if (server.appendfd == -1) {",
          "944:             oldfd = server.appendfd;",
          "945:             server.appendfd = newfd;",
          "956:             sdsfree(server.aofbuf);",
          "957:             server.aofbuf = sdsempty();",
          "",
          "[Added Lines]",
          "938:         if (server.aof_fd == -1) {",
          "944:             oldfd = server.aof_fd;",
          "945:             server.aof_fd = newfd;",
          "956:             sdsfree(server.aof_buf);",
          "957:             server.aof_buf = sdsempty();",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "976:     }",
          "978: cleanup:",
          "984:     if (server.aof_state == REDIS_AOF_WAIT_REWRITE)",
          "985:         server.aof_rewrite_scheduled = 1;",
          "",
          "[Removed Lines]",
          "979:     sdsfree(server.bgrewritebuf);",
          "980:     server.bgrewritebuf = sdsempty();",
          "981:     aofRemoveTempFile(server.bgrewritechildpid);",
          "982:     server.bgrewritechildpid = -1;",
          "",
          "[Added Lines]",
          "979:     sdsfree(server.aof_rewrite_buf);",
          "980:     server.aof_rewrite_buf = sdsempty();",
          "981:     aofRemoveTempFile(server.aof_child_pid);",
          "982:     server.aof_child_pid = -1;",
          "",
          "---------------"
        ],
        "src/db.c||src/db.c": [
          "File: src/db.c -> src/db.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:             val->lru = server.lruclock;",
          "45:         server.stat_keyspace_hits++;",
          "46:         return val;",
          "",
          "[Removed Lines]",
          "43:         if (server.bgsavechildpid == -1 && server.bgrewritechildpid == -1)",
          "",
          "[Added Lines]",
          "43:         if (server.bgsavechildpid == -1 && server.aof_child_pid == -1)",
          "",
          "---------------"
        ],
        "src/rdb.c||src/rdb.c": [
          "File: src/rdb.c -> src/rdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1085: void bgsaveCommand(redisClient *c) {",
          "1086:     if (server.bgsavechildpid != -1) {",
          "1087:         addReplyError(c,\"Background save already in progress\");",
          "1089:         addReplyError(c,\"Can't BGSAVE while AOF log rewriting is in progress\");",
          "1090:     } else if (rdbSaveBackground(server.dbfilename) == REDIS_OK) {",
          "1091:         addReplyStatus(c,\"Background saving started\");",
          "",
          "[Removed Lines]",
          "1088:     } else if (server.bgrewritechildpid != -1) {",
          "",
          "[Added Lines]",
          "1088:     } else if (server.aof_child_pid != -1) {",
          "",
          "---------------"
        ],
        "src/redis.c||src/redis.c": [
          "File: src/redis.c -> src/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "565: void updateDictResizePolicy(void) {",
          "567:         dictEnableResize();",
          "568:     else",
          "569:         dictDisableResize();",
          "",
          "[Removed Lines]",
          "566:     if (server.bgsavechildpid == -1 && server.bgrewritechildpid == -1)",
          "",
          "[Added Lines]",
          "566:     if (server.bgsavechildpid == -1 && server.aof_child_pid == -1)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "677:         if (!(loops % 10)) tryResizeHashTables();",
          "678:         if (server.activerehashing) incrementallyRehash();",
          "679:     }",
          "",
          "[Removed Lines]",
          "676:     if (server.bgsavechildpid == -1 && server.bgrewritechildpid == -1) {",
          "",
          "[Added Lines]",
          "676:     if (server.bgsavechildpid == -1 && server.aof_child_pid == -1) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "696:         server.aof_rewrite_scheduled)",
          "697:     {",
          "698:         rewriteAppendOnlyFileBackground();",
          "699:     }",
          "703:         int statloc;",
          "704:         pid_t pid;",
          "",
          "[Removed Lines]",
          "695:     if (server.bgsavechildpid == -1 && server.bgrewritechildpid == -1 &&",
          "702:     if (server.bgsavechildpid != -1 || server.bgrewritechildpid != -1) {",
          "",
          "[Added Lines]",
          "695:     if (server.bgsavechildpid == -1 && server.aof_child_pid == -1 &&",
          "702:     if (server.bgsavechildpid != -1 || server.aof_child_pid != -1) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "737:          if (server.bgsavechildpid == -1 &&",
          "739:              server.aof_rewrite_perc &&",
          "740:              server.aof_current_size > server.aof_rewrite_min_size)",
          "741:          {",
          "",
          "[Removed Lines]",
          "738:              server.bgrewritechildpid == -1 &&",
          "",
          "[Added Lines]",
          "738:              server.aof_child_pid == -1 &&",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "880:     server.aof_rewrite_min_size = REDIS_AOF_REWRITE_MIN_SIZE;",
          "881:     server.aof_rewrite_base_size = 0;",
          "882:     server.aof_rewrite_scheduled = 0;",
          "886:     server.aof_flush_postponed_start = 0;",
          "887:     server.pidfile = zstrdup(\"/var/run/redis.pid\");",
          "888:     server.dbfilename = zstrdup(\"dump.rdb\");",
          "",
          "[Removed Lines]",
          "883:     server.lastfsync = time(NULL);",
          "884:     server.appendfd = -1;",
          "",
          "[Added Lines]",
          "883:     server.aof_last_fsync = time(NULL);",
          "884:     server.aof_fd = -1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1045:     listSetMatchMethod(server.pubsub_patterns,listMatchPubsubPattern);",
          "1046:     server.cronloops = 0;",
          "1047:     server.bgsavechildpid = -1;",
          "1051:     server.lastsave = time(NULL);",
          "1052:     server.dirty = 0;",
          "1053:     server.stat_numcommands = 0;",
          "",
          "[Removed Lines]",
          "1048:     server.bgrewritechildpid = -1;",
          "1049:     server.bgrewritebuf = sdsempty();",
          "1050:     server.aofbuf = sdsempty();",
          "",
          "[Added Lines]",
          "1048:     server.aof_child_pid = -1;",
          "1049:     server.aof_rewrite_buf = sdsempty();",
          "1050:     server.aof_buf = sdsempty();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1068:         acceptUnixHandler,NULL) == AE_ERR) oom(\"creating file event\");",
          "1070:     if (server.aof_state == REDIS_AOF_ON) {",
          "1072:                                O_WRONLY|O_APPEND|O_CREAT,0644);",
          "1074:             redisLog(REDIS_WARNING, \"Can't open the append-only file: %s\",",
          "1075:                 strerror(errno));",
          "1076:             exit(1);",
          "",
          "[Removed Lines]",
          "1071:         server.appendfd = open(server.aof_filename,",
          "1073:         if (server.appendfd == -1) {",
          "",
          "[Added Lines]",
          "1071:         server.aof_fd = open(server.aof_filename,",
          "1073:         if (server.aof_fd == -1) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1313:     if (server.aof_state != REDIS_AOF_OFF) {",
          "1317:             redisLog(REDIS_WARNING,",
          "1318:                 \"There is a child rewriting the AOF. Killing it!\");",
          "1320:         }",
          "1322:         redisLog(REDIS_NOTICE,\"Calling fsync() on the AOF file.\");",
          "1324:     }",
          "1325:     if ((server.saveparamslen > 0 && !nosave) || save) {",
          "1326:         redisLog(REDIS_NOTICE,\"Saving the final RDB snapshot before exiting.\");",
          "",
          "[Removed Lines]",
          "1316:         if (server.bgrewritechildpid != -1) {",
          "1319:             kill(server.bgrewritechildpid,SIGKILL);",
          "1323:         aof_fsync(server.appendfd);",
          "",
          "[Added Lines]",
          "1316:         if (server.aof_child_pid != -1) {",
          "1319:             kill(server.aof_child_pid,SIGKILL);",
          "1323:         aof_fsync(server.aof_fd);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1501:             server.dirty,",
          "1502:             server.bgsavechildpid != -1,",
          "1503:             server.lastsave,",
          "1506:         if (server.aof_state != REDIS_AOF_OFF) {",
          "1507:             info = sdscatprintf(info,",
          "",
          "[Removed Lines]",
          "1504:             server.bgrewritechildpid != -1);",
          "",
          "[Added Lines]",
          "1504:             server.aof_child_pid != -1);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1513:                 (long long) server.aof_current_size,",
          "1514:                 (long long) server.aof_rewrite_base_size,",
          "1515:                 server.aof_rewrite_scheduled,",
          "1517:                 bioPendingJobsOfType(REDIS_BIO_AOF_FSYNC));",
          "1518:         }",
          "",
          "[Removed Lines]",
          "1516:                 sdslen(server.aofbuf),",
          "",
          "[Added Lines]",
          "1516:                 sdslen(server.aof_buf),",
          "",
          "---------------"
        ],
        "src/redis.h||src/redis.h": [
          "File: src/redis.h -> src/redis.h"
        ]
      }
    },
    {
      "candidate_hash": "97e7f8aec3f464967bbe1b38ccfb357141134d09",
      "candidate_info": {
        "commit_hash": "97e7f8aec3f464967bbe1b38ccfb357141134d09",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/97e7f8aec3f464967bbe1b38ccfb357141134d09",
        "files": [
          "src/aof.c",
          "src/rdb.c",
          "src/redis.c",
          "src/redis.h"
        ],
        "message": "non blocking loading of the DB / AOF with informations and ETA in INFO output",
        "before_after_code_files": [
          "src/aof.c||src/aof.c",
          "src/rdb.c||src/rdb.c",
          "src/redis.c||src/redis.c",
          "src/redis.h||src/redis.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ],
          "candidate": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ]
        }
      },
      "candidate_diff": {
        "src/aof.c||src/aof.c": [
          "File: src/aof.c -> src/aof.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:     FILE *fp = fopen(filename,\"r\");",
          "219:     struct redis_stat sb;",
          "220:     int appendonly = server.appendonly;",
          "222:     if (redis_fstat(fileno(fp),&sb) != -1 && sb.st_size == 0)",
          "223:         return REDIS_ERR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:     long loops = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:     server.appendonly = 0;",
          "234:     fakeClient = createFakeClient();",
          "235:     while(1) {",
          "236:         int argc, j;",
          "237:         unsigned long len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236:     startLoading(fp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "241:         struct redisCommand *cmd;",
          "242:         int force_swapout;",
          "244:         if (fgets(buf,sizeof(buf),fp) == NULL) {",
          "245:             if (feof(fp))",
          "246:                 break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:         if (!(loops++ % 1000)) {",
          "249:             loadingProgress(ftello(fp));",
          "250:             aeProcessEvents(server.el, AE_FILE_EVENTS|AE_DONT_WAIT);",
          "251:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "297:     fclose(fp);",
          "298:     freeFakeClient(fakeClient);",
          "299:     server.appendonly = appendonly;",
          "300:     return REDIS_OK;",
          "302: readerr:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309:     stopLoading();",
          "",
          "---------------"
        ],
        "src/rdb.c||src/rdb.c": [
          "File: src/rdb.c -> src/rdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include <sys/resource.h>",
          "8: #include <sys/wait.h>",
          "9: #include <arpa/inet.h>",
          "11: int rdbSaveType(FILE *fp, unsigned char type) {",
          "12:     if (fwrite(&type,1,1,fp) == 0) return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include <sys/stat.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "793:     return o;",
          "794: }",
          "796: int rdbLoad(char *filename) {",
          "797:     FILE *fp;",
          "798:     uint32_t dbid;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "799: void startLoading(FILE *fp) {",
          "800:     struct stat sb;",
          "803:     server.loading = 1;",
          "804:     server.loading_start_time = time(NULL);",
          "805:     if (fstat(fileno(fp), &sb) == -1) {",
          "807:     } else {",
          "808:         server.loading_total_bytes = sb.st_size;",
          "809:     }",
          "810: }",
          "813: void loadingProgress(off_t pos) {",
          "814:     server.loading_loaded_bytes = pos;",
          "815: }",
          "818: void stopLoading(void) {",
          "819:     server.loading = 0;",
          "820: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "801:     redisDb *db = server.db+0;",
          "802:     char buf[1024];",
          "803:     time_t expiretime, now = time(NULL);",
          "805:     fp = fopen(filename,\"r\");",
          "806:     if (!fp) return REDIS_ERR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "830:     long loops = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "817:         redisLog(REDIS_WARNING,\"Can't handle RDB format version %d\",rdbver);",
          "818:         return REDIS_ERR;",
          "819:     }",
          "820:     while(1) {",
          "821:         robj *key, *val;",
          "822:         int force_swapout;",
          "824:         expiretime = -1;",
          "826:         if ((type = rdbLoadType(fp)) == -1) goto eoferr;",
          "827:         if (type == REDIS_EXPIRETIME) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "848:     startLoading(fp);",
          "856:         if (!(loops++ % 1000)) {",
          "857:             loadingProgress(ftello(fp));",
          "858:             aeProcessEvents(server.el, AE_FILE_EVENTS|AE_DONT_WAIT);",
          "859:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "900:         }",
          "901:     }",
          "902:     fclose(fp);",
          "903:     return REDIS_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "939:     stopLoading();",
          "",
          "---------------"
        ],
        "src/redis.c||src/redis.c": [
          "File: src/redis.c -> src/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "702:         \"-ERR source and destination objects are the same\\r\\n\"));",
          "703:     shared.outofrangeerr = createObject(REDIS_STRING,sdsnew(",
          "704:         \"-ERR index out of range\\r\\n\"));",
          "705:     shared.space = createObject(REDIS_STRING,sdsnew(\" \"));",
          "706:     shared.colon = createObject(REDIS_STRING,sdsnew(\":\"));",
          "707:     shared.plus = createObject(REDIS_STRING,sdsnew(\"+\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "705:     shared.loadingerr = createObject(REDIS_STRING,sdsnew(",
          "706:         \"-LOADING Redis is loading the dataset in memory\\r\\n\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "739:     server.verbosity = REDIS_VERBOSE;",
          "740:     server.maxidletime = REDIS_MAXIDLETIME;",
          "741:     server.saveparams = NULL;",
          "743:     server.glueoutputbuf = 1;",
          "744:     server.daemonize = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "744:     server.loading = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1006:         return REDIS_OK;",
          "1007:     }",
          "1010:     if (c->flags & REDIS_MULTI &&",
          "1011:         cmd->proc != execCommand && cmd->proc != discardCommand &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1013:     if (server.loading && cmd->proc != infoCommand) {",
          "1014:         addReply(c, shared.loadingerr);",
          "1015:         return REDIS_OK;",
          "1016:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1133:         \"used_memory_rss:%zu\\r\\n\"",
          "1134:         \"mem_fragmentation_ratio:%.2f\\r\\n\"",
          "1135:         \"use_tcmalloc:%d\\r\\n\"",
          "1136:         \"changes_since_last_save:%lld\\r\\n\"",
          "1137:         \"bgsave_in_progress:%d\\r\\n\"",
          "1138:         \"last_save_time:%ld\\r\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1145:         \"loading:%d\\r\\n\"",
          "1146:         \"aof_enabled:%d\\r\\n\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1173: #else",
          "1174:         0,",
          "1175: #endif",
          "1176:         server.dirty,",
          "1177:         server.bgsavechildpid != -1,",
          "1178:         server.lastsave,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1187:         server.loading,",
          "1188:         server.appendonly,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1243:         );",
          "1244:         unlockThreadedIO();",
          "1245:     }",
          "1246:     for (j = 0; j < server.dbnum; j++) {",
          "1247:         long long keys, vkeys;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1259:     if (server.loading) {",
          "1260:         double perc;",
          "1261:         time_t eta, elapsed;",
          "1262:         off_t remaining_bytes = server.loading_total_bytes-",
          "1263:                                 server.loading_loaded_bytes;",
          "1265:         perc = ((double)server.loading_loaded_bytes /",
          "1266:                server.loading_total_bytes) * 100;",
          "1268:         elapsed = time(NULL)-server.loading_start_time;",
          "1269:         if (elapsed == 0) {",
          "1271:         } else {",
          "1272:             eta = (elapsed*remaining_bytes)/server.loading_loaded_bytes;",
          "1273:         }",
          "1275:         info = sdscatprintf(info,",
          "1276:             \"loading_start_time:%ld\\r\\n\"",
          "1277:             \"loading_total_bytes:%llu\\r\\n\"",
          "1278:             \"loading_loaded_bytes:%llu\\r\\n\"",
          "1279:             \"loading_loaded_perc:%.2f\\r\\n\"",
          "1280:             \"loading_eta_seconds:%ld\\r\\n\"",
          "1281:             ,(unsigned long) server.loading_start_time,",
          "1282:             (unsigned long long) server.loading_total_bytes,",
          "1283:             (unsigned long long) server.loading_loaded_bytes,",
          "1284:             perc,",
          "1285:             eta",
          "1286:         );",
          "1287:     }",
          "",
          "---------------"
        ],
        "src/redis.h||src/redis.h": [
          "File: src/redis.h -> src/redis.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:     list *clients;",
          "365:     struct redisCommand *delCommand, *multiCommand;",
          "366:     list *slaves, *monitors;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365:     int loading;",
          "366:     off_t loading_total_bytes;",
          "367:     off_t loading_loaded_bytes;",
          "368:     time_t loading_start_time;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "726: void updateSlavesWaitingBgsave(int bgsaveerr);",
          "727: void replicationCron(void);",
          "730: int rdbLoad(char *filename);",
          "731: int rdbSaveBackground(char *filename);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "735: void startLoading(FILE *fp);",
          "736: void loadingProgress(off_t pos);",
          "737: void stopLoading(void);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ab988238f7418d018bf4412c6c956845ffbeab9",
      "candidate_info": {
        "commit_hash": "4ab988238f7418d018bf4412c6c956845ffbeab9",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/4ab988238f7418d018bf4412c6c956845ffbeab9",
        "files": [
          "src/config.c",
          "src/db.c",
          "src/diskstore.c",
          "src/dscache.c",
          "src/rdb.c",
          "src/redis.c",
          "src/redis.h"
        ],
        "message": "more work done for diskstore without trying to compile, more work needed to build again.",
        "before_after_code_files": [
          "src/config.c||src/config.c",
          "src/db.c||src/db.c",
          "src/diskstore.c||src/diskstore.c",
          "src/dscache.c||src/dscache.c",
          "src/rdb.c||src/rdb.c",
          "src/redis.c||src/redis.c",
          "src/redis.h||src/redis.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/diskstore.c||src/diskstore.c",
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ],
          "candidate": [
            "src/diskstore.c||src/diskstore.c",
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ]
        }
      },
      "candidate_diff": {
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:                 err = \"argument must be 'yes' or 'no'\"; goto loaderr;",
          "247:             }",
          "248:         } else if (!strcasecmp(argv[0],\"diskstore-path\") && argc == 2) {",
          "251:         } else if (!strcasecmp(argv[0],\"cache-max-memory\") && argc == 2) {",
          "252:             server.cache_max_memory = memtoll(argv[1],NULL);",
          "253:         } else if (!strcasecmp(argv[0],\"hash-max-zipmap-entries\") && argc == 2) {",
          "",
          "[Removed Lines]",
          "249:             zfree(server.ds_path);",
          "250:             server.ds_path = zstrdup(argv[1]);",
          "",
          "[Added Lines]",
          "249:             sdsfree(server.ds_path);",
          "250:             server.ds_path = sdsnew(argv[1]);",
          "",
          "---------------"
        ],
        "src/db.c||src/db.c": [
          "File: src/db.c -> src/db.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     } else {",
          "67:         sds copy = sdsdup(key->ptr);",
          "68:         dictAdd(db->dict, copy, val);",
          "69:         return REDIS_OK;",
          "70:     }",
          "71: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:         if (server.ds_enabled) {",
          "71:         }",
          "",
          "---------------"
        ],
        "src/diskstore.c||src/diskstore.c": [
          "File: src/diskstore.c -> src/diskstore.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: #include \"redis.h\"",
          "74: #include <fcntl.h>",
          "75: #include <sys/stat.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: #include \"sha1.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:     return REDIS_OK;",
          "139: }",
          "141: int dsSet(redisDb *db, robj *key, robj *val) {",
          "142: }",
          "145:     return createStringObject(\"foo\",3);",
          "146: }",
          "",
          "[Removed Lines]",
          "144: robj *dsGet(redisDb *db, robj *key) {",
          "",
          "[Added Lines]",
          "144: void dsKeyToPath(redisDb *db, unsigned char *buf, robj *key) {",
          "145:     SHA1_CTX ctx;",
          "146:     unsigned char hash[20];",
          "147:     char *hex, digits[] = \"0123456789abcdef\";",
          "148:     int j, l;",
          "150:     SHA1Init(&ctx);",
          "151:     SHA1Update(&ctx,key->ptr,sdslen(key->ptr));",
          "152:     SHA1Final(hash,&ctx);",
          "155:     for (j = 0; j < 20; j++) {",
          "156:         hex[j*2] = digits[(hash[j]&0xF0)>>4];",
          "157:         hex[(j*2)+1] = digits[hash[j]&0x0F];",
          "158:     }",
          "161:     l = sdslen(server.ds_path);",
          "162:     memcpy(buf,server.ds_path,l);",
          "163:     buf += l;",
          "167:     buf[0] = hex[0];",
          "168:     buf[1] = hex[1];",
          "169:     buf[2] = '/';",
          "170:     buf[3] = hex[2];",
          "171:     buf[4] = hex[3];",
          "172:     buf[5] = '/';",
          "173:     buf += 6;",
          "176:     l = ll2string(buf,64,db->id);",
          "177:     buf += l;",
          "178:     buf[0] = '_';",
          "179:     memcpy(buf+1,hex,40);",
          "180:     buf[41] = '\\0';",
          "181: }",
          "184:     char buf[1024];",
          "185:     FILE *fp;",
          "186:     int retval;",
          "188:     dsKeyToPath(buf,key);",
          "189:     fp = fopen(buf,\"w\");",
          "190:     if ((retval = rdbSaveKeyValuePair(fp,db,key,val,time(NULL))) == -1)",
          "191:         return REDIS_ERR;",
          "192:     fclose(fp);",
          "194:     return REDIS_OK;",
          "197: robj *dsGet(redisDb *db, robj *key, time_t *expire) {",
          "",
          "---------------"
        ],
        "src/dscache.c||src/dscache.c": [
          "File: src/dscache.c -> src/dscache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "285:             (unsigned char*)j->key->ptr);",
          "286:         if (j->type == REDIS_IOJOB_LOAD) {",
          "291:             handleClientsBlockedOnSwappedKey(j->db,j->key);",
          "292:             freeIOJob(j);",
          "",
          "[Removed Lines]",
          "288:             dbAdd(j->db,j->key,j->val);",
          "289:             incrRefCount(j->val);",
          "",
          "[Added Lines]",
          "291:             if (j->val != NULL) {",
          "292:                 dbAdd(j->db,j->key,j->val);",
          "293:                 incrRefCount(j->val);",
          "294:                 setExpire(j->db,j->key,j->expire);",
          "295:             } else {",
          "299:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "344:         if (j->type == REDIS_IOJOB_LOAD) {",
          "347:         } else if (j->type == REDIS_IOJOB_SAVE) {",
          "348:             redisAssert(j->val->storage == REDIS_DS_SAVING);",
          "349:             if (j->val)",
          "",
          "[Removed Lines]",
          "345:             j->val = dsGet(j->db,j->key);",
          "346:             redisAssert(j->val != NULL);",
          "",
          "[Added Lines]",
          "355:             time_t expire;",
          "357:             j->val = dsGet(j->db,j->key,&expire);",
          "358:             if (j->val) j->expire = expire;",
          "",
          "---------------"
        ],
        "src/rdb.c||src/rdb.c": [
          "File: src/rdb.c -> src/rdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "395:     return len;",
          "396: }",
          "399: int rdbSave(char *filename) {",
          "400:     dictIterator *di = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "402: int rdbSaveKeyValuePair(FILE *fp, redisDb *db, robj *key, robj *val,",
          "403:                         time_t now)",
          "404: {",
          "405:     time_t expiretime;",
          "407:     expiretime = getExpire(db,&key);",
          "410:     if (expiretime != -1) {",
          "412:         if (expiretime < now) return 0;",
          "413:         if (rdbSaveType(fp,REDIS_EXPIRETIME) == -1) return -1;",
          "414:         if (rdbSaveTime(fp,expiretime) == -1) return -1;",
          "415:     }",
          "417:     if (rdbSaveType(fp,val->type) == -1) return -1;",
          "418:     if (rdbSaveStringObject(fp,&key) == -1) return -1;",
          "419:     if (rdbSaveObject(fp,val) == -1) return -1;",
          "420:     return 1;",
          "421: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "432:         while((de = dictNext(di)) != NULL) {",
          "433:             sds keystr = dictGetEntryKey(de);",
          "434:             robj key, *o = dictGetEntryVal(de);",
          "437:             initStaticStringObject(key,keystr);",
          "451:         }",
          "452:         dictReleaseIterator(di);",
          "453:     }",
          "",
          "[Removed Lines]",
          "435:             time_t expiretime;",
          "438:             expiretime = getExpire(db,&key);",
          "441:             if (expiretime != -1) {",
          "443:                 if (expiretime < now) continue;",
          "444:                 if (rdbSaveType(fp,REDIS_EXPIRETIME) == -1) goto werr;",
          "445:                 if (rdbSaveTime(fp,expiretime) == -1) goto werr;",
          "446:             }",
          "448:             if (rdbSaveType(fp,o->type) == -1) goto werr;",
          "449:             if (rdbSaveStringObject(fp,&key) == -1) goto werr;",
          "450:             if (rdbSaveObject(fp,o) == -1) goto werr;",
          "",
          "[Added Lines]",
          "462:             if (rdbSaveKeyValuePair(fp,db,key,o,now) == -1) goto werr;",
          "",
          "---------------"
        ],
        "src/redis.c||src/redis.c": [
          "File: src/redis.c -> src/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "769:     server.maxmemory_policy = REDIS_MAXMEMORY_VOLATILE_LRU;",
          "770:     server.maxmemory_samples = 3;",
          "771:     server.ds_enabled = 0;",
          "774:     server.cache_blocked_clients = 0;",
          "775:     server.hash_max_zipmap_entries = REDIS_HASH_MAX_ZIPMAP_ENTRIES;",
          "",
          "[Removed Lines]",
          "772:     server.ds_path = zstrdup(\"/tmp/redis.ds\");",
          "",
          "[Added Lines]",
          "772:     server.ds_path = sdsnew(\"/tmp/redis.ds\");",
          "",
          "---------------"
        ],
        "src/redis.h||src/redis.h": [
          "File: src/redis.h -> src/redis.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "746: off_t rdbSavedObjectPages(robj *o);",
          "747: robj *rdbLoadObject(int type, FILE *fp);",
          "748: void backgroundSaveDoneHandler(int statloc);",
          "751: void flushAppendOnlyFile(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "750: int rdbSaveKeyValuePair(FILE *fp, redisDb *db, robj *key, robj *val, time_t now);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "834ef78e27a8690a91d727259aaece611664a368",
      "candidate_info": {
        "commit_hash": "834ef78e27a8690a91d727259aaece611664a368",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/834ef78e27a8690a91d727259aaece611664a368",
        "files": [
          "src/networking.c",
          "src/object.c",
          "src/redis.h"
        ],
        "message": "Refactor reply buildup for speed on large multi bulk replies",
        "before_after_code_files": [
          "src/networking.c||src/networking.c",
          "src/object.c||src/object.c",
          "src/redis.h||src/redis.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/networking.c||src/networking.c",
            "src/redis.h||src/redis.h"
          ],
          "candidate": [
            "src/networking.c||src/networking.c",
            "src/redis.h||src/redis.h"
          ]
        }
      },
      "candidate_diff": {
        "src/networking.c||src/networking.c": [
          "File: src/networking.c -> src/networking.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: }",
          "14: redisClient *createClient(int fd) {",
          "17:     anetNonBlock(NULL,fd);",
          "18:     anetTcpNoDelay(NULL,fd);",
          "",
          "[Removed Lines]",
          "15:     redisClient *c = zmalloc(sizeof(*c));",
          "",
          "[Added Lines]",
          "14:     redisClient *c;",
          "19:     size_t size = 8192-sizeof(size_t);",
          "20:     redisAssert(size > sizeof(redisClient));",
          "21:     c = zmalloc(size);",
          "22:     c->buflen = size-sizeof(redisClient);",
          "23:     c->bufpos = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     return c;",
          "54: }",
          "58:         (c->replstate == REDIS_REPL_NONE ||",
          "59:          c->replstate == REDIS_REPL_ONLINE) &&",
          "60:         aeCreateFileEvent(server.el, c->fd, AE_WRITABLE,",
          "63:     if (server.vm_enabled && obj->storage != REDIS_VM_MEMORY) {",
          "64:         obj = dupStringObject(obj);",
          "66:     }",
          "68: }",
          "70: void addReplySds(redisClient *c, sds s) {",
          "74: }",
          "82: }",
          "85:     char buf[128];",
          "96:     len = ll2string(buf+1,sizeof(buf)-1,ll);",
          "97:     buf[len+1] = '\\r';",
          "98:     buf[len+2] = '\\n';",
          "100: }",
          "115: }",
          "117: void addReplyBulkLen(redisClient *c, robj *obj) {",
          "121:     if (obj->encoding == REDIS_ENCODING_RAW) {",
          "122:         len = sdslen(obj->ptr);",
          "",
          "[Removed Lines]",
          "56: void addReply(redisClient *c, robj *obj) {",
          "57:     if (listLength(c->reply) == 0 &&",
          "61:         sendReplyToClient, c) == AE_ERR) return;",
          "67:     listAddNodeTail(c->reply,getDecodedObject(obj));",
          "71:     robj *o = createObject(REDIS_STRING,s);",
          "72:     addReply(c,o);",
          "73:     decrRefCount(o);",
          "76: void addReplyDouble(redisClient *c, double d) {",
          "77:     char buf[128];",
          "79:     snprintf(buf,sizeof(buf),\"%.17g\",d);",
          "80:     addReplySds(c,sdscatprintf(sdsempty(),\"$%lu\\r\\n%s\\r\\n\",",
          "81:         (unsigned long) strlen(buf),buf));",
          "84: void addReplyLongLong(redisClient *c, long long ll) {",
          "86:     size_t len;",
          "88:     if (ll == 0) {",
          "89:         addReply(c,shared.czero);",
          "90:         return;",
          "91:     } else if (ll == 1) {",
          "92:         addReply(c,shared.cone);",
          "93:         return;",
          "94:     }",
          "95:     buf[0] = ':';",
          "99:     addReplySds(c,sdsnewlen(buf,len+3));",
          "102: void addReplyUlong(redisClient *c, unsigned long ul) {",
          "103:     char buf[128];",
          "104:     size_t len;",
          "106:     if (ul == 0) {",
          "107:         addReply(c,shared.czero);",
          "108:         return;",
          "109:     } else if (ul == 1) {",
          "110:         addReply(c,shared.cone);",
          "111:         return;",
          "112:     }",
          "113:     len = snprintf(buf,sizeof(buf),\":%lu\\r\\n\",ul);",
          "114:     addReplySds(c,sdsnewlen(buf,len));",
          "118:     size_t len, intlen;",
          "119:     char buf[128];",
          "",
          "[Added Lines]",
          "64: int _ensureFileEvent(redisClient *c) {",
          "65:     if (c->bufpos == 0 && listLength(c->reply) == 0 &&",
          "69:         sendReplyToClient, c) == AE_ERR) return REDIS_ERR;",
          "70:     return REDIS_OK;",
          "71: }",
          "73: void _addReplyObjectToList(redisClient *c, robj *obj) {",
          "74:     redisAssert(obj->type == REDIS_STRING &&",
          "75:                 obj->encoding == REDIS_ENCODING_RAW);",
          "76:     listAddNodeTail(c->reply,obj);",
          "77: }",
          "79: void _ensureBufferInReplyList(redisClient *c) {",
          "80:     sds buffer = sdsnewlen(NULL,REDIS_REPLY_CHUNK_SIZE);",
          "82:     listAddNodeTail(c->reply,createObject(REDIS_REPLY_NODE,buffer));",
          "83: }",
          "85: void _addReplyStringToBuffer(redisClient *c, char *s, size_t len) {",
          "86:     size_t available = 0;",
          "87:     redisAssert(len < REDIS_REPLY_CHUNK_THRESHOLD);",
          "88:     if (listLength(c->reply) > 0) {",
          "89:         robj *o = listNodeValue(listLast(c->reply));",
          "92:         if (o->type == REDIS_REPLY_NODE) available = sdsavail(o->ptr);",
          "93:         if (o->type != REDIS_REPLY_NODE || len > available) {",
          "94:             _ensureBufferInReplyList(c);",
          "95:             _addReplyStringToBuffer(c,s,len);",
          "96:         } else {",
          "97:             o->ptr = sdscatlen(o->ptr,s,len);",
          "98:         }",
          "99:     } else {",
          "100:         available = c->buflen-c->bufpos;",
          "101:         if (len > available) {",
          "102:             _ensureBufferInReplyList(c);",
          "103:             _addReplyStringToBuffer(c,s,len);",
          "104:         } else {",
          "105:             memcpy(c->buf+c->bufpos,s,len);",
          "106:             c->bufpos += len;",
          "107:         }",
          "108:     }",
          "109: }",
          "111: void addReply(redisClient *c, robj *obj) {",
          "112:     if (_ensureFileEvent(c) != REDIS_OK) return;",
          "116:     } else {",
          "118:         obj = getDecodedObject(obj);",
          "119:     }",
          "121:     if (sdslen(obj->ptr) < REDIS_REPLY_CHUNK_THRESHOLD) {",
          "122:         _addReplyStringToBuffer(c,obj->ptr,sdslen(obj->ptr));",
          "123:         decrRefCount(obj);",
          "124:     } else {",
          "125:         _addReplyObjectToList(c,obj);",
          "130:     if (_ensureFileEvent(c) != REDIS_OK) return;",
          "131:     if (sdslen(s) < REDIS_REPLY_CHUNK_THRESHOLD) {",
          "132:         _addReplyStringToBuffer(c,s,sdslen(s));",
          "133:         sdsfree(s);",
          "134:     } else {",
          "135:         _addReplyObjectToList(c,createObject(REDIS_STRING,s));",
          "136:     }",
          "139: void addReplyString(redisClient *c, char *s, size_t len) {",
          "140:     if (_ensureFileEvent(c) != REDIS_OK) return;",
          "141:     if (len < REDIS_REPLY_CHUNK_THRESHOLD) {",
          "142:         _addReplyStringToBuffer(c,s,len);",
          "143:     } else {",
          "144:         _addReplyObjectToList(c,createStringObject(s,len));",
          "145:     }",
          "146: }",
          "148: void addReplyDouble(redisClient *c, double d) {",
          "149:     char dbuf[128], sbuf[128];",
          "150:     int dlen, slen;",
          "151:     dlen = snprintf(dbuf,sizeof(dbuf),\"%.17g\",d);",
          "152:     slen = snprintf(sbuf,sizeof(sbuf),\"$%d\\r\\n%s\\r\\n\",dlen,dbuf);",
          "153:     addReplyString(c,sbuf,slen);",
          "156: void _addReplyLongLong(redisClient *c, long long ll, char prefix) {",
          "158:     int len;",
          "159:     buf[0] = prefix;",
          "163:     addReplyString(c,buf,len+3);",
          "166: void addReplyLongLong(redisClient *c, long long ll) {",
          "167:     _addReplyLongLong(c,ll,':');",
          "168: }",
          "170: void addReplyUlong(redisClient *c, unsigned long ul) {",
          "171:     _addReplyLongLong(c,(long long)ul,':');",
          "175:     size_t len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:             len++;",
          "134:         }",
          "135:     }",
          "141: }",
          "143: void addReplyBulk(redisClient *c, robj *obj) {",
          "",
          "[Removed Lines]",
          "136:     buf[0] = '$';",
          "137:     intlen = ll2string(buf+1,sizeof(buf)-1,(long long)len);",
          "138:     buf[intlen+1] = '\\r';",
          "139:     buf[intlen+2] = '\\n';",
          "140:     addReplySds(c,sdsnewlen(buf,intlen+3));",
          "",
          "[Added Lines]",
          "192:     _addReplyLongLong(c,len,'$');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "287:     zfree(c);",
          "288: }",
          "318: void sendReplyToClient(aeEventLoop *el, int fd, void *privdata, int mask) {",
          "319:     redisClient *c = privdata;",
          "320:     int nwritten = 0, totwritten = 0, objlen;",
          "",
          "[Removed Lines]",
          "290: #define GLUEREPLY_UP_TO (1024)",
          "291: static void glueReplyBuffersIfNeeded(redisClient *c) {",
          "292:     int copylen = 0;",
          "293:     char buf[GLUEREPLY_UP_TO];",
          "294:     listNode *ln;",
          "295:     listIter li;",
          "296:     robj *o;",
          "298:     listRewind(c->reply,&li);",
          "299:     while((ln = listNext(&li))) {",
          "300:         int objlen;",
          "302:         o = ln->value;",
          "303:         objlen = sdslen(o->ptr);",
          "304:         if (copylen + objlen <= GLUEREPLY_UP_TO) {",
          "305:             memcpy(buf+copylen,o->ptr,objlen);",
          "306:             copylen += objlen;",
          "307:             listDelNode(c->reply,ln);",
          "308:         } else {",
          "309:             if (copylen == 0) return;",
          "310:             break;",
          "311:         }",
          "312:     }",
          "314:     o = createObject(REDIS_STRING,sdsnewlen(buf,copylen));",
          "315:     listAddNodeHead(c->reply,o);",
          "316: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "331:         return;",
          "332:     }",
          "359:         }",
          "",
          "[Removed Lines]",
          "334:     while(listLength(c->reply)) {",
          "335:         if (server.glueoutputbuf && listLength(c->reply) > 1)",
          "336:             glueReplyBuffersIfNeeded(c);",
          "338:         o = listNodeValue(listFirst(c->reply));",
          "339:         objlen = sdslen(o->ptr);",
          "341:         if (objlen == 0) {",
          "342:             listDelNode(c->reply,listFirst(c->reply));",
          "343:             continue;",
          "344:         }",
          "346:         if (c->flags & REDIS_MASTER) {",
          "348:             nwritten = objlen - c->sentlen;",
          "349:         } else {",
          "350:             nwritten = write(fd, ((char*)o->ptr)+c->sentlen, objlen - c->sentlen);",
          "351:             if (nwritten <= 0) break;",
          "352:         }",
          "353:         c->sentlen += nwritten;",
          "354:         totwritten += nwritten;",
          "356:         if (c->sentlen == objlen) {",
          "357:             listDelNode(c->reply,listFirst(c->reply));",
          "358:             c->sentlen = 0;",
          "",
          "[Added Lines]",
          "358:     while(c->bufpos > 0 || listLength(c->reply)) {",
          "359:         if (c->bufpos > 0) {",
          "360:             if (c->flags & REDIS_MASTER) {",
          "362:                 nwritten = c->bufpos - c->sentlen;",
          "363:             } else {",
          "364:                 nwritten = write(fd,c->buf+c->sentlen,c->bufpos-c->sentlen);",
          "365:                 if (nwritten <= 0) break;",
          "366:             }",
          "367:             c->sentlen += nwritten;",
          "368:             totwritten += nwritten;",
          "372:             if (c->sentlen == c->bufpos) {",
          "373:                 c->bufpos = 0;",
          "374:                 c->sentlen = 0;",
          "375:             }",
          "376:         } else {",
          "377:             o = listNodeValue(listFirst(c->reply));",
          "378:             objlen = sdslen(o->ptr);",
          "380:             if (objlen == 0) {",
          "381:                 listDelNode(c->reply,listFirst(c->reply));",
          "382:                 continue;",
          "383:             }",
          "385:             if (c->flags & REDIS_MASTER) {",
          "387:                 nwritten = objlen - c->sentlen;",
          "388:             } else {",
          "389:                 nwritten = write(fd, ((char*)o->ptr)+c->sentlen,objlen-c->sentlen);",
          "390:                 if (nwritten <= 0) break;",
          "391:             }",
          "392:             c->sentlen += nwritten;",
          "393:             totwritten += nwritten;",
          "396:             if (c->sentlen == objlen) {",
          "397:                 listDelNode(c->reply,listFirst(c->reply));",
          "398:                 c->sentlen = 0;",
          "399:             }",
          "",
          "---------------"
        ],
        "src/object.c||src/object.c": [
          "File: src/object.c -> src/object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:         case REDIS_SET: freeSetObject(o); break;",
          "197:         case REDIS_ZSET: freeZsetObject(o); break;",
          "198:         case REDIS_HASH: freeHashObject(o); break;",
          "199:         default: redisPanic(\"Unknown object type\"); break;",
          "200:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199:         case REDIS_REPLY_NODE: freeStringObject(o); break;",
          "",
          "---------------"
        ],
        "src/redis.h||src/redis.h": [
          "File: src/redis.h -> src/redis.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: #define REDIS_SHARED_INTEGERS 10000",
          "52: #define REDIS_WRITEV_THRESHOLD      3",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: #define REDIS_REPLY_CHUNK_BYTES (4*1024)",
          "53: #define REDIS_REPLY_CHUNK_SIZE (REDIS_REPLY_CHUNK_BYTES-sizeof(struct sdshdr)-1-sizeof(size_t))",
          "58: #define REDIS_REPLY_CHUNK_THRESHOLD (REDIS_REPLY_CHUNK_SIZE-16)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72: #define REDIS_SET 2",
          "73: #define REDIS_ZSET 3",
          "74: #define REDIS_HASH 4",
          "75: #define REDIS_VMPOINTER 8",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: #define REDIS_REPLY_NODE 5",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "312: } redisClient;",
          "314: struct saveparam {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324:     int bufpos;",
          "325:     int buflen;",
          "326:     char buf[];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52970711cf974e7905a7fe1252be3bcffcd28d62",
      "candidate_info": {
        "commit_hash": "52970711cf974e7905a7fe1252be3bcffcd28d62",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/52970711cf974e7905a7fe1252be3bcffcd28d62",
        "files": [
          "src/diskstore.c"
        ],
        "message": "added diskstore.c, currently just a stub",
        "before_after_code_files": [
          "src/diskstore.c||src/diskstore.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/diskstore.c||src/diskstore.c"
          ],
          "candidate": [
            "src/diskstore.c||src/diskstore.c"
          ]
        }
      },
      "candidate_diff": {
        "src/diskstore.c||src/diskstore.c": [
          "File: src/diskstore.c -> src/diskstore.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: #include \"redis.h\"",
          "65: #include <fcntl.h>",
          "66: #include <sys/stat.h>",
          "68: int dsOpen(void) {",
          "69:     struct stat sb;",
          "70:     int retval;",
          "71:     char *path = server.diskstore_path;",
          "73:     if ((retval = stat(path,&sb) == -1) && errno != ENOENT) {",
          "74:         redisLog(REDIS_WARNING, \"Error opening disk store at %s: %s\",",
          "75:                 path, strerror(errno));",
          "76:         return REDIS_ERR;",
          "77:     }",
          "80:     if (retval == 0 && S_ISDIR(sb.st_mode)) return REDIS_OK;",
          "83:     if (retval == 0 && !S_ISDIR(sb.st_mode)) {",
          "84:         redisLog(REDIS_WARNING,\"Disk store at %s is not a directory\", path);",
          "85:         return REDIS_ERR;",
          "86:     }",
          "91:     if (mkdir(path) == -1) {",
          "92:         redisLog(REDIS_WARNING,\"Disk store init failed creating dir %s: %s\",",
          "93:             path, strerror(errno));",
          "94:         return REDIS_ERR;",
          "95:     }",
          "96:     return REDIS_OK;",
          "97: }",
          "99: int dsClose(void) {",
          "100:     return REDIS_OK;",
          "101: }",
          "103: int dsSet(redisDb *db, robj *key, robj *val) {",
          "104: }",
          "106: robj *dsGet(redisDb *db, robj *key) {",
          "107: }",
          "109: int dsExists(redisDb *db, robj *key) {",
          "110: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}