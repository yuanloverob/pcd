{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "38e14fbd5f1a2c4265d6463c2e1d195cc9dce7e2",
      "candidate_info": {
        "commit_hash": "38e14fbd5f1a2c4265d6463c2e1d195cc9dce7e2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/38e14fbd5f1a2c4265d6463c2e1d195cc9dce7e2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Documentation improvements.\n\nFossilOrigin-Name: 535afe150939d06342fbbed4ca1b6a1472fde51ac9edd4b4b583b87d90f509c2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1accfa8cf05856b03cecab7a2cd0c0337842a0003cfbec207b6f0acdd93e8f15",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "48118e40608cde89668cbeeffba8a69313611794",
      "candidate_info": {
        "commit_hash": "48118e40608cde89668cbeeffba8a69313611794",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/48118e40608cde89668cbeeffba8a69313611794",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Remove a NEVER() that is in fact reachable.  Test cases in dbsqlfuzz and TH3.\n\nFossilOrigin-Name: ffd8bb9351fbd8c1285491d4e10734f6816689de6042d640c178a5ecda75a5ef",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a9b2adc5d61790abd86839d12e7ecb98a85d7e4cde5f94558530e32449d9e483",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1782:     if( iStart<x ) return SQLITE_CORRUPT_PAGE(pPage);",
          "1784:     put2byte(&data[hdr+1], iFreeBlk);",
          "1785:     put2byte(&data[hdr+5], iEnd);",
          "1786:   }else{",
          "",
          "[Removed Lines]",
          "1783:     if( NEVER(iPtr!=hdr+1) ) return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "[Added Lines]",
          "1783:     if( iPtr!=hdr+1 ) return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31046a9f1ff573fc435bf9c5319ec101a91c57c1",
      "candidate_info": {
        "commit_hash": "31046a9f1ff573fc435bf9c5319ec101a91c57c1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/31046a9f1ff573fc435bf9c5319ec101a91c57c1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vtab.c"
        ],
        "message": "The xDestroy method of a module might be NULL if the schema is corrupt.\n\nFossilOrigin-Name: 0457e7d1961ab1f63e31d9028a9064a895f5c3fcfb56ba25e4f37e90197e3a9f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 136cdefb2f7b582ff1771ac7f9e733dc24c357605526cbfb1834937697c8a922",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "892:     }",
          "893:     p = vtabDisconnectAll(db, pTab);",
          "894:     xDestroy = p->pMod->pModule->xDestroy;",
          "896:     pTab->nTabRef++;",
          "899:     if( rc==SQLITE_OK ){",
          "900:       assert( pTab->pVTable==p && p->pNext==0 );",
          "",
          "[Removed Lines]",
          "897:     rc = xDestroy(p->pVtab);",
          "",
          "[Added Lines]",
          "896:     rc = xDestroy ? xDestroy(p->pVtab) : SQLITE_OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d2c40e931083dba2367a46ba4b6f2e460d62cf07",
      "candidate_info": {
        "commit_hash": "d2c40e931083dba2367a46ba4b6f2e460d62cf07",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d2c40e931083dba2367a46ba4b6f2e460d62cf07",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c"
        ],
        "message": "For for the previous check-in:  Always enable the nUri variable, even when debugging is turned off.\n\nFossilOrigin-Name: f84a15394c369cbdb6fba87c603a609722cf1f499626c7f20699060273ab5081",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: df51ae19c1aa4c26f2dcd427eddc1c9cc24b698e1ab0a948b198a57432e25e1e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "4764: #ifdef SQLITE_DEBUG",
          "4766: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4802:     while( *z ){",
          "4803:       z += strlen(z)+1;",
          "4804:       z += strlen(z)+1;",
          "4806:       nUri++;",
          "4808:     }",
          "4809:     nUriByte = (int)(&z[2] - zUri);",
          "4810:     assert( nUriByte>=1 );",
          "",
          "[Removed Lines]",
          "4805: #ifdef SQLITE_DEBUG",
          "4807: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91faeec8d095f494852b15952a9835b740045ac8",
      "candidate_info": {
        "commit_hash": "91faeec8d095f494852b15952a9835b740045ac8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/91faeec8d095f494852b15952a9835b740045ac8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test1.c",
          "src/wal.c",
          "test/corruptL.test"
        ],
        "message": "Modify a test for corruption within the wal checkpoint code to account for the pending-byte page. And for the fact that test configurations might move the pending-byte page.\n\nFossilOrigin-Name: 7dfb74c37e678dde347d9d85846672f82ad282e300e32676330b764be2e4d580",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test1.c||src/test1.c",
          "src/wal.c||src/wal.c",
          "test/corruptL.test||test/corruptL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 533aeb90085d989078073067172135db98e37e00be84f99757255858126196e4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7802:   }",
          "7803: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7812: static int SQLITE_TCLAPI test_write_db(",
          "7813:   void * clientData,",
          "7814:   Tcl_Interp *interp,",
          "7815:   int objc,",
          "7816:   Tcl_Obj *CONST objv[]",
          "7817: ){",
          "7818:   sqlite3 *db = 0;",
          "7819:   Tcl_WideInt iOff = 0;",
          "7820:   const unsigned char *aData = 0;",
          "7821:   int nData = 0;",
          "7822:   sqlite3_file *pFile = 0;",
          "7823:   int rc;",
          "7825:   if( objc!=4 ){",
          "7826:     Tcl_WrongNumArgs(interp, 1, objv, \"DB OFFSET DATA\");",
          "7827:     return TCL_ERROR;",
          "7828:   }",
          "7829:   if( getDbPointer(interp, Tcl_GetString(objv[1]), &db) ) return TCL_ERROR;",
          "7830:   if( Tcl_GetWideIntFromObj(interp, objv[2], &iOff) ) return TCL_ERROR;",
          "7831:   aData = Tcl_GetByteArrayFromObj(objv[3], &nData);",
          "7833:   sqlite3_file_control(db, \"main\", SQLITE_FCNTL_FILE_POINTER, (void*)&pFile);",
          "7834:   rc = pFile->pMethods->xWrite(pFile, aData, nData, iOff);",
          "7836:   Tcl_SetResult(interp, (char *)sqlite3ErrName(rc), TCL_VOLATILE);",
          "7837:   return TCL_OK;",
          "7838: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8166:      { \"sqlite3_mmap_warm\",       test_mmap_warm,          0 },",
          "8167:      { \"sqlite3_config_sorterref\", test_config_sorterref,   0 },",
          "8168:      { \"decode_hexdb\",             test_decode_hexdb,       0 },",
          "8169:   };",
          "8170:   static int bitmask_size = sizeof(Bitmask)*8;",
          "8171:   static int longdouble_size = sizeof(LONGDOUBLE_TYPE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8204:      { \"test_write_db\",            test_write_db,           0 },",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2009:         sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_CKPT_START, 0);",
          "2010:         rc = sqlite3OsFileSize(pWal->pDbFd, &nSize);",
          "2011:         if( rc==SQLITE_OK && nSize<nReq ){",
          "2016:             rc = SQLITE_CORRUPT_BKPT;",
          "2017:           }else{",
          "",
          "[Removed Lines]",
          "2012:           if( (nSize+(i64)pWal->hdr.mxFrame*szPage)<nReq ){",
          "",
          "[Added Lines]",
          "2012:           if( (nSize+65536+(i64)pWal->hdr.mxFrame*szPage)<nReq ){",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1314:     INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "1315:     INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "1316:     INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "1318:     PRAGMA journal_mode = wal;",
          "1319:     INSERT INTO t1 VALUES(-1, 'b');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1317:     INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "1318:     INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "1319:     INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}