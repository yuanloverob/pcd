{
  "cve_id": "CVE-2013-4248",
  "cve_desc": "The openssl_x509_parse function in openssl.c in the OpenSSL module in PHP before 5.4.18 and 5.5.x before 5.5.2 does not properly handle a '\\0' character in a domain name in the Subject Alternative Name field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408.",
  "repo": "php/php-src",
  "patch_hash": "2874696a5a8d46639d261571f915c493cd875897",
  "patch_info": {
    "commit_hash": "2874696a5a8d46639d261571f915c493cd875897",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/2874696a5a8d46639d261571f915c493cd875897",
    "files": [
      "NEWS",
      "ext/openssl/openssl.c",
      "ext/openssl/tests/cve2013_4073.pem",
      "ext/openssl/tests/cve2013_4073.phpt"
    ],
    "message": "Fix CVE-2013-4073 - handling of certs with null bytes",
    "before_after_code_files": [
      "ext/openssl/openssl.c||ext/openssl/openssl.c",
      "ext/openssl/tests/cve2013_4073.pem||ext/openssl/tests/cve2013_4073.pem",
      "ext/openssl/tests/cve2013_4073.phpt||ext/openssl/tests/cve2013_4073.phpt"
    ]
  },
  "patch_diff": {
    "ext/openssl/openssl.c||ext/openssl/openssl.c": [
      "File: ext/openssl/openssl.c -> ext/openssl/openssl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1398: }",
      "1403: PHP_FUNCTION(openssl_x509_parse)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1405: static int openssl_x509v3_subjectAltName(BIO *bio, X509_EXTENSION *extension)",
      "1406: {",
      "1407:  GENERAL_NAMES *names;",
      "1408:  const X509V3_EXT_METHOD *method = NULL;",
      "1409:  long i, length, num;",
      "1410:  const unsigned char *p;",
      "1412:  method = X509V3_EXT_get(extension);",
      "1413:  if (method == NULL) {",
      "1414:   return -1;",
      "1415:  }",
      "1417:  p = extension->value->data;",
      "1418:  length = extension->value->length;",
      "1419:  if (method->it) {",
      "1420:   names = (GENERAL_NAMES*)(ASN1_item_d2i(NULL, &p, length,",
      "1421:              ASN1_ITEM_ptr(method->it)));",
      "1422:  } else {",
      "1423:   names = (GENERAL_NAMES*)(method->d2i(NULL, &p, length));",
      "1424:  }",
      "1425:  if (names == NULL) {",
      "1426:   return -1;",
      "1427:  }",
      "1429:  num = sk_GENERAL_NAME_num(names);",
      "1430:  for (i = 0; i < num; i++) {",
      "1431:    GENERAL_NAME *name;",
      "1432:    ASN1_STRING *as;",
      "1433:    name = sk_GENERAL_NAME_value(names, i);",
      "1434:    switch (name->type) {",
      "1435:     case GEN_EMAIL:",
      "1436:      BIO_puts(bio, \"email:\");",
      "1437:      as = name->d.rfc822Name;",
      "1438:      BIO_write(bio, ASN1_STRING_data(as),",
      "1439:         ASN1_STRING_length(as));",
      "1440:      break;",
      "1441:     case GEN_DNS:",
      "1442:      BIO_puts(bio, \"DNS:\");",
      "1443:      as = name->d.dNSName;",
      "1444:      BIO_write(bio, ASN1_STRING_data(as),",
      "1445:         ASN1_STRING_length(as));",
      "1446:      break;",
      "1447:     case GEN_URI:",
      "1448:      BIO_puts(bio, \"URI:\");",
      "1449:      as = name->d.uniformResourceIdentifier;",
      "1450:      BIO_write(bio, ASN1_STRING_data(as),",
      "1451:         ASN1_STRING_length(as));",
      "1452:      break;",
      "1453:     default:",
      "1457:      GENERAL_NAME_print(bio, name);",
      "1458:    }",
      "1460:    if (i < (num - 1)) {",
      "1461:     BIO_puts(bio, \", \");",
      "1462:    }",
      "1463:  }",
      "1464:  sk_GENERAL_NAME_pop_free(names, GENERAL_NAME_free);",
      "1466:  return 0;",
      "1467: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1496:  for (i = 0; i < X509_get_ext_count(cert); i++) {",
      "1497:   extension = X509_get_ext(cert, i);",
      "1499:    extname = (char *)OBJ_nid2sn(OBJ_obj2nid(X509_EXTENSION_get_object(extension)));",
      "1500:   } else {",
      "1501:    OBJ_obj2txt(buf, sizeof(buf)-1, X509_EXTENSION_get_object(extension), 1);",
      "1502:    extname = buf;",
      "1503:   }",
      "1504:   bio_out = BIO_new(BIO_s_mem());",
      "1506:    BIO_get_mem_ptr(bio_out, &bio_buf);",
      "1507:    add_assoc_stringl(subitem, extname, bio_buf->data, bio_buf->length, 1);",
      "1508:   } else {",
      "",
      "[Removed Lines]",
      "1498:   if (OBJ_obj2nid(X509_EXTENSION_get_object(extension)) != NID_undef) {",
      "1505:   if (X509V3_EXT_print(bio_out, extension, 0, 0)) {",
      "",
      "[Added Lines]",
      "1565:   int nid;",
      "1567:   nid = OBJ_obj2nid(X509_EXTENSION_get_object(extension));",
      "1568:   if (nid != NID_undef) {",
      "1575:   if (nid == NID_subject_alt_name) {",
      "1576:    if (openssl_x509v3_subjectAltName(bio_out, extension) == 0) {",
      "1577:     add_assoc_stringl(subitem, extname, bio_buf->data, bio_buf->length, 1);",
      "1578:    } else {",
      "1579:     zval_dtor(return_value);",
      "1580:     if (certresource == -1 && cert) {",
      "1581:      X509_free(cert);",
      "1582:     }",
      "1583:     BIO_free(bio_out);",
      "1584:     RETURN_FALSE;",
      "1585:    }",
      "1586:   }",
      "1587:   else if (X509V3_EXT_print(bio_out, extension, 0, 0)) {",
      "",
      "---------------"
    ],
    "ext/openssl/tests/cve2013_4073.pem||ext/openssl/tests/cve2013_4073.pem": [
      "File: ext/openssl/tests/cve2013_4073.pem -> ext/openssl/tests/cve2013_4073.pem",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: -----BEGIN CERTIFICATE-----",
      "2: MIIE2DCCA8CgAwIBAgIBADANBgkqhkiG9w0BAQUFADCBxTELMAkGA1UEBhMCVVMx",
      "3: DzANBgNVBAgMBk9yZWdvbjESMBAGA1UEBwwJQmVhdmVydG9uMSMwIQYDVQQKDBpQ",
      "4: eXRob24gU29mdHdhcmUgRm91bmRhdGlvbjEgMB4GA1UECwwXUHl0aG9uIENvcmUg",
      "5: RGV2ZWxvcG1lbnQxJDAiBgNVBAMMG251bGwucHl0aG9uLm9yZwBleGFtcGxlLm9y",
      "6: ZzEkMCIGCSqGSIb3DQEJARYVcHl0aG9uLWRldkBweXRob24ub3JnMB4XDTEzMDgw",
      "7: NzEzMTE1MloXDTEzMDgwNzEzMTI1MlowgcUxCzAJBgNVBAYTAlVTMQ8wDQYDVQQI",
      "8: DAZPcmVnb24xEjAQBgNVBAcMCUJlYXZlcnRvbjEjMCEGA1UECgwaUHl0aG9uIFNv",
      "9: ZnR3YXJlIEZvdW5kYXRpb24xIDAeBgNVBAsMF1B5dGhvbiBDb3JlIERldmVsb3Bt",
      "10: ZW50MSQwIgYDVQQDDBtudWxsLnB5dGhvbi5vcmcAZXhhbXBsZS5vcmcxJDAiBgkq",
      "11: hkiG9w0BCQEWFXB5dGhvbi1kZXZAcHl0aG9uLm9yZzCCASIwDQYJKoZIhvcNAQEB",
      "12: BQADggEPADCCAQoCggEBALXq7cn7Rn1vO3aA3TrzA5QLp6bb7B3f/yN0CJ2XFj+j",
      "13: pHs+Gw6WWSUDpybiiKnPec33BFawq3kyblnBMjBU61ioy5HwQqVkJ8vUVjGIUq3P",
      "14: vX/wBmQfzCe4o4uM89gpHyUL9UYGG8oCRa17dgqcv7u5rg0Wq2B1rgY+nHwx3JIv",
      "15: KRrgSwyRkGzpN8WQ1yrXlxWjgI9de0mPVDDUlywcWze1q2kwaEPTM3hLAmD1PESA",
      "16: oY/n8A/RXoeeRs9i/Pm/DGUS8ZPINXk/yOzsR/XvvkTVroIeLZqfmFpnZeF0cHzL",
      "17: 08LODkVJJ9zjLdT7SA4vnne4FEbAxDbKAq5qkYzaL4UCAwEAAaOB0DCBzTAMBgNV",
      "18: HRMBAf8EAjAAMB0GA1UdDgQWBBSIWlXAUv9hzVKjNQ/qWpwkOCL3XDALBgNVHQ8E",
      "19: BAMCBeAwgZAGA1UdEQSBiDCBhYIeYWx0bnVsbC5weXRob24ub3JnAGV4YW1wbGUu",
      "20: Y29tgSBudWxsQHB5dGhvbi5vcmcAdXNlckBleGFtcGxlLm9yZ4YpaHR0cDovL251",
      "21: bGwucHl0aG9uLm9yZwBodHRwOi8vZXhhbXBsZS5vcmeHBMAAAgGHECABDbgAAAAA",
      "22: AAAAAAAAAAEwDQYJKoZIhvcNAQEFBQADggEBAKxPRe99SaghcI6IWT7UNkJw9aO9",
      "23: i9eo0Fj2MUqxpKbdb9noRDy2CnHWf7EIYZ1gznXPdwzSN4YCjV5d+Q9xtBaowT0j",
      "24: HPERs1ZuytCNNJTmhyqZ8q6uzMLoht4IqH/FBfpvgaeC5tBTnTT0rD5A/olXeimk",
      "25: kX4LxlEx5RAvpGB2zZVRGr6LobD9rVK91xuHYNIxxxfEGE8tCCWjp0+3ksri9SXx",
      "26: VHWBnbM9YaL32u3hxm8sYB/Yb8WSBavJCWJJqRStVRHM1koZlJmXNx2BX4vPo6iW",
      "27: RFEIPQsFZRLrtnCAiEhyT8bC2s/Njlu6ly9gtJZWSV46Q3ZjBL4q9sHKqZQ=",
      "28: -----END CERTIFICATE-----",
      "",
      "---------------"
    ],
    "ext/openssl/tests/cve2013_4073.phpt||ext/openssl/tests/cve2013_4073.phpt": [
      "File: ext/openssl/tests/cve2013_4073.phpt -> ext/openssl/tests/cve2013_4073.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: --TEST--",
      "2: CVE 2013-4073: Null-byte certificate handling",
      "3: --SKIPIF--",
      "4: <?php",
      "5: if (!extension_loaded(\"openssl\")) die(\"skip\");",
      "6: --FILE--",
      "7: <?php",
      "8: $cert = file_get_contents(__DIR__ . '/cve2013_4073.pem');",
      "9: $info = openssl_x509_parse($cert);",
      "10: var_export($info['extensions']);",
      "12: --EXPECTF--",
      "13: array (",
      "14:   'basicConstraints' => 'CA:FALSE',",
      "15:   'subjectKeyIdentifier' => '88:5A:55:C0:52:FF:61:CD:52:A3:35:0F:EA:5A:9C:24:38:22:F7:5C',",
      "16:   'keyUsage' => 'Digital Signature, Non Repudiation, Key Encipherment',",
      "17:   'subjectAltName' => 'DNS:altnull.python.org' . \"\\0\" . 'example.com, email:null@python.org' . \"\\0\" . 'user@example.org, URI:http://null.python.org' . \"\\0\" . 'http://example.org, IP Address:192.0.2.1, IP Address:2001:DB8:0:0:0:0:0:1",
      "18: ',",
      "19: )",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dcea4ec698dcae39b7bba6f6aa08933cbfee6755",
      "candidate_info": {
        "commit_hash": "dcea4ec698dcae39b7bba6f6aa08933cbfee6755",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/dcea4ec698dcae39b7bba6f6aa08933cbfee6755",
        "files": [
          "NEWS",
          "ext/openssl/openssl.c",
          "ext/openssl/tests/cve2013_4073.pem",
          "ext/openssl/tests/cve2013_4073.phpt"
        ],
        "message": "Fix CVE-2013-4073 - handling of certs with null bytes",
        "before_after_code_files": [
          "ext/openssl/openssl.c||ext/openssl/openssl.c",
          "ext/openssl/tests/cve2013_4073.pem||ext/openssl/tests/cve2013_4073.pem",
          "ext/openssl/tests/cve2013_4073.phpt||ext/openssl/tests/cve2013_4073.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "ext/openssl/openssl.c||ext/openssl/openssl.c",
            "ext/openssl/tests/cve2013_4073.pem||ext/openssl/tests/cve2013_4073.pem",
            "ext/openssl/tests/cve2013_4073.phpt||ext/openssl/tests/cve2013_4073.phpt"
          ],
          "candidate": [
            "ext/openssl/openssl.c||ext/openssl/openssl.c",
            "ext/openssl/tests/cve2013_4073.pem||ext/openssl/tests/cve2013_4073.pem",
            "ext/openssl/tests/cve2013_4073.phpt||ext/openssl/tests/cve2013_4073.phpt"
          ]
        }
      },
      "candidate_diff": {
        "ext/openssl/openssl.c||ext/openssl/openssl.c": [
          "File: ext/openssl/openssl.c -> ext/openssl/openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1326: }",
          "1331: PHP_FUNCTION(openssl_x509_parse)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1333: static int openssl_x509v3_subjectAltName(BIO *bio, X509_EXTENSION *extension)",
          "1334: {",
          "1335:  GENERAL_NAMES *names;",
          "1336:  const X509V3_EXT_METHOD *method = NULL;",
          "1337:  long i, length, num;",
          "1338:  const unsigned char *p;",
          "1340:  method = X509V3_EXT_get(extension);",
          "1341:  if (method == NULL) {",
          "1342:   return -1;",
          "1343:  }",
          "1345:  p = extension->value->data;",
          "1346:  length = extension->value->length;",
          "1347:  if (method->it) {",
          "1348:   names = (GENERAL_NAMES*)(ASN1_item_d2i(NULL, &p, length,",
          "1349:              ASN1_ITEM_ptr(method->it)));",
          "1350:  } else {",
          "1351:   names = (GENERAL_NAMES*)(method->d2i(NULL, &p, length));",
          "1352:  }",
          "1353:  if (names == NULL) {",
          "1354:   return -1;",
          "1355:  }",
          "1357:  num = sk_GENERAL_NAME_num(names);",
          "1358:  for (i = 0; i < num; i++) {",
          "1359:    GENERAL_NAME *name;",
          "1360:    ASN1_STRING *as;",
          "1361:    name = sk_GENERAL_NAME_value(names, i);",
          "1362:    switch (name->type) {",
          "1363:     case GEN_EMAIL:",
          "1364:      BIO_puts(bio, \"email:\");",
          "1365:      as = name->d.rfc822Name;",
          "1366:      BIO_write(bio, ASN1_STRING_data(as),",
          "1367:         ASN1_STRING_length(as));",
          "1368:      break;",
          "1369:     case GEN_DNS:",
          "1370:      BIO_puts(bio, \"DNS:\");",
          "1371:      as = name->d.dNSName;",
          "1372:      BIO_write(bio, ASN1_STRING_data(as),",
          "1373:         ASN1_STRING_length(as));",
          "1374:      break;",
          "1375:     case GEN_URI:",
          "1376:      BIO_puts(bio, \"URI:\");",
          "1377:      as = name->d.uniformResourceIdentifier;",
          "1378:      BIO_write(bio, ASN1_STRING_data(as),",
          "1379:         ASN1_STRING_length(as));",
          "1380:      break;",
          "1381:     default:",
          "1385:      GENERAL_NAME_print(bio, name);",
          "1386:    }",
          "1388:    if (i < (num - 1)) {",
          "1389:     BIO_puts(bio, \", \");",
          "1390:    }",
          "1391:  }",
          "1392:  sk_GENERAL_NAME_pop_free(names, GENERAL_NAME_free);",
          "1394:  return 0;",
          "1395: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1424:  for (i = 0; i < X509_get_ext_count(cert); i++) {",
          "1425:   extension = X509_get_ext(cert, i);",
          "1427:    extname = (char *)OBJ_nid2sn(OBJ_obj2nid(X509_EXTENSION_get_object(extension)));",
          "1428:   } else {",
          "1429:    OBJ_obj2txt(buf, sizeof(buf)-1, X509_EXTENSION_get_object(extension), 1);",
          "1430:    extname = buf;",
          "1431:   }",
          "1432:   bio_out = BIO_new(BIO_s_mem());",
          "1434:    BIO_get_mem_ptr(bio_out, &bio_buf);",
          "1435:    add_assoc_stringl(subitem, extname, bio_buf->data, bio_buf->length, 1);",
          "1436:   } else {",
          "",
          "[Removed Lines]",
          "1426:   if (OBJ_obj2nid(X509_EXTENSION_get_object(extension)) != NID_undef) {",
          "1433:   if (X509V3_EXT_print(bio_out, extension, 0, 0)) {",
          "",
          "[Added Lines]",
          "1493:   int nid;",
          "1495:   nid = OBJ_obj2nid(X509_EXTENSION_get_object(extension));",
          "1496:   if (nid != NID_undef) {",
          "1503:   if (nid == NID_subject_alt_name) {",
          "1504:    if (openssl_x509v3_subjectAltName(bio_out, extension) == 0) {",
          "1505:     add_assoc_stringl(subitem, extname, bio_buf->data, bio_buf->length, 1);",
          "1506:    } else {",
          "1507:     zval_dtor(return_value);",
          "1508:     if (certresource == -1 && cert) {",
          "1509:      X509_free(cert);",
          "1510:     }",
          "1511:     BIO_free(bio_out);",
          "1512:     RETURN_FALSE;",
          "1513:    }",
          "1514:   }",
          "1515:   else if (X509V3_EXT_print(bio_out, extension, 0, 0)) {",
          "",
          "---------------"
        ],
        "ext/openssl/tests/cve2013_4073.pem||ext/openssl/tests/cve2013_4073.pem": [
          "File: ext/openssl/tests/cve2013_4073.pem -> ext/openssl/tests/cve2013_4073.pem",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: -----BEGIN CERTIFICATE-----",
          "2: MIIE2DCCA8CgAwIBAgIBADANBgkqhkiG9w0BAQUFADCBxTELMAkGA1UEBhMCVVMx",
          "3: DzANBgNVBAgMBk9yZWdvbjESMBAGA1UEBwwJQmVhdmVydG9uMSMwIQYDVQQKDBpQ",
          "4: eXRob24gU29mdHdhcmUgRm91bmRhdGlvbjEgMB4GA1UECwwXUHl0aG9uIENvcmUg",
          "5: RGV2ZWxvcG1lbnQxJDAiBgNVBAMMG251bGwucHl0aG9uLm9yZwBleGFtcGxlLm9y",
          "6: ZzEkMCIGCSqGSIb3DQEJARYVcHl0aG9uLWRldkBweXRob24ub3JnMB4XDTEzMDgw",
          "7: NzEzMTE1MloXDTEzMDgwNzEzMTI1MlowgcUxCzAJBgNVBAYTAlVTMQ8wDQYDVQQI",
          "8: DAZPcmVnb24xEjAQBgNVBAcMCUJlYXZlcnRvbjEjMCEGA1UECgwaUHl0aG9uIFNv",
          "9: ZnR3YXJlIEZvdW5kYXRpb24xIDAeBgNVBAsMF1B5dGhvbiBDb3JlIERldmVsb3Bt",
          "10: ZW50MSQwIgYDVQQDDBtudWxsLnB5dGhvbi5vcmcAZXhhbXBsZS5vcmcxJDAiBgkq",
          "11: hkiG9w0BCQEWFXB5dGhvbi1kZXZAcHl0aG9uLm9yZzCCASIwDQYJKoZIhvcNAQEB",
          "12: BQADggEPADCCAQoCggEBALXq7cn7Rn1vO3aA3TrzA5QLp6bb7B3f/yN0CJ2XFj+j",
          "13: pHs+Gw6WWSUDpybiiKnPec33BFawq3kyblnBMjBU61ioy5HwQqVkJ8vUVjGIUq3P",
          "14: vX/wBmQfzCe4o4uM89gpHyUL9UYGG8oCRa17dgqcv7u5rg0Wq2B1rgY+nHwx3JIv",
          "15: KRrgSwyRkGzpN8WQ1yrXlxWjgI9de0mPVDDUlywcWze1q2kwaEPTM3hLAmD1PESA",
          "16: oY/n8A/RXoeeRs9i/Pm/DGUS8ZPINXk/yOzsR/XvvkTVroIeLZqfmFpnZeF0cHzL",
          "17: 08LODkVJJ9zjLdT7SA4vnne4FEbAxDbKAq5qkYzaL4UCAwEAAaOB0DCBzTAMBgNV",
          "18: HRMBAf8EAjAAMB0GA1UdDgQWBBSIWlXAUv9hzVKjNQ/qWpwkOCL3XDALBgNVHQ8E",
          "19: BAMCBeAwgZAGA1UdEQSBiDCBhYIeYWx0bnVsbC5weXRob24ub3JnAGV4YW1wbGUu",
          "20: Y29tgSBudWxsQHB5dGhvbi5vcmcAdXNlckBleGFtcGxlLm9yZ4YpaHR0cDovL251",
          "21: bGwucHl0aG9uLm9yZwBodHRwOi8vZXhhbXBsZS5vcmeHBMAAAgGHECABDbgAAAAA",
          "22: AAAAAAAAAAEwDQYJKoZIhvcNAQEFBQADggEBAKxPRe99SaghcI6IWT7UNkJw9aO9",
          "23: i9eo0Fj2MUqxpKbdb9noRDy2CnHWf7EIYZ1gznXPdwzSN4YCjV5d+Q9xtBaowT0j",
          "24: HPERs1ZuytCNNJTmhyqZ8q6uzMLoht4IqH/FBfpvgaeC5tBTnTT0rD5A/olXeimk",
          "25: kX4LxlEx5RAvpGB2zZVRGr6LobD9rVK91xuHYNIxxxfEGE8tCCWjp0+3ksri9SXx",
          "26: VHWBnbM9YaL32u3hxm8sYB/Yb8WSBavJCWJJqRStVRHM1koZlJmXNx2BX4vPo6iW",
          "27: RFEIPQsFZRLrtnCAiEhyT8bC2s/Njlu6ly9gtJZWSV46Q3ZjBL4q9sHKqZQ=",
          "28: -----END CERTIFICATE-----",
          "",
          "---------------"
        ],
        "ext/openssl/tests/cve2013_4073.phpt||ext/openssl/tests/cve2013_4073.phpt": [
          "File: ext/openssl/tests/cve2013_4073.phpt -> ext/openssl/tests/cve2013_4073.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: CVE 2013-4073: Null-byte certificate handling",
          "3: --SKIPIF--",
          "4: <?php",
          "5: if (!extension_loaded(\"openssl\")) die(\"skip\");",
          "6: --FILE--",
          "7: <?php",
          "8: $cert = file_get_contents(__DIR__ . '/cve2013_4073.pem');",
          "9: $info = openssl_x509_parse($cert);",
          "10: var_export($info['extensions']);",
          "12: --EXPECTF--",
          "13: array (",
          "14:   'basicConstraints' => 'CA:FALSE',",
          "15:   'subjectKeyIdentifier' => '88:5A:55:C0:52:FF:61:CD:52:A3:35:0F:EA:5A:9C:24:38:22:F7:5C',",
          "16:   'keyUsage' => 'Digital Signature, Non Repudiation, Key Encipherment',",
          "17:   'subjectAltName' => 'DNS:altnull.python.org' . \"\\0\" . 'example.com, email:null@python.org' . \"\\0\" . 'user@example.org, URI:http://null.python.org' . \"\\0\" . 'http://example.org, IP Address:192.0.2.1, IP Address:2001:DB8:0:0:0:0:0:1",
          "18: ',",
          "19: )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "424aebbf3643b3fc1b1074ecddf2104cb9465f02",
      "candidate_info": {
        "commit_hash": "424aebbf3643b3fc1b1074ecddf2104cb9465f02",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/424aebbf3643b3fc1b1074ecddf2104cb9465f02",
        "files": [
          "ext/openssl/openssl.c",
          "ext/openssl/xp_ssl.c"
        ],
        "message": "Added support for ext/openssl",
        "before_after_code_files": [
          "ext/openssl/openssl.c||ext/openssl/openssl.c",
          "ext/openssl/xp_ssl.c||ext/openssl/xp_ssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/openssl/openssl.c||ext/openssl/openssl.c"
          ],
          "candidate": [
            "ext/openssl/openssl.c||ext/openssl/openssl.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/openssl/openssl.c||ext/openssl/openssl.c": [
          "File: ext/openssl/openssl.c -> ext/openssl/openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "546: {",
          "547:  EVP_PKEY *pkey = (EVP_PKEY *)rsrc->ptr;",
          "",
          "[Removed Lines]",
          "545: static void php_pkey_free(zend_rsrc_list_entry *rsrc TSRMLS_DC)",
          "",
          "[Added Lines]",
          "545: static void php_pkey_free(zend_resource *rsrc TSRMLS_DC)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "551:  EVP_PKEY_free(pkey);",
          "552: }",
          "555: {",
          "556:  X509 *x509 = (X509 *)rsrc->ptr;",
          "557:  X509_free(x509);",
          "558: }",
          "561: {",
          "562:  X509_REQ * csr = (X509_REQ*)rsrc->ptr;",
          "563:  X509_REQ_free(csr);",
          "",
          "[Removed Lines]",
          "554: static void php_x509_free(zend_rsrc_list_entry *rsrc TSRMLS_DC)",
          "560: static void php_csr_free(zend_rsrc_list_entry *rsrc TSRMLS_DC)",
          "",
          "[Added Lines]",
          "554: static void php_x509_free(zend_resource *rsrc TSRMLS_DC)",
          "560: static void php_csr_free(zend_resource *rsrc TSRMLS_DC)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "615: };",
          "620: static int php_openssl_is_private_key(EVP_PKEY* pkey TSRMLS_DC);",
          "621: static X509_STORE * setup_verify(zval * calist TSRMLS_DC);",
          "622: static STACK_OF(X509) * load_all_certs_from_file(char *certfile);",
          "624: static EVP_PKEY * php_openssl_generate_private_key(struct php_x509_request * req TSRMLS_DC);",
          "627: {",
          "630:  int i;",
          "631:  char *sname;",
          "632:  int nid;",
          "",
          "[Removed Lines]",
          "618: static X509 * php_openssl_x509_from_zval(zval ** val, int makeresource, long * resourceval TSRMLS_DC);",
          "619: static EVP_PKEY * php_openssl_evp_from_zval(zval ** val, int public_key, char * passphrase, int makeresource, long * resourceval TSRMLS_DC);",
          "623: static X509_REQ * php_openssl_csr_from_zval(zval ** val, int makeresource, long * resourceval TSRMLS_DC);",
          "628:  zval **data;",
          "629:  zval *subitem, *subentries;",
          "",
          "[Added Lines]",
          "618: static X509 * php_openssl_x509_from_zval(zval * val, int makeresource, zend_resource **resourceval TSRMLS_DC);",
          "619: static EVP_PKEY * php_openssl_evp_from_zval(zval * val, int public_key, char * passphrase, int makeresource, zend_resource **resourceval TSRMLS_DC);",
          "623: static X509_REQ * php_openssl_csr_from_zval(zval * val, int makeresource, zend_resource ** resourceval TSRMLS_DC);",
          "628:  zval *data;",
          "629:  zval subitem, tmp;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "635:  ASN1_OBJECT * obj;",
          "637:  if (key != NULL) {",
          "640:  } else {",
          "642:  }",
          "644:  for (i = 0; i < X509_NAME_entry_count(name); i++) {",
          "",
          "[Removed Lines]",
          "638:   MAKE_STD_ZVAL(subitem);",
          "639:   array_init(subitem);",
          "641:   subitem = val;",
          "",
          "[Added Lines]",
          "638:   array_init(&subitem);",
          "640:   ZVAL_COPY_VALUE(&subitem, val);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "665:   }",
          "667:   if (to_add_len != -1) {",
          "678:     }",
          "679:    } else {",
          "681:    }",
          "682:   }",
          "683:  }",
          "684:  if (key != NULL) {",
          "686:  }",
          "687: }",
          "",
          "[Removed Lines]",
          "668:    if (zend_hash_find(Z_ARRVAL_P(subitem), sname, strlen(sname)+1, (void**)&data) == SUCCESS) {",
          "669:     if (Z_TYPE_PP(data) == IS_ARRAY) {",
          "670:      subentries = *data;",
          "671:      add_next_index_stringl(subentries, (char *)to_add, to_add_len);",
          "672:     } else if (Z_TYPE_PP(data) == IS_STRING) {",
          "673:      MAKE_STD_ZVAL(subentries);",
          "674:      array_init(subentries);",
          "675:      add_next_index_stringl(subentries, Z_STRVAL_PP(data), Z_STRLEN_PP(data));",
          "676:      add_next_index_stringl(subentries, (char *)to_add, to_add_len);",
          "677:      zend_hash_update(Z_ARRVAL_P(subitem), sname, strlen(sname)+1, &subentries, sizeof(zval*), NULL);",
          "680:     add_assoc_stringl(subitem, sname, (char *)to_add, to_add_len);",
          "685:   zend_hash_update(HASH_OF(val), key, strlen(key) + 1, (void *)&subitem, sizeof(subitem), NULL);",
          "",
          "[Added Lines]",
          "667:    if ((data = zend_hash_str_find(Z_ARRVAL(subitem), sname, strlen(sname))) != NULL) {",
          "668:     if (Z_TYPE_P(data) == IS_ARRAY) {",
          "669:      add_next_index_stringl(data, (char *)to_add, to_add_len);",
          "670:     } else if (Z_TYPE_P(data) == IS_STRING) {",
          "671:      array_init(&tmp);",
          "672:      add_next_index_str(&tmp, STR_COPY(Z_STR_P(data)));",
          "673:      add_next_index_stringl(&tmp, (char *)to_add, to_add_len);",
          "674:      zend_hash_str_update(Z_ARRVAL(subitem), sname, strlen(sname), &tmp);",
          "677:     add_assoc_stringl(&subitem, sname, (char *)to_add, to_add_len);",
          "682:   zend_hash_str_update(HASH_OF(val), key, strlen(key), &subitem);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "829:    req->config_filename, req->var, req->req_config TSRMLS_CC) == FAILURE) return FAILURE",
          "831: #define SET_OPTIONAL_STRING_ARG(key, varname, defval) \\",
          "834:  else \\",
          "835:   varname = defval",
          "837: #define SET_OPTIONAL_LONG_ARG(key, varname, defval) \\",
          "840:  else \\",
          "841:   varname = defval",
          "",
          "[Removed Lines]",
          "832:  if (optional_args && zend_hash_find(Z_ARRVAL_P(optional_args), key, sizeof(key), (void**)&item) == SUCCESS) \\",
          "833:   varname = Z_STRVAL_PP(item); \\",
          "838:  if (optional_args && zend_hash_find(Z_ARRVAL_P(optional_args), key, sizeof(key), (void**)&item) == SUCCESS) \\",
          "839:   varname = Z_LVAL_PP(item); \\",
          "",
          "[Added Lines]",
          "829:   if (optional_args && (item = zend_hash_str_find(Z_ARRVAL_P(optional_args), key, sizeof(key)-1)) != NULL) \\",
          "830:   varname = Z_STRVAL_P(item); \\",
          "835:  if (optional_args && (item = zend_hash_str_find(Z_ARRVAL_P(optional_args), key, sizeof(key)-1)) != NULL) \\",
          "836:   varname = Z_LVAL_P(item); \\",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "848: {",
          "849:  char * str;",
          "852:  SET_OPTIONAL_STRING_ARG(\"config\", req->config_filename, default_ssl_conf_filename);",
          "853:  SET_OPTIONAL_STRING_ARG(\"config_section_name\", req->section_name, \"req\");",
          "",
          "[Removed Lines]",
          "850:  zval ** item;",
          "",
          "[Added Lines]",
          "847:  zval * item;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "882:  SET_OPTIONAL_LONG_ARG(\"private_key_type\", req->priv_key_type, OPENSSL_KEYTYPE_DEFAULT);",
          "886:  } else {",
          "887:   str = CONF_get_string(req->req_config, req->section_name, \"encrypt_rsa_key\");",
          "888:   if (str == NULL) {",
          "",
          "[Removed Lines]",
          "884:  if (optional_args && zend_hash_find(Z_ARRVAL_P(optional_args), \"encrypt_key\", sizeof(\"encrypt_key\"), (void**)&item) == SUCCESS) {",
          "885:   req->priv_key_encrypt = Z_BVAL_PP(item);",
          "",
          "[Added Lines]",
          "881:  if (optional_args && (item = zend_hash_str_find(Z_ARRVAL_P(optional_args), \"encrypt_key\", sizeof(\"encrypt_key\")-1)) != NULL) {",
          "882:   req->priv_key_encrypt = Z_TYPE_P(item) == IS_TRUE ? 1 : 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "895:   }",
          "896:  }",
          "900:   const EVP_CIPHER* cipher = php_openssl_get_evp_cipher_from_algo(cipher_algo);",
          "901:   if (cipher == NULL) {",
          "902:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Unknown cipher algorithm for private key.\");",
          "",
          "[Removed Lines]",
          "898:  if (req->priv_key_encrypt && optional_args && zend_hash_find(Z_ARRVAL_P(optional_args), \"encrypt_key_cipher\", sizeof(\"encrypt_key_cipher\"), (void**)&item) == SUCCESS) {",
          "899:   long cipher_algo = Z_LVAL_PP(item);",
          "",
          "[Added Lines]",
          "895:  if (req->priv_key_encrypt && optional_args && (item = zend_hash_str_find(Z_ARRVAL_P(optional_args), \"encrypt_key_cipher\", sizeof(\"encrypt_key_cipher\")-1)) != NULL) {",
          "896:   long cipher_algo = Z_LVAL_P(item);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1292: {",
          "1293:  array_init(return_value);",
          "1301:  add_assoc_string(return_value, \"ini_cafile\",",
          "1303:  add_assoc_string(return_value, \"ini_capath\",",
          "1305: }",
          "",
          "[Removed Lines]",
          "1295:  add_assoc_string(return_value, \"default_cert_file\", (char *) X509_get_default_cert_file(), 1);",
          "1296:  add_assoc_string(return_value, \"default_cert_file_env\", (char *) X509_get_default_cert_file_env(), 1);",
          "1297:  add_assoc_string(return_value, \"default_cert_dir\", (char *) X509_get_default_cert_dir(), 1);",
          "1298:  add_assoc_string(return_value, \"default_cert_dir_env\", (char *) X509_get_default_cert_dir_env(), 1);",
          "1299:  add_assoc_string(return_value, \"default_private_dir\", (char *) X509_get_default_private_dir(), 1);",
          "1300:  add_assoc_string(return_value, \"default_default_cert_area\", (char *) X509_get_default_cert_area(), 1);",
          "1302:   zend_ini_string(\"openssl.cafile\", sizeof(\"openssl.cafile\"), 0), 1);",
          "1304:   zend_ini_string(\"openssl.capath\", sizeof(\"openssl.capath\"), 0), 1);",
          "",
          "[Added Lines]",
          "1292:  add_assoc_string(return_value, \"default_cert_file\", (char *) X509_get_default_cert_file());",
          "1293:  add_assoc_string(return_value, \"default_cert_file_env\", (char *) X509_get_default_cert_file_env());",
          "1294:  add_assoc_string(return_value, \"default_cert_dir\", (char *) X509_get_default_cert_dir());",
          "1295:  add_assoc_string(return_value, \"default_cert_dir_env\", (char *) X509_get_default_cert_dir_env());",
          "1296:  add_assoc_string(return_value, \"default_private_dir\", (char *) X509_get_default_private_dir());",
          "1297:  add_assoc_string(return_value, \"default_default_cert_area\", (char *) X509_get_default_cert_area());",
          "1299:   zend_ini_string(\"openssl.cafile\", sizeof(\"openssl.cafile\")-1, 0));",
          "1301:   zend_ini_string(\"openssl.capath\", sizeof(\"openssl.capath\")-1, 0));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1315:  If you supply makeresource, the result will be registered as an x509 resource and",
          "1316:  it's value returned in makeresource.",
          "1319: {",
          "1320:  X509 *cert = NULL;",
          "1322:  if (resourceval) {",
          "1324:  }",
          "1327:   void * what;",
          "1328:   int type;",
          "",
          "[Removed Lines]",
          "1318: static X509 * php_openssl_x509_from_zval(zval ** val, int makeresource, long * resourceval TSRMLS_DC)",
          "1325:  if (Z_TYPE_PP(val) == IS_RESOURCE) {",
          "",
          "[Added Lines]",
          "1315: static X509 * php_openssl_x509_from_zval(zval * val, int makeresource, zend_resource **resourceval TSRMLS_DC)",
          "1322:  if (Z_TYPE_P(val) == IS_RESOURCE) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1333:   }",
          "1335:   if (resourceval) {",
          "1337:   }",
          "1338:   if (type == le_x509) {",
          "1339:    return (X509*)what;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1334:    Z_ADDREF_P(val);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1343:   return NULL;",
          "1344:  }",
          "1347:   return NULL;",
          "1348:  }",
          "1351:  convert_to_string_ex(val);",
          "1355:   BIO *in;",
          "1358:    return NULL;",
          "1359:   }",
          "1362:   if (in == NULL) {",
          "1363:    return NULL;",
          "1364:   }",
          "",
          "[Removed Lines]",
          "1346:  if (!(Z_TYPE_PP(val) == IS_STRING || Z_TYPE_PP(val) == IS_OBJECT)) {",
          "1353:  if (Z_STRLEN_PP(val) > 7 && memcmp(Z_STRVAL_PP(val), \"file://\", sizeof(\"file://\") - 1) == 0) {",
          "1357:   if (php_openssl_open_base_dir_chk(Z_STRVAL_PP(val) + (sizeof(\"file://\") - 1) TSRMLS_CC)) {",
          "1361:   in = BIO_new_file(Z_STRVAL_PP(val) + (sizeof(\"file://\") - 1), \"r\");",
          "",
          "[Added Lines]",
          "1344:  if (!(Z_TYPE_P(val) == IS_STRING || Z_TYPE_P(val) == IS_OBJECT)) {",
          "1351:  if (Z_STRLEN_P(val) > 7 && memcmp(Z_STRVAL_P(val), \"file://\", sizeof(\"file://\") - 1) == 0) {",
          "1355:   if (php_openssl_open_base_dir_chk(Z_STRVAL_P(val) + (sizeof(\"file://\") - 1) TSRMLS_CC)) {",
          "1359:   in = BIO_new_file(Z_STRVAL_P(val) + (sizeof(\"file://\") - 1), \"r\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1367:  } else {",
          "1368:   BIO *in;",
          "1371:   if (in == NULL) {",
          "1372:    return NULL;",
          "1373:   }",
          "",
          "[Removed Lines]",
          "1370:   in = BIO_new_mem_buf(Z_STRVAL_PP(val), Z_STRLEN_PP(val));",
          "",
          "[Added Lines]",
          "1368:   in = BIO_new_mem_buf(Z_STRVAL_P(val), Z_STRLEN_P(val));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1392: PHP_FUNCTION(openssl_x509_export_to_file)",
          "1393: {",
          "1394:  X509 * cert;",
          "1396:  zend_bool notext = 1;",
          "1397:  BIO * bio_out;",
          "1399:  char * filename;",
          "1400:  int filename_len;",
          "1403:   return;",
          "1404:  }",
          "1405:  RETVAL_FALSE;",
          "",
          "[Removed Lines]",
          "1395:  zval ** zcert;",
          "1398:  long certresource;",
          "1402:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"Zp|b\", &zcert, &filename, &filename_len, &notext) == FAILURE) {",
          "",
          "[Added Lines]",
          "1393:  zval * zcert;",
          "1396:  zend_resource *certresource;",
          "1400:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"zp|b\", &zcert, &filename, &filename_len, &notext) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1425:  } else {",
          "1426:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"error opening file %s\", filename);",
          "1427:  }",
          "1429:   X509_free(cert);",
          "1430:  }",
          "1431:  BIO_free(bio_out);",
          "",
          "[Removed Lines]",
          "1428:  if (certresource == -1 && cert) {",
          "",
          "[Added Lines]",
          "1426:  if (certresource == NULL && cert) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1438: PHP_FUNCTION(openssl_spki_new)",
          "1439: {",
          "1440:  int challenge_len;",
          "1443:  const char *spkac = \"SPKAC=\";",
          "1444:  long algo = OPENSSL_ALGO_MD5;",
          "",
          "[Removed Lines]",
          "1441:  char * challenge = NULL, * spkstr = NULL, * s = NULL;",
          "1442:  long keyresource = -1;",
          "",
          "[Added Lines]",
          "1439:  char * challenge = NULL, * spkstr = NULL;",
          "1440:  zend_string * s = NULL;",
          "1441:  zend_resource *keyresource = NULL;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1454:  }",
          "1455:  RETVAL_FALSE;",
          "1459:  if (pkey == NULL) {",
          "1460:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Unable to use supplied private key\");",
          "",
          "[Removed Lines]",
          "1457:  pkey = php_openssl_evp_from_zval(&zpkey, 0, challenge, 1, &keyresource TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1456:  pkey = php_openssl_evp_from_zval(zpkey, 0, challenge, 1, &keyresource TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1501:   goto cleanup;",
          "1502:  }",
          "1508:  goto cleanup;",
          "1510: cleanup:",
          "1513:   NETSCAPE_SPKI_free(spki);",
          "1514:  }",
          "1516:   EVP_PKEY_free(pkey);",
          "1517:  }",
          "1519:   efree(spkstr);",
          "1520:  }",
          "1523:   RETVAL_FALSE;",
          "1524:  }",
          "1528:  }",
          "1529: }",
          "",
          "[Removed Lines]",
          "1504:  s = emalloc(strlen(spkac) + strlen(spkstr) + 1);",
          "1505:  sprintf(s, \"%s%s\", spkac, spkstr);",
          "1507:  RETVAL_STRINGL(s, strlen(s), 0);",
          "1512:  if (keyresource == -1 && spki != NULL) {",
          "1515:  if (keyresource == -1 && pkey != NULL) {",
          "1518:  if (keyresource == -1 && spkstr != NULL) {",
          "1522:  if (strlen(s) <= 0) {",
          "1526:  if (keyresource == -1 && s != NULL) {",
          "1527:   efree(s);",
          "",
          "[Added Lines]",
          "1503:  s = STR_ALLOC(strlen(spkac) + strlen(spkstr), 0);",
          "1504:  sprintf(s->val, \"%s%s\", spkac, spkstr);",
          "1505:  s->len = strlen(s->val);",
          "1507:  RETVAL_STR(s);",
          "1512:  if (keyresource == NULL && spki != NULL) {",
          "1515:  if (keyresource == NULL && pkey != NULL) {",
          "1518:  if (keyresource == NULL && spkstr != NULL) {",
          "1522:  if (s->len <= 0) {",
          "1526:  if (keyresource == NULL && s != NULL) {",
          "1527:   STR_RELEASE(s);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1677:   goto cleanup;",
          "1678:  }",
          "1681:  goto cleanup;",
          "1683: cleanup:",
          "",
          "[Removed Lines]",
          "1680:  RETVAL_STRING((char *) ASN1_STRING_data(spki->spkac->challenge), 1);",
          "",
          "[Added Lines]",
          "1680:  RETVAL_STRING((char *) ASN1_STRING_data(spki->spkac->challenge));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1710: PHP_FUNCTION(openssl_x509_export)",
          "1711: {",
          "1712:  X509 * cert;",
          "1714:  zend_bool notext = 1;",
          "1715:  BIO * bio_out;",
          "1719:   return;",
          "1720:  }",
          "1721:  RETVAL_FALSE;",
          "1723:  cert = php_openssl_x509_from_zval(zcert, 0, &certresource TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "1713:  zval ** zcert, *zout;",
          "1716:  long certresource;",
          "1718:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"Zz|b\", &zcert, &zout, &notext) == FAILURE) {",
          "",
          "[Added Lines]",
          "1713:  zval * zcert, *zout;",
          "1716:  zend_resource *certresource;",
          "1718:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"zz|b\", &zcert, &zout, &notext) == FAILURE) {",
          "1721:  ZVAL_DEREF(zout);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1736:   zval_dtor(zout);",
          "1737:   BIO_get_mem_ptr(bio_out, &bio_buf);",
          "1740:   RETVAL_TRUE;",
          "1741:  }",
          "1744:   X509_free(cert);",
          "1745:  }",
          "1746:  BIO_free(bio_out);",
          "",
          "[Removed Lines]",
          "1738:   ZVAL_STRINGL(zout, bio_buf->data, bio_buf->length, 1);",
          "1743:  if (certresource == -1 && cert) {",
          "",
          "[Added Lines]",
          "1739:   ZVAL_STRINGL(zout, bio_buf->data, bio_buf->length);",
          "1744:  if (certresource == NULL && cert) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1806:   return method && php_x509_fingerprint_cmp(peer, method, Z_STRVAL_P(val) TSRMLS_CC) == 0;",
          "1807:  } else if (Z_TYPE_P(val) == IS_ARRAY) {",
          "1823:    ) {",
          "1824:     return 0;",
          "1825:    }",
          "1827:   return 1;",
          "1828:  }",
          "1829:  return 0;",
          "",
          "[Removed Lines]",
          "1808:   HashPosition pos;",
          "1809:   zval **current;",
          "1810:   char *key;",
          "1811:   uint key_len;",
          "1812:   ulong key_index;",
          "1814:   for (zend_hash_internal_pointer_reset_ex(Z_ARRVAL_P(val), &pos);",
          "1815:    zend_hash_get_current_data_ex(Z_ARRVAL_P(val), (void **)&current, &pos) == SUCCESS;",
          "1816:    zend_hash_move_forward_ex(Z_ARRVAL_P(val), &pos)",
          "1817:   ) {",
          "1818:    int key_type = zend_hash_get_current_key_ex(Z_ARRVAL_P(val), &key, &key_len, &key_index, 0, &pos);",
          "1820:    if (key_type == HASH_KEY_IS_STRING",
          "1821:     && Z_TYPE_PP(current) == IS_STRING",
          "1822:     && php_x509_fingerprint_cmp(peer, key, Z_STRVAL_PP(current) TSRMLS_CC) != 0",
          "1826:   }",
          "",
          "[Added Lines]",
          "1809:   zval *current;",
          "1810:   zend_string *key;",
          "1812:   ZEND_HASH_FOREACH_STR_KEY_VAL(Z_ARRVAL_P(val), key, current) {",
          "1813:    if (Z_TYPE_P(current) == IS_STRING",
          "1814:     && php_x509_fingerprint_cmp(peer, key->val, Z_STRVAL_P(current) TSRMLS_CC) != 0",
          "1818:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1832: PHP_FUNCTION(openssl_x509_fingerprint)",
          "1833: {",
          "1834:  X509 *cert;",
          "1837:  zend_bool raw_output = 0;",
          "1838:  char *method = \"sha1\";",
          "1839:  int method_len;",
          "",
          "[Removed Lines]",
          "1835:  zval **zcert;",
          "1836:  long certresource;",
          "",
          "[Added Lines]",
          "1827:  zval *zcert;",
          "1828:  zend_resource *certresource;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1841:  char *fingerprint;",
          "1842:  int fingerprint_len;",
          "1845:   return;",
          "1846:  }",
          "",
          "[Removed Lines]",
          "1844:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"Z|sb\", &zcert, &method, &method_len, &raw_output) == FAILURE) {",
          "",
          "[Added Lines]",
          "1836:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"z|sb\", &zcert, &method, &method_len, &raw_output) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1852:  }",
          "1854:  if (php_openssl_x509_fingerprint(cert, method, raw_output, &fingerprint, &fingerprint_len TSRMLS_CC) == SUCCESS) {",
          "1856:  } else {",
          "1857:   RETVAL_FALSE;",
          "1858:  }",
          "1861:   X509_free(cert);",
          "1862:  }",
          "1863: }",
          "",
          "[Removed Lines]",
          "1855:   RETVAL_STRINGL(fingerprint, fingerprint_len, 0);",
          "1860:  if (certresource == -1 && cert) {",
          "",
          "[Added Lines]",
          "1848:   RETVAL_STRINGL(fingerprint, fingerprint_len);",
          "1849:   efree(fingerprint);",
          "1854:  if (certresource == NULL && cert) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1867: PHP_FUNCTION(openssl_x509_check_private_key)",
          "1868: {",
          "1870:  X509 * cert = NULL;",
          "1871:  EVP_PKEY * key = NULL;",
          "1874:  RETVAL_FALSE;",
          "1877:   return;",
          "1878:  }",
          "1879:  cert = php_openssl_x509_from_zval(zcert, 0, &certresource TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "1869:  zval ** zcert, **zkey;",
          "1872:  long certresource = -1, keyresource = -1;",
          "1876:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ZZ\", &zcert, &zkey) == FAILURE) {",
          "",
          "[Added Lines]",
          "1863:  zval * zcert, *zkey;",
          "1866:  zend_resource *certresource = NULL, *keyresource = NULL;",
          "1870:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"zz\", &zcert, &zkey) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1885:   RETVAL_BOOL(X509_check_private_key(cert, key));",
          "1886:  }",
          "1889:   EVP_PKEY_free(key);",
          "1890:  }",
          "1892:   X509_free(cert);",
          "1893:  }",
          "1894: }",
          "",
          "[Removed Lines]",
          "1888:  if (keyresource == -1 && key) {",
          "1891:  if (certresource == -1 && cert) {",
          "",
          "[Added Lines]",
          "1882:  if (keyresource == NULL && key) {",
          "1885:  if (certresource == NULL && cert) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1967: PHP_FUNCTION(openssl_x509_parse)",
          "1968: {",
          "1970:  X509 * cert = NULL;",
          "1972:  int i;",
          "1973:  zend_bool useshortnames = 1;",
          "1974:  char * tmpstr;",
          "1976:  X509_EXTENSION *extension;",
          "1977:  char *extname;",
          "1978:  BIO  *bio_out;",
          "1979:  BUF_MEM *bio_buf;",
          "1980:  char buf[256];",
          "1983:   return;",
          "1984:  }",
          "1985:  cert = php_openssl_x509_from_zval(zcert, 0, &certresource TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "1969:  zval ** zcert;",
          "1971:  long certresource = -1;",
          "1975:  zval * subitem;",
          "1982:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"Z|b\", &zcert, &useshortnames) == FAILURE) {",
          "",
          "[Added Lines]",
          "1963:  zval * zcert;",
          "1965:  zend_resource *certresource = NULL;",
          "1969:  zval subitem;",
          "1976:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"z|b\", &zcert, &useshortnames) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2021:  add_assoc_string(return_value, \"signaturetype\", OBJ_nid2sn(X509_get_signature_type(cert)));",
          "2022:  add_assoc_string(return_value, \"signaturetypeLN\", OBJ_nid2ln(X509_get_signature_type(cert)));",
          "",
          "[Removed Lines]",
          "2024:  MAKE_STD_ZVAL(subitem);",
          "2025:  array_init(subitem);",
          "",
          "[Added Lines]",
          "2018:  array_init(&subitem);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2030:   int id, purpset;",
          "2031:   char * pname;",
          "2032:   X509_PURPOSE * purp;",
          "2038:   purp = X509_PURPOSE_get0(i);",
          "2039:   id = X509_PURPOSE_get_id(purp);",
          "2041:   purpset = X509_check_purpose(cert, id, 0);",
          "2044:   purpset = X509_check_purpose(cert, id, 1);",
          "2047:   pname = useshortnames ? X509_PURPOSE_get0_sname(purp) : X509_PURPOSE_get0_name(purp);",
          "2053:  }",
          "2060:  for (i = 0; i < X509_get_ext_count(cert); i++) {",
          "",
          "[Removed Lines]",
          "2033:   zval * subsub;",
          "2035:   MAKE_STD_ZVAL(subsub);",
          "2036:   array_init(subsub);",
          "2042:   add_index_bool(subsub, 0, purpset);",
          "2045:   add_index_bool(subsub, 1, purpset);",
          "2048:   add_index_string(subsub, 2, pname);",
          "2052:   add_index_zval(subitem, id, subsub);",
          "2054:  add_assoc_zval(return_value, \"purposes\", subitem);",
          "2056:  MAKE_STD_ZVAL(subitem);",
          "2057:  array_init(subitem);",
          "",
          "[Added Lines]",
          "2026:   zval subsub;",
          "2028:   array_init(&subsub);",
          "2034:   add_index_bool(&subsub, 0, purpset);",
          "2037:   add_index_bool(&subsub, 1, purpset);",
          "2040:   add_index_string(&subsub, 2, pname);",
          "2044:   add_index_zval(&subitem, id, &subsub);",
          "2046:  add_assoc_zval(return_value, \"purposes\", &subitem);",
          "2048:  array_init(&subitem);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2071:   if (nid == NID_subject_alt_name) {",
          "2072:    if (openssl_x509v3_subjectAltName(bio_out, extension) == 0) {",
          "2073:     BIO_get_mem_ptr(bio_out, &bio_buf);",
          "2075:    } else {",
          "2076:     zval_dtor(return_value);",
          "2078:      X509_free(cert);",
          "2079:     }",
          "2080:     BIO_free(bio_out);",
          "",
          "[Removed Lines]",
          "2074:     add_assoc_stringl(subitem, extname, bio_buf->data, bio_buf->length);",
          "2077:     if (certresource == -1 && cert) {",
          "",
          "[Added Lines]",
          "2065:     add_assoc_stringl(&subitem, extname, bio_buf->data, bio_buf->length);",
          "2068:     if (certresource == NULL && cert) {",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2083:   }",
          "2084:   else if (X509V3_EXT_print(bio_out, extension, 0, 0)) {",
          "2085:    BIO_get_mem_ptr(bio_out, &bio_buf);",
          "2087:   } else {",
          "2089:   }",
          "2090:   BIO_free(bio_out);",
          "2091:  }",
          "2095:   X509_free(cert);",
          "2096:  }",
          "2097: }",
          "",
          "[Removed Lines]",
          "2086:    add_assoc_stringl(subitem, extname, bio_buf->data, bio_buf->length);",
          "2088:    add_assoc_asn1_string(subitem, extname, X509_EXTENSION_get_data(extension));",
          "2092:  add_assoc_zval(return_value, \"extensions\", subitem);",
          "2094:  if (certresource == -1 && cert) {",
          "",
          "[Added Lines]",
          "2077:    add_assoc_stringl(&subitem, extname, bio_buf->data, bio_buf->length);",
          "2079:    add_assoc_asn1_string(&subitem, extname, X509_EXTENSION_get_data(extension));",
          "2083:  add_assoc_zval(return_value, \"extensions\", &subitem);",
          "2085:  if (certresource == NULL && cert) {",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2180: PHP_FUNCTION(openssl_x509_checkpurpose)",
          "2181: {",
          "2183:  X509_STORE * cainfo = NULL;",
          "2184:  X509 * cert = NULL;",
          "2186:  STACK_OF(X509) * untrustedchain = NULL;",
          "2187:  long purpose;",
          "2188:  char * untrusted = NULL;",
          "2189:  int untrusted_len = 0, ret;",
          "2192:   return;",
          "2193:  }",
          "",
          "[Removed Lines]",
          "2182:  zval ** zcert, * zcainfo = NULL;",
          "2185:  long certresource = -1;",
          "2191:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"Zl|a!s\", &zcert, &purpose, &zcainfo, &untrusted, &untrusted_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "2173:  zval * zcert, * zcainfo = NULL;",
          "2176:  zend_resource *certresource = NULL;",
          "2182:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"zl|a!s\", &zcert, &purpose, &zcainfo, &untrusted, &untrusted_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2218:  }",
          "2220: clean_exit:",
          "2222:   X509_free(cert);",
          "2223:  }",
          "2224:  if (cainfo) {",
          "",
          "[Removed Lines]",
          "2221:  if (certresource == 1 && cert) {",
          "",
          "[Added Lines]",
          "2212:  if (certresource == NULL && cert) {",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2238: {",
          "2239:  X509_STORE *store;",
          "2240:  X509_LOOKUP * dir_lookup, * file_lookup;",
          "2242:  int ndirs = 0, nfiles = 0;",
          "2244:  store = X509_STORE_new();",
          "",
          "[Removed Lines]",
          "2241:  HashPosition pos;",
          "",
          "[Added Lines]",
          "2233:  zval * item;",
          "2234:  struct stat sb;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2248:  }",
          "2250:  if (calist && (Z_TYPE_P(calist) == IS_ARRAY)) {",
          "2259:    convert_to_string_ex(item);",
          "2263:     continue;",
          "2264:    }",
          "2266:    if ((sb.st_mode & S_IFREG) == S_IFREG) {",
          "2267:     file_lookup = X509_STORE_add_lookup(store, X509_LOOKUP_file());",
          "2270:     } else {",
          "2271:      nfiles++;",
          "2272:     }",
          "2273:     file_lookup = NULL;",
          "2274:    } else {",
          "2275:     dir_lookup = X509_STORE_add_lookup(store, X509_LOOKUP_hash_dir());",
          "2278:     } else {",
          "2279:      ndirs++;",
          "2280:     }",
          "2281:     dir_lookup = NULL;",
          "2282:    }",
          "2284:  }",
          "2285:  if (nfiles == 0) {",
          "2286:   file_lookup = X509_STORE_add_lookup(store, X509_LOOKUP_file());",
          "",
          "[Removed Lines]",
          "2251:   zend_hash_internal_pointer_reset_ex(HASH_OF(calist), &pos);",
          "2252:   for (;; zend_hash_move_forward_ex(HASH_OF(calist), &pos)) {",
          "2253:    zval ** item;",
          "2254:    struct stat sb;",
          "2256:    if (zend_hash_get_current_data_ex(HASH_OF(calist), (void**)&item, &pos) == FAILURE) {",
          "2257:     break;",
          "2258:    }",
          "2261:    if (VCWD_STAT(Z_STRVAL_PP(item), &sb) == -1) {",
          "2262:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"unable to stat %s\", Z_STRVAL_PP(item));",
          "2268:     if (file_lookup == NULL || !X509_LOOKUP_load_file(file_lookup, Z_STRVAL_PP(item), X509_FILETYPE_PEM)) {",
          "2269:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"error loading file %s\", Z_STRVAL_PP(item));",
          "2276:     if (dir_lookup == NULL || !X509_LOOKUP_add_dir(dir_lookup, Z_STRVAL_PP(item), X509_FILETYPE_PEM)) {",
          "2277:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"error loading directory %s\", Z_STRVAL_PP(item));",
          "2283:   }",
          "",
          "[Added Lines]",
          "2243:   ZEND_HASH_FOREACH_VAL(HASH_OF(calist), item) {",
          "2246:    if (VCWD_STAT(Z_STRVAL_P(item), &sb) == -1) {",
          "2247:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"unable to stat %s\", Z_STRVAL_P(item));",
          "2253:     if (file_lookup == NULL || !X509_LOOKUP_load_file(file_lookup, Z_STRVAL_P(item), X509_FILETYPE_PEM)) {",
          "2254:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"error loading file %s\", Z_STRVAL_P(item));",
          "2261:     if (dir_lookup == NULL || !X509_LOOKUP_add_dir(dir_lookup, Z_STRVAL_P(item), X509_FILETYPE_PEM)) {",
          "2262:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"error loading directory %s\", Z_STRVAL_P(item));",
          "2268:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2303: PHP_FUNCTION(openssl_x509_read)",
          "2304: {",
          "2306:  X509 *x509;",
          "2309:   return;",
          "2310:  }",
          "2314:  if (x509 == NULL) {",
          "2315:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"supplied parameter cannot be coerced into an X509 certificate!\");",
          "",
          "[Removed Lines]",
          "2305:  zval **cert;",
          "2308:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"Z\", &cert) == FAILURE) {",
          "2311:  Z_TYPE_P(return_value) = IS_RESOURCE;",
          "2312:  x509 = php_openssl_x509_from_zval(cert, 1, &Z_LVAL_P(return_value) TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2290:  zval *cert;",
          "2292:  zend_resource *res;",
          "2294:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"z\", &cert) == FAILURE) {",
          "2297:  x509 = php_openssl_x509_from_zval(cert, 1, &res TSRMLS_CC);",
          "2298:  ZVAL_RES(return_value, res);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2328:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"r\", &x509) == FAILURE) {",
          "2329:   return;",
          "2330:  }",
          "2333: }",
          "",
          "[Removed Lines]",
          "2331:  ZEND_FETCH_RESOURCE(cert, X509 *, &x509, -1, \"OpenSSL X.509\", le_x509);",
          "2332:  zend_list_delete(Z_LVAL_P(x509));",
          "",
          "[Added Lines]",
          "2317:  ZEND_FETCH_RESOURCE(cert, X509 *, x509, -1, \"OpenSSL X.509\", le_x509);",
          "2318:  zend_list_close(Z_RES_P(x509));",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2347: }",
          "2351: {",
          "2354:  STACK_OF(X509) * sk = NULL;",
          "2355:     X509 * cert;",
          "2358:  sk = sk_X509_new_null();",
          "2365:    cert = php_openssl_x509_from_zval(zcertval, 0, &certresource TSRMLS_CC);",
          "2366:    if (cert == NULL) {",
          "2367:     goto clean_exit;",
          "2368:    }",
          "2371:     cert = X509_dup(cert);",
          "2373:     if (cert == NULL) {",
          "",
          "[Removed Lines]",
          "2352:  HashPosition hpos;",
          "2353:  zval ** zcertval;",
          "2356:     long certresource;",
          "2361:  if (Z_TYPE_PP(zcerts) == IS_ARRAY) {",
          "2362:   zend_hash_internal_pointer_reset_ex(HASH_OF(*zcerts), &hpos);",
          "2363:   while(zend_hash_get_current_data_ex(HASH_OF(*zcerts), (void**)&zcertval, &hpos) == SUCCESS) {",
          "2370:    if (certresource != -1) {",
          "",
          "[Added Lines]",
          "2338:  zval * zcertval;",
          "2341:     zend_resource *certresource;",
          "2346:  if (Z_TYPE_P(zcerts) == IS_ARRAY) {",
          "2347:   ZEND_HASH_FOREACH_VAL(HASH_OF(zcerts), zcertval) {",
          "2353:    if (certresource != NULL) {",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2377:    }",
          "2378:    sk_X509_push(sk, cert);",
          "2382:  } else {",
          "2384:   cert = php_openssl_x509_from_zval(zcerts, 0, &certresource TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "2380:    zend_hash_move_forward_ex(HASH_OF(*zcerts), &hpos);",
          "2381:   }",
          "",
          "[Added Lines]",
          "2362:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2387:    goto clean_exit;",
          "2388:   }",
          "2391:    cert = X509_dup(cert);",
          "2392:    if (cert == NULL) {",
          "2393:     goto clean_exit;",
          "",
          "[Removed Lines]",
          "2390:   if (certresource != -1) {",
          "",
          "[Added Lines]",
          "2371:   if (certresource != NULL) {",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2413:  int filename_len;",
          "2414:  char * pass;",
          "2415:  int pass_len;",
          "2417:  EVP_PKEY *priv_key = NULL;",
          "2420:  STACK_OF(X509) *ca = NULL;",
          "2423:   return;",
          "2425:  RETVAL_FALSE;",
          "",
          "[Removed Lines]",
          "2416:  zval **zcert = NULL, *zpkey = NULL, *args = NULL;",
          "2418:  long certresource, keyresource;",
          "2419:  zval ** item;",
          "2422:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"Zpzs|a\", &zcert, &filename, &filename_len, &zpkey, &pass, &pass_len, &args) == FAILURE)",
          "",
          "[Added Lines]",
          "2397:  zval *zcert = NULL, *zpkey = NULL, *args = NULL;",
          "2399:  zend_resource *certresource, *keyresource;",
          "2400:  zval * item;",
          "2403:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"zpzs|a\", &zcert, &filename, &filename_len, &zpkey, &pass, &pass_len, &args) == FAILURE)",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2429:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"cannot get cert from parameter 1\");",
          "2430:   return;",
          "2431:  }",
          "2433:  if (priv_key == NULL) {",
          "2434:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"cannot get private key from parameter 3\");",
          "2435:   goto cleanup;",
          "",
          "[Removed Lines]",
          "2432:  priv_key = php_openssl_evp_from_zval(&zpkey, 0, \"\", 1, &keyresource TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2413:  priv_key = php_openssl_evp_from_zval(zpkey, 0, \"\", 1, &keyresource TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2443:  }",
          "2449:     keypbe (default 3DES)",
          "2450:     friendly_caname",
          "2454:   ca = php_array_to_X509_sk(item TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "2446:  if (args && zend_hash_find(Z_ARRVAL_P(args), \"friendly_name\", sizeof(\"friendly_name\"), (void**)&item) == SUCCESS)",
          "2447:   friendly_name = Z_STRVAL_PP(item);",
          "2453:  if (args && zend_hash_find(Z_ARRVAL_P(args), \"extracerts\", sizeof(\"extracerts\"), (void**)&item) == SUCCESS)",
          "",
          "[Added Lines]",
          "2427:  if (args && (item = zend_hash_str_find(Z_ARRVAL_P(args), \"friendly_name\", sizeof(\"friendly_name\")-1)) != NULL)",
          "2428:   friendly_name = Z_STRVAL_P(item);",
          "2434:  if (args && (item = zend_hash_str_find(Z_ARRVAL_P(args), \"extracerts\", sizeof(\"extracerts\")-1)) != NULL)",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2476: cleanup:",
          "2479:   EVP_PKEY_free(priv_key);",
          "2480:  }",
          "2482:   X509_free(cert);",
          "2483:  }",
          "2484: }",
          "",
          "[Removed Lines]",
          "2478:  if (keyresource == -1 && priv_key) {",
          "2481:  if (certresource == -1 && cert) {",
          "",
          "[Added Lines]",
          "2459:  if (keyresource == NULL && priv_key) {",
          "2462:  if (certresource == NULL && cert) {",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2493:  PKCS12 * p12 = NULL;",
          "2494:  zval * zcert = NULL, *zout = NULL, *zpkey, *args = NULL;",
          "2495:  EVP_PKEY *priv_key = NULL;",
          "2497:  char * pass;",
          "2498:  int pass_len;",
          "2499:  char * friendly_name = NULL;",
          "2501:  STACK_OF(X509) *ca = NULL;",
          "2503:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"zzzs|a\", &zcert, &zout, &zpkey, &pass, &pass_len, &args) == FAILURE)",
          "2504:   return;",
          "2506:  RETVAL_FALSE;",
          "2509:  if (cert == NULL) {",
          "2510:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"cannot get cert from parameter 1\");",
          "2511:   return;",
          "2512:  }",
          "2514:  if (priv_key == NULL) {",
          "2515:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"cannot get private key from parameter 3\");",
          "2516:   goto cleanup;",
          "",
          "[Removed Lines]",
          "2496:  long certresource, keyresource;",
          "2500:  zval ** item;",
          "2508:  cert = php_openssl_x509_from_zval(&zcert, 0, &certresource TSRMLS_CC);",
          "2513:  priv_key = php_openssl_evp_from_zval(&zpkey, 0, \"\", 1, &keyresource TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2477:  zend_resource *certresource, *keyresource;",
          "2481:  zval * item;",
          "2487:  ZVAL_DEREF(zout);",
          "2490:  cert = php_openssl_x509_from_zval(zcert, 0, &certresource TSRMLS_CC);",
          "2495:  priv_key = php_openssl_evp_from_zval(zpkey, 0, \"\", 1, &keyresource TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2521:  }",
          "2528:   ca = php_array_to_X509_sk(item TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "2524:  if (args && zend_hash_find(Z_ARRVAL_P(args), \"friendly_name\", sizeof(\"friendly_name\"), (void**)&item) == SUCCESS)",
          "2525:   friendly_name = Z_STRVAL_PP(item);",
          "2527:  if (args && zend_hash_find(Z_ARRVAL_P(args), \"extracerts\", sizeof(\"extracerts\"), (void**)&item) == SUCCESS)",
          "",
          "[Added Lines]",
          "2506:  if (args && (item = zend_hash_str_find(Z_ARRVAL_P(args), \"friendly_name\", sizeof(\"friendly_name\")-1)) != NULL)",
          "2507:   friendly_name = Z_STRVAL_P(item);",
          "2509:  if (args && (item = zend_hash_str_find(Z_ARRVAL_P(args), \"extracerts\", sizeof(\"extracerts\")-1)) != NULL)",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2537:   zval_dtor(zout);",
          "2538:   BIO_get_mem_ptr(bio_out, &bio_buf);",
          "2541:   RETVAL_TRUE;",
          "2542:  }",
          "",
          "[Removed Lines]",
          "2539:   ZVAL_STRINGL(zout, bio_buf->data, bio_buf->length, 1);",
          "",
          "[Added Lines]",
          "2521:   ZVAL_STRINGL(zout, bio_buf->data, bio_buf->length);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2548: cleanup:",
          "2551:   EVP_PKEY_free(priv_key);",
          "2552:  }",
          "2554:   X509_free(cert);",
          "2555:  }",
          "2556: }",
          "",
          "[Removed Lines]",
          "2550:  if (keyresource == -1 && priv_key) {",
          "2553:  if (certresource == -1 && cert) {",
          "",
          "[Added Lines]",
          "2532:  if (keyresource == NULL && priv_key) {",
          "2535:  if (certresource == NULL && cert) {",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2561: PHP_FUNCTION(openssl_pkcs12_read)",
          "2562: {",
          "2564:  char *pass, *zp12;",
          "2565:  int pass_len, zp12_len;",
          "2566:  PKCS12 * p12 = NULL;",
          "",
          "[Removed Lines]",
          "2563:  zval *zout = NULL, *zextracerts, *zcert, *zpkey;",
          "",
          "[Added Lines]",
          "2545:  zval *zout = NULL, zextracerts, zcert, zpkey;",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2573:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"szs\", &zp12, &zp12_len, &zout, &pass, &pass_len) == FAILURE)",
          "2574:   return;",
          "2576:  RETVAL_FALSE;",
          "2578:  bio_in = BIO_new(BIO_s_mem());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2557:  ZVAL_DEREF(zout);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2591:    if (PEM_write_bio_X509(bio_out, cert)) {",
          "2592:     BUF_MEM *bio_buf;",
          "2593:     BIO_get_mem_ptr(bio_out, &bio_buf);",
          "2597:    }",
          "2598:    BIO_free(bio_out);",
          "",
          "[Removed Lines]",
          "2594:     MAKE_STD_ZVAL(zcert);",
          "2595:     ZVAL_STRINGL(zcert, bio_buf->data, bio_buf->length, 1);",
          "2596:     add_assoc_zval(zout, \"cert\", zcert);",
          "",
          "[Added Lines]",
          "2576:     ZVAL_STRINGL(&zcert, bio_buf->data, bio_buf->length);",
          "2577:     add_assoc_zval(zout, \"cert\", &zcert);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2601:    if (PEM_write_bio_PrivateKey(bio_out, pkey, NULL, NULL, 0, 0, NULL)) {",
          "2602:     BUF_MEM *bio_buf;",
          "2603:     BIO_get_mem_ptr(bio_out, &bio_buf);",
          "2607:    }",
          "2608:    BIO_free(bio_out);",
          "2613:    for (i=0;;i++) {",
          "2615:     X509* aCA = sk_X509_pop(ca);",
          "2616:     if (!aCA) break;",
          "",
          "[Removed Lines]",
          "2604:     MAKE_STD_ZVAL(zpkey);",
          "2605:     ZVAL_STRINGL(zpkey, bio_buf->data, bio_buf->length, 1);",
          "2606:     add_assoc_zval(zout, \"pkey\", zpkey);",
          "2610:    MAKE_STD_ZVAL(zextracerts);",
          "2611:    array_init(zextracerts);",
          "2614:     zval * zextracert;",
          "",
          "[Added Lines]",
          "2585:     ZVAL_STRINGL(&zpkey, bio_buf->data, bio_buf->length);",
          "2586:     add_assoc_zval(zout, \"pkey\", &zpkey);",
          "2590:    array_init(&zextracerts);",
          "2593:     zval zextracert;",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2619:     if (PEM_write_bio_X509(bio_out, aCA)) {",
          "2620:      BUF_MEM *bio_buf;",
          "2621:      BIO_get_mem_ptr(bio_out, &bio_buf);",
          "2626:     }",
          "2627:     BIO_free(bio_out);",
          "",
          "[Removed Lines]",
          "2622:      MAKE_STD_ZVAL(zextracert);",
          "2623:      ZVAL_STRINGL(zextracert, bio_buf->data, bio_buf->length, 1);",
          "2624:      add_index_zval(zextracerts, i, zextracert);",
          "",
          "[Added Lines]",
          "2601:      ZVAL_STRINGL(&zextracert, bio_buf->data, bio_buf->length);",
          "2602:      add_index_zval(&zextracerts, i, &zextracert);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2630:    }",
          "2631:    if(ca) {",
          "2632:     sk_X509_free(ca);",
          "2634:    } else {",
          "2636:    }",
          "2638:    RETVAL_TRUE;",
          "",
          "[Removed Lines]",
          "2633:     add_assoc_zval(zout, \"extracerts\", zextracerts);",
          "2635:     zval_dtor(zextracerts);",
          "",
          "[Added Lines]",
          "2611:     add_assoc_zval(zout, \"extracerts\", &zextracerts);",
          "2613:     zval_dtor(&zextracerts);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2685:   char * type;",
          "2686:   CONF_VALUE * v;",
          "2687:   X509_NAME * subj;",
          "2691:   subj = X509_REQ_get_subject_name(csr);",
          "2703:    if (strindex) {",
          "2704:     int nid;",
          "2707:     if (nid != NID_undef) {",
          "2708:      if (!X509_NAME_add_entry_by_NID(subj, nid, MBSTRING_UTF8,",
          "2710:      {",
          "2711:       php_error_docref(NULL TSRMLS_CC, E_WARNING,",
          "2712:        \"dn: add_entry_by_NID %d -> %s (failed; check error\"",
          "2713:        \" queue and value of string_mask OpenSSL option \"",
          "2714:        \"if illegal characters are reported)\",",
          "2716:       return FAILURE;",
          "2717:      }",
          "2718:     } else {",
          "2720:     }",
          "2721:    }",
          "2726:   for(i = 0; i < sk_CONF_VALUE_num(dn_sk); i++) {",
          "",
          "[Removed Lines]",
          "2688:   HashPosition hpos;",
          "2689:   zval ** item;",
          "2693:   zend_hash_internal_pointer_reset_ex(HASH_OF(dn), &hpos);",
          "2694:   while(zend_hash_get_current_data_ex(HASH_OF(dn), (void**)&item, &hpos) == SUCCESS) {",
          "2695:    char * strindex = NULL;",
          "2696:    uint strindexlen = 0;",
          "2697:    ulong intindex;",
          "2699:    zend_hash_get_current_key_ex(HASH_OF(dn), &strindex, &strindexlen, &intindex, 0, &hpos);",
          "2701:    convert_to_string_ex(item);",
          "2706:     nid = OBJ_txt2nid(strindex);",
          "2709:         (unsigned char*)Z_STRVAL_PP(item), -1, -1, 0))",
          "2715:        nid, Z_STRVAL_PP(item));",
          "2719:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"dn: %s is not a recognized name\", strindex);",
          "2722:    zend_hash_move_forward_ex(HASH_OF(dn), &hpos);",
          "2723:   }",
          "",
          "[Added Lines]",
          "2666:   zval * item;",
          "2667:   zend_string * strindex = NULL;",
          "2671:   ZEND_HASH_FOREACH_STR_KEY_VAL(HASH_OF(dn), strindex, item) {",
          "2675:     convert_to_string_ex(item);",
          "2677:     nid = OBJ_txt2nid(strindex->val);",
          "2680:         (unsigned char*)Z_STRVAL_P(item), -1, -1, 0))",
          "2686:        nid, Z_STRVAL_P(item));",
          "2690:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"dn: %s is not a recognized name\", strindex->val);",
          "2693:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2771:    }",
          "2772:   }",
          "2773:   if (attribs) {",
          "2781:     convert_to_string_ex(item);",
          "2794:      }",
          "2795:     }",
          "2798:    for (i = 0; i < sk_CONF_VALUE_num(attr_sk); i++) {",
          "2799:     v = sk_CONF_VALUE_value(attr_sk, i);",
          "",
          "[Removed Lines]",
          "2774:    zend_hash_internal_pointer_reset_ex(HASH_OF(attribs), &hpos);",
          "2775:    while(zend_hash_get_current_data_ex(HASH_OF(attribs), (void**)&item, &hpos) == SUCCESS) {",
          "2776:     char *strindex = NULL;",
          "2777:     uint strindexlen;",
          "2778:     ulong intindex;",
          "2780:     zend_hash_get_current_key_ex(HASH_OF(attribs), &strindex, &strindexlen, &intindex, 0, &hpos);",
          "2783:     if (strindex) {",
          "2784:      int nid;",
          "2786:      nid = OBJ_txt2nid(strindex);",
          "2787:      if (nid != NID_undef) {",
          "2788:       if (!X509_NAME_add_entry_by_NID(subj, nid, MBSTRING_UTF8, (unsigned char*)Z_STRVAL_PP(item), -1, -1, 0)) {",
          "2789:        php_error_docref(NULL TSRMLS_CC, E_WARNING, \"attribs: add_entry_by_NID %d -> %s (failed)\", nid, Z_STRVAL_PP(item));",
          "2790:        return FAILURE;",
          "2791:       }",
          "2792:      } else {",
          "2793:       php_error_docref(NULL TSRMLS_CC, E_WARNING, \"dn: %s is not a recognized name\", strindex);",
          "2796:     zend_hash_move_forward_ex(HASH_OF(attribs), &hpos);",
          "2797:    }",
          "",
          "[Added Lines]",
          "2744:    ZEND_HASH_FOREACH_STR_KEY_VAL(HASH_OF(attribs), strindex, item) {",
          "2745:     int nid;",
          "2749:     nid = OBJ_txt2nid(strindex->val);",
          "2750:     if (nid != NID_undef) {",
          "2751:      if (!X509_NAME_add_entry_by_NID(subj, nid, MBSTRING_UTF8, (unsigned char*)Z_STRVAL_P(item), -1, -1, 0)) {",
          "2752:       php_error_docref(NULL TSRMLS_CC, E_WARNING, \"attribs: add_entry_by_NID %d -> %s (failed)\", nid, Z_STRVAL_P(item));",
          "2753:       return FAILURE;",
          "2755:     } else {",
          "2756:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"dn: %s is not a recognized name\", strindex->val);",
          "2758:    } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2824: {",
          "2825:  X509_REQ * csr = NULL;",
          "2826:  char * filename = NULL;",
          "2827:  BIO * in;",
          "2829:  if (resourceval) {",
          "2831:  }",
          "2833:   void * what;",
          "2834:   int type;",
          "2836:   what = zend_fetch_resource(val TSRMLS_CC, -1, \"OpenSSL X.509 CSR\", &type, 1, le_csr);",
          "2837:   if (what) {",
          "2838:    if (resourceval) {",
          "2840:    }",
          "2841:    return (X509_REQ*)what;",
          "2842:   }",
          "2843:   return NULL;",
          "2845:   return NULL;",
          "2846:  }",
          "2850:  }",
          "2851:  if (filename) {",
          "2852:   if (php_openssl_open_base_dir_chk(filename TSRMLS_CC)) {",
          "",
          "[Removed Lines]",
          "2823: static X509_REQ * php_openssl_csr_from_zval(zval ** val, int makeresource, long * resourceval TSRMLS_DC)",
          "2832:  if (Z_TYPE_PP(val) == IS_RESOURCE) {",
          "2844:  } else if (Z_TYPE_PP(val) != IS_STRING) {",
          "2848:  if (Z_STRLEN_PP(val) > 7 && memcmp(Z_STRVAL_PP(val), \"file://\", sizeof(\"file://\") - 1) == 0) {",
          "2849:   filename = Z_STRVAL_PP(val) + (sizeof(\"file://\") - 1);",
          "",
          "[Added Lines]",
          "2784: static X509_REQ * php_openssl_csr_from_zval(zval * val, int makeresource, zend_resource **resourceval TSRMLS_DC)",
          "2793:  if (Z_TYPE_P(val) == IS_RESOURCE) {",
          "2801:     Z_ADDREF_P(val);",
          "2806:  } else if (Z_TYPE_P(val) != IS_STRING) {",
          "2810:  if (Z_STRLEN_P(val) > 7 && memcmp(Z_STRVAL_P(val), \"file://\", sizeof(\"file://\") - 1) == 0) {",
          "2811:   filename = Z_STRVAL_P(val) + (sizeof(\"file://\") - 1);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2854:   }",
          "2855:   in = BIO_new_file(filename, \"r\");",
          "2856:  } else {",
          "2858:  }",
          "2859:  csr = PEM_read_bio_X509_REQ(in, NULL,NULL,NULL);",
          "2860:  BIO_free(in);",
          "",
          "[Removed Lines]",
          "2857:   in = BIO_new_mem_buf(Z_STRVAL_PP(val), Z_STRLEN_PP(val));",
          "",
          "[Added Lines]",
          "2819:   in = BIO_new_mem_buf(Z_STRVAL_P(val), Z_STRLEN_P(val));",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2872:  zend_bool notext = 1;",
          "2873:  char * filename = NULL; int filename_len;",
          "2874:  BIO * bio_out;",
          "2877:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"rp|b\", &zcsr, &filename, &filename_len, &notext) == FAILURE) {",
          "2878:   return;",
          "2879:  }",
          "2880:  RETVAL_FALSE;",
          "2883:  if (csr == NULL) {",
          "2884:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"cannot get CSR from parameter 1\");",
          "2885:   return;",
          "",
          "[Removed Lines]",
          "2875:  long csr_resource;",
          "2882:  csr = php_openssl_csr_from_zval(&zcsr, 0, &csr_resource TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2837:  zend_resource *csr_resource;",
          "2844:  csr = php_openssl_csr_from_zval(zcsr, 0, &csr_resource TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2900:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"error opening file %s\", filename);",
          "2901:  }",
          "2904:   X509_REQ_free(csr);",
          "2905:  }",
          "2906:  BIO_free(bio_out);",
          "",
          "[Removed Lines]",
          "2903:  if (csr_resource == -1 && csr) {",
          "",
          "[Added Lines]",
          "2865:  if (csr_resource == NULL && csr) {",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2915:  zval * zcsr = NULL, *zout=NULL;",
          "2916:  zend_bool notext = 1;",
          "2917:  BIO * bio_out;",
          "2921:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"rz|b\", &zcsr, &zout, &notext) == FAILURE) {",
          "2922:   return;",
          "2923:  }",
          "2924:  RETVAL_FALSE;",
          "2927:  if (csr == NULL) {",
          "2928:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"cannot get CSR from parameter 1\");",
          "2929:   return;",
          "",
          "[Removed Lines]",
          "2919:  long csr_resource;",
          "2926:  csr = php_openssl_csr_from_zval(&zcsr, 0, &csr_resource TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2880:  zend_resource *csr_resource;",
          "2885:  ZVAL_DEREF(zout);",
          "2888:  csr = php_openssl_csr_from_zval(zcsr, 0, &csr_resource TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2942:   BIO_get_mem_ptr(bio_out, &bio_buf);",
          "2943:   zval_dtor(zout);",
          "2946:   RETVAL_TRUE;",
          "2947:  }",
          "2950:   X509_REQ_free(csr);",
          "2951:  }",
          "2952:  BIO_free(bio_out);",
          "",
          "[Removed Lines]",
          "2944:   ZVAL_STRINGL(zout, bio_buf->data, bio_buf->length, 1);",
          "2949:  if (csr_resource == -1 && csr) {",
          "",
          "[Added Lines]",
          "2906:   ZVAL_STRINGL(zout, bio_buf->data, bio_buf->length);",
          "2911:  if (csr_resource == NULL && csr) {",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2958: PHP_FUNCTION(openssl_csr_sign)",
          "2959: {",
          "2961:  long num_days;",
          "2962:  long serial = 0L;",
          "2963:  X509 * cert = NULL, *new_cert = NULL;",
          "2964:  X509_REQ * csr;",
          "2965:  EVP_PKEY * key = NULL, *priv_key = NULL;",
          "2967:  int i;",
          "2968:  struct php_x509_request req;",
          "2971:   return;",
          "2973:  RETVAL_FALSE;",
          "",
          "[Removed Lines]",
          "2960:  zval ** zcert = NULL, **zcsr, **zpkey, *args = NULL;",
          "2966:  long csr_resource, certresource = 0, keyresource = -1;",
          "2970:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ZZ!Zl|a!l\", &zcsr, &zcert, &zpkey, &num_days, &args, &serial) == FAILURE)",
          "",
          "[Added Lines]",
          "2922:  zval * zcert = NULL, *zcsr, *zpkey, *args = NULL;",
          "2928:  zend_resource *csr_resource, *certresource = NULL, *keyresource = NULL;",
          "2932:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"zz!zl|a!l\", &zcsr, &zcert, &zpkey, &num_days, &args, &serial) == FAILURE)",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "3059:  }",
          "3063:  new_cert = NULL;",
          "3065: cleanup:",
          "",
          "[Removed Lines]",
          "3062:  RETVAL_RESOURCE(zend_list_insert(new_cert, le_x509 TSRMLS_CC));",
          "",
          "[Added Lines]",
          "3024:  zend_register_resource(return_value, new_cert, le_x509 TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "3069:  }",
          "3070:  PHP_SSL_REQ_DISPOSE(&req);",
          "3073:   EVP_PKEY_free(priv_key);",
          "3074:  }",
          "3075:  if (key) {",
          "3076:   EVP_PKEY_free(key);",
          "3077:  }",
          "3079:   X509_REQ_free(csr);",
          "3080:  }",
          "3082:   X509_free(cert);",
          "3083:  }",
          "3084:  if (new_cert) {",
          "",
          "[Removed Lines]",
          "3072:  if (keyresource == -1 && priv_key) {",
          "3078:  if (csr_resource == -1 && csr) {",
          "3081:  if (certresource == -1 && cert) {",
          "",
          "[Added Lines]",
          "3034:  if (keyresource == NULL && priv_key) {",
          "3040:  if (csr_resource == NULL && csr) {",
          "3043:  if (zcert && certresource == NULL && cert) {",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "3096:  zval * out_pkey;",
          "3097:  X509_REQ * csr = NULL;",
          "3098:  int we_made_the_key = 1;",
          "3101:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"az|a!a!\", &dn, &out_pkey, &args, &attribs) == FAILURE) {",
          "3102:   return;",
          "3103:  }",
          "3104:  RETVAL_FALSE;",
          "3106:  PHP_SSL_REQ_INIT(&req);",
          "",
          "[Removed Lines]",
          "3099:  long key_resource;",
          "",
          "[Added Lines]",
          "3061:  zend_resource *key_resource;",
          "3066:  ZVAL_DEREF(out_pkey);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "3108:  if (PHP_SSL_REQ_PARSE(&req, args) == SUCCESS) {",
          "3110:   if (Z_TYPE_P(out_pkey) != IS_NULL) {",
          "3112:    if (req.priv_key != NULL) {",
          "3113:     we_made_the_key = 0;",
          "3114:    }",
          "",
          "[Removed Lines]",
          "3111:    req.priv_key = php_openssl_evp_from_zval(&out_pkey, 0, NULL, 0, &key_resource TSRMLS_CC);",
          "",
          "[Added Lines]",
          "3074:    req.priv_key = php_openssl_evp_from_zval(out_pkey, 0, NULL, 0, &key_resource TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "3136:       RETVAL_TRUE;",
          "3138:       if (X509_REQ_sign(csr, req.priv_key, req.digest)) {",
          "3140:        csr = NULL;",
          "3141:       } else {",
          "3142:        php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Error signing request\");",
          "",
          "[Removed Lines]",
          "3139:        RETVAL_RESOURCE(zend_list_insert(csr, le_csr TSRMLS_CC));",
          "",
          "[Added Lines]",
          "3102:        zend_register_resource(return_value, csr, le_csr TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "3145:       if (we_made_the_key) {",
          "3147:        zval_dtor(out_pkey);",
          "3152:       }",
          "3153:      }",
          "",
          "[Removed Lines]",
          "3148:        ZVAL_RESOURCE(out_pkey, zend_list_insert(req.priv_key, le_key TSRMLS_CC));",
          "3150:       } else if (key_resource != -1) {",
          "",
          "[Added Lines]",
          "3111:        zend_register_resource(out_pkey, req.priv_key, le_key TSRMLS_CC);",
          "3113:       } else if (key_resource != NULL) {",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "3173: PHP_FUNCTION(openssl_csr_get_subject)",
          "3174: {",
          "3176:  zend_bool use_shortnames = 1;",
          "3178:  X509_NAME * subject;",
          "3179:  X509_REQ * csr;",
          "3182:   return;",
          "3183:  }",
          "",
          "[Removed Lines]",
          "3175:  zval ** zcsr;",
          "3177:  long csr_resource;",
          "3181:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"Z|b\", &zcsr, &use_shortnames) == FAILURE) {",
          "",
          "[Added Lines]",
          "3138:  zval * zcsr;",
          "3140:  zend_resource *csr_resource;",
          "3144:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"z|b\", &zcsr, &use_shortnames) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "3201: PHP_FUNCTION(openssl_csr_get_public_key)",
          "3202: {",
          "3204:  zend_bool use_shortnames = 1;",
          "3207:  X509_REQ * csr;",
          "3208:  EVP_PKEY *tpubkey;",
          "3211:   return;",
          "3212:  }",
          "",
          "[Removed Lines]",
          "3203:  zval ** zcsr;",
          "3205:  long csr_resource;",
          "3210:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"Z|b\", &zcsr, &use_shortnames) == FAILURE) {",
          "",
          "[Added Lines]",
          "3166:  zval * zcsr;",
          "3168:  zend_resource *csr_resource;",
          "3173:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"z|b\", &zcsr, &use_shortnames) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "3218:  }",
          "3220:  tpubkey=X509_REQ_get_pubkey(csr);",
          "3222:  return;",
          "3223: }",
          "",
          "[Removed Lines]",
          "3221:  RETVAL_RESOURCE(zend_list_insert(tpubkey, le_key TSRMLS_CC));",
          "",
          "[Added Lines]",
          "3184:  zend_register_resource(return_value, tpubkey, le_key TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "3240:  empty string rather than NULL for the passphrase - NULL causes a passphrase prompt to be emitted in",
          "3241:  the Apache error log!",
          "3244: {",
          "3245:  EVP_PKEY * key = NULL;",
          "3246:  X509 * cert = NULL;",
          "3247:  int free_cert = 0;",
          "3249:  char * filename = NULL;",
          "3250:  zval tmp;",
          "3254: #define TMP_CLEAN \\",
          "3255:  if (Z_TYPE(tmp) == IS_STRING) {\\",
          "",
          "[Removed Lines]",
          "3243: static EVP_PKEY * php_openssl_evp_from_zval(zval ** val, int public_key, char * passphrase, int makeresource, long * resourceval TSRMLS_DC)",
          "3248:  long cert_res = -1;",
          "3252:  Z_TYPE(tmp) = IS_NULL;",
          "",
          "[Added Lines]",
          "3206: static EVP_PKEY * php_openssl_evp_from_zval(zval * val, int public_key, char * passphrase, int makeresource, zend_resource **resourceval TSRMLS_DC)",
          "3211:  zend_resource *cert_res = NULL;",
          "3215:  ZVAL_NULL(&tmp);",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "3258:  return NULL;",
          "3260:  if (resourceval) {",
          "3262:  }",
          "3269:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"key array must be of the form array(0 => key, 1 => phrase)\");",
          "3270:    return NULL;",
          "3271:   }",
          "3275:   } else {",
          "3278:    convert_to_string(&tmp);",
          "3279:    passphrase = Z_STRVAL(tmp);",
          "3280:   }",
          "3284:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"key array must be of the form array(0 => key, 1 => phrase)\");",
          "3285:    TMP_CLEAN;",
          "3286:   }",
          "3287:  }",
          "3290:   void * what;",
          "3291:   int type;",
          "",
          "[Removed Lines]",
          "3263:  if (Z_TYPE_PP(val) == IS_ARRAY) {",
          "3264:   zval ** zphrase;",
          "3268:   if (zend_hash_index_find(HASH_OF(*val), 1, (void **)&zphrase) == FAILURE) {",
          "3273:   if (Z_TYPE_PP(zphrase) == IS_STRING) {",
          "3274:    passphrase = Z_STRVAL_PP(zphrase);",
          "3276:    tmp = **zphrase;",
          "3277:    zval_copy_ctor(&tmp);",
          "3283:   if (zend_hash_index_find(HASH_OF(*val), 0, (void **)&val) == FAILURE) {",
          "3289:  if (Z_TYPE_PP(val) == IS_RESOURCE) {",
          "",
          "[Added Lines]",
          "3226:  if (Z_TYPE_P(val) == IS_ARRAY) {",
          "3227:   zval * zphrase;",
          "3231:   if ((zphrase = zend_hash_index_find(HASH_OF(val), 1)) == NULL) {",
          "3236:   if (Z_TYPE_P(zphrase) == IS_STRING) {",
          "3237:    passphrase = Z_STRVAL_P(zphrase);",
          "3239:    ZVAL_DUP(&tmp, zphrase);",
          "3245:   if ((val = zend_hash_index_find(HASH_OF(val), 0)) == NULL) {",
          "3251:  if (Z_TYPE_P(val) == IS_RESOURCE) {",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "3295:    TMP_CLEAN;",
          "3296:   }",
          "3297:   if (resourceval) {",
          "3299:   }",
          "3300:   if (type == le_x509) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3261:    Z_ADDREF_P(val);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "3335:    TMP_CLEAN;",
          "3336:   }",
          "3337:   convert_to_string_ex(val);",
          "3341:   }",
          "3343:   if (public_key) {",
          "3344:    cert = php_openssl_x509_from_zval(val, 0, &cert_res TSRMLS_CC);",
          "3347:    if (!cert) {",
          "",
          "[Removed Lines]",
          "3334:   if (!(Z_TYPE_PP(val) == IS_STRING || Z_TYPE_PP(val) == IS_OBJECT)) {",
          "3339:   if (Z_STRLEN_PP(val) > 7 && memcmp(Z_STRVAL_PP(val), \"file://\", sizeof(\"file://\") - 1) == 0) {",
          "3340:    filename = Z_STRVAL_PP(val) + (sizeof(\"file://\") - 1);",
          "3345:    free_cert = (cert_res == -1);",
          "",
          "[Added Lines]",
          "3297:   if (!(Z_TYPE_P(val) == IS_STRING || Z_TYPE_P(val) == IS_OBJECT)) {",
          "3302:   if (Z_STRLEN_P(val) > 7 && memcmp(Z_STRVAL_P(val), \"file://\", sizeof(\"file://\") - 1) == 0) {",
          "3303:    filename = Z_STRVAL_P(val) + (sizeof(\"file://\") - 1);",
          "3308:    free_cert = (cert_res == NULL);",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "3350:     if (filename) {",
          "3351:      in = BIO_new_file(filename, \"r\");",
          "3352:     } else {",
          "3354:     }",
          "3355:     if (in == NULL) {",
          "3356:      TMP_CLEAN;",
          "",
          "[Removed Lines]",
          "3353:      in = BIO_new_mem_buf(Z_STRVAL_PP(val), Z_STRLEN_PP(val));",
          "",
          "[Added Lines]",
          "3316:      in = BIO_new_mem_buf(Z_STRVAL_P(val), Z_STRLEN_P(val));",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "3368:     }",
          "3369:     in = BIO_new_file(filename, \"r\");",
          "3370:    } else {",
          "3372:    }",
          "3374:    if (in == NULL) {",
          "",
          "[Removed Lines]",
          "3371:     in = BIO_new_mem_buf(Z_STRVAL_PP(val), Z_STRLEN_PP(val));",
          "",
          "[Added Lines]",
          "3334:     in = BIO_new_mem_buf(Z_STRVAL_P(val), Z_STRLEN_P(val));",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "3535:    BN_bn2bin(pkey->pkey._type->_name, (unsigned char*)str); \\",
          "3536:    str[len] = 0;                                            \\",
          "3539:    efree(str);             \\",
          "3540:   }                \\",
          "3541:  } while (0)",
          "3543: #define OPENSSL_PKEY_SET_BN(_ht, _type, _name) do {      \\",
          "3547:    _type->_name = BN_bin2bn(         \\",
          "3550:      }                                                               \\",
          "3551:  } while (0);",
          "",
          "[Removed Lines]",
          "3538:    add_assoc_stringl(_type, #_name, str, len);     \\",
          "3544:   zval **bn;              \\",
          "3545:   if (zend_hash_find(_ht, #_name, sizeof(#_name), (void**)&bn) == SUCCESS && \\",
          "3546:     Z_TYPE_PP(bn) == IS_STRING) {       \\",
          "3548:     (unsigned char*)Z_STRVAL_PP(bn),      \\",
          "3549:      Z_STRLEN_PP(bn), NULL);         \\",
          "",
          "[Added Lines]",
          "3501:    add_assoc_stringl(&_type, #_name, str, len);    \\",
          "3507:   zval *bn;              \\",
          "3508:   if ((bn = zend_hash_str_find(_ht, #_name, sizeof(#_name)-1)) != NULL && \\",
          "3509:     Z_TYPE_P(bn) == IS_STRING) {       \\",
          "3511:     (unsigned char*)Z_STRVAL_P(bn),       \\",
          "3512:      Z_STRLEN_P(bn), NULL);         \\",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "3557: {",
          "3558:  struct php_x509_request req;",
          "3559:  zval * args = NULL;",
          "3562:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|a!\", &args) == FAILURE) {",
          "3563:   return;",
          "",
          "[Removed Lines]",
          "3560:  zval **data;",
          "",
          "[Added Lines]",
          "3523:  zval *data;",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "3567:  if (args && Z_TYPE_P(args) == IS_ARRAY) {",
          "3568:   EVP_PKEY *pkey;",
          "3572:       pkey = EVP_PKEY_new();",
          "3573:       if (pkey) {",
          "3574:     RSA *rsa = RSA_new();",
          "3575:     if (rsa) {",
          "3584:      if (rsa->n && rsa->d) {",
          "3585:       if (EVP_PKEY_assign_RSA(pkey, rsa)) {",
          "3587:       }",
          "3588:      }",
          "3589:      RSA_free(rsa);",
          "",
          "[Removed Lines]",
          "3570:   if (zend_hash_find(Z_ARRVAL_P(args), \"rsa\", sizeof(\"rsa\"), (void**)&data) == SUCCESS &&",
          "3571:       Z_TYPE_PP(data) == IS_ARRAY) {",
          "3576:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_PP(data), rsa, n);",
          "3577:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_PP(data), rsa, e);",
          "3578:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_PP(data), rsa, d);",
          "3579:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_PP(data), rsa, p);",
          "3580:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_PP(data), rsa, q);",
          "3581:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_PP(data), rsa, dmp1);",
          "3582:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_PP(data), rsa, dmq1);",
          "3583:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_PP(data), rsa, iqmp);",
          "3586:        RETURN_RESOURCE(zend_list_insert(pkey, le_key TSRMLS_CC));",
          "",
          "[Added Lines]",
          "3533:   if ((data = zend_hash_str_find(Z_ARRVAL_P(args), \"rsa\", sizeof(\"rsa\")-1)) != NULL &&",
          "3534:       Z_TYPE_P(data) == IS_ARRAY) {",
          "3539:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_P(data), rsa, n);",
          "3540:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_P(data), rsa, e);",
          "3541:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_P(data), rsa, d);",
          "3542:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_P(data), rsa, p);",
          "3543:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_P(data), rsa, q);",
          "3544:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_P(data), rsa, dmp1);",
          "3545:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_P(data), rsa, dmq1);",
          "3546:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_P(data), rsa, iqmp);",
          "3549:        zend_register_resource(return_value, pkey, le_key TSRMLS_CC);",
          "3550:        return;",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "3591:     EVP_PKEY_free(pkey);",
          "3592:    }",
          "3593:    RETURN_FALSE;",
          "3596:       pkey = EVP_PKEY_new();",
          "3597:       if (pkey) {",
          "3598:     DSA *dsa = DSA_new();",
          "3599:     if (dsa) {",
          "3605:      if (dsa->p && dsa->q && dsa->g) {",
          "3606:       if (!dsa->priv_key && !dsa->pub_key) {",
          "3607:        DSA_generate_key(dsa);",
          "3608:       }",
          "3609:       if (EVP_PKEY_assign_DSA(pkey, dsa)) {",
          "3611:       }",
          "3612:      }",
          "3613:      DSA_free(dsa);",
          "",
          "[Removed Lines]",
          "3594:   } else if (zend_hash_find(Z_ARRVAL_P(args), \"dsa\", sizeof(\"dsa\"), (void**)&data) == SUCCESS &&",
          "3595:              Z_TYPE_PP(data) == IS_ARRAY) {",
          "3600:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_PP(data), dsa, p);",
          "3601:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_PP(data), dsa, q);",
          "3602:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_PP(data), dsa, g);",
          "3603:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_PP(data), dsa, priv_key);",
          "3604:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_PP(data), dsa, pub_key);",
          "3610:        RETURN_RESOURCE(zend_list_insert(pkey, le_key TSRMLS_CC));",
          "",
          "[Added Lines]",
          "3558:   } else if ((data = zend_hash_str_find(Z_ARRVAL_P(args), \"dsa\", sizeof(\"dsa\")-1)) != NULL &&",
          "3559:              Z_TYPE_P(data) == IS_ARRAY) {",
          "3564:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_P(data), dsa, p);",
          "3565:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_P(data), dsa, q);",
          "3566:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_P(data), dsa, g);",
          "3567:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_P(data), dsa, priv_key);",
          "3568:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_P(data), dsa, pub_key);",
          "3574:        zend_register_resource(return_value, pkey, le_key TSRMLS_CC);",
          "3575:        return;",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "3615:     EVP_PKEY_free(pkey);",
          "3616:    }",
          "3617:    RETURN_FALSE;",
          "3620:       pkey = EVP_PKEY_new();",
          "3621:       if (pkey) {",
          "3622:     DH *dh = DH_new();",
          "3623:     if (dh) {",
          "3628:      if (dh->p && dh->g) {",
          "3629:       if (!dh->pub_key) {",
          "3630:        DH_generate_key(dh);",
          "3631:       }",
          "3632:       if (EVP_PKEY_assign_DH(pkey, dh)) {",
          "3634:       }",
          "3635:      }",
          "3636:      DH_free(dh);",
          "",
          "[Removed Lines]",
          "3618:   } else if (zend_hash_find(Z_ARRVAL_P(args), \"dh\", sizeof(\"dh\"), (void**)&data) == SUCCESS &&",
          "3619:              Z_TYPE_PP(data) == IS_ARRAY) {",
          "3624:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_PP(data), dh, p);",
          "3625:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_PP(data), dh, g);",
          "3626:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_PP(data), dh, priv_key);",
          "3627:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_PP(data), dh, pub_key);",
          "3633:        RETURN_RESOURCE(zend_list_insert(pkey, le_key TSRMLS_CC));",
          "",
          "[Added Lines]",
          "3583:   } else if ((data = zend_hash_str_find(Z_ARRVAL_P(args), \"dh\", sizeof(\"dh\")-1)) != NULL &&",
          "3584:              Z_TYPE_P(data) == IS_ARRAY) {",
          "3589:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_P(data), dh, p);",
          "3590:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_P(data), dh, g);",
          "3591:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_P(data), dh, priv_key);",
          "3592:      OPENSSL_PKEY_SET_BN(Z_ARRVAL_P(data), dh, pub_key);",
          "3598:        ZVAL_COPY_VALUE(return_value, zend_list_insert(pkey, le_key TSRMLS_CC));",
          "3599:        return;",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "3647:  {",
          "3648:   if (php_openssl_generate_private_key(&req TSRMLS_CC)) {",
          "3652:    req.priv_key = NULL;",
          "3653:   }",
          "",
          "[Removed Lines]",
          "3650:    RETVAL_RESOURCE(zend_list_insert(req.priv_key, le_key TSRMLS_CC));",
          "",
          "[Added Lines]",
          "3616:    zend_register_resource(return_value, req.priv_key, le_key TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "3661: PHP_FUNCTION(openssl_pkey_export_to_file)",
          "3662: {",
          "3663:  struct php_x509_request req;",
          "3665:  char * passphrase = NULL; int passphrase_len = 0;",
          "3666:  char * filename = NULL; int filename_len = 0;",
          "3668:  EVP_PKEY * key;",
          "3669:  BIO * bio_out = NULL;",
          "3670:  const EVP_CIPHER * cipher;",
          "3673:   return;",
          "3674:  }",
          "3675:  RETVAL_FALSE;",
          "",
          "[Removed Lines]",
          "3664:  zval ** zpkey, * args = NULL;",
          "3667:  long key_resource = -1;",
          "3672:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"Zp|s!a!\", &zpkey, &filename, &filename_len, &passphrase, &passphrase_len, &args) == FAILURE) {",
          "",
          "[Added Lines]",
          "3630:  zval * zpkey, * args = NULL;",
          "3633:  zend_resource *key_resource = NULL;",
          "3638:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"zp|s!a!\", &zpkey, &filename, &filename_len, &passphrase, &passphrase_len, &args) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "3707:  }",
          "3708:  PHP_SSL_REQ_DISPOSE(&req);",
          "3711:   EVP_PKEY_free(key);",
          "3712:  }",
          "3713:  if (bio_out) {",
          "",
          "[Removed Lines]",
          "3710:  if (key_resource == -1 && key) {",
          "",
          "[Added Lines]",
          "3676:  if (key_resource == NULL && key) {",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "3721: PHP_FUNCTION(openssl_pkey_export)",
          "3722: {",
          "3723:  struct php_x509_request req;",
          "3725:  char * passphrase = NULL; int passphrase_len = 0;",
          "3727:  EVP_PKEY * key;",
          "3728:  BIO * bio_out = NULL;",
          "3729:  const EVP_CIPHER * cipher;",
          "3732:   return;",
          "3733:  }",
          "3734:  RETVAL_FALSE;",
          "3736:  key = php_openssl_evp_from_zval(zpkey, 0, passphrase, 0, &key_resource TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "3724:  zval ** zpkey, * args = NULL, *out;",
          "3726:  long key_resource = -1;",
          "3731:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"Zz|s!a!\", &zpkey, &out, &passphrase, &passphrase_len, &args) == FAILURE) {",
          "",
          "[Added Lines]",
          "3690:  zval * zpkey, * args = NULL, *out;",
          "3692:  zend_resource *key_resource = NULL;",
          "3697:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"zz|s!a!\", &zpkey, &out, &passphrase, &passphrase_len, &args) == FAILURE) {",
          "3700:  ZVAL_DEREF(out);",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "3765:    bio_mem_len = BIO_get_mem_data(bio_out, &bio_mem_ptr);",
          "3766:    zval_dtor(out);",
          "3768:   }",
          "3769:  }",
          "3770:  PHP_SSL_REQ_DISPOSE(&req);",
          "3773:   EVP_PKEY_free(key);",
          "3774:  }",
          "3775:  if (bio_out) {",
          "",
          "[Removed Lines]",
          "3767:    ZVAL_STRINGL(out, bio_mem_ptr, bio_mem_len, 1);",
          "3772:  if (key_resource == -1 && key) {",
          "",
          "[Added Lines]",
          "3734:    ZVAL_STRINGL(out, bio_mem_ptr, bio_mem_len);",
          "3739:  if (key_resource == NULL && key) {",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "3783: PHP_FUNCTION(openssl_pkey_get_public)",
          "3784: {",
          "3786:  EVP_PKEY *pkey;",
          "3789:   return;",
          "3790:  }",
          "3794:  if (pkey == NULL) {",
          "3795:   RETURN_FALSE;",
          "3796:  }",
          "3798: }",
          "",
          "[Removed Lines]",
          "3785:  zval **cert;",
          "3788:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"Z\", &cert) == FAILURE) {",
          "3791:  Z_TYPE_P(return_value) = IS_RESOURCE;",
          "3792:  pkey = php_openssl_evp_from_zval(cert, 1, NULL, 1, &Z_LVAL_P(return_value) TSRMLS_CC);",
          "3797:  zend_list_addref(Z_LVAL_P(return_value));",
          "",
          "[Added Lines]",
          "3752:  zval *cert;",
          "3754:  zend_resource *res;",
          "3756:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"z\", &cert) == FAILURE) {",
          "3759:  pkey = php_openssl_evp_from_zval(cert, 1, NULL, 1, &res TSRMLS_CC);",
          "3763:  ZVAL_RES(return_value, res);",
          "3764:  Z_ADDREF_P(return_value);",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "3808:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"r\", &key) == FAILURE) {",
          "3809:   return;",
          "3810:  }",
          "3813: }",
          "",
          "[Removed Lines]",
          "3811:  ZEND_FETCH_RESOURCE(pkey, EVP_PKEY *, &key, -1, \"OpenSSL key\", le_key);",
          "3812:  zend_list_delete(Z_LVAL_P(key));",
          "",
          "[Added Lines]",
          "3778:  ZEND_FETCH_RESOURCE(pkey, EVP_PKEY *, key, -1, \"OpenSSL key\", le_key);",
          "3779:  zend_list_close(Z_RES_P(key));",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "3818: PHP_FUNCTION(openssl_pkey_get_private)",
          "3819: {",
          "3821:  EVP_PKEY *pkey;",
          "3822:  char * passphrase = \"\";",
          "3823:  int passphrase_len = sizeof(\"\")-1;",
          "3826:   return;",
          "3827:  }",
          "3831:  if (pkey == NULL) {",
          "3832:   RETURN_FALSE;",
          "3833:  }",
          "3835: }",
          "",
          "[Removed Lines]",
          "3820:  zval **cert;",
          "3825:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"Z|s\", &cert, &passphrase, &passphrase_len) == FAILURE) {",
          "3828:  Z_TYPE_P(return_value) = IS_RESOURCE;",
          "3829:  pkey = php_openssl_evp_from_zval(cert, 0, passphrase, 1, &Z_LVAL_P(return_value) TSRMLS_CC);",
          "3834:  zend_list_addref(Z_LVAL_P(return_value));",
          "",
          "[Added Lines]",
          "3787:  zval *cert;",
          "3791:  zend_resource *res;",
          "3793:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"z|s\", &cert, &passphrase, &passphrase_len) == FAILURE) {",
          "3796:  pkey = php_openssl_evp_from_zval(cert, 0, passphrase, 1, &res TSRMLS_CC);",
          "3801:  ZVAL_RES(return_value, res);",
          "3802:  Z_ADDREF_P(return_value);",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "3850:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"r\", &key) == FAILURE) {",
          "3851:   return;",
          "3852:  }",
          "3854:  if (!pkey) {",
          "3855:   RETURN_FALSE;",
          "3856:  }",
          "",
          "[Removed Lines]",
          "3853:  ZEND_FETCH_RESOURCE(pkey, EVP_PKEY *, &key, -1, \"OpenSSL key\", le_key);",
          "",
          "[Added Lines]",
          "3821:  ZEND_FETCH_RESOURCE(pkey, EVP_PKEY *, key, -1, \"OpenSSL key\", le_key);",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "3870:    ktype = OPENSSL_KEYTYPE_RSA;",
          "3872:    if (pkey->pkey.rsa != NULL) {",
          "3877:     OPENSSL_PKEY_GET_BN(rsa, n);",
          "3878:     OPENSSL_PKEY_GET_BN(rsa, e);",
          "3879:     OPENSSL_PKEY_GET_BN(rsa, d);",
          "",
          "[Removed Lines]",
          "3873:     zval *rsa;",
          "3875:     ALLOC_INIT_ZVAL(rsa);",
          "3876:     array_init(rsa);",
          "",
          "[Added Lines]",
          "3841:     zval rsa;",
          "3843:     array_init(&rsa);",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "3882:     OPENSSL_PKEY_GET_BN(rsa, dmp1);",
          "3883:     OPENSSL_PKEY_GET_BN(rsa, dmq1);",
          "3884:     OPENSSL_PKEY_GET_BN(rsa, iqmp);",
          "3886:    }",
          "3888:    break;",
          "",
          "[Removed Lines]",
          "3885:     add_assoc_zval(return_value, \"rsa\", rsa);",
          "",
          "[Added Lines]",
          "3852:     add_assoc_zval(return_value, \"rsa\", &rsa);",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "3893:    ktype = OPENSSL_KEYTYPE_DSA;",
          "3895:    if (pkey->pkey.dsa != NULL) {",
          "3900:     OPENSSL_PKEY_GET_BN(dsa, p);",
          "3901:     OPENSSL_PKEY_GET_BN(dsa, q);",
          "3902:     OPENSSL_PKEY_GET_BN(dsa, g);",
          "3903:     OPENSSL_PKEY_GET_BN(dsa, priv_key);",
          "3904:     OPENSSL_PKEY_GET_BN(dsa, pub_key);",
          "3906:    }",
          "3907:    break;",
          "3908:   case EVP_PKEY_DH:",
          "",
          "[Removed Lines]",
          "3896:     zval *dsa;",
          "3898:     ALLOC_INIT_ZVAL(dsa);",
          "3899:     array_init(dsa);",
          "3905:     add_assoc_zval(return_value, \"dsa\", dsa);",
          "",
          "[Added Lines]",
          "3863:     zval dsa;",
          "3865:     array_init(&dsa);",
          "3871:     add_assoc_zval(return_value, \"dsa\", &dsa);",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "3910:    ktype = OPENSSL_KEYTYPE_DH;",
          "3912:    if (pkey->pkey.dh != NULL) {",
          "3917:     OPENSSL_PKEY_GET_BN(dh, p);",
          "3918:     OPENSSL_PKEY_GET_BN(dh, g);",
          "3919:     OPENSSL_PKEY_GET_BN(dh, priv_key);",
          "3920:     OPENSSL_PKEY_GET_BN(dh, pub_key);",
          "3922:    }",
          "3924:    break;",
          "",
          "[Removed Lines]",
          "3913:     zval *dh;",
          "3915:     ALLOC_INIT_ZVAL(dh);",
          "3916:     array_init(dh);",
          "3921:     add_assoc_zval(return_value, \"dh\", dh);",
          "",
          "[Added Lines]",
          "3879:     zval dh;",
          "3881:     array_init(&dh);",
          "3886:     add_assoc_zval(return_value, \"dh\", &dh);",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "3980:  out_buffer[key_length] = '\\0';",
          "3982:  if (PKCS5_PBKDF2_HMAC(password, password_len, (unsigned char *)salt, salt_len, iterations, digest, key_length, out_buffer) == 1) {",
          "3984:  } else {",
          "3985:   efree(out_buffer);",
          "3986:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "3983:   RETVAL_STRINGL((char *)out_buffer, key_length, 0);",
          "",
          "[Added Lines]",
          "3949:   RETVAL_STRINGL((char *)out_buffer, key_length);",
          "3950:   efree(out_buffer);",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "4106: PHP_FUNCTION(openssl_pkcs7_encrypt)",
          "4107: {",
          "4109:  STACK_OF(X509) * recipcerts = NULL;",
          "4110:  BIO * infile = NULL, * outfile = NULL;",
          "4111:  long flags = 0;",
          "4112:  PKCS7 * p7 = NULL;",
          "4115:  X509 * cert;",
          "4116:  const EVP_CIPHER *cipher = NULL;",
          "4117:  long cipherid = PHP_OPENSSL_CIPHER_DEFAULT;",
          "4121:  char * infilename = NULL; int infilename_len;",
          "4122:  char * outfilename = NULL; int outfilename_len;",
          "4124:  RETVAL_FALSE;",
          "4127:     &outfilename, &outfilename_len, &zrecipcerts, &zheaders, &flags, &cipherid) == FAILURE)",
          "4128:   return;",
          "",
          "[Removed Lines]",
          "4108:  zval ** zrecipcerts, * zheaders = NULL;",
          "4113:  HashPosition hpos;",
          "4114:  zval ** zcertval;",
          "4118:  uint strindexlen;",
          "4119:  ulong intindex;",
          "4120:  char * strindex;",
          "4126:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ppZa!|ll\", &infilename, &infilename_len,",
          "",
          "[Added Lines]",
          "4075:  zval * zrecipcerts, * zheaders = NULL;",
          "4080:  zval * zcertval;",
          "4084:  zend_string * strindex;",
          "4090:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ppza!|ll\", &infilename, &infilename_len,",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "4145:  recipcerts = sk_X509_new_null();",
          "4153:    cert = php_openssl_x509_from_zval(zcertval, 0, &certresource TSRMLS_CC);",
          "4154:    if (cert == NULL) {",
          "4155:     goto clean_exit;",
          "4156:    }",
          "4161:     cert = X509_dup(cert);",
          "",
          "[Removed Lines]",
          "4148:  if (Z_TYPE_PP(zrecipcerts) == IS_ARRAY) {",
          "4149:   zend_hash_internal_pointer_reset_ex(HASH_OF(*zrecipcerts), &hpos);",
          "4150:   while(zend_hash_get_current_data_ex(HASH_OF(*zrecipcerts), (void**)&zcertval, &hpos) == SUCCESS) {",
          "4151:    long certresource;",
          "4158:    if (certresource != -1) {",
          "",
          "[Added Lines]",
          "4112:  if (Z_TYPE_P(zrecipcerts) == IS_ARRAY) {",
          "4113:   ZEND_HASH_FOREACH_VAL(HASH_OF(zrecipcerts), zcertval) {",
          "4114:    zend_resource *certresource;",
          "4121:    if (certresource != NULL) {",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "4164:     }",
          "4165:    }",
          "4166:    sk_X509_push(recipcerts, cert);",
          "4170:  } else {",
          "4174:   cert = php_openssl_x509_from_zval(zrecipcerts, 0, &certresource TSRMLS_CC);",
          "4175:   if (cert == NULL) {",
          "4176:    goto clean_exit;",
          "4177:   }",
          "4182:    cert = X509_dup(cert);",
          "",
          "[Removed Lines]",
          "4168:    zend_hash_move_forward_ex(HASH_OF(*zrecipcerts), &hpos);",
          "4169:   }",
          "4172:   long certresource;",
          "4179:   if (certresource != -1) {",
          "",
          "[Added Lines]",
          "4130:   } ZEND_HASH_FOREACH_END();",
          "4133:   zend_resource *certresource;",
          "4140:   if (certresource != NULL) {",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "4205:  if (zheaders) {",
          "4211:    convert_to_string_ex(zcertval);",
          "4213:    if (strindex) {",
          "4215:    } else {",
          "4217:    }",
          "4221:  }",
          "4223:  (void)BIO_reset(infile);",
          "",
          "[Removed Lines]",
          "4206:   zend_hash_internal_pointer_reset_ex(HASH_OF(zheaders), &hpos);",
          "4207:   while(zend_hash_get_current_data_ex(HASH_OF(zheaders), (void**)&zcertval, &hpos) == SUCCESS) {",
          "4208:    strindex = NULL;",
          "4209:    zend_hash_get_current_key_ex(HASH_OF(zheaders), &strindex, &strindexlen, &intindex, 0, &hpos);",
          "4214:     BIO_printf(outfile, \"%s: %s\\n\", strindex, Z_STRVAL_PP(zcertval));",
          "4216:     BIO_printf(outfile, \"%s\\n\", Z_STRVAL_PP(zcertval));",
          "4219:    zend_hash_move_forward_ex(HASH_OF(zheaders), &hpos);",
          "4220:   }",
          "",
          "[Added Lines]",
          "4167:   ZEND_HASH_FOREACH_STR_KEY_VAL(HASH_OF(zheaders), strindex, zcertval) {",
          "4171:     BIO_printf(outfile, \"%s: %s\\n\", strindex->val, Z_STRVAL_P(zcertval));",
          "4173:     BIO_printf(outfile, \"%s\\n\", Z_STRVAL_P(zcertval));",
          "4175:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "4243: PHP_FUNCTION(openssl_pkcs7_sign)",
          "4244: {",
          "4247:  X509 * cert = NULL;",
          "4248:  EVP_PKEY * privkey = NULL;",
          "4249:  long flags = PKCS7_DETACHED;",
          "4250:  PKCS7 * p7 = NULL;",
          "4251:  BIO * infile = NULL, * outfile = NULL;",
          "4252:  STACK_OF(X509) *others = NULL;",
          "4258:  char * infilename; int infilename_len;",
          "4259:  char * outfilename; int outfilename_len;",
          "4260:  char * extracertsfilename = NULL; int extracertsfilename_len;",
          "4263:     &infilename, &infilename_len, &outfilename, &outfilename_len,",
          "4264:     &zcert, &zprivkey, &zheaders, &flags, &extracertsfilename,",
          "4265:     &extracertsfilename_len) == FAILURE) {",
          "",
          "[Removed Lines]",
          "4245:  zval ** zcert, ** zprivkey, * zheaders;",
          "4246:  zval ** hval;",
          "4253:  long certresource = -1, keyresource = -1;",
          "4254:  ulong intindex;",
          "4255:  uint strindexlen;",
          "4256:  HashPosition hpos;",
          "4257:  char * strindex;",
          "4262:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ppZZa!|lp\",",
          "",
          "[Added Lines]",
          "4200:  zval * zcert, * zprivkey, * zheaders;",
          "4201:  zval * hval;",
          "4208:  zend_resource *certresource = NULL, *keyresource = NULL;",
          "4209:  zend_string * strindex;",
          "4214:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ppzza!|lp\",",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "4315:  if (zheaders) {",
          "4321:    convert_to_string_ex(hval);",
          "4323:    if (strindex) {",
          "4325:    } else {",
          "4327:    }",
          "4330:  }",
          "4332:  SMIME_write_PKCS7(outfile, p7, infile, flags);",
          "",
          "[Removed Lines]",
          "4316:   zend_hash_internal_pointer_reset_ex(HASH_OF(zheaders), &hpos);",
          "4317:   while(zend_hash_get_current_data_ex(HASH_OF(zheaders), (void**)&hval, &hpos) == SUCCESS) {",
          "4318:    strindex = NULL;",
          "4319:    zend_hash_get_current_key_ex(HASH_OF(zheaders), &strindex, &strindexlen, &intindex, 0, &hpos);",
          "4324:     BIO_printf(outfile, \"%s: %s\\n\", strindex, Z_STRVAL_PP(hval));",
          "4326:     BIO_printf(outfile, \"%s\\n\", Z_STRVAL_PP(hval));",
          "4328:    zend_hash_move_forward_ex(HASH_OF(zheaders), &hpos);",
          "4329:   }",
          "",
          "[Added Lines]",
          "4268:   ZEND_HASH_FOREACH_STR_KEY_VAL(HASH_OF(zheaders), strindex, hval) {",
          "4272:     BIO_printf(outfile, \"%s: %s\\n\", strindex->val, Z_STRVAL_P(hval));",
          "4274:     BIO_printf(outfile, \"%s\\n\", Z_STRVAL_P(hval));",
          "4276:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "4340:  if (others) {",
          "4341:   sk_X509_pop_free(others, X509_free);",
          "4342:  }",
          "4344:   EVP_PKEY_free(privkey);",
          "4345:  }",
          "4347:   X509_free(cert);",
          "4348:  }",
          "4349: }",
          "",
          "[Removed Lines]",
          "4343:  if (privkey && keyresource == -1) {",
          "4346:  if (cert && certresource == -1) {",
          "",
          "[Added Lines]",
          "4290:  if (privkey && keyresource == NULL) {",
          "4293:  if (cert && certresource == NULL) {",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "4355: PHP_FUNCTION(openssl_pkcs7_decrypt)",
          "4356: {",
          "4358:  X509 * cert = NULL;",
          "4359:  EVP_PKEY * key = NULL;",
          "4361:  BIO * in = NULL, * out = NULL, * datain = NULL;",
          "4362:  PKCS7 * p7 = NULL;",
          "4363:  char * infilename; int infilename_len;",
          "4364:  char * outfilename; int outfilename_len;",
          "4367:     &outfilename, &outfilename_len, &recipcert, &recipkey) == FAILURE) {",
          "4368:   return;",
          "4369:  }",
          "",
          "[Removed Lines]",
          "4357:  zval ** recipcert, ** recipkey = NULL;",
          "4360:  long certresval, keyresval;",
          "4366:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ppZ|Z\", &infilename, &infilename_len,",
          "",
          "[Added Lines]",
          "4304:  zval * recipcert, * recipkey = NULL;",
          "4307:  zend_resource *certresval, *keyresval;",
          "4313:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ppz|z\", &infilename, &infilename_len,",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "4408:  BIO_free(datain);",
          "4409:  BIO_free(in);",
          "4410:  BIO_free(out);",
          "4412:   X509_free(cert);",
          "4413:  }",
          "4415:   EVP_PKEY_free(key);",
          "4416:  }",
          "4417: }",
          "",
          "[Removed Lines]",
          "4411:  if (cert && certresval == -1) {",
          "4414:  if (key && keyresval == -1) {",
          "",
          "[Added Lines]",
          "4358:  if (cert && certresval == NULL) {",
          "4361:  if (key && keyresval == NULL) {",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "4424: PHP_FUNCTION(openssl_private_encrypt)",
          "4425: {",
          "4427:  EVP_PKEY *pkey;",
          "4428:  int cryptedlen;",
          "4429:  unsigned char *cryptedbuf = NULL;",
          "4430:  int successful = 0;",
          "4432:  char * data;",
          "4433:  int data_len;",
          "4434:  long padding = RSA_PKCS1_PADDING;",
          "4437:   return;",
          "4438:  }",
          "4439:  RETVAL_FALSE;",
          "4441:  pkey = php_openssl_evp_from_zval(key, 0, \"\", 0, &keyresource TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "4426:  zval **key, *crypted;",
          "4431:  long keyresource = -1;",
          "4436:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"szZ|l\", &data, &data_len, &crypted, &key, &padding) == FAILURE) {",
          "",
          "[Added Lines]",
          "4373:  zval *key, *crypted;",
          "4378:  zend_resource *keyresource = NULL;",
          "4383:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"szz|l\", &data, &data_len, &crypted, &key, &padding) == FAILURE) {",
          "4386:  ZVAL_DEREF(crypted);",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "4464:  if (successful) {",
          "4465:   zval_dtor(crypted);",
          "4466:   cryptedbuf[cryptedlen] = '\\0';",
          "4468:   cryptedbuf = NULL;",
          "4469:   RETVAL_TRUE;",
          "4470:  }",
          "4471:  if (cryptedbuf) {",
          "4472:   efree(cryptedbuf);",
          "4473:  }",
          "4475:   EVP_PKEY_free(pkey);",
          "4476:  }",
          "4477: }",
          "",
          "[Removed Lines]",
          "4467:   ZVAL_STRINGL(crypted, (char *)cryptedbuf, cryptedlen, 0);",
          "4474:  if (keyresource == -1) {",
          "",
          "[Added Lines]",
          "4416:   ZVAL_STRINGL(crypted, (char *)cryptedbuf, cryptedlen);",
          "4417:   efree(cryptedbuf);",
          "4424:  if (keyresource == NULL) {",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "4482: PHP_FUNCTION(openssl_private_decrypt)",
          "4483: {",
          "4485:  EVP_PKEY *pkey;",
          "4486:  int cryptedlen;",
          "4487:  unsigned char *cryptedbuf = NULL;",
          "4488:  unsigned char *crypttemp;",
          "4489:  int successful = 0;",
          "4490:  long padding = RSA_PKCS1_PADDING;",
          "4492:  char * data;",
          "4493:  int data_len;",
          "4496:   return;",
          "4497:  }",
          "4498:  RETVAL_FALSE;",
          "4500:  pkey = php_openssl_evp_from_zval(key, 0, \"\", 0, &keyresource TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "4484:  zval **key, *crypted;",
          "4491:  long keyresource = -1;",
          "4495:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"szZ|l\", &data, &data_len, &crypted, &key, &padding) == FAILURE) {",
          "",
          "[Added Lines]",
          "4434:  zval *key, *crypted;",
          "4441:  zend_resource *keyresource = NULL;",
          "4445:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"szz|l\", &data, &data_len, &crypted, &key, &padding) == FAILURE) {",
          "4448:  ZVAL_DEREF(crypted);",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "4529:  if (successful) {",
          "4530:   zval_dtor(crypted);",
          "4531:   cryptedbuf[cryptedlen] = '\\0';",
          "4533:   cryptedbuf = NULL;",
          "4534:   RETVAL_TRUE;",
          "4535:  }",
          "4538:   EVP_PKEY_free(pkey);",
          "4539:  }",
          "4540:  if (cryptedbuf) {",
          "",
          "[Removed Lines]",
          "4532:   ZVAL_STRINGL(crypted, (char *)cryptedbuf, cryptedlen, 0);",
          "4537:  if (keyresource == -1) {",
          "",
          "[Added Lines]",
          "4484:   ZVAL_STRINGL(crypted, (char *)cryptedbuf, cryptedlen);",
          "4485:   efree(cryptedbuf);",
          "4490:  if (keyresource == NULL) {",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "4548: PHP_FUNCTION(openssl_public_encrypt)",
          "4549: {",
          "4551:  EVP_PKEY *pkey;",
          "4552:  int cryptedlen;",
          "4553:  unsigned char *cryptedbuf;",
          "4554:  int successful = 0;",
          "4556:  long padding = RSA_PKCS1_PADDING;",
          "4557:  char * data;",
          "4558:  int data_len;",
          "4561:   return;",
          "4563:  RETVAL_FALSE;",
          "4565:  pkey = php_openssl_evp_from_zval(key, 1, NULL, 0, &keyresource TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "4550:  zval **key, *crypted;",
          "4555:  long keyresource = -1;",
          "4560:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"szZ|l\", &data, &data_len, &crypted, &key, &padding) == FAILURE)",
          "",
          "[Added Lines]",
          "4503:  zval *key, *crypted;",
          "4508:  zend_resource *keyresource = NULL;",
          "4513:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"szz|l\", &data, &data_len, &crypted, &key, &padding) == FAILURE)",
          "4515:  ZVAL_DEREF(crypted);",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "4588:  if (successful) {",
          "4589:   zval_dtor(crypted);",
          "4590:   cryptedbuf[cryptedlen] = '\\0';",
          "4592:   cryptedbuf = NULL;",
          "4593:   RETVAL_TRUE;",
          "4594:  }",
          "4596:   EVP_PKEY_free(pkey);",
          "4597:  }",
          "4598:  if (cryptedbuf) {",
          "",
          "[Removed Lines]",
          "4591:   ZVAL_STRINGL(crypted, (char *)cryptedbuf, cryptedlen, 0);",
          "4595:  if (keyresource == -1) {",
          "",
          "[Added Lines]",
          "4545:   ZVAL_STRINGL(crypted, (char *)cryptedbuf, cryptedlen);",
          "4546:   efree(cryptedbuf);",
          "4550:  if (keyresource == NULL) {",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "4606: PHP_FUNCTION(openssl_public_decrypt)",
          "4607: {",
          "4609:  EVP_PKEY *pkey;",
          "4610:  int cryptedlen;",
          "4611:  unsigned char *cryptedbuf = NULL;",
          "4612:  unsigned char *crypttemp;",
          "4613:  int successful = 0;",
          "4615:  long padding = RSA_PKCS1_PADDING;",
          "4616:  char * data;",
          "4617:  int data_len;",
          "4620:   return;",
          "4621:  }",
          "4622:  RETVAL_FALSE;",
          "4624:  pkey = php_openssl_evp_from_zval(key, 1, NULL, 0, &keyresource TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "4608:  zval **key, *crypted;",
          "4614:  long keyresource = -1;",
          "4619:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"szZ|l\", &data, &data_len, &crypted, &key, &padding) == FAILURE) {",
          "",
          "[Added Lines]",
          "4563:  zval *key, *crypted;",
          "4569:  zend_resource *keyresource = NULL;",
          "4574:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"szz|l\", &data, &data_len, &crypted, &key, &padding) == FAILURE) {",
          "4577:  ZVAL_DEREF(crypted);",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "4655:  if (successful) {",
          "4656:   zval_dtor(crypted);",
          "4657:   cryptedbuf[cryptedlen] = '\\0';",
          "4659:   cryptedbuf = NULL;",
          "4660:   RETVAL_TRUE;",
          "4661:  }",
          "",
          "[Removed Lines]",
          "4658:   ZVAL_STRINGL(crypted, (char *)cryptedbuf, cryptedlen, 0);",
          "",
          "[Added Lines]",
          "4615:   ZVAL_STRINGL(crypted, (char *)cryptedbuf, cryptedlen);",
          "4616:   efree(cryptedbuf);",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "4663:  if (cryptedbuf) {",
          "4664:   efree(cryptedbuf);",
          "4665:  }",
          "4667:   EVP_PKEY_free(pkey);",
          "4668:  }",
          "4669: }",
          "",
          "[Removed Lines]",
          "4666:  if (keyresource == -1) {",
          "",
          "[Added Lines]",
          "4624:  if (keyresource == NULL) {",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "4683:  val = ERR_get_error();",
          "4684:  if (val) {",
          "4686:  } else {",
          "4687:   RETURN_FALSE;",
          "4688:  }",
          "",
          "[Removed Lines]",
          "4685:   RETURN_STRING(ERR_error_string(val, buf), 1);",
          "",
          "[Added Lines]",
          "4643:   RETURN_STRING(ERR_error_string(val, buf));",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "4694: PHP_FUNCTION(openssl_sign)",
          "4695: {",
          "4697:  EVP_PKEY *pkey;",
          "4698:  int siglen;",
          "4699:  unsigned char *sigbuf;",
          "4701:  char * data;",
          "4702:  int data_len;",
          "4703:  EVP_MD_CTX md_ctx;",
          "",
          "[Removed Lines]",
          "4696:  zval **key, *signature;",
          "4700:  long keyresource = -1;",
          "",
          "[Added Lines]",
          "4654:  zval *key, *signature;",
          "4658:  zend_resource *keyresource = NULL;",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "4705:  long signature_algo = OPENSSL_ALGO_SHA1;",
          "4706:  const EVP_MD *mdtype;",
          "4709:   return;",
          "4710:  }",
          "4711:  pkey = php_openssl_evp_from_zval(key, 0, \"\", 0, &keyresource TSRMLS_CC);",
          "4712:  if (pkey == NULL) {",
          "4713:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"supplied key param cannot be coerced into a private key\");",
          "",
          "[Removed Lines]",
          "4708:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"szZ|z\", &data, &data_len, &signature, &key, &method) == FAILURE) {",
          "",
          "[Added Lines]",
          "4666:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"szz|z\", &data, &data_len, &signature, &key, &method) == FAILURE) {",
          "4669:  ZVAL_DEREF(signature);",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "4738:  if (EVP_SignFinal (&md_ctx, sigbuf,(unsigned int *)&siglen, pkey)) {",
          "4739:   zval_dtor(signature);",
          "4740:   sigbuf[siglen] = '\\0';",
          "4742:   RETVAL_TRUE;",
          "4743:  } else {",
          "4744:   efree(sigbuf);",
          "4745:   RETVAL_FALSE;",
          "4746:  }",
          "4747:  EVP_MD_CTX_cleanup(&md_ctx);",
          "4749:   EVP_PKEY_free(pkey);",
          "4750:  }",
          "4751: }",
          "",
          "[Removed Lines]",
          "4741:   ZVAL_STRINGL(signature, (char *)sigbuf, siglen, 0);",
          "4748:  if (keyresource == -1) {",
          "",
          "[Added Lines]",
          "4701:   ZVAL_STRINGL(signature, (char *)sigbuf, siglen);",
          "4702:   efree(sigbuf);",
          "4709:  if (keyresource == NULL) {",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "4756: PHP_FUNCTION(openssl_verify)",
          "4757: {",
          "4759:  EVP_PKEY *pkey;",
          "4760:  int err;",
          "4761:  EVP_MD_CTX     md_ctx;",
          "4762:  const EVP_MD *mdtype;",
          "4764:  char * data; int data_len;",
          "4765:  char * signature; int signature_len;",
          "4766:  zval *method = NULL;",
          "4767:  long signature_algo = OPENSSL_ALGO_SHA1;",
          "4770:   return;",
          "4771:  }",
          "",
          "[Removed Lines]",
          "4758:  zval **key;",
          "4763:  long keyresource = -1;",
          "4769:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ssZ|z\", &data, &data_len, &signature, &signature_len, &key, &method) == FAILURE) {",
          "",
          "[Added Lines]",
          "4719:  zval *key;",
          "4724:  zend_resource *keyresource = NULL;",
          "4730:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ssz|z\", &data, &data_len, &signature, &signature_len, &key, &method) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "4797:  err = EVP_VerifyFinal (&md_ctx, (unsigned char *)signature, signature_len, pkey);",
          "4798:  EVP_MD_CTX_cleanup(&md_ctx);",
          "4801:   EVP_PKEY_free(pkey);",
          "4802:  }",
          "4803:  RETURN_LONG(err);",
          "",
          "[Removed Lines]",
          "4800:  if (keyresource == -1) {",
          "",
          "[Added Lines]",
          "4761:  if (keyresource == NULL) {",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "4809: PHP_FUNCTION(openssl_seal)",
          "4810: {",
          "4812:  HashTable *pubkeysht;",
          "4814:  EVP_PKEY **pkeys;",
          "4816:  int i, len1, len2, *eksl, nkeys;",
          "4817:  unsigned char *buf = NULL, **eks;",
          "4818:  char * data; int data_len;",
          "",
          "[Removed Lines]",
          "4811:  zval *pubkeys, **pubkey, *sealdata, *ekeys;",
          "4813:  HashPosition pos;",
          "",
          "[Added Lines]",
          "4772:  zval *pubkeys, *pubkey, *sealdata, *ekeys;",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "4824:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"szza/|s\", &data, &data_len, &sealdata, &ekeys, &pubkeys, &method, &method_len) == FAILURE) {",
          "4825:   return;",
          "4826:  }",
          "4828:  pubkeysht = HASH_OF(pubkeys);",
          "4829:  nkeys = pubkeysht ? zend_hash_num_elements(pubkeysht) : 0;",
          "4830:  if (!nkeys) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4787:  ZVAL_DEREF(sealdata);",
          "4788:  ZVAL_DEREF(ekeys);",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "4846:  eksl = safe_emalloc(nkeys, sizeof(*eksl), 0);",
          "4847:  eks = safe_emalloc(nkeys, sizeof(*eks), 0);",
          "4848:  memset(eks, 0, sizeof(*eks) * nkeys);",
          "4854:  i = 0;",
          "4857:   pkeys[i] = php_openssl_evp_from_zval(pubkey, 1, NULL, 0, &key_resources[i] TSRMLS_CC);",
          "4858:   if (pkeys[i] == NULL) {",
          "4859:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"not a public key (%dth member of pubkeys)\", i+1);",
          "",
          "[Removed Lines]",
          "4849:  key_resources = safe_emalloc(nkeys, sizeof(long), 0);",
          "4850:  memset(key_resources, 0, sizeof(*key_resources) * nkeys);",
          "4853:  zend_hash_internal_pointer_reset_ex(pubkeysht, &pos);",
          "4855:  while (zend_hash_get_current_data_ex(pubkeysht, (void **) &pubkey,",
          "4856:     &pos) == SUCCESS) {",
          "",
          "[Added Lines]",
          "4810:  key_resources = safe_emalloc(nkeys, sizeof(zend_resource), 0);",
          "4811:  memset(key_resources, 0, sizeof(zend_resource) * nkeys);",
          "4815:  ZEND_HASH_FOREACH_VAL(pubkeysht, pubkey) {",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "4861:    goto clean_exit;",
          "4862:   }",
          "4863:   eks[i] = emalloc(EVP_PKEY_size(pkeys[i]) + 1);",
          "4865:   i++;",
          "4868:  if (!EVP_EncryptInit(&ctx,cipher,NULL,NULL)) {",
          "4869:   RETVAL_FALSE;",
          "",
          "[Removed Lines]",
          "4864:   zend_hash_move_forward_ex(pubkeysht, &pos);",
          "4866:  }",
          "",
          "[Added Lines]",
          "4824:  } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "4892:  if (len1 + len2 > 0) {",
          "4893:   zval_dtor(sealdata);",
          "4894:   buf[len1 + len2] = '\\0';",
          "4898:   zval_dtor(ekeys);",
          "4899:   array_init(ekeys);",
          "4900:   for (i=0; i<nkeys; i++) {",
          "4901:    eks[i][eksl[i]] = '\\0';",
          "4903:    efree(eks[i]);",
          "4904:    eks[i] = NULL;",
          "4905:   }",
          "",
          "[Removed Lines]",
          "4895:   buf = erealloc(buf, len1 + len2 + 1);",
          "4896:   ZVAL_STRINGL(sealdata, (char *)buf, len1 + len2, 0);",
          "4902:    add_next_index_stringl(ekeys, eks[i], eksl[i]);",
          "",
          "[Added Lines]",
          "4853:   ZVAL_STR(sealdata, STR_INIT((char*)buf, len1 + len2, 0));",
          "4854:   efree(buf);",
          "4860:    add_next_index_stringl(ekeys, (const char*)eks[i], eksl[i]);",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "4922: clean_exit:",
          "4923:  for (i=0; i<nkeys; i++) {",
          "4925:    EVP_PKEY_free(pkeys[i]);",
          "4926:   }",
          "4927:   if (eks[i]) {",
          "",
          "[Removed Lines]",
          "4924:   if (key_resources[i] == -1) {",
          "",
          "[Added Lines]",
          "4882:   if (key_resources[i] == NULL) {",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "4940: PHP_FUNCTION(openssl_open)",
          "4941: {",
          "4943:  EVP_PKEY *pkey;",
          "4944:  int len1, len2;",
          "4945:  unsigned char *buf;",
          "4947:  EVP_CIPHER_CTX ctx;",
          "4948:  char * data; int data_len;",
          "4949:  char * ekey; int ekey_len;",
          "",
          "[Removed Lines]",
          "4942:  zval **privkey, *opendata;",
          "4946:  long keyresource = -1;",
          "",
          "[Added Lines]",
          "4900:  zval *privkey, *opendata;",
          "4904:  zend_resource *keyresource = NULL;",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "4951:  int method_len = 0;",
          "4952:  const EVP_CIPHER *cipher;",
          "4955:   return;",
          "4956:  }",
          "4958:  pkey = php_openssl_evp_from_zval(privkey, 0, \"\", 0, &keyresource TSRMLS_CC);",
          "4959:  if (pkey == NULL) {",
          "",
          "[Removed Lines]",
          "4954:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"szsZ|s\", &data, &data_len, &opendata, &ekey, &ekey_len, &privkey, &method, &method_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "4912:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"szsz|s\", &data, &data_len, &opendata, &ekey, &ekey_len, &privkey, &method, &method_len) == FAILURE) {",
          "4915:  ZVAL_DEREF(opendata);",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "4980:   } else {",
          "4981:    zval_dtor(opendata);",
          "4982:    buf[len1 + len2] = '\\0';",
          "4984:    RETVAL_TRUE;",
          "4985:   }",
          "4986:  } else {",
          "4987:   efree(buf);",
          "4988:   RETVAL_FALSE;",
          "4989:  }",
          "4991:   EVP_PKEY_free(pkey);",
          "4992:  }",
          "4993:  EVP_CIPHER_CTX_cleanup(&ctx);",
          "",
          "[Removed Lines]",
          "4983:    ZVAL_STRINGL(opendata, erealloc(buf, len1 + len2 + 1), len1 + len2, 0);",
          "4990:  if (keyresource == -1) {",
          "",
          "[Added Lines]",
          "4942:    ZVAL_STR(opendata, STR_INIT((char*)buf, len1 + len2, 0));",
          "4943:    efree(buf);",
          "4950:  if (keyresource == NULL) {",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "5069:  if (EVP_DigestFinal (&md_ctx, (unsigned char *)sigbuf, (unsigned int *)&siglen)) {",
          "5070:   if (raw_output) {",
          "5071:    sigbuf[siglen] = '\\0';",
          "5073:   } else {",
          "5074:    int digest_str_len = siglen * 2;",
          "5075:    char *digest_str = emalloc(digest_str_len + 1);",
          "5077:    make_digest_ex(digest_str, sigbuf, siglen);",
          "5078:    efree(sigbuf);",
          "5080:   }",
          "5081:  } else {",
          "5082:   efree(sigbuf);",
          "",
          "[Removed Lines]",
          "5072:    RETVAL_STRINGL((char *)sigbuf, siglen, 0);",
          "5079:    RETVAL_STRINGL(digest_str, digest_str_len, 0);",
          "",
          "[Added Lines]",
          "5033:    RETVAL_STRINGL((char *)sigbuf, siglen);",
          "5034:    efree(sigbuf);",
          "5042:    RETVAL_STRINGL(digest_str, digest_str_len);",
          "5043:    efree(digest_str);",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "5175:   outlen += i;",
          "5176:   if (options & OPENSSL_RAW_DATA) {",
          "5177:    outbuf[outlen] = '\\0';",
          "5179:   } else {",
          "5184:    efree(outbuf);",
          "5186:   }",
          "5187:  } else {",
          "5188:   efree(outbuf);",
          "",
          "[Removed Lines]",
          "5178:    RETVAL_STRINGL((char *)outbuf, outlen, 0);",
          "5180:    int base64_str_len;",
          "5181:    char *base64_str;",
          "5183:    base64_str = (char*)php_base64_encode(outbuf, outlen, &base64_str_len);",
          "5185:    RETVAL_STRINGL(base64_str, base64_str_len, 0);",
          "",
          "[Added Lines]",
          "5143:    RETVAL_STRINGL((char *)outbuf, outlen);",
          "5144:    efree(outbuf);",
          "5146:    zend_string *base64_str;",
          "5148:    base64_str = php_base64_encode(outbuf, outlen);",
          "5150:    RETVAL_STR(base64_str);",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "5209:  EVP_CIPHER_CTX cipher_ctx;",
          "5210:  int i, outlen, keylen;",
          "5211:  unsigned char *outbuf, *key;",
          "5214:  zend_bool free_iv;",
          "5216:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"sss|ls\", &data, &data_len, &method, &method_len, &password, &password_len, &options, &iv, &iv_len) == FAILURE) {",
          "",
          "[Removed Lines]",
          "5212:  int base64_str_len;",
          "5213:  char *base64_str = NULL;",
          "",
          "[Added Lines]",
          "5177:  zend_string *base64_str = NULL;",
          "",
          "---------------",
          "--- Hunk 136 ---",
          "[Context before]",
          "5229:  }",
          "5231:  if (!(options & OPENSSL_RAW_DATA)) {",
          "5233:   if (!base64_str) {",
          "5234:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Failed to base64 decode the input\");",
          "5235:    RETURN_FALSE;",
          "5236:   }",
          "5239:  }",
          "5241:  keylen = EVP_CIPHER_key_length(cipher_type);",
          "",
          "[Removed Lines]",
          "5232:   base64_str = (char*)php_base64_decode((unsigned char*)data, data_len, &base64_str_len);",
          "5237:   data_len = base64_str_len;",
          "5238:   data = base64_str;",
          "",
          "[Added Lines]",
          "5196:   base64_str = php_base64_decode((unsigned char*)data, data_len);",
          "5201:   data_len = base64_str->len;",
          "5202:   data = base64_str->val;",
          "",
          "---------------",
          "--- Hunk 137 ---",
          "[Context before]",
          "5265:  if (EVP_DecryptFinal(&cipher_ctx, (unsigned char *)outbuf + i, &i)) {",
          "5266:   outlen += i;",
          "5267:   outbuf[outlen] = '\\0';",
          "5269:  } else {",
          "5270:   efree(outbuf);",
          "5271:   RETVAL_FALSE;",
          "",
          "[Removed Lines]",
          "5268:   RETVAL_STRINGL((char *)outbuf, outlen, 0);",
          "",
          "[Added Lines]",
          "5233:   RETVAL_STRINGL((char *)outbuf, outlen);",
          "5234:   efree(outbuf);",
          "",
          "---------------",
          "--- Hunk 138 ---",
          "[Context before]",
          "5277:   efree(iv);",
          "5278:  }",
          "5279:  if (base64_str) {",
          "5281:  }",
          "5282:   EVP_CIPHER_CTX_cleanup(&cipher_ctx);",
          "5283: }",
          "",
          "[Removed Lines]",
          "5280:   efree(base64_str);",
          "",
          "[Added Lines]",
          "5246:   STR_RELEASE(base64_str);",
          "",
          "---------------",
          "--- Hunk 139 ---",
          "[Context before]",
          "5325:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"sr\", &pub_str, &pub_len, &key) == FAILURE) {",
          "5326:   return;",
          "5327:  }",
          "5329:  if (!pkey || EVP_PKEY_type(pkey->type) != EVP_PKEY_DH || !pkey->pkey.dh) {",
          "5330:   RETURN_FALSE;",
          "5331:  }",
          "",
          "[Removed Lines]",
          "5328:  ZEND_FETCH_RESOURCE(pkey, EVP_PKEY *, &key, -1, \"OpenSSL key\", le_key);",
          "",
          "[Added Lines]",
          "5294:  ZEND_FETCH_RESOURCE(pkey, EVP_PKEY *, key, -1, \"OpenSSL key\", le_key);",
          "",
          "---------------",
          "--- Hunk 140 ---",
          "[Context before]",
          "5338:  if (len >= 0) {",
          "5339:   data[len] = 0;",
          "5341:  } else {",
          "5342:   efree(data);",
          "5343:   RETVAL_FALSE;",
          "",
          "[Removed Lines]",
          "5340:   RETVAL_STRINGL(data, len, 0);",
          "",
          "[Added Lines]",
          "5307:   RETVAL_STRINGL(data, len);",
          "5308:   efree(data);",
          "",
          "---------------",
          "--- Hunk 141 ---",
          "[Context before]",
          "5359:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"l|z\", &buffer_length, &zstrong_result_returned) == FAILURE) {",
          "5360:   return;",
          "5361:  }",
          "5363:  if (buffer_length <= 0) {",
          "5364:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5330:  ZVAL_DEREF(zstrong_result_returned);",
          "",
          "---------------",
          "--- Hunk 142 ---",
          "[Context before]",
          "5392: #endif",
          "5394:  buffer[buffer_length] = 0;",
          "5397:  if (zstrong_result_returned) {",
          "5398:   ZVAL_BOOL(zstrong_result_returned, strong_result);",
          "",
          "[Removed Lines]",
          "5395:  RETVAL_STRINGL((char *)buffer, buffer_length, 0);",
          "",
          "[Added Lines]",
          "5365:  RETVAL_STRINGL((char *)buffer, buffer_length);",
          "5366:  efree(buffer);",
          "",
          "---------------"
        ],
        "ext/openssl/xp_ssl.c||ext/openssl/xp_ssl.c": [
          "File: ext/openssl/xp_ssl.c -> ext/openssl/xp_ssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: #define STREAM_CRYPTO_METHOD_TLSv1_2       (1<<5)",
          "75: #define PHP_X509_NAME_ENTRY_TO_UTF8(ne, i, out) ASN1_STRING_to_UTF8(&out, X509_NAME_ENTRY_get_data(X509_NAME_get_entry(ne, i)))",
          "",
          "[Removed Lines]",
          "70: #define GET_VER_OPT(name)               (stream->context && SUCCESS == php_stream_context_get_option(stream->context, \"ssl\", name, &val))",
          "71: #define GET_VER_OPT_STRING(name, str)   if (GET_VER_OPT(name)) { convert_to_string_ex(val); str = Z_STRVAL_PP(val); }",
          "72: #define GET_VER_OPT_LONG(name, num)     if (GET_VER_OPT(name)) { convert_to_long_ex(val); num = Z_LVAL_PP(val); }",
          "",
          "[Added Lines]",
          "70: #define GET_VER_OPT(name)               (stream->context && (val = php_stream_context_get_option(stream->context, \"ssl\", name)) != NULL)",
          "71: #define GET_VER_OPT_STRING(name, str)   if (GET_VER_OPT(name)) { convert_to_string_ex(val); str = Z_STRVAL_P(val); }",
          "72: #define GET_VER_OPT_LONG(name, num)     if (GET_VER_OPT(name)) { convert_to_long_ex(val); num = Z_LVAL_P(val); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123: {",
          "128: #define SERVER_MICROSOFT_IIS \"Server: Microsoft-IIS\"",
          "129: #define SERVER_GOOGLE \"Server: GFE/\"",
          "135:     return 1;",
          "137:     return 1;",
          "138:    }",
          "142:  }",
          "143:  return 0;",
          "144: }",
          "",
          "[Removed Lines]",
          "124:  if (stream->wrapperdata && stream->wrapper && strcasecmp(stream->wrapper->wops->label, \"HTTP\") == 0) {",
          "126:   zval **tmp;",
          "131:   zend_hash_internal_pointer_reset(Z_ARRVAL_P(stream->wrapperdata));",
          "132:   while (SUCCESS == zend_hash_get_current_data(Z_ARRVAL_P(stream->wrapperdata), (void**)&tmp)) {",
          "134:    if (strncasecmp(Z_STRVAL_PP(tmp), SERVER_MICROSOFT_IIS, sizeof(SERVER_MICROSOFT_IIS)-1) == 0) {",
          "136:    } else if (strncasecmp(Z_STRVAL_PP(tmp), SERVER_GOOGLE, sizeof(SERVER_GOOGLE)-1) == 0) {",
          "140:    zend_hash_move_forward(Z_ARRVAL_P(stream->wrapperdata));",
          "141:   }",
          "",
          "[Added Lines]",
          "124:  if (Z_TYPE(stream->wrapperdata) == IS_ARRAY && stream->wrapper && strcasecmp(stream->wrapper->wops->label, \"HTTP\") == 0) {",
          "126:   zval *tmp;",
          "131:   ZEND_HASH_FOREACH_VAL(Z_ARRVAL(stream->wrapperdata), tmp) {",
          "132:    if (strncasecmp(Z_STRVAL_P(tmp), SERVER_MICROSOFT_IIS, sizeof(SERVER_MICROSOFT_IIS)-1) == 0) {",
          "134:    } else if (strncasecmp(Z_STRVAL_P(tmp), SERVER_GOOGLE, sizeof(SERVER_GOOGLE)-1) == 0) {",
          "137:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203:      do {",
          "205:       ERR_error_string_n(ecode, esbuf, sizeof(esbuf));",
          "207:        smart_str_appendc(&ebuf, '\\n');",
          "208:       }",
          "209:       smart_str_appends(&ebuf, esbuf);",
          "",
          "[Removed Lines]",
          "206:       if (ebuf.c) {",
          "",
          "[Added Lines]",
          "202:       if (ebuf.s) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "214:      php_error_docref(NULL TSRMLS_CC, E_WARNING,",
          "215:        \"SSL operation failed with code %d. %s%s\",",
          "216:        err,",
          "220:       smart_str_free(&ebuf);",
          "221:      }",
          "222:    }",
          "",
          "[Removed Lines]",
          "217:        ebuf.c ? \"OpenSSL Error messages:\\n\" : \"\",",
          "218:        ebuf.c ? ebuf.c : \"\");",
          "219:      if (ebuf.c) {",
          "",
          "[Added Lines]",
          "213:        ebuf.s ? \"OpenSSL Error messages:\\n\" : \"\",",
          "214:        ebuf.s ? ebuf.s->val : \"\");",
          "215:      if (ebuf.s) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "233:  php_stream *stream;",
          "234:  SSL *ssl;",
          "235:  int err, depth, ret;",
          "237:  unsigned long allowed_depth = OPENSSL_DEFAULT_STREAM_VERIFY_DEPTH;",
          "239:  TSRMLS_FETCH();",
          "",
          "[Removed Lines]",
          "236:  zval **val;",
          "",
          "[Added Lines]",
          "232:  zval *val;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "252:  if (err == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT &&",
          "253:   GET_VER_OPT(\"allow_self_signed\") &&",
          "255:  ) {",
          "256:   ret = 1;",
          "257:  }",
          "",
          "[Removed Lines]",
          "254:   zend_is_true(*val TSRMLS_CC)",
          "",
          "[Added Lines]",
          "250:   zend_is_true(val TSRMLS_CC)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "365: {",
          "367:  char *peer_name = NULL;",
          "368:  int err,",
          "369:   must_verify_peer,",
          "",
          "[Removed Lines]",
          "366:  zval **val = NULL;",
          "",
          "[Added Lines]",
          "362:  zval *val = NULL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "374:  php_openssl_netstream_data_t *sslsock = (php_openssl_netstream_data_t*)stream->abstract;",
          "376:  must_verify_peer = GET_VER_OPT(\"verify_peer\")",
          "378:   : sslsock->is_client;",
          "380:  has_cnmatch_ctx_opt = GET_VER_OPT(\"CN_match\");",
          "381:  must_verify_peer_name = (has_cnmatch_ctx_opt || GET_VER_OPT(\"verify_peer_name\"))",
          "383:   : sslsock->is_client;",
          "387:  if ((must_verify_peer || must_verify_peer_name || must_verify_fingerprint) && peer == NULL) {",
          "388:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Could not get peer certificate\");",
          "",
          "[Removed Lines]",
          "377:   ? zend_is_true(*val TSRMLS_CC)",
          "382:   ? zend_is_true(*val TSRMLS_CC)",
          "385:  must_verify_fingerprint = (GET_VER_OPT(\"peer_fingerprint\") && zend_is_true(*val TSRMLS_CC));",
          "",
          "[Added Lines]",
          "373:   ? zend_is_true(val TSRMLS_CC)",
          "378:   ? zend_is_true(val TSRMLS_CC)",
          "381:  must_verify_fingerprint = (GET_VER_OPT(\"peer_fingerprint\") && zend_is_true(val TSRMLS_CC));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "398:     break;",
          "399:    case X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT:",
          "402:      break;",
          "403:     }",
          "",
          "[Removed Lines]",
          "400:     if (GET_VER_OPT(\"allow_self_signed\") && zend_is_true(*val TSRMLS_CC)) {",
          "",
          "[Added Lines]",
          "396:     if (GET_VER_OPT(\"allow_self_signed\") && zend_is_true(val TSRMLS_CC)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "416:  if (must_verify_fingerprint) {",
          "419:     php_error_docref(NULL TSRMLS_CC, E_WARNING,",
          "420:      \"Peer fingerprint doesn't match\"",
          "421:     );",
          "",
          "[Removed Lines]",
          "417:   if (Z_TYPE_PP(val) == IS_STRING || Z_TYPE_PP(val) == IS_ARRAY) {",
          "418:    if (!php_x509_fingerprint_match(peer, *val TSRMLS_CC)) {",
          "",
          "[Added Lines]",
          "413:   if (Z_TYPE_P(val) == IS_STRING || Z_TYPE_P(val) == IS_ARRAY) {",
          "414:    if (!php_x509_fingerprint_match(peer, val TSRMLS_CC)) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "464: {",
          "465:  php_stream *stream = (php_stream *)data;",
          "467:  char *passphrase = NULL;",
          "470:  GET_VER_OPT_STRING(\"passphrase\", passphrase);",
          "472:  if (passphrase) {",
          "476:   }",
          "477:  }",
          "478:  return 0;",
          "",
          "[Removed Lines]",
          "466:  zval **val = NULL;",
          "473:   if (Z_STRLEN_PP(val) < num - 1) {",
          "474:    memcpy(buf, Z_STRVAL_PP(val), Z_STRLEN_PP(val)+1);",
          "475:    return Z_STRLEN_PP(val);",
          "",
          "[Added Lines]",
          "462:  zval *val = NULL;",
          "469:   if (Z_STRLEN_P(val) < num - 1) {",
          "470:    memcpy(buf, Z_STRVAL_P(val), Z_STRLEN_P(val)+1);",
          "471:    return Z_STRLEN_P(val);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "728: {",
          "730:  char *cafile = NULL;",
          "731:  char *capath = NULL;",
          "",
          "[Removed Lines]",
          "729:  zval **val = NULL;",
          "",
          "[Added Lines]",
          "725:  zval *val = NULL;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "734:  GET_VER_OPT_STRING(\"capath\", capath);",
          "736:  if (!cafile) {",
          "738:   cafile = strlen(cafile) ? cafile : NULL;",
          "739:  }",
          "741:  if (!capath) {",
          "743:   capath = strlen(capath) ? capath : NULL;",
          "744:  }",
          "",
          "[Removed Lines]",
          "737:   cafile = zend_ini_string(\"openssl.cafile\", sizeof(\"openssl.cafile\"), 0);",
          "742:   capath = zend_ini_string(\"openssl.capath\", sizeof(\"openssl.capath\"), 0);",
          "",
          "[Added Lines]",
          "733:   cafile = zend_ini_string(\"openssl.cafile\", sizeof(\"openssl.cafile\")-1, 0);",
          "738:   capath = zend_ini_string(\"openssl.capath\", sizeof(\"openssl.capath\")-1, 0);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "781: {",
          "783:  char *certfile = NULL;",
          "785:  GET_VER_OPT_STRING(\"local_cert\", certfile);",
          "",
          "[Removed Lines]",
          "782:  zval **val = NULL;",
          "",
          "[Added Lines]",
          "778:  zval *val = NULL;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "938:  if (sslsock->reneg->tokens > sslsock->reneg->limit) {",
          "941:   TSRMLS_FETCH();",
          "943:   sslsock->reneg->should_close = 1;",
          "947:   ) {",
          "955:    stream->flags |= PHP_STREAM_FLAG_NO_FCLOSE;",
          "957:     php_error(E_WARNING, \"SSL: failed invoking reneg limit notification callback\");",
          "958:    }",
          "959:    stream->flags ^= PHP_STREAM_FLAG_NO_FCLOSE;",
          "963:     sslsock->reneg->should_close = 0;",
          "964:    }",
          "970:   } else {",
          "971:    php_error_docref(NULL TSRMLS_CC, E_WARNING,",
          "972:     \"SSL: client-initiated handshake rate limit exceeded by peer\");",
          "",
          "[Removed Lines]",
          "939:   zval **val;",
          "945:   if (stream->context && SUCCESS == php_stream_context_get_option(stream->context,",
          "946:     \"ssl\", \"reneg_limit_callback\", &val)",
          "948:    zval *param, **params[1], *retval;",
          "950:    MAKE_STD_ZVAL(param);",
          "951:    php_stream_to_zval(stream, param);",
          "952:    params[0] = &param;",
          "956:    if (FAILURE == call_user_function_ex(EG(function_table), NULL, *val, &retval, 1, params, 0, NULL TSRMLS_CC)) {",
          "962:    if (retval != NULL && Z_TYPE_P(retval) == IS_BOOL && Z_BVAL_P(retval) == 1) {",
          "966:    FREE_ZVAL(param);",
          "967:    if (retval != NULL) {",
          "968:     zval_ptr_dtor(&retval);",
          "969:    }",
          "",
          "[Added Lines]",
          "935:   zval *val;",
          "941:   if (stream->context && (val = php_stream_context_get_option(stream->context,",
          "942:     \"ssl\", \"reneg_limit_callback\")) != NULL",
          "944:    zval param, retval;",
          "946:    php_stream_to_zval(stream, &param);",
          "950:    if (FAILURE == call_user_function_ex(EG(function_table), NULL, val, &retval, 1, &param, 0, NULL TSRMLS_CC)) {",
          "956:    if (Z_TYPE(retval) == IS_TRUE) {",
          "960:    zval_ptr_dtor(&retval);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "988: {",
          "990:  long limit = OPENSSL_DEFAULT_RENEG_LIMIT;",
          "991:  long window = OPENSSL_DEFAULT_RENEG_WINDOW;",
          "993:  if (stream->context &&",
          "996:  ) {",
          "999:  }",
          "",
          "[Removed Lines]",
          "989:  zval **val;",
          "994:   SUCCESS == php_stream_context_get_option(stream->context,",
          "995:     \"ssl\", \"reneg_limit\", &val)",
          "997:   convert_to_long(*val);",
          "998:   limit = Z_LVAL_PP(val);",
          "",
          "[Added Lines]",
          "980:  zval *val;",
          "985:   NULL != (val = php_stream_context_get_option(stream->context,",
          "986:     \"ssl\", \"reneg_limit\"))",
          "988:   convert_to_long(val);",
          "989:   limit = Z_LVAL_P(val);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1004:  }",
          "1006:  if (stream->context &&",
          "1009:  ) {",
          "1012:  }",
          "1014:  sslsock->reneg = (void*)pemalloc(sizeof(php_openssl_handshake_bucket_t),",
          "",
          "[Removed Lines]",
          "1007:   SUCCESS == php_stream_context_get_option(stream->context,",
          "1008:     \"ssl\", \"reneg_window\", &val)",
          "1010:   convert_to_long(*val);",
          "1011:   window = Z_LVAL_PP(val);",
          "",
          "[Added Lines]",
          "998:   NULL != (val = php_stream_context_get_option(stream->context,",
          "999:     \"ssl\", \"reneg_window\"))",
          "1001:   convert_to_long(val);",
          "1002:   window = Z_LVAL_P(val);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1029: {",
          "1031:  int rsa_key_size;",
          "1032:  RSA* rsa;",
          "1036:   if ((rsa_key_size != 1) && (rsa_key_size & (rsa_key_size - 1))) {",
          "1037:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"RSA key size requires a power of 2: %d\", rsa_key_size);",
          "1038:    rsa_key_size = 2048;",
          "",
          "[Removed Lines]",
          "1030:  zval ** val;",
          "1034:  if (php_stream_context_get_option(stream->context, \"ssl\", \"rsa_key_size\", &val) == SUCCESS) {",
          "1035:   rsa_key_size = (int) Z_LVAL_PP(val);",
          "",
          "[Added Lines]",
          "1021:  zval *val;",
          "1025:  if ((val = php_stream_context_get_option(stream->context, \"ssl\", \"rsa_key_size\")) != NULL) {",
          "1026:   rsa_key_size = (int) Z_LVAL_P(val);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1090: #ifdef HAVE_ECDH",
          "1092: {",
          "1094:  int curve_nid;",
          "1095:  char *curve_str;",
          "1096:  EC_KEY *ecdh;",
          "1099:   convert_to_string_ex(val);",
          "1101:   curve_nid = OBJ_sn2nid(curve_str);",
          "1102:   if (curve_nid == NID_undef) {",
          "1103:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid ECDH curve: %s\", curve_str);",
          "",
          "[Removed Lines]",
          "1093:  zval **val;",
          "1098:  if (php_stream_context_get_option(stream->context, \"ssl\", \"ecdh_curve\", &val) == SUCCESS) {",
          "1100:   curve_str = Z_STRVAL_PP(val);",
          "",
          "[Added Lines]",
          "1084:  zval *val;",
          "1089:  if ((val = php_stream_context_get_option(stream->context, \"ssl\", \"ecdh_curve\")) != NULL) {",
          "1091:   curve_str = Z_STRVAL_P(val);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1127: {",
          "1129:  long ssl_ctx_options = SSL_CTX_get_options(ctx);",
          "1131: #ifdef HAVE_ECDH",
          "",
          "[Removed Lines]",
          "1128:  zval **val;",
          "",
          "[Added Lines]",
          "1119:  zval *val;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1141:  }",
          "1142: #endif",
          "1145:   convert_to_string_ex(val);",
          "1147:    return FAILURE;",
          "1148:   }",
          "1149:  }",
          "",
          "[Removed Lines]",
          "1144:  if (php_stream_context_get_option(stream->context, \"ssl\", \"dh_param\", &val) == SUCCESS) {",
          "1146:   if (FAILURE == set_server_dh_param(ctx,  Z_STRVAL_PP(val) TSRMLS_CC)) {",
          "",
          "[Added Lines]",
          "1135:  if ((val = php_stream_context_get_option(stream->context, \"ssl\", \"dh_param\")) != NULL) {",
          "1137:   if (FAILURE == set_server_dh_param(ctx,  Z_STRVAL_P(val) TSRMLS_CC)) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1152:   return FAILURE;",
          "1153:  }",
          "1158:  ) {",
          "1159:   ssl_ctx_options |= SSL_OP_CIPHER_SERVER_PREFERENCE;",
          "1160:  }",
          "1165:  ) {",
          "1166:   ssl_ctx_options |= SSL_OP_SINGLE_DH_USE;",
          "1167:  }",
          "1172:  ) {",
          "1173:   ssl_ctx_options |= SSL_OP_SINGLE_ECDH_USE;",
          "1174:  }",
          "",
          "[Removed Lines]",
          "1155:  if (SUCCESS == php_stream_context_get_option(",
          "1156:     stream->context, \"ssl\", \"honor_cipher_order\", &val) &&",
          "1157:    zend_is_true(*val TSRMLS_CC)",
          "1162:  if (SUCCESS == php_stream_context_get_option(",
          "1163:     stream->context, \"ssl\", \"single_dh_use\", &val) &&",
          "1164:    zend_is_true(*val TSRMLS_CC)",
          "1169:  if (SUCCESS == php_stream_context_get_option(",
          "1170:     stream->context, \"ssl\", \"single_ecdh_use\", &val) &&",
          "1171:    zend_is_true(*val TSRMLS_CC)",
          "",
          "[Added Lines]",
          "1146:  if (NULL != (val = php_stream_context_get_option(",
          "1147:     stream->context, \"ssl\", \"honor_cipher_order\")) &&",
          "1148:    zend_is_true(val TSRMLS_CC)",
          "1153:  if (NULL != (val = php_stream_context_get_option(",
          "1154:     stream->context, \"ssl\", \"single_dh_use\")) &&",
          "1155:    zend_is_true(val TSRMLS_CC)",
          "1160:  if (NULL != (val = php_stream_context_get_option(",
          "1161:     stream->context, \"ssl\", \"single_ecdh_use\")) &&",
          "1162:    zend_is_true(val TSRMLS_CC)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1214: static int enable_server_sni(php_stream *stream, php_openssl_netstream_data_t *sslsock TSRMLS_DC)",
          "1215: {",
          "1220:  ulong key_index;",
          "1223:  int i = 0;",
          "1224:  char resolved_path_buff[MAXPATHLEN];",
          "1225:  SSL_CTX *ctx;",
          "1229:   return SUCCESS;",
          "1230:  }",
          "",
          "[Removed Lines]",
          "1216:  zval **val;",
          "1217:  zval **current;",
          "1218:  char *key;",
          "1219:  uint key_len;",
          "1221:  int key_type;",
          "1222:  HashPosition pos;",
          "1228:  if (GET_VER_OPT(\"SNI_enabled\") && !zend_is_true(*val TSRMLS_CC)) {",
          "",
          "[Added Lines]",
          "1207:  zval *val;",
          "1208:  zval *current;",
          "1209:  zend_string *key;",
          "1216:  if (GET_VER_OPT(\"SNI_enabled\") && !zend_is_true(val TSRMLS_CC)) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1234:   return SUCCESS;",
          "1235:  }",
          "1238:   php_error_docref(NULL TSRMLS_CC, E_WARNING,",
          "1239:    \"SNI_server_certs requires an array mapping host names to cert paths\"",
          "1240:   );",
          "1241:   return FAILURE;",
          "1242:  }",
          "1245:  if (sslsock->sni_cert_count == 0) {",
          "1246:   php_error_docref(NULL TSRMLS_CC, E_WARNING,",
          "1247:    \"SNI_server_certs host cert array must not be empty\"",
          "",
          "[Removed Lines]",
          "1237:  if (Z_TYPE_PP(val) != IS_ARRAY) {",
          "1244:  sslsock->sni_cert_count = zend_hash_num_elements(Z_ARRVAL_PP(val));",
          "",
          "[Added Lines]",
          "1225:  if (Z_TYPE_P(val) != IS_ARRAY) {",
          "1232:  sslsock->sni_cert_count = zend_hash_num_elements(Z_ARRVAL_P(val));",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1253:   sizeof(php_openssl_sni_cert_t), 0, php_stream_is_persistent(stream)",
          "1254:  );",
          "1262:    php_error_docref(NULL TSRMLS_CC, E_WARNING,",
          "1263:     \"SNI_server_certs array requires string host name keys\"",
          "1264:    );",
          "1265:    return FAILURE;",
          "1266:   }",
          "1271:    ctx = SSL_CTX_new(SSLv23_server_method());",
          "",
          "[Removed Lines]",
          "1256:  for (zend_hash_internal_pointer_reset_ex(Z_ARRVAL_PP(val), &pos);",
          "1257:   zend_hash_get_current_data_ex(Z_ARRVAL_PP(val), (void **)&current, &pos) == SUCCESS;",
          "1258:   zend_hash_move_forward_ex(Z_ARRVAL_PP(val), &pos)",
          "1259:  ) {",
          "1260:   key_type = zend_hash_get_current_key_ex(Z_ARRVAL_PP(val), &key, &key_len, &key_index, 0, &pos);",
          "1261:   if (key_type != HASH_KEY_IS_STRING) {",
          "1268:   if (VCWD_REALPATH(Z_STRVAL_PP(current), resolved_path_buff)) {",
          "",
          "[Added Lines]",
          "1244:  ZEND_HASH_FOREACH_KEY_VAL(Z_ARRVAL_P(val), key_index,key, current) {",
          "1245:   if (!key) {",
          "1252:   if (VCWD_REALPATH(Z_STRVAL_P(current), resolved_path_buff)) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1287:     SSL_CTX_free(ctx);",
          "1288:     return FAILURE;",
          "1289:    } else {",
          "1291:     sslsock->sni_certs[i].ctx = ctx;",
          "1292:     ++i;",
          "1293:    }",
          "1294:   } else {",
          "1295:    php_error_docref(NULL TSRMLS_CC, E_WARNING,",
          "1296:     \"failed setting local cert chain file `%s'; file not found\",",
          "1298:    );",
          "1299:    return FAILURE;",
          "1300:   }",
          "1303:  SSL_CTX_set_tlsext_servername_callback(sslsock->ctx, server_sni_callback);",
          "",
          "[Removed Lines]",
          "1290:     sslsock->sni_certs[i].name = pestrdup(key, php_stream_is_persistent(stream));",
          "1297:     Z_STRVAL_PP(current)",
          "1301:  }",
          "",
          "[Added Lines]",
          "1274:     sslsock->sni_certs[i].name = pestrdup(key->val, php_stream_is_persistent(stream));",
          "1281:     Z_STRVAL_P(current)",
          "1285:  } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1309: {",
          "1311:  char *sni_server_name;",
          "1315:   return;",
          "1316:  }",
          "",
          "[Removed Lines]",
          "1310:  zval **val;",
          "1314:  if (GET_VER_OPT(\"SNI_enabled\") && !zend_is_true(*val TSRMLS_CC)) {",
          "",
          "[Added Lines]",
          "1294:  zval *val;",
          "1298:  if (GET_VER_OPT(\"SNI_enabled\") && !zend_is_true(val TSRMLS_CC)) {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1340:  long ssl_ctx_options;",
          "1341:  long method_flags;",
          "1342:  char *cipherlist = NULL;",
          "1345:  if (sslsock->ssl_handle) {",
          "1346:   if (sslsock->s.is_blocked) {",
          "",
          "[Removed Lines]",
          "1343:  zval **val;",
          "",
          "[Added Lines]",
          "1327:  zval *val;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1386:  }",
          "1388: #if OPENSSL_VERSION_NUMBER >= 0x0090806fL",
          "1390:   ssl_ctx_options |= SSL_OP_NO_TICKET;",
          "1391:  }",
          "1392: #endif",
          "",
          "[Removed Lines]",
          "1389:  if (GET_VER_OPT(\"no_ticket\") && zend_is_true(*val TSRMLS_CC)) {",
          "",
          "[Added Lines]",
          "1373:  if (GET_VER_OPT(\"no_ticket\") && zend_is_true(val TSRMLS_CC)) {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1396: #endif",
          "1398: #if OPENSSL_VERSION_NUMBER >= 0x10000000L",
          "1400:   ssl_ctx_options |= SSL_OP_NO_COMPRESSION;",
          "1401:  }",
          "1402: #endif",
          "1405:   disable_peer_verification(sslsock->ctx, stream TSRMLS_CC);",
          "1406:  } else if (FAILURE == enable_peer_verification(sslsock->ctx, stream TSRMLS_CC)) {",
          "1407:   return FAILURE;",
          "",
          "[Removed Lines]",
          "1399:  if (!GET_VER_OPT(\"disable_compression\") || zend_is_true(*val TSRMLS_CC)) {",
          "1404:  if (GET_VER_OPT(\"verify_peer\") && !zend_is_true(*val TSRMLS_CC)) {",
          "",
          "[Added Lines]",
          "1383:  if (!GET_VER_OPT(\"disable_compression\") || zend_is_true(val TSRMLS_CC)) {",
          "1388:  if (GET_VER_OPT(\"verify_peer\") && !zend_is_true(val TSRMLS_CC)) {",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1481: }",
          "1485: {",
          "1487:  char *proto_str;",
          "1488:  long proto = SSL_version(ssl_handle);",
          "1489:  const SSL_CIPHER *cipher = SSL_get_current_cipher(ssl_handle);",
          "",
          "[Removed Lines]",
          "1486:  zval *meta_arr;",
          "",
          "[Added Lines]",
          "1470:  zval meta_arr;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1499:   default: proto_str = \"UNKNOWN\";",
          "1500:  }",
          "1510: }",
          "1514: {",
          "1516:  int cert_captured = 0;",
          "1521:  ) {",
          "1525:   cert_captured = 1;",
          "1527:  }",
          "1532:  ) {",
          "1534:   STACK_OF(X509) *chain;",
          "1537:   chain = SSL_get_peer_cert_chain(sslsock->ssl_handle);",
          "1539:   if (chain && sk_X509_num(chain) > 0) {",
          "1540:    int i;",
          "1543:    for (i = 0; i < sk_X509_num(chain); i++) {",
          "1544:     X509 *mycert = X509_dup(sk_X509_value(chain, i));",
          "1548:    }",
          "1550:   } else {",
          "1552:   }",
          "1557:  }",
          "1559:  return cert_captured;",
          "",
          "[Removed Lines]",
          "1502:  MAKE_STD_ZVAL(meta_arr);",
          "1503:  array_init(meta_arr);",
          "1504:  add_assoc_string(meta_arr, \"protocol\", proto_str, 1);",
          "1505:  add_assoc_string(meta_arr, \"cipher_name\", (char *) SSL_CIPHER_get_name(cipher), 1);",
          "1506:  add_assoc_long(meta_arr, \"cipher_bits\", SSL_CIPHER_get_bits(cipher, NULL));",
          "1507:  add_assoc_string(meta_arr, \"cipher_version\", SSL_CIPHER_get_version(cipher), 1);",
          "1509:  return meta_arr;",
          "1515:  zval **val, *zcert;",
          "1518:  if (SUCCESS == php_stream_context_get_option(stream->context,",
          "1519:    \"ssl\", \"capture_peer_cert\", &val) &&",
          "1520:   zend_is_true(*val TSRMLS_CC)",
          "1522:   MAKE_STD_ZVAL(zcert);",
          "1523:   ZVAL_RESOURCE(zcert, zend_list_insert(peer_cert, php_openssl_get_x509_list_id() TSRMLS_CC));",
          "1524:   php_stream_context_set_option(stream->context, \"ssl\", \"peer_certificate\", zcert);",
          "1526:   FREE_ZVAL(zcert);",
          "1529:  if (SUCCESS == php_stream_context_get_option(stream->context,",
          "1530:    \"ssl\", \"capture_peer_cert_chain\", &val) &&",
          "1531:   zend_is_true(*val TSRMLS_CC)",
          "1533:   zval *arr;",
          "1536:   MAKE_STD_ZVAL(arr);",
          "1541:    array_init(arr);",
          "1545:     MAKE_STD_ZVAL(zcert);",
          "1546:     ZVAL_RESOURCE(zcert, zend_list_insert(mycert, php_openssl_get_x509_list_id() TSRMLS_CC));",
          "1547:     add_next_index_zval(arr, zcert);",
          "1551:    ZVAL_NULL(arr);",
          "1554:   php_stream_context_set_option(stream->context, \"ssl\", \"peer_certificate_chain\", arr);",
          "1555:   zval_dtor(arr);",
          "1556:   efree(arr);",
          "",
          "[Added Lines]",
          "1486:  array_init(&meta_arr);",
          "1487:  add_assoc_string(&meta_arr, \"protocol\", proto_str);",
          "1488:  add_assoc_string(&meta_arr, \"cipher_name\", (char *) SSL_CIPHER_get_name(cipher));",
          "1489:  add_assoc_long(&meta_arr, \"cipher_bits\", SSL_CIPHER_get_bits(cipher, NULL));",
          "1490:  add_assoc_string(&meta_arr, \"cipher_version\", SSL_CIPHER_get_version(cipher));",
          "1492:  return Z_ARR(meta_arr);",
          "1498:  zval *val, zcert;",
          "1501:  if (NULL != (val = php_stream_context_get_option(stream->context,",
          "1502:    \"ssl\", \"capture_peer_cert\")) &&",
          "1503:   zend_is_true(val TSRMLS_CC)",
          "1505:   zend_register_resource(&zcert, peer_cert, php_openssl_get_x509_list_id() TSRMLS_CC);",
          "1506:   php_stream_context_set_option(stream->context, \"ssl\", \"peer_certificate\", &zcert);",
          "1510:  if (NULL != (val = php_stream_context_get_option(stream->context,",
          "1511:    \"ssl\", \"capture_peer_cert_chain\")) &&",
          "1512:   zend_is_true(val TSRMLS_CC)",
          "1514:   zval arr;",
          "1521:    array_init(&arr);",
          "1525:     zend_register_resource(&zcert, mycert, php_openssl_get_x509_list_id() TSRMLS_CC);",
          "1526:     add_next_index_zval(&arr, &zcert);",
          "1530:    ZVAL_NULL(&arr);",
          "1533:   php_stream_context_set_option(stream->context, \"ssl\", \"peer_certificate_chain\", &arr);",
          "1534:   zval_dtor(&arr);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1671:     sslsock->ssl_active = 1;",
          "1673:     if (stream->context) {",
          "1679:      ) {",
          "1684:      }",
          "1685:     }",
          "1686:    }",
          "",
          "[Removed Lines]",
          "1674:      zval **val;",
          "1676:      if (SUCCESS == php_stream_context_get_option(stream->context,",
          "1677:        \"ssl\", \"capture_session_meta\", &val) &&",
          "1678:       zend_is_true(*val TSRMLS_CC)",
          "1680:       zval *meta_arr = capture_session_meta(sslsock->ssl_handle);",
          "1681:       php_stream_context_set_option(stream->context, \"ssl\", \"session_meta\", meta_arr);",
          "1682:       zval_dtor(meta_arr);",
          "1683:       efree(meta_arr);",
          "",
          "[Added Lines]",
          "1652:      zval *val;",
          "1654:      if (NULL != (val = php_stream_context_get_option(stream->context,",
          "1655:        \"ssl\", \"capture_session_meta\")) &&",
          "1656:       zend_is_true(val TSRMLS_CC)",
          "1658:       zval meta_arr;",
          "1659:       ZVAL_ARR(&meta_arr, capture_session_meta(sslsock->ssl_handle));",
          "1660:       php_stream_context_set_option(stream->context, \"ssl\", \"session_meta\", &meta_arr);",
          "1661:       zval_dtor(&meta_arr);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1902:    if (xparam->outputs.client) {",
          "1903:     xparam->outputs.client->context = stream->context;",
          "1904:     if (stream->context) {",
          "1906:     }",
          "1907:    }",
          "1908:   }",
          "",
          "[Removed Lines]",
          "1905:      zend_list_addref(stream->context->rsrc_id);",
          "",
          "[Added Lines]",
          "1883:      stream->context->res->gc.refcount++;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2099: static long get_crypto_method(php_stream_context *ctx, long crypto_method)",
          "2100: {",
          "2104:   convert_to_long_ex(val);",
          "2106:          crypto_method |= STREAM_CRYPTO_IS_CLIENT;",
          "2107:  }",
          "",
          "[Removed Lines]",
          "2101:  zval **val;",
          "2103:  if (ctx && php_stream_context_get_option(ctx, \"ssl\", \"crypto_method\", &val) == SUCCESS) {",
          "2105:   crypto_method = (long)Z_LVAL_PP(val);",
          "",
          "[Added Lines]",
          "2079:  zval *val;",
          "2081:  if (ctx && (val = php_stream_context_get_option(ctx, \"ssl\", \"crypto_method\")) != NULL) {",
          "2083:   crypto_method = (long)Z_LVAL_P(val);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "76af988fece55a6228d892bb736c76916b8f6864",
      "candidate_info": {
        "commit_hash": "76af988fece55a6228d892bb736c76916b8f6864",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/76af988fece55a6228d892bb736c76916b8f6864",
        "files": [
          "ext/openssl/openssl.c",
          "ext/openssl/tests/cve2013_4073.pem",
          "ext/openssl/tests/cve2013_4073.phpt"
        ],
        "message": "Fix CVE-2013-4073 - handling of certs with null bytes",
        "before_after_code_files": [
          "ext/openssl/openssl.c||ext/openssl/openssl.c",
          "ext/openssl/tests/cve2013_4073.pem||ext/openssl/tests/cve2013_4073.pem",
          "ext/openssl/tests/cve2013_4073.phpt||ext/openssl/tests/cve2013_4073.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ext/openssl/openssl.c||ext/openssl/openssl.c",
            "ext/openssl/tests/cve2013_4073.pem||ext/openssl/tests/cve2013_4073.pem",
            "ext/openssl/tests/cve2013_4073.phpt||ext/openssl/tests/cve2013_4073.phpt"
          ],
          "candidate": [
            "ext/openssl/openssl.c||ext/openssl/openssl.c",
            "ext/openssl/tests/cve2013_4073.pem||ext/openssl/tests/cve2013_4073.pem",
            "ext/openssl/tests/cve2013_4073.phpt||ext/openssl/tests/cve2013_4073.phpt"
          ]
        }
      },
      "candidate_diff": {
        "ext/openssl/openssl.c||ext/openssl/openssl.c": [
          "File: ext/openssl/openssl.c -> ext/openssl/openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1398: }",
          "1403: PHP_FUNCTION(openssl_x509_parse)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1405: static int openssl_x509v3_subjectAltName(BIO *bio, X509_EXTENSION *extension)",
          "1406: {",
          "1407:  GENERAL_NAMES *names;",
          "1408:  const X509V3_EXT_METHOD *method = NULL;",
          "1409:  long i, length, num;",
          "1410:  const unsigned char *p;",
          "1412:  method = X509V3_EXT_get(extension);",
          "1413:  if (method == NULL) {",
          "1414:   return -1;",
          "1415:  }",
          "1417:  p = extension->value->data;",
          "1418:  length = extension->value->length;",
          "1419:  if (method->it) {",
          "1420:   names = (GENERAL_NAMES*)(ASN1_item_d2i(NULL, &p, length,",
          "1421:              ASN1_ITEM_ptr(method->it)));",
          "1422:  } else {",
          "1423:   names = (GENERAL_NAMES*)(method->d2i(NULL, &p, length));",
          "1424:  }",
          "1425:  if (names == NULL) {",
          "1426:   return -1;",
          "1427:  }",
          "1429:  num = sk_GENERAL_NAME_num(names);",
          "1430:  for (i = 0; i < num; i++) {",
          "1431:    GENERAL_NAME *name;",
          "1432:    ASN1_STRING *as;",
          "1433:    name = sk_GENERAL_NAME_value(names, i);",
          "1434:    switch (name->type) {",
          "1435:     case GEN_EMAIL:",
          "1436:      BIO_puts(bio, \"email:\");",
          "1437:      as = name->d.rfc822Name;",
          "1438:      BIO_write(bio, ASN1_STRING_data(as),",
          "1439:         ASN1_STRING_length(as));",
          "1440:      break;",
          "1441:     case GEN_DNS:",
          "1442:      BIO_puts(bio, \"DNS:\");",
          "1443:      as = name->d.dNSName;",
          "1444:      BIO_write(bio, ASN1_STRING_data(as),",
          "1445:         ASN1_STRING_length(as));",
          "1446:      break;",
          "1447:     case GEN_URI:",
          "1448:      BIO_puts(bio, \"URI:\");",
          "1449:      as = name->d.uniformResourceIdentifier;",
          "1450:      BIO_write(bio, ASN1_STRING_data(as),",
          "1451:         ASN1_STRING_length(as));",
          "1452:      break;",
          "1453:     default:",
          "1457:      GENERAL_NAME_print(bio, name);",
          "1458:    }",
          "1460:    if (i < (num - 1)) {",
          "1461:     BIO_puts(bio, \", \");",
          "1462:    }",
          "1463:  }",
          "1464:  sk_GENERAL_NAME_pop_free(names, GENERAL_NAME_free);",
          "1466:  return 0;",
          "1467: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1496:  for (i = 0; i < X509_get_ext_count(cert); i++) {",
          "1497:   extension = X509_get_ext(cert, i);",
          "1499:    extname = (char *)OBJ_nid2sn(OBJ_obj2nid(X509_EXTENSION_get_object(extension)));",
          "1500:   } else {",
          "1501:    OBJ_obj2txt(buf, sizeof(buf)-1, X509_EXTENSION_get_object(extension), 1);",
          "1502:    extname = buf;",
          "1503:   }",
          "1504:   bio_out = BIO_new(BIO_s_mem());",
          "1506:    BIO_get_mem_ptr(bio_out, &bio_buf);",
          "1507:    add_assoc_stringl(subitem, extname, bio_buf->data, bio_buf->length, 1);",
          "1508:   } else {",
          "",
          "[Removed Lines]",
          "1498:   if (OBJ_obj2nid(X509_EXTENSION_get_object(extension)) != NID_undef) {",
          "1505:   if (X509V3_EXT_print(bio_out, extension, 0, 0)) {",
          "",
          "[Added Lines]",
          "1565:   int nid;",
          "1567:   nid = OBJ_obj2nid(X509_EXTENSION_get_object(extension));",
          "1568:   if (nid != NID_undef) {",
          "1575:   if (nid == NID_subject_alt_name) {",
          "1576:    if (openssl_x509v3_subjectAltName(bio_out, extension) == 0) {",
          "1577:     add_assoc_stringl(subitem, extname, bio_buf->data, bio_buf->length, 1);",
          "1578:    } else {",
          "1579:     zval_dtor(return_value);",
          "1580:     if (certresource == -1 && cert) {",
          "1581:      X509_free(cert);",
          "1582:     }",
          "1583:     BIO_free(bio_out);",
          "1584:     RETURN_FALSE;",
          "1585:    }",
          "1586:   }",
          "1587:   else if (X509V3_EXT_print(bio_out, extension, 0, 0)) {",
          "",
          "---------------"
        ],
        "ext/openssl/tests/cve2013_4073.pem||ext/openssl/tests/cve2013_4073.pem": [
          "File: ext/openssl/tests/cve2013_4073.pem -> ext/openssl/tests/cve2013_4073.pem",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: -----BEGIN CERTIFICATE-----",
          "2: MIIE2DCCA8CgAwIBAgIBADANBgkqhkiG9w0BAQUFADCBxTELMAkGA1UEBhMCVVMx",
          "3: DzANBgNVBAgMBk9yZWdvbjESMBAGA1UEBwwJQmVhdmVydG9uMSMwIQYDVQQKDBpQ",
          "4: eXRob24gU29mdHdhcmUgRm91bmRhdGlvbjEgMB4GA1UECwwXUHl0aG9uIENvcmUg",
          "5: RGV2ZWxvcG1lbnQxJDAiBgNVBAMMG251bGwucHl0aG9uLm9yZwBleGFtcGxlLm9y",
          "6: ZzEkMCIGCSqGSIb3DQEJARYVcHl0aG9uLWRldkBweXRob24ub3JnMB4XDTEzMDgw",
          "7: NzEzMTE1MloXDTEzMDgwNzEzMTI1MlowgcUxCzAJBgNVBAYTAlVTMQ8wDQYDVQQI",
          "8: DAZPcmVnb24xEjAQBgNVBAcMCUJlYXZlcnRvbjEjMCEGA1UECgwaUHl0aG9uIFNv",
          "9: ZnR3YXJlIEZvdW5kYXRpb24xIDAeBgNVBAsMF1B5dGhvbiBDb3JlIERldmVsb3Bt",
          "10: ZW50MSQwIgYDVQQDDBtudWxsLnB5dGhvbi5vcmcAZXhhbXBsZS5vcmcxJDAiBgkq",
          "11: hkiG9w0BCQEWFXB5dGhvbi1kZXZAcHl0aG9uLm9yZzCCASIwDQYJKoZIhvcNAQEB",
          "12: BQADggEPADCCAQoCggEBALXq7cn7Rn1vO3aA3TrzA5QLp6bb7B3f/yN0CJ2XFj+j",
          "13: pHs+Gw6WWSUDpybiiKnPec33BFawq3kyblnBMjBU61ioy5HwQqVkJ8vUVjGIUq3P",
          "14: vX/wBmQfzCe4o4uM89gpHyUL9UYGG8oCRa17dgqcv7u5rg0Wq2B1rgY+nHwx3JIv",
          "15: KRrgSwyRkGzpN8WQ1yrXlxWjgI9de0mPVDDUlywcWze1q2kwaEPTM3hLAmD1PESA",
          "16: oY/n8A/RXoeeRs9i/Pm/DGUS8ZPINXk/yOzsR/XvvkTVroIeLZqfmFpnZeF0cHzL",
          "17: 08LODkVJJ9zjLdT7SA4vnne4FEbAxDbKAq5qkYzaL4UCAwEAAaOB0DCBzTAMBgNV",
          "18: HRMBAf8EAjAAMB0GA1UdDgQWBBSIWlXAUv9hzVKjNQ/qWpwkOCL3XDALBgNVHQ8E",
          "19: BAMCBeAwgZAGA1UdEQSBiDCBhYIeYWx0bnVsbC5weXRob24ub3JnAGV4YW1wbGUu",
          "20: Y29tgSBudWxsQHB5dGhvbi5vcmcAdXNlckBleGFtcGxlLm9yZ4YpaHR0cDovL251",
          "21: bGwucHl0aG9uLm9yZwBodHRwOi8vZXhhbXBsZS5vcmeHBMAAAgGHECABDbgAAAAA",
          "22: AAAAAAAAAAEwDQYJKoZIhvcNAQEFBQADggEBAKxPRe99SaghcI6IWT7UNkJw9aO9",
          "23: i9eo0Fj2MUqxpKbdb9noRDy2CnHWf7EIYZ1gznXPdwzSN4YCjV5d+Q9xtBaowT0j",
          "24: HPERs1ZuytCNNJTmhyqZ8q6uzMLoht4IqH/FBfpvgaeC5tBTnTT0rD5A/olXeimk",
          "25: kX4LxlEx5RAvpGB2zZVRGr6LobD9rVK91xuHYNIxxxfEGE8tCCWjp0+3ksri9SXx",
          "26: VHWBnbM9YaL32u3hxm8sYB/Yb8WSBavJCWJJqRStVRHM1koZlJmXNx2BX4vPo6iW",
          "27: RFEIPQsFZRLrtnCAiEhyT8bC2s/Njlu6ly9gtJZWSV46Q3ZjBL4q9sHKqZQ=",
          "28: -----END CERTIFICATE-----",
          "",
          "---------------"
        ],
        "ext/openssl/tests/cve2013_4073.phpt||ext/openssl/tests/cve2013_4073.phpt": [
          "File: ext/openssl/tests/cve2013_4073.phpt -> ext/openssl/tests/cve2013_4073.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: CVE 2013-4073: Null-byte certificate handling",
          "3: --SKIPIF--",
          "4: <?php",
          "5: if (!extension_loaded(\"openssl\")) die(\"skip\");",
          "6: --FILE--",
          "7: <?php",
          "8: $cert = file_get_contents(__DIR__ . '/cve2013_4073.pem');",
          "9: $info = openssl_x509_parse($cert);",
          "10: var_export($info['extensions']);",
          "12: --EXPECTF--",
          "13: array (",
          "14:   'basicConstraints' => 'CA:FALSE',",
          "15:   'subjectKeyIdentifier' => '88:5A:55:C0:52:FF:61:CD:52:A3:35:0F:EA:5A:9C:24:38:22:F7:5C',",
          "16:   'keyUsage' => 'Digital Signature, Non Repudiation, Key Encipherment',",
          "17:   'subjectAltName' => 'DNS:altnull.python.org' . \"\\0\" . 'example.com, email:null@python.org' . \"\\0\" . 'user@example.org, URI:http://null.python.org' . \"\\0\" . 'http://example.org, IP Address:192.0.2.1, IP Address:2001:DB8:0:0:0:0:0:1",
          "18: ',",
          "19: )",
          "",
          "---------------"
        ]
      }
    }
  ]
}