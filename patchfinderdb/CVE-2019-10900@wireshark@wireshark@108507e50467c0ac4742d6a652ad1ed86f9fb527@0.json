{
  "cve_id": "CVE-2019-10900",
  "cve_desc": "In Wireshark 3.0.0, the Rbm dissector could go into an infinite loop. This was addressed in epan/dissectors/file-rbm.c by handling unknown object types safely.",
  "repo": "wireshark/wireshark",
  "patch_hash": "108507e50467c0ac4742d6a652ad1ed86f9fb527",
  "patch_info": {
    "commit_hash": "108507e50467c0ac4742d6a652ad1ed86f9fb527",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/108507e50467c0ac4742d6a652ad1ed86f9fb527",
    "files": [
      "epan/dissectors/.editorconfig",
      "epan/dissectors/file-rbm.c"
    ],
    "message": "Rbm: Be more strict about unknown object types.\n\nStop dissection if we encounter an unknown object type.\n\nUpdate .editorconfig while we're here.\n\nBug: 15612\nChange-Id: I91c0868c376c2b50645af997e0bf84e5c90a512b\nReviewed-on: https://code.wireshark.org/review/32523\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Dario Lombardo <lomato@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/file-rbm.c||epan/dissectors/file-rbm.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/file-rbm.c||epan/dissectors/file-rbm.c": [
      "File: epan/dissectors/file-rbm.c -> epan/dissectors/file-rbm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "409: {",
      "410:  guint8 subtype = tvb_get_guint8(tvb, *offset);",
      "411:  proto_tree* tree;",
      "414:  gint offset_start = *offset;",
      "416:  tree = proto_tree_add_subtree(ptree, tvb, *offset, 0, ett_variable, NULL, \"\");",
      "",
      "[Removed Lines]",
      "412:  gchar* type_local = NULL;",
      "413:  gchar* value_local = NULL;",
      "",
      "[Added Lines]",
      "412:  gchar* type_local = \"Unknown\";",
      "413:  gchar* value_local = \"Unknown\";",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0ac8960b9f34156841b91a39328c0185748f1ebd",
      "candidate_info": {
        "commit_hash": "0ac8960b9f34156841b91a39328c0185748f1ebd",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/0ac8960b9f34156841b91a39328c0185748f1ebd",
        "files": [
          "epan/dissectors/file-rbm.c"
        ],
        "message": "rbm: fix compilation with gcc-8.\n\nChange-Id: If9ce8f6c4c2145f332be9e8a95d720e6fe0c6304\nReviewed-on: https://code.wireshark.org/review/28082\nPetri-Dish: Dario Lombardo <lomato@gmail.com>\nReviewed-by: Jaap Keuter <jaap.keuter@xs4all.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Dario Lombardo <lomato@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/file-rbm.c||epan/dissectors/file-rbm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/file-rbm.c||epan/dissectors/file-rbm.c"
          ],
          "candidate": [
            "epan/dissectors/file-rbm.c||epan/dissectors/file-rbm.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/file-rbm.c||epan/dissectors/file-rbm.c": [
          "File: epan/dissectors/file-rbm.c -> epan/dissectors/file-rbm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "342: static gchar* dissect_rbm_object(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "343: {",
          "344:  guint8 subtype = tvb_get_guint8(tvb, *offset);",
          "346:  gchar* label = \"TBD\";",
          "348:  proto_tree_add_item(tree, hf_rbm_type, tvb, *offset, 1, ENC_NA);",
          "",
          "[Removed Lines]",
          "345:  gchar* subtype_str = \"unknown\";",
          "",
          "[Added Lines]",
          "345:  gchar* subtype_str = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "396:   case ',':",
          "397:    label = dissect_rbm_inline(tvb, pinfo, tree, offset);",
          "398:    break;",
          "400:   case 'o':",
          "401:    subtype_str = \"Object\";",
          "402:   case 'C':",
          "403:    subtype_str = \"User Class\";",
          "404:   case 'e':",
          "405:    subtype_str = \"Extended Object\";",
          "406:   case '@':",
          "407:    subtype_str = \"Object Link\";",
          "410:    break;",
          "411:   default:",
          "412:    expert_add_info_format(pinfo, tree, &ei_rbm_invalid,",
          "413:     \"Object type 0x%x is invalid\", subtype);",
          "414:  }",
          "415:  return label;",
          "416: }",
          "",
          "[Removed Lines]",
          "408:    expert_add_info_format(pinfo, tree, &ei_rbm_unsupported,",
          "409:     \"Object type 0x%x (%s) not supported yet\", subtype, subtype_str);",
          "",
          "[Added Lines]",
          "401:    break;",
          "404:    break;",
          "407:    break;",
          "416:  if (subtype_str)",
          "417:   expert_add_info_format(pinfo, tree, &ei_rbm_unsupported,",
          "418:    \"Object type 0x%x (%s) not supported yet\", subtype, subtype_str);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "500102c265984657c2360efd9a5bafaed5ec58de",
      "candidate_info": {
        "commit_hash": "500102c265984657c2360efd9a5bafaed5ec58de",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/500102c265984657c2360efd9a5bafaed5ec58de",
        "files": [
          "docbook/release-notes.asciidoc",
          "epan/dissectors/CMakeLists.txt",
          "epan/dissectors/file-rbm.c",
          "epan/dissectors/file-rbm.h"
        ],
        "message": "add file dissector for ruby marshal objects.\n\nDocumentation: https://ruby-doc.org/core-2.5.0/Marshal.html\n\nBug: 14730\nChange-Id: If5d3bd2eaf261b4bc7a7df4ac15098503081dd9f\nReviewed-on: https://code.wireshark.org/review/27764\nPetri-Dish: Dario Lombardo <lomato@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "docbook/release-notes.asciidoc||docbook/release-notes.asciidoc",
          "epan/dissectors/file-rbm.c||epan/dissectors/file-rbm.c",
          "epan/dissectors/file-rbm.h||epan/dissectors/file-rbm.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/file-rbm.c||epan/dissectors/file-rbm.c"
          ],
          "candidate": [
            "epan/dissectors/file-rbm.c||epan/dissectors/file-rbm.c"
          ]
        }
      },
      "candidate_diff": {
        "docbook/release-notes.asciidoc||docbook/release-notes.asciidoc": [
          "File: docbook/release-notes.asciidoc -> docbook/release-notes.asciidoc",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: NR (5G) PDCP protocol",
          "68: TPM 2.0 protocol",
          "69: PROXY (v2) protocol",
          "70: --",
          "71: GSM-R protocol (User-to-User Information Element usage)",
          "72: --",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: Ruby Marshal format",
          "",
          "---------------"
        ],
        "epan/dissectors/file-rbm.c||epan/dissectors/file-rbm.c": [
          "File: epan/dissectors/file-rbm.c -> epan/dissectors/file-rbm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"config.h\"",
          "23: #include <epan/packet.h>",
          "24: #include <epan/expert.h>",
          "25: #include <file-rbm.h>",
          "26: #include <wiretap/ruby_marshal.h>",
          "28: static int proto_rbm = -1;",
          "30: static int hf_rbm_version = -1;",
          "31: static int hf_rbm_type = -1;",
          "32: static int hf_rbm_integer = -1;",
          "33: static int hf_rbm_length = -1;",
          "34: static int hf_rbm_string = -1;",
          "35: static int hf_rbm_symbolic_link = -1;",
          "36: static int hf_rbm_double = -1;",
          "37: static int hf_rbm_struct = -1;",
          "38: static int hf_rbm_regex_param = -1;",
          "40: static gint ett_rbm = -1;",
          "41: static gint ett_array = -1;",
          "42: static gint ett_array_obj = -1;",
          "43: static gint ett_hash = -1;",
          "44: static gint ett_hash_obj = -1;",
          "45: static gint ett_variable = -1;",
          "47: static expert_field ei_rbm_unsupported = EI_INIT;",
          "48: static expert_field ei_rbm_invalid = EI_INIT;",
          "49: static expert_field ei_rbm_version_unsupported = EI_INIT;",
          "52: static const value_string rbm_types[] = {",
          "53:  { '0', \"nil\" },",
          "54:  { 'T', \"true\" },",
          "55:  { 'F', \"false\" },",
          "56:  { 'i', \"Integer\" },",
          "57:  { ':', \"Symbol\" },",
          "58:  { '\"', \"String\" },",
          "59:  { 'I', \"Instance variable\" },",
          "60:  { '[', \"Array\" },",
          "61:  { '{', \"Hash\" },",
          "62:  { 'f', \"Double\" },",
          "63:  { 'c', \"Class\" },",
          "64:  { 'm', \"Module\" },",
          "65:  { 'S', \"Struct\" },",
          "66:  { '/', \"Regexp\" },",
          "67:  { 'o', \"Object\" },",
          "68:  { 'C', \"Userclass\" },",
          "69:  { 'e', \"Extended_object\" },",
          "70:  { ';', \"Symbol link\" },",
          "71:  { '@', \"Object link\" },",
          "72:  { 'u', \"DRb::DRbObject\" },",
          "73:  { ',', \"DRb address\" },",
          "74:  {0, NULL}",
          "75: };",
          "77: #define BETWEEN(v, b1, b2) (((v) >= (b1)) && ((v) <= (b2)))",
          "79: static gchar* dissect_rbm_object(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset);",
          "81: void rbm_set_info(packet_info* pinfo, const gchar* str)",
          "82: {",
          "83:  const gchar* col_str = col_get_text(pinfo->cinfo, COL_INFO);",
          "84:  if (!col_str || !strlen(col_str))",
          "85:   col_append_fstr(pinfo->cinfo, COL_INFO, \"Ruby Marshal Object: %s\", str);",
          "86: }",
          "88: void get_rbm_integer(tvbuff_t* tvb, guint offset, gint32* value, guint* len)",
          "89: {",
          "90:  gint8 c;",
          "91:  c = (tvb_get_gint8(tvb, offset) ^ 128) - 128;",
          "92:  if (c == 0) {",
          "95:   return;",
          "96:  }",
          "97:  if (c >= 4) {",
          "100:   return;",
          "101:  }",
          "102:  if (BETWEEN(c, 1, 3)) {",
          "103:   gint i;",
          "105:   guint8 byte;",
          "106:   for (i = 0; i < c; i++) {",
          "107:    byte = tvb_get_guint8(tvb, offset + 1 + i);",
          "109:   }",
          "111:   return;",
          "112:  }",
          "113:  if (c < -6) {",
          "116:   return;",
          "117:  }",
          "118:  if (BETWEEN(c, -5, -1)) {",
          "119:   gint i;",
          "121:   guint8 byte;",
          "122:   gint32 a;",
          "123:   gint32 b;",
          "124:   for (i = 0; i < -c; i++) {",
          "125:    byte = tvb_get_guint8(tvb, offset + 1 + i);",
          "126:    a = ~(0xff << (8*i));",
          "127:    b = byte << (8*i);",
          "129:   }",
          "131:   return;",
          "132:  }",
          "133: }",
          "135: static gchar* dissect_rbm_integer(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree _U_, guint* offset)",
          "136: {",
          "137:  gint32 value = 0;",
          "138:  gint len = 0;",
          "139:  rbm_set_info(pinfo, \"integer\");",
          "140:  get_rbm_integer(tvb, *offset, &value, &len);",
          "141:  proto_tree_add_int_format_value(tree, hf_rbm_integer, tvb, *offset, len, value, \"%d\", value);",
          "143:  return wmem_strdup_printf(wmem_packet_scope(), \"%d\", value);",
          "144: }",
          "146: static gchar* dissect_rbm_basic(tvbuff_t* tvb _U_, packet_info* pinfo, proto_tree* tree _U_, guint* offset _U_, const guint8 subtype)",
          "147: {",
          "148:  gchar* label;",
          "149:  switch (subtype) {",
          "150:   case '0':",
          "151:    label = wmem_strdup(wmem_packet_scope(), \"nil\");",
          "152:    break;",
          "153:   case 'T':",
          "154:    label = wmem_strdup(wmem_packet_scope(), \"true\");",
          "155:    break;",
          "156:   case 'F':",
          "157:    label = wmem_strdup(wmem_packet_scope(), \"false\");",
          "158:    break;",
          "159:   default:",
          "160:    DISSECTOR_ASSERT_NOT_REACHED();",
          "161:  }",
          "162:  rbm_set_info(pinfo, label);",
          "163:  return label;",
          "164: }",
          "166: static gchar* dissect_rbm_string_data_trailer(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, guint* offset, const guint8* label,",
          "167:  const gchar* prefix, const gchar* trailer)",
          "168: {",
          "169:  gint32 value = 0;",
          "170:  gint len = 0;",
          "171:  guint8* s;",
          "173:  rbm_set_info(pinfo, label);",
          "175:  get_rbm_integer(tvb, *offset, &value, &len);",
          "176:  proto_tree_add_int_format_value(tree, hf_rbm_length, tvb, *offset, len, value, \"%d\", value);",
          "178:  s = tvb_get_string_enc(wmem_packet_scope(), tvb, *offset, value, ENC_NA);",
          "179:  proto_tree_add_string_format_value(tree, hf_rbm_string, tvb, *offset, value, s, \"%s%s%s\", prefix, s, trailer);",
          "181:  return wmem_strdup_printf(wmem_packet_scope(), \"%s%s%s\", prefix, s, trailer);",
          "182: }",
          "184: static gchar* dissect_rbm_string_data(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, guint* offset, const guint8* label, const gchar* prefix)",
          "185: {",
          "186:  return dissect_rbm_string_data_trailer(tvb, pinfo, tree, offset, label, prefix, \"\");",
          "187: }",
          "189: static gchar* dissect_rbm_array(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "190: {",
          "191:  gint32 value;",
          "192:  guint len;",
          "193:  gint32 i;",
          "194:  proto_tree* array_tree = NULL;",
          "195:  proto_tree* array_obj_tree = NULL;",
          "197:  rbm_set_info(pinfo, \"Array\");",
          "198:  get_rbm_integer(tvb, *offset, &value, &len);",
          "199:  proto_tree_add_int_format_value(tree, hf_rbm_length, tvb, *offset, len, value, \"%d\", value);",
          "200:  array_tree = proto_tree_add_subtree(tree, tvb, *offset, 0, ett_array, NULL, \"Array\");",
          "203:  for (i = 0; i < value; i++) {",
          "204:   array_obj_tree = proto_tree_add_subtree(array_tree, tvb, *offset, 0, ett_array_obj, NULL, \"Object\");",
          "205:   dissect_rbm_object(tvb, pinfo, array_obj_tree, offset);",
          "206:  }",
          "208:  return \"[]\";",
          "209: }",
          "211: static gchar* dissect_rbm_hash(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "212: {",
          "213:  gint32 value;",
          "214:  guint len;",
          "215:  gint32 i;",
          "216:  proto_tree* hash_tree = NULL;",
          "217:  proto_tree* hash_obj_tree = NULL;",
          "218:  proto_tree* hash_key_tree = NULL;",
          "219:  proto_tree* hash_value_tree = NULL;",
          "221:  rbm_set_info(pinfo, \"Hash\");",
          "222:  get_rbm_integer(tvb, *offset, &value, &len);",
          "223:  proto_tree_add_int_format_value(tree, hf_rbm_length, tvb, *offset, len, value, \"%d\", value);",
          "224:  hash_tree = proto_tree_add_subtree(tree, tvb, *offset, 0, ett_hash, NULL, \"Hash\");",
          "227:  for (i = 0; i < value; i++) {",
          "228:   hash_obj_tree = proto_tree_add_subtree(hash_tree, tvb, *offset, 0, ett_hash_obj, NULL, \"Object\");",
          "229:   hash_key_tree = proto_tree_add_subtree(hash_obj_tree, tvb, *offset, 0, ett_hash_obj, NULL, \"Key\");",
          "230:   dissect_rbm_object(tvb, pinfo, hash_key_tree, offset);",
          "231:   hash_value_tree = proto_tree_add_subtree(hash_obj_tree, tvb, *offset, 0, ett_hash_obj, NULL, \"Value\");",
          "232:   dissect_rbm_object(tvb, pinfo, hash_value_tree, offset);",
          "233:  }",
          "235:  return \"{}\";",
          "236: }",
          "238: static gchar* dissect_rbm_symbol_link(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "239: {",
          "240:  gint32 value;",
          "241:  guint len;",
          "242:  rbm_set_info(pinfo, \"Symbol Link\");",
          "243:  get_rbm_integer(tvb, *offset, &value, &len);",
          "244:  proto_tree_add_int_format_value(tree, hf_rbm_symbolic_link, tvb, *offset, len, value, \"%d\", value);",
          "246:  return \"\";",
          "247: }",
          "249: static gchar* dissect_rbm_double(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "250: {",
          "251:  gint32 value = 0;",
          "252:  gdouble valued;",
          "253:  gint len = 0;",
          "254:  guint8* s;",
          "256:  rbm_set_info(pinfo, \"Double\");",
          "258:  get_rbm_integer(tvb, *offset, &value, &len);",
          "259:  proto_tree_add_int_format_value(tree, hf_rbm_length, tvb, *offset, len, value, \"%d\", value);",
          "261:  s = tvb_get_string_enc(wmem_packet_scope(), tvb, *offset, value, ENC_NA);",
          "262:  valued = g_ascii_strtod(s, NULL);",
          "263:  proto_tree_add_double(tree, hf_rbm_double, tvb, *offset, value, valued);",
          "265:  return wmem_strdup_printf(wmem_packet_scope(), \"%f\", valued);",
          "266: }",
          "268: static gchar* dissect_rbm_struct_data(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "269: {",
          "270:  gint32 value = 0;",
          "271:  gint len = 0;",
          "273:  if (tvb_get_guint8(tvb, *offset) != ':')",
          "274:   return \"\";",
          "277:  rbm_set_info(pinfo, \"Struct\");",
          "278:  get_rbm_integer(tvb, *offset, &value, &len);",
          "279:  proto_tree_add_item(tree, hf_rbm_struct, tvb, *offset + 1, value, ENC_ASCII|ENC_NA);",
          "281:  return \"\";",
          "282: }",
          "284: static gchar* dissect_rbm_string(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "285: {",
          "286:  gchar* label;",
          "287:  label = dissect_rbm_string_data(tvb, pinfo, tree, offset, \"String\", \"\");",
          "288:  dissect_rbm_integer(tvb, pinfo, tree, offset);",
          "289:  dissect_rbm_object(tvb, pinfo, tree, offset);",
          "290:  dissect_rbm_object(tvb, pinfo, tree, offset);",
          "291:  return label;",
          "292: }",
          "294: static gchar* dissect_rbm_regex(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "295: {",
          "296:  gchar* label;",
          "297:  label = dissect_rbm_string_data_trailer(tvb, pinfo, tree, offset, \"Regexp\", \"/\", \"/\");",
          "298:  proto_tree_add_item(tree, hf_rbm_regex_param, tvb, *offset, 1, ENC_NA);",
          "300:  dissect_rbm_integer(tvb, pinfo, tree, offset);",
          "301:  dissect_rbm_object(tvb, pinfo, tree, offset);",
          "302:  dissect_rbm_object(tvb, pinfo, tree, offset);",
          "303:  return label;",
          "304: }",
          "306: static gchar* dissect_rbm_class(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "307: {",
          "308:  return dissect_rbm_string_data(tvb, pinfo, tree, offset, \"Class\", \"\");",
          "309: }",
          "311: static gchar* dissect_rbm_symbol(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "312: {",
          "313:  return dissect_rbm_string_data(tvb, pinfo, tree, offset, \"Symbol\", \":\");",
          "314: }",
          "316: static gchar* dissect_rbm_variable(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "317: {",
          "318:  proto_tree* variable_tree = proto_tree_add_subtree(tree, tvb, *offset, 0, ett_variable, NULL, \"Variable\");",
          "319:  return dissect_rbm_object(tvb, pinfo, variable_tree, offset);",
          "320: }",
          "322: static gchar* dissect_rbm_module(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "323: {",
          "324:  return dissect_rbm_string_data(tvb, pinfo, tree, offset, \"Module\", \"\");",
          "325: }",
          "327: static gchar* dissect_rbm_struct(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "328: {",
          "329:  dissect_rbm_struct_data(tvb, pinfo, tree, offset);",
          "330:  dissect_rbm_hash(tvb, pinfo, tree, offset);",
          "331:  return \"\";",
          "332: }",
          "334: static gchar* dissect_rbm_drb(tvbuff_t* tvb _U_, packet_info* pinfo _U_, proto_tree* tree _U_, gint* offset _U_)",
          "335: {",
          "336:  proto_tree* drb_tree = proto_tree_add_subtree(tree, tvb, *offset, 0, ett_variable, NULL, \"Objects\");",
          "337:  dissect_rbm_object(tvb, pinfo, drb_tree, offset);",
          "338:  dissect_rbm_object(tvb, pinfo, drb_tree, offset);",
          "339:  return \"\";",
          "340: }",
          "342: static gchar* dissect_rbm_object(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "343: {",
          "344:  guint8 subtype = tvb_get_guint8(tvb, *offset);",
          "345:  gchar* subtype_str = \"unknown\";",
          "346:  gchar* label = \"TBD\";",
          "348:  proto_tree_add_item(tree, hf_rbm_type, tvb, *offset, 1, ENC_NA);",
          "351:  switch (subtype) {",
          "352:   case '0':",
          "353:   case 'T':",
          "354:   case 'F':",
          "355:    label = dissect_rbm_basic(tvb, pinfo, tree, offset, subtype);",
          "356:    break;",
          "357:   case 'i':",
          "358:    label = dissect_rbm_integer(tvb, pinfo, tree, offset);",
          "359:    break;",
          "360:   case ':':",
          "361:    label = dissect_rbm_symbol(tvb, pinfo, tree, offset);",
          "362:    break;",
          "363:   case '\"':",
          "364:    label = dissect_rbm_string(tvb, pinfo, tree, offset);",
          "365:    break;",
          "366:   case 'I':",
          "367:    label = dissect_rbm_variable(tvb, pinfo, tree, offset);",
          "368:    break;",
          "369:   case '[':",
          "370:    label = dissect_rbm_array(tvb, pinfo, tree, offset);",
          "371:    break;",
          "372:   case '{':",
          "373:    label = dissect_rbm_hash(tvb, pinfo, tree, offset);",
          "374:    break;",
          "375:   case ';':",
          "376:    label = dissect_rbm_symbol_link(tvb, pinfo, tree, offset);",
          "377:    break;",
          "378:   case 'f':",
          "379:    label = dissect_rbm_double(tvb, pinfo, tree, offset);",
          "380:    break;",
          "381:   case 'c':",
          "382:    label = dissect_rbm_class(tvb, pinfo, tree, offset);",
          "383:    break;",
          "384:   case 'm':",
          "385:    label = dissect_rbm_module(tvb, pinfo, tree, offset);",
          "386:    break;",
          "387:   case 'S':",
          "388:    label = dissect_rbm_struct(tvb, pinfo, tree, offset);",
          "389:    break;",
          "390:   case '/':",
          "391:    label = dissect_rbm_regex(tvb, pinfo, tree, offset);",
          "392:    break;",
          "393:   case 'u':",
          "394:    label = dissect_rbm_drb(tvb, pinfo, tree, offset);",
          "395:    break;",
          "396:   case ',':",
          "397:    label = dissect_rbm_inline(tvb, pinfo, tree, offset);",
          "398:    break;",
          "400:   case 'o':",
          "401:    subtype_str = \"Object\";",
          "402:   case 'C':",
          "403:    subtype_str = \"User Class\";",
          "404:   case 'e':",
          "405:    subtype_str = \"Extended Object\";",
          "406:   case '@':",
          "407:    subtype_str = \"Object Link\";",
          "408:    expert_add_info_format(pinfo, tree, &ei_rbm_unsupported,",
          "409:     \"Object type 0x%x (%s) not supported yet\", subtype, subtype_str);",
          "410:    break;",
          "411:   default:",
          "412:    expert_add_info_format(pinfo, tree, &ei_rbm_invalid,",
          "413:     \"Object type 0x%x is invalid\", subtype);",
          "414:  }",
          "415:  return label;",
          "416: }",
          "418: static gboolean dissect_rbm_header(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, gint* offset)",
          "419: {",
          "420:  guint8 major;",
          "421:  guint8 minor;",
          "422:  gchar* version;",
          "424:  major = tvb_get_guint8(tvb, *offset);",
          "425:  minor = tvb_get_guint8(tvb, *offset + 1);",
          "427:  version = wmem_strdup_printf(wmem_packet_scope(), \"%u.%u\", major, minor);",
          "428:  proto_tree_add_string_format(tree, hf_rbm_version, tvb, *offset, 2, version, \"Version: %s\", version);",
          "431:  if (major != RUBY_MARSHAL_MAJOR || minor != RUBY_MARSHAL_MINOR) {",
          "432:   expert_add_info_format(pinfo, tree, &ei_rbm_version_unsupported, \"Version %u.%u is not supported (only %u.%u)\",",
          "433:    major, minor, RUBY_MARSHAL_MAJOR, RUBY_MARSHAL_MINOR);",
          "434:   return FALSE;",
          "435:  }",
          "436:  return TRUE;",
          "437: }",
          "439: gchar* dissect_rbm_inline(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "440: {",
          "441:  if (!dissect_rbm_header(tvb, pinfo, tree, offset))",
          "442:   return \"\";",
          "443:  return dissect_rbm_object(tvb, pinfo, tree, offset);",
          "444: }",
          "446: static int dissect_rbm(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, void* data _U_)",
          "447: {",
          "448:  gint offset = 0;",
          "449:  proto_item* ti;",
          "450:  proto_tree* rbm_tree;",
          "452:  col_set_str(pinfo->cinfo, COL_PROTOCOL, \"Rbm\");",
          "453:  col_clear(pinfo->cinfo, COL_INFO);",
          "455:  ti = proto_tree_add_item(tree, proto_rbm, tvb, 0, -1, ENC_NA);",
          "456:  rbm_tree = proto_item_add_subtree(ti, ett_rbm);",
          "458:  dissect_rbm_inline(tvb, pinfo, rbm_tree, &offset);",
          "459:  return offset;",
          "460: }",
          "462: void proto_register_rbm(void)",
          "463: {",
          "464:     expert_module_t* expert_rbm;",
          "466:  static hf_register_info hf[] = {",
          "467:   { &hf_rbm_version,",
          "468:    { \"Version\", \"rbm.version\", FT_STRING, BASE_NONE, NULL, 0x00, NULL, HFILL }",
          "469:   },",
          "470:   { &hf_rbm_type,",
          "471:    { \"Type\", \"rbm.type\", FT_UINT8, BASE_HEX, VALS(rbm_types), 0x00, NULL, HFILL }",
          "472:   },",
          "473:   { &hf_rbm_integer,",
          "474:    { \"Integer\", \"rbm.int\", FT_INT32, BASE_DEC, NULL, 0x00, NULL, HFILL }",
          "475:   },",
          "476:   { &hf_rbm_length,",
          "477:    { \"Length\", \"rbm.length\", FT_INT32, BASE_DEC, NULL, 0x00, NULL, HFILL }",
          "478:   },",
          "479:   { &hf_rbm_string,",
          "480:    { \"Value\", \"rbm.string\", FT_STRING, BASE_NONE, NULL, 0x00, NULL, HFILL }",
          "481:   },",
          "482:   { &hf_rbm_symbolic_link,",
          "483:    { \"Symbol Link to object\", \"rbm.symbolic_link\", FT_INT64, BASE_DEC, NULL, 0x00, NULL, HFILL }",
          "484:   },",
          "485:   { &hf_rbm_double,",
          "486:    { \"Value\", \"rbm.double\", FT_DOUBLE, BASE_NONE, NULL, 0x00, NULL, HFILL }",
          "487:   },",
          "488:   { &hf_rbm_struct,",
          "489:    { \"Struct\", \"rbm.struct\", FT_STRING, BASE_NONE, NULL, 0x00, NULL, HFILL }",
          "490:   },",
          "491:   { &hf_rbm_regex_param,",
          "492:    { \"Regexp parameter\", \"rbm.regex.param\", FT_UINT8, BASE_DEC, NULL, 0x00, NULL, HFILL }",
          "493:   }",
          "494:  };",
          "496:     static ei_register_info ei[] = {",
          "497:         { &ei_rbm_unsupported, { \"rbm.unsupported\", PI_UNDECODED, PI_WARN, \"Unsupported type\", EXPFILL }},",
          "498:         { &ei_rbm_invalid, { \"rbm.invalid\", PI_UNDECODED, PI_WARN, \"Invalid type\", EXPFILL }},",
          "499:         { &ei_rbm_version_unsupported, { \"rbm.version.unsupported\", PI_UNDECODED, PI_WARN, \"Unsupported version\", EXPFILL }}",
          "500:     };",
          "503:  static gint* ett[] = {",
          "504:   &ett_rbm,",
          "505:   &ett_array,",
          "506:   &ett_array_obj,",
          "507:   &ett_hash,",
          "508:   &ett_hash_obj,",
          "509:   &ett_variable",
          "510:  };",
          "512:  proto_rbm = proto_register_protocol(\"Ruby Marshal Object\", \"Rbm\", \"rbm\");",
          "514:     expert_rbm = expert_register_protocol(proto_rbm);",
          "515:     expert_register_field_array(expert_rbm, ei, array_length(ei));",
          "517:  proto_register_field_array(proto_rbm, hf, array_length(hf));",
          "518:  proto_register_subtree_array(ett, array_length(ett));",
          "519: }",
          "521: void proto_reg_handoff_rbm(void)",
          "522: {",
          "523:  dissector_handle_t rbm_file_handle = create_dissector_handle(dissect_rbm, proto_rbm);",
          "524:  dissector_add_uint(\"wtap_encap\", WTAP_ENCAP_RUBY_MARSHAL, rbm_file_handle);",
          "525: }",
          "",
          "---------------"
        ],
        "epan/dissectors/file-rbm.h||epan/dissectors/file-rbm.h": [
          "File: epan/dissectors/file-rbm.h -> epan/dissectors/file-rbm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: #ifndef __FILE_RBM_H__",
          "12: #define __FILE_RBM_H__",
          "15: gchar* dissect_rbm_inline(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset);",
          "18: void get_rbm_integer(tvbuff_t* tvb, guint offset, gint32* value, guint* len);",
          "20: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9055584dcec4c58ac23b6e98842a9bf47a61a2ef",
      "candidate_info": {
        "commit_hash": "9055584dcec4c58ac23b6e98842a9bf47a61a2ef",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/9055584dcec4c58ac23b6e98842a9bf47a61a2ef",
        "files": [
          "epan/dissectors/file-rbm.c",
          "epan/dissectors/file-rbm.h",
          "epan/dissectors/packet-drb.c"
        ],
        "message": "rbm: improve fields layout and decode more types.\n\nChange-Id: Ib16118e9c0ce5b612ae1dcb6c678224a79889a93\nReviewed-on: https://code.wireshark.org/review/28287\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>\nPetri-Dish: Dario Lombardo <lomato@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Dario Lombardo <lomato@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/file-rbm.c||epan/dissectors/file-rbm.c",
          "epan/dissectors/file-rbm.h||epan/dissectors/file-rbm.h",
          "epan/dissectors/packet-drb.c||epan/dissectors/packet-drb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/file-rbm.c||epan/dissectors/file-rbm.c"
          ],
          "candidate": [
            "epan/dissectors/file-rbm.c||epan/dissectors/file-rbm.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/file-rbm.c||epan/dissectors/file-rbm.c": [
          "File: epan/dissectors/file-rbm.c -> epan/dissectors/file-rbm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: static int hf_rbm_integer = -1;",
          "33: static int hf_rbm_length = -1;",
          "34: static int hf_rbm_string = -1;",
          "36: static int hf_rbm_double = -1;",
          "37: static int hf_rbm_struct = -1;",
          "38: static int hf_rbm_regex_param = -1;",
          "",
          "[Removed Lines]",
          "35: static int hf_rbm_symbolic_link = -1;",
          "",
          "[Added Lines]",
          "35: static int hf_rbm_link = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:  { 'S', \"Struct\" },",
          "66:  { '/', \"Regexp\" },",
          "67:  { 'o', \"Object\" },",
          "69:  { 'e', \"Extended_object\" },",
          "70:  { ';', \"Symbol link\" },",
          "71:  { '@', \"Object link\" },",
          "",
          "[Removed Lines]",
          "68:  { 'C', \"Userclass\" },",
          "",
          "[Added Lines]",
          "68:  { 'C', \"UserClass\" },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77: #define BETWEEN(v, b1, b2) (((v) >= (b1)) && ((v) <= (b2)))",
          "81: void rbm_set_info(packet_info* pinfo, const gchar* str)",
          "82: {",
          "",
          "[Removed Lines]",
          "79: static gchar* dissect_rbm_object(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset);",
          "",
          "[Added Lines]",
          "79: static void dissect_rbm_object(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset, gchar** type, gchar** value);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:  }",
          "133: }",
          "136: {",
          "137:  gint32 value = 0;",
          "138:  gint len = 0;",
          "",
          "[Removed Lines]",
          "135: static gchar* dissect_rbm_integer(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree _U_, guint* offset)",
          "",
          "[Added Lines]",
          "135: static void dissect_rbm_integer(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree _U_, guint* offset, gchar** value_str)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "140:  get_rbm_integer(tvb, *offset, &value, &len);",
          "141:  proto_tree_add_int_format_value(tree, hf_rbm_integer, tvb, *offset, len, value, \"%d\", value);",
          "144: }",
          "147: {",
          "149:  switch (subtype) {",
          "150:   case '0':",
          "152:    break;",
          "153:   case 'T':",
          "155:    break;",
          "156:   case 'F':",
          "158:    break;",
          "159:   default:",
          "160:    DISSECTOR_ASSERT_NOT_REACHED();",
          "161:  }",
          "164: }",
          "168: {",
          "169:  gint32 value = 0;",
          "170:  gint len = 0;",
          "",
          "[Removed Lines]",
          "143:  return wmem_strdup_printf(wmem_packet_scope(), \"%d\", value);",
          "146: static gchar* dissect_rbm_basic(tvbuff_t* tvb _U_, packet_info* pinfo, proto_tree* tree _U_, guint* offset _U_, const guint8 subtype)",
          "148:  gchar* label;",
          "151:    label = wmem_strdup(wmem_packet_scope(), \"nil\");",
          "154:    label = wmem_strdup(wmem_packet_scope(), \"true\");",
          "157:    label = wmem_strdup(wmem_packet_scope(), \"false\");",
          "162:  rbm_set_info(pinfo, label);",
          "163:  return label;",
          "166: static gchar* dissect_rbm_string_data_trailer(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, guint* offset, const guint8* label,",
          "167:  const gchar* prefix, const gchar* trailer)",
          "",
          "[Added Lines]",
          "143:  if (value_str)",
          "147: static void dissect_rbm_basic(tvbuff_t* tvb _U_, packet_info* pinfo, proto_tree* tree _U_, guint* offset _U_, const guint8 subtype,",
          "148:  gchar** type, gchar** value_str)",
          "165:  rbm_set_info(pinfo, *type);",
          "168: static void dissect_rbm_string_data_trailer(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, guint* offset, const guint8* label,",
          "169:  const gchar* prefix, const gchar* trailer, gchar** value_str)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "178:  s = tvb_get_string_enc(wmem_packet_scope(), tvb, *offset, value, ENC_NA);",
          "179:  proto_tree_add_string_format_value(tree, hf_rbm_string, tvb, *offset, value, s, \"%s%s%s\", prefix, s, trailer);",
          "182: }",
          "185: {",
          "187: }",
          "190: {",
          "191:  gint32 value;",
          "192:  guint len;",
          "193:  gint32 i;",
          "194:  proto_tree* array_tree = NULL;",
          "195:  proto_tree* array_obj_tree = NULL;",
          "197:  rbm_set_info(pinfo, \"Array\");",
          "198:  get_rbm_integer(tvb, *offset, &value, &len);",
          "",
          "[Removed Lines]",
          "181:  return wmem_strdup_printf(wmem_packet_scope(), \"%s%s%s\", prefix, s, trailer);",
          "184: static gchar* dissect_rbm_string_data(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, guint* offset, const guint8* label, const gchar* prefix)",
          "186:  return dissect_rbm_string_data_trailer(tvb, pinfo, tree, offset, label, prefix, \"\");",
          "189: static gchar* dissect_rbm_array(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "",
          "[Added Lines]",
          "186: static void dissect_rbm_string_data(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, guint* offset, const guint8* label,",
          "187:  const gchar* prefix, gchar** value_str)",
          "189:  dissect_rbm_string_data_trailer(tvb, pinfo, tree, offset, label, prefix, \"\", value_str);",
          "192: static void dissect_rbm_array(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset, gchar** value_str)",
          "199:  gint offset_start = *offset;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "203:  for (i = 0; i < value; i++) {",
          "204:   array_obj_tree = proto_tree_add_subtree(array_tree, tvb, *offset, 0, ett_array_obj, NULL, \"Object\");",
          "206:  }",
          "209: }",
          "212: {",
          "213:  gint32 value;",
          "214:  guint len;",
          "",
          "[Removed Lines]",
          "205:   dissect_rbm_object(tvb, pinfo, array_obj_tree, offset);",
          "208:  return \"[]\";",
          "211: static gchar* dissect_rbm_hash(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "",
          "[Added Lines]",
          "209:   dissect_rbm_object(tvb, pinfo, array_obj_tree, offset, NULL, NULL);",
          "211:  proto_item_append_text(array_tree, \" (%d)\", value);",
          "212:  proto_item_set_len(array_tree, *offset - offset_start);",
          "214:  if (value_str)",
          "218: static void dissect_rbm_hash(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset, gchar** value_str)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "217:  proto_tree* hash_obj_tree = NULL;",
          "218:  proto_tree* hash_key_tree = NULL;",
          "219:  proto_tree* hash_value_tree = NULL;",
          "221:  rbm_set_info(pinfo, \"Hash\");",
          "222:  get_rbm_integer(tvb, *offset, &value, &len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "227:  gchar* hkey = NULL;",
          "228:  gchar* hval = NULL;",
          "229:  gint offset_start = *offset;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "227:  for (i = 0; i < value; i++) {",
          "229:   hash_key_tree = proto_tree_add_subtree(hash_obj_tree, tvb, *offset, 0, ett_hash_obj, NULL, \"Key\");",
          "231:   hash_value_tree = proto_tree_add_subtree(hash_obj_tree, tvb, *offset, 0, ett_hash_obj, NULL, \"Value\");",
          "233:  }",
          "236: }",
          "239: {",
          "240:  gint32 value;",
          "241:  guint len;",
          "243:  get_rbm_integer(tvb, *offset, &value, &len);",
          "247: }",
          "250: {",
          "251:  gint32 value = 0;",
          "252:  gdouble valued;",
          "",
          "[Removed Lines]",
          "228:   hash_obj_tree = proto_tree_add_subtree(hash_tree, tvb, *offset, 0, ett_hash_obj, NULL, \"Object\");",
          "230:   dissect_rbm_object(tvb, pinfo, hash_key_tree, offset);",
          "232:   dissect_rbm_object(tvb, pinfo, hash_value_tree, offset);",
          "235:  return \"{}\";",
          "238: static gchar* dissect_rbm_symbol_link(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "242:  rbm_set_info(pinfo, \"Symbol Link\");",
          "244:  proto_tree_add_int_format_value(tree, hf_rbm_symbolic_link, tvb, *offset, len, value, \"%d\", value);",
          "246:  return \"\";",
          "249: static gchar* dissect_rbm_double(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "",
          "[Added Lines]",
          "238:   hash_obj_tree = proto_tree_add_subtree(hash_tree, tvb, *offset, 0, ett_hash_obj, NULL, \"Entry\");",
          "240:   dissect_rbm_object(tvb, pinfo, hash_key_tree, offset, NULL, &hkey);",
          "242:   dissect_rbm_object(tvb, pinfo, hash_value_tree, offset, NULL, &hval);",
          "243:   proto_item_append_text(hash_obj_tree, \" %s => %s\", hkey, hval);",
          "245:  proto_item_append_text(hash_tree, \" (%d)\", value);",
          "246:  proto_item_set_len(hash_tree, *offset - offset_start);",
          "248:  if (value_str)",
          "252: static void dissect_rbm_link(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset, guint8 subtype,",
          "253:  gchar** type, gchar** value_str)",
          "257:  gchar* label;",
          "259:  switch (subtype) {",
          "260:   case ';':",
          "261:    label = \"Symbol\";",
          "262:    break;",
          "263:   case '@':",
          "264:    label = \"Object\";",
          "265:    break;",
          "266:   default:",
          "267:    DISSECTOR_ASSERT_NOT_REACHED();",
          "268:  }",
          "270:  rbm_set_info(pinfo, wmem_strdup_printf(wmem_packet_scope(), \"%s Link\", label));",
          "272:  proto_tree_add_int_format_value(tree, hf_rbm_link, tvb, *offset, len, value, \"%d\", value);",
          "274:  if (type)",
          "276:  if (value_str)",
          "280: static void dissect_rbm_double(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset, gchar** value_str)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "262:  valued = g_ascii_strtod(s, NULL);",
          "263:  proto_tree_add_double(tree, hf_rbm_double, tvb, *offset, value, valued);",
          "266: }",
          "269: {",
          "270:  gint32 value = 0;",
          "271:  gint len = 0;",
          "273:  if (tvb_get_guint8(tvb, *offset) != ':')",
          "277:  rbm_set_info(pinfo, \"Struct\");",
          "278:  get_rbm_integer(tvb, *offset, &value, &len);",
          "279:  proto_tree_add_item(tree, hf_rbm_struct, tvb, *offset + 1, value, ENC_ASCII|ENC_NA);",
          "282: }",
          "285: {",
          "292: }",
          "295: {",
          "298:  proto_tree_add_item(tree, hf_rbm_regex_param, tvb, *offset, 1, ENC_NA);",
          "304: }",
          "307: {",
          "309: }",
          "312: {",
          "314: }",
          "317: {",
          "318:  proto_tree* variable_tree = proto_tree_add_subtree(tree, tvb, *offset, 0, ett_variable, NULL, \"Variable\");",
          "320: }",
          "323: {",
          "325: }",
          "328: {",
          "332: }",
          "335: {",
          "336:  proto_tree* drb_tree = proto_tree_add_subtree(tree, tvb, *offset, 0, ett_variable, NULL, \"Objects\");",
          "340: }",
          "343: {",
          "344:  guint8 subtype = tvb_get_guint8(tvb, *offset);",
          "348:  proto_tree_add_item(tree, hf_rbm_type, tvb, *offset, 1, ENC_NA);",
          "",
          "[Removed Lines]",
          "265:  return wmem_strdup_printf(wmem_packet_scope(), \"%f\", valued);",
          "268: static gchar* dissect_rbm_struct_data(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "274:   return \"\";",
          "281:  return \"\";",
          "284: static gchar* dissect_rbm_string(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "286:  gchar* label;",
          "287:  label = dissect_rbm_string_data(tvb, pinfo, tree, offset, \"String\", \"\");",
          "288:  dissect_rbm_integer(tvb, pinfo, tree, offset);",
          "289:  dissect_rbm_object(tvb, pinfo, tree, offset);",
          "290:  dissect_rbm_object(tvb, pinfo, tree, offset);",
          "291:  return label;",
          "294: static gchar* dissect_rbm_regex(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "296:  gchar* label;",
          "297:  label = dissect_rbm_string_data_trailer(tvb, pinfo, tree, offset, \"Regexp\", \"/\", \"/\");",
          "300:  dissect_rbm_integer(tvb, pinfo, tree, offset);",
          "301:  dissect_rbm_object(tvb, pinfo, tree, offset);",
          "302:  dissect_rbm_object(tvb, pinfo, tree, offset);",
          "303:  return label;",
          "306: static gchar* dissect_rbm_class(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "308:  return dissect_rbm_string_data(tvb, pinfo, tree, offset, \"Class\", \"\");",
          "311: static gchar* dissect_rbm_symbol(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "313:  return dissect_rbm_string_data(tvb, pinfo, tree, offset, \"Symbol\", \":\");",
          "316: static gchar* dissect_rbm_variable(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "319:  return dissect_rbm_object(tvb, pinfo, variable_tree, offset);",
          "322: static gchar* dissect_rbm_module(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "324:  return dissect_rbm_string_data(tvb, pinfo, tree, offset, \"Module\", \"\");",
          "327: static gchar* dissect_rbm_struct(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "329:  dissect_rbm_struct_data(tvb, pinfo, tree, offset);",
          "330:  dissect_rbm_hash(tvb, pinfo, tree, offset);",
          "331:  return \"\";",
          "334: static gchar* dissect_rbm_drb(tvbuff_t* tvb _U_, packet_info* pinfo _U_, proto_tree* tree _U_, gint* offset _U_)",
          "337:  dissect_rbm_object(tvb, pinfo, drb_tree, offset);",
          "338:  dissect_rbm_object(tvb, pinfo, drb_tree, offset);",
          "339:  return \"\";",
          "342: static gchar* dissect_rbm_object(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "345:  gchar* subtype_str = NULL;",
          "346:  gchar* label = \"TBD\";",
          "",
          "[Added Lines]",
          "296:  if (value_str)",
          "300: static void dissect_rbm_struct_data(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset, gchar** value_str)",
          "306:   return;",
          "313:  if (value_str)",
          "317: static void dissect_rbm_string(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset, gchar** value)",
          "319:  dissect_rbm_string_data(tvb, pinfo, tree, offset, \"String\", \"\", value);",
          "320:  dissect_rbm_integer(tvb, pinfo, tree, offset, NULL);",
          "321:  dissect_rbm_object(tvb, pinfo, tree, offset, NULL, NULL);",
          "322:  dissect_rbm_object(tvb, pinfo, tree, offset, NULL, NULL);",
          "325: static void dissect_rbm_regex(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset, gchar** value)",
          "327:  dissect_rbm_string_data_trailer(tvb, pinfo, tree, offset, \"Regexp\", \"/\", \"/\", value);",
          "330:  dissect_rbm_integer(tvb, pinfo, tree, offset, NULL);",
          "331:  dissect_rbm_object(tvb, pinfo, tree, offset, NULL, NULL);",
          "332:  dissect_rbm_object(tvb, pinfo, tree, offset, NULL, NULL);",
          "333: }",
          "335: static void dissect_rbm_class(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset, gchar** value_str)",
          "336: {",
          "337:  dissect_rbm_string_data(tvb, pinfo, tree, offset, \"Class\", \"\", value_str);",
          "340: static void dissect_rbm_userclass(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset, gchar** value)",
          "342:  rbm_set_info(pinfo, \"UserClass\");",
          "343:  dissect_rbm_object(tvb, pinfo, tree, offset, NULL, value);",
          "346: static void dissect_rbm_symbol(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset, gchar** value_str)",
          "348:  dissect_rbm_string_data(tvb, pinfo, tree, offset, \"Symbol\", \":\", value_str);",
          "351: static void dissect_rbm_variable(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset, gchar** value_str)",
          "353:  gint offset_start = *offset;",
          "355:  dissect_rbm_object(tvb, pinfo, variable_tree, offset, NULL, value_str);",
          "356:  proto_item_set_len(variable_tree, *offset - offset_start);",
          "359: static void dissect_rbm_module(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset, gchar** value_str)",
          "361:  dissect_rbm_string_data(tvb, pinfo, tree, offset, \"Module\", \"\", value_str);",
          "364: static void dissect_rbm_struct(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset, gchar** value)",
          "366:  dissect_rbm_struct_data(tvb, pinfo, tree, offset, value);",
          "367:  dissect_rbm_hash(tvb, pinfo, tree, offset, NULL);",
          "370: static void dissect_rbm_drb(tvbuff_t* tvb _U_, packet_info* pinfo _U_, proto_tree* tree _U_, gint* offset _U_)",
          "372:  gint offset_start = *offset;",
          "374:  dissect_rbm_object(tvb, pinfo, drb_tree, offset, NULL, NULL);",
          "375:  dissect_rbm_object(tvb, pinfo, drb_tree, offset, NULL, NULL);",
          "376:  proto_item_set_len(drb_tree, *offset - offset_start);",
          "379: static void dissect_rbm_rubyobject(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "380: {",
          "381:  gint offset_start = *offset;",
          "382:  proto_tree* obj_tree = proto_tree_add_subtree(tree, tvb, *offset, 0, ett_variable, NULL, \"Ruby Object\");",
          "384:  rbm_set_info(pinfo, \"Ruby Object\");",
          "386:  dissect_rbm_object(tvb, pinfo, obj_tree, offset, NULL, NULL);",
          "387:  dissect_rbm_hash(tvb, pinfo, obj_tree, offset, NULL);",
          "389:  while (tvb_captured_length_remaining(tvb, *offset)) {",
          "390:   dissect_rbm_object(tvb, pinfo, obj_tree, offset, NULL, NULL);",
          "391:  }",
          "393:  proto_item_set_len(obj_tree, *offset - offset_start);",
          "394: }",
          "396: static void dissect_rbm_extended(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "397: {",
          "398:  gint offset_start = *offset;",
          "399:  proto_tree* ext_tree = proto_tree_add_subtree(tree, tvb, *offset, 0, ett_variable, NULL, \"Extended\");",
          "401:  rbm_set_info(pinfo, \"Extended\");",
          "402:  dissect_rbm_object(tvb, pinfo, ext_tree, offset, NULL, NULL);",
          "403:  proto_item_set_len(ext_tree, *offset - offset_start);",
          "404: }",
          "406: static void dissect_rbm_object(tvbuff_t* tvb, packet_info* pinfo, proto_tree* ptree, gint* offset, gchar** type, gchar** value)",
          "409:  proto_tree* tree;",
          "410:  gchar* type_local = NULL;",
          "411:  gchar* value_local = NULL;",
          "412:  gint offset_start = *offset;",
          "414:  tree = proto_tree_add_subtree(ptree, tvb, *offset, 0, ett_variable, NULL, \"\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "352:   case '0':",
          "353:   case 'T':",
          "354:   case 'F':",
          "356:    break;",
          "357:   case 'i':",
          "359:    break;",
          "360:   case ':':",
          "362:    break;",
          "363:   case '\"':",
          "365:    break;",
          "366:   case 'I':",
          "368:    break;",
          "369:   case '[':",
          "371:    break;",
          "372:   case '{':",
          "374:    break;",
          "375:   case ';':",
          "377:    break;",
          "378:   case 'f':",
          "380:    break;",
          "381:   case 'c':",
          "383:    break;",
          "384:   case 'm':",
          "386:    break;",
          "387:   case 'S':",
          "389:    break;",
          "390:   case '/':",
          "392:    break;",
          "393:   case 'u':",
          "395:    break;",
          "396:   case ',':",
          "398:    break;",
          "399:   case 'o':",
          "401:    break;",
          "402:   case 'C':",
          "404:    break;",
          "405:   case 'e':",
          "410:    break;",
          "411:   default:",
          "412:    expert_add_info_format(pinfo, tree, &ei_rbm_invalid,",
          "413:     \"Object type 0x%x is invalid\", subtype);",
          "414:  }",
          "421: }",
          "423: static gboolean dissect_rbm_header(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, gint* offset)",
          "",
          "[Removed Lines]",
          "355:    label = dissect_rbm_basic(tvb, pinfo, tree, offset, subtype);",
          "358:    label = dissect_rbm_integer(tvb, pinfo, tree, offset);",
          "361:    label = dissect_rbm_symbol(tvb, pinfo, tree, offset);",
          "364:    label = dissect_rbm_string(tvb, pinfo, tree, offset);",
          "367:    label = dissect_rbm_variable(tvb, pinfo, tree, offset);",
          "370:    label = dissect_rbm_array(tvb, pinfo, tree, offset);",
          "373:    label = dissect_rbm_hash(tvb, pinfo, tree, offset);",
          "376:    label = dissect_rbm_symbol_link(tvb, pinfo, tree, offset);",
          "379:    label = dissect_rbm_double(tvb, pinfo, tree, offset);",
          "382:    label = dissect_rbm_class(tvb, pinfo, tree, offset);",
          "385:    label = dissect_rbm_module(tvb, pinfo, tree, offset);",
          "388:    label = dissect_rbm_struct(tvb, pinfo, tree, offset);",
          "391:    label = dissect_rbm_regex(tvb, pinfo, tree, offset);",
          "394:    label = dissect_rbm_drb(tvb, pinfo, tree, offset);",
          "397:    label = dissect_rbm_inline(tvb, pinfo, tree, offset);",
          "400:    subtype_str = \"Object\";",
          "403:    subtype_str = \"User Class\";",
          "406:    subtype_str = \"Extended Object\";",
          "407:    break;",
          "408:   case '@':",
          "409:    subtype_str = \"Object Link\";",
          "416:  if (subtype_str)",
          "417:   expert_add_info_format(pinfo, tree, &ei_rbm_unsupported,",
          "418:    \"Object type 0x%x (%s) not supported yet\", subtype, subtype_str);",
          "420:  return label;",
          "",
          "[Added Lines]",
          "423:    dissect_rbm_basic(tvb, pinfo, tree, offset, subtype, &type_local, &value_local);",
          "426:    type_local = \"Integer\";",
          "427:    dissect_rbm_integer(tvb, pinfo, tree, offset, &value_local);",
          "430:    type_local = \"Symbol\";",
          "431:    dissect_rbm_symbol(tvb, pinfo, tree, offset, &value_local);",
          "434:    type_local = \"String\";",
          "435:    dissect_rbm_string(tvb, pinfo, tree, offset, &value_local);",
          "438:    type_local = \"Instance Variable\";",
          "439:    dissect_rbm_variable(tvb, pinfo, tree, offset, &value_local);",
          "442:    type_local = \"Array\";",
          "443:    dissect_rbm_array(tvb, pinfo, tree, offset, &value_local);",
          "446:    type_local = \"Hash\";",
          "447:    dissect_rbm_hash(tvb, pinfo, tree, offset, &value_local);",
          "450:   case '@':",
          "451:    dissect_rbm_link(tvb, pinfo, tree, offset, subtype, &type_local, &value_local);",
          "454:    type_local = \"Double\";",
          "455:    dissect_rbm_double(tvb, pinfo, tree, offset, &value_local);",
          "458:    type_local = \"Class\";",
          "459:    dissect_rbm_class(tvb, pinfo, tree, offset, &value_local);",
          "462:    type_local = \"Module\";",
          "463:    dissect_rbm_module(tvb, pinfo, tree, offset, &value_local);",
          "466:    type_local = \"Struct\";",
          "467:    dissect_rbm_struct(tvb, pinfo, tree, offset, &value_local);",
          "470:    type_local = \"Regex\";",
          "471:    dissect_rbm_regex(tvb, pinfo, tree, offset, &value_local);",
          "474:    type_local = \"DRb::DRbObject\";",
          "475:    dissect_rbm_drb(tvb, pinfo, tree, offset);",
          "478:    dissect_rbm_inline(tvb, pinfo, tree, offset, &type_local, &value_local);",
          "481:    dissect_rbm_rubyobject(tvb, pinfo, tree, offset);",
          "482:    type_local = \"Ruby Object\";",
          "485:    type_local = \"UserClass\";",
          "486:    dissect_rbm_userclass(tvb, pinfo, tree, offset, &value_local);",
          "489:    type_local = \"Extended Object\";",
          "490:    dissect_rbm_extended(tvb, pinfo, tree, offset);",
          "497:  proto_item_set_len(tree, *offset - offset_start);",
          "499:  proto_item_append_text(tree, \"Type: %s\", type_local);",
          "500:  if (value_local && strlen(value_local))",
          "501:   proto_item_append_text(tree, \", Value: %s\", value_local);",
          "503:  if (type)",
          "505:  if (value)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "441:  return TRUE;",
          "442: }",
          "445: {",
          "446:  if (!dissect_rbm_header(tvb, pinfo, tree, offset))",
          "449: }",
          "451: static int dissect_rbm(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, void* data _U_)",
          "",
          "[Removed Lines]",
          "444: gchar* dissect_rbm_inline(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "447:   return \"\";",
          "448:  return dissect_rbm_object(tvb, pinfo, tree, offset);",
          "",
          "[Added Lines]",
          "530: void dissect_rbm_inline(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset, gchar** type, gchar** value)",
          "533:   return;",
          "534:  dissect_rbm_object(tvb, pinfo, tree, offset, type, value);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "460:  ti = proto_tree_add_item(tree, proto_rbm, tvb, 0, -1, ENC_NA);",
          "461:  rbm_tree = proto_item_add_subtree(ti, ett_rbm);",
          "464:  return offset;",
          "465: }",
          "",
          "[Removed Lines]",
          "463:  dissect_rbm_inline(tvb, pinfo, rbm_tree, &offset);",
          "",
          "[Added Lines]",
          "549:  dissect_rbm_inline(tvb, pinfo, rbm_tree, &offset, NULL, NULL);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "484:   { &hf_rbm_string,",
          "485:    { \"Value\", \"rbm.string\", FT_STRING, BASE_NONE, NULL, 0x00, NULL, HFILL }",
          "486:   },",
          "489:   },",
          "490:   { &hf_rbm_double,",
          "491:    { \"Value\", \"rbm.double\", FT_DOUBLE, BASE_NONE, NULL, 0x00, NULL, HFILL }",
          "",
          "[Removed Lines]",
          "487:   { &hf_rbm_symbolic_link,",
          "488:    { \"Symbol Link to object\", \"rbm.symbolic_link\", FT_INT64, BASE_DEC, NULL, 0x00, NULL, HFILL }",
          "",
          "[Added Lines]",
          "573:   { &hf_rbm_link,",
          "574:    { \"Link to object\", \"rbm.link\", FT_INT32, BASE_DEC, NULL, 0x00, NULL, HFILL }",
          "",
          "---------------"
        ],
        "epan/dissectors/file-rbm.h||epan/dissectors/file-rbm.h": [
          "File: epan/dissectors/file-rbm.h -> epan/dissectors/file-rbm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #define __FILE_RBM_H__",
          "18: void get_rbm_integer(tvbuff_t* tvb, guint offset, gint32* value, guint* len);",
          "",
          "[Removed Lines]",
          "15: gchar* dissect_rbm_inline(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset);",
          "",
          "[Added Lines]",
          "15: void dissect_rbm_inline(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset, gchar** type, gchar** value);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-drb.c||epan/dissectors/packet-drb.c": [
          "File: epan/dissectors/packet-drb.c -> epan/dissectors/packet-drb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: {",
          "27:  guint32 len;",
          "28:  proto_tree* obj_tree;",
          "29:  gchar* value;",
          "31:  len = tvb_get_guint32(tvb, *offset, ENC_BIG_ENDIAN);",
          "32:  obj_tree = proto_tree_add_subtree(tree, tvb, *offset, 4 + len, ett_ref, NULL, label);",
          "33:  proto_tree_add_item(obj_tree, hf_drb_len, tvb, *offset, 4, ENC_NA);",
          "37: }",
          "39: static void dissect_drb_response(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, gint* offset)",
          "",
          "[Removed Lines]",
          "35:  value = dissect_rbm_inline(tvb, pinfo, obj_tree, offset);",
          "36:  proto_item_append_text(obj_tree, \": %s\", value);",
          "",
          "[Added Lines]",
          "29:  gchar* type;",
          "36:  dissect_rbm_inline(tvb, pinfo, obj_tree, offset, &type, &value);",
          "37:  if (type)",
          "38:   proto_item_append_text(obj_tree, \"Type: %s\", type);",
          "39:  if (value)",
          "40:   proto_item_append_text(obj_tree, \"Value: %s\", value);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "26eee01f57f0a86fb375892c7937eac24ede4610",
      "candidate_info": {
        "commit_hash": "26eee01f57f0a86fb375892c7937eac24ede4610",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/26eee01f57f0a86fb375892c7937eac24ede4610",
        "files": [
          "epan/dissectors/.editorconfig",
          "epan/dissectors/file-rbm.c"
        ],
        "message": "Rbm: Be more strict about unknown object types.\n\nStop dissection if we encounter an unknown object type.\n\nUpdate .editorconfig while we're here.\n\nBug: 15612\nChange-Id: I91c0868c376c2b50645af997e0bf84e5c90a512b\nReviewed-on: https://code.wireshark.org/review/32523\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Dario Lombardo <lomato@gmail.com>\n(cherry picked from commit f273ecd5d94f0c39d1683ed147656daee3ef799b)\nReviewed-on: https://code.wireshark.org/review/32525\nPetri-Dish: Dario Lombardo <lomato@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/file-rbm.c||epan/dissectors/file-rbm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/file-rbm.c||epan/dissectors/file-rbm.c"
          ],
          "candidate": [
            "epan/dissectors/file-rbm.c||epan/dissectors/file-rbm.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/file-rbm.c||epan/dissectors/file-rbm.c": [
          "File: epan/dissectors/file-rbm.c -> epan/dissectors/file-rbm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "409: {",
          "410:  guint8 subtype = tvb_get_guint8(tvb, *offset);",
          "411:  proto_tree* tree;",
          "414:  gint offset_start = *offset;",
          "416:  tree = proto_tree_add_subtree(ptree, tvb, *offset, 0, ett_variable, NULL, \"\");",
          "",
          "[Removed Lines]",
          "412:  gchar* type_local = NULL;",
          "413:  gchar* value_local = NULL;",
          "",
          "[Added Lines]",
          "412:  gchar* type_local = \"Unknown\";",
          "413:  gchar* value_local = \"Unknown\";",
          "",
          "---------------"
        ]
      }
    }
  ]
}