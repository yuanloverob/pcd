{
  "cve_id": "CVE-2021-41227",
  "cve_desc": "TensorFlow is an open source platform for machine learning. In affected versions the `ImmutableConst` operation in TensorFlow can be tricked into reading arbitrary memory contents. This is because the `tstring` TensorFlow string class has a special case for memory mapped strings but the operation itself does not offer any support for this datatype. The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "3712a2d3455e6ccb924daa5724a3652a86f6b585",
  "patch_info": {
    "commit_hash": "3712a2d3455e6ccb924daa5724a3652a86f6b585",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/3712a2d3455e6ccb924daa5724a3652a86f6b585",
    "files": [
      "tensorflow/core/platform/ctstring_internal.h",
      "tensorflow/core/platform/ctstring_test.cc"
    ],
    "message": "Fix macros for converting little endian to host for TF_TSRT_OFFSET GetSize\n\nMake the macro that converts little endian data do nothing on little endian hosts,\nand byte swap otherwise.\nThis only affects getting the size of TStrings of type \"Offset\".\n\nAdded a test for TStrings of type \"Offset\" that checks if type and size are consistent.\n\nPiperOrigin-RevId: 400789721\nChange-Id: I1398bffd842ab1631614b212b7c3a2af88d99538",
    "before_after_code_files": [
      "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h",
      "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h": [
      "File: tensorflow/core/platform/ctstring_internal.h -> tensorflow/core/platform/ctstring_internal.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "63: #endif",
      "65: #if TF_TSTRING_LITTLE_ENDIAN",
      "68: #define TF_le32toh(x) x",
      "69: #endif  // TF_TSTRING_LITTLE_ENDIAN",
      "71: static inline size_t TF_align16(size_t i) { return (i + 0xF) & ~0xF; }",
      "",
      "[Removed Lines]",
      "66: #define TF_le32toh(x) TF_swap32(x)",
      "67: #else  // TF_TSTRING_LITTLE_ENDIAN",
      "",
      "[Added Lines]",
      "67: #else  // TF_TSTRING_LITTLE_ENDIAN",
      "68: #define TF_le32toh(x) TF_swap32(x)",
      "",
      "---------------"
    ],
    "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc": [
      "File: tensorflow/core/platform/ctstring_test.cc -> tensorflow/core/platform/ctstring_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: #include <memory>",
      "19: #include <string>",
      "21: #include \"tensorflow/core/platform/test.h\"",
      "23: static const char kLongString[] =",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: #include \"tensorflow/core/platform/ctstring_internal.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "380:     TF_TString_Dealloc(&s70);",
      "381:   }",
      "382: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "385: TEST(TF_CTStringTest, OffsetType) {",
      "386:   {",
      "387:     TF_TString s71;",
      "389:     TF_TString_Init(&s71);",
      "390:     size_t header_length = 24;",
      "391:     size_t size = 8;",
      "392:     TF_TString_ResizeUninitialized(&s71, header_length + size);",
      "393:     uint32_t save_size = s71.u.offset.size;",
      "394:     uint32_t save_offset = s71.u.offset.offset;",
      "395:     uint32_t save_count = s71.u.offset.count;",
      "397:     s71.u.offset.size = TF_TString_ToInternalSizeT(size, TF_TSTR_OFFSET);",
      "398:     s71.u.offset.offset = header_length;",
      "399:     s71.u.offset.count = 0;",
      "400:     EXPECT_EQ(size, TF_TString_GetSize(&s71));",
      "401:     EXPECT_EQ(TF_TSTR_OFFSET, TF_TString_GetType(&s71));",
      "404:     s71.u.offset.size = save_size;",
      "405:     s71.u.offset.offset = save_offset;",
      "406:     s71.u.offset.count = save_count;",
      "407:     TF_TString_Dealloc(&s71);",
      "408:   }",
      "409: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "de98df79910c62e2528982a854aff7304fde8082",
      "candidate_info": {
        "commit_hash": "de98df79910c62e2528982a854aff7304fde8082",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/de98df79910c62e2528982a854aff7304fde8082",
        "files": [
          "tensorflow/core/platform/ctstring_internal.h",
          "tensorflow/core/platform/ctstring_test.cc"
        ],
        "message": "Fix OffsetType test This includes fix for TF_TString_GetDataPointer method for the TStrings of type Offset Also fixes TEST(TF_CTStringTest, OffsetType)",
        "before_after_code_files": [
          "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h",
          "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h",
            "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc"
          ],
          "candidate": [
            "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h",
            "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h": [
          "File: tensorflow/core/platform/ctstring_internal.h -> tensorflow/core/platform/ctstring_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:     case TF_TSTR_LARGE:",
          "216:       return str->u.large.ptr;",
          "217:     case TF_TSTR_OFFSET:",
          "219:     case TF_TSTR_VIEW:",
          "220:       return str->u.view.ptr;",
          "221:     default:",
          "",
          "[Removed Lines]",
          "218:       return (const char *)str + str->u.offset.offset;  // NOLINT",
          "",
          "[Added Lines]",
          "218:       return (const char *)str + TF_le32toh(str->u.offset.offset);  // NOLINT",
          "",
          "---------------"
        ],
        "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc": [
          "File: tensorflow/core/platform/ctstring_test.cc -> tensorflow/core/platform/ctstring_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "385: TEST(TF_CTStringTest, OffsetType) {",
          "386:   {",
          "408:   }",
          "409: }",
          "",
          "[Removed Lines]",
          "387:     TF_TString s71;",
          "389:     TF_TString_Init(&s71);",
          "390:     size_t header_length = 24;",
          "391:     size_t size = 8;",
          "392:     TF_TString_ResizeUninitialized(&s71, header_length + size);",
          "393:     uint32_t save_size = s71.u.offset.size;",
          "394:     uint32_t save_offset = s71.u.offset.offset;",
          "395:     uint32_t save_count = s71.u.offset.count;",
          "397:     s71.u.offset.size = TF_TString_ToInternalSizeT(size, TF_TSTR_OFFSET);",
          "398:     s71.u.offset.offset = header_length;",
          "399:     s71.u.offset.count = 0;",
          "400:     EXPECT_EQ(size, TF_TString_GetSize(&s71));",
          "401:     EXPECT_EQ(TF_TSTR_OFFSET, TF_TString_GetType(&s71));",
          "404:     s71.u.offset.size = save_size;",
          "405:     s71.u.offset.offset = save_offset;",
          "406:     s71.u.offset.count = save_count;",
          "407:     TF_TString_Dealloc(&s71);",
          "",
          "[Added Lines]",
          "387:     uint8_t str[] = \"test\";",
          "388:     constexpr size_t str_size = sizeof(str) / sizeof(str[0]);",
          "390:     uint8_t buf[sizeof(TF_TString) + str_size];",
          "392:     memcpy(buf + sizeof(TF_TString), str, str_size);",
          "394:     TF_TString *offsets = (TF_TString *)buf;",
          "395:     TF_TString_Init(offsets);",
          "397:     offsets[0].u.offset.size = TF_le32toh(str_size << 2 | TF_TSTR_OFFSET);",
          "398:     offsets[0].u.offset.offset = TF_le32toh(sizeof(TF_TString));",
          "399:     offsets[0].u.offset.count = TF_le32toh(1);",
          "401:     EXPECT_EQ(str_size, TF_TString_GetSize(offsets));",
          "402:     EXPECT_EQ(TF_TSTR_OFFSET, TF_TString_GetType(offsets));",
          "403:     EXPECT_EQ(0, ::memcmp(str, TF_TString_GetDataPointer(offsets), str_size));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "78fc8da67cef7c967678b566cd6b053a36081491",
      "candidate_info": {
        "commit_hash": "78fc8da67cef7c967678b566cd6b053a36081491",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/78fc8da67cef7c967678b566cd6b053a36081491",
        "files": [
          "tensorflow/core/distributed_runtime/remote_device.h",
          "tensorflow/core/framework/op_def_util.h",
          "tensorflow/core/kernels/string_util.h",
          "tensorflow/core/lib/io/table_builder.h",
          "tensorflow/core/platform/BUILD",
          "tensorflow/core/platform/base64.cc",
          "tensorflow/core/platform/base64.h",
          "tensorflow/core/platform/ctstring.h",
          "tensorflow/core/platform/ctstring_internal.h",
          "tensorflow/core/platform/tstring.h",
          "tensorflow/core/util/mirror_pad_mode.cc",
          "tensorflow/core/util/mirror_pad_mode.h",
          "tensorflow/tsl/platform/BUILD",
          "tensorflow/tsl/platform/cord.h",
          "tensorflow/tsl/platform/ctstring.h",
          "tensorflow/tsl/platform/ctstring_internal.h",
          "tensorflow/tsl/platform/tstring.h"
        ],
        "message": "Move core/platform/{cord,tstring,ctstring,ctstring_internal}.h to TSL, fix transitive dependencies\n\nPiperOrigin-RevId: 471073867",
        "before_after_code_files": [
          "tensorflow/core/distributed_runtime/remote_device.h||tensorflow/core/distributed_runtime/remote_device.h",
          "tensorflow/core/framework/op_def_util.h||tensorflow/core/framework/op_def_util.h",
          "tensorflow/core/kernels/string_util.h||tensorflow/core/kernels/string_util.h",
          "tensorflow/core/lib/io/table_builder.h||tensorflow/core/liio/table_builder.h",
          "tensorflow/core/platform/base64.cc||tensorflow/core/platform/base64.cc",
          "tensorflow/core/platform/base64.h||tensorflow/core/platform/base64.h",
          "tensorflow/core/platform/ctstring.h||tensorflow/core/platform/ctstring.h",
          "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h",
          "tensorflow/core/platform/tstring.h||tensorflow/core/platform/tstring.h",
          "tensorflow/core/util/mirror_pad_mode.cc||tensorflow/core/util/mirror_pad_mode.cc",
          "tensorflow/core/util/mirror_pad_mode.h||tensorflow/core/util/mirror_pad_mode.h",
          "tensorflow/tsl/platform/cord.h||tensorflow/tsl/platform/cord.h",
          "tensorflow/tsl/platform/ctstring.h||tensorflow/tsl/platform/ctstring.h",
          "tensorflow/tsl/platform/ctstring_internal.h||tensorflow/tsl/platform/ctstring_internal.h",
          "tensorflow/tsl/platform/tstring.h||tensorflow/tsl/platform/tstring.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h"
          ],
          "candidate": [
            "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/distributed_runtime/remote_device.h||tensorflow/core/distributed_runtime/remote_device.h": [
          "File: tensorflow/core/distributed_runtime/remote_device.h -> tensorflow/core/distributed_runtime/remote_device.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include \"tensorflow/core/lib/core/status.h\"",
          "24: #include \"tensorflow/core/platform/protobuf.h\"",
          "26: namespace tensorflow {",
          "27: class DeviceAttributes;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include \"tensorflow/core/platform/stringpiece.h\"",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/op_def_util.h||tensorflow/core/framework/op_def_util.h": [
          "File: tensorflow/core/framework/op_def_util.h -> tensorflow/core/framework/op_def_util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #define TENSORFLOW_CORE_FRAMEWORK_OP_DEF_UTIL_H_",
          "22: #include <string>",
          "23: #include \"tensorflow/core/framework/api_def.pb.h\"",
          "24: #include \"tensorflow/core/framework/op_def.pb.h\"",
          "25: #include \"tensorflow/core/lib/core/status.h\"",
          "26: #include \"tensorflow/core/platform/protobuf.h\"",
          "28: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include \"tensorflow/core/lib/core/stringpiece.h\"",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/string_util.h||tensorflow/core/kernels/string_util.h": [
          "File: tensorflow/core/kernels/string_util.h -> tensorflow/core/kernels/string_util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #define TENSORFLOW_CORE_KERNELS_STRING_UTIL_H_",
          "18: #include \"tensorflow/core/lib/core/status.h\"",
          "20: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include \"tensorflow/core/lib/core/stringpiece.h\"",
          "",
          "---------------"
        ],
        "tensorflow/core/lib/io/table_builder.h||tensorflow/core/liio/table_builder.h": [
          "File: tensorflow/core/lib/io/table_builder.h -> tensorflow/core/liio/table_builder.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #define TENSORFLOW_CORE_LIB_IO_TABLE_BUILDER_H_",
          "27: #include <stdint.h>",
          "28: #include \"tensorflow/core/lib/core/status.h\"",
          "29: #include \"tensorflow/core/lib/io/table_options.h\"",
          "31: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tensorflow/core/platform/base64.cc||tensorflow/core/platform/base64.cc": [
          "File: tensorflow/core/platform/base64.cc -> tensorflow/core/platform/base64.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <cstring>",
          "19: #include <memory>",
          "20: #include \"tensorflow/core/platform/errors.h\"",
          "22: namespace tensorflow {",
          "23: namespace {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"tensorflow/core/platform/stringpiece.h\"",
          "",
          "---------------"
        ],
        "tensorflow/core/platform/base64.h||tensorflow/core/platform/base64.h": [
          "File: tensorflow/core/platform/base64.h -> tensorflow/core/platform/base64.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #define TENSORFLOW_CORE_PLATFORM_BASE64_H_",
          "19: #include <string>",
          "20: #include \"tensorflow/core/platform/status.h\"",
          "22: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"tensorflow/core/platform/stringpiece.h\"",
          "",
          "---------------"
        ],
        "tensorflow/core/platform/ctstring.h||tensorflow/core/platform/ctstring.h": [
          "File: tensorflow/core/platform/ctstring.h -> tensorflow/core/platform/ctstring.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #ifndef TENSORFLOW_CORE_PLATFORM_CTSTRING_H_",
          "17: #define TENSORFLOW_CORE_PLATFORM_CTSTRING_H_",
          "123: #endif  // TENSORFLOW_CORE_PLATFORM_CTSTRING_H_",
          "",
          "[Removed Lines]",
          "19: #include <stdint.h>",
          "20: #include <stdlib.h>",
          "22: #include \"tensorflow/core/platform/ctstring_internal.h\"",
          "26: inline void TF_TString_Init(TF_TString *str);",
          "28: inline void TF_TString_Dealloc(TF_TString *str);",
          "33: inline char *TF_TString_Resize(TF_TString *str, size_t new_size, char c);",
          "38: inline char *TF_TString_ResizeUninitialized(TF_TString *str, size_t new_size);",
          "45: inline void TF_TString_Reserve(TF_TString *str, size_t new_cap);",
          "48: inline void TF_TString_ReserveAmortized(TF_TString *str, size_t new_cap);",
          "51: inline size_t TF_TString_GetSize(const TF_TString *str);",
          "55: inline size_t TF_TString_GetCapacity(const TF_TString *str);",
          "77: inline TF_TString_Type TF_TString_GetType(const TF_TString *str);",
          "81: inline const char *TF_TString_GetDataPointer(const TF_TString *str);",
          "85: inline char *TF_TString_GetMutableDataPointer(TF_TString *str);",
          "92: inline void TF_TString_AssignView(TF_TString *dst, const char *src,",
          "93:                                   size_t size);",
          "98: inline void TF_TString_Append(TF_TString *dst, const TF_TString *src);",
          "99: inline void TF_TString_AppendN(TF_TString *dst, const char *src, size_t size);",
          "113: inline void TF_TString_Copy(TF_TString *dst, const char *src, size_t size);",
          "117: inline void TF_TString_Assign(TF_TString *dst, const TF_TString *src);",
          "121: inline void TF_TString_Move(TF_TString *dst, TF_TString *src);",
          "",
          "[Added Lines]",
          "19: #include \"tensorflow/tsl/platform/ctstring.h\"",
          "",
          "---------------"
        ],
        "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h": [
          "File: tensorflow/core/platform/ctstring_internal.h -> tensorflow/core/platform/ctstring_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #ifndef TENSORFLOW_CORE_PLATFORM_CTSTRING_INTERNAL_H_",
          "17: #define TENSORFLOW_CORE_PLATFORM_CTSTRING_INTERNAL_H_",
          "455: #endif  // TENSORFLOW_CORE_PLATFORM_CTSTRING_INTERNAL_H_",
          "",
          "[Removed Lines]",
          "19: #include <limits.h>",
          "20: #include <stdint.h>",
          "21: #include <stdlib.h>",
          "22: #include <string.h>",
          "24: #if (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && \\",
          "25:      __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__) ||                  \\",
          "26:     defined(_WIN32)",
          "27: #define TF_TSTRING_LITTLE_ENDIAN 1",
          "28: #elif defined(__BYTE_ORDER__) && defined(__ORDER_BIG_ENDIAN__) && \\",
          "29:     __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__",
          "30: #define TF_TSTRING_LITTLE_ENDIAN 0",
          "31: #else",
          "32: #error \"Unable to detect endianness.\"",
          "33: #endif",
          "35: #if defined(__clang__) || \\",
          "36:     (defined(__GNUC__) && \\",
          "37:      ((__GNUC__ == 4 && __GNUC_MINOR__ >= 8) || __GNUC__ >= 5))",
          "38: static inline uint32_t TF_swap32(uint32_t host_int) {",
          "39:   return __builtin_bswap32(host_int);",
          "40: }",
          "42: #elif defined(_MSC_VER)",
          "43: static inline uint32_t TF_swap32(uint32_t host_int) {",
          "44:   return _byteswap_ulong(host_int);",
          "45: }",
          "47: #elif defined(__APPLE__)",
          "48: static inline uint32_t TF_swap32(uint32_t host_int) {",
          "49:   return OSSwapInt32(host_int);",
          "50: }",
          "52: #else",
          "53: static inline uint32_t TF_swap32(uint32_t host_int) {",
          "54: #if defined(__GLIBC__)",
          "55:   return bswap_32(host_int);",
          "56: #else   // defined(__GLIBC__)",
          "57:   return (((host_int & uint32_t{0xFF}) << 24) |",
          "58:           ((host_int & uint32_t{0xFF00}) << 8) |",
          "59:           ((host_int & uint32_t{0xFF0000}) >> 8) |",
          "60:           ((host_int & uint32_t{0xFF000000}) >> 24));",
          "61: #endif  // defined(__GLIBC__)",
          "62: }",
          "63: #endif",
          "65: #if TF_TSTRING_LITTLE_ENDIAN",
          "66: #define TF_le32toh(x) x",
          "67: #else  // TF_TSTRING_LITTLE_ENDIAN",
          "68: #define TF_le32toh(x) TF_swap32(x)",
          "69: #endif  // TF_TSTRING_LITTLE_ENDIAN",
          "71: static inline size_t TF_align16(size_t i) { return (i + 0xF) & ~0xF; }",
          "73: static inline size_t TF_max(size_t a, size_t b) { return a > b ? a : b; }",
          "74: static inline size_t TF_min(size_t a, size_t b) { return a < b ? a : b; }",
          "76: typedef enum TF_TString_Type {  // NOLINT",
          "77:   TF_TSTR_SMALL = 0x00,",
          "78:   TF_TSTR_LARGE = 0x01,",
          "79:   TF_TSTR_OFFSET = 0x02,",
          "80:   TF_TSTR_VIEW = 0x03,",
          "81:   TF_TSTR_TYPE_MASK = 0x03",
          "82: } TF_TString_Type;",
          "84: typedef struct TF_TString_Large {  // NOLINT",
          "85:   size_t size;",
          "86:   size_t cap;",
          "87:   char *ptr;",
          "88: } TF_TString_Large;",
          "90: typedef struct TF_TString_Offset {  // NOLINT",
          "91:   uint32_t size;",
          "92:   uint32_t offset;",
          "93:   uint32_t count;",
          "94: } TF_TString_Offset;",
          "96: typedef struct TF_TString_View {  // NOLINT",
          "97:   size_t size;",
          "98:   const char *ptr;",
          "99: } TF_TString_View;",
          "101: typedef struct TF_TString_Raw {  // NOLINT",
          "102:   uint8_t raw[24];",
          "103: } TF_TString_Raw;",
          "105: typedef union TF_TString_Union {  // NOLINT",
          "106:   TF_TString_Large large;",
          "107:   TF_TString_Offset offset;",
          "108:   TF_TString_View view;",
          "109:   TF_TString_Raw raw;",
          "110: } TF_TString_Union;",
          "112: enum {",
          "113:   TF_TString_SmallCapacity =",
          "114:       (sizeof(TF_TString_Union) - sizeof(/* null delim */ char) -",
          "115:        sizeof(/* uint8_t size */ uint8_t)),",
          "116: };",
          "118: typedef struct TF_TString_Small {  // NOLINT",
          "119:   uint8_t size;",
          "120:   char str[TF_TString_SmallCapacity + sizeof(/* null delim */ char)];",
          "121: } TF_TString_Small;",
          "123: typedef struct TF_TString {  // NOLINT",
          "124:   union {",
          "127:     TF_TString_Small smll;",
          "128:     TF_TString_Large large;",
          "129:     TF_TString_Offset offset;",
          "130:     TF_TString_View view;",
          "131:     TF_TString_Raw raw;",
          "132:   } u;",
          "133: } TF_TString;",
          "139: static inline TF_TString_Type TF_TString_GetType(const TF_TString *str) {",
          "140:   return (TF_TString_Type)(str->u.raw.raw[0] & TF_TSTR_TYPE_MASK);  // NOLINT",
          "141: }",
          "147: static inline size_t TF_TString_ToActualSizeT(size_t size) {",
          "148: #if TF_TSTRING_LITTLE_ENDIAN",
          "149:   return size >> 2;",
          "150: #else   // TF_TSTRING_LITTLE_ENDIAN",
          "152:   static const size_t mask = ~((~(size_t)0) >> 8);",
          "154:   return (((mask << 2) & size) >> 2) | (~mask & size);",
          "155: #endif  // TF_TSTRING_LITTLE_ENDIAN",
          "156: }",
          "158: static inline size_t TF_TString_ToInternalSizeT(size_t size,",
          "159:                                                 TF_TString_Type type) {",
          "160: #if TF_TSTRING_LITTLE_ENDIAN",
          "161:   return (size << 2) | type;",
          "162: #else   // TF_TSTRING_LITTLE_ENDIAN",
          "164:   static const size_t mask = ~((~(size_t)0) >> 8);",
          "166:   return (mask & (size << 2)) | (~mask & size) |",
          "167:          ((size_t)type << ((sizeof(size_t) - 1) * 8));  // NOLINT",
          "168: #endif  // TF_TSTRING_LITTLE_ENDIAN",
          "169: }",
          "171: static inline void TF_TString_Init(TF_TString *str) {",
          "172:   memset(str->u.raw.raw, 0, sizeof(TF_TString_Raw));",
          "173: }",
          "175: static inline void TF_TString_Dealloc(TF_TString *str) {",
          "176:   if (TF_TString_GetType(str) == TF_TSTR_LARGE &&",
          "177:       str->u.large.ptr != NULL) {  // NOLINT",
          "178:     free(str->u.large.ptr);",
          "179:     TF_TString_Init(str);",
          "180:   }",
          "181: }",
          "183: static inline size_t TF_TString_GetSize(const TF_TString *str) {",
          "184:   switch (TF_TString_GetType(str)) {",
          "185:     case TF_TSTR_SMALL:",
          "186:       return str->u.smll.size >> 2;",
          "187:     case TF_TSTR_LARGE:",
          "188:       return TF_TString_ToActualSizeT(str->u.large.size);",
          "189:     case TF_TSTR_OFFSET:",
          "190:       return TF_le32toh(str->u.offset.size) >> 2;",
          "191:     case TF_TSTR_VIEW:",
          "192:       return TF_TString_ToActualSizeT(str->u.view.size);",
          "193:     default:",
          "194:       return 0;  // Unreachable.",
          "195:   }",
          "196: }",
          "198: static inline size_t TF_TString_GetCapacity(const TF_TString *str) {",
          "199:   switch (TF_TString_GetType(str)) {",
          "200:     case TF_TSTR_SMALL:",
          "201:       return TF_TString_SmallCapacity;",
          "202:     case TF_TSTR_LARGE:",
          "203:       return str->u.large.cap;",
          "204:     case TF_TSTR_OFFSET:",
          "205:     case TF_TSTR_VIEW:",
          "206:     default:",
          "207:       return 0;",
          "208:   }",
          "209: }",
          "211: static inline const char *TF_TString_GetDataPointer(const TF_TString *str) {",
          "212:   switch (TF_TString_GetType(str)) {",
          "213:     case TF_TSTR_SMALL:",
          "214:       return str->u.smll.str;",
          "215:     case TF_TSTR_LARGE:",
          "216:       return str->u.large.ptr;",
          "217:     case TF_TSTR_OFFSET:",
          "218:       return (const char *)str + TF_le32toh(str->u.offset.offset);  // NOLINT",
          "219:     case TF_TSTR_VIEW:",
          "220:       return str->u.view.ptr;",
          "221:     default:",
          "223:       return NULL;  // NOLINT",
          "224:   }",
          "225: }",
          "227: static inline char *TF_TString_ResizeUninitialized(TF_TString *str,",
          "228:                                                    size_t new_size) {",
          "229:   size_t curr_size = TF_TString_GetSize(str);",
          "230:   size_t copy_size = TF_min(new_size, curr_size);",
          "232:   TF_TString_Type curr_type = TF_TString_GetType(str);",
          "233:   const char *curr_ptr = TF_TString_GetDataPointer(str);",
          "236:   if (new_size <= TF_TString_SmallCapacity) {",
          "237:     str->u.smll.size = (uint8_t)((new_size << 2) | TF_TSTR_SMALL);  // NOLINT",
          "238:     str->u.smll.str[new_size] = '\\0';",
          "240:     if (curr_type != TF_TSTR_SMALL && copy_size) {",
          "241:       memcpy(str->u.smll.str, curr_ptr, copy_size);",
          "242:     }",
          "244:     if (curr_type == TF_TSTR_LARGE) {",
          "245:       free((void *)curr_ptr);  // NOLINT",
          "246:     }",
          "250:     return str->u.smll.str;",
          "251:   }",
          "254:   size_t new_cap;",
          "255:   size_t curr_cap = TF_TString_GetCapacity(str);",
          "257:   if (new_size < curr_size && new_size < curr_cap / 2) {",
          "259:     new_cap = TF_align16(curr_cap / 2 + 1) - 1;",
          "260:   } else if (new_size > curr_cap) {",
          "261:     new_cap = TF_align16(new_size + 1) - 1;",
          "262:   } else {",
          "263:     new_cap = curr_cap;",
          "264:   }",
          "266:   char *new_ptr;",
          "267:   if (new_cap == curr_cap) {",
          "268:     new_ptr = str->u.large.ptr;",
          "269:   } else if (curr_type == TF_TSTR_LARGE) {",
          "270:     new_ptr = (char *)realloc(str->u.large.ptr, new_cap + 1);  // NOLINT",
          "271:   } else {",
          "272:     new_ptr = (char *)malloc(new_cap + 1);  // NOLINT",
          "273:     if (copy_size) {",
          "274:       memcpy(new_ptr, curr_ptr, copy_size);",
          "275:     }",
          "276:   }",
          "278:   str->u.large.size = TF_TString_ToInternalSizeT(new_size, TF_TSTR_LARGE);",
          "279:   str->u.large.ptr = new_ptr;",
          "280:   str->u.large.ptr[new_size] = '\\0';",
          "281:   str->u.large.cap = new_cap;",
          "283:   return str->u.large.ptr;",
          "284: }",
          "286: static inline char *TF_TString_GetMutableDataPointer(TF_TString *str) {",
          "287:   switch (TF_TString_GetType(str)) {",
          "288:     case TF_TSTR_SMALL:",
          "289:       return str->u.smll.str;",
          "290:     case TF_TSTR_OFFSET:",
          "291:     case TF_TSTR_VIEW:",
          "293:       TF_TString_ResizeUninitialized(str, TF_TString_GetSize(str));",
          "294:       return (TF_TString_GetType(str) == TF_TSTR_SMALL) ? str->u.smll.str",
          "295:                                                         : str->u.large.ptr;",
          "296:     case TF_TSTR_LARGE:",
          "297:       return str->u.large.ptr;",
          "298:     default:",
          "300:       return NULL;  // NOLINT",
          "301:   }",
          "302: }",
          "304: static inline void TF_TString_Reserve(TF_TString *str, size_t new_cap) {",
          "305:   TF_TString_Type curr_type = TF_TString_GetType(str);",
          "307:   if (new_cap <= TF_TString_SmallCapacity) {",
          "313:     return;",
          "314:   }",
          "316:   if (curr_type == TF_TSTR_LARGE && new_cap <= str->u.large.cap) {",
          "318:     return;",
          "319:   }",
          "322:   size_t curr_size = TF_TString_GetSize(str);",
          "323:   const char *curr_ptr = TF_TString_GetDataPointer(str);",
          "327:   new_cap = TF_align16(TF_max(new_cap, curr_size) + 1) - 1;",
          "329:   if (curr_type == TF_TSTR_LARGE) {",
          "330:     str->u.large.ptr =",
          "331:         (char *)realloc(str->u.large.ptr, new_cap + 1);  // NOLINT",
          "332:   } else {",
          "334:     char *new_ptr = (char *)malloc(new_cap + 1);  // NOLINT",
          "335:     memcpy(new_ptr, curr_ptr, curr_size);",
          "337:     str->u.large.size = TF_TString_ToInternalSizeT(curr_size, TF_TSTR_LARGE);",
          "338:     str->u.large.ptr = new_ptr;",
          "339:     str->u.large.ptr[curr_size] = '\\0';",
          "340:   }",
          "342:   str->u.large.cap = new_cap;",
          "343: }",
          "345: static inline void TF_TString_ReserveAmortized(TF_TString *str,",
          "346:                                                size_t new_cap) {",
          "347:   const size_t curr_cap = TF_TString_GetCapacity(str);",
          "348:   if (new_cap > curr_cap) {",
          "349:     TF_TString_Reserve(str, new_cap > 2 * curr_cap ? new_cap : 2 * curr_cap);",
          "350:   }",
          "351: }",
          "353: static inline char *TF_TString_Resize(TF_TString *str, size_t new_size,",
          "354:                                       char c) {",
          "355:   size_t curr_size = TF_TString_GetSize(str);",
          "356:   char *cstr = TF_TString_ResizeUninitialized(str, new_size);",
          "358:   if (new_size > curr_size) {",
          "359:     memset(cstr + curr_size, c, new_size - curr_size);",
          "360:   }",
          "362:   return cstr;",
          "363: }",
          "365: static inline void TF_TString_AssignView(TF_TString *dst, const char *src,",
          "366:                                          size_t size) {",
          "367:   TF_TString_Dealloc(dst);",
          "369:   dst->u.view.size = TF_TString_ToInternalSizeT(size, TF_TSTR_VIEW);",
          "370:   dst->u.view.ptr = src;",
          "371: }",
          "373: static inline void TF_TString_AppendN(TF_TString *dst, const char *src,",
          "374:                                       size_t src_size) {",
          "375:   if (!src_size) return;",
          "377:   size_t dst_size = TF_TString_GetSize(dst);",
          "380:   TF_TString_ReserveAmortized(dst, dst_size + src_size);",
          "381:   char *dst_c = TF_TString_ResizeUninitialized(dst, dst_size + src_size);",
          "383:   memcpy(dst_c + dst_size, src, src_size);",
          "384: }",
          "386: static inline void TF_TString_Append(TF_TString *dst, const TF_TString *src) {",
          "387:   const char *src_c = TF_TString_GetDataPointer(src);",
          "388:   size_t size = TF_TString_GetSize(src);",
          "390:   TF_TString_AppendN(dst, src_c, size);",
          "391: }",
          "393: static inline void TF_TString_Copy(TF_TString *dst, const char *src,",
          "394:                                    size_t size) {",
          "395:   char *dst_c = TF_TString_ResizeUninitialized(dst, size);",
          "397:   if (size) memcpy(dst_c, src, size);",
          "398: }",
          "400: static inline void TF_TString_Assign(TF_TString *dst, const TF_TString *src) {",
          "401:   if (dst == src) return;",
          "403:   TF_TString_Dealloc(dst);",
          "405:   switch (TF_TString_GetType(src)) {",
          "406:     case TF_TSTR_SMALL:",
          "407:     case TF_TSTR_VIEW:",
          "409:       return;",
          "410:     case TF_TSTR_LARGE: {",
          "411:       const char *src_c = TF_TString_GetDataPointer(src);",
          "412:       size_t size = TF_TString_GetSize(src);",
          "414:       TF_TString_Copy(dst, src_c, size);",
          "415:     }",
          "416:       return;",
          "417:     case TF_TSTR_OFFSET: {",
          "418:       const char *src_c = TF_TString_GetDataPointer(src);",
          "419:       size_t size = TF_TString_GetSize(src);",
          "421:       TF_TString_AssignView(dst, src_c, size);",
          "422:     }",
          "423:       return;",
          "424:     default:",
          "425:       return;  // Unreachable.",
          "426:   }",
          "427: }",
          "429: static inline void TF_TString_Move(TF_TString *dst, TF_TString *src) {",
          "430:   if (dst == src) return;",
          "432:   TF_TString_Dealloc(dst);",
          "434:   switch (TF_TString_GetType(src)) {",
          "435:     case TF_TSTR_SMALL:",
          "436:     case TF_TSTR_VIEW:",
          "438:       return;",
          "439:     case TF_TSTR_LARGE:",
          "441:       TF_TString_Init(src);",
          "442:       return;",
          "443:     case TF_TSTR_OFFSET: {",
          "444:       const char *src_c = TF_TString_GetDataPointer(src);",
          "445:       size_t size = TF_TString_GetSize(src);",
          "447:       TF_TString_AssignView(dst, src_c, size);",
          "448:     }",
          "449:       return;",
          "450:     default:",
          "451:       return;  // Unreachable.",
          "452:   }",
          "453: }",
          "",
          "[Added Lines]",
          "19: #include \"tensorflow/tsl/platform/ctstring_internal.h\"",
          "",
          "---------------"
        ],
        "tensorflow/core/platform/tstring.h||tensorflow/core/platform/tstring.h": [
          "File: tensorflow/core/platform/tstring.h -> tensorflow/core/platform/tstring.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #ifndef TENSORFLOW_CORE_PLATFORM_TSTRING_H_",
          "17: #define TENSORFLOW_CORE_PLATFORM_TSTRING_H_",
          "28: namespace tensorflow {",
          "477: }",
          "587: #endif  // TENSORFLOW_CORE_PLATFORM_TSTRING_H_",
          "",
          "[Removed Lines]",
          "19: #include <assert.h>",
          "21: #include <ostream>",
          "22: #include <string>",
          "24: #include \"tensorflow/core/platform/cord.h\"",
          "25: #include \"tensorflow/core/platform/ctstring.h\"",
          "26: #include \"tensorflow/core/platform/stringpiece.h\"",
          "63: class tstring {",
          "64:   TF_TString tstr_;",
          "66:  public:",
          "67:   enum Type {",
          "69:     SMALL = TF_TSTR_SMALL,",
          "70:     LARGE = TF_TSTR_LARGE,",
          "71:     OFFSET = TF_TSTR_OFFSET,",
          "72:     VIEW = TF_TSTR_VIEW,",
          "73:   };",
          "77:   class view {",
          "78:     const char* data_;",
          "79:     size_t size_;",
          "81:    public:",
          "82:     explicit view(const char* data, size_t size) : data_(data), size_(size) {}",
          "83:     explicit view(const char* data) : data_(data), size_(::strlen(data)) {}",
          "85:     const char* data() const { return data_; }",
          "87:     size_t size() const { return size_; }",
          "89:     view() = delete;",
          "90:     view(const view&) = delete;",
          "91:     view& operator=(const view&) = delete;",
          "92:   };",
          "94:   typedef const char* const_iterator;",
          "97:   tstring();",
          "98:   tstring(const std::string& str);  // NOLINT TODO(b/147740521): Make explicit.",
          "99:   tstring(const char* str, size_t len);",
          "100:   tstring(const char* str);  // NOLINT TODO(b/147740521): Make explicit.",
          "101:   tstring(size_t n, char c);",
          "102:   explicit tstring(const StringPiece str);",
          "103: #ifdef PLATFORM_GOOGLE",
          "104:   explicit tstring(const absl::Cord& cord);",
          "105: #endif  // PLATFORM_GOOGLE",
          "108:   tstring(const tstring& str);",
          "111:   tstring(tstring&& str) noexcept;",
          "114:   ~tstring();",
          "117:   tstring& operator=(const tstring& str);",
          "118:   tstring& operator=(const std::string& str);",
          "119:   tstring& operator=(const char* str);",
          "120:   tstring& operator=(char ch);",
          "121:   tstring& operator=(const StringPiece str);",
          "122: #ifdef PLATFORM_GOOGLE",
          "123:   tstring& operator=(const absl::Cord& cord);",
          "124: #endif  // PLATFORM_GOOGLE",
          "127:   tstring& operator=(const view& tsv);",
          "130:   tstring& operator=(tstring&& str);",
          "133:   int compare(const char* str, size_t len) const;",
          "134:   bool operator<(const tstring& o) const;",
          "135:   bool operator>(const tstring& o) const;",
          "136:   bool operator==(const char* str) const;",
          "137:   bool operator==(const tstring& o) const;",
          "138:   bool operator!=(const char* str) const;",
          "139:   bool operator!=(const tstring& o) const;",
          "143:   operator std::string() const;  // NOLINT",
          "145:   operator StringPiece() const;  // NOLINT",
          "146: #ifdef PLATFORM_GOOGLE",
          "147:   template <typename T,",
          "148:             typename std::enable_if<std::is_same<T, absl::AlphaNum>::value,",
          "149:                                     T>::type* = nullptr>",
          "150:   operator T() const;  // NOLINT TODO(b/147740521): Remove.",
          "151: #endif  // PLATFORM_GOOGLE",
          "154:   size_t size() const;",
          "155:   size_t length() const;",
          "156:   size_t capacity() const;",
          "157:   bool empty() const;",
          "158:   Type type() const;",
          "161:   void resize(size_t new_size, char c = 0);",
          "163:   void resize_uninitialized(size_t new_size);",
          "164:   void clear() noexcept;",
          "165:   void reserve(size_t n);",
          "168:   const_iterator begin() const;",
          "169:   const_iterator end() const;",
          "172:   const char* c_str() const;",
          "173:   const char* data() const;",
          "174:   const char& operator[](size_t i) const;",
          "175:   const char& back() const;",
          "182:   char* mdata();",
          "183:   char* data();  // DEPRECATED: Use mdata().",
          "184:   char& operator[](size_t i);",
          "187:   tstring& assign(const char* str, size_t len);",
          "188:   tstring& assign(const char* str);",
          "191:   tstring& assign_as_view(const tstring& str);",
          "192:   tstring& assign_as_view(const std::string& str);",
          "193:   tstring& assign_as_view(const StringPiece str);",
          "194:   tstring& assign_as_view(const char* str, size_t len);",
          "195:   tstring& assign_as_view(const char* str);",
          "199:   tstring& append(const tstring& str);",
          "200:   tstring& append(const char* str, size_t len);",
          "201:   tstring& append(const char* str);",
          "202:   tstring& append(size_t n, char c);",
          "204:   tstring& erase(size_t pos, size_t len);",
          "206:   tstring& insert(size_t pos, const tstring& str, size_t subpos, size_t sublen);",
          "207:   tstring& insert(size_t pos, size_t n, char c);",
          "208:   void swap(tstring& str);",
          "209:   void push_back(char ch);",
          "212:   friend bool operator==(const char* a, const tstring& b);",
          "213:   friend bool operator==(const std::string& a, const tstring& b);",
          "214:   friend tstring operator+(const tstring& a, const tstring& b);",
          "215:   friend std::ostream& operator<<(std::ostream& o, const tstring& str);",
          "216:   friend std::hash<tstring>;",
          "217: };",
          "221: bool operator==(const char* a, const tstring& b);",
          "222: bool operator==(const std::string& a, const tstring& b);",
          "223: tstring operator+(const tstring& a, const tstring& b);",
          "224: std::ostream& operator<<(std::ostream& o, const tstring& str);",
          "230: inline tstring::tstring() { TF_TString_Init(&tstr_); }",
          "232: inline tstring::tstring(const char* str, size_t len) {",
          "233:   TF_TString_Init(&tstr_);",
          "234:   TF_TString_Copy(&tstr_, str, len);",
          "235: }",
          "237: inline tstring::tstring(const char* str) : tstring(str, ::strlen(str)) {}",
          "239: inline tstring::tstring(size_t n, char c) {",
          "240:   TF_TString_Init(&tstr_);",
          "241:   TF_TString_Resize(&tstr_, n, c);",
          "242: }",
          "244: inline tstring::tstring(const std::string& str)",
          "245:     : tstring(str.data(), str.size()) {}",
          "247: inline tstring::tstring(const StringPiece str)",
          "248:     : tstring(str.data(), str.size()) {}",
          "250: #ifdef PLATFORM_GOOGLE",
          "251: inline tstring::tstring(const absl::Cord& cord) {",
          "252:   TF_TString_Init(&tstr_);",
          "253:   TF_TString_ResizeUninitialized(&tstr_, cord.size());",
          "255:   cord.CopyToArray(data());",
          "256: }",
          "257: #endif  // PLATFORM_GOOGLE",
          "261: inline tstring::tstring(const tstring& str) {",
          "262:   TF_TString_Init(&tstr_);",
          "263:   TF_TString_Assign(&tstr_, &str.tstr_);",
          "264: }",
          "268: inline tstring::tstring(tstring&& str) noexcept {",
          "269:   TF_TString_Init(&tstr_);",
          "270:   TF_TString_Move(&tstr_, &str.tstr_);",
          "271: }",
          "275: inline tstring::~tstring() { TF_TString_Dealloc(&tstr_); }",
          "279: inline tstring& tstring::operator=(const tstring& str) {",
          "280:   TF_TString_Assign(&tstr_, &str.tstr_);",
          "282:   return *this;",
          "283: }",
          "285: inline tstring& tstring::operator=(const std::string& str) {",
          "286:   TF_TString_Copy(&tstr_, str.data(), str.size());",
          "287:   return *this;",
          "288: }",
          "290: inline tstring& tstring::operator=(const char* str) {",
          "291:   TF_TString_Copy(&tstr_, str, ::strlen(str));",
          "293:   return *this;",
          "294: }",
          "296: inline tstring& tstring::operator=(char c) {",
          "297:   resize_uninitialized(1);",
          "298:   (*this)[0] = c;",
          "300:   return *this;",
          "301: }",
          "303: inline tstring& tstring::operator=(const StringPiece str) {",
          "304:   TF_TString_Copy(&tstr_, str.data(), str.size());",
          "306:   return *this;",
          "307: }",
          "309: #ifdef PLATFORM_GOOGLE",
          "310: inline tstring& tstring::operator=(const absl::Cord& cord) {",
          "311:   TF_TString_ResizeUninitialized(&tstr_, cord.size());",
          "313:   cord.CopyToArray(data());",
          "315:   return *this;",
          "316: }",
          "317: #endif  // PLATFORM_GOOGLE",
          "321: inline tstring& tstring::operator=(const tstring::view& tsv) {",
          "322:   assign_as_view(tsv.data(), tsv.size());",
          "324:   return *this;",
          "325: }",
          "329: inline tstring& tstring::operator=(tstring&& str) {",
          "330:   TF_TString_Move(&tstr_, &str.tstr_);",
          "332:   return *this;",
          "333: }",
          "337: inline int tstring::compare(const char* str, size_t len) const {",
          "338:   int ret = ::memcmp(data(), str, std::min(len, size()));",
          "340:   if (ret < 0) return -1;",
          "341:   if (ret > 0) return +1;",
          "343:   if (size() < len) return -1;",
          "344:   if (size() > len) return +1;",
          "346:   return 0;",
          "347: }",
          "349: inline bool tstring::operator<(const tstring& o) const {",
          "350:   return compare(o.data(), o.size()) < 0;",
          "351: }",
          "353: inline bool tstring::operator>(const tstring& o) const {",
          "354:   return compare(o.data(), o.size()) > 0;",
          "355: }",
          "357: inline bool tstring::operator==(const char* str) const {",
          "358:   return ::strlen(str) == size() && ::memcmp(data(), str, size()) == 0;",
          "359: }",
          "361: inline bool tstring::operator==(const tstring& o) const {",
          "362:   return o.size() == size() && ::memcmp(data(), o.data(), size()) == 0;",
          "363: }",
          "365: inline bool tstring::operator!=(const char* str) const {",
          "366:   return !(*this == str);",
          "367: }",
          "369: inline bool tstring::operator!=(const tstring& o) const {",
          "370:   return !(*this == o);",
          "371: }",
          "375: inline tstring::operator std::string() const {",
          "376:   return std::string(data(), size());",
          "377: }",
          "379: inline tstring::operator StringPiece() const {",
          "380:   return StringPiece(data(), size());",
          "381: }",
          "383: #ifdef PLATFORM_GOOGLE",
          "384: template <typename T, typename std::enable_if<",
          "385:                           std::is_same<T, absl::AlphaNum>::value, T>::type*>",
          "386: inline tstring::operator T() const {",
          "387:   return T(StringPiece(*this));",
          "388: }",
          "389: #endif  // PLATFORM_GOOGLE",
          "393: inline size_t tstring::size() const { return TF_TString_GetSize(&tstr_); }",
          "395: inline size_t tstring::length() const { return size(); }",
          "397: inline size_t tstring::capacity() const {",
          "398:   return TF_TString_GetCapacity(&tstr_);",
          "399: }",
          "401: inline bool tstring::empty() const { return size() == 0; }",
          "403: inline tstring::Type tstring::type() const {",
          "404:   return static_cast<tstring::Type>(TF_TString_GetType(&tstr_));",
          "405: }",
          "409: inline void tstring::resize(size_t new_size, char c) {",
          "410:   TF_TString_Resize(&tstr_, new_size, c);",
          "411: }",
          "413: inline void tstring::resize_uninitialized(size_t new_size) {",
          "414:   TF_TString_ResizeUninitialized(&tstr_, new_size);",
          "415: }",
          "417: inline void tstring::clear() noexcept {",
          "418:   TF_TString_ResizeUninitialized(&tstr_, 0);",
          "419: }",
          "421: inline void tstring::reserve(size_t n) { TF_TString_Reserve(&tstr_, n); }",
          "425: inline tstring::const_iterator tstring::begin() const { return &(*this)[0]; }",
          "426: inline tstring::const_iterator tstring::end() const { return &(*this)[size()]; }",
          "430: inline const char* tstring::c_str() const { return data(); }",
          "432: inline const char* tstring::data() const {",
          "433:   return TF_TString_GetDataPointer(&tstr_);",
          "434: }",
          "436: inline const char& tstring::operator[](size_t i) const { return data()[i]; }",
          "438: inline const char& tstring::back() const { return (*this)[size() - 1]; }",
          "440: inline char* tstring::mdata() {",
          "441:   return TF_TString_GetMutableDataPointer(&tstr_);",
          "442: }",
          "444: inline char* tstring::data() {",
          "446:   return mdata();",
          "447: }",
          "449: inline char& tstring::operator[](size_t i) { return mdata()[i]; }",
          "453: inline tstring& tstring::assign(const char* str, size_t len) {",
          "454:   TF_TString_Copy(&tstr_, str, len);",
          "456:   return *this;",
          "457: }",
          "459: inline tstring& tstring::assign(const char* str) {",
          "460:   assign(str, ::strlen(str));",
          "462:   return *this;",
          "463: }",
          "467: inline tstring& tstring::assign_as_view(const tstring& str) {",
          "468:   assign_as_view(str.data(), str.size());",
          "470:   return *this;",
          "471: }",
          "473: inline tstring& tstring::assign_as_view(const std::string& str) {",
          "474:   assign_as_view(str.data(), str.size());",
          "476:   return *this;",
          "479: inline tstring& tstring::assign_as_view(const StringPiece str) {",
          "480:   assign_as_view(str.data(), str.size());",
          "482:   return *this;",
          "483: }",
          "485: inline tstring& tstring::assign_as_view(const char* str, size_t len) {",
          "486:   TF_TString_AssignView(&tstr_, str, len);",
          "488:   return *this;",
          "489: }",
          "491: inline tstring& tstring::assign_as_view(const char* str) {",
          "492:   assign_as_view(str, ::strlen(str));",
          "494:   return *this;",
          "495: }",
          "499: inline tstring& tstring::append(const tstring& str) {",
          "500:   TF_TString_Append(&tstr_, &str.tstr_);",
          "502:   return *this;",
          "503: }",
          "505: inline tstring& tstring::append(const char* str, size_t len) {",
          "506:   TF_TString_AppendN(&tstr_, str, len);",
          "508:   return *this;",
          "509: }",
          "511: inline tstring& tstring::append(const char* str) {",
          "512:   append(str, ::strlen(str));",
          "514:   return *this;",
          "515: }",
          "517: inline tstring& tstring::append(size_t n, char c) {",
          "519:   const size_t new_size = size() + n;",
          "520:   TF_TString_ReserveAmortized(&tstr_, new_size);",
          "521:   resize(new_size, c);",
          "523:   return *this;",
          "524: }",
          "526: inline tstring& tstring::erase(size_t pos, size_t len) {",
          "527:   memmove(mdata() + pos, data() + pos + len, size() - len - pos);",
          "529:   resize(size() - len);",
          "531:   return *this;",
          "532: }",
          "534: inline tstring& tstring::insert(size_t pos, const tstring& str, size_t subpos,",
          "535:                                 size_t sublen) {",
          "536:   size_t orig_size = size();",
          "537:   TF_TString_ResizeUninitialized(&tstr_, orig_size + sublen);",
          "539:   memmove(mdata() + pos + sublen, data() + pos, orig_size - pos);",
          "540:   memmove(mdata() + pos, str.data() + subpos, sublen);",
          "542:   return *this;",
          "543: }",
          "545: inline tstring& tstring::insert(size_t pos, size_t n, char c) {",
          "546:   size_t size_ = size();",
          "547:   TF_TString_ResizeUninitialized(&tstr_, size_ + n);",
          "549:   memmove(mdata() + pos + n, data() + pos, size_ - pos);",
          "550:   memset(mdata() + pos, c, n);",
          "552:   return *this;",
          "553: }",
          "555: inline void tstring::swap(tstring& str) {",
          "557:   std::swap(tstr_, str.tstr_);",
          "558: }",
          "560: inline void tstring::push_back(char ch) { append(1, ch); }",
          "564: inline bool operator==(const char* a, const tstring& b) {",
          "565:   return ::strlen(a) == b.size() && ::memcmp(a, b.data(), b.size()) == 0;",
          "566: }",
          "568: inline bool operator==(const std::string& a, const tstring& b) {",
          "569:   return a.size() == b.size() && ::memcmp(a.data(), b.data(), b.size()) == 0;",
          "570: }",
          "572: inline tstring operator+(const tstring& a, const tstring& b) {",
          "573:   tstring r;",
          "574:   r.reserve(a.size() + b.size());",
          "575:   r.append(a);",
          "576:   r.append(b);",
          "578:   return r;",
          "579: }",
          "581: inline std::ostream& operator<<(std::ostream& o, const tstring& str) {",
          "582:   return o.write(str.data(), str.size());",
          "583: }",
          "585: }  // namespace tensorflow",
          "",
          "[Added Lines]",
          "19: #include \"tensorflow/tsl/platform/tstring.h\"",
          "23: using tstring = tsl::tstring;",
          "",
          "---------------"
        ],
        "tensorflow/core/util/mirror_pad_mode.cc||tensorflow/core/util/mirror_pad_mode.cc": [
          "File: tensorflow/core/util/mirror_pad_mode.cc -> tensorflow/core/util/mirror_pad_mode.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"tensorflow/core/framework/graph.pb.h\"",
          "19: #include \"tensorflow/core/framework/node_def_util.h\"",
          "20: #include \"tensorflow/core/lib/core/errors.h\"",
          "22: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include \"tensorflow/core/lib/core/stringpiece.h\"",
          "",
          "---------------"
        ],
        "tensorflow/core/util/mirror_pad_mode.h||tensorflow/core/util/mirror_pad_mode.h": [
          "File: tensorflow/core/util/mirror_pad_mode.h -> tensorflow/core/util/mirror_pad_mode.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <string>",
          "24: #include \"tensorflow/core/lib/core/status.h\"",
          "26: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include \"tensorflow/core/lib/core/stringpiece.h\"",
          "",
          "---------------"
        ],
        "tensorflow/tsl/platform/cord.h||tensorflow/tsl/platform/cord.h": [
          "File: tensorflow/tsl/platform/cord.h -> tensorflow/tsl/platform/cord.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: you may not use this file except in compliance with the License.",
          "5: You may obtain a copy of the License at",
          "7:     http://www.apache.org/licenses/LICENSE-2.0",
          "9: Unless required by applicable law or agreed to in writing, software",
          "10: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "16: #ifndef TENSORFLOW_TSL_PLATFORM_CORD_H_",
          "17: #define TENSORFLOW_TSL_PLATFORM_CORD_H_",
          "19: #include \"tensorflow/tsl/platform/platform.h\"",
          "22: #if defined(PLATFORM_GOOGLE)",
          "23: #include \"tensorflow/tsl/platform/google/cord.h\"  // IWYU pragma: export",
          "24: #else",
          "25: #include \"tensorflow/tsl/platform/default/cord.h\"  // IWYU pragma: export",
          "26: #endif",
          "28: #endif  // TENSORFLOW_TSL_PLATFORM_CORD_H_",
          "",
          "---------------"
        ],
        "tensorflow/tsl/platform/ctstring.h||tensorflow/tsl/platform/ctstring.h": [
          "File: tensorflow/tsl/platform/ctstring.h -> tensorflow/tsl/platform/ctstring.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: you may not use this file except in compliance with the License.",
          "5: You may obtain a copy of the License at",
          "7:     http://www.apache.org/licenses/LICENSE-2.0",
          "9: Unless required by applicable law or agreed to in writing, software",
          "10: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "16: #ifndef TENSORFLOW_TSL_PLATFORM_CTSTRING_H_",
          "17: #define TENSORFLOW_TSL_PLATFORM_CTSTRING_H_",
          "19: #include <stdint.h>",
          "20: #include <stdlib.h>",
          "22: #include \"tensorflow/tsl/platform/ctstring_internal.h\"",
          "26: inline void TF_TString_Init(TF_TString *str);",
          "28: inline void TF_TString_Dealloc(TF_TString *str);",
          "33: inline char *TF_TString_Resize(TF_TString *str, size_t new_size, char c);",
          "38: inline char *TF_TString_ResizeUninitialized(TF_TString *str, size_t new_size);",
          "45: inline void TF_TString_Reserve(TF_TString *str, size_t new_cap);",
          "48: inline void TF_TString_ReserveAmortized(TF_TString *str, size_t new_cap);",
          "51: inline size_t TF_TString_GetSize(const TF_TString *str);",
          "55: inline size_t TF_TString_GetCapacity(const TF_TString *str);",
          "77: inline TF_TString_Type TF_TString_GetType(const TF_TString *str);",
          "81: inline const char *TF_TString_GetDataPointer(const TF_TString *str);",
          "85: inline char *TF_TString_GetMutableDataPointer(TF_TString *str);",
          "92: inline void TF_TString_AssignView(TF_TString *dst, const char *src,",
          "93:                                   size_t size);",
          "98: inline void TF_TString_Append(TF_TString *dst, const TF_TString *src);",
          "99: inline void TF_TString_AppendN(TF_TString *dst, const char *src, size_t size);",
          "113: inline void TF_TString_Copy(TF_TString *dst, const char *src, size_t size);",
          "117: inline void TF_TString_Assign(TF_TString *dst, const TF_TString *src);",
          "121: inline void TF_TString_Move(TF_TString *dst, TF_TString *src);",
          "123: #endif  // TENSORFLOW_TSL_PLATFORM_CTSTRING_H_",
          "",
          "---------------"
        ],
        "tensorflow/tsl/platform/ctstring_internal.h||tensorflow/tsl/platform/ctstring_internal.h": [
          "File: tensorflow/tsl/platform/ctstring_internal.h -> tensorflow/tsl/platform/ctstring_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: you may not use this file except in compliance with the License.",
          "5: You may obtain a copy of the License at",
          "7:     http://www.apache.org/licenses/LICENSE-2.0",
          "9: Unless required by applicable law or agreed to in writing, software",
          "10: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "16: #ifndef TENSORFLOW_TSL_PLATFORM_CTSTRING_INTERNAL_H_",
          "17: #define TENSORFLOW_TSL_PLATFORM_CTSTRING_INTERNAL_H_",
          "19: #include <limits.h>",
          "20: #include <stdint.h>",
          "21: #include <stdlib.h>",
          "22: #include <string.h>",
          "24: #if (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && \\",
          "25:      __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__) ||                  \\",
          "26:     defined(_WIN32)",
          "27: #define TF_TSTRING_LITTLE_ENDIAN 1",
          "28: #elif defined(__BYTE_ORDER__) && defined(__ORDER_BIG_ENDIAN__) && \\",
          "29:     __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__",
          "30: #define TF_TSTRING_LITTLE_ENDIAN 0",
          "31: #else",
          "32: #error \"Unable to detect endianness.\"",
          "33: #endif",
          "35: #if defined(__clang__) || \\",
          "36:     (defined(__GNUC__) && \\",
          "37:      ((__GNUC__ == 4 && __GNUC_MINOR__ >= 8) || __GNUC__ >= 5))",
          "38: static inline uint32_t TF_swap32(uint32_t host_int) {",
          "39:   return __builtin_bswap32(host_int);",
          "40: }",
          "42: #elif defined(_MSC_VER)",
          "43: static inline uint32_t TF_swap32(uint32_t host_int) {",
          "44:   return _byteswap_ulong(host_int);",
          "45: }",
          "47: #elif defined(__APPLE__)",
          "48: static inline uint32_t TF_swap32(uint32_t host_int) {",
          "49:   return OSSwapInt32(host_int);",
          "50: }",
          "52: #else",
          "53: static inline uint32_t TF_swap32(uint32_t host_int) {",
          "54: #if defined(__GLIBC__)",
          "55:   return bswap_32(host_int);",
          "56: #else   // defined(__GLIBC__)",
          "57:   return (((host_int & uint32_t{0xFF}) << 24) |",
          "58:           ((host_int & uint32_t{0xFF00}) << 8) |",
          "59:           ((host_int & uint32_t{0xFF0000}) >> 8) |",
          "60:           ((host_int & uint32_t{0xFF000000}) >> 24));",
          "61: #endif  // defined(__GLIBC__)",
          "62: }",
          "63: #endif",
          "65: #if TF_TSTRING_LITTLE_ENDIAN",
          "66: #define TF_le32toh(x) x",
          "67: #else  // TF_TSTRING_LITTLE_ENDIAN",
          "68: #define TF_le32toh(x) TF_swap32(x)",
          "69: #endif  // TF_TSTRING_LITTLE_ENDIAN",
          "71: static inline size_t TF_align16(size_t i) { return (i + 0xF) & ~0xF; }",
          "73: static inline size_t TF_max(size_t a, size_t b) { return a > b ? a : b; }",
          "74: static inline size_t TF_min(size_t a, size_t b) { return a < b ? a : b; }",
          "76: typedef enum TF_TString_Type {  // NOLINT",
          "77:   TF_TSTR_SMALL = 0x00,",
          "78:   TF_TSTR_LARGE = 0x01,",
          "79:   TF_TSTR_OFFSET = 0x02,",
          "80:   TF_TSTR_VIEW = 0x03,",
          "81:   TF_TSTR_TYPE_MASK = 0x03",
          "82: } TF_TString_Type;",
          "84: typedef struct TF_TString_Large {  // NOLINT",
          "85:   size_t size;",
          "86:   size_t cap;",
          "87:   char *ptr;",
          "88: } TF_TString_Large;",
          "90: typedef struct TF_TString_Offset {  // NOLINT",
          "91:   uint32_t size;",
          "92:   uint32_t offset;",
          "93:   uint32_t count;",
          "94: } TF_TString_Offset;",
          "96: typedef struct TF_TString_View {  // NOLINT",
          "97:   size_t size;",
          "98:   const char *ptr;",
          "99: } TF_TString_View;",
          "101: typedef struct TF_TString_Raw {  // NOLINT",
          "102:   uint8_t raw[24];",
          "103: } TF_TString_Raw;",
          "105: typedef union TF_TString_Union {  // NOLINT",
          "106:   TF_TString_Large large;",
          "107:   TF_TString_Offset offset;",
          "108:   TF_TString_View view;",
          "109:   TF_TString_Raw raw;",
          "110: } TF_TString_Union;",
          "112: enum {",
          "113:   TF_TString_SmallCapacity =",
          "114:       (sizeof(TF_TString_Union) - sizeof(/* null delim */ char) -",
          "115:        sizeof(/* uint8_t size */ uint8_t)),",
          "116: };",
          "118: typedef struct TF_TString_Small {  // NOLINT",
          "119:   uint8_t size;",
          "120:   char str[TF_TString_SmallCapacity + sizeof(/* null delim */ char)];",
          "121: } TF_TString_Small;",
          "123: typedef struct TF_TString {  // NOLINT",
          "124:   union {",
          "127:     TF_TString_Small smll;",
          "128:     TF_TString_Large large;",
          "129:     TF_TString_Offset offset;",
          "130:     TF_TString_View view;",
          "131:     TF_TString_Raw raw;",
          "132:   } u;",
          "133: } TF_TString;",
          "139: static inline TF_TString_Type TF_TString_GetType(const TF_TString *str) {",
          "140:   return (TF_TString_Type)(str->u.raw.raw[0] & TF_TSTR_TYPE_MASK);  // NOLINT",
          "141: }",
          "147: static inline size_t TF_TString_ToActualSizeT(size_t size) {",
          "148: #if TF_TSTRING_LITTLE_ENDIAN",
          "149:   return size >> 2;",
          "150: #else   // TF_TSTRING_LITTLE_ENDIAN",
          "152:   static const size_t mask = ~((~(size_t)0) >> 8);",
          "154:   return (((mask << 2) & size) >> 2) | (~mask & size);",
          "155: #endif  // TF_TSTRING_LITTLE_ENDIAN",
          "156: }",
          "158: static inline size_t TF_TString_ToInternalSizeT(size_t size,",
          "159:                                                 TF_TString_Type type) {",
          "160: #if TF_TSTRING_LITTLE_ENDIAN",
          "161:   return (size << 2) | type;",
          "162: #else   // TF_TSTRING_LITTLE_ENDIAN",
          "164:   static const size_t mask = ~((~(size_t)0) >> 8);",
          "166:   return (mask & (size << 2)) | (~mask & size) |",
          "167:          ((size_t)type << ((sizeof(size_t) - 1) * 8));  // NOLINT",
          "168: #endif  // TF_TSTRING_LITTLE_ENDIAN",
          "169: }",
          "171: static inline void TF_TString_Init(TF_TString *str) {",
          "172:   memset(str->u.raw.raw, 0, sizeof(TF_TString_Raw));",
          "173: }",
          "175: static inline void TF_TString_Dealloc(TF_TString *str) {",
          "176:   if (TF_TString_GetType(str) == TF_TSTR_LARGE &&",
          "177:       str->u.large.ptr != NULL) {  // NOLINT",
          "178:     free(str->u.large.ptr);",
          "179:     TF_TString_Init(str);",
          "180:   }",
          "181: }",
          "183: static inline size_t TF_TString_GetSize(const TF_TString *str) {",
          "184:   switch (TF_TString_GetType(str)) {",
          "185:     case TF_TSTR_SMALL:",
          "186:       return str->u.smll.size >> 2;",
          "187:     case TF_TSTR_LARGE:",
          "188:       return TF_TString_ToActualSizeT(str->u.large.size);",
          "189:     case TF_TSTR_OFFSET:",
          "190:       return TF_le32toh(str->u.offset.size) >> 2;",
          "191:     case TF_TSTR_VIEW:",
          "192:       return TF_TString_ToActualSizeT(str->u.view.size);",
          "193:     default:",
          "194:       return 0;  // Unreachable.",
          "195:   }",
          "196: }",
          "198: static inline size_t TF_TString_GetCapacity(const TF_TString *str) {",
          "199:   switch (TF_TString_GetType(str)) {",
          "200:     case TF_TSTR_SMALL:",
          "201:       return TF_TString_SmallCapacity;",
          "202:     case TF_TSTR_LARGE:",
          "203:       return str->u.large.cap;",
          "204:     case TF_TSTR_OFFSET:",
          "205:     case TF_TSTR_VIEW:",
          "206:     default:",
          "207:       return 0;",
          "208:   }",
          "209: }",
          "211: static inline const char *TF_TString_GetDataPointer(const TF_TString *str) {",
          "212:   switch (TF_TString_GetType(str)) {",
          "213:     case TF_TSTR_SMALL:",
          "214:       return str->u.smll.str;",
          "215:     case TF_TSTR_LARGE:",
          "216:       return str->u.large.ptr;",
          "217:     case TF_TSTR_OFFSET:",
          "218:       return (const char *)str + TF_le32toh(str->u.offset.offset);  // NOLINT",
          "219:     case TF_TSTR_VIEW:",
          "220:       return str->u.view.ptr;",
          "221:     default:",
          "223:       return NULL;  // NOLINT",
          "224:   }",
          "225: }",
          "227: static inline char *TF_TString_ResizeUninitialized(TF_TString *str,",
          "228:                                                    size_t new_size) {",
          "229:   size_t curr_size = TF_TString_GetSize(str);",
          "230:   size_t copy_size = TF_min(new_size, curr_size);",
          "232:   TF_TString_Type curr_type = TF_TString_GetType(str);",
          "233:   const char *curr_ptr = TF_TString_GetDataPointer(str);",
          "236:   if (new_size <= TF_TString_SmallCapacity) {",
          "237:     str->u.smll.size = (uint8_t)((new_size << 2) | TF_TSTR_SMALL);  // NOLINT",
          "238:     str->u.smll.str[new_size] = '\\0';",
          "240:     if (curr_type != TF_TSTR_SMALL && copy_size) {",
          "241:       memcpy(str->u.smll.str, curr_ptr, copy_size);",
          "242:     }",
          "244:     if (curr_type == TF_TSTR_LARGE) {",
          "245:       free((void *)curr_ptr);  // NOLINT",
          "246:     }",
          "250:     return str->u.smll.str;",
          "251:   }",
          "254:   size_t new_cap;",
          "255:   size_t curr_cap = TF_TString_GetCapacity(str);",
          "257:   if (new_size < curr_size && new_size < curr_cap / 2) {",
          "259:     new_cap = TF_align16(curr_cap / 2 + 1) - 1;",
          "260:   } else if (new_size > curr_cap) {",
          "261:     new_cap = TF_align16(new_size + 1) - 1;",
          "262:   } else {",
          "263:     new_cap = curr_cap;",
          "264:   }",
          "266:   char *new_ptr;",
          "267:   if (new_cap == curr_cap) {",
          "268:     new_ptr = str->u.large.ptr;",
          "269:   } else if (curr_type == TF_TSTR_LARGE) {",
          "270:     new_ptr = (char *)realloc(str->u.large.ptr, new_cap + 1);  // NOLINT",
          "271:   } else {",
          "272:     new_ptr = (char *)malloc(new_cap + 1);  // NOLINT",
          "273:     if (copy_size) {",
          "274:       memcpy(new_ptr, curr_ptr, copy_size);",
          "275:     }",
          "276:   }",
          "278:   str->u.large.size = TF_TString_ToInternalSizeT(new_size, TF_TSTR_LARGE);",
          "279:   str->u.large.ptr = new_ptr;",
          "280:   str->u.large.ptr[new_size] = '\\0';",
          "281:   str->u.large.cap = new_cap;",
          "283:   return str->u.large.ptr;",
          "284: }",
          "286: static inline char *TF_TString_GetMutableDataPointer(TF_TString *str) {",
          "287:   switch (TF_TString_GetType(str)) {",
          "288:     case TF_TSTR_SMALL:",
          "289:       return str->u.smll.str;",
          "290:     case TF_TSTR_OFFSET:",
          "291:     case TF_TSTR_VIEW:",
          "293:       TF_TString_ResizeUninitialized(str, TF_TString_GetSize(str));",
          "294:       return (TF_TString_GetType(str) == TF_TSTR_SMALL) ? str->u.smll.str",
          "295:                                                         : str->u.large.ptr;",
          "296:     case TF_TSTR_LARGE:",
          "297:       return str->u.large.ptr;",
          "298:     default:",
          "300:       return NULL;  // NOLINT",
          "301:   }",
          "302: }",
          "304: static inline void TF_TString_Reserve(TF_TString *str, size_t new_cap) {",
          "305:   TF_TString_Type curr_type = TF_TString_GetType(str);",
          "307:   if (new_cap <= TF_TString_SmallCapacity) {",
          "313:     return;",
          "314:   }",
          "316:   if (curr_type == TF_TSTR_LARGE && new_cap <= str->u.large.cap) {",
          "318:     return;",
          "319:   }",
          "322:   size_t curr_size = TF_TString_GetSize(str);",
          "323:   const char *curr_ptr = TF_TString_GetDataPointer(str);",
          "327:   new_cap = TF_align16(TF_max(new_cap, curr_size) + 1) - 1;",
          "329:   if (curr_type == TF_TSTR_LARGE) {",
          "330:     str->u.large.ptr =",
          "331:         (char *)realloc(str->u.large.ptr, new_cap + 1);  // NOLINT",
          "332:   } else {",
          "334:     char *new_ptr = (char *)malloc(new_cap + 1);  // NOLINT",
          "335:     memcpy(new_ptr, curr_ptr, curr_size);",
          "337:     str->u.large.size = TF_TString_ToInternalSizeT(curr_size, TF_TSTR_LARGE);",
          "338:     str->u.large.ptr = new_ptr;",
          "339:     str->u.large.ptr[curr_size] = '\\0';",
          "340:   }",
          "342:   str->u.large.cap = new_cap;",
          "343: }",
          "345: static inline void TF_TString_ReserveAmortized(TF_TString *str,",
          "346:                                                size_t new_cap) {",
          "347:   const size_t curr_cap = TF_TString_GetCapacity(str);",
          "348:   if (new_cap > curr_cap) {",
          "349:     TF_TString_Reserve(str, new_cap > 2 * curr_cap ? new_cap : 2 * curr_cap);",
          "350:   }",
          "351: }",
          "353: static inline char *TF_TString_Resize(TF_TString *str, size_t new_size,",
          "354:                                       char c) {",
          "355:   size_t curr_size = TF_TString_GetSize(str);",
          "356:   char *cstr = TF_TString_ResizeUninitialized(str, new_size);",
          "358:   if (new_size > curr_size) {",
          "359:     memset(cstr + curr_size, c, new_size - curr_size);",
          "360:   }",
          "362:   return cstr;",
          "363: }",
          "365: static inline void TF_TString_AssignView(TF_TString *dst, const char *src,",
          "366:                                          size_t size) {",
          "367:   TF_TString_Dealloc(dst);",
          "369:   dst->u.view.size = TF_TString_ToInternalSizeT(size, TF_TSTR_VIEW);",
          "370:   dst->u.view.ptr = src;",
          "371: }",
          "373: static inline void TF_TString_AppendN(TF_TString *dst, const char *src,",
          "374:                                       size_t src_size) {",
          "375:   if (!src_size) return;",
          "377:   size_t dst_size = TF_TString_GetSize(dst);",
          "380:   TF_TString_ReserveAmortized(dst, dst_size + src_size);",
          "381:   char *dst_c = TF_TString_ResizeUninitialized(dst, dst_size + src_size);",
          "383:   memcpy(dst_c + dst_size, src, src_size);",
          "384: }",
          "386: static inline void TF_TString_Append(TF_TString *dst, const TF_TString *src) {",
          "387:   const char *src_c = TF_TString_GetDataPointer(src);",
          "388:   size_t size = TF_TString_GetSize(src);",
          "390:   TF_TString_AppendN(dst, src_c, size);",
          "391: }",
          "393: static inline void TF_TString_Copy(TF_TString *dst, const char *src,",
          "394:                                    size_t size) {",
          "395:   char *dst_c = TF_TString_ResizeUninitialized(dst, size);",
          "397:   if (size) memcpy(dst_c, src, size);",
          "398: }",
          "400: static inline void TF_TString_Assign(TF_TString *dst, const TF_TString *src) {",
          "401:   if (dst == src) return;",
          "403:   TF_TString_Dealloc(dst);",
          "405:   switch (TF_TString_GetType(src)) {",
          "406:     case TF_TSTR_SMALL:",
          "407:     case TF_TSTR_VIEW:",
          "409:       return;",
          "410:     case TF_TSTR_LARGE: {",
          "411:       const char *src_c = TF_TString_GetDataPointer(src);",
          "412:       size_t size = TF_TString_GetSize(src);",
          "414:       TF_TString_Copy(dst, src_c, size);",
          "415:     }",
          "416:       return;",
          "417:     case TF_TSTR_OFFSET: {",
          "418:       const char *src_c = TF_TString_GetDataPointer(src);",
          "419:       size_t size = TF_TString_GetSize(src);",
          "421:       TF_TString_AssignView(dst, src_c, size);",
          "422:     }",
          "423:       return;",
          "424:     default:",
          "425:       return;  // Unreachable.",
          "426:   }",
          "427: }",
          "429: static inline void TF_TString_Move(TF_TString *dst, TF_TString *src) {",
          "430:   if (dst == src) return;",
          "432:   TF_TString_Dealloc(dst);",
          "434:   switch (TF_TString_GetType(src)) {",
          "435:     case TF_TSTR_SMALL:",
          "436:     case TF_TSTR_VIEW:",
          "438:       return;",
          "439:     case TF_TSTR_LARGE:",
          "441:       TF_TString_Init(src);",
          "442:       return;",
          "443:     case TF_TSTR_OFFSET: {",
          "444:       const char *src_c = TF_TString_GetDataPointer(src);",
          "445:       size_t size = TF_TString_GetSize(src);",
          "447:       TF_TString_AssignView(dst, src_c, size);",
          "448:     }",
          "449:       return;",
          "450:     default:",
          "451:       return;  // Unreachable.",
          "452:   }",
          "453: }",
          "455: #endif  // TENSORFLOW_TSL_PLATFORM_CTSTRING_INTERNAL_H_",
          "",
          "---------------"
        ],
        "tensorflow/tsl/platform/tstring.h||tensorflow/tsl/platform/tstring.h": [
          "File: tensorflow/tsl/platform/tstring.h -> tensorflow/tsl/platform/tstring.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: you may not use this file except in compliance with the License.",
          "5: You may obtain a copy of the License at",
          "7:     http://www.apache.org/licenses/LICENSE-2.0",
          "9: Unless required by applicable law or agreed to in writing, software",
          "10: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "16: #ifndef TENSORFLOW_TSL_PLATFORM_TSTRING_H_",
          "17: #define TENSORFLOW_TSL_PLATFORM_TSTRING_H_",
          "19: #include <assert.h>",
          "21: #include <ostream>",
          "22: #include <string>",
          "24: #include \"tensorflow/tsl/platform/cord.h\"",
          "25: #include \"tensorflow/tsl/platform/ctstring.h\"",
          "26: #include \"tensorflow/tsl/platform/stringpiece.h\"",
          "28: namespace tsl {",
          "63: class tstring {",
          "64:   TF_TString tstr_;",
          "66:  public:",
          "67:   enum Type {",
          "69:     SMALL = TF_TSTR_SMALL,",
          "70:     LARGE = TF_TSTR_LARGE,",
          "71:     OFFSET = TF_TSTR_OFFSET,",
          "72:     VIEW = TF_TSTR_VIEW,",
          "73:   };",
          "77:   class view {",
          "78:     const char* data_;",
          "79:     size_t size_;",
          "81:    public:",
          "82:     explicit view(const char* data, size_t size) : data_(data), size_(size) {}",
          "83:     explicit view(const char* data) : data_(data), size_(::strlen(data)) {}",
          "85:     const char* data() const { return data_; }",
          "87:     size_t size() const { return size_; }",
          "89:     view() = delete;",
          "90:     view(const view&) = delete;",
          "91:     view& operator=(const view&) = delete;",
          "92:   };",
          "94:   typedef const char* const_iterator;",
          "97:   tstring();",
          "98:   tstring(const std::string& str);  // NOLINT TODO(b/147740521): Make explicit.",
          "99:   tstring(const char* str, size_t len);",
          "100:   tstring(const char* str);  // NOLINT TODO(b/147740521): Make explicit.",
          "101:   tstring(size_t n, char c);",
          "102:   explicit tstring(const StringPiece str);",
          "103: #ifdef PLATFORM_GOOGLE",
          "104:   explicit tstring(const absl::Cord& cord);",
          "105: #endif  // PLATFORM_GOOGLE",
          "108:   tstring(const tstring& str);",
          "111:   tstring(tstring&& str) noexcept;",
          "114:   ~tstring();",
          "117:   tstring& operator=(const tstring& str);",
          "118:   tstring& operator=(const std::string& str);",
          "119:   tstring& operator=(const char* str);",
          "120:   tstring& operator=(char ch);",
          "121:   tstring& operator=(const StringPiece str);",
          "122: #ifdef PLATFORM_GOOGLE",
          "123:   tstring& operator=(const absl::Cord& cord);",
          "124: #endif  // PLATFORM_GOOGLE",
          "127:   tstring& operator=(const view& tsv);",
          "130:   tstring& operator=(tstring&& str);",
          "133:   int compare(const char* str, size_t len) const;",
          "134:   bool operator<(const tstring& o) const;",
          "135:   bool operator>(const tstring& o) const;",
          "136:   bool operator==(const char* str) const;",
          "137:   bool operator==(const tstring& o) const;",
          "138:   bool operator!=(const char* str) const;",
          "139:   bool operator!=(const tstring& o) const;",
          "143:   operator std::string() const;  // NOLINT",
          "145:   operator StringPiece() const;  // NOLINT",
          "146: #ifdef PLATFORM_GOOGLE",
          "147:   template <typename T,",
          "148:             typename std::enable_if<std::is_same<T, absl::AlphaNum>::value,",
          "149:                                     T>::type* = nullptr>",
          "150:   operator T() const;  // NOLINT TODO(b/147740521): Remove.",
          "151: #endif  // PLATFORM_GOOGLE",
          "154:   size_t size() const;",
          "155:   size_t length() const;",
          "156:   size_t capacity() const;",
          "157:   bool empty() const;",
          "158:   Type type() const;",
          "161:   void resize(size_t new_size, char c = 0);",
          "163:   void resize_uninitialized(size_t new_size);",
          "164:   void clear() noexcept;",
          "165:   void reserve(size_t n);",
          "168:   const_iterator begin() const;",
          "169:   const_iterator end() const;",
          "172:   const char* c_str() const;",
          "173:   const char* data() const;",
          "174:   const char& operator[](size_t i) const;",
          "175:   const char& back() const;",
          "182:   char* mdata();",
          "183:   char* data();  // DEPRECATED: Use mdata().",
          "184:   char& operator[](size_t i);",
          "187:   tstring& assign(const char* str, size_t len);",
          "188:   tstring& assign(const char* str);",
          "191:   tstring& assign_as_view(const tstring& str);",
          "192:   tstring& assign_as_view(const std::string& str);",
          "193:   tstring& assign_as_view(const StringPiece str);",
          "194:   tstring& assign_as_view(const char* str, size_t len);",
          "195:   tstring& assign_as_view(const char* str);",
          "199:   tstring& append(const tstring& str);",
          "200:   tstring& append(const char* str, size_t len);",
          "201:   tstring& append(const char* str);",
          "202:   tstring& append(size_t n, char c);",
          "204:   tstring& erase(size_t pos, size_t len);",
          "206:   tstring& insert(size_t pos, const tstring& str, size_t subpos, size_t sublen);",
          "207:   tstring& insert(size_t pos, size_t n, char c);",
          "208:   void swap(tstring& str);",
          "209:   void push_back(char ch);",
          "212:   friend bool operator==(const char* a, const tstring& b);",
          "213:   friend bool operator==(const std::string& a, const tstring& b);",
          "214:   friend tstring operator+(const tstring& a, const tstring& b);",
          "215:   friend std::ostream& operator<<(std::ostream& o, const tstring& str);",
          "216:   friend std::hash<tstring>;",
          "217: };",
          "221: bool operator==(const char* a, const tstring& b);",
          "222: bool operator==(const std::string& a, const tstring& b);",
          "223: tstring operator+(const tstring& a, const tstring& b);",
          "224: std::ostream& operator<<(std::ostream& o, const tstring& str);",
          "230: inline tstring::tstring() { TF_TString_Init(&tstr_); }",
          "232: inline tstring::tstring(const char* str, size_t len) {",
          "233:   TF_TString_Init(&tstr_);",
          "234:   TF_TString_Copy(&tstr_, str, len);",
          "235: }",
          "237: inline tstring::tstring(const char* str) : tstring(str, ::strlen(str)) {}",
          "239: inline tstring::tstring(size_t n, char c) {",
          "240:   TF_TString_Init(&tstr_);",
          "241:   TF_TString_Resize(&tstr_, n, c);",
          "242: }",
          "244: inline tstring::tstring(const std::string& str)",
          "245:     : tstring(str.data(), str.size()) {}",
          "247: inline tstring::tstring(const StringPiece str)",
          "248:     : tstring(str.data(), str.size()) {}",
          "250: #ifdef PLATFORM_GOOGLE",
          "251: inline tstring::tstring(const absl::Cord& cord) {",
          "252:   TF_TString_Init(&tstr_);",
          "253:   TF_TString_ResizeUninitialized(&tstr_, cord.size());",
          "255:   cord.CopyToArray(data());",
          "256: }",
          "257: #endif  // PLATFORM_GOOGLE",
          "261: inline tstring::tstring(const tstring& str) {",
          "262:   TF_TString_Init(&tstr_);",
          "263:   TF_TString_Assign(&tstr_, &str.tstr_);",
          "264: }",
          "268: inline tstring::tstring(tstring&& str) noexcept {",
          "269:   TF_TString_Init(&tstr_);",
          "270:   TF_TString_Move(&tstr_, &str.tstr_);",
          "271: }",
          "275: inline tstring::~tstring() { TF_TString_Dealloc(&tstr_); }",
          "279: inline tstring& tstring::operator=(const tstring& str) {",
          "280:   TF_TString_Assign(&tstr_, &str.tstr_);",
          "282:   return *this;",
          "283: }",
          "285: inline tstring& tstring::operator=(const std::string& str) {",
          "286:   TF_TString_Copy(&tstr_, str.data(), str.size());",
          "287:   return *this;",
          "288: }",
          "290: inline tstring& tstring::operator=(const char* str) {",
          "291:   TF_TString_Copy(&tstr_, str, ::strlen(str));",
          "293:   return *this;",
          "294: }",
          "296: inline tstring& tstring::operator=(char c) {",
          "297:   resize_uninitialized(1);",
          "298:   (*this)[0] = c;",
          "300:   return *this;",
          "301: }",
          "303: inline tstring& tstring::operator=(const StringPiece str) {",
          "304:   TF_TString_Copy(&tstr_, str.data(), str.size());",
          "306:   return *this;",
          "307: }",
          "309: #ifdef PLATFORM_GOOGLE",
          "310: inline tstring& tstring::operator=(const absl::Cord& cord) {",
          "311:   TF_TString_ResizeUninitialized(&tstr_, cord.size());",
          "313:   cord.CopyToArray(data());",
          "315:   return *this;",
          "316: }",
          "317: #endif  // PLATFORM_GOOGLE",
          "321: inline tstring& tstring::operator=(const tstring::view& tsv) {",
          "322:   assign_as_view(tsv.data(), tsv.size());",
          "324:   return *this;",
          "325: }",
          "329: inline tstring& tstring::operator=(tstring&& str) {",
          "330:   TF_TString_Move(&tstr_, &str.tstr_);",
          "332:   return *this;",
          "333: }",
          "337: inline int tstring::compare(const char* str, size_t len) const {",
          "338:   int ret = ::memcmp(data(), str, std::min(len, size()));",
          "340:   if (ret < 0) return -1;",
          "341:   if (ret > 0) return +1;",
          "343:   if (size() < len) return -1;",
          "344:   if (size() > len) return +1;",
          "346:   return 0;",
          "347: }",
          "349: inline bool tstring::operator<(const tstring& o) const {",
          "350:   return compare(o.data(), o.size()) < 0;",
          "351: }",
          "353: inline bool tstring::operator>(const tstring& o) const {",
          "354:   return compare(o.data(), o.size()) > 0;",
          "355: }",
          "357: inline bool tstring::operator==(const char* str) const {",
          "358:   return ::strlen(str) == size() && ::memcmp(data(), str, size()) == 0;",
          "359: }",
          "361: inline bool tstring::operator==(const tstring& o) const {",
          "362:   return o.size() == size() && ::memcmp(data(), o.data(), size()) == 0;",
          "363: }",
          "365: inline bool tstring::operator!=(const char* str) const {",
          "366:   return !(*this == str);",
          "367: }",
          "369: inline bool tstring::operator!=(const tstring& o) const {",
          "370:   return !(*this == o);",
          "371: }",
          "375: inline tstring::operator std::string() const {",
          "376:   return std::string(data(), size());",
          "377: }",
          "379: inline tstring::operator StringPiece() const {",
          "380:   return StringPiece(data(), size());",
          "381: }",
          "383: #ifdef PLATFORM_GOOGLE",
          "384: template <typename T, typename std::enable_if<",
          "385:                           std::is_same<T, absl::AlphaNum>::value, T>::type*>",
          "386: inline tstring::operator T() const {",
          "387:   return T(StringPiece(*this));",
          "388: }",
          "389: #endif  // PLATFORM_GOOGLE",
          "393: inline size_t tstring::size() const { return TF_TString_GetSize(&tstr_); }",
          "395: inline size_t tstring::length() const { return size(); }",
          "397: inline size_t tstring::capacity() const {",
          "398:   return TF_TString_GetCapacity(&tstr_);",
          "399: }",
          "401: inline bool tstring::empty() const { return size() == 0; }",
          "403: inline tstring::Type tstring::type() const {",
          "404:   return static_cast<tstring::Type>(TF_TString_GetType(&tstr_));",
          "405: }",
          "409: inline void tstring::resize(size_t new_size, char c) {",
          "410:   TF_TString_Resize(&tstr_, new_size, c);",
          "411: }",
          "413: inline void tstring::resize_uninitialized(size_t new_size) {",
          "414:   TF_TString_ResizeUninitialized(&tstr_, new_size);",
          "415: }",
          "417: inline void tstring::clear() noexcept {",
          "418:   TF_TString_ResizeUninitialized(&tstr_, 0);",
          "419: }",
          "421: inline void tstring::reserve(size_t n) { TF_TString_Reserve(&tstr_, n); }",
          "425: inline tstring::const_iterator tstring::begin() const { return &(*this)[0]; }",
          "426: inline tstring::const_iterator tstring::end() const { return &(*this)[size()]; }",
          "430: inline const char* tstring::c_str() const { return data(); }",
          "432: inline const char* tstring::data() const {",
          "433:   return TF_TString_GetDataPointer(&tstr_);",
          "434: }",
          "436: inline const char& tstring::operator[](size_t i) const { return data()[i]; }",
          "438: inline const char& tstring::back() const { return (*this)[size() - 1]; }",
          "440: inline char* tstring::mdata() {",
          "441:   return TF_TString_GetMutableDataPointer(&tstr_);",
          "442: }",
          "444: inline char* tstring::data() {",
          "446:   return mdata();",
          "447: }",
          "449: inline char& tstring::operator[](size_t i) { return mdata()[i]; }",
          "453: inline tstring& tstring::assign(const char* str, size_t len) {",
          "454:   TF_TString_Copy(&tstr_, str, len);",
          "456:   return *this;",
          "457: }",
          "459: inline tstring& tstring::assign(const char* str) {",
          "460:   assign(str, ::strlen(str));",
          "462:   return *this;",
          "463: }",
          "467: inline tstring& tstring::assign_as_view(const tstring& str) {",
          "468:   assign_as_view(str.data(), str.size());",
          "470:   return *this;",
          "471: }",
          "473: inline tstring& tstring::assign_as_view(const std::string& str) {",
          "474:   assign_as_view(str.data(), str.size());",
          "476:   return *this;",
          "477: }",
          "479: inline tstring& tstring::assign_as_view(const StringPiece str) {",
          "480:   assign_as_view(str.data(), str.size());",
          "482:   return *this;",
          "483: }",
          "485: inline tstring& tstring::assign_as_view(const char* str, size_t len) {",
          "486:   TF_TString_AssignView(&tstr_, str, len);",
          "488:   return *this;",
          "489: }",
          "491: inline tstring& tstring::assign_as_view(const char* str) {",
          "492:   assign_as_view(str, ::strlen(str));",
          "494:   return *this;",
          "495: }",
          "499: inline tstring& tstring::append(const tstring& str) {",
          "500:   TF_TString_Append(&tstr_, &str.tstr_);",
          "502:   return *this;",
          "503: }",
          "505: inline tstring& tstring::append(const char* str, size_t len) {",
          "506:   TF_TString_AppendN(&tstr_, str, len);",
          "508:   return *this;",
          "509: }",
          "511: inline tstring& tstring::append(const char* str) {",
          "512:   append(str, ::strlen(str));",
          "514:   return *this;",
          "515: }",
          "517: inline tstring& tstring::append(size_t n, char c) {",
          "519:   const size_t new_size = size() + n;",
          "520:   TF_TString_ReserveAmortized(&tstr_, new_size);",
          "521:   resize(new_size, c);",
          "523:   return *this;",
          "524: }",
          "526: inline tstring& tstring::erase(size_t pos, size_t len) {",
          "527:   memmove(mdata() + pos, data() + pos + len, size() - len - pos);",
          "529:   resize(size() - len);",
          "531:   return *this;",
          "532: }",
          "534: inline tstring& tstring::insert(size_t pos, const tstring& str, size_t subpos,",
          "535:                                 size_t sublen) {",
          "536:   size_t orig_size = size();",
          "537:   TF_TString_ResizeUninitialized(&tstr_, orig_size + sublen);",
          "539:   memmove(mdata() + pos + sublen, data() + pos, orig_size - pos);",
          "540:   memmove(mdata() + pos, str.data() + subpos, sublen);",
          "542:   return *this;",
          "543: }",
          "545: inline tstring& tstring::insert(size_t pos, size_t n, char c) {",
          "546:   size_t size_ = size();",
          "547:   TF_TString_ResizeUninitialized(&tstr_, size_ + n);",
          "549:   memmove(mdata() + pos + n, data() + pos, size_ - pos);",
          "550:   memset(mdata() + pos, c, n);",
          "552:   return *this;",
          "553: }",
          "555: inline void tstring::swap(tstring& str) {",
          "557:   std::swap(tstr_, str.tstr_);",
          "558: }",
          "560: inline void tstring::push_back(char ch) { append(1, ch); }",
          "564: inline bool operator==(const char* a, const tstring& b) {",
          "565:   return ::strlen(a) == b.size() && ::memcmp(a, b.data(), b.size()) == 0;",
          "566: }",
          "568: inline bool operator==(const std::string& a, const tstring& b) {",
          "569:   return a.size() == b.size() && ::memcmp(a.data(), b.data(), b.size()) == 0;",
          "570: }",
          "572: inline tstring operator+(const tstring& a, const tstring& b) {",
          "573:   tstring r;",
          "574:   r.reserve(a.size() + b.size());",
          "575:   r.append(a);",
          "576:   r.append(b);",
          "578:   return r;",
          "579: }",
          "581: inline std::ostream& operator<<(std::ostream& o, const tstring& str) {",
          "582:   return o.write(str.data(), str.size());",
          "583: }",
          "585: }  // namespace tsl",
          "587: #endif  // TENSORFLOW_TSL_PLATFORM_TSTRING_H_",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a787e42f6c0f79c6007bc1c5ee0b60159508eb8",
      "candidate_info": {
        "commit_hash": "3a787e42f6c0f79c6007bc1c5ee0b60159508eb8",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/3a787e42f6c0f79c6007bc1c5ee0b60159508eb8",
        "files": [
          "tensorflow/core/platform/ctstring_internal.h",
          "tensorflow/core/platform/ctstring_test.cc"
        ],
        "message": "Fix macros for converting little endian to host for TF_TSRT_OFFSET GetSize\n\nMake the macro that converts little endian data do nothing on little endian hosts,\nand byte swap otherwise.\nThis only affects getting the size of TStrings of type \"Offset\".\n\nAdded a test for TStrings of type \"Offset\" that checks if type and size are consistent.\n\nPiperOrigin-RevId: 400789721\nChange-Id: I1398bffd842ab1631614b212b7c3a2af88d99538",
        "before_after_code_files": [
          "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h",
          "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h",
            "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc"
          ],
          "candidate": [
            "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h",
            "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h": [
          "File: tensorflow/core/platform/ctstring_internal.h -> tensorflow/core/platform/ctstring_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: #endif",
          "65: #if TF_TSTRING_LITTLE_ENDIAN",
          "68: #define TF_le32toh(x) x",
          "69: #endif  // TF_TSTRING_LITTLE_ENDIAN",
          "71: static inline size_t TF_align16(size_t i) { return (i + 0xF) & ~0xF; }",
          "",
          "[Removed Lines]",
          "66: #define TF_le32toh(x) TF_swap32(x)",
          "67: #else  // TF_TSTRING_LITTLE_ENDIAN",
          "",
          "[Added Lines]",
          "67: #else  // TF_TSTRING_LITTLE_ENDIAN",
          "68: #define TF_le32toh(x) TF_swap32(x)",
          "",
          "---------------"
        ],
        "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc": [
          "File: tensorflow/core/platform/ctstring_test.cc -> tensorflow/core/platform/ctstring_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <memory>",
          "19: #include <string>",
          "21: #include \"tensorflow/core/platform/test.h\"",
          "23: static const char kLongString[] =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include \"tensorflow/core/platform/ctstring_internal.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "380:     TF_TString_Dealloc(&s70);",
          "381:   }",
          "382: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "385: TEST(TF_CTStringTest, OffsetType) {",
          "386:   {",
          "387:     TF_TString s71;",
          "389:     TF_TString_Init(&s71);",
          "390:     size_t header_length = 24;",
          "391:     size_t size = 8;",
          "392:     TF_TString_ResizeUninitialized(&s71, header_length + size);",
          "393:     uint32_t save_size = s71.u.offset.size;",
          "394:     uint32_t save_offset = s71.u.offset.offset;",
          "395:     uint32_t save_count = s71.u.offset.count;",
          "397:     s71.u.offset.size = TF_TString_ToInternalSizeT(size, TF_TSTR_OFFSET);",
          "398:     s71.u.offset.offset = header_length;",
          "399:     s71.u.offset.count = 0;",
          "400:     EXPECT_EQ(size, TF_TString_GetSize(&s71));",
          "401:     EXPECT_EQ(TF_TSTR_OFFSET, TF_TString_GetType(&s71));",
          "404:     s71.u.offset.size = save_size;",
          "405:     s71.u.offset.offset = save_offset;",
          "406:     s71.u.offset.count = save_count;",
          "407:     TF_TString_Dealloc(&s71);",
          "408:   }",
          "409: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5550a2b669619c4915242a8bb268beac793088b3",
      "candidate_info": {
        "commit_hash": "5550a2b669619c4915242a8bb268beac793088b3",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/5550a2b669619c4915242a8bb268beac793088b3",
        "files": [
          "tensorflow/core/platform/ctstring_internal.h",
          "tensorflow/core/platform/ctstring_test.cc"
        ],
        "message": "Fix macros for converting little endian to host for TF_TSRT_OFFSET GetSize\n\nMake the macro that converts little endian data do nothing on little endian hosts,\nand byte swap otherwise.\nThis only affects getting the size of TStrings of type \"Offset\".\n\nAdded a test for TStrings of type \"Offset\" that checks if type and size are consistent.\n\nPiperOrigin-RevId: 400789721\nChange-Id: I1398bffd842ab1631614b212b7c3a2af88d99538",
        "before_after_code_files": [
          "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h",
          "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h",
            "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc"
          ],
          "candidate": [
            "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h",
            "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h": [
          "File: tensorflow/core/platform/ctstring_internal.h -> tensorflow/core/platform/ctstring_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: #endif",
          "65: #if TF_TSTRING_LITTLE_ENDIAN",
          "68: #define TF_le32toh(x) x",
          "69: #endif  // TF_TSTRING_LITTLE_ENDIAN",
          "71: static inline size_t TF_align16(size_t i) { return (i + 0xF) & ~0xF; }",
          "",
          "[Removed Lines]",
          "66: #define TF_le32toh(x) TF_swap32(x)",
          "67: #else  // TF_TSTRING_LITTLE_ENDIAN",
          "",
          "[Added Lines]",
          "67: #else  // TF_TSTRING_LITTLE_ENDIAN",
          "68: #define TF_le32toh(x) TF_swap32(x)",
          "",
          "---------------"
        ],
        "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc": [
          "File: tensorflow/core/platform/ctstring_test.cc -> tensorflow/core/platform/ctstring_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <memory>",
          "19: #include <string>",
          "21: #include \"tensorflow/core/platform/test.h\"",
          "23: static const char kLongString[] =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include \"tensorflow/core/platform/ctstring_internal.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329:     TF_TString_Dealloc(&s70);",
          "330:   }",
          "331: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334: TEST(TF_CTStringTest, OffsetType) {",
          "335:   {",
          "336:     TF_TString s71;",
          "338:     TF_TString_Init(&s71);",
          "339:     size_t header_length = 24;",
          "340:     size_t size = 8;",
          "341:     TF_TString_ResizeUninitialized(&s71, header_length + size);",
          "342:     uint32_t save_size = s71.u.offset.size;",
          "343:     uint32_t save_offset = s71.u.offset.offset;",
          "344:     uint32_t save_count = s71.u.offset.count;",
          "346:     s71.u.offset.size = TF_TString_ToInternalSizeT(size, TF_TSTR_OFFSET);",
          "347:     s71.u.offset.offset = header_length;",
          "348:     s71.u.offset.count = 0;",
          "349:     EXPECT_EQ(size, TF_TString_GetSize(&s71));",
          "350:     EXPECT_EQ(TF_TSTR_OFFSET, TF_TString_GetType(&s71));",
          "353:     s71.u.offset.size = save_size;",
          "354:     s71.u.offset.offset = save_offset;",
          "355:     s71.u.offset.count = save_count;",
          "356:     TF_TString_Dealloc(&s71);",
          "357:   }",
          "358: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c123828a00077439a569ceb5323616a52500c5f9",
      "candidate_info": {
        "commit_hash": "c123828a00077439a569ceb5323616a52500c5f9",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c123828a00077439a569ceb5323616a52500c5f9",
        "files": [
          "tensorflow/core/platform/ctstring_internal.h",
          "tensorflow/core/platform/ctstring_test.cc"
        ],
        "message": "Fix macros for converting little endian to host for TF_TSRT_OFFSET GetSize\n\nMake the macro that converts little endian data do nothing on little endian hosts,\nand byte swap otherwise.\nThis only affects getting the size of TStrings of type \"Offset\".\n\nAdded a test for TStrings of type \"Offset\" that checks if type and size are consistent.\n\nPiperOrigin-RevId: 400789721\nChange-Id: I1398bffd842ab1631614b212b7c3a2af88d99538",
        "before_after_code_files": [
          "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h",
          "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h",
            "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc"
          ],
          "candidate": [
            "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h",
            "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h": [
          "File: tensorflow/core/platform/ctstring_internal.h -> tensorflow/core/platform/ctstring_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: #endif",
          "65: #if TF_TSTRING_LITTLE_ENDIAN",
          "68: #define TF_le32toh(x) x",
          "69: #endif  // TF_TSTRING_LITTLE_ENDIAN",
          "71: static inline size_t TF_align16(size_t i) { return (i + 0xF) & ~0xF; }",
          "",
          "[Removed Lines]",
          "66: #define TF_le32toh(x) TF_swap32(x)",
          "67: #else  // TF_TSTRING_LITTLE_ENDIAN",
          "",
          "[Added Lines]",
          "67: #else  // TF_TSTRING_LITTLE_ENDIAN",
          "68: #define TF_le32toh(x) TF_swap32(x)",
          "",
          "---------------"
        ],
        "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc": [
          "File: tensorflow/core/platform/ctstring_test.cc -> tensorflow/core/platform/ctstring_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <memory>",
          "19: #include <string>",
          "21: #include \"tensorflow/core/platform/test.h\"",
          "23: static const char kLongString[] =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include \"tensorflow/core/platform/ctstring_internal.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "380:     TF_TString_Dealloc(&s70);",
          "381:   }",
          "382: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "385: TEST(TF_CTStringTest, OffsetType) {",
          "386:   {",
          "387:     TF_TString s71;",
          "389:     TF_TString_Init(&s71);",
          "390:     size_t header_length = 24;",
          "391:     size_t size = 8;",
          "392:     TF_TString_ResizeUninitialized(&s71, header_length + size);",
          "393:     uint32_t save_size = s71.u.offset.size;",
          "394:     uint32_t save_offset = s71.u.offset.offset;",
          "395:     uint32_t save_count = s71.u.offset.count;",
          "397:     s71.u.offset.size = TF_TString_ToInternalSizeT(size, TF_TSTR_OFFSET);",
          "398:     s71.u.offset.offset = header_length;",
          "399:     s71.u.offset.count = 0;",
          "400:     EXPECT_EQ(size, TF_TString_GetSize(&s71));",
          "401:     EXPECT_EQ(TF_TSTR_OFFSET, TF_TString_GetType(&s71));",
          "404:     s71.u.offset.size = save_size;",
          "405:     s71.u.offset.offset = save_offset;",
          "406:     s71.u.offset.count = save_count;",
          "407:     TF_TString_Dealloc(&s71);",
          "408:   }",
          "409: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}