{
  "cve_id": "CVE-2017-9766",
  "cve_desc": "In Wireshark 2.2.7, PROFINET IO data with a high recursion depth allows remote attackers to cause a denial of service (stack exhaustion) in the dissect_IODWriteReq function in plugins/profinet/packet-dcerpc-pn-io.c.",
  "repo": "wireshark/wireshark",
  "patch_hash": "fbfb87a2439dd18f2318586b8e5a2f6db410ba6a",
  "patch_info": {
    "commit_hash": "fbfb87a2439dd18f2318586b8e5a2f6db410ba6a",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/fbfb87a2439dd18f2318586b8e5a2f6db410ba6a",
    "files": [
      "plugins/profinet/packet-dcerpc-pn-io.c"
    ],
    "message": "PROFINET IO: define an arbitrary recursion depth limit\n\nBug: 13811\nChange-Id: I52bffd4a79dcdad9da23f33e1fc6a868472390bf\nReviewed-on: https://code.wireshark.org/review/22232\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "plugins/profinet/packet-dcerpc-pn-io.c||plugins/profinet/packet-dcerpc-pn-io.c"
    ]
  },
  "patch_diff": {
    "plugins/profinet/packet-dcerpc-pn-io.c||plugins/profinet/packet-dcerpc-pn-io.c": [
      "File: plugins/profinet/packet-dcerpc-pn-io.c -> plugins/profinet/packet-dcerpc-pn-io.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "847: static expert_field ei_pn_io_iocr_type = EI_INIT;",
      "848: static expert_field ei_pn_io_frame_id = EI_INIT;",
      "849: static expert_field ei_pn_io_nr_of_tx_port_groups = EI_INIT;",
      "851: static e_guid_t uuid_pn_io_device = { 0xDEA00001, 0x6C97, 0x11D1, { 0x82, 0x71, 0x00, 0xA0, 0x24, 0x42, 0xDF, 0x7D } };",
      "852: static guint16  ver_pn_io_device = 1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "850: static expert_field ei_pn_io_max_recursion_depth_reached = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "11413:     return offset;",
      "11414: }",
      "11417: static int",
      "11418: dissect_IODWriteReq(tvbuff_t *tvb, int offset,",
      "11420: {",
      "11421:     guint16 u16Index = 0;",
      "11422:     guint32 u32RecDataLen = 0;",
      "11426:     offset = dissect_block(tvb, offset, pinfo, tree, drep, &u16Index, &u32RecDataLen, ar);",
      "",
      "[Removed Lines]",
      "11419:     packet_info *pinfo, proto_tree *tree, guint8 *drep, pnio_ar_t **ar)",
      "",
      "[Added Lines]",
      "11417: #define PN_IO_MAX_RECURSION_DEPTH 100",
      "11421:     packet_info *pinfo, proto_tree *tree, guint8 *drep, pnio_ar_t **ar, guint recursion_count)",
      "11426:     if (++recursion_count >= PN_IO_MAX_RECURSION_DEPTH) {",
      "11427:         proto_tree_add_expert(tree, pinfo, &ei_pn_io_max_recursion_depth_reached,",
      "11428:                               tvb, 0, 0);",
      "11429:         return tvb_captured_length(tvb);",
      "11430:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "11429:     if (u16Index == 0xe040) {",
      "11430:         while (tvb_captured_length_remaining(tvb, offset) > 0) {",
      "11432:         }",
      "11433:     } else {",
      "11434:         tvbuff_t *new_tvb = tvb_new_subset_length(tvb, offset, u32RecDataLen);",
      "",
      "[Removed Lines]",
      "11431:             offset = dissect_IODWriteReq(tvb, offset, pinfo, tree, drep, ar);",
      "",
      "[Added Lines]",
      "11438:             offset = dissect_IODWriteReq(tvb, offset, pinfo, tree, drep, ar, recursion_count++);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "11460:     packet_info *pinfo, proto_tree *tree, dcerpc_info *di, guint8 *drep)",
      "11461: {",
      "11462:     pnio_ar_t *ar = NULL;",
      "11464:     offset = dissect_IPNIO_rqst_header(tvb, offset, pinfo, tree, di, drep);",
      "11468:     if (ar != NULL) {",
      "11469:         pnio_ar_info(tvb, pinfo, tree, ar);",
      "",
      "[Removed Lines]",
      "11466:     offset = dissect_IODWriteReq(tvb, offset, pinfo, tree, drep, &ar);",
      "",
      "[Added Lines]",
      "11470:     guint recursion_count = 0;",
      "11474:     offset = dissect_IODWriteReq(tvb, offset, pinfo, tree, drep, &ar, recursion_count);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "14822:         { &ei_pn_io_iocr_type, { \"pn_io.iocr_type.unknown\", PI_UNDECODED, PI_WARN, \"IOCRType undecoded!\", EXPFILL }},",
      "14823:         { &ei_pn_io_localalarmref, { \"pn_io.localalarmref.changed\", PI_UNDECODED, PI_WARN, \"AlarmCRBlockReq: local alarm ref changed\", EXPFILL }},",
      "14824:         { &ei_pn_io_nr_of_tx_port_groups, { \"pn_io.nr_of_tx_port_groups.not_allowed\", PI_PROTOCOL, PI_WARN, \"Not allowed value of NumberOfTxPortGroups\", EXPFILL }},",
      "14825:     };",
      "14827:     module_t *pnio_module;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14833:         { &ei_pn_io_max_recursion_depth_reached, { \"pn_io.max_recursion_depth_reached\", PI_PROTOCOL, PI_WARN, \"Maximum allowed recursion depth reached - stopping dissection\", EXPFILL }}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e62d7efe1134ffe2d0ba0a95c30b35a653fde349",
      "candidate_info": {
        "commit_hash": "e62d7efe1134ffe2d0ba0a95c30b35a653fde349",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/e62d7efe1134ffe2d0ba0a95c30b35a653fde349",
        "files": [
          "plugins/profinet/packet-dcerpc-pn-io.c"
        ],
        "message": "PROFINET IO: define an arbitrary recursion depth limit\n\nBug: 13811\nChange-Id: I52bffd4a79dcdad9da23f33e1fc6a868472390bf\nReviewed-on: https://code.wireshark.org/review/22232\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit fbfb87a2439dd18f2318586b8e5a2f6db410ba6a)\nReviewed-on: https://code.wireshark.org/review/22254\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "plugins/profinet/packet-dcerpc-pn-io.c||plugins/profinet/packet-dcerpc-pn-io.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "plugins/profinet/packet-dcerpc-pn-io.c||plugins/profinet/packet-dcerpc-pn-io.c"
          ],
          "candidate": [
            "plugins/profinet/packet-dcerpc-pn-io.c||plugins/profinet/packet-dcerpc-pn-io.c"
          ]
        }
      },
      "candidate_diff": {
        "plugins/profinet/packet-dcerpc-pn-io.c||plugins/profinet/packet-dcerpc-pn-io.c": [
          "File: plugins/profinet/packet-dcerpc-pn-io.c -> plugins/profinet/packet-dcerpc-pn-io.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "847: static expert_field ei_pn_io_iocr_type = EI_INIT;",
          "848: static expert_field ei_pn_io_frame_id = EI_INIT;",
          "849: static expert_field ei_pn_io_nr_of_tx_port_groups = EI_INIT;",
          "851: static e_guid_t uuid_pn_io_device = { 0xDEA00001, 0x6C97, 0x11D1, { 0x82, 0x71, 0x00, 0xA0, 0x24, 0x42, 0xDF, 0x7D } };",
          "852: static guint16  ver_pn_io_device = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "850: static expert_field ei_pn_io_max_recursion_depth_reached = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11413:     return offset;",
          "11414: }",
          "11417: static int",
          "11418: dissect_IODWriteReq(tvbuff_t *tvb, int offset,",
          "11420: {",
          "11421:     guint16 u16Index = 0;",
          "11422:     guint32 u32RecDataLen = 0;",
          "11426:     offset = dissect_block(tvb, offset, pinfo, tree, drep, &u16Index, &u32RecDataLen, ar);",
          "",
          "[Removed Lines]",
          "11419:     packet_info *pinfo, proto_tree *tree, guint8 *drep, pnio_ar_t **ar)",
          "",
          "[Added Lines]",
          "11417: #define PN_IO_MAX_RECURSION_DEPTH 100",
          "11421:     packet_info *pinfo, proto_tree *tree, guint8 *drep, pnio_ar_t **ar, guint recursion_count)",
          "11426:     if (++recursion_count >= PN_IO_MAX_RECURSION_DEPTH) {",
          "11427:         proto_tree_add_expert(tree, pinfo, &ei_pn_io_max_recursion_depth_reached,",
          "11428:                               tvb, 0, 0);",
          "11429:         return tvb_captured_length(tvb);",
          "11430:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "11429:     if (u16Index == 0xe040) {",
          "11430:         while (tvb_captured_length_remaining(tvb, offset) > 0) {",
          "11432:         }",
          "11433:     } else {",
          "11434:         tvbuff_t *new_tvb = tvb_new_subset_length(tvb, offset, u32RecDataLen);",
          "",
          "[Removed Lines]",
          "11431:             offset = dissect_IODWriteReq(tvb, offset, pinfo, tree, drep, ar);",
          "",
          "[Added Lines]",
          "11438:             offset = dissect_IODWriteReq(tvb, offset, pinfo, tree, drep, ar, recursion_count++);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "11460:     packet_info *pinfo, proto_tree *tree, dcerpc_info *di, guint8 *drep)",
          "11461: {",
          "11462:     pnio_ar_t *ar = NULL;",
          "11464:     offset = dissect_IPNIO_rqst_header(tvb, offset, pinfo, tree, di, drep);",
          "11468:     if (ar != NULL) {",
          "11469:         pnio_ar_info(tvb, pinfo, tree, ar);",
          "",
          "[Removed Lines]",
          "11466:     offset = dissect_IODWriteReq(tvb, offset, pinfo, tree, drep, &ar);",
          "",
          "[Added Lines]",
          "11470:     guint recursion_count = 0;",
          "11474:     offset = dissect_IODWriteReq(tvb, offset, pinfo, tree, drep, &ar, recursion_count);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "14822:         { &ei_pn_io_iocr_type, { \"pn_io.iocr_type.unknown\", PI_UNDECODED, PI_WARN, \"IOCRType undecoded!\", EXPFILL }},",
          "14823:         { &ei_pn_io_localalarmref, { \"pn_io.localalarmref.changed\", PI_UNDECODED, PI_WARN, \"AlarmCRBlockReq: local alarm ref changed\", EXPFILL }},",
          "14824:         { &ei_pn_io_nr_of_tx_port_groups, { \"pn_io.nr_of_tx_port_groups.not_allowed\", PI_PROTOCOL, PI_WARN, \"Not allowed value of NumberOfTxPortGroups\", EXPFILL }},",
          "14825:     };",
          "14827:     module_t *pnio_module;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14833:         { &ei_pn_io_max_recursion_depth_reached, { \"pn_io.max_recursion_depth_reached\", PI_PROTOCOL, PI_WARN, \"Maximum allowed recursion depth reached - stopping dissection\", EXPFILL }}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6e888400ba64de3147d1111a4c23edf389b0000",
      "candidate_info": {
        "commit_hash": "d6e888400ba64de3147d1111a4c23edf389b0000",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/d6e888400ba64de3147d1111a4c23edf389b0000",
        "files": [
          "plugins/profinet/packet-dcerpc-pn-io.c"
        ],
        "message": "PROFINET IO: define an arbitrary recursion depth limit\n\nBug: 13811\nChange-Id: I52bffd4a79dcdad9da23f33e1fc6a868472390bf\nReviewed-on: https://code.wireshark.org/review/22232\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit fbfb87a2439dd18f2318586b8e5a2f6db410ba6a)\nReviewed-on: https://code.wireshark.org/review/22255\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "plugins/profinet/packet-dcerpc-pn-io.c||plugins/profinet/packet-dcerpc-pn-io.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "plugins/profinet/packet-dcerpc-pn-io.c||plugins/profinet/packet-dcerpc-pn-io.c"
          ],
          "candidate": [
            "plugins/profinet/packet-dcerpc-pn-io.c||plugins/profinet/packet-dcerpc-pn-io.c"
          ]
        }
      },
      "candidate_diff": {
        "plugins/profinet/packet-dcerpc-pn-io.c||plugins/profinet/packet-dcerpc-pn-io.c": [
          "File: plugins/profinet/packet-dcerpc-pn-io.c -> plugins/profinet/packet-dcerpc-pn-io.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "735: static expert_field ei_pn_io_iocr_type = EI_INIT;",
          "736: static expert_field ei_pn_io_frame_id = EI_INIT;",
          "737: static expert_field ei_pn_io_nr_of_tx_port_groups = EI_INIT;",
          "739: static e_guid_t uuid_pn_io_device = { 0xDEA00001, 0x6C97, 0x11D1, { 0x82, 0x71, 0x00, 0xA0, 0x24, 0x42, 0xDF, 0x7D } };",
          "740: static guint16  ver_pn_io_device = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "738: static expert_field ei_pn_io_max_recursion_depth_reached = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9993:     return offset;",
          "9994: }",
          "9997: static int",
          "9998: dissect_IODWriteReq(tvbuff_t *tvb, int offset,",
          "10000: {",
          "10001:     guint16 u16Index = 0;",
          "10002:     guint32 u32RecDataLen = 0;",
          "10006:     offset = dissect_block(tvb, offset, pinfo, tree, drep, &u16Index, &u32RecDataLen, ar);",
          "",
          "[Removed Lines]",
          "9999:     packet_info *pinfo, proto_tree *tree, guint8 *drep, pnio_ar_t **ar)",
          "",
          "[Added Lines]",
          "9997: #define PN_IO_MAX_RECURSION_DEPTH 100",
          "10001:     packet_info *pinfo, proto_tree *tree, guint8 *drep, pnio_ar_t **ar, guint recursion_count)",
          "10006:     if (++recursion_count >= PN_IO_MAX_RECURSION_DEPTH) {",
          "10007:         proto_tree_add_expert(tree, pinfo, &ei_pn_io_max_recursion_depth_reached,",
          "10008:                               tvb, 0, 0);",
          "10009:         return tvb_captured_length(tvb);",
          "10010:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "10009:     if (u16Index == 0xe040) {",
          "10010:         while (tvb_captured_length_remaining(tvb, offset) > 0) {",
          "10012:         }",
          "10013:     } else {",
          "10014:         tvbuff_t *new_tvb = tvb_new_subset_length(tvb, offset, u32RecDataLen);",
          "",
          "[Removed Lines]",
          "10011:             offset = dissect_IODWriteReq(tvb, offset, pinfo, tree, drep, ar);",
          "",
          "[Added Lines]",
          "10018:             offset = dissect_IODWriteReq(tvb, offset, pinfo, tree, drep, ar, recursion_count++);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "10038:     packet_info *pinfo, proto_tree *tree, dcerpc_info *di, guint8 *drep)",
          "10039: {",
          "10040:     pnio_ar_t *ar = NULL;",
          "10042:     offset = dissect_IPNIO_rqst_header(tvb, offset, pinfo, tree, di, drep);",
          "10046:     if (ar != NULL) {",
          "10047:         pnio_ar_info(tvb, pinfo, tree, ar);",
          "",
          "[Removed Lines]",
          "10044:     offset = dissect_IODWriteReq(tvb, offset, pinfo, tree, drep, &ar);",
          "",
          "[Added Lines]",
          "10048:     guint recursion_count = 0;",
          "10052:     offset = dissect_IODWriteReq(tvb, offset, pinfo, tree, drep, &ar, recursion_count);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "12933:         { &ei_pn_io_iocr_type, { \"pn_io.iocr_type.unknown\", PI_UNDECODED, PI_WARN, \"IOCRType undecoded!\", EXPFILL }},",
          "12934:         { &ei_pn_io_localalarmref, { \"pn_io.localalarmref.changed\", PI_UNDECODED, PI_WARN, \"AlarmCRBlockReq: local alarm ref changed\", EXPFILL }},",
          "12935:         { &ei_pn_io_nr_of_tx_port_groups, { \"pn_io.nr_of_tx_port_groups.not_allowed\", PI_PROTOCOL, PI_WARN, \"Not allowed value of NumberOfTxPortGroups\", EXPFILL }},",
          "12936:     };",
          "12938:     module_t *pnio_module;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12944:         { &ei_pn_io_max_recursion_depth_reached, { \"pn_io.max_recursion_depth_reached\", PI_PROTOCOL, PI_WARN, \"Maximum allowed recursion depth reached - stopping dissection\", EXPFILL }}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ba332eaf13acaac10fc72e95bec498f2ad75fa1",
      "candidate_info": {
        "commit_hash": "0ba332eaf13acaac10fc72e95bec498f2ad75fa1",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/0ba332eaf13acaac10fc72e95bec498f2ad75fa1",
        "files": [
          "plugins/profinet/packet-dcerpc-pn-io.c"
        ],
        "message": "PROFINET IO: define an arbitrary recursion depth limit\n\nBug: 13811\nChange-Id: I52bffd4a79dcdad9da23f33e1fc6a868472390bf\nReviewed-on: https://code.wireshark.org/review/22232\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit fbfb87a2439dd18f2318586b8e5a2f6db410ba6a)\nReviewed-on: https://code.wireshark.org/review/22256\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "plugins/profinet/packet-dcerpc-pn-io.c||plugins/profinet/packet-dcerpc-pn-io.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "plugins/profinet/packet-dcerpc-pn-io.c||plugins/profinet/packet-dcerpc-pn-io.c"
          ],
          "candidate": [
            "plugins/profinet/packet-dcerpc-pn-io.c||plugins/profinet/packet-dcerpc-pn-io.c"
          ]
        }
      },
      "candidate_diff": {
        "plugins/profinet/packet-dcerpc-pn-io.c||plugins/profinet/packet-dcerpc-pn-io.c": [
          "File: plugins/profinet/packet-dcerpc-pn-io.c -> plugins/profinet/packet-dcerpc-pn-io.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "684: static expert_field ei_pn_io_iocr_type = EI_INIT;",
          "685: static expert_field ei_pn_io_frame_id = EI_INIT;",
          "686: static expert_field ei_pn_io_nr_of_tx_port_groups = EI_INIT;",
          "688: static e_guid_t uuid_pn_io_device = { 0xDEA00001, 0x6C97, 0x11D1, { 0x82, 0x71, 0x00, 0xA0, 0x24, 0x42, 0xDF, 0x7D } };",
          "689: static guint16  ver_pn_io_device = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "687: static expert_field ei_pn_io_max_recursion_depth_reached = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9322:     return offset;",
          "9323: }",
          "9326: static int",
          "9327: dissect_IODWriteReq(tvbuff_t *tvb, int offset,",
          "9329: {",
          "9330:     guint16 u16Index = 0;",
          "9331:     guint32 u32RecDataLen = 0;",
          "9335:     offset = dissect_block(tvb, offset, pinfo, tree, drep, &u16Index, &u32RecDataLen, ar);",
          "",
          "[Removed Lines]",
          "9328:     packet_info *pinfo, proto_tree *tree, guint8 *drep, pnio_ar_t **ar)",
          "",
          "[Added Lines]",
          "9326: #define PN_IO_MAX_RECURSION_DEPTH 100",
          "9330:     packet_info *pinfo, proto_tree *tree, guint8 *drep, pnio_ar_t **ar, guint recursion_count)",
          "9335:     if (++recursion_count >= PN_IO_MAX_RECURSION_DEPTH) {",
          "9336:         proto_tree_add_expert(tree, pinfo, &ei_pn_io_max_recursion_depth_reached,",
          "9337:                               tvb, 0, 0);",
          "9338:         return tvb_captured_length(tvb);",
          "9339:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9338:     if (u16Index == 0xe040) {",
          "9339:         while (tvb_captured_length_remaining(tvb, offset) > 0) {",
          "9341:         }",
          "9342:     } else {",
          "9343:         tvbuff_t *new_tvb = tvb_new_subset_length(tvb, offset, u32RecDataLen);",
          "",
          "[Removed Lines]",
          "9340:             offset = dissect_IODWriteReq(tvb, offset, pinfo, tree, drep, ar);",
          "",
          "[Added Lines]",
          "9347:             offset = dissect_IODWriteReq(tvb, offset, pinfo, tree, drep, ar, recursion_count++);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "9367:     packet_info *pinfo, proto_tree *tree, dcerpc_info *di, guint8 *drep)",
          "9368: {",
          "9369:     pnio_ar_t *ar = NULL;",
          "9371:     offset = dissect_IPNIO_rqst_header(tvb, offset, pinfo, tree, di, drep);",
          "9375:     if (ar != NULL) {",
          "9376:         pnio_ar_info(tvb, pinfo, tree, ar);",
          "",
          "[Removed Lines]",
          "9373:     offset = dissect_IODWriteReq(tvb, offset, pinfo, tree, drep, &ar);",
          "",
          "[Added Lines]",
          "9377:     guint recursion_count = 0;",
          "9381:     offset = dissect_IODWriteReq(tvb, offset, pinfo, tree, drep, &ar, recursion_count);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "12242:         { &ei_pn_io_iocr_type, { \"pn_io.iocr_type.unknown\", PI_UNDECODED, PI_WARN, \"IOCRType undecoded!\", EXPFILL }},",
          "12243:         { &ei_pn_io_localalarmref, { \"pn_io.localalarmref.changed\", PI_UNDECODED, PI_WARN, \"AlarmCRBlockReq: local alarm ref changed\", EXPFILL }},",
          "12244:         { &ei_pn_io_nr_of_tx_port_groups, { \"pn_io.nr_of_tx_port_groups.not_allowed\", PI_PROTOCOL, PI_WARN, \"Not allowed value of NumberOfTxPortGroups\", EXPFILL }},",
          "12245:     };",
          "12247:     expert_module_t* expert_pn_io;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12253:         { &ei_pn_io_max_recursion_depth_reached, { \"pn_io.max_recursion_depth_reached\", PI_PROTOCOL, PI_WARN, \"Maximum allowed recursion depth reached - stopping dissection\", EXPFILL }}",
          "",
          "---------------"
        ]
      }
    }
  ]
}