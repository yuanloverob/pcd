{
  "cve_id": "CVE-2022-24750",
  "cve_desc": "UltraVNC is a free and open source remote pc access software. A vulnerability has been found in versions prior to 1.3.8.0 in which the DSM plugin module, which allows a local authenticated user to achieve local privilege escalation (LPE) on a vulnerable system. The vulnerability has been fixed to allow loading of plugins from the installed directory. Affected users should upgrade their UltraVNC to 1.3.8.1. Users unable to upgrade should not install and run UltraVNC server as a service. It is advisable to create a scheduled task on a low privilege account to launch WinVNC.exe instead. There are no known workarounds if winvnc needs to be started as a service.",
  "repo": "ultravnc/UltraVNC",
  "patch_hash": "36a31b37b98f70c1db0428f5ad83170d604fb352",
  "patch_info": {
    "commit_hash": "36a31b37b98f70c1db0428f5ad83170d604fb352",
    "repo": "ultravnc/UltraVNC",
    "commit_url": "https://github.com/ultravnc/UltraVNC/commit/36a31b37b98f70c1db0428f5ad83170d604fb352",
    "files": [
      "winvnc/winvnc/vncproperties.cpp"
    ],
    "message": "security fix",
    "before_after_code_files": [
      "winvnc/winvnc/vncproperties.cpp||winvnc/winvnc/vncproperties.cpp"
    ]
  },
  "patch_diff": {
    "winvnc/winvnc/vncproperties.cpp||winvnc/winvnc/vncproperties.cpp": [
      "File: winvnc/winvnc/vncproperties.cpp -> winvnc/winvnc/vncproperties.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "43: #include \"vncConnDialog.h\"",
      "45: #include \"Localization.h\" // ACT : Add localization on messages",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46: #include \"shlwapi.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "721:    SendMessage(GetDlgItem(hwnd, IDC_PLUGIN_CHECK), BM_SETCHECK, _this->m_server->IsDSMPluginEnabled(), 0);",
      "725:    BOOL queryEnabled = (_this->m_server->QuerySetting() == 4);",
      "",
      "[Removed Lines]",
      "722:    EnableWindow(GetDlgItem(hwnd, IDC_PLUGIN_BUTTON), _this->m_server->IsDSMPluginEnabled());",
      "",
      "[Added Lines]",
      "723:    EnableWindow(GetDlgItem(hwnd, IDC_PLUGIN_BUTTON),  (_this->m_server->AuthClientCount() == 0 ? _this->m_server->IsDSMPluginEnabled(): false));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1286:   case IDC_PLUGIN_CHECK:",
      "1287:    {",
      "1290:    }",
      "1291:    return TRUE;",
      "",
      "[Removed Lines]",
      "1288:     EnableWindow(GetDlgItem(hwnd, IDC_PLUGIN_BUTTON),",
      "1289:      SendMessage(GetDlgItem(hwnd, IDC_PLUGIN_CHECK), BM_GETCHECK, 0, 0) == BST_CHECKED);",
      "",
      "[Added Lines]",
      "1289:     EnableWindow(GetDlgItem(hwnd, IDC_PLUGIN_BUTTON), _this->m_server->AuthClientCount() == 0",
      "1290:       ? SendMessage(GetDlgItem(hwnd, IDC_PLUGIN_CHECK), BM_GETCHECK, 0, 0) == BST_CHECKED",
      "1291:       : BST_UNCHECKED);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1368:     {",
      "1369:      TCHAR szPlugin[MAX_PATH];",
      "1370:      GetDlgItemText(hwnd, IDC_PLUGINS_COMBO, szPlugin, MAX_PATH);",
      "1371:      if (!_this->m_server->GetDSMPluginPointer()->IsLoaded())",
      "1372:       _this->m_server->GetDSMPluginPointer()->LoadPlugin(szPlugin, false);",
      "1373:      else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1373:      PathStripPathA(szPlugin);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2441eb963465204827b8cc470492305c0352c1bc",
      "candidate_info": {
        "commit_hash": "2441eb963465204827b8cc470492305c0352c1bc",
        "repo": "ultravnc/UltraVNC",
        "commit_url": "https://github.com/ultravnc/UltraVNC/commit/2441eb963465204827b8cc470492305c0352c1bc",
        "files": [
          "vncviewer/ClientConnection.cpp"
        ],
        "message": "Security fix",
        "before_after_code_files": [
          "vncviewer/ClientConnection.cpp||vncviewer/ClientConnection.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "vncviewer/ClientConnection.cpp||vncviewer/ClientConnection.cpp": [
          "File: vncviewer/ClientConnection.cpp -> vncviewer/ClientConnection.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7175:  {omni_mutex_lock l(m_bitmapdcMutex);",
          "7176:  ClearCache();",
          "7177:  m_fScalingDone = false;",
          "7178:  m_si.framebufferWidth = pfburh->r.w / m_nServerScale;",
          "7179:  m_si.framebufferHeight = pfburh->r.h / m_nServerScale;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7179:  if (m_si.framebufferWidth > 20000 || m_si.framebufferHeight > 20000) { // a screensize > 20 000 is not possible with current OS",
          "7180:   int msgboxID = MessageBox(NULL, \"Server is sending a screensize with height or with > 20000\", \"Error\", MB_OKCANCEL | MB_ICONINFORMATION);",
          "7181:   if (msgboxID == IDCANCEL)",
          "7182:    exit(0);",
          "7183:   m_si.framebufferWidth = 1024;",
          "7184:   m_si.framebufferHeight = 800;",
          "7185:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d25b19a5a7dd944ec997747aa560bf005f7a7ef",
      "candidate_info": {
        "commit_hash": "4d25b19a5a7dd944ec997747aa560bf005f7a7ef",
        "repo": "ultravnc/UltraVNC",
        "commit_url": "https://github.com/ultravnc/UltraVNC/commit/4d25b19a5a7dd944ec997747aa560bf005f7a7ef",
        "files": [
          "vncviewer/ClientConnection.cpp",
          "vncviewer/ClientConnection.h"
        ],
        "message": "Security fix",
        "before_after_code_files": [
          "vncviewer/ClientConnection.cpp||vncviewer/ClientConnection.cpp",
          "vncviewer/ClientConnection.h||vncviewer/ClientConnection.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "vncviewer/ClientConnection.cpp||vncviewer/ClientConnection.cpp": [
          "File: vncviewer/ClientConnection.cpp -> vncviewer/ClientConnection.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3692:   m_si.format.blueShift = 0;",
          "3693:  }",
          "3694: #endif",
          "3696:     m_desktopName = new TCHAR[2024];",
          "3697:  m_desktopName_viewonly = new TCHAR[2024];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3695:  if (m_si.framebufferWidth > 20000 || m_si.framebufferHeight >20000) { // a screensize > 20 000 is not possible with current OS",
          "3696:   int msgboxID = MessageBox(NULL, \"Server is sending a screensize with height or with > 20000\", \"Error\", MB_OKCANCEL | MB_ICONINFORMATION);",
          "3697:   if (msgboxID == IDCANCEL)",
          "3698:    exit(0);",
          "3699:   m_si.framebufferWidth = 1024;",
          "3700:   m_si.framebufferHeight = 800;",
          "3701:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9448:  }",
          "9449: }",
          "9452: {",
          "9453:  int bytesPerInputRow = width * bytes_per_pixel;",
          "9454:  int bytesPerOutputRow = framebufferWidth * bytes_per_pixel;",
          "",
          "[Removed Lines]",
          "9451: void ClientConnection::ConvertAll(int width, int height, int xx, int yy,int bytes_per_pixel,BYTE* source,BYTE* dest,int framebufferWidth, int framebufferHeight)",
          "",
          "[Added Lines]",
          "9458: void ClientConnection::ConvertAll(CARD16 width, CARD16 height, CARD16 xx, CARD16 yy, int bytes_per_pixel,BYTE* source,BYTE* dest,int framebufferWidth, int framebufferHeight)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9456:  if (bytesPerOutputRow % 4)",
          "9457:   bytesPerOutputRow += 4 - bytesPerOutputRow % 4;",
          "9460:    goto error;",
          "9462:  BYTE *sourcepos,*destpos;",
          "",
          "[Removed Lines]",
          "9459:  if ( ((width + xx) * (height + yy)) > (framebufferWidth * framebufferHeight))",
          "",
          "[Added Lines]",
          "9466:  if (incorrectParameters(width, height, xx, yy, framebufferWidth, framebufferHeight))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "9475:  assert(true);",
          "9476: }",
          "9479: {",
          "9480:  int bytesPerInputRow = width * bytes_per_pixel;",
          "9481:  int bytesPerOutputRow = framebufferWidth * bytes_per_pixel;",
          "",
          "[Removed Lines]",
          "9478: void ClientConnection:: ConvertAll_secure(int width, int height, int xx, int yy,int bytes_per_pixel,BYTE* source,BYTE* dest,int framebufferWidth, int sourceSize, int framebufferHeight)",
          "",
          "[Added Lines]",
          "9485: void ClientConnection:: ConvertAll_secure(CARD16 width, CARD16 height, CARD16 xx, CARD16 yy,int bytes_per_pixel,BYTE* source,BYTE* dest,int framebufferWidth, int sourceSize, int framebufferHeight)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9486:  if (bytesPerOutputRow % 4)",
          "9487:   bytesPerOutputRow += 4 - bytesPerOutputRow % 4;",
          "9493:  BYTE *sourcepos,*destpos;",
          "",
          "[Removed Lines]",
          "9489:  if ( ((width + xx) * (height + yy)) > (framebufferWidth * framebufferHeight))",
          "9490:    goto error;",
          "",
          "[Added Lines]",
          "9496:  if (incorrectParameters(width, height, xx, yy, framebufferWidth, framebufferHeight))",
          "9497:   goto error;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "9511: {",
          "9512:  int bytesPerOutputRow = framebufferWidth * bytes_per_pixel;",
          "9518:  if (bytesPerOutputRow % 4)",
          "",
          "[Removed Lines]",
          "9514:  if ( ((width + xx) * (height + yy)) > (framebufferWidth * framebufferHeight))",
          "9515:    goto error;",
          "",
          "[Added Lines]",
          "9521:  if (incorrectParameters(width, height, xx, yy, framebufferWidth, framebufferHeight))",
          "9522:   goto error;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "9564: {",
          "9565:  int bytesPerOutputRow = framebufferWidth * bytes_per_pixel;",
          "9568:   goto error;",
          "",
          "[Removed Lines]",
          "9567:  if ( ((width + xx) * (height + yy)) > (framebufferWidth * framebufferHeight))",
          "",
          "[Added Lines]",
          "9574:  if (incorrectParameters(width, height, xx, yy, framebufferWidth, framebufferHeight))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "10115:   SetWindowPos(hwnd, NULL, rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top, SWP_NOZORDER | SWP_NOMOVE);",
          "10116:  }",
          "10117: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10124: }",
          "10126: bool ClientConnection::incorrectParameters(CARD16 width, CARD16 height, CARD16 xx, CARD16 yy, int framebufferWidth, int framebufferHeight)",
          "10127: {",
          "10128:  return (width > framebufferWidth ||",
          "10129:   xx > framebufferWidth ||",
          "10130:   height > framebufferHeight ||",
          "10131:   yy > framebufferHeight ||",
          "10132:   ((width + xx) * (height + yy)) > (framebufferWidth * framebufferHeight));",
          "",
          "---------------"
        ],
        "vncviewer/ClientConnection.h||vncviewer/ClientConnection.h": [
          "File: vncviewer/ClientConnection.h -> vncviewer/ClientConnection.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:  void Scollbar_wm_sizing(WPARAM wParam, LPARAM lParam);",
          "327:  void Scollbar_wm_siz(HWND hwnd);",
          "328:  void Scrollbar_RecalculateSize(HWND hwnd);",
          "330:  void ReadRawRect(rfbFramebufferUpdateRectHeader *pfburh);",
          "331:  void ReadUltraRect(rfbFramebufferUpdateRectHeader *pfburh);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:  bool incorrectParameters(CARD16 width, CARD16 height, CARD16 xx, CARD16 yy, int framebufferWidth, int framebufferHeight);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "795:  int xzywBuf[rfbXZTileWidth*rfbXZTileHeight];",
          "796: #endif",
          "800:  void ConvertPixel(int xx, int yy,int bytes_per_pixel,BYTE* source,BYTE* dest,int framebufferWidth);",
          "801:  void Copybuffer(int width, int height, int xx, int yy,int bytes_per_pixel,BYTE* source,BYTE* dest,int framebufferWidth,int framebufferHeight);",
          "802:  void Copyto0buffer(int width, int height, int xx, int yy,int bytes_per_pixel,BYTE* source,BYTE* dest,int framebufferWidth,int framebufferHeight);",
          "",
          "[Removed Lines]",
          "798:  void ConvertAll(int width, int height, int xx, int yy,int bytes_per_pixel,BYTE* source,BYTE* dest,int framebufferWidth, int framebufferHeight);",
          "799:  void ConvertAll_secure(int width, int height, int xx, int yy,int bytes_per_pixel,BYTE* source,BYTE* dest,int framebufferWidth, int sourceSize, int framebufferHeight);",
          "",
          "[Added Lines]",
          "799:  void ConvertAll(CARD16 width, CARD16 height, CARD16 xx, CARD16 yy,int bytes_per_pixel,BYTE* source,BYTE* dest,int framebufferWidth, int framebufferHeight);",
          "800:  void ConvertAll_secure(CARD16 width, CARD16 height, CARD16 xx, CARD16 yy,int bytes_per_pixel,BYTE* source,BYTE* dest,int framebufferWidth, int sourceSize, int framebufferHeight);",
          "",
          "---------------"
        ]
      }
    }
  ]
}