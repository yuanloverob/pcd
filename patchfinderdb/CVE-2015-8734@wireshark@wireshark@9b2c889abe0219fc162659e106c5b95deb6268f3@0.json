{
  "cve_id": "CVE-2015-8734",
  "cve_desc": "The dissect_nwp function in epan/dissectors/packet-nwp.c in the NWP dissector in Wireshark 2.0.x before 2.0.1 mishandles the packet type, which allows remote attackers to cause a denial of service (application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "9b2c889abe0219fc162659e106c5b95deb6268f3",
  "patch_info": {
    "commit_hash": "9b2c889abe0219fc162659e106c5b95deb6268f3",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/9b2c889abe0219fc162659e106c5b95deb6268f3",
    "files": [
      "epan/dissectors/packet-nwp.c"
    ],
    "message": "NWP: use col_add_str to set COL_INFO\n\nAs indicated in column-utils.h, col_set_str should only be used for const strings\n\nBug: 11726\nChange-Id: I4774aac7dfba3c0f27ed90f8a4634fa19595eacb\nReviewed-on: https://code.wireshark.org/review/11958\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-nwp.c||epan/dissectors/packet-nwp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-nwp.c||epan/dissectors/packet-nwp.c": [
      "File: epan/dissectors/packet-nwp.c -> epan/dissectors/packet-nwp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "230:  type = tvb_get_guint8(tvb, NWPH_TYPE);",
      "231:  type_str = val_to_str(type, nwp_type_vals,",
      "232:   \"Unknown NWP packet type (0x%02x)\");",
      "236:  ti = proto_tree_add_item(tree, proto_nwp, tvb, 0, -1, ENC_NA);",
      "",
      "[Removed Lines]",
      "233:  col_set_str(pinfo->cinfo, COL_INFO, type_str);",
      "",
      "[Added Lines]",
      "233:  col_add_str(pinfo->cinfo, COL_INFO, type_str);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b3162ea33fa6135a4470593d2d03d829844398a1",
      "candidate_info": {
        "commit_hash": "b3162ea33fa6135a4470593d2d03d829844398a1",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/b3162ea33fa6135a4470593d2d03d829844398a1",
        "files": [
          "epan/dissectors/packet-nwp.c"
        ],
        "message": "NWP: use col_add_str to set COL_INFO\n\nAs indicated in column-utils.h, col_set_str should only be used for const strings\n\nBug: 11726\nChange-Id: I4774aac7dfba3c0f27ed90f8a4634fa19595eacb\nReviewed-on: https://code.wireshark.org/review/11958\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\n(cherry picked from commit 9b2c889abe0219fc162659e106c5b95deb6268f3)\nReviewed-on: https://code.wireshark.org/review/11960",
        "before_after_code_files": [
          "epan/dissectors/packet-nwp.c||epan/dissectors/packet-nwp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-nwp.c||epan/dissectors/packet-nwp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-nwp.c||epan/dissectors/packet-nwp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-nwp.c||epan/dissectors/packet-nwp.c": [
          "File: epan/dissectors/packet-nwp.c -> epan/dissectors/packet-nwp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:  type = tvb_get_guint8(tvb, NWPH_TYPE);",
          "231:  type_str = val_to_str(type, nwp_type_vals,",
          "232:   \"Unknown NWP packet type (0x%02x)\");",
          "236:  ti = proto_tree_add_item(tree, proto_nwp, tvb, 0, -1, ENC_NA);",
          "",
          "[Removed Lines]",
          "233:  col_set_str(pinfo->cinfo, COL_INFO, type_str);",
          "",
          "[Added Lines]",
          "233:  col_add_str(pinfo->cinfo, COL_INFO, type_str);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ac0d846ecc1110965e31b6efedbc3280d42b2b0",
      "candidate_info": {
        "commit_hash": "6ac0d846ecc1110965e31b6efedbc3280d42b2b0",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/6ac0d846ecc1110965e31b6efedbc3280d42b2b0",
        "files": [
          "docbook/release-notes.asciidoc",
          "epan/CMakeLists.txt",
          "epan/dissectors/Makefile.common",
          "epan/dissectors/packet-ethertype.c",
          "epan/dissectors/packet-nwp.c",
          "epan/etypes.h"
        ],
        "message": "nwp: add support for NWP packets\n\nNeighborhood Watch Protocol (NWP) is an XIA protocol for resolving network\naddresses to link-layer addresses. Hosts on a LAN send NWP Announcement\npackets with their host identifiers (HIDs), and neighbors in the LAN respond\nwith NWP Neighbor List packets containing their HIDs and associated link-layer\naddresses.\n\nBug: 11492\nChange-Id: Ib1e801474b1aa72f5dd3d8303eeec36b96ee0a99\nReviewed-on: https://code.wireshark.org/review/10316\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "docbook/release-notes.asciidoc||docbook/release-notes.asciidoc",
          "epan/dissectors/Makefile.common||epan/dissectors/Makefile.common",
          "epan/dissectors/packet-ethertype.c||epan/dissectors/packet-ethertype.c",
          "epan/dissectors/packet-nwp.c||epan/dissectors/packet-nwp.c",
          "epan/etypes.h||epan/etypes.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-nwp.c||epan/dissectors/packet-nwp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-nwp.c||epan/dissectors/packet-nwp.c"
          ]
        }
      },
      "candidate_diff": {
        "docbook/release-notes.asciidoc||docbook/release-notes.asciidoc": [
          "File: docbook/release-notes.asciidoc -> docbook/release-notes.asciidoc",
          "--- Hunk 1 ---",
          "[Context before]",
          "245: Concise Binary Object Representation (CBOR) (RFC 7049)",
          "246: XIP Serval",
          "247: TCP based Robot Operating System protocol (TCPROS)",
          "248: --sort-and-group--",
          "250: === Updated Protocol Support",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248: Neighborhood Watch Protocol (NWP)",
          "",
          "---------------"
        ],
        "epan/dissectors/Makefile.common||epan/dissectors/Makefile.common": [
          "File: epan/dissectors/Makefile.common -> epan/dissectors/Makefile.common",
          "--- Hunk 1 ---",
          "[Context before]",
          "998:  packet-ntp.c  \\",
          "999:  packet-null.c  \\",
          "1000:  packet-nwmtp.c  \\",
          "1001:  packet-oampdu.c  \\",
          "1002:  packet-ocfs2.c  \\",
          "1003:  packet-oicq.c  \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1001:  packet-nwp.c  \\",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ethertype.c||epan/dissectors/packet-ethertype.c": [
          "File: epan/dissectors/packet-ethertype.c -> epan/dissectors/packet-ethertype.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:  { ETHERTYPE_BPQ,                  \"AX.25\"},",
          "186:  { ETHERTYPE_CMD,                  \"CiscoMetaData\"},",
          "187:  { ETHERTYPE_XIP,                  \"eXpressive Internet Protocol\"},",
          "188:  { 0, NULL }",
          "189: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188:  { ETHERTYPE_NWP,                  \"Neighborhood Watch Protocol\"},",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-nwp.c||epan/dissectors/packet-nwp.c": [
          "File: epan/dissectors/packet-nwp.c -> epan/dissectors/packet-nwp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include \"config.h\"",
          "30: #include <epan/packet.h>",
          "31: #include <epan/expert.h>",
          "33: void proto_register_nwp(void);",
          "34: void proto_reg_handoff_nwp(void);",
          "36: static gint proto_nwp  = -1;",
          "39: static gint hf_nwp_version = -1;",
          "40: static gint hf_nwp_type  = -1;",
          "41: static gint hf_nwp_hid_count = -1;",
          "42: static gint hf_nwp_haddr_len = -1;",
          "45: static gint hf_nwp_ann_haddr = -1;",
          "46: static gint hf_nwp_ann_hids = -1;",
          "47: static gint hf_nwp_ann_hid = -1;",
          "50: static gint hf_nwp_neigh_list = -1;",
          "51: static gint hf_nwp_neigh = -1;",
          "52: static gint hf_nwp_neigh_hid = -1;",
          "53: static gint hf_nwp_neigh_num = -1;",
          "54: static gint hf_nwp_neigh_haddr = -1;",
          "56: static gint ett_nwp_tree  = -1;",
          "57: static gint ett_nwp_ann_hid_tree = -1;",
          "58: static gint ett_nwp_neigh_list_tree = -1;",
          "59: static gint ett_nwp_neigh_tree  = -1;",
          "61: static expert_field ei_nwp_bad_type = EI_INIT;",
          "63: #define NWP_XID_CHUNK_LEN 4",
          "64: #define NWP_XID_LEN  20",
          "66: #define NWP_HID_STR_LEN  ((NWP_XID_LEN * 2) + 5)",
          "76: #define NWP_HADDRS_STR_LEN(LEN, COUNT) (((2 * LEN) + (LEN - 1) + 2) * COUNT)",
          "78: #define NWPH_MIN_LEN  4",
          "79: #define ETHERTYPE_NWP  0xC0DF",
          "80: #define NWP_VERSION  0x01",
          "82: #define NWP_TYPE_ANNOUNCEMENT 0x01",
          "83: #define NWP_TYPE_NEIGH_LIST 0x02",
          "86: #define NWPH_VERS  0",
          "87: #define NWPH_TYPE  1",
          "88: #define NWPH_HIDC  2",
          "89: #define NWPH_HLEN  3",
          "91: #define NWPH_NLST  4",
          "92: #define NWPH_HWAD  4",
          "94: const value_string nwp_type_vals[] = {",
          "95:  { NWP_TYPE_ANNOUNCEMENT, \"NWP Announcement\" },",
          "96:  { NWP_TYPE_NEIGH_LIST,  \"NWP Neighbor List\" },",
          "97:  { 0,    NULL }",
          "98: };",
          "100: static void",
          "101: add_hid_to_strbuf(tvbuff_t *tvb, wmem_strbuf_t *hid_buf, guint8 offset)",
          "102: {",
          "103:  int i;",
          "104:  for (i = 0; i < NWP_XID_LEN / NWP_XID_CHUNK_LEN; i++) {",
          "105:   wmem_strbuf_append_printf(hid_buf, \"%08x\",",
          "106:    tvb_get_ntohl(tvb, offset));",
          "107:   offset += NWP_XID_CHUNK_LEN;",
          "108:  }",
          "109: }",
          "111: static void",
          "112: dissect_nwp_ann(tvbuff_t *tvb, proto_tree *nwp_tree, guint8 hid_count,",
          "113:  guint8 ha_len)",
          "114: {",
          "115:  proto_tree *hid_tree = NULL;",
          "116:  proto_item *ti = NULL;",
          "118:  wmem_strbuf_t *buf;",
          "119:  guint i;",
          "120:  guint8 offset;",
          "123:  proto_tree_add_item(nwp_tree, hf_nwp_ann_haddr, tvb, NWPH_HWAD,",
          "124:   ha_len, ENC_NA);",
          "127:  ti = proto_tree_add_item(nwp_tree, hf_nwp_ann_hids, tvb,",
          "128:   NWPH_HWAD + ha_len, hid_count * NWP_XID_LEN, ENC_NA);",
          "129:  hid_tree = proto_item_add_subtree(ti, ett_nwp_ann_hid_tree);",
          "131:  buf = wmem_strbuf_sized_new(wmem_packet_scope(),",
          "132:   NWP_HID_STR_LEN, NWP_HID_STR_LEN);",
          "135:  offset = NWPH_HWAD + ha_len;",
          "136:  for (i = 0; i < hid_count; i++) {",
          "137:   const gchar *hid_str;",
          "139:   wmem_strbuf_append(buf, \"hid-\");",
          "140:   add_hid_to_strbuf(tvb, buf, offset);",
          "141:   hid_str = wmem_strbuf_get_str(buf);",
          "143:   proto_tree_add_string_format(hid_tree, hf_nwp_ann_hid, tvb,",
          "144:    offset, NWP_XID_LEN, hid_str, \"%s\", hid_str);",
          "145:   wmem_strbuf_truncate(buf, 0);",
          "147:   offset += NWP_XID_LEN;",
          "148:  }",
          "149: }",
          "159: static void",
          "160: dissect_nwp_nl(tvbuff_t *tvb, proto_tree *nwp_tree, guint8 hid_count,",
          "161:  guint8 ha_len)",
          "162: {",
          "163:  proto_tree *neigh_list_tree = NULL;",
          "164:  proto_tree *neigh_tree = NULL;",
          "165:  proto_item *pi = NULL;",
          "167:  guint i;",
          "168:  guint8 offset = NWPH_NLST;",
          "170:  wmem_strbuf_t *hid_buf = wmem_strbuf_sized_new(wmem_packet_scope(),",
          "171:   NWP_HID_STR_LEN, NWP_HID_STR_LEN);",
          "174:  pi = proto_tree_add_item(nwp_tree, hf_nwp_neigh_list,",
          "175:   tvb, NWPH_NLST, -1, ENC_NA);",
          "176:  neigh_list_tree = proto_item_add_subtree(pi, ett_nwp_neigh_list_tree);",
          "178:  for (i = 0; i < hid_count; i++) {",
          "179:   const gchar *hid_str;",
          "180:   guint j;",
          "181:   guint8 ha_count = tvb_get_guint8(tvb, offset + NWP_XID_LEN);",
          "184:   pi = proto_tree_add_none_format(neigh_list_tree, hf_nwp_neigh,",
          "185:    tvb, offset, NWP_XID_LEN + 1 + ha_len * ha_count,",
          "186:    \"Neighbor %d\", i + 1);",
          "187:   neigh_tree = proto_item_add_subtree(pi, ett_nwp_neigh_tree);",
          "190:   wmem_strbuf_append(hid_buf, \"hid-\");",
          "191:   add_hid_to_strbuf(tvb, hid_buf, offset);",
          "192:   hid_str = wmem_strbuf_get_str(hid_buf);",
          "193:   proto_tree_add_string(neigh_tree, hf_nwp_neigh_hid, tvb,",
          "194:    offset, NWP_XID_LEN, hid_str);",
          "195:   wmem_strbuf_truncate(hid_buf, 0);",
          "196:   offset += NWP_XID_LEN;",
          "199:   proto_tree_add_item(neigh_tree, hf_nwp_neigh_num, tvb,",
          "200:    offset, 1, ENC_BIG_ENDIAN);",
          "201:   offset++;",
          "204:   for (j = 0; j < ha_count; j++)",
          "205:    proto_tree_add_item(neigh_tree, hf_nwp_neigh_haddr,",
          "206:     tvb, offset + (j * ha_len), ha_len, ENC_NA);",
          "208:   offset += ha_len * ha_count;",
          "209:  }",
          "210: }",
          "212: static gint",
          "213: dissect_nwp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "214:  void *data _U_)",
          "215: {",
          "216:  proto_tree *nwp_tree = NULL;",
          "218:  proto_item *ti = NULL;",
          "219:  proto_item *type_ti = NULL;",
          "221:  const gchar *type_str;",
          "222:  guint8 type, hid_count, ha_len;",
          "224:  if (tvb_reported_length(tvb) < NWPH_MIN_LEN)",
          "225:   return 0;",
          "227:  col_set_str(pinfo->cinfo, COL_PROTOCOL, \"NWP\");",
          "229:  col_clear(pinfo->cinfo, COL_INFO);",
          "230:  type = tvb_get_guint8(tvb, NWPH_TYPE);",
          "231:  type_str = val_to_str(type, nwp_type_vals,",
          "232:   \"Unknown NWP packet type (0x%02x)\");",
          "233:  col_set_str(pinfo->cinfo, COL_INFO, type_str);",
          "236:  ti = proto_tree_add_item(tree, proto_nwp, tvb, 0, -1, ENC_NA);",
          "237:  nwp_tree = proto_item_add_subtree(ti, ett_nwp_tree);",
          "240:  proto_tree_add_item(nwp_tree, hf_nwp_version, tvb,",
          "241:   NWPH_VERS, 1, ENC_BIG_ENDIAN);",
          "244:  type_ti = proto_tree_add_item(nwp_tree, hf_nwp_type, tvb,",
          "245:   NWPH_TYPE, 1, ENC_BIG_ENDIAN);",
          "246:  if (!try_val_to_str(type, nwp_type_vals))",
          "247:   expert_add_info_format(pinfo, type_ti, &ei_nwp_bad_type,",
          "248:    \"%s\", type_str);",
          "251:  hid_count = tvb_get_guint8(tvb, NWPH_HIDC);",
          "252:  proto_tree_add_item(nwp_tree, hf_nwp_hid_count, tvb,",
          "253:   NWPH_HIDC, 1, ENC_BIG_ENDIAN);",
          "256:  ha_len = tvb_get_guint8(tvb, NWPH_HLEN);",
          "257:  proto_tree_add_item(nwp_tree, hf_nwp_haddr_len, tvb,",
          "258:   NWPH_HLEN, 1, ENC_BIG_ENDIAN);",
          "260:  switch (type) {",
          "261:  case NWP_TYPE_ANNOUNCEMENT:",
          "262:   dissect_nwp_ann(tvb, nwp_tree, hid_count, ha_len);",
          "263:   break;",
          "264:  case NWP_TYPE_NEIGH_LIST:",
          "265:   dissect_nwp_nl(tvb, nwp_tree, hid_count, ha_len);",
          "266:   break;",
          "267:  default:",
          "268:   break;",
          "269:  }",
          "271:  return tvb_captured_length(tvb);",
          "272: }",
          "274: void",
          "275: proto_register_nwp(void)",
          "276: {",
          "277:  static hf_register_info hf[] = {",
          "279:   { &hf_nwp_version,",
          "280:   { \"Version\", \"nwp.version\", FT_UINT8,",
          "281:      BASE_DEC, NULL, 0x0, NULL, HFILL }},",
          "283:   { &hf_nwp_type,",
          "284:   { \"Type\", \"nwp.type\", FT_UINT8,",
          "285:      BASE_HEX, VALS(nwp_type_vals), 0x0, NULL, HFILL }},",
          "287:   { &hf_nwp_hid_count,",
          "288:   { \"HID Count\", \"nwp.hid_count\", FT_UINT8,",
          "289:      BASE_DEC, NULL, 0x0, NULL, HFILL }},",
          "291:   { &hf_nwp_haddr_len,",
          "292:   { \"Hardware Address Length\", \"nwp.haddr_len\", FT_UINT8,",
          "293:      BASE_DEC, NULL, 0x0, NULL, HFILL }},",
          "295:   { &hf_nwp_ann_haddr,",
          "296:   { \"Hardware Address\", \"nwp.ann_haddr\", FT_BYTES,",
          "297:      SEP_COLON, NULL, 0x0, NULL, HFILL }},",
          "299:   { &hf_nwp_ann_hids,",
          "300:   { \"HIDs\", \"nwp.ann_hids\", FT_NONE,",
          "301:      BASE_NONE, NULL, 0x0, NULL, HFILL }},",
          "303:   { &hf_nwp_ann_hid,",
          "304:   { \"HID\", \"nwp.ann_hid\", FT_STRING,",
          "305:      BASE_NONE, NULL, 0x0, NULL, HFILL }},",
          "307:   { &hf_nwp_neigh_list,",
          "308:   { \"Neighbor List\", \"nwp.neigh_list\", FT_NONE,",
          "309:      BASE_NONE, NULL, 0x0, NULL, HFILL }},",
          "311:   { &hf_nwp_neigh,",
          "312:   { \"Neighbor\", \"nwp.neigh\", FT_NONE,",
          "313:      BASE_NONE, NULL, 0x0, NULL, HFILL }},",
          "315:   { &hf_nwp_neigh_hid,",
          "316:   { \"HID\", \"nwp.neigh_hid\", FT_STRING,",
          "317:      BASE_NONE, NULL, 0x0, NULL, HFILL }},",
          "319:   { &hf_nwp_neigh_num,",
          "320:   { \"Number of Devices\", \"nwp.neigh_num\", FT_UINT8,",
          "321:      BASE_DEC, NULL, 0x0, NULL, HFILL }},",
          "323:   { &hf_nwp_neigh_haddr,",
          "324:   { \"Hardware Address\", \"nwp.neigh_haddr\", FT_BYTES,",
          "325:      SEP_COLON, NULL, 0x0, NULL, HFILL }}",
          "326:  };",
          "328:  static gint *ett[] = {",
          "329:   &ett_nwp_tree,",
          "330:   &ett_nwp_ann_hid_tree,",
          "331:   &ett_nwp_neigh_list_tree,",
          "332:   &ett_nwp_neigh_tree",
          "333:  };",
          "335:  static ei_register_info ei[] = {",
          "336:   { &ei_nwp_bad_type,",
          "337:   { \"nwp.bad_type\", PI_MALFORMED, PI_ERROR,",
          "338:     \"Invalid type\", EXPFILL }}",
          "339:  };",
          "341:  expert_module_t *expert_nwp;",
          "343:  proto_nwp = proto_register_protocol(",
          "344:   \"Neighborhood Watch Protocol\",",
          "345:   \"NWP\",",
          "346:          \"nwp\");",
          "348:  new_register_dissector(\"nwp\", dissect_nwp, proto_nwp);",
          "349:  proto_register_field_array(proto_nwp, hf, array_length(hf));",
          "350:  proto_register_subtree_array(ett, array_length(ett));",
          "352:  expert_nwp = expert_register_protocol(proto_nwp);",
          "353:  expert_register_field_array(expert_nwp, ei, array_length(ei));",
          "354: }",
          "356: void",
          "357: proto_reg_handoff_nwp(void)",
          "358: {",
          "359:  dissector_handle_t nwp_handle;",
          "360:  nwp_handle = new_create_dissector_handle(dissect_nwp, proto_nwp);",
          "361:  dissector_add_uint(\"ethertype\", ETHERTYPE_NWP, nwp_handle);",
          "362: }",
          "",
          "---------------"
        ],
        "epan/etypes.h||epan/etypes.h": [
          "File: epan/etypes.h -> epan/etypes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "559: #endif",
          "561: #ifndef ETHERTYPE_TDMOE",
          "563: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "561: #ifndef ETHERTYPE_NWP",
          "563: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}