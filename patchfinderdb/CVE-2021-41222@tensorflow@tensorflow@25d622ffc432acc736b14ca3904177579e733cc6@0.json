{
  "cve_id": "CVE-2021-41222",
  "cve_desc": "TensorFlow is an open source platform for machine learning. In affected versions the implementation of `SplitV` can trigger a segfault is an attacker supplies negative arguments. This occurs whenever `size_splits` contains more than one value and at least one value is negative. The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "25d622ffc432acc736b14ca3904177579e733cc6",
  "patch_info": {
    "commit_hash": "25d622ffc432acc736b14ca3904177579e733cc6",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/25d622ffc432acc736b14ca3904177579e733cc6",
    "files": [
      "tensorflow/core/kernels/split_v_op.cc",
      "tensorflow/core/ops/array_ops.cc",
      "tensorflow/python/kernel_tests/split_op_test.py"
    ],
    "message": "A negative size in one of the split sizes allowed the computed size of another to exceed the total dimension, leading to a segfault and security vulnerability. Adding a check for negative sizes prevents this.\n\nPiperOrigin-RevId: 401035665\nChange-Id: I79bbe329787dac82aa4bf60397a9129b716aedab",
    "before_after_code_files": [
      "tensorflow/core/kernels/split_v_op.cc||tensorflow/core/kernels/split_v_op.cc",
      "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc",
      "tensorflow/python/kernel_tests/split_op_test.py||tensorflow/python/kernel_tests/split_op_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/split_v_op.cc||tensorflow/core/kernels/split_v_op.cc": [
      "File: tensorflow/core/kernels/split_v_op.cc -> tensorflow/core/kernels/split_v_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "138:       (*split_sizes_vec)[neg_one_dim] = input_size_split_dim - determined_size;",
      "139:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "141:     for (int i = 0; i < split_sizes_vec->size(); ++i) {",
      "142:       const Tlen& split_size = (*split_sizes_vec)[i];",
      "143:       OP_REQUIRES(context, split_size >= Tlen(0),",
      "144:                   errors::InvalidArgument(\"Split size at index \", i,",
      "145:                                           \" must be >= 0. Got: \", split_size));",
      "146:     }",
      "",
      "---------------"
    ],
    "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc": [
      "File: tensorflow/core/ops/array_ops.cc -> tensorflow/core/ops/array_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:           if (data[i] == -1 && c->ValueKnown(split_dim_size)) {",
      "682:             size = split_dim_size - total_size;",
      "683:           }",
      "684:           TF_RETURN_IF_ERROR(",
      "685:               c->ReplaceDim(input, split_dim, c->MakeDim(size), &output_shape));",
      "686:           c->set_output(i, output_shape);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "686:           if (size < -1 || (size == -1 && c->ValueKnown(split_dim_size))) {",
      "687:             return errors::InvalidArgument(\"Split size at index \", i,",
      "688:                                            \" must be >= 0. Got: \", size);",
      "689:           }",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/split_op_test.py||tensorflow/python/kernel_tests/split_op_test.py": [
      "File: tensorflow/python/kernel_tests/split_op_test.py -> tensorflow/python/kernel_tests/split_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "384:                                   \"must have exactly one element\"):",
      "385:         sess.run(y, {x: np.array([], dtype=np.int32), splits: [4, 11, 15]})",
      "388: if __name__ == \"__main__\":",
      "389:   test.main()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "387:   @test_util.run_in_graph_and_eager_modes",
      "388:   def testNegativeSizes(self):",
      "389:     x = constant_op.constant([1, 2, 3], dtypes.float32)",
      "390:     # A size of -1 signifies to determine size based on sum of other splits.",
      "391:     with self.assertRaisesRegex((ValueError, errors_impl.InvalidArgumentError),",
      "392:                                 \"Split size at index 1 must be >= 0. Got: -2\"):",
      "393:       splits = [-1, -2]",
      "394:       self.evaluate(array_ops.split(x, splits, axis=0))",
      "396:   @test_util.run_in_graph_and_eager_modes",
      "397:   def testBadSplitSizes(self):",
      "398:     x = constant_op.constant([1, 2], dtypes.float32)",
      "399:     with self.assertRaisesRegex((ValueError, errors_impl.InvalidArgumentError),",
      "400:                                 \"Determined shape must either match input\"",
      "401:                                 \"|can't split axis\"):",
      "402:       splits = [1, 2]",
      "403:       self.evaluate(array_ops.split(x, splits, axis=0))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "da3aa25c92a21283988038c96a52f88345ca5c3f",
      "candidate_info": {
        "commit_hash": "da3aa25c92a21283988038c96a52f88345ca5c3f",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/da3aa25c92a21283988038c96a52f88345ca5c3f",
        "files": [
          "tensorflow/compiler/tests/nary_ops_test.py",
          "tensorflow/compiler/tf2xla/kernels/split_op.cc",
          "tensorflow/python/kernel_tests/split_op_test.py"
        ],
        "message": "Erroring out if split_size is negative for SplitV op under XLA compilation. We uncovered this issue when wrapping eager ops as tf.functions triggering XLA compilation.\n\nPiperOrigin-RevId: 406457957\nChange-Id: I5398ea2d6a74643929dd3fd433db2dafff586545",
        "before_after_code_files": [
          "tensorflow/compiler/tests/nary_ops_test.py||tensorflow/compiler/tests/nary_ops_test.py",
          "tensorflow/compiler/tf2xlkernels/split_op.cc||tensorflow/compiler/tf2xla/kernels/split_op.cc",
          "tensorflow/python/kernel_tests/split_op_test.py||tensorflow/python/kernel_tests/split_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/python/kernel_tests/split_op_test.py||tensorflow/python/kernel_tests/split_op_test.py"
          ],
          "candidate": [
            "tensorflow/python/kernel_tests/split_op_test.py||tensorflow/python/kernel_tests/split_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/compiler/tests/nary_ops_test.py||tensorflow/compiler/tests/nary_ops_test.py": [
          "File: tensorflow/compiler/tests/nary_ops_test.py -> tensorflow/compiler/tests/nary_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: from tensorflow.compiler.tests import xla_test",
          "22: from tensorflow.python.framework import dtypes",
          "23: from tensorflow.python.ops import array_ops",
          "24: from tensorflow.python.ops import math_ops",
          "25: from tensorflow.python.platform import googletest",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:                     np.array([[3, 4], [7, 8], [1, 2]], dtype=np.float32)]",
          "155:         self.assertAllEqual(output, expected)",
          "157:   def testStridedSlice(self):",
          "158:     self._testNAry(lambda x: array_ops.strided_slice(*x),",
          "159:                    [np.array([[], [], []], dtype=np.float32),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158:   def testSplitVNegativeSizes(self):",
          "159:     with self.session() as session:",
          "160:       with self.test_scope():",
          "161:         with self.assertRaisesRegexp(",
          "162:             (ValueError, errors.InvalidArgumentError),",
          "163:             \"Split size at index 1 must be >= .*. Got: -2\"):",
          "164:           _ = session.run(",
          "165:               array_ops.split(np.array([1, 2, 3], dtype=np.float32), [-1, -2],",
          "166:                               axis=0))",
          "",
          "---------------"
        ],
        "tensorflow/compiler/tf2xlkernels/split_op.cc||tensorflow/compiler/tf2xla/kernels/split_op.cc": [
          "File: tensorflow/compiler/tf2xlkernels/split_op.cc -> tensorflow/compiler/tf2xla/kernels/split_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:       OP_REQUIRES(ctx, slice_size >= -1,",
          "153:                   errors::InvalidArgument(\"Split size at index \", i,",
          "154:                                           \" must be >= -1, Got: \", slice_size));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/split_op_test.py||tensorflow/python/kernel_tests/split_op_test.py": [
          "File: tensorflow/python/kernel_tests/split_op_test.py -> tensorflow/python/kernel_tests/split_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "389:     x = constant_op.constant([1, 2, 3], dtypes.float32)",
          "390:     # A size of -1 signifies to determine size based on sum of other splits.",
          "391:     with self.assertRaisesRegex((ValueError, errors_impl.InvalidArgumentError),",
          "393:       splits = [-1, -2]",
          "394:       self.evaluate(array_ops.split(x, splits, axis=0))",
          "",
          "[Removed Lines]",
          "392:                                 \"Split size at index 1 must be >= 0. Got: -2\"):",
          "",
          "[Added Lines]",
          "392:                                 \"Split size at index 1 must be >= .*. Got: -2\"):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c450fb2f680a90d59fbc8735d0e8eb2f65e570db",
      "candidate_info": {
        "commit_hash": "c450fb2f680a90d59fbc8735d0e8eb2f65e570db",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c450fb2f680a90d59fbc8735d0e8eb2f65e570db",
        "files": [
          "tensorflow/core/kernels/split_v_op.cc",
          "tensorflow/core/ops/array_ops.cc",
          "tensorflow/python/kernel_tests/split_op_test.py"
        ],
        "message": "A negative size in one of the split sizes allowed the computed size of another to exceed the total dimension, leading to a segfault and security vulnerability. Adding a check for negative sizes prevents this.\n\nPiperOrigin-RevId: 401035665\nChange-Id: I79bbe329787dac82aa4bf60397a9129b716aedab",
        "before_after_code_files": [
          "tensorflow/core/kernels/split_v_op.cc||tensorflow/core/kernels/split_v_op.cc",
          "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc",
          "tensorflow/python/kernel_tests/split_op_test.py||tensorflow/python/kernel_tests/split_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/split_v_op.cc||tensorflow/core/kernels/split_v_op.cc",
            "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc",
            "tensorflow/python/kernel_tests/split_op_test.py||tensorflow/python/kernel_tests/split_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/split_v_op.cc||tensorflow/core/kernels/split_v_op.cc",
            "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc",
            "tensorflow/python/kernel_tests/split_op_test.py||tensorflow/python/kernel_tests/split_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/split_v_op.cc||tensorflow/core/kernels/split_v_op.cc": [
          "File: tensorflow/core/kernels/split_v_op.cc -> tensorflow/core/kernels/split_v_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:       (*split_sizes_vec)[neg_one_dim] = input_size_split_dim - determined_size;",
          "139:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:     for (int i = 0; i < split_sizes_vec->size(); ++i) {",
          "142:       const Tlen& split_size = (*split_sizes_vec)[i];",
          "143:       OP_REQUIRES(context, split_size >= Tlen(0),",
          "144:                   errors::InvalidArgument(\"Split size at index \", i,",
          "145:                                           \" must be >= 0. Got: \", split_size));",
          "146:     }",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc": [
          "File: tensorflow/core/ops/array_ops.cc -> tensorflow/core/ops/array_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "680:           if (data[i] == -1 && c->ValueKnown(split_dim_size)) {",
          "681:             size = split_dim_size - total_size;",
          "682:           }",
          "683:           TF_RETURN_IF_ERROR(",
          "684:               c->ReplaceDim(input, split_dim, c->MakeDim(size), &output_shape));",
          "685:           c->set_output(i, output_shape);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "685:           if (size < -1 || (size == -1 && c->ValueKnown(split_dim_size))) {",
          "686:             return errors::InvalidArgument(\"Split size at index \", i,",
          "687:                                            \" must be >= 0. Got: \", size);",
          "688:           }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/split_op_test.py||tensorflow/python/kernel_tests/split_op_test.py": [
          "File: tensorflow/python/kernel_tests/split_op_test.py -> tensorflow/python/kernel_tests/split_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:                                   \"must have exactly one element\"):",
          "388:         sess.run(y, {x: np.array([], dtype=np.int32), splits: [4, 11, 15]})",
          "391: if __name__ == \"__main__\":",
          "392:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390:   @test_util.run_in_graph_and_eager_modes",
          "391:   def testNegativeSizes(self):",
          "392:     x = constant_op.constant([1, 2, 3], dtypes.float32)",
          "393:     # A size of -1 signifies to determine size based on sum of other splits.",
          "394:     with self.assertRaisesRegex((ValueError, errors_impl.InvalidArgumentError),",
          "395:                                 \"Split size at index 1 must be >= 0. Got: -2\"):",
          "396:       splits = [-1, -2]",
          "397:       self.evaluate(array_ops.split(x, splits, axis=0))",
          "399:   @test_util.run_in_graph_and_eager_modes",
          "400:   def testBadSplitSizes(self):",
          "401:     x = constant_op.constant([1, 2], dtypes.float32)",
          "402:     with self.assertRaisesRegex((ValueError, errors_impl.InvalidArgumentError),",
          "403:                                 \"Determined shape must either match input\"",
          "404:                                 \"|can't split axis\"):",
          "405:       splits = [1, 2]",
          "406:       self.evaluate(array_ops.split(x, splits, axis=0))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c1957eda9f03ead945b535fcfbe08087853ddb0",
      "candidate_info": {
        "commit_hash": "7c1957eda9f03ead945b535fcfbe08087853ddb0",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/7c1957eda9f03ead945b535fcfbe08087853ddb0",
        "files": [
          "tensorflow/core/kernels/split_v_op.cc",
          "tensorflow/core/ops/array_ops.cc",
          "tensorflow/python/kernel_tests/split_op_test.py"
        ],
        "message": "A negative size in one of the split sizes allowed the computed size of another to exceed the total dimension, leading to a segfault and security vulnerability. Adding a check for negative sizes prevents this.\n\nPiperOrigin-RevId: 401035665\nChange-Id: I79bbe329787dac82aa4bf60397a9129b716aedab",
        "before_after_code_files": [
          "tensorflow/core/kernels/split_v_op.cc||tensorflow/core/kernels/split_v_op.cc",
          "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc",
          "tensorflow/python/kernel_tests/split_op_test.py||tensorflow/python/kernel_tests/split_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/split_v_op.cc||tensorflow/core/kernels/split_v_op.cc",
            "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc",
            "tensorflow/python/kernel_tests/split_op_test.py||tensorflow/python/kernel_tests/split_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/split_v_op.cc||tensorflow/core/kernels/split_v_op.cc",
            "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc",
            "tensorflow/python/kernel_tests/split_op_test.py||tensorflow/python/kernel_tests/split_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/split_v_op.cc||tensorflow/core/kernels/split_v_op.cc": [
          "File: tensorflow/core/kernels/split_v_op.cc -> tensorflow/core/kernels/split_v_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:       (*split_sizes_vec)[neg_one_dim] = input_size_split_dim - determined_size;",
          "139:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:     for (int i = 0; i < split_sizes_vec->size(); ++i) {",
          "142:       const Tlen& split_size = (*split_sizes_vec)[i];",
          "143:       OP_REQUIRES(context, split_size >= Tlen(0),",
          "144:                   errors::InvalidArgument(\"Split size at index \", i,",
          "145:                                           \" must be >= 0. Got: \", split_size));",
          "146:     }",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc": [
          "File: tensorflow/core/ops/array_ops.cc -> tensorflow/core/ops/array_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "680:           if (data[i] == -1 && c->ValueKnown(split_dim_size)) {",
          "681:             size = split_dim_size - total_size;",
          "682:           }",
          "683:           TF_RETURN_IF_ERROR(",
          "684:               c->ReplaceDim(input, split_dim, c->MakeDim(size), &output_shape));",
          "685:           c->set_output(i, output_shape);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "685:           if (size < -1 || (size == -1 && c->ValueKnown(split_dim_size))) {",
          "686:             return errors::InvalidArgument(\"Split size at index \", i,",
          "687:                                            \" must be >= 0. Got: \", size);",
          "688:           }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/split_op_test.py||tensorflow/python/kernel_tests/split_op_test.py": [
          "File: tensorflow/python/kernel_tests/split_op_test.py -> tensorflow/python/kernel_tests/split_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "388:                                   \"must have exactly one element\"):",
          "389:         sess.run(y, {x: np.array([], dtype=np.int32), splits: [4, 11, 15]})",
          "392: if __name__ == \"__main__\":",
          "393:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391:   @test_util.run_in_graph_and_eager_modes",
          "392:   def testNegativeSizes(self):",
          "393:     x = constant_op.constant([1, 2, 3], dtypes.float32)",
          "394:     # A size of -1 signifies to determine size based on sum of other splits.",
          "395:     with self.assertRaisesRegex((ValueError, errors_impl.InvalidArgumentError),",
          "396:                                 \"Split size at index 1 must be >= 0. Got: -2\"):",
          "397:       splits = [-1, -2]",
          "398:       self.evaluate(array_ops.split(x, splits, axis=0))",
          "400:   @test_util.run_in_graph_and_eager_modes",
          "401:   def testBadSplitSizes(self):",
          "402:     x = constant_op.constant([1, 2], dtypes.float32)",
          "403:     with self.assertRaisesRegex((ValueError, errors_impl.InvalidArgumentError),",
          "404:                                 \"Determined shape must either match input\"",
          "405:                                 \"|can't split axis\"):",
          "406:       splits = [1, 2]",
          "407:       self.evaluate(array_ops.split(x, splits, axis=0))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a93fbaaa22ac82da35791b77f1e22a1bed03291c",
      "candidate_info": {
        "commit_hash": "a93fbaaa22ac82da35791b77f1e22a1bed03291c",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/a93fbaaa22ac82da35791b77f1e22a1bed03291c",
        "files": [
          "tensorflow/core/kernels/split_v_op.cc",
          "tensorflow/core/ops/array_ops.cc",
          "tensorflow/python/kernel_tests/split_op_test.py"
        ],
        "message": "A negative size in one of the split sizes allowed the computed size of another to exceed the total dimension, leading to a segfault and security vulnerability. Adding a check for negative sizes prevents this.\n\nPiperOrigin-RevId: 401035665\nChange-Id: I79bbe329787dac82aa4bf60397a9129b716aedab",
        "before_after_code_files": [
          "tensorflow/core/kernels/split_v_op.cc||tensorflow/core/kernels/split_v_op.cc",
          "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc",
          "tensorflow/python/kernel_tests/split_op_test.py||tensorflow/python/kernel_tests/split_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/split_v_op.cc||tensorflow/core/kernels/split_v_op.cc",
            "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc",
            "tensorflow/python/kernel_tests/split_op_test.py||tensorflow/python/kernel_tests/split_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/split_v_op.cc||tensorflow/core/kernels/split_v_op.cc",
            "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc",
            "tensorflow/python/kernel_tests/split_op_test.py||tensorflow/python/kernel_tests/split_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/split_v_op.cc||tensorflow/core/kernels/split_v_op.cc": [
          "File: tensorflow/core/kernels/split_v_op.cc -> tensorflow/core/kernels/split_v_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:       (*split_sizes_vec)[neg_one_dim] = input_size_split_dim - determined_size;",
          "139:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:     for (int i = 0; i < split_sizes_vec->size(); ++i) {",
          "142:       const Tlen& split_size = (*split_sizes_vec)[i];",
          "143:       OP_REQUIRES(context, split_size >= Tlen(0),",
          "144:                   errors::InvalidArgument(\"Split size at index \", i,",
          "145:                                           \" must be >= 0. Got: \", split_size));",
          "146:     }",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc": [
          "File: tensorflow/core/ops/array_ops.cc -> tensorflow/core/ops/array_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "680:           if (data[i] == -1 && c->ValueKnown(split_dim_size)) {",
          "681:             size = split_dim_size - total_size;",
          "682:           }",
          "683:           TF_RETURN_IF_ERROR(",
          "684:               c->ReplaceDim(input, split_dim, c->MakeDim(size), &output_shape));",
          "685:           c->set_output(i, output_shape);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "685:           if (size < -1 || (size == -1 && c->ValueKnown(split_dim_size))) {",
          "686:             return errors::InvalidArgument(\"Split size at index \", i,",
          "687:                                            \" must be >= 0. Got: \", size);",
          "688:           }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/split_op_test.py||tensorflow/python/kernel_tests/split_op_test.py": [
          "File: tensorflow/python/kernel_tests/split_op_test.py -> tensorflow/python/kernel_tests/split_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:                                   \"must have exactly one element\"):",
          "388:         sess.run(y, {x: np.array([], dtype=np.int32), splits: [4, 11, 15]})",
          "391: if __name__ == \"__main__\":",
          "392:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390:   @test_util.run_in_graph_and_eager_modes",
          "391:   def testNegativeSizes(self):",
          "392:     x = constant_op.constant([1, 2, 3], dtypes.float32)",
          "393:     # A size of -1 signifies to determine size based on sum of other splits.",
          "394:     with self.assertRaisesRegex((ValueError, errors_impl.InvalidArgumentError),",
          "395:                                 \"Split size at index 1 must be >= 0. Got: -2\"):",
          "396:       splits = [-1, -2]",
          "397:       self.evaluate(array_ops.split(x, splits, axis=0))",
          "399:   @test_util.run_in_graph_and_eager_modes",
          "400:   def testBadSplitSizes(self):",
          "401:     x = constant_op.constant([1, 2], dtypes.float32)",
          "402:     with self.assertRaisesRegex((ValueError, errors_impl.InvalidArgumentError),",
          "403:                                 \"Determined shape must either match input\"",
          "404:                                 \"|can't split axis\"):",
          "405:       splits = [1, 2]",
          "406:       self.evaluate(array_ops.split(x, splits, axis=0))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "baa204fffe33e3346a30ac6a145b5ea16b2c599e",
      "candidate_info": {
        "commit_hash": "baa204fffe33e3346a30ac6a145b5ea16b2c599e",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/baa204fffe33e3346a30ac6a145b5ea16b2c599e",
        "files": [
          "tensorflow/core/kernels/split_v_op.cc",
          "tensorflow/core/ops/array_ops.cc",
          "tensorflow/python/kernel_tests/split_op_test.py"
        ],
        "message": "A negative size in one of the split sizes allowed the computed size of another to exceed the total dimension, leading to a segfault and security vulnerability. Adding a check for negative sizes prevents this.\n\nPiperOrigin-RevId: 401035665\nChange-Id: I79bbe329787dac82aa4bf60397a9129b716aedab",
        "before_after_code_files": [
          "tensorflow/core/kernels/split_v_op.cc||tensorflow/core/kernels/split_v_op.cc",
          "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc",
          "tensorflow/python/kernel_tests/split_op_test.py||tensorflow/python/kernel_tests/split_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/split_v_op.cc||tensorflow/core/kernels/split_v_op.cc",
            "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc",
            "tensorflow/python/kernel_tests/split_op_test.py||tensorflow/python/kernel_tests/split_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/split_v_op.cc||tensorflow/core/kernels/split_v_op.cc",
            "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc",
            "tensorflow/python/kernel_tests/split_op_test.py||tensorflow/python/kernel_tests/split_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/split_v_op.cc||tensorflow/core/kernels/split_v_op.cc": [
          "File: tensorflow/core/kernels/split_v_op.cc -> tensorflow/core/kernels/split_v_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:       (*split_sizes_vec)[neg_one_dim] = input_size_split_dim - determined_size;",
          "139:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:     for (int i = 0; i < split_sizes_vec->size(); ++i) {",
          "142:       const Tlen& split_size = (*split_sizes_vec)[i];",
          "143:       OP_REQUIRES(context, split_size >= Tlen(0),",
          "144:                   errors::InvalidArgument(\"Split size at index \", i,",
          "145:                                           \" must be >= 0. Got: \", split_size));",
          "146:     }",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc": [
          "File: tensorflow/core/ops/array_ops.cc -> tensorflow/core/ops/array_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "680:           if (data[i] == -1 && c->ValueKnown(split_dim_size)) {",
          "681:             size = split_dim_size - total_size;",
          "682:           }",
          "683:           TF_RETURN_IF_ERROR(",
          "684:               c->ReplaceDim(input, split_dim, c->MakeDim(size), &output_shape));",
          "685:           c->set_output(i, output_shape);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "685:           if (size < -1 || (size == -1 && c->ValueKnown(split_dim_size))) {",
          "686:             return errors::InvalidArgument(\"Split size at index \", i,",
          "687:                                            \" must be >= 0. Got: \", size);",
          "688:           }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/split_op_test.py||tensorflow/python/kernel_tests/split_op_test.py": [
          "File: tensorflow/python/kernel_tests/split_op_test.py -> tensorflow/python/kernel_tests/split_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:                                   \"must have exactly one element\"):",
          "388:         sess.run(y, {x: np.array([], dtype=np.int32), splits: [4, 11, 15]})",
          "391: if __name__ == \"__main__\":",
          "392:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390:   @test_util.run_in_graph_and_eager_modes",
          "391:   def testNegativeSizes(self):",
          "392:     x = constant_op.constant([1, 2, 3], dtypes.float32)",
          "393:     # A size of -1 signifies to determine size based on sum of other splits.",
          "394:     with self.assertRaisesRegex((ValueError, errors_impl.InvalidArgumentError),",
          "395:                                 \"Split size at index 1 must be >= 0. Got: -2\"):",
          "396:       splits = [-1, -2]",
          "397:       self.evaluate(array_ops.split(x, splits, axis=0))",
          "399:   @test_util.run_in_graph_and_eager_modes",
          "400:   def testBadSplitSizes(self):",
          "401:     x = constant_op.constant([1, 2], dtypes.float32)",
          "402:     with self.assertRaisesRegex((ValueError, errors_impl.InvalidArgumentError),",
          "403:                                 \"Determined shape must either match input\"",
          "404:                                 \"|can't split axis\"):",
          "405:       splits = [1, 2]",
          "406:       self.evaluate(array_ops.split(x, splits, axis=0))",
          "",
          "---------------"
        ]
      }
    }
  ]
}