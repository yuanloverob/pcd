{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aec7dc656317cec65eac8ff08d2a49c35f41282c",
      "candidate_info": {
        "commit_hash": "aec7dc656317cec65eac8ff08d2a49c35f41282c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/aec7dc656317cec65eac8ff08d2a49c35f41282c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c"
        ],
        "message": "Fix a harmless compiler warning.\n\nFossilOrigin-Name: 5a0b0c6e11146e200c3417903232e6932102b02d7bf128bac4b7cd74c257acd1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 88baf1eb0706503214012520be4d872594ccc5b4c9674c44cc07b67ade2bfcf2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c"
        ]
      }
    },
    {
      "candidate_hash": "46f0f4e56d8d818f417fa8f14ab4837133003b5d",
      "candidate_info": {
        "commit_hash": "46f0f4e56d8d818f417fa8f14ab4837133003b5d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/46f0f4e56d8d818f417fa8f14ab4837133003b5d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Typo fix to repair the early-out optimization.  Also avoid unnecessary OP_SeekHit opcodes.\n\nFossilOrigin-Name: 8fd7d8dfcd515aa6b65d6eb27b033d3b3a31db467b9100cc13c62bc60113019e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f3c36b840c9a29c0add28039db216f4207a308e5057fc76e3f0004024a8267ac",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "570:     if( pLevel->u.in.nIn==0 ){",
          "571:       pLevel->addrNxt = sqlite3VdbeMakeLabel(pParse);",
          "572:     }",
          "574:       pLoop->wsFlags |= WHERE_IN_EARLYOUT;",
          "575:     }",
          "",
          "[Removed Lines]",
          "573:     if( iEq>0 && (pLoop->wsFlags && WHERE_IN_SEEKSCAN)==0 ){",
          "",
          "[Added Lines]",
          "573:     if( iEq>0 && (pLoop->wsFlags & WHERE_IN_SEEKSCAN)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "608:           pIn++;",
          "609:         }",
          "610:       }",
          "612:         sqlite3VdbeAddOp3(v, OP_SeekHit, pLevel->iIdxCur, 0, iEq);",
          "613:       }",
          "614:     }else{",
          "",
          "[Removed Lines]",
          "611:       if( iEq>0 ){",
          "",
          "[Added Lines]",
          "611:       if( iEq>0 && (pLoop->wsFlags & WHERE_IN_SEEKSCAN)==0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04e70ce07d8a9501c695eaafd2cb4dfc4537761f",
      "candidate_info": {
        "commit_hash": "04e70ce07d8a9501c695eaafd2cb4dfc4537761f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/04e70ce07d8a9501c695eaafd2cb4dfc4537761f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/wherecode.c"
        ],
        "message": "For the OP_SeekScan optimization, the OP_IdxGT does not necessarily come right after the OP_SeekGE.   So use the P2 operand of OP_SeekScan to point to the first instruction after OP_IdxGT.  Problem found by dbsqlfuzz.\n\nFossilOrigin-Name: 091d71939411bf2079098f09ddc0525f11f380119fd27114e2b3eec9a8ac0db4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c75c3a3b756635bfdab44e4b56a337e4a88af3a8803cd3e9a67abf3d0d3450dc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4437:   UnpackedRecord r;",
          "4439:   assert( pOp[1].opcode==OP_SeekGE );",
          "4445:   assert( pOp->p1>0 );",
          "4446:   pC = p->apCsr[pOp[1].p1];",
          "4447:   assert( pC!=0 );",
          "",
          "[Removed Lines]",
          "4440:   assert( pOp[2].opcode==OP_IdxGT );",
          "4441:   assert( pOp[1].p1==pOp[2].p1 );",
          "4442:   assert( pOp[1].p2==pOp[2].p2 );",
          "4443:   assert( pOp[1].p3==pOp[2].p3 );",
          "4444:   assert( pOp[1].p4.i==pOp[2].p4.i );",
          "",
          "[Added Lines]",
          "4443:   assert( pOp->p2>=(int)(pOp-aOp)+2 );",
          "4444:   assert( aOp[pOp->p2-1].opcode==OP_IdxGT );",
          "4445:   assert( pOp[1].p1==aOp[pOp->p2-1].p1 );",
          "4446:   assert( pOp[1].p2==aOp[pOp->p2-1].p2 );",
          "4447:   assert( pOp[1].p3==aOp[pOp->p2-1].p3 );",
          "4448:   assert( pOp[1].p4.i==aOp[pOp->p2-1].p4.i );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4492:       }",
          "4493: #endif",
          "4494:       VdbeBranchTaken(2,3);",
          "4496:       break;",
          "4497:     }",
          "4498:     if( nStep<=0 ){",
          "",
          "[Removed Lines]",
          "4495:       pOp += 2;",
          "",
          "[Added Lines]",
          "4500:       goto jump_to_p2;",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1827:         VdbeCoverage(v);",
          "1828:       }",
          "1829:       sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "",
          "[Removed Lines]",
          "1826:         sqlite3VdbeAddOp1(v, OP_SeekScan, (pIdx->aiRowLogEst[0]+9)/10);",
          "",
          "[Added Lines]",
          "1827:         addrSeekScan = sqlite3VdbeAddOp1(v, OP_SeekScan,",
          "1828:                                          (pIdx->aiRowLogEst[0]+9)/10);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1908:       testcase( op==OP_IdxGE );  VdbeCoverageIf(v, op==OP_IdxGE );",
          "1909:       testcase( op==OP_IdxLT );  VdbeCoverageIf(v, op==OP_IdxLT );",
          "1910:       testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "1911:     }",
          "1912:     if( regBignull ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1913:       if( addrSeekScan ) sqlite3VdbeJumpHere(v, addrSeekScan);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec18b6e5b9d8f6c35bed9294c3da5ac883e99713",
      "candidate_info": {
        "commit_hash": "ec18b6e5b9d8f6c35bed9294c3da5ac883e99713",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ec18b6e5b9d8f6c35bed9294c3da5ac883e99713",
        "files": [
          "ext/misc/ieee754.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the decoding of subnormal values in the ieee754 extension.\n\nFossilOrigin-Name: 838817b680f02b3845d6d56f85d5d36fa5ae7453afef7a1a5a24624255f2dc3e",
        "before_after_code_files": [
          "ext/misc/ieee754.c||ext/misc/ieee754.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/ieee754.c||ext/misc/ieee754.c": [
          "File: ext/misc/ieee754.c -> ext/misc/ieee754.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     }else{",
          "78:       e = a>>52;",
          "79:       m = a & ((((sqlite3_int64)1)<<52)-1);",
          "81:       while( e<1075 && m>0 && (m&1)==0 ){",
          "82:         m >>= 1;",
          "83:         e++;",
          "",
          "[Removed Lines]",
          "80:       m |= ((sqlite3_int64)1)<<52;",
          "",
          "[Added Lines]",
          "80:       if( e==0 ){",
          "81:         m <<= 1;",
          "82:       }else{",
          "83:         m |= ((sqlite3_int64)1)<<52;",
          "84:       }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4199c1e8aa47d77df3ef598cb6f5418f67970dd00f34823463c85eabfc8d2b77",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d59102a91c1911bc83a92386b1dff9e15f3a512",
      "candidate_info": {
        "commit_hash": "5d59102a91c1911bc83a92386b1dff9e15f3a512",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5d59102a91c1911bc83a92386b1dff9e15f3a512",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Fix an assert() failure in altertable3-22.4.\n\nFossilOrigin-Name: c566a91d5c4290b0a491a01e85bf8f9fbebf2910e0d478bafc2d22da7f749cae",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2625:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel, SQLITE_AFF_NONE);",
          "2626: #endif",
          "2627:     pParse->nTab = n;",
          "",
          "[Removed Lines]",
          "2628:     if( pTable->pCheck ){",
          "",
          "[Added Lines]",
          "2628:     if( pSelTab==0 ){",
          "2629:       pTable->nCol = 0;",
          "2630:       nErr++;",
          "2631:     }else if( pTable->pCheck ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2641:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTable, pSel,",
          "2642:                                                SQLITE_AFF_NONE);",
          "2643:       }",
          "",
          "[Removed Lines]",
          "2644:     }else if( pSelTab ){",
          "",
          "[Added Lines]",
          "2647:     }else{",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2651:       pSelTab->nCol = 0;",
          "2652:       pSelTab->aCol = 0;",
          "2653:       assert( sqlite3SchemaMutexHeld(db, 0, pTable->pSchema) );",
          "2657:     }",
          "2658:     pTable->nNVCol = pTable->nCol;",
          "2659:     sqlite3DeleteTable(db, pSelTab);",
          "",
          "[Removed Lines]",
          "2654:     }else{",
          "2655:       pTable->nCol = 0;",
          "2656:       nErr++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}