{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d8d2fb92227dcb65004980bf51b6b06fa83db22c",
      "candidate_info": {
        "commit_hash": "d8d2fb92227dcb65004980bf51b6b06fa83db22c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d8d2fb92227dcb65004980bf51b6b06fa83db22c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window1.test",
          "test/window2.tcl",
          "test/window2.test"
        ],
        "message": "Do not mistake constant integers in a PARTITION BY expression for references to ORDER BY style references to values returned by the SELECT statement.\n\nFossilOrigin-Name: 45c64d39d5afed7fdc6b1de19408559740d1fba1f5e0269ab68b132366a289e4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test",
          "test/window2.tcl||test/window2.tcl",
          "test/window2.test||test/window2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8a39803ef8db4d8cb0d231e66299525fad4e61266ca29b3704aebb88df1c745b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "894:     int i;",
          "895:     int nInit = pList ? pList->nExpr : 0;",
          "896:     for(i=0; i<pAppend->nExpr; i++){",
          "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
          "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
          "900:         pDup->op = TK_NULL;",
          "901:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
          "902:         pDup->u.zToken = 0;",
          "",
          "[Removed Lines]",
          "899:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
          "",
          "[Added Lines]",
          "897:       int iDummy;",
          "900:       if( bIntToNull && pDup && sqlite3ExprIsInteger(pDup, &iDummy) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "951:     pSort = exprListAppendList(pParse, pSort, pMWin->pOrderBy, 1);",
          "952:     if( pSort && p->pOrderBy && p->pOrderBy->nExpr<=pSort->nExpr ){",
          "953:       int nSave = pSort->nExpr;",
          "",
          "[Removed Lines]",
          "950:     pSort = sqlite3ExprListDup(db, pMWin->pPartition, 0);",
          "",
          "[Added Lines]",
          "951:     pSort = exprListAppendList(pParse, 0, pMWin->pPartition, 1);",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1364: # 2019-12-25 ticket d87336c81c7d0873",
          "1365: #",
          "1366: reset_db",
          "1374: finish_test",
          "",
          "[Removed Lines]",
          "1367: do_catchsql_test 40.1 {",
          "1368:   CREATE VIRTUAL TABLE t0 USING rtree(c0, c1, c2);",
          "1369:   SELECT * FROM t0",
          "1370:    WHERE ((0,0) IN (SELECT COUNT(*),LAG(5)OVER(PARTITION BY 0) FROM t0),0)<=(c1,0);",
          "1371: } {1 {1st ORDER BY term out of range - should be between 1 and 3}}",
          "",
          "[Added Lines]",
          "1366: #reset_db",
          "1367: #do_catchsql_test 40.1 {",
          "1368: #  CREATE VIRTUAL TABLE t0 USING rtree(c0, c1, c2);",
          "1369: #  SELECT * FROM t0",
          "1370: #   WHERE ((0,0) IN (SELECT COUNT(*),LAG(5)OVER(PARTITION BY 0) FROM t0),0)<=(c1,0);",
          "1371: #} {1 {1st ORDER BY term out of range - should be between 1 and 3}}",
          "1373: #-------------------------------------------------------------------------",
          "1375: do_execsql_test 41.1 {",
          "1376:   CREATE TABLE t1(a, b, c);",
          "1377:   INSERT INTO t1 VALUES(NULL,'bb',355);",
          "1378:   INSERT INTO t1 VALUES('CC','aa',158);",
          "1379:   INSERT INTO t1 VALUES('GG','bb',929);",
          "1380:   INSERT INTO t1 VALUES('FF','Rb',574);",
          "1381: }",
          "1383: do_execsql_test 41.2 {",
          "1384:   SELECT min(c) OVER (",
          "1385:     ORDER BY a RANGE BETWEEN 5.2 PRECEDING AND 0.1 PRECEDING",
          "1386:   ) FROM t1",
          "1387: } {355 158 574 929}",
          "1389: do_execsql_test 41.2 {",
          "1390:   SELECT min(c) OVER (",
          "1391:     ORDER BY a RANGE BETWEEN 5.2 PRECEDING AND 0.1 PRECEDING",
          "1392:   ) << 100 FROM t1",
          "1393: } {0 0 0 0}",
          "1395: do_execsql_test 41.3 {",
          "1396:   SELECT",
          "1397:     min(c) OVER win3 << first_value(c) OVER win3,",
          "1398:     min(c) OVER win3 << first_value(c) OVER win3",
          "1399:   FROM t1",
          "1400:   WINDOW win3 AS (",
          "1401:     PARTITION BY 6 ORDER BY a RANGE BETWEEN 5.2 PRECEDING AND 0.1 PRECEDING",
          "1402:   );",
          "1403: } {0 0  0 0  0 0  0 0}",
          "",
          "---------------"
        ],
        "test/window2.tcl||test/window2.tcl": [
          "File: test/window2.tcl -> test/window2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "463:       (0, t0.c0) IN (SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t0);",
          "464: }",
          "466: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466: ==========",
          "468: execsql_test 7.0 {",
          "469:   DROP TABLE IF EXISTS t1;",
          "470:   CREATE TABLE t1(a INTEGER, b INTEGER, c INTEGER);",
          "471:   INSERT INTO t1 VALUES(1, 1, 1);",
          "472:   INSERT INTO t1 VALUES(1, 2, 2);",
          "473:   INSERT INTO t1 VALUES(3, 3, 3);",
          "474:   INSERT INTO t1 VALUES(3, 4, 4);",
          "475: }",
          "477: execsql_test 7.1 {",
          "478:   SELECT c, sum(c) OVER win1 FROM t1",
          "479:   WINDOW win1 AS (ORDER BY b)",
          "480: }",
          "482: execsql_test 7.2 {",
          "483:   SELECT c, sum(c) OVER win1 FROM t1",
          "484:   WINDOW win1 AS (PARTITION BY 1 ORDER BY b)",
          "485: }",
          "487: execsql_test 7.3 {",
          "488:   SELECT c, sum(c) OVER win1 FROM t1",
          "489:   WINDOW win1 AS (ORDER BY 1)",
          "490: }",
          "",
          "---------------"
        ],
        "test/window2.test||test/window2.test": [
          "File: test/window2.test -> test/window2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "947:       (0, t0.c0) IN (SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t0);",
          "948: } {}",
          "950: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "950: #==========================================================================",
          "952: do_execsql_test 7.0 {",
          "953:   DROP TABLE IF EXISTS t1;",
          "954:   CREATE TABLE t1(a INTEGER, b INTEGER, c INTEGER);",
          "955:   INSERT INTO t1 VALUES(1, 1, 1);",
          "956:   INSERT INTO t1 VALUES(1, 2, 2);",
          "957:   INSERT INTO t1 VALUES(3, 3, 3);",
          "958:   INSERT INTO t1 VALUES(3, 4, 4);",
          "959: } {}",
          "961: do_execsql_test 7.1 {",
          "962:   SELECT c, sum(c) OVER win1 FROM t1",
          "963:   WINDOW win1 AS (ORDER BY b)",
          "964: } {1 1   2 3   3 6   4 10}",
          "966: do_execsql_test 7.2 {",
          "967:   SELECT c, sum(c) OVER win1 FROM t1",
          "968:   WINDOW win1 AS (PARTITION BY 1 ORDER BY b)",
          "969: } {1 1   2 3   3 6   4 10}",
          "971: do_execsql_test 7.3 {",
          "972:   SELECT c, sum(c) OVER win1 FROM t1",
          "973:   WINDOW win1 AS (ORDER BY 1)",
          "974: } {1 10   2 10   3 10   4 10}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "065f3bf4f2b3dbef086a32a520e4f15e47c164e4",
      "candidate_info": {
        "commit_hash": "065f3bf4f2b3dbef086a32a520e4f15e47c164e4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/065f3bf4f2b3dbef086a32a520e4f15e47c164e4",
        "files": [
          "ext/fts3/fts3_term.c",
          "ext/fts3/unicode/mkunicode.tcl",
          "ext/fts5/fts5_aux.c",
          "ext/fts5/fts5_buffer.c",
          "ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_hash.c",
          "ext/fts5/fts5_main.c",
          "ext/fts5/fts5_storage.c",
          "ext/fts5/fts5_unicode2.c",
          "ext/misc/amatch.c",
          "ext/misc/closure.c",
          "ext/misc/fileio.c",
          "ext/misc/fuzzer.c",
          "ext/misc/unionvtab.c",
          "ext/session/changeset.c",
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzcheck.c"
        ],
        "message": "Fix various harmless compiler warnings seen with MSVC.\n\nFossilOrigin-Name: 1c0fe5b5763fe5cbace9773dcdab742e126d0bd035ab13d61f9d134afa0afc0c",
        "before_after_code_files": [
          "ext/fts3/fts3_term.c||ext/fts3/fts3_term.c",
          "ext/fts3/unicode/mkunicode.tcl||ext/fts3/unicode/mkunicode.tcl",
          "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c",
          "ext/fts5/fts5_buffer.c||ext/fts5/fts5_buffer.c",
          "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_hash.c||ext/fts5/fts5_hash.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c",
          "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
          "ext/misc/amatch.c||ext/misc/amatch.c",
          "ext/misc/closure.c||ext/misc/closure.c",
          "ext/misc/fileio.c||ext/misc/fileio.c",
          "ext/misc/fuzzer.c||ext/misc/fuzzer.c",
          "ext/misc/unionvtab.c||ext/misc/unionvtab.c",
          "ext/session/changeset.c||ext/session/changeset.c",
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_term.c||ext/fts3/fts3_term.c": [
          "File: ext/fts3/fts3_term.c -> ext/fts3/fts3_term.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   nByte = sizeof(Fts3termTable) + sizeof(Fts3Table) + nDb + nFts3 + 2;",
          "99:   p = (Fts3termTable *)sqlite3_malloc64(nByte);",
          "100:   if( !p ) return SQLITE_NOMEM;",
          "103:   p->pFts3Tab = (Fts3Table *)&p[1];",
          "104:   p->pFts3Tab->zDb = (char *)&p->pFts3Tab[1];",
          "",
          "[Removed Lines]",
          "101:   memset(p, 0, nByte);",
          "",
          "[Added Lines]",
          "101:   memset(p, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts3/unicode/mkunicode.tcl||ext/fts3/unicode/mkunicode.tcl": [
          "File: ext/fts3/unicode/mkunicode.tcl -> ext/fts3/unicode/mkunicode.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "738:         int bToken = aArray[ aFts5UnicodeData[iTbl] & 0x1F ];",
          "739:         int n = (aFts5UnicodeData[iTbl] >> 5) + i;",
          "740:         for(; i<128 && i<n; i++){",
          "742:         }",
          "743:         iTbl++;",
          "744:       }",
          "",
          "[Removed Lines]",
          "741:           aAscii[i] = bToken;",
          "",
          "[Added Lines]",
          "741:           aAscii[i] = (u8)bToken;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c": [
          "File: ext/fts5/fts5_aux.c -> ext/fts5/fts5_aux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "581:     if( p==0 ){",
          "582:       rc = SQLITE_NOMEM;",
          "583:     }else{",
          "585:       p->nPhrase = nPhrase;",
          "586:       p->aIDF = (double*)&p[1];",
          "587:       p->aFreq = &p->aIDF[nPhrase];",
          "",
          "[Removed Lines]",
          "584:       memset(p, 0, nByte);",
          "",
          "[Added Lines]",
          "584:       memset(p, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_buffer.c||ext/fts5/fts5_buffer.c": [
          "File: ext/fts5/fts5_buffer.c -> ext/fts5/fts5_buffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:       return 1;",
          "29:     }else{",
          "31:       pBuf->p = pNew;",
          "32:     }",
          "33:   }",
          "",
          "[Removed Lines]",
          "30:       pBuf->nSpace = nNew;",
          "",
          "[Added Lines]",
          "30:       pBuf->nSpace = (int)nNew;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251:     if( pRet==0 ){",
          "252:       if( nByte>0 ) *pRc = SQLITE_NOMEM;",
          "253:     }else{",
          "255:     }",
          "256:   }",
          "257:   return pRet;",
          "",
          "[Removed Lines]",
          "254:       memset(pRet, 0, nByte);",
          "",
          "[Added Lines]",
          "254:       memset(pRet, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c": [
          "File: ext/fts5/fts5_config.c -> ext/fts5/fts5_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "325:           rc = SQLITE_ERROR;",
          "326:         }else{",
          "327:           rc = sqlite3Fts5GetTokenizer(pGlobal,",
          "329:               pzErr",
          "330:           );",
          "331:         }",
          "",
          "[Removed Lines]",
          "328:               (const char**)azArg, nArg, &pConfig->pTok, &pConfig->pTokApi,",
          "",
          "[Added Lines]",
          "328:               (const char**)azArg, (int)nArg, &pConfig->pTok, &pConfig->pTokApi,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "435:   if( zOut==0 ){",
          "437:   }else{",
          "439:     if( fts5_isopenquote(zOut[0]) ){",
          "440:       int ii = fts5Dequote(zOut);",
          "441:       zRet = &zIn[ii];",
          "",
          "[Removed Lines]",
          "438:     memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "438:     memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c": [
          "File: ext/fts5/fts5_expr.c -> ext/fts5/fts5_expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1487:       if( pRet==0 ){",
          "1488:         pParse->rc = SQLITE_NOMEM;",
          "1489:       }else{",
          "1491:       }",
          "1492:     }else if( (pNear->nPhrase % SZALLOC)==0 ){",
          "1493:       int nNew = pNear->nPhrase + SZALLOC;",
          "",
          "[Removed Lines]",
          "1490:         memset(pRet, 0, nByte);",
          "",
          "[Added Lines]",
          "1490:         memset(pRet, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1563:     if( pSyn==0 ){",
          "1564:       rc = SQLITE_NOMEM;",
          "1565:     }else{",
          "1567:       pSyn->zTerm = ((char*)pSyn) + sizeof(Fts5ExprTerm) + sizeof(Fts5Buffer);",
          "1568:       memcpy(pSyn->zTerm, pToken, nToken);",
          "1569:       pSyn->pSynonym = pPhrase->aTerm[pPhrase->nTerm-1].pSynonym;",
          "",
          "[Removed Lines]",
          "1566:       memset(pSyn, 0, nByte);",
          "",
          "[Added Lines]",
          "1566:       memset(pSyn, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1723:       nByte = sizeof(Fts5Colset) + (pColsetOrig->nCol-1) * sizeof(int);",
          "1724:       pColset = (Fts5Colset*)sqlite3Fts5MallocZero(&rc, nByte);",
          "1725:       if( pColset ){",
          "1727:       }",
          "1728:       pNew->pRoot->pNear->pColset = pColset;",
          "1729:     }",
          "",
          "[Removed Lines]",
          "1726:         memcpy(pColset, pColsetOrig, nByte);",
          "",
          "[Added Lines]",
          "1726:         memcpy(pColset, pColsetOrig, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1940:     sqlite3_int64 nByte = sizeof(Fts5Colset) + (pOrig->nCol-1) * sizeof(int);",
          "1941:     pRet = (Fts5Colset*)sqlite3Fts5MallocZero(pRc, nByte);",
          "1942:     if( pRet ){",
          "1944:     }",
          "1945:   }else{",
          "1946:     pRet = 0;",
          "",
          "[Removed Lines]",
          "1943:       memcpy(pRet, pOrig, nByte);",
          "",
          "[Added Lines]",
          "1943:       memcpy(pRet, pOrig, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_hash.c||ext/fts5/fts5_hash.c": [
          "File: ext/fts5/fts5_hash.c -> ext/fts5/fts5_hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:       rc = SQLITE_NOMEM;",
          "105:     }else{",
          "107:     }",
          "108:   }",
          "109:   return rc;",
          "",
          "[Removed Lines]",
          "106:       memset(pNew->aSlot, 0, nByte);",
          "",
          "[Added Lines]",
          "106:       memset(pNew->aSlot, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "284:     p = (Fts5HashEntry*)sqlite3_malloc64(nByte);",
          "285:     if( !p ) return SQLITE_NOMEM;",
          "286:     memset(p, 0, sizeof(Fts5HashEntry));",
          "288:     zKey = fts5EntryKey(p);",
          "289:     zKey[0] = bByte;",
          "290:     memcpy(&zKey[1], pToken, nToken);",
          "",
          "[Removed Lines]",
          "287:     p->nAlloc = nByte;",
          "",
          "[Added Lines]",
          "287:     p->nAlloc = (int)nByte;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:     pCsr = (Fts5Cursor*)sqlite3_malloc64(nByte);",
          "634:     if( pCsr ){",
          "635:       Fts5Global *pGlobal = pTab->pGlobal;",
          "637:       pCsr->aColumnSize = (int*)&pCsr[1];",
          "638:       pCsr->pNext = pGlobal->pCsr;",
          "639:       pGlobal->pCsr = pCsr;",
          "",
          "[Removed Lines]",
          "636:       memset(pCsr, 0, nByte);",
          "",
          "[Added Lines]",
          "636:       memset(pCsr, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "914:   nByte = sizeof(Fts5Sorter) + sizeof(int) * (nPhrase-1);",
          "915:   pSorter = (Fts5Sorter*)sqlite3_malloc64(nByte);",
          "916:   if( pSorter==0 ) return SQLITE_NOMEM;",
          "918:   pSorter->nIdx = nPhrase;",
          "",
          "[Removed Lines]",
          "917:   memset(pSorter, 0, nByte);",
          "",
          "[Added Lines]",
          "917:   memset(pSorter, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c": [
          "File: ext/fts5/fts5_storage.c -> ext/fts5/fts5_storage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:   if( !p ) return SQLITE_NOMEM;",
          "293:   p->aTotalSize = (i64*)&p[1];",
          "294:   p->pConfig = pConfig;",
          "295:   p->pIndex = pIndex;",
          "",
          "[Removed Lines]",
          "292:   memset(p, 0, nByte);",
          "",
          "[Added Lines]",
          "292:   memset(p, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
          "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "769:     int bToken = aArray[ aFts5UnicodeData[iTbl] & 0x1F ];",
          "770:     int n = (aFts5UnicodeData[iTbl] >> 5) + i;",
          "771:     for(; i<128 && i<n; i++){",
          "773:     }",
          "774:     iTbl++;",
          "775:   }",
          "",
          "[Removed Lines]",
          "772:       aAscii[i] = bToken;",
          "",
          "[Added Lines]",
          "772:       aAscii[i] = (u8)bToken;",
          "",
          "---------------"
        ],
        "ext/misc/amatch.c||ext/misc/amatch.c": [
          "File: ext/misc/amatch.c -> ext/misc/amatch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "749:     if( q!='[' && q!= '\\'' && q!='\"' && q!='`' ){",
          "751:     }else{",
          "",
          "[Removed Lines]",
          "750:       memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "750:       memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------"
        ],
        "ext/misc/closure.c||ext/misc/closure.c": [
          "File: ext/misc/closure.c -> ext/misc/closure.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:     if( q!='[' && q!= '\\'' && q!='\"' && q!='`' ){",
          "435:     }else{",
          "",
          "[Removed Lines]",
          "434:       memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "434:       memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------"
        ],
        "ext/misc/fileio.c||ext/misc/fileio.c": [
          "File: ext/misc/fileio.c -> ext/misc/fileio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:     fclose(in);",
          "159:     return;",
          "160:   }",
          "162:     sqlite3_result_blob64(ctx, pBuf, nIn, sqlite3_free);",
          "163:   }else{",
          "164:     sqlite3_result_error_code(ctx, SQLITE_IOERR);",
          "",
          "[Removed Lines]",
          "161:   if( nIn==fread(pBuf, 1, nIn, in) ){",
          "",
          "[Added Lines]",
          "161:   if( nIn==fread(pBuf, 1, (size_t)nIn, in) ){",
          "",
          "---------------"
        ],
        "ext/misc/fuzzer.c||ext/misc/fuzzer.c": [
          "File: ext/misc/fuzzer.c -> ext/misc/fuzzer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "458:     if( q!='[' && q!= '\\'' && q!='\"' && q!='`' ){",
          "460:     }else{",
          "",
          "[Removed Lines]",
          "459:       memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "459:       memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "525:       memset(pNew, 0, sizeof(*pNew));",
          "526:       pNew->zClassName = (char*)&pNew[1];",
          "529:       zTab = fuzzerDequote(argv[3]);",
          "530:       if( zTab==0 ){",
          "",
          "[Removed Lines]",
          "527:       memcpy(pNew->zClassName, zModule, nModule+1);",
          "",
          "[Added Lines]",
          "527:       memcpy(pNew->zClassName, zModule, (size_t)(nModule+1));",
          "",
          "---------------"
        ],
        "ext/misc/unionvtab.c||ext/misc/unionvtab.c": [
          "File: ext/misc/unionvtab.c -> ext/misc/unionvtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:   if( *pRc==SQLITE_OK ){",
          "257:     pRet = sqlite3_malloc64(nByte);",
          "258:     if( pRet ){",
          "260:     }else{",
          "262:     }",
          "",
          "[Removed Lines]",
          "259:       memset(pRet, 0, nByte);",
          "",
          "[Added Lines]",
          "259:       memset(pRet, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "279:     sqlite3_int64 nByte = strlen(zIn) + 1;",
          "280:     zRet = unionMalloc(pRc, nByte);",
          "281:     if( zRet ){",
          "283:     }",
          "284:   }",
          "285:   return zRet;",
          "",
          "[Removed Lines]",
          "282:       memcpy(zRet, zIn, nByte);",
          "",
          "[Added Lines]",
          "282:       memcpy(zRet, zIn, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/session/changeset.c||ext/session/changeset.c": [
          "File: ext/session/changeset.c -> ext/session/changeset.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   pBuf = sqlite3_malloc64( sz ? sz : 1 );",
          "56:   if( pBuf==0 ){",
          "57:     fprintf(stderr, \"cannot allocate %d to hold content of \\\"%s\\\"\\n\",",
          "59:     exit(1);",
          "60:   }",
          "61:   if( sz>0 ){",
          "64:       exit(1);",
          "65:     }",
          "66:     fclose(f);",
          "67:   }",
          "70: }",
          "",
          "[Removed Lines]",
          "58:             sz, zFilename);",
          "62:     if( fread(pBuf, sz, 1, f)!=1 ){",
          "63:       fprintf(stderr, \"cannot read all %d bytes of \\\"%s\\\"\\n\", sz, zFilename);",
          "",
          "[Added Lines]",
          "58:             (int)sz, zFilename);",
          "62:     if( fread(pBuf, (size_t)sz, 1, f)!=1 ){",
          "63:       fprintf(stderr, \"cannot read all %d bytes of \\\"%s\\\"\\n\",",
          "64:               (int)sz, zFilename);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 55be6d0a9fa8a64b9c9c5ed51a2b9144304f7f0870a13b92d5864ac4d54491b6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2015:   assert( pPage->nCell>0",
          "2017:        || CORRUPT_DB );",
          "2019:   pPage->isInit = 1;",
          "",
          "[Removed Lines]",
          "2016:        || get2byteNotZero(&data[5])==pBt->usableSize",
          "",
          "[Added Lines]",
          "2016:        || get2byteNotZero(&data[5])==(int)pBt->usableSize",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "531:     fprintf(stderr, \"Out of memory!\\n\");",
          "532:     exit(1);",
          "533:   }",
          "535:   for(i=k=0; i<n; i++){",
          "536:     unsigned char c = (unsigned char)zIn[i];",
          "537:     if( isxdigit(c) ){",
          "",
          "[Removed Lines]",
          "534:   memset(a, 0, nAlloc);",
          "",
          "[Added Lines]",
          "534:   memset(a, 0, (size_t)nAlloc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "568:             exit(1);",
          "569:           }",
          "570:           assert( newSize > nAlloc );",
          "572:           nAlloc = newSize;",
          "573:         }",
          "574:         if( j>=(unsigned)mx ){",
          "",
          "[Removed Lines]",
          "571:           memset(a+nAlloc, 0, newSize - nAlloc);",
          "",
          "[Added Lines]",
          "571:           memset(a+nAlloc, 0, (size_t)(newSize - nAlloc));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21908b2166875fcaf92b194c00719d9031da5fa6",
      "candidate_info": {
        "commit_hash": "21908b2166875fcaf92b194c00719d9031da5fa6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/21908b2166875fcaf92b194c00719d9031da5fa6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Disable the xfer-optimization if the two tables have the same root page due to schema corruption.\n\nFossilOrigin-Name: f31b3bd2a6a8aa35a6454f37f3a4b4595e2ad74256cd180439019ab4c6c2059e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4538d9afe4e6360e20c7b474e77314e5ad293453e1edbe356bf6ea84c05857ee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2208:   if( pSrc==0 ){",
          "2210:   }",
          "2213:   }",
          "2214:   if( HasRowid(pDest)!=HasRowid(pSrc) ){",
          "",
          "[Removed Lines]",
          "2211:   if( pSrc==pDest ){",
          "",
          "[Added Lines]",
          "2211:   if( pSrc->tnum==pDest->tnum && pSrc->pSchema==pDest->pSchema ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d99950310ff4477be8df292744e91d783897263e",
      "candidate_info": {
        "commit_hash": "d99950310ff4477be8df292744e91d783897263e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d99950310ff4477be8df292744e91d783897263e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/walker.c",
          "test/altertab2.test",
          "test/altertab3.test",
          "test/window1.test"
        ],
        "message": "Fix problems with sub-selects in WINDOW definitions. Also rename-column operations when the column being renamed appears in a WINDOW definition that is part of a VIEW or TRIGGER.\n\nFossilOrigin-Name: 0387cb3add992b2028efe4f2100188d8f9fdfdcb233329857aa4b46a293cfc97",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/walker.c||src/walker.c",
          "test/altertab2.test||test/altertab2.test",
          "test/altertab3.test||test/altertab3.test",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/altertab3.test||test/altertab3.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/altertab3.test||test/altertab3.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1d8172a94bce2d067027685e5aa1dc8f5d5d55b5da0832ad2836f6939de68c8f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5366:   w.xSelectCallback2 = analyzeAggregatesInSelectEnd;",
          "5367:   w.walkerDepth = 0;",
          "5368:   w.u.pNC = pNC;",
          "5369:   assert( pNC->pSrcList!=0 );",
          "5370:   sqlite3WalkExpr(&w, pExpr);",
          "5371: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5369:   w.pParse = 0;",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "858: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "859:         if( pExpr->y.pWin ){",
          "860:           Select *pSel = pNC->pWinSelect;",
          "861:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pPartition);",
          "862:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pOrderBy);",
          "863:           sqlite3WalkExpr(pWalker, pExpr->y.pWin->pFilter);",
          "865:           if( 0==pSel->pWin",
          "866:            || 0==sqlite3WindowCompare(pParse, pSel->pWin, pExpr->y.pWin)",
          "867:           ){",
          "",
          "[Removed Lines]",
          "864:           sqlite3WindowUpdate(pParse, pSel->pWinDefn, pExpr->y.pWin, pDef);",
          "",
          "[Added Lines]",
          "861:           sqlite3WindowUpdate(pParse, pSel->pWinDefn, pExpr->y.pWin, pDef);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1536:       }",
          "1537:     }",
          "1541:     if( p->pNext && p->pEList->nExpr!=p->pNext->pEList->nExpr ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1539:     if( IN_RENAME_OBJECT ){",
          "1540:       Window *pWin;",
          "1541:       for(pWin=p->pWinDefn; pWin; pWin=pWin->pNextWin){",
          "1542:         if( sqlite3ResolveExprListNames(&sNC, pWin->pOrderBy)",
          "1543:          || sqlite3ResolveExprListNames(&sNC, pWin->pPartition)",
          "1544:         ){",
          "1545:           return WRC_Abort;",
          "1546:         }",
          "1547:       }",
          "1548:     }",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include <string.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #if !defined(SQLITE_OMIT_WINDOWFUNC)",
          "25: static int walkWindowList(Walker *pWalker, Window *pList){",
          "26:   Window *pWin;",
          "27:   for(pWin=pList; pWin; pWin=pWin->pNextWin){",
          "28:     if( sqlite3WalkExprList(pWalker, pWin->pOrderBy) ) return WRC_Abort;",
          "29:     if( sqlite3WalkExprList(pWalker, pWin->pPartition) ) return WRC_Abort;",
          "30:     if( sqlite3WalkExpr(pWalker, pWin->pFilter) ) return WRC_Abort;",
          "31:   }",
          "32:   return WRC_Continue;",
          "33: }",
          "34: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:       }",
          "57: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "58:       if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "63:       }",
          "64: #endif",
          "65:     }",
          "",
          "[Removed Lines]",
          "59:         Window *pWin = pExpr->y.pWin;",
          "60:         if( sqlite3WalkExprList(pWalker, pWin->pPartition) ) return WRC_Abort;",
          "61:         if( sqlite3WalkExprList(pWalker, pWin->pOrderBy) ) return WRC_Abort;",
          "62:         if( sqlite3WalkExpr(pWalker, pWin->pFilter) ) return WRC_Abort;",
          "",
          "[Added Lines]",
          "75:         if( walkWindowList(pWalker, pExpr->y.pWin) ) return WRC_Abort;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:   if( sqlite3WalkExpr(pWalker, p->pHaving) ) return WRC_Abort;",
          "100:   if( sqlite3WalkExprList(pWalker, p->pOrderBy) ) return WRC_Abort;",
          "101:   if( sqlite3WalkExpr(pWalker, p->pLimit) ) return WRC_Abort;",
          "102:   return WRC_Continue;",
          "103: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: #if !defined(SQLITE_OMIT_WINDOWFUNC) && !defined(SQLITE_OMIT_ALTERTABLE)",
          "116:   {",
          "117:     Parse *pParse = pWalker->pParse;",
          "118:     if( pParse && IN_RENAME_OBJECT ){",
          "119:       if( walkWindowList(pWalker, p->pWinDefn) ) return WRC_Abort;",
          "120:     }",
          "121:   }",
          "122: #endif",
          "",
          "---------------"
        ],
        "test/altertab2.test||test/altertab2.test": [
          "File: test/altertab2.test -> test/altertab2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "182: do_execsql_test 5.0 {",
          "183:   CREATE TABLE t2(a);",
          "184:   CREATE TRIGGER r2 AFTER INSERT ON t2 WHEN new.a NOT NULL BEGIN",
          "186:       WINDOW w1 AS (",
          "188:       ),",
          "189:       w2 AS (",
          "192:       );",
          "193:   END;",
          "194: } {}",
          "197:   INSERT INTO t2 VALUES(1);",
          "200: do_execsql_test 5.1 {",
          "201:   ALTER TABLE t2 RENAME TO t2x;",
          "202:   SELECT sql FROM sqlite_master WHERE name = 'r2';",
          "203: } {",
          "204:   {CREATE TRIGGER r2 AFTER INSERT ON \"t2x\" WHEN new.a NOT NULL BEGIN",
          "206:       WINDOW w1 AS (",
          "208:       ),",
          "209:       w2 AS (",
          "212:       );",
          "213:   END}",
          "214: }",
          "",
          "[Removed Lines]",
          "185:     SELECT a, rank() OVER w1 FROM t2",
          "187:         PARTITION BY b ORDER BY d ROWS BETWEEN 2 PRECEDING AND a FOLLOWING",
          "190:         PARTITION BY b",
          "191:         ORDER BY d ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "196: do_catchsql_test 5.0.1 {",
          "198: } {1 {no such column: b}}",
          "205:     SELECT a, rank() OVER w1 FROM \"t2x\"",
          "207:         PARTITION BY b ORDER BY d ROWS BETWEEN 2 PRECEDING AND a FOLLOWING",
          "210:         PARTITION BY b",
          "211:         ORDER BY d ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "",
          "[Added Lines]",
          "185:     SELECT a, sum(a) OVER w1 FROM t2",
          "187:         PARTITION BY a ORDER BY a",
          "188:         ROWS BETWEEN 2 PRECEDING AND 3 FOLLOWING",
          "191:         PARTITION BY a",
          "192:         ORDER BY rowid ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "197: do_execsql_test 5.0.1 {",
          "199: } {}",
          "206:     SELECT a, sum(a) OVER w1 FROM \"t2x\"",
          "208:         PARTITION BY a ORDER BY a",
          "209:         ROWS BETWEEN 2 PRECEDING AND 3 FOLLOWING",
          "212:         PARTITION BY a",
          "213:         ORDER BY rowid ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:   SELECT sql FROM sqlite_master WHERE name = 'r2';",
          "219: } {",
          "220:   {CREATE TRIGGER r2 AFTER INSERT ON \"t2x\" WHEN new.aaaa NOT NULL BEGIN",
          "222:       WINDOW w1 AS (",
          "224:       ),",
          "225:       w2 AS (",
          "228:       );",
          "229:   END}",
          "230: }",
          "233:   INSERT INTO t2x VALUES(1);",
          "236: #-------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "221:     SELECT aaaa, rank() OVER w1 FROM \"t2x\"",
          "223:         PARTITION BY b ORDER BY d ROWS BETWEEN 2 PRECEDING AND a FOLLOWING",
          "226:         PARTITION BY b",
          "227:         ORDER BY d ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "232: do_catchsql_test 5.3 {",
          "234: } {1 {no such column: b}}",
          "",
          "[Added Lines]",
          "223:     SELECT aaaa, sum(aaaa) OVER w1 FROM \"t2x\"",
          "225:         PARTITION BY aaaa ORDER BY aaaa",
          "226:         ROWS BETWEEN 2 PRECEDING AND 3 FOLLOWING",
          "229:         PARTITION BY aaaa",
          "230:         ORDER BY rowid ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "235: do_execsql_test 5.3 {",
          "237: } {}",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 January 23",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "15: set testprefix altertab3",
          "17: # If SQLITE_OMIT_ALTERTABLE is defined, omit this file.",
          "18: ifcapable !altertable {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE t1(a, b);",
          "25:   CREATE TRIGGER tr1 AFTER INSERT ON t1 BEGIN",
          "26:     SELECT sum(b) OVER w FROM t1 WINDOW w AS (ORDER BY a);",
          "27:   END;",
          "28: }",
          "30: do_execsql_test 1.1 {",
          "31:   ALTER TABLE t1 RENAME a TO aaa;",
          "32: }",
          "34: do_execsql_test 1.2 {",
          "35:   SELECT sql FROM sqlite_master WHERE name='tr1'",
          "36: } {{CREATE TRIGGER tr1 AFTER INSERT ON t1 BEGIN",
          "37:     SELECT sum(b) OVER w FROM t1 WINDOW w AS (ORDER BY aaa);",
          "38:   END}}",
          "40: do_execsql_test 1.3 {",
          "41:   INSERT INTO t1 VALUES(1, 2);",
          "42: }",
          "45: finish_test",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "673:   ) x WHERE x+x;",
          "674: } {}",
          "676: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "676: #-------------------------------------------------------------------------",
          "678: do_execsql_test 16.0 {",
          "679:   CREATE TABLE t7(a,b);",
          "680:   INSERT INTO t7(rowid, a, b) VALUES",
          "681:       (1, 1, 3),",
          "682:       (2, 10, 4),",
          "683:       (3, 100, 2);",
          "684: }",
          "686: do_execsql_test 16.1 {",
          "687:   SELECT rowid, sum(a) OVER (PARTITION BY b IN (SELECT rowid FROM t7)) FROM t7;",
          "688: } {",
          "689:   2 10",
          "690:   1 101",
          "691:   3 101",
          "692: }",
          "694: do_execsql_test 16.2 {",
          "695:   SELECT rowid, sum(a) OVER w1 FROM t7",
          "696:   WINDOW w1 AS (PARTITION BY b IN (SELECT rowid FROM t7));",
          "697: } {",
          "698:   2 10",
          "699:   1 101",
          "700:   3 101",
          "701: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "885eeb676b5bf2b6cda8d3449f4eb268fac11ca5",
      "candidate_info": {
        "commit_hash": "885eeb676b5bf2b6cda8d3449f4eb268fac11ca5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/885eeb676b5bf2b6cda8d3449f4eb268fac11ca5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/build.c",
          "src/sqliteInt.h",
          "test/altercol.test"
        ],
        "message": "Enhance the ALTER TABLE RENAME COLUMN feature so that it works on tables that have redundant UNIQUE and/or PRIMARY KEY constraints. Fix for ticket [bc8d94f0fbd633fd9a051e3]\n\nFossilOrigin-Name: f09aa3248e2b4a32ff5b5d37084cb2a27445322cb06a3354cef723f4f0b2cd34",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/build.c||src/build.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/altercol.test||test/altercol.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ca67f2ec0e294384c397db438605df1b47aae5f348a8de94f97286997625d169",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "961:   rc = sqlite3RunParser(p, zSql, &zErr);",
          "962:   assert( p->zErrMsg==0 );",
          "963:   assert( rc!=SQLITE_OK || zErr==0 );",
          "965:   p->zErrMsg = zErr;",
          "966:   if( db->mallocFailed ) rc = SQLITE_NOMEM;",
          "967:   if( rc==SQLITE_OK",
          "",
          "[Removed Lines]",
          "964:   assert( (0!=p->pNewTable) + (0!=p->pNewIndex) + (0!=p->pNewTrigger)<2 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1182: static void renameParseCleanup(Parse *pParse){",
          "1183:   sqlite3 *db = pParse->db;",
          "1184:   if( pParse->pVdbe ){",
          "1185:     sqlite3VdbeFinalize(pParse->pVdbe);",
          "1186:   }",
          "1187:   sqlite3DeleteTable(db, pParse->pNewTable);",
          "1189:   sqlite3DeleteTrigger(db, pParse->pNewTrigger);",
          "1190:   sqlite3DbFree(db, pParse->zErrMsg);",
          "1191:   renameTokenFree(db, pParse->pRename);",
          "",
          "[Removed Lines]",
          "1188:   if( pParse->pNewIndex ) sqlite3FreeIndex(db, pParse->pNewIndex);",
          "",
          "[Added Lines]",
          "1183:   Index *pIdx;",
          "1188:   while( (pIdx = pParse->pNewIndex)!=0 ){",
          "1189:     pParse->pNewIndex = pIdx->pNext;",
          "1190:     sqlite3FreeIndex(db, pIdx);",
          "1191:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1296:         for(pIdx=sParse.pNewTable->pIndex; pIdx; pIdx=pIdx->pNext){",
          "1297:           sqlite3WalkExprList(&sWalker, pIdx->aColExpr);",
          "1298:         }",
          "1299:       }",
          "1301:       for(pFKey=sParse.pNewTable->pFKey; pFKey; pFKey=pFKey->pNextFrom){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1302:         for(pIdx=sParse.pNewIndex; pIdx; pIdx=pIdx->pNext){",
          "1303:           sqlite3WalkExprList(&sWalker, pIdx->aColExpr);",
          "1304:         }",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3467:           }",
          "3468:         }",
          "3469:         if( idxType==SQLITE_IDXTYPE_PRIMARYKEY ) pIdx->idxType = idxType;",
          "3470:         goto exit_create_index;",
          "3471:       }",
          "3472:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3470:         if( IN_RENAME_OBJECT ){",
          "3471:           pIndex->pNext = pParse->pNewIndex;",
          "3472:           pParse->pNewIndex = pIndex;",
          "3473:           pIndex = 0;",
          "3474:         }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3140: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3137:   Index *pNewIndex;         /* An index being constructed by CREATE INDEX.",
          "",
          "---------------"
        ],
        "test/altercol.test||test/altercol.test": [
          "File: test/altercol.test -> test/altercol.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "778:   {CREATE VIEW v2(e) AS SELECT coalesce(t2.c,t1.f) FROM t1, t2 WHERE t1.b=t2.d}",
          "779: }",
          "783: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "781: # 2019-01-08: https://www.sqlite.org/src/tktview/bc8d94f0fbd633fd9a051e3",
          "782: #",
          "783: # ALTER TABLE RENAME COLUMN does not work for tables that have redundant",
          "784: # UNIQUE constraints.",
          "785: #",
          "786: sqlite3 db :memory:",
          "787: do_execsql_test 20.100 {",
          "788:   CREATE TABLE t1(aaa,b,c,UNIQUE(aaA),PRIMARY KEY(aAa),UNIQUE(aAA));",
          "789:   ALTER TABLE t1 RENAME aaa TO bbb;",
          "790:   SELECT sql FROM sqlite_master WHERE name='t1';",
          "791: } {{CREATE TABLE t1(bbb,b,c,UNIQUE(bbb),PRIMARY KEY(bbb),UNIQUE(bbb))}}",
          "792: do_execsql_test 20.105 {",
          "793:   DROP TABLE t1;",
          "794:   CREATE TABLE t1(aaa,b,c,UNIQUE(aaA),PRIMARY KEY(aAa),UNIQUE(aAA))WITHOUT ROWID;",
          "795:   ALTER TABLE t1 RENAME aaa TO bbb;",
          "796:   SELECT sql FROM sqlite_master WHERE name='t1';",
          "797: } {{CREATE TABLE t1(bbb,b,c,UNIQUE(bbb),PRIMARY KEY(bbb),UNIQUE(bbb))WITHOUT ROWID}}",
          "798: do_execsql_test 20.110 {",
          "799:   DROP TABLE t1;",
          "800:   CREATE TABLE t1(aa UNIQUE,bb UNIQUE,cc UNIQUE,UNIQUE(aA),PRIMARY KEY(bB),UNIQUE(cC));",
          "801:   ALTER TABLE t1 RENAME aa TO xx;",
          "802:   ALTER TABLE t1 RENAME bb TO yy;",
          "803:   ALTER TABLE t1 RENAME cc TO zz;",
          "804:   SELECT sql FROM sqlite_master WHERE name='t1';",
          "805: } {{CREATE TABLE t1(xx UNIQUE,yy UNIQUE,zz UNIQUE,UNIQUE(xx),PRIMARY KEY(yy),UNIQUE(zz))}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}