{
  "cve_id": "CVE-2011-2479",
  "cve_desc": "The Linux kernel before 2.6.39 does not properly create transparent huge pages in response to a MAP_PRIVATE mmap system call on /dev/zero, which allows local users to cause a denial of service (system crash) via a crafted application.",
  "repo": "torvalds/linux",
  "patch_hash": "78f11a255749d09025f54d4e2df4fbcb031530e2",
  "patch_info": {
    "commit_hash": "78f11a255749d09025f54d4e2df4fbcb031530e2",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/78f11a255749d09025f54d4e2df4fbcb031530e2",
    "files": [
      "include/linux/huge_mm.h",
      "include/linux/mm.h",
      "mm/huge_memory.c"
    ],
    "message": "mm: thp: fix /dev/zero MAP_PRIVATE and vm_flags cleanups\n\nThe huge_memory.c THP page fault was allowed to run if vm_ops was null\n(which would succeed for /dev/zero MAP_PRIVATE, as the f_op->mmap wouldn't\nsetup a special vma->vm_ops and it would fallback to regular anonymous\nmemory) but other THP logics weren't fully activated for vmas with vm_file\nnot NULL (/dev/zero has a not NULL vma->vm_file).\n\nSo this removes the vm_file checks so that /dev/zero also can safely use\nTHP (the other albeit safer approach to fix this bug would have been to\nprevent the THP initial page fault to run if vm_file was set).\n\nAfter removing the vm_file checks, this also makes huge_memory.c stricter\nin khugepaged for the DEBUG_VM=y case.  It doesn't replace the vm_file\ncheck with a is_pfn_mapping check (but it keeps checking for VM_PFNMAP\nunder VM_BUG_ON) because for a is_cow_mapping() mapping VM_PFNMAP should\nonly be allowed to exist before the first page fault, and in turn when\nvma->anon_vma is null (so preventing khugepaged registration).  So I tend\nto think the previous comment saying if vm_file was set, VM_PFNMAP might\nhave been set and we could still be registered in khugepaged (despite\nanon_vma was not NULL to be registered in khugepaged) was too paranoid.\nThe is_linear_pfn_mapping check is also I think superfluous (as described\nby comment) but under DEBUG_VM it is safe to stay.\n\nAddresses https://bugzilla.kernel.org/show_bug.cgi?id=33682\n\nSigned-off-by: Andrea Arcangeli <aarcange@redhat.com>\nReported-by: Caspar Zhang <bugs@casparzhang.com>\nAcked-by: Mel Gorman <mel@csn.ul.ie>\nAcked-by: Rik van Riel <riel@redhat.com>\nCc: <stable@kernel.org>\t\t[2.6.38.x]\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "before_after_code_files": [
      "include/linux/huge_mm.h||include/linux/huge_mm.h",
      "include/linux/mm.h||include/linux/mm.h",
      "mm/huge_memory.c||mm/huge_memory.c"
    ]
  },
  "patch_diff": {
    "include/linux/huge_mm.h||include/linux/huge_mm.h": [
      "File: include/linux/huge_mm.h -> include/linux/huge_mm.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "117:       unsigned long end,",
      "118:       long adjust_next)",
      "119: {",
      "121:   return;",
      "122:  __vma_adjust_trans_huge(vma, start, end, adjust_next);",
      "123: }",
      "",
      "[Removed Lines]",
      "120:  if (!vma->anon_vma || vma->vm_ops || vma->vm_file)",
      "",
      "[Added Lines]",
      "120:  if (!vma->anon_vma || vma->vm_ops)",
      "",
      "---------------"
    ],
    "include/linux/mm.h||include/linux/mm.h": [
      "File: include/linux/mm.h -> include/linux/mm.h"
    ],
    "mm/huge_memory.c||mm/huge_memory.c": [
      "File: mm/huge_memory.c -> mm/huge_memory.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1408:  return ret;",
      "1409: }",
      "1411: int hugepage_madvise(struct vm_area_struct *vma,",
      "1412:        unsigned long *vm_flags, int advice)",
      "1413: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1411: #define VM_NO_THP (VM_SPECIAL|VM_INSERTPAGE|VM_MIXEDMAP|VM_SAO| \\",
      "1412:      VM_HUGETLB|VM_SHARED|VM_MAYSHARE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1424:    return -EINVAL;",
      "",
      "[Removed Lines]",
      "1419:   if (*vm_flags & (VM_HUGEPAGE |",
      "1420:      VM_SHARED   | VM_MAYSHARE   |",
      "1421:      VM_PFNMAP   | VM_IO      | VM_DONTEXPAND |",
      "1422:      VM_RESERVED | VM_HUGETLB | VM_INSERTPAGE |",
      "1423:      VM_MIXEDMAP | VM_SAO))",
      "",
      "[Added Lines]",
      "1422:   if (*vm_flags & (VM_HUGEPAGE | VM_NO_THP))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1444:    return -EINVAL;",
      "",
      "[Removed Lines]",
      "1439:   if (*vm_flags & (VM_NOHUGEPAGE |",
      "1440:      VM_SHARED   | VM_MAYSHARE   |",
      "1441:      VM_PFNMAP   | VM_IO      | VM_DONTEXPAND |",
      "1442:      VM_RESERVED | VM_HUGETLB | VM_INSERTPAGE |",
      "1443:      VM_MIXEDMAP | VM_SAO))",
      "",
      "[Added Lines]",
      "1438:   if (*vm_flags & (VM_NOHUGEPAGE | VM_NO_THP))",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1576:   return 0;",
      "1579:   return 0;",
      "1581:  hstart = (vma->vm_start + ~HPAGE_PMD_MASK) & HPAGE_PMD_MASK;",
      "1582:  hend = vma->vm_end & HPAGE_PMD_MASK;",
      "1583:  if (hstart < hend)",
      "",
      "[Removed Lines]",
      "1577:  if (vma->vm_file || vma->vm_ops)",
      "1580:  VM_BUG_ON(is_linear_pfn_mapping(vma) || is_pfn_mapping(vma));",
      "",
      "[Added Lines]",
      "1572:  if (vma->vm_ops)",
      "1579:  VM_BUG_ON(is_linear_pfn_mapping(vma) || vma->vm_flags & VM_NO_THP);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1828:      (vma->vm_flags & VM_NOHUGEPAGE))",
      "1829:   goto out;",
      "1833:   goto out;",
      "1834:  if (is_vma_temporary_stack(vma))",
      "1835:   goto out;",
      "1838:  pgd = pgd_offset(mm, address);",
      "1839:  if (!pgd_present(*pgd))",
      "",
      "[Removed Lines]",
      "1832:  if (!vma->anon_vma || vma->vm_ops || vma->vm_file)",
      "1836:  VM_BUG_ON(is_linear_pfn_mapping(vma) || is_pfn_mapping(vma));",
      "",
      "[Added Lines]",
      "1830:  if (!vma->anon_vma || vma->vm_ops)",
      "1838:  VM_BUG_ON(is_linear_pfn_mapping(vma) || vma->vm_flags & VM_NO_THP);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2066:    progress++;",
      "2067:    continue;",
      "2068:   }",
      "2071:    goto skip;",
      "2072:   if (is_vma_temporary_stack(vma))",
      "2073:    goto skip;",
      "2077:   hstart = (vma->vm_start + ~HPAGE_PMD_MASK) & HPAGE_PMD_MASK;",
      "2078:   hend = vma->vm_end & HPAGE_PMD_MASK;",
      "",
      "[Removed Lines]",
      "2070:   if (!vma->anon_vma || vma->vm_ops || vma->vm_file)",
      "2075:   VM_BUG_ON(is_linear_pfn_mapping(vma) || is_pfn_mapping(vma));",
      "",
      "[Added Lines]",
      "2071:   if (!vma->anon_vma || vma->vm_ops)",
      "2079:   VM_BUG_ON(is_linear_pfn_mapping(vma) ||",
      "2080:      vma->vm_flags & VM_NO_THP);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a664b2d8555c659127bf8fe049a58449d394a707",
      "candidate_info": {
        "commit_hash": "a664b2d8555c659127bf8fe049a58449d394a707",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a664b2d8555c659127bf8fe049a58449d394a707",
        "files": [
          "include/linux/huge_mm.h",
          "include/linux/khugepaged.h",
          "include/linux/mm.h",
          "mm/huge_memory.c",
          "mm/madvise.c"
        ],
        "message": "thp: madvise(MADV_NOHUGEPAGE)\n\nAdd madvise MADV_NOHUGEPAGE to mark regions that are not important to be\nhugepage backed.  Return -EINVAL if the vma is not of an anonymous type,\nor the feature isn't built into the kernel.  Never silently return\nsuccess.\n\nSigned-off-by: Andrea Arcangeli <aarcange@redhat.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "include/linux/huge_mm.h||include/linux/huge_mm.h",
          "include/linux/khugepaged.h||include/linux/khugepaged.h",
          "include/linux/mm.h||include/linux/mm.h",
          "mm/huge_memory.c||mm/huge_memory.c",
          "mm/madvise.c||mm/madvise.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/linux/huge_mm.h||include/linux/huge_mm.h",
            "include/linux/mm.h||include/linux/mm.h",
            "mm/huge_memory.c||mm/huge_memory.c"
          ],
          "candidate": [
            "include/linux/huge_mm.h||include/linux/huge_mm.h",
            "include/linux/mm.h||include/linux/mm.h",
            "mm/huge_memory.c||mm/huge_memory.c"
          ]
        }
      },
      "candidate_diff": {
        "include/linux/huge_mm.h||include/linux/huge_mm.h": [
          "File: include/linux/huge_mm.h -> include/linux/huge_mm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: #define HPAGE_PMD_SIZE HPAGE_SIZE",
          "54: #define transparent_hugepage_enabled(__vma)    \\",
          "59: #define transparent_hugepage_defrag(__vma)    \\",
          "60:  ((transparent_hugepage_flags &     \\",
          "61:    (1<<TRANSPARENT_HUGEPAGE_DEFRAG_FLAG)) ||   \\",
          "",
          "[Removed Lines]",
          "55:  (transparent_hugepage_flags & (1<<TRANSPARENT_HUGEPAGE_FLAG) || \\",
          "56:   (transparent_hugepage_flags &     \\",
          "57:    (1<<TRANSPARENT_HUGEPAGE_REQ_MADV_FLAG) &&   \\",
          "58:    (__vma)->vm_flags & VM_HUGEPAGE))",
          "",
          "[Added Lines]",
          "55:  ((transparent_hugepage_flags &     \\",
          "56:    (1<<TRANSPARENT_HUGEPAGE_FLAG) ||    \\",
          "57:    (transparent_hugepage_flags &     \\",
          "58:     (1<<TRANSPARENT_HUGEPAGE_REQ_MADV_FLAG) &&   \\",
          "59:     ((__vma)->vm_flags & VM_HUGEPAGE))) &&   \\",
          "60:   !((__vma)->vm_flags & VM_NOHUGEPAGE))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103: #if HPAGE_PMD_ORDER > MAX_ORDER",
          "104: #error \"hugepages can't be allocated by the buddy allocator\"",
          "105: #endif",
          "107: extern void __vma_adjust_trans_huge(struct vm_area_struct *vma,",
          "108:         unsigned long start,",
          "109:         unsigned long end,",
          "",
          "[Removed Lines]",
          "106: extern int hugepage_madvise(unsigned long *vm_flags);",
          "",
          "[Added Lines]",
          "108: extern int hugepage_madvise(unsigned long *vm_flags, int advice);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141:  do { } while (0)",
          "142: #define wait_split_huge_page(__anon_vma, __pmd) \\",
          "143:  do { } while (0)",
          "145: {",
          "146:  BUG();",
          "147:  return 0;",
          "",
          "[Removed Lines]",
          "144: static inline int hugepage_madvise(unsigned long *vm_flags)",
          "",
          "[Added Lines]",
          "146: static inline int hugepage_madvise(unsigned long *vm_flags, int advice)",
          "",
          "---------------"
        ],
        "include/linux/khugepaged.h||include/linux/khugepaged.h": [
          "File: include/linux/khugepaged.h -> include/linux/khugepaged.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: static inline int khugepaged_enter(struct vm_area_struct *vma)",
          "39: {",
          "40:  if (!test_bit(MMF_VM_HUGEPAGE, &vma->vm_mm->flags))",
          "44:    if (__khugepaged_enter(vma->vm_mm))",
          "45:     return -ENOMEM;",
          "46:  return 0;",
          "",
          "[Removed Lines]",
          "41:   if (khugepaged_always() ||",
          "42:       (khugepaged_req_madv() &&",
          "43:        vma->vm_flags & VM_HUGEPAGE))",
          "",
          "[Added Lines]",
          "41:   if ((khugepaged_always() ||",
          "42:        (khugepaged_req_madv() &&",
          "43:         vma->vm_flags & VM_HUGEPAGE)) &&",
          "44:       !(vma->vm_flags & VM_NOHUGEPAGE))",
          "",
          "---------------"
        ],
        "include/linux/mm.h||include/linux/mm.h": [
          "File: include/linux/mm.h -> include/linux/mm.h"
        ],
        "mm/huge_memory.c||mm/huge_memory.c": [
          "File: mm/huge_memory.c -> mm/huge_memory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include <linux/kthread.h>",
          "17: #include <linux/khugepaged.h>",
          "18: #include <linux/freezer.h>",
          "19: #include <asm/tlb.h>",
          "20: #include <asm/pgalloc.h>",
          "21: #include \"internal.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <linux/mman.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1388:  return ret;",
          "1389: }",
          "1392: {",
          "1404:  return 0;",
          "1405: }",
          "",
          "[Removed Lines]",
          "1391: int hugepage_madvise(unsigned long *vm_flags)",
          "1396:  if (*vm_flags & (VM_HUGEPAGE | VM_SHARED  | VM_MAYSHARE   |",
          "1397:     VM_PFNMAP   | VM_IO      | VM_DONTEXPAND |",
          "1398:     VM_RESERVED | VM_HUGETLB | VM_INSERTPAGE |",
          "1399:     VM_MIXEDMAP | VM_SAO))",
          "1400:   return -EINVAL;",
          "",
          "[Added Lines]",
          "1392: int hugepage_madvise(unsigned long *vm_flags, int advice)",
          "1394:  switch (advice) {",
          "1395:  case MADV_HUGEPAGE:",
          "1399:   if (*vm_flags & (VM_HUGEPAGE |",
          "1400:      VM_SHARED   | VM_MAYSHARE   |",
          "1401:      VM_PFNMAP   | VM_IO      | VM_DONTEXPAND |",
          "1402:      VM_RESERVED | VM_HUGETLB | VM_INSERTPAGE |",
          "1403:      VM_MIXEDMAP | VM_SAO))",
          "1404:    return -EINVAL;",
          "1407:   break;",
          "1408:  case MADV_NOHUGEPAGE:",
          "1412:   if (*vm_flags & (VM_NOHUGEPAGE |",
          "1413:      VM_SHARED   | VM_MAYSHARE   |",
          "1414:      VM_PFNMAP   | VM_IO      | VM_DONTEXPAND |",
          "1415:      VM_RESERVED | VM_HUGETLB | VM_INSERTPAGE |",
          "1416:      VM_MIXEDMAP | VM_SAO))",
          "1417:    return -EINVAL;",
          "1420:   break;",
          "1421:  }",
          "",
          "---------------"
        ],
        "mm/madvise.c||mm/madvise.c": [
          "File: mm/madvise.c -> mm/madvise.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:    goto out;",
          "73:   break;",
          "74:  case MADV_HUGEPAGE:",
          "76:   if (error)",
          "77:    goto out;",
          "78:   break;",
          "",
          "[Removed Lines]",
          "75:   error = hugepage_madvise(&new_flags);",
          "",
          "[Added Lines]",
          "75:  case MADV_NOHUGEPAGE:",
          "76:   error = hugepage_madvise(&new_flags, behavior);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "290: #endif",
          "291: #ifdef CONFIG_TRANSPARENT_HUGEPAGE",
          "292:  case MADV_HUGEPAGE:",
          "293: #endif",
          "294:   return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294:  case MADV_NOHUGEPAGE:",
          "",
          "---------------"
        ]
      }
    }
  ]
}