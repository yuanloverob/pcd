{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e4dd8dc28efc8bbf8e2adb3d9ce17229db46219b",
      "candidate_info": {
        "commit_hash": "e4dd8dc28efc8bbf8e2adb3d9ce17229db46219b",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/e4dd8dc28efc8bbf8e2adb3d9ce17229db46219b",
        "files": [
          "lib/http.js"
        ],
        "message": "http leak: Null links from parser to req/res",
        "before_after_code_files": [
          "lib/http.js||lihttp.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1199:   self._deferToConnect(null, null, function() {",
          "1200:     self._flush();",
          "1201:   });",
          "1203: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1256:     var freeParser = function() {",
          "1257:       if (parser) {",
          "1259:         parser.socket.onend = null;",
          "1260:         parser.socket.ondata = null;",
          "1261:         parser.socket = null;",
          "1262:         parser = null;",
          "1263:       }",
          "1264:     };",
          "1266:     var errorListener = function(err) {",
          "",
          "[Removed Lines]",
          "1258:         parsers.free(parser);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c21c51a6fce878a4625c30032e669660ce6cbcaf",
      "candidate_info": {
        "commit_hash": "c21c51a6fce878a4625c30032e669660ce6cbcaf",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c21c51a6fce878a4625c30032e669660ce6cbcaf",
        "files": [
          "deps/v8/build/common.gypi"
        ],
        "message": "v8: fix \"pure virtual method called\" runtime error\n\nFixes #2912.",
        "before_after_code_files": [
          "deps/v8/build/common.gypi||deps/v8/build/common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/build/common.gypi||deps/v8/build/common.gypi": [
          "File: deps/v8/build/common.gypi -> deps/v8/build/common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:           }],",
          "272:           [ 'v8_no_strict_aliasing==1', {",
          "273:             'cflags': [ '-fno-strict-aliasing' ],",
          "274:           }],",
          "275:         ],  # conditions",
          "276:       }],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274:           }, {",
          "275:             # gcc 4.4.6 has a regression in non-strict aliasing mode that",
          "276:             # makes a lookup in CodeStub::FindCodeInCache() abort with a",
          "277:             # \"pure virtual method called\" runtime error.",
          "278:             #",
          "279:             # This bites node.js because it sets -fno-strict-aliasing in its",
          "280:             # cflags, which then leak into our cflags.",
          "281:             'cflags!': [ '-fno-strict-aliasing' ],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "463d6bac8b349acc462d345a6e298a76f7d06fb1",
      "candidate_info": {
        "commit_hash": "463d6bac8b349acc462d345a6e298a76f7d06fb1",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/463d6bac8b349acc462d345a6e298a76f7d06fb1",
        "files": [
          "lib/fs.js",
          "test/simple/test-fs-stat.js"
        ],
        "message": "fs: make callbacks run in global context\n\nCallbacks that were passed to the binding layer ran in the context of the\n(internal) binding object. Make sure they run in the global context.\n\nBefore:\n\n  fs.symlink('a', 'b', function() {\n    console.log(this); // prints \"{ oncomplete: [Function] }\"\n  });\n\nAfter:\n\n  fs.symlink('a', 'b', function() {\n    console.log(this); // prints \"{ <global object> }\"\n  });",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "test/simple/test-fs-stat.js||test/simple/test-fs-stat.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "104: fs.readFile = function(path, encoding_) {",
          "105:   var encoding = typeof(encoding_) === 'string' ? encoding_ : null;",
          "106:   var callback = arguments[arguments.length - 1];",
          "110:   var size;",
          "",
          "[Removed Lines]",
          "107:   if (typeof(callback) !== 'function') callback = noop;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:   value: stringToFlags",
          "238: });",
          "245: fs.close = function(fd, callback) {",
          "247: };",
          "249: fs.closeSync = function(fd) {",
          "",
          "[Removed Lines]",
          "240: function noop() {}",
          "246:   binding.close(fd, callback || noop);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "264: }",
          "266: fs.open = function(path, flags, mode, callback) {",
          "272:   mode = modeNum(mode, 438 /*=0666*/);",
          "274:   binding.open(pathModule._makeLong(path),",
          "",
          "[Removed Lines]",
          "267:   callback = arguments[arguments.length - 1];",
          "268:   if (typeof(callback) !== 'function') {",
          "269:     callback = noop;",
          "270:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "376: fs.rename = function(oldPath, newPath, callback) {",
          "377:   binding.rename(pathModule._makeLong(oldPath),",
          "378:                  pathModule._makeLong(newPath),",
          "380: };",
          "382: fs.renameSync = function(oldPath, newPath) {",
          "",
          "[Removed Lines]",
          "379:                  callback || noop);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "385: };",
          "387: fs.truncate = function(fd, len, callback) {",
          "389: };",
          "391: fs.truncateSync = function(fd, len) {",
          "",
          "[Removed Lines]",
          "388:   binding.truncate(fd, len, callback || noop);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "393: };",
          "395: fs.rmdir = function(path, callback) {",
          "397: };",
          "399: fs.rmdirSync = function(path) {",
          "",
          "[Removed Lines]",
          "396:   binding.rmdir(pathModule._makeLong(path), callback || noop);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "401: };",
          "403: fs.fdatasync = function(fd, callback) {",
          "405: };",
          "407: fs.fdatasyncSync = function(fd) {",
          "",
          "[Removed Lines]",
          "404:   binding.fdatasync(fd, callback || noop);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "409: };",
          "411: fs.fsync = function(fd, callback) {",
          "413: };",
          "415: fs.fsyncSync = function(fd) {",
          "",
          "[Removed Lines]",
          "412:   binding.fsync(fd, callback || noop);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "419: fs.mkdir = function(path, mode, callback) {",
          "420:   if (typeof mode === 'function') callback = mode;",
          "423: };",
          "425: fs.mkdirSync = function(path, mode) {",
          "",
          "[Removed Lines]",
          "421:   binding.mkdir(pathModule._makeLong(path), modeNum(mode, 511 /*=0777*/),",
          "422:                 callback || noop);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "428: };",
          "430: fs.sendfile = function(outFd, inFd, inOffset, length, callback) {",
          "432: };",
          "434: fs.sendfileSync = function(outFd, inFd, inOffset, length) {",
          "",
          "[Removed Lines]",
          "431:   binding.sendfile(outFd, inFd, inOffset, length, callback || noop);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "436: };",
          "438: fs.readdir = function(path, callback) {",
          "440: };",
          "442: fs.readdirSync = function(path) {",
          "",
          "[Removed Lines]",
          "439:   binding.readdir(pathModule._makeLong(path), callback || noop);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "444: };",
          "446: fs.fstat = function(fd, callback) {",
          "448: };",
          "450: fs.lstat = function(path, callback) {",
          "452: };",
          "454: fs.stat = function(path, callback) {",
          "456: };",
          "458: fs.fstatSync = function(fd) {",
          "",
          "[Removed Lines]",
          "447:   binding.fstat(fd, callback || noop);",
          "451:   binding.lstat(pathModule._makeLong(path), callback || noop);",
          "455:   binding.stat(pathModule._makeLong(path), callback || noop);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "468: };",
          "470: fs.readlink = function(path, callback) {",
          "472: };",
          "474: fs.readlinkSync = function(path) {",
          "",
          "[Removed Lines]",
          "471:   binding.readlink(pathModule._makeLong(path), callback || noop);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "478: fs.symlink = function(destination, path, type_, callback) {",
          "479:   var type = (typeof(type_) == 'string' ? type_ : null);",
          "483:   if (isWindows && type === 'junction') {",
          "484:     destination = pathModule._makeLong(destination);",
          "",
          "[Removed Lines]",
          "480:   var callback_ = arguments[arguments.length - 1];",
          "481:   callback = (typeof(callback_) == 'function' ? callback_ : noop);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "500: fs.link = function(srcpath, dstpath, callback) {",
          "501:   binding.link(pathModule._makeLong(srcpath),",
          "502:                pathModule._makeLong(dstpath),",
          "504: };",
          "506: fs.linkSync = function(srcpath, dstpath) {",
          "",
          "[Removed Lines]",
          "503:                callback || noop);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "509: };",
          "511: fs.unlink = function(path, callback) {",
          "513: };",
          "515: fs.unlinkSync = function(path) {",
          "",
          "[Removed Lines]",
          "512:   binding.unlink(pathModule._makeLong(path), callback || noop);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "517: };",
          "519: fs.fchmod = function(fd, mode, callback) {",
          "521: };",
          "523: fs.fchmodSync = function(fd, mode) {",
          "",
          "[Removed Lines]",
          "520:   binding.fchmod(fd, modeNum(mode), callback || noop);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "527: if (constants.hasOwnProperty('O_SYMLINK')) {",
          "528:   fs.lchmod = function(path, mode, callback) {",
          "530:     fs.open(path, constants.O_WRONLY | constants.O_SYMLINK, function(err, fd) {",
          "531:       if (err) {",
          "532:         callback(err);",
          "",
          "[Removed Lines]",
          "529:     callback = callback || noop;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "567: fs.chmod = function(path, mode, callback) {",
          "569: };",
          "571: fs.chmodSync = function(path, mode) {",
          "",
          "[Removed Lines]",
          "568:   binding.chmod(pathModule._makeLong(path), modeNum(mode), callback || noop);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "575: if (constants.hasOwnProperty('O_SYMLINK')) {",
          "576:   fs.lchown = function(path, uid, gid, callback) {",
          "578:     fs.open(path, constants.O_WRONLY | constants.O_SYMLINK, function(err, fd) {",
          "579:       if (err) {",
          "580:         callback(err);",
          "",
          "[Removed Lines]",
          "577:     callback = callback || noop;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "591: }",
          "593: fs.fchown = function(fd, uid, gid, callback) {",
          "595: };",
          "597: fs.fchownSync = function(fd, uid, gid) {",
          "",
          "[Removed Lines]",
          "594:   binding.fchown(fd, uid, gid, callback || noop);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "599: };",
          "601: fs.chown = function(path, uid, gid, callback) {",
          "603: };",
          "605: fs.chownSync = function(path, uid, gid) {",
          "",
          "[Removed Lines]",
          "602:   binding.chown(pathModule._makeLong(path), uid, gid, callback || noop);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "622: fs._toUnixTimestamp = toUnixTimestamp;",
          "624: fs.utimes = function(path, atime, mtime, callback) {",
          "628: };",
          "630: fs.utimesSync = function(path, atime, mtime) {",
          "",
          "[Removed Lines]",
          "625:   atime = toUnixTimestamp(atime);",
          "626:   mtime = toUnixTimestamp(mtime);",
          "627:   binding.utimes(pathModule._makeLong(path), atime, mtime, callback || noop);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "636: fs.futimes = function(fd, atime, mtime, callback) {",
          "637:   atime = toUnixTimestamp(atime);",
          "638:   mtime = toUnixTimestamp(mtime);",
          "640: };",
          "642: fs.futimesSync = function(fd, atime, mtime) {",
          "",
          "[Removed Lines]",
          "639:   binding.futimes(fd, atime, mtime, callback || noop);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-fs-stat.js||test/simple/test-fs-stat.js": [
          "File: test/simple/test-fs-stat.js -> test/simple/test-fs-stat.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     assert.ok(stats.mtime instanceof Date);",
          "37:     success_count++;",
          "38:   }",
          "39: });",
          "41: fs.lstat('.', function(err, stats) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:   assert(this === global);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     assert.ok(stats.mtime instanceof Date);",
          "47:     success_count++;",
          "48:   }",
          "49: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:   assert(this === global);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:       success_count++;",
          "63:       fs.close(fd);",
          "64:     }",
          "65:   });",
          "66: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     assert(this === global);",
          "67:   assert(this === global);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ee15457edbd634c85b69fb3b865c4e27b17b672",
      "candidate_info": {
        "commit_hash": "7ee15457edbd634c85b69fb3b865c4e27b17b672",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7ee15457edbd634c85b69fb3b865c4e27b17b672",
        "files": [
          "doc/api/os.markdown",
          "lib/os.js",
          "test/simple/test-os.js"
        ],
        "message": "os: add cross platform EOL character",
        "before_after_code_files": [
          "lib/os.js||lios.js",
          "test/simple/test-os.js||test/simple/test-os.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/os.js||lios.js": [
          "File: lib/os.js -> lios.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: };",
          "43: module.deprecate('getNetworkInterfaces',",
          "44:                  'It is now called `os.networkInterfaces`.');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-os.js||test/simple/test-os.js": [
          "File: test/simple/test-os.js -> test/simple/test-os.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:     assert.deepEqual(actual, expected);",
          "80:     break;",
          "81: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83: var EOL = os.EOL;",
          "84: assert.ok(EOL.length > 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09c296b44daedfd2b5da3a46120507ed7bd198e0",
      "candidate_info": {
        "commit_hash": "09c296b44daedfd2b5da3a46120507ed7bd198e0",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/09c296b44daedfd2b5da3a46120507ed7bd198e0",
        "files": [
          "lib/module.js"
        ],
        "message": "debugger: fix --debug-brk\n\nCommit 840229a forgot to update the debugger special case in lib/module.js\n\nFixes #2710.",
        "before_after_code_files": [
          "lib/module.js||limodule.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/module.js||limodule.js": [
          "File: lib/module.js -> limodule.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "429:   var compiledWrapper = runInThisContext(wrapper, filename, true);",
          "430:   if (global.v8debug) {",
          "431:     if (!resolvedArgv) {",
          "433:     }",
          "",
          "[Removed Lines]",
          "432:       resolvedArgv = Module._resolveFilename(process.argv[1], null)[1];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}