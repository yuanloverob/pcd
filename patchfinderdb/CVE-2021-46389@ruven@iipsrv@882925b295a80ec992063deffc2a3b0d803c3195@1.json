{
  "cve_id": "CVE-2021-46389",
  "cve_desc": "IIPImage High Resolution Streaming Image Server prior to commit 882925b295a80ec992063deffc2a3b0d803c3195 is affected by an integer overflow in iipsrv.fcgi through malformed HTTP query parameters.",
  "repo": "ruven/iipsrv",
  "patch_hash": "882925b295a80ec992063deffc2a3b0d803c3195",
  "patch_info": {
    "commit_hash": "882925b295a80ec992063deffc2a3b0d803c3195",
    "repo": "ruven/iipsrv",
    "commit_url": "https://github.com/ruven/iipsrv/commit/882925b295a80ec992063deffc2a3b0d803c3195",
    "files": [
      "ChangeLog",
      "src/KakaduImage.cc",
      "src/OpenJPEGImage.cc",
      "src/RawTile.h",
      "src/TileManager.cc",
      "src/Transforms.cc"
    ],
    "message": "- Modified TileManager.cc to verify that malloc() has correctly allocated memory. - Updated numerical types to std::size_t in RawTile.h, TileManager.cc, KakaduImage.cc, OpenJPEG.cc and Transforms.cc when allocating memory via new to avoid integer overflow - fixes remaining problems identified in https://github.com/ruven/iipsrv/issues/223.",
    "before_after_code_files": [
      "src/KakaduImage.cc||src/KakaduImage.cc",
      "src/OpenJPEGImage.cc||src/OpenJPEGImage.cc",
      "src/RawTile.h||src/RawTile.h",
      "src/TileManager.cc||src/TileManager.cc",
      "src/Transforms.cc||src/Transforms.cc"
    ]
  },
  "patch_diff": {
    "src/KakaduImage.cc||src/KakaduImage.cc": [
      "File: src/KakaduImage.cc -> src/KakaduImage.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "448:   RawTile rawtile( 0, res, seq, ang, w, h, channels, obpc );",
      "452:   else throw file_error( \"Kakadu :: Unsupported number of bits\" );",
      "455:   rawtile.filename = getImagePath();",
      "456:   rawtile.timestamp = timestamp;",
      "",
      "[Removed Lines]",
      "450:   if( obpc == 16 ) rawtile.data = new unsigned short[w*h*channels];",
      "451:   else if( obpc == 8 ) rawtile.data = new unsigned char[w*h*channels];",
      "454:   rawtile.dataLength = w*h*channels*(obpc/8);",
      "",
      "[Added Lines]",
      "450:   size_t np = (size_t) w * (size_t) h * (size_t) channels;",
      "451:   if( obpc == 16 ) rawtile.data = new unsigned short[np];",
      "452:   else if( obpc == 8 ) rawtile.data = new unsigned char[np];",
      "455:   rawtile.dataLength = np*(obpc/8);",
      "",
      "---------------"
    ],
    "src/OpenJPEGImage.cc||src/OpenJPEGImage.cc": [
      "File: src/OpenJPEGImage.cc -> src/OpenJPEGImage.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "377:   RawTile rawtile( 0, res, ha, va, w, h, channels, obpc );",
      "381:   else throw file_error( \"OpenJPEG :: Unsupported number of bits\" );",
      "384:   rawtile.filename = getImagePath();",
      "385:   rawtile.timestamp = timestamp;",
      "",
      "[Removed Lines]",
      "379:   if( obpc == 16 ) rawtile.data = new unsigned short[w * h * channels];",
      "380:   else if( obpc == 8 ) rawtile.data = new unsigned char[w * h * channels];",
      "383:   rawtile.dataLength = w*h*channels*(obpc/8);",
      "",
      "[Added Lines]",
      "379:   size_t np = (size_t) w * (size_t) h * (size_t) channels;",
      "380:   if( obpc == 16 ) rawtile.data = new unsigned short[np];",
      "381:   else if( obpc == 8 ) rawtile.data = new unsigned char[np];",
      "384:   rawtile.dataLength = np*(obpc/8);",
      "",
      "---------------"
    ],
    "src/RawTile.h||src/RawTile.h": [
      "File: src/RawTile.h -> src/RawTile.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "79:   int memoryManaged;",
      "85:   unsigned int width;",
      "",
      "[Removed Lines]",
      "82:   unsigned int dataLength;",
      "",
      "[Added Lines]",
      "82:   size_t dataLength;",
      "",
      "---------------"
    ],
    "src/TileManager.cc||src/TileManager.cc": [
      "File: src/TileManager.cc -> src/TileManager.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "9:     This program is free software; you can redistribute it and/or modify",
      "10:     it under the terms of the GNU General Public License as published by",
      "",
      "[Removed Lines]",
      "7:     Copyright (C) 2005-2021 Ruven Pillay.",
      "",
      "[Added Lines]",
      "7:     Copyright (C) 2005-2022 Ruven Pillay.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "134:   unsigned char* buffer = (unsigned char*) malloc( len );",
      "135:   unsigned char* src_ptr = (unsigned char*) memcpy( buffer, ttt->data, len );",
      "136:   unsigned char* dst_ptr = (unsigned char*) ttt->data;",
      "",
      "[Removed Lines]",
      "133:   int len = tw * th * ttt->channels * (ttt->bpc/8);",
      "",
      "[Added Lines]",
      "133:   unsigned int len = tw * th * ttt->channels * (ttt->bpc/8);",
      "137:   if( buffer == NULL ){",
      "138:     std::bad_alloc e;",
      "139:     throw e;",
      "140:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:   RawTile region( 0, res, seq, ang, width, height, channels, bpc );",
      "369:   region.sampleType = sampleType;",
      "377:   unsigned int current_height = 0;",
      "380:   for( unsigned int i=starty; i<endy; i++ ){",
      "",
      "[Removed Lines]",
      "368:   region.dataLength = width * height * channels * (bpc/8);",
      "372:   if( bpc == 8 ) region.data = new unsigned char[width*height*channels];",
      "373:   else if( bpc == 16 ) region.data = new unsigned short[width*height*channels];",
      "374:   else if( bpc == 32 && sampleType == FIXEDPOINT ) region.data = new int[width*height*channels];",
      "375:   else if( bpc == 32 && sampleType == FLOATINGPOINT ) region.data = new float[width*height*channels];",
      "382:     unsigned int buffer_index = 0;",
      "",
      "[Added Lines]",
      "374:   size_t np = (size_t) width * (size_t) height * (size_t) channels;",
      "375:   region.dataLength = np * (bpc/8);",
      "379:   if( bpc == 8 ) region.data = new unsigned char[np];",
      "380:   else if( bpc == 16 ) region.data = new unsigned short[np];",
      "381:   else if( bpc == 32 && sampleType == FIXEDPOINT ) region.data = new int[np];",
      "382:   else if( bpc == 32 && sampleType == FLOATINGPOINT ) region.data = new float[np];",
      "389:     unsigned long buffer_index = 0;",
      "",
      "---------------"
    ],
    "src/Transforms.cc||src/Transforms.cc": [
      "File: src/Transforms.cc -> src/Transforms.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "533:   in.width = resampled_width;",
      "534:   in.height = resampled_height;",
      "536:   in.data = output;",
      "537: }",
      "",
      "[Removed Lines]",
      "535:   in.dataLength = resampled_width * resampled_height * channels * (in.bpc/8);",
      "",
      "[Added Lines]",
      "535:   in.dataLength = (size_t)resampled_width * (size_t)resampled_height * (size_t)channels * (size_t)(in.bpc/8);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "619:   in.width = resampled_width;",
      "620:   in.height = resampled_height;",
      "622:   in.data = output;",
      "623: }",
      "",
      "[Removed Lines]",
      "621:   in.dataLength = resampled_width * resampled_height * channels * (in.bpc/8);",
      "",
      "[Added Lines]",
      "621:   in.dataLength = (size_t)resampled_width * (size_t)resampled_height * (size_t)channels * (size_t)(in.bpc/8);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6a17a599fbf7bdb6c77f477758c9fa5be335b5a9",
      "candidate_info": {
        "commit_hash": "6a17a599fbf7bdb6c77f477758c9fa5be335b5a9",
        "repo": "ruven/iipsrv",
        "commit_url": "https://github.com/ruven/iipsrv/commit/6a17a599fbf7bdb6c77f477758c9fa5be335b5a9",
        "files": [
          "ChangeLog",
          "src/KakaduImage.cc",
          "src/OpenJPEGImage.cc",
          "src/TileManager.cc",
          "src/Transforms.cc"
        ],
        "message": "Updated KakaduImage and OpenJPEGImage classes to use Rawtile's new allocate() function. Also updated Transform class to correctly update Rawtile capacity value",
        "before_after_code_files": [
          "src/KakaduImage.cc||src/KakaduImage.cc",
          "src/OpenJPEGImage.cc||src/OpenJPEGImage.cc",
          "src/TileManager.cc||src/TileManager.cc",
          "src/Transforms.cc||src/Transforms.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/KakaduImage.cc||src/KakaduImage.cc",
            "src/OpenJPEGImage.cc||src/OpenJPEGImage.cc",
            "src/TileManager.cc||src/TileManager.cc",
            "src/Transforms.cc||src/Transforms.cc"
          ],
          "candidate": [
            "src/KakaduImage.cc||src/KakaduImage.cc",
            "src/OpenJPEGImage.cc||src/OpenJPEGImage.cc",
            "src/TileManager.cc||src/TileManager.cc",
            "src/Transforms.cc||src/Transforms.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/KakaduImage.cc||src/KakaduImage.cc": [
          "File: src/KakaduImage.cc -> src/KakaduImage.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "452: #endif",
          "456:   RawTile rawtile( tile, res, seq, ang, tw, th, channels, obpc );",
          "465:   rawtile.filename = getImagePath();",
          "466:   rawtile.timestamp = timestamp;",
          "469:   process( res, layers, xoffset, yoffset, tw, th, rawtile.data );",
          "",
          "[Removed Lines]",
          "460:   if( obpc == 16 ) rawtile.data = new unsigned short[tw*th*channels];",
          "461:   else if( obpc == 8 ) rawtile.data = new unsigned char[tw*th*channels];",
          "462:   else throw file_error( \"Kakadu :: Unsupported number of bits\" );",
          "464:   rawtile.dataLength = tw*th*channels*(obpc/8);",
          "",
          "[Added Lines]",
          "456:   if( !( (obpc == 8) || (obpc == 16) ) ) throw file_error( \"Kakadu :: Unsupported number of bits\" );",
          "462:   rawtile.allocate();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "492:   timer.start();",
          "493: #endif",
          "503:   rawtile.filename = getImagePath();",
          "504:   rawtile.timestamp = timestamp;",
          "506:   process( res, layers, x, y, w, h, rawtile.data );",
          "",
          "[Removed Lines]",
          "495:   RawTile rawtile( 0, res, seq, ang, w, h, channels, obpc );",
          "497:   size_t np = (size_t) w * (size_t) h * (size_t) channels;",
          "498:   if( obpc == 16 ) rawtile.data = new unsigned short[np];",
          "499:   else if( obpc == 8 ) rawtile.data = new unsigned char[np];",
          "500:   else throw file_error( \"Kakadu :: Unsupported number of bits\" );",
          "502:   rawtile.dataLength = np*(obpc/8);",
          "",
          "[Added Lines]",
          "492:   if( !( (obpc == 8) || (obpc == 16) ) ) throw file_error( \"Kakadu :: Unsupported number of bits\" );",
          "494:   RawTile rawtile( 0, res, seq, ang, w, h, channels, obpc );",
          "497:   rawtile.allocate();",
          "",
          "---------------"
        ],
        "src/OpenJPEGImage.cc||src/OpenJPEGImage.cc": [
          "File: src/OpenJPEGImage.cc -> src/OpenJPEGImage.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "337:   logfile << \"OpenJPEG :: Tile size: \" << tw << \"x\" << th << \" @\" << channels << endl;",
          "338: #endif",
          "341:   RawTile rawtile( tile, res, seq, ang, tw, th, channels, obpc );",
          "348:   rawtile.filename = getImagePath();",
          "349:   rawtile.timestamp = timestamp;",
          "352:   process( res, layers, xoffset, yoffset, tw, th, rawtile.data );",
          "",
          "[Removed Lines]",
          "343:   if( obpc == 16 ) rawtile.data = new unsigned short[tw*th*channels];",
          "344:   else if( obpc == 8 ) rawtile.data = new unsigned char[tw*th*channels];",
          "345:   else throw file_error( \"OpenJPEG :: Unsupported number of bits\" );",
          "347:   rawtile.dataLength = tw*th*channels*(obpc/8);",
          "",
          "[Added Lines]",
          "341:   if( !( (obpc == 8) || (obpc == 16) ) ) throw file_error( \"OpenJPEG :: Unsupported number of bits\" );",
          "347:   rawtile.allocate();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "373:   timer.start();",
          "374: #endif",
          "384:   rawtile.filename = getImagePath();",
          "385:   rawtile.timestamp = timestamp;",
          "387:   process( res, layers, x, y, w, h, rawtile.data );",
          "",
          "[Removed Lines]",
          "376:   RawTile rawtile( 0, res, ha, va, w, h, channels, obpc );",
          "378:   size_t np = (size_t) w * (size_t) h * (size_t) channels;",
          "379:   if( obpc == 16 ) rawtile.data = new unsigned short[np];",
          "380:   else if( obpc == 8 ) rawtile.data = new unsigned char[np];",
          "381:   else throw file_error( \"OpenJPEG :: Unsupported number of bits\" );",
          "383:   rawtile.dataLength = np*(obpc/8);",
          "",
          "[Added Lines]",
          "375:   if( !( (obpc == 8) || (obpc == 16) ) ) throw file_error( \"OpenJPEG :: Unsupported number of bits\" );",
          "377:   RawTile rawtile( 0, res, ha, va, w, h, channels, obpc );",
          "380:   rawtile.allocate();",
          "",
          "---------------"
        ],
        "src/TileManager.cc||src/TileManager.cc": [
          "File: src/TileManager.cc -> src/TileManager.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "390:   RawTile region( 0, res, seq, ang, width, height, channels, bpc );",
          "393:   region.sampleType = sampleType;",
          "401:   unsigned int current_height = 0;",
          "",
          "[Removed Lines]",
          "391:   size_t np = (size_t) width * (size_t) height * (size_t) channels;",
          "392:   region.dataLength = np * (bpc/8);",
          "396:   if( bpc == 8 ) region.data = new unsigned char[np];",
          "397:   else if( bpc == 16 ) region.data = new unsigned short[np];",
          "398:   else if( bpc == 32 && sampleType == FIXEDPOINT ) region.data = new int[np];",
          "399:   else if( bpc == 32 && sampleType == FLOATINGPOINT ) region.data = new float[np];",
          "",
          "[Added Lines]",
          "392:   region.allocate();",
          "",
          "---------------"
        ],
        "src/Transforms.cc||src/Transforms.cc": [
          "File: src/Transforms.cc -> src/Transforms.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:   in.bpc = 32;",
          "153:   in.sampleType = FLOATINGPOINT;",
          "154:   in.dataLength = (uint32_t) np * (in.bpc/8);",
          "156: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:   in.capacity = in.dataLength;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:   in.data = buffer;",
          "225:   in.channels = 1;",
          "226:   in.dataLength = (uint32_t) in.width * in.height * (in.bpc/8);",
          "227: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:   in.capacity = in.dataLength;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "463:   in.data = outptr;",
          "464:   in.channels = out_chan;",
          "465:   in.dataLength = (uint32_t) np * out_chan * (in.bpc/8);",
          "466: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468:   in.capacity = in.dataLength;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "535:   in.width = resampled_width;",
          "536:   in.height = resampled_height;",
          "537:   in.dataLength = (uint32_t) resampled_width * resampled_height * channels * (in.bpc/8);",
          "538:   in.data = output;",
          "539: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "541:   in.capacity = in.dataLength;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "621:   in.width = resampled_width;",
          "622:   in.height = resampled_height;",
          "623:   in.dataLength = (uint32_t) resampled_width * resampled_height * channels * (in.bpc/8);",
          "624:   in.data = output;",
          "625: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "628:   in.capacity = in.dataLength;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "666:   in.bpc = 8;",
          "667:   in.sampleType = FIXEDPOINT;",
          "668:   in.dataLength = np;",
          "669: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "674:   in.capacity = np;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "694:   in.bpc = 8;",
          "695:   in.sampleType = FIXEDPOINT;",
          "696:   in.dataLength = np;",
          "697: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:   in.capacity = np;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "853:   rawtile.channels = 1;",
          "854:   rawtile.dataLength = np;",
          "855: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "862:   rawtile.capacity = np;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "926:     rawtile.data = output;",
          "927:     rawtile.channels = output_channels;",
          "928:     rawtile.dataLength = (uint32_t) np * rawtile.channels * (rawtile.bpc/8);",
          "929:   }",
          "931: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "937:     rawtile.capacity = rawtile.dataLength;",
          "",
          "---------------"
        ]
      }
    }
  ]
}