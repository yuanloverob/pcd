{
  "cve_id": "CVE-2014-0207",
  "cve_desc": "The cdf_read_short_sector function in cdf.c in file before 5.19, as used in the Fileinfo component in PHP before 5.4.30 and 5.5.x before 5.5.14, allows remote attackers to cause a denial of service (assertion failure and application exit) via a crafted CDF file.",
  "repo": "file/file",
  "patch_hash": "6d209c1c489457397a5763bca4b28e43aac90391",
  "patch_info": {
    "commit_hash": "6d209c1c489457397a5763bca4b28e43aac90391",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/6d209c1c489457397a5763bca4b28e43aac90391",
    "files": [
      "src/cdf.c",
      "src/readcdf.c"
    ],
    "message": "Apply patches from file-CVE-2012-1571.patch From Francisco Alonso Espejo:     file < 5.18/git version can be made to crash when checking some     corrupt CDF files (Using an invalid cdf_read_short_sector size)     The problem I found here, is that in most situations (if     h_short_sec_size_p2 > 8) because the blocksize is 512 and normal     values are 06 which means reading 64 bytes.As long as the check     for the block size copy is not checked properly (there's an assert     that makes wrong/invalid assumptions)",
    "before_after_code_files": [
      "src/cdf.c||src/cdf.c",
      "src/readcdf.c||src/readcdf.c"
    ]
  },
  "patch_diff": {
    "src/cdf.c||src/cdf.c": [
      "File: src/cdf.c -> src/cdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #include \"file.h\"",
      "37: #ifndef lint",
      "39: #endif",
      "41: #include <assert.h>",
      "",
      "[Removed Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.54 2014/02/25 20:52:02 christos Exp $\")",
      "",
      "[Added Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.55 2014/02/27 23:26:17 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "352:  size_t ss = CDF_SHORT_SEC_SIZE(h);",
      "353:  size_t pos = CDF_SHORT_SEC_POS(h, id);",
      "354:  assert(ss == len);",
      "356:   DPRINTF((\"Out of bounds read %\" SIZE_T_FORMAT \"u > %\"",
      "357:       SIZE_T_FORMAT \"u\\n\",",
      "359:   return -1;",
      "360:  }",
      "361:  (void)memcpy(((char *)buf) + offs,",
      "",
      "[Removed Lines]",
      "355:  if (pos > CDF_SEC_SIZE(h) * sst->sst_len) {",
      "358:       pos, CDF_SEC_SIZE(h) * sst->sst_len));",
      "",
      "[Added Lines]",
      "355:  if (pos + len > CDF_SEC_SIZE(h) * sst->sst_len) {",
      "358:       pos + len, CDF_SEC_SIZE(h) * sst->sst_len));",
      "",
      "---------------"
    ],
    "src/readcdf.c||src/readcdf.c": [
      "File: src/readcdf.c -> src/readcdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #include \"file.h\"",
      "28: #ifndef lint",
      "30: #endif",
      "32: #include <assert.h>",
      "",
      "[Removed Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.39 2014/02/27 23:26:18 christos Exp $\")",
      "",
      "[Added Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.40 2014/03/06 15:23:33 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "121: private int",
      "122: cdf_file_property_info(struct magic_set *ms, const cdf_property_info_t *info,",
      "124: {",
      "125:         size_t i;",
      "126:         cdf_timestamp_t tp;",
      "",
      "[Removed Lines]",
      "123:     size_t count, const uint64_t clsid[2])",
      "",
      "[Added Lines]",
      "123:     size_t count, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "130:         const char *s;",
      "131:         int len;",
      "136:         for (i = 0; i < count; i++) {",
      "137:                 cdf_print_property_name(buf, sizeof(buf), info[i].pi_id);",
      "",
      "[Removed Lines]",
      "133:         if (!NOTMIME(ms))",
      "134:   str = cdf_clsid_to_mime(clsid, clsid2mime);",
      "",
      "[Added Lines]",
      "133:         if (!NOTMIME(ms) && root_storage)",
      "134:   str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2mime);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "237: private int",
      "238: cdf_file_summary_info(struct magic_set *ms, const cdf_header_t *h,",
      "240: {",
      "241:         cdf_summary_info_header_t si;",
      "242:         cdf_property_info_t *info;",
      "",
      "[Removed Lines]",
      "239:     const cdf_stream_t *sst, const uint64_t clsid[2])",
      "",
      "[Added Lines]",
      "239:     const cdf_stream_t *sst, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "276:                                 return -2;",
      "277:                         break;",
      "278:                 }",
      "286:         free(info);",
      "288:         return m == -1 ? -2 : m;",
      "",
      "[Removed Lines]",
      "279:   str = cdf_clsid_to_mime(clsid, clsid2desc);",
      "280:   if (str)",
      "281:                         if (file_printf(ms, \", %s\", str) == -1)",
      "282:     return -2;",
      "283:         }",
      "285:         m = cdf_file_property_info(ms, info, count, clsid);",
      "",
      "[Added Lines]",
      "279:   if (root_storage) {",
      "280:    str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2desc);",
      "281:    if (str)",
      "282:     if (file_printf(ms, \", %s\", str) == -1)",
      "283:      return -2;",
      "284:    }",
      "285:   }",
      "287:         m = cdf_file_property_info(ms, info, count, root_storage);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "381: #ifdef CDF_DEBUG",
      "382:         cdf_dump_summary_info(&h, &scn);",
      "383: #endif",
      "388:  if (i == 0) {",
      "389:   const char *str = NULL;",
      "",
      "[Removed Lines]",
      "384:         if ((i = cdf_file_summary_info(ms, &h, &scn,",
      "385:      root_storage->d_storage_uuid)) < 0)",
      "386:                 expn = \"Can't expand summary_info\";",
      "",
      "[Added Lines]",
      "386:         if ((i = cdf_file_summary_info(ms, &h, &scn, root_storage)) < 0)",
      "387:             expn = \"Can't expand summary_info\";",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "325ee677ed3a77bb2a8c04fc46ebb2c3624e95b7",
      "candidate_info": {
        "commit_hash": "325ee677ed3a77bb2a8c04fc46ebb2c3624e95b7",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/325ee677ed3a77bb2a8c04fc46ebb2c3624e95b7",
        "files": [
          "src/cdf.c",
          "src/compress.c",
          "src/file.h",
          "src/fsmagic.c",
          "src/magic.c",
          "src/readcdf.c",
          "src/vasprintf.c"
        ],
        "message": "WIN32 changes from Angelo Paolitto",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c",
          "src/compress.c||src/compress.c",
          "src/file.h||src/file.h",
          "src/fsmagic.c||src/fsmagic.c",
          "src/magic.c||src/magic.c",
          "src/readcdf.c||src/readcdf.c",
          "src/vasprintf.c||src/vasprintf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c",
            "src/readcdf.c||src/readcdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c",
            "src/readcdf.c||src/readcdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.67 2014/09/24 19:49:07 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.68 2014/10/22 19:27:36 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "825:   goto out;",
          "826:  for (i = 0; i < sh.sh_properties; i++) {",
          "827:   size_t tail = (i << 1) + 1;",
          "828:   if (cdf_check_stream_offset(sst, h, p, tail * sizeof(uint32_t),",
          "829:       __LINE__) == -1)",
          "830:    goto out;",
          "832:   q = (const uint8_t *)(const void *)",
          "833:       ((const char *)(const void *)p + ofs",
          "834:       - 2 * sizeof(uint32_t));",
          "",
          "[Removed Lines]",
          "831:   size_t ofs = CDF_GETUINT32(p, tail);",
          "",
          "[Added Lines]",
          "828:   size_t ofs;",
          "832:   ofs = CDF_GETUINT32(p, tail);",
          "",
          "---------------"
        ],
        "src/compress.c||src/compress.c": [
          "File: src/compress.c -> src/compress.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: compress.c,v 1.73 2014/01/05 15:55:21 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: compress.c,v 1.74 2014/10/26 20:23:30 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: #endif",
          "46: #include <string.h>",
          "47: #include <errno.h>",
          "49: #include <sys/ioctl.h>",
          "50: #endif",
          "51: #ifdef HAVE_SYS_WAIT_H",
          "",
          "[Removed Lines]",
          "48: #ifndef __MINGW32__",
          "",
          "[Added Lines]",
          "48: #if !defined(__MINGW32__) && !defined(WIN32)",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: #include <regex.h>",
          "65: #include <time.h>",
          "66: #include <sys/types.h>",
          "67: #include <sys/param.h>",
          "69: #include <sys/stat.h>",
          "70: #include <stdarg.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: #ifndef WIN32",
          "69: #endif",
          "",
          "---------------"
        ],
        "src/fsmagic.c||src/fsmagic.c": [
          "File: src/fsmagic.c -> src/fsmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: fsmagic.c,v 1.73 2014/05/14 23:15:42 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: fsmagic.c,v 1.74 2014/10/13 20:21:49 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130: #ifdef WIN32",
          "131:  {",
          "133:       FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0,",
          "134:       NULL);",
          "135:   if (hFile != INVALID_HANDLE_VALUE) {",
          "",
          "[Removed Lines]",
          "132:   HANDLE hFile = CreateFile(fn, 0, FILE_SHARE_DELETE |",
          "",
          "[Added Lines]",
          "132:   HANDLE hFile = CreateFile((LPCSTR)fn, 0, FILE_SHARE_DELETE |",
          "",
          "---------------"
        ],
        "src/magic.c||src/magic.c": [
          "File: src/magic.c -> src/magic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include \"file.h\"",
          "35: #ifndef lint",
          "39: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.88 2014/11/28 02:35:05 christos Exp $\")",
          "",
          "[Added Lines]",
          "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.89 2014/11/28 02:46:39 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128: #else",
          "129:  char *hmagicp;",
          "130:  char *tmppath = NULL;",
          "131:  hmagicpath = NULL;",
          "133: #define APPENDPATH() \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:  LPTSTR dllpath;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173:  }",
          "178:  if (GetModuleFileNameA(NULL, dllpath, MAX_PATH)){",
          "179:   PathRemoveFileSpecA(dllpath);",
          "",
          "[Removed Lines]",
          "176:  LPTSTR dllpath = malloc(sizeof(*dllpath) * (MAX_PATH + 1));",
          "",
          "[Added Lines]",
          "177:  dllpath = malloc(sizeof(*dllpath) * (MAX_PATH + 1));",
          "",
          "---------------"
        ],
        "src/readcdf.c||src/readcdf.c": [
          "File: src/readcdf.c -> src/readcdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"file.h\"",
          "28: #ifndef lint",
          "30: #endif",
          "32: #include <assert.h>",
          "",
          "[Removed Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.47 2014/08/27 13:00:37 christos Exp $\")",
          "",
          "[Added Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.48 2014/09/10 18:41:51 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:  const char *mime;",
          "73: } clsid2mime[] = {",
          "74:  {",
          "76:   \"x-msi\",",
          "77:  },",
          "78:  { { 0,    0   },",
          "",
          "[Removed Lines]",
          "75:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU  },",
          "",
          "[Added Lines]",
          "75:   { 0x00000000000c1084ULL, 0x46000000000000c0ULL  },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:  },",
          "81: }, clsid2desc[] = {",
          "82:  {",
          "84:   \"MSI Installer\",",
          "85:  },",
          "86:  { { 0,    0   },",
          "",
          "[Removed Lines]",
          "83:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU  },",
          "",
          "[Added Lines]",
          "83:   { 0x00000000000c1084ULL, 0x46000000000000c0ULL  },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "334: format_clsid(char *buf, size_t len, const uint64_t uuid[2]) {",
          "335:  snprintf(buf, len, \"%.8\" PRIx64 \"-%.4\" PRIx64 \"-%.4\" PRIx64 \"-%.4\"",
          "336:      PRIx64 \"-%.12\" PRIx64,",
          "342:  return buf;",
          "343: }",
          "344: #endif",
          "",
          "[Removed Lines]",
          "337:      (uuid[0] >> 32) & (uint64_t)0x000000000ffffffffLLU,",
          "338:      (uuid[0] >> 16) & (uint64_t)0x0000000000000ffffLLU,",
          "339:      (uuid[0] >>  0) & (uint64_t)0x0000000000000ffffLLU,",
          "340:      (uuid[1] >> 48) & (uint64_t)0x0000000000000ffffLLU,",
          "341:      (uuid[1] >>  0) & (uint64_t)0x0000fffffffffffffLLU);",
          "",
          "[Added Lines]",
          "337:      (uuid[0] >> 32) & (uint64_t)0x000000000ffffffffULL,",
          "338:      (uuid[0] >> 16) & (uint64_t)0x0000000000000ffffULL,",
          "339:      (uuid[0] >>  0) & (uint64_t)0x0000000000000ffffULL,",
          "340:      (uuid[1] >> 48) & (uint64_t)0x0000000000000ffffULL,",
          "341:      (uuid[1] >>  0) & (uint64_t)0x0000fffffffffffffULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "355:         int i;",
          "356:         const char *expn = \"\";",
          "357:         const char *corrupt = \"corrupt: \";",
          "359:         info.i_fd = fd;",
          "360:         info.i_buf = buf;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358:         const cdf_directory_t *root_storage;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "388:                 goto out2;",
          "389:         }",
          "392:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst,",
          "393:      &root_storage)) == -1) {",
          "394:                 expn = \"Cannot read short stream\";",
          "",
          "[Removed Lines]",
          "391:         const cdf_directory_t *root_storage;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vasprintf.c||src/vasprintf.c": [
          "File: src/vasprintf.c -> src/vasprintf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "108: #include \"file.h\"",
          "110: #ifndef lint",
          "114: #include <assert.h>",
          "",
          "[Removed Lines]",
          "111: FILE_RCSID(\"@(#)$File: vasprintf.c,v 1.11 2014/04/17 12:45:50 christos Exp $\")",
          "",
          "[Added Lines]",
          "111: FILE_RCSID(\"@(#)$File: vasprintf.c,v 1.12 2014/05/14 23:09:21 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "633: #ifdef va_copy",
          "634:   va_copy (s.vargs, vargs);",
          "635: #else",
          "637:   __va_copy (s.vargs, vargs);",
          "639:   memcpy (&s.vargs, &vargs, sizeof (s.va_args));",
          "642:   s.maxlen = (size_t)INT_MAX;",
          "",
          "[Removed Lines]",
          "636: #ifdef __va_copy",
          "638: #else",
          "",
          "[Added Lines]",
          "636: # ifdef __va_copy",
          "638: # else",
          "639: #  ifdef WIN32",
          "640:   s.vargs = vargs;",
          "641: #  else",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b71174f3ec9a134361e39948c0fec59b37a2f587",
      "candidate_info": {
        "commit_hash": "b71174f3ec9a134361e39948c0fec59b37a2f587",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/b71174f3ec9a134361e39948c0fec59b37a2f587",
        "files": [
          "src/apprentice.c",
          "src/cdf.c",
          "src/getline.c",
          "src/softmagic.c"
        ],
        "message": "PR/384: remove %z formats that break windows.",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c",
          "src/cdf.c||src/cdf.c",
          "src/getline.c||src/getline.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.214 2014/08/04 06:48:22 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.215 2014/08/30 10:19:54 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "465:  if (action == FILE_LIST) {",
          "466:   for (i = 0; i < MAGIC_SETS; i++) {",
          "468:    apprentice_list(ms->mlist[i], BINTEST);",
          "469:    printf(\"Text patterns:\\n\");",
          "470:    apprentice_list(ms->mlist[i], TEXTTEST);",
          "",
          "[Removed Lines]",
          "467:    printf(\"Set %zu:\\nBinary patterns:\\n\", i);",
          "",
          "[Added Lines]",
          "467:    printf(\"Set %\" SIZE_T_FORMAT \"u:\\nBinary patterns:\\n\",",
          "468:        i);",
          "",
          "---------------"
        ],
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.65 2014/08/07 09:38:35 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.66 2014/08/27 06:59:35 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1156:  for (i = 0; i < __arraycount(h->h_master_sat); i++) {",
          "1157:   if (h->h_master_sat[i] == CDF_SECID_FREE)",
          "1158:    break;",
          "1160:       \"master_sat\", i, h->h_master_sat[i]);",
          "1161:  }",
          "1162: }",
          "",
          "[Removed Lines]",
          "1159:   (void)fprintf(stderr, \"%35.35s[%.3zu] = %d\\n\",",
          "",
          "[Added Lines]",
          "1159:   (void)fprintf(stderr, \"%35.35s[%.3\" SIZE_T_FORMAT \"u] = %d\\n\",",
          "",
          "---------------"
        ],
        "src/getline.c||src/getline.c": [
          "File: src/getline.c -> src/getline.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:  size_t n = 0;",
          "99:  while ((len = getline(&p, &n, stdin)) != -1)",
          "101:  free(p);",
          "102:  return 0;",
          "103: }",
          "",
          "[Removed Lines]",
          "100:   (void)printf(\"%zd %s\", len, p);",
          "",
          "[Added Lines]",
          "100:   (void)printf(\"%\" SIZE_T_FORMAT \"d %s\", len, p);",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.193 2014/09/10 18:41:51 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.194 2014/09/22 18:26:19 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:  const char *ptr = fmtcheck(m->desc, def);",
          "96:  if (ptr == def)",
          "97:   file_magerror(ms,",
          "100:  return ptr;",
          "101: }",
          "102: #else",
          "",
          "[Removed Lines]",
          "98:       \"%s, %zu: format `%s' does not match with `%s'\",",
          "99:       file, line, m->desc, def);",
          "",
          "[Added Lines]",
          "98:       \"%s, %\" SIZE_T_FORMAT \"u: format `%s' does not match\"",
          "99:       \" with `%s'\", file, line, m->desc, def);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1057: private void",
          "1058: mdebug(uint32_t offset, const char *str, size_t len)",
          "1059: {",
          "1061:  file_showstr(stderr, str, len);",
          "1062:  (void) fputc('\\n', stderr);",
          "1063:  (void) fputc('\\n', stderr);",
          "",
          "[Removed Lines]",
          "1060:  (void) fprintf(stderr, \"mget/%zu @%d: \", len, offset);",
          "",
          "[Added Lines]",
          "1060:  (void) fprintf(stderr, \"mget/%\" SIZE_T_FORMAT \"u @%d: \", len, offset);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1207:   return -1;",
          "1209:  if ((ms->flags & MAGIC_DEBUG) != 0) {",
          "1212:   mdebug(offset, (char *)(void *)p, sizeof(union VALUETYPE));",
          "1213: #ifndef COMPILE_ONLY",
          "1214:   file_mdump(m);",
          "",
          "[Removed Lines]",
          "1210:   fprintf(stderr, \"mget(type=%d, flag=%x, offset=%u, o=%zu, \"",
          "1211:       \"nbytes=%zu)\\n\", m->type, m->flag, offset, o, nbytes);",
          "",
          "[Added Lines]",
          "1210:   fprintf(stderr, \"mget(type=%d, flag=%x, offset=%u, o=%\"",
          "1211:       SIZE_T_FORMAT \"u, \" \"nbytes=%\" SIZE_T_FORMAT \"u)\\n\",",
          "1212:       m->type, m->flag, offset, o, nbytes);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1963:        copy = malloc(slen);",
          "1964:        if (copy == NULL)  {",
          "1965:     file_error(ms, errno,",
          "1967:     return -1;",
          "1968:        }",
          "1969:        memcpy(copy, ms->search.s, slen);",
          "",
          "[Removed Lines]",
          "1966:         \"can't allocate %zu bytes\", slen);",
          "",
          "[Added Lines]",
          "1967:         \"can't allocate %\" SIZE_T_FORMAT \"u bytes\",",
          "1968:         slen);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f97486ef5dc3e8735440edc4fc8808c63e1a3ef0",
      "candidate_info": {
        "commit_hash": "f97486ef5dc3e8735440edc4fc8808c63e1a3ef0",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/f97486ef5dc3e8735440edc4fc8808c63e1a3ef0",
        "files": [
          "src/cdf.c"
        ],
        "message": "CVE-2014-0207: Prevent 0 element vectors and vectors longer than the number of properties from accessing random memory.",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.58 2014/05/13 16:41:06 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.59 2014/05/14 23:22:48 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "827:       i, inp[i].pi_id, inp[i].pi_type, q - p, offs));",
          "828:   if (inp[i].pi_type & CDF_VECTOR) {",
          "829:    nelements = CDF_GETUINT32(q, 1);",
          "830:    o = 2;",
          "831:   } else {",
          "832:    nelements = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "830:    if (nelements == 0) {",
          "831:     DPRINTF((\"CDF_VECTOR with nelements == 0\\n\"));",
          "832:     goto out;",
          "833:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "901:    }",
          "902:    DPRINTF((\"nelements = %\" SIZE_T_FORMAT \"u\\n\",",
          "903:        nelements));",
          "905:     uint32_t l = CDF_GETUINT32(q, o);",
          "906:     inp[i].pi_str.s_len = l;",
          "907:     inp[i].pi_str.s_buf = (const char *)",
          "",
          "[Removed Lines]",
          "904:    for (j = 0; j < nelements; j++, i++) {",
          "",
          "[Added Lines]",
          "908:    for (j = 0; j < nelements && i < sh.sh_properties;",
          "909:        j++, i++)",
          "910:    {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d450b4a7d01294a0e706c862bbe8d2ad2a19cbb",
      "candidate_info": {
        "commit_hash": "2d450b4a7d01294a0e706c862bbe8d2ad2a19cbb",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/2d450b4a7d01294a0e706c862bbe8d2ad2a19cbb",
        "files": [
          "src/readcdf.c"
        ],
        "message": "0 is not an error",
        "before_after_code_files": [
          "src/readcdf.c||src/readcdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readcdf.c||src/readcdf.c"
          ],
          "candidate": [
            "src/readcdf.c||src/readcdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readcdf.c||src/readcdf.c": [
          "File: src/readcdf.c -> src/readcdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"file.h\"",
          "28: #ifndef lint",
          "30: #endif",
          "32: #include <assert.h>",
          "",
          "[Removed Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.50 2015/01/02 21:29:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.51 2015/01/11 16:58:25 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362:  int i;",
          "364:  if ((i = cdf_read_user_stream(info, h, sat, ssat, sst,",
          "366:   return i;",
          "367: #ifdef CDF_DEBUG",
          "368:  cdf_dump_catalog(&h, &scn);",
          "",
          "[Removed Lines]",
          "365:      dir, \"Catalog\", scn)) <= 0)",
          "",
          "[Added Lines]",
          "365:      dir, \"Catalog\", scn)) == -1)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b952b8a901da75da1063416f655027528f5d271e",
      "candidate_info": {
        "commit_hash": "b952b8a901da75da1063416f655027528f5d271e",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/b952b8a901da75da1063416f655027528f5d271e",
        "files": [
          "src/cdf.c",
          "src/cdf.h",
          "src/readcdf.c"
        ],
        "message": "recognize encrypted documents.",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c",
          "src/cdf.h||src/cdf.h",
          "src/readcdf.c||src/readcdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c",
            "src/readcdf.c||src/readcdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c",
            "src/readcdf.c||src/readcdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.64 2014/07/24 19:35:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.65 2014/08/07 09:38:35 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "733:      \"\\05SummaryInformation\", scn);",
          "734: }",
          "745: int",
          "746: cdf_read_user_stream(const cdf_info_t *info, const cdf_header_t *h,",
          "747:     const cdf_sat_t *sat, const cdf_sat_t *ssat, const cdf_stream_t *sst,",
          "",
          "[Removed Lines]",
          "736: int",
          "737: cdf_read_catalog(cdf_info_t *info, const cdf_header_t *h,",
          "738:     const cdf_sat_t *sat, const cdf_sat_t *ssat, const cdf_stream_t *sst,",
          "739:     const cdf_dir_t *dir, cdf_stream_t *scn)",
          "740: {",
          "741:  return cdf_read_user_stream(info, h, sat, ssat, sst, dir,",
          "742:      \"Catalog\", scn);",
          "743: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/cdf.h||src/cdf.h": [
          "File: src/cdf.h -> src/cdf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "314: int cdf_read_user_stream(const cdf_info_t *, const cdf_header_t *,",
          "315:     const cdf_sat_t *, const cdf_sat_t *, const cdf_stream_t *,",
          "316:     const cdf_dir_t *, const char *, cdf_stream_t *);",
          "320: int cdf_read_summary_info(const cdf_info_t *, const cdf_header_t *,",
          "321:     const cdf_sat_t *, const cdf_sat_t *, const cdf_stream_t *,",
          "322:     const cdf_dir_t *, cdf_stream_t *);",
          "",
          "[Removed Lines]",
          "317: int cdf_read_catalog(cdf_info_t *, const cdf_header_t *,",
          "318:     const cdf_sat_t *, const cdf_sat_t *, const cdf_stream_t *,",
          "319:     const cdf_dir_t *, cdf_stream_t *);",
          "",
          "[Added Lines]",
          "317: #define cdf_read_catalog(info, header, sat, ssat, stream, dir, scn) \\",
          "318:     cdf_read_user_stream(info, header, sat, ssat, stream, dir, \"Catalog\", \\",
          "319:     scn)",
          "320: #define cdf_read_encrypted_package(info, header, sat, ssat, stream, dir, scn) \\",
          "321:     cdf_read_user_stream(info, header, sat, ssat, stream, dir, \\",
          "322:     \"EncryptedPackage\", scn)",
          "",
          "---------------"
        ],
        "src/readcdf.c||src/readcdf.c": [
          "File: src/readcdf.c -> src/readcdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"file.h\"",
          "28: #ifndef lint",
          "30: #endif",
          "32: #include <assert.h>",
          "",
          "[Removed Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.44 2014/05/14 23:22:48 christos Exp $\")",
          "",
          "[Added Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.45 2014/07/24 19:35:39 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "439:    if ((i = cdf_read_catalog(&info, &h, &sat, &ssat, &sst,",
          "440:        &dir, &scn)) == -1) {",
          "441:     corrupt = expn;",
          "443:     goto out4;",
          "444:    }",
          "445: #ifdef CDF_DEBUG",
          "",
          "[Removed Lines]",
          "442:     expn = \"No summary info\";",
          "",
          "[Added Lines]",
          "442:     if ((i = cdf_read_encrypted_package(&info, &h,",
          "443:         &sat, &ssat, &sst, &dir, &scn)) == -1)",
          "444:      expn = \"No summary info\";",
          "445:     else {",
          "446:      expn = \"Encrypted\";",
          "447:      i = -1;",
          "448:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}