{
  "cve_id": "CVE-2016-3070",
  "cve_desc": "The trace_writeback_dirty_page implementation in include/trace/events/writeback.h in the Linux kernel before 4.4 improperly interacts with mm/migrate.c, which allows local users to cause a denial of service (NULL pointer dereference and system crash) or possibly have unspecified other impact by triggering a certain page move.",
  "repo": "torvalds/linux",
  "patch_hash": "42cb14b110a5698ccf26ce59c4441722605a3743",
  "patch_info": {
    "commit_hash": "42cb14b110a5698ccf26ce59c4441722605a3743",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/42cb14b110a5698ccf26ce59c4441722605a3743",
    "files": [
      "mm/migrate.c"
    ],
    "message": "mm: migrate dirty page without clear_page_dirty_for_io etc\n\nclear_page_dirty_for_io() has accumulated writeback and memcg subtleties\nsince v2.6.16 first introduced page migration; and the set_page_dirty()\nwhich completed its migration of PageDirty, later had to be moderated to\n__set_page_dirty_nobuffers(); then PageSwapBacked had to skip that too.\n\nNo actual problems seen with this procedure recently, but if you look into\nwhat the clear_page_dirty_for_io(page)+set_page_dirty(newpage) is actually\nachieving, it turns out to be nothing more than moving the PageDirty flag,\nand its NR_FILE_DIRTY stat from one zone to another.\n\nIt would be good to avoid a pile of irrelevant decrementations and\nincrementations, and improper event counting, and unnecessary descent of\nthe radix_tree under tree_lock (to set the PAGECACHE_TAG_DIRTY which\nradix_tree_replace_slot() left in place anyway).\n\nDo the NR_FILE_DIRTY movement, like the other stats movements, while\ninterrupts still disabled in migrate_page_move_mapping(); and don't even\nbother if the zone is the same.  Do the PageDirty movement there under\ntree_lock too, where old page is frozen and newpage not yet visible:\nbearing in mind that as soon as newpage becomes visible in radix_tree, an\nun-page-locked set_page_dirty() might interfere (or perhaps that's just\nnot possible: anything doing so should already hold an additional\nreference to the old page, preventing its migration; but play safe).\n\nBut we do still need to transfer PageDirty in migrate_page_copy(), for\nthose who don't go the mapping route through migrate_page_move_mapping().\n\nSigned-off-by: Hugh Dickins <hughd@google.com>\nCc: Christoph Lameter <cl@linux.com>\nCc: \"Kirill A. Shutemov\" <kirill.shutemov@linux.intel.com>\nCc: Rik van Riel <riel@redhat.com>\nCc: Vlastimil Babka <vbabka@suse.cz>\nCc: Davidlohr Bueso <dave@stgolabs.net>\nCc: Oleg Nesterov <oleg@redhat.com>\nCc: Sasha Levin <sasha.levin@oracle.com>\nCc: Dmitry Vyukov <dvyukov@google.com>\nCc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "before_after_code_files": [
      "mm/migrate.c||mm/migrate.c"
    ]
  },
  "patch_diff": {
    "mm/migrate.c||mm/migrate.c": [
      "File: mm/migrate.c -> mm/migrate.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: #include <linux/mempolicy.h>",
      "31: #include <linux/vmalloc.h>",
      "32: #include <linux/security.h>",
      "33: #include <linux/syscalls.h>",
      "34: #include <linux/hugetlb.h>",
      "35: #include <linux/hugetlb_cgroup.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: #include <linux/backing-dev.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "313:   struct buffer_head *head, enum migrate_mode mode,",
      "314:   int extra_count)",
      "315: {",
      "316:  int expected_count = 1 + extra_count;",
      "317:  void **pslot;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "317:  struct zone *oldzone, *newzone;",
      "318:  int dirty;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "331:   return MIGRATEPAGE_SUCCESS;",
      "332:  }",
      "334:  spin_lock_irq(&mapping->tree_lock);",
      "336:  pslot = radix_tree_lookup_slot(&mapping->page_tree,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "337:  oldzone = page_zone(page);",
      "338:  newzone = page_zone(newpage);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "378:   set_page_private(newpage, page_private(page));",
      "379:  }",
      "381:  radix_tree_replace_slot(pslot, newpage);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "388:  dirty = PageDirty(page);",
      "389:  if (dirty) {",
      "390:   ClearPageDirty(page);",
      "391:   SetPageDirty(newpage);",
      "392:  }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "388:  page_unfreeze_refs(page, expected_count - 1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "403:  spin_unlock(&mapping->tree_lock);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "405:  }",
      "408:  return MIGRATEPAGE_SUCCESS;",
      "409: }",
      "",
      "[Removed Lines]",
      "400:  __dec_zone_page_state(page, NR_FILE_PAGES);",
      "401:  __inc_zone_page_state(newpage, NR_FILE_PAGES);",
      "402:  if (!PageSwapCache(page) && PageSwapBacked(page)) {",
      "403:   __dec_zone_page_state(page, NR_SHMEM);",
      "404:   __inc_zone_page_state(newpage, NR_SHMEM);",
      "406:  spin_unlock_irq(&mapping->tree_lock);",
      "",
      "[Added Lines]",
      "416:  if (newzone != oldzone) {",
      "417:   __dec_zone_state(oldzone, NR_FILE_PAGES);",
      "418:   __inc_zone_state(newzone, NR_FILE_PAGES);",
      "419:   if (PageSwapBacked(page) && !PageSwapCache(page)) {",
      "420:    __dec_zone_state(oldzone, NR_SHMEM);",
      "421:    __inc_zone_state(newzone, NR_SHMEM);",
      "422:   }",
      "423:   if (dirty && mapping_cap_account_dirty(mapping)) {",
      "424:    __dec_zone_state(oldzone, NR_FILE_DIRTY);",
      "425:    __inc_zone_state(newzone, NR_FILE_DIRTY);",
      "426:   }",
      "428:  local_irq_enable();",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "524:  if (PageMappedToDisk(page))",
      "525:   SetPageMappedToDisk(newpage);",
      "542:  if (page_is_young(page))",
      "543:   set_page_young(newpage);",
      "",
      "[Removed Lines]",
      "527:  if (PageDirty(page)) {",
      "528:   clear_page_dirty_for_io(page);",
      "536:   if (PageSwapBacked(page))",
      "537:    SetPageDirty(newpage);",
      "538:   else",
      "539:    __set_page_dirty_nobuffers(newpage);",
      "540:   }",
      "",
      "[Added Lines]",
      "550:  if (PageDirty(page))",
      "551:   SetPageDirty(newpage);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "11fb998986a72aa7e997d96d63d52582a01228c5",
      "candidate_info": {
        "commit_hash": "11fb998986a72aa7e997d96d63d52582a01228c5",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/11fb998986a72aa7e997d96d63d52582a01228c5",
        "files": [
          "arch/s390/appldata/appldata_mem.c",
          "arch/tile/mm/pgtable.c",
          "drivers/base/node.c",
          "drivers/staging/android/lowmemorykiller.c",
          "drivers/staging/lustre/lustre/osc/osc_cache.c",
          "fs/fs-writeback.c",
          "fs/fuse/file.c",
          "fs/nfs/internal.h",
          "fs/nfs/write.c",
          "fs/proc/meminfo.c",
          "include/linux/mmzone.h",
          "include/trace/events/writeback.h",
          "mm/filemap.c",
          "mm/huge_memory.c",
          "mm/khugepaged.c",
          "mm/migrate.c",
          "mm/page-writeback.c",
          "mm/page_alloc.c",
          "mm/rmap.c",
          "mm/shmem.c",
          "mm/swap_state.c",
          "mm/util.c",
          "mm/vmscan.c",
          "mm/vmstat.c"
        ],
        "message": "mm: move most file-based accounting to the node\n\nThere are now a number of accounting oddities such as mapped file pages\nbeing accounted for on the node while the total number of file pages are\naccounted on the zone.  This can be coped with to some extent but it's\nconfusing so this patch moves the relevant file-based accounted.  Due to\nthrottling logic in the page allocator for reliable OOM detection, it is\nstill necessary to track dirty and writeback pages on a per-zone basis.\n\n[mgorman@techsingularity.net: fix NR_ZONE_WRITE_PENDING accounting]\n  Link: http://lkml.kernel.org/r/1468404004-5085-5-git-send-email-mgorman@techsingularity.net\nLink: http://lkml.kernel.org/r/1467970510-21195-20-git-send-email-mgorman@techsingularity.net\nSigned-off-by: Mel Gorman <mgorman@techsingularity.net>\nAcked-by: Vlastimil Babka <vbabka@suse.cz>\nAcked-by: Michal Hocko <mhocko@suse.com>\nCc: Hillf Danton <hillf.zj@alibaba-inc.com>\nAcked-by: Johannes Weiner <hannes@cmpxchg.org>\nCc: Joonsoo Kim <iamjoonsoo.kim@lge.com>\nCc: Minchan Kim <minchan@kernel.org>\nCc: Rik van Riel <riel@surriel.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "arch/s390/appldatappldata_mem.c||arch/s390/appldata/appldata_mem.c",
          "arch/tile/mm/pgtable.c||arch/tile/mm/pgtable.c",
          "drivers/base/node.c||drivers/base/node.c",
          "drivers/staging/android/lowmemorykiller.c||drivers/staging/android/lowmemorykiller.c",
          "drivers/staging/lustre/lustre/osc/osc_cache.c||drivers/staging/lustre/lustre/osc/osc_cache.c",
          "fs/fs-writeback.c||fs/fs-writeback.c",
          "fs/fuse/file.c||fs/fuse/file.c",
          "fs/nfs/internal.h||fs/nfs/internal.h",
          "fs/nfs/write.c||fs/nfs/write.c",
          "fs/proc/meminfo.c||fs/proc/meminfo.c",
          "include/linux/mmzone.h||include/linux/mmzone.h",
          "include/trace/events/writeback.h||include/trace/events/writeback.h",
          "mm/filemap.c||mm/filemap.c",
          "mm/huge_memory.c||mm/huge_memory.c",
          "mm/khugepaged.c||mm/khugepaged.c",
          "mm/migrate.c||mm/migrate.c",
          "mm/page-writeback.c||mm/page-writeback.c",
          "mm/page_alloc.c||mm/page_alloc.c",
          "mm/rmap.c||mm/rmap.c",
          "mm/shmem.c||mm/shmem.c",
          "mm/swap_state.c||mm/swap_state.c",
          "mm/util.c||mm/util.c",
          "mm/vmscan.c||mm/vmscan.c",
          "mm/vmstat.c||mm/vmstat.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mm/migrate.c||mm/migrate.c"
          ],
          "candidate": [
            "mm/migrate.c||mm/migrate.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/s390/appldatappldata_mem.c||arch/s390/appldata/appldata_mem.c": [
          "File: arch/s390/appldatappldata_mem.c -> arch/s390/appldata/appldata_mem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:  mem_data->cached    = P2K(global_node_page_state(NR_FILE_PAGES)",
          "",
          "---------------"
        ],
        "arch/tile/mm/pgtable.c||arch/tile/mm/pgtable.c": [
          "File: arch/tile/mm/pgtable.c -> arch/tile/mm/pgtable.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:   global_node_page_state(NR_ACTIVE_FILE)),",
          "50:         (global_node_page_state(NR_INACTIVE_ANON) +",
          "51:   global_node_page_state(NR_INACTIVE_FILE)),",
          "55:         global_page_state(NR_FREE_PAGES),",
          "56:         (global_page_state(NR_SLAB_RECLAIMABLE) +",
          "57:   global_page_state(NR_SLAB_UNRECLAIMABLE)),",
          "58:         global_node_page_state(NR_FILE_MAPPED),",
          "59:         global_page_state(NR_PAGETABLE),",
          "60:         global_page_state(NR_BOUNCE),",
          "62:         get_nr_swap_pages());",
          "64:  for_each_zone(zone) {",
          "",
          "[Removed Lines]",
          "52:         global_page_state(NR_FILE_DIRTY),",
          "53:         global_page_state(NR_WRITEBACK),",
          "54:         global_page_state(NR_UNSTABLE_NFS),",
          "61:         global_page_state(NR_FILE_PAGES),",
          "",
          "[Added Lines]",
          "52:         global_node_page_state(NR_FILE_DIRTY),",
          "53:         global_node_page_state(NR_WRITEBACK),",
          "54:         global_node_page_state(NR_UNSTABLE_NFS),",
          "61:         global_node_page_state(NR_FILE_PAGES),",
          "",
          "---------------"
        ],
        "drivers/base/node.c||drivers/base/node.c": [
          "File: drivers/base/node.c -> drivers/base/node.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:          \"Node %d ShmemPmdMapped: %8lu kB\\n\"",
          "119: #endif",
          "120:    ,",
          "124:          nid, K(node_page_state(pgdat, NR_FILE_MAPPED)),",
          "125:          nid, K(node_page_state(pgdat, NR_ANON_MAPPED)),",
          "126:          nid, K(i.sharedram),",
          "127:          nid, sum_zone_node_page_state(nid, NR_KERNEL_STACK) *",
          "128:     THREAD_SIZE / 1024,",
          "129:          nid, K(sum_zone_node_page_state(nid, NR_PAGETABLE)),",
          "131:          nid, K(sum_zone_node_page_state(nid, NR_BOUNCE)),",
          "133:          nid, K(sum_zone_node_page_state(nid, NR_SLAB_RECLAIMABLE) +",
          "134:     sum_zone_node_page_state(nid, NR_SLAB_UNRECLAIMABLE)),",
          "135:          nid, K(sum_zone_node_page_state(nid, NR_SLAB_RECLAIMABLE)),",
          "136: #ifdef CONFIG_TRANSPARENT_HUGEPAGE",
          "137:          nid, K(sum_zone_node_page_state(nid, NR_SLAB_UNRECLAIMABLE)),",
          "139:            HPAGE_PMD_NR),",
          "141:            HPAGE_PMD_NR),",
          "143:            HPAGE_PMD_NR));",
          "144: #else",
          "145:          nid, K(sum_zone_node_page_state(nid, NR_SLAB_UNRECLAIMABLE)));",
          "",
          "[Removed Lines]",
          "121:          nid, K(sum_zone_node_page_state(nid, NR_FILE_DIRTY)),",
          "122:          nid, K(sum_zone_node_page_state(nid, NR_WRITEBACK)),",
          "123:          nid, K(sum_zone_node_page_state(nid, NR_FILE_PAGES)),",
          "130:          nid, K(sum_zone_node_page_state(nid, NR_UNSTABLE_NFS)),",
          "132:          nid, K(sum_zone_node_page_state(nid, NR_WRITEBACK_TEMP)),",
          "138:          nid, K(sum_zone_node_page_state(nid, NR_ANON_THPS) *",
          "140:          nid, K(sum_zone_node_page_state(nid, NR_SHMEM_THPS) *",
          "142:          nid, K(sum_zone_node_page_state(nid, NR_SHMEM_PMDMAPPED) *",
          "",
          "[Added Lines]",
          "121:          nid, K(node_page_state(pgdat, NR_FILE_DIRTY)),",
          "122:          nid, K(node_page_state(pgdat, NR_WRITEBACK)),",
          "123:          nid, K(node_page_state(pgdat, NR_FILE_PAGES)),",
          "130:          nid, K(node_page_state(pgdat, NR_UNSTABLE_NFS)),",
          "132:          nid, K(node_page_state(pgdat, NR_WRITEBACK_TEMP)),",
          "138:          nid, K(node_page_state(pgdat, NR_ANON_THPS) *",
          "140:          nid, K(node_page_state(pgdat, NR_SHMEM_THPS) *",
          "142:          nid, K(node_page_state(pgdat, NR_SHMEM_PMDMAPPED) *",
          "",
          "---------------"
        ],
        "drivers/staging/android/lowmemorykiller.c||drivers/staging/android/lowmemorykiller.c": [
          "File: drivers/staging/android/lowmemorykiller.c -> drivers/staging/android/lowmemorykiller.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:  short selected_oom_score_adj;",
          "92:  int array_size = ARRAY_SIZE(lowmem_adj);",
          "93:  int other_free = global_page_state(NR_FREE_PAGES) - totalreserve_pages;",
          "96:       total_swapcache_pages();",
          "98:  if (lowmem_adj_size < array_size)",
          "",
          "[Removed Lines]",
          "94:  int other_file = global_page_state(NR_FILE_PAGES) -",
          "95:       global_page_state(NR_SHMEM) -",
          "",
          "[Added Lines]",
          "94:  int other_file = global_node_page_state(NR_FILE_PAGES) -",
          "95:       global_node_page_state(NR_SHMEM) -",
          "",
          "---------------"
        ],
        "drivers/staging/lustre/lustre/osc/osc_cache.c||drivers/staging/lustre/lustre/osc/osc_cache.c": [
          "File: drivers/staging/lustre/lustre/osc/osc_cache.c -> drivers/staging/lustre/lustre/osc/osc_cache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1864:  LASSERT(page_count >= 0);",
          "1866:  for (i = 0; i < page_count; i++)",
          "1869:  atomic_sub(page_count, &cli->cl_cache->ccc_unstable_nr);",
          "1870:  LASSERT(atomic_read(&cli->cl_cache->ccc_unstable_nr) >= 0);",
          "",
          "[Removed Lines]",
          "1867:   dec_zone_page_state(desc->bd_iov[i].kiov_page, NR_UNSTABLE_NFS);",
          "",
          "[Added Lines]",
          "1867:   dec_node_page_state(desc->bd_iov[i].kiov_page,",
          "1868:        NR_UNSTABLE_NFS);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1898:  LASSERT(page_count >= 0);",
          "1900:  for (i = 0; i < page_count; i++)",
          "1903:  LASSERT(atomic_read(&cli->cl_cache->ccc_unstable_nr) >= 0);",
          "1904:  atomic_add(page_count, &cli->cl_cache->ccc_unstable_nr);",
          "",
          "[Removed Lines]",
          "1901:   inc_zone_page_state(desc->bd_iov[i].kiov_page, NR_UNSTABLE_NFS);",
          "",
          "[Added Lines]",
          "1902:   inc_node_page_state(desc->bd_iov[i].kiov_page,",
          "1903:        NR_UNSTABLE_NFS);",
          "",
          "---------------"
        ],
        "fs/fs-writeback.c||fs/fs-writeback.c": [
          "File: fs/fs-writeback.c -> fs/fs-writeback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1808: static unsigned long get_nr_dirty_pages(void)",
          "1809: {",
          "1812:   get_nr_dirty_inodes();",
          "1813: }",
          "",
          "[Removed Lines]",
          "1810:  return global_page_state(NR_FILE_DIRTY) +",
          "1811:   global_page_state(NR_UNSTABLE_NFS) +",
          "",
          "[Added Lines]",
          "1810:  return global_node_page_state(NR_FILE_DIRTY) +",
          "1811:   global_node_page_state(NR_UNSTABLE_NFS) +",
          "",
          "---------------"
        ],
        "fs/fuse/file.c||fs/fuse/file.c": [
          "File: fs/fuse/file.c -> fs/fuse/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1452:  list_del(&req->writepages_entry);",
          "1453:  for (i = 0; i < req->num_pages; i++) {",
          "1454:   dec_wb_stat(&bdi->wb, WB_WRITEBACK);",
          "1456:   wb_writeout_inc(&bdi->wb);",
          "1457:  }",
          "1458:  wake_up(&fi->page_waitq);",
          "",
          "[Removed Lines]",
          "1455:   dec_zone_page_state(req->pages[i], NR_WRITEBACK_TEMP);",
          "",
          "[Added Lines]",
          "1455:   dec_node_page_state(req->pages[i], NR_WRITEBACK_TEMP);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1642:  req->inode = inode;",
          "1644:  inc_wb_stat(&inode_to_bdi(inode)->wb, WB_WRITEBACK);",
          "1647:  spin_lock(&fc->lock);",
          "1648:  list_add(&req->writepages_entry, &fi->writepages);",
          "",
          "[Removed Lines]",
          "1645:  inc_zone_page_state(tmp_page, NR_WRITEBACK_TEMP);",
          "",
          "[Added Lines]",
          "1645:  inc_node_page_state(tmp_page, NR_WRITEBACK_TEMP);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1756:   spin_unlock(&fc->lock);",
          "1758:   dec_wb_stat(&bdi->wb, WB_WRITEBACK);",
          "1760:   wb_writeout_inc(&bdi->wb);",
          "1761:   fuse_writepage_free(fc, new_req);",
          "1762:   fuse_request_free(new_req);",
          "",
          "[Removed Lines]",
          "1759:   dec_zone_page_state(page, NR_WRITEBACK_TEMP);",
          "",
          "[Added Lines]",
          "1759:   dec_node_page_state(page, NR_WRITEBACK_TEMP);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1855:  req->page_descs[req->num_pages].length = PAGE_SIZE;",
          "1857:  inc_wb_stat(&inode_to_bdi(inode)->wb, WB_WRITEBACK);",
          "1860:  err = 0;",
          "1861:  if (is_writeback && fuse_writepage_in_flight(req, page)) {",
          "",
          "[Removed Lines]",
          "1858:  inc_zone_page_state(tmp_page, NR_WRITEBACK_TEMP);",
          "",
          "[Added Lines]",
          "1858:  inc_node_page_state(tmp_page, NR_WRITEBACK_TEMP);",
          "",
          "---------------"
        ],
        "fs/nfs/internal.h||fs/nfs/internal.h": [
          "File: fs/nfs/internal.h -> fs/nfs/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:  if (!cinfo->dreq) {",
          "624:   struct inode *inode = page_file_mapping(page)->host;",
          "627:   inc_wb_stat(&inode_to_bdi(inode)->wb, WB_RECLAIMABLE);",
          "628:   __mark_inode_dirty(inode, I_DIRTY_DATASYNC);",
          "629:  }",
          "",
          "[Removed Lines]",
          "626:   inc_zone_page_state(page, NR_UNSTABLE_NFS);",
          "",
          "[Added Lines]",
          "626:   inc_node_page_state(page, NR_UNSTABLE_NFS);",
          "",
          "---------------"
        ],
        "fs/nfs/write.c||fs/nfs/write.c": [
          "File: fs/nfs/write.c -> fs/nfs/write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "898: static void",
          "899: nfs_clear_page_commit(struct page *page)",
          "900: {",
          "902:  dec_wb_stat(&inode_to_bdi(page_file_mapping(page)->host)->wb,",
          "903:       WB_RECLAIMABLE);",
          "904: }",
          "",
          "[Removed Lines]",
          "901:  dec_zone_page_state(page, NR_UNSTABLE_NFS);",
          "",
          "[Added Lines]",
          "901:  dec_node_page_state(page, NR_UNSTABLE_NFS);",
          "",
          "---------------"
        ],
        "fs/proc/meminfo.c||fs/proc/meminfo.c": [
          "File: fs/proc/meminfo.c -> fs/proc/meminfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:  si_swapinfo(&i);",
          "41:  committed = percpu_counter_read_positive(&vm_committed_as);",
          "44:    total_swapcache_pages() - i.bufferram;",
          "45:  if (cached < 0)",
          "46:   cached = 0;",
          "",
          "[Removed Lines]",
          "43:  cached = global_page_state(NR_FILE_PAGES) -",
          "",
          "[Added Lines]",
          "43:  cached = global_node_page_state(NR_FILE_PAGES) -",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138: #endif",
          "139:   K(i.totalswap),",
          "140:   K(i.freeswap),",
          "143:   K(global_node_page_state(NR_ANON_MAPPED)),",
          "144:   K(global_node_page_state(NR_FILE_MAPPED)),",
          "145:   K(i.sharedram),",
          "",
          "[Removed Lines]",
          "141:   K(global_page_state(NR_FILE_DIRTY)),",
          "142:   K(global_page_state(NR_WRITEBACK)),",
          "",
          "[Added Lines]",
          "141:   K(global_node_page_state(NR_FILE_DIRTY)),",
          "142:   K(global_node_page_state(NR_WRITEBACK)),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "152: #ifdef CONFIG_QUICKLIST",
          "153:   K(quicklist_total_size()),",
          "154: #endif",
          "156:   K(global_page_state(NR_BOUNCE)),",
          "158:   K(vm_commit_limit()),",
          "159:   K(committed),",
          "160:   (unsigned long)VMALLOC_TOTAL >> 10,",
          "",
          "[Removed Lines]",
          "155:   K(global_page_state(NR_UNSTABLE_NFS)),",
          "157:   K(global_page_state(NR_WRITEBACK_TEMP)),",
          "",
          "[Added Lines]",
          "155:   K(global_node_page_state(NR_UNSTABLE_NFS)),",
          "157:   K(global_node_page_state(NR_WRITEBACK_TEMP)),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "164:   , atomic_long_read(&num_poisoned_pages) << (PAGE_SHIFT - 10)",
          "165: #endif",
          "166: #ifdef CONFIG_TRANSPARENT_HUGEPAGE",
          "170: #endif",
          "171: #ifdef CONFIG_CMA",
          "172:   , K(totalcma_pages)",
          "",
          "[Removed Lines]",
          "167:   , K(global_page_state(NR_ANON_THPS) * HPAGE_PMD_NR)",
          "168:   , K(global_page_state(NR_SHMEM_THPS) * HPAGE_PMD_NR)",
          "169:   , K(global_page_state(NR_SHMEM_PMDMAPPED) * HPAGE_PMD_NR)",
          "",
          "[Added Lines]",
          "167:   , K(global_node_page_state(NR_ANON_THPS) * HPAGE_PMD_NR)",
          "168:   , K(global_node_page_state(NR_SHMEM_THPS) * HPAGE_PMD_NR)",
          "169:   , K(global_node_page_state(NR_SHMEM_PMDMAPPED) * HPAGE_PMD_NR)",
          "",
          "---------------"
        ],
        "include/linux/mmzone.h||include/linux/mmzone.h": [
          "File: include/linux/mmzone.h -> include/linux/mmzone.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:  NR_ZONE_LRU_ANON = NR_ZONE_LRU_BASE,",
          "116:  NR_ZONE_LRU_FILE,",
          "121:  NR_SLAB_RECLAIMABLE,",
          "122:  NR_SLAB_UNRECLAIMABLE,",
          "124:  NR_KERNEL_STACK,",
          "127:  NR_BOUNCE,",
          "128:  NR_VMSCAN_WRITE,",
          "134: #if IS_ENABLED(CONFIG_ZSMALLOC)",
          "",
          "[Removed Lines]",
          "118:  NR_FILE_PAGES,",
          "119:  NR_FILE_DIRTY,",
          "120:  NR_WRITEBACK,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144: #endif",
          "148:  NR_FREE_CMA_PAGES,",
          "149:  NR_VM_ZONE_STAT_ITEMS };",
          "",
          "[Removed Lines]",
          "145:  NR_ANON_THPS,",
          "146:  NR_SHMEM_THPS,",
          "147:  NR_SHMEM_PMDMAPPED,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "165:  NR_FILE_MAPPED, /* pagecache pages mapped into pagetables.",
          "167:  NR_VM_NODE_STAT_ITEMS",
          "168: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:  NR_FILE_PAGES,",
          "160:  NR_FILE_DIRTY,",
          "161:  NR_WRITEBACK,",
          "164:  NR_SHMEM_THPS,",
          "165:  NR_SHMEM_PMDMAPPED,",
          "166:  NR_ANON_THPS,",
          "",
          "---------------"
        ],
        "include/trace/events/writeback.h||include/trace/events/writeback.h": [
          "File: include/trace/events/writeback.h -> include/trace/events/writeback.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "412:  ),",
          "414:  TP_fast_assign(",
          "418:   __entry->nr_dirtied = global_page_state(NR_DIRTIED);",
          "419:   __entry->nr_written = global_page_state(NR_WRITTEN);",
          "420:   __entry->background_thresh = background_thresh;",
          "",
          "[Removed Lines]",
          "415:   __entry->nr_dirty = global_page_state(NR_FILE_DIRTY);",
          "416:   __entry->nr_writeback = global_page_state(NR_WRITEBACK);",
          "417:   __entry->nr_unstable = global_page_state(NR_UNSTABLE_NFS);",
          "",
          "[Added Lines]",
          "415:   __entry->nr_dirty = global_node_page_state(NR_FILE_DIRTY);",
          "416:   __entry->nr_writeback = global_node_page_state(NR_WRITEBACK);",
          "417:   __entry->nr_unstable = global_node_page_state(NR_UNSTABLE_NFS);",
          "",
          "---------------"
        ],
        "mm/filemap.c||mm/filemap.c": [
          "File: mm/filemap.c -> mm/filemap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:  if (!PageHuge(page))",
          "222:  if (PageSwapBacked(page)) {",
          "224:   if (PageTransHuge(page))",
          "226:  } else {",
          "227:   VM_BUG_ON_PAGE(PageTransHuge(page) && !PageHuge(page), page);",
          "228:  }",
          "",
          "[Removed Lines]",
          "221:   __mod_zone_page_state(page_zone(page), NR_FILE_PAGES, -nr);",
          "223:   __mod_zone_page_state(page_zone(page), NR_SHMEM, -nr);",
          "225:    __dec_zone_page_state(page, NR_SHMEM_THPS);",
          "",
          "[Added Lines]",
          "221:   __mod_node_page_state(page_pgdat(page), NR_FILE_PAGES, -nr);",
          "223:   __mod_node_page_state(page_pgdat(page), NR_SHMEM, -nr);",
          "225:    __dec_node_page_state(page, NR_SHMEM_THPS);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "570:   if (!PageHuge(new))",
          "572:   if (PageSwapBacked(new))",
          "574:   spin_unlock_irqrestore(&mapping->tree_lock, flags);",
          "575:   mem_cgroup_migrate(old, new);",
          "576:   radix_tree_preload_end();",
          "",
          "[Removed Lines]",
          "571:    __inc_zone_page_state(new, NR_FILE_PAGES);",
          "573:    __inc_zone_page_state(new, NR_SHMEM);",
          "",
          "[Added Lines]",
          "571:    __inc_node_page_state(new, NR_FILE_PAGES);",
          "573:    __inc_node_page_state(new, NR_SHMEM);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "679:  if (!huge)",
          "681:  spin_unlock_irq(&mapping->tree_lock);",
          "682:  if (!huge)",
          "683:   mem_cgroup_commit_charge(page, memcg, false, false);",
          "",
          "[Removed Lines]",
          "680:   __inc_zone_page_state(page, NR_FILE_PAGES);",
          "",
          "[Added Lines]",
          "680:   __inc_node_page_state(page, NR_FILE_PAGES);",
          "",
          "---------------"
        ],
        "mm/huge_memory.c||mm/huge_memory.c": [
          "File: mm/huge_memory.c -> mm/huge_memory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1587:  if (atomic_add_negative(-1, compound_mapcount_ptr(page))) {",
          "1590:   if (TestClearPageDoubleMap(page)) {",
          "1592:    for (i = 0; i < HPAGE_PMD_NR; i++)",
          "",
          "[Removed Lines]",
          "1589:   __dec_zone_page_state(page, NR_ANON_THPS);",
          "",
          "[Added Lines]",
          "1589:   __dec_node_page_state(page, NR_ANON_THPS);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2061:    list_del(page_deferred_list(head));",
          "2062:   }",
          "2063:   if (mapping)",
          "2065:   spin_unlock(&pgdata->split_queue_lock);",
          "2066:   __split_huge_page(page, list, flags);",
          "2067:   ret = 0;",
          "",
          "[Removed Lines]",
          "2064:    __dec_zone_page_state(page, NR_SHMEM_THPS);",
          "",
          "[Added Lines]",
          "2064:    __dec_node_page_state(page, NR_SHMEM_THPS);",
          "",
          "---------------"
        ],
        "mm/khugepaged.c||mm/khugepaged.c": [
          "File: mm/khugepaged.c -> mm/khugepaged.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1483:   }",
          "1485:   local_irq_save(flags);",
          "1487:   if (nr_none) {",
          "1490:   }",
          "1491:   local_irq_restore(flags);",
          "",
          "[Removed Lines]",
          "1486:   __inc_zone_page_state(new_page, NR_SHMEM_THPS);",
          "1488:    __mod_zone_page_state(zone, NR_FILE_PAGES, nr_none);",
          "1489:    __mod_zone_page_state(zone, NR_SHMEM, nr_none);",
          "",
          "[Added Lines]",
          "1486:   __inc_node_page_state(new_page, NR_SHMEM_THPS);",
          "1488:    __mod_node_page_state(zone->zone_pgdat, NR_FILE_PAGES, nr_none);",
          "1489:    __mod_node_page_state(zone->zone_pgdat, NR_SHMEM, nr_none);",
          "",
          "---------------"
        ],
        "mm/migrate.c||mm/migrate.c": [
          "File: mm/migrate.c -> mm/migrate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "507:  if (newzone != oldzone) {",
          "510:   if (PageSwapBacked(page) && !PageSwapCache(page)) {",
          "513:   }",
          "514:   if (dirty && mapping_cap_account_dirty(mapping)) {",
          "517:   }",
          "518:  }",
          "519:  local_irq_enable();",
          "",
          "[Removed Lines]",
          "508:   __dec_zone_state(oldzone, NR_FILE_PAGES);",
          "509:   __inc_zone_state(newzone, NR_FILE_PAGES);",
          "511:    __dec_zone_state(oldzone, NR_SHMEM);",
          "512:    __inc_zone_state(newzone, NR_SHMEM);",
          "515:    __dec_zone_state(oldzone, NR_FILE_DIRTY);",
          "516:    __inc_zone_state(newzone, NR_FILE_DIRTY);",
          "",
          "[Added Lines]",
          "508:   __dec_node_state(oldzone->zone_pgdat, NR_FILE_PAGES);",
          "509:   __inc_node_state(newzone->zone_pgdat, NR_FILE_PAGES);",
          "511:    __dec_node_state(oldzone->zone_pgdat, NR_SHMEM);",
          "512:    __inc_node_state(newzone->zone_pgdat, NR_SHMEM);",
          "515:    __dec_node_state(oldzone->zone_pgdat, NR_FILE_DIRTY);",
          "516:    __dec_zone_state(oldzone, NR_ZONE_WRITE_PENDING);",
          "517:    __inc_node_state(newzone->zone_pgdat, NR_FILE_DIRTY);",
          "518:    __inc_zone_state(newzone, NR_ZONE_WRITE_PENDING);",
          "",
          "---------------"
        ],
        "mm/page-writeback.c||mm/page-writeback.c": [
          "File: mm/page-writeback.c -> mm/page-writeback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "499: bool node_dirty_ok(struct pglist_data *pgdat)",
          "500: {",
          "502:  unsigned long limit = node_dirty_limit(pgdat);",
          "503:  unsigned long nr_pages = 0;",
          "516:  return nr_pages <= limit;",
          "517: }",
          "",
          "[Removed Lines]",
          "501:  int z;",
          "505:  for (z = 0; z < MAX_NR_ZONES; z++) {",
          "506:   struct zone *zone = pgdat->node_zones + z;",
          "508:   if (!populated_zone(zone))",
          "509:    continue;",
          "511:   nr_pages += zone_page_state(zone, NR_FILE_DIRTY);",
          "512:   nr_pages += zone_page_state(zone, NR_UNSTABLE_NFS);",
          "513:   nr_pages += zone_page_state(zone, NR_WRITEBACK);",
          "514:  }",
          "",
          "[Added Lines]",
          "504:  nr_pages += node_page_state(pgdat, NR_FILE_DIRTY);",
          "505:  nr_pages += node_page_state(pgdat, NR_UNSTABLE_NFS);",
          "506:  nr_pages += node_page_state(pgdat, NR_WRITEBACK);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1606:   gdtc->avail = global_dirtyable_memory();",
          "1609:   domain_dirty_limits(gdtc);",
          "",
          "[Removed Lines]",
          "1604:   nr_reclaimable = global_page_state(NR_FILE_DIRTY) +",
          "1605:      global_page_state(NR_UNSTABLE_NFS);",
          "1607:   gdtc->dirty = nr_reclaimable + global_page_state(NR_WRITEBACK);",
          "",
          "[Added Lines]",
          "1596:   nr_reclaimable = global_node_page_state(NR_FILE_DIRTY) +",
          "1597:      global_node_page_state(NR_UNSTABLE_NFS);",
          "1599:   gdtc->dirty = nr_reclaimable + global_node_page_state(NR_WRITEBACK);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1943:  gdtc->avail = global_dirtyable_memory();",
          "1946:  domain_dirty_limits(gdtc);",
          "1948:  if (gdtc->dirty > gdtc->bg_thresh)",
          "",
          "[Removed Lines]",
          "1944:  gdtc->dirty = global_page_state(NR_FILE_DIRTY) +",
          "1945:         global_page_state(NR_UNSTABLE_NFS);",
          "",
          "[Added Lines]",
          "1936:  gdtc->dirty = global_node_page_state(NR_FILE_DIRTY) +",
          "1937:         global_node_page_state(NR_UNSTABLE_NFS);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1991:                          break;",
          "1992:                 congestion_wait(BLK_RW_ASYNC, HZ/10);",
          "",
          "[Removed Lines]",
          "1989:                 if (global_page_state(NR_UNSTABLE_NFS) +",
          "1990:    global_page_state(NR_WRITEBACK) <= dirty_thresh)",
          "",
          "[Added Lines]",
          "1981:                 if (global_node_page_state(NR_UNSTABLE_NFS) +",
          "1982:    global_node_page_state(NR_WRITEBACK) <= dirty_thresh)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2015: void laptop_mode_timer_fn(unsigned long data)",
          "2016: {",
          "2017:  struct request_queue *q = (struct request_queue *)data;",
          "2020:  struct bdi_writeback *wb;",
          "",
          "[Removed Lines]",
          "2018:  int nr_pages = global_page_state(NR_FILE_DIRTY) +",
          "2019:   global_page_state(NR_UNSTABLE_NFS);",
          "",
          "[Added Lines]",
          "2010:  int nr_pages = global_node_page_state(NR_FILE_DIRTY) +",
          "2011:   global_node_page_state(NR_UNSTABLE_NFS);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2467:   wb = inode_to_wb(inode);",
          "2469:   mem_cgroup_inc_page_stat(page, MEM_CGROUP_STAT_DIRTY);",
          "2471:   __inc_zone_page_state(page, NR_DIRTIED);",
          "2472:   __inc_wb_stat(wb, WB_RECLAIMABLE);",
          "2473:   __inc_wb_stat(wb, WB_DIRTIED);",
          "",
          "[Removed Lines]",
          "2470:   __inc_zone_page_state(page, NR_FILE_DIRTY);",
          "",
          "[Added Lines]",
          "2462:   __inc_node_page_state(page, NR_FILE_DIRTY);",
          "2463:   __inc_zone_page_state(page, NR_ZONE_WRITE_PENDING);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2488: {",
          "2489:  if (mapping_cap_account_dirty(mapping)) {",
          "2490:   mem_cgroup_dec_page_stat(page, MEM_CGROUP_STAT_DIRTY);",
          "2492:   dec_wb_stat(wb, WB_RECLAIMABLE);",
          "2493:   task_io_account_cancelled_write(PAGE_SIZE);",
          "2494:  }",
          "",
          "[Removed Lines]",
          "2491:   dec_zone_page_state(page, NR_FILE_DIRTY);",
          "",
          "[Added Lines]",
          "2484:   dec_node_page_state(page, NR_FILE_DIRTY);",
          "2485:   dec_zone_page_state(page, NR_ZONE_WRITE_PENDING);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2744:   wb = unlocked_inode_to_wb_begin(inode, &locked);",
          "2745:   if (TestClearPageDirty(page)) {",
          "2746:    mem_cgroup_dec_page_stat(page, MEM_CGROUP_STAT_DIRTY);",
          "2748:    dec_wb_stat(wb, WB_RECLAIMABLE);",
          "2749:    ret = 1;",
          "2750:   }",
          "",
          "[Removed Lines]",
          "2747:    dec_zone_page_state(page, NR_FILE_DIRTY);",
          "",
          "[Added Lines]",
          "2741:    dec_node_page_state(page, NR_FILE_DIRTY);",
          "2742:    dec_zone_page_state(page, NR_ZONE_WRITE_PENDING);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2790:  }",
          "2791:  if (ret) {",
          "2792:   mem_cgroup_dec_page_stat(page, MEM_CGROUP_STAT_WRITEBACK);",
          "2794:   inc_zone_page_state(page, NR_WRITTEN);",
          "2795:  }",
          "2796:  unlock_page_memcg(page);",
          "",
          "[Removed Lines]",
          "2793:   dec_zone_page_state(page, NR_WRITEBACK);",
          "",
          "[Added Lines]",
          "2788:   dec_node_page_state(page, NR_WRITEBACK);",
          "2789:   dec_zone_page_state(page, NR_ZONE_WRITE_PENDING);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2844:  }",
          "2845:  if (!ret) {",
          "2846:   mem_cgroup_inc_page_stat(page, MEM_CGROUP_STAT_WRITEBACK);",
          "2848:  }",
          "2849:  unlock_page_memcg(page);",
          "2850:  return ret;",
          "",
          "[Removed Lines]",
          "2847:   inc_zone_page_state(page, NR_WRITEBACK);",
          "",
          "[Added Lines]",
          "2843:   inc_node_page_state(page, NR_WRITEBACK);",
          "2844:   inc_zone_page_state(page, NR_ZONE_WRITE_PENDING);",
          "",
          "---------------"
        ],
        "mm/page_alloc.c||mm/page_alloc.c": [
          "File: mm/page_alloc.c -> mm/page_alloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3494:    if (!did_some_progress) {",
          "3503:      congestion_wait(BLK_RW_ASYNC, HZ/10);",
          "3504:      return true;",
          "3505:     }",
          "",
          "[Removed Lines]",
          "3495:     unsigned long writeback;",
          "3496:     unsigned long dirty;",
          "3498:     writeback = zone_page_state_snapshot(zone,",
          "3499:              NR_WRITEBACK);",
          "3500:     dirty = zone_page_state_snapshot(zone, NR_FILE_DIRTY);",
          "3502:     if (2*(writeback + dirty) > reclaimable) {",
          "",
          "[Added Lines]",
          "3495:     unsigned long write_pending;",
          "3497:     write_pending = zone_page_state_snapshot(zone,",
          "3498:        NR_ZONE_WRITE_PENDING);",
          "3500:     if (2 * write_pending > reclaimable) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4175: void si_meminfo(struct sysinfo *val)",
          "4176: {",
          "4177:  val->totalram = totalram_pages;",
          "4179:  val->freeram = global_page_state(NR_FREE_PAGES);",
          "4180:  val->bufferram = nr_blockdev_pages();",
          "4181:  val->totalhigh = totalhigh_pages;",
          "",
          "[Removed Lines]",
          "4178:  val->sharedram = global_page_state(NR_SHMEM);",
          "",
          "[Added Lines]",
          "4176:  val->sharedram = global_node_page_state(NR_SHMEM);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4197:  for (zone_type = 0; zone_type < MAX_NR_ZONES; zone_type++)",
          "4198:   managed_pages += pgdat->node_zones[zone_type].managed_pages;",
          "4199:  val->totalram = managed_pages;",
          "4201:  val->freeram = sum_zone_node_page_state(nid, NR_FREE_PAGES);",
          "4202: #ifdef CONFIG_HIGHMEM",
          "4203:  for (zone_type = 0; zone_type < MAX_NR_ZONES; zone_type++) {",
          "",
          "[Removed Lines]",
          "4200:  val->sharedram = sum_zone_node_page_state(nid, NR_SHMEM);",
          "",
          "[Added Lines]",
          "4198:  val->sharedram = node_page_state(pgdat, NR_SHMEM);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4296:   \" unevictable:%lu dirty:%lu writeback:%lu unstable:%lu\\n\"",
          "4297:   \" slab_reclaimable:%lu slab_unreclaimable:%lu\\n\"",
          "4298:   \" mapped:%lu shmem:%lu pagetables:%lu bounce:%lu\\n\"",
          "4302:   \" free:%lu free_pcp:%lu free_cma:%lu\\n\",",
          "4303:   global_node_page_state(NR_ACTIVE_ANON),",
          "4304:   global_node_page_state(NR_INACTIVE_ANON),",
          "",
          "[Removed Lines]",
          "4299: #ifdef CONFIG_TRANSPARENT_HUGEPAGE",
          "4300:   \" anon_thp: %lu shmem_thp: %lu shmem_pmdmapped: %lu\\n\"",
          "4301: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4307:   global_node_page_state(NR_INACTIVE_FILE),",
          "4308:   global_node_page_state(NR_ISOLATED_FILE),",
          "4309:   global_node_page_state(NR_UNEVICTABLE),",
          "4313:   global_page_state(NR_SLAB_RECLAIMABLE),",
          "4314:   global_page_state(NR_SLAB_UNRECLAIMABLE),",
          "4315:   global_node_page_state(NR_FILE_MAPPED),",
          "4317:   global_page_state(NR_PAGETABLE),",
          "4318:   global_page_state(NR_BOUNCE),",
          "4324:   global_page_state(NR_FREE_PAGES),",
          "4325:   free_pcp,",
          "4326:   global_page_state(NR_FREE_CMA_PAGES));",
          "",
          "[Removed Lines]",
          "4310:   global_page_state(NR_FILE_DIRTY),",
          "4311:   global_page_state(NR_WRITEBACK),",
          "4312:   global_page_state(NR_UNSTABLE_NFS),",
          "4316:   global_page_state(NR_SHMEM),",
          "4319: #ifdef CONFIG_TRANSPARENT_HUGEPAGE",
          "4320:   global_page_state(NR_ANON_THPS) * HPAGE_PMD_NR,",
          "4321:   global_page_state(NR_SHMEM_THPS) * HPAGE_PMD_NR,",
          "4322:   global_page_state(NR_SHMEM_PMDMAPPED) * HPAGE_PMD_NR,",
          "4323: #endif",
          "",
          "[Added Lines]",
          "4305:   global_node_page_state(NR_FILE_DIRTY),",
          "4306:   global_node_page_state(NR_WRITEBACK),",
          "4307:   global_node_page_state(NR_UNSTABLE_NFS),",
          "4311:   global_node_page_state(NR_SHMEM),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4335:    \" isolated(anon):%lukB\"",
          "4336:    \" isolated(file):%lukB\"",
          "4337:    \" mapped:%lukB\"",
          "4338:    \" all_unreclaimable? %s\"",
          "4339:    \"\\n\",",
          "4340:    pgdat->node_id,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4328:    \" dirty:%lukB\"",
          "4329:    \" writeback:%lukB\"",
          "4330:    \" shmem:%lukB\"",
          "4331: #ifdef CONFIG_TRANSPARENT_HUGEPAGE",
          "4332:    \" shmem_thp: %lukB\"",
          "4333:    \" shmem_pmdmapped: %lukB\"",
          "4334:    \" anon_thp: %lukB\"",
          "4335: #endif",
          "4336:    \" writeback_tmp:%lukB\"",
          "4337:    \" unstable:%lukB\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4346:    K(node_page_state(pgdat, NR_ISOLATED_ANON)),",
          "4347:    K(node_page_state(pgdat, NR_ISOLATED_FILE)),",
          "4348:    K(node_page_state(pgdat, NR_FILE_MAPPED)),",
          "4349:    !pgdat_reclaimable(pgdat) ? \"yes\" : \"no\");",
          "4350:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4349:    K(node_page_state(pgdat, NR_FILE_DIRTY)),",
          "4350:    K(node_page_state(pgdat, NR_WRITEBACK)),",
          "4351: #ifdef CONFIG_TRANSPARENT_HUGEPAGE",
          "4352:    K(node_page_state(pgdat, NR_SHMEM_THPS) * HPAGE_PMD_NR),",
          "4353:    K(node_page_state(pgdat, NR_SHMEM_PMDMAPPED)",
          "4355:    K(node_page_state(pgdat, NR_ANON_THPS) * HPAGE_PMD_NR),",
          "4356: #endif",
          "4357:    K(node_page_state(pgdat, NR_SHMEM)),",
          "4358:    K(node_page_state(pgdat, NR_WRITEBACK_TEMP)),",
          "4359:    K(node_page_state(pgdat, NR_UNSTABLE_NFS)),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4368:    \" present:%lukB\"",
          "4369:    \" managed:%lukB\"",
          "4370:    \" mlocked:%lukB\"",
          "4379:    \" slab_reclaimable:%lukB\"",
          "4380:    \" slab_unreclaimable:%lukB\"",
          "4381:    \" kernel_stack:%lukB\"",
          "4382:    \" pagetables:%lukB\"",
          "4384:    \" bounce:%lukB\"",
          "4385:    \" free_pcp:%lukB\"",
          "4386:    \" local_pcp:%ukB\"",
          "4387:    \" free_cma:%lukB\"",
          "4389:    \" node_pages_scanned:%lu\"",
          "4390:    \"\\n\",",
          "4391:    zone->name,",
          "",
          "[Removed Lines]",
          "4371:    \" dirty:%lukB\"",
          "4372:    \" writeback:%lukB\"",
          "4373:    \" shmem:%lukB\"",
          "4374: #ifdef CONFIG_TRANSPARENT_HUGEPAGE",
          "4375:    \" shmem_thp: %lukB\"",
          "4376:    \" shmem_pmdmapped: %lukB\"",
          "4377:    \" anon_thp: %lukB\"",
          "4378: #endif",
          "4383:    \" unstable:%lukB\"",
          "4388:    \" writeback_tmp:%lukB\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4396:    K(zone->present_pages),",
          "4397:    K(zone->managed_pages),",
          "4398:    K(zone_page_state(zone, NR_MLOCK)),",
          "4408:    K(zone_page_state(zone, NR_SLAB_RECLAIMABLE)),",
          "4409:    K(zone_page_state(zone, NR_SLAB_UNRECLAIMABLE)),",
          "4410:    zone_page_state(zone, NR_KERNEL_STACK) *",
          "4411:     THREAD_SIZE / 1024,",
          "4412:    K(zone_page_state(zone, NR_PAGETABLE)),",
          "4414:    K(zone_page_state(zone, NR_BOUNCE)),",
          "4415:    K(free_pcp),",
          "4416:    K(this_cpu_read(zone->pageset->pcp.count)),",
          "4417:    K(zone_page_state(zone, NR_FREE_CMA_PAGES)),",
          "4419:    K(node_page_state(zone->zone_pgdat, NR_PAGES_SCANNED)));",
          "4420:   printk(\"lowmem_reserve[]:\");",
          "4421:   for (i = 0; i < MAX_NR_ZONES; i++)",
          "",
          "[Removed Lines]",
          "4399:    K(zone_page_state(zone, NR_FILE_DIRTY)),",
          "4400:    K(zone_page_state(zone, NR_WRITEBACK)),",
          "4401:    K(zone_page_state(zone, NR_SHMEM)),",
          "4402: #ifdef CONFIG_TRANSPARENT_HUGEPAGE",
          "4403:    K(zone_page_state(zone, NR_SHMEM_THPS) * HPAGE_PMD_NR),",
          "4404:    K(zone_page_state(zone, NR_SHMEM_PMDMAPPED)",
          "4406:    K(zone_page_state(zone, NR_ANON_THPS) * HPAGE_PMD_NR),",
          "4407: #endif",
          "4413:    K(zone_page_state(zone, NR_UNSTABLE_NFS)),",
          "4418:    K(zone_page_state(zone, NR_WRITEBACK_TEMP)),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4459:  hugetlb_show_meminfo();",
          "4463:  show_swap_cache_info();",
          "4464: }",
          "",
          "[Removed Lines]",
          "4461:  printk(\"%ld total pagecache pages\\n\", global_page_state(NR_FILE_PAGES));",
          "",
          "[Added Lines]",
          "4451:  printk(\"%ld total pagecache pages\\n\", global_node_page_state(NR_FILE_PAGES));",
          "",
          "---------------"
        ],
        "mm/rmap.c||mm/rmap.c": [
          "File: mm/rmap.c -> mm/rmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1215:   if (compound)",
          "1217:   __mod_node_page_state(page_pgdat(page), NR_ANON_MAPPED, nr);",
          "1218:  }",
          "1219:  if (unlikely(PageKsm(page)))",
          "",
          "[Removed Lines]",
          "1216:    __inc_zone_page_state(page, NR_ANON_THPS);",
          "",
          "[Added Lines]",
          "1216:    __inc_node_page_state(page, NR_ANON_THPS);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1251:   VM_BUG_ON_PAGE(!PageTransHuge(page), page);",
          "1253:   atomic_set(compound_mapcount_ptr(page), 0);",
          "1255:  } else {",
          "1257:   VM_BUG_ON_PAGE(PageTransCompound(page), page);",
          "",
          "[Removed Lines]",
          "1254:   __inc_zone_page_state(page, NR_ANON_THPS);",
          "",
          "[Added Lines]",
          "1254:   __inc_node_page_state(page, NR_ANON_THPS);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1282:   if (!atomic_inc_and_test(compound_mapcount_ptr(page)))",
          "1283:    goto out;",
          "1284:   VM_BUG_ON_PAGE(!PageSwapBacked(page), page);",
          "1286:  } else {",
          "1287:   if (PageTransCompound(page)) {",
          "1288:    VM_BUG_ON_PAGE(!PageLocked(page), page);",
          "",
          "[Removed Lines]",
          "1285:   __inc_zone_page_state(page, NR_SHMEM_PMDMAPPED);",
          "",
          "[Added Lines]",
          "1285:   __inc_node_page_state(page, NR_SHMEM_PMDMAPPED);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1322:   if (!atomic_add_negative(-1, compound_mapcount_ptr(page)))",
          "1323:    goto out;",
          "1324:   VM_BUG_ON_PAGE(!PageSwapBacked(page), page);",
          "1326:  } else {",
          "1327:   if (!atomic_add_negative(-1, &page->_mapcount))",
          "1328:    goto out;",
          "",
          "[Removed Lines]",
          "1325:   __dec_zone_page_state(page, NR_SHMEM_PMDMAPPED);",
          "",
          "[Added Lines]",
          "1325:   __dec_node_page_state(page, NR_SHMEM_PMDMAPPED);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1356:  if (!IS_ENABLED(CONFIG_TRANSPARENT_HUGEPAGE))",
          "1357:   return;",
          "1361:  if (TestClearPageDoubleMap(page)) {",
          "",
          "[Removed Lines]",
          "1359:  __dec_zone_page_state(page, NR_ANON_THPS);",
          "",
          "[Added Lines]",
          "1359:  __dec_node_page_state(page, NR_ANON_THPS);",
          "",
          "---------------"
        ],
        "mm/shmem.c||mm/shmem.c": [
          "File: mm/shmem.c -> mm/shmem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "575:  if (!error) {",
          "576:   mapping->nrpages += nr;",
          "577:   if (PageTransHuge(page))",
          "581:   spin_unlock_irq(&mapping->tree_lock);",
          "582:  } else {",
          "583:   page->mapping = NULL;",
          "",
          "[Removed Lines]",
          "578:    __inc_zone_page_state(page, NR_SHMEM_THPS);",
          "579:   __mod_zone_page_state(page_zone(page), NR_FILE_PAGES, nr);",
          "580:   __mod_zone_page_state(page_zone(page), NR_SHMEM, nr);",
          "",
          "[Added Lines]",
          "578:    __inc_node_page_state(page, NR_SHMEM_THPS);",
          "579:   __mod_node_page_state(page_pgdat(page), NR_FILE_PAGES, nr);",
          "580:   __mod_node_page_state(page_pgdat(page), NR_SHMEM, nr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "601:  error = shmem_radix_tree_replace(mapping, page->index, page, radswap);",
          "602:  page->mapping = NULL;",
          "603:  mapping->nrpages--;",
          "606:  spin_unlock_irq(&mapping->tree_lock);",
          "607:  put_page(page);",
          "608:  BUG_ON(error);",
          "",
          "[Removed Lines]",
          "604:  __dec_zone_page_state(page, NR_FILE_PAGES);",
          "605:  __dec_zone_page_state(page, NR_SHMEM);",
          "",
          "[Added Lines]",
          "604:  __dec_node_page_state(page, NR_FILE_PAGES);",
          "605:  __dec_node_page_state(page, NR_SHMEM);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1493:  error = shmem_radix_tree_replace(swap_mapping, swap_index, oldpage,",
          "1494:            newpage);",
          "1495:  if (!error) {",
          "1498:  }",
          "1499:  spin_unlock_irq(&swap_mapping->tree_lock);",
          "",
          "[Removed Lines]",
          "1496:   __inc_zone_page_state(newpage, NR_FILE_PAGES);",
          "1497:   __dec_zone_page_state(oldpage, NR_FILE_PAGES);",
          "",
          "[Added Lines]",
          "1496:   __inc_node_page_state(newpage, NR_FILE_PAGES);",
          "1497:   __dec_node_page_state(oldpage, NR_FILE_PAGES);",
          "",
          "---------------"
        ],
        "mm/swap_state.c||mm/swap_state.c": [
          "File: mm/swap_state.c -> mm/swap_state.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:      entry.val, page);",
          "96:  if (likely(!error)) {",
          "97:   address_space->nrpages++;",
          "99:   INC_CACHE_INFO(add_total);",
          "100:  }",
          "101:  spin_unlock_irq(&address_space->tree_lock);",
          "",
          "[Removed Lines]",
          "98:   __inc_zone_page_state(page, NR_FILE_PAGES);",
          "",
          "[Added Lines]",
          "98:   __inc_node_page_state(page, NR_FILE_PAGES);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:  set_page_private(page, 0);",
          "148:  ClearPageSwapCache(page);",
          "149:  address_space->nrpages--;",
          "151:  INC_CACHE_INFO(del_total);",
          "152: }",
          "",
          "[Removed Lines]",
          "150:  __dec_zone_page_state(page, NR_FILE_PAGES);",
          "",
          "[Added Lines]",
          "150:  __dec_node_page_state(page, NR_FILE_PAGES);",
          "",
          "---------------"
        ],
        "mm/util.c||mm/util.c": [
          "File: mm/util.c -> mm/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "529:  if (sysctl_overcommit_memory == OVERCOMMIT_GUESS) {",
          "530:   free = global_page_state(NR_FREE_PAGES);",
          "",
          "[Removed Lines]",
          "531:   free += global_page_state(NR_FILE_PAGES);",
          "",
          "[Added Lines]",
          "531:   free += global_node_page_state(NR_FILE_PAGES);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "541:   free += get_nr_swap_pages();",
          "",
          "[Removed Lines]",
          "539:   free -= global_page_state(NR_SHMEM);",
          "",
          "[Added Lines]",
          "539:   free -= global_node_page_state(NR_SHMEM);",
          "",
          "---------------"
        ],
        "mm/vmscan.c||mm/vmscan.c": [
          "File: mm/vmscan.c -> mm/vmscan.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3588: int sysctl_min_slab_ratio = 5;",
          "3591: {",
          "",
          "[Removed Lines]",
          "3590: static inline unsigned long zone_unmapped_file_pages(struct zone *zone)",
          "3592:  unsigned long file_mapped = node_page_state(zone->zone_pgdat, NR_FILE_MAPPED);",
          "3593:  unsigned long file_lru = node_page_state(zone->zone_pgdat, NR_INACTIVE_FILE) +",
          "3594:   node_page_state(zone->zone_pgdat, NR_ACTIVE_FILE);",
          "",
          "[Added Lines]",
          "3590: static inline unsigned long node_unmapped_file_pages(struct pglist_data *pgdat)",
          "3592:  unsigned long file_mapped = node_page_state(pgdat, NR_FILE_MAPPED);",
          "3593:  unsigned long file_lru = node_page_state(pgdat, NR_INACTIVE_FILE) +",
          "3594:   node_page_state(pgdat, NR_ACTIVE_FILE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3616:  if (zone_reclaim_mode & RECLAIM_UNMAP)",
          "3618:  else",
          "3622:  if (!(zone_reclaim_mode & RECLAIM_WRITE))",
          "3626:  if (unlikely(delta > nr_pagecache_reclaimable))",
          "",
          "[Removed Lines]",
          "3617:   nr_pagecache_reclaimable = zone_page_state(zone, NR_FILE_PAGES);",
          "3619:   nr_pagecache_reclaimable = zone_unmapped_file_pages(zone);",
          "3623:   delta += zone_page_state(zone, NR_FILE_DIRTY);",
          "",
          "[Added Lines]",
          "3617:   nr_pagecache_reclaimable = node_page_state(zone->zone_pgdat, NR_FILE_PAGES);",
          "3619:   nr_pagecache_reclaimable = node_unmapped_file_pages(zone->zone_pgdat);",
          "3623:   delta += node_page_state(zone->zone_pgdat, NR_FILE_DIRTY);",
          "",
          "---------------"
        ],
        "mm/vmstat.c||mm/vmstat.c": [
          "File: mm/vmstat.c -> mm/vmstat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "924:  \"nr_alloc_batch\",",
          "925:  \"nr_zone_anon_lru\",",
          "926:  \"nr_zone_file_lru\",",
          "927:  \"nr_mlock\",",
          "931:  \"nr_slab_reclaimable\",",
          "932:  \"nr_slab_unreclaimable\",",
          "933:  \"nr_page_table_pages\",",
          "934:  \"nr_kernel_stack\",",
          "936:  \"nr_bounce\",",
          "937:  \"nr_vmscan_write\",",
          "938:  \"nr_vmscan_immediate_reclaim\",",
          "941:  \"nr_dirtied\",",
          "942:  \"nr_written\",",
          "943: #if IS_ENABLED(CONFIG_ZSMALLOC)",
          "",
          "[Removed Lines]",
          "928:  \"nr_file_pages\",",
          "929:  \"nr_dirty\",",
          "930:  \"nr_writeback\",",
          "935:  \"nr_unstable\",",
          "939:  \"nr_writeback_temp\",",
          "940:  \"nr_shmem\",",
          "",
          "[Added Lines]",
          "927:  \"nr_zone_write_pending\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "951:  \"numa_local\",",
          "952:  \"numa_other\",",
          "953: #endif",
          "957:  \"nr_free_cma\",",
          "",
          "[Removed Lines]",
          "954:  \"nr_anon_transparent_hugepages\",",
          "955:  \"nr_shmem_hugepages\",",
          "956:  \"nr_shmem_pmdmapped\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "970:  \"workingset_nodereclaim\",",
          "971:  \"nr_anon_pages\",",
          "972:  \"nr_mapped\",",
          "975:  \"nr_dirty_threshold\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "965:  \"nr_file_pages\",",
          "966:  \"nr_dirty\",",
          "967:  \"nr_writeback\",",
          "968:  \"nr_writeback_temp\",",
          "969:  \"nr_shmem\",",
          "970:  \"nr_shmem_hugepages\",",
          "971:  \"nr_shmem_pmdmapped\",",
          "972:  \"nr_anon_transparent_hugepages\",",
          "973:  \"nr_unstable\",",
          "",
          "---------------"
        ]
      }
    }
  ]
}