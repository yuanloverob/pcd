{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ce180867a4ae781cd84fdcf01ba6e2320de651ef",
      "candidate_info": {
        "commit_hash": "ce180867a4ae781cd84fdcf01ba6e2320de651ef",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ce180867a4ae781cd84fdcf01ba6e2320de651ef",
        "files": [
          "apps/enc.c"
        ],
        "message": "Let the output from 'openssl enc -ciphers' go to stdout\n\nAlso, don't exit with an error code\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2716)\n(cherry picked from commit 341de5f1997d21b60cee69be656f1ae709bccdac)",
        "before_after_code_files": [
          "apps/enc.c||apps/enc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/enc.c||apps/enc.c": [
          "File: apps/enc.c -> apps/enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:             ret = 0;",
          "135:             goto end;",
          "136:         case OPT_LIST:",
          "138:             OBJ_NAME_do_all_sorted(OBJ_NAME_TYPE_CIPHER_METH,",
          "141:             goto end;",
          "142:         case OPT_E:",
          "143:             enc = 1;",
          "",
          "[Removed Lines]",
          "137:             BIO_printf(bio_err, \"Supported ciphers:\\n\");",
          "139:                                    show_ciphers, bio_err);",
          "140:             BIO_printf(bio_err, \"\\n\");",
          "",
          "[Added Lines]",
          "137:             BIO_printf(bio_out, \"Supported ciphers:\\n\");",
          "139:                                    show_ciphers, bio_out);",
          "140:             BIO_printf(bio_out, \"\\n\");",
          "141:             ret = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b37fce59cb7c48776361ac8cb8a808793016eefd",
      "candidate_info": {
        "commit_hash": "b37fce59cb7c48776361ac8cb8a808793016eefd",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b37fce59cb7c48776361ac8cb8a808793016eefd",
        "files": [
          "apps/ts.c",
          "crypto/ec/ec_ameth.c",
          "ssl/ssl_ciph.c"
        ],
        "message": "mem leak on error path and error propagation fix\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2559)\n(cherry picked from commit e0670973d5c0b837eb5a9f1670e47107f466fbc7)",
        "before_after_code_files": [
          "apps/ts.c||apps/ts.c",
          "crypto/ec/ec_ameth.c||crypto/ec/ec_ameth.c",
          "ssl/ssl_ciph.c||ssl/ssl_ciph.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/ts.c||apps/ts.c": [
          "File: apps/ts.c -> apps/ts.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "890:             goto err;",
          "891:         f = TS_VFY_VERSION | TS_VFY_SIGNER;",
          "892:         if (data != NULL) {",
          "893:             f |= TS_VFY_DATA;",
          "895:                 goto err;",
          "896:         } else if (digest != NULL) {",
          "897:             long imprint_len;",
          "898:             unsigned char *hexstr = OPENSSL_hexstr2buf(digest, &imprint_len);",
          "",
          "[Removed Lines]",
          "894:             if (TS_VERIFY_CTX_set_data(ctx, BIO_new_file(data, \"rb\")) == NULL)",
          "",
          "[Added Lines]",
          "893:             BIO *out = NULL;",
          "896:             if ((out = BIO_new_file(data, \"rb\")) == NULL)",
          "897:                 goto err;",
          "898:             if (TS_VERIFY_CTX_set_data(ctx, out) == NULL) {",
          "899:                 BIO_free_all(out);",
          "901:             }",
          "",
          "---------------"
        ],
        "crypto/ec/ec_ameth.c||crypto/ec/ec_ameth.c": [
          "File: crypto/ec/ec_ameth.c -> crypto/ec/ec_ameth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "254:     }",
          "256:     if (!PKCS8_pkey_set0(p8, OBJ_nid2obj(NID_X9_62_id_ecPublicKey), 0,",
          "258:         return 0;",
          "260:     return 1;",
          "261: }",
          "",
          "[Removed Lines]",
          "257:                          ptype, pval, ep, eplen))",
          "",
          "[Added Lines]",
          "257:                          ptype, pval, ep, eplen)) {",
          "258:         OPENSSL_free(ep);",
          "260:     }",
          "",
          "---------------"
        ],
        "ssl/ssl_ciph.c||ssl/ssl_ciph.c": [
          "File: ssl/ssl_ciph.c -> ssl/ssl_ciph.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1827:     if (id < 193 || id > 255) {",
          "1828:         SSLerr(SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD,",
          "1829:                SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE);",
          "1831:     }",
          "1833:     CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_DISABLE);",
          "",
          "[Removed Lines]",
          "1830:         return 0;",
          "",
          "[Added Lines]",
          "1830:         return 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38bf0e64f7a06f35edf66968b991222017e41984",
      "candidate_info": {
        "commit_hash": "38bf0e64f7a06f35edf66968b991222017e41984",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/38bf0e64f7a06f35edf66968b991222017e41984",
        "files": [
          "crypto/evp/pmeth_fn.c"
        ],
        "message": "Reformat M_check_autoarg to match our coding style\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2121)\n(cherry picked from commit 2629440d42e4d64cd0cb849c1b19fa87a4fcb90f)",
        "before_after_code_files": [
          "crypto/evp/pmeth_fn.c||crypto/evp/pmeth_fn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/evp/pmeth_fn.c||crypto/evp/pmeth_fn.c": [
          "File: crypto/evp/pmeth_fn.c -> crypto/evp/pmeth_fn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include \"internal/evp_int.h\"",
          "17: #define M_check_autoarg(ctx, arg, arglen, err) \\",
          "38: int EVP_PKEY_sign_init(EVP_PKEY_CTX *ctx)",
          "39: {",
          "",
          "[Removed Lines]",
          "18:         if (ctx->pmeth->flags & EVP_PKEY_FLAG_AUTOARGLEN) \\",
          "19:                 { \\",
          "20:                 size_t pksize = (size_t)EVP_PKEY_size(ctx->pkey); \\",
          "21:                 if (pksize == 0) \\",
          "22:                         { \\",
          "23:                         EVPerr(err, EVP_R_INVALID_KEY); /*ckerr_ignore*/\\",
          "24:                         return 0; \\",
          "25:                         } \\",
          "26:                 else if (!arg)                 \\",
          "27:                         { \\",
          "29:                         return 1; \\",
          "30:                         } \\",
          "31:                 else if (*arglen < pksize) \\",
          "32:                         { \\",
          "33:                         EVPerr(err, EVP_R_BUFFER_TOO_SMALL); /*ckerr_ignore*/\\",
          "34:                         return 0; \\",
          "35:                         } \\",
          "36:                 }",
          "",
          "[Added Lines]",
          "18:     if (ctx->pmeth->flags & EVP_PKEY_FLAG_AUTOARGLEN) {           \\",
          "19:         size_t pksize = (size_t)EVP_PKEY_size(ctx->pkey);         \\",
          "20:                                                                   \\",
          "21:         if (pksize == 0) {                                        \\",
          "22:             EVPerr(err, EVP_R_INVALID_KEY); /*ckerr_ignore*/      \\",
          "23:             return 0;                                             \\",
          "24:         }                                                         \\",
          "25:         if (!arg) {                                               \\",
          "27:             return 1;                                             \\",
          "28:         }                                                         \\",
          "29:         if (*arglen < pksize) {                                   \\",
          "30:             EVPerr(err, EVP_R_BUFFER_TOO_SMALL); /*ckerr_ignore*/ \\",
          "31:             return 0;                                             \\",
          "32:         }                                                         \\",
          "33:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a2a5d26cea54f490474a366100cf4860a54e030",
      "candidate_info": {
        "commit_hash": "0a2a5d26cea54f490474a366100cf4860a54e030",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0a2a5d26cea54f490474a366100cf4860a54e030",
        "files": [
          "test/evp_test.c"
        ],
        "message": "Skipping tests in evp_test leaks memory\n\nWhen configured with \"no-mdc2 enable-crypto-mdebug\" the evp_test\nwill leak memory due to skipped tests, and error out.\n\nAlso fix a skip condition\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1946)",
        "before_after_code_files": [
          "test/evp_test.c||test/evp_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/evp_test.c||test/evp_test.c": [
          "File: test/evp_test.c -> test/evp_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "351:     if (t->meth) {",
          "352:         t->ntests++;",
          "353:         if (t->skip) {",
          "355:             t->nskip++;",
          "368:         }",
          "369:         ERR_clear_error();",
          "373:         OPENSSL_free(t->expected_err);",
          "374:         t->expected_err = NULL;",
          "375:         free_expected(t);",
          "",
          "[Removed Lines]",
          "354:             t->meth = tmeth;",
          "356:             return 1;",
          "357:         }",
          "358:         t->err = NULL;",
          "359:         if (t->meth->run_test(t) != 1) {",
          "360:             fprintf(stderr, \"%s test error line %d\\n\",",
          "361:                     t->meth->name, t->start_line);",
          "362:             return 0;",
          "363:         }",
          "364:         if (!check_test_error(t)) {",
          "365:             if (t->err)",
          "366:                 ERR_print_errors_fp(stderr);",
          "367:             t->errors++;",
          "370:         t->meth->cleanup(t);",
          "371:         OPENSSL_free(t->data);",
          "372:         t->data = NULL;",
          "",
          "[Added Lines]",
          "355:         } else {",
          "357:             t->err = NULL;",
          "358:             if (t->meth->run_test(t) != 1) {",
          "359:                 fprintf(stderr, \"%s test error line %d\\n\",",
          "360:                         t->meth->name, t->start_line);",
          "361:                 return 0;",
          "362:             }",
          "363:             if (!check_test_error(t)) {",
          "364:                 if (t->err)",
          "365:                     ERR_print_errors_fp(stderr);",
          "366:                 t->errors++;",
          "367:             }",
          "371:         if (t->data != NULL) {",
          "372:             t->meth->cleanup(t);",
          "373:             OPENSSL_free(t->data);",
          "374:             t->data = NULL;",
          "375:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1212:         rv = find_key(&pkey, name, t->public);",
          "1213:     if (!rv)",
          "1214:         rv = find_key(&pkey, name, t->private);",
          "1218:         t->skip = 1;",
          "1219:         return 1;",
          "1220:     }",
          "",
          "[Removed Lines]",
          "1215:     if (!rv)",
          "1216:         return 0;",
          "1217:     if (!pkey) {",
          "",
          "[Added Lines]",
          "1218:     if (!rv || pkey == NULL) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "28991705b71d47066997c0afe5060b470c5ac09f",
      "candidate_info": {
        "commit_hash": "28991705b71d47066997c0afe5060b470c5ac09f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/28991705b71d47066997c0afe5060b470c5ac09f",
        "files": [
          "test/recipes/80-test_ssl_old.t"
        ],
        "message": "Fix test/recipes/80-test_ssl_old.t\n\nCherry-pick error\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3006)",
        "before_after_code_files": [
          "test/recipes/80-test_ssl_old.t||test/recipes/80-test_ssl_old.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/80-test_ssl_old.t||test/recipes/80-test_ssl_old.t": [
          "File: test/recipes/80-test_ssl_old.t -> test/recipes/80-test_ssl_old.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "469:  foreach my $protocol (sort keys %ciphersuites) {",
          "470:      note \"Testing ciphersuites for $protocol\";",
          "471:      foreach my $cipher (@{$ciphersuites{$protocol}}) {",
          "472:                 if ($protocol eq \"-ssl3\" && $cipher =~ /ECDH/ ) {",
          "473:                     note \"*****SKIPPING $protocol $cipher\";",
          "474:                     ok(1);",
          "475:                 } else {",
          "478:                        \"Testing $cipher\");",
          "479:                }",
          "480:      }",
          "",
          "[Removed Lines]",
          "476:                     ok(run(test([@ssltest, @exkeys, \"-cipher\", $cipher,",
          "477:                                  $protocol eq \"SSLv3\" ? (\"-ssl3\") : ()])),",
          "",
          "[Added Lines]",
          "471:      # ssltest_old doesn't know -tls1_2, but that's fine, since that's",
          "472:      # the default choice if TLSv1.2 enabled",
          "473:      my $flag = $protocol eq \"-tls1_2\" ? \"\" : $protocol;",
          "479:                     ok(run(test([@ssltest, @exkeys, \"-cipher\", $cipher, $flag])),",
          "",
          "---------------"
        ]
      }
    }
  ]
}