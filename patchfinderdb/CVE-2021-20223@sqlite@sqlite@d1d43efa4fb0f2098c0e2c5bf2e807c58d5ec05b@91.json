{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8e50d65aaf255c6db0631cfab8dc2b5329b5bb08",
      "candidate_info": {
        "commit_hash": "8e50d65aaf255c6db0631cfab8dc2b5329b5bb08",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8e50d65aaf255c6db0631cfab8dc2b5329b5bb08",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Improved bytecode comment.\n\nFossilOrigin-Name: 9224f1543b51a674ad6d7db8e90d97e1b0d1abe68bed3417820ebd09d27270f9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5998789c9c744bce92e4cff7636bba800a75574243d6977e1fc8281e360f8d5a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1944:       sqlite3TableAffinity(v, pTab, regNewData+1);",
          "1945:       bAffinityDone = 1;",
          "1946:     }",
          "1948:     iThisCur = iIdxCur+ix;",
          "",
          "[Removed Lines]",
          "1947:     VdbeNoopComment((v, \"uniqueness check for %s\", pIdx->zName));",
          "",
          "[Added Lines]",
          "1947:     VdbeNoopComment((v, \"prep index %s\", pIdx->zName));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "664d80bbf78c23f84d970f2c1755afae5e86cf4f",
      "candidate_info": {
        "commit_hash": "664d80bbf78c23f84d970f2c1755afae5e86cf4f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/664d80bbf78c23f84d970f2c1755afae5e86cf4f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/dbstat.c",
          "test/stat.test"
        ],
        "message": "Omit the omit flat from eq constraints on column \"name\" of dbstat virtual tables. Fix for [74a4c386].\n\nFossilOrigin-Name: cfff5cb2279088aa66f435bd0d627b2c74c9a99ad9addfd44a4df8ba770b795a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/dbstat.c||src/dbstat.c",
          "test/stat.test||test/stat.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 182a898b14d585edd5fcfdcd6584c957911f0d81773d2868f16b5762dec031ca",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/dbstat.c||src/dbstat.c": [
          "File: src/dbstat.c -> src/dbstat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:   i = 0;",
          "238:   if( iSchema>=0 ){",
          "239:     pIdxInfo->aConstraintUsage[iSchema].argvIndex = ++i;",
          "241:     pIdxInfo->idxNum |= 0x01;",
          "242:   }",
          "243:   if( iName>=0 ){",
          "244:     pIdxInfo->aConstraintUsage[iName].argvIndex = ++i;",
          "246:     pIdxInfo->idxNum |= 0x02;",
          "247:   }",
          "248:   if( iAgg>=0 ){",
          "249:     pIdxInfo->aConstraintUsage[iAgg].argvIndex = ++i;",
          "252:     pIdxInfo->idxNum |= 0x04;",
          "253:   }",
          "254:   pIdxInfo->estimatedCost = 1.0;",
          "",
          "[Removed Lines]",
          "240:     pIdxInfo->aConstraintUsage[iSchema].omit = 1;",
          "245:     pIdxInfo->aConstraintUsage[iName].omit = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/stat.test||test/stat.test": [
          "File: test/stat.test -> test/stat.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "307: do_execsql_test 8.3 {",
          "308:   SELECT aggregate=1 FROM st4 WHERE aggregate = 5",
          "309: }",
          "311: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311: do_execsql_test 8.4 {",
          "312:   SELECT * FROM st4 WHERE name = NULL;",
          "313: }",
          "314: do_catchsql_test 8.5 {",
          "315:   SELECT * FROM st4 WHERE schema = NULL;",
          "316: } {1 {no such schema: }}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "065e4a8d291e4e55a2a18929184549f1245ead99",
      "candidate_info": {
        "commit_hash": "065e4a8d291e4e55a2a18929184549f1245ead99",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/065e4a8d291e4e55a2a18929184549f1245ead99",
        "files": [
          "ext/misc/cksumvfs.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add the cksumvfs extension.\n\nFossilOrigin-Name: 237c10f941cc6cb775693ae87513ff1b816f12b5e9c3d57b057421204d2d02cf",
        "before_after_code_files": [
          "ext/misc/cksumvfs.c||ext/misc/cksumvfs.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/cksumvfs.c||ext/misc/cksumvfs.c": [
          "File: ext/misc/cksumvfs.c -> ext/misc/cksumvfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160: #ifdef SQLITE_CKSUMVFS_STATIC",
          "161: # include \"sqlite3.h\"",
          "162: #else",
          "163: # include \"sqlite3ext.h\"",
          "164:   SQLITE_EXTENSION_INIT1",
          "165: #endif",
          "166: #include <string.h>",
          "167: #include <assert.h>",
          "173: typedef struct sqlite3_vfs CksmVfs;",
          "174: typedef struct CksmFile CksmFile;",
          "179: #if !defined(SQLITE_CORE)",
          "180:   typedef unsigned char u8;",
          "181:   typedef unsigned int u32;",
          "182: #endif",
          "187: #define ORIGVFS(p)  ((sqlite3_vfs*)((p)->pAppData))",
          "188: #define ORIGFILE(p) ((sqlite3_file*)(((CksmFile*)(p))+1))",
          "191: struct CksmFile {",
          "193:   char computeCksm;     /* True to compute checksums.",
          "198: };",
          "203: static int cksmClose(sqlite3_file*);",
          "204: static int cksmRead(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);",
          "205: static int cksmWrite(sqlite3_file*,const void*,int iAmt, sqlite3_int64 iOfst);",
          "206: static int cksmTruncate(sqlite3_file*, sqlite3_int64 size);",
          "207: static int cksmSync(sqlite3_file*, int flags);",
          "208: static int cksmFileSize(sqlite3_file*, sqlite3_int64 *pSize);",
          "209: static int cksmLock(sqlite3_file*, int);",
          "210: static int cksmUnlock(sqlite3_file*, int);",
          "211: static int cksmCheckReservedLock(sqlite3_file*, int *pResOut);",
          "212: static int cksmFileControl(sqlite3_file*, int op, void *pArg);",
          "213: static int cksmSectorSize(sqlite3_file*);",
          "214: static int cksmDeviceCharacteristics(sqlite3_file*);",
          "215: static int cksmShmMap(sqlite3_file*, int iPg, int pgsz, int, void volatile**);",
          "216: static int cksmShmLock(sqlite3_file*, int offset, int n, int flags);",
          "217: static void cksmShmBarrier(sqlite3_file*);",
          "218: static int cksmShmUnmap(sqlite3_file*, int deleteFlag);",
          "219: static int cksmFetch(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);",
          "220: static int cksmUnfetch(sqlite3_file*, sqlite3_int64 iOfst, void *p);",
          "225: static int cksmOpen(sqlite3_vfs*, const char *, sqlite3_file*, int , int *);",
          "226: static int cksmDelete(sqlite3_vfs*, const char *zName, int syncDir);",
          "227: static int cksmAccess(sqlite3_vfs*, const char *zName, int flags, int *);",
          "228: static int cksmFullPathname(sqlite3_vfs*, const char *zName, int, char *zOut);",
          "229: static void *cksmDlOpen(sqlite3_vfs*, const char *zFilename);",
          "230: static void cksmDlError(sqlite3_vfs*, int nByte, char *zErrMsg);",
          "231: static void (*cksmDlSym(sqlite3_vfs *pVfs, void *p, const char*zSym))(void);",
          "232: static void cksmDlClose(sqlite3_vfs*, void*);",
          "233: static int cksmRandomness(sqlite3_vfs*, int nByte, char *zOut);",
          "234: static int cksmSleep(sqlite3_vfs*, int microseconds);",
          "235: static int cksmCurrentTime(sqlite3_vfs*, double*);",
          "236: static int cksmGetLastError(sqlite3_vfs*, int, char *);",
          "237: static int cksmCurrentTimeInt64(sqlite3_vfs*, sqlite3_int64*);",
          "238: static int cksmSetSystemCall(sqlite3_vfs*, const char*,sqlite3_syscall_ptr);",
          "239: static sqlite3_syscall_ptr cksmGetSystemCall(sqlite3_vfs*, const char *z);",
          "240: static const char *cksmNextSystemCall(sqlite3_vfs*, const char *zName);",
          "242: static sqlite3_vfs cksm_vfs = {",
          "265: };",
          "267: static const sqlite3_io_methods cksm_io_methods = {",
          "287: };",
          "290: #define BYTESWAP32(x) ( \\",
          "291:     (((x)&0x000000FF)<<24) + (((x)&0x0000FF00)<<8)  \\",
          "292:   + (((x)&0x00FF0000)>>8)  + (((x)&0xFF000000)>>24) \\",
          "293: )",
          "296: static void cksmCompute(",
          "300: ){",
          "301:   u32 s1 = 0, s2 = 0;",
          "302:   u32 *aData = (u32*)a;",
          "303:   u32 *aEnd = (u32*)&a[nByte];",
          "304:   u32 x = 1;",
          "306:   assert( nByte>=8 );",
          "307:   assert( (nByte&0x00000007)==0 );",
          "308:   assert( nByte<=65536 );",
          "310:   if( 1 == *(u8*)&x ){",
          "312:     do {",
          "313:       s1 += *aData++ + s2;",
          "314:       s2 += *aData++ + s1;",
          "315:     }while( aData<aEnd );",
          "316:   }else{",
          "318:     do {",
          "319:       s1 += BYTESWAP32(aData[0]) + s2;",
          "320:       s2 += BYTESWAP32(aData[1]) + s1;",
          "321:       aData += 2;",
          "322:     }while( aData<aEnd );",
          "323:     s1 = BYTESWAP32(s1);",
          "324:     s2 = BYTESWAP32(s2);",
          "325:   }",
          "326:   memcpy(aOut, &s1, 4);",
          "327:   memcpy(aOut+4, &s2, 4);",
          "328: }",
          "337: static void cksmVerifyFunc(",
          "338:   sqlite3_context *context,",
          "339:   int argc,",
          "340:   sqlite3_value **argv",
          "341: ){",
          "342:   int nByte;",
          "343:   u8 *data;",
          "344:   u8 cksum[8];",
          "345:   data = (u8*)sqlite3_value_blob(argv[0]);",
          "346:   if( data==0 ) return;",
          "347:   if( sqlite3_value_type(argv[0])!=SQLITE_BLOB ) return;",
          "348:   nByte = sqlite3_value_bytes(argv[0]);",
          "349:   if( nByte<512 || nByte>65536 || (nByte & (nByte-1))!=0 ) return;",
          "350:   cksmCompute(data, nByte-8, cksum);",
          "351:   sqlite3_result_int(context, memcmp(data+nByte-8,cksum,8)==0);",
          "352: }",
          "357: static int cksmClose(sqlite3_file *pFile){",
          "358:   CksmFile *p = (CksmFile *)pFile;",
          "359:   if( p->pPartner ){",
          "360:     assert( p->pPartner->pPartner==p );",
          "361:     p->pPartner->pPartner = 0;",
          "362:     p->pPartner = 0;",
          "363:   }",
          "364:   pFile = ORIGFILE(pFile);",
          "365:   return pFile->pMethods->xClose(pFile);",
          "366: }",
          "371: static int cksmRead(",
          "372:   sqlite3_file *pFile,",
          "373:   void *zBuf,",
          "374:   int iAmt,",
          "375:   sqlite_int64 iOfst",
          "376: ){",
          "377:   int rc;",
          "378:   CksmFile *p = (CksmFile *)pFile;",
          "379:   pFile = ORIGFILE(pFile);",
          "380:   rc = pFile->pMethods->xRead(pFile, zBuf, iAmt, iOfst);",
          "381:   if( rc==SQLITE_OK ){",
          "382:     if( iOfst==0 && iAmt>=100 && memcmp(zBuf,\"SQLite format 3\",16)==0 ){",
          "383:       u8 *d = (u8*)zBuf;",
          "384:       char hasCorrectReserveSize = (d[20]==8);",
          "385:       if( hasCorrectReserveSize!=p->computeCksm ){",
          "386:         p->computeCksm = p->verifyCksm = hasCorrectReserveSize;",
          "387:       }",
          "388:     }",
          "397:     ){",
          "398:       u8 cksum[8];",
          "399:       cksmCompute((u8*)zBuf, iAmt-8, cksum);",
          "400:       if( memcmp(zBuf+iAmt-8, cksum, 8)!=0 ){",
          "401:         rc = SQLITE_CORRUPT;",
          "402:       }",
          "403:     }",
          "404:   }",
          "405:   return rc;",
          "406: }",
          "411: static int cksmWrite(",
          "412:   sqlite3_file *pFile,",
          "413:   const void *zBuf,",
          "414:   int iAmt,",
          "415:   sqlite_int64 iOfst",
          "416: ){",
          "417:   CksmFile *p = (CksmFile *)pFile;",
          "418:   pFile = ORIGFILE(pFile);",
          "419:   if( iOfst==0 && iAmt>=100 && memcmp(zBuf,\"SQLite format 3\",16)==0 ){",
          "420:     u8 *d = (u8*)zBuf;",
          "421:     char hasCorrectReserveSize = (d[20]==8);",
          "422:     if( hasCorrectReserveSize!=p->computeCksm ){",
          "423:       p->computeCksm = p->verifyCksm = hasCorrectReserveSize;",
          "424:     }",
          "425:   }",
          "432:   if( iAmt>=512 && p->computeCksm ){",
          "433:     cksmCompute((u8*)zBuf, iAmt-8, ((u8*)zBuf)+iAmt-8);",
          "434:   }",
          "435:   return pFile->pMethods->xWrite(pFile, zBuf, iAmt, iOfst);",
          "436: }",
          "441: static int cksmTruncate(sqlite3_file *pFile, sqlite_int64 size){",
          "442:   pFile = ORIGFILE(pFile);",
          "443:   return pFile->pMethods->xTruncate(pFile, size);",
          "444: }",
          "449: static int cksmSync(sqlite3_file *pFile, int flags){",
          "450:   pFile = ORIGFILE(pFile);",
          "451:   return pFile->pMethods->xSync(pFile, flags);",
          "452: }",
          "457: static int cksmFileSize(sqlite3_file *pFile, sqlite_int64 *pSize){",
          "458:   CksmFile *p = (CksmFile *)pFile;",
          "459:   pFile = ORIGFILE(p);",
          "460:   return pFile->pMethods->xFileSize(pFile, pSize);",
          "461: }",
          "466: static int cksmLock(sqlite3_file *pFile, int eLock){",
          "467:   pFile = ORIGFILE(pFile);",
          "468:   return pFile->pMethods->xLock(pFile, eLock);",
          "469: }",
          "474: static int cksmUnlock(sqlite3_file *pFile, int eLock){",
          "475:   pFile = ORIGFILE(pFile);",
          "476:   return pFile->pMethods->xUnlock(pFile, eLock);",
          "477: }",
          "482: static int cksmCheckReservedLock(sqlite3_file *pFile, int *pResOut){",
          "483:   pFile = ORIGFILE(pFile);",
          "484:   return pFile->pMethods->xCheckReservedLock(pFile, pResOut);",
          "485: }",
          "490: static int cksmFileControl(sqlite3_file *pFile, int op, void *pArg){",
          "491:   int rc;",
          "492:   CksmFile *p = (CksmFile*)pFile;",
          "493:   pFile = ORIGFILE(pFile);",
          "494:   if( op==SQLITE_FCNTL_PRAGMA ){",
          "495:     char **azArg = (char**)pArg;",
          "496:     assert( azArg[1]!=0 );",
          "497:     if( strcmp(azArg[1],\"checksum_verification\")==0 ){",
          "498:       char *zArg = azArg[2];",
          "499:       if( zArg!=0 ){",
          "500:         if( (zArg[0]>='1' && zArg[0]<='9')",
          "501:          || sqlite3_strlike(\"enable%\",zArg,0)==0",
          "502:          || sqlite3_stricmp(\"yes\",zArg)==0",
          "503:          || sqlite3_stricmp(\"on\",zArg)==0",
          "504:         ){",
          "505:           p->verifyCksm = p->computeCksm;",
          "506:         }else{",
          "507:           p->verifyCksm = 0;",
          "508:         }",
          "509:       }",
          "510:       azArg[0] = sqlite3_mprintf(\"%d\",p->verifyCksm);",
          "511:       return SQLITE_OK;",
          "512:     }",
          "513:   }",
          "514:   rc = pFile->pMethods->xFileControl(pFile, op, pArg);",
          "515:   if( rc==SQLITE_OK && op==SQLITE_FCNTL_VFSNAME ){",
          "517:   }",
          "518:   return rc;",
          "519: }",
          "524: static int cksmSectorSize(sqlite3_file *pFile){",
          "525:   pFile = ORIGFILE(pFile);",
          "526:   return pFile->pMethods->xSectorSize(pFile);",
          "527: }",
          "532: static int cksmDeviceCharacteristics(sqlite3_file *pFile){",
          "533:   pFile = ORIGFILE(pFile);",
          "534:   return pFile->pMethods->xDeviceCharacteristics(pFile);",
          "535: }",
          "538: static int cksmShmMap(",
          "539:   sqlite3_file *pFile,",
          "540:   int iPg,",
          "541:   int pgsz,",
          "542:   int bExtend,",
          "543:   void volatile **pp",
          "544: ){",
          "545:   pFile = ORIGFILE(pFile);",
          "546:   return pFile->pMethods->xShmMap(pFile,iPg,pgsz,bExtend,pp);",
          "547: }",
          "550: static int cksmShmLock(sqlite3_file *pFile, int offset, int n, int flags){",
          "551:   pFile = ORIGFILE(pFile);",
          "552:   return pFile->pMethods->xShmLock(pFile,offset,n,flags);",
          "553: }",
          "556: static void cksmShmBarrier(sqlite3_file *pFile){",
          "557:   pFile = ORIGFILE(pFile);",
          "558:   pFile->pMethods->xShmBarrier(pFile);",
          "559: }",
          "562: static int cksmShmUnmap(sqlite3_file *pFile, int deleteFlag){",
          "563:   pFile = ORIGFILE(pFile);",
          "564:   return pFile->pMethods->xShmUnmap(pFile,deleteFlag);",
          "565: }",
          "568: static int cksmFetch(",
          "569:   sqlite3_file *pFile,",
          "570:   sqlite3_int64 iOfst,",
          "571:   int iAmt,",
          "572:   void **pp",
          "573: ){",
          "574:   CksmFile *p = (CksmFile *)pFile;",
          "575:   if( p->computeCksm ){",
          "577:     return SQLITE_OK;",
          "578:   }",
          "579:   pFile = ORIGFILE(pFile);",
          "580:   return pFile->pMethods->xFetch(pFile, iOfst, iAmt, pp);",
          "581: }",
          "584: static int cksmUnfetch(sqlite3_file *pFile, sqlite3_int64 iOfst, void *pPage){",
          "585:   pFile = ORIGFILE(pFile);",
          "586:   return pFile->pMethods->xUnfetch(pFile, iOfst, pPage);",
          "587: }",
          "592: static int cksmOpen(",
          "593:   sqlite3_vfs *pVfs,",
          "594:   const char *zName,",
          "595:   sqlite3_file *pFile,",
          "596:   int flags,",
          "597:   int *pOutFlags",
          "598: ){",
          "599:   CksmFile *p;",
          "600:   sqlite3_file *pSubFile;",
          "601:   sqlite3_vfs *pSubVfs;",
          "602:   int rc;",
          "603:   pSubVfs = ORIGVFS(pVfs);",
          "604:   if( (flags & (SQLITE_OPEN_MAIN_DB|SQLITE_OPEN_WAL))==0 ){",
          "605:     return pSubVfs->xOpen(pSubVfs, zName, pFile, flags, pOutFlags);",
          "606:   }",
          "607:   p = (CksmFile*)pFile;",
          "608:   memset(p, 0, sizeof(*p));",
          "609:   pSubFile = ORIGFILE(pFile);",
          "610:   p->base.pMethods = &cksm_io_methods;",
          "611:   rc = pSubVfs->xOpen(pSubVfs, zName, pSubFile, flags, pOutFlags);",
          "612:   if( rc ) goto cksm_open_done;",
          "613:   if( flags & SQLITE_OPEN_WAL ){",
          "614:     sqlite3_file *pDb = sqlite3_database_file_object(zName);",
          "615:     p->pPartner = (CksmFile*)pDb;",
          "616:     assert( p->pPartner->pPartner==0 );",
          "617:     p->pPartner->pPartner = p;",
          "618:     p->isWal = 1;",
          "619:     p->computeCksm = p->pPartner->computeCksm;",
          "620:   }else{",
          "621:     p->isWal = 0;",
          "622:     p->computeCksm = 0;",
          "623:   }",
          "624: cksm_open_done:",
          "625:   if( rc ) pFile->pMethods = 0;",
          "626:   return rc;",
          "627: }",
          "632: static int cksmDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){",
          "633:   return ORIGVFS(pVfs)->xDelete(ORIGVFS(pVfs), zPath, dirSync);",
          "634: }",
          "635: static int cksmAccess(",
          "636:   sqlite3_vfs *pVfs,",
          "637:   const char *zPath,",
          "638:   int flags,",
          "639:   int *pResOut",
          "640: ){",
          "641:   return ORIGVFS(pVfs)->xAccess(ORIGVFS(pVfs), zPath, flags, pResOut);",
          "642: }",
          "643: static int cksmFullPathname(",
          "644:   sqlite3_vfs *pVfs,",
          "645:   const char *zPath,",
          "646:   int nOut,",
          "647:   char *zOut",
          "648: ){",
          "649:   return ORIGVFS(pVfs)->xFullPathname(ORIGVFS(pVfs),zPath,nOut,zOut);",
          "650: }",
          "651: static void *cksmDlOpen(sqlite3_vfs *pVfs, const char *zPath){",
          "652:   return ORIGVFS(pVfs)->xDlOpen(ORIGVFS(pVfs), zPath);",
          "653: }",
          "654: static void cksmDlError(sqlite3_vfs *pVfs, int nByte, char *zErrMsg){",
          "655:   ORIGVFS(pVfs)->xDlError(ORIGVFS(pVfs), nByte, zErrMsg);",
          "656: }",
          "657: static void (*cksmDlSym(sqlite3_vfs *pVfs, void *p, const char *zSym))(void){",
          "658:   return ORIGVFS(pVfs)->xDlSym(ORIGVFS(pVfs), p, zSym);",
          "659: }",
          "660: static void cksmDlClose(sqlite3_vfs *pVfs, void *pHandle){",
          "661:   ORIGVFS(pVfs)->xDlClose(ORIGVFS(pVfs), pHandle);",
          "662: }",
          "663: static int cksmRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){",
          "664:   return ORIGVFS(pVfs)->xRandomness(ORIGVFS(pVfs), nByte, zBufOut);",
          "665: }",
          "666: static int cksmSleep(sqlite3_vfs *pVfs, int nMicro){",
          "667:   return ORIGVFS(pVfs)->xSleep(ORIGVFS(pVfs), nMicro);",
          "668: }",
          "669: static int cksmCurrentTime(sqlite3_vfs *pVfs, double *pTimeOut){",
          "670:   return ORIGVFS(pVfs)->xCurrentTime(ORIGVFS(pVfs), pTimeOut);",
          "671: }",
          "672: static int cksmGetLastError(sqlite3_vfs *pVfs, int a, char *b){",
          "673:   return ORIGVFS(pVfs)->xGetLastError(ORIGVFS(pVfs), a, b);",
          "674: }",
          "675: static int cksmCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *p){",
          "676:   return ORIGVFS(pVfs)->xCurrentTimeInt64(ORIGVFS(pVfs), p);",
          "677: }",
          "678: static int cksmSetSystemCall(",
          "679:   sqlite3_vfs *pVfs,",
          "680:   const char *zName,",
          "681:   sqlite3_syscall_ptr pCall",
          "682: ){",
          "683:   return ORIGVFS(pVfs)->xSetSystemCall(ORIGVFS(pVfs),zName,pCall);",
          "684: }",
          "685: static sqlite3_syscall_ptr cksmGetSystemCall(",
          "686:   sqlite3_vfs *pVfs,",
          "687:   const char *zName",
          "688: ){",
          "689:   return ORIGVFS(pVfs)->xGetSystemCall(ORIGVFS(pVfs),zName);",
          "690: }",
          "691: static const char *cksmNextSystemCall(sqlite3_vfs *pVfs, const char *zName){",
          "692:   return ORIGVFS(pVfs)->xNextSystemCall(ORIGVFS(pVfs), zName);",
          "693: }",
          "697: static int cksmRegisterFunc(",
          "698:   sqlite3 *db,",
          "699:   char **pzErrMsg,",
          "700:   const sqlite3_api_routines *pApi",
          "701: ){",
          "702:   int rc;",
          "703:   if( db==0 ) return SQLITE_OK;",
          "704:   rc = sqlite3_create_function(db, \"verify_checksum\", 1,",
          "705:                    SQLITE_UTF8|SQLITE_INNOCUOUS|SQLITE_DETERMINISTIC,",
          "706:                    0, cksmVerifyFunc, 0, 0);",
          "707:   return rc;",
          "708: }",
          "715: static int cksmRegisterVfs(void){",
          "716:   int rc = SQLITE_OK;",
          "717:   sqlite3_vfs *pOrig;",
          "718:   if( sqlite3_vfs_find(\"cksum\")!=0 ) return SQLITE_OK;",
          "719:   pOrig = sqlite3_vfs_find(0);",
          "720:   cksm_vfs.iVersion = pOrig->iVersion;",
          "721:   cksm_vfs.pAppData = pOrig;",
          "722:   cksm_vfs.szOsFile = pOrig->szOsFile + sizeof(CksmFile);",
          "723:   rc = sqlite3_vfs_register(&cksm_vfs, 1);",
          "724:   if( rc==SQLITE_OK ){",
          "725:     rc = sqlite3_auto_extension((void(*)(void))cksmRegisterFunc);",
          "726:   }",
          "727:   return rc;",
          "728: }",
          "730: #if defined(SQLITE_CKSUMVFS_STATIC)",
          "734: int sqlite3_register_cksumvfs(const char *NotUsed){",
          "735:   (void)NotUsed;",
          "736:   return cksmRegisterVfs();",
          "737: }",
          "740: #if !defined(SQLITE_CKSUMVFS_STATIC)",
          "744: #ifdef _WIN32",
          "745: __declspec(dllexport)",
          "746: #endif",
          "751: int sqlite3_cksumvfs_init(",
          "752:   sqlite3 *db,",
          "753:   char **pzErrMsg,",
          "754:   const sqlite3_api_routines *pApi",
          "755: ){",
          "756:   int rc;",
          "757:   SQLITE_EXTENSION_INIT2(pApi);",
          "759:   rc = cksmRegisterFunc(db, 0, 0);",
          "760:   if( rc==SQLITE_OK ){",
          "762:   }",
          "763:   if( rc==SQLITE_OK ){",
          "764:     rc = cksmRegisterVfs();",
          "765:   }",
          "766:   if( rc==SQLITE_OK ) rc = SQLITE_OK_LOAD_PERMANENTLY;",
          "767:   return rc;",
          "768: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ce980af65a9b528f112baa22a95020a98ac5340155a0b53b09c46f99aad9b12b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c673a29bd4d1697f9296b6c79fcd05082cc966b",
      "candidate_info": {
        "commit_hash": "9c673a29bd4d1697f9296b6c79fcd05082cc966b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9c673a29bd4d1697f9296b6c79fcd05082cc966b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Fix a comment typo.  No changes to code.\n\nFossilOrigin-Name: 610ee8d5dc855fd163daa3c93b44db7874463d69df5a01ab4113b725a031b9d4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 138beebb2aa21ed18525dbe02c80426c6caabf6a5f6532a95b738a39b31ad4d5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c"
        ]
      }
    },
    {
      "candidate_hash": "c664355c0f8dc1c23086471ac6a03dd93ba3a542",
      "candidate_info": {
        "commit_hash": "c664355c0f8dc1c23086471ac6a03dd93ba3a542",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c664355c0f8dc1c23086471ac6a03dd93ba3a542",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c"
        ],
        "message": "Move a pointer computation until after OOM checks to avoid a nuisance USAN warning.\n\nFossilOrigin-Name: 41474548ef3f7454e44fbf648429730b3f5ba1ff0086fd2f2d0e59b8f51d85e6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5ecd03a27b81637ec92af654451a8fff46f1768ddb7c7a443d2a4a933b4475c1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2494:   pSuper = (sqlite3_file *)sqlite3MallocZero(pVfs->szOsFile * 2);",
          "2496:   if( !pSuper ){",
          "2497:     rc = SQLITE_NOMEM_BKPT;",
          "2498:   }else{",
          "",
          "[Removed Lines]",
          "2495:   pJournal = (sqlite3_file *)(((u8 *)pSuper) + pVfs->szOsFile);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2500:     rc = sqlite3OsOpen(pVfs, zSuper, pSuper, flags, 0);",
          "2501:   }",
          "2502:   if( rc!=SQLITE_OK ) goto delsuper_out;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2502:   pJournal = (sqlite3_file *)(((u8 *)pSuper) + pVfs->szOsFile);",
          "",
          "---------------"
        ]
      }
    }
  ]
}