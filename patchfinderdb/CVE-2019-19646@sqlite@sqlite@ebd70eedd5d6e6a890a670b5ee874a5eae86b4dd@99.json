{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e4c26c41b4e8e5b047f620c8c51282b869ea21a2",
      "candidate_info": {
        "commit_hash": "e4c26c41b4e8e5b047f620c8c51282b869ea21a2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e4c26c41b4e8e5b047f620c8c51282b869ea21a2",
        "files": [
          "ext/session/sqlite3session.h",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a typo in a comment that is used to generate session documentation.\n\nFossilOrigin-Name: a1f50d57ce76f6c08a0ddbdd3c3fe2732d0e57dda14cb9aa3da00a14ceb4bc44",
        "before_after_code_files": [
          "ext/session/sqlite3session.h||ext/session/sqlite3session.h",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/session/sqlite3session.h||ext/session/sqlite3session.h": [
          "File: ext/session/sqlite3session.h -> ext/session/sqlite3session.h"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3873941c4fb9aa2d0de1129722c5fcdf2be1ea261677d4841ed99f896c778459",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d5c851c1cbcb96d541fa7e6e20342c2a437434e9",
      "candidate_info": {
        "commit_hash": "d5c851c1cbcb96d541fa7e6e20342c2a437434e9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d5c851c1cbcb96d541fa7e6e20342c2a437434e9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/fkey.c",
          "src/parse.y",
          "src/select.c",
          "src/sqliteInt.h",
          "src/where.c",
          "src/wherecode.c"
        ],
        "message": "Streamline the processing of the AND operator.  Slightly smaller and faster.\n\nFossilOrigin-Name: 7713996aa99ce6dd35b5a2db74dd26658fb8d9817169b2a7531cdef6edb41403",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/fkey.c||src/fkey.c",
          "src/parse.y||src/parse.y",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/where.c||src/where.c",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 03f2e78899fad99b0a0951b3a408268276954d4cd785389ed9a0192c9217f6fe",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "851: ){",
          "852:   Expr *p;",
          "863:     sqlite3ExprAttachSubtrees(pParse->db, p, pLeft, pRight);",
          "866:     sqlite3ExprCheckHeight(pParse, p->nHeight);",
          "867:   }",
          "868:   return p;",
          "869: }",
          "",
          "[Removed Lines]",
          "853:   if( op==TK_AND && pParse->nErr==0 && !IN_RENAME_OBJECT ){",
          "855:     p = sqlite3ExprAnd(pParse->db, pLeft, pRight);",
          "856:   }else{",
          "857:     p = sqlite3DbMallocRawNN(pParse->db, sizeof(Expr));",
          "858:     if( p ){",
          "859:       memset(p, 0, sizeof(Expr));",
          "860:       p->op = op & 0xff;",
          "861:       p->iAgg = -1;",
          "862:     }",
          "864:   }",
          "865:   if( p ) {",
          "",
          "[Added Lines]",
          "853:   p = sqlite3DbMallocRawNN(pParse->db, sizeof(Expr));",
          "854:   if( p ){",
          "855:     memset(p, 0, sizeof(Expr));",
          "856:     p->op = op & 0xff;",
          "857:     p->iAgg = -1;",
          "860:   }else{",
          "861:     sqlite3ExprDelete(pParse->db, pLeft);",
          "862:     sqlite3ExprDelete(pParse->db, pRight);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "924:     return pRight;",
          "925:   }else if( pRight==0 ){",
          "926:     return pLeft;",
          "927:   }else if( exprAlwaysFalse(pLeft) || exprAlwaysFalse(pRight) ){",
          "928:     sqlite3ExprDelete(db, pLeft);",
          "929:     sqlite3ExprDelete(db, pRight);",
          "930:     return sqlite3ExprAlloc(db, TK_INTEGER, &sqlite3IntTokens[0], 0);",
          "931:   }else{",
          "935:   }",
          "936: }",
          "",
          "[Removed Lines]",
          "922: Expr *sqlite3ExprAnd(sqlite3 *db, Expr *pLeft, Expr *pRight){",
          "923:   if( pLeft==0 ){",
          "932:     Expr *pNew = sqlite3ExprAlloc(db, TK_AND, 0, 0);",
          "933:     sqlite3ExprAttachSubtrees(db, pNew, pLeft, pRight);",
          "934:     return pNew;",
          "",
          "[Added Lines]",
          "918: Expr *sqlite3ExprAnd(Parse *pParse, Expr *pLeft, Expr *pRight){",
          "919:   sqlite3 *db = pParse->db;",
          "920:   if( pLeft==0  ){",
          "924:   }else if( pParse->nErr || IN_RENAME_OBJECT ){",
          "925:     return sqlite3PExpr(pParse, TK_AND, pLeft, pRight);",
          "931:     return sqlite3PExpr(pParse, TK_AND, pLeft, pRight);",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "591:     zCol = pFKey->pFrom->aCol[iCol].zName;",
          "592:     pRight = sqlite3Expr(db, TK_ID, zCol);",
          "593:     pEq = sqlite3PExpr(pParse, TK_EQ, pLeft, pRight);",
          "595:   }",
          "",
          "[Removed Lines]",
          "594:     pWhere = sqlite3ExprAnd(db, pWhere, pEq);",
          "",
          "[Added Lines]",
          "594:     pWhere = sqlite3ExprAnd(pParse, pWhere, pEq);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "625:         pLeft = exprTableRegister(pParse, pTab, regData, iCol);",
          "626:         pRight = sqlite3Expr(db, TK_ID, pTab->aCol[iCol].zName);",
          "627:         pEq = sqlite3PExpr(pParse, TK_IS, pLeft, pRight);",
          "629:       }",
          "630:       pNe = sqlite3PExpr(pParse, TK_NOT, pAll, 0);",
          "631:     }",
          "633:   }",
          "",
          "[Removed Lines]",
          "628:         pAll = sqlite3ExprAnd(db, pAll, pEq);",
          "632:     pWhere = sqlite3ExprAnd(db, pWhere, pNe);",
          "",
          "[Added Lines]",
          "628:         pAll = sqlite3ExprAnd(pParse, pAll, pEq);",
          "632:     pWhere = sqlite3ExprAnd(pParse, pWhere, pNe);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1235:             sqlite3ExprAlloc(db, TK_ID, &tToCol, 0)),",
          "1236:           sqlite3ExprAlloc(db, TK_ID, &tFromCol, 0)",
          "1237:       );",
          "",
          "[Removed Lines]",
          "1238:       pWhere = sqlite3ExprAnd(db, pWhere, pEq);",
          "",
          "[Added Lines]",
          "1238:       pWhere = sqlite3ExprAnd(pParse, pWhere, pEq);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1251:               sqlite3ExprAlloc(db, TK_ID, &tNew, 0),",
          "1252:               sqlite3ExprAlloc(db, TK_ID, &tToCol, 0))",
          "1253:             );",
          "1255:       }",
          "1257:       if( action!=OE_Restrict && (action!=OE_Cascade || pChanges) ){",
          "",
          "[Removed Lines]",
          "1254:         pWhen = sqlite3ExprAnd(db, pWhen, pEq);",
          "",
          "[Added Lines]",
          "1254:         pWhen = sqlite3ExprAnd(pParse, pWhen, pEq);",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1064:   }",
          "1065: }",
          "1068: expr(A) ::= expr(A) OR(OP) expr(Y).     {A=sqlite3PExpr(pParse,@OP,A,Y);}",
          "1069: expr(A) ::= expr(A) LT|GT|GE|LE(OP) expr(Y).",
          "1070:                                         {A=sqlite3PExpr(pParse,@OP,A,Y);}",
          "",
          "[Removed Lines]",
          "1067: expr(A) ::= expr(A) AND(OP) expr(Y).    {A=sqlite3PExpr(pParse,@OP,A,Y);}",
          "",
          "[Added Lines]",
          "1067: expr(A) ::= expr(A) AND expr(Y).        {A=sqlite3ExprAnd(pParse,A,Y);}",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "490:     if( pRight->pOn ){",
          "491:       if( isOuter ) setJoinExpr(pRight->pOn, pRight->iCursor);",
          "493:       pRight->pOn = 0;",
          "494:     }",
          "",
          "[Removed Lines]",
          "492:       p->pWhere = sqlite3ExprAnd(pParse->db, p->pWhere, pRight->pOn);",
          "",
          "[Added Lines]",
          "492:       p->pWhere = sqlite3ExprAnd(pParse, p->pWhere, pRight->pOn);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4034:     if( isLeftJoin>0 ){",
          "4035:       setJoinExpr(pWhere, iNewParent);",
          "4036:     }",
          "4038:     if( db->mallocFailed==0 ){",
          "4039:       SubstContext x;",
          "4040:       x.pParse = pParse;",
          "",
          "[Removed Lines]",
          "4037:     pParent->pWhere = sqlite3ExprAnd(db, pWhere, pParent->pWhere);",
          "",
          "[Added Lines]",
          "4037:     pParent->pWhere = sqlite3ExprAnd(pParse, pWhere, pParent->pWhere);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4369:       x.pEList = pSubq->pEList;",
          "4370:       pNew = substExpr(&x, pNew);",
          "4371:       if( pSubq->selFlags & SF_Aggregate ){",
          "4373:       }else{",
          "4375:       }",
          "4376:       pSubq = pSubq->pPrior;",
          "4377:     }",
          "",
          "[Removed Lines]",
          "4372:         pSubq->pHaving = sqlite3ExprAnd(pParse->db, pSubq->pHaving, pNew);",
          "4374:         pSubq->pWhere = sqlite3ExprAnd(pParse->db, pSubq->pWhere, pNew);",
          "",
          "[Added Lines]",
          "4372:         pSubq->pHaving = sqlite3ExprAnd(pParse, pSubq->pHaving, pNew);",
          "4374:         pSubq->pWhere = sqlite3ExprAnd(pParse, pSubq->pWhere, pNew);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5418:       if( pNew ){",
          "5419:         Expr *pWhere = pS->pWhere;",
          "5420:         SWAP(Expr, *pNew, *pExpr);",
          "5422:         pS->pWhere = pNew;",
          "5423:         pWalker->eCode = 1;",
          "5424:       }",
          "",
          "[Removed Lines]",
          "5421:         pNew = sqlite3ExprAnd(db, pWhere, pNew);",
          "",
          "[Added Lines]",
          "5421:         pNew = sqlite3ExprAnd(pWalker->pParse, pWhere, pNew);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3854: void sqlite3ExprAttachSubtrees(sqlite3*,Expr*,Expr*,Expr*);",
          "3855: Expr *sqlite3PExpr(Parse*, int, Expr*, Expr*);",
          "3856: void sqlite3PExprAddSelect(Parse*, Expr*, Select*);",
          "3858: Expr *sqlite3ExprFunction(Parse*,ExprList*, Token*, int);",
          "3859: void sqlite3ExprAssignVarNumber(Parse*, Expr*, u32);",
          "3860: void sqlite3ExprDelete(sqlite3*, Expr*);",
          "",
          "[Removed Lines]",
          "3857: Expr *sqlite3ExprAnd(sqlite3*,Expr*, Expr*);",
          "",
          "[Added Lines]",
          "3857: Expr *sqlite3ExprAnd(Parse*,Expr*, Expr*);",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "737:      && (pTerm->wtFlags & TERM_VIRTUAL)==0",
          "738:      && !ExprHasProperty(pExpr, EP_FromJoin)",
          "739:      && sqlite3ExprIsTableConstant(pExpr, pSrc->iCursor) ){",
          "741:                                 sqlite3ExprDup(pParse->db, pExpr, 0));",
          "742:     }",
          "743:     if( termCanDriveIndex(pTerm, pSrc, notReady) ){",
          "",
          "[Removed Lines]",
          "740:       pPartial = sqlite3ExprAnd(pParse->db, pPartial,",
          "",
          "[Added Lines]",
          "740:       pPartial = sqlite3ExprAnd(pParse, pPartial,",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "999:     }",
          "1003:   }",
          "1004:   if( pExpr!=0 ){",
          "1005:     sWalker.xExprCallback = codeCursorHintFixExpr;",
          "",
          "[Removed Lines]",
          "1002:     pExpr = sqlite3ExprAnd(db, pExpr, sqlite3ExprDup(db, pTerm->pExpr, 0));",
          "",
          "[Added Lines]",
          "1002:     pExpr = sqlite3ExprAnd(pParse, pExpr, sqlite3ExprDup(db, pTerm->pExpr, 0));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1964:         if( (pWC->a[iTerm].eOperator & WO_ALL)==0 ) continue;",
          "1965:         testcase( pWC->a[iTerm].wtFlags & TERM_ORINFO );",
          "1966:         pExpr = sqlite3ExprDup(db, pExpr, 0);",
          "1968:       }",
          "1969:       if( pAndExpr ){",
          "",
          "[Removed Lines]",
          "1967:         pAndExpr = sqlite3ExprAnd(db, pAndExpr, pExpr);",
          "",
          "[Added Lines]",
          "1967:         pAndExpr = sqlite3ExprAnd(pParse, pAndExpr, pExpr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dc2e331ab2b469a6b950a5456b830ade8238e9a8",
      "candidate_info": {
        "commit_hash": "dc2e331ab2b469a6b950a5456b830ade8238e9a8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dc2e331ab2b469a6b950a5456b830ade8238e9a8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/fkey.c"
        ],
        "message": "Add another missing column number translation to the foreign key logic.\n\nFossilOrigin-Name: 32df5edcfef2605009f45d6ef1b97c63a99df07c7b4e00dc70f93001cfb8d81f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/fkey.c||src/fkey.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e6c96ed91e7a96d2bd30ea9df132644ac02d5a321a62f81f8f3984a8e49ed94b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "932:         Vdbe *v = sqlite3GetVdbe(pParse);",
          "933:         int iJump = sqlite3VdbeCurrentAddr(v) + pFKey->nCol + 1;",
          "934:         for(i=0; i<pFKey->nCol; i++){",
          "936:           sqlite3VdbeAddOp2(v, OP_IsNull, iReg, iJump); VdbeCoverage(v);",
          "937:         }",
          "938:         sqlite3VdbeAddOp2(v, OP_FkCounter, pFKey->isDeferred, -1);",
          "",
          "[Removed Lines]",
          "935:           int iReg = pFKey->aCol[i].iFrom + regOld + 1;",
          "",
          "[Added Lines]",
          "935:           int iCol, iReg;",
          "936:           iCol = pFKey->aCol[i].iFrom;",
          "937:           iReg = sqlite3TableColumnToStorage(pFKey->pFrom,iCol) + regOld + 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f012dc4eb911a68cb5531b94d91cad7922d9999d",
      "candidate_info": {
        "commit_hash": "f012dc4eb911a68cb5531b94d91cad7922d9999d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f012dc4eb911a68cb5531b94d91cad7922d9999d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "When computing the amount of scratch memory needed during a rebalance operation, assume the worst case for the number of cells per page, rather than relying on the BtPage.nCell value, which might be incorrect for a corrupt database.\n\nFossilOrigin-Name: a420ebd08f5a96b9e61a37cb42e1b3f346c23505630d9c33fe30ce7882959b36",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a026189aa46114d2de4f1da5882aeef9cf446a5aa6ea068d51c27df0d7302ddb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7559:         goto balance_cleanup;",
          "7560:       }",
          "7561:     }",
          "7563:     if( (i--)==0 ) break;",
          "7565:     if( pParent->nOverflow && i+nxDiv==pParent->aiOvfl[0] ){",
          "",
          "[Removed Lines]",
          "7562:     nMaxCells += 1+apOld[i]->nCell+apOld[i]->nOverflow;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7606:   nMaxCells = (nMaxCells + 3)&~3;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7605:   nMaxCells = nOld*(MX_CELL(pBt) + ArraySize(pParent->apOvfl));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7617:   b.apCell = sqlite3StackAllocRaw(0, szScratch );",
          "7618:   if( b.apCell==0 ){",
          "7619:     rc = SQLITE_NOMEM_BKPT;",
          "",
          "[Removed Lines]",
          "7616:   assert( szScratch<=6*(int)pBt->pageSize );",
          "",
          "[Added Lines]",
          "7616:   assert( szScratch<=7*(int)pBt->pageSize );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56785a0a8048e1b7076fae06e7118c1e24633c81",
      "candidate_info": {
        "commit_hash": "56785a0a8048e1b7076fae06e7118c1e24633c81",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/56785a0a8048e1b7076fae06e7118c1e24633c81",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Fix an assert() that might be false for a corrupt database.\n\nFossilOrigin-Name: 0cfb888723fb8ff0763bbc23acb7d21a53f6d1c40661d8468248644281b29d85",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: aa61435a4c3800f023788081c1342ad6a05a41449a424fa6c039d5ca46072256",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6730:     pPage->nCell++;",
          "6732:     if( (++data[pPage->hdrOffset+4])==0 ) data[pPage->hdrOffset+3]++;",
          "6734: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "6735:     if( pPage->pBt->autoVacuum ){",
          "",
          "[Removed Lines]",
          "6733:     assert( get2byte(&data[pPage->hdrOffset+3])==pPage->nCell );",
          "",
          "[Added Lines]",
          "6733:     assert( get2byte(&data[pPage->hdrOffset+3])==pPage->nCell || CORRUPT_DB );",
          "",
          "---------------"
        ]
      }
    }
  ]
}