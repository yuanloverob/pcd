{
  "cve_id": "CVE-2013-4263",
  "cve_desc": "libavfilter in FFmpeg before 2.0.1 has unspecified impact and remote vectors related to a crafted \"plane,\" which triggers an out-of-bounds heap write.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "e43a0a232dbf6d3c161823c2e07c52e76227a1bc",
  "patch_info": {
    "commit_hash": "e43a0a232dbf6d3c161823c2e07c52e76227a1bc",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/e43a0a232dbf6d3c161823c2e07c52e76227a1bc",
    "files": [
      "libavfilter/vf_boxblur.c",
      "libavfilter/vf_delogo.c",
      "libavfilter/vf_fieldmatch.c",
      "libavfilter/vf_fieldorder.c",
      "libavfilter/vf_gradfun.c",
      "libavfilter/vf_hflip.c",
      "libavfilter/vf_kerndeint.c",
      "libavfilter/vf_lut.c",
      "libavfilter/vf_pad.c",
      "libavfilter/vf_showinfo.c",
      "libavfilter/vf_vignette.c"
    ],
    "message": "avfilter: fix plane validity checks\n\nFixes out of array accesses\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavfilter/vf_boxblur.c||libavfilter/vf_boxblur.c",
      "libavfilter/vf_delogo.c||libavfilter/vf_delogo.c",
      "libavfilter/vf_fieldmatch.c||libavfilter/vf_fieldmatch.c",
      "libavfilter/vf_fieldorder.c||libavfilter/vf_fieldorder.c",
      "libavfilter/vf_gradfun.c||libavfilter/vf_gradfun.c",
      "libavfilter/vf_hflip.c||libavfilter/vf_hflip.c",
      "libavfilter/vf_kerndeint.c||libavfilter/vf_kerndeint.c",
      "libavfilter/vf_lut.c||libavfilter/vf_lut.c",
      "libavfilter/vf_pad.c||libavfilter/vf_pad.c",
      "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c",
      "libavfilter/vf_vignette.c||libavfilter/vf_vignette.c"
    ]
  },
  "patch_diff": {
    "libavfilter/vf_boxblur.c||libavfilter/vf_boxblur.c": [
      "File: libavfilter/vf_boxblur.c -> libavfilter/vf_boxblur.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "313:     }",
      "314:     av_frame_copy_props(out, in);",
      "317:         hblur(out->data[plane], out->linesize[plane],",
      "318:               in ->data[plane], in ->linesize[plane],",
      "319:               w[plane], h[plane], s->radius[plane], s->power[plane],",
      "320:               s->temp);",
      "323:         vblur(out->data[plane], out->linesize[plane],",
      "324:               out->data[plane], out->linesize[plane],",
      "325:               w[plane], h[plane], s->radius[plane], s->power[plane],",
      "",
      "[Removed Lines]",
      "316:     for (plane = 0; in->data[plane] && plane < 4; plane++)",
      "322:     for (plane = 0; in->data[plane] && plane < 4; plane++)",
      "",
      "[Added Lines]",
      "316:     for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++)",
      "322:     for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++)",
      "",
      "---------------"
    ],
    "libavfilter/vf_delogo.c||libavfilter/vf_delogo.c": [
      "File: libavfilter/vf_delogo.c -> libavfilter/vf_delogo.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "237:     if (!sar.num)",
      "238:         sar.num = sar.den = 1;",
      "241:         int hsub = plane == 1 || plane == 2 ? hsub0 : 0;",
      "242:         int vsub = plane == 1 || plane == 2 ? vsub0 : 0;",
      "",
      "[Removed Lines]",
      "240:     for (plane = 0; plane < 4 && in->data[plane]; plane++) {",
      "",
      "[Added Lines]",
      "240:     for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++) {",
      "",
      "---------------"
    ],
    "libavfilter/vf_fieldmatch.c||libavfilter/vf_fieldmatch.c": [
      "File: libavfilter/vf_fieldmatch.c -> libavfilter/vf_fieldmatch.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "608:                         const AVFrame *src, int field)",
      "609: {",
      "610:     int plane;",
      "612:         av_image_copy_plane(dst->data[plane] + field*dst->linesize[plane], dst->linesize[plane] << 1,",
      "613:                             src->data[plane] + field*src->linesize[plane], src->linesize[plane] << 1,",
      "614:                             get_width(fm, src, plane), get_height(fm, src, plane) / 2);",
      "",
      "[Removed Lines]",
      "611:     for (plane = 0; plane < 4 && src->data[plane]; plane++)",
      "",
      "[Added Lines]",
      "611:     for (plane = 0; plane < 4 && src->data[plane] && src->linesize[plane]; plane++)",
      "",
      "---------------"
    ],
    "libavfilter/vf_fieldorder.c||libavfilter/vf_fieldorder.c": [
      "File: libavfilter/vf_fieldorder.c -> libavfilter/vf_fieldorder.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "106:             \"picture will move %s one line\\n\",",
      "107:             s->dst_tff ? \"up\" : \"down\");",
      "108:     h = frame->height;",
      "110:         line_step = frame->linesize[plane];",
      "111:         line_size = s->line_size[plane];",
      "112:         data = frame->data[plane];",
      "",
      "[Removed Lines]",
      "109:     for (plane = 0; plane < 4 && frame->data[plane]; plane++) {",
      "",
      "[Added Lines]",
      "109:     for (plane = 0; plane < 4 && frame->data[plane] && frame->linesize[plane]; plane++) {",
      "",
      "---------------"
    ],
    "libavfilter/vf_gradfun.c||libavfilter/vf_gradfun.c": [
      "File: libavfilter/vf_gradfun.c -> libavfilter/vf_gradfun.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "199:         av_frame_copy_props(out, in);",
      "200:     }",
      "203:         int w = inlink->w;",
      "204:         int h = inlink->h;",
      "205:         int r = s->radius;",
      "",
      "[Removed Lines]",
      "202:     for (p = 0; p < 4 && in->data[p]; p++) {",
      "",
      "[Added Lines]",
      "202:     for (p = 0; p < 4 && in->data[p] && in->linesize[p]; p++) {",
      "",
      "---------------"
    ],
    "libavfilter/vf_hflip.c||libavfilter/vf_hflip.c": [
      "File: libavfilter/vf_hflip.c -> libavfilter/vf_hflip.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "90:     if (av_pix_fmt_desc_get(inlink->format)->flags & AV_PIX_FMT_FLAG_PAL)",
      "91:         memcpy(out->data[1], in->data[1], AVPALETTE_SIZE);",
      "94:         const int width  = (plane == 1 || plane == 2) ? FF_CEIL_RSHIFT(inlink->w, s->hsub) : inlink->w;",
      "95:         const int height = (plane == 1 || plane == 2) ? FF_CEIL_RSHIFT(inlink->h, s->vsub) : inlink->h;",
      "96:         step = s->max_step[plane];",
      "",
      "[Removed Lines]",
      "93:     for (plane = 0; plane < 4 && in->data[plane]; plane++) {",
      "",
      "[Added Lines]",
      "93:     for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++) {",
      "",
      "---------------"
    ],
    "libavfilter/vf_kerndeint.c||libavfilter/vf_kerndeint.c": [
      "File: libavfilter/vf_kerndeint.c -> libavfilter/vf_kerndeint.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "150:     av_frame_copy_props(outpic, inpic);",
      "151:     outpic->interlaced_frame = 0;",
      "154:         h = plane == 0 ? inlink->h : FF_CEIL_RSHIFT(inlink->h, kerndeint->vsub);",
      "155:         bwidth = kerndeint->tmp_bwidth[plane];",
      "",
      "[Removed Lines]",
      "153:     for (plane = 0; inpic->data[plane] && plane < 4; plane++) {",
      "",
      "[Added Lines]",
      "153:     for (plane = 0; plane < 4 && inpic->data[plane] && inpic->linesize[plane]; plane++) {",
      "",
      "---------------"
    ],
    "libavfilter/vf_lut.c||libavfilter/vf_lut.c": [
      "File: libavfilter/vf_lut.c -> libavfilter/vf_lut.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "304:         }",
      "305:     } else {",
      "308:             int vsub = plane == 1 || plane == 2 ? s->vsub : 0;",
      "309:             int hsub = plane == 1 || plane == 2 ? s->hsub : 0;",
      "310:             int h = FF_CEIL_RSHIFT(inlink->h, vsub);",
      "",
      "[Removed Lines]",
      "307:         for (plane = 0; plane < 4 && in->data[plane]; plane++) {",
      "",
      "[Added Lines]",
      "307:         for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++) {",
      "",
      "---------------"
    ],
    "libavfilter/vf_pad.c||libavfilter/vf_pad.c": [
      "File: libavfilter/vf_pad.c -> libavfilter/vf_pad.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "214:     frame->width  = w;",
      "215:     frame->height = h;",
      "218:         int hsub = s->draw.hsub[plane];",
      "219:         int vsub = s->draw.vsub[plane];",
      "220:         frame->data[plane] += (s->x >> hsub) * s->draw.pixelstep[plane] +",
      "",
      "[Removed Lines]",
      "217:     for (plane = 0; plane < 4 && frame->data[plane]; plane++) {",
      "",
      "[Added Lines]",
      "217:     for (plane = 0; plane < 4 && frame->data[plane] && frame->linesize[plane]; plane++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "311:         int i;",
      "313:         out = in;",
      "315:             int hsub = s->draw.hsub[i];",
      "316:             int vsub = s->draw.vsub[i];",
      "317:             out->data[i] -= (s->x >> hsub) * s->draw.pixelstep[i] +",
      "",
      "[Removed Lines]",
      "314:         for (i = 0; i < 4 && out->data[i]; i++) {",
      "",
      "[Added Lines]",
      "314:         for (i = 0; i < 4 && out->data[i] && out->linesize[i]; i++) {",
      "",
      "---------------"
    ],
    "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c": [
      "File: libavfilter/vf_showinfo.c -> libavfilter/vf_showinfo.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "38:     uint32_t plane_checksum[4] = {0}, checksum = 0;",
      "39:     int i, plane, vsub = desc->log2_chroma_h;",
      "42:         int64_t linesize = av_image_get_linesize(frame->format, frame->width, plane);",
      "43:         uint8_t *data = frame->data[plane];",
      "44:         int h = plane == 1 || plane == 2 ? FF_CEIL_RSHIFT(inlink->h, vsub) : inlink->h;",
      "",
      "[Removed Lines]",
      "41:     for (plane = 0; plane < 4 && frame->data[plane]; plane++) {",
      "",
      "[Added Lines]",
      "41:     for (plane = 0; plane < 4 && frame->data[plane] && frame->linesize[plane]; plane++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "68:            av_get_picture_type_char(frame->pict_type),",
      "69:            checksum, plane_checksum[0]);",
      "72:         av_log(ctx, AV_LOG_INFO, \" %08X\", plane_checksum[plane]);",
      "73:     av_log(ctx, AV_LOG_INFO, \"]\\n\");",
      "",
      "[Removed Lines]",
      "71:     for (plane = 1; plane < 4 && frame->data[plane]; plane++)",
      "",
      "[Added Lines]",
      "71:     for (plane = 1; plane < 4 && frame->data[plane] && frame->linesize[plane]; plane++)",
      "",
      "---------------"
    ],
    "libavfilter/vf_vignette.c||libavfilter/vf_vignette.c": [
      "File: libavfilter/vf_vignette.c -> libavfilter/vf_vignette.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "239:     } else {",
      "240:         int plane;",
      "243:             uint8_t       *dst = out->data[plane];",
      "244:             const uint8_t *src = in ->data[plane];",
      "245:             const float *fmap = s->fmap;",
      "",
      "[Removed Lines]",
      "242:         for (plane = 0; plane < 4 && in->data[plane]; plane++) {",
      "",
      "[Added Lines]",
      "242:         for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1bf2461765c58aad5829ea45a2885d11f50b73f0",
      "candidate_info": {
        "commit_hash": "1bf2461765c58aad5829ea45a2885d11f50b73f0",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/1bf2461765c58aad5829ea45a2885d11f50b73f0",
        "files": [
          "libavfilter/vf_boxblur.c",
          "libavfilter/vf_delogo.c",
          "libavfilter/vf_fieldmatch.c",
          "libavfilter/vf_fieldorder.c",
          "libavfilter/vf_gradfun.c",
          "libavfilter/vf_hflip.c",
          "libavfilter/vf_kerndeint.c",
          "libavfilter/vf_lut.c",
          "libavfilter/vf_pad.c",
          "libavfilter/vf_showinfo.c",
          "libavfilter/vf_vignette.c"
        ],
        "message": "avfilter: fix plane validity checks\n\nFixes out of array accesses\n\n(cherry picked from commit e43a0a232dbf6d3c161823c2e07c52e76227a1bc)\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavfilter/vf_boxblur.c||libavfilter/vf_boxblur.c",
          "libavfilter/vf_delogo.c||libavfilter/vf_delogo.c",
          "libavfilter/vf_fieldmatch.c||libavfilter/vf_fieldmatch.c",
          "libavfilter/vf_fieldorder.c||libavfilter/vf_fieldorder.c",
          "libavfilter/vf_gradfun.c||libavfilter/vf_gradfun.c",
          "libavfilter/vf_hflip.c||libavfilter/vf_hflip.c",
          "libavfilter/vf_kerndeint.c||libavfilter/vf_kerndeint.c",
          "libavfilter/vf_lut.c||libavfilter/vf_lut.c",
          "libavfilter/vf_pad.c||libavfilter/vf_pad.c",
          "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c",
          "libavfilter/vf_vignette.c||libavfilter/vf_vignette.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavfilter/vf_boxblur.c||libavfilter/vf_boxblur.c",
            "libavfilter/vf_delogo.c||libavfilter/vf_delogo.c",
            "libavfilter/vf_fieldmatch.c||libavfilter/vf_fieldmatch.c",
            "libavfilter/vf_fieldorder.c||libavfilter/vf_fieldorder.c",
            "libavfilter/vf_gradfun.c||libavfilter/vf_gradfun.c",
            "libavfilter/vf_hflip.c||libavfilter/vf_hflip.c",
            "libavfilter/vf_kerndeint.c||libavfilter/vf_kerndeint.c",
            "libavfilter/vf_lut.c||libavfilter/vf_lut.c",
            "libavfilter/vf_pad.c||libavfilter/vf_pad.c",
            "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c",
            "libavfilter/vf_vignette.c||libavfilter/vf_vignette.c"
          ],
          "candidate": [
            "libavfilter/vf_boxblur.c||libavfilter/vf_boxblur.c",
            "libavfilter/vf_delogo.c||libavfilter/vf_delogo.c",
            "libavfilter/vf_fieldmatch.c||libavfilter/vf_fieldmatch.c",
            "libavfilter/vf_fieldorder.c||libavfilter/vf_fieldorder.c",
            "libavfilter/vf_gradfun.c||libavfilter/vf_gradfun.c",
            "libavfilter/vf_hflip.c||libavfilter/vf_hflip.c",
            "libavfilter/vf_kerndeint.c||libavfilter/vf_kerndeint.c",
            "libavfilter/vf_lut.c||libavfilter/vf_lut.c",
            "libavfilter/vf_pad.c||libavfilter/vf_pad.c",
            "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c",
            "libavfilter/vf_vignette.c||libavfilter/vf_vignette.c"
          ]
        }
      },
      "candidate_diff": {
        "libavfilter/vf_boxblur.c||libavfilter/vf_boxblur.c": [
          "File: libavfilter/vf_boxblur.c -> libavfilter/vf_boxblur.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:     }",
          "314:     av_frame_copy_props(out, in);",
          "317:         hblur(out->data[plane], out->linesize[plane],",
          "318:               in ->data[plane], in ->linesize[plane],",
          "319:               w[plane], h[plane], s->radius[plane], s->power[plane],",
          "320:               s->temp);",
          "323:         vblur(out->data[plane], out->linesize[plane],",
          "324:               out->data[plane], out->linesize[plane],",
          "325:               w[plane], h[plane], s->radius[plane], s->power[plane],",
          "",
          "[Removed Lines]",
          "316:     for (plane = 0; in->data[plane] && plane < 4; plane++)",
          "322:     for (plane = 0; in->data[plane] && plane < 4; plane++)",
          "",
          "[Added Lines]",
          "316:     for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++)",
          "322:     for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++)",
          "",
          "---------------"
        ],
        "libavfilter/vf_delogo.c||libavfilter/vf_delogo.c": [
          "File: libavfilter/vf_delogo.c -> libavfilter/vf_delogo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:     if (!sar.num)",
          "237:         sar.num = sar.den = 1;",
          "240:         int hsub = plane == 1 || plane == 2 ? hsub0 : 0;",
          "241:         int vsub = plane == 1 || plane == 2 ? vsub0 : 0;",
          "",
          "[Removed Lines]",
          "239:     for (plane = 0; plane < 4 && in->data[plane]; plane++) {",
          "",
          "[Added Lines]",
          "239:     for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++) {",
          "",
          "---------------"
        ],
        "libavfilter/vf_fieldmatch.c||libavfilter/vf_fieldmatch.c": [
          "File: libavfilter/vf_fieldmatch.c -> libavfilter/vf_fieldmatch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "608:                         const AVFrame *src, int field)",
          "609: {",
          "610:     int plane;",
          "612:         av_image_copy_plane(dst->data[plane] + field*dst->linesize[plane], dst->linesize[plane] << 1,",
          "613:                             src->data[plane] + field*src->linesize[plane], src->linesize[plane] << 1,",
          "614:                             get_width(fm, src, plane), get_height(fm, src, plane) / 2);",
          "",
          "[Removed Lines]",
          "611:     for (plane = 0; plane < 4 && src->data[plane]; plane++)",
          "",
          "[Added Lines]",
          "611:     for (plane = 0; plane < 4 && src->data[plane] && src->linesize[plane]; plane++)",
          "",
          "---------------"
        ],
        "libavfilter/vf_fieldorder.c||libavfilter/vf_fieldorder.c": [
          "File: libavfilter/vf_fieldorder.c -> libavfilter/vf_fieldorder.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:             \"picture will move %s one line\\n\",",
          "107:             s->dst_tff ? \"up\" : \"down\");",
          "108:     h = frame->height;",
          "110:         line_step = frame->linesize[plane];",
          "111:         line_size = s->line_size[plane];",
          "112:         data = frame->data[plane];",
          "",
          "[Removed Lines]",
          "109:     for (plane = 0; plane < 4 && frame->data[plane]; plane++) {",
          "",
          "[Added Lines]",
          "109:     for (plane = 0; plane < 4 && frame->data[plane] && frame->linesize[plane]; plane++) {",
          "",
          "---------------"
        ],
        "libavfilter/vf_gradfun.c||libavfilter/vf_gradfun.c": [
          "File: libavfilter/vf_gradfun.c -> libavfilter/vf_gradfun.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:         av_frame_copy_props(out, in);",
          "201:     }",
          "204:         int w = inlink->w;",
          "205:         int h = inlink->h;",
          "206:         int r = s->radius;",
          "",
          "[Removed Lines]",
          "203:     for (p = 0; p < 4 && in->data[p]; p++) {",
          "",
          "[Added Lines]",
          "203:     for (p = 0; p < 4 && in->data[p] && in->linesize[p]; p++) {",
          "",
          "---------------"
        ],
        "libavfilter/vf_hflip.c||libavfilter/vf_hflip.c": [
          "File: libavfilter/vf_hflip.c -> libavfilter/vf_hflip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:     if (av_pix_fmt_desc_get(inlink->format)->flags & AV_PIX_FMT_FLAG_PAL)",
          "91:         memcpy(out->data[1], in->data[1], AVPALETTE_SIZE);",
          "94:         const int width  = (plane == 1 || plane == 2) ? FF_CEIL_RSHIFT(inlink->w, s->hsub) : inlink->w;",
          "95:         const int height = (plane == 1 || plane == 2) ? FF_CEIL_RSHIFT(inlink->h, s->vsub) : inlink->h;",
          "96:         step = s->max_step[plane];",
          "",
          "[Removed Lines]",
          "93:     for (plane = 0; plane < 4 && in->data[plane]; plane++) {",
          "",
          "[Added Lines]",
          "93:     for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++) {",
          "",
          "---------------"
        ],
        "libavfilter/vf_kerndeint.c||libavfilter/vf_kerndeint.c": [
          "File: libavfilter/vf_kerndeint.c -> libavfilter/vf_kerndeint.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:     av_frame_copy_props(outpic, inpic);",
          "151:     outpic->interlaced_frame = 0;",
          "154:         h = plane == 0 ? inlink->h : FF_CEIL_RSHIFT(inlink->h, kerndeint->vsub);",
          "155:         bwidth = kerndeint->tmp_bwidth[plane];",
          "",
          "[Removed Lines]",
          "153:     for (plane = 0; inpic->data[plane] && plane < 4; plane++) {",
          "",
          "[Added Lines]",
          "153:     for (plane = 0; plane < 4 && inpic->data[plane] && inpic->linesize[plane]; plane++) {",
          "",
          "---------------"
        ],
        "libavfilter/vf_lut.c||libavfilter/vf_lut.c": [
          "File: libavfilter/vf_lut.c -> libavfilter/vf_lut.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "304:         }",
          "305:     } else {",
          "308:             int vsub = plane == 1 || plane == 2 ? s->vsub : 0;",
          "309:             int hsub = plane == 1 || plane == 2 ? s->hsub : 0;",
          "310:             int h = FF_CEIL_RSHIFT(inlink->h, vsub);",
          "",
          "[Removed Lines]",
          "307:         for (plane = 0; plane < 4 && in->data[plane]; plane++) {",
          "",
          "[Added Lines]",
          "307:         for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++) {",
          "",
          "---------------"
        ],
        "libavfilter/vf_pad.c||libavfilter/vf_pad.c": [
          "File: libavfilter/vf_pad.c -> libavfilter/vf_pad.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:     frame->width  = w;",
          "215:     frame->height = h;",
          "218:         int hsub = s->draw.hsub[plane];",
          "219:         int vsub = s->draw.vsub[plane];",
          "220:         frame->data[plane] += (s->x >> hsub) * s->draw.pixelstep[plane] +",
          "",
          "[Removed Lines]",
          "217:     for (plane = 0; plane < 4 && frame->data[plane]; plane++) {",
          "",
          "[Added Lines]",
          "217:     for (plane = 0; plane < 4 && frame->data[plane] && frame->linesize[plane]; plane++) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "311:         int i;",
          "313:         out = in;",
          "315:             int hsub = s->draw.hsub[i];",
          "316:             int vsub = s->draw.vsub[i];",
          "317:             out->data[i] -= (s->x >> hsub) * s->draw.pixelstep[i] +",
          "",
          "[Removed Lines]",
          "314:         for (i = 0; i < 4 && out->data[i]; i++) {",
          "",
          "[Added Lines]",
          "314:         for (i = 0; i < 4 && out->data[i] && out->linesize[i]; i++) {",
          "",
          "---------------"
        ],
        "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c": [
          "File: libavfilter/vf_showinfo.c -> libavfilter/vf_showinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     uint32_t plane_checksum[4] = {0}, checksum = 0;",
          "39:     int i, plane, vsub = desc->log2_chroma_h;",
          "42:         int64_t linesize = av_image_get_linesize(frame->format, frame->width, plane);",
          "43:         uint8_t *data = frame->data[plane];",
          "44:         int h = plane == 1 || plane == 2 ? FF_CEIL_RSHIFT(inlink->h, vsub) : inlink->h;",
          "",
          "[Removed Lines]",
          "41:     for (plane = 0; plane < 4 && frame->data[plane]; plane++) {",
          "",
          "[Added Lines]",
          "41:     for (plane = 0; plane < 4 && frame->data[plane] && frame->linesize[plane]; plane++) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:            av_get_picture_type_char(frame->pict_type),",
          "69:            checksum, plane_checksum[0]);",
          "72:         av_log(ctx, AV_LOG_INFO, \" %08X\", plane_checksum[plane]);",
          "73:     av_log(ctx, AV_LOG_INFO, \"]\\n\");",
          "",
          "[Removed Lines]",
          "71:     for (plane = 1; plane < 4 && frame->data[plane]; plane++)",
          "",
          "[Added Lines]",
          "71:     for (plane = 1; plane < 4 && frame->data[plane] && frame->linesize[plane]; plane++)",
          "",
          "---------------"
        ],
        "libavfilter/vf_vignette.c||libavfilter/vf_vignette.c": [
          "File: libavfilter/vf_vignette.c -> libavfilter/vf_vignette.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:     } else {",
          "240:         int plane;",
          "243:             uint8_t       *dst = out->data[plane];",
          "244:             const uint8_t *src = in ->data[plane];",
          "245:             const float *fmap = s->fmap;",
          "",
          "[Removed Lines]",
          "242:         for (plane = 0; plane < 4 && in->data[plane]; plane++) {",
          "",
          "[Added Lines]",
          "242:         for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64d362fce718d5dfe108c147971ca9558f5bed24",
      "candidate_info": {
        "commit_hash": "64d362fce718d5dfe108c147971ca9558f5bed24",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/64d362fce718d5dfe108c147971ca9558f5bed24",
        "files": [
          "libavfilter/vf_boxblur.c",
          "libavfilter/vf_delogo.c",
          "libavfilter/vf_fieldorder.c",
          "libavfilter/vf_gradfun.c",
          "libavfilter/vf_hflip.c",
          "libavfilter/vf_kerndeint.c",
          "libavfilter/vf_lut.c",
          "libavfilter/vf_pad.c",
          "libavfilter/vf_showinfo.c"
        ],
        "message": "avfilter: fix plane validity checks\n\nFixes out of array accesses\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit e43a0a232dbf6d3c161823c2e07c52e76227a1bc)\n\nConflicts:\n\n\tlibavfilter/vf_delogo.c\n\tlibavfilter/vf_fieldmatch.c\n\tlibavfilter/vf_fieldorder.c\n\tlibavfilter/vf_hflip.c\n\tlibavfilter/vf_kerndeint.c\n\tlibavfilter/vf_lut.c\n\tlibavfilter/vf_pad.c\n\tlibavfilter/vf_showinfo.c\n\tlibavfilter/vf_vignette.c\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavfilter/vf_boxblur.c||libavfilter/vf_boxblur.c",
          "libavfilter/vf_delogo.c||libavfilter/vf_delogo.c",
          "libavfilter/vf_fieldorder.c||libavfilter/vf_fieldorder.c",
          "libavfilter/vf_gradfun.c||libavfilter/vf_gradfun.c",
          "libavfilter/vf_hflip.c||libavfilter/vf_hflip.c",
          "libavfilter/vf_kerndeint.c||libavfilter/vf_kerndeint.c",
          "libavfilter/vf_lut.c||libavfilter/vf_lut.c",
          "libavfilter/vf_pad.c||libavfilter/vf_pad.c",
          "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavfilter/vf_boxblur.c||libavfilter/vf_boxblur.c",
            "libavfilter/vf_delogo.c||libavfilter/vf_delogo.c",
            "libavfilter/vf_fieldorder.c||libavfilter/vf_fieldorder.c",
            "libavfilter/vf_gradfun.c||libavfilter/vf_gradfun.c",
            "libavfilter/vf_hflip.c||libavfilter/vf_hflip.c",
            "libavfilter/vf_kerndeint.c||libavfilter/vf_kerndeint.c",
            "libavfilter/vf_lut.c||libavfilter/vf_lut.c",
            "libavfilter/vf_pad.c||libavfilter/vf_pad.c",
            "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c"
          ],
          "candidate": [
            "libavfilter/vf_boxblur.c||libavfilter/vf_boxblur.c",
            "libavfilter/vf_delogo.c||libavfilter/vf_delogo.c",
            "libavfilter/vf_fieldorder.c||libavfilter/vf_fieldorder.c",
            "libavfilter/vf_gradfun.c||libavfilter/vf_gradfun.c",
            "libavfilter/vf_hflip.c||libavfilter/vf_hflip.c",
            "libavfilter/vf_kerndeint.c||libavfilter/vf_kerndeint.c",
            "libavfilter/vf_lut.c||libavfilter/vf_lut.c",
            "libavfilter/vf_pad.c||libavfilter/vf_pad.c",
            "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c"
          ]
        }
      },
      "candidate_diff": {
        "libavfilter/vf_boxblur.c||libavfilter/vf_boxblur.c": [
          "File: libavfilter/vf_boxblur.c -> libavfilter/vf_boxblur.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "346:     }",
          "347:     avfilter_copy_buffer_ref_props(out, in);",
          "350:         hblur(out->data[plane], out->linesize[plane],",
          "351:               in ->data[plane], in ->linesize[plane],",
          "352:               w[plane], h[plane], boxblur->radius[plane], boxblur->power[plane],",
          "353:               boxblur->temp);",
          "356:         vblur(out->data[plane], out->linesize[plane],",
          "357:               out->data[plane], out->linesize[plane],",
          "358:               w[plane], h[plane], boxblur->radius[plane], boxblur->power[plane],",
          "",
          "[Removed Lines]",
          "349:     for (plane = 0; in->data[plane] && plane < 4; plane++)",
          "355:     for (plane = 0; in->data[plane] && plane < 4; plane++)",
          "",
          "[Added Lines]",
          "349:     for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++)",
          "355:     for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++)",
          "",
          "---------------"
        ],
        "libavfilter/vf_delogo.c||libavfilter/vf_delogo.c": [
          "File: libavfilter/vf_delogo.c -> libavfilter/vf_delogo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:         avfilter_copy_buffer_ref_props(out, in);",
          "233:     }",
          "236:         int hsub = plane == 1 || plane == 2 ? hsub0 : 0;",
          "237:         int vsub = plane == 1 || plane == 2 ? vsub0 : 0;",
          "",
          "[Removed Lines]",
          "235:     for (plane = 0; plane < 4 && in->data[plane]; plane++) {",
          "",
          "[Added Lines]",
          "235:     for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++) {",
          "",
          "---------------"
        ],
        "libavfilter/vf_fieldorder.c||libavfilter/vf_fieldorder.c": [
          "File: libavfilter/vf_fieldorder.c -> libavfilter/vf_fieldorder.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:             \"picture will move %s one line\\n\",",
          "138:             s->dst_tff ? \"up\" : \"down\");",
          "139:     h = frame->video->h;",
          "141:         line_step = frame->linesize[plane];",
          "142:         line_size = s->line_size[plane];",
          "143:         data = frame->data[plane];",
          "",
          "[Removed Lines]",
          "140:     for (plane = 0; plane < 4 && frame->data[plane]; plane++) {",
          "",
          "[Added Lines]",
          "140:     for (plane = 0; plane < 4 && frame->data[plane] && frame->linesize[plane]; plane++) {",
          "",
          "---------------"
        ],
        "libavfilter/vf_gradfun.c||libavfilter/vf_gradfun.c": [
          "File: libavfilter/vf_gradfun.c -> libavfilter/vf_gradfun.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:         avfilter_copy_buffer_ref_props(out, in);",
          "217:     }",
          "220:         int w = inlink->w;",
          "221:         int h = inlink->h;",
          "222:         int r = gf->radius;",
          "",
          "[Removed Lines]",
          "219:     for (p = 0; p < 4 && in->data[p]; p++) {",
          "",
          "[Added Lines]",
          "219:     for (p = 0; p < 4 && in->data[p] && in->linesize[p]; p++) {",
          "",
          "---------------"
        ],
        "libavfilter/vf_hflip.c||libavfilter/vf_hflip.c": [
          "File: libavfilter/vf_hflip.c -> libavfilter/vf_hflip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:     if (av_pix_fmt_desc_get(inlink->format)->flags & PIX_FMT_PAL)",
          "91:         memcpy(out->data[1], in->data[1], AVPALETTE_SIZE);",
          "94:         step = flip->max_step[plane];",
          "95:         hsub = (plane == 1 || plane == 2) ? flip->hsub : 0;",
          "96:         vsub = (plane == 1 || plane == 2) ? flip->vsub : 0;",
          "",
          "[Removed Lines]",
          "93:     for (plane = 0; plane < 4 && in->data[plane]; plane++) {",
          "",
          "[Added Lines]",
          "93:     for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++) {",
          "",
          "---------------"
        ],
        "libavfilter/vf_kerndeint.c||libavfilter/vf_kerndeint.c": [
          "File: libavfilter/vf_kerndeint.c -> libavfilter/vf_kerndeint.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:     avfilter_copy_buffer_ref_props(outpic, inpic);",
          "163:     outpic->video->interlaced = 0;",
          "166:         h = plane == 0 ? inlink->h : inlink->h >> kerndeint->vsub;",
          "167:         bwidth = kerndeint->tmp_bwidth[plane];",
          "",
          "[Removed Lines]",
          "165:     for (plane = 0; inpic->data[plane] && plane < 4; plane++) {",
          "",
          "[Added Lines]",
          "165:     for (plane = 0; plane < 4 && inpic->data[plane] && inpic->linesize[plane]; plane++) {",
          "",
          "---------------"
        ],
        "libavfilter/vf_lut.c||libavfilter/vf_lut.c": [
          "File: libavfilter/vf_lut.c -> libavfilter/vf_lut.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:         }",
          "299:     } else {",
          "302:             int vsub = plane == 1 || plane == 2 ? lut->vsub : 0;",
          "303:             int hsub = plane == 1 || plane == 2 ? lut->hsub : 0;",
          "",
          "[Removed Lines]",
          "301:         for (plane = 0; plane < 4 && in->data[plane]; plane++) {",
          "",
          "[Added Lines]",
          "301:         for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++) {",
          "",
          "---------------"
        ],
        "libavfilter/vf_pad.c||libavfilter/vf_pad.c": [
          "File: libavfilter/vf_pad.c -> libavfilter/vf_pad.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "254:     picref->video->w = w;",
          "255:     picref->video->h = h;",
          "258:         picref->data[plane] += FFALIGN(pad->x >> pad->draw.hsub[plane], align) * pad->draw.pixelstep[plane] +",
          "259:                                       (pad->y >> pad->draw.vsub[plane])        * picref->linesize[plane];",
          "",
          "[Removed Lines]",
          "257:     for (plane = 0; plane < 4 && picref->data[plane]; plane++)",
          "",
          "[Added Lines]",
          "257:     for (plane = 0; plane < 4 && picref->data[plane] && picref->linesize[plane]; plane++)",
          "",
          "---------------"
        ],
        "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c": [
          "File: libavfilter/vf_showinfo.c -> libavfilter/vf_showinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     uint32_t plane_checksum[4] = {0}, checksum = 0;",
          "51:     int i, plane, vsub = desc->log2_chroma_h;",
          "54:         int64_t linesize = av_image_get_linesize(frame->format, frame->video->w, plane);",
          "55:         uint8_t *data = frame->data[plane];",
          "56:         int h = plane == 1 || plane == 2 ? inlink->h >> vsub : inlink->h;",
          "",
          "[Removed Lines]",
          "53:     for (plane = 0; plane < 4 && frame->data[plane]; plane++) {",
          "",
          "[Added Lines]",
          "53:     for (plane = 0; plane < 4 && frame->data[plane] && frame->linesize[plane]; plane++) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:            av_get_picture_type_char(frame->video->pict_type),",
          "81:            checksum, plane_checksum[0]);",
          "84:         av_log(ctx, AV_LOG_INFO, \" %08X\", plane_checksum[plane]);",
          "85:     av_log(ctx, AV_LOG_INFO, \"]\\n\");",
          "",
          "[Removed Lines]",
          "83:     for (plane = 1; plane < 4 && frame->data[plane]; plane++)",
          "",
          "[Added Lines]",
          "83:     for (plane = 1; plane < 4 && frame->data[plane] && frame->linesize[plane]; plane++)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6be0df5080198e36a26975f1212dba51803c2390",
      "candidate_info": {
        "commit_hash": "6be0df5080198e36a26975f1212dba51803c2390",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/6be0df5080198e36a26975f1212dba51803c2390",
        "files": [
          "libavfilter/vf_pad.c"
        ],
        "message": "vf_pad: switch to filter_frame\n\nBased on patch by Anton Khirnov\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavfilter/vf_pad.c||libavfilter/vf_pad.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavfilter/vf_pad.c||libavfilter/vf_pad.c"
          ],
          "candidate": [
            "libavfilter/vf_pad.c||libavfilter/vf_pad.c"
          ]
        }
      },
      "candidate_diff": {
        "libavfilter/vf_pad.c||libavfilter/vf_pad.c": [
          "File: libavfilter/vf_pad.c -> libavfilter/vf_pad.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     uint8_t rgba_color[4];  ///< color for the padding area",
          "89:     FFDrawContext draw;",
          "90:     FFDrawColor color;",
          "92: } PadContext;",
          "94: static av_cold int init(AVFilterContext *ctx, const char *args)",
          "",
          "[Removed Lines]",
          "91:     int needs_copy;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "263:     return 0;",
          "264: }",
          "267: {",
          "268:     PadContext *pad = inlink->dst->priv;",
          "274:         return AVERROR(ENOMEM);",
          "277:         int hsub = pad->draw.hsub[plane];",
          "278:         int vsub = pad->draw.vsub[plane];",
          "283:             break;",
          "293:             break;",
          "294:     }",
          "297:         av_log(inlink->dst, AV_LOG_DEBUG, \"Direct padding impossible allocating new frame\\n\");",
          "303:             return AVERROR(ENOMEM);",
          "306:     }",
          "342:     }",
          "345:         ff_fill_rectangle(&pad->draw, &pad->color,",
          "350:     }",
          "375:         ff_copy_rectangle2(&pad->draw,",
          "379:     }",
          "389: }",
          "391: static const AVFilterPad avfilter_vf_pad_inputs[] = {",
          "",
          "[Removed Lines]",
          "266: static int start_frame(AVFilterLink *inlink, AVFilterBufferRef *inpicref)",
          "269:     AVFilterBufferRef *outpicref = avfilter_ref_buffer(inpicref, ~0);",
          "270:     AVFilterBufferRef *for_next_filter;",
          "271:     int plane, ret = 0;",
          "273:     if (!outpicref)",
          "276:     for (plane = 0; plane < 4 && outpicref->data[plane] && pad->draw.pixelstep[plane]; plane++) {",
          "280:         av_assert0(outpicref->buf->w>0 && outpicref->buf->h>0);",
          "282:         if(outpicref->format != outpicref->buf->format) //unsupported currently",
          "285:         outpicref->data[plane] -=   (pad->x  >> hsub) * pad->draw.pixelstep[plane]",
          "286:                                   + (pad->y  >> vsub) * outpicref->linesize[plane];",
          "288:         if(   does_clip(pad, outpicref, plane, hsub, vsub, 0, 0)",
          "289:            || does_clip(pad, outpicref, plane, hsub, vsub, 0, pad->h-1)",
          "290:            || does_clip(pad, outpicref, plane, hsub, vsub, pad->w-1, 0)",
          "291:            || does_clip(pad, outpicref, plane, hsub, vsub, pad->w-1, pad->h-1)",
          "292:           )",
          "295:     pad->needs_copy= plane < 4 && outpicref->data[plane] || !(outpicref->perms & AV_PERM_WRITE);",
          "296:     if(pad->needs_copy){",
          "298:         avfilter_unref_buffer(outpicref);",
          "299:         outpicref = ff_get_video_buffer(inlink->dst->outputs[0], AV_PERM_WRITE | AV_PERM_NEG_LINESIZES,",
          "300:                                         FFMAX(inlink->w, pad->w),",
          "301:                                         FFMAX(inlink->h, pad->h));",
          "302:         if (!outpicref)",
          "305:         avfilter_copy_buffer_ref_props(outpicref, inpicref);",
          "308:     outpicref->video->w = pad->w;",
          "309:     outpicref->video->h = pad->h;",
          "311:     for_next_filter = avfilter_ref_buffer(outpicref, ~0);",
          "312:     if (!for_next_filter) {",
          "313:         ret = AVERROR(ENOMEM);",
          "314:         goto fail;",
          "315:     }",
          "317:     ret = ff_start_frame(inlink->dst->outputs[0], for_next_filter);",
          "318:     if (ret < 0)",
          "319:         goto fail;",
          "321:     inlink->dst->outputs[0]->out_buf = outpicref;",
          "322:     return 0;",
          "324: fail:",
          "325:     avfilter_unref_bufferp(&outpicref);",
          "326:     return ret;",
          "327: }",
          "329: static int draw_send_bar_slice(AVFilterLink *link, int y, int h, int slice_dir, int before_slice)",
          "330: {",
          "331:     PadContext *pad = link->dst->priv;",
          "332:     int bar_y, bar_h = 0, ret = 0;",
          "334:     if        (slice_dir * before_slice ==  1 && y == pad->y) {",
          "336:         bar_y = 0;",
          "337:         bar_h = pad->y;",
          "338:     } else if (slice_dir * before_slice == -1 && (y + h) == (pad->y + pad->in_h)) {",
          "340:         bar_y = pad->y + pad->in_h;",
          "341:         bar_h = pad->h - pad->in_h - pad->y;",
          "344:     if (bar_h) {",
          "346:                           link->dst->outputs[0]->out_buf->data,",
          "347:                           link->dst->outputs[0]->out_buf->linesize,",
          "348:                           0, bar_y, pad->w, bar_h);",
          "349:         ret = ff_draw_slice(link->dst->outputs[0], bar_y, bar_h, slice_dir);",
          "351:     return ret;",
          "352: }",
          "354: static int draw_slice(AVFilterLink *link, int y, int h, int slice_dir)",
          "355: {",
          "356:     PadContext *pad = link->dst->priv;",
          "357:     AVFilterBufferRef *outpic = link->dst->outputs[0]->out_buf;",
          "358:     AVFilterBufferRef *inpic = link->cur_buf;",
          "359:     int ret;",
          "361:     y += pad->y;",
          "363:     y = ff_draw_round_to_sub(&pad->draw, 1, -1, y);",
          "364:     h = ff_draw_round_to_sub(&pad->draw, 1, -1, h);",
          "366:     if (!h)",
          "367:         return 0;",
          "368:     draw_send_bar_slice(link, y, h, slice_dir, 1);",
          "371:     ff_fill_rectangle(&pad->draw, &pad->color, outpic->data, outpic->linesize,",
          "372:                       0, y, pad->x, h);",
          "374:     if(pad->needs_copy){",
          "376:                            outpic->data, outpic->linesize,",
          "377:                            inpic ->data, inpic ->linesize,",
          "378:                            pad->x, y, 0, y - pad->y, inpic->video->w, h);",
          "382:     ff_fill_rectangle(&pad->draw, &pad->color, outpic->data, outpic->linesize,",
          "383:                       pad->x + pad->in_w, y, pad->w - pad->x - pad->in_w, h);",
          "384:     ret = ff_draw_slice(link->dst->outputs[0], y, h, slice_dir);",
          "385:     if (ret < 0)",
          "386:         return ret;",
          "388:     return draw_send_bar_slice(link, y, h, slice_dir, -1);",
          "",
          "[Added Lines]",
          "265: static int filter_frame(AVFilterLink *inlink, AVFilterBufferRef *in)",
          "268:     AVFilterBufferRef *out = avfilter_ref_buffer(in, ~0);",
          "269:     int plane, needs_copy;",
          "271:     if (!out) {",
          "272:         avfilter_unref_bufferp(&in);",
          "274:     }",
          "276:     for (plane = 0; plane < 4 && out->data[plane] && pad->draw.pixelstep[plane]; plane++) {",
          "280:         av_assert0(out->buf->w > 0 && out->buf->h > 0);",
          "282:         if (out->format != out->buf->format) //unsupported currently",
          "285:         out->data[plane] -= (pad->x  >> hsub) * pad->draw.pixelstep[plane] +",
          "286:                             (pad->y  >> vsub) * out->linesize[plane];",
          "288:         if (does_clip(pad, out, plane, hsub, vsub, 0,                   0) ||",
          "289:             does_clip(pad, out, plane, hsub, vsub, 0,          pad->h - 1) ||",
          "290:             does_clip(pad, out, plane, hsub, vsub, pad->w - 1,          0) ||",
          "291:             does_clip(pad, out, plane, hsub, vsub, pad->w - 1, pad->h - 1))",
          "294:     needs_copy = plane < 4 && out->data[plane] || !(out->perms & AV_PERM_WRITE);",
          "295:     if (needs_copy) {",
          "297:         avfilter_unref_buffer(out);",
          "298:         out = ff_get_video_buffer(inlink->dst->outputs[0], AV_PERM_WRITE | AV_PERM_NEG_LINESIZES,",
          "299:                                   FFMAX(inlink->w, pad->w),",
          "300:                                   FFMAX(inlink->h, pad->h));",
          "301:         if (!out) {",
          "302:             avfilter_unref_bufferp(&in);",
          "304:         }",
          "306:         avfilter_copy_buffer_ref_props(out, in);",
          "309:     out->video->w = pad->w;",
          "310:     out->video->h = pad->h;",
          "313:     if (pad->y) {",
          "314:         ff_fill_rectangle(&pad->draw, &pad->color,",
          "315:                           out->data, out->linesize,",
          "316:                           0, 0, pad->w, pad->y);",
          "320:     if (pad->h > pad->y + pad->in_h) {",
          "322:                           out->data, out->linesize,",
          "323:                           0, pad->y + pad->in_h, pad->w, pad->h - pad->y - pad->in_h);",
          "327:     ff_fill_rectangle(&pad->draw, &pad->color, out->data, out->linesize,",
          "328:                       0, pad->y, pad->x, in->video->h);",
          "330:     if (needs_copy) {",
          "332:                           out->data, out->linesize, in->data, in->linesize,",
          "333:                           pad->x, pad->y, 0, 0, in->video->w, in->video->h);",
          "337:     ff_fill_rectangle(&pad->draw, &pad->color, out->data, out->linesize,",
          "338:                       pad->x + pad->in_w, pad->y, pad->w - pad->x - pad->in_w,",
          "339:                       in->video->h);",
          "341:     avfilter_unref_bufferp(&in);",
          "342:     return ff_filter_frame(inlink->dst->outputs[0], out);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "394:         .type             = AVMEDIA_TYPE_VIDEO,",
          "395:         .config_props     = config_input,",
          "396:         .get_video_buffer = get_video_buffer,",
          "399:     },",
          "400:     { NULL }",
          "401: };",
          "",
          "[Removed Lines]",
          "397:         .start_frame      = start_frame,",
          "398:         .draw_slice       = draw_slice,",
          "",
          "[Added Lines]",
          "351:         .filter_frame     = filter_frame,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0663a9eab8b89a6ff5a169ad1055734e39d8b333",
      "candidate_info": {
        "commit_hash": "0663a9eab8b89a6ff5a169ad1055734e39d8b333",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/0663a9eab8b89a6ff5a169ad1055734e39d8b333",
        "files": [
          "libavfilter/vf_showinfo.c"
        ],
        "message": "vf_showinfo: switch to filter_frame\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c"
          ],
          "candidate": [
            "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c"
          ]
        }
      },
      "candidate_diff": {
        "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c": [
          "File: libavfilter/vf_showinfo.c -> libavfilter/vf_showinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     return 0;",
          "43: }",
          "46: {",
          "47:     AVFilterContext *ctx = inlink->dst;",
          "48:     ShowInfoContext *showinfo = ctx->priv;",
          "50:     const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(inlink->format);",
          "51:     uint32_t plane_checksum[4] = {0}, checksum = 0;",
          "52:     int i, plane, vsub = desc->log2_chroma_h;",
          "57:         int h = plane == 1 || plane == 2 ? inlink->h >> vsub : inlink->h;",
          "59:         if (linesize < 0)",
          "",
          "[Removed Lines]",
          "45: static int end_frame(AVFilterLink *inlink)",
          "49:     AVFilterBufferRef *picref = inlink->cur_buf;",
          "54:     for (plane = 0; picref->data[plane] && plane < 4; plane++) {",
          "55:         int64_t linesize = av_image_get_linesize(picref->format, picref->video->w, plane);",
          "56:         uint8_t *data = picref->data[plane];",
          "",
          "[Added Lines]",
          "45: static int filter_frame(AVFilterLink *inlink, AVFilterBufferRef *frame)",
          "53:     for (plane = 0; frame->data[plane] && plane < 4; plane++) {",
          "54:         int64_t linesize = av_image_get_linesize(frame->format, frame->video->w, plane);",
          "55:         uint8_t *data = frame->data[plane];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:         for (i = 0; i < h; i++) {",
          "63:             plane_checksum[plane] = av_adler32_update(plane_checksum[plane], data, linesize);",
          "64:             checksum = av_adler32_update(checksum, data, linesize);",
          "66:         }",
          "67:     }",
          "",
          "[Removed Lines]",
          "65:             data += picref->linesize[plane];",
          "",
          "[Added Lines]",
          "64:             data += frame->linesize[plane];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:            \"fmt:%s sar:%d/%d s:%dx%d i:%c iskey:%d type:%c \"",
          "72:            \"checksum:%08X plane_checksum:[%08X\",",
          "73:            showinfo->frame,",
          "75:            desc->name,",
          "82:            checksum, plane_checksum[0]);",
          "85:         av_log(ctx, AV_LOG_INFO, \" %08X\", plane_checksum[plane]);",
          "86:     av_log(ctx, AV_LOG_INFO, \"]\\n\");",
          "88:     showinfo->frame++;",
          "90: }",
          "92: static const AVFilterPad avfilter_vf_showinfo_inputs[] = {",
          "",
          "[Removed Lines]",
          "74:            av_ts2str(picref->pts), av_ts2timestr(picref->pts, &inlink->time_base), picref->pos,",
          "76:            picref->video->sample_aspect_ratio.num, picref->video->sample_aspect_ratio.den,",
          "77:            picref->video->w, picref->video->h,",
          "80:            picref->video->key_frame,",
          "81:            av_get_picture_type_char(picref->video->pict_type),",
          "84:     for (plane = 1; picref->data[plane] && plane < 4; plane++)",
          "89:     return ff_end_frame(inlink->dst->outputs[0]);",
          "",
          "[Added Lines]",
          "73:            av_ts2str(frame->pts), av_ts2timestr(frame->pts, &inlink->time_base), frame->pos,",
          "75:            frame->video->sample_aspect_ratio.num, frame->video->sample_aspect_ratio.den,",
          "76:            frame->video->w, frame->video->h,",
          "79:            frame->video->key_frame,",
          "80:            av_get_picture_type_char(frame->video->pict_type),",
          "83:     for (plane = 1; frame->data[plane] && plane < 4; plane++)",
          "88:     return ff_filter_frame(inlink->dst->outputs[0], frame);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:         .name             = \"default\",",
          "95:         .type             = AVMEDIA_TYPE_VIDEO,",
          "96:         .get_video_buffer = ff_null_get_video_buffer,",
          "99:         .min_perms        = AV_PERM_READ,",
          "100:     },",
          "101:     { NULL }",
          "",
          "[Removed Lines]",
          "97:         .start_frame      = ff_null_start_frame,",
          "98:         .end_frame        = end_frame,",
          "",
          "[Added Lines]",
          "96:         .filter_frame     = filter_frame,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "384641468b60f40e9bf9b1f887abd5e3c3a9be1c",
      "candidate_info": {
        "commit_hash": "384641468b60f40e9bf9b1f887abd5e3c3a9be1c",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/384641468b60f40e9bf9b1f887abd5e3c3a9be1c",
        "files": [
          "libavfilter/vf_delogo.c"
        ],
        "message": "vf_delogo: switch to filter_frame, this filter did not support slices\n\nBased on patch by Anton Khirnov\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavfilter/vf_delogo.c||libavfilter/vf_delogo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavfilter/vf_delogo.c||libavfilter/vf_delogo.c"
          ],
          "candidate": [
            "libavfilter/vf_delogo.c||libavfilter/vf_delogo.c"
          ]
        }
      },
      "candidate_diff": {
        "libavfilter/vf_delogo.c||libavfilter/vf_delogo.c": [
          "File: libavfilter/vf_delogo.c -> libavfilter/vf_delogo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:     return 0;",
          "210: }",
          "218: {",
          "219:     DelogoContext *delogo = inlink->dst->priv;",
          "220:     AVFilterLink *outlink = inlink->dst->outputs[0];",
          "223:     const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(inlink->format);",
          "225:     int hsub0 = desc->log2_chroma_w;",
          "226:     int vsub0 = desc->log2_chroma_h;",
          "227:     int plane;",
          "231:         int hsub = plane == 1 || plane == 2 ? hsub0 : 0;",
          "232:         int vsub = plane == 1 || plane == 2 ? vsub0 : 0;",
          "236:                      inlink->w>>hsub, inlink->h>>vsub,",
          "237:                      delogo->x>>hsub, delogo->y>>vsub,",
          "238:                      delogo->w>>hsub, delogo->h>>vsub,",
          "",
          "[Removed Lines]",
          "212: static int null_draw_slice(AVFilterLink *link, int y, int h, int slice_dir)",
          "213: {",
          "214:     return 0;",
          "215: }",
          "217: static int end_frame(AVFilterLink *inlink)",
          "221:     AVFilterBufferRef *inpicref  = inlink ->cur_buf;",
          "222:     AVFilterBufferRef *outpicref = outlink->out_buf;",
          "224:     int direct = inpicref->buf == outpicref->buf;",
          "228:     int ret;",
          "230:     for (plane = 0; plane < 4 && inpicref->data[plane]; plane++) {",
          "234:         apply_delogo(outpicref->data[plane], outpicref->linesize[plane],",
          "235:                      inpicref ->data[plane], inpicref ->linesize[plane],",
          "",
          "[Added Lines]",
          "212: static int filter_frame(AVFilterLink *inlink, AVFilterBufferRef *in)",
          "217:     AVFilterBufferRef *out;",
          "220:     int direct = 0;",
          "223:     if (in->perms & AV_PERM_WRITE) {",
          "224:         direct = 1;",
          "225:         out = in;",
          "226:     } else {",
          "227:         out = ff_get_video_buffer(outlink, AV_PERM_WRITE, outlink->w, outlink->h);",
          "228:         if (!out) {",
          "229:             avfilter_unref_bufferp(&in);",
          "230:             return AVERROR(ENOMEM);",
          "231:         }",
          "233:         avfilter_copy_buffer_ref_props(out, in);",
          "235:         out->video->w = outlink->w;",
          "236:         out->video->h = outlink->h;",
          "237:     }",
          "239:     for (plane = 0; plane < 4 && in->data[plane]; plane++) {",
          "243:         apply_delogo(out->data[plane], out->linesize[plane],",
          "244:                      in ->data[plane], in ->linesize[plane],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240:                      delogo->show, direct);",
          "241:     }",
          "247: }",
          "249: static const AVFilterPad avfilter_vf_delogo_inputs[] = {",
          "",
          "[Removed Lines]",
          "243:     if ((ret = ff_draw_slice(outlink, 0, inlink->h, 1)) < 0 ||",
          "244:         (ret = ff_end_frame(outlink)) < 0)",
          "245:         return ret;",
          "246:     return 0;",
          "",
          "[Added Lines]",
          "252:     if (!direct)",
          "253:         avfilter_unref_bufferp(&in);",
          "255:     return ff_filter_frame(outlink, out);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "251:         .name             = \"default\",",
          "252:         .type             = AVMEDIA_TYPE_VIDEO,",
          "253:         .get_video_buffer = ff_null_get_video_buffer,",
          "257:         .min_perms        = AV_PERM_WRITE | AV_PERM_READ,",
          "258:     },",
          "259:     { NULL }",
          "",
          "[Removed Lines]",
          "254:         .start_frame      = ff_inplace_start_frame,",
          "255:         .draw_slice       = null_draw_slice,",
          "256:         .end_frame        = end_frame,",
          "",
          "[Added Lines]",
          "263:         .filter_frame     = filter_frame,",
          "",
          "---------------"
        ]
      }
    }
  ]
}