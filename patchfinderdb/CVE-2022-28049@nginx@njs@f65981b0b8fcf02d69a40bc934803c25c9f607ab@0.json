{
  "cve_id": "CVE-2022-28049",
  "cve_desc": "NGINX NJS 0.7.2 was discovered to contain a NULL pointer dereference via the component njs_vmcode_array at /src/njs_vmcode.c.",
  "repo": "nginx/njs",
  "patch_hash": "f65981b0b8fcf02d69a40bc934803c25c9f607ab",
  "patch_info": {
    "commit_hash": "f65981b0b8fcf02d69a40bc934803c25c9f607ab",
    "repo": "nginx/njs",
    "commit_url": "https://github.com/nginx/njs/commit/f65981b0b8fcf02d69a40bc934803c25c9f607ab",
    "files": [
      "src/njs_vmcode.c",
      "src/test/njs_unit_test.c"
    ],
    "message": "Fixed allocation of large array literals.\n\nPreviously, allocation of large array literals may result in\nnull-pointer dereference. The reason is that njs_array_alloc() may\nreturn a slow array when size is large enough, but the instruction\ncode assumes that array is always flat.\n\nThe fix is to check fast_array flag before accessing array->start.\n\nThis closes #473 issue on Github.",
    "before_after_code_files": [
      "src/njs_vmcode.c||src/njs_vmcode.c",
      "src/test/njs_unit_test.c||src/test/njs_unit_test.c"
    ]
  },
  "patch_diff": {
    "src/njs_vmcode.c||src/njs_vmcode.c": [
      "File: src/njs_vmcode.c -> src/njs_vmcode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1056:         if (code->ctor) {",
      "1067:         } else {",
      "",
      "[Removed Lines]",
      "1058:             value = array->start;",
      "1059:             length = array->length;",
      "1061:             do {",
      "1062:                 njs_set_invalid(value);",
      "1063:                 value++;",
      "1064:                 length--;",
      "1065:             } while (length != 0);",
      "",
      "[Added Lines]",
      "1058:             if (array->object.fast_array) {",
      "1059:                 value = array->start;",
      "1060:                 length = array->length;",
      "1062:                 do {",
      "1063:                     njs_set_invalid(value);",
      "1064:                     value++;",
      "1065:                     length--;",
      "1066:                 } while (length != 0);",
      "1067:             }",
      "",
      "---------------"
    ],
    "src/test/njs_unit_test.c||src/test/njs_unit_test.c": [
      "File: src/test/njs_unit_test.c -> src/test/njs_unit_test.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "13154:     { njs_str(\"(new Function('return 5' + '** 1'.repeat(2**13)))()\"),",
      "13155:       njs_str(\"5\") },",
      "13157:     { njs_str(\"(new Function('var a = 7; return a' + '= a'.repeat(2**13)))()\"),",
      "13158:       njs_str(\"7\") },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13157:     { njs_str(\"var a = (new Function('return [' + ','.repeat(2**16) + ']'))();\"",
      "13158:      \"njs.dump(a)\"),",
      "13159:       njs_str(\"[<65536 empty items>]\") },",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a5c00d6c27306e6b226b30fbaa9a9bbe9eeacd83",
      "candidate_info": {
        "commit_hash": "a5c00d6c27306e6b226b30fbaa9a9bbe9eeacd83",
        "repo": "nginx/njs",
        "commit_url": "https://github.com/nginx/njs/commit/a5c00d6c27306e6b226b30fbaa9a9bbe9eeacd83",
        "files": [
          "auto/cc",
          "auto/help",
          "auto/libbfd",
          "auto/link",
          "auto/openssl",
          "auto/options",
          "auto/pcre",
          "auto/sources",
          "configure",
          "src/njs.h",
          "src/njs_addr2line.c",
          "src/njs_addr2line.h",
          "src/njs_function.c",
          "src/njs_main.h",
          "src/njs_shell.c",
          "src/njs_sprintf.c",
          "src/njs_vmcode.c",
          "src/njs_vmcode.h",
          "src/test/njs_unit_test.c"
        ],
        "message": "Added native function symbolizer for function tracing in debug.",
        "before_after_code_files": [
          "src/njs.h||src/njs.h",
          "src/njs_addr2line.c||src/njs_addr2line.c",
          "src/njs_addr2line.h||src/njs_addr2line.h",
          "src/njs_function.c||src/njs_function.c",
          "src/njs_main.h||src/njs_main.h",
          "src/njs_shell.c||src/njs_shell.c",
          "src/njs_sprintf.c||src/njs_sprintf.c",
          "src/njs_vmcode.c||src/njs_vmcode.c",
          "src/njs_vmcode.h||src/njs_vmcode.h",
          "src/test/njs_unit_test.c||src/test/njs_unit_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/njs_vmcode.c||src/njs_vmcode.c",
            "src/test/njs_unit_test.c||src/test/njs_unit_test.c"
          ],
          "candidate": [
            "src/njs_vmcode.c||src/njs_vmcode.c",
            "src/test/njs_unit_test.c||src/test/njs_unit_test.c"
          ]
        }
      },
      "candidate_diff": {
        "src/njs.h||src/njs.h": [
          "File: src/njs.h -> src/njs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:     uint8_t                         unhandled_rejection;",
          "254: } njs_vm_opt_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253: #ifdef NJS_DEBUG_OPCODE",
          "255: #endif",
          "",
          "---------------"
        ],
        "src/njs_addr2line.c||src/njs_addr2line.c": [
          "File: src/njs_addr2line.c -> src/njs_addr2line.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: #define _GNU_SOURCE",
          "41: #include <njs_main.h>",
          "42: #include <njs_addr2line.h>",
          "44: #include <bfd.h>",
          "45: #include <link.h>",
          "48: typedef struct {",
          "49:     const char    *file;",
          "50:     ElfW(Addr)    address;",
          "51:     ElfW(Addr)    base;",
          "52:     void          *hdr;",
          "53: } njs_file_match_t;",
          "56: typedef struct {",
          "57:     bfd_vma       pc;",
          "58:     const char    *filename;",
          "59:     const char    *functionname;",
          "60:     unsigned int  line;",
          "61:     njs_bool_t    found;",
          "62:     asymbol       **syms;",
          "63: } njs_translate_address_t;",
          "66: static u_char *njs_process_file(u_char *buf, u_char *end, bfd_vma *addr,",
          "67:     const char *file_name);",
          "68: static long njs_read_symtab(bfd *abfd, asymbol ***syms);",
          "69: static u_char *njs_translate_address(u_char *buf, u_char *end, bfd_vma *addr,",
          "70:     bfd *abfd, asymbol **syms);",
          "71: static void njs_find_address_in_section(bfd *abfd, asection *section,",
          "72:     void *data);",
          "73: static int njs_find_matching_file(struct dl_phdr_info *info, size_t size,",
          "74:     void *data);",
          "77: u_char *",
          "78: _njs_addr2line(u_char *buf, u_char *end, void *address)",
          "79: {",
          "80:     bfd_vma           addr;",
          "81:     const char        *fname;",
          "83:     njs_file_match_t  match = { .address = (ElfW(Addr)) address };",
          "85:     bfd_init();",
          "87:     dl_iterate_phdr(njs_find_matching_file, &match);",
          "89:     fname = \"/proc/self/exe\";",
          "90:     if (match.file != NULL && njs_strlen(match.file)) {",
          "91:         fname = match.file;",
          "92:     }",
          "94:     addr = (ElfW(Addr)) address - match.base;",
          "96:     return njs_process_file(buf, end, &addr, fname);",
          "97: }",
          "100: static u_char *",
          "101: njs_process_file(u_char *buf, u_char *end, bfd_vma *addr, const char *file_name)",
          "102: {",
          "103:     bfd     *abfd;",
          "104:     char    **matching;",
          "105:     u_char  *p;",
          "106:     asymbol **syms;",
          "108:     abfd = bfd_openr(file_name, NULL);",
          "109:     if (abfd == NULL) {",
          "110:         njs_stderror(\"%s: failed to open while looking for addr2line\",",
          "111:                      file_name);",
          "112:         return NULL;",
          "113:     }",
          "115:     if (bfd_check_format(abfd, bfd_archive)) {",
          "116:         njs_stderror(\"%s: can not get addresses from archive\", file_name);",
          "117:         return NULL;",
          "118:     }",
          "120:     if (!bfd_check_format_matches(abfd, bfd_object, &matching)) {",
          "121:         njs_stderror(\"%s: bfd_check_format_matches() failed\",",
          "122:                      bfd_get_filename(abfd));",
          "123:         return NULL;",
          "124:     }",
          "126:     if (njs_read_symtab(abfd, &syms) <= 0) {",
          "127:         njs_stderror(\"%s: njs_read_symtab() failed\",",
          "128:                      bfd_get_filename(abfd));",
          "129:         return NULL;",
          "130:     }",
          "132:     p = njs_translate_address(buf, end, addr, abfd, syms);",
          "134:     if (syms != NULL) {",
          "135:         free(syms);",
          "136:         syms = NULL;",
          "137:     }",
          "139:     bfd_close(abfd);",
          "141:     return p;",
          "142: }",
          "145: static long",
          "146: njs_read_symtab(bfd *abfd, asymbol ***syms)",
          "147: {",
          "148:     long      symcount;",
          "149:     unsigned  size;",
          "151:     if ((bfd_get_file_flags(abfd) & HAS_SYMS) == 0) {",
          "152:         return 0;",
          "153:     }",
          "155:     symcount = bfd_read_minisymbols(abfd, 0, (PTR) syms, &size);",
          "156:     if (symcount == 0) {",
          "157:         symcount = bfd_read_minisymbols(abfd, 1 /* dynamic */,",
          "158:                                         (PTR) syms, &size);",
          "159:     }",
          "161:     return symcount;",
          "162: }",
          "165: static u_char *",
          "166: njs_translate_address(u_char *buf, u_char *end, bfd_vma *addr, bfd *abfd,",
          "167:     asymbol **syms)",
          "168: {",
          "169:     char                     *h;",
          "170:     const char               *name;",
          "171:     njs_translate_address_t  ctx;",
          "173:     ctx.pc = *addr;",
          "174:     ctx.found = 0;",
          "175:     ctx.syms = syms;",
          "177:     bfd_map_over_sections(abfd, njs_find_address_in_section, &ctx);",
          "179:     if (!ctx.found) {",
          "180:         return njs_sprintf(buf, end, \"\\?\\? \\t\\?\\?:0 [0x%p]\", addr);",
          "181:     }",
          "183:     name = ctx.functionname;",
          "185:     if (name == NULL || *name == '\\0') {",
          "186:         name = \"??\";",
          "187:     }",
          "189:     if (ctx.filename != NULL) {",
          "190:         h = strrchr(ctx.filename, '/');",
          "191:         if (h != NULL) {",
          "192:             ctx.filename = h + 1;",
          "193:         }",
          "194:     }",
          "196:     return njs_sprintf(buf, end, \"%s() %s:%ud [0x%p]\", name,",
          "197:                        ctx.filename ? ctx.filename : \"??\", ctx.line, addr);",
          "198: }",
          "201: static void",
          "202: njs_find_address_in_section(bfd *abfd, asection *section, void *data)",
          "203: {",
          "204:     bfd_vma                  vma;",
          "205:     bfd_size_type            size;",
          "206:     njs_translate_address_t  *ctx;",
          "208:     ctx = data;",
          "210:     if (ctx->found) {",
          "211:         return;",
          "212:     }",
          "214:     if ((bfd_section_flags(section) & SEC_ALLOC) == 0) {",
          "215:         return;",
          "216:     }",
          "218:     vma = bfd_section_vma(section);",
          "219:     if (ctx->pc < vma) {",
          "220:         return;",
          "221:     }",
          "223:     size = bfd_section_size(section);",
          "224:     if (ctx->pc >= vma + size) {",
          "225:         return;",
          "226:     }",
          "228:     ctx->found = bfd_find_nearest_line(abfd, section, ctx->syms, ctx->pc - vma,",
          "229:                                        &ctx->filename, &ctx->functionname,",
          "230:                                        &ctx->line);",
          "231: }",
          "234: static int",
          "235: njs_find_matching_file(struct dl_phdr_info *info, size_t size, void *data)",
          "236: {",
          "237:     long              n;",
          "238:     const ElfW(Phdr)  *phdr;",
          "240:     ElfW(Addr)        load_base = info->dlpi_addr;",
          "241:     njs_file_match_t  *match = data;",
          "248:     phdr = info->dlpi_phdr;",
          "250:     for (n = info->dlpi_phnum; --n >= 0; phdr++) {",
          "251:         if (phdr->p_type == PT_LOAD) {",
          "252:             ElfW(Addr) vaddr = phdr->p_vaddr + load_base;",
          "254:             if (match->address >= vaddr",
          "255:                 && match->address < vaddr + phdr->p_memsz)",
          "256:             {",
          "258:                 match->file = info->dlpi_name;",
          "259:                 match->base = info->dlpi_addr;",
          "260:             }",
          "261:         }",
          "262:     }",
          "264:     return 0;",
          "265: }",
          "",
          "---------------"
        ],
        "src/njs_addr2line.h||src/njs_addr2line.h": [
          "File: src/njs_addr2line.h -> src/njs_addr2line.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #ifndef _NJS_ADDR2LINE_H_INCLUDED_",
          "8: #define _NJS_ADDR2LINE_H_INCLUDED_",
          "11:  u_char *_njs_addr2line(u_char *buf, u_char *end, void *address);",
          "14: #if defined(NJS_HAVE_LIBBFD) && defined(NJS_HAVE_DL_ITERATE_PHDR)",
          "15: #define NJS_HAVE_ADDR2LINE            1",
          "16: #define njs_addr2line(buf, end, addr) _njs_addr2line(buf, end, addr)",
          "17: #else",
          "18: #define njs_addr2line(buf, end, addr) \\",
          "19:                       njs_sprintf(buf, end, \"\\?\\?() \\?\\?:0 [0x%p]\", addr)",
          "20: #endif",
          "",
          "---------------"
        ],
        "src/njs_function.c||src/njs_function.c": [
          "File: src/njs_function.c -> src/njs_function.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "711:     native = vm->top_frame;",
          "712:     function = native->function;",
          "723: #endif",
          "725:     if (njs_fast_path(function->bound == NULL)) {",
          "",
          "[Removed Lines]",
          "714: #ifdef NJS_OPCODE_DEBUG",
          "715:  njs_str_t              name;",
          "717:  ret = njs_builtin_match_native_function(vm, function, &name);",
          "718:  if (ret != NJS_OK) {",
          "719:   name = njs_entry_unknown;",
          "720:  }",
          "722:  njs_printf(\"CALL NATIVE %V\\n\", &name);",
          "",
          "[Added Lines]",
          "714: #ifdef NJS_DEBUG_OPCODE",
          "715:     njs_str_t              name;",
          "717:     if (vm->options.opcode_debug) {",
          "719:         ret = njs_builtin_match_native_function(vm, function, &name);",
          "720:         if (ret != NJS_OK) {",
          "721:            name = njs_str_value(\"unmapped\");",
          "722:         }",
          "724:         njs_printf(\"CALL NATIVE %V %P\\n\", &name, function->u.native);",
          "725:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "737:     }",
          "739:     ret = call(vm, native->arguments, native->nargs, function->magic8);",
          "740:     if (njs_slow_path(ret == NJS_ERROR)) {",
          "741:         return ret;",
          "742:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "744: #ifdef NJS_DEBUG_OPCODE",
          "745:     if (vm->options.opcode_debug) {",
          "746:         njs_printf(\"CALL NATIVE RETCODE: %i %V %P\\n\", ret, &name,",
          "747:                    function->u.native);",
          "748:     }",
          "749: #endif",
          "",
          "---------------"
        ],
        "src/njs_main.h||src/njs_main.h": [
          "File: src/njs_main.h -> src/njs_main.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include <njs_utils.h>",
          "38: #include <njs_sprintf.h>",
          "39: #include <njs_assert.h>",
          "41: #include <njs_regex.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: #include <njs_addr2line.h>",
          "",
          "---------------"
        ],
        "src/njs_shell.c||src/njs_shell.c": [
          "File: src/njs_shell.c -> src/njs_shell.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     uint8_t                 version;",
          "37:     uint8_t                 ast;",
          "38:     uint8_t                 unhandled_rejection;",
          "39:     int                     exit_code;",
          "41:     char                    *file;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:     uint8_t                 opcode_debug;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "272:     vm_options.sandbox = opts.sandbox;",
          "273:     vm_options.unsafe = !opts.safe;",
          "274:     vm_options.module = opts.module;",
          "276:     vm_options.ops = &njs_console_ops;",
          "277:     vm_options.addons = njs_console_addon_modules;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276: #ifdef NJS_DEBUG_OPCODE",
          "277:     vm_options.opcode_debug = opts.opcode_debug;",
          "278: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "334:         \"  -d                print disassembled code.\\n\"",
          "335:         \"  -e                set failure exit code.\\n\"",
          "336:         \"  -f                disabled denormals mode.\\n\"",
          "337:         \"  -p                set path prefix for modules.\\n\"",
          "338:         \"  -q                disable interactive introduction prompt.\\n\"",
          "339:         \"  -r                ignore unhandled promise rejection.\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "341: #ifdef NJS_DEBUG_OPCODE",
          "342:         \"  -o                enable opcode debug.\\n\"",
          "343: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "410:             opts->denormals = 0;",
          "411:             break;",
          "413:         case 'p':",
          "414:             if (++i < argc) {",
          "415:                 opts->n_paths++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "420: #ifdef NJS_DEBUG_OPCODE",
          "421:         case 'o':",
          "422:             opts->opcode_debug = 1;",
          "423:             break;",
          "424: #endif",
          "",
          "---------------"
        ],
        "src/njs_sprintf.c||src/njs_sprintf.c": [
          "File: src/njs_sprintf.c -> src/njs_sprintf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:             goto number;",
          "375:         case 'c':",
          "376:             d = va_arg(args, int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "376:         case 'P':",
          "377:             buf = njs_addr2line(buf, end, va_arg(args, void *));",
          "378:             fmt++;",
          "379:             continue;",
          "",
          "---------------"
        ],
        "src/njs_vmcode.c||src/njs_vmcode.c": [
          "File: src/njs_vmcode.c -> src/njs_vmcode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: #endif",
          "172:         if (op > NJS_VMCODE_NORET) {",
          "",
          "[Removed Lines]",
          "168: #ifdef NJS_OPCODE_DEBUG",
          "169:         njs_disassemble(pc, NULL, 1, NULL);",
          "",
          "[Added Lines]",
          "168: #ifdef NJS_DEBUG_OPCODE",
          "169:         if (vm->options.opcode_debug) {",
          "170:             njs_disassemble(pc, NULL, 1, NULL);",
          "171:         }",
          "",
          "---------------"
        ],
        "src/njs_vmcode.h||src/njs_vmcode.h": [
          "File: src/njs_vmcode.h -> src/njs_vmcode.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "451: njs_object_t *njs_function_new_object(njs_vm_t *vm, njs_value_t *constructor);",
          "454: #define njs_vmcode_debug(vm, pc, prefix) {                                    \\",
          "456:             njs_vm_code_t  *code;                                             \\",
          "457:                                                                               \\",
          "458:             code = njs_lookup_code(vm, pc);                                   \\",
          "",
          "[Removed Lines]",
          "453: #ifdef NJS_OPCODE_DEBUG",
          "455:         do {                                                                  \\",
          "",
          "[Added Lines]",
          "453: #ifdef NJS_DEBUG_OPCODE",
          "455:         if (vm->options.opcode_debug) do {                                    \\",
          "",
          "---------------"
        ],
        "src/test/njs_unit_test.c||src/test/njs_unit_test.c": [
          "File: src/test/njs_unit_test.c -> src/test/njs_unit_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "13269:       njs_str(\"5\") },",
          "13271:     { njs_str(\"var a = (new Function('return [' + ','.repeat(2**16) + ']'))();\"",
          "13273:       njs_str(\"[<65536 empty items>]\") },",
          "13275:     { njs_str(\"(new Function('var a = 7; return a' + '= a'.repeat(2**13)))()\"),",
          "",
          "[Removed Lines]",
          "13272:      \"njs.dump(a)\"),",
          "",
          "[Added Lines]",
          "13272:               \"njs.dump(a)\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23415: }",
          "23418: static njs_int_t",
          "23419: njs_vm_internal_api_test(njs_unit_test_t unused[], size_t num, njs_str_t *name,",
          "23420:     njs_opts_t *opts, njs_stat_t *stat)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23418: #ifdef NJS_HAVE_ADDR2LINE",
          "23419: static njs_int_t",
          "23420: njs_addr2line_test(njs_vm_t *vm, njs_opts_t *opts, njs_stat_t *stat)",
          "23421: {",
          "23422:     njs_str_t   v;",
          "23423:     njs_uint_t  i;",
          "23424:     u_char      buf[512];",
          "23426:     static const struct {",
          "23427:         void         *fp;",
          "23428:         const char   *name;",
          "23429:     } tests[] = {",
          "23430:         { njs_addr2line_test, njs_stringify(njs_addr2line_test) },",
          "23431:         { njs_to_int32_test, njs_stringify(njs_to_int32_test) },",
          "23432:     };",
          "23434:     for (i = 0; i < njs_nitems(tests); i++) {",
          "23435:         v.start = buf;",
          "23436:         v.length = njs_sprintf(buf, &buf[512], \"%P\", tests[i].fp) - buf;",
          "23438:         if (memcmp(buf, tests[i].name, njs_strlen(tests[i].name))) {",
          "23439:             njs_printf(\"njs_addr2line_test(%p):\\n\"",
          "23440:                        \"expected: %s\\n     got: %V\\n\",",
          "23441:                        tests[i].fp, tests[i].name, &v);",
          "23443:             stat->failed++;",
          "23444:             continue;",
          "23445:         }",
          "23447:         stat->passed++;",
          "23448:     }",
          "23450:     return NJS_OK;",
          "23451: }",
          "23452: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "23443:           njs_str(\"njs_string_to_index_test\") },",
          "23444:         { njs_to_int32_test,",
          "23445:           njs_str(\"njs_to_int32_test\") },",
          "23446:     };",
          "23448:     vm = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23483: #ifdef NJS_HAVE_ADDR2LINE",
          "23484:         { njs_addr2line_test,",
          "23485:           njs_str(\"njs_addr2line_test\") },",
          "23486: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}