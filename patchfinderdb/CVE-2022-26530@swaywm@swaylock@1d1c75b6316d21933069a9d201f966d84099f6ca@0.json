{
  "cve_id": "CVE-2022-26530",
  "cve_desc": "swaylock before 1.6 allows attackers to trigger a crash and achieve unlocked access to a Wayland compositor.",
  "repo": "swaywm/swaylock",
  "patch_hash": "1d1c75b6316d21933069a9d201f966d84099f6ca",
  "patch_info": {
    "commit_hash": "1d1c75b6316d21933069a9d201f966d84099f6ca",
    "repo": "swaywm/swaylock",
    "commit_url": "https://github.com/swaywm/swaylock/commit/1d1c75b6316d21933069a9d201f966d84099f6ca",
    "files": [
      "include/swaylock.h",
      "main.c",
      "meson.build"
    ],
    "message": "Add support for ext-session-lock-v1\n\nThis is a new protocol to lock the session [1]. It should be more\nreliable than layer-shell + input-inhibitor.\n\n[1]: https://gitlab.freedesktop.org/wayland/wayland-protocols/-/merge_requests/131",
    "before_after_code_files": [
      "include/swaylock.h||include/swaylock.h",
      "main.c||main.c",
      "meson.build||meson.build"
    ]
  },
  "patch_diff": {
    "include/swaylock.h||include/swaylock.h": [
      "File: include/swaylock.h -> include/swaylock.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "89:  int failed_attempts;",
      "90:  bool run_display;",
      "91:  struct zxdg_output_manager_v1 *zxdg_output_manager;",
      "92: };",
      "94: struct swaylock_surface {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "92:  struct ext_session_lock_manager_v1 *ext_session_lock_manager_v1;",
      "93:  struct ext_session_lock_v1 *ext_session_lock_v1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "101:  struct wl_surface *child; // surface made into subsurface",
      "102:  struct wl_subsurface *subsurface;",
      "103:  struct zwlr_layer_surface_v1 *layer_surface;",
      "104:  struct pool_buffer buffers[2];",
      "105:  struct pool_buffer indicator_buffers[2];",
      "106:  struct pool_buffer *current_buffer;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:  struct ext_session_lock_surface_v1 *ext_session_lock_surface_v1;",
      "",
      "---------------"
    ],
    "main.c||main.c": [
      "File: main.c -> main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #include \"wlr-input-inhibitor-unstable-v1-client-protocol.h\"",
      "27: #include \"wlr-layer-shell-unstable-v1-client-protocol.h\"",
      "28: #include \"xdg-output-unstable-v1-client-protocol.h\"",
      "30: static uint32_t parse_color(const char *color) {",
      "31:  if (color[0] == '#') {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: #include \"ext-session-lock-v1-client-protocol.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "97:  if (surface->layer_surface != NULL) {",
      "98:   zwlr_layer_surface_v1_destroy(surface->layer_surface);",
      "99:  }",
      "100:  if (surface->surface != NULL) {",
      "101:   wl_surface_destroy(surface->surface);",
      "102:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "101:  if (surface->ext_session_lock_surface_v1 != NULL) {",
      "102:   ext_session_lock_surface_v1_destroy(surface->ext_session_lock_surface_v1);",
      "103:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "109: }",
      "111: static const struct zwlr_layer_surface_v1_listener layer_surface_listener;",
      "113: static cairo_surface_t *select_image(struct swaylock_state *state,",
      "114:   struct swaylock_surface *surface);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "116: static const struct ext_session_lock_surface_v1_listener ext_session_lock_surface_v1_listener;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "120:  return (surface->state->args.colors.background & 0xff) == 0xff;",
      "121: }",
      "124:  struct swaylock_state *state = surface->state;",
      "126:  surface->image = select_image(state, surface);",
      "",
      "[Removed Lines]",
      "123: static void create_layer_surface(struct swaylock_surface *surface) {",
      "",
      "[Added Lines]",
      "128: static void create_surface(struct swaylock_surface *surface) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "134:  assert(surface->subsurface);",
      "135:  wl_subsurface_set_sync(surface->subsurface);",
      "154:  if (surface_is_opaque(surface) &&",
      "155:    surface->state->args.mode != BACKGROUND_MODE_CENTER &&",
      "",
      "[Removed Lines]",
      "137:  surface->layer_surface = zwlr_layer_shell_v1_get_layer_surface(",
      "138:    state->layer_shell, surface->surface, surface->output,",
      "139:    ZWLR_LAYER_SHELL_V1_LAYER_OVERLAY, \"lockscreen\");",
      "140:  assert(surface->layer_surface);",
      "142:  zwlr_layer_surface_v1_set_size(surface->layer_surface, 0, 0);",
      "143:  zwlr_layer_surface_v1_set_anchor(surface->layer_surface,",
      "144:    ZWLR_LAYER_SURFACE_V1_ANCHOR_TOP |",
      "145:    ZWLR_LAYER_SURFACE_V1_ANCHOR_RIGHT |",
      "146:    ZWLR_LAYER_SURFACE_V1_ANCHOR_BOTTOM |",
      "147:    ZWLR_LAYER_SURFACE_V1_ANCHOR_LEFT);",
      "148:  zwlr_layer_surface_v1_set_exclusive_zone(surface->layer_surface, -1);",
      "149:  zwlr_layer_surface_v1_set_keyboard_interactivity(",
      "150:    surface->layer_surface, true);",
      "151:  zwlr_layer_surface_v1_add_listener(surface->layer_surface,",
      "152:    &layer_surface_listener, surface);",
      "",
      "[Added Lines]",
      "142:  if (state->ext_session_lock_v1) {",
      "143:   surface->ext_session_lock_surface_v1 = ext_session_lock_v1_get_lock_surface(",
      "144:     state->ext_session_lock_v1, surface->surface, surface->output);",
      "145:   ext_session_lock_surface_v1_add_listener(surface->ext_session_lock_surface_v1,",
      "146:     &ext_session_lock_surface_v1_listener, surface);",
      "147:  } else {",
      "148:   surface->layer_surface = zwlr_layer_shell_v1_get_layer_surface(",
      "149:     state->layer_shell, surface->surface, surface->output,",
      "150:     ZWLR_LAYER_SHELL_V1_LAYER_OVERLAY, \"lockscreen\");",
      "152:   zwlr_layer_surface_v1_set_size(surface->layer_surface, 0, 0);",
      "153:   zwlr_layer_surface_v1_set_anchor(surface->layer_surface,",
      "154:     ZWLR_LAYER_SURFACE_V1_ANCHOR_TOP |",
      "155:     ZWLR_LAYER_SURFACE_V1_ANCHOR_RIGHT |",
      "156:     ZWLR_LAYER_SURFACE_V1_ANCHOR_BOTTOM |",
      "157:     ZWLR_LAYER_SURFACE_V1_ANCHOR_LEFT);",
      "158:   zwlr_layer_surface_v1_set_exclusive_zone(surface->layer_surface, -1);",
      "159:   zwlr_layer_surface_v1_set_keyboard_interactivity(",
      "160:     surface->layer_surface, true);",
      "161:   zwlr_layer_surface_v1_add_listener(surface->layer_surface,",
      "162:     &layer_surface_listener, surface);",
      "163:  }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "161:   wl_region_destroy(region);",
      "162:  }",
      "165: }",
      "167: static void layer_surface_configure(void *data,",
      "",
      "[Removed Lines]",
      "164:  wl_surface_commit(surface->surface);",
      "",
      "[Added Lines]",
      "175:  if (!state->ext_session_lock_v1) {",
      "176:   wl_surface_commit(surface->surface);",
      "177:  }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "188:  .closed = layer_surface_closed,",
      "189: };",
      "191: static const struct wl_callback_listener surface_frame_listener;",
      "193: static void surface_frame_handle_done(void *data, struct wl_callback *callback,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "204: static void ext_session_lock_surface_v1_handle_configure(void *data,",
      "205:   struct ext_session_lock_surface_v1 *lock_surface, uint32_t serial,",
      "206:   uint32_t width, uint32_t height) {",
      "207:  struct swaylock_surface *surface = data;",
      "208:  surface->width = width;",
      "209:  surface->height = height;",
      "210:  surface->indicator_width = 0;",
      "211:  surface->indicator_height = 0;",
      "212:  ext_session_lock_surface_v1_ack_configure(lock_surface, serial);",
      "213:  render_frame_background(surface);",
      "214:  render_frame(surface);",
      "215: }",
      "217: static const struct ext_session_lock_surface_v1_listener ext_session_lock_surface_v1_listener = {",
      "218:  .configure = ext_session_lock_surface_v1_handle_configure,",
      "219: };",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "302:  .description = handle_xdg_output_description,",
      "303: };",
      "305: static void handle_global(void *data, struct wl_registry *registry,",
      "306:   uint32_t name, const char *interface, uint32_t version) {",
      "307:  struct swaylock_state *state = data;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "335: static void ext_session_lock_v1_handle_locked(void *data, struct ext_session_lock_v1 *lock) {",
      "337: }",
      "339: static void ext_session_lock_v1_handle_finished(void *data, struct ext_session_lock_v1 *lock) {",
      "340:  swaylock_log(LOG_ERROR, \"Failed to lock session -- \"",
      "341:    \"is another lockscreen running?\");",
      "342:  exit(2);",
      "343: }",
      "345: static const struct ext_session_lock_v1_listener ext_session_lock_v1_listener = {",
      "346:  .locked = ext_session_lock_v1_handle_locked,",
      "347:  .finished = ext_session_lock_v1_handle_finished,",
      "348: };",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "341:   wl_list_insert(&state->surfaces, &surface->link);",
      "343:   if (state->run_display) {",
      "345:    wl_display_roundtrip(state->display);",
      "346:   }",
      "347:  }",
      "348: }",
      "",
      "[Removed Lines]",
      "344:    create_layer_surface(surface);",
      "",
      "[Added Lines]",
      "389:    create_surface(surface);",
      "392:  } else if (strcmp(interface, ext_session_lock_manager_v1_interface.name) == 0) {",
      "393:   state->ext_session_lock_manager_v1 = wl_registry_bind(registry, name,",
      "394:     &ext_session_lock_manager_v1_interface, 1);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1182:  struct wl_registry *registry = wl_display_get_registry(state.display);",
      "1183:  wl_registry_add_listener(registry, &registry_listener, &state);",
      "1184:  wl_display_roundtrip(state.display);",
      "1190:   return 1;",
      "1191:  }",
      "1194:  if (wl_display_roundtrip(state.display) == -1) {",
      "1195:   free(state.args.font);",
      "1199:  }",
      "1201:  if (state.zxdg_output_manager) {",
      "",
      "[Removed Lines]",
      "1185:  assert(state.compositor && state.layer_shell && state.shm);",
      "1186:  if (!state.input_inhibit_manager) {",
      "1187:   free(state.args.font);",
      "1188:   swaylock_log(LOG_ERROR, \"Compositor does not support the input \"",
      "1189:     \"inhibitor protocol, refusing to run insecurely\");",
      "1193:  zwlr_input_inhibit_manager_v1_get_inhibitor(state.input_inhibit_manager);",
      "1196:   swaylock_log(LOG_ERROR, \"Exiting - failed to inhibit input:\"",
      "1197:     \" is another lockscreen already running?\");",
      "1198:   return 2;",
      "",
      "[Added Lines]",
      "1234:  if (!state.compositor || !state.shm) {",
      "1235:   swaylock_log(LOG_ERROR, \"Missing wl_compositor or wl_shm\");",
      "1236:   return 1;",
      "1237:  }",
      "1239:  if (state.ext_session_lock_manager_v1) {",
      "1240:   swaylock_log(LOG_DEBUG, \"Using ext-session-lock-v1\");",
      "1241:   state.ext_session_lock_v1 = ext_session_lock_manager_v1_lock(state.ext_session_lock_manager_v1);",
      "1242:   ext_session_lock_v1_add_listener(state.ext_session_lock_v1,",
      "1243:     &ext_session_lock_v1_listener, &state);",
      "1244:  } else if (state.layer_shell && state.input_inhibit_manager) {",
      "1245:   swaylock_log(LOG_DEBUG, \"Using wlr-layer-shell + wlr-input-inhibitor\");",
      "1246:   zwlr_input_inhibit_manager_v1_get_inhibitor(state.input_inhibit_manager);",
      "1247:  } else {",
      "1248:   swaylock_log(LOG_ERROR, \"Missing ext-session-lock-v1, wlr-layer-shell \"",
      "1249:     \"and wlr-input-inhibitor\");",
      "1255:   if (state.input_inhibit_manager) {",
      "1256:    swaylock_log(LOG_ERROR, \"Exiting - failed to inhibit input:\"",
      "1257:      \" is another lockscreen already running?\");",
      "1258:    return 2;",
      "1259:   }",
      "1260:   return 1;",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1215:  struct swaylock_surface *surface;",
      "1216:  wl_list_for_each(surface, &state.surfaces, link) {",
      "1218:  }",
      "1220:  if (state.args.daemonize) {",
      "",
      "[Removed Lines]",
      "1217:   create_layer_surface(surface);",
      "",
      "[Added Lines]",
      "1279:   create_surface(surface);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "1237:   loop_poll(state.eventloop);",
      "1238:  }",
      "1240:  free(state.args.font);",
      "1241:  return 0;",
      "1242: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1302:  if (state.ext_session_lock_v1) {",
      "1303:   ext_session_lock_v1_unlock_and_destroy(state.ext_session_lock_v1);",
      "1304:   wl_display_flush(state.display);",
      "1305:  }",
      "",
      "---------------"
    ],
    "meson.build||meson.build": [
      "File: meson.build -> meson.build",
      "--- Hunk 1 ---",
      "[Context before]",
      "36: endif",
      "38: wayland_client = dependency('wayland-client')",
      "40: xkbcommon      = dependency('xkbcommon')",
      "41: cairo          = dependency('cairo')",
      "42: gdk_pixbuf     = dependency('gdk-pixbuf-2.0', required: get_option('gdk-pixbuf'))",
      "",
      "[Removed Lines]",
      "39: wayland_protos = dependency('wayland-protocols', version: '>=1.14', fallback: 'wayland-protocols')",
      "",
      "[Added Lines]",
      "39: wayland_protos = dependency('wayland-protocols', version: '>=1.25', fallback: 'wayland-protocols')",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "86: client_protocols = [",
      "87:  [wl_protocol_dir, 'stable/xdg-shell/xdg-shell.xml'],",
      "88:  [wl_protocol_dir, 'unstable/xdg-output/xdg-output-unstable-v1.xml'],",
      "89:  ['wlr-layer-shell-unstable-v1.xml'],",
      "90:  ['wlr-input-inhibitor-unstable-v1.xml'],",
      "91: ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "89:  [wl_protocol_dir, 'staging/ext-session-lock/ext-session-lock-v1.xml'],",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "386f8f424157e39ba5f24b1f64e6322105ec7bf4",
      "candidate_info": {
        "commit_hash": "386f8f424157e39ba5f24b1f64e6322105ec7bf4",
        "repo": "swaywm/swaylock",
        "commit_url": "https://github.com/swaywm/swaylock/commit/386f8f424157e39ba5f24b1f64e6322105ec7bf4",
        "files": [
          "meson.build"
        ],
        "message": "build: bump Meson min version to 0.58\n\nThe next commit will need that version. Adjust the build to not\ntrigger deprecation warnings.",
        "before_after_code_files": [
          "meson.build||meson.build"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/swaywm/swaylock/pull/219"
        ],
        "olp_code_files": {
          "patch": [
            "meson.build||meson.build"
          ],
          "candidate": [
            "meson.build||meson.build"
          ]
        }
      },
      "candidate_diff": {
        "meson.build||meson.build": [
          "File: meson.build -> meson.build",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:  'c',",
          "4:  version: '1.6',",
          "5:  license: 'MIT',",
          "7:  default_options: [",
          "8:   'c_std=c11',",
          "9:   'warning_level=2',",
          "",
          "[Removed Lines]",
          "6:  meson_version: '>=0.48.0',",
          "",
          "[Added Lines]",
          "6:  meson_version: '>=0.58.0',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: version = '\"@0@\"'.format(meson.project_version())",
          "54: if git.found()",
          "57:  if git_commit_hash.returncode() == 0 and git_branch.returncode() == 0",
          "58:   version = '\"@0@ (\" __DATE__ \", branch \\'@1@\\')\"'.format(git_commit_hash.stdout().strip(), git_branch.stdout().strip())",
          "59:  endif",
          "60: endif",
          "61: add_project_arguments('-DSWAYLOCK_VERSION=@0@'.format(version), language: 'c')",
          "65: if wayland_client.version().version_compare('>=1.14.91')",
          "66:  code_type = 'private-code'",
          "",
          "[Removed Lines]",
          "55:  git_commit_hash = run_command([git.path(), 'describe', '--always', '--tags'])",
          "56:  git_branch = run_command([git.path(), 'rev-parse', '--abbrev-ref', 'HEAD'])",
          "63: wl_protocol_dir = wayland_protos.get_pkgconfig_variable('pkgdatadir')",
          "",
          "[Added Lines]",
          "55:  git_commit_hash = run_command([git, 'describe', '--always', '--tags'])",
          "56:  git_branch = run_command([git, 'rev-parse', '--abbrev-ref', 'HEAD'])",
          "63: wl_protocol_dir = wayland_protos.get_variable('pkgdatadir')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "175:    input: filename,",
          "176:    output: output,",
          "177:    command: [",
          "179:    ],",
          "180:    install: true,",
          "181:    install_dir: '@0@/man@1@'.format(mandir, section)",
          "",
          "[Removed Lines]",
          "178:     sh, '-c', '@0@ < @INPUT@ > @1@'.format(scdoc.path(), output)",
          "",
          "[Added Lines]",
          "178:     sh, '-c', '@0@ < @INPUT@ > @1@'.format(scdoc.full_path(), output)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "199:   'completions/bash/swaylock',",
          "200:  )",
          "201:  if bash_comp.found()",
          "203:  else",
          "204:   bash_install_dir = datadir + '/bash-completion/completions'",
          "205:  endif",
          "",
          "[Removed Lines]",
          "202:   bash_install_dir = bash_comp.get_pkgconfig_variable('completionsdir')",
          "",
          "[Added Lines]",
          "202:   bash_install_dir = bash_comp.get_variable('completionsdir')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "212:   'completions/fish/swaylock.fish',",
          "213:  )",
          "214:  if fish_comp.found()",
          "216:  else",
          "217:   fish_install_dir = datadir + '/fish/vendor_completions.d'",
          "218:  endif",
          "",
          "[Removed Lines]",
          "215:   fish_install_dir = fish_comp.get_pkgconfig_variable('completionsdir')",
          "",
          "[Added Lines]",
          "215:   fish_install_dir = fish_comp.get_variable('completionsdir')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6f804013f36e8cb66e1b8da4552b39aa421b8ab",
      "candidate_info": {
        "commit_hash": "f6f804013f36e8cb66e1b8da4552b39aa421b8ab",
        "repo": "swaywm/swaylock",
        "commit_url": "https://github.com/swaywm/swaylock/commit/f6f804013f36e8cb66e1b8da4552b39aa421b8ab",
        "files": [
          "main.c"
        ],
        "message": "Check for existence of subcompositor\n\nWe need this protocol",
        "before_after_code_files": [
          "main.c||main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "main.c||main.c"
          ],
          "candidate": [
            "main.c||main.c"
          ]
        }
      },
      "candidate_diff": {
        "main.c||main.c": [
          "File: main.c -> main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1226:  wl_registry_add_listener(registry, &registry_listener, &state);",
          "1227:  wl_display_roundtrip(state.display);",
          "1231:   return 1;",
          "1232:  }",
          "",
          "[Removed Lines]",
          "1229:  if (!state.compositor || !state.shm) {",
          "1230:   swaylock_log(LOG_ERROR, \"Missing wl_compositor or wl_shm\");",
          "",
          "[Added Lines]",
          "1229:  if (!state.compositor) {",
          "1230:   swaylock_log(LOG_ERROR, \"Missing wl_compositor\");",
          "1231:   return 1;",
          "1232:  }",
          "1234:  if (!state.subcompositor) {",
          "1235:   swaylock_log(LOG_ERROR, \"Missing wl_subcompositor\");",
          "1236:   return 1;",
          "1237:  }",
          "1239:  if (!state.shm) {",
          "1240:   swaylock_log(LOG_ERROR, \"Missing wl_shm\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2813756a1919ecdea84b2bb164320104aec371ef",
      "candidate_info": {
        "commit_hash": "2813756a1919ecdea84b2bb164320104aec371ef",
        "repo": "swaywm/swaylock",
        "commit_url": "https://github.com/swaywm/swaylock/commit/2813756a1919ecdea84b2bb164320104aec371ef",
        "files": [
          "README.md",
          "include/swaylock.h",
          "main.c",
          "meson.build"
        ],
        "message": "Drop xdg-output requirement\n\nRely on wl_output v4 instead.",
        "before_after_code_files": [
          "include/swaylock.h||include/swaylock.h",
          "main.c||main.c",
          "meson.build||meson.build"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/swaylock.h||include/swaylock.h",
            "main.c||main.c",
            "meson.build||meson.build"
          ],
          "candidate": [
            "include/swaylock.h||include/swaylock.h",
            "main.c||main.c",
            "meson.build||meson.build"
          ]
        }
      },
      "candidate_diff": {
        "include/swaylock.h||include/swaylock.h": [
          "File: include/swaylock.h -> include/swaylock.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:  enum auth_state auth_state;",
          "89:  int failed_attempts;",
          "90:  bool run_display;",
          "92:  struct ext_session_lock_manager_v1 *ext_session_lock_manager_v1;",
          "93:  struct ext_session_lock_v1 *ext_session_lock_v1;",
          "94: };",
          "",
          "[Removed Lines]",
          "91:  struct zxdg_output_manager_v1 *zxdg_output_manager;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:  struct swaylock_state *state;",
          "99:  struct wl_output *output;",
          "100:  uint32_t output_global_name;",
          "102:  struct wl_surface *surface;",
          "103:  struct wl_surface *child; // surface made into subsurface",
          "104:  struct wl_subsurface *subsurface;",
          "",
          "[Removed Lines]",
          "101:  struct zxdg_output_v1 *xdg_output;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "main.c||main.c": [
          "File: main.c -> main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include \"swaylock.h\"",
          "26: #include \"wlr-input-inhibitor-unstable-v1-client-protocol.h\"",
          "27: #include \"wlr-layer-shell-unstable-v1-client-protocol.h\"",
          "29: #include \"ext-session-lock-v1-client-protocol.h\"",
          "31: static uint32_t parse_color(const char *color) {",
          "",
          "[Removed Lines]",
          "28: #include \"xdg-output-unstable-v1-client-protocol.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "295:  }",
          "296: }",
          "316:   const char *name) {",
          "318:  struct swaylock_surface *surface = data;",
          "320:  surface->output_name = strdup(name);",
          "321: }",
          "324:   const char *description) {",
          "326: }",
          "338: };",
          "340: static void ext_session_lock_v1_handle_locked(void *data, struct ext_session_lock_v1 *lock) {",
          "",
          "[Removed Lines]",
          "298: struct wl_output_listener _wl_output_listener = {",
          "299:  .geometry = handle_wl_output_geometry,",
          "300:  .mode = handle_wl_output_mode,",
          "301:  .done = handle_wl_output_done,",
          "302:  .scale = handle_wl_output_scale,",
          "303: };",
          "305: static void handle_xdg_output_logical_size(void *data, struct zxdg_output_v1 *output,",
          "306:   int width, int height) {",
          "308: }",
          "310: static void handle_xdg_output_logical_position(void *data,",
          "311:   struct zxdg_output_v1 *output, int x, int y) {",
          "313: }",
          "315: static void handle_xdg_output_name(void *data, struct zxdg_output_v1 *output,",
          "317:  swaylock_log(LOG_DEBUG, \"output name is %s\", name);",
          "319:  surface->xdg_output = output;",
          "323: static void handle_xdg_output_description(void *data, struct zxdg_output_v1 *output,",
          "328: static void handle_xdg_output_done(void *data, struct zxdg_output_v1 *output) {",
          "330: }",
          "332: struct zxdg_output_v1_listener _xdg_output_listener = {",
          "333:  .logical_position = handle_xdg_output_logical_position,",
          "334:  .logical_size = handle_xdg_output_logical_size,",
          "335:  .done = handle_xdg_output_done,",
          "336:  .name = handle_xdg_output_name,",
          "337:  .description = handle_xdg_output_description,",
          "",
          "[Added Lines]",
          "297: static void handle_wl_output_name(void *data, struct wl_output *output,",
          "303: static void handle_wl_output_description(void *data, struct wl_output *output,",
          "308: struct wl_output_listener _wl_output_listener = {",
          "309:  .geometry = handle_wl_output_geometry,",
          "310:  .mode = handle_wl_output_mode,",
          "311:  .done = handle_wl_output_done,",
          "312:  .scale = handle_wl_output_scale,",
          "313:  .name = handle_wl_output_name,",
          "314:  .description = handle_wl_output_description,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "377:  } else if (strcmp(interface, zwlr_input_inhibit_manager_v1_interface.name) == 0) {",
          "378:   state->input_inhibit_manager = wl_registry_bind(",
          "379:     registry, name, &zwlr_input_inhibit_manager_v1_interface, 1);",
          "383:  } else if (strcmp(interface, wl_output_interface.name) == 0) {",
          "384:   struct swaylock_surface *surface =",
          "385:    calloc(1, sizeof(struct swaylock_surface));",
          "386:   surface->state = state;",
          "387:   surface->output = wl_registry_bind(registry, name,",
          "389:   surface->output_global_name = name;",
          "390:   wl_output_add_listener(surface->output, &_wl_output_listener, surface);",
          "391:   wl_list_insert(&state->surfaces, &surface->link);",
          "",
          "[Removed Lines]",
          "380:  } else if (strcmp(interface, zxdg_output_manager_v1_interface.name) == 0) {",
          "381:   state->zxdg_output_manager = wl_registry_bind(",
          "382:     registry, name, &zxdg_output_manager_v1_interface, 2);",
          "388:     &wl_output_interface, 3);",
          "",
          "[Added Lines]",
          "362:     &wl_output_interface, 4);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1265:   return 1;",
          "1266:  }",
          "1282:  struct swaylock_surface *surface;",
          "1283:  wl_list_for_each(surface, &state.surfaces, link) {",
          "1284:   create_surface(surface);",
          "",
          "[Removed Lines]",
          "1268:  if (state.zxdg_output_manager) {",
          "1269:   struct swaylock_surface *surface;",
          "1270:   wl_list_for_each(surface, &state.surfaces, link) {",
          "1271:    surface->xdg_output = zxdg_output_manager_v1_get_xdg_output(",
          "1272:       state.zxdg_output_manager, surface->output);",
          "1273:    zxdg_output_v1_add_listener(",
          "1274:      surface->xdg_output, &_xdg_output_listener, surface);",
          "1275:   }",
          "1276:   wl_display_roundtrip(state.display);",
          "1277:  } else {",
          "1278:   swaylock_log(LOG_INFO, \"Compositor does not support zxdg output \"",
          "1279:     \"manager, images assigned to named outputs will not work\");",
          "1280:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "meson.build||meson.build": [
          "File: meson.build -> meson.build",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:  add_project_arguments('-D_C11_SOURCE', language: 'c')",
          "37: endif",
          "40: wayland_protos = dependency('wayland-protocols', version: '>=1.25', fallback: 'wayland-protocols')",
          "41: wayland_scanner = dependency('wayland-scanner', version: '>=1.15.0')",
          "42: xkbcommon = dependency('xkbcommon')",
          "",
          "[Removed Lines]",
          "39: wayland_client = dependency('wayland-client')",
          "",
          "[Added Lines]",
          "39: wayland_client = dependency('wayland-client', version: '>=1.20.0')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82: client_protocols = [",
          "83:  [wl_protocol_dir, 'stable/xdg-shell/xdg-shell.xml'],",
          "85:  [wl_protocol_dir, 'staging/ext-session-lock/ext-session-lock-v1.xml'],",
          "86:  ['wlr-layer-shell-unstable-v1.xml'],",
          "87:  ['wlr-input-inhibitor-unstable-v1.xml'],",
          "",
          "[Removed Lines]",
          "84:  [wl_protocol_dir, 'unstable/xdg-output/xdg-output-unstable-v1.xml'],",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "978ce498940ad6739b30c12c8a24ade11a423b5f",
      "candidate_info": {
        "commit_hash": "978ce498940ad6739b30c12c8a24ade11a423b5f",
        "repo": "swaywm/swaylock",
        "commit_url": "https://github.com/swaywm/swaylock/commit/978ce498940ad6739b30c12c8a24ade11a423b5f",
        "files": [
          "meson.build"
        ],
        "message": "build: add Meson subproject fallback for wayland-protocols\n\nThis allows building swaylock with a local wayland-protocols.",
        "before_after_code_files": [
          "meson.build||meson.build"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "meson.build||meson.build"
          ],
          "candidate": [
            "meson.build||meson.build"
          ]
        }
      },
      "candidate_diff": {
        "meson.build||meson.build": [
          "File: meson.build -> meson.build",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: endif",
          "38: wayland_client = dependency('wayland-client')",
          "40: xkbcommon      = dependency('xkbcommon')",
          "41: cairo          = dependency('cairo')",
          "42: gdk_pixbuf     = dependency('gdk-pixbuf-2.0', required: get_option('gdk-pixbuf'))",
          "",
          "[Removed Lines]",
          "39: wayland_protos = dependency('wayland-protocols', version: '>=1.14')",
          "",
          "[Added Lines]",
          "39: wayland_protos = dependency('wayland-protocols', version: '>=1.14', fallback: 'wayland-protocols')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "be566a2935d12e31a0f7d2df15f294a7c7ed9dce",
      "candidate_info": {
        "commit_hash": "be566a2935d12e31a0f7d2df15f294a7c7ed9dce",
        "repo": "swaywm/swaylock",
        "commit_url": "https://github.com/swaywm/swaylock/commit/be566a2935d12e31a0f7d2df15f294a7c7ed9dce",
        "files": [
          "include/swaylock.h",
          "main.c"
        ],
        "message": "Wait for the locked event\n\nWe were ignoring the locked event. Wait for it instead.",
        "before_after_code_files": [
          "include/swaylock.h||include/swaylock.h",
          "main.c||main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/swaylock.h||include/swaylock.h",
            "main.c||main.c"
          ],
          "candidate": [
            "include/swaylock.h||include/swaylock.h",
            "main.c||main.c"
          ]
        }
      },
      "candidate_diff": {
        "include/swaylock.h||include/swaylock.h": [
          "File: include/swaylock.h -> include/swaylock.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:  cairo_t *test_cairo; // used to estimate font/text sizes",
          "91:  enum auth_state auth_state;",
          "92:  int failed_attempts;",
          "94:  struct ext_session_lock_manager_v1 *ext_session_lock_manager_v1;",
          "95:  struct ext_session_lock_v1 *ext_session_lock_v1;",
          "96: };",
          "",
          "[Removed Lines]",
          "93:  bool run_display;",
          "",
          "[Added Lines]",
          "93:  bool run_display, locked;",
          "",
          "---------------"
        ],
        "main.c||main.c": [
          "File: main.c -> main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "313: };",
          "315: static void ext_session_lock_v1_handle_locked(void *data, struct ext_session_lock_v1 *lock) {",
          "317: }",
          "319: static void ext_session_lock_v1_handle_finished(void *data, struct ext_session_lock_v1 *lock) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "316:  struct swaylock_state *state = data;",
          "317:  state->locked = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1295:   create_surface(surface);",
          "1296:  }",
          "1298:  if (state.args.daemonize) {",
          "1300:   daemonize();",
          "1301:  }",
          "",
          "[Removed Lines]",
          "1299:   wl_display_roundtrip(state.display);",
          "",
          "[Added Lines]",
          "1299:  if (state.ext_session_lock_manager_v1) {",
          "1300:   while (!state.locked) {",
          "1301:    if (wl_display_dispatch(state.display) < 0) {",
          "1302:     swaylock_log(LOG_ERROR, \"wl_display_dispatch() failed\");",
          "1303:     return 2;",
          "1304:    }",
          "1305:   }",
          "1306:  } else {",
          "1307:   if (wl_display_roundtrip(state.display) < 0) {",
          "1308:    swaylock_log(LOG_ERROR, \"wl_display_roundtrip() failed\");",
          "1309:    return 2;",
          "1310:   }",
          "1311:   state.locked = true;",
          "1312:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}