{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3196abb7cb7aec87656bb8e299319ba55e35a3a4",
      "candidate_info": {
        "commit_hash": "3196abb7cb7aec87656bb8e299319ba55e35a3a4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3196abb7cb7aec87656bb8e299319ba55e35a3a4",
        "files": [
          "ext/session/sqlite3session.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix harmless compiler warning in the session extension.\n\nFossilOrigin-Name: dff823ca8b5ca4a5611407b0231f89b2e8c981f50e85e361e76d3e4973cea8ca",
        "before_after_code_files": [
          "ext/session/sqlite3session.c||ext/session/sqlite3session.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/session/sqlite3session.c||ext/session/sqlite3session.c": [
          "File: ext/session/sqlite3session.c -> ext/session/sqlite3session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1832: static int sessionBufferGrow(SessionBuffer *p, size_t nByte, int *pRc){",
          "1834:     u8 *aNew;",
          "1835:     i64 nNew = p->nAlloc ? p->nAlloc : 128;",
          "1836:     do {",
          "",
          "[Removed Lines]",
          "1833:   if( *pRc==SQLITE_OK && p->nAlloc-p->nBuf<nByte ){",
          "",
          "[Added Lines]",
          "1833:   if( *pRc==SQLITE_OK && (size_t)(p->nAlloc-p->nBuf)<nByte ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d612fb7873cf59dfda18cabe45f674c37aa78a4587de3378b1840c99465a0269",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7fc296aa662e02fc715facf50b6fb095794d7641",
      "candidate_info": {
        "commit_hash": "7fc296aa662e02fc715facf50b6fb095794d7641",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7fc296aa662e02fc715facf50b6fb095794d7641",
        "files": [
          "ext/rtree/rtree.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Early detection of a corrupt R-Tree in the R-Tree search algorithm.\n\nFossilOrigin-Name: 2bf5a4c16457562dc942bcc6ec06d9b4e795ef3ea8e31550e18857bbebd08a76",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1595:       x.iLevel = p->iLevel - 1;",
          "1596:       if( x.iLevel ){",
          "1597:         x.id = readInt64(pCellData);",
          "1598:         x.iCell = 0;",
          "1599:       }else{",
          "1600:         x.id = p->id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1598:         for(ii=0; ii<pCur->nPoint; ii++){",
          "1599:           if( pCur->aPoint[ii].id==x.id ){",
          "1600:             RTREE_IS_CORRUPT(pRtree);",
          "1601:             return SQLITE_CORRUPT_VTAB;",
          "1602:           }",
          "1603:         }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4e34e3615ff31f4a6432033797b2e1a6604007ea0e501d714ecb362632776150",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8055a3ead4b83cae2d68ffc0ce18ffd9364a0b24",
      "candidate_info": {
        "commit_hash": "8055a3ead4b83cae2d68ffc0ce18ffd9364a0b24",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8055a3ead4b83cae2d68ffc0ce18ffd9364a0b24",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c",
          "test/ossfuzz.c"
        ],
        "message": "Improvements to the ossfuzz.c fuzz-testing module so that it works with -DSQLITE_OMIT_PROGRESS_CALLBACK and with -DSQLITE_OMIT_INIT.\n\nFossilOrigin-Name: d343f7d6b05865c282eb73a0e39dc396f2927982af45b3d045de03ef73715693",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c",
          "test/ossfuzz.c||test/ossfuzz.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6982f52f579d20b8a2965373731d41622bda7f09fbf82cc005bb378321829f4c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "405: static sqlite3_int64 timeOfDay(void){",
          "406:   static sqlite3_vfs *clockVfs = 0;",
          "407:   sqlite3_int64 t;",
          "409:   if( clockVfs->iVersion>=1 && clockVfs->xCurrentTimeInt64!=0 ){",
          "410:     clockVfs->xCurrentTimeInt64(clockVfs, &t);",
          "411:   }else{",
          "",
          "[Removed Lines]",
          "408:   if( clockVfs==0 ) clockVfs = sqlite3_vfs_find(0);",
          "",
          "[Added Lines]",
          "408:   if( clockVfs==0 ){",
          "409:     clockVfs = sqlite3_vfs_find(0);",
          "410:     if( clockVfs==0 ) return 0;",
          "411:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "869:   iBegin = timeOfDay();",
          "870: #ifdef __unix__",
          "871:   signal(SIGALRM, timeoutHandler);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "872:   sqlite3_initialize();",
          "",
          "---------------"
        ],
        "test/ossfuzz.c||test/ossfuzz.c": [
          "File: test/ossfuzz.c -> test/ossfuzz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: static sqlite3_int64 timeOfDay(void){",
          "37:   static sqlite3_vfs *clockVfs = 0;",
          "38:   sqlite3_int64 t;",
          "40:   if( clockVfs->iVersion>=2 && clockVfs->xCurrentTimeInt64!=0 ){",
          "41:     clockVfs->xCurrentTimeInt64(clockVfs, &t);",
          "42:   }else{",
          "",
          "[Removed Lines]",
          "39:   if( clockVfs==0 ) clockVfs = sqlite3_vfs_find(0);",
          "",
          "[Added Lines]",
          "39:   if( clockVfs==0 ){",
          "40:     clockVfs = sqlite3_vfs_find(0);",
          "41:     if( clockVfs==0 ) return 0;",
          "42:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59: } FuzzCtx;",
          "",
          "[Removed Lines]",
          "61: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:   p->nCb++;",
          "75:   return rc;",
          "76: }",
          "",
          "[Removed Lines]",
          "77: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105:   int i;",
          "106:   if( argv ){",
          "107:     for(i=0; i<argc; i++) sqlite3_free(sqlite3_mprintf(\"%s\", argv[i]));",
          "108:   }",
          "110: }",
          "",
          "[Removed Lines]",
          "104: static int exec_handler(void *pCnt, int argc, char **argv, char **namev){",
          "109:   return ((*(int*)pCnt)--)<=0;",
          "",
          "[Added Lines]",
          "106: static int exec_handler(void *pClientData, int argc, char **argv, char **namev){",
          "107:   FuzzCtx *p = (FuzzCtx*)pClientData;",
          "112:   return (p->execCnt--)<=0 || progress_handler(pClientData);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "134:   }",
          "137:   rc = sqlite3_open_v2(\"fuzz.db\", &cx.db,",
          "138:            SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE | SQLITE_OPEN_MEMORY, 0);",
          "139:   if( rc ) return 0;",
          "",
          "[Removed Lines]",
          "141: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "",
          "[Added Lines]",
          "139:   if( sqlite3_initialize() ) return 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "147:   cx.iLastCb = timeOfDay();",
          "149:   sqlite3_progress_handler(cx.db, 10, progress_handler, (void*)&cx);",
          "150: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "164:   execCnt = uSelector + 1;",
          "",
          "[Added Lines]",
          "167:   cx.execCnt = uSelector + 1;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "169: #ifndef SQLITE_OMIT_COMPLETE",
          "170:   sqlite3_complete(zSql);",
          "171: #endif",
          "175:   if( (mDebug & FUZZ_SHOW_ERRORS)!=0 && zErrMsg ){",
          "",
          "[Removed Lines]",
          "172:   sqlite3_exec(cx.db, zSql, exec_handler, (void*)&execCnt, &zErrMsg);",
          "",
          "[Added Lines]",
          "175:   sqlite3_exec(cx.db, zSql, exec_handler, (void*)&cx, &zErrMsg);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b986b2a47cd3174382c66448fde87da21b9bc74",
      "candidate_info": {
        "commit_hash": "4b986b2a47cd3174382c66448fde87da21b9bc74",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4b986b2a47cd3174382c66448fde87da21b9bc74",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Patch makes balance_nonroot() slightly smaller and faster and more robust against corrupt databases.\n\nFossilOrigin-Name: 174da3c32c9caebd642c31cb594597ccd5bb2a7fc501b1f49aef0b7b4765bfca",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fcc24edde471c2214add2dbc3a27da8890a7148105c5ffa024faf72457964a5f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7152:     int iCell = (iOld + pPg->aiOvfl[i]) - iNew;",
          "7153:     if( iCell>=0 && iCell<nNew ){",
          "7154:       pCellptr = &pPg->aCellIdx[iCell * 2];",
          "7157:       nCell++;",
          "7158:       if( pageInsertArray(",
          "7159:             pPg, pBegin, &pData, pCellptr,",
          "",
          "[Removed Lines]",
          "7155:       assert( nCell>=iCell );",
          "7156:       memmove(&pCellptr[2], pCellptr, (nCell - iCell) * 2);",
          "",
          "[Added Lines]",
          "7155:       if( nCell>iCell ){",
          "7156:         memmove(&pCellptr[2], pCellptr, (nCell - iCell) * 2);",
          "7157:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95063c286768c880447ff66641e1a722c32d0b10",
      "candidate_info": {
        "commit_hash": "95063c286768c880447ff66641e1a722c32d0b10",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/95063c286768c880447ff66641e1a722c32d0b10",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Improve the \".recover\" command in the shell tool so that it is not confused by auto-vacuum databases. And so that it can recover tables for which one or more of the column names are SQL keywords.\n\nFossilOrigin-Name: 87d76047d6a3df31bc9b7c0cffa7b758236c124f87263a520850b019cbbc4c6e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d8e88248e3204b5f2b95b9b8921ee7ee2f7574ae81e6abd5b4f2ddf187f7d71b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6397:       }",
          "6398:       i = 1;",
          "6399:       shellPreparePrintf(dbtmp, &rc, &pStmt,",
          "6401:           \"  FILTER (WHERE cid!=%d) OVER (ORDER BY %s cid) \"",
          "6402:           \"FROM pragma_table_info(%Q)\",",
          "6403:           bIntkey ? \", \" : \"\", pTab->iPk,",
          "",
          "[Removed Lines]",
          "6400:           \"SELECT %Q || group_concat(name, ', ') \"",
          "",
          "[Added Lines]",
          "6400:           \"SELECT %Q || group_concat(quote(name), ', ') \"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6619:     );",
          "6620:   }",
          "6622:   shellExec(pState->db, &rc,",
          "6623:     \"CREATE TABLE recovery.dbptr(\"",
          "6624:     \"      pgno, child, PRIMARY KEY(child, pgno)\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6625:   shellExec(pState->db, &rc,",
          "6626:     \"WITH ptrmap(pgno) AS (\"",
          "6627:     \"  SELECT 2 WHERE shell_int32(\"",
          "6628:     \"    (SELECT data FROM sqlite_dbpage WHERE pgno=1), 13\"",
          "6629:     \"  )\"",
          "6630:     \"    UNION ALL \"",
          "6631:     \"  SELECT pgno+1+(SELECT page_size FROM pragma_page_size)/5 AS pp \"",
          "6632:     \"  FROM ptrmap WHERE pp<=(SELECT page_count FROM pragma_page_count)\"",
          "6633:     \")\"",
          "6634:     \"REPLACE INTO recovery.freelist SELECT pgno FROM ptrmap\"",
          "6635:   );",
          "",
          "---------------"
        ]
      }
    }
  ]
}