{
  "cve_id": "CVE-2020-35605",
  "cve_desc": "The Graphics Protocol feature in graphics.c in kitty before 0.19.3 allows remote attackers to execute arbitrary code because a filename containing special characters can be included in an error message.",
  "repo": "kovidgoyal/kitty",
  "patch_hash": "82c137878c2b99100a3cdc1c0f0efea069313901",
  "patch_info": {
    "commit_hash": "82c137878c2b99100a3cdc1c0f0efea069313901",
    "repo": "kovidgoyal/kitty",
    "commit_url": "https://github.com/kovidgoyal/kitty/commit/82c137878c2b99100a3cdc1c0f0efea069313901",
    "files": [
      "docs/changelog.rst",
      "kitty/graphics.c"
    ],
    "message": "Graphics protocol: Dont return filename in the error message when opening file fails, since filenames can contain control characters\n\nFixes #3128",
    "before_after_code_files": [
      "kitty/graphics.c||kitty/graphics.c"
    ]
  },
  "patch_diff": {
    "kitty/graphics.c||kitty/graphics.c": [
      "File: kitty/graphics.c -> kitty/graphics.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "402:             snprintf(fname, sizeof(fname)/sizeof(fname[0]), \"%.*s\", (int)g->payload_sz, payload);",
      "403:             if (tt == 's') fd = shm_open(fname, O_RDONLY, 0);",
      "404:             else fd = open(fname, O_CLOEXEC | O_RDONLY);",
      "406:             img->data_loaded = mmap_img_file(self, img, fd, g->data_sz, g->data_offset);",
      "407:             safe_close(fd, __FILE__, __LINE__);",
      "408:             if (tt == 't') {",
      "",
      "[Removed Lines]",
      "405:             if (fd == -1) ABRT(EBADF, \"Failed to open file %s for graphics transmission with error: [%d] %s\", fname, errno, strerror(errno));",
      "",
      "[Added Lines]",
      "405:             if (fd == -1) ABRT(EBADF, \"Failed to open file for graphics transmission with error: [%d] %s\", errno, strerror(errno));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ca3c49099f677f0b9f47cf7d0a201728b35c68d7",
      "candidate_info": {
        "commit_hash": "ca3c49099f677f0b9f47cf7d0a201728b35c68d7",
        "repo": "kovidgoyal/kitty",
        "commit_url": "https://github.com/kovidgoyal/kitty/commit/ca3c49099f677f0b9f47cf7d0a201728b35c68d7",
        "files": [
          "gen-apc-parsers.py",
          "kitty/graphics.c",
          "kitty/parse-graphics-command.h",
          "kitty_tests/graphics.py"
        ],
        "message": "Start work on tests for frame loading",
        "before_after_code_files": [
          "gen-apc-parsers.py||gen-apc-parsers.py",
          "kitty/graphics.c||kitty/graphics.c",
          "kitty/parse-graphics-command.h||kitty/parse-graphics-command.h",
          "kitty_tests/graphics.py||kitty_tests/graphics.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kitty/graphics.c||kitty/graphics.c"
          ],
          "candidate": [
            "kitty/graphics.c||kitty/graphics.c"
          ]
        }
      },
      "candidate_diff": {
        "gen-apc-parsers.py||gen-apc-parsers.py": [
          "File: gen-apc-parsers.py -> gen-apc-parsers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "250: def graphics_parser() -> None:",
          "251:     flag = frozenset",
          "252:     keymap: KeymapType = {",
          "254:         'd': ('delete_action', flag('aAiIcCnNpPqQxXyYzZ')),",
          "255:         't': ('transmission_type', flag('dfts')),",
          "256:         'o': ('compressed', flag('z')),",
          "",
          "[Removed Lines]",
          "253:         'a': ('action', flag('tTqpd')),",
          "",
          "[Added Lines]",
          "253:         'a': ('action', flag('tTqpdf')),",
          "",
          "---------------"
        ],
        "kitty/graphics.c||kitty/graphics.c": [
          "File: kitty/graphics.c -> kitty/graphics.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: static inline void",
          "54: free_load_data(LoadData *ld) {",
          "58:     if (ld->mapped_file) munmap(ld->mapped_file, ld->mapped_file_sz);",
          "59:     ld->mapped_file = NULL; ld->mapped_file_sz = 0;",
          "60: }",
          "",
          "[Removed Lines]",
          "55:     free(ld->buf); ld->buf_used = 0; ld->buf_capacity = 0;",
          "56:     ld->buf = NULL;",
          "",
          "[Added Lines]",
          "55:     free(ld->buf); ld->buf_used = 0; ld->buf_capacity = 0; ld->buf = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "352:     return ans;",
          "353: }",
          "357: #define MAX_DATA_SZ (4u * 100000000u)",
          "358: enum FORMATS { RGB=24, RGBA=32, PNG=100 };",
          "",
          "[Removed Lines]",
          "355: #define ABRT(code, ...) { set_command_failed_response(#code, __VA_ARGS__); self->currently_loading_data_for = (const ImageAndFrame){0}; if (img) img->data_loaded = false; return NULL; }",
          "",
          "[Added Lines]",
          "353: #define ABRT(code, ...) { set_command_failed_response(code, __VA_ARGS__); self->currently_loading_data_for = (const ImageAndFrame){0}; if (img) img->data_loaded = false; return NULL; }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "365:     switch(transmission_type) {",
          "366:         case 'd':  // direct",
          "367:             if (img->load_data.buf_capacity - img->load_data.buf_used < g->payload_sz) {",
          "369:                 img->load_data.buf_capacity = MIN(2 * img->load_data.buf_capacity, MAX_DATA_SZ);",
          "370:                 img->load_data.buf = realloc(img->load_data.buf, img->load_data.buf_capacity);",
          "371:                 if (img->load_data.buf == NULL) {",
          "372:                     img->load_data.buf_capacity = 0; img->load_data.buf_used = 0;",
          "374:                 }",
          "375:             }",
          "376:             memcpy(img->load_data.buf + img->load_data.buf_used, payload, g->payload_sz);",
          "",
          "[Removed Lines]",
          "368:                 if (img->load_data.buf_used + g->payload_sz > MAX_DATA_SZ || data_fmt != PNG) ABRT(EFBIG, \"Too much data\");",
          "373:                     ABRT(ENOMEM, \"Out of memory\");",
          "",
          "[Added Lines]",
          "366:                 if (img->load_data.buf_used + g->payload_sz > MAX_DATA_SZ || data_fmt != PNG) ABRT(\"EFBIG\", \"Too much data\");",
          "371:                     ABRT(\"ENOMEM\", \"Out of memory\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "380:         case 'f': // file",
          "381:         case 't': // temporary file",
          "382:         case 's': // POSIX shared memory",
          "384:             snprintf(fname, sizeof(fname)/sizeof(fname[0]), \"%.*s\", (int)g->payload_sz, payload);",
          "385:             if (transmission_type == 's') fd = safe_shm_open(fname, O_RDONLY, 0);",
          "386:             else fd = safe_open(fname, O_CLOEXEC | O_RDONLY, 0);",
          "388:             img->data_loaded = mmap_img_file(self, img, fd, g->data_sz, g->data_offset);",
          "389:             safe_close(fd, __FILE__, __LINE__);",
          "390:             if (transmission_type == 't') {",
          "",
          "[Removed Lines]",
          "383:             if (g->payload_sz > 2048) ABRT(EINVAL, \"Filename too long\");",
          "387:             if (fd == -1) ABRT(EBADF, \"Failed to open file for graphics transmission with error: [%d] %s\", errno, strerror(errno));",
          "",
          "[Added Lines]",
          "381:             if (g->payload_sz > 2048) ABRT(\"EINVAL\", \"Filename too long\");",
          "385:             if (fd == -1) ABRT(\"EBADF\", \"Failed to open file for graphics transmission with error: [%d] %s\", errno, strerror(errno));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "395:             if (!img->data_loaded) return NULL;",
          "396:             break;",
          "397:         default:",
          "399:     }",
          "400:     return img;",
          "401: }",
          "",
          "[Removed Lines]",
          "398:             ABRT(EINVAL, \"Unknown transmission type: %c\", g->transmission_type);",
          "",
          "[Added Lines]",
          "396:             ABRT(\"EINVAL\", \"Unknown transmission type: %c\", g->transmission_type);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "416:             case 0:",
          "417:                 break;",
          "418:             default:",
          "420:         }",
          "421:         switch(data_fmt) {",
          "422:             case PNG:",
          "",
          "[Removed Lines]",
          "419:                 ABRT(EINVAL, \"Unknown image compression: %c\", g->compressed);",
          "",
          "[Added Lines]",
          "417:                 ABRT(\"EINVAL\", \"Unknown image compression: %c\", g->compressed);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "430: #undef IB",
          "431:         img->load_data.data = img->load_data.buf;",
          "432:         if (img->load_data.buf_used < img->load_data.data_sz) {",
          "434:         }",
          "435:         if (img->load_data.mapped_file) {",
          "436:             munmap(img->load_data.mapped_file, img->load_data.mapped_file_sz);",
          "",
          "[Removed Lines]",
          "433:             ABRT(ENODATA, \"Insufficient image data: %zu < %zu\", img->load_data.buf_used, img->load_data.data_sz);",
          "",
          "[Added Lines]",
          "431:             ABRT(\"ENODATA\", \"Insufficient image data: %zu < %zu\", img->load_data.buf_used, img->load_data.data_sz);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "439:     } else {",
          "440:         if (transmission_type == 'd') {",
          "441:             if (img->load_data.buf_used < img->load_data.data_sz) {",
          "443:             } else img->load_data.data = img->load_data.buf;",
          "444:         } else {",
          "445:             if (img->load_data.mapped_file_sz < img->load_data.data_sz) {",
          "447:             } else img->load_data.data = img->load_data.mapped_file;",
          "448:         }",
          "449:     }",
          "",
          "[Removed Lines]",
          "442:                 ABRT(ENODATA, \"Insufficient image data: %zu < %zu\",  img->load_data.buf_used, img->load_data.data_sz);",
          "446:                 ABRT(ENODATA, \"Insufficient image data: %zu < %zu\",  img->load_data.mapped_file_sz, img->load_data.data_sz);",
          "",
          "[Added Lines]",
          "440:                 ABRT(\"ENODATA\", \"Insufficient image data: %zu < %zu\",  img->load_data.buf_used, img->load_data.data_sz);",
          "444:                 ABRT(\"ENODATA\", \"Insufficient image data: %zu < %zu\",  img->load_data.mapped_file_sz, img->load_data.data_sz);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "453: static Image*",
          "454: initialize_load_data(GraphicsManager *self, const GraphicsCommand *g, Image *img, const unsigned char transmission_type, const uint32_t data_fmt, const uint32_t frame_idx) {",
          "455:     switch(data_fmt) {",
          "456:         case PNG:",
          "458:             img->load_data.is_4byte_aligned = true;",
          "459:             img->load_data.is_opaque = false;",
          "460:             img->load_data.data_sz = g->data_sz ? g->data_sz : 1024 * 100;",
          "",
          "[Removed Lines]",
          "457:             if (g->data_sz > MAX_DATA_SZ) ABRT(EINVAL, \"PNG data size too large\");",
          "",
          "[Added Lines]",
          "453:     img->load_data = (const LoadData){0};",
          "456:             if (g->data_sz > MAX_DATA_SZ) ABRT(\"EINVAL\", \"PNG data size too large\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "462:         case RGB:",
          "463:         case RGBA:",
          "464:             img->load_data.data_sz = (size_t)g->data_width * g->data_height * (data_fmt / 8);",
          "466:             img->load_data.is_4byte_aligned = data_fmt == RGBA || (img->width % 4 == 0);",
          "467:             img->load_data.is_opaque = data_fmt == RGB;",
          "468:             break;",
          "469:         default:",
          "471:     }",
          "472:     if (transmission_type == 'd') {",
          "473:         if (g->more) self->currently_loading_data_for = (ImageAndFrame){.image_id = img->internal_id, .frame_idx = frame_idx};",
          "",
          "[Removed Lines]",
          "465:             if (!img->load_data.data_sz) ABRT(EINVAL, \"Zero width/height not allowed\");",
          "470:             ABRT(EINVAL, \"Unknown image format: %u\", data_fmt);",
          "",
          "[Added Lines]",
          "464:             if (!img->load_data.data_sz) ABRT(\"EINVAL\", \"Zero width/height not allowed\");",
          "469:             ABRT(\"EINVAL\", \"Unknown image format: %u\", data_fmt);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "476:         img->load_data.buf_used = 0;",
          "477:         if (img->load_data.buf == NULL) {",
          "478:             img->load_data.buf_capacity = 0; img->load_data.buf_used = 0;",
          "480:         }",
          "481:     }",
          "482:     return img;",
          "",
          "[Removed Lines]",
          "479:             ABRT(ENOMEM, \"Out of memory\");",
          "",
          "[Added Lines]",
          "478:             ABRT(\"ENOMEM\", \"Out of memory\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "502:     if (init_img) {",
          "503:         self->last_transmit_graphics_command = *g;",
          "504:         self->currently_loading_data_for = (const ImageAndFrame){0};",
          "506:         self->last_transmit_graphics_command.id = iid;",
          "507:         remove_images(self, add_trim_predicate, 0);",
          "508:         img = find_or_create_image(self, iid, &existing);",
          "",
          "[Removed Lines]",
          "505:         if (g->data_width > MAX_IMAGE_DIMENSION || g->data_height > MAX_IMAGE_DIMENSION) ABRT(EINVAL, \"Image too large\");",
          "",
          "[Added Lines]",
          "504:         if (g->data_width > MAX_IMAGE_DIMENSION || g->data_height > MAX_IMAGE_DIMENSION) ABRT(\"EINVAL\", \"Image too large\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "529:         img = img_by_internal_id(self, self->currently_loading_data_for.image_id);",
          "530:         if (img == NULL) {",
          "531:             self->currently_loading_data_for = (const ImageAndFrame){0};",
          "533:         }",
          "534:     }",
          "535:     img = load_image_data(self, img, g, tt, fmt, payload);",
          "",
          "[Removed Lines]",
          "532:             ABRT(EILSEQ, \"More payload loading refers to non-existent image\");",
          "",
          "[Added Lines]",
          "531:             ABRT(\"EILSEQ\", \"More payload loading refers to non-existent image\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "538:     img = process_image_data(self, img, g, tt, fmt);",
          "539:     if (!img) return NULL;",
          "540:     size_t required_sz = (size_t)(img->load_data.is_opaque ? 3 : 4) * img->width * img->height;",
          "542:     if (img->data_loaded) {",
          "543:         img->is_opaque = img->load_data.is_opaque;",
          "544:         img->is_4byte_aligned = img->load_data.is_4byte_aligned;",
          "",
          "[Removed Lines]",
          "541:     if (img->load_data.data_sz != required_sz) ABRT(EINVAL, \"Image dimensions: %ux%u do not match data size: %zu, expected size: %zu\", img->width, img->height, img->load_data.data_sz, required_sz);",
          "",
          "[Added Lines]",
          "540:     if (img->load_data.data_sz != required_sz) ABRT(\"EINVAL\", \"Image dimensions: %ux%u do not match data size: %zu, expected size: %zu\", img->width, img->height, img->load_data.data_sz, required_sz);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "548:         ImageAndFrame key = {.image_id = img->internal_id};",
          "549:         if (!add_to_disk_cache(self->disk_cache, &key, sizeof(key), img->load_data.data, img->load_data.data_sz)) {",
          "550:             if (PyErr_Occurred()) PyErr_Print();",
          "552:         }",
          "553:         free_load_data(&img->load_data);",
          "554:         self->used_storage += required_sz;",
          "",
          "[Removed Lines]",
          "551:             ABRT(ENOSPC, \"Failed to store image data in disk cache\");",
          "",
          "[Added Lines]",
          "550:             ABRT(\"ENOSPC\", \"Failed to store image data in disk cache\");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "559: }",
          "561: static inline const char*",
          "563:     static char rbuf[sizeof(command_response)/sizeof(command_response[0]) + 128];",
          "564:     bool is_ok_response = !command_response[0];",
          "565:     if (g->quiet) {",
          "566:         if (is_ok_response || g->quiet > 1) return NULL;",
          "567:     }",
          "569:         if (is_ok_response) {",
          "570:             if (!data_loaded) return NULL;",
          "571:             snprintf(command_response, 10, \"OK\");",
          "572:         }",
          "573:         size_t pos = 0;",
          "574:         rbuf[pos++] = 'G';",
          "579:         print(\";%s\", command_response);",
          "580:         return rbuf;",
          "581: #undef print",
          "",
          "[Removed Lines]",
          "562: finish_command_response(const GraphicsCommand *g, bool data_loaded, uint32_t iid, uint32_t placement_id, uint32_t image_number) {",
          "568:     if (iid || image_number) {",
          "575: #define print(fmt, ...) pos += snprintf(rbuf + pos, arraysz(rbuf) - 1 - pos, fmt, __VA_ARGS__)",
          "576:         if (iid) print(\"i=%u\", iid);",
          "577:         if (image_number) print(\",I=%u\", image_number);",
          "578:         if (placement_id) print(\",p=%u\", placement_id);",
          "",
          "[Added Lines]",
          "561: finish_command_response(const GraphicsCommand *g, bool data_loaded) {",
          "567:     if (g->id || g->image_number) {",
          "574: #define print(fmt, ...) if (arraysz(rbuf) - 1 > pos) pos += snprintf(rbuf + pos, arraysz(rbuf) - 1 - pos, fmt, __VA_ARGS__)",
          "575:         if (g->id) print(\"i=%u\", g->id);",
          "576:         if (g->image_number) print(\",I=%u\", g->image_number);",
          "577:         if (g->placement_id) print(\",p=%u\", g->placement_id);",
          "578:         if (g->num_lines && (g->action == 'f' || g->action == 'a')) print(\",r=%u\", g->num_lines);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "926: #define DEFAULT_GAP 40",
          "928: static Image*",
          "930:     uint32_t frame_number = g->num_lines, fmt = g->format ? g->format : RGBA;",
          "931:     if (!frame_number || frame_number > img->extra_framecnt + 2) frame_number = img->extra_framecnt + 2;",
          "932:     bool is_new_frame = frame_number == img->extra_framecnt + 2;",
          "933:     unsigned char tt = g->transmission_type ? g->transmission_type : 'd';",
          "934:     size_t w = img->width, h = img->height;",
          "935:     if (tt == 'd' && self->currently_loading_data_for.image_id == img->internal_id && self->currently_loading_data_for.frame_idx == frame_number - 1) {",
          "",
          "[Removed Lines]",
          "929: handle_animation_frame_load_command(GraphicsManager *self, const GraphicsCommand *g, Image *img, const uint8_t *payload) {",
          "",
          "[Added Lines]",
          "929: handle_animation_frame_load_command(GraphicsManager *self, GraphicsCommand *g, Image *img, const uint8_t *payload) {",
          "933:     g->num_lines = frame_number;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "937:     } else {",
          "938:         self->last_transmit_graphics_command = *g;",
          "939:         self->currently_loading_data_for = (const ImageAndFrame){0};",
          "941:         free_load_data(&img->load_data);",
          "942:         if (!initialize_load_data(self, g, img, tt, fmt, frame_number - 1)) return NULL;",
          "943:     }",
          "",
          "[Removed Lines]",
          "940:         if (g->data_width > MAX_IMAGE_DIMENSION || g->data_height > MAX_IMAGE_DIMENSION) ABRT(EINVAL, \"Image too large\");",
          "",
          "[Added Lines]",
          "941:         if (g->data_width > MAX_IMAGE_DIMENSION || g->data_height > MAX_IMAGE_DIMENSION) ABRT(\"EINVAL\", \"Image too large\");",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "955:         ImageAndFrame key = { .image_id = img->internal_id, .frame_idx = frame_number - 1 };",
          "957:         if (img->load_data.is_opaque != img->is_opaque)",
          "959:         if (img->load_data.is_4byte_aligned != img->is_4byte_aligned)",
          "961:         if (img->load_data.data_sz < bytes_per_pixel * data_width * data_height)",
          "963:         if (is_new_frame && disk_cache_total_size(self->disk_cache) + expected_data_sz > self->storage_limit * 5) {",
          "964:             remove_images(self, trim_predicate, img->internal_id);",
          "965:             if (is_new_frame && disk_cache_total_size(self->disk_cache) + expected_data_sz > self->storage_limit * 5)",
          "967:         }",
          "969:         void *base_data = NULL;",
          "",
          "[Removed Lines]",
          "958:             FAIL(EINVAL, \"Transparency for frames must match that of the base image\");",
          "960:             FAIL(EINVAL, \"Data type for frames must match that of the base image\");",
          "962:             FAIL(ENODATA, \"Insufficient image data %zu < %zu\", img->load_data.data_sz, bytes_per_pixel * data_width, data_height);",
          "966:                 FAIL(ENOSPC, \"Cache size exceeded cannot add new frames\");",
          "",
          "[Added Lines]",
          "959:             FAIL(\"EINVAL\", \"Transparency for frames must match that of the base image\");",
          "961:             FAIL(\"EINVAL\", \"Data type for frames must match that of the base image\");",
          "963:             FAIL(\"ENODATA\", \"Insufficient image data %zu < %zu\", img->load_data.data_sz, bytes_per_pixel * data_width, data_height);",
          "967:                 FAIL(\"ENOSPC\", \"Cache size exceeded cannot add new frames\");",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "972:             if (g->num_cells) {",
          "973:                 ImageAndFrame other = { .image_id = img->internal_id, .frame_idx = g->num_cells - 1 };",
          "974:                 if (!read_from_disk_cache_simple(self->disk_cache, &other, sizeof(other), &base_data, &data_sz)) {",
          "976:                 }",
          "977:             } else {",
          "978:                 base_data = calloc(1, expected_data_sz);",
          "980:                 data_sz = expected_data_sz;",
          "981:             }",
          "982:         } else {",
          "983:             if (!read_from_disk_cache_simple(self->disk_cache, &key, sizeof(key), &base_data, &data_sz)) {",
          "985:             }",
          "986:         }",
          "987:         if (data_sz != expected_data_sz) {",
          "988:             free(base_data);",
          "990:         }",
          "991:         if (data_sz == img->load_data.data_sz && !g->x_offset && !g->y_offset && !g->width && !g->height) {",
          "992:             memcpy(base_data, img->load_data.data, data_sz);",
          "",
          "[Removed Lines]",
          "975:                     FAIL(ENODATA, \"No data for frame with number: %u found in image: %u\", g->num_cells, img->client_id);",
          "979:                 if (!base_data) { FAIL(ENOMEM, \"Out of memory\"); }",
          "984:                 FAIL(ENODATA, \"No data for frame with number: %u found in image: %u\", frame_number, img->client_id);",
          "989:             FAIL(EINVAL, \"Cached data sz: %zu != expected data sz: %zu\", data_sz, expected_data_sz);",
          "",
          "[Added Lines]",
          "976:                     FAIL(\"ENODATA\", \"No data for frame with number: %u found in image: %u\", g->num_cells, img->client_id);",
          "980:                 if (!base_data) { FAIL(\"ENOMEM\", \"Out of memory\"); }",
          "985:                 FAIL(\"ENODATA\", \"No data for frame with number: %u found in image: %u\", frame_number, img->client_id);",
          "990:             FAIL(\"EINVAL\", \"Cached data sz: %zu != expected data sz: %zu\", data_sz, expected_data_sz);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1008:         free(base_data);",
          "1009:         if (!added) {",
          "1010:             PyErr_Print();",
          "1012:         }",
          "1013:         if (is_new_frame) {",
          "1014:             if (!img->extra_framecnt) img->loop_delay = DEFAULT_GAP;",
          "1015:             Frame *frames = realloc(img->extra_frames, sizeof(img->extra_frames[0]) * img->extra_framecnt + 1);",
          "1017:             img->extra_frames = frames;",
          "1018:             img->extra_framecnt++;",
          "1019:             img->extra_frames[frame_number - 2].gap = DEFAULT_GAP;",
          "",
          "[Removed Lines]",
          "1011:             ABRT(ENOSPC, \"Failed to cache data for image frame\");",
          "1016:             if (!frames) ABRT(ENOMEM, \"Out of memory\");",
          "",
          "[Added Lines]",
          "1012:             ABRT(\"ENOSPC\", \"Failed to cache data for image frame\");",
          "1017:             if (!frames) ABRT(\"ENOMEM\", \"Out of memory\");",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1054:     if (g->id && g->image_number) {",
          "1055:         set_command_failed_response(\"EINVAL\", \"Must not specify both image id and image number\");",
          "1057:     }",
          "1059:     switch(g->action) {",
          "",
          "[Removed Lines]",
          "1056:         return finish_command_response(g, false, g->id, g->placement_id, g->image_number);",
          "",
          "[Added Lines]",
          "1057:         return finish_command_response(g, false);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1065:             bool is_query = g->action == 'q';",
          "1066:             if (is_query) { iid = 0; if (!q_iid) { REPORT_ERROR(\"Query graphics command without image id\"); break; } }",
          "1067:             Image *image = handle_add_command(self, g, payload, is_dirty, iid);",
          "1071:             if (lg->action == 'T' && image && image->data_loaded) handle_put_command(self, lg, c, is_dirty, image, cell);",
          "1072:             id_type added_image_id = image ? image->internal_id : 0;",
          "1073:             if (g->action == 'q') remove_images(self, add_trim_predicate, 0);",
          "",
          "[Removed Lines]",
          "1068:             const GraphicsCommand *lg = &self->last_transmit_graphics_command;",
          "1069:             if (is_query) ret = finish_command_response(g, image != NULL,  q_iid, 0, 0);",
          "1070:             else ret = finish_command_response(g, image != NULL, lg->id, lg->placement_id, lg->image_number);",
          "",
          "[Added Lines]",
          "1069:             GraphicsCommand *lg = &self->last_transmit_graphics_command;",
          "1070:             lg->quiet = g->quiet;",
          "1071:             if (is_query) ret = finish_command_response(&(const GraphicsCommand){.id=q_iid, .quiet=g->quiet}, image != NULL);",
          "1072:             else ret = finish_command_response(lg, image != NULL);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1083:             Image *img = g->id ? img_by_client_id(self, g->id) : img_by_client_number(self, g->image_number);",
          "1084:             if (!img) {",
          "1085:                 set_command_failed_response(\"ENOENT\", \"Animation command refers to non-existent image with id: %u and number: %u\", g->id, g->image_number);",
          "1087:             } else {",
          "1091:                 }",
          "1092:             }",
          "1093:             break;",
          "1094:         }",
          "1096:             if (!g->id && !g->image_number) {",
          "1097:                 REPORT_ERROR(\"Put graphics command without image id or number\");",
          "1098:                 break;",
          "1099:             }",
          "1100:             uint32_t image_id = handle_put_command(self, g, c, is_dirty, NULL, cell);",
          "1102:             break;",
          "1103:         case 'd':",
          "1104:             handle_delete_command(self, g, c, is_dirty, cell);",
          "1105:             break;",
          "",
          "[Removed Lines]",
          "1086:                 ret = finish_command_response(g, false, g->id, 0, g->image_number);",
          "1088:                 if (g->action == 'f') {",
          "1089:                     img = handle_animation_frame_load_command(self, g, img, payload);",
          "1090:                     ret = finish_command_response(g, img != NULL, g->id, 0, g->image_number);",
          "1095:         case 'p':",
          "1101:             ret = finish_command_response(g, true, image_id, g->placement_id, g->image_number);",
          "",
          "[Added Lines]",
          "1088:                 ret = finish_command_response(g, false);",
          "1090:                 GraphicsCommand ag = *g;",
          "1091:                 if (ag.action == 'f') {",
          "1092:                     img = handle_animation_frame_load_command(self, &ag, img, payload);",
          "1093:                     ret = finish_command_response(&ag, img != NULL);",
          "1098:         case 'p': {",
          "1104:             GraphicsCommand rg = *g; rg.id = image_id;",
          "1105:             ret = finish_command_response(&rg, true);",
          "1107:         }",
          "",
          "---------------"
        ],
        "kitty/parse-graphics-command.h||kitty/parse-graphics-command.h": [
          "File: kitty/parse-graphics-command.h -> kitty/parse-graphics-command.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:       case action: {",
          "146:         g.action = screen->parser_buf[pos++] & 0xff;",
          "149:           REPORT_ERROR(\"Malformed GraphicsCommand control block, unknown flag \"",
          "150:                        \"value for action: 0x%x\",",
          "151:                        g.action);",
          "",
          "[Removed Lines]",
          "147:         if (g.action != 'T' && g.action != 'q' && g.action != 'd' &&",
          "148:             g.action != 'p' && g.action != 't') {",
          "",
          "[Added Lines]",
          "147:         if (g.action != 'd' && g.action != 'p' && g.action != 't' &&",
          "148:             g.action != 'T' && g.action != 'f' && g.action != 'q') {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:       case delete_action: {",
          "157:         g.delete_action = screen->parser_buf[pos++] & 0xff;",
          "167:           REPORT_ERROR(\"Malformed GraphicsCommand control block, unknown flag \"",
          "168:                        \"value for delete_action: 0x%x\",",
          "169:                        g.delete_action);",
          "",
          "[Removed Lines]",
          "158:         if (g.delete_action != 'C' && g.delete_action != 'z' &&",
          "159:             g.delete_action != 'y' && g.delete_action != 'X' &&",
          "160:             g.delete_action != 'a' && g.delete_action != 'P' &&",
          "161:             g.delete_action != 'i' && g.delete_action != 'c' &&",
          "162:             g.delete_action != 'N' && g.delete_action != 'I' &&",
          "163:             g.delete_action != 'p' && g.delete_action != 'q' &&",
          "164:             g.delete_action != 'Q' && g.delete_action != 'Z' &&",
          "165:             g.delete_action != 'A' && g.delete_action != 'n' &&",
          "166:             g.delete_action != 'x' && g.delete_action != 'Y') {",
          "",
          "[Added Lines]",
          "158:         if (g.delete_action != 'A' && g.delete_action != 'P' &&",
          "159:             g.delete_action != 'p' && g.delete_action != 'a' &&",
          "160:             g.delete_action != 'z' && g.delete_action != 'Z' &&",
          "161:             g.delete_action != 'X' && g.delete_action != 'i' &&",
          "162:             g.delete_action != 'I' && g.delete_action != 'x' &&",
          "163:             g.delete_action != 'N' && g.delete_action != 'y' &&",
          "164:             g.delete_action != 'Y' && g.delete_action != 'c' &&",
          "165:             g.delete_action != 'n' && g.delete_action != 'Q' &&",
          "166:             g.delete_action != 'C' && g.delete_action != 'q') {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174:       case transmission_type: {",
          "175:         g.transmission_type = screen->parser_buf[pos++] & 0xff;",
          "178:           REPORT_ERROR(\"Malformed GraphicsCommand control block, unknown flag \"",
          "179:                        \"value for transmission_type: 0x%x\",",
          "180:                        g.transmission_type);",
          "",
          "[Removed Lines]",
          "176:         if (g.transmission_type != 'd' && g.transmission_type != 'f' &&",
          "177:             g.transmission_type != 's' && g.transmission_type != 't') {",
          "",
          "[Added Lines]",
          "176:         if (g.transmission_type != 't' && g.transmission_type != 'd' &&",
          "177:             g.transmission_type != 'f' && g.transmission_type != 's') {",
          "",
          "---------------"
        ],
        "kitty_tests/graphics.py||kitty_tests/graphics.py": [
          "File: kitty_tests/graphics.py -> kitty_tests/graphics.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: from base64 import standard_b64decode, standard_b64encode",
          "12: from io import BytesIO",
          "13: from itertools import cycle",
          "15: from kitty.constants import cache_dir",
          "16: from kitty.fast_data_types import (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: from typing import NamedTuple",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:     return code, a",
          "65: all_bytes = bytes(bytearray(range(256)))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66: class Response(NamedTuple):",
          "67:     code: str = 'OK'",
          "68:     msg: str = ''",
          "69:     image_id: int = 0",
          "70:     image_number: int = 0",
          "71:     frame_number: int = 0",
          "74: def parse_full_response(res):",
          "75:     if not res:",
          "76:         return",
          "77:     a, b = res.decode('ascii').split(';', 1)",
          "78:     code = b.partition('\\033')[0].split(':', 1)",
          "79:     if len(code) == 1:",
          "80:         code = code[0]",
          "81:         msg = ''",
          "82:     else:",
          "83:         code, msg = code",
          "84:     a = a.split('G', 1)[1]",
          "85:     ans = {'code': code, 'msg': msg}",
          "86:     for x in a.split(','):",
          "87:         k, _, v = x.partition('=')",
          "88:         ans[{'i': 'image_id', 'I': 'image_number', 'r': 'frame_number'}[k]] = int(v)",
          "89:     return Response(**ans)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "545:         self.ae(put_ref(s, id=iid), (iid, ('ENOENT', f'i={iid}')))",
          "546:         self.ae(s.grman.image_count, 0)",
          "547:         self.assertEqual(s.grman.disk_cache.total_size, 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "576:     def test_animation_frame_loading(self):",
          "577:         s = screen = self.create_screen()",
          "578:         g = s.grman",
          "580:         def li(payload='abcdefghijkl'*3, s=4, v=3, f=24, a='f', i=1, **kw):",
          "581:             if s:",
          "582:                 kw['s'] = s",
          "583:             if v:",
          "584:                 kw['v'] = v",
          "585:             if f:",
          "586:                 kw['f'] = f",
          "587:             if i:",
          "588:                 kw['i'] = i",
          "589:             kw['a'] = a",
          "590:             cmd = ','.join('%s=%s' % (k, v) for k, v in kw.items())",
          "591:             res = send_command(screen, cmd, payload)",
          "592:             return parse_full_response(res)",
          "594:         def t(code='OK', image_id=1, frame_number=2, **kw):",
          "595:             res = li(**kw)",
          "596:             if code is not None:",
          "597:                 self.assertEqual(code, res.code)",
          "598:             if image_id is not None:",
          "599:                 self.assertEqual(image_id, res.image_id)",
          "600:             if frame_number is not None:",
          "601:                 self.assertEqual(frame_number, res.frame_number)",
          "603:         # test error on send frame for non-existent image",
          "604:         self.assertEqual(li().code, 'ENOENT')",
          "606:         # test error sending incompatible data formats",
          "607:         self.assertEqual(li(a='t').code, 'OK')",
          "608:         self.assertEqual(g.disk_cache.total_size, 36)",
          "609:         res = li(s=3, v=3, f=32)",
          "610:         self.assertEqual(res.code, 'EINVAL')",
          "611:         self.assertIn('ransparen', res.msg)",
          "613:         # simple new frame",
          "614:         t(payload='2' * 36)",
          "616:         # self.ae(g.image_count, 0)",
          "617:         # self.assertEqual(g.disk_cache.total_size, 0)",
          "",
          "---------------"
        ]
      }
    }
  ]
}