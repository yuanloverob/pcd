{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f95909c7648942e7157722c33b5e5f9293bf3436",
      "candidate_info": {
        "commit_hash": "f95909c7648942e7157722c33b5e5f9293bf3436",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f95909c7648942e7157722c33b5e5f9293bf3436",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Fixes for WITHOUT ROWID tables with VIRTUAL columns and an INTEGER PRIMARY KEY.\n\nFossilOrigin-Name: 86074da0fd2949e231898ef0bc672d90fd89cefa49fb0eb50ff398fbdd91d1ad",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 85bc4524d76999080faa4474e8880d2b6a2ac3a7f6a76239af4de1a42f8138c8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1226:     pCol->colFlags |= COLFLAG_HASTYPE;",
          "1227:   }",
          "1228:   p->nCol++;",
          "1229:   pParse->constraintName.n = 0;",
          "1230: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1229:   p->nNVCol++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1591:       goto generated_error;",
          "1592:     }",
          "1593:   }",
          "1594:   pCol->colFlags |= eType;",
          "1595:   assert( TF_HasVirtual==COLFLAG_VIRTUAL );",
          "1596:   assert( TF_HasStored==COLFLAG_STORED );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1595:   if( eType==COLFLAG_VIRTUAL ) pTab->nNVCol--;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2156:   assert( !db->mallocFailed );",
          "2157:   p = pParse->pNewTable;",
          "2158:   if( p==0 ) return;",
          "2161:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
          "2162:     p->tabFlags |= TF_Shadow;",
          "",
          "[Removed Lines]",
          "2159:   p->nNVCol = p->nCol;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2197:       return;",
          "2198:     }",
          "2199:     p->tabFlags |= TF_WithoutRowid | TF_NoVisibleRowid;",
          "2200:   }",
          "2202: #ifndef SQLITE_OMIT_CHECK",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2201:     convertToWithoutRowidTable(pParse, p);",
          "2203:   iDb = sqlite3SchemaToIndex(db, p->pSchema);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2212:     for(ii=0; ii<p->nCol; ii++){",
          "2213:       u32 colFlags = p->aCol[ii].colFlags;",
          "2214:       if( (colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL))!=0 ){",
          "2219:         sqlite3ResolveSelfReference(pParse, p, NC_GenCol,",
          "2220:                                     p->aCol[ii].pDflt, 0);",
          "2221:       }",
          "",
          "[Removed Lines]",
          "2215:         if( colFlags & COLFLAG_VIRTUAL ){",
          "2216:           p->nNVCol--;",
          "2217:           assert( p->nNVCol>=0 );",
          "2218:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2223:   }",
          "2224: #endif",
          "2235:   estimateTableWidth(p);",
          "2236:   for(pIdx=p->pIndex; pIdx; pIdx=pIdx->pNext){",
          "",
          "[Removed Lines]",
          "2227:   if( (tabOpts & TF_WithoutRowid)!=0 ){",
          "2228:     convertToWithoutRowidTable(pParse, p);",
          "2229:   }",
          "2231:   iDb = sqlite3SchemaToIndex(db, p->pSchema);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2b893a7e0688556eed1a4150942742bb4d5c977",
      "candidate_info": {
        "commit_hash": "c2b893a7e0688556eed1a4150942742bb4d5c977",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c2b893a7e0688556eed1a4150942742bb4d5c977",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/util.c"
        ],
        "message": "Performance enhancement in sqlite3AtoF().  About 8% faster.\n\nFossilOrigin-Name: 81721aa54587e20d031d528fb6b74d91671a6e950fa926dc63f4284466e70f0e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2e2ebad3ab636c4c65814ad41d417b105be8e254d609d0e08fbba4c5bd107bf3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "425:   double result;",
          "429:   assert( enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE );",
          "",
          "[Removed Lines]",
          "426:   int nDigits = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "454:   }",
          "458:     s = s*10 + (*z - '0');",
          "460:   }",
          "465:   if( z>=zEnd ) goto do_atof_calc;",
          "",
          "[Removed Lines]",
          "457:   while( z<zEnd && sqlite3Isdigit(*z) && s<((LARGEST_INT64-9)/10) ){",
          "459:     z+=incr; nDigits++;",
          "464:   while( z<zEnd && sqlite3Isdigit(*z) ){ z+=incr; nDigits++; d++; }",
          "",
          "[Added Lines]",
          "457:   while( z<zEnd && sqlite3Isdigit(*z) ){",
          "459:     z+=incr; nDigit++;",
          "460:     if( s>=((LARGEST_INT64-9)/10) ){",
          "463:       while( z<zEnd && sqlite3Isdigit(*z) ){ z+=incr; d++; }",
          "464:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "473:       if( s<((LARGEST_INT64-9)/10) ){",
          "474:         s = s*10 + (*z - '0');",
          "475:         d--;",
          "476:       }",
          "478:     }",
          "479:   }",
          "480:   if( z>=zEnd ) goto do_atof_calc;",
          "",
          "[Removed Lines]",
          "477:       z+=incr; nDigits++;",
          "",
          "[Added Lines]",
          "477:         nDigit++;",
          "479:       z+=incr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "585: #else",
          "586:   return !sqlite3Atoi64(z, pResult, length, enc);",
          "",
          "[Removed Lines]",
          "584:   return z==zEnd && nDigits>0 && eValid && nonNum==0;",
          "",
          "[Added Lines]",
          "586:   return z==zEnd && nDigit>0 && eValid && nonNum==0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd15e18d7fe9bea571c52324a6eae25f3e2b4ebc",
      "candidate_info": {
        "commit_hash": "fd15e18d7fe9bea571c52324a6eae25f3e2b4ebc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fd15e18d7fe9bea571c52324a6eae25f3e2b4ebc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h"
        ],
        "message": "Make sure any window definitions in an ORDER BY clause are removed from the SELECT statement if the ORDER BY clause gets optimized out.\n\nFossilOrigin-Name: 23b119671f0be3c6b72cf2dc5f7707a0626766db7aa56529ab00d33d1a0a1bee",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2bf5a4c16457562dc942bcc6ec06d9b4e795ef3ea8e31550e18857bbebd08a76",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1323: }",
          "",
          "[Removed Lines]",
          "1317: static void resolveRemoveWindows(Select *pSelect, Expr *pExpr){",
          "1318:   Walker sWalker;",
          "1319:   memset(&sWalker, 0, sizeof(Walker));",
          "1320:   sWalker.xExprCallback = resolveRemoveWindowsCb;",
          "1321:   sWalker.u.pSelect = pSelect;",
          "1322:   sqlite3WalkExpr(&sWalker, pExpr);",
          "1324: #else",
          "1325: # define resolveRemoveWindows(x,y)",
          "1326: #endif",
          "",
          "[Added Lines]",
          "1318: void sqlite3WindowRemoveExprFromSelect(Select *pSelect, Expr *pExpr){",
          "1319:   if( pSelect->pWin ){",
          "1320:     Walker sWalker;",
          "1321:     memset(&sWalker, 0, sizeof(Walker));",
          "1322:     sWalker.xExprCallback = resolveRemoveWindowsCb;",
          "1323:     sWalker.u.pSelect = pSelect;",
          "1324:     sqlite3WalkExpr(&sWalker, pExpr);",
          "1325:   }",
          "1332: void sqlite3WindowRemoveExprListFromSelect(Select *pSelect, ExprList *pList){",
          "1333:   if( pList && pSelect->pWin ){",
          "1334:     int i;",
          "1335:     Walker sWalker;",
          "1336:     memset(&sWalker, 0, sizeof(Walker));",
          "1337:     sWalker.xExprCallback = resolveRemoveWindowsCb;",
          "1338:     sWalker.u.pSelect = pSelect;",
          "1339:     for(i=0; i<pList->nExpr; i++){",
          "1340:       sqlite3WalkExpr(&sWalker, pList->a[i].pExpr);",
          "1341:     }",
          "1342:   }",
          "1343: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1398:         pItem->u.x.iOrderByCol = j+1;",
          "1399:       }",
          "1400:     }",
          "",
          "[Removed Lines]",
          "1397:         resolveRemoveWindows(pSelect, pE);",
          "",
          "[Added Lines]",
          "1415:         sqlite3WindowRemoveExprFromSelect(pSelect, pE);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5661:            pDest->eDest==SRT_DistQueue || pDest->eDest==SRT_Fifo);",
          "5664:     sqlite3ExprListDelete(db, p->pOrderBy);",
          "5665:     p->pOrderBy = 0;",
          "5666:     p->selFlags &= ~SF_Distinct;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5664:     sqlite3WindowRemoveExprListFromSelect(p, p->pOrderBy);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3627: void sqlite3WindowFunctions(void);",
          "3628: void sqlite3WindowChain(Parse*, Window*, Window*);",
          "3629: Window *sqlite3WindowAssemble(Parse*, Window*, ExprList*, ExprList*, Token*);",
          "3630: #else",
          "3631: # define sqlite3WindowDelete(a,b)",
          "3632: # define sqlite3WindowFunctions()",
          "3633: # define sqlite3WindowAttach(a,b,c)",
          "3634: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3630: void sqlite3WindowRemoveExprFromSelect(Select*,Expr*);",
          "3631: void sqlite3WindowRemoveExprListFromSelect(Select*,ExprList*);",
          "3636: # define sqlite3WindowRemoveExprFromSelect(Select*,Expr*);",
          "3637: # define sqlite3WindowRemoveExprListFromSelect(Select*,ExprList*);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68cb86ef23e3bc9e6362fec4937968a65ec025b5",
      "candidate_info": {
        "commit_hash": "68cb86ef23e3bc9e6362fec4937968a65ec025b5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/68cb86ef23e3bc9e6362fec4937968a65ec025b5",
        "files": [
          "ext/misc/dbdata.c",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "tool/mkshellc.tcl"
        ],
        "message": "Add the \".recovery\" command to the shell tool. For recovering the maximum amount data from corrupt databases. Still needs work.\n\nFossilOrigin-Name: 7461d2e120f2149315ddac2676d51d7445bcdb8e97543effd9c30603517ef9da",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "tool/mkshellc.tcl||tool/mkshellc.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: #include \"sqlite3ext.h\"",
          "69: typedef unsigned char u8;",
          "72: #endif",
          "73: SQLITE_EXTENSION_INIT1",
          "",
          "[Removed Lines]",
          "66: #if !defined(SQLITEINT_H)",
          "70: typedef unsigned int u32;",
          "",
          "[Added Lines]",
          "66: #if !defined(SQLITEINT_H)",
          "70: typedef unsigned long u32;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:   u8 *pHdrPtr;",
          "100:   u8 *pPtr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "306:   return 9;",
          "307: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312: static int dbdataValueBytes(int eType){",
          "313:   switch( eType ){",
          "314:     case 0: case 8: case 9:",
          "315:     case 10: case 11:",
          "316:       return 0;",
          "317:     case 1:",
          "318:       return 1;",
          "319:     case 2:",
          "320:       return 2;",
          "321:     case 3:",
          "322:       return 3;",
          "323:     case 4:",
          "324:       return 4;",
          "325:     case 5:",
          "326:       return 6;",
          "327:     case 6:",
          "328:     case 7:",
          "329:       return 8;",
          "330:     default:",
          "331:       return ((eType-12) / 2);",
          "332:   }",
          "333: }",
          "335: static void dbdataValue(sqlite3_context *pCtx, int eType, u8 *pData){",
          "336:   switch( eType ){",
          "337:     case 0:",
          "338:     case 10:",
          "339:     case 11:",
          "340:       sqlite3_result_null(pCtx);",
          "341:       break;",
          "343:     case 8:",
          "344:       sqlite3_result_int(pCtx, 0);",
          "345:       break;",
          "346:     case 9:",
          "347:       sqlite3_result_int(pCtx, 1);",
          "348:       break;",
          "350:     case 1: case 2: case 3: case 4: case 5: case 6: case 7: {",
          "351:       sqlite3_uint64 v = (signed char)pData[0];",
          "352:       pData++;",
          "353:       switch( eType ){",
          "354:         case 7:",
          "355:         case 6:  v = (v<<16) + (pData[0]<<8) + pData[1];  pData += 2;",
          "356:         case 5:  v = (v<<16) + (pData[0]<<8) + pData[1];  pData += 2;",
          "357:         case 4:  v = (v<<8) + pData[0];  pData++;",
          "358:         case 3:  v = (v<<8) + pData[0];  pData++;",
          "359:         case 2:  v = (v<<8) + pData[0];  pData++;",
          "360:       }",
          "362:       if( eType==7 ){",
          "363:         double r;",
          "364:         memcpy(&r, &v, sizeof(r));",
          "365:         sqlite3_result_double(pCtx, r);",
          "366:       }else{",
          "367:         sqlite3_result_int64(pCtx, (sqlite3_int64)v);",
          "368:       }",
          "369:       break;",
          "370:     }",
          "372:     default: {",
          "373:       int n = ((eType-12) / 2);",
          "374:       if( eType % 2 ){",
          "375:         sqlite3_result_text(pCtx, (const char*)pData, n, SQLITE_TRANSIENT);",
          "376:       }else{",
          "377:         sqlite3_result_blob(pCtx, pData, n, SQLITE_TRANSIENT);",
          "378:       }",
          "379:     }",
          "380:   }",
          "381: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "435:           }",
          "436:         }",
          "440:         iHdr = dbdataGetVarint(pCsr->pRec, &nHdr);",
          "445:         }",
          "448:       }",
          "",
          "[Removed Lines]",
          "439:         pCsr->nField = 0;",
          "441:         while( iHdr<nHdr ){",
          "442:           sqlite3_int64 iDummy;",
          "443:           iHdr += dbdataGetVarint(&pCsr->pRec[iHdr], &iDummy);",
          "444:           pCsr->nField++;",
          "447:         pCsr->iField = (bHasRowid ? -2 : -1);",
          "450:       pCsr->iField++;",
          "451:       if( pCsr->iField<pCsr->nField ) return SQLITE_OK;",
          "",
          "[Added Lines]",
          "514:         pCsr->nHdr = nHdr;",
          "515:         pCsr->pHdrPtr = &pCsr->pRec[iHdr];",
          "516:         pCsr->pPtr = &pCsr->pRec[pCsr->nHdr];",
          "517:         pCsr->iField = (bHasRowid ? -1 : 0);",
          "518:       }else{",
          "519:         pCsr->iField++;",
          "520:         if( pCsr->iField>0 ){",
          "521:           sqlite3_int64 iType;",
          "522:           pCsr->pHdrPtr += dbdataGetVarint(pCsr->pHdrPtr, &iType);",
          "523:           pCsr->pPtr += dbdataValueBytes(iType);",
          "527:       if( pCsr->iField<0 || pCsr->pHdrPtr<&pCsr->pRec[pCsr->nHdr] ){",
          "528:         return SQLITE_OK;",
          "529:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "485:   dbdataResetCursor(pCsr);",
          "486:   assert( pCsr->iPgno==1 );",
          "487:   if( idxNum & 0x01 ){",
          "489:   }",
          "490:   if( idxNum & 0x02 ){",
          "491:     pCsr->iPgno = sqlite3_value_int(argv[(idxNum & 0x01)]);",
          "",
          "[Removed Lines]",
          "488:     zSchema = sqlite3_value_text(argv[0]);",
          "",
          "[Added Lines]",
          "566:     zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "498:   );",
          "499:   if( rc==SQLITE_OK ){",
          "500:     rc = sqlite3_bind_text(pCsr->pStmt, 1, zSchema, -1, SQLITE_TRANSIENT);",
          "501:   }",
          "502:   if( rc==SQLITE_OK ){",
          "503:     rc = dbdataNext(pCursor);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "579:   }else{",
          "580:     pTab->base.zErrMsg = sqlite3_mprintf(\"%s\", sqlite3_errmsg(pTab->db));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "505:   return rc;",
          "506: }",
          "580: static int dbdataColumn(",
          "581:   sqlite3_vtab_cursor *pCursor,",
          "",
          "[Removed Lines]",
          "508: static int dbdataValueBytes(int eType){",
          "509:   switch( eType ){",
          "510:     case 0: case 8: case 9:",
          "511:     case 10: case 11:",
          "512:       return 0;",
          "513:     case 1:",
          "514:       return 1;",
          "515:     case 2:",
          "516:       return 2;",
          "517:     case 3:",
          "518:       return 3;",
          "519:     case 4:",
          "520:       return 4;",
          "521:     case 5:",
          "522:       return 6;",
          "523:     case 6:",
          "524:     case 7:",
          "525:       return 8;",
          "526:     default:",
          "527:       return ((eType-12) / 2);",
          "528:   }",
          "529: }",
          "531: static void dbdataValue(sqlite3_context *pCtx, int eType, u8 *pData){",
          "532:   switch( eType ){",
          "533:     case 0:",
          "534:     case 10:",
          "535:     case 11:",
          "536:       sqlite3_result_null(pCtx);",
          "537:       break;",
          "539:     case 8:",
          "540:       sqlite3_result_int(pCtx, 0);",
          "541:       break;",
          "542:     case 9:",
          "543:       sqlite3_result_int(pCtx, 1);",
          "544:       break;",
          "546:     case 1: case 2: case 3: case 4: case 5: case 6: case 7: {",
          "547:       sqlite3_uint64 v = (signed char)pData[0];",
          "548:       pData++;",
          "549:       switch( eType ){",
          "550:         case 7:",
          "551:         case 6:  v = (v<<16) + (pData[0]<<8) + pData[1];  pData += 2;",
          "552:         case 5:  v = (v<<16) + (pData[0]<<8) + pData[1];  pData += 2;",
          "553:         case 4:  v = (v<<8) + pData[0];  pData++;",
          "554:         case 3:  v = (v<<8) + pData[0];  pData++;",
          "555:         case 2:  v = (v<<8) + pData[0];  pData++;",
          "556:       }",
          "558:       if( eType==7 ){",
          "559:         double r;",
          "560:         memcpy(&r, &v, sizeof(r));",
          "561:         sqlite3_result_double(pCtx, r);",
          "562:       }else{",
          "563:         sqlite3_result_int64(pCtx, (sqlite3_int64)v);",
          "564:       }",
          "565:       break;",
          "566:     }",
          "568:     default: {",
          "569:       int n = ((eType-12) / 2);",
          "570:       if( eType % 2 ){",
          "571:         sqlite3_result_text(pCtx, pData, n, SQLITE_TRANSIENT);",
          "572:       }else{",
          "573:         sqlite3_result_blob(pCtx, pData, n, SQLITE_TRANSIENT);",
          "574:       }",
          "575:     }",
          "576:   }",
          "577: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "616:         if( pCsr->iField<0 ){",
          "617:           sqlite3_result_int64(ctx, pCsr->iIntkey);",
          "618:         }else{",
          "620:           sqlite3_int64 iType;",
          "631:         }",
          "632:         break;",
          "633:       }",
          "",
          "[Removed Lines]",
          "619:           int iHdr;",
          "621:           sqlite3_int64 iOff;",
          "622:           int i;",
          "623:           iHdr = dbdataGetVarint(pCsr->pRec, &iOff);",
          "624:           for(i=0; i<pCsr->iField; i++){",
          "625:             iHdr += dbdataGetVarint(&pCsr->pRec[iHdr], &iType);",
          "626:             iOff += dbdataValueBytes(iType);",
          "627:           }",
          "628:           dbdataGetVarint(&pCsr->pRec[iHdr], &iType);",
          "630:           dbdataValue(ctx, iType, &pCsr->pRec[iOff]);",
          "",
          "[Added Lines]",
          "629:           dbdataGetVarint(pCsr->pHdrPtr, &iType);",
          "630:           dbdataValue(ctx, iType, pCsr->pPtr);",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "738:  $(TOP)/ext/expert/sqlite3expert.h \\",
          "739:  $(TOP)/ext/misc/zipfile.c \\",
          "740:  $(TOP)/ext/misc/memtrace.c \\",
          "741:         $(TOP)/src/test_windirent.c",
          "743: shell.c: $(SHELL_SRC) $(TOP)/tool/mkshellc.tcl",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "741:  $(TOP)/ext/misc/dbdata.c \\",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3213a15f2133afbb0a4fec3b8f6e0eeca8c0befafd6658c41074e84f589d5d32",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "948: INCLUDE ../ext/expert/sqlite3expert.h",
          "949: INCLUDE ../ext/expert/sqlite3expert.c",
          "951: #if defined(SQLITE_ENABLE_SESSION)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "951: INCLUDE ../ext/misc/dbdata.c",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3999:     sqlite3_fileio_init(p->db, 0, 0);",
          "4000:     sqlite3_shathree_init(p->db, 0, 0);",
          "4001:     sqlite3_completion_init(p->db, 0, 0);",
          "4002: #ifdef SQLITE_HAVE_ZLIB",
          "4003:     sqlite3_zipfile_init(p->db, 0, 0);",
          "4004:     sqlite3_sqlar_init(p->db, 0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4005:     sqlite3_dbdata_init(p->db, 0, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6033: static void shellExec(sqlite3 *db, int *pRc, const char *zSql){",
          "6034:   int rc = *pRc;",
          "6035:   if( rc==SQLITE_OK ){",
          "6036:     char *zErr = 0;",
          "6037:     rc = sqlite3_exec(db, zSql, 0, 0, &zErr);",
          "6038:     if( rc!=SQLITE_OK ){",
          "6039:       raw_printf(stderr, \"SQL error: %s\\n\", zErr);",
          "6040:     }",
          "6042:   }",
          "6043: }",
          "6045: static void *shellMalloc(int *pRc, sqlite3_int64 nByte){",
          "6046:   void *pRet = 0;",
          "6047:   if( *pRc==SQLITE_OK ){",
          "6048:     pRet = sqlite3_malloc64(nByte);",
          "6049:     if( pRet==0 ){",
          "6051:     }else{",
          "6052:       memset(pRet, 0, nByte);",
          "6053:     }",
          "6054:   }",
          "6055:   return pRet;",
          "6056: }",
          "6058: static char *shellMPrintf(int *pRc, const char *zFmt, ...){",
          "6059:   char *z = 0;",
          "6060:   if( *pRc==SQLITE_OK ){",
          "6061:     va_list ap;",
          "6062:     va_start(ap, zFmt);",
          "6063:     z = sqlite3_vmprintf(zFmt, ap);",
          "6064:     va_end(ap);",
          "6065:     if( z==0 ){",
          "6067:     }",
          "6068:   }",
          "6069:   return z;",
          "6070: }",
          "6072: typedef struct RecoverTable RecoverTable;",
          "6073: struct RecoverTable {",
          "6079: };",
          "6084: static void recoverFreeTable(RecoverTable *pTab){",
          "6085:   if( pTab ){",
          "6086:     sqlite3_free(pTab->zName);",
          "6087:     sqlite3_free(pTab->zQuoted);",
          "6088:     sqlite3_free(pTab->zCreate);",
          "6089:     if( pTab->azlCol ){",
          "6090:       int i;",
          "6091:       for(i=0; i<pTab->nCol; i++){",
          "6092:         sqlite3_free(pTab->azlCol[i]);",
          "6093:       }",
          "6094:       sqlite3_free(pTab->azlCol);",
          "6095:     }",
          "6096:     sqlite3_free(pTab);",
          "6097:   }",
          "6098: }",
          "6100: static RecoverTable *recoverNewTable(",
          "6101:   ShellState *pState,",
          "6102:   int *pRc,",
          "6103:   int iRoot,",
          "6104:   int nCol",
          "6105: ){",
          "6106:   RecoverTable *pRet = 0;",
          "6108:   pRet = (RecoverTable*)shellMalloc(pRc, sizeof(RecoverTable));",
          "6109:   if( pRet ){",
          "6110:     sqlite3_stmt *pStmt = 0;",
          "6111:     pRet->zName = shellMPrintf(pRc, \"orphan_%d_%d\", nCol, iRoot);",
          "6112:     pRet->zQuoted = shellMPrintf(pRc, \"%Q\", pRet->zName);",
          "6113:     pRet->azlCol = (char**)shellMalloc(pRc, sizeof(char*) * nCol);",
          "6114:     pRet->nCol = nCol;",
          "6116:     shellPreparePrintf(pState->db, pRc, &pStmt,",
          "6117:       \"WITH s(i) AS (\"",
          "6118:       \"  SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<%d\"",
          "6119:       \")\"",
          "6120:       \"SELECT i-1, group_concat('c' || i, ', ') OVER (ORDER BY i) FROM s\",",
          "6121:       nCol",
          "6122:     );",
          "6123:     while( *pRc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6124:       int idx = sqlite3_column_int(pStmt, 0);",
          "6125:       const char *zText = (const char*)sqlite3_column_text(pStmt, 1);",
          "6126:       pRet->azlCol[idx] = shellMPrintf(pRc, \"%s\", zText);",
          "6127:     }",
          "6128:     shellFinalize(pRc, pStmt);",
          "6130:     pRet->zCreate = shellMPrintf(pRc, \"CREATE TABLE %Q (id, %s)\",",
          "6131:         pRet->zName, pRet->azlCol[nCol-1]",
          "6132:     );",
          "6133:   }",
          "6135:   if( *pRc!=SQLITE_OK ){",
          "6136:     recoverFreeTable(pRet);",
          "6137:     pRet = 0;",
          "6138:   }",
          "6140:   return pRet;",
          "6141: }",
          "6148: static int recoverDatabaseCmd(ShellState *pState){",
          "6149:   const char *zSql;",
          "6150:   int rc = SQLITE_OK;",
          "6153:   shellExec(pState->db, &rc,",
          "6156:     \"ATTACH '' AS recovery;\"",
          "6157:     \"CREATE TABLE recovery.dbptr(\"",
          "6158:     \"      pgno, child, PRIMARY KEY(child, pgno)\"",
          "6159:     \") WITHOUT ROWID;\"",
          "6160:     \"INSERT OR IGNORE INTO dbptr(pgno, child) SELECT * FROM sqlite_dbptr;\"",
          "6164:     \"DELETE FROM recovery.dbptr WHERE child = 1;\"",
          "6169:     \"DELETE FROM recovery.dbptr WHERE child IN (\"",
          "6170:     \"  SELECT child FROM recovery.dbptr GROUP BY child HAVING count(*)>1\"",
          "6171:     \");\"",
          "6176:     \"CREATE TABLE recovery.map(pgno INTEGER PRIMARY KEY, maxlen INT, root INT);\"",
          "6181:     \"WITH pages(i, maxlen) AS (\"",
          "6182:     \"  SELECT page_count, max(field+1) \"",
          "6183:     \"      FROM pragma_page_count, sqlite_dbdata WHERE pgno=page_count\"",
          "6184:     \"    UNION ALL\"",
          "6185:     \"  SELECT * FROM (SELECT i-1, max(field+1)\"",
          "6186:     \"      FROM pages, sqlite_dbdata WHERE pgno=i-1 AND i>=2)\"",
          "6187:     \")\"",
          "6188:     \"INSERT INTO recovery.map(pgno, maxlen, root) SELECT i, maxlen, (\"",
          "6189:     \"    WITH p(orig, pgno, parent) AS (\"",
          "6190:     \"      SELECT 0, i, (SELECT pgno FROM recovery.dbptr WHERE child=i)\"",
          "6191:     \"        UNION ALL\"",
          "6192:     \"      SELECT i, p.parent, \"",
          "6193:     \"        (SELECT pgno FROM recovery.dbptr WHERE child=p.parent) FROM p\"",
          "6194:     \"    )\"",
          "6195:     \"    SELECT pgno FROM p WHERE (parent IS NULL OR pgno = orig)\"",
          "6196:     \") \"",
          "6197:     \"FROM pages WHERE maxlen > 0;\"",
          "6201:     \"CREATE TABLE recovery.schema(type, name, tbl_name, rootpage, sql);\"",
          "6202:     \"INSERT INTO recovery.schema SELECT \"",
          "6203:     \"  max(CASE WHEN field=0 THEN value ELSE NULL END),\"",
          "6204:     \"  max(CASE WHEN field=1 THEN value ELSE NULL END),\"",
          "6205:     \"  max(CASE WHEN field=2 THEN value ELSE NULL END),\"",
          "6206:     \"  max(CASE WHEN field=3 THEN value ELSE NULL END),\"",
          "6207:     \"  max(CASE WHEN field=4 THEN value ELSE NULL END)\"",
          "6208:     \"FROM sqlite_dbdata WHERE pgno IN (\"",
          "6209:     \"  SELECT pgno FROM recovery.map WHERE root=1\"",
          "6210:     \")\"",
          "6211:     \"GROUP BY pgno, cell;\"",
          "6212:   );",
          "6214: #if 0",
          "6215:   zSql = \"SELECT type ||','|| name ||','|| tbl_name ||','|| rootpage ||','|| sql FROM recovery.schema;\";",
          "6216:   shellPrepare(pState->db, &rc, zSql, &pLoop);",
          "6217:   while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pLoop) ){",
          "6218:     raw_printf(pState->out, \"%s\\n\", (const char*)sqlite3_column_text(pLoop, 0));",
          "6219:   }",
          "6220:   shellFinalize(&rc, pLoop);",
          "6221:   return rc;",
          "6222: #endif",
          "6225:   zSql = \"SELECT root,max(maxlen) FROM recovery.map WHERE root>1 GROUP BY root\";",
          "6226:   shellPrepare(pState->db, &rc, zSql, &pLoop);",
          "6227:   while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pLoop) ){",
          "6228:     int iRoot = sqlite3_column_int(pLoop, 0);",
          "6229:     int nCol = sqlite3_column_int(pLoop, 1);",
          "6230:     RecoverTable *pTab;",
          "6232:     pTab = recoverNewTable(pState, &rc, iRoot, nCol);",
          "6233:     if( pTab ){",
          "6234:       sqlite3_stmt *pData = 0;",
          "6235:       raw_printf(pState->out, \"%s;\\n\", pTab->zCreate);",
          "6236:       shellPreparePrintf(pState->db, &rc, &pData,",
          "6237:         \"SELECT max(field), group_concat(quote(value), ', ') \"",
          "6238:         \"FROM sqlite_dbdata WHERE pgno IN (\"",
          "6239:         \"  SELECT pgno FROM recovery.map WHERE root=%d\"",
          "6240:         \")\"",
          "6241:         \"GROUP BY pgno, cell;\", iRoot",
          "6242:       );",
          "6243:       while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pData) ){",
          "6244:         int iMax = sqlite3_column_int(pData, 0);",
          "6245:         const char *zVal = (const char*)sqlite3_column_text(pData, 1);",
          "6246:         if( iMax+1==pTab->nCol ){",
          "6247:           raw_printf(pState->out, \"INSERT INTO %s VALUES( %s );\\n\",",
          "6248:               pTab->zQuoted, zVal);",
          "6249:         }else{",
          "6250:           raw_printf(pState->out, \"INSERT INTO %s(%s) VALUES( %s );\\n\",",
          "6251:               pTab->zQuoted, pTab->azlCol[iMax], zVal",
          "6252:           );",
          "6253:         }",
          "6254:       }",
          "6255:       shellFinalize(&rc, pData);",
          "6256:     }",
          "6257:     recoverFreeTable(pTab);",
          "6258:   }",
          "6259:   shellFinalize(&rc, pLoop);",
          "6261:   sqlite3_exec(pState->db, \"DETACH recovery\", 0, 0, 0);",
          "6262:   return rc;",
          "6263: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6313:     rc = shell_dbinfo_command(p, nArg, azArg);",
          "6314:   }else",
          "6316:   if( c=='d' && strncmp(azArg[0], \"dump\", n)==0 ){",
          "6317:     const char *zLike = 0;",
          "6318:     int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6552:   if( c=='r' && strncmp(azArg[0], \"recover\", n)==0 ){",
          "6553:     open_db(p, 0);",
          "6554:     rc = recoverDatabaseCmd(p);",
          "6555:   }else",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6365:     p->nErr = 0;",
          "6366:     if( zLike==0 ){",
          "6367:       run_schema_dump_query(p,",
          "6371:       run_schema_dump_query(p,",
          "6375:       run_table_dump_query(p,",
          "6379:     }else{",
          "6380:       char *zSql;",
          "6381:       zSql = sqlite3_mprintf(",
          "6385:       run_schema_dump_query(p,zSql);",
          "6386:       sqlite3_free(zSql);",
          "6387:       zSql = sqlite3_mprintf(",
          "6392:       run_table_dump_query(p, zSql, 0);",
          "6393:       sqlite3_free(zSql);",
          "6394:     }",
          "",
          "[Removed Lines]",
          "6368:         \"SELECT name, type, sql FROM sqlite_master \"",
          "6369:         \"WHERE sql NOT NULL AND type=='table' AND name!='sqlite_sequence'\"",
          "6370:       );",
          "6372:         \"SELECT name, type, sql FROM sqlite_master \"",
          "6373:         \"WHERE name=='sqlite_sequence'\"",
          "6374:       );",
          "6376:         \"SELECT sql FROM sqlite_master \"",
          "6377:         \"WHERE sql NOT NULL AND type IN ('index','trigger','view')\", 0",
          "6378:       );",
          "6382:         \"SELECT name, type, sql FROM sqlite_master \"",
          "6383:         \"WHERE tbl_name LIKE %Q AND type=='table'\"",
          "6384:         \"  AND sql NOT NULL\", zLike);",
          "6388:         \"SELECT sql FROM sqlite_master \"",
          "6389:         \"WHERE sql NOT NULL\"",
          "6390:         \"  AND type IN ('index','trigger','view')\"",
          "6391:         \"  AND tbl_name LIKE %Q\", zLike);",
          "",
          "[Added Lines]",
          "6611:           \"SELECT name, type, sql FROM sqlite_master \"",
          "6612:           \"WHERE sql NOT NULL AND type=='table' AND name!='sqlite_sequence'\"",
          "6613:           );",
          "6615:           \"SELECT name, type, sql FROM sqlite_master \"",
          "6616:           \"WHERE name=='sqlite_sequence'\"",
          "6617:           );",
          "6619:           \"SELECT sql FROM sqlite_master \"",
          "6620:           \"WHERE sql NOT NULL AND type IN ('index','trigger','view')\", 0",
          "6621:           );",
          "6625:           \"SELECT name, type, sql FROM sqlite_master \"",
          "6626:           \"WHERE tbl_name LIKE %Q AND type=='table'\"",
          "6627:           \"  AND sql NOT NULL\", zLike);",
          "6631:           \"SELECT sql FROM sqlite_master \"",
          "6632:           \"WHERE sql NOT NULL\"",
          "6633:           \"  AND type IN ('index','trigger','view')\"",
          "6634:           \"  AND tbl_name LIKE %Q\", zLike);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6398:     }",
          "6399:     sqlite3_exec(p->db, \"PRAGMA writable_schema=OFF;\", 0, 0, 0);",
          "6400:     sqlite3_exec(p->db, \"RELEASE dump;\", 0, 0, 0);",
          "6402:     p->showHeader = savedShowHeader;",
          "6403:     p->shellFlgs = savedShellFlags;",
          "6404:   }else",
          "",
          "[Removed Lines]",
          "6401:     raw_printf(p->out, p->nErr ? \"ROLLBACK; -- due to errors\\n\" : \"COMMIT;\\n\");",
          "",
          "[Added Lines]",
          "6644:     raw_printf(p->out, p->nErr?\"ROLLBACK; -- due to errors\\n\":\"COMMIT;\\n\");",
          "",
          "---------------"
        ],
        "tool/mkshellc.tcl||tool/mkshellc.tcl": [
          "File: tool/mkshellc.tcl -> tool/mkshellc.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   }",
          "41:   return $line",
          "42: }",
          "43: while {1} {",
          "44:   set lx [omit_redundant_typedefs [gets $in]]",
          "45:   if {[eof $in]} break;",
          "46:   if {[regexp {^INCLUDE } $lx]} {",
          "47:     set cfile [lindex $lx 1]",
          "48:     puts $out \"/************************* Begin $cfile ******************/\"",
          "49:     set in2 [open $topdir/src/$cfile rb]",
          "50:     while {![eof $in2]} {",
          "51:       set lx [omit_redundant_typedefs [gets $in2]]",
          "53:       if {[regexp {^# *include \"test_windirent.h\"} $lx]} {",
          "54:         set lx \"/* $lx */\"",
          "55:       }",
          "",
          "[Removed Lines]",
          "52:       if {[regexp {^#include \"sqlite} $lx]} continue",
          "",
          "[Added Lines]",
          "43: set iLine 0",
          "47:   incr iLine",
          "51:     puts $out \"#line 1 \\\"$cfile\\\"\"",
          "55:       if {[regexp {^#include \"sqlite} $lx]} {",
          "56:         set lx \"/* $lx */\"",
          "57:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     }",
          "59:     close $in2",
          "60:     puts $out \"/************************* End $cfile ********************/\"",
          "61:     continue",
          "62:   }",
          "63:   puts $out $lx",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:     puts $out \"#line [expr $iLine+1] \\\"shell.c.in\\\"\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c269a9ff844bb85943d59eb8cf6c6b10e51e305",
      "candidate_info": {
        "commit_hash": "1c269a9ff844bb85943d59eb8cf6c6b10e51e305",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1c269a9ff844bb85943d59eb8cf6c6b10e51e305",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Remove a NEVER() that is reachable from a corrupt database.\n\nFossilOrigin-Name: 30e6ee27a9fb78291c324ac9b80db4579280140430804ecd4692e312f9938525",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7f2246a17be9915b3492624a3d8deff56694bdc372f7627e3f16c1869415b1a3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6900:   assert( i<iEnd );",
          "6901:   j = get2byte(&aData[hdr+5]);",
          "6903:   memcpy(&pTmp[j], &aData[j], usableSize - j);",
          "6905:   for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}",
          "",
          "[Removed Lines]",
          "6902:   if( NEVER(j>(u32)usableSize) ){ j = 0; }",
          "",
          "[Added Lines]",
          "6902:   if( j>(u32)usableSize ){ j = 0; }",
          "",
          "---------------"
        ]
      }
    }
  ]
}