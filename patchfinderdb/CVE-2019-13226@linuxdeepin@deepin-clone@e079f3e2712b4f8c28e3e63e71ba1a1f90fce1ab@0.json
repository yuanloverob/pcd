{
  "cve_id": "CVE-2019-13226",
  "cve_desc": "deepin-clone before 1.1.3 uses a predictable path /tmp/.deepin-clone/mount/<block-dev-basename> in the Helper::temporaryMountDevice() function to temporarily mount a file system as root. An unprivileged user can prepare a symlink at this location to have the file system mounted in an arbitrary location. By winning a race condition, the attacker can also enter the mount point, thereby preventing a subsequent unmount of the file system.",
  "repo": "linuxdeepin/deepin-clone",
  "patch_hash": "e079f3e2712b4f8c28e3e63e71ba1a1f90fce1ab",
  "patch_info": {
    "commit_hash": "e079f3e2712b4f8c28e3e63e71ba1a1f90fce1ab",
    "repo": "linuxdeepin/deepin-clone",
    "commit_url": "https://github.com/linuxdeepin/deepin-clone/commit/e079f3e2712b4f8c28e3e63e71ba1a1f90fce1ab",
    "files": [
      "app/src/corelib/ddevicediskinfo.cpp",
      "app/src/corelib/helper.cpp",
      "app/src/corelib/helper.h",
      "app/src/fixboot/bootdoctor.cpp",
      "app/src/main.cpp"
    ],
    "message": "fix: Do not use the \"/tmp\" directory\n\nhttps://github.com/linuxdeepin/deepin-clone/issues/16\nhttps://bugzilla.opensuse.org/show_bug.cgi?id=1130388",
    "before_after_code_files": [
      "app/src/corelib/ddevicediskinfo.cpp||app/src/corelib/ddevicediskinfo.cpp",
      "app/src/corelib/helper.cpp||app/src/corelib/helper.cpp",
      "app/src/corelib/helper.h||app/src/corelib/helper.h",
      "app/src/fixboot/bootdoctor.cpp||app/src/fixboot/bootdoctor.cpp",
      "app/src/main.cpp||app/src/main.cpp"
    ]
  },
  "patch_diff": {
    "app/src/corelib/ddevicediskinfo.cpp||app/src/corelib/ddevicediskinfo.cpp": [
      "File: app/src/corelib/ddevicediskinfo.cpp -> app/src/corelib/ddevicediskinfo.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "304:         if (currentMode == DDiskInfo::Read) {",
      "305:             const QString &executer = Helper::getPartcloneExecuter(part);",
      "307:         } else {",
      "309:         }",
      "311:         break;",
      "",
      "[Removed Lines]",
      "306:             process->start(QStringLiteral(\"%1 -s %2 -o - -c -z %3 -L /tmp/partclone.log\").arg(executer).arg(part.filePath()).arg(Global::bufferSize), QIODevice::ReadOnly);",
      "308:             process->start(QStringLiteral(\"partclone.restore -s - -o %2 -z %3 -L /tmp/partclone.log\").arg(part.filePath()).arg(Global::bufferSize));",
      "",
      "[Added Lines]",
      "306:             process->start(QStringLiteral(\"%1 -s %2 -o - -c -z %3 -L /var/log/partclone.log\").arg(executer).arg(part.filePath()).arg(Global::bufferSize), QIODevice::ReadOnly);",
      "308:             process->start(QStringLiteral(\"partclone.restore -s - -o %2 -z %3 -L /var/log/partclone.log\").arg(part.filePath()).arg(Global::bufferSize));",
      "",
      "---------------"
    ],
    "app/src/corelib/helper.cpp||app/src/corelib/helper.cpp": [
      "File: app/src/corelib/helper.cpp -> app/src/corelib/helper.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "332:         return true;",
      "333:     } else {",
      "335:         process.setStandardOutputFile(\"/dev/null\");",
      "336:         process.setReadChannel(QProcess::StandardError);",
      "337:         process.waitForStarted();",
      "",
      "[Removed Lines]",
      "334:         process.start(QString(\"%1 -s %2 -c -q -C -L /tmp/partclone.log\").arg(getPartcloneExecuter(DDevicePartInfo(partDevice))).arg(partDevice));",
      "",
      "[Added Lines]",
      "336:         process.start(QString(\"%1 -s %2 -c -q -C -L /var/log/partclone.log\").arg(getPartcloneExecuter(DDevicePartInfo(partDevice))).arg(partDevice));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "501:         return mount_point;",
      "503:     mount_point = \"%1/.%2/mount/%3\";",
      "508:     if (!QDir::current().mkpath(mount_point)) {",
      "509:         dCError(\"mkpath \\\"%s\\\" failed\", qPrintable(mount_point));",
      "",
      "[Removed Lines]",
      "504:     const QStringList &tmp_paths = QStandardPaths::standardLocations(QStandardPaths::TempLocation);",
      "506:     mount_point = mount_point.arg(tmp_paths.isEmpty() ? \"/tmp\" : tmp_paths.first()).arg(qApp->applicationName()).arg(name);",
      "",
      "[Added Lines]",
      "506:     const QStringList &tmp_paths = QStandardPaths::standardLocations(QStandardPaths::RuntimeLocation);",
      "508:     mount_point = mount_point.arg(tmp_paths.isEmpty() ? \"/run/user/0\" : tmp_paths.first()).arg(qApp->applicationName()).arg(name);",
      "",
      "---------------"
    ],
    "app/src/corelib/helper.h||app/src/corelib/helper.h": [
      "File: app/src/corelib/helper.h -> app/src/corelib/helper.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "99:     static QString parseSerialUrl(const QString &urlString, QString *errorString = 0);",
      "100:     static QString toSerialUrl(const QString &file);",
      "102: signals:",
      "103:     void newWarning(const QString &message);",
      "104:     void newError(const QString &message);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "102:     static bool clearSymlink(const QString &path);",
      "",
      "---------------"
    ],
    "app/src/fixboot/bootdoctor.cpp||app/src/fixboot/bootdoctor.cpp": [
      "File: app/src/fixboot/bootdoctor.cpp -> app/src/fixboot/bootdoctor.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "55:     }",
      "57:     {",
      "61:         if (!QDir::current().mkpath(tmp_dir)) {",
      "62:             dCError(\"mkpath \\\"%s\\\" failed\", qPrintable(tmp_dir));",
      "",
      "[Removed Lines]",
      "58:         const QStringList &tmp_paths = QStandardPaths::standardLocations(QStandardPaths::TempLocation);",
      "59:         const QString tmp_dir = (tmp_paths.isEmpty() ? \"/tmp\" : tmp_paths.first()) + \"/.deepin-clone\";",
      "",
      "[Added Lines]",
      "58:         const QString tmp_dir = \"/var/cache/deepin-clone\";",
      "",
      "---------------"
    ],
    "app/src/main.cpp||app/src/main.cpp": [
      "File: app/src/main.cpp -> app/src/main.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "102:         ConsoleAppender *consoleAppender = new ConsoleAppender;",
      "103:         consoleAppender->setFormat(logFormat);",
      "106:         rollingFileAppender->setFormat(logFormat);",
      "107:         rollingFileAppender->setLogFilesLimit(5);",
      "108:         rollingFileAppender->setDatePattern(RollingFileAppender::DailyRollover);",
      "111:         logger->registerAppender(rollingFileAppender);",
      "113:         if (qEnvironmentVariableIsSet(\"PKEXEC_UID\")) {",
      "114:             const quint32 pkexec_uid = qgetenv(\"PKEXEC_UID\").toUInt();",
      "135:         }",
      "137:         DApplication::loadDXcbPlugin();",
      "",
      "[Removed Lines]",
      "105:         RollingFileAppender *rollingFileAppender = new RollingFileAppender(\"/tmp/.deepin-clone.log\");",
      "110:         logger->registerAppender(consoleAppender);",
      "115:             const QDir user_home(getpwuid(pkexec_uid)->pw_dir);",
      "117:             QFile pam_file(user_home.absoluteFilePath(\".pam_environment\"));",
      "119:             if (pam_file.open(QIODevice::ReadOnly)) {",
      "120:                 while (!pam_file.atEnd()) {",
      "121:                     const QByteArray &line = pam_file.readLine().simplified();",
      "123:                     if (line.startsWith(\"QT_SCALE_FACTOR\")) {",
      "124:                         const QByteArrayList &list = line.split('=');",
      "126:                         if (list.count() == 2) {",
      "127:                             qputenv(\"QT_SCALE_FACTOR\", list.last());",
      "128:                             break;",
      "129:                         }",
      "130:                     }",
      "131:                 }",
      "133:                 pam_file.close();",
      "134:             }",
      "",
      "[Added Lines]",
      "105:         const QString log_file(\"/var/log/deepin-clone.log\");",
      "107:         RollingFileAppender *rollingFileAppender = new RollingFileAppender(log_file);",
      "113:         logger->registerAppender(consoleAppender);",
      "118:             DApplication::customQtThemeConfigPathByUserHome(getpwuid(pkexec_uid)->pw_dir);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a0374eeea860f53654ace89ae92f2427840ba486",
      "candidate_info": {
        "commit_hash": "a0374eeea860f53654ace89ae92f2427840ba486",
        "repo": "linuxdeepin/deepin-clone",
        "commit_url": "https://github.com/linuxdeepin/deepin-clone/commit/a0374eeea860f53654ace89ae92f2427840ba486",
        "files": [
          "app/src/corelib/clonejob.cpp",
          "app/src/corelib/ddevicediskinfo.cpp",
          "app/src/corelib/ddevicepartinfo.cpp",
          "app/src/corelib/helper.cpp",
          "app/src/corelib/helper.h",
          "app/src/fixboot/bootdoctor.cpp",
          "app/src/widgets/mainwindow.cpp",
          "app/src/widgets/selectfilepage.cpp"
        ],
        "message": "refactor: separate the executor of the command call from the argument list",
        "before_after_code_files": [
          "app/src/corelib/clonejob.cpp||app/src/corelib/clonejob.cpp",
          "app/src/corelib/ddevicediskinfo.cpp||app/src/corelib/ddevicediskinfo.cpp",
          "app/src/corelib/ddevicepartinfo.cpp||app/src/corelib/ddevicepartinfo.cpp",
          "app/src/corelib/helper.cpp||app/src/corelib/helper.cpp",
          "app/src/corelib/helper.h||app/src/corelib/helper.h",
          "app/src/fixboot/bootdoctor.cpp||app/src/fixboot/bootdoctor.cpp",
          "app/src/widgets/mainwindow.cpp||app/src/widgets/mainwindow.cpp",
          "app/src/widgets/selectfilepage.cpp||app/src/widgets/selectfilepage.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/linuxdeepin/deepin-clone/pull/18"
        ],
        "olp_code_files": {
          "patch": [
            "app/src/corelib/ddevicediskinfo.cpp||app/src/corelib/ddevicediskinfo.cpp",
            "app/src/corelib/helper.cpp||app/src/corelib/helper.cpp",
            "app/src/corelib/helper.h||app/src/corelib/helper.h",
            "app/src/fixboot/bootdoctor.cpp||app/src/fixboot/bootdoctor.cpp"
          ],
          "candidate": [
            "app/src/corelib/ddevicediskinfo.cpp||app/src/corelib/ddevicediskinfo.cpp",
            "app/src/corelib/helper.cpp||app/src/corelib/helper.cpp",
            "app/src/corelib/helper.h||app/src/corelib/helper.h",
            "app/src/fixboot/bootdoctor.cpp||app/src/fixboot/bootdoctor.cpp"
          ]
        }
      },
      "candidate_diff": {
        "app/src/corelib/clonejob.cpp||app/src/corelib/clonejob.cpp": [
          "File: app/src/corelib/clonejob.cpp -> app/src/corelib/clonejob.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "344:             return;",
          "345:         }",
          "349:         if (info.fileSystemType() == DPartInfo::EXT4",
          "350:                 || info.fileSystemType() == DPartInfo::EXT3",
          "351:                 || info.fileSystemType() == DPartInfo::EXT2) {",
          "353:         }",
          "354:     }",
          "",
          "[Removed Lines]",
          "347:         Helper::processExec(QString(\"fsck -f -y %1\").arg(info.indexNumber()));",
          "352:             Helper::processExec(QString(\"resize2fs -p -f %1\").arg(info.indexNumber()));",
          "",
          "[Added Lines]",
          "347:         Helper::processExec(\"fsck\", {\"-f\", \"-y\", QString::number(info.indexNumber())});",
          "352:             Helper::processExec(\"resize2fs\", {\"-p\", \"-f\", QString::number(info.indexNumber())});",
          "",
          "---------------"
        ],
        "app/src/corelib/ddevicediskinfo.cpp||app/src/corelib/ddevicediskinfo.cpp": [
          "File: app/src/corelib/ddevicediskinfo.cpp -> app/src/corelib/ddevicediskinfo.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: static QString getPTName(const QString &device)",
          "39: {",
          "42:     const QByteArray &data = Helper::lastProcessStandardOutput();",
          "",
          "[Removed Lines]",
          "40:     Helper::processExec(QStringLiteral(\"/sbin/blkid -p -s PTTYPE -d -i %1\").arg(device));",
          "",
          "[Added Lines]",
          "40:     Helper::processExec(\"/sbin/blkid\", {\"-p\", \"-s\", \"PTTYPE\", \"-d\", \"-i\", device});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182: {",
          "183:     children.clear();",
          "187:     if (!block_devices.isEmpty())",
          "188:         init(block_devices.first().toObject());",
          "",
          "[Removed Lines]",
          "185:     const QJsonArray &block_devices = Helper::getBlockDevices(name);",
          "",
          "[Added Lines]",
          "185:     const QJsonArray &block_devices = Helper::getBlockDevices({name});",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "259:         }",
          "261:         if (currentMode == DDiskInfo::Read) {",
          "263:         } else {",
          "265:         }",
          "267:         break;",
          "",
          "[Removed Lines]",
          "262:             process->start(QStringLiteral(\"dd if=%1 bs=512 count=2048 status=none\").arg(filePath()), QIODevice::ReadOnly);",
          "264:             process->start(QStringLiteral(\"dd of=%1 bs=512 status=none conv=fsync\").arg(filePath()));",
          "",
          "[Added Lines]",
          "262:             process->start(\"dd\", {QString(\"if=%1\").arg(filePath()), \"bs=512\", \"count=2048\", \"status=none\"}, QIODevice::ReadOnly);",
          "264:             process->start(\"dd\", {QString(\"of=%1\").arg(filePath()), \"bs=512\", \"status=none\", \"conv=fsync\"});",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "274:         }",
          "276:         if (currentMode == DDiskInfo::Read)",
          "278:         else",
          "281:         break;",
          "282:     }",
          "",
          "[Removed Lines]",
          "277:             process->start(QStringLiteral(\"sfdisk -d %1\").arg(filePath()), QIODevice::ReadOnly);",
          "279:             process->start(QStringLiteral(\"sfdisk %1 --no-reread\").arg(filePath()));",
          "",
          "[Added Lines]",
          "277:             process->start(\"sfdisk\", {\"-d\", filePath()}, QIODevice::ReadOnly);",
          "279:             process->start(\"sfdisk\", {filePath(), \"--no-reread\"});",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "302:         }",
          "304:         if (currentMode == DDiskInfo::Read) {",
          "307:         } else {",
          "309:         }",
          "311:         break;",
          "",
          "[Removed Lines]",
          "305:             const QString &executer = Helper::getPartcloneExecuter(part);",
          "306:             process->start(QStringLiteral(\"%1 -s %2 -o - -c -z %3 -L /var/log/partclone.log\").arg(executer).arg(part.filePath()).arg(Global::bufferSize), QIODevice::ReadOnly);",
          "308:             process->start(QStringLiteral(\"partclone.restore -s - -o %2 -z %3 -L /var/log/partclone.log\").arg(part.filePath()).arg(Global::bufferSize));",
          "",
          "[Added Lines]",
          "305:             QStringList args = {\"-s\", part.filePath(), \"-o\", \"-\", \"-c\", \"-z\", QString::number(Global::bufferSize), \"-L\", \"/var/log/partclone.log\"};",
          "306:             const QString &executer = Helper::getPartcloneExecuter(part, args);",
          "307:             process->start(executer, args, QIODevice::ReadOnly);",
          "309:             process->start(\"partclone.restore\", {\"-s\", \"-\", \"-o\", part.filePath(), \"-z\", QString::number(Global::bufferSize), \"-L\", \"/var/log/partclone.log\"});",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "521: DDeviceDiskInfo::DDeviceDiskInfo(const QString &filePath)",
          "522: {",
          "525:     if (!block_devices.isEmpty()) {",
          "526:         const QJsonObject &obj = block_devices.first().toObject();",
          "",
          "[Removed Lines]",
          "523:     const QJsonArray &block_devices = Helper::getBlockDevices(filePath);",
          "",
          "[Added Lines]",
          "524:     const QJsonArray &block_devices = Helper::getBlockDevices({filePath});",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "529:         d_func()->init(obj);",
          "531:         if (d->type == Part) {",
          "534:             if (!parent.isEmpty()) {",
          "535:                 const QJsonObject &parent_obj = parent.first().toObject();",
          "",
          "[Removed Lines]",
          "532:             const QJsonArray &parent = Helper::getBlockDevices(obj.value(\"pkname\").toString());",
          "",
          "[Added Lines]",
          "533:             const QJsonArray &parent = Helper::getBlockDevices({obj.value(\"pkname\").toString()});",
          "",
          "---------------"
        ],
        "app/src/corelib/ddevicepartinfo.cpp||app/src/corelib/ddevicepartinfo.cpp": [
          "File: app/src/corelib/ddevicepartinfo.cpp -> app/src/corelib/ddevicepartinfo.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:         sizeEnd = size - 1;",
          "125:         index = 0;",
          "126:     } else {",
          "129:         if (code == 0) {",
          "130:             const QByteArray &data = Helper::lastProcessStandardOutput();",
          "",
          "[Removed Lines]",
          "127:         int code = Helper::processExec(QStringLiteral(\"partx %1 -b -P -o START,END,SECTORS,SIZE,TYPE,NR,UUID\").arg(name));",
          "",
          "[Added Lines]",
          "127:         int code = Helper::processExec(\"partx\", {name, \"-b\", \"-P\", \"-o\", \"START,END,SECTORS,SIZE,TYPE,NR,UUID\"});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "185: DDevicePartInfo::DDevicePartInfo(const QString &name)",
          "186:     : DPartInfo(new DDevicePartInfoPrivate(this))",
          "187: {",
          "190:     if (!block_devices.isEmpty()) {",
          "191:         const QJsonObject &obj = block_devices.first().toObject();",
          "",
          "[Removed Lines]",
          "188:     const QJsonArray &block_devices = Helper::getBlockDevices(name);",
          "",
          "[Added Lines]",
          "188:     const QJsonArray &block_devices = Helper::getBlockDevices({name});",
          "",
          "---------------"
        ],
        "app/src/corelib/helper.cpp||app/src/corelib/helper.cpp": [
          "File: app/src/corelib/helper.cpp -> app/src/corelib/helper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #include <QRegularExpression>",
          "37: #include <QUuid>",
          "41: QByteArray Helper::m_processStandardError;",
          "42: QByteArray Helper::m_processStandardOutput;",
          "",
          "[Removed Lines]",
          "39: #define COMMAND_LSBLK QStringLiteral(\"/bin/lsblk -J -b -p -o NAME,KNAME,PKNAME,FSTYPE,MOUNTPOINT,LABEL,UUID,SIZE,TYPE,PARTTYPE,PARTLABEL,PARTUUID,MODEL,PHY-SEC,RO,RM,TRAN,SERIAL %1\")",
          "",
          "[Added Lines]",
          "39: #define COMMAND_LSBLK QStringLiteral(\"/bin/lsblk\")",
          "40: #define COMMAND_LSBLK_ARGS {\"-J\", \"-b\", \"-p\", \"-o\", \"NAME,KNAME,PKNAME,FSTYPE,MOUNTPOINT,LABEL,UUID,SIZE,TYPE,PARTTYPE,PARTLABEL,PARTUUID,MODEL,PHY-SEC,RO,RM,TRAN,SERIAL\"}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     return _g_globalHelper;",
          "50: }",
          "53: {",
          "54:     m_processStandardOutput.clear();",
          "55:     m_processStandardError.clear();",
          "",
          "[Removed Lines]",
          "52: int Helper::processExec(QProcess *process, const QString &command, int timeout, QIODevice::OpenMode mode)",
          "",
          "[Added Lines]",
          "53: int Helper::processExec(QProcess *process, const QString &program, QStringList args, int timeout, QIODevice::OpenMode mode)",
          "56:     args.removeAll(QString());",
          "57:     args.removeAll(\"\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:         });",
          "82:     }",
          "84:     if (Global::debugLevel > 1)",
          "85:         dCDebug(\"Exec: \\\"%s\\\", timeout: %d\", qPrintable(command), timeout);",
          "88:     process->waitForStarted();",
          "90:     if (process->error() != QProcess::UnknownError) {",
          "",
          "[Removed Lines]",
          "87:     process->start(command, mode);",
          "",
          "[Added Lines]",
          "89:     QString command = QString(\"%1 %2\").arg(program).arg(args.join(\" \"));",
          "94:     process->start(program, args, mode);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "124:     return process->exitCode();",
          "125: }",
          "128: {",
          "129:     QProcess process;",
          "132: }",
          "134: QByteArray Helper::lastProcessStandardOutput()",
          "",
          "[Removed Lines]",
          "127: int Helper::processExec(const QString &command, int timeout)",
          "131:     return processExec(&process, command, timeout);",
          "",
          "[Added Lines]",
          "134: int Helper::processExec(const QString &command, const QStringList &args, int timeout)",
          "138:     return processExec(&process, command, args, timeout, QIODevice::ReadOnly);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "221: bool Helper::refreshSystemPartList(const QString &device)",
          "222: {",
          "225:     if (code != 0)",
          "226:         return false;",
          "",
          "[Removed Lines]",
          "223:     int code = device.isEmpty() ? processExec(\"partprobe\") : processExec(QString(\"partprobe %1\").arg(device));",
          "",
          "[Added Lines]",
          "230:     int code = device.isEmpty() ? processExec(\"partprobe\", {}) : processExec(\"partprobe\", {device});",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "230:     return true;",
          "231: }",
          "234: {",
          "235:     QString executor;",
          "",
          "[Removed Lines]",
          "233: QString Helper::getPartcloneExecuter(const DPartInfo &info)",
          "",
          "[Added Lines]",
          "240: QString Helper::getPartcloneExecuter(const DPartInfo &info, QStringList &args)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "263:         executor = \"nilfs2\";",
          "264:         break;",
          "265:     case DPartInfo::NTFS:",
          "267:         break;",
          "268:     case DPartInfo::Reiser4:",
          "269:         executor = \"reiser4\";",
          "",
          "[Removed Lines]",
          "266:         executor = \"ntfs -I\";",
          "",
          "[Added Lines]",
          "273:         executor = \"ntfs\";",
          "274:         args.append(\"-I\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "334:         return true;",
          "335:     } else {",
          "337:         process.setStandardOutputFile(\"/dev/null\");",
          "338:         process.setReadChannel(QProcess::StandardError);",
          "339:         process.waitForStarted();",
          "",
          "[Removed Lines]",
          "336:         process.start(QString(\"%1 -s %2 -c -q -C -L /var/log/partclone.log\").arg(getPartcloneExecuter(DDevicePartInfo(partDevice))).arg(partDevice));",
          "",
          "[Added Lines]",
          "344:         QStringList args = {\"-s\", partDevice, \"-c\", \"-q\", \"-C\", \"-L\", \"/var/log/partclone.log\"};",
          "345:         const QString &executer = getPartcloneExecuter(DDevicePartInfo(partDevice), args);",
          "346:         process.start(executer, args);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "409:     return false;",
          "410: }",
          "413: {",
          "416:     return lastProcessStandardOutput();",
          "417: }",
          "420: {",
          "421:     const QByteArray &array = Helper::callLsblk(commandExtraArg);",
          "",
          "[Removed Lines]",
          "412: QByteArray Helper::callLsblk(const QString &extraArg)",
          "414:     processExec(COMMAND_LSBLK.arg(extraArg));",
          "419: QJsonArray Helper::getBlockDevices(const QString &commandExtraArg)",
          "",
          "[Added Lines]",
          "422: QByteArray Helper::callLsblk(const QStringList &extraArg)",
          "424:     QStringList args(COMMAND_LSBLK_ARGS);",
          "426:     if (!extraArg.isEmpty())",
          "427:         args.append(extraArg);",
          "429:     processExec(COMMAND_LSBLK, args);",
          "434: QJsonArray Helper::getBlockDevices(const QStringList &commandExtraArg)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "434: QString Helper::mountPoint(const QString &device)",
          "435: {",
          "438:     if (array.isEmpty())",
          "439:         return QString();",
          "",
          "[Removed Lines]",
          "436:     const QJsonArray &array = getBlockDevices(device);",
          "",
          "[Added Lines]",
          "451:     const QJsonArray &array = getBlockDevices({device});",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "444: bool Helper::isMounted(const QString &device)",
          "445: {",
          "448:     for (const QJsonValue &part : array) {",
          "449:         const QJsonObject &obj = part.toObject();",
          "",
          "[Removed Lines]",
          "446:     const QJsonArray &array = getBlockDevices(\"-l \" + device);",
          "",
          "[Added Lines]",
          "461:     const QJsonArray &array = getBlockDevices({\"-l\", device});",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "458: bool Helper::umountDevice(const QString &device)",
          "459: {",
          "462:     for (const QJsonValue &device : array) {",
          "463:         const QJsonObject &obj = device.toObject();",
          "465:         if (!obj.value(\"mountpoint\").isNull()) {",
          "467:                 return false;",
          "468:         }",
          "469:     }",
          "",
          "[Removed Lines]",
          "460:     const QJsonArray &array = getBlockDevices(\"-l \" + device);",
          "466:             if (processExec(QString(\"umount -d %1\").arg(obj.value(\"name\").toString())) != 0)",
          "",
          "[Added Lines]",
          "475:     const QJsonArray &array = getBlockDevices({\"-l\", device});",
          "481:             if (processExec(\"umount\", {\"-d\", obj.value(\"name\").toString()}) != 0)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "474: bool Helper::tryUmountDevice(const QString &device)",
          "475: {",
          "478:     for (const QJsonValue &device : array) {",
          "479:         const QJsonObject &obj = device.toObject();",
          "481:         if (!obj.value(\"mountpoint\").isNull()) {",
          "483:                 return false;",
          "484:         }",
          "485:     }",
          "",
          "[Removed Lines]",
          "476:     const QJsonArray &array = getBlockDevices(\"-l \" + device);",
          "482:             if (processExec(QString(\"umount -d %1 --fake\").arg(obj.value(\"name\").toString())) != 0)",
          "",
          "[Added Lines]",
          "491:     const QJsonArray &array = getBlockDevices({\"-l\" + device});",
          "497:             if (processExec(\"umount\", {\"-d\", obj.value(\"name\").toString(), \"--fake\"}) != 0)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "490: bool Helper::mountDevice(const QString &device, const QString &path, bool readonly)",
          "491: {",
          "492:     if (readonly)",
          "496: }",
          "498: QString Helper::temporaryMountDevice(const QString &device, const QString &name, bool readonly)",
          "",
          "[Removed Lines]",
          "493:         return processExec(QString(\"mount -r %1 %2\").arg(device, path)) == 0;",
          "495:     return processExec(QString(\"mount %1 %2\").arg(device, path)) == 0;",
          "",
          "[Added Lines]",
          "508:         return processExec(\"mount\", {\"-r\", device, path}) == 0;",
          "510:     return processExec(\"mount\", {device, path}) == 0;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "553: int Helper::partitionIndexNumber(const QString &partDevice)",
          "554: {",
          "557:     if (array.isEmpty())",
          "558:         return -1;",
          "562:     if (p_array.isEmpty())",
          "563:         return -1;",
          "",
          "[Removed Lines]",
          "555:     const QJsonArray &array = getBlockDevices(partDevice);",
          "560:     const QJsonArray &p_array = getBlockDevices(array.first().toObject().value(\"pkname\").toString() + \" -x NAME\");",
          "",
          "[Added Lines]",
          "570:     const QJsonArray &array = getBlockDevices({partDevice});",
          "575:     const QJsonArray &p_array = getBlockDevices({array.first().toObject().value(\"pkname\").toString(), \"-x\", \"NAME\"});",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "577: QByteArray Helper::getPartitionTable(const QString &devicePath)",
          "578: {",
          "581:     return lastProcessStandardOutput();",
          "582: }",
          "",
          "[Removed Lines]",
          "579:     processExec(QStringLiteral(\"/sbin/sfdisk -d %1\").arg(devicePath));",
          "",
          "[Added Lines]",
          "594:     processExec(\"/sbin/sfdisk\", {\"-d\", devicePath});",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "588:     process.setStandardInputFile(ptFile);",
          "591:         return false;",
          "596:     return code == 0;",
          "597: }",
          "",
          "[Removed Lines]",
          "590:     if (processExec(&process, QStringLiteral(\"/sbin/sfdisk %1\").arg(devicePath)) != 0)",
          "593:     int code = processExec(QStringLiteral(\"/sbin/partprobe %1\").arg(devicePath));",
          "594:     processExec(\"sleep 1\");",
          "",
          "[Added Lines]",
          "605:     if (processExec(&process, \"/sbin/sfdisk\", {devicePath}) != 0)",
          "608:     int code = processExec(\"/sbin/partprobe\", {devicePath});",
          "609:     processExec(\"sleep\", {\"1\"});",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "621:     if (fileName.startsWith(\"/dev/\"))",
          "622:         return true;",
          "626:     return lastProcessStandardOutput() == \"block special file\\n\";",
          "627: }",
          "629: bool Helper::isPartcloneFile(const QString &fileName)",
          "630: {",
          "632: }",
          "634: bool Helper::isDiskDevice(const QString &devicePath)",
          "635: {",
          "638:     if (blocks.isEmpty())",
          "639:         return false;",
          "",
          "[Removed Lines]",
          "624:     processExec(QStringLiteral(\"env LANG=C stat -c %F %1\").arg(fileName));",
          "631:     return processExec(QStringLiteral(\"partclone.info %1\").arg(fileName)) == 0;",
          "636:     const QJsonArray &blocks = getBlockDevices(devicePath);",
          "",
          "[Added Lines]",
          "639:     if (fileName.isEmpty())",
          "640:         return false;",
          "642:     QProcess process;",
          "643:     QStringList env_list = QProcess::systemEnvironment();",
          "645:     env_list.append(\"LANG=C\");",
          "647:     process.setEnvironment(env_list);",
          "648:     processExec(&process, \"stat\", {\"-c\", \"%F\", fileName});",
          "655:     return processExec(\"partclone.info\", {fileName}) == 0;",
          "660:     const QJsonArray &blocks = getBlockDevices({devicePath});",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "647: bool Helper::isPartitionDevice(const QString &devicePath)",
          "648: {",
          "651:     if (blocks.isEmpty())",
          "652:         return false;",
          "",
          "[Removed Lines]",
          "649:     const QJsonArray &blocks = getBlockDevices(devicePath);",
          "",
          "[Added Lines]",
          "673:     const QJsonArray &blocks = getBlockDevices({devicePath});",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "660: QString Helper::parentDevice(const QString &device)",
          "661: {",
          "664:     if (blocks.isEmpty())",
          "665:         return device;",
          "",
          "[Removed Lines]",
          "662:     const QJsonArray &blocks = getBlockDevices(device);",
          "",
          "[Added Lines]",
          "686:     if (device.isEmpty())",
          "687:         return QString();",
          "689:     const QJsonArray &blocks = getBlockDevices({device});",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "680: int Helper::clonePartition(const DPartInfo &part, const QString &to, bool override)",
          "681: {",
          "683:     QString command;",
          "685:     if (executor.isEmpty() || executor == \"partclone.imager\") {",
          "686:         if (part.guidType() == DPartInfo::InvalidGUID)",
          "687:             return -1;",
          "690:     } else if (isBlockSpecialFile(to)) {",
          "692:     } else {",
          "694:     }",
          "698:     if (code != 0)",
          "699:         qDebug() << command << QString::fromUtf8(lastProcessStandardOutput());",
          "",
          "[Removed Lines]",
          "682:     QString executor = getPartcloneExecuter(part);",
          "689:         command = QStringLiteral(\"dd if=%1 of=%2 status=none conv=fsync\").arg(part.filePath()).arg(to);",
          "691:         command = QStringLiteral(\"/usr/sbin/%1 -b -c -s %2 -%3 %4\").arg(executor).arg(part.filePath()).arg(override ? \"O\" : \"o\").arg(to);",
          "693:         command = QStringLiteral(\"/usr/sbin/%1 -c -s %2 -%3 %4\").arg(executor).arg(part.filePath()).arg(override ? \"O\" : \"o\").arg(to);",
          "696:     int code = processExec(command);",
          "",
          "[Added Lines]",
          "709:     QStringList args;",
          "710:     QString executor = getPartcloneExecuter(part, args);",
          "717:         command = \"dd\";",
          "718:         args = QStringList({\"if=\" + part.filePath(), \"of=\" + to, \"status=none\", \"conv=fsync\"});",
          "720:         command = \"/usr/sbin/\" + executor;",
          "721:         args.append({\"-b\", \"-c\", \"-s\", part.filePath(), override ? \"-O\" : \"-o\", to});",
          "723:         command = \"/usr/sbin/\" + executor;",
          "724:         args.append({\"-c\", \"-s\", part.filePath(), override ? \"-O\" : \"-o\", to});",
          "727:     int code = processExec(command, args);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "704: int Helper::restorePartition(const QString &from, const DPartInfo &to)",
          "705: {",
          "706:     QString command;",
          "708:     if (isPartcloneFile(from)) {",
          "710:     } else {",
          "712:     }",
          "716:     if (code != 0)",
          "717:         qDebug() << command << QString::fromUtf8(lastProcessStandardOutput());",
          "",
          "[Removed Lines]",
          "709:         command = QStringLiteral(\"/usr/sbin/partclone.restore -s %1 -o %2\").arg(from).arg(to.filePath());",
          "711:         command = QStringLiteral(\"dd if=%1 of=%2 status=none conv=fsync\").arg(from).arg(to.filePath());",
          "714:     int code = processExec(command);",
          "",
          "[Added Lines]",
          "738:     QStringList args;",
          "741:         command = \"/usr/sbin/partclone.restore\";",
          "742:         args = QStringList({\"-s\", from, \"-o\", to.filePath()});",
          "744:         command = \"dd\";",
          "745:         args = QStringList({\"if=\" + from, \"of=\" + to.filePath(), \"status=none\", \"conv=fsync\"});",
          "748:     int code = processExec(command, args);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "749:     file.write(arguments.join('\\n').toUtf8());",
          "750:     file.close();",
          "753:         dCDebug(\"Exec grub-reboot \\\"Deepin Recovery\\\" failed\");",
          "755:         file.remove();",
          "",
          "[Removed Lines]",
          "752:     if (processExec(\"grub-reboot \\\"Deepin Recovery\\\"\") != 0) {",
          "",
          "[Added Lines]",
          "786:     if (processExec(\"grub-reboot\", {\"Deepin Recovery\"}) != 0) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "757:         return false;",
          "758:     }",
          "761:         file.remove();",
          "763:     return true;",
          "",
          "[Removed Lines]",
          "760:     if (processExec(\"reboot\") != 0)",
          "",
          "[Added Lines]",
          "794:     if (processExec(\"reboot\", {}) != 0)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "788: bool Helper::resetPartUUID(const DPartInfo &part, QByteArray uuid)",
          "789: {",
          "790:     QString command;",
          "792:     if (uuid.isEmpty()) {",
          "793:         uuid = QUuid::createUuid().toByteArray().mid(1, 36);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "825:     QStringList args;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "797:     case DPartInfo::EXT2:",
          "798:     case DPartInfo::EXT3:",
          "799:     case DPartInfo::EXT4:",
          "801:         break;",
          "802:     case DPartInfo::JFS:",
          "804:         break;",
          "805:     case DPartInfo::NTFS:",
          "807:         break;",
          "808:     case DPartInfo::XFS:",
          "810:         break;",
          "811:     default:",
          "812:         dCDebug(\"Not support the file system type: %s\", qPrintable(part.fileSystemTypeName()));",
          "",
          "[Removed Lines]",
          "800:         command = QString(\"tune2fs -U %1 %2\").arg(QString::fromLatin1(uuid)).arg(part.filePath());",
          "803:         command = QString(\"jfs_tune -U %1 %2\").arg(QString::fromLatin1(uuid)).arg(part.filePath());",
          "806:         command = QString(\"ntfslabel --new-half-serial %1\").arg(part.filePath());",
          "809:         command = QString(\"xfs_admin -U %1 %2\").arg(QString::fromLatin1(uuid)).arg(part.filePath());",
          "",
          "[Added Lines]",
          "835:         command = \"tune2fs\";",
          "836:         args = QStringList({\"-U\", QString::fromLatin1(uuid), part.filePath()});",
          "839:         command = \"jfs_tune\";",
          "840:         args = QStringList({\"-U\", QString::fromLatin1(uuid), part.filePath()});",
          "843:         command = \"ntfslabel\";",
          "844:         args = QStringList({\"--new-half-serial\", part.filePath()});",
          "847:         command = \"xfs_admin\";",
          "848:         args = QStringList({\"-U\", QString::fromLatin1(uuid), part.filePath()});",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "821:     }",
          "828:     if (!ok) {",
          "829:         dCError(\"Failed reset part uuid\");",
          "",
          "[Removed Lines]",
          "824:     processExec(\"fsck -f -y \" + part.filePath());",
          "826:     bool ok = processExec(command) == 0;",
          "",
          "[Added Lines]",
          "863:     processExec(\"fsck\", {\"-f\", \"-y\", part.filePath()});",
          "865:     bool ok = processExec(command, {}) == 0;",
          "",
          "---------------"
        ],
        "app/src/corelib/helper.h||app/src/corelib/helper.h": [
          "File: app/src/corelib/helper.h -> app/src/corelib/helper.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: public:",
          "44:     static Helper *instance();",
          "47:                            int timeout = -1, QIODevice::OpenMode mode = QIODevice::ReadOnly);",
          "49:     static QByteArray lastProcessStandardOutput();",
          "50:     static QByteArray lastProcessStandardError();",
          "",
          "[Removed Lines]",
          "46:     static int processExec(QProcess *process, const QString &command,",
          "48:     static int processExec(const QString &command, int timeout = -1);",
          "",
          "[Added Lines]",
          "46:     static int processExec(QProcess *process, const QString &program, QStringList args,",
          "48:     static int processExec(const QString &command, const QStringList &args, int timeout = -1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:     static QString secondsToString(qint64 seconds);",
          "62:     static bool refreshSystemPartList(const QString &device = QString());",
          "64:     static bool getPartitionSizeInfo(const QString &partDevice, qint64 *used, qint64 *free, int *blockSize);",
          "69:     static QString mountPoint(const QString &device);",
          "70:     static bool isMounted(const QString &device);",
          "",
          "[Removed Lines]",
          "63:     static QString getPartcloneExecuter(const DPartInfo &info);",
          "66:     static QByteArray callLsblk(const QString &extraArg = QString());",
          "67:     static QJsonArray getBlockDevices(const QString &commandExtraArg = QString());",
          "",
          "[Added Lines]",
          "63:     static QString getPartcloneExecuter(const DPartInfo &info, QStringList &args);",
          "66:     static QByteArray callLsblk(const QStringList &extraArg = QStringList());",
          "67:     static QJsonArray getBlockDevices(const QStringList &commandExtraArg = QStringList());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:     static QString parseSerialUrl(const QString &urlString, QString *errorString = 0);",
          "100:     static QString toSerialUrl(const QString &file);",
          "104: signals:",
          "105:     void newWarning(const QString &message);",
          "106:     void newError(const QString &message);",
          "",
          "[Removed Lines]",
          "102:     static bool clearSymlink(const QString &path);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "app/src/fixboot/bootdoctor.cpp||app/src/fixboot/bootdoctor.cpp": [
          "File: app/src/fixboot/bootdoctor.cpp -> app/src/fixboot/bootdoctor.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     DDevicePartInfo part_info(partDevice);",
          "33:     const QString part_old_uuid = part_info.uuid();",
          "36:         if (Helper::lastProcessStandardOutput().contains(part_old_uuid.toLatin1())) {",
          "38:             if (Helper::resetPartUUID(part_info)) {",
          "",
          "[Removed Lines]",
          "35:     if (Helper::processExec(\"lsblk -s -d -n -o UUID\") == 0) {",
          "",
          "[Added Lines]",
          "35:     if (Helper::processExec(\"lsblk\", {\"-s\", \"-d\", \"-n\", \"-o\", \"UUID\"}) == 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:                 break;",
          "114:             }",
          "117:                 dCError(\"Failed to bind /dev\");",
          "118:                 break;",
          "119:             }",
          "122:                 dCError(\"Failed to bind /dev/pts\");",
          "123:                 break;",
          "124:             }",
          "127:                 dCError(\"Failed to bind /proc\");",
          "128:                 break;",
          "129:             }",
          "132:                 dCError(\"Failed to bind /sys\");",
          "133:                 break;",
          "134:             }",
          "",
          "[Removed Lines]",
          "116:             if (Helper::processExec(QString(\"mount --bind -v --bind /dev %1/dev\").arg(mount_root)) != 0) {",
          "121:             if (Helper::processExec(QString(\"mount --bind -v --bind /dev/pts %1/dev/pts\").arg(mount_root)) != 0) {",
          "126:             if (Helper::processExec(QString(\"mount --bind -v --bind /proc %1/proc\").arg(mount_root)) != 0) {",
          "131:             if (Helper::processExec(QString(\"mount --bind -v --bind /sys %1/sys\").arg(mount_root)) != 0) {",
          "",
          "[Added Lines]",
          "116:             if (Helper::processExec(\"mount\", {\"--bind\", \"-v\", \"--bind\", \"/dev\", mount_root + \"/dev\"}) != 0) {",
          "121:             if (Helper::processExec(\"mount\", {\"--bind\", \"-v\", \"--bind\", \"/dev/pts\", mount_root + \"/dev/pts\"}) != 0) {",
          "126:             if (Helper::processExec(\"mount\", {\"--bind\", \"-v\", \"--bind\", \"/proc\", mount_root + \"/proc\"}) != 0) {",
          "131:             if (Helper::processExec(\"mount\", {\"--bind\", \"-v\", \"--bind\", \"/sys\", mount_root + \"/sys\"}) != 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "156:                             QDir::current().mkpath(efi_path);",
          "159:                                 dCError(\"Failed to mount EFI partition\");",
          "160:                                 m_lastErrorString = QObject::tr(\"Failed to mount partition \\\"%1\\\"\").arg(part.filePath());",
          "161:                                 ok = false;",
          "",
          "[Removed Lines]",
          "158:                             if (Helper::processExec(QString(\"mount %1 %2\").arg(part.filePath()).arg(efi_path)) != 0) {",
          "",
          "[Added Lines]",
          "158:                             if (Helper::processExec(\"mount\", {part.filePath(), efi_path}) != 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "207:         }",
          "211:         QDir(mount_root).rmdir(\"deepin-clone\");",
          "212:         file_boot_fix.remove();",
          "219:         if (ok && process.exitCode() == 0) {",
          "220:             if (part_old_uuid != part_info.uuid()) {",
          "",
          "[Removed Lines]",
          "210:         Helper::processExec(\"umount \" + repo_mount_point);",
          "213:         Helper::processExec(\"umount \" + mount_root + \"/dev/pts\");",
          "214:         Helper::processExec(\"umount \" + mount_root + \"/dev\");",
          "215:         Helper::processExec(\"umount \" + mount_root + \"/proc\");",
          "216:         Helper::processExec(\"umount \" + mount_root + \"/sys\");",
          "217:         Helper::processExec(\"umount \" + mount_root + \"/boot/efi\");",
          "",
          "[Added Lines]",
          "210:         Helper::processExec(\"umount\", {repo_mount_point});",
          "213:         Helper::processExec(\"umount\", {mount_root + \"/dev/pts\"});",
          "214:         Helper::processExec(\"umount\", {mount_root + \"/dev\"});",
          "215:         Helper::processExec(\"umount\", {mount_root + \"/proc\"});",
          "216:         Helper::processExec(\"umount\", {mount_root + \"/sys\"});",
          "217:         Helper::processExec(\"umount\", {mount_root + \"/boot/efi\"});",
          "",
          "---------------"
        ],
        "app/src/widgets/mainwindow.cpp||app/src/widgets/mainwindow.cpp": [
          "File: app/src/widgets/mainwindow.cpp -> app/src/widgets/mainwindow.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "645:             dCWarning(\"!!!!job failed!!!!\\n\");",
          "648:                 dCInfo(\"All disk/partition device info\\n\");",
          "649:                 dCDebug(\"\\n\\\"%s\\\"\\n\", qPrintable(Helper::lastProcessStandardOutput()));",
          "650:             }",
          "",
          "[Removed Lines]",
          "647:             if (Helper::processExec(\"lsblk -O -J\") == 0) {",
          "",
          "[Added Lines]",
          "647:             if (Helper::processExec(\"lsblk\", {\"-O\", \"-J\"}) == 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "730:     case RestartSystem: {",
          "731:         dCDebug(\"Try restart system\");",
          "734:             dCError(\"Failed to restart system\");",
          "736:             showErrorMessage(tr(\"Failed to restart system\"));",
          "",
          "[Removed Lines]",
          "733:         if (Helper::processExec(\"reboot\") != 0) {",
          "",
          "[Added Lines]",
          "733:         if (Helper::processExec(\"reboot\", {}) != 0) {",
          "",
          "---------------"
        ],
        "app/src/widgets/selectfilepage.cpp||app/src/widgets/selectfilepage.cpp": [
          "File: app/src/widgets/selectfilepage.cpp -> app/src/widgets/selectfilepage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:             }",
          "234:         });",
          "238:         if (process.error() == QProcess::FailedToStart)",
          "239:             break;",
          "",
          "[Removed Lines]",
          "236:         Helper::processExec(&process, honest_child, -1, QIODevice::ReadWrite);",
          "",
          "[Added Lines]",
          "236:         Helper::processExec(&process, honest_child, {}, -1, QIODevice::ReadWrite);",
          "",
          "---------------"
        ]
      }
    }
  ]
}