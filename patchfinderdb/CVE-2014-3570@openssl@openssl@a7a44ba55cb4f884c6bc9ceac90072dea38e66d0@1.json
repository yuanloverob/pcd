{
  "cve_id": "CVE-2014-3570",
  "cve_desc": "The BN_sqr implementation in OpenSSL before 0.9.8zd, 1.0.0 before 1.0.0p, and 1.0.1 before 1.0.1k does not properly calculate the square of a BIGNUM value, which might make it easier for remote attackers to defeat cryptographic protection mechanisms via unspecified vectors, related to crypto/bn/asm/mips.pl, crypto/bn/asm/x86_64-gcc.c, and crypto/bn/bn_asm.c.",
  "repo": "openssl/openssl",
  "patch_hash": "a7a44ba55cb4f884c6bc9ceac90072dea38e66d0",
  "patch_info": {
    "commit_hash": "a7a44ba55cb4f884c6bc9ceac90072dea38e66d0",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/a7a44ba55cb4f884c6bc9ceac90072dea38e66d0",
    "files": [
      "crypto/bn/asm/mips.pl",
      "crypto/bn/asm/x86_64-gcc.c",
      "crypto/bn/bn_asm.c",
      "crypto/bn/bntest.c"
    ],
    "message": "Fix for CVE-2014-3570 (with minor bn_asm.c revamp).\n\nReviewed-by: Emilia Kasper <emilia@openssl.org>",
    "before_after_code_files": [
      "crypto/bn/asm/mips.pl||crypto/bn/asm/mips.pl",
      "crypto/bn/asm/x86_64-gcc.c||crypto/bn/asm/x86_64-gcc.c",
      "crypto/bn/bn_asm.c||crypto/bn/bn_asm.c",
      "crypto/bn/bntest.c||crypto/bn/bntest.c"
    ]
  },
  "patch_diff": {
    "crypto/bn/asm/mips.pl||crypto/bn/asm/mips.pl": [
      "File: crypto/bn/asm/mips.pl -> crypto/bn/asm/mips.pl",
      "--- Hunk 1 ---",
      "[Context before]",
      "1873: ($a_4,$a_5,$a_6,$a_7)=($b_0,$b_1,$b_2,$b_3);",
      "1875: $code.=<<___;",
      "1877: .align 5",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1875: sub add_c2 () {",
      "1876: my ($hi,$lo,$c0,$c1,$c2,",
      "1877:     $warm,      # !$warm denotes first call with specific sequence of",
      "1878:                 # $c_[XYZ] when there is no Z-carry to accumulate yet;",
      "1879:     $an,$bn     # these two are arguments for multiplication which",
      "1880:                 # result is used in *next* step [which is why it's",
      "1881:                 # commented as \"forward multiplication\" below];",
      "1882:     )=@_;",
      "1883: $code.=<<___;",
      "1884:  mflo $lo",
      "1885:  mfhi $hi",
      "1886:  $ADDU $c0,$lo",
      "1887:  sltu $at,$c0,$lo",
      "1888:   $MULTU $an,$bn   # forward multiplication",
      "1889:  $ADDU $c0,$lo",
      "1890:  $ADDU $at,$hi",
      "1891:  sltu $lo,$c0,$lo",
      "1892:  $ADDU $c1,$at",
      "1893:  $ADDU $hi,$lo",
      "1894: ___",
      "1895: $code.=<<___ if (!$warm);",
      "1896:  sltu $c2,$c1,$at",
      "1897:  $ADDU $c1,$hi",
      "1898:  sltu $hi,$c1,$hi",
      "1899:  $ADDU $c2,$hi",
      "1900: ___",
      "1901: $code.=<<___ if ($warm);",
      "1902:  sltu $at,$c1,$at",
      "1903:  $ADDU $c1,$hi",
      "1904:  $ADDU $c2,$at",
      "1905:  sltu $hi,$c1,$hi",
      "1906:  $ADDU $c2,$hi",
      "1907: ___",
      "1908: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1920:  sltu $at,$c_2,$t_1",
      "1921:  $ADDU $c_3,$t_2,$at",
      "1922:  $ST $c_2,$BNSZ($a0)",
      "1938:  mflo $t_1",
      "1939:  mfhi $t_2",
      "1940:  $ADDU $c_3,$t_1",
      "",
      "[Removed Lines]",
      "1924:  mflo $t_1",
      "1925:  mfhi $t_2",
      "1926:  slt $c_2,$t_2,$zero",
      "1927:  $SLL $t_2,1",
      "1928:  $MULTU $a_1,$a_1  # mul_add_c(a[1],b[1],c3,c1,c2);",
      "1929:  slt $a2,$t_1,$zero",
      "1930:  $ADDU $t_2,$a2",
      "1931:  $SLL $t_1,1",
      "1932:  $ADDU $c_3,$t_1",
      "1933:  sltu $at,$c_3,$t_1",
      "1934:  $ADDU $t_2,$at",
      "1935:  $ADDU $c_1,$t_2",
      "1936:  sltu $at,$c_1,$t_2",
      "1937:  $ADDU $c_2,$at",
      "",
      "[Added Lines]",
      "1958: ___",
      "1959:  &add_c2($t_2,$t_1,$c_3,$c_1,$c_2,0,",
      "1960:   $a_1,$a_1);  # mul_add_c(a[1],b[1],c3,c1,c2);",
      "1961: $code.=<<___;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1945:  sltu $at,$c_1,$t_2",
      "1946:  $ADDU $c_2,$at",
      "1947:  $ST $c_3,2*$BNSZ($a0)",
      "1978:  $ST $c_1,3*$BNSZ($a0)",
      "2009:  mflo $t_1",
      "2010:  mfhi $t_2",
      "2011:  $ADDU $c_2,$t_1",
      "",
      "[Removed Lines]",
      "1949:  mflo $t_1",
      "1950:  mfhi $t_2",
      "1951:  slt $c_3,$t_2,$zero",
      "1952:  $SLL $t_2,1",
      "1953:  $MULTU $a_1,$a_2  # mul_add_c2(a[1],b[2],c1,c2,c3);",
      "1954:  slt $a2,$t_1,$zero",
      "1955:  $ADDU $t_2,$a2",
      "1956:  $SLL $t_1,1",
      "1957:  $ADDU $c_1,$t_1",
      "1958:  sltu $at,$c_1,$t_1",
      "1959:  $ADDU $t_2,$at",
      "1960:  $ADDU $c_2,$t_2",
      "1961:  sltu $at,$c_2,$t_2",
      "1962:  $ADDU $c_3,$at",
      "1963:  mflo $t_1",
      "1964:  mfhi $t_2",
      "1965:  slt $at,$t_2,$zero",
      "1966:  $ADDU $c_3,$at",
      "1967:   $MULTU $a_4,$a_0  # mul_add_c2(a[4],b[0],c2,c3,c1);",
      "1968:  $SLL $t_2,1",
      "1969:  slt $a2,$t_1,$zero",
      "1970:  $ADDU $t_2,$a2",
      "1971:  $SLL $t_1,1",
      "1972:  $ADDU $c_1,$t_1",
      "1973:  sltu $at,$c_1,$t_1",
      "1974:  $ADDU $t_2,$at",
      "1975:  $ADDU $c_2,$t_2",
      "1976:  sltu $at,$c_2,$t_2",
      "1977:  $ADDU $c_3,$at",
      "1980:  mflo $t_1",
      "1981:  mfhi $t_2",
      "1982:  slt $c_1,$t_2,$zero",
      "1983:  $SLL $t_2,1",
      "1984:  $MULTU $a_3,$a_1  # mul_add_c2(a[3],b[1],c2,c3,c1);",
      "1985:  slt $a2,$t_1,$zero",
      "1986:  $ADDU $t_2,$a2",
      "1987:  $SLL $t_1,1",
      "1988:  $ADDU $c_2,$t_1",
      "1989:  sltu $at,$c_2,$t_1",
      "1990:  $ADDU $t_2,$at",
      "1991:  $ADDU $c_3,$t_2",
      "1992:  sltu $at,$c_3,$t_2",
      "1993:  $ADDU $c_1,$at",
      "1994:  mflo $t_1",
      "1995:  mfhi $t_2",
      "1996:  slt $at,$t_2,$zero",
      "1997:  $ADDU $c_1,$at",
      "1998:  $MULTU $a_2,$a_2  # mul_add_c(a[2],b[2],c2,c3,c1);",
      "1999:  $SLL $t_2,1",
      "2000:  slt $a2,$t_1,$zero",
      "2001:  $ADDU $t_2,$a2",
      "2002:  $SLL $t_1,1",
      "2003:  $ADDU $c_2,$t_1",
      "2004:  sltu $at,$c_2,$t_1",
      "2005:  $ADDU $t_2,$at",
      "2006:  $ADDU $c_3,$t_2",
      "2007:  sltu $at,$c_3,$t_2",
      "2008:  $ADDU $c_1,$at",
      "",
      "[Added Lines]",
      "1972: ___",
      "1973:  &add_c2($t_2,$t_1,$c_1,$c_2,$c_3,0,",
      "1974:   $a_1,$a_2);  # mul_add_c2(a[1],b[2],c1,c2,c3);",
      "1975:  &add_c2($t_2,$t_1,$c_1,$c_2,$c_3,1,",
      "1976:   $a_4,$a_0);  # mul_add_c2(a[4],b[0],c2,c3,c1);",
      "1977: $code.=<<___;",
      "1979: ___",
      "1980:  &add_c2($t_2,$t_1,$c_2,$c_3,$c_1,0,",
      "1981:   $a_3,$a_1);  # mul_add_c2(a[3],b[1],c2,c3,c1);",
      "1982:  &add_c2($t_2,$t_1,$c_2,$c_3,$c_1,1,",
      "1983:   $a_2,$a_2);  # mul_add_c(a[2],b[2],c2,c3,c1);",
      "1984: $code.=<<___;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2016:  sltu $at,$c_3,$t_2",
      "2017:  $ADDU $c_1,$at",
      "2018:  $ST $c_2,4*$BNSZ($a0)",
      "2064:  $ST $c_3,5*$BNSZ($a0)",
      "2110:  mflo $t_1",
      "2111:  mfhi $t_2",
      "2112:  $ADDU $c_1,$t_1",
      "",
      "[Removed Lines]",
      "2020:  mflo $t_1",
      "2021:  mfhi $t_2",
      "2022:  slt $c_2,$t_2,$zero",
      "2023:  $SLL $t_2,1",
      "2024:  $MULTU $a_1,$a_4  # mul_add_c2(a[1],b[4],c3,c1,c2);",
      "2025:  slt $a2,$t_1,$zero",
      "2026:  $ADDU $t_2,$a2",
      "2027:  $SLL $t_1,1",
      "2028:  $ADDU $c_3,$t_1",
      "2029:  sltu $at,$c_3,$t_1",
      "2030:  $ADDU $t_2,$at",
      "2031:  $ADDU $c_1,$t_2",
      "2032:  sltu $at,$c_1,$t_2",
      "2033:  $ADDU $c_2,$at",
      "2034:  mflo $t_1",
      "2035:  mfhi $t_2",
      "2036:  slt $at,$t_2,$zero",
      "2037:  $ADDU $c_2,$at",
      "2038:  $MULTU $a_2,$a_3  # mul_add_c2(a[2],b[3],c3,c1,c2);",
      "2039:  $SLL $t_2,1",
      "2040:  slt $a2,$t_1,$zero",
      "2041:  $ADDU $t_2,$a2",
      "2042:  $SLL $t_1,1",
      "2043:  $ADDU $c_3,$t_1",
      "2044:  sltu $at,$c_3,$t_1",
      "2045:  $ADDU $t_2,$at",
      "2046:  $ADDU $c_1,$t_2",
      "2047:  sltu $at,$c_1,$t_2",
      "2048:  $ADDU $c_2,$at",
      "2049:  mflo $t_1",
      "2050:  mfhi $t_2",
      "2051:  slt $at,$t_2,$zero",
      "2052:   $MULTU $a_6,$a_0  # mul_add_c2(a[6],b[0],c1,c2,c3);",
      "2053:  $ADDU $c_2,$at",
      "2054:  $SLL $t_2,1",
      "2055:  slt $a2,$t_1,$zero",
      "2056:  $ADDU $t_2,$a2",
      "2057:  $SLL $t_1,1",
      "2058:  $ADDU $c_3,$t_1",
      "2059:  sltu $at,$c_3,$t_1",
      "2060:  $ADDU $t_2,$at",
      "2061:  $ADDU $c_1,$t_2",
      "2062:  sltu $at,$c_1,$t_2",
      "2063:  $ADDU $c_2,$at",
      "2066:  mflo $t_1",
      "2067:  mfhi $t_2",
      "2068:  slt $c_3,$t_2,$zero",
      "2069:  $SLL $t_2,1",
      "2070:  $MULTU $a_5,$a_1  # mul_add_c2(a[5],b[1],c1,c2,c3);",
      "2071:  slt $a2,$t_1,$zero",
      "2072:  $ADDU $t_2,$a2",
      "2073:  $SLL $t_1,1",
      "2074:  $ADDU $c_1,$t_1",
      "2075:  sltu $at,$c_1,$t_1",
      "2076:  $ADDU $t_2,$at",
      "2077:  $ADDU $c_2,$t_2",
      "2078:  sltu $at,$c_2,$t_2",
      "2079:  $ADDU $c_3,$at",
      "2080:  mflo $t_1",
      "2081:  mfhi $t_2",
      "2082:  slt $at,$t_2,$zero",
      "2083:  $ADDU $c_3,$at",
      "2084:  $MULTU $a_4,$a_2  # mul_add_c2(a[4],b[2],c1,c2,c3);",
      "2085:  $SLL $t_2,1",
      "2086:  slt $a2,$t_1,$zero",
      "2087:  $ADDU $t_2,$a2",
      "2088:  $SLL $t_1,1",
      "2089:  $ADDU $c_1,$t_1",
      "2090:  sltu $at,$c_1,$t_1",
      "2091:  $ADDU $t_2,$at",
      "2092:  $ADDU $c_2,$t_2",
      "2093:  sltu $at,$c_2,$t_2",
      "2094:  $ADDU $c_3,$at",
      "2095:  mflo $t_1",
      "2096:  mfhi $t_2",
      "2097:  slt $at,$t_2,$zero",
      "2098:  $ADDU $c_3,$at",
      "2099:  $MULTU $a_3,$a_3  # mul_add_c(a[3],b[3],c1,c2,c3);",
      "2100:  $SLL $t_2,1",
      "2101:  slt $a2,$t_1,$zero",
      "2102:  $ADDU $t_2,$a2",
      "2103:  $SLL $t_1,1",
      "2104:  $ADDU $c_1,$t_1",
      "2105:  sltu $at,$c_1,$t_1",
      "2106:  $ADDU $t_2,$at",
      "2107:  $ADDU $c_2,$t_2",
      "2108:  sltu $at,$c_2,$t_2",
      "2109:  $ADDU $c_3,$at",
      "",
      "[Added Lines]",
      "1995: ___",
      "1996:  &add_c2($t_2,$t_1,$c_3,$c_1,$c_2,0,",
      "1997:   $a_1,$a_4);  # mul_add_c2(a[1],b[4],c3,c1,c2);",
      "1998:  &add_c2($t_2,$t_1,$c_3,$c_1,$c_2,1,",
      "1999:   $a_2,$a_3);  # mul_add_c2(a[2],b[3],c3,c1,c2);",
      "2000:  &add_c2($t_2,$t_1,$c_3,$c_1,$c_2,1,",
      "2001:   $a_6,$a_0);  # mul_add_c2(a[6],b[0],c1,c2,c3);",
      "2002: $code.=<<___;",
      "2004: ___",
      "2005:  &add_c2($t_2,$t_1,$c_1,$c_2,$c_3,0,",
      "2006:   $a_5,$a_1);  # mul_add_c2(a[5],b[1],c1,c2,c3);",
      "2007:  &add_c2($t_2,$t_1,$c_1,$c_2,$c_3,1,",
      "2008:   $a_4,$a_2);  # mul_add_c2(a[4],b[2],c1,c2,c3);",
      "2009:  &add_c2($t_2,$t_1,$c_1,$c_2,$c_3,1,",
      "2010:   $a_3,$a_3);  # mul_add_c(a[3],b[3],c1,c2,c3);",
      "2011: $code.=<<___;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2117:  sltu $at,$c_2,$t_2",
      "2118:  $ADDU $c_3,$at",
      "2119:  $ST $c_1,6*$BNSZ($a0)",
      "2180:  $ST $c_2,7*$BNSZ($a0)",
      "2226:  mflo $t_1",
      "2227:  mfhi $t_2",
      "2228:  $ADDU $c_3,$t_1",
      "",
      "[Removed Lines]",
      "2121:  mflo $t_1",
      "2122:  mfhi $t_2",
      "2123:  slt $c_1,$t_2,$zero",
      "2124:  $SLL $t_2,1",
      "2125:  $MULTU $a_1,$a_6  # mul_add_c2(a[1],b[6],c2,c3,c1);",
      "2126:  slt $a2,$t_1,$zero",
      "2127:  $ADDU $t_2,$a2",
      "2128:  $SLL $t_1,1",
      "2129:  $ADDU $c_2,$t_1",
      "2130:  sltu $at,$c_2,$t_1",
      "2131:  $ADDU $t_2,$at",
      "2132:  $ADDU $c_3,$t_2",
      "2133:  sltu $at,$c_3,$t_2",
      "2134:  $ADDU $c_1,$at",
      "2135:  mflo $t_1",
      "2136:  mfhi $t_2",
      "2137:  slt $at,$t_2,$zero",
      "2138:  $ADDU $c_1,$at",
      "2139:  $MULTU $a_2,$a_5  # mul_add_c2(a[2],b[5],c2,c3,c1);",
      "2140:  $SLL $t_2,1",
      "2141:  slt $a2,$t_1,$zero",
      "2142:  $ADDU $t_2,$a2",
      "2143:  $SLL $t_1,1",
      "2144:  $ADDU $c_2,$t_1",
      "2145:  sltu $at,$c_2,$t_1",
      "2146:  $ADDU $t_2,$at",
      "2147:  $ADDU $c_3,$t_2",
      "2148:  sltu $at,$c_3,$t_2",
      "2149:  $ADDU $c_1,$at",
      "2150:  mflo $t_1",
      "2151:  mfhi $t_2",
      "2152:  slt $at,$t_2,$zero",
      "2153:  $ADDU $c_1,$at",
      "2154:  $MULTU $a_3,$a_4  # mul_add_c2(a[3],b[4],c2,c3,c1);",
      "2155:  $SLL $t_2,1",
      "2156:  slt $a2,$t_1,$zero",
      "2157:  $ADDU $t_2,$a2",
      "2158:  $SLL $t_1,1",
      "2159:  $ADDU $c_2,$t_1",
      "2160:  sltu $at,$c_2,$t_1",
      "2161:  $ADDU $t_2,$at",
      "2162:  $ADDU $c_3,$t_2",
      "2163:  sltu $at,$c_3,$t_2",
      "2164:  $ADDU $c_1,$at",
      "2165:  mflo $t_1",
      "2166:  mfhi $t_2",
      "2167:  slt $at,$t_2,$zero",
      "2168:  $ADDU $c_1,$at",
      "2169:   $MULTU $a_7,$a_1  # mul_add_c2(a[7],b[1],c3,c1,c2);",
      "2170:  $SLL $t_2,1",
      "2171:  slt $a2,$t_1,$zero",
      "2172:  $ADDU $t_2,$a2",
      "2173:  $SLL $t_1,1",
      "2174:  $ADDU $c_2,$t_1",
      "2175:  sltu $at,$c_2,$t_1",
      "2176:  $ADDU $t_2,$at",
      "2177:  $ADDU $c_3,$t_2",
      "2178:  sltu $at,$c_3,$t_2",
      "2179:  $ADDU $c_1,$at",
      "2182:  mflo $t_1",
      "2183:  mfhi $t_2",
      "2184:  slt $c_2,$t_2,$zero",
      "2185:  $SLL $t_2,1",
      "2186:  $MULTU $a_6,$a_2  # mul_add_c2(a[6],b[2],c3,c1,c2);",
      "2187:  slt $a2,$t_1,$zero",
      "2188:  $ADDU $t_2,$a2",
      "2189:  $SLL $t_1,1",
      "2190:  $ADDU $c_3,$t_1",
      "2191:  sltu $at,$c_3,$t_1",
      "2192:  $ADDU $t_2,$at",
      "2193:  $ADDU $c_1,$t_2",
      "2194:  sltu $at,$c_1,$t_2",
      "2195:  $ADDU $c_2,$at",
      "2196:  mflo $t_1",
      "2197:  mfhi $t_2",
      "2198:  slt $at,$t_2,$zero",
      "2199:  $ADDU $c_2,$at",
      "2200:  $MULTU $a_5,$a_3  # mul_add_c2(a[5],b[3],c3,c1,c2);",
      "2201:  $SLL $t_2,1",
      "2202:  slt $a2,$t_1,$zero",
      "2203:  $ADDU $t_2,$a2",
      "2204:  $SLL $t_1,1",
      "2205:  $ADDU $c_3,$t_1",
      "2206:  sltu $at,$c_3,$t_1",
      "2207:  $ADDU $t_2,$at",
      "2208:  $ADDU $c_1,$t_2",
      "2209:  sltu $at,$c_1,$t_2",
      "2210:  $ADDU $c_2,$at",
      "2211:  mflo $t_1",
      "2212:  mfhi $t_2",
      "2213:  slt $at,$t_2,$zero",
      "2214:  $ADDU $c_2,$at",
      "2215:  $MULTU $a_4,$a_4  # mul_add_c(a[4],b[4],c3,c1,c2);",
      "2216:  $SLL $t_2,1",
      "2217:  slt $a2,$t_1,$zero",
      "2218:  $ADDU $t_2,$a2",
      "2219:  $SLL $t_1,1",
      "2220:  $ADDU $c_3,$t_1",
      "2221:  sltu $at,$c_3,$t_1",
      "2222:  $ADDU $t_2,$at",
      "2223:  $ADDU $c_1,$t_2",
      "2224:  sltu $at,$c_1,$t_2",
      "2225:  $ADDU $c_2,$at",
      "",
      "[Added Lines]",
      "2022: ___",
      "2023:  &add_c2($t_2,$t_1,$c_2,$c_3,$c_1,0,",
      "2024:   $a_1,$a_6);  # mul_add_c2(a[1],b[6],c2,c3,c1);",
      "2025:  &add_c2($t_2,$t_1,$c_2,$c_3,$c_1,1,",
      "2026:   $a_2,$a_5);  # mul_add_c2(a[2],b[5],c2,c3,c1);",
      "2027:  &add_c2($t_2,$t_1,$c_2,$c_3,$c_1,1,",
      "2028:   $a_3,$a_4);  # mul_add_c2(a[3],b[4],c2,c3,c1);",
      "2029:  &add_c2($t_2,$t_1,$c_2,$c_3,$c_1,1,",
      "2030:   $a_7,$a_1);  # mul_add_c2(a[7],b[1],c3,c1,c2);",
      "2031: $code.=<<___;",
      "2033: ___",
      "2034:  &add_c2($t_2,$t_1,$c_3,$c_1,$c_2,0,",
      "2035:   $a_6,$a_2);  # mul_add_c2(a[6],b[2],c3,c1,c2);",
      "2036:  &add_c2($t_2,$t_1,$c_3,$c_1,$c_2,1,",
      "2037:   $a_5,$a_3);  # mul_add_c2(a[5],b[3],c3,c1,c2);",
      "2038:  &add_c2($t_2,$t_1,$c_3,$c_1,$c_2,1,",
      "2039:   $a_4,$a_4);  # mul_add_c(a[4],b[4],c3,c1,c2);",
      "2040: $code.=<<___;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2233:  sltu $at,$c_1,$t_2",
      "2234:  $ADDU $c_2,$at",
      "2235:  $ST $c_3,8*$BNSZ($a0)",
      "2281:  $ST $c_1,9*$BNSZ($a0)",
      "2312:  mflo $t_1",
      "2313:  mfhi $t_2",
      "2314:  $ADDU $c_2,$t_1",
      "",
      "[Removed Lines]",
      "2237:  mflo $t_1",
      "2238:  mfhi $t_2",
      "2239:  slt $c_3,$t_2,$zero",
      "2240:  $SLL $t_2,1",
      "2241:  $MULTU $a_3,$a_6  # mul_add_c2(a[3],b[6],c1,c2,c3);",
      "2242:  slt $a2,$t_1,$zero",
      "2243:  $ADDU $t_2,$a2",
      "2244:  $SLL $t_1,1",
      "2245:  $ADDU $c_1,$t_1",
      "2246:  sltu $at,$c_1,$t_1",
      "2247:  $ADDU $t_2,$at",
      "2248:  $ADDU $c_2,$t_2",
      "2249:  sltu $at,$c_2,$t_2",
      "2250:  $ADDU $c_3,$at",
      "2251:  mflo $t_1",
      "2252:  mfhi $t_2",
      "2253:  slt $at,$t_2,$zero",
      "2254:  $ADDU $c_3,$at",
      "2255:  $MULTU $a_4,$a_5  # mul_add_c2(a[4],b[5],c1,c2,c3);",
      "2256:  $SLL $t_2,1",
      "2257:  slt $a2,$t_1,$zero",
      "2258:  $ADDU $t_2,$a2",
      "2259:  $SLL $t_1,1",
      "2260:  $ADDU $c_1,$t_1",
      "2261:  sltu $at,$c_1,$t_1",
      "2262:  $ADDU $t_2,$at",
      "2263:  $ADDU $c_2,$t_2",
      "2264:  sltu $at,$c_2,$t_2",
      "2265:  $ADDU $c_3,$at",
      "2266:  mflo $t_1",
      "2267:  mfhi $t_2",
      "2268:  slt $at,$t_2,$zero",
      "2269:  $ADDU $c_3,$at",
      "2270:   $MULTU $a_7,$a_3  # mul_add_c2(a[7],b[3],c2,c3,c1);",
      "2271:  $SLL $t_2,1",
      "2272:  slt $a2,$t_1,$zero",
      "2273:  $ADDU $t_2,$a2",
      "2274:  $SLL $t_1,1",
      "2275:  $ADDU $c_1,$t_1",
      "2276:  sltu $at,$c_1,$t_1",
      "2277:  $ADDU $t_2,$at",
      "2278:  $ADDU $c_2,$t_2",
      "2279:  sltu $at,$c_2,$t_2",
      "2280:  $ADDU $c_3,$at",
      "2283:  mflo $t_1",
      "2284:  mfhi $t_2",
      "2285:  slt $c_1,$t_2,$zero",
      "2286:  $SLL $t_2,1",
      "2287:  $MULTU $a_6,$a_4  # mul_add_c2(a[6],b[4],c2,c3,c1);",
      "2288:  slt $a2,$t_1,$zero",
      "2289:  $ADDU $t_2,$a2",
      "2290:  $SLL $t_1,1",
      "2291:  $ADDU $c_2,$t_1",
      "2292:  sltu $at,$c_2,$t_1",
      "2293:  $ADDU $t_2,$at",
      "2294:  $ADDU $c_3,$t_2",
      "2295:  sltu $at,$c_3,$t_2",
      "2296:  $ADDU $c_1,$at",
      "2297:  mflo $t_1",
      "2298:  mfhi $t_2",
      "2299:  slt $at,$t_2,$zero",
      "2300:  $ADDU $c_1,$at",
      "2301:  $MULTU $a_5,$a_5  # mul_add_c(a[5],b[5],c2,c3,c1);",
      "2302:  $SLL $t_2,1",
      "2303:  slt $a2,$t_1,$zero",
      "2304:  $ADDU $t_2,$a2",
      "2305:  $SLL $t_1,1",
      "2306:  $ADDU $c_2,$t_1",
      "2307:  sltu $at,$c_2,$t_1",
      "2308:  $ADDU $t_2,$at",
      "2309:  $ADDU $c_3,$t_2",
      "2310:  sltu $at,$c_3,$t_2",
      "2311:  $ADDU $c_1,$at",
      "",
      "[Added Lines]",
      "2051: ___",
      "2052:  &add_c2($t_2,$t_1,$c_1,$c_2,$c_3,0,",
      "2053:   $a_3,$a_6);  # mul_add_c2(a[3],b[6],c1,c2,c3);",
      "2054:  &add_c2($t_2,$t_1,$c_1,$c_2,$c_3,1,",
      "2055:   $a_4,$a_5);  # mul_add_c2(a[4],b[5],c1,c2,c3);",
      "2056:  &add_c2($t_2,$t_1,$c_1,$c_2,$c_3,1,",
      "2057:   $a_7,$a_3);  # mul_add_c2(a[7],b[3],c2,c3,c1);",
      "2058: $code.=<<___;",
      "2060: ___",
      "2061:  &add_c2($t_2,$t_1,$c_2,$c_3,$c_1,0,",
      "2062:   $a_6,$a_4);  # mul_add_c2(a[6],b[4],c2,c3,c1);",
      "2063:  &add_c2($t_2,$t_1,$c_2,$c_3,$c_1,1,",
      "2064:   $a_5,$a_5);  # mul_add_c(a[5],b[5],c2,c3,c1);",
      "2065: $code.=<<___;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2319:  sltu $at,$c_3,$t_2",
      "2320:  $ADDU $c_1,$at",
      "2321:  $ST $c_2,10*$BNSZ($a0)",
      "2352:  $ST $c_3,11*$BNSZ($a0)",
      "2368:  mflo $t_1",
      "2369:  mfhi $t_2",
      "2370:  $ADDU $c_1,$t_1",
      "",
      "[Removed Lines]",
      "2323:  mflo $t_1",
      "2324:  mfhi $t_2",
      "2325:  slt $c_2,$t_2,$zero",
      "2326:  $SLL $t_2,1",
      "2327:  $MULTU $a_5,$a_6  # mul_add_c2(a[5],b[6],c3,c1,c2);",
      "2328:  slt $a2,$t_1,$zero",
      "2329:  $ADDU $t_2,$a2",
      "2330:  $SLL $t_1,1",
      "2331:  $ADDU $c_3,$t_1",
      "2332:  sltu $at,$c_3,$t_1",
      "2333:  $ADDU $t_2,$at",
      "2334:  $ADDU $c_1,$t_2",
      "2335:  sltu $at,$c_1,$t_2",
      "2336:  $ADDU $c_2,$at",
      "2337:  mflo $t_1",
      "2338:  mfhi $t_2",
      "2339:  slt $at,$t_2,$zero",
      "2340:  $ADDU $c_2,$at",
      "2341:   $MULTU $a_7,$a_5  # mul_add_c2(a[7],b[5],c1,c2,c3);",
      "2342:  $SLL $t_2,1",
      "2343:  slt $a2,$t_1,$zero",
      "2344:  $ADDU $t_2,$a2",
      "2345:  $SLL $t_1,1",
      "2346:  $ADDU $c_3,$t_1",
      "2347:  sltu $at,$c_3,$t_1",
      "2348:  $ADDU $t_2,$at",
      "2349:  $ADDU $c_1,$t_2",
      "2350:  sltu $at,$c_1,$t_2",
      "2351:  $ADDU $c_2,$at",
      "2354:  mflo $t_1",
      "2355:  mfhi $t_2",
      "2356:  slt $c_3,$t_2,$zero",
      "2357:  $SLL $t_2,1",
      "2358:  $MULTU $a_6,$a_6  # mul_add_c(a[6],b[6],c1,c2,c3);",
      "2359:  slt $a2,$t_1,$zero",
      "2360:  $ADDU $t_2,$a2",
      "2361:  $SLL $t_1,1",
      "2362:  $ADDU $c_1,$t_1",
      "2363:  sltu $at,$c_1,$t_1",
      "2364:  $ADDU $t_2,$at",
      "2365:  $ADDU $c_2,$t_2",
      "2366:  sltu $at,$c_2,$t_2",
      "2367:  $ADDU $c_3,$at",
      "",
      "[Added Lines]",
      "2076: ___",
      "2077:  &add_c2($t_2,$t_1,$c_3,$c_1,$c_2,0,",
      "2078:   $a_5,$a_6);  # mul_add_c2(a[5],b[6],c3,c1,c2);",
      "2079:  &add_c2($t_2,$t_1,$c_3,$c_1,$c_2,1,",
      "2080:   $a_7,$a_5);  # mul_add_c2(a[7],b[5],c1,c2,c3);",
      "2081: $code.=<<___;",
      "2083: ___",
      "2084:  &add_c2($t_2,$t_1,$c_1,$c_2,$c_3,0,",
      "2085:   $a_6,$a_6);  # mul_add_c(a[6],b[6],c1,c2,c3);",
      "2086: $code.=<<___;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2375:  sltu $at,$c_2,$t_2",
      "2376:  $ADDU $c_3,$at",
      "2377:  $ST $c_1,12*$BNSZ($a0)",
      "2393:  $ST $c_2,13*$BNSZ($a0)",
      "2395:  mflo $t_1",
      "",
      "[Removed Lines]",
      "2379:  mflo $t_1",
      "2380:  mfhi $t_2",
      "2381:  slt $c_1,$t_2,$zero",
      "2382:  $SLL $t_2,1",
      "2383:   $MULTU $a_7,$a_7  # mul_add_c(a[7],b[7],c3,c1,c2);",
      "2384:  slt $a2,$t_1,$zero",
      "2385:  $ADDU $t_2,$a2",
      "2386:  $SLL $t_1,1",
      "2387:  $ADDU $c_2,$t_1",
      "2388:  sltu $at,$c_2,$t_1",
      "2389:  $ADDU $t_2,$at",
      "2390:  $ADDU $c_3,$t_2",
      "2391:  sltu $at,$c_3,$t_2",
      "2392:  $ADDU $c_1,$at",
      "",
      "[Added Lines]",
      "2097: ___",
      "2098:  &add_c2($t_2,$t_1,$c_2,$c_3,$c_1,0,",
      "2099:   $a_7,$a_7);  # mul_add_c(a[7],b[7],c3,c1,c2);",
      "2100: $code.=<<___;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2457:  sltu $at,$c_2,$t_1",
      "2458:  $ADDU $c_3,$t_2,$at",
      "2459:  $ST $c_2,$BNSZ($a0)",
      "2475:  mflo $t_1",
      "2476:  mfhi $t_2",
      "2477:  $ADDU $c_3,$t_1",
      "",
      "[Removed Lines]",
      "2461:  mflo $t_1",
      "2462:  mfhi $t_2",
      "2463:  slt $c_2,$t_2,$zero",
      "2464:  $SLL $t_2,1",
      "2465:  $MULTU $a_1,$a_1  # mul_add_c(a[1],b[1],c3,c1,c2);",
      "2466:  slt $a2,$t_1,$zero",
      "2467:  $ADDU $t_2,$a2",
      "2468:  $SLL $t_1,1",
      "2469:  $ADDU $c_3,$t_1",
      "2470:  sltu $at,$c_3,$t_1",
      "2471:  $ADDU $t_2,$at",
      "2472:  $ADDU $c_1,$t_2",
      "2473:  sltu $at,$c_1,$t_2",
      "2474:  $ADDU $c_2,$at",
      "",
      "[Added Lines]",
      "2168: ___",
      "2169:  &add_c2($t_2,$t_1,$c_3,$c_1,$c_2,0,",
      "2170:   $a_1,$a_1);  # mul_add_c(a[1],b[1],c3,c1,c2);",
      "2171: $code.=<<___;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2482:  sltu $at,$c_1,$t_2",
      "2483:  $ADDU $c_2,$at",
      "2484:  $ST $c_3,2*$BNSZ($a0)",
      "2515:  $ST $c_1,3*$BNSZ($a0)",
      "2531:  mflo $t_1",
      "2532:  mfhi $t_2",
      "2533:  $ADDU $c_2,$t_1",
      "",
      "[Removed Lines]",
      "2486:  mflo $t_1",
      "2487:  mfhi $t_2",
      "2488:  slt $c_3,$t_2,$zero",
      "2489:  $SLL $t_2,1",
      "2490:  $MULTU $a_1,$a_2  # mul_add_c(a2[1],b[2],c1,c2,c3);",
      "2491:  slt $a2,$t_1,$zero",
      "2492:  $ADDU $t_2,$a2",
      "2493:  $SLL $t_1,1",
      "2494:  $ADDU $c_1,$t_1",
      "2495:  sltu $at,$c_1,$t_1",
      "2496:  $ADDU $t_2,$at",
      "2497:  $ADDU $c_2,$t_2",
      "2498:  sltu $at,$c_2,$t_2",
      "2499:  $ADDU $c_3,$at",
      "2500:  mflo $t_1",
      "2501:  mfhi $t_2",
      "2502:  slt $at,$t_2,$zero",
      "2503:  $ADDU $c_3,$at",
      "2504:   $MULTU $a_3,$a_1  # mul_add_c2(a[3],b[1],c2,c3,c1);",
      "2505:  $SLL $t_2,1",
      "2506:  slt $a2,$t_1,$zero",
      "2507:  $ADDU $t_2,$a2",
      "2508:  $SLL $t_1,1",
      "2509:  $ADDU $c_1,$t_1",
      "2510:  sltu $at,$c_1,$t_1",
      "2511:  $ADDU $t_2,$at",
      "2512:  $ADDU $c_2,$t_2",
      "2513:  sltu $at,$c_2,$t_2",
      "2514:  $ADDU $c_3,$at",
      "2517:  mflo $t_1",
      "2518:  mfhi $t_2",
      "2519:  slt $c_1,$t_2,$zero",
      "2520:  $SLL $t_2,1",
      "2521:  $MULTU $a_2,$a_2  # mul_add_c(a[2],b[2],c2,c3,c1);",
      "2522:  slt $a2,$t_1,$zero",
      "2523:  $ADDU $t_2,$a2",
      "2524:  $SLL $t_1,1",
      "2525:  $ADDU $c_2,$t_1",
      "2526:  sltu $at,$c_2,$t_1",
      "2527:  $ADDU $t_2,$at",
      "2528:  $ADDU $c_3,$t_2",
      "2529:  sltu $at,$c_3,$t_2",
      "2530:  $ADDU $c_1,$at",
      "",
      "[Added Lines]",
      "2182: ___",
      "2183:  &add_c2($t_2,$t_1,$c_1,$c_2,$c_3,0,",
      "2184:   $a_1,$a_2);  # mul_add_c2(a2[1],b[2],c1,c2,c3);",
      "2185:  &add_c2($t_2,$t_1,$c_1,$c_2,$c_3,1,",
      "2186:   $a_3,$a_1);  # mul_add_c2(a[3],b[1],c2,c3,c1);",
      "2187: $code.=<<___;",
      "2189: ___",
      "2190:  &add_c2($t_2,$t_1,$c_2,$c_3,$c_1,0,",
      "2191:   $a_2,$a_2);  # mul_add_c(a[2],b[2],c2,c3,c1);",
      "2192: $code.=<<___;",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "2538:  sltu $at,$c_3,$t_2",
      "2539:  $ADDU $c_1,$at",
      "2540:  $ST $c_2,4*$BNSZ($a0)",
      "2556:  $ST $c_3,5*$BNSZ($a0)",
      "2558:  mflo $t_1",
      "",
      "[Removed Lines]",
      "2542:  mflo $t_1",
      "2543:  mfhi $t_2",
      "2544:  slt $c_2,$t_2,$zero",
      "2545:  $SLL $t_2,1",
      "2546:   $MULTU $a_3,$a_3  # mul_add_c(a[3],b[3],c1,c2,c3);",
      "2547:  slt $a2,$t_1,$zero",
      "2548:  $ADDU $t_2,$a2",
      "2549:  $SLL $t_1,1",
      "2550:  $ADDU $c_3,$t_1",
      "2551:  sltu $at,$c_3,$t_1",
      "2552:  $ADDU $t_2,$at",
      "2553:  $ADDU $c_1,$t_2",
      "2554:  sltu $at,$c_1,$t_2",
      "2555:  $ADDU $c_2,$at",
      "",
      "[Added Lines]",
      "2203: ___",
      "2204:  &add_c2($t_2,$t_1,$c_3,$c_1,$c_2,0,",
      "2205:   $a_3,$a_3);  # mul_add_c(a[3],b[3],c1,c2,c3);",
      "2206: $code.=<<___;",
      "",
      "---------------"
    ],
    "crypto/bn/asm/x86_64-gcc.c||crypto/bn/asm/x86_64-gcc.c": [
      "File: crypto/bn/asm/x86_64-gcc.c -> crypto/bn/asm/x86_64-gcc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "279: #if 0",
      "298: #else",
      "299: #define mul_add_c(a,b,c0,c1,c2) do { \\",
      "300:  asm (\"mulq %3\"   \\",
      "301:   : \"=a\"(t1),\"=d\"(t2) \\",
      "302:   : \"a\"(a),\"m\"(b)  \\",
      "303:   : \"cc\");  \\",
      "312:  } while (0)",
      "314: #define sqr_add_c(a,i,c0,c1,c2) do { \\",
      "315:  asm (\"mulq %2\"   \\",
      "316:   : \"=a\"(t1),\"=d\"(t2) \\",
      "317:   : \"a\"(a[i])  \\",
      "318:   : \"cc\");  \\",
      "327:  } while (0)",
      "329: #define mul_add_c2(a,b,c0,c1,c2) do { \\",
      "330:  asm (\"mulq %3\"   \\",
      "331:   : \"=a\"(t1),\"=d\"(t2) \\",
      "332:   : \"a\"(a),\"m\"(b)  \\",
      "333:   : \"cc\");  \\",
      "350:  } while (0)",
      "351: #endif",
      "",
      "[Removed Lines]",
      "281: #define mul_add_c(a,b,c0,c1,c2) { \\",
      "282:  BN_ULONG ta=(a),tb=(b);  \\",
      "283:  t1 = ta * tb;   \\",
      "284:  t2 = BN_UMULT_HIGH(ta,tb); \\",
      "285:  c0 += t1; t2 += (c0<t1)?1:0; \\",
      "286:  c1 += t2; c2 += (c1<t2)?1:0; \\",
      "287:  }",
      "289: #define mul_add_c2(a,b,c0,c1,c2) { \\",
      "290:  BN_ULONG ta=(a),tb=(b),t0; \\",
      "291:  t1 = BN_UMULT_HIGH(ta,tb); \\",
      "292:  t0 = ta * tb;   \\",
      "293:  t2 = t1+t1; c2 += (t2<t1)?1:0; \\",
      "294:  t1 = t0+t0; t2 += (t1<t0)?1:0; \\",
      "295:  c0 += t1; t2 += (c0<t1)?1:0; \\",
      "296:  c1 += t2; c2 += (c1<t2)?1:0; \\",
      "297:  }",
      "304:  asm (\"addq %2,%0; adcq %3,%1\" \\",
      "305:   : \"+r\"(c0),\"+d\"(t2) \\",
      "306:   : \"a\"(t1),\"g\"(0) \\",
      "307:   : \"cc\");  \\",
      "308:  asm (\"addq %2,%0; adcq %3,%1\" \\",
      "309:   : \"+r\"(c1),\"+r\"(c2) \\",
      "310:   : \"d\"(t2),\"g\"(0) \\",
      "311:   : \"cc\");  \\",
      "319:  asm (\"addq %2,%0; adcq %3,%1\" \\",
      "320:   : \"+r\"(c0),\"+d\"(t2) \\",
      "321:   : \"a\"(t1),\"g\"(0) \\",
      "322:   : \"cc\");  \\",
      "323:  asm (\"addq %2,%0; adcq %3,%1\" \\",
      "324:   : \"+r\"(c1),\"+r\"(c2) \\",
      "325:   : \"d\"(t2),\"g\"(0) \\",
      "326:   : \"cc\");  \\",
      "334:  asm (\"addq %0,%0; adcq %2,%1\" \\",
      "335:   : \"+d\"(t2),\"+r\"(c2) \\",
      "336:   : \"g\"(0)  \\",
      "337:   : \"cc\");  \\",
      "338:  asm (\"addq %0,%0; adcq %2,%1\" \\",
      "339:   : \"+a\"(t1),\"+d\"(t2) \\",
      "340:   : \"g\"(0)  \\",
      "341:   : \"cc\");  \\",
      "342:  asm (\"addq %2,%0; adcq %3,%1\" \\",
      "343:   : \"+r\"(c0),\"+d\"(t2) \\",
      "344:   : \"a\"(t1),\"g\"(0) \\",
      "345:   : \"cc\");  \\",
      "346:  asm (\"addq %2,%0; adcq %3,%1\" \\",
      "347:   : \"+r\"(c1),\"+r\"(c2) \\",
      "348:   : \"d\"(t2),\"g\"(0) \\",
      "349:   : \"cc\");  \\",
      "",
      "[Added Lines]",
      "285: #define mul_add_c(a,b,c0,c1,c2)  do { \\",
      "286:  BN_ULONG ta = (a), tb = (b);  \\",
      "287:  BN_ULONG lo, hi;   \\",
      "288:  BN_UMULT_LOHI(lo,hi,ta,tb);  \\",
      "289:  c0 += lo; hi += (c0<lo)?1:0;  \\",
      "290:  c1 += hi; c2 += (c1<hi)?1:0;  \\",
      "291:  } while(0)",
      "293: #define mul_add_c2(a,b,c0,c1,c2) do { \\",
      "294:  BN_ULONG ta = (a), tb = (b);  \\",
      "295:  BN_ULONG lo, hi, tt;   \\",
      "296:  BN_UMULT_LOHI(lo,hi,ta,tb);  \\",
      "297:  c0 += lo; tt = hi+((c0<lo)?1:0); \\",
      "298:  c1 += tt; c2 += (c1<tt)?1:0;  \\",
      "299:  c0 += lo; hi += (c0<lo)?1:0;  \\",
      "300:  c1 += hi; c2 += (c1<hi)?1:0;  \\",
      "301:  } while(0)",
      "303: #define sqr_add_c(a,i,c0,c1,c2)  do { \\",
      "304:  BN_ULONG ta = (a)[i];   \\",
      "305:  BN_ULONG lo, hi;   \\",
      "306:  BN_UMULT_LOHI(lo,hi,ta,ta);  \\",
      "307:  c0 += lo; hi += (c0<lo)?1:0;  \\",
      "308:  c1 += hi; c2 += (c1<hi)?1:0;  \\",
      "309:  } while(0)",
      "312:  BN_ULONG t1,t2;   \\",
      "317:  asm (\"addq %3,%0; adcq %4,%1; adcq %5,%2\" \\",
      "318:   : \"+r\"(c0),\"+r\"(c1),\"+r\"(c2)  \\",
      "319:   : \"r\"(t1),\"r\"(t2),\"g\"(0)  \\",
      "320:   : \"cc\");    \\",
      "324:  BN_ULONG t1,t2;   \\",
      "329:  asm (\"addq %3,%0; adcq %4,%1; adcq %5,%2\" \\",
      "330:   : \"+r\"(c0),\"+r\"(c1),\"+r\"(c2)  \\",
      "331:   : \"r\"(t1),\"r\"(t2),\"g\"(0)  \\",
      "332:   : \"cc\");    \\",
      "336:  BN_ULONG t1,t2;   \\",
      "341:  asm (\"addq %3,%0; adcq %4,%1; adcq %5,%2\" \\",
      "342:   : \"+r\"(c0),\"+r\"(c1),\"+r\"(c2)  \\",
      "343:   : \"r\"(t1),\"r\"(t2),\"g\"(0)  \\",
      "344:   : \"cc\");    \\",
      "345:  asm (\"addq %3,%0; adcq %4,%1; adcq %5,%2\" \\",
      "346:   : \"+r\"(c0),\"+r\"(c1),\"+r\"(c2)  \\",
      "347:   : \"r\"(t1),\"r\"(t2),\"g\"(0)  \\",
      "348:   : \"cc\");    \\",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "356: void bn_mul_comba8(BN_ULONG *r, BN_ULONG *a, BN_ULONG *b)",
      "357:  {",
      "359:  BN_ULONG c1,c2,c3;",
      "361:  c1=0;",
      "",
      "[Removed Lines]",
      "358:  BN_ULONG t1,t2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "460: void bn_mul_comba4(BN_ULONG *r, BN_ULONG *a, BN_ULONG *b)",
      "461:  {",
      "463:  BN_ULONG c1,c2,c3;",
      "465:  c1=0;",
      "",
      "[Removed Lines]",
      "462:  BN_ULONG t1,t2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "500: void bn_sqr_comba8(BN_ULONG *r, const BN_ULONG *a)",
      "501:  {",
      "503:  BN_ULONG c1,c2,c3;",
      "505:  c1=0;",
      "",
      "[Removed Lines]",
      "502:  BN_ULONG t1,t2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "576: void bn_sqr_comba4(BN_ULONG *r, const BN_ULONG *a)",
      "577:  {",
      "579:  BN_ULONG c1,c2,c3;",
      "581:  c1=0;",
      "",
      "[Removed Lines]",
      "578:  BN_ULONG t1,t2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "crypto/bn/bn_asm.c||crypto/bn/bn_asm.c": [
      "File: crypto/bn/bn_asm.c -> crypto/bn/bn_asm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "441: #ifdef BN_LLONG",
      "466: #define sqr_add_c2(a,i,j,c0,c1,c2) \\",
      "467:  mul_add_c2((a)[i],(a)[j],c0,c1,c2)",
      "469: #elif defined(BN_UMULT_LOHI)",
      "494: #define sqr_add_c2(a,i,j,c0,c1,c2) \\",
      "495:  mul_add_c2((a)[i],(a)[j],c0,c1,c2)",
      "497: #elif defined(BN_UMULT_HIGH)",
      "525: #define sqr_add_c2(a,i,j,c0,c1,c2) \\",
      "526:  mul_add_c2((a)[i],(a)[j],c0,c1,c2)",
      "553: #define sqr_add_c2(a,i,j,c0,c1,c2) \\",
      "554:  mul_add_c2((a)[i],(a)[j],c0,c1,c2)",
      "",
      "[Removed Lines]",
      "442: #define mul_add_c(a,b,c0,c1,c2) \\",
      "443:  t=(BN_ULLONG)a*b; \\",
      "444:  t1=(BN_ULONG)Lw(t); \\",
      "445:  t2=(BN_ULONG)Hw(t); \\",
      "446:  c0=(c0+t1)&BN_MASK2; if ((c0) < t1) t2++; \\",
      "447:  c1=(c1+t2)&BN_MASK2; if ((c1) < t2) c2++;",
      "449: #define mul_add_c2(a,b,c0,c1,c2) \\",
      "450:  t=(BN_ULLONG)a*b; \\",
      "451:  tt=(t+t)&BN_MASK; \\",
      "452:  if (tt < t) c2++; \\",
      "453:  t1=(BN_ULONG)Lw(tt); \\",
      "454:  t2=(BN_ULONG)Hw(tt); \\",
      "455:  c0=(c0+t1)&BN_MASK2;  \\",
      "456:  if ((c0 < t1) && (((++t2)&BN_MASK2) == 0)) c2++; \\",
      "457:  c1=(c1+t2)&BN_MASK2; if ((c1) < t2) c2++;",
      "459: #define sqr_add_c(a,i,c0,c1,c2) \\",
      "460:  t=(BN_ULLONG)a[i]*a[i]; \\",
      "461:  t1=(BN_ULONG)Lw(t); \\",
      "462:  t2=(BN_ULONG)Hw(t); \\",
      "463:  c0=(c0+t1)&BN_MASK2; if ((c0) < t1) t2++; \\",
      "464:  c1=(c1+t2)&BN_MASK2; if ((c1) < t2) c2++;",
      "471: #define mul_add_c(a,b,c0,c1,c2) { \\",
      "472:  BN_ULONG ta=(a),tb=(b);  \\",
      "473:  BN_UMULT_LOHI(t1,t2,ta,tb); \\",
      "474:  c0 += t1; t2 += (c0<t1)?1:0; \\",
      "475:  c1 += t2; c2 += (c1<t2)?1:0; \\",
      "476:  }",
      "478: #define mul_add_c2(a,b,c0,c1,c2) { \\",
      "479:  BN_ULONG ta=(a),tb=(b),t0; \\",
      "480:  BN_UMULT_LOHI(t0,t1,ta,tb); \\",
      "481:  t2 = t1+t1; c2 += (t2<t1)?1:0; \\",
      "482:  t1 = t0+t0; t2 += (t1<t0)?1:0; \\",
      "483:  c0 += t1; t2 += (c0<t1)?1:0; \\",
      "484:  c1 += t2; c2 += (c1<t2)?1:0; \\",
      "485:  }",
      "487: #define sqr_add_c(a,i,c0,c1,c2) { \\",
      "488:  BN_ULONG ta=(a)[i];  \\",
      "489:  BN_UMULT_LOHI(t1,t2,ta,ta); \\",
      "490:  c0 += t1; t2 += (c0<t1)?1:0; \\",
      "491:  c1 += t2; c2 += (c1<t2)?1:0; \\",
      "492:  }",
      "499: #define mul_add_c(a,b,c0,c1,c2) { \\",
      "500:  BN_ULONG ta=(a),tb=(b);  \\",
      "501:  t1 = ta * tb;   \\",
      "502:  t2 = BN_UMULT_HIGH(ta,tb); \\",
      "503:  c0 += t1; t2 += (c0<t1)?1:0; \\",
      "504:  c1 += t2; c2 += (c1<t2)?1:0; \\",
      "505:  }",
      "507: #define mul_add_c2(a,b,c0,c1,c2) { \\",
      "508:  BN_ULONG ta=(a),tb=(b),t0; \\",
      "509:  t1 = BN_UMULT_HIGH(ta,tb); \\",
      "510:  t0 = ta * tb;   \\",
      "511:  t2 = t1+t1; c2 += (t2<t1)?1:0; \\",
      "512:  t1 = t0+t0; t2 += (t1<t0)?1:0; \\",
      "513:  c0 += t1; t2 += (c0<t1)?1:0; \\",
      "514:  c1 += t2; c2 += (c1<t2)?1:0; \\",
      "515:  }",
      "517: #define sqr_add_c(a,i,c0,c1,c2) { \\",
      "518:  BN_ULONG ta=(a)[i];  \\",
      "519:  t1 = ta * ta;   \\",
      "520:  t2 = BN_UMULT_HIGH(ta,ta); \\",
      "521:  c0 += t1; t2 += (c0<t1)?1:0; \\",
      "522:  c1 += t2; c2 += (c1<t2)?1:0; \\",
      "523:  }",
      "529: #define mul_add_c(a,b,c0,c1,c2) \\",
      "530:  t1=LBITS(a); t2=HBITS(a); \\",
      "531:  bl=LBITS(b); bh=HBITS(b); \\",
      "532:  mul64(t1,t2,bl,bh); \\",
      "533:  c0=(c0+t1)&BN_MASK2; if ((c0) < t1) t2++; \\",
      "534:  c1=(c1+t2)&BN_MASK2; if ((c1) < t2) c2++;",
      "536: #define mul_add_c2(a,b,c0,c1,c2) \\",
      "537:  t1=LBITS(a); t2=HBITS(a); \\",
      "538:  bl=LBITS(b); bh=HBITS(b); \\",
      "539:  mul64(t1,t2,bl,bh); \\",
      "540:  if (t2 & BN_TBIT) c2++; \\",
      "541:  t2=(t2+t2)&BN_MASK2; \\",
      "542:  if (t1 & BN_TBIT) t2++; \\",
      "543:  t1=(t1+t1)&BN_MASK2; \\",
      "544:  c0=(c0+t1)&BN_MASK2;  \\",
      "545:  if ((c0 < t1) && (((++t2)&BN_MASK2) == 0)) c2++; \\",
      "546:  c1=(c1+t2)&BN_MASK2; if ((c1) < t2) c2++;",
      "548: #define sqr_add_c(a,i,c0,c1,c2) \\",
      "549:  sqr64(t1,t2,(a)[i]); \\",
      "550:  c0=(c0+t1)&BN_MASK2; if ((c0) < t1) t2++; \\",
      "551:  c1=(c1+t2)&BN_MASK2; if ((c1) < t2) c2++;",
      "",
      "[Added Lines]",
      "446: #define mul_add_c(a,b,c0,c1,c2)  do { \\",
      "447:  BN_ULONG hi;    \\",
      "448:  BN_ULLONG t = (BN_ULLONG)(a)*(b); \\",
      "449:  t += c0;  /* no carry */ \\",
      "450:  c0 = (BN_ULONG)Lw(t);   \\",
      "451:  hi = (BN_ULONG)Hw(t);   \\",
      "452:  c1 = (c1+hi)&BN_MASK2; if (c1<hi) c2++; \\",
      "453:  } while(0)",
      "455: #define mul_add_c2(a,b,c0,c1,c2) do { \\",
      "456:  BN_ULONG hi;    \\",
      "457:  BN_ULLONG t = (BN_ULLONG)(a)*(b); \\",
      "458:  BN_ULLONG tt = t+c0; /* no carry */ \\",
      "459:  c0 = (BN_ULONG)Lw(tt);   \\",
      "460:  hi = (BN_ULONG)Hw(tt);   \\",
      "461:  c1 = (c1+hi)&BN_MASK2; if (c1<hi) c2++; \\",
      "462:  t += c0;  /* no carry */ \\",
      "463:  c0 = (BN_ULONG)Lw(t);   \\",
      "464:  hi = (BN_ULONG)Hw(t);   \\",
      "465:  c1 = (c1+hi)&BN_MASK2; if (c1<hi) c2++; \\",
      "466:  } while(0)",
      "468: #define sqr_add_c(a,i,c0,c1,c2)  do { \\",
      "469:  BN_ULONG hi;    \\",
      "470:  BN_ULLONG t = (BN_ULLONG)a[i]*a[i]; \\",
      "471:  t += c0;  /* no carry */ \\",
      "472:  c0 = (BN_ULONG)Lw(t);   \\",
      "473:  hi = (BN_ULONG)Hw(t);   \\",
      "474:  c1 = (c1+hi)&BN_MASK2; if (c1<hi) c2++; \\",
      "475:  } while(0)",
      "485: #define mul_add_c(a,b,c0,c1,c2)  do { \\",
      "486:  BN_ULONG ta = (a), tb = (b);  \\",
      "487:  BN_ULONG lo, hi;   \\",
      "488:  BN_UMULT_LOHI(lo,hi,ta,tb);  \\",
      "489:  c0 += lo; hi += (c0<lo)?1:0;  \\",
      "490:  c1 += hi; c2 += (c1<hi)?1:0;  \\",
      "491:  } while(0)",
      "493: #define mul_add_c2(a,b,c0,c1,c2) do { \\",
      "494:  BN_ULONG ta = (a), tb = (b);  \\",
      "495:  BN_ULONG lo, hi, tt;   \\",
      "496:  BN_UMULT_LOHI(lo,hi,ta,tb);  \\",
      "497:  c0 += lo; tt = hi+((c0<lo)?1:0); \\",
      "498:  c1 += tt; c2 += (c1<tt)?1:0;  \\",
      "499:  c0 += lo; hi += (c0<lo)?1:0;  \\",
      "500:  c1 += hi; c2 += (c1<hi)?1:0;  \\",
      "501:  } while(0)",
      "503: #define sqr_add_c(a,i,c0,c1,c2)  do { \\",
      "504:  BN_ULONG ta = (a)[i];   \\",
      "505:  BN_ULONG lo, hi;   \\",
      "506:  BN_UMULT_LOHI(lo,hi,ta,ta);  \\",
      "507:  c0 += lo; hi += (c0<lo)?1:0;  \\",
      "508:  c1 += hi; c2 += (c1<hi)?1:0;  \\",
      "509:  } while(0)",
      "519: #define mul_add_c(a,b,c0,c1,c2)  do { \\",
      "520:  BN_ULONG ta = (a), tb = (b);  \\",
      "521:  BN_ULONG lo = ta * tb;   \\",
      "522:  BN_ULONG hi = BN_UMULT_HIGH(ta,tb); \\",
      "523:  c0 += lo; hi += (c0<lo)?1:0;  \\",
      "524:  c1 += hi; c2 += (c1<hi)?1:0;  \\",
      "525:  } while(0)",
      "527: #define mul_add_c2(a,b,c0,c1,c2) do { \\",
      "528:  BN_ULONG ta = (a), tb = (b), tt; \\",
      "529:  BN_ULONG lo = ta * tb;   \\",
      "530:  BN_ULONG hi = BN_UMULT_HIGH(ta,tb); \\",
      "531:  c0 += lo; tt = hi + ((c0<lo)?1:0); \\",
      "532:  c1 += tt; c2 += (c1<tt)?1:0;  \\",
      "533:  c0 += lo; hi += (c0<lo)?1:0;  \\",
      "534:  c1 += hi; c2 += (c1<hi)?1:0;  \\",
      "535:  } while(0)",
      "537: #define sqr_add_c(a,i,c0,c1,c2)  do { \\",
      "538:  BN_ULONG ta = (a)[i];   \\",
      "539:  BN_ULONG lo = ta * ta;   \\",
      "540:  BN_ULONG hi = BN_UMULT_HIGH(ta,ta); \\",
      "541:  c0 += lo; hi += (c0<lo)?1:0;  \\",
      "542:  c1 += hi; c2 += (c1<hi)?1:0;  \\",
      "543:  } while(0)",
      "553: #define mul_add_c(a,b,c0,c1,c2)  do { \\",
      "554:  BN_ULONG lo = LBITS(a), hi = HBITS(a); \\",
      "555:  BN_ULONG bl = LBITS(b), bh = HBITS(b); \\",
      "556:  mul64(lo,hi,bl,bh);   \\",
      "557:  c0 = (c0+lo)&BN_MASK2; if (c0<lo) hi++; \\",
      "558:  c1 = (c1+hi)&BN_MASK2; if (c1<hi) c2++; \\",
      "559:  } while(0)",
      "561: #define mul_add_c2(a,b,c0,c1,c2) do { \\",
      "562:  BN_ULONG tt;    \\",
      "563:  BN_ULONG lo = LBITS(a), hi = HBITS(a); \\",
      "564:  BN_ULONG bl = LBITS(b), bh = HBITS(b); \\",
      "565:  mul64(lo,hi,bl,bh);   \\",
      "566:  tt = hi;    \\",
      "567:  c0 = (c0+lo)&BN_MASK2; if (c0<lo) tt++; \\",
      "568:  c1 = (c1+tt)&BN_MASK2; if (c1<tt) c2++; \\",
      "569:  c0 = (c0+lo)&BN_MASK2; if (c0<lo) hi++; \\",
      "570:  c1 = (c1+hi)&BN_MASK2; if (c1<hi) c2++; \\",
      "571:  } while(0)",
      "573: #define sqr_add_c(a,i,c0,c1,c2)  do { \\",
      "574:  BN_ULONG lo, hi;   \\",
      "575:  sqr64(lo,hi,(a)[i]);   \\",
      "576:  c0 = (c0+lo)&BN_MASK2; if (c0<lo) hi++; \\",
      "577:  c1 = (c1+hi)&BN_MASK2; if (c1<hi) c2++; \\",
      "578:  } while(0)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "557: void bn_mul_comba8(BN_ULONG *r, BN_ULONG *a, BN_ULONG *b)",
      "558:  {",
      "565:  BN_ULONG c1,c2,c3;",
      "567:  c1=0;",
      "",
      "[Removed Lines]",
      "559: #ifdef BN_LLONG",
      "560:  BN_ULLONG t;",
      "561: #else",
      "562:  BN_ULONG bl,bh;",
      "563: #endif",
      "564:  BN_ULONG t1,t2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "666: void bn_mul_comba4(BN_ULONG *r, BN_ULONG *a, BN_ULONG *b)",
      "667:  {",
      "674:  BN_ULONG c1,c2,c3;",
      "676:  c1=0;",
      "",
      "[Removed Lines]",
      "668: #ifdef BN_LLONG",
      "669:  BN_ULLONG t;",
      "670: #else",
      "671:  BN_ULONG bl,bh;",
      "672: #endif",
      "673:  BN_ULONG t1,t2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "711: void bn_sqr_comba8(BN_ULONG *r, const BN_ULONG *a)",
      "712:  {",
      "719:  BN_ULONG c1,c2,c3;",
      "721:  c1=0;",
      "",
      "[Removed Lines]",
      "713: #ifdef BN_LLONG",
      "714:  BN_ULLONG t,tt;",
      "715: #else",
      "716:  BN_ULONG bl,bh;",
      "717: #endif",
      "718:  BN_ULONG t1,t2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "792: void bn_sqr_comba4(BN_ULONG *r, const BN_ULONG *a)",
      "793:  {",
      "800:  BN_ULONG c1,c2,c3;",
      "802:  c1=0;",
      "",
      "[Removed Lines]",
      "794: #ifdef BN_LLONG",
      "795:  BN_ULLONG t,tt;",
      "796: #else",
      "797:  BN_ULONG bl,bh;",
      "798: #endif",
      "799:  BN_ULONG t1,t2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "crypto/bn/bntest.c||crypto/bn/bntest.c": [
      "File: crypto/bn/bntest.c -> crypto/bn/bntest.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "690: int test_sqr(BIO *bp, BN_CTX *ctx)",
      "691:  {",
      "700:  for (i=0; i<num0; i++)",
      "701:   {",
      "705:   if (bp != NULL)",
      "706:    {",
      "707:    if (!results)",
      "708:     {",
      "710:     BIO_puts(bp,\" * \");",
      "712:     BIO_puts(bp,\" - \");",
      "713:     }",
      "715:    BIO_puts(bp,\"\\n\");",
      "716:    }",
      "724:   }",
      "730:  }",
      "732: int test_mont(BIO *bp, BN_CTX *ctx)",
      "",
      "[Removed Lines]",
      "692:  BIGNUM a,c,d,e;",
      "693:  int i;",
      "695:  BN_init(&a);",
      "696:  BN_init(&c);",
      "697:  BN_init(&d);",
      "698:  BN_init(&e);",
      "702:   BN_bntest_rand(&a,40+i*10,0,0);",
      "703:   a.neg=rand_neg();",
      "704:   BN_sqr(&c,&a,ctx);",
      "709:     BN_print(bp,&a);",
      "711:     BN_print(bp,&a);",
      "714:    BN_print(bp,&c);",
      "717:   BN_div(&d,&e,&c,&a,ctx);",
      "718:   BN_sub(&d,&d,&a);",
      "719:   if(!BN_is_zero(&d) || !BN_is_zero(&e))",
      "720:       {",
      "721:       fprintf(stderr,\"Square test failed!\\n\");",
      "722:       return 0;",
      "723:       }",
      "725:  BN_free(&a);",
      "726:  BN_free(&c);",
      "727:  BN_free(&d);",
      "728:  BN_free(&e);",
      "729:  return(1);",
      "",
      "[Added Lines]",
      "692:  BIGNUM *a,*c,*d,*e;",
      "693:  int i, ret = 0;",
      "695:  a = BN_new();",
      "696:  c = BN_new();",
      "697:  d = BN_new();",
      "698:  e = BN_new();",
      "699:  if (a == NULL || c == NULL || d == NULL || e == NULL)",
      "700:   {",
      "701:   goto err;",
      "702:   }",
      "706:   BN_bntest_rand(a,40+i*10,0,0);",
      "707:   a->neg=rand_neg();",
      "708:   BN_sqr(c,a,ctx);",
      "713:     BN_print(bp,a);",
      "715:     BN_print(bp,a);",
      "718:    BN_print(bp,c);",
      "721:   BN_div(d,e,c,a,ctx);",
      "722:   BN_sub(d,d,a);",
      "723:   if(!BN_is_zero(d) || !BN_is_zero(e))",
      "724:    {",
      "725:    fprintf(stderr,\"Square test failed!\\n\");",
      "726:    goto err;",
      "727:    }",
      "731:  BN_hex2bn(&a,",
      "732:   \"80000000000000008000000000000001FFFFFFFFFFFFFFFE0000000000000000\");",
      "733:  BN_sqr(c, a, ctx);",
      "734:  if (bp != NULL)",
      "735:   {",
      "736:   if (!results)",
      "737:    {",
      "738:    BN_print(bp,a);",
      "739:    BIO_puts(bp,\" * \");",
      "740:    BN_print(bp,a);",
      "741:    BIO_puts(bp,\" - \");",
      "742:    }",
      "743:   BN_print(bp,c);",
      "744:   BIO_puts(bp,\"\\n\");",
      "745:   }",
      "746:  BN_mul(d, a, a, ctx);",
      "747:  if (BN_cmp(c, d))",
      "748:   {",
      "749:   fprintf(stderr, \"Square test failed: BN_sqr and BN_mul produce \"",
      "750:    \"different results!\\n\");",
      "751:   goto err;",
      "752:   }",
      "755:  BN_hex2bn(&a,",
      "756:   \"80000000000000000000000080000001FFFFFFFE000000000000000000000000\");",
      "757:  BN_sqr(c, a, ctx);",
      "758:  if (bp != NULL)",
      "759:   {",
      "760:   if (!results)",
      "761:    {",
      "762:    BN_print(bp,a);",
      "763:    BIO_puts(bp,\" * \");",
      "764:    BN_print(bp,a);",
      "765:    BIO_puts(bp,\" - \");",
      "766:    }",
      "767:   BN_print(bp,c);",
      "768:   BIO_puts(bp,\"\\n\");",
      "769:   }",
      "770:  BN_mul(d, a, a, ctx);",
      "771:  if (BN_cmp(c, d))",
      "772:   {",
      "773:   fprintf(stderr, \"Square test failed: BN_sqr and BN_mul produce \"",
      "774:    \"different results!\\n\");",
      "775:   goto err;",
      "776:   }",
      "777:  ret = 1;",
      "778: err:",
      "779:  if (a != NULL) BN_free(a);",
      "780:  if (c != NULL) BN_free(c);",
      "781:  if (d != NULL) BN_free(d);",
      "782:  if (e != NULL) BN_free(e);",
      "783:  return ret;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4b4c0a19211bf73d81de52de697a1a9dc60aed82",
      "candidate_info": {
        "commit_hash": "4b4c0a19211bf73d81de52de697a1a9dc60aed82",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4b4c0a19211bf73d81de52de697a1a9dc60aed82",
        "files": [
          "crypto/bn/asm/mips3.s",
          "crypto/bn/asm/x86_64-gcc.c",
          "crypto/bn/bn_asm.c",
          "crypto/bn/bntest.c"
        ],
        "message": "Fix for CVE-2014-3570.\n\nReviewed-by: Emilia Kasper <emilia@openssl.org>\n(cherry picked from commit e793809ba50c1e90ab592fb640a856168e50f3de)",
        "before_after_code_files": [
          "crypto/bn/asm/mips3.s||crypto/bn/asm/mips3.s",
          "crypto/bn/asm/x86_64-gcc.c||crypto/bn/asm/x86_64-gcc.c",
          "crypto/bn/bn_asm.c||crypto/bn/bn_asm.c",
          "crypto/bn/bntest.c||crypto/bn/bntest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "crypto/bn/asm/x86_64-gcc.c||crypto/bn/asm/x86_64-gcc.c",
            "crypto/bn/bn_asm.c||crypto/bn/bn_asm.c",
            "crypto/bn/bntest.c||crypto/bn/bntest.c"
          ],
          "candidate": [
            "crypto/bn/asm/x86_64-gcc.c||crypto/bn/asm/x86_64-gcc.c",
            "crypto/bn/bn_asm.c||crypto/bn/bn_asm.c",
            "crypto/bn/bntest.c||crypto/bn/bntest.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/bn/asm/mips3.s||crypto/bn/asm/mips3.s": [
          "File: crypto/bn/asm/mips3.s -> crypto/bn/asm/mips3.s",
          "--- Hunk 1 ---",
          "[Context before]",
          "1585:  mflo t_1",
          "1586:  mfhi t_2",
          "1592:  daddu c_3,t_1",
          "1593:  sltu AT,c_3,t_1",
          "1595:  daddu c_1,t_2",
          "1599:  mflo t_1",
          "1600:  mfhi t_2",
          "",
          "[Removed Lines]",
          "1587:  slt c_2,t_2,zero",
          "1588:  dsll t_2,1",
          "1589:  slt a2,t_1,zero",
          "1590:  daddu t_2,a2",
          "1591:  dsll t_1,1",
          "1594:  daddu t_2,AT",
          "1596:  sltu AT,c_1,t_2",
          "1597:  daddu c_2,AT",
          "",
          "[Added Lines]",
          "1589:  daddu c_3,t_1",
          "1590:  daddu AT,t_2",
          "1591:  sltu t_1,c_3,t_1",
          "1592:  daddu c_1,AT",
          "1593:  daddu t_2,t_1",
          "1594:  sltu c_2,c_1,AT",
          "1596:  sltu t_2,c_1,t_2",
          "1597:  daddu c_2,t_2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1610:  mflo t_1",
          "1611:  mfhi t_2",
          "1617:  daddu c_1,t_1",
          "1618:  sltu AT,c_1,t_1",
          "1620:  daddu c_2,t_2",
          "1624:  mflo t_1",
          "1625:  mfhi t_2",
          "1632:  daddu c_1,t_1",
          "1633:  sltu AT,c_1,t_1",
          "1635:  daddu c_2,t_2",
          "1637:  daddu c_3,AT",
          "1638:  sd c_1,24(a0)",
          "1641:  mflo t_1",
          "1642:  mfhi t_2",
          "1648:  daddu c_2,t_1",
          "1649:  sltu AT,c_2,t_1",
          "1651:  daddu c_3,t_2",
          "1655:  mflo t_1",
          "1656:  mfhi t_2",
          "1663:  daddu c_2,t_1",
          "1664:  sltu AT,c_2,t_1",
          "1666:  daddu c_3,t_2",
          "1668:  daddu c_1,AT",
          "1670:  mflo t_1",
          "1671:  mfhi t_2",
          "",
          "[Removed Lines]",
          "1612:  slt c_3,t_2,zero",
          "1613:  dsll t_2,1",
          "1614:  slt a2,t_1,zero",
          "1615:  daddu t_2,a2",
          "1616:  dsll t_1,1",
          "1619:  daddu t_2,AT",
          "1621:  sltu AT,c_2,t_2",
          "1622:  daddu c_3,AT",
          "1626:  slt AT,t_2,zero",
          "1627:  daddu c_3,AT",
          "1628:  dsll t_2,1",
          "1629:  slt a2,t_1,zero",
          "1630:  daddu t_2,a2",
          "1631:  dsll t_1,1",
          "1634:  daddu t_2,AT",
          "1636:  sltu AT,c_2,t_2",
          "1643:  slt c_1,t_2,zero",
          "1644:  dsll t_2,1",
          "1645:  slt a2,t_1,zero",
          "1646:  daddu t_2,a2",
          "1647:  dsll t_1,1",
          "1650:  daddu t_2,AT",
          "1652:  sltu AT,c_3,t_2",
          "1653:  daddu c_1,AT",
          "1657:  slt AT,t_2,zero",
          "1658:  daddu c_1,AT",
          "1659:  dsll t_2,1",
          "1660:  slt a2,t_1,zero",
          "1661:  daddu t_2,a2",
          "1662:  dsll t_1,1",
          "1665:  daddu t_2,AT",
          "1667:  sltu AT,c_3,t_2",
          "",
          "[Added Lines]",
          "1614:  daddu c_1,t_1",
          "1615:  daddu AT,t_2",
          "1616:  sltu t_1,c_1,t_1",
          "1617:  daddu c_2,AT",
          "1618:  daddu t_2,t_1",
          "1619:  sltu c_3,c_2,AT",
          "1621:  sltu t_2,c_2,t_2",
          "1622:  daddu c_3,t_2",
          "1628:  daddu c_1,t_1",
          "1629:  daddu AT,t_2",
          "1630:  sltu t_1,c_1,t_1",
          "1631:  daddu c_2,AT",
          "1632:  daddu t_2,t_1",
          "1633:  sltu AT,c_2,AT",
          "1636:  sltu t_2,c_2,t_2",
          "1637:  daddu c_3,t_2",
          "1645:  daddu c_2,t_1",
          "1646:  daddu AT,t_2",
          "1647:  sltu t_1,c_2,t_1",
          "1648:  daddu c_3,AT",
          "1649:  daddu t_2,t_1",
          "1650:  sltu c_1,c_3,AT",
          "1652:  sltu t_2,c_3,t_2",
          "1653:  daddu c_1,t_2",
          "1659:  daddu c_2,t_1",
          "1660:  daddu AT,t_2",
          "1661:  sltu t_1,c_2,t_1",
          "1662:  daddu c_3,AT",
          "1663:  daddu t_2,t_1",
          "1664:  sltu AT,c_3,AT",
          "1667:  sltu t_2,c_3,t_2",
          "1668:  daddu c_1,t_2",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1681:  mflo t_1",
          "1682:  mfhi t_2",
          "1688:  daddu c_3,t_1",
          "1689:  sltu AT,c_3,t_1",
          "1691:  daddu c_1,t_2",
          "1695:  mflo t_1",
          "1696:  mfhi t_2",
          "1703:  daddu c_3,t_1",
          "1704:  sltu AT,c_3,t_1",
          "1706:  daddu c_1,t_2",
          "1708:  daddu c_2,AT",
          "1710:  mflo t_1",
          "1711:  mfhi t_2",
          "1718:  daddu c_3,t_1",
          "1719:  sltu AT,c_3,t_1",
          "1721:  daddu c_1,t_2",
          "1723:  daddu c_2,AT",
          "1724:  sd c_3,40(a0)",
          "1727:  mflo t_1",
          "1728:  mfhi t_2",
          "1734:  daddu c_1,t_1",
          "1735:  sltu AT,c_1,t_1",
          "1737:  daddu c_2,t_2",
          "1741:  mflo t_1",
          "1742:  mfhi t_2",
          "1749:  daddu c_1,t_1",
          "1750:  sltu AT,c_1,t_1",
          "1752:  daddu c_2,t_2",
          "1754:  daddu c_3,AT",
          "1756:  mflo t_1",
          "1757:  mfhi t_2",
          "1764:  daddu c_1,t_1",
          "1765:  sltu AT,c_1,t_1",
          "1767:  daddu c_2,t_2",
          "1769:  daddu c_3,AT",
          "1771:  mflo t_1",
          "1772:  mfhi t_2",
          "",
          "[Removed Lines]",
          "1683:  slt c_2,t_2,zero",
          "1684:  dsll t_2,1",
          "1685:  slt a2,t_1,zero",
          "1686:  daddu t_2,a2",
          "1687:  dsll t_1,1",
          "1690:  daddu t_2,AT",
          "1692:  sltu AT,c_1,t_2",
          "1693:  daddu c_2,AT",
          "1697:  slt AT,t_2,zero",
          "1698:  daddu c_2,AT",
          "1699:  dsll t_2,1",
          "1700:  slt a2,t_1,zero",
          "1701:  daddu t_2,a2",
          "1702:  dsll t_1,1",
          "1705:  daddu t_2,AT",
          "1707:  sltu AT,c_1,t_2",
          "1712:  slt AT,t_2,zero",
          "1713:  daddu c_2,AT",
          "1714:  dsll t_2,1",
          "1715:  slt a2,t_1,zero",
          "1716:  daddu t_2,a2",
          "1717:  dsll t_1,1",
          "1720:  daddu t_2,AT",
          "1722:  sltu AT,c_1,t_2",
          "1729:  slt c_3,t_2,zero",
          "1730:  dsll t_2,1",
          "1731:  slt a2,t_1,zero",
          "1732:  daddu t_2,a2",
          "1733:  dsll t_1,1",
          "1736:  daddu t_2,AT",
          "1738:  sltu AT,c_2,t_2",
          "1739:  daddu c_3,AT",
          "1743:  slt AT,t_2,zero",
          "1744:  daddu c_3,AT",
          "1745:  dsll t_2,1",
          "1746:  slt a2,t_1,zero",
          "1747:  daddu t_2,a2",
          "1748:  dsll t_1,1",
          "1751:  daddu t_2,AT",
          "1753:  sltu AT,c_2,t_2",
          "1758:  slt AT,t_2,zero",
          "1759:  daddu c_3,AT",
          "1760:  dsll t_2,1",
          "1761:  slt a2,t_1,zero",
          "1762:  daddu t_2,a2",
          "1763:  dsll t_1,1",
          "1766:  daddu t_2,AT",
          "1768:  sltu AT,c_2,t_2",
          "",
          "[Added Lines]",
          "1685:  daddu c_3,t_1",
          "1686:  daddu AT,t_2",
          "1687:  sltu t_1,c_3,t_1",
          "1688:  daddu c_1,AT",
          "1689:  daddu t_2,t_1",
          "1690:  sltu c_2,c_1,AT",
          "1692:  sltu t_2,c_1,t_2",
          "1693:  daddu c_2,t_2",
          "1699:  daddu c_3,t_1",
          "1700:  daddu AT,t_2",
          "1701:  sltu t_1,c_3,t_1",
          "1702:  daddu c_1,AT",
          "1703:  daddu t_2,t_1",
          "1704:  sltu AT,c_1,AT",
          "1707:  sltu t_2,c_1,t_2",
          "1708:  daddu c_2,t_2",
          "1714:  daddu c_3,t_1",
          "1715:  daddu AT,t_2",
          "1716:  sltu t_1,c_3,t_1",
          "1717:  daddu c_1,AT",
          "1718:  daddu t_2,t_1",
          "1719:  sltu AT,c_1,AT",
          "1722:  sltu t_2,c_1,t_2",
          "1723:  daddu c_2,t_2",
          "1731:  daddu c_1,t_1",
          "1732:  daddu AT,t_2",
          "1733:  sltu t_1,c_1,t_1",
          "1734:  daddu c_2,AT",
          "1735:  daddu t_2,t_1",
          "1736:  sltu c_3,c_2,AT",
          "1738:  sltu t_2,c_2,t_2",
          "1739:  daddu c_3,t_2",
          "1745:  daddu c_1,t_1",
          "1746:  daddu AT,t_2",
          "1747:  sltu t_1,c_1,t_1",
          "1748:  daddu c_2,AT",
          "1749:  daddu t_2,t_1",
          "1750:  sltu AT,c_2,AT",
          "1753:  sltu t_2,c_2,t_2",
          "1754:  daddu c_3,t_2",
          "1760:  daddu c_1,t_1",
          "1761:  daddu AT,t_2",
          "1762:  sltu t_1,c_1,t_1",
          "1763:  daddu c_2,AT",
          "1764:  daddu t_2,t_1",
          "1765:  sltu AT,c_2,AT",
          "1768:  sltu t_2,c_2,t_2",
          "1769:  daddu c_3,t_2",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1782:  mflo t_1",
          "1783:  mfhi t_2",
          "1789:  daddu c_2,t_1",
          "1790:  sltu AT,c_2,t_1",
          "1792:  daddu c_3,t_2",
          "1796:  mflo t_1",
          "1797:  mfhi t_2",
          "1804:  daddu c_2,t_1",
          "1805:  sltu AT,c_2,t_1",
          "1807:  daddu c_3,t_2",
          "1809:  daddu c_1,AT",
          "1811:  mflo t_1",
          "1812:  mfhi t_2",
          "1819:  daddu c_2,t_1",
          "1820:  sltu AT,c_2,t_1",
          "1822:  daddu c_3,t_2",
          "1824:  daddu c_1,AT",
          "1826:  mflo t_1",
          "1827:  mfhi t_2",
          "1834:  daddu c_2,t_1",
          "1835:  sltu AT,c_2,t_1",
          "1837:  daddu c_3,t_2",
          "1839:  daddu c_1,AT",
          "1840:  sd c_2,56(a0)",
          "1843:  mflo t_1",
          "1844:  mfhi t_2",
          "1850:  daddu c_3,t_1",
          "1851:  sltu AT,c_3,t_1",
          "1853:  daddu c_1,t_2",
          "1857:  mflo t_1",
          "1858:  mfhi t_2",
          "1865:  daddu c_3,t_1",
          "1866:  sltu AT,c_3,t_1",
          "1868:  daddu c_1,t_2",
          "1870:  daddu c_2,AT",
          "1872:  mflo t_1",
          "1873:  mfhi t_2",
          "1880:  daddu c_3,t_1",
          "1881:  sltu AT,c_3,t_1",
          "1883:  daddu c_1,t_2",
          "1885:  daddu c_2,AT",
          "1887:  mflo t_1",
          "1888:  mfhi t_2",
          "",
          "[Removed Lines]",
          "1784:  slt c_1,t_2,zero",
          "1785:  dsll t_2,1",
          "1786:  slt a2,t_1,zero",
          "1787:  daddu t_2,a2",
          "1788:  dsll t_1,1",
          "1791:  daddu t_2,AT",
          "1793:  sltu AT,c_3,t_2",
          "1794:  daddu c_1,AT",
          "1798:  slt AT,t_2,zero",
          "1799:  daddu c_1,AT",
          "1800:  dsll t_2,1",
          "1801:  slt a2,t_1,zero",
          "1802:  daddu t_2,a2",
          "1803:  dsll t_1,1",
          "1806:  daddu t_2,AT",
          "1808:  sltu AT,c_3,t_2",
          "1813:  slt AT,t_2,zero",
          "1814:  daddu c_1,AT",
          "1815:  dsll t_2,1",
          "1816:  slt a2,t_1,zero",
          "1817:  daddu t_2,a2",
          "1818:  dsll t_1,1",
          "1821:  daddu t_2,AT",
          "1823:  sltu AT,c_3,t_2",
          "1828:  slt AT,t_2,zero",
          "1829:  daddu c_1,AT",
          "1830:  dsll t_2,1",
          "1831:  slt a2,t_1,zero",
          "1832:  daddu t_2,a2",
          "1833:  dsll t_1,1",
          "1836:  daddu t_2,AT",
          "1838:  sltu AT,c_3,t_2",
          "1845:  slt c_2,t_2,zero",
          "1846:  dsll t_2,1",
          "1847:  slt a2,t_1,zero",
          "1848:  daddu t_2,a2",
          "1849:  dsll t_1,1",
          "1852:  daddu t_2,AT",
          "1854:  sltu AT,c_1,t_2",
          "1855:  daddu c_2,AT",
          "1859:  slt AT,t_2,zero",
          "1860:  daddu c_2,AT",
          "1861:  dsll t_2,1",
          "1862:  slt a2,t_1,zero",
          "1863:  daddu t_2,a2",
          "1864:  dsll t_1,1",
          "1867:  daddu t_2,AT",
          "1869:  sltu AT,c_1,t_2",
          "1874:  slt AT,t_2,zero",
          "1875:  daddu c_2,AT",
          "1876:  dsll t_2,1",
          "1877:  slt a2,t_1,zero",
          "1878:  daddu t_2,a2",
          "1879:  dsll t_1,1",
          "1882:  daddu t_2,AT",
          "1884:  sltu AT,c_1,t_2",
          "",
          "[Added Lines]",
          "1786:  daddu c_2,t_1",
          "1787:  daddu AT,t_2",
          "1788:  sltu t_1,c_2,t_1",
          "1789:  daddu c_3,AT",
          "1790:  daddu t_2,t_1",
          "1791:  sltu c_1,c_3,AT",
          "1793:  sltu t_2,c_3,t_2",
          "1794:  daddu c_1,t_2",
          "1800:  daddu c_2,t_1",
          "1801:  daddu AT,t_2",
          "1802:  sltu t_1,c_2,t_1",
          "1803:  daddu c_3,AT",
          "1804:  daddu t_2,t_1",
          "1805:  sltu AT,c_3,AT",
          "1808:  sltu t_2,c_3,t_2",
          "1809:  daddu c_1,t_2",
          "1815:  daddu c_2,t_1",
          "1816:  daddu AT,t_2",
          "1817:  sltu t_1,c_2,t_1",
          "1818:  daddu c_3,AT",
          "1819:  daddu t_2,t_1",
          "1820:  sltu AT,c_3,AT",
          "1823:  sltu t_2,c_3,t_2",
          "1824:  daddu c_1,t_2",
          "1830:  daddu c_2,t_1",
          "1831:  daddu AT,t_2",
          "1832:  sltu t_1,c_2,t_1",
          "1833:  daddu c_3,AT",
          "1834:  daddu t_2,t_1",
          "1835:  sltu AT,c_3,AT",
          "1838:  sltu t_2,c_3,t_2",
          "1839:  daddu c_1,t_2",
          "1847:  daddu c_3,t_1",
          "1848:  daddu AT,t_2",
          "1849:  sltu t_1,c_3,t_1",
          "1850:  daddu c_1,AT",
          "1851:  daddu t_2,t_1",
          "1852:  sltu c_2,c_1,AT",
          "1854:  sltu t_2,c_1,t_2",
          "1855:  daddu c_2,t_2",
          "1861:  daddu c_3,t_1",
          "1862:  daddu AT,t_2",
          "1863:  sltu t_1,c_3,t_1",
          "1864:  daddu c_1,AT",
          "1865:  daddu t_2,t_1",
          "1866:  sltu AT,c_1,AT",
          "1869:  sltu t_2,c_1,t_2",
          "1870:  daddu c_2,t_2",
          "1876:  daddu c_3,t_1",
          "1877:  daddu AT,t_2",
          "1878:  sltu t_1,c_3,t_1",
          "1879:  daddu c_1,AT",
          "1880:  daddu t_2,t_1",
          "1881:  sltu AT,c_1,AT",
          "1884:  sltu t_2,c_1,t_2",
          "1885:  daddu c_2,t_2",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1898:  mflo t_1",
          "1899:  mfhi t_2",
          "1905:  daddu c_1,t_1",
          "1906:  sltu AT,c_1,t_1",
          "1908:  daddu c_2,t_2",
          "1912:  mflo t_1",
          "1913:  mfhi t_2",
          "1920:  daddu c_1,t_1",
          "1921:  sltu AT,c_1,t_1",
          "1923:  daddu c_2,t_2",
          "1925:  daddu c_3,AT",
          "1927:  mflo t_1",
          "1928:  mfhi t_2",
          "1935:  daddu c_1,t_1",
          "1936:  sltu AT,c_1,t_1",
          "1938:  daddu c_2,t_2",
          "1940:  daddu c_3,AT",
          "1941:  sd c_1,72(a0)",
          "1944:  mflo t_1",
          "1945:  mfhi t_2",
          "1951:  daddu c_2,t_1",
          "1952:  sltu AT,c_2,t_1",
          "1954:  daddu c_3,t_2",
          "1958:  mflo t_1",
          "1959:  mfhi t_2",
          "1966:  daddu c_2,t_1",
          "1967:  sltu AT,c_2,t_1",
          "1969:  daddu c_3,t_2",
          "1971:  daddu c_1,AT",
          "1973:  mflo t_1",
          "1974:  mfhi t_2",
          "",
          "[Removed Lines]",
          "1900:  slt c_3,t_2,zero",
          "1901:  dsll t_2,1",
          "1902:  slt a2,t_1,zero",
          "1903:  daddu t_2,a2",
          "1904:  dsll t_1,1",
          "1907:  daddu t_2,AT",
          "1909:  sltu AT,c_2,t_2",
          "1910:  daddu c_3,AT",
          "1914:  slt AT,t_2,zero",
          "1915:  daddu c_3,AT",
          "1916:  dsll t_2,1",
          "1917:  slt a2,t_1,zero",
          "1918:  daddu t_2,a2",
          "1919:  dsll t_1,1",
          "1922:  daddu t_2,AT",
          "1924:  sltu AT,c_2,t_2",
          "1929:  slt AT,t_2,zero",
          "1930:  daddu c_3,AT",
          "1931:  dsll t_2,1",
          "1932:  slt a2,t_1,zero",
          "1933:  daddu t_2,a2",
          "1934:  dsll t_1,1",
          "1937:  daddu t_2,AT",
          "1939:  sltu AT,c_2,t_2",
          "1946:  slt c_1,t_2,zero",
          "1947:  dsll t_2,1",
          "1948:  slt a2,t_1,zero",
          "1949:  daddu t_2,a2",
          "1950:  dsll t_1,1",
          "1953:  daddu t_2,AT",
          "1955:  sltu AT,c_3,t_2",
          "1956:  daddu c_1,AT",
          "1960:  slt AT,t_2,zero",
          "1961:  daddu c_1,AT",
          "1962:  dsll t_2,1",
          "1963:  slt a2,t_1,zero",
          "1964:  daddu t_2,a2",
          "1965:  dsll t_1,1",
          "1968:  daddu t_2,AT",
          "1970:  sltu AT,c_3,t_2",
          "",
          "[Added Lines]",
          "1902:  daddu c_1,t_1",
          "1903:  daddu AT,t_2",
          "1904:  sltu t_1,c_1,t_1",
          "1905:  daddu c_2,AT",
          "1906:  daddu t_2,t_1",
          "1907:  sltu c_3,c_2,AT",
          "1909:  sltu t_2,c_2,t_2",
          "1910:  daddu c_3,t_2",
          "1916:  daddu c_1,t_1",
          "1917:  daddu AT,t_2",
          "1918:  sltu t_1,c_1,t_1",
          "1919:  daddu c_2,AT",
          "1920:  daddu t_2,t_1",
          "1921:  sltu AT,c_2,AT",
          "1924:  sltu t_2,c_2,t_2",
          "1925:  daddu c_3,t_2",
          "1931:  daddu c_1,t_1",
          "1932:  daddu AT,t_2",
          "1933:  sltu t_1,c_1,t_1",
          "1934:  daddu c_2,AT",
          "1935:  daddu t_2,t_1",
          "1936:  sltu AT,c_2,AT",
          "1939:  sltu t_2,c_2,t_2",
          "1940:  daddu c_3,t_2",
          "1948:  daddu c_2,t_1",
          "1949:  daddu AT,t_2",
          "1950:  sltu t_1,c_2,t_1",
          "1951:  daddu c_3,AT",
          "1952:  daddu t_2,t_1",
          "1953:  sltu c_1,c_3,AT",
          "1955:  sltu t_2,c_3,t_2",
          "1956:  daddu c_1,t_2",
          "1962:  daddu c_2,t_1",
          "1963:  daddu AT,t_2",
          "1964:  sltu t_1,c_2,t_1",
          "1965:  daddu c_3,AT",
          "1966:  daddu t_2,t_1",
          "1967:  sltu AT,c_3,AT",
          "1970:  sltu t_2,c_3,t_2",
          "1971:  daddu c_1,t_2",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1984:  mflo t_1",
          "1985:  mfhi t_2",
          "1991:  daddu c_3,t_1",
          "1992:  sltu AT,c_3,t_1",
          "1994:  daddu c_1,t_2",
          "1998:  mflo t_1",
          "1999:  mfhi t_2",
          "2006:  daddu c_3,t_1",
          "2007:  sltu AT,c_3,t_1",
          "2009:  daddu c_1,t_2",
          "2011:  daddu c_2,AT",
          "2012:  sd c_3,88(a0)",
          "2015:  mflo t_1",
          "2016:  mfhi t_2",
          "2022:  daddu c_1,t_1",
          "2023:  sltu AT,c_1,t_1",
          "2025:  daddu c_2,t_2",
          "2029:  mflo t_1",
          "2030:  mfhi t_2",
          "",
          "[Removed Lines]",
          "1986:  slt c_2,t_2,zero",
          "1987:  dsll t_2,1",
          "1988:  slt a2,t_1,zero",
          "1989:  daddu t_2,a2",
          "1990:  dsll t_1,1",
          "1993:  daddu t_2,AT",
          "1995:  sltu AT,c_1,t_2",
          "1996:  daddu c_2,AT",
          "2000:  slt AT,t_2,zero",
          "2001:  daddu c_2,AT",
          "2002:  dsll t_2,1",
          "2003:  slt a2,t_1,zero",
          "2004:  daddu t_2,a2",
          "2005:  dsll t_1,1",
          "2008:  daddu t_2,AT",
          "2010:  sltu AT,c_1,t_2",
          "2017:  slt c_3,t_2,zero",
          "2018:  dsll t_2,1",
          "2019:  slt a2,t_1,zero",
          "2020:  daddu t_2,a2",
          "2021:  dsll t_1,1",
          "2024:  daddu t_2,AT",
          "2026:  sltu AT,c_2,t_2",
          "2027:  daddu c_3,AT",
          "",
          "[Added Lines]",
          "1988:  daddu c_3,t_1",
          "1989:  daddu AT,t_2",
          "1990:  sltu t_1,c_3,t_1",
          "1991:  daddu c_1,AT",
          "1992:  daddu t_2,t_1",
          "1993:  sltu c_2,c_1,AT",
          "1995:  sltu t_2,c_1,t_2",
          "1996:  daddu c_2,t_2",
          "2002:  daddu c_3,t_1",
          "2003:  daddu AT,t_2",
          "2004:  sltu t_1,c_3,t_1",
          "2005:  daddu c_1,AT",
          "2006:  daddu t_2,t_1",
          "2007:  sltu AT,c_1,AT",
          "2010:  sltu t_2,c_1,t_2",
          "2011:  daddu c_2,t_2",
          "2019:  daddu c_1,t_1",
          "2020:  daddu AT,t_2",
          "2021:  sltu t_1,c_1,t_1",
          "2022:  daddu c_2,AT",
          "2023:  daddu t_2,t_1",
          "2024:  sltu c_3,c_2,AT",
          "2026:  sltu t_2,c_2,t_2",
          "2027:  daddu c_3,t_2",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2040:  mflo t_1",
          "2041:  mfhi t_2",
          "2047:  daddu c_2,t_1",
          "2048:  sltu AT,c_2,t_1",
          "2050:  daddu c_3,t_2",
          "2053:  sd c_2,104(a0)",
          "",
          "[Removed Lines]",
          "2042:  slt c_1,t_2,zero",
          "2043:  dsll t_2,1",
          "2044:  slt a2,t_1,zero",
          "2045:  daddu t_2,a2",
          "2046:  dsll t_1,1",
          "2049:  daddu t_2,AT",
          "2051:  sltu AT,c_3,t_2",
          "2052:  daddu c_1,AT",
          "",
          "[Added Lines]",
          "2044:  daddu c_2,t_1",
          "2045:  daddu AT,t_2",
          "2046:  sltu t_1,c_2,t_1",
          "2047:  daddu c_3,AT",
          "2048:  daddu t_2,t_1",
          "2049:  sltu c_1,c_3,AT",
          "2051:  sltu t_2,c_3,t_2",
          "2052:  daddu c_1,t_2",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2094:  mflo t_1",
          "2095:  mfhi t_2",
          "2101:  daddu c_3,t_1",
          "2102:  sltu AT,c_3,t_1",
          "2104:  daddu c_1,t_2",
          "2108:  mflo t_1",
          "2109:  mfhi t_2",
          "",
          "[Removed Lines]",
          "2096:  slt c_2,t_2,zero",
          "2097:  dsll t_2,1",
          "2098:  slt a2,t_1,zero",
          "2099:  daddu t_2,a2",
          "2100:  dsll t_1,1",
          "2103:  daddu t_2,AT",
          "2105:  sltu AT,c_1,t_2",
          "2106:  daddu c_2,AT",
          "",
          "[Added Lines]",
          "2098:  daddu c_3,t_1",
          "2099:  daddu AT,t_2",
          "2100:  sltu t_1,c_3,t_1",
          "2101:  daddu c_1,AT",
          "2102:  daddu t_2,t_1",
          "2103:  sltu c_2,c_1,AT",
          "2105:  sltu t_2,c_1,t_2",
          "2106:  daddu c_2,t_2",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2119:  mflo t_1",
          "2120:  mfhi t_2",
          "2126:  daddu c_1,t_1",
          "2127:  sltu AT,c_1,t_1",
          "2129:  daddu c_2,t_2",
          "2133:  mflo t_1",
          "2134:  mfhi t_2",
          "2141:  daddu c_1,t_1",
          "2142:  sltu AT,c_1,t_1",
          "2144:  daddu c_2,t_2",
          "2146:  daddu c_3,AT",
          "2147:  sd c_1,24(a0)",
          "2150:  mflo t_1",
          "2151:  mfhi t_2",
          "2157:  daddu c_2,t_1",
          "2158:  sltu AT,c_2,t_1",
          "2160:  daddu c_3,t_2",
          "2164:  mflo t_1",
          "2165:  mfhi t_2",
          "",
          "[Removed Lines]",
          "2121:  slt c_3,t_2,zero",
          "2122:  dsll t_2,1",
          "2123:  slt a2,t_1,zero",
          "2124:  daddu t_2,a2",
          "2125:  dsll t_1,1",
          "2128:  daddu t_2,AT",
          "2130:  sltu AT,c_2,t_2",
          "2131:  daddu c_3,AT",
          "2135:  slt AT,t_2,zero",
          "2136:  daddu c_3,AT",
          "2137:  dsll t_2,1",
          "2138:  slt a2,t_1,zero",
          "2139:  daddu t_2,a2",
          "2140:  dsll t_1,1",
          "2143:  daddu t_2,AT",
          "2145:  sltu AT,c_2,t_2",
          "2152:  slt c_1,t_2,zero",
          "2153:  dsll t_2,1",
          "2154:  slt a2,t_1,zero",
          "2155:  daddu t_2,a2",
          "2156:  dsll t_1,1",
          "2159:  daddu t_2,AT",
          "2161:  sltu AT,c_3,t_2",
          "2162:  daddu c_1,AT",
          "",
          "[Added Lines]",
          "2123:  daddu c_1,t_1",
          "2124:  daddu AT,t_2",
          "2125:  sltu t_1,c_1,t_1",
          "2126:  daddu c_2,AT",
          "2127:  daddu t_2,t_1",
          "2128:  sltu c_3,c_2,AT",
          "2130:  sltu t_2,c_2,t_2",
          "2131:  daddu c_3,t_2",
          "2137:  daddu c_1,t_1",
          "2138:  daddu AT,t_2",
          "2139:  sltu t_1,c_1,t_1",
          "2140:  daddu c_2,AT",
          "2141:  daddu t_2,t_1",
          "2142:  sltu AT,c_2,AT",
          "2145:  sltu t_2,c_2,t_2",
          "2146:  daddu c_3,t_2",
          "2154:  daddu c_2,t_1",
          "2155:  daddu AT,t_2",
          "2156:  sltu t_1,c_2,t_1",
          "2157:  daddu c_3,AT",
          "2158:  daddu t_2,t_1",
          "2159:  sltu c_1,c_3,AT",
          "2161:  sltu t_2,c_3,t_2",
          "2162:  daddu c_1,t_2",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2175:  mflo t_1",
          "2176:  mfhi t_2",
          "2182:  daddu c_3,t_1",
          "2183:  sltu AT,c_3,t_1",
          "2185:  daddu c_1,t_2",
          "2188:  sd c_3,40(a0)",
          "",
          "[Removed Lines]",
          "2177:  slt c_2,t_2,zero",
          "2178:  dsll t_2,1",
          "2179:  slt a2,t_1,zero",
          "2180:  daddu t_2,a2",
          "2181:  dsll t_1,1",
          "2184:  daddu t_2,AT",
          "2186:  sltu AT,c_1,t_2",
          "2187:  daddu c_2,AT",
          "",
          "[Added Lines]",
          "2179:  daddu c_3,t_1",
          "2180:  daddu AT,t_2",
          "2181:  sltu t_1,c_3,t_1",
          "2182:  daddu c_1,AT",
          "2183:  daddu t_2,t_1",
          "2184:  sltu c_2,c_1,AT",
          "2186:  sltu t_2,c_1,t_2",
          "2187:  daddu c_2,t_2",
          "",
          "---------------"
        ],
        "crypto/bn/asm/x86_64-gcc.c||crypto/bn/asm/x86_64-gcc.c": [
          "File: crypto/bn/asm/x86_64-gcc.c -> crypto/bn/asm/x86_64-gcc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:  BN_ULONG ta=(a),tb=(b),t0; \\",
          "284:  t1 = BN_UMULT_HIGH(ta,tb); \\",
          "285:  t0 = ta * tb;   \\",
          "289:  c1 += t2; c2 += (c1<t2)?1:0; \\",
          "290:  }",
          "291: #else",
          "292: #define mul_add_c(a,b,c0,c1,c2) do { \\",
          "",
          "[Removed Lines]",
          "286:  t2 = t1+t1; c2 += (t2<t1)?1:0; \\",
          "287:  t1 = t0+t0; t2 += (t1<t0)?1:0; \\",
          "288:  c0 += t1; t2 += (c0<t1)?1:0; \\",
          "",
          "[Added Lines]",
          "290:  c0 += t0; t2 = t1+((c0<t0)?1:0);\\",
          "292:  c0 += t0; t1 += (c0<t0)?1:0; \\",
          "293:  c1 += t1; c2 += (c1<t1)?1:0; \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "324:   : \"=a\"(t1),\"=d\"(t2) \\",
          "325:   : \"a\"(a),\"m\"(b)  \\",
          "326:   : \"cc\");  \\",
          "343:  } while (0)",
          "344: #endif",
          "",
          "[Removed Lines]",
          "327:  asm (\"addq %0,%0; adcq %2,%1\" \\",
          "328:   : \"+d\"(t2),\"+r\"(c2) \\",
          "329:   : \"g\"(0)  \\",
          "330:   : \"cc\");  \\",
          "331:  asm (\"addq %0,%0; adcq %2,%1\" \\",
          "332:   : \"+a\"(t1),\"+d\"(t2) \\",
          "333:   : \"g\"(0)  \\",
          "334:   : \"cc\");  \\",
          "335:  asm (\"addq %2,%0; adcq %3,%1\" \\",
          "336:   : \"+r\"(c0),\"+d\"(t2) \\",
          "337:   : \"a\"(t1),\"g\"(0) \\",
          "338:   : \"cc\");  \\",
          "339:  asm (\"addq %2,%0; adcq %3,%1\" \\",
          "340:   : \"+r\"(c1),\"+r\"(c2) \\",
          "341:   : \"d\"(t2),\"g\"(0) \\",
          "342:   : \"cc\");  \\",
          "",
          "[Added Lines]",
          "331:  asm (\"addq %3,%0; adcq %4,%1; adcq %5,%2\" \\",
          "332:   : \"+r\"(c0),\"+r\"(c1),\"+r\"(c2)  \\",
          "333:   : \"r\"(t1),\"r\"(t2),\"g\"(0)  \\",
          "334:   : \"cc\");    \\",
          "335:  asm (\"addq %3,%0; adcq %4,%1; adcq %5,%2\" \\",
          "336:   : \"+r\"(c0),\"+r\"(c1),\"+r\"(c2)  \\",
          "337:   : \"r\"(t1),\"r\"(t2),\"g\"(0)  \\",
          "338:   : \"cc\");    \\",
          "",
          "---------------"
        ],
        "crypto/bn/bn_asm.c||crypto/bn/bn_asm.c": [
          "File: crypto/bn/bn_asm.c -> crypto/bn/bn_asm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "471: #define mul_add_c2(a,b,c0,c1,c2) { \\",
          "472:  BN_ULONG ta=(a),tb=(b),t0; \\",
          "473:  BN_UMULT_LOHI(t0,t1,ta,tb); \\",
          "477:  c1 += t2; c2 += (c1<t2)?1:0; \\",
          "478:  }",
          "480: #define sqr_add_c(a,i,c0,c1,c2) { \\",
          "",
          "[Removed Lines]",
          "474:  t2 = t1+t1; c2 += (t2<t1)?1:0; \\",
          "475:  t1 = t0+t0; t2 += (t1<t0)?1:0; \\",
          "476:  c0 += t1; t2 += (c0<t1)?1:0; \\",
          "",
          "[Added Lines]",
          "478:  c0 += t0; t2 = t1+((c0<t0)?1:0);\\",
          "480:  c0 += t0; t1 += (c0<t0)?1:0; \\",
          "481:  c1 += t1; c2 += (c1<t1)?1:0; \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "501:  BN_ULONG ta=(a),tb=(b),t0; \\",
          "502:  t1 = BN_UMULT_HIGH(ta,tb); \\",
          "503:  t0 = ta * tb;   \\",
          "507:  c1 += t2; c2 += (c1<t2)?1:0; \\",
          "508:  }",
          "510: #define sqr_add_c(a,i,c0,c1,c2) { \\",
          "",
          "[Removed Lines]",
          "504:  t2 = t1+t1; c2 += (t2<t1)?1:0; \\",
          "505:  t1 = t0+t0; t2 += (t1<t0)?1:0; \\",
          "506:  c0 += t1; t2 += (c0<t1)?1:0; \\",
          "",
          "[Added Lines]",
          "508:  c0 += t0; t2 = t1+((c0<t0)?1:0);\\",
          "510:  c0 += t0; t1 += (c0<t0)?1:0; \\",
          "511:  c1 += t1; c2 += (c1<t1)?1:0; \\",
          "",
          "---------------"
        ],
        "crypto/bn/bntest.c||crypto/bn/bntest.c": [
          "File: crypto/bn/bntest.c -> crypto/bn/bntest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "677: int test_sqr(BIO *bp, BN_CTX *ctx)",
          "678:  {",
          "687:  for (i=0; i<num0; i++)",
          "688:   {",
          "692:   if (bp != NULL)",
          "693:    {",
          "694:    if (!results)",
          "695:     {",
          "697:     BIO_puts(bp,\" * \");",
          "699:     BIO_puts(bp,\" - \");",
          "700:     }",
          "702:    BIO_puts(bp,\"\\n\");",
          "703:    }",
          "711:   }",
          "717:  }",
          "719: int test_mont(BIO *bp, BN_CTX *ctx)",
          "",
          "[Removed Lines]",
          "679:  BIGNUM a,c,d,e;",
          "680:  int i;",
          "682:  BN_init(&a);",
          "683:  BN_init(&c);",
          "684:  BN_init(&d);",
          "685:  BN_init(&e);",
          "689:   BN_bntest_rand(&a,40+i*10,0,0);",
          "690:   a.neg=rand_neg();",
          "691:   BN_sqr(&c,&a,ctx);",
          "696:     BN_print(bp,&a);",
          "698:     BN_print(bp,&a);",
          "701:    BN_print(bp,&c);",
          "704:   BN_div(&d,&e,&c,&a,ctx);",
          "705:   BN_sub(&d,&d,&a);",
          "706:   if(!BN_is_zero(&d) || !BN_is_zero(&e))",
          "707:       {",
          "708:       fprintf(stderr,\"Square test failed!\\n\");",
          "709:       return 0;",
          "710:       }",
          "712:  BN_free(&a);",
          "713:  BN_free(&c);",
          "714:  BN_free(&d);",
          "715:  BN_free(&e);",
          "716:  return(1);",
          "",
          "[Added Lines]",
          "679:  BIGNUM *a,*c,*d,*e;",
          "680:  int i, ret = 0;",
          "682:  a = BN_new();",
          "683:  c = BN_new();",
          "684:  d = BN_new();",
          "685:  e = BN_new();",
          "686:  if (a == NULL || c == NULL || d == NULL || e == NULL)",
          "687:   {",
          "688:   goto err;",
          "689:   }",
          "693:   BN_bntest_rand(a,40+i*10,0,0);",
          "694:   a->neg=rand_neg();",
          "695:   BN_sqr(c,a,ctx);",
          "700:     BN_print(bp,a);",
          "702:     BN_print(bp,a);",
          "705:    BN_print(bp,c);",
          "708:   BN_div(d,e,c,a,ctx);",
          "709:   BN_sub(d,d,a);",
          "710:   if(!BN_is_zero(d) || !BN_is_zero(e))",
          "711:    {",
          "712:    fprintf(stderr,\"Square test failed!\\n\");",
          "713:    goto err;",
          "714:    }",
          "718:  BN_hex2bn(&a,",
          "719:   \"80000000000000008000000000000001FFFFFFFFFFFFFFFE0000000000000000\");",
          "720:  BN_sqr(c, a, ctx);",
          "721:  if (bp != NULL)",
          "722:   {",
          "723:   if (!results)",
          "724:    {",
          "725:    BN_print(bp,a);",
          "726:    BIO_puts(bp,\" * \");",
          "727:    BN_print(bp,a);",
          "728:    BIO_puts(bp,\" - \");",
          "729:    }",
          "730:   BN_print(bp,c);",
          "731:   BIO_puts(bp,\"\\n\");",
          "732:   }",
          "733:  BN_mul(d, a, a, ctx);",
          "734:  if (BN_cmp(c, d))",
          "735:   {",
          "736:   fprintf(stderr, \"Square test failed: BN_sqr and BN_mul produce \"",
          "737:    \"different results!\\n\");",
          "738:   goto err;",
          "739:   }",
          "742:  BN_hex2bn(&a,",
          "743:   \"80000000000000000000000080000001FFFFFFFE000000000000000000000000\");",
          "744:  BN_sqr(c, a, ctx);",
          "745:  if (bp != NULL)",
          "746:   {",
          "747:   if (!results)",
          "748:    {",
          "749:    BN_print(bp,a);",
          "750:    BIO_puts(bp,\" * \");",
          "751:    BN_print(bp,a);",
          "752:    BIO_puts(bp,\" - \");",
          "753:    }",
          "754:   BN_print(bp,c);",
          "755:   BIO_puts(bp,\"\\n\");",
          "756:   }",
          "757:  BN_mul(d, a, a, ctx);",
          "758:  if (BN_cmp(c, d))",
          "759:   {",
          "760:   fprintf(stderr, \"Square test failed: BN_sqr and BN_mul produce \"",
          "761:    \"different results!\\n\");",
          "762:   goto err;",
          "763:   }",
          "764:  ret = 1;",
          "765: err:",
          "766:  if (a != NULL) BN_free(a);",
          "767:  if (c != NULL) BN_free(c);",
          "768:  if (d != NULL) BN_free(d);",
          "769:  if (e != NULL) BN_free(e);",
          "770:  return ret;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e078642ddea29bbb6ba29788a6a513796387fbbb",
      "candidate_info": {
        "commit_hash": "e078642ddea29bbb6ba29788a6a513796387fbbb",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e078642ddea29bbb6ba29788a6a513796387fbbb",
        "files": [
          "crypto/bn/asm/mips.pl",
          "crypto/bn/asm/mips3.s",
          "crypto/bn/asm/x86_64-gcc.c",
          "crypto/bn/bn_asm.c",
          "crypto/bn/bntest.c"
        ],
        "message": "Fix for CVE-2014-3570.\n\nReviewed-by: Emilia Kasper <emilia@openssl.org>\n(cherry picked from commit e793809ba50c1e90ab592fb640a856168e50f3de)\n(with 1.0.1-specific addendum)",
        "before_after_code_files": [
          "crypto/bn/asm/mips.pl||crypto/bn/asm/mips.pl",
          "crypto/bn/asm/mips3.s||crypto/bn/asm/mips3.s",
          "crypto/bn/asm/x86_64-gcc.c||crypto/bn/asm/x86_64-gcc.c",
          "crypto/bn/bn_asm.c||crypto/bn/bn_asm.c",
          "crypto/bn/bntest.c||crypto/bn/bntest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "crypto/bn/asm/mips.pl||crypto/bn/asm/mips.pl",
            "crypto/bn/asm/x86_64-gcc.c||crypto/bn/asm/x86_64-gcc.c",
            "crypto/bn/bn_asm.c||crypto/bn/bn_asm.c",
            "crypto/bn/bntest.c||crypto/bn/bntest.c"
          ],
          "candidate": [
            "crypto/bn/asm/mips.pl||crypto/bn/asm/mips.pl",
            "crypto/bn/asm/x86_64-gcc.c||crypto/bn/asm/x86_64-gcc.c",
            "crypto/bn/bn_asm.c||crypto/bn/bn_asm.c",
            "crypto/bn/bntest.c||crypto/bn/bntest.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/bn/asm/mips.pl||crypto/bn/asm/mips.pl": [
          "File: crypto/bn/asm/mips.pl -> crypto/bn/asm/mips.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "1873: ($a_4,$a_5,$a_6,$a_7)=($b_0,$b_1,$b_2,$b_3);",
          "1875: $code.=<<___;",
          "1877: .align 5",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1875: sub add_c2 () {",
          "1876: my ($hi,$lo,$c0,$c1,$c2,",
          "1877:     $warm,      # !$warm denotes first call with specific sequence of",
          "1878:                 # $c_[XYZ] when there is no Z-carry to accumulate yet;",
          "1879:     $an,$bn     # these two are arguments for multiplication which",
          "1880:                 # result is used in *next* step [which is why it's",
          "1881:                 # commented as \"forward multiplication\" below];",
          "1882:     )=@_;",
          "1883: $code.=<<___;",
          "1884:  mflo $lo",
          "1885:  mfhi $hi",
          "1886:  $ADDU $c0,$lo",
          "1887:  sltu $at,$c0,$lo",
          "1888:   $MULTU $an,$bn   # forward multiplication",
          "1889:  $ADDU $c0,$lo",
          "1890:  $ADDU $at,$hi",
          "1891:  sltu $lo,$c0,$lo",
          "1892:  $ADDU $c1,$at",
          "1893:  $ADDU $hi,$lo",
          "1894: ___",
          "1895: $code.=<<___ if (!$warm);",
          "1896:  sltu $c2,$c1,$at",
          "1897:  $ADDU $c1,$hi",
          "1898:  sltu $hi,$c1,$hi",
          "1899:  $ADDU $c2,$hi",
          "1900: ___",
          "1901: $code.=<<___ if ($warm);",
          "1902:  sltu $at,$c1,$at",
          "1903:  $ADDU $c1,$hi",
          "1904:  $ADDU $c2,$at",
          "1905:  sltu $hi,$c1,$hi",
          "1906:  $ADDU $c2,$hi",
          "1907: ___",
          "1908: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1920:  sltu $at,$c_2,$t_1",
          "1921:  $ADDU $c_3,$t_2,$at",
          "1922:  $ST $c_2,$BNSZ($a0)",
          "1938:  mflo $t_1",
          "1939:  mfhi $t_2",
          "1940:  $ADDU $c_3,$t_1",
          "",
          "[Removed Lines]",
          "1924:  mflo $t_1",
          "1925:  mfhi $t_2",
          "1926:  slt $c_2,$t_2,$zero",
          "1927:  $SLL $t_2,1",
          "1928:  $MULTU $a_1,$a_1  # mul_add_c(a[1],b[1],c3,c1,c2);",
          "1929:  slt $a2,$t_1,$zero",
          "1930:  $ADDU $t_2,$a2",
          "1931:  $SLL $t_1,1",
          "1932:  $ADDU $c_3,$t_1",
          "1933:  sltu $at,$c_3,$t_1",
          "1934:  $ADDU $t_2,$at",
          "1935:  $ADDU $c_1,$t_2",
          "1936:  sltu $at,$c_1,$t_2",
          "1937:  $ADDU $c_2,$at",
          "",
          "[Added Lines]",
          "1958: ___",
          "1959:  &add_c2($t_2,$t_1,$c_3,$c_1,$c_2,0,",
          "1960:   $a_1,$a_1);  # mul_add_c(a[1],b[1],c3,c1,c2);",
          "1961: $code.=<<___;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1945:  sltu $at,$c_1,$t_2",
          "1946:  $ADDU $c_2,$at",
          "1947:  $ST $c_3,2*$BNSZ($a0)",
          "1978:  $ST $c_1,3*$BNSZ($a0)",
          "2009:  mflo $t_1",
          "2010:  mfhi $t_2",
          "2011:  $ADDU $c_2,$t_1",
          "",
          "[Removed Lines]",
          "1949:  mflo $t_1",
          "1950:  mfhi $t_2",
          "1951:  slt $c_3,$t_2,$zero",
          "1952:  $SLL $t_2,1",
          "1953:  $MULTU $a_1,$a_2  # mul_add_c2(a[1],b[2],c1,c2,c3);",
          "1954:  slt $a2,$t_1,$zero",
          "1955:  $ADDU $t_2,$a2",
          "1956:  $SLL $t_1,1",
          "1957:  $ADDU $c_1,$t_1",
          "1958:  sltu $at,$c_1,$t_1",
          "1959:  $ADDU $t_2,$at",
          "1960:  $ADDU $c_2,$t_2",
          "1961:  sltu $at,$c_2,$t_2",
          "1962:  $ADDU $c_3,$at",
          "1963:  mflo $t_1",
          "1964:  mfhi $t_2",
          "1965:  slt $at,$t_2,$zero",
          "1966:  $ADDU $c_3,$at",
          "1967:   $MULTU $a_4,$a_0  # mul_add_c2(a[4],b[0],c2,c3,c1);",
          "1968:  $SLL $t_2,1",
          "1969:  slt $a2,$t_1,$zero",
          "1970:  $ADDU $t_2,$a2",
          "1971:  $SLL $t_1,1",
          "1972:  $ADDU $c_1,$t_1",
          "1973:  sltu $at,$c_1,$t_1",
          "1974:  $ADDU $t_2,$at",
          "1975:  $ADDU $c_2,$t_2",
          "1976:  sltu $at,$c_2,$t_2",
          "1977:  $ADDU $c_3,$at",
          "1980:  mflo $t_1",
          "1981:  mfhi $t_2",
          "1982:  slt $c_1,$t_2,$zero",
          "1983:  $SLL $t_2,1",
          "1984:  $MULTU $a_3,$a_1  # mul_add_c2(a[3],b[1],c2,c3,c1);",
          "1985:  slt $a2,$t_1,$zero",
          "1986:  $ADDU $t_2,$a2",
          "1987:  $SLL $t_1,1",
          "1988:  $ADDU $c_2,$t_1",
          "1989:  sltu $at,$c_2,$t_1",
          "1990:  $ADDU $t_2,$at",
          "1991:  $ADDU $c_3,$t_2",
          "1992:  sltu $at,$c_3,$t_2",
          "1993:  $ADDU $c_1,$at",
          "1994:  mflo $t_1",
          "1995:  mfhi $t_2",
          "1996:  slt $at,$t_2,$zero",
          "1997:  $ADDU $c_1,$at",
          "1998:  $MULTU $a_2,$a_2  # mul_add_c(a[2],b[2],c2,c3,c1);",
          "1999:  $SLL $t_2,1",
          "2000:  slt $a2,$t_1,$zero",
          "2001:  $ADDU $t_2,$a2",
          "2002:  $SLL $t_1,1",
          "2003:  $ADDU $c_2,$t_1",
          "2004:  sltu $at,$c_2,$t_1",
          "2005:  $ADDU $t_2,$at",
          "2006:  $ADDU $c_3,$t_2",
          "2007:  sltu $at,$c_3,$t_2",
          "2008:  $ADDU $c_1,$at",
          "",
          "[Added Lines]",
          "1972: ___",
          "1973:  &add_c2($t_2,$t_1,$c_1,$c_2,$c_3,0,",
          "1974:   $a_1,$a_2);  # mul_add_c2(a[1],b[2],c1,c2,c3);",
          "1975:  &add_c2($t_2,$t_1,$c_1,$c_2,$c_3,1,",
          "1976:   $a_4,$a_0);  # mul_add_c2(a[4],b[0],c2,c3,c1);",
          "1977: $code.=<<___;",
          "1979: ___",
          "1980:  &add_c2($t_2,$t_1,$c_2,$c_3,$c_1,0,",
          "1981:   $a_3,$a_1);  # mul_add_c2(a[3],b[1],c2,c3,c1);",
          "1982:  &add_c2($t_2,$t_1,$c_2,$c_3,$c_1,1,",
          "1983:   $a_2,$a_2);  # mul_add_c(a[2],b[2],c2,c3,c1);",
          "1984: $code.=<<___;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2016:  sltu $at,$c_3,$t_2",
          "2017:  $ADDU $c_1,$at",
          "2018:  $ST $c_2,4*$BNSZ($a0)",
          "2064:  $ST $c_3,5*$BNSZ($a0)",
          "2110:  mflo $t_1",
          "2111:  mfhi $t_2",
          "2112:  $ADDU $c_1,$t_1",
          "",
          "[Removed Lines]",
          "2020:  mflo $t_1",
          "2021:  mfhi $t_2",
          "2022:  slt $c_2,$t_2,$zero",
          "2023:  $SLL $t_2,1",
          "2024:  $MULTU $a_1,$a_4  # mul_add_c2(a[1],b[4],c3,c1,c2);",
          "2025:  slt $a2,$t_1,$zero",
          "2026:  $ADDU $t_2,$a2",
          "2027:  $SLL $t_1,1",
          "2028:  $ADDU $c_3,$t_1",
          "2029:  sltu $at,$c_3,$t_1",
          "2030:  $ADDU $t_2,$at",
          "2031:  $ADDU $c_1,$t_2",
          "2032:  sltu $at,$c_1,$t_2",
          "2033:  $ADDU $c_2,$at",
          "2034:  mflo $t_1",
          "2035:  mfhi $t_2",
          "2036:  slt $at,$t_2,$zero",
          "2037:  $ADDU $c_2,$at",
          "2038:  $MULTU $a_2,$a_3  # mul_add_c2(a[2],b[3],c3,c1,c2);",
          "2039:  $SLL $t_2,1",
          "2040:  slt $a2,$t_1,$zero",
          "2041:  $ADDU $t_2,$a2",
          "2042:  $SLL $t_1,1",
          "2043:  $ADDU $c_3,$t_1",
          "2044:  sltu $at,$c_3,$t_1",
          "2045:  $ADDU $t_2,$at",
          "2046:  $ADDU $c_1,$t_2",
          "2047:  sltu $at,$c_1,$t_2",
          "2048:  $ADDU $c_2,$at",
          "2049:  mflo $t_1",
          "2050:  mfhi $t_2",
          "2051:  slt $at,$t_2,$zero",
          "2052:   $MULTU $a_6,$a_0  # mul_add_c2(a[6],b[0],c1,c2,c3);",
          "2053:  $ADDU $c_2,$at",
          "2054:  $SLL $t_2,1",
          "2055:  slt $a2,$t_1,$zero",
          "2056:  $ADDU $t_2,$a2",
          "2057:  $SLL $t_1,1",
          "2058:  $ADDU $c_3,$t_1",
          "2059:  sltu $at,$c_3,$t_1",
          "2060:  $ADDU $t_2,$at",
          "2061:  $ADDU $c_1,$t_2",
          "2062:  sltu $at,$c_1,$t_2",
          "2063:  $ADDU $c_2,$at",
          "2066:  mflo $t_1",
          "2067:  mfhi $t_2",
          "2068:  slt $c_3,$t_2,$zero",
          "2069:  $SLL $t_2,1",
          "2070:  $MULTU $a_5,$a_1  # mul_add_c2(a[5],b[1],c1,c2,c3);",
          "2071:  slt $a2,$t_1,$zero",
          "2072:  $ADDU $t_2,$a2",
          "2073:  $SLL $t_1,1",
          "2074:  $ADDU $c_1,$t_1",
          "2075:  sltu $at,$c_1,$t_1",
          "2076:  $ADDU $t_2,$at",
          "2077:  $ADDU $c_2,$t_2",
          "2078:  sltu $at,$c_2,$t_2",
          "2079:  $ADDU $c_3,$at",
          "2080:  mflo $t_1",
          "2081:  mfhi $t_2",
          "2082:  slt $at,$t_2,$zero",
          "2083:  $ADDU $c_3,$at",
          "2084:  $MULTU $a_4,$a_2  # mul_add_c2(a[4],b[2],c1,c2,c3);",
          "2085:  $SLL $t_2,1",
          "2086:  slt $a2,$t_1,$zero",
          "2087:  $ADDU $t_2,$a2",
          "2088:  $SLL $t_1,1",
          "2089:  $ADDU $c_1,$t_1",
          "2090:  sltu $at,$c_1,$t_1",
          "2091:  $ADDU $t_2,$at",
          "2092:  $ADDU $c_2,$t_2",
          "2093:  sltu $at,$c_2,$t_2",
          "2094:  $ADDU $c_3,$at",
          "2095:  mflo $t_1",
          "2096:  mfhi $t_2",
          "2097:  slt $at,$t_2,$zero",
          "2098:  $ADDU $c_3,$at",
          "2099:  $MULTU $a_3,$a_3  # mul_add_c(a[3],b[3],c1,c2,c3);",
          "2100:  $SLL $t_2,1",
          "2101:  slt $a2,$t_1,$zero",
          "2102:  $ADDU $t_2,$a2",
          "2103:  $SLL $t_1,1",
          "2104:  $ADDU $c_1,$t_1",
          "2105:  sltu $at,$c_1,$t_1",
          "2106:  $ADDU $t_2,$at",
          "2107:  $ADDU $c_2,$t_2",
          "2108:  sltu $at,$c_2,$t_2",
          "2109:  $ADDU $c_3,$at",
          "",
          "[Added Lines]",
          "1995: ___",
          "1996:  &add_c2($t_2,$t_1,$c_3,$c_1,$c_2,0,",
          "1997:   $a_1,$a_4);  # mul_add_c2(a[1],b[4],c3,c1,c2);",
          "1998:  &add_c2($t_2,$t_1,$c_3,$c_1,$c_2,1,",
          "1999:   $a_2,$a_3);  # mul_add_c2(a[2],b[3],c3,c1,c2);",
          "2000:  &add_c2($t_2,$t_1,$c_3,$c_1,$c_2,1,",
          "2001:   $a_6,$a_0);  # mul_add_c2(a[6],b[0],c1,c2,c3);",
          "2002: $code.=<<___;",
          "2004: ___",
          "2005:  &add_c2($t_2,$t_1,$c_1,$c_2,$c_3,0,",
          "2006:   $a_5,$a_1);  # mul_add_c2(a[5],b[1],c1,c2,c3);",
          "2007:  &add_c2($t_2,$t_1,$c_1,$c_2,$c_3,1,",
          "2008:   $a_4,$a_2);  # mul_add_c2(a[4],b[2],c1,c2,c3);",
          "2009:  &add_c2($t_2,$t_1,$c_1,$c_2,$c_3,1,",
          "2010:   $a_3,$a_3);  # mul_add_c(a[3],b[3],c1,c2,c3);",
          "2011: $code.=<<___;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2117:  sltu $at,$c_2,$t_2",
          "2118:  $ADDU $c_3,$at",
          "2119:  $ST $c_1,6*$BNSZ($a0)",
          "2180:  $ST $c_2,7*$BNSZ($a0)",
          "2226:  mflo $t_1",
          "2227:  mfhi $t_2",
          "2228:  $ADDU $c_3,$t_1",
          "",
          "[Removed Lines]",
          "2121:  mflo $t_1",
          "2122:  mfhi $t_2",
          "2123:  slt $c_1,$t_2,$zero",
          "2124:  $SLL $t_2,1",
          "2125:  $MULTU $a_1,$a_6  # mul_add_c2(a[1],b[6],c2,c3,c1);",
          "2126:  slt $a2,$t_1,$zero",
          "2127:  $ADDU $t_2,$a2",
          "2128:  $SLL $t_1,1",
          "2129:  $ADDU $c_2,$t_1",
          "2130:  sltu $at,$c_2,$t_1",
          "2131:  $ADDU $t_2,$at",
          "2132:  $ADDU $c_3,$t_2",
          "2133:  sltu $at,$c_3,$t_2",
          "2134:  $ADDU $c_1,$at",
          "2135:  mflo $t_1",
          "2136:  mfhi $t_2",
          "2137:  slt $at,$t_2,$zero",
          "2138:  $ADDU $c_1,$at",
          "2139:  $MULTU $a_2,$a_5  # mul_add_c2(a[2],b[5],c2,c3,c1);",
          "2140:  $SLL $t_2,1",
          "2141:  slt $a2,$t_1,$zero",
          "2142:  $ADDU $t_2,$a2",
          "2143:  $SLL $t_1,1",
          "2144:  $ADDU $c_2,$t_1",
          "2145:  sltu $at,$c_2,$t_1",
          "2146:  $ADDU $t_2,$at",
          "2147:  $ADDU $c_3,$t_2",
          "2148:  sltu $at,$c_3,$t_2",
          "2149:  $ADDU $c_1,$at",
          "2150:  mflo $t_1",
          "2151:  mfhi $t_2",
          "2152:  slt $at,$t_2,$zero",
          "2153:  $ADDU $c_1,$at",
          "2154:  $MULTU $a_3,$a_4  # mul_add_c2(a[3],b[4],c2,c3,c1);",
          "2155:  $SLL $t_2,1",
          "2156:  slt $a2,$t_1,$zero",
          "2157:  $ADDU $t_2,$a2",
          "2158:  $SLL $t_1,1",
          "2159:  $ADDU $c_2,$t_1",
          "2160:  sltu $at,$c_2,$t_1",
          "2161:  $ADDU $t_2,$at",
          "2162:  $ADDU $c_3,$t_2",
          "2163:  sltu $at,$c_3,$t_2",
          "2164:  $ADDU $c_1,$at",
          "2165:  mflo $t_1",
          "2166:  mfhi $t_2",
          "2167:  slt $at,$t_2,$zero",
          "2168:  $ADDU $c_1,$at",
          "2169:   $MULTU $a_7,$a_1  # mul_add_c2(a[7],b[1],c3,c1,c2);",
          "2170:  $SLL $t_2,1",
          "2171:  slt $a2,$t_1,$zero",
          "2172:  $ADDU $t_2,$a2",
          "2173:  $SLL $t_1,1",
          "2174:  $ADDU $c_2,$t_1",
          "2175:  sltu $at,$c_2,$t_1",
          "2176:  $ADDU $t_2,$at",
          "2177:  $ADDU $c_3,$t_2",
          "2178:  sltu $at,$c_3,$t_2",
          "2179:  $ADDU $c_1,$at",
          "2182:  mflo $t_1",
          "2183:  mfhi $t_2",
          "2184:  slt $c_2,$t_2,$zero",
          "2185:  $SLL $t_2,1",
          "2186:  $MULTU $a_6,$a_2  # mul_add_c2(a[6],b[2],c3,c1,c2);",
          "2187:  slt $a2,$t_1,$zero",
          "2188:  $ADDU $t_2,$a2",
          "2189:  $SLL $t_1,1",
          "2190:  $ADDU $c_3,$t_1",
          "2191:  sltu $at,$c_3,$t_1",
          "2192:  $ADDU $t_2,$at",
          "2193:  $ADDU $c_1,$t_2",
          "2194:  sltu $at,$c_1,$t_2",
          "2195:  $ADDU $c_2,$at",
          "2196:  mflo $t_1",
          "2197:  mfhi $t_2",
          "2198:  slt $at,$t_2,$zero",
          "2199:  $ADDU $c_2,$at",
          "2200:  $MULTU $a_5,$a_3  # mul_add_c2(a[5],b[3],c3,c1,c2);",
          "2201:  $SLL $t_2,1",
          "2202:  slt $a2,$t_1,$zero",
          "2203:  $ADDU $t_2,$a2",
          "2204:  $SLL $t_1,1",
          "2205:  $ADDU $c_3,$t_1",
          "2206:  sltu $at,$c_3,$t_1",
          "2207:  $ADDU $t_2,$at",
          "2208:  $ADDU $c_1,$t_2",
          "2209:  sltu $at,$c_1,$t_2",
          "2210:  $ADDU $c_2,$at",
          "2211:  mflo $t_1",
          "2212:  mfhi $t_2",
          "2213:  slt $at,$t_2,$zero",
          "2214:  $ADDU $c_2,$at",
          "2215:  $MULTU $a_4,$a_4  # mul_add_c(a[4],b[4],c3,c1,c2);",
          "2216:  $SLL $t_2,1",
          "2217:  slt $a2,$t_1,$zero",
          "2218:  $ADDU $t_2,$a2",
          "2219:  $SLL $t_1,1",
          "2220:  $ADDU $c_3,$t_1",
          "2221:  sltu $at,$c_3,$t_1",
          "2222:  $ADDU $t_2,$at",
          "2223:  $ADDU $c_1,$t_2",
          "2224:  sltu $at,$c_1,$t_2",
          "2225:  $ADDU $c_2,$at",
          "",
          "[Added Lines]",
          "2022: ___",
          "2023:  &add_c2($t_2,$t_1,$c_2,$c_3,$c_1,0,",
          "2024:   $a_1,$a_6);  # mul_add_c2(a[1],b[6],c2,c3,c1);",
          "2025:  &add_c2($t_2,$t_1,$c_2,$c_3,$c_1,1,",
          "2026:   $a_2,$a_5);  # mul_add_c2(a[2],b[5],c2,c3,c1);",
          "2027:  &add_c2($t_2,$t_1,$c_2,$c_3,$c_1,1,",
          "2028:   $a_3,$a_4);  # mul_add_c2(a[3],b[4],c2,c3,c1);",
          "2029:  &add_c2($t_2,$t_1,$c_2,$c_3,$c_1,1,",
          "2030:   $a_7,$a_1);  # mul_add_c2(a[7],b[1],c3,c1,c2);",
          "2031: $code.=<<___;",
          "2033: ___",
          "2034:  &add_c2($t_2,$t_1,$c_3,$c_1,$c_2,0,",
          "2035:   $a_6,$a_2);  # mul_add_c2(a[6],b[2],c3,c1,c2);",
          "2036:  &add_c2($t_2,$t_1,$c_3,$c_1,$c_2,1,",
          "2037:   $a_5,$a_3);  # mul_add_c2(a[5],b[3],c3,c1,c2);",
          "2038:  &add_c2($t_2,$t_1,$c_3,$c_1,$c_2,1,",
          "2039:   $a_4,$a_4);  # mul_add_c(a[4],b[4],c3,c1,c2);",
          "2040: $code.=<<___;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2233:  sltu $at,$c_1,$t_2",
          "2234:  $ADDU $c_2,$at",
          "2235:  $ST $c_3,8*$BNSZ($a0)",
          "2281:  $ST $c_1,9*$BNSZ($a0)",
          "2312:  mflo $t_1",
          "2313:  mfhi $t_2",
          "2314:  $ADDU $c_2,$t_1",
          "",
          "[Removed Lines]",
          "2237:  mflo $t_1",
          "2238:  mfhi $t_2",
          "2239:  slt $c_3,$t_2,$zero",
          "2240:  $SLL $t_2,1",
          "2241:  $MULTU $a_3,$a_6  # mul_add_c2(a[3],b[6],c1,c2,c3);",
          "2242:  slt $a2,$t_1,$zero",
          "2243:  $ADDU $t_2,$a2",
          "2244:  $SLL $t_1,1",
          "2245:  $ADDU $c_1,$t_1",
          "2246:  sltu $at,$c_1,$t_1",
          "2247:  $ADDU $t_2,$at",
          "2248:  $ADDU $c_2,$t_2",
          "2249:  sltu $at,$c_2,$t_2",
          "2250:  $ADDU $c_3,$at",
          "2251:  mflo $t_1",
          "2252:  mfhi $t_2",
          "2253:  slt $at,$t_2,$zero",
          "2254:  $ADDU $c_3,$at",
          "2255:  $MULTU $a_4,$a_5  # mul_add_c2(a[4],b[5],c1,c2,c3);",
          "2256:  $SLL $t_2,1",
          "2257:  slt $a2,$t_1,$zero",
          "2258:  $ADDU $t_2,$a2",
          "2259:  $SLL $t_1,1",
          "2260:  $ADDU $c_1,$t_1",
          "2261:  sltu $at,$c_1,$t_1",
          "2262:  $ADDU $t_2,$at",
          "2263:  $ADDU $c_2,$t_2",
          "2264:  sltu $at,$c_2,$t_2",
          "2265:  $ADDU $c_3,$at",
          "2266:  mflo $t_1",
          "2267:  mfhi $t_2",
          "2268:  slt $at,$t_2,$zero",
          "2269:  $ADDU $c_3,$at",
          "2270:   $MULTU $a_7,$a_3  # mul_add_c2(a[7],b[3],c2,c3,c1);",
          "2271:  $SLL $t_2,1",
          "2272:  slt $a2,$t_1,$zero",
          "2273:  $ADDU $t_2,$a2",
          "2274:  $SLL $t_1,1",
          "2275:  $ADDU $c_1,$t_1",
          "2276:  sltu $at,$c_1,$t_1",
          "2277:  $ADDU $t_2,$at",
          "2278:  $ADDU $c_2,$t_2",
          "2279:  sltu $at,$c_2,$t_2",
          "2280:  $ADDU $c_3,$at",
          "2283:  mflo $t_1",
          "2284:  mfhi $t_2",
          "2285:  slt $c_1,$t_2,$zero",
          "2286:  $SLL $t_2,1",
          "2287:  $MULTU $a_6,$a_4  # mul_add_c2(a[6],b[4],c2,c3,c1);",
          "2288:  slt $a2,$t_1,$zero",
          "2289:  $ADDU $t_2,$a2",
          "2290:  $SLL $t_1,1",
          "2291:  $ADDU $c_2,$t_1",
          "2292:  sltu $at,$c_2,$t_1",
          "2293:  $ADDU $t_2,$at",
          "2294:  $ADDU $c_3,$t_2",
          "2295:  sltu $at,$c_3,$t_2",
          "2296:  $ADDU $c_1,$at",
          "2297:  mflo $t_1",
          "2298:  mfhi $t_2",
          "2299:  slt $at,$t_2,$zero",
          "2300:  $ADDU $c_1,$at",
          "2301:  $MULTU $a_5,$a_5  # mul_add_c(a[5],b[5],c2,c3,c1);",
          "2302:  $SLL $t_2,1",
          "2303:  slt $a2,$t_1,$zero",
          "2304:  $ADDU $t_2,$a2",
          "2305:  $SLL $t_1,1",
          "2306:  $ADDU $c_2,$t_1",
          "2307:  sltu $at,$c_2,$t_1",
          "2308:  $ADDU $t_2,$at",
          "2309:  $ADDU $c_3,$t_2",
          "2310:  sltu $at,$c_3,$t_2",
          "2311:  $ADDU $c_1,$at",
          "",
          "[Added Lines]",
          "2051: ___",
          "2052:  &add_c2($t_2,$t_1,$c_1,$c_2,$c_3,0,",
          "2053:   $a_3,$a_6);  # mul_add_c2(a[3],b[6],c1,c2,c3);",
          "2054:  &add_c2($t_2,$t_1,$c_1,$c_2,$c_3,1,",
          "2055:   $a_4,$a_5);  # mul_add_c2(a[4],b[5],c1,c2,c3);",
          "2056:  &add_c2($t_2,$t_1,$c_1,$c_2,$c_3,1,",
          "2057:   $a_7,$a_3);  # mul_add_c2(a[7],b[3],c2,c3,c1);",
          "2058: $code.=<<___;",
          "2060: ___",
          "2061:  &add_c2($t_2,$t_1,$c_2,$c_3,$c_1,0,",
          "2062:   $a_6,$a_4);  # mul_add_c2(a[6],b[4],c2,c3,c1);",
          "2063:  &add_c2($t_2,$t_1,$c_2,$c_3,$c_1,1,",
          "2064:   $a_5,$a_5);  # mul_add_c(a[5],b[5],c2,c3,c1);",
          "2065: $code.=<<___;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2319:  sltu $at,$c_3,$t_2",
          "2320:  $ADDU $c_1,$at",
          "2321:  $ST $c_2,10*$BNSZ($a0)",
          "2352:  $ST $c_3,11*$BNSZ($a0)",
          "2368:  mflo $t_1",
          "2369:  mfhi $t_2",
          "2370:  $ADDU $c_1,$t_1",
          "",
          "[Removed Lines]",
          "2323:  mflo $t_1",
          "2324:  mfhi $t_2",
          "2325:  slt $c_2,$t_2,$zero",
          "2326:  $SLL $t_2,1",
          "2327:  $MULTU $a_5,$a_6  # mul_add_c2(a[5],b[6],c3,c1,c2);",
          "2328:  slt $a2,$t_1,$zero",
          "2329:  $ADDU $t_2,$a2",
          "2330:  $SLL $t_1,1",
          "2331:  $ADDU $c_3,$t_1",
          "2332:  sltu $at,$c_3,$t_1",
          "2333:  $ADDU $t_2,$at",
          "2334:  $ADDU $c_1,$t_2",
          "2335:  sltu $at,$c_1,$t_2",
          "2336:  $ADDU $c_2,$at",
          "2337:  mflo $t_1",
          "2338:  mfhi $t_2",
          "2339:  slt $at,$t_2,$zero",
          "2340:  $ADDU $c_2,$at",
          "2341:   $MULTU $a_7,$a_5  # mul_add_c2(a[7],b[5],c1,c2,c3);",
          "2342:  $SLL $t_2,1",
          "2343:  slt $a2,$t_1,$zero",
          "2344:  $ADDU $t_2,$a2",
          "2345:  $SLL $t_1,1",
          "2346:  $ADDU $c_3,$t_1",
          "2347:  sltu $at,$c_3,$t_1",
          "2348:  $ADDU $t_2,$at",
          "2349:  $ADDU $c_1,$t_2",
          "2350:  sltu $at,$c_1,$t_2",
          "2351:  $ADDU $c_2,$at",
          "2354:  mflo $t_1",
          "2355:  mfhi $t_2",
          "2356:  slt $c_3,$t_2,$zero",
          "2357:  $SLL $t_2,1",
          "2358:  $MULTU $a_6,$a_6  # mul_add_c(a[6],b[6],c1,c2,c3);",
          "2359:  slt $a2,$t_1,$zero",
          "2360:  $ADDU $t_2,$a2",
          "2361:  $SLL $t_1,1",
          "2362:  $ADDU $c_1,$t_1",
          "2363:  sltu $at,$c_1,$t_1",
          "2364:  $ADDU $t_2,$at",
          "2365:  $ADDU $c_2,$t_2",
          "2366:  sltu $at,$c_2,$t_2",
          "2367:  $ADDU $c_3,$at",
          "",
          "[Added Lines]",
          "2076: ___",
          "2077:  &add_c2($t_2,$t_1,$c_3,$c_1,$c_2,0,",
          "2078:   $a_5,$a_6);  # mul_add_c2(a[5],b[6],c3,c1,c2);",
          "2079:  &add_c2($t_2,$t_1,$c_3,$c_1,$c_2,1,",
          "2080:   $a_7,$a_5);  # mul_add_c2(a[7],b[5],c1,c2,c3);",
          "2081: $code.=<<___;",
          "2083: ___",
          "2084:  &add_c2($t_2,$t_1,$c_1,$c_2,$c_3,0,",
          "2085:   $a_6,$a_6);  # mul_add_c(a[6],b[6],c1,c2,c3);",
          "2086: $code.=<<___;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2375:  sltu $at,$c_2,$t_2",
          "2376:  $ADDU $c_3,$at",
          "2377:  $ST $c_1,12*$BNSZ($a0)",
          "2393:  $ST $c_2,13*$BNSZ($a0)",
          "2395:  mflo $t_1",
          "",
          "[Removed Lines]",
          "2379:  mflo $t_1",
          "2380:  mfhi $t_2",
          "2381:  slt $c_1,$t_2,$zero",
          "2382:  $SLL $t_2,1",
          "2383:   $MULTU $a_7,$a_7  # mul_add_c(a[7],b[7],c3,c1,c2);",
          "2384:  slt $a2,$t_1,$zero",
          "2385:  $ADDU $t_2,$a2",
          "2386:  $SLL $t_1,1",
          "2387:  $ADDU $c_2,$t_1",
          "2388:  sltu $at,$c_2,$t_1",
          "2389:  $ADDU $t_2,$at",
          "2390:  $ADDU $c_3,$t_2",
          "2391:  sltu $at,$c_3,$t_2",
          "2392:  $ADDU $c_1,$at",
          "",
          "[Added Lines]",
          "2097: ___",
          "2098:  &add_c2($t_2,$t_1,$c_2,$c_3,$c_1,0,",
          "2099:   $a_7,$a_7);  # mul_add_c(a[7],b[7],c3,c1,c2);",
          "2100: $code.=<<___;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2457:  sltu $at,$c_2,$t_1",
          "2458:  $ADDU $c_3,$t_2,$at",
          "2459:  $ST $c_2,$BNSZ($a0)",
          "2475:  mflo $t_1",
          "2476:  mfhi $t_2",
          "2477:  $ADDU $c_3,$t_1",
          "",
          "[Removed Lines]",
          "2461:  mflo $t_1",
          "2462:  mfhi $t_2",
          "2463:  slt $c_2,$t_2,$zero",
          "2464:  $SLL $t_2,1",
          "2465:  $MULTU $a_1,$a_1  # mul_add_c(a[1],b[1],c3,c1,c2);",
          "2466:  slt $a2,$t_1,$zero",
          "2467:  $ADDU $t_2,$a2",
          "2468:  $SLL $t_1,1",
          "2469:  $ADDU $c_3,$t_1",
          "2470:  sltu $at,$c_3,$t_1",
          "2471:  $ADDU $t_2,$at",
          "2472:  $ADDU $c_1,$t_2",
          "2473:  sltu $at,$c_1,$t_2",
          "2474:  $ADDU $c_2,$at",
          "",
          "[Added Lines]",
          "2168: ___",
          "2169:  &add_c2($t_2,$t_1,$c_3,$c_1,$c_2,0,",
          "2170:   $a_1,$a_1);  # mul_add_c(a[1],b[1],c3,c1,c2);",
          "2171: $code.=<<___;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2482:  sltu $at,$c_1,$t_2",
          "2483:  $ADDU $c_2,$at",
          "2484:  $ST $c_3,2*$BNSZ($a0)",
          "2515:  $ST $c_1,3*$BNSZ($a0)",
          "2531:  mflo $t_1",
          "2532:  mfhi $t_2",
          "2533:  $ADDU $c_2,$t_1",
          "",
          "[Removed Lines]",
          "2486:  mflo $t_1",
          "2487:  mfhi $t_2",
          "2488:  slt $c_3,$t_2,$zero",
          "2489:  $SLL $t_2,1",
          "2490:  $MULTU $a_1,$a_2  # mul_add_c(a2[1],b[2],c1,c2,c3);",
          "2491:  slt $a2,$t_1,$zero",
          "2492:  $ADDU $t_2,$a2",
          "2493:  $SLL $t_1,1",
          "2494:  $ADDU $c_1,$t_1",
          "2495:  sltu $at,$c_1,$t_1",
          "2496:  $ADDU $t_2,$at",
          "2497:  $ADDU $c_2,$t_2",
          "2498:  sltu $at,$c_2,$t_2",
          "2499:  $ADDU $c_3,$at",
          "2500:  mflo $t_1",
          "2501:  mfhi $t_2",
          "2502:  slt $at,$t_2,$zero",
          "2503:  $ADDU $c_3,$at",
          "2504:   $MULTU $a_3,$a_1  # mul_add_c2(a[3],b[1],c2,c3,c1);",
          "2505:  $SLL $t_2,1",
          "2506:  slt $a2,$t_1,$zero",
          "2507:  $ADDU $t_2,$a2",
          "2508:  $SLL $t_1,1",
          "2509:  $ADDU $c_1,$t_1",
          "2510:  sltu $at,$c_1,$t_1",
          "2511:  $ADDU $t_2,$at",
          "2512:  $ADDU $c_2,$t_2",
          "2513:  sltu $at,$c_2,$t_2",
          "2514:  $ADDU $c_3,$at",
          "2517:  mflo $t_1",
          "2518:  mfhi $t_2",
          "2519:  slt $c_1,$t_2,$zero",
          "2520:  $SLL $t_2,1",
          "2521:  $MULTU $a_2,$a_2  # mul_add_c(a[2],b[2],c2,c3,c1);",
          "2522:  slt $a2,$t_1,$zero",
          "2523:  $ADDU $t_2,$a2",
          "2524:  $SLL $t_1,1",
          "2525:  $ADDU $c_2,$t_1",
          "2526:  sltu $at,$c_2,$t_1",
          "2527:  $ADDU $t_2,$at",
          "2528:  $ADDU $c_3,$t_2",
          "2529:  sltu $at,$c_3,$t_2",
          "2530:  $ADDU $c_1,$at",
          "",
          "[Added Lines]",
          "2182: ___",
          "2183:  &add_c2($t_2,$t_1,$c_1,$c_2,$c_3,0,",
          "2184:   $a_1,$a_2);  # mul_add_c2(a2[1],b[2],c1,c2,c3);",
          "2185:  &add_c2($t_2,$t_1,$c_1,$c_2,$c_3,1,",
          "2186:   $a_3,$a_1);  # mul_add_c2(a[3],b[1],c2,c3,c1);",
          "2187: $code.=<<___;",
          "2189: ___",
          "2190:  &add_c2($t_2,$t_1,$c_2,$c_3,$c_1,0,",
          "2191:   $a_2,$a_2);  # mul_add_c(a[2],b[2],c2,c3,c1);",
          "2192: $code.=<<___;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2538:  sltu $at,$c_3,$t_2",
          "2539:  $ADDU $c_1,$at",
          "2540:  $ST $c_2,4*$BNSZ($a0)",
          "2556:  $ST $c_3,5*$BNSZ($a0)",
          "2558:  mflo $t_1",
          "",
          "[Removed Lines]",
          "2542:  mflo $t_1",
          "2543:  mfhi $t_2",
          "2544:  slt $c_2,$t_2,$zero",
          "2545:  $SLL $t_2,1",
          "2546:   $MULTU $a_3,$a_3  # mul_add_c(a[3],b[3],c1,c2,c3);",
          "2547:  slt $a2,$t_1,$zero",
          "2548:  $ADDU $t_2,$a2",
          "2549:  $SLL $t_1,1",
          "2550:  $ADDU $c_3,$t_1",
          "2551:  sltu $at,$c_3,$t_1",
          "2552:  $ADDU $t_2,$at",
          "2553:  $ADDU $c_1,$t_2",
          "2554:  sltu $at,$c_1,$t_2",
          "2555:  $ADDU $c_2,$at",
          "",
          "[Added Lines]",
          "2203: ___",
          "2204:  &add_c2($t_2,$t_1,$c_3,$c_1,$c_2,0,",
          "2205:   $a_3,$a_3);  # mul_add_c(a[3],b[3],c1,c2,c3);",
          "2206: $code.=<<___;",
          "",
          "---------------"
        ],
        "crypto/bn/asm/mips3.s||crypto/bn/asm/mips3.s": [
          "File: crypto/bn/asm/mips3.s -> crypto/bn/asm/mips3.s",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/bn/asm/x86_64-gcc.c||crypto/bn/asm/x86_64-gcc.c": [
          "File: crypto/bn/asm/x86_64-gcc.c -> crypto/bn/asm/x86_64-gcc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "287:  BN_ULONG ta=(a),tb=(b),t0; \\",
          "288:  t1 = BN_UMULT_HIGH(ta,tb); \\",
          "289:  t0 = ta * tb;   \\",
          "293:  c1 += t2; c2 += (c1<t2)?1:0; \\",
          "294:  }",
          "295: #else",
          "296: #define mul_add_c(a,b,c0,c1,c2) do { \\",
          "",
          "[Removed Lines]",
          "290:  t2 = t1+t1; c2 += (t2<t1)?1:0; \\",
          "291:  t1 = t0+t0; t2 += (t1<t0)?1:0; \\",
          "292:  c0 += t1; t2 += (c0<t1)?1:0; \\",
          "",
          "[Added Lines]",
          "294:  c0 += t0; t2 = t1+((c0<t0)?1:0);\\",
          "296:  c0 += t0; t1 += (c0<t0)?1:0; \\",
          "297:  c1 += t1; c2 += (c1<t1)?1:0; \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "328:   : \"=a\"(t1),\"=d\"(t2) \\",
          "329:   : \"a\"(a),\"m\"(b)  \\",
          "330:   : \"cc\");  \\",
          "347:  } while (0)",
          "348: #endif",
          "",
          "[Removed Lines]",
          "331:  asm (\"addq %0,%0; adcq %2,%1\" \\",
          "332:   : \"+d\"(t2),\"+r\"(c2) \\",
          "333:   : \"g\"(0)  \\",
          "334:   : \"cc\");  \\",
          "335:  asm (\"addq %0,%0; adcq %2,%1\" \\",
          "336:   : \"+a\"(t1),\"+d\"(t2) \\",
          "337:   : \"g\"(0)  \\",
          "338:   : \"cc\");  \\",
          "339:  asm (\"addq %2,%0; adcq %3,%1\" \\",
          "340:   : \"+r\"(c0),\"+d\"(t2) \\",
          "341:   : \"a\"(t1),\"g\"(0) \\",
          "342:   : \"cc\");  \\",
          "343:  asm (\"addq %2,%0; adcq %3,%1\" \\",
          "344:   : \"+r\"(c1),\"+r\"(c2) \\",
          "345:   : \"d\"(t2),\"g\"(0) \\",
          "346:   : \"cc\");  \\",
          "",
          "[Added Lines]",
          "335:  asm (\"addq %3,%0; adcq %4,%1; adcq %5,%2\" \\",
          "336:   : \"+r\"(c0),\"+r\"(c1),\"+r\"(c2)  \\",
          "337:   : \"r\"(t1),\"r\"(t2),\"g\"(0)  \\",
          "338:   : \"cc\");    \\",
          "339:  asm (\"addq %3,%0; adcq %4,%1; adcq %5,%2\" \\",
          "340:   : \"+r\"(c0),\"+r\"(c1),\"+r\"(c2)  \\",
          "341:   : \"r\"(t1),\"r\"(t2),\"g\"(0)  \\",
          "342:   : \"cc\");    \\",
          "",
          "---------------"
        ],
        "crypto/bn/bn_asm.c||crypto/bn/bn_asm.c": [
          "File: crypto/bn/bn_asm.c -> crypto/bn/bn_asm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "478: #define mul_add_c2(a,b,c0,c1,c2) { \\",
          "479:  BN_ULONG ta=(a),tb=(b),t0; \\",
          "480:  BN_UMULT_LOHI(t0,t1,ta,tb); \\",
          "484:  c1 += t2; c2 += (c1<t2)?1:0; \\",
          "485:  }",
          "487: #define sqr_add_c(a,i,c0,c1,c2) { \\",
          "",
          "[Removed Lines]",
          "481:  t2 = t1+t1; c2 += (t2<t1)?1:0; \\",
          "482:  t1 = t0+t0; t2 += (t1<t0)?1:0; \\",
          "483:  c0 += t1; t2 += (c0<t1)?1:0; \\",
          "",
          "[Added Lines]",
          "485:  c0 += t0; t2 = t1+((c0<t0)?1:0);\\",
          "487:  c0 += t0; t1 += (c0<t0)?1:0; \\",
          "488:  c1 += t1; c2 += (c1<t1)?1:0; \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "508:  BN_ULONG ta=(a),tb=(b),t0; \\",
          "509:  t1 = BN_UMULT_HIGH(ta,tb); \\",
          "510:  t0 = ta * tb;   \\",
          "514:  c1 += t2; c2 += (c1<t2)?1:0; \\",
          "515:  }",
          "517: #define sqr_add_c(a,i,c0,c1,c2) { \\",
          "",
          "[Removed Lines]",
          "511:  t2 = t1+t1; c2 += (t2<t1)?1:0; \\",
          "512:  t1 = t0+t0; t2 += (t1<t0)?1:0; \\",
          "513:  c0 += t1; t2 += (c0<t1)?1:0; \\",
          "",
          "[Added Lines]",
          "515:  c0 += t0; t2 = t1+((c0<t0)?1:0);\\",
          "517:  c0 += t0; t1 += (c0<t0)?1:0; \\",
          "518:  c1 += t1; c2 += (c1<t1)?1:0; \\",
          "",
          "---------------"
        ],
        "crypto/bn/bntest.c||crypto/bn/bntest.c": [
          "File: crypto/bn/bntest.c -> crypto/bn/bntest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "679: int test_sqr(BIO *bp, BN_CTX *ctx)",
          "680:  {",
          "689:  for (i=0; i<num0; i++)",
          "690:   {",
          "694:   if (bp != NULL)",
          "695:    {",
          "696:    if (!results)",
          "697:     {",
          "699:     BIO_puts(bp,\" * \");",
          "701:     BIO_puts(bp,\" - \");",
          "702:     }",
          "704:    BIO_puts(bp,\"\\n\");",
          "705:    }",
          "713:   }",
          "719:  }",
          "721: int test_mont(BIO *bp, BN_CTX *ctx)",
          "",
          "[Removed Lines]",
          "681:  BIGNUM a,c,d,e;",
          "682:  int i;",
          "684:  BN_init(&a);",
          "685:  BN_init(&c);",
          "686:  BN_init(&d);",
          "687:  BN_init(&e);",
          "691:   BN_bntest_rand(&a,40+i*10,0,0);",
          "692:   a.neg=rand_neg();",
          "693:   BN_sqr(&c,&a,ctx);",
          "698:     BN_print(bp,&a);",
          "700:     BN_print(bp,&a);",
          "703:    BN_print(bp,&c);",
          "706:   BN_div(&d,&e,&c,&a,ctx);",
          "707:   BN_sub(&d,&d,&a);",
          "708:   if(!BN_is_zero(&d) || !BN_is_zero(&e))",
          "709:       {",
          "710:       fprintf(stderr,\"Square test failed!\\n\");",
          "711:       return 0;",
          "712:       }",
          "714:  BN_free(&a);",
          "715:  BN_free(&c);",
          "716:  BN_free(&d);",
          "717:  BN_free(&e);",
          "718:  return(1);",
          "",
          "[Added Lines]",
          "681:  BIGNUM *a,*c,*d,*e;",
          "682:  int i, ret = 0;",
          "684:  a = BN_new();",
          "685:  c = BN_new();",
          "686:  d = BN_new();",
          "687:  e = BN_new();",
          "688:  if (a == NULL || c == NULL || d == NULL || e == NULL)",
          "689:   {",
          "690:   goto err;",
          "691:   }",
          "695:   BN_bntest_rand(a,40+i*10,0,0);",
          "696:   a->neg=rand_neg();",
          "697:   BN_sqr(c,a,ctx);",
          "702:     BN_print(bp,a);",
          "704:     BN_print(bp,a);",
          "707:    BN_print(bp,c);",
          "710:   BN_div(d,e,c,a,ctx);",
          "711:   BN_sub(d,d,a);",
          "712:   if(!BN_is_zero(d) || !BN_is_zero(e))",
          "713:    {",
          "714:    fprintf(stderr,\"Square test failed!\\n\");",
          "715:    goto err;",
          "716:    }",
          "720:  BN_hex2bn(&a,",
          "721:   \"80000000000000008000000000000001FFFFFFFFFFFFFFFE0000000000000000\");",
          "722:  BN_sqr(c, a, ctx);",
          "723:  if (bp != NULL)",
          "724:   {",
          "725:   if (!results)",
          "726:    {",
          "727:    BN_print(bp,a);",
          "728:    BIO_puts(bp,\" * \");",
          "729:    BN_print(bp,a);",
          "730:    BIO_puts(bp,\" - \");",
          "731:    }",
          "732:   BN_print(bp,c);",
          "733:   BIO_puts(bp,\"\\n\");",
          "734:   }",
          "735:  BN_mul(d, a, a, ctx);",
          "736:  if (BN_cmp(c, d))",
          "737:   {",
          "738:   fprintf(stderr, \"Square test failed: BN_sqr and BN_mul produce \"",
          "739:    \"different results!\\n\");",
          "740:   goto err;",
          "741:   }",
          "744:  BN_hex2bn(&a,",
          "745:   \"80000000000000000000000080000001FFFFFFFE000000000000000000000000\");",
          "746:  BN_sqr(c, a, ctx);",
          "747:  if (bp != NULL)",
          "748:   {",
          "749:   if (!results)",
          "750:    {",
          "751:    BN_print(bp,a);",
          "752:    BIO_puts(bp,\" * \");",
          "753:    BN_print(bp,a);",
          "754:    BIO_puts(bp,\" - \");",
          "755:    }",
          "756:   BN_print(bp,c);",
          "757:   BIO_puts(bp,\"\\n\");",
          "758:   }",
          "759:  BN_mul(d, a, a, ctx);",
          "760:  if (BN_cmp(c, d))",
          "761:   {",
          "762:   fprintf(stderr, \"Square test failed: BN_sqr and BN_mul produce \"",
          "763:    \"different results!\\n\");",
          "764:   goto err;",
          "765:   }",
          "766:  ret = 1;",
          "767: err:",
          "768:  if (a != NULL) BN_free(a);",
          "769:  if (c != NULL) BN_free(c);",
          "770:  if (d != NULL) BN_free(d);",
          "771:  if (e != NULL) BN_free(e);",
          "772:  return ret;",
          "",
          "---------------"
        ]
      }
    }
  ]
}