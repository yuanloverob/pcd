{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "88819d5870e4d879791939af86e14e480b400fec",
      "candidate_info": {
        "commit_hash": "88819d5870e4d879791939af86e14e480b400fec",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/88819d5870e4d879791939af86e14e480b400fec",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wal.c",
          "test/corruptL.test"
        ],
        "message": "Return an SQLITE_CORRUPT error if the final expected size of the database when checkpointing is not reasonable - where reasonable is defined (basically) as the sum of the sizes of the database and wal files.\n\nFossilOrigin-Name: e2799563c8a97f617c6d932719b312e3d5bff051a9a397492df8d88e8bb4260a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wal.c||src/wal.c",
          "test/corruptL.test||test/corruptL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4cffa9bb44d6f0bdb23cae913adfb224f0814e65a2abb9120179f0b288e70f77",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2011:         if( rc==SQLITE_OK && nSize<nReq ){",
          "2012:           sqlite3OsFileControlHint(pWal->pDbFd, SQLITE_FCNTL_SIZE_HINT, &nReq);",
          "2013:         }",
          "2018:       while( rc==SQLITE_OK && 0==walIteratorNext(pIter, &iDbpage, &iFrame) ){",
          "",
          "[Removed Lines]",
          "2014:       }",
          "",
          "[Added Lines]",
          "2018:         if( rc==SQLITE_OK && (nSize+(i64)pWal->hdr.mxFrame*szPage)<nReq ){",
          "2019:           rc = SQLITE_CORRUPT_BKPT;",
          "2020:         }",
          "2021:       }",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1294:   INSERT INTO t1(rowid, w, x, y, z) VALUES(5, 10, 11, 10, NULL);",
          "1295: } {1 {database disk image is malformed}}",
          "1297: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1297: #-------------------------------------------------------------------------",
          "1298: reset_db",
          "1299: do_execsql_test 17.0 {",
          "1300:   CREATE TABLE t1(o INTEGER PRIMARY KEY, t UNIQUE);",
          "1301:   INSERT INTO t1(t) VALUES(randomblob(123));",
          "1302:   INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "1303:   INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "1304:   INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "1305:   INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "1306:   INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "1307:   INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "1309:   PRAGMA journal_mode = wal;",
          "1310:   INSERT INTO t1 VALUES(-1, 'b');",
          "1311: } {wal}",
          "1313: do_test 17.1 {",
          "1314:   set fd [open test.db r+]",
          "1315:   chan truncate $fd 2048",
          "1316:   file size test.db",
          "1317: } {2048}",
          "1319: breakpoint",
          "1320: do_catchsql_test 17.1 {",
          "1321:   PRAGMA wal_checkpoint",
          "1322: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a3bdeba3e87de596e0a97ac84319183d6fc557f",
      "candidate_info": {
        "commit_hash": "9a3bdeba3e87de596e0a97ac84319183d6fc557f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9a3bdeba3e87de596e0a97ac84319183d6fc557f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite3ext.h"
        ],
        "message": "Fix typos in the sqlite3ext.h header file that prevent some newer APIs from being accessed from loadable extensions.\n\nFossilOrigin-Name: 14331989fcaf6591336290ed1548e9c90f0f153e27f456f4c30c966f9c23aa6e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite3ext.h||src/sqlite3ext.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8a6fe3066cf0599fcf2960e8fb3ae39e4e7a61ec81e8ec71d0b5910aee2c16f6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite3ext.h||src/sqlite3ext.h": [
          "File: src/sqlite3ext.h -> src/sqlite3ext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "621: #define sqlite3_normalized_sql         sqlite3_api->normalized_sql",
          "626: #define sqlite3_drop_modules           sqlite3_api->drop_modules",
          "628: #define sqlite3_hard_heap_limit64      sqlite3_api->hard_heap_limit64",
          "629: #define sqlite3_uri_key                sqlite3_api->uri_key",
          "630: #define sqlite3_filename_database      sqlite3_api->filename_database",
          "",
          "[Removed Lines]",
          "623: #define sqlite3_stmt_isexplain         sqlite3_api->isexplain",
          "624: #define sqlite3_value_frombind         sqlite3_api->frombind",
          "",
          "[Added Lines]",
          "623: #define sqlite3_stmt_isexplain         sqlite3_api->stmt_isexplain",
          "624: #define sqlite3_value_frombind         sqlite3_api->value_frombind",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f1bb31e21950314818d86df25a67457c2a4fa1cf",
      "candidate_info": {
        "commit_hash": "f1bb31e21950314818d86df25a67457c2a4fa1cf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f1bb31e21950314818d86df25a67457c2a4fa1cf",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Further improvements to .wheretrace during loop code generation.\n\nFossilOrigin-Name: c4d5b75c9381255ec8d9a284eedb6b27be46ca868cae5985cf8a5769b15290c3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 59cc46e5a6d8dbb030f27716ad5446ecccf81cf0cfff95338b9133777f2059e7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1286:   VdbeModuleComment((v, \"Begin WHERE-loop%d: %s\",iLevel,pTabItem->pTab->zName));",
          "1288:   if( sqlite3WhereTrace & 0x800 ){",
          "1291:     sqlite3WhereLoopPrint(pLoop, pWC);",
          "1292:   }",
          "1293:   if( sqlite3WhereTrace & 0x20000 ){",
          "1295:     sqlite3WhereClausePrint(pWC);",
          "1296:   }",
          "1297: #endif",
          "",
          "[Removed Lines]",
          "1289:     sqlite3DebugPrintf(\"Coding level %d:  notReady=%llx\\n\",",
          "1290:        iLevel, (u64)notReady);",
          "1294:     sqlite3DebugPrintf(\"Complete WHERE clause before coding:\\n\");",
          "",
          "[Added Lines]",
          "1289:     sqlite3DebugPrintf(\"Coding level %d of %d:  notReady=%llx\\n\",",
          "1290:        iLevel, pWInfo->nLevel, (u64)notReady);",
          "1294:     if( iLevel==0 ){",
          "1295:       sqlite3DebugPrintf(\"WHERE clause being coded:\\n\");",
          "1296:       sqlite3TreeViewExpr(0, pWInfo->pWhere, 0);",
          "1297:     }",
          "1298:     sqlite3DebugPrintf(\"All WHERE-clause terms before coding:\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2379:     if( pTerm->leftCursor!=iCur ) continue;",
          "2380:     if( pLevel->iLeftJoin ) continue;",
          "2381:     pE = pTerm->pExpr;",
          "2384:     if( sqlite3WhereTrace & 0x800 ){",
          "2385:       sqlite3DebugPrintf(\"Coding transitive constraint:\\n\");",
          "2386:       sqlite3WhereTermPrint(pTerm, pWC->nTerm-j);",
          "2387:     }",
          "2388: #endif",
          "2389:     assert( (pTerm->prereqRight & pLevel->notReady)!=0 );",
          "2390:     pAlt = sqlite3WhereFindTerm(pWC, iCur, pTerm->u.leftColumn, notReady,",
          "2391:                     WO_EQ|WO_IN|WO_IS, 0);",
          "",
          "[Removed Lines]",
          "2382:     assert( !ExprHasProperty(pE, EP_FromJoin) );",
          "",
          "[Added Lines]",
          "2392:     assert( !ExprHasProperty(pE, EP_FromJoin) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2431:   if( sqlite3WhereTrace & 0x20000 ){",
          "2433:     sqlite3WhereClausePrint(pWC);",
          "2434:   }",
          "2435:   if( sqlite3WhereTrace & 0x800 ){",
          "",
          "[Removed Lines]",
          "2432:     sqlite3DebugPrintf(\"Complete WHERE clause after coding level %d:\\n\",iLevel);",
          "",
          "[Added Lines]",
          "2436:     sqlite3DebugPrintf(\"All WHERE-clause terms after coding level %d:\\n\",",
          "2437:                        iLevel);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "675f73bcabad39a517c8e6e370d10f20ce41f172",
      "candidate_info": {
        "commit_hash": "675f73bcabad39a517c8e6e370d10f20ce41f172",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/675f73bcabad39a517c8e6e370d10f20ce41f172",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New dbsqlfuzz test cases added.\n\nFossilOrigin-Name: 18c3a17dc8c07b12427e372ff86668d5bcb6b34d653c46c48561ed576acefa5b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: de6e6d6846d6a41c4821454dfdc042096234df753be08c5567b79fe535d9b6ea",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ecf928ea99e8a8d200e4409d5cf477652cd975f",
      "candidate_info": {
        "commit_hash": "2ecf928ea99e8a8d200e4409d5cf477652cd975f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2ecf928ea99e8a8d200e4409d5cf477652cd975f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wal.c"
        ],
        "message": "More details on the comment justifying the aleged data race in the WAL-mode checkpoint logic.\n\nFossilOrigin-Name: 0fab65c79f675c825ed7e85c82b65ce6f990c9d0796ebb3886942d241df7b268",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 08f09dc4f986a27f4e4e69f8226dbfaf0cfe1269cefc2830bf0fbef7b9bbda48",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c"
        ]
      }
    }
  ]
}