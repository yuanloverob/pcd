{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "25f933ad93e5990cf5b02fb5447790b027273710",
      "candidate_info": {
        "commit_hash": "25f933ad93e5990cf5b02fb5447790b027273710",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/25f933ad93e5990cf5b02fb5447790b027273710",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/showdb.c"
        ],
        "message": "In the \"pgidx\" report from \"showdb\", also show the number of rows on each database btree page.\n\nFossilOrigin-Name: 2bda9dc41c07092ae37d0c6001c1271e0622bfff7151201fc2bb4c95422c087b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/showdb.c||tool/showdb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eed701ef919c70d891727250be6a1b626aeb894c562d221e319ae6d74fc71d3d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/showdb.c||tool/showdb.c": [
          "File: tool/showdb.c -> tool/showdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "861:   int nCell;",
          "862:   int i;",
          "863:   int hdr = pgno==1 ? 100 : 0;",
          "865:   if( pgno<=0 || pgno>g.mxPage ) return;",
          "866:   a = fileRead((pgno-1)*g.pagesize, g.pagesize);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "864:   char zEntry[30];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "884:       zType = \"corrupt node\";",
          "885:     }",
          "886:   }",
          "887:   if( parent>0 ){",
          "890:   }else if( parent==0 ){",
          "892:   }else{",
          "894:   }",
          "896:   if( a[hdr]==2 || a[hdr]==5 ){",
          "897:     int cellstart = hdr+12;",
          "898:     unsigned int child;",
          "",
          "[Removed Lines]",
          "888:     page_usage_msg(pgno, \"%s [%s], child %d of page %d\",",
          "889:                    zType, zName, idx, parent);",
          "891:     page_usage_msg(pgno, \"root %s [%s]\", zType, zName);",
          "893:     page_usage_msg(pgno, \"orphaned %s\", zType);",
          "895:   nCell = a[hdr+3]*256 + a[hdr+4];",
          "",
          "[Added Lines]",
          "888:   nCell = a[hdr+3]*256 + a[hdr+4];",
          "889:   if( nCell==1 ){",
          "890:     sqlite3_snprintf(sizeof(zEntry),zEntry,\"1 row\");",
          "891:   }else{",
          "892:     sqlite3_snprintf(sizeof(zEntry),zEntry,\"%d rows\", nCell);",
          "893:   }",
          "895:     page_usage_msg(pgno, \"%s [%s], child %d of page %d, %s\",",
          "896:                    zType, zName, idx, parent, zEntry);",
          "898:     page_usage_msg(pgno, \"root %s [%s], %s\", zType, zName, zEntry);",
          "900:     page_usage_msg(pgno, \"orphaned %s, %s\", zType, zEntry);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29ddbbbf36cd67743d25dd6280c1788de8e4c021",
      "candidate_info": {
        "commit_hash": "29ddbbbf36cd67743d25dd6280c1788de8e4c021",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/29ddbbbf36cd67743d25dd6280c1788de8e4c021",
        "files": [
          "ext/fts3/fts3_tokenizer.c",
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in",
          "src/test_func.c",
          "src/vdbe.c",
          "src/vdbeInt.h",
          "src/vdbeapi.c",
          "src/vdbemem.c",
          "test/fts3atoken.test",
          "test/func.test"
        ],
        "message": "Add the sqlite3_value_frombind() interface.  Use that interface to improve fts3_tokenizer().\n\nFossilOrigin-Name: b3f2c3205a28dc21ea7080e5e1ba246ce9c9b90c1309262ca11d8e40943ed677",
        "before_after_code_files": [
          "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c",
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/test_func.c||src/test_func.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeapi.c||src/vdbeapi.c",
          "src/vdbemem.c||src/vdbemem.c",
          "test/fts3atoken.test||test/fts3atoken.test",
          "test/func.test||test/func.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c": [
          "File: ext/fts3/fts3_tokenizer.c -> ext/fts3/fts3_tokenizer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:   nName = sqlite3_value_bytes(argv[0])+1;",
          "81:   if( argc==2 ){",
          "83:       void *pOld;",
          "84:       int n = sqlite3_value_bytes(argv[1]);",
          "85:       if( zName==0 || n!=sizeof(pPtr) ){",
          "",
          "[Removed Lines]",
          "82:     if( fts3TokenizerEnabled(context) ){",
          "",
          "[Added Lines]",
          "82:     if( fts3TokenizerEnabled(context) || sqlite3_value_frombind(argv[1]) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:       return;",
          "107:     }",
          "108:   }",
          "110:     sqlite3_result_blob(context, (void *)&pPtr, sizeof(pPtr), SQLITE_TRANSIENT);",
          "111:   }",
          "112: }",
          "",
          "[Removed Lines]",
          "109:   if( fts3TokenizerEnabled(context) ){",
          "",
          "[Added Lines]",
          "109:   if( fts3TokenizerEnabled(context) || sqlite3_value_frombind(argv[0]) ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3fde627616030ca0de87169467e2e453fdc91154942e3a3a92a221df5923b2d2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "5085: int sqlite3_value_type(sqlite3_value*);",
          "5086: int sqlite3_value_numeric_type(sqlite3_value*);",
          "5087: int sqlite3_value_nochange(sqlite3_value*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5095: int sqlite3_value_frombind(sqlite3_value*);",
          "",
          "---------------"
        ],
        "src/test_func.c||src/test_func.c": [
          "File: src/test_func.c -> src/test_func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "630:   sqlite3_result_int(context, (int)sqlite3_value_subtype(argv[0]));",
          "631: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "638: static void test_frombind(",
          "639:   sqlite3_context *context,",
          "640:   int argc,",
          "641:   sqlite3_value **argv",
          "642: ){",
          "643:   sqlite3_uint64 m = 0;",
          "644:   int i;",
          "645:   for(i=0; i<argc && i<63; i++){",
          "646:     if( sqlite3_value_frombind(argv[i]) ) m |= ((sqlite3_uint64)1)<<i;",
          "647:   }",
          "648:   sqlite3_result_int64(context, (sqlite3_int64)m);",
          "649: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "675:     { \"test_zeroblob\",  1, SQLITE_UTF8|SQLITE_DETERMINISTIC, test_zeroblob},",
          "676:     { \"test_getsubtype\",       1, SQLITE_UTF8, test_getsubtype},",
          "677:     { \"test_setsubtype\",       2, SQLITE_UTF8, test_setsubtype},",
          "678:   };",
          "679:   int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "696:     { \"test_frombind\",        -1, SQLITE_UTF8, test_frombind},",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1256:     goto too_big;",
          "1257:   }",
          "1258:   pOut = &aMem[pOp->p2];",
          "1260:   UPDATE_MAX_BLOBSIZE(pOut);",
          "1261:   break;",
          "1262: }",
          "",
          "[Removed Lines]",
          "1259:   sqlite3VdbeMemShallowCopy(pOut, pVar, MEM_Static);",
          "",
          "[Added Lines]",
          "1259:   if( VdbeMemDynamic(pOut) ) sqlite3VdbeMemSetNull(pOut);",
          "1260:   memcpy(pOut, pVar, MEMCELLSIZE);",
          "1261:   pOut->flags &= ~(MEM_Dyn|MEM_Ephem);",
          "1262:   pOut->flags |= MEM_Static|MEM_FromBind;",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "275:   return (pVal->flags&(MEM_Null|MEM_Zero))==(MEM_Null|MEM_Zero);",
          "276: }",
          "280: sqlite3_value *sqlite3_value_dup(const sqlite3_value *pOrig){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "279: int sqlite3_value_frombind(sqlite3_value *pVal){",
          "280:   return (pVal->flags&MEM_FromBind)!=0;",
          "281: }",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:               ((p->flags&MEM_Static)!=0 ? 1 : 0) <= 1 );",
          "61:                            |MEM_Dyn|MEM_Ephem|MEM_Static))==0 );",
          "62:     }else{",
          "",
          "[Removed Lines]",
          "60:       assert( (p->flags & ~(MEM_Null|MEM_Term|MEM_Subtype",
          "",
          "[Added Lines]",
          "60:       assert( (p->flags & ~(MEM_Null|MEM_Term|MEM_Subtype|MEM_FromBind",
          "",
          "---------------"
        ],
        "test/fts3atoken.test||test/fts3atoken.test": [
          "File: test/fts3atoken.test -> test/fts3atoken.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   }",
          "87: } {{There was movement at the station}}",
          "89: sqlite3_db_config db SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 0",
          "90: do_catchsql_test 1.6 {",
          "91:   SELECT fts3_tokenizer('blah', fts3_tokenizer('simple')) IS NULL;",
          "92: } {1 {fts3tokenize disabled}}",
          "95: #--------------------------------------------------------------------------",
          "96: # Test cases fts3atoken-2.* test error cases in the scalar function based",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: unset -nocomplain simple blah2name simplename",
          "90: set simplename \"simple\"",
          "91: set blah2name \"blah2\"",
          "92: set simple [db one {SELECT fts3_tokenizer('simple')}]",
          "97: do_test fts3atoken-1.7 {",
          "98:   execsql {",
          "99:     SELECT fts3_tokenizer('blah2', $simple) IS NULL;",
          "100:   }",
          "101: } {1}",
          "103: # With ENABLE_FTS3_TOKENIZER off, the fts3_tokenzer(1) function",
          "104: # returns NULL unless the first parameter is a bound parameter.",
          "105: # If the first parameter is a bound parameter, then fts3_tokenizer(1)",
          "106: # returns the actual pointer value as a BLOB.",
          "107: #",
          "108: do_test fts3atoken-1.8 {",
          "109:   execsql {",
          "110:     SELECT fts3_tokenizer($blah2name) == fts3_tokenizer($simplename),",
          "111:            typeof(fts3_tokenizer($blah2name)),",
          "112:            typeof(fts3_tokenizer('blah2')),",
          "113:            typeof(fts3_tokenizer($simplename)),",
          "114:            typeof(fts3_tokenizer('simple'));",
          "115:   }",
          "116: } {1 blob null blob null}",
          "118: # With ENABLE_FTS3_TOKENIZER on, fts3_tokenizer() always returns",
          "119: # the BLOB pointer, regardless the parameter",
          "120: #",
          "121: sqlite3_db_config db SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 1",
          "122: do_test fts3atoken-1.9 {",
          "123:   execsql {",
          "124:     SELECT fts3_tokenizer('blah2') == fts3_tokenizer('simple'),",
          "125:            typeof(fts3_tokenizer($blah2name)),",
          "126:            typeof(fts3_tokenizer('blah2')),",
          "127:            typeof(fts3_tokenizer($simplename)),",
          "128:            typeof(fts3_tokenizer('simple'));",
          "129:   }",
          "130: } {1 blob blob blob blob}",
          "",
          "---------------"
        ],
        "test/func.test||test/func.test": [
          "File: test/func.test -> test/func.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1391: do_execsql_test func-31.1 {",
          "1392:   SELECT char(), length(char()), typeof(char())",
          "1393: } {{} 0 text}",
          "1394: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1395: # sqlite3_value_frombind()",
          "1396: #",
          "1397: do_execsql_test func-32.100 {",
          "1398:   SELECT test_frombind(1,2,3,4);",
          "1399: } {0}",
          "1400: do_execsql_test func-32.110 {",
          "1401:   SELECT test_frombind(1,2,?,4);",
          "1402: } {4}",
          "1403: do_execsql_test func-32.120 {",
          "1404:   SELECT test_frombind(1,(?),4,?+7);",
          "1405: } {2}",
          "1406: do_execsql_test func-32.130 {",
          "1407:   DROP TABLE IF EXISTS t1;",
          "1408:   CREATE TABLE t1(a,b,c,e,f);",
          "1409:   INSERT INTO t1 VALUES(1,2.5,'xyz',x'e0c1b2a3',null);",
          "1410:   SELECT test_frombind(a,b,c,e,f,$xyz) FROM t1;",
          "1411: } {32}",
          "1412: do_execsql_test func-32.140 {",
          "1413:   SELECT test_frombind(a,b,c,e,f,$xyz+f) FROM t1;",
          "1414: } {0}",
          "1415: do_execsql_test func-32.150 {",
          "1416:   SELECT test_frombind(x.a,y.b,x.c,:123,y.e,x.f,$xyz+y.f) FROM t1 x, t1 y;",
          "1417: } {8}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c2db5def64f97e8b5e79578fd73ce4a0d277338",
      "candidate_info": {
        "commit_hash": "3c2db5def64f97e8b5e79578fd73ce4a0d277338",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3c2db5def64f97e8b5e79578fd73ce4a0d277338",
        "files": [
          "ext/fts3/fts3_unicode2.c",
          "ext/fts5/fts5_unicode2.c",
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/whereexpr.c"
        ],
        "message": "Fix harmless compiler warnings.\n\nFossilOrigin-Name: 27221c69901d2b4546167639c4a3c8f54b2e18820f1346870fa26b7c919027db",
        "before_after_code_files": [
          "ext/fts3/fts3_unicode2.c||ext/fts3/fts3_unicode2.c",
          "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/whereexpr.c||src/whereexpr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_unicode2.c||ext/fts3/fts3_unicode2.c": [
          "File: ext/fts3/fts3_unicode2.c -> ext/fts3/fts3_unicode2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:     62830, 62890, 62924, 62974, 63032, 63050, 63082, 63118,",
          "179:     63182, 63242, 63274, 63310, 63368, 63390,",
          "180:   };",
          "181:   char aChar[] = {",
          "203:   };",
          "205:   unsigned int key = (((unsigned int)c)<<3) | 0x00000007;",
          "",
          "[Removed Lines]",
          "182:     '\\0',      'a'|0x00,  'c'|0x00,  'e'|0x00,  'i'|0x00,  'n'|0x00,",
          "183:     'o'|0x00,  'u'|0x00,  'y'|0x00,  'y'|0x00,  'a'|0x00,  'c'|0x00,",
          "184:     'd'|0x00,  'e'|0x00,  'e'|0x00,  'g'|0x00,  'h'|0x00,  'i'|0x00,",
          "185:     'j'|0x00,  'k'|0x00,  'l'|0x00,  'n'|0x00,  'o'|0x00,  'r'|0x00,",
          "186:     's'|0x00,  't'|0x00,  'u'|0x00,  'u'|0x00,  'w'|0x00,  'y'|0x00,",
          "187:     'z'|0x00,  'o'|0x00,  'u'|0x00,  'a'|0x00,  'i'|0x00,  'o'|0x00,",
          "188:     'u'|0x00,  'u'|0x80,  'a'|0x80,  'g'|0x00,  'k'|0x00,  'o'|0x00,",
          "189:     'o'|0x80,  'j'|0x00,  'g'|0x00,  'n'|0x00,  'a'|0x80,  'a'|0x00,",
          "190:     'e'|0x00,  'i'|0x00,  'o'|0x00,  'r'|0x00,  'u'|0x00,  's'|0x00,",
          "191:     't'|0x00,  'h'|0x00,  'a'|0x00,  'e'|0x00,  'o'|0x80,  'o'|0x00,",
          "192:     'o'|0x80,  'y'|0x00,  '\\0',      '\\0',      '\\0',      '\\0',",
          "193:     '\\0',      '\\0',      '\\0',      '\\0',      'a'|0x00,  'b'|0x00,",
          "194:     'c'|0x80,  'd'|0x00,  'd'|0x00,  'e'|0x80,  'e'|0x00,  'e'|0x80,",
          "195:     'f'|0x00,  'g'|0x00,  'h'|0x00,  'h'|0x00,  'i'|0x00,  'i'|0x80,",
          "196:     'k'|0x00,  'l'|0x00,  'l'|0x80,  'l'|0x00,  'm'|0x00,  'n'|0x00,",
          "197:     'o'|0x80,  'p'|0x00,  'r'|0x00,  'r'|0x80,  'r'|0x00,  's'|0x00,",
          "198:     's'|0x80,  't'|0x00,  'u'|0x00,  'u'|0x80,  'v'|0x00,  'w'|0x00,",
          "199:     'w'|0x00,  'x'|0x00,  'y'|0x00,  'z'|0x00,  'h'|0x00,  't'|0x00,",
          "200:     'w'|0x00,  'y'|0x00,  'a'|0x00,  'a'|0x80,  'a'|0x80,  'a'|0x80,",
          "201:     'e'|0x00,  'e'|0x80,  'e'|0x80,  'i'|0x00,  'o'|0x00,  'o'|0x80,",
          "202:     'o'|0x80,  'o'|0x80,  'u'|0x00,  'u'|0x80,  'u'|0x80,  'y'|0x00,",
          "",
          "[Added Lines]",
          "181: #define HIBIT ((char)0x80)",
          "183:     '\\0',      'a',       'c',       'e',       'i',       'n',",
          "184:     'o',       'u',       'y',       'y',       'a',       'c',",
          "185:     'd',       'e',       'e',       'g',       'h',       'i',",
          "186:     'j',       'k',       'l',       'n',       'o',       'r',",
          "187:     's',       't',       'u',       'u',       'w',       'y',",
          "188:     'z',       'o',       'u',       'a',       'i',       'o',",
          "189:     'u',       'u'|HIBIT, 'a'|HIBIT, 'g',       'k',       'o',",
          "190:     'o'|HIBIT, 'j',       'g',       'n',       'a'|HIBIT, 'a',",
          "191:     'e',       'i',       'o',       'r',       'u',       's',",
          "192:     't',       'h',       'a',       'e',       'o'|HIBIT, 'o',",
          "193:     'o'|HIBIT, 'y',       '\\0',      '\\0',      '\\0',      '\\0',",
          "194:     '\\0',      '\\0',      '\\0',      '\\0',      'a',       'b',",
          "195:     'c'|HIBIT, 'd',       'd',       'e'|HIBIT, 'e',       'e'|HIBIT,",
          "196:     'f',       'g',       'h',       'h',       'i',       'i'|HIBIT,",
          "197:     'k',       'l',       'l'|HIBIT, 'l',       'm',       'n',",
          "198:     'o'|HIBIT, 'p',       'r',       'r'|HIBIT, 'r',       's',",
          "199:     's'|HIBIT, 't',       'u',       'u'|HIBIT, 'v',       'w',",
          "200:     'w',       'x',       'y',       'z',       'h',       't',",
          "201:     'w',       'y',       'a',       'a'|HIBIT, 'a'|HIBIT, 'a'|HIBIT,",
          "202:     'e',       'e'|HIBIT, 'e'|HIBIT, 'i',       'o',       'o'|HIBIT,",
          "203:     'o'|HIBIT, 'o'|HIBIT, 'u',       'u'|HIBIT, 'u'|HIBIT, 'y',",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
          "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     62830, 62890, 62924, 62974, 63032, 63050, 63082, 63118,",
          "48:     63182, 63242, 63274, 63310, 63368, 63390,",
          "49:   };",
          "50:   char aChar[] = {",
          "72:   };",
          "74:   unsigned int key = (((unsigned int)c)<<3) | 0x00000007;",
          "",
          "[Removed Lines]",
          "51:     '\\0',      'a'|0x00,  'c'|0x00,  'e'|0x00,  'i'|0x00,  'n'|0x00,",
          "52:     'o'|0x00,  'u'|0x00,  'y'|0x00,  'y'|0x00,  'a'|0x00,  'c'|0x00,",
          "53:     'd'|0x00,  'e'|0x00,  'e'|0x00,  'g'|0x00,  'h'|0x00,  'i'|0x00,",
          "54:     'j'|0x00,  'k'|0x00,  'l'|0x00,  'n'|0x00,  'o'|0x00,  'r'|0x00,",
          "55:     's'|0x00,  't'|0x00,  'u'|0x00,  'u'|0x00,  'w'|0x00,  'y'|0x00,",
          "56:     'z'|0x00,  'o'|0x00,  'u'|0x00,  'a'|0x00,  'i'|0x00,  'o'|0x00,",
          "57:     'u'|0x00,  'u'|0x80,  'a'|0x80,  'g'|0x00,  'k'|0x00,  'o'|0x00,",
          "58:     'o'|0x80,  'j'|0x00,  'g'|0x00,  'n'|0x00,  'a'|0x80,  'a'|0x00,",
          "59:     'e'|0x00,  'i'|0x00,  'o'|0x00,  'r'|0x00,  'u'|0x00,  's'|0x00,",
          "60:     't'|0x00,  'h'|0x00,  'a'|0x00,  'e'|0x00,  'o'|0x80,  'o'|0x00,",
          "61:     'o'|0x80,  'y'|0x00,  '\\0',      '\\0',      '\\0',      '\\0',",
          "62:     '\\0',      '\\0',      '\\0',      '\\0',      'a'|0x00,  'b'|0x00,",
          "63:     'c'|0x80,  'd'|0x00,  'd'|0x00,  'e'|0x80,  'e'|0x00,  'e'|0x80,",
          "64:     'f'|0x00,  'g'|0x00,  'h'|0x00,  'h'|0x00,  'i'|0x00,  'i'|0x80,",
          "65:     'k'|0x00,  'l'|0x00,  'l'|0x80,  'l'|0x00,  'm'|0x00,  'n'|0x00,",
          "66:     'o'|0x80,  'p'|0x00,  'r'|0x00,  'r'|0x80,  'r'|0x00,  's'|0x00,",
          "67:     's'|0x80,  't'|0x00,  'u'|0x00,  'u'|0x80,  'v'|0x00,  'w'|0x00,",
          "68:     'w'|0x00,  'x'|0x00,  'y'|0x00,  'z'|0x00,  'h'|0x00,  't'|0x00,",
          "69:     'w'|0x00,  'y'|0x00,  'a'|0x00,  'a'|0x80,  'a'|0x80,  'a'|0x80,",
          "70:     'e'|0x00,  'e'|0x80,  'e'|0x80,  'i'|0x00,  'o'|0x00,  'o'|0x80,",
          "71:     'o'|0x80,  'o'|0x80,  'u'|0x00,  'u'|0x80,  'u'|0x80,  'y'|0x00,",
          "",
          "[Added Lines]",
          "50: #define HIBIT ((char)0x80)",
          "52:     '\\0',      'a',       'c',       'e',       'i',       'n',",
          "53:     'o',       'u',       'y',       'y',       'a',       'c',",
          "54:     'd',       'e',       'e',       'g',       'h',       'i',",
          "55:     'j',       'k',       'l',       'n',       'o',       'r',",
          "56:     's',       't',       'u',       'u',       'w',       'y',",
          "57:     'z',       'o',       'u',       'a',       'i',       'o',",
          "58:     'u',       'u'|HIBIT, 'a'|HIBIT, 'g',       'k',       'o',",
          "59:     'o'|HIBIT, 'j',       'g',       'n',       'a'|HIBIT, 'a',",
          "60:     'e',       'i',       'o',       'r',       'u',       's',",
          "61:     't',       'h',       'a',       'e',       'o'|HIBIT, 'o',",
          "62:     'o'|HIBIT, 'y',       '\\0',      '\\0',      '\\0',      '\\0',",
          "63:     '\\0',      '\\0',      '\\0',      '\\0',      'a',       'b',",
          "64:     'c'|HIBIT, 'd',       'd',       'e'|HIBIT, 'e',       'e'|HIBIT,",
          "65:     'f',       'g',       'h',       'h',       'i',       'i'|HIBIT,",
          "66:     'k',       'l',       'l'|HIBIT, 'l',       'm',       'n',",
          "67:     'o'|HIBIT, 'p',       'r',       'r'|HIBIT, 'r',       's',",
          "68:     's'|HIBIT, 't',       'u',       'u'|HIBIT, 'v',       'w',",
          "69:     'w',       'x',       'y',       'z',       'h',       't',",
          "70:     'w',       'y',       'a',       'a'|HIBIT, 'a'|HIBIT, 'a'|HIBIT,",
          "71:     'e',       'e'|HIBIT, 'e'|HIBIT, 'i',       'o',       'o'|HIBIT,",
          "72:     'o'|HIBIT, 'o'|HIBIT, 'u',       'u'|HIBIT, 'u'|HIBIT, 'y',",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 395599116d801324f0763e59bc5e2fc8622aa5b7572e0c1c9a982efbb3cc8280",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "779:     for(j=0; j<2 && !okToChngToIN; j++){",
          "781:       Expr *pLeft = 0;",
          "782:       for(i=pOrWc->nTerm-1; i>=0; i--, pOrTerm++){",
          "783:         assert( pOrTerm->eOperator & WO_EQ );",
          "784:         pOrTerm->wtFlags &= ~TERM_OR_OK;",
          "",
          "[Removed Lines]",
          "780:       pOrTerm = pOrWc->a;",
          "",
          "[Added Lines]",
          "781:       pOrTerm = pOrWc->a;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d683394f1d27561cbf22c56e3c6be2413f1eb5d",
      "candidate_info": {
        "commit_hash": "7d683394f1d27561cbf22c56e3c6be2413f1eb5d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7d683394f1d27561cbf22c56e3c6be2413f1eb5d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeInt.h",
          "src/vdbemem.c",
          "test/fuzzdata8.db"
        ],
        "message": "Fix a faulty assert() in the sqlite3VdbeMemExpandBlob() routine.\n\nFossilOrigin-Name: df58774e994bd306b1a2e1f259e7e4408f01c5b1dc104673698168bbf8a63ce5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: edb095a9a679c8c702abd0a487e55ed4b09110b54bcd7d5275020576f2713a39",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "282: #define MemSetTypeFlag(p, f) \\",
          "283:    ((p)->flags = ((p)->flags&~(MEM_TypeMask|MEM_Zero))|f)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "288: #define MemNullNochng(X) \\",
          "289:   ((X)->flags==(MEM_Null|MEM_Zero) && (X)->n==0 && (X)->u.nZero==0)",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:   testcase( bPreserve && pMem->z==0 );",
          "198:   assert( pMem->szMalloc==0",
          "",
          "[Removed Lines]",
          "195:   assert( bPreserve==0 || pMem->flags&(MEM_Blob|MEM_Str) );",
          "",
          "[Added Lines]",
          "195:   assert( bPreserve==0",
          "196:        || pMem->flags&(MEM_Blob|MEM_Str)",
          "197:        || MemNullNochng(pMem)",
          "198:   );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "298: int sqlite3VdbeMemExpandBlob(Mem *pMem){",
          "299:   int nByte;",
          "300:   assert( pMem->flags & MEM_Zero );",
          "302:   assert( !sqlite3VdbeMemIsRowSet(pMem) );",
          "303:   assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "",
          "[Removed Lines]",
          "301:   assert( pMem->flags&MEM_Blob );",
          "",
          "[Added Lines]",
          "304:   assert( (pMem->flags&MEM_Blob)!=0 || MemNullNochng(pMem) );",
          "305:   testcase( MemNullNochng(pMem) )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "746461f1b81fc952a2793f5f0b19099dc06e9510",
      "candidate_info": {
        "commit_hash": "746461f1b81fc952a2793f5f0b19099dc06e9510",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/746461f1b81fc952a2793f5f0b19099dc06e9510",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/pager.c",
          "src/sqliteInt.h"
        ],
        "message": "Ensure that the main filename and the journal filenames in the pager object are all correctly double-zero terminated.\n\nFossilOrigin-Name: df51ae19c1aa4c26f2dcd427eddc1c9cc24b698e1ab0a948b198a57432e25e1e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/pager.c||src/pager.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 28091a48aa6994f8d7c142b5851bcd6b4e9a93a7bbef6c927a6182d24f3245b4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4187:   return rc;",
          "4188: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4190: #ifdef SQLITE_DEBUG",
          "4196: int sqlite3UriCount(const char *z){",
          "4197:   int n = 0;",
          "4198:   if( z==0 ) return 0;",
          "4199:   z += strlen(z)+1;",
          "4200:   while( z[0] ){",
          "4201:     z += strlen(z)+1;",
          "4202:     z += strlen(z)+1;",
          "4203:     n++;",
          "4204:   }",
          "4205:   return n;",
          "4206: }",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4764: #ifdef SQLITE_DEBUG",
          "4766: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4797:     nPathname = sqlite3Strlen30(zPathname);",
          "4798:     z = zUri = &zFilename[sqlite3Strlen30(zFilename)+1];",
          "4799:     while( *z ){",
          "4802:     }",
          "4805:     if( rc==SQLITE_OK && nPathname+8>pVfs->mxPathname ){",
          "",
          "[Removed Lines]",
          "4800:       z += sqlite3Strlen30(z)+1;",
          "4801:       z += sqlite3Strlen30(z)+1;",
          "4803:     nUri = (int)(&z[1] - zUri);",
          "4804:     assert( nUri>=0 );",
          "",
          "[Added Lines]",
          "4803:       z += strlen(z)+1;",
          "4804:       z += strlen(z)+1;",
          "4805: #ifdef SQLITE_DEBUG",
          "4806:       nUri++;",
          "4807: #endif",
          "4809:     nUriByte = (int)(&z[2] - zUri);",
          "4810:     assert( nUriByte>=1 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4857:   if( zPathname ){",
          "4858:     assert( nPathname>0 );",
          "4860:     memcpy(pPager->zFilename, zPathname, nPathname);",
          "4862:     memcpy(pPager->zJournal, zPathname, nPathname);",
          "4864:     sqlite3FileSuffix3(pPager->zFilename, pPager->zJournal);",
          "4865: #ifndef SQLITE_OMIT_WAL",
          "4867:     memcpy(pPager->zWal, zPathname, nPathname);",
          "4869:     sqlite3FileSuffix3(pPager->zFilename, pPager->zWal);",
          "4870: #endif",
          "4871:     sqlite3DbFree(0, zPathname);",
          "4872:   }",
          "4873:   pPager->pVfs = pVfs;",
          "",
          "[Removed Lines]",
          "4859:     pPager->zJournal =   (char*)(pPtr += nPathname + 1 + nUri);",
          "4861:     if( nUri ) memcpy(&pPager->zFilename[nPathname+1], zUri, nUri);",
          "4863:     memcpy(&pPager->zJournal[nPathname], \"-journal\\000\", 8+2);",
          "4866:     pPager->zWal = &pPager->zJournal[nPathname+8+1];",
          "4868:     memcpy(&pPager->zWal[nPathname], \"-wal\\000\", 4+1);",
          "",
          "[Added Lines]",
          "4866:     if( nUri ) memcpy(&pPager->zFilename[nPathname+1], zUri, nUriByte);",
          "4867:     pPager->zJournal =   (char*)(pPtr += nPathname + 1 + nUriByte);",
          "4869:     memcpy(&pPager->zJournal[nPathname], \"-journal\", 8);",
          "4872:     pPager->zWal = (char*)(pPtr += nPathname + 8 + 2);",
          "4874:     memcpy(&pPager->zWal[nPathname], \"-wal\", 4);",
          "4876:     assert( sqlite3UriCount(pPager->zWal)==0 );",
          "4878:     assert( sqlite3UriCount(pPager->zFilename)==nUri );",
          "4879:     assert( sqlite3UriCount(pPager->zJournal)==0 );",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3992: void sqlite3AddCollateType(Parse*, Token*);",
          "3993: void sqlite3AddGenerated(Parse*,Expr*,Token*);",
          "3994: void sqlite3EndTable(Parse*,Token*,Token*,u8,Select*);",
          "3995: int sqlite3ParseUri(const char*,const char*,unsigned int*,",
          "3996:                     sqlite3_vfs**,char**,char **);",
          "3997: #ifdef SQLITE_HAS_CODEC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3995: #ifdef SQLITE_DEBUG",
          "3996:   int sqlite3UriCount(const char*);",
          "3997: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}