{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f1678bfc65bcb2cda47bcb38f46b1723f0b26877",
      "candidate_info": {
        "commit_hash": "f1678bfc65bcb2cda47bcb38f46b1723f0b26877",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f1678bfc65bcb2cda47bcb38f46b1723f0b26877",
        "files": [
          "lib/http.js",
          "test/simple/test-http-max-headers-count.js"
        ],
        "message": "http: do not accept headers if limit is exceeded\n\n* fix limiting when parser was reused\n* fix maxHeadersCount = 0 is ignored ( credit to @koichik )\n* add test-http-max-headers-count.js ( credit to @koichik )",
        "before_after_code_files": [
          "lib/http.js||lihttp.js",
          "test/simple/test-http-max-headers-count.js||test/simple/test-http-max-headers-count.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   parser._headers = [];",
          "44:   parser._url = '';",
          "55:   parser.onHeaders = function(headers, url) {",
          "57:     parser._url += url;",
          "58:   };",
          "",
          "[Removed Lines]",
          "48:   parser.maxHeadersCount = 1000;",
          "56:     parser._headers = parser._headers.concat(headers);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:     var n = headers.length;",
          "90:     }",
          "92:     for (var i = 0; i < n; i += 2) {",
          "",
          "[Removed Lines]",
          "88:     if (parser.maxHeadersCount > 0) {",
          "89:       n = Math.min(n, parser.maxHeadersCount << 1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1170:     req.parser = parser;",
          "1175:     }",
          "1177:     socket._httpMessage = req;",
          "",
          "[Removed Lines]",
          "1173:     if (req.maxHeadersCount) {",
          "1174:       parser.maxHeadersCount = req.maxHeadersCount;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1461:   parser.incoming = null;",
          "1466:   }",
          "1468:   socket.addListener('error', function(e) {",
          "",
          "[Removed Lines]",
          "1464:   if (this.maxHeadersCount) {",
          "1465:     parser.maxHeadersCount = this.maxHeadersCount;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-http-max-headers-count.js||test/simple/test-http-max-headers-count.js": [
          "File: test/simple/test-http-max-headers-count.js -> test/simple/test-http-max-headers-count.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var http = require('http');",
          "26: var requests = 0;",
          "27: var responses = 0;",
          "29: var headers = {};",
          "30: var N = 2000;",
          "31: for (var i = 0; i < N; ++i) {",
          "32:   headers['key' + i] = i;",
          "33: }",
          "35: var maxAndExpected = [ // for server",
          "36:   [50, 50],",
          "37:   [1500, 1500],",
          "38:   [0, N + 2], // Host and Connection",
          "39: ];",
          "40: var max = maxAndExpected[requests][0];",
          "41: var expected = maxAndExpected[requests][1];",
          "43: var server = http.createServer(function(req, res) {",
          "44:   assert.equal(Object.keys(req.headers).length, expected);",
          "45:   if (++requests < maxAndExpected.length) {",
          "46:     max = maxAndExpected[requests][0];",
          "47:     expected = maxAndExpected[requests][1];",
          "48:     server.maxHeadersCount = max;",
          "49:   }",
          "50:   res.writeHead(200, headers);",
          "51:   res.end();",
          "52: });",
          "53: server.maxHeadersCount = max;",
          "55: server.listen(common.PORT, function() {",
          "56:   var maxAndExpected = [ // for client",
          "57:     [20, 20],",
          "58:     [1200, 1200],",
          "59:     [0, N + 2], // Connection and Transfer-Encoding",
          "60:   ];",
          "61:   doRequest();",
          "63:   function doRequest() {",
          "64:     var max = maxAndExpected[responses][0];",
          "65:     var expected = maxAndExpected[responses][1];",
          "66:     var req = http.request({",
          "67:       port: common.PORT,",
          "68:       headers: headers",
          "69:     }, function(res) {",
          "70:       assert.equal(Object.keys(res.headers).length, expected);",
          "71:       res.on('end', function() {",
          "72:         if (++responses < maxAndExpected.length) {",
          "73:           doRequest();",
          "74:         } else {",
          "75:           server.close();",
          "76:         }",
          "77:       });",
          "78:     });",
          "79:     req.maxHeadersCount = max;",
          "80:     req.end();",
          "81:   }",
          "82: });",
          "84: process.on('exit', function() {",
          "85:   assert.equal(requests, maxAndExpected.length);",
          "86:   assert.equal(responses, maxAndExpected.length);",
          "87: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a4ef01df07ce1d1365eec057911131c6212444f4",
      "candidate_info": {
        "commit_hash": "a4ef01df07ce1d1365eec057911131c6212444f4",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/a4ef01df07ce1d1365eec057911131c6212444f4",
        "files": [
          "doc/api/buffer.markdown",
          "lib/buffer.js",
          "test/simple/test-buffer.js"
        ],
        "message": "buffer: implement Buffer.prototype.toJSON()\n\nReturns an Array-representation of the Buffer.\nCloses #3905.",
        "before_after_code_files": [
          "lib/buffer.js||libuffer.js",
          "test/simple/test-buffer.js||test/simple/test-buffer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/buffer.js||libuffer.js": [
          "File: lib/buffer.js -> libuffer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "411: };",
          "415: Buffer.prototype.toString = function(encoding, start, end) {",
          "416:   encoding = String(encoding || 'utf8').toLowerCase();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-buffer.js||test/simple/test-buffer.js": [
          "File: test/simple/test-buffer.js -> test/simple/test-buffer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "748:   'new gnu gun'  ].forEach(function(enc) {",
          "749:     assert.equal(Buffer.isEncoding(enc), false);",
          "750:   });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754: assert.equal(JSON.stringify(Buffer('test')), '[116,101,115,116]');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f93aa5d5d207e8bd739d365dbf9ad6dbcc69571",
      "candidate_info": {
        "commit_hash": "1f93aa5d5d207e8bd739d365dbf9ad6dbcc69571",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/1f93aa5d5d207e8bd739d365dbf9ad6dbcc69571",
        "files": [
          "ChangeLog",
          "doc/index.html",
          "lib/child_process.js",
          "src/node_version.h"
        ],
        "message": "2012.06.15, Version 0.7.11 (unstable)\n\n* V8: Upgrade to v3.11.10\n\n* npm: Upgrade to 1.1.26\n\n* doc: Improve cross-linking in API docs markdown (Ben Kelly)\n\n* Fix #3425: removeAllListeners should delete array (Reid Burke)\n\n* cluster: don't silently drop messages when the write queue gets big (Bert Belder)\n\n* Add Buffer.concat method (isaacs)\n\n* windows: make symlinks tolerant to forward slashes (Bert Belder)\n\n* build: Add node.d and node.1 to installer (isaacs)\n\n* cluster: rename worker.unqiueID to worker.id (Andreas Madsen)\n\n* Windows: Enable ETW events on Windows for existing DTrace probes. (Igor Zinkovsky)\n\n* test: bundle node-weak in test/gc so that it doesn't need to be downloaded (Nathan Rajlich)\n\n* Make many tests pass on Windows (Bert Belder)\n\n* Fix #3388 Support listening on file descriptors (isaacs)\n\n* Fix #3407 Add os.tmpDir() (isaacs)\n\n* Unbreak the snapshotted build on Windows (Bert Belder)\n\n* Clean up child_process.kill throws (Bert Belder)\n\n* crypto: make cipher/decipher accept buffer args (Ben Noordhuis)",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js",
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js"
        ],
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NODE_MAJOR_VERSION 0",
          "30: #define NODE_MINOR_VERSION 7",
          "31: #define NODE_PATCH_VERSION 11",
          "34: #ifndef NODE_STRINGIFY",
          "35: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b5853794d77094f960795cacf21d37841f1a890",
      "candidate_info": {
        "commit_hash": "6b5853794d77094f960795cacf21d37841f1a890",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/6b5853794d77094f960795cacf21d37841f1a890",
        "files": [
          "common.gypi"
        ],
        "message": "build: disable NDEBUG in release builds for now\n\nassert() sanity checks are a good thing.",
        "before_after_code_files": [
          "common.gypi||common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common.gypi||common.gypi": [
          "File: common.gypi -> common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:         },",
          "36:       },",
          "37:       'Release': {",
          "39:         'cflags': [ '-O3', '-fomit-frame-pointer', '-fdata-sections', '-ffunction-sections' ],",
          "40:         'msvs_settings': {",
          "41:           'VCCLCompilerTool': {",
          "",
          "[Removed Lines]",
          "38:         'defines': [ 'NDEBUG' ],",
          "",
          "[Added Lines]",
          "38:         # 'defines': [ 'NDEBUG' ],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9611354f08d2fc240bd67e3f4c8ca02d1d1a3ea1",
      "candidate_info": {
        "commit_hash": "9611354f08d2fc240bd67e3f4c8ca02d1d1a3ea1",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9611354f08d2fc240bd67e3f4c8ca02d1d1a3ea1",
        "files": [
          "lib/tls.js"
        ],
        "message": "lint",
        "before_after_code_files": [
          "lib/tls.js||litls.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/tls.js||litls.js": [
          "File: lib/tls.js -> litls.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "932:   this.setOptions(options);",
          "934:   var sharedCreds = crypto.createCredentials({",
          "936:     key: self.key,",
          "937:     passphrase: self.passphrase,",
          "938:     cert: self.cert,",
          "",
          "[Removed Lines]",
          "935:     pfx : self.pfx,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}