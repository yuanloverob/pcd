{
  "cve_id": "CVE-2015-8715",
  "cve_desc": "epan/dissectors/packet-alljoyn.c in the AllJoyn dissector in Wireshark 1.12.x before 1.12.9 does not check for empty arguments, which allows remote attackers to cause a denial of service (infinite loop) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "40caff2d1fb08262c84aaaa8ac584baa8866dd7c",
  "patch_info": {
    "commit_hash": "40caff2d1fb08262c84aaaa8ac584baa8866dd7c",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/40caff2d1fb08262c84aaaa8ac584baa8866dd7c",
    "files": [
      "epan/dissectors/packet-alljoyn.c"
    ],
    "message": "AllJoyn: prevent an infinite loop\n\nDisplay an expert error when the argument is empty\n\nBug: 11607\nChange-Id: I8682eab8fe1822f784e848220ff90de4eb5e13ff\nReviewed-on: https://code.wireshark.org/review/11132\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "before_after_code_files": [
      "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c": [
      "File: epan/dissectors/packet-alljoyn.c -> epan/dissectors/packet-alljoyn.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: #include \"config.h\"",
      "25: #include <epan/packet.h>",
      "27: void proto_register_AllJoyn(void);",
      "28: void proto_reg_handoff_AllJoyn(void);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: #include <epan/expert.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "241: static gint ett_alljoyn_ns_header = -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "240: static expert_field ei_alljoyn_empty_arg = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "871: {",
      "872:     gint length;",
      "873:     gint padding_start;",
      "874:     const gchar *header_type_name = NULL;",
      "876:     switch(type_id)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "877:     gint saved_offset = offset;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1282:     if(offset > (gint)tvb_reported_length(tvb)) {",
      "1283:         offset = (gint)tvb_reported_length(tvb);",
      "1284:     }",
      "1286:     return offset;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1288:     } else if (offset == saved_offset) {",
      "1291:         proto_tree_add_expert(field_tree, pinfo, &ei_alljoyn_empty_arg, tvb, offset, 0);",
      "1292:         offset = (gint)tvb_reported_length(tvb);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2424: void",
      "2425: proto_register_AllJoyn(void)",
      "2426: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2436:     expert_module_t* expert_alljoyn;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2991:         &ett_alljoyn_ardp",
      "2992:     };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3005:     static ei_register_info ei[] = {",
      "3006:         { &ei_alljoyn_empty_arg,",
      "3007:             { \"alljoyn.empty_arg\", PI_MALFORMED, PI_ERROR,",
      "3008:                 \"Argument is empty\", EXPFILL }}",
      "3009:     };",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3004:     proto_register_field_array(proto_AllJoyn_ns, hf, array_length(hf));",
      "3005:     proto_register_subtree_array(ett, array_length(ett));",
      "3008:     proto_AllJoyn_ardp = proto_register_protocol(\"AllJoyn Reliable Datagram Protocol\", \"AllJoyn ARDP\", \"ardp\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3023:     expert_alljoyn = expert_register_protocol(proto_AllJoyn_mess);",
      "3024:     expert_register_field_array(expert_alljoyn, ei, array_length(ei));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "85c7a530eb87b60ab0368005b7148da76ca58fb6",
      "candidate_info": {
        "commit_hash": "85c7a530eb87b60ab0368005b7148da76ca58fb6",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/85c7a530eb87b60ab0368005b7148da76ca58fb6",
        "files": [
          "epan/dissectors/packet-alljoyn.c"
        ],
        "message": "AllJoyn: prevent an infinite loop\n\nDisplay an expert error when the argument is empty\n\nBug: 11607\nChange-Id: I8682eab8fe1822f784e848220ff90de4eb5e13ff\nReviewed-on: https://code.wireshark.org/review/11132\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 40caff2d1fb08262c84aaaa8ac584baa8866dd7c)\nConflicts:\n\tepan/dissectors/packet-alljoyn.c\nReviewed-on: https://code.wireshark.org/review/11140\n(cherry picked from commit 41e646ec4e668f690de8c92846f28e92d2396c6e)\nReviewed-on: https://code.wireshark.org/review/13751\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c"
          ],
          "candidate": [
            "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c": [
          "File: epan/dissectors/packet-alljoyn.c -> epan/dissectors/packet-alljoyn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"config.h\"",
          "25: #include <epan/packet.h>",
          "27: #include <glib.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <epan/expert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "197: static gint ett_alljoyn_ns_header = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196: static expert_field ei_alljoyn_empty_arg = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "655:           guint8       *signature_length)",
          "656: {",
          "657:     gint length;",
          "658:     const gchar *header_type_name = NULL;",
          "660:     switch(type_id)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "661:     gint saved_offset = offset;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1031:     if(offset > (gint)tvb_reported_length(tvb)) {",
          "1032:         offset = (gint)tvb_reported_length(tvb);",
          "1033:     }",
          "1035:     return offset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1037:     } else if (offset == saved_offset) {",
          "1040:         proto_tree_add_expert(field_tree, pinfo, &ei_alljoyn_empty_arg, tvb, offset, 0);",
          "1041:         offset = (gint)tvb_reported_length(tvb);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1822: void",
          "1823: proto_register_AllJoyn(void)",
          "1824: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1834:     expert_module_t* expert_alljoyn;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2287:         &ett_alljoyn_mess_body_parameters",
          "2288:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2301:     static ei_register_info ei[] = {",
          "2302:         { &ei_alljoyn_empty_arg,",
          "2303:             { \"alljoyn.empty_arg\", PI_MALFORMED, PI_ERROR,",
          "2304:                 \"Argument is empty\", EXPFILL }}",
          "2305:     };",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2300:     proto_register_field_array(proto_AllJoyn_ns, hf, array_length(hf));",
          "2301:     proto_register_subtree_array(ett, array_length(ett));",
          "2302: }",
          "2304: void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2319:     expert_alljoyn = expert_register_protocol(proto_AllJoyn_mess);",
          "2320:     expert_register_field_array(expert_alljoyn, ei, array_length(ei));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6585f2cfadf7faefd7f9ba76d2eeca6eb6d0093",
      "candidate_info": {
        "commit_hash": "f6585f2cfadf7faefd7f9ba76d2eeca6eb6d0093",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/f6585f2cfadf7faefd7f9ba76d2eeca6eb6d0093",
        "files": [
          "epan/dissectors/packet-alljoyn.c"
        ],
        "message": "AllJoyn: prevent an infinite loop\n\nDisplay an expert error when the argument is empty\n\nBug: 11607\nChange-Id: I8682eab8fe1822f784e848220ff90de4eb5e13ff\nReviewed-on: https://code.wireshark.org/review/11132\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 40caff2d1fb08262c84aaaa8ac584baa8866dd7c)\nReviewed-on: https://code.wireshark.org/review/11138",
        "before_after_code_files": [
          "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c"
          ],
          "candidate": [
            "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c": [
          "File: epan/dissectors/packet-alljoyn.c -> epan/dissectors/packet-alljoyn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"config.h\"",
          "25: #include <epan/packet.h>",
          "27: void proto_register_AllJoyn(void);",
          "28: void proto_reg_handoff_AllJoyn(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <epan/expert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "241: static gint ett_alljoyn_ns_header = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240: static expert_field ei_alljoyn_empty_arg = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "871: {",
          "872:     gint length;",
          "873:     gint padding_start;",
          "874:     const gchar *header_type_name = NULL;",
          "876:     switch(type_id)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "877:     gint saved_offset = offset;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1282:     if(offset > (gint)tvb_reported_length(tvb)) {",
          "1283:         offset = (gint)tvb_reported_length(tvb);",
          "1284:     }",
          "1286:     return offset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1288:     } else if (offset == saved_offset) {",
          "1291:         proto_tree_add_expert(field_tree, pinfo, &ei_alljoyn_empty_arg, tvb, offset, 0);",
          "1292:         offset = (gint)tvb_reported_length(tvb);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2424: void",
          "2425: proto_register_AllJoyn(void)",
          "2426: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2436:     expert_module_t* expert_alljoyn;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2991:         &ett_alljoyn_ardp",
          "2992:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3005:     static ei_register_info ei[] = {",
          "3006:         { &ei_alljoyn_empty_arg,",
          "3007:             { \"alljoyn.empty_arg\", PI_MALFORMED, PI_ERROR,",
          "3008:                 \"Argument is empty\", EXPFILL }}",
          "3009:     };",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3004:     proto_register_field_array(proto_AllJoyn_ns, hf, array_length(hf));",
          "3005:     proto_register_subtree_array(ett, array_length(ett));",
          "3008:     proto_AllJoyn_ardp = proto_register_protocol(\"AllJoyn Reliable Datagram Protocol\", \"AllJoyn ARDP\", \"ardp\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3023:     expert_alljoyn = expert_register_protocol(proto_AllJoyn_mess);",
          "3024:     expert_register_field_array(expert_alljoyn, ei, array_length(ei));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41e646ec4e668f690de8c92846f28e92d2396c6e",
      "candidate_info": {
        "commit_hash": "41e646ec4e668f690de8c92846f28e92d2396c6e",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/41e646ec4e668f690de8c92846f28e92d2396c6e",
        "files": [
          "epan/dissectors/packet-alljoyn.c"
        ],
        "message": "AllJoyn: prevent an infinite loop\n\nDisplay an expert error when the argument is empty\n\nBug: 11607\nChange-Id: I8682eab8fe1822f784e848220ff90de4eb5e13ff\nReviewed-on: https://code.wireshark.org/review/11132\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 40caff2d1fb08262c84aaaa8ac584baa8866dd7c)\nConflicts:\n\tepan/dissectors/packet-alljoyn.c\nReviewed-on: https://code.wireshark.org/review/11140",
        "before_after_code_files": [
          "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c"
          ],
          "candidate": [
            "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c": [
          "File: epan/dissectors/packet-alljoyn.c -> epan/dissectors/packet-alljoyn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"config.h\"",
          "25: #include <epan/packet.h>",
          "27: #include <glib.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <epan/expert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "197: static gint ett_alljoyn_ns_header = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196: static expert_field ei_alljoyn_empty_arg = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "655:           guint8       *signature_length)",
          "656: {",
          "657:     gint length;",
          "658:     const gchar *header_type_name = NULL;",
          "660:     switch(type_id)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "661:     gint saved_offset = offset;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1033:     if(offset > (gint)tvb_reported_length(tvb)) {",
          "1034:         offset = (gint)tvb_reported_length(tvb);",
          "1035:     }",
          "1037:     return offset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1039:     } else if (offset == saved_offset) {",
          "1042:         proto_tree_add_expert(field_tree, pinfo, &ei_alljoyn_empty_arg, tvb, offset, 0);",
          "1043:         offset = (gint)tvb_reported_length(tvb);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1824: void",
          "1825: proto_register_AllJoyn(void)",
          "1826: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1836:     expert_module_t* expert_alljoyn;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2289:         &ett_alljoyn_mess_body_parameters",
          "2290:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2303:     static ei_register_info ei[] = {",
          "2304:         { &ei_alljoyn_empty_arg,",
          "2305:             { \"alljoyn.empty_arg\", PI_MALFORMED, PI_ERROR,",
          "2306:                 \"Argument is empty\", EXPFILL }}",
          "2307:     };",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2302:     proto_register_field_array(proto_AllJoyn_ns, hf, array_length(hf));",
          "2303:     proto_register_subtree_array(ett, array_length(ett));",
          "2304: }",
          "2306: void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2321:     expert_alljoyn = expert_register_protocol(proto_AllJoyn_mess);",
          "2322:     expert_register_field_array(expert_alljoyn, ei, array_length(ei));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d3e818d2c670f9fd4cc7ac1ce179b2c514d60ce",
      "candidate_info": {
        "commit_hash": "4d3e818d2c670f9fd4cc7ac1ce179b2c514d60ce",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/4d3e818d2c670f9fd4cc7ac1ce179b2c514d60ce",
        "files": [
          "plugins/docsis/packet-ucd.c"
        ],
        "message": "[docsis->ucd] Add support for 6 new TLVs\n\nChange-Id: I65a40b1765f8433c47acbc34452d5336d7df84c1\nReviewed-on: https://code.wireshark.org/review/11788\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 4dea5dbc90f87a0b4805fd566dae39e02957cc1c)\nReviewed-on: https://code.wireshark.org/review/11863\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "plugins/docsis/packet-ucd.c||plugins/docsis/packet-ucd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "plugins/docsis/packet-ucd.c||plugins/docsis/packet-ucd.c": [
          "File: plugins/docsis/packet-ucd.c -> plugins/docsis/packet-ucd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <epan/packet.h>",
          "27: #include <epan/exceptions.h>",
          "29: #define UCD_SYMBOL_RATE 1",
          "30: #define UCD_FREQUENCY 2",
          "31: #define UCD_PREAMBLE 3",
          "32: #define UCD_BURST_DESCR 4",
          "33: #define UCD_BURST_DESCR5 5",
          "35: #define UCD_MODULATION 1",
          "36: #define UCD_DIFF_ENCODING 2",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include <epan/expert.h>",
          "36: #define UCD_EXT_PREAMBLE 6",
          "37: #define UCD_SCDMA_MODE_ENABLED 7",
          "38: #define UCD_MAINTAIN_POWER_SPECTRAL_DENSITY 15",
          "39: #define UCD_RANGING_REQUIRED 16",
          "40: #define UCD_RANGING_HOLD_OFF_PRIORITY_FIELD 18",
          "41: #define UCD_RANGING_CHANNEL_CLASS_ID 19",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78: static int hf_docsis_ucd_symbol_rate = -1;",
          "79: static int hf_docsis_ucd_frequency = -1;",
          "80: static int hf_docsis_ucd_preamble_pat = -1;",
          "81: static int hf_docsis_ucd_iuc = -1;",
          "83: static int hf_docsis_burst_mod_type = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: static int hf_docsis_ucd_ext_preamble_pat = -1;",
          "90: static int hf_docsis_ucd_scdma_mode_enabled = -1;",
          "91: static int hf_docsis_ucd_maintain_power_spectral_density = -1;",
          "92: static int hf_docsis_ucd_ranging_required = -1;",
          "93: static int hf_docsis_ucd_rnghoff_cm = -1;",
          "94: static int hf_docsis_ucd_rnghoff_erouter = -1;",
          "95: static int hf_docsis_ucd_rnghoff_emta = -1;",
          "96: static int hf_docsis_ucd_rnghoff_estb = -1;",
          "97: static int hf_docsis_ucd_rnghoff_rsvd = -1;",
          "98: static int hf_docsis_ucd_rnghoff_id_ext = -1;",
          "99: static int hf_docsis_ucd_chan_class_id_cm = -1;",
          "100: static int hf_docsis_ucd_chan_class_id_erouter = -1;",
          "101: static int hf_docsis_ucd_chan_class_id_emta = -1;",
          "102: static int hf_docsis_ucd_chan_class_id_estb = -1;",
          "103: static int hf_docsis_ucd_chan_class_id_rsvd = -1;",
          "104: static int hf_docsis_ucd_chan_class_id_id_ext = -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95: static int hf_docsis_rs_int_block = -1;",
          "96: static int hf_docsis_preamble_type = -1;",
          "99: static gint ett_docsis_ucd = -1;",
          "100: static gint ett_tlv = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: static expert_field ei_docsis_ucd_tlvlen_bad = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105:   {UCD_PREAMBLE,     \"Preamble Pattern\"},",
          "106:   {UCD_BURST_DESCR,  \"Burst Descriptor\"},",
          "107:   {UCD_BURST_DESCR5, \"Burst Descriptor DOCSIS 2.0\"},",
          "108:   {0, NULL}",
          "109: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:   {UCD_EXT_PREAMBLE, \"Extended Preamble Pattern\"},",
          "135:   {UCD_SCDMA_MODE_ENABLED, \"S-CDMA Mode Enabled\"},",
          "136:   {UCD_MAINTAIN_POWER_SPECTRAL_DENSITY, \"Maintain Power Spectral Density\"},",
          "137:   {UCD_RANGING_REQUIRED, \"Ranging Required\"},",
          "138:   {UCD_RANGING_HOLD_OFF_PRIORITY_FIELD, \"Ranging Hold-Off Priority Field\"},",
          "139:   {UCD_RANGING_CHANNEL_CLASS_ID, \"Ranging Channel Class ID\"},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "114:   {0, NULL}",
          "115: };",
          "117: static const value_string mod_vals[] = {",
          "118:   {1, \"QPSK\"},",
          "120:   {0, NULL}",
          "121: };",
          "",
          "[Removed Lines]",
          "119:   {2, \"QAM16\"},",
          "",
          "[Added Lines]",
          "149: static const value_string allow_inhibit_vals[] = {",
          "150:   {0, \"Ranging Allowed\"},",
          "151:   {1, \"Inhibit Initial Ranging\"},",
          "152:   {0, NULL},",
          "153: };",
          "155: static const value_string inhibit_allow_vals[] = {",
          "156:   {0, \"Inhibit Initial Ranging\"},",
          "157:   {1, \"Ranging Allowed\"},",
          "158:   {0, NULL},",
          "159: };",
          "163:   {2, \"16-QAM\"},",
          "164:   {3, \"8-QAM\"},",
          "165:   {4, \"32-QAM\"},",
          "166:   {5, \"64-QAM\"},",
          "167:   {6, \"128-QAM (SCDMA-only)\"},",
          "168:   {7, \"Reserved for C-DOCSIS\"},",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "146:   {0, NULL}",
          "147: };",
          "150: static void",
          "151: dissect_ucd (tvbuff_t * tvb, packet_info * pinfo, proto_tree * tree)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198: static const value_string ranging_req_vals[] = {",
          "199:   {0, \"No ranging required\"},",
          "200:   {1, \"Unicast initial ranging required\"},",
          "201:   {2, \"Broadcast initial ranging required\"},",
          "202:   {0, NULL}",
          "203: };",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "167:   if (upchid > 0)",
          "168:     col_add_fstr (pinfo->cinfo, COL_INFO,",
          "170:                   upchid - 1);",
          "171:   else",
          "172:     col_add_fstr (pinfo->cinfo, COL_INFO,",
          "174:                   upchid);",
          "176:   if (tree)",
          "177:     {",
          "178:       ucd_item =",
          "179:         proto_tree_add_protocol_format (tree, proto_docsis_ucd, tvb, 0, -1,",
          "181:       ucd_tree = proto_item_add_subtree (ucd_item, ett_docsis_ucd);",
          "182:       proto_tree_add_item (ucd_tree, hf_docsis_ucd_upstream_chid, tvb, 0, 1,",
          "183:                            ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "169:                   \"UCD Message:  Channel ID = %u (U%u)\", upchid,",
          "173:                   \"UCD Message:  Channel ID = %u (Telephony Return)\",",
          "180:                                         \"UCD Message\");",
          "",
          "[Added Lines]",
          "225:                   \"Type 2 UCD Message: Channel ID = %u (U%u)\", upchid,",
          "229:                   \"Type 2 UCD Message: Channel ID = %u (Telephony Return)\",",
          "236:                                         \"UCD Message (Type 2)\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "236:                                      pos, length, ENC_NA);",
          "237:                 pos = pos + length;",
          "238:                 break;",
          "239:               case UCD_BURST_DESCR:",
          "240:                 proto_tree_add_item (tlv_tree, hf_docsis_ucd_iuc, tvb,",
          "241:                                      pos++, 1, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "295:               case UCD_EXT_PREAMBLE:",
          "296:                 proto_tree_add_item (tlv_tree, hf_docsis_ucd_ext_preamble_pat, tvb,",
          "297:                                      pos, length, ENC_NA);",
          "298:                 pos = pos + length;",
          "299:                 break;",
          "300:               case UCD_SCDMA_MODE_ENABLED:",
          "301:                 if (length == 1)",
          "302:                   {",
          "303:                     proto_tree_add_item (tlv_tree, hf_docsis_ucd_scdma_mode_enabled,",
          "304:                                          tvb, pos, length, ENC_BIG_ENDIAN);",
          "305:                   }",
          "306:                 else",
          "307:                   {",
          "308:                     expert_add_info_format(pinfo, ucd_item, &ei_docsis_ucd_tlvlen_bad, \"Wrong TLV length: %u\", length);",
          "309:                   }",
          "310:                 pos = pos + length;",
          "311:                 break;",
          "312:               case UCD_MAINTAIN_POWER_SPECTRAL_DENSITY:",
          "313:                 if (length == 1)",
          "314:                   {",
          "315:                     proto_tree_add_item (tlv_tree, hf_docsis_ucd_maintain_power_spectral_density,",
          "316:                                          tvb, pos, length, ENC_BIG_ENDIAN);",
          "317:                   }",
          "318:                 else",
          "319:                   {",
          "320:                     expert_add_info_format(pinfo, ucd_item, &ei_docsis_ucd_tlvlen_bad, \"Wrong TLV length: %u\", length);",
          "321:                   }",
          "322:                 pos = pos + length;",
          "323:                 break;",
          "324:               case UCD_RANGING_REQUIRED:",
          "325:                 if (length == 1)",
          "326:                   {",
          "327:                     proto_tree_add_item (tlv_tree, hf_docsis_ucd_ranging_required,",
          "328:                                          tvb, pos, length, ENC_BIG_ENDIAN);",
          "329:                   }",
          "330:                 else",
          "331:                   {",
          "332:                     expert_add_info_format(pinfo, ucd_item, &ei_docsis_ucd_tlvlen_bad, \"Wrong TLV length: %u\", length);",
          "333:                   }",
          "334:                 pos = pos + length;",
          "335:                 break;",
          "336:               case UCD_RANGING_HOLD_OFF_PRIORITY_FIELD:",
          "337:                 if (length == 4)",
          "338:                   {",
          "339:                     proto_tree_add_item (tlv_tree, hf_docsis_ucd_rnghoff_cm, tvb,",
          "340:                                          pos, length, ENC_BIG_ENDIAN);",
          "341:                     proto_tree_add_item (tlv_tree, hf_docsis_ucd_rnghoff_erouter, tvb,",
          "342:                                          pos, length, ENC_BIG_ENDIAN);",
          "343:                     proto_tree_add_item (tlv_tree, hf_docsis_ucd_rnghoff_emta, tvb,",
          "344:                                          pos, length, ENC_BIG_ENDIAN);",
          "345:                     proto_tree_add_item (tlv_tree, hf_docsis_ucd_rnghoff_estb, tvb,",
          "346:                                          pos, length, ENC_BIG_ENDIAN);",
          "347:                     proto_tree_add_item (tlv_tree, hf_docsis_ucd_rnghoff_rsvd, tvb,",
          "348:                                          pos, length, ENC_BIG_ENDIAN);",
          "349:                     proto_tree_add_item (tlv_tree, hf_docsis_ucd_rnghoff_id_ext, tvb,",
          "350:                                          pos, length, ENC_BIG_ENDIAN);",
          "351:                   }",
          "352:                 else",
          "353:                   {",
          "354:                     expert_add_info_format(pinfo, ucd_item, &ei_docsis_ucd_tlvlen_bad, \"Wrong TLV length: %u\", length);",
          "355:                   }",
          "356:                 pos = pos + length;",
          "357:                 break;",
          "358:               case UCD_RANGING_CHANNEL_CLASS_ID:",
          "359:                 if (length == 4)",
          "360:                   {",
          "361:                     proto_tree_add_item (tlv_tree, hf_docsis_ucd_chan_class_id_cm, tvb,",
          "362:                                          pos, length, ENC_BIG_ENDIAN);",
          "363:                     proto_tree_add_item (tlv_tree, hf_docsis_ucd_chan_class_id_erouter, tvb,",
          "364:                                          pos, length, ENC_BIG_ENDIAN);",
          "365:                     proto_tree_add_item (tlv_tree, hf_docsis_ucd_chan_class_id_emta, tvb,",
          "366:                                          pos, length, ENC_BIG_ENDIAN);",
          "367:                     proto_tree_add_item (tlv_tree, hf_docsis_ucd_chan_class_id_estb, tvb,",
          "368:                                          pos, length, ENC_BIG_ENDIAN);",
          "369:                     proto_tree_add_item (tlv_tree, hf_docsis_ucd_chan_class_id_rsvd, tvb,",
          "370:                                          pos, length, ENC_BIG_ENDIAN);",
          "371:                     proto_tree_add_item (tlv_tree, hf_docsis_ucd_chan_class_id_id_ext, tvb,",
          "372:                                          pos, length, ENC_BIG_ENDIAN);",
          "373:                   }",
          "374:                 else",
          "375:                   {",
          "376:                     expert_add_info_format(pinfo, ucd_item, &ei_docsis_ucd_tlvlen_bad, \"Wrong TLV length: %u\", length);",
          "377:                   }",
          "378:                 pos = pos + length;",
          "379:                 break;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "620:       FT_BYTES, BASE_NONE, NULL, 0x0,",
          "621:       \"Preamble Superstring\", HFILL}",
          "622:     },",
          "623:     {&hf_docsis_ucd_iuc,",
          "624:      {\"Interval Usage Code\", \"docsis_ucd.iuc\",",
          "625:       FT_UINT8, BASE_DEC, VALS (iuc_vals), 0x0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "764:     {&hf_docsis_ucd_ext_preamble_pat,",
          "765:      {\"Extended Preamble Pattern\", \"docsis_ucd.extpreamble\",",
          "766:       FT_BYTES, BASE_NONE, NULL, 0x0,",
          "767:       \"Extended Preamble Superstring\", HFILL}",
          "768:     },",
          "769:     {&hf_docsis_ucd_scdma_mode_enabled,",
          "770:      {\"S-CDMA Mode Enabled\", \"docsis_ucd.scdma\",",
          "771:       FT_UINT8, BASE_DEC, VALS (on_off_vals), 0x0,",
          "772:       NULL, HFILL}",
          "773:     },",
          "774:     {&hf_docsis_ucd_maintain_power_spectral_density,",
          "775:      {\"Maintain Power Spectral Density\", \"docsis_ucd.maintpower\",",
          "776:       FT_UINT8, BASE_DEC, VALS (on_off_vals), 0x0,",
          "777:       NULL, HFILL}",
          "778:     },",
          "779:     {&hf_docsis_ucd_ranging_required,",
          "780:      {\"Ranging Required\", \"docsis_ucd.rangingreq\",",
          "781:       FT_UINT8, BASE_DEC, VALS (ranging_req_vals), 0x0,",
          "782:       NULL, HFILL}",
          "783:     },",
          "784:     {&hf_docsis_ucd_rnghoff_cm,",
          "785:      {\"Ranging Hold-Off (CM)\",\"docsis_ucd.rnghoffcm\",",
          "786:       FT_UINT32, BASE_DEC, VALS (allow_inhibit_vals), 0x1,",
          "787:       NULL, HFILL}",
          "788:     },",
          "789:     {&hf_docsis_ucd_rnghoff_erouter,",
          "790:      {\"Ranging Hold-Off (eRouter)\",",
          "791:       \"docsis_ucd.rnghofferouter\",",
          "792:       FT_UINT32, BASE_DEC, VALS (allow_inhibit_vals), 0x2,",
          "793:       NULL, HFILL}",
          "794:     },",
          "795:     {&hf_docsis_ucd_rnghoff_emta,",
          "796:      {\"Ranging Hold-Off (eMTA or EDVA)\",",
          "797:       \"docsis_ucd.rnghoffemta\",",
          "798:       FT_UINT32, BASE_DEC, VALS (allow_inhibit_vals), 0x4,",
          "799:       NULL, HFILL}",
          "800:     },",
          "801:     {&hf_docsis_ucd_rnghoff_estb,",
          "802:      {\"Ranging Hold-Off (DSG/eSTB)\",",
          "803:       \"docsis_ucd.rnghoffestb\",",
          "804:       FT_UINT32, BASE_DEC, VALS (allow_inhibit_vals), 0x8,",
          "805:       NULL, HFILL}",
          "806:     },",
          "807:     {&hf_docsis_ucd_rnghoff_rsvd,",
          "808:      {\"Reserved [0x000000]\",",
          "809:       \"docsis_ucd.rnghoffrsvd\",",
          "810:       FT_UINT32, BASE_HEX, NULL, 0xFFF0,",
          "811:       NULL, HFILL}",
          "812:     },",
          "813:     {&hf_docsis_ucd_rnghoff_id_ext,",
          "814:      {\"CM Ranging Class ID Extension\",",
          "815:       \"docsis_ucd.rngidext\",",
          "816:       FT_UINT32, BASE_HEX, NULL, 0xFFFF0000,",
          "817:       NULL, HFILL}",
          "818:     },",
          "819:     {&hf_docsis_ucd_chan_class_id_cm,",
          "820:      {\"Channel Class ID (CM)\",\"docsis_ucd.classidcm\",",
          "821:       FT_UINT32, BASE_DEC, VALS (inhibit_allow_vals), 0x1,",
          "822:       NULL, HFILL}",
          "823:     },",
          "824:     {&hf_docsis_ucd_chan_class_id_erouter,",
          "825:      {\"Channel Class ID (eRouter)\",",
          "826:       \"docsis_ucd.classiderouter\",",
          "827:       FT_UINT32, BASE_DEC, VALS (inhibit_allow_vals), 0x2,",
          "828:       NULL, HFILL}",
          "829:     },",
          "830:     {&hf_docsis_ucd_chan_class_id_emta,",
          "831:      {\"Channel Class ID (eMTA or EDVA)\",",
          "832:       \"docsis_ucd.classidemta\",",
          "833:       FT_UINT32, BASE_DEC, VALS (inhibit_allow_vals), 0x4,",
          "834:       NULL, HFILL}",
          "835:     },",
          "836:     {&hf_docsis_ucd_chan_class_id_estb,",
          "837:      {\"Channel Class ID (DSG/eSTB)\",",
          "838:       \"docsis_ucd.classidestb\",",
          "839:       FT_UINT32, BASE_DEC, VALS (inhibit_allow_vals), 0x8,",
          "840:       NULL, HFILL}",
          "841:     },",
          "842:     {&hf_docsis_ucd_chan_class_id_rsvd,",
          "843:      {\"Reserved [0x000000]\",",
          "844:       \"docsis_ucd.classidrsvd\",",
          "845:       FT_UINT32, BASE_HEX, NULL, 0xFFF0,",
          "846:       NULL, HFILL}",
          "847:     },",
          "848:     {&hf_docsis_ucd_chan_class_id_id_ext,",
          "849:      {\"CM Ranging Class ID Extension\",",
          "850:       \"docsis_ucd.classidext\",",
          "851:       FT_UINT32, BASE_HEX, NULL, 0xFFFF0000,",
          "852:       NULL, HFILL}",
          "853:     },",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "697:     },",
          "698:   };",
          "700:   static gint *ett[] = {",
          "701:     &ett_docsis_ucd,",
          "702:     &ett_tlv,",
          "703:   };",
          "705:   proto_docsis_ucd =",
          "706:     proto_register_protocol (\"DOCSIS Upstream Channel Descriptor\",",
          "707:                              \"DOCSIS UCD\", \"docsis_ucd\");",
          "709:   proto_register_field_array (proto_docsis_ucd, hf, array_length (hf));",
          "710:   proto_register_subtree_array (ett, array_length (ett));",
          "712:   register_dissector (\"docsis_ucd\", dissect_ucd, proto_docsis_ucd);",
          "713: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "931:   static ei_register_info ei[] = {",
          "932:     {&ei_docsis_ucd_tlvlen_bad, {\"docsis_ucd.tlvlen.bad\", PI_MALFORMED, PI_ERROR, \"Bad TLV length\", EXPFILL}},",
          "933:   };",
          "940:   expert_module_t* expert_docsis_ucd;",
          "948:   expert_docsis_ucd = expert_register_protocol(proto_docsis_ucd);",
          "949:   expert_register_field_array(expert_docsis_ucd, ei, array_length(ei));",
          "",
          "---------------"
        ]
      }
    }
  ]
}