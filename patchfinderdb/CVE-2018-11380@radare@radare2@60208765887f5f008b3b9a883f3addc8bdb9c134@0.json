{
  "cve_id": "CVE-2018-11380",
  "cve_desc": "The parse_import_ptr() function in radare2 2.5.0 allows remote attackers to cause a denial of service (heap-based out-of-bounds read and application crash) via a crafted Mach-O file.",
  "repo": "radare/radare2",
  "patch_hash": "60208765887f5f008b3b9a883f3addc8bdb9c134",
  "patch_info": {
    "commit_hash": "60208765887f5f008b3b9a883f3addc8bdb9c134",
    "repo": "radare/radare2",
    "commit_url": "https://github.com/radare/radare2/commit/60208765887f5f008b3b9a883f3addc8bdb9c134",
    "files": [
      "libr/bin/format/mach0/mach0.c"
    ],
    "message": "Fix #9970 - heap oobread in mach0 parser (#10026)",
    "before_after_code_files": [
      "libr/bin/format/mach0/mach0.c||libr/bin/format/mach0/mach0.c"
    ]
  },
  "patch_diff": {
    "libr/bin/format/mach0/mach0.c||libr/bin/format/mach0/mach0.c": [
      "File: libr/bin/format/mach0/mach0.c -> libr/bin/format/mach0/mach0.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1586:    bprintf (\"mach0-get-symbols: error\\n\");",
      "1587:    break;",
      "1588:   }",
      "1590:    symbols[j++].last = 0;",
      "1591:  }",
      "1593: #if 1",
      "",
      "[Removed Lines]",
      "1589:   if (parse_import_stub(bin, &symbols[j], i))",
      "",
      "[Added Lines]",
      "1589:   if (parse_import_stub(bin, &symbols[j], i)) {",
      "1591:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1663:  for (i = 0; i < bin->nsects; i++) {",
      "1664:   if ((bin->sects[i].flags & SECTION_TYPE) == stype) {",
      "1667:      sym = j;",
      "1668:      break;",
      "1669:     }",
      "1671:    reloc->offset = sym == -1 ? 0 : bin->sects[i].offset + sym * wordsize;",
      "1672:    reloc->addr = sym == -1 ? 0 : bin->sects[i].addr + sym * wordsize;",
      "1673:    return true;",
      "",
      "[Removed Lines]",
      "1665:    for (j=0, sym=-1; bin->sects[i].reserved1+j < bin->nindirectsyms; j++)",
      "1666:     if (idx == bin->indirectsyms[bin->sects[i].reserved1 + j]) {",
      "",
      "[Added Lines]",
      "1666:    for (j = 0, sym = -1; bin->sects[i].reserved1 + j < bin->nindirectsyms; j++) {",
      "1667:     int indidx = bin->sects[i].reserved1 + j;",
      "1668:     if (indidx < 0 || indidx >= bin->nindirectsyms) {",
      "1669:      break;",
      "1670:     }",
      "1671:     if (idx == bin->indirectsyms[indidx]) {",
      "1675:    }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1681:  int i, j, idx, stridx;",
      "1682:  const char *symstr;",
      "1685:   return NULL;",
      "1686:  if (bin->dysymtab.nundefsym < 1 || bin->dysymtab.nundefsym > 0xfffff) {",
      "1687:   return NULL;",
      "1688:  }",
      "",
      "[Removed Lines]",
      "1684:  if (!bin->symtab || !bin->symstr || !bin->sects || !bin->indirectsyms)",
      "",
      "[Added Lines]",
      "1689:  if (!bin->symtab || !bin->symstr || !bin->sects || !bin->indirectsyms) {",
      "1691:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "161625dc25cf889e4bdbc8506a3cd10615b0e818",
      "candidate_info": {
        "commit_hash": "161625dc25cf889e4bdbc8506a3cd10615b0e818",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/161625dc25cf889e4bdbc8506a3cd10615b0e818",
        "files": [
          "libr/bin/format/mach0/mach0.c"
        ],
        "message": "Fix assertion for bitcode mach0s ##bin",
        "before_after_code_files": [
          "libr/bin/format/mach0/mach0.c||libr/bin/format/mach0/mach0.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/format/mach0/mach0.c||libr/bin/format/mach0/mach0.c"
          ],
          "candidate": [
            "libr/bin/format/mach0/mach0.c||libr/bin/format/mach0/mach0.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/format/mach0/mach0.c||libr/bin/format/mach0/mach0.c": [
          "File: libr/bin/format/mach0/mach0.c -> libr/bin/format/mach0/mach0.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1777:  int j, s, stridx, symbols_size, symbols_count;",
          "1778:  ut32 to, from, i;",
          "1783:  symbols_count = (bin->dysymtab.nextdefsym + \\",
          "",
          "[Removed Lines]",
          "1780:  r_return_val_if_fail (bin && bin->symtab && bin->symstr, NULL);",
          "",
          "[Added Lines]",
          "1780:  r_return_val_if_fail (bin, NULL);",
          "1781:  if (!bin->symtab || !bin->symstr) {",
          "1782:   return NULL;",
          "1783:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1954: struct import_t* MACH0_(get_imports)(struct MACH0_(obj_t)* bin) {",
          "1955:  int i, j, idx, stridx;",
          "1959:  if (bin->dysymtab.nundefsym < 1 || bin->dysymtab.nundefsym > 0xfffff) {",
          "1960:   return NULL;",
          "",
          "[Removed Lines]",
          "1957:  r_return_val_if_fail (bin && bin->symtab && bin->symstr && bin->sects && bin->indirectsyms, NULL);",
          "",
          "[Added Lines]",
          "1960:  r_return_val_if_fail (bin && bin->sects, NULL);",
          "1961:  if (!bin->symtab || !bin->symstr || !bin->indirectsyms) {",
          "1962:   return NULL;",
          "1963:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d4ce2f49cb230479a5977b7d8e690056f64477e",
      "candidate_info": {
        "commit_hash": "4d4ce2f49cb230479a5977b7d8e690056f64477e",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/4d4ce2f49cb230479a5977b7d8e690056f64477e",
        "files": [
          "libr/bin/demangle.c",
          "libr/bin/format/mach0/mach0.c",
          "libr/bin/format/mach0/mach0.h",
          "libr/bin/mangling/cxx.c",
          "libr/bin/mangling/dlang.c",
          "libr/bin/mangling/msvc.c",
          "libr/bin/mangling/objc.c",
          "libr/bin/mangling/swift.c",
          "libr/bin/p/bin_mach0.c",
          "libr/core/cbin.c",
          "libr/core/cmd_search.c",
          "libr/core/visual.c",
          "libr/include/r_bin.h",
          "libr/include/r_core.h"
        ],
        "message": "Code cleanup in the mach0 parser ##refactor",
        "before_after_code_files": [
          "libr/bin/demangle.c||libr/bin/demangle.c",
          "libr/bin/format/mach0/mach0.c||libr/bin/format/mach0/mach0.c",
          "libr/bin/format/mach0/mach0.h||libr/bin/format/mach0/mach0.h",
          "libr/bin/mangling/cxx.c||libr/bin/mangling/cxx.c",
          "libr/bin/mangling/dlang.c||libr/bin/mangling/dlang.c",
          "libr/bin/mangling/msvc.c||libr/bin/mangling/msvc.c",
          "libr/bin/mangling/objc.c||libr/bin/mangling/objc.c",
          "libr/bin/mangling/swift.c||libr/bin/mangling/swift.c",
          "libr/bin/p/bin_mach0.c||libr/bin/p/bin_mach0.c",
          "libr/core/cbin.c||libr/core/cbin.c",
          "libr/core/cmd_search.c||libr/core/cmd_search.c",
          "libr/core/visual.c||libr/core/visual.c",
          "libr/include/r_bin.h||libr/include/r_bin.h",
          "libr/include/r_core.h||libr/include/r_core.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/format/mach0/mach0.c||libr/bin/format/mach0/mach0.c"
          ],
          "candidate": [
            "libr/bin/format/mach0/mach0.c||libr/bin/format/mach0/mach0.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/demangle.c||libr/bin/demangle.c": [
          "File: libr/bin/demangle.c -> libr/bin/demangle.c"
        ],
        "libr/bin/format/mach0/mach0.c||libr/bin/format/mach0/mach0.c": [
          "File: libr/bin/format/mach0/mach0.c -> libr/bin/format/mach0/mach0.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1757:  return false;",
          "1758: }",
          "1779:  bool found;",
          "1780:  const char *key = sdb_fmt (\"%s.%\"PFMT64x, name, addr);",
          "1781:  (void)sdb_ht_find (hash, key, &found);",
          "",
          "[Removed Lines]",
          "1760: #if 0",
          "1761: static ut64 get_text_base(struct MACH0_(obj_t)* bin) {",
          "1762:  ut64 ret = 0LL;",
          "1763:  struct section_t *sections;",
          "1764:  if ((sections = MACH0_(get_sections) (bin))) {",
          "1765:   int i;",
          "1766:   for (i = 0; !sections[i].last; i++) {",
          "1767:    if (strstr(sections[i].name, \"text\")) {",
          "1768:     ret =  sections[i].offset;",
          "1769:     break;",
          "1770:    }",
          "1771:   }",
          "1772:   free (sections);",
          "1773:  }",
          "1774:  return ret;",
          "1775: }",
          "1776: #endif",
          "1778: static int inSymtab(SdbHt *hash, struct symbol_t *symbols, const char *name, ut64 addr) {",
          "",
          "[Added Lines]",
          "1759: static int inSymtab(SdbHt *hash, const char *name, ut64 addr) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1786:  return false;",
          "1787: }",
          "1790:  const char *symstr;",
          "1791:  struct symbol_t *symbols;",
          "1792:  int j, s, stridx, symbols_size, symbols_count;",
          "1793:  ut32 to, from, i;",
          "1802:  symbols_count = (bin->dysymtab.nextdefsym + \\",
          "1803:    bin->dysymtab.nlocalsym + \\",
          "1804:    bin->dysymtab.nundefsym );",
          "1805:  symbols_count += bin->nsymtab;",
          "1807:  symbols_size = (symbols_count + 1) * 2 * sizeof (struct symbol_t);",
          "1809:  if (symbols_size < 1) {",
          "",
          "[Removed Lines]",
          "1789: struct symbol_t* MACH0_(get_symbols)(struct MACH0_(obj_t)* bin) {",
          "1794:  SdbHt *hash;",
          "1797:  if (!bin || !bin->symtab || !bin->symstr) {",
          "1798:   return NULL;",
          "1799:  }",
          "",
          "[Added Lines]",
          "1770: static char *get_name(struct MACH0_(obj_t)* mo, ut32 stridx, bool filter) {",
          "1772:  int i = 0;",
          "1773:  if (stridx > mo->symstrlen) {",
          "1774:   return NULL;",
          "1775:  }",
          "1776:  int len = mo->symstrlen - stridx;",
          "1777:  if (stridx >= 0 && stridx < mo->symstrlen) {",
          "1778:   symstr = (char*)mo->symstr + stridx;",
          "1779:  } else {",
          "1780:   symstr = \"???\";",
          "1781:  }",
          "1782:  for (i = 0; i < len; i++) {",
          "1783:   if ((ut8)(symstr[i] & 0xff) == 0xff || !symstr[i]) {",
          "1784:    len = i;",
          "1785:    break;",
          "1786:   }",
          "1787:  }",
          "1788:  if (len > 0) {",
          "1789:   char * res = r_str_ndup (symstr, len);",
          "1790:   if (filter) {",
          "1791:    r_str_filter (res, -1);",
          "1792:   }",
          "1793:   return res;",
          "1794:  }",
          "1795:  return NULL;",
          "1796: }",
          "1798: struct symbol_t* MACH0_(get_symbols)(struct MACH0_(obj_t)* bin) {",
          "1803:  r_return_val_if_fail (bin && bin->symtab && bin->symstr, NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1812:  if (!(symbols = calloc (1, symbols_size))) {",
          "1813:   return NULL;",
          "1814:  }",
          "1816:  j = 0; // symbol_idx",
          "1817:  for (s = 0; s < 2; s++) {",
          "1818:   switch (s) {",
          "",
          "[Removed Lines]",
          "1815:  hash = sdb_ht_new ();",
          "",
          "[Added Lines]",
          "1818:  SdbHt *hash = sdb_ht_new ();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1834:   if (from == to) {",
          "1835:    continue;",
          "1836:   }",
          "1839:   from = R_MIN (R_MAX (0, from), symbols_size / sizeof (struct symbol_t));",
          "1846:   int maxsymbols = symbols_size / sizeof (struct symbol_t);",
          "1847:   if (to > 0x500000) {",
          "1848:    bprintf (\"WARNING: corrupted mach0 header: symbol table is too big %d\\n\", to);",
          "",
          "[Removed Lines]",
          "1837: #define OLD 1",
          "1838: #if OLD",
          "1840:   to = R_MIN (to , symbols_size / sizeof (struct symbol_t));",
          "1841:   to = R_MIN (to, bin->nsymtab);",
          "1842: #else",
          "1843:   from = R_MIN (R_MAX (0, from), symbols_size/sizeof (struct symbol_t));",
          "1844:   to = symbols_count; //symbols_size/sizeof(struct symbol_t);",
          "1845: #endif",
          "",
          "[Added Lines]",
          "1842:   to = R_MIN (R_MIN (to, bin->nsymtab), symbols_size / sizeof (struct symbol_t));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1862:    } else {",
          "1863:     symbols[j].type = R_BIN_MACH0_SYMBOL_TYPE_LOCAL;",
          "1864:    }",
          "1865:    stridx = bin->symtab[i].n_strx;",
          "1898:    }",
          "1900:     symbols[j].name[0] = 0;",
          "1901:     j--;",
          "1902:    }",
          "",
          "[Removed Lines]",
          "1866:    if (stridx >= 0 && stridx < bin->symstrlen) {",
          "1867:     symstr = (char*)bin->symstr + stridx;",
          "1868:    } else {",
          "1869:     symstr = \"???\";",
          "1870:    }",
          "1871:    {",
          "1872:     int i = 0;",
          "1873:     int len = 0;",
          "1874:     len = bin->symstrlen - stridx;",
          "1875:     if (len > 0) {",
          "1876:      for (i = 0; i < len; i++) {",
          "1877:       if ((ut8)(symstr[i] & 0xff) == 0xff || !symstr[i]) {",
          "1878:        len = i;",
          "1879:        break;",
          "1880:       }",
          "1881:      }",
          "1882:      char *symstr_dup = NULL;",
          "1883:      if (len > 0) {",
          "1884:       symstr_dup = r_str_ndup (symstr, len);",
          "1885:      }",
          "1886:      if (!symstr_dup) {",
          "1887:       symbols[j].name[0] = 0;",
          "1888:      } else {",
          "1889:       r_str_ncpy (symbols[j].name, symstr_dup, R_BIN_MACH0_STRING_LENGTH);",
          "1890:       r_str_filter (symbols[j].name, -1);",
          "1891:       symbols[j].name[R_BIN_MACH0_STRING_LENGTH - 2] = 0;",
          "1892:      }",
          "1893:      free (symstr_dup);",
          "1894:     } else {",
          "1895:      symbols[j].name[0] = 0;",
          "1896:     }",
          "1897:     symbols[j].last = 0;",
          "1899:    if (inSymtab (hash, symbols, symbols[j].name, symbols[j].addr)) {",
          "",
          "[Added Lines]",
          "1865:    char *sym_name = get_name (bin, stridx, false);",
          "1866:    if (sym_name) {",
          "1867:     r_str_ncpy (symbols[j].name, sym_name, R_BIN_MACH0_STRING_LENGTH);",
          "1868:     free (sym_name);",
          "1870:    symbols[j].name[R_BIN_MACH0_STRING_LENGTH - 2] = 0;",
          "1871:    symbols[j].last = 0;",
          "1872:    if (inSymtab (hash, symbols[j].name, symbols[j].addr)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1913:   }",
          "1914:  }",
          "1918:  for (i = 0; i < bin->nsymtab; i++) {",
          "1919:   struct MACH0_(nlist) *st = &bin->symtab[i];",
          "1924:   stridx = st->n_strx;",
          "1933:   int section = st->n_sect;",
          "1934:   if (section == 1 && j < symbols_count) { // text ??st->n_type == 1)",
          "1937:    symbols[j].offset = addr_to_offset (bin, symbols[j].addr);",
          "1939:    if (st->n_type & N_EXT) {",
          "",
          "[Removed Lines]",
          "1916: #if 1",
          "1920: #if 0",
          "1921:   bprintf (\"stridx %d -> section %d type %d value = %d\\n\",",
          "1922:    st->n_strx, st->n_sect, st->n_type, st->n_value);",
          "1923: #endif",
          "1925:   if (stridx >= 0 && stridx < bin->symstrlen) {",
          "1926:    symstr = (char*)bin->symstr + stridx;",
          "1927:   } else {",
          "1928:    symstr = \"???\";",
          "1929:   }",
          "1936:    symbols[j].addr = st->n_value; // + text_base;",
          "",
          "[Added Lines]",
          "1898:    symbols[j].addr = st->n_value;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1941:    } else {",
          "1942:     symbols[j].type = R_BIN_MACH0_SYMBOL_TYPE_LOCAL;",
          "1943:    }",
          "1945:    symbols[j].name[R_BIN_MACH0_STRING_LENGTH - 1] = 0;",
          "1946:    symbols[j].last = 0;",
          "1948:     symbols[j].name[0] = 0;",
          "1949:    } else {",
          "1950:     j++;",
          "1951:    }",
          "1952:   }",
          "1953:  }",
          "1955:  sdb_ht_free (hash);",
          "1956:  symbols[j].last = 1;",
          "1957:  return symbols;",
          "",
          "[Removed Lines]",
          "1944:    strncpy (symbols[j].name, symstr, R_BIN_MACH0_STRING_LENGTH);",
          "1947:    if (inSymtab (hash, symbols, symbols[j].name, symbols[j].addr)) {",
          "1954: #endif",
          "",
          "[Added Lines]",
          "1906:    char *sym_name = get_name (bin, stridx, false);",
          "1907:    if (sym_name) {",
          "1908:     strncpy (symbols[j].name, sym_name, R_BIN_MACH0_STRING_LENGTH);",
          "1909:     free (sym_name);",
          "1910:    } else {",
          "1911:     symbols[j].name[0] = 0;",
          "1912:    }",
          "1915:    if (inSymtab (hash, symbols[j].name, symbols[j].addr)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1975:  reloc->addend = 0;",
          "1976: #define CASE(T) case ((T) / 8): reloc->type = R_BIN_RELOC_ ## T; break",
          "1977:  switch (wordsize) {",
          "1983:  }",
          "1984: #undef CASE",
          "",
          "[Removed Lines]",
          "1978:   CASE(8);",
          "1979:   CASE(16);",
          "1980:   CASE(32);",
          "1981:   CASE(64);",
          "1982:   default: return false;",
          "",
          "[Added Lines]",
          "1945:  CASE(8);",
          "1946:  CASE(16);",
          "1947:  CASE(32);",
          "1948:  CASE(64);",
          "1949:  default: return false;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2004: }",
          "2006: struct import_t* MACH0_(get_imports)(struct MACH0_(obj_t)* bin) {",
          "2008:  int i, j, idx, stridx;",
          "2014:  if (bin->dysymtab.nundefsym < 1 || bin->dysymtab.nundefsym > 0xfffff) {",
          "2015:   return NULL;",
          "2016:  }",
          "2018:   return NULL;",
          "2019:  }",
          "2020:  for (i = j = 0; i < bin->dysymtab.nundefsym; i++) {",
          "",
          "[Removed Lines]",
          "2007:  struct import_t *imports;",
          "2009:  const char *symstr;",
          "2011:  if (!bin->symtab || !bin->symstr || !bin->sects || !bin->indirectsyms) {",
          "2012:   return NULL;",
          "2013:  }",
          "2017:  if (!(imports = malloc ((bin->dysymtab.nundefsym + 1) * sizeof (struct import_t)))) {",
          "",
          "[Added Lines]",
          "1976:  r_return_val_if_fail (bin && bin->symtab && bin->symstr && bin->sects && bin->indirectsyms, NULL);",
          "1982:  struct import_t *imports = calloc (bin->dysymtab.nundefsym + 1, sizeof (struct import_t));",
          "1983:  if (!imports) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2025:    return NULL;",
          "2026:   }",
          "2027:   stridx = bin->symtab[idx].n_strx;",
          "2030:   } else {",
          "2034:    continue;",
          "2035:   }",
          "2058:   imports[j].ord = i;",
          "2059:   imports[j++].last = 0;",
          "2060:  }",
          "",
          "[Removed Lines]",
          "2028:   if (stridx >= 0 && stridx < bin->symstrlen) {",
          "2029:    symstr = (char *)bin->symstr + stridx;",
          "2031:    symstr = \"\";",
          "2032:   }",
          "2033:   if (!*symstr) {",
          "2036:   {",
          "2037:    int i = 0;",
          "2038:    int len = 0;",
          "2039:    char *symstr_dup = NULL;",
          "2040:    len = bin->symstrlen - stridx;",
          "2041:    imports[j].name[0] = 0;",
          "2042:    if (len > 0) {",
          "2043:     for (i = 0; i < len; i++) {",
          "2044:      if ((unsigned char)symstr[i] == 0xff || !symstr[i]) {",
          "2045:       len = i;",
          "2046:       break;",
          "2047:      }",
          "2048:     }",
          "2049:     symstr_dup = r_str_ndup (symstr, len);",
          "2050:     if (symstr_dup) {",
          "2051:      r_str_ncpy (imports[j].name, symstr_dup, R_BIN_MACH0_STRING_LENGTH);",
          "2052:      r_str_filter (imports[j].name, - 1);",
          "2053:      imports[j].name[R_BIN_MACH0_STRING_LENGTH - 2] = 0;",
          "2054:      free (symstr_dup);",
          "2055:     }",
          "2056:    }",
          "2057:   }",
          "",
          "[Added Lines]",
          "1994:   char *imp_name = get_name (bin, stridx, false);",
          "1995:   if (imp_name) {",
          "1996:    r_str_ncpy (imports[j].name, imp_name, R_BIN_MACH0_STRING_LENGTH);",
          "1997:    free (imp_name);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2289: }",
          "2291: struct addr_t* MACH0_(get_entrypoint)(struct MACH0_(obj_t)* bin) {",
          "2293:  int i;",
          "2299:   return NULL;",
          "2300:  }",
          "2301:  if (bin->entry) {",
          "",
          "[Removed Lines]",
          "2292:  struct addr_t *entry;",
          "2295:  if (!bin->entry && !bin->sects) {",
          "2296:   return NULL;",
          "2297:  }",
          "2298:  if (!(entry = calloc (1, sizeof (struct addr_t)))) {",
          "",
          "[Added Lines]",
          "2237:  r_return_val_if_fail (bin && bin->entry && bin->sects, NULL);",
          "2239:  struct addr_t *entry = R_NEW0 (struct addr_t);;",
          "2240:  if (!entry) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2477:  return bin? MACH0_(get_cputype_from_hdr) (&bin->hdr): \"unknown\";",
          "2478: }",
          "2627:   }",
          "2630: }",
          "2633: char* MACH0_(get_cpusubtype)(struct MACH0_(obj_t)* bin) {",
          "2634:  if (bin) {",
          "",
          "[Removed Lines]",
          "2482: char* MACH0_(get_cpusubtype_from_hdr)(struct MACH0_(mach_header) *hdr) {",
          "2483:  if (hdr) {",
          "2484:   switch (hdr->cputype) {",
          "2485:   case CPU_TYPE_VAX:",
          "2486:    switch (hdr->cpusubtype) {",
          "2487:    case CPU_SUBTYPE_VAX_ALL: return strdup (\"all\");",
          "2488:    case CPU_SUBTYPE_VAX780: return strdup (\"vax780\");",
          "2489:    case CPU_SUBTYPE_VAX785: return strdup (\"vax785\");",
          "2490:    case CPU_SUBTYPE_VAX750: return strdup (\"vax750\");",
          "2491:    case CPU_SUBTYPE_VAX730: return strdup (\"vax730\");",
          "2492:    case CPU_SUBTYPE_UVAXI:  return strdup (\"uvaxI\");",
          "2493:    case CPU_SUBTYPE_UVAXII: return strdup (\"uvaxII\");",
          "2494:    case CPU_SUBTYPE_VAX8200: return strdup (\"vax8200\");",
          "2495:    case CPU_SUBTYPE_VAX8500: return strdup (\"vax8500\");",
          "2496:    case CPU_SUBTYPE_VAX8600: return strdup (\"vax8600\");",
          "2497:    case CPU_SUBTYPE_VAX8650: return strdup (\"vax8650\");",
          "2498:    case CPU_SUBTYPE_VAX8800: return strdup (\"vax8800\");",
          "2499:    case CPU_SUBTYPE_UVAXIII: return strdup (\"uvaxIII\");",
          "2500:    default:   return strdup (\"Unknown vax subtype\");",
          "2501:    }",
          "2502:   case CPU_TYPE_MC680x0:",
          "2503:    switch (hdr->cpusubtype) {",
          "2504:    case CPU_SUBTYPE_MC68030: return strdup (\"mc68030\");",
          "2505:    case CPU_SUBTYPE_MC68040: return strdup (\"mc68040\");",
          "2506:    case CPU_SUBTYPE_MC68030_ONLY: return strdup (\"mc68030 only\");",
          "2507:    default:   return strdup (\"Unknown mc680x0 subtype\");",
          "2508:    }",
          "2509:   case CPU_TYPE_I386:",
          "2510:    switch (hdr->cpusubtype) {",
          "2511:    case CPU_SUBTYPE_386:    return strdup (\"386\");",
          "2512:    case CPU_SUBTYPE_486:    return strdup (\"486\");",
          "2513:    case CPU_SUBTYPE_486SX:   return strdup (\"486sx\");",
          "2514:    case CPU_SUBTYPE_PENT:    return strdup (\"Pentium\");",
          "2515:    case CPU_SUBTYPE_PENTPRO:   return strdup (\"Pentium Pro\");",
          "2516:    case CPU_SUBTYPE_PENTII_M3:   return strdup (\"Pentium 3 M3\");",
          "2517:    case CPU_SUBTYPE_PENTII_M5:   return strdup (\"Pentium 3 M5\");",
          "2518:    case CPU_SUBTYPE_CELERON:   return strdup (\"Celeron\");",
          "2519:    case CPU_SUBTYPE_CELERON_MOBILE: return strdup (\"Celeron Mobile\");",
          "2520:    case CPU_SUBTYPE_PENTIUM_3:  return strdup (\"Pentium 3\");",
          "2521:    case CPU_SUBTYPE_PENTIUM_3_M:  return strdup (\"Pentium 3 M\");",
          "2522:    case CPU_SUBTYPE_PENTIUM_3_XEON: return strdup (\"Pentium 3 Xeon\");",
          "2523:    case CPU_SUBTYPE_PENTIUM_M:  return strdup (\"Pentium Mobile\");",
          "2524:    case CPU_SUBTYPE_PENTIUM_4:  return strdup (\"Pentium 4\");",
          "2525:    case CPU_SUBTYPE_PENTIUM_4_M:  return strdup (\"Pentium 4 M\");",
          "2526:    case CPU_SUBTYPE_ITANIUM:  return strdup (\"Itanium\");",
          "2527:    case CPU_SUBTYPE_ITANIUM_2:  return strdup (\"Itanium 2\");",
          "2528:    case CPU_SUBTYPE_XEON:   return strdup (\"Xeon\");",
          "2529:    case CPU_SUBTYPE_XEON_MP:  return strdup (\"Xeon MP\");",
          "2530:    default:    return strdup (\"Unknown i386 subtype\");",
          "2531:    }",
          "2532:   case CPU_TYPE_X86_64:",
          "2533:    switch (hdr->cpusubtype & 0xff) {",
          "2534:    case CPU_SUBTYPE_X86_64_ALL: return strdup (\"x86 64 all\");",
          "2535:    case CPU_SUBTYPE_X86_ARCH1: return strdup (\"x86 arch 1\");",
          "2536:    default:   return strdup (\"Unknown x86 subtype\");",
          "2537:    }",
          "2538:   case CPU_TYPE_MC88000:",
          "2539:    switch (hdr->cpusubtype & 0xff) {",
          "2540:    case CPU_SUBTYPE_MC88000_ALL: return strdup (\"all\");",
          "2541:    case CPU_SUBTYPE_MC88100: return strdup (\"mc88100\");",
          "2542:    case CPU_SUBTYPE_MC88110: return strdup (\"mc88110\");",
          "2543:    default:   return strdup (\"Unknown mc88000 subtype\");",
          "2544:    }",
          "2545:   case CPU_TYPE_MC98000:",
          "2546:    switch (hdr->cpusubtype & 0xff) {",
          "2547:    case CPU_SUBTYPE_MC98000_ALL: return strdup (\"all\");",
          "2548:    case CPU_SUBTYPE_MC98601: return strdup (\"mc98601\");",
          "2549:    default:   return strdup (\"Unknown mc98000 subtype\");",
          "2550:    }",
          "2551:   case CPU_TYPE_HPPA:",
          "2552:    switch (hdr->cpusubtype & 0xff) {",
          "2553:    case CPU_SUBTYPE_HPPA_7100: return strdup (\"hppa7100\");",
          "2554:    case CPU_SUBTYPE_HPPA_7100LC: return strdup (\"hppa7100LC\");",
          "2555:    default:   return strdup (\"Unknown hppa subtype\");",
          "2556:    }",
          "2557:   case CPU_TYPE_ARM64:",
          "2558:    return strdup (\"v8\");",
          "2559:   case CPU_TYPE_ARM:",
          "2560:    switch (hdr->cpusubtype & 0xff) {",
          "2561:    case CPU_SUBTYPE_ARM_ALL:",
          "2562:     return strdup (\"all\");",
          "2563:    case CPU_SUBTYPE_ARM_V4T:",
          "2564:     return strdup (\"v4t\");",
          "2565:    case CPU_SUBTYPE_ARM_V5:",
          "2566:     return strdup (\"v5\");",
          "2567:    case CPU_SUBTYPE_ARM_V6:",
          "2568:     return strdup (\"v6\");",
          "2569:    case CPU_SUBTYPE_ARM_XSCALE:",
          "2570:     return strdup (\"xscale\");",
          "2571:    case CPU_SUBTYPE_ARM_V7:",
          "2572:     return strdup (\"v7\");",
          "2573:    case CPU_SUBTYPE_ARM_V7F:",
          "2574:     return strdup (\"v7f\");",
          "2575:    case CPU_SUBTYPE_ARM_V7S:",
          "2576:     return strdup (\"v7s\");",
          "2577:    case CPU_SUBTYPE_ARM_V7K:",
          "2578:     return strdup (\"v7k\");",
          "2579:    case CPU_SUBTYPE_ARM_V7M:",
          "2580:     return strdup (\"v7m\");",
          "2581:    case CPU_SUBTYPE_ARM_V7EM:",
          "2582:     return strdup (\"v7em\");",
          "2583:    default:",
          "2584:     return r_str_newf (\"unknown ARM subtype %d\", hdr->cpusubtype & 0xff);",
          "2585:    }",
          "2586:   case CPU_TYPE_SPARC:",
          "2587:    switch (hdr->cpusubtype & 0xff) {",
          "2588:    case CPU_SUBTYPE_SPARC_ALL: return strdup (\"all\");",
          "2589:    default:   return strdup (\"Unknown sparc subtype\");",
          "2590:    }",
          "2591:   case CPU_TYPE_MIPS:",
          "2592:    switch (hdr->cpusubtype & 0xff) {",
          "2593:    case CPU_SUBTYPE_MIPS_ALL: return strdup (\"all\");",
          "2594:    case CPU_SUBTYPE_MIPS_R2300: return strdup (\"r2300\");",
          "2595:    case CPU_SUBTYPE_MIPS_R2600: return strdup (\"r2600\");",
          "2596:    case CPU_SUBTYPE_MIPS_R2800: return strdup (\"r2800\");",
          "2597:    case CPU_SUBTYPE_MIPS_R2000a: return strdup (\"r2000a\");",
          "2598:    case CPU_SUBTYPE_MIPS_R2000: return strdup (\"r2000\");",
          "2599:    case CPU_SUBTYPE_MIPS_R3000a: return strdup (\"r3000a\");",
          "2600:    case CPU_SUBTYPE_MIPS_R3000: return strdup (\"r3000\");",
          "2601:    default:   return strdup (\"Unknown mips subtype\");",
          "2602:    }",
          "2603:   case CPU_TYPE_I860:",
          "2604:    switch (hdr->cpusubtype & 0xff) {",
          "2605:    case CPU_SUBTYPE_I860_ALL: return strdup (\"all\");",
          "2606:    case CPU_SUBTYPE_I860_860: return strdup (\"860\");",
          "2607:    default:   return strdup (\"Unknown i860 subtype\");",
          "2608:    }",
          "2609:   case CPU_TYPE_POWERPC:",
          "2610:   case CPU_TYPE_POWERPC64:",
          "2611:    switch (hdr->cpusubtype & 0xff) {",
          "2612:    case CPU_SUBTYPE_POWERPC_ALL: return strdup (\"all\");",
          "2613:    case CPU_SUBTYPE_POWERPC_601: return strdup (\"601\");",
          "2614:    case CPU_SUBTYPE_POWERPC_602: return strdup (\"602\");",
          "2615:    case CPU_SUBTYPE_POWERPC_603: return strdup (\"603\");",
          "2616:    case CPU_SUBTYPE_POWERPC_603e: return strdup (\"603e\");",
          "2617:    case CPU_SUBTYPE_POWERPC_603ev: return strdup (\"603ev\");",
          "2618:    case CPU_SUBTYPE_POWERPC_604: return strdup (\"604\");",
          "2619:    case CPU_SUBTYPE_POWERPC_604e: return strdup (\"604e\");",
          "2620:    case CPU_SUBTYPE_POWERPC_620: return strdup (\"620\");",
          "2621:    case CPU_SUBTYPE_POWERPC_750: return strdup (\"750\");",
          "2622:    case CPU_SUBTYPE_POWERPC_7400: return strdup (\"7400\");",
          "2623:    case CPU_SUBTYPE_POWERPC_7450: return strdup (\"7450\");",
          "2624:    case CPU_SUBTYPE_POWERPC_970: return strdup (\"970\");",
          "2625:    default:   return strdup (\"Unknown ppc subtype\");",
          "2626:    }",
          "2628:  }",
          "2629:  return strdup (\"Unknown cputype\");",
          "",
          "[Added Lines]",
          "2422: static const char *cpusubtype_tostring (ut32 cputype, ut32 cpusubtype) {",
          "2423:  switch (cputype) {",
          "2424:  case CPU_TYPE_VAX:",
          "2425:   switch (cpusubtype) {",
          "2426:   case CPU_SUBTYPE_VAX_ALL: return \"all\";",
          "2427:   case CPU_SUBTYPE_VAX780: return \"vax780\";",
          "2428:   case CPU_SUBTYPE_VAX785: return \"vax785\";",
          "2429:   case CPU_SUBTYPE_VAX750: return \"vax750\";",
          "2430:   case CPU_SUBTYPE_VAX730: return \"vax730\";",
          "2431:   case CPU_SUBTYPE_UVAXI:  return \"uvaxI\";",
          "2432:   case CPU_SUBTYPE_UVAXII: return \"uvaxII\";",
          "2433:   case CPU_SUBTYPE_VAX8200: return \"vax8200\";",
          "2434:   case CPU_SUBTYPE_VAX8500: return \"vax8500\";",
          "2435:   case CPU_SUBTYPE_VAX8600: return \"vax8600\";",
          "2436:   case CPU_SUBTYPE_VAX8650: return \"vax8650\";",
          "2437:   case CPU_SUBTYPE_VAX8800: return \"vax8800\";",
          "2438:   case CPU_SUBTYPE_UVAXIII: return \"uvaxIII\";",
          "2439:   default:   return \"Unknown vax subtype\";",
          "2441:  case CPU_TYPE_MC680x0:",
          "2442:   switch (cpusubtype) {",
          "2443:   case CPU_SUBTYPE_MC68030: return \"mc68030\";",
          "2444:   case CPU_SUBTYPE_MC68040: return \"mc68040\";",
          "2445:   case CPU_SUBTYPE_MC68030_ONLY: return \"mc68030 only\";",
          "2446:   default:   return \"Unknown mc680x0 subtype\";",
          "2447:   }",
          "2448:  case CPU_TYPE_I386:",
          "2449:   switch (cpusubtype) {",
          "2450:   case CPU_SUBTYPE_386:    return \"386\";",
          "2451:   case CPU_SUBTYPE_486:    return \"486\";",
          "2452:   case CPU_SUBTYPE_486SX:   return \"486sx\";",
          "2453:   case CPU_SUBTYPE_PENT:    return \"Pentium\";",
          "2454:   case CPU_SUBTYPE_PENTPRO:   return \"Pentium Pro\";",
          "2455:   case CPU_SUBTYPE_PENTII_M3:   return \"Pentium 3 M3\";",
          "2456:   case CPU_SUBTYPE_PENTII_M5:   return \"Pentium 3 M5\";",
          "2457:   case CPU_SUBTYPE_CELERON:   return \"Celeron\";",
          "2458:   case CPU_SUBTYPE_CELERON_MOBILE: return \"Celeron Mobile\";",
          "2459:   case CPU_SUBTYPE_PENTIUM_3:  return \"Pentium 3\";",
          "2460:   case CPU_SUBTYPE_PENTIUM_3_M:  return \"Pentium 3 M\";",
          "2461:   case CPU_SUBTYPE_PENTIUM_3_XEON: return \"Pentium 3 Xeon\";",
          "2462:   case CPU_SUBTYPE_PENTIUM_M:  return \"Pentium Mobile\";",
          "2463:   case CPU_SUBTYPE_PENTIUM_4:  return \"Pentium 4\";",
          "2464:   case CPU_SUBTYPE_PENTIUM_4_M:  return \"Pentium 4 M\";",
          "2465:   case CPU_SUBTYPE_ITANIUM:  return \"Itanium\";",
          "2466:   case CPU_SUBTYPE_ITANIUM_2:  return \"Itanium 2\";",
          "2467:   case CPU_SUBTYPE_XEON:   return \"Xeon\";",
          "2468:   case CPU_SUBTYPE_XEON_MP:  return \"Xeon MP\";",
          "2469:   default:    return \"Unknown i386 subtype\";",
          "2470:   }",
          "2471:  case CPU_TYPE_X86_64:",
          "2472:   switch (cpusubtype & 0xff) {",
          "2473:   case CPU_SUBTYPE_X86_64_ALL: return \"x86 64 all\";",
          "2474:   case CPU_SUBTYPE_X86_ARCH1: return \"x86 arch 1\";",
          "2475:   default:   return \"Unknown x86 subtype\";",
          "2476:   }",
          "2477:  case CPU_TYPE_MC88000:",
          "2478:   switch (cpusubtype & 0xff) {",
          "2479:   case CPU_SUBTYPE_MC88000_ALL: return \"all\";",
          "2480:   case CPU_SUBTYPE_MC88100: return \"mc88100\";",
          "2481:   case CPU_SUBTYPE_MC88110: return \"mc88110\";",
          "2482:   default:   return \"Unknown mc88000 subtype\";",
          "2483:   }",
          "2484:  case CPU_TYPE_MC98000:",
          "2485:   switch (cpusubtype & 0xff) {",
          "2486:   case CPU_SUBTYPE_MC98000_ALL: return \"all\";",
          "2487:   case CPU_SUBTYPE_MC98601: return \"mc98601\";",
          "2488:   default:   return \"Unknown mc98000 subtype\";",
          "2489:   }",
          "2490:  case CPU_TYPE_HPPA:",
          "2491:   switch (cpusubtype & 0xff) {",
          "2492:   case CPU_SUBTYPE_HPPA_7100: return \"hppa7100\";",
          "2493:   case CPU_SUBTYPE_HPPA_7100LC: return \"hppa7100LC\";",
          "2494:   default:   return \"Unknown hppa subtype\";",
          "2495:   }",
          "2496:  case CPU_TYPE_ARM64:",
          "2497:   return \"v8\";",
          "2498:  case CPU_TYPE_ARM:",
          "2499:   switch (cpusubtype & 0xff) {",
          "2500:   case CPU_SUBTYPE_ARM_ALL:",
          "2501:    return \"all\";",
          "2502:   case CPU_SUBTYPE_ARM_V4T:",
          "2503:    return \"v4t\";",
          "2504:   case CPU_SUBTYPE_ARM_V5:",
          "2505:    return \"v5\";",
          "2506:   case CPU_SUBTYPE_ARM_V6:",
          "2507:    return \"v6\";",
          "2508:   case CPU_SUBTYPE_ARM_XSCALE:",
          "2509:    return \"xscale\";",
          "2510:   case CPU_SUBTYPE_ARM_V7:",
          "2511:    return \"v7\";",
          "2512:   case CPU_SUBTYPE_ARM_V7F:",
          "2513:    return \"v7f\";",
          "2514:   case CPU_SUBTYPE_ARM_V7S:",
          "2515:    return \"v7s\";",
          "2516:   case CPU_SUBTYPE_ARM_V7K:",
          "2517:    return \"v7k\";",
          "2518:   case CPU_SUBTYPE_ARM_V7M:",
          "2519:    return \"v7m\";",
          "2520:   case CPU_SUBTYPE_ARM_V7EM:",
          "2521:    return \"v7em\";",
          "2522:   default:",
          "2523:    eprintf (\"Unknown arm subtype %d\\n\", cpusubtype & 0xff);",
          "2524:    return \"unknown arm subtype\";",
          "2525:   }",
          "2526:  case CPU_TYPE_SPARC:",
          "2527:   switch (cpusubtype & 0xff) {",
          "2528:   case CPU_SUBTYPE_SPARC_ALL: return \"all\";",
          "2529:   default:   return \"Unknown sparc subtype\";",
          "2530:   }",
          "2531:  case CPU_TYPE_MIPS:",
          "2532:   switch (cpusubtype & 0xff) {",
          "2533:   case CPU_SUBTYPE_MIPS_ALL: return \"all\";",
          "2534:   case CPU_SUBTYPE_MIPS_R2300: return \"r2300\";",
          "2535:   case CPU_SUBTYPE_MIPS_R2600: return \"r2600\";",
          "2536:   case CPU_SUBTYPE_MIPS_R2800: return \"r2800\";",
          "2537:   case CPU_SUBTYPE_MIPS_R2000a: return \"r2000a\";",
          "2538:   case CPU_SUBTYPE_MIPS_R2000: return \"r2000\";",
          "2539:   case CPU_SUBTYPE_MIPS_R3000a: return \"r3000a\";",
          "2540:   case CPU_SUBTYPE_MIPS_R3000: return \"r3000\";",
          "2541:   default:   return \"Unknown mips subtype\";",
          "2542:   }",
          "2543:  case CPU_TYPE_I860:",
          "2544:   switch (cpusubtype & 0xff) {",
          "2545:   case CPU_SUBTYPE_I860_ALL: return \"all\";",
          "2546:   case CPU_SUBTYPE_I860_860: return \"860\";",
          "2547:   default:   return \"Unknown i860 subtype\";",
          "2548:   }",
          "2549:  case CPU_TYPE_POWERPC:",
          "2550:  case CPU_TYPE_POWERPC64:",
          "2551:   switch (cpusubtype & 0xff) {",
          "2552:   case CPU_SUBTYPE_POWERPC_ALL: return \"all\";",
          "2553:   case CPU_SUBTYPE_POWERPC_601: return \"601\";",
          "2554:   case CPU_SUBTYPE_POWERPC_602: return \"602\";",
          "2555:   case CPU_SUBTYPE_POWERPC_603: return \"603\";",
          "2556:   case CPU_SUBTYPE_POWERPC_603e: return \"603e\";",
          "2557:   case CPU_SUBTYPE_POWERPC_603ev: return \"603ev\";",
          "2558:   case CPU_SUBTYPE_POWERPC_604: return \"604\";",
          "2559:   case CPU_SUBTYPE_POWERPC_604e: return \"604e\";",
          "2560:   case CPU_SUBTYPE_POWERPC_620: return \"620\";",
          "2561:   case CPU_SUBTYPE_POWERPC_750: return \"750\";",
          "2562:   case CPU_SUBTYPE_POWERPC_7400: return \"7400\";",
          "2563:   case CPU_SUBTYPE_POWERPC_7450: return \"7450\";",
          "2564:   case CPU_SUBTYPE_POWERPC_970: return \"970\";",
          "2565:   default:   return \"Unknown ppc subtype\";",
          "2566:   }",
          "2567:  }",
          "2568:  return \"Unknown cputype\";",
          "2571: char* MACH0_(get_cpusubtype_from_hdr)(struct MACH0_(mach_header) *hdr) {",
          "2572:  r_return_val_if_fail (hdr, NULL);",
          "2573:  return strdup (cpusubtype_tostring (hdr->cputype, hdr->cpusubtype));",
          "2574: }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2637:  return strdup (\"Unknown\");",
          "2638: }",
          "2641:  return (bin && bin->hdr.filetype == MH_EXECUTE && bin->hdr.flags & MH_PIE);",
          "2642: }",
          "2645:  return (bin && bin->hdr.filetype == MH_EXECUTE &&",
          "2646:   bin->hdr.flags & MH_NO_HEAP_EXECUTION);",
          "2647: }",
          "2650: char* MACH0_(get_filetype_from_hdr)(struct MACH0_(mach_header) *hdr) {",
          "2651:  const char *mhtype = \"Unknown\";",
          "2652:  switch (hdr->filetype) {",
          "",
          "[Removed Lines]",
          "2640: int MACH0_(is_pie)(struct MACH0_(obj_t)* bin) {",
          "2644: int MACH0_(has_nx)(struct MACH0_(obj_t)* bin) {",
          "",
          "[Added Lines]",
          "2583: bool MACH0_(is_pie)(struct MACH0_(obj_t)* bin) {",
          "2587: bool MACH0_(has_nx)(struct MACH0_(obj_t)* bin) {",
          "",
          "---------------"
        ],
        "libr/bin/format/mach0/mach0.h||libr/bin/format/mach0/mach0.h": [
          "File: libr/bin/format/mach0/mach0.h -> libr/bin/format/mach0/mach0.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "159: void* MACH0_(mach0_free)(struct MACH0_(obj_t)* bin);",
          "160: struct section_t* MACH0_(get_sections)(struct MACH0_(obj_t)* bin);",
          "161: struct symbol_t* MACH0_(get_symbols)(struct MACH0_(obj_t)* bin);",
          "162: struct import_t* MACH0_(get_imports)(struct MACH0_(obj_t)* bin);",
          "163: struct reloc_t* MACH0_(get_relocs)(struct MACH0_(obj_t)* bin);",
          "164: struct addr_t* MACH0_(get_entrypoint)(struct MACH0_(obj_t)* bin);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162: void MACH0_(pull_symbols)(struct MACH0_(obj_t)* mo, RBinSymbolCallback cb, void *user);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167: char* MACH0_(get_class)(struct MACH0_(obj_t)* bin);",
          "168: int MACH0_(get_bits)(struct MACH0_(obj_t)* bin);",
          "169: bool MACH0_(is_big_endian)(struct MACH0_(obj_t)* bin);",
          "172: const char* MACH0_(get_intrp)(struct MACH0_(obj_t)* bin);",
          "173: const char* MACH0_(get_os)(struct MACH0_(obj_t)* bin);",
          "174: const char* MACH0_(get_cputype)(struct MACH0_(obj_t)* bin);",
          "",
          "[Removed Lines]",
          "170: int MACH0_(is_pie)(struct MACH0_(obj_t)* bin);",
          "171: int MACH0_(has_nx)(struct MACH0_(obj_t)* bin);",
          "",
          "[Added Lines]",
          "171: bool MACH0_(is_pie)(struct MACH0_(obj_t)* bin);",
          "172: bool MACH0_(has_nx)(struct MACH0_(obj_t)* bin);",
          "",
          "---------------"
        ],
        "libr/bin/mangling/cxx.c||libr/bin/mangling/cxx.c": [
          "File: libr/bin/mangling/cxx.c -> libr/bin/mangling/cxx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <r_bin.h>",
          "11:  }",
          "12:  return false;",
          "13: }",
          "16:  RListIter *iter;",
          "17:  RBinImport *import;",
          "18:  RBinObject *o = binfile->o;",
          "",
          "[Removed Lines]",
          "5: static bool is_cxx_symbol (const char *name) {",
          "6:  if (!strncmp (name, \"_Z\", 2)) {",
          "7:   return true;",
          "8:  }",
          "9:  if (!strncmp (name, \"__Z\", 3)) {",
          "10:   return true;",
          "15: bool r_bin_is_cxx (RBinFile *binfile) {",
          "",
          "[Added Lines]",
          "5: static inline bool is_cxx_symbol (const char *name) {",
          "6:  if (name) {",
          "7:   if (!strncmp (name, \"_Z\", 2)) {",
          "8:    return true;",
          "9:   }",
          "10:   if (!strncmp (name, \"__Z\", 3)) {",
          "11:    return true;",
          "12:   }",
          "17: R_API bool r_bin_is_cxx (RBinFile *binfile) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:  if (!hascxx) {",
          "46:   hascxx = r_bin_is_cxx (binfile);",
          "47:   r_list_foreach (o->symbols, iter, sym) {",
          "48:    if (is_cxx_symbol (sym->name)) {",
          "49:     hascxx = true;",
          "50:     break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:    if (!sym->name) {",
          "51:     continue;",
          "52:    }",
          "",
          "---------------"
        ],
        "libr/bin/mangling/dlang.c||libr/bin/mangling/dlang.c": [
          "File: libr/bin/mangling/dlang.c -> libr/bin/mangling/dlang.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:  }",
          "34:  if (!hasdlang) {",
          "35:   r_list_foreach (o->symbols, iter, sym) {",
          "37:     hasdlang = true;",
          "38:     break;",
          "39:    }",
          "",
          "[Removed Lines]",
          "36:    if (is_dlang_symbol (sym->name)) {",
          "",
          "[Added Lines]",
          "36:    if (sym->name && is_dlang_symbol (sym->name)) {",
          "",
          "---------------"
        ],
        "libr/bin/mangling/msvc.c||libr/bin/mangling/msvc.c": [
          "File: libr/bin/mangling/msvc.c -> libr/bin/mangling/msvc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <r_bin.h>",
          "7: }",
          "9: R_API bool r_bin_lang_msvc(RBinFile *binfile) {",
          "",
          "[Removed Lines]",
          "5: static bool is_cxx_symbol (const char *name) {",
          "6:  return (*name == '?');",
          "",
          "[Added Lines]",
          "5: static inline bool is_cxx_symbol (const char *name) {",
          "6:  return (name && *name == '?');",
          "",
          "---------------"
        ],
        "libr/bin/mangling/objc.c||libr/bin/mangling/objc.c": [
          "File: libr/bin/mangling/objc.c -> libr/bin/mangling/objc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   return false;",
          "20:  }",
          "21:  r_list_foreach (o->symbols, iter, sym) {",
          "22:   if (!hasobjc && !strncmp (sym->name, \"_OBJC_\", 6)) {",
          "23:    hasobjc = true;",
          "24:    break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:   if (!sym->name) {",
          "23:    continue;",
          "24:   }",
          "",
          "---------------"
        ],
        "libr/bin/mangling/swift.c||libr/bin/mangling/swift.c": [
          "File: libr/bin/mangling/swift.c -> libr/bin/mangling/swift.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  RListIter *iter;",
          "10:  if (info) {",
          "11:   r_list_foreach (o->symbols, iter, sym) {",
          "13:     info->lang = \"swift\";",
          "14:     return true;",
          "15:    }",
          "",
          "[Removed Lines]",
          "12:    if (strstr (sym->name, \"swift_once\")) {",
          "",
          "[Added Lines]",
          "12:    if (sym->name && strstr (sym->name, \"swift_once\")) {",
          "",
          "---------------"
        ],
        "libr/bin/p/bin_mach0.c||libr/bin/p/bin_mach0.c": [
          "File: libr/bin/p/bin_mach0.c -> libr/bin/p/bin_mach0.c"
        ],
        "libr/core/cbin.c||libr/core/cbin.c": [
          "File: libr/core/cbin.c -> libr/core/cbin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1574:  } else {",
          "1575:   mydb = sdb_new0 ();",
          "1576:   r_list_foreach (symbols, iter, symbol) {",
          "1578:    if (!sdb_num_add (mydb, sdb_fmt (\"%x\", sdb_hash (symbol->name)), (ut64)(size_t)symbol, 0)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1577:    if (!symbol->name) {",
          "1578:     continue;",
          "1579:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1892:  }",
          "1894:  r_list_foreach (symbols, iter, symbol) {",
          "1895:   ut64 addr = symbol->paddr == UT64_MAX ? symbol->vaddr : rva (r->bin, symbol->paddr, symbol->vaddr, va);",
          "1896:   int len = symbol->size ? symbol->size : 32;",
          "1897:   SymName sn = {0};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1898:   if (!symbol->name) {",
          "1899:    continue;",
          "1900:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1899:   if (exponly && !isAnExport (symbol)) {",
          "1900:    continue;",
          "1901:   }",
          "1903:    continue;",
          "1904:   }",
          "1905:   if (at && (!symbol->size || !is_in_range (at, addr, symbol->size))) {",
          "",
          "[Removed Lines]",
          "1902:   if (name && strcmp (symbol->name, name)) {",
          "",
          "[Added Lines]",
          "1908:   if (name && symbol->name && strcmp (symbol->name, name)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1930:      r_anal_hint_set_bits (r->anal, addr, force_bits);",
          "1931:     }",
          "1932:    }",
          "1934:     if (lastfs != 'i') {",
          "1935:      r_flag_space_set (r->flags, \"imports\");",
          "1936:     }",
          "",
          "[Removed Lines]",
          "1933:    if (!strncmp (symbol->name, \"imp.\", 4)) {",
          "",
          "[Added Lines]",
          "1939:    if (symbol->name && !strncmp (symbol->name, \"imp.\", 4)) {",
          "",
          "---------------"
        ],
        "libr/core/cmd_search.c||libr/core/cmd_search.c": [
          "File: libr/core/cmd_search.c -> libr/core/cmd_search.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "357:     break;",
          "358:    case 32:",
          "359:     ret = r_core_search_prelude (core, from, to,",
          "361:     break;",
          "362:    case 64:",
          "363:     r_core_search_prelude (core, from, to,",
          "",
          "[Removed Lines]",
          "360:      (const ut8 *) \"\\x00\\x00\\x2d\\xe9\", 4, \"\\x0f\\x0f\\xff\\xff\", 4);",
          "",
          "[Added Lines]",
          "360:      (const ut8 *) \"\\x00\\x00\\x2d\\xe9\", 4,",
          "361:      (const ut8 *) \"\\x0f\\x0f\\xff\\xff\", 4);",
          "",
          "---------------"
        ],
        "libr/core/visual.c||libr/core/visual.c": [
          "File: libr/core/visual.c -> libr/core/visual.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "322:  }",
          "323: }",
          "326:  int i, max_length = 0, padding = 0;",
          "327:  RCons *cons = r_cons_singleton ();",
          "328:  const char *pal_args_color = cons->color ? cons->pal.args : \"\",",
          "",
          "[Removed Lines]",
          "325: R_API int r_core_visual_append_help(RStrBuf *p, const char *title, const char **help) {",
          "",
          "[Added Lines]",
          "325: R_API void r_core_visual_append_help(RStrBuf *p, const char *title, const char **help) {",
          "",
          "---------------"
        ],
        "libr/include/r_bin.h||libr/include/r_bin.h": [
          "File: libr/include/r_bin.h -> libr/include/r_bin.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:  void *user;",
          "434: } RBinPlugin;",
          "436: typedef struct r_bin_section_t {",
          "437:  char name[R_BIN_SIZEOF_STRINGS + 1]; // TODO: must be char*",
          "438:  ut64 size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436: typedef void (*RBinSymbollCallback)(RBinObject *obj, void *symbol);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "614: R_API RBinImport *r_bin_import_clone(RBinImport *o);",
          "615: R_API RBinSymbol *r_bin_symbol_clone(RBinSymbol *o);",
          "617: R_API int r_bin_open(RBin *bin, const char *filename, RBinOptions *bo);",
          "618: R_API RBinFile *r_bin_get_file(RBin *bin, int bd);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "618: typedef void (*RBinSymbolCallback)(RBinObject *obj, RBinSymbol *symbol);",
          "",
          "---------------"
        ],
        "libr/include/r_core.h||libr/include/r_core.h": [
          "File: libr/include/r_core.h -> libr/include/r_core.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "338: R_API int r_core_shift_block(RCore *core, ut64 addr, ut64 b_size, st64 dist);",
          "339: R_API void r_core_visual_prompt_input (RCore *core);",
          "340: R_API int r_core_visual_refs(RCore *core, bool xref);",
          "342: R_API bool r_core_prevop_addr(RCore* core, ut64 start_addr, int numinstrs, ut64* prev_addr);",
          "343: R_API ut64 r_core_prevop_addr_force(RCore *core, ut64 start_addr, int numinstrs);",
          "344: R_API bool r_core_visual_hudstuff(RCore *core);",
          "",
          "[Removed Lines]",
          "341: R_API int r_core_visual_append_help(RStrBuf *p, const char *title, const char **help);",
          "",
          "[Added Lines]",
          "341: R_API void r_core_visual_append_help(RStrBuf *p, const char *title, const char **help);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3092614ba98a7be0987f40a38b7e25d9f97085d",
      "candidate_info": {
        "commit_hash": "c3092614ba98a7be0987f40a38b7e25d9f97085d",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/c3092614ba98a7be0987f40a38b7e25d9f97085d",
        "files": [
          "libr/bin/format/mach0/mach0.c"
        ],
        "message": "Parse the mach0's requirements codesign slot ##bin",
        "before_after_code_files": [
          "libr/bin/format/mach0/mach0.c||libr/bin/format/mach0/mach0.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/format/mach0/mach0.c||libr/bin/format/mach0/mach0.c"
          ],
          "candidate": [
            "libr/bin/format/mach0/mach0.c||libr/bin/format/mach0/mach0.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/format/mach0/mach0.c||libr/bin/format/mach0/mach0.c": [
          "File: libr/bin/format/mach0/mach0.c -> libr/bin/format/mach0/mach0.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "791:       (int)data + idx.offset + 8, (int)length);",
          "792:      eprintf (\"pFp@%d!%d\\n\",",
          "793:       (int)data + idx.offset + 8, (int)length);",
          "802:      free (p);",
          "803:     }",
          "804:    }",
          "805:    break;",
          "809:    {",
          "826:     }",
          "828:    }",
          "830:    break;",
          "832:   case CSSLOT_INFOSLOT: // 1;",
          "833:   case CSSLOT_RESOURCEDIR: // 3;",
          "834:   case CSSLOT_APPLICATION: // 4;",
          "836:    break;",
          "838:   default:",
          "839:    eprintf (\"Unknown Code signature slot %d\\n\", idx.type);",
          "840:    break;",
          "",
          "[Removed Lines]",
          "794: #if 0",
          "795:      int fd = open (\"DUMP\", O_RDWR|O_CREAT, 0644);",
          "796:      if (fd != -1) {",
          "797:       eprintf (\"See DUMP file.\\n\");",
          "798:       write (fd, words, length);",
          "799:       close (fd);",
          "800:      }",
          "801: #endif",
          "806:   case CSSLOT_REQUIREMENTS:",
          "807: #if 0",
          "810:     ut8 p[5000];",
          "811:     r_buf_read_at (bin->b, data + idx.offset + 0, p, sizeof (p));",
          "812:     ut32 count = r_read_ble32 (p, 1);",
          "813:     int i = 0;",
          "814:     ut32 *words = (ut32*)p;",
          "816:     int fd = open (\"DUMP\", O_RDWR|O_CREAT, 0644);",
          "817:     if (fd != -1) {",
          "818:      write (fd, words, sizeof(p));",
          "819:      close (fd);",
          "820:     }",
          "821: #if 0",
          "822:     for (i = 0; i < count; i++) {",
          "823:      int n = i * 3;",
          "824:      eprintf (\"Type (0x%08x) Offset (0x%08x) Expression (0x%08x)\\n\",",
          "825:       words[n], words[n+1], words[n+2]);",
          "827: #endif",
          "829: #endif",
          "831: #if 0",
          "837: #endif",
          "",
          "[Added Lines]",
          "798:   case CSSLOT_REQUIREMENTS: // 2",
          "800:     ut8 p[256];",
          "801:     r_buf_read_at (bin->b, data + idx.offset + 16, p, sizeof (p));",
          "802:     p[sizeof (p) - 1] = 0;",
          "803:     ut32 slot_size = r_read_ble32 (p  + 8, 1);",
          "804:     eprintf (\"slot size %d\\n\", slot_size);",
          "805:     if (slot_size < sizeof (p)) {",
          "806:      ut32 ident_size = r_read_ble32 (p  + 8, 1);",
          "807:      char *ident = r_str_ndup ((const char *)p + 28, ident_size);",
          "808:      if (ident) {",
          "809:       sdb_set (bin->kv, \"mach0.ident\", ident, 0);",
          "810:       free (ident);",
          "811:      }",
          "812:     } else {",
          "813:      eprintf (\"Invalid code slot size\\n\");",
          "821:    eprintf (\"TODO: Some codesign slots are not yet supported\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1768: }",
          "1770: static char *get_name(struct MACH0_(obj_t)* mo, ut32 stridx, bool filter) {",
          "1772:  int i = 0;",
          "1774:   return NULL;",
          "1775:  }",
          "1776:  int len = mo->symstrlen - stridx;",
          "1782:  for (i = 0; i < len; i++) {",
          "1783:   if ((ut8)(symstr[i] & 0xff) == 0xff || !symstr[i]) {",
          "1784:    len = i;",
          "",
          "[Removed Lines]",
          "1771:  const char *symstr;",
          "1773:  if (stridx > mo->symstrlen) {",
          "1777:  if (stridx >= 0 && stridx < mo->symstrlen) {",
          "1778:   symstr = (char*)mo->symstr + stridx;",
          "1779:  } else {",
          "1780:   symstr = \"???\";",
          "1781:  }",
          "",
          "[Added Lines]",
          "1757:  if (stridx >= mo->symstrlen) {",
          "1761:  const char *symstr = (const char*)mo->symstr + stridx;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1786:   }",
          "1787:  }",
          "1788:  if (len > 0) {",
          "1790:   if (filter) {",
          "1791:    r_str_filter (res, -1);",
          "1792:   }",
          "",
          "[Removed Lines]",
          "1789:   char * res = r_str_ndup (symstr, len);",
          "",
          "[Added Lines]",
          "1769:   char *res = r_str_ndup (symstr, len);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1816:   return NULL;",
          "1817:  }",
          "1818:  SdbHt *hash = sdb_ht_new ();",
          "1819:  j = 0; // symbol_idx",
          "1820:  for (s = 0; s < 2; s++) {",
          "1821:   switch (s) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1799:  if (!hash) {",
          "1800:   free (symbols);",
          "1801:   return NULL;",
          "1802:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1881:    bprintf (\"mach0-get-symbols: error\\n\");",
          "1882:    break;",
          "1883:   }",
          "1885:    symbols[j++].last = 0;",
          "1886:   }",
          "1887:  }",
          "",
          "[Removed Lines]",
          "1884:   if (parse_import_stub(bin, &symbols[j], i)) {",
          "",
          "[Added Lines]",
          "1868:   if (parse_import_stub (bin, &symbols[j], i)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}