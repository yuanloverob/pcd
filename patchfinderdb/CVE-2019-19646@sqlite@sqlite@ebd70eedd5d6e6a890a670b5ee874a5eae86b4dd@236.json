{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b63d6070ee83ea13f35bee56d32fca574a1c6151",
      "candidate_info": {
        "commit_hash": "b63d6070ee83ea13f35bee56d32fca574a1c6151",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b63d6070ee83ea13f35bee56d32fca574a1c6151",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix an assert() in fts5 that could fail with a corrupt database.\n\nFossilOrigin-Name: 83935b950619855fb3bf05486091804ac2a61fb993c6ec826c89f943264fabc3",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3578: #ifdef SQLITE_DEBUG",
          "3579:       for(iLvl=0; iLvl<pStruct->nLevel; iLvl++){",
          "3580:         for(iSeg=0; iSeg<pStruct->aLevel[iLvl].nSeg; iSeg++){",
          "3582:         }",
          "3583:       }",
          "3586:       {",
          "3587:         sqlite3_stmt *pIdxSelect = fts5IdxSelectStmt(p);",
          "",
          "[Removed Lines]",
          "3581:           assert( iSegid!=pStruct->aLevel[iLvl].aSeg[iSeg].iSegid );",
          "3584:       assert( iSegid>0 && iSegid<=FTS5_MAX_SEGMENT );",
          "",
          "[Added Lines]",
          "3581:           assert_nc( iSegid!=pStruct->aLevel[iLvl].aSeg[iSeg].iSegid );",
          "3584:       assert_nc( iSegid>0 && iSegid<=FTS5_MAX_SEGMENT );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3589:           u8 aBlob[2] = {0xff, 0xff};",
          "3590:           sqlite3_bind_int(pIdxSelect, 1, iSegid);",
          "3591:           sqlite3_bind_blob(pIdxSelect, 2, aBlob, 2, SQLITE_STATIC);",
          "3593:           p->rc = sqlite3_reset(pIdxSelect);",
          "3594:           sqlite3_bind_null(pIdxSelect, 2);",
          "3595:         }",
          "",
          "[Removed Lines]",
          "3592:           assert( sqlite3_step(pIdxSelect)!=SQLITE_ROW );",
          "",
          "[Added Lines]",
          "3592:           assert_nc( sqlite3_step(pIdxSelect)!=SQLITE_ROW );",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "498: | end c9.db",
          "499:   }]",
          "500: } {}",
          "502: do_catchsql_test 10.1 {",
          "503:   SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "504: } {1 {database disk image is malformed}}",
          "506: sqlite3_fts5_may_be_corrupt 0",
          "507: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "505: #-------------------------------------------------------------------------",
          "506: #",
          "507: reset_db",
          "508: do_test 11.0 {",
          "509:   sqlite3 db {}",
          "510:   db deserialize [decode_hexdb {",
          "511: | size 28672 pagesize 4096 filename c10b.db",
          "512: | page 1 offset 0",
          "513: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "514: |     16: 10 00 01 01 00 40 20 20 00 00 00 01 00 00 00 07   .....@  ........",
          "515: |     32: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "516: |     48: 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00   ................",
          "517: |     80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01   ................",
          "518: |     96: 00 2e 30 38 0d 00 00 00 07 0d d2 00 0f c4 0f 6d   ..08...........m",
          "519: |    112: 0f 02 0e ab 0e 4e 0d f6 0d d2 00 00 00 00 00 00   .....N..........",
          "520: |   3536: 00 00 22 07 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "521: |   3552: 32 74 32 07 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "522: |   3568: 20 74 32 28 78 29 56 06 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "523: |   3584: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "524: |   3600: 6f 6e 66 69 67 06 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "525: |   3616: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "526: |   3632: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "527: |   3648: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 05    WITHOUT ROWID[.",
          "528: |   3664: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "529: |   3680: 6f 63 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsizet1_docsize",
          "530: |   3696: 05 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "531: |   3712: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "532: |   3728: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "533: |   3744: 59 2c 20 73 7a 20 42 4c 4f 42 29 55 04 06 17 21   Y, sz BLOB)U...!",
          "534: |   3760: 21 01 77 74 61 62 6c 65 74 31 5f 63 6f 6e 74 65   !.wtablet1_conte",
          "535: |   3776: 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 04 43 52 45   ntt1_content.CRE",
          "536: |   3792: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f   ATE TABLE 't1_co",
          "537: |   3808: 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47 45   ntent'(id INTEGE",
          "538: |   3824: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 63   R PRIMARY KEY, c",
          "539: |   3840: 30 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65   0)i.......-table",
          "540: |   3856: 74 31 5f 69 64 78 74 31 5f 69 64 78 03 43 52 45   t1_idxt1_idx.CRE",
          "541: |   3872: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69 64   ATE TABLE 't1_id",
          "542: |   3888: 78 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20   x'(segid, term,",
          "543: |   3904: 70 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45   pgno, PRIMARY KE",
          "544: |   3920: 59 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20   Y(segid, term))",
          "545: |   3936: 57 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07   WITHOUT ROWIDU..",
          "546: |   3952: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61   ......tablet1_da",
          "547: |   3968: 74 61 74 31 5f 64 61 74 61 02 43 52 45 41 54 45   tat1_data.CREATE",
          "548: |   3984: 20 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27    TABLE 't1_data'",
          "549: |   4000: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 44 d9   (id INTEGER PRD.",
          "550: |   4016: 41 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42   ARY KEY, block B",
          "551: |   4032: 4c 4f 42 29 3a 01 06 17 11 11 08 63 74 61 62 6c   LOB):......ctabl",
          "552: |   4048: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "553: |   4064: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "554: |   4080: 4e 47 20 66 74 73 35 28 63 6f 6e 74 65 6e 74 29   NG fts5(content)",
          "555: | page 2 offset 4096",
          "556: |      0: 0d 00 00 00 06 0f 59 00 0f e8 0f ef 0f bd 0f b0   ......Y.........",
          "557: |     16: 0f 73 0f 59 00 00 00 00 00 00 00 00 00 00 00 00   .s.Y............",
          "558: |   3920: 00 00 00 00 00 00 00 00 00 13 84 80 80 80 80 04   ................",
          "559: |   3936: 03 01 2a 0a 00 00 00 00 01 02 02 00 02 01 01 01   ..*.............",
          "560: |   3952: 02 01 01 36 84 80 80 80 80 03 03 05 66 00 40 00   ...6........f.@.",
          "561: |   3968: 00 00 01 00 00 00 29 07 30 61 63 74 69 76 65 04   ......).0active.",
          "562: |   3984: 02 02 02 03 74 6f 6d 06 02 02 05 02 69 63 07 02   ....tom.....ic..",
          "563: |   4000: 02 01 06 62 6f 6f 6d 65 72 05 02 02 04 0b 08 07   ...boomer.......",
          "564: |   4016: 06 84 80 80 80 80 02 03 01 10 01 07 07 24 84 80   .............$..",
          "565: |   4032: 80 80 80 01 03 00 4e 00 00 00 1e 06 30 61 62 61   ......N.....0aba",
          "566: |   4048: 63 6b 01 02 02 04 02 66 74 02 02 02 04 04 6e 64   ck.....ft.....nd",
          "567: |   4064: 6f 6e 03 02 02 04 0a 07 05 01 03 00 10 03 03 0f   on..............",
          "568: |   4080: 0a 03 00 24 00 00 00 00 01 01 01 00 01 01 01 01   ...$............",
          "569: | page 3 offset 8192",
          "570: |      0: 0a 00 00 00 02 0f f3 00 0f fa 0f f3 00 00 00 00   ................",
          "571: |   4080: 00 00 00 06 04 01 0c 01 02 02 05 04 09 0c 01 02   ................",
          "572: | page 4 offset 12288",
          "573: |      0: 0d 00 00 00 07 0f b6 00 0f f6 0f ec 0f e0 0f d5   ................",
          "574: |     16: 0f ca 0f c1 0f b6 00 00 00 00 00 00 00 00 00 00   ................",
          "575: |   4016: 00 00 00 00 00 00 09 07 03 00 19 61 74 6f 6d 69   ...........atomi",
          "576: |   4032: 63 07 06 03 00 15 61 74 6f 6d 09 05 03 00 19 62   c.....atom.....b",
          "577: |   4048: 6f 6f 6d 65 72 09 04 03 00 19 61 63 74 69 76 65   oomer.....active",
          "578: |   4064: 0a 03 03 00 1b 61 62 61 6e 64 6f 6e 08 02 03 00   .....abandon....",
          "579: |   4080: 17 61 62 61 66 74 08 01 03 00 17 61 62 61 63 6b   .abaft.....aback",
          "580: | page 5 offset 16384",
          "581: |      0: 0d 00 00 00 07 0f d6 00 0f fa 0f f4 0f ee 0f e8   ................",
          "582: |     16: 0f e2 0f dc 0f d6 00 00 00 00 00 00 00 00 00 00   ................",
          "583: |   4048: 00 00 00 00 00 00 04 07 03 00 0e 01 04 06 03 00   ................",
          "584: |   4064: 0e 01 04 05 03 00 0e 01 04 04 03 00 0e 01 04 03   ................",
          "585: |   4080: 03 00 0e 01 04 02 03 00 0e 01 04 01 03 00 0e 01   ................",
          "586: | page 6 offset 20480",
          "587: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "588: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "589: | page 7 offset 24576",
          "590: |      0: 0d 00 00 00 03 0f d6 00 0f f4 0f e1 0f d6 00 00   ................",
          "591: |   4048: 00 00 00 00 00 00 09 03 02 1b 72 65 62 75 69 6c   ..........rebuil",
          "592: |   4064: 64 11 02 02 2b 69 6e 74 65 67 72 69 74 79 2d 63   d...+integrity-c",
          "593: |   4080: 68 65 63 6b 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   heck....optimize",
          "594: | end c10b.db",
          "595: }]} {}",
          "597: # This returns SQLITE_CONSTRAINT instead of SQLITE_CORRUPT. The problem is",
          "598: # that the corrupted structure-record leads fts5 to try to use a segment-id",
          "599: # that is already in use. This is caught by the PRIMARY KEY constraint on",
          "600: # the %_idx table.",
          "601: #",
          "602: do_catchsql_test 11.1 {",
          "603:   UPDATE t1 SET content='abc' WHERE content='boomer';",
          "604: } {1 {constraint failed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3518c09b944c92974939b1de244401afd34de5d9aa75050e5ad55581a94e1e71",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db36e255d5f7162f6abcdfcafeca4f22668e139c",
      "candidate_info": {
        "commit_hash": "db36e255d5f7162f6abcdfcafeca4f22668e139c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/db36e255d5f7162f6abcdfcafeca4f22668e139c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/rowvalue.test"
        ],
        "message": "Disqualify row-value comparisons for use by an index if the right-hand side has an affinity that does not match the index. Fix for ticket [6ef984af8972c2eb]\n\nFossilOrigin-Name: 5c118617cf08e17a6edfdfba86e3fc49132a780990b68b52724c2aaeac85f506",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/rowvalue.test||test/rowvalue.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c7da1c01f1f239e68c2173ac5748b8c5798271e43bdcee68f51f97cd0ca92bd5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:         pExpr->pLeft->x.pSelect->pEList->a[pExpr->iColumn].pExpr",
          "71:     );",
          "72:   }",
          "73:   return pExpr->affExpr;",
          "74: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:   if( op==TK_VECTOR ){",
          "74:     return sqlite3ExprAffinity(pExpr->x.pList->a[0].pExpr);",
          "75:   }",
          "",
          "---------------"
        ],
        "test/rowvalue.test||test/rowvalue.test": [
          "File: test/rowvalue.test -> test/rowvalue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "586:   SELECT 3 FROM t0 WHERE (aa,1) <= (SELECT +bb,1);",
          "587: } {0 1 3}",
          "589: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "589: # 2019-10-22 Ticket 6ef984af8972c2eb",
          "590: do_execsql_test 24.100 {",
          "591:   DROP TABLE t0;",
          "592:   CREATE TABLE t0(c0 TEXT PRIMARY KEY);",
          "593:   INSERT INTO t0(c0) VALUES ('');",
          "594:   SELECT (t0.c0, TRUE) > (CAST(0 AS REAL), FALSE) FROM t0;",
          "595:   SELECT 2 FROM t0 WHERE (t0.c0, TRUE) > (CAST('' AS REAL), FALSE);",
          "596: } {1 2}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "76fd7be3a31d466202bc6ee9026d02150fcc12da",
      "candidate_info": {
        "commit_hash": "76fd7be3a31d466202bc6ee9026d02150fcc12da",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/76fd7be3a31d466202bc6ee9026d02150fcc12da",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Improved comments and extra testcase() macros on the serial-type computation logic in the OP_MakeRecord opcode.\n\nFossilOrigin-Name: 18bfb2179ce2c60cec8f5859a84b737731a5e53b28e35072cbb249f18b94262b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2578e3c64b0a92ab92143f18d107a1a180bd6fa87243661930771c4c080f8098",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2943:         assert( pOp->p5==OPFLAG_NOCHNG_MAGIC || CORRUPT_DB );",
          "2944:         pRec->uTemp = 10;",
          "2945:       }else{",
          "2947:       }",
          "2948:       nHdr++;",
          "2949:     }else if( pRec->flags & (MEM_Int|MEM_IntReal) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2969:         pRec->uTemp = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2958:         u = i;",
          "2959:       }",
          "2960:       nHdr++;",
          "2961:       if( u<=127 ){",
          "2962:         if( (i&1)==i && file_format>=4 ){",
          "2963:           pRec->uTemp = 8+(u32)u;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2984:       testcase( u==127 );               testcase( u==128 );",
          "2985:       testcase( u==32767 );             testcase( u==32768 );",
          "2986:       testcase( u==8388607 );           testcase( u==8388608 );",
          "2987:       testcase( u==2147483647 );        testcase( u==2147483648 );",
          "2988:       testcase( u==140737488355327LL ); testcase( u==140737488355328LL );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41428a97b86b89395e9bdf0f38cf7d83ab2b451b",
      "candidate_info": {
        "commit_hash": "41428a97b86b89395e9bdf0f38cf7d83ab2b451b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/41428a97b86b89395e9bdf0f38cf7d83ab2b451b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "For the \".testctrl prng_seed\" command in the CLI, if the argument is \"random\" then select a random integer seed and print the seed value on stdout.\n\nFossilOrigin-Name: 636ca4472c9f41eb3989f28854d4968867837399a2092f389d1b814d98cccbae",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 48d9b48ab4ace234eb1a055cf33cb533a1c3aa82d0a6e086d96226bd9474ceca",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "9265:           if( nArg==3 || nArg==4 ){",
          "9266:             int ii = (int)integerValue(azArg[2]);",
          "9267:             sqlite3 *db;",
          "9268:             if( nArg==3 ){",
          "9269:               db = 0;",
          "9270:             }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9268:             if( ii==0 && strcmp(azArg[2],\"random\")==0 ){",
          "9269:               sqlite3_randomness(sizeof(ii),&ii);",
          "9270:               printf(\"-- random seed: %d\\n\", ii);",
          "9271:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e1a574875a5cb3021adb2327f2919b85f186ede",
      "candidate_info": {
        "commit_hash": "0e1a574875a5cb3021adb2327f2919b85f186ede",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0e1a574875a5cb3021adb2327f2919b85f186ede",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test4.c"
        ],
        "message": "Change the name of some internal testing interfaces to avoid a name conflict in AIX.\n\nFossilOrigin-Name: c1cae7e7f0a612508c8f82b334d9ebc423f443e99b13092d52e26b348c7cbc5e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test4.c||src/test4.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 037da798fa5510ba7c776831ebcd683a85dca28e25bc657ff17bb2b08c3d406e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test4.c||src/test4.c": [
          "File: src/test4.c -> src/test4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:   Thread *p = (Thread*)pArg;",
          "69:   if( p->db ){",
          "70:     sqlite3_close(p->db);",
          "",
          "[Removed Lines]",
          "67: static void *thread_main(void *pArg){",
          "",
          "[Added Lines]",
          "67: static void *test_thread_main(void *pArg){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:   threadset[i].zFilename = sqlite3_mprintf(\"%s\", argv[2]);",
          "152:   threadset[i].opnum = 1;",
          "153:   threadset[i].completed = 0;",
          "155:   if( rc ){",
          "156:     Tcl_AppendResult(interp, \"failed to create the thread\", 0);",
          "157:     sqlite3_free(threadset[i].zFilename);",
          "",
          "[Removed Lines]",
          "154:   rc = pthread_create(&x, 0, thread_main, &threadset[i]);",
          "",
          "[Added Lines]",
          "154:   rc = pthread_create(&x, 0, test_thread_main, &threadset[i]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:   while( p->opnum>p->completed ) sched_yield();",
          "170: }",
          "",
          "[Removed Lines]",
          "168: static void thread_wait(Thread *p){",
          "",
          "[Added Lines]",
          "168: static void test_thread_wait(Thread *p){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "193:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "194:     return TCL_ERROR;",
          "195:   }",
          "197:   return TCL_OK;",
          "198: }",
          "205:   p->xOp = 0;",
          "206:   p->opnum++;",
          "208:   sqlite3_free(p->zArg);",
          "209:   p->zArg = 0;",
          "210:   sqlite3_free(p->zFilename);",
          "",
          "[Removed Lines]",
          "196:   thread_wait(&threadset[i]);",
          "203: static void stop_thread(Thread *p){",
          "204:   thread_wait(p);",
          "207:   thread_wait(p);",
          "",
          "[Added Lines]",
          "196:   test_thread_wait(&threadset[i]);",
          "203: static void test_stop_thread(Thread *p){",
          "204:   test_thread_wait(p);",
          "207:   test_thread_wait(p);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "233:   }",
          "234:   if( argv[1][0]=='*' && argv[1][1]==0 ){",
          "235:     for(i=0; i<N_THREAD; i++){",
          "237:     }",
          "238:   }else{",
          "239:     i = parse_thread_id(interp, argv[1]);",
          "",
          "[Removed Lines]",
          "236:       if( threadset[i].busy ) stop_thread(&threadset[i]);",
          "",
          "[Added Lines]",
          "236:       if( threadset[i].busy ) test_stop_thread(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "242:       Tcl_AppendResult(interp, \"no such thread\", 0);",
          "243:       return TCL_ERROR;",
          "244:     }",
          "246:   }",
          "247:   return TCL_OK;",
          "248: }",
          "",
          "[Removed Lines]",
          "245:     stop_thread(&threadset[i]);",
          "",
          "[Added Lines]",
          "245:     test_stop_thread(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "273:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "274:     return TCL_ERROR;",
          "275:   }",
          "277:   sqlite3_snprintf(sizeof(zBuf), zBuf, \"%d\", threadset[i].argc);",
          "278:   Tcl_AppendResult(interp, zBuf, 0);",
          "279:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "276:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "276:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "306:     return TCL_ERROR;",
          "307:   }",
          "308:   if( Tcl_GetInt(interp, argv[2], &n) ) return TCL_ERROR;",
          "310:   if( n<0 || n>=threadset[i].argc ){",
          "311:     Tcl_AppendResult(interp, \"column number out of range\", 0);",
          "312:     return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "309:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "309:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "342:     return TCL_ERROR;",
          "343:   }",
          "344:   if( Tcl_GetInt(interp, argv[2], &n) ) return TCL_ERROR;",
          "346:   if( n<0 || n>=threadset[i].argc ){",
          "347:     Tcl_AppendResult(interp, \"column number out of range\", 0);",
          "348:     return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "345:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "345:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "377:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "378:     return TCL_ERROR;",
          "379:   }",
          "381:   zName = sqlite3ErrName(threadset[i].rc);",
          "382:   Tcl_AppendResult(interp, zName, 0);",
          "383:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "380:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "380:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "408:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "409:     return TCL_ERROR;",
          "410:   }",
          "412:   Tcl_AppendResult(interp, threadset[i].zErr, 0);",
          "413:   return TCL_OK;",
          "414: }",
          "",
          "[Removed Lines]",
          "411:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "411:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "452:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "453:     return TCL_ERROR;",
          "454:   }",
          "456:   threadset[i].xOp = do_compile;",
          "457:   sqlite3_free(threadset[i].zArg);",
          "458:   threadset[i].zArg = sqlite3_mprintf(\"%s\", argv[2]);",
          "",
          "[Removed Lines]",
          "455:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "455:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "505:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "506:     return TCL_ERROR;",
          "507:   }",
          "509:   threadset[i].xOp = do_step;",
          "510:   threadset[i].opnum++;",
          "511:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "508:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "508:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "547:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "548:     return TCL_ERROR;",
          "549:   }",
          "551:   threadset[i].xOp = do_finalize;",
          "552:   sqlite3_free(threadset[i].zArg);",
          "553:   threadset[i].zArg = 0;",
          "",
          "[Removed Lines]",
          "550:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "550:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "579:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "580:     return TCL_ERROR;",
          "581:   }",
          "583:   j = parse_thread_id(interp, argv[2]);",
          "584:   if( j<0 ) return TCL_ERROR;",
          "585:   if( !threadset[j].busy ){",
          "586:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "587:     return TCL_ERROR;",
          "588:   }",
          "590:   temp = threadset[i].db;",
          "591:   threadset[i].db = threadset[j].db;",
          "592:   threadset[j].db = temp;",
          "",
          "[Removed Lines]",
          "582:   thread_wait(&threadset[i]);",
          "589:   thread_wait(&threadset[j]);",
          "",
          "[Added Lines]",
          "582:   test_thread_wait(&threadset[i]);",
          "589:   test_thread_wait(&threadset[j]);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "620:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "621:     return TCL_ERROR;",
          "622:   }",
          "624:   sqlite3TestMakePointerStr(interp, zBuf, threadset[i].db);",
          "625:   threadset[i].db = 0;",
          "626:   Tcl_AppendResult(interp, zBuf, (char*)0);",
          "",
          "[Removed Lines]",
          "623:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "623:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "651:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "652:     return TCL_ERROR;",
          "653:   }",
          "655:   assert( !threadset[i].db );",
          "656:   threadset[i].db = (sqlite3*)sqlite3TestTextToPtr(argv[2]);",
          "657:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "654:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "654:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "683:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "684:     return TCL_ERROR;",
          "685:   }",
          "687:   sqlite3TestMakePointerStr(interp, zBuf, threadset[i].pStmt);",
          "688:   threadset[i].pStmt = 0;",
          "689:   Tcl_AppendResult(interp, zBuf, (char*)0);",
          "",
          "[Removed Lines]",
          "686:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "686:   test_thread_wait(&threadset[i]);",
          "",
          "---------------"
        ]
      }
    }
  ]
}