{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e3a4f2cf77e7608cf7ba746b2517559015dad9c0",
      "candidate_info": {
        "commit_hash": "e3a4f2cf77e7608cf7ba746b2517559015dad9c0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e3a4f2cf77e7608cf7ba746b2517559015dad9c0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/util.c"
        ],
        "message": "Fix an utterly harmless \"applying zero offset to null pointer\" UB warning in sqlite3AtoF():\n\nFossilOrigin-Name: 052fdf5e58b41ccadaa5aac293ceb4d309ced661d46f3a52be9eb8d01d347a82",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c29fc21288e37f81a1617c5e2961c575d3bca6a1d1b013b2e0a99774afb1dcdb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "389: int sqlite3AtoF(const char *z, double *pResult, int length, u8 enc){",
          "390: #ifndef SQLITE_OMIT_FLOATING_POINT",
          "391:   int incr;",
          "",
          "[Removed Lines]",
          "392:   const char *zEnd = z + length;",
          "",
          "[Added Lines]",
          "392:   const char *zEnd;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "404:   assert( enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE );",
          "407:   if( enc==SQLITE_UTF8 ){",
          "408:     incr = 1;",
          "409:   }else{",
          "410:     int i;",
          "411:     incr = 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "406:   if( length==0 ) return 0;",
          "410:     zEnd = z + length;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b986b2a47cd3174382c66448fde87da21b9bc74",
      "candidate_info": {
        "commit_hash": "4b986b2a47cd3174382c66448fde87da21b9bc74",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4b986b2a47cd3174382c66448fde87da21b9bc74",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Patch makes balance_nonroot() slightly smaller and faster and more robust against corrupt databases.\n\nFossilOrigin-Name: 174da3c32c9caebd642c31cb594597ccd5bb2a7fc501b1f49aef0b7b4765bfca",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fcc24edde471c2214add2dbc3a27da8890a7148105c5ffa024faf72457964a5f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7152:     int iCell = (iOld + pPg->aiOvfl[i]) - iNew;",
          "7153:     if( iCell>=0 && iCell<nNew ){",
          "7154:       pCellptr = &pPg->aCellIdx[iCell * 2];",
          "7157:       nCell++;",
          "7158:       if( pageInsertArray(",
          "7159:             pPg, pBegin, &pData, pCellptr,",
          "",
          "[Removed Lines]",
          "7155:       assert( nCell>=iCell );",
          "7156:       memmove(&pCellptr[2], pCellptr, (nCell - iCell) * 2);",
          "",
          "[Added Lines]",
          "7155:       if( nCell>iCell ){",
          "7156:         memmove(&pCellptr[2], pCellptr, (nCell - iCell) * 2);",
          "7157:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95063c286768c880447ff66641e1a722c32d0b10",
      "candidate_info": {
        "commit_hash": "95063c286768c880447ff66641e1a722c32d0b10",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/95063c286768c880447ff66641e1a722c32d0b10",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Improve the \".recover\" command in the shell tool so that it is not confused by auto-vacuum databases. And so that it can recover tables for which one or more of the column names are SQL keywords.\n\nFossilOrigin-Name: 87d76047d6a3df31bc9b7c0cffa7b758236c124f87263a520850b019cbbc4c6e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d8e88248e3204b5f2b95b9b8921ee7ee2f7574ae81e6abd5b4f2ddf187f7d71b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6397:       }",
          "6398:       i = 1;",
          "6399:       shellPreparePrintf(dbtmp, &rc, &pStmt,",
          "6401:           \"  FILTER (WHERE cid!=%d) OVER (ORDER BY %s cid) \"",
          "6402:           \"FROM pragma_table_info(%Q)\",",
          "6403:           bIntkey ? \", \" : \"\", pTab->iPk,",
          "",
          "[Removed Lines]",
          "6400:           \"SELECT %Q || group_concat(name, ', ') \"",
          "",
          "[Added Lines]",
          "6400:           \"SELECT %Q || group_concat(quote(name), ', ') \"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6619:     );",
          "6620:   }",
          "6622:   shellExec(pState->db, &rc,",
          "6623:     \"CREATE TABLE recovery.dbptr(\"",
          "6624:     \"      pgno, child, PRIMARY KEY(child, pgno)\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6625:   shellExec(pState->db, &rc,",
          "6626:     \"WITH ptrmap(pgno) AS (\"",
          "6627:     \"  SELECT 2 WHERE shell_int32(\"",
          "6628:     \"    (SELECT data FROM sqlite_dbpage WHERE pgno=1), 13\"",
          "6629:     \"  )\"",
          "6630:     \"    UNION ALL \"",
          "6631:     \"  SELECT pgno+1+(SELECT page_size FROM pragma_page_size)/5 AS pp \"",
          "6632:     \"  FROM ptrmap WHERE pp<=(SELECT page_count FROM pragma_page_count)\"",
          "6633:     \")\"",
          "6634:     \"REPLACE INTO recovery.freelist SELECT pgno FROM ptrmap\"",
          "6635:   );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6301c43f236543ecb174e2639a0201bb29580fbe",
      "candidate_info": {
        "commit_hash": "6301c43f236543ecb174e2639a0201bb29580fbe",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6301c43f236543ecb174e2639a0201bb29580fbe",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/dbfuzz001.test"
        ],
        "message": "dbfuzz2 found a NEVER() that is sometimes true.\n\nFossilOrigin-Name: 1201615cbbd3070158ea5fab3d2c8c95f41b25d6da096a44cb9257a7b7405efc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "test/dbfuzz001.test||test/dbfuzz001.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 997b65117f8c12dba5fb85434fde9765cdb0d2a49cc3e31979abba3e21350086",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7039:   assert( sqlite3PagerIswriteable(pParent->pDbPage) );",
          "7040:   assert( pPage->nOverflow==1 );",
          "",
          "[Removed Lines]",
          "7043:   if( NEVER(pPage->nCell==0) ) return SQLITE_CORRUPT_BKPT;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz001.test||test/dbfuzz001.test": [
          "File: test/dbfuzz001.test -> test/dbfuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:   finish_test",
          "19:   return",
          "20: }",
          "22: # In the following database file, there is 384 bytes of free space",
          "23: # on page 8 that does not appear on the freeblock list.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: database_may_be_corrupt",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:   DELETE FROM t3 WHERE x IS NOT NULL AND +rowid=6;",
          "181: } {}",
          "183: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184: # This is a dbfuzz2-generate test case that can cause a page with",
          "185: # pPage->nCell==0 to enter the balancer.",
          "186: #",
          "187: do_test dbfuzz001-200 {",
          "188:   db deserialize [decode_hexdb {",
          "189:     | size 3076 pagesize 512 filename c03.db",
          "190:     | page 1 offset 0",
          "191:     |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "192:     |     16: 02 00 01 01 00 40 20 20 00 00 00 0c 00 00 00 07   .....@  ........",
          "193:     |     32: 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 04   ................",
          "194:     |     48: 00 00 00 00 00 00 00 03 e8 00 00 01 00 00 00 00   ................",
          "195:     |     80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0c   ................",
          "196:     |     96: 00 2e 2c 50 0d 00 00 00 06 01 06 00 01 da 01 b0   ..,P............",
          "197:     |    112: 01 56 01 86 01 2a 01 06 00 00 00 00 00 00 00 00   .V...*..........",
          "198:     |    128: 00 00 00 00 00 00 00 00 ef 00 00 00 00 00 00 00   ................",
          "199:     |    192: 00 7f 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "200:     |    224: 00 00 00 00 00 00 00 00 00 00 00 00 00 ff e9 00   ................",
          "201:     |    256: 00 00 00 00 00 00 22 07 06 17 11 11 01 31 74 61   ......\"......1ta",
          "202:     |    272: 62 6c 65 74 34 74 34 07 43 52 45 41 54 45 20 54   blet4t4.CREATE T",
          "203:     |    288: 41 42 4c 45 20 74 34 28 78 29 2a 06 06 17 13 11   ABLE t4(x)*.....",
          "204:     |    304: 01 3f 69 6e 64 65 78 74 33 78 74 33 06 43 52 45   .?indext3xt3.CRE",
          "205:     |    320: 41 54 45 20 49 4e 44 45 58 20 74 33 64 20 4f 4e   ATE INDEX t3d ON",
          "206:     |    336: 20 74 33 28 78 29 2e 04 06 17 15 11 01 45 69 6e    t3(x).......Ein",
          "207:     |    352: 64 65 78 74 32 63 64 74 32 05 43 52 45 41 54 45   dext2cdt2.CREATE",
          "208:     |    368: 20 49 4e 44 45 58 20 74 32 63 64 20 4f 4e 20 74    INDEX t2cd ON t",
          "209:     |    384: 32 28 63 2c 64 29 28 05 06 17 11 11 01 3d 74 61   2(c,d)(......=ta",
          "210:     |    400: 62 6c 65 74 33 74 33 04 43 52 45 41 54 45 20 54   blet3t3.CREATE T",
          "211:     |    416: 41 42 4c 45 20 74 33 28 63 2c 78 2c 65 2c 66 29   ABLE t3(c,x,e,f)",
          "212:     |    432: 28 02 06 17 11 11 01 3d 74 61 62 6c 65 74 32 74   (......=tablet2t",
          "213:     |    448: 32 03 43 52 45 41 54 45 20 54 41 42 4c 45 20 74   2.CREATE TABLE t",
          "214:     |    464: 32 28 63 2c 64 2c 65 2c 66 29 24 01 06 17 11 11   2(c,d,e,f)$.....",
          "215:     |    480: 01 35 74 61 62 6c 65 74 31 74 31 02 43 52 45 41   .5tablet1t1.CREA",
          "216:     |    496: 54 45 20 54 41 42 4c 45 20 74 31 28 61 2c 62 29   TE TABLE t1(a,b)",
          "217:     | page 2 offset 512",
          "218:     |      0: 0d 00 00 00 04 01 cf 00 01 fa 01 f3 01 de 01 cf   ................",
          "219:     |    176: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "220:     |    256: 00 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "221:     |    368: 00 00 00 00 00 00 00 00 00 00 00 00 1e 00 00 00   ................",
          "222:     |    416: 00 00 00 1b 00 00 00 00 04 00 00 00 00 00 00 00   ................",
          "223:     |    448: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0d   ................",
          "224:     |    464: 04 03 17 17 73 65 76 65 6e 65 69 67 68 74 13 03   ....seveneight..",
          "225:     |    480: 03 07 07 40 14 00 00 00 00 00 00 40 18 00 00 00   ...@.......@....",
          "226:     |    496: 00 00 00 05 02 03 01 01 03 04 04 01 03 09 01 02   ................",
          "227:     | page 3 offset 1024",
          "228:     |      0: 0d 00 00 00 08 01 54 00 01 f7 01 ec 01 c5 01 aa   ......T.........",
          "229:     |     16: 01 a1 01 96 01 6f 01 54 00 00 00 00 00 00 00 00   .....o.T........",
          "230:     |     32: 00 00 00 00 00 00 00 03 e8 00 00 00 00 00 00 00   ................",
          "231:     |    336: 00 00 00 00 19 08 05 16 17 17 17 65 69 67 68 74   ...........eight",
          "232:     |    352: 65 69 67 68 74 73 65 76 65 6e 73 65 76 ff ff ff   eightsevensev...",
          "233:     |    368: 0e 05 07 07 07 07 40 18 00 00 00 00 00 00 40 18   ......@.......@.",
          "234:     |    384: 00 00 00 00 00 00 40 14 00 00 00 00 00 00 40 14   ......@.......@.",
          "235:     |    400: 00 00 00 00 00 00 09 06 05 01 01 01 01 04 04 03   ................",
          "236:     |    416: 03 07 05 05 01 01 09 09 02 02 19 04 05 17 17 17   ................",
          "237:     |    432: 17 73 65 6f 65 6e 65 69 67 68 74 65 69 67 68 74   .seoeneighteight",
          "238:     |    448: 73 65 76 65 6e 25 03 05 07 07 07 07 40 14 00 00   seven%......@...",
          "239:     |    464: 00 00 00 00 40 18 00 00 00 00 00 00 40 18 00 00   ....@.......@...",
          "240:     |    480: 00 00 00 00 40 14 00 00 00 00 00 00 09 02 05 01   ....@...........",
          "241:     |    496: 01 01 01 03 04 04 03 07 01 05 09 01 01 09 02 02   ................",
          "242:     | page 4 offset 1536",
          "243:     |      0: 0d 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00   ................",
          "244:     |    160: 00 00 00 ea 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "245:     |    336: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00   ............ ...",
          "246:     | page 5 offset 2048",
          "247:     |      0: 0a 00 00 00 08 01 96 00 01 fa 01 c4 01 f2 01 bc   ................",
          "248:     |     16: 01 dc 01 a6 01 96 01 cc 00 00 00 00 00 00 00 00   ................",
          "249:     |     48: 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00   ................",
          "250:     |    288: 00 00 00 00 00 00 00 00 00 64 00 00 00 2b 00 00   .........d...+..",
          "251:     |    400: 00 00 00 00 00 00 0f 04 17 17 01 65 69 67 68 74   ...........eight",
          "252:     |    416: 65 69 6f 68 74 08 15 04 07 07 01 40 18 00 00 00   eioht......@....",
          "253:     |    432: 00 00 00 40 18 00 00 00 00 00 00 07 07 04 01 01   ...@............",
          "254:     |    448: 01 04 04 06 07 04 01 01 01 02 02 05 0f 04 17 17   ................",
          "255:     |    464: 01 73 65 76 65 6e 65 69 67 68 74 04 15 04 07 07   .seveneight.....",
          "256:     |    480: 01 40 14 00 00 00 00 00 00 40 18 00 00 00 00 00   .@.......@......",
          "257:     |    496: 00 03 07 04 01 01 01 03 04 02 05 04 09 01 09 02   ................",
          "258:     | page 6 offset 2560",
          "259:     |      0: 0a 00 00 00 00 02 00 00 00 00 00 00 00 0d 00 00   ................",
          "260:     |     16: 00 08 01 c2 00 01 fb 01 f6 01 f1 01 ec 01 e0 01   ................",
          "261:     |     32: d4 01 cb 01 c2 00 00 00 00 00 00 00 00 00 00 00   ................",
          "262:     |    160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00   ................",
          "263:     |    448: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07   ................",
          "264:     |    464: 08 02 17 65 69 67 68 74 07 07 02 17 65 69 67 68   ...eight....eigh",
          "265:     |    480: 74 0a 06 02 07 40 18 00 00 00 00 00 00 0a 05 02   t....@..........",
          "266:     |    496: 07 40 18 00 04 02 01 04 03 03 02 01 04 03 02 02   .@..............",
          "267:     | end x/c03.db",
          "268:   }]",
          "269:   catchsql {INSERT INTO t3 SELECT * FROM t2;}",
          "270: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c19b63c9a32f9de0830eb43f50c03aad3b351b51",
      "candidate_info": {
        "commit_hash": "c19b63c9a32f9de0830eb43f50c03aad3b351b51",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c19b63c9a32f9de0830eb43f50c03aad3b351b51",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Improved header comment and precondition checking for the new isDupColumn() function.\n\nFossilOrigin-Name: 740d5ff6cc9bf7b151dfb8b27409e5923cfb2789b5398fe13d89563aff8ffc07",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b34fa5bff40d3d364bd8c80e7de55c606ef3caac47b14b5265ebcb38857eb85e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1741: }",
          "1755:   int i, j;",
          "1761:   for(i=0; i<nKey; i++){",
          "1765:     ){",
          "1766:       return 1;",
          "1767:     }",
          "",
          "[Removed Lines]",
          "1754: static int isDupColumn(Index *pIdx1, int nKey, Index *pIdx2, int iCol){",
          "1756:   assert( nKey<=pIdx1->nColumn );",
          "1757:   assert( iCol<MAX(pIdx2->nColumn,pIdx2->nKeyCol) );",
          "1758:   j = pIdx2->aiColumn[iCol];",
          "1759:   testcase( j==XN_EXPR );",
          "1760:   assert( j!=XN_ROWID );",
          "1762:     assert( pIdx1->aiColumn[i]>=0 || j>=0 );",
          "1763:     if( pIdx1->aiColumn[i]==j",
          "1764:      && sqlite3StrICmp(pIdx1->azColl[i],pIdx2->azColl[iCol])==0",
          "",
          "[Added Lines]",
          "1756: static int isDupColumn(Index *pIdx, int nKey, Index *pPk, int iCol){",
          "1758:   assert( nKey<=pIdx->nColumn );",
          "1759:   assert( iCol<MAX(pPk->nColumn,pPk->nKeyCol) );",
          "1760:   assert( pPk->idxType==SQLITE_IDXTYPE_PRIMARYKEY );",
          "1761:   assert( pPk->pTable->tabFlags & TF_WithoutRowid );",
          "1762:   assert( pPk->pTable==pIdx->pTable );",
          "1763:   testcase( pPk==pIdx );",
          "1764:   j = pPk->aiColumn[iCol];",
          "1765:   assert( j!=XN_ROWID && j!=XN_EXPR );",
          "1767:     assert( pIdx->aiColumn[i]>=0 || j>=0 );",
          "1768:     if( pIdx->aiColumn[i]==j",
          "1769:      && sqlite3StrICmp(pIdx->azColl[i], pPk->azColl[iCol])==0",
          "",
          "---------------"
        ]
      }
    }
  ]
}