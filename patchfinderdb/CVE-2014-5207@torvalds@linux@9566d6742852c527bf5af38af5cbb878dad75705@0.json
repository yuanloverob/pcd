{
  "cve_id": "CVE-2014-5207",
  "cve_desc": "fs/namespace.c in the Linux kernel through 3.16.1 does not properly restrict clearing MNT_NODEV, MNT_NOSUID, and MNT_NOEXEC and changing MNT_ATIME_MASK during a remount of a bind mount, which allows local users to gain privileges, interfere with backups and auditing on systems that had atime enabled, or cause a denial of service (excessive filesystem updating) on systems that had atime disabled via a \"mount -o remount\" command within a user namespace.",
  "repo": "torvalds/linux",
  "patch_hash": "9566d6742852c527bf5af38af5cbb878dad75705",
  "patch_info": {
    "commit_hash": "9566d6742852c527bf5af38af5cbb878dad75705",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/9566d6742852c527bf5af38af5cbb878dad75705",
    "files": [
      "fs/namespace.c",
      "include/linux/mount.h"
    ],
    "message": "mnt: Correct permission checks in do_remount\n\nWhile invesgiating the issue where in \"mount --bind -oremount,ro ...\"\nwould result in later \"mount --bind -oremount,rw\" succeeding even if\nthe mount started off locked I realized that there are several\nadditional mount flags that should be locked and are not.\n\nIn particular MNT_NOSUID, MNT_NODEV, MNT_NOEXEC, and the atime\nflags in addition to MNT_READONLY should all be locked.  These\nflags are all per superblock, can all be changed with MS_BIND,\nand should not be changable if set by a more privileged user.\n\nThe following additions to the current logic are added in this patch.\n- nosuid may not be clearable by a less privileged user.\n- nodev  may not be clearable by a less privielged user.\n- noexec may not be clearable by a less privileged user.\n- atime flags may not be changeable by a less privileged user.\n\nThe logic with atime is that always setting atime on access is a\nglobal policy and backup software and auditing software could break if\natime bits are not updated (when they are configured to be updated),\nand serious performance degradation could result (DOS attack) if atime\nupdates happen when they have been explicitly disabled.  Therefore an\nunprivileged user should not be able to mess with the atime bits set\nby a more privileged user.\n\nThe additional restrictions are implemented with the addition of\nMNT_LOCK_NOSUID, MNT_LOCK_NODEV, MNT_LOCK_NOEXEC, and MNT_LOCK_ATIME\nmnt flags.\n\nTaken together these changes and the fixes for MNT_LOCK_READONLY\nshould make it safe for an unprivileged user to create a user\nnamespace and to call \"mount --bind -o remount,... ...\" without\nthe danger of mount flags being changed maliciously.\n\nCc: stable@vger.kernel.org\nAcked-by: Serge E. Hallyn <serge.hallyn@ubuntu.com>\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>",
    "before_after_code_files": [
      "fs/namespace.c||fs/namespace.c",
      "include/linux/mount.h||include/linux/mount.h"
    ]
  },
  "patch_diff": {
    "fs/namespace.c||fs/namespace.c": [
      "File: fs/namespace.c -> fs/namespace.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "891:  mnt->mnt.mnt_flags = old->mnt.mnt_flags & ~(MNT_WRITE_HOLD|MNT_MARKED);",
      "897:  if ((flag & CL_UNPRIVILEGED) && list_empty(&old->mnt_expire))",
      "",
      "[Removed Lines]",
      "893:  if ((flag & CL_UNPRIVILEGED) && (mnt->mnt.mnt_flags & MNT_READONLY))",
      "894:   mnt->mnt.mnt_flags |= MNT_LOCK_READONLY;",
      "",
      "[Added Lines]",
      "893:  if (flag & CL_UNPRIVILEGED) {",
      "894:   mnt->mnt.mnt_flags |= MNT_LOCK_ATIME;",
      "896:   if (mnt->mnt.mnt_flags & MNT_READONLY)",
      "897:    mnt->mnt.mnt_flags |= MNT_LOCK_READONLY;",
      "899:   if (mnt->mnt.mnt_flags & MNT_NODEV)",
      "900:    mnt->mnt.mnt_flags |= MNT_LOCK_NODEV;",
      "902:   if (mnt->mnt.mnt_flags & MNT_NOSUID)",
      "903:    mnt->mnt.mnt_flags |= MNT_LOCK_NOSUID;",
      "905:   if (mnt->mnt.mnt_flags & MNT_NOEXEC)",
      "906:    mnt->mnt.mnt_flags |= MNT_LOCK_NOEXEC;",
      "907:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1931:      !(mnt_flags & MNT_READONLY)) {",
      "1932:   return -EPERM;",
      "1933:  }",
      "1934:  err = security_sb_remount(sb, data);",
      "1935:  if (err)",
      "1936:   return err;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1947:  if ((mnt->mnt.mnt_flags & MNT_LOCK_NODEV) &&",
      "1948:      !(mnt_flags & MNT_NODEV)) {",
      "1949:   return -EPERM;",
      "1950:  }",
      "1951:  if ((mnt->mnt.mnt_flags & MNT_LOCK_NOSUID) &&",
      "1952:      !(mnt_flags & MNT_NOSUID)) {",
      "1953:   return -EPERM;",
      "1954:  }",
      "1955:  if ((mnt->mnt.mnt_flags & MNT_LOCK_NOEXEC) &&",
      "1956:      !(mnt_flags & MNT_NOEXEC)) {",
      "1957:   return -EPERM;",
      "1958:  }",
      "1959:  if ((mnt->mnt.mnt_flags & MNT_LOCK_ATIME) &&",
      "1960:      ((mnt->mnt.mnt_flags & MNT_ATIME_MASK) != (mnt_flags & MNT_ATIME_MASK))) {",
      "1961:   return -EPERM;",
      "1962:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2130:   if (!(type->fs_flags & FS_USERNS_DEV_MOUNT)) {",
      "2131:    flags |= MS_NODEV;",
      "2133:   }",
      "2134:  }",
      "",
      "[Removed Lines]",
      "2132:    mnt_flags |= MNT_NODEV;",
      "",
      "[Added Lines]",
      "2162:    mnt_flags |= MNT_NODEV | MNT_LOCK_NODEV;",
      "",
      "---------------"
    ],
    "include/linux/mount.h||include/linux/mount.h": [
      "File: include/linux/mount.h -> include/linux/mount.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "45: #define MNT_USER_SETTABLE_MASK  (MNT_NOSUID | MNT_NODEV | MNT_NOEXEC \\",
      "46:      | MNT_NOATIME | MNT_NODIRATIME | MNT_RELATIME \\",
      "47:      | MNT_READONLY)",
      "49: #define MNT_INTERNAL_FLAGS (MNT_SHARED | MNT_WRITE_HOLD | MNT_INTERNAL | \\",
      "50:        MNT_DOOMED | MNT_SYNC_UMOUNT | MNT_MARKED)",
      "52: #define MNT_INTERNAL 0x4000",
      "54: #define MNT_LOCK_READONLY 0x400000",
      "55: #define MNT_LOCKED  0x800000",
      "56: #define MNT_DOOMED  0x1000000",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48: #define MNT_ATIME_MASK (MNT_NOATIME | MNT_NODIRATIME | MNT_RELATIME )",
      "55: #define MNT_LOCK_ATIME  0x040000",
      "56: #define MNT_LOCK_NOEXEC  0x080000",
      "57: #define MNT_LOCK_NOSUID  0x100000",
      "58: #define MNT_LOCK_NODEV  0x200000",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3e1866410f11356a9fd869beb3e95983dc79c067",
      "candidate_info": {
        "commit_hash": "3e1866410f11356a9fd869beb3e95983dc79c067",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/3e1866410f11356a9fd869beb3e95983dc79c067",
        "files": [
          "fs/namespace.c"
        ],
        "message": "mnt: Implicitly add MNT_NODEV on remount when it was implicitly added by mount\n\nNow that remount is properly enforcing the rule that you can't remove\nnodev at least sandstorm.io is breaking when performing a remount.\n\nIt turns out that there is an easy intuitive solution implicitly\nadd nodev on remount when nodev was implicitly added on mount.\n\nTested-by: Cedric Bosdonnat <cbosdonnat@suse.com>\nTested-by: Richard Weinberger <richard@nod.at>\nCc: stable@vger.kernel.org\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>",
        "before_after_code_files": [
          "fs/namespace.c||fs/namespace.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/namespace.c||fs/namespace.c"
          ],
          "candidate": [
            "fs/namespace.c||fs/namespace.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/namespace.c||fs/namespace.c": [
          "File: fs/namespace.c -> fs/namespace.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2098:  }",
          "2099:  if ((mnt->mnt.mnt_flags & MNT_LOCK_NODEV) &&",
          "2100:      !(mnt_flags & MNT_NODEV)) {",
          "2102:  }",
          "2103:  if ((mnt->mnt.mnt_flags & MNT_LOCK_NOSUID) &&",
          "2104:      !(mnt_flags & MNT_NOSUID)) {",
          "",
          "[Removed Lines]",
          "2101:   return -EPERM;",
          "",
          "[Added Lines]",
          "2102:   if ((mnt->mnt_ns->user_ns != &init_user_ns) &&",
          "2103:       !(sb->s_type->fs_flags & FS_USERNS_DEV_MOUNT)) {",
          "2104:    mnt_flags |= MNT_NODEV;",
          "2105:   } else {",
          "2106:    return -EPERM;",
          "2107:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}