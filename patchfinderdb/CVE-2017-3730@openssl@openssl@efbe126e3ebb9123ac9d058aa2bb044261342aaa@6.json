{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4caa44d7ea001708069d8ce638e11e7dfd975f85",
      "candidate_info": {
        "commit_hash": "4caa44d7ea001708069d8ce638e11e7dfd975f85",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4caa44d7ea001708069d8ce638e11e7dfd975f85",
        "files": [
          "crypto/ct/ct_b64.c"
        ],
        "message": "Pass a temporary pointer to o2i_SCT_signature from SCT_new_from_base64\n\nOtherwise, |dec| gets moved past the end of the signature by\no2i_SCT_signature and then can't be correctly freed afterwards.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1548)\n(cherry picked from commit 73ccf3ca01085d143aecb7fcfb0aac18caa678d2)",
        "before_after_code_files": [
          "crypto/ct/ct_b64.c||crypto/ct/ct_b64.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ct/ct_b64.c||crypto/ct/ct_b64.c": [
          "File: crypto/ct/ct_b64.c -> crypto/ct/ct_b64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: {",
          "65:     SCT *sct = SCT_new();",
          "66:     unsigned char *dec = NULL;",
          "67:     int declen;",
          "69:     if (sct == NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     const unsigned char* p = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:         CTerr(CT_F_SCT_NEW_FROM_BASE64, X509_R_BASE64_DECODE_ERROR);",
          "103:         goto err;",
          "104:     }",
          "106:         goto err;",
          "107:     OPENSSL_free(dec);",
          "108:     dec = NULL;",
          "",
          "[Removed Lines]",
          "105:     if (o2i_SCT_signature(sct, (const unsigned char **)&dec, declen) <= 0)",
          "",
          "[Added Lines]",
          "107:     p = dec;",
          "108:     if (o2i_SCT_signature(sct, &p, declen) <= 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd18736a6b970c9b772f9c1b3cda4adcd20c63e2",
      "candidate_info": {
        "commit_hash": "fd18736a6b970c9b772f9c1b3cda4adcd20c63e2",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/fd18736a6b970c9b772f9c1b3cda4adcd20c63e2",
        "files": [
          "test/evp_test.c"
        ],
        "message": "Update evp_test to make sure passing partial block to \"Update\" is ok\n\nThe previous commit fixed a bug where a partial block had been passed to\nan \"Update\" function and it wasn't properly handled. We should catch this\ntype of error in evp_test.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2275)\n(cherry picked from commit 0b96d77a62d8ac9a45ac1dda47560ced676b5b8d)",
        "before_after_code_files": [
          "test/evp_test.c||test/evp_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/evp_test.c||test/evp_test.c": [
          "File: test/evp_test.c -> test/evp_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "880: }",
          "882: static int cipher_test_enc(struct evp_test *t, int enc,",
          "884: {",
          "885:     struct cipher_data *cdat = t->data;",
          "886:     unsigned char *in, *out, *tmp = NULL;",
          "889:     EVP_CIPHER_CTX *ctx = NULL;",
          "890:     const char *err;",
          "891:     err = \"INTERNAL_ERROR\";",
          "",
          "[Removed Lines]",
          "883:                            size_t out_misalign, size_t inp_misalign)",
          "887:     size_t in_len, out_len;",
          "888:     int tmplen, tmpflen;",
          "",
          "[Added Lines]",
          "883:                            size_t out_misalign, size_t inp_misalign, int frag)",
          "887:     size_t in_len, out_len, donelen = 0;",
          "888:     int tmplen, chunklen, tmpflen;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "983:         }",
          "984:     }",
          "985:     if (cdat->aad) {",
          "989:         }",
          "990:     }",
          "991:     EVP_CIPHER_CTX_set_padding(ctx, 0);",
          "992:     err = \"CIPHERUPDATE_ERROR\";",
          "995:     if (cdat->aead == EVP_CIPH_CCM_MODE)",
          "996:         tmpflen = 0;",
          "997:     else {",
          "",
          "[Removed Lines]",
          "986:         if (!EVP_CipherUpdate(ctx, NULL, &tmplen, cdat->aad, cdat->aad_len)) {",
          "987:             err = \"AAD_SET_ERROR\";",
          "988:             goto err;",
          "993:     if (!EVP_CipherUpdate(ctx, tmp + out_misalign, &tmplen, in, in_len))",
          "994:         goto err;",
          "",
          "[Added Lines]",
          "986:         err = \"AAD_SET_ERROR\";",
          "987:         if (!frag) {",
          "988:             if (!EVP_CipherUpdate(ctx, NULL, &chunklen, cdat->aad,",
          "989:                                   cdat->aad_len))",
          "990:                 goto err;",
          "991:         } else {",
          "995:             if (cdat->aad_len > 0) {",
          "996:                 if (!EVP_CipherUpdate(ctx, NULL, &chunklen, cdat->aad, 1))",
          "997:                     goto err;",
          "998:                 donelen++;",
          "999:             }",
          "1000:             if (cdat->aad_len > 2) {",
          "1001:                 if (!EVP_CipherUpdate(ctx, NULL, &chunklen, cdat->aad + donelen,",
          "1002:                                       cdat->aad_len - 2))",
          "1003:                     goto err;",
          "1004:                 donelen += cdat->aad_len - 2;",
          "1005:             }",
          "1006:             if (cdat->aad_len > 1",
          "1007:                     && !EVP_CipherUpdate(ctx, NULL, &chunklen,",
          "1008:                                          cdat->aad + donelen, 1))",
          "1009:                 goto err;",
          "1014:     tmplen = 0;",
          "1015:     donelen = 0;",
          "1016:     if (!frag) {",
          "1018:         if (!EVP_CipherUpdate(ctx, tmp + out_misalign, &tmplen, in, in_len))",
          "1019:             goto err;",
          "1020:     } else {",
          "1022:         if (in_len > 0) {",
          "1023:             if (!EVP_CipherUpdate(ctx, tmp + out_misalign, &chunklen, in, 1))",
          "1024:                 goto err;",
          "1025:             tmplen += chunklen;",
          "1026:             donelen = 1;",
          "1027:         }",
          "1028:         if (in_len > 2) {",
          "1029:             if (!EVP_CipherUpdate(ctx, tmp + out_misalign + tmplen, &chunklen,",
          "1030:                                   in + donelen, in_len - 2))",
          "1031:                 goto err;",
          "1032:             tmplen += chunklen;",
          "1033:             donelen += in_len - 2;",
          "1034:         }",
          "1035:         if (in_len > 1 ) {",
          "1036:             if (!EVP_CipherUpdate(ctx, tmp + out_misalign + tmplen, &chunklen,",
          "1037:                                   in + donelen, 1))",
          "1038:                 goto err;",
          "1039:             tmplen += chunklen;",
          "1040:         }",
          "1041:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1032: static int cipher_test_run(struct evp_test *t)",
          "1033: {",
          "1034:     struct cipher_data *cdat = t->data;",
          "1036:     size_t out_misalign, inp_misalign;",
          "1038:     if (!cdat->key) {",
          "",
          "[Removed Lines]",
          "1035:     int rv;",
          "",
          "[Added Lines]",
          "1082:     int rv, frag = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1050:         t->err = \"NO_TAG\";",
          "1051:         return 0;",
          "1052:     }",
          "1054:         static char aux_err[64];",
          "1055:         t->aux_err = aux_err;",
          "1056:         for (inp_misalign = (size_t)-1; inp_misalign != 2; inp_misalign++) {",
          "1057:             if (inp_misalign == (size_t)-1) {",
          "1061:             } else {",
          "1063:                              out_misalign ? \"misaligned\" : \"aligned\",",
          "1065:             }",
          "1066:             if (cdat->enc) {",
          "1069:                 if (rv != 1) {",
          "1070:                     if (rv < 0)",
          "",
          "[Removed Lines]",
          "1053:     for (out_misalign = 0; out_misalign <= 1; out_misalign++) {",
          "1059:                 BIO_snprintf(aux_err, sizeof(aux_err), \"%s in-place\",",
          "1060:                              out_misalign ? \"misaligned\" : \"aligned\");",
          "1062:                 BIO_snprintf(aux_err, sizeof(aux_err), \"%s output and %s input\",",
          "1064:                              inp_misalign ? \"misaligned\" : \"aligned\");",
          "1067:                 rv = cipher_test_enc(t, 1, out_misalign, inp_misalign);",
          "",
          "[Added Lines]",
          "1100:     for (out_misalign = 0; out_misalign <= 1;) {",
          "1104:             if (frag && inp_misalign == (size_t)-1)",
          "1105:                  continue;",
          "1109:                 BIO_snprintf(aux_err, sizeof(aux_err),",
          "1110:                              \"%s in-place, %sfragmented\",",
          "1111:                              out_misalign ? \"misaligned\" : \"aligned\",",
          "1112:                              frag ? \"\" : \"not \");",
          "1114:                 BIO_snprintf(aux_err, sizeof(aux_err),",
          "1115:                              \"%s output and %s input, %sfragmented\",",
          "1117:                              inp_misalign ? \"misaligned\" : \"aligned\",",
          "1118:                              frag ? \"\" : \"not \");",
          "1121:                 rv = cipher_test_enc(t, 1, out_misalign, inp_misalign, frag);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1073:                 }",
          "1074:             }",
          "1075:             if (cdat->enc != 1) {",
          "1078:                 if (rv != 1) {",
          "1079:                     if (rv < 0)",
          "",
          "[Removed Lines]",
          "1076:                 rv = cipher_test_enc(t, 0, out_misalign, inp_misalign);",
          "",
          "[Added Lines]",
          "1130:                 rv = cipher_test_enc(t, 0, out_misalign, inp_misalign, frag);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1082:                 }",
          "1083:             }",
          "1084:         }",
          "1085:     }",
          "1086:     t->aux_err = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1140:         if (out_misalign == 1 && frag == 0) {",
          "1145:             if (cdat->aead == EVP_CIPH_CCM_MODE",
          "1146:                     || EVP_CIPHER_mode(cdat->cipher) == EVP_CIPH_XTS_MODE",
          "1147:                      || EVP_CIPHER_mode(cdat->cipher) == EVP_CIPH_WRAP_MODE)",
          "1148:                 break;",
          "1149:             out_misalign = 0;",
          "1150:             frag++;",
          "1151:         } else {",
          "1152:             out_misalign++;",
          "1153:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "848dc9619049f6aaad91b367eed309d987009e5e",
      "candidate_info": {
        "commit_hash": "848dc9619049f6aaad91b367eed309d987009e5e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/848dc9619049f6aaad91b367eed309d987009e5e",
        "files": [
          "Configurations/10-main.conf",
          "crypto/init.c"
        ],
        "message": "Link using -znodelete\n\nInstead of deliberately leaking a reference to ourselves, use nodelete\nwhich does this more neatly. Only for Linux at the moment.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\n(cherry picked from commit b6d5ba1a9f004d637acac18ae3519fe063b6b5e1)",
        "before_after_code_files": [
          "Configurations/10-main.conf||Configurations/10-main.conf",
          "crypto/init.c||crypto/init.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Configurations/10-main.conf||Configurations/10-main.conf": [
          "File: Configurations/10-main.conf -> Configurations/10-main.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "631:         thread_scheme    => \"pthreads\",",
          "632:         dso_scheme       => \"dlfcn\",",
          "633:         shared_target    => \"linux-shared\",",
          "635:         shared_extension => \".so.\\$(SHLIB_MAJOR).\\$(SHLIB_MINOR)\",",
          "636:     },",
          "637:     \"linux-generic64\" => {",
          "",
          "[Removed Lines]",
          "634:         shared_cflag     => \"-fPIC\",",
          "",
          "[Added Lines]",
          "634:         shared_cflag     => \"-fPIC -DOPENSSL_USE_NODELETE\",",
          "635:         shared_ldflag    => \"-znodelete\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "647:         inherit_from     => [ \"linux-generic64\", asm(\"ppc64_asm\") ],",
          "648:         cflags           => add(\"-m64 -DB_ENDIAN\"),",
          "649:         perlasm_scheme   => \"linux64\",",
          "651:         multilib         => \"64\",",
          "652:     },",
          "653:     \"linux-ppc64le\" => {",
          "654:         inherit_from     => [ \"linux-generic64\", asm(\"ppc64_asm\") ],",
          "655:         cflags           => add(\"-m64 -DL_ENDIAN\"),",
          "656:         perlasm_scheme   => \"linux64le\",",
          "658:     },",
          "660:     \"linux-armv4\" => {",
          "",
          "[Removed Lines]",
          "650:         shared_ldflag    => \"-m64\",",
          "657:         shared_ldflag    => \"-m64\",",
          "",
          "[Added Lines]",
          "651:         shared_ldflag    => add(\"-m64\"),",
          "658:         shared_ldflag    => add(\"-m64\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "710:         inherit_from     => [ \"linux-generic32\", asm(\"mips32_asm\") ],",
          "711:         cflags           => add(\"-mabi=32 -DBN_DIV3W\"),",
          "712:         perlasm_scheme   => \"o32\",",
          "714:     },",
          "715:     # mips32 and mips64 below refer to contemporary MIPS Architecture",
          "716:     # specifications, MIPS32 and MIPS64, rather than to kernel bitness.",
          "",
          "[Removed Lines]",
          "713:         shared_ldflag    => \"-mabi=32\",",
          "",
          "[Added Lines]",
          "714:         shared_ldflag    => add(\"-mabi=32\"),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "719:         cflags           => add(\"-mabi=n32 -DBN_DIV3W\"),",
          "720:         bn_ops           => \"SIXTY_FOUR_BIT RC4_CHAR\",",
          "721:         perlasm_scheme   => \"n32\",",
          "723:         multilib         => \"32\",",
          "724:     },",
          "725:     \"linux64-mips64\" => {",
          "726:         inherit_from     => [ \"linux-generic64\", asm(\"mips64_asm\") ],",
          "727:         cflags           => add(\"-mabi=64 -DBN_DIV3W\"),",
          "728:         perlasm_scheme   => \"64\",",
          "730:         multilib         => \"64\",",
          "731:     },",
          "",
          "[Removed Lines]",
          "722:         shared_ldflag    => \"-mabi=n32\",",
          "729:         shared_ldflag    => \"-mabi=64\",",
          "",
          "[Added Lines]",
          "723:         shared_ldflag    => add(\"-mabi=n32\"),",
          "730:         shared_ldflag    => add(\"-mabi=64\"),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "753:         cflags           => add(\"-m64 -DL_ENDIAN\"),",
          "754:         bn_ops           => \"SIXTY_FOUR_BIT_LONG\",",
          "755:         perlasm_scheme   => \"elf\",",
          "757:         multilib         => \"64\",",
          "758:     },",
          "759:     \"linux-x86_64-clang\" => {",
          "",
          "[Removed Lines]",
          "756:         shared_ldflag    => \"-m64\",",
          "",
          "[Added Lines]",
          "757:         shared_ldflag    => add(\"-m64\"),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "779:         inherit_from     => [ \"linux-generic64\", asm(\"s390x_asm\") ],",
          "780:         cflags           => add(\"-m64 -DB_ENDIAN\"),",
          "781:         perlasm_scheme   => \"64\",",
          "783:         multilib         => \"64\",",
          "784:     },",
          "785:     \"linux32-s390x\" => {",
          "",
          "[Removed Lines]",
          "782:         shared_ldflag    => \"-m64\",",
          "",
          "[Added Lines]",
          "783:         shared_ldflag    => add(\"-m64\"),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "803:         cflags           => add(\"-m31 -Wa,-mzarch -DB_ENDIAN\"),",
          "804:         bn_asm_src       => sub { my $r=join(\" \",@_); $r=~s|asm/s390x\\.S|bn_asm.c|; $r; },",
          "805:         perlasm_scheme   => \"31\",",
          "807:         multilib         => \"/highgprs\",",
          "808:     },",
          "",
          "[Removed Lines]",
          "806:         shared_ldflag    => \"-m31\",",
          "",
          "[Added Lines]",
          "807:         shared_ldflag    => add(\"-m31\"),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "819:         # but -Wa,-Av8plus should do the trick no matter what.",
          "820:         inherit_from     => [ \"linux-generic32\", asm(\"sparcv9_asm\") ],",
          "821:         cflags           => add(\"-m32 -mcpu=ultrasparc -Wa,-Av8plus -DB_ENDIAN -DBN_DIV2W\"),",
          "823:     },",
          "824:     \"linux64-sparcv9\" => {",
          "825:         # GCC 3.1 is a requirement",
          "826:         inherit_from     => [ \"linux-generic64\", asm(\"sparcv9_asm\") ],",
          "827:         cflags           => add(\"-m64 -mcpu=ultrasparc -DB_ENDIAN\"),",
          "828:         bn_ops           => \"BN_LLONG RC4_CHAR\",",
          "830:         multilib         => \"64\",",
          "831:     },",
          "",
          "[Removed Lines]",
          "822:         shared_ldflag    => \"-m32\",",
          "829:         shared_ldflag    => \"-m64\",",
          "",
          "[Added Lines]",
          "823:         shared_ldflag    => add(\"-m32\"),",
          "830:         shared_ldflag    => add(\"-m64\"),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "855:         dso_scheme       => \"dlfcn\",",
          "856:         shared_target    => \"linux-shared\",",
          "857:         shared_cflag     => \"--pic\",",
          "859:         shared_extension => \".so.\\$(SHLIB_MAJOR).\\$(SHLIB_MINOR)\",",
          "860:         ranlib           => \"true\",",
          "861:     },",
          "",
          "[Removed Lines]",
          "858:         shared_ldflag    => \"-z --sysv --shared\",",
          "",
          "[Added Lines]",
          "859:         shared_ldflag    => add(\"-z --sysv --shared\"),",
          "",
          "---------------"
        ],
        "crypto/init.c||crypto/init.c": [
          "File: crypto/init.c -> crypto/init.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     OPENSSL_cpuid_setup();",
          "82:     base_inited = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: #ifndef OPENSSL_USE_NODELETE",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:         dso = DSO_dsobyaddr(&base_inited, DSO_FLAG_NO_UNLOAD_ON_FREE);",
          "92:         DSO_free(dso);",
          "93:     }",
          "95:     return 1;",
          "96: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "588: {",
          "589:     OPENSSL_INIT_STOP *newhand;",
          "596:     {",
          "597:         DSO *dso = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593: #ifndef OPENSSL_USE_NODELETE",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "605:         dso = DSO_dsobyaddr(handlersym.sym, DSO_FLAG_NO_UNLOAD_ON_FREE);",
          "606:         DSO_free(dso);",
          "607:     }",
          "609:     newhand = OPENSSL_malloc(sizeof(*newhand));",
          "610:     if (newhand == NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "611: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f096bbd71984fa8311939ff7422975e1c88d8362",
      "candidate_info": {
        "commit_hash": "f096bbd71984fa8311939ff7422975e1c88d8362",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f096bbd71984fa8311939ff7422975e1c88d8362",
        "files": [
          "crypto/rsa/rsa_err.c",
          "crypto/rsa/rsa_pmeth.c",
          "include/openssl/rsa.h"
        ],
        "message": "Check input length to pkey_rsa_verify()\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2065)\n(cherry picked from commit 71bbc79b7d3b1195a7a7dd5f547d52ddce32d6f0)",
        "before_after_code_files": [
          "crypto/rsrsa_err.c||crypto/rsa/rsa_err.c",
          "crypto/rsrsa_pmeth.c||crypto/rsa/rsa_pmeth.c",
          "include/openssl/rsa.h||include/openssl/rsa.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/rsrsa_err.c||crypto/rsa/rsa_err.c": [
          "File: crypto/rsrsa_err.c -> crypto/rsa/rsa_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:     {ERR_FUNC(RSA_F_PKEY_RSA_VERIFY), \"pkey_rsa_verify\"},",
          "",
          "---------------"
        ],
        "crypto/rsrsa_pmeth.c||crypto/rsa/rsa_pmeth.c": [
          "File: crypto/rsrsa_pmeth.c -> crypto/rsa/rsa_pmeth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:         if (tbslen != (size_t)EVP_MD_size(rctx->md)) {",
          "233:             RSAerr(RSA_F_PKEY_RSA_VERIFY, RSA_R_INVALID_DIGEST_LENGTH);",
          "234:             return -1;",
          "235:         }",
          "",
          "---------------"
        ],
        "include/openssl/rsa.h||include/openssl/rsa.h": [
          "File: include/openssl/rsa.h -> include/openssl/rsa.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "468: # define RSA_F_PKEY_RSA_CTRL                              143",
          "469: # define RSA_F_PKEY_RSA_CTRL_STR                          144",
          "470: # define RSA_F_PKEY_RSA_SIGN                              142",
          "471: # define RSA_F_PKEY_RSA_VERIFYRECOVER                     141",
          "472: # define RSA_F_RSA_ALGOR_TO_MD                            156",
          "473: # define RSA_F_RSA_BUILTIN_KEYGEN                         129",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "471: # define RSA_F_PKEY_RSA_VERIFY                            149",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4815a0bd2bcb00abea63f651284100028e3436c",
      "candidate_info": {
        "commit_hash": "e4815a0bd2bcb00abea63f651284100028e3436c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e4815a0bd2bcb00abea63f651284100028e3436c",
        "files": [
          "test/recipes/70-test_sslrecords.t",
          "util/TLSProxy/Record.pm"
        ],
        "message": "Add a test for unrecognised record types\n\nWe should fail if we receive an unrecognised record type\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\n(cherry picked from commit 1f3e70a450364e3152973380ea4d3bb6694f3980)",
        "before_after_code_files": [
          "test/recipes/70-test_sslrecords.t||test/recipes/70-test_sslrecords.t",
          "util/TLSProxy/Record.pm||util/TLSProxy/Record.pm"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/70-test_sslrecords.t||test/recipes/70-test_sslrecords.t": [
          "File: test/recipes/70-test_sslrecords.t -> test/recipes/70-test_sslrecords.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: my $content_type = TLSProxy::Record::RT_APPLICATION_DATA;",
          "39: my $inject_recs_num = 1;",
          "40: $proxy->start() or plan skip_all => \"Unable to start up Proxy for tests\";",
          "42: ok(TLSProxy::Message->fail(), \"Out of context empty records test\");",
          "44: #Test 2: Injecting in context empty records should succeed",
          "",
          "[Removed Lines]",
          "41: plan tests => 9;",
          "",
          "[Added Lines]",
          "41: my $num_tests = 10;",
          "42: if (!disabled(\"tls1_1\")) {",
          "43:     $num_tests++;",
          "44: }",
          "45: plan tests => $num_tests;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107: $proxy->clear();",
          "108: $proxy->start();",
          "109: ok(TLSProxy::Message->fail(), \"Alert before SSLv2 ClientHello test\");",
          "110: sub add_empty_recs_filter",
          "111: {",
          "112:     my $proxy = shift;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: #Unregcognised record type tests",
          "117: #Test 10: Sending an unrecognised record type in TLS1.2 should fail",
          "118: $proxy->clear();",
          "119: $proxy->filter(\\&add_unknown_record_type);",
          "120: $proxy->start();",
          "121: ok(TLSProxy::Message->fail(), \"Unrecognised record type in TLS1.2\");",
          "123: #Test 11: Sending an unrecognised record type in TLS1.1 should fail",
          "124: if (!disabled(\"tls1_1\")) {",
          "125:     $proxy->clear();",
          "126:     $proxy->clientflags(\"-tls1_1\");",
          "127:     $proxy->start();",
          "128:     ok(TLSProxy::Message->fail(), \"Unrecognised record type in TLS1.1\");",
          "129: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "333:     }",
          "335: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358: sub add_unknown_record_type",
          "359: {",
          "360:     my $proxy = shift;",
          "362:     # We'll change a record after the initial version neg has taken place",
          "363:     if ($proxy->flight != 2) {",
          "364:         return;",
          "365:     }",
          "367:     my $lastrec = ${$proxy->record_list}[-1];",
          "368:     my $record = TLSProxy::Record->new(",
          "369:         2,",
          "370:         TLSProxy::Record::RT_UNKNOWN,",
          "371:         $lastrec->version(),",
          "372:         1,",
          "373:         0,",
          "374:         1,",
          "375:         1,",
          "376:         \"X\",",
          "377:         \"X\"",
          "378:     );",
          "380:     unshift @{$proxy->record_list}, $record;",
          "381: }",
          "",
          "---------------"
        ],
        "util/TLSProxy/Record.pm||util/TLSProxy/Record.pm": [
          "File: util/TLSProxy/Record.pm -> util/TLSProxy/Record.pm",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:     RT_APPLICATION_DATA => 23,",
          "23:     RT_HANDSHAKE => 22,",
          "24:     RT_ALERT => 21,",
          "26: };",
          "28: my %record_type = (",
          "29:     RT_APPLICATION_DATA, \"APPLICATION DATA\",",
          "30:     RT_HANDSHAKE, \"HANDSHAKE\",",
          "31:     RT_ALERT, \"ALERT\",",
          "33: );",
          "35: use constant {",
          "",
          "[Removed Lines]",
          "25:     RT_CCS => 20",
          "32:     RT_CCS, \"CCS\"",
          "",
          "[Added Lines]",
          "25:     RT_CCS => 20,",
          "26:     RT_UNKNOWN => 100",
          "33:     RT_CCS, \"CCS\",",
          "34:     RT_UNKNOWN, \"UNKNOWN\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}