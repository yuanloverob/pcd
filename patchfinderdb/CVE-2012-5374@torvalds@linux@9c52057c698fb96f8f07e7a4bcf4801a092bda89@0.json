{
  "cve_id": "CVE-2012-5374",
  "cve_desc": "The CRC32C feature in the Btrfs implementation in the Linux kernel before 3.8-rc1 allows local users to cause a denial of service (extended runtime of kernel code) by creating many different files whose names are associated with the same CRC32C hash value.",
  "repo": "torvalds/linux",
  "patch_hash": "9c52057c698fb96f8f07e7a4bcf4801a092bda89",
  "patch_info": {
    "commit_hash": "9c52057c698fb96f8f07e7a4bcf4801a092bda89",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/9c52057c698fb96f8f07e7a4bcf4801a092bda89",
    "files": [
      "fs/btrfs/ctree.h",
      "fs/btrfs/dir-item.c",
      "fs/btrfs/inode.c",
      "fs/btrfs/ioctl.c",
      "fs/btrfs/transaction.c"
    ],
    "message": "Btrfs: fix hash overflow handling\n\nThe handling for directory crc hash overflows was fairly obscure,\nsplit_leaf returns EOVERFLOW when we try to extend the item and that is\nsupposed to bubble up to userland.  For a while it did so, but along the\nway we added better handling of errors and forced the FS readonly if we\nhit IO errors during the directory insertion.\n\nAlong the way, we started testing only for EEXIST and the EOVERFLOW case\nwas dropped.  The end result is that we may force the FS readonly if we\ncatch a directory hash bucket overflow.\n\nThis fixes a few problem spots.  First I add tests for EOVERFLOW in the\nplaces where we can safely just return the error up the chain.\n\nbtrfs_rename is harder though, because it tries to insert the new\ndirectory item only after it has already unlinked anything the rename\nwas going to overwrite.  Rather than adding very complex logic, I added\na helper to test for the hash overflow case early while it is still safe\nto bail out.\n\nSnapshot and subvolume creation had a similar problem, so they are using\nthe new helper now too.\n\nSigned-off-by: Chris Mason <chris.mason@fusionio.com>\nReported-by: Pascal Junod <pascal@junod.info>",
    "before_after_code_files": [
      "fs/btrfs/ctree.h||fs/btrfs/ctree.h",
      "fs/btrfs/dir-item.c||fs/btrfs/dir-item.c",
      "fs/btrfs/inode.c||fs/btrfs/inode.c",
      "fs/btrfs/ioctl.c||fs/btrfs/ioctl.c",
      "fs/btrfs/transaction.c||fs/btrfs/transaction.c"
    ]
  },
  "patch_diff": {
    "fs/btrfs/ctree.h||fs/btrfs/ctree.h": [
      "File: fs/btrfs/ctree.h -> fs/btrfs/ctree.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "3283:         struct btrfs_root *root);",
      "3286: int btrfs_insert_dir_item(struct btrfs_trans_handle *trans,",
      "3287:      struct btrfs_root *root, const char *name,",
      "3288:      int name_len, struct inode *dir,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3286: int btrfs_check_dir_item_collision(struct btrfs_root *root, u64 dir,",
      "3287:      const char *name, int name_len);",
      "",
      "---------------"
    ],
    "fs/btrfs/dir-item.c||fs/btrfs/dir-item.c": [
      "File: fs/btrfs/dir-item.c -> fs/btrfs/dir-item.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "213:  return btrfs_match_dir_item_name(root, path, name, name_len);",
      "214: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216: int btrfs_check_dir_item_collision(struct btrfs_root *root, u64 dir,",
      "217:        const char *name, int name_len)",
      "218: {",
      "219:  int ret;",
      "220:  struct btrfs_key key;",
      "221:  struct btrfs_dir_item *di;",
      "222:  int data_size;",
      "223:  struct extent_buffer *leaf;",
      "224:  int slot;",
      "225:  struct btrfs_path *path;",
      "228:  path = btrfs_alloc_path();",
      "229:  if (!path)",
      "230:   return -ENOMEM;",
      "232:  key.objectid = dir;",
      "233:  btrfs_set_key_type(&key, BTRFS_DIR_ITEM_KEY);",
      "234:  key.offset = btrfs_name_hash(name, name_len);",
      "236:  ret = btrfs_search_slot(NULL, root, &key, path, 0, 0);",
      "239:  if (ret < 0)",
      "240:   goto out;",
      "243:  if (ret > 0) {",
      "244:   ret = 0;",
      "245:   goto out;",
      "246:  }",
      "249:  di = btrfs_match_dir_item_name(root, path, name, name_len);",
      "250:  if (di) {",
      "252:   ret = -EEXIST;",
      "253:   goto out;",
      "254:  }",
      "260:  data_size = sizeof(*di) + name_len + sizeof(struct btrfs_item);",
      "261:  leaf = path->nodes[0];",
      "262:  slot = path->slots[0];",
      "263:  if (data_size + btrfs_item_size_nr(leaf, slot) +",
      "264:      sizeof(struct btrfs_item) > BTRFS_LEAF_DATA_SIZE(root)) {",
      "265:   ret = -EOVERFLOW;",
      "266:  } else {",
      "268:   ret = 0;",
      "269:  }",
      "270: out:",
      "271:  btrfs_free_path(path);",
      "272:  return ret;",
      "273: }",
      "",
      "---------------"
    ],
    "fs/btrfs/inode.c||fs/btrfs/inode.c": [
      "File: fs/btrfs/inode.c -> fs/btrfs/inode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4885:  ret = btrfs_insert_dir_item(trans, root, name, name_len,",
      "4886:         parent_inode, &key,",
      "4887:         btrfs_inode_type(inode), index);",
      "4889:   goto fail_dir_item;",
      "4890:  else if (ret) {",
      "4891:   btrfs_abort_transaction(trans, root, ret);",
      "",
      "[Removed Lines]",
      "4888:  if (ret == -EEXIST)",
      "",
      "[Added Lines]",
      "4888:  if (ret == -EEXIST || ret == -EOVERFLOW)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "7336:  if (S_ISDIR(old_inode->i_mode) && new_inode &&",
      "7337:      new_inode->i_size > BTRFS_EMPTY_DIR_SIZE)",
      "7338:   return -ENOTEMPTY;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7342:  ret = btrfs_check_dir_item_collision(root, new_dir->i_ino,",
      "7343:         new_dentry->d_name.name,",
      "7344:         new_dentry->d_name.len);",
      "7346:  if (ret) {",
      "7347:   if (ret == -EEXIST) {",
      "7350:    if (!new_inode) {",
      "7351:     WARN_ON(1);",
      "7352:     return ret;",
      "7353:    }",
      "7354:   } else {",
      "7356:    return ret;",
      "7357:   }",
      "7358:  }",
      "7359:  ret = 0;",
      "",
      "---------------"
    ],
    "fs/btrfs/ioctl.c||fs/btrfs/ioctl.c": [
      "File: fs/btrfs/ioctl.c -> fs/btrfs/ioctl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "710:  if (error)",
      "711:   goto out_dput;",
      "713:  down_read(&BTRFS_I(dir)->root->fs_info->subvol_sem);",
      "715:  if (btrfs_root_refs(&BTRFS_I(dir)->root->root_item) == 0)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "717:  error = btrfs_check_dir_item_collision(BTRFS_I(dir)->root,",
      "718:             dir->i_ino, name,",
      "719:             namelen);",
      "720:  if (error)",
      "721:   goto out_dput;",
      "",
      "---------------"
    ],
    "fs/btrfs/transaction.c||fs/btrfs/transaction.c": [
      "File: fs/btrfs/transaction.c -> fs/btrfs/transaction.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1190:         parent_inode, &key,",
      "1191:         BTRFS_FT_DIR, index);",
      "1194:  if (ret) {",
      "1195:   btrfs_abort_transaction(trans, root, ret);",
      "1196:   goto fail;",
      "",
      "[Removed Lines]",
      "1193:  BUG_ON(ret == -EEXIST);",
      "",
      "[Added Lines]",
      "1193:  BUG_ON(ret == -EEXIST || ret == -EOVERFLOW);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "42874b3db7817f662b1d7c6e32f8b63638fa0321",
      "candidate_info": {
        "commit_hash": "42874b3db7817f662b1d7c6e32f8b63638fa0321",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/42874b3db7817f662b1d7c6e32f8b63638fa0321",
        "files": [
          "fs/btrfs/transaction.c"
        ],
        "message": "Btrfs: fix the snapshot that should not exist\n\nThe snapshot should be the image of the fs tree before it was created,\nso the metadata of the snapshot should not exist in the its tree. But now, we\nfound the directory item and directory name index is in both the snapshot tree\nand the fs tree. It introduces some problems and makes the users feel strange:\n\n # mkfs.btrfs /dev/sda1\n # mount /dev/sda1 /mnt\n # mkdir /mnt/1\n # cd /mnt/1\n # btrfs subvolume snapshot /mnt snap0\n # ls -a /mnt/1/snap0/1\n .\t..\t[no other file/dir]\n\n # ll /mnt/1/snap0/\n total 0\n drwxr-xr-x 1 root root 10 Ju1 24 12:11 1\n\t\t\t^^^\n\t\t\tThere is no file/dir in it, but it's size is 10\n\n # cd /mnt/1/snap0/1/snap0\n [Enter a unexisted directory successfully...]\n\nThere is nothing in the directory 1 in snap0, but btrfs told the length of\nthis directory is 10. Beside that, we can enter an unexisted directory, it is\nvery strange to the users.\n\n # btrfs subvolume snapshot /mnt/1/snap0 /mnt/snap1\n # ll /mnt/1/snap0/1/\n total 0\n [None]\n # ll /mnt/snap1/1/\n total 0\n drwxr-xr-x 1 root root 0 Ju1 24 12:14 snap0\n\nAnd the source of snap1 did have any directory in Directory 1, but snap1 have\na snap0, it is different between the source and the snapshot.\n\nSo I think we should insert directory item and directory name index and update\nthe parent inode as the last step of snapshot creation, and do not leave the\nuseless metadata in the file tree.\n\nSigned-off-by: Miao Xie <miaox@cn.fujitsu.com>",
        "before_after_code_files": [
          "fs/btrfs/transaction.c||fs/btrfs/transaction.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/btrfs/transaction.c||fs/btrfs/transaction.c"
          ],
          "candidate": [
            "fs/btrfs/transaction.c||fs/btrfs/transaction.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/btrfs/transaction.c||fs/btrfs/transaction.c": [
          "File: fs/btrfs/transaction.c -> fs/btrfs/transaction.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "955:  struct btrfs_root *parent_root;",
          "956:  struct btrfs_block_rsv *rsv;",
          "957:  struct inode *parent_inode;",
          "958:  struct dentry *parent;",
          "959:  struct dentry *dentry;",
          "960:  struct extent_buffer *tmp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "958:  struct btrfs_path *path;",
          "959:  struct btrfs_dir_item *dir_item;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "967:  u64 root_flags;",
          "968:  uuid_le new_uuid;",
          "970:  new_root_item = kmalloc(sizeof(*new_root_item), GFP_NOFS);",
          "971:  if (!new_root_item) {",
          "972:   ret = pending->error = -ENOMEM;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "972:  path = btrfs_alloc_path();",
          "973:  if (!path) {",
          "974:   ret = pending->error = -ENOMEM;",
          "975:   goto path_alloc_fail;",
          "976:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1016:  ret = btrfs_set_inode_index(parent_inode, &index);",
          "1023:   pending->error = -EEXIST;",
          "1024:   goto fail;",
          "1026:   goto abort_trans;",
          "1027:  }",
          "",
          "[Removed Lines]",
          "1018:  ret = btrfs_insert_dir_item(trans, parent_root,",
          "1019:     dentry->d_name.name, dentry->d_name.len,",
          "1020:     parent_inode, &key,",
          "1021:     BTRFS_FT_DIR, index);",
          "1022:  if (ret == -EEXIST) {",
          "1025:  } else if (ret) {",
          "1029:  btrfs_i_size_write(parent_inode, parent_inode->i_size +",
          "1030:       dentry->d_name.len * 2);",
          "1031:  parent_inode->i_mtime = parent_inode->i_ctime = CURRENT_TIME;",
          "1032:  ret = btrfs_update_inode(trans, parent_root, parent_inode);",
          "1033:  if (ret)",
          "1034:   goto abort_trans;",
          "",
          "[Added Lines]",
          "1028:  dir_item = btrfs_lookup_dir_item(NULL, parent_root, path,",
          "1029:       btrfs_ino(parent_inode),",
          "1030:       dentry->d_name.name,",
          "1031:       dentry->d_name.len, 0);",
          "1032:  if (dir_item != NULL && !IS_ERR(dir_item)) {",
          "1035:  } else if (IS_ERR(dir_item)) {",
          "1036:   ret = PTR_ERR(dir_item);",
          "1039:  btrfs_release_path(path);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1123:  ret = btrfs_run_delayed_refs(trans, root, (unsigned long)-1);",
          "1124:  if (ret)",
          "1125:   goto abort_trans;",
          "1126: fail:",
          "1127:  dput(parent);",
          "1128:  trans->block_rsv = rsv;",
          "1129: no_free_objectid:",
          "1130:  kfree(new_root_item);",
          "1131: root_item_alloc_fail:",
          "1132:  btrfs_block_rsv_release(root, &pending->block_rsv, (u64)-1);",
          "1133:  return ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1132:  ret = btrfs_insert_dir_item(trans, parent_root,",
          "1133:         dentry->d_name.name, dentry->d_name.len,",
          "1134:         parent_inode, &key,",
          "1135:         BTRFS_FT_DIR, index);",
          "1137:  BUG_ON(ret == -EEXIST);",
          "1138:  if (ret)",
          "1139:   goto abort_trans;",
          "1141:  btrfs_i_size_write(parent_inode, parent_inode->i_size +",
          "1142:       dentry->d_name.len * 2);",
          "1143:  parent_inode->i_mtime = parent_inode->i_ctime = CURRENT_TIME;",
          "1144:  ret = btrfs_update_inode(trans, parent_root, parent_inode);",
          "1145:  if (ret)",
          "1146:   goto abort_trans;",
          "1153:  btrfs_free_path(path);",
          "1154: path_alloc_fail:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1473:  mutex_lock(&root->fs_info->reloc_mutex);",
          "1476:  if (ret) {",
          "1477:   mutex_unlock(&root->fs_info->reloc_mutex);",
          "1478:   goto cleanup_transaction;",
          "1479:  }",
          "1482:  if (ret) {",
          "1483:   mutex_unlock(&root->fs_info->reloc_mutex);",
          "1484:   goto cleanup_transaction;",
          "",
          "[Removed Lines]",
          "1475:  ret = btrfs_run_delayed_items(trans, root);",
          "1481:  ret = create_pending_snapshots(trans, root->fs_info);",
          "",
          "[Added Lines]",
          "1503:  ret = create_pending_snapshots(trans, root->fs_info);",
          "1519:  ret = btrfs_run_delayed_items(trans, root);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fae7f21cece9a4c181a8d8131870c7247e153f65",
      "candidate_info": {
        "commit_hash": "fae7f21cece9a4c181a8d8131870c7247e153f65",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/fae7f21cece9a4c181a8d8131870c7247e153f65",
        "files": [
          "fs/btrfs/backref.c",
          "fs/btrfs/check-integrity.c",
          "fs/btrfs/ctree.c",
          "fs/btrfs/delayed-inode.c",
          "fs/btrfs/disk-io.c",
          "fs/btrfs/extent-tree.c",
          "fs/btrfs/extent_io.c",
          "fs/btrfs/file-item.c",
          "fs/btrfs/inode-map.c",
          "fs/btrfs/inode.c",
          "fs/btrfs/relocation.c",
          "fs/btrfs/send.c",
          "fs/btrfs/tree-log.c",
          "fs/btrfs/volumes.c"
        ],
        "message": "btrfs: Use WARN_ON()'s return value in place of WARN_ON(1)\n\nUse WARN_ON()'s return value in place of WARN_ON(1) for cleaner source\ncode that outputs a more descriptive warnings. Also fix the styling\nwarning of redundant braces that came up as a result of this fix.\n\nSigned-off-by: Dulshani Gunawardhana <dulshani.gunawardhana89@gmail.com>\nReviewed-by: Zach Brown <zab@redhat.com>\nSigned-off-by: Josef Bacik <jbacik@fusionio.com>\nSigned-off-by: Chris Mason <chris.mason@fusionio.com>",
        "before_after_code_files": [
          "fs/btrfs/backref.c||fs/btrfs/backref.c",
          "fs/btrfs/check-integrity.c||fs/btrfs/check-integrity.c",
          "fs/btrfs/ctree.c||fs/btrfs/ctree.c",
          "fs/btrfs/delayed-inode.c||fs/btrfs/delayed-inode.c",
          "fs/btrfs/disk-io.c||fs/btrfs/disk-io.c",
          "fs/btrfs/extent-tree.c||fs/btrfs/extent-tree.c",
          "fs/btrfs/extent_io.c||fs/btrfs/extent_io.c",
          "fs/btrfs/file-item.c||fs/btrfs/file-item.c",
          "fs/btrfs/inode-map.c||fs/btrfs/inode-map.c",
          "fs/btrfs/inode.c||fs/btrfs/inode.c",
          "fs/btrfs/relocation.c||fs/btrfs/relocation.c",
          "fs/btrfs/send.c||fs/btrfs/send.c",
          "fs/btrfs/tree-log.c||fs/btrfs/tree-log.c",
          "fs/btrfs/volumes.c||fs/btrfs/volumes.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/btrfs/inode.c||fs/btrfs/inode.c"
          ],
          "candidate": [
            "fs/btrfs/inode.c||fs/btrfs/inode.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/btrfs/backref.c||fs/btrfs/backref.c": [
          "File: fs/btrfs/backref.c -> fs/btrfs/backref.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:  eb = path->nodes[level];",
          "328:  while (!eb) {",
          "331:    ret = 1;",
          "332:    goto out;",
          "333:   }",
          "",
          "[Removed Lines]",
          "329:   if (!level) {",
          "330:    WARN_ON(1);",
          "",
          "[Added Lines]",
          "329:   if (WARN_ON(!level)) {",
          "",
          "---------------"
        ],
        "fs/btrfs/check-integrity.c||fs/btrfs/check-integrity.c": [
          "File: fs/btrfs/check-integrity.c -> fs/btrfs/check-integrity.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2464:   }",
          "2465:  }",
          "2469:   btrfsic_dump_tree(state);",
          "2472:  return 0;",
          "2473: }",
          "",
          "[Removed Lines]",
          "2467:  if (-1 == btrfsic_check_all_ref_blocks(state, superblock, 0)) {",
          "2468:   WARN_ON(1);",
          "2470:  }",
          "",
          "[Added Lines]",
          "2467:  if (WARN_ON(-1 == btrfsic_check_all_ref_blocks(state, superblock, 0)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2907:   btrfsic_release_block_ctx(&block_ctx);",
          "2908:  }",
          "2911:   printk(KERN_INFO \"btrfs: attempt to write M-block which contains logical bytenr that doesn't map to dev+physical bytenr of submit_bio,\"",
          "2912:          \" buffer->log_bytenr=%llu, submit_bio(bdev=%s,\"",
          "2913:          \" phys_bytenr=%llu)!\\n\",",
          "",
          "[Removed Lines]",
          "2910:  if (!match) {",
          "",
          "[Added Lines]",
          "2908:  if (WARN_ON(!match)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2924:           bytenr, block_ctx.dev->name,",
          "2925:           block_ctx.dev_bytenr, mirror_num);",
          "2926:   }",
          "2928:  }",
          "2929: }",
          "",
          "[Removed Lines]",
          "2927:   WARN_ON(1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "fs/btrfs/ctree.c||fs/btrfs/ctree.c": [
          "File: fs/btrfs/ctree.c -> fs/btrfs/ctree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1285:   free_extent_buffer(eb_root);",
          "1286:   blocksize = btrfs_level_size(root, old_root->level);",
          "1287:   old = read_tree_block(root, logical, blocksize, 0);",
          "1289:    free_extent_buffer(old);",
          "1290:    pr_warn(\"btrfs: failed to read tree block %llu from get_old_root\\n\",",
          "1291:     logical);",
          "1293:   } else {",
          "1294:    eb = btrfs_clone_extent_buffer(old);",
          "1295:    free_extent_buffer(old);",
          "",
          "[Removed Lines]",
          "1288:   if (!old || !extent_buffer_uptodate(old)) {",
          "1292:    WARN_ON(1);",
          "",
          "[Added Lines]",
          "1288:   if (WARN_ON(!old || !extent_buffer_uptodate(old))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3643:   ret = 1;",
          "3644:   goto out;",
          "3645:  }",
          "3650:  copy_extent_buffer(left, right,",
          "",
          "[Removed Lines]",
          "3646:  if (!empty && push_items == btrfs_header_nritems(right))",
          "3647:   WARN_ON(1);",
          "",
          "[Added Lines]",
          "3645:  WARN_ON(!empty && push_items == btrfs_header_nritems(right));",
          "",
          "---------------"
        ],
        "fs/btrfs/delayed-inode.c||fs/btrfs/delayed-inode.c": [
          "File: fs/btrfs/delayed-inode.c -> fs/btrfs/delayed-inode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "649:    goto out;",
          "651:   ret = btrfs_block_rsv_migrate(src_rsv, dst_rsv, num_bytes);",
          "653:    goto out;",
          "660:   ret = btrfs_block_rsv_migrate(&root->fs_info->global_block_rsv,",
          "661:            dst_rsv, num_bytes);",
          "662:   goto out;",
          "",
          "[Removed Lines]",
          "652:   if (!ret)",
          "659:   WARN_ON(1);",
          "",
          "[Added Lines]",
          "652:   if (!WARN_ON(ret))",
          "",
          "---------------"
        ],
        "fs/btrfs/disk-io.c||fs/btrfs/disk-io.c": [
          "File: fs/btrfs/disk-io.c -> fs/btrfs/disk-io.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "475:  if (page != eb->pages[0])",
          "476:   return 0;",
          "477:  found_start = btrfs_header_bytenr(eb);",
          "480:   return 0;",
          "486:  csum_tree_block(root, eb, 0);",
          "487:  return 0;",
          "488: }",
          "",
          "[Removed Lines]",
          "478:  if (found_start != start) {",
          "479:   WARN_ON(1);",
          "481:  }",
          "482:  if (!PageUptodate(page)) {",
          "483:   WARN_ON(1);",
          "484:   return 0;",
          "485:  }",
          "",
          "[Added Lines]",
          "478:  if (WARN_ON(found_start != start || !PageUptodate(page)))",
          "",
          "---------------"
        ],
        "fs/btrfs/extent-tree.c||fs/btrfs/extent-tree.c": [
          "File: fs/btrfs/extent-tree.c -> fs/btrfs/extent-tree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1550:  if (ret && !insert) {",
          "1551:   err = -ENOENT;",
          "1552:   goto out;",
          "1554:   err = -EIO;",
          "1556:   goto out;",
          "1557:  }",
          "",
          "[Removed Lines]",
          "1553:  } else if (ret) {",
          "1555:   WARN_ON(1);",
          "",
          "[Added Lines]",
          "1553:  } else if (WARN_ON(ret)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5752:    }",
          "5753:    extent_slot = path->slots[0];",
          "5754:   }",
          "5756:   btrfs_print_leaf(extent_root, path->nodes[0]);",
          "5758:   btrfs_err(info,",
          "5759:    \"unable to find ref byte nr %llu parent %llu root %llu  owner %llu offset %llu\",",
          "5760:    bytenr, parent, root_objectid, owner_objectid,",
          "",
          "[Removed Lines]",
          "5755:  } else if (ret == -ENOENT) {",
          "5757:   WARN_ON(1);",
          "",
          "[Added Lines]",
          "5754:  } else if (WARN_ON(ret == -ENOENT)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8317:      struct btrfs_space_info,",
          "8318:      list);",
          "8319:   if (btrfs_test_opt(info->tree_root, ENOSPC_DEBUG)) {",
          "8321:        space_info->bytes_reserved > 0 ||",
          "8324:     dump_space_info(space_info, 0, 0);",
          "8325:    }",
          "8326:   }",
          "",
          "[Removed Lines]",
          "8320:    if (space_info->bytes_pinned > 0 ||",
          "8322:        space_info->bytes_may_use > 0) {",
          "8323:     WARN_ON(1);",
          "",
          "[Added Lines]",
          "8318:    if (WARN_ON(space_info->bytes_pinned > 0 ||",
          "8320:        space_info->bytes_may_use > 0)) {",
          "",
          "---------------"
        ],
        "fs/btrfs/extent_io.c||fs/btrfs/extent_io.c": [
          "File: fs/btrfs/extent_io.c -> fs/btrfs/extent_io.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1739:  u64 last = 0;",
          "1740:  int found = 0;",
          "1744:   return 0;",
          "1747:  spin_lock(&tree->lock);",
          "1748:  if (cur_start == 0 && bits == EXTENT_DIRTY) {",
          "",
          "[Removed Lines]",
          "1742:  if (search_end <= cur_start) {",
          "1743:   WARN_ON(1);",
          "1745:  }",
          "",
          "[Added Lines]",
          "1742:  if (WARN_ON(search_end <= cur_start))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3572:     spin_unlock(&mapping->private_lock);",
          "3574:     continue;",
          "3575:    }",
          "",
          "[Removed Lines]",
          "3571:    if (!eb) {",
          "3573:     WARN_ON(1);",
          "",
          "[Added Lines]",
          "3569:    if (WARN_ON(!eb)) {",
          "",
          "---------------"
        ],
        "fs/btrfs/file-item.c||fs/btrfs/file-item.c": [
          "File: fs/btrfs/file-item.c -> fs/btrfs/file-item.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "849:  path->leave_spinning = 0;",
          "850:  if (ret < 0)",
          "851:   goto fail_unlock;",
          "854:   goto fail_unlock;",
          "856:  leaf = path->nodes[0];",
          "857: csum:",
          "858:  item = btrfs_item_ptr(leaf, path->slots[0], struct btrfs_csum_item);",
          "",
          "[Removed Lines]",
          "852:  if (ret != 0) {",
          "853:   WARN_ON(1);",
          "855:  }",
          "",
          "[Added Lines]",
          "852:  if (WARN_ON(ret != 0))",
          "",
          "---------------"
        ],
        "fs/btrfs/inode-map.c||fs/btrfs/inode-map.c": [
          "File: fs/btrfs/inode-map.c -> fs/btrfs/inode-map.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:        btrfs_transaction_in_commit(fs_info)) {",
          "79:     leaf = path->nodes[0];",
          "83:      break;",
          "",
          "[Removed Lines]",
          "81:     if (btrfs_header_nritems(leaf) == 0) {",
          "82:      WARN_ON(1);",
          "84:     }",
          "",
          "[Added Lines]",
          "81:     if (WARN_ON(btrfs_header_nritems(leaf) == 0))",
          "",
          "---------------"
        ],
        "fs/btrfs/inode.c||fs/btrfs/inode.c": [
          "File: fs/btrfs/inode.c -> fs/btrfs/inode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2039:   key.offset = offset;",
          "2041:  ret = btrfs_search_slot(NULL, root, &key, path, 0, 0);",
          "2044:   return ret;",
          "2046:  ret = 0;",
          "2048:  while (1) {",
          "",
          "[Removed Lines]",
          "2042:  if (ret < 0) {",
          "2043:   WARN_ON(1);",
          "2045:  }",
          "",
          "[Added Lines]",
          "2042:  if (WARN_ON(ret < 0))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3184:   if (inode->i_nlink) {",
          "3187:     iput(inode);",
          "3188:     continue;",
          "3189:    }",
          "",
          "[Removed Lines]",
          "3185:    if (!S_ISREG(inode->i_mode)) {",
          "3186:     WARN_ON(1);",
          "",
          "[Added Lines]",
          "3183:    if (WARN_ON(!S_ISREG(inode->i_mode))) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8023:   if (ret == -EEXIST) {",
          "8028:     return ret;",
          "8029:    }",
          "8030:   } else {",
          "",
          "[Removed Lines]",
          "8026:    if (!new_inode) {",
          "8027:     WARN_ON(1);",
          "",
          "[Added Lines]",
          "8023:    if (WARN_ON(!new_inode)) {",
          "",
          "---------------"
        ],
        "fs/btrfs/relocation.c||fs/btrfs/relocation.c": [
          "File: fs/btrfs/relocation.c -> fs/btrfs/relocation.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1777:    new_ptr_gen = 0;",
          "1778:   }",
          "1782:    ret = level;",
          "1783:    break;",
          "1784:   }",
          "",
          "[Removed Lines]",
          "1780:   if (new_bytenr > 0 && new_bytenr == old_bytenr) {",
          "1781:    WARN_ON(1);",
          "",
          "[Added Lines]",
          "1780:   if (WARN_ON(new_bytenr > 0 && new_bytenr == old_bytenr)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3545:     err = ret;",
          "3546:     goto out;",
          "3547:    }",
          "3550:     goto out;",
          "3553:    leaf = path->nodes[0];",
          "3554:    nritems = btrfs_header_nritems(leaf);",
          "",
          "[Removed Lines]",
          "3548:    if (ret > 0) {",
          "3549:     WARN_ON(1);",
          "3551:    }",
          "",
          "[Added Lines]",
          "3547:    if (WARN_ON(ret > 0))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3568:   }",
          "3570:   btrfs_item_key_to_cpu(leaf, &key, path->slots[0]);",
          "3574:    break;",
          "3577:   fi = btrfs_item_ptr(leaf, path->slots[0],",
          "3578:         struct btrfs_file_extent_item);",
          "",
          "[Removed Lines]",
          "3571:   if (key.objectid != ref_objectid ||",
          "3572:       key.type != BTRFS_EXTENT_DATA_KEY) {",
          "3573:    WARN_ON(1);",
          "3575:   }",
          "",
          "[Added Lines]",
          "3568:   if (WARN_ON(key.objectid != ref_objectid ||",
          "3569:       key.type != BTRFS_EXTENT_DATA_KEY))",
          "",
          "---------------"
        ],
        "fs/btrfs/send.c||fs/btrfs/send.c": [
          "File: fs/btrfs/send.c -> fs/btrfs/send.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "564: {",
          "565:  struct btrfs_cmd_header *hdr;",
          "569:   return -EINVAL;",
          "572:  BUG_ON(sctx->send_size);",
          "",
          "[Removed Lines]",
          "567:  if (!sctx->send_buf) {",
          "568:   WARN_ON(1);",
          "570:  }",
          "",
          "[Added Lines]",
          "567:  if (WARN_ON(!sctx->send_buf))",
          "",
          "---------------"
        ],
        "fs/btrfs/tree-log.c||fs/btrfs/tree-log.c": [
          "File: fs/btrfs/tree-log.c -> fs/btrfs/tree-log.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2130:   WARN_ON(*level >= BTRFS_MAX_LEVEL);",
          "2131:   cur = path->nodes[*level];",
          "2136:   if (path->slots[*level] >=",
          "2137:       btrfs_header_nritems(cur))",
          "",
          "[Removed Lines]",
          "2133:   if (btrfs_header_level(cur) != *level)",
          "2134:    WARN_ON(1);",
          "",
          "[Added Lines]",
          "2133:   WARN_ON(btrfs_header_level(cur) != *level);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2953:  ret = btrfs_search_slot(NULL, root, &min_key, path, 0, 0);",
          "2956:   goto done;",
          "",
          "[Removed Lines]",
          "2954:  if (ret != 0) {",
          "2955:   WARN_ON(1);",
          "2957:  }",
          "",
          "[Added Lines]",
          "2953:  if (WARN_ON(ret != 0))",
          "",
          "---------------"
        ],
        "fs/btrfs/volumes.c||fs/btrfs/volumes.c": [
          "File: fs/btrfs/volumes.c -> fs/btrfs/volumes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2552:   failed = 0;",
          "2553:   retried = true;",
          "2554:   goto again;",
          "2557:   ret = -ENOSPC;",
          "2558:  }",
          "2559: error:",
          "",
          "[Removed Lines]",
          "2555:  } else if (failed && retried) {",
          "2556:   WARN_ON(1);",
          "",
          "[Added Lines]",
          "2555:  } else if (WARN_ON(failed && retried)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5402:   .bi_rw = bio->bi_rw,",
          "5403:  };",
          "5407:   return 1;",
          "5410:  prev = &bio->bi_io_vec[bio->bi_vcnt - 1];",
          "5411:  if (bio_sectors(bio) > max_sectors)",
          "",
          "[Removed Lines]",
          "5405:  if (bio->bi_vcnt == 0) {",
          "5406:   WARN_ON(1);",
          "5408:  }",
          "",
          "[Added Lines]",
          "5404:  if (WARN_ON(bio->bi_vcnt == 0))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5638:  struct btrfs_device *dev;",
          "5639:  u64 tmp;",
          "5643:   return ERR_PTR(-EINVAL);",
          "5646:  dev = __alloc_device();",
          "5647:  if (IS_ERR(dev))",
          "",
          "[Removed Lines]",
          "5641:  if (!devid && !fs_info) {",
          "5642:   WARN_ON(1);",
          "5644:  }",
          "",
          "[Added Lines]",
          "5638:  if (WARN_ON(!devid && !fs_info))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4871c1588f92c6c13f4713a7009f25f217055807",
      "candidate_info": {
        "commit_hash": "4871c1588f92c6c13f4713a7009f25f217055807",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/4871c1588f92c6c13f4713a7009f25f217055807",
        "files": [
          "fs/btrfs/inode.c"
        ],
        "message": "Btrfs: use right root when checking for hash collision\n\nbtrfs_rename was using the root of the old dir instead of the root of the new\ndir when checking for a hash collision, so if you tried to move a file into a\nsubvol it would freak out because it would see the file you are trying to move\nin its current root.  This fixes the bug where this would fail\n\nbtrfs subvol create test1\nbtrfs subvol create test2\nmv test1 test2.\n\nThanks to Chris Murphy for catching this,\n\nCc: stable@vger.kernel.org\nReported-by: Chris Murphy <lists@colorremedies.com>\nSigned-off-by: Josef Bacik <jbacik@fusionio.com>\nSigned-off-by: Chris Mason <chris.mason@fusionio.com>",
        "before_after_code_files": [
          "fs/btrfs/inode.c||fs/btrfs/inode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/btrfs/inode.c||fs/btrfs/inode.c"
          ],
          "candidate": [
            "fs/btrfs/inode.c||fs/btrfs/inode.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/btrfs/inode.c||fs/btrfs/inode.c": [
          "File: fs/btrfs/inode.c -> fs/btrfs/inode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7990:         new_dentry->d_name.name,",
          "7991:         new_dentry->d_name.len);",
          "",
          "[Removed Lines]",
          "7989:  ret = btrfs_check_dir_item_collision(root, new_dir->i_ino,",
          "",
          "[Added Lines]",
          "7989:  ret = btrfs_check_dir_item_collision(dest, new_dir->i_ino,",
          "",
          "---------------"
        ]
      }
    }
  ]
}