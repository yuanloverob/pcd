{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e087a7c35b1bedfb37c2b41baac77e794ed89f63",
      "candidate_info": {
        "commit_hash": "e087a7c35b1bedfb37c2b41baac77e794ed89f63",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e087a7c35b1bedfb37c2b41baac77e794ed89f63",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/windowB.test"
        ],
        "message": "Fix the windowB test module so that it works even if SQLite is built without JSON support.\n\nFossilOrigin-Name: 807975c76b36347f02aa0ce9661d608adbffe1f7e77c15f8da677e47e1187153",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/windowB.test||test/windowB.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ba2ebc3a348decc5cedaf14960e30e7ae26a26824cfa198727f2499162142ef3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/windowB.test||test/windowB.test": [
          "File: test/windowB.test -> test/windowB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:   INSERT INTO testjson VALUES(2, '{\"b\":2}');",
          "88: }",
          "102: }",
          "105: finish_test",
          "",
          "[Removed Lines]",
          "90: do_execsql_test 3.1 {",
          "91:   SELECT json_group_array(json(j)) FROM testjson;",
          "92: } {",
          "93:   {[{\"a\":1},{\"b\":2}]}",
          "94: }",
          "96: breakpoint",
          "97: do_execsql_test 3.2 {",
          "98:   SELECT json_group_array(json(j)) OVER (ORDER BY id) FROM testjson;",
          "99: } {",
          "100:   {[{\"a\":1}]}",
          "101:   {[{\"a\":1},{\"b\":2}]}",
          "",
          "[Added Lines]",
          "90: ifcapable json1 {",
          "91:   do_execsql_test 3.1 {",
          "92:     SELECT json_group_array(json(j)) FROM testjson;",
          "93:   } {",
          "94:     {[{\"a\":1},{\"b\":2}]}",
          "95:   }",
          "97:   do_execsql_test 3.2 {",
          "98:     SELECT json_group_array(json(j)) OVER (ORDER BY id) FROM testjson;",
          "99:   } {",
          "100:     {[{\"a\":1}]}",
          "101:     {[{\"a\":1},{\"b\":2}]}",
          "102:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ad35d980bd7cb4192cee33d173b229d69352ce9",
      "candidate_info": {
        "commit_hash": "2ad35d980bd7cb4192cee33d173b229d69352ce9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2ad35d980bd7cb4192cee33d173b229d69352ce9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Documentation updates for the SQLITE_DIRECTONLY flag.\n\nFossilOrigin-Name: 5beb6dc9bc2d3d0003e33488df9c01aaf28c41c30fd9ca35543cbe3ec5a8d9ce",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ca564d4b5b19fe56842a04f31bb61352e6ae9d72a7e7634eb27ebcf5f670545a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "781b7ac3f6c61eb756740549ab10a14322210ad7",
      "candidate_info": {
        "commit_hash": "781b7ac3f6c61eb756740549ab10a14322210ad7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/781b7ac3f6c61eb756740549ab10a14322210ad7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/window1.test"
        ],
        "message": "Fix a problem with a window function in a correlated sub-query where at least one reference to the outer SELECT appears in a FROM clause sub-select.\n\nFossilOrigin-Name: 9aca86f98388ff66b2bccb3fbfc486a3931398d2a8da139f905826ae2cdbb205",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c7b336181aac6785a515f275c0f50ad4bf2dee20abde959b56d968a7fdce3e5b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1425:     for(i=0; i<p->pSrc->nSrc; i++){",
          "1426:       struct SrcList_item *pItem = &p->pSrc->a[i];",
          "1430:         const char *zSavedContext = pParse->zAuthContext;",
          "",
          "[Removed Lines]",
          "1427:       if( pItem->pSelect ){",
          "",
          "[Added Lines]",
          "1427:       if( pItem->pSelect && (pItem->pSelect->selFlags & SF_Resolved)==0 ){",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "720:   ORDER BY 10+sum(a) OVER (ORDER BY a) DESC;",
          "721: } {16 13 11}",
          "750: #-------------------------------------------------------------------------",
          "751: # Test error cases from chaining window definitions.",
          "",
          "[Removed Lines]",
          "723: #-------------------------------------------------------------------------",
          "724: #",
          "725: reset_db",
          "726: do_execsql_test 18.0 {",
          "727:   CREATE TABLE t1 ( t1_id INTEGER PRIMARY KEY );",
          "728:   CREATE TABLE t2 ( t2_id INTEGER PRIMARY KEY );",
          "729:   CREATE TABLE t3 ( t3_id INTEGER PRIMARY KEY );",
          "731:   INSERT INTO t1 VALUES(1),  (3), (5);",
          "732:   INSERT INTO t2 VALUES      (3), (5);",
          "733:   INSERT INTO t3 VALUES(10), (11), (12);",
          "734: }",
          "736: do_execsql_test 18.1 {",
          "737:   SELECT t1.* FROM t1, t2 WHERE",
          "738:     t1_id=t2_id AND t1_id IN (",
          "739:         SELECT t1_id + row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "740:     )",
          "741: }",
          "743: do_execsql_test 18.2 {",
          "744:   SELECT t1.* FROM t1, t2 WHERE",
          "745:     t1_id=t2_id AND t1_id IN (",
          "746:         SELECT         row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "747:     )",
          "748: } {3}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1035:   SELECT lead(44) OVER ()",
          "1036: } {{}}",
          "1039: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1012: #-------------------------------------------------------------------------",
          "1013: #",
          "1014: reset_db",
          "1015: do_execsql_test 25.0 {",
          "1016:   CREATE TABLE t1 ( t1_id INTEGER PRIMARY KEY );",
          "1017:   CREATE TABLE t2 ( t2_id INTEGER PRIMARY KEY );",
          "1018:   CREATE TABLE t3 ( t3_id INTEGER PRIMARY KEY );",
          "1020:   INSERT INTO t1 VALUES(1),  (3), (5);",
          "1021:   INSERT INTO t2 VALUES      (3), (5);",
          "1022:   INSERT INTO t3 VALUES(10), (11), (12);",
          "1023: }",
          "1025: do_execsql_test 25.1 {",
          "1026:   SELECT t1.* FROM t1, t2 WHERE",
          "1027:     t1_id=t2_id AND t1_id IN (",
          "1028:         SELECT t1_id + row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "1029:     )",
          "1030: }",
          "1032: do_execsql_test 25.2 {",
          "1033:   SELECT t1.* FROM t1, t2 WHERE",
          "1034:     t1_id=t2_id AND t1_id IN (",
          "1035:         SELECT         row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "1036:     )",
          "1037: } {3}",
          "1039: #-------------------------------------------------------------------------",
          "1040: reset_db",
          "1041: do_execsql_test 26.0 {",
          "1042:   CREATE TABLE t1(x);",
          "1043:   CREATE TABLE t2(c);",
          "1044: }",
          "1046: do_execsql_test 26.1 {",
          "1047:   SELECT ( SELECT row_number() OVER () FROM ( SELECT c FROM t1 ) ) FROM t2",
          "1048: } {}",
          "1050: do_execsql_test 26.2 {",
          "1051:   INSERT INTO t1 VALUES(1), (2), (3), (4);",
          "1052:   INSERT INTO t2 VALUES(2), (6), (8), (4);",
          "1053:   SELECT c, c IN (",
          "1054:     SELECT row_number() OVER () FROM ( SELECT c FROM t1 )",
          "1055:   ) FROM t2",
          "1056: } {2 1  6 0  8 0  4 1}",
          "1058: do_execsql_test 26.3 {",
          "1059:   DELETE FROM t1;",
          "1060:   DELETE FROM t2;",
          "1062:   INSERT INTO t2 VALUES(1), (2), (3), (4);",
          "1063:   INSERT INTO t1 VALUES(1), (1), (2), (3), (3), (3), (3), (4), (4);",
          "1065:   SELECT c, c IN (",
          "1066:     SELECT row_number() OVER () FROM ( SELECT 1 FROM t1 WHERE x=c )",
          "1067:   ) FROM t2",
          "1068: } {1 1  2 0  3 1  4 0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "79d8aa24f17b1d7f2743c1bcf823bc17489d14ec",
      "candidate_info": {
        "commit_hash": "79d8aa24f17b1d7f2743c1bcf823bc17489d14ec",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/79d8aa24f17b1d7f2743c1bcf823bc17489d14ec",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/wapptest.tcl"
        ],
        "message": "Fix a typo in the wapptest.tcl script.\n\nFossilOrigin-Name: 971b4422ae7a8eed67f5db62c0e1cc061faac9404ff5f7051d7e07decf2207a4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d6131caf6471ad41fa5a28b0067d759ac1cc9dba1170678534488b416f9a1157",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:   wapptest_output $msg",
          "290:   if {[info exists G(test.$name.errmsg)] && $G(test.$name.errmsg)!=\"\"} {",
          "292:   }",
          "293: }",
          "",
          "[Removed Lines]",
          "291:     wapptest_output \"    $G(test.$config.errmsg)\"",
          "",
          "[Added Lines]",
          "291:     wapptest_output \"    $G(test.$name.errmsg)\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15750a26fa7127af7b1aa3e3a2046f5379eaca43",
      "candidate_info": {
        "commit_hash": "15750a26fa7127af7b1aa3e3a2046f5379eaca43",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/15750a26fa7127af7b1aa3e3a2046f5379eaca43",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/whereInt.h",
          "src/wherecode.c",
          "test/nulls1.test"
        ],
        "message": "Add support for using indexes for some ORDER BY clauses that use non-default NULL handling. Still some problems on this branch.\n\nFossilOrigin-Name: 81069d7196857e909c94195d67388f71bc9f832eafd9156d8c5cdddb63513b4a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/wherecode.c||src/wherecode.c",
          "test/nulls1.test||test/nulls1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 07babb0f897fc8c9cb5b30481899c32fdd743f3f3ca508d8d957826252107dd5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3799:         if( pIndex ){",
          "3800:           iColumn = pIndex->aiColumn[j];",
          "3802:           if( iColumn==pIndex->pTable->iPKey ) iColumn = XN_ROWID;",
          "3803:         }else{",
          "3804:           iColumn = XN_ROWID;",
          "",
          "[Removed Lines]",
          "3801:           revIdx = pIndex->aSortOrder[j];",
          "",
          "[Added Lines]",
          "3801:           revIdx = pIndex->aSortOrder[j] & KEYINFO_ORDER_DESC;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3836:               continue;",
          "3837:             }",
          "3838:           }",
          "3840:           if( iColumn!=XN_ROWID ){",
          "3841:             pColl = sqlite3ExprNNCollSeq(pWInfo->pParse, pOrderBy->a[i].pExpr);",
          "3842:             if( sqlite3StrICmp(pColl->zName, pIndex->azColl[j])!=0 ) continue;",
          "",
          "[Removed Lines]",
          "3839:           if( pOrderBy->a[i].sortFlags & KEYINFO_ORDER_BIGNULL ) continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3850:         if( isMatch && (wctrlFlags & WHERE_GROUPBY)==0 ){",
          "3854:           if( revSet ){",
          "3856:           }else{",
          "3858:             if( rev ) *pRevMask |= MASKBIT(iLoop);",
          "3859:             revSet = 1;",
          "3860:           }",
          "3861:         }",
          "3862:         if( isMatch ){",
          "3863:           if( iColumn==XN_ROWID ){",
          "3864:             testcase( distinctColumns==0 );",
          "3865:             distinctColumns = 1;",
          "3866:           }",
          "3867:           obSat |= MASKBIT(i);",
          "3871:         }else{",
          "3873:           if( j==0 || j<nKeyCol ){",
          "",
          "[Removed Lines]",
          "3853:           assert( (pOrderBy->a[i].sortFlags & KEYINFO_ORDER_BIGNULL)==0 );",
          "3855:             if( (rev ^ revIdx)!=pOrderBy->a[i].sortFlags ) isMatch = 0;",
          "3857:             rev = revIdx ^ pOrderBy->a[i].sortFlags;",
          "3868:           if( (wctrlFlags & WHERE_ORDERBY_MIN) && j==pLoop->u.btree.nEq ){",
          "3869:             pLoop->wsFlags |= WHERE_MIN_ORDERED;",
          "3870:           }",
          "",
          "[Added Lines]",
          "3853:             if( (rev ^ revIdx)!=(pOrderBy->a[i].sortFlags&KEYINFO_ORDER_DESC) ){",
          "3854:               isMatch = 0;",
          "3855:             }",
          "3857:             rev = revIdx ^ (pOrderBy->a[i].sortFlags & KEYINFO_ORDER_DESC);",
          "3862:         if( isMatch && (pOrderBy->a[i].sortFlags & KEYINFO_ORDER_BIGNULL) ){",
          "3863:           if( j==pLoop->u.btree.nEq ){",
          "3864:             pLoop->wsFlags |= WHERE_BIGNULL_SORT;",
          "3865:           }else{",
          "3866:             isMatch = 0;",
          "3867:           }",
          "3868:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5061:         sqlite3VdbeSetP4KeyInfo(pParse, pIx);",
          "5062:         if( (pLoop->wsFlags & WHERE_CONSTRAINT)!=0",
          "5063:          && (pLoop->wsFlags & (WHERE_COLUMN_RANGE|WHERE_SKIPSCAN))==0",
          "5064:          && (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN)==0",
          "5065:          && pWInfo->eDistinct!=WHERE_DISTINCT_ORDERED",
          "5066:         ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5068:          && (pLoop->wsFlags & WHERE_BIGNULL_SORT)==0",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5202:       VdbeCoverageIf(v, pLevel->op==OP_Next);",
          "5203:       VdbeCoverageIf(v, pLevel->op==OP_Prev);",
          "5204:       VdbeCoverageIf(v, pLevel->op==OP_VNext);",
          "5205: #ifndef SQLITE_DISABLE_SKIPAHEAD_DISTINCT",
          "5206:       if( addrSeek ) sqlite3VdbeJumpHere(v, addrSeek);",
          "5207: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5210:       if( pLevel->regBignull ){",
          "5211:         sqlite3VdbeResolveLabel(v, pLevel->addrBignull);",
          "5212:         addr = sqlite3VdbeAddOp1(v, OP_If, pLevel->regBignull);",
          "5213:         sqlite3VdbeAddOp2(v, OP_Integer, 1, pLevel->regBignull);",
          "5214:         sqlite3VdbeAddOp2(v, OP_Goto, 0, pLevel->p2-1);",
          "5215:         sqlite3VdbeChangeP5(v, pLevel->p5);",
          "5216:         VdbeCoverage(v);",
          "5217:         VdbeCoverageIf(v, pLevel->op==OP_Next);",
          "5218:         VdbeCoverageIf(v, pLevel->op==OP_Prev);",
          "5219:         sqlite3VdbeJumpHere(v, addr);",
          "5220:       }",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1554:     pIdx = pLoop->u.btree.pIndex;",
          "1555:     iIdxCur = pLevel->iIdxCur;",
          "1556:     assert( nEq>=pLoop->nSkip );",
          "",
          "[Removed Lines]",
          "1566:     assert( (pWInfo->pOrderBy!=0 && pWInfo->pOrderBy->nExpr==1)",
          "1567:          || (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN)==0 );",
          "1568:     if( pLoop->wsFlags & WHERE_MIN_ORDERED ){",
          "1569:       assert( (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN) );",
          "1570:       assert( pWInfo->nOBSat );",
          "1571:       assert( pIdx->nColumn>nEq );",
          "1572:       assert( pLoop->nSkip==0 );",
          "1573:       bSeekPastNull = 1;",
          "1574:       nExtraReg = 1;",
          "1575:     }",
          "",
          "[Added Lines]",
          "1552:     int regBignull = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1614:     }",
          "1615:     assert( pRangeEnd==0 || (pRangeEnd->wtFlags & TERM_VNULL)==0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1605:     addrNxt = pLevel->addrNxt;",
          "1606:     if( (pLoop->wsFlags & (WHERE_TOP_LIMIT|WHERE_BTM_LIMIT))==0",
          "1607:      && (pLoop->wsFlags & WHERE_BIGNULL_SORT)!=0",
          "1608:     ){",
          "1609:       assert( bSeekPastNull==0 && nExtraReg==0 && nBtm==0 && nTop==0 );",
          "1610:       assert( pRangeEnd==0 && pRangeStart==0 );",
          "1611:       assert( pLoop->nSkip==0 );",
          "1612:       nExtraReg = 1;",
          "1613:       bSeekPastNull = 1;",
          "1614:       pLevel->regBignull = regBignull = ++pParse->nMem;",
          "1615:       addrNxt = pLevel->addrBignull = sqlite3VdbeMakeLabel(pParse);",
          "1616:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1636:     if( zStartAff && nTop ){",
          "1637:       zEndAff = sqlite3DbStrDup(db, &zStartAff[nEq]);",
          "1638:     }",
          "1641:     testcase( pRangeStart && (pRangeStart->eOperator & WO_LE)!=0 );",
          "1642:     testcase( pRangeStart && (pRangeStart->eOperator & WO_GE)!=0 );",
          "",
          "[Removed Lines]",
          "1639:     addrNxt = pLevel->addrNxt;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1674:       nConstraint++;",
          "1675:       startEq = 0;",
          "1676:       start_constraints = 1;",
          "1677:     }",
          "1678:     codeApplyAffinity(pParse, regBase, nConstraint - bSeekPastNull, zStartAff);",
          "1679:     if( pLoop->nSkip>0 && nConstraint==pLoop->nSkip ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1677:     }else if( regBignull ){",
          "1678:       sqlite3VdbeAddOp2(v, OP_Null, 0, regBase+nEq);",
          "1679:       start_constraints = 1;",
          "1680:       nConstraint++;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1684:       if( pLoop->wsFlags & WHERE_IN_EARLYOUT ){",
          "1685:         sqlite3VdbeAddOp1(v, OP_SeekHit, iIdxCur);",
          "1686:       }",
          "1687:       op = aStartOp[(start_constraints<<2) + (startEq<<1) + bRev];",
          "1688:       assert( op!=0 );",
          "1689:       sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1691:       if( regBignull ){",
          "1692:         sqlite3VdbeAddOp2(v, OP_Integer, 0, regBignull);",
          "1693:       }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1695:       VdbeCoverageIf(v, op==OP_SeekLE);  testcase( op==OP_SeekLE );",
          "1696:       VdbeCoverageIf(v, op==OP_SeekLT);  testcase( op==OP_SeekLT );",
          "1707:         sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+2);",
          "1715:       }",
          "1716:     }",
          "",
          "[Removed Lines]",
          "1698:       if( bSeekPastNull && (pLoop->wsFlags & WHERE_TOP_LIMIT)==0 ){",
          "1704:         assert( startEq==0 && (op==OP_SeekGT || op==OP_SeekLT) );",
          "1705:         assert( (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN)!=0 && pWInfo->nOBSat>0 );",
          "1706:         sqlite3VdbeChangeP2(v, -1, sqlite3VdbeCurrentAddr(v)+1);",
          "1709:         op = aStartOp[(start_constraints<<2) + (1<<1) + bRev];",
          "1710:         assert( op==OP_SeekGE || op==OP_SeekLE );",
          "1711:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1712:         VdbeCoverage(v);",
          "1713:         VdbeCoverageIf(v, op==OP_SeekGE);  testcase( op==OP_SeekGE );",
          "1714:         VdbeCoverageIf(v, op==OP_SeekLE);  testcase( op==OP_SeekLE );",
          "",
          "[Added Lines]",
          "1706:       if( regBignull ){",
          "1708:         if( bStopAtNull ){",
          "1709:           start_constraints = (nConstraint>1);",
          "1710:           op = aStartOp[(start_constraints<<2) + (startEq<<1) + bRev];",
          "1711:           sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint-1);",
          "1712:         }else{",
          "1713:           op = aStartOp[(start_constraints<<2) + ((!startEq)<<1) + bRev];",
          "1714:           sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1715:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1744:         endEq = 1;",
          "1745:       }",
          "1746:     }else if( bStopAtNull ){",
          "1749:       nConstraint++;",
          "1750:     }",
          "1751:     sqlite3DbFree(db, zStartAff);",
          "",
          "[Removed Lines]",
          "1747:       sqlite3VdbeAddOp2(v, OP_Null, 0, regBase+nEq);",
          "1748:       endEq = 0;",
          "",
          "[Added Lines]",
          "1748:       if( regBignull==0 ){",
          "1749:         sqlite3VdbeAddOp2(v, OP_Null, 0, regBase+nEq);",
          "1750:         endEq = 0;",
          "1751:       }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1758:     if( nConstraint ){",
          "1759:       op = aEndOp[bRev*2 + endEq];",
          "1760:       sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1761:       testcase( op==OP_IdxGT );  VdbeCoverageIf(v, op==OP_IdxGT );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1762:       if( regBignull ){",
          "1763:         sqlite3VdbeAddOp2(v, OP_If, regBignull, sqlite3VdbeCurrentAddr(v)+3);",
          "1764:       }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1763:       testcase( op==OP_IdxLT );  VdbeCoverageIf(v, op==OP_IdxLT );",
          "1764:       testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "1765:     }",
          "1767:     if( pLoop->wsFlags & WHERE_IN_EARLYOUT ){",
          "1768:       sqlite3VdbeAddOp2(v, OP_SeekHit, iIdxCur, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1772:     if( regBignull ){",
          "1773:       sqlite3VdbeAddOp2(v, OP_IfNot, regBignull, sqlite3VdbeCurrentAddr(v)+2);",
          "1774:       if( bStopAtNull ){",
          "1775:         op = aEndOp[bRev*2 + 0];",
          "1776:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1777:       }else{",
          "1778:         op = aEndOp[bRev*2 + endEq];",
          "1779:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint+1);",
          "1780:       }",
          "1781:     }",
          "",
          "---------------"
        ],
        "test/nulls1.test||test/nulls1.test": [
          "File: test/nulls1.test -> test/nulls1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "18: set testdir [file dirname $argv0]",
          "19: source $testdir/tester.tcl",
          "20: set testprefix nulls1",
          "22: do_execsql_test 1.0 {",
          "23:   DROP TABLE IF EXISTS t3;",
          "24:   CREATE TABLE t3(a INTEGER);",
          "25:   INSERT INTO t3 VALUES(NULL), (10), (30), (20), (NULL);",
          "26: } {}",
          "29:   foreach {tn limit} {",
          "30:     1 \"\"",
          "31:     2 \"LIMIT 10\"",
          "",
          "[Removed Lines]",
          "14: ####################################################",
          "15: # DO NOT EDIT! THIS FILE IS AUTOMATICALLY GENERATED!",
          "16: ####################################################",
          "28: for {set a 0} {$a < 2} {incr a} {",
          "",
          "[Added Lines]",
          "18: if 1 {",
          "26: for {set a 0} {$a < 3} {incr a} {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:     \" {30   20   10   {}   {}}",
          "48:   }",
          "51: }",
          "53: finish_test",
          "",
          "[Removed Lines]",
          "50:   catchsql { CREATE INDEX i1 ON t3(a) }",
          "",
          "[Added Lines]",
          "48:   switch $a {",
          "49:     0 {",
          "50:       execsql { CREATE INDEX i1 ON t3(a) }",
          "51:     }",
          "52:     1 {",
          "53:       execsql { DROP INDEX i1 ; CREATE INDEX i1 ON t3(a DESC) }",
          "54:     }",
          "55:   }",
          "56: }",
          "58: }",
          "60: #-------------------------------------------------------------------------",
          "61: reset_db",
          "62: do_execsql_test 2.0 {",
          "63:   CREATE TABLE t2(a, b, c);",
          "64:   CREATE INDEX i2 ON t2(a, b);",
          "65:   INSERT INTO t2 VALUES(1, 1, 1);",
          "66:   INSERT INTO t2 VALUES(1, NULL, 2);",
          "67:   INSERT INTO t2 VALUES(1, NULL, 3);",
          "68:   INSERT INTO t2 VALUES(1, 4, 4);",
          "69: }",
          "71: do_execsql_test 2.1 {",
          "72:   SELECT * FROM t2 WHERE a=1 ORDER BY b NULLS LAST",
          "73: } {",
          "74:   1 1 1    1 4 4   1 {} 2   1 {} 3",
          "77: do_execsql_test 2.2 {",
          "78:   SELECT * FROM t2 WHERE a=1 ORDER BY b DESC NULLS FIRST",
          "79: } {",
          "80:   1 {} 3",
          "81:   1 {} 2",
          "82:   1 4 4",
          "83:   1 1 1",
          "84: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}