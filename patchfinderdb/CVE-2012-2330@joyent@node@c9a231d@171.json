{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4c150ca0d0cc4bd8dc6d182e0bf850daf27a2422",
      "candidate_info": {
        "commit_hash": "4c150ca0d0cc4bd8dc6d182e0bf850daf27a2422",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/4c150ca0d0cc4bd8dc6d182e0bf850daf27a2422",
        "files": [
          "doc/api/child_process.markdown",
          "doc/api/net.markdown",
          "lib/child_process.js",
          "lib/cluster.js",
          "lib/net.js",
          "test/simple/test-cluster-basic.js",
          "test/simple/test-net-lazy-listen.js"
        ],
        "message": "net: fix listen() regression, revert patches\n\nThis commit reverts the following commits (in reverse chronological order):\n\n  74d076c errnoException must be done immediately\n  ddb02b9 net: support Server.listen(Pipe)\n  085a098 cluster: do not use internal server API\n  d138875 net: lazy listen on handler\n\nCommit d138875 introduced a backwards incompatible change that broke the\nsimple/test-net-socket-timeout and simple/test-net-lazy-listen tests - it\ndefers listening on the target port until the `net.Server` instance has at\nleast one 'connection' event listener.\n\nThe other patches had to be reverted in order to revert d138875.\n\nFixes #3832.",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js",
          "lib/cluster.js||licluster.js",
          "lib/net.js||linet.js",
          "test/simple/test-cluster-basic.js||test/simple/test-cluster-basic.js",
          "test/simple/test-net-lazy-listen.js||test/simple/test-net-lazy-listen.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:       var self = this;",
          "103:       var server = new net.Server();",
          "105:         emit(server);",
          "106:       });",
          "107:     }",
          "",
          "[Removed Lines]",
          "104:       server._listen(handle, function() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/cluster.js||licluster.js": [
          "File: lib/cluster.js -> licluster.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "160: var messageHandler = {};",
          "161: function handleMessage(worker, inMessage, inHandle) {",
          "165:   var message = util._extend({}, inMessage);",
          "166:   message.cmd = inMessage.cmd.substr(INTERNAL_PREFIX.length);",
          "168:   function respond(outMessage, outHandler) {",
          "169:     handleResponse(outMessage, outHandler, inMessage, inHandle, worker);",
          "170:   }",
          "173:   if (messageHandler[message.cmd]) {",
          "174:     messageHandler[message.cmd](message, worker, respond);",
          "176:     respond();",
          "177:   }",
          "178: }",
          "",
          "[Removed Lines]",
          "162:   if (!isInternalMessage(inMessage)) return;",
          "175:   } else {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181: if (cluster.isMaster) {",
          "185:     worker.state = 'online';",
          "186:     debug('Worker ' + worker.process.pid + ' online');",
          "187:     worker.emit('online');",
          "188:     cluster.emit('online', worker);",
          "191:   };",
          "",
          "[Removed Lines]",
          "184:   messageHandler.online = function(message, worker, send) {",
          "190:     send();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:     if (serverHandlers.hasOwnProperty(key)) {",
          "204:     }",
          "211:   };",
          "216:     worker.state = 'listening';",
          "223:   };",
          "227:     worker.suicide = true;",
          "230:   };",
          "232: }",
          "",
          "[Removed Lines]",
          "198:     var args = message.args;",
          "199:     var key = JSON.stringify(args);",
          "202:       send({}, serverHandlers[key]);",
          "203:       return;",
          "206:     var server = serverHandlers[key] = net.Server();",
          "207:     server.once('listening', function() {",
          "208:       send({}, server);",
          "209:     });",
          "210:     server.listen.apply(server, args);",
          "214:   messageHandler.listening = function(message, worker, send) {",
          "219:     worker.emit('listening', message.address);",
          "220:     cluster.emit('listening', worker, message.address);",
          "222:     send();",
          "226:   messageHandler.suicide = function(message, worker, send) {",
          "229:     send();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "235: else if (cluster.isWorker) {",
          "239:     worker.disconnect();",
          "241:   };",
          "242: }",
          "",
          "[Removed Lines]",
          "238:   messageHandler.disconnect = function(message, worker, send) {",
          "240:     send();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "512: };",
          "539:     });",
          "547:   };",
          "",
          "[Removed Lines]",
          "515: if (cluster.isWorker) {",
          "516:   var localListen = net.Server.prototype.listen;",
          "517:   net.Server.prototype.listen = function() {",
          "518:     var self = this;",
          "520:     var args = new Array(arguments.length);",
          "521:     for (var i = 0; i < arguments.length; i++) {",
          "522:       args[i] = arguments[i];",
          "523:     }",
          "526:     if (typeof args[args.length - 1] === 'function') {",
          "527:       this.once('listening', args.pop());",
          "528:     }",
          "531:     serverListeners[JSON.stringify(args)] = this;",
          "534:     this.once('listening', function() {",
          "535:       cluster.worker.state = 'listening';",
          "537:       var message = { cmd: 'listening', address: this.address() };",
          "538:       sendInternalMessage(cluster.worker, message);",
          "542:     var message = { cmd: 'queryServer', args: args };",
          "544:     sendInternalMessage(cluster.worker, message, function(msg, server) {",
          "545:       localListen.call(self, server);",
          "546:     });",
          "548: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "834: function toNumber(x) { return (x = Number(x)) >= 0 ? x : false; }",
          "838:   var r = 0;",
          "840:   var handle;",
          "",
          "[Removed Lines]",
          "837: var createServerHandle = function(address, port, addressType, fd) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "895:   var self = this;",
          "896:   var r = 0;",
          "898:   self._handle.onconnection = onconnection;",
          "899:   self._handle.owner = self;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "910:     process.nextTick(function() {",
          "911:       self.emit('error', ex);",
          "912:     });",
          "914:   }",
          "917:   this._connectionKey = addressType + ':' + address + ':' + port;",
          "920: };",
          "923: function listen(self, address, port, addressType, backlog, fd) {",
          "944:       self._listen2(address, port, addressType, backlog, fd);",
          "945:     });",
          "958:   }",
          "959: }",
          "962:   var self = this;",
          "964:   var lastArg = arguments[arguments.length - 1];",
          "",
          "[Removed Lines]",
          "913:     return r;",
          "919:   return r;",
          "926:   if (!self._handle) {",
          "927:     self._handle = createServerHandle(address, port, addressType, fd);",
          "928:     if (!self._handle) {",
          "929:       var error = errnoException(errno, 'listen');",
          "930:       process.nextTick(function() {",
          "931:         self.emit('error', error);",
          "932:       });",
          "933:       return;",
          "934:     }",
          "935:   }",
          "939:   if (self.listeners('connection').length === 0) {",
          "940:     self.on('newListener', function removeme(name) {",
          "941:       if (name !== 'connection') return;",
          "943:       self.removeListener('newListener', removeme);",
          "947:     process.nextTick(function() {",
          "948:       self.emit('listening');",
          "949:     });",
          "950:     return;",
          "951:   }",
          "953:   var r = self._listen2(address, port, addressType, backlog, fd);",
          "954:   if (r === 0) {",
          "955:     process.nextTick(function() {",
          "956:       self.emit('listening');",
          "957:     });",
          "961: Server.prototype._listen = function() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "973:   var backlog = toNumber(arguments[1]) || toNumber(arguments[2]);",
          "975:   var TCP = process.binding('tcp_wrap').TCP;",
          "978:   if (arguments.length == 0 || typeof arguments[0] == 'function') {",
          "",
          "[Removed Lines]",
          "976:   var Pipe = process.binding('pipe_wrap').Pipe;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "986:     } else if (h.handle) {",
          "987:       h = h.handle;",
          "988:     }",
          "990:       self._handle = h;",
          "991:       listen(self, null, -1, -1, backlog);",
          "992:     } else if (typeof h.fd === 'number' && h.fd >= 0) {",
          "",
          "[Removed Lines]",
          "989:     if (h instanceof TCP || h instanceof Pipe) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1018:   return self;",
          "1019: };",
          "1023: Server.prototype.address = function() {",
          "1024:   if (this._handle && this._handle.getsockname) {",
          "1025:     return this._handle.getsockname();",
          "",
          "[Removed Lines]",
          "1021: Server.prototype.listen = Server.prototype._listen;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-cluster-basic.js||test/simple/test-cluster-basic.js": [
          "File: test/simple/test-cluster-basic.js -> test/simple/test-cluster-basic.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:           assert.equal(arguments.length, 1);",
          "137:           var expect = { address: '127.0.0.1',",
          "138:                          port: common.PORT,",
          "140:           assert.deepEqual(arguments[0], expect);",
          "141:           break;",
          "",
          "[Removed Lines]",
          "139:                          family: 'IPv4'};",
          "",
          "[Added Lines]",
          "139:                          addressType: 4,",
          "140:                          fd: undefined };",
          "",
          "---------------"
        ],
        "test/simple/test-net-lazy-listen.js||test/simple/test-net-lazy-listen.js": [
          "File: test/simple/test-net-lazy-listen.js -> test/simple/test-net-lazy-listen.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "33c76f19de1a93f1d712334e6b09fc78ee8db702",
      "candidate_info": {
        "commit_hash": "33c76f19de1a93f1d712334e6b09fc78ee8db702",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/33c76f19de1a93f1d712334e6b09fc78ee8db702",
        "files": [
          "lib/net.js"
        ],
        "message": "net.js: lint",
        "before_after_code_files": [
          "lib/net.js||linet.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "376: Socket.prototype.destroy = function(exception) {",
          "377:   this._destroy(exception);",
          "381: function onread(buffer, offset, length) {",
          "",
          "[Removed Lines]",
          "378: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e1471c806a387d9953ba3387892190d7f423fbb",
      "candidate_info": {
        "commit_hash": "5e1471c806a387d9953ba3387892190d7f423fbb",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5e1471c806a387d9953ba3387892190d7f423fbb",
        "files": [
          "tools/addon.gypi",
          "tools/gyp_addon"
        ],
        "message": "gyp_addon: link with node.lib on Windows\n\nCloses GH-2685",
        "before_after_code_files": [
          "tools/addon.gypi||tools/addon.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/addon.gypi||tools/addon.gypi": [
          "File: tools/addon.gypi -> tools/addon.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     'conditions': [",
          "13:       [ 'OS==\"mac\"', {",
          "14:         'libraries': [ '-undefined dynamic_lookup' ],",
          "15:       }]",
          "16:     ]",
          "17:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:       }],",
          "16:       [ 'OS==\"win\"', {",
          "17:         'libraries': [ '-l<(node_root_dir)/$(Configuration)/node.lib' ],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0111aa0c45d2735080d7a177470839af767f7f2",
      "candidate_info": {
        "commit_hash": "d0111aa0c45d2735080d7a177470839af767f7f2",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d0111aa0c45d2735080d7a177470839af767f7f2",
        "files": [
          "deps/uv/src/unix/sunos.c"
        ],
        "message": "uv: Upgrade to 382f2a26",
        "before_after_code_files": [
          "deps/uv/src/unix/sunos.c||deps/uv/src/unix/sunos.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/src/unix/sunos.c||deps/uv/src/unix/sunos.c": [
          "File: deps/uv/src/unix/sunos.c -> deps/uv/src/unix/sunos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <assert.h>",
          "29: #include <errno.h>",
          "32: #include <net/if.h>",
          "34: #include <sys/loadavg.h>",
          "",
          "[Removed Lines]",
          "31: #include <ifaddrs.h>",
          "",
          "[Added Lines]",
          "31: #ifndef SUNOS_NO_IFADDRS",
          "32: # include <ifaddrs.h>",
          "33: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "407: uv_err_t uv_interface_addresses(uv_interface_address_t** addresses,",
          "408:   int* count) {",
          "410:   struct ifaddrs *addrs, *ent;",
          "411:   char ip[INET6_ADDRSTRLEN];",
          "412:   uv_interface_address_t* address;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "411: #ifdef SUNOS_NO_IFADDRS",
          "412:   return uv__new_artificial_error(UV_ENOSYS);",
          "413: #else",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a039bad299f915b68f01a961a3eb4ea70ed88795",
      "candidate_info": {
        "commit_hash": "a039bad299f915b68f01a961a3eb4ea70ed88795",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/a039bad299f915b68f01a961a3eb4ea70ed88795",
        "files": [
          "doc/api/fs.markdown",
          "lib/fs.js",
          "test/simple/test-fs-watch.js"
        ],
        "message": "fs.watch should not require a listener arguments\n\nSince fs.watch returns an event emitter where the change event is exactly\nthe same as the listener callback, the argument should be required",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "test/simple/test-fs-watch.js||test/simple/test-fs-watch.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "773:     listener = arguments[1];",
          "774:   }",
          "780:   if (options.persistent === undefined) options.persistent = true;",
          "782:   watcher = new FSWatcher();",
          "783:   watcher.start(filename, options.persistent);",
          "786:   return watcher;",
          "787: };",
          "",
          "[Removed Lines]",
          "776:   if (!listener) {",
          "777:     throw new Error('watch requires a listener function');",
          "778:   }",
          "785:   watcher.addListener('change', listener);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-fs-watch.js||test/simple/test-fs-watch.js": [
          "File: test/simple/test-fs-watch.js -> test/simple/test-fs-watch.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: fs.writeFileSync(filepathOne, 'hello');",
          "70: assert.doesNotThrow(",
          "71:     function() {",
          "73:         assert.equal('change', event);",
          "74:         if (expectFilePath) {",
          "75:           assert.equal('watch.txt', filename);",
          "",
          "[Removed Lines]",
          "61: assert.throws(",
          "62:     function() {",
          "63:       fs.watch(filepathOne);",
          "64:     },",
          "65:     function(e) {",
          "66:       return e.message === 'watch requires a listener function';",
          "67:     }",
          "68: );",
          "72:       var watcher = fs.watch(filepathOne, function(event, filename) {",
          "",
          "[Added Lines]",
          "63:       var watcher = fs.watch(filepathOne)",
          "64:       watcher.on('change', function(event, filename) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92: fs.writeFileSync(filepathTwoAbs, 'howdy');",
          "103: assert.doesNotThrow(",
          "104:     function() {",
          "105:       var watcher = fs.watch(filepathTwo, function(event, filename) {",
          "",
          "[Removed Lines]",
          "94: assert.throws(",
          "95:     function() {",
          "96:       fs.watch(filepathTwo);",
          "97:     },",
          "98:     function(e) {",
          "99:       return e.message === 'watch requires a listener function';",
          "100:     }",
          "101: );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}