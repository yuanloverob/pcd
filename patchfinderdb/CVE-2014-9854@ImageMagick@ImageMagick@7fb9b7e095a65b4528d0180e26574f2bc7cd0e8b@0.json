{
  "cve_id": "CVE-2014-9854",
  "cve_desc": "coders/tiff.c in ImageMagick allows remote attackers to cause a denial of service (application crash) via vectors related to the \"identification of image.\"",
  "repo": "ImageMagick/ImageMagick",
  "patch_hash": "7fb9b7e095a65b4528d0180e26574f2bc7cd0e8b",
  "patch_info": {
    "commit_hash": "7fb9b7e095a65b4528d0180e26574f2bc7cd0e8b",
    "repo": "ImageMagick/ImageMagick",
    "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/7fb9b7e095a65b4528d0180e26574f2bc7cd0e8b",
    "files": [
      "coders/tiff.c"
    ],
    "message": "",
    "before_after_code_files": [
      "coders/tiff.c||coders/tiff.c"
    ]
  },
  "patch_diff": {
    "coders/tiff.c||coders/tiff.c": [
      "File: coders/tiff.c -> coders/tiff.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1216:         image->endian=MSBEndian;",
      "1217:       }",
      "1218: #endif",
      "1220:         (photometric == PHOTOMETRIC_MINISWHITE))",
      "1221:       SetImageColorspace(image,GRAYColorspace,exception);",
      "1222:     if (photometric == PHOTOMETRIC_SEPARATED)",
      "",
      "[Removed Lines]",
      "1219:     if ((photometric == PHOTOMETRIC_MINISBLACK) ||",
      "",
      "[Added Lines]",
      "1219:     if ((photometric == PHOTOMETRIC_MINISBLACK) ||",
      "1220:         (photometric == PHOTOMETRIC_MINISWHITE))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "14c08dcd1910ecd8360f51d13885b2c9c39b655d",
      "candidate_info": {
        "commit_hash": "14c08dcd1910ecd8360f51d13885b2c9c39b655d",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/14c08dcd1910ecd8360f51d13885b2c9c39b655d",
        "files": [
          "coders/psd-private.h",
          "coders/psd.c",
          "coders/tiff.c"
        ],
        "message": "Added support for reading Photoshop layers in TIFF files.",
        "before_after_code_files": [
          "coders/psd-private.h||coders/psd-private.h",
          "coders/psd.c||coders/psd.c",
          "coders/tiff.c||coders/tiff.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "coders/tiff.c||coders/tiff.c"
          ],
          "candidate": [
            "coders/tiff.c||coders/tiff.c"
          ]
        }
      },
      "candidate_diff": {
        "coders/psd-private.h||coders/psd-private.h": [
          "File: coders/psd-private.h -> coders/psd-private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2:   Copyright 1999-2015 ImageMagick Studio LLC, a non-profit organization",
          "3:   dedicated to making software imaging solutions freely available.",
          "5:   You may not use this file except in compliance with the License.",
          "6:   obtain a copy of the License at",
          "8:     http://www.imagemagick.org/script/license.php",
          "10:   Unless required by applicable law or agreed to in writing, software",
          "11:   distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12:   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13:   See the License for the specific language governing permissions and",
          "14:   limitations under the License.",
          "16:   Private header to reuse psd functionality.",
          "18: #ifndef _PSD_PRIVATE_H",
          "19: #define _PSD_PRIVATE_H",
          "21: #if defined(__cplusplus) || defined(c_plusplus)",
          "22: extern \"C\" {",
          "23: #endif",
          "25: typedef struct _PSDInfo",
          "26: {",
          "27:   char",
          "28:     signature[4];",
          "30:   size_t",
          "31:     rows,",
          "32:     columns;",
          "34:   unsigned char",
          "35:     reserved[6];",
          "37:   unsigned short",
          "38:     channels,",
          "39:     depth,",
          "40:     mode,",
          "41:     version;",
          "42: } PSDInfo;",
          "44: extern ModuleExport MagickStatusType",
          "45:   ReadPSDLayers(Image *image,const ImageInfo *image_info,",
          "46:   const PSDInfo *psd_info,const MagickBooleanType skip_layers,",
          "47:   ExceptionInfo *exception);",
          "49: #if defined(__cplusplus) || defined(c_plusplus)",
          "50: }",
          "51: #endif",
          "53: #endif",
          "",
          "---------------"
        ],
        "coders/psd.c||coders/psd.c": [
          "File: coders/psd.c -> coders/psd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: #include \"MagickCore/string_.h\"",
          "76: #ifdef MAGICKCORE_ZLIB_DELEGATE",
          "77: #include <zlib.h>",
          "78: #endif",
          "82:   Define declaractions.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79: #include \"psd-private.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163:     flags,",
          "164:     name[256],",
          "165:     visible;",
          "167:   unsigned short",
          "188:     depth,",
          "189:     mode;",
          "190: } PSDInfo;",
          "",
          "[Removed Lines]",
          "168:     channels;",
          "169: } LayerInfo;",
          "171: typedef struct _PSDInfo",
          "172: {",
          "173:   char",
          "174:     signature[4];",
          "176:   unsigned short",
          "177:     channels,",
          "178:     version;",
          "180:   unsigned char",
          "181:     reserved[6];",
          "183:   size_t",
          "184:     rows,",
          "185:     columns;",
          "187:   unsigned short",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1238:         {",
          "1239:           CompositeImage(layer_info->image,layer_info->mask.image,",
          "1240:             CopyAlphaCompositeOp,MagickTrue,0,0,exception);",
          "1245:   return(status);",
          "1246: }",
          "",
          "[Removed Lines]",
          "1241:           layer_info->mask.image=DestroyImage(layer_info->mask.image);",
          "1242:         }",
          "1243:     }",
          "",
          "[Added Lines]",
          "1221:     }",
          "1223:   return(status);",
          "",
          "---------------"
        ],
        "coders/tiff.c||coders/tiff.c": [
          "File: coders/tiff.c -> coders/tiff.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "100: # endif",
          "101: # if !defined(TIFFTAG_OPIIMAGEID)",
          "102: #  define TIFFTAG_OPIIMAGEID  32781",
          "103: # endif",
          "107:   Typedef declarations.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: #include \"psd-private.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "500:       q+=GetPixelChannels(image);",
          "501:     }",
          "502:     if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)",
          "504:   }",
          "505:   image_view=DestroyCacheView(image_view);",
          "506:   return(status);",
          "",
          "[Removed Lines]",
          "503:       status=MagickFalse;",
          "",
          "[Added Lines]",
          "504:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "557:   if (exception != (ExceptionInfo *) NULL)",
          "558:     (void) ThrowMagickException(exception,GetMagickModule(),CoderError,message,",
          "559:       \"`%s'\",module);",
          "562: static toff_t TIFFGetBlobSize(thandle_t image)",
          "563: {",
          "",
          "[Removed Lines]",
          "560: }",
          "",
          "[Added Lines]",
          "562: static toff_t TIFFGetBlobSize(thandle_t image)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "567: static void TIFFGetProfiles(TIFF *tiff,Image *image,ExceptionInfo *exception)",
          "568: {",
          "569:   uint32",
          "578:       (profile != (unsigned char *) NULL))",
          "579:     (void) ReadProfile(image,\"icc\",profile,(ssize_t) length,exception);",
          "587:   if ((TIFFGetField(tiff,TIFFTAG_RICHTIFFIPTC,&length,&profile) == 1) &&",
          "588:       (profile != (unsigned char *) NULL))",
          "592:       (void) ReadProfile(image,\"iptc\",profile,4L*length,exception);",
          "593:     }",
          "594: #endif",
          "595: #if defined(TIFFTAG_XMLPACKET)",
          "599: #endif",
          "600:   if ((TIFFGetField(tiff,37724,&length,&profile) == 1) &&",
          "601:       (profile != (unsigned char *) NULL))",
          "",
          "[Removed Lines]",
          "570:     length;",
          "572:   unsigned char",
          "575:   length=0;",
          "576: #if defined(TIFFTAG_ICCPROFILE)",
          "577:   if ((TIFFGetField(tiff,TIFFTAG_ICCPROFILE,&length,&profile) == 1) &&",
          "580: #endif",
          "581: #if defined(TIFFTAG_PHOTOSHOP)",
          "582:   if ((TIFFGetField(tiff,TIFFTAG_PHOTOSHOP,&length,&profile) == 1) &&",
          "583:       (profile != (unsigned char *) NULL))",
          "584:     (void) ReadProfile(image,\"8bim\",profile,(ssize_t) length,exception);",
          "585: #endif",
          "586: #if defined(TIFFTAG_RICHTIFFIPTC)",
          "589:     {",
          "590:       if (TIFFIsByteSwapped(tiff) != 0)",
          "591:         TIFFSwabArrayOfLong((uint32 *) profile,(size_t) length);",
          "596:   if ((TIFFGetField(tiff,TIFFTAG_XMLPACKET,&length,&profile) == 1) &&",
          "597:       (profile != (unsigned char *) NULL))",
          "598:     (void) ReadProfile(image,\"xmp\",profile,(ssize_t) length,exception);",
          "",
          "[Added Lines]",
          "571:     length;",
          "576:   length=0;",
          "579: #if defined(TIFFTAG_ICCPROFILE)",
          "580:       if ((TIFFGetField(tiff,TIFFTAG_ICCPROFILE,&length,&profile) == 1) &&",
          "581:           (profile != (unsigned char *) NULL))",
          "584: #if defined(TIFFTAG_PHOTOSHOP)",
          "585:       if ((TIFFGetField(tiff,TIFFTAG_PHOTOSHOP,&length,&profile) == 1) &&",
          "586:           (profile != (unsigned char *) NULL))",
          "587:         (void) ReadProfile(image,\"8bim\",profile,(ssize_t) length,exception);",
          "588: #endif",
          "589: #if defined(TIFFTAG_RICHTIFFIPTC)",
          "590:       if ((TIFFGetField(tiff,TIFFTAG_RICHTIFFIPTC,&length,&profile) == 1) &&",
          "593:           if (TIFFIsByteSwapped(tiff) != 0)",
          "594:             TIFFSwabArrayOfLong((uint32 *) profile,(size_t) length);",
          "595:           (void) ReadProfile(image,\"iptc\",profile,4L*length,exception);",
          "597: #endif",
          "598: #if defined(TIFFTAG_XMLPACKET)",
          "599:       if ((TIFFGetField(tiff,TIFFTAG_XMLPACKET,&length,&profile) == 1) &&",
          "600:           (profile != (unsigned char *) NULL))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "939:               method=ReadYCCKMethod;",
          "940:             break;",
          "941:           }",
          "942:         i+=(size_t) length;",
          "943:       }",
          "944:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "947:       }",
          "948:     }",
          "949:   (void) SeekBlob(image,position,SEEK_SET);",
          "950:   return(method);",
          "951: }",
          "953: static void TIFFReadPhotoshopLayers(Image* image,const ImageInfo *image_info,",
          "954:   ExceptionInfo *exception)",
          "955: {",
          "956:   const char",
          "959:   const StringInfo",
          "962:   Image",
          "965:   PSDInfo",
          "966:     info;",
          "968:   register ssize_t",
          "969:     i;",
          "971:   if (GetImageListLength(image) != 1)",
          "972:     return;",
          "973:   option=GetImageOption(image_info,\"tiff:ignore-layers\");",
          "974:   if (IsStringTrue(option) != MagickFalse)",
          "975:     return;",
          "976:   layer_info=GetImageProfile(image,\"tiff:37724\");",
          "977:   if (layer_info == (const StringInfo *) NULL)",
          "978:     return;",
          "979:   for (i=0; i < (ssize_t) layer_info->length-8; i++)",
          "980:   {",
          "981:     if (LocaleNCompare((const char *) (layer_info->datum+i),\"8BIM\",4) != 0)",
          "982:       continue;",
          "983:     i+=4;",
          "984:     if ((LocaleNCompare((const char *) (layer_info->datum+i),\"Layr\",4) == 0) ||",
          "985:         (LocaleNCompare((const char *) (layer_info->datum+i),\"LMsk\",4) == 0) ||",
          "986:         (LocaleNCompare((const char *) (layer_info->datum+i),\"Lr16\",4) == 0) ||",
          "987:         (LocaleNCompare((const char *) (layer_info->datum+i),\"Lr32\",4) == 0))",
          "988:       break;",
          "989:   }",
          "990:   i+=4;",
          "991:   if (i >= layer_info->length-8)",
          "992:     return;",
          "993:   layers=CloneImage(image,image->columns,image->rows,MagickTrue,exception);",
          "994:   RemoveImageProfile(layers,\"tiff:37724\");",
          "995:   AttachBlob(layers->blob,layer_info->datum,layer_info->length);",
          "996:   SeekBlob(layers,(MagickOffsetType) i,SEEK_SET);",
          "997:   info.version=1;",
          "998:   info.columns=layers->columns;",
          "999:   info.rows=layers->rows;",
          "1000:   info.channels=layers->number_channels;",
          "1001:   ReadPSDLayers(layers,image_info,&info,MagickFalse,exception);",
          "1002:   DeleteImageFromList(&layers);",
          "1003:   if (layers != (Image *) NULL)",
          "1004:     {",
          "1005:       AppendImageToList(&image,layers);",
          "1006:       while (layers != (Image *) NULL)",
          "1007:       {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1208:         image->endian=MSBEndian;",
          "1209:       }",
          "1210: #endif",
          "1213:       SetImageColorspace(image,GRAYColorspace,exception);",
          "1214:     if (photometric == PHOTOMETRIC_SEPARATED)",
          "1215:       SetImageColorspace(image,CMYKColorspace,exception);",
          "",
          "[Removed Lines]",
          "1211:     if ((photometric == PHOTOMETRIC_MINISBLACK) ||",
          "1212:         (photometric == PHOTOMETRIC_MINISWHITE))",
          "",
          "[Added Lines]",
          "1277:         (photometric == PHOTOMETRIC_MINISWHITE))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1990:         image=SyncNextImageInList(image);",
          "1991:         status=SetImageProgress(image,LoadImagesTag,image->scene-1,",
          "1992:           image->scene);",
          "1993:         if (status == MagickFalse)",
          "1994:           break;",
          "1995:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2058:           break;",
          "",
          "---------------"
        ]
      }
    }
  ]
}