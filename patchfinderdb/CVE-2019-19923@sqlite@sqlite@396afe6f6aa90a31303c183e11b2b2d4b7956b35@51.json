{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "38a28a7434d75c27cdeabf9d30fd66eaed3d5625",
      "candidate_info": {
        "commit_hash": "38a28a7434d75c27cdeabf9d30fd66eaed3d5625",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/38a28a7434d75c27cdeabf9d30fd66eaed3d5625",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases added to test/fuzzdata8.db.\n\nFossilOrigin-Name: e5924939c9c8f39367900360fa294cdb1220e9f68d183e32882e0926f775869d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ef27e7a08728aa7447ae19812803ac5c4a9d80c97541014bd292485792005a3e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31f69626df74d7f5d011cee54da6a05acd32970c",
      "candidate_info": {
        "commit_hash": "31f69626df74d7f5d011cee54da6a05acd32970c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/31f69626df74d7f5d011cee54da6a05acd32970c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c",
          "src/build.c",
          "src/fkey.c",
          "src/main.c",
          "src/malloc.c",
          "src/parse.y",
          "src/prepare.c",
          "src/sqliteInt.h"
        ],
        "message": "Performance optimization to the lookaside-memory disabling mechanism.\n\nFossilOrigin-Name: 17ce1c49cb0ed6fdd8c7c33431bc2afa217f1092c99b8dd608890a8e7aec7fb1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c",
          "src/build.c||src/build.c",
          "src/fkey.c||src/fkey.c",
          "src/main.c||src/main.c",
          "src/malloc.c||src/malloc.c",
          "src/parse.y||src/parse.y",
          "src/prepare.c||src/prepare.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c20a35336432025445f9f7e289d0cc3e4003fb17f45a4ce74c6269c407c6e09f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1855: #ifdef SQLITE_ENABLE_STAT4",
          "1856:   if( rc==SQLITE_OK ){",
          "1858:     rc = loadStat4(db, sInfo.zDatabase);",
          "1860:   }",
          "1861:   for(i=sqliteHashFirst(&pSchema->idxHash); i; i=sqliteHashNext(i)){",
          "1862:     Index *pIdx = sqliteHashData(i);",
          "",
          "[Removed Lines]",
          "1857:     db->lookaside.bDisable++;",
          "1859:     db->lookaside.bDisable--;",
          "",
          "[Added Lines]",
          "1857:     DisableLookaside;",
          "1859:     EnableLookaside;",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2447:     n = pParse->nTab;",
          "2448:     sqlite3SrcListAssignCursors(pParse, pSel->pSrc);",
          "2449:     pTable->nCol = -1;",
          "2451: #ifndef SQLITE_OMIT_AUTHORIZATION",
          "2452:     xAuth = db->xAuth;",
          "2453:     db->xAuth = 0;",
          "",
          "[Removed Lines]",
          "2450:     db->lookaside.bDisable++;",
          "",
          "[Added Lines]",
          "2450:     DisableLookaside;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2489:     }",
          "2490:     sqlite3DeleteTable(db, pSelTab);",
          "2491:     sqlite3SelectDelete(db, pSel);",
          "2493: #ifndef SQLITE_OMIT_ALTERTABLE",
          "2494:     pParse->eParseMode = eParseMode;",
          "2495: #endif",
          "",
          "[Removed Lines]",
          "2492:     db->lookaside.bDisable--;",
          "",
          "[Added Lines]",
          "2492:     EnableLookaside;",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1299:     }",
          "1304:     pTrigger = (Trigger *)sqlite3DbMallocZero(db,",
          "",
          "[Removed Lines]",
          "1302:     db->lookaside.bDisable++;",
          "",
          "[Added Lines]",
          "1302:     DisableLookaside;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1321:     }",
          "1326:     sqlite3ExprDelete(db, pWhere);",
          "1327:     sqlite3ExprDelete(db, pWhen);",
          "",
          "[Removed Lines]",
          "1324:     db->lookaside.bDisable--;",
          "",
          "[Added Lines]",
          "1324:     EnableLookaside;",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "715:   db->lookaside.pInit = 0;",
          "716:   db->lookaside.pFree = 0;",
          "717:   db->lookaside.sz = (u16)sz;",
          "718:   if( pStart ){",
          "719:     int i;",
          "720:     LookasideSlot *p;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "718:   db->lookaside.szTrue = (u16)sz;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "733:     db->lookaside.pStart = db;",
          "734:     db->lookaside.pEnd = db;",
          "735:     db->lookaside.bDisable = 1;",
          "736:     db->lookaside.bMalloced = 0;",
          "737:     db->lookaside.nSlot = 0;",
          "738:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "737:     db->lookaside.sz = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3064:   db->magic = SQLITE_MAGIC_BUSY;",
          "3065:   db->aDb = db->aDbStatic;",
          "3066:   db->lookaside.bDisable = 1;",
          "3068:   assert( sizeof(db->aLimit)==sizeof(aHardLimit) );",
          "3069:   memcpy(db->aLimit, aHardLimit, sizeof(db->aLimit));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3069:   db->lookaside.sz = 0;",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:     return sqlite3GlobalConfig.m.xSize(p);",
          "299:   }else{",
          "300:     assert( sqlite3_mutex_held(db->mutex) );",
          "302:   }",
          "303: }",
          "304: sqlite3_uint64 sqlite3_msize(void *p){",
          "",
          "[Removed Lines]",
          "301:     return db->lookaside.sz;",
          "",
          "[Added Lines]",
          "301:     return db->lookaside.szTrue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "350:       LookasideSlot *pBuf = (LookasideSlot*)p;",
          "351: #ifdef SQLITE_DEBUG",
          "354: #endif",
          "355:       pBuf->pNext = db->lookaside.pFree;",
          "356:       db->lookaside.pFree = pBuf;",
          "",
          "[Removed Lines]",
          "353:       memset(p, 0xaa, db->lookaside.sz);",
          "",
          "[Added Lines]",
          "353:       memset(p, 0xaa, db->lookaside.szTrue);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "510:   assert( db!=0 );",
          "511:   assert( sqlite3_mutex_held(db->mutex) );",
          "512:   assert( db->pnBytesFreed==0 );",
          "527:     }",
          "530:   }",
          "531: #else",
          "532:   assert( db!=0 );",
          "",
          "[Removed Lines]",
          "513:   if( db->lookaside.bDisable==0 ){",
          "514:     assert( db->mallocFailed==0 );",
          "515:     if( n>db->lookaside.sz ){",
          "516:       db->lookaside.anStat[1]++;",
          "517:     }else if( (pBuf = db->lookaside.pFree)!=0 ){",
          "518:       db->lookaside.pFree = pBuf->pNext;",
          "519:       db->lookaside.anStat[0]++;",
          "520:       return (void*)pBuf;",
          "521:     }else if( (pBuf = db->lookaside.pInit)!=0 ){",
          "522:       db->lookaside.pInit = pBuf->pNext;",
          "523:       db->lookaside.anStat[0]++;",
          "524:       return (void*)pBuf;",
          "525:     }else{",
          "526:       db->lookaside.anStat[2]++;",
          "528:   }else if( db->mallocFailed ){",
          "529:     return 0;",
          "",
          "[Added Lines]",
          "513:   if( n>db->lookaside.sz ){",
          "514:     if( db->lookaside.bDisable ){",
          "515:       return db->mallocFailed ? 0 : dbMallocRawFinish(db, n);",
          "517:     db->lookaside.anStat[1]++;",
          "518:   }else if( (pBuf = db->lookaside.pFree)!=0 ){",
          "519:     db->lookaside.pFree = pBuf->pNext;",
          "520:     db->lookaside.anStat[0]++;",
          "521:     return (void*)pBuf;",
          "522:   }else if( (pBuf = db->lookaside.pInit)!=0 ){",
          "523:     db->lookaside.pInit = pBuf->pNext;",
          "524:     db->lookaside.anStat[0]++;",
          "525:     return (void*)pBuf;",
          "526:   }else{",
          "527:     db->lookaside.anStat[2]++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "550:   assert( db!=0 );",
          "551:   if( p==0 ) return sqlite3DbMallocRawNN(db, n);",
          "552:   assert( sqlite3_mutex_held(db->mutex) );",
          "554:   return dbReallocFinish(db, p, n);",
          "555: }",
          "556: static SQLITE_NOINLINE void *dbReallocFinish(sqlite3 *db, void *p, u64 n){",
          "",
          "[Removed Lines]",
          "553:   if( isLookaside(db,p) && n<=db->lookaside.sz ) return p;",
          "",
          "[Added Lines]",
          "551:   if( isLookaside(db,p) && n<=db->lookaside.szTrue ) return p;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "561:     if( isLookaside(db, p) ){",
          "562:       pNew = sqlite3DbMallocRawNN(db, n);",
          "563:       if( pNew ){",
          "565:         sqlite3DbFree(db, p);",
          "566:       }",
          "567:     }else{",
          "",
          "[Removed Lines]",
          "564:         memcpy(pNew, p, db->lookaside.sz);",
          "",
          "[Added Lines]",
          "562:         memcpy(pNew, p, db->lookaside.szTrue);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "660:     if( db->nVdbeExec>0 ){",
          "661:       db->u1.isInterrupted = 1;",
          "662:     }",
          "664:     if( db->pParse ){",
          "665:       db->pParse->rc = SQLITE_NOMEM_BKPT;",
          "666:     }",
          "",
          "[Removed Lines]",
          "663:     db->lookaside.bDisable++;",
          "",
          "[Added Lines]",
          "661:     DisableLookaside;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "679:     db->mallocFailed = 0;",
          "680:     db->u1.isInterrupted = 0;",
          "681:     assert( db->lookaside.bDisable>0 );",
          "683:   }",
          "684: }",
          "",
          "[Removed Lines]",
          "682:     db->lookaside.bDisable--;",
          "",
          "[Added Lines]",
          "680:     EnableLookaside;",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "108: static void disableLookaside(Parse *pParse){",
          "109:   pParse->disableLookaside++;",
          "111: }",
          "113: } // end %include",
          "",
          "[Removed Lines]",
          "110:   pParse->db->lookaside.bDisable++;",
          "",
          "[Added Lines]",
          "109:   sqlite3 *db = pParse->db;",
          "111:   DisableLookaside;",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "527:   if( db ){",
          "528:     assert( db->lookaside.bDisable >= pParse->disableLookaside );",
          "529:     db->lookaside.bDisable -= pParse->disableLookaside;",
          "530:   }",
          "531:   pParse->disableLookaside = 0;",
          "532: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "530:     db->lookaside.sz = db->lookaside.bDisable ? 0 : db->lookaside.szTrue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "561:   if( prepFlags & SQLITE_PREPARE_PERSISTENT ){",
          "562:     sParse.disableLookaside++;",
          "564:   }",
          "565:   sParse.disableVtab = (prepFlags & SQLITE_PREPARE_NO_VTAB)!=0;",
          "",
          "[Removed Lines]",
          "563:     db->lookaside.bDisable++;",
          "",
          "[Added Lines]",
          "564:     DisableLookaside;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1288: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1297: #define DisableLookaside  db->lookaside.bDisable++;db->lookaside.sz=0",
          "1298: #define EnableLookaside   db->lookaside.bDisable--;\\",
          "1299:    db->lookaside.sz=db->lookaside.bDisable?0:db->lookaside.szTrue",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c8ee026ba71b1770a89117df4fb5fb915ad5059",
      "candidate_info": {
        "commit_hash": "2c8ee026ba71b1770a89117df4fb5fb915ad5059",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2c8ee026ba71b1770a89117df4fb5fb915ad5059",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix the CLI to keep proper track of input line numbers for use in error messages, even after processing in-line hex database inputs using \".open --hexdb\".\n\nFossilOrigin-Name: 7ffa9858162774cba03a565a7b65135d9e8bfea726af1a29de6898f66c4b1261",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 67a87399b8ad8f1ce3052ee3159906f5c6df3d7b5691b3acac856bd2f1c82088",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3735: static unsigned char *readHexDb(ShellState *p, int *pnData){",
          "3736:   unsigned char *a = 0;",
          "3738:   int n = 0;",
          "3739:   int pgsz = 0;",
          "3740:   int iOffset = 0;",
          "",
          "[Removed Lines]",
          "3737:   int nLine = 1;",
          "",
          "[Added Lines]",
          "3738:   int nLine;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3742:   int rc;",
          "3743:   FILE *in;",
          "3744:   unsigned char x[16];",
          "3746:   if( p->zDbFilename ){",
          "3747:     in = fopen(p->zDbFilename, \"r\");",
          "3748:     if( in==0 ){",
          "3749:       utf8_printf(stderr, \"cannot open \\\"%s\\\" for reading\\n\", p->zDbFilename);",
          "3750:       return 0;",
          "3751:     }",
          "3752:   }else{",
          "3753:     in = p->in;",
          "3754:   }",
          "3756:   if( fgets(zLine, sizeof(zLine), in)==0 ) goto readHexDb_error;",
          "3757:   rc = sscanf(zLine, \"| size %d pagesize %d\", &n, &pgsz);",
          "3758:   if( rc!=2 ) goto readHexDb_error;",
          "",
          "[Removed Lines]",
          "3745:   char zLine[100];",
          "",
          "[Added Lines]",
          "3746:   char zLine[1000];",
          "3753:     nLine = 0;",
          "3756:     nLine = p->lineno;",
          "3759:   nLine++;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3767:     utf8_printf(stderr, \"invalid pagesize\\n\");",
          "3768:     goto readHexDb_error;",
          "3769:   }",
          "3771:     rc = sscanf(zLine, \"| page %d offset %d\", &j, &k);",
          "3772:     if( rc==2 ){",
          "3773:       iOffset = k;",
          "",
          "[Removed Lines]",
          "3770:   for(nLine=2; fgets(zLine, sizeof(zLine), in)!=0; nLine++){",
          "",
          "[Added Lines]",
          "3774:   for(nLine++; fgets(zLine, sizeof(zLine), in)!=0; nLine++){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3790:     }",
          "3791:   }",
          "3794:   return a;",
          "3796: readHexDb_error:",
          "",
          "[Removed Lines]",
          "3793:   if( in!=p->in ) fclose(in);",
          "",
          "[Added Lines]",
          "3797:   if( in!=p->in ){",
          "3798:     fclose(in);",
          "3799:   }else{",
          "3800:     p->lineno = nLine;",
          "3801:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3798:     fclose(in);",
          "3799:   }else{",
          "3800:     while( fgets(zLine, sizeof(zLine), p->in)!=0 ){",
          "3801:       if(strncmp(zLine, \"| end \", 6)==0 ) break;",
          "3802:     }",
          "3803:   }",
          "3804:   sqlite3_free(a);",
          "3805:   utf8_printf(stderr,\"Error on line %d of --hexdb input\\n\", nLine);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3809:       nLine++;",
          "3812:     p->lineno = nLine;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6973:   if( c=='r' && n>=3 && strncmp(azArg[0], \"read\", n)==0 ){",
          "6974:     FILE *inSaved = p->in;",
          "6975:     if( nArg!=2 ){",
          "6976:       raw_printf(stderr, \"Usage: .read FILE\\n\");",
          "6977:       rc = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6985:     int savedLineno = p->lineno;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6986:       fclose(p->in);",
          "6987:     }",
          "6988:     p->in = inSaved;",
          "6989:   }else",
          "6991:   if( c=='r' && n>=3 && strncmp(azArg[0], \"restore\", n)==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7000:     p->lineno = savedLineno;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "8341:   while( errCnt==0 || !bail_on_error || (p->in==0 && stdin_is_interactive) ){",
          "8342:     fflush(p->out);",
          "8343:     zLine = one_input_line(p->in, zLine, nSql>0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8352:   p->lineno = 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "8350:       if( p->in!=0 ) break;",
          "8351:       seenInterrupt = 0;",
          "8352:     }",
          "8354:     if( nSql==0 && _all_whitespace(zLine) ){",
          "8355:       if( ShellHasFlag(p, SHFLG_Echo) ) printf(\"%s\\n\", zLine);",
          "8356:       continue;",
          "",
          "[Removed Lines]",
          "8353:     lineno++;",
          "",
          "[Added Lines]",
          "8365:     p->lineno++;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "8382:       for(i=0; zLine[i] && IsSpace(zLine[i]); i++){}",
          "8383:       assert( nAlloc>0 && zSql!=0 );",
          "8384:       memcpy(zSql, zLine+i, nLine+1-i);",
          "8386:       nSql = nLine-i;",
          "8387:     }else{",
          "8388:       zSql[nSql++] = '\\n';",
          "",
          "[Removed Lines]",
          "8385:       startline = lineno;",
          "",
          "[Added Lines]",
          "8397:       startline = p->lineno;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "8495:   const char *sqliterc = sqliterc_override;",
          "8496:   char *zBuf = 0;",
          "8497:   FILE *inSaved = p->in;",
          "8499:   if (sqliterc == NULL) {",
          "8500:     home_dir = find_home_dir(0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8510:   int savedLineno = p->lineno;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "8515:     fclose(p->in);",
          "8516:   }",
          "8517:   p->in = inSaved;",
          "8518:   sqlite3_free(zBuf);",
          "8519: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8531:   p->lineno = savedLineno;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a64ddbe76826615b77a806d7a1426fefdfaa4f0",
      "candidate_info": {
        "commit_hash": "0a64ddbe76826615b77a806d7a1426fefdfaa4f0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0a64ddbe76826615b77a806d7a1426fefdfaa4f0",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtree1.test",
          "ext/rtree/rtree2.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "In the rtree extension, actively suppress extra tokens on the column names, and be pedantic about column affinities.  Ticket [367a86e28859f1ff]\n\nFossilOrigin-Name: 97fb5a72f91a44d579466e67c33aa862384c4d1c95c2010cf4ae9dbd172bbcfb",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtree1.test||ext/rtree/rtree1.test",
          "ext/rtree/rtree2.test||ext/rtree/rtree2.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3661:   return rc;",
          "3662: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3668: static int rtreeTokenLength(const char *z){",
          "3669:   int dummy = 0;",
          "3670:   return sqlite3GetToken((const unsigned char*)z,&dummy);",
          "3671: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3728:   pSql = sqlite3_str_new(db);",
          "3730:   for(ii=4; ii<argc; ii++){",
          "3732:       pRtree->nAux++;",
          "3734:     }else if( pRtree->nAux>0 ){",
          "3735:       break;",
          "3736:     }else{",
          "3737:       pRtree->nDim2++;",
          "3739:     }",
          "3740:   }",
          "3741:   sqlite3_str_appendf(pSql, \");\");",
          "",
          "[Removed Lines]",
          "3729:   sqlite3_str_appendf(pSql, \"CREATE TABLE x(%s INT\", argv[3]);",
          "3731:     if( argv[ii][0]=='+' ){",
          "3733:       sqlite3_str_appendf(pSql, \",%s\", argv[ii]+1);",
          "3738:       sqlite3_str_appendf(pSql, \",%s\", argv[ii]);",
          "",
          "[Added Lines]",
          "3738:   sqlite3_str_appendf(pSql, \"CREATE TABLE x(%.*s INT\",",
          "3739:                       rtreeTokenLength(argv[3]), argv[3]);",
          "3741:     const char *zArg = argv[ii];",
          "3742:     if( zArg[0]=='+' ){",
          "3744:       sqlite3_str_appendf(pSql, \",%s\", zArg+1);",
          "3749:       sqlite3_str_appendf(pSql, \",%.*s NUM\", rtreeTokenLength(zArg), zArg);",
          "",
          "---------------"
        ],
        "ext/rtree/rtree1.test||ext/rtree/rtree1.test": [
          "File: ext/rtree/rtree1.test -> ext/rtree/rtree1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "705:   REINDEX;",
          "706: } {}",
          "708: expand_all_sql db",
          "709: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708: reset_db",
          "709: do_execsql_test 18.0 {",
          "710:   CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);",
          "711:   INSERT INTO rt0(c0,c1,c2) VALUES(9,2,3);",
          "712:   SELECT c0 FROM rt0 WHERE rt0.c1 > '-1';",
          "713:   SELECT rt0.c1 > '-1' FROM rt0;",
          "714: } {9 1}",
          "",
          "---------------"
        ],
        "ext/rtree/rtree2.test||ext/rtree/rtree2.test": [
          "File: ext/rtree/rtree2.test -> ext/rtree/rtree2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: }",
          "35: foreach module {rtree_i32 rtree} {",
          "36:   for {set nDim 1} {$nDim <= 5} {incr nDim} {",
          "38:     do_test rtree2-$module.$nDim.1 {",
          "39:       set cols [list]",
          "40:       foreach c [list c0 c1 c2 c3 c4 c5 c6 c7 c8 c9] {",
          "42:       }",
          "43:       set cols [join [lrange $cols 0 [expr {$nDim*2-1}]] \", \"]",
          "44:       execsql \"",
          "",
          "[Removed Lines]",
          "41:         lappend cols \"$c REAL\"",
          "",
          "[Added Lines]",
          "36:   if {$module==\"rtree_i32\"} {set etype INT} {set etype REAL}",
          "42:         lappend cols \"$c $etype\"",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 62f2235adf796c72882b26313489cf49804ec3ec4972e0eee5034176cbb07f84",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e6dc5d9081f20a52ae38d6f5009cbfaf3bf72dc",
      "candidate_info": {
        "commit_hash": "7e6dc5d9081f20a52ae38d6f5009cbfaf3bf72dc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7e6dc5d9081f20a52ae38d6f5009cbfaf3bf72dc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/util.c"
        ],
        "message": "Fix the previous check-in [db9acef14d492121] so that the amalgamation build works for systems for which lack HAVE_ISNAN.\n\nFossilOrigin-Name: 3cc55e09e6c1de2059d97bdddf2fdfbdcc62c584b513f56faf9d3a39ef80cddd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: db9acef14d49212108c8082cc15a9b9b4a56b8afe4fe1104ddf62783739c1fbe",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"sqliteInt.h\"",
          "19: #include <stdarg.h>",
          "",
          "[Removed Lines]",
          "20: #if HAVE_ISNAN || SQLITE_HAVE_ISNAN",
          "21: # include <math.h>",
          "22: #endif",
          "",
          "[Added Lines]",
          "20: #include <math.h>",
          "",
          "---------------"
        ]
      }
    }
  ]
}