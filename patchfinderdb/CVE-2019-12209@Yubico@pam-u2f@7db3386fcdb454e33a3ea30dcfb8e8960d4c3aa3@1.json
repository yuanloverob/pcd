{
  "cve_id": "CVE-2019-12209",
  "cve_desc": "Yubico pam-u2f 1.0.7 attempts parsing of the configured authfile (default $HOME/.config/Yubico/u2f_keys) as root (unless openasuser was enabled), and does not properly verify that the path lacks symlinks pointing to other files on the system owned by root. If the debug option is enabled in the PAM configuration, part of the file contents of a symlink target will be logged, possibly revealing sensitive information.",
  "repo": "Yubico/pam-u2f",
  "patch_hash": "7db3386fcdb454e33a3ea30dcfb8e8960d4c3aa3",
  "patch_info": {
    "commit_hash": "7db3386fcdb454e33a3ea30dcfb8e8960d4c3aa3",
    "repo": "Yubico/pam-u2f",
    "commit_url": "https://github.com/Yubico/pam-u2f/commit/7db3386fcdb454e33a3ea30dcfb8e8960d4c3aa3",
    "files": [
      "Makefile.am",
      "README",
      "configure.ac",
      "drop_privs.c",
      "drop_privs.h",
      "pam-u2f.c"
    ],
    "message": "Drop privileges by default when opening user-related files\n\nThe module is typically executed as root and would sometimes\nopen files or follow symlinks that could be controlled from the\noutside.\n\nDrop privileges to the target user before opening any files.\n\nFixes CVE-2019-12209.\n\nThanks to Matthias Gerstner of the SUSE Security Team for reporting\nthe issue.",
    "before_after_code_files": [
      "Makefile.am||Makefile.am",
      "configure.ac||configure.ac",
      "drop_privs.c||drop_privs.c",
      "drop_privs.h||drop_privs.h",
      "pam-u2f.c||pam-u2f.c"
    ]
  },
  "patch_diff": {
    "Makefile.am||Makefile.am": [
      "File: Makefile.am -> Makefile.am",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: pam_u2f_la_SOURCES = pam-u2f.c",
      "15: pam_u2f_la_SOURCES += util.c util.h",
      "17: pam_u2f_la_LIBADD = -lpam",
      "18: pam_u2f_la_LIBADD += $(LIBU2FHOST_LIBS) $(LIBU2FSERVER_LIBS)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16: pam_u2f_la_SOURCES += drop_privs.h drop_privs.c",
      "",
      "---------------"
    ],
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "37:    #include <security/pam_appl.h>])",
      "38: AC_CHECK_LIB([pam], [pam_start])",
      "40: case \"$host\" in",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "40: AC_SEARCH_LIBS([pam_modutil_drop_priv], [\"pam\"], [AC_DEFINE([HAVE_PAM_MODUTIL_DROP_PRIV], [1])])",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "71: AX_CHECK_COMPILE_FLAG([-Wall], [CWFLAGS=\"-Wall\"])",
      "72: AX_CHECK_COMPILE_FLAG([-Wextra], [CWFLAGS=\"$CWFLAGS -Wextra\"])",
      "73: AX_CHECK_COMPILE_FLAG([-Wconversion], [CWFLAGS=\"$CWFLAGS -Wconversion\"])",
      "74: AX_CHECK_COMPILE_FLAG([-Wpedantic], [CWFLAGS=\"$CWFLAGS -Wpedantic\"])",
      "75: AX_CHECK_COMPILE_FLAG([-Wformat=2], [CWFLAGS=\"$CWFLAGS -Wformat=2\"])",
      "76: AX_CHECK_COMPILE_FLAG([-Wstrict-prototypes], [CWFLAGS=\"$CWFLAGS -Wstrict-prototypes\"])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "76: # Because pam headers are doing sign-conversion, see PAM_MODUTIL_DEF_PRIVS in pam_modutil.h",
      "77: AX_CHECK_COMPILE_FLAG([-Wconversion], [CWFLAGS=\"$CWFLAGS -Wno-sign-conversion\"])",
      "",
      "---------------"
    ],
    "drop_privs.c||drop_privs.c": [
      "File: drop_privs.c -> drop_privs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: #ifndef HAVE_PAM_MODUTIL_DROP_PRIV",
      "35: #include <unistd.h>",
      "36: #include <pwd.h>",
      "37: #include <grp.h>",
      "38: #include <errno.h>",
      "39: #include <string.h>",
      "40: #include <stdlib.h>",
      "42: #include \"drop_privs.h\"",
      "43: #include \"util.h\"",
      "45: #ifdef HAVE_SECURITY_PAM_APPL_H",
      "46: #include <security/pam_appl.h>",
      "47: #endif",
      "48: #ifdef HAVE_SECURITY_PAM_MODULES_H",
      "49: #include <security/pam_modules.h>",
      "50: #endif",
      "53: int pam_modutil_drop_priv(pam_handle_t *pamh, struct _ykpam_privs *privs, struct passwd *pw) {",
      "54:     privs->saved_euid = geteuid();",
      "55:     privs->saved_egid = getegid();",
      "57:     if ((privs->saved_euid == pw->pw_uid) && (privs->saved_egid == pw->pw_gid)) {",
      "58:         D (privs->debug_file, \"Privilges already dropped, pretend it is all right\");",
      "59:         return 0;",
      "60:     }",
      "62:     privs->saved_groups_length = getgroups(0, NULL);",
      "63:     if (privs->saved_groups_length < 0) {",
      "64:         D (privs->debug_file, \"getgroups: %s\", strerror(errno));",
      "65:         return -1;",
      "66:     }",
      "68:     if (privs->saved_groups_length > SAVED_GROUPS_MAX_LEN) {",
      "69:         D (privs->debug_file, \"too many groups, limiting.\");",
      "70:         privs->saved_groups_length = SAVED_GROUPS_MAX_LEN;",
      "71:     }",
      "73:     if (privs->saved_groups_length > 0) {",
      "74:         if (getgroups(privs->saved_groups_length, privs->saved_groups) < 0) {",
      "75:             D (privs->debug_file, \"getgroups: %s\", strerror(errno));",
      "76:             goto free_out;",
      "77:         }",
      "78:     }",
      "80:     if (initgroups(pw->pw_name, pw->pw_gid) < 0) {",
      "81:         D (privs->debug_file, \"initgroups: %s\", strerror(errno));",
      "82:         goto free_out;",
      "83:     }",
      "85:     if (setegid(pw->pw_gid) < 0) {",
      "86:         D (privs->debug_file, \"setegid: %s\", strerror(errno));",
      "87:         goto free_out;",
      "88:     }",
      "90:     if (seteuid(pw->pw_uid) < 0) {",
      "91:         D (privs->debug_file, \"seteuid: %s\", strerror(errno));",
      "92:         goto free_out;",
      "93:     }",
      "95:     return 0;",
      "96: free_out:",
      "97:     return -1;",
      "98: }",
      "100: int pam_modutil_regain_priv(pam_handle_t *pamh, struct _ykpam_privs *privs) {",
      "101:     if ((privs->saved_euid == geteuid()) && (privs->saved_egid == getegid())) {",
      "102:         D (privs->debug_file, \"Privilges already as requested, pretend it is all right\");",
      "103:         return 0;",
      "104:     }",
      "106:     if (seteuid(privs->saved_euid) < 0) {",
      "107:         D (privs->debug_file, \"seteuid: %s\", strerror(errno));",
      "108:         return -1;",
      "109:     }",
      "111:     if (setegid(privs->saved_egid) < 0) {",
      "112:         D (privs->debug_file, \"setegid: %s\", strerror(errno));",
      "113:         return -1;",
      "114:     }",
      "116:     if (setgroups(privs->saved_groups_length, privs->saved_groups) < 0) {",
      "117:         D (privs->debug_file, \"setgroups: %s\", strerror(errno));",
      "118:         return -1;",
      "119:     }",
      "121:     return 0;",
      "122: }",
      "124: #else",
      "127: typedef int make_iso_compilers_happy;",
      "129: #endif // HAVE_PAM_MODUTIL_DROP_PRIV",
      "",
      "---------------"
    ],
    "drop_privs.h||drop_privs.h": [
      "File: drop_privs.h -> drop_privs.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: #ifndef __PAM_U2F_DROP_PRIVS_H_INCLUDED__",
      "30: #define __PAM_U2F_DROP_PRIVS_H_INCLUDED__",
      "32: #ifdef HAVE_PAM_MODUTIL_DROP_PRIV",
      "33: #include <security/pam_modutil.h>",
      "34: #else",
      "36: #include <pwd.h>",
      "37: #include <stdio.h>",
      "39: #ifdef HAVE_SECURITY_PAM_APPL_H",
      "40: #include <security/pam_appl.h>",
      "41: #endif",
      "42: #ifdef HAVE_SECURITY_PAM_MODULES_H",
      "43: #include <security/pam_modules.h>",
      "44: #endif",
      "48: struct _ykpam_privs {",
      "49:   uid_t saved_euid;",
      "50:   gid_t saved_egid;",
      "51:   gid_t *saved_groups;",
      "52:   int saved_groups_length;",
      "53:   FILE *debug_file;",
      "54: };",
      "56: #define PAM_MODUTIL_DEF_PRIVS(n) \\",
      "57:   gid_t n##_saved_groups[SAVED_GROUPS_MAX_LEN]; \\",
      "58:   struct _ykpam_privs n = {-1, -1, n##_saved_groups, SAVED_GROUPS_MAX_LEN, cfg->debug_file}",
      "60: int pam_modutil_drop_priv(pam_handle_t *, struct _ykpam_privs *, struct passwd *);",
      "61: int pam_modutil_regain_priv(pam_handle_t *, struct _ykpam_privs *);",
      "63: #endif",
      "64: #endif",
      "",
      "---------------"
    ],
    "pam-u2f.c||pam-u2f.c": [
      "File: pam-u2f.c -> pam-u2f.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: #include <errno.h>",
      "22: #include \"util.h\"",
      "25: #ifndef HAVE_SECURE_GETENV",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23: #include \"drop_privs.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "148:   int retval = PAM_IGNORE;",
      "149:   device_t *devices = NULL;",
      "150:   unsigned n_devices = 0;",
      "152:   int should_free_origin = 0;",
      "153:   int should_free_appid = 0;",
      "154:   int should_free_auth_file = 0;",
      "155:   int should_free_authpending_file = 0;",
      "157:   parse_cfg(flags, argc, argv, cfg);",
      "",
      "[Removed Lines]",
      "151:   int openasuser;",
      "",
      "[Added Lines]",
      "152:   int openasuser = 0;",
      "157:   PAM_MODUTIL_DEF_PRIVS(privs);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "235:         goto done;",
      "236:       }",
      "238:       snprintf(buf, authfile_dir_len,",
      "239:                \"%s/.config%s\", pw->pw_dir, DEFAULT_AUTHFILE);",
      "240:     } else {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "241:       openasuser = geteuid() == 0 ? 1 : 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "251:       snprintf(buf, authfile_dir_len,",
      "252:                \"%s%s\", authfile_dir, DEFAULT_AUTHFILE);",
      "253:     }",
      "258:     should_free_auth_file = 1;",
      "",
      "[Removed Lines]",
      "255:     DBG(\"Using default authentication file %s\", buf);",
      "",
      "[Added Lines]",
      "259:       if (!openasuser) {",
      "260:  DBG(\"WARNING: not dropping privileges when reading %s, please \"",
      "261:      \"consider setting openasuser=1 in the module configuration\", buf);",
      "262:       }",
      "265:     DBG(\"Using authentication file %s\", buf);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "261:     DBG(\"Using authentication file %s\", cfg->auth_file);",
      "262:   }",
      "265:   if (openasuser) {",
      "268:       retval = PAM_IGNORE;",
      "269:       goto done;",
      "270:     }",
      "272:   }",
      "273:   retval = get_devices_from_authfile(cfg->auth_file, user, cfg->max_devs,",
      "274:                                      cfg->debug, cfg->debug_file,",
      "275:                                      devices, &n_devices);",
      "276:   if (openasuser) {",
      "279:       retval = PAM_IGNORE;",
      "280:       goto done;",
      "281:     }",
      "283:   }",
      "285:   if (retval != 1) {",
      "",
      "[Removed Lines]",
      "264:   openasuser = geteuid() == 0 && cfg->openasuser;",
      "266:     if (seteuid(pw_s.pw_uid)) {",
      "267:       DBG(\"Unable to switch user to uid %i\", pw_s.pw_uid);",
      "271:     DBG(\"Switched to uid %i\", pw_s.pw_uid);",
      "277:     if (seteuid(0)) {",
      "278:       DBG(\"Unable to switch back to uid 0\");",
      "282:     DBG(\"Switched back to uid 0\");",
      "",
      "[Added Lines]",
      "274:   if (!openasuser) {",
      "275:     openasuser = geteuid() == 0 && cfg->openasuser;",
      "276:   }",
      "278:     DBG(\"Dropping privileges\");",
      "279:     if (pam_modutil_drop_priv(pamh, &privs, pw)) {",
      "280:       DBG(\"Unable to switch user to uid %i\", pw->pw_uid);",
      "284:     DBG(\"Switched to uid %i\", pw->pw_uid);",
      "290:     if (pam_modutil_regain_priv(pamh, &privs)) {",
      "291:       DBG(\"could not restore privileges\");",
      "295:     DBG(\"Restored privileges\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "781c31b05f7a741da49c9cea53a64998f3dc0484",
      "candidate_info": {
        "commit_hash": "781c31b05f7a741da49c9cea53a64998f3dc0484",
        "repo": "Yubico/pam-u2f",
        "commit_url": "https://github.com/Yubico/pam-u2f/commit/781c31b05f7a741da49c9cea53a64998f3dc0484",
        "files": [
          "drop_privs.h",
          "pam-u2f.c",
          "util.c",
          "util.h"
        ],
        "message": "Appease the formatting gods.",
        "before_after_code_files": [
          "drop_privs.h||drop_privs.h",
          "pam-u2f.c||pam-u2f.c",
          "util.c||util.c",
          "util.h||util.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drop_privs.h||drop_privs.h",
            "pam-u2f.c||pam-u2f.c"
          ],
          "candidate": [
            "drop_privs.h||drop_privs.h",
            "pam-u2f.c||pam-u2f.c"
          ]
        }
      },
      "candidate_diff": {
        "drop_privs.h||drop_privs.h": [
          "File: drop_privs.h -> drop_privs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #define PAM_MODUTIL_DEF_PRIVS(n)                                               \\",
          "57:   gid_t n##_saved_groups[SAVED_GROUPS_MAX_LEN];                                \\",
          "64:   }",
          "66: int pam_modutil_drop_priv(pam_handle_t *, struct _ykpam_privs *,",
          "",
          "[Removed Lines]",
          "58:   struct _ykpam_privs n = { \\",
          "59:       (uid_t)-1, \\",
          "60:       (gid_t)-1, \\",
          "61:       n##_saved_groups, \\",
          "62:       SAVED_GROUPS_MAX_LEN,     \\",
          "63:       cfg->debug_file, \\",
          "",
          "[Added Lines]",
          "58:   struct _ykpam_privs n = {                                                    \\",
          "59:     (uid_t) -1,           (gid_t) -1,      n##_saved_groups,                   \\",
          "60:     SAVED_GROUPS_MAX_LEN, cfg->debug_file,                                     \\",
          "",
          "---------------"
        ],
        "pam-u2f.c||pam-u2f.c": [
          "File: pam-u2f.c -> pam-u2f.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "429:     free(buf);",
          "430:     buf = NULL;",
          "431:   }",
          "433:   if (should_free_origin) {",
          "434:     free_const(cfg->origin);",
          "435:     cfg->origin = NULL;",
          "",
          "[Removed Lines]",
          "432: #define free_const(a) free((void *)(uintptr_t)(a))",
          "",
          "[Added Lines]",
          "432: #define free_const(a) free((void *) (uintptr_t)(a))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "474: }",
          "476: #ifdef PAM_MODULE_ENTRY",
          "478: #endif",
          "",
          "[Removed Lines]",
          "477: PAM_MODULE_ENTRY(\"pam_u2f\");",
          "",
          "[Added Lines]",
          "477: PAM_MODULE_ENTRY(\"pam_u2f\");",
          "",
          "---------------"
        ],
        "util.c||util.c": [
          "File: util.c -> util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1132: char *converse(pam_handle_t *pamh, int echocode, const char *prompt) {",
          "1133:   const struct pam_message msg = {.msg_style = echocode,",
          "1135:   const struct pam_message *msgs = &msg;",
          "1136:   struct pam_response *resp = NULL;",
          "1137:   int retval = _converse(pamh, 1, &msgs, &resp);",
          "",
          "[Removed Lines]",
          "1134:                                   .msg = (char *)(uintptr_t)prompt};",
          "",
          "[Added Lines]",
          "1134:                                   .msg = (char *) (uintptr_t) prompt};",
          "",
          "---------------"
        ],
        "util.h||util.h": [
          "File: util.h -> util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #if defined(DEBUG_PAM)",
          "26: #define D(file, ...) _debug(file, __FILE__, __LINE__, __func__, __VA_ARGS__)",
          "27: #else",
          "31: typedef struct {",
          "",
          "[Removed Lines]",
          "28: #define D(file, ...) ((void)0)",
          "",
          "[Added Lines]",
          "28: #define D(file, ...) ((void) 0)",
          "",
          "---------------"
        ]
      }
    }
  ]
}