{
  "cve_id": "CVE-2022-26490",
  "cve_desc": "st21nfca_connectivity_event_received in drivers/nfc/st21nfca/se.c in the Linux kernel through 5.16.12 has EVT_TRANSACTION buffer overflows because of untrusted length parameters.",
  "repo": "torvalds/linux",
  "patch_hash": "4fbcc1a4cb20fe26ad0225679c536c80f1648221",
  "patch_info": {
    "commit_hash": "4fbcc1a4cb20fe26ad0225679c536c80f1648221",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/4fbcc1a4cb20fe26ad0225679c536c80f1648221",
    "files": [
      "drivers/nfc/st21nfca/se.c"
    ],
    "message": "nfc: st21nfca: Fix potential buffer overflows in EVT_TRANSACTION\n\nIt appears that there are some buffer overflows in EVT_TRANSACTION.\nThis happens because the length parameters that are passed to memcpy\ncome directly from skb->data and are not guarded in any way.\n\nSigned-off-by: Jordy Zomer <jordy@pwning.systems>\nReviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "drivers/nfc/st21nfca/se.c||drivers/nfc/st21nfca/se.c"
    ]
  },
  "patch_diff": {
    "drivers/nfc/st21nfca/se.c||drivers/nfc/st21nfca/se.c": [
      "File: drivers/nfc/st21nfca/se.c -> drivers/nfc/st21nfca/se.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "316:    return -ENOMEM;",
      "318:   transaction->aid_len = skb->data[1];",
      "319:   memcpy(transaction->aid, &skb->data[2],",
      "320:          transaction->aid_len);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "321:   if (transaction->aid_len > sizeof(transaction->aid))",
      "322:    return -EINVAL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "325:    return -EPROTO;",
      "327:   transaction->params_len = skb->data[transaction->aid_len + 3];",
      "328:   memcpy(transaction->params, skb->data +",
      "329:          transaction->aid_len + 4, transaction->params_len);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "335:   if (transaction->params_len > ((skb->len - 2) - sizeof(struct nfc_evt_transaction)))",
      "336:    return -EINVAL;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "996419e0594abb311fb958553809f24f38e7abbe",
      "candidate_info": {
        "commit_hash": "996419e0594abb311fb958553809f24f38e7abbe",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/996419e0594abb311fb958553809f24f38e7abbe",
        "files": [
          "drivers/nfc/st21nfca/se.c"
        ],
        "message": "nfc: st21nfca: fix memory leaks in EVT_TRANSACTION handling\n\nError paths do not free previously allocated memory. Add devm_kfree() to\nthose failure paths.\n\nFixes: 26fc6c7f02cb (\"NFC: st21nfca: Add HCI transaction event support\")\nFixes: 4fbcc1a4cb20 (\"nfc: st21nfca: Fix potential buffer overflows in EVT_TRANSACTION\")\nCc: stable@vger.kernel.org\nSigned-off-by: Martin Faltesek <mfaltesek@google.com>\nReviewed-by: Guenter Roeck <groeck@chromium.org>\nReviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
        "before_after_code_files": [
          "drivers/nfc/st21nfca/se.c||drivers/nfc/st21nfca/se.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/nfc/st21nfca/se.c||drivers/nfc/st21nfca/se.c"
          ],
          "candidate": [
            "drivers/nfc/st21nfca/se.c||drivers/nfc/st21nfca/se.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/nfc/st21nfca/se.c||drivers/nfc/st21nfca/se.c": [
          "File: drivers/nfc/st21nfca/se.c -> drivers/nfc/st21nfca/se.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:   transaction->aid_len = skb->data[1];",
          "330:    return -EINVAL;",
          "332:   memcpy(transaction->aid, &skb->data[2],",
          "333:          transaction->aid_len);",
          "336:   if (skb->data[transaction->aid_len + 2] !=",
          "338:    return -EPROTO;",
          "340:   transaction->params_len = skb->data[transaction->aid_len + 3];",
          "344:    return -EINVAL;",
          "346:   memcpy(transaction->params, skb->data +",
          "347:          transaction->aid_len + 4, transaction->params_len);",
          "",
          "[Removed Lines]",
          "329:   if (transaction->aid_len > sizeof(transaction->aid))",
          "337:       NFC_EVT_TRANSACTION_PARAMS_TAG)",
          "343:   if (transaction->params_len > ((skb->len - 2) - sizeof(struct nfc_evt_transaction)))",
          "",
          "[Added Lines]",
          "329:   if (transaction->aid_len > sizeof(transaction->aid)) {",
          "330:    devm_kfree(dev, transaction);",
          "332:   }",
          "339:       NFC_EVT_TRANSACTION_PARAMS_TAG) {",
          "340:    devm_kfree(dev, transaction);",
          "342:   }",
          "347:   if (transaction->params_len > ((skb->len - 2) -",
          "348:       sizeof(struct nfc_evt_transaction))) {",
          "349:    devm_kfree(dev, transaction);",
          "351:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2e19b36593caed4c977c2f55aeba7408aeb2132",
      "candidate_info": {
        "commit_hash": "f2e19b36593caed4c977c2f55aeba7408aeb2132",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f2e19b36593caed4c977c2f55aeba7408aeb2132",
        "files": [
          "drivers/nfc/st21nfca/se.c"
        ],
        "message": "nfc: st21nfca: fix incorrect sizing calculations in EVT_TRANSACTION\n\nThe transaction buffer is allocated by using the size of the packet buf,\nand subtracting two which seem intended to remove the two tags which are\nnot present in the target structure. This calculation leads to under\ncounting memory because of differences between the packet contents and the\ntarget structure. The aid_len field is a u8 in the packet, but a u32 in\nthe structure, resulting in at least 3 bytes always being under counted.\nFurther, the aid data is a variable length field in the packet, but fixed\nin the structure, so if this field is less than the max, the difference is\nadded to the under counting.\n\nThe last validation check for transaction->params_len is also incorrect\nsince it employs the same accounting error.\n\nTo fix, perform validation checks progressively to safely reach the\nnext field, to determine the size of both buffers and verify both tags.\nOnce all validation checks pass, allocate the buffer and copy the data.\nThis eliminates freeing memory on the error path, as those checks are\nmoved ahead of memory allocation.\n\nFixes: 26fc6c7f02cb (\"NFC: st21nfca: Add HCI transaction event support\")\nFixes: 4fbcc1a4cb20 (\"nfc: st21nfca: Fix potential buffer overflows in EVT_TRANSACTION\")\nCc: stable@vger.kernel.org\nSigned-off-by: Martin Faltesek <mfaltesek@google.com>\nReviewed-by: Guenter Roeck <groeck@chromium.org>\nReviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
        "before_after_code_files": [
          "drivers/nfc/st21nfca/se.c||drivers/nfc/st21nfca/se.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/nfc/st21nfca/se.c||drivers/nfc/st21nfca/se.c"
          ],
          "candidate": [
            "drivers/nfc/st21nfca/se.c||drivers/nfc/st21nfca/se.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/nfc/st21nfca/se.c||drivers/nfc/st21nfca/se.c": [
          "File: drivers/nfc/st21nfca/se.c -> drivers/nfc/st21nfca/se.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "300:  int r = 0;",
          "301:  struct device *dev = &hdev->ndev->dev;",
          "302:  struct nfc_evt_transaction *transaction;",
          "304:  pr_debug(\"connectivity gate event: %x\\n\", event);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:  u32 aid_len;",
          "304:  u8 params_len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:   r = nfc_se_connectivity(hdev->ndev, host);",
          "309:  break;",
          "310:  case ST21NFCA_EVT_TRANSACTION:",
          "320:    return -EPROTO;",
          "341:    return -EPROTO;",
          "356:   r = nfc_se_transaction(hdev->ndev, host, transaction);",
          "357:  break;",
          "",
          "[Removed Lines]",
          "318:   if (skb->len < NFC_MIN_AID_LENGTH + 2 ||",
          "319:       skb->data[0] != NFC_EVT_TRANSACTION_AID_TAG)",
          "322:   transaction = devm_kzalloc(dev, skb->len - 2, GFP_KERNEL);",
          "323:   if (!transaction)",
          "324:    return -ENOMEM;",
          "326:   transaction->aid_len = skb->data[1];",
          "329:   if (transaction->aid_len > sizeof(transaction->aid)) {",
          "330:    devm_kfree(dev, transaction);",
          "331:    return -EINVAL;",
          "332:   }",
          "334:   memcpy(transaction->aid, &skb->data[2],",
          "335:          transaction->aid_len);",
          "338:   if (skb->data[transaction->aid_len + 2] !=",
          "339:       NFC_EVT_TRANSACTION_PARAMS_TAG) {",
          "340:    devm_kfree(dev, transaction);",
          "342:   }",
          "344:   transaction->params_len = skb->data[transaction->aid_len + 3];",
          "347:   if (transaction->params_len > ((skb->len - 2) -",
          "348:       sizeof(struct nfc_evt_transaction))) {",
          "349:    devm_kfree(dev, transaction);",
          "350:    return -EINVAL;",
          "351:   }",
          "353:   memcpy(transaction->params, skb->data +",
          "354:          transaction->aid_len + 4, transaction->params_len);",
          "",
          "[Added Lines]",
          "329:   if (skb->len < 2 || skb->data[0] != NFC_EVT_TRANSACTION_AID_TAG)",
          "332:   aid_len = skb->data[1];",
          "334:   if (skb->len < aid_len + 4 || aid_len > sizeof(transaction->aid))",
          "335:    return -EPROTO;",
          "337:   params_len = skb->data[aid_len + 3];",
          "342:   if ((skb->data[aid_len + 2] != NFC_EVT_TRANSACTION_PARAMS_TAG) ||",
          "343:       (skb->len < aid_len + 4 + params_len))",
          "346:   transaction = devm_kzalloc(dev, sizeof(*transaction) + params_len, GFP_KERNEL);",
          "347:   if (!transaction)",
          "348:    return -ENOMEM;",
          "350:   transaction->aid_len = aid_len;",
          "351:   transaction->params_len = params_len;",
          "353:   memcpy(transaction->aid, &skb->data[2], aid_len);",
          "354:   memcpy(transaction->params, &skb->data[aid_len + 4], params_len);",
          "",
          "---------------"
        ]
      }
    }
  ]
}