{
  "cve_id": "CVE-2019-7396",
  "cve_desc": "In ImageMagick before 7.0.8-25, a memory leak exists in ReadSIXELImage in coders/sixel.c.",
  "repo": "ImageMagick/ImageMagick",
  "patch_hash": "748a03651e5b138bcaf160d15133de2f4b1b89ce",
  "patch_info": {
    "commit_hash": "748a03651e5b138bcaf160d15133de2f4b1b89ce",
    "repo": "ImageMagick/ImageMagick",
    "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/748a03651e5b138bcaf160d15133de2f4b1b89ce",
    "files": [
      "coders/sixel.c"
    ],
    "message": "https://github.com/ImageMagick/ImageMagick/issues/1452",
    "before_after_code_files": [
      "coders/sixel.c||coders/sixel.c"
    ]
  },
  "patch_diff": {
    "coders/sixel.c||coders/sixel.c": [
      "File: coders/sixel.c -> coders/sixel.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1057:   sixel_buffer[length]='\\0';",
      "1059:     Decode SIXEL",
      "1061:   if (sixel_decode(image,(unsigned char *) sixel_buffer,&sixel_pixels,&image->columns,&image->rows,&sixel_palette,&image->colors,exception) == MagickFalse)",
      "1062:     {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ff60b014e1ac352dccfb86b0670b84ef86ca58b9",
      "candidate_info": {
        "commit_hash": "ff60b014e1ac352dccfb86b0670b84ef86ca58b9",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/ff60b014e1ac352dccfb86b0670b84ef86ca58b9",
        "files": [
          "MagickCore/option.c",
          "MagickCore/threshold.c",
          "MagickCore/threshold.h",
          "MagickWand/magick-image.c",
          "MagickWand/magick-image.h",
          "MagickWand/mogrify.c",
          "MagickWand/operation.c",
          "PerlMagick/Magick.xs",
          "PerlMagick/quantum/quantum.xs.in",
          "coders/sixel.c"
        ],
        "message": "...",
        "before_after_code_files": [
          "MagickCore/option.c||MagickCore/option.c",
          "MagickCore/threshold.c||MagickCore/threshold.c",
          "MagickCore/threshold.h||MagickCore/threshold.h",
          "MagickWand/magick-image.c||MagickWand/magick-image.c",
          "MagickWand/magick-image.h||MagickWand/magick-image.h",
          "MagickWand/mogrify.c||MagickWand/mogrify.c",
          "MagickWand/operation.c||MagickWand/operation.c",
          "PerlMagick/Magick.xs||PerlMagick/Magick.xs",
          "PerlMagick/quantum/quantum.xs.in||PerlMagick/quantum/quantum.xs.in",
          "coders/sixel.c||coders/sixel.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "coders/sixel.c||coders/sixel.c"
          ],
          "candidate": [
            "coders/sixel.c||coders/sixel.c"
          ]
        }
      },
      "candidate_diff": {
        "MagickCore/option.c||MagickCore/option.c": [
          "File: MagickCore/option.c -> MagickCore/option.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "341:     { \"  negate\", 0, UndefinedOptionFlag, MagickFalse },",
          "342:     { \"  noise\", 0, UndefinedOptionFlag, MagickFalse },",
          "343:     { \"  normalize\", 0, UndefinedOptionFlag, MagickFalse },",
          "345:     { \"  ordered-dither\", 0, UndefinedOptionFlag, MagickFalse },",
          "346:     { \"  otsu-threshold\", 0, UndefinedOptionFlag, MagickFalse },",
          "347:     { \"  paint\", 0, UndefinedOptionFlag, MagickFalse },",
          "",
          "[Removed Lines]",
          "344:     { \"  opaque\", 0, UndefinedOptionFlag, MagickFalse },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "895:     { \"+opaque\", 1L, SimpleOperatorFlag, MagickFalse },",
          "896:     { \"+ordered-dither\", 0L, DeprecateOptionFlag, MagickTrue },",
          "897:     { \"-ordered-dither\", 1L, SimpleOperatorFlag, MagickFalse },",
          "900:     { \"+otsu-threshold\", 0L, DeprecateOptionFlag | FireOptionFlag, MagickTrue },",
          "901:     { \"-otsu-threshold\", 0L, ListOperatorFlag | FireOptionFlag, MagickFalse },",
          "902:     { \"+page\", 0L, ImageInfoOptionFlag, MagickFalse },",
          "",
          "[Removed Lines]",
          "898:     { \"+orient\", 0L, ImageInfoOptionFlag, MagickFalse },",
          "899:     { \"-orient\", 1L, ImageInfoOptionFlag, MagickFalse },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MagickCore/threshold.c||MagickCore/threshold.c": [
          "File: MagickCore/threshold.c -> MagickCore/threshold.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1836: #if defined(MAGICKCORE_OPENMP_SUPPORT)",
          "1837:         #pragma omp atomic",
          "1838: #endif",
          "1998: #endif",
          "1999:         progress++;",
          "2000:         proceed=SetImageProgress(image,ThresholdImageTag,progress,image->rows);",
          "",
          "[Removed Lines]",
          "1839:         progress++;",
          "1840:         proceed=SetImageProgress(image,DitherImageTag,progress,image->rows);",
          "1841:         if (proceed == MagickFalse)",
          "1842:           status=MagickFalse;",
          "1843:       }",
          "1844:   }",
          "1845:   image_view=DestroyCacheView(image_view);",
          "1846:   map=DestroyThresholdMap(map);",
          "1847:   return(MagickTrue);",
          "1848: }",
          "1852: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "1853: %                                                                             %",
          "1854: %                                                                             %",
          "1855: %                                                                             %",
          "1856: %     O T S U T h r e s h o l d I m a g e                                     %",
          "1857: %                                                                             %",
          "1858: %                                                                             %",
          "1859: %                                                                             %",
          "1860: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "1861: %",
          "1862: %  OTSUThresholdImage() automatically performs clustering-based image",
          "1863: %  thresholding. The algorithm calculates the optimum threshold separates into",
          "1864: %  two classes so that their combined spread (intra-class variance) is minimal,",
          "1865: %  and their inter-class variance is maximal.",
          "1866: %",
          "1867: %  The format of the OTSUThresholdImage method is:",
          "1868: %",
          "1869: %      MagickBooleanType OTSUThresholdImage(Image *image,",
          "1870: %        ExceptionInfo *exception)",
          "1871: %",
          "1872: %  A description of each parameter follows:",
          "1873: %",
          "1874: %    o image: the image.",
          "1875: %",
          "1876: %    o exception: return any errors or warnings in this structure.",
          "1877: %",
          "1879: MagickExport MagickBooleanType OTSUThresholdImage(Image *image,",
          "1880:   ExceptionInfo *exception)",
          "1881: {",
          "1882: #define ThresholdImageTag  \"Threshold/Image\"",
          "1884:   CacheView",
          "1887:   GeometryInfo",
          "1888:     geometry_info;",
          "1890:   MagickBooleanType",
          "1891:     status;",
          "1893:   MagickOffsetType",
          "1894:     progress;",
          "1896:   PixelInfo",
          "1897:     threshold;",
          "1899:   MagickStatusType",
          "1900:     flags;",
          "1902:   ssize_t",
          "1903:     y;",
          "1905:   assert(image != (Image *) NULL);",
          "1906:   assert(image->signature == MagickCoreSignature);",
          "1907:   if (image->debug != MagickFalse)",
          "1908:     (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);",
          "1909:   if (SetImageStorageClass(image,DirectClass,exception) == MagickFalse)",
          "1910:     return(MagickFalse);",
          "1911:   if (IsGrayColorspace(image->colorspace) != MagickFalse)",
          "1912:     (void) TransformImageColorspace(image,sRGBColorspace,exception);",
          "1913:   GetPixelInfo(image,&threshold);",
          "1914:   flags=ParseGeometry(\"100\",&geometry_info);",
          "1915:   threshold.red=geometry_info.rho;",
          "1916:   threshold.green=geometry_info.rho;",
          "1917:   threshold.blue=geometry_info.rho;",
          "1918:   threshold.black=geometry_info.rho;",
          "1919:   threshold.alpha=100.0;",
          "1920:   if ((flags & SigmaValue) != 0)",
          "1921:     threshold.green=geometry_info.sigma;",
          "1922:   if ((flags & XiValue) != 0)",
          "1923:     threshold.blue=geometry_info.xi;",
          "1924:   if ((flags & PsiValue) != 0)",
          "1925:     threshold.alpha=geometry_info.psi;",
          "1926:   if (threshold.colorspace == CMYKColorspace)",
          "1927:     {",
          "1928:       if ((flags & PsiValue) != 0)",
          "1929:         threshold.black=geometry_info.psi;",
          "1930:       if ((flags & ChiValue) != 0)",
          "1931:         threshold.alpha=geometry_info.chi;",
          "1932:     }",
          "1933:   if ((flags & PercentValue) != 0)",
          "1934:     {",
          "1935:       threshold.red*=(MagickRealType) (QuantumRange/100.0);",
          "1936:       threshold.green*=(MagickRealType) (QuantumRange/100.0);",
          "1937:       threshold.blue*=(MagickRealType) (QuantumRange/100.0);",
          "1938:       threshold.black*=(MagickRealType) (QuantumRange/100.0);",
          "1939:       threshold.alpha*=(MagickRealType) (QuantumRange/100.0);",
          "1940:     }",
          "1942:     OTSU threshold image.",
          "1944:   status=MagickTrue;",
          "1945:   progress=0;",
          "1946:   image_view=AcquireAuthenticCacheView(image,exception);",
          "1947: #if defined(MAGICKCORE_OPENMP_SUPPORT)",
          "1948:   #pragma omp parallel for schedule(static) shared(progress,status) \\",
          "1949:     magick_number_threads(image,image,image->rows,1)",
          "1950: #endif",
          "1951:   for (y=0; y < (ssize_t) image->rows; y++)",
          "1952:   {",
          "1953:     register ssize_t",
          "1954:       x;",
          "1956:     register Quantum",
          "1959:     if (status == MagickFalse)",
          "1960:       continue;",
          "1961:     q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);",
          "1962:     if (q == (Quantum *) NULL)",
          "1963:       {",
          "1964:         status=MagickFalse;",
          "1965:         continue;",
          "1966:       }",
          "1967:     for (x=0; x < (ssize_t) image->columns; x++)",
          "1968:     {",
          "1969:       double",
          "1970:         pixel;",
          "1972:       register ssize_t",
          "1973:         i;",
          "1975:       pixel=GetPixelIntensity(image,q);",
          "1976:       for (i=0; i < (ssize_t) GetPixelChannels(image); i++)",
          "1977:       {",
          "1978:         PixelChannel channel = GetPixelChannelChannel(image,i);",
          "1979:         PixelTrait traits = GetPixelChannelTraits(image,channel);",
          "1980:         if ((traits & UpdatePixelTrait) == 0)",
          "1981:           continue;",
          "1982:         if (image->channel_mask != DefaultChannels)",
          "1983:           pixel=(double) q[i];",
          "1984:         if (pixel > GetPixelInfoChannel(&threshold,channel))",
          "1985:           q[i]=QuantumRange;",
          "1986:       }",
          "1987:       q+=GetPixelChannels(image);",
          "1988:     }",
          "1989:     if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)",
          "1990:       status=MagickFalse;",
          "1991:     if (image->progress_monitor != (MagickProgressMonitor) NULL)",
          "1992:       {",
          "1993:         MagickBooleanType",
          "1994:           proceed;",
          "1996: #if defined(MAGICKCORE_OPENMP_SUPPORT)",
          "1997:         #pragma omp atomic",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MagickCore/threshold.h||MagickCore/threshold.h": [
          "File: MagickCore/threshold.h -> MagickCore/threshold.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:   ClampImage(Image *,ExceptionInfo *),",
          "49:   ListThresholdMaps(FILE *,ExceptionInfo *),",
          "50:   OrderedDitherImage(Image *,const char *,ExceptionInfo *),",
          "52:   PerceptibleImage(Image *,const double,ExceptionInfo *),",
          "53:   RandomThresholdImage(Image *,const double,const double,ExceptionInfo *),",
          "54:   RangeThresholdImage(Image *,const double,const double,const double,",
          "",
          "[Removed Lines]",
          "51:   OTSUThresholdImage(Image *,ExceptionInfo *),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MagickWand/magick-image.c||MagickWand/magick-image.c": [
          "File: MagickWand/magick-image.c -> MagickWand/magick-image.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7559:   PixelGetMagickColor(fill,&fill_pixel);",
          "7560:   wand->images->fuzz=fuzz;",
          "7561:   status=OpaquePaintImage(wand->images,&target_pixel,&fill_pixel,invert,",
          "7599:   if (wand->debug != MagickFalse)",
          "7600:     (void) LogMagickEvent(WandEvent,GetMagickModule(),\"%s\",wand->name);",
          "7601:   if (wand->images == (Image *) NULL)",
          "",
          "[Removed Lines]",
          "7562:     wand->exception);",
          "7563:   return(status);",
          "7564: }",
          "7568: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "7569: %                                                                             %",
          "7570: %                                                                             %",
          "7571: %                                                                             %",
          "7572: %   M a g i c k O p t i m i z e I m a g e L a y e r s                         %",
          "7573: %                                                                             %",
          "7574: %                                                                             %",
          "7575: %                                                                             %",
          "7576: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "7577: %",
          "7578: %  MagickOptimizeImageLayers() compares each image the GIF disposed forms of the",
          "7579: %  previous image in the sequence.  From this it attempts to select the",
          "7580: %  smallest cropped image to replace each frame, while preserving the results",
          "7581: %  of the animation.",
          "7582: %",
          "7583: %  The format of the MagickOptimizeImageLayers method is:",
          "7584: %",
          "7585: %      MagickWand *MagickOptimizeImageLayers(MagickWand *wand)",
          "7586: %",
          "7587: %  A description of each parameter follows:",
          "7588: %",
          "7589: %    o wand: the magick wand.",
          "7590: %",
          "7592: WandExport MagickWand *MagickOptimizeImageLayers(MagickWand *wand)",
          "7593: {",
          "7594:   Image",
          "7597:   assert(wand != (MagickWand *) NULL);",
          "7598:   assert(wand->signature == MagickWandSignature);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MagickWand/magick-image.h||MagickWand/magick-image.h": [
          "File: MagickWand/magick-image.h -> MagickWand/magick-image.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "208:     const double,const MagickBooleanType),",
          "209:   MagickOptimizeImageTransparency(MagickWand *),",
          "210:   MagickOrderedDitherImage(MagickWand *,const char *),",
          "212:   MagickTransparentPaintImage(MagickWand *,const PixelWand *,",
          "213:     const double,const double,const MagickBooleanType invert),",
          "214:   MagickPingImage(MagickWand *,const char *),",
          "",
          "[Removed Lines]",
          "211:   MagickOTSUThresholdImage(MagickWand *),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MagickWand/mogrify.c||MagickWand/mogrify.c": [
          "File: MagickWand/mogrify.c -> MagickWand/mogrify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2336:             break;",
          "2337:           }",
          "2338:         if (LocaleCompare(\"ordered-dither\",option+1) == 0)",
          "2345:           {",
          "2346:             (void) SyncImageSettings(mogrify_info,*image,exception);",
          "2347:             (void) OTSUThresholdImage(*image,exception);",
          "",
          "[Removed Lines]",
          "2339:           {",
          "2340:             (void) SyncImageSettings(mogrify_info,*image,exception);",
          "2341:             (void) OrderedDitherImage(*image,argv[i+1],exception);",
          "2342:             break;",
          "2343:           }",
          "2344:         if (LocaleCompare(\"otsu-threshold\",option+1) == 0)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5629:             if (i == (ssize_t) argc)",
          "5630:               ThrowMogrifyException(OptionError,\"MissingArgument\",option);",
          "5631:             orientation=ParseCommandOption(MagickOrientationOptions,MagickFalse,",
          "5634:               ThrowMogrifyException(OptionError,\"UnrecognizedImageOrientation\",",
          "5635:                 argv[i]);",
          "5636:             break;",
          "",
          "[Removed Lines]",
          "5632:               argv[i]);",
          "5633:             if (orientation < 0)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MagickWand/operation.c||MagickWand/operation.c": [
          "File: MagickWand/operation.c -> MagickWand/operation.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2895:           (void) OpaquePaintImage(_image,&target,&_draw_info->fill,IsPlusOp,",
          "2896:                _exception);",
          "2897:           break;",
          "2903:         }",
          "2904:       if (LocaleCompare(\"otsu-threshold\",option+1) == 0)",
          "2905:         {",
          "",
          "[Removed Lines]",
          "2898:         }",
          "2899:       if (LocaleCompare(\"ordered-dither\",option+1) == 0)",
          "2900:         {",
          "2901:           (void) OrderedDitherImage(_image,arg1,_exception);",
          "2902:           break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "PerlMagick/Magick.xs||PerlMagick/Magick.xs": [
          "File: PerlMagick/Magick.xs -> PerlMagick/Magick.xs",
          "--- Hunk 1 ---",
          "[Context before]",
          "575:     { \"RangeThreshold\", { {\"geometry\", StringReference},",
          "576:       {\"low-black\", RealReference}, {\"low-white\", RealReference},",
          "577:       {\"high-white\", RealReference}, {\"high-black\", RealReference},",
          "579:     { \"CLAHE\", { {\"geometry\", StringReference}, {\"width\", IntegerReference},",
          "580:       {\"height\", IntegerReference}, {\"number-bins\", IntegerReference},",
          "581:       {\"clip-limit\", RealReference} } },",
          "",
          "[Removed Lines]",
          "578:       {\"channel\", MagickChannelOptions} } },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7648:     AutoGamma          = 253",
          "7649:     AutoGammaImage     = 254",
          "7650:     AutoLevel          = 255",
          "7653:     LevelImageColors   = 258",
          "7654:     Clamp              = 259",
          "7655:     ClampImage         = 260",
          "",
          "[Removed Lines]",
          "7651:     AutoLevelImage     = 256",
          "7652:     LevelColors        = 257",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "11504:                 &geometry_info);",
          "11505:               if ((flags & SigmaValue) == 0)",
          "11506:                 geometry_info.sigma=geometry_info.rho;",
          "11507:               if ((flags & XiValue) == 0)",
          "11517:             geometry_info.xi=argument_list[3].real_reference;",
          "11518:           if (attribute_flag[4] != 0)",
          "11519:             geometry_info.psi=argument_list[4].real_reference;",
          "",
          "[Removed Lines]",
          "11508:                 geometry_info.xi=geometry_info.sigma;",
          "11509:               if ((flags & PsiValue) == 0)",
          "11510:                 geometry_info.psi=geometry_info.xi;",
          "11511:             }",
          "11512:           if (attribute_flag[1] != 0)",
          "11513:             geometry_info.rho=argument_list[1].real_reference;",
          "11514:           if (attribute_flag[2] != 0)",
          "11515:             geometry_info.sigma=argument_list[2].real_reference;",
          "11516:           if (attribute_flag[3] != 0)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "PerlMagick/quantum/quantum.xs.in||PerlMagick/quantum/quantum.xs.in": [
          "File: PerlMagick/quantum/quantum.xs.in -> PerlMagick/quantum/quantum.xs.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "575:     { \"RangeThreshold\", { {\"geometry\", StringReference},",
          "576:       {\"low-black\", RealReference}, {\"low-white\", RealReference},",
          "577:       {\"high-white\", RealReference}, {\"high-black\", RealReference},",
          "579:     { \"CLAHE\", { {\"geometry\", StringReference}, {\"width\", IntegerReference},",
          "580:       {\"height\", IntegerReference}, {\"number-bins\", IntegerReference},",
          "581:       {\"clip-limit\", RealReference} } },",
          "",
          "[Removed Lines]",
          "578:       {\"channel\", MagickChannelOptions} } },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7647:     AutoGamma          = 253",
          "7648:     AutoGammaImage     = 254",
          "7649:     AutoLevel          = 255",
          "7652:     LevelImageColors   = 258",
          "7653:     Clamp              = 259",
          "7654:     ClampImage         = 260",
          "",
          "[Removed Lines]",
          "7650:     AutoLevelImage     = 256",
          "7651:     LevelColors        = 257",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "11510:                 &geometry_info);",
          "11511:               if ((flags & SigmaValue) == 0)",
          "11512:                 geometry_info.sigma=geometry_info.rho;",
          "11513:               if ((flags & XiValue) == 0)",
          "11523:             geometry_info.xi=argument_list[3].real_reference;",
          "11524:           if (attribute_flag[4] != 0)",
          "11525:             geometry_info.psi=argument_list[4].real_reference;",
          "",
          "[Removed Lines]",
          "11514:                 geometry_info.xi=geometry_info.sigma;",
          "11515:               if ((flags & PsiValue) == 0)",
          "11516:                 geometry_info.psi=geometry_info.xi;",
          "11517:             }",
          "11518:           if (attribute_flag[1] != 0)",
          "11519:             geometry_info.rho=argument_list[1].real_reference;",
          "11520:           if (attribute_flag[2] != 0)",
          "11521:             geometry_info.sigma=argument_list[2].real_reference;",
          "11522:           if (attribute_flag[3] != 0)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "coders/sixel.c||coders/sixel.c": [
          "File: coders/sixel.c -> coders/sixel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1058:   sixel_buffer[length]='\\0';",
          "1060:     Decode SIXEL",
          "1062:   if (sixel_decode(image,(unsigned char *) sixel_buffer,&sixel_pixels,&image->columns,&image->rows,&sixel_palette,&image->colors,exception) == MagickFalse)",
          "1063:     {",
          "1064:       sixel_buffer=(char *) RelinquishMagickMemory(sixel_buffer);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1062:   if (sixel_decode(image,(unsigned char *) sixel_buffer,&sixel_pixels,&image->columns,&image->rows,&sixel_palette,&image->colors,exception) == MagickFalse)",
          "",
          "---------------"
        ]
      }
    }
  ]
}