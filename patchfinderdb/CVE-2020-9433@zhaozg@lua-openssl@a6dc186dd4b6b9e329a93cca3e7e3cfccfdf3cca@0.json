{
  "cve_id": "CVE-2020-9433",
  "cve_desc": "openssl_x509_check_email in lua-openssl 0.7.7-1 mishandles X.509 certificate validation because it uses lua_pushboolean for certain non-boolean return values.",
  "repo": "zhaozg/lua-openssl",
  "patch_hash": "a6dc186dd4b6b9e329a93cca3e7e3cfccfdf3cca",
  "patch_info": {
    "commit_hash": "a6dc186dd4b6b9e329a93cca3e7e3cfccfdf3cca",
    "repo": "zhaozg/lua-openssl",
    "commit_url": "https://github.com/zhaozg/lua-openssl/commit/a6dc186dd4b6b9e329a93cca3e7e3cfccfdf3cca",
    "files": [
      "src/x509.c"
    ],
    "message": "fix security: GSL-2020-026",
    "before_after_code_files": [
      "src/x509.c||src/x509.c"
    ]
  },
  "patch_diff": {
    "src/x509.c||src/x509.c": [
      "File: src/x509.c -> src/x509.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "751:   }",
      "752: }",
      "754: #if OPENSSL_VERSION_NUMBER > 0x10002000L",
      "756: check x509 for host (only for openssl 1.0.2 or greater)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "755: The functions return 1 for a successful match, 0 for a failed match and -1 for",
      "756: an internal error: typically a memory allocation failure or an ASN.1 decoding",
      "757: error.",
      "759: All functions can also return -2 if the input is malformed. For example,",
      "760: X509_check_host() returns -2 if the provided name contains embedded NULs.",
      "762: static int openssl_push_check_result(lua_State *L, int ret, const char* name)",
      "763: {",
      "764:   switch (ret)",
      "765:   {",
      "766:   case 1:",
      "767:     lua_pushboolean(L, 1);",
      "768:     if (name)",
      "769:     {",
      "770:       lua_pushstring(L, name);",
      "771:       ret = 2;",
      "772:     }",
      "773:     break;",
      "774:   case 0:",
      "775:     lua_pushboolean(L, 0);",
      "776:     ret = 1;",
      "777:     break;",
      "778:   case -1:",
      "779:     lua_pushnil(L);",
      "780:     lua_pushliteral(L, \"internal\");",
      "781:     ret = 2;",
      "782:   case -2:",
      "783:     lua_pushnil(L);",
      "784:     lua_pushliteral(L, \"malformed\");",
      "785:     ret = 2;",
      "786:   default:",
      "787:     lua_pushnil(L);",
      "788:     lua_pushinteger(L, ret);",
      "789:     ret = 2;",
      "790:   }",
      "791:   return ret;",
      "792: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "761: static LUA_FUNCTION(openssl_x509_check_host)",
      "762: {",
      "763:   X509 * cert = CHECK_OBJECT(1, X509, \"openssl.x509\");",
      "774: }",
      "776: check x509 for email address (only for openssl 1.0.2 or greater)",
      "777: @tparam string email to check for match match with x509 subject",
      "",
      "[Removed Lines]",
      "764:   if (lua_isstring(L, 2))",
      "765:   {",
      "766:     const char *hostname = lua_tostring(L, 2);",
      "767:     lua_pushboolean(L, X509_check_host(cert, hostname, strlen(hostname), 0, NULL));",
      "768:   }",
      "769:   else",
      "770:   {",
      "771:     lua_pushboolean(L, 0);",
      "772:   }",
      "773:   return 1;",
      "",
      "[Added Lines]",
      "804:   size_t sz;",
      "805:   const char* hostname = luaL_checklstring(L, 2, &sz);",
      "806:   int flags = luaL_optint(L, 3, 0);",
      "807:   char *peer = NULL;",
      "809:   int ret = X509_check_host(cert, hostname, sz, flags, &peer);",
      "810:   ret = openssl_push_check_result(L, ret, peer);",
      "811:   OPENSSL_free(peer);",
      "812:   return ret;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "781: static LUA_FUNCTION(openssl_x509_check_email)",
      "782: {",
      "783:   X509 * cert = CHECK_OBJECT(1, X509, \"openssl.x509\");",
      "794: }",
      "",
      "[Removed Lines]",
      "784:   if (lua_isstring(L, 2))",
      "785:   {",
      "786:     const char *email = lua_tostring(L, 2);",
      "787:     lua_pushboolean(L, X509_check_email(cert, email, strlen(email), 0));",
      "788:   }",
      "789:   else",
      "790:   {",
      "791:     lua_pushboolean(L, 0);",
      "792:   }",
      "793:   return 1;",
      "",
      "[Added Lines]",
      "824:   size_t sz;",
      "825:   const char *email = luaL_checklstring(L, 2, &sz);",
      "826:   int flags = luaL_optint(L, 3, 0);",
      "827:   int ret = X509_check_email(cert, email, sz, flags);",
      "828:   return openssl_push_check_result(L, ret, NULL);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "799: @tparam string ip to check for match match with x509 subject",
      "800: @treturn boolean result true if host is present and matches the certificate",
      "803: {",
      "804:   X509 * cert = CHECK_OBJECT(1, X509, \"openssl.x509\");",
      "815: }",
      "816: #endif",
      "",
      "[Removed Lines]",
      "802: static LUA_FUNCTION(openssl_x509_check_ip_asc)",
      "805:   if (lua_isstring(L, 2))",
      "806:   {",
      "807:     const char *ip_asc = lua_tostring(L, 2);",
      "808:     lua_pushboolean(L, X509_check_ip_asc(cert, ip_asc, 0));",
      "809:   }",
      "810:   else",
      "811:   {",
      "812:     lua_pushboolean(L, 0);",
      "813:   }",
      "814:   return 1;",
      "",
      "[Added Lines]",
      "837: static LUA_FUNCTION(openssl_x509_check_ip)",
      "840:   size_t sz;",
      "841:   const char *ip = luaL_checklstring(L, 2, &sz);",
      "842:   int flags = luaL_optint(L, 3, 0);",
      "843:   int ret = X509_check_ip(cert, (const unsigned char*)ip, sz, flags);",
      "844:   return openssl_push_check_result(L, ret, NULL);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1360: #if OPENSSL_VERSION_NUMBER > 0x10002000L",
      "1361:   {\"check_host\",  openssl_x509_check_host},",
      "1362:   {\"check_email\", openssl_x509_check_email},",
      "1364: #endif",
      "1365:   {\"pubkey\",      openssl_x509_public_key},",
      "1366:   {\"version\",     openssl_x509_version},",
      "",
      "[Removed Lines]",
      "1363:   {\"check_ip_asc\", openssl_x509_check_ip_asc},",
      "",
      "[Added Lines]",
      "1393:   {\"check_ip_asc\", openssl_x509_check_ip},",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1384:   {NULL,      NULL},",
      "1385: };",
      "1387: int luaopen_x509(lua_State *L)",
      "1388: {",
      "1389:   auxiliar_newclass(L, \"openssl.x509\", x509_funcs);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1417: #if OPENSSL_VERSION_NUMBER > 0x10002000L",
      "1418: static LuaL_Enumeration check_flags_const[] =",
      "1419: {",
      "1420: #define DEFINE_ENUM(x)  \\",
      "1421:   {#x,  X509_CHECK_FLAG_##x}",
      "1422:   DEFINE_ENUM(ALWAYS_CHECK_SUBJECT),",
      "1423: #if OPENSSL_VERSION_NUMBER > 0x10100000L",
      "1424:   DEFINE_ENUM(NEVER_CHECK_SUBJECT),",
      "1425: #endif",
      "1426:   DEFINE_ENUM(NO_WILDCARDS),",
      "1427:   DEFINE_ENUM(NO_PARTIAL_WILDCARDS),",
      "1428:   DEFINE_ENUM(MULTI_LABEL_WILDCARDS),",
      "1429:   DEFINE_ENUM(SINGLE_LABEL_SUBDOMAINS),",
      "1430: #undef DEFINE_ENUM",
      "1432:   {NULL,           0}",
      "1433: };",
      "1434: #endif",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1411:   lua_pushliteral(L, MYVERSION);",
      "1412:   lua_settable(L, -3);",
      "1414:   return 1;",
      "1415: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1463: #if OPENSSL_VERSION_NUMBER > 0x10002000L",
      "1464:   lua_pushliteral(L, \"check_flag\");",
      "1465:   lua_newtable(L);",
      "1466:   auxiliar_enumerate(L, -1, check_flags_const);",
      "1467:   lua_settable(L, -3);",
      "1468: #endif",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b4c47ff637ef02cf41e069559ab18abfb7036c8e",
      "candidate_info": {
        "commit_hash": "b4c47ff637ef02cf41e069559ab18abfb7036c8e",
        "repo": "zhaozg/lua-openssl",
        "commit_url": "https://github.com/zhaozg/lua-openssl/commit/b4c47ff637ef02cf41e069559ab18abfb7036c8e",
        "files": [
          "src/x509.c"
        ],
        "message": "fixup",
        "before_after_code_files": [
          "src/x509.c||src/x509.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/x509.c||src/x509.c"
          ],
          "candidate": [
            "src/x509.c||src/x509.c"
          ]
        }
      },
      "candidate_diff": {
        "src/x509.c||src/x509.c": [
          "File: src/x509.c -> src/x509.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1420: #define DEFINE_ENUM(x)  \\",
          "1421:   {#x,  X509_CHECK_FLAG_##x}",
          "1422:   DEFINE_ENUM(ALWAYS_CHECK_SUBJECT),",
          "1424:   DEFINE_ENUM(NEVER_CHECK_SUBJECT),",
          "1425: #endif",
          "1426:   DEFINE_ENUM(NO_WILDCARDS),",
          "",
          "[Removed Lines]",
          "1423: #if OPENSSL_VERSION_NUMBER > 0x10100000L",
          "",
          "[Added Lines]",
          "1423: #if OPENSSL_VERSION_NUMBER > 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)",
          "",
          "---------------"
        ]
      }
    }
  ]
}