{
  "cve_id": "CVE-2017-13083",
  "cve_desc": "Akeo Consulting Rufus prior to version 2.17.1187 does not adequately validate the integrity of updates downloaded over HTTP, allowing an attacker to easily convince a user to execute arbitrary code",
  "repo": "pbatard/rufus",
  "patch_hash": "c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
  "patch_info": {
    "commit_hash": "c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
    "repo": "pbatard/rufus",
    "commit_url": "https://github.com/pbatard/rufus/commit/c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
    "files": [
      "res/localization/rufus.loc",
      "src/pki.c",
      "src/rufus.rc",
      "src/stdlg.c"
    ],
    "message": "[pki] fix https://www.kb.cert.org/vuls/id/403768\n\n* This commit effectively fixes https://www.kb.cert.org/vuls/id/403768 (CVE-2017-13083) as\n  it is described per its revision 11, which is the latest revision at the time of this commit,\n  by disabling Windows prompts, enacted during signature validation, that allow the user to\n  bypass the intended signature verification checks.\n* It needs to be pointed out that the vulnerability (\"allow(ing) the use of a self-signed\n  certificate\"), which relies on the end-user actively ignoring a Windows prompt that tells\n  them that the update failed the signature validation whilst also advising against running it,\n  is being fully addressed, even as the update protocol remains HTTP.\n* It also need to be pointed out that the extended delay (48 hours) between the time the\n  vulnerability was reported and the moment it is fixed in our codebase has to do with\n  the fact that the reporter chose to deviate from standard security practices by not\n  disclosing the details of the vulnerability with us, be it publicly or privately,\n  before creating the cert.org report. The only advance notification we received was a\n  generic note about the use of HTTP vs HTTPS, which, as have established, is not\n  immediately relevant to addressing the reported vulnerability.\n* Closes #1009\n* Note: The other vulnerability scenario described towards the end of #1009, which\n  doesn't have to do with the \"lack of CA checking\", will be addressed separately.",
    "before_after_code_files": [
      "res/localization/rufus.loc||res/localization/rufus.loc",
      "src/pki.c||src/pki.c",
      "src/rufus.rc||src/rufus.rc",
      "src/stdlg.c||src/stdlg.c"
    ]
  },
  "patch_diff": {
    "res/localization/rufus.loc||res/localization/rufus.loc": [
      "File: res/localization/rufus.loc -> res/localization/rufus.loc",
      "--- Hunk 1 ---",
      "[Context before]",
      "487: # eg. \"Partitioning (MBR)...\"",
      "488: t MSG_238 \"Partitioning (%s)...\"",
      "489: t MSG_239 \"Deleting partitions...\"",
      "490: t MSG_241 \"Downloading: %0.1f%%\"",
      "491: t MSG_242 \"Failed to download file.\"",
      "492: t MSG_243 \"Checking for Rufus updates...\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: t MSG_240 \"The signature for the downloaded update can not be validated. This could mean that your \"",
      "491:  \"system is improperly configured for signature validation or indicate a malicious download.\\n\\n\"",
      "492:  \"The download will be deleted. Please check the log for more details.\"",
      "",
      "---------------"
    ],
    "src/pki.c||src/pki.c": [
      "File: src/pki.c -> src/pki.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:  static char error_string[64];",
      "54:  DWORD error_code = GetLastError();",
      "57:   return WindowsErrorString();",
      "59:  switch (error_code) {",
      "",
      "[Removed Lines]",
      "56:  if ((error_code >> 16) != 0x8009)",
      "",
      "[Added Lines]",
      "56:  if (((error_code >> 16) != 0x8009) && ((error_code >> 16) != 0x800B))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "113:   return \"Cannot complete usage check.\";",
      "114:  case CRYPT_E_NO_TRUSTED_SIGNER:",
      "115:   return \"None of the signers of the cryptographic message or certificate trust list is trusted.\";",
      "116:  default:",
      "117:   static_sprintf(error_string, \"Unknown PKI error 0x%08lX\", error_code);",
      "118:   return error_string;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "116:  case CERT_E_UNTRUSTEDROOT:",
      "117:   return \"The root certificate is not trusted.\";",
      "118:  case TRUST_E_NOSIGNATURE:",
      "119:   return \"Not digitally signed.\";",
      "120:  case TRUST_E_EXPLICIT_DISTRUST:",
      "121:   return \"One of the certificates used was marked as untrusted by the user.\";",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "268:  }",
      "270:  trust_data.cbStruct = sizeof(trust_data);",
      "273:  trust_data.fdwRevocationChecks = WTD_REVOKE_WHOLECHAIN;",
      "",
      "[Removed Lines]",
      "271:  trust_data.dwUIChoice = WTD_UI_ALL;",
      "",
      "[Added Lines]",
      "283:  trust_data.dwUIChoice = WTD_UI_NONE;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "279:  r = WinVerifyTrust(NULL, &guid_generic_verify, &trust_data);",
      "280:  safe_free(trust_file.pcwszFilePath);",
      "282:  return r;",
      "283: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "293:  switch (r) {",
      "294:  case ERROR_SUCCESS:",
      "295:   break;",
      "296:  case TRUST_E_NOSIGNATURE:",
      "298:   uprintf(\"PKI: File does not appear to be signed: %s\", WinPKIErrorString());",
      "299:   MessageBoxExU(hDlg, lmprintf(MSG_284), lmprintf(MSG_283), MB_OK | MB_ICONERROR | MB_IS_RTL, selected_langid);",
      "300:   break;",
      "301:  default:",
      "302:   uprintf(\"PKI: Failed to validate signature: %s\", WinPKIErrorString());",
      "303:   MessageBoxExU(hDlg, lmprintf(MSG_240), lmprintf(MSG_283), MB_OK | MB_ICONERROR | MB_IS_RTL, selected_langid);",
      "304:   break;",
      "305:  }",
      "",
      "---------------"
    ],
    "src/rufus.rc||src/rufus.rc": [
      "File: src/rufus.rc -> src/rufus.rc",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
      "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
      "35: EXSTYLE WS_EX_ACCEPTFILES",
      "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
      "38: BEGIN",
      "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
      "",
      "[Removed Lines]",
      "36: CAPTION \"Rufus 2.17.1186\"",
      "",
      "[Added Lines]",
      "36: CAPTION \"Rufus 2.17.1187\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "368: VS_VERSION_INFO VERSIONINFO",
      "371:  FILEFLAGSMASK 0x3fL",
      "372: #ifdef _DEBUG",
      "373:  FILEFLAGS 0x1L",
      "",
      "[Removed Lines]",
      "369:  FILEVERSION 2,17,1186,0",
      "370:  PRODUCTVERSION 2,17,1186,0",
      "",
      "[Added Lines]",
      "369:  FILEVERSION 2,17,1187,0",
      "370:  PRODUCTVERSION 2,17,1187,0",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "384:         BEGIN",
      "385:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
      "386:             VALUE \"FileDescription\", \"Rufus\"",
      "388:             VALUE \"InternalName\", \"Rufus\"",
      "389:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
      "390:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
      "391:             VALUE \"OriginalFilename\", \"rufus.exe\"",
      "392:             VALUE \"ProductName\", \"Rufus\"",
      "394:         END",
      "395:     END",
      "396:     BLOCK \"VarFileInfo\"",
      "",
      "[Removed Lines]",
      "387:             VALUE \"FileVersion\", \"2.17.1186\"",
      "393:             VALUE \"ProductVersion\", \"2.17.1186\"",
      "",
      "[Added Lines]",
      "387:             VALUE \"FileVersion\", \"2.17.1187\"",
      "393:             VALUE \"ProductVersion\", \"2.17.1187\"",
      "",
      "---------------"
    ],
    "src/stdlg.c||src/stdlg.c": [
      "File: src/stdlg.c -> src/stdlg.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674:    case 2:  // Launch newer version and close this one",
      "1675:     Sleep(1000); // Add a delay on account of antivirus scanners",
      "1678:      break;",
      "1680:     memset(&si, 0, sizeof(si));",
      "1681:     memset(&pi, 0, sizeof(pi));",
      "",
      "[Removed Lines]",
      "1677:     if (ValidateSignature(hDlg, filepath) != NO_ERROR)",
      "",
      "[Added Lines]",
      "1677:     if (ValidateSignature(hDlg, filepath) != NO_ERROR) {",
      "1679:      _unlinkU(filepath);",
      "1680:      EnableWindow(GetDlgItem(hDlg, IDC_DOWNLOAD), FALSE);",
      "1682:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e2481efcd9bf7db027a15d0934f9788979bd8af4",
      "candidate_info": {
        "commit_hash": "e2481efcd9bf7db027a15d0934f9788979bd8af4",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/e2481efcd9bf7db027a15d0934f9788979bd8af4",
        "files": [
          "res/localization/rufus.loc",
          "src/pki.c",
          "src/registry.h",
          "src/rufus.c",
          "src/rufus.h",
          "src/rufus.rc"
        ],
        "message": "[pki] application security improvements\n\n* Also clean up registry variables and add IsRegistryNode() call",
        "before_after_code_files": [
          "res/localization/rufus.loc||res/localization/rufus.loc",
          "src/pki.c||src/pki.c",
          "src/registry.h||src/registry.h",
          "src/rufus.c||src/rufus.c",
          "src/rufus.h||src/rufus.h",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/pki.c||src/pki.c",
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/pki.c||src/pki.c",
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "res/localization/rufus.loc||res/localization/rufus.loc": [
          "File: res/localization/rufus.loc -> res/localization/rufus.loc",
          "--- Hunk 1 ---",
          "[Context before]",
          "557: t MSG_292 \"Please select the version of Windows you want to install:\"",
          "558: t MSG_293 \"Unsupported Windows version\"",
          "559: t MSG_294 \"This version of Windows is no longer supported by Rufus.\"",
          "561: ################################################################################",
          "562: ############################# TRANSLATOR END COPY ##############################",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "560: t MSG_295 \"Warning: Unofficial version\"",
          "561: t MSG_296 \"This version of Rufus was NOT produced by its official developer(s).\\n\\nAre you sure you want to run it?\"",
          "",
          "---------------"
        ],
        "src/pki.c||src/pki.c": [
          "File: src/pki.c -> src/pki.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #define ENCODING (X509_ASN_ENCODING | PKCS_7_ASN_ENCODING)",
          "41: typedef struct {",
          "42:  LPWSTR lpszProgramName;",
          "",
          "[Removed Lines]",
          "39: const char* valid_cert_names[] = { \"Akeo Consulting\", \"Akeo Systems\", \"Pete Batard\" };",
          "",
          "[Added Lines]",
          "39: const char* cert_name[3] = { \"Akeo Consulting\", \"Akeo Systems\", \"Pete Batard\" };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: } SPROG_PUBLISHERINFO, *PSPROG_PUBLISHERINFO;",
          "49: {",
          "50:  static char szSubjectName[128];",
          "51:  char* p = NULL;",
          "",
          "[Removed Lines]",
          "48: static char* GetSignatureName(const char* path)",
          "",
          "[Added Lines]",
          "48: char* GetSignatureName(const char* path)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "148:   MessageBoxExU(hDlg, lmprintf(MSG_284), lmprintf(MSG_283), MB_OK | MB_ICONERROR | MB_IS_RTL, selected_langid);",
          "149:   return TRUST_E_NOSIGNATURE;",
          "150:  }",
          "155:    if ((len >= strlen(signature_name)) || isspace(signature_name[len]))",
          "156:     break;",
          "157:   }",
          "158:  }",
          "160:   uprintf(\"PKI: Signature '%s' is unexpected...\", signature_name);",
          "161:   if (MessageBoxExU(hDlg, lmprintf(MSG_285, signature_name), lmprintf(MSG_283),",
          "162:    MB_YESNO | MB_ICONWARNING | MB_IS_RTL, selected_langid) != IDYES)",
          "",
          "[Removed Lines]",
          "151:  for (i = 0; i < ARRAYSIZE(valid_cert_names); i++) {",
          "152:   len = strlen(valid_cert_names[i]);",
          "153:   if (strncmp(signature_name, valid_cert_names[i], len) == 0) {",
          "159:  if (i >= ARRAYSIZE(valid_cert_names)) {",
          "",
          "[Added Lines]",
          "151:  for (i = 0; i < ARRAYSIZE(cert_name); i++) {",
          "152:   len = strlen(cert_name[i]);",
          "153:   if (strncmp(signature_name, cert_name[i], len) == 0) {",
          "159:  if (i >= ARRAYSIZE(cert_name)) {",
          "",
          "---------------"
        ],
        "src/registry.h||src/registry.h": [
          "File: src/registry.h -> src/registry.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:  return ((s == ERROR_SUCCESS) || (s == ERROR_FILE_NOT_FOUND));",
          "51: }",
          "55: static __inline BOOL _GetRegistryKey(HKEY key_root, const char* key_name, DWORD reg_type, LPBYTE dest, DWORD dest_size)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: static __inline BOOL IsRegistryNode(HKEY key_root, const char* key_name)",
          "55: {",
          "56:  BOOL r;",
          "57:  HKEY hSoftware = NULL;",
          "58:  r = (RegOpenKeyExA(key_root, key_name, 0, KEY_READ, &hSoftware) == ERROR_SUCCESS);",
          "59:  if (hSoftware != NULL)",
          "60:   RegCloseKey(hSoftware);",
          "61:  return r;",
          "62: }",
          "",
          "---------------"
        ],
        "src/rufus.c||src/rufus.c": [
          "File: src/rufus.c -> src/rufus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: const char* cmdline_hogger = \"rufus.com\";",
          "63: const char* FileSystemLabel[FS_MAX] = { \"FAT\", \"FAT32\", \"NTFS\", \"UDF\", \"exFAT\", \"ReFS\" };",
          "65: const int nb_steps[FS_MAX] = { 5, 5, 12, 1, 10 };",
          "66: static const char* PartitionTypeLabel[2] = { \"MBR\", \"GPT\" };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64: const char* ep_reg = \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\";",
          "65: const char* vs_reg = \"Software\\\\Microsoft\\\\VisualStudio\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77: extern uint8_t* grub2_buf;",
          "78: extern long grub2_len;",
          "79: extern const char* old_c32_name[NB_OLD_C32];",
          "80: static int selection_default;",
          "81: static UINT_PTR UM_LANGUAGE_MENU_MAX = UM_LANGUAGE_MENU;",
          "82: static RECT relaunch_rc = { -65536, -65536, 0, 0};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: extern const char* cert_name[3];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2900:  int wait_for_mutex = 0;",
          "2901:  FILE* fd;",
          "2902:  BOOL attached_console = FALSE, external_loc_file = FALSE, lgp_set = FALSE, automount = TRUE;",
          "2904:  BYTE *loc_data;",
          "2905:  DWORD loc_size, size;",
          "2906:  char tmp_path[MAX_PATH] = \"\", loc_file[MAX_PATH] = \"\", ini_path[MAX_PATH] = \"\", ini_flags[] = \"rb\";",
          "",
          "[Removed Lines]",
          "2903:  BOOL disable_hogger = FALSE, previous_enable_HDDs = FALSE;",
          "",
          "[Added Lines]",
          "2906:  BOOL disable_hogger = FALSE, previous_enable_HDDs = FALSE, vc = FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2955:     if ((strcmp(argv[i], \"-g\") == 0) || (strcmp(argv[i], \"--gui\") == 0))",
          "2956:      disable_hogger = TRUE;",
          "2957:    }",
          "2961:    tmp = &argv[0][strlen(argv[0]) - 1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2961:    vc = IsRegistryNode(REGKEY_HKCU, vs_reg) || (safe_strcmp(GetSignatureName(argv[0]), cert_name[0]) == 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3105:  }",
          "3106:  selected_langid = get_language_id(selected_locale);",
          "3110:  if (!IsCurrentProcessElevated()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3111:  if (!vc) {",
          "3112:   get_loc_data_file(loc_file, selected_locale);",
          "3113:   right_to_left_mode = ((selected_locale->ctrl_id) & LOC_RIGHT_TO_LEFT);",
          "3114:   if (MessageBoxExU(NULL, lmprintf(MSG_296), lmprintf(MSG_295),",
          "3115:    MB_YESNO | MB_ICONWARNING | MB_IS_RTL | MB_SYSTEMMODAL, selected_langid) != IDYES)",
          "3116:    goto out;",
          "3117:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3156:  if (nWindowsVersion > WINDOWS_XP) {",
          "",
          "[Removed Lines]",
          "3154:  lgp_set = SetLGP(FALSE, &existing_key, \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\", \"NoDriveTypeAutorun\", 0x9e);",
          "",
          "[Added Lines]",
          "3165:  lgp_set = SetLGP(FALSE, &existing_key, ep_reg, \"NoDriveTypeAutorun\", 0x9e);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3441:   safe_free(argv);",
          "3442:  }",
          "3443:  if (lgp_set)",
          "3445:  if ((nWindowsVersion > WINDOWS_XP) && (!automount) && (!SetAutoMount(FALSE)))",
          "3446:   uprintf(\"Failed to restore AutoMount to disabled\");",
          "",
          "[Removed Lines]",
          "3444:   SetLGP(TRUE, &existing_key, \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\", \"NoDriveTypeAutorun\", 0);",
          "",
          "[Added Lines]",
          "3455:   SetLGP(TRUE, &existing_key, ep_reg, \"NoDriveTypeAutorun\", 0);",
          "",
          "---------------"
        ],
        "src/rufus.h||src/rufus.h": [
          "File: src/rufus.h -> src/rufus.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "472: extern BOOL AppendVHDFooter(const char* vhd_path);",
          "473: extern BOOL SetWinToGoIndex(void);",
          "474: extern int IsHDD(DWORD DriveIndex, uint16_t vid, uint16_t pid, const char* strid);",
          "475: extern LONG ValidateSignature(HWND hDlg, const char* path);",
          "476: extern BOOL IsFontAvailable(const char* font_name);",
          "477: extern BOOL WriteFileWithRetry(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "475: extern char* GetSignatureName(const char* path);",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.14.1087\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.14.1088\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336: VS_VERSION_INFO VERSIONINFO",
          "339:  FILEFLAGSMASK 0x3fL",
          "340: #ifdef _DEBUG",
          "341:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "337:  FILEVERSION 2,14,1087,0",
          "338:  PRODUCTVERSION 2,14,1087,0",
          "",
          "[Added Lines]",
          "337:  FILEVERSION 2,14,1088,0",
          "338:  PRODUCTVERSION 2,14,1088,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:         BEGIN",
          "353:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "354:             VALUE \"FileDescription\", \"Rufus\"",
          "356:             VALUE \"InternalName\", \"Rufus\"",
          "357:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "358:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "359:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "360:             VALUE \"ProductName\", \"Rufus\"",
          "362:         END",
          "363:     END",
          "364:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "355:             VALUE \"FileVersion\", \"2.14.1087\"",
          "361:             VALUE \"ProductVersion\", \"2.14.1087\"",
          "",
          "[Added Lines]",
          "355:             VALUE \"FileVersion\", \"2.14.1088\"",
          "361:             VALUE \"ProductVersion\", \"2.14.1088\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "42c158917c8cc29a88cf7a07c021062c907933e8",
      "candidate_info": {
        "commit_hash": "42c158917c8cc29a88cf7a07c021062c907933e8",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/42c158917c8cc29a88cf7a07c021062c907933e8",
        "files": [
          "src/checksum.c",
          "src/localization.c",
          "src/rufus.c",
          "src/rufus.rc"
        ],
        "message": "[ui] fix quick format not always being disabled for Large FAT32\n\n* Also remove no longer needed 'progress_in_use' variable",
        "before_after_code_files": [
          "src/checksum.c||src/checksum.c",
          "src/localization.c||src/localization.c",
          "src/rufus.c||src/rufus.c",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "src/checksum.c||src/checksum.c": [
          "File: src/checksum.c -> src/checksum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: HANDLE data_ready[CHECKSUM_MAX] = { 0 }, thread_ready[CHECKSUM_MAX] = { 0 };",
          "70: DWORD read_size[2];",
          "71: unsigned char ALIGNED(64) buffer[2][BUFFER_SIZE];",
          "",
          "[Removed Lines]",
          "72: extern BOOL progress_in_use;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "927:  bufnum = 0;",
          "928:  _bufnum = 0;",
          "929:  read_size[0] = 1; // Don't trigger the first loop break",
          "931:  for (rb = 0; ;rb += read_size[_bufnum]) {",
          "933:   if (GetTickCount64() > LastRefresh + MAX_REFRESH) {",
          "",
          "[Removed Lines]",
          "930:  progress_in_use = TRUE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "983:  r = 0;",
          "985: out:",
          "987:  for (i = 0; i < CHECKSUM_MAX; i++) {",
          "988:   if (sum_thread[i] != NULL)",
          "989:    TerminateThread(sum_thread[i], 1);",
          "",
          "[Removed Lines]",
          "986:  progress_in_use = FALSE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/localization.c||src/localization.c": [
          "File: src/localization.c -> src/localization.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: char* current_msg_table[MSG_MAX-MSG_000] = {\"%s\", 0};",
          "77: char** msg_table = NULL;",
          "81: static void mtab_destroy(BOOL reinit)",
          "82: {",
          "83:  size_t j;",
          "",
          "[Removed Lines]",
          "79: extern BOOL progress_in_use;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/rufus.c||src/rufus.c": [
          "File: src/rufus.c -> src/rufus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111: HWND hDeviceList, hPartitionScheme, hTargetSystem, hFileSystem, hClusterSize, hLabel, hBootType, hNBPasses, hLog = NULL;",
          "112: HWND hLogDialog = NULL, hProgress = NULL, hDiskID;",
          "113: BOOL use_own_c32[NB_OLD_C32] = {FALSE, FALSE}, mbr_selected_by_user = FALSE, display_togo_option = FALSE;",
          "115: BOOL enable_HDDs = FALSE, force_update = FALSE, enable_ntfs_compression = FALSE, no_confirmation_on_cancel = FALSE, lock_drive = TRUE;",
          "116: BOOL advanced_mode_device, advanced_mode_format, allow_dual_uefi_bios, detect_fakes, enable_vmdk, force_large_fat32, usb_debug, use_fake_units, preserve_timestamps;",
          "117: BOOL zero_drive = FALSE, list_non_usb_removable_drives = FALSE, disable_file_indexing, large_drive = FALSE, write_as_image = FALSE;",
          "",
          "[Removed Lines]",
          "114: BOOL iso_op_in_progress = FALSE, format_op_in_progress = FALSE, right_to_left_mode = FALSE, progress_in_use = FALSE, has_uefi_csm;",
          "",
          "[Added Lines]",
          "114: BOOL iso_op_in_progress = FALSE, format_op_in_progress = FALSE, right_to_left_mode = FALSE, has_uefi_csm;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "680:  EnableWindow(hDiskID, actual_enable_mbr);",
          "681: }",
          "683: static void EnableBootOptions(BOOL enable, BOOL remove_checkboxes)",
          "684: {",
          "685:  BOOL actual_enable_bb, actual_enable = enable;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "683: static void EnableQuickFormat(BOOL enable)",
          "684: {",
          "685:  HWND hCtrl = GetDlgItem(hMainDialog, IDC_QUICK_FORMAT);",
          "688:  if (((fs == FS_FAT32) && ((SelectedDrive.DiskSize > LARGE_FAT32_SIZE) || (force_large_fat32))) || (fs == FS_REFS)) {",
          "689:   if (IsWindowEnabled(hCtrl)) {",
          "690:    uQFChecked = IsChecked(IDC_QUICK_FORMAT);",
          "691:    CheckDlgButton(hMainDialog, IDC_QUICK_FORMAT, BST_CHECKED);",
          "692:    EnableWindow(hCtrl, FALSE);",
          "693:   }",
          "694:  } else {",
          "695:   if (!IsWindowEnabled(hCtrl)) {",
          "696:    CheckDlgButton(hMainDialog, IDC_QUICK_FORMAT, uQFChecked);",
          "697:    EnableWindow(hCtrl, enable);",
          "698:   }",
          "699:  }",
          "700: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "699:  EnableMBRBootOptions(actual_enable, remove_checkboxes);",
          "701:  EnableWindow(GetDlgItem(hMainDialog, IDC_LABEL), actual_enable);",
          "703:  EnableWindow(GetDlgItem(hMainDialog, IDC_BAD_BLOCKS), actual_enable_bb);",
          "704:  EnableWindow(GetDlgItem(hMainDialog, IDC_NB_PASSES), actual_enable_bb);",
          "705:  EnableWindow(GetDlgItem(hMainDialog, IDC_EXTENDED_LABEL), actual_enable);",
          "",
          "[Removed Lines]",
          "702:  EnableWindow(GetDlgItem(hMainDialog, IDC_QUICK_FORMAT), actual_enable);",
          "",
          "[Added Lines]",
          "721:  EnableQuickFormat(actual_enable);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3030:     break;",
          "3031:    fs = (int)ComboBox_GetItemData(hFileSystem, ComboBox_GetCurSel(hFileSystem));",
          "3032:    SetClusterSizes(fs);",
          "3046:    if (fs < 0) {",
          "3047:     EnableBootOptions(TRUE, TRUE);",
          "3048:     SetMBRProps();",
          "",
          "[Removed Lines]",
          "3034:    if ( ((fs == FS_FAT32) && ((SelectedDrive.DiskSize > LARGE_FAT32_SIZE) || (force_large_fat32))) || (fs == FS_REFS) ) {",
          "3035:     if (IsWindowEnabled(GetDlgItem(hMainDialog, IDC_QUICK_FORMAT))) {",
          "3036:      uQFChecked = IsChecked(IDC_QUICK_FORMAT);",
          "3037:      CheckDlgButton(hMainDialog, IDC_QUICK_FORMAT, BST_CHECKED);",
          "3038:      EnableWindow(GetDlgItem(hMainDialog, IDC_QUICK_FORMAT), FALSE);",
          "3039:     }",
          "3040:    } else {",
          "3041:     if (!IsWindowEnabled(GetDlgItem(hMainDialog, IDC_QUICK_FORMAT))) {",
          "3042:      CheckDlgButton(hMainDialog, IDC_QUICK_FORMAT, uQFChecked);",
          "3043:      EnableWindow(GetDlgItem(hMainDialog, IDC_QUICK_FORMAT), TRUE);",
          "3044:     }",
          "3045:    }",
          "",
          "[Added Lines]",
          "3052:    EnableQuickFormat(TRUE);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3470:   }",
          "3471:   SetTaskbarProgressState(TASKBAR_NORMAL);",
          "3472:   SetTaskbarProgressValue(0, MAX_PROGRESS);",
          "3474:   break;",
          "3476:  case UM_PROGRESS_EXIT:",
          "",
          "[Removed Lines]",
          "3473:   progress_in_use = TRUE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3489:   }",
          "3490:   SendMessage(hProgress, PBM_SETSTATE, (WPARAM)PBST_NORMAL, 0);",
          "3491:   SetTaskbarProgressState(TASKBAR_NORMAL);",
          "3493:   break;",
          "3495:  case UM_NO_UPDATE:",
          "",
          "[Removed Lines]",
          "3492:   progress_in_use = FALSE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 232, 326",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 9, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Drive Properties\",IDS_DRIVE_PROPERTIES_TXT,8,6,53,12,NOT WS_GROUP",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 3.0.1250\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 3.0.1251\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "373: VS_VERSION_INFO VERSIONINFO",
          "376:  FILEFLAGSMASK 0x3fL",
          "377: #ifdef _DEBUG",
          "378:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "374:  FILEVERSION 3,0,1250,0",
          "375:  PRODUCTVERSION 3,0,1250,0",
          "",
          "[Added Lines]",
          "374:  FILEVERSION 3,0,1251,0",
          "375:  PRODUCTVERSION 3,0,1251,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "389:         BEGIN",
          "390:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "391:             VALUE \"FileDescription\", \"Rufus\"",
          "393:             VALUE \"InternalName\", \"Rufus\"",
          "394:             VALUE \"LegalCopyright\", \"\ufffd 2011-2018 Pete Batard (GPL v3)\"",
          "395:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "396:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "397:             VALUE \"ProductName\", \"Rufus\"",
          "399:         END",
          "400:     END",
          "401:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "392:             VALUE \"FileVersion\", \"3.0.1250\"",
          "398:             VALUE \"ProductVersion\", \"3.0.1250\"",
          "",
          "[Added Lines]",
          "392:             VALUE \"FileVersion\", \"3.0.1251\"",
          "398:             VALUE \"ProductVersion\", \"3.0.1251\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "935c6fff23113cd67653fe6af6bc4d3ea3c4a902",
      "candidate_info": {
        "commit_hash": "935c6fff23113cd67653fe6af6bc4d3ea3c4a902",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/935c6fff23113cd67653fe6af6bc4d3ea3c4a902",
        "files": [
          "src/rufus.c",
          "src/rufus.rc"
        ],
        "message": "[ui] fix a typo and try to preserve user selected partition type\n\n* partition type and target type were mixed up on pressing 'Start'",
        "before_after_code_files": [
          "src/rufus.c||src/rufus.c",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "src/rufus.c||src/rufus.c": [
          "File: src/rufus.c -> src/rufus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: static BOOL app_changed_label = FALSE;",
          "66: static BOOL allowed_filesystem[FS_MAX] = { 0 };",
          "67: static int64_t last_iso_blocking_status;",
          "69: static int selection_default, row_height, advanced_device_section_height, advanced_format_section_height, image_index;",
          "70: static int device_vpos, format_vpos, status_vpos;",
          "71: static int ddh, bw, hw, fw; // DropDown Height, Main button width, half dropdown width, full dropdown width",
          "",
          "[Removed Lines]",
          "68: static int windows_to_go_selection = 0;",
          "",
          "[Added Lines]",
          "68: static int windows_to_go_selection = 0, selected_pt = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113: BOOL use_own_c32[NB_OLD_C32] = {FALSE, FALSE}, mbr_selected_by_user = FALSE, display_togo_option = FALSE;",
          "114: BOOL iso_op_in_progress = FALSE, format_op_in_progress = FALSE, right_to_left_mode = FALSE, has_uefi_csm;",
          "115: BOOL enable_HDDs = FALSE, force_update = FALSE, enable_ntfs_compression = FALSE, no_confirmation_on_cancel = FALSE, lock_drive = TRUE;",
          "117: BOOL zero_drive = FALSE, list_non_usb_removable_drives = FALSE, enable_file_indexing, large_drive = FALSE, write_as_image = FALSE;",
          "118: int dialog_showing = 0;",
          "119: uint16_t rufus_version[3], embedded_sl_version[2];",
          "",
          "[Removed Lines]",
          "116: BOOL advanced_mode_device, advanced_mode_format, allow_dual_uefi_bios, detect_fakes, enable_vmdk, force_large_fat32, usb_debug, use_fake_units, preserve_timestamps;",
          "",
          "[Added Lines]",
          "116: BOOL advanced_mode_device, advanced_mode_format, allow_dual_uefi_bios, detect_fakes, enable_vmdk, force_large_fat32, usb_debug;",
          "117: BOOL use_fake_units, preserve_timestamps;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "313:  if (!only_target) {",
          "316:   if (allowed_partition_scheme[PARTITION_STYLE_MBR])",
          "317:    IGNORE_RETVAL(ComboBox_SetItemData(hPartitionScheme,",
          "318:     ComboBox_AddStringU(hPartitionScheme, \"MBR\"), PARTITION_STYLE_MBR));",
          "",
          "[Removed Lines]",
          "315:   int preferred_ps = SelectedDrive.PartitionStyle;",
          "",
          "[Added Lines]",
          "316:   int preferred_pt = SelectedDrive.PartitionStyle;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "324:     ComboBox_AddStringU(hPartitionScheme, sfd_name), PARTITION_STYLE_SFD));",
          "326:   if (bt == BT_NON_BOOTABLE)",
          "328:   else if (bt == BT_UEFI_NTFS)",
          "330:   else if ((bt == BT_IMAGE) && (image_path != NULL) && (img_report.is_iso)) {",
          "331:    if (HAS_WINDOWS(img_report) && img_report.has_efi)",
          "333:    if (img_report.is_bootable_img)",
          "335:   }",
          "337:   pt = (int)ComboBox_GetItemData(hPartitionScheme, ComboBox_GetCurSel(hPartitionScheme));",
          "338:  }",
          "",
          "[Removed Lines]",
          "327:    preferred_ps = PARTITION_STYLE_MBR;",
          "329:    preferred_ps = PARTITION_STYLE_GPT;",
          "332:     preferred_ps = allow_dual_uefi_bios? PARTITION_STYLE_MBR : PARTITION_STYLE_GPT;",
          "334:     preferred_ps = PARTITION_STYLE_MBR;",
          "336:   SetComboEntry(hPartitionScheme, preferred_ps);",
          "",
          "[Added Lines]",
          "328:    preferred_pt = (selected_pt >= 0) ? selected_pt : PARTITION_STYLE_MBR;",
          "330:    preferred_pt = (selected_pt >= 0) ? selected_pt : PARTITION_STYLE_GPT;",
          "333:     preferred_pt = allow_dual_uefi_bios? PARTITION_STYLE_MBR : PARTITION_STYLE_GPT;",
          "335:     preferred_pt = (selected_pt >= 0) ? selected_pt : PARTITION_STYLE_MBR;",
          "337:   SetComboEntry(hPartitionScheme, preferred_pt);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3107:    SetPartitionSchemeAndTargetSystem(TRUE);",
          "3108:    SetFileSystemAndClusterSize(NULL);",
          "3109:    EnableMBRBootOptions(TRUE, FALSE);",
          "3110:    break;",
          "3111:   case IDC_FILE_SYSTEM:",
          "3112:    if (HIWORD(wParam) != CBN_SELCHANGE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3111:    selected_pt = pt;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3184:    }",
          "3185:    break;",
          "3186:   case IDC_START:",
          "3188:     return (INT_PTR)TRUE;",
          "3191:    bt = (int)ComboBox_GetItemData(hBootType, ComboBox_GetCurSel(hBootType));",
          "3194:    fs = (int)ComboBox_GetItemData(hFileSystem, ComboBox_GetCurSel(hFileSystem));",
          "3195:    write_as_image = FALSE;",
          "",
          "[Removed Lines]",
          "3187:    if (format_thid != NULL) {",
          "3189:    }",
          "3192:    tt = (int)ComboBox_GetItemData(hPartitionScheme, ComboBox_GetCurSel(hPartitionScheme));",
          "3193:    pt = (int)ComboBox_GetItemData(hTargetSystem, ComboBox_GetCurSel(hTargetSystem));",
          "",
          "[Added Lines]",
          "3189:    if (format_thid != NULL)",
          "3193:    pt = (int)ComboBox_GetItemData(hPartitionScheme, ComboBox_GetCurSel(hPartitionScheme));",
          "3194:    tt = (int)ComboBox_GetItemData(hTargetSystem, ComboBox_GetCurSel(hTargetSystem));",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 232, 326",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 9, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Drive Properties\",IDS_DRIVE_PROPERTIES_TXT,8,6,53,12,NOT WS_GROUP",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 3.0.1260\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 3.0.1261\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "373: VS_VERSION_INFO VERSIONINFO",
          "376:  FILEFLAGSMASK 0x3fL",
          "377: #ifdef _DEBUG",
          "378:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "374:  FILEVERSION 3,0,1260,0",
          "375:  PRODUCTVERSION 3,0,1260,0",
          "",
          "[Added Lines]",
          "374:  FILEVERSION 3,0,1261,0",
          "375:  PRODUCTVERSION 3,0,1261,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "389:         BEGIN",
          "390:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "391:             VALUE \"FileDescription\", \"Rufus\"",
          "393:             VALUE \"InternalName\", \"Rufus\"",
          "394:             VALUE \"LegalCopyright\", \"\ufffd 2011-2018 Pete Batard (GPL v3)\"",
          "395:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "396:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "397:             VALUE \"ProductName\", \"Rufus\"",
          "399:         END",
          "400:     END",
          "401:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "392:             VALUE \"FileVersion\", \"3.0.1260\"",
          "398:             VALUE \"ProductVersion\", \"3.0.1260\"",
          "",
          "[Added Lines]",
          "392:             VALUE \"FileVersion\", \"3.0.1261\"",
          "398:             VALUE \"ProductVersion\", \"3.0.1261\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d302d340f0e116864e730842a1d81e638cf8a0b",
      "candidate_info": {
        "commit_hash": "7d302d340f0e116864e730842a1d81e638cf8a0b",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/7d302d340f0e116864e730842a1d81e638cf8a0b",
        "files": [
          "configure",
          "configure.ac",
          "res/localization/rufus.loc",
          "src/dev.c",
          "src/format.c",
          "src/iso.c",
          "src/localization_data.h",
          "src/parser.c",
          "src/resource.h",
          "src/rufus.c",
          "src/rufus.h",
          "src/rufus.rc",
          "src/stdfn.c",
          "src/stdlg.c",
          "src/vhd.c"
        ],
        "message": "[togo] enable selection of Windows version\n\n* Closes #847\n* Also set rufus-next to 2.12",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "res/localization/rufus.loc||res/localization/rufus.loc",
          "src/dev.c||src/dev.c",
          "src/format.c||src/format.c",
          "src/iso.c||src/iso.c",
          "src/localization_data.h||src/localization_data.h",
          "src/parser.c||src/parser.c",
          "src/resource.h||src/resource.h",
          "src/rufus.c||src/rufus.c",
          "src/rufus.h||src/rufus.h",
          "src/rufus.rc||src/rufus.rc",
          "src/stdfn.c||src/stdfn.c",
          "src/stdlg.c||src/stdlg.c",
          "src/vhd.c||src/vhd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc",
            "src/stdlg.c||src/stdlg.c"
          ],
          "candidate": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc",
            "src/stdlg.c||src/stdlg.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: AM_INIT_AUTOMAKE([-Wno-portability foreign no-dist no-dependencies])",
          "3: AC_CONFIG_SRCDIR([src/rufus.c])",
          "4: AC_CONFIG_MACRO_DIR([m4])",
          "",
          "[Removed Lines]",
          "1: AC_INIT([rufus], [2.11], [https://github.com/pbatard/rufus/issues], [rufus], [http://rufus.akeo.ie])",
          "",
          "[Added Lines]",
          "1: AC_INIT([rufus], [2.12], [https://github.com/pbatard/rufus/issues], [rufus], [http://rufus.akeo.ie])",
          "",
          "---------------"
        ],
        "res/localization/rufus.loc||res/localization/rufus.loc": [
          "File: res/localization/rufus.loc -> res/localization/rufus.loc",
          "--- Hunk 1 ---",
          "[Context before]",
          "553: t MSG_288 \"Missing elevated privileges\"",
          "554: t MSG_289 \"This application can only run with elevated privileges\"",
          "555: t MSG_290 \"File Indexing\"",
          "557: ################################################################################",
          "558: ############################# TRANSLATOR END COPY ##############################",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "556: t MSG_291 \"Version selection\"",
          "557: t MSG_292 \"Please select the version of Windows you want to install:\"",
          "",
          "---------------"
        ],
        "src/dev.c||src/dev.c": [
          "File: src/dev.c -> src/dev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:  StrArrayClear(&DriveLabel);",
          "314:  StrArrayCreate(&dev_if_path, 128);",
          "318:  device_id = (char*)malloc(MAX_PATH);",
          "319:  if (device_id == NULL)",
          "",
          "[Removed Lines]",
          "316:  StrArrayAdd(&dev_if_path, \"\");",
          "",
          "[Added Lines]",
          "316:  StrArrayAdd(&dev_if_path, \"\", TRUE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "341:       if (CM_Get_Child(&device_inst, dev_info_data.DevInst, 0) == CR_SUCCESS) {",
          "342:        device_id[0] = 0;",
          "344:        uuprintf(\"  Hub[%d] = '%s'\", s, devint_detail_data->DevicePath);",
          "345:        if ((s>= 0) && (CM_Get_Device_IDA(device_inst, device_id, MAX_PATH, 0) == CR_SUCCESS)) {",
          "346:         if ((k = htab_hash(device_id, &htab_devid)) != 0) {",
          "",
          "[Removed Lines]",
          "343:        s = StrArrayAdd(&dev_if_path, devint_detail_data->DevicePath);",
          "",
          "[Added Lines]",
          "343:        s = StrArrayAdd(&dev_if_path, devint_detail_data->DevicePath, TRUE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "741:     }",
          "747:     IGNORE_RETVAL(ComboBox_SetItemData(hDeviceList, ComboBox_AddStringU(hDeviceList, entry), drive_index));",
          "748:     maxwidth = max(maxwidth, GetEntryWidth(hDeviceList, entry));",
          "",
          "[Removed Lines]",
          "744:     StrArrayAdd(&DriveID, buffer);",
          "745:     StrArrayAdd(&DriveLabel, label);",
          "",
          "[Added Lines]",
          "744:     StrArrayAdd(&DriveID, buffer, TRUE);",
          "745:     StrArrayAdd(&DriveLabel, label, TRUE);",
          "",
          "---------------"
        ],
        "src/format.c||src/format.c": [
          "File: src/format.c -> src/format.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1277:  static char san_policy_path[] = \"?:\\\\san_policy.xml\";",
          "1278: #endif",
          "1279:  static char unattend_path[] = \"?:\\\\Windows\\\\System32\\\\sysprep\\\\unattend.xml\";",
          "1280:  char *mounted_iso, *ms_efi = NULL, image[128], cmd[MAX_PATH];",
          "1281:  unsigned char *buffer;",
          "1282:  wchar_t wVolumeName[] = L\"?:\";",
          "1283:  DWORD bufsize;",
          "1284:  ULONG cluster_size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1280:  StrArray version_name, version_index;",
          "1282:  char tmp_path[MAX_PATH] = \"\", xml_file[MAX_PATH] = \"\";",
          "1284:  int i, index;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1305:   FormatStatus = ERROR_SEVERITY_ERROR|FAC(FACILITY_STORAGE)|APPERR(ERROR_ISO_EXTRACT);",
          "1306:   return FALSE;",
          "1307:  }",
          "1308:  uprintf(\"Mounted ISO as '%s'\", mounted_iso);",
          "1313:   uprintf(\"Failed to apply Windows To Go image\");",
          "1314:   if (!IS_ERROR(FormatStatus))",
          "1315:    FormatStatus = ERROR_SEVERITY_ERROR|FAC(FACILITY_STORAGE)|APPERR(ERROR_ISO_EXTRACT);",
          "",
          "[Removed Lines]",
          "1311:  static_sprintf(image, \"%s%s\", mounted_iso, &img_report.install_wim_path[2]);",
          "1312:  if (!WimApplyImage(image, 1, drive_name)) {",
          "",
          "[Added Lines]",
          "1311:  static_sprintf(image, \"%s%s\", mounted_iso, &img_report.install_wim_path[2]);",
          "1316:  if ((GetTempPathU(sizeof(tmp_path), tmp_path) == 0)",
          "1317:   || (GetTempFileNameU(tmp_path, APPLICATION_NAME, 0, xml_file) == 0)",
          "1318:   || (xml_file[0] == 0)) {",
          "1320:   safe_strcpy(xml_file, sizeof(xml_file), \".\\\\RufVXml.tmp\");",
          "1321:  }",
          "1323:  DeleteFileU(xml_file);",
          "1326:  if (!WimExtractFile_API(image, 0, \"[1].xml\", xml_file)) {",
          "1327:   uprintf(\"Failed to acquire WIM index\");",
          "1328:  }",
          "1329:  StrArrayCreate(&version_name, 16);",
          "1330:  StrArrayCreate(&version_index, 16);",
          "1331:  for (i = 0; (StrArrayAdd(&version_name, get_token_data_file_indexed(\"DISPLAYNAME\", xml_file, i+1), FALSE) >= 0) &&",
          "1332:   (StrArrayAdd(&version_index, get_token_data_file_indexed(\"IMAGE INDEX\", xml_file, i+1), FALSE) >= 0); i++);",
          "1333:  DeleteFileU(xml_file);",
          "1335:  if (i > 1)",
          "1336:   i = Selection(lmprintf(MSG_291), lmprintf(MSG_292), version_name.String, i);",
          "1337:  if (i <= 0) {",
          "1338:   uprintf(\"Cancelled by user\");",
          "1339:   FormatStatus = ERROR_SEVERITY_ERROR|FAC(FACILITY_STORAGE)|ERROR_CANCELLED;",
          "1340:   UnMountISO();",
          "1341:   StrArrayDestroy(&version_name);",
          "1342:   StrArrayDestroy(&version_index);",
          "1343:   return FALSE;",
          "1344:  } else if (i == 0) {",
          "1345:   index = 1;",
          "1346:  } else {",
          "1347:   index = atoi(version_index.String[i - 1]);",
          "1348:  }",
          "1349:  uprintf(\"Selected: '%s' (index %s)\", version_name.String[i - 1], version_index.String[i - 1]);",
          "1350:  StrArrayDestroy(&version_name);",
          "1351:  StrArrayDestroy(&version_index);",
          "1354:  if (!WimApplyImage(image, index, drive_name)) {",
          "",
          "---------------"
        ],
        "src/iso.c||src/iso.c": [
          "File: src/iso.c -> src/iso.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:   if (props->is_syslinux_cfg) {",
          "230:   }",
          "231:   for (i=0; i<ARRAYSIZE(isolinux_bin); i++) {",
          "232:    if (safe_stricmp(psz_basename, isolinux_bin[i]) == 0) {",
          "235:    }",
          "236:   }",
          "",
          "[Removed Lines]",
          "229:    StrArrayAdd(&config_path, psz_fullpath);",
          "234:     StrArrayAdd(&isolinux_path, psz_fullpath);",
          "",
          "[Added Lines]",
          "229:    StrArrayAdd(&config_path, psz_fullpath, TRUE);",
          "234:     StrArrayAdd(&isolinux_path, psz_fullpath, TRUE);",
          "",
          "---------------"
        ],
        "src/localization_data.h||src/localization_data.h": [
          "File: src/localization_data.h -> src/localization_data.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:  LOC_CTRL(IDC_SELECTION_LINE),",
          "97:  LOC_CTRL(IDC_SELECTION_CHOICE1),",
          "98:  LOC_CTRL(IDC_SELECTION_CHOICE2),",
          "99:  LOC_CTRL(IDS_DEVICE_TXT),",
          "100:  LOC_CTRL(IDS_PARTITION_TYPE_TXT),",
          "101:  LOC_CTRL(IDS_FILESYSTEM_TXT),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:  LOC_CTRL(IDC_SELECTION_CHOICE3),",
          "100:  LOC_CTRL(IDC_SELECTION_CHOICE4),",
          "101:  LOC_CTRL(IDC_SELECTION_CHOICE5),",
          "102:  LOC_CTRL(IDC_SELECTION_CHOICE6),",
          "103:  LOC_CTRL(IDC_SELECTION_CHOICE7),",
          "104:  LOC_CTRL(IDC_SELECTION_CHOICE8),",
          "105:  LOC_CTRL(IDC_SELECTION_CHOICE9),",
          "106:  LOC_CTRL(IDC_SELECTION_CHOICE10),",
          "107:  LOC_CTRL(IDC_SELECTION_CHOICE11),",
          "108:  LOC_CTRL(IDC_SELECTION_CHOICE12),",
          "109:  LOC_CTRL(IDC_SELECTION_CHOICE13),",
          "110:  LOC_CTRL(IDC_SELECTION_CHOICE14),",
          "111:  LOC_CTRL(IDC_SELECTION_CHOICE15),",
          "112:  LOC_CTRL(IDC_SELECTION_CHOICEMAX),",
          "",
          "---------------"
        ],
        "src/parser.c||src/parser.c": [
          "File: src/parser.c -> src/parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "577: static wchar_t* get_token_data_line(const wchar_t* wtoken, wchar_t* wline)",
          "578: {",
          "579:  size_t i, r;",
          "580:  BOOLEAN quoteth = FALSE;",
          "582:  if ((wtoken == NULL) || (wline == NULL) || (wline[0] == 0))",
          "583:   return NULL;",
          "585:  i = 0;",
          "588:  i += wcsspn(&wline[i], wspace);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "581:  BOOLEAN xml = FALSE;",
          "589:  i += wcsspn(&wline[i], wspace);",
          "590:  if (wline[i] == L'<')",
          "591:   i++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "598:  i += wcsspn(&wline[i], wspace);",
          "602:   return NULL;",
          "603:  i++;",
          "606:  i += wcsspn(&wline[i], wspace);",
          "",
          "[Removed Lines]",
          "601:  if (wline[i] != L'=')",
          "",
          "[Added Lines]",
          "605:  if (wline[i] == L'>')",
          "606:   xml = TRUE;",
          "607:  else if (wline[i] != L'=')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "615:  r = i;",
          "619:   i++;",
          "620:  wline[i--] = 0;",
          "",
          "[Removed Lines]",
          "618:  while ( (wline[i] != 0) && ((wline[i] != L'\"') || ((wline[i] == L'\"') && (!quoteth))) )",
          "",
          "[Added Lines]",
          "624:  while ( (wline[i] != 0) && (((wline[i] != L'\"') && (wline[i] != L'<')) || ((wline[i] == L'\"') && (!quoteth)) || ((wline[i] == L'<') && (!xml))) )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "627: }",
          "634: {",
          "635:  wchar_t *wtoken = NULL, *wdata= NULL, *wfilename = NULL;",
          "636:  wchar_t buf[1024];",
          "637:  FILE* fd = NULL;",
          "",
          "[Removed Lines]",
          "633: char* get_token_data_file(const char* token, const char* filename)",
          "",
          "[Added Lines]",
          "639: char* get_token_data_file_indexed(const char* token, const char* filename, int index)",
          "641:  int i = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "660:  while (fgetws(buf, ARRAYSIZE(buf), fd) != NULL) {",
          "661:   wdata = get_token_data_line(wtoken, buf);",
          "663:    ret = wchar_to_utf8(wdata);",
          "664:    break;",
          "665:   }",
          "",
          "[Removed Lines]",
          "662:   if (wdata != NULL) {",
          "",
          "[Added Lines]",
          "669:   if ((wdata != NULL) && (++i == index)) {",
          "",
          "---------------"
        ],
        "src/resource.h||src/resource.h": [
          "File: src/resource.h -> src/resource.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "134: #define IDC_SELECTION_LINE              1076",
          "135: #define IDC_SELECTION_CHOICE1           1077",
          "136: #define IDC_SELECTION_CHOICE2           1078",
          "137: #define IDS_DEVICE_TXT                  2000",
          "138: #define IDS_PARTITION_TYPE_TXT          2001",
          "139: #define IDS_FILESYSTEM_TXT              2002",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: #define IDC_SELECTION_CHOICE3           1079",
          "138: #define IDC_SELECTION_CHOICE4           1080",
          "139: #define IDC_SELECTION_CHOICE5           1081",
          "140: #define IDC_SELECTION_CHOICE6           1082",
          "141: #define IDC_SELECTION_CHOICE7           1083",
          "142: #define IDC_SELECTION_CHOICE8           1084",
          "143: #define IDC_SELECTION_CHOICE9           1085",
          "144: #define IDC_SELECTION_CHOICE10          1086",
          "145: #define IDC_SELECTION_CHOICE11          1087",
          "146: #define IDC_SELECTION_CHOICE12          1088",
          "147: #define IDC_SELECTION_CHOICE13          1089",
          "148: #define IDC_SELECTION_CHOICE14          1090",
          "149: #define IDC_SELECTION_CHOICE15          1091",
          "150: #define IDC_SELECTION_CHOICEMAX         1092",
          "",
          "---------------"
        ],
        "src/rufus.c||src/rufus.c": [
          "File: src/rufus.c -> src/rufus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2108:  }",
          "2109: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2111: #ifdef RUFUS_TEST",
          "2112:  extern int SelectionDyn(char* title, char* message, char** szChoice, int nChoices);",
          "2113: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2140:  case WM_COMMAND:",
          "2141: #ifdef RUFUS_TEST",
          "2142:   if (LOWORD(wParam) == IDC_TEST) {",
          "2143:    break;",
          "2144:   }",
          "2145: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2147:    char* choices[] = { \"Choice 1\", \"Choice 2\", \"Choice 3\" };",
          "2148:    SelectionDyn(\"Test Choice\", \"Unused\", choices, ARRAYSIZE(choices));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2438:       (ComboBox_GetItemData(hBootType, ComboBox_GetCurSel(hBootType)) == BT_ISO)) {",
          "2439:       char* iso_image = lmprintf(MSG_036);",
          "2440:       char* dd_image = lmprintf(MSG_095);",
          "2441:       i = Selection(lmprintf(MSG_274), lmprintf(MSG_275, iso_image, dd_image, iso_image, dd_image),",
          "2443:       if (i < 0) { // Cancel",
          "2444:        format_op_in_progress = FALSE;",
          "2445:        PROCESS_QUEUED_EVENTS;",
          "",
          "[Removed Lines]",
          "2442:        lmprintf(MSG_276, iso_image), lmprintf(MSG_277, dd_image));",
          "",
          "[Added Lines]",
          "2447:       char* choices[2] = { lmprintf(MSG_276, iso_image), lmprintf(MSG_277, dd_image) };",
          "2449:        choices, 2);",
          "",
          "---------------"
        ],
        "src/rufus.h||src/rufus.h": [
          "File: src/rufus.h -> src/rufus.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "422: extern void DestroyTooltip(HWND hWnd);",
          "423: extern void DestroyAllTooltips(void);",
          "424: extern BOOL Notification(int type, const notification_info* more_info, char* title, char* format, ...);",
          "426: extern SIZE GetTextSize(HWND hCtrl);",
          "427: extern BOOL ExtractDOS(const char* path);",
          "428: extern BOOL ExtractISO(const char* src_iso, const char* dest_dir, BOOL scan);",
          "",
          "[Removed Lines]",
          "425: extern int Selection(char* title, char* message, char* selection1, char* selection2);",
          "",
          "[Added Lines]",
          "425: extern int Selection(char* title, char* message, char** choices, int size);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "450: extern BOOL CheckForUpdates(BOOL force);",
          "451: extern void DownloadNewVersion(void);",
          "452: extern BOOL IsShown(HWND hDlg);",
          "454: extern char* set_token_data_file(const char* token, const char* data, const char* filename);",
          "455: extern char* get_token_data_buffer(const char* token, unsigned int n, const char* buffer, size_t buffer_size);",
          "456: extern char* insert_section_data(const char* filename, const char* section, const char* data, BOOL dos2unix);",
          "",
          "[Removed Lines]",
          "453: extern char* get_token_data_file(const char* token, const char* filename);",
          "",
          "[Added Lines]",
          "453: extern char* get_token_data_file_indexed(const char* token, const char* filename, int index);",
          "454: #define get_token_data_file(token, filename) get_token_data_file_indexed(token, filename, 1)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "459: extern void parse_update(char* buf, size_t len);",
          "460: extern uint8_t WimExtractCheck(void);",
          "461: extern BOOL WimExtractFile(const char* wim_image, int index, const char* src, const char* dst);",
          "462: extern BOOL WimApplyImage(const char* image, int index, const char* dst);",
          "463: extern BOOL IsBootableImage(const char* path);",
          "464: extern BOOL AppendVHDFooter(const char* vhd_path);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "463: extern BOOL WimExtractFile_API(const char* image, int index, const char* src, const char* dst);",
          "464: extern BOOL WimExtractFile_7z(const char* image, int index, const char* src, const char* dst);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "507:  uint32_t Max;  // Maximum array size",
          "508: } StrArray;",
          "509: extern void StrArrayCreate(StrArray* arr, uint32_t initial_size);",
          "511: extern void StrArrayClear(StrArray* arr);",
          "512: extern void StrArrayDestroy(StrArray* arr);",
          "513: #define IsStrArrayEmpty(arr) (arr.Index == 0)",
          "",
          "[Removed Lines]",
          "510: extern int32_t StrArrayAdd(StrArray* arr, const char* str);",
          "",
          "[Added Lines]",
          "513: extern int32_t StrArrayAdd(StrArray* arr, const char* str, BOOL );",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.11.1007\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.12.1008\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:     LTEXT           \"\",IDC_STATIC,0,0,312,46",
          "145:     ICON            IDI_ICON,IDC_SELECTION_ICON,6,6,20,20,0,WS_EX_TRANSPARENT",
          "146:     LTEXT           \"Message\",IDC_SELECTION_TEXT,35,5,269,8",
          "150:     CONTROL         \"Choice 2\",IDC_SELECTION_CHOICE2,\"Button\",BS_AUTORADIOBUTTON,35,31,269,10,WS_EX_TRANSPARENT",
          "151: END",
          "153: IDD_UPDATE_POLICY DIALOGEX 0, 0, 287, 198",
          "",
          "[Removed Lines]",
          "147:     DEFPUSHBUTTON   \"Cancel\",IDCANCEL,254,52,50,14",
          "148:     PUSHBUTTON      \"OK\",IDOK,196,52,50,14",
          "149:     CONTROL         \"Choice 1\",IDC_SELECTION_CHOICE1,\"Button\",BS_AUTORADIOBUTTON,35,18,269,10,WS_EX_TRANSPARENT",
          "",
          "[Added Lines]",
          "147:     DEFPUSHBUTTON   \"OK\",IDOK,196,52,50,14",
          "148:     PUSHBUTTON      \"Cancel\",IDCANCEL,254,52,50,14",
          "149:     CONTROL         \"Choice 1\",IDC_SELECTION_CHOICE1,\"Button\",BS_AUTORADIOBUTTON | WS_GROUP,35,18,269,10,WS_EX_TRANSPARENT",
          "151:     CONTROL         \"Choice 3\",IDC_SELECTION_CHOICE3,\"Button\",BS_AUTORADIOBUTTON | NOT WS_VISIBLE,35,44,269,10,WS_EX_TRANSPARENT",
          "152:     CONTROL         \"Choice 4\",IDC_SELECTION_CHOICE4,\"Button\",BS_AUTORADIOBUTTON | NOT WS_VISIBLE,35,57,269,10,WS_EX_TRANSPARENT",
          "153:     CONTROL         \"Choice 5\",IDC_SELECTION_CHOICE5,\"Button\",BS_AUTORADIOBUTTON | NOT WS_VISIBLE,35,70,269,10,WS_EX_TRANSPARENT",
          "154:     CONTROL         \"Choice 6\",IDC_SELECTION_CHOICE6,\"Button\",BS_AUTORADIOBUTTON | NOT WS_VISIBLE,35,83,269,10,WS_EX_TRANSPARENT",
          "155:     CONTROL         \"Choice 7\",IDC_SELECTION_CHOICE7,\"Button\",BS_AUTORADIOBUTTON | NOT WS_VISIBLE,35,96,269,10,WS_EX_TRANSPARENT",
          "156:     CONTROL         \"Choice 8\",IDC_SELECTION_CHOICE8,\"Button\",BS_AUTORADIOBUTTON | NOT WS_VISIBLE,35,109,269,10,WS_EX_TRANSPARENT",
          "157:     CONTROL         \"Choice 9\",IDC_SELECTION_CHOICE9,\"Button\",BS_AUTORADIOBUTTON | NOT WS_VISIBLE,35,122,269,10,WS_EX_TRANSPARENT",
          "158:     CONTROL         \"Choice 10\",IDC_SELECTION_CHOICE10,\"Button\",BS_AUTORADIOBUTTON | NOT WS_VISIBLE,35,135,269,10,WS_EX_TRANSPARENT",
          "159:     CONTROL         \"Choice 11\",IDC_SELECTION_CHOICE11,\"Button\",BS_AUTORADIOBUTTON | NOT WS_VISIBLE,35,148,269,10,WS_EX_TRANSPARENT",
          "160:     CONTROL         \"Choice 12\",IDC_SELECTION_CHOICE12,\"Button\",BS_AUTORADIOBUTTON | NOT WS_VISIBLE,35,161,269,10,WS_EX_TRANSPARENT",
          "161:     CONTROL         \"Choice 13\",IDC_SELECTION_CHOICE13,\"Button\",BS_AUTORADIOBUTTON | NOT WS_VISIBLE,35,174,269,10,WS_EX_TRANSPARENT",
          "162:     CONTROL         \"Choice 14\",IDC_SELECTION_CHOICE14,\"Button\",BS_AUTORADIOBUTTON | NOT WS_VISIBLE,35,187,269,10,WS_EX_TRANSPARENT",
          "163:     CONTROL         \"Choice 15\",IDC_SELECTION_CHOICE15,\"Button\",BS_AUTORADIOBUTTON | NOT WS_VISIBLE,35,200,269,10,WS_EX_TRANSPARENT",
          "164:     CONTROL         \"Choice 16\",IDC_SELECTION_CHOICEMAX,\"Button\",BS_AUTORADIOBUTTON | NOT WS_VISIBLE,35,21,269,10,WS_EX_TRANSPARENT",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "322: VS_VERSION_INFO VERSIONINFO",
          "325:  FILEFLAGSMASK 0x3fL",
          "326: #ifdef _DEBUG",
          "327:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "323:  FILEVERSION 2,11,1007,0",
          "324:  PRODUCTVERSION 2,11,1007,0",
          "",
          "[Added Lines]",
          "337:  FILEVERSION 2,12,1008,0",
          "338:  PRODUCTVERSION 2,12,1008,0",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "338:         BEGIN",
          "339:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "340:             VALUE \"FileDescription\", \"Rufus\"",
          "342:             VALUE \"InternalName\", \"Rufus\"",
          "343:             VALUE \"LegalCopyright\", \"\ufffd 2011-2016 Pete Batard (GPL v3)\"",
          "344:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "345:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "346:             VALUE \"ProductName\", \"Rufus\"",
          "348:         END",
          "349:     END",
          "350:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "341:             VALUE \"FileVersion\", \"2.11.1007\"",
          "347:             VALUE \"ProductVersion\", \"2.11.1007\"",
          "",
          "[Added Lines]",
          "355:             VALUE \"FileVersion\", \"2.12.1008\"",
          "361:             VALUE \"ProductVersion\", \"2.12.1008\"",
          "",
          "---------------"
        ],
        "src/stdfn.c||src/stdfn.c": [
          "File: src/stdfn.c -> src/stdfn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "348:   uprintf(\"Could not allocate string array\\n\");",
          "349: }",
          "352: {",
          "353:  char** old_table;",
          "355:   return -1;",
          "356:  if (arr->Index == arr->Max) {",
          "357:   arr->Max *= 2;",
          "",
          "[Removed Lines]",
          "351: int32_t StrArrayAdd(StrArray* arr, const char* str)",
          "354:  if ((arr == NULL) || (arr->String == NULL))",
          "",
          "[Added Lines]",
          "351: int32_t StrArrayAdd(StrArray* arr, const char* str, BOOL duplicate)",
          "354:  if ((arr == NULL) || (arr->String == NULL) || (str == NULL))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "363:    return -1;",
          "364:   }",
          "365:  }",
          "367:  if (arr->String[arr->Index] == NULL) {",
          "368:   uprintf(\"Could not store string in array\\n\");",
          "369:   return -1;",
          "",
          "[Removed Lines]",
          "366:  arr->String[arr->Index] = safe_strdup(str);",
          "",
          "[Added Lines]",
          "366:  arr->String[arr->Index] = (duplicate)?safe_strdup(str):(char*)str;",
          "",
          "---------------"
        ],
        "src/stdlg.c||src/stdlg.c": [
          "File: src/stdlg.c -> src/stdlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: static HICON hMessageIcon = (HICON)INVALID_HANDLE_VALUE;",
          "55: static char* szMessageText = NULL;",
          "56: static char* szMessageTitle = NULL;",
          "58: static HWND hBrowseEdit;",
          "59: extern HWND hUpdatesDlg;",
          "60: static WNDPROC pOrgBrowseWndproc;",
          "",
          "[Removed Lines]",
          "57: static char *szChoice1, *szChoice2;",
          "",
          "[Added Lines]",
          "57: static char **szChoice;",
          "58: static int nChoices;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69: extern loc_cmd* selected_locale;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: void SetDialogFocus(HWND hDlg, HWND hCtrl)",
          "76: {",
          "77:  SendMessage(hDlg, WM_NEXTDLGCTL, (WPARAM)hCtrl, TRUE);",
          "78: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:   hBrowseEdit = FindWindowExA(hDlg, NULL, \"Edit\", NULL);",
          "101:   SetWindowTextU(hBrowseEdit, szFolderPath);",
          "105:   if (nWindowsVersion <= WINDOWS_XP) {",
          "",
          "[Removed Lines]",
          "102:   SetFocus(hBrowseEdit);",
          "",
          "[Added Lines]",
          "111:   SetDialogFocus(hDlg, hBrowseEdit);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "850:  switch (message) {",
          "851:  case WM_INITDIALOG:",
          "853:   ncm.cbSize = sizeof(ncm);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "862:   if (nChoices > (IDC_SELECTION_CHOICEMAX - IDC_SELECTION_CHOICE1)) {",
          "863:    uprintf(\"WARNING: Too many options requested for Selection (%d vs %d)\",",
          "864:     nChoices, IDC_SELECTION_CHOICEMAX - IDC_SELECTION_CHOICE1);",
          "865:    nChoices = IDC_SELECTION_CHOICEMAX - IDC_SELECTION_CHOICE1;",
          "866:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "866:   SendMessage(hDlg, WM_SETFONT, (WPARAM)hDlgFont, MAKELPARAM(TRUE, 0));",
          "867:   SendMessage(GetDlgItem(hDlg, IDC_SELECTION_TEXT), WM_SETFONT, (WPARAM)hDlgFont, MAKELPARAM(TRUE, 0));",
          "870:   SendMessage(GetDlgItem(hDlg, IDYES), WM_SETFONT, (WPARAM)hDlgFont, MAKELPARAM(TRUE, 0));",
          "871:   SendMessage(GetDlgItem(hDlg, IDNO), WM_SETFONT, (WPARAM)hDlgFont, MAKELPARAM(TRUE, 0));",
          "",
          "[Removed Lines]",
          "868:   SendMessage(GetDlgItem(hDlg, IDC_SELECTION_CHOICE1), WM_SETFONT, (WPARAM)hDlgFont, MAKELPARAM(TRUE, 0));",
          "869:   SendMessage(GetDlgItem(hDlg, IDC_SELECTION_CHOICE2), WM_SETFONT, (WPARAM)hDlgFont, MAKELPARAM(TRUE, 0));",
          "",
          "[Added Lines]",
          "884:   for (i = 0; i < nChoices; i++)",
          "885:    SendMessage(GetDlgItem(hDlg, IDC_SELECTION_CHOICE1 + i), WM_SETFONT, (WPARAM)hDlgFont, MAKELPARAM(TRUE, 0));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "880:   SetWindowTextU(hDlg, szMessageTitle);",
          "881:   SetWindowTextU(GetDlgItem(hDlg, IDCANCEL), lmprintf(MSG_007));",
          "882:   SetWindowTextU(GetDlgItem(hDlg, IDC_SELECTION_TEXT), szMessageText);",
          "887:   hCtrl = GetDlgItem(hDlg, IDC_SELECTION_TEXT);",
          "888:   hDC = GetDC(hCtrl);",
          "",
          "[Removed Lines]",
          "883:   SetWindowTextU(GetDlgItem(hDlg, IDC_SELECTION_CHOICE1), szChoice1);",
          "884:   SetWindowTextU(GetDlgItem(hDlg, IDC_SELECTION_CHOICE2), szChoice2);",
          "",
          "[Added Lines]",
          "899:   for (i = 0; i < nChoices; i++) {",
          "900:    SetWindowTextU(GetDlgItem(hDlg, IDC_SELECTION_CHOICE1 + i), szChoice[i]);",
          "901:    ShowWindow(GetDlgItem(hDlg, IDC_SELECTION_CHOICE1 + i), SW_SHOW);",
          "902:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "893:   dh = rect.bottom - rect.top - dh;",
          "894:   if (hDC != NULL)",
          "895:    ReleaseDC(hCtrl, hDC);",
          "897:   ResizeMoveCtrl(hDlg, hCtrl, 0, 0, 0, dh, 1.0f);",
          "898:   ResizeMoveCtrl(hDlg, hDlg, 0, 0, 0, dh, 1.0f);",
          "899:   ResizeMoveCtrl(hDlg, GetDlgItem(hDlg, -1), 0, 0, 0, dh, 1.0f); // IDC_STATIC = -1",
          "900:   ResizeMoveCtrl(hDlg, GetDlgItem(hDlg, IDC_SELECTION_LINE), 0, dh, 0, 0, 1.0f);",
          "903:   ResizeMoveCtrl(hDlg, GetDlgItem(hDlg, IDOK), 0, dh, 0, 0, 1.0f);",
          "904:   ResizeMoveCtrl(hDlg, GetDlgItem(hDlg, IDCANCEL), 0, dh, 0, 0, 1.0f);",
          "",
          "[Removed Lines]",
          "901:   ResizeMoveCtrl(hDlg, GetDlgItem(hDlg, IDC_SELECTION_CHOICE1), 0, dh, 0, 0, 1.0f);",
          "902:   ResizeMoveCtrl(hDlg, GetDlgItem(hDlg, IDC_SELECTION_CHOICE2), 0, dh, 0, 0, 1.0f);",
          "",
          "[Added Lines]",
          "914:   for (i = 0; i < nChoices; i++)",
          "915:    ResizeMoveCtrl(hDlg, GetDlgItem(hDlg, IDC_SELECTION_CHOICE1 + i), 0, dh, 0, 0, 1.0f);",
          "916:   if (nChoices > 2) {",
          "917:    GetWindowRect(GetDlgItem(hDlg, IDC_SELECTION_CHOICE1), &rect);",
          "918:    dh += (nChoices - 1) * (rect.bottom - rect.top) - 5;",
          "919:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "926:  case WM_COMMAND:",
          "927:   switch (LOWORD(wParam)) {",
          "928:   case IDOK:",
          "934:   case IDNO:",
          "935:   case IDCANCEL:",
          "",
          "[Removed Lines]",
          "929:    if (Button_GetCheck(GetDlgItem(hDlg, IDC_SELECTION_CHOICE2)) == BST_CHECKED)",
          "930:     r = 2;",
          "931:    else",
          "932:     r = 1;",
          "",
          "[Added Lines]",
          "949:    for (i = 0; (i < nChoices) &&",
          "950:     (Button_GetCheck(GetDlgItem(hDlg, IDC_SELECTION_CHOICE1 + i)) != BST_CHECKED); i++);",
          "951:    if (i < nChoices)",
          "952:     r = i + 1;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "948: {",
          "949:  int ret;",
          "951:  dialog_showing++;",
          "952:  szMessageTitle = title;",
          "953:  szMessageText = message;",
          "956:  ret = (int)MyDialogBox(hMainInstance, IDD_SELECTION, hMainDialog, SelectionCallback);",
          "957:  dialog_showing--;",
          "",
          "[Removed Lines]",
          "947: int Selection(char* title, char* message, char* choice1, char* choice2)",
          "954:  szChoice1 = choice1;",
          "955:  szChoice2 = choice2;",
          "",
          "[Added Lines]",
          "967: int Selection(char* title, char* message, char** choices, int size)",
          "974:  szChoice = choices;",
          "975:  nChoices = size;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1819:  UnhookWinEvent(fp_weh);",
          "1820:  fp_weh = NULL;",
          "1821: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1843: #ifdef RUFUS_TEST",
          "1844: static inline LPWORD lpwAlign(LPWORD addr)",
          "1845: {",
          "1846:  return (LPWORD)((((uintptr_t)addr) + 3) & (~3));",
          "1847: }",
          "1849: INT_PTR CALLBACK SelectionDynCallback(HWND hwndDlg, UINT message, WPARAM wParam, LPARAM lParam)",
          "1850: {",
          "1851:  int r = -1;",
          "1852:  switch (message) {",
          "1853:  case WM_INITDIALOG:",
          "1854:   return (INT_PTR)TRUE;",
          "1856:  case WM_COMMAND:",
          "1857:   switch (LOWORD(wParam)) {",
          "1858:   case IDOK:",
          "1859:    r = 0;",
          "1860:   case IDCANCEL:",
          "1861:    EndDialog(hwndDlg, r);",
          "1862:    return (INT_PTR)TRUE;",
          "1863:   }",
          "1864:  }",
          "1865:  return FALSE;",
          "1866: }",
          "1868: int SelectionDyn(char* title, char* message, char** szChoice, int nChoices)",
          "1869: {",
          "1870: #define ID_RADIO  12345",
          "1871:  LPCWSTR lpwszTypeFace = L\"MS Shell Dlg\";",
          "1872:  LPDLGTEMPLATEA lpdt;",
          "1873:  LPDLGITEMTEMPLATEA lpdit;",
          "1874:  LPCWSTR lpwszCaption;",
          "1875:  LPWORD lpw;",
          "1876:  LPWSTR lpwsz;",
          "1877:  int i, ret, nchar;",
          "1879:  lpdt = (LPDLGTEMPLATE)calloc(512 + nChoices * 256, 1);",
          "1882:  lpdt->style = WS_POPUP | WS_BORDER | WS_SYSMENU | WS_CAPTION | DS_MODALFRAME | DS_CENTER | DS_SHELLFONT;",
          "1883:  lpdt->cdit = 2 + nChoices;",
          "1884:  lpdt->x = 10;",
          "1885:  lpdt->y = 10;",
          "1886:  lpdt->cx = 300;",
          "1887:  lpdt->cy = 100;",
          "1895:  lpw = (LPWORD)(&lpdt[1]);",
          "1898:  lpwsz = (LPWSTR)lpw;",
          "1899:  nchar = MultiByteToWideChar(CP_UTF8, 0, title, -1, lpwsz, 50);",
          "1900:  lpw += nchar;",
          "1903:  if (lpdt->style & (DS_SETFONT | DS_SHELLFONT)) {",
          "1905:   for (lpwsz = (LPWSTR)lpw, lpwszCaption = lpwszTypeFace; (*lpwsz++ = *lpwszCaption++) != 0; );",
          "1906:   lpw = (LPWORD)lpwsz;",
          "1907:  }",
          "1910:  lpw = lpwAlign(lpw);",
          "1911:  lpdit = (LPDLGITEMTEMPLATE)lpw;",
          "1912:  lpdit->style = WS_CHILD | WS_VISIBLE | BS_DEFPUSHBUTTON;",
          "1913:  lpdit->x = 10;",
          "1914:  lpdit->y = 70;",
          "1915:  lpdit->cx = 50;",
          "1916:  lpdit->cy = 14;",
          "1917:  lpdit->id = IDOK;",
          "1919:  lpw = (LPWORD)(&lpdit[1]);",
          "1923:  lpwsz = (LPWSTR)lpw;",
          "1924:  nchar = MultiByteToWideChar(CP_UTF8, 0, \"OK\", -1, lpwsz, 50);",
          "1925:  lpw += nchar;",
          "1929:  lpw = lpwAlign(lpw);",
          "1930:  lpdit = (LPDLGITEMTEMPLATE)lpw;",
          "1931:  lpdit->x = 90;",
          "1932:  lpdit->y = 70;",
          "1933:  lpdit->cx = 50;",
          "1934:  lpdit->cy = 14;",
          "1935:  lpdit->id = IDCANCEL;",
          "1936:  lpdit->style = WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON;",
          "1938:  lpw = (LPWORD)(&lpdit[1]);",
          "1942:  lpwsz = (LPWSTR)lpw;",
          "1943:  nchar = MultiByteToWideChar(CP_UTF8, 0, lmprintf(MSG_007), -1, lpwsz, 50);",
          "1944:  lpw += nchar;",
          "1948:  for (i = 0; i < nChoices; i++) {",
          "1949:   lpw = lpwAlign(lpw);",
          "1950:   lpdit = (LPDLGITEMTEMPLATE)lpw;",
          "1951:   lpdit->x = 10;",
          "1952:   lpdit->y = 10 + 15 * i;",
          "1953:   lpdit->cx = 40;",
          "1954:   lpdit->cy = 20;",
          "1955:   lpdit->id = ID_RADIO;",
          "1956:   lpdit->style = WS_CHILD | WS_VISIBLE | BS_AUTORADIOBUTTON | (i == 0 ? WS_GROUP : 0);",
          "1958:   lpw = (LPWORD)(&lpdit[1]);",
          "1962:   lpwsz = (LPWSTR)lpw;",
          "1963:   nchar = MultiByteToWideChar(CP_UTF8, 0, szChoice[i], -1, lpwsz, 150);",
          "1964:   lpw += nchar;",
          "1966:  }",
          "1968:  ret = (int)DialogBoxIndirect(hMainInstance, (LPDLGTEMPLATE)lpdt, hMainDialog, (DLGPROC)SelectionDynCallback);",
          "1969:  free(lpdt);",
          "1970:  return ret;",
          "1971: }",
          "1972: #endif",
          "",
          "---------------"
        ],
        "src/vhd.c||src/vhd.c": [
          "File: src/vhd.c -> src/vhd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93: PF_TYPE_DECL(WINAPI, HANDLE, WIMLoadImage, (HANDLE, DWORD));",
          "94: PF_TYPE_DECL(WINAPI, BOOL, WIMApplyImage, (HANDLE, PCWSTR, DWORD));",
          "95: PF_TYPE_DECL(WINAPI, BOOL, WIMExtractImagePath, (HANDLE, PWSTR, PWSTR, DWORD));",
          "96: PF_TYPE_DECL(WINAPI, BOOL, WIMCloseHandle, (HANDLE));",
          "97: PF_TYPE_DECL(WINAPI, DWORD, WIMRegisterMessageCallback, (HANDLE, FARPROC, PVOID));",
          "98: PF_TYPE_DECL(WINAPI, DWORD, WIMUnregisterMessageCallback, (HANDLE, FARPROC));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96: PF_TYPE_DECL(WINAPI, BOOL, WIMGetImageInformation, (HANDLE, PVOID, PDWORD));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "345:  PF_INIT(WIMLoadImage, Wimgapi);",
          "346:  PF_INIT(WIMApplyImage, Wimgapi);",
          "347:  PF_INIT(WIMExtractImagePath, Wimgapi);",
          "348:  PF_INIT(WIMRegisterMessageCallback, Wimgapi);",
          "349:  PF_INIT(WIMUnregisterMessageCallback, Wimgapi);",
          "350:  PF_INIT(WIMCloseHandle, Wimgapi);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "349:  PF_INIT(WIMGetImageInformation, Wimgapi);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "372: {",
          "373:  BOOL r = FALSE;",
          "374:  DWORD dw = 0;",
          "375:  HANDLE hWim = NULL;",
          "376:  HANDLE hImage = NULL;",
          "377:  wchar_t wtemp[MAX_PATH] = {0};",
          "378:  wchar_t* wimage = utf8_to_wchar(image);",
          "379:  wchar_t* wsrc = utf8_to_wchar(src);",
          "380:  wchar_t* wdst = utf8_to_wchar(dst);",
          "382:  PF_INIT_OR_OUT(WIMCreateFile, Wimgapi);",
          "383:  PF_INIT_OR_OUT(WIMSetTemporaryPath, Wimgapi);",
          "",
          "[Removed Lines]",
          "371: static BOOL WimExtractFile_API(const char* image, int index, const char* src, const char* dst)",
          "",
          "[Added Lines]",
          "373: BOOL WimExtractFile_API(const char* image, int index, const char* src, const char* dst)",
          "375:  static char* index_name = \"[1].xml\";",
          "380:  HANDLE hFile = NULL;",
          "385:  char* wim_info;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "402:   goto out;",
          "403:  }",
          "411:  uprintf(\"Extracting: %s (From %s)\", dst, src);",
          "415:  }",
          "416:  r = TRUE;",
          "419: out:",
          "420:  if ((hImage != NULL) || (hWim != NULL)) {",
          "",
          "[Removed Lines]",
          "405:  hImage = pfWIMLoadImage(hWim, (DWORD)index);",
          "406:  if (hImage == NULL) {",
          "407:   uprintf(\"  Could not set index: %s\", WindowsErrorString());",
          "408:   goto out;",
          "409:  }",
          "412:  if (!pfWIMExtractImagePath(hImage, wsrc, wdst, 0)) {",
          "413:   uprintf(\"  Could not extract file: %s\", WindowsErrorString());",
          "414:   goto out;",
          "417:  UpdateProgress(OP_FINALIZE, -1.0f);",
          "",
          "[Added Lines]",
          "411:  if (safe_strcmp(src, index_name) == 0) {",
          "412:   if (!pfWIMGetImageInformation(hWim, &wim_info, &dw)) {",
          "413:    uprintf(\"  Could not access WIM info: %s\", WindowsErrorString());",
          "414:    goto out;",
          "415:   }",
          "416:   hFile = CreateFileW(wdst, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE,",
          "417:    NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);",
          "418:   if ((hFile == INVALID_HANDLE_VALUE) || (!WriteFile(hFile, wim_info, dw, &dw, NULL))) {",
          "419:    uprintf(\"  Could not extract file: %s\", WindowsErrorString());",
          "420:    goto out;",
          "421:   }",
          "422:  } else {",
          "423:   hImage = pfWIMLoadImage(hWim, (DWORD)index);",
          "424:   if (hImage == NULL) {",
          "425:    uprintf(\"  Could not set index: %s\", WindowsErrorString());",
          "426:    goto out;",
          "427:   }",
          "428:   if (!pfWIMExtractImagePath(hImage, wsrc, wdst, 0)) {",
          "429:    uprintf(\"  Could not extract file: %s\", WindowsErrorString());",
          "430:    goto out;",
          "431:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "422:   if (hImage != NULL) pfWIMCloseHandle(hImage);",
          "423:   if (hWim != NULL) pfWIMCloseHandle(hWim);",
          "424:  }",
          "425:  safe_free(wimage);",
          "426:  safe_free(wsrc);",
          "427:  safe_free(wdst);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "441:  safe_closehandle(hFile);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "429: }",
          "433: {",
          "434:  int n;",
          "435:  size_t i;",
          "",
          "[Removed Lines]",
          "432: static BOOL WimExtractFile_7z(const char* image, int index, const char* src, const char* dst)",
          "",
          "[Added Lines]",
          "449: BOOL WimExtractFile_7z(const char* image, int index, const char* src, const char* dst)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "456:  for (n = 0; n < 2; n++) {",
          "457:   safe_strcpy(tmpdst, sizeof(tmpdst), dst);",
          "462:   tmpdst[i] = 0;",
          "464:   safe_sprintf(cmdline, sizeof(cmdline), \"\\\"%s\\\" -y e \\\"%s\\\" %s%s\", sevenzip_path,",
          "",
          "[Removed Lines]",
          "458:   for (i = strlen(tmpdst) - 1; i > 0; i--) {",
          "459:    if (tmpdst[i] == '\\\\')",
          "460:     break;",
          "461:   }",
          "",
          "[Added Lines]",
          "475:   for (i = strlen(tmpdst) - 1; (i > 0) && (tmpdst[i] != '\\\\') && (tmpdst[i] != '/'); i--);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "468:    return FALSE;",
          "469:   }",
          "472:   if (_access(tmpdst, 0) == 0)",
          "474:    break;",
          "",
          "[Removed Lines]",
          "471:   safe_strcat(tmpdst, sizeof(tmpdst), \"\\\\bootmgfw.efi\");",
          "",
          "[Added Lines]",
          "485:   for (i = safe_strlen(src); (i > 0) && (src[i] != '\\\\') && (src[i] != '/'); i--);",
          "486:   if (i == 0)",
          "487:    safe_strcat(tmpdst, sizeof(tmpdst), \"\\\\\");",
          "488:   safe_strcat(tmpdst, sizeof(tmpdst), &src[i]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "483:  if (rename(tmpdst, dst) != 0) {",
          "485:   return FALSE;",
          "486:  }",
          "",
          "[Removed Lines]",
          "484:   uprintf(\"  Could not rename %s to %s\", tmpdst, dst);",
          "",
          "[Added Lines]",
          "501:   uprintf(\"  Could not rename %s to %s: errno %d\", tmpdst, dst, errno);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c57703c708ddfc384175d8210086672c9a120e9",
      "candidate_info": {
        "commit_hash": "5c57703c708ddfc384175d8210086672c9a120e9",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/5c57703c708ddfc384175d8210086672c9a120e9",
        "files": [
          "src/net.c",
          "src/rufus.c",
          "src/rufus.h",
          "src/rufus.rc",
          "src/ui.h"
        ],
        "message": "[ui] add marquee progress bar mode\n\n* Also fix x86_64 warnings",
        "before_after_code_files": [
          "src/net.c||src/net.c",
          "src/rufus.c||src/rufus.c",
          "src/rufus.h||src/rufus.h",
          "src/rufus.rc||src/rufus.rc",
          "src/ui.h||src/ui.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "src/net.c||src/net.c": [
          "File: src/net.c -> src/net.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:  BOOL r = FALSE;",
          "224:  DWORD dwFlags, dwSize, dwDownloaded, dwTotalSize;",
          "225:  FILE* fd = NULL;",
          "227:  const char* accept_types[] = {\"*/*\\0\", NULL};",
          "228:  unsigned char buf[DOWNLOAD_BUFFER_SIZE];",
          "229:  char agent[64], hostname[64], urlpath[128];",
          "",
          "[Removed Lines]",
          "226:  LONG progress_style;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:   hProgressBar = GetDlgItem(hProgressDialog, IDC_PROGRESS);",
          "240:   if (hProgressBar != NULL) {",
          "243:    SendMessage(hProgressBar, PBM_SETPOS, 0, 0);",
          "244:   }",
          "245:   SendMessage(hProgressDialog, UM_PROGRESS_INIT, 0, 0);",
          "",
          "[Removed Lines]",
          "241:    progress_style = GetWindowLong(hProgressBar, GWL_STYLE);",
          "242:    SetWindowLong(hProgressBar, GWL_STYLE, progress_style & (~PBS_MARQUEE));",
          "",
          "[Added Lines]",
          "240:    SendMessage(hProgressBar, PBM_SETMARQUEE, FALSE, 0);",
          "",
          "---------------"
        ],
        "src/rufus.c||src/rufus.c": [
          "File: src/rufus.c -> src/rufus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1774:  SIZE size;",
          "1775:  LONG full_right;",
          "1776:  wchar_t winfo[128];",
          "1780:  switch (message) {",
          "1782:  case PBM_SETSTATE:",
          "1783:   switch (wParam) {",
          "1784:   case PBST_NORMAL:",
          "1786:    break;",
          "1787:   case PBST_PAUSED:",
          "1789:    break;",
          "1790:   case PBST_ERROR:",
          "1792:    break;",
          "1793:   }",
          "1794:   return (INT_PTR)TRUE;",
          "1796:  case PBM_SETRANGE:",
          "1799:   return (INT_PTR)TRUE;",
          "1801:  case PBM_SETPOS:",
          "",
          "[Removed Lines]",
          "1777:  static WORD pos = 0, min = 0, max = 0xFFFF;",
          "1778:  static COLORREF color = RGB(0x06, 0xB0, 0x25);",
          "1785:    color = RGB(0x06, 0xB0, 0x25);",
          "1788:    color = RGB(0xDA, 0xCB, 0x26);",
          "1791:    color = RGB(0xDA, 0x26, 0x26);",
          "1797:   min = lParam & 0xFFFF;",
          "1798:   max = lParam >> 16;",
          "",
          "[Added Lines]",
          "1777:  static BOOL marquee_mode = FALSE;",
          "1778:  static uint32_t pos = 0, min = 0, max = 0xFFFF;",
          "1779:  static COLORREF color = PROGRESS_BAR_NORMAL_COLOR;",
          "1786:    color = PROGRESS_BAR_NORMAL_COLOR;",
          "1789:    color = PROGRESS_BAR_PAUSED_COLOR;",
          "1792:    color = PROGRESS_BAR_ERROR_COLOR;",
          "1800:   min = (uint32_t)(lParam & 0xFFFF);",
          "1801:   max = (uint32_t)(lParam >> 16);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1803:   InvalidateRect(hProgress, NULL, TRUE);",
          "1804:   return (INT_PTR)TRUE;",
          "1806:  case WM_PAINT:",
          "1807:   hDC = BeginPaint(hCtrl, &ps);",
          "1808:   GetClientRect(hCtrl, &rc);",
          "1809:   SelectObject(hDC, GetStockObject(DC_PEN));",
          "1810:   SelectObject(hDC, GetStockObject(NULL_BRUSH));",
          "1812:   Rectangle(hDC, rc.left, rc.top, rc.right, rc.bottom);",
          "1813:   InflateRect(&rc, -1, -1);",
          "1815:   GetWindowTextW(hProgress, winfo, ARRAYSIZE(winfo));",
          "1818:   SelectObject(hDC, hInfoFont);",
          "1829:   rc.left = rc.right;",
          "1830:   rc.right = full_right;",
          "1831:   ExtTextOut(hDC, (full_right - size.cx) / 2, (rc.bottom - size.cy) / 2,",
          "1832:    ETO_CLIPPED | ETO_OPAQUE | ETO_NUMERICSLOCAL | (right_to_left_mode ? ETO_RTLREADING : 0),",
          "1834:   EndPaint(hCtrl, &ps);",
          "1835:   return (INT_PTR)TRUE;",
          "1836:  }",
          "",
          "[Removed Lines]",
          "1811:   SetDCPenColor(hDC, RGB(0xBC, 0xBC, 0xBC));",
          "1816:   full_right = rc.right;",
          "1817:   rc.right = (pos > min) ? MulDiv(pos - min, rc.right, max - min) : rc.left;",
          "1819:   GetTextExtentPoint32(hDC, winfo, wcslen(winfo), &size);",
          "1821:   SetTextColor(hDC, RGB(0xFF, 0xFF, 0xFF));",
          "1822:   SetBkColor(hDC, color);",
          "1823:   ExtTextOut(hDC, (full_right - size.cx) / 2, (rc.bottom - size.cy) / 2,",
          "1824:    ETO_CLIPPED | ETO_OPAQUE | ETO_NUMERICSLOCAL | (right_to_left_mode ? ETO_RTLREADING : 0),",
          "1825:    &rc, winfo, wcslen(winfo), NULL);",
          "1827:   SetTextColor(hDC, RGB(0x00, 0x00, 0x00));",
          "1828:   SetBkColor(hDC, RGB(0xE6, 0xE6, 0xE6));",
          "1833:    &rc, winfo, wcslen(winfo), NULL);",
          "",
          "[Added Lines]",
          "1809:  case PBM_SETMARQUEE:",
          "1810:   if ((wParam == TRUE) && (!marquee_mode)) {",
          "1811:    marquee_mode = TRUE;",
          "1812:    pos = min;",
          "1813:    color = PROGRESS_BAR_NORMAL_COLOR;",
          "1814:    SetTimer(hCtrl, TID_MARQUEE_TIMER, MARQUEE_TIMER_REFRESH, NULL);",
          "1815:    InvalidateRect(hProgress, NULL, TRUE);",
          "1816:   } else if ((wParam == FALSE) && (marquee_mode)) {",
          "1817:    marquee_mode = FALSE;",
          "1818:    KillTimer(hCtrl, TID_MARQUEE_TIMER);",
          "1819:    pos = min;",
          "1820:    InvalidateRect(hProgress, NULL, TRUE);",
          "1821:   }",
          "1822:   return (INT_PTR)TRUE;",
          "1824:  case WM_TIMER:",
          "1825:   if ((wParam == TID_MARQUEE_TIMER) && marquee_mode) {",
          "1826:    pos += max((max - min) / (1000 / MARQUEE_TIMER_REFRESH), 1);",
          "1827:    if ((pos > max) || (pos < min))",
          "1828:     pos = min;",
          "1829:    InvalidateRect(hProgress, NULL, TRUE);",
          "1830:    return (INT_PTR)TRUE;",
          "1831:   }",
          "1832:   return (INT_PTR)FALSE;",
          "1839:   SetDCPenColor(hDC, PROGRESS_BAR_BOX_COLOR);",
          "1845:   GetTextExtentPoint32(hDC, winfo, (int)wcslen(winfo), &size);",
          "1846:   if (size.cx > rc.right)",
          "1847:    size.cx = rc.right;",
          "1848:   if (size.cy > rc.bottom)",
          "1849:    size.cy = rc.bottom;",
          "1850:   full_right = rc.right;",
          "1851:   if (marquee_mode) {",
          "1853:    if (pos + ((max - min) / 5) > max) {",
          "1854:     rc.right = MulDiv(pos + ((max - min) / 5) - max, rc.right, max - min);",
          "1855:     SetTextColor(hDC, PROGRESS_BAR_INVERTED_TEXT_COLOR);",
          "1856:     SetBkColor(hDC, color);",
          "1857:     ExtTextOut(hDC, (full_right - size.cx) / 2, (rc.bottom - size.cy) / 2,",
          "1858:      ETO_CLIPPED | ETO_OPAQUE | ETO_NUMERICSLOCAL | (right_to_left_mode ? ETO_RTLREADING : 0),",
          "1859:      &rc, winfo, (int)wcslen(winfo), NULL);",
          "1860:     rc.left = rc.right;",
          "1861:     rc.right = full_right;",
          "1862:    }",
          "1864:    if (pos > min) {",
          "1865:     rc.right = MulDiv(pos - min, rc.right, max - min);",
          "1866:     SetTextColor(hDC, PROGRESS_BAR_NORMAL_TEXT_COLOR);",
          "1867:     SetBkColor(hDC, PROGRESS_BAR_BACKGROUND_COLOR);",
          "1868:     ExtTextOut(hDC, (full_right - size.cx) / 2, (rc.bottom - size.cy) / 2,",
          "1869:      ETO_CLIPPED | ETO_OPAQUE | ETO_NUMERICSLOCAL | (right_to_left_mode ? ETO_RTLREADING : 0),",
          "1870:      &rc, winfo, (int)wcslen(winfo), NULL);",
          "1871:     rc.left = rc.right;",
          "1872:     rc.right = full_right;",
          "1873:    }",
          "1875:    rc.right = MulDiv(pos - min + ((max - min) / 5), rc.right, max - min);",
          "1876:    SetTextColor(hDC, PROGRESS_BAR_INVERTED_TEXT_COLOR);",
          "1877:    SetBkColor(hDC, color);",
          "1878:    ExtTextOut(hDC, (full_right - size.cx) / 2, (rc.bottom - size.cy) / 2,",
          "1879:     ETO_CLIPPED | ETO_OPAQUE | ETO_NUMERICSLOCAL | (right_to_left_mode ? ETO_RTLREADING : 0),",
          "1880:     &rc, winfo, (int)wcslen(winfo), NULL);",
          "1881:   } else {",
          "1883:    rc.right = (pos > min) ? MulDiv(pos - min, rc.right, max - min) : rc.left;",
          "1884:    SetTextColor(hDC, PROGRESS_BAR_INVERTED_TEXT_COLOR);",
          "1885:    SetBkColor(hDC, color);",
          "1886:    ExtTextOut(hDC, (full_right - size.cx) / 2, (rc.bottom - size.cy) / 2,",
          "1887:     ETO_CLIPPED | ETO_OPAQUE | ETO_NUMERICSLOCAL | (right_to_left_mode ? ETO_RTLREADING : 0),",
          "1888:     &rc, winfo, (int)wcslen(winfo), NULL);",
          "1889:   }",
          "1893:   SetTextColor(hDC, PROGRESS_BAR_NORMAL_TEXT_COLOR);",
          "1894:   SetBkColor(hDC, PROGRESS_BAR_BACKGROUND_COLOR);",
          "1897:    &rc, winfo, (int)wcslen(winfo), NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2865:  HDROP droppedFileInfo;",
          "2866:  POINT Point;",
          "2867:  RECT rc, DialogRect, DesktopRect;",
          "2869:  HDC hDC;",
          "2870:  PAINTSTRUCT ps;",
          "2871:  int nDeviceIndex, i, nWidth, nHeight, nb_devices, selected_language, offset;",
          "",
          "[Removed Lines]",
          "2868:  LONG progress_style;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3469:  case UM_PROGRESS_INIT:",
          "3470:   isMarquee = (wParam == PBS_MARQUEE);",
          "3474:    SendMessage(hProgress, PBM_SETMARQUEE, TRUE, 0);",
          "3476:    SendMessage(hProgress, PBM_SETPOS, 0, 0);",
          "3478:   SetTaskbarProgressState(TASKBAR_NORMAL);",
          "3479:   SetTaskbarProgressValue(0, MAX_PROGRESS);",
          "3480:   break;",
          "3482:  case UM_PROGRESS_EXIT:",
          "3483:   if (isMarquee) {",
          "3487:    SetTaskbarProgressValue(0, MAX_PROGRESS);",
          "3489:   } else if (!IS_ERROR(FormatStatus)) {",
          "3490:    SetTaskbarProgressValue(MAX_PROGRESS, MAX_PROGRESS);",
          "3495:   }",
          "3496:   SendMessage(hProgress, PBM_SETSTATE, (WPARAM)PBST_NORMAL, 0);",
          "3497:   SetTaskbarProgressState(TASKBAR_NORMAL);",
          "",
          "[Removed Lines]",
          "3471:   if (isMarquee) {",
          "3472:    progress_style = GetWindowLong(hProgress, GWL_STYLE);",
          "3473:    SetWindowLong(hProgress, GWL_STYLE, progress_style | PBS_MARQUEE);",
          "3475:   } else {",
          "3477:   }",
          "3485:    progress_style = GetWindowLong(hProgress, GWL_STYLE);",
          "3486:    SetWindowLong(hProgress, GWL_STYLE, progress_style & (~PBS_MARQUEE));",
          "3488:    SendMessage(hProgress, PBM_SETPOS, 0, 0);",
          "3492:    SendMessage(hProgress, PBM_SETRANGE, 0, ((MAX_PROGRESS+1)<<16) & 0xFFFF0000);",
          "3493:    SendMessage(hProgress, PBM_SETPOS, (MAX_PROGRESS+1), 0);",
          "3494:    SendMessage(hProgress, PBM_SETRANGE, 0, (MAX_PROGRESS<<16) & 0xFFFF0000);",
          "",
          "[Added Lines]",
          "3534:   if (isMarquee)",
          "3536:   else",
          "3544:    SendMessage(hProgress, PBM_SETMARQUEE, FALSE, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3517:    GetDevices(DeviceNum);",
          "3518:   }",
          "3519:   if (!IS_ERROR(FormatStatus)) {",
          "3524:    SetTaskbarProgressState(TASKBAR_NOPROGRESS);",
          "3525:    PrintInfo(0, MSG_210);",
          "3526:    MessageBeep(MB_OK);",
          "",
          "[Removed Lines]",
          "3521:    SendMessage(hProgress, PBM_SETRANGE, 0, ((MAX_PROGRESS+1)<<16) & 0xFFFF0000);",
          "3522:    SendMessage(hProgress, PBM_SETPOS, (MAX_PROGRESS+1), 0);",
          "3523:    SendMessage(hProgress, PBM_SETRANGE, 0, (MAX_PROGRESS<<16) & 0xFFFF0000);",
          "",
          "[Added Lines]",
          "3573:    SendMessage(hProgress, PBM_SETPOS, MAX_PROGRESS, 0);",
          "",
          "---------------"
        ],
        "src/rufus.h||src/rufus.h": [
          "File: src/rufus.h -> src/rufus.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: #define MAX_TOOLTIPS                128",
          "54: #define MAX_SIZE_SUFFIXES           6   // bytes, KB, MB, GB, TB, PB",
          "55: #define MAX_CLUSTER_SIZES           18",
          "57: #define MAX_LOG_SIZE                0x7FFFFFFE",
          "58: #define MAX_REFRESH                 25   // How long we should wait to refresh UI elements (in ms)",
          "59: #define MAX_GUID_STRING_LENGTH      40",
          "",
          "[Removed Lines]",
          "56: #define MAX_PROGRESS                (0xFFFF-1) // leave room for 1 more for insta-progress workaround",
          "",
          "[Added Lines]",
          "56: #define MAX_PROGRESS                0xFFFF",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: #define MBR_UEFI_MARKER             0x49464555 // 'U', 'E', 'F', 'I', as a 32 bit little endian longword",
          "63: #define STATUS_MSG_TIMEOUT          3500  // How long should cheat mode messages appear for on the status bar",
          "64: #define WRITE_RETRIES               3",
          "65: #define FS_DEFAULT                  FS_FAT32",
          "66: #define SINGLE_CLUSTERSIZE_DEFAULT  0x00000100",
          "67: #define BADBLOCK_PATTERNS           {0xaa, 0x55, 0xff, 0x00}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: #define MARQUEE_TIMER_REFRESH       10   // Time between progress bar marquee refreshes, in ms",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "185:  TID_BADBLOCKS_UPDATE,",
          "186:  TID_APP_TIMER,",
          "187:  TID_BLOCKING_TIMER,",
          "189: };",
          "",
          "[Removed Lines]",
          "188:  TID_REFRESH_TIMER",
          "",
          "[Added Lines]",
          "189:  TID_REFRESH_TIMER,",
          "190:  TID_MARQUEE_TIMER",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 232, 326",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 9, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Drive Properties\",IDS_DRIVE_PROPERTIES_TXT,8,6,53,12,NOT WS_GROUP",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 3.0.1251\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 3.0.1252\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "373: VS_VERSION_INFO VERSIONINFO",
          "376:  FILEFLAGSMASK 0x3fL",
          "377: #ifdef _DEBUG",
          "378:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "374:  FILEVERSION 3,0,1251,0",
          "375:  PRODUCTVERSION 3,0,1251,0",
          "",
          "[Added Lines]",
          "374:  FILEVERSION 3,0,1252,0",
          "375:  PRODUCTVERSION 3,0,1252,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "389:         BEGIN",
          "390:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "391:             VALUE \"FileDescription\", \"Rufus\"",
          "393:             VALUE \"InternalName\", \"Rufus\"",
          "394:             VALUE \"LegalCopyright\", \"\ufffd 2011-2018 Pete Batard (GPL v3)\"",
          "395:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "396:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "397:             VALUE \"ProductName\", \"Rufus\"",
          "399:         END",
          "400:     END",
          "401:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "392:             VALUE \"FileVersion\", \"3.0.1251\"",
          "398:             VALUE \"ProductVersion\", \"3.0.1251\"",
          "",
          "[Added Lines]",
          "392:             VALUE \"FileVersion\", \"3.0.1252\"",
          "398:             VALUE \"ProductVersion\", \"3.0.1252\"",
          "",
          "---------------"
        ],
        "src/ui.h||src/ui.h": [
          "File: src/ui.h -> src/ui.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #pragma once",
          "25: static int image_option_move_ids[] = {",
          "26:  IDS_PARTITION_TYPE_TXT,",
          "27:  IDC_PARTITION_TYPE,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #define PROGRESS_BAR_NORMAL_TEXT_COLOR  RGB(0x00, 0x00, 0x00)",
          "27: #define PROGRESS_BAR_INVERTED_TEXT_COLOR RGB(0xFF, 0xFF, 0xFF)",
          "28: #define PROGRESS_BAR_BACKGROUND_COLOR  RGB(0xE6, 0xE6, 0xE6)",
          "29: #define PROGRESS_BAR_BOX_COLOR    RGB(0xBC, 0xBC, 0xBC)",
          "30: #define PROGRESS_BAR_NORMAL_COLOR   RGB(0x06, 0xB0, 0x25)",
          "31: #define PROGRESS_BAR_PAUSED_COLOR   RGB(0xDA, 0xCB, 0x26)",
          "32: #define PROGRESS_BAR_ERROR_COLOR   RGB(0xDA, 0x26, 0x26)",
          "",
          "---------------"
        ]
      }
    }
  ]
}