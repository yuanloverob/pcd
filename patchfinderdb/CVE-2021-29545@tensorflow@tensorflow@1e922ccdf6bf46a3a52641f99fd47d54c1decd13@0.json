{
  "cve_id": "CVE-2021-29545",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger a denial of service via a `CHECK`-fail in converting sparse tensors to CSR Sparse matrices. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/800346f2c03a27e182dd4fba48295f65e7790739/tensorflow/core/kernels/sparse/kernels.cc#L66) does a double redirection to access an element of an array allocated on the heap. If the value at `indices(i, 0)` is such that `indices(i, 0) + 1` is outside the bounds of `csr_row_ptr`, this results in writing outside of bounds of heap allocated data. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "1e922ccdf6bf46a3a52641f99fd47d54c1decd13",
  "patch_info": {
    "commit_hash": "1e922ccdf6bf46a3a52641f99fd47d54c1decd13",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/1e922ccdf6bf46a3a52641f99fd47d54c1decd13",
    "files": [
      "tensorflow/core/kernels/sparse/kernels.cc"
    ],
    "message": "Fix crash in `SparseTensorToCSRSparseMatrixCPUFunctor`\n\nPiperOrigin-RevId: 370110290\nChange-Id: I4451e92661a55c2180f80d38b67a9b50bf5edec5",
    "before_after_code_files": [
      "tensorflow/core/kernels/sparse/kernels.cc||tensorflow/core/kernels/sparse/kernels.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/sparse/kernels.cc||tensorflow/core/kernels/sparse/kernels.cc": [
      "File: tensorflow/core/kernels/sparse/kernels.cc -> tensorflow/core/kernels/sparse/kernels.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: #include \"tensorflow/core/framework/tensor_types.h\"",
      "23: #include \"tensorflow/core/lib/core/errors.h\"",
      "24: #include \"tensorflow/core/lib/core/status.h\"",
      "26: namespace tensorflow {",
      "27: namespace functor {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: #include \"tensorflow/core/platform/errors.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "64:     for (int64 i = 0; i < total_nnz; ++i) {",
      "66:       csr_row_ptr(indices(i, 0) + 1) += 1;",
      "67:       csr_col_ind(i) = indices(i, 1);",
      "68:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67:       int64 ix = indices(i, 0) + 1;",
      "68:       if (ix >= csr_row_ptr.size()) {",
      "69:         return errors::InvalidArgument(\"Got an index \", ix,",
      "70:                                        \" that is outside of csr_row_ptr\");",
      "71:       }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7b18bcd8ba74aaf26b7feb2c7e7aa43ad8b7173f",
      "candidate_info": {
        "commit_hash": "7b18bcd8ba74aaf26b7feb2c7e7aa43ad8b7173f",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/7b18bcd8ba74aaf26b7feb2c7e7aa43ad8b7173f",
        "files": [
          "tensorflow/core/kernels/batching_util/adaptive_shared_batch_scheduler.h",
          "tensorflow/core/kernels/batching_util/basic_batch_scheduler_benchmark_test.cc",
          "tensorflow/core/kernels/batching_util/batch_resource_base.cc",
          "tensorflow/core/kernels/batching_util/batch_resource_base.h",
          "tensorflow/core/kernels/batching_util/concat_split_util.h",
          "tensorflow/core/kernels/batching_util/fake_clock_env.cc",
          "tensorflow/core/kernels/batching_util/fake_clock_env.h",
          "tensorflow/core/kernels/batching_util/periodic_function.h",
          "tensorflow/core/kernels/batching_util/serial_device_batch_scheduler.h",
          "tensorflow/core/kernels/sparse/csr_sparse_matrix_to_dense_op.cc",
          "tensorflow/core/kernels/sparse/csr_sparse_matrix_to_sparse_tensor_op.cc",
          "tensorflow/core/kernels/sparse/kernels.cc",
          "tensorflow/core/kernels/sparse/mat_mul_op.cc",
          "tensorflow/core/kernels/sparse/sparse_cholesky_op.cc",
          "tensorflow/core/kernels/sparse/sparse_mat_mul_op.cc",
          "tensorflow/core/kernels/sparse/sparse_matrix_components_op.cc",
          "tensorflow/core/kernels/sparse/sparse_ordering_amd_op.cc",
          "tensorflow/core/kernels/sparse/transpose_op.cc"
        ],
        "message": "Rename to underlying type rather than alias\n\nTowards removing typedef. This changes from typedef to typedef'd type. This\ndoesn't cover all cases.\n\nPiperOrigin-RevId: 384493276\nChange-Id: Ib7282cf2f8f67e88c1c15f170e0ce9b6d3a7e215",
        "before_after_code_files": [
          "tensorflow/core/kernels/batching_util/adaptive_shared_batch_scheduler.h||tensorflow/core/kernels/batching_util/adaptive_shared_batch_scheduler.h",
          "tensorflow/core/kernels/batching_util/basic_batch_scheduler_benchmark_test.cc||tensorflow/core/kernels/batching_util/basic_batch_scheduler_benchmark_test.cc",
          "tensorflow/core/kernels/batching_util/batch_resource_base.cc||tensorflow/core/kernels/batching_util/batch_resource_base.cc",
          "tensorflow/core/kernels/batching_util/batch_resource_base.h||tensorflow/core/kernels/batching_util/batch_resource_base.h",
          "tensorflow/core/kernels/batching_util/concat_split_util.h||tensorflow/core/kernels/batching_util/concat_split_util.h",
          "tensorflow/core/kernels/batching_util/fake_clock_env.cc||tensorflow/core/kernels/batching_util/fake_clock_env.cc",
          "tensorflow/core/kernels/batching_util/fake_clock_env.h||tensorflow/core/kernels/batching_util/fake_clock_env.h",
          "tensorflow/core/kernels/batching_util/periodic_function.h||tensorflow/core/kernels/batching_util/periodic_function.h",
          "tensorflow/core/kernels/batching_util/serial_device_batch_scheduler.h||tensorflow/core/kernels/batching_util/serial_device_batch_scheduler.h",
          "tensorflow/core/kernels/sparse/csr_sparse_matrix_to_dense_op.cc||tensorflow/core/kernels/sparse/csr_sparse_matrix_to_dense_op.cc",
          "tensorflow/core/kernels/sparse/csr_sparse_matrix_to_sparse_tensor_op.cc||tensorflow/core/kernels/sparse/csr_sparse_matrix_to_sparse_tensor_op.cc",
          "tensorflow/core/kernels/sparse/kernels.cc||tensorflow/core/kernels/sparse/kernels.cc",
          "tensorflow/core/kernels/sparse/mat_mul_op.cc||tensorflow/core/kernels/sparse/mat_mul_op.cc",
          "tensorflow/core/kernels/sparse/sparse_cholesky_op.cc||tensorflow/core/kernels/sparse/sparse_cholesky_op.cc",
          "tensorflow/core/kernels/sparse/sparse_mat_mul_op.cc||tensorflow/core/kernels/sparse/sparse_mat_mul_op.cc",
          "tensorflow/core/kernels/sparse/sparse_matrix_components_op.cc||tensorflow/core/kernels/sparse/sparse_matrix_components_op.cc",
          "tensorflow/core/kernels/sparse/sparse_ordering_amd_op.cc||tensorflow/core/kernels/sparse/sparse_ordering_amd_op.cc",
          "tensorflow/core/kernels/sparse/transpose_op.cc||tensorflow/core/kernels/sparse/transpose_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse/kernels.cc||tensorflow/core/kernels/sparse/kernels.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse/kernels.cc||tensorflow/core/kernels/sparse/kernels.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/batching_util/adaptive_shared_batch_scheduler.h||tensorflow/core/kernels/batching_util/adaptive_shared_batch_scheduler.h": [
          "File: tensorflow/core/kernels/batching_util/adaptive_shared_batch_scheduler.h -> tensorflow/core/kernels/batching_util/adaptive_shared_batch_scheduler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "328: template <typename TaskType>",
          "329: class ASBSBatch : public Batch<TaskType> {",
          "330:  public:",
          "333:       : queue_(queue),",
          "334:         creation_time_micros_(creation_time_micros),",
          "335:         schedulable_time_micros_(creation_time_micros + batch_timeout_micros),",
          "",
          "[Removed Lines]",
          "331:   ASBSBatch(ASBSQueue<TaskType>* queue, int64 creation_time_micros,",
          "332:             int64 batch_timeout_micros, uint64 traceme_context_id)",
          "",
          "[Added Lines]",
          "331:   ASBSBatch(ASBSQueue<TaskType>* queue, int64_t creation_time_micros,",
          "332:             int64_t batch_timeout_micros, uint64 traceme_context_id)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "466:   } else {",
          "467:     batches_.push_back(batch);",
          "468:   }",
          "470:   if (delay_micros <= 0) {",
          "471:     MaybeScheduleNextBatch();",
          "472:     return;",
          "",
          "[Removed Lines]",
          "469:   int64 delay_micros = batch->schedulable_time_micros() - GetEnv()->NowMicros();",
          "",
          "[Added Lines]",
          "469:   int64_t delay_micros =",
          "470:       batch->schedulable_time_micros() - GetEnv()->NowMicros();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "549:   auto best_it = batches_.end();",
          "550:   double best_score = (std::numeric_limits<double>::max)();",
          "552:   for (auto it = batches_.begin(); it != batches_.end(); it++) {",
          "553:     if ((*it)->schedulable_time_micros() > now_micros) continue;",
          "554:     const double score =",
          "",
          "[Removed Lines]",
          "551:   int64 now_micros = GetEnv()->NowMicros();",
          "",
          "[Added Lines]",
          "552:   int64_t now_micros = GetEnv()->NowMicros();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "619:       },",
          "620:       profiler::ContextType::kAdaptiveSharedBatchScheduler,",
          "621:       batch->traceme_context_id());",
          "623:   callback(std::unique_ptr<Batch<TaskType>>(",
          "624:       const_cast<internal::ASBSBatch<TaskType>*>(batch)));",
          "626:   mutex_lock l(mu_);",
          "627:   if (is_express) {",
          "628:     in_flight_express_batches_--;",
          "",
          "[Removed Lines]",
          "622:   int64 start_time = batch->creation_time_micros();",
          "625:   int64 end_time = GetEnv()->NowMicros();",
          "",
          "[Added Lines]",
          "623:   int64_t start_time = batch->creation_time_micros();",
          "626:   int64_t end_time = GetEnv()->NowMicros();",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/batching_util/basic_batch_scheduler_benchmark_test.cc||tensorflow/core/kernels/batching_util/basic_batch_scheduler_benchmark_test.cc": [
          "File: tensorflow/core/kernels/batching_util/basic_batch_scheduler_benchmark_test.cc -> tensorflow/core/kernels/batching_util/basic_batch_scheduler_benchmark_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   virtual void InjectLoad(std::function<void()> injector, int num_injections,",
          "42: };",
          "",
          "[Removed Lines]",
          "41:                           int64 average_injection_interval_micros) const = 0;",
          "",
          "[Added Lines]",
          "41:                           int64_t average_injection_interval_micros) const = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:   ~UniformLoadInjector() override = default;",
          "52:   void InjectLoad(std::function<void()> injector, int num_injections,",
          "55:  private:",
          "56:   TF_DISALLOW_COPY_AND_ASSIGN(UniformLoadInjector);",
          "",
          "[Removed Lines]",
          "53:                   int64 average_injection_interval_micros) const override;",
          "",
          "[Added Lines]",
          "53:                   int64_t average_injection_interval_micros) const override;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:     const int64 next_injection_time_micros =",
          "71:         start_time_micros +",
          "72:         (num_injections_performed * average_injection_interval_micros);",
          "74:     while (now_micros < next_injection_time_micros) {",
          "75:       const int64 kSleepThresholdMicros = 1000;",
          "76:       if (next_injection_time_micros - now_micros >= kSleepThresholdMicros) {",
          "",
          "[Removed Lines]",
          "73:     int64 now_micros = Env::Default()->NowMicros();",
          "",
          "[Added Lines]",
          "73:     int64_t now_micros = Env::Default()->NowMicros();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "183:  public:",
          "184:   LatencyBenchmark(",
          "185:       const BasicBatchScheduler<BenchmarkBatchTask>::Options& scheduler_options,",
          "188:   LatencyBenchmark(const LatencyBenchmark&) = delete;",
          "189:   LatencyBenchmark& operator=(const LatencyBenchmark&) = delete;",
          "",
          "[Removed Lines]",
          "186:       int64 task_injection_interval_micros, int batch_cpu_cost);",
          "",
          "[Added Lines]",
          "186:       int64_t task_injection_interval_micros, int batch_cpu_cost);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "230: LatencyBenchmark::LatencyBenchmark(",
          "231:     const BasicBatchScheduler<BenchmarkBatchTask>::Options& scheduler_options,",
          "233:     : scheduler_options_(scheduler_options),",
          "234:       task_injection_interval_micros_(task_injection_interval_micros),",
          "235:       batch_cpu_cost_(batch_cpu_cost) {}",
          "",
          "[Removed Lines]",
          "232:     int64 task_injection_interval_micros, int batch_cpu_cost)",
          "",
          "[Added Lines]",
          "232:     int64_t task_injection_interval_micros, int batch_cpu_cost)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "335: }",
          "337: static void RunThroughputBenchmark(::testing::benchmark::State& state,",
          "339:                                    int num_batch_threads) {",
          "340:   BasicBatchScheduler<BenchmarkBatchTask>::Options scheduler_options;",
          "341:   const int kMaxBatchSize = 100;",
          "",
          "[Removed Lines]",
          "338:                                    int64 batch_timeout_micros,",
          "",
          "[Added Lines]",
          "338:                                    int64_t batch_timeout_micros,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "386:     ->Arg(32)",
          "387:     ->Arg(64);",
          "391:   BasicBatchScheduler<BenchmarkBatchTask>::Options scheduler_options;",
          "392:   const int kMaxBatchSize = 100;",
          "393:   scheduler_options.max_batch_size = kMaxBatchSize;",
          "",
          "[Removed Lines]",
          "389: static void RunLatencyBenchmark(int64 task_injection_interval_micros,",
          "390:                                 int64 batch_timeout_micros) {",
          "",
          "[Added Lines]",
          "389: static void RunLatencyBenchmark(int64_t task_injection_interval_micros,",
          "390:                                 int64_t batch_timeout_micros) {",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/batching_util/batch_resource_base.cc||tensorflow/core/kernels/batching_util/batch_resource_base.cc": [
          "File: tensorflow/core/kernels/batching_util/batch_resource_base.cc -> tensorflow/core/kernels/batching_util/batch_resource_base.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:       ->IncrementBy(1);",
          "81: }",
          "84:                         const string& op_name) {",
          "85:   static auto* cell = monitoring::PercentileSampler<2>::New(",
          "86:       {\"/tensorflow/serving/batching/batch_delay_us\",",
          "",
          "[Removed Lines]",
          "83: void RecordBatchDelayUs(int64 batch_delay_us, const string& model_name,",
          "",
          "[Added Lines]",
          "83: void RecordBatchDelayUs(int64_t batch_delay_us, const string& model_name,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:   cell->GetCell(model_name, op_name)->Add(static_cast<double>(batch_delay_us));",
          "93: }",
          "96:                                         const string& model_name,",
          "97:                                         const string& op_name) {",
          "98:   static auto* cell = monitoring::Gauge<int64, 2>::New(",
          "",
          "[Removed Lines]",
          "95: void RecordBatchParamBatchTimeoutMicros(int64 batch_timeout_micros,",
          "",
          "[Added Lines]",
          "95: void RecordBatchParamBatchTimeoutMicros(int64_t batch_timeout_micros,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:   cell->GetCell(model_name, op_name)->Set(batch_timeout_micros);",
          "103: }",
          "106:                                   const string& model_name,",
          "107:                                   const string& op_name) {",
          "108:   static auto* cell = monitoring::Gauge<int64, 2>::New(",
          "",
          "[Removed Lines]",
          "105: void RecordBatchParamMaxBatchSize(int64 max_batch_size,",
          "",
          "[Added Lines]",
          "105: void RecordBatchParamMaxBatchSize(int64_t max_batch_size,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:   cell->GetCell(model_name, op_name)->Set(max_batch_size);",
          "112: }",
          "115:                                         const string& model_name,",
          "116:                                         const string& op_name) {",
          "117:   static auto* cell = monitoring::Gauge<int64, 2>::New(",
          "",
          "[Removed Lines]",
          "114: void RecordBatchParamMaxEnqueuedBatches(int64 max_enqueued_batches,",
          "",
          "[Added Lines]",
          "114: void RecordBatchParamMaxEnqueuedBatches(int64_t max_enqueued_batches,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "165: using TensorMatrix = std::vector<std::vector<Tensor>>;",
          "167: Status BatchResourceBase::RegisterInput(",
          "169:     AsyncOpKernel::DoneCallback done_callback) {",
          "170:   std::unique_ptr<BatchTask> batch_components;",
          "171:   TF_RETURN_IF_ERROR(CreateBatchTask(context, &batch_components));",
          "",
          "[Removed Lines]",
          "168:     int64 guid, OpKernelContext* context, const string& batcher_queue_name,",
          "",
          "[Added Lines]",
          "168:     int64_t guid, OpKernelContext* context, const string& batcher_queue_name,",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/batching_util/batch_resource_base.h||tensorflow/core/kernels/batching_util/batch_resource_base.h": [
          "File: tensorflow/core/kernels/batching_util/batch_resource_base.h -> tensorflow/core/kernels/batching_util/batch_resource_base.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:                        const string& batcher_queue_name,",
          "51:                        AsyncOpKernel::DoneCallback done_callback);",
          "",
          "[Removed Lines]",
          "49:   Status RegisterInput(int64 guid, OpKernelContext* context,",
          "",
          "[Added Lines]",
          "49:   Status RegisterInput(int64_t guid, OpKernelContext* context,",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/batching_util/concat_split_util.h||tensorflow/core/kernels/batching_util/concat_split_util.h": [
          "File: tensorflow/core/kernels/batching_util/concat_split_util.h -> tensorflow/core/kernels/batching_util/concat_split_util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   std::vector<std::unique_ptr<typename TTypes<T, 2>::ConstMatrix>> inputs_flat;",
          "47:   inputs_flat.reserve(inputs.size());",
          "49:   for (size_t i = 0; i < inputs.size(); ++i) {",
          "50:     const Tensor& input = inputs[i];",
          "51:     if (input.dims() != input_dims) {",
          "",
          "[Removed Lines]",
          "48:   int64 output_dim0 = 0;",
          "",
          "[Added Lines]",
          "48:   int64_t output_dim0 = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:                       std::vector<Tensor>* outputs, bool* done) {",
          "126:   for (const int64 size : sizes) {",
          "127:     total_size += size;",
          "128:   }",
          "",
          "[Removed Lines]",
          "125:   int64 total_size = 0;",
          "",
          "[Added Lines]",
          "125:   int64_t total_size = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "142:   if (IsInnerDimsSizeAligned<T>(input.shape())) {",
          "144:     for (const int64 size : sizes) {",
          "145:       outputs->emplace_back(input.Slice(position, position + size));",
          "146:       position += size;",
          "",
          "[Removed Lines]",
          "143:     int64 position = 0;",
          "",
          "[Added Lines]",
          "143:     int64_t position = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "157: Status SplitCPU(OpKernelContext* context, const Tensor& input,",
          "158:                 const gtl::ArraySlice<int64> sizes,",
          "159:                 std::vector<Tensor>* outputs) {",
          "161:   for (int i = 1; i < input.shape().dims(); ++i) {",
          "162:     suffix_dim_size *= input.shape().dim_size(i);",
          "163:   }",
          "164:   auto input_reshaped =",
          "165:       input.shaped<T, 2>({input.shape().dim_size(0), suffix_dim_size});",
          "168:   for (const int64 size : sizes) {",
          "169:     TensorShape output_shape = input.shape();",
          "170:     output_shape.set_dim(0, size);",
          "",
          "[Removed Lines]",
          "160:   int64 suffix_dim_size = 1;",
          "167:   int64 position = 0;",
          "",
          "[Added Lines]",
          "160:   int64_t suffix_dim_size = 1;",
          "167:   int64_t position = 0;",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/batching_util/fake_clock_env.cc||tensorflow/core/kernels/batching_util/fake_clock_env.cc": [
          "File: tensorflow/core/kernels/batching_util/fake_clock_env.cc -> tensorflow/core/kernels/batching_util/fake_clock_env.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:   }",
          "73: }",
          "76:   if (micros == 0) {",
          "77:     return;",
          "78:   }",
          "",
          "[Removed Lines]",
          "75: void FakeClockEnv::SleepForMicroseconds(int64 micros) {",
          "",
          "[Added Lines]",
          "75: void FakeClockEnv::SleepForMicroseconds(int64_t micros) {",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/batching_util/fake_clock_env.h||tensorflow/core/kernels/batching_util/fake_clock_env.h": [
          "File: tensorflow/core/kernels/batching_util/fake_clock_env.h -> tensorflow/core/kernels/batching_util/fake_clock_env.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   uint64 NowMicros() const override;",
          "58:  private:",
          "59:   mutable mutex mu_;",
          "",
          "[Removed Lines]",
          "56:   void SleepForMicroseconds(int64 micros) override;",
          "",
          "[Added Lines]",
          "56:   void SleepForMicroseconds(int64_t micros) override;",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/batching_util/periodic_function.h||tensorflow/core/kernels/batching_util/periodic_function.h": [
          "File: tensorflow/core/kernels/batching_util/periodic_function.h -> tensorflow/core/kernels/batching_util/periodic_function.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:   };",
          "105:   ~PeriodicFunction();",
          "",
          "[Removed Lines]",
          "102:   PeriodicFunction(const std::function<void()>& function, int64 interval_micros,",
          "103:                    const Options& options = Options());",
          "",
          "[Added Lines]",
          "102:   PeriodicFunction(const std::function<void()>& function,",
          "103:                    int64_t interval_micros, const Options& options = Options());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:   void NotifyStop();",
          "116:   const std::function<void()> function_;  // Actual client function",
          "117:   const int64 interval_micros_;           // Interval between calls.",
          "",
          "[Removed Lines]",
          "114:   void RunLoop(int64 start) TF_LOCKS_EXCLUDED(mutex_);",
          "",
          "[Added Lines]",
          "114:   void RunLoop(int64_t start) TF_LOCKS_EXCLUDED(mutex_);",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/batching_util/serial_device_batch_scheduler.h||tensorflow/core/kernels/batching_util/serial_device_batch_scheduler.h": [
          "File: tensorflow/core/kernels/batching_util/serial_device_batch_scheduler.h -> tensorflow/core/kernels/batching_util/serial_device_batch_scheduler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "240: template <typename TaskType>",
          "241: class SDBSBatch : public Batch<TaskType> {",
          "242:  public:",
          "244:       : queue_(queue), creation_time_micros_(creation_time_micros) {}",
          "246:   ~SDBSBatch() override {}",
          "",
          "[Removed Lines]",
          "243:   SDBSBatch(SDBSQueue<TaskType>* queue, int64 creation_time_micros)",
          "",
          "[Added Lines]",
          "243:   SDBSBatch(SDBSQueue<TaskType>* queue, int64_t creation_time_micros)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378:     }",
          "379:     if (batches_.empty()) {",
          "380:       no_batch_count_++;",
          "383:       mu_.unlock();",
          "384:       env()->SleepForMicroseconds(sleep_time);",
          "385:       continue;",
          "",
          "[Removed Lines]",
          "381:       int64 sleep_time = batch_period_micros_ ? batch_period_micros_",
          "382:                                               : kIdleThreadSleepTimeMicros;",
          "",
          "[Added Lines]",
          "381:       int64_t sleep_time = batch_period_micros_ ? batch_period_micros_",
          "382:                                                 : kIdleThreadSleepTimeMicros;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "405:     batch->queue()->ReleaseBatch(batch);",
          "406:     auto callback = queues_and_callbacks_[batch->queue()];",
          "407:     mu_.unlock();",
          "409:     callback(std::unique_ptr<Batch<TaskType>>(",
          "410:         const_cast<internal::SDBSBatch<TaskType>*>(batch)));",
          "412:     mu_.lock();",
          "413:     batch_count_++;",
          "414:     batch_latency_sum_ += end_time - start_time;",
          "",
          "[Removed Lines]",
          "408:     int64 start_time = env()->NowMicros();",
          "411:     int64 end_time = env()->NowMicros();",
          "",
          "[Added Lines]",
          "408:     int64_t start_time = env()->NowMicros();",
          "411:     int64_t end_time = env()->NowMicros();",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/sparse/csr_sparse_matrix_to_dense_op.cc||tensorflow/core/kernels/sparse/csr_sparse_matrix_to_dense_op.cc": [
          "File: tensorflow/core/kernels/sparse/csr_sparse_matrix_to_dense_op.cc -> tensorflow/core/kernels/sparse/csr_sparse_matrix_to_dense_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:     auto dense_ptr = dense_t.flat<T>().data();",
          "97:         const int64 csr_batch_offset = batch_ptrs(batch_idx);",
          "98:         const int64 dense_batch_offset = batch_idx * num_rows * num_cols;",
          "",
          "[Removed Lines]",
          "95:     auto shard = [&](int64 batch_begin, int64 batch_end) {",
          "96:       for (int64 batch_idx = batch_begin; batch_idx < batch_end; ++batch_idx) {",
          "",
          "[Added Lines]",
          "95:     auto shard = [&](int64_t batch_begin, int64_t batch_end) {",
          "96:       for (int64_t batch_idx = batch_begin; batch_idx < batch_end;",
          "97:            ++batch_idx) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:           const int64 row_offset = batch_idx * (num_rows + 1) + row_idx;",
          "102:           const int64 col_begin = row_ptr(row_offset);",
          "103:           const int64 col_end = row_ptr(row_offset + 1);",
          "105:             const int64 col_idx = col_ind(csr_batch_offset + i);",
          "106:             dense_ptr[dense_batch_offset + (row_idx * num_cols) + col_idx] =",
          "107:                 values(csr_batch_offset + i);",
          "",
          "[Removed Lines]",
          "104:           for (int64 i = col_begin; i < col_end; ++i) {",
          "",
          "[Added Lines]",
          "105:           for (int64_t i = col_begin; i < col_end; ++i) {",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/sparse/csr_sparse_matrix_to_sparse_tensor_op.cc||tensorflow/core/kernels/sparse/csr_sparse_matrix_to_sparse_tensor_op.cc": [
          "File: tensorflow/core/kernels/sparse/csr_sparse_matrix_to_sparse_tensor_op.cc -> tensorflow/core/kernels/sparse/csr_sparse_matrix_to_sparse_tensor_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     auto batch_ptrs = csr_sparse_matrix->batch_pointers().vec<int32>();",
          "101:         const int64 csr_batch_offset = batch_ptrs(batch_idx);",
          "103:         for (int row_idx = 0; row_idx < num_rows; ++row_idx) {",
          "",
          "[Removed Lines]",
          "99:     auto shard = [&](int64 batch_begin, int64 batch_end) {",
          "100:       for (int64 batch_idx = batch_begin; batch_idx < batch_end; ++batch_idx) {",
          "",
          "[Added Lines]",
          "99:     auto shard = [&](int64_t batch_begin, int64_t batch_end) {",
          "100:       for (int64_t batch_idx = batch_begin; batch_idx < batch_end;",
          "101:            ++batch_idx) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:           const int64 col_begin = csr_row_ptr(row_offset);",
          "109:           const int64 col_end = csr_row_ptr(row_offset + 1);",
          "111:             const int64 col_idx = csr_col_ind(csr_batch_offset + i);",
          "112:             const int64 indices_offset = rank * (csr_batch_offset + i);",
          "",
          "[Removed Lines]",
          "110:           for (int64 i = col_begin; i < col_end; ++i) {",
          "",
          "[Added Lines]",
          "111:           for (int64_t i = col_begin; i < col_end; ++i) {",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/sparse/kernels.cc||tensorflow/core/kernels/sparse/kernels.cc": [
          "File: tensorflow/core/kernels/sparse/kernels.cc -> tensorflow/core/kernels/sparse/kernels.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     batch_ptr(0) = 0;",
          "63:     ++prev_batch;",
          "68:       if (ix >= csr_row_ptr.size()) {",
          "69:         return errors::InvalidArgument(\"Got an index \", ix,",
          "70:                                        \" that is outside of csr_row_ptr\");",
          "",
          "[Removed Lines]",
          "65:     for (int64 i = 0; i < total_nnz; ++i) {",
          "67:       int64 ix = indices(i, 0) + 1;",
          "",
          "[Added Lines]",
          "65:     for (int64_t i = 0; i < total_nnz; ++i) {",
          "67:       int64_t ix = indices(i, 0) + 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:       csr_col_ind(i) = indices(i, 1);",
          "74:     }",
          "75:   } else {  // rank == 3",
          "77:       const int cur_batch = indices(i, 0);",
          "79:       csr_row_ptr(cur_batch * (num_rows + 1) + indices(i, 1) + 1) += 1;",
          "",
          "[Removed Lines]",
          "76:     for (int64 i = 0; i < total_nnz; ++i) {",
          "",
          "[Added Lines]",
          "76:     for (int64_t i = 0; i < total_nnz; ++i) {",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/sparse/mat_mul_op.cc||tensorflow/core/kernels/sparse/mat_mul_op.cc": [
          "File: tensorflow/core/kernels/sparse/mat_mul_op.cc -> tensorflow/core/kernels/sparse/mat_mul_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:     const Tensor& matrix_b = ctx->input(1);",
          "174:     int rank;",
          "176:     OP_REQUIRES_OK(ctx, this->ValidateInputs(*sparse_matrix_a, matrix_b, &rank,",
          "177:                                              &batch_size));",
          "179:     const auto dense_shape = sparse_matrix_a->dense_shape().vec<int64>();",
          "185:     if (this->transpose_a_) {",
          "186:       std::swap(num_lhs_rows, num_lhs_cols);",
          "",
          "[Removed Lines]",
          "175:     int64 batch_size;",
          "180:     int64 num_lhs_rows = dense_shape(rank - 2);",
          "181:     int64 num_lhs_cols = dense_shape(rank - 1);",
          "182:     int64 num_rhs_rows = matrix_b.dim_size(rank - 2);",
          "183:     int64 num_rhs_cols = matrix_b.dim_size(rank - 1);",
          "",
          "[Added Lines]",
          "175:     int64_t batch_size;",
          "180:     int64_t num_lhs_rows = dense_shape(rank - 2);",
          "181:     int64_t num_lhs_cols = dense_shape(rank - 1);",
          "182:     int64_t num_rhs_rows = matrix_b.dim_size(rank - 2);",
          "183:     int64_t num_rhs_cols = matrix_b.dim_size(rank - 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "268:     row_ptrs->resize(num_shard_rows + 1);",
          "269:     const int64 row_offset =",
          "270:         csr_matrix.row_pointers_vec(batch_index)(row_begin);",
          "272:       row_ptrs->at(row_idx) =",
          "273:           csr_matrix.row_pointers_vec(batch_index)(row_begin + row_idx) -",
          "274:           row_offset;",
          "",
          "[Removed Lines]",
          "271:     for (int64 row_idx = 0; row_idx <= num_shard_rows; ++row_idx) {",
          "",
          "[Added Lines]",
          "271:     for (int64_t row_idx = 0; row_idx <= num_shard_rows; ++row_idx) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "301:             thread::ThreadPool::SchedulingStrategy::",
          "302:                 kFixedBlockSize /* strategy */,",
          "303:             absl::nullopt /* cost_per_unit */, block_size),",
          "305:           HandleBatchAndRowRange(",
          "306:               num_lhs_rows, batch_and_row_begin, batch_and_row_end,",
          "308:                 const int64 num_shard_rows = row_end - row_begin;",
          "",
          "[Removed Lines]",
          "304:         [&](int64 batch_and_row_begin, int64 batch_and_row_end) {",
          "307:               [&](int64 batch_idx, int64 row_begin, int64 row_end) {",
          "",
          "[Added Lines]",
          "304:         [&](int64_t batch_and_row_begin, int64_t batch_and_row_end) {",
          "307:               [&](int64_t batch_idx, int64_t row_begin, int64_t row_end) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "372:             thread::ThreadPool::SchedulingStrategy::",
          "373:                 kFixedBlockSize /* strategy */,",
          "374:             absl::nullopt /* cost_per_unit */, block_size),",
          "376:           HandleBatchAndRowRange(",
          "377:               num_lhs_cols, batch_and_row_begin, batch_and_row_end,",
          "379:                 const int64 num_shard_rows = row_end - row_begin;",
          "",
          "[Removed Lines]",
          "375:         [&](int64 batch_and_row_begin, int64 batch_and_row_end, int tid) {",
          "378:               [&](int64 batch_idx, int64 row_begin, int64 row_end) {",
          "",
          "[Added Lines]",
          "375:         [&](int64_t batch_and_row_begin, int64_t batch_and_row_end, int tid) {",
          "378:               [&](int64_t batch_idx, int64_t row_begin, int64_t row_end) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "425:   void HandleBatchAndRowRange(",
          "426:       const int64 num_rows, const int64 batch_and_row_begin,",
          "427:       const int64 batch_and_row_end,",
          "430:     const int64 batch_begin = batch_and_row_begin / num_rows;",
          "431:     const int64 batch_end_inclusive = batch_and_row_end / num_rows;",
          "434:          ++batch_idx) {",
          "",
          "[Removed Lines]",
          "428:       const std::function<void(int64, int64, int64)>& fn) {",
          "433:     for (int64 batch_idx = batch_begin; batch_idx <= batch_end_inclusive;",
          "",
          "[Added Lines]",
          "428:       const std::function<void(int64_t, int64_t, int64_t)>& fn) {",
          "433:     for (int64_t batch_idx = batch_begin; batch_idx <= batch_end_inclusive;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "502:     const Tensor& b_t = ctx->input(1);",
          "504:     int rank;",
          "506:     OP_REQUIRES_OK(ctx,",
          "507:                    this->ValidateInputs(*a_matrix, b_t, &rank, &batch_size));",
          "",
          "[Removed Lines]",
          "505:     int64 batch_size;",
          "",
          "[Added Lines]",
          "505:     int64_t batch_size;",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/sparse/sparse_cholesky_op.cc||tensorflow/core/kernels/sparse/sparse_cholesky_op.cc": [
          "File: tensorflow/core/kernels/sparse/sparse_cholesky_op.cc -> tensorflow/core/kernels/sparse/sparse_cholesky_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:     OP_REQUIRES_OK(ctx, ExtractVariantFromInput(ctx, 0, &input_matrix));",
          "83:     const Tensor& input_permutation_indices = ctx->input(1);",
          "86:     int batch_size;",
          "87:     OP_REQUIRES_OK(ctx, ValidateInputs(*input_matrix, input_permutation_indices,",
          "88:                                        &batch_size, &num_rows));",
          "",
          "[Removed Lines]",
          "85:     int64 num_rows;",
          "",
          "[Added Lines]",
          "85:     int64_t num_rows;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:     std::atomic<int64> invalid_input_index(-1);",
          "112:     Shard(worker_threads.num_threads, worker_threads.workers, batch_size,",
          "113:           sparse_cholesky_cost_per_batch,",
          "116:                  ++batch_index) {",
          "",
          "[Removed Lines]",
          "114:           [&](int64 batch_begin, int64 batch_end) {",
          "115:             for (int64 batch_index = batch_begin; batch_index < batch_end;",
          "",
          "[Added Lines]",
          "114:           [&](int64_t batch_begin, int64_t batch_end) {",
          "115:             for (int64_t batch_index = batch_begin; batch_index < batch_end;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "191:     Shard(worker_threads.num_threads, worker_threads.workers, batch_size,",
          "192:           (3 * total_nnz) / batch_size /* cost per unit */,",
          "195:                  ++batch_index) {",
          "196:               const SparseMatrix& cholesky_factor =",
          "197:                   sparse_cholesky_factors[batch_index];",
          "",
          "[Removed Lines]",
          "193:           [&](int64 batch_begin, int64 batch_end) {",
          "194:             for (int64 batch_index = batch_begin; batch_index < batch_end;",
          "",
          "[Added Lines]",
          "193:           [&](int64_t batch_begin, int64_t batch_end) {",
          "194:             for (int64_t batch_index = batch_begin; batch_index < batch_end;",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/sparse/sparse_mat_mul_op.cc||tensorflow/core/kernels/sparse/sparse_mat_mul_op.cc": [
          "File: tensorflow/core/kernels/sparse/sparse_mat_mul_op.cc -> tensorflow/core/kernels/sparse/sparse_mat_mul_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:     Shard(worker_threads.num_threads, worker_threads.workers, batch_size,",
          "188:                  ++batch_idx) {",
          "",
          "[Removed Lines]",
          "186:           matmul_cost_per_batch, [&](int64 batch_begin, int64 batch_end) {",
          "187:             for (int64 batch_idx = batch_begin; batch_idx < batch_end;",
          "",
          "[Added Lines]",
          "186:           matmul_cost_per_batch, [&](int64_t batch_begin, int64_t batch_end) {",
          "187:             for (int64_t batch_idx = batch_begin; batch_idx < batch_end;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:     Shard(worker_threads.num_threads, worker_threads.workers, batch_size,",
          "227:           (3 * total_nnz) / batch_size /* cost per unit */,",
          "230:                  ++batch_idx) {",
          "231:               const SparseMatrix& output_matrix = output_matrices[batch_idx];",
          "232:               const int64 nnz = output_matrix.nonZeros();",
          "",
          "[Removed Lines]",
          "228:           [&](int64 batch_begin, int64 batch_end) {",
          "229:             for (int64 batch_idx = batch_begin; batch_idx < batch_end;",
          "",
          "[Added Lines]",
          "228:           [&](int64_t batch_begin, int64_t batch_end) {",
          "229:             for (int64_t batch_idx = batch_begin; batch_idx < batch_end;",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/sparse/sparse_matrix_components_op.cc||tensorflow/core/kernels/sparse/sparse_matrix_components_op.cc": [
          "File: tensorflow/core/kernels/sparse/sparse_matrix_components_op.cc -> tensorflow/core/kernels/sparse/sparse_matrix_components_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:     } else {",
          "70:       auto batch_ptrs = csr_sparse_matrix->batch_pointers().vec<int32>();",
          "71:       auto dense_shape = csr_sparse_matrix->dense_shape().vec<int64>();",
          "73:       int nnz = batch_ptrs(index + 1) - batch_ptrs(index);",
          "74:       Tensor* row_ptrs_t;",
          "75:       Tensor* col_inds_t;",
          "",
          "[Removed Lines]",
          "72:       int64 rows = dense_shape(1);",
          "",
          "[Added Lines]",
          "72:       int64_t rows = dense_shape(1);",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/sparse/sparse_ordering_amd_op.cc||tensorflow/core/kernels/sparse/sparse_ordering_amd_op.cc": [
          "File: tensorflow/core/kernels/sparse/sparse_ordering_amd_op.cc -> tensorflow/core/kernels/sparse/sparse_ordering_amd_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:         10 * num_rows * (input_matrix->total_nnz() / batch_size);",
          "97:     Shard(",
          "98:         worker_threads.num_threads, worker_threads.workers, batch_size,",
          "101:                ++batch_index) {",
          "",
          "[Removed Lines]",
          "99:         amd_cost_per_batch, [&](int64 batch_begin, int64 batch_end) {",
          "100:           for (int64 batch_index = batch_begin; batch_index < batch_end;",
          "",
          "[Added Lines]",
          "99:         amd_cost_per_batch, [&](int64_t batch_begin, int64_t batch_end) {",
          "100:           for (int64_t batch_index = batch_begin; batch_index < batch_end;",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/sparse/transpose_op.cc||tensorflow/core/kernels/sparse/transpose_op.cc": [
          "File: tensorflow/core/kernels/sparse/transpose_op.cc -> tensorflow/core/kernels/sparse/transpose_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:       output->row_ptr(input.col_ind(i) + 1) += 1;",
          "229:     }",
          "230:     std::partial_sum(output->row_ptr.data(),",
          "",
          "[Removed Lines]",
          "227:     for (int64 i = 0; i < nnz; ++i) {",
          "",
          "[Added Lines]",
          "227:     for (int64_t i = 0; i < nnz; ++i) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:     for (int row_idx = 0; row_idx < num_rows; ++row_idx) {",
          "238:       const int64 row_begin = input.row_ptr(row_idx);",
          "239:       const int64 row_end = input.row_ptr(row_idx + 1);",
          "241:         const int col_idx = input.col_ind(i);",
          "242:         const int64 offset =",
          "243:             output->row_ptr(col_idx) + current_col_count[col_idx];",
          "",
          "[Removed Lines]",
          "240:       for (int64 i = row_begin; i < row_end; ++i) {",
          "",
          "[Added Lines]",
          "240:       for (int64_t i = row_begin; i < row_end; ++i) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6f5e8ab0330ddfeef7b76b6fdb1e8bb0ce527869",
      "candidate_info": {
        "commit_hash": "6f5e8ab0330ddfeef7b76b6fdb1e8bb0ce527869",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/6f5e8ab0330ddfeef7b76b6fdb1e8bb0ce527869",
        "files": [
          "tensorflow/core/kernels/sparse/kernels.cc"
        ],
        "message": "Fix crash in `SparseTensorToCSRSparseMatrixCPUFunctor`\n\nPiperOrigin-RevId: 370110290\nChange-Id: I4451e92661a55c2180f80d38b67a9b50bf5edec5",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse/kernels.cc||tensorflow/core/kernels/sparse/kernels.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse/kernels.cc||tensorflow/core/kernels/sparse/kernels.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse/kernels.cc||tensorflow/core/kernels/sparse/kernels.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse/kernels.cc||tensorflow/core/kernels/sparse/kernels.cc": [
          "File: tensorflow/core/kernels/sparse/kernels.cc -> tensorflow/core/kernels/sparse/kernels.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"tensorflow/core/framework/tensor_types.h\"",
          "23: #include \"tensorflow/core/lib/core/errors.h\"",
          "24: #include \"tensorflow/core/lib/core/status.h\"",
          "26: namespace tensorflow {",
          "27: namespace functor {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:     for (int64 i = 0; i < total_nnz; ++i) {",
          "66:       csr_row_ptr(indices(i, 0) + 1) += 1;",
          "67:       csr_col_ind(i) = indices(i, 1);",
          "68:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:       int64 ix = indices(i, 0) + 1;",
          "68:       if (ix >= csr_row_ptr.size()) {",
          "69:         return errors::InvalidArgument(\"Got an index \", ix,",
          "70:                                        \" that is outside of csr_row_ptr\");",
          "71:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27cdadab71c9ac6dbf5d26c352822ac74e4326e4",
      "candidate_info": {
        "commit_hash": "27cdadab71c9ac6dbf5d26c352822ac74e4326e4",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/27cdadab71c9ac6dbf5d26c352822ac74e4326e4",
        "files": [
          "tensorflow/core/kernels/sparse/kernels.cc"
        ],
        "message": "Fix crash in `SparseTensorToCSRSparseMatrixCPUFunctor`\n\nPiperOrigin-RevId: 370110290\nChange-Id: I4451e92661a55c2180f80d38b67a9b50bf5edec5",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse/kernels.cc||tensorflow/core/kernels/sparse/kernels.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse/kernels.cc||tensorflow/core/kernels/sparse/kernels.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse/kernels.cc||tensorflow/core/kernels/sparse/kernels.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse/kernels.cc||tensorflow/core/kernels/sparse/kernels.cc": [
          "File: tensorflow/core/kernels/sparse/kernels.cc -> tensorflow/core/kernels/sparse/kernels.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"tensorflow/core/framework/tensor_types.h\"",
          "23: #include \"tensorflow/core/lib/core/errors.h\"",
          "24: #include \"tensorflow/core/lib/core/status.h\"",
          "26: namespace tensorflow {",
          "27: namespace functor {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:     for (int64 i = 0; i < total_nnz; ++i) {",
          "66:       csr_row_ptr(indices(i, 0) + 1) += 1;",
          "67:       csr_col_ind(i) = indices(i, 1);",
          "68:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:       int64 ix = indices(i, 0) + 1;",
          "68:       if (ix >= csr_row_ptr.size()) {",
          "69:         return errors::InvalidArgument(\"Got an index \", ix,",
          "70:                                        \" that is outside of csr_row_ptr\");",
          "71:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "331bac493cbd6e8f1b7349abab35d99816f2613b",
      "candidate_info": {
        "commit_hash": "331bac493cbd6e8f1b7349abab35d99816f2613b",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/331bac493cbd6e8f1b7349abab35d99816f2613b",
        "files": [
          "tensorflow/core/kernels/sparse/kernels.cc"
        ],
        "message": "Fix crash in `SparseTensorToCSRSparseMatrixCPUFunctor`\n\nPiperOrigin-RevId: 370110290\nChange-Id: I4451e92661a55c2180f80d38b67a9b50bf5edec5",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse/kernels.cc||tensorflow/core/kernels/sparse/kernels.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse/kernels.cc||tensorflow/core/kernels/sparse/kernels.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse/kernels.cc||tensorflow/core/kernels/sparse/kernels.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse/kernels.cc||tensorflow/core/kernels/sparse/kernels.cc": [
          "File: tensorflow/core/kernels/sparse/kernels.cc -> tensorflow/core/kernels/sparse/kernels.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"tensorflow/core/framework/tensor_types.h\"",
          "23: #include \"tensorflow/core/lib/core/errors.h\"",
          "24: #include \"tensorflow/core/lib/core/status.h\"",
          "26: namespace tensorflow {",
          "27: namespace functor {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:     for (int64 i = 0; i < total_nnz; ++i) {",
          "66:       csr_row_ptr(indices(i, 0) + 1) += 1;",
          "67:       csr_col_ind(i) = indices(i, 1);",
          "68:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:       int64 ix = indices(i, 0) + 1;",
          "68:       if (ix >= csr_row_ptr.size()) {",
          "69:         return errors::InvalidArgument(\"Got an index \", ix,",
          "70:                                        \" that is outside of csr_row_ptr\");",
          "71:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d8c561a65cf9f9ac266254aa4de4337696ac5d8",
      "candidate_info": {
        "commit_hash": "4d8c561a65cf9f9ac266254aa4de4337696ac5d8",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/4d8c561a65cf9f9ac266254aa4de4337696ac5d8",
        "files": [
          "tensorflow/core/kernels/sparse/kernels.cc"
        ],
        "message": "Fix crash in `SparseTensorToCSRSparseMatrixCPUFunctor`\n\nPiperOrigin-RevId: 370110290\nChange-Id: I4451e92661a55c2180f80d38b67a9b50bf5edec5",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse/kernels.cc||tensorflow/core/kernels/sparse/kernels.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse/kernels.cc||tensorflow/core/kernels/sparse/kernels.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse/kernels.cc||tensorflow/core/kernels/sparse/kernels.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse/kernels.cc||tensorflow/core/kernels/sparse/kernels.cc": [
          "File: tensorflow/core/kernels/sparse/kernels.cc -> tensorflow/core/kernels/sparse/kernels.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"tensorflow/core/framework/tensor_types.h\"",
          "23: #include \"tensorflow/core/lib/core/errors.h\"",
          "24: #include \"tensorflow/core/lib/core/status.h\"",
          "26: namespace tensorflow {",
          "27: namespace functor {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:     for (int64 i = 0; i < total_nnz; ++i) {",
          "66:       csr_row_ptr(indices(i, 0) + 1) += 1;",
          "67:       csr_col_ind(i) = indices(i, 1);",
          "68:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:       int64 ix = indices(i, 0) + 1;",
          "68:       if (ix >= csr_row_ptr.size()) {",
          "69:         return errors::InvalidArgument(\"Got an index \", ix,",
          "70:                                        \" that is outside of csr_row_ptr\");",
          "71:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}