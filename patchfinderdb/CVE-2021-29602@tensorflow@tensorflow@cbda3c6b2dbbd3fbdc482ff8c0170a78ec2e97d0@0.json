{
  "cve_id": "CVE-2021-29602",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. The implementation of the `DepthwiseConv` TFLite operator is vulnerable to a division by zero error(https://github.com/tensorflow/tensorflow/blob/1a8e885b864c818198a5b2c0cbbeca5a1e833bc8/tensorflow/lite/kernels/depthwise_conv.cc#L287-L288). An attacker can craft a model such that `input`'s fourth dimension would be 0. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "cbda3c6b2dbbd3fbdc482ff8c0170a78ec2e97d0",
  "patch_info": {
    "commit_hash": "cbda3c6b2dbbd3fbdc482ff8c0170a78ec2e97d0",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/cbda3c6b2dbbd3fbdc482ff8c0170a78ec2e97d0",
    "files": [
      "tensorflow/lite/kernels/depthwise_conv.cc"
    ],
    "message": "Prevent divisions by 0\n\nPiperOrigin-RevId: 371003153\nChange-Id: Idef56c95b9fcaeb97f87e18c7a674dbeb5173204",
    "before_after_code_files": [
      "tensorflow/lite/kernels/depthwise_conv.cc||tensorflow/lite/kernels/depthwise_conv.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/lite/kernels/depthwise_conv.cc||tensorflow/lite/kernels/depthwise_conv.cc": [
      "File: tensorflow/lite/kernels/depthwise_conv.cc -> tensorflow/lite/kernels/depthwise_conv.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "285:                                     int16* depth_multiplier) {",
      "286:   int num_filter_channels = SizeOfDimension(filter, 3);",
      "287:   int num_input_channels = SizeOfDimension(input, 3);",
      "288:   TF_LITE_ENSURE_EQ(context, num_filter_channels % num_input_channels, 0);",
      "291:   return kTfLiteOk;",
      "292: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "288:   TF_LITE_ENSURE(context, num_input_channels != 0);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "455:   float output_activation_min, output_activation_max;",
      "456:   CalculateActivationRange(params->activation, &output_activation_min,",
      "457:                            &output_activation_max);",
      "459:   const int batch_size = SizeOfDimension(input, 0);",
      "460:   TfLiteTensor* input_quantized;",
      "461:   TF_LITE_ENSURE_OK(context,",
      "462:                     GetTemporarySafe(context, node, data->input_quantized_index,",
      "",
      "[Removed Lines]",
      "458:   const int input_size = NumElements(input) / SizeOfDimension(input, 0);",
      "",
      "[Added Lines]",
      "459:   TF_LITE_ENSURE(context, batch_size != 0);",
      "460:   const int input_size = NumElements(input) / batch_size;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7448d712c46fc2c3ef3fd13d8187c542cae4f46e",
      "candidate_info": {
        "commit_hash": "7448d712c46fc2c3ef3fd13d8187c542cae4f46e",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/7448d712c46fc2c3ef3fd13d8187c542cae4f46e",
        "files": [
          "tensorflow/lite/kernels/depthwise_conv.cc"
        ],
        "message": "Prevent divisions by 0",
        "before_after_code_files": [
          "tensorflow/lite/kernels/depthwise_conv.cc||tensorflow/lite/kernels/depthwise_conv.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/depthwise_conv.cc||tensorflow/lite/kernels/depthwise_conv.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/depthwise_conv.cc||tensorflow/lite/kernels/depthwise_conv.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/depthwise_conv.cc||tensorflow/lite/kernels/depthwise_conv.cc": [
          "File: tensorflow/lite/kernels/depthwise_conv.cc -> tensorflow/lite/kernels/depthwise_conv.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "274:                                     int16* depth_multiplier) {",
          "275:   int num_filter_channels = SizeOfDimension(filter, 3);",
          "276:   int num_input_channels = SizeOfDimension(input, 3);",
          "277:   TF_LITE_ENSURE_EQ(context, num_filter_channels % num_input_channels, 0);",
          "280:   return kTfLiteOk;",
          "281: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277:   TF_LITE_ENSURE(context, num_input_channels != 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "444:   float output_activation_min, output_activation_max;",
          "445:   CalculateActivationRange(params->activation, &output_activation_min,",
          "446:                            &output_activation_max);",
          "448:   const int batch_size = SizeOfDimension(input, 0);",
          "449:   const TfLiteTensor* input_quantized =",
          "450:       GetTemporary(context, node, data->input_quantized_index);",
          "451:   int8_t* quantized_input_ptr_batch = input_quantized->data.int8;",
          "",
          "[Removed Lines]",
          "447:   const int input_size = NumElements(input) / SizeOfDimension(input, 0);",
          "",
          "[Added Lines]",
          "448:   TF_LITE_ENSURE(context, batch_size != 0);",
          "449:   const int input_size = NumElements(input) / batch_size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "34c68a212b738dd7a938c759313f878d410f2eb5",
      "candidate_info": {
        "commit_hash": "34c68a212b738dd7a938c759313f878d410f2eb5",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/34c68a212b738dd7a938c759313f878d410f2eb5",
        "files": [
          "tensorflow/lite/kernels/depthwise_conv.cc"
        ],
        "message": "Prevent divisions by 0",
        "before_after_code_files": [
          "tensorflow/lite/kernels/depthwise_conv.cc||tensorflow/lite/kernels/depthwise_conv.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/depthwise_conv.cc||tensorflow/lite/kernels/depthwise_conv.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/depthwise_conv.cc||tensorflow/lite/kernels/depthwise_conv.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/depthwise_conv.cc||tensorflow/lite/kernels/depthwise_conv.cc": [
          "File: tensorflow/lite/kernels/depthwise_conv.cc -> tensorflow/lite/kernels/depthwise_conv.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:                                     int16* depth_multiplier) {",
          "176:   int num_filter_channels = SizeOfDimension(filter, 3);",
          "177:   int num_input_channels = SizeOfDimension(input, 3);",
          "178:   TF_LITE_ENSURE_EQ(context, num_filter_channels % num_input_channels, 0);",
          "181:   return kTfLiteOk;",
          "182: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:   TF_LITE_ENSURE(context, num_input_channels != 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9071cb6ded94815502808c45e8619c067c2e7b42",
      "candidate_info": {
        "commit_hash": "9071cb6ded94815502808c45e8619c067c2e7b42",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/9071cb6ded94815502808c45e8619c067c2e7b42",
        "files": [
          "tensorflow/lite/kernels/depthwise_conv.cc"
        ],
        "message": "Prevent divisions by 0\n\nPiperOrigin-RevId: 371003153\nChange-Id: Idef56c95b9fcaeb97f87e18c7a674dbeb5173204",
        "before_after_code_files": [
          "tensorflow/lite/kernels/depthwise_conv.cc||tensorflow/lite/kernels/depthwise_conv.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/depthwise_conv.cc||tensorflow/lite/kernels/depthwise_conv.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/depthwise_conv.cc||tensorflow/lite/kernels/depthwise_conv.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/depthwise_conv.cc||tensorflow/lite/kernels/depthwise_conv.cc": [
          "File: tensorflow/lite/kernels/depthwise_conv.cc -> tensorflow/lite/kernels/depthwise_conv.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "285:                                     int16* depth_multiplier) {",
          "286:   int num_filter_channels = SizeOfDimension(filter, 3);",
          "287:   int num_input_channels = SizeOfDimension(input, 3);",
          "288:   TF_LITE_ENSURE_EQ(context, num_filter_channels % num_input_channels, 0);",
          "291:   return kTfLiteOk;",
          "292: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "288:   TF_LITE_ENSURE(context, num_input_channels != 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "455:   float output_activation_min, output_activation_max;",
          "456:   CalculateActivationRange(params->activation, &output_activation_min,",
          "457:                            &output_activation_max);",
          "459:   const int batch_size = SizeOfDimension(input, 0);",
          "460:   TfLiteTensor* input_quantized;",
          "461:   TF_LITE_ENSURE_OK(context,",
          "462:                     GetTemporarySafe(context, node, data->input_quantized_index,",
          "",
          "[Removed Lines]",
          "458:   const int input_size = NumElements(input) / SizeOfDimension(input, 0);",
          "",
          "[Added Lines]",
          "459:   TF_LITE_ENSURE(context, batch_size != 0);",
          "460:   const int input_size = NumElements(input) / batch_size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "029232ebb98ef7238d9fb38e10e1bb83d3e99bef",
      "candidate_info": {
        "commit_hash": "029232ebb98ef7238d9fb38e10e1bb83d3e99bef",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/029232ebb98ef7238d9fb38e10e1bb83d3e99bef",
        "files": [
          "tensorflow/lite/kernels/depthwise_conv.cc"
        ],
        "message": "Prevent divisions by 0",
        "before_after_code_files": [
          "tensorflow/lite/kernels/depthwise_conv.cc||tensorflow/lite/kernels/depthwise_conv.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/depthwise_conv.cc||tensorflow/lite/kernels/depthwise_conv.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/depthwise_conv.cc||tensorflow/lite/kernels/depthwise_conv.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/depthwise_conv.cc||tensorflow/lite/kernels/depthwise_conv.cc": [
          "File: tensorflow/lite/kernels/depthwise_conv.cc -> tensorflow/lite/kernels/depthwise_conv.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "273:                                     int16* depth_multiplier) {",
          "274:   int num_filter_channels = SizeOfDimension(filter, 3);",
          "275:   int num_input_channels = SizeOfDimension(input, 3);",
          "276:   TF_LITE_ENSURE_EQ(context, num_filter_channels % num_input_channels, 0);",
          "279:   return kTfLiteOk;",
          "280: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276:   TF_LITE_ENSURE(context, num_input_channels != 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "444:   float output_activation_min, output_activation_max;",
          "445:   CalculateActivationRange(params->activation, &output_activation_min,",
          "446:                            &output_activation_max);",
          "448:   const int batch_size = SizeOfDimension(input, 0);",
          "449:   const TfLiteTensor* input_quantized =",
          "450:       GetTemporary(context, node, data->input_quantized_index);",
          "451:   int8_t* quantized_input_ptr_batch = input_quantized->data.int8;",
          "452:   float* scaling_factors_ptr = GetTensorData<float>(",
          "453:       GetTemporary(context, node, data->scaling_factors_index));",
          "",
          "[Removed Lines]",
          "447:   const int input_size = NumElements(input) / SizeOfDimension(input, 0);",
          "",
          "[Added Lines]",
          "450:   TF_LITE_ENSURE(context, batch_size != 0);",
          "451:   const int input_size = NumElements(input) / batch_size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "74ca70697d51bf1071072aad7dabd6b6c194d786",
      "candidate_info": {
        "commit_hash": "74ca70697d51bf1071072aad7dabd6b6c194d786",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/74ca70697d51bf1071072aad7dabd6b6c194d786",
        "files": [
          "tensorflow/lite/kernels/depthwise_conv.cc"
        ],
        "message": "Prevent divisions by 0\n\nPiperOrigin-RevId: 371003153\nChange-Id: Idef56c95b9fcaeb97f87e18c7a674dbeb5173204",
        "before_after_code_files": [
          "tensorflow/lite/kernels/depthwise_conv.cc||tensorflow/lite/kernels/depthwise_conv.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/depthwise_conv.cc||tensorflow/lite/kernels/depthwise_conv.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/depthwise_conv.cc||tensorflow/lite/kernels/depthwise_conv.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/depthwise_conv.cc||tensorflow/lite/kernels/depthwise_conv.cc": [
          "File: tensorflow/lite/kernels/depthwise_conv.cc -> tensorflow/lite/kernels/depthwise_conv.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "285:                                     int16* depth_multiplier) {",
          "286:   int num_filter_channels = SizeOfDimension(filter, 3);",
          "287:   int num_input_channels = SizeOfDimension(input, 3);",
          "288:   TF_LITE_ENSURE_EQ(context, num_filter_channels % num_input_channels, 0);",
          "291:   return kTfLiteOk;",
          "292: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "288:   TF_LITE_ENSURE(context, num_input_channels != 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "455:   float output_activation_min, output_activation_max;",
          "456:   CalculateActivationRange(params->activation, &output_activation_min,",
          "457:                            &output_activation_max);",
          "459:   const int batch_size = SizeOfDimension(input, 0);",
          "460:   TfLiteTensor* input_quantized;",
          "461:   TF_LITE_ENSURE_OK(context,",
          "462:                     GetTemporarySafe(context, node, data->input_quantized_index,",
          "",
          "[Removed Lines]",
          "458:   const int input_size = NumElements(input) / SizeOfDimension(input, 0);",
          "",
          "[Added Lines]",
          "459:   TF_LITE_ENSURE(context, batch_size != 0);",
          "460:   const int input_size = NumElements(input) / batch_size;",
          "",
          "---------------"
        ]
      }
    }
  ]
}