{
  "cve_id": "CVE-2020-26272",
  "cve_desc": "The Electron framework lets you write cross-platform desktop applications using JavaScript, HTML and CSS. In affected versions of Electron IPC messages sent from the main process to a subframe in the renderer process, through webContents.sendToFrame, event.reply or when using the remote module, can in some cases be delivered to the wrong frame. If your app uses remote, calls webContents.sendToFrame, or calls event.reply in an IPC message handler then it is impacted by this issue. This has been fixed in versions 9.4.0, 10.2.0, 11.1.0, and 12.0.0-beta.9. There are no workarounds for this issue.",
  "repo": "electron/electron",
  "patch_hash": "07a1c2a3e5845901f7e2eda9506695be58edc73c",
  "patch_info": {
    "commit_hash": "07a1c2a3e5845901f7e2eda9506695be58edc73c",
    "repo": "electron/electron",
    "commit_url": "https://github.com/electron/electron/commit/07a1c2a3e5845901f7e2eda9506695be58edc73c",
    "files": [
      "docs/api/structures/ipc-main-event.md",
      "docs/api/structures/ipc-main-invoke-event.md",
      "docs/api/web-contents.md",
      "lib/browser/api/web-contents.ts",
      "lib/browser/remote/server.ts",
      "shell/browser/api/electron_api_web_contents.cc",
      "shell/browser/api/electron_api_web_contents.h",
      "shell/common/gin_helper/event_emitter.cc",
      "spec-main/api-ipc-main-spec.ts",
      "spec-main/fixtures/snapshots/proxy-window-open.snapshot.txt",
      "spec-main/guest-window-manager-spec.ts",
      "typings/internal-electron.d.ts"
    ],
    "message": "fix: restrict sendToFrame to same-process frames by default (#26875)",
    "before_after_code_files": [
      "lib/browser/api/web-contents.ts||lib/browser/api/web-contents.ts",
      "lib/browser/remote/server.ts||lib/browser/remote/server.ts",
      "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
      "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h",
      "shell/common/gin_helper/event_emitter.cc||shell/common/gin_helper/event_emitter.cc",
      "spec-main/api-ipc-main-spec.ts||spec-main/api-ipc-main-spec.ts",
      "spec-main/guest-window-manager-spec.ts||spec-main/guest-window-manager-spec.ts",
      "typings/internal-electron.d.ts||typings/internal-electron.d.ts"
    ]
  },
  "patch_diff": {
    "lib/browser/api/web-contents.ts||lib/browser/api/web-contents.ts": [
      "File: lib/browser/api/web-contents.ts -> lib/browser/api/web-contents.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   return this._send(true /* internal */, channel, args);",
      "150: };",
      "152:   if (typeof channel !== 'string') {",
      "153:     throw new Error('Missing required channel argument');",
      "156:   }",
      "159: };",
      "161:   if (typeof channel !== 'string') {",
      "162:     throw new Error('Missing required channel argument');",
      "165:   }",
      "168: };",
      "",
      "[Removed Lines]",
      "151: WebContents.prototype.sendToFrame = function (frameId, channel, ...args) {",
      "154:   } else if (typeof frameId !== 'number') {",
      "155:     throw new Error('Missing required frameId argument');",
      "158:   return this._sendToFrame(false /* internal */, frameId, channel, args);",
      "160: WebContents.prototype._sendToFrameInternal = function (frameId, channel, ...args) {",
      "163:   } else if (typeof frameId !== 'number') {",
      "164:     throw new Error('Missing required frameId argument');",
      "167:   return this._sendToFrame(true /* internal */, frameId, channel, args);",
      "",
      "[Added Lines]",
      "151: WebContents.prototype.sendToFrame = function (frame, channel, ...args) {",
      "154:   } else if (!(typeof frame === 'number' || Array.isArray(frame))) {",
      "155:     throw new Error('Missing required frame argument (must be number or array)');",
      "158:   return this._sendToFrame(false /* internal */, frame, channel, args);",
      "160: WebContents.prototype._sendToFrameInternal = function (frame, channel, ...args) {",
      "163:   } else if (!(typeof frame === 'number' || Array.isArray(frame))) {",
      "164:     throw new Error('Missing required frame argument (must be number or array)');",
      "167:   return this._sendToFrame(true /* internal */, frame, channel, args);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "456: };",
      "458: const addReplyToEvent = (event: any) => {",
      "459:   event.reply = (...args: any[]) => {",
      "461:   };",
      "462: };",
      "",
      "[Removed Lines]",
      "460:     event.sender.sendToFrame(event.frameId, ...args);",
      "",
      "[Added Lines]",
      "459:   const { processId, frameId } = event;",
      "461:     event.sender.sendToFrame([processId, frameId], ...args);",
      "",
      "---------------"
    ],
    "lib/browser/remote/server.ts||lib/browser/remote/server.ts": [
      "File: lib/browser/remote/server.ts -> lib/browser/remote/server.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: ];",
      "22: type RendererFunctionId = [string, number] // [contextId, funcId]",
      "24: type CallIntoRenderer = (...args: any[]) => void",
      "",
      "[Removed Lines]",
      "23: type FinalizerInfo = { id: RendererFunctionId, webContents: electron.WebContents, frameId: number };",
      "",
      "[Added Lines]",
      "23: type FinalizerInfo = { id: RendererFunctionId, webContents: electron.WebContents, frameId: [number, number] };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "43:     if (deref !== undefined) return deref;",
      "44:   }",
      "45: }",
      "48:   const wr = new WeakRef<CallIntoRenderer>(value);",
      "49:   const mapKey = id[0] + '~' + id[1];",
      "",
      "[Removed Lines]",
      "46: function setCachedRendererFunction (id: RendererFunctionId, wc: electron.WebContents, frameId: number, value: CallIntoRenderer) {",
      "",
      "[Added Lines]",
      "46: function setCachedRendererFunction (id: RendererFunctionId, wc: electron.WebContents, frameId: [number, number], value: CallIntoRenderer) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "220:   });",
      "224:   const metaToValue = function (meta: MetaTypeFromRenderer): any {",
      "225:     switch (meta.type) {",
      "226:       case 'nativeimage':",
      "",
      "[Removed Lines]",
      "223: const unwrapArgs = function (sender: electron.WebContents, frameId: number, contextId: string, args: any[]) {",
      "",
      "[Added Lines]",
      "223: const unwrapArgs = function (sender: electron.WebContents, frameId: [number, number], contextId: string, args: any[]) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "423: });",
      "425: handleRemoteCommand(IPC_MESSAGES.BROWSER_CONSTRUCTOR, function (event, contextId, id, args) {",
      "427:   const constructor = objectsRegistry.get(id);",
      "429:   if (constructor == null) {",
      "",
      "[Removed Lines]",
      "426:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
      "",
      "[Added Lines]",
      "426:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "434: });",
      "436: handleRemoteCommand(IPC_MESSAGES.BROWSER_FUNCTION_CALL, function (event, contextId, id, args) {",
      "438:   const func = objectsRegistry.get(id);",
      "440:   if (func == null) {",
      "",
      "[Removed Lines]",
      "437:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
      "",
      "[Added Lines]",
      "437:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "451: });",
      "453: handleRemoteCommand(IPC_MESSAGES.BROWSER_MEMBER_CONSTRUCTOR, function (event, contextId, id, method, args) {",
      "455:   const object = objectsRegistry.get(id);",
      "457:   if (object == null) {",
      "",
      "[Removed Lines]",
      "454:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
      "",
      "[Added Lines]",
      "454:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "462: });",
      "464: handleRemoteCommand(IPC_MESSAGES.BROWSER_MEMBER_CALL, function (event, contextId, id, method, args) {",
      "466:   const object = objectsRegistry.get(id);",
      "468:   if (object == null) {",
      "",
      "[Removed Lines]",
      "465:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
      "",
      "[Added Lines]",
      "465:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "479: });",
      "481: handleRemoteCommand(IPC_MESSAGES.BROWSER_MEMBER_SET, function (event, contextId, id, name, args) {",
      "483:   const obj = objectsRegistry.get(id);",
      "485:   if (obj == null) {",
      "",
      "[Removed Lines]",
      "482:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
      "",
      "[Added Lines]",
      "482:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
      "",
      "---------------"
    ],
    "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc": [
      "File: shell/browser/api/electron_api_web_contents.cc -> shell/browser/api/electron_api_web_contents.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "2708: }",
      "2710: bool WebContents::SendIPCMessageToFrame(bool internal,",
      "2712:                                         const std::string& channel,",
      "2713:                                         v8::Local<v8::Value> args) {",
      "2714:   v8::Isolate* isolate = JavascriptEnvironment::GetIsolate();",
      "",
      "[Removed Lines]",
      "2711:                                         int32_t frame_id,",
      "",
      "[Added Lines]",
      "2711:                                         v8::Local<v8::Value> frame,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2718:         gin::StringToV8(isolate, \"Failed to serialize arguments\")));",
      "2719:     return false;",
      "2720:   }",
      "2728:     return false;",
      "2730:   mojo::AssociatedRemote<mojom::ElectronRenderer> electron_renderer;",
      "2732:   electron_renderer->Message(internal, channel, std::move(message),",
      "2733:                              0 /* sender_id */);",
      "2734:   return true;",
      "",
      "[Removed Lines]",
      "2721:   auto frames = web_contents()->GetAllFrames();",
      "2722:   auto iter = std::find_if(frames.begin(), frames.end(), [frame_id](auto* f) {",
      "2723:     return f->GetRoutingID() == frame_id;",
      "2724:   });",
      "2725:   if (iter == frames.end())",
      "2726:     return false;",
      "2727:   if (!(*iter)->IsRenderFrameLive())",
      "2731:   (*iter)->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);",
      "",
      "[Added Lines]",
      "2721:   int32_t frame_id;",
      "2722:   int32_t process_id;",
      "2723:   if (gin::ConvertFromV8(isolate, frame, &frame_id)) {",
      "2724:     process_id = web_contents()->GetMainFrame()->GetProcess()->GetID();",
      "2725:   } else {",
      "2726:     std::vector<int32_t> id_pair;",
      "2727:     if (gin::ConvertFromV8(isolate, frame, &id_pair) && id_pair.size() == 2) {",
      "2728:       process_id = id_pair[0];",
      "2729:       frame_id = id_pair[1];",
      "2730:     } else {",
      "2731:       isolate->ThrowException(v8::Exception::Error(gin::StringToV8(",
      "2732:           isolate,",
      "2733:           \"frameId must be a number or a pair of [processId, frameId]\")));",
      "2734:       return false;",
      "2735:     }",
      "2736:   }",
      "2738:   auto* rfh = content::RenderFrameHost::FromID(process_id, frame_id);",
      "2739:   if (!rfh || !rfh->IsRenderFrameLive() ||",
      "2740:       content::WebContents::FromRenderFrameHost(rfh) != web_contents())",
      "2744:   rfh->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);",
      "",
      "---------------"
    ],
    "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h": [
      "File: shell/browser/api/electron_api_web_contents.h -> shell/browser/api/electron_api_web_contents.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "258:                                 int32_t sender_id = 0);",
      "260:   bool SendIPCMessageToFrame(bool internal,",
      "262:                              const std::string& channel,",
      "263:                              v8::Local<v8::Value> args);",
      "",
      "[Removed Lines]",
      "261:                              int32_t frame_id,",
      "",
      "[Added Lines]",
      "261:                              v8::Local<v8::Value> frame,",
      "",
      "---------------"
    ],
    "shell/common/gin_helper/event_emitter.cc||shell/common/gin_helper/event_emitter.cc": [
      "File: shell/common/gin_helper/event_emitter.cc -> shell/common/gin_helper/event_emitter.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #include \"shell/common/gin_helper/event_emitter.h\"",
      "7: #include \"content/public/browser/render_frame_host.h\"",
      "8: #include \"shell/browser/api/event.h\"",
      "9: #include \"shell/common/gin_helper/dictionary.h\"",
      "10: #include \"shell/common/gin_helper/object_template_builder.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8: #include \"content/public/browser/render_process_host.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "67:   Dictionary dict(isolate, event);",
      "68:   dict.Set(\"sender\", sender);",
      "71:     dict.Set(\"frameId\", frame->GetRoutingID());",
      "72:   return event;",
      "73: }",
      "",
      "[Removed Lines]",
      "70:   if (frame)",
      "",
      "[Added Lines]",
      "71:   if (frame) {",
      "73:     dict.Set(\"processId\", frame->GetProcess()->GetID());",
      "74:   }",
      "",
      "---------------"
    ],
    "spec-main/api-ipc-main-spec.ts||spec-main/api-ipc-main-spec.ts": [
      "File: spec-main/api-ipc-main-spec.ts -> spec-main/api-ipc-main-spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import * as cp from 'child_process';",
      "4: import { closeAllWindows } from './window-helpers';",
      "5: import { emittedOnce } from './events-helpers';",
      "6: import { ipcMain, BrowserWindow } from 'electron/main';",
      "8: describe('ipc main module', () => {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: import { defer } from './spec-helpers';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "59:       output = JSON.parse(output);",
      "60:       expect(output).to.deep.equal(['error']);",
      "61:     });",
      "62:   });",
      "63: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "64:     it('can be replied to', async () => {",
      "65:       ipcMain.on('test-echo', (e, arg) => {",
      "66:         e.reply('test-echo', arg);",
      "67:       });",
      "68:       defer(() => {",
      "69:         ipcMain.removeAllListeners('test-echo');",
      "70:       });",
      "72:       const w = new BrowserWindow({",
      "73:         show: false,",
      "74:         webPreferences: {",
      "75:           nodeIntegration: true",
      "76:         }",
      "77:       });",
      "78:       w.loadURL('about:blank');",
      "79:       const v = await w.webContents.executeJavaScript(`new Promise((resolve, reject) => {",
      "80:         const { ipcRenderer } = require('electron')",
      "81:         ipcRenderer.send('test-echo', 'hello')",
      "82:         ipcRenderer.on('test-echo', (e, v) => {",
      "83:           resolve(v)",
      "84:         })",
      "85:       })`);",
      "86:       expect(v).to.equal('hello');",
      "87:     });",
      "",
      "---------------"
    ],
    "spec-main/guest-window-manager-spec.ts||spec-main/guest-window-manager-spec.ts": [
      "File: spec-main/guest-window-manager-spec.ts -> spec-main/guest-window-manager-spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "189:     if (key === 'openerId' && typeof value === 'number') {",
      "190:       return 'placeholder-opener-id';",
      "191:     }",
      "192:     if (key === 'returnValue') {",
      "193:       return 'placeholder-guest-contents-id';",
      "194:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "192:     if (key === 'processId' && typeof value === 'number') {",
      "193:       return 'placeholder-process-id';",
      "194:     }",
      "",
      "---------------"
    ],
    "typings/internal-electron.d.ts||typings/internal-electron.d.ts": [
      "File: typings/internal-electron.d.ts -> typings/internal-electron.d.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "68:     _callWindowOpenHandler(event: any, url: string, frameName: string, rawFeatures: string): Electron.BrowserWindowConstructorOptions | null;",
      "69:     _setNextChildWebPreferences(prefs: Partial<Electron.BrowserWindowConstructorOptions['webPreferences']> & Pick<Electron.BrowserWindowConstructorOptions, 'backgroundColor'>): void;",
      "70:     _send(internal: boolean, channel: string, args: any): boolean;",
      "73:     _postMessage(channel: string, message: any, transfer?: any[]): void;",
      "74:     _sendInternal(channel: string, ...args: any[]): void;",
      "75:     _printToPDF(options: any): Promise<Buffer>;",
      "",
      "[Removed Lines]",
      "71:     _sendToFrame(internal: boolean, frameId: number, channel: string, args: any): boolean;",
      "72:     _sendToFrameInternal(frameId: number, channel: string, ...args: any[]): boolean;",
      "",
      "[Added Lines]",
      "71:     _sendToFrame(internal: boolean, frameId: number | [number, number], channel: string, args: any): boolean;",
      "72:     _sendToFrameInternal(frameId: number | [number, number], channel: string, ...args: any[]): boolean;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1f238072719dd827bd37490dd03c172abadb7cbb",
      "candidate_info": {
        "commit_hash": "1f238072719dd827bd37490dd03c172abadb7cbb",
        "repo": "electron/electron",
        "commit_url": "https://github.com/electron/electron/commit/1f238072719dd827bd37490dd03c172abadb7cbb",
        "files": [
          "filenames.auto.gni",
          "lib/browser/api/web-contents.js",
          "lib/browser/api/web-contents.ts",
          "lib/browser/guest-window-manager.js",
          "lib/browser/navigation-controller.js",
          "lib/browser/navigation-controller.ts",
          "spec-main/api-subframe-spec.ts",
          "spec-main/fixtures/api/custom-protocol-shutdown.js",
          "typings/internal-electron.d.ts"
        ],
        "message": "chore: tsify web-contents (#24325)",
        "before_after_code_files": [
          "filenames.auto.gni||filenames.auto.gni",
          "lib/browser/api/web-contents.js||librowser/api/web-contents.ts",
          "lib/browser/guest-window-manager.js||librowser/guest-window-manager.js",
          "lib/browser/navigation-controller.js||librowser/navigation-controller.ts",
          "spec-main/api-subframe-spec.ts||spec-main/api-subframe-spec.ts",
          "spec-main/fixtures/api/custom-protocol-shutdown.js||spec-main/fixtures/api/custom-protocol-shutdown.js",
          "typings/internal-electron.d.ts||typings/internal-electron.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "typings/internal-electron.d.ts||typings/internal-electron.d.ts"
          ],
          "candidate": [
            "typings/internal-electron.d.ts||typings/internal-electron.d.ts"
          ]
        }
      },
      "candidate_diff": {
        "filenames.auto.gni||filenames.auto.gni": [
          "File: filenames.auto.gni -> filenames.auto.gni",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:     \"lib/browser/api/view.ts\",",
          "223:     \"lib/browser/api/views/image-view.ts\",",
          "224:     \"lib/browser/api/web-contents-view.ts\",",
          "226:     \"lib/browser/chrome-extension-shim.ts\",",
          "227:     \"lib/browser/default-menu.ts\",",
          "228:     \"lib/browser/desktop-capturer.ts\",",
          "",
          "[Removed Lines]",
          "225:     \"lib/browser/api/web-contents.js\",",
          "",
          "[Added Lines]",
          "225:     \"lib/browser/api/web-contents.ts\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234:     \"lib/browser/ipc-main-internal-utils.ts\",",
          "235:     \"lib/browser/ipc-main-internal.ts\",",
          "236:     \"lib/browser/message-port-main.ts\",",
          "238:     \"lib/browser/remote/objects-registry.ts\",",
          "239:     \"lib/browser/remote/server.ts\",",
          "240:     \"lib/browser/rpc-server.ts\",",
          "",
          "[Removed Lines]",
          "237:     \"lib/browser/navigation-controller.js\",",
          "",
          "[Added Lines]",
          "237:     \"lib/browser/navigation-controller.ts\",",
          "",
          "---------------"
        ],
        "lib/browser/api/web-contents.js||librowser/api/web-contents.ts": [
          "File: lib/browser/api/web-contents.js -> librowser/api/web-contents.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 'use strict';",
          "3: const { EventEmitter } = require('events');",
          "4: const electron = require('electron');",
          "5: const path = require('path');",
          "6: const url = require('url');",
          "7: const { app, ipcMain, session } = electron;",
          "9: const { internalWindowOpen } = require('@electron/internal/browser/guest-window-manager');",
          "10: const NavigationController = require('@electron/internal/browser/navigation-controller');",
          "11: const { ipcMainInternal } = require('@electron/internal/browser/ipc-main-internal');",
          "12: const ipcMainUtils = require('@electron/internal/browser/ipc-main-internal-utils');",
          "13: const { parseFeatures } = require('@electron/internal/common/parse-features-string');",
          "14: const { MessagePortMain } = require('@electron/internal/browser/message-port-main');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:   return ++nextId;",
          "24: };",
          "28:   A5: {",
          "29:     custom_display_name: 'A5',",
          "30:     height_microns: 210000,",
          "",
          "[Removed Lines]",
          "27: const PDFPageSizes = {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68: const defaultPrintingSetting = {",
          "72:   landscape: false,",
          "73:   headerFooterEnabled: false,",
          "74:   marginsType: 0,",
          "",
          "[Removed Lines]",
          "70:   pageRange: [],",
          "71:   mediaSize: {},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "93:   copies: 1,",
          "95:   color: 2,",
          "97: };",
          "100: const binding = process._linkedBinding('electron_browser_web_contents');",
          "108: WebContents.prototype.send = function (channel, ...args) {",
          "109:   if (typeof channel !== 'string') {",
          "110:     throw new Error('Missing required channel argument');",
          "",
          "[Removed Lines]",
          "96:   collate: true",
          "101: const { WebContents } = binding;",
          "103: Object.setPrototypeOf(NavigationController.prototype, EventEmitter.prototype);",
          "104: Object.setPrototypeOf(WebContents.prototype, NavigationController.prototype);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "123:   this._postMessage(...args);",
          "124: };",
          "137: WebContents.prototype._sendInternal = function (channel, ...args) {",
          "138:   if (typeof channel !== 'string') {",
          "139:     throw new Error('Missing required channel argument');",
          "",
          "[Removed Lines]",
          "126: WebContents.prototype.sendToAll = function (channel, ...args) {",
          "127:   if (typeof channel !== 'string') {",
          "128:     throw new Error('Missing required channel argument');",
          "129:   }",
          "131:   const internal = false;",
          "132:   const sendToAll = true;",
          "134:   return this._send(internal, sendToAll, channel, args);",
          "135: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "185:   'insertText',",
          "186:   'removeInsertedCSS',",
          "187:   'setVisualZoomLevelLimits'",
          "190: for (const method of webFrameMethods) {",
          "192:     return ipcMainUtils.invokeInWebContents(this, false, 'ELECTRON_INTERNAL_RENDERER_WEB_FRAME_METHOD', method, ...args);",
          "193:   };",
          "194: }",
          "197:   if (webContents.getURL() && !webContents.isLoadingMainFrame()) return;",
          "199:   return new Promise((resolve) => {",
          "",
          "[Removed Lines]",
          "188: ];",
          "191:   WebContents.prototype[method] = function (...args) {",
          "196: const waitTillCanExecuteJavaScript = async (webContents) => {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "326:         height_microns: Math.ceil(pageSize.height),",
          "327:         width_microns: Math.ceil(pageSize.width)",
          "328:       };",
          "330:       printSettings.mediaSize = PDFPageSizes[pageSize];",
          "331:     } else {",
          "332:       const error = new Error(`Unsupported pageSize: ${pageSize}`);",
          "",
          "[Removed Lines]",
          "329:     } else if (PDFPageSizes[pageSize]) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "360:           throw new Error('height and width properties are required for pageSize');",
          "361:         }",
          "364:           name: 'CUSTOM',",
          "365:           custom_display_name: 'Custom',",
          "366:           height_microns: Math.ceil(pageSize.height),",
          "367:           width_microns: Math.ceil(pageSize.width)",
          "368:         };",
          "369:       } else if (PDFPageSizes[pageSize]) {",
          "371:       } else {",
          "372:         throw new Error(`Unsupported pageSize: ${pageSize}`);",
          "373:       }",
          "",
          "[Removed Lines]",
          "363:         options.mediaSize = {",
          "370:         options.mediaSize = PDFPageSizes[pageSize];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "410:   }));",
          "411: };",
          "415:     event.sender.sendToFrame(event.frameId, ...args);",
          "416:   };",
          "417: };",
          "420:   Object.defineProperty(event, '_replyInternal', {",
          "421:     configurable: false,",
          "422:     enumerable: false,",
          "424:       event.sender._sendToFrameInternal(event.frameId, ...args);",
          "425:     }",
          "426:   });",
          "427: };",
          "430:   Object.defineProperty(event, 'returnValue', {",
          "431:     set: (value) => event.sendReply([value]),",
          "432:     get: () => {}",
          "",
          "[Removed Lines]",
          "413: const addReplyToEvent = (event) => {",
          "414:   event.reply = (...args) => {",
          "419: const addReplyInternalToEvent = (event) => {",
          "423:     value: (...args) => {",
          "429: const addReturnValueToEvent = (event) => {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "437: WebContents.prototype._init = function () {",
          "443:   this.setMaxListeners(0);",
          "447:     if (internal) {",
          "448:       addReplyInternalToEvent(event);",
          "449:       ipcMainInternal.emit(channel, event, ...args);",
          "",
          "[Removed Lines]",
          "439:   NavigationController.call(this, this);",
          "446:   this.on('-ipc-message', function (event, internal, channel, args) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "454:     }",
          "455:   });",
          "460:       console.error(`Error occurred in handler for '${channel}':`, error);",
          "461:       event.sendReply({ error: error.toString() });",
          "462:     };",
          "463:     const target = internal ? ipcMainInternal : ipcMain;",
          "466:     } else {",
          "467:       event._throw(`No handler registered for '${channel}'`);",
          "468:     }",
          "469:   });",
          "472:     addReturnValueToEvent(event);",
          "473:     if (internal) {",
          "474:       addReplyInternalToEvent(event);",
          "",
          "[Removed Lines]",
          "457:   this.on('-ipc-invoke', function (event, internal, channel, args) {",
          "458:     event._reply = (result) => event.sendReply({ result });",
          "459:     event._throw = (error) => {",
          "464:     if (target._invokeHandlers.has(channel)) {",
          "465:       target._invokeHandlers.get(channel)(event, ...args);",
          "471:   this.on('-ipc-message-sync', function (event, internal, channel, args) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "480:     }",
          "481:   });",
          "484:     event.ports = ports.map(p => new MessagePortMain(p));",
          "485:     ipcMain.emit(channel, event, message);",
          "486:   });",
          "492:     menu.popup({",
          "493:       window: event.sender.getOwnerBrowserWindow(),",
          "494:       x: params.x,",
          "",
          "[Removed Lines]",
          "483:   this.on('-ipc-ports', function (event, internal, channel, message, ports) {",
          "489:   this.on('pepper-context-menu', function (event, params, callback) {",
          "491:     const menu = electron.Menu.buildFromTemplate(params.menu);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "506:   });",
          "510:     this.reload();",
          "511:   });",
          "513:   if (this.getType() !== 'remote') {",
          "517:       const { options, webPreferences, additionalFeatures } = parseFeatures(rawFeatures);",
          "518:       const mergedOptions = {",
          "519:         show: true,",
          "",
          "[Removed Lines]",
          "509:   this.on('devtools-reload-page', function () {",
          "515:     this.on('-new-window', (event, url, frameName, disposition,",
          "516:       rawFeatures, referrer, postData) => {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "535:       if ((disposition !== 'foreground-tab' && disposition !== 'new-window' &&",
          "536:            disposition !== 'background-tab')) {",
          "537:         event.preventDefault();",
          "",
          "[Removed Lines]",
          "532:     this.on('-add-new-contents', (event, webContents, disposition,",
          "533:       userGesture, left, top, width, height, url, frameName,",
          "534:       referrer, rawFeatures, postData) => {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "555:     const prefs = this.getWebPreferences() || {};",
          "556:     if (prefs.webviewTag && prefs.contextIsolation) {",
          "558:     }",
          "559:   }",
          "",
          "[Removed Lines]",
          "557:       electron.deprecate.log('Security Warning: A WebContents was just created with both webviewTag and contextIsolation enabled.  This combination is fundamentally less secure and effectively bypasses the protections of contextIsolation.  We strongly recommend you move away from webviews to OOPIF or BrowserView in order for your app to be more secure');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "599: };",
          "625:   }",
          "",
          "[Removed Lines]",
          "602: module.exports = {",
          "603:   create (options = {}) {",
          "604:     return binding.create(options);",
          "605:   },",
          "607:   fromId (id) {",
          "608:     return binding.fromId(id);",
          "609:   },",
          "611:   getFocusedWebContents () {",
          "612:     let focused = null;",
          "613:     for (const contents of binding.getAllWebContents()) {",
          "614:       if (!contents.isFocused()) continue;",
          "615:       if (focused == null) focused = contents;",
          "618:       if (contents.getType() === 'webview') return contents;",
          "619:     }",
          "620:     return focused;",
          "621:   },",
          "623:   getAllWebContents () {",
          "624:     return binding.getAllWebContents();",
          "626: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/browser/guest-window-manager.js||librowser/guest-window-manager.js": [
          "File: lib/browser/guest-window-manager.js -> librowser/guest-window-manager.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     let parentOptions = embedder.browserWindowOptions;",
          "60:     if (win != null) {",
          "61:       parentOptions = {",
          "62:         ...win.getBounds(),",
          "",
          "[Removed Lines]",
          "59:     const win = BrowserWindow.fromWebContents(embedder.webContents);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/browser/navigation-controller.js||librowser/navigation-controller.ts": [
          "File: lib/browser/navigation-controller.js -> librowser/navigation-controller.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: ipcMainInternal.on('ELECTRON_NAVIGATION_CONTROLLER_GO_BACK', function (event) {",
          "",
          "[Removed Lines]",
          "1: 'use strict';",
          "3: const { ipcMainInternal } = require('@electron/internal/browser/ipc-main-internal');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: });",
          "18: ipcMainInternal.on('ELECTRON_NAVIGATION_CONTROLLER_LENGTH', function (event) {",
          "20: });",
          "",
          "[Removed Lines]",
          "19:   event.returnValue = event.sender.length();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "30:     this.clearHistory();",
          "",
          "[Removed Lines]",
          "27: const NavigationController = (function () {",
          "28:   function NavigationController (webContents) {",
          "29:     this.webContents = webContents;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "34:       this.currentIndex++;",
          "35:       this.history.push(this.webContents._getURL());",
          "36:     }",
          "38:       if (this.inPageIndex > -1 && !inPage) {",
          "40:         this.inPageIndex = -1;",
          "",
          "[Removed Lines]",
          "37:     this.webContents.on('navigation-entry-committed', (event, url, inPage, replaceEntry) => {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "59:     });",
          "60:   }",
          "63:     if (options == null) {",
          "64:       options = {};",
          "65:     }",
          "67:       const resolveAndCleanup = () => {",
          "68:         removeListeners();",
          "69:         resolve();",
          "70:       };",
          "72:         const err = new Error(`${errorDescription} (${errorCode}) loading '${typeof url === 'string' ? url.substr(0, 2048) : url}'`);",
          "73:         Object.assign(err, { errno: errorCode, code: errorDescription, url });",
          "74:         removeListeners();",
          "",
          "[Removed Lines]",
          "62:   NavigationController.prototype.loadURL = function (url, options) {",
          "66:     const p = new Promise((resolve, reject) => {",
          "71:       const rejectAndCleanup = (errorCode, errorDescription, url) => {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "77:       const finishListener = () => {",
          "78:         resolveAndCleanup();",
          "79:       };",
          "81:         if (isMainFrame) {",
          "82:           rejectAndCleanup(errorCode, errorDescription, validatedURL);",
          "83:         }",
          "84:       };",
          "86:       let navigationStarted = false;",
          "88:         if (isMainFrame) {",
          "89:           if (navigationStarted && !isSameDocument) {",
          "",
          "[Removed Lines]",
          "80:       const failListener = (event, errorCode, errorDescription, validatedURL, isMainFrame, frameProcessId, frameRoutingId) => {",
          "87:       const navigationListener = (event, url, isSameDocument, isMainFrame, frameProcessId, frameRoutingId, navigationId) => {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "129:     this.webContents._loadURL(url, options);",
          "130:     this.webContents.emit('load-url', url, options);",
          "131:     return p;",
          "135:     if (this.currentIndex === -1) {",
          "136:       return '';",
          "137:     } else {",
          "138:       return this.history[this.currentIndex];",
          "139:     }",
          "143:     this.pendingIndex = -1;",
          "144:     return this.webContents._stop();",
          "148:     this.pendingIndex = this.currentIndex;",
          "149:     return this.webContents._loadURL(this.getURL(), {});",
          "153:     this.pendingIndex = this.currentIndex;",
          "154:     return this.webContents._loadURL(this.getURL(), {",
          "155:       extraHeaders: 'pragma: no-cache\\n',",
          "156:       reloadIgnoringCache: true",
          "161:     return this.getActiveIndex() > 0;",
          "165:     return this.getActiveIndex() < this.history.length - 1;",
          "169:     return index >= 0 && index < this.history.length;",
          "173:     return this.canGoToIndex(this.currentIndex + offset);",
          "177:     this.history = [];",
          "178:     this.currentIndex = -1;",
          "179:     this.pendingIndex = -1;",
          "180:     this.inPageIndex = -1;",
          "184:     if (!this.canGoBack()) {",
          "185:       return;",
          "186:     }",
          "",
          "[Removed Lines]",
          "132:   };",
          "134:   NavigationController.prototype.getURL = function () {",
          "140:   };",
          "142:   NavigationController.prototype.stop = function () {",
          "145:   };",
          "147:   NavigationController.prototype.reload = function () {",
          "150:   };",
          "152:   NavigationController.prototype.reloadIgnoringCache = function () {",
          "157:     });",
          "158:   };",
          "160:   NavigationController.prototype.canGoBack = function () {",
          "162:   };",
          "164:   NavigationController.prototype.canGoForward = function () {",
          "166:   };",
          "168:   NavigationController.prototype.canGoToIndex = function (index) {",
          "170:   };",
          "172:   NavigationController.prototype.canGoToOffset = function (offset) {",
          "174:   };",
          "176:   NavigationController.prototype.clearHistory = function () {",
          "181:   };",
          "183:   NavigationController.prototype.goBack = function () {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "190:     } else {",
          "191:       return this.webContents._loadURL(this.history[this.pendingIndex], {});",
          "192:     }",
          "196:     if (!this.canGoForward()) {",
          "197:       return;",
          "198:     }",
          "",
          "[Removed Lines]",
          "193:   };",
          "195:   NavigationController.prototype.goForward = function () {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "202:     } else {",
          "203:       return this.webContents._loadURL(this.history[this.pendingIndex], {});",
          "204:     }",
          "208:     if (!this.canGoToIndex(index)) {",
          "209:       return;",
          "210:     }",
          "211:     this.pendingIndex = index;",
          "212:     return this.webContents._loadURL(this.history[this.pendingIndex], {});",
          "216:     if (!this.canGoToOffset(offset)) {",
          "217:       return;",
          "218:     }",
          "",
          "[Removed Lines]",
          "205:   };",
          "207:   NavigationController.prototype.goToIndex = function (index) {",
          "213:   };",
          "215:   NavigationController.prototype.goToOffset = function (offset) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "223:     } else {",
          "224:       return this.goToIndex(pendingIndex);",
          "225:     }",
          "229:     if (this.pendingIndex === -1) {",
          "230:       return this.currentIndex;",
          "231:     } else {",
          "232:       return this.pendingIndex;",
          "233:     }",
          "237:     return this.history.length;",
          "",
          "[Removed Lines]",
          "226:   };",
          "228:   NavigationController.prototype.getActiveIndex = function () {",
          "234:   };",
          "236:   NavigationController.prototype.length = function () {",
          "238:   };",
          "240:   return NavigationController;",
          "241: })();",
          "243: module.exports = NavigationController;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "spec-main/api-subframe-spec.ts||spec-main/api-subframe-spec.ts": [
          "File: spec-main/api-subframe-spec.ts -> spec-main/api-subframe-spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:         w.loadFile(path.resolve(__dirname, `fixtures/sub-frames/frame-container${fixtureSuffix}.html`));",
          "85:         const details = await detailsPromise;",
          "86:         const senders = details.map(event => event[0].sender);",
          "88:         for (const result of isolatedGlobals) {",
          "89:           if (webPreferences.contextIsolation) {",
          "90:             expect(result).to.be.undefined();",
          "",
          "[Removed Lines]",
          "87:         const isolatedGlobals = await Promise.all(senders.map(sender => sender.webContents.executeJavaScript('window.isolatedGlobal')));",
          "",
          "[Added Lines]",
          "87:         const isolatedGlobals = await Promise.all(senders.map(sender => sender.executeJavaScript('window.isolatedGlobal')));",
          "",
          "---------------"
        ],
        "spec-main/fixtures/api/custom-protocol-shutdown.js||spec-main/fixtures/api/custom-protocol-shutdown.js": [
          "File: spec-main/fixtures/api/custom-protocol-shutdown.js -> spec-main/fixtures/api/custom-protocol-shutdown.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     callback('Hello World!');",
          "13:   });",
          "18: });",
          "",
          "[Removed Lines]",
          "15:   web.webContents.loadURL('test://abc/hello.txt');",
          "17:   web.webContents.on('did-finish-load', () => app.quit());",
          "",
          "[Added Lines]",
          "15:   web.loadURL('test://abc/hello.txt');",
          "17:   web.on('did-finish-load', () => app.quit());",
          "",
          "---------------"
        ],
        "typings/internal-electron.d.ts||typings/internal-electron.d.ts": [
          "File: typings/internal-electron.d.ts -> typings/internal-electron.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:   interface WebContents {",
          "33:     _getURL(): string;",
          "34:     getOwnerBrowserWindow(): Electron.BrowserWindow;",
          "35:     getLastWebPreferences(): Electron.WebPreferences;",
          "36:     _getPreloadPaths(): string[];",
          "37:     equal(other: WebContents): boolean;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:     _loadURL(url: string, options: Electron.LoadURLOptions): void;",
          "35:     _stop(): void;",
          "36:     _goBack(): void;",
          "37:     _goForward(): void;",
          "38:     _goToOffset(offset: number): void;",
          "40:     getWebPreferences(): Electron.WebPreferences;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:   }",
          "88:   interface WebContentsInternal extends Electron.WebContents {",
          "89:     _sendInternal(channel: string, ...args: any[]): void;",
          "90:     _sendInternalToAll(channel: string, ...args: any[]): void;",
          "91:   }",
          "93:   const deprecate: ElectronInternal.DeprecationUtil;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:     _send(internal: boolean, sendToAll: boolean, channel: string, args: any): boolean;",
          "96:     _sendToFrame(internal: boolean, sendToAll: boolean, frameId: number, channel: string, args: any): boolean;",
          "97:     _sendToFrameInternal(frameId: number, channel: string, args: any): boolean;",
          "98:     _postMessage(channel: string, message: any, transfer?: any[]): void;",
          "101:     _printToPDF(options: any): Promise<Buffer>;",
          "102:     _print(options: any, callback?: (success: boolean, failureReason: string) => void): void;",
          "103:     _getPrinters(): Electron.PrinterInfo[];",
          "104:     _init(): void;",
          "105:     canGoToIndex(index: number): boolean;",
          "106:     getActiveIndex(): number;",
          "107:     length(): number;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb11a12d5b572201d6b1a24d6288fe2ccebb9ae6",
      "candidate_info": {
        "commit_hash": "fb11a12d5b572201d6b1a24d6288fe2ccebb9ae6",
        "repo": "electron/electron",
        "commit_url": "https://github.com/electron/electron/commit/fb11a12d5b572201d6b1a24d6288fe2ccebb9ae6",
        "files": [
          "lib/asar/fs-wrapper.ts",
          "lib/browser/api/base-window.ts",
          "lib/browser/api/browser-window.ts",
          "lib/browser/api/screen.ts",
          "lib/browser/devtools.ts",
          "lib/browser/guest-window-manager.ts",
          "lib/browser/ipc-main-impl.ts",
          "lib/browser/ipc-main-internal-utils.ts",
          "lib/browser/navigation-controller.ts",
          "lib/browser/remote/server.ts",
          "lib/browser/rpc-server.ts",
          "lib/common/api/deprecate.ts",
          "lib/common/type-utils.ts",
          "lib/renderer/inspector.ts",
          "lib/renderer/web-view/web-view-impl.ts",
          "lib/renderer/window-setup.ts",
          "spec-main/api-deprecate-spec.ts",
          "typings/internal-ambient.d.ts",
          "typings/internal-electron.d.ts"
        ],
        "message": "refactor: replace a few any-s with proper types (#25681)",
        "before_after_code_files": [
          "lib/asar/fs-wrapper.ts||liasar/fs-wrapper.ts",
          "lib/browser/api/base-window.ts||librowser/api/base-window.ts",
          "lib/browser/api/browser-window.ts||librowser/api/browser-window.ts",
          "lib/browser/api/screen.ts||librowser/api/screen.ts",
          "lib/browser/devtools.ts||librowser/devtools.ts",
          "lib/browser/guest-window-manager.ts||librowser/guest-window-manager.ts",
          "lib/browser/ipc-main-impl.ts||librowser/ipc-main-impl.ts",
          "lib/browser/ipc-main-internal-utils.ts||librowser/ipc-main-internal-utils.ts",
          "lib/browser/navigation-controller.ts||librowser/navigation-controller.ts",
          "lib/browser/remote/server.ts||librowser/remote/server.ts",
          "lib/browser/rpc-server.ts||librowser/rpc-server.ts",
          "lib/common/api/deprecate.ts||licommon/api/deprecate.ts",
          "lib/common/type-utils.ts||licommon/type-utils.ts",
          "lib/renderer/inspector.ts||lirenderer/inspector.ts",
          "lib/renderer/web-view/web-view-impl.ts||lirenderer/web-view/web-view-impl.ts",
          "lib/renderer/window-setup.ts||lirenderer/window-setup.ts",
          "spec-main/api-deprecate-spec.ts||spec-main/api-deprecate-spec.ts",
          "typings/internal-ambient.d.ts||typings/internal-ambient.d.ts",
          "typings/internal-electron.d.ts||typings/internal-electron.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/browser/remote/server.ts||lib/browser/remote/server.ts",
            "typings/internal-electron.d.ts||typings/internal-electron.d.ts"
          ],
          "candidate": [
            "lib/browser/remote/server.ts||librowser/remote/server.ts",
            "typings/internal-electron.d.ts||typings/internal-electron.d.ts"
          ]
        }
      },
      "candidate_diff": {
        "lib/asar/fs-wrapper.ts||liasar/fs-wrapper.ts": [
          "File: lib/asar/fs-wrapper.ts -> liasar/fs-wrapper.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: const Module = require('module');",
          "12: const envNoAsar = process.env.ELECTRON_NO_ASAR &&",
          "13:     process.type !== 'browser' &&",
          "14:     process.type !== 'renderer';",
          "15: const isAsarDisabled = () => process.noAsar || envNoAsar;",
          "20: const nextTick = (functionToCall: Function, args: any[] = []) => {",
          "21:   process.nextTick(() => functionToCall(...args));",
          "",
          "[Removed Lines]",
          "10: const Promise: PromiseConstructor = global.Promise as any;",
          "17: const internalBinding = (process as any).internalBinding;",
          "18: delete (process as any).internalBinding;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/browser/api/base-window.ts||librowser/api/base-window.ts": [
          "File: lib/browser/api/base-window.ts -> librowser/api/base-window.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: Object.setPrototypeOf(BaseWindow.prototype, EventEmitter.prototype);",
          "9:   const { app } = require('electron');",
          "",
          "[Removed Lines]",
          "7: (BaseWindow.prototype as any)._init = function () {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/browser/api/browser-window.ts||librowser/api/browser-window.ts": [
          "File: lib/browser/api/browser-window.ts -> librowser/api/browser-window.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: Object.setPrototypeOf(BrowserWindow.prototype, BaseWindow.prototype);",
          "12:   const { app } = require('electron');",
          "",
          "[Removed Lines]",
          "7: (BrowserWindow.prototype as any)._init = function (this: BWT) {",
          "9:   (BaseWindow.prototype as any)._init.call(this);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/browser/api/screen.ts||librowser/api/screen.ts": [
          "File: lib/browser/api/screen.ts -> librowser/api/screen.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: export default new Proxy({}, {",
          "11:     if (_screen === undefined) {",
          "12:       _screen = createScreen();",
          "13:     }",
          "15:     if (typeof v === 'function') {",
          "16:       return v.bind(_screen);",
          "17:     }",
          "",
          "[Removed Lines]",
          "10:   get: (target, prop) => {",
          "14:     const v = (_screen as any)[prop];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/browser/devtools.ts||librowser/devtools.ts": [
          "File: lib/browser/devtools.ts -> librowser/devtools.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:   }",
          "61: };",
          "64:   return new Promise(resolve => {",
          "65:     assertChromeDevTools(event.sender, 'window.InspectorFrontendHost.showContextMenuAtPoint()');",
          "",
          "[Removed Lines]",
          "63: ipcMainInternal.handle('ELECTRON_INSPECTOR_CONTEXT_MENU', function (event: Electron.IpcMainInvokeEvent, items: ContextMenuItem[], isEditMenu: boolean) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:   });",
          "73: });",
          "76:   assertChromeDevTools(event.sender, 'window.UI.createFileSelectorElement()');",
          "78:   const result = await dialog.showOpenDialog({});",
          "",
          "[Removed Lines]",
          "75: ipcMainInternal.handle('ELECTRON_INSPECTOR_SELECT_FILE', async function (event: Electron.IpcMainInvokeEvent) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:   return [path, data];",
          "85: });",
          "88:   assertChromeDevTools(event.sender, 'window.confirm()');",
          "90:   const options = {",
          "",
          "[Removed Lines]",
          "87: ipcMainUtils.handleSync('ELECTRON_INSPECTOR_CONFIRM', async function (event: Electron.IpcMainInvokeEvent, message: string = '', title: string = '') {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/browser/guest-window-manager.ts||librowser/guest-window-manager.ts": [
          "File: lib/browser/guest-window-manager.ts -> librowser/guest-window-manager.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:   }",
          "267: }",
          "272:     const guestContents = electron.webContents.fromId(guestId);",
          "273:     if (!guestContents) {",
          "",
          "[Removed Lines]",
          "269: const makeSafeHandler = function<T> (handler: (event: Electron.IpcMainInvokeEvent, guestContents: Electron.webContents, ...args: any[]) => T) {",
          "270:   return (event: Electron.IpcMainInvokeEvent, guestId: number, ...args: any[]) => {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "282:   ipcMainInternal.handle(channel, makeSafeHandler(handler));",
          "283: };",
          "286:   ipcMainUtils.handleSync(channel, makeSafeHandler(handler));",
          "287: };",
          "",
          "[Removed Lines]",
          "285: const handleMessageSync = function (channel: string, handler: (event: Electron.IpcMainInvokeEvent, guestContents: Electron.webContents, ...args: any[]) => any) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/browser/ipc-main-impl.ts||librowser/ipc-main-impl.ts": [
          "File: lib/browser/ipc-main-impl.ts -> librowser/ipc-main-impl.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     }",
          "14:     this._invokeHandlers.set(method, async (e, ...args) => {",
          "15:       try {",
          "17:       } catch (err) {",
          "19:       }",
          "20:     });",
          "21:   }",
          "",
          "[Removed Lines]",
          "16:         (e as any)._reply(await Promise.resolve(fn(e, ...args)));",
          "18:         (e as any)._throw(err);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/browser/ipc-main-internal-utils.ts||librowser/ipc-main-internal-utils.ts": [
          "File: lib/browser/ipc-main-internal-utils.ts -> librowser/ipc-main-internal-utils.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { ipcMainInternal } from '@electron/internal/browser/ipc-main-internal';",
          "5: export const handleSync = function <T extends IPCHandler> (channel: string, handler: T) {",
          "6:   ipcMainInternal.on(channel, async (event, ...args) => {",
          "",
          "[Removed Lines]",
          "3: type IPCHandler = (event: Electron.IpcMainInvokeEvent, ...args: any[]) => any",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/browser/navigation-controller.ts||librowser/navigation-controller.ts": [
          "File: lib/browser/navigation-controller.ts -> librowser/navigation-controller.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: });",
          "18: ipcMainInternal.on('ELECTRON_NAVIGATION_CONTROLLER_LENGTH', function (event) {",
          "20: });",
          "",
          "[Removed Lines]",
          "19:   event.returnValue = (event.sender as any).length();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:       this.currentIndex++;",
          "40:       this.history.push(this.webContents._getURL());",
          "41:     }",
          "43:       if (this.inPageIndex > -1 && !inPage) {",
          "45:         this.inPageIndex = -1;",
          "",
          "[Removed Lines]",
          "42:     this.webContents.on('navigation-entry-committed' as any, (event: any, url: string, inPage: boolean, replaceEntry: boolean) => {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82:       const finishListener = () => {",
          "83:         resolveAndCleanup();",
          "84:       };",
          "86:         if (isMainFrame) {",
          "87:           rejectAndCleanup(errorCode, errorDescription, validatedURL);",
          "88:         }",
          "89:       };",
          "91:       let navigationStarted = false;",
          "93:         if (isMainFrame) {",
          "94:           if (navigationStarted && !isSameDocument) {",
          "",
          "[Removed Lines]",
          "85:       const failListener = (event: any, errorCode: number, errorDescription: string, validatedURL: string, isMainFrame: boolean) => {",
          "92:       const navigationListener = (event: any, url: string, isSameDocument: boolean, isMainFrame: boolean) => {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:     return this.webContents._loadURL(this.getURL(), {",
          "160:       extraHeaders: 'pragma: no-cache\\n',",
          "161:       reloadIgnoringCache: true",
          "163:   }",
          "165:   canGoBack () {",
          "",
          "[Removed Lines]",
          "162:     } as any);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/browser/remote/server.ts||librowser/remote/server.ts": [
          "File: lib/browser/remote/server.ts -> librowser/remote/server.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: type RendererFunctionId = [string, number] // [contextId, funcId]",
          "22: type FinalizerInfo = { id: RendererFunctionId, webContents: electron.WebContents, frameId: number };",
          "24: type CallIntoRenderer = (...args: any[]) => void",
          "27: const rendererFunctionCache = new Map<string, WeakRef<CallIntoRenderer>>();",
          "30:   const mapKey = fi.id[0] + '~' + fi.id[1];",
          "31:   const ref = rendererFunctionCache.get(mapKey);",
          "32:   if (ref !== undefined && ref.deref() === undefined) {",
          "",
          "[Removed Lines]",
          "23: type WeakRef<T> = { deref(): T | undefined }",
          "29: const finalizationRegistry = new (globalThis as any).FinalizationRegistry((fi: FinalizerInfo) => {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: }",
          "46: function setCachedRendererFunction (id: RendererFunctionId, wc: electron.WebContents, frameId: number, value: CallIntoRenderer) {",
          "49:   const mapKey = id[0] + '~' + id[1];",
          "50:   rendererFunctionCache.set(mapKey, wr);",
          "51:   finalizationRegistry.register(value, {",
          "",
          "[Removed Lines]",
          "48:   const wr = new (globalThis as any).WeakRef(value) as WeakRef<CallIntoRenderer>;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "263:         const callIntoRenderer = function (this: any, ...args: any[]) {",
          "264:           let succeed = false;",
          "265:           if (!sender.isDestroyed()) {",
          "267:           }",
          "268:           if (!succeed) {",
          "269:             removeRemoteListenersAndLogWarning(this, callIntoRenderer);",
          "",
          "[Removed Lines]",
          "266:             succeed = (sender as any)._sendToFrameInternal(frameId, 'ELECTRON_RENDERER_CALLBACK', contextId, meta.id, valueToMeta(sender, contextId, args));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/browser/rpc-server.ts||librowser/rpc-server.ts": [
          "File: lib/browser/rpc-server.ts -> librowser/rpc-server.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { app } from 'electron/main';",
          "3: import { clipboard, crashReporter, nativeImage } from 'electron/common';",
          "4: import * as fs from 'fs';",
          "5: import { ipcMainInternal } from '@electron/internal/browser/ipc-main-internal';",
          "",
          "[Removed Lines]",
          "2: import type { IpcMainInvokeEvent, WebContents } from 'electron/main';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: };",
          "29:   const window = event.sender.getOwnerBrowserWindow();",
          "30:   if (window) {",
          "31:     window.close();",
          "",
          "[Removed Lines]",
          "28: ipcMainInternal.on('ELECTRON_BROWSER_WINDOW_CLOSE', function (event: ElectronInternal.IpcMainInternalEvent) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "33:   event.returnValue = null;",
          "34: });",
          "37:   return event.sender.getLastWebPreferences();",
          "38: });",
          "",
          "[Removed Lines]",
          "36: ipcMainInternal.handle('ELECTRON_BROWSER_GET_LAST_WEB_PREFERENCES', function (event: IpcMainInvokeEvent) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "49:   }",
          "50: })();",
          "53:   if (!allowedClipboardMethods.has(method)) {",
          "54:     throw new Error(`Invalid method: ${method}`);",
          "55:   }",
          "",
          "[Removed Lines]",
          "52: ipcMainUtils.handleSync('ELECTRON_BROWSER_CLIPBOARD_SYNC', function (event: IpcMainInvokeEvent, method: string, ...args: any[]) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "60: if (BUILDFLAG(ENABLE_DESKTOP_CAPTURER)) {",
          "61:   const desktopCapturer = require('@electron/internal/browser/desktop-capturer');",
          "64:     logStack(event.sender, 'desktopCapturer.getSources()', stack);",
          "65:     const customEvent = emitCustomEvent(event.sender, 'desktop-capturer-get-sources');",
          "",
          "[Removed Lines]",
          "63:   ipcMainInternal.handle('ELECTRON_BROWSER_DESKTOP_CAPTURER_GET_SOURCES', async function (event: IpcMainInvokeEvent, options: Electron.SourcesOptions, stack: string) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "88:   return { preloadPath, preloadSrc, preloadError };",
          "89: };",
          "92:   const preloadPaths = event.sender._getPreloadPaths();",
          "93:   const webPreferences = event.sender.getLastWebPreferences() || {};",
          "",
          "[Removed Lines]",
          "91: ipcMainUtils.handleSync('ELECTRON_BROWSER_SANDBOX_LOAD', async function (event: IpcMainInvokeEvent) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "109:   };",
          "110: });",
          "113:   event.sender.emit('preload-error', event, preloadPath, error);",
          "114: });",
          "",
          "[Removed Lines]",
          "112: ipcMainInternal.on('ELECTRON_BROWSER_PRELOAD_ERROR', function (event: ElectronInternal.IpcMainInternalEvent, preloadPath: string, error: Error) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "125:   return crashReporter.getUploadToServer();",
          "126: });",
          "129:   return crashReporter.setUploadToServer(uploadToServer);",
          "130: });",
          "",
          "[Removed Lines]",
          "128: ipcMainUtils.handleSync('ELECTRON_CRASH_REPORTER_SET_UPLOAD_TO_SERVER', (event: IpcMainInvokeEvent, uploadToServer: boolean) => {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/common/api/deprecate.ts||licommon/api/deprecate.ts": [
          "File: lib/common/api/deprecate.ts -> licommon/api/deprecate.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:     return function (this: any) {",
          "44:       warn();",
          "45:       fn.apply(this, arguments);",
          "47:   },",
          "",
          "[Removed Lines]",
          "46:     };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:     return function (this: any) {",
          "53:       warn();",
          "54:       return fn.apply(this, arguments);",
          "56:   },",
          "58:   moveAPI<T extends Function> (fn: T, oldUsage: string, newUsage: string): T {",
          "",
          "[Removed Lines]",
          "55:     };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:     return function (this: any) {",
          "61:       warn();",
          "62:       return fn.apply(this, arguments);",
          "64:   },",
          "",
          "[Removed Lines]",
          "63:     } as any;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/common/type-utils.ts||licommon/type-utils.ts": [
          "File: lib/common/type-utils.ts -> licommon/type-utils.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:   return Object.fromEntries(targetEntries);",
          "35: };",
          "38:   const representations = [];",
          "39:   const scaleFactors = image.getScaleFactors();",
          "",
          "[Removed Lines]",
          "37: function serializeNativeImage (image: any) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/renderer/inspector.ts||lirenderer/inspector.ts": [
          "File: lib/renderer/inspector.ts -> lirenderer/inspector.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: }",
          "23:   return ipcRendererUtils.invokeSync('ELECTRON_INSPECTOR_CONFIRM', message, title) as boolean;",
          "24: };",
          "",
          "[Removed Lines]",
          "22: (window.confirm as any) = function (message: string, title: string) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/renderer/web-view/web-view-impl.ts||lirenderer/web-view/web-view-impl.ts": [
          "File: lib/renderer/web-view/web-view-impl.ts -> lirenderer/web-view/web-view-impl.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:   for (const property of properties) {",
          "264:     Object.defineProperty(WebViewElement.prototype, property, {",
          "266:       set: createPropertySetter(property)",
          "267:     });",
          "268:   }",
          "",
          "[Removed Lines]",
          "265:       get: createPropertyGetter(property) as any,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/renderer/window-setup.ts||lirenderer/window-setup.ts": [
          "File: lib/renderer/window-setup.ts -> lirenderer/window-setup.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "255:   if (!usesNativeWindowOpen) {",
          "259:       if (url != null && url !== '') {",
          "260:         url = resolveURL(url, location.href);",
          "261:       }",
          "262:       const guestId = ipcRendererInternal.sendSync('ELECTRON_GUEST_WINDOW_MANAGER_WINDOW_OPEN', url, toString(frameName), toString(features));",
          "263:       if (guestId != null) {",
          "265:       } else {",
          "266:         return null;",
          "267:       }",
          "",
          "[Removed Lines]",
          "258:     (window as any).open = function (url?: string, frameName?: string, features?: string) {",
          "264:         return getOrCreateProxy(guestId);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "spec-main/api-deprecate-spec.ts||spec-main/api-deprecate-spec.ts": [
          "File: spec-main/api-deprecate-spec.ts -> spec-main/api-deprecate-spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:     deprecate.setHandler(m => { msg = m; });",
          "126:     function oldFn () { return 'hello'; }",
          "129:     deprecatedFn();",
          "131:     expect(msg).to.be.a('string');",
          "",
          "[Removed Lines]",
          "127:     function newFn () { return 'goodbye'; }",
          "128:     const deprecatedFn = deprecate.renameFunction(oldFn, newFn);",
          "",
          "[Added Lines]",
          "127:     const deprecatedFn = deprecate.renameFunction(oldFn, 'newFn');",
          "",
          "---------------"
        ],
        "typings/internal-ambient.d.ts||typings/internal-ambient.d.ts": [
          "File: typings/internal-ambient.d.ts -> typings/internal-ambient.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:     initAsarSupport(require: NodeJS.Require): void;",
          "93:   }",
          "95:   type DataPipe = {",
          "96:     write: (buf: Uint8Array) => Promise<void>;",
          "97:     done: () => void;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:   interface PowerMonitorBinding extends Electron.PowerMonitor {",
          "96:     createPowerMonitor(): PowerMonitorBinding;",
          "97:     setListeningForShutdown(listening: boolean): void;",
          "98:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:   }",
          "140:   interface Process {",
          "141:     _linkedBinding(name: string): any;",
          "146:     _linkedBinding(name: 'electron_common_command_line'): Electron.CommandLine;",
          "147:     _linkedBinding(name: 'electron_common_environment'): EnvironmentBinding;",
          "148:     _linkedBinding(name: 'electron_browser_desktop_capturer'): {",
          "149:       createDesktopCapturer(): ElectronInternal.DesktopCapturer;",
          "150:     };",
          "151:     _linkedBinding(name: 'electron_browser_net'): {",
          "152:       isValidHeaderName: (headerName: string) => boolean;",
          "153:       isValidHeaderValue: (headerValue: string) => boolean;",
          "",
          "[Removed Lines]",
          "142:     _linkedBinding(name: 'electron_renderer_ipc'): { ipc: IpcRendererBinding };",
          "143:     _linkedBinding(name: 'electron_common_v8_util'): V8UtilBinding;",
          "144:     _linkedBinding(name: 'electron_common_features'): FeaturesBinding;",
          "145:     _linkedBinding(name: 'electron_browser_app'): { app: Electron.App, App: Function };",
          "",
          "[Added Lines]",
          "146:     internalBinding?(name: string): any;",
          "148:     _linkedBinding(name: 'electron_common_asar'): AsarBinding;",
          "149:     _linkedBinding(name: 'electron_common_clipboard'): Electron.Clipboard;",
          "152:     _linkedBinding(name: 'electron_common_features'): FeaturesBinding;",
          "153:     _linkedBinding(name: 'electron_common_native_image'): { nativeImage: typeof Electron.NativeImage };",
          "154:     _linkedBinding(name: 'electron_common_native_theme'): { nativeTheme: Electron.NativeTheme };",
          "155:     _linkedBinding(name: 'electron_common_notification'): {",
          "156:       isSupported(): boolean;",
          "157:       Notification: typeof Electron.Notification;",
          "158:     }",
          "159:     _linkedBinding(name: 'electron_common_screen'): { createScreen(): Electron.Screen };",
          "160:     _linkedBinding(name: 'electron_common_shell'): Electron.Shell;",
          "161:     _linkedBinding(name: 'electron_common_v8_util'): V8UtilBinding;",
          "162:     _linkedBinding(name: 'electron_browser_app'): { app: Electron.App, App: Function };",
          "163:     _linkedBinding(name: 'electron_browser_auto_updater'): { autoUpdater: Electron.AutoUpdater };",
          "164:     _linkedBinding(name: 'electron_browser_browser_view'): { BrowserView: typeof Electron.BrowserView };",
          "165:     _linkedBinding(name: 'electron_browser_crash_reporter'): Omit<Electron.CrashReporter, 'start'> & {",
          "166:       start(submitUrl: string,",
          "167:         uploadToServer: boolean,",
          "168:         ignoreSystemCrashHandler: boolean,",
          "169:         rateLimit: boolean,",
          "170:         compress: boolean,",
          "171:         globalExtra: Record<string, string>,",
          "172:         extra: Record<string, string>,",
          "173:         isNodeProcess: boolean): void;",
          "174:     };",
          "178:     _linkedBinding(name: 'electron_browser_event'): {",
          "179:       createWithSender(sender: Electron.WebContents): Electron.Event;",
          "180:       createEmpty(): Electron.Event;",
          "181:     };",
          "182:     _linkedBinding(name: 'electron_browser_event_emitter'): {",
          "183:       setEventEmitterPrototype(prototype: Object): void;",
          "184:     };",
          "185:     _linkedBinding(name: 'electron_browser_global_shortcut'): { globalShortcut: Electron.GlobalShortcut };",
          "186:     _linkedBinding(name: 'electron_browser_image_view'): { ImageView: any };",
          "187:     _linkedBinding(name: 'electron_browser_in_app_purchase'): { inAppPurchase: Electron.InAppPurchase };",
          "188:     _linkedBinding(name: 'electron_browser_message_port'): {",
          "189:       createPair(): { port1: Electron.MessagePortMain, port2: Electron.MessagePortMain };",
          "190:     };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:       net: any;",
          "156:       createURLLoader(options: CreateURLLoaderOptions): URLLoader;",
          "157:     };",
          "159:     log: NodeJS.WriteStream['write'];",
          "160:     activateUvLoop(): void;",
          "",
          "[Removed Lines]",
          "158:     _linkedBinding(name: 'electron_common_asar'): AsarBinding;",
          "",
          "[Added Lines]",
          "198:     _linkedBinding(name: 'electron_browser_power_monitor'): PowerMonitorBinding;",
          "199:     _linkedBinding(name: 'electron_browser_power_save_blocker'): { powerSaveBlocker: Electron.PowerSaveBlocker };",
          "200:     _linkedBinding(name: 'electron_browser_session'): typeof Electron.Session;",
          "201:     _linkedBinding(name: 'electron_browser_system_preferences'): { systemPreferences: Electron.SystemPreferences };",
          "202:     _linkedBinding(name: 'electron_browser_tray'): { Tray: Electron.Tray };",
          "203:     _linkedBinding(name: 'electron_browser_view'): { View: Electron.View };",
          "204:     _linkedBinding(name: 'electron_browser_web_contents_view'): { WebContentsView: typeof Electron.WebContentsView };",
          "205:     _linkedBinding(name: 'electron_renderer_crash_reporter'): Electron.CrashReporter;",
          "206:     _linkedBinding(name: 'electron_renderer_ipc'): { ipc: IpcRendererBinding };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "260:   readonly contentRect: DOMRectReadOnly;",
          "261: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "313: interface WeakRef<T extends object> {",
          "314:   readonly [Symbol.toStringTag]: \"WeakRef\";",
          "320:   deref(): T | undefined;",
          "321: }",
          "323: interface WeakRefConstructor {",
          "324:   readonly prototype: WeakRef<any>;",
          "330:   new<T extends object>(target?: T): WeakRef<T>;",
          "331: }",
          "333: declare var WeakRef: WeakRefConstructor;",
          "335: interface FinalizationRegistry {",
          "336:   readonly [Symbol.toStringTag]: \"FinalizationRegistry\";",
          "347:   register(target: object, heldValue: any, unregisterToken?: object): void;",
          "354:   unregister(unregisterToken: object): void;",
          "355: }",
          "357: interface FinalizationRegistryConstructor {",
          "358:   readonly prototype: FinalizationRegistry;",
          "364:   new(cleanupCallback: (heldValue: any) => void): FinalizationRegistry;",
          "365: }",
          "367: declare var FinalizationRegistry: FinalizationRegistryConstructor;",
          "",
          "---------------"
        ],
        "typings/internal-electron.d.ts||typings/internal-electron.d.ts": [
          "File: typings/internal-electron.d.ts -> typings/internal-electron.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:   type TouchBarItemType = NonNullable<Electron.TouchBarConstructorOptions['items']>[0];",
          "24:   interface BrowserWindow {",
          "25:     _touchBar: Electron.TouchBar | null;",
          "26:     _setTouchBarItems: (items: TouchBarItemType[]) => void;",
          "27:     _setEscapeTouchBarItem: (item: TouchBarItemType | {}) => void;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:   interface BaseWindow {",
          "25:     _init(): void;",
          "26:   }",
          "29:     _init(): void;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:   interface WebContents {",
          "49:     _getURL(): string;",
          "51:     _stop(): void;",
          "52:     _goBack(): void;",
          "53:     _goForward(): void;",
          "",
          "[Removed Lines]",
          "50:     _loadURL(url: string, options: Electron.LoadURLOptions): void;",
          "",
          "[Added Lines]",
          "55:     _loadURL(url: string, options: ElectronInternal.LoadURLOptions): void;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:     browserWindowOptions: BrowserWindowConstructorOptions;",
          "62:     _send(internal: boolean, sendToAll: boolean, channel: string, args: any): boolean;",
          "63:     _sendToFrame(internal: boolean, sendToAll: boolean, frameId: number, channel: string, args: any): boolean;",
          "65:     _postMessage(channel: string, message: any, transfer?: any[]): void;",
          "66:     _sendInternal(channel: string, ...args: any[]): void;",
          "67:     _sendInternalToAll(channel: string, ...args: any[]): void;",
          "",
          "[Removed Lines]",
          "64:     _sendToFrameInternal(frameId: number, channel: string, args: any): boolean;",
          "",
          "[Added Lines]",
          "69:     _sendToFrameInternal(frameId: number, channel: string, ...args: any[]): boolean;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "123:     acceleratorWorksWhenHidden?: boolean;",
          "124:   }",
          "127:   const deprecate: ElectronInternal.DeprecationUtil;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:   interface IpcMainInvokeEvent {",
          "132:     _reply(value: any): void;",
          "133:     _throw(error: Error): void;",
          "134:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "177:     getHandler(): DeprecationHandler | null;",
          "178:     warn(oldName: string, newName: string): void;",
          "179:     log(message: string): void;",
          "182:     event(emitter: NodeJS.EventEmitter, oldName: string, newName: string): void;",
          "183:     removeProperty<T, K extends (keyof T & string)>(object: T, propertyName: K, onlyForValues?: any[]): T;",
          "184:     renameProperty<T, K extends (keyof T & string)>(object: T, oldName: string, newName: K): T;",
          "",
          "[Removed Lines]",
          "180:     removeFunction(fn: Function, removedName: string): Function;",
          "181:     renameFunction(fn: Function, newName: string | Function): Function;",
          "",
          "[Added Lines]",
          "189:     removeFunction<T extends Function>(fn: T, removedName: string): T;",
          "190:     renameFunction<T extends Function>(fn: T, newName: string): T;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "222:     once(channel: string, listener: (event: IpcMainInternalEvent, ...args: any[]) => void): this;",
          "223:   }",
          "225:   type ModuleLoader = () => any;",
          "227:   interface ModuleEntry {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234:   interface LoadURLOptions extends Electron.LoadURLOptions {",
          "235:     reloadIgnoringCache?: boolean;",
          "236:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1e73fa5f5e96af7c352053f34879e44ea8ab0bd",
      "candidate_info": {
        "commit_hash": "e1e73fa5f5e96af7c352053f34879e44ea8ab0bd",
        "repo": "electron/electron",
        "commit_url": "https://github.com/electron/electron/commit/e1e73fa5f5e96af7c352053f34879e44ea8ab0bd",
        "files": [
          "BUILD.gn",
          "lib/browser/remote/server.ts",
          "shell/common/api/api.mojom",
          "shell/common/api/electron_api_v8_util.cc",
          "shell/common/api/remote/remote_callback_freer.cc",
          "shell/common/api/remote/remote_callback_freer.h",
          "shell/renderer/electron_api_service_impl.cc",
          "shell/renderer/electron_api_service_impl.h",
          "typings/internal-ambient.d.ts"
        ],
        "message": "refactor: use WeakRef on main process side of remote (#24115)",
        "before_after_code_files": [
          "BUILD.gn||BUILD.gn",
          "lib/browser/remote/server.ts||librowser/remote/server.ts",
          "shell/common/api/api.mojom||shell/common/api/api.mojom",
          "shell/common/api/electron_api_v8_util.cc||shell/common/api/electron_api_v8_util.cc",
          "shell/common/api/remote/remote_callback_freer.cc||shell/common/api/remote/remote_callback_freer.cc",
          "shell/common/api/remote/remote_callback_freer.h||shell/common/api/remote/remote_callback_freer.h",
          "shell/renderer/electron_api_service_impl.cc||shell/renderer/electron_api_service_impl.cc",
          "shell/renderer/electron_api_service_impl.h||shell/renderer/electron_api_service_impl.h",
          "typings/internal-ambient.d.ts||typings/internal-ambient.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/browser/remote/server.ts||lib/browser/remote/server.ts"
          ],
          "candidate": [
            "lib/browser/remote/server.ts||librowser/remote/server.ts"
          ]
        }
      },
      "candidate_diff": {
        "BUILD.gn||BUILD.gn": [
          "File: BUILD.gn -> BUILD.gn",
          "--- Hunk 1 ---",
          "[Context before]",
          "602:     ]",
          "603:   }",
          "612:   if (enable_desktop_capturer) {",
          "613:     if (is_component_build && !is_linux) {",
          "614:       # On windows the implementation relies on unexported",
          "",
          "[Removed Lines]",
          "605:   if (enable_remote_module) {",
          "606:     sources += [",
          "607:       \"shell/common/api/remote/remote_callback_freer.cc\",",
          "608:       \"shell/common/api/remote/remote_callback_freer.h\",",
          "609:     ]",
          "610:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/browser/remote/server.ts||librowser/remote/server.ts": [
          "File: lib/browser/remote/server.ts -> librowser/remote/server.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:   throw new Error('remote module is disabled');",
          "15: }",
          "20: const FUNCTION_PROPERTIES = [",
          "21:   'length', 'name', 'arguments', 'caller', 'prototype'",
          "22: ];",
          "29: const getObjectMembers = function (object: any): ObjectMember[] {",
          "",
          "[Removed Lines]",
          "17: const hasProp = {}.hasOwnProperty;",
          "26: const rendererFunctions = v8Util.createDoubleIDWeakMap<(...args: any[]) => void>();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:         type = 'value';",
          "81:       } else if (isPromise(value)) {",
          "82:         type = 'promise';",
          "85:         type = 'array';",
          "86:       } else if (optimizeSimpleObject && v8Util.getHiddenValue(value, 'simple')) {",
          "",
          "[Removed Lines]",
          "83:       } else if (hasProp.call(value, 'callee') && value.length != null) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "226:         const objectId: [string, number] = [contextId, meta.id];",
          "233:         const callIntoRenderer = function (this: any, ...args: any[]) {",
          "234:           let succeed = false;",
          "",
          "[Removed Lines]",
          "229:         if (rendererFunctions.has(objectId)) {",
          "230:           return rendererFunctions.get(objectId);",
          "231:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "242:         v8Util.setHiddenValue(callIntoRenderer, 'location', meta.location);",
          "243:         Object.defineProperty(callIntoRenderer, 'length', { value: meta.length });",
          "247:         return callIntoRenderer;",
          "248:       }",
          "249:       default:",
          "",
          "[Removed Lines]",
          "245:         v8Util.setRemoteCallbackFreer(callIntoRenderer, frameId, contextId, meta.id, sender);",
          "246:         rendererFunctions.set(objectId, callIntoRenderer);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "309: handleRemoteCommand('ELECTRON_BROWSER_WRONG_CONTEXT_ERROR', function (event, contextId, passedContextId, id) {",
          "310:   const objectId: [string, number] = [passedContextId, id];",
          "313:     return;",
          "314:   }",
          "316: });",
          "318: handleRemoteCommand('ELECTRON_BROWSER_REQUIRE', function (event, contextId, moduleName, stack) {",
          "",
          "[Removed Lines]",
          "311:   if (!rendererFunctions.has(objectId)) {",
          "315:   removeRemoteListenersAndLogWarning(event.sender, rendererFunctions.get(objectId)!);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "shell/common/api/api.mojom||shell/common/api/api.mojom": [
          "File: shell/common/api/api.mojom -> shell/common/api/api.mojom",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:   ReceivePostMessage(string channel, blink.mojom.TransferableMessage message);",
          "25:   NotifyUserActivation();",
          "27:   TakeHeapSnapshot(handle file) => (bool success);",
          "",
          "[Removed Lines]",
          "20:   [EnableIf=enable_remote_module]",
          "21:   DereferenceRemoteJSCallback(",
          "22:     string context_id,",
          "23:     int32 object_id);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "shell/common/api/electron_api_v8_util.cc||shell/common/api/electron_api_v8_util.cc": [
          "File: shell/common/api/electron_api_v8_util.cc -> shell/common/api/electron_api_v8_util.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"url/origin.h\"",
          "17: #include \"v8/include/v8-profiler.h\"",
          "23: namespace std {",
          "",
          "[Removed Lines]",
          "19: #if BUILDFLAG(ENABLE_REMOTE_MODULE)",
          "20: #include \"shell/common/api/remote/remote_callback_freer.h\"",
          "21: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:   dict.SetMethod(\"deleteHiddenValue\", &DeleteHiddenValue);",
          "145:   dict.SetMethod(\"getObjectHash\", &GetObjectHash);",
          "146:   dict.SetMethod(\"takeHeapSnapshot\", &TakeHeapSnapshot);",
          "154:   dict.SetMethod(\"requestGarbageCollectionForTesting\",",
          "155:                  &RequestGarbageCollectionForTesting);",
          "156:   dict.SetMethod(\"isSameOrigin\", &IsSameOrigin);",
          "",
          "[Removed Lines]",
          "147: #if BUILDFLAG(ENABLE_REMOTE_MODULE)",
          "148:   dict.SetMethod(\"setRemoteCallbackFreer\",",
          "149:                  &electron::RemoteCallbackFreer::BindTo);",
          "150:   dict.SetMethod(",
          "151:       \"createDoubleIDWeakMap\",",
          "152:       &electron::api::KeyWeakMap<std::pair<std::string, int32_t>>::Create);",
          "153: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "shell/common/api/remote/remote_callback_freer.cc||shell/common/api/remote/remote_callback_freer.cc": [
          "File: shell/common/api/remote/remote_callback_freer.cc -> shell/common/api/remote/remote_callback_freer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "shell/common/api/remote/remote_callback_freer.h||shell/common/api/remote/remote_callback_freer.h": [
          "File: shell/common/api/remote/remote_callback_freer.h -> shell/common/api/remote/remote_callback_freer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "shell/renderer/electron_api_service_impl.cc||shell/renderer/electron_api_service_impl.cc": [
          "File: shell/renderer/electron_api_service_impl.cc -> shell/renderer/electron_api_service_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:                0);",
          "210: }",
          "239: void ElectronApiServiceImpl::NotifyUserActivation() {",
          "240:   blink::WebLocalFrame* frame = render_frame()->GetWebFrame();",
          "241:   if (frame)",
          "",
          "[Removed Lines]",
          "212: #if BUILDFLAG(ENABLE_REMOTE_MODULE)",
          "213: void ElectronApiServiceImpl::DereferenceRemoteJSCallback(",
          "214:     const std::string& context_id,",
          "215:     int32_t object_id) {",
          "216:   const auto* channel = \"ELECTRON_RENDERER_RELEASE_CALLBACK\";",
          "217:   if (!document_created_)",
          "218:     return;",
          "219:   blink::WebLocalFrame* frame = render_frame()->GetWebFrame();",
          "220:   if (!frame)",
          "221:     return;",
          "223:   v8::Isolate* isolate = blink::MainThreadIsolate();",
          "224:   v8::HandleScope handle_scope(isolate);",
          "226:   v8::Local<v8::Context> context = renderer_client_->GetContext(frame, isolate);",
          "227:   v8::Context::Scope context_scope(context);",
          "229:   base::ListValue args;",
          "230:   args.AppendString(context_id);",
          "231:   args.AppendInteger(object_id);",
          "233:   v8::Local<v8::Value> v8_args = gin::ConvertToV8(isolate, args);",
          "234:   EmitIPCEvent(context, true /* internal */, channel, {}, v8_args,",
          "235:                0 /* sender_id */);",
          "236: }",
          "237: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "shell/renderer/electron_api_service_impl.h||shell/renderer/electron_api_service_impl.h": [
          "File: shell/renderer/electron_api_service_impl.h -> shell/renderer/electron_api_service_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:                int32_t sender_id) override;",
          "36:   void ReceivePostMessage(const std::string& channel,",
          "37:                           blink::TransferableMessage message) override;",
          "42:   void NotifyUserActivation() override;",
          "43:   void TakeHeapSnapshot(mojo::ScopedHandle file,",
          "44:                         TakeHeapSnapshotCallback callback) override;",
          "",
          "[Removed Lines]",
          "38: #if BUILDFLAG(ENABLE_REMOTE_MODULE)",
          "39:   void DereferenceRemoteJSCallback(const std::string& context_id,",
          "40:                                    int32_t object_id) override;",
          "41: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "typings/internal-ambient.d.ts||typings/internal-ambient.d.ts": [
          "File: typings/internal-ambient.d.ts -> typings/internal-ambient.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     setHiddenValue<T>(obj: any, key: string, value: T): void;",
          "39:     deleteHiddenValue(obj: any, key: string): void;",
          "40:     requestGarbageCollectionForTesting(): void;",
          "43:     weaklyTrackValue(value: any): void;",
          "44:     clearWeaklyTrackedValues(): void;",
          "45:     getWeaklyTrackedValues(): any[];",
          "46:     addRemoteObjectRef(contextId: string, id: number): void;",
          "48:   }",
          "50:   type DataPipe = {",
          "",
          "[Removed Lines]",
          "41:     createDoubleIDWeakMap<V>(): ElectronInternal.KeyWeakMap<[string, number], V>;",
          "42:     setRemoteCallbackFreer(fn: Function, frameId: number, contextId: String, id: number, sender: any): void",
          "47:     setRemoteCallbackFreer(fn: Function, contextId: string, id: number, sender: any): void",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b37982987ace111819e85cd0deda5036cea2db79",
      "candidate_info": {
        "commit_hash": "b37982987ace111819e85cd0deda5036cea2db79",
        "repo": "electron/electron",
        "commit_url": "https://github.com/electron/electron/commit/b37982987ace111819e85cd0deda5036cea2db79",
        "files": [
          "lib/browser/api/web-contents.ts",
          "lib/browser/ipc-main-internal-utils.ts",
          "lib/renderer/api/ipc-renderer.ts",
          "lib/renderer/ipc-renderer-internal.ts",
          "shell/browser/api/electron_api_web_contents.cc",
          "shell/browser/api/electron_api_web_contents.h",
          "shell/common/api/api.mojom",
          "shell/renderer/api/electron_api_ipc_renderer.cc",
          "shell/renderer/electron_api_service_impl.cc",
          "shell/renderer/electron_api_service_impl.h",
          "typings/internal-ambient.d.ts",
          "typings/internal-electron.d.ts"
        ],
        "message": "chore: remove unused sendToAll + related APIs (#26771)\n\n* chore: remove unused sendToAll + related APIs\n\n* refactor: no need to args.ShallowClone() anymore",
        "before_after_code_files": [
          "lib/browser/api/web-contents.ts||lib/browser/api/web-contents.ts",
          "lib/browser/ipc-main-internal-utils.ts||lib/browser/ipc-main-internal-utils.ts",
          "lib/renderer/api/ipc-renderer.ts||lib/renderer/api/ipc-renderer.ts",
          "lib/renderer/ipc-renderer-internal.ts||lib/renderer/ipc-renderer-internal.ts",
          "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
          "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h",
          "shell/common/api/api.mojom||shell/common/api/api.mojom",
          "shell/renderer/api/electron_api_ipc_renderer.cc||shell/renderer/api/electron_api_ipc_renderer.cc",
          "shell/renderer/electron_api_service_impl.cc||shell/renderer/electron_api_service_impl.cc",
          "shell/renderer/electron_api_service_impl.h||shell/renderer/electron_api_service_impl.h",
          "typings/internal-ambient.d.ts||typings/internal-ambient.d.ts",
          "typings/internal-electron.d.ts||typings/internal-electron.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/browser/api/web-contents.ts||lib/browser/api/web-contents.ts",
            "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
            "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h",
            "typings/internal-electron.d.ts||typings/internal-electron.d.ts"
          ],
          "candidate": [
            "lib/browser/api/web-contents.ts||lib/browser/api/web-contents.ts",
            "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
            "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h",
            "typings/internal-electron.d.ts||typings/internal-electron.d.ts"
          ]
        }
      },
      "candidate_diff": {
        "lib/browser/api/web-contents.ts||lib/browser/api/web-contents.ts": [
          "File: lib/browser/api/web-contents.ts -> lib/browser/api/web-contents.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:     throw new Error('Missing required channel argument');",
          "132:   }",
          "138: };",
          "140: WebContents.prototype.postMessage = function (...args) {",
          "",
          "[Removed Lines]",
          "134:   const internal = false;",
          "135:   const sendToAll = false;",
          "137:   return this._send(internal, sendToAll, channel, args);",
          "",
          "[Added Lines]",
          "134:   return this._send(false /* internal */, channel, args);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:     throw new Error('Missing required channel argument');",
          "150:   }",
          "166: };",
          "167: WebContents.prototype.sendToFrame = function (frameId, channel, ...args) {",
          "168:   if (typeof channel !== 'string') {",
          "",
          "[Removed Lines]",
          "152:   const internal = true;",
          "153:   const sendToAll = false;",
          "155:   return this._send(internal, sendToAll, channel, args);",
          "156: };",
          "157: WebContents.prototype._sendInternalToAll = function (channel, ...args) {",
          "158:   if (typeof channel !== 'string') {",
          "159:     throw new Error('Missing required channel argument');",
          "160:   }",
          "162:   const internal = true;",
          "163:   const sendToAll = true;",
          "165:   return this._send(internal, sendToAll, channel, args);",
          "",
          "[Added Lines]",
          "149:   return this._send(true /* internal */, channel, args);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:     throw new Error('Missing required frameId argument');",
          "172:   }",
          "178: };",
          "179: WebContents.prototype._sendToFrameInternal = function (frameId, channel, ...args) {",
          "180:   if (typeof channel !== 'string') {",
          "",
          "[Removed Lines]",
          "174:   const internal = false;",
          "175:   const sendToAll = false;",
          "177:   return this._sendToFrame(internal, sendToAll, frameId, channel, args);",
          "",
          "[Added Lines]",
          "158:   return this._sendToFrame(false /* internal */, frameId, channel, args);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "183:     throw new Error('Missing required frameId argument');",
          "184:   }",
          "190: };",
          "",
          "[Removed Lines]",
          "186:   const internal = true;",
          "187:   const sendToAll = false;",
          "189:   return this._sendToFrame(internal, sendToAll, frameId, channel, args);",
          "",
          "[Added Lines]",
          "167:   return this._sendToFrame(true /* internal */, frameId, channel, args);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "200: for (const method of webFrameMethods) {",
          "201:   WebContents.prototype[method] = function (...args: any[]): Promise<any> {",
          "203:   };",
          "204: }",
          "",
          "[Removed Lines]",
          "202:     return ipcMainUtils.invokeInWebContents(this, false, IPC_MESSAGES.RENDERER_WEB_FRAME_METHOD, method, ...args);",
          "",
          "[Added Lines]",
          "180:     return ipcMainUtils.invokeInWebContents(this, IPC_MESSAGES.RENDERER_WEB_FRAME_METHOD, method, ...args);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "218: WebContents.prototype.executeJavaScript = async function (code, hasUserGesture) {",
          "219:   await waitTillCanExecuteJavaScript(this);",
          "221: };",
          "222: WebContents.prototype.executeJavaScriptInIsolatedWorld = async function (worldId, code, hasUserGesture) {",
          "223:   await waitTillCanExecuteJavaScript(this);",
          "225: };",
          "",
          "[Removed Lines]",
          "220:   return ipcMainUtils.invokeInWebContents(this, false, IPC_MESSAGES.RENDERER_WEB_FRAME_METHOD, 'executeJavaScript', String(code), !!hasUserGesture);",
          "224:   return ipcMainUtils.invokeInWebContents(this, false, IPC_MESSAGES.RENDERER_WEB_FRAME_METHOD, 'executeJavaScriptInIsolatedWorld', worldId, code, !!hasUserGesture);",
          "",
          "[Added Lines]",
          "198:   return ipcMainUtils.invokeInWebContents(this, IPC_MESSAGES.RENDERER_WEB_FRAME_METHOD, 'executeJavaScript', String(code), !!hasUserGesture);",
          "202:   return ipcMainUtils.invokeInWebContents(this, IPC_MESSAGES.RENDERER_WEB_FRAME_METHOD, 'executeJavaScriptInIsolatedWorld', worldId, code, !!hasUserGesture);",
          "",
          "---------------"
        ],
        "lib/browser/ipc-main-internal-utils.ts||lib/browser/ipc-main-internal-utils.ts": [
          "File: lib/browser/ipc-main-internal-utils.ts -> lib/browser/ipc-main-internal-utils.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: let nextId = 0;",
          "18:   return new Promise<T>((resolve, reject) => {",
          "19:     const requestId = ++nextId;",
          "20:     const channel = `${command}_RESPONSE_${requestId}`;",
          "",
          "[Removed Lines]",
          "17: export function invokeInWebContents<T> (sender: Electron.WebContents, sendToAll: boolean, command: string, ...args: any[]) {",
          "",
          "[Added Lines]",
          "17: export function invokeInWebContents<T> (sender: Electron.WebContents, command: string, ...args: any[]) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:       }",
          "34:     });",
          "41:   });",
          "42: }",
          "",
          "[Removed Lines]",
          "36:     if (sendToAll) {",
          "37:       sender._sendInternalToAll(command, requestId, ...args);",
          "38:     } else {",
          "39:       sender._sendInternal(command, requestId, ...args);",
          "40:     }",
          "",
          "[Added Lines]",
          "36:     sender._sendInternal(command, requestId, ...args);",
          "",
          "---------------"
        ],
        "lib/renderer/api/ipc-renderer.ts||lib/renderer/api/ipc-renderer.ts": [
          "File: lib/renderer/api/ipc-renderer.ts -> lib/renderer/api/ipc-renderer.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: };",
          "20: ipcRenderer.sendTo = function (webContentsId, channel, ...args) {",
          "22: };",
          "24: ipcRenderer.invoke = async function (channel, ...args) {",
          "",
          "[Removed Lines]",
          "21:   return ipc.sendTo(internal, false, webContentsId, channel, args);",
          "",
          "[Added Lines]",
          "21:   return ipc.sendTo(internal, webContentsId, channel, args);",
          "",
          "---------------"
        ],
        "lib/renderer/ipc-renderer-internal.ts||lib/renderer/ipc-renderer-internal.ts": [
          "File: lib/renderer/ipc-renderer-internal.ts -> lib/renderer/ipc-renderer-internal.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: };",
          "16: ipcRendererInternal.sendTo = function (webContentsId, channel, ...args) {",
          "22: };",
          "24: ipcRendererInternal.invoke = async function<T> (channel: string, ...args: any[]) {",
          "",
          "[Removed Lines]",
          "17:   return ipc.sendTo(internal, false, webContentsId, channel, args);",
          "18: };",
          "20: ipcRendererInternal.sendToAll = function (webContentsId, channel, ...args) {",
          "21:   return ipc.sendTo(internal, true, webContentsId, channel, args);",
          "",
          "[Added Lines]",
          "17:   return ipc.sendTo(internal, webContentsId, channel, args);",
          "",
          "---------------"
        ],
        "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc": [
          "File: shell/browser/api/electron_api_web_contents.cc -> shell/browser/api/electron_api_web_contents.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1577: }",
          "1579: void WebContents::MessageTo(bool internal,",
          "1581:                             int32_t web_contents_id,",
          "1582:                             const std::string& channel,",
          "1583:                             blink::CloneableMessage arguments) {",
          "",
          "[Removed Lines]",
          "1580:                             bool send_to_all,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1585:   auto* web_contents = FromID(web_contents_id);",
          "1587:   if (web_contents) {",
          "1589:                                            std::move(arguments), ID());",
          "1590:   }",
          "1591: }",
          "",
          "[Removed Lines]",
          "1588:     web_contents->SendIPCMessageWithSender(internal, send_to_all, channel,",
          "",
          "[Added Lines]",
          "1587:     web_contents->SendIPCMessageWithSender(internal, channel,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2685: #endif",
          "2687: bool WebContents::SendIPCMessage(bool internal,",
          "2689:                                  const std::string& channel,",
          "2690:                                  v8::Local<v8::Value> args) {",
          "2691:   v8::Isolate* isolate = JavascriptEnvironment::GetIsolate();",
          "",
          "[Removed Lines]",
          "2688:                                  bool send_to_all,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2695:         gin::StringToV8(isolate, \"Failed to serialize arguments\")));",
          "2696:     return false;",
          "2697:   }",
          "2700: }",
          "2702: bool WebContents::SendIPCMessageWithSender(bool internal,",
          "2704:                                            const std::string& channel,",
          "2705:                                            blink::CloneableMessage args,",
          "2706:                                            int32_t sender_id) {",
          "2724:   return true;",
          "2725: }",
          "2727: bool WebContents::SendIPCMessageToFrame(bool internal,",
          "2729:                                         int32_t frame_id,",
          "2730:                                         const std::string& channel,",
          "2731:                                         v8::Local<v8::Value> args) {",
          "",
          "[Removed Lines]",
          "2698:   return SendIPCMessageWithSender(internal, send_to_all, channel,",
          "2699:                                   std::move(message));",
          "2703:                                            bool send_to_all,",
          "2707:   std::vector<content::RenderFrameHost*> target_hosts;",
          "2708:   if (!send_to_all) {",
          "2709:     auto* frame_host = web_contents()->GetMainFrame();",
          "2710:     if (frame_host) {",
          "2711:       target_hosts.push_back(frame_host);",
          "2712:     }",
          "2713:   } else {",
          "2714:     target_hosts = web_contents()->GetAllFrames();",
          "2715:   }",
          "2717:   for (auto* frame_host : target_hosts) {",
          "2718:     mojo::AssociatedRemote<mojom::ElectronRenderer> electron_renderer;",
          "2719:     frame_host->GetRemoteAssociatedInterfaces()->GetInterface(",
          "2720:         &electron_renderer);",
          "2721:     electron_renderer->Message(internal, false, channel, args.ShallowClone(),",
          "2722:                                sender_id);",
          "2723:   }",
          "2728:                                         bool send_to_all,",
          "",
          "[Added Lines]",
          "2696:   return SendIPCMessageWithSender(internal, channel, std::move(message));",
          "2703:   auto* frame_host = web_contents()->GetMainFrame();",
          "2704:   mojo::AssociatedRemote<mojom::ElectronRenderer> electron_renderer;",
          "2705:   frame_host->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);",
          "2706:   electron_renderer->Message(internal, channel, std::move(args), sender_id);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2748:   mojo::AssociatedRemote<mojom::ElectronRenderer> electron_renderer;",
          "2749:   (*iter)->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);",
          "2751:                              0 /* sender_id */);",
          "2752:   return true;",
          "2753: }",
          "",
          "[Removed Lines]",
          "2750:   electron_renderer->Message(internal, send_to_all, channel, std::move(message),",
          "",
          "[Added Lines]",
          "2732:   electron_renderer->Message(internal, channel, std::move(message),",
          "",
          "---------------"
        ],
        "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h": [
          "File: shell/browser/api/electron_api_web_contents.h -> shell/browser/api/electron_api_web_contents.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:   bool SendIPCMessage(bool internal,",
          "253:                       const std::string& channel,",
          "254:                       v8::Local<v8::Value> args);",
          "256:   bool SendIPCMessageWithSender(bool internal,",
          "258:                                 const std::string& channel,",
          "259:                                 blink::CloneableMessage args,",
          "260:                                 int32_t sender_id = 0);",
          "262:   bool SendIPCMessageToFrame(bool internal,",
          "264:                              int32_t frame_id,",
          "265:                              const std::string& channel,",
          "266:                              v8::Local<v8::Value> args);",
          "",
          "[Removed Lines]",
          "252:                       bool send_to_all,",
          "257:                                 bool send_to_all,",
          "263:                              bool send_to_all,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "619:                    blink::CloneableMessage arguments,",
          "620:                    MessageSyncCallback callback) override;",
          "621:   void MessageTo(bool internal,",
          "623:                  int32_t web_contents_id,",
          "624:                  const std::string& channel,",
          "625:                  blink::CloneableMessage arguments) override;",
          "",
          "[Removed Lines]",
          "622:                  bool send_to_all,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "shell/common/api/api.mojom||shell/common/api/api.mojom": [
          "File: shell/common/api/api.mojom -> shell/common/api/api.mojom",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: interface ElectronRenderer {",
          "9:   Message(",
          "10:       bool internal,",
          "12:       string channel,",
          "13:       blink.mojom.CloneableMessage arguments,",
          "14:       int32 sender_id);",
          "",
          "[Removed Lines]",
          "11:       bool send_to_all,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:   MessageTo(",
          "69:     bool internal,",
          "71:     int32 web_contents_id,",
          "72:     string channel,",
          "73:     blink.mojom.CloneableMessage arguments);",
          "",
          "[Removed Lines]",
          "70:     bool send_to_all,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "shell/renderer/api/electron_api_ipc_renderer.cc||shell/renderer/api/electron_api_ipc_renderer.cc": [
          "File: shell/renderer/api/electron_api_ipc_renderer.cc -> shell/renderer/api/electron_api_ipc_renderer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:   void SendTo(v8::Isolate* isolate,",
          "173:               gin_helper::ErrorThrower thrower,",
          "174:               bool internal,",
          "176:               int32_t web_contents_id,",
          "177:               const std::string& channel,",
          "178:               v8::Local<v8::Value> arguments) {",
          "",
          "[Removed Lines]",
          "175:               bool send_to_all,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:     if (!electron::SerializeV8Value(isolate, arguments, &message)) {",
          "185:       return;",
          "186:     }",
          "189:   }",
          "191:   void SendToHost(v8::Isolate* isolate,",
          "",
          "[Removed Lines]",
          "187:     electron_browser_remote_->MessageTo(internal, send_to_all, web_contents_id,",
          "188:                                         channel, std::move(message));",
          "",
          "[Added Lines]",
          "186:     electron_browser_remote_->MessageTo(internal, web_contents_id, channel,",
          "187:                                         std::move(message));",
          "",
          "---------------"
        ],
        "shell/renderer/electron_api_service_impl.cc||shell/renderer/electron_api_service_impl.cc": [
          "File: shell/renderer/electron_api_service_impl.cc -> shell/renderer/electron_api_service_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: }",
          "134: void ElectronApiServiceImpl::Message(bool internal,",
          "136:                                      const std::string& channel,",
          "137:                                      blink::CloneableMessage arguments,",
          "138:                                      int32_t sender_id) {",
          "",
          "[Removed Lines]",
          "135:                                      bool send_to_all,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:   v8::Local<v8::Value> args = gin::ConvertToV8(isolate, arguments);",
          "170:   EmitIPCEvent(context, internal, channel, {}, args, sender_id);",
          "183: }",
          "185: void ElectronApiServiceImpl::ReceivePostMessage(",
          "",
          "[Removed Lines]",
          "174:   if (send_to_all) {",
          "175:     for (blink::WebFrame* child = frame->FirstChild(); child;",
          "176:          child = child->NextSibling())",
          "177:       if (child->IsWebLocalFrame()) {",
          "178:         v8::Local<v8::Context> child_context =",
          "179:             renderer_client_->GetContext(child->ToWebLocalFrame(), isolate);",
          "180:         EmitIPCEvent(child_context, internal, channel, {}, args, sender_id);",
          "181:       }",
          "182:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "shell/renderer/electron_api_service_impl.h||shell/renderer/electron_api_service_impl.h": [
          "File: shell/renderer/electron_api_service_impl.h -> shell/renderer/electron_api_service_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:       mojo::PendingAssociatedReceiver<mojom::ElectronRenderer> receiver);",
          "31:   void Message(bool internal,",
          "33:                const std::string& channel,",
          "34:                blink::CloneableMessage arguments,",
          "35:                int32_t sender_id) override;",
          "",
          "[Removed Lines]",
          "32:                bool send_to_all,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "typings/internal-ambient.d.ts||typings/internal-ambient.d.ts": [
          "File: typings/internal-ambient.d.ts -> typings/internal-ambient.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     send(internal: boolean, channel: string, args: any[]): void;",
          "33:     sendSync(internal: boolean, channel: string, args: any[]): any;",
          "34:     sendToHost(channel: string, args: any[]): void;",
          "36:     invoke<T>(internal: boolean, channel: string, args: any[]): Promise<{ error: string, result: T }>;",
          "37:     postMessage(channel: string, message: any, transferables: MessagePort[]): void;",
          "38:   }",
          "",
          "[Removed Lines]",
          "35:     sendTo(internal: boolean, sendToAll: boolean, webContentsId: number, channel: string, args: any[]): void;",
          "",
          "[Added Lines]",
          "35:     sendTo(internal: boolean, webContentsId: number, channel: string, args: any[]): void;",
          "",
          "---------------"
        ],
        "typings/internal-electron.d.ts||typings/internal-electron.d.ts": [
          "File: typings/internal-electron.d.ts -> typings/internal-electron.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     _windowOpenHandler: ((opts: {url: string, frameName: string, features: string}) => any) | null;",
          "68:     _callWindowOpenHandler(event: any, url: string, frameName: string, rawFeatures: string): Electron.BrowserWindowConstructorOptions | null;",
          "69:     _setNextChildWebPreferences(prefs: Partial<Electron.BrowserWindowConstructorOptions['webPreferences']> & Pick<Electron.BrowserWindowConstructorOptions, 'backgroundColor'>): void;",
          "72:     _sendToFrameInternal(frameId: number, channel: string, ...args: any[]): boolean;",
          "73:     _postMessage(channel: string, message: any, transfer?: any[]): void;",
          "74:     _sendInternal(channel: string, ...args: any[]): void;",
          "76:     _printToPDF(options: any): Promise<Buffer>;",
          "77:     _print(options: any, callback?: (success: boolean, failureReason: string) => void): void;",
          "78:     _getPrinters(): Electron.PrinterInfo[];",
          "",
          "[Removed Lines]",
          "70:     _send(internal: boolean, sendToAll: boolean, channel: string, args: any): boolean;",
          "71:     _sendToFrame(internal: boolean, sendToAll: boolean, frameId: number, channel: string, args: any): boolean;",
          "75:     _sendInternalToAll(channel: string, ...args: any[]): void;",
          "",
          "[Added Lines]",
          "70:     _send(internal: boolean, channel: string, args: any): boolean;",
          "71:     _sendToFrame(internal: boolean, frameId: number, channel: string, args: any): boolean;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "233:   interface IpcRendererInternal extends Electron.IpcRenderer {",
          "234:     invoke<T>(channel: string, ...args: any[]): Promise<T>;",
          "236:     onMessageFromMain(channel: string, listener: (event: Electron.IpcRendererEvent, ...args: any[]) => void): this;",
          "237:     onceMessageFromMain(channel: string, listener: (event: Electron.IpcRendererEvent, ...args: any[]) => void): this;",
          "238:   }",
          "",
          "[Removed Lines]",
          "235:     sendToAll(webContentsId: number, channel: string, ...args: any[]): void;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0bbd268eb4caf35604443df5ff196980dd49e208",
      "candidate_info": {
        "commit_hash": "0bbd268eb4caf35604443df5ff196980dd49e208",
        "repo": "electron/electron",
        "commit_url": "https://github.com/electron/electron/commit/0bbd268eb4caf35604443df5ff196980dd49e208",
        "files": [
          "docs/api/structures/ipc-main-event.md",
          "docs/api/structures/ipc-main-invoke-event.md",
          "docs/api/web-contents.md",
          "lib/browser/api/web-contents.js",
          "lib/browser/remote/server.ts",
          "shell/browser/api/electron_api_web_contents.cc",
          "shell/browser/api/electron_api_web_contents.h",
          "shell/common/api/remote/remote_callback_freer.cc",
          "shell/common/api/remote/remote_callback_freer.h",
          "shell/common/gin_helper/event_emitter.cc",
          "spec-main/api-ipc-main-spec.ts",
          "spec-main/fixtures/snapshots/proxy-window-open.snapshot.txt",
          "spec-main/guest-window-manager-spec.ts",
          "typings/internal-ambient.d.ts",
          "typings/internal-electron.d.ts"
        ],
        "message": "fix: restrict sendToFrame to same-process frames by default (#26875) (#26927)\n\n* fix: restrict sendToFrame to same-process frames by default (#26875)\n\n* missed a conflict\n\n* fix build\n\n* fix build again\n\n* fix usage of defer",
        "before_after_code_files": [
          "lib/browser/api/web-contents.js||lib/browser/api/web-contents.js",
          "lib/browser/remote/server.ts||lib/browser/remote/server.ts",
          "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
          "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h",
          "shell/common/api/remote/remote_callback_freer.cc||shell/common/api/remote/remote_callback_freer.cc",
          "shell/common/api/remote/remote_callback_freer.h||shell/common/api/remote/remote_callback_freer.h",
          "shell/common/gin_helper/event_emitter.cc||shell/common/gin_helper/event_emitter.cc",
          "spec-main/api-ipc-main-spec.ts||spec-main/api-ipc-main-spec.ts",
          "spec-main/guest-window-manager-spec.ts||spec-main/guest-window-manager-spec.ts",
          "typings/internal-ambient.d.ts||typings/internal-ambient.d.ts",
          "typings/internal-electron.d.ts||typings/internal-electron.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "lib/browser/remote/server.ts||lib/browser/remote/server.ts",
            "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
            "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h",
            "shell/common/gin_helper/event_emitter.cc||shell/common/gin_helper/event_emitter.cc",
            "spec-main/api-ipc-main-spec.ts||spec-main/api-ipc-main-spec.ts",
            "spec-main/guest-window-manager-spec.ts||spec-main/guest-window-manager-spec.ts",
            "typings/internal-electron.d.ts||typings/internal-electron.d.ts"
          ],
          "candidate": [
            "lib/browser/remote/server.ts||lib/browser/remote/server.ts",
            "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
            "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h",
            "shell/common/gin_helper/event_emitter.cc||shell/common/gin_helper/event_emitter.cc",
            "spec-main/api-ipc-main-spec.ts||spec-main/api-ipc-main-spec.ts",
            "spec-main/guest-window-manager-spec.ts||spec-main/guest-window-manager-spec.ts",
            "typings/internal-electron.d.ts||typings/internal-electron.d.ts"
          ]
        }
      },
      "candidate_diff": {
        "lib/browser/api/web-contents.js||lib/browser/api/web-contents.js": [
          "File: lib/browser/api/web-contents.js -> lib/browser/api/web-contents.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:   return this._send(internal, sendToAll, channel, args);",
          "169: };",
          "171:   if (typeof channel !== 'string') {",
          "172:     throw new Error('Missing required channel argument');",
          "175:   }",
          "177:   const internal = false;",
          "178:   const sendToAll = false;",
          "181: };",
          "183:   if (typeof channel !== 'string') {",
          "184:     throw new Error('Missing required channel argument');",
          "187:   }",
          "189:   const internal = true;",
          "190:   const sendToAll = false;",
          "193: };",
          "",
          "[Removed Lines]",
          "170: WebContents.prototype.sendToFrame = function (frameId, channel, ...args) {",
          "173:   } else if (typeof frameId !== 'number') {",
          "174:     throw new Error('Missing required frameId argument');",
          "180:   return this._sendToFrame(internal, sendToAll, frameId, channel, args);",
          "182: WebContents.prototype._sendToFrameInternal = function (frameId, channel, ...args) {",
          "185:   } else if (typeof frameId !== 'number') {",
          "186:     throw new Error('Missing required frameId argument');",
          "192:   return this._sendToFrame(internal, sendToAll, frameId, channel, args);",
          "",
          "[Added Lines]",
          "170: WebContents.prototype.sendToFrame = function (frame, channel, ...args) {",
          "173:   } else if (!(typeof frame === 'number' || Array.isArray(frame))) {",
          "174:     throw new Error('Missing required frame argument (must be number or array)');",
          "180:   return this._sendToFrame(internal, sendToAll, frame, channel, args);",
          "182: WebContents.prototype._sendToFrameInternal = function (frame, channel, ...args) {",
          "185:   } else if (!(typeof frame === 'number' || Array.isArray(frame))) {",
          "186:     throw new Error('Missing required frame argument (must be number or array)');",
          "192:   return this._sendToFrame(internal, sendToAll, frame, channel, args);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "445: };",
          "447: const addReplyToEvent = (event) => {",
          "448:   event.reply = (...args) => {",
          "450:   };",
          "451: };",
          "",
          "[Removed Lines]",
          "449:     event.sender.sendToFrame(event.frameId, ...args);",
          "",
          "[Added Lines]",
          "448:   const { processId, frameId } = event;",
          "450:     event.sender.sendToFrame([processId, frameId], ...args);",
          "",
          "---------------"
        ],
        "lib/browser/remote/server.ts||lib/browser/remote/server.ts": [
          "File: lib/browser/remote/server.ts -> lib/browser/remote/server.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "276:   });",
          "280:   const metaToValue = function (meta: MetaTypeFromRenderer): any {",
          "281:     switch (meta.type) {",
          "282:       case 'nativeimage':",
          "",
          "[Removed Lines]",
          "279: const unwrapArgs = function (sender: electron.WebContents, frameId: number, contextId: string, args: any[]) {",
          "",
          "[Added Lines]",
          "279: const unwrapArgs = function (sender: electron.WebContents, frameId: [number, number], contextId: string, args: any[]) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "331:         v8Util.setHiddenValue(callIntoRenderer, 'location', meta.location);",
          "332:         Object.defineProperty(callIntoRenderer, 'length', { value: meta.length });",
          "335:         rendererFunctions.set(objectId, callIntoRenderer);",
          "336:         return callIntoRenderer;",
          "337:       }",
          "",
          "[Removed Lines]",
          "334:         v8Util.setRemoteCallbackFreer(callIntoRenderer, frameId, contextId, meta.id, sender);",
          "",
          "[Added Lines]",
          "334:         v8Util.setRemoteCallbackFreer(callIntoRenderer, frameId[0], frameId[1], contextId, meta.id, sender);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "480: });",
          "482: handleRemoteCommand('ELECTRON_BROWSER_CONSTRUCTOR', function (event, contextId, id, args) {",
          "484:   const constructor = objectsRegistry.get(id);",
          "486:   if (constructor == null) {",
          "",
          "[Removed Lines]",
          "483:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
          "",
          "[Added Lines]",
          "483:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "491: });",
          "493: handleRemoteCommand('ELECTRON_BROWSER_FUNCTION_CALL', function (event, contextId, id, args) {",
          "495:   const func = objectsRegistry.get(id);",
          "497:   if (func == null) {",
          "",
          "[Removed Lines]",
          "494:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
          "",
          "[Added Lines]",
          "494:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "508: });",
          "510: handleRemoteCommand('ELECTRON_BROWSER_MEMBER_CONSTRUCTOR', function (event, contextId, id, method, args) {",
          "512:   const object = objectsRegistry.get(id);",
          "514:   if (object == null) {",
          "",
          "[Removed Lines]",
          "511:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
          "",
          "[Added Lines]",
          "511:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "519: });",
          "521: handleRemoteCommand('ELECTRON_BROWSER_MEMBER_CALL', function (event, contextId, id, method, args) {",
          "523:   const object = objectsRegistry.get(id);",
          "525:   if (object == null) {",
          "",
          "[Removed Lines]",
          "522:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
          "",
          "[Added Lines]",
          "522:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "536: });",
          "538: handleRemoteCommand('ELECTRON_BROWSER_MEMBER_SET', function (event, contextId, id, name, args) {",
          "540:   const obj = objectsRegistry.get(id);",
          "542:   if (obj == null) {",
          "",
          "[Removed Lines]",
          "539:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
          "",
          "[Added Lines]",
          "539:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
          "",
          "---------------"
        ],
        "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc": [
          "File: shell/browser/api/electron_api_web_contents.cc -> shell/browser/api/electron_api_web_contents.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2355: bool WebContents::SendIPCMessageToFrame(bool internal,",
          "2356:                                         bool send_to_all,",
          "2358:                                         const std::string& channel,",
          "2359:                                         v8::Local<v8::Value> args) {",
          "2360:   blink::CloneableMessage message;",
          "",
          "[Removed Lines]",
          "2357:                                         int32_t frame_id,",
          "",
          "[Added Lines]",
          "2357:                                         v8::Local<v8::Value> frame,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2363:         gin::StringToV8(isolate(), \"Failed to serialize arguments\")));",
          "2364:     return false;",
          "2365:   }",
          "2373:     return false;",
          "2375:   mojo::AssociatedRemote<mojom::ElectronRenderer> electron_renderer;",
          "2377:   electron_renderer->Message(internal, send_to_all, channel, std::move(message),",
          "2378:                              0 /* sender_id */);",
          "2379:   return true;",
          "",
          "[Removed Lines]",
          "2366:   auto frames = web_contents()->GetAllFrames();",
          "2367:   auto iter = std::find_if(frames.begin(), frames.end(), [frame_id](auto* f) {",
          "2368:     return f->GetRoutingID() == frame_id;",
          "2369:   });",
          "2370:   if (iter == frames.end())",
          "2371:     return false;",
          "2372:   if (!(*iter)->IsRenderFrameLive())",
          "2376:   (*iter)->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);",
          "",
          "[Added Lines]",
          "2366:   int32_t frame_id;",
          "2367:   int32_t process_id;",
          "2368:   if (gin::ConvertFromV8(isolate(), frame, &frame_id)) {",
          "2369:     process_id = web_contents()->GetMainFrame()->GetProcess()->GetID();",
          "2370:   } else {",
          "2371:     std::vector<int32_t> id_pair;",
          "2372:     if (gin::ConvertFromV8(isolate(), frame, &id_pair) && id_pair.size() == 2) {",
          "2373:       process_id = id_pair[0];",
          "2374:       frame_id = id_pair[1];",
          "2375:     } else {",
          "2376:       isolate()->ThrowException(v8::Exception::Error(gin::StringToV8(",
          "2377:           isolate(),",
          "2378:           \"frameId must be a number or a pair of [processId, frameId]\")));",
          "2379:       return false;",
          "2380:     }",
          "2381:   }",
          "2383:   auto* rfh = content::RenderFrameHost::FromID(process_id, frame_id);",
          "2384:   if (!rfh || !rfh->IsRenderFrameLive() ||",
          "2385:       content::WebContents::FromRenderFrameHost(rfh) != web_contents())",
          "2389:   rfh->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);",
          "",
          "---------------"
        ],
        "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h": [
          "File: shell/browser/api/electron_api_web_contents.h -> shell/browser/api/electron_api_web_contents.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "277:   bool SendIPCMessageToFrame(bool internal,",
          "278:                              bool send_to_all,",
          "280:                              const std::string& channel,",
          "281:                              v8::Local<v8::Value> args);",
          "",
          "[Removed Lines]",
          "279:                              int32_t frame_id,",
          "",
          "[Added Lines]",
          "279:                              v8::Local<v8::Value> frame,",
          "",
          "---------------"
        ],
        "shell/common/api/remote/remote_callback_freer.cc||shell/common/api/remote/remote_callback_freer.cc": [
          "File: shell/common/api/remote/remote_callback_freer.cc -> shell/common/api/remote/remote_callback_freer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: void RemoteCallbackFreer::BindTo(v8::Isolate* isolate,",
          "19:                                  v8::Local<v8::Object> target,",
          "20:                                  int frame_id,",
          "21:                                  const std::string& context_id,",
          "22:                                  int object_id,",
          "23:                                  content::WebContents* web_contents) {",
          "26: }",
          "28: RemoteCallbackFreer::RemoteCallbackFreer(v8::Isolate* isolate,",
          "29:                                          v8::Local<v8::Object> target,",
          "30:                                          int frame_id,",
          "31:                                          const std::string& context_id,",
          "32:                                          int object_id,",
          "33:                                          content::WebContents* web_contents)",
          "34:     : ObjectLifeMonitor(isolate, target),",
          "35:       content::WebContentsObserver(web_contents),",
          "36:       frame_id_(frame_id),",
          "37:       context_id_(context_id),",
          "38:       object_id_(object_id) {}",
          "",
          "[Removed Lines]",
          "24:   new RemoteCallbackFreer(isolate, target, frame_id, context_id, object_id,",
          "25:                           web_contents);",
          "",
          "[Added Lines]",
          "20:                                  int process_id,",
          "25:   new RemoteCallbackFreer(isolate, target, process_id, frame_id, context_id,",
          "26:                           object_id, web_contents);",
          "31:                                          int process_id,",
          "38:       process_id_(process_id),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: RemoteCallbackFreer::~RemoteCallbackFreer() = default;",
          "42: void RemoteCallbackFreer::RunDestructor() {",
          "54:   Observe(nullptr);",
          "55: }",
          "",
          "[Removed Lines]",
          "43:   auto frames = web_contents()->GetAllFrames();",
          "44:   auto iter = std::find_if(frames.begin(), frames.end(), [this](auto* f) {",
          "45:     return f->GetRoutingID() == frame_id_;",
          "46:   });",
          "48:   if (iter != frames.end() && (*iter)->IsRenderFrameLive()) {",
          "49:     mojo::AssociatedRemote<mojom::ElectronRenderer> electron_renderer;",
          "50:     (*iter)->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);",
          "51:     electron_renderer->DereferenceRemoteJSCallback(context_id_, object_id_);",
          "52:   }",
          "",
          "[Added Lines]",
          "46:   auto* rfh = content::RenderFrameHost::FromID(process_id_, frame_id_);",
          "47:   if (!rfh || !rfh->IsRenderFrameLive() ||",
          "48:       content::WebContents::FromRenderFrameHost(rfh) != web_contents())",
          "49:     return;",
          "51:   mojo::AssociatedRemote<mojom::ElectronRenderer> electron_renderer;",
          "52:   rfh->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);",
          "53:   electron_renderer->DereferenceRemoteJSCallback(context_id_, object_id_);",
          "",
          "---------------"
        ],
        "shell/common/api/remote/remote_callback_freer.h||shell/common/api/remote/remote_callback_freer.h": [
          "File: shell/common/api/remote/remote_callback_freer.h -> shell/common/api/remote/remote_callback_freer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:  public:",
          "18:   static void BindTo(v8::Isolate* isolate,",
          "19:                      v8::Local<v8::Object> target,",
          "20:                      int frame_id,",
          "21:                      const std::string& context_id,",
          "22:                      int object_id,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20:                      int process_id,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:  protected:",
          "26:   RemoteCallbackFreer(v8::Isolate* isolate,",
          "27:                       v8::Local<v8::Object> target,",
          "28:                       int frame_id,",
          "29:                       const std::string& context_id,",
          "30:                       int object_id,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:                       int process_id,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37:   void RenderViewDeleted(content::RenderViewHost*) override;",
          "39:  private:",
          "40:   int frame_id_;",
          "41:   std::string context_id_;",
          "42:   int object_id_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:   int process_id_;",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/event_emitter.cc||shell/common/gin_helper/event_emitter.cc": [
          "File: shell/common/gin_helper/event_emitter.cc -> shell/common/gin_helper/event_emitter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"shell/common/gin_helper/event_emitter.h\"",
          "7: #include \"content/public/browser/render_frame_host.h\"",
          "8: #include \"shell/browser/api/event.h\"",
          "9: #include \"shell/common/gin_helper/dictionary.h\"",
          "10: #include \"shell/common/gin_helper/object_template_builder.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: #include \"content/public/browser/render_process_host.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:   Dictionary dict(isolate, event);",
          "68:   dict.Set(\"sender\", sender);",
          "71:     dict.Set(\"frameId\", frame->GetRoutingID());",
          "72:   return event;",
          "73: }",
          "",
          "[Removed Lines]",
          "70:   if (frame)",
          "",
          "[Added Lines]",
          "71:   if (frame) {",
          "73:     dict.Set(\"processId\", frame->GetProcess()->GetID());",
          "74:   }",
          "",
          "---------------"
        ],
        "spec-main/api-ipc-main-spec.ts||spec-main/api-ipc-main-spec.ts": [
          "File: spec-main/api-ipc-main-spec.ts -> spec-main/api-ipc-main-spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   });",
          "48:   describe('ipcMain.on', () => {",
          "49:     it('is not used for internals', async () => {",
          "50:       const appPath = path.join(fixtures, 'api', 'ipc-main-listeners');",
          "51:       const electronPath = process.execPath;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:     afterEach(() => { ipcMain.removeAllListeners('test-echo'); });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:       output = JSON.parse(output);",
          "60:       expect(output).to.deep.equal(['error']);",
          "61:     });",
          "62:   });",
          "63: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     it('can be replied to', async () => {",
          "65:       ipcMain.on('test-echo', (e, arg) => {",
          "66:         e.reply('test-echo', arg);",
          "67:       });",
          "69:       const w = new BrowserWindow({",
          "70:         show: false,",
          "71:         webPreferences: {",
          "72:           nodeIntegration: true",
          "73:         }",
          "74:       });",
          "75:       w.loadURL('about:blank');",
          "76:       const v = await w.webContents.executeJavaScript(`new Promise((resolve, reject) => {",
          "77:         const { ipcRenderer } = require('electron')",
          "78:         ipcRenderer.send('test-echo', 'hello')",
          "79:         ipcRenderer.on('test-echo', (e, v) => {",
          "80:           resolve(v)",
          "81:         })",
          "82:       })`);",
          "83:       expect(v).to.equal('hello');",
          "84:     });",
          "",
          "---------------"
        ],
        "spec-main/guest-window-manager-spec.ts||spec-main/guest-window-manager-spec.ts": [
          "File: spec-main/guest-window-manager-spec.ts -> spec-main/guest-window-manager-spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     if (key === 'openerId' && typeof value === 'number') {",
          "95:       return 'placeholder-opener-id';",
          "96:     }",
          "97:     if (key === 'returnValue') {",
          "98:       return 'placeholder-guest-contents-id';",
          "99:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:     if (key === 'processId' && typeof value === 'number') {",
          "98:       return 'placeholder-process-id';",
          "99:     }",
          "",
          "---------------"
        ],
        "typings/internal-ambient.d.ts||typings/internal-ambient.d.ts": [
          "File: typings/internal-ambient.d.ts -> typings/internal-ambient.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     requestGarbageCollectionForTesting(): void;",
          "41:     createIDWeakMap<V>(): ElectronInternal.KeyWeakMap<number, V>;",
          "42:     createDoubleIDWeakMap<V>(): ElectronInternal.KeyWeakMap<[string, number], V>;",
          "44:     weaklyTrackValue(value: any): void;",
          "45:     clearWeaklyTrackedValues(): void;",
          "46:     getWeaklyTrackedValues(): any[];",
          "",
          "[Removed Lines]",
          "43:     setRemoteCallbackFreer(fn: Function, frameId: number, contextId: String, id: number, sender: any): void",
          "",
          "[Added Lines]",
          "43:     setRemoteCallbackFreer(fn: Function, processId: number, frameId: number, contextId: String, id: number, sender: any): void",
          "",
          "---------------"
        ],
        "typings/internal-electron.d.ts||typings/internal-electron.d.ts": [
          "File: typings/internal-electron.d.ts -> typings/internal-electron.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     _initiallyShown: boolean;",
          "36:   }",
          "38:   interface SerializedError {",
          "39:     message: string;",
          "40:     stack?: string,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:   interface WebPreferences {",
          "39:     guestInstanceId?: number;",
          "40:     openerId?: number;",
          "41:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}