{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a9a5465eb44d0d8f1c3c9d288b7f23f628ddb50b",
      "candidate_info": {
        "commit_hash": "a9a5465eb44d0d8f1c3c9d288b7f23f628ddb50b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a9a5465eb44d0d8f1c3c9d288b7f23f628ddb50b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/corruptL.test"
        ],
        "message": "Fix an assert() that may be false for corrupt databases.\n\nFossilOrigin-Name: b2ce5ed175cb5029ac07392ae371c86eeec23c74624aad007dee51cf359f3eeb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "test/corruptL.test||test/corruptL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4f35b3b78a461b0617a5cd04f60d2ab277bcc7c994dae463851a3cb5d041a723",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4284:       rc = newDatabase(pBt);",
          "4285:       pBt->nPage = get4byte(28 + pBt->pPage1->aData);",
          "4291:     }",
          "4292:     sqlite3BtreeLeave(p);",
          "4293:   }",
          "",
          "[Removed Lines]",
          "4290:       assert( pBt->nPage>0 );",
          "",
          "[Added Lines]",
          "4289:       assert( CORRUPT_DB || pBt->nPage>0 );",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "838:   INSERT INTO t3 SELECT * FROM t2;",
          "839: } {1 {database disk image is malformed}}",
          "841: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "841: #-------------------------------------------------------------------------",
          "842: reset_db",
          "843: do_test 9.0 {",
          "844:   sqlite3 db {}",
          "845:   db deserialize [decode_hexdb {",
          "846: | size 8192 pagesize 4096 filename crash-ab10597e4e1c32.db",
          "847: | page 1 offset 0",
          "848: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "849: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 00   .....@  ........",
          "850: |     96: 00 00 00 00 0d 00 00 00 01 0f d6 00 0f d6 00 00   ................",
          "851: |   4048: 00 00 00 00 00 00 28 01 06 17 11 11 01 3d 74 61   ......(......=ta",
          "852: |   4064: 62 6c 65 74 31 74 31 02 43 52 45 41 54 45 20 54   blet1t1.CREATE T",
          "853: |   4080: 41 42 4c 45 20 74 31 28 61 2c 62 2c 63 2c 64 29   ABLE t1(a,b,c,d)",
          "854: | page 2 offset 4096",
          "855: |      0: 0d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "856: | end crash-ab10597e4e1c32.db",
          "857: }]} {}",
          "859: do_execsql_test 9.1 {",
          "860:   SAVEPOINT one;",
          "861: }",
          "862: do_catchsql_test 9.3 {",
          "863:   INSERT INTO t1(b,c) VALUES(5,6);",
          "864: } {1 {database disk image is malformed}}",
          "865: do_execsql_test 9.3 {",
          "866:   ROLLBACK TO one;",
          "867: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e385d33a296bd9cfbb2fbb97a31420dfe6017ef1",
      "candidate_info": {
        "commit_hash": "e385d33a296bd9cfbb2fbb97a31420dfe6017ef1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e385d33a296bd9cfbb2fbb97a31420dfe6017ef1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pcache1.c"
        ],
        "message": "Ensure all bytes of the PgHdr1 structure are initialized. This avoids a valgrind error when running corruptI.test.\n\nFossilOrigin-Name: a505e34d4ec31159a4508ec827fcffed0cf3bd5ea5ef0ac293016da02367a53a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pcache1.c||src/pcache1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0e6249cb958a40ead0edf6e75a2c46e8657db3d358c5fe78a9dc0fa5ed7ad929",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pcache1.c||src/pcache1.c": [
          "File: src/pcache1.c -> src/pcache1.c"
        ]
      }
    },
    {
      "candidate_hash": "31999c5cac3b01dc8a17a9148f8129d33109e240",
      "candidate_info": {
        "commit_hash": "31999c5cac3b01dc8a17a9148f8129d33109e240",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/31999c5cac3b01dc8a17a9148f8129d33109e240",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/malloc.c",
          "src/pragma.c",
          "test/fuzzcheck.c",
          "test/ossfuzz.c",
          "test/tester.tcl"
        ],
        "message": "Fix a bug in the hard_heap_limit pragma so that it returns the new value of the hard_heap_limit, not the soft_heap_limit.  Change SQLITE_MAX_MEMORY so that it works by setting the default hard_heap_limit value.\n\nFossilOrigin-Name: 33fd0c3abcad5555a150990a22d9c1bab99e79be01143fccb9fafc9b52cf92c8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/malloc.c||src/malloc.c",
          "src/pragma.c||src/pragma.c",
          "test/fuzzcheck.c||test/fuzzcheck.c",
          "test/ossfuzz.c||test/ossfuzz.c",
          "test/tester.tcl||test/tester.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b8a631fd30d0732505679230684b3362c965438197a2b11518f01a77599c9202",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #endif",
          "33: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #ifndef SQLITE_MAX_MEMORY",
          "39: # define SQLITE_MAX_MEMORY 0",
          "40: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:   int nearlyFull;",
          "50: #define mem0 GLOBAL(struct Mem0Global, mem0)",
          "",
          "[Removed Lines]",
          "48: } mem0 = { 0, 0, 0 };",
          "",
          "[Added Lines]",
          "55: } mem0 = { 0, SQLITE_MAX_MEMORY, SQLITE_MAX_MEMORY, 0 };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "233:   nFull = sqlite3GlobalConfig.m.xRoundup(n);",
          "242:   sqlite3StatusHighwater(SQLITE_STATUS_MALLOC_SIZE, n);",
          "243:   if( mem0.alarmThreshold>0 ){",
          "244:     sqlite3_int64 nUsed = sqlite3StatusValue(SQLITE_STATUS_MEMORY_USED);",
          "",
          "[Removed Lines]",
          "235: #ifdef SQLITE_MAX_MEMORY",
          "236:   if( sqlite3StatusValue(SQLITE_STATUS_MEMORY_USED)+nFull>SQLITE_MAX_MEMORY ){",
          "238:     return;",
          "239:   }",
          "240: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2106:       sqlite3_int64 iPrior = sqlite3_hard_heap_limit64(-1);",
          "2107:       if( N>0 && (iPrior==0 || iPrior>N) ) sqlite3_hard_heap_limit64(N);",
          "2108:     }",
          "2110:     break;",
          "2111:   }",
          "",
          "[Removed Lines]",
          "2109:     returnSingleInt(v, sqlite3_soft_heap_limit64(-1));",
          "",
          "[Added Lines]",
          "2109:     returnSingleInt(v, sqlite3_hard_heap_limit64(-1));",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "454: static int lengthLimit = 1000000;",
          "457: static int vdbeOpLimit = 25000;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457: static sqlite3_int64 heapLimit = 1000000000;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "777:   if( lengthLimit>0 ){",
          "778:     sqlite3_limit(cx.db, SQLITE_LIMIT_LENGTH, lengthLimit);",
          "779:   }",
          "781:   if( nDb>=20 && aDb[18]==2 && aDb[19]==2 ){",
          "782:     aDb[18] = aDb[19] = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "783:   sqlite3_hard_heap_limit64(heapLimit);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1391:         infoFlag = 1;",
          "1392:       }else",
          "1393:       if( strcmp(z,\"limit-mem\")==0 ){",
          "1398:         if( i>=argc-1 ) fatalError(\"missing arguments on %s\", argv[i]);",
          "1399:         nMem = integerValue(argv[++i]);",
          "1401:       }else",
          "1402:       if( strcmp(z,\"limit-vdbe\")==0 ){",
          "1403:         vdbeLimitFlag = 1;",
          "",
          "[Removed Lines]",
          "1394: #if !defined(SQLITE_ENABLE_MEMSYS3) && !defined(SQLITE_ENABLE_MEMSYS5)",
          "1395:         fatalError(\"the %s option requires -DSQLITE_ENABLE_MEMSYS5 or _MEMSYS3\",",
          "1396:                    argv[i]);",
          "1397: #else",
          "1400: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1586:           ossFuzzThisDb = sqlite3_column_int(pStmt,1);",
          "1587:           if( verboseFlag ) printf(\"Config: oss-fuzz=%d\\n\", ossFuzzThisDb);",
          "1588:         }",
          "1594:           nMemThisDb = sqlite3_column_int(pStmt,1);",
          "1595:           if( verboseFlag ) printf(\"Config: limit-mem=%d\\n\", nMemThisDb);",
          "1597:         }",
          "1598:       }",
          "1599:       sqlite3_finalize(pStmt);",
          "",
          "[Removed Lines]",
          "1589:         if( strcmp(zName, \"limit-mem\")==0 && !nativeMalloc ){",
          "1590: #if !defined(SQLITE_ENABLE_MEMSYS3) && !defined(SQLITE_ENABLE_MEMSYS5)",
          "1591:           fatalError(\"the limit-mem option requires -DSQLITE_ENABLE_MEMSYS5\"",
          "1592:                      \" or _MEMSYS3\");",
          "1593: #else",
          "1596: #endif",
          "",
          "[Added Lines]",
          "1588:         if( strcmp(zName, \"limit-mem\")==0 ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1722:     sqlite3_shutdown();",
          "1727:       }",
          "1729:     }",
          "",
          "[Removed Lines]",
          "1723:     if( nMemThisDb>0 && !nativeMalloc ){",
          "1724:       pHeap = realloc(pHeap, nMemThisDb);",
          "1725:       if( pHeap==0 ){",
          "1726:         fatalError(\"failed to allocate %d bytes of heap memory\", nMem);",
          "1728:       sqlite3_config(SQLITE_CONFIG_HEAP, pHeap, nMemThisDb, 128);",
          "",
          "[Added Lines]",
          "1717:     if( nMemThisDb>0 && nMem==0 ){",
          "1718:       if( !nativeMalloc ){",
          "1719:         pHeap = realloc(pHeap, nMemThisDb);",
          "1720:         if( pHeap==0 ){",
          "1721:           fatalError(\"failed to allocate %d bytes of heap memory\", nMem);",
          "1722:         }",
          "1723:         sqlite3_config(SQLITE_CONFIG_HEAP, pHeap, nMemThisDb, 128);",
          "1724:       }else{",
          "1725:         sqlite3_hard_heap_limit64((sqlite3_int64)nMemThisDb);",
          "1727:     }else{",
          "1728:       sqlite3_hard_heap_limit64(0);",
          "",
          "---------------"
        ],
        "test/ossfuzz.c||test/ossfuzz.c": [
          "File: test/ossfuzz.c -> test/ossfuzz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:   sqlite3_limit(cx.db, SQLITE_LIMIT_VDBE_OP, 25000);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:   sqlite3_hard_heap_limit64(20000000);",
          "",
          "---------------"
        ],
        "test/tester.tcl||test/tester.tcl": [
          "File: test/tester.tcl -> test/tester.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "388:   puts {Options:",
          "389:   --pause                  Wait for user input before continuing",
          "390:   --soft-heap-limit=N      Set the soft-heap-limit to N",
          "391:   --maxerror=N             Quit after N errors",
          "392:   --verbose=(0|1)          Control the amount of output.  Default '1'",
          "393:   --output=FILE            set --verbose=2 and output to FILE.  Implies -q",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391:   --hard-heap-limit=N      Set the hard-heap-limit to N",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "408:   #",
          "409:   #   --pause",
          "410:   #   --soft-heap-limit=NN",
          "411:   #   --maxerror=NN",
          "412:   #   --malloctrace=N",
          "413:   #   --backtrace=N",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "412:   #   --hard-heap-limit=NN",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "424:   #   --help",
          "425:   #",
          "426:   set cmdlinearg(soft-heap-limit)    0",
          "427:   set cmdlinearg(maxerror)        1000",
          "428:   set cmdlinearg(malloctrace)        0",
          "429:   set cmdlinearg(backtrace)         10",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "429:   set cmdlinearg(hard-heap-limit)    0",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "450:       {^-+soft-heap-limit=.+$} {",
          "451:         foreach {dummy cmdlinearg(soft-heap-limit)} [split $a =] break",
          "452:       }",
          "453:       {^-+maxerror=.+$} {",
          "454:         foreach {dummy cmdlinearg(maxerror)} [split $a =] break",
          "455:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "456:       {^-+hard-heap-limit=.+$} {",
          "457:         foreach {dummy cmdlinearg(hard-heap-limit)} [split $a =] break",
          "458:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "586: # way if an individual test file changes the soft-heap-limit, it",
          "587: # will be reset at the start of the next test file.",
          "588: #",
          "591: # Create a test database",
          "592: #",
          "",
          "[Removed Lines]",
          "589: sqlite3_soft_heap_limit $cmdlinearg(soft-heap-limit)",
          "",
          "[Added Lines]",
          "595: sqlite3_soft_heap_limit64 $cmdlinearg(soft-heap-limit)",
          "596: sqlite3_hard_heap_limit64 $cmdlinearg(hard-heap-limit)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1207:   db close",
          "1208:   sqlite3_reset_auto_extension",
          "1211:   set nTest [incr_ntest]",
          "1212:   set nErr [set_test_counter errors]",
          "",
          "[Removed Lines]",
          "1210:   sqlite3_soft_heap_limit 0",
          "",
          "[Added Lines]",
          "1217:   sqlite3_soft_heap_limit64 0",
          "1218:   sqlite3_hard_heap_limit64 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f414c0c0c503ab968f7072fcd28a876eacff427",
      "candidate_info": {
        "commit_hash": "7f414c0c0c503ab968f7072fcd28a876eacff427",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7f414c0c0c503ab968f7072fcd28a876eacff427",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/wherecode.c",
          "test/where.test"
        ],
        "message": "Check-in [fa792714ae62fa98] is incorrect.  Add a test case to refute it and also a fix to make it right. Then add an alternative fix to ticket [df46dfb631f75694] in which all ephemeral tables used as the RHS of an IN operator be index btrees and never table btrees so that they can always be reused.\n\nFossilOrigin-Name: d3915230e3ee5878fe2e65a0afb7e91ee124aaf46b4e28c6e00053d6df13d445",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/wherecode.c||src/wherecode.c",
          "test/where.test||test/where.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 579b66eaa0816561c6e47ea116b46f229188f0fc84c1173bfe0d21df2dff9a9a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2552:     eType = IN_INDEX_EPH;",
          "2553:     if( inFlags & IN_INDEX_LOOP ){",
          "2554:       pParse->nQueryLoop = 0;",
          "2558:     }else if( prRhsHasNull ){",
          "2560:     }",
          "2561:     assert( pX->op==TK_IN );",
          "2563:     if( rMayHaveNull ){",
          "2564:       sqlite3SetHasNullFlag(v, iTab, rMayHaveNull);",
          "2565:     }",
          "",
          "[Removed Lines]",
          "2555:       if( pX->pLeft->iColumn<0 && !ExprHasProperty(pX, EP_xIsSelect) ){",
          "2556:         eType = IN_INDEX_ROWID;",
          "2557:       }",
          "2562:     sqlite3CodeRhsOfIN(pParse, pX, iTab, eType==IN_INDEX_ROWID);",
          "",
          "[Added Lines]",
          "2559:     sqlite3CodeRhsOfIN(pParse, pX, iTab);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2732:   pLeft = pExpr->pLeft;",
          "2733:   nVal = sqlite3ExprVectorSize(pLeft);",
          "2739:   pExpr->iTable = iTab;",
          "2742: #ifdef SQLITE_ENABLE_EXPLAIN_COMMENTS",
          "2743:   if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "2744:     VdbeComment((v, \"Result of SELECT %u\", pExpr->x.pSelect->selId));",
          "",
          "[Removed Lines]",
          "2734:   assert( !isRowid || nVal==1 );",
          "2740:   addr = sqlite3VdbeAddOp2(v, OP_OpenEphemeral,",
          "2741:       pExpr->iTable, (isRowid?0:nVal));",
          "",
          "[Added Lines]",
          "2729:   addr = sqlite3VdbeAddOp2(v, OP_OpenEphemeral, pExpr->iTable, nVal);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2746:     VdbeComment((v, \"RHS of IN operator\"));",
          "2747:   }",
          "2748: #endif",
          "2751:   if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "",
          "[Removed Lines]",
          "2749:   pKeyInfo = isRowid ? 0 : sqlite3KeyInfoAlloc(pParse->db, nVal, 1);",
          "",
          "[Added Lines]",
          "2737:   pKeyInfo = sqlite3KeyInfoAlloc(pParse->db, nVal, 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2760:     ExplainQueryPlan((pParse, 1, \"%sLIST SUBQUERY %d\",",
          "2761:         addrOnce?\"\":\"CORRELATED \", pSelect->selId",
          "2762:     ));",
          "2766:     if( ALWAYS(pEList->nExpr==nVal) ){",
          "",
          "[Removed Lines]",
          "2763:     assert( !isRowid );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2814:     r1 = sqlite3GetTempReg(pParse);",
          "2815:     r2 = sqlite3GetTempReg(pParse);",
          "2817:     for(i=pList->nExpr, pItem=pList->a; i>0; i--, pItem++){",
          "2818:       Expr *pE2 = pItem->pExpr;",
          "",
          "[Removed Lines]",
          "2816:     if( isRowid ) sqlite3VdbeAddOp4(v, OP_Blob, 0, r2, 0, \"\", P4_STATIC);",
          "2819:       int iValToIns;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2829:       }",
          "2846:     }",
          "2847:     sqlite3ReleaseTempReg(pParse, r1);",
          "2848:     sqlite3ReleaseTempReg(pParse, r2);",
          "",
          "[Removed Lines]",
          "2832:       if( isRowid && sqlite3ExprIsInteger(pE2, &iValToIns) ){",
          "2833:         sqlite3VdbeAddOp3(v, OP_InsertInt, iTab, r2, iValToIns);",
          "2834:       }else{",
          "2835:         r3 = sqlite3ExprCodeTarget(pParse, pE2, r1);",
          "2836:         if( isRowid ){",
          "2837:           sqlite3VdbeAddOp2(v, OP_MustBeInt, r3,",
          "2838:                             sqlite3VdbeCurrentAddr(v)+2);",
          "2839:           VdbeCoverage(v);",
          "2840:           sqlite3VdbeAddOp3(v, OP_Insert, iTab, r2, r3);",
          "2841:         }else{",
          "2842:           sqlite3VdbeAddOp4(v, OP_MakeRecord, r3, 1, r2, &affinity, 1);",
          "2843:           sqlite3VdbeAddOp4Int(v, OP_IdxInsert, iTab, r2, r3, 1);",
          "2844:         }",
          "2845:       }",
          "",
          "[Added Lines]",
          "2817:       r3 = sqlite3ExprCodeTarget(pParse, pE2, r1);",
          "2818:       sqlite3VdbeAddOp4(v, OP_MakeRecord, r3, 1, r2, &affinity, 1);",
          "2819:       sqlite3VdbeAddOp4Int(v, OP_IdxInsert, iTab, r2, r3, 1);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1921:       pik_flags |= (update_flags & OPFLAG_SAVEPOSITION);",
          "1922: #ifdef SQLITE_ENABLE_PREUPDATE_HOOK",
          "1923:       if( update_flags==0 ){",
          "1926:         );",
          "1927:         sqlite3VdbeChangeP5(v, OPFLAG_ISNOOP);",
          "1928:       }",
          "1929: #endif",
          "1930:     }",
          "",
          "[Removed Lines]",
          "1924:         sqlite3VdbeAddOp4(v, OP_InsertInt,",
          "1925:             iIdxCur+i, aRegIdx[i], 0, (char*)pTab, P4_TABLE",
          "",
          "[Added Lines]",
          "1924:         int r = sqlite3GetTempReg(pParse);",
          "1925:         sqlite3VdbeAddOp2(v, OP_Integer, 0, r);",
          "1926:         sqlite3VdbeAddOp4(v, OP_Insert,",
          "1927:             iIdxCur+i, aRegIdx[i], r, (char*)pTab, P4_TABLE",
          "1930:         sqlite3ReleaseTempReg(pParse, r);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4281: int sqlite3GetToken(const unsigned char *, int *);",
          "4282: void sqlite3NestedParse(Parse*, const char*, ...);",
          "4283: void sqlite3ExpirePreparedStatements(sqlite3*, int);",
          "4285: int sqlite3CodeSubselect(Parse*, Expr*);",
          "4286: void sqlite3SelectPrep(Parse*, Select*, NameContext*);",
          "4287: void sqlite3SelectWrongNumTermsError(Parse *pParse, Select *p);",
          "",
          "[Removed Lines]",
          "4284: void sqlite3CodeRhsOfIN(Parse*, Expr*, int, int);",
          "",
          "[Added Lines]",
          "4284: void sqlite3CodeRhsOfIN(Parse*, Expr*, int);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "4578: case OP_Insert:",
          "4579: case OP_InsertInt: {",
          "",
          "[Added Lines]",
          "4572: case OP_Insert: {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4597:   REGISTER_TRACE(pOp->p2, pData);",
          "4598:   sqlite3VdbeIncrWriteCounter(p, pC);",
          "4611:   if( pOp->p4type==P4_TABLE && HAS_UPDATE_HOOK(db) ){",
          "4612:     assert( pC->iDb>=0 );",
          "",
          "[Removed Lines]",
          "4600:   if( pOp->opcode==OP_Insert ){",
          "4601:     pKey = &aMem[pOp->p3];",
          "4602:     assert( pKey->flags & MEM_Int );",
          "4603:     assert( memIsValid(pKey) );",
          "4604:     REGISTER_TRACE(pOp->p3, pKey);",
          "4605:     x.nKey = pKey->u.i;",
          "4606:   }else{",
          "4607:     assert( pOp->opcode==OP_InsertInt );",
          "4608:     x.nKey = pOp->p3;",
          "4609:   }",
          "",
          "[Added Lines]",
          "4593:   pKey = &aMem[pOp->p3];",
          "4594:   assert( pKey->flags & MEM_Int );",
          "4595:   assert( memIsValid(pKey) );",
          "4596:   REGISTER_TRACE(pOp->p3, pKey);",
          "4597:   x.nKey = pKey->u.i;",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1344:     sqlite3VdbeAddOp3(v, OP_SeekRowid, iCur, addrNxt, iRowidReg);",
          "1345:     VdbeCoverage(v);",
          "1346:     pLevel->op = OP_Noop;",
          "1348:   }else if( (pLoop->wsFlags & WHERE_IPK)!=0",
          "1349:          && (pLoop->wsFlags & WHERE_COLUMN_RANGE)!=0",
          "1350:   ){",
          "",
          "[Removed Lines]",
          "1347:     pTerm->wtFlags |= TERM_CODED;",
          "",
          "[Added Lines]",
          "1346:     if( (pTerm->prereqAll & pLevel->notReady)==0 ){",
          "1347:       pTerm->wtFlags |= TERM_CODED;",
          "1348:     }",
          "",
          "---------------"
        ],
        "test/where.test||test/where.test": [
          "File: test/where.test -> test/where.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1425:   SELECT count(*) FROM t1 LEFT JOIN t2 ON a IS NOT NULL;",
          "1426: } {5}",
          "1429: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1428: # 20190-02-22:  A bug introduced by checkin",
          "1429: # https://www.sqlite.org/src/info/fa792714ae62fa98.",
          "1430: #",
          "1431: do_execsql_test where-23.0 {",
          "1432:   DROP TABLE IF EXISTS t1;",
          "1433:   DROP TABLE IF EXISTS t2;",
          "1434:   CREATE TABLE t1(a INTEGER PRIMARY KEY);",
          "1435:   INSERT INTO t1(a) VALUES(1),(2),(3);",
          "1436:   CREATE TABLE t2(x INTEGER PRIMARY KEY, y INT);",
          "1437:   INSERT INTO t2(y) VALUES(2),(3);",
          "1438:   SELECT * FROM t1, t2 WHERE a=y AND y=3;",
          "1439: } {3 2 3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "610f11de25993960ff616edde0f5dc47d1c0b56e",
      "candidate_info": {
        "commit_hash": "610f11de25993960ff616edde0f5dc47d1c0b56e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/610f11de25993960ff616edde0f5dc47d1c0b56e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Fix a typo in a comment.  No changes to code.\n\nFossilOrigin-Name: c2f50aa4e7bad8821e91a7490283dd53e44047d10a8cfebc3e2da26c770a5218",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cc5ab96715ebb1089b4e9aa647badd2510aaa056f26004718f921f4ac07e2f93",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c"
        ]
      }
    }
  ]
}