{
  "cve_id": "CVE-2022-36018",
  "cve_desc": "TensorFlow is an open source platform for machine learning. If `RaggedTensorToVariant` is given a `rt_nested_splits` list that contains tensors of ranks other than one, it results in a `CHECK` fail that can be used to trigger a denial of service attack. We have patched the issue in GitHub commit 88f93dfe691563baa4ae1e80ccde2d5c7a143821. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "88f93dfe691563baa4ae1e80ccde2d5c7a143821",
  "patch_info": {
    "commit_hash": "88f93dfe691563baa4ae1e80ccde2d5c7a143821",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/88f93dfe691563baa4ae1e80ccde2d5c7a143821",
    "files": [
      "tensorflow/core/kernels/ragged_tensor_to_variant_op.cc",
      "tensorflow/python/ops/ragged/ragged_tensor_test.py"
    ],
    "message": "[security] Fix failed shape check in RaggedTensorToVariant.\n\n`row_splits` must have rank 1.\n\nPiperOrigin-RevId: 461915027",
    "before_after_code_files": [
      "tensorflow/core/kernels/ragged_tensor_to_variant_op.cc||tensorflow/core/kernels/ragged_tensor_to_variant_op.cc",
      "tensorflow/python/ops/ragged/ragged_tensor_test.py||tensorflow/python/ops/ragged/ragged_tensor_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/ragged_tensor_to_variant_op.cc||tensorflow/core/kernels/ragged_tensor_to_variant_op.cc": [
      "File: tensorflow/core/kernels/ragged_tensor_to_variant_op.cc -> tensorflow/core/kernels/ragged_tensor_to_variant_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "188:     batched_ragged_input.mutable_nested_splits()->reserve(",
      "189:         ragged_nested_splits_len);",
      "190:     for (int i = 0; i < ragged_nested_splits_len; i++) {",
      "191:       batched_ragged_input.append_splits(ragged_nested_splits_in[i]);",
      "192:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "191:       OP_REQUIRES(context, ragged_nested_splits_in[i].dims() == 1,",
      "192:                   errors::InvalidArgument(\"Requires nested_row_splits[\", i, \"]\",",
      "193:                                           \" to be rank 1 but is rank \",",
      "194:                                           ragged_nested_splits_in[i].dims()));",
      "",
      "---------------"
    ],
    "tensorflow/python/ops/ragged/ragged_tensor_test.py||tensorflow/python/ops/ragged/ragged_tensor_test.py": [
      "File: tensorflow/python/ops/ragged/ragged_tensor_test.py -> tensorflow/python/ops/ragged/ragged_tensor_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1468:         for i in range(3):",
      "1469:           self.assertAllEqual(sess.run(rt[i]), out)",
      "1471:   def testFromVariantInvalidParams(self):",
      "1472:     rt = ragged_factory_ops.constant([[0], [1], [2], [3]])",
      "1473:     batched_variant = rt._to_variant(batched_input=True)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1471:   def testToVariantInvalidParams(self):",
      "1472:     self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
      "1473:                            r'be rank 1 but is rank 0',",
      "1474:                            gen_ragged_conversion_ops.ragged_tensor_to_variant,",
      "1475:                            rt_nested_splits=[0, 1, 2],",
      "1476:                            rt_dense_values=[0, 1, 2],",
      "1477:                            batched_input=True)",
      "1479:     self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
      "1480:                            r'be rank 1 but is rank 2',",
      "1481:                            gen_ragged_conversion_ops.ragged_tensor_to_variant,",
      "1482:                            rt_nested_splits=[[[0]], [[1]], [[2]]],",
      "1483:                            rt_dense_values=[0, 1, 2],",
      "1484:                            batched_input=True)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "648c35abb55b03168432990a69f4e4f07f566ecb",
      "candidate_info": {
        "commit_hash": "648c35abb55b03168432990a69f4e4f07f566ecb",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/648c35abb55b03168432990a69f4e4f07f566ecb",
        "files": [
          "tensorflow/core/kernels/ragged_tensor_to_variant_op.cc",
          "tensorflow/python/ops/ragged/ragged_tensor_test.py"
        ],
        "message": "[security] Fix failed shape check in RaggedTensorToVariant.\n\n`row_splits` must have rank 1.\n\nPiperOrigin-RevId: 461915027",
        "before_after_code_files": [
          "tensorflow/core/kernels/ragged_tensor_to_variant_op.cc||tensorflow/core/kernels/ragged_tensor_to_variant_op.cc",
          "tensorflow/python/ops/ragged/ragged_tensor_test.py||tensorflow/python/ops/ragged/ragged_tensor_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/ragged_tensor_to_variant_op.cc||tensorflow/core/kernels/ragged_tensor_to_variant_op.cc",
            "tensorflow/python/ops/ragged/ragged_tensor_test.py||tensorflow/python/ops/ragged/ragged_tensor_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/ragged_tensor_to_variant_op.cc||tensorflow/core/kernels/ragged_tensor_to_variant_op.cc",
            "tensorflow/python/ops/ragged/ragged_tensor_test.py||tensorflow/python/ops/ragged/ragged_tensor_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/ragged_tensor_to_variant_op.cc||tensorflow/core/kernels/ragged_tensor_to_variant_op.cc": [
          "File: tensorflow/core/kernels/ragged_tensor_to_variant_op.cc -> tensorflow/core/kernels/ragged_tensor_to_variant_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:     batched_ragged_input.mutable_nested_splits()->reserve(",
          "146:         ragged_nested_splits_len);",
          "147:     for (int i = 0; i < ragged_nested_splits_len; i++) {",
          "148:       batched_ragged_input.append_splits(ragged_nested_splits_in[i]);",
          "149:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:       OP_REQUIRES(context, ragged_nested_splits_in[i].dims() == 1,",
          "149:                   errors::InvalidArgument(\"Requires nested_row_splits[\", i, \"]\",",
          "150:                                           \" to be rank 1 but is rank \",",
          "151:                                           ragged_nested_splits_in[i].dims()));",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/ragged/ragged_tensor_test.py||tensorflow/python/ops/ragged/ragged_tensor_test.py": [
          "File: tensorflow/python/ops/ragged/ragged_tensor_test.py -> tensorflow/python/ops/ragged/ragged_tensor_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1442:         for i in range(3):",
          "1443:           self.assertAllEqual(sess.run(rt[i]), out)",
          "1445:   def testFromVariantInvalidParams(self):",
          "1446:     rt = ragged_factory_ops.constant([[0], [1], [2], [3]])",
          "1447:     batched_variant = rt._to_variant(batched_input=True)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1445:   def testToVariantInvalidParams(self):",
          "1446:     self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "1447:                            r'be rank 1 but is rank 0',",
          "1448:                            gen_ragged_conversion_ops.ragged_tensor_to_variant,",
          "1449:                            rt_nested_splits=[0, 1, 2],",
          "1450:                            rt_dense_values=[0, 1, 2],",
          "1451:                            batched_input=True)",
          "1453:     self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "1454:                            r'be rank 1 but is rank 2',",
          "1455:                            gen_ragged_conversion_ops.ragged_tensor_to_variant,",
          "1456:                            rt_nested_splits=[[[0]], [[1]], [[2]]],",
          "1457:                            rt_dense_values=[0, 1, 2],",
          "1458:                            batched_input=True)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b94501d94ffac9bd73b8abe40a66be114fc93342",
      "candidate_info": {
        "commit_hash": "b94501d94ffac9bd73b8abe40a66be114fc93342",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/b94501d94ffac9bd73b8abe40a66be114fc93342",
        "files": [
          "tensorflow/core/kernels/ragged_tensor_to_variant_op.cc",
          "tensorflow/python/ops/ragged/ragged_tensor_test.py"
        ],
        "message": "[security] Fix failed shape check in RaggedTensorToVariant.\n\n`row_splits` must have rank 1.\n\nPiperOrigin-RevId: 461915027",
        "before_after_code_files": [
          "tensorflow/core/kernels/ragged_tensor_to_variant_op.cc||tensorflow/core/kernels/ragged_tensor_to_variant_op.cc",
          "tensorflow/python/ops/ragged/ragged_tensor_test.py||tensorflow/python/ops/ragged/ragged_tensor_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/ragged_tensor_to_variant_op.cc||tensorflow/core/kernels/ragged_tensor_to_variant_op.cc",
            "tensorflow/python/ops/ragged/ragged_tensor_test.py||tensorflow/python/ops/ragged/ragged_tensor_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/ragged_tensor_to_variant_op.cc||tensorflow/core/kernels/ragged_tensor_to_variant_op.cc",
            "tensorflow/python/ops/ragged/ragged_tensor_test.py||tensorflow/python/ops/ragged/ragged_tensor_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/ragged_tensor_to_variant_op.cc||tensorflow/core/kernels/ragged_tensor_to_variant_op.cc": [
          "File: tensorflow/core/kernels/ragged_tensor_to_variant_op.cc -> tensorflow/core/kernels/ragged_tensor_to_variant_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:     batched_ragged_input.mutable_nested_splits()->reserve(",
          "185:         ragged_nested_splits_len);",
          "186:     for (int i = 0; i < ragged_nested_splits_len; i++) {",
          "187:       batched_ragged_input.append_splits(ragged_nested_splits_in[i]);",
          "188:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:       OP_REQUIRES(context, ragged_nested_splits_in[i].dims() == 1,",
          "188:                   errors::InvalidArgument(\"Requires nested_row_splits[\", i, \"]\",",
          "189:                                           \" to be rank 1 but is rank \",",
          "190:                                           ragged_nested_splits_in[i].dims()));",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/ragged/ragged_tensor_test.py||tensorflow/python/ops/ragged/ragged_tensor_test.py": [
          "File: tensorflow/python/ops/ragged/ragged_tensor_test.py -> tensorflow/python/ops/ragged/ragged_tensor_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1465:         for i in range(3):",
          "1466:           self.assertAllEqual(sess.run(rt[i]), out)",
          "1468:   def testFromVariantInvalidParams(self):",
          "1469:     rt = ragged_factory_ops.constant([[0], [1], [2], [3]])",
          "1470:     batched_variant = rt._to_variant(batched_input=True)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1468:   def testToVariantInvalidParams(self):",
          "1469:     self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "1470:                            r'be rank 1 but is rank 0',",
          "1471:                            gen_ragged_conversion_ops.ragged_tensor_to_variant,",
          "1472:                            rt_nested_splits=[0, 1, 2],",
          "1473:                            rt_dense_values=[0, 1, 2],",
          "1474:                            batched_input=True)",
          "1476:     self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "1477:                            r'be rank 1 but is rank 2',",
          "1478:                            gen_ragged_conversion_ops.ragged_tensor_to_variant,",
          "1479:                            rt_nested_splits=[[[0]], [[1]], [[2]]],",
          "1480:                            rt_dense_values=[0, 1, 2],",
          "1481:                            batched_input=True)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c7a07d20babcef7129acb4b8e367c87bbe64588",
      "candidate_info": {
        "commit_hash": "9c7a07d20babcef7129acb4b8e367c87bbe64588",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/9c7a07d20babcef7129acb4b8e367c87bbe64588",
        "files": [
          "tensorflow/core/kernels/ragged_tensor_to_variant_op.cc",
          "tensorflow/python/ops/ragged/ragged_tensor_test.py"
        ],
        "message": "[security] Fix failed shape check in RaggedTensorToVariant.\n\n`row_splits` must have rank 1.\n\nPiperOrigin-RevId: 461915027",
        "before_after_code_files": [
          "tensorflow/core/kernels/ragged_tensor_to_variant_op.cc||tensorflow/core/kernels/ragged_tensor_to_variant_op.cc",
          "tensorflow/python/ops/ragged/ragged_tensor_test.py||tensorflow/python/ops/ragged/ragged_tensor_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/ragged_tensor_to_variant_op.cc||tensorflow/core/kernels/ragged_tensor_to_variant_op.cc",
            "tensorflow/python/ops/ragged/ragged_tensor_test.py||tensorflow/python/ops/ragged/ragged_tensor_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/ragged_tensor_to_variant_op.cc||tensorflow/core/kernels/ragged_tensor_to_variant_op.cc",
            "tensorflow/python/ops/ragged/ragged_tensor_test.py||tensorflow/python/ops/ragged/ragged_tensor_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/ragged_tensor_to_variant_op.cc||tensorflow/core/kernels/ragged_tensor_to_variant_op.cc": [
          "File: tensorflow/core/kernels/ragged_tensor_to_variant_op.cc -> tensorflow/core/kernels/ragged_tensor_to_variant_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:     batched_ragged_input.mutable_nested_splits()->reserve(",
          "146:         ragged_nested_splits_len);",
          "147:     for (int i = 0; i < ragged_nested_splits_len; i++) {",
          "148:       batched_ragged_input.append_splits(ragged_nested_splits_in[i]);",
          "149:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:       OP_REQUIRES(context, ragged_nested_splits_in[i].dims() == 1,",
          "149:                   errors::InvalidArgument(\"Requires nested_row_splits[\", i, \"]\",",
          "150:                                           \" to be rank 1 but is rank \",",
          "151:                                           ragged_nested_splits_in[i].dims()));",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/ragged/ragged_tensor_test.py||tensorflow/python/ops/ragged/ragged_tensor_test.py": [
          "File: tensorflow/python/ops/ragged/ragged_tensor_test.py -> tensorflow/python/ops/ragged/ragged_tensor_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1446:         for i in range(3):",
          "1447:           self.assertAllEqual(sess.run(rt[i]), out)",
          "1449:   def testFromVariantInvalidParams(self):",
          "1450:     rt = ragged_factory_ops.constant([[0], [1], [2], [3]])",
          "1451:     batched_variant = rt._to_variant(batched_input=True)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1449:   def testToVariantInvalidParams(self):",
          "1450:     self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "1451:                            r'be rank 1 but is rank 0',",
          "1452:                            gen_ragged_conversion_ops.ragged_tensor_to_variant,",
          "1453:                            rt_nested_splits=[0, 1, 2],",
          "1454:                            rt_dense_values=[0, 1, 2],",
          "1455:                            batched_input=True)",
          "1457:     self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "1458:                            r'be rank 1 but is rank 2',",
          "1459:                            gen_ragged_conversion_ops.ragged_tensor_to_variant,",
          "1460:                            rt_nested_splits=[[[0]], [[1]], [[2]]],",
          "1461:                            rt_dense_values=[0, 1, 2],",
          "1462:                            batched_input=True)",
          "",
          "---------------"
        ]
      }
    }
  ]
}