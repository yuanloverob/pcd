{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "17648be234e3d7a4205af91a85e0f21f0d3e3391",
      "candidate_info": {
        "commit_hash": "17648be234e3d7a4205af91a85e0f21f0d3e3391",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/17648be234e3d7a4205af91a85e0f21f0d3e3391",
        "files": [
          "src/unix/stream.c"
        ],
        "message": "unix: fix non-OSX builds\n\nuv__stream_osx_interrupt_select was only defined on OS X, but is used\nelsewhere on all platforms.  The intention was to implement it as a\nno-op on other platforms, but the entire definition was inside\n\"#ifdef __APPLE__\", so this didn't actually work.\n\nFix: move it above the #ifdef.",
        "before_after_code_files": [
          "src/unix/stream.c||src/unix/stream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138: }",
          "141: #if defined(__APPLE__)",
          "142: static void uv__stream_osx_select(void* arg) {",
          "143:   uv_stream_t* stream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141: static void uv__stream_osx_interrupt_select(uv_stream_t* stream) {",
          "142: #if defined(__APPLE__)",
          "144:   uv__stream_select_t* s;",
          "145:   int r;",
          "147:   s = stream->select;",
          "148:   if (s == NULL)",
          "149:     return;",
          "155:   do",
          "156:     r = write(s->fake_fd, \"x\", 1);",
          "157:   while (r == -1 && errno == EINTR);",
          "159:   assert(r == 1);",
          "163: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229: }",
          "257: static void uv__stream_osx_select_cb(uv_async_t* handle, int status) {",
          "258:   uv__stream_select_t* s;",
          "259:   uv_stream_t* stream;",
          "",
          "[Removed Lines]",
          "232: static void uv__stream_osx_interrupt_select(uv_stream_t* stream) {",
          "233: #if defined(__APPLE__)",
          "235:   uv__stream_select_t* s;",
          "236:   int r;",
          "238:   s = stream->select;",
          "239:   if (s == NULL)",
          "240:     return;",
          "246:   do",
          "247:     r = write(s->fake_fd, \"x\", 1);",
          "248:   while (r == -1 && errno == EINTR);",
          "250:   assert(r == 1);",
          "254: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "14aa6153bec48da8f247c099d903566794e2da0a",
      "candidate_info": {
        "commit_hash": "14aa6153bec48da8f247c099d903566794e2da0a",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/14aa6153bec48da8f247c099d903566794e2da0a",
        "files": [
          "include/uv.h",
          "src/unix/aix.c",
          "src/unix/darwin.c",
          "src/unix/linux-core.c",
          "src/unix/netbsd.c",
          "src/unix/sunos.c",
          "src/win/util.c",
          "test/test-platform-output.c"
        ],
        "message": "unix, win: add netmask to uv_interface_address\n\nInclude the netmask when returning information about the OS network\ninterfaces.\n\nThis commit provides implementations for windows and those unix\nplatforms using getifaddrs().\n\nAIX was not implemented because it requires the use of ioctls and I do\nnot have an AIX development/test environment.  The windows code was\ndeveloped using mingw on winxp as I do not have access to visual studio.\n\nTested on darwin (ipv4/ipv6) and winxp (ipv4 only).  Needs testing on\nnewer windows using ipv6 and other unix platforms.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/unix/aix.c||src/unix/aix.c",
          "src/unix/darwin.c||src/unix/darwin.c",
          "src/unix/linux-core.c||src/unix/linux-core.c",
          "src/unix/netbsd.c||src/unix/netbsd.c",
          "src/unix/sunos.c||src/unix/sunos.c",
          "src/win/util.c||src/win/util.c",
          "test/test-platform-output.c||test/test-platform-output.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1479:     struct sockaddr_in address4;",
          "1480:     struct sockaddr_in6 address6;",
          "1481:   } address;",
          "1482: };",
          "1484: UV_EXTERN char** uv_setup_args(int argc, char** argv);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1482:   union {",
          "1483:     struct sockaddr_in netmask4;",
          "1484:     struct sockaddr_in6 netmask6;",
          "1485:   } netmask;",
          "",
          "---------------"
        ],
        "src/unix/aix.c||src/unix/aix.c": [
          "File: src/unix/aix.c -> src/unix/aix.c"
        ],
        "src/unix/darwin.c||src/unix/darwin.c": [
          "File: src/unix/darwin.c -> src/unix/darwin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "408:       address->address.address4 = *((struct sockaddr_in *)ent->ifa_addr);",
          "409:     }",
          "411:     address->is_internal = ent->ifa_flags & IFF_LOOPBACK ? 1 : 0;",
          "413:     address++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "411:     if (ent->ifa_netmask->sa_family == AF_INET6) {",
          "412:       address->netmask.netmask6 = *((struct sockaddr_in6 *)ent->ifa_netmask);",
          "413:     } else {",
          "414:       address->netmask.netmask4 = *((struct sockaddr_in *)ent->ifa_netmask);",
          "415:     }",
          "",
          "---------------"
        ],
        "src/unix/linux-core.c||src/unix/linux-core.c": [
          "File: src/unix/linux-core.c -> src/unix/linux-core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "693:       address->address.address4 = *((struct sockaddr_in *)ent->ifa_addr);",
          "694:     }",
          "696:     address->is_internal = ent->ifa_flags & IFF_LOOPBACK ? 1 : 0;",
          "698:     address++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "696:     if (ent->ifa_netmask->sa_family == AF_INET6) {",
          "697:       address->netmask.netmask6 = *((struct sockaddr_in6 *)ent->ifa_netmask);",
          "698:     } else {",
          "699:       address->netmask.netmask4 = *((struct sockaddr_in *)ent->ifa_netmask);",
          "700:     }",
          "",
          "---------------"
        ],
        "src/unix/netbsd.c||src/unix/netbsd.c": [
          "File: src/unix/netbsd.c -> src/unix/netbsd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "331:       address->address.address4 = *((struct sockaddr_in *)ent->ifa_addr);",
          "332:     }",
          "334:     address->is_internal = !!(ent->ifa_flags & IFF_LOOPBACK) ? 1 : 0;",
          "336:     address++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334:     if (ent->ifa_netmask->sa_family == AF_INET6) {",
          "335:       address->netmask.netmask6 = *((struct sockaddr_in6 *)ent->ifa_netmask);",
          "336:     } else {",
          "337:       address->netmask.netmask4 = *((struct sockaddr_in *)ent->ifa_netmask);",
          "338:     }",
          "",
          "---------------"
        ],
        "src/unix/sunos.c||src/unix/sunos.c": [
          "File: src/unix/sunos.c -> src/unix/sunos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "622:       address->address.address4 = *((struct sockaddr_in *)ent->ifa_addr);",
          "623:     }",
          "625:     address->is_internal = ent->ifa_flags & IFF_PRIVATE || ent->ifa_flags &",
          "626:  IFF_LOOPBACK ? 1 : 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "625:     if (ent->ifa_netmask->sa_family == AF_INET6) {",
          "626:       address->netmask.netmask6 = *((struct sockaddr_in6 *)ent->ifa_netmask);",
          "627:     } else {",
          "628:       address->netmask.netmask4 = *((struct sockaddr_in *)ent->ifa_netmask);",
          "629:     }",
          "",
          "---------------"
        ],
        "src/win/util.c||src/win/util.c": [
          "File: src/win/util.c -> src/win/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include \"uv.h\"",
          "32: #include \"internal.h\"",
          "34: #include <iphlpapi.h>",
          "35: #include <psapi.h>",
          "36: #include <tlhelp32.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include <Winsock2.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "767:     r = GetAdaptersAddresses(AF_UNSPEC,",
          "769:                              NULL,",
          "770:                              win_address_buf,",
          "771:                              &win_address_buf_size);",
          "",
          "[Removed Lines]",
          "768:                              0,",
          "",
          "[Added Lines]",
          "769:                              GAA_FLAG_INCLUDE_PREFIX,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "882:        win_address != NULL;",
          "883:        win_address = win_address->Next) {",
          "884:     IP_ADAPTER_UNICAST_ADDRESS_XP* unicast_address;",
          "885:     int name_size;",
          "886:     size_t max_name_size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "886:     IP_ADAPTER_PREFIX* prefix;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "907:       return uv__new_sys_error(GetLastError());",
          "908:     }",
          "911:     for (unicast_address = (IP_ADAPTER_UNICAST_ADDRESS_XP*)",
          "912:                            win_address->FirstUnicastAddress;",
          "913:          unicast_address != NULL;",
          "914:          unicast_address = unicast_address->Next) {",
          "915:       struct sockaddr* sa;",
          "917:       uv_address->name = name_buf;",
          "919:       sa = unicast_address->Address.lpSockaddr;",
          "921:         uv_address->address.address6 = *((struct sockaddr_in6 *) sa);",
          "923:         uv_address->address.address4 = *((struct sockaddr_in *) sa);",
          "925:       uv_address->is_internal =",
          "926:           (win_address->IfType == IF_TYPE_SOFTWARE_LOOPBACK);",
          "",
          "[Removed Lines]",
          "920:       if (sa->sa_family == AF_INET6)",
          "922:       else",
          "",
          "[Added Lines]",
          "912:     prefix = win_address->FirstPrefix;",
          "920:       int prefixlen;",
          "925:          the prefixlen for each address.  On Vista and newer, we could",
          "927:       if (prefix != NULL) {",
          "928:         prefixlen = prefix->PrefixLength;",
          "929:         prefix = prefix->Next;",
          "930:       } else {",
          "931:         prefixlen = 0;",
          "932:       }",
          "935:       if (sa->sa_family == AF_INET6) {",
          "936:         int i;",
          "940:         uv_address->netmask.netmask6.sin6_family = AF_INET6;",
          "941:         prefixlen = prefixlen > 0 ? prefixlen : 128;",
          "942:         for (i = 0; i < 16; ++i) {",
          "943:           int bits;",
          "944:           uint8_t byte_val;",
          "946:           bits = prefixlen < 8 ? prefixlen : 8;",
          "947:           byte_val = ~(0xff >> bits);",
          "948:           prefixlen -= bits;",
          "950:           uv_address->netmask.netmask6.sin6_addr.s6_addr[i] = byte_val;",
          "951:         }",
          "952:       } else {",
          "955:         uv_address->netmask.netmask4.sin_family = AF_INET;",
          "956:         prefixlen = prefixlen > 0 ? prefixlen : 32;",
          "957:         uv_address->netmask.netmask4.sin_addr.s_addr =",
          "958:           htonl(0xffffffff << (32 - prefixlen));",
          "959:       }",
          "",
          "---------------"
        ],
        "test/test-platform-output.c||test/test-platform-output.c": [
          "File: test/test-platform-output.c -> test/test-platform-output.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     }",
          "82:     printf(\"  address: %s\\n\", buffer);",
          "83:   }",
          "84:   uv_free_interface_addresses(interfaces, count);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:     if (interfaces[i].netmask.netmask4.sin_family == AF_INET) {",
          "85:       uv_ip4_name(&interfaces[i].netmask.netmask4, buffer, sizeof(buffer));",
          "86:     } else if (interfaces[i].netmask.netmask4.sin_family == AF_INET6) {",
          "87:       uv_ip6_name(&interfaces[i].netmask.netmask6, buffer, sizeof(buffer));",
          "88:     }",
          "90:     printf(\"  netmask: %s\\n\", buffer);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b769484ca3678208343c938820cdb00cc2732398",
      "candidate_info": {
        "commit_hash": "b769484ca3678208343c938820cdb00cc2732398",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/b769484ca3678208343c938820cdb00cc2732398",
        "files": [
          "include/uv.h",
          "src/unix/udp.c",
          "src/win/udp.c",
          "test/test-getsockname.c",
          "test/test-udp-multicast-interface.c",
          "test/test-udp-open.c",
          "test/test-udp-send-and-recv.c"
        ],
        "message": "unix, win: add send_queue_size and send_queue_count to uv_udp_t\n\nThis functionality is present in stream and uv_udp_t has a queue\nas well so it makes sense for udp to have a send_write_size.\nSince udp sends entire messages atomically, the send_queue_count field\nlets the user determine how many messages are there left to send.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/unix/udp.c||src/unix/udp.c",
          "src/win/udp.c||src/win/udp.c",
          "test/test-getsockname.c||test/test-getsockname.c",
          "test/test-udp-multicast-interface.c||test/test-udp-multicast-interface.c",
          "test/test-udp-open.c||test/test-udp-open.c",
          "test/test-udp-send-and-recv.c||test/test-udp-send-and-recv.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "901: struct uv_udp_s {",
          "902:   UV_HANDLE_FIELDS",
          "903:   UV_UDP_PRIVATE_FIELDS",
          "904: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "907:   size_t send_queue_size;",
          "911:   size_t send_queue_count;",
          "",
          "---------------"
        ],
        "src/unix/udp.c||src/unix/udp.c": [
          "File: src/unix/udp.c -> src/unix/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:       req->send_cb(req, -ECANCELED);",
          "83:   }",
          "86:   handle->recv_cb = NULL;",
          "87:   handle->alloc_cb = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:   handle->send_queue_size = 0;",
          "86:   handle->send_queue_count = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:     QUEUE_REMOVE(&req->queue);",
          "131:     QUEUE_INSERT_TAIL(&handle->write_completed_queue, &req->queue);",
          "132:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:     handle->send_queue_size -= uv__count_bufs(req->bufs, req->nbufs);",
          "134:     handle->send_queue_count--;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "433:     return -ENOMEM;",
          "435:   memcpy(req->bufs, bufs, nbufs * sizeof(bufs[0]));",
          "436:   QUEUE_INSERT_TAIL(&handle->write_queue, &req->queue);",
          "437:   uv__io_start(handle->loop, &handle->io_watcher, UV__POLLOUT);",
          "438:   uv__handle_start(handle);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "441:   handle->send_queue_size += uv__count_bufs(req->bufs, req->nbufs);",
          "442:   handle->send_queue_count++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "531:   uv__handle_init(loop, (uv_handle_t*)handle, UV_UDP);",
          "532:   handle->alloc_cb = NULL;",
          "533:   handle->recv_cb = NULL;",
          "534:   uv__io_init(&handle->io_watcher, uv__udp_io, -1);",
          "535:   QUEUE_INIT(&handle->write_queue);",
          "536:   QUEUE_INIT(&handle->write_completed_queue);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "541:   handle->send_queue_size = 0;",
          "542:   handle->send_queue_count = 0;",
          "",
          "---------------"
        ],
        "src/win/udp.c||src/win/udp.c": [
          "File: src/win/udp.c -> src/win/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:   handle->activecnt = 0;",
          "130:   handle->func_wsarecv = WSARecv;",
          "131:   handle->func_wsarecvfrom = WSARecvFrom;",
          "133:   uv_req_init(loop, (uv_req_t*) &(handle->recv_req));",
          "134:   handle->recv_req.type = UV_UDP_RECV;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:   handle->send_queue_size = 0;",
          "133:   handle->send_queue_count = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "403:     req->queued_bytes = uv__count_bufs(bufs, nbufs);",
          "404:     handle->reqs_pending++;",
          "405:     REGISTER_HANDLE_REQ(loop, handle, req);",
          "406:   } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407:     handle->send_queue_size += req->queued_bytes;",
          "408:     handle->send_queue_count++;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "525:   assert(handle->type == UV_UDP);",
          "527:   UNREGISTER_HANDLE_REQ(loop, handle, req);",
          "529:   if (req->cb) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "531:   assert(handle->send_queue_size >= req->queued_bytes);",
          "532:   assert(handle->send_queue_count >= 1);",
          "533:   handle->send_queue_size -= req->queued_bytes;",
          "534:   handle->send_queue_count--;",
          "",
          "---------------"
        ],
        "test/test-getsockname.c||test/test-getsockname.c": [
          "File: test/test-getsockname.c -> test/test-getsockname.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "354:   ASSERT(getsocknamecount == 2);",
          "356:   MAKE_VALGRIND_HAPPY();",
          "357:   return 0;",
          "358: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356:   ASSERT(udp.send_queue_size == 0);",
          "357:   ASSERT(udpServer.send_queue_size == 0);",
          "",
          "---------------"
        ],
        "test/test-udp-multicast-interface.c||test/test-udp-multicast-interface.c": [
          "File: test/test-udp-multicast-interface.c -> test/test-udp-multicast-interface.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:   ASSERT(sv_send_cb_called == 1);",
          "92:   ASSERT(close_cb_called == 1);",
          "94:   MAKE_VALGRIND_HAPPY();",
          "95:   return 0;",
          "96: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:   ASSERT(client.send_queue_size == 0);",
          "95:   ASSERT(server.send_queue_size == 0);",
          "",
          "---------------"
        ],
        "test/test-udp-open.c||test/test-udp-open.c": [
          "File: test/test-udp-open.c -> test/test-udp-open.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:   ASSERT(send_cb_called == 1);",
          "160:   ASSERT(close_cb_called == 1);",
          "162:   MAKE_VALGRIND_HAPPY();",
          "163:   return 0;",
          "164: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162:   ASSERT(client.send_queue_size == 0);",
          "",
          "---------------"
        ],
        "test/test-udp-send-and-recv.c||test/test-udp-send-and-recv.c": [
          "File: test/test-udp-send-and-recv.c -> test/test-udp-send-and-recv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:   ASSERT(sv_recv_cb_called == 1);",
          "207:   ASSERT(close_cb_called == 2);",
          "209:   MAKE_VALGRIND_HAPPY();",
          "210:   return 0;",
          "211: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:   ASSERT(client.send_queue_size == 0);",
          "210:   ASSERT(server.send_queue_size == 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e392a1af4db67eb6dc5201eeb4e5fe89f35d5508",
      "candidate_info": {
        "commit_hash": "e392a1af4db67eb6dc5201eeb4e5fe89f35d5508",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/e392a1af4db67eb6dc5201eeb4e5fe89f35d5508",
        "files": [
          "include/uv.h",
          "src/uv-common.c"
        ],
        "message": "header: introduce `uv_loop_size()`\n\nWe add a function called uv_loop_size which returns the size of\nthe loop. It is an additional function which complements\n`uv_handle_size` and` uv_req_size` in order to provide full FFI\nsupport.\n\nSigned-off-by: Fedor Indutny <fedor@indutny.com>",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/uv-common.c||src/uv-common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "289: UV_EXTERN void uv_loop_delete(uv_loop_t*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294: UV_EXTERN size_t uv_loop_size(void);",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: #undef XX",
          "70: uv_buf_t uv_buf_init(char* base, unsigned int len) {",
          "71:   uv_buf_t buf;",
          "72:   buf.base = base;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: size_t uv_loop_size(void) {",
          "71:   return sizeof(uv_loop_t);",
          "72: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c05532e1398ae986d35ba20573ac0a72ba7b4ab",
      "candidate_info": {
        "commit_hash": "0c05532e1398ae986d35ba20573ac0a72ba7b4ab",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/0c05532e1398ae986d35ba20573ac0a72ba7b4ab",
        "files": [
          "test/test-tcp-close-accept.c"
        ],
        "message": "test: don't connect to 0.0.0.0\n\nOpenBSD won't let you do that, the connect() system call fails with\nan EINVAL error.  Connect to 127.0.0.1 instead.",
        "before_after_code_files": [
          "test/test-tcp-close-accept.c||test/test-tcp-close-accept.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test-tcp-close-accept.c||test/test-tcp-close-accept.c": [
          "File: test/test-tcp-close-accept.c -> test/test-tcp-close-accept.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:   loop = uv_default_loop();",
          "158:   ASSERT(0 == uv_tcp_init(loop, &tcp_server));",
          "159:   ASSERT(0 == uv_tcp_bind(&tcp_server, (const struct sockaddr*) &addr));",
          "",
          "[Removed Lines]",
          "156:   ASSERT(0 == uv_ip4_addr(\"0.0.0.0\", TEST_PORT, &addr));",
          "",
          "[Added Lines]",
          "156:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "",
          "---------------"
        ]
      }
    }
  ]
}