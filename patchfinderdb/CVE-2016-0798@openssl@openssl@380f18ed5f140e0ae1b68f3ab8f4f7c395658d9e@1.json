{
  "cve_id": "CVE-2016-0798",
  "cve_desc": "Memory leak in the SRP_VBASE_get_by_user implementation in OpenSSL 1.0.1 before 1.0.1s and 1.0.2 before 1.0.2g allows remote attackers to cause a denial of service (memory consumption) by providing an invalid username in a connection attempt, related to apps/s_server.c and crypto/srp/srp_vfy.c.",
  "repo": "openssl/openssl",
  "patch_hash": "380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
  "patch_info": {
    "commit_hash": "380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
    "files": [
      "CHANGES",
      "apps/s_server.c",
      "crypto/srp/srp_vfy.c",
      "include/openssl/srp.h",
      "util/libeay.num"
    ],
    "message": "CVE-2016-0798: avoid memory leak in SRP\n\nThe SRP user database lookup method SRP_VBASE_get_by_user had confusing\nmemory management semantics; the returned pointer was sometimes newly\nallocated, and sometimes owned by the callee. The calling code has no\nway of distinguishing these two cases.\n\nSpecifically, SRP servers that configure a secret seed to hide valid\nlogin information are vulnerable to a memory leak: an attacker\nconnecting with an invalid username can cause a memory leak of around\n300 bytes per connection.\n\nServers that do not configure SRP, or configure SRP but do not configure\na seed are not vulnerable.\n\nIn Apache, the seed directive is known as SSLSRPUnknownUserSeed.\n\nTo mitigate the memory leak, the seed handling in SRP_VBASE_get_by_user\nis now disabled even if the user has configured a seed.\n\nApplications are advised to migrate to SRP_VBASE_get1_by_user. However,\nnote that OpenSSL makes no strong guarantees about the\nindistinguishability of valid and invalid logins. In particular,\ncomputations are currently not carried out in constant time.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "apps/s_server.c||apps/s_server.c",
      "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c",
      "include/openssl/srp.h||include/openssl/srp.h",
      "util/libeay.num||util/libeay.num"
    ]
  },
  "patch_diff": {
    "apps/s_server.c||apps/s_server.c": [
      "File: apps/s_server.c -> apps/s_server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "352: static int ssl_srp_server_param_cb(SSL *s, int *ad, void *arg)",
      "353: {",
      "354:     srpsrvparm *p = (srpsrvparm *) arg;",
      "355:     if (p->login == NULL && p->user == NULL) {",
      "356:         p->login = SSL_get_srp_username(s);",
      "357:         BIO_printf(bio_err, \"SRP username = \\\"%s\\\"\\n\", p->login);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "355:     int ret = SSL3_AL_FATAL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "361:     if (p->user == NULL) {",
      "362:         BIO_printf(bio_err, \"User %s doesn't exist\\n\", p->login);",
      "364:     }",
      "365:     if (SSL_set_srp_server_param",
      "366:         (s, p->user->N, p->user->g, p->user->s, p->user->v,",
      "367:          p->user->info) < 0) {",
      "370:     }",
      "371:     BIO_printf(bio_err,",
      "372:                \"SRP parameters set: username = \\\"%s\\\" info=\\\"%s\\\" \\n\",",
      "373:                p->login, p->user->info);",
      "375:     p->user = NULL;",
      "376:     p->login = NULL;",
      "378: }",
      "380: #endif",
      "",
      "[Removed Lines]",
      "363:         return SSL3_AL_FATAL;",
      "369:         return SSL3_AL_FATAL;",
      "377:     return SSL_ERROR_NONE;",
      "",
      "[Added Lines]",
      "365:         goto err;",
      "372:         goto err;",
      "377:     ret = SSL_ERROR_NONE;",
      "379: err:",
      "380:     SRP_user_pwd_free(p->user);",
      "383:     return ret;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2325: #ifndef OPENSSL_NO_SRP",
      "2326:                 while (SSL_get_error(con, k) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2327:                     BIO_printf(bio_s_out, \"LOOKUP renego during write\\n\");",
      "2328:                     srp_callback_parm.user =",
      "2331:                     if (srp_callback_parm.user)",
      "2332:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2333:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2329:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2330:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2334:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2336:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2337:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2393: #ifndef OPENSSL_NO_SRP",
      "2394:                 while (SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2395:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "2396:                     srp_callback_parm.user =",
      "2399:                     if (srp_callback_parm.user)",
      "2400:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2401:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2397:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2398:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2403:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2405:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2406:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2520:         while (i <= 0 && SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2521:             BIO_printf(bio_s_out, \"LOOKUP during accept %s\\n\",",
      "2522:                        srp_callback_parm.login);",
      "2523:             srp_callback_parm.user =",
      "2526:             if (srp_callback_parm.user)",
      "2527:                 BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2528:                            srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2524:                 SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2525:                                       srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2531:             SRP_user_pwd_free(srp_callback_parm.user);",
      "2533:                 SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2534:                                        srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2732:                 if (BIO_should_io_special(io)",
      "2733:                     && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "2734:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "2735:                     srp_callback_parm.user =",
      "2738:                     if (srp_callback_parm.user)",
      "2739:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2740:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2736:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2737:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2744:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2746:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2747:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3093:         if (BIO_should_io_special(io)",
      "3094:             && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "3095:             BIO_printf(bio_s_out, \"LOOKUP renego during accept\\n\");",
      "3096:             srp_callback_parm.user =",
      "3099:             if (srp_callback_parm.user)",
      "3100:                 BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "3101:                            srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "3097:                 SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "3098:                                       srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "3106:             SRP_user_pwd_free(srp_callback_parm.user);",
      "3108:                 SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "3109:                                        srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "3121:                 if (BIO_should_io_special(io)",
      "3122:                     && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "3123:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "3124:                     srp_callback_parm.user =",
      "3127:                     if (srp_callback_parm.user)",
      "3128:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "3129:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "3125:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "3126:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "3135:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "3137:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "3138:                                                srp_callback_parm.login);",
      "",
      "---------------"
    ],
    "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c": [
      "File: crypto/srp/srp_vfy.c -> crypto/srp/srp_vfy.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "184:     return olddst;",
      "185: }",
      "188: {",
      "189:     if (user_pwd == NULL)",
      "190:         return;",
      "",
      "[Removed Lines]",
      "187: static void SRP_user_pwd_free(SRP_user_pwd *user_pwd)",
      "",
      "[Added Lines]",
      "187: void SRP_user_pwd_free(SRP_user_pwd *user_pwd)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "246:     return (vinfo->s != NULL && vinfo->v != NULL);",
      "247: }",
      "249: SRP_VBASE *SRP_VBASE_new(char *seed_key)",
      "250: {",
      "251:     SRP_VBASE *vb = OPENSSL_malloc(sizeof(*vb));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "249: static SRP_user_pwd *srp_user_pwd_dup(SRP_user_pwd *src)",
      "250: {",
      "251:     SRP_user_pwd *ret;",
      "253:     if (src == NULL)",
      "254:         return NULL;",
      "255:     if ((ret = SRP_user_pwd_new()) == NULL)",
      "256:         return NULL;",
      "258:     SRP_user_pwd_set_gN(ret, src->g, src->N);",
      "259:     if (!SRP_user_pwd_set_ids(ret, src->id, src->info)",
      "260:         || !SRP_user_pwd_set_sv_BN(ret, BN_dup(src->s), BN_dup(src->v))) {",
      "261:             SRP_user_pwd_free(ret);",
      "262:             return NULL;",
      "263:     }",
      "264:     return ret;",
      "265: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "468: }",
      "471: {",
      "472:     int i;",
      "473:     SRP_user_pwd *user;",
      "478:     if (vb == NULL)",
      "479:         return NULL;",
      "480:     for (i = 0; i < sk_SRP_user_pwd_num(vb->users_pwd); i++) {",
      "481:         user = sk_SRP_user_pwd_value(vb->users_pwd, i);",
      "482:         if (strcmp(user->id, username) == 0)",
      "483:             return user;",
      "484:     }",
      "485:     if ((vb->seed_key == NULL) ||",
      "486:         (vb->default_g == NULL) || (vb->default_N == NULL))",
      "487:         return NULL;",
      "",
      "[Removed Lines]",
      "470: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)",
      "474:     unsigned char digv[SHA_DIGEST_LENGTH];",
      "475:     unsigned char digs[SHA_DIGEST_LENGTH];",
      "476:     EVP_MD_CTX *ctxt = NULL;",
      "",
      "[Added Lines]",
      "488: static SRP_user_pwd *find_user(SRP_VBASE *vb, char *username)",
      "502:     return NULL;",
      "503: }",
      "511: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)",
      "512: {",
      "513:     return find_user(vb, username);",
      "514: }",
      "520: SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username)",
      "521: {",
      "522:     SRP_user_pwd *user;",
      "523:     unsigned char digv[SHA_DIGEST_LENGTH];",
      "524:     unsigned char digs[SHA_DIGEST_LENGTH];",
      "525:     EVP_MD_CTX *ctxt = NULL;",
      "527:     if (vb == NULL)",
      "528:         return NULL;",
      "530:     if ((user = find_user(vb, username)) != NULL)",
      "531:         return srp_user_pwd_dup(user);",
      "",
      "---------------"
    ],
    "include/openssl/srp.h||include/openssl/srp.h": [
      "File: include/openssl/srp.h -> include/openssl/srp.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "85: DEFINE_STACK_OF(SRP_gN_cache)",
      "87: typedef struct SRP_user_pwd_st {",
      "88:     char *id;",
      "89:     BIGNUM *s;",
      "90:     BIGNUM *v;",
      "91:     const BIGNUM *g;",
      "92:     const BIGNUM *N;",
      "93:     char *info;",
      "94: } SRP_user_pwd;",
      "96: DEFINE_STACK_OF(SRP_user_pwd)",
      "98: typedef struct SRP_VBASE_st {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "99: void SRP_user_pwd_free(SRP_user_pwd *user_pwd);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "118: SRP_VBASE *SRP_VBASE_new(char *seed_key);",
      "119: void SRP_VBASE_free(SRP_VBASE *vb);",
      "120: int SRP_VBASE_init(SRP_VBASE *vb, char *verifier_file);",
      "122: char *SRP_create_verifier(const char *user, const char *pass, char **salt,",
      "123:                           char **verifier, const char *N, const char *g);",
      "124: int SRP_create_verifier_BN(const char *user, const char *pass, BIGNUM **salt,",
      "",
      "[Removed Lines]",
      "121: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username);",
      "",
      "[Added Lines]",
      "128: DEPRECATEDIN_1_1_0(SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username))",
      "130: SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username);",
      "",
      "---------------"
    ],
    "util/libeay.num||util/libeay.num": [
      "File: util/libeay.num -> util/libeay.num",
      "--- Hunk 1 ---",
      "[Context before]",
      "4073: OPENSSL_strncasecmp                     4566 1_1_0 EXIST::FUNCTION:",
      "4074: OPENSSL_gmtime                          4567 1_1_0 EXIST::FUNCTION:",
      "4075: OPENSSL_gmtime_adj                      4568 1_1_0 EXIST::FUNCTION:",
      "4077: SRP_Calc_server_key                     4570 1_1_0 EXIST::FUNCTION:SRP",
      "4078: SRP_create_verifier                     4571 1_1_0 EXIST::FUNCTION:SRP",
      "4079: SRP_create_verifier_BN                  4572 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "[Removed Lines]",
      "4076: SRP_VBASE_get_by_user                   4569 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "[Added Lines]",
      "4076: SRP_VBASE_get_by_user                   4569 1_1_0 EXIST::FUNCTION:DEPRECATEDIN_1_1_0,SRP",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4711: OPENSSL_INIT_new                        5215 1_1_0 EXIST::FUNCTION:",
      "4712: OPENSSL_INIT_free                       5216 1_1_0 EXIST::FUNCTION:",
      "4713: OPENSSL_INIT_set_config_filename        5217 1_1_0 EXIST::FUNCTION:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4714: SRP_user_pwd_free                       5218 1_1_0 EXIST::FUNCTION:SRP",
      "4715: SRP_VBASE_get1_by_user                  5219 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8011f64efbad435efb1c77e9ac38b4d216091c96",
      "candidate_info": {
        "commit_hash": "8011f64efbad435efb1c77e9ac38b4d216091c96",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8011f64efbad435efb1c77e9ac38b4d216091c96",
        "files": [
          "crypto/engine/Makefile",
          "crypto/evp/Makefile",
          "ssl/Makefile",
          "test/Makefile",
          "util/libeay.num"
        ],
        "message": "make update\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4615: TS_VERIFY_CTX_add_flags                 4974 EXIST::FUNCTION:",
          "4616: TS_STATUS_INFO_set_status               4975 EXIST::FUNCTION:",
          "4617: TS_VERIFY_CTX_set_store                 4976 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4618: EVP_PKEY_meth_get_decrypt               4977 EXIST::FUNCTION:",
          "4619: EVP_PKEY_meth_get_derive                4978 EXIST::FUNCTION:",
          "4620: EVP_PKEY_meth_get_verify                4979 EXIST::FUNCTION:",
          "4621: EVP_PKEY_meth_get_ctrl                  4980 EXIST::FUNCTION:",
          "4622: EVP_PKEY_meth_get_verifyctx             4981 EXIST::FUNCTION:",
          "4623: EVP_PKEY_meth_get_paramgen              4982 EXIST::FUNCTION:",
          "4624: EVP_PKEY_meth_get_init                  4983 EXIST::FUNCTION:",
          "4625: EVP_PKEY_meth_get_cleanup               4984 EXIST::FUNCTION:",
          "4626: EVP_PKEY_meth_get_keygen                4985 EXIST::FUNCTION:",
          "4627: EVP_PKEY_meth_get_signctx               4986 EXIST::FUNCTION:",
          "4628: EVP_PKEY_meth_get_sign                  4987 EXIST::FUNCTION:",
          "4629: EVP_PKEY_meth_get_copy                  4988 EXIST::FUNCTION:",
          "4630: EVP_PKEY_meth_get_verify_recover        4989 EXIST::FUNCTION:",
          "4631: EVP_PKEY_meth_get_encrypt               4990 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "984d6c6052169bcae8010de33f7796e455536d61",
      "candidate_info": {
        "commit_hash": "984d6c6052169bcae8010de33f7796e455536d61",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/984d6c6052169bcae8010de33f7796e455536d61",
        "files": [
          "CHANGES",
          "Configure",
          "crypto/asn1/Makefile",
          "crypto/asn1/a_strex.c",
          "crypto/asn1/tasn_utl.c",
          "crypto/bio/bss_file.c",
          "crypto/conf/conf_sap.c",
          "crypto/cryptlib.c",
          "crypto/des/read2pwd.c",
          "crypto/ec/Makefile",
          "crypto/ec/ec_key.c",
          "crypto/engine/eng_openssl.c",
          "crypto/include/internal/cryptlib.h",
          "crypto/lock.c",
          "crypto/pem/pem_pk8.c",
          "crypto/ts/Makefile",
          "crypto/ui/ui_util.c",
          "crypto/x509/by_dir.c",
          "crypto/x509/by_file.c",
          "crypto/x509/x509_d2.c",
          "e_os.h",
          "include/openssl/bio.h",
          "include/openssl/conf.h",
          "include/openssl/pem.h",
          "include/openssl/ssl.h",
          "include/openssl/ts.h",
          "include/openssl/x509_vfy.h",
          "include/openssl/x509v3.h",
          "ssl/ssl_cert.c",
          "ssl/ssl_lib.c",
          "ssl/ssl_rsa.c",
          "test/Makefile",
          "util/libeay.num",
          "util/ssleay.num"
        ],
        "message": "Fix no-stdio build\n\nMuch related/similar work also done by\nIvan Nestlerode <ivan.nestlerode@sonos.com>\n\n   +Replace FILE BIO's with dummy ops that fail.\n   +Include <stdio.h> for sscanf() even with no-stdio (since the declaration\n    is there). We rely on sscanf() to parse the OPENSSL_ia32cap environment\n    variable, since it can be larger than a 'long'. And we don't rely on the\n    availability of strtoull().\n   +Remove OPENSSL_stderr(); not used.\n   +Make OPENSSL_showfatal() do nothing (currently without stdio there's\n    nothing we can do).\n   +Remove file-based functionality from ssl/. The function\n    prototypes were already gone, but not the functions themselves.\n   +Remove unviable conf functionality via SYS_UEFI\n   +Add fallback definition of BUFSIZ.\n   +Remove functions taking FILE * from header files.\n   +Add missing DECLARE_PEM_write_fp_const\n   +Disable X509_LOOKUP_hash_dir(). X509_LOOKUP_file() was already compiled out,\n    so remove its prototype.\n   +Use OPENSSL_showfatal() in CRYPTO_destroy_dynlockid().\n   +Eliminate SRP_VBASE_init() and supporting functions. Users will need to\n    build the verifier manually instead.\n   +Eliminate compiler warning for unused do_pk8pkey_fp().\n   +Disable TEST_ENG_OPENSSL_PKEY.\n   +Disable GOST engine as is uses [f]printf all over the place.\n   +Eliminate compiler warning for unused send_fp_chars().\n\nSigned-off-by: Rich Salz <rsalz@akamai.com>\nReviewed-by: Tim Hudson <tjh@openssl.org>",
        "before_after_code_files": [
          "crypto/asn1/a_strex.c||crypto/asn1/a_strex.c",
          "crypto/asn1/tasn_utl.c||crypto/asn1/tasn_utl.c",
          "crypto/bio/bss_file.c||crypto/bio/bss_file.c",
          "crypto/conf/conf_sap.c||crypto/conf/conf_sap.c",
          "crypto/cryptlib.c||crypto/cryptlib.c",
          "crypto/des/read2pwd.c||crypto/des/read2pwd.c",
          "crypto/ec/ec_key.c||crypto/ec/ec_key.c",
          "crypto/engine/eng_openssl.c||crypto/engine/eng_openssl.c",
          "crypto/include/internal/cryptlib.h||crypto/include/internal/cryptlib.h",
          "crypto/lock.c||crypto/lock.c",
          "crypto/pem/pem_pk8.c||crypto/pem/pem_pk8.c",
          "crypto/ui/ui_util.c||crypto/ui/ui_util.c",
          "crypto/x509/by_dir.c||crypto/x509/by_dir.c",
          "crypto/x509/by_file.c||crypto/x509/by_file.c",
          "crypto/x509/x509_d2.c||crypto/x509/x509_d2.c",
          "e_os.h||e_os.h",
          "include/openssl/bio.h||include/openssl/bio.h",
          "include/openssl/conf.h||include/openssl/conf.h",
          "include/openssl/pem.h||include/openssl/pem.h",
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "include/openssl/ts.h||include/openssl/ts.h",
          "include/openssl/x509_vfy.h||include/openssl/x509_vfy.h",
          "include/openssl/x509v3.h||include/openssl/x509v3.h",
          "ssl/ssl_cert.c||ssl/ssl_cert.c",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "ssl/ssl_rsa.c||ssl/ssl_rsa.c",
          "util/libeay.num||util/libeay.num",
          "util/ssleay.num||util/ssleay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/a_strex.c||crypto/asn1/a_strex.c": [
          "File: crypto/asn1/a_strex.c -> crypto/asn1/a_strex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:     return 1;",
          "93: }",
          "95: static int send_fp_chars(void *arg, const void *buf, int len)",
          "96: {",
          "97:     if (!arg)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95: #ifndef OPENSSL_NO_STDIO",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:         return 0;",
          "101:     return 1;",
          "102: }",
          "104: typedef int char_io (void *arg, const void *buf, int len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: #endif",
          "",
          "---------------"
        ],
        "crypto/asn1/tasn_utl.c||crypto/asn1/tasn_utl.c": [
          "File: crypto/asn1/tasn_utl.c -> crypto/asn1/tasn_utl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: #include <stddef.h>",
          "61: #include <string.h>",
          "62: #include <openssl/asn1.h>",
          "63: #include <openssl/asn1t.h>",
          "64: #include <openssl/objects.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: #include <internal/cryptlib.h>",
          "",
          "---------------"
        ],
        "crypto/bio/bss_file.c||crypto/bio/bss_file.c": [
          "File: crypto/bio/bss_file.c -> crypto/bio/bss_file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "467:     return (ret);",
          "468: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "470: #else",
          "472: static int file_write(BIO *b, const char *in, int inl)",
          "473: {",
          "474:     return -1;",
          "475: }",
          "476: static int file_read(BIO *b, char *out, int outl)",
          "477: {",
          "478:     return -1;",
          "479: }",
          "480: static int file_puts(BIO *bp, const char *str)",
          "481: {",
          "482:     return -1;",
          "483: }",
          "484: static int file_gets(BIO *bp, char *buf, int size)",
          "485: {",
          "486:     return 0;",
          "487: }",
          "488: static long file_ctrl(BIO *b, int cmd, long num, void *ptr)",
          "489: {",
          "490:     return 0;",
          "491: }",
          "492: static int file_new(BIO *bi)",
          "493: {",
          "494:     return 0;",
          "495: }",
          "496: static int file_free(BIO *a)",
          "497: {",
          "498:     return 0;",
          "499: }",
          "501: static BIO_METHOD methods_filep = {",
          "502:     BIO_TYPE_FILE,",
          "503:     \"FILE pointer\",",
          "504:     file_write,",
          "505:     file_read,",
          "506:     file_puts,",
          "507:     file_gets,",
          "508:     file_ctrl,",
          "509:     file_new,",
          "510:     file_free,",
          "511:     NULL,",
          "512: };",
          "514: BIO_METHOD *BIO_s_file(void)",
          "515: {",
          "516:     return (&methods_filep);",
          "517: }",
          "519: BIO *BIO_new_file(const char *filename, const char *mode)",
          "520: {",
          "521:     return NULL;",
          "522: }",
          "",
          "---------------"
        ],
        "crypto/conf/conf_sap.c||crypto/conf/conf_sap.c": [
          "File: crypto/conf/conf_sap.c -> crypto/conf/conf_sap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:     ENGINE_load_builtin_engines();",
          "88: #endif",
          "89:     ERR_clear_error();",
          "90:     CONF_modules_load_file(NULL, config_name,",
          "91:                                CONF_MFLAGS_DEFAULT_SECTION |",
          "92:                                CONF_MFLAGS_IGNORE_MISSING_FILE);",
          "93: }",
          "95: void OPENSSL_no_config()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90: #ifndef OPENSSL_SYS_UEFI",
          "94: #endif",
          "",
          "---------------"
        ],
        "crypto/cryptlib.c||crypto/cryptlib.c": [
          "File: crypto/cryptlib.c -> crypto/cryptlib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "129: }",
          "131: # if defined(OPENSSL_CPUID_OBJ) && !defined(OPENSSL_NO_ASM) && !defined(I386_ONLY)",
          "132: #  define OPENSSL_CPUID_SETUP",
          "133: typedef uint64_t IA32CAP;",
          "134: void OPENSSL_cpuid_setup(void)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132: #include <stdio.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "432: #else",
          "433: void OPENSSL_showfatal(const char *fmta, ...)",
          "434: {",
          "435:     va_list ap;",
          "437:     va_start(ap, fmta);",
          "438:     vfprintf(stderr, fmta, ap);",
          "439:     va_end(ap);",
          "440: }",
          "442: int OPENSSL_isservice(void)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436: #ifndef OPENSSL_NO_STDIO",
          "442: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "463: #endif",
          "464: }",
          "471: int CRYPTO_memcmp(const void *in_a, const void *in_b, size_t len)",
          "472: {",
          "473:     size_t i;",
          "",
          "[Removed Lines]",
          "466: void *OPENSSL_stderr(void)",
          "467: {",
          "468:     return stderr;",
          "469: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/des/read2pwd.c||crypto/des/read2pwd.c": [
          "File: crypto/des/read2pwd.c -> crypto/des/read2pwd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "114: #include <openssl/ui.h>",
          "115: #include <openssl/crypto.h>",
          "117: int DES_read_password(DES_cblock *key, const char *prompt, int verify)",
          "118: {",
          "119:     int ok;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117: #ifndef BUFSIZ",
          "118: #define BUFSIZ 256",
          "119: #endif",
          "",
          "---------------"
        ],
        "crypto/ec/ec_key.c||crypto/ec/ec_key.c": [
          "File: crypto/ec/ec_key.c -> crypto/ec/ec_key.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: #include <string.h>",
          "65: #include \"ec_lcl.h\"",
          "66: #include <openssl/err.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64: #include <internal/cryptlib.h>",
          "",
          "---------------"
        ],
        "crypto/engine/eng_openssl.c||crypto/engine/eng_openssl.c": [
          "File: crypto/engine/eng_openssl.c -> crypto/engine/eng_openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: #define TEST_ENG_OPENSSL_RC4",
          "92: #define TEST_ENG_OPENSSL_PKEY",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92: #ifndef OPENSSL_NO_STDIO",
          "94: #endif",
          "",
          "---------------"
        ],
        "crypto/include/internal/cryptlib.h||crypto/include/internal/cryptlib.h": [
          "File: crypto/include/internal/cryptlib.h -> crypto/include/internal/cryptlib.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: void OPENSSL_cpuid_setup(void);",
          "102: extern unsigned int OPENSSL_ia32cap_P[];",
          "103: void OPENSSL_showfatal(const char *fmta, ...);",
          "105: extern int OPENSSL_NONPIC_relocated;",
          "107: #ifdef  __cplusplus",
          "",
          "[Removed Lines]",
          "104: void *OPENSSL_stderr(void);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/lock.c||crypto/lock.c": [
          "File: crypto/lock.c -> crypto/lock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "309:         --pointer->references;",
          "310: #ifdef REF_CHECK",
          "311:         if (pointer->references < 0) {",
          "314:             abort();",
          "315:         } else",
          "316: #endif",
          "",
          "[Removed Lines]",
          "312:             fprintf(stderr,",
          "313:                     \"CRYPTO_destroy_dynlockid, bad reference count\\n\");",
          "",
          "[Added Lines]",
          "312:             OPENSSL_showfatal(\"CRYPTO_destroy_dynlockid, bad reference count\\n\");",
          "",
          "---------------"
        ],
        "crypto/pem/pem_pk8.c||crypto/pem/pem_pk8.c": [
          "File: crypto/pem/pem_pk8.c -> crypto/pem/pem_pk8.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: static int do_pk8pkey(BIO *bp, EVP_PKEY *x, int isder,",
          "70:                       int nid, const EVP_CIPHER *enc,",
          "71:                       char *kstr, int klen, pem_password_cb *cb, void *u);",
          "72: static int do_pk8pkey_fp(FILE *bp, EVP_PKEY *x, int isder,",
          "73:                          int nid, const EVP_CIPHER *enc,",
          "74:                          char *kstr, int klen, pem_password_cb *cb, void *u);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: #ifndef OPENSSL_NO_STDIO",
          "77: #endif",
          "",
          "---------------"
        ],
        "crypto/ui/ui_util.c||crypto/ui/ui_util.c": [
          "File: crypto/ui/ui_util.c -> crypto/ui/ui_util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #include <string.h>",
          "57: #include \"ui_locl.h\"",
          "59: int UI_UTIL_read_pw_string(char *buf, int length, const char *prompt,",
          "60:                            int verify)",
          "61: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: #ifndef BUFSIZ",
          "60: #define BUFSIZ 256",
          "61: #endif",
          "",
          "---------------"
        ],
        "crypto/x509/by_dir.c||crypto/x509/by_dir.c": [
          "File: crypto/x509/by_dir.c -> crypto/x509/by_dir.c"
        ],
        "crypto/x509/by_file.c||crypto/x509/by_file.c": [
          "File: crypto/x509/by_file.c -> crypto/x509/by_file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: #include <openssl/x509.h>",
          "67: #include <openssl/pem.h>",
          "71: static int by_file_ctrl(X509_LOOKUP *ctx, int cmd, const char *argc,",
          "72:                         long argl, char **ret);",
          "73: static X509_LOOKUP_METHOD x509_file_lookup = {",
          "",
          "[Removed Lines]",
          "69: #ifndef OPENSSL_NO_STDIO",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/x509/x509_d2.c||crypto/x509/x509_d2.c": [
          "File: crypto/x509/x509_d2.c -> crypto/x509/x509_d2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: #include <openssl/crypto.h>",
          "62: #include <openssl/x509.h>",
          "65: int X509_STORE_set_default_paths(X509_STORE *ctx)",
          "66: {",
          "67:     X509_LOOKUP *lookup;",
          "",
          "[Removed Lines]",
          "64: #ifndef OPENSSL_NO_STDIO",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:         return (0);",
          "106:     return (1);",
          "107: }",
          "",
          "[Removed Lines]",
          "109: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "e_os.h||e_os.h": [
          "File: e_os.h -> e_os.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: #  undef REF_PRINT",
          "77: #  define REF_PRINT(a,b)  fprintf(stderr,\"%08X:%4d:%s\\n\",(int)b,b->references,a)",
          "78: # endif",
          "80: # ifndef DEVRANDOM",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79: # if defined(OPENSSL_NO_STDIO) && defined(REF_CHECK)",
          "80: #  error \"Cannot have REF_CHECK with no-stdio\"",
          "81: # endif",
          "82: # if defined(OPENSSL_NO_STDIO) && defined(REF_PRINT)",
          "83: #  error \"Cannot have REF_PRINT with no-stdio\"",
          "84: # endif",
          "",
          "---------------"
        ],
        "include/openssl/bio.h||include/openssl/bio.h": [
          "File: include/openssl/bio.h -> include/openssl/bio.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "633: int BIO_asn1_get_suffix(BIO *b, asn1_ps_func **psuffix,",
          "634:                         asn1_ps_func **psuffix_free);",
          "637: BIO_METHOD *BIO_s_file(void);",
          "638: BIO *BIO_new_file(const char *filename, const char *mode);",
          "639: BIO *BIO_new_fp(FILE *stream, int close_flag);",
          "641: # endif",
          "642: BIO *BIO_new(BIO_METHOD *type);",
          "643: int BIO_set(BIO *a, BIO_METHOD *type);",
          "",
          "[Removed Lines]",
          "636: # ifndef OPENSSL_NO_STDIO",
          "640: #  define BIO_s_file_internal    BIO_s_file",
          "",
          "[Added Lines]",
          "638: # define BIO_s_file_internal    BIO_s_file",
          "639: # ifndef OPENSSL_NO_STDIO",
          "",
          "---------------"
        ],
        "include/openssl/conf.h||include/openssl/conf.h": [
          "File: include/openssl/conf.h -> include/openssl/conf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "133: long CONF_get_number(LHASH_OF(CONF_VALUE) *conf, const char *group,",
          "134:                      const char *name);",
          "135: void CONF_free(LHASH_OF(CONF_VALUE) *conf);",
          "136: int CONF_dump_fp(LHASH_OF(CONF_VALUE) *conf, FILE *out);",
          "137: int CONF_dump_bio(LHASH_OF(CONF_VALUE) *conf, BIO *out);",
          "139: void OPENSSL_config(const char *config_name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136: #ifndef OPENSSL_NO_STDIO",
          "138: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166: char *NCONF_get_string(const CONF *conf, const char *group, const char *name);",
          "167: int NCONF_get_number_e(const CONF *conf, const char *group, const char *name,",
          "168:                        long *result);",
          "169: int NCONF_dump_fp(const CONF *conf, FILE *out);",
          "170: int NCONF_dump_bio(const CONF *conf, BIO *out);",
          "172: #define NCONF_get_number(c,g,n,r) NCONF_get_number_e(c,g,n,r)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171: #ifndef OPENSSL_NO_STDIO",
          "173: #endif",
          "",
          "---------------"
        ],
        "include/openssl/pem.h||include/openssl/pem.h": [
          "File: include/openssl/pem.h -> include/openssl/pem.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "361:                             unsigned char *kstr, int klen,",
          "362:                             pem_password_cb *cd, void *u);",
          "364: int PEM_read(FILE *fp, char **name, char **header,",
          "365:              unsigned char **data, long *len);",
          "366: int PEM_write(FILE *fp, const char *name, const char *hdr,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365: #ifndef OPENSSL_NO_STDIO",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "372:                    int klen, pem_password_cb *callback, void *u);",
          "373: STACK_OF(X509_INFO) *PEM_X509_INFO_read(FILE *fp, STACK_OF(X509_INFO) *sk,",
          "374:                                         pem_password_cb *cb, void *u);",
          "376: int PEM_SealInit(PEM_ENCODE_SEAL_CTX *ctx, EVP_CIPHER *type,",
          "377:                  EVP_MD *md_type, unsigned char **ek, int *ekl,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "377: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "437: EVP_PKEY *d2i_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY **x, pem_password_cb *cb,",
          "438:                                   void *u);",
          "440: int i2d_PKCS8PrivateKey_fp(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,",
          "441:                            char *kstr, int klen,",
          "442:                            pem_password_cb *cb, void *u);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "443: #ifndef OPENSSL_NO_STDIO",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "453: int PEM_write_PKCS8PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,",
          "454:                               char *kstr, int klen, pem_password_cb *cd,",
          "455:                               void *u);",
          "457: EVP_PKEY *PEM_read_bio_Parameters(BIO *bp, EVP_PKEY **x);",
          "458: int PEM_write_bio_Parameters(BIO *bp, EVP_PKEY *x);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "460: #endif",
          "",
          "---------------"
        ],
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1387: __owur int SSL_CTX_use_serverinfo(SSL_CTX *ctx, const unsigned char *serverinfo,",
          "1388:                            size_t serverinfo_length);",
          "1390: __owur int SSL_CTX_use_serverinfo_file(SSL_CTX *ctx, const char *file);",
          "1394: __owur int SSL_use_RSAPrivateKey_file(SSL *ssl, const char *file, int type);",
          "1395: __owur int SSL_use_PrivateKey_file(SSL *ssl, const char *file, int type);",
          "1396: __owur int SSL_use_certificate_file(SSL *ssl, const char *file, int type);",
          "",
          "[Removed Lines]",
          "1389: # ifndef OPENSSL_NO_STDIO",
          "1393: # ifndef OPENSSL_NO_STDIO",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1403: __owur STACK_OF(X509_NAME) *SSL_load_client_CA_file(const char *file);",
          "1404: __owur int SSL_add_file_cert_subjects_to_stack(STACK_OF(X509_NAME) *stackCAs,",
          "1405:                                         const char *file);",
          "1407: int SSL_add_dir_cert_subjects_to_stack(STACK_OF(X509_NAME) *stackCAs,",
          "1408:                                        const char *dir);",
          "1411: # endif",
          "1413: void SSL_load_error_strings(void);",
          "",
          "[Removed Lines]",
          "1406: #  ifndef OPENSSL_SYS_VMS",
          "1409: #  endif",
          "",
          "[Added Lines]",
          "1403: # ifndef OPENSSL_SYS_VMS",
          "",
          "---------------"
        ],
        "include/openssl/ts.h||include/openssl/ts.h": [
          "File: include/openssl/ts.h -> include/openssl/ts.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "134: TS_REQ *TS_REQ_dup(TS_REQ *a);",
          "136: TS_REQ *d2i_TS_REQ_fp(FILE *fp, TS_REQ **a);",
          "137: int i2d_TS_REQ_fp(FILE *fp, TS_REQ *a);",
          "138: TS_REQ *d2i_TS_REQ_bio(BIO *fp, TS_REQ **a);",
          "139: int i2d_TS_REQ_bio(BIO *fp, TS_REQ *a);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136: #ifndef OPENSSL_NO_STDIO",
          "139: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147: TS_MSG_IMPRINT *TS_MSG_IMPRINT_dup(TS_MSG_IMPRINT *a);",
          "149: TS_MSG_IMPRINT *d2i_TS_MSG_IMPRINT_fp(FILE *fp, TS_MSG_IMPRINT **a);",
          "150: int i2d_TS_MSG_IMPRINT_fp(FILE *fp, TS_MSG_IMPRINT *a);",
          "154: TS_RESP *TS_RESP_new(void);",
          "155: void TS_RESP_free(TS_RESP *a);",
          "",
          "[Removed Lines]",
          "151: TS_MSG_IMPRINT *d2i_TS_MSG_IMPRINT_bio(BIO *fp, TS_MSG_IMPRINT **a);",
          "152: int i2d_TS_MSG_IMPRINT_bio(BIO *fp, TS_MSG_IMPRINT *a);",
          "",
          "[Added Lines]",
          "151: #ifndef OPENSSL_NO_STDIO",
          "154: #endif",
          "155: TS_MSG_IMPRINT *d2i_TS_MSG_IMPRINT_bio(BIO *bio, TS_MSG_IMPRINT **a);",
          "156: int i2d_TS_MSG_IMPRINT_bio(BIO *bio, TS_MSG_IMPRINT *a);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "158: TS_TST_INFO *PKCS7_to_TS_TST_INFO(PKCS7 *token);",
          "159: TS_RESP *TS_RESP_dup(TS_RESP *a);",
          "161: TS_RESP *d2i_TS_RESP_fp(FILE *fp, TS_RESP **a);",
          "162: int i2d_TS_RESP_fp(FILE *fp, TS_RESP *a);",
          "166: TS_STATUS_INFO *TS_STATUS_INFO_new(void);",
          "167: void TS_STATUS_INFO_free(TS_STATUS_INFO *a);",
          "",
          "[Removed Lines]",
          "163: TS_RESP *d2i_TS_RESP_bio(BIO *fp, TS_RESP **a);",
          "164: int i2d_TS_RESP_bio(BIO *fp, TS_RESP *a);",
          "",
          "[Added Lines]",
          "165: #ifndef OPENSSL_NO_STDIO",
          "168: #endif",
          "169: TS_RESP *d2i_TS_RESP_bio(BIO *bio, TS_RESP **a);",
          "170: int i2d_TS_RESP_bio(BIO *bio, TS_RESP *a);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "177:                              long length);",
          "178: TS_TST_INFO *TS_TST_INFO_dup(TS_TST_INFO *a);",
          "180: TS_TST_INFO *d2i_TS_TST_INFO_fp(FILE *fp, TS_TST_INFO **a);",
          "181: int i2d_TS_TST_INFO_fp(FILE *fp, TS_TST_INFO *a);",
          "185: TS_ACCURACY *TS_ACCURACY_new(void);",
          "186: void TS_ACCURACY_free(TS_ACCURACY *a);",
          "",
          "[Removed Lines]",
          "182: TS_TST_INFO *d2i_TS_TST_INFO_bio(BIO *fp, TS_TST_INFO **a);",
          "183: int i2d_TS_TST_INFO_bio(BIO *fp, TS_TST_INFO *a);",
          "",
          "[Added Lines]",
          "186: #ifndef OPENSSL_NO_STDIO",
          "189: #endif",
          "190: TS_TST_INFO *d2i_TS_TST_INFO_bio(BIO *bio, TS_TST_INFO **a);",
          "191: int i2d_TS_TST_INFO_bio(BIO *bio, TS_TST_INFO *a);",
          "",
          "---------------"
        ],
        "include/openssl/x509_vfy.h||include/openssl/x509_vfy.h": [
          "File: include/openssl/x509_vfy.h -> include/openssl/x509_vfy.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "474: int X509_LOOKUP_ctrl(X509_LOOKUP *ctx, int cmd, const char *argc,",
          "475:                      long argl, char **ret);",
          "478: int X509_load_cert_file(X509_LOOKUP *ctx, const char *file, int type);",
          "479: int X509_load_crl_file(X509_LOOKUP *ctx, const char *file, int type);",
          "480: int X509_load_cert_crl_file(X509_LOOKUP *ctx, const char *file, int type);",
          "483: X509_LOOKUP *X509_LOOKUP_new(X509_LOOKUP_METHOD *method);",
          "484: void X509_LOOKUP_free(X509_LOOKUP *ctx);",
          "",
          "[Removed Lines]",
          "477: # ifndef OPENSSL_NO_STDIO",
          "481: # endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "494:                          X509_OBJECT *ret);",
          "495: int X509_LOOKUP_shutdown(X509_LOOKUP *ctx);",
          "498: int X509_STORE_load_locations(X509_STORE *ctx,",
          "499:                               const char *file, const char *dir);",
          "500: int X509_STORE_set_default_paths(X509_STORE *ctx);",
          "503: int X509_STORE_CTX_get_ex_new_index(long argl, void *argp,",
          "504:                                     CRYPTO_EX_new *new_func,",
          "",
          "[Removed Lines]",
          "497: # ifndef OPENSSL_NO_STDIO",
          "501: # endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/openssl/x509v3.h||include/openssl/x509v3.h": [
          "File: include/openssl/x509v3.h -> include/openssl/x509v3.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "684:                         int ml);",
          "685: int X509V3_EXT_print(BIO *out, X509_EXTENSION *ext, unsigned long flag,",
          "686:                      int indent);",
          "687: int X509V3_EXT_print_fp(FILE *out, X509_EXTENSION *ext, int flag, int indent);",
          "689: int X509V3_extensions_print(BIO *out, char *title,",
          "690:                             STACK_OF(X509_EXTENSION) *exts,",
          "691:                             unsigned long flag, int indent);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "687: #ifndef OPENSSL_NO_STDIO",
          "689: #endif",
          "",
          "---------------"
        ],
        "ssl/ssl_cert.c||ssl/ssl_cert.c": [
          "File: ssl/ssl_cert.c -> ssl/ssl_cert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "672:     return (X509_NAME_cmp(*a, *b));",
          "673: }",
          "",
          "[Removed Lines]",
          "675: #ifndef OPENSSL_NO_STDIO",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "736:         ERR_clear_error();",
          "737:     return (ret);",
          "738: }",
          "",
          "[Removed Lines]",
          "739: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2781:     return (ssl->ctx);",
          "2782: }",
          "2785: int SSL_CTX_set_default_verify_paths(SSL_CTX *ctx)",
          "2786: {",
          "2787:     return (X509_STORE_set_default_paths(ctx->cert_store));",
          "",
          "[Removed Lines]",
          "2784: #ifndef OPENSSL_NO_STDIO",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2823: {",
          "2824:     return (X509_STORE_load_locations(ctx->cert_store, CAfile, CApath));",
          "2825: }",
          "2828: void SSL_set_info_callback(SSL *ssl,",
          "2829:                            void (*cb) (const SSL *ssl, int type, int val))",
          "",
          "[Removed Lines]",
          "2826: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_rsa.c||ssl/ssl_rsa.c": [
          "File: ssl/ssl_rsa.c -> ssl/ssl_rsa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "911:     return 1;",
          "912: }",
          "915: int SSL_CTX_use_serverinfo_file(SSL_CTX *ctx, const char *file)",
          "916: {",
          "917:     unsigned char *serverinfo = NULL;",
          "",
          "[Removed Lines]",
          "914: #ifndef OPENSSL_NO_STDIO",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: BIO_new_accept                          79 EXIST::FUNCTION:",
          "76: BIO_new_connect                         80 EXIST::FUNCTION:",
          "77: BIO_new_fd                              81 EXIST::FUNCTION:",
          "79: BIO_new_fp                              83 EXIST::FUNCTION:STDIO",
          "80: BIO_new_socket                          84 EXIST::FUNCTION:",
          "81: BIO_pop                                 85 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "78: BIO_new_file                            82 EXIST::FUNCTION:STDIO",
          "",
          "[Added Lines]",
          "78: BIO_new_file                            82 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86: BIO_s_accept                            90 EXIST::FUNCTION:",
          "87: BIO_s_connect                           91 EXIST::FUNCTION:",
          "88: BIO_s_fd                                92 EXIST::FUNCTION:",
          "90: BIO_s_mem                               95 EXIST::FUNCTION:",
          "91: BIO_s_null                              96 EXIST::FUNCTION:",
          "92: BIO_s_proxy_client                      97 NOEXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "89: BIO_s_file                              93 EXIST::FUNCTION:STDIO",
          "",
          "[Added Lines]",
          "89: BIO_s_file                              93 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "356: OBJ_obj2nid                             364 EXIST::FUNCTION:",
          "357: OBJ_sn2nid                              365 EXIST::FUNCTION:",
          "358: OBJ_txt2nid                             366 EXIST::FUNCTION:",
          "360: PEM_ASN1_read_bio                       368 EXIST::FUNCTION:",
          "362: PEM_ASN1_write_bio                      370 EXIST::FUNCTION:",
          "363: PEM_SealFinal                           371 EXIST::FUNCTION:RSA",
          "364: PEM_SealInit                            372 EXIST::FUNCTION:RSA",
          "",
          "[Removed Lines]",
          "359: PEM_ASN1_read                           367 EXIST::FUNCTION:",
          "361: PEM_ASN1_write                          369 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "359: PEM_ASN1_read                           367 EXIST::FUNCTION:STDIO",
          "361: PEM_ASN1_write                          369 EXIST::FUNCTION:STDIO",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "366: PEM_SignFinal                           374 EXIST::FUNCTION:",
          "367: PEM_SignInit                            375 EXIST::FUNCTION:",
          "368: PEM_SignUpdate                          376 EXIST::FUNCTION:",
          "370: PEM_X509_INFO_read_bio                  378 EXIST::FUNCTION:",
          "371: PEM_X509_INFO_write_bio                 379 EXIST::FUNCTION:",
          "372: PEM_dek_info                            380 EXIST::FUNCTION:",
          "373: PEM_do_header                           381 EXIST::FUNCTION:",
          "374: PEM_get_EVP_CIPHER_INFO                 382 EXIST::FUNCTION:",
          "375: PEM_proc_type                           383 EXIST::FUNCTION:",
          "377: PEM_read_DHparams                       385 EXIST::FUNCTION:DH",
          "378: PEM_read_DSAPrivateKey                  386 EXIST::FUNCTION:DSA",
          "379: PEM_read_DSAparams                      387 EXIST::FUNCTION:DSA",
          "",
          "[Removed Lines]",
          "369: PEM_X509_INFO_read                      377 EXIST::FUNCTION:",
          "376: PEM_read                                384 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "369: PEM_X509_INFO_read                      377 EXIST::FUNCTION:STDIO",
          "376: PEM_read                                384 EXIST::FUNCTION:STDIO",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "393: PEM_read_bio_X509                       401 EXIST::FUNCTION:",
          "394: PEM_read_bio_X509_CRL                   402 EXIST::FUNCTION:",
          "395: PEM_read_bio_X509_REQ                   403 EXIST::FUNCTION:",
          "397: PEM_write_DHparams                      405 EXIST::FUNCTION:DH",
          "398: PEM_write_DSAPrivateKey                 406 EXIST::FUNCTION:DSA",
          "399: PEM_write_DSAparams                     407 EXIST::FUNCTION:DSA",
          "",
          "[Removed Lines]",
          "396: PEM_write                               404 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "396: PEM_write                               404 EXIST::FUNCTION:STDIO",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "618: X509_STORE_add_lookup                   625 EXIST::FUNCTION:",
          "619: X509_STORE_free                         626 EXIST::FUNCTION:",
          "620: X509_STORE_get_by_subject               627 EXIST::FUNCTION:",
          "622: X509_STORE_new                          629 EXIST::FUNCTION:",
          "624: X509_VAL_free                           631 EXIST::FUNCTION:",
          "625: X509_VAL_new                            632 EXIST::FUNCTION:",
          "626: X509_add_ext                            633 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "621: X509_STORE_load_locations               628 EXIST::FUNCTION:STDIO",
          "623: X509_STORE_set_default_paths            630 EXIST::FUNCTION:STDIO",
          "",
          "[Added Lines]",
          "621: X509_STORE_load_locations               628 EXIST::FUNCTION:",
          "623: X509_STORE_set_default_paths            630 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "653: X509_issuer_and_serial_hash             660 EXIST::FUNCTION:",
          "654: X509_issuer_name_cmp                    661 EXIST::FUNCTION:",
          "655: X509_issuer_name_hash                   662 EXIST::FUNCTION:",
          "657: X509_new                                664 EXIST::FUNCTION:",
          "658: X509_print                              665 EXIST::FUNCTION:",
          "659: X509_print_fp                           666 EXIST::FUNCTION:STDIO",
          "",
          "[Removed Lines]",
          "656: X509_load_cert_file                     663 EXIST::FUNCTION:STDIO",
          "",
          "[Added Lines]",
          "656: X509_load_cert_file                     663 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "938: BIO_copy_next_retry                     955 EXIST::FUNCTION:",
          "939: RSA_flags                               956 EXIST::FUNCTION:RSA",
          "940: X509_STORE_add_crl                      957 EXIST::FUNCTION:",
          "942: EVP_rc2_40_cbc                          959 EXIST::FUNCTION:RC2",
          "943: EVP_rc4_40                              960 EXIST::FUNCTION:RC4",
          "944: EVP_CIPHER_CTX_init                     961 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "941: X509_load_crl_file                      958 EXIST::FUNCTION:STDIO",
          "",
          "[Added Lines]",
          "941: X509_load_crl_file                      958 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1154: X509V3_EXT_get                          1178 EXIST::FUNCTION:",
          "1155: X509V3_EXT_get_nid                      1179 EXIST::FUNCTION:",
          "1156: X509V3_EXT_print                        1180 EXIST::FUNCTION:",
          "1158: X509V3_add_standard_extensions          1182 EXIST::FUNCTION:",
          "1159: X509V3_add_value                        1183 EXIST::FUNCTION:",
          "1160: X509V3_add_value_bool                   1184 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "1157: X509V3_EXT_print_fp                     1181 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "1157: X509V3_EXT_print_fp                     1181 EXIST::FUNCTION:STDIO",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1451: PKCS5_PBKDF2_HMAC_SHA1                  1795 EXIST::FUNCTION:",
          "1452: PKCS5_v2_PBE_keyivgen                   1796 EXIST::FUNCTION:",
          "1453: PEM_write_bio_PKCS8PrivateKey           1797 EXIST::FUNCTION:",
          "1455: BIO_ctrl_get_read_request               1799 EXIST::FUNCTION:",
          "1456: BIO_ctrl_pending                        1800 EXIST::FUNCTION:",
          "1457: BIO_ctrl_wpending                       1801 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "1454: PEM_write_PKCS8PrivateKey               1798 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "1454: PEM_write_PKCS8PrivateKey               1798 EXIST::FUNCTION:STDIO",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1549: X509_STORE_CTX_free                     1969 EXIST::FUNCTION:",
          "1550: EVP_PKEY_set1_DSA                       1970 EXIST::FUNCTION:DSA",
          "1551: i2d_DSA_PUBKEY_fp                       1971 EXIST::FUNCTION:DSA,STDIO",
          "1553: ASN1_TIME_new                           1973 EXIST::FUNCTION:",
          "1554: i2d_RSA_PUBKEY                          1974 EXIST::FUNCTION:RSA",
          "1555: X509_STORE_CTX_purpose_inherit          1976 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "1552: X509_load_cert_crl_file                 1972 EXIST::FUNCTION:STDIO",
          "",
          "[Added Lines]",
          "1552: X509_load_cert_crl_file                 1972 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1687: CRYPTO_pop_info                         2162 EXIST::FUNCTION:",
          "1688: CRYPTO_push_info_                       2163 EXIST::FUNCTION:",
          "1689: CRYPTO_set_mem_debug_options            2164 EXIST::FUNCTION:",
          "1691: PEM_write_bio_PKCS8PrivateKey_nid       2166 EXIST:!VMS:FUNCTION:",
          "1692: PEM_write_bio_PKCS8PrivKey_nid          2166 EXIST:VMS:FUNCTION:",
          "1693: d2i_PKCS8PrivateKey_bio                 2167 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "1690: PEM_write_PKCS8PrivateKey_nid           2165 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "1690: PEM_write_PKCS8PrivateKey_nid           2165 EXIST::FUNCTION:STDIO",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1695: d2i_ASN1_NULL                           2169 EXIST::FUNCTION:",
          "1696: ASN1_NULL_new                           2170 EXIST::FUNCTION:",
          "1697: i2d_PKCS8PrivateKey_bio                 2171 EXIST::FUNCTION:",
          "1699: i2d_ASN1_NULL                           2173 EXIST::FUNCTION:",
          "1702: i2d_PKCS8PrivateKey_nid_bio             2176 EXIST::FUNCTION:",
          "1703: i2d_PKCS8PrivateKeyInfo_fp              2177 EXIST::FUNCTION:STDIO",
          "1704: i2d_PKCS8PrivateKeyInfo_bio             2178 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "1698: i2d_PKCS8PrivateKey_fp                  2172 EXIST::FUNCTION:",
          "1700: i2d_PKCS8PrivateKey_nid_fp              2174 EXIST::FUNCTION:",
          "1701: d2i_PKCS8PrivateKey_fp                  2175 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "1698: i2d_PKCS8PrivateKey_fp                  2172 EXIST::FUNCTION:STDIO",
          "1700: i2d_PKCS8PrivateKey_nid_fp              2174 EXIST::FUNCTION:STDIO",
          "1701: d2i_PKCS8PrivateKey_fp                  2175 EXIST::FUNCTION:STDIO",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1786: NCONF_get_string                        2280 EXIST::FUNCTION:",
          "1787: NCONF_free                              2281 EXIST::FUNCTION:",
          "1788: NCONF_get_number                        2282 NOEXIST::FUNCTION:",
          "1790: NCONF_load_bio                          2284 EXIST::FUNCTION:",
          "1792: NCONF_get_section                       2286 EXIST::FUNCTION:",
          "1793: NCONF_dump_bio                          2287 EXIST::FUNCTION:",
          "1794: CONF_dump_bio                           2288 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "1789: CONF_dump_fp                            2283 EXIST::FUNCTION:",
          "1791: NCONF_dump_fp                           2285 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "1789: CONF_dump_fp                            2283 EXIST::FUNCTION:STDIO",
          "1791: NCONF_dump_fp                           2285 EXIST::FUNCTION:STDIO",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3730: JPAKE_STEP2_init                        4113 EXIST::FUNCTION:JPAKE",
          "3731: pqueue_size                             4114 EXIST::FUNCTION:",
          "3732: i2d_TS_ACCURACY                         4115 EXIST::FUNCTION:",
          "3734: i2d_TS_MSG_IMPRINT                      4117 EXIST::FUNCTION:",
          "3735: EVP_PKEY_print_public                   4118 EXIST::FUNCTION:",
          "3736: EVP_PKEY_CTX_new                        4119 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3733: i2d_TS_MSG_IMPRINT_fp                   4116 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "3733: i2d_TS_MSG_IMPRINT_fp                   4116 EXIST::FUNCTION:STDIO",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3746: ENGINE_register_pkey_meths              4129 EXIST::FUNCTION:ENGINE",
          "3747: EVP_PKEY_asn1_add0                      4130 EXIST::FUNCTION:",
          "3748: PKCS7_add0_attrib_signing_time          4131 EXIST::FUNCTION:",
          "3750: BIO_asn1_get_prefix                     4133 EXIST::FUNCTION:",
          "3751: TS_TST_INFO_set_time                    4134 EXIST::FUNCTION:",
          "3752: EVP_PKEY_meth_set_decrypt               4135 EXIST::FUNCTION:",
          "3753: EVP_PKEY_set_type_str                   4136 EXIST::FUNCTION:",
          "3754: EVP_PKEY_CTX_get_keygen_info            4137 EXIST::FUNCTION:",
          "3755: TS_REQ_set_policy_id                    4138 EXIST::FUNCTION:",
          "3757: ENGINE_get_pkey_asn1_meth_engine        4140 EXIST:!VMS:FUNCTION:ENGINE",
          "3758: ENGINE_get_pkey_asn1_meth_eng           4140 EXIST:VMS:FUNCTION:ENGINE",
          "3759: WHIRLPOOL_Init                          4141 EXIST::FUNCTION:WHIRLPOOL",
          "",
          "[Removed Lines]",
          "3749: i2d_TS_TST_INFO_fp                      4132 EXIST::FUNCTION:",
          "3756: d2i_TS_RESP_fp                          4139 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "3749: i2d_TS_TST_INFO_fp                      4132 EXIST::FUNCTION:STDIO",
          "3756: d2i_TS_RESP_fp                          4139 EXIST::FUNCTION:STDIO",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3896: ASN1_PCTX_get_oid_flags                 4274 EXIST::FUNCTION:",
          "3897: TS_TST_INFO_add_ext                     4275 EXIST::FUNCTION:",
          "3898: EVP_PKEY_meth_set_derive                4276 EXIST::FUNCTION:",
          "3900: i2d_TS_MSG_IMPRINT_bio                  4278 EXIST::FUNCTION:",
          "3901: TS_RESP_CTX_set_accuracy                4279 EXIST::FUNCTION:",
          "3902: TS_REQ_set_nonce                        4280 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3899: i2d_TS_RESP_fp                          4277 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "3899: i2d_TS_RESP_fp                          4277 EXIST::FUNCTION:STDIO",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3925: X509_CRL_set_meth_data                  4303 EXIST::FUNCTION:",
          "3926: PKCS8_pkey_set0                         4304 EXIST::FUNCTION:",
          "3927: ASN1_STRING_copy                        4305 EXIST::FUNCTION:",
          "3929: X509_CRL_match                          4307 EXIST::FUNCTION:",
          "3930: EVP_PKEY_asn1_set_private               4308 EXIST::FUNCTION:",
          "3931: TS_TST_INFO_get_ext_d2i                 4309 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3928: d2i_TS_TST_INFO_fp                      4306 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "3928: d2i_TS_TST_INFO_fp                      4306 EXIST::FUNCTION:STDIO",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3968: CRYPTO_THREADID_set_callback            4346 EXIST::FUNCTION:",
          "3969: TS_CONF_set_serial                      4347 EXIST::FUNCTION:",
          "3970: TS_TST_INFO_free                        4348 EXIST::FUNCTION:",
          "3972: TS_RESP_verify_response                 4350 EXIST::FUNCTION:",
          "3973: i2d_ESS_ISSUER_SERIAL                   4351 EXIST::FUNCTION:",
          "3974: TS_ACCURACY_get_seconds                 4352 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3971: d2i_TS_REQ_fp                           4349 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "3971: d2i_TS_REQ_fp                           4349 EXIST::FUNCTION:STDIO",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "4055: EVP_PKEY_CTX_free                       4430 EXIST::FUNCTION:",
          "4056: ISSUING_DIST_POINT_it                   4431 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:",
          "4057: ISSUING_DIST_POINT_it                   4431 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:",
          "4059: X509_STORE_get1_certs                   4433 EXIST::FUNCTION:",
          "4060: EVP_PKEY_CTX_get_operation              4434 EXIST::FUNCTION:",
          "4061: d2i_ESS_SIGNING_CERT                    4435 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "4058: d2i_TS_MSG_IMPRINT_fp                   4432 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "4058: d2i_TS_MSG_IMPRINT_fp                   4432 EXIST::FUNCTION:STDIO",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "4135: GENERAL_NAME_cmp                        4506 EXIST::FUNCTION:",
          "4136: d2i_ASN1_SET_ANY                        4507 EXIST::FUNCTION:",
          "4137: ENGINE_set_pkey_meths                   4508 EXIST::FUNCTION:ENGINE",
          "4139: d2i_ASN1_SEQUENCE_ANY                   4510 EXIST::FUNCTION:",
          "4140: GENERAL_NAME_get0_otherName             4511 EXIST::FUNCTION:",
          "4141: d2i_ESS_CERT_ID                         4512 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "4138: i2d_TS_REQ_fp                           4509 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "4138: i2d_TS_REQ_fp                           4509 EXIST::FUNCTION:STDIO",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "4305: ASN1_item_sign_ctx                      4671 EXIST::FUNCTION:",
          "4306: EC_GFp_nistp521_method                  4672 EXIST:!WIN32:FUNCTION:EC,EC_NISTP_64_GCC_128",
          "4307: EC_GFp_nistp256_method                  4673 EXIST:!WIN32:FUNCTION:EC,EC_NISTP_64_GCC_128",
          "4309: OPENSSL_cpuid_setup                     4675 EXIST::FUNCTION:",
          "4310: OPENSSL_showfatal                       4676 EXIST::FUNCTION:",
          "4311: BIO_new_dgram_sctp                      4677 EXIST::FUNCTION:SCTP",
          "",
          "[Removed Lines]",
          "4308: OPENSSL_stderr                          4674 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "4308: OPENSSL_stderr                          4674 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "4615: TS_VERIFY_CTX_add_flags                 4974 EXIST::FUNCTION:",
          "4616: TS_STATUS_INFO_set_status               4975 EXIST::FUNCTION:",
          "4617: TS_VERIFY_CTX_set_store                 4976 EXIST::FUNCTION:",
          "4632: X509_get0_subject_key_id                4991 EXIST::FUNCTION:",
          "4633: i2d_re_X509_CRL_tbs                     4992 EXIST::FUNCTION:",
          "4634: X509_REQ_get_X509_PUBKEY                4993 EXIST::FUNCTION:",
          "4635: X509_REQ_get0_signature                 4994 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "4618: EVP_PKEY_meth_get_decrypt               4977 EXIST::FUNCTION:",
          "4619: EVP_PKEY_meth_get_derive                4978 EXIST::FUNCTION:",
          "4620: EVP_PKEY_meth_get_verify                4979 EXIST::FUNCTION:",
          "4621: EVP_PKEY_meth_get_ctrl                  4980 EXIST::FUNCTION:",
          "4622: EVP_PKEY_meth_get_verifyctx             4981 EXIST::FUNCTION:",
          "4623: EVP_PKEY_meth_get_paramgen              4982 EXIST::FUNCTION:",
          "4624: EVP_PKEY_meth_get_init                  4983 EXIST::FUNCTION:",
          "4625: EVP_PKEY_meth_get_cleanup               4984 EXIST::FUNCTION:",
          "4626: EVP_PKEY_meth_get_keygen                4985 EXIST::FUNCTION:",
          "4627: EVP_PKEY_meth_get_signctx               4986 EXIST::FUNCTION:",
          "4628: EVP_PKEY_meth_get_sign                  4987 EXIST::FUNCTION:",
          "4629: EVP_PKEY_meth_get_copy                  4988 EXIST::FUNCTION:",
          "4630: EVP_PKEY_meth_get_verify_recover        4989 EXIST::FUNCTION:",
          "4631: EVP_PKEY_meth_get_encrypt               4990 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "4618: EVP_PKEY_meth_get_signctx               4977 EXIST::FUNCTION:",
          "4619: EVP_PKEY_meth_get_paramgen              4978 EXIST::FUNCTION:",
          "4620: EVP_PKEY_meth_get_encrypt               4979 EXIST::FUNCTION:",
          "4621: EVP_PKEY_meth_get_keygen                4980 EXIST::FUNCTION:",
          "4622: EVP_PKEY_meth_get_verify_recover        4981 EXIST::FUNCTION:",
          "4623: EVP_PKEY_meth_get_cleanup               4982 EXIST::FUNCTION:",
          "4624: EVP_PKEY_meth_get_verify                4984 EXIST::FUNCTION:",
          "4625: EVP_PKEY_meth_get_init                  4985 EXIST::FUNCTION:",
          "4626: EVP_PKEY_meth_get_sign                  4986 EXIST::FUNCTION:",
          "4627: EVP_PKEY_meth_get_verifyctx             4987 EXIST::FUNCTION:",
          "4628: EVP_PKEY_meth_get_ctrl                  4988 EXIST::FUNCTION:",
          "4629: EVP_PKEY_meth_get_derive                4989 EXIST::FUNCTION:",
          "4630: EVP_PKEY_meth_get_decrypt               4990 EXIST::FUNCTION:",
          "4631: EVP_PKEY_meth_get_copy                  4991 EXIST::FUNCTION:",
          "4633: declare_dh_bn                           4992 EXIST::FUNCTION:DH",
          "",
          "---------------"
        ],
        "util/ssleay.num||util/ssleay.num": [
          "File: util/ssleay.num -> util/ssleay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: SSL_CTX_set_verify                      21 EXIST::FUNCTION:",
          "19: SSL_CTX_use_PrivateKey                  22 EXIST::FUNCTION:",
          "20: SSL_CTX_use_PrivateKey_ASN1             23 EXIST::FUNCTION:",
          "22: SSL_CTX_use_RSAPrivateKey               25 EXIST::FUNCTION:RSA",
          "23: SSL_CTX_use_RSAPrivateKey_ASN1          26 EXIST::FUNCTION:RSA",
          "25: SSL_CTX_use_certificate                 28 EXIST::FUNCTION:",
          "26: SSL_CTX_use_certificate_ASN1            29 EXIST::FUNCTION:",
          "28: SSL_SESSION_free                        31 EXIST::FUNCTION:",
          "29: SSL_SESSION_new                         32 EXIST::FUNCTION:",
          "30: SSL_SESSION_print                       33 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "21: SSL_CTX_use_PrivateKey_file             24 EXIST::FUNCTION:STDIO",
          "24: SSL_CTX_use_RSAPrivateKey_file          27 EXIST::FUNCTION:RSA,STDIO",
          "27: SSL_CTX_use_certificate_file            30 EXIST::FUNCTION:STDIO",
          "",
          "[Added Lines]",
          "21: SSL_CTX_use_PrivateKey_file             24 EXIST::FUNCTION:",
          "24: SSL_CTX_use_RSAPrivateKey_file          27 EXIST::FUNCTION:RSA",
          "27: SSL_CTX_use_certificate_file            30 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60: SSL_get_verify_mode                     70 EXIST::FUNCTION:",
          "61: SSL_get_version                         71 EXIST::FUNCTION:",
          "62: SSL_get_wbio                            72 EXIST::FUNCTION:",
          "64: SSL_load_error_strings                  74 EXIST::FUNCTION:",
          "65: SSL_new                                 75 EXIST::FUNCTION:",
          "66: SSL_peek                                76 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "63: SSL_load_client_CA_file                 73 EXIST::FUNCTION:STDIO",
          "",
          "[Added Lines]",
          "63: SSL_load_client_CA_file                 73 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86: SSL_state_string_long                   98 EXIST::FUNCTION:",
          "87: SSL_use_PrivateKey                      99 EXIST::FUNCTION:",
          "88: SSL_use_PrivateKey_ASN1                 100 EXIST::FUNCTION:",
          "90: SSL_use_RSAPrivateKey                   102 EXIST::FUNCTION:RSA",
          "91: SSL_use_RSAPrivateKey_ASN1              103 EXIST::FUNCTION:RSA",
          "93: SSL_use_certificate                     105 EXIST::FUNCTION:",
          "94: SSL_use_certificate_ASN1                106 EXIST::FUNCTION:",
          "96: SSL_write                               108 EXIST::FUNCTION:",
          "97: SSLeay_add_ssl_algorithms               109 NOEXIST::FUNCTION:",
          "98: SSLv23_client_method                    110 NOEXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "89: SSL_use_PrivateKey_file                 101 EXIST::FUNCTION:STDIO",
          "92: SSL_use_RSAPrivateKey_file              104 EXIST::FUNCTION:RSA,STDIO",
          "95: SSL_use_certificate_file                107 EXIST::FUNCTION:STDIO",
          "",
          "[Added Lines]",
          "89: SSL_use_PrivateKey_file                 101 EXIST::FUNCTION:",
          "92: SSL_use_RSAPrivateKey_file              104 EXIST::FUNCTION:RSA",
          "95: SSL_use_certificate_file                107 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "165: SSL_want                                182 EXIST::FUNCTION:",
          "166: SSL_library_init                        183 EXIST::FUNCTION:",
          "167: SSL_COMP_add_compression_method         184 EXIST::FUNCTION:",
          "170: SSL_set_tmp_rsa_callback                186 EXIST::FUNCTION:RSA",
          "171: SSL_set_tmp_dh_callback                 187 EXIST::FUNCTION:DH",
          "174: SSL_set_session_id_context              189 EXIST::FUNCTION:",
          "177: SSL_CTX_set_verify_depth                225 EXIST::FUNCTION:",
          "178: SSL_set_verify_depth                    226 EXIST::FUNCTION:",
          "179: SSL_CTX_get_verify_depth                228 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "168: SSL_add_file_cert_subjects_to_stack     185 EXIST:!VMS:FUNCTION:STDIO",
          "169: SSL_add_file_cert_subjs_to_stk          185 EXIST:VMS:FUNCTION:STDIO",
          "172: SSL_add_dir_cert_subjects_to_stack      188 EXIST:!VMS:FUNCTION:STDIO",
          "173: SSL_add_dir_cert_subjs_to_stk           188 EXIST:VMS:FUNCTION:STDIO",
          "175: SSL_CTX_use_certificate_chain_file      222 EXIST:!VMS:FUNCTION:STDIO",
          "176: SSL_CTX_use_cert_chain_file             222 EXIST:VMS:FUNCTION:STDIO",
          "",
          "[Added Lines]",
          "168: SSL_add_file_cert_subjects_to_stack     185 EXIST:!VMS:FUNCTION:",
          "169: SSL_add_file_cert_subjs_to_stk          185 EXIST:VMS:FUNCTION:",
          "172: SSL_add_dir_cert_subjects_to_stack      188 EXIST:!VMS:FUNCTION:",
          "173: SSL_add_dir_cert_subjs_to_stk           188 EXIST:VMS:FUNCTION:",
          "175: SSL_CTX_use_certificate_chain_file      222 EXIST:!VMS:FUNCTION:",
          "176: SSL_CTX_use_cert_chain_file             222 EXIST:VMS:FUNCTION:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "365: SSL_CTX_set_cli_supp_data               403 NOEXIST::FUNCTION:",
          "366: DTLSv1_2_method                         404 EXIST::FUNCTION:",
          "367: DTLS_server_method                      405 EXIST::FUNCTION:",
          "369: SSL_COMP_free_compress_methods          407 NOEXIST::FUNCTION:",
          "370: SSL_COMP_free_compression_methods       407 EXIST:!VMS:FUNCTION:",
          "371: SSL_COMP_free_compr_methods             407 EXIST:VMS:FUNCTION:",
          "",
          "[Removed Lines]",
          "368: SSL_CTX_use_serverinfo_file             406 EXIST::FUNCTION:STDIO",
          "",
          "[Added Lines]",
          "368: SSL_CTX_use_serverinfo_file             406 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "395: SSL_set_rbio                            430 EXIST::FUNCTION:",
          "396: SSL_CIPHER_get_digest_nid               431 EXIST::FUNCTION:",
          "397: SSL_CIPHER_get_cipher_nid               432 EXIST::FUNCTION:",
          "399: TLS_server_method                       434 EXIST::FUNCTION:",
          "400: TLS_method                              435 EXIST::FUNCTION:",
          "401: TLS_client_method                       436 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "398: SSL_use_certificate_chain_file          433 EXIST::FUNCTION:STDIO",
          "",
          "[Added Lines]",
          "398: SSL_use_certificate_chain_file          433 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e3f0c988fabf60b65f7109b7f47daec0fde9c39",
      "candidate_info": {
        "commit_hash": "8e3f0c988fabf60b65f7109b7f47daec0fde9c39",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8e3f0c988fabf60b65f7109b7f47daec0fde9c39",
        "files": [
          "util/libeay.num"
        ],
        "message": "update ordinals\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "1837: CRYPTO_get_dynlock_value                2419 EXIST::FUNCTION:",
          "1838: CRYPTO_get_dynlock_create_callback      2420 EXIST:!VMS:FUNCTION:",
          "1839: CRYPTO_get_dynlock_create_cb            2420 EXIST:VMS:FUNCTION:",
          "1842: RAND_poll                               2423 EXIST::FUNCTION:",
          "1845: BIO_dump_indent                         2426 EXIST::FUNCTION:",
          "1846: ASN1_parse_dump                         2427 EXIST::FUNCTION:",
          "1848: X509_NAME_print_ex_fp                   2429 EXIST::FUNCTION:STDIO",
          "1849: ASN1_STRING_print_ex_fp                 2430 EXIST::FUNCTION:STDIO",
          "1850: X509_NAME_print_ex                      2431 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "1840: c2i_ASN1_BIT_STRING                     2421 EXIST::FUNCTION:",
          "1841: i2c_ASN1_BIT_STRING                     2422 EXIST::FUNCTION:",
          "1843: c2i_ASN1_INTEGER                        2424 EXIST::FUNCTION:",
          "1844: i2c_ASN1_INTEGER                        2425 EXIST::FUNCTION:",
          "1847: c2i_ASN1_OBJECT                         2428 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "1840: c2i_ASN1_BIT_STRING                     2421 NOEXIST::FUNCTION:",
          "1841: i2c_ASN1_BIT_STRING                     2422 NOEXIST::FUNCTION:",
          "1843: c2i_ASN1_INTEGER                        2424 NOEXIST::FUNCTION:",
          "1844: i2c_ASN1_INTEGER                        2425 NOEXIST::FUNCTION:",
          "1847: c2i_ASN1_OBJECT                         2428 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2012: _shadow_DES_rw_mode                     2581 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:DES",
          "2013: _shadow_DES_rw_mode                     2581 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:DES",
          "2014: asn1_do_adb                             2582 NOEXIST::FUNCTION:",
          "2016: ENGINE_register_DH                      2584 EXIST::FUNCTION:ENGINE",
          "2017: UI_construct_prompt                     2585 EXIST::FUNCTION:",
          "2018: X509_STORE_set_trust                    2586 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "2015: ASN1_template_i2d                       2583 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "2015: ASN1_template_i2d                       2583 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2349: UI_destroy_method                       2857 EXIST::FUNCTION:",
          "2350: ASN1_item_i2d_bio                       2858 EXIST::FUNCTION:",
          "2351: OCSP_ONEREQ_get_ext_by_OBJ              2859 EXIST::FUNCTION:",
          "2353: ASN1_PRINTABLE_it                       2861 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:",
          "2354: ASN1_PRINTABLE_it                       2861 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:",
          "2355: EVP_aes_192_ecb                         2862 EXIST::FUNCTION:AES",
          "",
          "[Removed Lines]",
          "2352: ASN1_primitive_new                      2860 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "2352: ASN1_primitive_new                      2860 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2482: PKCS12_BAGS_it                          2972 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:",
          "2483: PKCS12_BAGS_it                          2972 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:",
          "2484: OCSP_url_svcloc_new                     2973 EXIST::FUNCTION:",
          "2486: OCSP_SINGLERESP_add_ext                 2975 EXIST::FUNCTION:",
          "2487: KRB5_AUTHENTBODY_it                     2976 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:",
          "2488: KRB5_AUTHENTBODY_it                     2976 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:",
          "",
          "[Removed Lines]",
          "2485: ASN1_template_free                      2974 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "2485: ASN1_template_free                      2974 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2497: KRB5_APREQ_new                          2984 EXIST::FUNCTION:",
          "2498: EC_GROUP_get_curve_GFp                  2985 EXIST::FUNCTION:EC",
          "2499: KRB5_ENCKEY_new                         2986 EXIST::FUNCTION:",
          "2501: _ossl_old_des_quad_cksum                2988 NOEXIST::FUNCTION:",
          "2502: OCSP_single_get0_status                 2989 EXIST::FUNCTION:",
          "2503: BN_swap                                 2990 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "2500: ASN1_template_d2i                       2987 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "2500: ASN1_template_d2i                       2987 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2574: OCSP_basic_verify                       3048 EXIST::FUNCTION:",
          "2575: KRB5_AUTHENTBODY_free                   3049 EXIST::FUNCTION:",
          "2576: ASN1_item_d2i                           3050 EXIST::FUNCTION:",
          "2578: i2d_EXTENDED_KEY_USAGE                  3052 EXIST::FUNCTION:",
          "2579: i2d_OCSP_SIGNATURE                      3053 EXIST::FUNCTION:",
          "2580: asn1_enc_save                           3054 NOEXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "2577: ASN1_primitive_free                     3051 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "2577: ASN1_primitive_free                     3051 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2623: ASN1_OCTET_STRING_it                    3090 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:",
          "2624: ERR_load_UI_strings                     3091 EXIST::FUNCTION:",
          "2625: i2d_KRB5_ENCKEY                         3092 EXIST::FUNCTION:",
          "2627: OCSP_SIGNATURE_free                     3094 EXIST::FUNCTION:",
          "2628: ASN1_item_i2d_fp                        3095 EXIST::FUNCTION:STDIO",
          "2629: KRB5_PRINCNAME_free                     3096 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "2626: ASN1_template_new                       3093 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "2626: ASN1_template_new                       3093 NOEXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6073e27ebdbab63bf0add13fa0f66dcaa6e39e8",
      "candidate_info": {
        "commit_hash": "d6073e27ebdbab63bf0add13fa0f66dcaa6e39e8",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d6073e27ebdbab63bf0add13fa0f66dcaa6e39e8",
        "files": [
          "apps/ca.c",
          "apps/s_client.c",
          "apps/s_server.c",
          "apps/speed.c"
        ],
        "message": "Small nits and cleanups\n\nusing util/openssl-format-source on s_derver, s_client, ca.c, speed.c only...\n\nFix/merge some #ifndef\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "apps/ca.c||apps/ca.c",
          "apps/s_client.c||apps/s_client.c",
          "apps/s_server.c||apps/s_server.c",
          "apps/speed.c||apps/speed.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "apps/s_server.c||apps/s_server.c"
          ],
          "candidate": [
            "apps/s_server.c||apps/s_server.c"
          ]
        }
      },
      "candidate_diff": {
        "apps/ca.c||apps/ca.c": [
          "File: apps/ca.c -> apps/ca.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:     {\"subj\", OPT_SUBJ, 's', \"Use arg instead of request's subject\"},",
          "161:     {\"utf8\", OPT_UTF8, '-', \"Input characters are UTF8 (default ASCII)\"},",
          "162:     {\"create_serial\", OPT_CREATE_SERIAL, '-',",
          "164:     {\"multivalue-rdn\", OPT_MULTIVALUE_RDN, '-',",
          "165:      \"Enable support for multivalued RDNs\"},",
          "166:     {\"startdate\", OPT_STARTDATE, 's', \"Cert notBefore, YYMMDDHHMMSSZ\"},",
          "",
          "[Removed Lines]",
          "163:     \"If reading serial fails, create a new random serial\"},",
          "",
          "[Added Lines]",
          "163:      \"If reading serial fails, create a new random serial\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "499:     if (ser_status) {",
          "500:         dbfile = lookup_conf(conf, section, ENV_DATABASE);",
          "502:             goto end;",
          "504:         db = load_index(dbfile, &db_attr);",
          "",
          "[Removed Lines]",
          "501:         if (dbfile  == NULL)",
          "",
          "[Added Lines]",
          "501:         if (dbfile == NULL)",
          "",
          "---------------"
        ],
        "apps/s_client.c||apps/s_client.c": [
          "File: apps/s_client.c -> apps/s_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "392: {",
          "393:     unsigned char **out = (unsigned char **)result;",
          "394:     const char *in = *inptr;",
          "396:     unsigned char *cp = ret;",
          "397:     uint8_t byte;",
          "398:     int nibble = 0;",
          "",
          "[Removed Lines]",
          "395:     unsigned char *ret = app_malloc(strlen(in)/2, \"hexdecode\");",
          "",
          "[Added Lines]",
          "394:     unsigned char *ret = app_malloc(strlen(in) / 2, \"hexdecode\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "542:     OPT_SSL3, OPT_SSL_CONFIG,",
          "543:     OPT_TLS1_2, OPT_TLS1_1, OPT_TLS1, OPT_DTLS, OPT_DTLS1,",
          "544:     OPT_DTLS1_2, OPT_TIMEOUT, OPT_MTU, OPT_KEYFORM, OPT_PASS,",
          "546:     OPT_KEY, OPT_RECONNECT, OPT_BUILD_CHAIN, OPT_CAFILE, OPT_NOCAFILE,",
          "547:     OPT_CHAINCAFILE, OPT_VERIFYCAFILE, OPT_NEXTPROTONEG, OPT_ALPN,",
          "548:     OPT_SERVERINFO, OPT_STARTTLS, OPT_SERVERNAME,",
          "",
          "[Removed Lines]",
          "545:     OPT_CERT_CHAIN, OPT_CAPATH, OPT_NOCAPATH, OPT_CHAINCAPATH, OPT_VERIFYCAPATH,",
          "",
          "[Added Lines]",
          "544:     OPT_CERT_CHAIN, OPT_CAPATH, OPT_NOCAPATH, OPT_CHAINCAPATH,",
          "545:         OPT_VERIFYCAPATH,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "889:         if (connect_type == use_unix && IS_INET_FLAG(o)) {",
          "890:             BIO_printf(bio_err,",
          "893:             goto end;",
          "894:         }",
          "895:         if (connect_type == use_inet && IS_UNIX_FLAG(o)) {",
          "896:             BIO_printf(bio_err,",
          "899:             goto end;",
          "900:         }",
          "",
          "[Removed Lines]",
          "891:                 \"%s: Intermixed protocol flags (unix and internet domains)\\n\",",
          "892:                 prog);",
          "897:                 \"%s: Intermixed protocol flags (internet and unix domains)\\n\",",
          "898:                 prog);",
          "",
          "[Added Lines]",
          "891:                        \"%s: Intermixed protocol flags (unix and internet domains)\\n\",",
          "892:                        prog);",
          "897:                        \"%s: Intermixed protocol flags (internet and unix domains)\\n\",",
          "898:                        prog);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "906:         if (IS_NO_PROT_FLAG(o))",
          "907:             no_prot_opt++;",
          "908:         if (prot_opt == 1 && no_prot_opt) {",
          "911:             goto end;",
          "912:         }",
          "",
          "[Removed Lines]",
          "909:             BIO_printf(bio_err, \"Cannot supply both a protocol flag and \"",
          "910:                                 \"\\\"-no_<prot>\\\"\\n\");",
          "",
          "[Added Lines]",
          "909:             BIO_printf(bio_err,",
          "910:                        \"Cannot supply both a protocol flag and '-no_<prot>'\\n\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1335:         if (tmp_port != port)",
          "1336:             OPENSSL_free(tmp_port);",
          "1337:         if (!res) {",
          "1340:             goto end;",
          "1341:         }",
          "1342:     } else {",
          "",
          "[Removed Lines]",
          "1338:             BIO_printf(bio_err, \"%s: -proxy argument malformed or ambiguous\\n\",",
          "1339:                        prog);",
          "",
          "[Added Lines]",
          "1338:             BIO_printf(bio_err,",
          "1339:                        \"%s: -proxy argument malformed or ambiguous\\n\", prog);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1475:         if (SSL_CTX_config(ctx, ssl_config) == 0) {",
          "1476:             BIO_printf(bio_err, \"Error using configuration \\\"%s\\\"\\n\",",
          "1477:                        ssl_config);",
          "1480:         }",
          "1481:     }",
          "",
          "[Removed Lines]",
          "1478:         ERR_print_errors(bio_err);",
          "1479:         goto end;",
          "",
          "[Added Lines]",
          "1478:             ERR_print_errors(bio_err);",
          "1479:             goto end;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1529: #ifndef OPENSSL_NO_PSK",
          "1530:     if (psk_key != NULL) {",
          "1531:         if (c_debug)",
          "1534:         SSL_CTX_set_psk_client_callback(ctx, psk_client_cb);",
          "1535:     }",
          "1536: #endif",
          "",
          "[Removed Lines]",
          "1532:             BIO_printf(bio_c_out,",
          "1533:                        \"PSK key given, setting client callback\\n\");",
          "",
          "[Added Lines]",
          "1532:             BIO_printf(bio_c_out, \"PSK key given, setting client callback\\n\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1562:         }",
          "1564:         if (SSL_CTX_set_alpn_protos(ctx, alpn, alpn_len) != 0) {",
          "1566:             goto end;",
          "1567:         }",
          "1568:         OPENSSL_free(alpn);",
          "",
          "[Removed Lines]",
          "1565:            BIO_printf(bio_err, \"Error setting ALPN\\n\");",
          "",
          "[Added Lines]",
          "1564:             BIO_printf(bio_err, \"Error setting ALPN\\n\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1574:                                            NULL, NULL, NULL,",
          "1575:                                            serverinfo_cli_parse_cb, NULL)) {",
          "1576:             BIO_printf(bio_err,",
          "1579:         }",
          "1580:     }",
          "",
          "[Removed Lines]",
          "1577:                     \"Warning: Unable to add custom extension %u, skipping\\n\",",
          "1578:                     serverinfo_types[i]);",
          "",
          "[Added Lines]",
          "1576:                        \"Warning: Unable to add custom extension %u, skipping\\n\",",
          "1577:                        serverinfo_types[i]);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1643:     if (dane_tlsa_domain != NULL) {",
          "1644:         if (SSL_CTX_dane_enable(ctx) <= 0) {",
          "1645:             BIO_printf(bio_err,",
          "1647:             ERR_print_errors(bio_err);",
          "1648:             goto end;",
          "1649:         }",
          "",
          "[Removed Lines]",
          "1646:                        \"%s: Error enabling DANE TLSA authentication.\\n\", prog);",
          "",
          "[Added Lines]",
          "1645:                        \"%s: Error enabling DANE TLSA authentication.\\n\",",
          "1646:                        prog);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1708:     }",
          "1710:  re_start:",
          "1713:         BIO_printf(bio_err, \"connect:errno=%d\\n\", get_last_socket_error());",
          "1714:         BIO_closesocket(s);",
          "1715:         goto end;",
          "",
          "[Removed Lines]",
          "1711:     if (init_client(&s, host, port, socket_family, socket_type) == 0)",
          "1712:     {",
          "",
          "[Added Lines]",
          "1711:     if (init_client(&s, host, port, socket_family, socket_type) == 0) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2573: #endif",
          "2575:         BIO_printf(bio,",
          "2577:                    BIO_number_read(SSL_get_rbio(s)),",
          "2578:                    BIO_number_written(SSL_get_wbio(s)));",
          "2579:     }",
          "",
          "[Removed Lines]",
          "2576:                    \"---\\nSSL handshake has read %\"PRIu64\" bytes and written %\"PRIu64\" bytes\\n\",",
          "",
          "[Added Lines]",
          "2575:                    \"---\\nSSL handshake has read %\" PRIu64",
          "2576:                    \" bytes and written %\" PRIu64 \" bytes\\n\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2650: #endif",
          "2652:     SSL_SESSION_print(bio, SSL_get_session(s));",
          "2655:         BIO_printf(bio, \"Keying material exporter:\\n\");",
          "2656:         BIO_printf(bio, \"    Label: '%s'\\n\", keymatexportlabel);",
          "2657:         BIO_printf(bio, \"    Length: %i bytes\\n\", keymatexportlen);",
          "",
          "[Removed Lines]",
          "2653:     if ((SSL_get_session(s) != NULL) &&",
          "2654:         (keymatexportlabel != NULL)) {",
          "",
          "[Added Lines]",
          "2653:     if (SSL_get_session(s) != NULL && keymatexportlabel != NULL) {",
          "",
          "---------------"
        ],
        "apps/s_server.c||apps/s_server.c": [
          "File: apps/s_server.c -> apps/s_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111: static int accept_socket = -1;",
          "113: #define TEST_CERT       \"server.pem\"",
          "",
          "[Removed Lines]",
          "110: static const int bufsize = 16*1024;",
          "",
          "[Added Lines]",
          "110: static const int bufsize = 16 * 1024;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246:                p->login, p->user->info);",
          "247:     ret = SSL_ERROR_NONE;",
          "250:     SRP_user_pwd_free(p->user);",
          "251:     p->user = NULL;",
          "252:     p->login = NULL;",
          "",
          "[Removed Lines]",
          "249: err:",
          "",
          "[Added Lines]",
          "249:  err:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "280: {",
          "281:     if (methods_ebcdic == NULL) {",
          "282:         methods_ebcdic = BIO_meth_new(BIO_TYPE_EBCDIC_FILTER,",
          "285:             || !BIO_meth_set_write(methods_ebcdic, ebcdic_write)",
          "286:             || !BIO_meth_set_read(methods_ebcdic, ebcdic_read)",
          "287:             || !BIO_meth_set_puts(methods_ebcdic, ebcdic_puts)",
          "",
          "[Removed Lines]",
          "283:             \"EBCDIC/ASCII filter\");",
          "284:         if (   methods_ebcdic == NULL",
          "",
          "[Added Lines]",
          "283:                                       \"EBCDIC/ASCII filter\");",
          "284:         if (methods_ebcdic == NULL",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "769:     {\"no_cache\", OPT_NO_CACHE, '-', \"Disable session cache\"},",
          "770:     {\"ext_cache\", OPT_EXT_CACHE, '-',",
          "771:      \"Disable internal cache, setup and use external cache\"},",
          "773:     {\"verify_return_error\", OPT_VERIFY_RET_ERROR, '-',",
          "774:      \"Close connection on verification error\"},",
          "775:     {\"verify_quiet\", OPT_VERIFY_QUIET, '-',",
          "",
          "[Removed Lines]",
          "772:     {\"CRLform\", OPT_CRLFORM, 'F', \"CRL format (PEM or DER) PEM is default\" },",
          "",
          "[Added Lines]",
          "772:     {\"CRLform\", OPT_CRLFORM, 'F', \"CRL format (PEM or DER) PEM is default\"},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "796:      \"Print output from SSL/TLS security framework\"},",
          "797:     {\"security_debug_verbose\", OPT_SECURITY_DEBUG_VERBOSE, '-',",
          "798:      \"Print more output from SSL/TLS security framework\"},",
          "800:      \"Restrict output to brief summary of connection parameters\"},",
          "801:     {\"rev\", OPT_REV, '-',",
          "802:      \"act as a simple test server which just sends back with the received text reversed\"},",
          "803:     {\"async\", OPT_ASYNC, '-', \"Operate in asynchronous mode\"},",
          "805:      \"Configure SSL_CTX using the configuration 'val'\"},",
          "806:     {\"split_send_frag\", OPT_SPLIT_SEND_FRAG, 'n',",
          "807:      \"Size used to split data for encrypt pipelines\"},",
          "",
          "[Removed Lines]",
          "799:     {\"brief\", OPT_BRIEF, '-', \\",
          "804:     {\"ssl_config\", OPT_SSL_CONFIG, 's', \\",
          "",
          "[Added Lines]",
          "799:     {\"brief\", OPT_BRIEF, '-',",
          "804:     {\"ssl_config\", OPT_SSL_CONFIG, 's',",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "954:     vpm = X509_VERIFY_PARAM_new();",
          "955:     if (cctx == NULL || vpm == NULL)",
          "956:         goto end;",
          "959:     prog = opt_init(argc, argv, s_server_options);",
          "960:     while ((o = opt_next()) != OPT_EOF) {",
          "",
          "[Removed Lines]",
          "957:     SSL_CONF_CTX_set_flags(cctx, SSL_CONF_FLAG_SERVER | SSL_CONF_FLAG_CMDLINE);",
          "",
          "[Added Lines]",
          "957:     SSL_CONF_CTX_set_flags(cctx,",
          "958:                            SSL_CONF_FLAG_SERVER | SSL_CONF_FLAG_CMDLINE);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "965:         if (IS_NO_PROT_FLAG(o))",
          "966:             no_prot_opt++;",
          "967:         if (prot_opt == 1 && no_prot_opt) {",
          "970:             goto end;",
          "971:         }",
          "972:         switch (o) {",
          "",
          "[Removed Lines]",
          "968:             BIO_printf(bio_err, \"Cannot supply both a protocol flag and \"",
          "969:                                 \"\\\"-no_<prot>\\\"\\n\");",
          "",
          "[Added Lines]",
          "969:             BIO_printf(bio_err,",
          "970:                        \"Cannot supply both a protocol flag and '-no_<prot>'\\n\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1613:         if (SSL_CTX_config(ctx, ssl_config) == 0) {",
          "1614:             BIO_printf(bio_err, \"Error using configuration \\\"%s\\\"\\n\",",
          "1615:                        ssl_config);",
          "1618:         }",
          "1619:     }",
          "1620:     if (SSL_CTX_set_min_proto_version(ctx, min_version) == 0)",
          "",
          "[Removed Lines]",
          "1616:         ERR_print_errors(bio_err);",
          "1617:         goto end;",
          "",
          "[Added Lines]",
          "1617:             ERR_print_errors(bio_err);",
          "1618:             goto end;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1834: #ifndef OPENSSL_NO_PSK",
          "1835:     if (psk_key != NULL) {",
          "1836:         if (s_debug)",
          "1839:         SSL_CTX_set_psk_server_callback(ctx, psk_server_cb);",
          "1840:     }",
          "",
          "[Removed Lines]",
          "1837:             BIO_printf(bio_s_out,",
          "1838:                        \"PSK key given, setting server callback\\n\");",
          "",
          "[Added Lines]",
          "1837:             BIO_printf(bio_s_out, \"PSK key given, setting server callback\\n\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1849:     SSL_CTX_set_verify(ctx, s_server_verify, verify_callback);",
          "1850:     if (!SSL_CTX_set_session_id_context(ctx,",
          "1853:         BIO_printf(bio_err, \"error setting session id context\\n\");",
          "1854:         ERR_print_errors(bio_err);",
          "1855:         goto end;",
          "",
          "[Removed Lines]",
          "1851:                 (void *)&s_server_session_id_context,",
          "1852:                 sizeof s_server_session_id_context)) {",
          "",
          "[Added Lines]",
          "1850:                                         (void *)&s_server_session_id_context,",
          "1851:                                         sizeof s_server_session_id_context)) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2026:         }",
          "2028:         if (context",
          "2031:             BIO_printf(bio_err, \"Error setting session id context\\n\");",
          "2032:             ret = -1;",
          "2033:             goto err;",
          "",
          "[Removed Lines]",
          "2029:                 && !SSL_set_session_id_context(con,",
          "2030:                         context, strlen((char *)context))) {",
          "",
          "[Added Lines]",
          "2028:             && !SSL_set_session_id_context(con,",
          "2029:                                            context, strlen((char *)context))) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2465:             retry = BIO_sock_should_retry(i);",
          "2466: #ifdef CERT_CB_TEST_RETRY",
          "2467:         {",
          "2469:                     && SSL_get_state(con) == TLS_ST_SR_CLNT_HELLO) {",
          "2470:                 BIO_printf(bio_err,",
          "2472:                 i = SSL_accept(con);",
          "2473:                 if (i <= 0)",
          "2474:                     retry = BIO_sock_should_retry(i);",
          "",
          "[Removed Lines]",
          "2468:             while (i <= 0 && SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP",
          "2471:                        \"LOOKUP from certificate callback during accept\\n\");",
          "",
          "[Added Lines]",
          "2467:             while (i <= 0",
          "2468:                     && SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP",
          "2471:                            \"LOOKUP from certificate callback during accept\\n\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2477: #endif",
          "2479: #ifndef OPENSSL_NO_SRP",
          "2481:             BIO_printf(bio_s_out, \"LOOKUP during accept %s\\n\",",
          "2482:                        srp_callback_parm.login);",
          "2483:             SRP_user_pwd_free(srp_callback_parm.user);",
          "",
          "[Removed Lines]",
          "2480:         while (i <= 0 && SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
          "",
          "[Added Lines]",
          "2480:         while (i <= 0",
          "2481:                && SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2584:         OPENSSL_free(exportedkeymat);",
          "2585:     }",
          "2588:     return (1);",
          "2589: }",
          "",
          "[Removed Lines]",
          "2587:  (void)BIO_flush(bio_s_out);",
          "",
          "[Added Lines]",
          "2588:     (void)BIO_flush(bio_s_out);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2645:         SSL_set_tlsext_debug_arg(con, bio_s_out);",
          "2646:     }",
          "2650:         goto err;",
          "2652:     sbio = BIO_new_socket(s, BIO_NOCLOSE);",
          "",
          "[Removed Lines]",
          "2648:     if (context && !SSL_set_session_id_context(con, context,",
          "2649:                         strlen((char *)context)))",
          "",
          "[Added Lines]",
          "2649:     if (context",
          "2650:         && !SSL_set_session_id_context(con, context,",
          "2651:                                        strlen((char *)context)))",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2743:                 openssl_fdset(s, &readfds);",
          "2744:                 i = select(width, (void *)&readfds, NULL, NULL, NULL);",
          "2745:                 if (i <= 0 || !FD_ISSET(s, &readfds)) {",
          "2747:                     ERR_print_errors(bio_err);",
          "2748:                     goto err;",
          "2749:                 }",
          "",
          "[Removed Lines]",
          "2746:                     BIO_printf(bio_s_out, \"Error waiting for client response\\n\");",
          "",
          "[Added Lines]",
          "2748:                     BIO_printf(bio_s_out,",
          "2749:                                \"Error waiting for client response\\n\");",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2949: #endif",
          "2950:                     k = BIO_write(io, &(buf[j]), i - j);",
          "2951:                     if (k <= 0) {",
          "2953:                             goto write_error;",
          "2954:                         else {",
          "2955:                             BIO_printf(bio_s_out, \"rwrite W BLOCK\\n\");",
          "",
          "[Removed Lines]",
          "2952:                         if (!BIO_should_retry(io)  && !SSL_waiting_for_async(con))",
          "",
          "[Added Lines]",
          "2955:                         if (!BIO_should_retry(io)",
          "2956:                             && !SSL_waiting_for_async(con))",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3010:         SSL_set_tlsext_debug_callback(con, tlsext_cb);",
          "3011:         SSL_set_tlsext_debug_arg(con, bio_s_out);",
          "3012:     }",
          "3015:         ERR_print_errors(bio_err);",
          "3016:         goto err;",
          "3017:     }",
          "",
          "[Removed Lines]",
          "3013:     if (context",
          "3014:         && !SSL_set_session_id_context(con, context, strlen((char *)context))) {",
          "",
          "[Added Lines]",
          "3017:     if (context",
          "3018:         && !SSL_set_session_id_context(con, context,",
          "3019:                                        strlen((char *)context))) {",
          "",
          "---------------"
        ],
        "apps/speed.c||apps/speed.c": [
          "File: apps/speed.c -> apps/speed.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "348: static void multiblock_speed(const EVP_CIPHER *evp_cipher);",
          "351: {",
          "352:     for (; pairs->name; pairs++)",
          "353:         if (strcmp(name, pairs->name) == 0) {",
          "",
          "[Removed Lines]",
          "350: static int found(const char *name, const OPT_PAIR * pairs, int *result)",
          "",
          "[Added Lines]",
          "350: static int found(const char *name, const OPT_PAIR *pairs, int *result)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "372:      \"Time decryption instead of encryption (only EVP)\"},",
          "373:     {\"mr\", OPT_MR, '-', \"Produce machine readable output\"},",
          "374:     {\"mb\", OPT_MB, '-',",
          "376:     {\"misalign\", OPT_MISALIGN, 'n', \"Amount to mis-align buffers\"},",
          "377:     {\"elapsed\", OPT_ELAPSED, '-',",
          "378:      \"Measure time in real time instead of CPU user time\"},",
          "",
          "[Removed Lines]",
          "375:         \"Enable (tls1.1) multi-block mode on evp_cipher requested with -evp\"},",
          "",
          "[Added Lines]",
          "375:      \"Enable (tls1.1) multi-block mode on evp_cipher requested with -evp\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "380:     {\"multi\", OPT_MULTI, 'p', \"Run benchmarks in parallel\"},",
          "381: #endif",
          "382: #ifndef OPENSSL_NO_ASYNC",
          "384: #endif",
          "385: #ifndef OPENSSL_NO_ENGINE",
          "386:     {\"engine\", OPT_ENGINE, 's', \"Use engine, possibly a hardware device\"},",
          "",
          "[Removed Lines]",
          "383:     {\"async_jobs\", OPT_ASYNCJOBS, 'p', \"Enable async mode and start pnum jobs\"},",
          "",
          "[Added Lines]",
          "383:     {\"async_jobs\", OPT_ASYNCJOBS, 'p',",
          "384:      \"Enable async mode and start pnum jobs\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "430: #endif",
          "431: #ifndef OPENSSL_NO_MD5",
          "432:     {\"md5\", D_MD5},",
          "435:     {\"hmac\", D_HMAC},",
          "436: #endif",
          "437:     {\"sha1\", D_SHA1},",
          "",
          "[Removed Lines]",
          "433: #endif",
          "434: #ifndef OPENSSL_NO_MD5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1571:         for (i = 0; i < ALGOR_NUM; i++)",
          "1572:             if (i != D_EVP)",
          "1573:                 doit[i] = 1;",
          "1574:         for (i = 0; i < RSA_NUM; i++)",
          "1575:             rsa_doit[i] = 1;",
          "1576: #ifndef OPENSSL_NO_DSA",
          "1577:         for (i = 0; i < DSA_NUM; i++)",
          "1578:             dsa_doit[i] = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1573: #ifndef OPENSSL_NO_RSA",
          "1576: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1901:             print_result(D_MD5, testnum, count, d);",
          "1902:         }",
          "1903:     }",
          "1907:     if (doit[D_HMAC]) {",
          "1909:         int len = strlen(hmac_key);",
          "1911:         for (i = 0; i < loopargs_len; i++) {",
          "",
          "[Removed Lines]",
          "1904: #endif",
          "1906: #ifndef OPENSSL_NO_MD5",
          "1908:         char hmac_key[] = \"This is a key...\";",
          "",
          "[Added Lines]",
          "1907:         static const char hmac_key[] = \"This is a key...\";",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2372:                 rsa_doit[testnum] = 0;",
          "2373:         }",
          "2374:     }",
          "2377:     for (i = 0; i < loopargs_len; i++)",
          "2378:         RAND_bytes(loopargs[i].buf, 36);",
          "",
          "[Removed Lines]",
          "2375: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2443:                 dsa_doit[testnum] = 0;",
          "2444:         }",
          "2445:     }",
          "2448: #ifndef OPENSSL_NO_EC",
          "2449:     if (RAND_status() != 1) {",
          "",
          "[Removed Lines]",
          "2446: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2625:                 ecdh_doit[testnum] = 0;",
          "2626:         }",
          "2627:     }",
          "2629: #ifndef NO_FORK",
          "2630:  show_res:",
          "2631: #endif",
          "",
          "[Removed Lines]",
          "2628: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2997:                         1 / (1 / ecdsa_results[k][1] + 1 / d);",
          "2998:                 else",
          "2999:                     ecdsa_results[k][1] = d;",
          "3005:                 int k;",
          "3006:                 double d;",
          "",
          "[Removed Lines]",
          "3000:             }",
          "3001: # endif",
          "3003: # ifndef OPENSSL_NO_EC",
          "3004:             else if (strncmp(buf, \"+F5:\", 4) == 0) {",
          "",
          "[Added Lines]",
          "2999:             } else if (strncmp(buf, \"+F5:\", 4) == 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b3bb779997ae620918b8467cc6a452725013e204",
      "candidate_info": {
        "commit_hash": "b3bb779997ae620918b8467cc6a452725013e204",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b3bb779997ae620918b8467cc6a452725013e204",
        "files": [
          "crypto/asn1/Makefile",
          "crypto/evp/Makefile",
          "crypto/hmac/Makefile",
          "util/libeay.num"
        ],
        "message": "make update\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "2207: i2d_OCSP_BASICRESP                      2744 EXIST::FUNCTION:",
          "2208: i2d_OCSP_RESPBYTES                      2745 EXIST::FUNCTION:",
          "2209: PKCS12_unpack_p7encdata                 2746 EXIST::FUNCTION:",
          "2211: ENGINE_get_digest                       2748 EXIST::FUNCTION:ENGINE",
          "2212: OCSP_RESPONSE_print                     2749 EXIST::FUNCTION:",
          "2213: KRB5_TKTBODY_it                         2750 NOEXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "2210: HMAC_CTX_init                           2747 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "2210: HMAC_CTX_reset                          2747 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2256: CRYPTO_get_locked_mem_ex_functions      2781 NOEXIST::FUNCTION:",
          "2257: ASN1_TIME_check                         2782 EXIST::FUNCTION:",
          "2258: UI_get0_user_data                       2783 EXIST::FUNCTION:",
          "2260: DSA_up_ref                              2785 EXIST::FUNCTION:DSA",
          "2261: _ossl_odes_ede3_cfb64_encrypt           2786 NOEXIST::FUNCTION:",
          "2262: _ossl_old_des_ede3_cfb64_encrypt        2786 NOEXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "2259: HMAC_CTX_cleanup                        2784 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "2259: HMAC_CTX_cleanup                        2784 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2306: d2i_KRB5_TICKET                         2819 NOEXIST::FUNCTION:",
          "2307: OTHERNAME_it                            2820 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:",
          "2308: OTHERNAME_it                            2820 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:",
          "2310: d2i_ASN1_GENERALSTRING                  2822 EXIST::FUNCTION:",
          "2311: X509_CRL_set_version                    2823 EXIST::FUNCTION:",
          "2312: BN_mod_sub                              2824 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "2309: EVP_MD_CTX_cleanup                      2821 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "2309: EVP_MD_CTX_cleanup                      2821 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4666: EVP_MD_CTX_ctrl                         5026 EXIST::FUNCTION:",
          "4667: EVP_md5_sha1                            5027 EXIST::FUNCTION:MD5",
          "4668: CRYPTO_free_ex_index                    5028 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4669: EVP_MD_meth_set_copy                    5029 EXIST::FUNCTION:",
          "4670: EVP_MD_meth_set_flags                   5030 EXIST::FUNCTION:",
          "4671: EVP_MD_meth_set_input_blocksize         5031 EXIST::FUNCTION:",
          "4672: EVP_MD_meth_get_update                  5032 EXIST::FUNCTION:",
          "4673: EVP_MD_meth_get_input_blocksize         5033 EXIST::FUNCTION:",
          "4674: EVP_MD_CTX_pkey_ctx                     5034 EXIST::FUNCTION:",
          "4675: EVP_MD_meth_set_ctrl                    5035 EXIST::FUNCTION:",
          "4676: EVP_MD_meth_get_init                    5036 EXIST::FUNCTION:",
          "4677: EVP_MD_meth_new                         5037 EXIST::FUNCTION:",
          "4678: EVP_MD_meth_get_ctrl                    5038 EXIST::FUNCTION:",
          "4679: EVP_MD_CTX_update_fn                    5039 EXIST::FUNCTION:",
          "4680: EVP_MD_meth_set_update                  5040 EXIST::FUNCTION:",
          "4681: EVP_MD_meth_get_final                   5041 EXIST::FUNCTION:",
          "4682: EVP_MD_CTX_md_data                      5042 EXIST::FUNCTION:",
          "4683: EVP_MD_meth_set_app_datasize            5043 EXIST::FUNCTION:",
          "4684: EVP_MD_meth_set_result_size             5044 EXIST::FUNCTION:",
          "4685: EVP_MD_meth_set_final                   5045 EXIST::FUNCTION:",
          "4686: EVP_MD_meth_get_result_size             5046 EXIST::FUNCTION:",
          "4687: EVP_MD_meth_get_flags                   5047 EXIST::FUNCTION:",
          "4688: EVP_MD_meth_get_app_datasize            5048 EXIST::FUNCTION:",
          "4689: EVP_MD_meth_free                        5049 EXIST::FUNCTION:",
          "4690: EVP_MD_meth_set_cleanup                 5050 EXIST::FUNCTION:",
          "4691: EVP_MD_meth_get_cleanup                 5051 EXIST::FUNCTION:",
          "4692: EVP_MD_meth_set_init                    5052 EXIST::FUNCTION:",
          "4693: EVP_MD_meth_get_copy                    5053 EXIST::FUNCTION:",
          "4694: EVP_MD_CTX_set_update_fn                5054 EXIST::FUNCTION:",
          "4695: EVP_MD_meth_dup                         5055 EXIST::FUNCTION:",
          "4696: HMAC_size                               5056 EXIST::FUNCTION:",
          "4697: HMAC_CTX_new                            5057 EXIST::FUNCTION:",
          "4698: HMAC_CTX_free                           5058 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    }
  ]
}