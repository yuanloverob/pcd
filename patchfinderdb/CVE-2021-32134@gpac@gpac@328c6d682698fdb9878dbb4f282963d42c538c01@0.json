{
  "cve_id": "CVE-2021-32134",
  "cve_desc": "The gf_odf_desc_copy function in GPAC 1.0.1 allows attackers to cause a denial of service (NULL pointer dereference) via a crafted file in the MP4Box command.",
  "repo": "gpac/gpac",
  "patch_hash": "328c6d682698fdb9878dbb4f282963d42c538c01",
  "patch_info": {
    "commit_hash": "328c6d682698fdb9878dbb4f282963d42c538c01",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/328c6d682698fdb9878dbb4f282963d42c538c01",
    "files": [
      "src/isomedia/box_code_base.c",
      "src/isomedia/media.c",
      "src/isomedia/sample_descs.c"
    ],
    "message": "fixed #1756",
    "before_after_code_files": [
      "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c",
      "src/isomedia/media.c||src/isomedia/media.c",
      "src/isomedia/sample_descs.c||src/isomedia/sample_descs.c"
    ]
  },
  "patch_diff": {
    "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c": [
      "File: src/isomedia/box_code_base.c -> src/isomedia/box_code_base.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4111: {",
      "4112:  ISOM_DECL_BOX_ALLOC(GF_MPEGSampleEntryBox, GF_ISOM_BOX_TYPE_MP4S);",
      "4113:  gf_isom_sample_entry_init((GF_SampleEntryBox*)tmp);",
      "4115:  return (GF_Box *)tmp;",
      "4116: }",
      "",
      "[Removed Lines]",
      "4114:  tmp->internal_type = GF_ISOM_SAMPLE_ENTRY_MP4S;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4119: {",
      "4120:  ISOM_DECL_BOX_ALLOC(GF_MPEGSampleEntryBox, GF_ISOM_BOX_TYPE_ENCS);",
      "4121:  gf_isom_sample_entry_init((GF_SampleEntryBox*)tmp);",
      "4123:  return (GF_Box *)tmp;",
      "4124: }",
      "",
      "[Removed Lines]",
      "4122:  tmp->internal_type = GF_ISOM_SAMPLE_ENTRY_MP4S;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/isomedia/media.c||src/isomedia/media.c": [
      "File: src/isomedia/media.c -> src/isomedia/media.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "181:   break;",
      "182:  }",
      "184:  switch (type) {",
      "185:  case GF_ISOM_BOX_TYPE_MP4V:",
      "186:   ESDa = ((GF_MPEGVisualSampleEntryBox*)entry)->esd;",
      "187:   if (ESDa) esd = (GF_ESD *) ESDa->desc;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "187:   if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_VIDEO)",
      "188:    return GF_ISOM_INVALID_MEDIA;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "202:  case GF_ISOM_BOX_TYPE_DVHE:",
      "203:  case GF_ISOM_BOX_TYPE_VVC1:",
      "204:  case GF_ISOM_BOX_TYPE_VVI1:",
      "205:   esd = ((GF_MPEGVisualSampleEntryBox*) entry)->emul_esd;",
      "206:   break;",
      "207:  case GF_ISOM_BOX_TYPE_SVC1:",
      "208:  case GF_ISOM_BOX_TYPE_MVC1:",
      "209:   if ((mdia->mediaTrack->extractor_mode & 0x0000FFFF) != GF_ISOM_NALU_EXTRACT_INSPECT)",
      "210:    AVC_RewriteESDescriptorEx((GF_MPEGVisualSampleEntryBox*) entry, mdia);",
      "211:   else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "208:   if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_VIDEO)",
      "209:    return GF_ISOM_INVALID_MEDIA;",
      "214:   if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_VIDEO)",
      "215:    return GF_ISOM_INVALID_MEDIA;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "214:   break;",
      "215:  case GF_ISOM_BOX_TYPE_LHE1:",
      "216:  case GF_ISOM_BOX_TYPE_LHV1:",
      "217:   if ((mdia->mediaTrack->extractor_mode & 0x0000FFFF) != GF_ISOM_NALU_EXTRACT_INSPECT)",
      "218:    HEVC_RewriteESDescriptorEx((GF_MPEGVisualSampleEntryBox*) entry, mdia);",
      "219:   else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "224:   if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_VIDEO)",
      "225:    return GF_ISOM_INVALID_MEDIA;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "221:   esd = ((GF_MPEGVisualSampleEntryBox*) entry)->emul_esd;",
      "222:   break;",
      "223:  case GF_ISOM_BOX_TYPE_AV01:",
      "224:   AV1_RewriteESDescriptorEx((GF_MPEGVisualSampleEntryBox*)entry, mdia);",
      "225:   esd = ((GF_MPEGVisualSampleEntryBox*)entry)->emul_esd;",
      "226:   break;",
      "227:  case GF_ISOM_BOX_TYPE_VP08:",
      "228:  case GF_ISOM_BOX_TYPE_VP09:",
      "229:   VP9_RewriteESDescriptorEx((GF_MPEGVisualSampleEntryBox*)entry, mdia);",
      "230:   esd = ((GF_MPEGVisualSampleEntryBox*)entry)->emul_esd;",
      "231:   break;",
      "232:  case GF_ISOM_BOX_TYPE_MP4A:",
      "233:         {",
      "234:             GF_MPEGAudioSampleEntryBox *ase = (GF_MPEGAudioSampleEntryBox*)entry;",
      "235:             ESDa = ase->esd;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "233:   if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_VIDEO)",
      "234:    return GF_ISOM_INVALID_MEDIA;",
      "240:   if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_VIDEO)",
      "241:    return GF_ISOM_INVALID_MEDIA;",
      "246:   if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_AUDIO)",
      "247:    return GF_ISOM_INVALID_MEDIA;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "270: #ifndef GPAC_DISABLE_TTXT",
      "271:  case GF_ISOM_BOX_TYPE_TX3G:",
      "272:  case GF_ISOM_BOX_TYPE_TEXT:",
      "273:   if (!true_desc_only && mdia->mediaTrack->moov->mov->convert_streaming_text) {",
      "274:    GF_Err e = gf_isom_get_ttxt_esd(mdia, out_esd);",
      "275:    if (e) return e;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "288:   if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_MP4S)",
      "289:    return GF_ISOM_INVALID_MEDIA;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "280: #endif",
      "281: #ifndef GPAC_DISABLE_VTT",
      "282:  case GF_ISOM_BOX_TYPE_WVTT:",
      "283:  {",
      "284:   GF_WebVTTSampleEntryBox*vtte = (GF_WebVTTSampleEntryBox*)entry;",
      "285:   esd =  gf_odf_desc_esd_new(2);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "301:   if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_MP4S)",
      "302:    return GF_ISOM_INVALID_MEDIA;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "304:  case GF_ISOM_SUBTYPE_3GP_EVRC:",
      "305:  case GF_ISOM_SUBTYPE_3GP_QCELP:",
      "306:  case GF_ISOM_SUBTYPE_3GP_SMV:",
      "307:   if (!true_desc_only) {",
      "308:    GF_Err e = gf_isom_get_3gpp_audio_esd(mdia->information->sampleTable, type, (GF_GenericAudioSampleEntryBox*)entry, out_esd);",
      "309:    if (e) return e;",
      "310:    break;",
      "311:   } else return GF_ISOM_INVALID_MEDIA;",
      "314:   GF_OpusSpecificBox *e = ((GF_MPEGAudioSampleEntryBox*)entry)->cfg_opus;",
      "315:   GF_BitStream *bs_out;",
      "316:   if (!e) {",
      "",
      "[Removed Lines]",
      "313:  case GF_ISOM_SUBTYPE_OPUS: {",
      "",
      "[Added Lines]",
      "327:   if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_AUDIO)",
      "328:    return GF_ISOM_INVALID_MEDIA;",
      "335:  case GF_ISOM_SUBTYPE_OPUS:",
      "336:   if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_AUDIO)",
      "337:    return GF_ISOM_INVALID_MEDIA;",
      "338:  {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "331:   break;",
      "332:  }",
      "333:  case GF_ISOM_SUBTYPE_3GP_H263:",
      "334:   if (true_desc_only) {",
      "335:    return GF_ISOM_INVALID_MEDIA;",
      "336:   } else {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "359:   if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_VIDEO)",
      "360:    return GF_ISOM_INVALID_MEDIA;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "342:   }",
      "344:  case GF_ISOM_SUBTYPE_MP3:",
      "345:   if (true_desc_only) {",
      "346:    return GF_ISOM_INVALID_MEDIA;",
      "347:   } else {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "372:   if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_AUDIO)",
      "373:    return GF_ISOM_INVALID_MEDIA;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "353:   }",
      "355:  case GF_ISOM_SUBTYPE_LSR1:",
      "356:   if (true_desc_only) {",
      "357:    return GF_ISOM_INVALID_MEDIA;",
      "358:   } else {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "385:   if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_MP4S)",
      "386:    return GF_ISOM_INVALID_MEDIA;",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "371:  case GF_ISOM_SUBTYPE_MH3D_MHA2:",
      "372:  case GF_ISOM_SUBTYPE_MH3D_MHM1:",
      "373:  case GF_ISOM_SUBTYPE_MH3D_MHM2:",
      "374:   if (true_desc_only) {",
      "375:    return GF_ISOM_INVALID_MEDIA;",
      "376:   } else {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "405:   if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_AUDIO)",
      "406:    return GF_ISOM_INVALID_MEDIA;",
      "",
      "---------------"
    ],
    "src/isomedia/sample_descs.c||src/isomedia/sample_descs.c": [
      "File: src/isomedia/sample_descs.c -> src/isomedia/sample_descs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "46: void gf_isom_sample_entry_init(GF_SampleEntryBox *ent)",
      "47: {",
      "48: }",
      "50: void gf_isom_video_sample_entry_init(GF_VisualSampleEntryBox *ent)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48:  ent->internal_type = GF_ISOM_SAMPLE_ENTRY_MP4S;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9af1605da0ab1470451dec86ab7f45b4d8d78690",
      "candidate_info": {
        "commit_hash": "9af1605da0ab1470451dec86ab7f45b4d8d78690",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/9af1605da0ab1470451dec86ab7f45b4d8d78690",
        "files": [
          "include/gpac/internal/isomedia_dev.h",
          "src/isomedia/box_code_base.c",
          "src/isomedia/box_dump.c",
          "src/isomedia/media.c",
          "src/isomedia/sample_descs.c",
          "testsuite"
        ],
        "message": "fixed #2080",
        "before_after_code_files": [
          "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h",
          "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c",
          "src/isomedia/box_dump.c||src/isomedia/box_dump.c",
          "src/isomedia/media.c||src/isomedia/media.c",
          "src/isomedia/sample_descs.c||src/isomedia/sample_descs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c",
            "src/isomedia/media.c||src/isomedia/media.c",
            "src/isomedia/sample_descs.c||src/isomedia/sample_descs.c"
          ],
          "candidate": [
            "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c",
            "src/isomedia/media.c||src/isomedia/media.c",
            "src/isomedia/sample_descs.c||src/isomedia/sample_descs.c"
          ]
        }
      },
      "candidate_diff": {
        "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h": [
          "File: include/gpac/internal/isomedia_dev.h -> include/gpac/internal/isomedia_dev.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "535: enum",
          "536: {",
          "538:  GF_ISOM_SAMPLE_ENTRY_VIDEO = GF_4CC('v','i','d','e'),",
          "539:  GF_ISOM_SAMPLE_ENTRY_AUDIO = GF_4CC('a','u','d','i'),",
          "542: };",
          "",
          "[Removed Lines]",
          "537:  GF_ISOM_SAMPLE_ENTRY_UNKN = 0,",
          "540:  GF_ISOM_SAMPLE_ENTRY_MP4S = GF_4CC('m','p','4','s')",
          "",
          "[Added Lines]",
          "538:  GF_ISOM_SAMPLE_ENTRY_GENERIC = 0,",
          "544:  GF_ISOM_SAMPLE_ENTRY_MP4S = GF_4CC('m','p','4','s'),",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c": [
          "File: src/isomedia/box_code_base.c -> src/isomedia/box_code_base.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4174: {",
          "4175:  ISOM_DECL_BOX_ALLOC(GF_MPEGSampleEntryBox, GF_ISOM_BOX_TYPE_MP4S);",
          "4176:  gf_isom_sample_entry_init((GF_SampleEntryBox*)tmp);",
          "4177:  return (GF_Box *)tmp;",
          "4178: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4177:  tmp->internal_type = GF_ISOM_SAMPLE_ENTRY_MP4S;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4181: {",
          "4182:  ISOM_DECL_BOX_ALLOC(GF_MPEGSampleEntryBox, GF_ISOM_BOX_TYPE_ENCS);",
          "4183:  gf_isom_sample_entry_init((GF_SampleEntryBox*)tmp);",
          "4184:  return (GF_Box *)tmp;",
          "4185: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4185:  tmp->internal_type = GF_ISOM_SAMPLE_ENTRY_MP4S;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6522:  gf_free(s);",
          "6523: }",
          "6526: {",
          "6527:  GF_BitStream *bs;",
          "6528:  GF_UnknownBox *a;",
          "",
          "[Removed Lines]",
          "6525: static void gf_isom_check_sample_desc(GF_TrackBox *trak)",
          "",
          "[Added Lines]",
          "6527: static GF_Err gf_isom_check_sample_desc(GF_TrackBox *trak)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6533:  if (!trak->Media || !trak->Media->information) {",
          "6534:   GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] Track with no media box !\\n\" ));",
          "6536:  }",
          "6537:  if (!trak->Media->information->sampleTable) {",
          "6538:   GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] Track with no sample table !\\n\" ));",
          "",
          "[Removed Lines]",
          "6535:   return;",
          "",
          "[Added Lines]",
          "6537:   return GF_OK;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6543:  if (!stbl->SampleDescription) {",
          "6544:   GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] Track with no sample description box !\\n\" ));",
          "6545:   stbl->SampleDescription = (GF_SampleDescriptionBox *) gf_isom_box_new_parent(&stbl->child_boxes, GF_ISOM_BOX_TYPE_STSD);",
          "6547:  }",
          "6549:  i=0;",
          "6551:   switch (a->type) {",
          "6553:   case GF_ISOM_BOX_TYPE_ENCS:",
          "6555:   case GF_ISOM_BOX_TYPE_ENCA:",
          "6557:   case GF_ISOM_BOX_TYPE_ENCV:",
          "6558:   case GF_ISOM_BOX_TYPE_RESV:",
          "6559:   case GF_ISOM_SUBTYPE_3GP_AMR:",
          "6560:   case GF_ISOM_SUBTYPE_3GP_AMR_WB:",
          "6561:   case GF_ISOM_SUBTYPE_3GP_EVRC:",
          "6562:   case GF_ISOM_SUBTYPE_3GP_QCELP:",
          "6563:   case GF_ISOM_SUBTYPE_3GP_SMV:",
          "6564:   case GF_ISOM_SUBTYPE_3GP_H263:",
          "6574:   case GF_ISOM_BOX_TYPE_AVC1:",
          "6575:   case GF_ISOM_BOX_TYPE_AVC2:",
          "6576:   case GF_ISOM_BOX_TYPE_AVC3:",
          "",
          "[Removed Lines]",
          "6546:   return;",
          "6550:  while ((a = (GF_UnknownBox*)gf_list_enum(trak->Media->information->sampleTable->SampleDescription->child_boxes, &i))) {",
          "6552:   case GF_ISOM_BOX_TYPE_MP4S:",
          "6554:   case GF_ISOM_BOX_TYPE_MP4A:",
          "6556:   case GF_ISOM_BOX_TYPE_MP4V:",
          "6565:   case GF_ISOM_BOX_TYPE_GHNT:",
          "6566:   case GF_ISOM_BOX_TYPE_RTP_STSD:",
          "6567:   case GF_ISOM_BOX_TYPE_SRTP_STSD:",
          "6568:   case GF_ISOM_BOX_TYPE_FDP_STSD:",
          "6569:   case GF_ISOM_BOX_TYPE_RRTP_STSD:",
          "6570:   case GF_ISOM_BOX_TYPE_RTCP_STSD:",
          "6571:   case GF_ISOM_BOX_TYPE_METX:",
          "6572:   case GF_ISOM_BOX_TYPE_METT:",
          "6573:   case GF_ISOM_BOX_TYPE_STXT:",
          "",
          "[Added Lines]",
          "6548:   return GF_OK;",
          "6552:  while ((a = (GF_UnknownBox*)gf_list_enum(stbl->SampleDescription->child_boxes, &i))) {",
          "6553:   GF_ProtectionSchemeInfoBox *sinf;",
          "6554:   u32 base_ent_type = 0;",
          "6555:   u32 type = a->type;",
          "6561:   case GF_ISOM_BOX_TYPE_ENCT:",
          "6562:    sinf = (GF_ProtectionSchemeInfoBox *) gf_isom_box_find_child(a->child_boxes, GF_ISOM_BOX_TYPE_SINF);",
          "6563:    if (!sinf || !sinf->original_format) return GF_ISOM_INVALID_FILE;",
          "6564:    type = sinf->original_format->data_format;",
          "6565:    base_ent_type = ((GF_SampleEntryBox *)a)->internal_type;",
          "6566:    break;",
          "6567:   }",
          "6569:   switch (type) {",
          "6570:   case GF_ISOM_BOX_TYPE_MP4S:",
          "6571:    if (base_ent_type && (base_ent_type != GF_ISOM_SAMPLE_ENTRY_MP4S)) {",
          "6572:     GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Protected sample entry %s uses incompatible sample description %s\\n\", gf_4cc_to_str(a->type), gf_4cc_to_str(type) ));",
          "6574:     return GF_ISOM_INVALID_FILE;",
          "6575:    }",
          "6576:    continue;",
          "6583:   case GF_ISOM_BOX_TYPE_MP4A:",
          "6584:   case GF_ISOM_BOX_TYPE_MP3:",
          "6585:   case GF_ISOM_BOX_TYPE_MHA1:",
          "6586:   case GF_ISOM_BOX_TYPE_MHA2:",
          "6587:   case GF_ISOM_BOX_TYPE_MHM1:",
          "6588:   case GF_ISOM_BOX_TYPE_MHM2:",
          "6589:   case GF_ISOM_BOX_TYPE_OPUS:",
          "6590:   case GF_ISOM_BOX_TYPE_AC3:",
          "6591:   case GF_ISOM_BOX_TYPE_EC3:",
          "6592:   case GF_QT_SUBTYPE_RAW_AUD:",
          "6593:   case GF_QT_SUBTYPE_TWOS:",
          "6594:   case GF_QT_SUBTYPE_SOWT:",
          "6595:   case GF_QT_SUBTYPE_FL32:",
          "6596:   case GF_QT_SUBTYPE_FL64:",
          "6597:   case GF_QT_SUBTYPE_IN24:",
          "6598:   case GF_QT_SUBTYPE_IN32:",
          "6599:   case GF_QT_SUBTYPE_ULAW:",
          "6600:   case GF_QT_SUBTYPE_ALAW:",
          "6601:   case GF_QT_SUBTYPE_ADPCM:",
          "6602:   case GF_QT_SUBTYPE_IMA_ADPCM:",
          "6603:   case GF_QT_SUBTYPE_DVCA:",
          "6604:   case GF_QT_SUBTYPE_QDMC:",
          "6605:   case GF_QT_SUBTYPE_QDMC2:",
          "6606:   case GF_QT_SUBTYPE_QCELP:",
          "6607:   case GF_QT_SUBTYPE_kMP3:",
          "6608:   case GF_ISOM_BOX_TYPE_IPCM:",
          "6609:   case GF_ISOM_BOX_TYPE_FPCM:",
          "6610:    if (base_ent_type && (base_ent_type != GF_ISOM_SAMPLE_ENTRY_AUDIO))",
          "6611:     return GF_ISOM_INVALID_FILE;",
          "6612:    continue;",
          "6614:   case GF_ISOM_BOX_TYPE_MP4V:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6588:   case GF_ISOM_BOX_TYPE_VP08:",
          "6589:   case GF_ISOM_BOX_TYPE_VP09:",
          "6590:   case GF_ISOM_BOX_TYPE_AV1C:",
          "6603:   case GF_ISOM_BOX_TYPE_JPEG:",
          "6604:   case GF_ISOM_BOX_TYPE_PNG:",
          "6605:   case GF_ISOM_BOX_TYPE_JP2K:",
          "6610:   case GF_ISOM_BOX_TYPE_MJP2:",
          "6627:   case GF_QT_SUBTYPE_APCH:",
          "6628:   case GF_QT_SUBTYPE_APCO:",
          "6629:   case GF_QT_SUBTYPE_APCN:",
          "6630:   case GF_QT_SUBTYPE_APCS:",
          "6631:   case GF_QT_SUBTYPE_AP4X:",
          "6632:   case GF_QT_SUBTYPE_AP4H:",
          "6635:   case GF_ISOM_BOX_TYPE_VVC1:",
          "6636:   case GF_ISOM_BOX_TYPE_VVI1:",
          "6637:   case GF_QT_SUBTYPE_RAW_VID:",
          "",
          "[Removed Lines]",
          "6591:   case GF_ISOM_BOX_TYPE_TX3G:",
          "6592:   case GF_ISOM_BOX_TYPE_TEXT:",
          "6593:   case GF_ISOM_BOX_TYPE_ENCT:",
          "6594:   case GF_ISOM_BOX_TYPE_DIMS:",
          "6595:   case GF_ISOM_BOX_TYPE_OPUS:",
          "6596:   case GF_ISOM_BOX_TYPE_AC3:",
          "6597:   case GF_ISOM_BOX_TYPE_EC3:",
          "6598:   case GF_ISOM_BOX_TYPE_LSR1:",
          "6599:   case GF_ISOM_BOX_TYPE_WVTT:",
          "6600:   case GF_ISOM_BOX_TYPE_STPP:",
          "6601:   case GF_ISOM_BOX_TYPE_SBTT:",
          "6602:   case GF_ISOM_BOX_TYPE_MP3:",
          "6606:   case GF_ISOM_BOX_TYPE_MHA1:",
          "6607:   case GF_ISOM_BOX_TYPE_MHA2:",
          "6608:   case GF_ISOM_BOX_TYPE_MHM1:",
          "6609:   case GF_ISOM_BOX_TYPE_MHM2:",
          "6611:   case GF_QT_SUBTYPE_RAW_AUD:",
          "6612:   case GF_QT_SUBTYPE_TWOS:",
          "6613:   case GF_QT_SUBTYPE_SOWT:",
          "6614:   case GF_QT_SUBTYPE_FL32:",
          "6615:   case GF_QT_SUBTYPE_FL64:",
          "6616:   case GF_QT_SUBTYPE_IN24:",
          "6617:   case GF_QT_SUBTYPE_IN32:",
          "6618:   case GF_QT_SUBTYPE_ULAW:",
          "6619:   case GF_QT_SUBTYPE_ALAW:",
          "6620:   case GF_QT_SUBTYPE_ADPCM:",
          "6621:   case GF_QT_SUBTYPE_IMA_ADPCM:",
          "6622:   case GF_QT_SUBTYPE_DVCA:",
          "6623:   case GF_QT_SUBTYPE_QDMC:",
          "6624:   case GF_QT_SUBTYPE_QDMC2:",
          "6625:   case GF_QT_SUBTYPE_QCELP:",
          "6626:   case GF_QT_SUBTYPE_kMP3:",
          "6633:   case GF_ISOM_BOX_TYPE_IPCM:",
          "6634:   case GF_ISOM_BOX_TYPE_FPCM:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6654:   case GF_ISOM_BOX_TYPE_DVA1:",
          "6655:   case GF_ISOM_BOX_TYPE_DVAV:",
          "6656:   case GF_ISOM_BOX_TYPE_DAV1:",
          "6657:    continue;",
          "6659:   case GF_ISOM_BOX_TYPE_UNKNOWN:",
          "6660:    break;",
          "6661:   default:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6665:    if (base_ent_type && (base_ent_type != GF_ISOM_SAMPLE_ENTRY_VIDEO))",
          "6666:     return GF_ISOM_INVALID_FILE;",
          "6667:    continue;",
          "6670:   case GF_ISOM_BOX_TYPE_METX:",
          "6671:   case GF_ISOM_BOX_TYPE_METT:",
          "6672:   case GF_ISOM_BOX_TYPE_STXT:",
          "6673:   case GF_ISOM_BOX_TYPE_TX3G:",
          "6674:   case GF_ISOM_BOX_TYPE_TEXT:",
          "6675:   case GF_ISOM_BOX_TYPE_GHNT:",
          "6676:   case GF_ISOM_BOX_TYPE_RTP_STSD:",
          "6677:   case GF_ISOM_BOX_TYPE_SRTP_STSD:",
          "6678:   case GF_ISOM_BOX_TYPE_FDP_STSD:",
          "6679:   case GF_ISOM_BOX_TYPE_RRTP_STSD:",
          "6680:   case GF_ISOM_BOX_TYPE_RTCP_STSD:",
          "6681:   case GF_ISOM_BOX_TYPE_DIMS:",
          "6682:   case GF_ISOM_BOX_TYPE_LSR1:",
          "6683:   case GF_ISOM_BOX_TYPE_WVTT:",
          "6684:   case GF_ISOM_BOX_TYPE_STPP:",
          "6685:   case GF_ISOM_BOX_TYPE_SBTT:",
          "6686:    if (base_ent_type && (base_ent_type != GF_ISOM_SAMPLE_ENTRY_GENERIC))",
          "6687:     return GF_ISOM_INVALID_FILE;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6743:    bs = gf_bs_new(a->data, a->dataSize, GF_BITSTREAM_READ);",
          "6745:    e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)genm, bs);",
          "6748:    STSD_SWITCH_BOX(genm)",
          "6749:   }",
          "6750:   break;",
          "6751:   }",
          "6753:  }",
          "6754: }",
          "",
          "[Removed Lines]",
          "6746:    if (e) return;",
          "",
          "[Added Lines]",
          "6778:    if (e) return e;",
          "6785:  return GF_OK;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6805:  GF_TrackBox *ptr = (GF_TrackBox *)s;",
          "6806:  e = gf_isom_box_array_read(s, bs);",
          "6807:  if (e) return e;",
          "6810:  if (!ptr->Header) {",
          "6811:   GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Missing TrackHeaderBox\\n\"));",
          "",
          "[Removed Lines]",
          "6808:  gf_isom_check_sample_desc(ptr);",
          "",
          "[Added Lines]",
          "6840:  e = gf_isom_check_sample_desc(ptr);",
          "6841:  if (e) return e;",
          "",
          "---------------"
        ],
        "src/isomedia/box_dump.c||src/isomedia/box_dump.c": [
          "File: src/isomedia/box_dump.c -> src/isomedia/box_dump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3825:   switch (entry->type) {",
          "3826:   case GF_ISOM_BOX_TYPE_ENCA:",
          "3827:   case GF_ISOM_BOX_TYPE_ENCV:",
          "3829:   case GF_ISOM_BOX_TYPE_ENCS:",
          "3830:    break;",
          "3831:   default:",
          "3832:    continue;",
          "",
          "[Removed Lines]",
          "3828:   case GF_ISOM_BOX_TYPE_ENCT:",
          "",
          "[Added Lines]",
          "3829:   case GF_ISOM_BOX_TYPE_ENCT:",
          "3830:   case GF_ISOM_BOX_TYPE_ENCF:",
          "3831:   case GF_ISOM_BOX_TYPE_ENCM:",
          "",
          "---------------"
        ],
        "src/isomedia/media.c||src/isomedia/media.c": [
          "File: src/isomedia/media.c -> src/isomedia/media.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "293: #ifndef GPAC_DISABLE_TTXT",
          "294:  case GF_ISOM_BOX_TYPE_TX3G:",
          "295:  case GF_ISOM_BOX_TYPE_TEXT:",
          "297:    return GF_ISOM_INVALID_MEDIA;",
          "299:   if (!true_desc_only && mdia->mediaTrack->moov->mov->convert_streaming_text) {",
          "",
          "[Removed Lines]",
          "296:   if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_MP4S)",
          "",
          "[Added Lines]",
          "296:   if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_GENERIC)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "306: #endif",
          "307: #ifndef GPAC_DISABLE_VTT",
          "308:  case GF_ISOM_BOX_TYPE_WVTT:",
          "310:    return GF_ISOM_INVALID_MEDIA;",
          "311:  {",
          "312:   GF_WebVTTSampleEntryBox*vtte = (GF_WebVTTSampleEntryBox*)entry;",
          "",
          "[Removed Lines]",
          "309:   if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_MP4S)",
          "",
          "[Added Lines]",
          "309:   if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_GENERIC)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "390:   }",
          "392:  case GF_ISOM_SUBTYPE_LSR1:",
          "394:    return GF_ISOM_INVALID_MEDIA;",
          "395:   if (true_desc_only) {",
          "396:    return GF_ISOM_INVALID_MEDIA;",
          "",
          "[Removed Lines]",
          "393:   if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_MP4S)",
          "",
          "[Added Lines]",
          "393:   if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_GENERIC)",
          "",
          "---------------"
        ],
        "src/isomedia/sample_descs.c||src/isomedia/sample_descs.c": [
          "File: src/isomedia/sample_descs.c -> src/isomedia/sample_descs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: void gf_isom_sample_entry_init(GF_SampleEntryBox *ent)",
          "47: {",
          "49: }",
          "51: void gf_isom_video_sample_entry_init(GF_VisualSampleEntryBox *ent)",
          "",
          "[Removed Lines]",
          "48:  ent->internal_type = GF_ISOM_SAMPLE_ENTRY_MP4S;",
          "",
          "[Added Lines]",
          "48:  ent->internal_type = GF_ISOM_SAMPLE_ENTRY_GENERIC;",
          "",
          "---------------"
        ]
      }
    }
  ]
}