{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "08b382c2fb88d790708f39ffdf4e4b41038ec9c5",
      "candidate_info": {
        "commit_hash": "08b382c2fb88d790708f39ffdf4e4b41038ec9c5",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/08b382c2fb88d790708f39ffdf4e4b41038ec9c5",
        "files": [
          "tools/install.py"
        ],
        "message": "installer: remove c-ares header files\n\nFixes #3847.",
        "before_after_code_files": [
          "tools/install.py||tools/install.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/install.py||tools/install.py": [
          "File: tools/install.py -> tools/install.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:     assert(0) # unhandled action type",
          "159: def files(action):",
          "163:           'deps/v8/include/v8-debug.h',",
          "164:           'deps/v8/include/v8-preparser.h',",
          "165:           'deps/v8/include/v8-profiler.h',",
          "",
          "[Removed Lines]",
          "160:   action(['deps/uv/include/ares.h',",
          "161:           'deps/uv/include/ares_version.h',",
          "162:           'deps/uv/include/uv.h',",
          "",
          "[Added Lines]",
          "160:   action(['deps/uv/include/uv.h',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af98fc9d5f20a8c5dc0db95121f18355337762f1",
      "candidate_info": {
        "commit_hash": "af98fc9d5f20a8c5dc0db95121f18355337762f1",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/af98fc9d5f20a8c5dc0db95121f18355337762f1",
        "files": [
          "lib/child_process.js",
          "node.gyp",
          "src/node.js",
          "src/process_wrap.cc",
          "src/tcp_wrap.cc",
          "src/tcp_wrap.h",
          "src/tty_wrap.cc",
          "src/tty_wrap.h",
          "src/udp_wrap.cc",
          "src/udp_wrap.h",
          "test/simple/test-process-wrap.js"
        ],
        "message": "child_process: new stdio API for .spawn() method",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js",
          "node.gyp||node.gyp",
          "src/node.js||src/node.js",
          "src/process_wrap.cc||src/process_wrap.cc",
          "src/tcp_wrap.cc||src/tcp_wrap.cc",
          "src/tcp_wrap.h||src/tcp_wrap.h",
          "src/tty_wrap.cc||src/tty_wrap.cc",
          "src/tty_wrap.h||src/tty_wrap.h",
          "src/udp_wrap.cc||src/udp_wrap.cc",
          "src/udp_wrap.h||src/udp_wrap.h",
          "test/simple/test-process-wrap.js||test/simple/test-process-wrap.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: var util = require('util');",
          "26: var constants; // if (!constants) constants = process.binding('constants');",
          "32: function createPipe(ipc) {",
          "39: }",
          "41: function createSocket(pipe, readable) {",
          "",
          "[Removed Lines]",
          "28: var Pipe;",
          "34:   if (!Pipe) {",
          "35:     Pipe = process.binding('pipe_wrap').Pipe;",
          "36:   }",
          "38:   return new Pipe(ipc);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "414:   execArgv = options.execArgv || process.execArgv;",
          "415:   args = execArgv.concat([modulePath], args);",
          "443: };",
          "448:   var p = createPipe(true);",
          "450:   setupChannel(process, p);",
          "451: };",
          "",
          "[Removed Lines]",
          "418:   if (options.stdinStream) {",
          "419:     throw new Error('stdinStream not allowed for fork()');",
          "420:   }",
          "422:   if (options.customFds) {",
          "423:     throw new Error('customFds not allowed for fork()');",
          "424:   }",
          "428:   options.customFds = (options.silent ? [-1, -1, -1] : [-1, 1, 2]);",
          "432:   options.env = util._extend({}, options.env || process.env);",
          "433:   options.env.NODE_CHANNEL_FD = 42;",
          "436:   options.stdinStream = createPipe(true);",
          "438:   var child = spawn(process.execPath, args, options);",
          "440:   setupChannel(child, options.stdinStream);",
          "442:   return child;",
          "446: exports._forkChild = function() {",
          "449:   p.open(0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "591:   }",
          "593:   var child = new ChildProcess();",
          "595:   child.spawn({",
          "596:     file: file,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "598:     cwd: options ? options.cwd : null,",
          "599:     windowsVerbatimArguments: !!(options && options.windowsVerbatimArguments),",
          "600:     envPairs: envPairs,",
          "603:     uid: options ? options.uid : null,",
          "604:     gid: options ? options.gid : null",
          "605:   });",
          "",
          "[Removed Lines]",
          "601:     customFds: options ? options.customFds : null,",
          "602:     stdinStream: options ? options.stdinStream : null,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "658: util.inherits(ChildProcess, EventEmitter);",
          "676: }",
          "679: ChildProcess.prototype.spawn = function(options) {",
          "691:     }",
          "695:     }",
          "699:     }",
          "701:     this._handle.close();",
          "702:     this._handle = null;",
          "703:     throw errnoException(errno, 'spawn');",
          "",
          "[Removed Lines]",
          "661: function setStreamOption(name, index, options) {",
          "663:   if (options[name]) return;",
          "665:   if (options.customFds &&",
          "666:       typeof options.customFds[index] == 'number' &&",
          "667:       options.customFds[index] !== -1) {",
          "668:     if (options.customFds[index] === index) {",
          "669:       options[name] = null;",
          "670:     } else {",
          "671:       throw new Error('customFds not yet supported');",
          "672:     }",
          "673:   } else {",
          "674:     options[name] = createPipe();",
          "675:   }",
          "680:   var self = this;",
          "682:   setStreamOption('stdinStream', 0, options);",
          "683:   setStreamOption('stdoutStream', 1, options);",
          "684:   setStreamOption('stderrStream', 2, options);",
          "686:   var r = this._handle.spawn(options);",
          "688:   if (r) {",
          "689:     if (options.stdinStream) {",
          "690:       options.stdinStream.close();",
          "693:     if (options.stdoutStream) {",
          "694:       options.stdoutStream.close();",
          "697:     if (options.stderrStream) {",
          "698:       options.stderrStream.close();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "706:   this.pid = this._handle.pid;",
          "728:   return r;",
          "729: };",
          "",
          "[Removed Lines]",
          "708:   if (options.stdinStream) {",
          "709:     this.stdin = createSocket(options.stdinStream, false);",
          "710:   }",
          "712:   if (options.stdoutStream) {",
          "713:     this.stdout = createSocket(options.stdoutStream, true);",
          "714:     this._closesNeeded++;",
          "715:     this.stdout.on('close', function() {",
          "716:       maybeClose(self);",
          "717:     });",
          "718:   }",
          "720:   if (options.stderrStream) {",
          "721:     this.stderr = createSocket(options.stderrStream, true);",
          "722:     this._closesNeeded++;",
          "723:     this.stderr.on('close', function() {",
          "724:       maybeClose(self);",
          "725:     });",
          "726:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "node.gyp||node.gyp": [
          "File: node.gyp -> node.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:         'src/node_version.h',",
          "110:         'src/ngx-queue.h',",
          "111:         'src/pipe_wrap.h',",
          "112:         'src/req_wrap.h',",
          "113:         'src/slab_allocator.h',",
          "114:         'src/stream_wrap.h',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:         'src/tty_wrap.h',",
          "113:         'src/tcp_wrap.h',",
          "114:         'src/udp_wrap.h',",
          "",
          "---------------"
        ],
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "484:     if (process.env.NODE_CHANNEL_FD) {",
          "488:       delete process.env.NODE_CHANNEL_FD;",
          "",
          "[Removed Lines]",
          "485:       assert(parseInt(process.env.NODE_CHANNEL_FD) >= 0);",
          "",
          "[Added Lines]",
          "485:       var fd = parseInt(process.env.NODE_CHANNEL_FD, 10);",
          "486:       assert(fd >= 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "495:       process.binding('tcp_wrap');",
          "498:       assert(process.send);",
          "499:     }",
          "500:   }",
          "",
          "[Removed Lines]",
          "497:       cp._forkChild();",
          "",
          "[Added Lines]",
          "498:       cp._forkChild(fd);",
          "",
          "---------------"
        ],
        "src/process_wrap.cc||src/process_wrap.cc": [
          "File: src/process_wrap.cc -> src/process_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"node.h\"",
          "23: #include \"handle_wrap.h\"",
          "24: #include \"pipe_wrap.h\"",
          "25: #include <string.h>",
          "26: #include <stdlib.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include \"tty_wrap.h\"",
          "26: #include \"tcp_wrap.h\"",
          "27: #include \"udp_wrap.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: using v8::FunctionTemplate;",
          "37: using v8::String;",
          "38: using v8::Array;",
          "39: using v8::Function;",
          "40: using v8::TryCatch;",
          "41: using v8::Context;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: using v8::Number;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82:   ProcessWrap(Handle<Object> object) : HandleWrap(object, NULL) { }",
          "83:   ~ProcessWrap() { }",
          "85:   static Handle<Value> Spawn(const Arguments& args) {",
          "86:     HandleScope scope;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:   static void ParseStdioOptions(Local<Object> js_options,",
          "91:                                 uv_process_options_t* options) {",
          "92:     Local<Array> stdios = js_options",
          "93:         ->Get(String::NewSymbol(\"stdio\")).As<Array>();",
          "94:     int len = stdios->Length();",
          "95:     options->stdio = new uv_stdio_container_t[len];",
          "96:     options->stdio_count = len;",
          "98:     for (int i = 0; i < len; i++) {",
          "99:       Local<Object> stdio = stdios",
          "100:           ->Get(Number::New(static_cast<double>(i))).As<Object>();",
          "101:       Local<Value> type = stdio->Get(String::NewSymbol(\"type\"));",
          "103:       if (type->Equals(String::NewSymbol(\"ignore\"))) {",
          "104:         options->stdio[i].flags = UV_IGNORE;",
          "105:       } else if (type->Equals(String::NewSymbol(\"pipe\"))) {",
          "106:         options->stdio[i].flags = UV_CREATE_PIPE;",
          "107:         options->stdio[i].data.stream = reinterpret_cast<uv_stream_t*>(",
          "108:             PipeWrap::Unwrap(stdio",
          "109:                 ->Get(String::NewSymbol(\"handle\")).As<Object>())->UVHandle());",
          "110:       } else if (type->Equals(String::NewSymbol(\"wrap\"))) {",
          "111:         uv_stream_t* stream = NULL;",
          "112:         Local<Value> wrapType = stdio->Get(String::NewSymbol(\"wrapType\"));",
          "113:         if (wrapType->Equals(String::NewSymbol(\"pipe\"))) {",
          "114:           stream = reinterpret_cast<uv_stream_t*>(PipeWrap::Unwrap(stdio",
          "115:               ->Get(String::NewSymbol(\"handle\")).As<Object>())->UVHandle());",
          "116:         } else if (wrapType->Equals(String::NewSymbol(\"tty\"))) {",
          "117:           stream = reinterpret_cast<uv_stream_t*>(TTYWrap::Unwrap(stdio",
          "118:               ->Get(String::NewSymbol(\"handle\")).As<Object>())->UVHandle());",
          "119:         } else if (wrapType->Equals(String::NewSymbol(\"tcp\"))) {",
          "120:           stream = reinterpret_cast<uv_stream_t*>(TCPWrap::Unwrap(stdio",
          "121:               ->Get(String::NewSymbol(\"handle\")).As<Object>())->UVHandle());",
          "122:         } else if (wrapType->Equals(String::NewSymbol(\"udp\"))) {",
          "123:           stream = reinterpret_cast<uv_stream_t*>(UDPWrap::Unwrap(stdio",
          "124:               ->Get(String::NewSymbol(\"handle\")).As<Object>())->UVHandle());",
          "125:         }",
          "126:         assert(stream != NULL);",
          "128:         options->stdio[i].flags = UV_INHERIT_STREAM;",
          "129:         options->stdio[i].data.stream = stream;",
          "130:       } else {",
          "131:         int fd = static_cast<int>(",
          "132:             stdio->Get(String::NewSymbol(\"fd\"))->IntegerValue());",
          "134:         options->stdio[i].flags = UV_INHERIT_FD;",
          "135:         options->stdio[i].data.fd = fd;",
          "136:       }",
          "137:     }",
          "138:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "169:       options.env[envc] = NULL;",
          "170:     }",
          "215:     if (js_options->Get(String::NewSymbol(\"windowsVerbatimArguments\"))->",
          "",
          "[Removed Lines]",
          "172:     uv_stdio_container_t stdio[3];",
          "173:     memset(stdio, 0, sizeof(stdio));",
          "175:     options.stdio = stdio;",
          "176:     options.stdio_count = 3;",
          "177:     options.stdio[0].flags = UV_IGNORE;",
          "178:     options.stdio[1].flags = UV_IGNORE;",
          "179:     options.stdio[2].flags = UV_IGNORE;",
          "182:     Local<Value> stdin_stream_v = js_options->Get(",
          "183:         String::NewSymbol(\"stdinStream\"));",
          "184:     if (!stdin_stream_v.IsEmpty() && stdin_stream_v->IsObject()) {",
          "185:       PipeWrap* stdin_wrap = PipeWrap::Unwrap(stdin_stream_v->ToObject());",
          "186:       options.stdio[0].flags = static_cast<uv_stdio_flags>(",
          "187:           UV_CREATE_PIPE | UV_WRITABLE_PIPE);",
          "188:       options.stdio[0].data.stream = reinterpret_cast<uv_stream_t*>(",
          "189:           stdin_wrap->UVHandle());",
          "190:     }",
          "193:     Local<Value> stdout_stream_v = js_options->Get(",
          "194:         String::NewSymbol(\"stdoutStream\"));",
          "195:     if (!stdout_stream_v.IsEmpty() && stdout_stream_v->IsObject()) {",
          "196:       PipeWrap* stdout_wrap = PipeWrap::Unwrap(stdout_stream_v->ToObject());",
          "197:       options.stdio[1].flags = static_cast<uv_stdio_flags>(",
          "198:           UV_CREATE_PIPE | UV_READABLE_PIPE);",
          "199:       options.stdio[1].data.stream = reinterpret_cast<uv_stream_t*>(",
          "200:           stdout_wrap->UVHandle());",
          "201:     }",
          "204:     Local<Value> stderr_stream_v = js_options->Get(",
          "205:         String::NewSymbol(\"stderrStream\"));",
          "206:     if (!stderr_stream_v.IsEmpty() && stderr_stream_v->IsObject()) {",
          "207:       PipeWrap* stderr_wrap = PipeWrap::Unwrap(stderr_stream_v->ToObject());",
          "208:       options.stdio[2].flags = static_cast<uv_stdio_flags>(",
          "209:           UV_CREATE_PIPE | UV_READABLE_PIPE);",
          "210:       options.stdio[2].data.stream = reinterpret_cast<uv_stream_t*>(",
          "211:           stderr_wrap->UVHandle());",
          "212:     }",
          "",
          "[Added Lines]",
          "228:     ParseStdioOptions(js_options, &options);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "238:       delete [] options.env;",
          "239:     }",
          "241:     return scope.Close(Integer::New(r));",
          "242:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "257:     delete[] options.stdio;",
          "",
          "---------------"
        ],
        "src/tcp_wrap.cc||src/tcp_wrap.cc": [
          "File: src/tcp_wrap.cc -> src/tcp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: }",
          "131: Handle<Value> TCPWrap::New(const Arguments& args) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: TCPWrap* TCPWrap::Unwrap(Local<Object> obj) {",
          "132:   assert(!obj.IsEmpty());",
          "133:   assert(obj->InternalFieldCount() > 0);",
          "134:   return static_cast<TCPWrap*>(obj->GetPointerFromInternalField(0));",
          "135: }",
          "138: uv_tcp_t* TCPWrap::UVHandle() {",
          "139:   return &handle_;",
          "140: }",
          "",
          "---------------"
        ],
        "src/tcp_wrap.h||src/tcp_wrap.h": [
          "File: src/tcp_wrap.h -> src/tcp_wrap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:   static TCPWrap* Unwrap(v8::Local<v8::Object> obj);",
          "32:   static void Initialize(v8::Handle<v8::Object> target);",
          "34:  private:",
          "35:   TCPWrap(v8::Handle<v8::Object> object);",
          "36:   ~TCPWrap();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:   uv_tcp_t* UVHandle();",
          "",
          "---------------"
        ],
        "src/tty_wrap.cc||src/tty_wrap.cc": [
          "File: src/tty_wrap.cc -> src/tty_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"req_wrap.h\"",
          "25: #include \"handle_wrap.h\"",
          "26: #include \"stream_wrap.h\"",
          "28: namespace node {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include \"tty_wrap.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: using v8::Integer;",
          "43: using v8::Undefined;",
          "118:       return v8::Undefined();",
          "140:   }",
          "163:   }",
          "168: }  // namespace node",
          "",
          "[Removed Lines]",
          "45: class TTYWrap : StreamWrap {",
          "46:  public:",
          "47:   static void Initialize(Handle<Object> target) {",
          "48:     StreamWrap::Initialize(target);",
          "50:     HandleScope scope;",
          "52:     Local<FunctionTemplate> t = FunctionTemplate::New(New);",
          "53:     t->SetClassName(String::NewSymbol(\"TTY\"));",
          "55:     t->InstanceTemplate()->SetInternalFieldCount(1);",
          "57:     NODE_SET_PROTOTYPE_METHOD(t, \"close\", HandleWrap::Close);",
          "58:     NODE_SET_PROTOTYPE_METHOD(t, \"unref\", HandleWrap::Unref);",
          "60:     NODE_SET_PROTOTYPE_METHOD(t, \"readStart\", StreamWrap::ReadStart);",
          "61:     NODE_SET_PROTOTYPE_METHOD(t, \"readStop\", StreamWrap::ReadStop);",
          "63:     NODE_SET_PROTOTYPE_METHOD(t, \"writeBuffer\", StreamWrap::WriteBuffer);",
          "64:     NODE_SET_PROTOTYPE_METHOD(t, \"writeAsciiString\", StreamWrap::WriteAsciiString);",
          "65:     NODE_SET_PROTOTYPE_METHOD(t, \"writeUtf8String\", StreamWrap::WriteUtf8String);",
          "66:     NODE_SET_PROTOTYPE_METHOD(t, \"writeUcs2String\", StreamWrap::WriteUcs2String);",
          "68:     NODE_SET_PROTOTYPE_METHOD(t, \"getWindowSize\", TTYWrap::GetWindowSize);",
          "69:     NODE_SET_PROTOTYPE_METHOD(t, \"setRawMode\", SetRawMode);",
          "71:     NODE_SET_METHOD(target, \"isTTY\", IsTTY);",
          "72:     NODE_SET_METHOD(target, \"guessHandleType\", GuessHandleType);",
          "74:     target->Set(String::NewSymbol(\"TTY\"), t->GetFunction());",
          "75:   }",
          "77:  private:",
          "78:   static Handle<Value> GuessHandleType(const Arguments& args) {",
          "79:     HandleScope scope;",
          "80:     int fd = args[0]->Int32Value();",
          "81:     assert(fd >= 0);",
          "83:     uv_handle_type t = uv_guess_handle(fd);",
          "85:     switch (t) {",
          "86:       case UV_TTY:",
          "87:         return scope.Close(String::New(\"TTY\"));",
          "89:       case UV_NAMED_PIPE:",
          "90:         return scope.Close(String::New(\"PIPE\"));",
          "92:       case UV_FILE:",
          "93:         return scope.Close(String::New(\"FILE\"));",
          "95:       default:",
          "96:         assert(0);",
          "97:         return v8::Undefined();",
          "98:     }",
          "99:   }",
          "101:   static Handle<Value> IsTTY(const Arguments& args) {",
          "102:     HandleScope scope;",
          "103:     int fd = args[0]->Int32Value();",
          "104:     assert(fd >= 0);",
          "105:     return uv_guess_handle(fd) == UV_TTY ? v8::True() : v8::False();",
          "106:   }",
          "108:   static Handle<Value> GetWindowSize(const Arguments& args) {",
          "109:     HandleScope scope;",
          "111:     UNWRAP(TTYWrap)",
          "113:     int width, height;",
          "114:     int r = uv_tty_get_winsize(&wrap->handle_, &width, &height);",
          "116:     if (r) {",
          "117:       SetErrno(uv_last_error(uv_default_loop()));",
          "119:     }",
          "121:     Local<v8::Array> a = v8::Array::New(2);",
          "122:     a->Set(0, Integer::New(width));",
          "123:     a->Set(1, Integer::New(height));",
          "125:     return scope.Close(a);",
          "126:   }",
          "128:   static Handle<Value> SetRawMode(const Arguments& args) {",
          "129:     HandleScope scope;",
          "131:     UNWRAP(TTYWrap)",
          "133:     int r = uv_tty_set_mode(&wrap->handle_, args[0]->IsTrue());",
          "135:     if (r) {",
          "136:       SetErrno(uv_last_error(uv_default_loop()));",
          "137:     }",
          "139:     return scope.Close(Integer::New(r));",
          "142:   static Handle<Value> New(const Arguments& args) {",
          "143:     HandleScope scope;",
          "148:     assert(args.IsConstructCall());",
          "150:     int fd = args[0]->Int32Value();",
          "151:     assert(fd >= 0);",
          "153:     TTYWrap* wrap = new TTYWrap(args.This(), fd, args[1]->IsTrue());",
          "154:     assert(wrap);",
          "155:     wrap->UpdateWriteQueueSize();",
          "157:     return scope.Close(args.This());",
          "158:   }",
          "160:   TTYWrap(Handle<Object> object, int fd, bool readable)",
          "161:       : StreamWrap(object, (uv_stream_t*)&handle_) {",
          "162:     uv_tty_init(uv_default_loop(), &handle_, fd, readable);",
          "165:   uv_tty_t handle_;",
          "166: };",
          "",
          "[Added Lines]",
          "47: void TTYWrap::Initialize(Handle<Object> target) {",
          "48:   StreamWrap::Initialize(target);",
          "50:   HandleScope scope;",
          "52:   Local<FunctionTemplate> t = FunctionTemplate::New(New);",
          "53:   t->SetClassName(String::NewSymbol(\"TTY\"));",
          "55:   t->InstanceTemplate()->SetInternalFieldCount(1);",
          "57:   NODE_SET_PROTOTYPE_METHOD(t, \"close\", HandleWrap::Close);",
          "58:   NODE_SET_PROTOTYPE_METHOD(t, \"unref\", HandleWrap::Unref);",
          "60:   NODE_SET_PROTOTYPE_METHOD(t, \"readStart\", StreamWrap::ReadStart);",
          "61:   NODE_SET_PROTOTYPE_METHOD(t, \"readStop\", StreamWrap::ReadStop);",
          "63:   NODE_SET_PROTOTYPE_METHOD(t, \"writeBuffer\", StreamWrap::WriteBuffer);",
          "64:   NODE_SET_PROTOTYPE_METHOD(t, \"writeAsciiString\", StreamWrap::WriteAsciiString);",
          "65:   NODE_SET_PROTOTYPE_METHOD(t, \"writeUtf8String\", StreamWrap::WriteUtf8String);",
          "66:   NODE_SET_PROTOTYPE_METHOD(t, \"writeUcs2String\", StreamWrap::WriteUcs2String);",
          "68:   NODE_SET_PROTOTYPE_METHOD(t, \"getWindowSize\", TTYWrap::GetWindowSize);",
          "69:   NODE_SET_PROTOTYPE_METHOD(t, \"setRawMode\", SetRawMode);",
          "71:   NODE_SET_METHOD(target, \"isTTY\", IsTTY);",
          "72:   NODE_SET_METHOD(target, \"guessHandleType\", GuessHandleType);",
          "74:   target->Set(String::NewSymbol(\"TTY\"), t->GetFunction());",
          "75: }",
          "78: TTYWrap* TTYWrap::Unwrap(Local<Object> obj) {",
          "79:   assert(!obj.IsEmpty());",
          "80:   assert(obj->InternalFieldCount() > 0);",
          "81:   return static_cast<TTYWrap*>(obj->GetPointerFromInternalField(0));",
          "82: }",
          "85: uv_tty_t* TTYWrap::UVHandle() {",
          "86:   return &handle_;",
          "87: }",
          "90: Handle<Value> TTYWrap::GuessHandleType(const Arguments& args) {",
          "91:   HandleScope scope;",
          "92:   int fd = args[0]->Int32Value();",
          "93:   assert(fd >= 0);",
          "95:   uv_handle_type t = uv_guess_handle(fd);",
          "97:   switch (t) {",
          "98:     case UV_TTY:",
          "99:       return scope.Close(String::New(\"TTY\"));",
          "101:     case UV_NAMED_PIPE:",
          "102:       return scope.Close(String::New(\"PIPE\"));",
          "104:     case UV_FILE:",
          "105:       return scope.Close(String::New(\"FILE\"));",
          "107:     default:",
          "108:       assert(0);",
          "110:   }",
          "111: }",
          "114: Handle<Value> TTYWrap::IsTTY(const Arguments& args) {",
          "115:   HandleScope scope;",
          "116:   int fd = args[0]->Int32Value();",
          "117:   assert(fd >= 0);",
          "118:   return uv_guess_handle(fd) == UV_TTY ? v8::True() : v8::False();",
          "119: }",
          "122: Handle<Value> TTYWrap::GetWindowSize(const Arguments& args) {",
          "123:   HandleScope scope;",
          "125:   UNWRAP(TTYWrap)",
          "127:   int width, height;",
          "128:   int r = uv_tty_get_winsize(&wrap->handle_, &width, &height);",
          "130:   if (r) {",
          "131:     SetErrno(uv_last_error(uv_default_loop()));",
          "132:     return v8::Undefined();",
          "135:   Local<v8::Array> a = v8::Array::New(2);",
          "136:   a->Set(0, Integer::New(width));",
          "137:   a->Set(1, Integer::New(height));",
          "139:   return scope.Close(a);",
          "140: }",
          "143: Handle<Value> TTYWrap::SetRawMode(const Arguments& args) {",
          "144:   HandleScope scope;",
          "146:   UNWRAP(TTYWrap)",
          "148:   int r = uv_tty_set_mode(&wrap->handle_, args[0]->IsTrue());",
          "150:   if (r) {",
          "151:     SetErrno(uv_last_error(uv_default_loop()));",
          "154:   return scope.Close(Integer::New(r));",
          "155: }",
          "158: Handle<Value> TTYWrap::New(const Arguments& args) {",
          "159:   HandleScope scope;",
          "164:   assert(args.IsConstructCall());",
          "166:   int fd = args[0]->Int32Value();",
          "167:   assert(fd >= 0);",
          "169:   TTYWrap* wrap = new TTYWrap(args.This(), fd, args[1]->IsTrue());",
          "170:   assert(wrap);",
          "171:   wrap->UpdateWriteQueueSize();",
          "173:   return scope.Close(args.This());",
          "174: }",
          "177: TTYWrap::TTYWrap(Handle<Object> object, int fd, bool readable)",
          "178:     : StreamWrap(object, (uv_stream_t*)&handle_) {",
          "179:   uv_tty_init(uv_default_loop(), &handle_, fd, readable);",
          "180: }",
          "",
          "---------------"
        ],
        "src/tty_wrap.h||src/tty_wrap.h": [
          "File: src/tty_wrap.h -> src/tty_wrap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifndef TTY_WRAP_H_",
          "23: #define TTY_WRAP_H_",
          "25: #include \"handle_wrap.h\"",
          "26: #include \"stream_wrap.h\"",
          "28: namespace node {",
          "30: using v8::Object;",
          "31: using v8::Handle;",
          "32: using v8::Local;",
          "33: using v8::Value;",
          "34: using v8::Arguments;",
          "37: class TTYWrap : StreamWrap {",
          "38:  public:",
          "39:   static void Initialize(Handle<Object> target);",
          "40:   static TTYWrap* Unwrap(Local<Object> obj);",
          "42:   uv_tty_t* UVHandle();",
          "44:  private:",
          "45:   TTYWrap(Handle<Object> object, int fd, bool readable);",
          "47:   static Handle<Value> GuessHandleType(const Arguments& args);",
          "48:   static Handle<Value> IsTTY(const Arguments& args);",
          "49:   static Handle<Value> GetWindowSize(const Arguments& args);",
          "50:   static Handle<Value> SetRawMode(const Arguments& args);",
          "51:   static Handle<Value> New(const Arguments& args);",
          "53:   uv_tty_t handle_;",
          "54: };",
          "56: } // namespace node",
          "58: #endif // TTY_WRAP_H_",
          "",
          "---------------"
        ],
        "src/udp_wrap.cc||src/udp_wrap.cc": [
          "File: src/udp_wrap.cc -> src/udp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"slab_allocator.h\"",
          "25: #include \"req_wrap.h\"",
          "26: #include \"handle_wrap.h\"",
          "28: #include <stdlib.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include \"udp_wrap.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60: static SlabAllocator slab_allocator(SLAB_SIZE);",
          "102: UDPWrap::UDPWrap(Handle<Object> object): HandleWrap(object,",
          "103:                                                     (uv_handle_t*)&handle_) {",
          "104:   int r = uv_udp_init(uv_default_loop(), &handle_);",
          "",
          "[Removed Lines]",
          "63: class UDPWrap: public HandleWrap {",
          "64: public:",
          "65:   static void Initialize(Handle<Object> target);",
          "66:   static Handle<Value> New(const Arguments& args);",
          "67:   static Handle<Value> Bind(const Arguments& args);",
          "68:   static Handle<Value> Send(const Arguments& args);",
          "69:   static Handle<Value> Bind6(const Arguments& args);",
          "70:   static Handle<Value> Send6(const Arguments& args);",
          "71:   static Handle<Value> RecvStart(const Arguments& args);",
          "72:   static Handle<Value> RecvStop(const Arguments& args);",
          "73:   static Handle<Value> GetSockName(const Arguments& args);",
          "74:   static Handle<Value> AddMembership(const Arguments& args);",
          "75:   static Handle<Value> DropMembership(const Arguments& args);",
          "76:   static Handle<Value> SetMulticastTTL(const Arguments& args);",
          "77:   static Handle<Value> SetMulticastLoopback(const Arguments& args);",
          "78:   static Handle<Value> SetBroadcast(const Arguments& args);",
          "79:   static Handle<Value> SetTTL(const Arguments& args);",
          "81: private:",
          "82:   UDPWrap(Handle<Object> object);",
          "83:   virtual ~UDPWrap();",
          "85:   static Handle<Value> DoBind(const Arguments& args, int family);",
          "86:   static Handle<Value> DoSend(const Arguments& args, int family);",
          "87:   static Handle<Value> SetMembership(const Arguments& args,",
          "88:                                      uv_membership membership);",
          "90:   static uv_buf_t OnAlloc(uv_handle_t* handle, size_t suggested_size);",
          "91:   static void OnSend(uv_udp_send_t* req, int status);",
          "92:   static void OnRecv(uv_udp_t* handle,",
          "93:                      ssize_t nread,",
          "94:                      uv_buf_t buf,",
          "95:                      struct sockaddr* addr,",
          "96:                      unsigned flags);",
          "98:   uv_udp_t handle_;",
          "99: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "426: }",
          "429: } // namespace node",
          "431: NODE_MODULE(node_udp_wrap, node::UDPWrap::Initialize)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391: UDPWrap* UDPWrap::Unwrap(Local<Object> obj) {",
          "392:   assert(!obj.IsEmpty());",
          "393:   assert(obj->InternalFieldCount() > 0);",
          "394:   return static_cast<UDPWrap*>(obj->GetPointerFromInternalField(0));",
          "395: }",
          "398: uv_udp_t* UDPWrap::UVHandle() {",
          "399:   return &handle_;",
          "400: }",
          "",
          "---------------"
        ],
        "src/udp_wrap.h||src/udp_wrap.h": [
          "File: src/udp_wrap.h -> src/udp_wrap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifndef UDP_WRAP_H_",
          "2: #define UDP_WRAP_H_",
          "4: #include \"node.h\"",
          "5: #include \"req_wrap.h\"",
          "6: #include \"handle_wrap.h\"",
          "8: namespace node {",
          "10: using v8::Object;",
          "11: using v8::Handle;",
          "12: using v8::Local;",
          "13: using v8::Value;",
          "14: using v8::String;",
          "15: using v8::Arguments;",
          "17: class UDPWrap: public HandleWrap {",
          "18:  public:",
          "19:   static void Initialize(Handle<Object> target);",
          "20:   static Handle<Value> New(const Arguments& args);",
          "21:   static Handle<Value> Bind(const Arguments& args);",
          "22:   static Handle<Value> Send(const Arguments& args);",
          "23:   static Handle<Value> Bind6(const Arguments& args);",
          "24:   static Handle<Value> Send6(const Arguments& args);",
          "25:   static Handle<Value> RecvStart(const Arguments& args);",
          "26:   static Handle<Value> RecvStop(const Arguments& args);",
          "27:   static Handle<Value> GetSockName(const Arguments& args);",
          "28:   static Handle<Value> AddMembership(const Arguments& args);",
          "29:   static Handle<Value> DropMembership(const Arguments& args);",
          "30:   static Handle<Value> SetMulticastTTL(const Arguments& args);",
          "31:   static Handle<Value> SetMulticastLoopback(const Arguments& args);",
          "32:   static Handle<Value> SetBroadcast(const Arguments& args);",
          "33:   static Handle<Value> SetTTL(const Arguments& args);",
          "34:   static UDPWrap* Unwrap(Local<Object> obj);",
          "36:   uv_udp_t* UVHandle();",
          "38:  private:",
          "39:   UDPWrap(Handle<Object> object);",
          "40:   virtual ~UDPWrap();",
          "42:   static Handle<Value> DoBind(const Arguments& args, int family);",
          "43:   static Handle<Value> DoSend(const Arguments& args, int family);",
          "44:   static Handle<Value> SetMembership(const Arguments& args,",
          "45:                                      uv_membership membership);",
          "47:   static uv_buf_t OnAlloc(uv_handle_t* handle, size_t suggested_size);",
          "48:   static void OnSend(uv_udp_send_t* req, int status);",
          "49:   static void OnRecv(uv_udp_t* handle,",
          "50:                      ssize_t nread,",
          "51:                      uv_buf_t buf,",
          "52:                      struct sockaddr* addr,",
          "53:                      unsigned flags);",
          "55:   uv_udp_t handle_;",
          "56: };",
          "58: } // namespace node",
          "60: #endif // UDP_WRAP_H_",
          "",
          "---------------"
        ],
        "test/simple/test-process-wrap.js||test/simple/test-process-wrap.js": [
          "File: test/simple/test-process-wrap.js -> test/simple/test-process-wrap.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: p.spawn({",
          "59:   file: process.execPath,",
          "60:   args: [process.execPath, '-v'],",
          "62: });",
          "",
          "[Removed Lines]",
          "61:   stdoutStream: pipe",
          "",
          "[Added Lines]",
          "61:   stdio: [",
          "62:     { type: 'ignore' },",
          "63:     { type: 'pipe', handle: pipe },",
          "64:     { type: 'ignore' }",
          "65:   ]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4fbe7a5fabbdcf9877fd1aa2b9e8c5ef40bd1306",
      "candidate_info": {
        "commit_hash": "4fbe7a5fabbdcf9877fd1aa2b9e8c5ef40bd1306",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/4fbe7a5fabbdcf9877fd1aa2b9e8c5ef40bd1306",
        "files": [
          "deps/uv/src/unix/freebsd.c",
          "deps/uv/test/test-hrtime.c"
        ],
        "message": "deps: upgrade libuv to be09be7",
        "before_after_code_files": [
          "deps/uv/src/unix/freebsd.c||deps/uv/src/unix/freebsd.c",
          "deps/uv/test/test-hrtime.c||deps/uv/test/test-hrtime.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/src/unix/freebsd.c||deps/uv/src/unix/freebsd.c": [
          "File: deps/uv/src/unix/freebsd.c -> deps/uv/src/unix/freebsd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:     return uv__new_sys_error(ENOMEM);",
          "262:   }",
          "265:     free(cp_times);",
          "266:     free(*cpu_infos);",
          "267:     return uv__new_sys_error(errno);",
          "",
          "[Removed Lines]",
          "264:   if (sysctlbyname(\"kern.cp_times\", &cp_times, &size, NULL, 0) < 0) {",
          "",
          "[Added Lines]",
          "264:   if (sysctlbyname(\"kern.cp_times\", cp_times, &size, NULL, 0) < 0) {",
          "",
          "---------------"
        ],
        "deps/uv/test/test-hrtime.c||deps/uv/test/test-hrtime.c": [
          "File: deps/uv/test/test-hrtime.c -> deps/uv/test/test-hrtime.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     ASSERT(diff > (uint64_t) 25 * NANOSEC / MILLISEC);",
          "51:     --i;",
          "52:   }",
          "53:   return 0;",
          "",
          "[Removed Lines]",
          "50:     ASSERT(diff < (uint64_t) 60 * NANOSEC / MILLISEC);",
          "",
          "[Added Lines]",
          "50:     ASSERT(diff < (uint64_t) 80 * NANOSEC / MILLISEC);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "483edbdf1aef40c208f6c96efbbcc3c34122e5f2",
      "candidate_info": {
        "commit_hash": "483edbdf1aef40c208f6c96efbbcc3c34122e5f2",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/483edbdf1aef40c208f6c96efbbcc3c34122e5f2",
        "files": [
          "lib/punycode.js"
        ],
        "message": "punycode: Update to v1.0.0",
        "before_after_code_files": [
          "lib/punycode.js||lipunycode.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/punycode.js||lipunycode.js": [
          "File: lib/punycode.js -> lipunycode.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:  delimiter = '-', // '\\x2D'",
          "38:  regexPunycode = /^xn--/,",
          "",
          "[Removed Lines]",
          "37:  regexNonASCII = /[^ -~]/, // matches unprintable ASCII chars + non-ASCII chars",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "283:     }",
          "285:     i += digit * w;",
          "288:     if (digit < t) {",
          "289:      break;",
          "",
          "[Removed Lines]",
          "286:     t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "406:     if (currentValue == n) {",
          "408:      for (q = delta, k = base; /* no condition */; k += base) {",
          "410:       if (q < t) {",
          "411:        break;",
          "412:       }",
          "",
          "[Removed Lines]",
          "409:       t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "478:   'version': '0.2.1',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2301eb69b1eb1c9a5b71fe96adb878290262b1f2",
      "candidate_info": {
        "commit_hash": "2301eb69b1eb1c9a5b71fe96adb878290262b1f2",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/2301eb69b1eb1c9a5b71fe96adb878290262b1f2",
        "files": [
          "deps/v8/src/objects.h"
        ],
        "message": "v8: force inlining of v8::internal::DescriptorArray methods",
        "before_after_code_files": [
          "deps/v8/src/objects.h||deps/v8/src/objects.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/src/objects.h||deps/v8/src/objects.h": [
          "File: deps/v8/src/objects.h -> deps/v8/src/objects.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2530:   void Sort(const WhitenessWitness&);",
          "2540:   bool Contains(String* name) { return kNotFound != Search(name); }",
          "",
          "[Removed Lines]",
          "2533:   inline int Search(String* name);",
          "2537:   inline int SearchWithCache(String* name);",
          "",
          "[Added Lines]",
          "2533:   INLINE(int Search(String* name));",
          "2537:   INLINE(int SearchWithCache(String* name));",
          "",
          "---------------"
        ]
      }
    }
  ]
}