{
  "cve_id": "CVE-2016-2328",
  "cve_desc": "libswscale/swscale_unscaled.c in FFmpeg before 2.8.6 does not validate certain height values, which allows remote attackers to cause a denial of service (out-of-bounds array read access) or possibly have unspecified other impact via a crafted .cine file, related to the bayer_to_rgb24_wrapper and bayer_to_yv12_wrapper functions.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "ad3b6fa7d83db7de951ed891649af93a47e74be5",
  "patch_info": {
    "commit_hash": "ad3b6fa7d83db7de951ed891649af93a47e74be5",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/ad3b6fa7d83db7de951ed891649af93a47e74be5",
    "files": [
      "libswscale/swscale_unscaled.c"
    ],
    "message": "swscale/swscale_unscaled: Fix odd height inputs for bayer_to_rgb24_wrapper()\n\nFixes: 372d2df1f04b49e25f109f07f90b1505/asan_heap-oob_2835d2e_8501_99e0114d7ba3a6db885d0b4684d200c1.cine\nFixes out of array read\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
    "before_after_code_files": [
      "libswscale/swscale_unscaled.c||libswscale/swscale_unscaled.c"
    ]
  },
  "patch_diff": {
    "libswscale/swscale_unscaled.c||libswscale/swscale_unscaled.c": [
      "File: libswscale/swscale_unscaled.c -> libswscale/swscale_unscaled.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1059:     default: return 0;",
      "1060:     }",
      "1062:     copy(srcPtr, srcStride[0], dstPtr, dstStride[0], c->srcW);",
      "1063:     srcPtr += 2 * srcStride[0];",
      "1064:     dstPtr += 2 * dstStride[0];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1062:     av_assert0(srcSliceH > 1);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1069:         dstPtr += 2 * dstStride[0];",
      "1070:     }",
      "1073:     return srcSliceH;",
      "1074: }",
      "",
      "[Removed Lines]",
      "1072:     copy(srcPtr, srcStride[0], dstPtr, dstStride[0], c->srcW);",
      "",
      "[Added Lines]",
      "1074:     if (i + 1 == srcSliceH) {",
      "1075:         copy(srcPtr, -srcStride[0], dstPtr, -dstStride[0], c->srcW);",
      "1076:     } else if (i < srcSliceH)",
      "1077:         copy(srcPtr, srcStride[0], dstPtr, dstStride[0], c->srcW);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "02b63246cf7f2c38e83defdbba0647ad24be8369",
      "candidate_info": {
        "commit_hash": "02b63246cf7f2c38e83defdbba0647ad24be8369",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/02b63246cf7f2c38e83defdbba0647ad24be8369",
        "files": [
          "libswscale/bayer_template.c",
          "libswscale/swscale_internal.h",
          "libswscale/swscale_unscaled.c",
          "libswscale/utils.c"
        ],
        "message": "libswscale: bayer to rgb24 & yv12 colorspace converters\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libswscale/bayer_template.c||libswscale/bayer_template.c",
          "libswscale/swscale_internal.h||libswscale/swscale_internal.h",
          "libswscale/swscale_unscaled.c||libswscale/swscale_unscaled.c",
          "libswscale/utils.c||libswscale/utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libswscale/swscale_unscaled.c||libswscale/swscale_unscaled.c"
          ],
          "candidate": [
            "libswscale/swscale_unscaled.c||libswscale/swscale_unscaled.c"
          ]
        }
      },
      "candidate_diff": {
        "libswscale/bayer_template.c||libswscale/bayer_template.c": [
          "File: libswscale/bayer_template.c -> libswscale/bayer_template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #if defined(BAYER_BGGR) || defined(BAYER_GBRG)",
          "23: #define BAYER_R       0",
          "24: #define BAYER_G       1",
          "25: #define BAYER_B       2",
          "26: #endif",
          "27: #if defined(BAYER_RGGB) || defined(BAYER_GRBG)",
          "28: #define BAYER_R       2",
          "29: #define BAYER_G       1",
          "30: #define BAYER_B       0",
          "31: #endif",
          "33: #if defined(BAYER_8)",
          "34: #define BAYER_READ(x) (x)",
          "35: #define BAYER_SIZEOF  1",
          "36: #define BAYER_SHIFT   0",
          "37: #endif",
          "38: #if defined(BAYER_16LE)",
          "39: #define BAYER_READ(x) AV_RL16(&x)",
          "40: #define BAYER_SIZEOF  2",
          "41: #define BAYER_SHIFT   8",
          "42: #endif",
          "43: #if defined(BAYER_16BE)",
          "44: #define BAYER_READ(x) AV_RB16(&x)",
          "45: #define BAYER_SIZEOF  2",
          "46: #define BAYER_SHIFT   8",
          "47: #endif",
          "49: #define S(y, x) BAYER_READ(src[(y)*src_stride + BAYER_SIZEOF*(x)])",
          "50: #define T(y, x) (unsigned int)S(y, x)",
          "51: #define R(y, x) dst[(y)*dst_stride + (x)*3 + BAYER_R]",
          "52: #define G(y, x) dst[(y)*dst_stride + (x)*3 + BAYER_G]",
          "53: #define B(y, x) dst[(y)*dst_stride + (x)*3 + BAYER_B]",
          "55: #if defined(BAYER_BGGR) || defined(BAYER_RGGB)",
          "56: #define BAYER_TO_RGB24_COPY \\",
          "57:     R(0, 0) = \\",
          "58:     R(0, 1) = \\",
          "59:     R(1, 1) = \\",
          "60:     R(1, 0) = S(1, 1) >> BAYER_SHIFT; \\",
          "61:     \\",
          "62:     G(0, 1) = S(0, 1) >> BAYER_SHIFT; \\",
          "63:     G(0, 0) = \\",
          "64:     G(1, 1) = (T(0, 1) + T(1, 0)) >> (1 + BAYER_SHIFT); \\",
          "65:     G(1, 0) = S(1, 0) >> BAYER_SHIFT; \\",
          "66:     \\",
          "67:     B(1, 1) = \\",
          "68:     B(0, 0) = \\",
          "69:     B(0, 1) = \\",
          "70:     B(1, 0) = S(0, 0) >> BAYER_SHIFT;",
          "71: #define BAYER_TO_RGB24_INTERPOLATE \\",
          "72:     R(0, 0) = (T(-1, -1) + T(-1,  1) + T(1, -1) + T(1, 1)) >> (2 + BAYER_SHIFT); \\",
          "73:     G(0, 0) = (T(-1,  0) + T( 0, -1) + T(0,  1) + T(1, 0)) >> (2 + BAYER_SHIFT); \\",
          "74:     B(0, 0) =  S(0, 0) >> BAYER_SHIFT; \\",
          "75:     \\",
          "76:     R(0, 1) = (T(-1, 1) + T(1, 1)) >> (1 + BAYER_SHIFT); \\",
          "77:     G(0, 1) =  S(0,  1) >> BAYER_SHIFT; \\",
          "78:     B(0, 1) = (T(0,  0) + T(0, 2)) >> (1 + BAYER_SHIFT); \\",
          "79:     \\",
          "80:     R(1, 0) = (T(1, -1) + T(1, 1)) >> (1 + BAYER_SHIFT); \\",
          "81:     G(1, 0) =  S(1,  0) >> BAYER_SHIFT; \\",
          "82:     B(1, 0) = (T(0,  0) + T(2, 0)) >> (1 + BAYER_SHIFT); \\",
          "83:     \\",
          "84:     R(1, 1) =  S(1, 1) >> BAYER_SHIFT; \\",
          "85:     G(1, 1) = (T(0, 1) + T(1, 0) + T(1, 2) + T(2, 1)) >> (2 + BAYER_SHIFT); \\",
          "86:     B(1, 1) = (T(0, 0) + T(0, 2) + T(2, 0) + T(2, 2)) >> (2 + BAYER_SHIFT);",
          "87: #else",
          "88: #define BAYER_TO_RGB24_COPY \\",
          "89:     R(0, 0) = \\",
          "90:     R(0, 1) = \\",
          "91:     R(1, 1) = \\",
          "92:     R(1, 0) = S(1, 0) >> BAYER_SHIFT; \\",
          "93:     \\",
          "94:     G(0, 0) = S(0, 0) >> BAYER_SHIFT; \\",
          "95:     G(1, 1) = S(1, 1) >> BAYER_SHIFT; \\",
          "96:     G(0, 1) = \\",
          "97:     G(1, 0) = (T(0, 0) + T(1, 1)) >> (1 + BAYER_SHIFT); \\",
          "98:     \\",
          "99:     B(1, 1) = \\",
          "100:     B(0, 0) = \\",
          "101:     B(0, 1) = \\",
          "102:     B(1, 0) = S(0, 1) >> BAYER_SHIFT;",
          "103: #define BAYER_TO_RGB24_INTERPOLATE \\",
          "104:     R(0, 0) = (T(-1, 0) + T(1, 0)) >> (1 + BAYER_SHIFT); \\",
          "105:     G(0, 0) =  S(0, 0) >> BAYER_SHIFT; \\",
          "106:     B(0, 0) = (T(0, -1) + T(0, 1)) >> (1 + BAYER_SHIFT); \\",
          "107:     \\",
          "108:     R(0, 1) = (T(-1, 0) + T(-1, 2) + T(1, 0) + T(1, 2)) >> (2 + BAYER_SHIFT); \\",
          "109:     G(0, 1) = (T(-1, 1) + T(0,  0) + T(0, 2) + T(1, 1)) >> (2 + BAYER_SHIFT); \\",
          "110:     B(0, 1) =  S(0, 1) >> BAYER_SHIFT; \\",
          "111:     \\",
          "112:     R(1, 0) =  S(1, 0) >> BAYER_SHIFT; \\",
          "113:     G(1, 0) = (T(0, 0)  + T(1, -1) + T(1,  1) + T(2, 0)) >> (2 + BAYER_SHIFT); \\",
          "114:     B(1, 0) = (T(0, -1) + T(0,  1) + T(2, -1) + T(2, 1)) >> (2 + BAYER_SHIFT); \\",
          "115:     \\",
          "116:     R(1, 1) = (T(1, 0) + T(1, 2)) >> (1 + BAYER_SHIFT); \\",
          "117:     G(1, 1) =  S(1, 1) >> BAYER_SHIFT; \\",
          "118:     B(1, 1) = (T(0, 1) + T(2, 1)) >> (1 + BAYER_SHIFT);",
          "119: #endif",
          "124: #define rgb24toyv12_2x2(src, dstY, dstU, dstV, luma_stride, src_stride, rgb2yuv) \\",
          "125:     ff_rgb24toyv12(src, dstY, dstV, dstU, 2, 2, luma_stride, 0, src_stride, rgb2yuv)",
          "127: static void BAYER_RENAME(rgb24_copy)(const uint8_t *src, int src_stride, uint8_t *dst, int dst_stride, int width)",
          "128: {",
          "129:     int i;",
          "130:     for (i = 0 ; i < width; i+= 2) {",
          "131:         BAYER_TO_RGB24_COPY",
          "132:         src += 2 * BAYER_SIZEOF;",
          "133:         dst += 6;",
          "134:     }",
          "135: }",
          "137: static void BAYER_RENAME(rgb24_interpolate)(const uint8_t *src, int src_stride, uint8_t *dst, int dst_stride, int width)",
          "138: {",
          "139:     int i;",
          "141:     BAYER_TO_RGB24_COPY",
          "142:     src += 2 * BAYER_SIZEOF;",
          "143:     dst += 6;",
          "145:     for (i = 2 ; i < width - 2; i+= 2) {",
          "146:         BAYER_TO_RGB24_INTERPOLATE",
          "147:         src += 2 * BAYER_SIZEOF;",
          "148:         dst += 6;",
          "149:     }",
          "151:     if (width > 2) {",
          "152:         BAYER_TO_RGB24_COPY",
          "153:     }",
          "154: }",
          "156: static void BAYER_RENAME(yv12_copy)(const uint8_t *src, int src_stride, uint8_t *dstY, uint8_t *dstU, uint8_t *dstV, int luma_stride, int width, int32_t *rgb2yuv)",
          "157: {",
          "158:     uint8_t dst[12];",
          "159:     const int dst_stride = 6;",
          "160:     int i;",
          "161:     for (i = 0 ; i < width; i+= 2) {",
          "162:         BAYER_TO_RGB24_COPY",
          "163:         rgb24toyv12_2x2(dst, dstY, dstU, dstV, luma_stride, dst_stride, rgb2yuv);",
          "164:         src  += 2 * BAYER_SIZEOF;",
          "165:         dstY += 2;",
          "166:         dstU++;",
          "167:         dstV++;",
          "168:     }",
          "169: }",
          "171: static void BAYER_RENAME(yv12_interpolate)(const uint8_t *src, int src_stride, uint8_t *dstY, uint8_t *dstU, uint8_t *dstV, int luma_stride, int width, int32_t *rgb2yuv)",
          "172: {",
          "173:     uint8_t dst[12];",
          "174:     const int dst_stride = 6;",
          "175:     int i;",
          "177:     BAYER_TO_RGB24_COPY",
          "178:     rgb24toyv12_2x2(dst, dstY, dstU, dstV, luma_stride, dst_stride, rgb2yuv);",
          "179:     src  += 2 * BAYER_SIZEOF;",
          "180:     dstY += 2;",
          "181:     dstU++;",
          "182:     dstV++;",
          "184:     for (i = 2 ; i < width - 2; i+= 2) {",
          "185:         BAYER_TO_RGB24_INTERPOLATE",
          "186:         rgb24toyv12_2x2(dst, dstY, dstU, dstV, luma_stride, dst_stride, rgb2yuv);",
          "187:         src  += 2 * BAYER_SIZEOF;",
          "188:         dstY += 2;",
          "189:         dstU++;",
          "190:         dstV++;",
          "191:     }",
          "193:     if (width > 2) {",
          "194:         BAYER_TO_RGB24_COPY",
          "195:         rgb24toyv12_2x2(dst, dstY, dstU, dstV, luma_stride, dst_stride, rgb2yuv);",
          "196:     }",
          "197: }",
          "199: #undef S",
          "200: #undef T",
          "201: #undef R",
          "202: #undef G",
          "203: #undef B",
          "204: #undef BAYER_TO_RGB24_COPY",
          "205: #undef BAYER_TO_RGB24_INTERPOLATE",
          "207: #undef BAYER_RENAME",
          "209: #undef BAYER_R",
          "210: #undef BAYER_G",
          "211: #undef BAYER_B",
          "212: #undef BAYER_READ",
          "213: #undef BAYER_SIZEOF",
          "214: #undef BAYER_SHIFT",
          "216: #if defined(BAYER_BGGR)",
          "217: #undef BAYER_BGGR",
          "218: #endif",
          "219: #if defined(BAYER_RGGB)",
          "220: #undef BAYER_RGGB",
          "221: #endif",
          "222: #if defined(BAYER_GBRG)",
          "223: #undef BAYER_GBRG",
          "224: #endif",
          "225: #if defined(BAYER_GRBG)",
          "226: #undef BAYER_GRBG",
          "227: #endif",
          "228: #if defined(BAYER_8)",
          "229: #undef BAYER_8",
          "230: #endif",
          "231: #if defined(BAYER_16LE)",
          "232: #undef BAYER_16LE",
          "233: #endif",
          "234: #if defined(BAYER_16BE)",
          "235: #undef BAYER_16BE",
          "236: #endif",
          "",
          "---------------"
        ],
        "libswscale/swscale_internal.h||libswscale/swscale_internal.h": [
          "File: libswscale/swscale_internal.h -> libswscale/swscale_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "749:         || (x) == AV_PIX_FMT_BGR24       \\",
          "750:     )",
          "752: #define isAnyRGB(x) \\",
          "753:     (           \\",
          "754:           isRGBinInt(x)       ||    \\",
          "755:           isBGRinInt(x)       ||    \\",
          "756:           isRGB(x)      \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "752: #define isBayer(x) ( \\",
          "753:            (x)==AV_PIX_FMT_BAYER_BGGR8    \\",
          "754:         || (x)==AV_PIX_FMT_BAYER_BGGR16LE \\",
          "755:         || (x)==AV_PIX_FMT_BAYER_BGGR16BE \\",
          "756:         || (x)==AV_PIX_FMT_BAYER_RGGB8    \\",
          "757:         || (x)==AV_PIX_FMT_BAYER_RGGB16LE \\",
          "758:         || (x)==AV_PIX_FMT_BAYER_RGGB16BE \\",
          "759:         || (x)==AV_PIX_FMT_BAYER_GBRG8    \\",
          "760:         || (x)==AV_PIX_FMT_BAYER_GBRG16LE \\",
          "761:         || (x)==AV_PIX_FMT_BAYER_GBRG16BE \\",
          "762:         || (x)==AV_PIX_FMT_BAYER_GRBG8    \\",
          "763:         || (x)==AV_PIX_FMT_BAYER_GRBG16LE \\",
          "764:         || (x)==AV_PIX_FMT_BAYER_GRBG16BE \\",
          "765:     )",
          "769:           isBayer(x)          ||    \\",
          "",
          "---------------"
        ],
        "libswscale/swscale_unscaled.c||libswscale/swscale_unscaled.c": [
          "File: libswscale/swscale_unscaled.c -> libswscale/swscale_unscaled.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "968:     return srcSliceH;",
          "969: }",
          "971: #define isRGBA32(x) (            \\",
          "972:            (x) == AV_PIX_FMT_ARGB   \\",
          "973:         || (x) == AV_PIX_FMT_RGBA   \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "971: #define BAYER_GBRG",
          "972: #define BAYER_8",
          "973: #define BAYER_RENAME(x) bayer_gbrg8_to_##x",
          "974: #include \"bayer_template.c\"",
          "976: #define BAYER_GBRG",
          "977: #define BAYER_16LE",
          "978: #define BAYER_RENAME(x) bayer_gbrg16le_to_##x",
          "979: #include \"bayer_template.c\"",
          "981: #define BAYER_GBRG",
          "982: #define BAYER_16BE",
          "983: #define BAYER_RENAME(x) bayer_gbrg16be_to_##x",
          "984: #include \"bayer_template.c\"",
          "986: #define BAYER_GRBG",
          "987: #define BAYER_8",
          "988: #define BAYER_RENAME(x) bayer_grbg8_to_##x",
          "989: #include \"bayer_template.c\"",
          "991: #define BAYER_GRBG",
          "992: #define BAYER_16LE",
          "993: #define BAYER_RENAME(x) bayer_grbg16le_to_##x",
          "994: #include \"bayer_template.c\"",
          "996: #define BAYER_GRBG",
          "997: #define BAYER_16BE",
          "998: #define BAYER_RENAME(x) bayer_grbg16be_to_##x",
          "999: #include \"bayer_template.c\"",
          "1001: #define BAYER_BGGR",
          "1002: #define BAYER_8",
          "1003: #define BAYER_RENAME(x) bayer_bggr8_to_##x",
          "1004: #include \"bayer_template.c\"",
          "1006: #define BAYER_BGGR",
          "1007: #define BAYER_16LE",
          "1008: #define BAYER_RENAME(x) bayer_bggr16le_to_##x",
          "1009: #include \"bayer_template.c\"",
          "1011: #define BAYER_BGGR",
          "1012: #define BAYER_16BE",
          "1013: #define BAYER_RENAME(x) bayer_bggr16be_to_##x",
          "1014: #include \"bayer_template.c\"",
          "1016: #define BAYER_RGGB",
          "1017: #define BAYER_8",
          "1018: #define BAYER_RENAME(x) bayer_rggb8_to_##x",
          "1019: #include \"bayer_template.c\"",
          "1021: #define BAYER_RGGB",
          "1022: #define BAYER_16LE",
          "1023: #define BAYER_RENAME(x) bayer_rggb16le_to_##x",
          "1024: #include \"bayer_template.c\"",
          "1026: #define BAYER_RGGB",
          "1027: #define BAYER_16BE",
          "1028: #define BAYER_RENAME(x) bayer_rggb16be_to_##x",
          "1029: #include \"bayer_template.c\"",
          "1031: static int bayer_to_rgb24_wrapper(SwsContext *c, const uint8_t* src[], int srcStride[], int srcSliceY,",
          "1032:                                   int srcSliceH, uint8_t* dst[], int dstStride[])",
          "1033: {",
          "1034:     uint8_t *dstPtr= dst[0];",
          "1035:     const uint8_t *srcPtr= src[0];",
          "1036:     int i;",
          "1037:     void (*copy)       (const uint8_t *src, int src_stride, uint8_t *dst, int dst_stride, int width);",
          "1038:     void (*interpolate)(const uint8_t *src, int src_stride, uint8_t *dst, int dst_stride, int width);",
          "1040:     switch(c->srcFormat) {",
          "1041: #define CASE(pixfmt, prefix) \\",
          "1042:     case pixfmt: copy        = bayer_##prefix##_to_rgb24_copy; \\",
          "1043:                  interpolate = bayer_##prefix##_to_rgb24_interpolate; \\",
          "1044:                  break;",
          "1045:     CASE(AV_PIX_FMT_BAYER_BGGR8,    bggr8)",
          "1046:     CASE(AV_PIX_FMT_BAYER_BGGR16LE, bggr16le)",
          "1047:     CASE(AV_PIX_FMT_BAYER_BGGR16BE, bggr16be)",
          "1048:     CASE(AV_PIX_FMT_BAYER_RGGB8,    rggb8)",
          "1049:     CASE(AV_PIX_FMT_BAYER_RGGB16LE, rggb16le)",
          "1050:     CASE(AV_PIX_FMT_BAYER_RGGB16BE, rggb16be)",
          "1051:     CASE(AV_PIX_FMT_BAYER_GBRG8,    gbrg8)",
          "1052:     CASE(AV_PIX_FMT_BAYER_GBRG16LE, gbrg16le)",
          "1053:     CASE(AV_PIX_FMT_BAYER_GBRG16BE, gbrg16be)",
          "1054:     CASE(AV_PIX_FMT_BAYER_GRBG8,    grbg8)",
          "1055:     CASE(AV_PIX_FMT_BAYER_GRBG16LE, grbg16le)",
          "1056:     CASE(AV_PIX_FMT_BAYER_GRBG16BE, grbg16be)",
          "1057: #undef CASE",
          "1058:     default: return 0;",
          "1059:     }",
          "1061:     copy(srcPtr, srcStride[0], dstPtr, dstStride[0], c->srcW);",
          "1062:     srcPtr += 2 * srcStride[0];",
          "1063:     dstPtr += 2 * dstStride[0];",
          "1065:     for (i = 2; i < srcSliceH - 2; i += 2) {",
          "1066:         interpolate(srcPtr, srcStride[0], dstPtr, dstStride[0], c->srcW);",
          "1067:         srcPtr += 2 * srcStride[0];",
          "1068:         dstPtr += 2 * dstStride[0];",
          "1069:     }",
          "1071:     copy(srcPtr, srcStride[0], dstPtr, dstStride[0], c->srcW);",
          "1072:     return srcSliceH;",
          "1073: }",
          "1075: static int bayer_to_yv12_wrapper(SwsContext *c, const uint8_t* src[], int srcStride[], int srcSliceY,",
          "1076:                                  int srcSliceH, uint8_t* dst[], int dstStride[])",
          "1077: {",
          "1078:     const uint8_t *srcPtr= src[0];",
          "1079:     uint8_t *dstY= dst[0];",
          "1080:     uint8_t *dstU= dst[1];",
          "1081:     uint8_t *dstV= dst[2];",
          "1082:     int i;",
          "1083:     void (*copy)       (const uint8_t *src, int src_stride, uint8_t *dstY, uint8_t *dstU, uint8_t *dstV, int luma_stride, int width, int32_t *rgb2yuv);",
          "1084:     void (*interpolate)(const uint8_t *src, int src_stride, uint8_t *dstY, uint8_t *dstU, uint8_t *dstV, int luma_stride, int width, int32_t *rgb2yuv);",
          "1086:     switch(c->srcFormat) {",
          "1087: #define CASE(pixfmt, prefix) \\",
          "1088:     case pixfmt: copy        = bayer_##prefix##_to_yv12_copy; \\",
          "1089:                  interpolate = bayer_##prefix##_to_yv12_interpolate; \\",
          "1090:                  break;",
          "1091:     CASE(AV_PIX_FMT_BAYER_BGGR8,    bggr8)",
          "1092:     CASE(AV_PIX_FMT_BAYER_BGGR16LE, bggr16le)",
          "1093:     CASE(AV_PIX_FMT_BAYER_BGGR16BE, bggr16be)",
          "1094:     CASE(AV_PIX_FMT_BAYER_RGGB8,    rggb8)",
          "1095:     CASE(AV_PIX_FMT_BAYER_RGGB16LE, rggb16le)",
          "1096:     CASE(AV_PIX_FMT_BAYER_RGGB16BE, rggb16be)",
          "1097:     CASE(AV_PIX_FMT_BAYER_GBRG8,    gbrg8)",
          "1098:     CASE(AV_PIX_FMT_BAYER_GBRG16LE, gbrg16le)",
          "1099:     CASE(AV_PIX_FMT_BAYER_GBRG16BE, gbrg16be)",
          "1100:     CASE(AV_PIX_FMT_BAYER_GRBG8,    grbg8)",
          "1101:     CASE(AV_PIX_FMT_BAYER_GRBG16LE, grbg16le)",
          "1102:     CASE(AV_PIX_FMT_BAYER_GRBG16BE, grbg16be)",
          "1103: #undef CASE",
          "1104:     default: return 0;",
          "1105:     }",
          "1107:     copy(srcPtr, srcStride[0], dstY, dstU, dstV, dstStride[0], c->srcW, c->input_rgb2yuv_table);",
          "1108:     srcPtr += 2 * srcStride[0];",
          "1109:     dstY   += 2 * dstStride[0];",
          "1110:     dstU   +=     dstStride[1];",
          "1111:     dstV   +=     dstStride[1];",
          "1113:     for (i = 2; i < srcSliceH - 2; i += 2) {",
          "1114:         interpolate(srcPtr, srcStride[0], dstY, dstU, dstV, dstStride[0], c->srcW, c->input_rgb2yuv_table);",
          "1115:         srcPtr += 2 * srcStride[0];",
          "1116:         dstY   += 2 * dstStride[0];",
          "1117:         dstU   +=     dstStride[1];",
          "1118:         dstV   +=     dstStride[1];",
          "1119:     }",
          "1121:     copy(srcPtr, srcStride[0], dstY, dstU, dstV, dstStride[0], c->srcW, c->input_rgb2yuv_table);",
          "1122:     return srcSliceH;",
          "1123: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1491:         isPackedRGB(srcFormat) && dstFormat == AV_PIX_FMT_GBRP)",
          "1492:         c->swscale = rgbToPlanarRgbWrapper;",
          "1496:         IS_DIFFERENT_ENDIANESS(srcFormat, dstFormat, AV_PIX_FMT_BGR48)  ||",
          "1497:         IS_DIFFERENT_ENDIANESS(srcFormat, dstFormat, AV_PIX_FMT_BGRA64) ||",
          "1498:         IS_DIFFERENT_ENDIANESS(srcFormat, dstFormat, AV_PIX_FMT_BGR555) ||",
          "",
          "[Removed Lines]",
          "1495:     if (IS_DIFFERENT_ENDIANESS(srcFormat, dstFormat, AV_PIX_FMT_BGR444) ||",
          "",
          "[Added Lines]",
          "1648:     if (isBayer(srcFormat)) {",
          "1649:         if (dstFormat == AV_PIX_FMT_RGB24)",
          "1650:             c->swscale = bayer_to_rgb24_wrapper;",
          "1651:         else if (dstFormat == AV_PIX_FMT_YUV420P)",
          "1652:             c->swscale = bayer_to_yv12_wrapper;",
          "1653:         else if (!isBayer(dstFormat)) {",
          "1654:             av_log(c, AV_LOG_ERROR, \"unsupported bayer conversion\\n\");",
          "1655:             av_assert0(0);",
          "1656:         }",
          "1657:     }",
          "1660:     if (IS_DIFFERENT_ENDIANESS(srcFormat, dstFormat, AV_PIX_FMT_BAYER_BGGR16) ||",
          "1661:         IS_DIFFERENT_ENDIANESS(srcFormat, dstFormat, AV_PIX_FMT_BAYER_RGGB16) ||",
          "1662:         IS_DIFFERENT_ENDIANESS(srcFormat, dstFormat, AV_PIX_FMT_BAYER_GBRG16) ||",
          "1663:         IS_DIFFERENT_ENDIANESS(srcFormat, dstFormat, AV_PIX_FMT_BAYER_GRBG16) ||",
          "1664:         IS_DIFFERENT_ENDIANESS(srcFormat, dstFormat, AV_PIX_FMT_BGR444) ||",
          "",
          "---------------"
        ],
        "libswscale/utils.c||libswscale/utils.c": [
          "File: libswscale/utils.c -> libswscale/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:     [AV_PIX_FMT_GBRAP]       = { 1, 1 },",
          "208:     [AV_PIX_FMT_GBRAP16LE]   = { 1, 0 },",
          "209:     [AV_PIX_FMT_GBRAP16BE]   = { 1, 0 },",
          "210: };",
          "212: int sws_isSupportedInput(enum AVPixelFormat pix_fmt)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "210:     [AV_PIX_FMT_BAYER_BGGR8] = { 1, 0 },",
          "211:     [AV_PIX_FMT_BAYER_RGGB8] = { 1, 0 },",
          "212:     [AV_PIX_FMT_BAYER_GBRG8] = { 1, 0 },",
          "213:     [AV_PIX_FMT_BAYER_GRBG8] = { 1, 0 },",
          "214:     [AV_PIX_FMT_BAYER_BGGR16LE] = { 1, 0 },",
          "215:     [AV_PIX_FMT_BAYER_BGGR16BE] = { 1, 0 },",
          "216:     [AV_PIX_FMT_BAYER_RGGB16LE] = { 1, 0 },",
          "217:     [AV_PIX_FMT_BAYER_RGGB16BE] = { 1, 0 },",
          "218:     [AV_PIX_FMT_BAYER_GBRG16LE] = { 1, 0 },",
          "219:     [AV_PIX_FMT_BAYER_GBRG16BE] = { 1, 0 },",
          "220:     [AV_PIX_FMT_BAYER_GRBG16LE] = { 1, 0 },",
          "221:     [AV_PIX_FMT_BAYER_GRBG16BE] = { 1, 0 },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aea2f5a6eeb75bf69853d3ba12128446bbe47a0f",
      "candidate_info": {
        "commit_hash": "aea2f5a6eeb75bf69853d3ba12128446bbe47a0f",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/aea2f5a6eeb75bf69853d3ba12128446bbe47a0f",
        "files": [
          "libswscale/swscale_unscaled.c"
        ],
        "message": "swscale/swscale_unscaled: Fix odd height inputs for bayer_to_yv12_wrapper()\n\nFixes: 372d2df1f04b49e25f109f07f90b1505/asan_heap-oob_2835d2e_8501_99e0114d7ba3a6db885d0b4684d200c1.cine\nFixes out of array read\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit 757248ea3cd917a7755cb15f817a9b1f15578718)\n\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libswscale/swscale_unscaled.c||libswscale/swscale_unscaled.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libswscale/swscale_unscaled.c||libswscale/swscale_unscaled.c"
          ],
          "candidate": [
            "libswscale/swscale_unscaled.c||libswscale/swscale_unscaled.c"
          ]
        }
      },
      "candidate_diff": {
        "libswscale/swscale_unscaled.c||libswscale/swscale_unscaled.c": [
          "File: libswscale/swscale_unscaled.c -> libswscale/swscale_unscaled.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1110:     default: return 0;",
          "1111:     }",
          "1113:     copy(srcPtr, srcStride[0], dstY, dstU, dstV, dstStride[0], c->srcW, c->input_rgb2yuv_table);",
          "1114:     srcPtr += 2 * srcStride[0];",
          "1115:     dstY   += 2 * dstStride[0];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1113:     av_assert0(srcSliceH > 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1124:         dstV   +=     dstStride[1];",
          "1125:     }",
          "1128:     return srcSliceH;",
          "1129: }",
          "",
          "[Removed Lines]",
          "1127:     copy(srcPtr, srcStride[0], dstY, dstU, dstV, dstStride[0], c->srcW, c->input_rgb2yuv_table);",
          "",
          "[Added Lines]",
          "1129:     if (i + 1 == srcSliceH) {",
          "1130:         copy(srcPtr, -srcStride[0], dstY, dstU, dstV, -dstStride[0], c->srcW, c->input_rgb2yuv_table);",
          "1131:     } else if (i < srcSliceH)",
          "1132:         copy(srcPtr, srcStride[0], dstY, dstU, dstV, dstStride[0], c->srcW, c->input_rgb2yuv_table);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af384c87035423c8f465a171ac73645e76821c94",
      "candidate_info": {
        "commit_hash": "af384c87035423c8f465a171ac73645e76821c94",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/af384c87035423c8f465a171ac73645e76821c94",
        "files": [
          "libswscale/swscale_unscaled.c"
        ],
        "message": "swscale/swscale_unscaled: Fix odd height inputs for bayer_to_yv12_wrapper()\n\nFixes: 372d2df1f04b49e25f109f07f90b1505/asan_heap-oob_2835d2e_8501_99e0114d7ba3a6db885d0b4684d200c1.cine\nFixes out of array read\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit 757248ea3cd917a7755cb15f817a9b1f15578718)\n\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libswscale/swscale_unscaled.c||libswscale/swscale_unscaled.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libswscale/swscale_unscaled.c||libswscale/swscale_unscaled.c"
          ],
          "candidate": [
            "libswscale/swscale_unscaled.c||libswscale/swscale_unscaled.c"
          ]
        }
      },
      "candidate_diff": {
        "libswscale/swscale_unscaled.c||libswscale/swscale_unscaled.c": [
          "File: libswscale/swscale_unscaled.c -> libswscale/swscale_unscaled.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1109:     default: return 0;",
          "1110:     }",
          "1112:     copy(srcPtr, srcStride[0], dstY, dstU, dstV, dstStride[0], c->srcW, c->input_rgb2yuv_table);",
          "1113:     srcPtr += 2 * srcStride[0];",
          "1114:     dstY   += 2 * dstStride[0];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1112:     av_assert0(srcSliceH > 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1123:         dstV   +=     dstStride[1];",
          "1124:     }",
          "1127:     return srcSliceH;",
          "1128: }",
          "",
          "[Removed Lines]",
          "1126:     copy(srcPtr, srcStride[0], dstY, dstU, dstV, dstStride[0], c->srcW, c->input_rgb2yuv_table);",
          "",
          "[Added Lines]",
          "1128:     if (i + 1 == srcSliceH) {",
          "1129:         copy(srcPtr, -srcStride[0], dstY, dstU, dstV, -dstStride[0], c->srcW, c->input_rgb2yuv_table);",
          "1130:     } else if (i < srcSliceH)",
          "1131:         copy(srcPtr, srcStride[0], dstY, dstU, dstV, dstStride[0], c->srcW, c->input_rgb2yuv_table);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6eb76b34ca24deabc42b17d2f8fb8b407d20942f",
      "candidate_info": {
        "commit_hash": "6eb76b34ca24deabc42b17d2f8fb8b407d20942f",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/6eb76b34ca24deabc42b17d2f8fb8b407d20942f",
        "files": [
          "libswscale/swscale_unscaled.c"
        ],
        "message": "swscale/swscale_unscaled: Fix odd height inputs for bayer_to_yv12_wrapper()\n\nFixes: 372d2df1f04b49e25f109f07f90b1505/asan_heap-oob_2835d2e_8501_99e0114d7ba3a6db885d0b4684d200c1.cine\nFixes out of array read\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit 757248ea3cd917a7755cb15f817a9b1f15578718)\n\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libswscale/swscale_unscaled.c||libswscale/swscale_unscaled.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libswscale/swscale_unscaled.c||libswscale/swscale_unscaled.c"
          ],
          "candidate": [
            "libswscale/swscale_unscaled.c||libswscale/swscale_unscaled.c"
          ]
        }
      },
      "candidate_diff": {
        "libswscale/swscale_unscaled.c||libswscale/swscale_unscaled.c": [
          "File: libswscale/swscale_unscaled.c -> libswscale/swscale_unscaled.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1110:     default: return 0;",
          "1111:     }",
          "1113:     copy(srcPtr, srcStride[0], dstY, dstU, dstV, dstStride[0], c->srcW, c->input_rgb2yuv_table);",
          "1114:     srcPtr += 2 * srcStride[0];",
          "1115:     dstY   += 2 * dstStride[0];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1113:     av_assert0(srcSliceH > 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1124:         dstV   +=     dstStride[1];",
          "1125:     }",
          "1128:     return srcSliceH;",
          "1129: }",
          "",
          "[Removed Lines]",
          "1127:     copy(srcPtr, srcStride[0], dstY, dstU, dstV, dstStride[0], c->srcW, c->input_rgb2yuv_table);",
          "",
          "[Added Lines]",
          "1129:     if (i + 1 == srcSliceH) {",
          "1130:         copy(srcPtr, -srcStride[0], dstY, dstU, dstV, -dstStride[0], c->srcW, c->input_rgb2yuv_table);",
          "1131:     } else if (i < srcSliceH)",
          "1132:         copy(srcPtr, srcStride[0], dstY, dstU, dstV, dstStride[0], c->srcW, c->input_rgb2yuv_table);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a88eef93bd1a175465d61d162d42e4921549ba2",
      "candidate_info": {
        "commit_hash": "1a88eef93bd1a175465d61d162d42e4921549ba2",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/1a88eef93bd1a175465d61d162d42e4921549ba2",
        "files": [
          "libswscale/swscale_unscaled.c"
        ],
        "message": "swscale/swscale_unscaled: Fix odd height inputs for bayer_to_yv12_wrapper()\n\nFixes: 372d2df1f04b49e25f109f07f90b1505/asan_heap-oob_2835d2e_8501_99e0114d7ba3a6db885d0b4684d200c1.cine\nFixes out of array read\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit 757248ea3cd917a7755cb15f817a9b1f15578718)\n\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libswscale/swscale_unscaled.c||libswscale/swscale_unscaled.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libswscale/swscale_unscaled.c||libswscale/swscale_unscaled.c"
          ],
          "candidate": [
            "libswscale/swscale_unscaled.c||libswscale/swscale_unscaled.c"
          ]
        }
      },
      "candidate_diff": {
        "libswscale/swscale_unscaled.c||libswscale/swscale_unscaled.c": [
          "File: libswscale/swscale_unscaled.c -> libswscale/swscale_unscaled.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1110:     default: return 0;",
          "1111:     }",
          "1113:     copy(srcPtr, srcStride[0], dstY, dstU, dstV, dstStride[0], c->srcW, c->input_rgb2yuv_table);",
          "1114:     srcPtr += 2 * srcStride[0];",
          "1115:     dstY   += 2 * dstStride[0];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1113:     av_assert0(srcSliceH > 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1124:         dstV   +=     dstStride[1];",
          "1125:     }",
          "1128:     return srcSliceH;",
          "1129: }",
          "",
          "[Removed Lines]",
          "1127:     copy(srcPtr, srcStride[0], dstY, dstU, dstV, dstStride[0], c->srcW, c->input_rgb2yuv_table);",
          "",
          "[Added Lines]",
          "1129:     if (i + 1 == srcSliceH) {",
          "1130:         copy(srcPtr, -srcStride[0], dstY, dstU, dstV, -dstStride[0], c->srcW, c->input_rgb2yuv_table);",
          "1131:     } else if (i < srcSliceH)",
          "1132:         copy(srcPtr, srcStride[0], dstY, dstU, dstV, dstStride[0], c->srcW, c->input_rgb2yuv_table);",
          "",
          "---------------"
        ]
      }
    }
  ]
}