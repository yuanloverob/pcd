{
  "cve_id": "CVE-2021-3968",
  "cve_desc": "vim is vulnerable to Heap-based Buffer Overflow",
  "repo": "vim/vim",
  "patch_hash": "a062006b9de0b2947ab5fb376c6e67ef92a8cd69",
  "patch_info": {
    "commit_hash": "a062006b9de0b2947ab5fb376c6e67ef92a8cd69",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/a062006b9de0b2947ab5fb376c6e67ef92a8cd69",
    "files": [
      "src/normal.c",
      "src/testdir/test_edit.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.3610: crash when ModeChanged triggered too early\n\nProblem:    Crash when ModeChanged triggered too early.\nSolution:   Trigger ModeChanged after setting VIsual.",
    "before_after_code_files": [
      "src/normal.c||src/normal.c",
      "src/testdir/test_edit.vim||src/testdir/test_edit.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/normal.c||src/normal.c": [
      "File: src/normal.c -> src/normal.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5778:     VIsual_mode = c;",
      "5779:     VIsual_active = TRUE;",
      "5780:     VIsual_reselect = TRUE;",
      "",
      "[Removed Lines]",
      "5781:     trigger_modechanged();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5793:     foldAdjustVisual();",
      "5794: #endif",
      "5796:     setmouse();",
      "5797: #ifdef FEAT_CONCEAL",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5795:     trigger_modechanged();",
      "",
      "---------------"
    ],
    "src/testdir/test_edit.vim||src/testdir/test_edit.vim": [
      "File: src/testdir/test_edit.vim -> src/testdir/test_edit.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "2037: func Test_recursive_ModeChanged()",
      "2038:   au! ModeChanged * norm 0u",
      "2039:   sil! norm \u0016",
      "2041: endfunc",
      "2043: \" Test toggling of input method. See :help i_CTRL-^",
      "",
      "[Removed Lines]",
      "2040:   au!",
      "",
      "[Added Lines]",
      "2040:   au! ModeChanged",
      "2041: endfunc",
      "2043: func Test_ModeChanged_starts_visual()",
      "2044:   \" This was triggering ModeChanged before setting VIsual, causing a crash.",
      "2045:   au! ModeChanged * norm 0u",
      "2046:   sil! norm \u0016",
      "2048:   au! ModeChanged",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "758: static int included_patches[] =",
      "761:     3609,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "761:     3610,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3075a45592fe76f2febb6321632a23e352efe949",
      "candidate_info": {
        "commit_hash": "3075a45592fe76f2febb6321632a23e352efe949",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/3075a45592fe76f2febb6321632a23e352efe949",
        "files": [
          "src/insexpand.c",
          "src/misc1.c",
          "src/proto/misc1.pro",
          "src/register.c",
          "src/structs.h",
          "src/testdir/test_edit.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.3609: internal error when ModeChanged is triggered recursively\n\nProblem:    Internal error when ModeChanged is triggered when v:event is\n            already in use.\nSolution:   Save and restore v:event if needed.",
        "before_after_code_files": [
          "src/insexpand.c||src/insexpand.c",
          "src/misc1.c||src/misc1.c",
          "src/proto/misc1.pro||src/proto/misc1.pro",
          "src/register.c||src/register.c",
          "src/structs.h||src/structs.h",
          "src/testdir/test_edit.vim||src/testdir/test_edit.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_edit.vim||src/testdir/test_edit.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_edit.vim||src/testdir/test_edit.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/insexpand.c||src/insexpand.c": [
          "File: src/insexpand.c -> src/insexpand.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "962:     return (i >= 2);",
          "963: }",
          "",
          "[Removed Lines]",
          "965: #ifdef FEAT_EVAL",
          "",
          "[Added Lines]",
          "965: #if defined(FEAT_EVAL) || defined(PROTO)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "993:     dict_T     *v_event;",
          "994:     dict_T     *item;",
          "995:     static int     recursive = FALSE;",
          "997:     if (recursive)",
          "998:  return;",
          "1001:     if (cur < 0)",
          "1002:  item = dict_alloc();",
          "1003:     else",
          "1004:  item = ins_compl_dict_alloc(compl_curr_match);",
          "1005:     if (item == NULL)",
          "1006:  return;",
          "1007:     dict_add_dict(v_event, \"completed_item\", item);",
          "1008:     pum_set_event_info(v_event);",
          "1009:     dict_set_items_ro(v_event);",
          "",
          "[Removed Lines]",
          "1000:     v_event = get_vim_var_dict(VV_EVENT);",
          "",
          "[Added Lines]",
          "996:     save_v_event_T  save_v_event;",
          "1007:     v_event = get_v_event(&save_v_event);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1014:     textwinlock--;",
          "1015:     recursive = FALSE;",
          "1019: }",
          "1020: #endif",
          "",
          "[Removed Lines]",
          "1017:     dict_free_contents(v_event);",
          "1018:     hash_init(&v_event->dv_hashtab);",
          "",
          "[Added Lines]",
          "1018:     restore_v_event(v_event, &save_v_event);",
          "",
          "---------------"
        ],
        "src/misc1.c||src/misc1.c": [
          "File: src/misc1.c -> src/misc1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2654:     return path_is_url(p);",
          "2655: }",
          "2660:     void",
          "2661: trigger_modechanged()",
          "2662: {",
          "2664:     dict_T     *v_event;",
          "2665:     typval_T     rettv;",
          "2666:     typval_T     tv[2];",
          "2667:     char_u     *pat_pre;",
          "2668:     char_u     *pat;",
          "2670:     if (!has_modechanged())",
          "2671:  return;",
          "",
          "[Removed Lines]",
          "2663: #if defined(FEAT_EVAL) || defined(PROTO)",
          "",
          "[Added Lines]",
          "2657: #if defined(FEAT_EVAL) || defined(PROTO)",
          "2662:     dict_T *",
          "2663: get_v_event(save_v_event_T *sve)",
          "2664: {",
          "2665:     dict_T *v_event = get_vim_var_dict(VV_EVENT);",
          "2667:     if (v_event->dv_hashtab.ht_used > 0)",
          "2668:     {",
          "2670:  sve->sve_did_save = TRUE;",
          "2671:  sve->sve_hashtab = v_event->dv_hashtab;",
          "2672:  hash_init(&v_event->dv_hashtab);",
          "2673:     }",
          "2674:     else",
          "2675:  sve->sve_did_save = FALSE;",
          "2676:     return v_event;",
          "2677: }",
          "2679:     void",
          "2680: restore_v_event(dict_T *v_event, save_v_event_T *sve)",
          "2681: {",
          "2682:     dict_free_contents(v_event);",
          "2683:     if (sve->sve_did_save)",
          "2684:  v_event->dv_hashtab = sve->sve_hashtab;",
          "2685:     else",
          "2686:  hash_init(&v_event->dv_hashtab);",
          "2687: }",
          "2688: #endif",
          "2696: #ifdef FEAT_EVAL",
          "2702:     save_v_event_T  save_v_event;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2680:  return;",
          "2681:     }",
          "2684:     (void)dict_add_string(v_event, \"new_mode\", rettv.vval.v_string);",
          "2685:     (void)dict_add_string(v_event, \"old_mode\", last_mode);",
          "2686:     dict_set_items_ro(v_event);",
          "",
          "[Removed Lines]",
          "2683:     v_event = get_vim_var_dict(VV_EVENT);",
          "",
          "[Added Lines]",
          "2717:     v_event = get_v_event(&save_v_event);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2694:     STRCPY(last_mode, rettv.vval.v_string);",
          "2696:     vim_free(pat);",
          "2699:     vim_free(rettv.vval.v_string);",
          "2700: #endif",
          "2701: }",
          "",
          "[Removed Lines]",
          "2697:     dict_free_contents(v_event);",
          "2698:     hash_init(&v_event->dv_hashtab);",
          "",
          "[Added Lines]",
          "2731:     restore_v_event(v_event, &save_v_event);",
          "",
          "---------------"
        ],
        "src/proto/misc1.pro||src/proto/misc1.pro": [
          "File: src/proto/misc1.pro -> src/proto/misc1.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: char_u *get_isolated_shell_name(void);",
          "48: int path_is_url(char_u *p);",
          "49: int path_with_url(char_u *fname);",
          "50: void trigger_modechanged(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: dict_T *get_v_event(save_v_event_T *sve);",
          "51: void restore_v_event(dict_T *v_event, save_v_event_T *sve);",
          "",
          "---------------"
        ],
        "src/register.c||src/register.c": [
          "File: src/register.c -> src/register.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "991:     void",
          "992: yank_do_autocmd(oparg_T *oap, yankreg_T *reg)",
          "993: {",
          "1001:     if (recursive)",
          "1002:  return;",
          "1006:     list = list_alloc();",
          "1007:     if (list == NULL)",
          "",
          "[Removed Lines]",
          "994:     static int recursive = FALSE;",
          "995:     dict_T *v_event;",
          "996:     list_T *list;",
          "997:     int  n;",
          "998:     char_u buf[NUMBUFLEN + 2];",
          "999:     long reglen = 0;",
          "1004:     v_event = get_vim_var_dict(VV_EVENT);",
          "",
          "[Added Lines]",
          "994:     static int     recursive = FALSE;",
          "995:     dict_T     *v_event;",
          "996:     list_T     *list;",
          "997:     int      n;",
          "998:     char_u     buf[NUMBUFLEN + 2];",
          "999:     long     reglen = 0;",
          "1000:     save_v_event_T  save_v_event;",
          "1005:     v_event = get_v_event(&save_v_event);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1045:     recursive = FALSE;",
          "1050: }",
          "1051: #endif",
          "",
          "[Removed Lines]",
          "1048:     dict_free_contents(v_event);",
          "1049:     hash_init(&v_event->dv_hashtab);",
          "",
          "[Added Lines]",
          "1049:     restore_v_event(v_event, &save_v_event);",
          "",
          "---------------"
        ],
        "src/structs.h||src/structs.h": [
          "File: src/structs.h -> src/structs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4466: #define WHERE_INIT {NULL, 0, 0}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4469: typedef struct {",
          "4470:     int  sve_did_save;",
          "4471:     hashtab_T sve_hashtab;",
          "4472: } save_v_event_T;",
          "",
          "---------------"
        ],
        "src/testdir/test_edit.vim||src/testdir/test_edit.vim": [
          "File: src/testdir/test_edit.vim -> src/testdir/test_edit.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "2034:   unlet! g:i_to_any",
          "2035: endfunc",
          "2037: \" Test toggling of input method. See :help i_CTRL-^",
          "2038: func Test_edit_CTRL_hat()",
          "2039:   CheckFeature xim",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2037: func Test_recursive_ModeChanged()",
          "2038:   au! ModeChanged * norm 0u",
          "2039:   sil! norm \u0016",
          "2040:   au!",
          "2041: endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "758: static int included_patches[] =",
          "761:     3608,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "761:     3609,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2bf52dd065495cbf28e28792f2c2d50d44546d9f",
      "candidate_info": {
        "commit_hash": "2bf52dd065495cbf28e28792f2c2d50d44546d9f",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/2bf52dd065495cbf28e28792f2c2d50d44546d9f",
        "files": [
          "src/autocmd.c",
          "src/edit.c",
          "src/ex_docmd.c",
          "src/ex_getln.c",
          "src/insexpand.c",
          "src/misc1.c",
          "src/normal.c",
          "src/proto/misc1.pro",
          "src/terminal.c",
          "src/version.c"
        ],
        "message": "patch 8.2.4723: the ModeChanged autocmd event is inefficient\n\nProblem:    The ModeChanged autocmd event is inefficient.\nSolution:   Avoid allocating memory. (closes #10134)  Rename\n            trigger_modechanged() to may_trigger_modechanged().",
        "before_after_code_files": [
          "src/autocmd.c||src/autocmd.c",
          "src/edit.c||src/edit.c",
          "src/ex_docmd.c||src/ex_docmd.c",
          "src/ex_getln.c||src/ex_getln.c",
          "src/insexpand.c||src/insexpand.c",
          "src/misc1.c||src/misc1.c",
          "src/normal.c||src/normal.c",
          "src/proto/misc1.pro||src/proto/misc1.pro",
          "src/terminal.c||src/terminal.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/normal.c||src/normal.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/normal.c||src/normal.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/autocmd.c||src/autocmd.c": [
          "File: src/autocmd.c -> src/autocmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1242:   if (event == EVENT_MODECHANGED && !has_modechanged())",
          "1254: #endif",
          "",
          "[Removed Lines]",
          "1243:   {",
          "1244:       typval_T rettv;",
          "1245:       typval_T tv[2];",
          "1247:       tv[0].v_type = VAR_NUMBER;",
          "1248:       tv[0].vval.v_number = 1;",
          "1249:       tv[1].v_type = VAR_UNKNOWN;",
          "1250:       f_mode(tv, &rettv);",
          "1251:       STRCPY(last_mode, rettv.vval.v_string);",
          "1252:       vim_free(rettv.vval.v_string);",
          "1253:   }",
          "",
          "[Added Lines]",
          "1243:       get_mode(last_mode);",
          "",
          "---------------"
        ],
        "src/edit.c||src/edit.c": [
          "File: src/edit.c -> src/edit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "284:     else",
          "285:  State = INSERT;",
          "288:     stop_insert_mode = FALSE;",
          "290: #ifdef FEAT_CONCEAL",
          "",
          "[Removed Lines]",
          "287:     trigger_modechanged();",
          "",
          "[Added Lines]",
          "287:     may_trigger_modechanged();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3701: #endif",
          "3703:     State = NORMAL;",
          "3706:     if (gchar_cursor() == TAB)",
          "3707:  curwin->w_valid &= ~(VALID_WROW|VALID_WCOL|VALID_VIRTCOL);",
          "",
          "[Removed Lines]",
          "3704:     trigger_modechanged();",
          "",
          "[Added Lines]",
          "3704:     may_trigger_modechanged();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3838:  State = INSERT | (State & LANGMAP);",
          "3839:     else",
          "3840:  State = replaceState | (State & LANGMAP);",
          "3842:     AppendCharToRedobuff(K_INS);",
          "3843:     showmode();",
          "3844: #ifdef CURSOR_SHAPE",
          "",
          "[Removed Lines]",
          "3841:     trigger_modechanged();",
          "",
          "[Added Lines]",
          "3841:     may_trigger_modechanged();",
          "",
          "---------------"
        ],
        "src/ex_docmd.c||src/ex_docmd.c": [
          "File: src/ex_docmd.c -> src/ex_docmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "477:     else",
          "478:  exmode_active = EXMODE_NORMAL;",
          "479:     State = NORMAL;",
          "",
          "[Removed Lines]",
          "480:     trigger_modechanged();",
          "",
          "[Added Lines]",
          "480:     may_trigger_modechanged();",
          "",
          "---------------"
        ],
        "src/ex_getln.c||src/ex_getln.c": [
          "File: src/ex_getln.c -> src/ex_getln.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1714:     trigger_cmd_autocmd(cmdline_type, EVENT_CMDLINEENTER);",
          "1715: #ifdef FEAT_EVAL",
          "1716:     if (!debug_mode)",
          "1718: #endif",
          "1720:     init_history();",
          "",
          "[Removed Lines]",
          "1717:  trigger_modechanged();",
          "",
          "[Added Lines]",
          "1717:  may_trigger_modechanged();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2556: #ifdef FEAT_EVAL",
          "2557:     if (!debug_mode)",
          "2559: #endif",
          "2561: #ifdef HAVE_INPUT_METHOD",
          "",
          "[Removed Lines]",
          "2558:  trigger_modechanged();",
          "",
          "[Added Lines]",
          "2558:  may_trigger_modechanged();",
          "",
          "---------------"
        ],
        "src/insexpand.c||src/insexpand.c": [
          "File: src/insexpand.c -> src/insexpand.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "258:  ctrl_x_mode = CTRL_X_CMDLINE_CTRL_X;",
          "261: }",
          "",
          "[Removed Lines]",
          "260:     trigger_modechanged();",
          "",
          "[Added Lines]",
          "260:     may_trigger_modechanged();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2382:  ins_apply_autocmds(EVENT_COMPLETEDONE);",
          "",
          "[Removed Lines]",
          "2384:     trigger_modechanged();",
          "",
          "[Added Lines]",
          "2384:     may_trigger_modechanged();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2866:     if (!compl_interrupted)",
          "2867:  show_pum(save_w_wrow, save_w_leftcol);",
          "2869:     out_flush();",
          "2870: }",
          "",
          "[Removed Lines]",
          "2868:     trigger_modechanged();",
          "",
          "[Added Lines]",
          "2868:     may_trigger_modechanged();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3818:  if (compl_curr_match == NULL)",
          "3819:      compl_curr_match = compl_old_match;",
          "3820:     }",
          "3823:     return i;",
          "3824: }",
          "",
          "[Removed Lines]",
          "3821:     trigger_modechanged();",
          "",
          "[Added Lines]",
          "3821:     may_trigger_modechanged();",
          "",
          "---------------"
        ],
        "src/misc1.c||src/misc1.c": [
          "File: src/misc1.c -> src/misc1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "625: #if defined(FEAT_EVAL) || defined(PROTO)",
          "630:     void",
          "632: {",
          "640:     if (time_for_testing == 93784)",
          "641:     {",
          "645:     }",
          "646: #ifdef FEAT_TERMINAL",
          "647:     else if (term_use_loop())",
          "649: #endif",
          "650:     else if (VIsual_active)",
          "651:     {",
          "652:  if (VIsual_select)",
          "654:  else",
          "655:  {",
          "657:      if (restart_VIsual_select)",
          "659:  }",
          "660:     }",
          "661:     else if (State == HITRETURN || State == ASKMORE || State == SETWSIZE",
          "662:   || State == CONFIRM)",
          "663:     {",
          "665:  if (State == ASKMORE)",
          "667:  else if (State == CONFIRM)",
          "669:     }",
          "670:     else if (State == EXTERNCMD)",
          "672:     else if (State & INSERT)",
          "673:     {",
          "674:  if (State & VREPLACE_FLAG)",
          "675:  {",
          "679:      if (ins_compl_active())",
          "681:      else if (ctrl_x_mode_not_defined_yet())",
          "683:  }",
          "684:  else",
          "685:  {",
          "686:      if (State & REPLACE_FLAG)",
          "688:      else",
          "691:      if (ins_compl_active())",
          "693:      else if (ctrl_x_mode_not_defined_yet())",
          "695:  }",
          "696:     }",
          "697:     else if ((State & CMDLINE) || exmode_active)",
          "698:     {",
          "700:  if (exmode_active == EXMODE_VIM)",
          "702:  else if (exmode_active == EXMODE_NORMAL)",
          "704:     }",
          "705:     else",
          "706:     {",
          "708:  if (finish_op)",
          "709:  {",
          "714:  }",
          "715:  else if (restart_edit == 'I' || restart_edit == 'R'",
          "716:        || restart_edit == 'V')",
          "717:  {",
          "720:  }",
          "721: #ifdef FEAT_TERMINAL",
          "722:  else if (term_in_normal_mode())",
          "724: #endif",
          "725:     }",
          "729:     if (!non_zero_arg(&argvars[0]))",
          "",
          "[Removed Lines]",
          "631: f_mode(typval_T *argvars, typval_T *rettv)",
          "633:     char_u buf[MODE_MAX_LENGTH];",
          "635:     if (in_vim9script() && check_for_opt_bool_arg(argvars, 0) == FAIL)",
          "636:  return;",
          "638:     CLEAR_FIELD(buf);",
          "643:  buf[0] = 'x';",
          "644:  buf[1] = '!';",
          "648:  buf[0] = 't';",
          "653:      buf[0] = VIsual_mode + 's' - 'v';",
          "656:      buf[0] = VIsual_mode;",
          "658:          buf[1] = 's';",
          "664:  buf[0] = 'r';",
          "666:      buf[1] = 'm';",
          "668:      buf[1] = '?';",
          "671:  buf[0] = '!';",
          "676:      buf[0] = 'R';",
          "677:      buf[1] = 'v';",
          "680:   buf[2] = 'c';",
          "682:   buf[2] = 'x';",
          "687:   buf[0] = 'R';",
          "689:   buf[0] = 'i';",
          "692:   buf[1] = 'c';",
          "694:   buf[1] = 'x';",
          "699:  buf[0] = 'c';",
          "701:      buf[1] = 'v';",
          "703:      buf[1] = 'e';",
          "707:  buf[0] = 'n';",
          "710:      buf[1] = 'o';",
          "713:      buf[2] = motion_force;",
          "718:      buf[1] = 'i';",
          "719:      buf[2] = restart_edit;",
          "723:      buf[1] = 't';",
          "",
          "[Added Lines]",
          "634: get_mode(char_u *buf)",
          "636:     int  i = 0;",
          "641:  buf[i++] = 'x';",
          "642:  buf[i++] = '!';",
          "646:  buf[i++] = 't';",
          "651:      buf[i++] = VIsual_mode + 's' - 'v';",
          "654:      buf[i++] = VIsual_mode;",
          "656:          buf[i++] = 's';",
          "662:  buf[i++] = 'r';",
          "664:      buf[i++] = 'm';",
          "666:      buf[i++] = '?';",
          "669:  buf[i++] = '!';",
          "674:      buf[i++] = 'R';",
          "675:      buf[i++] = 'v';",
          "678:   buf[i++] = 'c';",
          "680:   buf[i++] = 'x';",
          "685:   buf[i++] = 'R';",
          "687:   buf[i++] = 'i';",
          "690:   buf[i++] = 'c';",
          "692:   buf[i++] = 'x';",
          "697:  buf[i++] = 'c';",
          "699:      buf[i++] = 'v';",
          "701:      buf[i++] = 'e';",
          "705:  buf[i++] = 'n';",
          "708:      buf[i++] = 'o';",
          "711:      buf[i++] = motion_force;",
          "716:      buf[i++] = 'i';",
          "717:      buf[i++] = restart_edit;",
          "721:      buf[i++] = 't';",
          "725:     buf[i] = NUL;",
          "726: }",
          "731:     void",
          "732: f_mode(typval_T *argvars, typval_T *rettv)",
          "733: {",
          "734:     char_u buf[MODE_MAX_LENGTH];",
          "736:     if (in_vim9script() && check_for_opt_bool_arg(argvars, 0) == FAIL)",
          "737:  return;",
          "739:     get_mode(buf);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2691: #endif",
          "2696:     void",
          "2698: {",
          "2699: #ifdef FEAT_EVAL",
          "2700:     dict_T     *v_event;",
          "2705:     save_v_event_T  save_v_event;",
          "2707:     if (!has_modechanged())",
          "2708:  return;",
          "2717:  return;",
          "2720:     v_event = get_v_event(&save_v_event);",
          "2722:     (void)dict_add_string(v_event, \"old_mode\", last_mode);",
          "2723:     dict_set_items_ro(v_event);",
          "2734:     restore_v_event(v_event, &save_v_event);",
          "2736: #endif",
          "2737: }",
          "",
          "[Removed Lines]",
          "2697: trigger_modechanged()",
          "2701:     typval_T     rettv;",
          "2702:     typval_T     tv[2];",
          "2703:     char_u     *pat_pre;",
          "2704:     char_u     *pat;",
          "2710:     tv[0].v_type = VAR_NUMBER;",
          "2711:     tv[0].vval.v_number = 1;     // get full mode",
          "2712:     tv[1].v_type = VAR_UNKNOWN;",
          "2713:     f_mode(tv, &rettv);",
          "2714:     if (STRCMP(rettv.vval.v_string, last_mode) == 0)",
          "2715:     {",
          "2716:  vim_free(rettv.vval.v_string);",
          "2718:     }",
          "2721:     (void)dict_add_string(v_event, \"new_mode\", rettv.vval.v_string);",
          "2726:     pat_pre = concat_str(last_mode, (char_u*)\":\");",
          "2727:     pat = concat_str(pat_pre, rettv.vval.v_string);",
          "2728:     vim_free(pat_pre);",
          "2730:     apply_autocmds(EVENT_MODECHANGED, pat, NULL, FALSE, curbuf);",
          "2731:     STRCPY(last_mode, rettv.vval.v_string);",
          "2733:     vim_free(pat);",
          "2735:     vim_free(rettv.vval.v_string);",
          "",
          "[Added Lines]",
          "2711: may_trigger_modechanged()",
          "2716:     char_u     curr_mode[MODE_MAX_LENGTH];",
          "2717:     char_u     pattern_buf[2 * MODE_MAX_LENGTH];",
          "2722:     get_mode(curr_mode);",
          "2723:     if (STRCMP(curr_mode, last_mode) == 0)",
          "2727:     (void)dict_add_string(v_event, \"new_mode\", curr_mode);",
          "2732:     vim_snprintf((char *)pattern_buf, sizeof(pattern_buf), \"%s:%s\", last_mode,",
          "2733:      curr_mode);",
          "2735:     apply_autocmds(EVENT_MODECHANGED, pattern_buf, NULL, FALSE, curbuf);",
          "2736:     STRCPY(last_mode, curr_mode);",
          "",
          "---------------"
        ],
        "src/normal.c||src/normal.c": [
          "File: src/normal.c -> src/normal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "689: # endif",
          "690:     }",
          "691: #endif",
          "",
          "[Removed Lines]",
          "692:     trigger_modechanged();",
          "",
          "[Added Lines]",
          "692:     may_trigger_modechanged();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "971:     c = finish_op;",
          "972: #endif",
          "973:     finish_op = FALSE;",
          "975: #ifdef CURSOR_SHAPE",
          "",
          "[Removed Lines]",
          "974:     trigger_modechanged();",
          "",
          "[Added Lines]",
          "974:     may_trigger_modechanged();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1027:  if (restart_VIsual_select == 1)",
          "1028:  {",
          "1029:      VIsual_select = TRUE;",
          "1031:      showmode();",
          "1032:      restart_VIsual_select = 0;",
          "1033:      VIsual_select_reg = 0;",
          "",
          "[Removed Lines]",
          "1030:      trigger_modechanged();",
          "",
          "[Added Lines]",
          "1030:      may_trigger_modechanged();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1151:     may_clear_cmdline();",
          "1153:     adjust_cursor_eol();",
          "1155: }",
          "",
          "[Removed Lines]",
          "1154:     trigger_modechanged();",
          "",
          "[Added Lines]",
          "1154:     may_trigger_modechanged();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3222:     if (VIsual_active) // toggle Selection/Visual mode",
          "3223:     {",
          "3224:  VIsual_select = !VIsual_select;",
          "3226:  showmode();",
          "3227:     }",
          "3228:     else if (!checkclearop(cap->oap))",
          "",
          "[Removed Lines]",
          "3225:  trigger_modechanged();",
          "",
          "[Added Lines]",
          "3225:  may_trigger_modechanged();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3285:     if (VIsual_active && VIsual_select)",
          "3286:     {",
          "3287:  VIsual_select = FALSE;",
          "3289:  showmode();",
          "3290:  restart_VIsual_select = 2; // restart Select mode later",
          "3291:     }",
          "",
          "[Removed Lines]",
          "3288:  trigger_modechanged();",
          "",
          "[Added Lines]",
          "3288:  may_trigger_modechanged();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5422:  {        //    or char/line mode",
          "5423:      VIsual_mode = cap->cmdchar;",
          "5424:      showmode();",
          "5426:  }",
          "5427:  redraw_curbuf_later(INVERTED);     // update the inversion",
          "5428:     }",
          "",
          "[Removed Lines]",
          "5425:      trigger_modechanged();",
          "",
          "[Added Lines]",
          "5425:      may_trigger_modechanged();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5549:     foldAdjustVisual();",
          "5550: #endif",
          "5553:     setmouse();",
          "5554: #ifdef FEAT_CONCEAL",
          "",
          "[Removed Lines]",
          "5552:     trigger_modechanged();",
          "",
          "[Added Lines]",
          "5552:     may_trigger_modechanged();",
          "",
          "---------------"
        ],
        "src/proto/misc1.pro||src/proto/misc1.pro": [
          "File: src/proto/misc1.pro -> src/proto/misc1.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: char_u *skip_to_option_part(char_u *p);",
          "15: void check_status(buf_T *buf);",
          "16: int ask_yesno(char_u *str, int direct);",
          "17: void f_mode(typval_T *argvars, typval_T *rettv);",
          "18: void f_state(typval_T *argvars, typval_T *rettv);",
          "19: int get_keystroke(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: void get_mode(char_u *buf);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: int path_with_url(char_u *fname);",
          "50: dict_T *get_v_event(save_v_event_T *sve);",
          "51: void restore_v_event(dict_T *v_event, save_v_event_T *sve);",
          "",
          "[Removed Lines]",
          "52: void trigger_modechanged(void);",
          "",
          "[Added Lines]",
          "53: void may_trigger_modechanged(void);",
          "",
          "---------------"
        ],
        "src/terminal.c||src/terminal.c": [
          "File: src/terminal.c -> src/terminal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2035: set_terminal_mode(term_T *term, int normal_mode)",
          "2036: {",
          "2037:     term->tl_normal_mode = normal_mode;",
          "2039:     if (!normal_mode)",
          "2040:  handle_postponed_scrollback(term);",
          "2041:     VIM_CLEAR(term->tl_status_text);",
          "",
          "[Removed Lines]",
          "2038:     trigger_modechanged();",
          "",
          "[Added Lines]",
          "2038:     may_trigger_modechanged();",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "747: static int included_patches[] =",
          "750:     4722,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "750:     4723,",
          "",
          "---------------"
        ]
      }
    }
  ]
}