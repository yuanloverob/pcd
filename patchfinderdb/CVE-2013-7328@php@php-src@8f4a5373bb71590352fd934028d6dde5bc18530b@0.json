{
  "cve_id": "CVE-2013-7328",
  "cve_desc": "Multiple integer signedness errors in the gdImageCrop function in ext/gd/gd.c in PHP 5.5.x before 5.5.9 allow remote attackers to cause a denial of service (application crash) or obtain sensitive information via an imagecrop function call with a negative value for the (1) x or (2) y dimension, a different vulnerability than CVE-2013-7226.",
  "repo": "php/php-src",
  "patch_hash": "8f4a5373bb71590352fd934028d6dde5bc18530b",
  "patch_info": {
    "commit_hash": "8f4a5373bb71590352fd934028d6dde5bc18530b",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/8f4a5373bb71590352fd934028d6dde5bc18530b",
    "files": [
      "NEWS",
      "ext/gd/libgd/gd_crop.c",
      "ext/gd/tests/bug66356.phpt"
    ],
    "message": "Fixed bug #66356 (Heap Overflow Vulnerability in imagecrop())\n\nInitial fix was PHP stuff\nThis one is libgd fix.\n\n- filter invalid crop size\n- dont try to copy on invalid position\n- fix crop size when out of src image\n- fix possible NULL deref\n- fix possible integer overfloow",
    "before_after_code_files": [
      "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c",
      "ext/gd/tests/bug66356.phpt||ext/gd/tests/bug66356.phpt"
    ]
  },
  "patch_diff": {
    "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c": [
      "File: ext/gd/libgd/gd_crop.c -> ext/gd/libgd/gd_crop.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "44: {",
      "45:  gdImagePtr dst;",
      "47:  if (src->trueColor) {",
      "48:   dst = gdImageCreateTrueColor(crop->width, crop->height);",
      "49:   gdImageSaveAlpha(dst, 1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48:  if (crop->width<=0 || crop->height<=0) {",
      "49:   return NULL;",
      "50:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "51:   dst = gdImageCreate(crop->width, crop->height);",
      "52:   gdImagePaletteCopy(dst, src);",
      "53:  }",
      "54:  dst->transparent = src->transparent;",
      "58:  }",
      "61:  }",
      "62: #if 0",
      "63: printf(\"rect->x: %i\\nrect->y: %i\\nrect->width: %i\\nrect->height: %i\\n\", crop->x, crop->y, crop->width, crop->height);",
      "64: #endif",
      "67:  } else {",
      "81:    }",
      "82:   }",
      "84:  }",
      "85: }",
      "",
      "[Removed Lines]",
      "56:  if (src->sx < (crop->x + crop->width -1)) {",
      "57:   crop->width = src->sx - crop->x + 1;",
      "59:  if (src->sy < (crop->y + crop->height -1)) {",
      "60:   crop->height = src->sy - crop->y + 1;",
      "65:  if (dst == NULL) {",
      "66:   return NULL;",
      "68:   int y = crop->y;",
      "69:   if (src->trueColor) {",
      "70:    unsigned int dst_y = 0;",
      "71:    while (y < (crop->y + (crop->height - 1))) {",
      "73:     memcpy(dst->tpixels[dst_y++], src->tpixels[y++] + crop->x, crop->width * 4);",
      "74:    }",
      "75:   } else {",
      "76:    int x;",
      "77:    for (y = crop->y; y < (crop->y + (crop->height - 1)); y++) {",
      "78:     for (x = crop->x; x < (crop->x + (crop->width - 1)); x++) {",
      "79:      dst->pixels[y - crop->y][x - crop->x] = src->pixels[y][x];",
      "80:     }",
      "83:   return dst;",
      "",
      "[Added Lines]",
      "60:  if (dst == NULL) {",
      "61:   return NULL;",
      "62:  }",
      "66:  if (crop->x < 0 || crop->x>=src->sx || crop->y<0 || crop->y>=src->sy) {",
      "67:   return dst;",
      "68:  }",
      "71:  if ((src->sx - crop->width) < crop->x) {",
      "72:   crop->width = src->sx - crop->x;",
      "74:  if ((src->sy - crop->height) < crop->y) {",
      "75:   crop->height = src->sy - crop->y;",
      "81:  int y = crop->y;",
      "82:  if (src->trueColor) {",
      "83:   unsigned int dst_y = 0;",
      "84:   while (y < (crop->y + (crop->height - 1))) {",
      "86:    memcpy(dst->tpixels[dst_y++], src->tpixels[y++] + crop->x, crop->width * 4);",
      "87:   }",
      "89:   int x;",
      "90:   for (y = crop->y; y < (crop->y + (crop->height - 1)); y++) {",
      "91:    for (x = crop->x; x < (crop->x + (crop->width - 1)); x++) {",
      "92:     dst->pixels[y - crop->y][x - crop->x] = src->pixels[y][x];",
      "96:  return dst;",
      "",
      "---------------"
    ],
    "ext/gd/tests/bug66356.phpt||ext/gd/tests/bug66356.phpt": [
      "File: ext/gd/tests/bug66356.phpt -> ext/gd/tests/bug66356.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: --FILE--",
      "8: <?php",
      "9: $img = imagecreatetruecolor(10, 10);",
      "11: $arr = array(\"x\" => \"a\", \"y\" => \"12b\", \"width\" => 10, \"height\" => 10);",
      "13: print_r($arr);",
      "14: ?>",
      "15: --EXPECTF--",
      "16: Array",
      "17: (",
      "18:     [x] => a",
      "",
      "[Removed Lines]",
      "10: $img = imagecrop($img, array(\"x\" => \"a\", \"y\" => 0, \"width\" => 10, \"height\" => 10));",
      "12: $img = imagecrop($img, $arr);",
      "",
      "[Added Lines]",
      "12: var_dump(imagecrop($img, array(\"x\" => \"a\", \"y\" => 0, \"width\" => 10, \"height\" => 10)));",
      "15: var_dump(imagecrop($img, $arr));",
      "19: var_dump(imagecrop($img, array(\"x\" => 0, \"y\" => 0, \"width\" => -1, \"height\" => 10)));",
      "22: var_dump(imagecrop($img, array(\"x\" => -20, \"y\" => -20, \"width\" => 10, \"height\" => 10)));",
      "25: var_dump(imagecrop($img, array(\"x\" => 0x7fffff00, \"y\" => 0, \"width\" => 10, \"height\" => 10)));",
      "29: resource(%d) of type (gd)",
      "30: resource(%d) of type (gd)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "20:     [width] => 10",
      "21:     [height] => 10",
      "22: )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "38: bool(false)",
      "39: resource(%d) of type (gd)",
      "40: resource(%d) of type (gd)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "143bb29c1ac3f959f44b8fe59adef4d1840bc393",
      "candidate_info": {
        "commit_hash": "143bb29c1ac3f959f44b8fe59adef4d1840bc393",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/143bb29c1ac3f959f44b8fe59adef4d1840bc393",
        "files": [
          "ext/gd/gd.c"
        ],
        "message": "Fixes #66714: imageconvolution breakage in 5.5.9\n\n5.5.9 included some GD fixes related to #66356. One of those fixes changed the \nabove section of imageconvolution, but the variable was mistyped.",
        "before_after_code_files": [
          "ext/gd/gd.c||ext/gd/gd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ext/gd/gd.c||ext/gd/gd.c": [
          "File: ext/gd/gd.c -> ext/gd/gd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4879:     if (zend_hash_index_find(Z_ARRVAL_PP(var), (j), (void **) &var2) == SUCCESS) {",
          "4880:      if (Z_TYPE_PP(var2) != IS_DOUBLE) {",
          "4881:       zval dval;",
          "4883:       zval_copy_ctor(&dval);",
          "4884:       convert_to_double(&dval);",
          "4885:       matrix[i][j] = (float)Z_DVAL(dval);",
          "",
          "[Removed Lines]",
          "4882:       dval = **var;",
          "",
          "[Added Lines]",
          "4882:       dval = **var2;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a991360344ed5bca7c20f74a10891d0fc52f0c9f",
      "candidate_info": {
        "commit_hash": "a991360344ed5bca7c20f74a10891d0fc52f0c9f",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/a991360344ed5bca7c20f74a10891d0fc52f0c9f",
        "files": [
          "ext/gd/config.m4",
          "ext/gd/config.w32",
          "ext/gd/gd.c",
          "ext/gd/gdcache.c",
          "ext/gd/libgd/gd.h",
          "ext/gd/libgd/gd_crop.c",
          "ext/gd/libgd/gd_png.c",
          "ext/gd/php_gd.h"
        ],
        "message": "- add image crop support",
        "before_after_code_files": [
          "ext/gd/config.m4||ext/gd/config.m4",
          "ext/gd/config.w32||ext/gd/config.w32",
          "ext/gd/gd.c||ext/gd/gd.c",
          "ext/gd/gdcache.c||ext/gd/gdcache.c",
          "ext/gd/libgd/gd.h||ext/gd/libgd/gd.h",
          "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c",
          "ext/gd/libgd/gd_png.c||ext/gd/libgd/gd_png.c",
          "ext/gd/php_gd.h||ext/gd/php_gd.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c"
          ],
          "candidate": [
            "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/gd/config.m4||ext/gd/config.m4": [
          "File: ext/gd/config.m4 -> ext/gd/config.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "297:                  libgd/gdfontmb.c libgd/gdfontl.c libgd/gdfontg.c libgd/gdtables.c libgd/gdft.c \\",
          "298:                  libgd/gdcache.c libgd/gdkanji.c libgd/wbmp.c libgd/gd_wbmp.c libgd/gdhelpers.c \\",
          "299:                  libgd/gd_topal.c libgd/gd_gif_in.c libgd/xbm.c libgd/gd_gif_out.c libgd/gd_security.c \\",
          "302: dnl check for fabsf and floorf which are available since C99",
          "303:   AC_CHECK_FUNCS(fabsf floorf)",
          "",
          "[Removed Lines]",
          "300:                  libgd/gd_filter.c libgd/gd_pixelate.c libgd/gd_arc.c libgd/gd_rotate.c libgd/gd_color.c libgd/gd_transform.c\"",
          "",
          "[Added Lines]",
          "300:                  libgd/gd_filter.c libgd/gd_pixelate.c libgd/gd_arc.c libgd/gd_rotate.c libgd/gd_color.c \\",
          "301:      libgd/gd_transform.c libgd/gd_crop.c\"",
          "",
          "---------------"
        ],
        "ext/gd/config.w32||ext/gd/config.w32": [
          "File: ext/gd/config.w32 -> ext/gd/config.w32",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:    gdft.c gd_gd2.c gd_gd.c gd_gif_in.c gd_gif_out.c gdhelpers.c gd_io.c gd_io_dp.c \\",
          "48:    gd_io_file.c gd_io_ss.c gd_jpeg.c gdkanji.c gd_png.c gd_ss.c \\",
          "49:    gdtables.c gd_topal.c gd_wbmp.c gdxpm.c wbmp.c xbm.c gd_security.c gd_transform.c \\",
          "51:   AC_DEFINE('HAVE_LIBGD', 1, 'GD support');",
          "52:   ADD_FLAG(\"CFLAGS_GD\", \" \\",
          "53: /D HAVE_GD_DYNAMIC_CTX_EX=1 \\",
          "",
          "[Removed Lines]",
          "50:    gd_filter.c gd_pixelate.c gd_arc.c gd_rotate.c gd_color.c webpimg.c gd_webp.c\", \"gd\");",
          "",
          "[Added Lines]",
          "50:    gd_filter.c gd_pixelate.c gd_arc.c gd_rotate.c gd_color.c webpimg.c gd_webp.c \\",
          "51:    gd_crop.c\", \"gd\");",
          "",
          "---------------"
        ],
        "ext/gd/gd.c||ext/gd/gd.c": [
          "File: ext/gd/gd.c -> ext/gd/gd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "890:  ZEND_ARG_INFO(0, im)",
          "891:  ZEND_ARG_INFO(0, mode)",
          "892: ZEND_END_ARG_INFO()",
          "893: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "894: ZEND_BEGIN_ARG_INFO(arginfo_imagecropauto, 0)",
          "895:  ZEND_ARG_INFO(0, im)",
          "896:  ZEND_ARG_INFO(0, mode)",
          "897: ZEND_END_ARG_INFO()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "950: #ifdef HAVE_GD_BUNDLED",
          "951:  PHP_FE(imageantialias,       arginfo_imageantialias)",
          "952:  PHP_FE(imageflip,        arginfo_imageflip)",
          "953: #endif",
          "955: #if HAVE_GD_IMAGESETTILE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "958:  PHP_FE(imagecropauto,       arginfo_imagecropauto)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1204:  REGISTER_LONG_CONSTANT(\"IMG_FLIP_HORIZONTAL\", GD_FLIP_HORINZONTAL, CONST_CS | CONST_PERSISTENT);",
          "1205:  REGISTER_LONG_CONSTANT(\"IMG_FLIP_VERTICAL\", GD_FLIP_VERTICAL, CONST_CS | CONST_PERSISTENT);",
          "1206:  REGISTER_LONG_CONSTANT(\"IMG_FLIP_BOTH\", GD_FLIP_BOTH, CONST_CS | CONST_PERSISTENT);",
          "1207: #else",
          "1208:  REGISTER_LONG_CONSTANT(\"GD_BUNDLED\", 0, CONST_CS | CONST_PERSISTENT);",
          "1209: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1214:  REGISTER_LONG_CONSTANT(\"IMG_CROP_DEFAULT\", GD_CROP_DEFAULT, CONST_CS | CONST_PERSISTENT);",
          "1215:  REGISTER_LONG_CONSTANT(\"IMG_CROP_TRANSPARENT\", GD_CROP_TRANSPARENT, CONST_CS | CONST_PERSISTENT);",
          "1216:  REGISTER_LONG_CONSTANT(\"IMG_CROP_BLACK\", GD_CROP_BLACK, CONST_CS | CONST_PERSISTENT);",
          "1217:  REGISTER_LONG_CONSTANT(\"IMG_CROP_WHITE\", GD_CROP_WHITE, CONST_CS | CONST_PERSISTENT);",
          "1218:  REGISTER_LONG_CONSTANT(\"IMG_CROP_SIDES\", GD_CROP_SIDES, CONST_CS | CONST_PERSISTENT);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5125:  RETURN_TRUE;",
          "5126: }",
          "5128: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5144: PHP_FUNCTION(imagecropauto)",
          "5145: {",
          "5146:  zval *IM;",
          "5147:  long mode = -1;",
          "5148:  gdImagePtr im;",
          "5149:  gdImagePtr im_crop;",
          "5151:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"r|l\", &IM, &mode) == FAILURE)  {",
          "5152:   return;",
          "5153:  }",
          "5155:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "5157:  switch (mode) {",
          "5158:   case -1:",
          "5159:    mode = GD_CROP_DEFAULT;",
          "5160:   case GD_CROP_DEFAULT:",
          "5161:   case GD_CROP_TRANSPARENT:",
          "5162:   case GD_CROP_BLACK:",
          "5163:   case GD_CROP_WHITE:",
          "5164:   case GD_CROP_SIDES:",
          "5165:    im_crop = gdImageCropAuto(im, mode);",
          "5166:    break;",
          "5167:   default:",
          "5168:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Unknown flip mode\");",
          "5169:    RETURN_FALSE;",
          "5170:  }",
          "5171:  if (im_crop == NULL) {",
          "5172:   RETURN_FALSE;",
          "5173:  } else {",
          "5174:   ZEND_REGISTER_RESOURCE(return_value, im_crop, le_gd);",
          "5175:  }",
          "5176: }",
          "",
          "---------------"
        ],
        "ext/gd/gdcache.c||ext/gd/gdcache.c": [
          "File: ext/gd/gdcache.c -> ext/gd/gdcache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:  void   *userdata;",
          "97:  elem = head->mru;",
          "98:  while(elem) {",
          "99:   if ((*(head->gdCacheTest))(elem->userdata, keydata)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:  if (elem == NULL) {",
          "99:   return NULL;",
          "101:  }",
          "",
          "---------------"
        ],
        "ext/gd/libgd/gd.h||ext/gd/libgd/gd.h": [
          "File: ext/gd/libgd/gd.h -> ext/gd/libgd/gd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "210: typedef gdFont *gdFontPtr;",
          "213:  for MUCH more flexible line drawing. Also see",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230: typedef struct",
          "231: {",
          "232:  int x, y;",
          "233:  int width, height;",
          "234: }",
          "235: gdRect, *gdRectPtr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "690: #define GD_FLIP_VERTICAL 2",
          "691: #define GD_FLIP_BOTH 3",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "731: enum gdCropMode {",
          "732:  GD_CROP_DEFAULT = 0,",
          "733:  GD_CROP_TRANSPARENT,",
          "734:  GD_CROP_BLACK,",
          "735:  GD_CROP_WHITE,",
          "736:  GD_CROP_SIDES",
          "737: };",
          "739: gdImagePtr gdImageCrop(gdImagePtr src, const gdRectPtr crop);",
          "740: gdImagePtr gdImageCropAuto(gdImagePtr im, const unsigned int mode);",
          "741: gdImagePtr gdImageCropThreshold(gdImagePtr im, const unsigned int color, const float threshold);",
          "",
          "---------------"
        ],
        "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c": [
          "File: ext/gd/libgd/gd_crop.c -> ext/gd/libgd/gd_crop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <gd.h>",
          "23: #include <stdlib.h>",
          "24: #include <string.h>",
          "26: static int gdGuessBackgroundColorFromCorners(gdImagePtr im, int *color);",
          "27: static int gdColorMatch(gdImagePtr im, int col1, int col2, float threshold);",
          "42: gdImagePtr gdImageCrop(gdImagePtr src, const gdRectPtr crop)",
          "43: {",
          "44:  gdImagePtr dst;",
          "46:  if (src->trueColor) {",
          "47:   dst = gdImageCreateTrueColor(crop->width, crop->height);",
          "48:   gdImageSaveAlpha(dst, 1);",
          "49:  } else {",
          "50:   dst = gdImageCreate(crop->width, crop->height);",
          "51:   gdImagePaletteCopy(dst, src);",
          "52:  }",
          "53:  dst->transparent = src->transparent;",
          "55:  if (src->sx < (crop->x + crop->width -1)) {",
          "56:   crop->width = src->sx - crop->x + 1;",
          "57:  }",
          "58:  if (src->sy < (crop->y + crop->height -1)) {",
          "59:   crop->height = src->sy - crop->y + 1;",
          "60:  }",
          "61: #ifdef 0",
          "62: printf(\"rect->x: %i\\nrect->y: %i\\nrect->width: %i\\nrect->height: %i\\n\", crop->x, crop->y, crop->width, crop->height);",
          "63: #endif",
          "64:  if (dst == NULL) {",
          "65:   return NULL;",
          "66:  } else {",
          "67:   int y = crop->y;",
          "68:   unsigned int dst_y = 0;",
          "69:   if (src->trueColor) {",
          "70:    unsigned int dst_y = 0;",
          "71:    while (y < (crop->y + (crop->height - 1))) {",
          "73:     memcpy(dst->tpixels[dst_y++], src->tpixels[y++] + crop->x, crop->width * 4);",
          "74:    }",
          "75:   } else {",
          "76:    int x;",
          "77:    for (y = crop->y; y < (crop->y + (crop->height - 1)); y++) {",
          "78:     for (x = crop->x; x < (crop->x + (crop->width - 1)); x++) {",
          "79:      dst->pixels[y - crop->y][x - crop->x] = src->pixels[y][x];",
          "80:     }",
          "81:    }",
          "82:   }",
          "83:   return dst;",
          "84:  }",
          "85: }",
          "103: gdImagePtr gdImageCropAuto(gdImagePtr im, const unsigned int mode)",
          "104: {",
          "105:  const int width = gdImageSX(im);",
          "106:  const int height = gdImageSY(im);",
          "108:  int x,y;",
          "109:  int color, corners, match;",
          "110:  gdRect crop;",
          "112:  crop.x = 0;",
          "113:  crop.y = 0;",
          "114:  crop.width = 0;",
          "115:  crop.height = 0;",
          "117:  switch (mode) {",
          "118:   case GD_CROP_TRANSPARENT:",
          "119:    color = gdImageGetTransparent(im);",
          "120:    break;",
          "122:   case GD_CROP_BLACK:",
          "123:    color = gdImageColorClosestAlpha(im, 0, 0, 0, 0);",
          "124:    break;",
          "126:   case GD_CROP_WHITE:",
          "127:    color = gdImageColorClosestAlpha(im, 255, 255, 255, 0);",
          "128:    break;",
          "130:   case GD_CROP_SIDES:",
          "131:    corners = gdGuessBackgroundColorFromCorners(im, &color);",
          "132:    break;",
          "134:   case GD_CROP_DEFAULT:",
          "135:   default:",
          "136:    color = gdImageGetTransparent(im);",
          "137:    if (color == -1) {",
          "138:     corners = gdGuessBackgroundColorFromCorners(im, &color);",
          "139:    }",
          "140:    break;",
          "141:  }",
          "147:  match = 1;",
          "148:  for (y = 0; match && y < height; y++) {",
          "149:   for (x = 0; match && x < width; x++) {",
          "150:    int c2 = gdImageGetPixel(im, x, y);",
          "151:    match = (color == c2);",
          "152:   }",
          "153:  }",
          "158:  if (y == height - 1) {",
          "159:   return NULL;",
          "160:  }",
          "162:  crop.y = y -1;",
          "163:  match = 1;",
          "164:  for (y = height - 1; match && y >= 0; y--) {",
          "165:   for (x = 0; match && x < width; x++) {",
          "166:    match = (color == gdImageGetPixel(im, x,y));",
          "167:   }",
          "168:  }",
          "170:  if (y == 0) {",
          "171:   crop.height = height - crop.y + 1;",
          "172:  } else {",
          "173:   crop.height = y - crop.y + 2;",
          "174:  }",
          "176:  match = 1;",
          "177:  for (x = 0; match && x < width; x++) {",
          "178:   for (y = 0; match && y < crop.y + crop.height - 1; y++) {",
          "179:    match = (color == gdImageGetPixel(im, x,y));",
          "180:   }",
          "181:  }",
          "182:  crop.x = x - 1;",
          "184:  match = 1;",
          "185:  for (x = width - 1; match && x >= 0; x--) {",
          "186:   for (y = 0; match &&  y < crop.y + crop.height - 1; y++) {",
          "187:    match = (color == gdImageGetPixel(im, x,y));",
          "188:   }",
          "189:  }",
          "190:  crop.width = x - crop.x + 2;",
          "191:  if (crop.x <= 0 || crop.y <= 0 || crop.width <= 0 || crop.height <= 0) {",
          "192:   return NULL;",
          "193:  }",
          "194:  return gdImageCrop(im, &crop);",
          "195: }",
          "216: gdImagePtr gdImageCropThreshold(gdImagePtr im, const unsigned int color, const float threshold)",
          "217: {",
          "218:  const int width = gdImageSX(im);",
          "219:  const int height = gdImageSY(im);",
          "221:  int x,y;",
          "222:  int match;",
          "223:  gdRect crop;",
          "225:  crop.x = 0;",
          "226:  crop.y = 0;",
          "227:  crop.width = 0;",
          "228:  crop.height = 0;",
          "231:  if (threshold > 1.0) {",
          "232:   return NULL;",
          "233:  }",
          "239:  match = 1;",
          "240:  for (y = 0; match && y < height; y++) {",
          "241:   for (x = 0; match && x < width; x++) {",
          "242:    match = (gdColorMatch(im, color, gdImageGetPixel(im, x,y), threshold)) > 0;",
          "243:   }",
          "244:  }",
          "250:  if (y == height - 1) {",
          "251:   return NULL;",
          "252:  }",
          "254:  crop.y = y -1;",
          "255:  match = 1;",
          "256:  for (y = height - 1; match && y >= 0; y--) {",
          "257:   for (x = 0; match && x < width; x++) {",
          "258:    match = (gdColorMatch(im, color, gdImageGetPixel(im, x, y), threshold)) > 0;",
          "259:   }",
          "260:  }",
          "262:  if (y == 0) {",
          "263:   crop.height = height - crop.y + 1;",
          "264:  } else {",
          "265:   crop.height = y - crop.y + 2;",
          "266:  }",
          "268:  match = 1;",
          "269:  for (x = 0; match && x < width; x++) {",
          "270:   for (y = 0; match && y < crop.y + crop.height - 1; y++) {",
          "271:    match = (gdColorMatch(im, color, gdImageGetPixel(im, x,y), threshold)) > 0;",
          "272:   }",
          "273:  }",
          "274:  crop.x = x - 1;",
          "276:  match = 1;",
          "277:  for (x = width - 1; match && x >= 0; x--) {",
          "278:   for (y = 0; match &&  y < crop.y + crop.height - 1; y++) {",
          "279:    match = (gdColorMatch(im, color, gdImageGetPixel(im, x,y), threshold)) > 0;",
          "280:   }",
          "281:  }",
          "282:  crop.width = x - crop.x + 2;",
          "284:  return gdImageCrop(im, &crop);",
          "285: }",
          "293: static int gdGuessBackgroundColorFromCorners(gdImagePtr im, int *color)",
          "294: {",
          "295:  const int tl = gdImageGetPixel(im, 0, 0);",
          "296:  const int tr = gdImageGetPixel(im, gdImageSX(im) - 1, 0);",
          "297:  const int bl = gdImageGetPixel(im, 0, gdImageSY(im) -1);",
          "298:  const int br = gdImageGetPixel(im, gdImageSX(im) - 1, gdImageSY(im) -1);",
          "300:  if (tr == bl && tr == br) {",
          "302:   return 3;",
          "303:  } else if (tl == bl && tl == br) {",
          "305:   return 3;",
          "306:  } else if (tl == tr &&  tl == br) {",
          "308:   return 3;",
          "309:  } else if (tl == tr &&  tl == bl) {",
          "311:   return 3;",
          "312:  } else if (tl == tr  || tl == bl || tl == br) {",
          "314:   return 2;",
          "315:  } else if (tr == bl) {",
          "317:   return 2;",
          "318:  } else if (br == bl) {",
          "320:   return 2;",
          "321:  } else {",
          "322:   register int r,b,g,a;",
          "324:   r = (int)(0.5f + (gdImageRed(im, tl) + gdImageRed(im, tr) + gdImageRed(im, bl) + gdImageRed(im, br)) / 4);",
          "325:   g = (int)(0.5f + (gdImageGreen(im, tl) + gdImageGreen(im, tr) + gdImageGreen(im, bl) + gdImageGreen(im, br)) / 4);",
          "326:   b = (int)(0.5f + (gdImageBlue(im, tl) + gdImageBlue(im, tr) + gdImageBlue(im, bl) + gdImageBlue(im, br)) / 4);",
          "327:   a = (int)(0.5f + (gdImageAlpha(im, tl) + gdImageAlpha(im, tr) + gdImageAlpha(im, bl) + gdImageAlpha(im, br)) / 4);",
          "329:   return 0;",
          "330:  }",
          "331: }",
          "333: static int gdColorMatch(gdImagePtr im, int col1, int col2, float threshold)",
          "334: {",
          "335:  const int dr = gdImageRed(im, col1) - gdImageRed(im, col2);",
          "336:  const int dg = gdImageGreen(im, col1) - gdImageGreen(im, col2);",
          "337:  const int db = gdImageBlue(im, col1) - gdImageBlue(im, col2);",
          "338:  const int da = gdImageAlpha(im, col1) - gdImageAlpha(im, col2);",
          "339:  const int dist = dr * dr + dg * dg + db * db + da * da;",
          "341:  return (100.0 * dist / 195075) < threshold;",
          "342: }",
          "350: #if 0",
          "351: static int colors_equal (const int col1, const in col2)",
          "352: {",
          "354: }",
          "355: #endif",
          "",
          "---------------"
        ],
        "ext/gd/libgd/gd_png.c||ext/gd/libgd/gd_png.c": [
          "File: ext/gd/libgd/gd_png.c -> ext/gd/libgd/gd_png.c"
        ],
        "ext/gd/php_gd.h||ext/gd/php_gd.h": [
          "File: ext/gd/php_gd.h -> ext/gd/php_gd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "125: #ifdef HAVE_GD_BUNDLED",
          "126: PHP_FUNCTION(imageantialias);",
          "127: PHP_FUNCTION(imageflip);",
          "128: #endif",
          "130: PHP_FUNCTION(imagesetthickness);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128: PHP_FUNCTION(imagecropauto);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c32a18d4c9995fe101484eef46e292a51543b68",
      "candidate_info": {
        "commit_hash": "0c32a18d4c9995fe101484eef46e292a51543b68",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/0c32a18d4c9995fe101484eef46e292a51543b68",
        "files": [
          "ext/gd/gd.c",
          "ext/gd/libgd/gd.h",
          "ext/gd/libgd/gd_crop.c"
        ],
        "message": "- clean and enable threshold",
        "before_after_code_files": [
          "ext/gd/gd.c||ext/gd/gd.c",
          "ext/gd/libgd/gd.h||ext/gd/libgd/gd.h",
          "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c"
          ],
          "candidate": [
            "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/gd/gd.c||ext/gd/gd.c": [
          "File: ext/gd/gd.c -> ext/gd/gd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "894: ZEND_BEGIN_ARG_INFO(arginfo_imagecropauto, 0)",
          "895:  ZEND_ARG_INFO(0, im)",
          "896:  ZEND_ARG_INFO(0, mode)",
          "897: ZEND_END_ARG_INFO()",
          "898: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "897:  ZEND_ARG_INFO(0, threshold)",
          "898:  ZEND_ARG_INFO(0, color)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1216:  REGISTER_LONG_CONSTANT(\"IMG_CROP_BLACK\", GD_CROP_BLACK, CONST_CS | CONST_PERSISTENT);",
          "1217:  REGISTER_LONG_CONSTANT(\"IMG_CROP_WHITE\", GD_CROP_WHITE, CONST_CS | CONST_PERSISTENT);",
          "1218:  REGISTER_LONG_CONSTANT(\"IMG_CROP_SIDES\", GD_CROP_SIDES, CONST_CS | CONST_PERSISTENT);",
          "1219: #else",
          "1220:  REGISTER_LONG_CONSTANT(\"GD_BUNDLED\", 0, CONST_CS | CONST_PERSISTENT);",
          "1221: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1221:  REGISTER_LONG_CONSTANT(\"IMG_CROP_THRESHOLD\", GD_CROP_THRESHOLD, CONST_CS | CONST_PERSISTENT);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5145: {",
          "5146:  zval *IM;",
          "5147:  long mode = -1;",
          "5148:  gdImagePtr im;",
          "5149:  gdImagePtr im_crop;",
          "5152:   return;",
          "5153:  }",
          "",
          "[Removed Lines]",
          "5151:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"r|l\", &IM, &mode) == FAILURE)  {",
          "",
          "[Added Lines]",
          "5151:  long color = -1;",
          "5152:  double threshold = 0.5f;",
          "5156:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"r|ldl\", &IM, &mode, &threshold, &color) == FAILURE)  {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5164:   case GD_CROP_SIDES:",
          "5165:    im_crop = gdImageCropAuto(im, mode);",
          "5166:    break;",
          "5167:   default:",
          "5168:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Unknown flip mode\");",
          "5169:    RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5173:   case GD_CROP_THRESHOLD:",
          "5174:    if (color < 0) {",
          "5175:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Color argument missing with threshold mode\");",
          "5176:     RETURN_FALSE;",
          "5177:    }",
          "5178:    im_crop = gdImageCropThreshold(im, color, (float) threshold);",
          "5179:    break;",
          "",
          "---------------"
        ],
        "ext/gd/libgd/gd.h||ext/gd/libgd/gd.h": [
          "File: ext/gd/libgd/gd.h -> ext/gd/libgd/gd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "733:  GD_CROP_TRANSPARENT,",
          "734:  GD_CROP_BLACK,",
          "735:  GD_CROP_WHITE,",
          "737: };",
          "739: gdImagePtr gdImageCrop(gdImagePtr src, const gdRectPtr crop);",
          "",
          "[Removed Lines]",
          "736:  GD_CROP_SIDES",
          "",
          "[Added Lines]",
          "736:  GD_CROP_SIDES,",
          "737:  GD_CROP_THRESHOLD",
          "",
          "---------------"
        ],
        "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c": [
          "File: ext/gd/libgd/gd_crop.c -> ext/gd/libgd/gd_crop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:  if (src->sy < (crop->y + crop->height -1)) {",
          "59:   crop->height = src->sy - crop->y + 1;",
          "60:  }",
          "62: printf(\"rect->x: %i\\nrect->y: %i\\nrect->width: %i\\nrect->height: %i\\n\", crop->x, crop->y, crop->width, crop->height);",
          "63: #endif",
          "64:  if (dst == NULL) {",
          "",
          "[Removed Lines]",
          "61: #ifdef 0",
          "",
          "[Added Lines]",
          "61: #if 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0880851f004ba8ad793b9fb68e3ee6755245a0ba",
      "candidate_info": {
        "commit_hash": "0880851f004ba8ad793b9fb68e3ee6755245a0ba",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/0880851f004ba8ad793b9fb68e3ee6755245a0ba",
        "files": [
          "ext/gd/libgd/gd_crop.c",
          "ext/gd/tests/bug66356.phpt"
        ],
        "message": "Fixed Bug #66815 imagecrop(): insufficient fix for NULL defer CVE-2013-7327\n\nThis amends commit 8f4a537, which aimed to correct NULL dereference because of\nmissing check of gdImageCreateTrueColor() / gdImageCreate() return value.  That\ncommit checks for negative crop rectangle width and height, but\ngdImageCreate*() can also return NULL when width * height overflows.  Hence\nNULL deref is still possible, as gdImageSaveAlpha() and gdImagePaletteCopy()\nis called before dst == NULL check.\n\nThis moves NULL check to happen right after gdImageCreate*().  It also removes\nwidth and height check before gdImageCreate*(), as the same check is done by\nimage create functions (with an extra warning).\n\nFrom thoger redhat com",
        "before_after_code_files": [
          "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c",
          "ext/gd/tests/bug66356.phpt||ext/gd/tests/bug66356.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c",
            "ext/gd/tests/bug66356.phpt||ext/gd/tests/bug66356.phpt"
          ],
          "candidate": [
            "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c",
            "ext/gd/tests/bug66356.phpt||ext/gd/tests/bug66356.phpt"
          ]
        }
      },
      "candidate_diff": {
        "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c": [
          "File: ext/gd/libgd/gd_crop.c -> ext/gd/libgd/gd_crop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:  gdImagePtr dst;",
          "46:  int y;",
          "54:  if (src->trueColor) {",
          "55:   dst = gdImageCreateTrueColor(crop->width, crop->height);",
          "56:   gdImageSaveAlpha(dst, 1);",
          "57:  } else {",
          "58:   dst = gdImageCreate(crop->width, crop->height);",
          "59:   gdImagePaletteCopy(dst, src);",
          "60:  }",
          "64:  dst->transparent = src->transparent;",
          "",
          "[Removed Lines]",
          "49:  if (crop->width<=0 || crop->height<=0) {",
          "50:   return NULL;",
          "51:  }",
          "61:  if (dst == NULL) {",
          "62:   return NULL;",
          "63:  }",
          "",
          "[Added Lines]",
          "51:   if (dst == NULL) {",
          "52:    return NULL;",
          "53:   }",
          "57:   if (dst == NULL) {",
          "58:    return NULL;",
          "59:   }",
          "",
          "---------------"
        ],
        "ext/gd/tests/bug66356.phpt||ext/gd/tests/bug66356.phpt": [
          "File: ext/gd/tests/bug66356.phpt -> ext/gd/tests/bug66356.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: var_dump(imagecrop($img, array(\"x\" => 0x7fffff00, \"y\" => 0, \"width\" => 10, \"height\" => 10)));",
          "27: ?>",
          "28: --EXPECTF--",
          "29: resource(%d) of type (gd)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: var_dump(imagecrop($img, array(\"x\" => 0, \"y\" => 0, \"width\" => 65535, \"height\" => 65535)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:     [width] => 10",
          "36:     [height] => 10",
          "37: )",
          "38: bool(false)",
          "39: resource(%d) of type (gd)",
          "",
          "[Removed Lines]",
          "40: resource(%d) of type (gd)",
          "",
          "[Added Lines]",
          "41: Warning: imagecrop(): gd warning: one parameter to a memory allocation multiplication is negative or zero, failing operation gracefully",
          "42:  in %sbug66356.php on line %d",
          "47: Warning: imagecrop(): gd warning: product of memory allocation multiplication would exceed INT_MAX, failing operation gracefully",
          "48:  in %sbug66356.php on line %d",
          "49: bool(false)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "464c219ed4ebce6b9196cae308967ac7f7f58bde",
      "candidate_info": {
        "commit_hash": "464c219ed4ebce6b9196cae308967ac7f7f58bde",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/464c219ed4ebce6b9196cae308967ac7f7f58bde",
        "files": [
          "ext/gd/libgd/gd_crop.c"
        ],
        "message": "minor fix on previous",
        "before_after_code_files": [
          "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c"
          ],
          "candidate": [
            "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c": [
          "File: ext/gd/libgd/gd_crop.c -> ext/gd/libgd/gd_crop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: gdImagePtr gdImageCrop(gdImagePtr src, const gdRectPtr crop)",
          "44: {",
          "45:  gdImagePtr dst;",
          "48:  if (crop->width<=0 || crop->height<=0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:  int y;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78: #if 0",
          "79: printf(\"rect->x: %i\\nrect->y: %i\\nrect->width: %i\\nrect->height: %i\\n\", crop->x, crop->y, crop->width, crop->height);",
          "80: #endif",
          "82:  if (src->trueColor) {",
          "83:   unsigned int dst_y = 0;",
          "84:   while (y < (crop->y + (crop->height - 1))) {",
          "",
          "[Removed Lines]",
          "81:  int y = crop->y;",
          "",
          "[Added Lines]",
          "82:  y = crop->y;",
          "",
          "---------------"
        ]
      }
    }
  ]
}