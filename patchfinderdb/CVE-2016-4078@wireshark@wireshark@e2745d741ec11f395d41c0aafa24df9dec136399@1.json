{
  "cve_id": "CVE-2016-4078",
  "cve_desc": "The IEEE 802.11 dissector in Wireshark 1.12.x before 1.12.11 and 2.0.x before 2.0.3 does not properly restrict element lists, which allows remote attackers to cause a denial of service (deep recursion and application crash) via a crafted packet, related to epan/dissectors/packet-capwap.c and epan/dissectors/packet-ieee80211.c.",
  "repo": "wireshark/wireshark",
  "patch_hash": "e2745d741ec11f395d41c0aafa24df9dec136399",
  "patch_info": {
    "commit_hash": "e2745d741ec11f395d41c0aafa24df9dec136399",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/e2745d741ec11f395d41c0aafa24df9dec136399",
    "files": [
      "epan/dissectors/packet-capwap.c",
      "epan/dissectors/packet-ieee80211.c",
      "epan/dissectors/packet-ieee80211.h"
    ],
    "message": "ieee80211: fix deep recursion\n\nRestrict the list of possible (sub)elements to avoid deep recursion.\n\nBug: 11824\nBug: 12187\nChange-Id: I12deb9956c6ba9b6113cf45da4ee919e33ff8567\nReviewed-on: https://code.wireshark.org/review/14114\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "before_after_code_files": [
      "epan/dissectors/packet-capwap.c||epan/dissectors/packet-capwap.c",
      "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c",
      "epan/dissectors/packet-ieee80211.h||epan/dissectors/packet-ieee80211.h"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-capwap.c||epan/dissectors/packet-capwap.c": [
      "File: epan/dissectors/packet-capwap.c -> epan/dissectors/packet-capwap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2722:         offset += 1;",
      "2724:         while (offset < offset_end) {",
      "2726:         }",
      "2728:         break;",
      "",
      "[Removed Lines]",
      "2725:             offset += add_tagged_field(pinfo, sub_msg_element_type_tree, tvb, offset, 0);",
      "",
      "[Added Lines]",
      "2725:             offset += add_tagged_field(pinfo, sub_msg_element_type_tree, tvb, offset, 0, NULL, 0);",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c": [
      "File: epan/dissectors/packet-ieee80211.c -> epan/dissectors/packet-ieee80211.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "11585:   guint8       desc_cnt = 0;",
      "11586:   guint32      next_ie;",
      "11587:   int          offset_r = 0;",
      "11589:   if (tag_len !=  4)  {",
      "11590:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11588:   const guint8 ids[] = { TAG_RIC_DESCRIPTOR };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "11621:     next_ie = tvb_get_guint8(tvb,offset);",
      "11622:     proto_item_append_text(ti, \" :(%d:%s)\", desc_cnt,val_to_str_ext(next_ie, &tag_num_vals_ext, \"Reserved (%d)\"));",
      "11626:       break;",
      "",
      "[Removed Lines]",
      "11624:     offset_r = add_tagged_field(pinfo, sub_tree, tvb, offset, ftype);",
      "",
      "[Added Lines]",
      "11625:     offset_r = add_tagged_field(pinfo, sub_tree, tvb, offset, ftype, ids, G_N_ELEMENTS(ids));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "11745:                          guint32 tag_len)",
      "11746: {",
      "11747:   int tmp_sublen;",
      "11750:   Decode three subelement in IE-196(Channel Switch Wrapper element):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11749:   const guint8 ids[] = { TAG_COUNTRY_INFO, TAG_WIDE_BW_CHANNEL_SWITCH,",
      "11750:     TAG_VHT_TX_PWR_ENVELOPE };",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "11753:         (3) New VHT Transmit Power Envelope subelement",
      "11755:   while (tag_len > 0){",
      "11762:   }",
      "11763:   return offset;",
      "11764: }",
      "",
      "[Removed Lines]",
      "11756:         tmp_sublen = tvb_get_guint8(tvb, offset + 1);",
      "11757:         if(add_tagged_field(pinfo, tree, tvb, offset, 0) == 0){",
      "11758:           break;",
      "11759:         }",
      "11760:         tag_len -= (tmp_sublen + 2);",
      "11761:         offset += (tmp_sublen + 2);",
      "",
      "[Added Lines]",
      "11759:     tmp_sublen = tvb_get_guint8(tvb, offset + 1);",
      "11760:     if(add_tagged_field(pinfo, tree, tvb, offset, 0, ids, G_N_ELEMENTS(ids)) == 0){",
      "11761:       break;",
      "11762:     }",
      "11763:     tag_len -= (tmp_sublen + 2);",
      "11764:     offset += (tmp_sublen + 2);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "12139:                                int ftype)",
      "12140: {",
      "12141:   int end = offset + tag_len;",
      "12143:   proto_tree_add_item(tree, hf_ieee80211_tag_tfs_request_id,",
      "12144:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12145:   const guint8 ids[] = {",
      "12147:     TAG_VENDOR_SPECIFIC_IE",
      "12148:   };",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "12176:       s_offset = offset;",
      "12177:       s_end = offset + len;",
      "12178:       while (s_offset < s_end) {",
      "12180:         if (tlen==0)",
      "12181:           break;",
      "12182:         s_offset += tlen;",
      "",
      "[Removed Lines]",
      "12179:         int tlen = add_tagged_field(pinfo, tree, tvb, s_offset, ftype);",
      "",
      "[Added Lines]",
      "12187:         int tlen = add_tagged_field(pinfo, tree, tvb, s_offset, ftype, ids, G_N_ELEMENTS(ids));",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "12216:                                 int ftype)",
      "12217: {",
      "12218:   int end = offset + tag_len;",
      "12220:   while (offset + 3 <= end) {",
      "12221:     guint8 id, len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12227:   const guint8 ids[] = {",
      "12230:     TAG_VENDOR_SPECIFIC_IE",
      "12231:   };",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "12245:       s_offset = offset;",
      "12246:       s_end = offset + len;",
      "12247:       while (s_offset < s_end) {",
      "12249:         if (tlen==0)",
      "12250:           break;",
      "12251:         s_offset += tlen;",
      "",
      "[Removed Lines]",
      "12248:         int tlen = add_tagged_field(pinfo, tree, tvb, s_offset, ftype);",
      "",
      "[Added Lines]",
      "12262:         int tlen = add_tagged_field(pinfo, tree, tvb, s_offset, ftype, ids, G_N_ELEMENTS(ids));",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "13929: }",
      "13931: int",
      "13933: {",
      "13934:   guint32       oui;",
      "13935:   tvbuff_t     *tag_tvb;",
      "",
      "[Removed Lines]",
      "13932: add_tagged_field(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb, int offset, int ftype)",
      "",
      "[Added Lines]",
      "13946: add_tagged_field(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb, int offset, int ftype,",
      "13947:                  const guint8 *valid_element_ids, guint valid_element_ids_count)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "13965:                            \"Tag Length is longer than remaining payload\");",
      "13966:   }",
      "13968:   switch (tag_no) {",
      "13969:   case TAG_SSID:",
      "13970:     offset += ieee80211_tag_ssid(pinfo, tree, ti, ti_len, tag_len, tvb,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13986:   if (valid_element_ids_count) {",
      "13987:     gboolean valid_tag_no;",
      "13988:     guint i;",
      "13990:     for (i = 0; i < valid_element_ids_count; i++) {",
      "13991:       valid_tag_no = valid_element_ids[i] == tag_no;",
      "13992:       if (valid_tag_no)",
      "13993:         break;",
      "13994:     }",
      "13995:     if (!valid_tag_no) {",
      "13996:       expert_add_info_format(pinfo, ti_tag, &ei_ieee80211_tag_number,",
      "13997:           \"Unexpected Element ID %d\", tag_no);",
      "13998:       goto end_of_tag;",
      "13999:     }",
      "14000:   }",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "16247:   }",
      "16248:   return tag_len + 1 + 1;",
      "16249: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16282: end_of_tag:",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "16255:   int next_len;",
      "16257:   while (tagged_parameters_len > 0) {",
      "16259:       break;",
      "16260:     if (next_len > tagged_parameters_len) {",
      "",
      "[Removed Lines]",
      "16258:     if ((next_len=add_tagged_field (pinfo, tree, tvb, offset, ftype)) == 0)",
      "",
      "[Added Lines]",
      "16294:     if ((next_len=add_tagged_field (pinfo, tree, tvb, offset, ftype, NULL, 0)) == 0)",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "27165:     { &ei_ieee80211_inv_val,",
      "27166:       { \"ieee80211.invalid_value\", PI_MALFORMED, PI_WARN,",
      "27167:         \"Invalid value\", EXPFILL }},",
      "27169:     { &ei_ieee80211_tag_length, { \"wlan_mgt.tag.length.bad\", PI_MALFORMED, PI_ERROR, \"Bad tag length\", EXPFILL }},",
      "27170:     { &ei_ieee80211_extra_data, { \"ieee80211.extra_data\", PI_MALFORMED, PI_WARN, \"Unexpected extra data in the end\", EXPFILL }},",
      "27171:     { &ei_ieee80211_ff_anqp_capability, { \"wlan_mgt.fixed.anqp.capability.invalid\", PI_MALFORMED, PI_ERROR, \"Invalid vendor-specific ANQP capability\", EXPFILL }},",
      "",
      "[Removed Lines]",
      "27168:     { &ei_ieee80211_tag_number, { \"wlan_mgt.tag.number.unexpected_ie\", PI_MALFORMED, PI_ERROR, \"Unexpected IE (expected Advertisement Protocol)\", EXPFILL }},",
      "",
      "[Added Lines]",
      "27204:     { &ei_ieee80211_tag_number, { \"wlan_mgt.tag.number.unexpected_ie\", PI_MALFORMED, PI_ERROR, \"Unexpected Information Element ID\", EXPFILL }},",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-ieee80211.h||epan/dissectors/packet-ieee80211.h": [
      "File: epan/dissectors/packet-ieee80211.h -> epan/dissectors/packet-ieee80211.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "50:                              tvbuff_t *tvb, int offset, gint size);",
      "52: int add_tagged_field(packet_info *pinfo, proto_tree *tree,",
      "55: #define MAX_SSID_LEN    32",
      "56: #define MAX_PROTECT_LEN 10",
      "",
      "[Removed Lines]",
      "53:                             tvbuff_t *tvb, int offset, int ftype);",
      "",
      "[Added Lines]",
      "53:                             tvbuff_t *tvb, int offset, int ftype,",
      "54:                             const guint8 *valid_element_ids,",
      "55:                             guint valid_element_ids_count);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9e1232ee9e7ac3e7a7cb38a099dae66a7b425b4e",
      "candidate_info": {
        "commit_hash": "9e1232ee9e7ac3e7a7cb38a099dae66a7b425b4e",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/9e1232ee9e7ac3e7a7cb38a099dae66a7b425b4e",
        "files": [
          "epan/dissectors/packet-ieee80211.c",
          "epan/dissectors/packet-ieee80211.h"
        ],
        "message": "Convert IEEE802.11 tagged fields into a dissector table\n\nOne GIANT switch statement is a little difficult to maintain, so convert each\ncase into its own function and add them to a dissector table.  Many of the\ncase statements were already their own function, but signatures needed to\nbe converted into dissector_handle_t\n-1 was uses as the protocol for the dissector handles because there isn't\na need to be associated with a protocol.  This also allows third-parties\nand plugins to add tagged fields outside of Wireshark using the new\ndissector table.\n\nChange-Id: I5e4c705dd6a7d99549a27ae684dbde4c47774123\nReviewed-on: https://code.wireshark.org/review/19670\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c",
          "epan/dissectors/packet-ieee80211.h||epan/dissectors/packet-ieee80211.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c",
            "epan/dissectors/packet-ieee80211.h||epan/dissectors/packet-ieee80211.h"
          ],
          "candidate": [
            "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c",
            "epan/dissectors/packet-ieee80211.h||epan/dissectors/packet-ieee80211.h"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c": [
          "File: epan/dissectors/packet-ieee80211.c -> epan/dissectors/packet-ieee80211.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5093: static capture_dissector_handle_t llc_cap_handle;",
          "5094: static capture_dissector_handle_t ipx_cap_handle;",
          "5096: static int wlan_tap = -1;",
          "5098: static const value_string access_network_type_vals[] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5096: dissector_table_t tagged_field_table;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5815: }",
          "5817: static guint",
          "5819:                                tvbuff_t *tvb, int offset, gboolean *anqp)",
          "5820: {",
          "5821:   guint8      tag_no, tag_len, left;",
          "",
          "[Removed Lines]",
          "5818: dissect_advertisement_protocol(packet_info *pinfo, proto_tree *tree,",
          "",
          "[Added Lines]",
          "5820: dissect_advertisement_protocol_common(packet_info *pinfo, proto_tree *tree,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5903:   return 2 + tag_len;",
          "5904: }",
          "5906: static void",
          "5907: dissect_anqp_query_list(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo, int offset, int end)",
          "5908: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5908: static int",
          "5909: dissect_advertisement_protocol(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
          "5910: {",
          "5911:   return dissect_advertisement_protocol_common(pinfo, tree, tvb, 0, NULL);",
          "5912: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7917:     break;",
          "7918:   case PA_GAS_INITIAL_REQUEST:",
          "7919:     offset += add_ff_dialog_token(tree, tvb, pinfo, offset);",
          "7921:                                              &anqp);",
          "7922:     offset += dissect_gas_initial_request(tree, tvb, pinfo, offset, anqp);",
          "7923:     break;",
          "",
          "[Removed Lines]",
          "7920:     offset += dissect_advertisement_protocol(pinfo, tree, tvb, offset,",
          "",
          "[Added Lines]",
          "7928:     offset += dissect_advertisement_protocol_common(pinfo, tree, tvb, offset,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7925:     offset += add_ff_dialog_token(tree, tvb, pinfo, offset);",
          "7926:     offset += add_ff_status_code(tree, tvb, pinfo, offset);",
          "7927:     offset += add_ff_gas_comeback_delay(tree, tvb, pinfo, offset);",
          "7929:                                              &anqp);",
          "7930:     offset += dissect_gas_initial_response(tree, tvb, pinfo, offset, anqp);",
          "7931:     break;",
          "",
          "[Removed Lines]",
          "7928:     offset += dissect_advertisement_protocol(pinfo, tree, tvb, offset,",
          "",
          "[Added Lines]",
          "7936:     offset += dissect_advertisement_protocol_common(pinfo, tree, tvb, offset,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7940:     more = (tvb_get_guint8(tvb, offset) & 0x80) != 0;",
          "7941:     offset += add_ff_gas_fragment_id(tree, tvb, pinfo, offset);",
          "7942:     offset += add_ff_gas_comeback_delay(tree, tvb, pinfo, offset);",
          "7944:                                              &anqp);",
          "7945:     offset += dissect_gas_comeback_response(tree, tvb, pinfo, offset, anqp, frag,",
          "7946:                                             more, dialog_token);",
          "",
          "[Removed Lines]",
          "7943:     offset += dissect_advertisement_protocol(pinfo, tree, tvb, offset,",
          "",
          "[Added Lines]",
          "7951:     offset += dissect_advertisement_protocol_common(pinfo, tree, tvb, offset,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "8819:   return offset - start;",
          "8820: }",
          "8825:   if (tag_len < 2) {",
          "8828:   }",
          "8841: }",
          "8843: #if 0",
          "",
          "[Removed Lines]",
          "8822: static void",
          "8823: add_tag_relay_capabilities(packet_info *pinfo, proto_item *item, gint32 tag_len, proto_tree *tree, tvbuff_t *tvb, gint32 *offset) {",
          "8826:     expert_add_info_format(pinfo, item, &ei_ieee80211_tag_length, \"Tag length must be 2\");",
          "8827:     return;",
          "8832:   proto_tree_add_item(tree, hf_ieee80211_tag_relay_support, tvb, *offset, 1, ENC_NA);",
          "8833:   proto_tree_add_item(tree, hf_ieee80211_tag_relay_use, tvb, *offset, 1, ENC_NA);",
          "8834:   proto_tree_add_item(tree, hf_ieee80211_tag_relay_permission, tvb, *offset, 1, ENC_NA);",
          "8835:   proto_tree_add_item(tree, hf_ieee80211_tag_AC_power, tvb, *offset, 1, ENC_NA);",
          "8836:   proto_tree_add_item(tree, hf_ieee80211_tag_relay_prefer, tvb, *offset, 1, ENC_NA);",
          "8837:   proto_tree_add_item(tree, hf_ieee80211_tag_duplex, tvb, *offset, 1, ENC_NA);",
          "8838:   proto_tree_add_item(tree, hf_ieee80211_tag_cooperation, tvb, *offset, 1, ENC_NA);",
          "8840:   return;",
          "",
          "[Added Lines]",
          "8830: static int",
          "8831: add_tag_relay_capabilities(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "8832: {",
          "8833:   int tag_len = tvb_reported_length(tvb);",
          "8834:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "8835:   int offset = 0;",
          "8838:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag length must be 2\");",
          "8839:     return 1;",
          "8842:   proto_tree_add_item(tree, hf_ieee80211_tag_relay_support, tvb, offset, 1, ENC_NA);",
          "8843:   proto_tree_add_item(tree, hf_ieee80211_tag_relay_use, tvb, offset, 1, ENC_NA);",
          "8844:   proto_tree_add_item(tree, hf_ieee80211_tag_relay_permission, tvb, offset, 1, ENC_NA);",
          "8845:   proto_tree_add_item(tree, hf_ieee80211_tag_AC_power, tvb, offset, 1, ENC_NA);",
          "8846:   proto_tree_add_item(tree, hf_ieee80211_tag_relay_prefer, tvb, offset, 1, ENC_NA);",
          "8847:   proto_tree_add_item(tree, hf_ieee80211_tag_duplex, tvb, offset, 1, ENC_NA);",
          "8848:   proto_tree_add_item(tree, hf_ieee80211_tag_cooperation, tvb, offset, 1, ENC_NA);",
          "8849:   return tvb_captured_length(tvb);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "10866:   return offset;",
          "10867: }",
          "10868: static int",
          "10873: {",
          "10874:   proto_item *ti_ex_cap;",
          "10875:   proto_tree *ex_cap_tree;",
          "10877:   if (tag_len < 1)",
          "10878:   {",
          "10881:   }",
          "10885:   ti_ex_cap = proto_tree_add_item(tree, hf_ieee80211_tag_extended_capabilities, tvb, offset, 1, ENC_NA);",
          "",
          "[Removed Lines]",
          "10869: dissect_extended_capabilities_ie(packet_info *pinfo, proto_tree *tree,",
          "10870:                          proto_item *ti, proto_item *ti_len,",
          "10871:                          guint32 tag_len, tvbuff_t *tvb,",
          "10872:                          int offset, int tag_end)",
          "10879:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag length %u too short, must be greater than 0\", tag_len);",
          "10880:     return offset;",
          "10882:   proto_item_append_text(ti, \" (%u octet%s)\", tag_len, plurality(tag_len, \"\", \"s\"));",
          "",
          "[Added Lines]",
          "10880: dissect_extended_capabilities_ie(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "10882:   int tag_len = tvb_reported_length(tvb);",
          "10883:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "10884:   int offset = 0;",
          "10890:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag length %u too short, must be greater than 0\", tag_len);",
          "10891:     return 1;",
          "10893:   proto_item_append_text(field_data->item_tag, \" (%u octet%s)\", tag_len, plurality(tag_len, \"\", \"s\"));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "10896:   offset += 1;",
          "10900:     return offset;",
          "10901:   }",
          "10902:   ti_ex_cap = proto_tree_add_item(tree, hf_ieee80211_tag_extended_capabilities, tvb, offset, 1, ENC_NA);",
          "",
          "[Removed Lines]",
          "10899:   if (offset >= tag_end) {",
          "",
          "[Added Lines]",
          "10910:   if (offset >= tag_len) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "10913:   offset += 1;",
          "10917:     return offset;",
          "10918:   }",
          "10919:   ti_ex_cap = proto_tree_add_item(tree, hf_ieee80211_tag_extended_capabilities, tvb, offset, 1, ENC_NA);",
          "",
          "[Removed Lines]",
          "10916:   if (offset >= tag_end) {",
          "",
          "[Added Lines]",
          "10927:   if (offset >= tag_len) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "10930:   offset += 1;",
          "10934:     return offset;",
          "10935:   }",
          "10936:   ti_ex_cap = proto_tree_add_item(tree, hf_ieee80211_tag_extended_capabilities, tvb, offset, 1, ENC_NA);",
          "",
          "[Removed Lines]",
          "10933:   if (offset >= tag_end) {",
          "",
          "[Added Lines]",
          "10944:   if (offset >= tag_len) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "10947:   offset += 1;",
          "10951:     return offset;",
          "10952:   }",
          "10953:   ti_ex_cap = proto_tree_add_item(tree, hf_ieee80211_tag_extended_capabilities, tvb, offset, 1, ENC_NA);",
          "",
          "[Removed Lines]",
          "10950:   if (offset >= tag_end) {",
          "",
          "[Added Lines]",
          "10961:   if (offset >= tag_len) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "10964:   offset += 1;",
          "10968:     return offset;",
          "10969:   }",
          "10970:   ti_ex_cap = proto_tree_add_item(tree, hf_ieee80211_tag_extended_capabilities, tvb, offset, 1, ENC_NA);",
          "",
          "[Removed Lines]",
          "10967:   if (offset >= tag_end) {",
          "",
          "[Added Lines]",
          "10978:   if (offset >= tag_len) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "10984:     return offset;",
          "10985:   }",
          "10986:   ti_ex_cap = proto_tree_add_item(tree, hf_ieee80211_tag_extended_capabilities, tvb, offset, 1, ENC_NA);",
          "",
          "[Removed Lines]",
          "10983:   if (offset >= tag_end) {",
          "",
          "[Added Lines]",
          "10994:   if (offset >= tag_len) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "10991:   offset += 1;",
          "10995:     return offset;",
          "10996:   }",
          "10997:   ti_ex_cap = proto_tree_add_item(tree, hf_ieee80211_tag_extended_capabilities, tvb, offset, 1, ENC_NA);",
          "",
          "[Removed Lines]",
          "10994:   if (offset >= tag_end) {",
          "",
          "[Added Lines]",
          "11005:   if (offset >= tag_len) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "11004:   ti_ex_cap = proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b63, tvb, offset, 1, ENC_NA);",
          "11007:     proto_item_append_text(ti_ex_cap, \" (b63-64 Max Number of MSDUs in AMSDU: %s)\",",
          "11008:       val_to_str((tvb_get_guint8(tvb, offset) & 0x80) + ((tvb_get_guint8(tvb, offset+1) & 0x1) << 1),",
          "",
          "[Removed Lines]",
          "11005:   if (offset+1 < tag_end) {",
          "",
          "[Added Lines]",
          "11016:   if (offset+1 < tag_len) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "11013:   offset += 1;",
          "11017:     return offset;",
          "11018:   }",
          "11019:   ti_ex_cap = proto_tree_add_item(tree, hf_ieee80211_tag_extended_capabilities, tvb, offset, 1, ENC_NA);",
          "",
          "[Removed Lines]",
          "11016:   if (offset >= tag_end) {",
          "",
          "[Added Lines]",
          "11027:   if (offset >= tag_len) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "11080: }",
          "11082: static int",
          "11085: {",
          "11086:   proto_item *cap_item;",
          "11087:   proto_tree *cap_tree;",
          "11089:   if (tag_len != 12) {",
          "11091:                            \"VHT Capabilities IE length %u wrong, must be = 12\", tag_len);",
          "11093:   }",
          "",
          "[Removed Lines]",
          "11083: dissect_vht_capability_ie(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "11084:          guint32 tag_len, proto_item *ti_len)",
          "11090:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "11092:     return offset;",
          "",
          "[Added Lines]",
          "11094: dissect_vht_capability_ie(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "11096:   int tag_len = tvb_reported_length(tvb);",
          "11097:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "11098:   int offset = 0;",
          "11103:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "11105:     return 1;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "11154: }",
          "11156: static int",
          "11159: {",
          "11160:   proto_item *op_item, *ti;",
          "11161:   proto_tree *op_tree, *basic_mcs_tree;",
          "11163:   if (tag_len != 5) {",
          "11165:                            \"VHT Operation IE length %u wrong, must be = 5\", tag_len);",
          "11167:   }",
          "",
          "[Removed Lines]",
          "11157: dissect_vht_operation_ie(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "11158:          guint32 tag_len, proto_item *ti_len)",
          "11164:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "11166:     return offset;",
          "",
          "[Added Lines]",
          "11170: dissect_vht_operation_ie(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "11172:   int tag_len = tvb_reported_length(tvb);",
          "11173:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "11174:   int offset = 0;",
          "11179:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "11181:     return 1;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "11192: }",
          "11194: static int",
          "11197: {",
          "11198:   proto_item *tx_pwr_item, *ti;",
          "11199:   proto_tree *tx_pwr_info_tree;",
          "11200:   guint8 opt_ie_cnt=0;",
          "11201:   guint8 i;",
          "11203:   if (tag_len < 2 || tag_len > 5) {",
          "11205:                            \"VHT TX PWR Envelope IE length %u wrong, must be >= 2 and <= 5\", tag_len);",
          "11207:   }",
          "11209:   tx_pwr_item = proto_tree_add_item(tree, hf_ieee80211_vht_tpe_pwr_info, tvb, offset, 1, ENC_NA);",
          "",
          "[Removed Lines]",
          "11195: dissect_vht_tx_pwr_envelope(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "11196:     guint32 tag_len, proto_item *ti_len)",
          "11204:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "11206:     return offset;",
          "",
          "[Added Lines]",
          "11210: dissect_vht_tx_pwr_envelope(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "11212:   int tag_len = tvb_reported_length(tvb);",
          "11213:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "11214:   int offset = 0;",
          "11221:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "11223:     return 1;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "11248:   return offset;",
          "11249: }",
          "11254: {",
          "11257:   }",
          "11259:   if (tag_len < 3) {",
          "11261:                           \"MDIE content length must be at least 3 bytes\");",
          "11263:   }",
          "11265:   proto_tree_add_item(tree, hf_ieee80211_tag_mobility_domain_mdid,",
          "",
          "[Removed Lines]",
          "11251: static void",
          "11252: dissect_mobility_domain(proto_tree *tree, tvbuff_t *tvb, int offset,",
          "11253:                         guint32 tag_len, association_sanity_check_t *association_sanity_check)",
          "11255:   if (association_sanity_check != NULL) {",
          "11256:     association_sanity_check->association_has_mobility_domain_element = TRUE;",
          "11260:     proto_tree_add_string(tree, hf_ieee80211_tag_interpretation, tvb, offset, tag_len,",
          "11262:     return;",
          "",
          "[Added Lines]",
          "11268: static int",
          "11269: dissect_mobility_domain(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "11271:   int tag_len = tvb_reported_length(tvb);",
          "11272:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "11273:   int offset = 0;",
          "11275:   if (field_data->sanity_check != NULL) {",
          "11276:     field_data->sanity_check->association_has_mobility_domain_element = TRUE;",
          "11280:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "11282:     return 1;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "11270:                       tvb, offset + 2, 1, ENC_LITTLE_ENDIAN);",
          "11271:   proto_tree_add_item(tree, hf_ieee80211_tag_mobility_domain_ft_capab_resource_req,",
          "11272:                       tvb, offset + 2, 1, ENC_LITTLE_ENDIAN);",
          "11273: }",
          "11278: {",
          "11280:   if (tag_len < 82) {",
          "11282:                           \"FTIE content length must be at least 82 bytes\");",
          "11284:   }",
          "11286:   proto_tree_add_item(tree, hf_ieee80211_tag_ft_mic_control,",
          "",
          "[Removed Lines]",
          "11275: static void",
          "11276: dissect_fast_bss_transition(proto_tree *tree, tvbuff_t *tvb, int offset,",
          "11277:                             guint32 tag_len)",
          "11279:   int end = offset + tag_len;",
          "11281:     proto_tree_add_string(tree, hf_ieee80211_tag_interpretation, tvb, offset, tag_len,",
          "11283:     return;",
          "",
          "[Added Lines]",
          "11293:   return tvb_captured_length(tvb);",
          "11296: static int",
          "11297: dissect_fast_bss_transition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "11299:   int tag_len = tvb_reported_length(tvb);",
          "11300:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "11301:   int offset = 0;",
          "11303:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "11305:     return 1;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "11298:                       tvb, offset, 32, ENC_NA);",
          "11299:   offset += 32;",
          "11302:     guint8 id, len;",
          "11303:     int s_end;",
          "11304:     proto_tree_add_item(tree, hf_ieee80211_tag_ft_subelem_id,",
          "",
          "[Removed Lines]",
          "11301:   while (offset + 2 <= end) {",
          "",
          "[Added Lines]",
          "11323:   while (offset + 2 <= tag_len) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "11311:     len = tvb_get_guint8(tvb, offset);",
          "11312:     offset += 1;",
          "11315:       proto_tree_add_string(tree, hf_ieee80211_tag_interpretation, tvb, offset,",
          "11318:     }",
          "11320:     s_end = offset + len;",
          "",
          "[Removed Lines]",
          "11314:     if (offset + len > end) {",
          "11316:                             end - offset, \"Invalid FTIE subelement\");",
          "11317:       return;",
          "",
          "[Added Lines]",
          "11336:     if (offset + len > tag_len) {",
          "11338:                             tag_len - offset, \"Invalid FTIE subelement\");",
          "11339:       return offset;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "11374:     }",
          "11375:     offset = s_end;",
          "11376:   }",
          "11377: }",
          "11381: {",
          "11382:   if (tag_len < 16) {",
          "11384:                           \"MMIE content length must be at least 16 bytes\");",
          "11386:   }",
          "11388:   proto_tree_add_item(tree, hf_ieee80211_tag_mmie_keyid, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "",
          "[Removed Lines]",
          "11379: static void",
          "11380: dissect_mmie(proto_tree *tree, tvbuff_t *tvb, int offset, guint32 tag_len)",
          "11383:     proto_tree_add_string(tree, hf_ieee80211_tag_interpretation, tvb, offset, tag_len,",
          "11385:     return;",
          "",
          "[Added Lines]",
          "11400:   return tvb_captured_length(tvb);",
          "11403: static int",
          "11404: dissect_mmie(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "11406:   int tag_len = tvb_reported_length(tvb);",
          "11407:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "11408:   int offset = 0;",
          "11411:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "11413:     return 1;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "11390:                       ENC_NA);",
          "11391:   proto_tree_add_item(tree, hf_ieee80211_tag_mmie_mic, tvb, offset + 8, 8,",
          "11392:                       ENC_NA);",
          "11393: }",
          "11397: {",
          "11399:   proto_tree *entry;",
          "11400:   gboolean first = TRUE;",
          "11403:     guint8 len = tvb_get_guint8(tvb, offset + 1);",
          "11404:     guint8 *str;",
          "11407:       break;",
          "11409:     str = tvb_format_text(tvb, offset + 2, len);",
          "",
          "[Removed Lines]",
          "11395: static void",
          "11396: dissect_ssid_list(proto_tree *tree, tvbuff_t *tvb, int offset, guint32 tag_len)",
          "11398:   int end = offset + tag_len;",
          "11402:   while (offset + 1 <= end) {",
          "11406:     if (offset + 2 + len > end)",
          "",
          "[Added Lines]",
          "11421:   return tvb_captured_length(tvb);",
          "11424: static int",
          "11425: dissect_ssid_list(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void* data _U_)",
          "11427:   int tag_len = tvb_reported_length(tvb);",
          "11428:   int offset = 0;",
          "11432:   while (offset + 1 <= tag_len) {",
          "11436:     if (offset + 2 + len > tag_len)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "11419:                         ENC_ASCII|ENC_NA);",
          "11420:     offset += len;",
          "11421:   }",
          "11422: }",
          "11427: {",
          "11428:   if (tag_len < 18) {",
          "11430:                           \"Link Identifier content length must be at least \"",
          "11431:                           \"18 bytes\");",
          "11433:   }",
          "11435:   proto_tree_add_item(tree, hf_ieee80211_tag_link_id_bssid, tvb,",
          "",
          "[Removed Lines]",
          "11424: static void",
          "11425: dissect_link_identifier(proto_tree *tree, tvbuff_t *tvb, int offset,",
          "11426:                         guint32 tag_len)",
          "11429:     proto_tree_add_string(tree, hf_ieee80211_tag_interpretation, tvb, offset, tag_len,",
          "11432:     return;",
          "",
          "[Added Lines]",
          "11453:   return tvb_captured_length(tvb);",
          "11456: static int",
          "11457: dissect_link_identifier(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "11459:   int tag_len = tvb_reported_length(tvb);",
          "11460:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "11461:   int offset = 0;",
          "11464:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "11467:     return tvb_captured_length(tvb);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "11438:                       offset + 6, 6, ENC_NA);",
          "11439:   proto_tree_add_item(tree, hf_ieee80211_tag_link_id_resp_sta, tvb,",
          "11440:                       offset + 12, 6, ENC_NA);",
          "11441: }",
          "11446: {",
          "11447:   if (tag_len < 18) {",
          "11449:                           \"Wakeup Schedule content length must be at least \"",
          "11450:                           \"18 bytes\");",
          "11452:   }",
          "11454:   proto_tree_add_item(tree, hf_ieee80211_tag_wakeup_schedule_offset, tvb,",
          "",
          "[Removed Lines]",
          "11443: static void",
          "11444: dissect_wakeup_schedule(proto_tree *tree, tvbuff_t *tvb, int offset,",
          "11445:                         guint32 tag_len)",
          "11448:     proto_tree_add_string(tree, hf_ieee80211_tag_interpretation, tvb, offset, tag_len,",
          "11451:     return;",
          "",
          "[Added Lines]",
          "11476:   return tvb_captured_length(tvb);",
          "11479: static int",
          "11480: dissect_wakeup_schedule(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "11482:   int tag_len = tvb_reported_length(tvb);",
          "11483:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "11484:   int offset = 0;",
          "11487:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "11490:     return tvb_captured_length(tvb);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "11471:   proto_tree_add_item(tree, hf_ieee80211_tag_wakeup_schedule_idle_count, tvb,",
          "11472:                       offset, 2, ENC_LITTLE_ENDIAN);",
          "11473: }",
          "11478: {",
          "11479:   if (tag_len < 4) {",
          "11481:                           \"Channel Switch Timing content length must be at \"",
          "11482:                           \"least 4 bytes\");",
          "11484:   }",
          "11486:   proto_tree_add_item(tree, hf_ieee80211_tag_channel_switch_timing_switch_time,",
          "",
          "[Removed Lines]",
          "11475: static void",
          "11476: dissect_channel_switch_timing(proto_tree *tree, tvbuff_t *tvb, int offset,",
          "11477:                               guint32 tag_len)",
          "11480:     proto_tree_add_string(tree, hf_ieee80211_tag_interpretation, tvb, offset, tag_len,",
          "11483:     return;",
          "",
          "[Added Lines]",
          "11512:   return tvb_captured_length(tvb);",
          "11515: static int",
          "11516: dissect_channel_switch_timing(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "11518:   int tag_len = tvb_reported_length(tvb);",
          "11519:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "11520:   int offset = 0;",
          "11523:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "11526:     return tvb_captured_length(tvb);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "11490:   proto_tree_add_item(tree,",
          "11491:                       hf_ieee80211_tag_channel_switch_timing_switch_timeout,",
          "11492:                       tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11493: }",
          "11498: {",
          "11499:   if (tag_len < 3) {",
          "11504:   }",
          "11506:   proto_tree_add_item(tree, hf_ieee80211_tag_pti_control_tid, tvb,",
          "",
          "[Removed Lines]",
          "11495: static void",
          "11496: dissect_pti_control(proto_tree *tree, tvbuff_t *tvb, int offset,",
          "11497:                     guint32 tag_len)",
          "11500:     proto_tree_add_string(tree, hf_ieee80211_tag_interpretation, tvb, offset, tag_len,",
          "11501:                           \"PTI Control content length must be at least \"",
          "11502:                           \"3 bytes\");",
          "11503:     return;",
          "",
          "[Added Lines]",
          "11536:   return tvb_captured_length(tvb);",
          "11539: static int",
          "11540: dissect_pti_control(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "11542:   int tag_len = tvb_reported_length(tvb);",
          "11543:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "11544:   int offset = 0;",
          "11547:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"PTI Control content length must be at least 3 bytes\");",
          "11548:     return tvb_captured_length(tvb);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "11510:   proto_tree_add_item(tree, hf_ieee80211_tag_pti_control_sequence_control, tvb,",
          "11511:                       offset, 2, ENC_LITTLE_ENDIAN);",
          "11512: }",
          "11517: {",
          "11518:   if (tag_len < 1) {",
          "11523:   }",
          "11525:   proto_tree_add_item(tree, hf_ieee80211_tag_pu_buffer_status_ac_bk, tvb,",
          "",
          "[Removed Lines]",
          "11514: static void",
          "11515: dissect_pu_buffer_status(proto_tree *tree, tvbuff_t *tvb, int offset,",
          "11516:                          guint32 tag_len)",
          "11519:     proto_tree_add_string(tree, hf_ieee80211_tag_interpretation, tvb, offset, tag_len,",
          "11520:                           \"PU Buffer Status content length must be at least \"",
          "11521:                           \"1 byte\");",
          "11522:     return;",
          "",
          "[Added Lines]",
          "11557:   return tvb_captured_length(tvb);",
          "11560: static int",
          "11561: dissect_pu_buffer_status(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "11563:   int tag_len = tvb_reported_length(tvb);",
          "11564:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "11565:   int offset = 0;",
          "11568:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"PU Buffer Status content length must be at least 1 byte\");",
          "11569:     return tvb_captured_length(tvb);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "11530:                       offset, 1, ENC_LITTLE_ENDIAN);",
          "11531:   proto_tree_add_item(tree, hf_ieee80211_tag_pu_buffer_status_ac_vo, tvb,",
          "11532:                       offset, 1, ENC_LITTLE_ENDIAN);",
          "11533: }",
          "11538: {",
          "11539:   proto_item *pi;",
          "11541:   pi = proto_tree_add_item(tree, hf_ieee80211_tag_timeout_int_type, tvb,",
          "",
          "[Removed Lines]",
          "11535: static void",
          "11536: dissect_timeout_interval(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo, int offset,",
          "11537:                          guint32 tag_len)",
          "",
          "[Added Lines]",
          "11580:   return tvb_captured_length(tvb);",
          "11583: static int",
          "11584: dissect_timeout_interval(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
          "11586:   int tag_len = tvb_reported_length(tvb);",
          "11587:   int offset = 0;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "11544:     expert_add_info_format(pinfo, pi, &ei_ieee80211_tag_length,",
          "11545:                            \"Timeout Interval content length must be at least \"",
          "11546:                           \"5 bytes\");",
          "11548:   }",
          "11550:   proto_tree_add_item(tree, hf_ieee80211_tag_timeout_int_value, tvb,",
          "11551:                       offset + 1, 4, ENC_LITTLE_ENDIAN);",
          "11552: }",
          "11554: static int",
          "11557: {",
          "11559:   proto_tree  *sub_tree;",
          "11560:   guint8       desc_cnt = 0;",
          "11561:   guint32      next_ie;",
          "11562:   int          offset_r = 0;",
          "11563:   const guint8 ids[] = { TAG_RIC_DESCRIPTOR };",
          "11567:                            \"RIC Data Length must be 4 bytes\");",
          "11568:     return 0;",
          "11569:   }",
          "",
          "[Removed Lines]",
          "11547:     return;",
          "11555: dissect_ric_data(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb, int offset,",
          "11556:                          guint32 tag_len, proto_item *ti, proto_item *ti_len, int ftype)",
          "11565:   if (tag_len !=  4)  {",
          "11566:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "",
          "[Added Lines]",
          "11596:     return 1;",
          "11601:   return tvb_captured_length(tvb);",
          "11605: dissect_ric_data(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "11607:   int tag_len = tvb_reported_length(tvb);",
          "11608:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "11609:   int offset = 0;",
          "11616:   if (tag_len != 4)  {",
          "11617:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "11588:   sub_tree = proto_item_add_subtree(tree, ett_tag_ric_data_desc_ie);",
          "11591:   if (desc_cnt == 0) {",
          "11593:   }",
          "11597:     next_ie = tvb_get_guint8(tvb, offset);",
          "11602:       break;",
          "",
          "[Removed Lines]",
          "11590:   proto_item_append_text(ti, \" :Resource Descriptor List\");",
          "11592:     proto_item_append_text(ti, \" :0 (Weird?)\");",
          "11595:   while ( desc_cnt !=0 ) {",
          "11598:     proto_item_append_text(ti, \" :(%d:%s)\", desc_cnt, val_to_str_ext(next_ie, &tag_num_vals_ext, \"Reserved (%d)\"));",
          "11600:     offset_r = add_tagged_field(pinfo, sub_tree, tvb, offset, ftype, ids, G_N_ELEMENTS(ids), NULL);",
          "",
          "[Added Lines]",
          "11641:   proto_item_append_text(field_data->item_tag, \" :Resource Descriptor List\");",
          "11643:     proto_item_append_text(field_data->item_tag, \" :0 (Weird?)\");",
          "11646:   while ( desc_cnt != 0 ) {",
          "11649:     proto_item_append_text(field_data->item_tag, \" :(%d:%s)\", desc_cnt, val_to_str_ext(next_ie, &tag_num_vals_ext, \"Reserved (%d)\"));",
          "11651:     offset_r = add_tagged_field(pinfo, sub_tree, tvb, offset, field_data->ftype, ids, G_N_ELEMENTS(ids), NULL);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "11607:     desc_cnt--;",
          "11608:   }",
          "11611: }",
          "11613: static int",
          "11616: {",
          "11620:                            \"OBSS Length must be 14 bytes\");",
          "11622:   }",
          "11624:   proto_tree_add_item(tree, hf_ieee80211_tag_obss_spd, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "",
          "[Removed Lines]",
          "11610:   return tag_len;",
          "11614: dissect_overlap_bss_scan_par(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb, int offset,",
          "11615:                          guint32 tag_len, proto_item *ti _U_, proto_item *ti_len)",
          "11618:   if (tag_len !=  14)  {",
          "11619:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "11621:     return 0;",
          "",
          "[Added Lines]",
          "11661:   return tvb_captured_length(tvb);",
          "11666: dissect_overlap_bss_scan_par(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "11668:   int offset = 0;",
          "11669:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "11670:   int tag_len = tvb_reported_length(tvb);",
          "11672:   if (tag_len != 14)  {",
          "11673:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "11675:     return 1;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "11645:   return offset;",
          "11646: }",
          "11648: static int",
          "11651: {",
          "11653:   guint8       rsrc_type = 0;",
          "11655:   if (tag_len < 1)  {",
          "11657:                            \"RIC Data Length must be at least 1 byte\");",
          "11659:   }",
          "11661:   rsrc_type = tvb_get_guint8(tvb, offset);",
          "",
          "[Removed Lines]",
          "11649: dissect_ric_descriptor(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb, int offset,",
          "11650:                          guint32 tag_len, proto_item *ti, proto_item *ti_len)",
          "11656:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "11658:     return 0;",
          "",
          "[Added Lines]",
          "11704: dissect_ric_descriptor(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "11706:   int offset = 0;",
          "11707:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "11708:   int tag_len = tvb_reported_length(tvb);",
          "11712:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "11714:     return 1;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "11677:     proto_tree_add_item(tree, hf_ieee80211_tag_ric_desc_var_params, tvb,",
          "11678:                         offset, tag_len-1, ENC_NA);",
          "11679:     offset += tag_len -1;",
          "11680:   }else {",
          "11683:   }",
          "11685:   return offset;",
          "11686: }",
          "11688: static int",
          "11690: {",
          "11691:   proto_tree_add_item(tree, hf_ieee80211_ext_bss_mu_mimo_capable_sta_count, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11692:   offset += 2;",
          "11693:   proto_tree_add_item(tree, hf_ieee80211_ext_bss_ss_underutilization, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "",
          "[Removed Lines]",
          "11676:     proto_item_append_text(ti, \" : Block ACK Params\");",
          "11682:     proto_item_append_text(ti, \" :Reserved (type != 1)\");",
          "11689: dissect_ext_bss_load(proto_tree *tree, tvbuff_t *tvb, int offset)",
          "",
          "[Added Lines]",
          "11732:     proto_item_append_text(field_data->item_tag, \" : Block ACK Params\");",
          "11738:     proto_item_append_text(field_data->item_tag, \" :Reserved (type != 1)\");",
          "11745: dissect_ext_bss_load(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void* data _U_)",
          "11747:   int offset = 0;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "11702:   return offset;",
          "11703: }",
          "11706: static int",
          "11708: {",
          "11710:   proto_tree_add_item(tree, hf_ieee80211_wide_bw_new_channel_width, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "11711:   offset += 1;",
          "",
          "[Removed Lines]",
          "11707: dissect_wide_bw_channel_switch(proto_tree *tree, tvbuff_t *tvb, int offset)",
          "",
          "[Added Lines]",
          "11763: dissect_wide_bw_channel_switch(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void* data _U_)",
          "11765:   int offset = 0;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "11717:   return offset;",
          "11718: }",
          "11719: static int",
          "11722: {",
          "11723:   int tmp_sublen;",
          "11724:   const guint8 ids[] = { TAG_COUNTRY_INFO, TAG_WIDE_BW_CHANNEL_SWITCH,",
          "11725:     TAG_VHT_TX_PWR_ENVELOPE };",
          "",
          "[Removed Lines]",
          "11720: dissect_channel_switch_wrapper(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb, int offset,",
          "11721:                          guint32 tag_len)",
          "",
          "[Added Lines]",
          "11778: dissect_channel_switch_wrapper(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void* data _U_)",
          "11780:   int tag_len = tvb_reported_length(tvb);",
          "11781:   int offset = 0;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "11742: }",
          "11744: static int",
          "11746: {",
          "11747:   proto_item *ti;",
          "11748:   proto_tree *bit_tree;",
          "",
          "[Removed Lines]",
          "11745: dissect_operating_mode_notification(proto_tree *tree, tvbuff_t *tvb, int offset)",
          "",
          "[Added Lines]",
          "11804: dissect_operating_mode_notification(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void* data _U_)",
          "11806:   int offset = 0;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "11910: static int",
          "11913: {",
          "11914:   proto_item *cap_item;",
          "11919:   if (tag_len < 22) {",
          "11921:                            \"HT Information IE content length %u wrong, must be at least 22 bytes\", tag_len);",
          "11923:   }",
          "11926:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_info_primary_channel, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "11927:   offset += 1;",
          "",
          "[Removed Lines]",
          "11911: dissect_ht_info_ie_1_1(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "11912:                        guint32 tag_len, proto_item *ti_len)",
          "11915:   proto_tree *cap_tree;",
          "11917:   cap_tree = tree;",
          "11920:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "11922:     return offset;",
          "",
          "[Added Lines]",
          "11970: dissect_ht_info_ie_1_1(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "11972:   int tag_len = tvb_reported_length(tvb);",
          "11973:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "11974:   int offset = 0;",
          "11976:   proto_tree *cap_tree = tree;",
          "11979:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "11981:     return 1;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "12090: }",
          "12092: static int",
          "12094: {",
          "12095:   proto_tree_add_item(tree, hf_ieee80211_tag_bss_max_idle_period,",
          "12096:                       tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "12097:   offset += 2;",
          "",
          "[Removed Lines]",
          "12093: dissect_bss_max_idle_period(proto_tree *tree, tvbuff_t *tvb, int offset)",
          "",
          "[Added Lines]",
          "12151: dissect_bss_max_idle_period(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void* data _U_)",
          "12153:   int offset = 0;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "12113: };",
          "12115: static int",
          "12118: {",
          "12120:   const guint8 ids[] = {",
          "12122:     TAG_VENDOR_SPECIFIC_IE",
          "",
          "[Removed Lines]",
          "12116: dissect_tfs_request(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb, int offset,",
          "12117:                     guint32 tag_len, int ftype)",
          "12119:   int end = offset + tag_len;",
          "",
          "[Added Lines]",
          "12175: dissect_tfs_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "12177:   int tag_len = tvb_reported_length(tvb);",
          "12178:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "12179:   int offset = 0;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "12130:   proto_tree_add_item(tree, hf_ieee80211_tag_tfs_request_ac_notify,",
          "12131:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "12132:   offset++;",
          "12134:     expert_add_info_format(pinfo, tree, &ei_ieee80211_missing_data,",
          "12135:                            \"No TFS Request subelements in TFS Request\");",
          "12137:   }",
          "12140:     guint8 id, len;",
          "12141:     int s_offset, s_end;",
          "",
          "[Removed Lines]",
          "12133:   if (offset + 1 >= end) {",
          "12136:     return end;",
          "12139:   while (offset + 1 < end) {",
          "",
          "[Added Lines]",
          "12193:   if (offset + 1 >= tag_len) {",
          "12196:     return tvb_captured_length(tvb);",
          "12199:   while (offset + 1 < tag_len) {",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "12148:     proto_tree_add_item(tree, hf_ieee80211_tag_tfs_request_subelem_len,",
          "12149:                         tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "12150:     offset++;",
          "12152:       expert_add_info_format(pinfo, tree, &ei_ieee80211_tag_length,",
          "12153:                              \"Not enough data for TFS Request subelement\");",
          "12155:     }",
          "12156:     switch (id) {",
          "12157:     case TFS_REQ_SUBELEM_TFS:",
          "",
          "[Removed Lines]",
          "12151:     if (offset + len > end) {",
          "12154:       return end;",
          "",
          "[Added Lines]",
          "12211:     if (offset + len > tag_len) {",
          "12214:       return tvb_captured_length(tvb);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "12159:       s_end = offset + len;",
          "12160:       while (s_offset < s_end) {",
          "12163:         if (tlen==0)",
          "12164:           break;",
          "12165:         s_offset += tlen;",
          "",
          "[Removed Lines]",
          "12162:         int tlen = add_tagged_field(pinfo, tree, tvb, s_offset, ftype, ids, G_N_ELEMENTS(ids), NULL);",
          "",
          "[Added Lines]",
          "12222:         int tlen = add_tagged_field(pinfo, tree, tvb, s_offset, field_data->ftype, ids, G_N_ELEMENTS(ids), NULL);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "12173:     offset += len;",
          "12174:   }",
          "12177:     proto_tree_add_expert_format(tree, pinfo, &ei_ieee80211_extra_data,",
          "12179:   }",
          "12182: }",
          "12184: enum tfs_response_subelem_id {",
          "",
          "[Removed Lines]",
          "12176:   if (offset < end) {",
          "12178:                            tvb, offset, end - offset, \"Extra data after TFS Subelements\");",
          "12181:   return end;",
          "",
          "[Added Lines]",
          "12236:   if (offset < tag_len) {",
          "12238:                            tvb, offset, tag_len - offset, \"Extra data after TFS Subelements\");",
          "12241:   return tvb_captured_length(tvb);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "12195: };",
          "12197: static int",
          "12200: {",
          "12202:   const guint8 ids[] = {",
          "12205:     TAG_VENDOR_SPECIFIC_IE",
          "12206:   };",
          "12209:     guint8 id, len;",
          "12210:     int s_offset, s_end;",
          "",
          "[Removed Lines]",
          "12198: dissect_tfs_response(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb,",
          "12199:                      int offset, guint32 tag_len, int ftype)",
          "12201:   int end = offset + tag_len;",
          "12208:   while (offset + 3 <= end) {",
          "",
          "[Added Lines]",
          "12258: dissect_tfs_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "12260:   int tag_len = tvb_reported_length(tvb);",
          "12261:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "12262:   int offset = 0;",
          "12269:   while (offset + 3 <= tag_len) {",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "12217:     proto_tree_add_item(tree, hf_ieee80211_tag_tfs_response_subelem_len,",
          "12218:                         tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "12219:     offset++;",
          "12221:       expert_add_info_format(pinfo, tree, &ei_ieee80211_tag_length,",
          "12222:                              \"Not enough data for TFS Request subelement\");",
          "12224:     }",
          "12225:     switch (id) {",
          "12226:     case TFS_RESP_SUBELEM_TFS_STATUS:",
          "",
          "[Removed Lines]",
          "12220:     if (offset + len > end) {",
          "12223:       return end;",
          "",
          "[Added Lines]",
          "12281:     if (offset + len > tag_len) {",
          "12284:       return tvb_captured_length(tvb);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "12234:       s_end = offset + len;",
          "12235:       while (s_offset < s_end) {",
          "12238:         if (tlen==0)",
          "12239:           break;",
          "12240:         s_offset += tlen;",
          "",
          "[Removed Lines]",
          "12237:         int tlen = add_tagged_field(pinfo, tree, tvb, s_offset, ftype, ids, G_N_ELEMENTS(ids), NULL);",
          "",
          "[Added Lines]",
          "12298:         int tlen = add_tagged_field(pinfo, tree, tvb, s_offset, field_data->ftype, ids, G_N_ELEMENTS(ids), NULL);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "12249:     offset += len;",
          "12250:   }",
          "12253:     proto_tree_add_expert_format(tree, pinfo, &ei_ieee80211_extra_data,",
          "12255:   }",
          "12258: }",
          "12260: static const value_string wnm_sleep_mode_action_types[] = {",
          "",
          "[Removed Lines]",
          "12252:   if (offset < end) {",
          "12254:                            tvb, offset, end - offset, \"Extra data after TFS Subelements\");",
          "12257:   return end;",
          "",
          "[Added Lines]",
          "12313:   if (offset < tag_len) {",
          "12315:                            tvb, offset, tag_len - offset, \"Extra data after TFS Subelements\");",
          "12318:   return tvb_captured_length(tvb);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "12277: };",
          "12279: static int",
          "12281: {",
          "12282:   proto_tree_add_item(tree, hf_ieee80211_tag_wnm_sleep_mode_action_type,",
          "12283:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "12284:   offset++;",
          "",
          "[Removed Lines]",
          "12280: dissect_wnm_sleep_mode(proto_tree *tree, tvbuff_t *tvb, int offset)",
          "",
          "[Added Lines]",
          "12341: dissect_wnm_sleep_mode(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void* data _U_)",
          "12343:   int offset = 0;",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "12299: };",
          "12301: static int",
          "12303: {",
          "12304:   guint8 capab;",
          "12305:   proto_item *item;",
          "12306:   proto_tree *subtree;",
          "",
          "[Removed Lines]",
          "12302: dissect_time_adv(proto_tree *tree, tvbuff_t *tvb, int offset)",
          "",
          "[Added Lines]",
          "12364: dissect_time_adv(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void* data _U_)",
          "12366:   int offset = 0;",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "12386: }",
          "12388: static int",
          "12391: {",
          "12392:   proto_tree_add_item(tree, hf_ieee80211_tag_time_zone, tvb, offset, tag_len,",
          "12393:                       ENC_ASCII|ENC_NA);",
          "12395: }",
          "12397: static int",
          "12401: {",
          "12402:   if (tag_len < 1) {",
          "12404:                            \"AP Channel Report length %u wrong, must be > 1\", tag_len);",
          "12406:   }",
          "12408:   proto_tree_add_item(tree, hf_ieee80211_tag_ap_channel_report_operating_class, tvb,",
          "12409:                       offset, 1, ENC_LITTLE_ENDIAN);",
          "12411:   offset += 1;",
          "12414:   {",
          "12415:     proto_tree_add_item(tree, hf_ieee80211_tag_ap_channel_report_channel_list, tvb, offset, 1, ENC_NA);",
          "12417:     offset += 1;",
          "12418:   }",
          "12420: }",
          "12423: static int",
          "12426: {",
          "12428:   if (tag_len != 1) {",
          "12430:                            \"Secondary Channel Offset length %u wrong, must be = 1\", tag_len);",
          "12432:   }",
          "12434:   proto_tree_add_item(tree, hf_ieee80211_tag_secondary_channel_offset, tvb,",
          "12435:                       offset, 1, ENC_LITTLE_ENDIAN);",
          "12440: }",
          "12442: static int",
          "12445: {",
          "12447:   if (tag_len != 1) {",
          "12449:                            \"BSS Average Access Delay length %u wrong, must be = 1\", tag_len);",
          "12451:   }",
          "12453:   proto_tree_add_item(tree, hf_ieee80211_tag_bss_ap_avg_access_delay, tvb,",
          "12454:                       offset, 1, ENC_LITTLE_ENDIAN);",
          "12459: }",
          "12461: static int",
          "12464: {",
          "12466:   if (tag_len != 1) {",
          "12468:                            \"Antenna length %u wrong, must be = 1\", tag_len);",
          "12470:   }",
          "12472:   proto_tree_add_item(tree, hf_ieee80211_tag_antenna_id, tvb,",
          "12473:                       offset, 1, ENC_LITTLE_ENDIAN);",
          "12478: }",
          "12480: static int",
          "12483: {",
          "12485:   if (tag_len != 1) {",
          "12487:                            \"RSNI length %u wrong, must be = 1\", tag_len);",
          "12489:   }",
          "12491:   proto_tree_add_item(tree, hf_ieee80211_tag_rsni, tvb,",
          "12492:                       offset, 1, ENC_LITTLE_ENDIAN);",
          "12497: }",
          "12499: static int",
          "12502: {",
          "12503:   proto_item *ti;",
          "12504:   proto_tree *btree;",
          "12505:   guint16 bitmask;",
          "12506:   if (tag_len < 2) {",
          "12508:                            \"BSS Available Admission Capacity length %u wrong, must > = 2\", tag_len);",
          "12509:     return offset;",
          "12510:   }",
          "",
          "[Removed Lines]",
          "12389: dissect_time_zone(proto_tree *tree, tvbuff_t *tvb, int offset,",
          "12390:                   guint32 tag_len)",
          "12394:   return offset + tag_len;",
          "12398: dissect_ap_channel_report(tvbuff_t *tvb, packet_info *pinfo,",
          "12399:                           proto_tree *tree, int offset, guint32 tag_len, proto_item *ti_len,",
          "12400:                           int tag_end, proto_item *ti)",
          "12403:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "12405:     return offset;",
          "12410:   proto_item_append_text(ti, \": Operating Class %u, Channel List :\", tvb_get_guint8(tvb, offset));",
          "12413:   while (offset < tag_end)",
          "12416:     proto_item_append_text(ti, \" %u,\", tvb_get_guint8(tvb, offset));",
          "12419:   return offset;",
          "12424: dissect_secondary_channel_offset_ie(tvbuff_t *tvb, packet_info *pinfo,",
          "12425:                                     proto_tree *tree, int offset, guint32 tag_len, proto_item *ti_len)",
          "12429:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "12431:     return offset;",
          "12437:   offset += 1;",
          "12439:   return offset;",
          "12443: dissect_bss_avg_access_delay_ie(tvbuff_t *tvb, packet_info *pinfo,",
          "12444:                                     proto_tree *tree, int offset, guint32 tag_len, proto_item *ti_len)",
          "12448:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "12450:     return offset;",
          "12456:   offset += 1;",
          "12458:   return offset;",
          "12462: dissect_antenna_ie(tvbuff_t *tvb, packet_info *pinfo,",
          "12463:                                     proto_tree *tree, int offset, guint32 tag_len, proto_item *ti_len)",
          "12467:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "12469:     return offset;",
          "12475:   offset += 1;",
          "12477:   return offset;",
          "12481: dissect_rsni_ie(tvbuff_t *tvb, packet_info *pinfo,",
          "12482:                                     proto_tree *tree, int offset, guint32 tag_len, proto_item *ti_len)",
          "12486:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "12488:     return offset;",
          "12494:   offset += 1;",
          "12496:   return offset;",
          "12500: dissect_bss_available_admission_capacity_ie(tvbuff_t *tvb, packet_info *pinfo,",
          "12501:                                     proto_tree *tree, int offset, guint32 tag_len, proto_item *ti_len)",
          "12507:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "",
          "[Added Lines]",
          "12452: dissect_time_zone(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void* data _U_)",
          "12454:   int tag_len = tvb_reported_length(tvb);",
          "12455:   int offset = 0;",
          "12459:   return tvb_captured_length(tvb);",
          "12463: dissect_ap_channel_report(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "12465:   int tag_len = tvb_reported_length(tvb);",
          "12466:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "12467:   int offset = 0;",
          "12470:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "12472:     return tvb_captured_length(tvb);",
          "12477:   proto_item_append_text(field_data->item_tag, \": Operating Class %u, Channel List :\", tvb_get_guint8(tvb, offset));",
          "12480:   while (offset < tag_len)",
          "12483:     proto_item_append_text(field_data->item_tag, \" %u,\", tvb_get_guint8(tvb, offset));",
          "12486:   return tvb_captured_length(tvb);",
          "12490: dissect_secondary_channel_offset_ie(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "12492:   int tag_len = tvb_reported_length(tvb);",
          "12493:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "12494:   int offset = 0;",
          "12496:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "12498:     return 1;",
          "12503:   return tvb_captured_length(tvb);",
          "12508: dissect_bss_avg_access_delay_ie(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "12510:   int tag_len = tvb_reported_length(tvb);",
          "12511:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "12512:   int offset = 0;",
          "12514:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "12516:     return 1;",
          "12521:   return tvb_captured_length(tvb);",
          "12525: dissect_antenna_ie(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "12527:   int tag_len = tvb_reported_length(tvb);",
          "12528:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "12529:   int offset = 0;",
          "12532:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "12534:     return 1;",
          "12540:   return tvb_captured_length(tvb);",
          "12544: dissect_rsni_ie(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "12546:   int tag_len = tvb_reported_length(tvb);",
          "12547:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "12548:   int offset = 0;",
          "12551:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "12553:     return 1;",
          "12559:   return tvb_captured_length(tvb);",
          "12563: dissect_bss_available_admission_capacity_ie(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "12565:   int tag_len = tvb_reported_length(tvb);",
          "12566:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "12567:   int offset = 0;",
          "12572:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "12618:   return offset;",
          "12619: }",
          "12621: static int",
          "12626: {",
          "12627:   proto_item *ti_ex_cap;",
          "12628:   proto_tree *ex_cap_tree;",
          "12630:   if (tag_len != 5)",
          "12631:   {",
          "12634:   }",
          "12638:   ti_ex_cap = proto_tree_add_item(tree, hf_ieee80211_tag_rm_enabled_capabilities, tvb, offset, 1, ENC_NA);",
          "",
          "[Removed Lines]",
          "12622: dissect_rm_enabled_capabilities_ie(packet_info *pinfo, proto_tree *tree,",
          "12623:                          proto_item *ti, proto_item *ti_len,",
          "12624:                          guint32 tag_len, tvbuff_t *tvb,",
          "12625:                          int offset, int tag_end _U_)",
          "12632:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"RM Enabled Capabilities length %u wrong, must = 5\", tag_len);",
          "12633:     return offset;",
          "12635:   proto_item_append_text(ti, \" (%d octets)\", tag_len);",
          "",
          "[Added Lines]",
          "12688: dissect_rm_enabled_capabilities_ie(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "12690:   int tag_len = tvb_reported_length(tvb);",
          "12691:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "12692:   int offset = 0;",
          "12698:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"RM Enabled Capabilities length %u wrong, must = 5\", tag_len);",
          "12699:     return 1;",
          "12701:   proto_item_append_text(field_data->item_tag, \" (%d octets)\", tag_len);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "12696:   return offset;",
          "12697: }",
          "12699: static int",
          "12703: {",
          "12705:   static const int *ieee80211_20_40_bss_coexistence_fields[] = {",
          "12706:     &hf_ieee80211_tag_20_40_bc_information_request,",
          "12707:     &hf_ieee80211_tag_20_40_bc_forty_mhz_intolerant,",
          "",
          "[Removed Lines]",
          "12700: dissect_20_40_bss_coexistence(packet_info *pinfo, proto_tree *tree,",
          "12701:                               proto_item *ti_len, guint32 tag_len,",
          "12702:                               tvbuff_t *tvb, int offset)",
          "",
          "[Added Lines]",
          "12767: dissect_20_40_bss_coexistence(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "12769:   int tag_len = tvb_reported_length(tvb);",
          "12770:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "12771:   int offset = 0;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "12712:     NULL",
          "12713:   };",
          "12716:   if (tag_len != 1)",
          "12717:   {",
          "12720:   }",
          "12722:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tag_20_40_bc,",
          "",
          "[Removed Lines]",
          "12718:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"20/40 BSS Coexistence length %u wrong, must = 1\", tag_len);",
          "12719:     return offset;",
          "",
          "[Added Lines]",
          "12784:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"20/40 BSS Coexistence length %u wrong, must = 1\", tag_len);",
          "12785:     return 1;",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "12729: }",
          "12731: static int",
          "12733:                          guint32 tag_len, proto_item *ti_len, gboolean vendorspecific)",
          "12734: {",
          "12735:   proto_item *cap_item, *ti;",
          "",
          "[Removed Lines]",
          "12732: dissect_ht_capability_ie(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "",
          "[Added Lines]",
          "12798: dissect_ht_capability_ie_common(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "12738:   if (tag_len != 26) {",
          "12739:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "12740:                            \"HT Capabilities IE length %u wrong, must be = 26\", tag_len);",
          "12742:   }",
          "12744:   if (wlan_ignore_draft_ht && vendorspecific)",
          "12748:   if (vendorspecific)",
          "",
          "[Removed Lines]",
          "12741:     return offset;",
          "12745:     return offset;",
          "",
          "[Added Lines]",
          "12807:     return (offset > 0) ? offset : 1;",
          "12811:     return (offset > 0) ? offset : 1;",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "12864:   return offset;",
          "12865: }",
          "12867: static int",
          "12868: dissect_ht_info_ie_1_0(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "12869:                        guint32 tag_len, proto_item *ti_len)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12933: static int",
          "12934: dissect_ht_capability_ie(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "12935: {",
          "12936:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "12938:   return dissect_ht_capability_ie_common(tvb, pinfo, tree, 0, tvb_reported_length(tvb),",
          "12939:             field_data->item_tag_length, FALSE);",
          "12940: }",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "13174:   switch(type){",
          "13175:     case 51:",
          "13177:       proto_item_append_text(item, \": HT Capabilities (802.11n D1.10)\");",
          "13178:     break;",
          "",
          "[Removed Lines]",
          "13176:       dissect_ht_capability_ie(tvb, pinfo, tree, offset, tag_len, ti_len, TRUE);",
          "",
          "[Added Lines]",
          "13251:       dissect_ht_capability_ie_common(tvb, pinfo, tree, offset, tag_len, ti_len, TRUE);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "13190: }",
          "13195: {",
          "13208:   proto_tree_add_item(tree, hf_ieee80211_tag_interworking_access_network_type,",
          "13209:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "",
          "[Removed Lines]",
          "13192: static guint",
          "13193: dissect_interworking(packet_info *pinfo, proto_tree *tree, proto_item *item,",
          "13194:                      tvbuff_t *tvb, int offset)",
          "13196:   guint8 len;",
          "13198:   offset += 1;",
          "13199:   len = tvb_get_guint8(tvb, offset);",
          "13200:   offset += 1;",
          "13202:   if ((tvb_reported_length_remaining(tvb, offset) < len) || (len == 0)) {",
          "13203:     expert_add_info_format(pinfo, item, &ei_ieee80211_tag_length,",
          "13204:                            \"Truncated Interworking element\");",
          "13205:     return offset;",
          "13206:   }",
          "",
          "[Added Lines]",
          "13267: static int",
          "13268: dissect_interworking(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "13270:   int tag_len = tvb_reported_length(tvb);",
          "13271:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "13272:   int offset = 0;",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "13217:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13218:   offset += 1;",
          "13221:     dissect_venue_info(tree, tvb, offset);",
          "13222:     offset += 2;",
          "13223:   }",
          "13226:     proto_tree_add_item(tree, hf_ieee80211_tag_interworking_hessid,",
          "13227:                         tvb, offset, 6, ENC_NA);",
          "13228:     offset += 6;",
          "13229:   }",
          "13233:                            \"Invalid Interworking element length\");",
          "13234:   }",
          "13236:   return offset;",
          "13237: }",
          "13242: {",
          "13244:   guint8 val, val2;",
          "13245:   int i;",
          "13247:   proto_tree *dscp_tree;",
          "13255:                                 \"Truncated QoS Map Set element\");",
          "13257:   }",
          "13260:   while (left >= 2) {",
          "13261:     dscp_item = proto_tree_add_item(tree, hf_ieee80211_tag_qos_map_set_dscp_exc,",
          "13262:                                     tvb, offset, 2, ENC_NA);",
          "",
          "[Removed Lines]",
          "13220:   if ((len == (1 + 2)) || (len == (1 + 2 + 6))) {",
          "13225:   if ((len == (1 + 6)) || (len == (1 + 2 + 6))) {",
          "13231:   if ((len != 1) && (len != (1 + 2)) && (len != (1 + 6)) && (len != (1 + 2 + 6))) {",
          "13232:     expert_add_info_format(pinfo, item, &ei_ieee80211_tag_length,",
          "13239: static guint",
          "13240: dissect_qos_map_set(packet_info *pinfo, proto_tree *tree, proto_item *item,",
          "13241:                     tvbuff_t *tvb, int offset)",
          "13243:   guint8 len, left;",
          "13246:   proto_item *dscp_item;",
          "13249:   offset++;",
          "13250:   len = tvb_get_guint8(tvb, offset);",
          "13251:   offset++;",
          "13253:   if (tvb_reported_length_remaining(tvb, offset) < len || len < 16 || len & 1) {",
          "13254:     expert_add_info_format(pinfo, item, &ei_ieee80211_bad_length,",
          "13256:     return 2 + len;",
          "13259:   left = len - 16;",
          "",
          "[Added Lines]",
          "13286:   if ((tag_len == (1 + 2)) || (tag_len == (1 + 2 + 6))) {",
          "13291:   if ((tag_len == (1 + 6)) || (tag_len == (1 + 2 + 6))) {",
          "13297:   if ((tag_len != 1) && (tag_len != (1 + 2)) && (tag_len != (1 + 6)) && (tag_len != (1 + 2 + 6))) {",
          "13298:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "13305: static int",
          "13306: dissect_qos_map_set(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "13308:   int tag_len = tvb_reported_length(tvb);",
          "13309:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "13310:   int offset = 0;",
          "13311:   guint8 left;",
          "13314:   proto_item *dscp_item, *item;",
          "13317:   if (tag_len < 16 || tag_len & 1) {",
          "13318:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_bad_length,",
          "13320:     return tvb_captured_length(tvb);",
          "13323:   left = tag_len - 16;",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "13319:     }",
          "13320:   }",
          "13323: }",
          "13328: {",
          "13343:   proto_tree_add_item(tree, hf_ieee80211_tag_roaming_consortium_num_anqp_oi,",
          "13344:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "",
          "[Removed Lines]",
          "13322:   return 2 + len;",
          "13325: static guint",
          "13326: dissect_roaming_consortium(packet_info *pinfo, proto_tree *tree,",
          "13327:                            proto_item *item, tvbuff_t *tvb, int offset)",
          "13329:   guint8 len, oi_lens, oi1_len, oi2_len;",
          "13330:   int end;",
          "13332:   offset += 1;",
          "13333:   len = tvb_get_guint8(tvb, offset);",
          "13334:   offset += 1;",
          "13335:   end = offset + len;",
          "13337:   if ((tvb_reported_length_remaining(tvb, offset) < len) || (len < 2)) {",
          "13338:     expert_add_info_format(pinfo, item, &ei_ieee80211_tag_length,",
          "13339:                            \"Truncated Roaming Consortium element\");",
          "13340:     return 2 + len;",
          "13341:   }",
          "",
          "[Added Lines]",
          "13386:   return tvb_captured_length(tvb);",
          "13389: static int",
          "13390: dissect_roaming_consortium(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "13392:   int tag_len = tvb_reported_length(tvb);",
          "13393:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "13394:   int offset = 0;",
          "13395:   proto_item* item;",
          "13396:   guint8 oi_lens, oi1_len, oi2_len;",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "13353:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13354:   offset += 1;",
          "13358:                            \"Truncated Roaming Consortium element\");",
          "13360:   }",
          "13362:   item = proto_tree_add_item(tree, hf_ieee80211_tag_roaming_consortium_oi1,",
          "",
          "[Removed Lines]",
          "13356:   if (offset + oi1_len > end) {",
          "13357:     expert_add_info_format(pinfo, item, &ei_ieee80211_tag_length,",
          "13359:     return 2 + len;",
          "",
          "[Added Lines]",
          "13411:   if (offset + oi1_len > tag_len) {",
          "13412:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "13414:     return tvb_captured_length(tvb);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "13364:   add_manuf(item, tvb, offset);",
          "13365:   offset += oi1_len;",
          "13369:                            \"Truncated Roaming Consortium element\");",
          "13371:   }",
          "13373:   if (oi2_len > 0) {",
          "",
          "[Removed Lines]",
          "13367:   if (offset + oi2_len > end) {",
          "13368:     expert_add_info_format(pinfo, item, &ei_ieee80211_tag_length,",
          "13370:     return 2 + len;",
          "",
          "[Added Lines]",
          "13422:   if (offset + oi2_len > tag_len) {",
          "13423:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "13425:     return tvb_captured_length(tvb);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "13376:     offset += oi2_len;",
          "13377:   }",
          "13380:     proto_tree_add_item(tree, hf_ieee80211_tag_roaming_consortium_oi3,",
          "13382:   }",
          "13385: }",
          "",
          "[Removed Lines]",
          "13379:   if (end > offset) {",
          "13381:                         tvb, offset, end - offset, ENC_NA);",
          "13384:   return 2 + len;",
          "",
          "[Added Lines]",
          "13434:   if (tag_len > offset) {",
          "13436:                         tvb, offset, tag_len - offset, ENC_NA);",
          "13439:   return tvb_captured_length(tvb);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "13394: static int",
          "13398: {",
          "13401:   gint ssid_len = tag_len;",
          "",
          "[Removed Lines]",
          "13395: ieee80211_tag_ssid(packet_info *pinfo, proto_tree *tree,",
          "13396:                    proto_item *ti, proto_item *ti_len,",
          "13397:                    guint32 tag_len, tvbuff_t *tvb, int offset)",
          "",
          "[Added Lines]",
          "13450: ieee80211_tag_ssid(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "13452:   int tag_len = tvb_reported_length(tvb);",
          "13453:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "13454:   int offset = 0;",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "13404:     return offset;",
          "13406:   if (ssid_len > MAX_SSID_LEN) {",
          "13408:                            \"SSID length (%u) greater than maximum (%u)\",",
          "13409:                            ssid_len, MAX_SSID_LEN);",
          "13410:     ssid_len = MAX_SSID_LEN;",
          "",
          "[Removed Lines]",
          "13407:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "",
          "[Added Lines]",
          "13463:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "13472:   if (ssid_len > 0) {",
          "13473:     gchar* s = format_text(wmem_packet_scope(), ssid, ssid_len);",
          "13476:     col_append_fstr(pinfo->cinfo, COL_INFO, \", SSID=%s\", s);",
          "",
          "[Removed Lines]",
          "13474:     proto_item_append_text(ti, \": %s\", s);",
          "",
          "[Added Lines]",
          "13530:     proto_item_append_text(field_data->item_tag, \": %s\", s);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "13479:     memcpy(wlan_stats.ssid, ssid, MIN(ssid_len, MAX_SSID_LEN));",
          "13480:     wlan_stats.ssid_len = ssid_len;",
          "13481:   } else {",
          "13484:     col_append_str(pinfo->cinfo, COL_INFO, \", SSID=Broadcast\");",
          "13485:   }",
          "",
          "[Removed Lines]",
          "13482:     proto_item_append_text(ti, \": Broadcast\");",
          "",
          "[Added Lines]",
          "13538:     proto_item_append_text(field_data->item_tag, \": Broadcast\");",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "13490: }",
          "13492: static int",
          "13496: {",
          "13498:   guint8 sub_tag_id;",
          "13499:   guint32 sub_tag_length;",
          "13500:   proto_item *parent_item;",
          "",
          "[Removed Lines]",
          "13493: dissect_neighbor_report(tvbuff_t *tvb, packet_info *pinfo,",
          "13494:                           proto_tree *tree, int offset, guint32 tag_len, proto_item *ti_len,",
          "13495:                           int tag_end, proto_item *ti _U_)",
          "",
          "[Added Lines]",
          "13549: dissect_neighbor_report(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "13551:   int tag_len = tvb_reported_length(tvb);",
          "13552:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "13553:   int offset = 0;",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "13502:   tvbuff_t *sub_tag_tvb = NULL;",
          "13504:   if (tag_len < 13) {",
          "13506:                            \"Neighbor Report length %u wrong, must be > 13\", tag_len);",
          "13508:   }",
          "13512:   proto_tree_add_item(tree, hf_ieee80211_tag_neighbor_report_bssid, tvb, offset, 6, ENC_NA);",
          "13513:   offset += 6;",
          "",
          "[Removed Lines]",
          "13505:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "13507:     return offset;",
          "",
          "[Added Lines]",
          "13561:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "13563:     return tvb_captured_length(tvb);",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "13548:   }",
          "13551:   {",
          "13553:     sub_tag_id = tvb_get_guint8(tvb, offset);",
          "",
          "[Removed Lines]",
          "13547:         return offset;",
          "13550:   while (offset < tag_end)",
          "",
          "[Added Lines]",
          "13601:     return tvb_captured_length(tvb);",
          "13604:   while (offset < tag_len)",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "13569:       case NR_SUB_ID_HT_CAPABILITIES:",
          "13570:         sub_tag_tree = proto_tree_add_subtree(tree, tvb, offset, sub_tag_length,",
          "13571:                             ett_tag_neighbor_report_sub_tag_tree, NULL, \"HT Capabilities\");",
          "13573:         break;",
          "13574:       case NR_SUB_ID_HT_OPERATION:",
          "13575:         sub_tag_tree = proto_tree_add_subtree(tree, tvb, offset, sub_tag_length,",
          "13576:                             ett_tag_neighbor_report_sub_tag_tree, NULL, \"HT Information\");",
          "13578:         break;",
          "13579:       case NR_SUB_ID_SEC_CHANNEL_OFFSET:",
          "13580:         sub_tag_tree = proto_tree_add_subtree(tree, tvb, offset, sub_tag_length,",
          "13581:                             ett_tag_neighbor_report_sub_tag_tree, NULL, \"Secondary Channel Offset\");",
          "13583:         break;",
          "13584:       case NR_SUB_ID_VENDOR_SPECIFIC:",
          "13586:         break;",
          "13587:     }",
          "13592:   return offset;",
          "13593: }",
          "13595: static int",
          "13600: {",
          "13602:   if (tag_len < 1) {",
          "13604:                            \"Tag length %u too short, must be greater than 0\",",
          "13605:                            tag_len);",
          "13606:     return offset;",
          "13607:   }",
          "13612:     proto_tree_add_item(tree, hf_ieee80211_tag_supp_rates, tvb, offset, 1,",
          "13613:                         ENC_LITTLE_ENDIAN);",
          "13615:                            val_to_str_ext_const(tvb_get_guint8(tvb, offset),",
          "13616:                                                 &ieee80211_supported_rates_vals_ext,",
          "13617:                                                 \"Unknown Rate\"));",
          "13618:     offset += 1;",
          "13619:   }",
          "13623:   return offset;",
          "13624: }",
          "13626: static int",
          "13630: {",
          "13632:   if (tag_len < 5) {",
          "13634:                            \"Tag length %u too short, must be >= 5\", tag_len);",
          "13636:   }",
          "13640:   proto_tree_add_item(tree, hf_ieee80211_tag_fh_dwell_time,",
          "13641:                       tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13642:   offset += 2;",
          "",
          "[Removed Lines]",
          "13572:         dissect_ht_capability_ie(sub_tag_tvb, pinfo, sub_tag_tree, 0, sub_tag_length, ti_len, FALSE);",
          "13577:         dissect_ht_info_ie_1_1(sub_tag_tvb, pinfo, sub_tag_tree, 0, sub_tag_length, ti_len);",
          "13582:         dissect_secondary_channel_offset_ie(sub_tag_tvb, pinfo, sub_tag_tree, 0, sub_tag_length, ti_len);",
          "13585:         default:",
          "13589:   offset += sub_tag_length;",
          "13590: }",
          "13596: ieee80211_tag_supp_rates(packet_info *pinfo, proto_tree *tree,",
          "13597:                          proto_item *ti, proto_item *ti_len,",
          "13598:                          guint32 tag_len, tvbuff_t *tvb,",
          "13599:                          int offset, int tag_end)",
          "13603:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "13609:   offset += 2;",
          "13611:   while (offset < tag_end) {",
          "13614:     proto_item_append_text(ti, \" %s,\",",
          "13621:   proto_item_append_text(ti, \" [Mbit/sec]\");",
          "13627: ieee80211_tag_fh_parameter(packet_info *pinfo, proto_tree *tree,",
          "13628:                            proto_item *ti_len, guint32 tag_len,",
          "13629:                            tvbuff_t *tvb, int offset)",
          "13633:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "13635:     return offset;",
          "13638:   offset += 2;",
          "",
          "[Added Lines]",
          "13626:         dissect_ht_capability_ie_common(sub_tag_tvb, pinfo, sub_tag_tree, 0, sub_tag_length, field_data->item_tag_length, FALSE);",
          "13631:         dissect_ht_info_ie_1_1(sub_tag_tvb, pinfo, sub_tag_tree, data);",
          "13636:         dissect_secondary_channel_offset_ie(sub_tag_tvb, pinfo, sub_tag_tree, data);",
          "13639:       default:",
          "13643:     offset += sub_tag_length;",
          "13644:   }",
          "13650: ieee80211_tag_supp_rates(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "13652:   int tag_len = tvb_reported_length(tvb);",
          "13653:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "13654:   int offset = 0;",
          "13657:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "13663:   while (offset < tag_len) {",
          "13666:     proto_item_append_text(field_data->item_tag, \" %s,\",",
          "13673:   proto_item_append_text(field_data->item_tag, \" [Mbit/sec]\");",
          "13679: ieee80211_tag_fh_parameter(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "13681:   int tag_len = tvb_reported_length(tvb);",
          "13682:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "13683:   int offset = 0;",
          "13686:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "13688:     return 1;",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "13657: }",
          "13659: static int",
          "13664: {",
          "13666:   if (tag_len != 1) {",
          "13668:         \"Tag length %u wrong, must be = 1\", tag_len);",
          "13670:   }",
          "13674:   proto_tree_add_item(tree, hf_ieee80211_tag_ds_param_channel,",
          "13675:         tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13678:                          tvb_get_guint8(tvb, offset));",
          "13680:   wlan_stats.channel = tvb_get_guint8(tvb, offset);",
          "",
          "[Removed Lines]",
          "13660: ieee80211_tag_ds_parameter(packet_info *pinfo, proto_tree *tree,",
          "13661:                            proto_item *ti, proto_item *ti_len,",
          "13662:                            guint32 tag_len, tvbuff_t *tvb,",
          "13663:                            int offset)",
          "13667:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "13669:     return offset;",
          "13672:   offset += 2;",
          "13677:   proto_item_append_text(ti, \": Current Channel: %u\",",
          "",
          "[Added Lines]",
          "13711: ieee80211_tag_ds_parameter(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "13713:   int tag_len = tvb_reported_length(tvb);",
          "13714:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "13715:   int offset = 0;",
          "13718:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "13720:     return 1;",
          "13726:   proto_item_append_text(field_data->item_tag, \": Current Channel: %u\",",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "13684: }",
          "13686: static int",
          "13691: {",
          "13693:   if (tag_len != 6) {",
          "13695:                            \"Tag length %u wrong, must be = 6\", tag_len);",
          "13696:     return offset;",
          "13697:   }",
          "13701:   proto_tree_add_item(tree, hf_ieee80211_tag_cfp_count,",
          "13702:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13704:   offset += 1;",
          "13706:   proto_tree_add_item(tree, hf_ieee80211_tag_cfp_period,",
          "13707:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13709:   offset += 1;",
          "13711:   proto_tree_add_item(tree, hf_ieee80211_tag_cfp_max_duration,",
          "13712:                       tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13714:                          tvb_get_letohs(tvb, offset));",
          "13715:   offset += 2;",
          "13717:   proto_tree_add_item(tree, hf_ieee80211_tag_cfp_dur_remaining,",
          "13718:                       tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13720:                          tvb_get_letohs(tvb, offset));",
          "13721:   offset += 1;",
          "",
          "[Removed Lines]",
          "13687: ieee80211_tag_cf_parameter(packet_info *pinfo, proto_tree *tree,",
          "13688:                            proto_item *ti, proto_item *ti_len,",
          "13689:                            guint32 tag_len, tvbuff_t *tvb,",
          "13690:                            int offset)",
          "13694:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "13699:   offset += 2;",
          "13703:   proto_item_append_text(ti, \": CFP count %u\", tvb_get_guint8(tvb, offset));",
          "13708:   proto_item_append_text(ti, \": CFP Period %u\", tvb_get_guint8(tvb, offset));",
          "13713:   proto_item_append_text(ti, \": CFP Max Duration %u\",",
          "13719:   proto_item_append_text(ti, \": CFP Dur Remaining %u\",",
          "",
          "[Added Lines]",
          "13736: ieee80211_tag_cf_parameter(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "13738:   int tag_len = tvb_reported_length(tvb);",
          "13739:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "13740:   int offset = 0;",
          "13743:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "13750:   proto_item_append_text(field_data->item_tag, \": CFP count %u\", tvb_get_guint8(tvb, offset));",
          "13755:   proto_item_append_text(field_data->item_tag, \": CFP Period %u\", tvb_get_guint8(tvb, offset));",
          "13760:   proto_item_append_text(field_data->item_tag, \": CFP Max Duration %u\",",
          "13766:   proto_item_append_text(field_data->item_tag, \": CFP Dur Remaining %u\",",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "13724: }",
          "13726: static int",
          "13730: {",
          "13731:   proto_tree *bmapctl_tree;",
          "13732:   proto_item *bmapctl_item;",
          "13733:   guint aid, pvb_len, n1, i, j, byte;",
          "13736:   if (tag_len < 4) {",
          "13738:                            \"Tag length %u too short, must be >= 4\", tag_len);",
          "13740:   }",
          "13744:   proto_tree_add_item(tree, hf_ieee80211_tim_dtim_count,",
          "13745:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13747:   offset += 1;",
          "13749:   proto_tree_add_item(tree, hf_ieee80211_tim_dtim_period,",
          "13750:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13752:   offset += 1;",
          "13754:   bmapctl_item = proto_tree_add_item(tree, hf_ieee80211_tim_bmapctl,",
          "",
          "[Removed Lines]",
          "13727: ieee80211_tag_tim(packet_info *pinfo, proto_tree *tree,",
          "13728:                   proto_item *ti, proto_item *ti_len,",
          "13729:                   guint32 tag_len, tvbuff_t *tvb, int offset)",
          "13737:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "13739:     return offset;",
          "13742:   offset += 2;",
          "13746:   proto_item_append_text(ti, \": DTIM %u of\", tvb_get_guint8(tvb, offset));",
          "13751:   proto_item_append_text(ti, \" %u bitmap\", tvb_get_guint8(tvb, offset + 1));",
          "",
          "[Added Lines]",
          "13774: ieee80211_tag_tim(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "13776:   int tag_len = tvb_reported_length(tvb);",
          "13777:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "13778:   int offset = 0;",
          "13785:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "13787:     return 1;",
          "13792:   proto_item_append_text(field_data->item_tag, \": DTIM %u of\", tvb_get_guint8(tvb, offset));",
          "13797:   proto_item_append_text(field_data->item_tag, \" %u bitmap\", tvb_get_guint8(tvb, offset + 1));",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "13780: }",
          "13782: static int",
          "13787: {",
          "13790:   if (tag_len != 2) {",
          "13792:                            \"Tag length %u wrong, must be = 2\", tag_len);",
          "13794:   }",
          "13798:   proto_tree_add_item(tree, hf_ieee80211_tag_ibss_atim_window,",
          "13799:                       tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13801:                          tvb_get_letohs(tvb, offset));",
          "13802:   offset += 2;",
          "",
          "[Removed Lines]",
          "13783: ieee80211_tag_ibss_parameter(packet_info *pinfo, proto_tree *tree,",
          "13784:                              proto_item *ti, proto_item *ti_len,",
          "13785:                              guint32 tag_len, tvbuff_t *tvb,",
          "13786:                              int offset)",
          "13791:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "13793:     return offset;",
          "13796:   offset += 2;",
          "13800:   proto_item_append_text(ti, \": ATIM window 0x%x\",",
          "",
          "[Added Lines]",
          "13829: ieee80211_tag_ibss_parameter(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "13831:   int tag_len = tvb_reported_length(tvb);",
          "13832:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "13833:   int offset = 0;",
          "13837:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "13839:     return 1;",
          "13844:   proto_item_append_text(field_data->item_tag, \": ATIM window 0x%x\",",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "13812: };",
          "13814: static int",
          "13819: {",
          "13821:   proto_tree *sub_tree;",
          "13822:   proto_item *sub_item;",
          "13823:   const guint8* country_code;",
          "13825:   if (tag_len < 6) {",
          "13827:                            \"Tag length %u too short, must be >= 6\", tag_len);",
          "13829:   }",
          "13833:   proto_tree_add_item_ret_string(tree, hf_ieee80211_tag_country_info_code,",
          "13834:                       tvb, offset, 2, ENC_ASCII|ENC_NA, wmem_packet_scope(), &country_code);",
          "13836:   offset += 2;",
          "13838:   proto_tree_add_item(tree, hf_ieee80211_tag_country_info_env,",
          "13839:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13841:                          val_to_str(tvb_get_guint8(tvb, offset),",
          "13842:                                     environment_vals, \"Unknown (0x%02x)\"));",
          "13843:   offset += 1;",
          "13848:       proto_tree_add_item(tree, hf_ieee80211_tag_country_info_pad,",
          "13849:                           tvb, offset, 1, ENC_NA);",
          "13850:       offset += 1;",
          "",
          "[Removed Lines]",
          "13815: ieee80211_tag_country_info(packet_info *pinfo, proto_tree *tree,",
          "13816:                            proto_item *ti, proto_item *ti_len,",
          "13817:                            guint32 tag_len, tvbuff_t *tvb,",
          "13818:                            int offset, int tag_end)",
          "13826:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "13828:     return offset;",
          "13831:   offset += 2;",
          "13835:   proto_item_append_text(ti, \": Country Code %s\", country_code);",
          "13840:   proto_item_append_text(ti, \", Environment %s\",",
          "13845:   while (offset < tag_end) {",
          "13847:     if ((tag_end - offset) < 3) {",
          "",
          "[Added Lines]",
          "13859: ieee80211_tag_country_info(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "13861:   int tag_len = tvb_reported_length(tvb);",
          "13862:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "13863:   int offset = 0;",
          "13870:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "13872:     return 1;",
          "13877:   proto_item_append_text(field_data->item_tag, \": Country Code %s\", country_code);",
          "13882:   proto_item_append_text(field_data->item_tag, \", Environment %s\",",
          "13887:   while (offset < tag_len) {",
          "13889:     if ((tag_len - offset) < 3) {",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "13899: }",
          "13901: static int",
          "13908: {",
          "13910:   if (tag_len < 2) {",
          "13912:                            \"Tag length %u too short, must be >= 2\", tag_len);",
          "13914:   }",
          "13918:   proto_tree_add_item(tree, hf_ieee80211_tag_fh_hopping_parameter_prime_radix,",
          "13919:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13921:   offset += 1;",
          "13923:   proto_tree_add_item(tree, hf_ieee80211_tag_fh_hopping_parameter_nb_channels,",
          "13924:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13926:                          tvb_get_guint8(tvb, offset));",
          "13927:   offset += 1;",
          "",
          "[Removed Lines]",
          "13902: ieee80211_tag_fh_hopping_parameter(packet_info *pinfo,",
          "13903:                                    proto_tree *tree,",
          "13904:                                    proto_item *ti,",
          "13905:                                    proto_item *ti_len,",
          "13906:                                    guint32 tag_len, tvbuff_t *tvb,",
          "13907:                                    int offset)",
          "13911:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "13913:     return offset;",
          "13916:   offset += 2;",
          "13920:   proto_item_append_text(ti, \": Prime Radix: %u\", tvb_get_guint8(tvb, offset));",
          "13925:   proto_item_append_text(ti, \", Number of Channels: %u\",",
          "",
          "[Added Lines]",
          "13944: ieee80211_tag_fh_hopping_parameter(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "13946:   int tag_len = tvb_reported_length(tvb);",
          "13947:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "13948:   int offset = 0;",
          "13952:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "13954:     return 1;",
          "13959:   proto_item_append_text(field_data->item_tag, \": Prime Radix: %u\", tvb_get_guint8(tvb, offset));",
          "13964:   proto_item_append_text(field_data->item_tag, \", Number of Channels: %u\",",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "13930: }",
          "13932: static int",
          "13937: {",
          "13939:   if (tag_len < 4) {",
          "13941:                            \"Tag length %u too short, must be >= 4\", tag_len);",
          "13943:   }",
          "13947:   proto_tree_add_item(tree, hf_ieee80211_tag_fh_hopping_table_flag,",
          "13948:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13949:   offset += 1;",
          "",
          "[Removed Lines]",
          "13933: ieee80211_tag_fh_hopping_table(packet_info *pinfo, proto_tree *tree,",
          "13934:                                proto_item *ti_len,",
          "13935:                                guint32 tag_len, tvbuff_t *tvb,",
          "13936:                                int offset, int tag_end)",
          "13940:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "13942:     return offset;",
          "13945:   offset += 2;",
          "",
          "[Added Lines]",
          "13972: ieee80211_tag_fh_hopping_table(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "13974:   int tag_len = tvb_reported_length(tvb);",
          "13975:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "13976:   int offset = 0;",
          "13980:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "13982:     return 1;",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "13960:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13961:   offset += 1;",
          "13964:     proto_tree_add_item(tree, hf_ieee80211_tag_fh_hopping_random_table,",
          "13965:                         tvb, offset, 2, ENC_BIG_ENDIAN);",
          "13966:     offset += 2;",
          "",
          "[Removed Lines]",
          "13963:   while (offset < tag_end) {",
          "",
          "[Added Lines]",
          "14001:   while (offset < tag_len) {",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "13974:                  const guint8 *valid_element_ids, guint valid_element_ids_count,",
          "13975:                  association_sanity_check_t *association_sanity_check)",
          "13976: {",
          "13978:   tvbuff_t     *tag_tvb;",
          "13980:   guint32       tag_no, tag_len;",
          "13983:   proto_tree   *orig_tree = tree;",
          "13984:   proto_item   *ti        = NULL;",
          "13985:   proto_item   *ti_len, *ti_tag;",
          "13987:   gboolean      isDMG;",
          "13989:   gboolean     *p_isDMG = ((gboolean*)(p_get_proto_data(wmem_file_scope(), pinfo, proto_wlan, IS_DMG_KEY)));",
          "",
          "[Removed Lines]",
          "13977:   guint32       oui;",
          "13979:   const guint8 *tag_data_ptr;",
          "13981:   int           n, ret;",
          "13982:   char          print_buff[SHORT_STR];",
          "13986:   int           tag_end;",
          "",
          "[Added Lines]",
          "14020:   ieee80211_tagged_field_data_t field_data;",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "13991:   isDMG   = p_isDMG ? *p_isDMG : FALSE;",
          "13992:   tag_no  = tvb_get_guint8(tvb, offset);",
          "13993:   tag_len = tvb_get_guint8(tvb, offset + 1);",
          "13996:   if (tree) {",
          "13997:     ti = proto_tree_add_item(orig_tree, hf_ieee80211_tag, tvb, offset, 2 + tag_len , ENC_NA);",
          "",
          "[Removed Lines]",
          "13994:   tag_end = offset + 2 + tag_len;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "14023:     if (!valid_tag_no) {",
          "14024:       expert_add_info_format(pinfo, ti_tag, &ei_ieee80211_tag_number,",
          "14025:           \"Unexpected Element ID %d\", tag_no);",
          "14027:     }",
          "14028:   }",
          "14125: #endif",
          "14216:                                        tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14227:                                 tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14230:                                 tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14233:                                 tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14263:                                 tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14266:                                 tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14319:                                 tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14344:       offset += 4;",
          "14347:       offset += 4;",
          "14350:       offset += 2;",
          "14365:       offset += 2;",
          "14369:       offset += 1;",
          "14372:     }",
          "14375:     {",
          "14381:       offset += 2;",
          "14671:             break;",
          "14672:           }",
          "15219:       break;",
          "15223:       break;",
          "15227:       break;",
          "15231:       break;",
          "15235:       break;",
          "15239:       break;",
          "15243:       break;",
          "15314:       break;",
          "15318:       break;",
          "15322:       break;",
          "15326:       break;",
          "15330:       break;",
          "15334:       break;",
          "15353:       break;",
          "15357:       break;",
          "15361:       break;",
          "15365:       break;",
          "15682:       break;",
          "15683:     }",
          "16233:     {",
          "16251:     }",
          "16253:     {",
          "16255:       {",
          "16258:       }",
          "16263:       offset += 4;",
          "16294:     }",
          "16304:   }",
          "16308:   }",
          "16311: }",
          "16313: static void",
          "",
          "[Removed Lines]",
          "14026:       goto end_of_tag;",
          "14030:   switch (tag_no) {",
          "14031:   case TAG_SSID:",
          "14032:     offset += ieee80211_tag_ssid(pinfo, tree, ti, ti_len, tag_len, tvb,",
          "14033:                                  offset);",
          "14034:     break;",
          "14035:   case TAG_SUPP_RATES:",
          "14036:     offset += ieee80211_tag_supp_rates(pinfo, tree, ti, ti_len, tag_len, tvb,",
          "14037:                                        offset, tag_end);",
          "14038:     break;",
          "14039:   case TAG_FH_PARAMETER:",
          "14040:     offset += ieee80211_tag_fh_parameter(pinfo, tree, ti_len, tag_len, tvb,",
          "14041:                                          offset);",
          "14042:     break;",
          "14043:   case TAG_DS_PARAMETER:",
          "14044:     offset += ieee80211_tag_ds_parameter(pinfo, tree, ti, ti_len, tag_len, tvb,",
          "14045:                                          offset);",
          "14046:     break;",
          "14047:   case TAG_CF_PARAMETER:",
          "14048:     offset += ieee80211_tag_cf_parameter(pinfo, tree, ti, ti_len, tag_len, tvb,",
          "14049:                                          offset);",
          "14050:     break;",
          "14051:   case TAG_TIM:",
          "14052:     offset += ieee80211_tag_tim(pinfo, tree, ti, ti_len, tag_len, tvb, offset);",
          "14053:     break;",
          "14054:   case TAG_IBSS_PARAMETER:",
          "14055:     offset += ieee80211_tag_ibss_parameter(pinfo, tree, ti, ti_len, tag_len,",
          "14056:                                            tvb, offset);",
          "14057:     break;",
          "14058:   case TAG_COUNTRY_INFO:",
          "14059:     offset += ieee80211_tag_country_info(pinfo, tree, ti, ti_len, tag_len, tvb,",
          "14060:                                          offset, tag_end);",
          "14061:     break;",
          "14062:   case TAG_FH_HOPPING_PARAMETER:",
          "14063:     offset += ieee80211_tag_fh_hopping_parameter(pinfo, tree, ti, ti_len,",
          "14064:                                                  tag_len, tvb, offset);",
          "14065:     break;",
          "14066:   case TAG_FH_HOPPING_TABLE:",
          "14067:     offset += ieee80211_tag_fh_hopping_table(pinfo, tree, ti_len, tag_len,",
          "14068:                                              tvb, offset, tag_end);",
          "14069:     break;",
          "14072:       while (offset < tag_end)",
          "14073:       {",
          "14074:         proto_tree_add_item(tree, hf_ieee80211_tag_request, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14075:         offset += 1;",
          "14076:       }",
          "14077:       break;",
          "14081:       if ((tag_len < 4) || (tag_len > 5))",
          "14082:       {",
          "14083:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 4 or 5\", tag_len);",
          "14084:         break;",
          "14085:       }",
          "14087:       if (tag_len == 4)",
          "14088:       {",
          "14090:         proto_item_append_text(ti, \" Cisco QBSS Version 1 - non CCA\");",
          "14093:         proto_tree_add_uint(tree, hf_ieee80211_qbss_version, tvb, offset + 2, tag_len, 1);",
          "14094:         proto_tree_add_item(tree, hf_ieee80211_qbss_scount, tvb, offset + 2, 2, ENC_LITTLE_ENDIAN);",
          "14095:         proto_tree_add_item(tree, hf_ieee80211_qbss_cu, tvb, offset + 4, 1, ENC_LITTLE_ENDIAN);",
          "14096:         proto_tree_add_item(tree, hf_ieee80211_qbss_adc, tvb, offset + 5, 1, ENC_LITTLE_ENDIAN);",
          "14097:       }",
          "14098:       else if (tag_len == 5)",
          "14100:       {",
          "14101:         proto_item *base_item;",
          "14104:         proto_item_append_text(ti, \" 802.11e CCA Version\");",
          "14107:         proto_tree_add_uint(tree, hf_ieee80211_qbss_version, tvb, offset + 2, tag_len, 2);",
          "14108:         proto_tree_add_item(tree, hf_ieee80211_qbss_scount, tvb, offset + 2, 2, ENC_LITTLE_ENDIAN);",
          "14109:         base_item = proto_tree_add_item(tree, hf_ieee80211_qbss_cu, tvb, offset + 4, 1, ENC_LITTLE_ENDIAN);",
          "14110:         proto_item_append_text(base_item, \" (%d%%)\", 100*tvb_get_guint8(tvb, offset + 4)/255);",
          "14111:         base_item = proto_tree_add_item(tree, hf_ieee80211_qbss_adc, tvb, offset + 5, 2, ENC_LITTLE_ENDIAN);",
          "14112:         proto_item_append_text(base_item, \" (%d us/s)\", tvb_get_letohs(tvb, offset + 5)*32);",
          "14113:       }",
          "14114:       break;",
          "14118:     offset += add_ff_qos_info_ap(tree, tvb, pinfo, offset);",
          "14124:     break;",
          "14128:       if (isDMG == FALSE && tag_len != 55)",
          "14129:       {",
          "14130:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 55\", tag_len);",
          "14131:         break;",
          "14132:       }",
          "14133:       if (isDMG == TRUE && tag_len != 57)",
          "14134:       {",
          "14135:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 57\", tag_len);",
          "14136:         break;",
          "14137:       }",
          "14138:       offset += 2;",
          "14140:       add_ff_qos_ts_info(tree, tvb, pinfo, offset);",
          "14141:       offset += 3;",
          "14143:       proto_tree_add_item(tree, hf_ieee80211_tspec_nor_msdu, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14144:       offset += 2;",
          "14146:       proto_tree_add_item(tree, hf_ieee80211_tspec_max_msdu, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14147:       offset += 2;",
          "14149:       proto_tree_add_item(tree, hf_ieee80211_tspec_min_srv, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14150:       offset += 4;",
          "14152:       proto_tree_add_item(tree, hf_ieee80211_tspec_max_srv, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14153:       offset += 4;",
          "14155:       proto_tree_add_item(tree, hf_ieee80211_tspec_inact_int, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14156:       offset += 4;",
          "14158:       proto_tree_add_item(tree, hf_ieee80211_tspec_susp_int, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14159:       offset += 4;",
          "14161:       proto_tree_add_item(tree, hf_ieee80211_tspec_srv_start, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14162:       offset += 4;",
          "14164:       proto_tree_add_item(tree, hf_ieee80211_tspec_min_data, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14165:       offset += 4;",
          "14167:       proto_tree_add_item(tree, hf_ieee80211_tspec_mean_data, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14168:       offset += 4;",
          "14170:       proto_tree_add_item(tree, hf_ieee80211_tspec_peak_data, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14171:       offset += 4;",
          "14173:       proto_tree_add_item(tree, hf_ieee80211_tspec_burst_size, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14174:       offset += 4;",
          "14176:       proto_tree_add_item(tree, hf_ieee80211_tspec_delay_bound, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14177:       offset += 4;",
          "14179:       proto_tree_add_item(tree, hf_ieee80211_tspec_min_phy, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14180:       offset += 4;",
          "14182:       proto_tree_add_item(tree, hf_ieee80211_tspec_surplus, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14183:       offset += 2;",
          "14185:       proto_tree_add_item(tree, hf_ieee80211_tspec_medium, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14186:       offset += 2;",
          "14188:       if(isDMG == TRUE) {",
          "14189:         proto_tree_add_item(tree, hf_ieee80211_tspec_dmg, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14190:         offset +=2;",
          "14191:       }",
          "14193:       break;",
          "14196:       if (tag_len < 6)",
          "14197:       {",
          "14198:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag length %u too short, must be >= 6\", tag_len);",
          "14199:         break;",
          "14200:       }",
          "14201:       {",
          "14202:       guint8 type;",
          "14203:       guint8 version;",
          "14204:       proto_item *class_mask;",
          "14205:       proto_tree *mask_tree;",
          "14207:       offset += 2;",
          "14208:       proto_tree_add_item(tree, hf_ieee80211_tclas_up, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14209:       offset += 1;",
          "14211:       type = tvb_get_guint8(tvb, offset);",
          "14212:       proto_tree_add_item(tree, hf_ieee80211_tclas_class_type, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14213:       offset += 1;",
          "14215:       class_mask = proto_tree_add_item(tree, hf_ieee80211_tclas_class_mask,",
          "14217:       offset += 1;",
          "14219:       switch (type)",
          "14220:         {",
          "14221:           case 0:",
          "14222:             offset--;",
          "14223:             mask_tree = proto_item_add_subtree(class_mask,",
          "14224:                                                ett_tag_tclas_mask_tree);",
          "14225:             proto_tree_add_item(mask_tree,",
          "14226:                                 hf_ieee80211_tclas_class_mask0_src_addr,",
          "14228:             proto_tree_add_item(mask_tree,",
          "14229:                                 hf_ieee80211_tclas_class_mask0_dst_addr,",
          "14231:             proto_tree_add_item(mask_tree,",
          "14232:                                 hf_ieee80211_tclas_class_mask0_type,",
          "14234:             offset++;",
          "14236:             proto_tree_add_item(tree, hf_ieee80211_tclas_src_mac_addr, tvb, offset, 6, ENC_NA);",
          "14237:             offset += 6;",
          "14239:             proto_tree_add_item(tree, hf_ieee80211_tclas_dst_mac_addr, tvb, offset, 6, ENC_NA);",
          "14240:             offset += 6;",
          "14242:             proto_tree_add_item(tree, hf_ieee80211_tclas_ether_type, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14243:             offset += 2;",
          "14244:             break;",
          "14246:           case 1:",
          "14247:             version = tvb_get_guint8(tvb, offset);",
          "14248:             offset--;",
          "14250:             mask_tree = proto_item_add_subtree(class_mask,",
          "14251:                                                ett_tag_tclas_mask_tree);",
          "14252:             proto_tree_add_item(mask_tree,",
          "14253:                                 hf_ieee80211_tclas_class_mask1_ver,",
          "14254:                                 tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14255:             proto_tree_add_item(mask_tree,",
          "14256:                                 hf_ieee80211_tclas_class_mask1_src_ip,",
          "14257:                                 tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14258:             proto_tree_add_item(mask_tree,",
          "14259:                                 hf_ieee80211_tclas_class_mask1_dst_ip,",
          "14260:                                 tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14261:             proto_tree_add_item(mask_tree,",
          "14262:                                 hf_ieee80211_tclas_class_mask1_src_port,",
          "14264:             proto_tree_add_item(mask_tree,",
          "14265:                                 hf_ieee80211_tclas_class_mask1_dst_port,",
          "14267:             if (version == 4) {",
          "14268:               proto_tree_add_item(mask_tree,",
          "14269:                                   hf_ieee80211_tclas_class_mask1_ipv4_dscp,",
          "14270:                                   tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14271:               proto_tree_add_item(mask_tree,",
          "14272:                                   hf_ieee80211_tclas_class_mask1_ipv4_proto,",
          "14273:                                   tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14274:             } else {",
          "14275:               proto_tree_add_item(mask_tree,",
          "14276:                                   hf_ieee80211_tclas_class_mask1_ipv6_flow,",
          "14277:                                   tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14278:             }",
          "14279:             offset += 1;",
          "14281:             proto_tree_add_item(tree, hf_ieee80211_tclas_version, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14282:             offset += 1;",
          "14283:             if (version == 4)",
          "14284:             {",
          "14285:               proto_tree_add_item(tree, hf_ieee80211_tclas_ipv4_src, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "14286:               offset += 4;",
          "14287:               proto_tree_add_item(tree, hf_ieee80211_tclas_ipv4_dst, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "14288:               offset += 4;",
          "14289:               proto_tree_add_item(tree, hf_ieee80211_tclas_src_port, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "14290:               offset += 2;",
          "14291:               proto_tree_add_item(tree, hf_ieee80211_tclas_dst_port, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "14292:               offset += 2;",
          "14293:               proto_tree_add_item(tree, hf_ieee80211_tclas_dscp, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14294:               offset += 1;",
          "14295:               proto_tree_add_item(tree, hf_ieee80211_tclas_protocol, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14296:               offset += 1;",
          "14297:             }",
          "14298:             else if (version == 6)",
          "14299:             {",
          "14300:               proto_tree_add_item(tree, hf_ieee80211_tclas_ipv6_src, tvb, offset, 16, ENC_NA);",
          "14301:               offset += 16;",
          "14302:               proto_tree_add_item(tree, hf_ieee80211_tclas_ipv6_dst, tvb, offset, 16, ENC_NA);",
          "14303:               offset += 16;",
          "14304:               proto_tree_add_item(tree, hf_ieee80211_tclas_src_port, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "14305:               offset += 2;",
          "14306:               proto_tree_add_item(tree, hf_ieee80211_tclas_dst_port, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "14307:               offset += 2;",
          "14308:               proto_tree_add_item(tree, hf_ieee80211_tclas_flow, tvb, offset, 3, ENC_BIG_ENDIAN);",
          "14309:               offset += 3;",
          "14310:             }",
          "14311:             break;",
          "14313:           case 2:",
          "14314:             offset--;",
          "14315:             mask_tree = proto_item_add_subtree(class_mask,",
          "14316:                                                ett_tag_tclas_mask_tree);",
          "14317:             proto_tree_add_item(mask_tree,",
          "14318:                                 hf_ieee80211_tclas_class_mask2_tci,",
          "14320:             offset++;",
          "14322:             proto_tree_add_item(tree, hf_ieee80211_tclas_tag_type, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14323:             offset += 2;",
          "14324:             break;",
          "14326:           default:",
          "14327:             break;",
          "14328:         }",
          "14329:       }",
          "14330:       break;",
          "14333:       if (tag_len != 14)",
          "14334:       {",
          "14335:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 14\", tag_len);",
          "14336:         break;",
          "14337:       }",
          "14338:       offset += 2;",
          "14340:       add_ff_schedule_info(tree, tvb, pinfo, offset);",
          "14341:       offset += 2;",
          "14343:       proto_tree_add_item(tree, hf_ieee80211_sched_srv_start, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14346:       proto_tree_add_item(tree, hf_ieee80211_sched_srv_int, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14349:       proto_tree_add_item(tree, hf_ieee80211_sched_spec_int, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14351:       break;",
          "14354:       offset += 2;",
          "14355:       proto_tree_add_item(tree, hf_ieee80211_tag_challenge_text, tvb, offset, tag_len, ENC_NA);",
          "14356:       break;",
          "14359:     {",
          "14360:       if (tag_len != 1)",
          "14361:       {",
          "14362:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 1\", tag_len);",
          "14363:         break;",
          "14364:       }",
          "14367:       proto_tree_add_item(tree, hf_ieee80211_tag_power_constraint_local, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14368:       proto_item_append_text(ti, \": %d\", tvb_get_guint8(tvb, offset));",
          "14371:       break;",
          "14376:       if (tag_len != 2)",
          "14377:       {",
          "14378:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 2\", tag_len);",
          "14379:         break;",
          "14380:       }",
          "14383:       proto_tree_add_item(tree, hf_ieee80211_tag_power_capability_min, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14384:       proto_item_append_text(ti, \" Min: %d\", tvb_get_guint8(tvb, offset));",
          "14385:       offset += 1;",
          "14387:       proto_tree_add_item(tree, hf_ieee80211_tag_power_capability_max, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14388:       proto_item_append_text(ti, \", Max :%d\", tvb_get_guint8(tvb, offset));",
          "14389:       offset += 1;",
          "14390:       break;",
          "14391:     }",
          "14394:     {",
          "14395:       if (tag_len != 0)",
          "14396:       {",
          "14397:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 0\", tag_len);",
          "14398:         break;",
          "14399:       }",
          "14400:       offset += 2;",
          "14403:       break;",
          "14404:     }",
          "14407:     {",
          "14408:       if (tag_len != 2)",
          "14409:       {",
          "14410:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 2\", tag_len);",
          "14411:         break;",
          "14412:       }",
          "14413:       offset += 2;",
          "14415:       proto_tree_add_item(tree, hf_ieee80211_tag_tpc_report_trsmt_pow, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14416:       proto_item_append_text(ti, \" Transmit Power: %d\", tvb_get_guint8(tvb, offset));",
          "14417:       offset += 1;",
          "14419:       proto_tree_add_item(tree, hf_ieee80211_tag_tpc_report_link_mrg, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14420:       proto_item_append_text(ti, \", Link Margin: %d\", tvb_get_guint8(tvb, offset));",
          "14421:       offset += 1;",
          "14423:       break;",
          "14424:     }",
          "14427:       {",
          "14428:         proto_item *chan_item;",
          "14429:         proto_tree *chan_tree;",
          "14430:         guint       i = 1;",
          "14432:         offset += 2;",
          "14433:         if (tag_len % 2 == 1) {",
          "14434:            expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag length %u must be even\", tag_len);",
          "14435:            break;",
          "14436:         }",
          "14437:         while (offset < tag_end)",
          "14438:         {",
          "14439:           chan_item = proto_tree_add_item(tree, hf_ieee80211_tag_supported_channels, tvb, offset, 2, ENC_NA);",
          "14440:           proto_item_append_text(chan_item, \" #%d\", i);",
          "14441:           i += 1;",
          "14443:           chan_tree = proto_item_add_subtree(chan_item , ett_tag_supported_channels);",
          "14445:           proto_tree_add_item(chan_tree, hf_ieee80211_tag_supported_channels_first, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14446:           proto_item_append_text(chan_item, \" First: %d\", tvb_get_guint8(tvb, offset));",
          "14447:           offset += 1;",
          "14449:           proto_tree_add_item(chan_tree, hf_ieee80211_tag_supported_channels_range, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14450:           proto_item_append_text(chan_item, \", Range: %d \", tvb_get_guint8(tvb, offset));",
          "14451:           offset += 1;",
          "14453:         }",
          "14454:         break;",
          "14455:       }",
          "14457:     {",
          "14458:       if (tag_len != 3)",
          "14459:       {",
          "14460:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 3\", tag_len);",
          "14461:         break;",
          "14462:       }",
          "14463:       offset += 2;",
          "14465:       proto_tree_add_item(tree, hf_ieee80211_csa_channel_switch_mode, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14466:       proto_item_append_text(ti, \" Mode: %d\", tvb_get_guint8(tvb, offset));",
          "14467:       offset += 1;",
          "14469:       proto_tree_add_item(tree, hf_ieee80211_csa_new_channel_number, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14470:       proto_item_append_text(ti, \", Number: %d \", tvb_get_guint8(tvb, offset));",
          "14471:       offset += 1;",
          "14473:       proto_tree_add_item(tree, hf_ieee80211_csa_channel_switch_count, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14474:       proto_item_append_text(ti, \", Count: %d \", tvb_get_guint8(tvb, offset));",
          "14475:       offset += 1;",
          "14477:       break;",
          "14478:     }",
          "14481:       if (tag_len < 3)",
          "14482:       {",
          "14483:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag length %u too short, must be >= 3\", tag_len);",
          "14484:         break;",
          "14485:       }",
          "14486:       {",
          "14487:         guint8 request_type;",
          "14488:         proto_item *parent_item;",
          "14489:         proto_tree *sub_tree;",
          "14491:         offset += 2;",
          "14493:         proto_tree_add_item(tree, hf_ieee80211_tag_measure_request_token, tvb, offset, 1, ENC_NA);",
          "14494:         offset += 1;",
          "14496:         parent_item = proto_tree_add_item(tree, hf_ieee80211_tag_measure_request_mode, tvb, offset, 1, ENC_NA);",
          "14497:         sub_tree = proto_item_add_subtree(parent_item, ett_tag_measure_request_mode_tree);",
          "14498:         proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_parallel, tvb, offset, 1, ENC_NA);",
          "14499:         proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_enable, tvb, offset, 1, ENC_NA);",
          "14500:         proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_request, tvb, offset, 1, ENC_NA);",
          "14501:         proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_report, tvb, offset, 1, ENC_NA);",
          "14502:         proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_duration_mandatory, tvb, offset, 1, ENC_NA);",
          "14503:         proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_reserved, tvb, offset, 1, ENC_NA);",
          "14504:         offset += 1;",
          "14507:         parent_item = proto_tree_add_item(tree, hf_ieee80211_tag_measure_request_type, tvb, offset, 1, ENC_NA);",
          "14508:         sub_tree = proto_item_add_subtree(parent_item, ett_tag_measure_request_type_tree);",
          "14509:         request_type = tvb_get_guint8(tvb, offset);",
          "14510:         offset += 1;",
          "14512:         switch (request_type) {",
          "14516:           {",
          "14518:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_number, tvb, offset, 1, ENC_NA);",
          "14519:             offset += 1;",
          "14521:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);",
          "14522:             offset += 8;",
          "14524:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14525:             offset += 2;",
          "14526:             break;",
          "14527:           }",
          "14529:           {",
          "14530:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_operating_class, tvb, offset, 1, ENC_NA);",
          "14531:             offset += 1;",
          "14533:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_number, tvb, offset, 1, ENC_NA);",
          "14534:             offset += 1;",
          "14536:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_randomization_interval, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14537:             offset += 2;",
          "14539:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14540:             offset += 2;",
          "14542:             while (offset < tag_end)",
          "14543:             {",
          "14544:               guint8 sub_id;",
          "14545:               proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_load_sub_id, tvb, offset, 1, ENC_NA);",
          "14546:               sub_id = tvb_get_guint8(tvb, offset);",
          "14547:               offset += 1;",
          "14549:               proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_subelement_length, tvb, offset, 1, ENC_NA);",
          "14550:               offset += 1;",
          "14552:               switch (sub_id) {",
          "14554:                   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_load_sub_reporting_condition, tvb, offset, 1, ENC_NA);",
          "14555:                   offset += 1;",
          "14556:                   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_load_sub_reporting_ref, tvb, offset, 1, ENC_NA);",
          "14557:                   offset += 1;",
          "14558:                   break;",
          "14559:                 default:",
          "14561:                   break;",
          "14562:                 }",
          "14563:               }",
          "14564:             break;",
          "14565:           }",
          "14567:           {",
          "14568:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_operating_class, tvb, offset, 1, ENC_NA);",
          "14569:             offset += 1;",
          "14571:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_number, tvb, offset, 1, ENC_NA);",
          "14572:             offset += 1;",
          "14574:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_randomization_interval, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14575:             offset += 2;",
          "14577:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14578:             offset += 2;",
          "14580:             while (offset < tag_end)",
          "14581:             {",
          "14582:               guint8 sub_id;",
          "14583:               proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_noise_histogram_sub_id, tvb, offset, 1, ENC_NA);",
          "14584:               sub_id = tvb_get_guint8(tvb, offset);",
          "14585:               offset += 1;",
          "14587:               proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_subelement_length, tvb, offset, 1, ENC_NA);",
          "14588:               offset += 1;",
          "14590:               switch (sub_id) {",
          "14592:                   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_noise_histogram_sub_reporting_condition, tvb, offset, 1, ENC_NA);",
          "14593:                   offset += 1;",
          "14594:                   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_noise_histogram_sub_reporting_anpi_ref, tvb, offset, 1, ENC_NA);",
          "14595:                   offset += 1;",
          "14596:                   break;",
          "14597:                 default:",
          "14599:                   break;",
          "14600:                 }",
          "14601:               }",
          "14602:             break;",
          "14603:           }",
          "14605:           {",
          "14606:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_operating_class, tvb, offset, 1, ENC_NA);",
          "14607:             offset += 1;",
          "14609:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_number, tvb, offset, 1, ENC_NA);",
          "14610:             offset += 1;",
          "14612:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_randomization_interval, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14613:             offset += 2;",
          "14615:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14616:             offset += 2;",
          "14618:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_measurement_mode, tvb, offset, 1, ENC_NA);",
          "14619:             offset += 1;",
          "14621:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_bssid, tvb, offset, 6, ENC_NA);",
          "14622:             offset += 6;",
          "14624:             while (offset < tag_end)",
          "14625:             {",
          "14626:               guint8 sub_id, sub_length, sub_tag_end;",
          "14627:               proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_beacon_sub_id, tvb, offset, 1, ENC_NA);",
          "14628:               sub_id = tvb_get_guint8(tvb, offset);",
          "14629:               offset += 1;",
          "14631:               proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_subelement_length, tvb, offset, 1, ENC_NA);",
          "14632:               sub_length = tvb_get_guint8(tvb, offset);",
          "14633:               offset += 1;",
          "14634:               sub_tag_end = offset + sub_length;",
          "14636:               switch (sub_id) {",
          "14638:                   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_beacon_sub_ssid, tvb, offset, sub_length, ENC_ASCII|ENC_NA);",
          "14639:                   offset += sub_length;",
          "14640:                   break;",
          "14642:                   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_beacon_sub_bri_reporting_condition, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14643:                   offset += 1;",
          "14644:                   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_beacon_sub_bri_threshold_offset, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14645:                   offset += 1;",
          "14646:                   break;",
          "14648:                   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_beacon_sub_reporting_detail, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14649:                   offset += 1;",
          "14650:                   break;",
          "14652:                   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_beacon_sub_request, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14653:                   offset += 1;",
          "14654:                   break;",
          "14657:                   break;",
          "14658:                 default:",
          "14660:                   break;",
          "14661:              }",
          "14662:              if (offset < sub_tag_end)",
          "14663:              {",
          "14664:                proto_item *tix;",
          "14665:                tix = proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_beacon_unknown, tvb, offset, sub_tag_end - offset, ENC_NA);",
          "14666:                expert_add_info(pinfo, tix, &ei_ieee80211_tag_measure_request_beacon_unknown);",
          "14667:                offset = sub_tag_end;",
          "14668:              }",
          "14669:             }",
          "14674:           {",
          "14675:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_operating_class, tvb, offset, 1, ENC_NA);",
          "14676:             offset += 1;",
          "14678:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_number, tvb, offset, 1, ENC_NA);",
          "14679:             offset += 1;",
          "14681:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_randomization_interval, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14682:             offset += 2;",
          "14684:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14685:             offset += 2;",
          "14687:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_frame_request_type, tvb, offset, 1, ENC_NA);",
          "14688:             offset += 1;",
          "14690:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mac_address, tvb, offset, 6, ENC_NA);",
          "14691:             offset += 6;",
          "14694:             break;",
          "14695:           }",
          "14697:           {",
          "14698:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_peer_mac_address, tvb, offset, 6, ENC_NA);",
          "14699:             offset += 6;",
          "14701:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_randomization_interval, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14702:             offset += 2;",
          "14704:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14705:             offset += 2;",
          "14707:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_group_id, tvb, offset, 1, ENC_NA);",
          "14708:             offset += 1;",
          "14711:             break;",
          "14712:           }",
          "14732:             break;",
          "14733:         }",
          "14734:         if (offset < tag_end)",
          "14735:         {",
          "14736:           proto_item *tix;",
          "14737:           tix = proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_unknown, tvb, offset, tag_end - offset, ENC_NA);",
          "14738:           expert_add_info(pinfo, tix, &ei_ieee80211_tag_measure_request_unknown);",
          "14739:         }",
          "14740:       }",
          "14742:       break;",
          "14744:       if (tag_len < 3)",
          "14745:       {",
          "14746:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag length %u too short, must be >= 3\", tag_len);",
          "14747:         break;",
          "14748:       }",
          "14749:       {",
          "14750:         proto_item *parent_item;",
          "14751:         proto_tree *sub_tree;",
          "14752:         guint8 report_type;",
          "14754:         offset += 2;",
          "14755:         proto_tree_add_item(tree, hf_ieee80211_tag_measure_report_measurement_token, tvb, offset, 1, ENC_NA);",
          "14756:         offset += 1;",
          "14758:         parent_item = proto_tree_add_item(tree, hf_ieee80211_tag_measure_report_mode, tvb, offset, 1, ENC_NA);",
          "14759:         sub_tree = proto_item_add_subtree(parent_item, ett_tag_measure_report_mode_tree);",
          "14760:         proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_mode_late, tvb, offset, 1, ENC_NA);",
          "14761:         proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_mode_incapable, tvb, offset, 1, ENC_NA);",
          "14762:         proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_mode_refused, tvb, offset, 1, ENC_NA);",
          "14763:         proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_mode_reserved, tvb, offset, 1, ENC_NA);",
          "14764:         offset += 1;",
          "14766:         report_type = tvb_get_guint8(tvb, offset);",
          "14767:         parent_item = proto_tree_add_item(tree, hf_ieee80211_tag_measure_report_type, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14768:         sub_tree = proto_item_add_subtree(parent_item, ett_tag_measure_report_type_tree);",
          "14769:         offset += 1;",
          "14771:         if (tag_len == 3)",
          "14772:             break;",
          "14773:         switch (report_type) {",
          "14775:           {",
          "14776:             proto_tree *sub_tree_map_field;",
          "14778:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_number, tvb, offset, 1, ENC_NA);",
          "14779:             offset += 1;",
          "14781:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);",
          "14782:             offset += 8;",
          "14784:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14785:             offset += 2;",
          "14788:             parent_item = proto_tree_add_item(tree, hf_ieee80211_tag_measure_basic_map_field, tvb, offset, 1, ENC_NA);",
          "14789:             sub_tree_map_field = proto_item_add_subtree(parent_item, ett_tag_measure_report_basic_map_tree);",
          "14790:             proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_bss, tvb, offset, 1, ENC_NA);",
          "14791:             proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_odfm, tvb, offset, 1, ENC_NA);",
          "14792:             proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_unident_signal, tvb, offset, 1, ENC_NA);",
          "14793:             proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_radar, tvb, offset, 1, ENC_NA);",
          "14794:             proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_unmeasured, tvb, offset, 1, ENC_NA);",
          "14795:             proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_reserved, tvb, offset, 1, ENC_NA);",
          "14796:             break;",
          "14797:           }",
          "14799:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_number, tvb, offset, 1, ENC_NA);",
          "14800:             offset += 1;",
          "14802:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);",
          "14803:             offset += 8;",
          "14805:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14806:             offset += 2;",
          "14808:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_cca_busy_fraction, tvb, offset, 1, ENC_NA);",
          "14809:             offset += 1;",
          "14810:             break;",
          "14812:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_number, tvb, offset, 1, ENC_NA);",
          "14813:             offset += 1;",
          "14815:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);",
          "14816:             offset += 8;",
          "14818:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14819:             offset += 2;",
          "14821:             parent_item = proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report, tvb, offset, 8, ENC_NA);",
          "14822:             sub_tree = proto_item_add_subtree(parent_item, ett_tag_measure_report_rpi_tree);",
          "14824:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_0, tvb, offset, 1, ENC_NA);",
          "14825:             offset += 1;",
          "14827:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_1, tvb, offset, 1, ENC_NA);",
          "14828:             offset += 1;",
          "14830:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_2, tvb, offset, 1, ENC_NA);",
          "14831:             offset += 1;",
          "14833:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_3, tvb, offset, 1, ENC_NA);",
          "14834:             offset += 1;",
          "14836:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_4, tvb, offset, 1, ENC_NA);",
          "14837:             offset += 1;",
          "14839:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_5, tvb, offset, 1, ENC_NA);",
          "14840:             offset += 1;",
          "14842:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_6, tvb, offset, 1, ENC_NA);",
          "14843:             offset += 1;",
          "14845:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_7, tvb, offset, 1, ENC_NA);",
          "14846:             offset += 1;",
          "14847:             break;",
          "14849:           {",
          "14850:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_operating_class, tvb, offset, 1, ENC_NA);",
          "14851:             offset += 1;",
          "14853:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_number, tvb, offset, 1, ENC_NA);",
          "14854:             offset += 1;",
          "14856:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);",
          "14857:             offset += 8;",
          "14859:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14860:             offset += 2;",
          "14862:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_load, tvb, offset, 1, ENC_NA);",
          "14863:             offset += 1;",
          "14866:             break;",
          "14867:           }",
          "14869:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_operating_class, tvb, offset, 1, ENC_NA);",
          "14870:             offset += 1;",
          "14872:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_number, tvb, offset, 1, ENC_NA);",
          "14873:             offset += 1;",
          "14875:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);",
          "14876:             offset += 8;",
          "14878:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14879:             offset += 2;",
          "14881:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ant_id, tvb, offset, 1, ENC_NA);",
          "14882:             offset += 1;",
          "14884:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_anpi, tvb, offset, 1, ENC_NA);",
          "14885:             offset += 1;",
          "14887:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_0, tvb, offset, 1, ENC_NA);",
          "14888:             offset += 1;",
          "14890:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_1, tvb, offset, 1, ENC_NA);",
          "14891:             offset += 1;",
          "14893:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_2, tvb, offset, 1, ENC_NA);",
          "14894:             offset += 1;",
          "14896:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_3, tvb, offset, 1, ENC_NA);",
          "14897:             offset += 1;",
          "14899:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_4, tvb, offset, 1, ENC_NA);",
          "14900:             offset += 1;",
          "14902:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_5, tvb, offset, 1, ENC_NA);",
          "14903:             offset += 1;",
          "14905:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_6, tvb, offset, 1, ENC_NA);",
          "14906:             offset += 1;",
          "14908:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_7, tvb, offset, 1, ENC_NA);",
          "14909:             offset += 1;",
          "14911:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_8, tvb, offset, 1, ENC_NA);",
          "14912:             offset += 1;",
          "14914:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_9, tvb, offset, 1, ENC_NA);",
          "14915:             offset += 1;",
          "14917:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_10, tvb, offset, 1, ENC_NA);",
          "14918:             offset += 1;",
          "14921:             break;",
          "14923:           {",
          "14924:             proto_tree *sub_tree_frame_info;",
          "14926:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_operating_class, tvb, offset, 1, ENC_NA);",
          "14927:             offset += 1;",
          "14929:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_number, tvb, offset, 1, ENC_NA);",
          "14930:             offset += 1;",
          "14932:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);",
          "14933:             offset += 8;",
          "14935:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14936:             offset += 2;",
          "14938:             parent_item = proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_frame_info, tvb, offset, 1, ENC_NA);",
          "14939:             sub_tree_frame_info = proto_item_add_subtree(parent_item, ett_tag_measure_report_frame_tree);",
          "14940:             proto_tree_add_item(sub_tree_frame_info, hf_ieee80211_tag_measure_report_frame_info_phy_type, tvb, offset, 1, ENC_NA);",
          "14941:             proto_tree_add_item(sub_tree_frame_info, hf_ieee80211_tag_measure_report_frame_info_frame_type, tvb, offset, 1, ENC_NA);",
          "14942:             offset += 1;",
          "14944:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_rcpi, tvb, offset, 1, ENC_NA);",
          "14945:             offset += 1;",
          "14947:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_rsni, tvb, offset, 1, ENC_NA);",
          "14948:             offset += 1;",
          "14950:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_bssid, tvb, offset, 6, ENC_NA);",
          "14951:             offset += 6;",
          "14953:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ant_id, tvb, offset, 1, ENC_NA);",
          "14954:             offset += 1;",
          "14956:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_parent_tsf, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14957:             offset += 4;",
          "14959:             while (offset < tag_end)",
          "14960:             {",
          "14961:               guint8 sub_id, sub_length;",
          "14962:               proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_beacon_sub_id, tvb, offset, 1, ENC_NA);",
          "14963:               sub_id = tvb_get_guint8(tvb, offset);",
          "14964:               offset += 1;",
          "14966:               proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_subelement_length, tvb, offset, 1, ENC_NA);",
          "14967:               sub_length = tvb_get_guint8(tvb, offset);",
          "14968:               offset += 1;",
          "14970:               switch (sub_id) {",
          "14972:                   {",
          "14973:                     proto_tree *rep_tree;",
          "14975:                     rep_tree = proto_tree_add_subtree(sub_tree, tvb, offset, sub_length, ett_tag_measure_reported_frame_tree, NULL, \"Reported Frame Body\");",
          "14977:                     add_ff_timestamp(rep_tree, tvb, pinfo, 0);",
          "14978:                     add_ff_beacon_interval(rep_tree, tvb, pinfo, 8);",
          "14979:                     add_ff_cap_info(rep_tree, tvb, pinfo, 10);",
          "14980:                     offset += 12;",
          "14982:                     ieee_80211_add_tagged_parameters(tvb, offset, pinfo, rep_tree, sub_length - 12, MGT_PROBE_RESP, NULL);",
          "14983:                     offset += (sub_length - 12);",
          "14984:                   }",
          "14985:                   break;",
          "14986:                 default:",
          "14988:                   break;",
          "14989:               }",
          "14990:             }",
          "14991:             break;",
          "14992:           }",
          "14994:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_operating_class, tvb, offset, 1, ENC_NA);",
          "14995:             offset += 1;",
          "14997:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_number, tvb, offset, 1, ENC_NA);",
          "14998:             offset += 1;",
          "15000:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);",
          "15001:             offset += 8;",
          "15003:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15004:             offset += 2;",
          "15007:             break;",
          "15027:             break;",
          "15028:         }",
          "15029:         if (offset < tag_end)",
          "15030:         {",
          "15031:           proto_item *tix;",
          "15032:           tix = proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_unknown, tvb, offset, tag_end - offset, ENC_NA);",
          "15033:           expert_add_info(pinfo, tix, &ei_ieee80211_tag_measure_report_unknown);",
          "15034:         }",
          "15035:       }",
          "15036:       break;",
          "15039:       if (tag_len != 6)",
          "15040:       {",
          "15041:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 6\", tag_len);",
          "15042:         break;",
          "15043:       }",
          "15044:       offset += 2;",
          "15046:       proto_tree_add_item(tree, hf_ieee80211_tag_quiet_count, tvb, offset, 1, ENC_NA);",
          "15047:       proto_item_append_text(ti, \" Count: %d\", tvb_get_guint8(tvb, offset));",
          "15048:       offset += 1;",
          "15050:       proto_tree_add_item(tree, hf_ieee80211_tag_quiet_period, tvb, offset, 1, ENC_NA);",
          "15051:       proto_item_append_text(ti, \" Period: %d\", tvb_get_guint8(tvb, offset));",
          "15052:       offset += 1;",
          "15054:       proto_tree_add_item(tree, hf_ieee80211_tag_quiet_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15055:       proto_item_append_text(ti, \" Duration: %d\", tvb_get_letohs(tvb, offset));",
          "15056:       offset += 2;",
          "15058:       proto_tree_add_item(tree, hf_ieee80211_tag_quiet_offset, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15059:       proto_item_append_text(ti, \" Offset: %d\", tvb_get_letohs(tvb, offset));",
          "15060:       offset += 2;",
          "15061:       break;",
          "15065:       if (tag_len < 7)",
          "15066:       {",
          "15067:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be >= 7\", tag_len);",
          "15068:         break;",
          "15069:       }",
          "15070:       {",
          "15071:         proto_item *ti_sup_map;",
          "15072:         proto_tree *sub_map_tree;",
          "15073:         offset += 2;",
          "15075:         proto_tree_add_item(tree, hf_ieee80211_tag_dfs_owner, tvb, offset, 6, ENC_NA);",
          "15076:         proto_item_append_text(ti, \" Owner: %s\", tvb_ether_to_str(tvb, offset));",
          "15077:         offset += 6;",
          "15079:         proto_tree_add_item(tree, hf_ieee80211_tag_dfs_recovery_interval, tvb, offset, 1, ENC_NA);",
          "15080:         offset += 1;",
          "15082:         while (offset < tag_end)",
          "15083:         {",
          "15084:           ti_sup_map = proto_tree_add_item(tree, hf_ieee80211_tag_dfs_channel_map, tvb, offset, 2, ENC_NA);",
          "15085:           sub_map_tree = proto_item_add_subtree(ti_sup_map, ett_tag_dfs_map_tree);",
          "15086:           proto_tree_add_item(sub_map_tree, hf_ieee80211_tag_dfs_channel_number, tvb, offset, 1, ENC_NA);",
          "15087:           proto_tree_add_item(sub_map_tree, hf_ieee80211_tag_dfs_map, tvb, offset, 1, ENC_NA);",
          "15088:           offset += 2;",
          "15089:         }",
          "15090:         break;",
          "15091:       }",
          "15093:     case TAG_ERP_INFO_OLD:",
          "15094:       if (tag_len != 1)",
          "15095:       {",
          "15096:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 1\", tag_len);",
          "15097:         break;",
          "15098:       }",
          "15099:       {",
          "15100:         proto_item *ti_erp;",
          "15101:         proto_tree *erp_tree;",
          "15103:         offset += 2;",
          "15105:         ti_erp = proto_tree_add_item(tree, hf_ieee80211_tag_erp_info, tvb, offset, 1, ENC_NA);",
          "15106:         erp_tree = proto_item_add_subtree(ti_erp, ett_tag_erp_info_tree);",
          "15107:         proto_tree_add_item(erp_tree, hf_ieee80211_tag_erp_info_erp_present, tvb, offset, 1, ENC_NA);",
          "15108:         proto_tree_add_item(erp_tree, hf_ieee80211_tag_erp_info_use_protection, tvb, offset, 1, ENC_NA);",
          "15109:         proto_tree_add_item(erp_tree, hf_ieee80211_tag_erp_info_barker_preamble_mode, tvb, offset, 1, ENC_NA);",
          "15110:         proto_tree_add_item(erp_tree, hf_ieee80211_tag_erp_info_reserved, tvb, offset, 1, ENC_NA);",
          "15111:         offset += 1;",
          "15112:         break;",
          "15113:       }",
          "15116:       if (tag_len != 4)",
          "15117:       {",
          "15118:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 4\", tag_len);",
          "15119:         break;",
          "15120:       }",
          "15121:       offset += 2;",
          "15123:       proto_tree_add_item(tree, hf_ieee80211_ts_delay, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15124:       proto_item_append_text(ti, \" : %d\", tvb_get_ntohl(tvb, offset));",
          "15125:       offset += 4;",
          "15126:       break;",
          "15129:       if (tag_len != 1)",
          "15130:       {",
          "15131:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 1\", tag_len);",
          "15132:         break;",
          "15133:       }",
          "15134:       offset += 2;",
          "15136:       proto_tree_add_item(tree, hf_ieee80211_tclas_process, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15137:       proto_item_append_text(ti, \" : %s\", val_to_str(tvb_get_guint8(tvb, offset), ieee80211_tclas_process_flag, \"Unknown %d\"));",
          "15138:       offset += 1;",
          "15139:       break;",
          "15142:       if (tag_len != 1)",
          "15143:       {",
          "15144:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 1\", tag_len);",
          "15145:         break;",
          "15146:       }",
          "15147:       {",
          "15148:         offset += 2;",
          "15149:         offset = dissect_qos_capability(tree, tvb, pinfo, offset, ftype);",
          "15150:       }",
          "15151:       break;",
          "15154:       if (tag_len < 18)",
          "15155:       {",
          "15156:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be >= 18\", tag_len);",
          "15157:         break;",
          "15158:       }",
          "15159:       offset += 2;",
          "15161:       offset = dissect_rsn_ie(pinfo, tree, tvb, offset, tag_len, association_sanity_check);",
          "15162:       break;",
          "15165:       if (tag_len < 1)",
          "15166:       {",
          "15167:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag length %u too short, must be greater than 0\", tag_len);",
          "15168:         break;",
          "15169:       }",
          "15170:       offset += 2;",
          "15172:       while (offset < tag_end)",
          "15173:       {",
          "15174:         proto_tree_add_item(tree, hf_ieee80211_tag_ext_supp_rates, tvb, offset, 1, ENC_NA);",
          "15175:         proto_item_append_text(ti, \" %s,\", val_to_str_ext_const(tvb_get_guint8(tvb, offset), &ieee80211_supported_rates_vals_ext, \"Unknown Rate\"));",
          "15176:         offset += 1;",
          "15177:       }",
          "15178:       proto_item_append_text(ti, \" [Mbit/sec]\");",
          "15179:       break;",
          "15182:       dissect_extended_capabilities_ie(pinfo, tree, ti, ti_len, tag_len, tvb, offset+2, tag_end);",
          "15183:       break;",
          "15196:       if (tag_len < 26)",
          "15197:       {",
          "15198:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u too short, must be >= 26\", tag_len);",
          "15199:         break;",
          "15200:       }",
          "15201:       offset += 2;",
          "15202:       proto_tree_add_item(tree, hf_ieee80211_tag_cisco_ccx1_unknown, tvb, offset, 10, ENC_NA);",
          "15203:       offset += 10;",
          "15207:       proto_tree_add_item(tree, hf_ieee80211_tag_cisco_ccx1_name, tvb, offset, 16, ENC_ASCII|ENC_NA);",
          "15208:       offset += 16;",
          "15211:       proto_tree_add_item(tree, hf_ieee80211_tag_cisco_ccx1_clients, tvb, offset, 1, ENC_NA);",
          "15212:       offset += 1;",
          "15213:       proto_tree_add_item(tree, hf_ieee80211_tag_cisco_ccx1_unknown2, tvb, offset, 3, ENC_NA);",
          "15214:       offset += 3;",
          "15215:       break;",
          "15217:     case TAG_VHT_CAPABILITY:",
          "15218:       dissect_vht_capability_ie(tvb, pinfo, tree, offset+2, tag_len, ti_len);",
          "15221:     case TAG_VHT_OPERATION:",
          "15222:       dissect_vht_operation_ie(tvb, pinfo, tree, offset+2, tag_len, ti_len);",
          "15225:     case TAG_EXT_BSS_LOAD:",
          "15226:       dissect_ext_bss_load(tree, tvb, offset+2);",
          "15229:     case TAG_WIDE_BW_CHANNEL_SWITCH:",
          "15230:       dissect_wide_bw_channel_switch(tree, tvb, offset+2);",
          "15233:     case TAG_VHT_TX_PWR_ENVELOPE:",
          "15234:       dissect_vht_tx_pwr_envelope(tvb, pinfo, tree, offset+2, tag_len, ti_len);",
          "15237:     case TAG_CHANNEL_SWITCH_WRAPPER:",
          "15238:       dissect_channel_switch_wrapper(pinfo, tree, tvb, offset + 2, tag_len);",
          "15241:     case TAG_OPERATING_MODE_NOTIFICATION:",
          "15242:       dissect_operating_mode_notification(tree, tvb, offset + 2);",
          "15248:       if (tag_len < 3)",
          "15249:       {",
          "15250:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be >= 3\", tag_len);",
          "15251:         break;",
          "15252:       }",
          "15253:       {",
          "15254:         guint32 tag_vs_len = tag_len;",
          "15256:         offset += 2;",
          "15257:         oui = tvb_get_ntoh24(tvb, offset);",
          "15258:         tag_tvb = tvb_new_subset_length(tvb, offset, tag_len);",
          "15259:         proto_tree_add_item(tree, hf_ieee80211_tag_oui, tvb, offset, 3, ENC_NA);",
          "15260:         proto_item_append_text(ti, \": %s\", uint_get_manuf_name(oui));",
          "15261:         offset += 3;",
          "15262:         tag_vs_len -= 3;",
          "15264:         if (tag_len > 0) {",
          "15265:           proto_tree_add_item(ti, hf_ieee80211_tag_vendor_oui_type, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15266:         }",
          "15268:       switch (oui) {",
          "15270:         case OUI_WPAWME:",
          "15271:           offset = dissect_vendor_ie_wpawme(tree, tvb, pinfo, offset, tag_vs_len, ftype);",
          "15272:           break;",
          "15273:         case OUI_RSN:",
          "15274:           dissect_vendor_ie_rsn(ti, tree, tvb, offset, tag_vs_len);",
          "15275:           break;",
          "15276:         case OUI_PRE11N:",
          "15277:           dissect_vendor_ie_ht(tvb, pinfo, tree, offset, ti, ti_len, tag_vs_len);",
          "15278:           break;",
          "15279:         case OUI_WFA:",
          "15280:           dissect_vendor_ie_wfa(pinfo, ti, tag_tvb);",
          "15281:           break;",
          "15285:           dissect_vendor_ie_aironet(ti, tree, tvb, offset, tag_vs_len);",
          "15286:           break;",
          "15287:         case OUI_MARVELL:",
          "15288:           dissect_vendor_ie_marvell(ti, tree, tvb, offset, tag_vs_len);",
          "15289:           break;",
          "15290:         case OUI_ATHEROS:",
          "15291:           dissect_vendor_ie_atheros(ti, tree, tvb, offset, tag_vs_len, pinfo, ti_len);",
          "15292:           break;",
          "15293:         case OUI_ARUBA:",
          "15294:           dissect_vendor_ie_aruba(ti, tree, tvb, offset, tag_vs_len);",
          "15295:           break;",
          "15296:         case OUI_NINTENDO:",
          "15297:           dissect_vendor_ie_nintendo(ti, tree, tvb, offset, tag_vs_len);",
          "15298:           break;",
          "15299:         case OUI_MIKROTIK:",
          "15300:           dissect_vendor_ie_mikrotik(ti, tree, tvb, offset, tag_vs_len);",
          "15301:           break;",
          "15302:         case OUI_MERU:",
          "15303:           dissect_vendor_ie_meru(ti, tree, tvb, offset, tag_vs_len, pinfo);",
          "15304:           break;",
          "15305:         case OUI_ZEBRA_EXTREME:",
          "15306:           dissect_vendor_ie_extreme(ti, tree, tvb, offset, tag_vs_len, pinfo);",
          "15307:           break;",
          "15308:         default:",
          "15309:           proto_tree_add_item(tree, hf_ieee80211_tag_vendor_data, tvb, offset, tag_vs_len, ENC_NA);",
          "15310:           break;",
          "15311:         }",
          "15313:       }",
          "15316:     case TAG_MOBILITY_DOMAIN:",
          "15317:       dissect_mobility_domain(tree, tvb, offset + 2, tag_len, association_sanity_check);",
          "15320:     case TAG_FAST_BSS_TRANSITION:",
          "15321:       dissect_fast_bss_transition(tree, tvb, offset + 2, tag_len);",
          "15324:     case TAG_MMIE:",
          "15325:       dissect_mmie(tree, tvb, offset + 2, tag_len);",
          "15328:     case TAG_SSID_LIST:",
          "15329:       dissect_ssid_list(tree, tvb, offset + 2, tag_len);",
          "15332:     case TAG_TIME_ZONE:",
          "15333:       dissect_time_zone(tree, tvb, offset + 2, tag_len);",
          "15336:     case TAG_TIMEOUT_INTERVAL:",
          "15337:       dissect_timeout_interval(tree, tvb, pinfo, offset + 2, tag_len);",
          "15338:       break;",
          "15344:       tag_len = dissect_ric_data(pinfo, tree, tvb, offset + 2, tag_len, ti, ti_len, ftype);",
          "15345:       break;",
          "15347:     case TAG_LINK_IDENTIFIER:",
          "15348:       dissect_link_identifier(tree, tvb, offset + 2, tag_len);",
          "15349:       break;",
          "15351:     case TAG_WAKEUP_SCHEDULE:",
          "15352:       dissect_wakeup_schedule(tree, tvb, offset + 2, tag_len);",
          "15355:     case TAG_CHANNEL_SWITCH_TIMING:",
          "15356:       dissect_channel_switch_timing(tree, tvb, offset + 2, tag_len);",
          "15359:     case TAG_PTI_CONTROL:",
          "15360:       dissect_pti_control(tree, tvb, offset + 2, tag_len);",
          "15363:     case TAG_PU_BUFFER_STATUS:",
          "15364:       dissect_pu_buffer_status(tree, tvb, offset + 2, tag_len);",
          "15367:     case TAG_HT_CAPABILITY:",
          "15368:       dissect_ht_capability_ie(tvb, pinfo, tree, offset+2, tag_len, ti_len, FALSE);",
          "15369:       break;",
          "15371:     case TAG_HT_INFO:",
          "15372:       dissect_ht_info_ie_1_1(tvb, pinfo, tree, offset + 2, tag_len, ti_len);",
          "15373:       break;",
          "15375:     case TAG_SECONDARY_CHANNEL_OFFSET:",
          "15376:       dissect_secondary_channel_offset_ie(tvb, pinfo, tree, offset + 2, tag_len, ti_len);",
          "15377:       break;",
          "15380:       dissect_bss_avg_access_delay_ie(tvb, pinfo, tree, offset + 2, tag_len, ti_len);",
          "15381:       break;",
          "15384:       dissect_antenna_ie(tvb, pinfo, tree, offset + 2, tag_len, ti_len);",
          "15385:       break;",
          "15388:       dissect_rsni_ie(tvb, pinfo, tree, offset + 2, tag_len, ti_len);",
          "15389:       break;",
          "15391:     case TAG_BSS_AVB_ADM_CAPACITY:",
          "15392:       dissect_bss_available_admission_capacity_ie(tvb, pinfo, tree, offset + 2, tag_len, ti_len);",
          "15393:       break;",
          "15397:         dissect_wapi_param_set(tvb, pinfo, tree, offset + 2, tag_len, ti_len, ti, ftype);",
          "15398:       }",
          "15400:         dissect_bss_ac_access_delay_ie(tvb, pinfo, tree, offset + 2, tag_len, ti_len);",
          "15401:       }",
          "15402:       break;",
          "15404:     case TAG_BSS_MAX_IDLE_PERIOD:",
          "15405:       dissect_bss_max_idle_period(tree, tvb, offset + 2);",
          "15406:       break;",
          "15408:     case TAG_TFS_REQUEST:",
          "15409:       dissect_tfs_request(pinfo, tree, tvb, offset + 2, tag_len, ftype);",
          "15410:       break;",
          "15412:     case TAG_TFS_RESPONSE:",
          "15413:       dissect_tfs_response(pinfo, tree, tvb, offset + 2, tag_len, ftype);",
          "15414:       break;",
          "15416:     case TAG_WNM_SLEEP_MODE:",
          "15417:       dissect_wnm_sleep_mode(tree, tvb, offset + 2);",
          "15418:       break;",
          "15420:     case TAG_TIME_ADV:",
          "15421:       dissect_time_adv(tree, tvb, offset + 2);",
          "15422:       break;",
          "15425:       dissect_rm_enabled_capabilities_ie(pinfo, tree, ti, ti_len, tag_len, tvb, offset+2, tag_end);",
          "15426:       break;",
          "15429:       dissect_20_40_bss_coexistence(pinfo, tree, ti_len, tag_len, tvb, offset+2);",
          "15430:       break;",
          "15433:       dissect_overlap_bss_scan_par(pinfo, tree, tvb, offset + 2, tag_len, ti, ti_len);",
          "15434:       break;",
          "15437:       dissect_ric_descriptor(pinfo, tree, tvb, offset + 2, tag_len, ti, ti_len);",
          "15438:       break;",
          "15440:     case TAG_MESH_PEERING_MGMT:",
          "15441:       {",
          "15442:         guint start = offset + 2;",
          "15443:         offset += 2;",
          "15444:         proto_tree_add_item(tree, hf_ieee80211_mesh_peering_proto, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15445:         offset += 2;",
          "15446:         proto_tree_add_item(tree, hf_ieee80211_mesh_peering_local_link_id, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15447:         offset += 2;",
          "15448:         switch (tvb_get_guint8(tvb, 1))",
          "15450:           case SELFPROT_ACTION_MESH_PEERING_OPEN:",
          "15451:             break;",
          "15453:           case SELFPROT_ACTION_MESH_PEERING_CONFIRM:",
          "15454:             proto_tree_add_item(tree, hf_ieee80211_mesh_peering_peer_link_id, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15455:             offset += 2;",
          "15456:             break;",
          "15458:           case SELFPROT_ACTION_MESH_PEERING_CLOSE:",
          "15459:             if ((tag_len == 8) || (tag_len == 24))",
          "15460:               {",
          "15461:                 proto_tree_add_item(tree, hf_ieee80211_mesh_peering_peer_link_id, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15462:                 offset += 2;",
          "15463:               }",
          "15464:             offset += add_ff_reason_code(tree, tvb, pinfo, offset);",
          "15465:             break;",
          "15468:           default:",
          "15469:             proto_tree_add_expert(tree, pinfo, &ei_ieee80211_mesh_peering_unexpected , tvb, offset, tag_len);",
          "15470:             offset += tag_len;",
          "15471:             break;",
          "15472:           }",
          "15473:         if (tag_len - (offset - start) == 16)",
          "15474:           {",
          "15475:             proto_tree_add_item(tree, hf_ieee80211_rsn_pmkid, tvb, offset, 16, ENC_NA);",
          "15476:             offset += 16;",
          "15477:           }",
          "15478:         break;",
          "15479:       }",
          "15481:     case TAG_MESH_CONFIGURATION:",
          "15482:       {",
          "15483:         proto_item *item;",
          "15484:         proto_tree *subtree;",
          "15485:         offset += 2;",
          "15486:         proto_tree_add_item(tree, hf_ieee80211_mesh_config_path_sel_protocol, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15487:         proto_tree_add_item(tree, hf_ieee80211_mesh_config_path_sel_metric, tvb, offset + 1, 1, ENC_LITTLE_ENDIAN);",
          "15488:         proto_tree_add_item(tree, hf_ieee80211_mesh_config_congestion_control, tvb, offset + 2, 1, ENC_LITTLE_ENDIAN);",
          "15489:         proto_tree_add_item(tree, hf_ieee80211_mesh_config_sync_method, tvb, offset + 3, 1, ENC_LITTLE_ENDIAN);",
          "15490:         proto_tree_add_item(tree, hf_ieee80211_mesh_config_auth_protocol, tvb, offset + 4, 1, ENC_LITTLE_ENDIAN);",
          "15491:         item = proto_tree_add_item(tree, hf_ieee80211_mesh_config_formation_info, tvb, offset + 5, 1, ENC_LITTLE_ENDIAN);",
          "15492:         subtree = proto_item_add_subtree(item, ett_mesh_formation_info_tree);",
          "15493:         proto_tree_add_item(subtree, hf_ieee80211_mesh_form_info_num_of_peerings, tvb, offset + 5, 1, ENC_LITTLE_ENDIAN);",
          "15494:         item = proto_tree_add_item(tree, hf_ieee80211_mesh_config_capability, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "15495:         subtree = proto_item_add_subtree(item, ett_mesh_config_cap_tree);",
          "15496:         proto_tree_add_item(subtree, hf_ieee80211_mesh_config_cap_accepting, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "15497:         proto_tree_add_item(subtree, hf_ieee80211_mesh_config_cap_mcca_support, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "15498:         proto_tree_add_item(subtree, hf_ieee80211_mesh_config_cap_mcca_enabled, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "15499:         proto_tree_add_item(subtree, hf_ieee80211_mesh_config_cap_forwarding, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "15500:         proto_tree_add_item(subtree, hf_ieee80211_mesh_config_cap_mbca_enabled, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "15501:         proto_tree_add_item(subtree, hf_ieee80211_mesh_config_cap_tbtt_adjusting, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "15502:         proto_tree_add_item(subtree, hf_ieee80211_mesh_config_cap_power_save_level, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "15503:         break;",
          "15504:       }",
          "15506:     case TAG_MESH_ID:",
          "15507:       {",
          "15508:         const guint8* mesh_id;",
          "15509:         offset += 2;",
          "15511:         proto_tree_add_item_ret_string(tree, hf_ieee80211_mesh_id, tvb, offset, tag_len, ENC_ASCII|ENC_NA, wmem_packet_scope(), &mesh_id);",
          "15512:         if (tag_len > 0) {",
          "15513:             gchar* s = format_text(wmem_packet_scope(), mesh_id, tag_len);",
          "15514:             col_append_fstr(pinfo->cinfo, COL_INFO, \", MESHID=%s\", s);",
          "15515:             proto_item_append_text(ti, \": %s\", s);",
          "15516:         }",
          "15518:       break;",
          "15519:       }",
          "15521:     case TAG_MESH_PREQ:",
          "15522:       {",
          "15523:         guint8 flags = tvb_get_guint8(tvb, offset + 2);",
          "15524:         guint8 targs, i;",
          "15526:         offset += 2;",
          "15527:         proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_flags, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15528:         offset += 1;",
          "15529:         proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_hopcount, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15530:         offset += 1;",
          "15531:         proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_ttl, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15532:         offset += 1;",
          "15533:         proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_pdid, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15534:         offset += 4;",
          "15535:         proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_orig_sta, tvb, offset, 6, ENC_NA);",
          "15536:         offset += 6;",
          "15537:         proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_orig_sn, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15538:         offset += 4;",
          "15540:         if (flags & (1<<6)) {",
          "15541:           proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_orig_ext, tvb, offset, 6, ENC_NA);",
          "15542:           offset += 6;",
          "15543:         }",
          "15544:         proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_lifetime, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15545:         offset += 4;",
          "15546:         proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_metric, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15547:         offset += 4;",
          "15548:         proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_targ_count, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15549:         targs = tvb_get_guint8(tvb, offset);",
          "15550:         offset += 1;",
          "15551:         for (i = 0; i < targs; i++) {",
          "15552:           const int * targ_flags[] = {",
          "15553:               &hf_ieee80211_ff_hwmp_targ_to_flags,",
          "15554:               &hf_ieee80211_ff_hwmp_targ_usn_flags,",
          "15555:               NULL",
          "15556:           };",
          "15558:           proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_ff_hwmp_targ_flags,",
          "15559:                                    ett_hwmp_targ_flags_tree, targ_flags, ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "15561:           offset += 1;",
          "15562:           proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_targ_sta, tvb, offset, 6, ENC_NA);",
          "15563:           offset += 6;",
          "15564:           proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_targ_sn, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15565:           offset += 4;",
          "15566:         }",
          "15567:         break;",
          "15568:       }",
          "15570:     case TAG_MESH_PREP:",
          "15571:       {",
          "15572:         guint8 flags = tvb_get_guint8(tvb, offset + 2);",
          "15573:         offset += 2;",
          "15574:         proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_flags, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15575:         offset += 1;",
          "15576:         proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_hopcount, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15577:         offset += 1;",
          "15578:         proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_ttl, tvb, offset , 1, ENC_LITTLE_ENDIAN);",
          "15579:         offset += 1;",
          "15580:         proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_targ_sta, tvb, offset, 6, ENC_NA);",
          "15581:         offset += 6;",
          "15582:         proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_targ_sn, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15583:         offset += 4;",
          "15584:         if (flags & (1<<6)) {",
          "15585:           proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_targ_ext, tvb, offset, 6, ENC_NA);",
          "15586:           offset += 6;",
          "15587:         }",
          "15588:         proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_lifetime, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15589:         offset += 4;",
          "15590:         proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_metric, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15591:         offset += 4;",
          "15592:         proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_orig_sta, tvb, offset, 6, ENC_NA);",
          "15593:         offset += 6;",
          "15594:         proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_orig_sn, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15595:         offset += 4;",
          "15596:         break;",
          "15597:       }",
          "15599:     case TAG_MESH_PERR:",
          "15600:       {",
          "15601:         guint8 targs, i;",
          "15603:         offset += 2;",
          "15604:         proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_ttl, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15605:         offset += 1;",
          "15606:         proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_targ_count, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15607:         targs = tvb_get_guint8(tvb, offset);",
          "15608:         offset += 1;",
          "15609:         for (i = 0; i < targs; i++) {",
          "15610:           guint8 flags = tvb_get_guint8(tvb, offset);",
          "15612:           proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_targ_flags, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15613:           offset += 1;",
          "15614:           proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_targ_sta, tvb, offset, 6, ENC_NA);",
          "15615:           offset += 6;",
          "15616:           proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_targ_sn, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15617:           offset += 4;",
          "15618:           if (flags & (1<<6)) {",
          "15619:             proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_targ_ext, tvb, offset, 6, ENC_NA);",
          "15620:             offset += 6;",
          "15621:           }",
          "15622:           offset += add_ff_reason_code(tree, tvb, pinfo, offset);",
          "15623:         }",
          "15624:         break;",
          "15625:       }",
          "15627:     case TAG_RANN:",
          "15628:       {",
          "15629:         offset += 2;",
          "15630:         proto_tree_add_item(tree, hf_ieee80211_rann_flags, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15631:         offset += 1;",
          "15632:         proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_hopcount, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15633:         offset += 1;",
          "15634:         proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_ttl, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15635:         offset += 1;",
          "15636:         proto_tree_add_item(tree, hf_ieee80211_rann_root_sta, tvb, offset, 6, ENC_NA);",
          "15637:         offset += 6;",
          "15638:         proto_tree_add_item(tree, hf_ieee80211_rann_sn, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15639:         offset += 4;",
          "15640:         proto_tree_add_item(tree, hf_ieee80211_rann_interval, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15641:         offset += 4;",
          "15642:         proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_metric, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15643:         offset += 4;",
          "15644:         break;",
          "15645:       }",
          "15648:       {",
          "15649:         proto_item *item;",
          "15650:         proto_tree *subtree;",
          "15651:         if (tag_len != 6)",
          "15652:         {",
          "15653:           expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 6\", tag_len);",
          "15654:             break;",
          "15655:         }",
          "15656:         offset += 2;",
          "15658:         proto_tree_add_item(tree, hf_ieee80211_mesh_channel_switch_ttl, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15659:         proto_item_append_text(ti, \" TTL: %d\", tvb_get_guint8(tvb, offset));",
          "15660:         offset += 1;",
          "15662:         item = proto_tree_add_item(tree, hf_ieee80211_mesh_channel_switch_flag, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15663:         subtree = proto_item_add_subtree(item, ett_mesh_chswitch_flag_tree);",
          "15664:         proto_tree_add_item(subtree, hf_ieee80211_mesh_chswitch_flag_initiator, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15665:         proto_tree_add_item(subtree, hf_ieee80211_mesh_chswitch_flag_txrestrict, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15666:         offset += 1;",
          "15668:         proto_tree_add_item(tree, hf_ieee80211_mesh_channel_switch_reason_code, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15669:         offset += 2;",
          "15671:         proto_tree_add_item(tree, hf_ieee80211_mesh_channel_switch_precedence_value, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15672:         offset += 2;",
          "15673:         break;",
          "15674:      }",
          "15676:     case TAG_INTERWORKING:",
          "15677:       dissect_interworking(pinfo, tree, ti, tvb, offset);",
          "15678:       break;",
          "15679:     case TAG_ADVERTISEMENT_PROTOCOL:",
          "15680:     {",
          "15681:       dissect_advertisement_protocol(pinfo, tree, tvb, offset, NULL);",
          "15684:     case TAG_QOS_MAP_SET:",
          "15685:       dissect_qos_map_set(pinfo, tree, ti, tvb, offset);",
          "15686:       break;",
          "15687:     case TAG_ROAMING_CONSORTIUM:",
          "15688:       dissect_roaming_consortium(pinfo, tree, ti, tvb, offset);",
          "15689:       break;",
          "15691:       dissect_ap_channel_report(tvb, pinfo, tree, offset + 2, tag_len, ti_len, tag_end, ti);",
          "15692:       break;",
          "15693:     case TAG_NEIGHBOR_REPORT:",
          "15694:       dissect_neighbor_report(tvb, pinfo, tree, offset + 2, tag_len, ti_len, tag_end, ti);",
          "15695:       break;",
          "15697:     case TAG_EXTENDED_CHANNEL_SWITCH_ANNOUNCEMENT:",
          "15698:     {",
          "15699:       if (tag_len != 4)",
          "15700:       {",
          "15701:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 4\", tag_len);",
          "15702:         break;",
          "15703:       }",
          "15705:       offset += 2;",
          "15707:       offset += add_ff_extended_channel_switch_announcement(tree, tvb, pinfo, offset);",
          "15709:       break;",
          "15710:     }",
          "15711:     case TAG_SUPPORTED_OPERATING_CLASSES:",
          "15712:     {",
          "15713:       guint i;",
          "15715:       if (tag_len < 2) {",
          "15716:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be >= 3\", tag_len);",
          "15717:         break;",
          "15718:       } else if (tag_len > 32) {",
          "15719:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be < 32\", tag_len);",
          "15720:         break;",
          "15721:       }",
          "15723:       offset += 2;",
          "15725:       proto_tree_add_item(tree, hf_ieee80211_tag_supported_ope_classes_current, tvb, offset, 1, ENC_NA);",
          "15727:       offset += 1;",
          "15729:       tag_data_ptr = tvb_get_ptr(tvb, offset, tag_len);",
          "15730:       for (i = 0, n = 0; (i < tag_len) && (n < SHORT_STR); i++) {",
          "15731:         ret = g_snprintf(print_buff + n, SHORT_STR - n, (i == tag_len-1)?\"%d\":\"%d, \", tag_data_ptr[i]);",
          "15732:         if (ret >= SHORT_STR - n) {",
          "15734:           break;",
          "15735:         }",
          "15736:         n += ret;",
          "15737:       }",
          "15738:       proto_tree_add_string(tree, hf_ieee80211_tag_supported_ope_classes_alternate, tvb, offset, tag_len, print_buff);",
          "15740:       break;",
          "15741:     }",
          "15742:     case TAG_RELAY_CAPABILITIES:",
          "15743:     {",
          "15744:       add_tag_relay_capabilities(pinfo, ti_len, tag_len, tree, tvb, &offset);",
          "15745:       break;",
          "15746:     }",
          "15747:     case TAG_DMG_BSS_PARAMETER_CHANGE:",
          "15748:     {",
          "15749:       gboolean size;",
          "15750:       if (tag_len != 7)",
          "15751:       {",
          "15752:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 7\", tag_len);",
          "15753:         break;",
          "15754:       }",
          "15755:       offset += 2;",
          "15756:       size = (tvb_get_guint8(tvb, offset) & 0x02) >> 1;",
          "15757:       proto_tree_add_item(tree, hf_ieee80211_tag_move, tvb, offset, 1, ENC_NA);",
          "15758:       proto_tree_add_item(tree, hf_ieee80211_tag_size, tvb, offset, 1, ENC_NA);",
          "15759:       offset += 1;",
          "15760:       proto_tree_add_item(tree, hf_ieee80211_tag_tbtt_offset, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15761:       offset += 4;",
          "15763:         proto_tree_add_item(tree, hf_ieee80211_tag_bi_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15764:       }",
          "15765:       offset += 2;",
          "15766:       break;",
          "15767:     }",
          "15768:     case TAG_DMG_CAPABILITIES:",
          "15769:     {",
          "15770:       if (tag_len != 17)",
          "15771:       {",
          "15772:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 17\", tag_len);",
          "15773:         break;",
          "15774:       }",
          "15775:       offset += 2;",
          "15776:       proto_tree_add_item(tree, hf_ieee80211_tag_dmg_capa_sta_addr, tvb, offset, 6, ENC_NA);",
          "15777:       offset += 6;",
          "15778:       proto_tree_add_item(tree, hf_ieee80211_tag_dmg_capa_aid, tvb, offset, 1, ENC_NA);",
          "15779:       offset += 1;",
          "15780:       proto_tree_add_item(tree, hf_ieee80211_tag_reverse_direction, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15781:       proto_tree_add_item(tree, hf_ieee80211_tag_hlts, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15782:       proto_tree_add_item(tree, hf_ieee80211_tag_tpc, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15783:       proto_tree_add_item(tree, hf_ieee80211_tag_spsh, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15784:       proto_tree_add_item(tree, hf_ieee80211_tag_rx_antenna, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15785:       proto_tree_add_item(tree, hf_ieee80211_tag_fast_link, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15786:       proto_tree_add_item(tree, hf_ieee80211_tag_num_sectors, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15787:       proto_tree_add_item(tree, hf_ieee80211_tag_rxss_length, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15788:       proto_tree_add_item(tree, hf_ieee80211_tag_reciprocity, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15789:       proto_tree_add_item(tree, hf_ieee80211_tag_max_ampdu_exp, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15790:       offset += 3;",
          "15791:       proto_tree_add_item(tree, hf_ieee80211_tag_min_mpdu_sapcing, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15792:       proto_tree_add_item(tree, hf_ieee80211_tag_ba_flow_control, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15793:       proto_tree_add_item(tree, hf_ieee80211_tag_max_sc_rx_mcs, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15794:       proto_tree_add_item(tree, hf_ieee80211_tag_max_ofdm_rx_mcs, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15795:       proto_tree_add_item(tree, hf_ieee80211_tag_max_sc_tx_mcs, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15796:       proto_tree_add_item(tree, hf_ieee80211_tag_max_ofdm_tx_mcs, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15797:       offset += 3;",
          "15798:       proto_tree_add_item(tree, hf_ieee80211_tag_low_power_supported, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15799:       proto_tree_add_item(tree, hf_ieee80211_tag_code_rate, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15800:       proto_tree_add_item(tree, hf_ieee80211_tag_dtp, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15801:       proto_tree_add_item(tree, hf_ieee80211_tag_appdu_supp, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15802:       proto_tree_add_item(tree, hf_ieee80211_tag_heartbeat, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15803:       proto_tree_add_item(tree, hf_ieee80211_tag_other_aid, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15804:       proto_tree_add_item(tree, hf_ieee80211_tag_pattern_recip, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15805:       proto_tree_add_item(tree, hf_ieee80211_tag_heartbeat_elapsed, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15806:       proto_tree_add_item(tree, hf_ieee80211_tag_grant_ack_supp, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15807:       proto_tree_add_item(tree, hf_ieee80211_tag_RXSSTxRate_supp, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15808:       offset += 2;",
          "15809:       proto_tree_add_item(tree, hf_ieee80211_tag_pcp_tddti, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15810:       proto_tree_add_item(tree, hf_ieee80211_tag_pcp_PSA, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15811:       proto_tree_add_item(tree, hf_ieee80211_tag_pcp_handover, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15812:       proto_tree_add_item(tree, hf_ieee80211_tag_pcp_max_assoc, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15813:       proto_tree_add_item(tree, hf_ieee80211_tag_pcp_power_src, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15814:       proto_tree_add_item(tree, hf_ieee80211_tag_pcp_decenter, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15815:       proto_tree_add_item(tree, hf_ieee80211_tag_pcp_forwarding, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15816:       proto_tree_add_item(tree, hf_ieee80211_tag_pcp_center, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15817:       offset += 2;",
          "15818:       break;",
          "15819:     }",
          "15820:     case TAG_DMG_OPERATION:",
          "15821:     {",
          "15822:       if (tag_len != 10)",
          "15823:       {",
          "15824:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 10\", tag_len);",
          "15825:         break;",
          "15826:       }",
          "15827:       offset += 2;",
          "15828:       proto_tree_add_item(tree, hf_ieee80211_tag_pcp_tddti, tvb, offset, 1, ENC_NA);",
          "15829:       proto_tree_add_item(tree, hf_ieee80211_tag_pcp_PSA, tvb, offset, 1, ENC_NA);",
          "15830:       proto_tree_add_item(tree, hf_ieee80211_tag_pcp_handover, tvb, offset, 1, ENC_NA);",
          "15831:       offset += 2;",
          "15832:       proto_tree_add_item(tree, hf_ieee80211_tag_PSRSI, tvb, offset, 1, ENC_NA);",
          "15833:       offset += 1;",
          "15834:       proto_tree_add_item(tree, hf_ieee80211_tag_min_BHI_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15835:       offset += 2;",
          "15836:       proto_tree_add_item(tree, hf_ieee80211_tag_brdct_sta_info_dur, tvb, offset, 1, ENC_NA);",
          "15837:       offset += 1;",
          "15838:       proto_tree_add_item(tree, hf_ieee80211_tag_assoc_resp_confirm_time, tvb, offset, 1, ENC_NA);",
          "15839:       offset += 1;",
          "15840:       proto_tree_add_item(tree, hf_ieee80211_tag_min_pp_duration, tvb, offset, 1, ENC_NA);",
          "15841:       offset += 1;",
          "15842:       proto_tree_add_item(tree, hf_ieee80211_tag_SP_idle_timeout, tvb, offset, 1, ENC_NA);",
          "15843:       offset += 1;",
          "15844:       proto_tree_add_item(tree, hf_ieee80211_tag_max_lost_beacons, tvb, offset, 1, ENC_NA);",
          "15845:       offset += 1;",
          "15846:       break;",
          "15847:     }",
          "15848:     case TAG_ANTENNA_SECTOR_ID:",
          "15849:     {",
          "15850:       if (tag_len != 4)",
          "15851:       {",
          "15852:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 4\", tag_len);",
          "15853:         break;",
          "15854:       }",
          "15855:       offset += 2;",
          "15856:       proto_tree_add_item(tree, hf_ieee80211_tag_type, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15857:       proto_tree_add_item(tree, hf_ieee80211_tag_tap1, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15858:       proto_tree_add_item(tree, hf_ieee80211_tag_state1, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15859:       proto_tree_add_item(tree, hf_ieee80211_tag_tap2, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15860:       proto_tree_add_item(tree, hf_ieee80211_tag_state2, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15861:       offset += 4;",
          "15862:       break;",
          "15863:     }",
          "15864:     case TAG_EXTENDED_SCHEDULE:",
          "15865:     {",
          "15866:       guint32 i = 0;",
          "15867:       gboolean isGrant;",
          "15868:       proto_tree * alloc_tree;",
          "15869:       if ((tag_len%15) != 0)",
          "15870:       {",
          "15871:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be N*15 where 0<=N<=17\", tag_len);",
          "15872:         break;",
          "15873:       }",
          "15874:       offset += 2;",
          "15875:       isGrant = ((ftype==CTRL_GRANT)||(ftype==CTRL_GRANT_ACK));",
          "15876:       for(i=0; i < tag_len; i+=15) {",
          "15877:         alloc_tree = proto_tree_add_subtree_format(tree, tvb, offset, 15, ett_allocation_tree, NULL, \"Allocation %d\", i/15);",
          "15878:         proto_tree_add_item(alloc_tree, hf_ieee80211_tag_allocation_id, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15879:         proto_tree_add_item(alloc_tree, hf_ieee80211_tag_allocation_type, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15880:         proto_tree_add_item(alloc_tree, hf_ieee80211_tag_pseudo_static, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15881:         proto_tree_add_item(alloc_tree, hf_ieee80211_tag_truncatable, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15882:         proto_tree_add_item(alloc_tree, hf_ieee80211_tag_extendable, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15883:         proto_tree_add_item(alloc_tree, hf_ieee80211_tag_pcp_active, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15884:         proto_tree_add_item(alloc_tree, hf_ieee80211_tag_lp_sc_used, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15885:         offset += 2;",
          "15886:         offset += add_ff_beamforming_ctrl(alloc_tree, tvb, pinfo, offset, isGrant);",
          "15887:         proto_tree_add_item(alloc_tree, hf_ieee80211_tag_src_aid, tvb, offset, 1, ENC_NA);",
          "15888:         offset += 1;",
          "15889:         proto_tree_add_item(alloc_tree, hf_ieee80211_tag_dest_aid, tvb, offset, 1, ENC_NA);",
          "15890:         offset += 1;",
          "15891:         proto_tree_add_item(alloc_tree, hf_ieee80211_tag_alloc_start, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15892:         offset += 4;",
          "15893:         proto_tree_add_item(alloc_tree, hf_ieee80211_tag_alloc_block_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15894:         offset += 2;",
          "15895:         proto_tree_add_item(alloc_tree, hf_ieee80211_tag_num_blocks, tvb, offset, 1, ENC_NA);",
          "15896:         offset += 1;",
          "15897:         proto_tree_add_item(alloc_tree, hf_ieee80211_tag_alloc_block_period, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15898:         offset += 2;",
          "15899:       }",
          "15900:       break;",
          "15901:     }",
          "15902:     case TAG_STA_AVAILABILITY:",
          "15903:     {",
          "15904:       guint32 i = 0;",
          "15905:       proto_tree * sta_info_tree;",
          "15906:       if ((tag_len%2) != 0)",
          "15907:       {",
          "15908:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be N*2 where N>=0\", tag_len);",
          "15909:         break;",
          "15910:       }",
          "15911:       offset += 2;",
          "15912:       for(i=0; i < tag_len; i+=2) {",
          "15913:         sta_info_tree = proto_tree_add_subtree_format(tree, tvb, offset, 2, ett_sta_info, NULL, \"STA Info %d\", i/2);",
          "15914:         proto_tree_add_item(sta_info_tree, hf_ieee80211_tag_aid, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15915:         proto_tree_add_item(sta_info_tree, hf_ieee80211_tag_cbap, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15916:         proto_tree_add_item(sta_info_tree, hf_ieee80211_tag_pp_avail, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15917:         offset += 2;",
          "15918:       }",
          "15919:       break;",
          "15920:     }",
          "15921:     case TAG_NEXT_DMG_ATI:",
          "15922:     {",
          "15923:       if (tag_len != 6)",
          "15924:       {",
          "15925:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 6\", tag_len);",
          "15926:         break;",
          "15927:       }",
          "15928:       offset += 2;",
          "15929:       proto_tree_add_item(tree, hf_ieee80211_tag_next_ati_start_time, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15930:       offset += 4;",
          "15931:       proto_tree_add_item(tree, hf_ieee80211_tag_next_ati_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15932:       offset += 2;",
          "15933:       break;",
          "15934:     }",
          "15935:     case TAG_NEXTPCP_LIST:",
          "15936:     {",
          "15937:       guint32 i = 0;",
          "15938:       if (tag_len < 1)",
          "15939:       {",
          "15940:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be at least 1\", tag_len);",
          "15941:         break;",
          "15942:       }",
          "15943:       offset += 2;",
          "15944:       proto_tree_add_item(tree, hf_ieee80211_tag_nextpcp_token, tvb, offset, 1, ENC_NA);",
          "15945:       offset += 1;",
          "15946:       for(i=0; i < tag_len-1; i+=1) {",
          "15947:         proto_tree_add_item(tree, hf_ieee80211_tag_nextpcp_list, tvb, offset, 1, ENC_NA);",
          "15948:         offset += 1;",
          "15949:       }",
          "15950:       break;",
          "15951:     }",
          "15952:     case TAG_PCP_HANDOVER:",
          "15953:     {",
          "15954:       if (tag_len != 13)",
          "15955:       {",
          "15956:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be 13\", tag_len);",
          "15957:         break;",
          "15958:       }",
          "15959:       offset += 2;",
          "15960:       proto_tree_add_item(tree, hf_ieee80211_tag_old_bssid, tvb, offset, 6, ENC_NA);",
          "15961:       offset += 6;",
          "15962:       proto_tree_add_item(tree, hf_ieee80211_tag_new_pcp_addr, tvb, offset, 6, ENC_NA);",
          "15963:       offset += 6;",
          "15964:       proto_tree_add_item(tree, hf_ieee80211_tag_reamaining_BI, tvb, offset, 1, ENC_NA);",
          "15965:       offset += 1;",
          "15966:       break;",
          "15967:     }",
          "15968:     case TAG_BEAMLINK_MAINTENANCE:",
          "15969:     {",
          "15970:       if (tag_len != 1)",
          "15971:       {",
          "15972:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be 1\", tag_len);",
          "15973:         break;",
          "15974:       }",
          "15975:       offset += 2;",
          "15976:       offset += add_ff_beamformed_link(tree, tvb, pinfo, offset);",
          "15977:       break;",
          "15978:     }",
          "15979:     case TAG_QUIET_PERIOD_RES:",
          "15980:     {",
          "15981:       if (tag_len != 10)",
          "15982:       {",
          "15983:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be 10\", tag_len);",
          "15984:         break;",
          "15985:       }",
          "15986:       offset += 2;",
          "15987:       proto_tree_add_item(tree, hf_ieee80211_tag_request_token, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15988:       offset += 2;",
          "15989:       proto_tree_add_item(tree, hf_ieee80211_tag_bssid, tvb, offset, 6, ENC_NA);",
          "15990:       offset += 6;",
          "15991:       offset += add_ff_sta_address(tree, tvb, pinfo, offset);",
          "15992:       break;",
          "15993:     }",
          "15994:     case TAG_RELAY_TRANSFER_PARAM:",
          "15995:     {",
          "15996:       if (tag_len != 8)",
          "15997:       {",
          "15998:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be 8\", tag_len);",
          "15999:         break;",
          "16000:       }",
          "16001:       offset += 2;",
          "16002:       proto_tree_add_item(tree, hf_ieee80211_tag_duplex_relay, tvb, offset, 1, ENC_NA);",
          "16003:       proto_tree_add_item(tree, hf_ieee80211_tag_cooperation_relay, tvb, offset, 1, ENC_NA);",
          "16004:       proto_tree_add_item(tree, hf_ieee80211_tag_tx_mode, tvb, offset, 1, ENC_NA);",
          "16005:       proto_tree_add_item(tree, hf_ieee80211_tag_link_change_interval, tvb, offset+1, 1, ENC_NA);",
          "16006:       proto_tree_add_item(tree, hf_ieee80211_tag_data_sensing_time, tvb, offset+2, 1, ENC_NA);",
          "16007:       proto_tree_add_item(tree, hf_ieee80211_tag_first_period, tvb, offset+3, 2, ENC_LITTLE_ENDIAN);",
          "16008:       proto_tree_add_item(tree, hf_ieee80211_tag_second_period, tvb, offset+5, 2, ENC_LITTLE_ENDIAN);",
          "16009:       offset += 8;",
          "16010:       break;",
          "16011:     }",
          "16012:     case TAG_DMG_BEAM_REFINEMENT:",
          "16013:     {",
          "16014:       if (tag_len != 5)",
          "16015:       {",
          "16016:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be 5\", tag_len);",
          "16017:         break;",
          "16018:       }",
          "16019:       offset += 2;",
          "16020:       proto_tree_add_item(tree, hf_ieee80211_tag_initiator, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16021:       proto_tree_add_item(tree, hf_ieee80211_tag_tx_train_res, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16022:       proto_tree_add_item(tree, hf_ieee80211_tag_rx_train_res, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16023:       proto_tree_add_item(tree, hf_ieee80211_tag_tx_trn_ok, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16024:       proto_tree_add_item(tree, hf_ieee80211_tag_txss_fbck_req, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16025:       proto_tree_add_item(tree, hf_ieee80211_tag_bs_fbck, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16026:       proto_tree_add_item(tree, hf_ieee80211_tag_bs_fbck_antenna_id, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16027:       proto_tree_add_item(tree, hf_ieee80211_tag_snr_requested, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16028:       proto_tree_add_item(tree, hf_ieee80211_tag_channel_measurement_requested, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16029:       proto_tree_add_item(tree, hf_ieee80211_tag_number_of_taps_requested, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16030:       proto_tree_add_item(tree, hf_ieee80211_tag_sector_id_order_req, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16031:       proto_tree_add_item(tree, hf_ieee80211_tag_snr_present, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16032:       proto_tree_add_item(tree, hf_ieee80211_tag_channel_measurement_present, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16033:       proto_tree_add_item(tree, hf_ieee80211_tag_tap_delay_present, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16034:       proto_tree_add_item(tree, hf_ieee80211_tag_number_of_taps_present, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16035:       proto_tree_add_item(tree, hf_ieee80211_tag_number_of_measurement, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16036:       proto_tree_add_item(tree, hf_ieee80211_tag_sector_id_order_present, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16037:       proto_tree_add_item(tree, hf_ieee80211_tag_number_of_beams, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16038:       proto_tree_add_item(tree, hf_ieee80211_tag_mid_extension, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16039:       proto_tree_add_item(tree, hf_ieee80211_tag_capability_request, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16040:       proto_tree_add_item(tree, hf_ieee80211_tag_beam_refine_reserved, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16041:       offset += 5;",
          "16042:       break;",
          "16043:     }",
          "16044:     case TAG_WAKEUP_SCHEDULE_AD:",
          "16045:     {",
          "16046:       if (tag_len != 8)",
          "16047:       {",
          "16048:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be 8\", tag_len);",
          "16049:         break;",
          "16050:       }",
          "16051:       offset += 2;",
          "16052:       proto_tree_add_item(tree, hf_ieee80211_tag_bi_start_time, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "16053:       offset += 4;",
          "16054:       proto_tree_add_item(tree, hf_ieee80211_tag_sleep_cycle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "16055:       offset += 2;",
          "16056:       proto_tree_add_item(tree, hf_ieee80211_tag_num_awake_bis, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "16057:       offset += 2;",
          "16058:       break;",
          "16059:     }",
          "16060:     case TAG_DMG_TSPEC:",
          "16061:     {",
          "16062:       gboolean isGrant;",
          "16063:       int num_constraints;",
          "16064:       if (tag_len < 14)",
          "16065:       {",
          "16066:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be at least 14\", tag_len);",
          "16067:         break;",
          "16068:       }",
          "16069:       offset += 2;",
          "16070:       proto_tree_add_item(tree, hf_ieee80211_tag_tspec_allocation_id, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16071:       proto_tree_add_item(tree, hf_ieee80211_tag_tspec_allocation_type, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16072:       proto_tree_add_item(tree, hf_ieee80211_tag_tspec_allocation_format, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16073:       proto_tree_add_item(tree, hf_ieee80211_tag_tspec_pseudo_static, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16074:       proto_tree_add_item(tree, hf_ieee80211_tag_tspec_truncatable, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16075:       proto_tree_add_item(tree, hf_ieee80211_tag_tspec_extendable, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16076:       proto_tree_add_item(tree, hf_ieee80211_tag_tspec_lp_sc_used, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16077:       proto_tree_add_item(tree, hf_ieee80211_tag_tspec_up, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16078:       proto_tree_add_item(tree, hf_ieee80211_tag_tspec_dest_aid, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16079:       offset += 3;",
          "16080:       isGrant = ((ftype==CTRL_GRANT)||(ftype==CTRL_GRANT_ACK));",
          "16081:       offset += add_ff_beamforming_ctrl(tree, tvb, pinfo, 2, isGrant);",
          "16082:       proto_tree_add_item(tree, hf_ieee80211_tag_tspec_allocation_period, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "16083:       offset += 2;",
          "16084:       proto_tree_add_item(tree, hf_ieee80211_tag_tspec_min_allocation, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "16085:       offset += 2;",
          "16086:       proto_tree_add_item(tree, hf_ieee80211_tag_tspec_max_allocation, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "16087:       offset += 2;",
          "16088:       proto_tree_add_item(tree, hf_ieee80211_tag_tspec_min_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "16089:       offset += 2;",
          "16090:       num_constraints = tvb_get_guint8(tvb, offset);",
          "16091:       proto_tree_add_item(tree, hf_ieee80211_tag_tspec_num_of_constraints, tvb, offset, 1, ENC_NA);",
          "16092:       offset += 1;",
          "16093:       while(num_constraints > 0) {",
          "16094:         proto_tree_add_item(tree, hf_ieee80211_tag_tspec_tsconst_start_time, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "16095:         offset += 4;",
          "16096:         proto_tree_add_item(tree, hf_ieee80211_tag_tspec_tsconst_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "16097:         offset += 2;",
          "16098:         proto_tree_add_item(tree, hf_ieee80211_tag_tspec_tsconst_period, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "16099:         offset += 2;",
          "16100:         proto_tree_add_item(tree, hf_ieee80211_tag_tspec_tsconst_interferer_mac, tvb, offset, 2, ENC_NA);",
          "16101:         offset += 6;",
          "16102:         num_constraints--;",
          "16103:       }",
          "16104:       break;",
          "16105:     }",
          "16106:     case TAG_CHANNEL_MEASURMENT_FB:",
          "16107:     {",
          "16108:       int num_measurement;",
          "16109:       if (tag_len%5 != 0)",
          "16110:       {",
          "16111:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be multiple of 5\", tag_len);",
          "16112:         break;",
          "16113:       }",
          "16114:       num_measurement = tvb_get_guint8(tvb, offset+1);",
          "16115:       offset += 2;",
          "16116:       while(num_measurement > 0) {",
          "16117:         proto_tree_add_item(tree, hf_ieee80211_ff_snr, tvb, offset, 1, ENC_NA);",
          "16118:         offset += 1;",
          "16119:         proto_tree_add_item(tree, hf_ieee80211_tag_channel_measurement_feedback_realtive_I, tvb, offset, 1, ENC_NA);",
          "16120:         offset += 1;",
          "16121:         proto_tree_add_item(tree, hf_ieee80211_tag_channel_measurement_feedback_realtive_Q, tvb, offset, 1, ENC_NA);",
          "16122:         offset += 1;",
          "16123:         proto_tree_add_item(tree, hf_ieee80211_tag_channel_measurement_feedback_tap_delay, tvb, offset, 1, ENC_NA);",
          "16124:         offset += 1;",
          "16125:         proto_tree_add_item(tree, hf_ieee80211_tag_channel_measurement_feedback_sector_id, tvb, offset, 1, ENC_NA);",
          "16126:         proto_tree_add_item(tree, hf_ieee80211_tag_channel_measurement_feedback_antenna_id, tvb, offset, 1, ENC_NA);",
          "16127:         offset += 1;",
          "16128:         num_measurement--;",
          "16129:       }",
          "16130:       break;",
          "16131:     }",
          "16132:     case TAG_AWAKE_WINDOW:",
          "16133:     {",
          "16134:       if (tag_len != 2)",
          "16135:       {",
          "16136:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be 2\", tag_len);",
          "16137:         break;",
          "16138:       }",
          "16139:       offset += 2;",
          "16140:       proto_tree_add_item(tree, hf_ieee80211_tag_awake_window, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "16141:       offset += 2;",
          "16142:       break;",
          "16143:     }",
          "16144:     case TAG_ADDBA_EXT:",
          "16145:     {",
          "16146:       if (tag_len != 1)",
          "16147:       {",
          "16148:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be 1\", tag_len);",
          "16149:         break;",
          "16150:       }",
          "16151:       offset += 2;",
          "16152:       proto_tree_add_item(tree, hf_ieee80211_tag_addba_ext_no_frag, tvb, offset, 1, ENC_NA);",
          "16153:       offset += 1;",
          "16154:       break;",
          "16155:     }",
          "16156:     case TAG_MULTI_BAND:",
          "16157:     {",
          "16158:       gboolean chiper_present, addr_present;",
          "16159:       if (tag_len < 22)",
          "16160:       {",
          "16161:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be at least 22\", tag_len);",
          "16162:         break;",
          "16163:       }",
          "16164:       offset += 2;",
          "16165:       chiper_present = (tvb_get_letohs(tvb, offset) & 0x08) >> 3;",
          "16166:       addr_present = (tvb_get_letohs(tvb, offset) & 0x10) >> 4;",
          "16167:       proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_ctrl_sta_role, tvb, offset, 1, ENC_NA);",
          "16168:       proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_ctrl_addr_present, tvb, offset, 1, ENC_NA);",
          "16169:       proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_ctrl_cipher_present, tvb, offset, 1, ENC_NA);",
          "16170:       offset += 1;",
          "16171:       offset += add_ff_band_id(tree, tvb, pinfo, 1);",
          "16172:       proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_oper_class, tvb, offset, 1, ENC_NA);",
          "16173:       offset += 1;",
          "16174:       proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_channel_number, tvb, offset, 1, ENC_NA);",
          "16175:       offset += 1;",
          "16176:       proto_tree_add_item(tree, hf_ieee80211_tag_bssid, tvb, offset, 6, ENC_NA);",
          "16177:       offset += 6;",
          "16178:       offset += add_ff_beacon_interval(tree, tvb, pinfo, 2);",
          "16179:       proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_tsf_offset, tvb, offset, 8, ENC_LITTLE_ENDIAN);",
          "16180:       offset += 8;",
          "16181:       proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_conn_ap, tvb, offset, 1, ENC_NA);",
          "16182:       proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_conn_pcp, tvb, offset, 1, ENC_NA);",
          "16183:       proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_conn_dls, tvb, offset, 1, ENC_NA);",
          "16184:       proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_conn_tdls, tvb, offset, 1, ENC_NA);",
          "16185:       proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_conn_ibss, tvb, offset, 1, ENC_NA);",
          "16186:       offset += 1;",
          "16187:       proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_fst_timeout, tvb, offset, 1, ENC_NA);",
          "16188:       offset += 1;",
          "16189:       if(addr_present)",
          "16190:       {",
          "16191:         proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_sta_mac, tvb, offset, 6, ENC_NA);",
          "16192:         offset += 6;",
          "16193:       }",
          "16194:       if(chiper_present)",
          "16195:       {",
          "16196:         proto_item *rsn_pcs_count, *rsn_pcs_item, *rsn_sub_pcs_item;",
          "16197:         proto_tree *rsn_pcs_tree, *rsn_sub_pcs_tree;",
          "16198:         gint ii;",
          "16199:         guint16     pcs_count;",
          "16200:         rsn_pcs_count = proto_tree_add_item(tree, hf_ieee80211_rsn_pcs_count, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "16201:         pcs_count = tvb_get_letohs(tvb, offset);",
          "16202:         offset += 2;",
          "16204:         if (offset + (pcs_count * 4) > tag_end)",
          "16205:         {",
          "16206:           expert_add_info_format(pinfo, rsn_pcs_count, &ei_ieee80211_rsn_pcs_count,",
          "16207:           \"Pairwise Cipher Suite Count too large, 4*%u > %d\", pcs_count, tag_end - offset);",
          "16208:           pcs_count = (tag_end - offset) / 4;",
          "16209:         }",
          "16211:         rsn_pcs_item = proto_tree_add_item(tree, hf_ieee80211_rsn_pcs_list, tvb, offset, pcs_count * 4, ENC_NA);",
          "16212:         rsn_pcs_tree = proto_item_add_subtree(rsn_pcs_item, ett_rsn_pcs_tree);",
          "16213:         for (ii = 0; ii < pcs_count; ii++)",
          "16214:         {",
          "16215:           rsn_sub_pcs_item = proto_tree_add_item(rsn_pcs_tree, hf_ieee80211_rsn_pcs, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "16216:           rsn_sub_pcs_tree = proto_item_add_subtree(rsn_sub_pcs_item, ett_rsn_sub_pcs_tree);",
          "16217:           proto_tree_add_item(rsn_sub_pcs_tree, hf_ieee80211_rsn_pcs_oui, tvb, offset, 3, ENC_BIG_ENDIAN);",
          "16220:           if (tvb_get_ntoh24(tvb, offset) == OUI_RSN)",
          "16221:           {",
          "16222:             proto_tree_add_item(rsn_sub_pcs_tree, hf_ieee80211_rsn_pcs_80211_type, tvb, offset+3, 1, ENC_LITTLE_ENDIAN);",
          "16223:             proto_item_append_text(rsn_pcs_item, \" %s\", rsn_pcs_return(tvb_get_ntohl(tvb, offset)));",
          "16224:           } else {",
          "16225:             proto_tree_add_item(rsn_sub_pcs_tree, hf_ieee80211_rsn_pcs_type, tvb, offset+3, 1, ENC_LITTLE_ENDIAN);",
          "16226:           }",
          "16227:           offset += 4;",
          "16228:         }",
          "16229:       }",
          "16230:       break;",
          "16231:     }",
          "16232:     case TAG_DMG_LINK_MARGIN:",
          "16234:       if (tag_len != 8)",
          "16235:       {",
          "16236:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be 8\", tag_len);",
          "16237:         break;",
          "16238:       }",
          "16239:       offset += 2;",
          "16240:       proto_tree_add_item(tree, hf_ieee80211_tag_activity, tvb, offset, 1, ENC_NA);",
          "16241:       offset += 1;",
          "16242:       proto_tree_add_item(tree, hf_ieee80211_tag_dmg_link_adapt_mcs, tvb, offset, 1, ENC_NA);",
          "16243:       offset += 1;",
          "16244:       proto_tree_add_item(tree, hf_ieee80211_tag_dmg_link_adapt_link_margin, tvb, offset, 1, ENC_NA);",
          "16245:       offset += 1;",
          "16246:       proto_tree_add_item(tree, hf_ieee80211_ff_snr, tvb, offset, 1, ENC_NA);",
          "16247:       offset += 1;",
          "16248:       proto_tree_add_item(tree, hf_ieee80211_tag_ref_timestamp, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16249:       offset += 4;",
          "16250:       break;",
          "16252:     case TAG_DMG_LINK_ADAPTION_ACK:",
          "16254:       if (tag_len != 5)",
          "16256:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be 5\", tag_len);",
          "16257:         break;",
          "16259:       offset += 2;",
          "16260:       proto_tree_add_item(tree, hf_ieee80211_tag_activity, tvb, offset, 1, ENC_NA);",
          "16261:       offset += 1;",
          "16262:       proto_tree_add_item(tree, hf_ieee80211_tag_ref_timestamp, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16264:       break;",
          "16265:     }",
          "16266:     case TAG_SWITCHING_STREAM:",
          "16267:     {",
          "16268:       int param_num;",
          "16269:       if (tag_len < 4)",
          "16270:       {",
          "16271:         expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be at least 4\", tag_len);",
          "16272:         break;",
          "16273:       }",
          "16274:       offset += 2;",
          "16275:       offset += add_ff_band_id(tree, tvb, pinfo, 1);",
          "16276:       offset += add_ff_band_id(tree, tvb, pinfo, 1);",
          "16277:       proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_non_qos, tvb, offset, 1, ENC_NA);",
          "16278:       offset += 1;",
          "16279:       param_num = tvb_get_letohs(tvb, offset);",
          "16280:       proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_param_num, tvb, offset, 1, ENC_NA);",
          "16281:       offset += 1;",
          "16282:       while(param_num > 0)",
          "16283:       {",
          "16284:         proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_old_tid, tvb, offset, 1, ENC_NA);",
          "16285:         proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_old_direction, tvb, offset, 1, ENC_NA);",
          "16286:         proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_new_tid, tvb, offset, 1, ENC_NA);",
          "16287:         proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_new_direction, tvb, offset, 1, ENC_NA);",
          "16288:         proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_new_valid_id, tvb, offset, 1, ENC_NA);",
          "16289:         proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_llt_type, tvb, offset, 1, ENC_NA);",
          "16290:         param_num--;",
          "16291:         offset += 2;",
          "16292:       }",
          "16293:       break;",
          "16295:     default:",
          "16296:       proto_tree_add_item(tree, hf_ieee80211_tag_data, tvb, offset + 1 + 1, tag_len, ENC_NA);",
          "16297:       expert_add_info_format(pinfo, ti_tag, &ei_ieee80211_tag_data,",
          "16298:                              \"Dissector for 802.11 IE Tag\"",
          "16299:                              \" (%s) code not implemented, Contact\"",
          "16300:                              \" Wireshark developers if you want this supported\", val_to_str_ext(tag_no,",
          "16301:                                             &tag_num_vals_ext, \"(%d)\"));",
          "16302:       proto_item_append_text(ti, \": Undecoded\");",
          "16303:       break;",
          "16305:   if (offset < tag_end) {",
          "16309: end_of_tag:",
          "16310:   return tag_len + 1 + 1;",
          "",
          "[Added Lines]",
          "14059:         return tag_len + 1 + 1;",
          "14063:   tag_tvb = tvb_new_subset_length(tvb, offset+2, tag_len);",
          "14064:   field_data.sanity_check = association_sanity_check;",
          "14065:   field_data.ftype = ftype;",
          "14066:   field_data.isDMG = isDMG;",
          "14067:   field_data.item_tag = ti;",
          "14068:   field_data.item_tag_length = ti_len;",
          "14069:   if (!dissector_try_uint_new(tagged_field_table, tag_no, tag_tvb, pinfo, tree, FALSE, &field_data))",
          "14070:   {",
          "14071:       proto_tree_add_item(tree, hf_ieee80211_tag_data, tvb, offset + 1 + 1, tag_len, ENC_NA);",
          "14072:       expert_add_info_format(pinfo, ti_tag, &ei_ieee80211_tag_data,",
          "14073:                              \"Dissector for 802.11 IE Tag\"",
          "14074:                              \" (%s) code not implemented, Contact\"",
          "14075:                              \" Wireshark developers if you want this supported\", val_to_str_ext(tag_no,",
          "14076:                                             &tag_num_vals_ext, \"(%d)\"));",
          "14077:       proto_item_append_text(ti, \": Undecoded\");",
          "14078:   }",
          "14080:   return tag_len + 1 + 1;",
          "14081: }",
          "14084: static int",
          "14085: ieee80211_tag_request(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void* data _U_)",
          "14086: {",
          "14087:   int tag_len = tvb_reported_length(tvb);",
          "14088:   int offset = 0;",
          "14090:   while (offset < tag_len)",
          "14091:   {",
          "14092:     proto_tree_add_item(tree, hf_ieee80211_tag_request, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14093:     offset += 1;",
          "14094:   }",
          "14095:   return ((tag_len > 0) ? tag_len : 1);",
          "14096: }",
          "14100: static int",
          "14101: ieee80211_tag_qbss_load(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "14102: {",
          "14103:   int tag_len = tvb_reported_length(tvb);",
          "14104:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "14105:   int offset = 0;",
          "14107:   if ((tag_len < 4) || (tag_len > 5))",
          "14108:   {",
          "14109:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 4 or 5\", tag_len);",
          "14110:     return tvb_captured_length(tvb);",
          "14111:   }",
          "14113:   if (tag_len == 4)",
          "14114:   {",
          "14116:     proto_item_append_text(field_data->item_tag, \" Cisco QBSS Version 1 - non CCA\");",
          "14119:     proto_tree_add_uint(tree, hf_ieee80211_qbss_version, tvb, offset, tag_len, 1);",
          "14120:     proto_tree_add_item(tree, hf_ieee80211_qbss_scount, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14121:     proto_tree_add_item(tree, hf_ieee80211_qbss_cu, tvb, offset + 2, 1, ENC_LITTLE_ENDIAN);",
          "14122:     proto_tree_add_item(tree, hf_ieee80211_qbss_adc, tvb, offset + 3, 1, ENC_LITTLE_ENDIAN);",
          "14123:   }",
          "14124:   else if (tag_len == 5)",
          "14125:   {",
          "14126:     proto_item *base_item;",
          "14129:     proto_item_append_text(field_data->item_tag, \" 802.11e CCA Version\");",
          "14132:     proto_tree_add_uint(tree, hf_ieee80211_qbss_version, tvb, offset, tag_len, 2);",
          "14133:     proto_tree_add_item(tree, hf_ieee80211_qbss_scount, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14134:     base_item = proto_tree_add_item(tree, hf_ieee80211_qbss_cu, tvb, offset + 2, 1, ENC_LITTLE_ENDIAN);",
          "14135:     proto_item_append_text(base_item, \" (%d%%)\", 100*tvb_get_guint8(tvb, offset + 2)/255);",
          "14136:     base_item = proto_tree_add_item(tree, hf_ieee80211_qbss_adc, tvb, offset + 3, 2, ENC_LITTLE_ENDIAN);",
          "14137:     proto_item_append_text(base_item, \" (%d us/s)\", tvb_get_letohs(tvb, offset + 3)*32);",
          "14138:   }",
          "14140:   return tvb_captured_length(tvb);",
          "14141: }",
          "14145: static int",
          "14146: ieee80211_tag_edca_param_set(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "14147: {",
          "14148:   int offset = 0;",
          "14149:   offset += add_ff_qos_info_ap(tree, tvb, pinfo, offset);",
          "14155:   return tvb_captured_length(tvb);",
          "14156: }",
          "14160: static int",
          "14161: ieee80211_tag_tspec(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "14162: {",
          "14163:   int tag_len = tvb_reported_length(tvb);",
          "14164:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "14165:   int offset = 0;",
          "14167:   if (field_data->isDMG == FALSE && tag_len != 55)",
          "14168:   {",
          "14169:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 55\", tag_len);",
          "14170:     return tvb_captured_length(tvb);",
          "14171:   }",
          "14172:   if (field_data->isDMG == TRUE && tag_len != 57)",
          "14173:   {",
          "14174:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 57\", tag_len);",
          "14175:     return tvb_captured_length(tvb);",
          "14176:   }",
          "14178:   add_ff_qos_ts_info(tree, tvb, pinfo, offset);",
          "14179:   offset += 3;",
          "14181:   proto_tree_add_item(tree, hf_ieee80211_tspec_nor_msdu, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14182:   offset += 2;",
          "14184:   proto_tree_add_item(tree, hf_ieee80211_tspec_max_msdu, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14185:   offset += 2;",
          "14187:   proto_tree_add_item(tree, hf_ieee80211_tspec_min_srv, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14188:   offset += 4;",
          "14190:   proto_tree_add_item(tree, hf_ieee80211_tspec_max_srv, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14191:   offset += 4;",
          "14193:   proto_tree_add_item(tree, hf_ieee80211_tspec_inact_int, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14194:   offset += 4;",
          "14196:   proto_tree_add_item(tree, hf_ieee80211_tspec_susp_int, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14197:   offset += 4;",
          "14199:   proto_tree_add_item(tree, hf_ieee80211_tspec_srv_start, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14200:   offset += 4;",
          "14202:   proto_tree_add_item(tree, hf_ieee80211_tspec_min_data, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14203:   offset += 4;",
          "14205:   proto_tree_add_item(tree, hf_ieee80211_tspec_mean_data, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14206:   offset += 4;",
          "14208:   proto_tree_add_item(tree, hf_ieee80211_tspec_peak_data, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14209:   offset += 4;",
          "14211:   proto_tree_add_item(tree, hf_ieee80211_tspec_burst_size, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14212:   offset += 4;",
          "14214:   proto_tree_add_item(tree, hf_ieee80211_tspec_delay_bound, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14215:   offset += 4;",
          "14217:   proto_tree_add_item(tree, hf_ieee80211_tspec_min_phy, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14218:   offset += 4;",
          "14220:   proto_tree_add_item(tree, hf_ieee80211_tspec_surplus, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14221:   offset += 2;",
          "14223:   proto_tree_add_item(tree, hf_ieee80211_tspec_medium, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14224:   offset += 2;",
          "14226:   if(field_data->isDMG == TRUE) {",
          "14227:     proto_tree_add_item(tree, hf_ieee80211_tspec_dmg, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14229:   }",
          "14231:   return tvb_captured_length(tvb);",
          "14232: }",
          "14235: static int",
          "14236: ieee80211_tag_tclas(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "14237: {",
          "14238:   int tag_len = tvb_reported_length(tvb);",
          "14239:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "14240:   int offset = 0;",
          "14241:   guint8 type;",
          "14242:   guint8 version;",
          "14243:   proto_item *class_mask;",
          "14244:   proto_tree *mask_tree;",
          "14245:   if (tag_len < 6)",
          "14246:   {",
          "14247:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag length %u too short, must be >= 6\", tag_len);",
          "14248:     return 1;",
          "14249:   }",
          "14251:   proto_tree_add_item(tree, hf_ieee80211_tclas_up, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14252:   offset += 1;",
          "14254:   type = tvb_get_guint8(tvb, offset);",
          "14255:   proto_tree_add_item(tree, hf_ieee80211_tclas_class_type, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14256:   offset += 1;",
          "14258:   class_mask = proto_tree_add_item(tree, hf_ieee80211_tclas_class_mask,",
          "14260:   offset += 1;",
          "14262:   switch (type)",
          "14263:   {",
          "14264:   case 0:",
          "14265:     offset--;",
          "14266:     mask_tree = proto_item_add_subtree(class_mask, ett_tag_tclas_mask_tree);",
          "14267:     proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask0_src_addr,",
          "14269:     proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask0_dst_addr,",
          "14271:     proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask0_type,",
          "14273:     offset++;",
          "14275:     proto_tree_add_item(tree, hf_ieee80211_tclas_src_mac_addr, tvb, offset, 6, ENC_NA);",
          "14276:     offset += 6;",
          "14278:     proto_tree_add_item(tree, hf_ieee80211_tclas_dst_mac_addr, tvb, offset, 6, ENC_NA);",
          "14279:     offset += 6;",
          "14281:     proto_tree_add_item(tree, hf_ieee80211_tclas_ether_type, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14283:     break;",
          "14285:   case 1:",
          "14286:     version = tvb_get_guint8(tvb, offset);",
          "14287:     offset--;",
          "14289:     mask_tree = proto_item_add_subtree(class_mask, ett_tag_tclas_mask_tree);",
          "14290:     proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask1_ver,",
          "14291:                             tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14292:     proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask1_src_ip,",
          "14293:                             tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14294:     proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask1_dst_ip,",
          "14295:                             tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14296:     proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask1_src_port,",
          "14297:                             tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14298:     proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask1_dst_port,",
          "14299:                             tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14300:     if (version == 4) {",
          "14301:       proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask1_ipv4_dscp,",
          "14303:       proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask1_ipv4_proto,",
          "14305:     } else {",
          "14306:       proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask1_ipv6_flow,",
          "14308:     }",
          "14309:     offset += 1;",
          "14311:     proto_tree_add_item(tree, hf_ieee80211_tclas_version, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14312:     offset += 1;",
          "14313:     if (version == 4)",
          "14314:     {",
          "14315:       proto_tree_add_item(tree, hf_ieee80211_tclas_ipv4_src, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "14317:       proto_tree_add_item(tree, hf_ieee80211_tclas_ipv4_dst, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "14319:       proto_tree_add_item(tree, hf_ieee80211_tclas_src_port, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "14321:       proto_tree_add_item(tree, hf_ieee80211_tclas_dst_port, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "14323:       proto_tree_add_item(tree, hf_ieee80211_tclas_dscp, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14325:       proto_tree_add_item(tree, hf_ieee80211_tclas_protocol, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14328:     else if (version == 6)",
          "14330:       proto_tree_add_item(tree, hf_ieee80211_tclas_ipv6_src, tvb, offset, 16, ENC_NA);",
          "14331:       offset += 16;",
          "14332:       proto_tree_add_item(tree, hf_ieee80211_tclas_ipv6_dst, tvb, offset, 16, ENC_NA);",
          "14333:       offset += 16;",
          "14334:       proto_tree_add_item(tree, hf_ieee80211_tclas_src_port, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "14336:       proto_tree_add_item(tree, hf_ieee80211_tclas_dst_port, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "14337:       offset += 2;",
          "14338:       proto_tree_add_item(tree, hf_ieee80211_tclas_flow, tvb, offset, 3, ENC_BIG_ENDIAN);",
          "14340:     }",
          "14341:     break;",
          "14343:   case 2:",
          "14344:     offset--;",
          "14345:     mask_tree = proto_item_add_subtree(class_mask, ett_tag_tclas_mask_tree);",
          "14346:     proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask2_tci,",
          "14347:                             tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14348:     offset++;",
          "14350:     proto_tree_add_item(tree, hf_ieee80211_tclas_tag_type, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14352:     break;",
          "14354:   default:",
          "14355:     break;",
          "14356:   }",
          "14358:   return tvb_captured_length(tvb);",
          "14359: }",
          "14362: static int",
          "14363: ieee80211_tag_schedule(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "14364: {",
          "14365:   int tag_len = tvb_reported_length(tvb);",
          "14366:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "14367:   int offset = 0;",
          "14368:   if (tag_len != 14)",
          "14369:   {",
          "14370:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 14\", tag_len);",
          "14371:     return 1;",
          "14372:   }",
          "14374:   add_ff_schedule_info(tree, tvb, pinfo, offset);",
          "14375:   offset += 2;",
          "14377:   proto_tree_add_item(tree, hf_ieee80211_sched_srv_start, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14378:   offset += 4;",
          "14380:   proto_tree_add_item(tree, hf_ieee80211_sched_srv_int, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "14381:   offset += 4;",
          "14383:   proto_tree_add_item(tree, hf_ieee80211_sched_spec_int, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14384:   return tvb_captured_length(tvb);",
          "14385: }",
          "14388: static int",
          "14389: ieee80211_tag_challenge_text(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void* data _U_)",
          "14390: {",
          "14391:   int tag_len = tvb_reported_length(tvb);",
          "14392:   int offset = 0;",
          "14394:   proto_tree_add_item(tree, hf_ieee80211_tag_challenge_text, tvb, offset, tag_len, ENC_NA);",
          "14396:   return ((tag_len > 0) ? tag_len : 1);",
          "14397: }",
          "14400: static int",
          "14401: ieee80211_tag_power_constraint(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "14402: {",
          "14403:   int tag_len = tvb_reported_length(tvb);",
          "14404:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "14405:   int offset = 0;",
          "14406:   if (tag_len != 1)",
          "14407:   {",
          "14408:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 1\", tag_len);",
          "14409:     return 1;",
          "14410:   }",
          "14412:   proto_tree_add_item(tree, hf_ieee80211_tag_power_constraint_local, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14413:   proto_item_append_text(field_data->item_tag, \": %d\", tvb_get_guint8(tvb, offset));",
          "14414:   return tvb_captured_length(tvb);",
          "14415: }",
          "14418: static int",
          "14419: ieee80211_tag_power_capability(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "14420: {",
          "14421:   int tag_len = tvb_reported_length(tvb);",
          "14422:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "14423:   int offset = 0;",
          "14424:   if (tag_len != 2)",
          "14425:   {",
          "14426:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 2\", tag_len);",
          "14427:     return 1;",
          "14428:   }",
          "14430:   proto_tree_add_item(tree, hf_ieee80211_tag_power_capability_min, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14431:   proto_item_append_text(field_data->item_tag, \" Min: %d\", tvb_get_guint8(tvb, offset));",
          "14432:   offset += 1;",
          "14434:   proto_tree_add_item(tree, hf_ieee80211_tag_power_capability_max, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14435:   proto_item_append_text(field_data->item_tag, \", Max :%d\", tvb_get_guint8(tvb, offset));",
          "14436:   return tvb_captured_length(tvb);",
          "14437: }",
          "14440: static int",
          "14441: ieee80211_tag_tpc_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree _U_, void* data)",
          "14442: {",
          "14443:   int tag_len = tvb_reported_length(tvb);",
          "14444:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "14445:   if (tag_len != 0)",
          "14446:   {",
          "14447:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 0\", tag_len);",
          "14449:   }",
          "14452: }",
          "14455: static int",
          "14456: ieee80211_tag_tpc_report(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "14457: {",
          "14458:   int tag_len = tvb_reported_length(tvb);",
          "14459:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "14460:   int offset = 0;",
          "14462:   if (tag_len != 2)",
          "14463:   {",
          "14464:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 2\", tag_len);",
          "14465:     return 1;",
          "14466:   }",
          "14468:   proto_tree_add_item(tree, hf_ieee80211_tag_tpc_report_trsmt_pow, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14469:   proto_item_append_text(field_data->item_tag, \" Transmit Power: %d\", tvb_get_guint8(tvb, offset));",
          "14470:   offset += 1;",
          "14472:   proto_tree_add_item(tree, hf_ieee80211_tag_tpc_report_link_mrg, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14473:   proto_item_append_text(field_data->item_tag, \", Link Margin: %d\", tvb_get_guint8(tvb, offset));",
          "14474:   return tvb_captured_length(tvb);",
          "14475: }",
          "14478: static int",
          "14479: ieee80211_tag_supported_channels(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "14480: {",
          "14481:   int tag_len = tvb_reported_length(tvb);",
          "14482:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "14483:   int offset = 0;",
          "14485:   proto_item *chan_item;",
          "14486:   proto_tree *chan_tree;",
          "14487:   guint       i = 1;",
          "14489:   if (tag_len % 2 == 1) {",
          "14490:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag length %u must be even\", tag_len);",
          "14491:     return tvb_captured_length(tvb);",
          "14492:   }",
          "14494:   while (offset < tag_len)",
          "14495:   {",
          "14496:     chan_item = proto_tree_add_item(tree, hf_ieee80211_tag_supported_channels, tvb, offset, 2, ENC_NA);",
          "14497:     proto_item_append_text(chan_item, \" #%d\", i);",
          "14498:     i += 1;",
          "14500:     chan_tree = proto_item_add_subtree(chan_item , ett_tag_supported_channels);",
          "14502:     proto_tree_add_item(chan_tree, hf_ieee80211_tag_supported_channels_first, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14503:     proto_item_append_text(chan_item, \" First: %d\", tvb_get_guint8(tvb, offset));",
          "14504:     offset += 1;",
          "14506:     proto_tree_add_item(chan_tree, hf_ieee80211_tag_supported_channels_range, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14507:     proto_item_append_text(chan_item, \", Range: %d \", tvb_get_guint8(tvb, offset));",
          "14508:     offset += 1;",
          "14510:   }",
          "14511:   return tvb_captured_length(tvb);",
          "14512: }",
          "14515: static int",
          "14516: ieee80211_tag_switch_ann(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "14517: {",
          "14518:   int tag_len = tvb_reported_length(tvb);",
          "14519:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "14520:   int offset = 0;",
          "14521:   if (tag_len != 3)",
          "14522:   {",
          "14523:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 3\", tag_len);",
          "14524:     return 1;",
          "14525:   }",
          "14527:   proto_tree_add_item(tree, hf_ieee80211_csa_channel_switch_mode, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14528:   proto_item_append_text(field_data->item_tag, \" Mode: %d\", tvb_get_guint8(tvb, offset));",
          "14529:   offset += 1;",
          "14531:   proto_tree_add_item(tree, hf_ieee80211_csa_new_channel_number, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14532:   proto_item_append_text(field_data->item_tag, \", Number: %d \", tvb_get_guint8(tvb, offset));",
          "14533:   offset += 1;",
          "14535:   proto_tree_add_item(tree, hf_ieee80211_csa_channel_switch_count, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14536:   proto_item_append_text(field_data->item_tag, \", Count: %d \", tvb_get_guint8(tvb, offset));",
          "14537:   return tvb_captured_length(tvb);",
          "14538: }",
          "14541: static int",
          "14542: ieee80211_tag_measure_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "14543: {",
          "14544:   int tag_len = tvb_reported_length(tvb);",
          "14545:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "14546:   int offset = 0;",
          "14547:   guint8 request_type;",
          "14548:   proto_item *parent_item;",
          "14549:   proto_tree *sub_tree;",
          "14550:   if (tag_len < 3)",
          "14551:   {",
          "14552:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag length %u too short, must be >= 3\", tag_len);",
          "14553:     return tvb_captured_length(tvb);",
          "14554:   }",
          "14555:   proto_tree_add_item(tree, hf_ieee80211_tag_measure_request_token, tvb, offset, 1, ENC_NA);",
          "14556:   offset += 1;",
          "14558:   parent_item = proto_tree_add_item(tree, hf_ieee80211_tag_measure_request_mode, tvb, offset, 1, ENC_NA);",
          "14559:   sub_tree = proto_item_add_subtree(parent_item, ett_tag_measure_request_mode_tree);",
          "14560:   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_parallel, tvb, offset, 1, ENC_NA);",
          "14561:   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_enable, tvb, offset, 1, ENC_NA);",
          "14562:   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_request, tvb, offset, 1, ENC_NA);",
          "14563:   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_report, tvb, offset, 1, ENC_NA);",
          "14564:   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_duration_mandatory, tvb, offset, 1, ENC_NA);",
          "14565:   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_reserved, tvb, offset, 1, ENC_NA);",
          "14566:   offset += 1;",
          "14569:   parent_item = proto_tree_add_item(tree, hf_ieee80211_tag_measure_request_type, tvb, offset, 1, ENC_NA);",
          "14570:   sub_tree = proto_item_add_subtree(parent_item, ett_tag_measure_request_type_tree);",
          "14571:   request_type = tvb_get_guint8(tvb, offset);",
          "14572:   offset += 1;",
          "14574:   switch (request_type) {",
          "14578:     {",
          "14579:       proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_number, tvb, offset, 1, ENC_NA);",
          "14580:       offset += 1;",
          "14582:       proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);",
          "14583:       offset += 8;",
          "14585:       proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14586:       offset += 2;",
          "14587:       break;",
          "14588:     }",
          "14590:     {",
          "14591:       proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_operating_class, tvb, offset, 1, ENC_NA);",
          "14592:       offset += 1;",
          "14594:       proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_number, tvb, offset, 1, ENC_NA);",
          "14595:       offset += 1;",
          "14597:       proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_randomization_interval, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14598:       offset += 2;",
          "14600:       proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14601:       offset += 2;",
          "14603:       while (offset < tag_len)",
          "14604:       {",
          "14605:         guint8 sub_id;",
          "14606:         proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_load_sub_id, tvb, offset, 1, ENC_NA);",
          "14607:         sub_id = tvb_get_guint8(tvb, offset);",
          "14608:         offset += 1;",
          "14610:         proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_subelement_length, tvb, offset, 1, ENC_NA);",
          "14611:         offset += 1;",
          "14613:         switch (sub_id) {",
          "14615:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_load_sub_reporting_condition, tvb, offset, 1, ENC_NA);",
          "14616:             offset += 1;",
          "14617:             proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_load_sub_reporting_ref, tvb, offset, 1, ENC_NA);",
          "14618:             offset += 1;",
          "14619:             break;",
          "14620:           default:",
          "14624:      }",
          "14625:      break;",
          "14626:    }",
          "14628:    {",
          "14629:      proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_operating_class, tvb, offset, 1, ENC_NA);",
          "14630:      offset += 1;",
          "14632:      proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_number, tvb, offset, 1, ENC_NA);",
          "14633:      offset += 1;",
          "14635:      proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_randomization_interval, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14636:      offset += 2;",
          "14638:      proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14639:      offset += 2;",
          "14641:      while (offset < tag_len)",
          "14642:      {",
          "14643:        guint8 sub_id;",
          "14644:        proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_noise_histogram_sub_id, tvb, offset, 1, ENC_NA);",
          "14645:        sub_id = tvb_get_guint8(tvb, offset);",
          "14646:        offset += 1;",
          "14648:        proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_subelement_length, tvb, offset, 1, ENC_NA);",
          "14649:        offset += 1;",
          "14651:        switch (sub_id) {",
          "14653:            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_noise_histogram_sub_reporting_condition, tvb, offset, 1, ENC_NA);",
          "14654:            offset += 1;",
          "14655:            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_noise_histogram_sub_reporting_anpi_ref, tvb, offset, 1, ENC_NA);",
          "14656:            offset += 1;",
          "14657:            break;",
          "14658:          default:",
          "14660:            break;",
          "14661:        }",
          "14662:      }",
          "14663:      break;",
          "14664:    }",
          "14666:    {",
          "14667:      proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_operating_class, tvb, offset, 1, ENC_NA);",
          "14668:      offset += 1;",
          "14670:      proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_number, tvb, offset, 1, ENC_NA);",
          "14671:      offset += 1;",
          "14673:      proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_randomization_interval, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14674:      offset += 2;",
          "14676:      proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14677:      offset += 2;",
          "14679:      proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_measurement_mode, tvb, offset, 1, ENC_NA);",
          "14680:      offset += 1;",
          "14682:      proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_bssid, tvb, offset, 6, ENC_NA);",
          "14683:      offset += 6;",
          "14685:      while (offset < tag_len)",
          "14686:      {",
          "14687:        guint8 sub_id, sub_length, sub_tag_end;",
          "14688:        proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_beacon_sub_id, tvb, offset, 1, ENC_NA);",
          "14689:        sub_id = tvb_get_guint8(tvb, offset);",
          "14690:        offset += 1;",
          "14692:        proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_subelement_length, tvb, offset, 1, ENC_NA);",
          "14693:        sub_length = tvb_get_guint8(tvb, offset);",
          "14694:        offset += 1;",
          "14695:        sub_tag_end = offset + sub_length;",
          "14697:        switch (sub_id) {",
          "14699:            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_beacon_sub_ssid, tvb, offset, sub_length, ENC_ASCII|ENC_NA);",
          "14700:            offset += sub_length;",
          "14701:            break;",
          "14703:            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_beacon_sub_bri_reporting_condition, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14704:            offset += 1;",
          "14705:            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_beacon_sub_bri_threshold_offset, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14706:            offset += 1;",
          "14707:            break;",
          "14709:            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_beacon_sub_reporting_detail, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14710:            offset += 1;",
          "14711:            break;",
          "14713:            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_beacon_sub_request, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14714:            offset += 1;",
          "14715:            break;",
          "14718:            break;",
          "14719:          default:",
          "14721:            break;",
          "14722:        }",
          "14723:        if (offset < sub_tag_end)",
          "14724:        {",
          "14725:          proto_item *tix;",
          "14726:          tix = proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_beacon_unknown, tvb, offset, sub_tag_end - offset, ENC_NA);",
          "14727:          expert_add_info(pinfo, tix, &ei_ieee80211_tag_measure_request_beacon_unknown);",
          "14728:          offset = sub_tag_end;",
          "14729:        }",
          "14730:      }",
          "14732:      break;",
          "14733:    }",
          "14735:    {",
          "14736:      proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_operating_class, tvb, offset, 1, ENC_NA);",
          "14737:      offset += 1;",
          "14739:      proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_number, tvb, offset, 1, ENC_NA);",
          "14740:      offset += 1;",
          "14742:      proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_randomization_interval, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14743:      offset += 2;",
          "14745:      proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14746:      offset += 2;",
          "14748:      proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_frame_request_type, tvb, offset, 1, ENC_NA);",
          "14749:      offset += 1;",
          "14751:      proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mac_address, tvb, offset, 6, ENC_NA);",
          "14752:      offset += 6;",
          "14755:      break;",
          "14756:    }",
          "14758:    {",
          "14759:      proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_peer_mac_address, tvb, offset, 6, ENC_NA);",
          "14760:      offset += 6;",
          "14762:      proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_randomization_interval, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14763:      offset += 2;",
          "14765:      proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14766:      offset += 2;",
          "14768:      proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_group_id, tvb, offset, 1, ENC_NA);",
          "14769:      offset += 1;",
          "14772:      break;",
          "14773:    }",
          "14793:     break;",
          "14794:   }",
          "14795:   if (offset < tag_len)",
          "14796:   {",
          "14797:     proto_item *tix;",
          "14798:     tix = proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_unknown, tvb, offset, tag_len - offset, ENC_NA);",
          "14799:     expert_add_info(pinfo, tix, &ei_ieee80211_tag_measure_request_unknown);",
          "14800:   }",
          "14802:   return tvb_captured_length(tvb);",
          "14803: }",
          "14806: static int",
          "14807: ieee80211_tag_measure_rep(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "14808: {",
          "14809:   int tag_len = tvb_reported_length(tvb);",
          "14810:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "14811:   int offset = 0;",
          "14812:   proto_item *parent_item;",
          "14813:   proto_tree *sub_tree;",
          "14814:   guint8 report_type;",
          "14815:   if (tag_len < 3)",
          "14816:   {",
          "14817:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag length %u too short, must be >= 3\", tag_len);",
          "14818:     return tvb_captured_length(tvb);",
          "14819:   }",
          "14820:   proto_tree_add_item(tree, hf_ieee80211_tag_measure_report_measurement_token, tvb, offset, 1, ENC_NA);",
          "14821:   offset += 1;",
          "14823:   parent_item = proto_tree_add_item(tree, hf_ieee80211_tag_measure_report_mode, tvb, offset, 1, ENC_NA);",
          "14824:   sub_tree = proto_item_add_subtree(parent_item, ett_tag_measure_report_mode_tree);",
          "14825:   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_mode_late, tvb, offset, 1, ENC_NA);",
          "14826:   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_mode_incapable, tvb, offset, 1, ENC_NA);",
          "14827:   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_mode_refused, tvb, offset, 1, ENC_NA);",
          "14828:   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_mode_reserved, tvb, offset, 1, ENC_NA);",
          "14829:   offset += 1;",
          "14831:   report_type = tvb_get_guint8(tvb, offset);",
          "14832:   parent_item = proto_tree_add_item(tree, hf_ieee80211_tag_measure_report_type, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14833:   sub_tree = proto_item_add_subtree(parent_item, ett_tag_measure_report_type_tree);",
          "14834:   offset += 1;",
          "14836:   if (tag_len == 3)",
          "14837:     return tvb_captured_length(tvb);",
          "14839:   switch (report_type) {",
          "14841:   {",
          "14842:     proto_tree *sub_tree_map_field;",
          "14844:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_number, tvb, offset, 1, ENC_NA);",
          "14845:     offset += 1;",
          "14847:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);",
          "14848:     offset += 8;",
          "14850:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14851:     offset += 2;",
          "14853:     parent_item = proto_tree_add_item(tree, hf_ieee80211_tag_measure_basic_map_field, tvb, offset, 1, ENC_NA);",
          "14854:     sub_tree_map_field = proto_item_add_subtree(parent_item, ett_tag_measure_report_basic_map_tree);",
          "14855:     proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_bss, tvb, offset, 1, ENC_NA);",
          "14856:     proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_odfm, tvb, offset, 1, ENC_NA);",
          "14857:     proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_unident_signal, tvb, offset, 1, ENC_NA);",
          "14858:     proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_radar, tvb, offset, 1, ENC_NA);",
          "14859:     proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_unmeasured, tvb, offset, 1, ENC_NA);",
          "14860:     proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_reserved, tvb, offset, 1, ENC_NA);",
          "14861:     break;",
          "14862:   }",
          "14864:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_number, tvb, offset, 1, ENC_NA);",
          "14865:     offset += 1;",
          "14867:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);",
          "14868:     offset += 8;",
          "14870:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14871:     offset += 2;",
          "14873:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_cca_busy_fraction, tvb, offset, 1, ENC_NA);",
          "14874:     offset += 1;",
          "14875:     break;",
          "14877:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_number, tvb, offset, 1, ENC_NA);",
          "14878:     offset += 1;",
          "14880:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);",
          "14881:     offset += 8;",
          "14883:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14884:     offset += 2;",
          "14886:     parent_item = proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report, tvb, offset, 8, ENC_NA);",
          "14887:     sub_tree = proto_item_add_subtree(parent_item, ett_tag_measure_report_rpi_tree);",
          "14889:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_0, tvb, offset, 1, ENC_NA);",
          "14890:     offset += 1;",
          "14892:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_1, tvb, offset, 1, ENC_NA);",
          "14893:     offset += 1;",
          "14895:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_2, tvb, offset, 1, ENC_NA);",
          "14896:     offset += 1;",
          "14898:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_3, tvb, offset, 1, ENC_NA);",
          "14899:     offset += 1;",
          "14901:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_4, tvb, offset, 1, ENC_NA);",
          "14902:     offset += 1;",
          "14904:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_5, tvb, offset, 1, ENC_NA);",
          "14905:     offset += 1;",
          "14907:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_6, tvb, offset, 1, ENC_NA);",
          "14908:     offset += 1;",
          "14910:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_7, tvb, offset, 1, ENC_NA);",
          "14911:     offset += 1;",
          "14912:     break;",
          "14914:   {",
          "14915:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_operating_class, tvb, offset, 1, ENC_NA);",
          "14916:     offset += 1;",
          "14918:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_number, tvb, offset, 1, ENC_NA);",
          "14919:     offset += 1;",
          "14921:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);",
          "14922:     offset += 8;",
          "14924:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14925:     offset += 2;",
          "14927:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_load, tvb, offset, 1, ENC_NA);",
          "14928:     offset += 1;",
          "14931:     break;",
          "14932:   }",
          "14934:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_operating_class, tvb, offset, 1, ENC_NA);",
          "14935:     offset += 1;",
          "14937:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_number, tvb, offset, 1, ENC_NA);",
          "14938:     offset += 1;",
          "14940:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);",
          "14941:     offset += 8;",
          "14943:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14944:     offset += 2;",
          "14946:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ant_id, tvb, offset, 1, ENC_NA);",
          "14947:     offset += 1;",
          "14949:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_anpi, tvb, offset, 1, ENC_NA);",
          "14950:     offset += 1;",
          "14952:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_0, tvb, offset, 1, ENC_NA);",
          "14953:     offset += 1;",
          "14955:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_1, tvb, offset, 1, ENC_NA);",
          "14956:     offset += 1;",
          "14958:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_2, tvb, offset, 1, ENC_NA);",
          "14959:     offset += 1;",
          "14961:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_3, tvb, offset, 1, ENC_NA);",
          "14962:     offset += 1;",
          "14964:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_4, tvb, offset, 1, ENC_NA);",
          "14965:     offset += 1;",
          "14967:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_5, tvb, offset, 1, ENC_NA);",
          "14968:     offset += 1;",
          "14970:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_6, tvb, offset, 1, ENC_NA);",
          "14971:     offset += 1;",
          "14973:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_7, tvb, offset, 1, ENC_NA);",
          "14974:     offset += 1;",
          "14976:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_8, tvb, offset, 1, ENC_NA);",
          "14977:     offset += 1;",
          "14979:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_9, tvb, offset, 1, ENC_NA);",
          "14980:     offset += 1;",
          "14982:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_10, tvb, offset, 1, ENC_NA);",
          "14983:     offset += 1;",
          "14986:     break;",
          "14988:   {",
          "14989:     proto_tree *sub_tree_frame_info;",
          "14991:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_operating_class, tvb, offset, 1, ENC_NA);",
          "14992:     offset += 1;",
          "14994:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_number, tvb, offset, 1, ENC_NA);",
          "14995:     offset += 1;",
          "14997:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);",
          "14998:     offset += 8;",
          "15000:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15001:     offset += 2;",
          "15003:     parent_item = proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_frame_info, tvb, offset, 1, ENC_NA);",
          "15004:     sub_tree_frame_info = proto_item_add_subtree(parent_item, ett_tag_measure_report_frame_tree);",
          "15005:     proto_tree_add_item(sub_tree_frame_info, hf_ieee80211_tag_measure_report_frame_info_phy_type, tvb, offset, 1, ENC_NA);",
          "15006:     proto_tree_add_item(sub_tree_frame_info, hf_ieee80211_tag_measure_report_frame_info_frame_type, tvb, offset, 1, ENC_NA);",
          "15007:     offset += 1;",
          "15009:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_rcpi, tvb, offset, 1, ENC_NA);",
          "15010:     offset += 1;",
          "15012:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_rsni, tvb, offset, 1, ENC_NA);",
          "15013:     offset += 1;",
          "15015:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_bssid, tvb, offset, 6, ENC_NA);",
          "15016:     offset += 6;",
          "15018:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ant_id, tvb, offset, 1, ENC_NA);",
          "15019:     offset += 1;",
          "15021:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_parent_tsf, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15022:     offset += 4;",
          "15024:     while (offset < tag_len)",
          "15025:     {",
          "15026:       guint8 sub_id, sub_length;",
          "15027:       proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_beacon_sub_id, tvb, offset, 1, ENC_NA);",
          "15028:       sub_id = tvb_get_guint8(tvb, offset);",
          "15029:       offset += 1;",
          "15031:       proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_subelement_length, tvb, offset, 1, ENC_NA);",
          "15032:       sub_length = tvb_get_guint8(tvb, offset);",
          "15033:       offset += 1;",
          "15035:       switch (sub_id) {",
          "15037:         {",
          "15038:           proto_tree *rep_tree;",
          "15040:           rep_tree = proto_tree_add_subtree(sub_tree, tvb, offset, sub_length, ett_tag_measure_reported_frame_tree, NULL, \"Reported Frame Body\");",
          "15042:           add_ff_timestamp(rep_tree, tvb, pinfo, 0);",
          "15043:           add_ff_beacon_interval(rep_tree, tvb, pinfo, 8);",
          "15044:           add_ff_cap_info(rep_tree, tvb, pinfo, 10);",
          "15045:           offset += 12;",
          "15047:           ieee_80211_add_tagged_parameters(tvb, offset, pinfo, rep_tree, sub_length - 12, MGT_PROBE_RESP, NULL);",
          "15048:           offset += (sub_length - 12);",
          "15049:         }",
          "15050:         break;",
          "15051:         default:",
          "15053:           break;",
          "15054:       }",
          "15055:     }",
          "15056:     break;",
          "15057:   }",
          "15059:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_operating_class, tvb, offset, 1, ENC_NA);",
          "15060:     offset += 1;",
          "15062:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_number, tvb, offset, 1, ENC_NA);",
          "15063:     offset += 1;",
          "15065:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);",
          "15066:     offset += 8;",
          "15068:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15069:     offset += 2;",
          "15072:     break;",
          "15092:     break;",
          "15093:   }",
          "15094:   if (offset < tag_len)",
          "15095:   {",
          "15096:     proto_item *tix;",
          "15097:     tix = proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_unknown, tvb, offset, tag_len - offset, ENC_NA);",
          "15098:     expert_add_info(pinfo, tix, &ei_ieee80211_tag_measure_report_unknown);",
          "15099:   }",
          "15100:   return tvb_captured_length(tvb);",
          "15101: }",
          "15104: static int",
          "15105: ieee80211_tag_quiet(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15106: {",
          "15107:   int tag_len = tvb_reported_length(tvb);",
          "15108:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15109:   int offset = 0;",
          "15110:   if (tag_len != 6)",
          "15111:   {",
          "15112:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 6\", tag_len);",
          "15113:     return tvb_captured_length(tvb);",
          "15114:   }",
          "15116:   proto_tree_add_item(tree, hf_ieee80211_tag_quiet_count, tvb, offset, 1, ENC_NA);",
          "15117:   proto_item_append_text(field_data->item_tag, \" Count: %d\", tvb_get_guint8(tvb, offset));",
          "15118:   offset += 1;",
          "15120:   proto_tree_add_item(tree, hf_ieee80211_tag_quiet_period, tvb, offset, 1, ENC_NA);",
          "15121:   proto_item_append_text(field_data->item_tag, \" Period: %d\", tvb_get_guint8(tvb, offset));",
          "15122:   offset += 1;",
          "15124:   proto_tree_add_item(tree, hf_ieee80211_tag_quiet_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15125:   proto_item_append_text(field_data->item_tag, \" Duration: %d\", tvb_get_letohs(tvb, offset));",
          "15126:   offset += 2;",
          "15128:   proto_tree_add_item(tree, hf_ieee80211_tag_quiet_offset, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15129:   proto_item_append_text(field_data->item_tag, \" Offset: %d\", tvb_get_letohs(tvb, offset));",
          "15131:   return tvb_captured_length(tvb);",
          "15132: }",
          "15135: static int",
          "15136: ieee80211_tag_ibss_dfs(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15137: {",
          "15138:   int tag_len = tvb_reported_length(tvb);",
          "15139:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15140:   int offset = 0;",
          "15141:   proto_item *ti_sup_map;",
          "15142:   proto_tree *sub_map_tree;",
          "15143:   if (tag_len < 7)",
          "15144:   {",
          "15145:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be >= 7\", tag_len);",
          "15146:     return tvb_captured_length(tvb);",
          "15147:   }",
          "15149:   proto_tree_add_item(tree, hf_ieee80211_tag_dfs_owner, tvb, offset, 6, ENC_NA);",
          "15150:   proto_item_append_text(field_data->item_tag, \" Owner: %s\", tvb_ether_to_str(tvb, offset));",
          "15151:   offset += 6;",
          "15153:   proto_tree_add_item(tree, hf_ieee80211_tag_dfs_recovery_interval, tvb, offset, 1, ENC_NA);",
          "15154:   offset += 1;",
          "15156:   while (offset < tag_len)",
          "15157:   {",
          "15158:     ti_sup_map = proto_tree_add_item(tree, hf_ieee80211_tag_dfs_channel_map, tvb, offset, 2, ENC_NA);",
          "15159:     sub_map_tree = proto_item_add_subtree(ti_sup_map, ett_tag_dfs_map_tree);",
          "15160:     proto_tree_add_item(sub_map_tree, hf_ieee80211_tag_dfs_channel_number, tvb, offset, 1, ENC_NA);",
          "15161:     proto_tree_add_item(sub_map_tree, hf_ieee80211_tag_dfs_map, tvb, offset, 1, ENC_NA);",
          "15162:     offset += 2;",
          "15163:   }",
          "15164:   return tvb_captured_length(tvb);",
          "15165: }",
          "15168: static int",
          "15169: ieee80211_tag_erp_info(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15170: {",
          "15171:   int tag_len = tvb_reported_length(tvb);",
          "15172:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15173:   int offset = 0;",
          "15174:   proto_item *ti_erp;",
          "15175:   proto_tree *erp_tree;",
          "15176:   if (tag_len != 1)",
          "15177:   {",
          "15178:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 1\", tag_len);",
          "15179:     return tvb_captured_length(tvb);",
          "15180:   }",
          "15182:   ti_erp = proto_tree_add_item(tree, hf_ieee80211_tag_erp_info, tvb, offset, 1, ENC_NA);",
          "15183:   erp_tree = proto_item_add_subtree(ti_erp, ett_tag_erp_info_tree);",
          "15184:   proto_tree_add_item(erp_tree, hf_ieee80211_tag_erp_info_erp_present, tvb, offset, 1, ENC_NA);",
          "15185:   proto_tree_add_item(erp_tree, hf_ieee80211_tag_erp_info_use_protection, tvb, offset, 1, ENC_NA);",
          "15186:   proto_tree_add_item(erp_tree, hf_ieee80211_tag_erp_info_barker_preamble_mode, tvb, offset, 1, ENC_NA);",
          "15187:   proto_tree_add_item(erp_tree, hf_ieee80211_tag_erp_info_reserved, tvb, offset, 1, ENC_NA);",
          "15189:   return tvb_captured_length(tvb);",
          "15190: }",
          "15193: static int",
          "15194: ieee80211_tag_ts_delay(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15195: {",
          "15196:   int tag_len = tvb_reported_length(tvb);",
          "15197:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15198:   int offset = 0;",
          "15199:   if (tag_len != 4)",
          "15200:   {",
          "15201:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 4\", tag_len);",
          "15202:     return tvb_captured_length(tvb);",
          "15203:   }",
          "15205:   proto_tree_add_item(tree, hf_ieee80211_ts_delay, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15206:   proto_item_append_text(field_data->item_tag, \" : %d\", tvb_get_ntohl(tvb, offset));",
          "15207:   return tvb_captured_length(tvb);",
          "15208: }",
          "15211: static int",
          "15212: ieee80211_tag_tclas_process(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15213: {",
          "15214:   int tag_len = tvb_reported_length(tvb);",
          "15215:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15216:   int offset = 0;",
          "15217:   if (tag_len != 1)",
          "15218:   {",
          "15219:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 1\", tag_len);",
          "15220:     return tvb_captured_length(tvb);",
          "15221:   }",
          "15223:   proto_tree_add_item(tree, hf_ieee80211_tclas_process, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15224:   proto_item_append_text(field_data->item_tag, \" : %s\", val_to_str(tvb_get_guint8(tvb, offset), ieee80211_tclas_process_flag, \"Unknown %d\"));",
          "15225:   return tvb_captured_length(tvb);",
          "15226: }",
          "15229: static int",
          "15230: ieee80211_tag_qos_capability(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15231: {",
          "15232:   int tag_len = tvb_reported_length(tvb);",
          "15233:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15234:   int offset = 0;",
          "15235:   if (tag_len != 1)",
          "15236:   {",
          "15237:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 1\", tag_len);",
          "15238:     return tvb_captured_length(tvb);",
          "15239:   }",
          "15240:   dissect_qos_capability(tree, tvb, pinfo, offset, field_data->ftype);",
          "15241:   return tvb_captured_length(tvb);",
          "15242: }",
          "15244: static int",
          "15245: ieee80211_tag_rsn_ie(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15246: {",
          "15247:   int tag_len = tvb_reported_length(tvb);",
          "15248:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15249:   int offset = 0;",
          "15250:   if (tag_len < 18)",
          "15251:   {",
          "15252:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be >= 18\", tag_len);",
          "15253:     return tvb_captured_length(tvb);",
          "15254:   }",
          "15256:   dissect_rsn_ie(pinfo, tree, tvb, offset, tag_len, field_data->sanity_check);",
          "15257:   return tvb_captured_length(tvb);",
          "15258: }",
          "15261: static int",
          "15262: ieee80211_tag_ext_supp_rates(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15263: {",
          "15264:   int tag_len = tvb_reported_length(tvb);",
          "15265:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15266:   int offset = 0;",
          "15267:   if (tag_len < 1)",
          "15268:   {",
          "15269:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag length %u too short, must be greater than 0\", tag_len);",
          "15270:     return tvb_captured_length(tvb);",
          "15271:   }",
          "15273:   while (offset < tag_len)",
          "15274:   {",
          "15275:     proto_tree_add_item(tree, hf_ieee80211_tag_ext_supp_rates, tvb, offset, 1, ENC_NA);",
          "15276:     proto_item_append_text(field_data->item_tag, \" %s,\", val_to_str_ext_const(tvb_get_guint8(tvb, offset), &ieee80211_supported_rates_vals_ext, \"Unknown Rate\"));",
          "15277:     offset += 1;",
          "15278:   }",
          "15279:   proto_item_append_text(field_data->item_tag, \" [Mbit/sec]\");",
          "15280:   return tvb_captured_length(tvb);",
          "15281: }",
          "15283: static int",
          "15284: ieee80211_tag_cisco_ccx1_ckip(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15285: {",
          "15286:   int tag_len = tvb_reported_length(tvb);",
          "15287:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15288:   int offset = 0;",
          "15299:   if (tag_len < 26)",
          "15300:   {",
          "15301:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u too short, must be >= 26\", tag_len);",
          "15302:     return tvb_captured_length(tvb);",
          "15303:   }",
          "15304:   proto_tree_add_item(tree, hf_ieee80211_tag_cisco_ccx1_unknown, tvb, offset, 10, ENC_NA);",
          "15305:   offset += 10;",
          "15309:   proto_tree_add_item(tree, hf_ieee80211_tag_cisco_ccx1_name, tvb, offset, 16, ENC_ASCII|ENC_NA);",
          "15310:   offset += 16;",
          "15313:   proto_tree_add_item(tree, hf_ieee80211_tag_cisco_ccx1_clients, tvb, offset, 1, ENC_NA);",
          "15314:   offset += 1;",
          "15315:   proto_tree_add_item(tree, hf_ieee80211_tag_cisco_ccx1_unknown2, tvb, offset, 3, ENC_NA);",
          "15316:   return tvb_captured_length(tvb);",
          "15317: }",
          "15319: static int",
          "15320: ieee80211_tag_vendor_specific_ie(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15321: {",
          "15322:   int tag_len = tvb_reported_length(tvb);",
          "15323:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15324:   int offset = 0;",
          "15325:   guint32 tag_vs_len = tag_len;",
          "15326:   guint32       oui;",
          "15328:   if (tag_len < 3)",
          "15329:   {",
          "15330:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be >= 3\", tag_len);",
          "15331:     return tvb_captured_length(tvb);",
          "15332:   }",
          "15334:   oui = tvb_get_ntoh24(tvb, offset);",
          "15335:   proto_tree_add_item(tree, hf_ieee80211_tag_oui, tvb, offset, 3, ENC_NA);",
          "15336:   proto_item_append_text(field_data->item_tag, \": %s\", uint_get_manuf_name(oui));",
          "15337:   offset += 3;",
          "15338:   tag_vs_len -= 3;",
          "15340:   if (tag_len > 0) {",
          "15341:     proto_tree_add_item(field_data->item_tag, hf_ieee80211_tag_vendor_oui_type, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15342:   }",
          "15344:   switch (oui) {",
          "15346:     case OUI_WPAWME:",
          "15347:       dissect_vendor_ie_wpawme(tree, tvb, pinfo, offset, tag_vs_len, field_data->ftype);",
          "15349:     case OUI_RSN:",
          "15350:       dissect_vendor_ie_rsn(field_data->item_tag, tree, tvb, offset, tag_vs_len);",
          "15352:     case OUI_PRE11N:",
          "15353:       dissect_vendor_ie_ht(tvb, pinfo, tree, offset, field_data->item_tag, field_data->item_tag_length, tag_vs_len);",
          "15355:     case OUI_WFA:",
          "15356:       dissect_vendor_ie_wfa(pinfo, field_data->item_tag, tvb);",
          "15361:       dissect_vendor_ie_aironet(field_data->item_tag, tree, tvb, offset, tag_vs_len);",
          "15363:     case OUI_MARVELL:",
          "15364:       dissect_vendor_ie_marvell(field_data->item_tag, tree, tvb, offset, tag_vs_len);",
          "15366:     case OUI_ATHEROS:",
          "15367:       dissect_vendor_ie_atheros(field_data->item_tag, tree, tvb, offset, tag_vs_len, pinfo, field_data->item_tag_length);",
          "15369:     case OUI_ARUBA:",
          "15370:       dissect_vendor_ie_aruba(field_data->item_tag, tree, tvb, offset, tag_vs_len);",
          "15372:     case OUI_NINTENDO:",
          "15373:       dissect_vendor_ie_nintendo(field_data->item_tag, tree, tvb, offset, tag_vs_len);",
          "15375:     case OUI_MIKROTIK:",
          "15376:       dissect_vendor_ie_mikrotik(field_data->item_tag, tree, tvb, offset, tag_vs_len);",
          "15378:     case OUI_MERU:",
          "15379:       dissect_vendor_ie_meru(field_data->item_tag, tree, tvb, offset, tag_vs_len, pinfo);",
          "15381:     case OUI_ZEBRA_EXTREME:",
          "15382:       dissect_vendor_ie_extreme(field_data->item_tag, tree, tvb, offset, tag_vs_len, pinfo);",
          "15384:     default:",
          "15385:       proto_tree_add_item(tree, hf_ieee80211_tag_vendor_data, tvb, offset, tag_vs_len, ENC_NA);",
          "15387:   }",
          "15389:   return tvb_captured_length(tvb);",
          "15390: }",
          "15393: static int",
          "15394: ieee80211_tag_ie_68_conflict(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15395: {",
          "15396:   int tag_len = tvb_reported_length(tvb);",
          "15397:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15399:     dissect_wapi_param_set(tvb, pinfo, tree, 0, tag_len, field_data->item_tag_length, field_data->item_tag, field_data->ftype);",
          "15400:   }",
          "15402:      dissect_bss_ac_access_delay_ie(tvb, pinfo, tree, 0, tag_len, field_data->item_tag_length);",
          "15403:   }",
          "15404:   return tvb_captured_length(tvb);",
          "15405: }",
          "15407: static int",
          "15408: ieee80211_tag_mesh_peering_mgmt(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
          "15409: {",
          "15410:   int tag_len = tvb_reported_length(tvb);",
          "15411:   int offset = 0;",
          "15413:   proto_tree_add_item(tree, hf_ieee80211_mesh_peering_proto, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15414:   offset += 2;",
          "15415:   proto_tree_add_item(tree, hf_ieee80211_mesh_peering_local_link_id, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15416:   offset += 2;",
          "15417:   switch (tvb_get_guint8(tvb, 1))",
          "15419:     case SELFPROT_ACTION_MESH_PEERING_OPEN:",
          "15422:     case SELFPROT_ACTION_MESH_PEERING_CONFIRM:",
          "15423:       proto_tree_add_item(tree, hf_ieee80211_mesh_peering_peer_link_id, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15426:     case SELFPROT_ACTION_MESH_PEERING_CLOSE:",
          "15427:       if ((tag_len == 8) || (tag_len == 24))",
          "15428:       {",
          "15429:         proto_tree_add_item(tree, hf_ieee80211_mesh_peering_peer_link_id, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15430:         offset += 2;",
          "15431:       }",
          "15432:       add_ff_reason_code(tree, tvb, pinfo, offset);",
          "15436:     default:",
          "15437:       proto_tree_add_expert(tree, pinfo, &ei_ieee80211_mesh_peering_unexpected , tvb, offset, tag_len);",
          "15439:   }",
          "15440:   if (tag_len - offset == 16)",
          "15441:   {",
          "15442:     proto_tree_add_item(tree, hf_ieee80211_rsn_pmkid, tvb, offset, 16, ENC_NA);",
          "15443:   }",
          "15444:   return tvb_captured_length(tvb);",
          "15445: }",
          "15447: static int",
          "15448: ieee80211_tag_mesh_configuration(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void* data _U_)",
          "15449: {",
          "15450:   int offset = 0;",
          "15451:   proto_item *item;",
          "15452:   proto_tree *subtree;",
          "15453:   proto_tree_add_item(tree, hf_ieee80211_mesh_config_path_sel_protocol, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15454:   proto_tree_add_item(tree, hf_ieee80211_mesh_config_path_sel_metric, tvb, offset + 1, 1, ENC_LITTLE_ENDIAN);",
          "15455:   proto_tree_add_item(tree, hf_ieee80211_mesh_config_congestion_control, tvb, offset + 2, 1, ENC_LITTLE_ENDIAN);",
          "15456:   proto_tree_add_item(tree, hf_ieee80211_mesh_config_sync_method, tvb, offset + 3, 1, ENC_LITTLE_ENDIAN);",
          "15457:   proto_tree_add_item(tree, hf_ieee80211_mesh_config_auth_protocol, tvb, offset + 4, 1, ENC_LITTLE_ENDIAN);",
          "15458:   item = proto_tree_add_item(tree, hf_ieee80211_mesh_config_formation_info, tvb, offset + 5, 1, ENC_LITTLE_ENDIAN);",
          "15459:   subtree = proto_item_add_subtree(item, ett_mesh_formation_info_tree);",
          "15460:   proto_tree_add_item(subtree, hf_ieee80211_mesh_form_info_num_of_peerings, tvb, offset + 5, 1, ENC_LITTLE_ENDIAN);",
          "15461:   item = proto_tree_add_item(tree, hf_ieee80211_mesh_config_capability, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "15462:   subtree = proto_item_add_subtree(item, ett_mesh_config_cap_tree);",
          "15463:   proto_tree_add_item(subtree, hf_ieee80211_mesh_config_cap_accepting, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "15464:   proto_tree_add_item(subtree, hf_ieee80211_mesh_config_cap_mcca_support, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "15465:   proto_tree_add_item(subtree, hf_ieee80211_mesh_config_cap_mcca_enabled, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "15466:   proto_tree_add_item(subtree, hf_ieee80211_mesh_config_cap_forwarding, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "15467:   proto_tree_add_item(subtree, hf_ieee80211_mesh_config_cap_mbca_enabled, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "15468:   proto_tree_add_item(subtree, hf_ieee80211_mesh_config_cap_tbtt_adjusting, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "15469:   proto_tree_add_item(subtree, hf_ieee80211_mesh_config_cap_power_save_level, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "15470:   return tvb_captured_length(tvb);",
          "15471: }",
          "15473: static int",
          "15474: ieee80211_tag_mesh_id(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15475: {",
          "15476:   int offset = 0;",
          "15477:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15478:   int tag_len = tvb_reported_length(tvb);",
          "15479:   const guint8* mesh_id;",
          "15481:   proto_tree_add_item_ret_string(tree, hf_ieee80211_mesh_id, tvb, offset, tag_len, ENC_ASCII|ENC_NA, wmem_packet_scope(), &mesh_id);",
          "15482:   if (tag_len > 0) {",
          "15483:     gchar* s = format_text(wmem_packet_scope(), mesh_id, tag_len);",
          "15484:     col_append_fstr(pinfo->cinfo, COL_INFO, \", MESHID=%s\", s);",
          "15485:     proto_item_append_text(field_data->item_tag, \": %s\", s);",
          "15486:   }",
          "15488:   return ((tag_len > 0) ? tag_len : 1);",
          "15489: }",
          "15491: static int",
          "15492: ieee80211_tag_mesh_preq(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void* data _U_)",
          "15493: {",
          "15494:   int offset = 0;",
          "15496:   guint32 flags;",
          "15497:   guint8 targs, i;",
          "15499:   proto_tree_add_item_ret_uint(tree, hf_ieee80211_ff_hwmp_flags, tvb, offset, 1, ENC_LITTLE_ENDIAN, &flags);",
          "15500:   offset += 1;",
          "15501:   proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_hopcount, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15502:   offset += 1;",
          "15503:   proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_ttl, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15504:   offset += 1;",
          "15505:   proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_pdid, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15506:   offset += 4;",
          "15507:   proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_orig_sta, tvb, offset, 6, ENC_NA);",
          "15508:   offset += 6;",
          "15509:   proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_orig_sn, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15510:   offset += 4;",
          "15512:   if (flags & (1<<6)) {",
          "15513:     proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_orig_ext, tvb, offset, 6, ENC_NA);",
          "15514:     offset += 6;",
          "15515:   }",
          "15516:   proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_lifetime, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15517:   offset += 4;",
          "15518:   proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_metric, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15519:   offset += 4;",
          "15520:   proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_targ_count, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15521:   targs = tvb_get_guint8(tvb, offset);",
          "15522:   offset += 1;",
          "15523:   for (i = 0; i < targs; i++) {",
          "15524:     const int * targ_flags[] = {",
          "15525:       &hf_ieee80211_ff_hwmp_targ_to_flags,",
          "15526:       &hf_ieee80211_ff_hwmp_targ_usn_flags,",
          "15527:       NULL",
          "15528:     };",
          "15530:     proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_ff_hwmp_targ_flags,",
          "15531:                                    ett_hwmp_targ_flags_tree, targ_flags, ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "15533:     offset += 1;",
          "15534:     proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_targ_sta, tvb, offset, 6, ENC_NA);",
          "15535:     offset += 6;",
          "15536:     proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_targ_sn, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15537:     offset += 4;",
          "15538:   }",
          "15540:   return tvb_captured_length(tvb);",
          "15541: }",
          "15543: static int",
          "15544: ieee80211_tag_mesh_prep(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void* data _U_)",
          "15545: {",
          "15546:   int offset = 0;",
          "15548:   guint32 flags;",
          "15549:   proto_tree_add_item_ret_uint(tree, hf_ieee80211_ff_hwmp_flags, tvb, offset, 1, ENC_LITTLE_ENDIAN, &flags);",
          "15550:   offset += 1;",
          "15551:   proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_hopcount, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15552:   offset += 1;",
          "15553:   proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_ttl, tvb, offset , 1, ENC_LITTLE_ENDIAN);",
          "15554:   offset += 1;",
          "15555:   proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_targ_sta, tvb, offset, 6, ENC_NA);",
          "15556:   offset += 6;",
          "15557:   proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_targ_sn, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15558:   offset += 4;",
          "15559:   if (flags & (1<<6)) {",
          "15560:     proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_targ_ext, tvb, offset, 6, ENC_NA);",
          "15561:     offset += 6;",
          "15562:   }",
          "15563:   proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_lifetime, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15564:   offset += 4;",
          "15565:   proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_metric, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15566:   offset += 4;",
          "15567:   proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_orig_sta, tvb, offset, 6, ENC_NA);",
          "15568:   offset += 6;",
          "15569:   proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_orig_sn, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15570:   return tvb_captured_length(tvb);",
          "15571: }",
          "15573: static int",
          "15574: ieee80211_tag_mesh_perr(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
          "15575: {",
          "15576:   int offset = 0;",
          "15577:   guint8 targs, i;",
          "15579:   proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_ttl, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15580:   offset += 1;",
          "15581:   proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_targ_count, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15582:   targs = tvb_get_guint8(tvb, offset);",
          "15583:   offset += 1;",
          "15584:   for (i = 0; i < targs; i++) {",
          "15585:     guint8 flags = tvb_get_guint8(tvb, offset);",
          "15587:     proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_targ_flags, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15588:     offset += 1;",
          "15589:     proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_targ_sta, tvb, offset, 6, ENC_NA);",
          "15590:     offset += 6;",
          "15591:     proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_targ_sn, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15592:     offset += 4;",
          "15593:     if (flags & (1<<6)) {",
          "15594:       proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_targ_ext, tvb, offset, 6, ENC_NA);",
          "15595:       offset += 6;",
          "15596:     }",
          "15597:     offset += add_ff_reason_code(tree, tvb, pinfo, offset);",
          "15598:   }",
          "15599:   return tvb_captured_length(tvb);",
          "15600: }",
          "15602: static int",
          "15603: ieee80211_tag_rann(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void* data _U_)",
          "15604: {",
          "15605:   int offset = 0;",
          "15606:   proto_tree_add_item(tree, hf_ieee80211_rann_flags, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15607:   offset += 1;",
          "15608:   proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_hopcount, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15609:   offset += 1;",
          "15610:   proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_ttl, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15611:   offset += 1;",
          "15612:   proto_tree_add_item(tree, hf_ieee80211_rann_root_sta, tvb, offset, 6, ENC_NA);",
          "15613:   offset += 6;",
          "15614:   proto_tree_add_item(tree, hf_ieee80211_rann_sn, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15615:   offset += 4;",
          "15616:   proto_tree_add_item(tree, hf_ieee80211_rann_interval, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15617:   offset += 4;",
          "15618:   proto_tree_add_item(tree, hf_ieee80211_ff_hwmp_metric, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15619:   return tvb_captured_length(tvb);",
          "15620: }",
          "15623: static int",
          "15624: ieee80211_tag_mesh_channel_switch(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15625: {",
          "15626:   int tag_len = tvb_reported_length(tvb);",
          "15627:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15628:   int offset = 0;",
          "15629:   proto_item *item;",
          "15630:   proto_tree *subtree;",
          "15631:   if (tag_len != 6)",
          "15632:   {",
          "15633:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 6\", tag_len);",
          "15634:     return tvb_captured_length(tvb);",
          "15635:   }",
          "15637:   proto_tree_add_item(tree, hf_ieee80211_mesh_channel_switch_ttl, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15638:   proto_item_append_text(field_data->item_tag, \" TTL: %d\", tvb_get_guint8(tvb, offset));",
          "15639:   offset += 1;",
          "15641:   item = proto_tree_add_item(tree, hf_ieee80211_mesh_channel_switch_flag, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15642:   subtree = proto_item_add_subtree(item, ett_mesh_chswitch_flag_tree);",
          "15643:   proto_tree_add_item(subtree, hf_ieee80211_mesh_chswitch_flag_initiator, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15644:   proto_tree_add_item(subtree, hf_ieee80211_mesh_chswitch_flag_txrestrict, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15645:   offset += 1;",
          "15647:   proto_tree_add_item(tree, hf_ieee80211_mesh_channel_switch_reason_code, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15648:   offset += 2;",
          "15650:   proto_tree_add_item(tree, hf_ieee80211_mesh_channel_switch_precedence_value, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15651:   return tvb_captured_length(tvb);",
          "15652: }",
          "15654: static int",
          "15655: ieee80211_tag_channel_switch_announcement(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15656: {",
          "15657:   int tag_len = tvb_reported_length(tvb);",
          "15658:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15659:   int offset = 0;",
          "15660:   if (tag_len != 4)",
          "15661:   {",
          "15662:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 4\", tag_len);",
          "15663:     return tvb_captured_length(tvb);",
          "15664:   }",
          "15666:   add_ff_extended_channel_switch_announcement(tree, tvb, pinfo, offset);",
          "15667:   return tvb_captured_length(tvb);",
          "15668: }",
          "15670: static int",
          "15671: ieee80211_tag_supported_operating_classes(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15672: {",
          "15673:   int tag_len = tvb_reported_length(tvb);",
          "15674:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15675:   int offset = 0;",
          "15676:   const guint8 *tag_data_ptr;",
          "15677:   int           i, n, ret;",
          "15678:   char          print_buff[SHORT_STR];",
          "15680:   if (tag_len < 2) {",
          "15681:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be >= 3\", tag_len);",
          "15682:     return tvb_captured_length(tvb);",
          "15683:   } else if (tag_len > 32) {",
          "15684:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be < 32\", tag_len);",
          "15685:     return tvb_captured_length(tvb);",
          "15686:   }",
          "15688:   proto_tree_add_item(tree, hf_ieee80211_tag_supported_ope_classes_current, tvb, offset, 1, ENC_NA);",
          "15690:   offset += 1;",
          "15692:   tag_data_ptr = tvb_get_ptr(tvb, offset, tag_len);",
          "15693:   for (i = 0, n = 0; (i < tag_len) && (n < SHORT_STR); i++) {",
          "15694:     ret = g_snprintf(print_buff + n, SHORT_STR - n, (i == tag_len-1)?\"%d\":\"%d, \", tag_data_ptr[i]);",
          "15695:     if (ret >= SHORT_STR - n) {",
          "15699:     n += ret;",
          "15700:   }",
          "15701:   proto_tree_add_string(tree, hf_ieee80211_tag_supported_ope_classes_alternate, tvb, offset, tag_len, print_buff);",
          "15702:   return tvb_captured_length(tvb);",
          "15703: }",
          "15705: static int",
          "15706: ieee80211_tag_bss_parameter_change(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15707: {",
          "15708:   int tag_len = tvb_reported_length(tvb);",
          "15709:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15710:   int offset = 0;",
          "15711:   gboolean size;",
          "15712:   if (tag_len != 7)",
          "15713:   {",
          "15714:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 7\", tag_len);",
          "15715:     return tvb_captured_length(tvb);",
          "15716:   }",
          "15717:   size = (tvb_get_guint8(tvb, offset) & 0x02) >> 1;",
          "15718:   proto_tree_add_item(tree, hf_ieee80211_tag_move, tvb, offset, 1, ENC_NA);",
          "15719:   proto_tree_add_item(tree, hf_ieee80211_tag_size, tvb, offset, 1, ENC_NA);",
          "15720:   offset += 1;",
          "15721:   proto_tree_add_item(tree, hf_ieee80211_tag_tbtt_offset, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15722:   offset += 4;",
          "15724:     proto_tree_add_item(tree, hf_ieee80211_tag_bi_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15725:   }",
          "15726:   return tvb_captured_length(tvb);",
          "15727: }",
          "15729: static int",
          "15730: ieee80211_tag_dmg_capabilities(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15731: {",
          "15732:   int tag_len = tvb_reported_length(tvb);",
          "15733:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15734:   int offset = 0;",
          "15735:   if (tag_len != 17)",
          "15736:   {",
          "15737:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 17\", tag_len);",
          "15738:     return tvb_captured_length(tvb);",
          "15739:   }",
          "15740:   proto_tree_add_item(tree, hf_ieee80211_tag_dmg_capa_sta_addr, tvb, offset, 6, ENC_NA);",
          "15741:   offset += 6;",
          "15742:   proto_tree_add_item(tree, hf_ieee80211_tag_dmg_capa_aid, tvb, offset, 1, ENC_NA);",
          "15743:   offset += 1;",
          "15744:   proto_tree_add_item(tree, hf_ieee80211_tag_reverse_direction, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15745:   proto_tree_add_item(tree, hf_ieee80211_tag_hlts, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15746:   proto_tree_add_item(tree, hf_ieee80211_tag_tpc, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15747:   proto_tree_add_item(tree, hf_ieee80211_tag_spsh, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15748:   proto_tree_add_item(tree, hf_ieee80211_tag_rx_antenna, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15749:   proto_tree_add_item(tree, hf_ieee80211_tag_fast_link, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15750:   proto_tree_add_item(tree, hf_ieee80211_tag_num_sectors, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15751:   proto_tree_add_item(tree, hf_ieee80211_tag_rxss_length, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15752:   proto_tree_add_item(tree, hf_ieee80211_tag_reciprocity, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15753:   proto_tree_add_item(tree, hf_ieee80211_tag_max_ampdu_exp, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15754:   offset += 3;",
          "15755:   proto_tree_add_item(tree, hf_ieee80211_tag_min_mpdu_sapcing, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15756:   proto_tree_add_item(tree, hf_ieee80211_tag_ba_flow_control, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15757:   proto_tree_add_item(tree, hf_ieee80211_tag_max_sc_rx_mcs, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15758:   proto_tree_add_item(tree, hf_ieee80211_tag_max_ofdm_rx_mcs, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15759:   proto_tree_add_item(tree, hf_ieee80211_tag_max_sc_tx_mcs, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15760:   proto_tree_add_item(tree, hf_ieee80211_tag_max_ofdm_tx_mcs, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15761:   offset += 3;",
          "15762:   proto_tree_add_item(tree, hf_ieee80211_tag_low_power_supported, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15763:   proto_tree_add_item(tree, hf_ieee80211_tag_code_rate, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15764:   proto_tree_add_item(tree, hf_ieee80211_tag_dtp, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15765:   proto_tree_add_item(tree, hf_ieee80211_tag_appdu_supp, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15766:   proto_tree_add_item(tree, hf_ieee80211_tag_heartbeat, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15767:   proto_tree_add_item(tree, hf_ieee80211_tag_other_aid, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15768:   proto_tree_add_item(tree, hf_ieee80211_tag_pattern_recip, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15769:   proto_tree_add_item(tree, hf_ieee80211_tag_heartbeat_elapsed, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15770:   proto_tree_add_item(tree, hf_ieee80211_tag_grant_ack_supp, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15771:   proto_tree_add_item(tree, hf_ieee80211_tag_RXSSTxRate_supp, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15772:   offset += 2;",
          "15773:   proto_tree_add_item(tree, hf_ieee80211_tag_pcp_tddti, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15774:   proto_tree_add_item(tree, hf_ieee80211_tag_pcp_PSA, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15775:   proto_tree_add_item(tree, hf_ieee80211_tag_pcp_handover, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15776:   proto_tree_add_item(tree, hf_ieee80211_tag_pcp_max_assoc, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15777:   proto_tree_add_item(tree, hf_ieee80211_tag_pcp_power_src, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15778:   proto_tree_add_item(tree, hf_ieee80211_tag_pcp_decenter, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15779:   proto_tree_add_item(tree, hf_ieee80211_tag_pcp_forwarding, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15780:   proto_tree_add_item(tree, hf_ieee80211_tag_pcp_center, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15781:   return tvb_captured_length(tvb);",
          "15782: }",
          "15784: static int",
          "15785: ieee80211_tag_dmg_operation(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15786: {",
          "15787:   int tag_len = tvb_reported_length(tvb);",
          "15788:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15789:   int offset = 0;",
          "15790:   if (tag_len != 10)",
          "15791:   {",
          "15792:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 10\", tag_len);",
          "15793:     return tvb_captured_length(tvb);",
          "15794:   }",
          "15795:   proto_tree_add_item(tree, hf_ieee80211_tag_pcp_tddti, tvb, offset, 1, ENC_NA);",
          "15796:   proto_tree_add_item(tree, hf_ieee80211_tag_pcp_PSA, tvb, offset, 1, ENC_NA);",
          "15797:   proto_tree_add_item(tree, hf_ieee80211_tag_pcp_handover, tvb, offset, 1, ENC_NA);",
          "15798:   offset += 2;",
          "15799:   proto_tree_add_item(tree, hf_ieee80211_tag_PSRSI, tvb, offset, 1, ENC_NA);",
          "15800:   offset += 1;",
          "15801:   proto_tree_add_item(tree, hf_ieee80211_tag_min_BHI_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15802:   offset += 2;",
          "15803:   proto_tree_add_item(tree, hf_ieee80211_tag_brdct_sta_info_dur, tvb, offset, 1, ENC_NA);",
          "15804:   offset += 1;",
          "15805:   proto_tree_add_item(tree, hf_ieee80211_tag_assoc_resp_confirm_time, tvb, offset, 1, ENC_NA);",
          "15806:   offset += 1;",
          "15807:   proto_tree_add_item(tree, hf_ieee80211_tag_min_pp_duration, tvb, offset, 1, ENC_NA);",
          "15808:   offset += 1;",
          "15809:   proto_tree_add_item(tree, hf_ieee80211_tag_SP_idle_timeout, tvb, offset, 1, ENC_NA);",
          "15810:   offset += 1;",
          "15811:   proto_tree_add_item(tree, hf_ieee80211_tag_max_lost_beacons, tvb, offset, 1, ENC_NA);",
          "15812:   return tvb_captured_length(tvb);",
          "15813: }",
          "15815: static int",
          "15816: ieee80211_tag_antenna_section_id(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15817: {",
          "15818:   int tag_len = tvb_reported_length(tvb);",
          "15819:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15820:   int offset = 0;",
          "15821:   if (tag_len != 4)",
          "15822:   {",
          "15823:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 4\", tag_len);",
          "15824:     return tvb_captured_length(tvb);",
          "15825:   }",
          "15826:   proto_tree_add_item(tree, hf_ieee80211_tag_type, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15827:   proto_tree_add_item(tree, hf_ieee80211_tag_tap1, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15828:   proto_tree_add_item(tree, hf_ieee80211_tag_state1, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15829:   proto_tree_add_item(tree, hf_ieee80211_tag_tap2, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15830:   proto_tree_add_item(tree, hf_ieee80211_tag_state2, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15831:   return tvb_captured_length(tvb);",
          "15832: }",
          "15834: static int",
          "15835: ieee80211_tag_extended_schedule(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15836: {",
          "15837:   int tag_len = tvb_reported_length(tvb);",
          "15838:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15839:   int offset = 0;",
          "15840:   int i;",
          "15841:   gboolean isGrant;",
          "15842:   proto_tree * alloc_tree;",
          "15843:   if ((tag_len%15) != 0)",
          "15844:   {",
          "15845:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be N*15 where 0<=N<=17\", tag_len);",
          "15846:     return tvb_captured_length(tvb);",
          "15847:   }",
          "15848:   isGrant = ((field_data->ftype==CTRL_GRANT)||(field_data->ftype==CTRL_GRANT_ACK));",
          "15849:   for(i=0; i < tag_len; i+=15) {",
          "15850:     alloc_tree = proto_tree_add_subtree_format(tree, tvb, offset, 15, ett_allocation_tree, NULL, \"Allocation %d\", i/15);",
          "15851:     proto_tree_add_item(alloc_tree, hf_ieee80211_tag_allocation_id, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15852:     proto_tree_add_item(alloc_tree, hf_ieee80211_tag_allocation_type, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15853:     proto_tree_add_item(alloc_tree, hf_ieee80211_tag_pseudo_static, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15854:     proto_tree_add_item(alloc_tree, hf_ieee80211_tag_truncatable, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15855:     proto_tree_add_item(alloc_tree, hf_ieee80211_tag_extendable, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15856:     proto_tree_add_item(alloc_tree, hf_ieee80211_tag_pcp_active, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15857:     proto_tree_add_item(alloc_tree, hf_ieee80211_tag_lp_sc_used, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15858:     offset += 2;",
          "15859:     offset += add_ff_beamforming_ctrl(alloc_tree, tvb, pinfo, offset, isGrant);",
          "15860:     proto_tree_add_item(alloc_tree, hf_ieee80211_tag_src_aid, tvb, offset, 1, ENC_NA);",
          "15861:     offset += 1;",
          "15862:     proto_tree_add_item(alloc_tree, hf_ieee80211_tag_dest_aid, tvb, offset, 1, ENC_NA);",
          "15863:     offset += 1;",
          "15864:     proto_tree_add_item(alloc_tree, hf_ieee80211_tag_alloc_start, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15865:     offset += 4;",
          "15866:     proto_tree_add_item(alloc_tree, hf_ieee80211_tag_alloc_block_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15867:     offset += 2;",
          "15868:     proto_tree_add_item(alloc_tree, hf_ieee80211_tag_num_blocks, tvb, offset, 1, ENC_NA);",
          "15869:     offset += 1;",
          "15870:     proto_tree_add_item(alloc_tree, hf_ieee80211_tag_alloc_block_period, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15871:     offset += 2;",
          "15872:   }",
          "15873:   return tvb_captured_length(tvb);",
          "15874: }",
          "15876: static int",
          "15877: ieee80211_tag_sta_availability(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15878: {",
          "15879:   int tag_len = tvb_reported_length(tvb);",
          "15880:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15881:   int offset = 0;",
          "15882:   int i;",
          "15883:   proto_tree * sta_info_tree;",
          "15884:   if ((tag_len%2) != 0)",
          "15885:   {",
          "15886:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be N*2 where N>=0\", tag_len);",
          "15887:     return tvb_captured_length(tvb);",
          "15888:   }",
          "15889:   for(i=0; i < tag_len; i+=2) {",
          "15890:     sta_info_tree = proto_tree_add_subtree_format(tree, tvb, offset, 2, ett_sta_info, NULL, \"STA Info %d\", i/2);",
          "15891:     proto_tree_add_item(sta_info_tree, hf_ieee80211_tag_aid, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15892:     proto_tree_add_item(sta_info_tree, hf_ieee80211_tag_cbap, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15893:     proto_tree_add_item(sta_info_tree, hf_ieee80211_tag_pp_avail, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15894:     offset += 2;",
          "15895:   }",
          "15896:   return tvb_captured_length(tvb);",
          "15897: }",
          "15899: static int",
          "15900: ieee80211_tag_next_dmg_ati(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15901: {",
          "15902:   int tag_len = tvb_reported_length(tvb);",
          "15903:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15904:   int offset = 0;",
          "15905:   if (tag_len != 6)",
          "15906:   {",
          "15907:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 6\", tag_len);",
          "15908:     return tvb_captured_length(tvb);",
          "15909:   }",
          "15910:   proto_tree_add_item(tree, hf_ieee80211_tag_next_ati_start_time, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "15911:   offset += 4;",
          "15912:   proto_tree_add_item(tree, hf_ieee80211_tag_next_ati_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15913:   return tvb_captured_length(tvb);",
          "15914: }",
          "15916: static int",
          "15917: ieee80211_tag_nextpcp_list(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15918: {",
          "15919:   int tag_len = tvb_reported_length(tvb);",
          "15920:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15921:   int offset = 0;",
          "15922:   int i;",
          "15923:   if (tag_len < 1)",
          "15924:   {",
          "15925:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be at least 1\", tag_len);",
          "15926:     return tvb_captured_length(tvb);",
          "15927:   }",
          "15928:   proto_tree_add_item(tree, hf_ieee80211_tag_nextpcp_token, tvb, offset, 1, ENC_NA);",
          "15929:   offset += 1;",
          "15930:   for(i=0; i < tag_len-1; i+=1) {",
          "15931:     proto_tree_add_item(tree, hf_ieee80211_tag_nextpcp_list, tvb, offset, 1, ENC_NA);",
          "15932:     offset += 1;",
          "15933:   }",
          "15934:   return tvb_captured_length(tvb);",
          "15935: }",
          "15937: static int",
          "15938: ieee80211_tag_pcp_handover(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15939: {",
          "15940:   int tag_len = tvb_reported_length(tvb);",
          "15941:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15942:   int offset = 0;",
          "15943:   if (tag_len != 13)",
          "15944:   {",
          "15945:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be 13\", tag_len);",
          "15946:     return tvb_captured_length(tvb);",
          "15947:   }",
          "15948:   proto_tree_add_item(tree, hf_ieee80211_tag_old_bssid, tvb, offset, 6, ENC_NA);",
          "15949:   offset += 6;",
          "15950:   proto_tree_add_item(tree, hf_ieee80211_tag_new_pcp_addr, tvb, offset, 6, ENC_NA);",
          "15951:   offset += 6;",
          "15952:   proto_tree_add_item(tree, hf_ieee80211_tag_reamaining_BI, tvb, offset, 1, ENC_NA);",
          "15953:   return tvb_captured_length(tvb);",
          "15954: }",
          "15956: static int",
          "15957: ieee80211_tag_beamlink_maintenance(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15958: {",
          "15959:   int tag_len = tvb_reported_length(tvb);",
          "15960:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15961:   int offset = 0;",
          "15962:   if (tag_len != 1)",
          "15963:   {",
          "15964:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be 1\", tag_len);",
          "15965:     return tvb_captured_length(tvb);",
          "15966:   }",
          "15967:   add_ff_beamformed_link(tree, tvb, pinfo, offset);",
          "15968:   return tvb_captured_length(tvb);",
          "15969: }",
          "15971: static int",
          "15972: ieee80211_tag_quiet_period_res(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15973: {",
          "15974:   int tag_len = tvb_reported_length(tvb);",
          "15975:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15976:   int offset = 0;",
          "15977:   if (tag_len != 10)",
          "15978:   {",
          "15979:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be 10\", tag_len);",
          "15980:     return tvb_captured_length(tvb);",
          "15981:   }",
          "15982:   proto_tree_add_item(tree, hf_ieee80211_tag_request_token, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15983:   offset += 2;",
          "15984:   proto_tree_add_item(tree, hf_ieee80211_tag_bssid, tvb, offset, 6, ENC_NA);",
          "15985:   offset += 6;",
          "15986:   add_ff_sta_address(tree, tvb, pinfo, offset);",
          "15987:   return tvb_captured_length(tvb);",
          "15988: }",
          "15990: static int",
          "15991: ieee80211_tag_relay_transfer_param(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "15992: {",
          "15993:   int tag_len = tvb_reported_length(tvb);",
          "15994:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15995:   int offset = 0;",
          "15997:   if (tag_len != 8)",
          "15998:   {",
          "15999:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be 8\", tag_len);",
          "16000:     return tvb_captured_length(tvb);",
          "16001:   }",
          "16002:   proto_tree_add_item(tree, hf_ieee80211_tag_duplex_relay, tvb, offset, 1, ENC_NA);",
          "16003:   proto_tree_add_item(tree, hf_ieee80211_tag_cooperation_relay, tvb, offset, 1, ENC_NA);",
          "16004:   proto_tree_add_item(tree, hf_ieee80211_tag_tx_mode, tvb, offset, 1, ENC_NA);",
          "16005:   proto_tree_add_item(tree, hf_ieee80211_tag_link_change_interval, tvb, offset+1, 1, ENC_NA);",
          "16006:   proto_tree_add_item(tree, hf_ieee80211_tag_data_sensing_time, tvb, offset+2, 1, ENC_NA);",
          "16007:   proto_tree_add_item(tree, hf_ieee80211_tag_first_period, tvb, offset+3, 2, ENC_LITTLE_ENDIAN);",
          "16008:   proto_tree_add_item(tree, hf_ieee80211_tag_second_period, tvb, offset+5, 2, ENC_LITTLE_ENDIAN);",
          "16009:   return tvb_captured_length(tvb);",
          "16010: }",
          "16012: static int",
          "16013: ieee80211_tag_dmg_beam_refinement(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "16014: {",
          "16015:   int tag_len = tvb_reported_length(tvb);",
          "16016:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "16017:   int offset = 0;",
          "16019:   if (tag_len != 5)",
          "16020:   {",
          "16021:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be 5\", tag_len);",
          "16022:     return tvb_captured_length(tvb);",
          "16023:   }",
          "16024:   proto_tree_add_item(tree, hf_ieee80211_tag_initiator, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16025:   proto_tree_add_item(tree, hf_ieee80211_tag_tx_train_res, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16026:   proto_tree_add_item(tree, hf_ieee80211_tag_rx_train_res, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16027:   proto_tree_add_item(tree, hf_ieee80211_tag_tx_trn_ok, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16028:   proto_tree_add_item(tree, hf_ieee80211_tag_txss_fbck_req, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16029:   proto_tree_add_item(tree, hf_ieee80211_tag_bs_fbck, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16030:   proto_tree_add_item(tree, hf_ieee80211_tag_bs_fbck_antenna_id, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16031:   proto_tree_add_item(tree, hf_ieee80211_tag_snr_requested, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16032:   proto_tree_add_item(tree, hf_ieee80211_tag_channel_measurement_requested, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16033:   proto_tree_add_item(tree, hf_ieee80211_tag_number_of_taps_requested, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16034:   proto_tree_add_item(tree, hf_ieee80211_tag_sector_id_order_req, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16035:   proto_tree_add_item(tree, hf_ieee80211_tag_snr_present, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16036:   proto_tree_add_item(tree, hf_ieee80211_tag_channel_measurement_present, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16037:   proto_tree_add_item(tree, hf_ieee80211_tag_tap_delay_present, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16038:   proto_tree_add_item(tree, hf_ieee80211_tag_number_of_taps_present, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16039:   proto_tree_add_item(tree, hf_ieee80211_tag_number_of_measurement, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16040:   proto_tree_add_item(tree, hf_ieee80211_tag_sector_id_order_present, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16041:   proto_tree_add_item(tree, hf_ieee80211_tag_number_of_beams, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16042:   proto_tree_add_item(tree, hf_ieee80211_tag_mid_extension, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16043:   proto_tree_add_item(tree, hf_ieee80211_tag_capability_request, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16044:   proto_tree_add_item(tree, hf_ieee80211_tag_beam_refine_reserved, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16045:   return tvb_captured_length(tvb);",
          "16046: }",
          "16048: static int",
          "16049: ieee80211_tag_wakeup_schedule_ad(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "16050: {",
          "16051:   int tag_len = tvb_reported_length(tvb);",
          "16052:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "16053:   int offset = 0;",
          "16055:   if (tag_len != 8)",
          "16056:   {",
          "16057:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be 8\", tag_len);",
          "16058:     return tvb_captured_length(tvb);",
          "16059:   }",
          "16060:   proto_tree_add_item(tree, hf_ieee80211_tag_bi_start_time, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "16061:   offset += 4;",
          "16062:   proto_tree_add_item(tree, hf_ieee80211_tag_sleep_cycle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "16063:   offset += 2;",
          "16064:   proto_tree_add_item(tree, hf_ieee80211_tag_num_awake_bis, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "16065:   return tvb_captured_length(tvb);",
          "16066: }",
          "16068: static int",
          "16069: ieee80211_tag_dmg_tspec(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "16070: {",
          "16071:   int tag_len = tvb_reported_length(tvb);",
          "16072:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "16073:   int offset = 0;",
          "16075:   gboolean isGrant;",
          "16076:   int num_constraints;",
          "16077:   if (tag_len < 14)",
          "16078:   {",
          "16079:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be at least 14\", tag_len);",
          "16080:     return tvb_captured_length(tvb);",
          "16081:   }",
          "16082:   proto_tree_add_item(tree, hf_ieee80211_tag_tspec_allocation_id, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16083:   proto_tree_add_item(tree, hf_ieee80211_tag_tspec_allocation_type, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16084:   proto_tree_add_item(tree, hf_ieee80211_tag_tspec_allocation_format, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16085:   proto_tree_add_item(tree, hf_ieee80211_tag_tspec_pseudo_static, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16086:   proto_tree_add_item(tree, hf_ieee80211_tag_tspec_truncatable, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16087:   proto_tree_add_item(tree, hf_ieee80211_tag_tspec_extendable, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16088:   proto_tree_add_item(tree, hf_ieee80211_tag_tspec_lp_sc_used, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16089:   proto_tree_add_item(tree, hf_ieee80211_tag_tspec_up, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16090:   proto_tree_add_item(tree, hf_ieee80211_tag_tspec_dest_aid, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16091:   offset += 3;",
          "16092:   isGrant = ((field_data->ftype==CTRL_GRANT)||(field_data->ftype==CTRL_GRANT_ACK));",
          "16093:   offset += add_ff_beamforming_ctrl(tree, tvb, pinfo, 2, isGrant);",
          "16094:   proto_tree_add_item(tree, hf_ieee80211_tag_tspec_allocation_period, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "16095:   offset += 2;",
          "16096:   proto_tree_add_item(tree, hf_ieee80211_tag_tspec_min_allocation, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "16097:   offset += 2;",
          "16098:   proto_tree_add_item(tree, hf_ieee80211_tag_tspec_max_allocation, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "16099:   offset += 2;",
          "16100:   proto_tree_add_item(tree, hf_ieee80211_tag_tspec_min_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "16101:   offset += 2;",
          "16102:   num_constraints = tvb_get_guint8(tvb, offset);",
          "16103:   proto_tree_add_item(tree, hf_ieee80211_tag_tspec_num_of_constraints, tvb, offset, 1, ENC_NA);",
          "16104:   offset += 1;",
          "16105:   while(num_constraints > 0) {",
          "16106:     proto_tree_add_item(tree, hf_ieee80211_tag_tspec_tsconst_start_time, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "16107:     offset += 4;",
          "16108:     proto_tree_add_item(tree, hf_ieee80211_tag_tspec_tsconst_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "16109:     offset += 2;",
          "16110:     proto_tree_add_item(tree, hf_ieee80211_tag_tspec_tsconst_period, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "16111:     offset += 2;",
          "16112:     proto_tree_add_item(tree, hf_ieee80211_tag_tspec_tsconst_interferer_mac, tvb, offset, 2, ENC_NA);",
          "16113:     offset += 6;",
          "16114:     num_constraints--;",
          "16115:   }",
          "16116:   return tvb_captured_length(tvb);",
          "16117: }",
          "16119: static int",
          "16120: ieee80211_tag_channel_measurement_fb(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "16121: {",
          "16122:   int tag_len = tvb_reported_length(tvb);",
          "16123:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "16124:   int offset = 0;",
          "16126:   int num_measurement;",
          "16127:   if (tag_len%5 != 0)",
          "16128:   {",
          "16129:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be multiple of 5\", tag_len);",
          "16130:     return tvb_captured_length(tvb);",
          "16131:   }",
          "16132:   num_measurement = tvb_get_guint8(tvb, offset+1);",
          "16133:   offset += 2;",
          "16134:   while(num_measurement > 0) {",
          "16135:     proto_tree_add_item(tree, hf_ieee80211_ff_snr, tvb, offset, 1, ENC_NA);",
          "16136:     offset += 1;",
          "16137:     proto_tree_add_item(tree, hf_ieee80211_tag_channel_measurement_feedback_realtive_I, tvb, offset, 1, ENC_NA);",
          "16138:     offset += 1;",
          "16139:     proto_tree_add_item(tree, hf_ieee80211_tag_channel_measurement_feedback_realtive_Q, tvb, offset, 1, ENC_NA);",
          "16140:     offset += 1;",
          "16141:     proto_tree_add_item(tree, hf_ieee80211_tag_channel_measurement_feedback_tap_delay, tvb, offset, 1, ENC_NA);",
          "16142:     offset += 1;",
          "16143:     proto_tree_add_item(tree, hf_ieee80211_tag_channel_measurement_feedback_sector_id, tvb, offset, 1, ENC_NA);",
          "16144:     proto_tree_add_item(tree, hf_ieee80211_tag_channel_measurement_feedback_antenna_id, tvb, offset, 1, ENC_NA);",
          "16145:     offset += 1;",
          "16146:     num_measurement--;",
          "16147:   }",
          "16148:   return tvb_captured_length(tvb);",
          "16149: }",
          "16151: static int",
          "16152: ieee80211_tag_awake_window(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "16153: {",
          "16154:   int tag_len = tvb_reported_length(tvb);",
          "16155:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "16157:   if (tag_len != 2)",
          "16158:   {",
          "16159:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be 2\", tag_len);",
          "16160:   }",
          "16161:   else",
          "16162:   {",
          "16163:     proto_tree_add_item(tree, hf_ieee80211_tag_awake_window, tvb, 0, 2, ENC_LITTLE_ENDIAN);",
          "16164:   }",
          "16165:   return tvb_captured_length(tvb);",
          "16166: }",
          "16168: static int",
          "16169: ieee80211_tag_addba_ext(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "16170: {",
          "16171:   int tag_len = tvb_reported_length(tvb);",
          "16172:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "16174:   if (tag_len != 1)",
          "16175:   {",
          "16176:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be 1\", tag_len);",
          "16177:   }",
          "16178:   else",
          "16179:   {",
          "16180:     proto_tree_add_item(tree, hf_ieee80211_tag_addba_ext_no_frag, tvb, 0, 1, ENC_NA);",
          "16181:   }",
          "16182:   return tvb_captured_length(tvb);",
          "16183: }",
          "16185: static int",
          "16186: ieee80211_tag_multi_band(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "16187: {",
          "16188:   int tag_len = tvb_reported_length(tvb);",
          "16189:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "16190:   int offset = 0;",
          "16191:   gboolean chiper_present, addr_present;",
          "16193:   if (tag_len < 22)",
          "16194:   {",
          "16195:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be at least 22\", tag_len);",
          "16196:     return tvb_captured_length(tvb);",
          "16197:   }",
          "16198:   chiper_present = (tvb_get_letohs(tvb, offset) & 0x08) >> 3;",
          "16199:   addr_present = (tvb_get_letohs(tvb, offset) & 0x10) >> 4;",
          "16200:   proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_ctrl_sta_role, tvb, offset, 1, ENC_NA);",
          "16201:   proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_ctrl_addr_present, tvb, offset, 1, ENC_NA);",
          "16202:   proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_ctrl_cipher_present, tvb, offset, 1, ENC_NA);",
          "16203:   offset += 1;",
          "16204:   offset += add_ff_band_id(tree, tvb, pinfo, 1);",
          "16205:   proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_oper_class, tvb, offset, 1, ENC_NA);",
          "16206:   offset += 1;",
          "16207:   proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_channel_number, tvb, offset, 1, ENC_NA);",
          "16208:   offset += 1;",
          "16209:   proto_tree_add_item(tree, hf_ieee80211_tag_bssid, tvb, offset, 6, ENC_NA);",
          "16210:   offset += 6;",
          "16211:   offset += add_ff_beacon_interval(tree, tvb, pinfo, 2);",
          "16212:   proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_tsf_offset, tvb, offset, 8, ENC_LITTLE_ENDIAN);",
          "16213:   offset += 8;",
          "16214:   proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_conn_ap, tvb, offset, 1, ENC_NA);",
          "16215:   proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_conn_pcp, tvb, offset, 1, ENC_NA);",
          "16216:   proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_conn_dls, tvb, offset, 1, ENC_NA);",
          "16217:   proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_conn_tdls, tvb, offset, 1, ENC_NA);",
          "16218:   proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_conn_ibss, tvb, offset, 1, ENC_NA);",
          "16219:   offset += 1;",
          "16220:   proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_fst_timeout, tvb, offset, 1, ENC_NA);",
          "16221:   offset += 1;",
          "16222:   if(addr_present)",
          "16223:   {",
          "16224:     proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_sta_mac, tvb, offset, 6, ENC_NA);",
          "16225:     offset += 6;",
          "16226:   }",
          "16227:   if(chiper_present)",
          "16228:   {",
          "16229:     proto_item *rsn_pcs_count, *rsn_pcs_item, *rsn_sub_pcs_item;",
          "16230:     proto_tree *rsn_pcs_tree, *rsn_sub_pcs_tree;",
          "16231:     gint ii;",
          "16232:     guint16     pcs_count;",
          "16233:     int tag_end = tvb_reported_length(tvb);",
          "16234:     rsn_pcs_count = proto_tree_add_item(tree, hf_ieee80211_rsn_pcs_count, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "16235:     pcs_count = tvb_get_letohs(tvb, offset);",
          "16236:     offset += 2;",
          "16238:     if (offset + (pcs_count * 4) > tag_end)",
          "16240:         expert_add_info_format(pinfo, rsn_pcs_count, &ei_ieee80211_rsn_pcs_count,",
          "16241:         \"Pairwise Cipher Suite Count too large, 4*%u > %d\", pcs_count, tag_end - offset);",
          "16242:         pcs_count = (tag_end - offset) / 4;",
          "16245:     rsn_pcs_item = proto_tree_add_item(tree, hf_ieee80211_rsn_pcs_list, tvb, offset, pcs_count * 4, ENC_NA);",
          "16246:     rsn_pcs_tree = proto_item_add_subtree(rsn_pcs_item, ett_rsn_pcs_tree);",
          "16247:     for (ii = 0; ii < pcs_count; ii++)",
          "16249:       rsn_sub_pcs_item = proto_tree_add_item(rsn_pcs_tree, hf_ieee80211_rsn_pcs, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "16250:       rsn_sub_pcs_tree = proto_item_add_subtree(rsn_sub_pcs_item, ett_rsn_sub_pcs_tree);",
          "16251:       proto_tree_add_item(rsn_sub_pcs_tree, hf_ieee80211_rsn_pcs_oui, tvb, offset, 3, ENC_BIG_ENDIAN);",
          "16254:       if (tvb_get_ntoh24(tvb, offset) == OUI_RSN)",
          "16256:         proto_tree_add_item(rsn_sub_pcs_tree, hf_ieee80211_rsn_pcs_80211_type, tvb, offset+3, 1, ENC_LITTLE_ENDIAN);",
          "16257:         proto_item_append_text(rsn_pcs_item, \" %s\", rsn_pcs_return(tvb_get_ntohl(tvb, offset)));",
          "16258:       } else {",
          "16259:         proto_tree_add_item(rsn_sub_pcs_tree, hf_ieee80211_rsn_pcs_type, tvb, offset+3, 1, ENC_LITTLE_ENDIAN);",
          "16265:   return tvb_captured_length(tvb);",
          "16266: }",
          "16268: static int",
          "16269: ieee80211_tag_dmg_link_margin(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "16270: {",
          "16271:   int tag_len = tvb_reported_length(tvb);",
          "16272:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "16273:   int offset = 0;",
          "16275:   if (tag_len != 8)",
          "16276:   {",
          "16277:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be 8\", tag_len);",
          "16278:     return tvb_captured_length(tvb);",
          "16280:   proto_tree_add_item(tree, hf_ieee80211_tag_activity, tvb, offset, 1, ENC_NA);",
          "16281:   offset += 1;",
          "16282:   proto_tree_add_item(tree, hf_ieee80211_tag_dmg_link_adapt_mcs, tvb, offset, 1, ENC_NA);",
          "16283:   offset += 1;",
          "16284:   proto_tree_add_item(tree, hf_ieee80211_tag_dmg_link_adapt_link_margin, tvb, offset, 1, ENC_NA);",
          "16285:   offset += 1;",
          "16286:   proto_tree_add_item(tree, hf_ieee80211_ff_snr, tvb, offset, 1, ENC_NA);",
          "16287:   offset += 1;",
          "16288:   proto_tree_add_item(tree, hf_ieee80211_tag_ref_timestamp, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16289:   return tvb_captured_length(tvb);",
          "16290: }",
          "16292: static int",
          "16293: ieee80211_tag_dmg_link_adaption_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "16294: {",
          "16295:   int tag_len = tvb_reported_length(tvb);",
          "16296:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "16297:   int offset = 0;",
          "16299:   if (tag_len != 5)",
          "16300:   {",
          "16301:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be 5\", tag_len);",
          "16302:     return tvb_captured_length(tvb);",
          "16303:   }",
          "16304:   proto_tree_add_item(tree, hf_ieee80211_tag_activity, tvb, offset, 1, ENC_NA);",
          "16305:   offset += 1;",
          "16306:   proto_tree_add_item(tree, hf_ieee80211_tag_ref_timestamp, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16307:   return tvb_captured_length(tvb);",
          "16308: }",
          "16310: static int",
          "16311: ieee80211_tag_switching_stream(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "16312: {",
          "16313:   int tag_len = tvb_reported_length(tvb);",
          "16314:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "16315:   int offset = 0;",
          "16317:   int param_num;",
          "16318:   if (tag_len < 4)",
          "16319:   {",
          "16320:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be at least 4\", tag_len);",
          "16321:     return tvb_captured_length(tvb);",
          "16322:   }",
          "16323:   offset += add_ff_band_id(tree, tvb, pinfo, 1);",
          "16324:   offset += add_ff_band_id(tree, tvb, pinfo, 1);",
          "16325:   proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_non_qos, tvb, offset, 1, ENC_NA);",
          "16326:   offset += 1;",
          "16327:   param_num = tvb_get_letohs(tvb, offset);",
          "16328:   proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_param_num, tvb, offset, 1, ENC_NA);",
          "16329:   offset += 1;",
          "16330:   while(param_num > 0)",
          "16331:   {",
          "16332:     proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_old_tid, tvb, offset, 1, ENC_NA);",
          "16333:     proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_old_direction, tvb, offset, 1, ENC_NA);",
          "16334:     proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_new_tid, tvb, offset, 1, ENC_NA);",
          "16335:     proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_new_direction, tvb, offset, 1, ENC_NA);",
          "16336:     proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_new_valid_id, tvb, offset, 1, ENC_NA);",
          "16337:     proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_llt_type, tvb, offset, 1, ENC_NA);",
          "16338:     param_num--;",
          "16339:     offset += 2;",
          "16340:   }",
          "16341:   return tvb_captured_length(tvb);",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "27581:                                                             ether_len, ether_name_resolution_str, ether_name_resolution_len);",
          "27582:   set_address(&bssid_broadcast, wlan_bssid_address_type, 6, bssid_broadcast_data);",
          "27585:   wlan_module = prefs_register_protocol(proto_wlan, init_wepkeys);",
          "27586:   prefs_register_bool_preference(wlan_module, \"defragment\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27615:   tagged_field_table = register_dissector_table(\"wlan.tag.number\", \"IEEE 802.11 Fields\", proto_wlan, FT_UINT8, BASE_DEC);",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "27838:   dissector_add_uint(\"eapol.keydes.type\", EAPOL_RSN_KEY, wlan_rsna_eapol_rsn_key_handle);",
          "27840:   dissector_add_uint(\"sflow_245.header_protocol\", SFLOW_5_HEADER_80211_MAC, wlan_withoutfcs_handle);",
          "27841: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27877:   dissector_add_uint(\"wlan.tag.number\", TAG_SSID, create_dissector_handle(ieee80211_tag_ssid, -1));",
          "27878:   dissector_add_uint(\"wlan.tag.number\", TAG_SUPP_RATES, create_dissector_handle(ieee80211_tag_supp_rates, -1));",
          "27879:   dissector_add_uint(\"wlan.tag.number\", TAG_FH_PARAMETER, create_dissector_handle(ieee80211_tag_fh_parameter, -1));",
          "27880:   dissector_add_uint(\"wlan.tag.number\", TAG_DS_PARAMETER, create_dissector_handle(ieee80211_tag_ds_parameter, -1));",
          "27881:   dissector_add_uint(\"wlan.tag.number\", TAG_CF_PARAMETER, create_dissector_handle(ieee80211_tag_cf_parameter, -1));",
          "27882:   dissector_add_uint(\"wlan.tag.number\", TAG_TIM, create_dissector_handle(ieee80211_tag_tim, -1));",
          "27883:   dissector_add_uint(\"wlan.tag.number\", TAG_IBSS_PARAMETER, create_dissector_handle(ieee80211_tag_ibss_parameter, -1));",
          "27884:   dissector_add_uint(\"wlan.tag.number\", TAG_COUNTRY_INFO, create_dissector_handle(ieee80211_tag_country_info, -1));",
          "27885:   dissector_add_uint(\"wlan.tag.number\", TAG_FH_HOPPING_PARAMETER, create_dissector_handle(ieee80211_tag_fh_hopping_parameter, -1));",
          "27886:   dissector_add_uint(\"wlan.tag.number\", TAG_FH_HOPPING_TABLE, create_dissector_handle(ieee80211_tag_fh_hopping_table, -1));",
          "27887:   dissector_add_uint(\"wlan.tag.number\", TAG_REQUEST, create_dissector_handle(ieee80211_tag_request, -1));",
          "27888:   dissector_add_uint(\"wlan.tag.number\", TAG_QBSS_LOAD, create_dissector_handle(ieee80211_tag_qbss_load, -1));",
          "27889: #if 0",
          "27890:   dissector_add_uint(\"wlan.tag.number\", TAG_EDCA_PARAM_SET, create_dissector_handle(ieee80211_tag_edca_param_set, -1));",
          "27891: #endif",
          "27892:   dissector_add_uint(\"wlan.tag.number\", TAG_TSPEC, create_dissector_handle(ieee80211_tag_tspec, -1));",
          "27893:   dissector_add_uint(\"wlan.tag.number\", TAG_TCLAS, create_dissector_handle(ieee80211_tag_tclas, -1));",
          "27894:   dissector_add_uint(\"wlan.tag.number\", TAG_SCHEDULE, create_dissector_handle(ieee80211_tag_schedule, -1));",
          "27895:   dissector_add_uint(\"wlan.tag.number\", TAG_CHALLENGE_TEXT, create_dissector_handle(ieee80211_tag_challenge_text, -1));",
          "27896:   dissector_add_uint(\"wlan.tag.number\", TAG_POWER_CONSTRAINT, create_dissector_handle(ieee80211_tag_power_constraint, -1));",
          "27897:   dissector_add_uint(\"wlan.tag.number\", TAG_POWER_CAPABILITY, create_dissector_handle(ieee80211_tag_power_capability, -1));",
          "27898:   dissector_add_uint(\"wlan.tag.number\", TAG_TPC_REQUEST, create_dissector_handle(ieee80211_tag_tpc_request, -1));",
          "27899:   dissector_add_uint(\"wlan.tag.number\", TAG_TPC_REPORT, create_dissector_handle(ieee80211_tag_tpc_report, -1));",
          "27900:   dissector_add_uint(\"wlan.tag.number\", TAG_SUPPORTED_CHANNELS, create_dissector_handle(ieee80211_tag_supported_channels, -1));",
          "27901:   dissector_add_uint(\"wlan.tag.number\", TAG_CHANNEL_SWITCH_ANN, create_dissector_handle(ieee80211_tag_switch_ann, -1));",
          "27902:   dissector_add_uint(\"wlan.tag.number\", TAG_MEASURE_REQ, create_dissector_handle(ieee80211_tag_measure_req, -1));",
          "27903:   dissector_add_uint(\"wlan.tag.number\", TAG_MEASURE_REP, create_dissector_handle(ieee80211_tag_measure_rep, -1));",
          "27904:   dissector_add_uint(\"wlan.tag.number\", TAG_QUIET, create_dissector_handle(ieee80211_tag_quiet, -1));",
          "27905:   dissector_add_uint(\"wlan.tag.number\", TAG_IBSS_DFS, create_dissector_handle(ieee80211_tag_ibss_dfs, -1));",
          "27906:   dissector_add_uint(\"wlan.tag.number\", TAG_ERP_INFO, create_dissector_handle(ieee80211_tag_erp_info, -1));",
          "27907:   dissector_add_uint(\"wlan.tag.number\", TAG_ERP_INFO_OLD, create_dissector_handle(ieee80211_tag_erp_info, -1));",
          "27908:   dissector_add_uint(\"wlan.tag.number\", TAG_TS_DELAY, create_dissector_handle(ieee80211_tag_ts_delay, -1));",
          "27909:   dissector_add_uint(\"wlan.tag.number\", TAG_TCLAS_PROCESS, create_dissector_handle(ieee80211_tag_tclas_process, -1));",
          "27910:   dissector_add_uint(\"wlan.tag.number\", TAG_QOS_CAPABILITY, create_dissector_handle(ieee80211_tag_qos_capability, -1));",
          "27911:   dissector_add_uint(\"wlan.tag.number\", TAG_RSN_IE, create_dissector_handle(ieee80211_tag_rsn_ie, -1));",
          "27912:   dissector_add_uint(\"wlan.tag.number\", TAG_EXT_SUPP_RATES, create_dissector_handle(ieee80211_tag_ext_supp_rates, -1));",
          "27913:   dissector_add_uint(\"wlan.tag.number\", TAG_EXTENDED_CAPABILITIES, create_dissector_handle(dissect_extended_capabilities_ie, -1));",
          "27914:   dissector_add_uint(\"wlan.tag.number\", TAG_CISCO_CCX1_CKIP, create_dissector_handle(ieee80211_tag_cisco_ccx1_ckip, -1));",
          "27915:   dissector_add_uint(\"wlan.tag.number\", TAG_VHT_CAPABILITY, create_dissector_handle(dissect_vht_capability_ie, -1));",
          "27916:   dissector_add_uint(\"wlan.tag.number\", TAG_VHT_OPERATION, create_dissector_handle(dissect_vht_operation_ie, -1));",
          "27917:   dissector_add_uint(\"wlan.tag.number\", TAG_EXT_BSS_LOAD, create_dissector_handle(dissect_ext_bss_load, -1));",
          "27918:   dissector_add_uint(\"wlan.tag.number\", TAG_WIDE_BW_CHANNEL_SWITCH, create_dissector_handle(dissect_wide_bw_channel_switch, -1));",
          "27919:   dissector_add_uint(\"wlan.tag.number\", TAG_VHT_TX_PWR_ENVELOPE, create_dissector_handle(dissect_vht_tx_pwr_envelope, -1));",
          "27920:   dissector_add_uint(\"wlan.tag.number\", TAG_CHANNEL_SWITCH_WRAPPER, create_dissector_handle(dissect_channel_switch_wrapper, -1));",
          "27921:   dissector_add_uint(\"wlan.tag.number\", TAG_OPERATING_MODE_NOTIFICATION, create_dissector_handle(dissect_operating_mode_notification, -1));",
          "27923:   dissector_add_uint(\"wlan.tag.number\", TAG_VENDOR_SPECIFIC_IE, create_dissector_handle(ieee80211_tag_vendor_specific_ie, -1));",
          "27925:   dissector_add_uint(\"wlan.tag.number\", TAG_CISCO_VENDOR_SPECIFIC, create_dissector_handle(ieee80211_tag_vendor_specific_ie, -1));",
          "27927:   dissector_add_uint(\"wlan.tag.number\", TAG_SYMBOL_PROPRIETARY, create_dissector_handle(ieee80211_tag_vendor_specific_ie, -1));",
          "27928:   dissector_add_uint(\"wlan.tag.number\", TAG_MOBILITY_DOMAIN, create_dissector_handle(dissect_mobility_domain, -1));",
          "27929:   dissector_add_uint(\"wlan.tag.number\", TAG_FAST_BSS_TRANSITION, create_dissector_handle(dissect_fast_bss_transition, -1));",
          "27930:   dissector_add_uint(\"wlan.tag.number\", TAG_MMIE, create_dissector_handle(dissect_mmie, -1));",
          "27931:   dissector_add_uint(\"wlan.tag.number\", TAG_SSID_LIST, create_dissector_handle(dissect_ssid_list, -1));",
          "27932:   dissector_add_uint(\"wlan.tag.number\", TAG_TIME_ZONE, create_dissector_handle(dissect_time_zone, -1));",
          "27933:   dissector_add_uint(\"wlan.tag.number\", TAG_TIMEOUT_INTERVAL, create_dissector_handle(dissect_timeout_interval, -1));",
          "27934:   dissector_add_uint(\"wlan.tag.number\", TAG_RIC_DATA, create_dissector_handle(dissect_ric_data, -1));",
          "27935:   dissector_add_uint(\"wlan.tag.number\", TAG_LINK_IDENTIFIER, create_dissector_handle(dissect_link_identifier, -1));",
          "27936:   dissector_add_uint(\"wlan.tag.number\", TAG_WAKEUP_SCHEDULE, create_dissector_handle(dissect_wakeup_schedule, -1));",
          "27937:   dissector_add_uint(\"wlan.tag.number\", TAG_CHANNEL_SWITCH_TIMING, create_dissector_handle(dissect_channel_switch_timing, -1));",
          "27938:   dissector_add_uint(\"wlan.tag.number\", TAG_PTI_CONTROL, create_dissector_handle(dissect_pti_control, -1));",
          "27939:   dissector_add_uint(\"wlan.tag.number\", TAG_PU_BUFFER_STATUS, create_dissector_handle(dissect_pu_buffer_status, -1));",
          "27940:   dissector_add_uint(\"wlan.tag.number\", TAG_HT_CAPABILITY, create_dissector_handle(dissect_ht_capability_ie, -1));",
          "27941:   dissector_add_uint(\"wlan.tag.number\", TAG_HT_INFO, create_dissector_handle(dissect_ht_info_ie_1_1, -1));",
          "27942:   dissector_add_uint(\"wlan.tag.number\", TAG_SECONDARY_CHANNEL_OFFSET, create_dissector_handle(dissect_secondary_channel_offset_ie, -1));",
          "27943:   dissector_add_uint(\"wlan.tag.number\", TAG_BSS_AVG_ACCESS_DELAY, create_dissector_handle(dissect_bss_avg_access_delay_ie, -1));",
          "27944:   dissector_add_uint(\"wlan.tag.number\", TAG_ANTENNA, create_dissector_handle(dissect_antenna_ie, -1));",
          "27945:   dissector_add_uint(\"wlan.tag.number\", TAG_RSNI, create_dissector_handle(dissect_rsni_ie, -1));",
          "27946:   dissector_add_uint(\"wlan.tag.number\", TAG_BSS_AVB_ADM_CAPACITY, create_dissector_handle(dissect_bss_available_admission_capacity_ie, -1));",
          "27947:   dissector_add_uint(\"wlan.tag.number\", TAG_IE_68_CONFLICT, create_dissector_handle(ieee80211_tag_ie_68_conflict, -1));",
          "27948:   dissector_add_uint(\"wlan.tag.number\", TAG_BSS_MAX_IDLE_PERIOD, create_dissector_handle(dissect_bss_max_idle_period, -1));",
          "27949:   dissector_add_uint(\"wlan.tag.number\", TAG_TFS_REQUEST, create_dissector_handle(dissect_tfs_request, -1));",
          "27950:   dissector_add_uint(\"wlan.tag.number\", TAG_TFS_RESPONSE, create_dissector_handle(dissect_tfs_response, -1));",
          "27951:   dissector_add_uint(\"wlan.tag.number\", TAG_WNM_SLEEP_MODE, create_dissector_handle(dissect_wnm_sleep_mode, -1));",
          "27952:   dissector_add_uint(\"wlan.tag.number\", TAG_TIME_ADV, create_dissector_handle(dissect_time_adv, -1));",
          "27953:   dissector_add_uint(\"wlan.tag.number\", TAG_RM_ENABLED_CAPABILITY, create_dissector_handle(dissect_rm_enabled_capabilities_ie, -1));",
          "27954:   dissector_add_uint(\"wlan.tag.number\", TAG_20_40_BSS_CO_EX, create_dissector_handle(dissect_20_40_bss_coexistence, -1));",
          "27955:   dissector_add_uint(\"wlan.tag.number\", TAG_OVERLAP_BSS_SCAN_PAR, create_dissector_handle(dissect_overlap_bss_scan_par, -1));",
          "27956:   dissector_add_uint(\"wlan.tag.number\", TAG_RIC_DESCRIPTOR, create_dissector_handle(dissect_ric_descriptor, -1));",
          "27957:   dissector_add_uint(\"wlan.tag.number\", TAG_MESH_PEERING_MGMT, create_dissector_handle(ieee80211_tag_mesh_peering_mgmt, -1));",
          "27958:   dissector_add_uint(\"wlan.tag.number\", TAG_MESH_CONFIGURATION, create_dissector_handle(ieee80211_tag_mesh_configuration, -1));",
          "27959:   dissector_add_uint(\"wlan.tag.number\", TAG_MESH_ID, create_dissector_handle(ieee80211_tag_mesh_id, -1));",
          "27960:   dissector_add_uint(\"wlan.tag.number\", TAG_MESH_PREQ, create_dissector_handle(ieee80211_tag_mesh_preq, -1));",
          "27961:   dissector_add_uint(\"wlan.tag.number\", TAG_MESH_PREP, create_dissector_handle(ieee80211_tag_mesh_prep, -1));",
          "27962:   dissector_add_uint(\"wlan.tag.number\", TAG_MESH_PERR, create_dissector_handle(ieee80211_tag_mesh_perr, -1));",
          "27963:   dissector_add_uint(\"wlan.tag.number\", TAG_RANN, create_dissector_handle(ieee80211_tag_rann, -1));",
          "27964:   dissector_add_uint(\"wlan.tag.number\", TAG_MESH_CHANNEL_SWITCH, create_dissector_handle(ieee80211_tag_mesh_channel_switch, -1));",
          "27965:   dissector_add_uint(\"wlan.tag.number\", TAG_INTERWORKING, create_dissector_handle(dissect_interworking, -1));",
          "27966:   dissector_add_uint(\"wlan.tag.number\", TAG_ADVERTISEMENT_PROTOCOL, create_dissector_handle(dissect_advertisement_protocol, -1));",
          "27967:   dissector_add_uint(\"wlan.tag.number\", TAG_QOS_MAP_SET, create_dissector_handle(dissect_qos_map_set, -1));",
          "27968:   dissector_add_uint(\"wlan.tag.number\", TAG_ROAMING_CONSORTIUM, create_dissector_handle(dissect_roaming_consortium, -1));",
          "27969:   dissector_add_uint(\"wlan.tag.number\", TAG_AP_CHANNEL_REPORT, create_dissector_handle(dissect_ap_channel_report, -1));",
          "27970:   dissector_add_uint(\"wlan.tag.number\", TAG_NEIGHBOR_REPORT, create_dissector_handle(dissect_neighbor_report, -1));",
          "27971:   dissector_add_uint(\"wlan.tag.number\", TAG_EXTENDED_CHANNEL_SWITCH_ANNOUNCEMENT, create_dissector_handle(ieee80211_tag_channel_switch_announcement, -1));",
          "27972:   dissector_add_uint(\"wlan.tag.number\", TAG_SUPPORTED_OPERATING_CLASSES, create_dissector_handle(ieee80211_tag_supported_operating_classes, -1));",
          "27973:   dissector_add_uint(\"wlan.tag.number\", TAG_RELAY_CAPABILITIES, create_dissector_handle(add_tag_relay_capabilities, -1));",
          "27974:   dissector_add_uint(\"wlan.tag.number\", TAG_DMG_BSS_PARAMETER_CHANGE, create_dissector_handle(ieee80211_tag_bss_parameter_change, -1));",
          "27975:   dissector_add_uint(\"wlan.tag.number\", TAG_DMG_CAPABILITIES, create_dissector_handle(ieee80211_tag_dmg_capabilities, -1));",
          "27976:   dissector_add_uint(\"wlan.tag.number\", TAG_DMG_OPERATION, create_dissector_handle(ieee80211_tag_dmg_operation, -1));",
          "27977:   dissector_add_uint(\"wlan.tag.number\", TAG_ANTENNA_SECTOR_ID, create_dissector_handle(ieee80211_tag_antenna_section_id, -1));",
          "27978:   dissector_add_uint(\"wlan.tag.number\", TAG_EXTENDED_SCHEDULE, create_dissector_handle(ieee80211_tag_extended_schedule, -1));",
          "27979:   dissector_add_uint(\"wlan.tag.number\", TAG_STA_AVAILABILITY, create_dissector_handle(ieee80211_tag_sta_availability, -1));",
          "27980:   dissector_add_uint(\"wlan.tag.number\", TAG_NEXT_DMG_ATI, create_dissector_handle(ieee80211_tag_next_dmg_ati, -1));",
          "27981:   dissector_add_uint(\"wlan.tag.number\", TAG_NEXTPCP_LIST, create_dissector_handle(ieee80211_tag_nextpcp_list, -1));",
          "27982:   dissector_add_uint(\"wlan.tag.number\", TAG_PCP_HANDOVER, create_dissector_handle(ieee80211_tag_pcp_handover, -1));",
          "27983:   dissector_add_uint(\"wlan.tag.number\", TAG_BEAMLINK_MAINTENANCE, create_dissector_handle(ieee80211_tag_beamlink_maintenance, -1));",
          "27984:   dissector_add_uint(\"wlan.tag.number\", TAG_QUIET_PERIOD_RES, create_dissector_handle(ieee80211_tag_quiet_period_res, -1));",
          "27985:   dissector_add_uint(\"wlan.tag.number\", TAG_RELAY_TRANSFER_PARAM, create_dissector_handle(ieee80211_tag_relay_transfer_param, -1));",
          "27986:   dissector_add_uint(\"wlan.tag.number\", TAG_DMG_BEAM_REFINEMENT, create_dissector_handle(ieee80211_tag_dmg_beam_refinement, -1));",
          "27987:   dissector_add_uint(\"wlan.tag.number\", TAG_WAKEUP_SCHEDULE_AD, create_dissector_handle(ieee80211_tag_wakeup_schedule_ad, -1));",
          "27988:   dissector_add_uint(\"wlan.tag.number\", TAG_DMG_TSPEC, create_dissector_handle(ieee80211_tag_dmg_tspec, -1));",
          "27989:   dissector_add_uint(\"wlan.tag.number\", TAG_CHANNEL_MEASURMENT_FB, create_dissector_handle(ieee80211_tag_channel_measurement_fb, -1));",
          "27990:   dissector_add_uint(\"wlan.tag.number\", TAG_AWAKE_WINDOW, create_dissector_handle(ieee80211_tag_awake_window, -1));",
          "27991:   dissector_add_uint(\"wlan.tag.number\", TAG_ADDBA_EXT, create_dissector_handle(ieee80211_tag_addba_ext, -1));",
          "27992:   dissector_add_uint(\"wlan.tag.number\", TAG_MULTI_BAND, create_dissector_handle(ieee80211_tag_multi_band, -1));",
          "27993:   dissector_add_uint(\"wlan.tag.number\", TAG_DMG_LINK_MARGIN, create_dissector_handle(ieee80211_tag_dmg_link_margin, -1));",
          "27994:   dissector_add_uint(\"wlan.tag.number\", TAG_DMG_LINK_ADAPTION_ACK, create_dissector_handle(ieee80211_tag_dmg_link_adaption_ack, -1));",
          "27995:   dissector_add_uint(\"wlan.tag.number\", TAG_SWITCHING_STREAM, create_dissector_handle(ieee80211_tag_switching_stream, -1));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ieee80211.h||epan/dissectors/packet-ieee80211.h": [
          "File: epan/dissectors/packet-ieee80211.h -> epan/dissectors/packet-ieee80211.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:   proto_node *rsn_first_non_ft_akm_suite;",
          "40: } association_sanity_check_t;",
          "42: void dissect_wifi_p2p_ie(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb,",
          "43:                          int offset, gint size);",
          "44: int dissect_wifi_p2p_public_action(packet_info *pinfo, proto_tree *tree,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: typedef struct ieee80211_tagged_field_data",
          "43: {",
          "44:   int ftype;",
          "45:   association_sanity_check_t* sanity_check;",
          "46:   gboolean isDMG;",
          "47:   proto_item* item_tag;",
          "48:   proto_item* item_tag_length;",
          "49: } ieee80211_tagged_field_data_t;",
          "",
          "---------------"
        ]
      }
    }
  ]
}