{
  "cve_id": "CVE-2016-9374",
  "cve_desc": "In Wireshark 2.2.0 to 2.2.1 and 2.0.0 to 2.0.7, the AllJoyn dissector could crash with a buffer over-read, triggered by network traffic or a capture file. This was addressed in epan/dissectors/packet-alljoyn.c by ensuring that a length variable properly tracked the state of a signature variable.",
  "repo": "wireshark/wireshark",
  "patch_hash": "7dfaec969e67e3aa14b9763d804802ef614c9ddd",
  "patch_info": {
    "commit_hash": "7dfaec969e67e3aa14b9763d804802ef614c9ddd",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/7dfaec969e67e3aa14b9763d804802ef614c9ddd",
    "files": [
      "epan/dissectors/packet-alljoyn.c"
    ],
    "message": "alljoyn: fix signature length adjustments\n\nEnsure that the signature pointer and length always matches, otherwise a\nbuffer overrun (read) is possible.\n\nTested with the original captures from bug 12953, the PDML output is\nstill the same while the fuzzed capture does not crash anymore.\n\nBug: 12953\nChange-Id: I8843a5daf98a79fb19906e824326cdf619164484\nReviewed-on: https://code.wireshark.org/review/18347\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Martin Kaiser <wireshark@kaiser.cx>",
    "before_after_code_files": [
      "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c": [
      "File: epan/dissectors/packet-alljoyn.c -> epan/dissectors/packet-alljoyn.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "759:     gint8 current_type;",
      "760:     gint8 end_type = ARG_INVALID;",
      "766:         if(end_type != ARG_INVALID) {",
      "",
      "[Removed Lines]",
      "762:     while(*(++(*signature)) && --(*signature_length) > 0 && !done) {",
      "763:         current_type = **signature;",
      "",
      "[Added Lines]",
      "762:     while (*signature_length > 0 && **signature && !done) {",
      "763:         current_type = *(++(*signature));",
      "764:         --*signature_length;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "892:             const guint8 *sig_saved;",
      "893:             gint          starting_offset;",
      "894:             gint          number_of_items      = 0;",
      "896:             gint          packet_length        = (gint)tvb_reported_length(tvb);",
      "898:             header_type_name = \"array\";",
      "",
      "[Removed Lines]",
      "895:             guint8        remaining_sig_length = *signature_length;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "928:             add_padding_item(padding_start, offset, tvb, tree);",
      "930:             if(0 == length) {",
      "932:             } else {",
      "933:                 while((offset - starting_offset) < length) {",
      "934:                     const guint8 *sig_pointer;",
      "936:                     number_of_items++;",
      "937:                     sig_pointer = sig_saved;",
      "940:                     offset = parse_arg(tvb,",
      "941:                                        pinfo,",
      "",
      "[Removed Lines]",
      "931:                 advance_to_end_of_signature(signature, &remaining_sig_length);",
      "938:                     remaining_sig_length = *signature_length - 1;",
      "",
      "[Added Lines]",
      "931:                 advance_to_end_of_signature(signature, signature_length);",
      "933:                 guint8 sig_length_saved = *signature_length - 1;",
      "937:                     guint8        remaining_sig_length;",
      "941:                     remaining_sig_length = sig_length_saved;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "987:         header_type_name  = \"signature\";",
      "991:             gint bytes_left = tvb_reported_length_remaining(tvb, offset);",
      "993:             col_add_fstr(pinfo->cinfo, COL_INFO, \"BAD DATA: Signature length is %d. Only %d bytes left in packet.\",",
      "995:             return tvb_reported_length(tvb);",
      "996:         }",
      "1001:         proto_tree_add_item(field_tree, hf_alljoyn_mess_body_signature_length, tvb, offset, 1, encoding);",
      "1002:         offset += 1;",
      "1004:         proto_tree_add_item_ret_string(field_tree, hf_alljoyn_mess_body_signature, tvb, offset, length, ENC_ASCII|ENC_NA, wmem_packet_scope(), signature);",
      "1006:         if(HDR_SIGNATURE == field_code) {",
      "1007:             col_append_fstr(pinfo->cinfo, COL_INFO, \" (%s)\", *signature);",
      "",
      "[Removed Lines]",
      "990:         if(*signature_length + 2 > tvb_reported_length_remaining(tvb, offset)) {",
      "994:                          (gint)(*signature_length), bytes_left);",
      "999:         length = *signature_length + 1;",
      "",
      "[Added Lines]",
      "990:         length = tvb_get_guint8(tvb, offset);",
      "992:         if (length + 2 > tvb_reported_length_remaining(tvb, offset)) {",
      "996:                          length, bytes_left);",
      "1001:         length++;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1268:         break;",
      "1269:     }",
      "1272:         (*signature)++;",
      "1273:         (*signature_length)--;",
      "1274:     }",
      "",
      "[Removed Lines]",
      "1271:     if(*signature && ARG_ARRAY != type_id && HDR_INVALID == field_code) {",
      "",
      "[Added Lines]",
      "1276:     if (*signature && *signature_length > 0 && ARG_ARRAY != type_id && HDR_INVALID == field_code) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1453:         end_of_body = packet_length;",
      "1454:     }",
      "1457:         offset = parse_arg(tvb,",
      "1458:                            pinfo,",
      "1459:                            NULL,",
      "",
      "[Removed Lines]",
      "1456:     while(offset < end_of_body && signature && *signature) {",
      "",
      "[Added Lines]",
      "1461:     while(offset < end_of_body && signature_length > 0 && signature && *signature) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f44fd03955e1023165cb661f9fe05d53ba7ee540",
      "candidate_info": {
        "commit_hash": "f44fd03955e1023165cb661f9fe05d53ba7ee540",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/f44fd03955e1023165cb661f9fe05d53ba7ee540",
        "files": [
          "epan/dissectors/packet-alljoyn.c"
        ],
        "message": "alljoyn: fix signature length adjustments\n\nEnsure that the signature pointer and length always matches, otherwise a\nbuffer overrun (read) is possible.\n\nTested with the original captures from bug 12953, the PDML output is\nstill the same while the fuzzed capture does not crash anymore.\n\nBug: 12953\nChange-Id: I8843a5daf98a79fb19906e824326cdf619164484\nReviewed-on: https://code.wireshark.org/review/18347\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Martin Kaiser <wireshark@kaiser.cx>\n(cherry picked from commit 7dfaec969e67e3aa14b9763d804802ef614c9ddd)\nReviewed-on: https://code.wireshark.org/review/18408\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c"
          ],
          "candidate": [
            "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c": [
          "File: epan/dissectors/packet-alljoyn.c -> epan/dissectors/packet-alljoyn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "759:     gint8 current_type;",
          "760:     gint8 end_type = ARG_INVALID;",
          "766:         if(end_type != ARG_INVALID) {",
          "",
          "[Removed Lines]",
          "762:     while(*(++(*signature)) && --(*signature_length) > 0 && !done) {",
          "763:         current_type = **signature;",
          "",
          "[Added Lines]",
          "762:     while (*signature_length > 0 && **signature && !done) {",
          "763:         current_type = *(++(*signature));",
          "764:         --*signature_length;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "892:             const guint8 *sig_saved;",
          "893:             gint          starting_offset;",
          "894:             gint          number_of_items      = 0;",
          "896:             gint          packet_length        = (gint)tvb_reported_length(tvb);",
          "898:             header_type_name = \"array\";",
          "",
          "[Removed Lines]",
          "895:             guint8        remaining_sig_length = *signature_length;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "928:             add_padding_item(padding_start, offset, tvb, tree);",
          "930:             if(0 == length) {",
          "932:             } else {",
          "933:                 while((offset - starting_offset) < length) {",
          "934:                     const guint8 *sig_pointer;",
          "936:                     number_of_items++;",
          "937:                     sig_pointer = sig_saved;",
          "940:                     offset = parse_arg(tvb,",
          "941:                                        pinfo,",
          "",
          "[Removed Lines]",
          "931:                 advance_to_end_of_signature(signature, &remaining_sig_length);",
          "938:                     remaining_sig_length = *signature_length - 1;",
          "",
          "[Added Lines]",
          "931:                 advance_to_end_of_signature(signature, signature_length);",
          "933:                 guint8 sig_length_saved = *signature_length - 1;",
          "937:                     guint8        remaining_sig_length;",
          "941:                     remaining_sig_length = sig_length_saved;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "987:         header_type_name  = \"signature\";",
          "991:             gint bytes_left = tvb_reported_length_remaining(tvb, offset);",
          "993:             col_add_fstr(pinfo->cinfo, COL_INFO, \"BAD DATA: Signature length is %d. Only %d bytes left in packet.\",",
          "995:             return tvb_reported_length(tvb);",
          "996:         }",
          "1001:         proto_tree_add_item(field_tree, hf_alljoyn_mess_body_signature_length, tvb, offset, 1, encoding);",
          "1002:         offset += 1;",
          "1004:         proto_tree_add_item_ret_string(field_tree, hf_alljoyn_mess_body_signature, tvb, offset, length, ENC_ASCII|ENC_NA, wmem_packet_scope(), signature);",
          "1006:         if(HDR_SIGNATURE == field_code) {",
          "1007:             col_append_fstr(pinfo->cinfo, COL_INFO, \" (%s)\", *signature);",
          "",
          "[Removed Lines]",
          "990:         if(*signature_length + 2 > tvb_reported_length_remaining(tvb, offset)) {",
          "994:                          (gint)(*signature_length), bytes_left);",
          "999:         length = *signature_length + 1;",
          "",
          "[Added Lines]",
          "990:         length = tvb_get_guint8(tvb, offset);",
          "992:         if (length + 2 > tvb_reported_length_remaining(tvb, offset)) {",
          "996:                          length, bytes_left);",
          "1001:         length++;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1268:         break;",
          "1269:     }",
          "1272:         (*signature)++;",
          "1273:         (*signature_length)--;",
          "1274:     }",
          "",
          "[Removed Lines]",
          "1271:     if(*signature && ARG_ARRAY != type_id && HDR_INVALID == field_code) {",
          "",
          "[Added Lines]",
          "1276:     if (*signature && *signature_length > 0 && ARG_ARRAY != type_id && HDR_INVALID == field_code) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1453:         end_of_body = packet_length;",
          "1454:     }",
          "1457:         offset = parse_arg(tvb,",
          "1458:                            pinfo,",
          "1459:                            NULL,",
          "",
          "[Removed Lines]",
          "1456:     while(offset < end_of_body && signature && *signature) {",
          "",
          "[Added Lines]",
          "1461:     while(offset < end_of_body && signature_length > 0 && signature && *signature) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e13a14229c515d52c7485e5aedc27ed8747c765",
      "candidate_info": {
        "commit_hash": "7e13a14229c515d52c7485e5aedc27ed8747c765",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/7e13a14229c515d52c7485e5aedc27ed8747c765",
        "files": [
          "epan/dissectors/packet-alljoyn.c"
        ],
        "message": "alljoyn: fix signature length adjustments\n\nEnsure that the signature pointer and length always matches, otherwise a\nbuffer overrun (read) is possible.\n\nTested with the original captures from bug 12953, the PDML output is\nstill the same while the fuzzed capture does not crash anymore.\n\nConflicts:\n\tepan/dissectors/packet-alljoyn.c\n\nBug: 12953\nChange-Id: I8843a5daf98a79fb19906e824326cdf619164484\nReviewed-on: https://code.wireshark.org/review/18347\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Martin Kaiser <wireshark@kaiser.cx>\n(cherry picked from commit 7dfaec969e67e3aa14b9763d804802ef614c9ddd)\n [Peter: resolved conflicts in context]\nReviewed-on: https://code.wireshark.org/review/18410\nReviewed-by: Anders Broman <a.broman58@gmail.com>\nReviewed-on: https://code.wireshark.org/review/18873\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c"
          ],
          "candidate": [
            "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c": [
          "File: epan/dissectors/packet-alljoyn.c -> epan/dissectors/packet-alljoyn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "676:             guint8       *sig_saved;",
          "677:             gint          starting_offset;",
          "678:             gint          number_of_items      = 0;",
          "680:             gint          packet_length        = (gint)tvb_reported_length(tvb);",
          "682:             header_type_name = \"array\";",
          "",
          "[Removed Lines]",
          "679:             guint8        remaining_sig_length = *signature_length;",
          "",
          "[Added Lines]",
          "679:             guint8        sig_length_saved;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "690:             sig_saved = (*signature) + 1;",
          "691:             offset = ROUND_TO_4BYTE(offset);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "691:             sig_length_saved = *signature_length - 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "707:             offset = starting_offset;",
          "709:             while((offset - starting_offset) < length) {",
          "710:                 guint8 *sig_pointer;",
          "712:                 number_of_items++;",
          "713:                 sig_pointer = sig_saved;",
          "716:                 offset = parse_arg(tvb,",
          "717:                                    pinfo,",
          "",
          "[Removed Lines]",
          "714:                 remaining_sig_length = *signature_length - 1;",
          "",
          "[Added Lines]",
          "713:                 guint8 remaining_sig_length;",
          "717:                 remaining_sig_length = sig_length_saved;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "757:         header_type_name  = \"signature\";",
          "761:             gint bytes_left = tvb_reported_length_remaining(tvb, offset);",
          "763:             col_add_fstr(pinfo->cinfo, COL_INFO, \"BAD DATA: Signature length is %d. Only %d bytes left in packet.\",",
          "765:             return tvb_reported_length(tvb);",
          "766:         }",
          "771:         proto_tree_add_item(field_tree, hf_alljoyn_mess_body_signature_length, tvb, offset, 1, encoding);",
          "772:         offset += 1;",
          "774:         proto_tree_add_item(field_tree, hf_alljoyn_mess_body_signature, tvb, offset, length, ENC_ASCII|ENC_NA);",
          "778:         if(HDR_SIGNATURE == field_code) {",
          "779:             col_append_fstr(pinfo->cinfo, COL_INFO, \" (%s)\", *signature);",
          "",
          "[Removed Lines]",
          "760:         if(*signature_length + 2 > tvb_reported_length_remaining(tvb, offset)) {",
          "764:                          (gint)(*signature_length), bytes_left);",
          "769:         length = *signature_length + 1;",
          "",
          "[Added Lines]",
          "761:         length = tvb_get_guint8(tvb, offset);",
          "763:         if(length + 2 > tvb_reported_length_remaining(tvb, offset)) {",
          "767:                          length, bytes_left);",
          "772:         length++;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1020:         break;",
          "1021:     }",
          "1024:         (*signature)++;",
          "1025:         (*signature_length)--;",
          "1026:     }",
          "",
          "[Removed Lines]",
          "1023:     if(*signature && ARG_ARRAY != type_id && HDR_INVALID == field_code) {",
          "",
          "[Added Lines]",
          "1029:     if(*signature && *signature_length > 0 && ARG_ARRAY != type_id && HDR_INVALID == field_code) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1199:         end_of_body = packet_length;",
          "1200:     }",
          "1203:         offset = parse_arg(tvb,",
          "1204:                            pinfo,",
          "1205:                            NULL,",
          "",
          "[Removed Lines]",
          "1202:     while(offset < end_of_body && *signature) {",
          "",
          "[Added Lines]",
          "1208:     while(offset < end_of_body && signature_length > 0 && signature && *signature) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5770b6559b6e6765c4ef800e85ae42781ea4900",
      "candidate_info": {
        "commit_hash": "a5770b6559b6e6765c4ef800e85ae42781ea4900",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/a5770b6559b6e6765c4ef800e85ae42781ea4900",
        "files": [
          "epan/dissectors/packet-alljoyn.c"
        ],
        "message": "alljoyn: fix signature length adjustments\n\nEnsure that the signature pointer and length always matches, otherwise a\nbuffer overrun (read) is possible.\n\nTested with the original captures from bug 12953, the PDML output is\nstill the same while the fuzzed capture does not crash anymore.\n\nBug: 12953\nChange-Id: I8843a5daf98a79fb19906e824326cdf619164484\nReviewed-on: https://code.wireshark.org/review/18347\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Martin Kaiser <wireshark@kaiser.cx>\n(cherry picked from commit 7dfaec969e67e3aa14b9763d804802ef614c9ddd)\n [Peter: resolved conflicts in context]\nReviewed-on: https://code.wireshark.org/review/18410\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c"
          ],
          "candidate": [
            "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-alljoyn.c||epan/dissectors/packet-alljoyn.c": [
          "File: epan/dissectors/packet-alljoyn.c -> epan/dissectors/packet-alljoyn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "759:     gint8 current_type;",
          "760:     gint8 end_type = ARG_INVALID;",
          "766:         if(end_type != ARG_INVALID) {",
          "",
          "[Removed Lines]",
          "762:     while(*(++(*signature)) && --(*signature_length) > 0 && !done) {",
          "763:         current_type = **signature;",
          "",
          "[Added Lines]",
          "762:     while (*signature_length > 0 && **signature && !done) {",
          "763:         current_type = *(++(*signature));",
          "764:         --*signature_length;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "892:             guint8       *sig_saved;",
          "893:             gint          starting_offset;",
          "894:             gint          number_of_items      = 0;",
          "896:             gint          packet_length        = (gint)tvb_reported_length(tvb);",
          "898:             header_type_name = \"array\";",
          "",
          "[Removed Lines]",
          "895:             guint8        remaining_sig_length = *signature_length;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "928:             add_padding_item(padding_start, offset, tvb, tree);",
          "930:             if(0 == length) {",
          "932:             } else {",
          "933:                 while((offset - starting_offset) < length) {",
          "934:                     guint8 *sig_pointer;",
          "936:                     number_of_items++;",
          "937:                     sig_pointer = sig_saved;",
          "940:                     offset = parse_arg(tvb,",
          "941:                                        pinfo,",
          "",
          "[Removed Lines]",
          "931:                 advance_to_end_of_signature(signature, &remaining_sig_length);",
          "938:                     remaining_sig_length = *signature_length - 1;",
          "",
          "[Added Lines]",
          "931:                 advance_to_end_of_signature(signature, signature_length);",
          "933:                 guint8 sig_length_saved = *signature_length - 1;",
          "937:                     guint8        remaining_sig_length;",
          "941:                     remaining_sig_length = sig_length_saved;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "987:         header_type_name  = \"signature\";",
          "991:             gint bytes_left = tvb_reported_length_remaining(tvb, offset);",
          "993:             col_add_fstr(pinfo->cinfo, COL_INFO, \"BAD DATA: Signature length is %d. Only %d bytes left in packet.\",",
          "995:             return tvb_reported_length(tvb);",
          "996:         }",
          "1001:         proto_tree_add_item(field_tree, hf_alljoyn_mess_body_signature_length, tvb, offset, 1, encoding);",
          "1002:         offset += 1;",
          "1004:         proto_tree_add_item(field_tree, hf_alljoyn_mess_body_signature, tvb, offset, length, ENC_ASCII|ENC_NA);",
          "1008:         if(HDR_SIGNATURE == field_code) {",
          "1009:             col_append_fstr(pinfo->cinfo, COL_INFO, \" (%s)\", *signature);",
          "",
          "[Removed Lines]",
          "990:         if(*signature_length + 2 > tvb_reported_length_remaining(tvb, offset)) {",
          "994:                          (gint)(*signature_length), bytes_left);",
          "999:         length = *signature_length + 1;",
          "",
          "[Added Lines]",
          "990:         length = tvb_get_guint8(tvb, offset);",
          "992:         if (length + 2 > tvb_reported_length_remaining(tvb, offset)) {",
          "996:                          length, bytes_left);",
          "1001:         length++;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1271:         break;",
          "1272:     }",
          "1275:         (*signature)++;",
          "1276:         (*signature_length)--;",
          "1277:     }",
          "",
          "[Removed Lines]",
          "1274:     if(*signature && ARG_ARRAY != type_id && HDR_INVALID == field_code) {",
          "",
          "[Added Lines]",
          "1279:     if (*signature && *signature_length > 0 && ARG_ARRAY != type_id && HDR_INVALID == field_code) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1456:         end_of_body = packet_length;",
          "1457:     }",
          "1460:         offset = parse_arg(tvb,",
          "1461:                            pinfo,",
          "1462:                            NULL,",
          "",
          "[Removed Lines]",
          "1459:     while(offset < end_of_body && signature && *signature) {",
          "",
          "[Added Lines]",
          "1464:     while(offset < end_of_body && signature_length > 0 && signature && *signature) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}