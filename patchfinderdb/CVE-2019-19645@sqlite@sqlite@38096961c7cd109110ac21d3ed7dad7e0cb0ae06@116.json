{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dc2e331ab2b469a6b950a5456b830ade8238e9a8",
      "candidate_info": {
        "commit_hash": "dc2e331ab2b469a6b950a5456b830ade8238e9a8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dc2e331ab2b469a6b950a5456b830ade8238e9a8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/fkey.c"
        ],
        "message": "Add another missing column number translation to the foreign key logic.\n\nFossilOrigin-Name: 32df5edcfef2605009f45d6ef1b97c63a99df07c7b4e00dc70f93001cfb8d81f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/fkey.c||src/fkey.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e6c96ed91e7a96d2bd30ea9df132644ac02d5a321a62f81f8f3984a8e49ed94b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "932:         Vdbe *v = sqlite3GetVdbe(pParse);",
          "933:         int iJump = sqlite3VdbeCurrentAddr(v) + pFKey->nCol + 1;",
          "934:         for(i=0; i<pFKey->nCol; i++){",
          "936:           sqlite3VdbeAddOp2(v, OP_IsNull, iReg, iJump); VdbeCoverage(v);",
          "937:         }",
          "938:         sqlite3VdbeAddOp2(v, OP_FkCounter, pFKey->isDeferred, -1);",
          "",
          "[Removed Lines]",
          "935:           int iReg = pFKey->aCol[i].iFrom + regOld + 1;",
          "",
          "[Added Lines]",
          "935:           int iCol, iReg;",
          "936:           iCol = pFKey->aCol[i].iFrom;",
          "937:           iReg = sqlite3TableColumnToStorage(pFKey->pFrom,iCol) + regOld + 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0aa3231ff0af4873cee2b044d1ba2b55688152b9",
      "candidate_info": {
        "commit_hash": "0aa3231ff0af4873cee2b044d1ba2b55688152b9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0aa3231ff0af4873cee2b044d1ba2b55688152b9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "src/main.c",
          "src/test_fs.c",
          "src/util.c",
          "src/vdbeaux.c",
          "src/vdbesort.c",
          "src/vtab.c"
        ],
        "message": "Enforce the SQLITE_LIMIT_COLUMN limit on virtual tables.\n\nFossilOrigin-Name: 0b6ae032c28e7fe34d81d1769f6e2901addbd1b95cd9a255dcef274061fb0164",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/main.c||src/main.c",
          "src/test_fs.c||src/test_fs.c",
          "src/util.c||src/util.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbesort.c||src/vdbesort.c",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7b771405a9adc3ec191156be4ebe7122f4c698d88d69ae2134c75acb8d8feebb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3769: ){",
          "3770:   char *z;",
          "3772:   if( (n & (n-1))==0 ){",
          "3774:     void *pNew = sqlite3DbRealloc(db, pArray, sz*szEntry);",
          "3775:     if( pNew==0 ){",
          "",
          "[Removed Lines]",
          "3771:   int n = *pnEntry;",
          "3773:     int sz = (n==0) ? 1 : 2*n;",
          "",
          "[Added Lines]",
          "3771:   sqlite3_int64 n = *pnEntry;",
          "3773:     sqlite3_int64 sz = (n==0) ? 1 : 2*n;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3892:   if( (u32)pSrc->nSrc+nExtra>pSrc->nAlloc ){",
          "3893:     SrcList *pNew;",
          "3895:     sqlite3 *db = pParse->db;",
          "3897:     if( pSrc->nSrc+nExtra>=SQLITE_MAX_SRCLIST ){",
          "",
          "[Removed Lines]",
          "3894:     int nAlloc = pSrc->nSrc*2+nExtra;",
          "",
          "[Added Lines]",
          "3894:     sqlite3_int64 nAlloc = 2*(sqlite3_int64)pSrc->nSrc+nExtra;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4648:   }",
          "4650:   if( pWith ){",
          "4652:     pNew = sqlite3DbRealloc(db, pWith, nByte);",
          "4653:   }else{",
          "4654:     pNew = sqlite3DbMallocZero(db, sizeof(*pWith));",
          "",
          "[Removed Lines]",
          "4651:     int nByte = sizeof(*pWith) + (sizeof(pWith->a[1]) * pWith->nCte);",
          "",
          "[Added Lines]",
          "4651:     sqlite3_int64 nByte = sizeof(*pWith) + (sizeof(pWith->a[1]) * pWith->nCte);",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1587:   }else if( (pList->nExpr & (pList->nExpr-1))==0 ){",
          "1588:     ExprList *pNew;",
          "1589:     pNew = sqlite3DbRealloc(db, pList,",
          "1591:     if( pNew==0 ){",
          "1592:       goto no_mem;",
          "1593:     }",
          "",
          "[Removed Lines]",
          "1590:              sizeof(*pList)+(2*pList->nExpr - 1)*sizeof(pList->a[0]));",
          "",
          "[Added Lines]",
          "1590:          sizeof(*pList)+(2*(sqlite3_int64)pList->nExpr-1)*sizeof(pList->a[0]));",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c"
        ],
        "src/test_fs.c||src/test_fs.c": [
          "File: src/test_fs.c -> src/test_fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "740:     fstat(fd, &sbuf);",
          "742:     if( sbuf.st_size>=pCur->nAlloc ){",
          "744:       char *zNew;",
          "745:       if( nNew<1024 ) nNew = 1024;",
          "",
          "[Removed Lines]",
          "743:       int nNew = sbuf.st_size*2;",
          "",
          "[Added Lines]",
          "743:       sqlite3_int64 nNew = sbuf.st_size*2;",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1598:   if( pIn==0 || pIn[1]+nInt > pIn[0] ){",
          "1601:     VList *pOut = sqlite3DbRealloc(db, pIn, nAlloc*sizeof(int));",
          "1602:     if( pOut==0 ) return pIn;",
          "1603:     if( pIn==0 ) pOut[1] = 2;",
          "",
          "[Removed Lines]",
          "1600:     int nAlloc = (pIn ? pIn[0]*2 : 10) + nInt;",
          "",
          "[Added Lines]",
          "1600:     sqlite3_int64 nAlloc = (pIn ? 2*(sqlite3_int64)pIn[0] : 10) + nInt;",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "157: #ifdef SQLITE_TEST_REALLOC_STRESS",
          "159: #else",
          "161:   UNUSED_PARAMETER(nOp);",
          "162: #endif",
          "",
          "[Removed Lines]",
          "158:   int nNew = (v->nOpAlloc>=512 ? v->nOpAlloc*2 : v->nOpAlloc+nOp);",
          "160:   int nNew = (v->nOpAlloc ? v->nOpAlloc*2 : (int)(1024/sizeof(Op)));",
          "",
          "[Added Lines]",
          "158:   sqlite3_int64 nNew = (v->nOpAlloc>=512 ? 2*(sqlite3_int64)v->nOpAlloc",
          "159:                         : (sqlite3_int64)v->nOpAlloc+nOp);",
          "161:   sqlite3_int64 nNew = (v->nOpAlloc ? 2*(sqlite3_int64)v->nOpAlloc",
          "162:                         : (sqlite3_int64)1024/sizeof(Op));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "947: ){",
          "949:   ScanStatus *aNew;",
          "950:   aNew = (ScanStatus*)sqlite3DbRealloc(p->db, p->aScan, nByte);",
          "951:   if( aNew ){",
          "",
          "[Removed Lines]",
          "948:   int nByte = (p->nScan+1) * sizeof(ScanStatus);",
          "",
          "[Added Lines]",
          "950:   sqlite3_int64 nByte = (p->nScan+1) * sizeof(ScanStatus);",
          "",
          "---------------"
        ],
        "src/vdbesort.c||src/vdbesort.c": [
          "File: src/vdbesort.c -> src/vdbesort.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "538:     if( p->nAlloc<nByte ){",
          "539:       u8 *aNew;",
          "541:       while( nByte>nNew ) nNew = nNew*2;",
          "542:       aNew = sqlite3Realloc(p->aAlloc, nNew);",
          "543:       if( !aNew ) return SQLITE_NOMEM_BKPT;",
          "",
          "[Removed Lines]",
          "540:       int nNew = MAX(128, p->nAlloc*2);",
          "",
          "[Added Lines]",
          "540:       sqlite3_int64 nNew = MAX(128, 2*(sqlite3_int64)p->nAlloc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1829:     if( nMin>pSorter->nMemory ){",
          "1830:       u8 *aNew;",
          "1831:       int iListOff = (u8*)pSorter->list.pList - pSorter->list.aMemory;",
          "1833:       while( nNew < nMin ) nNew = nNew*2;",
          "1834:       if( nNew > pSorter->mxPmaSize ) nNew = pSorter->mxPmaSize;",
          "1835:       if( nNew < nMin ) nNew = nMin;",
          "",
          "[Removed Lines]",
          "1832:       int nNew = pSorter->nMemory * 2;",
          "",
          "[Added Lines]",
          "1832:       sqlite3_int64 nNew = 2 * (sqlite3_int64)pSorter->nMemory;",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "307:   char **azModuleArg;",
          "308:   azModuleArg = sqlite3DbRealloc(db, pTable->azModuleArg, nBytes);",
          "309:   if( azModuleArg==0 ){",
          "310:     sqlite3DbFree(db, zArg);",
          "",
          "[Removed Lines]",
          "305: static void addModuleArgument(sqlite3 *db, Table *pTable, char *zArg){",
          "306:   int nBytes = sizeof(char *)*(2+pTable->nModuleArg);",
          "",
          "[Added Lines]",
          "305: static void addModuleArgument(Parse *pParse, Table *pTable, char *zArg){",
          "306:   sqlite3_int64 nBytes = sizeof(char *)*(2+pTable->nModuleArg);",
          "308:   sqlite3 *db = pParse->db;",
          "309:   if( pTable->nModuleArg+3>=db->aLimit[SQLITE_LIMIT_COLUMN] ){",
          "310:     sqlite3ErrorMsg(pParse, \"too many columns on %s\", pTable->zName);",
          "311:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "339:   db = pParse->db;",
          "341:   assert( pTable->nModuleArg==0 );",
          "345:   assert( (pParse->sNameToken.z==pName2->z && pName2->z!=0)",
          "346:        || (pParse->sNameToken.z==pName1->z && pName2->z==0)",
          "347:   );",
          "",
          "[Removed Lines]",
          "342:   addModuleArgument(db, pTable, sqlite3NameFromToken(db, pModuleName));",
          "343:   addModuleArgument(db, pTable, 0);",
          "344:   addModuleArgument(db, pTable, sqlite3DbStrDup(db, pTable->zName));",
          "",
          "[Added Lines]",
          "346:   addModuleArgument(pParse, pTable, sqlite3NameFromToken(db, pModuleName));",
          "347:   addModuleArgument(pParse, pTable, 0);",
          "348:   addModuleArgument(pParse, pTable, sqlite3DbStrDup(db, pTable->zName));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "374:     const char *z = (const char*)pParse->sArg.z;",
          "375:     int n = pParse->sArg.n;",
          "376:     sqlite3 *db = pParse->db;",
          "378:   }",
          "379: }",
          "",
          "[Removed Lines]",
          "377:     addModuleArgument(db, pParse->pNewTable, sqlite3DbStrNDup(db, z, n));",
          "",
          "[Added Lines]",
          "381:     addModuleArgument(pParse, pParse->pNewTable, sqlite3DbStrNDup(db, z, n));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "664:   if( (db->nVTrans%ARRAY_INCR)==0 ){",
          "665:     VTable **aVTrans;",
          "667:     aVTrans = sqlite3DbRealloc(db, (void *)db->aVTrans, nBytes);",
          "668:     if( !aVTrans ){",
          "669:       return SQLITE_NOMEM_BKPT;",
          "",
          "[Removed Lines]",
          "666:     int nBytes = sizeof(sqlite3_vtab *) * (db->nVTrans + ARRAY_INCR);",
          "",
          "[Added Lines]",
          "670:     sqlite3_int64 nBytes = sizeof(sqlite3_vtab*)*",
          "671:                                  ((sqlite3_int64)db->nVTrans + ARRAY_INCR);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1159:   pTab->pSchema = db->aDb[0].pSchema;",
          "1160:   assert( pTab->nModuleArg==0 );",
          "1161:   pTab->iPKey = -1;",
          "1165:   rc = vtabCallConstructor(db, pTab, pMod, pModule->xConnect, &zErr);",
          "1166:   if( rc ){",
          "1167:     sqlite3ErrorMsg(pParse, \"%s\", zErr);",
          "",
          "[Removed Lines]",
          "1162:   addModuleArgument(db, pTab, sqlite3DbStrDup(db, pTab->zName));",
          "1163:   addModuleArgument(db, pTab, 0);",
          "1164:   addModuleArgument(db, pTab, sqlite3DbStrDup(db, pTab->zName));",
          "",
          "[Added Lines]",
          "1167:   addModuleArgument(pParse, pTab, sqlite3DbStrDup(db, pTab->zName));",
          "1168:   addModuleArgument(pParse, pTab, 0);",
          "1169:   addModuleArgument(pParse, pTab, sqlite3DbStrDup(db, pTab->zName));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3cbd2b7245ad0b262d5e0810ac3200e9797db1eb",
      "candidate_info": {
        "commit_hash": "3cbd2b7245ad0b262d5e0810ac3200e9797db1eb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3cbd2b7245ad0b262d5e0810ac3200e9797db1eb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "New assert() to verify the TF_HasprimaryKey flag.\n\nFossilOrigin-Name: 0abace8a7aecca01c8677d07f3ec1bafb289ceffe5bcd60284701a7bf813f415",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 55d43adc894a6b1e0f77bf481dad6dd604a0dc0022e72bbf2e3037f97351971e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1991:     if( p->tnum==1 ) p->tabFlags |= TF_Readonly;",
          "1992:   }",
          "1995:   if( tabOpts & TF_WithoutRowid ){",
          "1996:     if( (p->tabFlags & TF_Autoincrement) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1994:   assert( (p->tabFlags & TF_HasPrimaryKey)==0",
          "1995:        || p->iPKey>=0 || sqlite3PrimaryKeyIndex(p)!=0 );",
          "1996:   assert( (p->tabFlags & TF_HasPrimaryKey)!=0",
          "1997:        || (p->iPKey<0 && sqlite3PrimaryKeyIndex(p)==0) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "676fa25a0f7737d7e233a840a5c2d7dffdccb75a",
      "candidate_info": {
        "commit_hash": "676fa25a0f7737d7e233a840a5c2d7dffdccb75a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/676fa25a0f7737d7e233a840a5c2d7dffdccb75a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "src/pragma.c"
        ],
        "message": "Bug fixes so that \"make test\" once against runs with no errors.\n\nFossilOrigin-Name: 7bfe0f679d8951b3e925bdf549efa0f8d6b514eddeaca69cbfddbd9476cfff5f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "src/pragma.c||src/pragma.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 069351b85f9a706f60d3e98fbc8aaf40c374356b967c0464aede30ead3d9d18b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1009:     iRegStore = regRowid+1;",
          "1010:     for(i=0; i<pTab->nCol; i++, iRegStore++){",
          "1011:       int k;",
          "1012:       assert( i>=nHidden );",
          "1013:       assert( iRegStore==sqlite3ColumnOfTable(pTab,i)+regRowid+1 );",
          "1014:       if( i==pTab->iPKey ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1012:       u32 colFlags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1020:         sqlite3VdbeAddOp1(v, OP_SoftNull, iRegStore);",
          "1021:         continue;",
          "1022:       }",
          "1024:         nHidden++;",
          "1027:           iRegStore--;",
          "1030:           sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1031:         }",
          "1033:       }",
          "1034:       if( pColumn ){",
          "1035:         for(j=0; j<pColumn->nId && pColumn->a[j].idx!=i; j++){}",
          "",
          "[Removed Lines]",
          "1023:       if( pTab->aCol[i].colFlags & COLFLAG_NOINSERT ){",
          "1025:         if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "1028:         }else{",
          "1032:         continue;",
          "",
          "[Added Lines]",
          "1024:       if( ((colFlags = pTab->aCol[i].colFlags) & COLFLAG_NOINSERT)!=0 ){",
          "1026:         if( (colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "1029:           continue;",
          "1030:         }else if( (colFlags & COLFLAG_STORED)!=0 || pColumn==0 ){",
          "1034:           continue;",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1102:       for(i=0, pCol=pTab->aCol; i<pTab->nCol; i++, pCol++){",
          "1103:         int isHidden = 0;",
          "1104:         if( pCol->colFlags & COLFLAG_NOINSERT ){",
          "1107:           if( pCol->colFlags & COLFLAG_VIRTUAL ){",
          "1109:           }else if( pCol->colFlags & COLFLAG_VIRTUAL ){",
          "",
          "[Removed Lines]",
          "1105:           nHidden++;",
          "1106:           if( pPragma->iArg==0 ) continue;",
          "",
          "[Added Lines]",
          "1105:           if( pPragma->iArg==0 ){",
          "1106:             nHidden++;",
          "1107:             continue;",
          "1108:           }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "86223e8d65a6dc10ad19b5c8aa535baba86a7e5c",
      "candidate_info": {
        "commit_hash": "86223e8d65a6dc10ad19b5c8aa535baba86a7e5c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/86223e8d65a6dc10ad19b5c8aa535baba86a7e5c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "In the xfer-optimization, do early detection of when the source and destination index share the same btree, to avoid a long delay prior to reporting the database corruption.\n\nFossilOrigin-Name: af1e5873d44d31466023ae145bdfc6b4191eb48b62e5752c6e683bcf571980e7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 51a95e52fc58d8be2c9c51576dff7258c705735b66d203948f80db017b4c10d2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2275:     if( pSrcIdx==0 ){",
          "2277:     }",
          "2278:   }",
          "2279: #ifndef SQLITE_OMIT_CHECK",
          "2280:   if( pDest->pCheck && sqlite3ExprListCompare(pSrc->pCheck,pDest->pCheck,-1) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2278:     if( pSrcIdx->tnum==pDestIdx->tnum && pSrc->pSchema==pDest->pSchema ){",
          "2280:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}