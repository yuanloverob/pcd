{
  "cve_id": "CVE-2017-5592",
  "cve_desc": "An incorrect implementation of \"XEP-0280: Message Carbons\" in multiple XMPP clients allows a remote attacker to impersonate any user, including contacts, in the vulnerable application's display. This allows for various kinds of social engineering attacks. This CVE is for profanity (0.4.7 - 0.5.0).",
  "repo": "boothj5/profanity",
  "patch_hash": "8e75437a7e43d4c55e861691f74892e666e29b0b",
  "patch_info": {
    "commit_hash": "8e75437a7e43d4c55e861691f74892e666e29b0b",
    "repo": "boothj5/profanity",
    "commit_url": "https://github.com/boothj5/profanity/commit/8e75437a7e43d4c55e861691f74892e666e29b0b",
    "files": [
      "src/xmpp/message.c",
      "tests/functionaltests/test_carbons.c"
    ],
    "message": "Add carbons from check",
    "before_after_code_files": [
      "src/xmpp/message.c||src/xmpp/message.c",
      "tests/functionaltests/test_carbons.c||tests/functionaltests/test_carbons.c"
    ]
  },
  "patch_diff": {
    "src/xmpp/message.c||src/xmpp/message.c": [
      "File: src/xmpp/message.c -> src/xmpp/message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "714:         return TRUE;",
      "715:     }",
      "717:     const gchar *to = xmpp_stanza_get_to(message);",
      "718:     const gchar *from = xmpp_stanza_get_from(message);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "717:     Jid *my_jid = jid_create(connection_get_fulljid());",
      "718:     const char *const stanza_from = xmpp_stanza_get_from(stanza);",
      "719:     Jid *msg_jid = jid_create(stanza_from);",
      "720:     if (g_strcmp0(my_jid->barejid, msg_jid->barejid) != 0) {",
      "721:         log_warning(\"Invalid carbon received, from: %s\", stanza_from);",
      "722:         return TRUE;",
      "723:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     Jid *jid_from = jid_create(from);",
      "724:     Jid *jid_to = jid_create(to);",
      "728:     char *enc_message = NULL;",
      "",
      "[Removed Lines]",
      "725:     Jid *my_jid = jid_create(connection_get_fulljid());",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "tests/functionaltests/test_carbons.c||tests/functionaltests/test_carbons.c": [
      "File: tests/functionaltests/test_carbons.c -> tests/functionaltests/test_carbons.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "70:     assert_true(prof_output_exact(\"unencrypted\"));",
      "72:     stbbr_send(",
      "74:             \"<received xmlns='urn:xmpp:carbons:2'>\"",
      "75:                 \"<forwarded xmlns='urn:xmpp:forward:0'>\"",
      "76:                     \"<message id='prof_msg_7' xmlns='jabber:client' type='chat' lang='en' to='stabber@localhost/profanity' from='buddy1@localhost/mobile'>\"",
      "",
      "[Removed Lines]",
      "73:         \"<message type='chat' to='stabber@localhost/profanity' from='buddy1@localhost'>\"",
      "",
      "[Added Lines]",
      "73:         \"<message type='chat' to='stabber@localhost/profanity' from='stabber@localhost'>\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "948d63d855654a914d703f9e353f493b230dd56c",
      "candidate_info": {
        "commit_hash": "948d63d855654a914d703f9e353f493b230dd56c",
        "repo": "boothj5/profanity",
        "commit_url": "https://github.com/boothj5/profanity/commit/948d63d855654a914d703f9e353f493b230dd56c",
        "files": [
          "src/xmpp/message.c"
        ],
        "message": "Tidy _handle_carbons",
        "before_after_code_files": [
          "src/xmpp/message.c||src/xmpp/message.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/xmpp/message.c||src/xmpp/message.c"
          ],
          "candidate": [
            "src/xmpp/message.c||src/xmpp/message.c"
          ]
        }
      },
      "candidate_diff": {
        "src/xmpp/message.c||src/xmpp/message.c": [
          "File: src/xmpp/message.c -> src/xmpp/message.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "681:     }",
          "683:     const char *name = xmpp_stanza_get_name(carbons);",
          "726:         return TRUE;",
          "727:     }",
          "730: }",
          "732: static void",
          "",
          "[Removed Lines]",
          "684:     if ((g_strcmp0(name, \"received\") == 0) || (g_strcmp0(name, \"sent\")) == 0) {",
          "685:         xmpp_stanza_t *forwarded = xmpp_stanza_get_child_by_ns(carbons, STANZA_NS_FORWARD);",
          "686:         xmpp_stanza_t *message = xmpp_stanza_get_child_by_name(forwarded, STANZA_NAME_MESSAGE);",
          "688:         xmpp_ctx_t *ctx = connection_get_ctx();",
          "690:         const gchar *to = xmpp_stanza_get_to(message);",
          "691:         const gchar *from = xmpp_stanza_get_from(message);",
          "694:         if (!to) to = from;",
          "696:         Jid *jid_from = jid_create(from);",
          "697:         Jid *jid_to = jid_create(to);",
          "698:         Jid *my_jid = jid_create(connection_get_fulljid());",
          "701:         char *message_txt = xmpp_message_get_body(message);",
          "702:         if (message_txt) {",
          "704:             char *enc_message = NULL;",
          "705:             xmpp_stanza_t *x = xmpp_stanza_get_child_by_ns(message, STANZA_NS_ENCRYPTED);",
          "706:             if (x) {",
          "707:                 enc_message = xmpp_stanza_get_text(x);",
          "708:             }",
          "711:             if(g_strcmp0(my_jid->barejid, jid_to->barejid) == 0){",
          "712:                 sv_ev_incoming_carbon(jid_from->barejid, jid_from->resourcepart, message_txt, enc_message);",
          "715:             } else {",
          "716:                 sv_ev_outgoing_carbon(jid_to->barejid, message_txt, enc_message);",
          "717:             }",
          "718:             xmpp_free(ctx, message_txt);",
          "719:             xmpp_free(ctx, enc_message);",
          "720:         }",
          "722:         jid_destroy(jid_from);",
          "723:         jid_destroy(jid_to);",
          "724:         jid_destroy(my_jid);",
          "729:     return FALSE;",
          "",
          "[Added Lines]",
          "684:     if (!name) {",
          "685:         log_error(\"Unable to retrieve stanza name for Carbon\");",
          "686:         return TRUE;",
          "687:     }",
          "689:     if ((g_strcmp0(name, \"received\") != 0) && (g_strcmp0(name, \"sent\") != 0)) {",
          "690:         log_warning(\"Carbon received with unrecognised stanza name: %s\", name);",
          "691:         return TRUE;",
          "692:     }",
          "694:     xmpp_stanza_t *forwarded = xmpp_stanza_get_child_by_ns(carbons, STANZA_NS_FORWARD);",
          "695:     if (!forwarded) {",
          "696:         log_warning(\"Carbon received with no forwarded element\");",
          "697:         return TRUE;",
          "698:     }",
          "700:     xmpp_stanza_t *message = xmpp_stanza_get_child_by_name(forwarded, STANZA_NAME_MESSAGE);",
          "701:     if (!message) {",
          "702:         log_warning(\"Carbon received with no message element\");",
          "703:         return TRUE;",
          "704:     }",
          "706:     char *message_txt = xmpp_message_get_body(message);",
          "707:     if (!message_txt) {",
          "708:         log_warning(\"Carbon received with no message.\");",
          "712:     const gchar *to = xmpp_stanza_get_to(message);",
          "713:     const gchar *from = xmpp_stanza_get_from(message);",
          "716:     if (!to) to = from;",
          "718:     Jid *jid_from = jid_create(from);",
          "719:     Jid *jid_to = jid_create(to);",
          "720:     Jid *my_jid = jid_create(connection_get_fulljid());",
          "723:     char *enc_message = NULL;",
          "724:     xmpp_stanza_t *x = xmpp_stanza_get_child_by_ns(message, STANZA_NS_ENCRYPTED);",
          "725:     if (x) {",
          "726:         enc_message = xmpp_stanza_get_text(x);",
          "727:     }",
          "730:     if (g_strcmp0(my_jid->barejid, jid_to->barejid) == 0) {",
          "731:         sv_ev_incoming_carbon(jid_from->barejid, jid_from->resourcepart, message_txt, enc_message);",
          "734:     } else {",
          "735:         sv_ev_outgoing_carbon(jid_to->barejid, message_txt, enc_message);",
          "736:     }",
          "738:     xmpp_ctx_t *ctx = connection_get_ctx();",
          "739:     xmpp_free(ctx, message_txt);",
          "740:     xmpp_free(ctx, enc_message);",
          "742:     jid_destroy(jid_from);",
          "743:     jid_destroy(jid_to);",
          "744:     jid_destroy(my_jid);",
          "746:     return TRUE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b712820c999e824771c683175ed41b392328ffa0",
      "candidate_info": {
        "commit_hash": "b712820c999e824771c683175ed41b392328ffa0",
        "repo": "boothj5/profanity",
        "commit_url": "https://github.com/boothj5/profanity/commit/b712820c999e824771c683175ed41b392328ffa0",
        "files": [
          "src/xmpp/message.c"
        ],
        "message": "Check barejid in carbons",
        "before_after_code_files": [
          "src/xmpp/message.c||src/xmpp/message.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/xmpp/message.c||src/xmpp/message.c"
          ],
          "candidate": [
            "src/xmpp/message.c||src/xmpp/message.c"
          ]
        }
      },
      "candidate_diff": {
        "src/xmpp/message.c||src/xmpp/message.c": [
          "File: src/xmpp/message.c -> src/xmpp/message.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "717:     Jid *my_jid = jid_create(connection_get_fulljid());",
          "718:     const char *const stanza_from = xmpp_stanza_get_from(stanza);",
          "721:         log_warning(\"Invalid carbon received, from: %s\", stanza_from);",
          "722:         return TRUE;",
          "723:     }",
          "",
          "[Removed Lines]",
          "719:     Jid *msg_jid = jid_create(stanza_from);",
          "720:     if (g_strcmp0(my_jid->barejid, msg_jid->barejid) != 0) {",
          "",
          "[Added Lines]",
          "719:     if (g_strcmp0(my_jid->barejid, stanza_from) != 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "60e124b411d58587aba32a7d29ba5c463ca186be",
      "candidate_info": {
        "commit_hash": "60e124b411d58587aba32a7d29ba5c463ca186be",
        "repo": "boothj5/profanity",
        "commit_url": "https://github.com/boothj5/profanity/commit/60e124b411d58587aba32a7d29ba5c463ca186be",
        "files": [
          "src/xmpp/message.c",
          "tests/functionaltests/test_carbons.c"
        ],
        "message": "Add carbons from check",
        "before_after_code_files": [
          "src/xmpp/message.c||src/xmpp/message.c",
          "tests/functionaltests/test_carbons.c||tests/functionaltests/test_carbons.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/xmpp/message.c||src/xmpp/message.c",
            "tests/functionaltests/test_carbons.c||tests/functionaltests/test_carbons.c"
          ],
          "candidate": [
            "src/xmpp/message.c||src/xmpp/message.c",
            "tests/functionaltests/test_carbons.c||tests/functionaltests/test_carbons.c"
          ]
        }
      },
      "candidate_diff": {
        "src/xmpp/message.c||src/xmpp/message.c": [
          "File: src/xmpp/message.c -> src/xmpp/message.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "714:         return TRUE;",
          "715:     }",
          "717:     const gchar *to = xmpp_stanza_get_to(message);",
          "718:     const gchar *from = xmpp_stanza_get_from(message);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "717:     Jid *my_jid = jid_create(connection_get_fulljid());",
          "718:     const char *const stanza_from = xmpp_stanza_get_from(stanza);",
          "719:     Jid *msg_jid = jid_create(stanza_from);",
          "720:     if (g_strcmp0(my_jid->barejid, msg_jid->barejid) != 0) {",
          "721:         log_warning(\"Invalid carbon received, from: %s\", stanza_from);",
          "722:         return TRUE;",
          "723:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "723:     Jid *jid_from = jid_create(from);",
          "724:     Jid *jid_to = jid_create(to);",
          "728:     char *enc_message = NULL;",
          "",
          "[Removed Lines]",
          "725:     Jid *my_jid = jid_create(connection_get_fulljid());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/functionaltests/test_carbons.c||tests/functionaltests/test_carbons.c": [
          "File: tests/functionaltests/test_carbons.c -> tests/functionaltests/test_carbons.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     assert_true(prof_output_exact(\"unencrypted\"));",
          "72:     stbbr_send(",
          "74:             \"<received xmlns='urn:xmpp:carbons:2'>\"",
          "75:                 \"<forwarded xmlns='urn:xmpp:forward:0'>\"",
          "76:                     \"<message id='prof_msg_7' xmlns='jabber:client' type='chat' lang='en' to='stabber@localhost/profanity' from='buddy1@localhost/mobile'>\"",
          "",
          "[Removed Lines]",
          "73:         \"<message type='chat' to='stabber@localhost/profanity' from='buddy1@localhost'>\"",
          "",
          "[Added Lines]",
          "73:         \"<message type='chat' to='stabber@localhost/profanity' from='stabber@localhost'>\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63d41e3df036c37db0bf4ce1325cca9aac4970d5",
      "candidate_info": {
        "commit_hash": "63d41e3df036c37db0bf4ce1325cca9aac4970d5",
        "repo": "boothj5/profanity",
        "commit_url": "https://github.com/boothj5/profanity/commit/63d41e3df036c37db0bf4ce1325cca9aac4970d5",
        "files": [
          "src/xmpp/message.c",
          "tests/functionaltests/test_carbons.c"
        ],
        "message": "Add carbons from check",
        "before_after_code_files": [
          "src/xmpp/message.c||src/xmpp/message.c",
          "tests/functionaltests/test_carbons.c||tests/functionaltests/test_carbons.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/xmpp/message.c||src/xmpp/message.c",
            "tests/functionaltests/test_carbons.c||tests/functionaltests/test_carbons.c"
          ],
          "candidate": [
            "src/xmpp/message.c||src/xmpp/message.c",
            "tests/functionaltests/test_carbons.c||tests/functionaltests/test_carbons.c"
          ]
        }
      },
      "candidate_diff": {
        "src/xmpp/message.c||src/xmpp/message.c": [
          "File: src/xmpp/message.c -> src/xmpp/message.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "714:         return TRUE;",
          "715:     }",
          "717:     const gchar *to = xmpp_stanza_get_to(message);",
          "718:     const gchar *from = xmpp_stanza_get_from(message);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "717:     Jid *my_jid = jid_create(connection_get_fulljid());",
          "718:     const char *const stanza_from = xmpp_stanza_get_from(stanza);",
          "719:     Jid *msg_jid = jid_create(stanza_from);",
          "720:     if (g_strcmp0(my_jid->barejid, msg_jid->barejid) != 0) {",
          "721:         log_warning(\"Invalid carbon received, from: %s\", stanza_from);",
          "722:         return TRUE;",
          "723:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "723:     Jid *jid_from = jid_create(from);",
          "724:     Jid *jid_to = jid_create(to);",
          "728:     char *enc_message = NULL;",
          "",
          "[Removed Lines]",
          "725:     Jid *my_jid = jid_create(connection_get_fulljid());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/functionaltests/test_carbons.c||tests/functionaltests/test_carbons.c": [
          "File: tests/functionaltests/test_carbons.c -> tests/functionaltests/test_carbons.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     assert_true(prof_output_exact(\"unencrypted\"));",
          "72:     stbbr_send(",
          "74:             \"<received xmlns='urn:xmpp:carbons:2'>\"",
          "75:                 \"<forwarded xmlns='urn:xmpp:forward:0'>\"",
          "76:                     \"<message id='prof_msg_7' xmlns='jabber:client' type='chat' lang='en' to='stabber@localhost/profanity' from='buddy1@localhost/mobile'>\"",
          "",
          "[Removed Lines]",
          "73:         \"<message type='chat' to='stabber@localhost/profanity' from='buddy1@localhost'>\"",
          "",
          "[Added Lines]",
          "73:         \"<message type='chat' to='stabber@localhost/profanity' from='stabber@localhost'>\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}