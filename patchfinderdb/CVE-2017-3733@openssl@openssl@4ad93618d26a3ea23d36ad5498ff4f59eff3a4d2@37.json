{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e597b2ba1165bb94e384f5cd37ea359f926a05cc",
      "candidate_info": {
        "commit_hash": "e597b2ba1165bb94e384f5cd37ea359f926a05cc",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e597b2ba1165bb94e384f5cd37ea359f926a05cc",
        "files": [
          "apps/dsa.c",
          "apps/rsa.c"
        ],
        "message": "Support MSBLOB format if RC4 is disabled\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(cherry picked from commit b6c6898234a12b9c6cdaa8f16fb9156097649ad7)",
        "before_after_code_files": [
          "apps/dsa.c||apps/dsa.c",
          "apps/rsa.c||apps/rsa.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/dsa.c||apps/dsa.c": [
          "File: apps/dsa.c -> apps/dsa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:             i = PEM_write_bio_DSAPrivateKey(out, dsa, enc,",
          "214:                                             NULL, 0, NULL, passout);",
          "215:         }",
          "217:     } else if (outformat == FORMAT_MSBLOB || outformat == FORMAT_PVK) {",
          "218:         EVP_PKEY *pk;",
          "219:         pk = EVP_PKEY_new();",
          "",
          "[Removed Lines]",
          "216: # if !defined(OPENSSL_NO_RSA) && !defined(OPENSSL_NO_RC4)",
          "",
          "[Added Lines]",
          "216: # ifndef OPENSSL_NO_RSA",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "225:                 goto end;",
          "226:             }",
          "227:             assert(private);",
          "228:             i = i2b_PVK_bio(out, pk, pvk_encr, 0, passout);",
          "229:         }",
          "230:         else if (pubin || pubout)",
          "231:             i = i2b_PublicKey_bio(out, pk);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228: #  ifdef OPENSSL_NO_RC4",
          "229:             BIO_printf(bio_err, \"PVK format not supported\\n\");",
          "230:             EVP_PKEY_free(pk);",
          "231:             goto end;",
          "232: #  else",
          "234: #  endif",
          "",
          "---------------"
        ],
        "apps/rsa.c||apps/rsa.c": [
          "File: apps/rsa.c -> apps/rsa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:             i = PEM_write_bio_RSAPrivateKey(out, rsa,",
          "264:                                             enc, NULL, 0, NULL, passout);",
          "265:         }",
          "267:     } else if (outformat == FORMAT_MSBLOB || outformat == FORMAT_PVK) {",
          "268:         EVP_PKEY *pk;",
          "269:         pk = EVP_PKEY_new();",
          "",
          "[Removed Lines]",
          "266: # if !defined(OPENSSL_NO_DSA) && !defined(OPENSSL_NO_RC4)",
          "",
          "[Added Lines]",
          "266: # ifndef OPENSSL_NO_DSA",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "275:                 goto end;",
          "276:             }",
          "277:             assert(private);",
          "278:             i = i2b_PVK_bio(out, pk, pvk_encr, 0, passout);",
          "279:         } else if (pubin || pubout) {",
          "280:             i = i2b_PublicKey_bio(out, pk);",
          "281:         } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278: #  ifdef OPENSSL_NO_RC4",
          "279:             BIO_printf(bio_err, \"PVK format not supported\\n\");",
          "280:             EVP_PKEY_free(pk);",
          "281:             goto end;",
          "282: #  else",
          "284: #  endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b17d15f07ab02b8449db096eaafa56e93b242dee",
      "candidate_info": {
        "commit_hash": "b17d15f07ab02b8449db096eaafa56e93b242dee",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b17d15f07ab02b8449db096eaafa56e93b242dee",
        "files": [
          "crypto/x509/t_x509.c"
        ],
        "message": "Fix undefined behaviour when printing the X509 serial\n\nFound by afl\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nGH: #2230\n(cherry picked from commit 244d7b288f2b9ab7f6a2dbf068eccd6e20d9eef6)",
        "before_after_code_files": [
          "crypto/x509/t_x509.c||crypto/x509/t_x509.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x509/t_x509.c||crypto/x509/t_x509.c": [
          "File: crypto/x509/t_x509.c -> crypto/x509/t_x509.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:             l = -1;",
          "94:         }",
          "95:         if (l != -1) {",
          "96:             if (bs->type == V_ASN1_NEG_INTEGER) {",
          "98:                 neg = \"-\";",
          "99:             } else",
          "100:                 neg = \"\";",
          "102:                 goto err;",
          "103:         } else {",
          "104:             neg = (bs->type == V_ASN1_NEG_INTEGER) ? \" (Negative)\" : \"\";",
          "",
          "[Removed Lines]",
          "97:                 l = -l;",
          "101:             if (BIO_printf(bp, \" %s%lu (%s0x%lx)\\n\", neg, l, neg, l) <= 0)",
          "",
          "[Added Lines]",
          "96:             unsigned long ul;",
          "98:                 ul = 0 - (unsigned long)l;",
          "101:                 ul = l;",
          "103:             if (BIO_printf(bp, \" %s%lu (%s0x%lx)\\n\", neg, ul, neg, ul) <= 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05361483e732b64e2e0a15da4e6ba97c3bbeeca0",
      "candidate_info": {
        "commit_hash": "05361483e732b64e2e0a15da4e6ba97c3bbeeca0",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/05361483e732b64e2e0a15da4e6ba97c3bbeeca0",
        "files": [
          "crypto/o_dir.c"
        ],
        "message": "Have the directory reader use the Unix API on VMS\n\nopendir(), readdir() and closedir() have been available on VMS since\nversion 7.0.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2707)\n(cherry picked from commit d8eaaf15356e1559f0f669b430b0d22b3514f8f0)",
        "before_after_code_files": [
          "crypto/o_dir.c||crypto/o_dir.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/o_dir.c||crypto/o_dir.c": [
          "File: crypto/o_dir.c -> crypto/o_dir.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include \"internal/o_dir.h\"",
          "25: #define LPDIR_H",
          "27: # include \"LPdir_unix.c\"",
          "28: #elif defined OPENSSL_SYS_VMS",
          "29: # include \"LPdir_vms.c\"",
          "",
          "[Removed Lines]",
          "26: #if defined OPENSSL_SYS_UNIX || defined DJGPP",
          "",
          "[Added Lines]",
          "26: #if defined OPENSSL_SYS_UNIX || defined DJGPP \\",
          "27:     (defined __VMS_VER && __VMS_VER >= 70000000)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c565e99a14bf43f11d006d36612fe7943f9e817f",
      "candidate_info": {
        "commit_hash": "c565e99a14bf43f11d006d36612fe7943f9e817f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c565e99a14bf43f11d006d36612fe7943f9e817f",
        "files": [
          "crypto/x509/t_crl.c",
          "crypto/x509/t_req.c"
        ],
        "message": "Fix undefined behaviour when printing the X509 and CRL version\n\nFound by oss-fuzz\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nGH: #2231\n(cherry picked from commit c2ce477f1f3c0a98802fb087b0cf4b0a99ea2b1d)",
        "before_after_code_files": [
          "crypto/x509/t_crl.c||crypto/x509/t_crl.c",
          "crypto/x509/t_req.c||crypto/x509/t_req.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x509/t_crl.c||crypto/x509/t_crl.c": [
          "File: crypto/x509/t_crl.c -> crypto/x509/t_crl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     BIO_printf(out, \"Certificate Revocation List (CRL):\\n\");",
          "46:     l = X509_CRL_get_version(x);",
          "48:     X509_CRL_get0_signature(x, &sig, &sig_alg);",
          "49:     X509_signature_print(out, sig_alg, NULL);",
          "50:     p = X509_NAME_oneline(X509_CRL_get_issuer(x), NULL, 0);",
          "",
          "[Removed Lines]",
          "47:     BIO_printf(out, \"%8sVersion %lu (0x%lx)\\n\", \"\", l + 1, l);",
          "",
          "[Added Lines]",
          "47:     if (l >= 0 && l <= 1)",
          "48:         BIO_printf(out, \"%8sVersion %ld (0x%lx)\\n\", \"\", l + 1, (unsigned long)l);",
          "49:     else",
          "50:         BIO_printf(out, \"%8sVersion unknown (%ld)\\n\", \"\", l);",
          "",
          "---------------"
        ],
        "crypto/x509/t_req.c||crypto/x509/t_req.c": [
          "File: crypto/x509/t_req.c -> crypto/x509/t_req.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     }",
          "61:     if (!(cflag & X509_FLAG_NO_VERSION)) {",
          "62:         l = X509_REQ_get_version(x);",
          "65:     }",
          "66:     if (!(cflag & X509_FLAG_NO_SUBJECT)) {",
          "67:         if (BIO_printf(bp, \"        Subject:%c\", mlch) <= 0)",
          "",
          "[Removed Lines]",
          "63:         if (BIO_printf(bp, \"%8sVersion: %ld (0x%lx)\\n\", \"\", l + 1, l) <= 0)",
          "64:             goto err;",
          "",
          "[Added Lines]",
          "63:         if (l >= 0 && l <= 2) {",
          "64:             if (BIO_printf(bp, \"%8sVersion: %ld (0x%lx)\\n\", \"\", l + 1, (unsigned long)l) <= 0)",
          "65:                 goto err;",
          "66:         } else {",
          "67:             if (BIO_printf(bp, \"%8sVersion: Unknown (%ld)\\n\", \"\", l) <= 0)",
          "68:                 goto err;",
          "69:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41371618f72b93bdf3e0a4be369e4df6b65334cd",
      "candidate_info": {
        "commit_hash": "41371618f72b93bdf3e0a4be369e4df6b65334cd",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/41371618f72b93bdf3e0a4be369e4df6b65334cd",
        "files": [
          "INSTALL",
          "NOTES.UNIX"
        ],
        "message": "Add NOTES.UNIX, with a description on how to deal with runpaths\n\n[skip ci]\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2818)\n(cherry picked from commit 45632ee3bb7ab4ed405d5251d76dd5b94d782adb)",
        "before_after_code_files": [
          "NOTES.UNIX||NOTES.UNIX"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "NOTES.UNIX||NOTES.UNIX": [
          "File: NOTES.UNIX -> NOTES.UNIX",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2:  NOTES FOR UNIX LIKE PLATFORMS",
          "3:  =============================",
          "5:  For Unix/POSIX runtime systems on Windows, please see NOTES.WIN.",
          "8:  Shared libraries and installation in non-standard locations",
          "9:  -----------------------------------------------------------",
          "11:  Binaries on Unix variants expect to find shared libraries in standard",
          "12:  locations, such as /usr/lib, /usr/local/lib and some other locations",
          "13:  configured in the system (for example /etc/ld.so.conf on some systems).",
          "14:  If the libraries are installed in non-standard locations, binaries",
          "15:  will not find them and therefore fail to run unless they get a bit of",
          "16:  help from a defined RPATH or RUNPATH.  This can be applied by adding",
          "17:  the appropriate linker flags to the configuration command, such as",
          "18:  this (/usr/local/ssl was the default location for OpenSSL installation",
          "19:  in versions before 1.1.0):",
          "21:     $ ./config --prefix=/usr/local/ssl --openssldir=/usr/local/ssl \\",
          "22:         -Wl,-rpath,/usr/local/ssl/lib",
          "24:  Because the actual library location may vary further (for example on",
          "25:  multilib installations), there is a convenience variable in Makefile",
          "26:  that holds the exact installation directory and that can be used like",
          "27:  this:",
          "29:     $ ./config --prefix=/usr/local/ssl --openssldir=/usr/local/ssl \\",
          "30:         -Wl,-rpath,'$(LIBRPATH)'",
          "",
          "---------------"
        ]
      }
    }
  ]
}