{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dac7e69dc2bbfa895cb31c2f9305c11ff4fba51c",
      "candidate_info": {
        "commit_hash": "dac7e69dc2bbfa895cb31c2f9305c11ff4fba51c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dac7e69dc2bbfa895cb31c2f9305c11ff4fba51c",
        "files": [
          "ext/lsm1/Makefile",
          "ext/lsm1/test/lsm1_simple.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add some extra tests for the lsm virtual table module.\n\nFossilOrigin-Name: 4cb009b0f724f72eaea90e45488122f7c2a7d0caf31a8422da4060469507e921",
        "before_after_code_files": [
          "ext/lsm1/test/lsm1_simple.test||ext/lsm1/test/lsm1_simple.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/lsm1/test/lsm1_simple.test||ext/lsm1/test/lsm1_simple.test": [
          "File: ext/lsm1/test/lsm1_simple.test -> ext/lsm1/test/lsm1_simple.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: do_execsql_test 211 {",
          "89:   SELECT quote(a), quote(lsm1_key), quote(lsm1_value), '|' FROM x1;",
          "90: } {'12' X'3132' X'05320000000000000A401FFB42ABE9DB' | '15' X'3135' X'4284C6' | '8' X'38' X'2162616E6A6F1633323105' |}",
          "93: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91: do_execsql_test 212 {",
          "92:   SELECT quote(a), quote(lsm1_key), quote(lsm1_value) FROM x1 WHERE a='12';",
          "93: } {'12' X'3132' X'05320000000000000A401FFB42ABE9DB'}",
          "95: #-------------------------------------------------------------------------",
          "96: reset_db",
          "97: forcedelete testlsm.db",
          "98: load_lsm1_vtab db",
          "99: do_execsql_test 300 {",
          "100:   CREATE VIRTUAL TABLE x1 USING lsm1(testlsm.db,a,TEXT,b,c,d);",
          "101: }",
          "102: do_eqp_test 310 {",
          "103:   SELECT * FROM x1 WHERE a=?",
          "104: } {SCAN TABLE x1 VIRTUAL TABLE INDEX 0:}",
          "106: do_eqp_test 320 {",
          "107:   SELECT * FROM x1 WHERE a>?",
          "108: } {SCAN TABLE x1 VIRTUAL TABLE INDEX 2:}",
          "110: do_eqp_test 330 {",
          "111:   SELECT * FROM x1 WHERE a<?",
          "112: } {SCAN TABLE x1 VIRTUAL TABLE INDEX 3:}",
          "113: do_eqp_test 340 {",
          "114:   SELECT * FROM x1 WHERE a BETWEEN ? AND ?",
          "115: } {SCAN TABLE x1 VIRTUAL TABLE INDEX 1:}",
          "117: #-------------------------------------------------------------------------",
          "118: reset_db",
          "119: forcedelete testlsm.db",
          "120: load_lsm1_vtab db",
          "121: do_execsql_test 400 {",
          "122:   CREATE VIRTUAL TABLE x1 USING lsm1(testlsm.db,a,TEXT,b);",
          "123:   INSERT INTO x1 VALUES('one', 1);",
          "124:   INSERT INTO x1 VALUES('two', 2);",
          "125:   INSERT INTO x1 VALUES('three', 3);",
          "126:   INSERT INTO x1 VALUES('four', 4);",
          "127:   INSERT INTO x1 VALUES('five', 5);",
          "128: }",
          "129: do_execsql_test 410 {",
          "130:   SELECT b FROM x1 WHERE a = 'two'",
          "131: } {2}",
          "132: do_execsql_test 411 {",
          "133:   SELECT b FROM x1 WHERE a = 'one'",
          "134: } {1}",
          "135: do_execsql_test 412 {",
          "136:   SELECT b FROM x1 WHERE a = 'five'",
          "137: } {5}",
          "139: do_execsql_test 420 {",
          "140:   SELECT b FROM x1 WHERE a BETWEEN 'one' AND 'three';",
          "141: } {1 3}",
          "142: do_execsql_test 421 {",
          "143:   SELECT b FROM x1 WHERE a BETWEEN 'five' AND 'two';",
          "144: } {5 4 1 3 2}",
          "145: do_execsql_test 421 {",
          "146:   SELECT b FROM x1 WHERE a > 'five';",
          "147: } {4 1 3 2}",
          "148: do_execsql_test 421 {",
          "149:   SELECT b FROM x1 WHERE a <= 'three';",
          "150: } {3 1 4 5}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7496e872a1a50ac65ad04709365a43038fb015ac9c690196de3cb02ce54c2e57",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29974f7b91417afa9eb237ac5dd37f2219cd5a0f",
      "candidate_info": {
        "commit_hash": "29974f7b91417afa9eb237ac5dd37f2219cd5a0f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/29974f7b91417afa9eb237ac5dd37f2219cd5a0f",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/gencol1.test"
        ],
        "message": "Add a few simple TCL test cases for generated columns.  (Full test coverage of the generated column logic is provided separately by TH3.)\n\nFossilOrigin-Name: acedb5c7f7dc1d68bef62098d42ca59e1be7a5083bb03dc07c03b9f9d817158b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 329820673a12ff6a6c8759f40989d4ccf272441064b0366a5f491695b55ad0e9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:   SELECT * FROM t1;",
          "25: } {integer 0}",
          "27: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: foreach {tn schema} {",
          "28: 1 {",
          "29:    CREATE TABLE t1(",
          "30:      a INT,",
          "31:      b TEXT,",
          "32:      c ANY,",
          "33:      w INT GENERATED ALWAYS AS (a*10),",
          "34:      x TEXT AS (typeof(c)),",
          "35:      y TEXT AS (substr(b,a,a+2))",
          "36:    );",
          "37:   }",
          "38: 2 {",
          "39:    CREATE TABLE t1(",
          "40:      w INT GENERATED ALWAYS AS (a*10),",
          "41:      x TEXT AS (typeof(c)),",
          "42:      y TEXT AS (substr(b,a,a+2)),",
          "43:      a INT,",
          "44:      b TEXT,",
          "45:      c ANY",
          "46:    );",
          "47:   }",
          "48: 3 {",
          "49:    CREATE TABLE t1(",
          "50:      w INT GENERATED ALWAYS AS (a*10),",
          "51:      a INT,",
          "52:      x TEXT AS (typeof(c)) STORED,",
          "53:      b TEXT,",
          "54:      y TEXT AS (substr(b,a,a+2)),",
          "55:      c ANY",
          "56:    );",
          "57:   }",
          "58: 4 {",
          "59:    CREATE TABLE t1(",
          "60:      a INTEGER PRIMARY KEY,",
          "61:      w INT GENERATED ALWAYS AS (a*10),",
          "62:      b TEXT,",
          "63:      x TEXT AS (typeof(c)),",
          "64:      y TEXT AS (substr(b,a,a+2)) STORED,",
          "65:      c ANY",
          "66:    );",
          "67:   }",
          "68: 5 {",
          "69:    CREATE TABLE t1(",
          "70:      w INT GENERATED ALWAYS AS (a*10),",
          "71:      a INT,",
          "72:      x TEXT AS (typeof(c)),",
          "73:      b TEXT,",
          "74:      y TEXT AS (substr(b,a,a+2)) STORED,",
          "75:      c ANY,",
          "76:      PRIMARY KEY(a,b)",
          "77:    ) WITHOUT ROWID;",
          "78:   }",
          "79: 6 {",
          "80:    CREATE TABLE t1(",
          "81:      w INT GENERATED ALWAYS AS (m*5),",
          "82:      m INT AS (a*2) STORED,",
          "83:      a INT,",
          "84:      x TEXT AS (typeof(c)),",
          "85:      b TEXT,",
          "86:      y TEXT AS (substr(b,m/2,m/2+2)) STORED,",
          "87:      c ANY,",
          "88:      PRIMARY KEY(a,b)",
          "89:    );",
          "90:   }",
          "91: 7 {",
          "92:    CREATE TABLE t1(",
          "93:      w INT GENERATED ALWAYS AS (m*5),",
          "94:      m INT AS (a*2) NOT NULL,",
          "95:      a INT,",
          "96:      x TEXT AS (typeof(c)) CHECK (x<>'blank'),",
          "97:      b TEXT,",
          "98:      y TEXT AS (substr(b,m/2,m/2+2)) STORED,",
          "99:      c ANY,",
          "100:      PRIMARY KEY(b,a)",
          "101:    ) WITHOUT ROWID;",
          "102:   }",
          "103: } {",
          "104:   catch {db close}",
          "105:   sqlite3 db :memory:",
          "106:   db eval $schema",
          "107:   do_execsql_test gencol1-2.$tn.100 {",
          "108:     INSERT INTO t1(a,b,c) VALUES(1,'abcdef',5.5),(3,'cantaloupe',NULL);",
          "109:     SELECT w, x, y, '|' FROM t1 ORDER BY a;",
          "110:   } {10 real abc | 30 null ntalo |}",
          "111:   do_execsql_test gencol1-2.$tn.101 {",
          "112:     SELECT w, x, y, '|' FROM t1 ORDER BY w;",
          "113:   } {10 real abc | 30 null ntalo |}",
          "114:   do_execsql_test gencol1-2.$tn.102 {",
          "115:     SELECT a FROM t1 WHERE w=30;",
          "116:   } {3}",
          "117:   do_execsql_test gencol1-2.$tn.103 {",
          "118:     SELECT a FROM t1 WHERE x='real';",
          "119:   } {1}",
          "120:   do_execsql_test gencol1-2.$tn.104 {",
          "121:     SELECT a FROM t1 WHERE y LIKE '%tal%' OR x='real' ORDER BY b;",
          "122:   } {1 3}",
          "123:   do_execsql_test gencol1-2.$tn.110 {",
          "124:     CREATE INDEX t1w ON t1(w);",
          "125:     SELECT a FROM t1 WHERE w=10;",
          "126:   } {1}",
          "127:   do_execsql_test gencol1-2.$tn.120 {",
          "128:     CREATE INDEX t1x ON t1(x) WHERE w BETWEEN 20 AND 40;",
          "129:     SELECT a FROM t1 WHERE x='null' AND w BETWEEN 20 AND 40;",
          "130:   } {3}",
          "131:   do_execsql_test gencol1-2.$tn.121 {",
          "132:     SELECT a FROM t1 WHERE x='real';",
          "133:   } {1}",
          "134:   do_execsql_test gencol1-2.$tn.130 {",
          "135:     VACUUM;",
          "136:     PRAGMA integrity_check;",
          "137:   } {ok}",
          "138:   do_execsql_test gencol1-2.$tn.140 {",
          "139:     UPDATE t1 SET a=a+100 WHERE w<20;",
          "140:     SELECT a, w, '|' FROM t1 ORDER BY w;",
          "141:   } {3 30 | 101 1010 |}",
          "142:   do_execsql_test gencol1-2.$tn.150 {",
          "143:     INSERT INTO t1 VALUES(4,'jambalaya','Chef John'),(15,87719874135,0);",
          "144:     SELECT w, x, y, '|' FROM t1 ORDER BY w;",
          "145:   } {30 null ntalo | 40 text balaya | 150 integer {} | 1010 real {} |}",
          "146: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ac2ee0a74ad3055140d614261c7e9d7620e74c2",
      "candidate_info": {
        "commit_hash": "7ac2ee0a74ad3055140d614261c7e9d7620e74c2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7ac2ee0a74ad3055140d614261c7e9d7620e74c2",
        "files": [
          "autoconf/Makefile.msc",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Sync up the autoconf makefile for MSVC.\n\nFossilOrigin-Name: ecbae90aef63ed6d07d474416900db36ff6dd9c2ed1bbb5f4d883b6838156be1",
        "before_after_code_files": [
          "autoconf/Makefile.msc||autoconf/Makefile.msc",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "autoconf/Makefile.msc||autoconf/Makefile.msc": [
          "File: autoconf/Makefile.msc -> autoconf/Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "433: # will run on the platform that is doing the build.",
          "434: #",
          "435: !IF $(USE_FULLWARN)!=0",
          "437: !ELSE",
          "439: !ENDIF",
          "441: # Check if assembly code listings should be generated for the source",
          "",
          "[Removed Lines]",
          "436: BCC = $(NCC) -nologo -W4 $(CCOPTS) $(BCCOPTS)",
          "438: BCC = $(NCC) -nologo -W3 $(CCOPTS) $(BCCOPTS)",
          "",
          "[Added Lines]",
          "436: BCC = $(NCC) -nologo -W4 -Fd$*.pdb $(CCOPTS) $(BCCOPTS)",
          "438: BCC = $(NCC) -nologo -W3 -Fd$*.pdb $(CCOPTS) $(BCCOPTS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "808: # Command line prefixes for compiling code, compiling resources,",
          "809: # linking, etc.",
          "810: #",
          "812: LTRCOMPILE = $(RCC) -r",
          "813: LTLIB = lib.exe",
          "814: LTLINK = $(TCC) -Fe$@",
          "",
          "[Removed Lines]",
          "811: LTCOMPILE = $(TCC) -Fo$@",
          "",
          "[Added Lines]",
          "811: LTCOMPILE = $(TCC) -Fo$@ -Fd$*.pdb",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 908c4c891fa7472b43d232bde7d3789105c5f5b2cfaf6652bf6d5829236933cf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "59c56796917a28041e8f315abe1a376508413961",
      "candidate_info": {
        "commit_hash": "59c56796917a28041e8f315abe1a376508413961",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/59c56796917a28041e8f315abe1a376508413961",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "Fix incorrect SQL generated by the Lemon change of the previous check-in.\n\nFossilOrigin-Name: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 329cbb372d4d77f774f01a87d104c40ef42d713afbe76195b65f5ca205c5ea7b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4234:     for(i=0, rp=lemp->rule; rp; rp=rp->next, i++){",
          "4235:       assert( i==rp->iRule );",
          "4236:       fprintf(sql,",
          "4238:         rp->iRule, rp->lhs->index",
          "4239:       );",
          "4240:       writeRuleText(sql, rp);",
          "",
          "[Removed Lines]",
          "4237:         \"INSERT INTO rule(ruleid,lhs)VALUES(%d,%d,'\",",
          "",
          "[Added Lines]",
          "4237:         \"INSERT INTO rule(ruleid,lhs,txt)VALUES(%d,%d,'\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a6d01bff53cc0dd705f8d73525774d5cde52cb9",
      "candidate_info": {
        "commit_hash": "9a6d01bff53cc0dd705f8d73525774d5cde52cb9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9a6d01bff53cc0dd705f8d73525774d5cde52cb9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/printf.c"
        ],
        "message": "Performance improvement in the parsing of options to %-formats in the printf implementation.\n\nFossilOrigin-Name: 40d8f8ae87abf928542c4e558a4c3a3eab18776a3e8db7ca1c5e5f744ca0bce3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/printf.c||src/printf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4ca9d5d53d41d08fbce29f9da8cc0948df9c4c3136210af88b499cf889b5ccb8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/printf.c||src/printf.c": [
          "File: src/printf.c -> src/printf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:     flag_leftjustify = flag_prefix = cThousand =",
          "238:      flag_alternateform = flag_altform2 = flag_zeropad = 0;",
          "239:     done = 0;",
          "240:     do{",
          "241:       switch( c ){",
          "242:         case '-':   flag_leftjustify = 1;     break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:     width = 0;",
          "241:     flag_long = 0;",
          "242:     precision = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247:         case '0':   flag_zeropad = 1;         break;",
          "248:         case ',':   cThousand = ',';          break;",
          "249:         default:    done = 1;                 break;",
          "274: #ifdef SQLITE_PRINTF_PRECISION_LIMIT",
          "278: #endif",
          "288:         }",
          "292:         }",
          "297:           c = *++fmt;",
          "306: #ifdef SQLITE_PRINTF_PRECISION_LIMIT",
          "310: #endif",
          "320:       }",
          "325:     infop = &fmtinfo[0];",
          "326:     xtype = etINVALID;",
          "",
          "[Removed Lines]",
          "250:       }",
          "251:     }while( !done && (c=(*++fmt))!=0 );",
          "253:     if( c=='*' ){",
          "254:       if( bArgList ){",
          "255:         width = (int)getIntArg(pArgList);",
          "256:       }else{",
          "257:         width = va_arg(ap,int);",
          "258:       }",
          "259:       if( width<0 ){",
          "260:         flag_leftjustify = 1;",
          "261:         width = width >= -2147483647 ? -width : 0;",
          "262:       }",
          "263:       c = *++fmt;",
          "264:     }else{",
          "265:       unsigned wx = 0;",
          "266:       while( c>='0' && c<='9' ){",
          "267:         wx = wx*10 + c - '0';",
          "268:         c = *++fmt;",
          "269:       }",
          "270:       testcase( wx>0x7fffffff );",
          "271:       width = wx & 0x7fffffff;",
          "272:     }",
          "273:     assert( width>=0 );",
          "275:     if( width>SQLITE_PRINTF_PRECISION_LIMIT ){",
          "276:       width = SQLITE_PRINTF_PRECISION_LIMIT;",
          "277:     }",
          "281:     if( c=='.' ){",
          "282:       c = *++fmt;",
          "283:       if( c=='*' ){",
          "284:         if( bArgList ){",
          "285:           precision = (int)getIntArg(pArgList);",
          "286:         }else{",
          "287:           precision = va_arg(ap,int);",
          "289:         c = *++fmt;",
          "290:         if( precision<0 ){",
          "291:           precision = precision >= -2147483647 ? -precision : -1;",
          "293:       }else{",
          "294:         unsigned px = 0;",
          "295:         while( c>='0' && c<='9' ){",
          "296:           px = px*10 + c - '0';",
          "298:         }",
          "299:         testcase( px>0x7fffffff );",
          "300:         precision = px & 0x7fffffff;",
          "301:       }",
          "302:     }else{",
          "303:       precision = -1;",
          "304:     }",
          "305:     assert( precision>=(-1) );",
          "307:     if( precision>SQLITE_PRINTF_PRECISION_LIMIT ){",
          "308:       precision = SQLITE_PRINTF_PRECISION_LIMIT;",
          "309:     }",
          "314:     if( c=='l' ){",
          "315:       flag_long = 1;",
          "316:       c = *++fmt;",
          "317:       if( c=='l' ){",
          "318:         flag_long = 2;",
          "319:         c = *++fmt;",
          "321:     }else{",
          "322:       flag_long = 0;",
          "323:     }",
          "",
          "[Added Lines]",
          "253:         case 'l': {",
          "254:           flag_long = 1;",
          "255:           c = *++fmt;",
          "256:           if( c=='l' ){",
          "257:             c = *++fmt;",
          "258:             flag_long = 2;",
          "259:           }",
          "260:           done = 1;",
          "261:           break;",
          "262:         }",
          "263:         case '1': case '2': case '3': case '4': case '5':",
          "264:         case '6': case '7': case '8': case '9': {",
          "265:           unsigned wx = c - '0';",
          "266:           while( (c = *++fmt)>='0' && c<='9' ){",
          "267:             wx = wx*10 + c - '0';",
          "268:           }",
          "269:           testcase( wx>0x7fffffff );",
          "270:           width = wx & 0x7fffffff;",
          "272:           if( width>SQLITE_PRINTF_PRECISION_LIMIT ){",
          "273:             width = SQLITE_PRINTF_PRECISION_LIMIT;",
          "274:           }",
          "276:           if( c!='.' && c!='l' ){",
          "277:             done = 1;",
          "278:           }else{",
          "279:             fmt--;",
          "280:           }",
          "281:           break;",
          "283:         case '*': {",
          "284:           if( bArgList ){",
          "285:             width = (int)getIntArg(pArgList);",
          "286:           }else{",
          "287:             width = va_arg(ap,int);",
          "288:           }",
          "289:           if( width<0 ){",
          "290:             flag_leftjustify = 1;",
          "291:             width = width >= -2147483647 ? -width : 0;",
          "292:           }",
          "293: #ifdef SQLITE_PRINTF_PRECISION_LIMIT",
          "294:           if( width>SQLITE_PRINTF_PRECISION_LIMIT ){",
          "295:             width = SQLITE_PRINTF_PRECISION_LIMIT;",
          "296:           }",
          "297: #endif",
          "298:           if( (c = fmt[1])!='.' && c!='l' ){",
          "299:             c = *++fmt;",
          "300:             done = 1;",
          "301:           }",
          "302:           break;",
          "304:         case '.': {",
          "306:           if( c=='*' ){",
          "307:             if( bArgList ){",
          "308:               precision = (int)getIntArg(pArgList);",
          "309:             }else{",
          "310:               precision = va_arg(ap,int);",
          "311:             }",
          "312:             if( precision<0 ){",
          "313:               precision = precision >= -2147483647 ? -precision : -1;",
          "314:             }",
          "315:             c = *++fmt;",
          "316:           }else{",
          "317:             unsigned px = 0;",
          "318:             while( c>='0' && c<='9' ){",
          "319:               px = px*10 + c - '0';",
          "320:               c = *++fmt;",
          "321:             }",
          "322:             testcase( px>0x7fffffff );",
          "323:             precision = px & 0x7fffffff;",
          "324:           }",
          "326:           if( precision>SQLITE_PRINTF_PRECISION_LIMIT ){",
          "327:             precision = SQLITE_PRINTF_PRECISION_LIMIT;",
          "328:           }",
          "330:           if( c=='l' ){",
          "331:             --fmt;",
          "332:           }else{",
          "333:             done = 1;",
          "334:           }",
          "335:           break;",
          "336:         }",
          "338:     }while( !done && (c=(*++fmt))!=0 );",
          "",
          "---------------"
        ]
      }
    }
  ]
}