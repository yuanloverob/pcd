{
  "cve_id": "CVE-2020-29373",
  "cve_desc": "An issue was discovered in fs/io_uring.c in the Linux kernel before 5.6. It unsafely handles the root directory during path lookups, and thus a process inside a mount namespace can escape to unintended filesystem locations, aka CID-ff002b30181d.",
  "repo": "torvalds/linux",
  "patch_hash": "ff002b30181d30cdfbca316dadd099c3ca0d739c",
  "patch_info": {
    "commit_hash": "ff002b30181d30cdfbca316dadd099c3ca0d739c",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/ff002b30181d30cdfbca316dadd099c3ca0d739c",
    "files": [
      "fs/io_uring.c"
    ],
    "message": "io_uring: grab ->fs as part of async preparation\n\nThis passes it in to io-wq, so it assumes the right fs_struct when\nexecuting async work that may need to do lookups.\n\nCc: stable@vger.kernel.org # 5.3+\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
    "before_after_code_files": [
      "fs/io_uring.c||fs/io_uring.c"
    ]
  },
  "patch_diff": {
    "fs/io_uring.c||fs/io_uring.c": [
      "File: fs/io_uring.c -> fs/io_uring.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "75: #include <linux/fsnotify.h>",
      "76: #include <linux/fadvise.h>",
      "77: #include <linux/eventpoll.h>",
      "79: #define CREATE_TRACE_POINTS",
      "80: #include <trace/events/io_uring.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78: #include <linux/fs_struct.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "611:  unsigned  not_supported : 1;",
      "613:  unsigned  file_table : 1;",
      "614: };",
      "616: static const struct io_op_def io_op_defs[] = {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "616:  unsigned  needs_fs : 1;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "653:   .needs_mm  = 1,",
      "654:   .needs_file  = 1,",
      "655:   .unbound_nonreg_file = 1,",
      "656:  },",
      "657:  [IORING_OP_RECVMSG] = {",
      "658:   .async_ctx  = 1,",
      "659:   .needs_mm  = 1,",
      "660:   .needs_file  = 1,",
      "661:   .unbound_nonreg_file = 1,",
      "662:  },",
      "663:  [IORING_OP_TIMEOUT] = {",
      "664:   .async_ctx  = 1,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "659:   .needs_fs  = 1,",
      "666:   .needs_fs  = 1,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "689:   .needs_file  = 1,",
      "690:   .fd_non_neg  = 1,",
      "691:   .file_table  = 1,",
      "692:  },",
      "693:  [IORING_OP_CLOSE] = {",
      "694:   .needs_file  = 1,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "697:   .needs_fs  = 1,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "702:   .needs_mm  = 1,",
      "703:   .needs_file  = 1,",
      "704:   .fd_non_neg  = 1,",
      "705:  },",
      "706:  [IORING_OP_READ] = {",
      "707:   .needs_mm  = 1,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "711:   .needs_fs  = 1,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "733:   .needs_file  = 1,",
      "734:   .fd_non_neg  = 1,",
      "735:   .file_table  = 1,",
      "736:  },",
      "737:  [IORING_OP_EPOLL_CTL] = {",
      "738:   .unbound_nonreg_file = 1,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "743:   .needs_fs  = 1,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "907:  }",
      "908:  if (!req->work.creds)",
      "909:   req->work.creds = get_current_cred();",
      "910: }",
      "912: static inline void io_req_work_drop_env(struct io_kiocb *req)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "918:  if (!req->work.fs && def->needs_fs) {",
      "919:   spin_lock(&current->fs->lock);",
      "920:   if (!current->fs->in_exec) {",
      "921:    req->work.fs = current->fs;",
      "922:    req->work.fs->users++;",
      "923:   } else {",
      "924:    req->work.flags |= IO_WQ_WORK_CANCEL;",
      "925:   }",
      "926:   spin_unlock(&current->fs->lock);",
      "927:  }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "919:   put_cred(req->work.creds);",
      "920:   req->work.creds = NULL;",
      "921:  }",
      "922: }",
      "924: static inline bool io_prep_async_work(struct io_kiocb *req,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "940:  if (req->work.fs) {",
      "941:   struct fs_struct *fs = req->work.fs;",
      "943:   spin_lock(&req->work.fs->lock);",
      "944:   if (--fs->users)",
      "945:    fs = NULL;",
      "946:   spin_unlock(&req->work.fs->lock);",
      "947:   if (fs)",
      "948:    free_fs_struct(fs);",
      "949:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "edcdfcc149a8d0c11d4dd2b23b5338af22e31a5f",
      "candidate_info": {
        "commit_hash": "edcdfcc149a8d0c11d4dd2b23b5338af22e31a5f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/edcdfcc149a8d0c11d4dd2b23b5338af22e31a5f",
        "files": [
          "fs/io_uring.c"
        ],
        "message": "io_uring: do init work in grab_env()\n\nPlace io_req_init_async() in io_req_work_grab_env() so it won't be\nforgotten.\n\nSigned-off-by: Pavel Begunkov <asml.silence@gmail.com>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "fs/io_uring.c||fs/io_uring.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/io_uring.c||fs/io_uring.c"
          ],
          "candidate": [
            "fs/io_uring.c||fs/io_uring.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/io_uring.c||fs/io_uring.c": [
          "File: fs/io_uring.c -> fs/io_uring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1105: {",
          "1106:  const struct io_op_def *def = &io_op_defs[req->opcode];",
          "1108:  if (!req->work.mm && def->needs_mm) {",
          "1109:   mmgrab(current->mm);",
          "1110:   req->work.mm = current->mm;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1108:  io_req_init_async(req);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1161:    req->work.flags |= IO_WQ_WORK_UNBOUND;",
          "1162:  }",
          "1165:  io_req_work_grab_env(req);",
          "1168: }",
          "",
          "[Removed Lines]",
          "1164:  io_req_init_async(req);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5254:    return ret;",
          "5255:  }",
          "5259:   io_req_work_grab_env(req);",
          "5262:  switch (req->opcode) {",
          "5263:  case IORING_OP_NOP:",
          "",
          "[Removed Lines]",
          "5257:  if (for_async || (req->flags & REQ_F_WORK_INITIALIZED)) {",
          "5258:   io_req_init_async(req);",
          "5260:  }",
          "",
          "[Added Lines]",
          "5257:  if (for_async || (req->flags & REQ_F_WORK_INITIALIZED))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "801dd57bd1d8c2c253f43635a3045bfa32a810b3",
      "candidate_info": {
        "commit_hash": "801dd57bd1d8c2c253f43635a3045bfa32a810b3",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/801dd57bd1d8c2c253f43635a3045bfa32a810b3",
        "files": [
          "fs/io-wq.h",
          "fs/io_uring.c"
        ],
        "message": "io_uring: cancel by ->task not pid\n\nFor an exiting process it tries to cancel all its inflight requests. Use\nreq->task to match such instead of work.pid. We always have req->task\nset, and it will be valid because we're matching only current exiting\ntask.\n\nAlso, remove work.pid and everything related, it's useless now.\n\nReported-by: Eric W. Biederman <ebiederm@xmission.com>\nSigned-off-by: Pavel Begunkov <asml.silence@gmail.com>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "fs/io-wq.h||fs/io-wq.h",
          "fs/io_uring.c||fs/io_uring.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/io_uring.c||fs/io_uring.c"
          ],
          "candidate": [
            "fs/io_uring.c||fs/io_uring.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/io-wq.h||fs/io-wq.h": [
          "File: fs/io-wq.h -> fs/io-wq.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:  const struct cred *creds;",
          "91:  struct fs_struct *fs;",
          "92:  unsigned flags;",
          "94: };",
          "96: static inline struct io_wq_work *wq_next_work(struct io_wq_work *work)",
          "",
          "[Removed Lines]",
          "93:  pid_t task_pid;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "fs/io_uring.c||fs/io_uring.c": [
          "File: fs/io_uring.c -> fs/io_uring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1063:   }",
          "1064:   spin_unlock(&current->fs->lock);",
          "1065:  }",
          "1068: }",
          "1070: static inline void io_req_work_drop_env(struct io_kiocb *req)",
          "",
          "[Removed Lines]",
          "1066:  if (!req->work.task_pid)",
          "1067:   req->work.task_pid = task_pid_vnr(current);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7451:  }",
          "7452: }",
          "7455: {",
          "7459: }",
          "7461: static int io_uring_flush(struct file *file, void *data)",
          "",
          "[Removed Lines]",
          "7454: static bool io_cancel_pid_cb(struct io_wq_work *work, void *data)",
          "7456:  pid_t pid = (pid_t) (unsigned long) data;",
          "7458:  return work->task_pid == pid;",
          "",
          "[Added Lines]",
          "7452: static bool io_cancel_task_cb(struct io_wq_work *work, void *data)",
          "7454:  struct io_kiocb *req = container_of(work, struct io_kiocb, work);",
          "7455:  struct task_struct *task = data;",
          "7457:  return req->task == task;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7476:  return 0;",
          "7477: }",
          "",
          "[Removed Lines]",
          "7470:  if (fatal_signal_pending(current) || (current->flags & PF_EXITING)) {",
          "7471:   void *data = (void *) (unsigned long)task_pid_vnr(current);",
          "7473:   io_wq_cancel_cb(ctx->io_wq, io_cancel_pid_cb, data, true);",
          "7474:  }",
          "",
          "[Added Lines]",
          "7469:  if (fatal_signal_pending(current) || (current->flags & PF_EXITING))",
          "7470:   io_wq_cancel_cb(ctx->io_wq, io_cancel_task_cb, current, true);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51a4cc112c7a42b62a91bcccdfac42e7c4561729",
      "candidate_info": {
        "commit_hash": "51a4cc112c7a42b62a91bcccdfac42e7c4561729",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/51a4cc112c7a42b62a91bcccdfac42e7c4561729",
        "files": [
          "fs/io_uring.c"
        ],
        "message": "io_uring: defer file table grabbing request cleanup for locked requests\n\nIf we're in the error path failing links and we have a link that has\ngrabbed a reference to the fs_struct, then we cannot safely drop our\nreference to the table if we already hold the completion lock. This\nadds a hardirq dependency to the fs_struct->lock, which it currently\ndoesn't have.\n\nDefer the final cleanup and free of such requests to avoid adding this\ndependency.\n\nReported-by: syzbot+ef4b654b49ed7ff049bf@syzkaller.appspotmail.com\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "fs/io_uring.c||fs/io_uring.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/io_uring.c||fs/io_uring.c"
          ],
          "candidate": [
            "fs/io_uring.c||fs/io_uring.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/io_uring.c||fs/io_uring.c": [
          "File: fs/io_uring.c -> fs/io_uring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1108:  }",
          "1109: }",
          "1112: {",
          "1113:  if (!(req->flags & REQ_F_WORK_INITIALIZED))",
          "1116:  if (req->work.mm) {",
          "1117:   mmdrop(req->work.mm);",
          "",
          "[Removed Lines]",
          "1111: static void io_req_clean_work(struct io_kiocb *req)",
          "1114:   return;",
          "",
          "[Added Lines]",
          "1115: static bool io_req_clean_work(struct io_kiocb *req)",
          "1118:   return false;",
          "1120:  req->flags &= ~REQ_F_WORK_INITIALIZED;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1124:  if (req->work.fs) {",
          "1125:   struct fs_struct *fs = req->work.fs;",
          "1127:   spin_lock(&req->work.fs->lock);",
          "1128:   if (--fs->users)",
          "1129:    fs = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1133:   if (req->flags & REQ_F_COMP_LOCKED)",
          "1134:    return true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1132:    free_fs_struct(fs);",
          "1133:   req->work.fs = NULL;",
          "1134:  }",
          "1136: }",
          "1138: static void io_prep_async_work(struct io_kiocb *req)",
          "",
          "[Removed Lines]",
          "1135:  req->flags &= ~REQ_F_WORK_INITIALIZED;",
          "",
          "[Added Lines]",
          "1145:  return false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1544:   fput(file);",
          "1545: }",
          "1548: {",
          "1549:  io_clean_op(req);",
          "",
          "[Removed Lines]",
          "1547: static void io_dismantle_req(struct io_kiocb *req)",
          "",
          "[Added Lines]",
          "1557: static bool io_dismantle_req(struct io_kiocb *req)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1552:   kfree(req->io);",
          "1553:  if (req->file)",
          "1554:   io_put_file(req, req->file, (req->flags & REQ_F_FIXED_FILE));",
          "1557:  if (req->flags & REQ_F_INFLIGHT) {",
          "1558:   struct io_ring_ctx *ctx = req->ctx;",
          "",
          "[Removed Lines]",
          "1555:  io_req_clean_work(req);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1564:    wake_up(&ctx->inflight_wait);",
          "1565:   spin_unlock_irqrestore(&ctx->inflight_lock, flags);",
          "1566:  }",
          "1567: }",
          "1570: {",
          "1574:  __io_put_req_task(req);",
          "1576:  if (likely(!io_is_fallback_req(req)))",
          "1577:   kmem_cache_free(req_cachep, req);",
          "1578:  else",
          "",
          "[Removed Lines]",
          "1569: static void __io_free_req(struct io_kiocb *req)",
          "1571:  struct io_ring_ctx *ctx;",
          "1573:  io_dismantle_req(req);",
          "1575:  ctx = req->ctx;",
          "",
          "[Added Lines]",
          "1577:  return io_req_clean_work(req);",
          "1580: static void __io_free_req_finish(struct io_kiocb *req)",
          "1582:  struct io_ring_ctx *ctx = req->ctx;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1580:  percpu_ref_put(&ctx->refs);",
          "1581: }",
          "1583: static bool io_link_cancel_timeout(struct io_kiocb *req)",
          "1584: {",
          "1585:  struct io_ring_ctx *ctx = req->ctx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1592: static void io_req_task_file_table_put(struct callback_head *cb)",
          "1593: {",
          "1594:  struct io_kiocb *req = container_of(cb, struct io_kiocb, task_work);",
          "1595:  struct fs_struct *fs = req->work.fs;",
          "1597:  spin_lock(&req->work.fs->lock);",
          "1598:  if (--fs->users)",
          "1599:   fs = NULL;",
          "1600:  spin_unlock(&req->work.fs->lock);",
          "1601:  if (fs)",
          "1602:   free_fs_struct(fs);",
          "1603:  req->work.fs = NULL;",
          "1604:  __io_free_req_finish(req);",
          "1605: }",
          "1607: static void __io_free_req(struct io_kiocb *req)",
          "1608: {",
          "1609:  if (!io_dismantle_req(req)) {",
          "1610:   __io_free_req_finish(req);",
          "1611:  } else {",
          "1612:   int ret;",
          "1614:   init_task_work(&req->task_work, io_req_task_file_table_put);",
          "1615:   ret = task_work_add(req->task, &req->task_work, TWA_RESUME);",
          "1616:   if (unlikely(ret)) {",
          "1617:    struct task_struct *tsk;",
          "1619:    tsk = io_wq_get_task(req->ctx->io_wq);",
          "1620:    task_work_add(tsk, &req->task_work, 0);",
          "1621:   }",
          "1622:  }",
          "1623: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1868:   req->flags &= ~REQ_F_TASK_PINNED;",
          "1869:  }",
          "1872:  rb->reqs[rb->to_free++] = req;",
          "1873:  if (unlikely(rb->to_free == ARRAY_SIZE(rb->reqs)))",
          "1874:   __io_req_free_batch_flush(req->ctx, rb);",
          "",
          "[Removed Lines]",
          "1871:  io_dismantle_req(req);",
          "",
          "[Added Lines]",
          "1913:  WARN_ON_ONCE(io_dismantle_req(req));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "98447d65b4a7a59f8ea37dc6e5d743247d9a7b01",
      "candidate_info": {
        "commit_hash": "98447d65b4a7a59f8ea37dc6e5d743247d9a7b01",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/98447d65b4a7a59f8ea37dc6e5d743247d9a7b01",
        "files": [
          "fs/io-wq.c",
          "fs/io-wq.h",
          "fs/io_uring.c",
          "include/linux/io_uring.h"
        ],
        "message": "io_uring: move io identity items into separate struct\n\nio-wq contains a pointer to the identity, which we just hold in io_kiocb\nfor now. This is in preparation for putting this outside io_kiocb. The\nonly exception is struct files_struct, which we'll need different rules\nfor to avoid a circular dependency.\n\nNo functional changes in this patch.\n\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "fs/io-wq.c||fs/io-wq.c",
          "fs/io-wq.h||fs/io-wq.h",
          "fs/io_uring.c||fs/io_uring.c",
          "include/linux/io_uring.h||include/linux/io_uring.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/io_uring.c||fs/io_uring.c"
          ],
          "candidate": [
            "fs/io_uring.c||fs/io_uring.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/io-wq.c||fs/io-wq.c": [
          "File: fs/io-wq.c -> fs/io-wq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "430:   worker->mm = NULL;",
          "431:  }",
          "436:   return;",
          "437:  }",
          "",
          "[Removed Lines]",
          "433:  if (mmget_not_zero(work->mm)) {",
          "434:   kthread_use_mm(work->mm);",
          "435:   worker->mm = work->mm;",
          "",
          "[Added Lines]",
          "433:  if (mmget_not_zero(work->identity->mm)) {",
          "434:   kthread_use_mm(work->identity->mm);",
          "435:   worker->mm = work->identity->mm;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "446: #ifdef CONFIG_BLK_CGROUP",
          "447:  if (!(work->flags & IO_WQ_WORK_BLKCG))",
          "448:   return;",
          "452:  }",
          "453: #endif",
          "454: }",
          "",
          "[Removed Lines]",
          "449:  if (work->blkcg_css != worker->blkcg_css) {",
          "450:   kthread_associate_blkcg(work->blkcg_css);",
          "451:   worker->blkcg_css = work->blkcg_css;",
          "",
          "[Added Lines]",
          "449:  if (work->identity->blkcg_css != worker->blkcg_css) {",
          "450:   kthread_associate_blkcg(work->identity->blkcg_css);",
          "451:   worker->blkcg_css = work->identity->blkcg_css;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "456: static void io_wq_switch_creds(struct io_worker *worker,",
          "457:           struct io_wq_work *work)",
          "458: {",
          "462:  if (worker->saved_creds)",
          "464:  else",
          "",
          "[Removed Lines]",
          "459:  const struct cred *old_creds = override_creds(work->creds);",
          "461:  worker->cur_creds = work->creds;",
          "",
          "[Added Lines]",
          "459:  const struct cred *old_creds = override_creds(work->identity->creds);",
          "461:  worker->cur_creds = work->identity->creds;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "468: static void io_impersonate_work(struct io_worker *worker,",
          "469:     struct io_wq_work *work)",
          "470: {",
          "472:   task_lock(current);",
          "475:   task_unlock(current);",
          "476:  }",
          "480:   io_wq_switch_mm(worker, work);",
          "482:   io_wq_switch_creds(worker, work);",
          "484:  io_wq_switch_blkcg(worker, work);",
          "485: }",
          "",
          "[Removed Lines]",
          "471:  if ((work->flags & IO_WQ_WORK_FILES) && current->files != work->files) {",
          "473:   current->files = work->files;",
          "474:   current->nsproxy = work->nsproxy;",
          "477:  if ((work->flags & IO_WQ_WORK_FS) && current->fs != work->fs)",
          "478:   current->fs = work->fs;",
          "479:  if ((work->flags & IO_WQ_WORK_MM) && work->mm != worker->mm)",
          "481:  if ((work->flags & IO_WQ_WORK_CREDS) && worker->cur_creds != work->creds)",
          "483:  current->signal->rlim[RLIMIT_FSIZE].rlim_cur = work->fsize;",
          "",
          "[Added Lines]",
          "471:  if ((work->flags & IO_WQ_WORK_FILES) &&",
          "472:      current->files != work->identity->files) {",
          "474:   current->files = work->identity->files;",
          "475:   current->nsproxy = work->identity->nsproxy;",
          "478:  if ((work->flags & IO_WQ_WORK_FS) && current->fs != work->identity->fs)",
          "479:   current->fs = work->identity->fs;",
          "480:  if ((work->flags & IO_WQ_WORK_MM) && work->identity->mm != worker->mm)",
          "482:  if ((work->flags & IO_WQ_WORK_CREDS) &&",
          "483:      worker->cur_creds != work->identity->creds)",
          "485:  current->signal->rlim[RLIMIT_FSIZE].rlim_cur = work->identity->fsize;",
          "",
          "---------------"
        ],
        "fs/io-wq.h||fs/io-wq.h": [
          "File: fs/io-wq.h -> fs/io-wq.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #ifndef INTERNAL_IO_WQ_H",
          "2: #define INTERNAL_IO_WQ_H",
          "4: struct io_wq;",
          "6: enum {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include <linux/io_uring.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92: struct io_wq_work {",
          "93:  struct io_wq_work_node list;",
          "103:  unsigned flags;",
          "104: };",
          "",
          "[Removed Lines]",
          "94:  struct files_struct *files;",
          "95:  struct mm_struct *mm;",
          "96: #ifdef CONFIG_BLK_CGROUP",
          "97:  struct cgroup_subsys_state *blkcg_css;",
          "98: #endif",
          "99:  const struct cred *creds;",
          "100:  struct nsproxy *nsproxy;",
          "101:  struct fs_struct *fs;",
          "102:  unsigned long fsize;",
          "",
          "[Added Lines]",
          "96:  struct io_identity *identity;",
          "",
          "---------------"
        ],
        "fs/io_uring.c||fs/io_uring.c": [
          "File: fs/io_uring.c -> fs/io_uring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "689:  struct hlist_node  hash_node;",
          "690:  struct async_poll  *apoll;",
          "691:  struct io_wq_work  work;",
          "692: };",
          "694: struct io_defer_entry {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "692:  struct io_identity  identity;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1051:  memset(&req->work, 0, sizeof(req->work));",
          "1052:  req->flags |= REQ_F_WORK_INITIALIZED;",
          "1053: }",
          "1055: static inline bool io_async_submit(struct io_ring_ctx *ctx)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1054:  req->work.identity = &req->identity;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1163:  req->flags &= ~REQ_F_WORK_INITIALIZED;",
          "1165:  if (req->work.flags & IO_WQ_WORK_MM) {",
          "1167:   req->work.flags &= ~IO_WQ_WORK_MM;",
          "1168:  }",
          "1169: #ifdef CONFIG_BLK_CGROUP",
          "1170:  if (req->work.flags & IO_WQ_WORK_BLKCG) {",
          "1172:   req->work.flags &= ~IO_WQ_WORK_BLKCG;",
          "1173:  }",
          "1174: #endif",
          "1175:  if (req->work.flags & IO_WQ_WORK_CREDS) {",
          "1177:   req->work.flags &= ~IO_WQ_WORK_CREDS;",
          "1178:  }",
          "1179:  if (req->work.flags & IO_WQ_WORK_FS) {",
          "1183:   if (--fs->users)",
          "1184:    fs = NULL;",
          "1186:   if (fs)",
          "1187:    free_fs_struct(fs);",
          "1188:   req->work.flags &= ~IO_WQ_WORK_FS;",
          "",
          "[Removed Lines]",
          "1166:   mmdrop(req->work.mm);",
          "1171:   css_put(req->work.blkcg_css);",
          "1176:   put_cred(req->work.creds);",
          "1180:   struct fs_struct *fs = req->work.fs;",
          "1182:   spin_lock(&req->work.fs->lock);",
          "1185:   spin_unlock(&req->work.fs->lock);",
          "",
          "[Added Lines]",
          "1168:   mmdrop(req->work.identity->mm);",
          "1173:   css_put(req->work.identity->blkcg_css);",
          "1178:   put_cred(req->work.identity->creds);",
          "1182:   struct fs_struct *fs = req->work.identity->fs;",
          "1184:   spin_lock(&req->work.identity->fs->lock);",
          "1187:   spin_unlock(&req->work.identity->fs->lock);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1206:  if (!(req->work.flags & IO_WQ_WORK_FILES) &&",
          "1207:      (io_op_defs[req->opcode].work_flags & IO_WQ_WORK_FILES) &&",
          "1208:      !(req->flags & REQ_F_NO_FILE_TABLE)) {",
          "1210:   get_nsproxy(current->nsproxy);",
          "1212:   req->flags |= REQ_F_INFLIGHT;",
          "1214:   spin_lock_irq(&ctx->inflight_lock);",
          "",
          "[Removed Lines]",
          "1209:   req->work.files = get_files_struct(current);",
          "1211:   req->work.nsproxy = current->nsproxy;",
          "",
          "[Added Lines]",
          "1211:   req->work.identity->files = get_files_struct(current);",
          "1213:   req->work.identity->nsproxy = current->nsproxy;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1219:  if (!(req->work.flags & IO_WQ_WORK_MM) &&",
          "1220:      (def->work_flags & IO_WQ_WORK_MM)) {",
          "1221:   mmgrab(current->mm);",
          "1223:   req->work.flags |= IO_WQ_WORK_MM;",
          "1224:  }",
          "1225: #ifdef CONFIG_BLK_CGROUP",
          "1226:  if (!(req->work.flags & IO_WQ_WORK_BLKCG) &&",
          "1227:      (def->work_flags & IO_WQ_WORK_BLKCG)) {",
          "1228:   rcu_read_lock();",
          "1237:    req->work.flags |= IO_WQ_WORK_BLKCG;",
          "1238:   rcu_read_unlock();",
          "1239:  }",
          "1240: #endif",
          "1241:  if (!(req->work.flags & IO_WQ_WORK_CREDS)) {",
          "1243:   req->work.flags |= IO_WQ_WORK_CREDS;",
          "1244:  }",
          "1245:  if (!(req->work.flags & IO_WQ_WORK_FS) &&",
          "1246:      (def->work_flags & IO_WQ_WORK_FS)) {",
          "1247:   spin_lock(&current->fs->lock);",
          "1248:   if (!current->fs->in_exec) {",
          "1251:    req->work.flags |= IO_WQ_WORK_FS;",
          "1252:   } else {",
          "1253:    req->work.flags |= IO_WQ_WORK_CANCEL;",
          "",
          "[Removed Lines]",
          "1222:   req->work.mm = current->mm;",
          "1229:   req->work.blkcg_css = blkcg_css();",
          "1234:   if (!css_tryget_online(req->work.blkcg_css))",
          "1235:    req->work.blkcg_css = NULL;",
          "1236:   else",
          "1242:   req->work.creds = get_current_cred();",
          "1249:    req->work.fs = current->fs;",
          "1250:    req->work.fs->users++;",
          "",
          "[Added Lines]",
          "1224:   req->work.identity->mm = current->mm;",
          "1231:   req->work.identity->blkcg_css = blkcg_css();",
          "1236:   if (css_tryget_online(req->work.identity->blkcg_css))",
          "1242:   req->work.identity->creds = get_current_cred();",
          "1249:    req->work.identity->fs = current->fs;",
          "1250:    req->work.identity->fs->users++;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1255:   spin_unlock(&current->fs->lock);",
          "1256:  }",
          "1257:  if (def->needs_fsize)",
          "1259:  else",
          "1261: }",
          "1263: static void io_prep_async_link(struct io_kiocb *req)",
          "",
          "[Removed Lines]",
          "1258:   req->work.fsize = rlimit(RLIMIT_FSIZE);",
          "1260:   req->work.fsize = RLIM_INFINITY;",
          "",
          "[Added Lines]",
          "1258:   req->work.identity->fsize = rlimit(RLIMIT_FSIZE);",
          "1260:   req->work.identity->fsize = RLIM_INFINITY;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1449:   return true;",
          "1450:  if ((req->flags & REQ_F_WORK_INITIALIZED) &&",
          "1451:      (req->work.flags & IO_WQ_WORK_FILES))",
          "1453:  return false;",
          "1454: }",
          "",
          "[Removed Lines]",
          "1452:   return req->work.files == files;",
          "",
          "[Added Lines]",
          "1452:   return req->work.identity->files == files;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4089:  }",
          "4093:  if (ret < 0)",
          "4094:   req_set_fail_links(req);",
          "4095:  fput(close->put_file);",
          "",
          "[Removed Lines]",
          "4092:  ret = filp_close(close->put_file, req->work.files);",
          "",
          "[Added Lines]",
          "4092:  ret = filp_close(close->put_file, req->work.identity->files);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5703:   wake_up(&ctx->inflight_wait);",
          "5704:  spin_unlock_irqrestore(&ctx->inflight_lock, flags);",
          "5705:  req->flags &= ~REQ_F_INFLIGHT;",
          "5708:  req->work.flags &= ~IO_WQ_WORK_FILES;",
          "5709: }",
          "",
          "[Removed Lines]",
          "5706:  put_files_struct(req->work.files);",
          "5707:  put_nsproxy(req->work.nsproxy);",
          "",
          "[Added Lines]",
          "5706:  put_files_struct(req->work.identity->files);",
          "5707:  put_nsproxy(req->work.identity->nsproxy);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6063: again:",
          "6064:  linked_timeout = io_prep_linked_timeout(req);",
          "6068:   if (old_creds)",
          "6069:    revert_creds(old_creds);",
          "6072:   else",
          "6074:   req->work.flags |= IO_WQ_WORK_CREDS;",
          "6075:  }",
          "",
          "[Removed Lines]",
          "6066:  if ((req->flags & REQ_F_WORK_INITIALIZED) && req->work.creds &&",
          "6067:      req->work.creds != current_cred()) {",
          "6070:   if (old_creds == req->work.creds)",
          "6073:    old_creds = override_creds(req->work.creds);",
          "",
          "[Added Lines]",
          "6066:  if ((req->flags & REQ_F_WORK_INITIALIZED) && req->work.identity->creds &&",
          "6067:      req->work.identity->creds != current_cred()) {",
          "6070:   if (old_creds == req->work.identity->creds)",
          "6073:    old_creds = override_creds(req->work.identity->creds);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6375:  id = READ_ONCE(sqe->personality);",
          "6376:  if (id) {",
          "6377:   io_req_init_async(req);",
          "6380:    return -EINVAL;",
          "6382:   req->work.flags |= IO_WQ_WORK_CREDS;",
          "6383:  }",
          "",
          "[Removed Lines]",
          "6378:   req->work.creds = idr_find(&ctx->personality_idr, id);",
          "6379:   if (unlikely(!req->work.creds))",
          "6381:   get_cred(req->work.creds);",
          "",
          "[Added Lines]",
          "6378:   req->work.identity->creds = idr_find(&ctx->personality_idr, id);",
          "6379:   if (unlikely(!req->work.identity->creds))",
          "6381:   get_cred(req->work.identity->creds);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "8248:  struct files_struct *files = data;",
          "8250:  return !files || ((work->flags & IO_WQ_WORK_FILES) &&",
          "8252: }",
          "",
          "[Removed Lines]",
          "8251:     work->files == files);",
          "",
          "[Added Lines]",
          "8251:     work->identity->files == files);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "8404:   spin_lock_irq(&ctx->inflight_lock);",
          "8405:   list_for_each_entry(req, &ctx->inflight_list, inflight_entry) {",
          "8406:    if (files && (req->work.flags & IO_WQ_WORK_FILES) &&",
          "8408:     continue;",
          "8410:    if (!refcount_inc_not_zero(&req->refs))",
          "",
          "[Removed Lines]",
          "8407:        req->work.files != files)",
          "",
          "[Added Lines]",
          "8407:        req->work.identity->files != files)",
          "",
          "---------------"
        ],
        "include/linux/io_uring.h||include/linux/io_uring.h": [
          "File: include/linux/io_uring.h -> include/linux/io_uring.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include <linux/sched.h>",
          "6: #include <linux/xarray.h>",
          "9: struct io_uring_task {",
          "",
          "[Removed Lines]",
          "7: #include <linux/percpu-refcount.h>",
          "",
          "[Added Lines]",
          "8: struct io_identity {",
          "9:  struct files_struct  *files;",
          "10:  struct mm_struct  *mm;",
          "11: #ifdef CONFIG_BLK_CGROUP",
          "12:  struct cgroup_subsys_state *blkcg_css;",
          "13: #endif",
          "14:  const struct cred  *creds;",
          "15:  struct nsproxy   *nsproxy;",
          "16:  struct fs_struct  *fs;",
          "17:  unsigned long   fsize;",
          "18: };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f203765880c4416675726be558b65da4a7604e2",
      "candidate_info": {
        "commit_hash": "0f203765880c4416675726be558b65da4a7604e2",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/0f203765880c4416675726be558b65da4a7604e2",
        "files": [
          "fs/io-wq.c",
          "fs/io-wq.h",
          "fs/io_uring.c"
        ],
        "message": "io_uring: pass required context in as flags\n\nWe have a number of bits that decide what context to inherit. Set up\nio-wq flags for these instead. This is in preparation for always having\nthe various members set, but not always needing them for all requests.\n\nNo intended functional changes in this patch.\n\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "fs/io-wq.c||fs/io-wq.c",
          "fs/io-wq.h||fs/io-wq.h",
          "fs/io_uring.c||fs/io_uring.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/io_uring.c||fs/io_uring.c"
          ],
          "candidate": [
            "fs/io_uring.c||fs/io_uring.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/io-wq.c||fs/io-wq.c": [
          "File: fs/io-wq.c -> fs/io-wq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "448:           struct io_wq_work *work)",
          "449: {",
          "450: #ifdef CONFIG_BLK_CGROUP",
          "451:  if (work->blkcg_css != worker->blkcg_css) {",
          "452:   kthread_associate_blkcg(work->blkcg_css);",
          "453:   worker->blkcg_css = work->blkcg_css;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451:  if (!(work->flags & IO_WQ_WORK_BLKCG))",
          "452:   return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "470: static void io_impersonate_work(struct io_worker *worker,",
          "471:     struct io_wq_work *work)",
          "472: {",
          "474:   task_lock(current);",
          "475:   current->files = work->files;",
          "476:   current->nsproxy = work->nsproxy;",
          "477:   task_unlock(current);",
          "478:  }",
          "480:   current->fs = work->fs;",
          "482:   io_wq_switch_mm(worker, work);",
          "484:   io_wq_switch_creds(worker, work);",
          "485:  current->signal->rlim[RLIMIT_FSIZE].rlim_cur = work->fsize;",
          "486:  io_wq_switch_blkcg(worker, work);",
          "",
          "[Removed Lines]",
          "473:  if (work->files && current->files != work->files) {",
          "479:  if (work->fs && current->fs != work->fs)",
          "481:  if (work->mm != worker->mm)",
          "483:  if (worker->cur_creds != work->creds)",
          "",
          "[Added Lines]",
          "475:  if ((work->flags & IO_WQ_WORK_FILES) && current->files != work->files) {",
          "481:  if ((work->flags & IO_WQ_WORK_FS) && current->fs != work->fs)",
          "483:  if ((work->flags & IO_WQ_WORK_MM) && work->mm != worker->mm)",
          "485:  if ((work->flags & IO_WQ_WORK_CREDS) && worker->cur_creds != work->creds)",
          "",
          "---------------"
        ],
        "fs/io-wq.h||fs/io-wq.h": [
          "File: fs/io-wq.h -> fs/io-wq.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:  IO_WQ_WORK_NO_CANCEL = 8,",
          "11:  IO_WQ_WORK_CONCURRENT = 16,",
          "14: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13:  IO_WQ_WORK_FILES = 32,",
          "14:  IO_WQ_WORK_FS  = 64,",
          "15:  IO_WQ_WORK_MM  = 128,",
          "16:  IO_WQ_WORK_CREDS = 256,",
          "17:  IO_WQ_WORK_BLKCG = 512,",
          "",
          "---------------"
        ],
        "fs/io_uring.c||fs/io_uring.c": [
          "File: fs/io_uring.c -> fs/io_uring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "729: };",
          "731: struct io_op_def {",
          "735:  unsigned  needs_file : 1;",
          "",
          "[Removed Lines]",
          "733:  unsigned  needs_mm : 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "741:  unsigned  unbound_nonreg_file : 1;",
          "743:  unsigned  not_supported : 1;",
          "749:  unsigned  pollin : 1;",
          "750:  unsigned  pollout : 1;",
          "",
          "[Removed Lines]",
          "745:  unsigned  file_table : 1;",
          "747:  unsigned  needs_fs : 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "754:  unsigned  needs_fsize : 1;",
          "756:  unsigned  needs_async_data : 1;",
          "760:  unsigned short  async_size;",
          "761: };",
          "763: static const struct io_op_def io_op_defs[] = {",
          "764:  [IORING_OP_NOP] = {},",
          "765:  [IORING_OP_READV] = {",
          "767:   .needs_file  = 1,",
          "768:   .unbound_nonreg_file = 1,",
          "769:   .pollin   = 1,",
          "770:   .buffer_select  = 1,",
          "771:   .needs_async_data = 1,",
          "773:   .async_size  = sizeof(struct io_async_rw),",
          "774:  },",
          "775:  [IORING_OP_WRITEV] = {",
          "777:   .needs_file  = 1,",
          "778:   .hash_reg_file  = 1,",
          "779:   .unbound_nonreg_file = 1,",
          "780:   .pollout  = 1,",
          "781:   .needs_fsize  = 1,",
          "782:   .needs_async_data = 1,",
          "784:   .async_size  = sizeof(struct io_async_rw),",
          "785:  },",
          "786:  [IORING_OP_FSYNC] = {",
          "787:   .needs_file  = 1,",
          "789:  },",
          "790:  [IORING_OP_READ_FIXED] = {",
          "791:   .needs_file  = 1,",
          "792:   .unbound_nonreg_file = 1,",
          "793:   .pollin   = 1,",
          "795:   .async_size  = sizeof(struct io_async_rw),",
          "796:  },",
          "797:  [IORING_OP_WRITE_FIXED] = {",
          "798:   .needs_file  = 1,",
          "",
          "[Removed Lines]",
          "758:  unsigned  needs_blkcg : 1;",
          "766:   .needs_mm  = 1,",
          "772:   .needs_blkcg  = 1,",
          "776:   .needs_mm  = 1,",
          "783:   .needs_blkcg  = 1,",
          "788:   .needs_blkcg  = 1,",
          "794:   .needs_blkcg  = 1,",
          "",
          "[Added Lines]",
          "753:  unsigned  work_flags;",
          "765:   .work_flags  = IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG,",
          "775:   .work_flags  = IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG,",
          "779:   .work_flags  = IO_WQ_WORK_BLKCG,",
          "786:   .work_flags  = IO_WQ_WORK_BLKCG,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "800:   .unbound_nonreg_file = 1,",
          "801:   .pollout  = 1,",
          "802:   .needs_fsize  = 1,",
          "804:   .async_size  = sizeof(struct io_async_rw),",
          "805:  },",
          "806:  [IORING_OP_POLL_ADD] = {",
          "807:   .needs_file  = 1,",
          "",
          "[Removed Lines]",
          "803:   .needs_blkcg  = 1,",
          "",
          "[Added Lines]",
          "795:   .work_flags  = IO_WQ_WORK_BLKCG,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "810:  [IORING_OP_POLL_REMOVE] = {},",
          "811:  [IORING_OP_SYNC_FILE_RANGE] = {",
          "812:   .needs_file  = 1,",
          "814:  },",
          "815:  [IORING_OP_SENDMSG] = {",
          "817:   .needs_file  = 1,",
          "818:   .unbound_nonreg_file = 1,",
          "820:   .pollout  = 1,",
          "821:   .needs_async_data = 1,",
          "823:   .async_size  = sizeof(struct io_async_msghdr),",
          "824:  },",
          "825:  [IORING_OP_RECVMSG] = {",
          "827:   .needs_file  = 1,",
          "828:   .unbound_nonreg_file = 1,",
          "830:   .pollin   = 1,",
          "831:   .buffer_select  = 1,",
          "832:   .needs_async_data = 1,",
          "834:   .async_size  = sizeof(struct io_async_msghdr),",
          "835:  },",
          "836:  [IORING_OP_TIMEOUT] = {",
          "838:   .needs_async_data = 1,",
          "839:   .async_size  = sizeof(struct io_timeout_data),",
          "840:  },",
          "841:  [IORING_OP_TIMEOUT_REMOVE] = {},",
          "842:  [IORING_OP_ACCEPT] = {",
          "844:   .needs_file  = 1,",
          "845:   .unbound_nonreg_file = 1,",
          "847:   .pollin   = 1,",
          "848:  },",
          "849:  [IORING_OP_ASYNC_CANCEL] = {},",
          "850:  [IORING_OP_LINK_TIMEOUT] = {",
          "852:   .needs_async_data = 1,",
          "853:   .async_size  = sizeof(struct io_timeout_data),",
          "854:  },",
          "855:  [IORING_OP_CONNECT] = {",
          "857:   .needs_file  = 1,",
          "858:   .unbound_nonreg_file = 1,",
          "859:   .pollout  = 1,",
          "860:   .needs_async_data = 1,",
          "861:   .async_size  = sizeof(struct io_async_connect),",
          "862:  },",
          "863:  [IORING_OP_FALLOCATE] = {",
          "864:   .needs_file  = 1,",
          "865:   .needs_fsize  = 1,",
          "867:  },",
          "868:  [IORING_OP_OPENAT] = {",
          "872:  },",
          "873:  [IORING_OP_CLOSE] = {",
          "874:   .needs_file  = 1,",
          "875:   .needs_file_no_error = 1,",
          "878:  },",
          "879:  [IORING_OP_FILES_UPDATE] = {",
          "882:  },",
          "883:  [IORING_OP_STATX] = {",
          "888:  },",
          "889:  [IORING_OP_READ] = {",
          "891:   .needs_file  = 1,",
          "892:   .unbound_nonreg_file = 1,",
          "893:   .pollin   = 1,",
          "894:   .buffer_select  = 1,",
          "896:   .async_size  = sizeof(struct io_async_rw),",
          "897:  },",
          "898:  [IORING_OP_WRITE] = {",
          "900:   .needs_file  = 1,",
          "901:   .unbound_nonreg_file = 1,",
          "902:   .pollout  = 1,",
          "903:   .needs_fsize  = 1,",
          "905:   .async_size  = sizeof(struct io_async_rw),",
          "906:  },",
          "907:  [IORING_OP_FADVISE] = {",
          "908:   .needs_file  = 1,",
          "910:  },",
          "911:  [IORING_OP_MADVISE] = {",
          "914:  },",
          "915:  [IORING_OP_SEND] = {",
          "917:   .needs_file  = 1,",
          "918:   .unbound_nonreg_file = 1,",
          "919:   .pollout  = 1,",
          "921:  },",
          "922:  [IORING_OP_RECV] = {",
          "924:   .needs_file  = 1,",
          "925:   .unbound_nonreg_file = 1,",
          "926:   .pollin   = 1,",
          "927:   .buffer_select  = 1,",
          "929:  },",
          "930:  [IORING_OP_OPENAT2] = {",
          "934:  },",
          "935:  [IORING_OP_EPOLL_CTL] = {",
          "936:   .unbound_nonreg_file = 1,",
          "938:  },",
          "939:  [IORING_OP_SPLICE] = {",
          "940:   .needs_file  = 1,",
          "941:   .hash_reg_file  = 1,",
          "942:   .unbound_nonreg_file = 1,",
          "944:  },",
          "945:  [IORING_OP_PROVIDE_BUFFERS] = {},",
          "946:  [IORING_OP_REMOVE_BUFFERS] = {},",
          "",
          "[Removed Lines]",
          "813:   .needs_blkcg  = 1,",
          "816:   .needs_mm  = 1,",
          "819:   .needs_fs  = 1,",
          "822:   .needs_blkcg  = 1,",
          "826:   .needs_mm  = 1,",
          "829:   .needs_fs  = 1,",
          "833:   .needs_blkcg  = 1,",
          "837:   .needs_mm  = 1,",
          "843:   .needs_mm  = 1,",
          "846:   .file_table  = 1,",
          "851:   .needs_mm  = 1,",
          "856:   .needs_mm  = 1,",
          "866:   .needs_blkcg  = 1,",
          "869:   .file_table  = 1,",
          "870:   .needs_fs  = 1,",
          "871:   .needs_blkcg  = 1,",
          "876:   .file_table  = 1,",
          "877:   .needs_blkcg  = 1,",
          "880:   .needs_mm  = 1,",
          "881:   .file_table  = 1,",
          "884:   .needs_mm  = 1,",
          "885:   .needs_fs  = 1,",
          "886:   .file_table  = 1,",
          "887:   .needs_blkcg  = 1,",
          "890:   .needs_mm  = 1,",
          "895:   .needs_blkcg  = 1,",
          "899:   .needs_mm  = 1,",
          "904:   .needs_blkcg  = 1,",
          "909:   .needs_blkcg  = 1,",
          "912:   .needs_mm  = 1,",
          "913:   .needs_blkcg  = 1,",
          "916:   .needs_mm  = 1,",
          "920:   .needs_blkcg  = 1,",
          "923:   .needs_mm  = 1,",
          "928:   .needs_blkcg  = 1,",
          "931:   .file_table  = 1,",
          "932:   .needs_fs  = 1,",
          "933:   .needs_blkcg  = 1,",
          "937:   .file_table  = 1,",
          "943:   .needs_blkcg  = 1,",
          "",
          "[Added Lines]",
          "804:   .work_flags  = IO_WQ_WORK_BLKCG,",
          "812:   .work_flags  = IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG |",
          "813:       IO_WQ_WORK_FS,",
          "822:   .work_flags  = IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG |",
          "823:       IO_WQ_WORK_FS,",
          "828:   .work_flags  = IO_WQ_WORK_MM,",
          "835:   .work_flags  = IO_WQ_WORK_MM | IO_WQ_WORK_FILES,",
          "841:   .work_flags  = IO_WQ_WORK_MM,",
          "849:   .work_flags  = IO_WQ_WORK_MM,",
          "854:   .work_flags  = IO_WQ_WORK_BLKCG,",
          "857:   .work_flags  = IO_WQ_WORK_FILES | IO_WQ_WORK_BLKCG |",
          "858:       IO_WQ_WORK_FS,",
          "863:   .work_flags  = IO_WQ_WORK_FILES | IO_WQ_WORK_BLKCG,",
          "866:   .work_flags  = IO_WQ_WORK_FILES | IO_WQ_WORK_MM,",
          "869:   .work_flags  = IO_WQ_WORK_FILES | IO_WQ_WORK_MM |",
          "870:       IO_WQ_WORK_FS | IO_WQ_WORK_BLKCG,",
          "878:   .work_flags  = IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG,",
          "886:   .work_flags  = IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG,",
          "890:   .work_flags  = IO_WQ_WORK_BLKCG,",
          "893:   .work_flags  = IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG,",
          "899:   .work_flags  = IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG,",
          "906:   .work_flags  = IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG,",
          "909:   .work_flags  = IO_WQ_WORK_FILES | IO_WQ_WORK_FS |",
          "910:       IO_WQ_WORK_BLKCG,",
          "914:   .work_flags  = IO_WQ_WORK_FILES,",
          "920:   .work_flags  = IO_WQ_WORK_BLKCG,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1031: static int io_sq_thread_acquire_mm(struct io_ring_ctx *ctx,",
          "1032:        struct io_kiocb *req)",
          "1033: {",
          "1035:   return 0;",
          "1036:  return __io_sq_thread_acquire_mm(ctx);",
          "1037: }",
          "",
          "[Removed Lines]",
          "1034:  if (!io_op_defs[req->opcode].needs_mm)",
          "",
          "[Added Lines]",
          "1011:  if (!(io_op_defs[req->opcode].work_flags & IO_WQ_WORK_MM))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1224:   if (def->unbound_nonreg_file)",
          "1225:    req->work.flags |= IO_WQ_WORK_UNBOUND;",
          "1226:  }",
          "1228:      !(req->flags & REQ_F_NO_FILE_TABLE)) {",
          "1229:   req->work.files = get_files_struct(current);",
          "1230:   get_nsproxy(current->nsproxy);",
          "",
          "[Removed Lines]",
          "1227:  if (!req->work.files && io_op_defs[req->opcode].file_table &&",
          "",
          "[Added Lines]",
          "1204:  if (!req->work.files &&",
          "1205:      (io_op_defs[req->opcode].work_flags & IO_WQ_WORK_FILES) &&",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1235:   list_add(&req->inflight_entry, &ctx->inflight_list);",
          "1236:   spin_unlock_irq(&ctx->inflight_lock);",
          "1237:  }",
          "1239:   mmgrab(current->mm);",
          "1240:   req->work.mm = current->mm;",
          "1241:  }",
          "1242: #ifdef CONFIG_BLK_CGROUP",
          "1244:   rcu_read_lock();",
          "1245:   req->work.blkcg_css = blkcg_css();",
          "",
          "[Removed Lines]",
          "1238:  if (!req->work.mm && def->needs_mm) {",
          "1243:  if (!req->work.blkcg_css && def->needs_blkcg) {",
          "",
          "[Added Lines]",
          "1216:  if (!req->work.mm && (def->work_flags & IO_WQ_WORK_MM)) {",
          "1221:  if (!req->work.blkcg_css && (def->work_flags & IO_WQ_WORK_BLKCG)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1254: #endif",
          "1255:  if (!req->work.creds)",
          "1256:   req->work.creds = get_current_cred();",
          "1258:   spin_lock(&current->fs->lock);",
          "1259:   if (!current->fs->in_exec) {",
          "1260:    req->work.fs = current->fs;",
          "",
          "[Removed Lines]",
          "1257:  if (!req->work.fs && def->needs_fs) {",
          "",
          "[Added Lines]",
          "1235:  if (!req->work.fs && (def->work_flags & IO_WQ_WORK_FS)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1268:   req->work.fsize = rlimit(RLIMIT_FSIZE);",
          "1269:  else",
          "1270:   req->work.fsize = RLIM_INFINITY;",
          "1271: }",
          "1273: static void io_prep_async_link(struct io_kiocb *req)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1250:  req->work.flags |= def->work_flags;",
          "",
          "---------------"
        ]
      }
    }
  ]
}