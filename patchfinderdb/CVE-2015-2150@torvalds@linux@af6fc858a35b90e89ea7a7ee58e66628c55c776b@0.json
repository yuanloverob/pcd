{
  "cve_id": "CVE-2015-2150",
  "cve_desc": "Xen 3.3.x through 4.5.x and the Linux kernel through 3.19.1 do not properly restrict access to PCI command registers, which might allow local guest OS users to cause a denial of service (non-maskable interrupt and host crash) by disabling the (1) memory or (2) I/O decoding for a PCI Express device and then accessing the device, which triggers an Unsupported Request (UR) response.",
  "repo": "torvalds/linux",
  "patch_hash": "af6fc858a35b90e89ea7a7ee58e66628c55c776b",
  "patch_info": {
    "commit_hash": "af6fc858a35b90e89ea7a7ee58e66628c55c776b",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/af6fc858a35b90e89ea7a7ee58e66628c55c776b",
    "files": [
      "drivers/xen/xen-pciback/conf_space.c",
      "drivers/xen/xen-pciback/conf_space.h",
      "drivers/xen/xen-pciback/conf_space_header.c"
    ],
    "message": "xen-pciback: limit guest control of command register\n\nOtherwise the guest can abuse that control to cause e.g. PCIe\nUnsupported Request responses by disabling memory and/or I/O decoding\nand subsequently causing (CPU side) accesses to the respective address\nranges, which (depending on system configuration) may be fatal to the\nhost.\n\nNote that to alter any of the bits collected together as\nPCI_COMMAND_GUEST permissive mode is now required to be enabled\nglobally or on the specific device.\n\nThis is CVE-2015-2150 / XSA-120.\n\nSigned-off-by: Jan Beulich <jbeulich@suse.com>\nReviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>\nCc: <stable@vger.kernel.org>\nSigned-off-by: David Vrabel <david.vrabel@citrix.com>",
    "before_after_code_files": [
      "drivers/xen/xen-pciback/conf_space.c||drivers/xen/xen-pciback/conf_space.c",
      "drivers/xen/xen-pciback/conf_space.h||drivers/xen/xen-pciback/conf_space.h",
      "drivers/xen/xen-pciback/conf_space_header.c||drivers/xen/xen-pciback/conf_space_header.c"
    ]
  },
  "patch_diff": {
    "drivers/xen/xen-pciback/conf_space.c||drivers/xen/xen-pciback/conf_space.c": [
      "File: drivers/xen/xen-pciback/conf_space.c -> drivers/xen/xen-pciback/conf_space.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: #include \"conf_space.h\"",
      "17: #include \"conf_space_quirks.h\"",
      "20: module_param(permissive, bool, 0644);",
      "",
      "[Removed Lines]",
      "19: static bool permissive;",
      "",
      "[Added Lines]",
      "19: bool permissive;",
      "",
      "---------------"
    ],
    "drivers/xen/xen-pciback/conf_space.h||drivers/xen/xen-pciback/conf_space.h": [
      "File: drivers/xen/xen-pciback/conf_space.h -> drivers/xen/xen-pciback/conf_space.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "64:  void *data;",
      "65: };",
      "67: #define OFFSET(cfg_entry) ((cfg_entry)->base_offset+(cfg_entry)->field->offset)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67: extern bool permissive;",
      "",
      "---------------"
    ],
    "drivers/xen/xen-pciback/conf_space_header.c||drivers/xen/xen-pciback/conf_space_header.c": [
      "File: drivers/xen/xen-pciback/conf_space_header.c -> drivers/xen/xen-pciback/conf_space_header.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: #include \"pciback.h\"",
      "12: #include \"conf_space.h\"",
      "14: struct pci_bar_info {",
      "15:  u32 val;",
      "16:  u32 len_val;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: struct pci_cmd_info {",
      "15:  u16 val;",
      "16: };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "20: #define is_enable_cmd(value) ((value)&(PCI_COMMAND_MEMORY|PCI_COMMAND_IO))",
      "21: #define is_master_cmd(value) ((value)&PCI_COMMAND_MASTER)",
      "24: {",
      "37:  }",
      "39:  return ret;",
      "40: }",
      "",
      "[Removed Lines]",
      "23: static int command_read(struct pci_dev *dev, int offset, u16 *value, void *data)",
      "25:  int i;",
      "26:  int ret;",
      "28:  ret = xen_pcibk_read_config_word(dev, offset, value, data);",
      "29:  if (!pci_is_enabled(dev))",
      "30:   return ret;",
      "32:  for (i = 0; i < PCI_ROM_RESOURCE; i++) {",
      "33:   if (dev->resource[i].flags & IORESOURCE_IO)",
      "35:   if (dev->resource[i].flags & IORESOURCE_MEM)",
      "",
      "[Added Lines]",
      "28: #define PCI_COMMAND_GUEST (PCI_COMMAND_MASTER|PCI_COMMAND_SPECIAL| \\",
      "29:       PCI_COMMAND_INVALIDATE|PCI_COMMAND_VGA_PALETTE| \\",
      "30:       PCI_COMMAND_WAIT|PCI_COMMAND_FAST_BACK)",
      "32: static void *command_init(struct pci_dev *dev, int offset)",
      "34:  struct pci_cmd_info *cmd = kmalloc(sizeof(*cmd), GFP_KERNEL);",
      "35:  int err;",
      "37:  if (!cmd)",
      "38:   return ERR_PTR(-ENOMEM);",
      "40:  err = pci_read_config_word(dev, PCI_COMMAND, &cmd->val);",
      "41:  if (err) {",
      "42:   kfree(cmd);",
      "43:   return ERR_PTR(err);",
      "46:  return cmd;",
      "47: }",
      "49: static int command_read(struct pci_dev *dev, int offset, u16 *value, void *data)",
      "50: {",
      "51:  int ret = pci_read_config_word(dev, offset, value);",
      "52:  const struct pci_cmd_info *cmd = data;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "43: {",
      "44:  struct xen_pcibk_dev_data *dev_data;",
      "45:  int err;",
      "47:  dev_data = pci_get_drvdata(dev);",
      "48:  if (!pci_is_enabled(dev) && is_enable_cmd(value)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "64:  u16 val;",
      "65:  struct pci_cmd_info *cmd = data;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "83:   }",
      "84:  }",
      "86:  return pci_write_config_word(dev, offset, value);",
      "87: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:  cmd->val = value;",
      "108:  if (!permissive && (!dev_data || !dev_data->permissive))",
      "109:   return 0;",
      "112:  err = pci_read_config_word(dev, offset, &val);",
      "113:  if (err || val == value)",
      "114:   return err;",
      "116:  value &= PCI_COMMAND_GUEST;",
      "117:  value |= val & ~PCI_COMMAND_GUEST;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "282:  {",
      "283:   .offset    = PCI_COMMAND,",
      "284:   .size      = 2,",
      "285:   .u.w.read  = command_read,",
      "286:   .u.w.write = command_write,",
      "287:  },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "318:   .init      = command_init,",
      "319:   .release   = bar_release,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8014bcc86ef112eab9ee1db312dba4e6b608cf89",
      "candidate_info": {
        "commit_hash": "8014bcc86ef112eab9ee1db312dba4e6b608cf89",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/8014bcc86ef112eab9ee1db312dba4e6b608cf89",
        "files": [
          "drivers/xen/xen-pciback/conf_space.c",
          "drivers/xen/xen-pciback/conf_space.h",
          "drivers/xen/xen-pciback/conf_space_header.c"
        ],
        "message": "xen-pciback: Add name prefix to global 'permissive' variable\n\nThe variable for the 'permissive' module parameter used to be static\nbut was recently changed to be extern.  This puts it in the kernel\nglobal namespace if the driver is built-in, so its name should begin\nwith a prefix identifying the driver.\n\nSigned-off-by: Ben Hutchings <ben@decadent.org.uk>\nFixes: af6fc858a35b (\"xen-pciback: limit guest control of command register\")\nSigned-off-by: David Vrabel <david.vrabel@citrix.com>",
        "before_after_code_files": [
          "drivers/xen/xen-pciback/conf_space.c||drivers/xen/xen-pciback/conf_space.c",
          "drivers/xen/xen-pciback/conf_space.h||drivers/xen/xen-pciback/conf_space.h",
          "drivers/xen/xen-pciback/conf_space_header.c||drivers/xen/xen-pciback/conf_space_header.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/xen/xen-pciback/conf_space.c||drivers/xen/xen-pciback/conf_space.c",
            "drivers/xen/xen-pciback/conf_space.h||drivers/xen/xen-pciback/conf_space.h",
            "drivers/xen/xen-pciback/conf_space_header.c||drivers/xen/xen-pciback/conf_space_header.c"
          ],
          "candidate": [
            "drivers/xen/xen-pciback/conf_space.c||drivers/xen/xen-pciback/conf_space.c",
            "drivers/xen/xen-pciback/conf_space.h||drivers/xen/xen-pciback/conf_space.h",
            "drivers/xen/xen-pciback/conf_space_header.c||drivers/xen/xen-pciback/conf_space_header.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/xen/xen-pciback/conf_space.c||drivers/xen/xen-pciback/conf_space.c": [
          "File: drivers/xen/xen-pciback/conf_space.c -> drivers/xen/xen-pciback/conf_space.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"conf_space.h\"",
          "17: #include \"conf_space_quirks.h\"",
          "",
          "[Removed Lines]",
          "19: bool permissive;",
          "20: module_param(permissive, bool, 0644);",
          "",
          "[Added Lines]",
          "19: bool xen_pcibk_permissive;",
          "20: module_param_named(permissive, xen_pcibk_permissive, bool, 0644);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "266:    switch (size) {",
          "267:    case 1:",
          "268:     err = pci_write_config_byte(dev, offset,",
          "",
          "[Removed Lines]",
          "265:   if (dev_data->permissive || permissive) {",
          "",
          "[Added Lines]",
          "265:   if (dev_data->permissive || xen_pcibk_permissive) {",
          "",
          "---------------"
        ],
        "drivers/xen/xen-pciback/conf_space.h||drivers/xen/xen-pciback/conf_space.h": [
          "File: drivers/xen/xen-pciback/conf_space.h -> drivers/xen/xen-pciback/conf_space.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:  void *data;",
          "65: };",
          "69: #define OFFSET(cfg_entry) ((cfg_entry)->base_offset+(cfg_entry)->field->offset)",
          "",
          "[Removed Lines]",
          "67: extern bool permissive;",
          "",
          "[Added Lines]",
          "67: extern bool xen_pcibk_permissive;",
          "",
          "---------------"
        ],
        "drivers/xen/xen-pciback/conf_space_header.c||drivers/xen/xen-pciback/conf_space_header.c": [
          "File: drivers/xen/xen-pciback/conf_space_header.c -> drivers/xen/xen-pciback/conf_space_header.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:  cmd->val = value;",
          "122:   return 0;",
          "",
          "[Removed Lines]",
          "121:  if (!permissive && (!dev_data || !dev_data->permissive))",
          "",
          "[Added Lines]",
          "121:  if (!xen_pcibk_permissive && (!dev_data || !dev_data->permissive))",
          "",
          "---------------"
        ]
      }
    }
  ]
}