{
  "cve_id": "CVE-2022-2454",
  "cve_desc": "Integer Overflow or Wraparound in GitHub repository gpac/gpac prior to 2.1-DEV.",
  "repo": "gpac/gpac",
  "patch_hash": "faa75edde3dfeba1e2cf6ffa48e45a50f1042096",
  "patch_info": {
    "commit_hash": "faa75edde3dfeba1e2cf6ffa48e45a50f1042096",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/faa75edde3dfeba1e2cf6ffa48e45a50f1042096",
    "files": [
      "src/laser/lsr_dec.c"
    ],
    "message": "fixed #2213",
    "before_after_code_files": [
      "src/laser/lsr_dec.c||src/laser/lsr_dec.c"
    ]
  },
  "patch_diff": {
    "src/laser/lsr_dec.c||src/laser/lsr_dec.c": [
      "File: src/laser/lsr_dec.c -> src/laser/lsr_dec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "839: static Fixed lsr_translate_coords(GF_LASeRCodec *lsr, u32 val, u32 nb_bits)",
      "840: {",
      "841: #ifdef GPAC_FIXED_POINT",
      "842:  if (val >> (nb_bits-1) ) {",
      "843:   s32 neg = (s32) val - (1<<nb_bits);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "841:  if (!nb_bits) return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b3d821c4ae9ba62b3a194d9dcb5e99f17bd56908",
      "candidate_info": {
        "commit_hash": "b3d821c4ae9ba62b3a194d9dcb5e99f17bd56908",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/b3d821c4ae9ba62b3a194d9dcb5e99f17bd56908",
        "files": [
          "src/laser/lsr_dec.c"
        ],
        "message": "fixed #2333",
        "before_after_code_files": [
          "src/laser/lsr_dec.c||src/laser/lsr_dec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/laser/lsr_dec.c||src/laser/lsr_dec.c"
          ],
          "candidate": [
            "src/laser/lsr_dec.c||src/laser/lsr_dec.c"
          ]
        }
      },
      "candidate_diff": {
        "src/laser/lsr_dec.c||src/laser/lsr_dec.c": [
          "File: src/laser/lsr_dec.c -> src/laser/lsr_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "301: static void lsr_read_extend_class(GF_LASeRCodec *lsr, char **out_data, u32 *out_len, const char *name)",
          "302: {",
          "304:  GF_LSR_READ_INT(lsr, len, lsr->info->cfg.extensionIDBits, \"reserved\");",
          "305:  len = lsr_read_vluimsbf5(lsr, \"len\");",
          "308:  if (out_data) *out_data = NULL;",
          "309:  if (out_len) *out_len = 0;",
          "310: }",
          "",
          "[Removed Lines]",
          "303:  u32 len;",
          "307:  gf_bs_read_long_int(lsr->bs, len);",
          "",
          "[Added Lines]",
          "303:  u32 len, blen;",
          "306:  while (len && !gf_bs_is_align(lsr->bs)) {",
          "307:   gf_bs_read_int(lsr->bs, len);",
          "308:   len--;",
          "309:  }",
          "310:  blen = len / 8;",
          "311:  gf_bs_skip_bytes(lsr->bs, blen);",
          "312:  len -= blen*8;",
          "314:  while (len) {",
          "315:   gf_bs_read_int(lsr->bs, 1);",
          "316:   len--;",
          "317:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "839: static Fixed lsr_translate_coords(GF_LASeRCodec *lsr, u32 val, u32 nb_bits)",
          "840: {",
          "841:  if (!nb_bits) return 0;",
          "843: #ifdef GPAC_FIXED_POINT",
          "844:  if (val >> (nb_bits-1) ) {",
          "846:   if (neg < -FIX_ONE / 2)",
          "847:    return 2 * gf_divfix(INT2FIX(neg/2), lsr->res_factor);",
          "848:   return gf_divfix(INT2FIX(neg), lsr->res_factor);",
          "",
          "[Removed Lines]",
          "845:   s32 neg = (s32) val - (1<<nb_bits);",
          "",
          "[Added Lines]",
          "852:  if (nb_bits>=32) return 0;",
          "856:   s64 neg = (s64) val - (0x00000001UL << nb_bits);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "853:  }",
          "854: #else",
          "855:  if (val >> (nb_bits-1) ) {",
          "858:  } else {",
          "860:  }",
          "861: #endif",
          "862: }",
          "",
          "[Removed Lines]",
          "856:   s32 neg = (s32) val - (1<<nb_bits);",
          "857:   return gf_divfix(INT2FIX(neg), lsr->res_factor);",
          "859:   return gf_divfix(INT2FIX(val), lsr->res_factor);",
          "",
          "[Added Lines]",
          "867:   s64 neg = (s64) val - (0x00000001UL << nb_bits);",
          "868:   return ((Fixed)neg) / lsr->res_factor;",
          "870:   return ((Fixed)val) / lsr->res_factor;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "864: static Fixed lsr_translate_scale(GF_LASeRCodec *lsr, u32 val)",
          "865: {",
          "866:  if (val >> (lsr->coord_bits-1) ) {",
          "868:   return INT2FIX(v) / 256 ;",
          "869:  } else {",
          "870:   return INT2FIX(val) / 256;",
          "",
          "[Removed Lines]",
          "867:   s32 v = val - (1<<lsr->coord_bits);",
          "",
          "[Added Lines]",
          "878:   s64 v = val - (0x00000001UL << lsr->coord_bits);",
          "",
          "---------------"
        ]
      }
    }
  ]
}