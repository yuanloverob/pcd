{
  "cve_id": "CVE-2017-6952",
  "cve_desc": "Integer overflow in the cs_winkernel_malloc function in winkernel_mm.c in Capstone 3.0.4 and earlier allows attackers to cause a denial of service (heap-based buffer overflow in a kernel driver) or possibly have unspecified other impact via a large value.",
  "repo": "aquynh/capstone",
  "patch_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
  "patch_info": {
    "commit_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/6fe86eef621b9849f51a5e1e5d73258a93440403",
    "files": [
      "windows/winkernel_mm.c"
    ],
    "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
    "before_after_code_files": [
      "windows/winkernel_mm.c||windows/winkernel_mm.c"
    ]
  },
  "patch_diff": {
    "windows/winkernel_mm.c||windows/winkernel_mm.c": [
      "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"winkernel_mm.h\"",
      "5: #include <ntddk.h>",
      "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <Ntintsafe.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
      "38:  if (!block) {",
      "39:   return NULL;",
      "40:  }",
      "",
      "[Removed Lines]",
      "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
      "",
      "[Added Lines]",
      "37:  size_t number_of_bytes = 0;",
      "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
      "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
      "43:   return NULL;",
      "44:  }",
      "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e1e2b5b790926ffcabc720c1a2abe86e414b164c",
      "candidate_info": {
        "commit_hash": "e1e2b5b790926ffcabc720c1a2abe86e414b164c",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/e1e2b5b790926ffcabc720c1a2abe86e414b164c",
        "files": [
          "arch/ARM/ARMInstPrinter.c"
        ],
        "message": "fix compiling error in MS VS2015 (#869)\n\nfor issue #868",
        "before_after_code_files": [
          "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c": [
          "File: arch/ARM/ARMInstPrinter.c -> arch/ARM/ARMInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1159:  }",
          "1161:  if (MI->csh->detail) {",
          "1163:   MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].type = ARM_OP_IMM;",
          "1164:   MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].imm = v;",
          "1165:   MI->flat_insn->detail->arm.op_count++;",
          "",
          "[Removed Lines]",
          "1162:   int v = (Imm & 256) ? ((Imm & 0xff) << 2) : -((Imm & 0xff) << 2);",
          "",
          "[Added Lines]",
          "1162:   int v = (Imm & 256) ? ((Imm & 0xff) << 2) : -((((int)Imm) & 0xff) << 2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08b0e46a4c253d5c3974f205f4576d163b18ac00",
      "candidate_info": {
        "commit_hash": "08b0e46a4c253d5c3974f205f4576d163b18ac00",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/08b0e46a4c253d5c3974f205f4576d163b18ac00",
        "files": [
          "arch/X86/X86GenAsmWriter.inc"
        ],
        "message": "x86: fix (AT&T) ROL instruction in issue #804",
        "before_after_code_files": [
          "arch/X86/X86GenAsmWriter.inc||arch/X86/X86GenAsmWriter.inc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86GenAsmWriter.inc||arch/X86/X86GenAsmWriter.inc": [
          "File: arch/X86/X86GenAsmWriter.inc -> arch/X86/X86GenAsmWriter.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "14171:   if (!X86_lockrep(MI, O)) {",
          "14172: #ifndef CAPSTONE_DIET",
          "14178: #endif",
          "14179:   }",
          "",
          "[Removed Lines]",
          "14174:     if (opcode == X86_MOV32sm) {",
          "14175:       SStream_concat0(O, \"movw\\t\");",
          "14176:     } else",
          "14177:       SStream_concat0(O, AsmStrs+(Bits & 16383)-1);",
          "",
          "[Added Lines]",
          "14174:     switch(opcode) {",
          "14175:       default:",
          "14176:         SStream_concat0(O, AsmStrs+(Bits & 16383)-1);",
          "14177:         break;",
          "14178:       case X86_MOV32sm:",
          "14179:         SStream_concat0(O, \"movw\\t\");",
          "14180:         break;",
          "14181:       case X86_ROL32r1:",
          "14182:         SStream_concat0(O, \"rol\\t$1, \");",
          "14183:         break;",
          "14184:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a6fca85e46908cbd43db59e8a40d4db2525681d",
      "candidate_info": {
        "commit_hash": "8a6fca85e46908cbd43db59e8a40d4db2525681d",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/8a6fca85e46908cbd43db59e8a40d4db2525681d",
        "files": [
          "arch/M68K/M68KDisassembler.c",
          "arch/M68K/M68KInstPrinter.c",
          "bindings/python/capstone/m68k.py",
          "bindings/python/capstone/m68k_const.py",
          "bindings/python/test_m68k.py",
          "include/capstone/m68k.h"
        ],
        "message": "M68K: Branch targets are a separate addressing mode; PC relative displacements printed as target addresses (#1068)\n\n* Branch targets are a separate addressing mode\n\nBranch targets are relative displacements that identify code locations. These are neither .w nor .l nor immediates. This change removes the immediate #s before branch target addresses in disassembly, and represents the actual branch instructions more accurately in the cs_m68k_op datastructure.\n\nM68K Python bindings have also been updated.\n\n* m68k_inst.pc handles better; print target for PC relative offsets\n\nPrevious changes to branch operations relied on m68k_inst.pc pointing to (start of instruction + 2). This was not the case - it pointed to the end of the current instruction. This change makes it so that m68k_inst.pc points to (start of instruction), which is simple to work with.\n\nIt also changes printing of PC relative offsets to print the absolute target address, which is consistent with how most 68000 assemblers & disassemblers behave.",
        "before_after_code_files": [
          "arch/M68K/M68KDisassembler.c||arch/M68K/M68KDisassembler.c",
          "arch/M68K/M68KInstPrinter.c||arch/M68K/M68KInstPrinter.c",
          "bindings/python/capstone/m68k.py||bindings/python/capstone/m68k.py",
          "bindings/python/capstone/m68k_const.py||bindings/python/capstone/m68k_const.py",
          "bindings/python/test_m68k.py||bindings/python/test_m68k.py",
          "include/capstone/m68k.h||include/capstone/m68k.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/M68K/M68KDisassembler.c||arch/M68K/M68KDisassembler.c": [
          "File: arch/M68K/M68KDisassembler.c -> arch/M68K/M68KDisassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "759:  op1->reg = reg;",
          "760: }",
          "763: {",
          "764:  cs_m68k_op* op;",
          "765:  cs_m68k* ext = build_init_op(info, opcode, 1, size);",
          "",
          "[Removed Lines]",
          "762: static void build_bxx(m68k_info *info, int opcode, int size, int jump_offset)",
          "",
          "[Added Lines]",
          "762: static void build_relative_branch(m68k_info *info, int opcode, int size, int displacement)",
          "763: {",
          "764:  cs_m68k_op* op;",
          "765:  cs_m68k* ext = build_init_op(info, opcode, 1, size);",
          "767:  op = &ext->operands[0];",
          "769:  op->type = M68K_OP_BR_DISP;",
          "770:  op->address_mode = M68K_AM_BRANCH_DISPLACEMENT;",
          "771:  op->br_disp.disp = displacement;",
          "772:  op->br_disp.disp_size = size;",
          "774:  set_insn_group(info, M68K_GRP_JUMP);",
          "775:  set_insn_group(info, M68K_GRP_BRANCH_RELATIVE);",
          "776: }",
          "778: static void build_absolute_jump_with_immediate(m68k_info *info, int opcode, int size, int immediate)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "769:  op->type = M68K_OP_IMM;",
          "770:  op->address_mode = M68K_AM_IMMEDIATE;",
          "773:  set_insn_group(info, M68K_GRP_JUMP);",
          "775: }",
          "778: {",
          "780: }",
          "783: {",
          "785: }",
          "788: {",
          "789:  cs_m68k_op* op0;",
          "790:  cs_m68k_op* op1;",
          "",
          "[Removed Lines]",
          "771:  op->imm = jump_offset;",
          "774:  set_insn_group(info, M68K_GRP_BRANCH_RELATIVE);",
          "777: static void build_bcc(m68k_info *info, int size, int jump_offset)",
          "779:  build_bxx(info, s_branch_lut[(info->ir >> 8) & 0xf], size, jump_offset);",
          "782: static void build_trap(m68k_info *info, int size, int jump_offset)",
          "784:  build_bxx(info, s_trap_lut[(info->ir >> 8) & 0xf], size, jump_offset);",
          "787: static void build_dbxx(m68k_info *info, int opcode, int size, int jump_offset)",
          "",
          "[Added Lines]",
          "787:  op->imm = immediate;",
          "792: static void build_bcc(m68k_info *info, int size, int displacement)",
          "794:  build_relative_branch(info, s_branch_lut[(info->ir >> 8) & 0xf], size, displacement);",
          "797: static void build_trap(m68k_info *info, int size, int immediate)",
          "799:  build_absolute_jump_with_immediate(info, s_trap_lut[(info->ir >> 8) & 0xf], size, immediate);",
          "802: static void build_dbxx(m68k_info *info, int opcode, int size, int displacement)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "796:  op0->address_mode = M68K_AM_REG_DIRECT_DATA;",
          "797:  op0->reg = M68K_REG_D0 + (info->ir & 7);",
          "803:  set_insn_group(info, M68K_GRP_JUMP);",
          "804:  set_insn_group(info, M68K_GRP_BRANCH_RELATIVE);",
          "805: }",
          "808: {",
          "810: }",
          "812: static void build_d_d_ea(m68k_info *info, int opcode, int size)",
          "",
          "[Removed Lines]",
          "799:  op1->type = M68K_OP_IMM;",
          "800:  op1->address_mode = M68K_AM_IMMEDIATE;",
          "801:  op1->imm = jump_offset;",
          "807: static void build_dbcc(m68k_info *info, int size, int jump_offset)",
          "809:  build_dbxx(info, s_dbcc_lut[(info->ir >> 8) & 0xf], size, jump_offset);",
          "",
          "[Added Lines]",
          "814:  op1->type = M68K_OP_BR_DISP;",
          "815:  op1->address_mode = M68K_AM_BRANCH_DISPLACEMENT;",
          "816:  op1->br_disp.disp = displacement;",
          "817:  op1->br_disp.disp_size = M68K_OP_BR_DISP_SIZE_LONG;",
          "823: static void build_dbcc(m68k_info *info, int size, int displacement)",
          "825:  build_dbxx(info, s_dbcc_lut[(info->ir >> 8) & 0xf], size, displacement);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1457: static void d68000_bcc_8(m68k_info *info)",
          "1458: {",
          "1461: }",
          "1463: static void d68000_bcc_16(m68k_info *info)",
          "1464: {",
          "1467: }",
          "1469: static void d68020_bcc_32(m68k_info *info)",
          "1470: {",
          "1472:  LIMIT_CPU_TYPES(info, M68020_PLUS);",
          "1474: }",
          "1476: static void d68000_bchg_r(m68k_info *info)",
          "",
          "[Removed Lines]",
          "1459:  uint temp_pc = info->pc;",
          "1460:  build_bcc(info, 1, temp_pc + make_int_8(info->ir));",
          "1465:  uint temp_pc = info->pc;",
          "1466:  build_bcc(info, 2, temp_pc + make_int_16(read_imm_16(info)));",
          "1471:  uint temp_pc = info->pc;",
          "1473:  build_bcc(info, 4, temp_pc + read_imm_32(info));",
          "",
          "[Added Lines]",
          "1475:  build_bcc(info, 1, make_int_8(info->ir));",
          "1480:  build_bcc(info, 2, make_int_16(read_imm_16(info)));",
          "1486:  build_bcc(info, 4, read_imm_32(info));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1496: static void d68010_bkpt(m68k_info *info)",
          "1497: {",
          "1498:  LIMIT_CPU_TYPES(info, M68010_PLUS);",
          "1500: }",
          "1502: static void d68020_bfchg(m68k_info *info)",
          "",
          "[Removed Lines]",
          "1499:  build_bxx(info, M68K_INS_BKPT, 0, info->ir & 7);",
          "",
          "[Added Lines]",
          "1512:  build_absolute_jump_with_immediate(info, M68K_INS_BKPT, 0, info->ir & 7);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1559: static void d68000_bra_8(m68k_info *info)",
          "1560: {",
          "1563: }",
          "1565: static void d68000_bra_16(m68k_info *info)",
          "1566: {",
          "1569: }",
          "1571: static void d68020_bra_32(m68k_info *info)",
          "1572: {",
          "1574:  LIMIT_CPU_TYPES(info, M68020_PLUS);",
          "1576: }",
          "1578: static void d68000_bset_r(m68k_info *info)",
          "",
          "[Removed Lines]",
          "1561:  uint temp_pc = info->pc;",
          "1562:  build_bxx(info, M68K_INS_BRA, 1, temp_pc + make_int_8(info->ir));",
          "1567:  uint temp_pc = info->pc;",
          "1568:  build_bxx(info, M68K_INS_BRA, 2, temp_pc + make_int_16(read_imm_16(info)));",
          "1573:  uint temp_pc = info->pc;",
          "1575:  build_bxx(info, M68K_INS_BRA, 4, temp_pc + read_imm_32(info));",
          "",
          "[Added Lines]",
          "1574:  build_relative_branch(info, M68K_INS_BRA, 1, make_int_8(info->ir));",
          "1579:  build_relative_branch(info, M68K_INS_BRA, 2, make_int_16(read_imm_16(info)));",
          "1585:  build_relative_branch(info, M68K_INS_BRA, 4, read_imm_32(info));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1588: static void d68000_bsr_8(m68k_info *info)",
          "1589: {",
          "1592: }",
          "1594: static void d68000_bsr_16(m68k_info *info)",
          "1595: {",
          "1598: }",
          "1600: static void d68020_bsr_32(m68k_info *info)",
          "1601: {",
          "1603:  LIMIT_CPU_TYPES(info, M68020_PLUS);",
          "1605: }",
          "1607: static void d68000_btst_r(m68k_info *info)",
          "",
          "[Removed Lines]",
          "1590:  uint temp_pc = info->pc;",
          "1591:  build_bxx(info, M68K_INS_BSR, 1, temp_pc + make_int_8(info->ir));",
          "1596:  uint temp_pc = info->pc;",
          "1597:  build_bxx(info, M68K_INS_BSR, 2, temp_pc + make_int_16(read_imm_16(info)));",
          "1602:  uint temp_pc = info->pc;",
          "1604:  build_bxx(info, M68K_INS_BSR, 4, temp_pc + peek_imm_32(info));",
          "",
          "[Added Lines]",
          "1600:  build_relative_branch(info, M68K_INS_BSR, 1, make_int_8(info->ir));",
          "1605:  build_relative_branch(info, M68K_INS_BSR, 2, make_int_16(read_imm_16(info)));",
          "1611:  build_relative_branch(info, M68K_INS_BSR, 4, peek_imm_32(info));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1789:  build_pi_pi(info, M68K_INS_CMPM, 4);",
          "1790: }",
          "1792: static void d68020_cpbcc_16(m68k_info *info)",
          "1793: {",
          "1794:  cs_m68k_op* op0;",
          "1795:  cs_m68k* ext;",
          "1797:  LIMIT_CPU_TYPES(info, M68020_PLUS);",
          "1803:  info->inst->Opcode += (info->ir & 0x2f);",
          "1805:  ext = build_init_op(info, M68K_INS_FBF, 1, 2);",
          "1806:  op0 = &ext->operands[0];",
          "1812:  set_insn_group(info, M68K_GRP_BRANCH_RELATIVE);",
          "1813: }",
          "",
          "[Removed Lines]",
          "1796:  uint new_pc;",
          "1799:  new_pc = info->pc;",
          "1800:  new_pc += make_int_16(read_imm_16(info));",
          "1808:  op0->address_mode = M68K_AM_IMMEDIATE;",
          "1809:  op0->type = M68K_OP_IMM;",
          "1810:  op0->imm = new_pc;",
          "",
          "[Added Lines]",
          "1799: static void make_cpbcc_operand(cs_m68k_op* op, int size, int displacement)",
          "1800: {",
          "1801:  op->address_mode = M68K_AM_BRANCH_DISPLACEMENT;",
          "1802:  op->type = M68K_OP_BR_DISP;",
          "1803:  op->br_disp.disp = displacement;",
          "1804:  op->br_disp.disp_size = size;",
          "1805: }",
          "1819:  make_cpbcc_operand(op0, M68K_OP_BR_DISP_SIZE_WORD, make_int_16(read_imm_16(info)));",
          "1821:  set_insn_group(info, M68K_GRP_JUMP);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1816: {",
          "1817:  cs_m68k* ext;",
          "1818:  cs_m68k_op* op0;",
          "1821:  LIMIT_CPU_TYPES(info, M68020_PLUS);",
          "1823:  LIMIT_CPU_TYPES(info, M68020_PLUS);",
          "1829:  info->inst->Opcode += (info->ir & 0x2f);",
          "1831:  ext = build_init_op(info, M68K_INS_FBF, 1, 4);",
          "1832:  op0 = &ext->operands[0];",
          "1838:  set_insn_group(info, M68K_GRP_BRANCH_RELATIVE);",
          "1839: }",
          "",
          "[Removed Lines]",
          "1819:  uint new_pc;",
          "1825:  new_pc = info->pc;",
          "1826:  new_pc += read_imm_32(info);",
          "1834:  op0->type = M68K_OP_IMM;",
          "1835:  op0->address_mode = M68K_AM_IMMEDIATE;",
          "1836:  op0->imm = new_pc;",
          "",
          "[Added Lines]",
          "1840:  make_cpbcc_operand(op0, M68K_OP_BR_DISP_SIZE_LONG, read_imm_32(info));",
          "1842:  set_insn_group(info, M68K_GRP_JUMP);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1843:  cs_m68k* ext;",
          "1844:  cs_m68k_op* op0;",
          "1845:  cs_m68k_op* op1;",
          "1848:  LIMIT_CPU_TYPES(info, M68020_PLUS);",
          "1851:  ext1 = read_imm_16(info);",
          "1852:  ext2 = read_imm_16(info);",
          "1857:  info->inst->Opcode += (ext1 & 0x2f);",
          "",
          "[Removed Lines]",
          "1846:  uint new_pc, ext1, ext2;",
          "1850:  new_pc = info->pc;",
          "1853:  new_pc += make_int_16(ext2) + 2;",
          "",
          "[Added Lines]",
          "1851:  uint ext1, ext2;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1863:  op0->reg = M68K_REG_D0 + (info->ir & 7);",
          "1869:  set_insn_group(info, M68K_GRP_BRANCH_RELATIVE);",
          "1870: }",
          "",
          "[Removed Lines]",
          "1865:  op1->address_mode = M68K_AM_IMMEDIATE;",
          "1866:  op1->type = M68K_OP_IMM;",
          "1867:  op1->imm = new_pc;",
          "",
          "[Added Lines]",
          "1867:  make_cpbcc_operand(op1, M68K_OP_BR_DISP_SIZE_WORD, make_int_16(ext2) + 2);",
          "1869:  set_insn_group(info, M68K_GRP_JUMP);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2213: static void d68000_dbra(m68k_info *info)",
          "2214: {",
          "2217: }",
          "2219: static void d68000_dbcc(m68k_info *info)",
          "2220: {",
          "2223: }",
          "2225: static void d68000_divs(m68k_info *info)",
          "",
          "[Removed Lines]",
          "2215:  uint temp_pc = info->pc;",
          "2216:  build_dbxx(info, M68K_INS_DBRA, 0, temp_pc + make_int_16(read_imm_16(info)));",
          "2221:  uint temp_pc = info->pc;",
          "2222:  build_dbcc(info, 0, temp_pc + make_int_16(read_imm_16(info)));",
          "",
          "[Added Lines]",
          "2216:  build_dbxx(info, M68K_INS_DBRA, 0, make_int_16(read_imm_16(info)));",
          "2221:  build_dbcc(info, 0, make_int_16(read_imm_16(info)));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3091: {",
          "3092:  set_insn_group(info, M68K_GRP_RET);",
          "3093:  LIMIT_CPU_TYPES(info, M68010_PLUS);",
          "3095: }",
          "3097: static void d68000_rte(m68k_info *info)",
          "",
          "[Removed Lines]",
          "3094:  build_bxx(info, M68K_INS_RTD, 0, read_imm_16(info));",
          "",
          "[Added Lines]",
          "3093:  build_absolute_jump_with_immediate(info, M68K_INS_RTD, 0, read_imm_16(info));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3110:  LIMIT_CPU_TYPES(info, M68020_ONLY);",
          "3114:  ext = &info->extension;",
          "3115:  op = &ext->operands[0];",
          "",
          "[Removed Lines]",
          "3112:  build_bxx(info, M68K_INS_RTM, 0, 0);",
          "",
          "[Added Lines]",
          "3111:  build_absolute_jump_with_immediate(info, M68K_INS_RTM, 0, 0);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3155: static void d68000_stop(m68k_info *info)",
          "3156: {",
          "3158: }",
          "3160: static void d68000_sub_er_8(m68k_info *info)",
          "",
          "[Removed Lines]",
          "3157:  build_bxx(info, M68K_INS_STOP, 0, read_imm_16(info));",
          "",
          "[Added Lines]",
          "3156:  build_absolute_jump_with_immediate(info, M68K_INS_STOP, 0, read_imm_16(info));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3270: static void d68000_trap(m68k_info *info)",
          "3271: {",
          "3273: }",
          "3275: static void d68020_trapcc_0(m68k_info *info)",
          "",
          "[Removed Lines]",
          "3272:  build_bxx(info, M68K_INS_TRAP, 0, info->ir&0xf);",
          "",
          "[Added Lines]",
          "3271:  build_absolute_jump_with_immediate(info, M68K_INS_TRAP, 0, info->ir&0xf);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4019:  MCInst *inst = info->inst;",
          "4020:  cs_m68k* ext = &info->extension;",
          "4021:  int i;",
          "4023:  inst->Opcode = M68K_INS_INVALID;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4021:  unsigned int size;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4036:   g_instruction_table[info->ir].instruction(info);",
          "4037:  }",
          "4040: }",
          "4042: bool M68K_getInstruction(csh ud, const uint8_t* code, size_t code_len, MCInst* instr, uint16_t* size, uint64_t address, void* inst_info)",
          "",
          "[Removed Lines]",
          "4039:  return info->pc - (unsigned int)pc;",
          "",
          "[Added Lines]",
          "4039:  size = info->pc - (unsigned int)pc;",
          "4040:  info->pc = (unsigned int)pc;",
          "4042:  return size;",
          "",
          "---------------"
        ],
        "arch/M68K/M68KInstPrinter.c||arch/M68K/M68KInstPrinter.c": [
          "File: arch/M68K/M68KInstPrinter.c -> arch/M68K/M68KInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:    s_reg_names[M68K_REG_D0 + op->reg_pair.reg_1]);",
          "122: }",
          "125: {",
          "126:  switch (op->address_mode) {",
          "127:   case M68K_AM_NONE:",
          "",
          "[Removed Lines]",
          "124: void printAddressingMode(SStream* O, const cs_m68k* inst, const cs_m68k_op* op)",
          "",
          "[Added Lines]",
          "124: void printAddressingMode(SStream* O, unsigned int pc, const cs_m68k* inst, const cs_m68k_op* op)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:   case M68K_AM_REGI_ADDR_POST_INC: SStream_concat(O, \"(a%d)+\", (op->reg - M68K_REG_A0)); break;",
          "147:   case M68K_AM_REGI_ADDR_PRE_DEC: SStream_concat(O, \"-(a%d)\", (op->reg - M68K_REG_A0)); break;",
          "148:   case M68K_AM_REGI_ADDR_DISP: SStream_concat(O, \"%s$%x(a%d)\", op->mem.disp < 0 ? \"-\" : \"\", abs(op->mem.disp), (op->mem.base_reg - M68K_REG_A0)); break;",
          "150:   case M68K_AM_ABSOLUTE_DATA_SHORT: SStream_concat(O, \"$%x.w\", op->imm); break;",
          "151:   case M68K_AM_ABSOLUTE_DATA_LONG: SStream_concat(O, \"$%x.l\", op->imm); break;",
          "152:   case M68K_AM_IMMEDIATE:",
          "",
          "[Removed Lines]",
          "149:   case M68K_AM_PCI_DISP: SStream_concat(O, \"%s$%x(pc)\", op->mem.disp < 0 ? \"-\" : \"\", abs(op->mem.disp)); break;",
          "",
          "[Added Lines]",
          "149:   case M68K_AM_PCI_DISP: SStream_concat(O, \"$%x(pc)\", pc + 2 + op->mem.disp); break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168:     SStream_concat(O, \"#$%x\", op->imm);",
          "169:     break;",
          "170:   case M68K_AM_PCI_INDEX_8_BIT_DISP:",
          "172:    break;",
          "173:   case M68K_AM_AREGI_INDEX_8_BIT_DISP:",
          "174:    SStream_concat(O, \"%s$%x(%s,%s%s.%c)\", op->mem.disp < 0 ? \"-\" : \"\", abs(op->mem.disp), getRegName(op->mem.base_reg), s_spacing, getRegName(op->mem.index_reg), op->mem.index_size ? 'l' : 'w');",
          "175:    break;",
          "176:   case M68K_AM_PCI_INDEX_BASE_DISP:",
          "177:   case M68K_AM_AREGI_INDEX_BASE_DISP:",
          "181:    SStream_concat(O, \"(\");",
          "",
          "[Removed Lines]",
          "171:    SStream_concat(O, \"%s$%x(pc,%s%s.%c)\", op->mem.disp < 0 ? \"-\" : \"\", abs(op->mem.disp), s_spacing, getRegName(op->mem.index_reg), op->mem.index_size ? 'l' : 'w');",
          "178:    if (op->mem.in_disp > 0)",
          "179:        SStream_concat(O, \"$%x\", op->mem.in_disp);",
          "",
          "[Added Lines]",
          "171:    SStream_concat(O, \"$%x(pc,%s%s.%c)\", pc + 2 + op->mem.disp, s_spacing, getRegName(op->mem.index_reg), op->mem.index_size ? 'l' : 'w');",
          "179:    if (op->address_mode == M68K_AM_PCI_INDEX_BASE_DISP) {",
          "180:     SStream_concat(O, \"$%x\", pc + 2 + op->mem.in_disp);",
          "181:    }",
          "182:    else {",
          "183:     if (op->mem.in_disp > 0)",
          "184:      SStream_concat(O, \"$%x\", op->mem.in_disp);",
          "185:    }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "201:   case M68K_AM_MEMI_PRE_INDEX:",
          "202:   case M68K_AM_MEMI_POST_INDEX:",
          "203:    SStream_concat(O, \"([\");",
          "207:    if (op->mem.base_reg != M68K_REG_INVALID) {",
          "208:     if (op->mem.in_disp > 0)",
          "",
          "[Removed Lines]",
          "204:    if (op->mem.in_disp > 0)",
          "205:        SStream_concat(O, \"$%x\", op->mem.in_disp);",
          "",
          "[Added Lines]",
          "211:    if (op->address_mode == M68K_AM_PC_MEMI_POST_INDEX || op->address_mode == M68K_AM_PC_MEMI_PRE_INDEX) {",
          "212:     SStream_concat(O, \"$%x\", pc + 2 + op->mem.in_disp);",
          "213:    } else {",
          "214:     if (op->mem.in_disp > 0)",
          "215:      SStream_concat(O, \"$%x\", op->mem.in_disp);",
          "216:    }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "229:    SStream_concat(O, \")\");",
          "230:    break;",
          "231:   default:",
          "232:    break;",
          "233:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:   case M68K_AM_BRANCH_DISPLACEMENT:",
          "243:    SStream_concat(O, \"$%x\", pc + 2 + op->br_disp.disp);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "306:  if (MI->Opcode == M68K_INS_CAS2) {",
          "307:   int reg_value_0, reg_value_1;",
          "310:   reg_value_0 = ext->operands[2].register_bits >> 4;",
          "311:   reg_value_1 = ext->operands[2].register_bits & 0xf;",
          "312:   SStream_concat(O, \"(%s):(%s)\", s_reg_names[M68K_REG_D0 + reg_value_0], s_reg_names[M68K_REG_D0 + reg_value_1]);",
          "",
          "[Removed Lines]",
          "308:   printAddressingMode(O, ext, &ext->operands[0]); SStream_concat0(O, \",\");",
          "309:   printAddressingMode(O, ext, &ext->operands[1]); SStream_concat0(O, \",\");",
          "",
          "[Added Lines]",
          "321:   printAddressingMode(O, info->pc, ext, &ext->operands[0]); SStream_concat0(O, \",\");",
          "322:   printAddressingMode(O, info->pc, ext, &ext->operands[1]); SStream_concat0(O, \",\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "314:  }",
          "316:  for (i  = 0; i < ext->op_count; ++i) {",
          "318:   if ((i + 1) != ext->op_count)",
          "319:    SStream_concat(O, \",%s\", s_spacing);",
          "320:  }",
          "",
          "[Removed Lines]",
          "317:   printAddressingMode(O, ext, &ext->operands[i]);",
          "",
          "[Added Lines]",
          "330:   printAddressingMode(O, info->pc, ext, &ext->operands[i]);",
          "",
          "---------------"
        ],
        "bindings/python/capstone/m68k.py||bindings/python/capstone/m68k.py": [
          "File: bindings/python/capstone/m68k.py -> bindings/python/capstone/m68k.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:         ('reg_pair', M68KOpRegPair),",
          "36:     )",
          "38: class M68KOp(ctypes.Structure):",
          "39:     _fields_ = (",
          "40:         ('value', M68KOpValue),",
          "41:         ('mem', M68KOpMem),",
          "42:         ('register_bits', ctypes.c_uint),",
          "43:         ('type', ctypes.c_uint),",
          "44:         ('address_mode', ctypes.c_uint),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: class M68KOpBrDisp(ctypes.Structure):",
          "39:     _fields_ = (",
          "40:         ('disp', ctypes.c_int),",
          "41:         ('disp_size', ctypes.c_ubyte),",
          "42:     )",
          "48:         ('br_disp', M68KOpBrDisp),",
          "",
          "---------------"
        ],
        "bindings/python/capstone/m68k_const.py||bindings/python/capstone/m68k_const.py": [
          "File: bindings/python/capstone/m68k_const.py -> bindings/python/capstone/m68k_const.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: M68K_AM_ABSOLUTE_DATA_SHORT = 16",
          "74: M68K_AM_ABSOLUTE_DATA_LONG = 17",
          "75: M68K_AM_IMMEDIATE = 18",
          "77: # Operand type for instruction's operands",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: M68K_AM_BRANCH_DISPLACEMENT = 19",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84: M68K_OP_FP_DOUBLE = 5",
          "85: M68K_OP_REG_BITS = 6",
          "86: M68K_OP_REG_PAIR = 7",
          "88: M68K_CPU_SIZE_NONE = 0",
          "89: M68K_CPU_SIZE_BYTE = 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: M68K_OP_BR_DISP = 8",
          "90: # Operand type for instruction's operands",
          "92: M68K_OP_BR_DISP_SIZE_INVALID = 0",
          "93: M68K_OP_BR_DISP_SIZE_BYTE = 1",
          "94: M68K_OP_BR_DISP_SIZE_WORD = 2",
          "95: M68K_OP_BR_DISP_SIZE_LONG = 4",
          "",
          "---------------"
        ],
        "bindings/python/test_m68k.py||bindings/python/test_m68k.py": [
          "File: bindings/python/test_m68k.py -> bindings/python/test_m68k.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:  16: \"Absolute Data Addressing  - Short\",",
          "41:  17: \"Absolute Data Addressing  - Long\",",
          "42:  18: \"Immediate value\",",
          "43: }",
          "45: def print_read_write_regs(insn):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:     19: \"Branch Displacement\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:         elif op.type == M68K_OP_FP_DOUBLE:",
          "83:             print(\"\\t\\toperands[%u].type: FP_DOUBLE\" % i)",
          "84:             print(\"\\t\\toperands[%u].dimm: %lf\", i, op.dimm)",
          "85:     print()",
          "87: # ## Test class Cs",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:         elif op.type == M68K_OP_BR_DISP:",
          "88:             print(\"\\t\\toperands[%u].br_disp.disp: 0x%x\" % (i, op.br_disp.disp))",
          "89:             print(\"\\t\\toperands[%u].br_disp.disp_size: %d\" % (i, op.br_disp.disp_size))",
          "",
          "---------------"
        ],
        "include/capstone/m68k.h||include/capstone/m68k.h": [
          "File: include/capstone/m68k.h -> include/capstone/m68k.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:  M68K_AM_ABSOLUTE_DATA_SHORT, // Absolute Data Addressing  - Short",
          "105:  M68K_AM_ABSOLUTE_DATA_LONG,  // Absolute Data Addressing  - Long",
          "106:  M68K_AM_IMMEDIATE,              // Immediate value",
          "107: } m68k_address_mode;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:  M68K_AM_BRANCH_DISPLACEMENT,    // Address as displacement from (PC+2) used by branches",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:  M68K_OP_FP_DOUBLE,   // double precision Floating-Point operand",
          "117:  M68K_OP_REG_BITS,    // Register bits move",
          "118:  M68K_OP_REG_PAIR,    // Register pair in the same op (upper 4 bits for first reg, lower for second)",
          "119: } m68k_op_type;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:  M68K_OP_BR_DISP,     // Branch displacement",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "134:  uint8_t index_size;     // 0 = w, 1 = l",
          "135: } m68k_op_mem;",
          "138: typedef struct cs_m68k_op {",
          "139:  union {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142: typedef enum m68k_op_br_disp_size {",
          "143:  M68K_OP_BR_DISP_SIZE_INVALID = 0, // = CS_OP_INVALID (Uninitialized).",
          "144:  M68K_OP_BR_DISP_SIZE_BYTE = 1,    // signed 8-bit displacement",
          "145:  M68K_OP_BR_DISP_SIZE_WORD = 2,    // signed 16-bit displacement",
          "146:  M68K_OP_BR_DISP_SIZE_LONG = 4,    // signed 32-bit displacement",
          "147: } m68k_op_br_disp_size;",
          "149: typedef struct m68k_op_br_disp {",
          "150:  int32_t disp;         // displacement value",
          "151:  uint8_t disp_size;  // Size from m68k_op_br_disp_size type above",
          "152: } m68k_op_br_disp;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "148:  };",
          "150:  m68k_op_mem mem;      // data when operand is targeting memory",
          "151:  uint32_t register_bits; // register bits for movem etc. (always in d0-d7, a0-a7, fp0 - fp7 order)",
          "152:  m68k_op_type type;",
          "153:  m68k_address_mode address_mode; // M68K addressing mode for this op",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168:  m68k_op_br_disp br_disp; // data when operand is a branch displacement",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e0afaabd2d5e8ebb54751cae2a7f86cd32db10e0",
      "candidate_info": {
        "commit_hash": "e0afaabd2d5e8ebb54751cae2a7f86cd32db10e0",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/e0afaabd2d5e8ebb54751cae2a7f86cd32db10e0",
        "files": [
          "arch/X86/X86Mapping.c"
        ],
        "message": "Update X86Mapping.c",
        "before_after_code_files": [
          "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
          "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2752:  { X86_INVLPGA64, X86_REG_RAX, X86_REG_ECX, CS_AC_READ, CS_AC_READ },",
          "2753: };",
          "2757: static int regs_cmp(const void *a, const void *b)",
          "2758: {",
          "",
          "[Removed Lines]",
          "2755: struct insn_reg insn_regs_intel_sorted [ARR_SIZE(insn_regs_intel)];",
          "",
          "[Added Lines]",
          "2755: static struct insn_reg insn_regs_intel_sorted [ARR_SIZE(insn_regs_intel)];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2761:  return (l - r);",
          "2762: }",
          "",
          "[Removed Lines]",
          "2764: static bool intel_resgs_sorted = false;",
          "",
          "[Added Lines]",
          "2764: static bool intel_regs_sorted = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2771:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
          "2772:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
          "2775:   memcpy (insn_regs_intel_sorted, insn_regs_intel,",
          "2776:     sizeof(insn_regs_intel_sorted));",
          "2777:   qsort (insn_regs_intel_sorted,",
          "2778:     ARR_SIZE(insn_regs_intel_sorted),",
          "2779:     sizeof(struct insn_reg), regs_cmp);",
          "2781:  }",
          "2783:  while (first <= last) {",
          "",
          "[Removed Lines]",
          "2774:  if (!intel_resgs_sorted) {",
          "2780:   intel_resgs_sorted = true;",
          "",
          "[Added Lines]",
          "2774:  if (!intel_regs_sorted) {",
          "2780:   intel_regs_sorted = true;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1fb2b5362043b12d9fe69da547c5f71d4d4a8bf2",
      "candidate_info": {
        "commit_hash": "1fb2b5362043b12d9fe69da547c5f71d4d4a8bf2",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/1fb2b5362043b12d9fe69da547c5f71d4d4a8bf2",
        "files": [
          "arch/Mips/MipsDisassembler.c",
          "arch/Mips/MipsModule.c",
          "bindings/java/capstone/Capstone.java",
          "bindings/ocaml/capstone.ml",
          "bindings/ocaml/ocaml.c",
          "bindings/python/capstone/__init__.py",
          "include/capstone/capstone.h",
          "tests/test_mips.c"
        ],
        "message": "Add CS_MODE_MIPS2 to opt-in for COP3 instructions (#939)\n\n* Add CS_MODE_MIPS2 to opt-in for COP3 instructions\n\n* Fix indentation\n\n* Get rid of `+`",
        "before_after_code_files": [
          "arch/Mips/MipsDisassembler.c||arch/Mips/MipsDisassembler.c",
          "arch/Mips/MipsModule.c||arch/Mips/MipsModule.c",
          "bindings/javcapstone/Capstone.java||bindings/java/capstone/Capstone.java",
          "bindings/ocaml/capstone.ml||bindings/ocaml/capstone.ml",
          "bindings/ocaml/ocaml.c||bindings/ocaml/ocaml.c",
          "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py",
          "include/capstone/capstone.h||include/capstone/capstone.h",
          "tests/test_mips.c||tests/test_mips.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/Mips/MipsDisassembler.c||arch/Mips/MipsDisassembler.c": [
          "File: arch/Mips/MipsDisassembler.c -> arch/Mips/MipsDisassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "452:  readInstruction32((unsigned char*)code, &Insn, isBigEndian, false);",
          "456:   Result = decodeInstruction(DecoderTableCOP3_32, instr, Insn, Address, MRI, mode);",
          "457:   if (Result != MCDisassembler_Fail) {",
          "",
          "[Removed Lines]",
          "454:  if (((mode & CS_MODE_MIPS32) == 0) && ((mode & CS_MODE_MIPS3) == 0)) {",
          "",
          "[Added Lines]",
          "454:  if ((mode & CS_MODE_MIPS2) && ((mode & CS_MODE_MIPS3) == 0)) {",
          "",
          "---------------"
        ],
        "arch/Mips/MipsModule.c||arch/Mips/MipsModule.c": [
          "File: arch/Mips/MipsModule.c -> arch/Mips/MipsModule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:  if (ud->mode & ~(CS_MODE_LITTLE_ENDIAN | CS_MODE_32 | CS_MODE_64 |",
          "19:   return CS_ERR_MODE;",
          "21:  mri = cs_mem_malloc(sizeof(*mri));",
          "",
          "[Removed Lines]",
          "18:     CS_MODE_MICRO | CS_MODE_MIPS32R6 | CS_MODE_BIG_ENDIAN))",
          "",
          "[Added Lines]",
          "18:     CS_MODE_MICRO | CS_MODE_MIPS32R6 | CS_MODE_BIG_ENDIAN |",
          "19:     CS_MODE_MIPS2 | CS_MODE_MIPS3))",
          "",
          "---------------"
        ],
        "bindings/javcapstone/Capstone.java||bindings/java/capstone/Capstone.java": [
          "File: bindings/javcapstone/Capstone.java -> bindings/java/capstone/Capstone.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "339:   public static final int CS_MODE_MIPS2 = 1 << 7;  // Mips II ISA",
          "",
          "---------------"
        ],
        "bindings/ocaml/capstone.ml||bindings/ocaml/capstone.ml": [
          "File: bindings/ocaml/capstone.ml -> bindings/ocaml/capstone.ml",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   | CS_MODE_MICRO  (* MicroMips mode (MIPS architecture) *)",
          "36:   | CS_MODE_MIPS3  (* Mips3 mode (MIPS architecture) *)",
          "37:   | CS_MODE_MIPS32R6 (* Mips32-R6 mode (MIPS architecture) *)",
          "38:   | CS_MODE_V9   (* SparcV9 mode (Sparc architecture) *)",
          "39:   | CS_MODE_BIG_ENDIAN (* big-endian mode *)",
          "40:   | CS_MODE_MIPS32  (* Mips32 mode (for Mips) *)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:   | CS_MODE_MIPS2     (* Mips2 mode (MIPS architecture) *)",
          "",
          "---------------"
        ],
        "bindings/ocaml/ocaml.c||bindings/ocaml/ocaml.c": [
          "File: bindings/ocaml/ocaml.c -> bindings/ocaml/ocaml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700:     mode |= CS_MODE_MIPS32R6;",
          "701:     break;",
          "702:    case 11:",
          "704:     break;",
          "705:    case 12:",
          "707:     break;",
          "708:    case 13:",
          "710:     break;",
          "711:    case 14:",
          "713:     break;",
          "714:    case 15:",
          "715:     mode |= CS_MODE_QPX;",
          "716:     break;",
          "717:    default:",
          "",
          "[Removed Lines]",
          "703:     mode |= CS_MODE_V9;",
          "706:     mode |= CS_MODE_BIG_ENDIAN;",
          "709:     mode |= CS_MODE_MIPS32;",
          "712:     mode |= CS_MODE_MIPS64;",
          "",
          "[Added Lines]",
          "703:     mode |= CS_MODE_MIPS2;",
          "706:     mode |= CS_MODE_V9;",
          "709:     mode |= CS_MODE_BIG_ENDIAN;",
          "712:     mode |= CS_MODE_MIPS32;",
          "715:     mode |= CS_MODE_MIPS64;",
          "716:     break;",
          "717:    case 16:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "831:     mode |= CS_MODE_MIPS32R6;",
          "832:     break;",
          "833:    case 11:",
          "835:     break;",
          "836:    case 12:",
          "838:     break;",
          "839:    case 13:",
          "841:     break;",
          "842:    case 14:",
          "844:     break;",
          "845:    case 15:",
          "846:     mode |= CS_MODE_QPX;",
          "847:     break;",
          "848:    default:",
          "",
          "[Removed Lines]",
          "834:     mode |= CS_MODE_V9;",
          "837:     mode |= CS_MODE_BIG_ENDIAN;",
          "840:     mode |= CS_MODE_MIPS32;",
          "843:     mode |= CS_MODE_MIPS64;",
          "",
          "[Added Lines]",
          "837:     mode |= CS_MODE_MIPS2;",
          "840:     mode |= CS_MODE_V9;",
          "843:     mode |= CS_MODE_BIG_ENDIAN;",
          "846:     mode |= CS_MODE_MIPS32;",
          "849:     mode |= CS_MODE_MIPS64;",
          "850:     break;",
          "851:    case 16:",
          "",
          "---------------"
        ],
        "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py": [
          "File: bindings/python/capstone/__init__.py -> bindings/python/capstone/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     'CS_MODE_MICRO',",
          "47:     'CS_MODE_MIPS3',",
          "48:     'CS_MODE_MIPS32R6',",
          "49:     'CS_MODE_V8',",
          "50:     'CS_MODE_V9',",
          "51:     'CS_MODE_QPX',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:     'CS_MODE_MIPS2',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151: CS_MODE_MICRO = (1 << 4)       # MicroMips mode (MIPS architecture)",
          "152: CS_MODE_MIPS3 = (1 << 5)       # Mips III ISA",
          "153: CS_MODE_MIPS32R6 = (1 << 6)    # Mips32r6 ISA",
          "154: CS_MODE_V9 = (1 << 4)          # Sparc V9 mode (for Sparc)",
          "155: CS_MODE_QPX = (1 << 4)         # Quad Processing eXtensions mode (PPC)",
          "156: CS_MODE_M68K_000 = (1 << 1)    # M68K 68000 mode",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155: CS_MODE_MIPS2 = (1 << 7)       # Mips II ISA",
          "",
          "---------------"
        ],
        "include/capstone/capstone.h||include/capstone/capstone.h": [
          "File: include/capstone/capstone.h -> include/capstone/capstone.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:  CS_MODE_MICRO = 1 << 4, // MicroMips mode (MIPS)",
          "110:  CS_MODE_MIPS3 = 1 << 5, // Mips III ISA",
          "111:  CS_MODE_MIPS32R6 = 1 << 6, // Mips32r6 ISA",
          "112:  CS_MODE_V9 = 1 << 4, // SparcV9 mode (Sparc)",
          "113:  CS_MODE_QPX = 1 << 4, // Quad Processing eXtensions mode (PPC)",
          "114:  CS_MODE_M68K_000 = 1 << 1, // M68K 68000 mode",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:  CS_MODE_MIPS2 = 1 << 7, // Mips II ISA",
          "",
          "---------------"
        ],
        "tests/test_mips.c||tests/test_mips.c": [
          "File: tests/test_mips.c -> tests/test_mips.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: #define MIPS_CODE2 \"\\x56\\x34\\x21\\x34\\xc2\\x17\\x01\\x00\"",
          "83: #define MIPS_32R6M \"\\x00\\x07\\x00\\x07\\x00\\x11\\x93\\x7c\\x01\\x8c\\x8b\\x7c\\x00\\xc7\\x48\\xd0\"",
          "84: #define MIPS_32R6 \"\\xec\\x80\\x00\\x19\\x7c\\x43\\x22\\xa0\"",
          "86:  struct platform platforms[] = {",
          "87:   {",
          "88:    CS_ARCH_MIPS,",
          "90:    (unsigned char *)MIPS_CODE,",
          "91:    sizeof(MIPS_CODE) - 1,",
          "92:    \"MIPS-32 (Big-endian)\"",
          "93:   },",
          "94:   {",
          "95:    CS_ARCH_MIPS,",
          "97:    (unsigned char *)MIPS_CODE2,",
          "98:    sizeof(MIPS_CODE2) - 1,",
          "99:    \"MIPS-64-EL (Little-endian)\"",
          "100:   },",
          "101:   {",
          "102:    CS_ARCH_MIPS,",
          "104:    (unsigned char*)MIPS_32R6M,",
          "105:    sizeof(MIPS_32R6M) - 1,",
          "106:    \"MIPS-32R6 | Micro (Big-endian)\"",
          "107:   },",
          "108:   {",
          "109:    CS_ARCH_MIPS,",
          "111:    (unsigned char*)MIPS_32R6,",
          "112:    sizeof(MIPS_32R6) - 1,",
          "113:    \"MIPS-32R6 (Big-endian)\"",
          "114:   },",
          "115:  };",
          "117:  uint64_t address = 0x1000;",
          "",
          "[Removed Lines]",
          "89:    (cs_mode)(CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN),",
          "96:    (cs_mode)(CS_MODE_MIPS64 + CS_MODE_LITTLE_ENDIAN),",
          "103:    (cs_mode)(CS_MODE_MIPS32R6 + CS_MODE_MICRO + CS_MODE_BIG_ENDIAN),",
          "110:    (cs_mode)(CS_MODE_MIPS32R6 + CS_MODE_BIG_ENDIAN),",
          "",
          "[Added Lines]",
          "85: #define MIPS_64SD \"\\x70\\x00\\xb2\\xff\"",
          "90:    (cs_mode)(CS_MODE_MIPS32 | CS_MODE_BIG_ENDIAN),",
          "97:    (cs_mode)(CS_MODE_MIPS64 | CS_MODE_LITTLE_ENDIAN),",
          "104:    (cs_mode)(CS_MODE_MIPS32R6 | CS_MODE_MICRO | CS_MODE_BIG_ENDIAN),",
          "111:    (cs_mode)(CS_MODE_MIPS32R6 | CS_MODE_BIG_ENDIAN),",
          "116:   {",
          "117:    CS_ARCH_MIPS,",
          "118:    (cs_mode)(CS_MODE_MIPS64 | CS_MODE_MIPS2 | CS_MODE_LITTLE_ENDIAN),",
          "119:    (unsigned char *)MIPS_64SD,",
          "120:    sizeof(MIPS_64SD) - 1,",
          "121:    \"MIPS-64-EL + Mips II (Little-endian)\"",
          "122:   },",
          "123:   {",
          "124:    CS_ARCH_MIPS,",
          "125:    (cs_mode)(CS_MODE_MIPS64 | CS_MODE_LITTLE_ENDIAN),",
          "126:    (unsigned char *)MIPS_64SD,",
          "127:    sizeof(MIPS_64SD) - 1,",
          "128:    \"MIPS-64-EL (Little-endian)\"",
          "129:   },",
          "",
          "---------------"
        ]
      }
    }
  ]
}