{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "905d4729d36164963a59945d838f5e60ca84bd9e",
      "candidate_info": {
        "commit_hash": "905d4729d36164963a59945d838f5e60ca84bd9e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/905d4729d36164963a59945d838f5e60ca84bd9e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h"
        ],
        "message": "Add missing comment to constant definitions.\n\nFossilOrigin-Name: 661a3789eb329a2487855e49c31067a9dde4c91c1a3a65b65375d079f906b1da",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1a3671c7003bfff817a8239424c2f945d9dfced97daadb5a5acab203b9bda69b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2144: };",
          "",
          "[Removed Lines]",
          "2146: #define KEYINFO_ORDER_DESC    0x01",
          "2147: #define KEYINFO_ORDER_BIGNULL 0x02",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e80834f6ffb2e44cc6930885c60d517468828a90",
      "candidate_info": {
        "commit_hash": "e80834f6ffb2e44cc6930885c60d517468828a90",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e80834f6ffb2e44cc6930885c60d517468828a90",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix another problem in fts5 caused by a corrupt schema record.\n\nFossilOrigin-Name: ff45f9dd69fe1e1c7875e5bb73ac3dde2a31746475d3765cda9233f8e06e26ca",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "861:   i += fts5GetVarint32(&pData[i], nLevel);",
          "862:   i += fts5GetVarint32(&pData[i], nSegment);",
          "863:   nByte = (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "863:   if( nLevel>FTS5_MAX_SEGMENT || nSegment>FTS5_MAX_SEGMENT ){",
          "864:     return FTS5_CORRUPT;",
          "865:   }",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1042: INSERT INTO t1(t1) VALUES('integrity-check');",
          "1043: } {1 {vtable constructor failed: t1}}",
          "1045: sqlite3_fts5_may_be_corrupt 0",
          "1046: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1045: #--------------------------------------------------------------------------",
          "1046: reset_db",
          "1047: do_test 17.0 {",
          "1048:   sqlite3 db {}",
          "1049:   db deserialize [decode_hexdb {",
          "1050: | size 28672 pagesize 4096 filename c18.db",
          "1051: | page 1 offset 0",
          "1052: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "1053: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 07   .....@  ........",
          "1054: |     32: 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00   ................",
          "1055: |     48: 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00   ................",
          "1056: |     96: 00 00 00 00 0d 00 00 00 07 0d d2 00 0f c4 0f 6d   ...............m",
          "1057: |    112: 0f 02 0e ab 0e 4e 0d f6 0d d2 00 00 00 00 00 00   .....N..........",
          "1058: |   3536: 00 00 22 07 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "1059: |   3552: 32 74 32 07 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "1060: |   3568: 20 74 32 28 78 29 56 06 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "1061: |   3584: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "1062: |   3600: 6f 6e 66 69 67 06 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "1063: |   3616: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "1064: |   3632: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "1065: |   3648: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 05    WITHOUT ROWID[.",
          "1066: |   3664: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "1067: |   3680: 6f 63 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsizet1_docsize",
          "1068: |   3696: 05 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "1069: |   3712: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "1070: |   3728: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "1071: |   3744: 59 2c 20 73 7a 20 42 4c 4f 42 29 55 04 06 17 21   Y, sz BLOB)U...!",
          "1072: |   3760: 21 01 77 74 61 62 6c 65 74 31 5f 63 6f 6e 74 65   !.wtablet1_conte",
          "1073: |   3776: 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 04 43 52 45   ntt1_content.CRE",
          "1074: |   3792: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f   ATE TABLE 't1_co",
          "1075: |   3808: 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47 45   ntent'(id INTEGE",
          "1076: |   3824: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 63   R PRIMARY KEY, c",
          "1077: |   3840: 30 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65   0)i.......-table",
          "1078: |   3856: 74 31 5f 69 64 78 74 31 5f 69 64 78 03 43 52 45   t1_idxt1_idx.CRE",
          "1079: |   3872: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69 64   ATE TABLE 't1_id",
          "1080: |   3888: 78 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20   x'(segid, term,",
          "1081: |   3904: 70 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45   pgno, PRIMARY KE",
          "1082: |   3920: 59 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20   Y(segid, term))",
          "1083: |   3936: 57 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07   WITHOUT ROWIDU..",
          "1084: |   3952: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61   ......tablet1_da",
          "1085: |   3968: 74 61 74 31 5f 64 61 74 61 02 43 52 45 41 54 45   tat1_data.CREATE",
          "1086: |   3984: 20 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27    TABLE 't1_data'",
          "1087: |   4000: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "1088: |   4016: 41 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42   ARY KEY, block B",
          "1089: |   4032: 4c 4f 42 29 3a 01 06 17 11 11 08 63 74 61 62 6c   LOB):......ctabl",
          "1090: |   4048: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "1091: |   4064: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "1092: |   4080: 4e 47 20 66 74 73 35 28 63 6f 6e 74 65 6e 74 29   NG fts5(content)",
          "1093: | page 2 offset 4096",
          "1094: |      0: 0d 00 00 00 03 0f bd 00 0f e8 0f ef 0f bd 00 00   ................",
          "1095: |   4016: 00 00 00 00 00 00 00 00 00 00 00 00 00 24 84 80   .............$..",
          "1096: |   4032: 80 80 80 01 03 00 4e 00 00 00 1e 06 30 61 62 61   ......N.....0aba",
          "1097: |   4048: 63 6b 01 02 02 04 02 66 74 00 02 22 04 04 6e 64   ck.....ft.....nd",
          "1098: |   4064: 6f 6e 03 02 02 04 0a 07 05 01 03 00 10 03 03 0f   on..............",
          "1099: |   4080: 0a 03 00 24 00 00 0a aa aa aa aa aa aa aa aa aa   ...$............",
          "1100: | page 3 offset 8192",
          "1101: |      0: aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa   ................",
          "1102: |     16: aa aa aa aa aa aa aa aa 00 00 10 10 10 00 10 10   ................",
          "1103: |     32: 10 10 a0 00 00 00 10 ff a0 00 ff 52 05 64 95 25   ...........R.d.%",
          "1104: |     48: 45 54 14 c2 05 44 14 24 c4 52 07 43 12 05 55 34   ET...D.$.R.C..U4",
          "1105: |     64: 94 e4 72 06 67 47 33 52 86 36 f6 e7 46 56 e7 42   ..r.gG3R.6..FV.B",
          "1106: |     80: 90 d0 00 00 00 30 fb d0 00 fe 80 fe f0 fb 00 00   .....0..........",
          "1107: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "1108: | page 4 offset 12288",
          "1109: |      0: 0d 00 00 00 03 0f e0 00 0f f6 0f ec 0f e0 00 00   ................",
          "1110: |   4064: 0a 03 03 00 1b 61 62 61 6e 64 6f 6e 08 02 03 00   .....abandon....",
          "1111: |   4080: 17 61 62 61 66 74 08 01 03 00 17 61 62 61 63 6b   .abaft.....aback",
          "1112: | page 5 offset 16384",
          "1113: |      0: 0d 00 00 00 03 0f ee 00 0f fa 0f f4 0f ee 00 00   ................",
          "1114: |   4064: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03   ................",
          "1115: |   4080: 03 00 0e 01 04 02 03 00 0e 01 04 01 03 00 0e 01   ................",
          "1116: | page 6 offset 20480",
          "1117: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "1118: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "1119: | page 7 offset 24576",
          "1120: |      0: 0d 00 00 00 03 0f d6 00 0f f4 0f e1 0f d6 00 00   ................",
          "1121: |   4048: 00 00 00 00 00 00 09 03 02 1b 72 65 62 75 69 6c   ..........rebuil",
          "1122: |   4064: 64 11 02 02 2b 69 6e 74 65 67 72 69 74 79 2d 63   d...+integrity-c",
          "1123: |   4080: 68 65 63 6b 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   heck....optimize",
          "1124: | end c18.db",
          "1125: }]} {}",
          "1127: do_catchsql_test 17.1 {",
          "1128:   SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "1129: } {1 {vtable constructor failed: t1}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 29a00a05dd40ff59be340969e1aca4fee41e092f2faa1cea85a3448265a83c2c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f467744d5fc68f64f051d7e3a8ba8e4a67b006bb",
      "candidate_info": {
        "commit_hash": "f467744d5fc68f64f051d7e3a8ba8e4a67b006bb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f467744d5fc68f64f051d7e3a8ba8e4a67b006bb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "test/altertab3.test"
        ],
        "message": "Fix a problem with running ALTER TABLE on a schema that contains expressions of the type \"col IN ()\" (empty set on RHS of IN operator).\n\nFossilOrigin-Name: 2d9cd06715092c312c8c0ec392696a0e90ed090b074e2082e0b830f1399aa941",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 008112bcef561a8a3ebfb007cbef36cbc0071f547e6ebdba3d3bbb39e2c48c7a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1171:     }else if( Y->nExpr==1 ){",
          "",
          "[Removed Lines]",
          "1169:       sqlite3ExprDelete(pParse->db, A);",
          "1170:       A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "",
          "[Added Lines]",
          "1169:       if( IN_RENAME_OBJECT==0 ){",
          "1170:         sqlite3ExprDelete(pParse->db, A);",
          "1171:         A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "1172:       }",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     SELECT a,b,c FROM \"t1x\" WHERE b>='d' ORDER BY name;",
          "64:     SELECT new.c;",
          "65:   END}}",
          "66: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: #-------------------------------------------------------------------------",
          "68: reset_db",
          "69: do_execsql_test 3.0 {",
          "70:   CREATE TABLE t1(a, b, c, d);",
          "71:   CREATE VIEW v1 AS SELECT * FROM t1 WHERE a=1 OR (b IN ());",
          "72: }",
          "74: do_execsql_test 3.1 {",
          "75:   ALTER TABLE t1 RENAME b TO bbb;",
          "76: }",
          "78: do_execsql_test 3.2 {",
          "79:   SELECT sql FROM sqlite_master WHERE name = 'v1'",
          "80: } {{CREATE VIEW v1 AS SELECT * FROM t1 WHERE a=1 OR (bbb IN ())}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd9cb85a414998d27bc7904842c69c76da240794",
      "candidate_info": {
        "commit_hash": "cd9cb85a414998d27bc7904842c69c76da240794",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cd9cb85a414998d27bc7904842c69c76da240794",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/window.c",
          "test/windowB.test"
        ],
        "message": "Add the SQLITE_SUBTYPE flag, which may be passed to sqlite3_create_window_function() to indicate that the window function uses sqlite3_value_subtype() to check the sub-type of its arguments.\n\nFossilOrigin-Name: ba2ebc3a348decc5cedaf14960e30e7ae26a26824cfa198727f2499162142ef3",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "test/windowB.test||test/windowB.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2504: #endif",
          "2505:   for(i=0; i<sizeof(aFunc)/sizeof(aFunc[0]) && rc==SQLITE_OK; i++){",
          "2506:     rc = sqlite3_create_function(db, aFunc[i].zName, aFunc[i].nArg,",
          "2508:                                  (void*)&aFunc[i].flag,",
          "2509:                                  aFunc[i].xFunc, 0, 0);",
          "2510:   }",
          "2511: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "2512:   for(i=0; i<sizeof(aAgg)/sizeof(aAgg[0]) && rc==SQLITE_OK; i++){",
          "2513:     rc = sqlite3_create_window_function(db, aAgg[i].zName, aAgg[i].nArg,",
          "2515:                                  aAgg[i].xStep, aAgg[i].xFinal,",
          "2516:                                  aAgg[i].xValue, jsonGroupInverse, 0);",
          "2517:   }",
          "",
          "[Removed Lines]",
          "2507:                                  SQLITE_UTF8 | SQLITE_DETERMINISTIC,",
          "2514:                                  SQLITE_UTF8 | SQLITE_DETERMINISTIC, 0,",
          "",
          "[Added Lines]",
          "2507:                                  SQLITE_UTF8 | SQLITE_DETERMINISTIC,",
          "2514:                 SQLITE_SUBTYPE | SQLITE_UTF8 | SQLITE_DETERMINISTIC, 0,",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 658a42d3633b31fda260f2c5a1a2c7dd8eb4eb0114d322369017c56faf5ecd42",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1720:   assert( SQLITE_FUNC_CONSTANT==SQLITE_DETERMINISTIC );",
          "1721:   assert( SQLITE_FUNC_DIRECT==SQLITE_DIRECTONLY );",
          "1723:   enc &= (SQLITE_FUNC_ENCMASK|SQLITE_ANY);",
          "1725: #ifndef SQLITE_OMIT_UTF16",
          "",
          "[Removed Lines]",
          "1722:   extraFlags = enc &  (SQLITE_DETERMINISTIC|SQLITE_DIRECTONLY);",
          "",
          "[Added Lines]",
          "1722:   extraFlags = enc &  (SQLITE_DETERMINISTIC|SQLITE_DIRECTONLY|SQLITE_SUBTYPE);",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "4991: #define SQLITE_DETERMINISTIC    0x000000800",
          "4992: #define SQLITE_DIRECTONLY       0x000080000",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5001: #define SQLITE_SUBTYPE          0x000100000",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3612:   int regStartRowid;",
          "3613:   int regEndRowid;",
          "3614: };",
          "3616: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3615:   u8 bExprArgs;",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "967:     for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "970:       if( pWin->pFilter ){",
          "971:         Expr *pFilter = sqlite3ExprDup(db, pWin->pFilter, 0);",
          "972:         pSublist = sqlite3ExprListAppend(pParse, pSublist, pFilter);",
          "",
          "[Removed Lines]",
          "968:       pWin->iArgCol = (pSublist ? pSublist->nExpr : 0);",
          "969:       pSublist = exprListAppendList(pParse, pSublist, pWin->pOwner->x.pList, 0);",
          "",
          "[Added Lines]",
          "968:       ExprList *pArgs = pWin->pOwner->x.pList;",
          "969:       if( pWin->pFunc->funcFlags & SQLITE_FUNC_SUBTYPE ){",
          "970:         selectWindowRewriteEList(pParse, pMWin, pSrc, pArgs, pTab, &pSublist);",
          "971:         pWin->iArgCol = (pSublist ? pSublist->nExpr : 0);",
          "972:         pWin->bExprArgs = 1;",
          "973:       }else{",
          "974:         pWin->iArgCol = (pSublist ? pSublist->nExpr : 0);",
          "975:         pSublist = exprListAppendList(pParse, pSublist, pArgs, 0);",
          "976:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1432:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1433:     FuncDef *pFunc = pWin->pFunc;",
          "1434:     int regArg;",
          "1436:     int i;",
          "1438:     assert( bInverse==0 || pWin->eStart!=TK_UNBOUNDED );",
          "",
          "[Removed Lines]",
          "1435:     int nArg = windowArgCount(pWin);",
          "",
          "[Added Lines]",
          "1442:     int nArg = pWin->bExprArgs ? 0 : windowArgCount(pWin);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1482:         VdbeCoverage(v);",
          "1483:         sqlite3ReleaseTempReg(pParse, regTmp);",
          "1484:       }",
          "1485:       if( pFunc->funcFlags & SQLITE_FUNC_NEEDCOLL ){",
          "1486:         CollSeq *pColl;",
          "1487:         assert( nArg>0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1492:       if( pWin->bExprArgs ){",
          "1493:         nArg = pWin->pOwner->x.pList->nExpr;",
          "1494:         regArg = sqlite3GetTempRange(pParse, nArg);",
          "1495:         sqlite3ExprCodeExprList(pParse, pWin->pOwner->x.pList, regArg, 0, 0);",
          "1496:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1492:                         bInverse, regArg, pWin->regAccum);",
          "1493:       sqlite3VdbeAppendP4(v, pFunc, P4_FUNCDEF);",
          "1494:       sqlite3VdbeChangeP5(v, (u8)nArg);",
          "1495:       if( addrIf ) sqlite3VdbeJumpHere(v, addrIf);",
          "1496:     }",
          "1497:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1507:       if( pWin->bExprArgs ){",
          "1508:         sqlite3ReleaseTempRange(pParse, regArg, nArg);",
          "1509:       }",
          "",
          "---------------"
        ],
        "test/windowB.test||test/windowB.test": [
          "File: test/windowB.test -> test/windowB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-08-30",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # Test cases for RANGE BETWEEN and especially with NULLS LAST",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix windowB",
          "18: ifcapable !windowfunc {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE t1(a, b);",
          "25:   INSERT INTO t1 VALUES(NULL, 1);",
          "26:   INSERT INTO t1 VALUES(NULL, 2);",
          "27:   INSERT INTO t1 VALUES(NULL, 3);",
          "28: } {}",
          "30: foreach {tn win} {",
          "31:   1 { ORDER BY a RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING }",
          "32:   2 { ORDER BY a NULLS LAST RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING }",
          "33:   3 { ORDER BY a DESC RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING }",
          "34:   4 { ORDER BY a DESC NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING }",
          "36:   5 { ORDER BY a      NULLS LAST  RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING }",
          "37:   6 { ORDER BY a DESC NULLS FIRST RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING }",
          "39:   7 { ORDER BY a      NULLS LAST  RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING }",
          "40:   8 { ORDER BY a DESC NULLS FIRST RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING }",
          "41: } {",
          "42:   do_execsql_test 1.$tn \"",
          "43:     SELECT sum(b) OVER win FROM t1",
          "44:     WINDOW win AS ( $win )",
          "45:   \" {6 6 6}",
          "46: }",
          "48: do_execsql_test 1.2 {",
          "49:   SELECT sum(b) OVER win FROM t1",
          "50:   WINDOW win AS (",
          "51:     ORDER BY a DESC NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING",
          "52:   )",
          "53: } {6 6 6}",
          "55: #-------------------------------------------------------------------------",
          "56: reset_db",
          "57: do_execsql_test 2.0 {",
          "58:   CREATE TABLE t1(a, b);",
          "59:   INSERT INTO t1 VALUES(1, NULL);",
          "60:   INSERT INTO t1 VALUES(2, 45);",
          "61:   INSERT INTO t1 VALUES(3, 66.2);",
          "62:   INSERT INTO t1 VALUES(4, 'hello world');",
          "63:   INSERT INTO t1 VALUES(5, 'hello world');",
          "64:   INSERT INTO t1 VALUES(6, X'1234');",
          "65:   INSERT INTO t1 VALUES(7, X'1234');",
          "66:   INSERT INTO t1 VALUES(8, NULL);",
          "67: }",
          "69: foreach {tn win} {",
          "70:   1 \"ORDER BY b RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING\"",
          "71:   2 \"ORDER BY b RANGE BETWEEN 2 FOLLOWING AND 2 FOLLOWING\"",
          "72:   3 \"ORDER BY b NULLS LAST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING\"",
          "73:   4 \"ORDER BY b NULLS LAST RANGE BETWEEN 2 FOLLOWING AND 2 FOLLOWING\"",
          "74: } {",
          "75:   do_execsql_test 2.1.$tn \"",
          "76:     SELECT a, sum(a) OVER win FROM t1",
          "77:     WINDOW win AS ( $win )",
          "78:     ORDER BY 1",
          "79:   \" {1 9   2 {}  3 {}  4 9  5 9  6 13  7 13  8 9}",
          "80: }",
          "82: #-------------------------------------------------------------------------",
          "83: reset_db",
          "84: do_execsql_test 3.0 {",
          "85:   CREATE TABLE testjson(id INTEGER PRIMARY KEY, j TEXT);",
          "86:   INSERT INTO testjson VALUES(1, '{\"a\":1}');",
          "87:   INSERT INTO testjson VALUES(2, '{\"b\":2}');",
          "88: }",
          "90: do_execsql_test 3.1 {",
          "91:   SELECT json_group_array(json(j)) FROM testjson;",
          "92: } {",
          "93:   {[{\"a\":1},{\"b\":2}]}",
          "94: }",
          "96: breakpoint",
          "97: do_execsql_test 3.2 {",
          "98:   SELECT json_group_array(json(j)) OVER (ORDER BY id) FROM testjson;",
          "99: } {",
          "100:   {[{\"a\":1}]}",
          "101:   {[{\"a\":1},{\"b\":2}]}",
          "102: }",
          "105: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5f1915d599b1a0aba8fab35178c90031fdb362d",
      "candidate_info": {
        "commit_hash": "f5f1915d599b1a0aba8fab35178c90031fdb362d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f5f1915d599b1a0aba8fab35178c90031fdb362d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h"
        ],
        "message": "Changes to the INSERT logic to make it simpler and faster and so that it works with generated columns and BEFORE triggers.\n\nFossilOrigin-Name: bc368cb090376d33d3844e3689c4f6bd19eed758e39b878ee67fef93b1c839ea",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 932a37275d7e932f8237d32c8fc6087ed8cd342fe01ef2f7a43c7237ab84c9ac",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2329:       pSelTab = sqlite3ResultSetOfSelect(pParse, pSelect, SQLITE_AFF_BLOB);",
          "2330:       if( pSelTab==0 ) return;",
          "2331:       assert( p->aCol==0 );",
          "2333:       p->aCol = pSelTab->aCol;",
          "2334:       pSelTab->nCol = 0;",
          "2335:       pSelTab->aCol = 0;",
          "",
          "[Removed Lines]",
          "2332:       p->nCol = pSelTab->nCol;",
          "",
          "[Added Lines]",
          "2332:       p->nCol = p->nNVCol = pSelTab->nCol;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2619:       assert( pTable->aCol==0 );",
          "2621:       pTable->aCol = pSelTab->aCol;",
          "2622:       pSelTab->nCol = 0;",
          "2623:       pSelTab->aCol = 0;",
          "",
          "[Removed Lines]",
          "2620:       pTable->nCol = pSelTab->nCol;",
          "",
          "[Added Lines]",
          "2620:       pTable->nCol = pTable->nNVCol = pSelTab->nCol;",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4337:   int inReg;",
          "4339:   assert( target>0 && target<=pParse->nMem );",
          "4348:   }",
          "4349: }",
          "",
          "[Removed Lines]",
          "4340:   if( pExpr && pExpr->op==TK_REGISTER ){",
          "4341:     sqlite3VdbeAddOp2(pParse->pVdbe, OP_Copy, pExpr->iTable, target);",
          "4342:   }else{",
          "4343:     inReg = sqlite3ExprCodeTarget(pParse, pExpr, target);",
          "4344:     assert( pParse->pVdbe!=0 || pParse->db->mallocFailed );",
          "4345:     if( inReg!=target && pParse->pVdbe ){",
          "4346:       sqlite3VdbeAddOp2(pParse->pVdbe, OP_SCopy, inReg, target);",
          "4347:     }",
          "",
          "[Added Lines]",
          "4340:   inReg = sqlite3ExprCodeTarget(pParse, pExpr, target);",
          "4341:   assert( pParse->pVdbe!=0 || pParse->db->mallocFailed );",
          "4342:   if( inReg!=target && pParse->pVdbe ){",
          "4343:     sqlite3VdbeAddOp2(pParse->pVdbe, OP_SCopy, inReg, target);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4374:   }",
          "4375: }",
          "",
          "[Removed Lines]",
          "4389: void sqlite3ExprCodeAndCache(Parse *pParse, Expr *pExpr, int target){",
          "4390:   Vdbe *v = pParse->pVdbe;",
          "4391:   int iMem;",
          "4393:   assert( target>0 );",
          "4394:   assert( pExpr->op!=TK_REGISTER );",
          "4395:   sqlite3ExprCode(pParse, pExpr, target);",
          "4396:   iMem = ++pParse->nMem;",
          "4397:   sqlite3VdbeAddOp2(v, OP_Copy, target, iMem);",
          "4398:   exprToRegister(pExpr, iMem);",
          "4399: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "938:     addrInsTop = addrCont = sqlite3VdbeAddOp1(v, OP_Yield, dest.iSDParm);",
          "939:     VdbeCoverage(v);",
          "940:   }",
          "944:   endOfLoop = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "948:     if( ipkColumn>=0 ){",
          "952:       sqlite3VdbeAddOp2(v, OP_Copy, regFromSelect+ipkColumn, regRowid);",
          "953:     }",
          "954:   }",
          "963:   nHidden = 0;",
          "964:   iRegStore = regData;  assert( regData==regRowid+1 );",
          "965:   for(i=0; i<pTab->nCol; i++, iRegStore++){",
          "966:     int k;",
          "967:     u32 colFlags;",
          "968:     assert( i>=nHidden );",
          "969:     if( i==pTab->iPKey ){",
          "974:       sqlite3VdbeAddOp1(v, OP_SoftNull, iRegStore);",
          "975:       continue;",
          "976:     }",
          "977:     if( ((colFlags = pTab->aCol[i].colFlags) & COLFLAG_NOINSERT)!=0 ){",
          "978:       nHidden++;",
          "979:       if( (colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "983:         iRegStore--;",
          "984:         continue;",
          "985:       }else if( (colFlags & COLFLAG_STORED)!=0 ){",
          "990:         if( tmask & TRIGGER_BEFORE ){",
          "991:           sqlite3VdbeAddOp1(v, OP_SoftNull, iRegStore);",
          "992:         }",
          "993:         continue;",
          "994:       }else if( pColumn==0 ){",
          "997:         sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "998:         continue;",
          "999:       }",
          "1000:     }",
          "1001:     if( pColumn ){",
          "1002:       for(j=0; j<pColumn->nId && pColumn->a[j].idx!=i; j++){}",
          "1003:       if( j>=pColumn->nId ){",
          "1006:         sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1007:         continue;",
          "1008:       }",
          "1009:       k = j;",
          "1010:     }else if( nColumn==0 ){",
          "1012:       sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1013:       continue;",
          "1014:     }else{",
          "1015:       k = i - nHidden;",
          "1016:     }",
          "1018:     if( useTempTable ){",
          "1019:       sqlite3VdbeAddOp3(v, OP_Column, srcTab, k, iRegStore);",
          "1020:     }else if( pSelect ){",
          "1021:       if( regFromSelect!=regData ){",
          "1022:         sqlite3VdbeAddOp2(v, OP_SCopy, regFromSelect+k, iRegStore);",
          "1023:       }",
          "1024:     }else{",
          "1025:       sqlite3ExprCode(pParse, pList->a[k].pExpr, iRegStore);",
          "1026:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "974:     assert( !IsVirtual(pTab) );",
          "994:     }",
          "",
          "[Removed Lines]",
          "978:     for(i=j=0; i<pTab->nCol; i++){",
          "979:       if( pColumn ){",
          "980:         for(j=0; j<pColumn->nId; j++){",
          "981:           if( pColumn->a[j].idx==i ) break;",
          "982:         }",
          "983:       }",
          "984:       if( (!useTempTable && !pList) || (pColumn && j>=pColumn->nId)",
          "985:             || (pColumn==0 && IsOrdinaryHiddenColumn(&pTab->aCol[i])) ){",
          "986:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regCols+i+1);",
          "987:       }else if( useTempTable ){",
          "988:         sqlite3VdbeAddOp3(v, OP_Column, srcTab, j, regCols+i+1);",
          "989:       }else{",
          "991:         sqlite3ExprCodeAndCache(pParse, pList->a[j].pExpr, regCols+i+1);",
          "992:       }",
          "993:       if( pColumn==0 && !IsOrdinaryHiddenColumn(&pTab->aCol[i]) ) j++;",
          "",
          "[Added Lines]",
          "1065:     assert( pTab->nNVCol>0 );",
          "1066:     sqlite3VdbeAddOp3(v, OP_Copy, regRowid+1, regCols+1, pTab->nNVCol-1);",
          "1068: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1073:     if( pTab->tabFlags & (TF_HasStored|TF_HasVirtual) ){",
          "1074:       sqlite3ComputeGeneratedColumns(pParse, regCols+1, pTab);",
          "1076: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1009:     sqlite3ReleaseTempRange(pParse, regCols, pTab->nCol+1);",
          "1010:   }",
          "1015:   if( !isView ){",
          "1016:     if( IsVirtual(pTab) ){",
          "1018:       sqlite3VdbeAddOp2(v, OP_Null, 0, regIns);",
          "1019:     }",
          "1020:     if( ipkColumn>=0 ){",
          "1021:       if( useTempTable ){",
          "1022:         sqlite3VdbeAddOp3(v, OP_Column, srcTab, ipkColumn, regRowid);",
          "1023:       }else if( pSelect ){",
          "1025:       }else{",
          "1026:         Expr *pIpk = pList->a[ipkColumn].pExpr;",
          "1027:         if( pIpk->op==TK_NULL && !IsVirtual(pTab) ){",
          "",
          "[Removed Lines]",
          "1024:         sqlite3VdbeAddOp2(v, OP_Copy, regFromSelect+ipkColumn, regRowid);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1054:     }",
          "1055:     autoIncStep(pParse, regAutoinc, regRowid);",
          "1117: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1120:     if( pTab->tabFlags & (TF_HasStored|TF_HasVirtual) ){",
          "1121:       sqlite3ComputeGeneratedColumns(pParse, regRowid+1, pTab);",
          "1122:     }",
          "",
          "[Removed Lines]",
          "1060:     nHidden = 0;",
          "1061:     iRegStore = regRowid+1;",
          "1062:     for(i=0; i<pTab->nCol; i++, iRegStore++){",
          "1063:       int k;",
          "1064:       u32 colFlags;",
          "1065:       assert( i>=nHidden );",
          "1066:       if( i==pTab->iPKey ){",
          "1072:         sqlite3VdbeAddOp1(v, OP_SoftNull, iRegStore);",
          "1073:         continue;",
          "1074:       }",
          "1075:       if( ((colFlags = pTab->aCol[i].colFlags) & COLFLAG_NOINSERT)!=0 ){",
          "1076:         nHidden++;",
          "1077:         if( (colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "1079:           iRegStore--;",
          "1080:           continue;",
          "1081:         }else if( (colFlags & COLFLAG_STORED)!=0 ){",
          "1083:           continue;",
          "1084:         }else if( pColumn==0 ){",
          "1086:           sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1087:           continue;",
          "1088:         }",
          "1089:       }",
          "1090:       if( pColumn ){",
          "1091:         for(j=0; j<pColumn->nId && pColumn->a[j].idx!=i; j++){}",
          "1092:         if( j>=pColumn->nId ){",
          "1095:           sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1096:           continue;",
          "1097:         }",
          "1098:         k = j;",
          "1099:       }else if( nColumn==0 ){",
          "1100:         sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1101:         continue;",
          "1102:       }else{",
          "1103:         k = i - nHidden;",
          "1104:       }",
          "1106:       if( useTempTable ){",
          "1107:         sqlite3VdbeAddOp3(v, OP_Column, srcTab, k, iRegStore);",
          "1108:       }else if( pSelect ){",
          "1109:         if( regFromSelect!=regData ){",
          "1110:           sqlite3VdbeAddOp2(v, OP_SCopy, regFromSelect+k, iRegStore);",
          "1111:         }",
          "1112:       }else{",
          "1113:         sqlite3ExprCode(pParse, pList->a[k].pExpr, iRegStore);",
          "1114:       }",
          "1115:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4100: int sqlite3ExprCodeAtInit(Parse*, Expr*, int);",
          "4101: int sqlite3ExprCodeTemp(Parse*, Expr*, int*);",
          "4102: int sqlite3ExprCodeTarget(Parse*, Expr*, int);",
          "4104: int sqlite3ExprCodeExprList(Parse*, ExprList*, int, int, u8);",
          "",
          "[Removed Lines]",
          "4103: void sqlite3ExprCodeAndCache(Parse*, Expr*, int);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}