{
  "cve_id": "CVE-2020-13396",
  "cve_desc": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) read vulnerability has been detected in ntlm_read_ChallengeMessage in winpr/libwinpr/sspi/NTLM/ntlm_message.c.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
  "patch_info": {
    "commit_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/48361c411e50826cb602c7aab773a8a20e1da6bc",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ],
    "message": "Fixed GHSL-2020-100: oob read in ntlm_read_ChallengeMessage\n\n* Added length checks for data read from stream\n* Unified function resource cleanup\n\n(cherry picked from commit 8357dedbbf7213b7d0d18f1026145b9a5b92235a)",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "368: SECURITY_STATUS ntlm_read_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "369: {",
      "370:  wStream* s;",
      "374:  NTLM_AV_PAIR* AvTimestamp;",
      "375:  NTLM_CHALLENGE_MESSAGE* message;",
      "376:  ntlm_generate_client_challenge(context);",
      "377:  message = &context->CHALLENGE_MESSAGE;",
      "378:  ZeroMemory(message, sizeof(NTLM_CHALLENGE_MESSAGE));",
      "",
      "[Removed Lines]",
      "371:  int length;",
      "372:  PBYTE StartOffset;",
      "373:  PBYTE PayloadOffset;",
      "",
      "[Added Lines]",
      "370:  SECURITY_STATUS status = SEC_E_INVALID_TOKEN;",
      "372:  size_t length;",
      "373:  size_t StartOffset;",
      "374:  size_t PayloadOffset;",
      "377:  if (!context || !buffer)",
      "378:   return SEC_E_INTERNAL_ERROR;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "381:  if (!s)",
      "382:   return SEC_E_INTERNAL_ERROR;",
      "386:  if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)",
      "392:  if (message->MessageType != MESSAGE_TYPE_CHALLENGE)",
      "404:  if (Stream_GetRemainingLength(s) < 4)",
      "411:  context->NegotiateFlags = message->NegotiateFlags;",
      "413:  if (Stream_GetRemainingLength(s) < 8)",
      "420:  CopyMemory(context->ServerChallenge, message->ServerChallenge, 8);",
      "422:  if (Stream_GetRemainingLength(s) < 8)",
      "436:  if (context->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)",
      "437:  {",
      "443:  }",
      "448:  if (message->TargetName.Len > 0)",
      "449:  {",
      "450:   if (ntlm_read_message_fields_buffer(s, &(message->TargetName)) < 0)",
      "455:  }",
      "457:  if (message->TargetInfo.Len > 0)",
      "",
      "[Removed Lines]",
      "384:  StartOffset = Stream_Pointer(s);",
      "387:  {",
      "388:   Stream_Free(s, FALSE);",
      "389:   return SEC_E_INVALID_TOKEN;",
      "390:  }",
      "393:  {",
      "394:   Stream_Free(s, FALSE);",
      "395:   return SEC_E_INVALID_TOKEN;",
      "396:  }",
      "399:  {",
      "400:   Stream_Free(s, FALSE);",
      "401:   return SEC_E_INVALID_TOKEN;",
      "402:  }",
      "405:  {",
      "406:   Stream_Free(s, FALSE);",
      "407:   return SEC_E_INVALID_TOKEN;",
      "408:  }",
      "414:  {",
      "415:   Stream_Free(s, FALSE);",
      "416:   return SEC_E_INVALID_TOKEN;",
      "417:  }",
      "423:  {",
      "424:   Stream_Free(s, FALSE);",
      "425:   return SEC_E_INVALID_TOKEN;",
      "426:  }",
      "431:  {",
      "432:   Stream_Free(s, FALSE);",
      "433:   return SEC_E_INVALID_TOKEN;",
      "434:  }",
      "439:   {",
      "440:    Stream_Free(s, FALSE);",
      "441:    return SEC_E_INVALID_TOKEN;",
      "442:   }",
      "446:  PayloadOffset = Stream_Pointer(s);",
      "451:   {",
      "452:    Stream_Free(s, FALSE);",
      "453:    return SEC_E_INTERNAL_ERROR;",
      "454:   }",
      "",
      "[Added Lines]",
      "388:  StartOffset = Stream_GetPosition(s);",
      "391:   goto fail;",
      "394:   goto fail;",
      "397:   goto fail;",
      "400:   goto fail;",
      "406:   goto fail;",
      "412:   goto fail;",
      "417:   goto fail;",
      "422:    goto fail;",
      "426:  PayloadOffset = Stream_GetPosition(s);",
      "428:  status = SEC_E_INTERNAL_ERROR;",
      "432:    goto fail;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "459:   size_t cbAvTimestamp;",
      "461:   if (ntlm_read_message_fields_buffer(s, &(message->TargetInfo)) < 0)",
      "467:   context->ChallengeTargetInfo.pvBuffer = message->TargetInfo.Buffer;",
      "468:   context->ChallengeTargetInfo.cbBuffer = message->TargetInfo.Len;",
      "",
      "[Removed Lines]",
      "462:   {",
      "463:    Stream_Free(s, FALSE);",
      "464:    return SEC_E_INTERNAL_ERROR;",
      "465:   }",
      "",
      "[Added Lines]",
      "440:    goto fail;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "474:    PBYTE ptr = ntlm_av_pair_get_value_pointer(AvTimestamp);",
      "476:    if (!ptr)",
      "479:    if (context->NTLMv2)",
      "480:     context->UseMIC = TRUE;",
      "",
      "[Removed Lines]",
      "477:     return SEC_E_INTERNAL_ERROR;",
      "",
      "[Added Lines]",
      "452:     goto fail;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "484:  }",
      "486:  length = (PayloadOffset - StartOffset) + message->TargetName.Len + message->TargetInfo.Len;",
      "488:  if (!sspi_SecBufferAlloc(&context->ChallengeMessage, length))",
      "495: #ifdef WITH_DEBUG_NTLM",
      "496:  WLog_DBG(TAG, \"CHALLENGE_MESSAGE (length = %d)\", length);",
      "497:  winpr_HexDump(TAG, WLOG_DEBUG, context->ChallengeMessage.pvBuffer,",
      "",
      "[Removed Lines]",
      "489:  {",
      "490:   Stream_Free(s, FALSE);",
      "491:   return SEC_E_INTERNAL_ERROR;",
      "492:  }",
      "494:  CopyMemory(context->ChallengeMessage.pvBuffer, StartOffset, length);",
      "",
      "[Added Lines]",
      "462:  if (length > buffer->cbBuffer)",
      "463:   goto fail;",
      "466:   goto fail;",
      "468:  if (context->ChallengeMessage.pvBuffer)",
      "469:   CopyMemory(context->ChallengeMessage.pvBuffer, Stream_Buffer(s) + StartOffset, length);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "517:  if (context->NTLMv2)",
      "518:  {",
      "519:   if (ntlm_construct_authenticate_target_info(context) < 0)",
      "525:   sspi_SecBufferFree(&context->ChallengeTargetInfo);",
      "526:   context->ChallengeTargetInfo.pvBuffer = context->AuthenticateTargetInfo.pvBuffer;",
      "",
      "[Removed Lines]",
      "520:   {",
      "521:    Stream_Free(s, FALSE);",
      "522:    return SEC_E_INTERNAL_ERROR;",
      "523:   }",
      "",
      "[Added Lines]",
      "495:    goto fail;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "533:  {",
      "534:   Stream_Free(s, FALSE);",
      "535:   return SEC_E_INTERNAL_ERROR;",
      "536:  }",
      "539:  {",
      "540:   Stream_Free(s, FALSE);",
      "541:   return SEC_E_INTERNAL_ERROR;",
      "542:  }",
      "",
      "[Added Lines]",
      "505:   goto fail;",
      "508:   goto fail;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "579: #endif",
      "580:  context->state = NTLM_STATE_AUTHENTICATE;",
      "581:  ntlm_free_message_fields_buffer(&(message->TargetName));",
      "582:  Stream_Free(s, FALSE);",
      "584: }",
      "586: SECURITY_STATUS ntlm_write_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "",
      "[Removed Lines]",
      "583:  return SEC_I_CONTINUE_NEEDED;",
      "",
      "[Added Lines]",
      "548:  status = SEC_I_CONTINUE_NEEDED;",
      "549: fail:",
      "551:  return status;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "73fd3c0a7c27daa94ead835d5a3e92355aca39a9",
      "candidate_info": {
        "commit_hash": "73fd3c0a7c27daa94ead835d5a3e92355aca39a9",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/73fd3c0a7c27daa94ead835d5a3e92355aca39a9",
        "files": [
          "libfreerdp/primitives/prim_shift.c",
          "libfreerdp/primitives/prim_shift_opt.c",
          "libfreerdp/primitives/prim_templates.h",
          "libfreerdp/primitives/test/TestPrimitivesShift.c"
        ],
        "message": "Fixed undefined behaviour in primitives shift\n\n(cherry picked from commit 436bd3dbb103c7c49e51ffb1cafad6f25ab05d66)",
        "before_after_code_files": [
          "libfreerdp/primitives/prim_shift.c||libfreerdp/primitives/prim_shift.c",
          "libfreerdp/primitives/prim_shift_opt.c||libfreerdp/primitives/prim_shift_opt.c",
          "libfreerdp/primitives/prim_templates.h||libfreerdp/primitives/prim_templates.h",
          "libfreerdp/primitives/test/TestPrimitivesShift.c||libfreerdp/primitives/test/TestPrimitivesShift.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/primitives/prim_shift.c||libfreerdp/primitives/prim_shift.c": [
          "File: libfreerdp/primitives/prim_shift.c -> libfreerdp/primitives/prim_shift.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: {",
          "27:  if (val == 0)",
          "28:   return PRIMITIVES_SUCCESS;",
          "30:  while (len--)",
          "33:  return PRIMITIVES_SUCCESS;",
          "34: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:  if (val >= 16)",
          "30:   return -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: {",
          "39:  if (val == 0)",
          "40:   return PRIMITIVES_SUCCESS;",
          "42:  while (len--)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:  if (val >= 16)",
          "44:   return -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51: {",
          "52:  if (val == 0)",
          "53:   return PRIMITIVES_SUCCESS;",
          "55:  while (len--)",
          "58:  return PRIMITIVES_SUCCESS;",
          "59: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:  if (val >= 16)",
          "59:   return -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "64: {",
          "65:  if (val == 0)",
          "66:   return PRIMITIVES_SUCCESS;",
          "68:  while (len--)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:  if (val >= 16)",
          "74:   return -1;",
          "",
          "---------------"
        ],
        "libfreerdp/primitives/prim_shift_opt.c||libfreerdp/primitives/prim_shift_opt.c": [
          "File: libfreerdp/primitives/prim_shift_opt.c -> libfreerdp/primitives/prim_shift_opt.c"
        ],
        "libfreerdp/primitives/prim_templates.h||libfreerdp/primitives/prim_templates.h": [
          "File: libfreerdp/primitives/prim_templates.h -> libfreerdp/primitives/prim_templates.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   const _type_* sptr = pSrc;                                                    \\",
          "52:   _type_* dptr = pDst;                                                          \\",
          "53:   size_t count;                                                                 \\",
          "54:   if (len < 16) /* pointless if too small */                                    \\",
          "55:   {                                                                             \\",
          "56:    return _fallback_(pSrc, val, pDst, len);                                  \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:   if (val == 0)                                                                 \\",
          "55:    return PRIMITIVES_SUCCESS;                                                \\",
          "56:   if (val >= 16)                                                                \\",
          "57:    return -1;                                                                \\",
          "",
          "---------------"
        ],
        "libfreerdp/primitives/test/TestPrimitivesShift.c||libfreerdp/primitives/test/TestPrimitivesShift.c": [
          "File: libfreerdp/primitives/test/TestPrimitivesShift.c -> libfreerdp/primitives/test/TestPrimitivesShift.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:  UINT32 val;",
          "30:  winpr_RAND((BYTE*)&val, sizeof(val));",
          "31:  winpr_RAND((BYTE*)src, sizeof(src));",
          "34:  status = generic->lShiftC_16s(src + 1, val, d1 + 1, FUNC_TEST_SIZE);",
          "",
          "[Removed Lines]",
          "32:  val = (val % (FUNC_TEST_SIZE - 1)) + 1;",
          "",
          "[Added Lines]",
          "32:  val = val % 16;",
          "34:  status = generic->lShiftC_16s(src + 1, 16, d1 + 1, FUNC_TEST_SIZE);",
          "36:  if (status == PRIMITIVES_SUCCESS)",
          "37:   return FALSE;",
          "39:  status = optimized->lShiftC_16s(src + 1, 16, d1 + 1, FUNC_TEST_SIZE);",
          "41:  if (status == PRIMITIVES_SUCCESS)",
          "42:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:  UINT32 val;",
          "64:  winpr_RAND((BYTE*)&val, sizeof(val));",
          "65:  winpr_RAND((BYTE*)src, sizeof(src));",
          "68:  status = generic->lShiftC_16u(src + 1, val, d1 + 1, FUNC_TEST_SIZE);",
          "",
          "[Removed Lines]",
          "66:  val = (val % (FUNC_TEST_SIZE - 1)) + 1;",
          "",
          "[Added Lines]",
          "77:  val = val % 16;",
          "80:  status = generic->lShiftC_16u(src + 1, 16, d1 + 1, FUNC_TEST_SIZE);",
          "82:  if (status == PRIMITIVES_SUCCESS)",
          "83:   return FALSE;",
          "85:  status = optimized->lShiftC_16u(src + 1, 16, d1 + 1, FUNC_TEST_SIZE);",
          "87:  if (status == PRIMITIVES_SUCCESS)",
          "88:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:  UINT32 val;",
          "98:  winpr_RAND((BYTE*)&val, sizeof(val));",
          "99:  winpr_RAND((BYTE*)src, sizeof(src));",
          "102:  status = generic->rShiftC_16s(src + 1, val, d1 + 1, FUNC_TEST_SIZE);",
          "",
          "[Removed Lines]",
          "100:  val = (val % (FUNC_TEST_SIZE - 1)) + 1;",
          "",
          "[Added Lines]",
          "123:  val = val % 16;",
          "126:  status = generic->rShiftC_16s(src + 1, 16, d1 + 1, FUNC_TEST_SIZE);",
          "128:  if (status == PRIMITIVES_SUCCESS)",
          "129:   return FALSE;",
          "131:  status = optimized->rShiftC_16s(src + 1, 16, d1 + 1, FUNC_TEST_SIZE);",
          "133:  if (status == PRIMITIVES_SUCCESS)",
          "134:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "131:  UINT32 val;",
          "132:  winpr_RAND((BYTE*)&val, sizeof(val));",
          "133:  winpr_RAND((BYTE*)src, sizeof(src));",
          "136:  status = generic->rShiftC_16u(src + 1, val, d1 + 1, FUNC_TEST_SIZE);",
          "",
          "[Removed Lines]",
          "134:  val = (val % (FUNC_TEST_SIZE - 1)) + 1;",
          "",
          "[Added Lines]",
          "169:  val = val % 16;",
          "171:  status = generic->rShiftC_16u(src + 1, 16, d1 + 1, FUNC_TEST_SIZE);",
          "173:  if (status == PRIMITIVES_SUCCESS)",
          "174:   return FALSE;",
          "176:  status = optimized->rShiftC_16u(src + 1, 16, d1 + 1, FUNC_TEST_SIZE);",
          "178:  if (status == PRIMITIVES_SUCCESS)",
          "179:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "166:  INT32 val;",
          "167:  winpr_RAND((BYTE*)&tmp, sizeof(tmp));",
          "168:  winpr_RAND((BYTE*)src, sizeof(src));",
          "171:  status = generic->shiftC_16s(src + 1, val, d1 + 1, FUNC_TEST_SIZE);",
          "",
          "[Removed Lines]",
          "169:  val = (tmp % (FUNC_TEST_SIZE - 1)) + 1;",
          "",
          "[Added Lines]",
          "215:  val = tmp % 16;",
          "218:  status = generic->shiftC_16s(src + 1, 16, d1 + 1, FUNC_TEST_SIZE);",
          "220:  if (status == PRIMITIVES_SUCCESS)",
          "221:   return FALSE;",
          "223:  status = optimized->shiftC_16s(src + 1, 16, d1 + 1, FUNC_TEST_SIZE);",
          "225:  if (status == PRIMITIVES_SUCCESS)",
          "226:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "221:  INT32 val;",
          "222:  winpr_RAND((BYTE*)&tmp, sizeof(tmp));",
          "223:  winpr_RAND((BYTE*)src, sizeof(src));",
          "226:  status = generic->shiftC_16u(src + 1, val, d1 + 1, FUNC_TEST_SIZE);",
          "",
          "[Removed Lines]",
          "224:  val = (tmp % (FUNC_TEST_SIZE - 1)) + 1;",
          "",
          "[Added Lines]",
          "282:  val = tmp % 16;",
          "285:  status = generic->shiftC_16u(src + 1, 16, d1 + 1, FUNC_TEST_SIZE);",
          "286:  if (status == PRIMITIVES_SUCCESS)",
          "287:   return FALSE;",
          "289:  status = optimized->shiftC_16u(src + 1, 16, d1 + 1, FUNC_TEST_SIZE);",
          "291:  if (status == PRIMITIVES_SUCCESS)",
          "292:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "275:  winpr_RAND((BYTE*)src, sizeof(src));",
          "276:  winpr_RAND((BYTE*)&val, sizeof(val));",
          "278:  if (!speed_test(\"lShift_16s\", \"aligned\", g_Iterations, (speed_test_fkt)generic->lShiftC_16s,",
          "279:                  (speed_test_fkt)optimized->lShiftC_16s, src, val, dst, MAX_TEST_SIZE))",
          "280:   return FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "347:  val = val % 16;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "294:  winpr_RAND((BYTE*)&val, sizeof(val));",
          "295:  winpr_RAND((BYTE*)src, sizeof(src));",
          "297:  if (!speed_test(\"lShift_16u\", \"aligned\", g_Iterations, (speed_test_fkt)generic->lShiftC_16u,",
          "298:                  (speed_test_fkt)optimized->lShiftC_16u, src, val, dst, MAX_TEST_SIZE))",
          "299:   return FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:  val = val % 16;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "313:  winpr_RAND((BYTE*)src, sizeof(src));",
          "314:  winpr_RAND((BYTE*)&val, sizeof(val));",
          "316:  if (!speed_test(\"rShift_16s\", \"aligned\", g_Iterations, (speed_test_fkt)generic->rShiftC_16s,",
          "317:                  (speed_test_fkt)optimized->rShiftC_16s, src, val, dst, MAX_TEST_SIZE))",
          "318:   return FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "387:  val = val % 16;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "332:  winpr_RAND((BYTE*)&val, sizeof(val));",
          "333:  winpr_RAND((BYTE*)src, sizeof(src));",
          "335:  if (!speed_test(\"rShift_16u\", \"aligned\", g_Iterations, (speed_test_fkt)generic->rShiftC_16u,",
          "336:                  (speed_test_fkt)optimized->rShiftC_16u, src, val, dst, MAX_TEST_SIZE))",
          "337:   return FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407:  val = val % 16;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b8311a15a0fecbbade96c03a1f3a09ada9a2fb3",
      "candidate_info": {
        "commit_hash": "6b8311a15a0fecbbade96c03a1f3a09ada9a2fb3",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6b8311a15a0fecbbade96c03a1f3a09ada9a2fb3",
        "files": [
          "winpr/libwinpr/utils/lodepng/lodepng.c"
        ],
        "message": "Fixed BehaviorSanitizer warnings.\n\n(cherry picked from commit b5dfc15183b752a5d9c6da01225ed281b20001cf)",
        "before_after_code_files": [
          "winpr/libwinpr/utils/lodepng/lodepng.c||winpr/libwinpr/utils/lodepng/lodepng.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/utils/lodepng/lodepng.c||winpr/libwinpr/utils/lodepng/lodepng.c": [
          "File: winpr/libwinpr/utils/lodepng/lodepng.c -> winpr/libwinpr/utils/lodepng/lodepng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "328: static unsigned lodepng_read32bitInt(const unsigned char* buffer)",
          "329: {",
          "331: }",
          "333: #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)",
          "",
          "[Removed Lines]",
          "330:  return (unsigned)((buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3]);",
          "",
          "[Added Lines]",
          "330:  return (unsigned)(((unsigned)buffer[0] << 24) | ((unsigned)buffer[1] << 16) |",
          "331:                    ((unsigned)buffer[2] << 8) | buffer[3]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff31ac6da747edd74513fccc4cba994362cf85b7",
      "candidate_info": {
        "commit_hash": "ff31ac6da747edd74513fccc4cba994362cf85b7",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/ff31ac6da747edd74513fccc4cba994362cf85b7",
        "files": [
          "channels/rdpei/rdpei_common.c"
        ],
        "message": "Fixed #6195: Wrong length read/write in rdpei\n\n(cherry picked from commit a18a732d4b87c85bcd364626b9ab2b8f95f9e955)",
        "before_after_code_files": [
          "channels/rdpei/rdpei_common.c||channels/rdpei/rdpei_common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/rdpei/rdpei_common.c||channels/rdpei/rdpei_common.c": [
          "File: channels/rdpei/rdpei_common.c -> channels/rdpei/rdpei_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "199: {",
          "200:  BYTE byte;",
          "203:  {",
          "204:   Stream_Write_UINT8(s, value);",
          "205:  }",
          "207:  {",
          "208:   byte = (value >> 8) & 0x3F;",
          "209:   Stream_Write_UINT8(s, byte | 0x40);",
          "210:   byte = (value & 0xFF);",
          "211:   Stream_Write_UINT8(s, byte);",
          "212:  }",
          "214:  {",
          "215:   byte = (value >> 16) & 0x3F;",
          "216:   Stream_Write_UINT8(s, byte | 0x80);",
          "",
          "[Removed Lines]",
          "202:  if (value <= 0x3F)",
          "206:  else if (value <= 0x3FFF)",
          "213:  else if (value <= 0x3FFFFF)",
          "",
          "[Added Lines]",
          "202:  if (value <= 0x3FUL)",
          "206:  else if (value <= 0x3FFFUL)",
          "213:  else if (value <= 0x3FFFFFUL)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:   byte = (value & 0xFF);",
          "220:   Stream_Write_UINT8(s, byte);",
          "221:  }",
          "223:  {",
          "224:   byte = (value >> 24) & 0x3F;",
          "225:   Stream_Write_UINT8(s, byte | 0xC0);",
          "",
          "[Removed Lines]",
          "222:  else if (value <= 0x3FFFFF)",
          "",
          "[Added Lines]",
          "222:  else if (value <= 0x3FFFFFFFUL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "306:   value *= -1;",
          "307:  }",
          "310:  {",
          "311:   byte = value & 0x1F;",
          "",
          "[Removed Lines]",
          "309:  if (value <= 0x1F)",
          "",
          "[Added Lines]",
          "309:  if (value <= 0x1FUL)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "316:   Stream_Write_UINT8(s, byte);",
          "317:  }",
          "319:  {",
          "320:   byte = (value >> 8) & 0x1F;",
          "",
          "[Removed Lines]",
          "318:  else if (value <= 0x1FFF)",
          "",
          "[Added Lines]",
          "318:  else if (value <= 0x1FFFUL)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "326:   byte = (value & 0xFF);",
          "327:   Stream_Write_UINT8(s, byte);",
          "328:  }",
          "330:  {",
          "331:   byte = (value >> 16) & 0x1F;",
          "",
          "[Removed Lines]",
          "329:  else if (value <= 0x1FFFFF)",
          "",
          "[Added Lines]",
          "329:  else if (value <= 0x1FFFFFUL)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "339:   byte = (value & 0xFF);",
          "340:   Stream_Write_UINT8(s, byte);",
          "341:  }",
          "343:  {",
          "344:   byte = (value >> 24) & 0x1F;",
          "",
          "[Removed Lines]",
          "342:  else if (value <= 0x1FFFFF)",
          "",
          "[Added Lines]",
          "342:  else if (value <= 0x1FFFFFFFUL)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "478: {",
          "479:  BYTE byte;",
          "482:  {",
          "483:   byte = value & 0x1F;",
          "484:   Stream_Write_UINT8(s, byte);",
          "485:  }",
          "487:  {",
          "488:   byte = (value >> 8) & 0x1F;",
          "489:   byte |= (1 << 5);",
          "",
          "[Removed Lines]",
          "481:  if (value <= 0x1F)",
          "486:  else if (value <= 0x1FFF)",
          "",
          "[Added Lines]",
          "481:  if (value <= 0x1FULL)",
          "486:  else if (value <= 0x1FFFULL)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "491:   byte = (value & 0xFF);",
          "492:   Stream_Write_UINT8(s, byte);",
          "493:  }",
          "495:  {",
          "496:   byte = (value >> 16) & 0x1F;",
          "497:   byte |= (2 << 5);",
          "",
          "[Removed Lines]",
          "494:  else if (value <= 0x1FFFFF)",
          "",
          "[Added Lines]",
          "494:  else if (value <= 0x1FFFFFULL)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "501:   byte = (value & 0xFF);",
          "502:   Stream_Write_UINT8(s, byte);",
          "503:  }",
          "505:  {",
          "506:   byte = (value >> 24) & 0x1F;",
          "507:   byte |= (3 << 5);",
          "",
          "[Removed Lines]",
          "504:  else if (value <= 0x1FFFFF)",
          "",
          "[Added Lines]",
          "504:  else if (value <= 0x1FFFFFULL)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "513:   byte = (value & 0xFF);",
          "514:   Stream_Write_UINT8(s, byte);",
          "515:  }",
          "517:  {",
          "518:   byte = (value >> 32) & 0x1F;",
          "519:   byte |= (4 << 5);",
          "",
          "[Removed Lines]",
          "516:  else if (value <= 0x1FFFFFFF)",
          "",
          "[Added Lines]",
          "516:  else if (value <= 0x1FFFFFFFULL)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "527:   byte = (value & 0xFF);",
          "528:   Stream_Write_UINT8(s, byte);",
          "529:  }",
          "531:  {",
          "532:   byte = (value >> 40) & 0x1F;",
          "533:   byte |= (5 << 5);",
          "",
          "[Removed Lines]",
          "530:  else if (value <= 0x1FFFFFFFFF)",
          "",
          "[Added Lines]",
          "530:  else if (value <= 0x1FFFFFFFFFULL)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "543:   byte = (value & 0xFF);",
          "544:   Stream_Write_UINT8(s, byte);",
          "545:  }",
          "547:  {",
          "548:   byte = (value >> 48) & 0x1F;",
          "549:   byte |= (6 << 5);",
          "",
          "[Removed Lines]",
          "546:  else if (value <= 0x1FFFFFFFFFFF)",
          "",
          "[Added Lines]",
          "546:  else if (value <= 0x1FFFFFFFFFFFULL)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "561:   byte = (value & 0xFF);",
          "562:   Stream_Write_UINT8(s, byte);",
          "563:  }",
          "565:  {",
          "566:   byte = (value >> 56) & 0x1F;",
          "567:   byte |= (7 << 5);",
          "",
          "[Removed Lines]",
          "564:  else if (value <= 0x1FFFFFFFFFFFFF)",
          "",
          "[Added Lines]",
          "564:  else if (value <= 0x1FFFFFFFFFFFFFFFULL)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f88705c10c3dc2062a4245127aa8fb332e9e9e66",
      "candidate_info": {
        "commit_hash": "f88705c10c3dc2062a4245127aa8fb332e9e9e66",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/f88705c10c3dc2062a4245127aa8fb332e9e9e66",
        "files": [
          "channels/drdynvc/client/drdynvc_main.c"
        ],
        "message": "Extend lifetime of streampool in drdynvc\n\nThe stream pool can not be released until all streams have been\nreturned. This might happen as late as channel termination, so\nchange the lifetime scope accordingly.\n\n(cherry picked from commit 5bd4cfcdc013cdd0c0d7c9b6eec878dd8a297575)",
        "before_after_code_files": [
          "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c": [
          "File: channels/drdynvc/client/drdynvc_main.c -> channels/drdynvc/client/drdynvc_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1407:   Stream_Release(s);",
          "1408: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1410: static UINT drdynvc_virtual_channel_event_initialized(drdynvcPlugin* drdynvc, LPVOID pData,",
          "1411:                                                       UINT32 dataLength)",
          "1412: {",
          "1413:  UINT error = CHANNEL_RC_OK;",
          "1414:  WINPR_UNUSED(pData);",
          "1415:  WINPR_UNUSED(dataLength);",
          "1417:  if (!drdynvc)",
          "1418:   goto error;",
          "1420:  drdynvc->queue = MessageQueue_New(NULL);",
          "1422:  if (!drdynvc->queue)",
          "1423:  {",
          "1424:   error = CHANNEL_RC_NO_MEMORY;",
          "1425:   WLog_Print(drdynvc->log, WLOG_ERROR, \"MessageQueue_New failed!\");",
          "1426:   goto error;",
          "1427:  }",
          "1429:  drdynvc->queue->object.fnObjectFree = drdynvc_queue_object_free;",
          "1430:  drdynvc->channel_mgr = dvcman_new(drdynvc);",
          "1432:  if (!drdynvc->channel_mgr)",
          "1433:  {",
          "1434:   error = CHANNEL_RC_NO_MEMORY;",
          "1435:   WLog_Print(drdynvc->log, WLOG_ERROR, \"dvcman_new failed!\");",
          "1436:   goto error;",
          "1437:  }",
          "1439:  return CHANNEL_RC_OK;",
          "1440: error:",
          "1441:  return ERROR_INTERNAL_ERROR;",
          "1442: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1438:   return status;",
          "1439:  }",
          "1460:  settings = (rdpSettings*)drdynvc->channelEntryPoints.pExtendedData;",
          "1462:  for (index = 0; index < settings->DynamicChannelCount; index++)",
          "",
          "[Removed Lines]",
          "1441:  drdynvc->queue = MessageQueue_New(NULL);",
          "1443:  if (!drdynvc->queue)",
          "1444:  {",
          "1445:   error = CHANNEL_RC_NO_MEMORY;",
          "1446:   WLog_Print(drdynvc->log, WLOG_ERROR, \"MessageQueue_New failed!\");",
          "1447:   goto error;",
          "1448:  }",
          "1450:  drdynvc->queue->object.fnObjectFree = drdynvc_queue_object_free;",
          "1451:  drdynvc->channel_mgr = dvcman_new(drdynvc);",
          "1453:  if (!drdynvc->channel_mgr)",
          "1454:  {",
          "1455:   error = CHANNEL_RC_NO_MEMORY;",
          "1456:   WLog_Print(drdynvc->log, WLOG_ERROR, \"dvcman_new failed!\");",
          "1457:   goto error;",
          "1458:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1519:   return status;",
          "1520:  }",
          "1523:  CloseHandle(drdynvc->thread);",
          "1525:  drdynvc->thread = NULL;",
          "1526:  status = drdynvc->channelEntryPoints.pVirtualChannelCloseEx(drdynvc->InitHandle,",
          "1527:                                                              drdynvc->OpenHandle);",
          "",
          "[Removed Lines]",
          "1522:  MessageQueue_Free(drdynvc->queue);",
          "1524:  drdynvc->queue = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1540:   drdynvc->data_in = NULL;",
          "1541:  }",
          "1549:  return status;",
          "1550: }",
          "",
          "[Removed Lines]",
          "1543:  if (drdynvc->channel_mgr)",
          "1544:  {",
          "1545:   dvcman_free(drdynvc, drdynvc->channel_mgr);",
          "1546:   drdynvc->channel_mgr = NULL;",
          "1547:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1559:  if (!drdynvc)",
          "1560:   return CHANNEL_RC_BAD_CHANNEL_HANDLE;",
          "1562:  drdynvc->InitHandle = 0;",
          "1563:  free(drdynvc->context);",
          "1564:  free(drdynvc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1570:  if (drdynvc->channel_mgr)",
          "1571:  {",
          "1572:   dvcman_free(drdynvc, drdynvc->channel_mgr);",
          "1573:   drdynvc->channel_mgr = NULL;",
          "1574:  }",
          "1575:  MessageQueue_Free(drdynvc->queue);",
          "1576:  drdynvc->queue = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1646:  switch (event)",
          "1647:  {",
          "1648:   case CHANNEL_EVENT_CONNECTED:",
          "1649:    if ((error = drdynvc_virtual_channel_event_connected(drdynvc, pData, dataLength)))",
          "1650:     WLog_Print(drdynvc->log, WLOG_ERROR,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1663:   case CHANNEL_EVENT_INITIALIZED:",
          "1664:    error = drdynvc_virtual_channel_event_initialized(drdynvc, pData, dataLength);",
          "1665:    break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "47c456c39f2ce53c85c938089fa52da4a7aa0913",
      "candidate_info": {
        "commit_hash": "47c456c39f2ce53c85c938089fa52da4a7aa0913",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/47c456c39f2ce53c85c938089fa52da4a7aa0913",
        "files": [
          "libfreerdp/core/info.c"
        ],
        "message": "Rewritten rdp_recv_logon_info_v2 to remove unaligned access\n\n(cherry picked from commit 66d182a84bed7bf19b6a99d71a4e4c7c6856f583)",
        "before_after_code_files": [
          "libfreerdp/core/info.c||libfreerdp/core/info.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/info.c||libfreerdp/core/info.c": [
          "File: libfreerdp/core/info.c -> libfreerdp/core/info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1115:  UINT32 Size;",
          "1116:  UINT32 cbDomain;",
          "1117:  UINT32 cbUserName;",
          "1123:  WINPR_UNUSED(rdp);",
          "1124:  ZeroMemory(info, sizeof(*info));",
          "",
          "[Removed Lines]",
          "1118:  union {",
          "1119:   BYTE* bp;",
          "1120:   WCHAR* wp;",
          "1121:  } ptrconv;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1142:  if (cbDomain)",
          "1143:  {",
          "1144:   if ((cbDomain % 2) || (cbDomain > 52))",
          "1145:   {",
          "1146:    WLog_ERR(TAG, \"protocol error: invalid cbDomain value: %\" PRIu32 \"\", cbDomain);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1140:   WCHAR domain[26] = { 0 };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1153:    goto fail;",
          "1154:   }",
          "1159:   {",
          "1160:    WLog_ERR(TAG, \"protocol error: Domain field must be null terminated\");",
          "1161:    goto fail;",
          "1162:   }",
          "1165:   {",
          "1166:    WLog_ERR(TAG, \"failed to convert the Domain string\");",
          "1167:    goto fail;",
          "1168:   }",
          "1169:  }",
          "",
          "[Removed Lines]",
          "1156:   ptrconv.bp = Stream_Pointer(s);",
          "1158:   if (ptrconv.bp[cbDomain - 1] || ptrconv.bp[cbDomain - 2])",
          "1164:   if (ConvertFromUnicode(CP_UTF8, 0, ptrconv.wp, -1, &info->domain, 0, NULL, FALSE) < 1)",
          "",
          "[Added Lines]",
          "1153:   memcpy(domain, Stream_Pointer(s), cbDomain);",
          "1156:   if (domain[cbDomain / sizeof(WCHAR) - 1])",
          "1162:   if (ConvertFromUnicode(CP_UTF8, 0, domain, -1, &info->domain, 0, NULL, FALSE) < 1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1179:  if (cbUserName)",
          "1180:  {",
          "1181:   if ((cbUserName % 2) || cbUserName < 2 || cbUserName > 512)",
          "1182:   {",
          "1183:    WLog_ERR(TAG, \"protocol error: invalid cbUserName value: %\" PRIu32 \"\", cbUserName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1177:   WCHAR user[256] = { 0 };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1190:    goto fail;",
          "1191:   }",
          "1196:   {",
          "1197:    WLog_ERR(TAG, \"protocol error: UserName field must be null terminated\");",
          "1198:    goto fail;",
          "1199:   }",
          "1202:   {",
          "1203:    WLog_ERR(TAG, \"failed to convert the Domain string\");",
          "1204:    goto fail;",
          "1205:   }",
          "1206:  }",
          "1209:  WLog_DBG(TAG, \"LogonInfoV2: SessionId: 0x%08\" PRIX32 \" UserName: [%s] Domain: [%s]\",",
          "1210:           info->sessionId, info->username, info->domain);",
          "1211:  return TRUE;",
          "",
          "[Removed Lines]",
          "1193:   ptrconv.bp = Stream_Pointer(s);",
          "1195:   if (ptrconv.wp[cbUserName / 2 - 1])",
          "1201:   if (ConvertFromUnicode(CP_UTF8, 0, ptrconv.wp, -1, &info->username, 0, NULL, FALSE) < 1)",
          "",
          "[Added Lines]",
          "1191:   memcpy(user, Stream_Pointer(s), cbUserName);",
          "1194:   if (user[cbUserName / sizeof(WCHAR) - 1])",
          "1200:   if (ConvertFromUnicode(CP_UTF8, 0, user, -1, &info->username, 0, NULL, FALSE) < 1)",
          "",
          "---------------"
        ]
      }
    }
  ]
}