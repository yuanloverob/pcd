{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "26391eeefe25dcaacb34e18e7042a890f05d15d1",
      "candidate_info": {
        "commit_hash": "26391eeefe25dcaacb34e18e7042a890f05d15d1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/26391eeefe25dcaacb34e18e7042a890f05d15d1",
        "files": [
          "main.mk",
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Add the \"dbfuzz2\" target to main.mk.  Remove an unused local variable from dbfuzz2.c.\n\nFossilOrigin-Name: 05c7609cfd02f49114876267d7090f4e0ea2467f3aa7c65019c5986ec8f60a87",
        "before_after_code_files": [
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "574:    $(DBFUZZ_OPT) $(TOP)/test/dbfuzz.c sqlite3.c \\",
          "575:    $(TLIBS) $(THREADLIB)",
          "577: fuzzcheck$(EXE): $(TOP)/test/fuzzcheck.c sqlite3.c sqlite3.h $(TOP)/test/ossfuzz.c",
          "578:  $(TCCX) -o fuzzcheck$(EXE) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION \\",
          "579:   -DSQLITE_ENABLE_MEMSYS5 $(FUZZCHECK_OPT) -DSQLITE_OSS_FUZZ \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "577: DBFUZZ2_OPTS = \\",
          "578:   -DSQLITE_THREADSAFE=0 \\",
          "579:   -DSQLITE_OMIT_LOAD_EXTENSION \\",
          "580:   -DSQLITE_ENABLE_DESERIALIZE \\",
          "581:   -DSQLITE_DEBUG \\",
          "582:   -DSQLITE_ENABLE_DBSTAT_VTAB \\",
          "583:   -DSQLITE_ENABLE_RTREE \\",
          "584:   -DSQLITE_ENABLE_FTS4 \\",
          "585:   -DSQLITE_ENABLE_FTS5",
          "587: dbfuzz2$(EXE): $(TOP)/test/dbfuzz2.c sqlite3.c sqlite3.h",
          "588:  $(TCCX) -I. -g -O0 -DSTANDALONE -o dbfuzz2$(EXE) \\",
          "589:    $(DBFUZZ2_OPTS) $(TOP)/test/dbfuzz2.c sqlite3.c  $(TLIBS) $(THREADLIB)",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5547f39de993c708f72301ef25df190a2f007e0c4253799bdd9e86bb1ae41777",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169: #ifdef STANDALONE",
          "170: int main(int argc, char **argv){",
          "171:   int i;",
          "173:   LLVMFuzzerInitialize(&argc, &argv);",
          "174:   for(i=1; i<argc; i++){",
          "175:     unsigned char *pIn;",
          "",
          "[Removed Lines]",
          "172:   int prevAmt = -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "53e8709b75e21fdba0967a65c855d410c724d4b0",
      "candidate_info": {
        "commit_hash": "53e8709b75e21fdba0967a65c855d410c724d4b0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/53e8709b75e21fdba0967a65c855d410c724d4b0",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/view.test"
        ],
        "message": "New test case for check-in [74ef97bf51dd531a] that takes the fix in the previous check-in into account.\n\nFossilOrigin-Name: cb1d06521de5918a2324a41e207b48c5e5149c23b927b9e3e1f3c3b38b82658e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/view.test||test/view.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3cacc4b940fd69776d930deec9512df47a2f22cb04fb955e354a0b25bdec287c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/view.test||test/view.test": [
          "File: test/view.test -> test/view.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "715:   1 1 2 2",
          "716:   1 1 3 3",
          "717: }",
          "719: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "718: do_execsql_test view-26.1 {",
          "719:   WITH v17(x,y) AS (SELECT max(a), min(b) FROM t16 GROUP BY c)",
          "720:   SELECT * FROM v17 AS one, v17 AS two WHERE one.x=1;",
          "721: } {",
          "722:   1 1 1 1",
          "723:   1 1 2 2",
          "724:   1 1 3 3",
          "725: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3703edf1108096c9cb570d02fd21d7d7185f65d3",
      "candidate_info": {
        "commit_hash": "3703edf1108096c9cb570d02fd21d7d7185f65d3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3703edf1108096c9cb570d02fd21d7d7185f65d3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "src/sqliteInt.h",
          "test/filter1.test",
          "test/window1.test"
        ],
        "message": "Be sure to rewrite column references inside FILTER clauses and window frame definitions when flattening queries. Fix for [1079ad19].\n\nFossilOrigin-Name: ccba7202b69d239724c3b589439c9c3b0e1bba237accfeb11c39d492522b8719",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/filter1.test||test/filter1.test",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c",
            "test/window1.test||test/window1.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c",
            "test/window1.test||test/window1.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eb7ed90b8a65748f0721aaf7bdddd2207f552be5015603fbfb7044d815ae2f36",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:     if( OK_IF_ALWAYS_TRUE(p->pWinDefn) ){",
          "101:       sqlite3WindowListDelete(db, p->pWinDefn);",
          "102:     }",
          "103: #endif",
          "104:     if( OK_IF_ALWAYS_TRUE(p->pWith) ) sqlite3WithDelete(db, p->pWith);",
          "106:     if( bFree ) sqlite3DbFreeNN(db, p);",
          "107:     p = pPrior;",
          "108:     bFree = 1;",
          "",
          "[Removed Lines]",
          "105:     assert( p->pWin==0 );",
          "",
          "[Added Lines]",
          "103:     assert( p->pWin==0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3503:     }else{",
          "3504:       substExprList(pSubst, pExpr->x.pList);",
          "3505:     }",
          "3506:   }",
          "3507:   return pExpr;",
          "3508: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3506: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "3507:     if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "3508:       Window *pWin = pExpr->y.pWin;",
          "3509:       pWin->pFilter = substExpr(pSubst, pWin->pFilter);",
          "3510:       substExprList(pSubst, pWin->pPartition);",
          "3511:       substExprList(pSubst, pWin->pOrderBy);",
          "3512:     }",
          "3513: #endif",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2600:     ExprHasProperty((p), EP_WinFunc) && p->y.pWin->eFrmType!=TK_FILTER \\",
          "",
          "[Removed Lines]",
          "2599: #define IsWindowFunc(p) ( \\",
          "2601: )",
          "",
          "[Added Lines]",
          "2599: #ifdef SQLITE_OMIT_WINDOWFUNC",
          "2600: # define IsWindowFunc(p) 0",
          "2601: #else",
          "2602: # define IsWindowFunc(p) ( \\",
          "2604:  )",
          "2605: #endif",
          "",
          "---------------"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:   SELECT a, avg(c) FILTER (WHERE b!=1) FROM t1 GROUP BY a ORDER BY 2",
          "165: } {c 2.0 b 5.0 a 10.0}",
          "167: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167: #-------------------------------------------------------------------------",
          "168: reset_db",
          "169: do_execsql_test 5.0 {",
          "170:   CREATE TABLE t1(a, b);",
          "171:   INSERT INTO t1 VALUES(1, 2);",
          "172:   INSERT INTO t1 VALUES(1, 3);",
          "173: }",
          "175: do_execsql_test 5.1 {",
          "176:   SELECT count(*) FILTER (WHERE b>2) FROM (SELECT * FROM t1)",
          "177: } {1}",
          "179: do_execsql_test 5.2 {",
          "180:   SELECT count(*) FILTER (WHERE b>2) OVER () FROM (SELECT * FROM t1)",
          "181: } {1 1}",
          "183: do_execsql_test 5.3 {",
          "184:   SELECT count(*) FILTER (WHERE b>2) OVER (ORDER BY b) FROM (SELECT * FROM t1)",
          "185: } {0 1}",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1190:          win3 AS (win2 RANGE BETWEEN 5.2 PRECEDING AND true PRECEDING );",
          "1191: } {1 1}",
          "1193: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1193: #-------------------------------------------------------------------------",
          "1194: reset_db",
          "1195: do_execsql_test 31.1 {",
          "1196:   CREATE TABLE t1(a, b);",
          "1197:   CREATE TABLE t2(c, d);",
          "1198:   CREATE TABLE t3(e, f);",
          "1200:   INSERT INTO t1 VALUES(1, 1);",
          "1201:   INSERT INTO t2 VALUES(1, 1);",
          "1202:   INSERT INTO t3 VALUES(1, 1);",
          "1203: }",
          "1205: do_execsql_test 31.2 {",
          "1206:   SELECT d IN (SELECT sum(c) OVER (ORDER BY e+c) FROM t3) FROM (",
          "1207:     SELECT * FROM t2",
          "1208:   );",
          "1209: } {1}",
          "1211: do_execsql_test 31.3 {",
          "1212:   SELECT d IN (SELECT sum(c) OVER (PARTITION BY d ORDER BY e+c) FROM t3) FROM (",
          "1213:     SELECT * FROM t2",
          "1214:   );",
          "1215: } {1}",
          "1217: do_catchsql_test 31.3 {",
          "1218:   SELECT d IN (",
          "1219:     SELECT sum(c) OVER ( ROWS BETWEEN d FOLLOWING AND UNBOUNDED FOLLOWING)",
          "1220:     FROM t3",
          "1221:   )",
          "1222:   FROM (",
          "1223:     SELECT * FROM t2",
          "1224:   );",
          "1225: } {1 {frame starting offset must be a non-negative integer}}",
          "1227: do_catchsql_test 31.3 {",
          "1228:   SELECT d IN (",
          "1229:     SELECT sum(c) OVER ( ROWS BETWEEN CURRENT ROW AND c FOLLOWING)",
          "1230:     FROM t3",
          "1231:   )",
          "1232:   FROM (",
          "1233:     SELECT * FROM t2",
          "1234:   );",
          "1235: } {1 {frame ending offset must be a non-negative integer}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a19865ff2f39ed313462da7e0e204b6ff3eb8b0",
      "candidate_info": {
        "commit_hash": "6a19865ff2f39ed313462da7e0e204b6ff3eb8b0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6a19865ff2f39ed313462da7e0e204b6ff3eb8b0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/wherecode.c"
        ],
        "message": "Remove some affinity tests that became unreachable due to the prior change.\n\nFossilOrigin-Name: e2db1123faac26c0e0b6a1ebef1685ea7633bfcafd1ff743ba5380700f7745af",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e0d909c740b774d8a46731696e33342be83206cc4a95d07f42fdb3d8cc2d7a8e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2203:   if( op==TK_REGISTER ) op = p->op2;",
          "2204:   switch( op ){",
          "2205:     case TK_INTEGER: {",
          "2207:     }",
          "2208:     case TK_FLOAT: {",
          "2210:     }",
          "2211:     case TK_STRING: {",
          "2212:       return !unaryMinus && aff==SQLITE_AFF_TEXT;",
          "",
          "[Removed Lines]",
          "2206:       return aff==SQLITE_AFF_INTEGER || aff==SQLITE_AFF_NUMERIC;",
          "2209:       return aff==SQLITE_AFF_REAL || aff==SQLITE_AFF_NUMERIC;",
          "",
          "[Added Lines]",
          "2206:       return aff>=SQLITE_AFF_NUMERIC;",
          "2209:       return aff>=SQLITE_AFF_NUMERIC;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2216:     }",
          "2217:     case TK_COLUMN: {",
          "2221:     }",
          "2222:     default: {",
          "2223:       return 0;",
          "",
          "[Removed Lines]",
          "2219:       return p->iColumn<0",
          "2220:           && (aff==SQLITE_AFF_INTEGER || aff==SQLITE_AFF_NUMERIC);",
          "",
          "[Added Lines]",
          "2219:       return aff>=SQLITE_AFF_NUMERIC && p->iColumn<0;",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "755:         if( sqlite3ExprNeedsNoAffinityChange(pRight, zAff[j]) ){",
          "756:           zAff[j] = SQLITE_AFF_BLOB;",
          "757:         }",
          "759:       }",
          "760:     }",
          "761:   }",
          "",
          "[Removed Lines]",
          "758:         if( zAff[j]==SQLITE_AFF_REAL ) zAff[j] = SQLITE_AFF_NUMERIC;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8061ad8abd3811c5918d1308e4c8816869509806",
      "candidate_info": {
        "commit_hash": "8061ad8abd3811c5918d1308e4c8816869509806",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8061ad8abd3811c5918d1308e4c8816869509806",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata7.db"
        ],
        "message": "Add extra tests for database corruption inside the defragmentPage() routine, as dbfuzz2 has found ways for corruption to leak into that point.  Add test cases in fuzzdata7.db.\n\nFossilOrigin-Name: 997b65117f8c12dba5fb85434fde9765cdb0d2a49cc3e31979abba3e21350086",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 682053d1e603c21b8085c39db618a39b23ec8d2c4d822fd19634db0e03038ea2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1413:   if( (int)data[hdr+7]<=nMaxFrag ){",
          "1414:     int iFree = get2byte(&data[hdr+1]);",
          "1415:     if( iFree ){",
          "1416:       int iFree2 = get2byte(&data[iFree]);",
          "1428:       if( 0==iFree2 || (data[iFree2]==0 && data[iFree2+1]==0) ){",
          "1429:         u8 *pEnd = &data[cellOffset + nCell*2];",
          "1430:         u8 *pAddr;",
          "",
          "[Removed Lines]",
          "1424:       assert( iFree2==0 || iFree2>iFree );",
          "1425:       assert( iFree+get2byte(&data[iFree+2]) <= usableSize );",
          "1426:       assert( iFree2==0 || iFree2+get2byte(&data[iFree2+2]) <= usableSize );",
          "",
          "[Added Lines]",
          "1419:     assert( iFree<=usableSize-4 );",
          "1422:       if( iFree2>usableSize-4 ) return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1435:           return SQLITE_CORRUPT_PAGE(pPage);",
          "1436:         }",
          "1437:         if( iFree2 ){",
          "1439:           sz2 = get2byte(&data[iFree2+2]);",
          "1441:           memmove(&data[iFree+sz+sz2], &data[iFree+sz], iFree2-(iFree+sz));",
          "1442:           sz += sz2;",
          "1443:         }",
          "",
          "[Removed Lines]",
          "1440:           assert( iFree+sz+sz2+iFree2-(iFree+sz) <= usableSize );",
          "",
          "[Added Lines]",
          "1433:           if( iFree+sz>iFree2 ) return SQLITE_CORRUPT_PAGE(pPage);",
          "1435:           if( iFree2+sz2 > usableSize ) return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "---------------"
        ]
      }
    }
  ]
}