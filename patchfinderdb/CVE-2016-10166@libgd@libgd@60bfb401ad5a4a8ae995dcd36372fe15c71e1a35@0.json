{
  "cve_id": "CVE-2016-10166",
  "cve_desc": "Integer underflow in the _gdContributionsAlloc function in gd_interpolation.c in the GD Graphics Library (aka libgd) before 2.2.4 allows remote attackers to have unspecified impact via vectors related to decrementing the u variable.",
  "repo": "libgd/libgd",
  "patch_hash": "60bfb401ad5a4a8ae995dcd36372fe15c71e1a35",
  "patch_info": {
    "commit_hash": "60bfb401ad5a4a8ae995dcd36372fe15c71e1a35",
    "repo": "libgd/libgd",
    "commit_url": "https://github.com/libgd/libgd/commit/60bfb401ad5a4a8ae995dcd36372fe15c71e1a35",
    "files": [
      "src/gd_interpolation.c"
    ],
    "message": "Fix potential unsigned underflow\n\nNo need to decrease `u`, so we don't do it. While we're at it, we also factor\nout the overflow check of the loop, what improves performance and readability.\n\nThis issue has been reported by Stefan Esser to security@libgd.org.",
    "before_after_code_files": [
      "src/gd_interpolation.c||src/gd_interpolation.c"
    ]
  },
  "patch_diff": {
    "src/gd_interpolation.c||src/gd_interpolation.c": [
      "File: src/gd_interpolation.c -> src/gd_interpolation.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "829: {",
      "830:  unsigned int u = 0;",
      "831:  LineContribType *res;",
      "834:  res = (LineContribType *) gdMalloc(sizeof(LineContribType));",
      "835:  if (!res) {",
      "836:   return NULL;",
      "",
      "[Removed Lines]",
      "832:  int overflow_error = 0;",
      "",
      "[Added Lines]",
      "832:  size_t weights_size;",
      "834:  if (overflow2(windows_size, sizeof(double))) {",
      "835:   return NULL;",
      "836:  } else {",
      "837:   weights_size = windows_size * sizeof(double);",
      "838:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "847:   return NULL;",
      "848:  }",
      "849:  for (u = 0 ; u < line_length ; u++) {",
      "856:    unsigned int i;",
      "859:     gdFree(res->ContribRow[i].Weights);",
      "860:    }",
      "861:    gdFree(res->ContribRow);",
      "",
      "[Removed Lines]",
      "850:   if (overflow2(windows_size, sizeof(double))) {",
      "851:    overflow_error = 1;",
      "852:   } else {",
      "853:    res->ContribRow[u].Weights = (double *) gdMalloc(windows_size * sizeof(double));",
      "854:   }",
      "855:   if (overflow_error == 1 || res->ContribRow[u].Weights == NULL) {",
      "857:    u--;",
      "858:    for (i=0;i<=u;i++) {",
      "",
      "[Added Lines]",
      "855:   res->ContribRow[u].Weights = (double *) gdMalloc(weights_size);",
      "856:   if (res->ContribRow[u].Weights == NULL) {",
      "859:    for (i=0;i<u;i++) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0dd40abd6d5b3e53a6b745dd4d6cf94b70010989",
      "candidate_info": {
        "commit_hash": "0dd40abd6d5b3e53a6b745dd4d6cf94b70010989",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/0dd40abd6d5b3e53a6b745dd4d6cf94b70010989",
        "files": [
          "src/gd.c",
          "src/gd_interpolation.c",
          "tests/gdimagescale/CMakeLists.txt",
          "tests/gdimagescale/Makemodule.am",
          "tests/gdimagescale/bug_overflow_large_new_size.c"
        ],
        "message": "fix possible OOB or OOM in gdImageScale, reported by Secunia (CVE 2016-6207)",
        "before_after_code_files": [
          "src/gd.c||src/gd.c",
          "src/gd_interpolation.c||src/gd_interpolation.c",
          "tests/gdimagescale/Makemodule.am||tests/gdimagescale/Makemodule.am",
          "tests/gdimagescale/bug_overflow_large_new_size.c||tests/gdimagescale/bug_overflow_large_new_size.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gd_interpolation.c||src/gd_interpolation.c"
          ],
          "candidate": [
            "src/gd_interpolation.c||src/gd_interpolation.c"
          ]
        }
      },
      "candidate_diff": {
        "src/gd.c||src/gd.c": [
          "File: src/gd.c -> src/gd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:   return 0;",
          "273:  }",
          "276:   return NULL;",
          "277:  }",
          "",
          "[Removed Lines]",
          "275:  if (overflow2(sizeof(int), sx)) {",
          "",
          "[Added Lines]",
          "275:  if (overflow2(sizeof(int *), sx)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2947:           int dstW, int dstH, int srcW, int srcH)",
          "2948: {",
          "2949:  int x, y;",
          "2951:  if (!dst->trueColor) {",
          "2954:   return;",
          "2955:  }",
          "2956:  for (y = dstY; (y < dstY + dstH); y++) {",
          "2960:   for (x = dstX; (x < dstX + dstW); x++) {",
          "2968:    sy = sy1;",
          "2969:    do {",
          "2973:      if (yportion > sy2 - sy1) {",
          "2974:       yportion = sy2 - sy1;",
          "2975:      }",
          "2979:     } else {",
          "2980:      yportion = 1.0;",
          "2981:     }",
          "2982:     sx = sx1;",
          "2983:     do {",
          "2986:      int p;",
          "2989:       if (xportion > sx2 - sx1) {",
          "2990:        xportion = sx2 - sx1;",
          "2991:       }",
          "2995:      } else {",
          "2996:       xportion = 1.0;",
          "2997:      }",
          "2998:      pcontribution = xportion * yportion;",
          "3007:      alpha += gdTrueColorGetAlpha (p) * pcontribution;",
          "3008:      spixels += xportion * yportion;",
          "3009:      sx += 1.0;",
          "3013:    if (spixels != 0.0) {",
          "3014:     red /= spixels;",
          "3015:     green /= spixels;",
          "3016:     blue /= spixels;",
          "3017:     alpha /= spixels;",
          "3019:    }",
          "3022:      alpha_sum /= contrib_sum;",
          "3023:     }",
          "3024:     red /= alpha_sum;",
          "",
          "[Removed Lines]",
          "2950:  double sy1, sy2, sx1, sx2;",
          "2952:   gdImageCopyResized (dst, src, dstX, dstY, srcX, srcY, dstW, dstH,",
          "2953:                       srcW, srcH);",
          "2957:   sy1 = ((double) y - (double) dstY) * (double) srcH / (double) dstH;",
          "2958:   sy2 = ((double) (y + 1) - (double) dstY) * (double) srcH /",
          "2959:         (double) dstH;",
          "2961:    double sx, sy;",
          "2962:    double spixels = 0;",
          "2963:    double red = 0.0, green = 0.0, blue = 0.0, alpha = 0.0;",
          "2964:    double alpha_sum = 0.0, contrib_sum = 0.0;",
          "2966:    sx1 = ((double) x - (double) dstX) * (double) srcW / dstW;",
          "2967:    sx2 = ((double) (x + 1) - (double) dstX) * (double) srcW / dstW;",
          "2970:     double yportion;",
          "2971:     if (floor2 (sy) == floor2 (sy1)) {",
          "2972:      yportion = 1.0 - (sy - floor2 (sy));",
          "2976:      sy = floor2 (sy);",
          "2977:     } else if (sy == floor2 (sy2)) {",
          "2978:      yportion = sy2 - floor2 (sy2);",
          "2984:      double xportion;",
          "2985:      double pcontribution;",
          "2987:      if (floor2 (sx) == floor2 (sx1)) {",
          "2988:       xportion = 1.0 - (sx - floor2 (sx));",
          "2992:       sx = floor2 (sx);",
          "2993:      } else if (sx == floor2 (sx2)) {",
          "2994:       xportion = sx2 - floor2 (sx2);",
          "3001:      p = gdImageGetTrueColorPixel (src,",
          "3002:                                    (int) sx + srcX,",
          "3003:                                    (int) sy + srcY);",
          "3004:      red += gdTrueColorGetRed (p) * pcontribution;",
          "3005:      green += gdTrueColorGetGreen (p) * pcontribution;",
          "3006:      blue += gdTrueColorGetBlue (p) * pcontribution;",
          "3010:     } while (sx < sx2);",
          "3011:     sy += 1.0;",
          "3012:    } while (sy < sy2);",
          "3018:     alpha += 0.5;",
          "3020:    if ( alpha_sum != 0.0f) {",
          "3021:     if( contrib_sum != 0.0f) {",
          "",
          "[Added Lines]",
          "2951:   gdImageCopyResized (dst, src, dstX, dstY, srcX, srcY, dstW, dstH, srcW, srcH);",
          "2956:    float sy1, sy2, sx1, sx2;",
          "2957:    float sx, sy;",
          "2958:    float spixels = 0.0;",
          "2959:    float red = 0.0, green = 0.0, blue = 0.0, alpha = 0.0;",
          "2960:    float alpha_factor, alpha_sum = 0.0, contrib_sum = 0.0;",
          "2961:    sy1 = ((float)(y - dstY)) * (float)srcH / (float)dstH;",
          "2962:    sy2 = ((float)(y + 1 - dstY)) * (float) srcH / (float) dstH;",
          "2965:     float yportion;",
          "2966:     if (floorf(sy) == floorf(sy1)) {",
          "2967:      yportion = 1.0 - (sy - floorf(sy));",
          "2971:      sy = floorf(sy);",
          "2972:     } else if (sy == floorf(sy2)) {",
          "2973:      yportion = sy2 - floorf(sy2);",
          "2977:     sx1 = ((float)(x - dstX)) * (float) srcW / dstW;",
          "2978:     sx2 = ((float)(x + 1 - dstX)) * (float) srcW / dstW;",
          "2981:      float xportion;",
          "2982:      float pcontribution;",
          "2984:      if (floorf(sx) == floorf(sx1)) {",
          "2985:       xportion = 1.0 - (sx - floorf(sx));",
          "2989:       sx = floorf(sx);",
          "2990:      } else if (sx == floorf(sx2)) {",
          "2991:       xportion = sx2 - floorf(sx2);",
          "2996:      p = gdImageGetTrueColorPixel(src, (int) sx + srcX, (int) sy + srcY);",
          "2998:      alpha_factor = ((gdAlphaMax - gdTrueColorGetAlpha(p))) * pcontribution;",
          "2999:      red += gdTrueColorGetRed (p) * alpha_factor;",
          "3000:      green += gdTrueColorGetGreen (p) * alpha_factor;",
          "3001:      blue += gdTrueColorGetBlue (p) * alpha_factor;",
          "3003:      alpha_sum += alpha_factor;",
          "3004:      contrib_sum += pcontribution;",
          "3007:     }",
          "3008:     while (sx < sx2);",
          "3009:     sy += 1.0f;",
          "3010:    }",
          "3011:    while (sy < sy2);",
          "3019:    if ( alpha_sum != 0.0) {",
          "3020:     if( contrib_sum != 0.0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3032:    if (green > 255.0) {",
          "3033:     green = 255.0;",
          "3034:    }",
          "3036:     blue = 255.0;",
          "3037:    }",
          "3038:    if (alpha > gdAlphaMax) {",
          "3039:     alpha = gdAlphaMax;",
          "3040:    }",
          "3046:   }",
          "3047:  }",
          "3048: }",
          "",
          "[Removed Lines]",
          "3035:    if (blue > 255.0) {",
          "3041:    gdImageSetPixel (dst,",
          "3042:                     x, y,",
          "3043:                     gdTrueColorAlpha ((int) red,",
          "3044:                                       (int) green,",
          "3045:                                       (int) blue, (int) alpha));",
          "",
          "[Added Lines]",
          "3034:    if (blue > 255.0f) {",
          "3040:    gdImageSetPixel(dst, x, y, gdTrueColorAlpha ((int) red, (int) green, (int) blue, (int) alpha));",
          "",
          "---------------"
        ],
        "src/gd_interpolation.c||src/gd_interpolation.c": [
          "File: src/gd_interpolation.c -> src/gd_interpolation.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "829: {",
          "830:  unsigned int u = 0;",
          "831:  LineContribType *res;",
          "833:  res = (LineContribType *) gdMalloc(sizeof(LineContribType));",
          "834:  if (!res) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "832:  int overflow_error = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "836:  }",
          "837:  res->WindowSize = windows_size;",
          "838:  res->LineLength = line_length;",
          "839:  res->ContribRow = (ContributionType *) gdMalloc(line_length * sizeof(ContributionType));",
          "841:  for (u = 0 ; u < line_length ; u++) {",
          "843:  }",
          "844:  return res;",
          "845: }",
          "",
          "[Removed Lines]",
          "842:   res->ContribRow[u].Weights = (double *) gdMalloc(windows_size * sizeof(double));",
          "",
          "[Added Lines]",
          "840:  if (overflow2(line_length, sizeof(ContributionType))) {",
          "841:   return NULL;",
          "842:  }",
          "844:  if (res->ContribRow == NULL) {",
          "845:   gdFree(res);",
          "846:   return NULL;",
          "847:  }",
          "849:   if (overflow2(windows_size, sizeof(double))) {",
          "850:    overflow_error = 1;",
          "851:   } else {",
          "852:    res->ContribRow[u].Weights = (double *) gdMalloc(windows_size * sizeof(double));",
          "853:   }",
          "854:   if (overflow_error == 1 || res->ContribRow[u].Weights == NULL) {",
          "855:    u--;",
          "856:    while (u >= 0) {",
          "857:     gdFree(res->ContribRow[u].Weights);",
          "858:     u--;",
          "859:    }",
          "860:    return NULL;",
          "861:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "873:  windows_size = 2 * (int)ceil(width_d) + 1;",
          "874:  res = _gdContributionsAlloc(line_size, windows_size);",
          "876:  for (u = 0; u < line_size; u++) {",
          "877:   const double dCenter = (double)u / scale_d;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "894:  if (res == NULL) {",
          "895:   return NULL;",
          "896:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "990:     const unsigned int src_height = src->sy;",
          "991:  gdImagePtr tmp_im = NULL;",
          "992:  gdImagePtr dst = NULL;",
          "995:     if (src_width == new_width && src_height == new_height) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1013:  int scale_pass_res;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1011:         }",
          "1012:         gdImageSetInterpolationMethod(tmp_im, src->interpolation_id);",
          "",
          "[Removed Lines]",
          "1014:         _gdScalePass(src, src_width, tmp_im, new_width, src_height, HORIZONTAL);",
          "",
          "[Added Lines]",
          "1035:   scale_pass_res = _gdScalePass(src, src_width, tmp_im, new_width, src_height, HORIZONTAL);",
          "1036:   if (scale_pass_res != 1) {",
          "1037:    gdImageDestroy(tmp_im);",
          "1038:    return NULL;",
          "1039:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1024:  dst = gdImageCreateTrueColor(new_width, new_height);",
          "1025:  if (dst != NULL) {",
          "1026:         gdImageSetInterpolationMethod(dst, src->interpolation_id);",
          "1031:         gdImageDestroy(tmp_im);",
          "",
          "[Removed Lines]",
          "1027:         _gdScalePass(tmp_im, src_height, dst, new_height, new_width, VERTICAL);",
          "1030:     if (src != tmp_im) {",
          "",
          "[Added Lines]",
          "1052:         scale_pass_res = _gdScalePass(tmp_im, src_height, dst, new_height, new_width, VERTICAL);",
          "1053:   if (scale_pass_res != 1) {",
          "1054:    gdImageDestroy(dst);",
          "1055:    if (src != tmp_im && tmp_im != NULL) {",
          "1056:     gdImageDestroy(tmp_im);",
          "1057:    }",
          "1058:    return NULL;",
          "1059:     }",
          "1063:  if (src != tmp_im && tmp_im != NULL) {",
          "",
          "---------------"
        ],
        "tests/gdimagescale/Makemodule.am||tests/gdimagescale/Makemodule.am": [
          "File: tests/gdimagescale/Makemodule.am -> tests/gdimagescale/Makemodule.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: libgd_test_programs += \\",
          "5: EXTRA_DIST += \\",
          "6:  gdimagescale/CMakeLists.txt",
          "",
          "[Removed Lines]",
          "3:  gdimagescale/github_bug_00218",
          "",
          "[Added Lines]",
          "3:  gdimagescale/github_bug_00218 \\",
          "4:  gdimagescale/bug_overflow_large_new_size",
          "",
          "---------------"
        ],
        "tests/gdimagescale/bug_overflow_large_new_size.c||tests/gdimagescale/bug_overflow_large_new_size.c": [
          "File: tests/gdimagescale/bug_overflow_large_new_size.c -> tests/gdimagescale/bug_overflow_large_new_size.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <stdio.h>",
          "2: #include <stdlib.h>",
          "3: #include \"gd.h\"",
          "4: #include <math.h>",
          "6: #include \"gdtest.h\"",
          "8: int main()",
          "9: {",
          "10:  gdImagePtr im, im2;",
          "12:  im = gdImageCreate(1,1);",
          "13:  if (im == NULL) {",
          "14:   printf(\"gdImageCreate failed\\n\");",
          "15:   return 1;",
          "16:  }",
          "17:  gdImageSetInterpolationMethod(im, GD_BELL);",
          "20:     or fails (overflow check or alloc fails.",
          "22:  im2 = gdImageScale(im,0x15555556, 1);",
          "23:  if (im2 == NULL) {",
          "24:   printf(\"gdImageScale failed, expected (out of memory or overflow validation\\n\");",
          "25:   return 0;",
          "26:  }",
          "27:  gdImageDestroy(im);",
          "28:  gdImageDestroy(im2);",
          "30:  return 0;",
          "31: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff9113c80a32205d45205d3ea30965b25480e0fb",
      "candidate_info": {
        "commit_hash": "ff9113c80a32205d45205d3ea30965b25480e0fb",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/ff9113c80a32205d45205d3ea30965b25480e0fb",
        "files": [
          "src/gd_interpolation.c"
        ],
        "message": "fix possible OOB or OOM in gdImageScale, reported by Secunia (CVE 2016-6207)",
        "before_after_code_files": [
          "src/gd_interpolation.c||src/gd_interpolation.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gd_interpolation.c||src/gd_interpolation.c"
          ],
          "candidate": [
            "src/gd_interpolation.c||src/gd_interpolation.c"
          ]
        }
      },
      "candidate_diff": {
        "src/gd_interpolation.c||src/gd_interpolation.c": [
          "File: src/gd_interpolation.c -> src/gd_interpolation.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "853:    res->ContribRow[u].Weights = (double *) gdMalloc(windows_size * sizeof(double));",
          "854:   }",
          "855:   if (overflow_error == 1 || res->ContribRow[u].Weights == NULL) {",
          "856:    u--;",
          "860:    }",
          "861:    return NULL;",
          "862:   }",
          "863:  }",
          "",
          "[Removed Lines]",
          "857:    while (u >= 0) {",
          "858:     gdFree(res->ContribRow[u].Weights);",
          "859:     u--;",
          "",
          "[Added Lines]",
          "856:    unsigned int i;",
          "858:    for (i=0;i<=u;i++) {",
          "859:     gdFree(res->ContribRow[i].Weights);",
          "861:    gdFree(res);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "017a298b659bcb7349ad10bea278df14e8b1ef97",
      "candidate_info": {
        "commit_hash": "017a298b659bcb7349ad10bea278df14e8b1ef97",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/017a298b659bcb7349ad10bea278df14e8b1ef97",
        "files": [
          "src/gd_interpolation.c"
        ],
        "message": "Fix potential unsigned underflow\n\nNo need to decrease `u`, so we don't do it. While we're at it, we also factor\nout the overflow check of the loop, what improves performance and readability.\n\nThis issue has been reported by Stefan Esser to security@libgd.org.",
        "before_after_code_files": [
          "src/gd_interpolation.c||src/gd_interpolation.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/gd_interpolation.c||src/gd_interpolation.c"
          ],
          "candidate": [
            "src/gd_interpolation.c||src/gd_interpolation.c"
          ]
        }
      },
      "candidate_diff": {
        "src/gd_interpolation.c||src/gd_interpolation.c": [
          "File: src/gd_interpolation.c -> src/gd_interpolation.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "829: {",
          "830:  unsigned int u = 0;",
          "831:  LineContribType *res;",
          "834:  res = (LineContribType *) gdMalloc(sizeof(LineContribType));",
          "835:  if (!res) {",
          "836:   return NULL;",
          "",
          "[Removed Lines]",
          "832:  int overflow_error = 0;",
          "",
          "[Added Lines]",
          "832:  size_t weights_size;",
          "834:  if (overflow2(windows_size, sizeof(double))) {",
          "835:   return NULL;",
          "836:  } else {",
          "837:   weights_size = windows_size * sizeof(double);",
          "838:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "847:   return NULL;",
          "848:  }",
          "849:  for (u = 0 ; u < line_length ; u++) {",
          "856:    unsigned int i;",
          "859:     gdFree(res->ContribRow[i].Weights);",
          "860:    }",
          "861:    gdFree(res->ContribRow);",
          "",
          "[Removed Lines]",
          "850:   if (overflow2(windows_size, sizeof(double))) {",
          "851:    overflow_error = 1;",
          "852:   } else {",
          "853:    res->ContribRow[u].Weights = (double *) gdMalloc(windows_size * sizeof(double));",
          "854:   }",
          "855:   if (overflow_error == 1 || res->ContribRow[u].Weights == NULL) {",
          "857:    u--;",
          "858:    for (i=0;i<=u;i++) {",
          "",
          "[Added Lines]",
          "855:   res->ContribRow[u].Weights = (double *) gdMalloc(weights_size);",
          "856:   if (res->ContribRow[u].Weights == NULL) {",
          "859:    for (i=0;i<u;i++) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}