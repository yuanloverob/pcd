{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c49d43a787ae451df9e5483f6cef5f41aa95ed84",
      "candidate_info": {
        "commit_hash": "c49d43a787ae451df9e5483f6cef5f41aa95ed84",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c49d43a787ae451df9e5483f6cef5f41aa95ed84",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the fts3DecodeIntArray() function so that it will not read off the end of the buffer it is handed.  Any unread integers are set to zero.\n\nFossilOrigin-Name: 666cf8f6b39ae1f72e82b45e9cacba23caf61370ca0c695b3b14452accbb1a0d",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3329: ){",
          "3337:   }",
          "3338: }",
          "",
          "[Removed Lines]",
          "3330:   int i, j;",
          "3331:   UNUSED_PARAMETER(nBuf);",
          "3332:   for(i=j=0; i<N; i++){",
          "3333:     sqlite3_int64 x;",
          "3334:     j += sqlite3Fts3GetVarint(&zBuf[j], &x);",
          "3335:     assert(j<=nBuf);",
          "3336:     a[i] = (u32)(x & 0xffffffff);",
          "",
          "[Added Lines]",
          "3330:   int i = 0;",
          "3331:   if( nBuf && (zBuf[nBuf-1]&0x80)==0 ){",
          "3332:     int j;",
          "3333:     for(i=j=0; i<N && j<nBuf; i++){",
          "3334:       sqlite3_int64 x;",
          "3335:       j += sqlite3Fts3GetVarint(&zBuf[j], &x);",
          "3336:       a[i] = (u32)(x & 0xffffffff);",
          "3337:     }",
          "3339:   while( i<N ) a[i++] = 0;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 931278b257b12ac14fc8fbc82c6dc88ce4ac4b8e0d668543e68f0289d825daa1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73f940c89eba2daede2e4fba4ee84b2f1922cb52",
      "candidate_info": {
        "commit_hash": "73f940c89eba2daede2e4fba4ee84b2f1922cb52",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/73f940c89eba2daede2e4fba4ee84b2f1922cb52",
        "files": [
          "ext/fts3/fts3_snippet.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix additional compiler warnings introduced by the previous check-in and found by MSVC.\n\nFossilOrigin-Name: 6fc0deffa4eed902fd13eefe6d2765f338f3dadc5b29f7cae5064e135417746b",
        "before_after_code_files": [
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:   MatchinfoBuffer *pRet;",
          "133:   sqlite3_int64 nByte = sizeof(u32) * (2*(sqlite3_int64)nElem + 1)",
          "134:                            + sizeof(MatchinfoBuffer);",
          "",
          "[Removed Lines]",
          "131: static MatchinfoBuffer *fts3MIBufferNew(int nElem, const char *zMatchinfo){",
          "",
          "[Added Lines]",
          "131: static MatchinfoBuffer *fts3MIBufferNew(size_t nElem, const char *zMatchinfo){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:   if( pRet ){",
          "139:     memset(pRet, 0, nByte);",
          "140:     pRet->aMatchinfo[0] = (u8*)(&pRet->aMatchinfo[1]) - (u8*)pRet;",
          "143:     pRet->zMatchinfo = ((char*)pRet) + nByte;",
          "144:     memcpy(pRet->zMatchinfo, zMatchinfo, nStr+1);",
          "145:     pRet->aRef[0] = 1;",
          "",
          "[Removed Lines]",
          "141:     pRet->aMatchinfo[1+nElem] = pRet->aMatchinfo[0] + sizeof(u32)*(nElem+1);",
          "142:     pRet->nElem = nElem;",
          "",
          "[Added Lines]",
          "141:     pRet->aMatchinfo[1+nElem] = pRet->aMatchinfo[0]",
          "142:                                       + sizeof(u32)*((int)nElem+1);",
          "143:     pRet->nElem = (int)nElem;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c28c973ad6debd63f13e5d4d3da036f680baaec9d863eda039f2747db9f1cfd5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "418454c63fe1d6f3083542110d17cf561b8f369f",
      "candidate_info": {
        "commit_hash": "418454c63fe1d6f3083542110d17cf561b8f369f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/418454c63fe1d6f3083542110d17cf561b8f369f",
        "files": [
          "ext/session/sessionwor.test",
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "For SQLITE_ENABLE_PREUPDATE_HOOK builds, disable the optimization for a REPLACE command on a WITHOUT ROWID table with no indexes, triggers or foreign key constraints that causes SQLite to clobber any existing row without separately checking for it. This optimization causes SQLite to omit the expected pre-update-hook callbacks.\n\nFossilOrigin-Name: 6281ef974c0ac7a7133c9e1e04c09fdbd627c019c6ff3227293548caf8283864",
        "before_after_code_files": [
          "ext/session/sessionwor.test||ext/session/sessionwor.test",
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/session/sessionwor.test||ext/session/sessionwor.test": [
          "File: ext/session/sessionwor.test -> ext/session/sessionwor.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   sqlite3 db2 test.db2",
          "31: }",
          "40: } {",
          "48: }",
          "52: } {",
          "54: }",
          "56: finish_test",
          "",
          "[Removed Lines]",
          "34: do_execsql_test 1.0 {",
          "35:   CREATE TABLE t1(a PRIMARY KEY, b) WITHOUT ROWID;",
          "36: }",
          "38: do_iterator_test 1.1 t1 {",
          "39:   INSERT INTO t1 VALUES('one', 'two');",
          "41:   {INSERT t1 0 X. {} {t one t two}}",
          "42: }",
          "44: do_iterator_test 1.2 t1 {",
          "45:   UPDATE t1 SET b='three'",
          "46: } {",
          "47:   {UPDATE t1 0 X. {t one t two} {{} {} t three}}",
          "50: do_iterator_test 1.3 t1 {",
          "51:   DELETE FROM t1;",
          "53:   {DELETE t1 0 X. {t one t three} {}}",
          "",
          "[Added Lines]",
          "33: foreach {tn wo} {",
          "34:   1 \"\"",
          "35:   2 \"WITHOUT ROWID\"",
          "37:   reset_db",
          "39:   do_execsql_test 1.$tn.0 \"CREATE TABLE t1(a PRIMARY KEY, b) $wo ;\"",
          "41:   do_iterator_test 1.$tn.1 t1 {",
          "42:     INSERT INTO t1 VALUES('one', 'two');",
          "43:   } {",
          "44:     {INSERT t1 0 X. {} {t one t two}}",
          "45:   }",
          "47:   do_iterator_test 1.$tn.2 t1 {",
          "48:     UPDATE t1 SET b='three'",
          "49:   } {",
          "50:     {UPDATE t1 0 X. {t one t two} {{} {} t three}}",
          "51:   }",
          "53:   do_iterator_test 1.$tn.3 t1 {",
          "54:     REPLACE INTO t1 VALUES('one', 'four');",
          "55:   } {",
          "56:     {UPDATE t1 0 X. {t one t three} {{} {} t four}}",
          "57:   }",
          "59:   do_iterator_test 1.$tn.4 t1 {",
          "60:     DELETE FROM t1;",
          "61:   } {",
          "62:     {DELETE t1 0 X. {t one t four} {}}",
          "63:   }",
          "66: foreach {tn wo} {",
          "67:   1 \"\"",
          "68:   2 \"WITHOUT ROWID\"",
          "70:   reset_db",
          "72:   do_execsql_test 2.$tn.0 \"CREATE TABLE t1(a INTEGER PRIMARY KEY, b) $wo ;\"",
          "74:   do_iterator_test 1.1 t1 {",
          "75:     INSERT INTO t1 VALUES(1, 'two');",
          "76:   } {",
          "77:     {INSERT t1 0 X. {} {i 1 t two}}",
          "78:   }",
          "80:   do_iterator_test 2.$tn.2 t1 {",
          "81:     UPDATE t1 SET b='three'",
          "82:   } {",
          "83:     {UPDATE t1 0 X. {i 1 t two} {{} {} t three}}",
          "84:   }",
          "86:   do_iterator_test 2.$tn.3 t1 {",
          "87:     REPLACE INTO t1 VALUES(1, 'four');",
          "88:   } {",
          "89:     {UPDATE t1 0 X. {i 1 t three} {{} {} t four}}",
          "90:   }",
          "92:   do_iterator_test 2.$tn.4 t1 {",
          "93:     DELETE FROM t1;",
          "94:   } {",
          "95:     {DELETE t1 0 X. {i 1 t four} {}}",
          "96:   }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6064584d578f0ac7aba3f67912a5d9eb1a3c6001469f6b9becbe68871131f887",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1719: #ifndef SQLITE_ENABLE_PREUPDATE_HOOK",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e60261cfbc34cdad2625241ba6e5bedfb2e6716",
      "candidate_info": {
        "commit_hash": "1e60261cfbc34cdad2625241ba6e5bedfb2e6716",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1e60261cfbc34cdad2625241ba6e5bedfb2e6716",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/altertab3.test"
        ],
        "message": "Fix a problem with renaming tables when the schema contains an invocation of a currently unregistered aggregate with a FILTER clause.\n\nFossilOrigin-Name: bd37ce3fb8dee8d538f6afc0bfc13cdc3ebdd504e6461f0130c6ecc8af585f68",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2bf5a4c16457562dc942bcc6ec06d9b4e795ef3ea8e31550e18857bbebd08a76",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "892:         }",
          "893:       }",
          "894: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "896:         is_agg = 1;",
          "897:       }",
          "898: #endif",
          "",
          "[Removed Lines]",
          "895:       else if( pWin ){",
          "",
          "[Added Lines]",
          "895:       else if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "331:   ALTER TABLE t1 RENAME TO t1x;",
          "332: }",
          "334: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334: #-------------------------------------------------------------------------",
          "335: reset_db",
          "336: do_execsql_test 14.1 {",
          "337:   CREATE TABLE t1(a);",
          "338:   CREATE TABLE t2(b);",
          "339:   CREATE TRIGGER AFTER INSERT ON t1 BEGIN",
          "340:     SELECT sum() FILTER (WHERE (SELECT sum() FILTER (WHERE 0)) AND a);",
          "341:   END;",
          "342: }",
          "344: do_catchsql_test 14.2 {",
          "345:   ALTER TABLE t1 RENAME TO t1x;",
          "346: } {1 {error in trigger AFTER: no such column: a}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea38f4f4ccd5354fd47f5419c84ddef4d2f0c2c6",
      "candidate_info": {
        "commit_hash": "ea38f4f4ccd5354fd47f5419c84ddef4d2f0c2c6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ea38f4f4ccd5354fd47f5419c84ddef4d2f0c2c6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix a double-quoted string literal used in the \".schema\" command of the CLI.\n\nFossilOrigin-Name: fcd937d9786a82ef4147e657d54ea0beb6ac87e2eb1677186b318493d473077b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ee293e5aeac0b05a8b809095610fd8b4fdaf8e68cd368de90ec0d45e3582ffe5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "8388:         zDiv = \" UNION ALL \";",
          "8389:         appendText(&sSelect, \"SELECT shell_add_schema(sql,\", 0);",
          "8390:         if( sqlite3_stricmp(zDb, \"main\")!=0 ){",
          "8392:         }else{",
          "8393:           appendText(&sSelect, \"NULL\", 0);",
          "8394:         }",
          "",
          "[Removed Lines]",
          "8391:           appendText(&sSelect, zDb, '\"');",
          "",
          "[Added Lines]",
          "8391:           appendText(&sSelect, zDb, '\\'');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8397:         appendText(&sSelect, \" AS snum, \", 0);",
          "8398:         appendText(&sSelect, zDb, '\\'');",
          "8399:         appendText(&sSelect, \" AS sname FROM \", 0);",
          "8401:         appendText(&sSelect, \".sqlite_master\", 0);",
          "8402:       }",
          "8403:       sqlite3_finalize(pStmt);",
          "",
          "[Removed Lines]",
          "8400:         appendText(&sSelect, zDb, '\"');",
          "",
          "[Added Lines]",
          "8400:         appendText(&sSelect, zDb, quoteChar(zDb));",
          "",
          "---------------"
        ]
      }
    }
  ]
}