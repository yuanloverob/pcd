{
  "cve_id": "CVE-2021-36222",
  "cve_desc": "ec_verify in kdc/kdc_preauth_ec.c in the Key Distribution Center (KDC) in MIT Kerberos 5 (aka krb5) before 1.18.4 and 1.19.x before 1.19.2 allows remote attackers to cause a NULL pointer dereference and daemon crash. This occurs because a return value is not properly managed in a certain situation.",
  "repo": "krb5/krb5",
  "patch_hash": "fc98f520caefff2e5ee9a0026fdf5109944b3562",
  "patch_info": {
    "commit_hash": "fc98f520caefff2e5ee9a0026fdf5109944b3562",
    "repo": "krb5/krb5",
    "commit_url": "https://github.com/krb5/krb5/commit/fc98f520caefff2e5ee9a0026fdf5109944b3562",
    "files": [
      "src/kdc/kdc_preauth_ec.c",
      "src/tests/Makefile.in",
      "src/tests/t_cve-2021-36222.py"
    ],
    "message": "Fix KDC null deref on bad encrypted challenge\n\nThe function ec_verify() in src/kdc/kdc_preauth_ec.c contains a check\nto avoid further processing if the armor key is NULL.  However, this\ncheck is bypassed by a call to k5memdup0() which overwrites retval\nwith 0 if the allocation succeeds.  If the armor key is NULL, a call\nto krb5_c_fx_cf2_simple() will then dereference it, resulting in a\ncrash.  Add a check before the k5memdup0() call to avoid overwriting\nretval.\n\nCVE-2021-36222:\n\nIn MIT krb5 releases 1.16 and later, an unauthenticated attacker can\ncause a null dereference in the KDC by sending a request containing a\nPA-ENCRYPTED-CHALLENGE padata element without using FAST.\n\n[ghudson@mit.edu: trimmed patch; added test case; edited commit\nmessage]\n\nticket: 9007 (new)\ntags: pullup\ntarget_version: 1.19-next\ntarget_version: 1.18-next",
    "before_after_code_files": [
      "src/kdc/kdc_preauth_ec.c||src/kdc/kdc_preauth_ec.c",
      "src/tests/Makefile.in||src/tests/Makefile.in",
      "src/tests/t_cve-2021-36222.py||src/tests/t_cve-2021-36222.py"
    ]
  },
  "patch_diff": {
    "src/kdc/kdc_preauth_ec.c||src/kdc/kdc_preauth_ec.c": [
      "File: src/kdc/kdc_preauth_ec.c -> src/kdc/kdc_preauth_ec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     }",
      "91:     if (realmstr != NULL)",
      "92:         retval = profile_get_string(context->profile, KRB5_CONF_REALMS,",
      "93:                                     realmstr,",
      "",
      "[Removed Lines]",
      "90:     realmstr = k5memdup0(realm.data, realm.length, &retval);",
      "",
      "[Added Lines]",
      "90:     if (retval == 0)",
      "91:         realmstr = k5memdup0(realm.data, realm.length, &retval);",
      "",
      "---------------"
    ],
    "src/tests/Makefile.in||src/tests/Makefile.in": [
      "File: src/tests/Makefile.in -> src/tests/Makefile.in",
      "--- Hunk 1 ---",
      "[Context before]",
      "166:  $(RUNPYTEST) $(srcdir)/t_cve-2012-1015.py $(PYTESTFLAGS)",
      "167:  $(RUNPYTEST) $(srcdir)/t_cve-2013-1416.py $(PYTESTFLAGS)",
      "168:  $(RUNPYTEST) $(srcdir)/t_cve-2013-1417.py $(PYTESTFLAGS)",
      "169:  $(RM) au.log",
      "170:  $(RUNPYTEST) $(srcdir)/t_audit.py $(PYTESTFLAGS)",
      "171:  $(RUNPYTEST) $(srcdir)/jsonwalker.py -d $(srcdir)/au_dict.json \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "169:  $(RUNPYTEST) $(srcdir)/t_cve-2021-36222.py $(PYTESTFLAGS)",
      "",
      "---------------"
    ],
    "src/tests/t_cve-2021-36222.py||src/tests/t_cve-2021-36222.py": [
      "File: src/tests/t_cve-2021-36222.py -> src/tests/t_cve-2021-36222.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import socket",
      "2: from k5test import *",
      "4: realm = K5Realm()",
      "6: # CVE-2021-36222 KDC null dereference on encrypted challenge preauth",
      "7: # without FAST",
      "9: s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)",
      "10: a = (hostname, realm.portbase)",
      "12: m = ('6A81A0' '30819D'          # [APPLICATION 10] SEQUENCE",
      "13:      'A103' '0201' '05'         #  [1] pvno = 5",
      "14:      'A203' '0201' '0A'         #  [2] msg-type = 10",
      "15:      'A30E' '300C'              #  [3] padata = SEQUENCE OF",
      "16:      '300A'                     #   SEQUENCE",
      "17:      'A104' '0202' '008A'       #    [1] padata-type = PA-ENCRYPTED-CHALLENGE",
      "18:      'A202' '0400'              #    [2] padata-value = \"\"",
      "19:      'A48180' '307E'            #  [4] req-body = SEQUENCE",
      "20:      'A007' '0305' '0000000000' #   [0] kdc-options = 0",
      "21:      'A120' '301E'              #   [1] cname = SEQUENCE",
      "22:      'A003' '0201' '01'         #    [0] name-type = NT-PRINCIPAL",
      "23:      'A117' '3015'              #    [1] name-string = SEQUENCE-OF",
      "24:      '1B06' '6B7262746774'      #     krbtgt",
      "25:      '1B0B' '4B5242544553542E434F4D'",
      "26:                                 #     KRBTEST.COM",
      "27:      'A20D' '1B0B' '4B5242544553542E434F4D'",
      "28:                                 #   [2] realm = KRBTEST.COM",
      "29:      'A320' '301E'              #   [3] sname = SEQUENCE",
      "30:      'A003' '0201' '01'         #    [0] name-type = NT-PRINCIPAL",
      "31:      'A117' '3015'              #    [1] name-string = SEQUENCE-OF",
      "32:      '1B06' '6B7262746774'      #     krbtgt",
      "33:      '1B0B' '4B5242544553542E434F4D'",
      "34:                                 #     KRBTEST.COM",
      "35:      'A511' '180F' '31393934303631303036303331375A'",
      "36:                                 #   [5] till = 19940610060317Z",
      "37:      'A703' '0201' '00'         #   [7] nonce = 0",
      "38:      'A808' '3006'              #   [8] etype = SEQUENCE OF",
      "39:      '020112' '020111')         #    aes256-cts aes128-cts",
      "41: s.sendto(bytes.fromhex(m), a)",
      "43: # Make sure kinit still works.",
      "44: realm.kinit(realm.user_princ, password('user'))",
      "46: success('CVE-2021-36222 regression test')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "83f701ee212122471f42bdfe3195d5c1c2cdb09d",
      "candidate_info": {
        "commit_hash": "83f701ee212122471f42bdfe3195d5c1c2cdb09d",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/83f701ee212122471f42bdfe3195d5c1c2cdb09d",
        "files": [
          "src/kdc/kdc_preauth_ec.c",
          "src/tests/Makefile.in",
          "src/tests/t_cve-2021-36222.py"
        ],
        "message": "Fix KDC null deref on bad encrypted challenge\n\nThe function ec_verify() in src/kdc/kdc_preauth_ec.c contains a check\nto avoid further processing if the armor key is NULL.  However, this\ncheck is bypassed by a call to k5memdup0() which overwrites retval\nwith 0 if the allocation succeeds.  If the armor key is NULL, a call\nto krb5_c_fx_cf2_simple() will then dereference it, resulting in a\ncrash.  Add a check before the k5memdup0() call to avoid overwriting\nretval.\n\nCVE-2021-36222:\n\nIn MIT krb5 releases 1.16 and later, an unauthenticated attacker can\ncause a null dereference in the KDC by sending a request containing a\nPA-ENCRYPTED-CHALLENGE padata element without using FAST.\n\n[ghudson@mit.edu: trimmed patch; added test case; edited commit\nmessage]\n\n(cherry picked from commit fc98f520caefff2e5ee9a0026fdf5109944b3562)\n\nticket: 9007\nversion_fixed: 1.19.2",
        "before_after_code_files": [
          "src/kdc/kdc_preauth_ec.c||src/kdc/kdc_preauth_ec.c",
          "src/tests/Makefile.in||src/tests/Makefile.in",
          "src/tests/t_cve-2021-36222.py||src/tests/t_cve-2021-36222.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/kdc/kdc_preauth_ec.c||src/kdc/kdc_preauth_ec.c",
            "src/tests/Makefile.in||src/tests/Makefile.in",
            "src/tests/t_cve-2021-36222.py||src/tests/t_cve-2021-36222.py"
          ],
          "candidate": [
            "src/kdc/kdc_preauth_ec.c||src/kdc/kdc_preauth_ec.c",
            "src/tests/Makefile.in||src/tests/Makefile.in",
            "src/tests/t_cve-2021-36222.py||src/tests/t_cve-2021-36222.py"
          ]
        }
      },
      "candidate_diff": {
        "src/kdc/kdc_preauth_ec.c||src/kdc/kdc_preauth_ec.c": [
          "File: src/kdc/kdc_preauth_ec.c -> src/kdc/kdc_preauth_ec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:     }",
          "91:     if (realmstr != NULL)",
          "92:         retval = profile_get_string(context->profile, KRB5_CONF_REALMS,",
          "93:                                     realmstr,",
          "",
          "[Removed Lines]",
          "90:     realmstr = k5memdup0(realm.data, realm.length, &retval);",
          "",
          "[Added Lines]",
          "90:     if (retval == 0)",
          "91:         realmstr = k5memdup0(realm.data, realm.length, &retval);",
          "",
          "---------------"
        ],
        "src/tests/Makefile.in||src/tests/Makefile.in": [
          "File: src/tests/Makefile.in -> src/tests/Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:  $(RUNPYTEST) $(srcdir)/t_cve-2012-1015.py $(PYTESTFLAGS)",
          "159:  $(RUNPYTEST) $(srcdir)/t_cve-2013-1416.py $(PYTESTFLAGS)",
          "160:  $(RUNPYTEST) $(srcdir)/t_cve-2013-1417.py $(PYTESTFLAGS)",
          "161:  $(RM) au.log",
          "162:  $(RUNPYTEST) $(srcdir)/t_audit.py $(PYTESTFLAGS)",
          "163:  $(RUNPYTEST) $(srcdir)/jsonwalker.py -d $(srcdir)/au_dict.json \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:  $(RUNPYTEST) $(srcdir)/t_cve-2021-36222.py $(PYTESTFLAGS)",
          "",
          "---------------"
        ],
        "src/tests/t_cve-2021-36222.py||src/tests/t_cve-2021-36222.py": [
          "File: src/tests/t_cve-2021-36222.py -> src/tests/t_cve-2021-36222.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import socket",
          "2: from k5test import *",
          "4: realm = K5Realm()",
          "6: # CVE-2021-36222 KDC null dereference on encrypted challenge preauth",
          "7: # without FAST",
          "9: s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)",
          "10: a = (hostname, realm.portbase)",
          "12: m = ('6A81A0' '30819D'          # [APPLICATION 10] SEQUENCE",
          "13:      'A103' '0201' '05'         #  [1] pvno = 5",
          "14:      'A203' '0201' '0A'         #  [2] msg-type = 10",
          "15:      'A30E' '300C'              #  [3] padata = SEQUENCE OF",
          "16:      '300A'                     #   SEQUENCE",
          "17:      'A104' '0202' '008A'       #    [1] padata-type = PA-ENCRYPTED-CHALLENGE",
          "18:      'A202' '0400'              #    [2] padata-value = \"\"",
          "19:      'A48180' '307E'            #  [4] req-body = SEQUENCE",
          "20:      'A007' '0305' '0000000000' #   [0] kdc-options = 0",
          "21:      'A120' '301E'              #   [1] cname = SEQUENCE",
          "22:      'A003' '0201' '01'         #    [0] name-type = NT-PRINCIPAL",
          "23:      'A117' '3015'              #    [1] name-string = SEQUENCE-OF",
          "24:      '1B06' '6B7262746774'      #     krbtgt",
          "25:      '1B0B' '4B5242544553542E434F4D'",
          "26:                                 #     KRBTEST.COM",
          "27:      'A20D' '1B0B' '4B5242544553542E434F4D'",
          "28:                                 #   [2] realm = KRBTEST.COM",
          "29:      'A320' '301E'              #   [3] sname = SEQUENCE",
          "30:      'A003' '0201' '01'         #    [0] name-type = NT-PRINCIPAL",
          "31:      'A117' '3015'              #    [1] name-string = SEQUENCE-OF",
          "32:      '1B06' '6B7262746774'      #     krbtgt",
          "33:      '1B0B' '4B5242544553542E434F4D'",
          "34:                                 #     KRBTEST.COM",
          "35:      'A511' '180F' '31393934303631303036303331375A'",
          "36:                                 #   [5] till = 19940610060317Z",
          "37:      'A703' '0201' '00'         #   [7] nonce = 0",
          "38:      'A808' '3006'              #   [8] etype = SEQUENCE OF",
          "39:      '020112' '020111')         #    aes256-cts aes128-cts",
          "41: s.sendto(bytes.fromhex(m), a)",
          "43: # Make sure kinit still works.",
          "44: realm.kinit(realm.user_princ, password('user'))",
          "46: success('CVE-2021-36222 regression test')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c4a406095b3ea4a67ae5b8ea586cbe9abdbae76f",
      "candidate_info": {
        "commit_hash": "c4a406095b3ea4a67ae5b8ea586cbe9abdbae76f",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/c4a406095b3ea4a67ae5b8ea586cbe9abdbae76f",
        "files": [
          "src/kdc/kdc_preauth_ec.c",
          "src/tests/Makefile.in",
          "src/tests/t_cve-2021-36222.py"
        ],
        "message": "Fix KDC null deref on bad encrypted challenge\n\nThe function ec_verify() in src/kdc/kdc_preauth_ec.c contains a check\nto avoid further processing if the armor key is NULL.  However, this\ncheck is bypassed by a call to k5memdup0() which overwrites retval\nwith 0 if the allocation succeeds.  If the armor key is NULL, a call\nto krb5_c_fx_cf2_simple() will then dereference it, resulting in a\ncrash.  Add a check before the k5memdup0() call to avoid overwriting\nretval.\n\nCVE-2021-36222:\n\nIn MIT krb5 releases 1.16 and later, an unauthenticated attacker can\ncause a null dereference in the KDC by sending a request containing a\nPA-ENCRYPTED-CHALLENGE padata element without using FAST.\n\n[ghudson@mit.edu: trimmed patch; added test case; edited commit\nmessage]\n\n(cherry picked from commit fc98f520caefff2e5ee9a0026fdf5109944b3562)\n\nticket: 9007\nversion_fixed: 1.18.4",
        "before_after_code_files": [
          "src/kdc/kdc_preauth_ec.c||src/kdc/kdc_preauth_ec.c",
          "src/tests/Makefile.in||src/tests/Makefile.in",
          "src/tests/t_cve-2021-36222.py||src/tests/t_cve-2021-36222.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/kdc/kdc_preauth_ec.c||src/kdc/kdc_preauth_ec.c",
            "src/tests/Makefile.in||src/tests/Makefile.in",
            "src/tests/t_cve-2021-36222.py||src/tests/t_cve-2021-36222.py"
          ],
          "candidate": [
            "src/kdc/kdc_preauth_ec.c||src/kdc/kdc_preauth_ec.c",
            "src/tests/Makefile.in||src/tests/Makefile.in",
            "src/tests/t_cve-2021-36222.py||src/tests/t_cve-2021-36222.py"
          ]
        }
      },
      "candidate_diff": {
        "src/kdc/kdc_preauth_ec.c||src/kdc/kdc_preauth_ec.c": [
          "File: src/kdc/kdc_preauth_ec.c -> src/kdc/kdc_preauth_ec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:     }",
          "91:     if (realmstr != NULL)",
          "92:         retval = profile_get_string(context->profile, KRB5_CONF_REALMS,",
          "93:                                     realmstr,",
          "",
          "[Removed Lines]",
          "90:     realmstr = k5memdup0(realm.data, realm.length, &retval);",
          "",
          "[Added Lines]",
          "90:     if (retval == 0)",
          "91:         realmstr = k5memdup0(realm.data, realm.length, &retval);",
          "",
          "---------------"
        ],
        "src/tests/Makefile.in||src/tests/Makefile.in": [
          "File: src/tests/Makefile.in -> src/tests/Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:  $(RUNPYTEST) $(srcdir)/t_cve-2012-1015.py $(PYTESTFLAGS)",
          "159:  $(RUNPYTEST) $(srcdir)/t_cve-2013-1416.py $(PYTESTFLAGS)",
          "160:  $(RUNPYTEST) $(srcdir)/t_cve-2013-1417.py $(PYTESTFLAGS)",
          "161:  $(RM) au.log",
          "162:  $(RUNPYTEST) $(srcdir)/t_audit.py $(PYTESTFLAGS)",
          "163:  $(RUNPYTEST) $(srcdir)/jsonwalker.py -d $(srcdir)/au_dict.json \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:  $(RUNPYTEST) $(srcdir)/t_cve-2021-36222.py $(PYTESTFLAGS)",
          "",
          "---------------"
        ],
        "src/tests/t_cve-2021-36222.py||src/tests/t_cve-2021-36222.py": [
          "File: src/tests/t_cve-2021-36222.py -> src/tests/t_cve-2021-36222.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import socket",
          "2: from k5test import *",
          "4: realm = K5Realm()",
          "6: # CVE-2021-36222 KDC null dereference on encrypted challenge preauth",
          "7: # without FAST",
          "9: s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)",
          "10: a = (hostname, realm.portbase)",
          "12: m = ('6A81A0' '30819D'          # [APPLICATION 10] SEQUENCE",
          "13:      'A103' '0201' '05'         #  [1] pvno = 5",
          "14:      'A203' '0201' '0A'         #  [2] msg-type = 10",
          "15:      'A30E' '300C'              #  [3] padata = SEQUENCE OF",
          "16:      '300A'                     #   SEQUENCE",
          "17:      'A104' '0202' '008A'       #    [1] padata-type = PA-ENCRYPTED-CHALLENGE",
          "18:      'A202' '0400'              #    [2] padata-value = \"\"",
          "19:      'A48180' '307E'            #  [4] req-body = SEQUENCE",
          "20:      'A007' '0305' '0000000000' #   [0] kdc-options = 0",
          "21:      'A120' '301E'              #   [1] cname = SEQUENCE",
          "22:      'A003' '0201' '01'         #    [0] name-type = NT-PRINCIPAL",
          "23:      'A117' '3015'              #    [1] name-string = SEQUENCE-OF",
          "24:      '1B06' '6B7262746774'      #     krbtgt",
          "25:      '1B0B' '4B5242544553542E434F4D'",
          "26:                                 #     KRBTEST.COM",
          "27:      'A20D' '1B0B' '4B5242544553542E434F4D'",
          "28:                                 #   [2] realm = KRBTEST.COM",
          "29:      'A320' '301E'              #   [3] sname = SEQUENCE",
          "30:      'A003' '0201' '01'         #    [0] name-type = NT-PRINCIPAL",
          "31:      'A117' '3015'              #    [1] name-string = SEQUENCE-OF",
          "32:      '1B06' '6B7262746774'      #     krbtgt",
          "33:      '1B0B' '4B5242544553542E434F4D'",
          "34:                                 #     KRBTEST.COM",
          "35:      'A511' '180F' '31393934303631303036303331375A'",
          "36:                                 #   [5] till = 19940610060317Z",
          "37:      'A703' '0201' '00'         #   [7] nonce = 0",
          "38:      'A808' '3006'              #   [8] etype = SEQUENCE OF",
          "39:      '020112' '020111')         #    aes256-cts aes128-cts",
          "41: s.sendto(bytes.fromhex(m), a)",
          "43: # Make sure kinit still works.",
          "44: realm.kinit(realm.user_princ, password('user'))",
          "46: success('CVE-2021-36222 regression test')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "65612e5e2a373cf3545a87570e4cfaf7bd1682b7",
      "candidate_info": {
        "commit_hash": "65612e5e2a373cf3545a87570e4cfaf7bd1682b7",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/65612e5e2a373cf3545a87570e4cfaf7bd1682b7",
        "files": [
          "src/kdc/kdc_preauth_ec.c"
        ],
        "message": "Modernize kdc_preauth_ec.c\n\nReorganize ec_verify() and ec_return() to use cleanup labels instead\nof if-ladders.  Also use unconditional calls to free functions and\nchange a few variable names.",
        "before_after_code_files": [
          "src/kdc/kdc_preauth_ec.c||src/kdc/kdc_preauth_ec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/kdc/kdc_preauth_ec.c||src/kdc/kdc_preauth_ec.c"
          ],
          "candidate": [
            "src/kdc/kdc_preauth_ec.c||src/kdc/kdc_preauth_ec.c"
          ]
        }
      },
      "candidate_diff": {
        "src/kdc/kdc_preauth_ec.c||src/kdc/kdc_preauth_ec.c": [
          "File: src/kdc/kdc_preauth_ec.c -> src/kdc/kdc_preauth_ec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:           krb5_kdcpreauth_moddata moddata,",
          "56:           krb5_kdcpreauth_verify_respond_fn respond, void *arg)",
          "57: {",
          "59:     krb5_enc_data *enc = NULL;",
          "61:     krb5_keyblock *armor_key = cb->fast_armor(context, rock);",
          "62:     krb5_pa_enc_ts *ts = NULL;",
          "63:     krb5_keyblock *client_keys = NULL;",
          "",
          "[Removed Lines]",
          "58:     krb5_error_code retval = 0;",
          "60:     krb5_data scratch, plain;",
          "",
          "[Added Lines]",
          "58:     krb5_error_code ret;",
          "60:     krb5_data der_enc_ts = empty_data(), der_enc_data;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:     char *ai = NULL, *realmstr = NULL;",
          "69:     krb5_data realm = request->server->realm;",
          "73:     if (armor_key == NULL) {",
          "76:                   _(\"Encrypted Challenge used outside of FAST tunnel\"));",
          "77:     }",
          "87:     }",
          "123:     }",
          "142:     }",
          "143:     cb->free_keys(context, rock, client_keys);",
          "150:     free(realmstr);",
          "151:     free(ai);",
          "154: }",
          "156: static krb5_error_code",
          "",
          "[Removed Lines]",
          "71:     plain.data = NULL;",
          "74:         retval = ENOENT;",
          "75:         k5_setmsg(context, ENOENT,",
          "78:     scratch.data = (char *) data->contents;",
          "79:     scratch.length = data->length;",
          "80:     if (retval == 0)",
          "81:         retval = decode_krb5_enc_data(&scratch, &enc);",
          "82:     if (retval == 0) {",
          "83:         plain.data =  malloc(enc->ciphertext.length);",
          "84:         plain.length = enc->ciphertext.length;",
          "85:         if (plain.data == NULL)",
          "86:             retval = ENOMEM;",
          "90:     if (retval == 0)",
          "91:         realmstr = k5memdup0(realm.data, realm.length, &retval);",
          "92:     if (realmstr != NULL)",
          "93:         retval = profile_get_string(context->profile, KRB5_CONF_REALMS,",
          "94:                                     realmstr,",
          "95:                                     KRB5_CONF_ENCRYPTED_CHALLENGE_INDICATOR,",
          "96:                                     NULL, &ai);",
          "98:     if (retval == 0)",
          "99:         retval = cb->client_keys(context, rock, &client_keys);",
          "100:     if (retval == 0) {",
          "101:         for (i = 0; client_keys[i].enctype&& (retval == 0); i++ ) {",
          "102:             retval = krb5_c_fx_cf2_simple(context,",
          "103:                                           armor_key, \"clientchallengearmor\",",
          "104:                                           &client_keys[i], \"challengelongterm\",",
          "105:                                           &challenge_key);",
          "106:             if (retval == 0)",
          "107:                 retval  = krb5_c_decrypt(context, challenge_key,",
          "108:                                          KRB5_KEYUSAGE_ENC_CHALLENGE_CLIENT,",
          "109:                                          NULL, enc, &plain);",
          "110:             if (challenge_key)",
          "111:                 krb5_free_keyblock(context, challenge_key);",
          "112:             challenge_key = NULL;",
          "113:             if (retval == 0)",
          "114:                 break;",
          "116:             retval = 0;",
          "117:         }",
          "118:         if (client_keys[i].enctype == 0) {",
          "119:             retval = KRB5KDC_ERR_PREAUTH_FAILED;",
          "120:             k5_setmsg(context, retval,",
          "121:                       _(\"Incorrect password in encrypted challenge\"));",
          "122:         }",
          "124:     if (retval == 0)",
          "125:         retval = decode_krb5_pa_enc_ts(&plain, &ts);",
          "126:     if (retval == 0)",
          "127:         retval = krb5_check_clockskew(context, ts->patimestamp);",
          "128:     if (retval == 0) {",
          "129:         enc_tkt_reply->flags |= TKT_FLG_PRE_AUTH;",
          "135:         if (krb5_c_fx_cf2_simple(context, armor_key, \"kdcchallengearmor\",",
          "136:                                  &client_keys[i], \"challengelongterm\",",
          "137:                                  &kdc_challenge_key) == 0) {",
          "138:             modreq = (krb5_kdcpreauth_modreq)kdc_challenge_key;",
          "139:             if (ai != NULL)",
          "140:                 cb->add_auth_indicator(context, rock, ai);",
          "141:         }",
          "144:     if (plain.data)",
          "145:         free(plain.data);",
          "146:     if (enc)",
          "147:         krb5_free_enc_data(context, enc);",
          "148:     if (ts)",
          "149:         krb5_free_pa_enc_ts(context, ts);",
          "153:     (*respond)(arg, retval, modreq, NULL, NULL);",
          "",
          "[Added Lines]",
          "72:         ret = ENOENT;",
          "73:         k5_setmsg(context, ret,",
          "75:         goto cleanup;",
          "78:     der_enc_data = make_data(data->contents, data->length);",
          "79:     ret = decode_krb5_enc_data(&der_enc_data, &enc);",
          "80:     if (ret)",
          "81:         goto cleanup;",
          "83:     ret = alloc_data(&der_enc_ts, enc->ciphertext.length);",
          "84:     if (ret)",
          "85:         goto cleanup;",
          "88:     realmstr = k5memdup0(realm.data, realm.length, &ret);",
          "89:     if (realmstr == NULL)",
          "90:         goto cleanup;",
          "91:     ret = profile_get_string(context->profile, KRB5_CONF_REALMS, realmstr,",
          "92:                              KRB5_CONF_ENCRYPTED_CHALLENGE_INDICATOR, NULL,",
          "93:                              &ai);",
          "94:     if (ret)",
          "95:         goto cleanup;",
          "97:     ret = cb->client_keys(context, rock, &client_keys);",
          "98:     if (ret)",
          "99:         goto cleanup;",
          "100:     for (i = 0; client_keys[i].enctype != ENCTYPE_NULL; i++) {",
          "101:         ret = krb5_c_fx_cf2_simple(context, armor_key, \"clientchallengearmor\",",
          "102:                                    &client_keys[i], \"challengelongterm\",",
          "103:                                    &challenge_key);",
          "104:         if (ret)",
          "105:             goto cleanup;",
          "106:         ret = krb5_c_decrypt(context, challenge_key,",
          "107:                              KRB5_KEYUSAGE_ENC_CHALLENGE_CLIENT, NULL, enc,",
          "108:                              &der_enc_ts);",
          "109:         krb5_free_keyblock(context, challenge_key);",
          "110:         if (!ret)",
          "111:             break;",
          "114:     if (client_keys[i].enctype == ENCTYPE_NULL) {",
          "115:         ret = KRB5KDC_ERR_PREAUTH_FAILED;",
          "116:         k5_setmsg(context, ret,",
          "117:                   _(\"Incorrect password in encrypted challenge\"));",
          "118:         goto cleanup;",
          "121:     ret = decode_krb5_pa_enc_ts(&der_enc_ts, &ts);",
          "122:     if (ret)",
          "123:         goto cleanup;",
          "124:     ret = krb5_check_clockskew(context, ts->patimestamp);",
          "125:     if (ret)",
          "126:         goto cleanup;",
          "128:     enc_tkt_reply->flags |= TKT_FLG_PRE_AUTH;",
          "135:     if (krb5_c_fx_cf2_simple(context, armor_key, \"kdcchallengearmor\",",
          "136:                              &client_keys[i], \"challengelongterm\",",
          "137:                              &kdc_challenge_key) == 0) {",
          "138:         modreq = (krb5_kdcpreauth_modreq)kdc_challenge_key;",
          "139:         if (ai != NULL)",
          "140:             cb->add_auth_indicator(context, rock, ai);",
          "143: cleanup:",
          "145:     free(der_enc_ts.data);",
          "146:     krb5_free_enc_data(context, enc);",
          "147:     krb5_free_pa_enc_ts(context, ts);",
          "151:     (*respond)(arg, ret, modreq, NULL, NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:           krb5_kdcpreauth_callbacks cb, krb5_kdcpreauth_rock rock,",
          "161:           krb5_kdcpreauth_moddata moddata, krb5_kdcpreauth_modreq modreq)",
          "162: {",
          "164:     krb5_keyblock *challenge_key = (krb5_keyblock *)modreq;",
          "165:     krb5_pa_enc_ts ts;",
          "167:     krb5_enc_data enc;",
          "169:     krb5_pa_data *pa = NULL;",
          "171:     if (challenge_key == NULL)",
          "172:         return 0;",
          "206: }",
          "208: static krb5_preauthtype ec_types[] = {",
          "",
          "[Removed Lines]",
          "163:     krb5_error_code retval = 0;",
          "166:     krb5_data *plain = NULL;",
          "168:     krb5_data *encoded = NULL;",
          "175:     retval = krb5_us_timeofday(context, &ts.patimestamp, &ts.pausec);",
          "176:     if (retval == 0)",
          "177:         retval = encode_krb5_pa_enc_ts(&ts, &plain);",
          "178:     if (retval == 0)",
          "179:         retval = krb5_encrypt_helper(context, challenge_key,",
          "180:                                      KRB5_KEYUSAGE_ENC_CHALLENGE_KDC,",
          "181:                                      plain, &enc);",
          "182:     if (retval == 0)",
          "183:         retval = encode_krb5_enc_data(&enc, &encoded);",
          "184:     if (retval == 0) {",
          "185:         pa = calloc(1, sizeof(krb5_pa_data));",
          "186:         if (pa == NULL)",
          "187:             retval = ENOMEM;",
          "188:     }",
          "189:     if (retval == 0) {",
          "190:         pa->pa_type = KRB5_PADATA_ENCRYPTED_CHALLENGE;",
          "191:         pa->contents = (unsigned char *) encoded->data;",
          "192:         pa->length = encoded->length;",
          "193:         encoded->data = NULL;",
          "195:         pa = NULL;",
          "196:     }",
          "197:     if (challenge_key)",
          "198:         krb5_free_keyblock(context, challenge_key);",
          "199:     if (encoded)",
          "200:         krb5_free_data(context, encoded);",
          "201:     if (plain)",
          "202:         krb5_free_data(context, plain);",
          "203:     if (enc.ciphertext.data)",
          "204:         krb5_free_data_contents(context, &enc.ciphertext);",
          "205:     return retval;",
          "",
          "[Added Lines]",
          "161:     krb5_error_code ret;",
          "164:     krb5_data *der_enc_ts = NULL, *der_enc_data = NULL;",
          "168:     enc.ciphertext.data = NULL;",
          "173:     ret = krb5_us_timeofday(context, &ts.patimestamp, &ts.pausec);",
          "174:     if (ret)",
          "175:         goto cleanup;",
          "176:     ret = encode_krb5_pa_enc_ts(&ts, &der_enc_ts);",
          "177:     if (ret)",
          "178:         goto cleanup;",
          "179:     ret = krb5_encrypt_helper(context, challenge_key,",
          "180:                               KRB5_KEYUSAGE_ENC_CHALLENGE_KDC, der_enc_ts,",
          "181:                               &enc);",
          "182:     if (ret)",
          "183:         goto cleanup;",
          "184:     ret = encode_krb5_enc_data(&enc, &der_enc_data);",
          "185:     if (ret)",
          "186:         goto cleanup;",
          "188:     pa = k5alloc(sizeof(*pa), &ret);",
          "189:     if (pa == NULL)",
          "190:         goto cleanup;",
          "191:     pa->pa_type = KRB5_PADATA_ENCRYPTED_CHALLENGE;",
          "192:     pa->length = der_enc_data->length;",
          "194:     pa->contents = (unsigned char *)der_enc_data->data;",
          "195:     der_enc_data->data = NULL;",
          "199: cleanup:",
          "200:     krb5_free_keyblock(context, challenge_key);",
          "201:     krb5_free_data(context, der_enc_data);",
          "202:     krb5_free_data(context, der_enc_ts);",
          "203:     krb5_free_data_contents(context, &enc.ciphertext);",
          "204:     return ret;",
          "",
          "---------------"
        ]
      }
    }
  ]
}