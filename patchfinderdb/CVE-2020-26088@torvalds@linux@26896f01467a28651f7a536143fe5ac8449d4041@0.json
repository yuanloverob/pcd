{
  "cve_id": "CVE-2020-26088",
  "cve_desc": "A missing CAP_NET_RAW check in NFC socket creation in net/nfc/rawsock.c in the Linux kernel before 5.8.2 could be used by local attackers to create raw sockets, bypassing security mechanisms, aka CID-26896f01467a.",
  "repo": "torvalds/linux",
  "patch_hash": "26896f01467a28651f7a536143fe5ac8449d4041",
  "patch_info": {
    "commit_hash": "26896f01467a28651f7a536143fe5ac8449d4041",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/26896f01467a28651f7a536143fe5ac8449d4041",
    "files": [
      "net/nfc/rawsock.c"
    ],
    "message": "net/nfc/rawsock.c: add CAP_NET_RAW check.\n\nWhen creating a raw AF_NFC socket, CAP_NET_RAW needs to be checked first.\n\nSigned-off-by: Qingyu Li <ieatmuttonchuan@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/nfc/rawsock.c||net/nfc/rawsock.c"
    ]
  },
  "patch_diff": {
    "net/nfc/rawsock.c||net/nfc/rawsock.c": [
      "File: net/nfc/rawsock.c -> net/nfc/rawsock.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:  if ((sock->type != SOCK_SEQPACKET) && (sock->type != SOCK_RAW))",
      "329:   return -ESOCKTNOSUPPORT;",
      "332:   sock->ops = &rawsock_raw_ops;",
      "334:   sock->ops = &rawsock_ops;",
      "336:  sk = sk_alloc(net, PF_NFC, GFP_ATOMIC, nfc_proto->proto, kern);",
      "337:  if (!sk)",
      "",
      "[Removed Lines]",
      "331:  if (sock->type == SOCK_RAW)",
      "333:  else",
      "",
      "[Added Lines]",
      "331:  if (sock->type == SOCK_RAW) {",
      "332:   if (!capable(CAP_NET_RAW))",
      "333:    return -EPERM;",
      "335:  } else {",
      "337:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8ab78863e9eff11910e1ac8bcf478060c29b379e",
      "candidate_info": {
        "commit_hash": "8ab78863e9eff11910e1ac8bcf478060c29b379e",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/8ab78863e9eff11910e1ac8bcf478060c29b379e",
        "files": [
          "net/nfc/rawsock.c"
        ],
        "message": "net/nfc/rawsock.c: fix a permission check bug\n\nThe function rawsock_create() calls a privileged function sk_alloc(), which requires a ns-aware check to check net->user_ns, i.e., ns_capable(). However, the original code checks the init_user_ns using capable(). So we replace the capable() with ns_capable().\n\nSigned-off-by: Jeimon <jjjinmeng.zhou@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/nfc/rawsock.c||net/nfc/rawsock.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/nfc/rawsock.c||net/nfc/rawsock.c"
          ],
          "candidate": [
            "net/nfc/rawsock.c||net/nfc/rawsock.c"
          ]
        }
      },
      "candidate_diff": {
        "net/nfc/rawsock.c||net/nfc/rawsock.c": [
          "File: net/nfc/rawsock.c -> net/nfc/rawsock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "329:   return -ESOCKTNOSUPPORT;",
          "331:  if (sock->type == SOCK_RAW) {",
          "333:    return -EPERM;",
          "334:   sock->ops = &rawsock_raw_ops;",
          "335:  } else {",
          "",
          "[Removed Lines]",
          "332:   if (!capable(CAP_NET_RAW))",
          "",
          "[Added Lines]",
          "332:   if (!ns_capable(net->user_ns, CAP_NET_RAW))",
          "",
          "---------------"
        ]
      }
    }
  ]
}