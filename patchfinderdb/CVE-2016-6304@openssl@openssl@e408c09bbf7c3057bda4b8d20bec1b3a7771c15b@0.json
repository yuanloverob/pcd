{
  "cve_id": "CVE-2016-6304",
  "cve_desc": "Multiple memory leaks in t1_lib.c in OpenSSL before 1.0.1u, 1.0.2 before 1.0.2i, and 1.1.0 before 1.1.0a allow remote attackers to cause a denial of service (memory consumption) via large OCSP Status Request extensions.",
  "repo": "openssl/openssl",
  "patch_hash": "e408c09bbf7c3057bda4b8d20bec1b3a7771c15b",
  "patch_info": {
    "commit_hash": "e408c09bbf7c3057bda4b8d20bec1b3a7771c15b",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/e408c09bbf7c3057bda4b8d20bec1b3a7771c15b",
    "files": [
      "ssl/t1_lib.c"
    ],
    "message": "Fix OCSP Status Request extension unbounded memory growth\n\nA malicious client can send an excessively large OCSP Status Request\nextension. If that client continually requests renegotiation,\nsending a large OCSP Status Request extension each time, then there will\nbe unbounded memory growth on the server. This will eventually lead to a\nDenial Of Service attack through memory exhaustion. Servers with a\ndefault configuration are vulnerable even if they do not support OCSP.\nBuilds using the \"no-ocsp\" build time option are not affected.\n\nI have also checked other extensions to see if they suffer from a similar\nproblem but I could not find any other issues.\n\nCVE-2016-6304\n\nIssue reported by Shi Lei.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2019:                     (&extension, &responder_id_list))",
      "2020:                     return 0;",
      "2022:                 while (PACKET_remaining(&responder_id_list) > 0) {",
      "2023:                     OCSP_RESPID *id;",
      "2024:                     PACKET responder_id;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2026:                 sk_OCSP_RESPID_pop_free(s->tlsext_ocsp_ids,",
      "2027:                                         OCSP_RESPID_free);",
      "2028:                 if (PACKET_remaining(&responder_id_list) > 0) {",
      "2029:                     s->tlsext_ocsp_ids = sk_OCSP_RESPID_new_null();",
      "2030:                     if (s->tlsext_ocsp_ids == NULL) {",
      "2032:                         return 0;",
      "2033:                     }",
      "2034:                 } else {",
      "2035:                     s->tlsext_ocsp_ids = NULL;",
      "2036:                 }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2030:                         return 0;",
      "2031:                     }",
      "2040:                     id_data = PACKET_data(&responder_id);",
      "2041:                     id = d2i_OCSP_RESPID(NULL, &id_data,",
      "2042:                                          PACKET_remaining(&responder_id));",
      "",
      "[Removed Lines]",
      "2033:                     if (s->tlsext_ocsp_ids == NULL",
      "2034:                         && (s->tlsext_ocsp_ids =",
      "2035:                             sk_OCSP_RESPID_new_null()) == NULL) {",
      "2037:                         return 0;",
      "2038:                     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "062178678f5374b09f00d70796f6e692e8775aca",
      "candidate_info": {
        "commit_hash": "062178678f5374b09f00d70796f6e692e8775aca",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/062178678f5374b09f00d70796f6e692e8775aca",
        "files": [
          "CHANGES",
          "include/openssl/ssl.h",
          "include/openssl/tls1.h",
          "ssl/packet_locl.h",
          "ssl/s3_enc.c",
          "ssl/t1_enc.c",
          "ssl/t1_lib.c",
          "test/packettest.c",
          "test/recipes/80-test_ssl.t"
        ],
        "message": "Refactor ClientHello extension parsing\n\n1) Simplify code with better PACKET methods.\n\n2) Make broken SNI parsing explicit. SNI was intended to be extensible\nto new name types but RFC 4366 defined the syntax inextensibly, and\nOpenSSL has never parsed SNI in a way that would allow adding a new name\ntype. RFC 6066 fixed the definition but due to broken implementations\nbeing widespread, it appears impossible to ever extend SNI.\n\n3) Annotate resumption behaviour. OpenSSL doesn't currently handle all\nextensions correctly upon resumption. Annotate for further clean-up.\n\n4) Send an alert on ALPN protocol mismatch.\n\nReviewed-by: Kurt Roeckx <kurt@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "include/openssl/tls1.h||include/openssl/tls1.h",
          "ssl/packet_locl.h||ssl/packet_locl.h",
          "ssl/s3_enc.c||ssl/s3_enc.c",
          "ssl/t1_enc.c||ssl/t1_enc.c",
          "ssl/t1_lib.c||ssl/t1_lib.c",
          "test/packettest.c||test/packettest.c",
          "test/recipes/80-test_ssl.t||test/recipes/80-test_ssl.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ],
          "candidate": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1109: # define SSL_AD_UNKNOWN_PSK_IDENTITY     TLS1_AD_UNKNOWN_PSK_IDENTITY",
          "1111: # define SSL_AD_INAPPROPRIATE_FALLBACK   TLS1_AD_INAPPROPRIATE_FALLBACK",
          "1112: # define SSL_ERROR_NONE                  0",
          "1113: # define SSL_ERROR_SSL                   1",
          "1114: # define SSL_ERROR_WANT_READ             2",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1112: # define SSL_AD_NO_APPLICATION_PROTOCOL  TLS1_AD_NO_APPLICATION_PROTOCOL",
          "",
          "---------------"
        ],
        "include/openssl/tls1.h||include/openssl/tls1.h": [
          "File: include/openssl/tls1.h -> include/openssl/tls1.h"
        ],
        "ssl/packet_locl.h||ssl/packet_locl.h": [
          "File: ssl/packet_locl.h -> ssl/packet_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:     return pkt->remaining;",
          "93: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: static ossl_inline const unsigned char *PACKET_end(const PACKET *pkt)",
          "102: {",
          "103:     return pkt->curr + pkt->remaining;",
          "104: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "452:     return (*data != NULL);",
          "453: }",
          "456: __owur static ossl_inline int PACKET_forward(PACKET *pkt, size_t len)",
          "457: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466: static ossl_inline int PACKET_contains_zero_byte(const PACKET *pkt)",
          "467: {",
          "468:   return memchr(pkt->curr, 0, pkt->remaining) != NULL;",
          "469: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "488:     return 1;",
          "489: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "511: __owur static ossl_inline int PACKET_as_length_prefixed_1(PACKET *pkt, PACKET *subpkt)",
          "512: {",
          "513:   unsigned int length;",
          "514:   const unsigned char *data;",
          "515:   PACKET tmp = *pkt;",
          "516:   if (!PACKET_get_1(&tmp, &length) ||",
          "517:       !PACKET_get_bytes(&tmp, &data, (size_t)length) ||",
          "518:       PACKET_remaining(&tmp) != 0) {",
          "519:       return 0;",
          "520:   }",
          "523:   subpkt->curr = data;",
          "524:   subpkt->remaining = length;",
          "526:   return 1;",
          "527: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "513:     return 1;",
          "514: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "559: __owur static ossl_inline int PACKET_as_length_prefixed_2(PACKET *pkt,",
          "560:                                                           PACKET *subpkt)",
          "561: {",
          "562:   unsigned int length;",
          "563:   const unsigned char *data;",
          "564:   PACKET tmp = *pkt;",
          "566:   if (!PACKET_get_net_2(&tmp, &length) ||",
          "567:       !PACKET_get_bytes(&tmp, &data, (size_t)length) ||",
          "568:       PACKET_remaining(&tmp) != 0) {",
          "569:       return 0;",
          "570:   }",
          "573:   subpkt->curr = data;",
          "574:   subpkt->remaining = length;",
          "576:   return 1;",
          "577: }",
          "",
          "---------------"
        ],
        "ssl/s3_enc.c||ssl/s3_enc.c": [
          "File: ssl/s3_enc.c -> ssl/s3_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "667:         return (TLS1_AD_UNKNOWN_PSK_IDENTITY);",
          "668:     case SSL_AD_INAPPROPRIATE_FALLBACK:",
          "669:         return (TLS1_AD_INAPPROPRIATE_FALLBACK);",
          "670:     default:",
          "671:         return (-1);",
          "672:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "670:     case SSL_AD_NO_APPLICATION_PROTOCOL:",
          "671:         return (TLS1_AD_NO_APPLICATION_PROTOCOL);",
          "",
          "---------------"
        ],
        "ssl/t1_enc.c||ssl/t1_enc.c": [
          "File: ssl/t1_enc.c -> ssl/t1_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "792:         return (TLS1_AD_UNKNOWN_PSK_IDENTITY);",
          "793:     case SSL_AD_INAPPROPRIATE_FALLBACK:",
          "794:         return (TLS1_AD_INAPPROPRIATE_FALLBACK);",
          "795:     default:",
          "796:         return (-1);",
          "797:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "795:     case SSL_AD_NO_APPLICATION_PROTOCOL:",
          "796:         return (TLS1_AD_NO_APPLICATION_PROTOCOL);",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1732: }",
          "1741: static int tls1_alpn_handle_client_hello(SSL *s, PACKET *pkt, int *al)",
          "1742: {",
          "1745:     const unsigned char *selected;",
          "1747:     unsigned char selected_len;",
          "1748:     int r;",
          "1762:     do {",
          "1770:                                s->ctx->alpn_select_cb_arg);",
          "1771:     if (r == SSL_TLSEXT_ERR_OK) {",
          "1772:         OPENSSL_free(s->s3->alpn_selected);",
          "1773:         s->s3->alpn_selected = OPENSSL_malloc(selected_len);",
          "1774:         if (s->s3->alpn_selected == NULL) {",
          "1777:         }",
          "1778:         memcpy(s->s3->alpn_selected, selected, selected_len);",
          "1779:         s->s3->alpn_selected_len = selected_len;",
          "1780:     }",
          "1786: }",
          "1788: #ifndef OPENSSL_NO_EC",
          "",
          "[Removed Lines]",
          "1743:     unsigned int data_len;",
          "1744:     unsigned int proto_len;",
          "1746:     const unsigned char *data;",
          "1750:     if (s->ctx->alpn_select_cb == NULL)",
          "1751:         return 0;",
          "1757:     if (!PACKET_get_net_2(pkt, &data_len)",
          "1758:             || PACKET_remaining(pkt) != data_len",
          "1759:             || !PACKET_peek_bytes(pkt, &data, data_len))",
          "1760:         goto parse_error;",
          "1763:         if (!PACKET_get_1(pkt, &proto_len)",
          "1764:                 || proto_len == 0",
          "1765:                 || !PACKET_forward(pkt, proto_len))",
          "1766:             goto parse_error;",
          "1767:     } while (PACKET_remaining(pkt));",
          "1769:     r = s->ctx->alpn_select_cb(s, &selected, &selected_len, data, data_len,",
          "1776:             return -1;",
          "1781:     return 0;",
          "1783:  parse_error:",
          "1785:     return -1;",
          "",
          "[Added Lines]",
          "1745:     PACKET protocol_list, save_protocol_list, protocol;",
          "1749:     if (!PACKET_as_length_prefixed_2(pkt, &protocol_list)",
          "1750:         || PACKET_remaining(&protocol_list) < 2) {",
          "1751:         return 0;",
          "1752:     }",
          "1754:     save_protocol_list = protocol_list;",
          "1757:         if (!PACKET_get_length_prefixed_1(&protocol_list, &protocol)",
          "1758:             || PACKET_remaining(&protocol) == 0) {",
          "1759:             return 0;",
          "1760:         }",
          "1761:     } while (PACKET_remaining(&protocol_list) != 0);",
          "1763:     if (s->ctx->alpn_select_cb == NULL)",
          "1764:         return 1;",
          "1766:     r = s->ctx->alpn_select_cb(s, &selected, &selected_len,",
          "1767:                                PACKET_data(&save_protocol_list),",
          "1768:                                PACKET_remaining(&save_protocol_list),",
          "1775:             return 0;",
          "1779:     } else {",
          "1781:         return 0;",
          "1784:     return 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1802: static void ssl_check_for_safari(SSL *s, const PACKET *pkt)",
          "1803: {",
          "1808:     static const unsigned char kSafariExtensionsBlock[] = {",
          "",
          "[Removed Lines]",
          "1804:     unsigned int type, size;",
          "1805:     const unsigned char *eblock1, *eblock2;",
          "1806:     PACKET tmppkt;",
          "",
          "[Added Lines]",
          "1803:     unsigned int type;",
          "1804:     PACKET sni, tmppkt;",
          "1805:     size_t ext_len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1820:     };",
          "1823:     static const unsigned char kSafariTLS12ExtensionsBlock[] = {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1832:     };",
          "1834:     tmppkt = *pkt;",
          "1836:     if (!PACKET_forward(&tmppkt, 2)",
          "1840:         return;",
          "1842:     if (type != TLSEXT_TYPE_server_name)",
          "1843:         return;",
          "1868: }",
          "1871: static int ssl_scan_clienthello_tlsext(SSL *s, PACKET *pkt, int *al)",
          "1872: {",
          "1873:     unsigned int type;",
          "1877:     int renegotiate_seen = 0;",
          "1879:     s->servername_done = 0;",
          "1880:     s->tlsext_status_type = -1;",
          "1881: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "[Removed Lines]",
          "1837:             || !PACKET_get_net_2(&tmppkt, &type)",
          "1838:             || !PACKET_get_net_2(&tmppkt, &size)",
          "1839:             || !PACKET_forward(&tmppkt, size))",
          "1845:     if (TLS1_get_client_version(s) >= TLS1_2_VERSION) {",
          "1846:         const size_t len1 = sizeof(kSafariExtensionsBlock);",
          "1847:         const size_t len2 = sizeof(kSafariTLS12ExtensionsBlock);",
          "1849:         if (!PACKET_get_bytes(&tmppkt, &eblock1, len1)",
          "1850:                 || !PACKET_get_bytes(&tmppkt, &eblock2, len2)",
          "1851:                 || PACKET_remaining(&tmppkt))",
          "1852:             return;",
          "1853:         if (memcmp(eblock1, kSafariExtensionsBlock, len1) != 0)",
          "1854:             return;",
          "1855:         if (memcmp(eblock2, kSafariTLS12ExtensionsBlock, len2) != 0)",
          "1856:             return;",
          "1857:     } else {",
          "1858:         const size_t len = sizeof(kSafariExtensionsBlock);",
          "1860:         if (!PACKET_get_bytes(&tmppkt, &eblock1, len)",
          "1861:                 || PACKET_remaining(&tmppkt))",
          "1862:             return;",
          "1863:         if (memcmp(eblock1, kSafariExtensionsBlock, len) != 0)",
          "1864:             return;",
          "1865:     }",
          "1867:     s->s3->is_probably_safari = 1;",
          "1874:     unsigned int size;",
          "1875:     unsigned int len;",
          "1876:     const unsigned char *data;",
          "",
          "[Added Lines]",
          "1831:     static const size_t kSafariCommonExtensionsLength = 18;",
          "1836:         || !PACKET_get_net_2(&tmppkt, &type)",
          "1837:         || !PACKET_get_length_prefixed_2(&tmppkt, &sni)) {",
          "1839:     }",
          "1844:     ext_len = TLS1_get_client_version(s) >= TLS1_2_VERSION ?",
          "1845:         sizeof(kSafariExtensionsBlock) : kSafariCommonExtensionsLength;",
          "1847:     s->s3->is_probably_safari = PACKET_equal(&tmppkt, kSafariExtensionsBlock,",
          "1848:                                              ext_len);",
          "1867:     PACKET extensions;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1911:     if (PACKET_remaining(pkt) == 0)",
          "1912:         goto ri_check;",
          "1929:         if (s->tlsext_debug_cb)",
          "1935:         if (type == TLSEXT_TYPE_renegotiate) {",
          "1937:                 return 0;",
          "1938:             renegotiate_seen = 1;",
          "1939:         } else if (s->version == SSL3_VERSION) {",
          "",
          "[Removed Lines]",
          "1914:     if (!PACKET_get_net_2(pkt, &len))",
          "1915:         goto err;",
          "1917:     if (PACKET_remaining(pkt) != len)",
          "1918:         goto err;",
          "1920:     if (!tls1_check_duplicate_extensions(pkt))",
          "1921:         goto err;",
          "1923:     while (PACKET_get_net_2(pkt, &type) && PACKET_get_net_2(pkt, &size)) {",
          "1924:         PACKET subpkt;",
          "1926:         if (!PACKET_peek_bytes(pkt, &data, size))",
          "1927:             goto err;",
          "1930:             s->tlsext_debug_cb(s, 0, type, data, size, s->tlsext_debug_arg);",
          "1932:         if (!PACKET_get_sub_packet(pkt, &subpkt, size))",
          "1933:             goto err;",
          "1936:             if (!ssl_parse_clienthello_renegotiate_ext(s, &subpkt, al))",
          "",
          "[Added Lines]",
          "1905:     if (!PACKET_as_length_prefixed_2(pkt, &extensions))",
          "1906:         return 0;",
          "1908:     if (!tls1_check_duplicate_extensions(&extensions))",
          "1909:         return 0;",
          "1916:     while (PACKET_get_net_2(&extensions, &type)) {",
          "1917:         PACKET extension;",
          "1918:         if (!PACKET_get_length_prefixed_2(&extensions, &extension))",
          "1919:             return 0;",
          "1922:             s->tlsext_debug_cb(s, 0, type, PACKET_data(&extension),",
          "1923:                                PACKET_remaining(&extension),",
          "1924:                                s->tlsext_debug_arg);",
          "1927:             if (!ssl_parse_clienthello_renegotiate_ext(s, &extension, al))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1966:         else if (type == TLSEXT_TYPE_server_name) {",
          "1968:             unsigned int servname_type;",
          "2030:             }",
          "2035:         }",
          "2036: #ifndef OPENSSL_NO_SRP",
          "2037:         else if (type == TLSEXT_TYPE_srp) {",
          "2052:         }",
          "2053: #endif",
          "2055: #ifndef OPENSSL_NO_EC",
          "2056:         else if (type == TLSEXT_TYPE_ec_point_formats) {",
          "2063:             if (!s->hit) {",
          "2070:                     return 0;",
          "2071:                 }",
          "2085:             }",
          "2086:         } else if (type == TLSEXT_TYPE_elliptic_curves) {",
          "2095:             if (!s->hit) {",
          "2103:                     return 0;",
          "2104:                 }",
          "2117:             }",
          "2118:         }",
          "2120:         else if (type == TLSEXT_TYPE_session_ticket) {",
          "2126:                 return 0;",
          "2127:             }",
          "2128:         } else if (type == TLSEXT_TYPE_signature_algorithms) {",
          "2139:             }",
          "2140:         } else if (type == TLSEXT_TYPE_status_request) {",
          "2147:             if (s->tlsext_status_type == TLSEXT_STATUSTYPE_ocsp) {",
          "2156:                     OCSP_RESPID *id;",
          "2163:                     }",
          "2172:                     }",
          "2176:                         OCSP_RESPID_free(id);",
          "2178:                         return 0;",
          "2179:                     }",
          "2180:                     if (!sk_OCSP_RESPID_push(s->tlsext_ocsp_ids, id)) {",
          "2181:                         OCSP_RESPID_free(id);",
          "",
          "[Removed Lines]",
          "1967:             const unsigned char *sdata;",
          "1969:             unsigned int dsize;",
          "1970:             PACKET ssubpkt;",
          "1972:             if (!PACKET_get_net_2(&subpkt, &dsize)",
          "1973:                     || !PACKET_get_sub_packet(&subpkt, &ssubpkt, dsize))",
          "1974:                 goto err;",
          "1976:             while (PACKET_remaining(&ssubpkt) > 3) {",
          "1977:                 if (!PACKET_get_1(&ssubpkt, &servname_type)",
          "1978:                         || !PACKET_get_net_2(&ssubpkt, &len)",
          "1979:                         || PACKET_remaining(&ssubpkt) < len)",
          "1980:                     goto err;",
          "1982:                 if (s->servername_done == 0)",
          "1983:                     switch (servname_type) {",
          "1984:                     case TLSEXT_NAMETYPE_host_name:",
          "1985:                         if (!s->hit) {",
          "1986:                             if (s->session->tlsext_hostname)",
          "1987:                                 goto err;",
          "1989:                             if (len > TLSEXT_MAXLEN_host_name) {",
          "1991:                                 return 0;",
          "1992:                             }",
          "1993:                             if ((s->session->tlsext_hostname =",
          "1994:                                  OPENSSL_malloc(len + 1)) == NULL) {",
          "1996:                                 return 0;",
          "1997:                             }",
          "1998:                             if (!PACKET_copy_bytes(&ssubpkt,",
          "1999:                                     (unsigned char *)s->session",
          "2000:                                         ->tlsext_hostname,",
          "2001:                                     len)) {",
          "2003:                                 return 0;",
          "2004:                             }",
          "2005:                             s->session->tlsext_hostname[len] = '\\0';",
          "2006:                             if (strlen(s->session->tlsext_hostname) != len) {",
          "2007:                                 OPENSSL_free(s->session->tlsext_hostname);",
          "2008:                                 s->session->tlsext_hostname = NULL;",
          "2010:                                 return 0;",
          "2011:                             }",
          "2012:                             s->servername_done = 1;",
          "2014:                         } else {",
          "2015:                             if (!PACKET_get_bytes(&ssubpkt, &sdata, len)) {",
          "2017:                                 return 0;",
          "2018:                             }",
          "2019:                             s->servername_done = s->session->tlsext_hostname",
          "2020:                                 && strlen(s->session->tlsext_hostname) == len",
          "2021:                                 && strncmp(s->session->tlsext_hostname,",
          "2022:                                            (char *)sdata, len) == 0;",
          "2023:                         }",
          "2025:                         break;",
          "2027:                     default:",
          "2028:                         break;",
          "2029:                     }",
          "2032:             if (PACKET_remaining(&ssubpkt) != 0)",
          "2033:                 goto err;",
          "2038:             if (!PACKET_get_1(&subpkt, &len)",
          "2039:                     || s->srp_ctx.login != NULL)",
          "2040:                 goto err;",
          "2042:             if ((s->srp_ctx.login = OPENSSL_malloc(len + 1)) == NULL)",
          "2043:                 return -1;",
          "2044:             if (!PACKET_copy_bytes(&subpkt, (unsigned char *)s->srp_ctx.login,",
          "2045:                                    len))",
          "2046:                 goto err;",
          "2047:             s->srp_ctx.login[len] = '\\0';",
          "2049:             if (strlen(s->srp_ctx.login) != len",
          "2050:                     || PACKET_remaining(&subpkt))",
          "2051:                 goto err;",
          "2057:             unsigned int ecpointformatlist_length;",
          "2059:             if (!PACKET_get_1(&subpkt, &ecpointformatlist_length)",
          "2060:                     || ecpointformatlist_length == 0)",
          "2061:                 goto err;",
          "2064:                 OPENSSL_free(s->session->tlsext_ecpointformatlist);",
          "2065:                 s->session->tlsext_ecpointformatlist = NULL;",
          "2066:                 s->session->tlsext_ecpointformatlist_length = 0;",
          "2067:                 if ((s->session->tlsext_ecpointformatlist =",
          "2068:                      OPENSSL_malloc(ecpointformatlist_length)) == NULL) {",
          "2072:                 s->session->tlsext_ecpointformatlist_length =",
          "2073:                     ecpointformatlist_length;",
          "2074:                 if (!PACKET_copy_bytes(&subpkt,",
          "2075:                         s->session->tlsext_ecpointformatlist,",
          "2076:                         ecpointformatlist_length))",
          "2077:                     goto err;",
          "2078:             } else if (!PACKET_forward(&subpkt, ecpointformatlist_length)) {",
          "2079:                 goto err;",
          "2080:             }",
          "2082:             if (PACKET_remaining(&subpkt)) {",
          "2084:                 return 0;",
          "2087:             unsigned int ellipticcurvelist_length;",
          "2090:             if (!PACKET_get_net_2(&subpkt, &ellipticcurvelist_length)",
          "2091:                     || ellipticcurvelist_length == 0",
          "2092:                     || (ellipticcurvelist_length & 1) != 0)",
          "2093:                 goto err;",
          "2096:                 if (s->session->tlsext_ellipticcurvelist)",
          "2097:                     goto err;",
          "2099:                 s->session->tlsext_ellipticcurvelist_length = 0;",
          "2100:                 if ((s->session->tlsext_ellipticcurvelist =",
          "2101:                      OPENSSL_malloc(ellipticcurvelist_length)) == NULL) {",
          "2105:                 s->session->tlsext_ellipticcurvelist_length =",
          "2106:                     ellipticcurvelist_length;",
          "2107:                 if (!PACKET_copy_bytes(&subpkt,",
          "2108:                         s->session->tlsext_ellipticcurvelist,",
          "2109:                         ellipticcurvelist_length))",
          "2110:                     goto err;",
          "2111:             } else if (!PACKET_forward(&subpkt, ellipticcurvelist_length)) {",
          "2112:                 goto err;",
          "2113:             }",
          "2115:             if (PACKET_remaining(&subpkt)) {",
          "2116:                 goto err;",
          "2121:             if (!PACKET_forward(&subpkt, size)",
          "2122:                 || (s->tls_session_ticket_ext_cb &&",
          "2123:                     !s->tls_session_ticket_ext_cb(s, data, size,",
          "2124:                                         s->tls_session_ticket_ext_cb_arg))) {",
          "2129:             unsigned int dsize;",
          "2131:             if (s->s3->tmp.peer_sigalgs",
          "2132:                     || !PACKET_get_net_2(&subpkt, &dsize)",
          "2133:                     || (dsize & 1) != 0",
          "2134:                     || (dsize == 0)",
          "2135:                     || !PACKET_get_bytes(&subpkt, &data, dsize)",
          "2136:                     || PACKET_remaining(&subpkt) != 0",
          "2137:                     || !tls1_save_sigalgs(s, data, dsize)) {",
          "2138:                 goto err;",
          "2141:             PACKET ssubpkt;",
          "2143:             if (!PACKET_get_1(&subpkt,",
          "2144:                               (unsigned int *)&s->tlsext_status_type))",
          "2145:                 goto err;",
          "2148:                 const unsigned char *sdata;",
          "2149:                 unsigned int dsize;",
          "2151:                 if (!PACKET_get_net_2(&subpkt, &dsize)",
          "2152:                         || !PACKET_get_sub_packet(&subpkt, &ssubpkt, dsize))",
          "2153:                     goto err;",
          "2155:                 while (PACKET_remaining(&ssubpkt)) {",
          "2157:                     unsigned int idsize;",
          "2159:                     if (PACKET_remaining(&ssubpkt) < 4",
          "2160:                             || !PACKET_get_net_2(&ssubpkt, &idsize)",
          "2161:                             || !PACKET_get_bytes(&ssubpkt, &data, idsize)) {",
          "2162:                         goto err;",
          "2164:                     sdata = data;",
          "2165:                     data += idsize;",
          "2166:                     id = d2i_OCSP_RESPID(NULL, &sdata, idsize);",
          "2167:                     if (!id)",
          "2168:                         goto err;",
          "2169:                     if (data != sdata) {",
          "2170:                         OCSP_RESPID_free(id);",
          "2171:                         goto err;",
          "2173:                     if (!s->tlsext_ocsp_ids",
          "2174:                         && !(s->tlsext_ocsp_ids =",
          "2175:                              sk_OCSP_RESPID_new_null())) {",
          "",
          "[Added Lines]",
          "1959:             PACKET sni, hostname;",
          "1961:             if (!PACKET_as_length_prefixed_2(&extension, &sni)",
          "1963:                 || PACKET_remaining(&sni) == 0) {",
          "1964:                 return 0;",
          "1979:             if (!PACKET_get_1(&sni, &servname_type)",
          "1980:                 || servname_type != TLSEXT_NAMETYPE_host_name",
          "1981:                 || !PACKET_as_length_prefixed_2(&sni, &hostname)) {",
          "1982:                 return 0;",
          "1983:             }",
          "1985:             if (!s->hit) {",
          "1986:                 if (PACKET_remaining(&hostname) > TLSEXT_MAXLEN_host_name) {",
          "1988:                     return 0;",
          "1989:                 }",
          "1991:                 if (PACKET_contains_zero_byte(&hostname)) {",
          "1993:                     return 0;",
          "1994:                 }",
          "1996:                 if (!PACKET_strndup(&hostname, &s->session->tlsext_hostname)) {",
          "1998:                     return 0;",
          "1999:                 }",
          "2001:                 s->servername_done = 1;",
          "2002:             } else {",
          "2007:                 s->servername_done = s->session->tlsext_hostname",
          "2008:                     && PACKET_equal(&hostname, s->session->tlsext_hostname,",
          "2009:                                     strlen(s->session->tlsext_hostname));",
          "2010:             }",
          "2014:             PACKET srp_I;",
          "2016:             if (!PACKET_as_length_prefixed_1(&extension, &srp_I))",
          "2017:                 return 0;",
          "2019:             if (PACKET_contains_zero_byte(&srp_I))",
          "2020:                 return 0;",
          "2026:             if (!PACKET_strndup(&srp_I, &s->srp_ctx.login)) {",
          "2028:                 return 0;",
          "2029:             }",
          "2035:             PACKET ec_point_format_list;",
          "2037:             if (!PACKET_as_length_prefixed_1(&extension,",
          "2038:                                               &ec_point_format_list)",
          "2039:                 || PACKET_remaining(&ec_point_format_list) == 0) {",
          "2040:                 return 0;",
          "2041:             }",
          "2044:                 if (!PACKET_memdup(&ec_point_format_list,",
          "2045:                                    &s->session->tlsext_ecpointformatlist,",
          "2046:                                    &s->session->tlsext_ecpointformatlist_length)) {",
          "2052:             PACKET elliptic_curve_list;",
          "2055:             if (!PACKET_as_length_prefixed_2(&extension,",
          "2056:                                              &elliptic_curve_list)",
          "2057:                 || PACKET_remaining(&elliptic_curve_list) == 0",
          "2058:                 || (PACKET_remaining(&elliptic_curve_list) % 2) != 0) {",
          "2059:                 return 0;",
          "2060:             }",
          "2063:                 if (!PACKET_memdup(&elliptic_curve_list,",
          "2064:                                    &s->session->tlsext_ellipticcurvelist,",
          "2065:                                    &s->session->tlsext_ellipticcurvelist_length)) {",
          "2073:             if (s->tls_session_ticket_ext_cb &&",
          "2074:                 !s->tls_session_ticket_ext_cb(s, PACKET_data(&extension),",
          "2075:                                               PACKET_remaining(&extension),",
          "2076:                                               s->tls_session_ticket_ext_cb_arg)) {",
          "2081:             PACKET supported_sig_algs;",
          "2083:             if (!PACKET_as_length_prefixed_2(&extension, &supported_sig_algs)",
          "2084:                 || (PACKET_remaining(&supported_sig_algs) % 2) != 0",
          "2085:                 || PACKET_remaining(&supported_sig_algs) == 0) {",
          "2086:                 return 0;",
          "2087:             }",
          "2089:             if  (!s->hit) {",
          "2090:                 if (!tls1_save_sigalgs(s, PACKET_data(&supported_sig_algs),",
          "2091:                                        PACKET_remaining(&supported_sig_algs))) {",
          "2092:                     return 0;",
          "2093:                 }",
          "2096:             const unsigned char *ext_data;",
          "2098:             if (!PACKET_get_1(&extension,",
          "2099:                               (unsigned int *)&s->tlsext_status_type)) {",
          "2100:                 return 0;",
          "2101:             }",
          "2104:                 PACKET responder_id_list, exts;",
          "2105:                 if (!PACKET_get_length_prefixed_2(&extension, &responder_id_list))",
          "2106:                     return 0;",
          "2108:                 while (PACKET_remaining(&responder_id_list) > 0) {",
          "2110:                     PACKET responder_id;",
          "2111:                     const unsigned char *id_data;",
          "2113:                     if (!PACKET_get_length_prefixed_2(&responder_id_list,",
          "2114:                                                       &responder_id)",
          "2115:                         || PACKET_remaining(&responder_id) == 0) {",
          "2116:                         return 0;",
          "2119:                     if (s->tlsext_ocsp_ids == NULL",
          "2120:                         && (s->tlsext_ocsp_ids =",
          "2121:                             sk_OCSP_RESPID_new_null()) == NULL) {",
          "2123:                         return 0;",
          "2126:                     id_data = PACKET_data(&responder_id);",
          "2127:                     id = d2i_OCSP_RESPID(NULL, &id_data,",
          "2128:                                          PACKET_remaining(&responder_id));",
          "2129:                     if (id == NULL)",
          "2130:                         return 0;",
          "2132:                     if (id_data != PACKET_end(&responder_id)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2185:                 }",
          "2195:                     sk_X509_EXTENSION_pop_free(s->tlsext_ocsp_exts,",
          "2196:                                                X509_EXTENSION_free);",
          "2197:                     s->tlsext_ocsp_exts =",
          "2201:                 }",
          "2207:                 s->tlsext_status_type = -1;",
          "2208:         }",
          "2209: #ifndef OPENSSL_NO_HEARTBEATS",
          "2210:         else if (SSL_IS_DTLS(s) && type == TLSEXT_TYPE_heartbeat) {",
          "2211:             unsigned int hbtype;",
          "2216:                 return 0;",
          "2217:             }",
          "",
          "[Removed Lines]",
          "2188:                 if (!PACKET_get_net_2(&subpkt, &dsize)",
          "2189:                         || !PACKET_get_bytes(&subpkt, &data, dsize)",
          "2190:                         || PACKET_remaining(&subpkt)) {",
          "2191:                     goto err;",
          "2192:                 }",
          "2193:                 sdata = data;",
          "2194:                 if (dsize > 0) {",
          "2198:                         d2i_X509_EXTENSIONS(NULL, &sdata, dsize);",
          "2199:                     if (!s->tlsext_ocsp_exts || (data + dsize != sdata))",
          "2200:                         goto err;",
          "2202:             }",
          "2206:             else",
          "2213:             if (!PACKET_get_1(&subpkt, &hbtype)",
          "2214:                     || PACKET_remaining(&subpkt)) {",
          "",
          "[Added Lines]",
          "2145:                 if (!PACKET_as_length_prefixed_2(&extension, &exts))",
          "2146:                     return 0;",
          "2148:                 if (PACKET_remaining(&exts) > 0) {",
          "2149:                     ext_data = PACKET_data(&exts);",
          "2153:                         d2i_X509_EXTENSIONS(NULL, &ext_data,",
          "2154:                                             PACKET_remaining(&exts));",
          "2155:                     if (s->tlsext_ocsp_exts == NULL",
          "2156:                         || ext_data != PACKET_end(&exts)) {",
          "2157:                         return 0;",
          "2158:                     }",
          "2163:             } else {",
          "2165:             }",
          "2171:             if (!PACKET_get_1(&extension, &hbtype)",
          "2172:                     || PACKET_remaining(&extension)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2255: #endif",
          "2257:         else if (type == TLSEXT_TYPE_application_layer_protocol_negotiation &&",
          "2260:                 return 0;",
          "2261: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "[Removed Lines]",
          "2258:                  s->ctx->alpn_select_cb && s->s3->tmp.finish_md_len == 0) {",
          "2259:             if (tls1_alpn_handle_client_hello(s, &subpkt, al) != 0)",
          "",
          "[Added Lines]",
          "2216:                  s->s3->tmp.finish_md_len == 0) {",
          "2217:             if (!tls1_alpn_handle_client_hello(s, &extension, al))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2268: #ifndef OPENSSL_NO_SRTP",
          "2269:         else if (SSL_IS_DTLS(s) && SSL_get_srtp_profiles(s)",
          "2270:                  && type == TLSEXT_TYPE_use_srtp) {",
          "2272:                 return 0;",
          "2273:         }",
          "2274: #endif",
          "",
          "[Removed Lines]",
          "2271:             if (ssl_parse_clienthello_use_srtp_ext(s, &subpkt, al))",
          "",
          "[Added Lines]",
          "2229:             if (ssl_parse_clienthello_use_srtp_ext(s, &extension, al))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2291:         else if (!s->hit) {",
          "2293:                 return 0;",
          "2294:         }",
          "2295:     }",
          "2301:  ri_check:",
          "",
          "[Removed Lines]",
          "2292:             if (custom_ext_parse(s, 1, type, data, size, al) <= 0)",
          "2298:     if (PACKET_remaining(pkt) != 0)",
          "2299:         goto err;",
          "",
          "[Added Lines]",
          "2250:             if (custom_ext_parse(s, 1, type, PACKET_data(&extension),",
          "2251:                                  PACKET_remaining(&extension), al) <= 0)",
          "2256:     if (PACKET_remaining(pkt) != 0) {",
          "2259:         return 0;",
          "2260:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2310:         return 0;",
          "2311:     }",
          "2313:     return 1;",
          "2317: }",
          "2319: int ssl_parse_clienthello_tlsext(SSL *s, PACKET *pkt)",
          "",
          "[Removed Lines]",
          "2314: err:",
          "2316:     return 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/packettest.c||test/packettest.c": [
          "File: test/packettest.c -> test/packettest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     return 1;",
          "78: }",
          "80: static int test_PACKET_get_1(unsigned char buf[BUF_LEN])",
          "81: {",
          "82:     unsigned int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80: static int test_PACKET_end(unsigned char buf[BUF_LEN])",
          "81: {",
          "82:     PACKET pkt;",
          "84:     if (       !PACKET_buf_init(&pkt, buf, BUF_LEN)",
          "85:             ||  PACKET_remaining(&pkt) != BUF_LEN",
          "86:             ||  PACKET_end(&pkt) != buf + BUF_LEN",
          "87:             || !PACKET_forward(&pkt, BUF_LEN - 1)",
          "88:             || PACKET_end(&pkt) != buf + BUF_LEN",
          "89:             || !PACKET_forward(&pkt, 1)",
          "90:             || PACKET_end(&pkt) != buf + BUF_LEN) {",
          "91:         fprintf(stderr, \"test_PACKET_end() failed\\n\");",
          "92:         return 0;",
          "93:     }",
          "95:     return 1;",
          "96: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:     return 1;",
          "309: }",
          "311: static int test_PACKET_forward(unsigned char buf[BUF_LEN])",
          "312: {",
          "313:     const unsigned char *byte;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329: static int test_PACKET_contains_zero_byte()",
          "330: {",
          "331:     char buf[10], buf2[10];",
          "332:     PACKET pkt;",
          "334:     memset(buf, 'x', 10);",
          "335:     memset(buf2, 'y', 10);",
          "336:     buf2[5] = '\\0';",
          "338:     if (       !PACKET_buf_init(&pkt, (unsigned char*)buf, 10)",
          "339:             ||  PACKET_contains_zero_byte(&pkt)",
          "340:             || !PACKET_buf_init(&pkt, (unsigned char*)buf2, 10)",
          "341:             || !PACKET_contains_zero_byte(&pkt)) {",
          "342:         fprintf(stderr, \"test_PACKET_contains_zero_byte failed\\n\");",
          "343:         return 0;",
          "344:     }",
          "346:     return 1;",
          "347: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "457:     return 1;",
          "458: }",
          "460: int main(int argc, char **argv)",
          "461: {",
          "462:     unsigned char buf[BUF_LEN];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "498: static int test_PACKET_as_length_prefixed_1()",
          "499: {",
          "500:     unsigned char buf[BUF_LEN];",
          "501:     const size_t len = 16;",
          "502:     unsigned int i;",
          "503:     PACKET pkt, exact_pkt, subpkt;",
          "505:     buf[0] = len;",
          "506:     for (i = 1; i < BUF_LEN; i++) {",
          "507:         buf[i] = (i * 2) & 0xff;",
          "508:     }",
          "510:     if (       !PACKET_buf_init(&pkt, buf, BUF_LEN)",
          "511:             || !PACKET_buf_init(&exact_pkt, buf, len + 1)",
          "512:             ||  PACKET_as_length_prefixed_1(&pkt, &subpkt)",
          "513:             ||  PACKET_remaining(&pkt) != BUF_LEN",
          "514:             || !PACKET_as_length_prefixed_1(&exact_pkt, &subpkt)",
          "515:             ||  PACKET_remaining(&exact_pkt) != 0",
          "516:             ||  PACKET_remaining(&subpkt) != len) {",
          "517:         fprintf(stderr, \"test_PACKET_as_length_prefixed_1() failed\\n\");",
          "518:         return 0;",
          "519:     }",
          "521:     return 1;",
          "522: }",
          "524: static int test_PACKET_as_length_prefixed_2()",
          "525: {",
          "526:     unsigned char buf[1024];",
          "528:     unsigned int i;",
          "529:     PACKET pkt, exact_pkt, subpkt;",
          "531:     for (i = 1; i <= 1024; i++) {",
          "532:         buf[i-1] = (i * 2) & 0xff;",
          "533:     }",
          "535:     if (       !PACKET_buf_init(&pkt, buf, 1024)",
          "536:             || !PACKET_buf_init(&exact_pkt, buf, len + 2)",
          "537:             ||  PACKET_as_length_prefixed_2(&pkt, &subpkt)",
          "538:             ||  PACKET_remaining(&pkt) != 1024",
          "539:             || !PACKET_as_length_prefixed_2(&exact_pkt, &subpkt)",
          "540:             ||  PACKET_remaining(&exact_pkt) != 0",
          "541:             ||  PACKET_remaining(&subpkt) != len) {",
          "542:         fprintf(stderr, \"test_PACKET_as_length_prefixed_2() failed\\n\");",
          "543:         return 0;",
          "544:     }",
          "546:     return 1;",
          "547: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "470:     if (       !test_PACKET_buf_init()",
          "471:             || !test_PACKET_null_init()",
          "472:             || !test_PACKET_remaining(buf)",
          "473:             || !test_PACKET_equal(buf)",
          "474:             || !test_PACKET_get_1(buf)",
          "475:             || !test_PACKET_get_4(buf)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "562:             || !test_PACKET_end(buf)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "482:             || !test_PACKET_copy_all(buf)",
          "483:             || !test_PACKET_memdup(buf)",
          "484:             || !test_PACKET_strndup()",
          "485:             || !test_PACKET_forward(buf)",
          "486:             || !test_PACKET_get_length_prefixed_1()",
          "487:             || !test_PACKET_get_length_prefixed_2()",
          "489:         return 1;",
          "490:     }",
          "491:     printf(\"PASS\\n\");",
          "",
          "[Removed Lines]",
          "488:             || !test_PACKET_get_length_prefixed_3()) {",
          "",
          "[Added Lines]",
          "575:             || !test_PACKET_contains_zero_byte()",
          "579:             || !test_PACKET_get_length_prefixed_3()",
          "580:             || !test_PACKET_as_length_prefixed_1()",
          "581:             || !test_PACKET_as_length_prefixed_2()) {",
          "",
          "---------------"
        ],
        "test/recipes/80-test_ssl.t||test/recipes/80-test_ssl.t": [
          "File: test/recipes/80-test_ssl.t -> test/recipes/80-test_ssl.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "606:     subtest 'ALPN tests' => sub {",
          "607:  ######################################################################",
          "611:       SKIP: {",
          "612:    skip \"TLSv1.0 is not supported by this OpenSSL build\", 12",
          "613:        if $no_tls1;",
          "616:    ok(run(test([@ssltest, \"-bio_pair\", \"-tls1\", \"-alpn_client\", \"foo\", \"-alpn_server\", \"foo\", \"-alpn_expected\", \"foo\"])));",
          "617:    ok(run(test([@ssltest, \"-bio_pair\", \"-tls1\", \"-alpn_client\", \"foo,bar\", \"-alpn_server\", \"foo\", \"-alpn_expected\", \"foo\"])));",
          "618:    ok(run(test([@ssltest, \"-bio_pair\", \"-tls1\", \"-alpn_client\", \"bar,foo\", \"-alpn_server\", \"foo\", \"-alpn_expected\", \"foo\"])));",
          "619:    ok(run(test([@ssltest, \"-bio_pair\", \"-tls1\", \"-alpn_client\", \"bar,foo\", \"-alpn_server\", \"foo,bar\", \"-alpn_expected\", \"foo\"])));",
          "620:    ok(run(test([@ssltest, \"-bio_pair\", \"-tls1\", \"-alpn_client\", \"bar,foo\", \"-alpn_server\", \"bar,foo\", \"-alpn_expected\", \"bar\"])));",
          "621:    ok(run(test([@ssltest, \"-bio_pair\", \"-tls1\", \"-alpn_client\", \"foo,bar\", \"-alpn_server\", \"bar,foo\", \"-alpn_expected\", \"bar\"])));",
          "624:  SKIP: {",
          "625:      skip \"skipping SRP tests\", 4",
          "",
          "[Removed Lines]",
          "609:  plan tests => 12;",
          "615:    ok(run(test([@ssltest, \"-bio_pair\", \"-tls1\", \"-alpn_client\", \"foo\", \"-alpn_server\", \"bar\"])));",
          "622:    ok(run(test([@ssltest, \"-bio_pair\", \"-tls1\", \"-alpn_client\", \"baz\", \"-alpn_server\", \"bar,foo\"])));",
          "",
          "[Added Lines]",
          "609:  plan tests => 14;",
          "615:    ok(run(test([@ssltest, \"-bio_pair\", \"-tls1\", \"-alpn_client\", \"foo\"])));",
          "616:    ok(run(test([@ssltest, \"-bio_pair\", \"-tls1\", \"-alpn_server\", \"foo\"])));",
          "624:    is(run(test([@ssltest, \"-bio_pair\", \"-tls1\", \"-alpn_client\", \"foo\", \"-alpn_server\", \"bar\"])), 0,",
          "625:              \"Testing ALPN with protocol mismatch, expecting failure\");",
          "626:    is(run(test([@ssltest, \"-bio_pair\", \"-tls1\", \"-alpn_client\", \"baz\", \"-alpn_server\", \"bar,foo\"])), 0,",
          "627:              \"Testing ALPN with protocol mismatch, expecting failure\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c0d295e26306e15a92eb23a84a1802005c1c137",
      "candidate_info": {
        "commit_hash": "2c0d295e26306e15a92eb23a84a1802005c1c137",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/2c0d295e26306e15a92eb23a84a1802005c1c137",
        "files": [
          "ssl/t1_lib.c"
        ],
        "message": "Fix OCSP Status Request extension unbounded memory growth\n\nA malicious client can send an excessively large OCSP Status Request\nextension. If that client continually requests renegotiation,\nsending a large OCSP Status Request extension each time, then there will\nbe unbounded memory growth on the server. This will eventually lead to a\nDenial Of Service attack through memory exhaustion. Servers with a\ndefault configuration are vulnerable even if they do not support OCSP.\nBuilds using the \"no-ocsp\" build time option are not affected.\n\nI have also checked other extensions to see if they suffer from a similar\nproblem but I could not find any other issues.\n\nCVE-2016-6304\n\nIssue reported by Shi Lei.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ],
          "candidate": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1284:                 size -= 2;",
          "1285:                 if (dsize > size)",
          "1286:                     goto err;",
          "1287:                 while (dsize > 0) {",
          "1288:                     OCSP_RESPID *id;",
          "1289:                     int idsize;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1292:                 sk_OCSP_RESPID_pop_free(s->tlsext_ocsp_ids,",
          "1293:                                         OCSP_RESPID_free);",
          "1294:                 if (dsize > 0) {",
          "1295:                     s->tlsext_ocsp_ids = sk_OCSP_RESPID_new_null();",
          "1296:                     if (s->tlsext_ocsp_ids == NULL) {",
          "1298:                         return 0;",
          "1299:                     }",
          "1300:                 } else {",
          "1301:                     s->tlsext_ocsp_ids = NULL;",
          "1302:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1303:                         OCSP_RESPID_free(id);",
          "1304:                         goto err;",
          "1305:                     }",
          "1313:                     if (!sk_OCSP_RESPID_push(s->tlsext_ocsp_ids, id)) {",
          "1314:                         OCSP_RESPID_free(id);",
          "",
          "[Removed Lines]",
          "1306:                     if (!s->tlsext_ocsp_ids",
          "1307:                         && !(s->tlsext_ocsp_ids =",
          "1308:                              sk_OCSP_RESPID_new_null())) {",
          "1309:                         OCSP_RESPID_free(id);",
          "1311:                         return 0;",
          "1312:                     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea39b16b71e4e72a228a4535bd6d6a02c5edbc1f",
      "candidate_info": {
        "commit_hash": "ea39b16b71e4e72a228a4535bd6d6a02c5edbc1f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ea39b16b71e4e72a228a4535bd6d6a02c5edbc1f",
        "files": [
          "ssl/t1_lib.c"
        ],
        "message": "Fix OCSP Status Request extension unbounded memory growth\n\nA malicious client can send an excessively large OCSP Status Request\nextension. If that client continually requests renegotiation,\nsending a large OCSP Status Request extension each time, then there will\nbe unbounded memory growth on the server. This will eventually lead to a\nDenial Of Service attack through memory exhaustion. Servers with a\ndefault configuration are vulnerable even if they do not support OCSP.\nBuilds using the \"no-ocsp\" build time option are not affected.\n\nI have also checked other extensions to see if they suffer from a similar\nproblem but I could not find any other issues.\n\nCVE-2016-6304\n\nIssue reported by Shi Lei.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ],
          "candidate": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2316:                 size -= 2;",
          "2317:                 if (dsize > size)",
          "2318:                     goto err;",
          "2319:                 while (dsize > 0) {",
          "2320:                     OCSP_RESPID *id;",
          "2321:                     int idsize;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2324:                 sk_OCSP_RESPID_pop_free(s->tlsext_ocsp_ids,",
          "2325:                                         OCSP_RESPID_free);",
          "2326:                 if (dsize > 0) {",
          "2327:                     s->tlsext_ocsp_ids = sk_OCSP_RESPID_new_null();",
          "2328:                     if (s->tlsext_ocsp_ids == NULL) {",
          "2330:                         return 0;",
          "2331:                     }",
          "2332:                 } else {",
          "2333:                     s->tlsext_ocsp_ids = NULL;",
          "2334:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2335:                         OCSP_RESPID_free(id);",
          "2336:                         goto err;",
          "2337:                     }",
          "2345:                     if (!sk_OCSP_RESPID_push(s->tlsext_ocsp_ids, id)) {",
          "2346:                         OCSP_RESPID_free(id);",
          "",
          "[Removed Lines]",
          "2338:                     if (!s->tlsext_ocsp_ids",
          "2339:                         && !(s->tlsext_ocsp_ids =",
          "2340:                              sk_OCSP_RESPID_new_null())) {",
          "2341:                         OCSP_RESPID_free(id);",
          "2343:                         return 0;",
          "2344:                     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a59ab1c4dd27a4c7c6e88f3c33747532fd144412",
      "candidate_info": {
        "commit_hash": "a59ab1c4dd27a4c7c6e88f3c33747532fd144412",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a59ab1c4dd27a4c7c6e88f3c33747532fd144412",
        "files": [
          "ssl/t1_lib.c"
        ],
        "message": "Fix OCSP Status Request extension unbounded memory growth\n\nA malicious client can send an excessively large OCSP Status Request\nextension. If that client continually requests renegotiation,\nsending a large OCSP Status Request extension each time, then there will\nbe unbounded memory growth on the server. This will eventually lead to a\nDenial Of Service attack through memory exhaustion. Servers with a\ndefault configuration are vulnerable even if they do not support OCSP.\nBuilds using the \"no-ocsp\" build time option are not affected.\n\nI have also checked other extensions to see if they suffer from a similar\nproblem but I could not find any other issues.\n\nCVE-2016-6304\n\nIssue reported by Shi Lei.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ],
          "candidate": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2030:                     (&extension, &responder_id_list))",
          "2031:                     return 0;",
          "2033:                 while (PACKET_remaining(&responder_id_list) > 0) {",
          "2034:                     OCSP_RESPID *id;",
          "2035:                     PACKET responder_id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2037:                 sk_OCSP_RESPID_pop_free(s->tlsext_ocsp_ids,",
          "2038:                                         OCSP_RESPID_free);",
          "2039:                 if (PACKET_remaining(&responder_id_list) > 0) {",
          "2040:                     s->tlsext_ocsp_ids = sk_OCSP_RESPID_new_null();",
          "2041:                     if (s->tlsext_ocsp_ids == NULL) {",
          "2043:                         return 0;",
          "2044:                     }",
          "2045:                 } else {",
          "2046:                     s->tlsext_ocsp_ids = NULL;",
          "2047:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2041:                         return 0;",
          "2042:                     }",
          "2051:                     id_data = PACKET_data(&responder_id);",
          "2052:                     id = d2i_OCSP_RESPID(NULL, &id_data,",
          "2053:                                          PACKET_remaining(&responder_id));",
          "",
          "[Removed Lines]",
          "2044:                     if (s->tlsext_ocsp_ids == NULL",
          "2045:                         && (s->tlsext_ocsp_ids =",
          "2046:                             sk_OCSP_RESPID_new_null()) == NULL) {",
          "2048:                         return 0;",
          "2049:                     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}