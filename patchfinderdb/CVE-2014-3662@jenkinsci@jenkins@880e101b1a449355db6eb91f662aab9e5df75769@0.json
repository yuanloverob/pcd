{
  "cve_id": "CVE-2014-3662",
  "cve_desc": "Jenkins before 1.583 and LTS before 1.565.3 allows remote attackers to enumerate user names via vectors related to login attempts.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "880e101b1a449355db6eb91f662aab9e5df75769",
  "patch_info": {
    "commit_hash": "880e101b1a449355db6eb91f662aab9e5df75769",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/880e101b1a449355db6eb91f662aab9e5df75769",
    "files": [
      "core/src/main/java/hudson/model/FullDuplexHttpChannel.java"
    ],
    "message": "[FIXED SECURITY-87]\n\nDon't wait for a connection forever, which can cause the thread to hang forever if the upload link never arrives",
    "before_after_code_files": [
      "core/src/main/java/hudson/model/FullDuplexHttpChannel.java||core/src/main/java/hudson/model/FullDuplexHttpChannel.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/model/FullDuplexHttpChannel.java||core/src/main/java/hudson/model/FullDuplexHttpChannel.java": [
      "File: core/src/main/java/hudson/model/FullDuplexHttpChannel.java -> core/src/main/java/hudson/model/FullDuplexHttpChannel.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "36: import java.io.InputStream;",
      "37: import java.io.OutputStream;",
      "38: import java.util.UUID;",
      "39: import java.util.logging.Level;",
      "40: import java.util.logging.Logger;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: import java.util.concurrent.TimeUnit;",
      "40: import java.util.concurrent.TimeoutException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "78:         out.write(\"Starting HTTP duplex channel\".getBytes());",
      "79:         out.flush();",
      "85:         try {",
      "86:             channel = new Channel(\"HTTP full-duplex channel \" + uuid,",
      "",
      "[Removed Lines]",
      "82:         while(upload==null)",
      "83:             wait();",
      "",
      "[Added Lines]",
      "83:         {// wait until we have the other channel",
      "84:             long end = System.currentTimeMillis() + CONNECTION_TIMEOUT;",
      "85:             while (upload == null && System.currentTimeMillis()<end)",
      "86:                 wait(1000);",
      "88:             if (upload==null)",
      "89:                 throw new IOException(\"HTTP full-duplex channel timeout: \"+uuid);",
      "90:         }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "147:     public static boolean DIY_CHUNKING = Boolean.getBoolean(\"hudson.diyChunking\");",
      "148: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "159:     public static long CONNECTION_TIMEOUT = TimeUnit.SECONDS.toMillis(15);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8b23452c5ca529fecc6190bf2681dba60e89354e",
      "candidate_info": {
        "commit_hash": "8b23452c5ca529fecc6190bf2681dba60e89354e",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/8b23452c5ca529fecc6190bf2681dba60e89354e",
        "files": [
          "core/src/main/java/hudson/model/FullDuplexHttpChannel.java"
        ],
        "message": "[SECURITY-87] No apparent reason for CONNECTION_TIMEOUT to be public.",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/FullDuplexHttpChannel.java||core/src/main/java/hudson/model/FullDuplexHttpChannel.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/model/FullDuplexHttpChannel.java||core/src/main/java/hudson/model/FullDuplexHttpChannel.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/model/FullDuplexHttpChannel.java||core/src/main/java/hudson/model/FullDuplexHttpChannel.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/FullDuplexHttpChannel.java||core/src/main/java/hudson/model/FullDuplexHttpChannel.java": [
          "File: core/src/main/java/hudson/model/FullDuplexHttpChannel.java -> core/src/main/java/hudson/model/FullDuplexHttpChannel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "160: }",
          "",
          "[Removed Lines]",
          "159:     public static long CONNECTION_TIMEOUT = TimeUnit.SECONDS.toMillis(15);",
          "",
          "[Added Lines]",
          "159:     private static long CONNECTION_TIMEOUT = TimeUnit.SECONDS.toMillis(15);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31df138d696a954b6279cd54c7cf825a78b0576c",
      "candidate_info": {
        "commit_hash": "31df138d696a954b6279cd54c7cf825a78b0576c",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/31df138d696a954b6279cd54c7cf825a78b0576c",
        "files": [
          "core/src/main/java/hudson/model/FullDuplexHttpChannel.java"
        ],
        "message": "[SECURITY-87]\n\nAfter talking to Jesse, he's OK with me bringing it back to public so\nlong as we don't allow other programmatic dependencies to it.\n\nThe intention of leaving them mutable is to allow admins to play with\nthis in the groovy script during the initialization and at runtime.\n\nGroovy currently ignores the private access modifier anyway, but that is\nconsidered as a bug in the upstream\n(https://jira.codehaus.org/browse/GROOVY-3010)",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/FullDuplexHttpChannel.java||core/src/main/java/hudson/model/FullDuplexHttpChannel.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/model/FullDuplexHttpChannel.java||core/src/main/java/hudson/model/FullDuplexHttpChannel.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/model/FullDuplexHttpChannel.java||core/src/main/java/hudson/model/FullDuplexHttpChannel.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/FullDuplexHttpChannel.java||core/src/main/java/hudson/model/FullDuplexHttpChannel.java": [
          "File: core/src/main/java/hudson/model/FullDuplexHttpChannel.java -> core/src/main/java/hudson/model/FullDuplexHttpChannel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import hudson.remoting.Channel.Mode;",
          "29: import hudson.util.ChunkedOutputStream;",
          "30: import hudson.util.ChunkedInputStream;",
          "31: import org.kohsuke.stapler.StaplerRequest;",
          "32: import org.kohsuke.stapler.StaplerResponse;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import org.kohsuke.accmod.Restricted;",
          "32: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:     public static boolean DIY_CHUNKING = Boolean.getBoolean(\"hudson.diyChunking\");",
          "160: }",
          "",
          "[Removed Lines]",
          "159:     private static long CONNECTION_TIMEOUT = TimeUnit.SECONDS.toMillis(15);",
          "",
          "[Added Lines]",
          "156:     @Restricted(NoExternalUse.class)",
          "162:     @Restricted(NoExternalUse.class)",
          "163:     public static long CONNECTION_TIMEOUT = TimeUnit.SECONDS.toMillis(15);",
          "",
          "---------------"
        ]
      }
    }
  ]
}