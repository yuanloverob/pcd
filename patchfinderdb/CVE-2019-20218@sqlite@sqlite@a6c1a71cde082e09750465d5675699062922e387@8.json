{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d4cd292c2aa7e453ee3879d47df0c0503b47db75",
      "candidate_info": {
        "commit_hash": "d4cd292c2aa7e453ee3879d47df0c0503b47db75",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d4cd292c2aa7e453ee3879d47df0c0503b47db75",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Bug fix with INSERT using an explicit column list on a table with a non-final STORED column.\n\nFossilOrigin-Name: 61b4459ae6a6cc182c11abbc8b1dd629f77beb088d7ccad5e563d8d4769056df",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fe7517bf4d360597576ab9aba29627d7926d23f2bbbfb3e7bf4d32761617574c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "698:   if( pColumn ){",
          "699:     for(i=0; i<pColumn->nId; i++){",
          "700:       pColumn->a[i].idx = -1;",
          "",
          "[Removed Lines]",
          "697:   bIdListInOrder = (pTab->tabFlags & TF_OOOHidden)==0;",
          "",
          "[Added Lines]",
          "697:   bIdListInOrder = (pTab->tabFlags & (TF_OOOHidden|TF_HasStored))==0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "112e174020809d0b91249716fb9de4aa3ee7437d",
      "candidate_info": {
        "commit_hash": "112e174020809d0b91249716fb9de4aa3ee7437d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/112e174020809d0b91249716fb9de4aa3ee7437d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test1.c",
          "test/releasetest.tcl"
        ],
        "message": "Avoid a sanitizer error in test1.c. Have releasetest.tcl/wapptest.tcl create a file called \"makecommand.sh\" that can be used to rerun a test from the command line.\n\nFossilOrigin-Name: 4de4480ffdea1e923c4b964692ccde92d713c8b6c056bb04bddf1ff55ee891ec",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test1.c||src/test1.c",
          "test/releasetest.tcl||test/releasetest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ee886600297c2a03d9d1d10db88d3d107b48e5d4de5e5d91b0ab16cc7c447ede",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4272:   }",
          "4273:   pzTail = objc>=5 ? &zTail : 0;",
          "4274:   rc = sqlite3_prepare_v2(db, zCopy, bytes, &pStmt, pzTail);",
          "4275:   free(zCopy);",
          "4278:   assert(rc==SQLITE_OK || pStmt==0);",
          "4279:   Tcl_ResetResult(interp);",
          "4280:   if( sqlite3TestErrCode(interp, db, rc) ) return TCL_ERROR;",
          "4282:     if( bytes>=0 ){",
          "4283:       bytes = bytes - (int)(zTail-zSql);",
          "4284:     }",
          "",
          "[Removed Lines]",
          "4276:   zTail = &zSql[(zTail - zCopy)];",
          "4281:   if( rc==SQLITE_OK && zTail && objc>=5 ){",
          "",
          "[Added Lines]",
          "4275:   if( objc>=5 ){",
          "4276:     zTail = &zSql[(zTail - zCopy)];",
          "4277:   }",
          "4283:   if( rc==SQLITE_OK && objc>=5 && zTail ){",
          "",
          "---------------"
        ],
        "test/releasetest.tcl||test/releasetest.tcl": [
          "File: test/releasetest.tcl -> test/releasetest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "501:       unset -nocomplain savedEnv(TCLSH_CMD)",
          "502:     }",
          "503:     set ::env(TCLSH_CMD) [file nativename [info nameofexecutable]]",
          "505:     if {[info exists savedEnv(TCLSH_CMD)]} {",
          "506:       set ::env(TCLSH_CMD) $savedEnv(TCLSH_CMD)",
          "507:     } else {",
          "",
          "[Removed Lines]",
          "504:     set rc [catch [makeCommand $testtarget $makeOpts $cflags $opts]]",
          "",
          "[Added Lines]",
          "505:     # Create a file called \"makecommand.sh\" containing the text of",
          "506:     # the make command line.",
          "507:     catch {",
          "508:       set cmd [makeCommand $testtarget $makeOpts $cflags $opts]",
          "509:       set fd [open makecommand.sh w]",
          "510:       foreach e $cmd {",
          "511:         if {[string first \" \" $e]>=0} {",
          "512:           puts -nonewline $fd \"\\\"$e\\\"\"",
          "513:         } else {",
          "514:           puts -nonewline $fd $e",
          "515:         }",
          "516:         puts -nonewline $fd \" \"",
          "517:       }",
          "518:       puts $fd \"\"",
          "519:       close $fd",
          "520:     } msg",
          "522:     # Run the make command.",
          "523:     set rc [catch {trace_cmd exec {*}$cmd >>& test.log} msg]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "737: # specified targets, compiler flags, and options.",
          "738: #",
          "739: proc makeCommand { targets makeOpts cflags opts } {",
          "741:   if {$::MSVC} {",
          "742:     set nmakeDir [file nativename $::SRCDIR]",
          "743:     set nmakeFile [file nativename [file join $nmakeDir Makefile.msc]]",
          "",
          "[Removed Lines]",
          "740:   set result [list trace_cmd exec]",
          "",
          "[Added Lines]",
          "759:   set result [list]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "758:   foreach target $targets {",
          "759:     lappend result $target",
          "760:   }",
          "762: }",
          "764: # The following procedure prints its arguments if ::TRACE is true.",
          "",
          "[Removed Lines]",
          "761:   lappend result CFLAGS=$cflags OPTS=$opts >>& test.log",
          "",
          "[Added Lines]",
          "780:   lappend result CFLAGS=$cflags OPTS=$opts",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87c889cfa5067f433259794f9796e6b44232bbd6",
      "candidate_info": {
        "commit_hash": "87c889cfa5067f433259794f9796e6b44232bbd6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/87c889cfa5067f433259794f9796e6b44232bbd6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "In the CLI, give better error messages if something goes wrong with the \".dbinfo\" command.\n\nFossilOrigin-Name: 3649a77b79001ea6c5defe882f9934521b20b9d36aab26d03b5d42006c7fa228",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b9e2393cf201e3fc24519c5ae65d0a5953147d78884e53d44a7958747b4a7e13",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "4773:      { \"schema size:\",",
          "4774:        \"SELECT total(length(sql)) FROM %s\" },",
          "4775:   };",
          "4777:   unsigned iDataVersion;",
          "4778:   char *zSchemaTab;",
          "4779:   char *zDb = nArg>=2 ? azArg[1] : \"main\";",
          "",
          "[Removed Lines]",
          "4776:   int i;",
          "",
          "[Added Lines]",
          "4776:   int i, rc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4781:   unsigned char aHdr[100];",
          "4782:   open_db(p, 0);",
          "4783:   if( p->db==0 ) return 1;",
          "4786:   sqlite3_bind_text(pStmt, 1, zDb, -1, SQLITE_STATIC);",
          "4787:   if( sqlite3_step(pStmt)==SQLITE_ROW",
          "4788:    && sqlite3_column_bytes(pStmt,0)>100",
          "",
          "[Removed Lines]",
          "4784:   sqlite3_prepare_v2(p->db,\"SELECT data FROM sqlite_dbpage(?1) WHERE pgno=1\",",
          "4785:                      -1, &pStmt, 0);",
          "",
          "[Added Lines]",
          "4784:   rc = sqlite3_prepare_v2(p->db,",
          "4785:              \"SELECT data FROM sqlite_dbpage(?1) WHERE pgno=1\",",
          "4786:              -1, &pStmt, 0);",
          "4787:   if( rc ){",
          "4788:     if( !sqlite3_compileoption_used(\"ENABLE_DBPAGE_VTAB\") ){",
          "4789:       utf8_printf(stderr, \"the \\\".dbinfo\\\" command requires the \"",
          "4790:                           \"-DSQLITE_ENABLE_DBPAGE_VTAB compile-time options\\n\");",
          "4791:     }else{",
          "4792:       utf8_printf(stderr, \"error: %s\\n\", sqlite3_errmsg(p->db));",
          "4793:     }",
          "4794:     sqlite3_finalize(pStmt);",
          "4795:     return 1;",
          "4796:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "610f11de25993960ff616edde0f5dc47d1c0b56e",
      "candidate_info": {
        "commit_hash": "610f11de25993960ff616edde0f5dc47d1c0b56e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/610f11de25993960ff616edde0f5dc47d1c0b56e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Fix a typo in a comment.  No changes to code.\n\nFossilOrigin-Name: c2f50aa4e7bad8821e91a7490283dd53e44047d10a8cfebc3e2da26c770a5218",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cc5ab96715ebb1089b4e9aa647badd2510aaa056f26004718f921f4ac07e2f93",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c"
        ]
      }
    },
    {
      "candidate_hash": "c204d81a6c043305cfae10e7e9c9338d3702d1a6",
      "candidate_info": {
        "commit_hash": "c204d81a6c043305cfae10e7e9c9338d3702d1a6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c204d81a6c043305cfae10e7e9c9338d3702d1a6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/treeview.c"
        ],
        "message": "Enhance treeview to show SOFT-COLLATE for TK_COLLATE operators that omit the EP_Collate flag.\n\nFossilOrigin-Name: a97804620a27acc30bebd2aaa04e38f2f36de48b0931038ca8bdc9cb0c36b8f4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/treeview.c||src/treeview.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 36997c4ade2ef3a274cd1ac52b44118fb3a05325adb650b7b338ecb43d060575",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "536:     }",
          "538:     case TK_COLLATE: {",
          "540:       sqlite3TreeViewExpr(pView, pExpr->pLeft, 0);",
          "541:       break;",
          "542:     }",
          "",
          "[Removed Lines]",
          "539:       sqlite3TreeViewLine(pView, \"COLLATE %Q\", pExpr->u.zToken);",
          "",
          "[Added Lines]",
          "543:       sqlite3TreeViewLine(pView, \"%sCOLLATE %Q%s\",",
          "544:         !ExprHasProperty(pExpr, EP_Collate) ? \"SOFT-\" : \"\",",
          "545:         pExpr->u.zToken, zFlgs);",
          "",
          "---------------"
        ]
      }
    }
  ]
}