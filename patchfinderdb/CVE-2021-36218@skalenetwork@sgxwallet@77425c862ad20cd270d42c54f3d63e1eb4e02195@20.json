{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e442d9aec5c49ba10880946aedf5854e7a2defe9",
      "candidate_info": {
        "commit_hash": "e442d9aec5c49ba10880946aedf5854e7a2defe9",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/e442d9aec5c49ba10880946aedf5854e7a2defe9",
        "files": [
          "VERSION",
          "secure_enclave/AESUtils.c",
          "secure_enclave/AESUtils.h",
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-3039",
        "before_after_code_files": [
          "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
          "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
            "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
            "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
          "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include \"AESUtils.h\"",
          "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
          "",
          "[Removed Lines]",
          "33: sgx_aes_gcm_128bit_key_t AES_key;",
          "34: sgx_aes_gcm_128bit_key_t AES_DH_key;",
          "",
          "[Added Lines]",
          "33: sgx_aes_gcm_128bit_key_t AES_key[32];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
          "79:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
          "80:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
          "81:                                                      NULL, 0,",
          "",
          "[Removed Lines]",
          "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
          "",
          "[Added Lines]",
          "77:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&(AES_key[16]), (uint8_t*)message, len,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:         return -2;",
          "125:   }",
          "128:                                                    encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
          "129:                                                    (unsigned char*) message,",
          "130:                                                    encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
          "",
          "[Removed Lines]",
          "127:   sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_key,",
          "",
          "[Added Lines]",
          "126:   sgx_status_t status = sgx_rijndael128GCM_decrypt(&(AES_key[16]),",
          "",
          "---------------"
        ],
        "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
          "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #ifndef SGXD_AESUTILS_H",
          "25: #define SGXD_AESUTILS_H",
          "29: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
          "30:                 unsigned char type, unsigned char exportable, uint64_t* resultLen);",
          "",
          "[Removed Lines]",
          "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
          "",
          "[Added Lines]",
          "27: extern sgx_aes_gcm_128bit_key_t AES_key[32];",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "291:     RANDOM_CHAR_BUF(SEK_raw, SGX_AESGCM_KEY_SIZE);",
          "293:     carray2Hex((uint8_t*) SEK_raw, SGX_AESGCM_KEY_SIZE, sek_hex);",
          "297:     sealHexSEK(errStatus, errString, encrypted_sek, enc_len, sek_hex);",
          "",
          "[Removed Lines]",
          "294:     memcpy(AES_key, SEK_raw, SGX_AESGCM_KEY_SIZE);",
          "",
          "[Added Lines]",
          "294:     memcpy(AES_key[16], SEK_raw, SGX_AESGCM_KEY_SIZE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "331:     uint64_t len;",
          "336:     SET_SUCCESS",
          "337:     clean:",
          "",
          "[Removed Lines]",
          "334:     hex2carray(aes_key_hex, &len, (uint8_t *) AES_key);",
          "",
          "[Added Lines]",
          "334:     hex2carray(aes_key_hex, &len, (uint8_t *) (AES_key[16]));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "349:     CHECK_STATE(sek_hex);",
          "351:     uint64_t len;",
          "355:     sealHexSEK(errStatus, errString, encrypted_sek, enc_len, (char *)sek_hex);",
          "",
          "[Removed Lines]",
          "352:     hex2carray(sek_hex, &len, (uint8_t *) AES_key);",
          "",
          "[Added Lines]",
          "352:     hex2carray(sek_hex, &len, (uint8_t *) (AES_key[16]));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "133138b157733bf35c1ddec74e0a69da17d24629",
      "candidate_info": {
        "commit_hash": "133138b157733bf35c1ddec74e0a69da17d24629",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/133138b157733bf35c1ddec74e0a69da17d24629",
        "files": [
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-3151-sgxwallet-cant-decrypt-key",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:     sgx_misc_select_t misc = 0xF0000000;",
          "219:     sgx_status_t status = sgx_seal_data_ex(SGX_KEYPOLICY_MRENCLAVE, attribute_mask, misc, 0, NULL, hex_aes_key_length + 1, (uint8_t *) SEK_hex, sealedLen,",
          "220:                                         (sgx_sealed_data_t *) encrypted_SEK);",
          "221:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
          "238:     SET_SUCCESS",
          "",
          "[Removed Lines]",
          "223:     int len = 0;",
          "225:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
          "226:     int decLen;",
          "228:     status = sgx_unseal_data(encrypted_SEK, NULL, NULL, unsealedKey, &decLen );",
          "230:     SAFE_CHAR_BUF(errS, BUF_LEN);",
          "232:     return;",
          "",
          "[Added Lines]",
          "225:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len(encrypted_SEK);",
          "227:     CHECK_STATE(encrypt_text_length = hex_aes_key_length + 1);",
          "229:     int len = 0;",
          "231:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
          "232:     int decLen = BUF_LEN;",
          "234:     uint32_t add_text_length = sgx_get_add_mac_txt_len(encrypted_SEK);",
          "235:     CHECK_STATE(add_text_length == 0);",
          "237:     CHECK_STATE(sgx_is_within_enclave(encrypted_SEK,sizeof(sgx_sealed_data_t)));",
          "238:     status = sgx_unseal_data(encrypted_SEK, NULL, NULL, unsealedKey, &decLen );",
          "239:     CHECK_STATUS(\"seal/unseal SEK failed after SEK generation in unseal\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d56b136066bf2ac0f9eb096c8eba8e80615746b",
      "candidate_info": {
        "commit_hash": "1d56b136066bf2ac0f9eb096c8eba8e80615746b",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/1d56b136066bf2ac0f9eb096c8eba8e80615746b",
        "files": [
          "BLSCrypto.h",
          "SGXWalletServer.h",
          "ServerInit.cpp",
          "ServerInit.h",
          "oc_alloc.c",
          "secure_enclave/DKGUtils.cpp",
          "secure_enclave/EnclaveCommon.cpp",
          "secure_enclave/EnclaveCommon.h",
          "secure_enclave/secure_enclave.c",
          "sgxwallet.c",
          "testw.cpp"
        ],
        "message": "SKALE-2454-add-logs-to-enclave",
        "before_after_code_files": [
          "BLSCrypto.h||BLSCrypto.h",
          "SGXWalletServer.h||SGXWalletServer.h",
          "ServerInit.cpp||ServerInit.cpp",
          "ServerInit.h||ServerInit.h",
          "oc_alloc.c||oc_alloc.c",
          "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp",
          "secure_enclave/EnclaveCommon.cpp||secure_enclave/EnclaveCommon.cpp",
          "secure_enclave/EnclaveCommon.h||secure_enclave/EnclaveCommon.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "sgxwallet.c||sgxwallet.c",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.h||BLSCrypto.h": [
          "File: BLSCrypto.h -> BLSCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #define EXTERNC",
          "31: #endif",
          "39: EXTERNC bool bls_sign(const char* encryptedKeyHex, const char* hashHex, size_t t, size_t n,",
          "40:         size_t signerIndex, char* _sig);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include \"stddef.h\"",
          "34: #include \"stdint.h\"",
          "",
          "---------------"
        ],
        "SGXWalletServer.h||SGXWalletServer.h": [
          "File: SGXWalletServer.h -> SGXWalletServer.h"
        ],
        "ServerInit.cpp||ServerInit.cpp": [
          "File: ServerInit.cpp -> ServerInit.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: }",
          "67:     eid = 0;",
          "68:     updated = 0;",
          "",
          "[Removed Lines]",
          "65: void initEnclave() {",
          "",
          "[Added Lines]",
          "65: void initEnclave(uint32_t _logLevel) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:     spdlog::info(\"Enclave created and started successfully\");",
          "99:     if (status != SGX_SUCCESS) {",
          "100:         spdlog::error(\"trustedEnclaveInit failed: {}\", status);",
          "101:         exit(1);",
          "",
          "[Removed Lines]",
          "98:     status = trustedEnclaveInit(eid, 0);",
          "",
          "[Added Lines]",
          "98:     status = trustedEnclaveInit(eid, _logLevel);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109: int sgxServerInited = 0;",
          "113:     cout << \"Running sgxwallet version:\" << SGXWALLET_VERSION << endl;",
          "114:     CHECK_STATE(sgxServerInited == 0)",
          "115:     sgxServerInited = 1;",
          "117:     initUserSpace();",
          "118:     initSEK();",
          "",
          "[Removed Lines]",
          "111: void initAll(bool _checkCert, bool _autoSign) {",
          "116:     initEnclave();",
          "",
          "[Added Lines]",
          "111: void initAll(uint32_t  _logLevel, bool _checkCert, bool _autoSign) {",
          "116:     initEnclave(_logLevel);",
          "",
          "---------------"
        ],
        "ServerInit.h||ServerInit.h": [
          "File: ServerInit.h -> ServerInit.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #ifndef SGXWALLET_SERVERINIT_H",
          "25: #define SGXWALLET_SERVERINIT_H",
          "27: #ifdef __cplusplus",
          "28: #define EXTERNC extern \"C\"",
          "29: #else",
          "30: #define EXTERNC",
          "31: #endif",
          "35: EXTERNC void initUserSpace();",
          "",
          "[Removed Lines]",
          "33: EXTERNC void initAll(bool _checkCert, bool _autoSign);",
          "37: EXTERNC void initEnclave();",
          "",
          "[Added Lines]",
          "27: #include \"stdint.h\"",
          "35: EXTERNC void initAll(uint32_t  _logLevel, bool _checkCert, bool _autoSign);",
          "39: EXTERNC void initEnclave(uint32_t _logLevel);",
          "",
          "---------------"
        ],
        "oc_alloc.c||oc_alloc.c": [
          "File: oc_alloc.c -> oc_alloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: }",
          "",
          "[Removed Lines]",
          "50:     fprintf(stderr, \"***ENCLAVE_LOG***: %s\", str);",
          "",
          "[Added Lines]",
          "50:     fprintf(stderr, \"%s\", str);",
          "",
          "---------------"
        ],
        "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp": [
          "File: secure_enclave/DKGUtils.cpp -> secure_enclave/DKGUtils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #include \"DHDkg.h\"",
          "46:     mpz_t t;",
          "47:     mpz_init(t);",
          "",
          "[Removed Lines]",
          "44: std::string stringFromFr(libff::alt_bn128_Fr& _el) {",
          "",
          "[Added Lines]",
          "40: using namespace  std;",
          "45: string stringFromFr(libff::alt_bn128_Fr& _el) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     char *tmp = mpz_get_str(arr, 10, t);",
          "54:     mpz_clear(t);",
          "57: }",
          "59: template<class T>",
          "61:   mpz_t t;",
          "62:   mpz_init(t);",
          "",
          "[Removed Lines]",
          "56:     return std::string(tmp);",
          "60: std::string ConvertToString(T field_elem, int base = 10) {",
          "",
          "[Added Lines]",
          "57:     return string(tmp);",
          "61: string ConvertToString(T field_elem, int base = 10) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:   char * tmp = mpz_get_str(arr, base, t);",
          "69:   mpz_clear(t);",
          "73:   return output;",
          "74: }",
          "78:   result += ConvertToString(elem.X.c0);",
          "79:   result += delim;",
          "80:   result += ConvertToString(elem.X.c1);",
          "",
          "[Removed Lines]",
          "71:   std::string output = tmp;",
          "76: std::string ConvertG2ToString(const libff::alt_bn128_G2 & elem, int base = 10, std::string delim = \":\"){",
          "77:   std::string result;",
          "",
          "[Added Lines]",
          "72:   string output = tmp;",
          "77: string ConvertG2ToString(const libff::alt_bn128_G2 & elem, int base = 10, string delim = \":\"){",
          "78:   string result;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "86:   return result;",
          "87: }",
          "92:     delim.push_back(symbol);",
          "94:     size_t prev = 0, pos = 0;",
          "95:     do",
          "96:     {",
          "97:         pos = str.find(delim, prev);",
          "100:         if (!token.empty()) {",
          "101:             libff::alt_bn128_Fr coeff(token.c_str());",
          "102:             tokens.push_back(coeff);",
          "",
          "[Removed Lines]",
          "89: std::vector<libff::alt_bn128_Fr> SplitStringToFr(const char* coeffs, const char symbol){",
          "90:     std::string str(coeffs);",
          "91:     std::string delim;",
          "93:     std::vector<libff::alt_bn128_Fr> tokens;",
          "98:         if (pos == std::string::npos) pos = str.length();",
          "99:         std::string token = str.substr(prev, pos-prev);",
          "",
          "[Added Lines]",
          "90: vector<libff::alt_bn128_Fr> SplitStringToFr(const char* coeffs, const char symbol){",
          "91:     string str(coeffs);",
          "92:     string delim;",
          "94:     vector<libff::alt_bn128_Fr> tokens;",
          "99:         if (pos == string::npos) pos = str.length();",
          "100:         string token = str.substr(prev, pos-prev);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "111: int gen_dkg_poly( char* secret, unsigned _t ){",
          "112:   libff::init_alt_bn128_params();",
          "114:   for (size_t i = 0; i < _t; ++i) {",
          "115:      libff::alt_bn128_Fr cur_coef = libff::alt_bn128_Fr::random_element();",
          "",
          "[Removed Lines]",
          "113:   std::string result;",
          "",
          "[Added Lines]",
          "114:   string result;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "129:   return 0;",
          "130: }",
          "135:   libff::alt_bn128_Fr value = libff::alt_bn128_Fr::zero();",
          "",
          "[Removed Lines]",
          "132: libff::alt_bn128_Fr PolynomialValue(const std::vector<libff::alt_bn128_Fr>& pol, libff::alt_bn128_Fr point, unsigned _t) {",
          "",
          "[Added Lines]",
          "133: libff::alt_bn128_Fr PolynomialValue(const vector<libff::alt_bn128_Fr>& pol, libff::alt_bn128_Fr point, unsigned _t) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "149: void calc_secret_shares(const char* decrypted_coeffs, char * secret_shares,      // calculates secret shares in base 10 to a string secret_shares,",
          "150:     unsigned _t, unsigned _n) {                                                 // separated by \":\"",
          "153:   char symbol = ':';",
          "156:     for (size_t i = 0; i < _n; ++i) {",
          "157:     libff::alt_bn128_Fr secret_share = PolynomialValue(poly, libff::alt_bn128_Fr(i + 1), _t);",
          "",
          "[Removed Lines]",
          "152:   std::string result;",
          "154:   std::vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_coeffs, symbol);",
          "",
          "[Added Lines]",
          "153:   string result;",
          "155:   vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_coeffs, symbol);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "168:   libff::init_alt_bn128_params();",
          "169:   char symbol = ':';",
          "171:   if ( poly.size() != _t){",
          "172:     return 1;",
          "173:   }",
          "175:   libff::alt_bn128_Fr secret_share = PolynomialValue(poly, libff::alt_bn128_Fr(ind), _t);",
          "177:   int n_zeroes = 64 - cur_share.size();",
          "178:   cur_share.insert(0, n_zeroes, '0');",
          "",
          "[Removed Lines]",
          "170:   std::vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_coeffs, symbol);",
          "176:   std::string cur_share = ConvertToString(secret_share, 16);//stringFromFr(secret_share);",
          "",
          "[Added Lines]",
          "171:   vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_coeffs, symbol);",
          "177:   string cur_share = ConvertToString(secret_share, 16);//stringFromFr(secret_share);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "188:   libff::init_alt_bn128_params();",
          "189:   char symbol = ':';",
          "196:   libff::alt_bn128_Fr secret_share = PolynomialValue(poly, libff::alt_bn128_Fr(ind), _t);",
          "198:   libff::alt_bn128_G2 secret_shareG2 = secret_share * libff::alt_bn128_G2::one();",
          "202:   strncpy(s_shareG2, secret_shareG2_str.c_str(), secret_shareG2_str.length() + 1);",
          "",
          "[Removed Lines]",
          "190:   std::vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_coeffs, symbol);",
          "200:   std::string secret_shareG2_str = ConvertG2ToString(secret_shareG2);",
          "",
          "[Added Lines]",
          "191:   vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_coeffs, symbol);",
          "201:   string secret_shareG2_str = ConvertG2ToString(secret_shareG2);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "223:   secret_shareG2.to_affine_coordinates();",
          "227:   strncpy(s_shareG2, secret_shareG2_str.c_str(), secret_shareG2_str.length() + 1);",
          "",
          "[Removed Lines]",
          "225:   std::string secret_shareG2_str = ConvertG2ToString(secret_shareG2);",
          "",
          "[Added Lines]",
          "226:   string secret_shareG2_str = ConvertG2ToString(secret_shareG2);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "233:                         unsigned _t) {",
          "234:   libff::init_alt_bn128_params();",
          "237:   char symbol = ':';",
          "239:   if (poly.size() != _t){",
          "240:     return 1;",
          "241:   }",
          "242:   for (size_t i = 0; i < _t; ++i) {",
          "243:     libff::alt_bn128_G2 pub_share = poly.at(i) * libff::alt_bn128_G2::one() ;",
          "244:     pub_share.to_affine_coordinates();",
          "246:     result += pub_share_str + \",\";",
          "247:   }",
          "248:   strncpy(public_shares, result.c_str(), result.length());",
          "",
          "[Removed Lines]",
          "236:   std::string result;",
          "238:   std::vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_coeffs, symbol);",
          "245:     std::string pub_share_str = ConvertG2ToString(pub_share);",
          "",
          "[Added Lines]",
          "237:   string result;",
          "239:   vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_coeffs, symbol);",
          "246:     string pub_share_str = ConvertG2ToString(pub_share);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "250: }",
          "254:   mpz_t dec;",
          "255:   mpz_init(dec);",
          "",
          "[Removed Lines]",
          "253: std::string ConvertHexToDec(std::string hex_str){",
          "",
          "[Added Lines]",
          "254: string ConvertHexToDec(string hex_str){",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "270: int Verification ( char * public_shares, mpz_t decr_secret_share, int _t, int ind ){",
          "273:   libff::init_alt_bn128_params();",
          "276:   uint64_t share_length = 256;",
          "277:   uint8_t coord_length = 64;",
          "",
          "[Removed Lines]",
          "272:   std::string pub_shares_str = public_shares;",
          "275:   std::vector<libff::alt_bn128_G2> pub_shares;",
          "",
          "[Added Lines]",
          "273:   string pub_shares_str = public_shares;",
          "276:   vector<libff::alt_bn128_G2> pub_shares;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "280:     libff::alt_bn128_G2 pub_share;",
          "282:     uint64_t pos0 = share_length * i;",
          "287:     if (x_c0_str == \"false\" || x_c1_str == \"false\" || y_c0_str == \"false\" || y_c1_str == \"false\"){",
          "288:       return 2;",
          "289:     }",
          "",
          "[Removed Lines]",
          "283:     std::string x_c0_str = ConvertHexToDec(pub_shares_str.substr(pos0, coord_length));",
          "284:     std::string x_c1_str = ConvertHexToDec(pub_shares_str.substr(pos0 + coord_length, coord_length));",
          "285:     std::string y_c0_str = ConvertHexToDec(pub_shares_str.substr(pos0 + 2 * coord_length, coord_length));",
          "286:     std::string y_c1_str = ConvertHexToDec(pub_shares_str.substr(pos0 + 3 * coord_length, coord_length));",
          "",
          "[Added Lines]",
          "284:     string x_c0_str = ConvertHexToDec(pub_shares_str.substr(pos0, coord_length));",
          "285:     string x_c1_str = ConvertHexToDec(pub_shares_str.substr(pos0 + coord_length, coord_length));",
          "286:     string y_c0_str = ConvertHexToDec(pub_shares_str.substr(pos0 + 2 * coord_length, coord_length));",
          "287:     string y_c1_str = ConvertHexToDec(pub_shares_str.substr(pos0 + 3 * coord_length, coord_length));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "367:   libff::alt_bn128_G2 public_key = bls_skey * libff::alt_bn128_G2::one();",
          "368:   public_key.to_affine_coordinates();",
          "372:   strncpy(pub_key, result.c_str(), result.length());",
          "",
          "[Removed Lines]",
          "370:   std::string result = ConvertG2ToString(public_key);",
          "",
          "[Added Lines]",
          "371:   string result = ConvertG2ToString(public_key);",
          "",
          "---------------"
        ],
        "secure_enclave/EnclaveCommon.cpp||secure_enclave/EnclaveCommon.cpp": [
          "File: secure_enclave/EnclaveCommon.cpp -> secure_enclave/EnclaveCommon.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "277: enum log_level {L_TRACE = 0, L_DEBUG = 1, L_INFO = 2,L_WARNING = 3,  L_ERROR = 4 };",
          "282: void logMsg(log_level _level, char* _msg) {",
          "285:         return;",
          "287:     if (!_msg) {",
          "",
          "[Removed Lines]",
          "280: uint32_t logLevel = 2;",
          "284:     if (_level < logLevel)",
          "",
          "[Added Lines]",
          "280: uint32_t globalLogLevel_ = 2;",
          "284:     if (_level < globalLogLevel_)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "289:         return;",
          "290:     }",
          "292:     oc_printf(_msg);",
          "294: }",
          "",
          "[Removed Lines]",
          "297: EXTERNC void LOG_INFO(char* msg) {};",
          "298: EXTERNC void LOG_WARNING(char* _msg) {};",
          "299: EXTERNC void LOG_ERROR(char* _msg) {};",
          "300: EXTERNC void LOG_DEBUG(char* _msg) {};",
          "301: EXTERNC void LOG_TRACE(char* _msg) {};",
          "",
          "[Added Lines]",
          "292:     oc_printf(\"***ENCLAVE_LOG***:\");",
          "294:     oc_printf(\"\\n\");",
          "298: EXTERNC void LOG_INFO(char* _msg) {",
          "299:     logMsg(L_INFO, _msg);",
          "300: };",
          "301: EXTERNC void LOG_WARNING(char* _msg) {",
          "302:     logMsg(L_WARNING, _msg);",
          "303: };",
          "305: EXTERNC void LOG_ERROR(char* _msg) {",
          "306:     logMsg(L_ERROR, _msg);",
          "307: };",
          "308: EXTERNC void LOG_DEBUG(char* _msg) {",
          "309:     logMsg(L_DEBUG, _msg);",
          "310: };",
          "311: EXTERNC void LOG_TRACE(char* _msg) {",
          "312:     logMsg(L_TRACE, _msg);",
          "313: };",
          "",
          "---------------"
        ],
        "secure_enclave/EnclaveCommon.h||secure_enclave/EnclaveCommon.h": [
          "File: secure_enclave/EnclaveCommon.h -> secure_enclave/EnclaveCommon.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: EXTERNC void LOG_TRACE(char* _msg);",
          "64: #endif //SGXWALLET_ENCLAVECOMMON_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: extern uint32_t globalLogLevel_;",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #include \"EnclaveConstants.h\"",
          "59: uint8_t decryptedDkgPoly[DKG_BUFER_LENGTH];",
          "",
          "[Removed Lines]",
          "57: #include \"EnclaveConstants.h\"",
          "",
          "[Added Lines]",
          "57: #include \"EnclaveCommon.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76: void trustedEnclaveInit(uint32_t _logLevel) {",
          "80:     oc_realloc_func = &reallocate_function;",
          "81:     oc_free_func = &free_function;",
          "",
          "[Removed Lines]",
          "79:     oc_printf(\"Initing enclave:  library\\n\");",
          "",
          "[Added Lines]",
          "78:     LOG_DEBUG (__FUNCTION__);",
          "80:     globalLogLevel_ = _logLevel;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:     mp_set_memory_functions(NULL, oc_realloc_func, oc_free_func);",
          "86:     enclave_init();",
          "87: }",
          "89: void free_function(void *ptr, size_t sz) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:     LOG_DEBUG(\"SUCCESS\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "134: void trustedGenerateEcdsaKey(int *errStatus, char *err_string,",
          "135:                         uint8_t *encrypted_key, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
          "138:     domain_parameters curve = domain_parameters_init();",
          "139:     domain_parameters_load_curve(curve, secp256k1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "210: void trustedGetPublicEcdsaKey(int *errStatus, char *err_string,",
          "211:                           uint8_t *encrypted_key, uint32_t dec_len, char *pub_key_x, char *pub_key_y) {",
          "215:     domain_parameters curve = domain_parameters_init();",
          "216:     domain_parameters_load_curve(curve, secp256k1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "282: void trustedEcdsaSign(int *errStatus, char *err_string, uint8_t *encrypted_key, uint32_t dec_len,",
          "283:                  unsigned char *hash, char *sig_r, char *sig_s, uint8_t *sig_v, int base) {",
          "285:     char* arr_m = NULL;",
          "286:     char* arr_r = NULL;",
          "287:     char* arr_s;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "292:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "380: void trustedEncryptKey(int *errStatus, char *err_string, char *key,",
          "381:                  uint8_t *encrypted_key, uint32_t *enc_len) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "392:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "446: void trustedDecryptKey(int *errStatus, char *err_string, uint8_t *encrypted_key,",
          "447:                  uint32_t enc_len, char *key) {",
          "451:     uint32_t decLen;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "458:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "501:                       char *_hashY, char *signature) {",
          "504:     char key[BUF_LEN];",
          "505:     char *sig = (char *) calloc(BUF_LEN, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "502:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "529: void trustedGenDkgSecret(int *errStatus, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
          "531:     char dkg_secret[DKG_BUFER_LENGTH];",
          "533:     if (gen_dkg_poly(dkg_secret, _t) != 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "531:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "556: void trustedDecryptDkgSecret(int *errStatus, char *err_string, uint8_t *encrypted_dkg_secret, uint8_t *decrypted_dkg_secret,",
          "557:                         uint32_t *dec_len) {",
          "560:     uint32_t decr_len;",
          "561:     sgx_status_t status = sgx_unseal_data(",
          "562:             (const sgx_sealed_data_t *) encrypted_dkg_secret, NULL, 0, decrypted_dkg_secret, &decr_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "561:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "574:                        char *secret_shares,",
          "575:                        unsigned _t, unsigned _n) {",
          "577:     char decrypted_dkg_secret[DKG_BUFER_LENGTH];",
          "579:     uint32_t decr_len;",
          "580:     trustedDecryptDkgSecret(errStatus, err_string, encrypted_dkg_secret, (uint8_t *) decrypted_dkg_secret, &decr_len);",
          "584:     if (*errStatus != 0) {",
          "585:         snprintf(err_string, BUF_LEN, \"sgx_unseal_data - encrypted_dkg_secret failed with status %d\", *errStatus);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "581:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "597:                        char *public_shares,",
          "598:                        unsigned _t, unsigned _n) {",
          "600:     char *decrypted_dkg_secret = (char *) calloc(DKG_MAX_SEALED_LEN, 1);",
          "601:     uint32_t decr_len;",
          "602:     trustedDecryptDkgSecret(errStatus, err_string, (uint8_t *) encrypted_dkg_secret, decrypted_dkg_secret, &decr_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "604:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "632: void trustedGetEncryptedSecretShare(int *errStatus, char *err_string, uint8_t *encrypted_skey, uint32_t *dec_len,",
          "633:                      char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n, uint8_t ind) {",
          "635:     char skey[ECDSA_SKEY_LEN];",
          "636:     char pub_key_x[BUF_LEN];",
          "637:     memset(pub_key_x, 0, BUF_LEN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "641:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "685:         snprintf(err_string, BUF_LEN, \"invalid common_key\");",
          "686:         return;",
          "687:     }",
          "690:     strncpy(result_str, cypher, strlen(cypher));",
          "691:     strncpy(result_str + strlen(cypher), pub_key_x, strlen(pub_key_x));",
          "692:     strncpy(result_str + strlen(pub_key_x) + strlen(pub_key_y), pub_key_y, strlen(pub_key_y));",
          "703: }",
          "705: void trustedComplaintResponse(int *errStatus, char *err_string, uint8_t *encryptedDHKey, uint8_t *encrypted_dkg_secret,",
          "706:                         uint32_t *dec_len,",
          "707:                         char *DH_key, char *s_shareG2, uint8_t _t, uint8_t _n, uint8_t ind1) {",
          "709:     uint32_t enc_len;",
          "718:     char decrypted_dkg_secret[DKG_BUFER_LENGTH];",
          "719:     uint32_t decr_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "707:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "726:     calc_secret_shareG2_old(decrypted_dkg_secret, s_shareG2, _t, ind1);",
          "733: }",
          "735: void trustedDkgVerify(int *errStatus, char *err_string, const char *public_shares, const char *s_share,",
          "736:                       uint8_t *encrypted_key, uint64_t key_len, unsigned _t, int _ind, int *result) {",
          "739:     char skey[ECDSA_SKEY_LEN];",
          "740:     sgx_status_t status = sgx_unseal_data(",
          "741:             (const sgx_sealed_data_t *) encrypted_key, NULL, 0, (uint8_t *) skey, &key_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "728:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "767:     }",
          "778:     mpz_t s;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "761:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "793: void trustedCreateBlsKey(int *errStatus, char *err_string, const char *s_shares,",
          "794:                     uint8_t *encrypted_key, uint64_t key_len, uint8_t *encr_bls_key, uint32_t *enc_bls_key_len) {",
          "796:     char skey[ECDSA_SKEY_LEN];",
          "797:     sgx_status_t status = sgx_unseal_data(",
          "798:             (const sgx_sealed_data_t *) encrypted_key, NULL, 0, (uint8_t *) skey, &key_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "782:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "907: void trustedGetBlsPubKey(int *errStatus, char *err_string, uint8_t *encrypted_key, uint64_t key_len, char *bls_pub_key) {",
          "909:     char skey_hex[ECDSA_SKEY_LEN];",
          "911:     uint32_t len = key_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "878:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "928: void trustedGenerateSEK(int *errStatus, char *err_string,",
          "929:                   uint8_t *encrypted_SEK, uint32_t *enc_len, char *SEK_hex) {",
          "930:     uint8_t SEK_raw[SGX_AESGCM_KEY_SIZE];",
          "931:     sgx_read_rand(SEK_raw, SGX_AESGCM_KEY_SIZE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "902:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "948:         return;",
          "949:     }",
          "955: }",
          "957: void trustedSetSEK(int *errStatus, char *err_string, uint8_t *encrypted_SEK, uint64_t encr_len) {",
          "961:     uint8_t aes_key_hex[SGX_AESGCM_KEY_SIZE * 2];",
          "962:     memset(aes_key_hex, 0, SGX_AESGCM_KEY_SIZE * 2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "932:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "977: void trustedSetSEK_backup(int *errStatus, char *err_string,",
          "978:                     uint8_t *encrypted_SEK, uint32_t *enc_len, const char *SEK_hex) {",
          "980:     uint64_t len;",
          "981:     hex2carray(SEK_hex, &len, (uint8_t *) AES_key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "953:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "990:         return;",
          "991:     }",
          "996: }",
          "998: void trustedGenerateEcdsaKeyAES(int *errStatus, char *err_string,",
          "999:                             uint8_t *encrypted_key, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
          "1001:     domain_parameters curve = domain_parameters_init();",
          "1002:     domain_parameters_load_curve(curve, secp256k1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "974:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1070: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *err_string,",
          "1071:                               uint8_t *encrypted_key, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
          "1073:     domain_parameters curve = domain_parameters_init();",
          "1074:     domain_parameters_load_curve(curve, secp256k1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1048:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1141: void trustedEcdsaSignAES(int *errStatus, char *err_string, uint8_t *encrypted_key, uint32_t enc_len,",
          "1142:                     unsigned char *hash, char *sig_r, char *sig_s, uint8_t *sig_v, int base) {",
          "1144:     domain_parameters curve = domain_parameters_init();",
          "1145:     domain_parameters_load_curve(curve, secp256k1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1121:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1219: void trustedEncryptKeyAES(int *errStatus, char *err_string, const char *key,",
          "1220:                      uint8_t *encrypted_key, uint32_t *enc_len) {",
          "1226:     memset(err_string, 0, BUF_LEN);",
          "1235:     memset(encrypted_key, 0, BUF_LEN);",
          "1237:     int stat = AES_encrypt(key, encrypted_key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1198:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1315:                           uint32_t enc_len, char *_hashX,",
          "1316:                           char *_hashY, char *signature) {",
          "1318:     char key[BUF_LEN];",
          "1319:     memset(key, 0, BUF_LEN);",
          "1320:     char sig[BUF_LEN];",
          "1321:     memset(sig, 0, BUF_LEN);",
          "1327:     int stat = AES_decrypt(encrypted_key, enc_len, key);",
          "",
          "[Removed Lines]",
          "1324:     enclave_init();",
          "",
          "[Added Lines]",
          "1286:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1341:         return;",
          "1342:     }",
          "1344: }",
          "1346: void",
          "1347: trustedGenDkgSecretAES(int *errStatus, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
          "1349:     char dkg_secret[DKG_BUFER_LENGTH];// = (char*)calloc(DKG_BUFER_LENGTH, 1);",
          "1350:     memset(dkg_secret, 0, DKG_BUFER_LENGTH);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1315:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1385:     }",
          "1388: }",
          "1390: void",
          "1391: trustedDecryptDkgSecretAES(int *errStatus, char *err_string, uint8_t *encrypted_dkg_secret, uint8_t *decrypted_dkg_secret,",
          "1392:                        uint32_t *dec_len) {",
          "1394:     int status = AES_decrypt(encrypted_dkg_secret, dec_len, decrypted_dkg_secret);",
          "1396:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1362:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1399:         return;",
          "1400:     }",
          "1402: }",
          "1404: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *err_string, uint8_t *encrypted_poly, uint64_t *enc_len) {",
          "1405:     memset(decryptedDkgPoly, 0, DKG_BUFER_LENGTH);",
          "1406:     int status = AES_decrypt(encrypted_poly, *enc_len, decryptedDkgPoly);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1376:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1495:                            char *public_shares,",
          "1496:                            unsigned _t, unsigned _n) {",
          "1498:     char *decrypted_dkg_secret = (char *) calloc(DKG_MAX_SEALED_LEN, 1);",
          "1499:     memset(decrypted_dkg_secret, 0, DKG_MAX_SEALED_LEN);",
          "1502:     int status = AES_decrypt(encrypted_dkg_secret, enc_len, decrypted_dkg_secret);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1458:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1508:         return;",
          "1509:     }",
          "1513:     if (calc_public_shares(decrypted_dkg_secret, public_shares, _t) != 0) {",
          "1515:         snprintf(err_string, BUF_LEN, \"t does not match polynomial in db\");",
          "1516:         return;",
          "1517:     }",
          "1520: }",
          "1522: void trustedDkgVerifyAES(int *errStatus, char *err_string, const char *public_shares, const char *s_share,",
          "1523:                           uint8_t *encrypted_key, uint64_t enc_len, unsigned _t, int _ind, int *result) {",
          "1526:     char skey[ECDSA_SKEY_LEN];",
          "1527:     memset(skey, 0, ECDSA_SKEY_LEN);",
          "1528:     int status = AES_decrypt(encrypted_key, enc_len, skey);",
          "1531:     if (status != SGX_SUCCESS) {",
          "1532:         snprintf(err_string, BUF_LEN, \"AES_decrypt failed (in trustedDkgVerifyAES)  with status %d\", status);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1486:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1586: void trustedCreateBlsKeyAES(int *errStatus, char *err_string, const char *s_shares,",
          "1587:                         uint8_t *encrypted_key, uint64_t key_len, uint8_t *encr_bls_key, uint32_t *enc_bls_key_len) {",
          "1589:     char skey[ECDSA_SKEY_LEN];",
          "1590:     int status = AES_decrypt(encrypted_key, key_len, skey);",
          "1591:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1542:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1692: void",
          "1693: trustedGetBlsPubKeyAES(int *errStatus, char *err_string, uint8_t *encrypted_key, uint64_t key_len, char *bls_pub_key) {",
          "1695:     char skey_hex[ECDSA_SKEY_LEN];",
          "1697:     uint32_t len = key_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1641:     LOG_DEBUG (__FUNCTION__);",
          "",
          "---------------"
        ],
        "sgxwallet.c||sgxwallet.c": [
          "File: sgxwallet.c -> sgxwallet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #include \"BLSCrypto.h\"",
          "39: #include \"ServerInit.h\"",
          "41: #include \"SEKManager.h\"",
          "47: void usage() {",
          "",
          "[Removed Lines]",
          "37: #include \"sgxwallet.h\"",
          "44: #include <stdbool.h>",
          "",
          "[Added Lines]",
          "36: #include <stdbool.h>",
          "42: #include \"SGXWalletServer.h\"",
          "43: #include \"sgxwallet.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:     fprintf(stderr, \"-y  Do not ask user to acknoledge receipt of backup key \\n\");",
          "67: }",
          "69: int main(int argc, char *argv[]) {",
          "71:     bool encryptKeysOption  = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: enum log_level {L_TRACE = 0, L_DEBUG = 1, L_INFO = 2,L_WARNING = 3,  L_ERROR = 4 };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:     setFullOptions(printDebugInfoOption, printTraceInfoOption, useHTTPSOption, autoconfirmOption, encryptKeysOption);",
          "133:     while (true) {",
          "134:         sleep(10);",
          "",
          "[Removed Lines]",
          "131:     initAll(checkClientCertOption, autoSignClientCertOption);",
          "",
          "[Added Lines]",
          "134:     uint32_t  enclaveLogLevel = L_INFO;",
          "136:     if (printTraceInfoOption) {",
          "137:         enclaveLogLevel = L_TRACE;",
          "138:     } else if (printDebugInfoOption) {",
          "139:         enclaveLogLevel = L_DEBUG;",
          "140:     }",
          "142:     initAll(enclaveLogLevel, checkClientCertOption, autoSignClientCertOption);",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "135: TEST_CASE(\"BLS key encrypt\", \"[bls-key-encrypt]\") {",
          "136:     resetDB();",
          "137:     setOptions(false, false, false, true);",
          "139:     auto key = encryptTestKey();",
          "140:     REQUIRE(key != nullptr);",
          "141: }",
          "",
          "[Removed Lines]",
          "138:     initAll(false, true);",
          "",
          "[Added Lines]",
          "138:     initAll(0, false, true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144: TEST_CASE(\"BLS key encrypt/decrypt\", \"[bls-key-encrypt-decrypt]\") {",
          "145:     resetDB();",
          "146:     setOptions(false, false, false, true);",
          "",
          "[Removed Lines]",
          "147:     initAll(false, true);",
          "",
          "[Added Lines]",
          "147:     initAll(0, false, true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "176: TEST_CASE(\"DKG gen test\", \"[dkg-gen]\") {",
          "177:     resetDB();",
          "178:     setOptions(false, false, false, true);",
          "182:     vector<uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
          "",
          "[Removed Lines]",
          "179:     initAll(false, true);",
          "",
          "[Added Lines]",
          "179:     initAll(0, false, true);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "264: TEST_CASE(\"DKG public shares test\", \"[dkg-pub-shares]\") {",
          "265:     resetDB();",
          "266:     setOptions(false, false, false, true);",
          "270:     libff::init_alt_bn128_params();",
          "",
          "[Removed Lines]",
          "267:     initAll(false, true);",
          "",
          "[Added Lines]",
          "267:     initAll(0, false, true);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "339: TEST_CASE(\"DKG encrypted secret shares test\", \"[dkg-encr-sshares]\") {",
          "340:     resetDB();",
          "341:     setOptions(false, false, false, true);",
          "345:     vector<char> errMsg(BUF_LEN, 0);",
          "",
          "[Removed Lines]",
          "342:     initAll(false, true);",
          "",
          "[Added Lines]",
          "342:     initAll(0, false, true);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "376: TEST_CASE(\"DKG verification test\", \"[dkg-verify]\") {",
          "377:     resetDB();",
          "378:     setOptions(false, false, false, true);",
          "382:     vector<char> errMsg(BUF_LEN, 0);",
          "",
          "[Removed Lines]",
          "379:     initAll(false, true);",
          "",
          "[Added Lines]",
          "379:     initAll(0, false, true);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "417: TEST_CASE(\"ECDSA keygen and signature test\", \"[ecdsa]\") {",
          "418:     resetDB();",
          "419:     setOptions(false, false, false, true);",
          "423:     vector<char> errMsg(BUF_LEN, 0);",
          "",
          "[Removed Lines]",
          "420:     initAll(false, true);",
          "",
          "[Added Lines]",
          "420:     initAll(0, false, true);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "461: TEST_CASE(\"Test test\", \"[test]\") {",
          "462:     resetDB();",
          "463:     setOptions(false, false, false, true);",
          "466:     vector<char> errMsg(BUF_LEN, 0);",
          "467:     int errStatus = 0;",
          "",
          "[Removed Lines]",
          "464:     initAll(false, true);",
          "",
          "[Added Lines]",
          "464:     initAll(0, false, true);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "483: TEST_CASE(\"get public ECDSA key\", \"[get-pub-ecdsa-key]\") {",
          "484:     resetDB();",
          "485:     setOptions(false, false, false, true);",
          "488:     int errStatus = 0;",
          "489:     vector<char> errMsg(BUF_LEN, 0);",
          "",
          "[Removed Lines]",
          "486:     initAll(false, true);",
          "",
          "[Added Lines]",
          "486:     initAll(0, false, true);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "551: TEST_CASE(\"BLS_DKG test\", \"[bls-dkg]\") {",
          "552:     resetDB();",
          "553:     setOptions(false, false, false, true);",
          "556:     HttpClient client(\"http://localhost:1029\");",
          "557:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "",
          "[Removed Lines]",
          "554:     initAll(false, true);",
          "",
          "[Added Lines]",
          "554:     initAll(0, false, true);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "680: TEST_CASE(\"API test\", \"[api]\") {",
          "681:     setOptions(false, false, false, true);",
          "",
          "[Removed Lines]",
          "682:     initAll(false, true);",
          "",
          "[Added Lines]",
          "682:     initAll(0, false, true);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "734: TEST_CASE(\"getServerStatus test\", \"[get-server-status]\") {",
          "735:     resetDB();",
          "736:     setOptions(false, false, false, true);",
          "738:     HttpClient client(\"http://localhost:1029\");",
          "739:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "740:     REQUIRE(c.getServerStatus()[\"status\"] == 0);",
          "",
          "[Removed Lines]",
          "737:     initAll(false, true);",
          "",
          "[Added Lines]",
          "737:     initAll(0, false, true);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "841:     resetDB();",
          "842:     setOptions(false, false, false, true);",
          "846:     vector<thread> threads;",
          "847:     int num_threads = 4;",
          "",
          "[Removed Lines]",
          "844:     initAll(false, true);",
          "",
          "[Added Lines]",
          "844:     initAll(0, false, true);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "859: TEST_CASE(\"ecdsa API test\", \"[ecdsa-api]\") {",
          "860:     resetDB();",
          "861:     setOptions(false, false, false, true);",
          "865:     HttpClient client(\"http://localhost:1029\");",
          "",
          "[Removed Lines]",
          "862:     initAll(false, true);",
          "",
          "[Added Lines]",
          "862:     initAll(0, false, true);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "907: TEST_CASE(\"dkg API test\", \"[dkg-api]\") {",
          "908:     resetDB();",
          "909:     setOptions(false, false, false, true);",
          "913:     HttpClient client(\"http://localhost:1029\");",
          "",
          "[Removed Lines]",
          "910:     initAll(false, true);",
          "",
          "[Added Lines]",
          "910:     initAll(0, false, true);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "980: TEST_CASE(\"isPolyExists test\", \"[is-poly]\") {",
          "981:     resetDB();",
          "982:     setOptions(false, false, false, true);",
          "986:     HttpClient client(\"http://localhost:1029\");",
          "",
          "[Removed Lines]",
          "983:     initAll(false, true);",
          "",
          "[Added Lines]",
          "983:     initAll(0, false, true);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1008:     setOptions(false, false, false, true);",
          "1012:     HttpClient client(\"http://localhost:1029\");",
          "1013:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "",
          "[Removed Lines]",
          "1011:     initAll(false, true);",
          "",
          "[Added Lines]",
          "1011:     initAll(0, false, true);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1122: TEST_CASE(\"bls_sign_api test\", \"[bls-sign]\") {",
          "1123:     resetDB();",
          "1124:     setOptions(false, false, false, true);",
          "1127:     HttpClient client(\"http://localhost:1029\");",
          "1128:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "",
          "[Removed Lines]",
          "1125:     initAll(false, true);",
          "",
          "[Added Lines]",
          "1125:     initAll(0, false, true);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1144: TEST_CASE(\"AES encrypt/decrypt\", \"[AES-encrypt-decrypt]\") {",
          "1145:     resetDB();",
          "1146:     setOptions(false, false, false, true);",
          "1150:     int errStatus = -1;",
          "",
          "[Removed Lines]",
          "1147:     initAll(false, true);",
          "",
          "[Added Lines]",
          "1147:     initAll(0, false, true);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83b5c23e3b458f389c00ba115bf499d0a256fe78",
      "candidate_info": {
        "commit_hash": "83b5c23e3b458f389c00ba115bf499d0a256fe78",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/83b5c23e3b458f389c00ba115bf499d0a256fe78",
        "files": [
          "BLSCrypto.cpp",
          "BLSPrivateKeyShareSGX.cpp",
          "DKGCrypto.cpp",
          "DKGCrypto.h",
          "ECDSACrypto.cpp",
          "SEKManager.cpp",
          "docker/start.sh",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "testw.cpp"
        ],
        "message": "SKALE-3039",
        "before_after_code_files": [
          "BLSCrypto.cpp||BLSCrypto.cpp",
          "BLSPrivateKeyShareSGX.cpp||BLSPrivateKeyShareSGX.cpp",
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "DKGCrypto.h||DKGCrypto.h",
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "SEKManager.cpp||SEKManager.cpp",
          "docker/start.sh||docker/start.sh",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SEKManager.cpp||SEKManager.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SEKManager.cpp||SEKManager.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.cpp||BLSCrypto.cpp": [
          "File: BLSCrypto.cpp -> BLSCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:     sgx_status_t status = SGX_SUCCESS;",
          "219:     RESTART_BEGIN",
          "221:                                               sz, xStrArg, yStrArg, signature);",
          "222:     RESTART_END",
          "",
          "[Removed Lines]",
          "220:             status = trustedBlsSignMessageAES(eid, &errStatus, errMsg.data(), encryptedKey,",
          "",
          "[Added Lines]",
          "220:             status = trustedBlsSignMessage(eid, &errStatus, errMsg.data(), encryptedKey,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:     sgx_status_t status = SGX_SUCCESS;",
          "261:     RESTART_BEGIN",
          "263:                                       &encryptedLen);",
          "264:     RESTART_END_POINTER",
          "",
          "[Removed Lines]",
          "262:         status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(),",
          "",
          "[Added Lines]",
          "262:         status = trustedEncryptKey(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(),",
          "",
          "---------------"
        ],
        "BLSPrivateKeyShareSGX.cpp||BLSPrivateKeyShareSGX.cpp": [
          "File: BLSPrivateKeyShareSGX.cpp -> BLSPrivateKeyShareSGX.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:     sgx_status_t status = SGX_SUCCESS;",
          "152:     RESTART_BEGIN",
          "154:                                           encryptedKeyHex->size() / 2, xStrArg, yStrArg, signature);",
          "155:     RESTART_END",
          "",
          "[Removed Lines]",
          "153:         status = trustedBlsSignMessageAES(eid, &errStatus, errMsg.data(), encryptedKey,",
          "",
          "[Added Lines]",
          "153:         status = trustedBlsSignMessage(eid, &errStatus, errMsg.data(), encryptedKey,",
          "",
          "---------------"
        ],
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:     RESTART_BEGIN",
          "140:                 eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
          "141:     RESTART_END",
          "",
          "[Removed Lines]",
          "139:         status = trustedGenDkgSecretAES(",
          "",
          "[Added Lines]",
          "139:         status = trustedGenDkgSecret(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177:     RESTART_BEGIN",
          "179:                                            pubShares.data(), t, n);",
          "180:     RESTART_END",
          "",
          "[Removed Lines]",
          "178:         status = trustedGetPublicSharesAES(eid, &errStatus, errMsg.data(), encrDKGPoly.data(), encLen,",
          "",
          "[Added Lines]",
          "178:         status = trustedGetPublicShares(eid, &errStatus, errMsg.data(), encrDKGPoly.data(), encLen,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "214:     READ_LOCK(initMutex);",
          "218:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg1.data());",
          "",
          "[Removed Lines]",
          "216:     status = trustedSetEncryptedDkgPolyAES(eid, &errStatus, errMsg1.data(), encrDKGPoly.data(), encLen);",
          "",
          "[Added Lines]",
          "216:     status = trustedSetEncryptedDkgPoly(eid, &errStatus, errMsg1.data(), encrDKGPoly.data(), encLen);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "234:         spdlog::debug(\"pubKeyB is {}\", pub_keyB);",
          "236:         sgx_status_t status = SGX_SUCCESS;",
          "238:                                                    currentShare.data(), sShareG2.data(), pubKeyB.data(), _t, _n,",
          "239:                                                    i + 1);",
          "",
          "[Removed Lines]",
          "237:         status = trustedGetEncryptedSecretShareAES(eid, &errStatus, errMsg1.data(), encryptedSkey.data(), &decLen,",
          "",
          "[Added Lines]",
          "237:         status = trustedGetEncryptedSecretShare(eid, &errStatus, errMsg1.data(), encryptedSkey.data(), &decLen,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "287:     sgx_status_t status = SGX_SUCCESS;",
          "289:     RESTART_BEGIN",
          "291:                                      ind, &result);",
          "292:     RESTART_END",
          "",
          "[Removed Lines]",
          "290:         status = trustedDkgVerifyAES(eid, &errStatus, errMsg.data(), pshares, encr_sshare, encr_key, decKeyLen, t,",
          "",
          "[Added Lines]",
          "290:         status = trustedDkgVerify(eid, &errStatus, errMsg.data(), pshares, encr_sshare, encr_key, decKeyLen, t,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "318:     sgx_status_t status = SGX_SUCCESS;",
          "320:     RESTART_BEGIN",
          "322:                                         &enc_bls_len);",
          "323:     RESTART_END",
          "",
          "[Removed Lines]",
          "321:         status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
          "",
          "[Added Lines]",
          "321:         status = trustedCreateBlsKey(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "354:     sgx_status_t status = SGX_SUCCESS;",
          "356:     RESTART_BEGIN",
          "358:     RESTART_END",
          "360:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg1.data());",
          "",
          "[Removed Lines]",
          "357:         status = trustedGetBlsPubKeyAES(eid, &errStatus, errMsg1.data(), encrKey, decKeyLen, pubKey);",
          "",
          "[Added Lines]",
          "357:         status = trustedGetBlsPubKey(eid, &errStatus, errMsg1.data(), encrKey, decKeyLen, pubKey);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "440:     sgx_status_t status = SGX_SUCCESS;",
          "442:     RESTART_BEGIN",
          "444:     RESTART_END",
          "445:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg1.data());",
          "",
          "[Removed Lines]",
          "443:         status = trustedDecryptKeyAES(eid, &errStatus, errMsg1.data(), encryptedDHKey, dhEncLen, DHKey);",
          "",
          "[Added Lines]",
          "443:         status = trustedDecryptKey(eid, &errStatus, errMsg1.data(), encryptedDHKey, dhEncLen, DHKey);",
          "",
          "---------------"
        ],
        "DKGCrypto.h||DKGCrypto.h": [
          "File: DKGCrypto.h -> DKGCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: vector<string> calculateAllBlsPublicKeys(const vector<string>& public_shares);",
          "60: #endif //SGXD_DKGCRYPTO_H",
          "",
          "[Removed Lines]",
          "58: bool TestcreateBLSShare( const char * s_shares);",
          "",
          "[Added Lines]",
          "58: bool testCreateBLSShare( const char * s_shares);",
          "",
          "---------------"
        ],
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     sgx_status_t status = SGX_SUCCESS;",
          "62:     RESTART_BEGIN",
          "64:                                    errMsg.data(), encr_pr_key.data(), &enc_len,",
          "65:                                    pub_key_x.data(), pub_key_y.data());",
          "66:     RESTART_END",
          "",
          "[Removed Lines]",
          "63:         status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
          "",
          "[Added Lines]",
          "63:         status = trustedGenerateEcdsaKey(eid, &errStatus,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:     sgx_status_t status = SGX_SUCCESS;",
          "109:     RESTART_BEGIN",
          "111:                                              errMsg.data(), encrPrKey.data(), enc_len, pubKeyX.data(), pubKeyY.data());",
          "112:     RESTART_END",
          "",
          "[Removed Lines]",
          "110:         status = trustedGetPublicEcdsaKeyAES(eid, &errStatus,",
          "",
          "[Added Lines]",
          "110:         status = trustedGetPublicEcdsaKey(eid, &errStatus,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:     sgx_status_t status = SGX_SUCCESS;",
          "198:     RESTART_BEGIN",
          "200:                             errMsg.data(), encryptedKey.data(), decLen, hashHex,",
          "201:                             signatureR.data(),",
          "202:                             signatureS.data(), &signatureV, base);",
          "",
          "[Removed Lines]",
          "199:         status = trustedEcdsaSignAES(eid, &errStatus,",
          "",
          "[Added Lines]",
          "199:         status = trustedEcdsaSign(eid, &errStatus,",
          "",
          "---------------"
        ],
        "SEKManager.cpp||SEKManager.cpp": [
          "File: SEKManager.cpp -> SEKManager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     {",
          "68:         READ_LOCK(initMutex);",
          "70:     }",
          "72:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
          "",
          "[Removed Lines]",
          "69:         status = trustedEncryptKeyAES(eid, &errStatus, errMsg.data(), key.c_str(), encrypted_key, &enc_len);",
          "",
          "[Added Lines]",
          "69:         status = trustedEncryptKey(eid, &errStatus, errMsg.data(), key.c_str(), encrypted_key, &enc_len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:     {",
          "101:         READ_LOCK(initMutex);",
          "103:     }",
          "105:     HANDLE_TRUSTED_FUNCTION_ERROR(status, err_status, errMsg.data());",
          "",
          "[Removed Lines]",
          "102:         status = trustedDecryptKeyAES(eid, &err_status, errMsg.data(), encr_test_key.data(), len, decr_key.data());",
          "",
          "[Added Lines]",
          "102:         status = trustedDecryptKey(eid, &err_status, errMsg.data(), encr_test_key.data(), len, decr_key.data());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "130:     {",
          "131:         READ_LOCK(initMutex);",
          "133:                              SEK.c_str());",
          "134:     }",
          "",
          "[Removed Lines]",
          "132:         status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
          "",
          "[Added Lines]",
          "132:         status = trustedSetSEKBackup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
          "",
          "---------------"
        ],
        "docker/start.sh||docker/start.sh": [
          "File: docker/start.sh -> docker/start.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: if [[ \"$1\" == \"-t\" ]]; then",
          "45: echo \"Test run requested\"",
          "47: ./testw.py",
          "48: else",
          "49:    ./sgxwallet $1 $2 $3 $4 $5",
          "50: fi",
          "",
          "[Removed Lines]",
          "46: ##sleep 0",
          "",
          "[Added Lines]",
          "46: sleep 5",
          "49:   sleep 3",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:     LOG_INFO(\"SGX call completed\");",
          "340: }",
          "343:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
          "344:     CALL_ONCE",
          "345:     LOG_INFO(__FUNCTION__);",
          "",
          "[Removed Lines]",
          "342: void trustedSetSEK_backup(int *errStatus, char *errString,",
          "",
          "[Added Lines]",
          "342: void trustedSetSEKBackup(int *errStatus, char *errString,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "372:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
          "373:     LOG_INFO(__FUNCTION__);",
          "374:     INIT_ERROR_STATE",
          "",
          "[Removed Lines]",
          "371: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
          "",
          "[Added Lines]",
          "371: void trustedGenerateEcdsaKey(int *errStatus, char *errString,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "439:     LOG_INFO(\"SGX call completed\");",
          "440: }",
          "443:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
          "444:     LOG_DEBUG(__FUNCTION__);",
          "445:     INIT_ERROR_STATE",
          "",
          "[Removed Lines]",
          "442: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
          "",
          "[Added Lines]",
          "442: void trustedGetPublicEcdsaKey(int *errStatus, char *errString,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "521: static uint64_t sigCounter = 0;",
          "524:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
          "525:     LOG_DEBUG(__FUNCTION__);",
          "",
          "[Removed Lines]",
          "523: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
          "",
          "[Added Lines]",
          "523: void trustedEcdsaSign(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "609: }",
          "613:                           uint64_t enc_len, char *key) {",
          "615:     LOG_DEBUG(__FUNCTION__);",
          "",
          "[Removed Lines]",
          "612: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
          "",
          "[Added Lines]",
          "612: void trustedDecryptKey(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "654: }",
          "658:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
          "659:     LOG_INFO(__FUNCTION__);",
          "",
          "[Removed Lines]",
          "657: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
          "",
          "[Added Lines]",
          "657: void trustedEncryptKey(int *errStatus, char *errString, const char *key,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "707: }",
          "711:                               uint64_t enc_len, char *_hashX,",
          "712:                               char *_hashY, char *signature) {",
          "713:     LOG_DEBUG(__FUNCTION__);",
          "",
          "[Removed Lines]",
          "710: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
          "",
          "[Added Lines]",
          "710: void trustedBlsSignMessage(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "753: }",
          "755: void",
          "757:     LOG_INFO(__FUNCTION__);",
          "758:     INIT_ERROR_STATE",
          "",
          "[Removed Lines]",
          "756: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
          "",
          "[Added Lines]",
          "756: trustedGenDkgSecret(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "798: }",
          "800: void",
          "802:                            uint64_t enc_len,",
          "803:                            uint8_t *decrypted_dkg_secret) {",
          "804:     LOG_INFO(__FUNCTION__);",
          "",
          "[Removed Lines]",
          "801: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
          "",
          "[Added Lines]",
          "801: trustedDecryptDkgSecret(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "824: }",
          "828:     LOG_INFO(__FUNCTION__);",
          "829:     INIT_ERROR_STATE",
          "",
          "[Removed Lines]",
          "827: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
          "",
          "[Added Lines]",
          "827: void trustedSetEncryptedDkgPoly(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "847:     LOG_INFO(\"SGX call completed\");",
          "848: }",
          "851:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
          "852:                                        uint8_t ind) {",
          "",
          "[Removed Lines]",
          "850: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
          "",
          "[Added Lines]",
          "850: void trustedGetEncryptedSecretShare(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "869:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
          "875:     uint8_t type = 0;",
          "876:     uint8_t exportable = 0;",
          "",
          "[Removed Lines]",
          "871:     trustedGenerateEcdsaKeyAES(&status, errString, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "873:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
          "",
          "[Added Lines]",
          "871:     trustedGenerateEcdsaKey(&status, errString, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "873:     CHECK_STATUS(\"trustedGenerateEcdsaKey failed\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "915:     LOG_INFO(\"SGX call completed\");",
          "916: }",
          "919:                                char *public_shares,",
          "920:                                unsigned _t, unsigned _n) {",
          "921:     LOG_INFO(__FUNCTION__);",
          "",
          "[Removed Lines]",
          "918: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
          "",
          "[Added Lines]",
          "918: void trustedGetPublicShares(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "946:     LOG_INFO(\"SGX call completed\");",
          "947: }",
          "950:                          uint8_t *encryptedPrivateKey, uint64_t enc_len, unsigned _t, int _ind, int *result) {",
          "951:     LOG_INFO(__FUNCTION__);",
          "",
          "[Removed Lines]",
          "949: void trustedDkgVerifyAES(int *errStatus, char *errString, const char *public_shares, const char *s_share,",
          "",
          "[Added Lines]",
          "949: void trustedDkgVerify(int *errStatus, char *errString, const char *public_shares, const char *s_share,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "999:     LOG_INFO(\"SGX call completed\");",
          "1000: }",
          "1003:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
          "1004:                             uint64_t *enc_bls_key_len) {",
          "",
          "[Removed Lines]",
          "1002: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
          "",
          "[Added Lines]",
          "1002: void trustedCreateBlsKey(int *errStatus, char *errString, const char *s_shares,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1104: }",
          "1106: void",
          "1108:                        char *bls_pub_key) {",
          "1109:     LOG_DEBUG(__FUNCTION__);",
          "",
          "[Removed Lines]",
          "1107: trustedGetBlsPubKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t key_len,",
          "",
          "[Added Lines]",
          "1107: trustedGetBlsPubKey(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t key_len,",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "27:                                 [in, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK);",
          "30:                                 [out] int *errStatus,",
          "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
          "33:                                 [out] uint64_t *enc_len,",
          "34:                                 [in, string] const char* SEK_hex);",
          "37:                                 [out] int *errStatus,",
          "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "29:         public void trustedSetSEK_backup(",
          "36:         public void trustedGenerateEcdsaKeyAES (",
          "",
          "[Added Lines]",
          "29:         public void trustedSetSEKBackup(",
          "36:         public void trustedGenerateEcdsaKey (",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
          "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
          "45:                                 [out] int *errStatus,",
          "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "44:         public void trustedGetPublicEcdsaKeyAES(",
          "",
          "[Added Lines]",
          "44:         public void trustedGetPublicEcdsaKey(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
          "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
          "53:                                 [out] int *errStatus,",
          "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "52:         public void trustedEcdsaSignAES(",
          "",
          "[Added Lines]",
          "52:         public void trustedEcdsaSign(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "60:                                 [out] uint8_t* sig_v,",
          "61:                                 int base);",
          "64:                                 [out] int *errStatus,",
          "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
          "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "68:                                 [out] uint64_t *enc_len);",
          "71:                                 [out] int *errStatus,",
          "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "74:                                 uint64_t enc_len,",
          "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
          "78:                                 [out] int *errStatus,",
          "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
          "81:                                 [out] uint64_t * enc_len, size_t _t);",
          "84:                                 [out] int *errStatus,",
          "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "",
          "[Removed Lines]",
          "63:         public void trustedEncryptKeyAES (",
          "70:         public void trustedDecryptKeyAES (",
          "77:         public void trustedGenDkgSecretAES (",
          "83:         public void trustedDecryptDkgSecretAES (",
          "",
          "[Added Lines]",
          "63:         public void trustedEncryptKey (",
          "70:         public void trustedDecryptKey (",
          "77:         public void trustedGenDkgSecret (",
          "83:         public void trustedDecryptDkgSecret (",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
          "89:                                 );",
          "92:                                 [out] int *errStatus,",
          "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
          "95:                                 uint64_t enc_len);",
          "98:                                 [out]int *errStatus,",
          "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
          "",
          "[Removed Lines]",
          "91:         public void trustedSetEncryptedDkgPolyAES(",
          "97:         public void trustedGetEncryptedSecretShareAES(",
          "",
          "[Added Lines]",
          "91:         public void trustedSetEncryptedDkgPoly(",
          "97:         public void trustedGetEncryptedSecretShare(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "106:                                 uint8_t _n,",
          "107:                                 uint8_t ind);",
          "110:                                 [out] int *errStatus,",
          "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "",
          "[Removed Lines]",
          "109:         public void trustedGetPublicSharesAES(",
          "",
          "[Added Lines]",
          "109:         public void trustedGetPublicShares(",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "115:                                 unsigned _t,",
          "116:                                 unsigned _n);",
          "119:                                 [out] int *errStatus,",
          "120:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "121:                                 [in, string] const char* public_shares,",
          "",
          "[Removed Lines]",
          "118:         public void trustedDkgVerifyAES(",
          "",
          "[Added Lines]",
          "118:         public void trustedDkgVerify(",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "126:                                 int _ind,",
          "127:                                 [out] int* result);",
          "130:                                 [out]int *errStatus,",
          "131:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "132:                                 [in, count = 6145] const char* s_shares,",
          "",
          "[Removed Lines]",
          "129:         public void trustedCreateBlsKeyAES(",
          "",
          "[Added Lines]",
          "129:         public void trustedCreateBlsKey(",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
          "136:                                 [out] uint64_t *enc_bls_key_len);",
          "139:                                 [out] int *errStatus,",
          "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
          "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "138:         public void trustedBlsSignMessageAES (",
          "",
          "[Added Lines]",
          "138:         public void trustedBlsSignMessage (",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "144:                                 [in, string] char* hashY,",
          "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
          "148:                                 [out]int *errStatus,",
          "149:                                 [out, count = SMALL_BUF_SIZE]  char* err_string,",
          "150:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "147:         public void trustedGetBlsPubKeyAES(",
          "",
          "[Added Lines]",
          "147:         public void trustedGetBlsPubKey(",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:     uint64_t encLen = 0;",
          "131:     PRINT_SRC_LINE",
          "133:                                              pubKeyX.data(),",
          "134:                                              pubKeyY.data());",
          "135:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
          "",
          "[Added Lines]",
          "132:     auto status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:     for (int i = 0; i < 50; i++) {",
          "145:         PRINT_SRC_LINE",
          "147:                                      hex.data(),",
          "148:                                      signatureR.data(),",
          "149:                                      signatureS.data(), &signatureV, 16);",
          "",
          "[Removed Lines]",
          "146:         status = trustedEcdsaSignAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), encLen,",
          "",
          "[Added Lines]",
          "146:         status = trustedEcdsaSign(eid, &errStatus, errMsg.data(), encrPrivKey.data(), encLen,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162:     vector<char> pubKeyY(BUF_LEN, 0);",
          "163:     uint64_t encLen = 0;",
          "164:     PRINT_SRC_LINE",
          "166:                                              pubKeyX.data(),",
          "167:                                              pubKeyY.data());",
          "",
          "[Removed Lines]",
          "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
          "",
          "[Added Lines]",
          "165:     auto status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "181:     uint64_t encLen = 0;",
          "183:     PRINT_SRC_LINE",
          "185:                                              pubKeyY.data());",
          "187:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "184:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
          "",
          "[Added Lines]",
          "184:     auto status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "191:     vector<char> receivedPubKeyY(BUF_LEN, 0);",
          "193:     PRINT_SRC_LINE",
          "195:                                          receivedPubKeyX.data(),",
          "196:                                          receivedPubKeyY.data());",
          "197:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "194:     status = trustedGetPublicEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), encLen,",
          "",
          "[Added Lines]",
          "194:     status = trustedGetPublicEcdsaKey(eid, &errStatus, errMsg.data(), encPrivKey.data(), encLen,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "295:     uint64_t encLen = 0;",
          "297:     PRINT_SRC_LINE",
          "299:     REQUIRE(status == SGX_SUCCESS);",
          "300:     REQUIRE(errStatus == SGX_SUCCESS);",
          "302:     vector<char> secret(BUF_LEN, 0);",
          "303:     vector<char> errMsg1(BUF_LEN, 0);",
          "306:                                         encLen, (uint8_t *) secret.data());",
          "308:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "298:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
          "305:     status = trustedDecryptDkgSecretAES(eid, &errStatus, errMsg1.data(), encryptedDKGSecret.data(),",
          "",
          "[Added Lines]",
          "298:     auto status = trustedGenDkgSecret(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
          "305:     status = trustedDecryptDkgSecret(eid, &errStatus, errMsg1.data(), encryptedDKGSecret.data(),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "320:     unsigned t = 32, n = 32;",
          "321:     PRINT_SRC_LINE",
          "323:     REQUIRE(status == SGX_SUCCESS);",
          "324:     REQUIRE(errStatus == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "322:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, n);",
          "",
          "[Added Lines]",
          "322:     auto status = trustedGenDkgSecret(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, n);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "328:     char colon = ':';",
          "329:     vector<char> pubShares(10000, 0);",
          "330:     PRINT_SRC_LINE",
          "332:                                        encryptedDKGSecret.data(), encLen, pubShares.data(), t, n);",
          "333:     REQUIRE(status == SGX_SUCCESS);",
          "334:     REQUIRE(errStatus == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "331:     status = trustedGetPublicSharesAES(eid, &errStatus, errMsg1.data(),",
          "",
          "[Added Lines]",
          "331:     status = trustedGetPublicShares(eid, &errStatus, errMsg1.data(),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "344:     vector<char> secret(BUF_LEN, 0);",
          "345:     PRINT_SRC_LINE",
          "347:                                         (uint8_t *) secret.data());",
          "348:     REQUIRE(status == SGX_SUCCESS);",
          "349:     REQUIRE(errStatus == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "346:     status = trustedDecryptDkgSecretAES(eid, &errStatus, errMsg1.data(), encryptedDKGSecret.data(), encLen,",
          "",
          "[Added Lines]",
          "346:     status = trustedDecryptDkgSecret(eid, &errStatus, errMsg1.data(), encryptedDKGSecret.data(), encLen,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "369:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
          "370:     PRINT_SRC_LINE",
          "372:     REQUIRE(status == SGX_SUCCESS);",
          "373:     REQUIRE(errStatus == SGX_SUCCESS);",
          "375:     uint64_t enc_len = encLen;",
          "377:     PRINT_SRC_LINE",
          "379:     REQUIRE(status == SGX_SUCCESS);",
          "380:     REQUIRE(errStatus == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "371:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 2);",
          "378:     status = trustedSetEncryptedDkgPolyAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), enc_len);",
          "",
          "[Added Lines]",
          "371:     auto status = trustedGenDkgSecret(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 2);",
          "378:     status = trustedSetEncryptedDkgPoly(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), enc_len);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "386:     vector<char> s_shareG2(BUF_LEN, 0);",
          "387:     PRINT_SRC_LINE",
          "389:                                                result.data(),",
          "390:                                                s_shareG2.data(),",
          "391:                                                (char *) pub_keyB.data(), 2, 2, 1);",
          "",
          "[Removed Lines]",
          "388:     status = trustedGetEncryptedSecretShareAES(eid, &errStatus, errMsg.data(), encrPRDHKey.data(), &encLen,",
          "",
          "[Added Lines]",
          "388:     status = trustedGetEncryptedSecretShare(eid, &errStatus, errMsg.data(), encrPRDHKey.data(), &encLen,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "700:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
          "702:     PRINT_SRC_LINE",
          "705:     REQUIRE(status == 0);",
          "706:     REQUIRE(errStatus == 0);",
          "708:     vector<char> decr_key(BUF_LEN, 0);",
          "709:     PRINT_SRC_LINE",
          "712:     REQUIRE(status == 0);",
          "713:     REQUIRE(errStatus == 0);",
          "",
          "[Removed Lines]",
          "703:     auto status = trustedEncryptKeyAES(eid, &errStatus, errMsg.data(), key.c_str(), encrypted_key.data(), &encLen);",
          "710:     status = trustedDecryptKeyAES(eid, &errStatus, errMsg.data(), encrypted_key.data(), encLen, decr_key.data());",
          "",
          "[Added Lines]",
          "703:     auto status = trustedEncryptKey(eid, &errStatus, errMsg.data(), key.c_str(), encrypted_key.data(), &encLen);",
          "710:     status = trustedDecryptKey(eid, &errStatus, errMsg.data(), encrypted_key.data(), encLen, decr_key.data());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64bb9335a53a2dbcc36b8546cbec57e0050a5ca2",
      "candidate_info": {
        "commit_hash": "64bb9335a53a2dbcc36b8546cbec57e0050a5ca2",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/64bb9335a53a2dbcc36b8546cbec57e0050a5ca2",
        "files": [
          "SEKManager.cpp",
          "secure_enclave/EnclaveCommon.cpp",
          "secure_enclave/Signature.c",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl"
        ],
        "message": "SKALE-3079-cleanup",
        "before_after_code_files": [
          "SEKManager.cpp||SEKManager.cpp",
          "secure_enclave/EnclaveCommon.cpp||secure_enclave/EnclaveCommon.cpp",
          "secure_enclave/Signature.c||secure_enclave/Signature.c",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "SEKManager.cpp||SEKManager.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ],
          "candidate": [
            "SEKManager.cpp||SEKManager.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ]
        }
      },
      "candidate_diff": {
        "SEKManager.cpp||SEKManager.cpp": [
          "File: SEKManager.cpp -> SEKManager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:     throw SGXException(INVALID_HEX, \"Invalid encrypted SEK Hex\");",
          "181:   }",
          "184:   if ( status != SGX_SUCCESS ) {",
          "185:     cerr << \"RPCException thrown\" << endl;",
          "186:     throw SGXException(status, errMsg.data()) ;",
          "",
          "[Removed Lines]",
          "183:   status = trustedSetSEK(eid, &err_status, errMsg.data(), encr_SEK, len );",
          "",
          "[Added Lines]",
          "183:   status = trustedSetSEK(eid, &err_status, errMsg.data(), encr_SEK );",
          "",
          "---------------"
        ],
        "secure_enclave/EnclaveCommon.cpp||secure_enclave/EnclaveCommon.cpp": [
          "File: secure_enclave/EnclaveCommon.cpp -> secure_enclave/EnclaveCommon.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     @date 2019",
          "26: #include <string.h>",
          "27: #include <cstdint>",
          "",
          "[Removed Lines]",
          "24: #define GMP_WITH_SGX",
          "",
          "[Added Lines]",
          "24: #define GMP_WITH_SGX 1",
          "",
          "---------------"
        ],
        "secure_enclave/Signature.c||secure_enclave/Signature.c": [
          "File: secure_enclave/Signature.c -> secure_enclave/Signature.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <stdio.h>",
          "26: #include <stdbool.h>",
          "27: #include <assert.h>",
          "29: #define SAFE_FREE(__X__) if (__X__) {free(__X__); __X__ = NULL;}",
          "30: #define SAFE_DELETE(__X__) if (__X__) {delete(__X__); __X__ = NULL;}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include <string.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "179:     mpz_set(sig->r, r);",
          "180:     mpz_set(sig->s, s);",
          "185:     point_clear(Q);",
          "",
          "[Removed Lines]",
          "182:     clean:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:     CHECK_STATE(sgx_sha256_init(&shaStateHandle) == SGX_SUCCESS);",
          "183:     CHECK_STATE(sgx_sha256_update(globalRandom, 32, shaStateHandle) == SGX_SUCCESS);",
          "186:     CHECK_STATE(sgx_sha256_close(shaStateHandle) == SGX_SUCCESS);",
          "188:     memcpy(_randBuff, globalRandom, _size);",
          "",
          "[Removed Lines]",
          "184:     CHECK_STATE(sgx_sha256_get_hash(shaStateHandle, globalRandom) == SGX_SUCCESS);",
          "185:     CHECK_STATE(sgx_sha256_get_hash(shaStateHandle, globalRandom) == SGX_SUCCESS);",
          "",
          "[Added Lines]",
          "184:     CHECK_STATE(sgx_sha256_get_hash(shaStateHandle, (sgx_sha256_hash_t *)globalRandom) == SGX_SUCCESS);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "201:     SAFE_CHAR_BUF(SEK_raw, SGX_AESGCM_KEY_SIZE);;",
          "203:     uint32_t hex_aes_key_length = SGX_AESGCM_KEY_SIZE * 2;",
          "206:     uint32_t sealedLen = sgx_calc_sealed_data_size(0, hex_aes_key_length + 1);",
          "",
          "[Removed Lines]",
          "204:     carray2Hex(SEK_raw, SGX_AESGCM_KEY_SIZE, SEK_hex);",
          "",
          "[Added Lines]",
          "203:     carray2Hex((uint8_t*) SEK_raw, SGX_AESGCM_KEY_SIZE, SEK_hex);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:     ;",
          "221: }",
          "224:     LOG_INFO(__FUNCTION__);",
          "225:     INIT_ERROR_STATE",
          "226:     CHECK_STATE(encrypted_SEK);",
          "227:     SAFE_CHAR_BUF(aes_key_hex, BUF_LEN);",
          "229:     sgx_status_t status = sgx_unseal_data(",
          "232:     CHECK_STATUS2(\"sgx unseal SEK failed with status %d\");",
          "",
          "[Removed Lines]",
          "223: void trustedSetSEK(int *errStatus, char *errString, uint8_t *encrypted_SEK, uint64_t encr_len) {",
          "230:             (const sgx_sealed_data_t *) encrypted_SEK, NULL, 0, aes_key_hex, &encr_len);",
          "",
          "[Added Lines]",
          "222: void trustedSetSEK(int *errStatus, char *errString, uint8_t *encrypted_SEK) {",
          "228:     uint32_t dec_len;",
          "231:             (const sgx_sealed_data_t *) encrypted_SEK, NULL, 0,",
          "232:             (uint8_t *)aes_key_hex, &dec_len);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:         public void trustedSetSEK(",
          "24:                                 [out] int *errStatus,",
          "25:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "29:         public void trustedSetSEK_backup(",
          "30:                                 [out] int *errStatus,",
          "",
          "[Removed Lines]",
          "26:                                 [in, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
          "27:                                 uint64_t encr_len);",
          "",
          "[Added Lines]",
          "26:                                 [in, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK);",
          "",
          "---------------"
        ]
      }
    }
  ]
}