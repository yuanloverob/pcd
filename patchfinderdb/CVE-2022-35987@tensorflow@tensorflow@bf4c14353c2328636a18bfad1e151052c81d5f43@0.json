{
  "cve_id": "CVE-2022-35987",
  "cve_desc": "TensorFlow is an open source platform for machine learning. `DenseBincount` assumes its input tensor `weights` to either have the same shape as its input tensor `input` or to be length-0. A different `weights` shape will trigger a `CHECK` fail that can be used to trigger a denial of service attack. We have patched the issue in GitHub commit bf4c14353c2328636a18bfad1e151052c81d5f43. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "bf4c14353c2328636a18bfad1e151052c81d5f43",
  "patch_info": {
    "commit_hash": "bf4c14353c2328636a18bfad1e151052c81d5f43",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/bf4c14353c2328636a18bfad1e151052c81d5f43",
    "files": [
      "tensorflow/compiler/tf2xla/kernels/bincount_op.cc",
      "tensorflow/core/kernels/bincount_op.cc",
      "tensorflow/python/kernel_tests/math_ops/bincount_op_test.py"
    ],
    "message": "Fix security vulnerability with DenseBincountOp\n\nPiperOrigin-RevId: 460826735",
    "before_after_code_files": [
      "tensorflow/compiler/tf2xlkernels/bincount_op.cc||tensorflow/compiler/tf2xla/kernels/bincount_op.cc",
      "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc",
      "tensorflow/python/kernel_tests/math_ops/bincount_op_test.py||tensorflow/python/kernel_tests/math_ops/bincount_op_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/compiler/tf2xlkernels/bincount_op.cc||tensorflow/compiler/tf2xla/kernels/bincount_op.cc": [
      "File: tensorflow/compiler/tf2xlkernels/bincount_op.cc -> tensorflow/compiler/tf2xla/kernels/bincount_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "83:     OP_REQUIRES(ctx,",
      "84:                 xla::ShapeUtil::CompatibleIgnoringElementType(weights_shape,",
      "85:                                                               input_shape) ||",
      "86:                     (weights_shape.dimensions_size() > 0 &&",
      "87:                      weights_shape.dimensions(0) == 0),",
      "88:                 errors::InvalidArgument(",
      "89:                     \"`weights` must be the same shape as `arr` or a length-0 \"",
      "90:                     \"`Tensor`, in which case it acts as all weights equal to \"",
      "91:                     \"1. Received \",",
      "92:                     weights_shape.DebugString()));",
      "",
      "---------------"
    ],
    "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc": [
      "File: tensorflow/core/kernels/bincount_op.cc -> tensorflow/core/kernels/bincount_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "280:     OP_REQUIRES(ctx, size_t.dims() == 0,",
      "281:                 errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
      "282:                                         size_t.dims()));",
      "283:     Tidx size = size_t.scalar<Tidx>()();",
      "284:     OP_REQUIRES(",
      "285:         ctx, size >= 0,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "283:     OP_REQUIRES(ctx,",
      "284:                 weights.shape() == data.shape() || weights.NumElements() == 0,",
      "285:                 errors::InvalidArgument(",
      "286:                     \"`weights` must be the same shape as `arr` or a length-0 \"",
      "287:                     \"`Tensor`, in which case it acts as all weights equal to \"",
      "288:                     \"1. Received \",",
      "289:                     weights.shape().DebugString()));",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/math_ops/bincount_op_test.py||tensorflow/python/kernel_tests/math_ops/bincount_op_test.py": [
      "File: tensorflow/python/kernel_tests/math_ops/bincount_op_test.py -> tensorflow/python/kernel_tests/math_ops/bincount_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: from tensorflow.python.ops import array_ops",
      "25: from tensorflow.python.ops import bincount_ops",
      "26: from tensorflow.python.ops import gen_math_ops",
      "27: from tensorflow.python.ops import sparse_ops",
      "28: from tensorflow.python.ops.ragged import ragged_factory_ops",
      "29: from tensorflow.python.ops.ragged import ragged_tensor",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: from tensorflow.python.ops import random_ops",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "152:       v2 = gen_math_ops.bincount([1, 2, 3, 1, 6, 8], s, [])",
      "153:       self.assertAllEqual(v2.get_shape().as_list(), [None])",
      "156: class BincountOpTest(test_util.TensorFlowTestCase, parameterized.TestCase):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "156:   @test_util.run_in_graph_and_eager_modes",
      "157:   def test_invalid_inputs(self):",
      "158:     binary_output = True",
      "159:     inp = random_ops.random_uniform(",
      "160:         shape=[10, 10],",
      "161:         minval=-10000,",
      "162:         maxval=10000,",
      "163:         dtype=dtypes.int32,",
      "164:         seed=-2460)",
      "165:     size = random_ops.random_uniform(",
      "166:         shape=[], minval=-10000, maxval=10000, dtype=dtypes.int32, seed=-10000)",
      "167:     weights = random_ops.random_uniform(",
      "168:         shape=[],",
      "169:         minval=-10000,",
      "170:         maxval=10000,",
      "171:         dtype=dtypes.float32,",
      "172:         seed=-10000)",
      "173:     with self.assertRaises(errors.InvalidArgumentError):",
      "174:       self.evaluate(",
      "175:           gen_math_ops.dense_bincount(",
      "176:               input=inp,",
      "177:               size=size,",
      "178:               weights=weights,",
      "179:               binary_output=binary_output))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3663d57c244d8878c79f5d2aaa29fa7646ec3e38",
      "candidate_info": {
        "commit_hash": "3663d57c244d8878c79f5d2aaa29fa7646ec3e38",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/3663d57c244d8878c79f5d2aaa29fa7646ec3e38",
        "files": [
          "tensorflow/compiler/tf2xla/kernels/bincount_op.cc",
          "tensorflow/core/kernels/bincount_op.cc",
          "tensorflow/python/kernel_tests/math_ops/bincount_op_test.py"
        ],
        "message": "Fix security vulnerability with DenseBincountOp\n\nPiperOrigin-RevId: 460826735",
        "before_after_code_files": [
          "tensorflow/compiler/tf2xla/kernels/bincount_op.cc||tensorflow/compiler/tf2xla/kernels/bincount_op.cc",
          "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc",
          "tensorflow/python/kernel_tests/math_ops/bincount_op_test.py||tensorflow/python/kernel_tests/math_ops/bincount_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/compiler/tf2xlkernels/bincount_op.cc||tensorflow/compiler/tf2xla/kernels/bincount_op.cc",
            "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc",
            "tensorflow/python/kernel_tests/math_ops/bincount_op_test.py||tensorflow/python/kernel_tests/math_ops/bincount_op_test.py"
          ],
          "candidate": [
            "tensorflow/compiler/tf2xla/kernels/bincount_op.cc||tensorflow/compiler/tf2xla/kernels/bincount_op.cc",
            "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc",
            "tensorflow/python/kernel_tests/math_ops/bincount_op_test.py||tensorflow/python/kernel_tests/math_ops/bincount_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/compiler/tf2xla/kernels/bincount_op.cc||tensorflow/compiler/tf2xla/kernels/bincount_op.cc": [
          "File: tensorflow/compiler/tf2xla/kernels/bincount_op.cc -> tensorflow/compiler/tf2xla/kernels/bincount_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: you may not use this file except in compliance with the License.",
          "5: You may obtain a copy of the License at",
          "7:     http://www.apache.org/licenses/LICENSE-2.0",
          "9: Unless required by applicable law or agreed to in writing, software",
          "10: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "16: #include <memory>",
          "17: #include <vector>",
          "19: #include \"tensorflow/compiler/tf2xla/type_util.h\"",
          "20: #include \"tensorflow/compiler/tf2xla/xla_helpers.h\"",
          "21: #include \"tensorflow/compiler/tf2xla/xla_op_kernel.h\"",
          "22: #include \"tensorflow/compiler/tf2xla/xla_op_registry.h\"",
          "23: #include \"tensorflow/compiler/xla/client/lib/arithmetic.h\"",
          "24: #include \"tensorflow/compiler/xla/client/lib/comparators.h\"",
          "25: #include \"tensorflow/compiler/xla/client/lib/constants.h\"",
          "26: #include \"tensorflow/compiler/xla/client/xla_computation.h\"",
          "27: #include \"tensorflow/compiler/xla/shape_util.h\"",
          "29: namespace tensorflow {",
          "30: namespace {",
          "32: class DenseBincountOp : public XlaOpKernel {",
          "33:  public:",
          "34:   explicit DenseBincountOp(OpKernelConstruction* ctx) : XlaOpKernel(ctx) {",
          "36:     (void)ctx->GetAttr(\"binary_output\", &binary_output_);",
          "37:   }",
          "39:  private:",
          "40:   bool binary_output_ = false;",
          "41:   void Compile(XlaOpKernelContext* ctx) override {",
          "42:     int64_t output_size;",
          "43:     xla::XlaOp output_size_param = ctx->Input(\"size\");",
          "44:     StatusOr<xla::Shape> output_shape_or =",
          "45:         ctx->builder()->GetShape(output_size_param);",
          "46:     OP_REQUIRES_OK(ctx, output_shape_or.status());",
          "47:     auto output_shape_param = output_shape_or.ValueOrDie();",
          "48:     auto output_rank = output_shape_param.rank();",
          "49:     OP_REQUIRES(ctx, output_rank == 0,",
          "50:                 errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "51:                                         output_rank));",
          "52:     OP_REQUIRES_OK(ctx, ctx->ConstantInputAsIntScalar(\"size\", &output_size));",
          "53:     OP_REQUIRES(ctx, output_size >= 0,",
          "54:                 errors::InvalidArgument(\"size (\", output_size,",
          "55:                                         \") must be non-negative\"));",
          "56:     xla::XlaOp idx, updates, output;",
          "57:     xla::XlaOp input = ctx->Input(0);",
          "58:     auto input_xla_type = ctx->input_xla_type(0);",
          "59:     xla::PrimitiveType dtype = ctx->InputXlaType(\"weights\");",
          "60:     auto zero = xla::Zero(ctx->builder(), dtype);",
          "61:     auto one = xla::One(ctx->builder(), dtype);",
          "62:     StatusOr<xla::Shape> input_shape_or = ctx->builder()->GetShape(input);",
          "63:     OP_REQUIRES_OK(ctx, input_shape_or.status());",
          "64:     auto input_shape = input_shape_or.ValueOrDie();",
          "65:     auto size = input_shape.dimensions(0);",
          "67:     if (!size) {",
          "68:       output = xla::Broadcast(zero, {output_size});",
          "69:       ctx->SetOutput(0, output);",
          "70:       return;",
          "71:     }",
          "72:     auto rank = input_shape.rank();",
          "74:     OP_REQUIRES(ctx, rank <= 2,",
          "75:                 errors::InvalidArgument(",
          "76:                     \"Shape must be at most rank 2 but is rank \", rank));",
          "78:     xla::XlaOp weights = ctx->Input(2);",
          "79:     StatusOr<xla::Shape> weights_shape_or = ctx->builder()->GetShape(weights);",
          "80:     OP_REQUIRES_OK(ctx, weights_shape_or.status());",
          "82:     auto weights_shape = weights_shape_or.ValueOrDie();",
          "83:     OP_REQUIRES(ctx,",
          "84:                 xla::ShapeUtil::CompatibleIgnoringElementType(weights_shape,",
          "85:                                                               input_shape) ||",
          "86:                     (weights_shape.dimensions_size() > 0 &&",
          "87:                      weights_shape.dimensions(0) == 0),",
          "88:                 errors::InvalidArgument(",
          "89:                     \"`weights` must be the same shape as `arr` or a length-0 \"",
          "90:                     \"`Tensor`, in which case it acts as all weights equal to \"",
          "91:                     \"1. Received \",",
          "92:                     weights_shape.DebugString()));",
          "94:     auto weights_size = weights_shape.dimensions(0);",
          "95:     bool has_weights = false;",
          "96:     if (weights_size) {",
          "97:       has_weights = true;",
          "98:     }",
          "99:     xla::Shape output_shape = xla::ShapeUtil::MakeShape(dtype, {output_size});",
          "100:     xla::ScatterDimensionNumbers scatter_dnums;",
          "101:     scatter_dnums.set_index_vector_dim(1);",
          "102:     scatter_dnums.add_inserted_window_dims(0);",
          "103:     scatter_dnums.add_scatter_dims_to_operand_dims(0);",
          "105:     if (rank == 2) {",
          "106:       output_shape = xla::ShapeUtil::MakeShape(dtype, {size, output_size});",
          "107:       scatter_dnums.add_inserted_window_dims(1);",
          "108:       scatter_dnums.add_scatter_dims_to_operand_dims(1);",
          "109:       auto i_shape =",
          "110:           xla::ShapeUtil::MakeShape(input_xla_type, {input_shape.dimensions()});",
          "111:       auto i = xla::Iota(ctx->builder(), i_shape, 0);",
          "112:       i = xla::Reshape(",
          "113:           i, {input_shape.dimensions(0) * input_shape.dimensions(1), 1});",
          "114:       auto j = xla::Reshape(",
          "115:           input, {input_shape.dimensions(0) * input_shape.dimensions(1), 1});",
          "116:       std::vector<xla::XlaOp> iotas_to_concat;",
          "117:       iotas_to_concat.push_back(i);",
          "118:       iotas_to_concat.push_back(j);",
          "119:       idx = xla::ConcatInDim(ctx->builder(), iotas_to_concat, 1);",
          "120:       updates = xla::Broadcast(",
          "121:           one, {input_shape.dimensions(0) * input_shape.dimensions(1)});",
          "122:       output = xla::Broadcast(",
          "123:           zero, {output_shape.dimensions(0), output_shape.dimensions(1)});",
          "124:       if (has_weights && !binary_output_) {",
          "125:         weights = xla::Reshape(",
          "126:             weights, {input_shape.dimensions(0) * input_shape.dimensions(1)});",
          "127:         updates = weights;",
          "128:       }",
          "129:     } else {",
          "130:       input = xla::Reshape(input, {size, 1});",
          "131:       idx = xla::Reshape(input, {size, 1});",
          "132:       updates = xla::Broadcast(one, {size});",
          "133:       output = xla::Broadcast(zero, {output_size});",
          "134:       if (has_weights && !binary_output_) {",
          "135:         updates = weights;",
          "136:       }",
          "137:     }",
          "139:     xla::XlaComputation assn_computation = [&] {",
          "140:       std::unique_ptr<xla::XlaBuilder> subb =",
          "141:           ctx->builder()->CreateSubBuilder(\"scatter_bincount\");",
          "142:       xla::Shape param_shape = xla::ShapeUtil::MakeShape(dtype, {});",
          "143:       auto p0 = xla::Parameter(subb.get(), 0, param_shape, \"p0\");",
          "144:       auto p1 = xla::Parameter(subb.get(), 1, param_shape, \"p1\");",
          "145:       if (!binary_output_) {",
          "146:         xla::Add(p0, p1);",
          "147:       }",
          "148:       return subb->BuildAndNoteError();",
          "149:     }();",
          "150:     output = xla::Scatter(output, idx, updates, assn_computation, scatter_dnums,",
          "151:                           false, false);",
          "152:     ctx->SetOutput(0, output);",
          "153:   }",
          "154: };",
          "156: REGISTER_XLA_OP(Name(\"DenseBincount\").CompileTimeConstantInput(\"size\"),",
          "157:                 DenseBincountOp);",
          "158: REGISTER_XLA_OP(Name(\"Bincount\").CompileTimeConstantInput(\"size\"),",
          "159:                 DenseBincountOp);",
          "161: }  // namespace",
          "162: }  // namespace tensorflow",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc": [
          "File: tensorflow/core/kernels/bincount_op.cc -> tensorflow/core/kernels/bincount_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:     OP_REQUIRES(ctx, size_t.dims() == 0,",
          "280:                 errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "281:                                         size_t.dims()));",
          "282:     Tidx size = size_t.scalar<Tidx>()();",
          "283:     OP_REQUIRES(",
          "284:         ctx, size >= 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282:     OP_REQUIRES(ctx,",
          "283:                 weights.shape() == data.shape() || weights.NumElements() == 0,",
          "284:                 errors::InvalidArgument(",
          "285:                     \"`weights` must be the same shape as `arr` or a length-0 \"",
          "286:                     \"`Tensor`, in which case it acts as all weights equal to \"",
          "287:                     \"1. Received \",",
          "288:                     weights.shape().DebugString()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/math_ops/bincount_op_test.py||tensorflow/python/kernel_tests/math_ops/bincount_op_test.py": [
          "File: tensorflow/python/kernel_tests/math_ops/bincount_op_test.py -> tensorflow/python/kernel_tests/math_ops/bincount_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: from tensorflow.python.ops import array_ops",
          "25: from tensorflow.python.ops import bincount_ops",
          "26: from tensorflow.python.ops import gen_math_ops",
          "27: from tensorflow.python.ops import sparse_ops",
          "28: from tensorflow.python.ops.ragged import ragged_factory_ops",
          "29: from tensorflow.python.ops.ragged import ragged_tensor",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: from tensorflow.python.ops import random_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:       v2 = gen_math_ops.bincount([1, 2, 3, 1, 6, 8], s, [])",
          "151:       self.assertAllEqual(v2.get_shape().as_list(), [None])",
          "154: class BincountOpTest(test_util.TensorFlowTestCase, parameterized.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154:   @test_util.run_in_graph_and_eager_modes",
          "155:   def test_invalid_inputs(self):",
          "156:     binary_output = True",
          "157:     inp = random_ops.random_uniform(",
          "158:         shape=[10, 10],",
          "159:         minval=-10000,",
          "160:         maxval=10000,",
          "161:         dtype=dtypes.int32,",
          "162:         seed=-2460)",
          "163:     size = random_ops.random_uniform(",
          "164:         shape=[], minval=-10000, maxval=10000, dtype=dtypes.int32, seed=-10000)",
          "165:     weights = random_ops.random_uniform(",
          "166:         shape=[],",
          "167:         minval=-10000,",
          "168:         maxval=10000,",
          "169:         dtype=dtypes.float32,",
          "170:         seed=-10000)",
          "171:     with self.assertRaises(errors.InvalidArgumentError):",
          "172:       self.evaluate(",
          "173:           gen_math_ops.dense_bincount(",
          "174:               input=inp,",
          "175:               size=size,",
          "176:               weights=weights,",
          "177:               binary_output=binary_output))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8018bb9471fc439e8e4339de1097cd5d7bc0f77f",
      "candidate_info": {
        "commit_hash": "8018bb9471fc439e8e4339de1097cd5d7bc0f77f",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/8018bb9471fc439e8e4339de1097cd5d7bc0f77f",
        "files": [
          "tensorflow/compiler/tf2xla/kernels/bincount_op.cc",
          "tensorflow/core/kernels/bincount_op.cc",
          "tensorflow/python/kernel_tests/math_ops/bincount_op_test.py"
        ],
        "message": "Fix security vulnerability with DenseBincountOp\n\nPiperOrigin-RevId: 460826735",
        "before_after_code_files": [
          "tensorflow/compiler/tf2xla/kernels/bincount_op.cc||tensorflow/compiler/tf2xla/kernels/bincount_op.cc",
          "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc",
          "tensorflow/python/kernel_tests/math_ops/bincount_op_test.py||tensorflow/python/kernel_tests/math_ops/bincount_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/compiler/tf2xlkernels/bincount_op.cc||tensorflow/compiler/tf2xla/kernels/bincount_op.cc",
            "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc",
            "tensorflow/python/kernel_tests/math_ops/bincount_op_test.py||tensorflow/python/kernel_tests/math_ops/bincount_op_test.py"
          ],
          "candidate": [
            "tensorflow/compiler/tf2xla/kernels/bincount_op.cc||tensorflow/compiler/tf2xla/kernels/bincount_op.cc",
            "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc",
            "tensorflow/python/kernel_tests/math_ops/bincount_op_test.py||tensorflow/python/kernel_tests/math_ops/bincount_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/compiler/tf2xla/kernels/bincount_op.cc||tensorflow/compiler/tf2xla/kernels/bincount_op.cc": [
          "File: tensorflow/compiler/tf2xla/kernels/bincount_op.cc -> tensorflow/compiler/tf2xla/kernels/bincount_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: you may not use this file except in compliance with the License.",
          "5: You may obtain a copy of the License at",
          "7:     http://www.apache.org/licenses/LICENSE-2.0",
          "9: Unless required by applicable law or agreed to in writing, software",
          "10: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "16: #include <memory>",
          "17: #include <vector>",
          "19: #include \"tensorflow/compiler/tf2xla/type_util.h\"",
          "20: #include \"tensorflow/compiler/tf2xla/xla_helpers.h\"",
          "21: #include \"tensorflow/compiler/tf2xla/xla_op_kernel.h\"",
          "22: #include \"tensorflow/compiler/tf2xla/xla_op_registry.h\"",
          "23: #include \"tensorflow/compiler/xla/client/lib/arithmetic.h\"",
          "24: #include \"tensorflow/compiler/xla/client/lib/comparators.h\"",
          "25: #include \"tensorflow/compiler/xla/client/lib/constants.h\"",
          "26: #include \"tensorflow/compiler/xla/client/xla_computation.h\"",
          "27: #include \"tensorflow/compiler/xla/shape_util.h\"",
          "29: namespace tensorflow {",
          "30: namespace {",
          "32: class DenseBincountOp : public XlaOpKernel {",
          "33:  public:",
          "34:   explicit DenseBincountOp(OpKernelConstruction* ctx) : XlaOpKernel(ctx) {",
          "36:     (void)ctx->GetAttr(\"binary_output\", &binary_output_);",
          "37:   }",
          "39:  private:",
          "40:   bool binary_output_ = false;",
          "41:   void Compile(XlaOpKernelContext* ctx) override {",
          "42:     int64_t output_size;",
          "43:     xla::XlaOp output_size_param = ctx->Input(\"size\");",
          "44:     StatusOr<xla::Shape> output_shape_or =",
          "45:         ctx->builder()->GetShape(output_size_param);",
          "46:     OP_REQUIRES_OK(ctx, output_shape_or.status());",
          "47:     auto output_shape_param = output_shape_or.ValueOrDie();",
          "48:     auto output_rank = output_shape_param.rank();",
          "49:     OP_REQUIRES(ctx, output_rank == 0,",
          "50:                 errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "51:                                         output_rank));",
          "52:     OP_REQUIRES_OK(ctx, ctx->ConstantInputAsIntScalar(\"size\", &output_size));",
          "53:     OP_REQUIRES(ctx, output_size >= 0,",
          "54:                 errors::InvalidArgument(\"size (\", output_size,",
          "55:                                         \") must be non-negative\"));",
          "56:     xla::XlaOp idx, updates, output;",
          "57:     xla::XlaOp input = ctx->Input(0);",
          "58:     auto input_xla_type = ctx->input_xla_type(0);",
          "59:     xla::PrimitiveType dtype = ctx->InputXlaType(\"weights\");",
          "60:     auto zero = xla::Zero(ctx->builder(), dtype);",
          "61:     auto one = xla::One(ctx->builder(), dtype);",
          "62:     StatusOr<xla::Shape> input_shape_or = ctx->builder()->GetShape(input);",
          "63:     OP_REQUIRES_OK(ctx, input_shape_or.status());",
          "64:     auto input_shape = input_shape_or.ValueOrDie();",
          "65:     auto size = input_shape.dimensions(0);",
          "67:     if (!size) {",
          "68:       output = xla::Broadcast(zero, {output_size});",
          "69:       ctx->SetOutput(0, output);",
          "70:       return;",
          "71:     }",
          "72:     auto rank = input_shape.rank();",
          "74:     OP_REQUIRES(ctx, rank <= 2,",
          "75:                 errors::InvalidArgument(",
          "76:                     \"Shape must be at most rank 2 but is rank \", rank));",
          "78:     xla::XlaOp weights = ctx->Input(2);",
          "79:     StatusOr<xla::Shape> weights_shape_or = ctx->builder()->GetShape(weights);",
          "80:     OP_REQUIRES_OK(ctx, weights_shape_or.status());",
          "82:     auto weights_shape = weights_shape_or.ValueOrDie();",
          "83:     OP_REQUIRES(ctx,",
          "84:                 xla::ShapeUtil::CompatibleIgnoringElementType(weights_shape,",
          "85:                                                               input_shape) ||",
          "86:                     (weights_shape.dimensions_size() > 0 &&",
          "87:                      weights_shape.dimensions(0) == 0),",
          "88:                 errors::InvalidArgument(",
          "89:                     \"`weights` must be the same shape as `arr` or a length-0 \"",
          "90:                     \"`Tensor`, in which case it acts as all weights equal to \"",
          "91:                     \"1. Received \",",
          "92:                     weights_shape.DebugString()));",
          "94:     auto weights_size = weights_shape.dimensions(0);",
          "95:     bool has_weights = false;",
          "96:     if (weights_size) {",
          "97:       has_weights = true;",
          "98:     }",
          "99:     xla::Shape output_shape = xla::ShapeUtil::MakeShape(dtype, {output_size});",
          "100:     xla::ScatterDimensionNumbers scatter_dnums;",
          "101:     scatter_dnums.set_index_vector_dim(1);",
          "102:     scatter_dnums.add_inserted_window_dims(0);",
          "103:     scatter_dnums.add_scatter_dims_to_operand_dims(0);",
          "105:     if (rank == 2) {",
          "106:       output_shape = xla::ShapeUtil::MakeShape(dtype, {size, output_size});",
          "107:       scatter_dnums.add_inserted_window_dims(1);",
          "108:       scatter_dnums.add_scatter_dims_to_operand_dims(1);",
          "109:       auto i_shape =",
          "110:           xla::ShapeUtil::MakeShape(input_xla_type, {input_shape.dimensions()});",
          "111:       auto i = xla::Iota(ctx->builder(), i_shape, 0);",
          "112:       i = xla::Reshape(",
          "113:           i, {input_shape.dimensions(0) * input_shape.dimensions(1), 1});",
          "114:       auto j = xla::Reshape(",
          "115:           input, {input_shape.dimensions(0) * input_shape.dimensions(1), 1});",
          "116:       std::vector<xla::XlaOp> iotas_to_concat;",
          "117:       iotas_to_concat.push_back(i);",
          "118:       iotas_to_concat.push_back(j);",
          "119:       idx = xla::ConcatInDim(ctx->builder(), iotas_to_concat, 1);",
          "120:       updates = xla::Broadcast(",
          "121:           one, {input_shape.dimensions(0) * input_shape.dimensions(1)});",
          "122:       output = xla::Broadcast(",
          "123:           zero, {output_shape.dimensions(0), output_shape.dimensions(1)});",
          "124:       if (has_weights && !binary_output_) {",
          "125:         weights = xla::Reshape(",
          "126:             weights, {input_shape.dimensions(0) * input_shape.dimensions(1)});",
          "127:         updates = weights;",
          "128:       }",
          "129:     } else {",
          "130:       input = xla::Reshape(input, {size, 1});",
          "131:       idx = xla::Reshape(input, {size, 1});",
          "132:       updates = xla::Broadcast(one, {size});",
          "133:       output = xla::Broadcast(zero, {output_size});",
          "134:       if (has_weights && !binary_output_) {",
          "135:         updates = weights;",
          "136:       }",
          "137:     }",
          "139:     xla::XlaComputation assn_computation = [&] {",
          "140:       std::unique_ptr<xla::XlaBuilder> subb =",
          "141:           ctx->builder()->CreateSubBuilder(\"scatter_bincount\");",
          "142:       xla::Shape param_shape = xla::ShapeUtil::MakeShape(dtype, {});",
          "143:       auto p0 = xla::Parameter(subb.get(), 0, param_shape, \"p0\");",
          "144:       auto p1 = xla::Parameter(subb.get(), 1, param_shape, \"p1\");",
          "145:       if (!binary_output_) {",
          "146:         xla::Add(p0, p1);",
          "147:       }",
          "148:       return subb->BuildAndNoteError();",
          "149:     }();",
          "150:     output = xla::Scatter(output, idx, updates, assn_computation, scatter_dnums,",
          "151:                           false, false);",
          "152:     ctx->SetOutput(0, output);",
          "153:   }",
          "154: };",
          "156: REGISTER_XLA_OP(Name(\"DenseBincount\").CompileTimeConstantInput(\"size\"),",
          "157:                 DenseBincountOp);",
          "158: REGISTER_XLA_OP(Name(\"Bincount\").CompileTimeConstantInput(\"size\"),",
          "159:                 DenseBincountOp);",
          "161: }  // namespace",
          "162: }  // namespace tensorflow",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc": [
          "File: tensorflow/core/kernels/bincount_op.cc -> tensorflow/core/kernels/bincount_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:     OP_REQUIRES(ctx, size_t.dims() == 0,",
          "280:                 errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "281:                                         size_t.dims()));",
          "282:     Tidx size = size_t.scalar<Tidx>()();",
          "283:     OP_REQUIRES(",
          "284:         ctx, size >= 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282:     OP_REQUIRES(ctx,",
          "283:                 weights.shape() == data.shape() || weights.NumElements() == 0,",
          "284:                 errors::InvalidArgument(",
          "285:                     \"`weights` must be the same shape as `arr` or a length-0 \"",
          "286:                     \"`Tensor`, in which case it acts as all weights equal to \"",
          "287:                     \"1. Received \",",
          "288:                     weights.shape().DebugString()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/math_ops/bincount_op_test.py||tensorflow/python/kernel_tests/math_ops/bincount_op_test.py": [
          "File: tensorflow/python/kernel_tests/math_ops/bincount_op_test.py -> tensorflow/python/kernel_tests/math_ops/bincount_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: from tensorflow.python.ops import array_ops",
          "25: from tensorflow.python.ops import bincount_ops",
          "26: from tensorflow.python.ops import gen_math_ops",
          "27: from tensorflow.python.ops import sparse_ops",
          "28: from tensorflow.python.ops.ragged import ragged_factory_ops",
          "29: from tensorflow.python.ops.ragged import ragged_tensor",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: from tensorflow.python.ops import random_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:       v2 = gen_math_ops.bincount([1, 2, 3, 1, 6, 8], s, [])",
          "151:       self.assertAllEqual(v2.get_shape().as_list(), [None])",
          "154: class BincountOpTest(test_util.TensorFlowTestCase, parameterized.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154:   @test_util.run_in_graph_and_eager_modes",
          "155:   def test_invalid_inputs(self):",
          "156:     binary_output = True",
          "157:     inp = random_ops.random_uniform(",
          "158:         shape=[10, 10],",
          "159:         minval=-10000,",
          "160:         maxval=10000,",
          "161:         dtype=dtypes.int32,",
          "162:         seed=-2460)",
          "163:     size = random_ops.random_uniform(",
          "164:         shape=[], minval=-10000, maxval=10000, dtype=dtypes.int32, seed=-10000)",
          "165:     weights = random_ops.random_uniform(",
          "166:         shape=[],",
          "167:         minval=-10000,",
          "168:         maxval=10000,",
          "169:         dtype=dtypes.float32,",
          "170:         seed=-10000)",
          "171:     with self.assertRaises(errors.InvalidArgumentError):",
          "172:       self.evaluate(",
          "173:           gen_math_ops.dense_bincount(",
          "174:               input=inp,",
          "175:               size=size,",
          "176:               weights=weights,",
          "177:               binary_output=binary_output))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "425af2ea03ec37735f5dd87b0389a7045a225cdf",
      "candidate_info": {
        "commit_hash": "425af2ea03ec37735f5dd87b0389a7045a225cdf",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/425af2ea03ec37735f5dd87b0389a7045a225cdf",
        "files": [
          "tensorflow/compiler/tf2xla/kernels/bincount_op.cc",
          "tensorflow/core/kernels/bincount_op.cc",
          "tensorflow/python/kernel_tests/bincount_op_test.py"
        ],
        "message": "Fix security vulnerability with DenseBincountOp\n\nPiperOrigin-RevId: 460826735",
        "before_after_code_files": [
          "tensorflow/compiler/tf2xla/kernels/bincount_op.cc||tensorflow/compiler/tf2xla/kernels/bincount_op.cc",
          "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc",
          "tensorflow/python/kernel_tests/bincount_op_test.py||tensorflow/python/kernel_tests/bincount_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/compiler/tf2xlkernels/bincount_op.cc||tensorflow/compiler/tf2xla/kernels/bincount_op.cc",
            "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc"
          ],
          "candidate": [
            "tensorflow/compiler/tf2xla/kernels/bincount_op.cc||tensorflow/compiler/tf2xla/kernels/bincount_op.cc",
            "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/compiler/tf2xla/kernels/bincount_op.cc||tensorflow/compiler/tf2xla/kernels/bincount_op.cc": [
          "File: tensorflow/compiler/tf2xla/kernels/bincount_op.cc -> tensorflow/compiler/tf2xla/kernels/bincount_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: you may not use this file except in compliance with the License.",
          "5: You may obtain a copy of the License at",
          "7:     http://www.apache.org/licenses/LICENSE-2.0",
          "9: Unless required by applicable law or agreed to in writing, software",
          "10: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "16: #include <memory>",
          "17: #include <vector>",
          "19: #include \"tensorflow/compiler/tf2xla/type_util.h\"",
          "20: #include \"tensorflow/compiler/tf2xla/xla_helpers.h\"",
          "21: #include \"tensorflow/compiler/tf2xla/xla_op_kernel.h\"",
          "22: #include \"tensorflow/compiler/tf2xla/xla_op_registry.h\"",
          "23: #include \"tensorflow/compiler/xla/client/lib/arithmetic.h\"",
          "24: #include \"tensorflow/compiler/xla/client/lib/comparators.h\"",
          "25: #include \"tensorflow/compiler/xla/client/lib/constants.h\"",
          "26: #include \"tensorflow/compiler/xla/client/xla_computation.h\"",
          "27: #include \"tensorflow/compiler/xla/shape_util.h\"",
          "29: namespace tensorflow {",
          "30: namespace {",
          "32: class DenseBincountOp : public XlaOpKernel {",
          "33:  public:",
          "34:   explicit DenseBincountOp(OpKernelConstruction* ctx) : XlaOpKernel(ctx) {",
          "36:     (void)ctx->GetAttr(\"binary_output\", &binary_output_);",
          "37:   }",
          "39:  private:",
          "40:   bool binary_output_ = false;",
          "41:   void Compile(XlaOpKernelContext* ctx) override {",
          "42:     int64_t output_size;",
          "43:     xla::XlaOp output_size_param = ctx->Input(\"size\");",
          "44:     StatusOr<xla::Shape> output_shape_or =",
          "45:         ctx->builder()->GetShape(output_size_param);",
          "46:     OP_REQUIRES_OK(ctx, output_shape_or.status());",
          "47:     auto output_shape_param = output_shape_or.ValueOrDie();",
          "48:     auto output_rank = output_shape_param.rank();",
          "49:     OP_REQUIRES(ctx, output_rank == 0,",
          "50:                 errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "51:                                         output_rank));",
          "52:     OP_REQUIRES_OK(ctx, ctx->ConstantInputAsIntScalar(\"size\", &output_size));",
          "53:     OP_REQUIRES(ctx, output_size >= 0,",
          "54:                 errors::InvalidArgument(\"size (\", output_size,",
          "55:                                         \") must be non-negative\"));",
          "56:     xla::XlaOp idx, updates, output;",
          "57:     xla::XlaOp input = ctx->Input(0);",
          "58:     auto input_xla_type = ctx->input_xla_type(0);",
          "59:     xla::PrimitiveType dtype = ctx->InputXlaType(\"weights\");",
          "60:     auto zero = xla::Zero(ctx->builder(), dtype);",
          "61:     auto one = xla::One(ctx->builder(), dtype);",
          "62:     StatusOr<xla::Shape> input_shape_or = ctx->builder()->GetShape(input);",
          "63:     OP_REQUIRES_OK(ctx, input_shape_or.status());",
          "64:     auto input_shape = input_shape_or.ValueOrDie();",
          "65:     auto size = input_shape.dimensions(0);",
          "67:     if (!size) {",
          "68:       output = xla::Broadcast(zero, {output_size});",
          "69:       ctx->SetOutput(0, output);",
          "70:       return;",
          "71:     }",
          "72:     auto rank = input_shape.rank();",
          "74:     OP_REQUIRES(ctx, rank <= 2,",
          "75:                 errors::InvalidArgument(",
          "76:                     \"Shape must be at most rank 2 but is rank \", rank));",
          "78:     xla::XlaOp weights = ctx->Input(2);",
          "79:     StatusOr<xla::Shape> weights_shape_or = ctx->builder()->GetShape(weights);",
          "80:     OP_REQUIRES_OK(ctx, weights_shape_or.status());",
          "82:     auto weights_shape = weights_shape_or.ValueOrDie();",
          "83:     OP_REQUIRES(ctx,",
          "84:                 xla::ShapeUtil::CompatibleIgnoringElementType(weights_shape,",
          "85:                                                               input_shape) ||",
          "86:                     (weights_shape.dimensions_size() > 0 &&",
          "87:                      weights_shape.dimensions(0) == 0),",
          "88:                 errors::InvalidArgument(",
          "89:                     \"`weights` must be the same shape as `arr` or a length-0 \"",
          "90:                     \"`Tensor`, in which case it acts as all weights equal to \"",
          "91:                     \"1. Received \",",
          "92:                     weights_shape.DebugString()));",
          "94:     auto weights_size = weights_shape.dimensions(0);",
          "95:     bool has_weights = false;",
          "96:     if (weights_size) {",
          "97:       has_weights = true;",
          "98:     }",
          "99:     xla::Shape output_shape = xla::ShapeUtil::MakeShape(dtype, {output_size});",
          "100:     xla::ScatterDimensionNumbers scatter_dnums;",
          "101:     scatter_dnums.set_index_vector_dim(1);",
          "102:     scatter_dnums.add_inserted_window_dims(0);",
          "103:     scatter_dnums.add_scatter_dims_to_operand_dims(0);",
          "105:     if (rank == 2) {",
          "106:       output_shape = xla::ShapeUtil::MakeShape(dtype, {size, output_size});",
          "107:       scatter_dnums.add_inserted_window_dims(1);",
          "108:       scatter_dnums.add_scatter_dims_to_operand_dims(1);",
          "109:       auto i_shape =",
          "110:           xla::ShapeUtil::MakeShape(input_xla_type, {input_shape.dimensions()});",
          "111:       auto i = xla::Iota(ctx->builder(), i_shape, 0);",
          "112:       i = xla::Reshape(",
          "113:           i, {input_shape.dimensions(0) * input_shape.dimensions(1), 1});",
          "114:       auto j = xla::Reshape(",
          "115:           input, {input_shape.dimensions(0) * input_shape.dimensions(1), 1});",
          "116:       std::vector<xla::XlaOp> iotas_to_concat;",
          "117:       iotas_to_concat.push_back(i);",
          "118:       iotas_to_concat.push_back(j);",
          "119:       idx = xla::ConcatInDim(ctx->builder(), iotas_to_concat, 1);",
          "120:       updates = xla::Broadcast(",
          "121:           one, {input_shape.dimensions(0) * input_shape.dimensions(1)});",
          "122:       output = xla::Broadcast(",
          "123:           zero, {output_shape.dimensions(0), output_shape.dimensions(1)});",
          "124:       if (has_weights && !binary_output_) {",
          "125:         weights = xla::Reshape(",
          "126:             weights, {input_shape.dimensions(0) * input_shape.dimensions(1)});",
          "127:         updates = weights;",
          "128:       }",
          "129:     } else {",
          "130:       input = xla::Reshape(input, {size, 1});",
          "131:       idx = xla::Reshape(input, {size, 1});",
          "132:       updates = xla::Broadcast(one, {size});",
          "133:       output = xla::Broadcast(zero, {output_size});",
          "134:       if (has_weights && !binary_output_) {",
          "135:         updates = weights;",
          "136:       }",
          "137:     }",
          "139:     xla::XlaComputation assn_computation = [&] {",
          "140:       std::unique_ptr<xla::XlaBuilder> subb =",
          "141:           ctx->builder()->CreateSubBuilder(\"scatter_bincount\");",
          "142:       xla::Shape param_shape = xla::ShapeUtil::MakeShape(dtype, {});",
          "143:       auto p0 = xla::Parameter(subb.get(), 0, param_shape, \"p0\");",
          "144:       auto p1 = xla::Parameter(subb.get(), 1, param_shape, \"p1\");",
          "145:       if (!binary_output_) {",
          "146:         xla::Add(p0, p1);",
          "147:       }",
          "148:       return subb->BuildAndNoteError();",
          "149:     }();",
          "150:     output = xla::Scatter(output, idx, updates, assn_computation, scatter_dnums,",
          "151:                           false, false);",
          "152:     ctx->SetOutput(0, output);",
          "153:   }",
          "154: };",
          "156: REGISTER_XLA_OP(Name(\"DenseBincount\").CompileTimeConstantInput(\"size\"),",
          "157:                 DenseBincountOp);",
          "158: REGISTER_XLA_OP(Name(\"Bincount\").CompileTimeConstantInput(\"size\"),",
          "159:                 DenseBincountOp);",
          "161: }  // namespace",
          "162: }  // namespace tensorflow",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc": [
          "File: tensorflow/core/kernels/bincount_op.cc -> tensorflow/core/kernels/bincount_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:     OP_REQUIRES(ctx, size_t.dims() == 0,",
          "280:                 errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "281:                                         size_t.dims()));",
          "282:     Tidx size = size_t.scalar<Tidx>()();",
          "283:     OP_REQUIRES(",
          "284:         ctx, size >= 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282:     OP_REQUIRES(ctx,",
          "283:                 weights.shape() == data.shape() || weights.NumElements() == 0,",
          "284:                 errors::InvalidArgument(",
          "285:                     \"`weights` must be the same shape as `arr` or a length-0 \"",
          "286:                     \"`Tensor`, in which case it acts as all weights equal to \"",
          "287:                     \"1. Received \",",
          "288:                     weights.shape().DebugString()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/bincount_op_test.py||tensorflow/python/kernel_tests/bincount_op_test.py": [
          "File: tensorflow/python/kernel_tests/bincount_op_test.py -> tensorflow/python/kernel_tests/bincount_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: from tensorflow.python.ops import array_ops",
          "29: from tensorflow.python.ops import bincount_ops",
          "30: from tensorflow.python.ops import gen_math_ops",
          "31: from tensorflow.python.ops import sparse_ops",
          "32: from tensorflow.python.ops.ragged import ragged_factory_ops",
          "33: from tensorflow.python.ops.ragged import ragged_tensor",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: from tensorflow.python.ops import random_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:       v2 = gen_math_ops.bincount([1, 2, 3, 1, 6, 8], s, [])",
          "155:       self.assertAllEqual(v2.get_shape().as_list(), [None])",
          "158: class BincountOpTest(test_util.TensorFlowTestCase, parameterized.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158:   @test_util.run_in_graph_and_eager_modes",
          "159:   def test_invalid_inputs(self):",
          "160:     binary_output = True",
          "161:     inp = random_ops.random_uniform(",
          "162:         shape=[10, 10],",
          "163:         minval=-10000,",
          "164:         maxval=10000,",
          "165:         dtype=dtypes.int32,",
          "166:         seed=-2460)",
          "167:     size = random_ops.random_uniform(",
          "168:         shape=[], minval=-10000, maxval=10000, dtype=dtypes.int32, seed=-10000)",
          "169:     weights = random_ops.random_uniform(",
          "170:         shape=[],",
          "171:         minval=-10000,",
          "172:         maxval=10000,",
          "173:         dtype=dtypes.float32,",
          "174:         seed=-10000)",
          "175:     with self.assertRaises(errors.InvalidArgumentError):",
          "176:       self.evaluate(",
          "177:           gen_math_ops.dense_bincount(",
          "178:               input=inp,",
          "179:               size=size,",
          "180:               weights=weights,",
          "181:               binary_output=binary_output))",
          "",
          "---------------"
        ]
      }
    }
  ]
}