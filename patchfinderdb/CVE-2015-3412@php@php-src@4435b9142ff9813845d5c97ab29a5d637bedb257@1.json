{
  "cve_id": "CVE-2015-3412",
  "cve_desc": "PHP before 5.4.40, 5.5.x before 5.5.24, and 5.6.x before 5.6.8 does not ensure that pathnames lack %00 sequences, which might allow remote attackers to read arbitrary files via crafted input to an application that calls the stream_resolve_include_path function in ext/standard/streamsfuncs.c, as demonstrated by a filename\\0.extension attack that bypasses an intended configuration in which client users may read files with only one specific extension.",
  "repo": "php/php-src",
  "patch_hash": "4435b9142ff9813845d5c97ab29a5d637bedb257",
  "patch_info": {
    "commit_hash": "4435b9142ff9813845d5c97ab29a5d637bedb257",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/4435b9142ff9813845d5c97ab29a5d637bedb257",
    "files": [
      "ext/dom/document.c",
      "ext/dom/tests/DOMDocument_loadHTMLfile_error2.phpt",
      "ext/fileinfo/fileinfo.c",
      "ext/fileinfo/tests/finfo_file_basic.phpt",
      "ext/gd/gd.c",
      "ext/hash/hash.c",
      "ext/hash/tests/hash_hmac_file_error.phpt",
      "ext/pgsql/pgsql.c",
      "ext/standard/link.c",
      "ext/standard/streamsfuncs.c",
      "ext/xmlwriter/php_xmlwriter.c",
      "ext/zlib/zlib.c"
    ],
    "message": "Fixed bug #69353 (Missing null byte checks for paths in various PHP extensions)",
    "before_after_code_files": [
      "ext/dom/document.c||ext/dom/document.c",
      "ext/dom/tests/DOMDocument_loadHTMLfile_error2.phpt||ext/dom/tests/DOMDocument_loadHTMLfile_error2.phpt",
      "ext/fileinfo/fileinfo.c||ext/fileinfo/fileinfo.c",
      "ext/fileinfo/tests/finfo_file_basic.phpt||ext/fileinfo/tests/finfo_file_basic.phpt",
      "ext/gd/gd.c||ext/gd/gd.c",
      "ext/hash/hash.c||ext/hash/hash.c",
      "ext/hash/tests/hash_hmac_file_error.phpt||ext/hash/tests/hash_hmac_file_error.phpt",
      "ext/pgsql/pgsql.c||ext/pgsql/pgsql.c",
      "ext/standard/link.c||ext/standard/link.c",
      "ext/standard/streamsfuncs.c||ext/standard/streamsfuncs.c",
      "ext/xmlwriter/php_xmlwriter.c||ext/xmlwriter/php_xmlwriter.c",
      "ext/zlib/zlib.c||ext/zlib/zlib.c"
    ]
  },
  "patch_diff": {
    "ext/dom/document.c||ext/dom/document.c": [
      "File: ext/dom/document.c -> ext/dom/document.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1580:  xmlInitParser();",
      "1582:  if (mode == DOM_LOAD_FILE) {",
      "1583:   char *file_dest = _dom_get_valid_file_path(source, resolved_path, MAXPATHLEN  TSRMLS_CC);",
      "1584:   if (file_dest) {",
      "1585:    ctxt = xmlCreateFileParserCtxt(file_dest);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1583:   if (CHECK_NULL_PATH(source, source_len)) {",
      "1584:    return NULL;",
      "1585:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2169:  id = getThis();",
      "2172:   return;",
      "2173:  }",
      "",
      "[Removed Lines]",
      "2171:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s|l\", &source, &source_len, &options) == FAILURE) {",
      "",
      "[Added Lines]",
      "2174:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p|l\", &source, &source_len, &options) == FAILURE) {",
      "",
      "---------------"
    ],
    "ext/dom/tests/DOMDocument_loadHTMLfile_error2.phpt||ext/dom/tests/DOMDocument_loadHTMLfile_error2.phpt": [
      "File: ext/dom/tests/DOMDocument_loadHTMLfile_error2.phpt -> ext/dom/tests/DOMDocument_loadHTMLfile_error2.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: $doc = new DOMDocument();",
      "14: $result = $doc->loadHTMLFile(\"\");",
      "15: assert('$result === false');",
      "16: ?>",
      "17: --EXPECTF--",
      "18: %r(PHP ){0,1}%rWarning: DOMDocument::loadHTMLFile(): Empty string supplied as input %s",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16: $doc = new DOMDocument();",
      "17: $result = $doc->loadHTMLFile(\"text.html\\0something\");",
      "18: assert('$result === null');",
      "23: %r(PHP ){0,1}%rWarning: DOMDocument::loadHTMLFile() expects parameter 1 to be a valid path, string given %s",
      "",
      "---------------"
    ],
    "ext/fileinfo/fileinfo.c||ext/fileinfo/fileinfo.c": [
      "File: ext/fileinfo/fileinfo.c -> ext/fileinfo/fileinfo.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "506:     RETVAL_FALSE;",
      "507:     goto clean;",
      "508:    }",
      "510:    wrap = php_stream_locate_url_wrapper(buffer, &tmp2, 0 TSRMLS_CC);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "509:    if (CHECK_NULL_PATH(buffer, buffer_len)) {",
      "510:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid path\");",
      "511:     RETVAL_FALSE;",
      "512:     goto clean;",
      "513:    }",
      "",
      "---------------"
    ],
    "ext/fileinfo/tests/finfo_file_basic.phpt||ext/fileinfo/tests/finfo_file_basic.phpt": [
      "File: ext/fileinfo/tests/finfo_file_basic.phpt -> ext/fileinfo/tests/finfo_file_basic.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: var_dump( finfo_file( $finfo, __FILE__) );",
      "20: var_dump( finfo_file( $finfo, __FILE__, FILEINFO_CONTINUE ) );",
      "21: var_dump( finfo_file( $finfo, $magicFile ) );",
      "23: ?>",
      "24: ===DONE===",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: var_dump( finfo_file( $finfo, $magicFile.chr(0).$magicFile) );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "27: string(28) \"text/x-php; charset=us-ascii\"",
      "28: string(22) \"PHP script, ASCII text\"",
      "29: string(25) \"text/plain; charset=utf-8\"",
      "30: ===DONE===",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32: Warning: finfo_file(): Invalid path in %s/finfo_file_basic.php on line %d",
      "33: bool(false)",
      "",
      "---------------"
    ],
    "ext/gd/gd.c||ext/gd/gd.c": [
      "File: ext/gd/gd.c -> ext/gd/gd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1495:  gdFontPtr font;",
      "1496:  php_stream *stream;",
      "1499:   return;",
      "1500:  }",
      "",
      "[Removed Lines]",
      "1498:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &file, &file_name) == FAILURE) {",
      "",
      "[Added Lines]",
      "1498:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p\", &file, &file_name) == FAILURE) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2438:  long ignore_warning;",
      "2439: #endif",
      "2440:  if (image_type == PHP_GDIMG_TYPE_GD2PART) {",
      "2442:    return;",
      "2443:   }",
      "2444:   if (width < 1 || height < 1) {",
      "",
      "[Removed Lines]",
      "2441:   if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"sllll\", &file, &file_len, &srcx, &srcy, &width, &height) == FAILURE) {",
      "",
      "[Added Lines]",
      "2441:   if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"pllll\", &file, &file_len, &srcx, &srcy, &width, &height) == FAILURE) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2446:    RETURN_FALSE;",
      "2447:   }",
      "2448:  } else {",
      "2450:    return;",
      "2451:   }",
      "2452:  }",
      "",
      "[Removed Lines]",
      "2449:   if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &file, &file_len) == FAILURE) {",
      "",
      "[Added Lines]",
      "2449:   if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p\", &file, &file_len) == FAILURE) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "4178:  char *enc, **enc_vector;",
      "4179:  int enc_len, *f_ind;",
      "4182:   return;",
      "4183:  }",
      "",
      "[Removed Lines]",
      "4181:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"rs\", &fnt, &enc, &enc_len) == FAILURE) {",
      "",
      "[Added Lines]",
      "4181:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"rp\", &fnt, &enc, &enc_len) == FAILURE) {",
      "",
      "---------------"
    ],
    "ext/hash/hash.c||ext/hash/hash.c": [
      "File: ext/hash/hash.c -> ext/hash/hash.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "142:  }",
      "143:  if (isfilename) {",
      "144:   if (CHECK_NULL_PATH(data, data_len)) {",
      "145:    RETURN_FALSE;",
      "146:   }",
      "147:   stream = php_stream_open_wrapper_ex(data, \"rb\", REPORT_ERRORS, NULL, DEFAULT_CONTEXT);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "145:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid path\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "222:   RETURN_FALSE;",
      "223:  }",
      "224:  if (isfilename) {",
      "225:   stream = php_stream_open_wrapper_ex(data, \"rb\", REPORT_ERRORS, NULL, DEFAULT_CONTEXT);",
      "226:   if (!stream) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "226:   if (CHECK_NULL_PATH(data, data_len)) {",
      "227:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid path\");",
      "228:    RETURN_FALSE;",
      "229:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "449:  char *filename, buf[1024];",
      "450:  int filename_len, n;",
      "453:   return;",
      "454:  }",
      "",
      "[Removed Lines]",
      "452:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"rs|r\", &zhash, &filename, &filename_len, &zcontext) == FAILURE) {",
      "",
      "[Added Lines]",
      "457:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"rp|r\", &zhash, &filename, &filename_len, &zcontext) == FAILURE) {",
      "",
      "---------------"
    ],
    "ext/hash/tests/hash_hmac_file_error.phpt||ext/hash/tests/hash_hmac_file_error.phpt": [
      "File: ext/hash/tests/hash_hmac_file_error.phpt -> ext/hash/tests/hash_hmac_file_error.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "28: echo \"\\n-- Testing hash_hmac_file() function with invalid hash algorithm --\\n\";",
      "29: hash_hmac_file('foo', $file, $key, TRUE);",
      "31: ?>",
      "32: ===Done===",
      "33: --EXPECTF--",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "31: echo \"\\n-- Testing hash_hmac_file() function with bad path --\\n\";",
      "32: hash_hmac_file('crc32', $file.chr(0).$file, $key, TRUE);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "51: -- Testing hash_hmac_file() function with invalid hash algorithm --",
      "53: Warning: hash_hmac_file(): Unknown hashing algorithm: foo in %s on line %d",
      "54: ===Done===",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "58: -- Testing hash_hmac_file() function with bad path --",
      "60: Warning: hash_hmac_file(): Invalid path in %s on line %d",
      "",
      "---------------"
    ],
    "ext/pgsql/pgsql.c||ext/pgsql/pgsql.c": [
      "File: ext/pgsql/pgsql.c -> ext/pgsql/pgsql.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3014:  php_stream *stream;",
      "3015:  id = PGG(default_link);",
      "3018:   return;",
      "3019:  }",
      "",
      "[Removed Lines]",
      "3017:  if (zend_parse_parameters(argc TSRMLS_CC, \"s|sr\", &z_filename, &z_filename_len, &mode, &mode_len, &pgsql_link) == FAILURE) {",
      "",
      "[Added Lines]",
      "3017:  if (zend_parse_parameters(argc TSRMLS_CC, \"p|sr\", &z_filename, &z_filename_len, &mode, &mode_len, &pgsql_link) == FAILURE) {",
      "",
      "---------------"
    ],
    "ext/standard/link.c||ext/standard/link.c": [
      "File: ext/standard/link.c -> ext/standard/link.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "59:  char buff[MAXPATHLEN];",
      "60:  int ret;",
      "63:   return;",
      "64:  }",
      "",
      "[Removed Lines]",
      "62:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &link, &link_len) == FAILURE) {",
      "",
      "[Added Lines]",
      "62:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p\", &link, &link_len) == FAILURE) {",
      "",
      "---------------"
    ],
    "ext/standard/streamsfuncs.c||ext/standard/streamsfuncs.c": [
      "File: ext/standard/streamsfuncs.c -> ext/standard/streamsfuncs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1549:  char *filename, *resolved_path;",
      "1550:  int filename_len;",
      "1553:   return;",
      "1554:  }",
      "",
      "[Removed Lines]",
      "1552:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &filename, &filename_len) == FAILURE) {",
      "",
      "[Added Lines]",
      "1552:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p\", &filename, &filename_len) == FAILURE) {",
      "",
      "---------------"
    ],
    "ext/xmlwriter/php_xmlwriter.c||ext/xmlwriter/php_xmlwriter.c": [
      "File: ext/xmlwriter/php_xmlwriter.c -> ext/xmlwriter/php_xmlwriter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1759:  void *ioctx;",
      "1760: #endif",
      "1763:   return;",
      "1764:  }",
      "",
      "[Removed Lines]",
      "1762:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &source, &source_len) == FAILURE) {",
      "",
      "[Added Lines]",
      "1762:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p\", &source, &source_len) == FAILURE) {",
      "",
      "---------------"
    ],
    "ext/zlib/zlib.c||ext/zlib/zlib.c": [
      "File: ext/zlib/zlib.c -> ext/zlib/zlib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "581:  php_stream *stream;",
      "582:  long use_include_path = 0;",
      "585:   return;",
      "586:  }",
      "",
      "[Removed Lines]",
      "584:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ss|l\", &filename, &filename_len, &mode, &mode_len, &use_include_path) == FAILURE) {",
      "",
      "[Added Lines]",
      "584:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ps|l\", &filename, &filename_len, &mode, &mode_len, &use_include_path) == FAILURE) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "609:  int size;",
      "610:  long use_include_path = 0;",
      "613:   return;",
      "614:  }",
      "",
      "[Removed Lines]",
      "612:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s|l\", &filename, &filename_len, &use_include_path) == FAILURE) {",
      "",
      "[Added Lines]",
      "612:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p|l\", &filename, &filename_len, &use_include_path) == FAILURE) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "928dce708ce18daa9c191f6ab4b6ab861a218e8f",
      "candidate_info": {
        "commit_hash": "928dce708ce18daa9c191f6ab4b6ab861a218e8f",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/928dce708ce18daa9c191f6ab4b6ab861a218e8f",
        "files": [
          "ext/dom/tests/DOMDocument_loadHTMLfile_error2.phpt"
        ],
        "message": "fix test",
        "before_after_code_files": [
          "ext/dom/tests/DOMDocument_loadHTMLfile_error2.phpt||ext/dom/tests/DOMDocument_loadHTMLfile_error2.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/dom/tests/DOMDocument_loadHTMLfile_error2.phpt||ext/dom/tests/DOMDocument_loadHTMLfile_error2.phpt"
          ],
          "candidate": [
            "ext/dom/tests/DOMDocument_loadHTMLfile_error2.phpt||ext/dom/tests/DOMDocument_loadHTMLfile_error2.phpt"
          ]
        }
      },
      "candidate_diff": {
        "ext/dom/tests/DOMDocument_loadHTMLfile_error2.phpt||ext/dom/tests/DOMDocument_loadHTMLfile_error2.phpt": [
          "File: ext/dom/tests/DOMDocument_loadHTMLfile_error2.phpt -> ext/dom/tests/DOMDocument_loadHTMLfile_error2.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: assert('$result === false');",
          "16: $doc = new DOMDocument();",
          "17: $result = $doc->loadHTMLFile(\"text.html\\0something\");",
          "19: ?>",
          "20: --EXPECTF--",
          "21: %r(PHP ){0,1}%rWarning: DOMDocument::loadHTMLFile(): Empty string supplied as input %s",
          "",
          "[Removed Lines]",
          "18: assert('$result === null');",
          "23: %r(PHP ){0,1}%rWarning: DOMDocument::loadHTMLFile() expects parameter 1 to be a valid path, string given %s",
          "",
          "[Added Lines]",
          "18: assert('$result === false');",
          "23: %r(PHP ){0,1}%rWarning: DOMDocument::loadHTMLFile(): Invalid file source %s",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "58e590aac6839ace470650c58bf418e5fa637eb3",
      "candidate_info": {
        "commit_hash": "58e590aac6839ace470650c58bf418e5fa637eb3",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/58e590aac6839ace470650c58bf418e5fa637eb3",
        "files": [
          "ext/dom/document.c",
          "ext/gd/gd.c"
        ],
        "message": "Fix #69719 - more checks for nulls in paths\n\nConflicts:\n\text/dom/document.c\n\text/gd/gd.c",
        "before_after_code_files": [
          "ext/dom/document.c||ext/dom/document.c",
          "ext/gd/gd.c||ext/gd/gd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/dom/document.c||ext/dom/document.c",
            "ext/gd/gd.c||ext/gd/gd.c"
          ],
          "candidate": [
            "ext/dom/document.c||ext/dom/document.c",
            "ext/gd/gd.c||ext/gd/gd.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/dom/document.c||ext/dom/document.c": [
          "File: ext/dom/document.c -> ext/dom/document.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1761:  char *file;",
          "1762:  long options = 0;",
          "1765:   return;",
          "1766:  }",
          "",
          "[Removed Lines]",
          "1764:  if (zend_parse_method_parameters(ZEND_NUM_ARGS() TSRMLS_CC, getThis(), \"Os|l\", &id, dom_document_class_entry, &file, &file_len, &options) == FAILURE) {",
          "",
          "[Added Lines]",
          "1764:  if (zend_parse_method_parameters(ZEND_NUM_ARGS() TSRMLS_CC, getThis(), \"Op|l\", &id, dom_document_class_entry, &file, &file_len, &options) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2005:  switch (type) {",
          "2006:  case DOM_LOAD_FILE:",
          "2007:   valid_file = _dom_get_valid_file_path(source, resolved_path, MAXPATHLEN  TSRMLS_CC);",
          "2008:   if (!valid_file) {",
          "2009:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid Schema file source\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2007:   if (CHECK_NULL_PATH(source, source_len)) {",
          "2008:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid Schema file source\");",
          "2009:    RETURN_FALSE;",
          "2010:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2087:  int                     is_valid;",
          "2088:  char resolved_path[MAXPATHLEN + 1];",
          "2091:   return;",
          "2092:  }",
          "",
          "[Removed Lines]",
          "2090:  if (zend_parse_method_parameters(ZEND_NUM_ARGS() TSRMLS_CC, getThis(), \"Op\", &id, dom_document_class_entry, &source, &source_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "2094:  if (zend_parse_method_parameters(ZEND_NUM_ARGS() TSRMLS_CC, getThis(), \"Os\", &id, dom_document_class_entry, &source, &source_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2101:  switch (type) {",
          "2102:  case DOM_LOAD_FILE:",
          "2103:   valid_file = _dom_get_valid_file_path(source, resolved_path, MAXPATHLEN  TSRMLS_CC);",
          "2104:   if (!valid_file) {",
          "2105:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid RelaxNG file source\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2107:   if (CHECK_NULL_PATH(source, source_len)) {",
          "2108:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid RelaxNG file source\");",
          "2109:    RETURN_FALSE;",
          "2110:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2181:  id = getThis();",
          "2184:   return;",
          "2185:  }",
          "",
          "[Removed Lines]",
          "2183:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p|l\", &source, &source_len, &options) == FAILURE) {",
          "",
          "[Added Lines]",
          "2191:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s|l\", &source, &source_len, &options) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2190:  }",
          "2192:  if (mode == DOM_LOAD_FILE) {",
          "2193:   ctxt = htmlCreateFileParserCtxt(source, NULL);",
          "2194:  } else {",
          "2195:   source_len = xmlStrlen(source);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2201:   if (CHECK_NULL_PATH(source, source_len)) {",
          "2202:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid file source\");",
          "2203:    RETURN_FALSE;",
          "2204:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2278:  char *file;",
          "2279:  const char *encoding;",
          "2282:   return;",
          "2283:  }",
          "",
          "[Removed Lines]",
          "2281:  if (zend_parse_method_parameters(ZEND_NUM_ARGS() TSRMLS_CC, getThis(), \"Os\", &id, dom_document_class_entry, &file, &file_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "2293:  if (zend_parse_method_parameters(ZEND_NUM_ARGS() TSRMLS_CC, getThis(), \"Op\", &id, dom_document_class_entry, &file, &file_len) == FAILURE) {",
          "",
          "---------------"
        ],
        "ext/gd/gd.c||ext/gd/gd.c": [
          "File: ext/gd/gd.c -> ext/gd/gd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1976:  if ( handle == 0 ) {",
          "1977:   goto clean;",
          "1978:  }",
          "1981:  if ( pPrintWindow )  {",
          "1982:   pPrintWindow(window, memDC, (UINT) client_area);",
          "",
          "[Removed Lines]",
          "1979:  pPrintWindow = (tPrintWindow) GetProcAddress(handle, \"PrintWindow\");",
          "",
          "[Added Lines]",
          "1979:  pPrintWindow = (tPrintWindow) GetProcAddress(handle, \"PrintWindow\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3868:  PHP_GD_CHECK_OPEN_BASEDIR(fontname, \"Invalid font filename\");",
          "3871:  if (extended) {",
          "3872:   error = gdImageStringFTEx(im, brect, col, fontname, ptsize, angle, x, y, str, &strex);",
          "3873:  }",
          "",
          "[Removed Lines]",
          "3870: #ifdef HAVE_GD_FREETYPE",
          "",
          "[Added Lines]",
          "3870: #ifdef USE_GD_IMGSTRTTF",
          "3871: # if HAVE_GD_STRINGFTEX",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3924:  struct stat st;",
          "3925: #endif",
          "3928:   return;",
          "3929:  }",
          "",
          "[Removed Lines]",
          "3927:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &file, &file_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "3928:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p\", &file, &file_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4444:  int x, y;",
          "4445:  float x_ratio, y_ratio;",
          "4446:     long ignore_warning;",
          "4448:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"pplll\", &f_org, &f_org_len, &f_dest, &f_dest_len, &height, &width, &threshold) == FAILURE) {",
          "4449:   return;",
          "4450:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4448: <<<<<<< HEAD",
          "4450: =======",
          "4451: #endif",
          "4453: >>>>>>> f7d7bef... Fix #69719 - more checks for nulls in paths",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8fc52d77d6f66c438c98d536e2309b5fd13f90de",
      "candidate_info": {
        "commit_hash": "8fc52d77d6f66c438c98d536e2309b5fd13f90de",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/8fc52d77d6f66c438c98d536e2309b5fd13f90de",
        "files": [
          "ext/dom/document.c",
          "ext/gd/gd.c"
        ],
        "message": "Fix #69719 - more checks for nulls in paths",
        "before_after_code_files": [
          "ext/dom/document.c||ext/dom/document.c",
          "ext/gd/gd.c||ext/gd/gd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/dom/document.c||ext/dom/document.c",
            "ext/gd/gd.c||ext/gd/gd.c"
          ],
          "candidate": [
            "ext/dom/document.c||ext/dom/document.c",
            "ext/gd/gd.c||ext/gd/gd.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/dom/document.c||ext/dom/document.c": [
          "File: ext/dom/document.c -> ext/dom/document.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1700:  char *file;",
          "1701:  long options = 0;",
          "1704:   return;",
          "1705:  }",
          "",
          "[Removed Lines]",
          "1703:  if (zend_parse_method_parameters(ZEND_NUM_ARGS() TSRMLS_CC, getThis(), \"Os|l\", &id, dom_document_class_entry, &file, &file_len, &options) == FAILURE) {",
          "",
          "[Added Lines]",
          "1703:  if (zend_parse_method_parameters(ZEND_NUM_ARGS() TSRMLS_CC, getThis(), \"Op|l\", &id, dom_document_class_entry, &file, &file_len, &options) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1930:  int                     is_valid;",
          "1931:  char resolved_path[MAXPATHLEN + 1];",
          "1934:   return;",
          "1935:  }",
          "",
          "[Removed Lines]",
          "1933:  if (zend_parse_method_parameters(ZEND_NUM_ARGS() TSRMLS_CC, getThis(), \"Op|l\", &id, dom_document_class_entry, &source, &source_len, &flags) == FAILURE) {",
          "",
          "[Added Lines]",
          "1933:  if (zend_parse_method_parameters(ZEND_NUM_ARGS() TSRMLS_CC, getThis(), \"Os|l\", &id, dom_document_class_entry, &source, &source_len, &flags) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1944:  switch (type) {",
          "1945:  case DOM_LOAD_FILE:",
          "1946:   valid_file = _dom_get_valid_file_path(source, resolved_path, MAXPATHLEN  TSRMLS_CC);",
          "1947:   if (!valid_file) {",
          "1948:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid Schema file source\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1946:   if (CHECK_NULL_PATH(source, source_len)) {",
          "1947:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid Schema file source\");",
          "1948:    RETURN_FALSE;",
          "1949:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2026:  int                     is_valid;",
          "2027:  char resolved_path[MAXPATHLEN + 1];",
          "2030:   return;",
          "2031:  }",
          "",
          "[Removed Lines]",
          "2029:  if (zend_parse_method_parameters(ZEND_NUM_ARGS() TSRMLS_CC, getThis(), \"Op\", &id, dom_document_class_entry, &source, &source_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "2033:  if (zend_parse_method_parameters(ZEND_NUM_ARGS() TSRMLS_CC, getThis(), \"Os\", &id, dom_document_class_entry, &source, &source_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2040:  switch (type) {",
          "2041:  case DOM_LOAD_FILE:",
          "2042:   valid_file = _dom_get_valid_file_path(source, resolved_path, MAXPATHLEN  TSRMLS_CC);",
          "2043:   if (!valid_file) {",
          "2044:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid RelaxNG file source\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2046:   if (CHECK_NULL_PATH(source, source_len)) {",
          "2047:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid RelaxNG file source\");",
          "2048:    RETURN_FALSE;",
          "2049:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2120:  id = getThis();",
          "2123:   return;",
          "2124:  }",
          "",
          "[Removed Lines]",
          "2122:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p|l\", &source, &source_len, &options) == FAILURE) {",
          "",
          "[Added Lines]",
          "2130:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s|l\", &source, &source_len, &options) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2129:  }",
          "2131:  if (mode == DOM_LOAD_FILE) {",
          "2132:   ctxt = htmlCreateFileParserCtxt(source, NULL);",
          "2133:  } else {",
          "2134:   source_len = xmlStrlen(source);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2140:   if (CHECK_NULL_PATH(source, source_len)) {",
          "2141:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid file source\");",
          "2142:    RETURN_FALSE;",
          "2143:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2217:  char *file;",
          "2218:  const char *encoding;",
          "2221:   return;",
          "2222:  }",
          "",
          "[Removed Lines]",
          "2220:  if (zend_parse_method_parameters(ZEND_NUM_ARGS() TSRMLS_CC, getThis(), \"Os\", &id, dom_document_class_entry, &file, &file_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "2232:  if (zend_parse_method_parameters(ZEND_NUM_ARGS() TSRMLS_CC, getThis(), \"Op\", &id, dom_document_class_entry, &file, &file_len) == FAILURE) {",
          "",
          "---------------"
        ],
        "ext/gd/gd.c||ext/gd/gd.c": [
          "File: ext/gd/gd.c -> ext/gd/gd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1991:  if ( handle == 0 ) {",
          "1992:   goto clean;",
          "1993:  }",
          "1996:  if ( pPrintWindow )  {",
          "1997:   pPrintWindow(window, memDC, (UINT) client_area);",
          "",
          "[Removed Lines]",
          "1994:  pPrintWindow = (tPrintWindow) GetProcAddress(handle, \"PrintWindow\");",
          "",
          "[Added Lines]",
          "1994:  pPrintWindow = (tPrintWindow) GetProcAddress(handle, \"PrintWindow\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3939:  struct stat st;",
          "3940: #endif",
          "3943:   return;",
          "3944:  }",
          "",
          "[Removed Lines]",
          "3942:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &file, &file_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "3942:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p\", &file, &file_len) == FAILURE) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "545b364d560b9550f853bd8dd5ab1641225a03c2",
      "candidate_info": {
        "commit_hash": "545b364d560b9550f853bd8dd5ab1641225a03c2",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/545b364d560b9550f853bd8dd5ab1641225a03c2",
        "files": [
          "ext/dom/document.c",
          "ext/fileinfo/fileinfo.c",
          "ext/hash/hash.c",
          "ext/mysqlnd/mysqlnd.c",
          "ext/openssl/xp_ssl.c",
          "ext/pgsql/pgsql.c",
          "ext/standard/mail.c",
          "ext/standard/pack.c",
          "ext/zip/php_zip.c",
          "ext/zip/zip_stream.c"
        ],
        "message": "remove TSRMLS_*\n\neither remains or merged in from PHP5",
        "before_after_code_files": [
          "ext/dom/document.c||ext/dom/document.c",
          "ext/fileinfo/fileinfo.c||ext/fileinfo/fileinfo.c",
          "ext/hash/hash.c||ext/hash/hash.c",
          "ext/mysqlnd/mysqlnd.c||ext/mysqlnd/mysqlnd.c",
          "ext/openssl/xp_ssl.c||ext/openssl/xp_ssl.c",
          "ext/pgsql/pgsql.c||ext/pgsql/pgsql.c",
          "ext/standard/mail.c||ext/standard/mail.c",
          "ext/standard/pack.c||ext/standard/pack.c",
          "ext/zip/php_zip.c||ext/zip/php_zip.c",
          "ext/zip/zip_stream.c||ext/zip/zip_stream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/dom/document.c||ext/dom/document.c",
            "ext/fileinfo/fileinfo.c||ext/fileinfo/fileinfo.c",
            "ext/hash/hash.c||ext/hash/hash.c",
            "ext/pgsql/pgsql.c||ext/pgsql/pgsql.c"
          ],
          "candidate": [
            "ext/dom/document.c||ext/dom/document.c",
            "ext/fileinfo/fileinfo.c||ext/fileinfo/fileinfo.c",
            "ext/hash/hash.c||ext/hash/hash.c",
            "ext/pgsql/pgsql.c||ext/pgsql/pgsql.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/dom/document.c||ext/dom/document.c": [
          "File: ext/dom/document.c -> ext/dom/document.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1811:    php_error_docref(NULL, E_WARNING, \"Invalid Schema file source\");",
          "1812:    RETURN_FALSE;",
          "1813:   }",
          "1815:   if (!valid_file) {",
          "1816:    php_error_docref(NULL, E_WARNING, \"Invalid Schema file source\");",
          "1817:    RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "1814:   valid_file = _dom_get_valid_file_path(source, resolved_path, MAXPATHLEN  TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1814:   valid_file = _dom_get_valid_file_path(source, resolved_path, MAXPATHLEN );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1911:    php_error_docref(NULL, E_WARNING, \"Invalid RelaxNG file source\");",
          "1912:    RETURN_FALSE;",
          "1913:   }",
          "1915:   if (!valid_file) {",
          "1916:    php_error_docref(NULL, E_WARNING, \"Invalid RelaxNG file source\");",
          "1917:    RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "1914:   valid_file = _dom_get_valid_file_path(source, resolved_path, MAXPATHLEN  TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1914:   valid_file = _dom_get_valid_file_path(source, resolved_path, MAXPATHLEN );",
          "",
          "---------------"
        ],
        "ext/fileinfo/fileinfo.c||ext/fileinfo/fileinfo.c": [
          "File: ext/fileinfo/fileinfo.c -> ext/fileinfo/fileinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "528:     goto clean;",
          "529:    }",
          "530:    if (CHECK_NULL_PATH(buffer, buffer_len)) {",
          "532:     RETVAL_FALSE;",
          "533:     goto clean;",
          "534:    }",
          "",
          "[Removed Lines]",
          "531:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid path\");",
          "",
          "[Added Lines]",
          "531:     php_error_docref(NULL, E_WARNING, \"Invalid path\");",
          "",
          "---------------"
        ],
        "ext/hash/hash.c||ext/hash/hash.c": [
          "File: ext/hash/hash.c -> ext/hash/hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:  }",
          "138:  if (isfilename) {",
          "139:   if (CHECK_NULL_PATH(data, data_len)) {",
          "141:    RETURN_FALSE;",
          "142:   }",
          "143:   stream = php_stream_open_wrapper_ex(data, \"rb\", REPORT_ERRORS, NULL, DEFAULT_CONTEXT);",
          "",
          "[Removed Lines]",
          "140:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid path\");",
          "",
          "[Added Lines]",
          "140:    php_error_docref(NULL, E_WARNING, \"Invalid path\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "256:  }",
          "257:  if (isfilename) {",
          "258:   if (CHECK_NULL_PATH(data, data_len)) {",
          "260:    RETURN_FALSE;",
          "261:   }",
          "262:   stream = php_stream_open_wrapper_ex(data, \"rb\", REPORT_ERRORS, NULL, DEFAULT_CONTEXT);",
          "",
          "[Removed Lines]",
          "259:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid path\");",
          "",
          "[Added Lines]",
          "259:    php_error_docref(NULL, E_WARNING, \"Invalid path\");",
          "",
          "---------------"
        ],
        "ext/mysqlnd/mysqlnd.c||ext/mysqlnd/mysqlnd.c": [
          "File: ext/mysqlnd/mysqlnd.c -> ext/mysqlnd/mysqlnd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "519: close_conn:",
          "520:  CONN_SET_STATE(conn, CONN_QUIT_SENT);",
          "522:  SET_CLIENT_ERROR(*conn->error_info, CR_SERVER_GONE_ERROR, UNKNOWN_SQLSTATE, mysqlnd_server_gone);",
          "523:  PACKET_FREE(auth_packet);",
          "524:  DBG_RETURN(ret);",
          "",
          "[Removed Lines]",
          "521:  conn->m->send_close(conn TSRMLS_CC);",
          "",
          "[Added Lines]",
          "521:  conn->m->send_close(conn);",
          "",
          "---------------"
        ],
        "ext/openssl/xp_ssl.c||ext/openssl/xp_ssl.c": [
          "File: ext/openssl/xp_ssl.c -> ext/openssl/xp_ssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1946:    timeout = &sslsock->s.timeout;",
          "1947:   }",
          "1950:    sslsock->s.is_blocked = 0;",
          "1951:   }",
          "",
          "[Removed Lines]",
          "1949:   if (timeout && php_set_sock_blocking(sslsock->s.socket, 0 TSRMLS_CC) == SUCCESS) {",
          "",
          "[Added Lines]",
          "1949:   if (timeout && php_set_sock_blocking(sslsock->s.socket, 0) == SUCCESS) {",
          "",
          "---------------"
        ],
        "ext/pgsql/pgsql.c||ext/pgsql/pgsql.c": [
          "File: ext/pgsql/pgsql.c -> ext/pgsql/pgsql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5506:  tmp_name = php_strtok_r(src, \".\", &tmp_name2);",
          "5507:  if (!tmp_name) {",
          "5508:   efree(src);",
          "5510:   return FAILURE;",
          "5511:  }",
          "5512:  if (!tmp_name2 || !*tmp_name2) {",
          "",
          "[Removed Lines]",
          "5509:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"The table name must be specified\");",
          "",
          "[Added Lines]",
          "5509:   php_error_docref(NULL, E_WARNING, \"The table name must be specified\");",
          "",
          "---------------"
        ],
        "ext/standard/mail.c||ext/standard/mail.c": [
          "File: ext/standard/mail.c -> ext/standard/mail.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "331:  }",
          "333:  if (hdr && php_mail_detect_multiple_crlf(hdr)) {",
          "335:   MAIL_RET(0);",
          "336:  }",
          "",
          "[Removed Lines]",
          "334:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Multiple or malformed newlines found in additional_header\");",
          "",
          "[Added Lines]",
          "334:   php_error_docref(NULL, E_WARNING, \"Multiple or malformed newlines found in additional_header\");",
          "",
          "---------------"
        ],
        "ext/standard/pack.c||ext/standard/pack.c": [
          "File: ext/standard/pack.c -> ext/standard/pack.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700:   }",
          "702:   if (size != 0 && size != -1 && size < 0) {",
          "704:    zval_dtor(return_value);",
          "705:    RETURN_FALSE;",
          "706:   }",
          "",
          "[Removed Lines]",
          "703:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Type %c: integer overflow\", type);",
          "",
          "[Added Lines]",
          "703:    php_error_docref(NULL, E_WARNING, \"Type %c: integer overflow\", type);",
          "",
          "---------------"
        ],
        "ext/zip/php_zip.c||ext/zip/php_zip.c": [
          "File: ext/zip/php_zip.c -> ext/zip/php_zip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2293:  ZIP_FROM_OBJECT(intern, this);",
          "2296:    &name, &name_len, &comp_method, &comp_flags) == FAILURE) {",
          "2297:   return;",
          "2298:  }",
          "2300:  if (name_len < 1) {",
          "2302:  }",
          "2304:  idx = zip_name_locate(intern, name, 0);",
          "",
          "[Removed Lines]",
          "2295:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"sl|l\",",
          "2301:   php_error_docref(NULL TSRMLS_CC, E_NOTICE, \"Empty string as entry name\");",
          "",
          "[Added Lines]",
          "2295:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"sl|l\",",
          "2301:   php_error_docref(NULL, E_NOTICE, \"Empty string as entry name\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2330:  ZIP_FROM_OBJECT(intern, this);",
          "2333:    &index, &comp_method, &comp_flags) == FAILURE) {",
          "2334:   return;",
          "2335:  }",
          "",
          "[Removed Lines]",
          "2332:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ll|l\",",
          "",
          "[Added Lines]",
          "2332:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"ll|l\",",
          "",
          "---------------"
        ],
        "ext/zip/zip_stream.c||ext/zip/zip_stream.c": [
          "File: ext/zip/zip_stream.c -> ext/zip/zip_stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:    zip_error_t *err;",
          "62:    err = zip_file_get_error(self->zf);",
          "63:    stream->eof = 1;",
          "65:    zip_error_fini(err);",
          "66: #endif",
          "67:    return 0;",
          "",
          "[Removed Lines]",
          "64:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Zip stream error: %s\", zip_error_strerror(err));",
          "",
          "[Added Lines]",
          "64:    php_error_docref(NULL, E_WARNING, \"Zip stream error: %s\", zip_error_strerror(err));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f7d7befae8bcc2db0093f8adaa9f72eeb7ad891e",
      "candidate_info": {
        "commit_hash": "f7d7befae8bcc2db0093f8adaa9f72eeb7ad891e",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/f7d7befae8bcc2db0093f8adaa9f72eeb7ad891e",
        "files": [
          "ext/dom/document.c",
          "ext/gd/gd.c"
        ],
        "message": "Fix #69719 - more checks for nulls in paths",
        "before_after_code_files": [
          "ext/dom/document.c||ext/dom/document.c",
          "ext/gd/gd.c||ext/gd/gd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/dom/document.c||ext/dom/document.c",
            "ext/gd/gd.c||ext/gd/gd.c"
          ],
          "candidate": [
            "ext/dom/document.c||ext/dom/document.c",
            "ext/gd/gd.c||ext/gd/gd.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/dom/document.c||ext/dom/document.c": [
          "File: ext/dom/document.c -> ext/dom/document.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1761:  char *file;",
          "1762:  long options = 0;",
          "1765:   return;",
          "1766:  }",
          "",
          "[Removed Lines]",
          "1764:  if (zend_parse_method_parameters(ZEND_NUM_ARGS() TSRMLS_CC, getThis(), \"Os|l\", &id, dom_document_class_entry, &file, &file_len, &options) == FAILURE) {",
          "",
          "[Added Lines]",
          "1764:  if (zend_parse_method_parameters(ZEND_NUM_ARGS() TSRMLS_CC, getThis(), \"Op|l\", &id, dom_document_class_entry, &file, &file_len, &options) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1990:  int                     is_valid;",
          "1991:  char resolved_path[MAXPATHLEN + 1];",
          "1994:   return;",
          "1995:  }",
          "",
          "[Removed Lines]",
          "1993:  if (zend_parse_method_parameters(ZEND_NUM_ARGS() TSRMLS_CC, getThis(), \"Op\", &id, dom_document_class_entry, &source, &source_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "1993:  if (zend_parse_method_parameters(ZEND_NUM_ARGS() TSRMLS_CC, getThis(), \"Os\", &id, dom_document_class_entry, &source, &source_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2004:  switch (type) {",
          "2005:  case DOM_LOAD_FILE:",
          "2006:   valid_file = _dom_get_valid_file_path(source, resolved_path, MAXPATHLEN  TSRMLS_CC);",
          "2007:   if (!valid_file) {",
          "2008:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid Schema file source\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2006:   if (CHECK_NULL_PATH(source, source_len)) {",
          "2007:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid Schema file source\");",
          "2008:    RETURN_FALSE;",
          "2009:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2079:  int                     is_valid;",
          "2080:  char resolved_path[MAXPATHLEN + 1];",
          "2083:   return;",
          "2084:  }",
          "",
          "[Removed Lines]",
          "2082:  if (zend_parse_method_parameters(ZEND_NUM_ARGS() TSRMLS_CC, getThis(), \"Op\", &id, dom_document_class_entry, &source, &source_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "2086:  if (zend_parse_method_parameters(ZEND_NUM_ARGS() TSRMLS_CC, getThis(), \"Os\", &id, dom_document_class_entry, &source, &source_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2093:  switch (type) {",
          "2094:  case DOM_LOAD_FILE:",
          "2095:   valid_file = _dom_get_valid_file_path(source, resolved_path, MAXPATHLEN  TSRMLS_CC);",
          "2096:   if (!valid_file) {",
          "2097:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid RelaxNG file source\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2099:   if (CHECK_NULL_PATH(source, source_len)) {",
          "2100:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid RelaxNG file source\");",
          "2101:    RETURN_FALSE;",
          "2102:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2173:  id = getThis();",
          "2176:   return;",
          "2177:  }",
          "",
          "[Removed Lines]",
          "2175:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p|l\", &source, &source_len, &options) == FAILURE) {",
          "",
          "[Added Lines]",
          "2183:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s|l\", &source, &source_len, &options) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2182:  }",
          "2184:  if (mode == DOM_LOAD_FILE) {",
          "2185:   ctxt = htmlCreateFileParserCtxt(source, NULL);",
          "2186:  } else {",
          "2187:   source_len = xmlStrlen(source);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2193:   if (CHECK_NULL_PATH(source, source_len)) {",
          "2194:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid file source\");",
          "2195:    RETURN_FALSE;",
          "2196:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2270:  char *file;",
          "2271:  const char *encoding;",
          "2274:   return;",
          "2275:  }",
          "",
          "[Removed Lines]",
          "2273:  if (zend_parse_method_parameters(ZEND_NUM_ARGS() TSRMLS_CC, getThis(), \"Os\", &id, dom_document_class_entry, &file, &file_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "2285:  if (zend_parse_method_parameters(ZEND_NUM_ARGS() TSRMLS_CC, getThis(), \"Op\", &id, dom_document_class_entry, &file, &file_len) == FAILURE) {",
          "",
          "---------------"
        ],
        "ext/gd/gd.c||ext/gd/gd.c": [
          "File: ext/gd/gd.c -> ext/gd/gd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2033:  if ( handle == 0 ) {",
          "2034:   goto clean;",
          "2035:  }",
          "2038:  if ( pPrintWindow )  {",
          "2039:   pPrintWindow(window, memDC, (UINT) client_area);",
          "",
          "[Removed Lines]",
          "2036:  pPrintWindow = (tPrintWindow) GetProcAddress(handle, \"PrintWindow\");",
          "",
          "[Added Lines]",
          "2036:  pPrintWindow = (tPrintWindow) GetProcAddress(handle, \"PrintWindow\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4071:  struct stat st;",
          "4072: #endif",
          "4075:   return;",
          "4076:  }",
          "",
          "[Removed Lines]",
          "4074:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &file, &file_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "4074:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p\", &file, &file_len) == FAILURE) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}