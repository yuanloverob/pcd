{
  "cve_id": "CVE-2011-1019",
  "cve_desc": "The dev_load function in net/core/dev.c in the Linux kernel before 2.6.38 allows local users to bypass an intended CAP_SYS_MODULE capability requirement and load arbitrary modules by leveraging the CAP_NET_ADMIN capability.",
  "repo": "torvalds/linux",
  "patch_hash": "8909c9ad8ff03611c9c96c9a92656213e4bb495b",
  "patch_info": {
    "commit_hash": "8909c9ad8ff03611c9c96c9a92656213e4bb495b",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/8909c9ad8ff03611c9c96c9a92656213e4bb495b",
    "files": [
      "include/linux/netdevice.h",
      "net/core/dev.c",
      "net/ipv4/ip_gre.c",
      "net/ipv4/ipip.c",
      "net/ipv6/sit.c"
    ],
    "message": "net: don't allow CAP_NET_ADMIN to load non-netdev kernel modules\n\nSince a8f80e8ff94ecba629542d9b4b5f5a8ee3eb565c any process with\nCAP_NET_ADMIN may load any module from /lib/modules/.  This doesn't mean\nthat CAP_NET_ADMIN is a superset of CAP_SYS_MODULE as modules are\nlimited to /lib/modules/**.  However, CAP_NET_ADMIN capability shouldn't\nallow anybody load any module not related to networking.\n\nThis patch restricts an ability of autoloading modules to netdev modules\nwith explicit aliases.  This fixes CVE-2011-1019.\n\nArnd Bergmann suggested to leave untouched the old pre-v2.6.32 behavior\nof loading netdev modules by name (without any prefix) for processes\nwith CAP_SYS_MODULE to maintain the compatibility with network scripts\nthat use autoloading netdev modules by aliases like \"eth0\", \"wlan0\".\n\nCurrently there are only three users of the feature in the upstream\nkernel: ipip, ip_gre and sit.\n\n    root@albatros:~# capsh --drop=$(seq -s, 0 11),$(seq -s, 13 34) --\n    root@albatros:~# grep Cap /proc/$$/status\n    CapInh:\t0000000000000000\n    CapPrm:\tfffffff800001000\n    CapEff:\tfffffff800001000\n    CapBnd:\tfffffff800001000\n    root@albatros:~# modprobe xfs\n    FATAL: Error inserting xfs\n    (/lib/modules/2.6.38-rc6-00001-g2bf4ca3/kernel/fs/xfs/xfs.ko): Operation not permitted\n    root@albatros:~# lsmod | grep xfs\n    root@albatros:~# ifconfig xfs\n    xfs: error fetching interface information: Device not found\n    root@albatros:~# lsmod | grep xfs\n    root@albatros:~# lsmod | grep sit\n    root@albatros:~# ifconfig sit\n    sit: error fetching interface information: Device not found\n    root@albatros:~# lsmod | grep sit\n    root@albatros:~# ifconfig sit0\n    sit0      Link encap:IPv6-in-IPv4\n\t      NOARP  MTU:1480  Metric:1\n\n    root@albatros:~# lsmod | grep sit\n    sit                    10457  0\n    tunnel4                 2957  1 sit\n\nFor CAP_SYS_MODULE module loading is still relaxed:\n\n    root@albatros:~# grep Cap /proc/$$/status\n    CapInh:\t0000000000000000\n    CapPrm:\tffffffffffffffff\n    CapEff:\tffffffffffffffff\n    CapBnd:\tffffffffffffffff\n    root@albatros:~# ifconfig xfs\n    xfs: error fetching interface information: Device not found\n    root@albatros:~# lsmod | grep xfs\n    xfs                   745319  0\n\nReference: https://lkml.org/lkml/2011/2/24/203\n\nSigned-off-by: Vasiliy Kulikov <segoon@openwall.com>\nSigned-off-by: Michael Tokarev <mjt@tls.msk.ru>\nAcked-by: David S. Miller <davem@davemloft.net>\nAcked-by: Kees Cook <kees.cook@canonical.com>\nSigned-off-by: James Morris <jmorris@namei.org>",
    "before_after_code_files": [
      "include/linux/netdevice.h||include/linux/netdevice.h",
      "net/core/dev.c||net/core/dev.c",
      "net/ipv4/ip_gre.c||net/ipv4/ip_gre.c",
      "net/ipv4/ipip.c||net/ipv4/ipip.c",
      "net/ipv6/sit.c||net/ipv6/sit.c"
    ]
  },
  "patch_diff": {
    "include/linux/netdevice.h||include/linux/netdevice.h": [
      "File: include/linux/netdevice.h -> include/linux/netdevice.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "2392: extern int netdev_info(const struct net_device *dev, const char *format, ...)",
      "2393:  __attribute__ ((format (printf, 2, 3)));",
      "2395: #if defined(DEBUG)",
      "2396: #define netdev_dbg(__dev, format, args...)   \\",
      "2397:  netdev_printk(KERN_DEBUG, __dev, format, ##args)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2395: #define MODULE_ALIAS_NETDEV(device) \\",
      "2396:  MODULE_ALIAS(\"netdev-\" device)",
      "",
      "---------------"
    ],
    "net/core/dev.c||net/core/dev.c": [
      "File: net/core/dev.c -> net/core/dev.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1114: void dev_load(struct net *net, const char *name)",
      "1115: {",
      "1116:  struct net_device *dev;",
      "1118:  rcu_read_lock();",
      "1119:  dev = dev_get_by_name_rcu(net, name);",
      "1120:  rcu_read_unlock();",
      "1124: }",
      "1125: EXPORT_SYMBOL(dev_load);",
      "",
      "[Removed Lines]",
      "1122:  if (!dev && capable(CAP_NET_ADMIN))",
      "1123:   request_module(\"%s\", name);",
      "",
      "[Added Lines]",
      "1117:  int no_module;",
      "1123:  no_module = !dev;",
      "1124:  if (no_module && capable(CAP_NET_ADMIN))",
      "1125:   no_module = request_module(\"netdev-%s\", name);",
      "1126:  if (no_module && capable(CAP_SYS_MODULE)) {",
      "1127:   if (!request_module(\"%s\", name))",
      "1128:    pr_err(\"Loading kernel module for a network device \"",
      "1129: \"with CAP_SYS_MODULE (deprecated).  Use CAP_NET_ADMIN and alias netdev-%s \"",
      "1130: \"instead\\n\", name);",
      "1131:  }",
      "",
      "---------------"
    ],
    "net/ipv4/ip_gre.c||net/ipv4/ip_gre.c": [
      "File: net/ipv4/ip_gre.c -> net/ipv4/ip_gre.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1765: MODULE_LICENSE(\"GPL\");",
      "1766: MODULE_ALIAS_RTNL_LINK(\"gre\");",
      "1767: MODULE_ALIAS_RTNL_LINK(\"gretap\");",
      "",
      "[Removed Lines]",
      "1768: MODULE_ALIAS(\"gre0\");",
      "",
      "[Added Lines]",
      "1768: MODULE_ALIAS_NETDEV(\"gre0\");",
      "",
      "---------------"
    ],
    "net/ipv4/ipip.c||net/ipv4/ipip.c": [
      "File: net/ipv4/ipip.c -> net/ipv4/ipip.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "913: module_init(ipip_init);",
      "914: module_exit(ipip_fini);",
      "915: MODULE_LICENSE(\"GPL\");",
      "",
      "[Removed Lines]",
      "916: MODULE_ALIAS(\"tunl0\");",
      "",
      "[Added Lines]",
      "916: MODULE_ALIAS_NETDEV(\"tunl0\");",
      "",
      "---------------"
    ],
    "net/ipv6/sit.c||net/ipv6/sit.c": [
      "File: net/ipv6/sit.c -> net/ipv6/sit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1290: module_init(sit_init);",
      "1291: module_exit(sit_cleanup);",
      "1292: MODULE_LICENSE(\"GPL\");",
      "",
      "[Removed Lines]",
      "1293: MODULE_ALIAS(\"sit0\");",
      "",
      "[Added Lines]",
      "1293: MODULE_ALIAS_NETDEV(\"sit0\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4da6a738ffdb99b88efbe5b4c4fe521ca453640d",
      "candidate_info": {
        "commit_hash": "4da6a738ffdb99b88efbe5b4c4fe521ca453640d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/4da6a738ffdb99b88efbe5b4c4fe521ca453640d",
        "files": [
          "net/ipv4/ip_gre.c"
        ],
        "message": "gre: add module alias for gre0 tunnel device\n\nIf gre is built as a module the 'ip tunnel add' command would fail because\nthe ip_gre module was not being autoloaded.  Adding an alias for\nthe gre0 device name cause dev_load() to autoload it when needed.\n\nSigned-off-by: Stephen Hemminger <shemminger@vyatta.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv4/ip_gre.c||net/ipv4/ip_gre.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv4/ip_gre.c||net/ipv4/ip_gre.c"
          ],
          "candidate": [
            "net/ipv4/ip_gre.c||net/ipv4/ip_gre.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ipv4/ip_gre.c||net/ipv4/ip_gre.c": [
          "File: net/ipv4/ip_gre.c -> net/ipv4/ip_gre.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1764: MODULE_LICENSE(\"GPL\");",
          "1765: MODULE_ALIAS_RTNL_LINK(\"gre\");",
          "1766: MODULE_ALIAS_RTNL_LINK(\"gretap\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1767: MODULE_ALIAS(\"gre0\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b6cd1ce72176e21be15a0ac153bdaa5be1b208a",
      "candidate_info": {
        "commit_hash": "7b6cd1ce72176e21be15a0ac153bdaa5be1b208a",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/7b6cd1ce72176e21be15a0ac153bdaa5be1b208a",
        "files": [
          "net/core/dev.c"
        ],
        "message": "PATCH V2 net-next] net: dev: Convert printks to pr_<level>\n\nUse the current logging style.\nCoalesce formats where appropriate.\nUpdate grammar where appropriate.\n\nSigned-off-by: Joe Perches <joe@perches.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/core/dev.c||net/core/dev.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/core/dev.c||net/core/dev.c"
          ],
          "candidate": [
            "net/core/dev.c||net/core/dev.c"
          ]
        }
      },
      "candidate_diff": {
        "net/core/dev.c||net/core/dev.c": [
          "File: net/core/dev.c -> net/core/dev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "446:   }",
          "447:  }",
          "450: out:",
          "451:  spin_unlock(&ptype_lock);",
          "452: }",
          "",
          "[Removed Lines]",
          "449:  printk(KERN_WARNING \"dev_remove_pack: %p not found.\\n\", pt);",
          "",
          "[Added Lines]",
          "449:  pr_warn(\"dev_remove_pack: %p not found\\n\", pt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1039:    memcpy(dev->name, oldname, IFNAMSIZ);",
          "1040:    goto rollback;",
          "1041:   } else {",
          "1044:           dev->name, ret);",
          "1045:   }",
          "1046:  }",
          "",
          "[Removed Lines]",
          "1042:    printk(KERN_ERR",
          "1043:           \"%s: name change rollback failed: %d.\\n\",",
          "",
          "[Added Lines]",
          "1042:    pr_err(\"%s: name change rollback failed: %d\\n\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1139:   no_module = request_module(\"netdev-%s\", name);",
          "1140:  if (no_module && capable(CAP_SYS_MODULE)) {",
          "1141:   if (!request_module(\"%s\", name))",
          "1145:  }",
          "1146: }",
          "1147: EXPORT_SYMBOL(dev_load);",
          "",
          "[Removed Lines]",
          "1142:    pr_err(\"Loading kernel module for a network device \"",
          "1143: \"with CAP_SYS_MODULE (deprecated).  Use CAP_NET_ADMIN and alias netdev-%s \"",
          "1144: \"instead\\n\", name);",
          "",
          "[Added Lines]",
          "1141:    pr_err(\"Loading kernel module for a network device with CAP_SYS_MODULE (deprecated).  Use CAP_NET_ADMIN and alias netdev-%s instead.\\n\",",
          "1142:           name);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1655:    if (skb_network_header(skb2) < skb2->data ||",
          "1656:        skb2->network_header > skb2->tail) {",
          "1657:     if (net_ratelimit())",
          "1662:     skb_reset_network_header(skb2);",
          "1663:    }",
          "",
          "[Removed Lines]",
          "1658:      printk(KERN_CRIT \"protocol %04x is \"",
          "1659:             \"buggy, dev %s\\n\",",
          "1660:             ntohs(skb2->protocol),",
          "1661:             dev->name);",
          "",
          "[Added Lines]",
          "1656:      pr_crit(\"protocol %04x is buggy, dev %s\\n\",",
          "1657:       ntohs(skb2->protocol),",
          "1658:       dev->name);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1693:  if (tc->offset + tc->count > txq) {",
          "1697:   dev->num_tc = 0;",
          "1698:   return;",
          "1699:  }",
          "",
          "[Removed Lines]",
          "1694:   pr_warning(\"Number of in use tx queues changed \"",
          "1695:       \"invalidating tc mappings. Priority \"",
          "1696:       \"traffic classification disabled!\\n\");",
          "",
          "[Added Lines]",
          "1691:   pr_warn(\"Number of in use tx queues changed invalidating tc mappings. Priority traffic classification disabled!\\n\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1705:   tc = &dev->tc_to_txq[q];",
          "1706:   if (tc->offset + tc->count > txq) {",
          "1712:    netdev_set_prio_tc_map(dev, i, 0);",
          "1713:   }",
          "1714:  }",
          "",
          "[Removed Lines]",
          "1707:    pr_warning(\"Number of in use tx queues \"",
          "1708:        \"changed. Priority %i to tc \"",
          "1709:        \"mapping %i is no longer valid \"",
          "1710:        \"setting map to 0\\n\",",
          "1711:        i, q);",
          "",
          "[Added Lines]",
          "1702:    pr_warn(\"Number of in use tx queues changed. Priority %i to tc mapping %i is no longer valid. Setting map to 0\\n\",",
          "1703:     i, q);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2014: void netdev_rx_csum_fault(struct net_device *dev)",
          "2015: {",
          "2016:  if (net_ratelimit()) {",
          "2019:   dump_stack();",
          "2020:  }",
          "2021: }",
          "",
          "[Removed Lines]",
          "2017:   printk(KERN_ERR \"%s: hw csum failure.\\n\",",
          "2018:    dev ? dev->name : \"<unknown>\");",
          "",
          "[Added Lines]",
          "2009:   pr_err(\"%s: hw csum failure\\n\", dev ? dev->name : \"<unknown>\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2332: {",
          "2333:  if (unlikely(queue_index >= dev->real_num_tx_queues)) {",
          "2334:   if (net_ratelimit()) {",
          "2338:   }",
          "2339:   return 0;",
          "2340:  }",
          "",
          "[Removed Lines]",
          "2335:    pr_warning(\"%s selects TX queue %d, but \"",
          "2336:     \"real number of TX queues is %d\\n\",",
          "2337:     dev->name, queue_index, dev->real_num_tx_queues);",
          "",
          "[Added Lines]",
          "2326:    pr_warn(\"%s selects TX queue %d, but real number of TX queues is %d\\n\",",
          "2327:     dev->name, queue_index,",
          "2328:     dev->real_num_tx_queues);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2578:    }",
          "2579:    HARD_TX_UNLOCK(dev, txq);",
          "2580:    if (net_ratelimit())",
          "2583:   } else {",
          "2587: recursion_alert:",
          "2588:    if (net_ratelimit())",
          "2591:   }",
          "2592:  }",
          "",
          "[Removed Lines]",
          "2581:     printk(KERN_CRIT \"Virtual device %s asks to \"",
          "2582:            \"queue packet!\\n\", dev->name);",
          "2589:     printk(KERN_CRIT \"Dead loop on virtual device \"",
          "2590:            \"%s, fix it urgently!\\n\", dev->name);",
          "",
          "[Added Lines]",
          "2572:     pr_crit(\"Virtual device %s asks to queue packet!\\n\",",
          "2573:      dev->name);",
          "2580:     pr_crit(\"Dead loop on virtual device %s, fix it urgently!\\n\",",
          "2581:      dev->name);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3070:  if (unlikely(MAX_RED_LOOP < ttl++)) {",
          "3071:   if (net_ratelimit())",
          "3074:   return TC_ACT_SHOT;",
          "3075:  }",
          "",
          "[Removed Lines]",
          "3072:    pr_warning( \"Redir loop detected Dropping packet (%d->%d)\\n\",",
          "3073:           skb->skb_iif, dev->ifindex);",
          "",
          "[Added Lines]",
          "3063:    pr_warn(\"Redir loop detected Dropping packet (%d->%d)\\n\",",
          "3064:     skb->skb_iif, dev->ifindex);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4491:    dev->flags &= ~IFF_PROMISC;",
          "4492:   else {",
          "4493:    dev->promiscuity -= inc;",
          "4497:    return -EOVERFLOW;",
          "4498:   }",
          "4499:  }",
          "4500:  if (dev->flags != old_flags) {",
          "4504:   if (audit_enabled) {",
          "4505:    current_uid_gid(&uid, &gid);",
          "4506:    audit_log(current->audit_context, GFP_ATOMIC,",
          "",
          "[Removed Lines]",
          "4494:    printk(KERN_WARNING \"%s: promiscuity touches roof, \"",
          "4495:     \"set promiscuity failed, promiscuity feature \"",
          "4496:     \"of device might be broken.\\n\", dev->name);",
          "4501:   printk(KERN_INFO \"device %s %s promiscuous mode\\n\",",
          "4502:          dev->name, (dev->flags & IFF_PROMISC) ? \"entered\" :",
          "4503:               \"left\");",
          "",
          "[Added Lines]",
          "4485:    pr_warn(\"%s: promiscuity touches roof, set promiscuity failed. promiscuity feature of device might be broken.\\n\",",
          "4486:     dev->name);",
          "4491:   pr_info(\"device %s %s promiscuous mode\\n\",",
          "4492:    dev->name,",
          "4493:    dev->flags & IFF_PROMISC ? \"entered\" : \"left\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4573:    dev->flags &= ~IFF_ALLMULTI;",
          "4574:   else {",
          "4575:    dev->allmulti -= inc;",
          "4579:    return -EOVERFLOW;",
          "4580:   }",
          "4581:  }",
          "",
          "[Removed Lines]",
          "4576:    printk(KERN_WARNING \"%s: allmulti touches roof, \"",
          "4577:     \"set allmulti failed, allmulti feature of \"",
          "4578:     \"device might be broken.\\n\", dev->name);",
          "",
          "[Added Lines]",
          "4566:    pr_warn(\"%s: allmulti touches roof, set allmulti failed. allmulti feature of device might be broken.\\n\",",
          "4567:     dev->name);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5234:   if (dev->reg_state == NETREG_UNINITIALIZED) {",
          "5238:    WARN_ON(1);",
          "5239:    list_del(&dev->unreg_list);",
          "",
          "[Removed Lines]",
          "5235:    pr_debug(\"unregister_netdevice: device %s/%p never \"",
          "5236:      \"was registered\\n\", dev->name, dev);",
          "",
          "[Added Lines]",
          "5224:    pr_debug(\"unregister_netdevice: device %s/%p never was registered\\n\",",
          "5225:      dev->name, dev);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5466:  rx = kcalloc(count, sizeof(struct netdev_rx_queue), GFP_KERNEL);",
          "5467:  if (!rx) {",
          "5469:   return -ENOMEM;",
          "5470:  }",
          "5471:  dev->_rx = rx;",
          "",
          "[Removed Lines]",
          "5468:   pr_err(\"netdev: Unable to allocate %u rx queues.\\n\", count);",
          "",
          "[Added Lines]",
          "5457:   pr_err(\"netdev: Unable to allocate %u rx queues\\n\", count);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5500:  tx = kcalloc(count, sizeof(struct netdev_queue), GFP_KERNEL);",
          "5501:  if (!tx) {",
          "5504:   return -ENOMEM;",
          "5505:  }",
          "5506:  dev->_tx = tx;",
          "",
          "[Removed Lines]",
          "5502:   pr_err(\"netdev: Unable to allocate %u tx queues.\\n\",",
          "5503:          count);",
          "",
          "[Added Lines]",
          "5491:   pr_err(\"netdev: Unable to allocate %u tx queues\\n\", count);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5759:   refcnt = netdev_refcnt_read(dev);",
          "5761:   if (time_after(jiffies, warning_time + 10 * HZ)) {",
          "5766:    warning_time = jiffies;",
          "5767:   }",
          "5768:  }",
          "",
          "[Removed Lines]",
          "5762:    printk(KERN_EMERG \"unregister_netdevice: \"",
          "5763:           \"waiting for %s to become free. Usage \"",
          "5764:           \"count = %d\\n\",",
          "5765:           dev->name, refcnt);",
          "",
          "[Added Lines]",
          "5750:    pr_emerg(\"unregister_netdevice: waiting for %s to become free. Usage count = %d\\n\",",
          "5751:      dev->name, refcnt);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5813:   list_del(&dev->todo_list);",
          "5815:   if (unlikely(dev->reg_state != NETREG_UNREGISTERING)) {",
          "5817:           dev->name, dev->reg_state);",
          "5818:    dump_stack();",
          "5819:    continue;",
          "",
          "[Removed Lines]",
          "5816:    printk(KERN_ERR \"network todo '%s' but state %d\\n\",",
          "",
          "[Added Lines]",
          "5802:    pr_err(\"network todo '%s' but state %d\\n\",",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5929:  BUG_ON(strlen(name) >= sizeof(dev->name));",
          "5931:  if (txqs < 1) {",
          "5934:   return NULL;",
          "5935:  }",
          "5937: #ifdef CONFIG_RPS",
          "5938:  if (rxqs < 1) {",
          "5941:   return NULL;",
          "5942:  }",
          "5943: #endif",
          "",
          "[Removed Lines]",
          "5932:   pr_err(\"alloc_netdev: Unable to allocate device \"",
          "5933:          \"with zero queues.\\n\");",
          "5939:   pr_err(\"alloc_netdev: Unable to allocate device \"",
          "5940:          \"with zero RX queues.\\n\");",
          "",
          "[Added Lines]",
          "5918:   pr_err(\"alloc_netdev: Unable to allocate device with zero queues\\n\");",
          "5924:   pr_err(\"alloc_netdev: Unable to allocate device with zero RX queues\\n\");",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "5954:  p = kzalloc(alloc_size, GFP_KERNEL);",
          "5955:  if (!p) {",
          "5957:   return NULL;",
          "5958:  }",
          "",
          "[Removed Lines]",
          "5956:   printk(KERN_ERR \"alloc_netdev: Unable to allocate device.\\n\");",
          "",
          "[Added Lines]",
          "5940:   pr_err(\"alloc_netdev: Unable to allocate device\\n\");",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "6486:   snprintf(fb_name, IFNAMSIZ, \"dev%d\", dev->ifindex);",
          "6487:   err = dev_change_net_namespace(dev, &init_net, fb_name);",
          "6488:   if (err) {",
          "6491:    BUG();",
          "6492:   }",
          "6493:  }",
          "",
          "[Removed Lines]",
          "6489:    printk(KERN_EMERG \"%s: failed to move %s to init_net: %d\\n\",",
          "6490:     __func__, dev->name, err);",
          "",
          "[Added Lines]",
          "6473:    pr_emerg(\"%s: failed to move %s to init_net: %d\\n\",",
          "6474:      __func__, dev->name, err);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8afe7c8acd33bc52c56546e73e46e9d546269e2c",
      "candidate_info": {
        "commit_hash": "8afe7c8acd33bc52c56546e73e46e9d546269e2c",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/8afe7c8acd33bc52c56546e73e46e9d546269e2c",
        "files": [
          "net/ipv4/ipip.c"
        ],
        "message": "ipip: add module alias for tunl0 tunnel device\n\nIf ipip is built as a module the 'ip tunnel add' command would fail because\nthe ipip module was not being autoloaded.  Adding an alias for\nthe tunl0 device name cause dev_load() to autoload it when needed.\n\nSigned-off-by: Stephen Hemminger <shemminger@vyatta.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv4/ipip.c||net/ipv4/ipip.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv4/ipip.c||net/ipv4/ipip.c"
          ],
          "candidate": [
            "net/ipv4/ipip.c||net/ipv4/ipip.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ipv4/ipip.c||net/ipv4/ipip.c": [
          "File: net/ipv4/ipip.c -> net/ipv4/ipip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "913: module_init(ipip_init);",
          "914: module_exit(ipip_fini);",
          "915: MODULE_LICENSE(\"GPL\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "916: MODULE_ALIAS(\"tunl0\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}