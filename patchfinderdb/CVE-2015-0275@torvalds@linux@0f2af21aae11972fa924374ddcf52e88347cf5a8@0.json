{
  "cve_id": "CVE-2015-0275",
  "cve_desc": "The ext4_zero_range function in fs/ext4/extents.c in the Linux kernel before 4.1 allows local users to cause a denial of service (BUG) via a crafted fallocate zero-range request.",
  "repo": "torvalds/linux",
  "patch_hash": "0f2af21aae11972fa924374ddcf52e88347cf5a8",
  "patch_info": {
    "commit_hash": "0f2af21aae11972fa924374ddcf52e88347cf5a8",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/0f2af21aae11972fa924374ddcf52e88347cf5a8",
    "files": [
      "fs/ext4/extents.c"
    ],
    "message": "ext4: allocate entire range in zero range\n\nCurrently there is a bug in zero range code which causes zero range\ncalls to only allocate block aligned portion of the range, while\nignoring the rest in some cases.\n\nIn some cases, namely if the end of the range is past i_size, we do\nattempt to preallocate the last nonaligned block. However this might\ncause kernel to BUG() in some carefully designed zero range requests\non setups where page size > block size.\n\nFix this problem by first preallocating the entire range, including\nthe nonaligned edges and converting the written extents to unwritten\nin the next step. This approach will also give us the advantage of\nhaving the range to be as linearly contiguous as possible.\n\nSigned-off-by: Lukas Czerner <lczerner@redhat.com>\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>",
    "before_after_code_files": [
      "fs/ext4/extents.c||fs/ext4/extents.c"
    ]
  },
  "patch_diff": {
    "fs/ext4/extents.c||fs/ext4/extents.c": [
      "File: fs/ext4/extents.c -> fs/ext4/extents.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4797:  else",
      "4798:   max_blocks -= lblk;",
      "4806:  mutex_lock(&inode->i_mutex);",
      "",
      "[Removed Lines]",
      "4800:  flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT |",
      "4801:   EXT4_GET_BLOCKS_CONVERT_UNWRITTEN |",
      "4802:   EXT4_EX_NOCACHE;",
      "4803:  if (mode & FALLOC_FL_KEEP_SIZE)",
      "4804:   flags |= EXT4_GET_BLOCKS_KEEP_SIZE;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4819:   ret = inode_newsize_ok(inode, new_size);",
      "4820:   if (ret)",
      "4821:    goto out_mutex;",
      "4828:  }",
      "4830:  if (max_blocks > 0) {",
      "4833:   truncate_pagecache_range(inode, start, end - 1);",
      "",
      "[Removed Lines]",
      "4826:   if (partial_end)",
      "4827:    max_blocks += 1;",
      "",
      "[Added Lines]",
      "4818:  flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT;",
      "4819:  if (mode & FALLOC_FL_KEEP_SIZE)",
      "4820:   flags |= EXT4_GET_BLOCKS_KEEP_SIZE;",
      "4823:  if (partial_begin || partial_end) {",
      "4824:   ret = ext4_alloc_file_blocks(file,",
      "4825:     round_down(offset, 1 << blkbits) >> blkbits,",
      "4826:     (round_up((offset + len), 1 << blkbits) -",
      "4827:      round_down(offset, 1 << blkbits)) >> blkbits,",
      "4828:     new_size, flags, mode);",
      "4829:   if (ret)",
      "4830:    goto out_mutex;",
      "4832:  }",
      "4836:   flags |= (EXT4_GET_BLOCKS_CONVERT_UNWRITTEN |",
      "4837:      EXT4_EX_NOCACHE);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "17048e8a083fec7ad841d88ef0812707fbc7e39f",
      "candidate_info": {
        "commit_hash": "17048e8a083fec7ad841d88ef0812707fbc7e39f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/17048e8a083fec7ad841d88ef0812707fbc7e39f",
        "files": [
          "fs/ext4/extents.c"
        ],
        "message": "ext4: move unlocked dio protection from ext4_alloc_file_blocks()\n\nCurrently ext4_alloc_file_blocks() was handling protection against\nunlocked DIO. However we now need to sometimes call it under i_mmap_sem\nand sometimes not and DIO protection ranks above it (although strictly\nspeaking this cannot currently create any deadlocks). Also\next4_zero_range() was actually getting & releasing unlocked DIO\nprotection twice in some cases. Luckily it didn't introduce any real bug\nbut it was a land mine waiting to be stepped on.  So move DIO protection\nout from ext4_alloc_file_blocks() into the two callsites.\n\nSigned-off-by: Jan Kara <jack@suse.com>\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>",
        "before_after_code_files": [
          "fs/ext4/extents.c||fs/ext4/extents.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/extents.c||fs/ext4/extents.c"
          ],
          "candidate": [
            "fs/ext4/extents.c||fs/ext4/extents.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/extents.c||fs/ext4/extents.c": [
          "File: fs/ext4/extents.c -> fs/ext4/extents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4685:  if (len <= EXT_UNWRITTEN_MAX_LEN)",
          "4686:   flags |= EXT4_GET_BLOCKS_NO_NORMALIZE;",
          "",
          "[Removed Lines]",
          "4689:  ext4_inode_block_unlocked_dio(inode);",
          "4690:  inode_dio_wait(inode);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4752:   goto retry;",
          "4753:  }",
          "4757:  return ret > 0 ? ret2 : ret;",
          "4758: }",
          "",
          "[Removed Lines]",
          "4755:  ext4_inode_resume_unlocked_dio(inode);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4827:  if (mode & FALLOC_FL_KEEP_SIZE)",
          "4828:   flags |= EXT4_GET_BLOCKS_KEEP_SIZE;",
          "4831:  if (partial_begin || partial_end) {",
          "4832:   ret = ext4_alloc_file_blocks(file,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4825:  ext4_inode_block_unlocked_dio(inode);",
          "4826:  inode_dio_wait(inode);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4835:      round_down(offset, 1 << blkbits)) >> blkbits,",
          "4836:     new_size, flags, mode);",
          "4837:   if (ret)",
          "4840:  }",
          "",
          "[Removed Lines]",
          "4838:    goto out_mutex;",
          "",
          "[Added Lines]",
          "4836:    goto out_dio;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4844:   flags |= (EXT4_GET_BLOCKS_CONVERT_UNWRITTEN |",
          "4845:      EXT4_EX_NOCACHE);",
          "",
          "[Removed Lines]",
          "4848:   ext4_inode_block_unlocked_dio(inode);",
          "4849:   inode_dio_wait(inode);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4992:    goto out;",
          "4993:  }",
          "4995:  ret = ext4_alloc_file_blocks(file, lblk, max_blocks, new_size,",
          "4996:          flags, mode);",
          "4997:  if (ret)",
          "4998:   goto out;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4990:  ext4_inode_block_unlocked_dio(inode);",
          "4991:  inode_dio_wait(inode);",
          "4995:  ext4_inode_resume_unlocked_dio(inode);",
          "",
          "---------------"
        ]
      }
    }
  ]
}