{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "978256f3d8dc66152825fe4d4175994750b0fd68",
      "candidate_info": {
        "commit_hash": "978256f3d8dc66152825fe4d4175994750b0fd68",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/978256f3d8dc66152825fe4d4175994750b0fd68",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Restore the on-line \".help\" for the \".explain\" command in the CLI.\n\nFossilOrigin-Name: 28b8f1036d569bccce56b4e7042348024b5dd1ffa04850cbeddab1e35c49e5b7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f0ebea35d9d6b69a7bb4242fb79ff3db4267e429855fa6969f9f52ffee1c7a99",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3511:   \".excel                   Display the output of next command in spreadsheet\",",
          "3512:   \".exit ?CODE?             Exit this program with return-code CODE\",",
          "3513:   \".expert                  EXPERIMENTAL. Suggest indexes for queries\",",
          "3517:   \".filectrl CMD ...        Run various sqlite3_file_control() operations\",",
          "3518:   \"                           Run \\\".filectrl\\\" with no arguments for details\",",
          "3519:   \".fullschema ?--indent?   Show schema and the content of sqlite_stat tables\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3514:   \".explain ?on|off|auto?   Change the EXPLAIN formatting mode.  Default: auto\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5102cf8df5147aa9f230334d4d0d5b4555957943",
      "candidate_info": {
        "commit_hash": "5102cf8df5147aa9f230334d4d0d5b4555957943",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5102cf8df5147aa9f230334d4d0d5b4555957943",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtree1.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Early detection and reporting of too few columns in an rtree CREATE VIRTUAL TABLE statement.\n\nFossilOrigin-Name: ef73107f475e40e6bdd8b722e96992070f81fd2b7a3cb718ec8f251c89ca3e81",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtree1.test||ext/rtree/rtree1.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3706:   };",
          "3711:     return SQLITE_ERROR;",
          "3712:   }",
          "",
          "[Removed Lines]",
          "3709:   if( argc>RTREE_MAX_AUX_COLUMN+3 ){",
          "",
          "[Added Lines]",
          "3709:   if( argc<6 || argc>RTREE_MAX_AUX_COLUMN+3 ){",
          "",
          "---------------"
        ],
        "ext/rtree/rtree1.test||ext/rtree/rtree1.test": [
          "File: ext/rtree/rtree1.test -> ext/rtree/rtree1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:   catchsql { DROP TABLE t1 }",
          "114: }",
          "116: # Like execsql except display output as integer where that can be",
          "117: # done without loss of information.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: do_catchsql_test rtree-1.3.1000 {",
          "116:   CREATE VIRTUAL TABLE t1000 USING rtree;",
          "117: } {1 {Too few columns for an rtree table}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 97fb5a72f91a44d579466e67c33aa862384c4d1c95c2010cf4ae9dbd172bbcfb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07d7a8dca99e84ce2f4c2d21e5ad55cd5a7bcc6d",
      "candidate_info": {
        "commit_hash": "07d7a8dca99e84ce2f4c2d21e5ad55cd5a7bcc6d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/07d7a8dca99e84ce2f4c2d21e5ad55cd5a7bcc6d",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/with5.test"
        ],
        "message": "New test cases for recursive CTEs with multiple recursive terms.\n\nFossilOrigin-Name: cd5182bd6f5969ba0812275f471224908296960358013327cebbe0c52b820f04",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/with5.test||test/with5.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5481fa8c79c34f434e99ab633ff3d0942a309a74fb0cf38e3d3617b51d5d21dd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/with5.test||test/with5.test": [
          "File: test/with5.test -> test/with5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:   SELECT x FROM closure ORDER BY x;",
          "94: } {1 2 3 4 5 6 7 8 9 11 200 300 400}",
          "96: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96: do_catchsql_test 120 {",
          "97:   WITH RECURSIVE closure(x) AS (",
          "98:      VALUES(1),(200),(300),(400)",
          "99:      UNION ALL",
          "100:      VALUES(2)",
          "101:      UNION ALL",
          "102:      SELECT bb FROM closure, link WHERE link.aa=closure.x",
          "103:      UNION",
          "104:      SELECT aa FROM link, closure WHERE link.bb=closure.x",
          "105:   )",
          "106:   SELECT x FROM closure ORDER BY x;",
          "107: } {1 {circular reference: closure}}",
          "108: do_catchsql_test 121 {",
          "109:   WITH RECURSIVE closure(x) AS (",
          "110:      VALUES(1),(200),(300),(400)",
          "111:      UNION ALL",
          "112:      VALUES(2)",
          "113:      UNION",
          "114:      SELECT bb FROM closure, link WHERE link.aa=closure.x",
          "115:      UNION ALL",
          "116:      SELECT aa FROM link, closure WHERE link.bb=closure.x",
          "117:   )",
          "118:   SELECT x FROM closure ORDER BY x;",
          "119: } {1 {circular reference: closure}}",
          "121: do_execsql_test 130 {",
          "122:   WITH RECURSIVE closure(x) AS (",
          "123:     SELECT 1 AS x",
          "124:     UNION",
          "125:     SELECT aa FROM link JOIN closure ON bb=x",
          "126:     UNION",
          "127:     SELECT bb FROM link JOIN closure on aa=x",
          "128:     ORDER BY x LIMIT 4",
          "129:   )",
          "130:   SELECT * FROM closure;",
          "131: } {1 3 5 7}",
          "132: do_execsql_test 131 {",
          "133:   WITH RECURSIVE closure(x) AS (",
          "134:     SELECT 1 AS x",
          "135:     UNION ALL",
          "136:     SELECT 2",
          "137:     UNION",
          "138:     SELECT aa FROM link JOIN closure ON bb=x",
          "139:     UNION",
          "140:     SELECT bb FROM link JOIN closure on aa=x",
          "141:     ORDER BY x LIMIT 4",
          "142:   )",
          "143:   SELECT * FROM closure;",
          "144: } {1 2 3 4}",
          "146: do_execsql_test 200 {",
          "147:   CREATE TABLE linkA(aa1,aa2);",
          "148:   INSERT INTO linkA(aa1,aa2) VALUES(1,3),(5,7),(9,11);",
          "149:   CREATE TABLE linkB(bb1,bb2);",
          "150:   INSERT INTO linkB(bb1,bb2) VALUES(7,9),(11,13),(3,5);",
          "151:   CREATE TABLE linkC(cc1,cc2);",
          "152:   INSERT INTO linkC(cc1,cc2) VALUES(1,2),(2,4),(6,8);",
          "153:   CREATE TABLE linkD(dd1,dd2);",
          "154:   INSERT INTO linkD(dd1,dd2) VALUES(4,6),(100,110);",
          "155: } {}",
          "156: do_execsql_test 210 {",
          "157:   WITH RECURSIVE closure(x) AS (",
          "158:     VALUES(1)",
          "159:     UNION ALL",
          "160:     SELECT aa2 FROM linkA JOIN closure ON x=aa1",
          "161:     UNION ALL",
          "162:     SELECT bb2 FROM linkB JOIN closure ON x=bb1",
          "163:     UNION ALL",
          "164:     SELECT cc2 FROM linkC JOIN closure ON x=cc1",
          "165:     UNION ALL",
          "166:     SELECT dd2 FROM linkD JOIN closure ON x=dd1",
          "167:   )",
          "168:   SELECT x FROM closure ORDER BY +x;",
          "169: } {1 2 3 4 5 6 7 8 9 11 13}",
          "170: do_execsql_test 220 {",
          "171:   CREATE TABLE linkA_ipk(aa1 INTEGER PRIMARY KEY,aa2);",
          "172:   INSERT INTO linkA_ipk(aa1,aa2) SELECT aa1, aa2 FROM linkA;",
          "173:   CREATE TABLE linkB_ipk(bb1 INTEGER PRIMARY KEY,bb2);",
          "174:   INSERT INTO linkB_ipk(bb1,bb2) SELECT bb1, bb2 FROM linkB;",
          "175:   CREATE TABLE linkC_ipk(cc1 INTEGER PRIMARY KEY,cc2);",
          "176:   INSERT INTO linkC_ipk(cc1,cc2) SELECT cc1, cc2 FROM linkC;",
          "177:   CREATE TABLE linkD_ipk(dd1 INTEGER PRIMARY KEY,dd2);",
          "178:   INSERT INTO linkD_ipk(dd1,dd2) SELECT dd1, dd2 FROM linkD;",
          "179:   WITH RECURSIVE closure(x) AS (",
          "180:     VALUES(1)",
          "181:     UNION ALL",
          "182:     SELECT aa2 FROM linkA_ipk JOIN closure ON x=aa1",
          "183:     UNION ALL",
          "184:     SELECT bb2 FROM linkB_ipk JOIN closure ON x=bb1",
          "185:     UNION ALL",
          "186:     SELECT cc2 FROM linkC_ipk JOIN closure ON x=cc1",
          "187:     UNION ALL",
          "188:     SELECT dd2 FROM linkD_ipk JOIN closure ON x=dd1",
          "189:   )",
          "190:   SELECT x FROM closure ORDER BY +x;",
          "191: } {1 2 3 4 5 6 7 8 9 11 13}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7548ab20e631e4b6585e6016a79cd5abbb938d7e",
      "candidate_info": {
        "commit_hash": "7548ab20e631e4b6585e6016a79cd5abbb938d7e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7548ab20e631e4b6585e6016a79cd5abbb938d7e",
        "files": [
          "ext/fts5/fts5Int.h",
          "ext/fts5/fts5_index.c",
          "ext/fts5/fts5_main.c",
          "ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5integrity.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "In fts5 integrity checks, do not compare the contents of the index against an external content table unless specifically requested.\n\nFossilOrigin-Name: 782163693f37aeb65209bebbaeb6659a36881b8c4b4bec778b366658488bf966",
        "before_after_code_files": [
          "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5integrity.test||ext/fts5/test/fts5integrity.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h": [
          "File: ext/fts5/fts5Int.h -> ext/fts5/fts5Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "487: int sqlite3Fts5IndexIntegrityCheck(Fts5Index*, u64 cksum);",
          "",
          "[Added Lines]",
          "487: int sqlite3Fts5IndexIntegrityCheck(Fts5Index*, u64 cksum, int bUseCksum);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "639: int sqlite3Fts5StorageContentInsert(Fts5Storage *p, sqlite3_value**, i64*);",
          "640: int sqlite3Fts5StorageIndexInsert(Fts5Storage *p, sqlite3_value**, i64);",
          "644: int sqlite3Fts5StorageStmt(Fts5Storage *p, int eStmt, sqlite3_stmt**, char**);",
          "645: void sqlite3Fts5StorageStmtRelease(Fts5Storage *p, int eStmt, sqlite3_stmt*);",
          "",
          "[Removed Lines]",
          "642: int sqlite3Fts5StorageIntegrity(Fts5Storage *p);",
          "",
          "[Added Lines]",
          "642: int sqlite3Fts5StorageIntegrity(Fts5Storage *p, int iArg);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6066:   int eDetail = p->pConfig->eDetail;",
          "",
          "[Removed Lines]",
          "6065: int sqlite3Fts5IndexIntegrityCheck(Fts5Index *p, u64 cksum){",
          "",
          "[Added Lines]",
          "6065: int sqlite3Fts5IndexIntegrityCheck(Fts5Index *p, u64 cksum, int bUseCksum){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6133:   fts5TestTerm(p, &term, 0, 0, cksum2, &cksum3);",
          "6135:   fts5MultiIterFree(pIter);",
          "6138:   fts5StructureRelease(pStruct);",
          "6139: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "6136:   if( p->rc==SQLITE_OK && cksum!=cksum2 ) p->rc = FTS5_CORRUPT;",
          "",
          "[Added Lines]",
          "6136:   if( p->rc==SQLITE_OK && bUseCksum && cksum!=cksum2 ) p->rc = FTS5_CORRUPT;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1508:     int nMerge = sqlite3_value_int(pVal);",
          "1509:     rc = sqlite3Fts5StorageMerge(pTab->pStorage, nMerge);",
          "1510:   }else if( 0==sqlite3_stricmp(\"integrity-check\", zCmd) ){",
          "1512: #ifdef SQLITE_DEBUG",
          "1513:   }else if( 0==sqlite3_stricmp(\"prefix-index\", zCmd) ){",
          "1514:     pConfig->bPrefixIndex = sqlite3_value_int(pVal);",
          "",
          "[Removed Lines]",
          "1511:     rc = sqlite3Fts5StorageIntegrity(pTab->pStorage);",
          "",
          "[Added Lines]",
          "1511:     int iArg = sqlite3_value_int(pVal);",
          "1512:     rc = sqlite3Fts5StorageIntegrity(pTab->pStorage, iArg);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c": [
          "File: ext/fts5/fts5_storage.c -> ext/fts5/fts5_storage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "885:   Fts5Config *pConfig = p->pConfig;",
          "889:   Fts5IntegrityCtx ctx;",
          "890:   sqlite3_stmt *pScan;",
          "892:   memset(&ctx, 0, sizeof(Fts5IntegrityCtx));",
          "893:   ctx.pConfig = p->pConfig;",
          "",
          "[Removed Lines]",
          "884: int sqlite3Fts5StorageIntegrity(Fts5Storage *p){",
          "",
          "[Added Lines]",
          "884: int sqlite3Fts5StorageIntegrity(Fts5Storage *p, int iArg){",
          "891:   int bUseCksum;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "896:   aColSize = (int*)&aTotalSize[pConfig->nCol];",
          "897:   memset(aTotalSize, 0, sizeof(i64) * pConfig->nCol);",
          "917:         ctx.szCol = 0;",
          "920:         }",
          "933:         }",
          "938:         }",
          "939:       }",
          "944:     }",
          "955:     }",
          "969:   }",
          "974:   if( rc==SQLITE_OK ){",
          "976:   }",
          "978:   sqlite3_free(aTotalSize);",
          "",
          "[Removed Lines]",
          "901:   rc = fts5StorageGetStmt(p, FTS5_STMT_SCAN, &pScan, 0);",
          "902:   if( rc==SQLITE_OK ){",
          "903:     int rc2;",
          "904:     while( SQLITE_ROW==sqlite3_step(pScan) ){",
          "905:       int i;",
          "906:       ctx.iRowid = sqlite3_column_int64(pScan, 0);",
          "907:       ctx.szCol = 0;",
          "908:       if( pConfig->bColumnsize ){",
          "909:         rc = sqlite3Fts5StorageDocsize(p, ctx.iRowid, aColSize);",
          "910:       }",
          "911:       if( rc==SQLITE_OK && pConfig->eDetail==FTS5_DETAIL_NONE ){",
          "912:         rc = sqlite3Fts5TermsetNew(&ctx.pTermset);",
          "913:       }",
          "914:       for(i=0; rc==SQLITE_OK && i<pConfig->nCol; i++){",
          "915:         if( pConfig->abUnindexed[i] ) continue;",
          "916:         ctx.iCol = i;",
          "918:         if( pConfig->eDetail==FTS5_DETAIL_COLUMNS ){",
          "919:           rc = sqlite3Fts5TermsetNew(&ctx.pTermset);",
          "921:         if( rc==SQLITE_OK ){",
          "922:           const char *zText = (const char*)sqlite3_column_text(pScan, i+1);",
          "923:           int nText = sqlite3_column_bytes(pScan, i+1);",
          "924:           rc = sqlite3Fts5Tokenize(pConfig,",
          "925:               FTS5_TOKENIZE_DOCUMENT,",
          "926:               zText, nText,",
          "927:               (void*)&ctx,",
          "928:               fts5StorageIntegrityCallback",
          "929:           );",
          "930:         }",
          "931:         if( rc==SQLITE_OK && pConfig->bColumnsize && ctx.szCol!=aColSize[i] ){",
          "932:           rc = FTS5_CORRUPT;",
          "934:         aTotalSize[i] += ctx.szCol;",
          "935:         if( pConfig->eDetail==FTS5_DETAIL_COLUMNS ){",
          "936:           sqlite3Fts5TermsetFree(ctx.pTermset);",
          "937:           ctx.pTermset = 0;",
          "940:       sqlite3Fts5TermsetFree(ctx.pTermset);",
          "941:       ctx.pTermset = 0;",
          "943:       if( rc!=SQLITE_OK ) break;",
          "945:     rc2 = sqlite3_reset(pScan);",
          "946:     if( rc==SQLITE_OK ) rc = rc2;",
          "947:   }",
          "950:   if( rc==SQLITE_OK ){",
          "951:     int i;",
          "952:     rc = fts5StorageLoadTotals(p, 0);",
          "953:     for(i=0; rc==SQLITE_OK && i<pConfig->nCol; i++){",
          "954:       if( p->aTotalSize[i]!=aTotalSize[i] ) rc = FTS5_CORRUPT;",
          "956:   }",
          "960:   if( rc==SQLITE_OK && pConfig->eContent==FTS5_CONTENT_NORMAL ){",
          "961:     i64 nRow = 0;",
          "962:     rc = fts5StorageCount(p, \"content\", &nRow);",
          "963:     if( rc==SQLITE_OK && nRow!=p->nTotalRow ) rc = FTS5_CORRUPT;",
          "964:   }",
          "965:   if( rc==SQLITE_OK && pConfig->bColumnsize ){",
          "966:     i64 nRow = 0;",
          "967:     rc = fts5StorageCount(p, \"docsize\", &nRow);",
          "968:     if( rc==SQLITE_OK && nRow!=p->nTotalRow ) rc = FTS5_CORRUPT;",
          "975:     rc = sqlite3Fts5IndexIntegrityCheck(p->pIndex, ctx.cksum);",
          "",
          "[Added Lines]",
          "900:   bUseCksum = (pConfig->eContent==FTS5_CONTENT_NORMAL",
          "901:            || (pConfig->eContent==FTS5_CONTENT_EXTERNAL && iArg)",
          "902:   );",
          "903:   if( bUseCksum ){",
          "906:     rc = fts5StorageGetStmt(p, FTS5_STMT_SCAN, &pScan, 0);",
          "907:     if( rc==SQLITE_OK ){",
          "908:       int rc2;",
          "909:       while( SQLITE_ROW==sqlite3_step(pScan) ){",
          "910:         int i;",
          "911:         ctx.iRowid = sqlite3_column_int64(pScan, 0);",
          "913:         if( pConfig->bColumnsize ){",
          "914:           rc = sqlite3Fts5StorageDocsize(p, ctx.iRowid, aColSize);",
          "916:         if( rc==SQLITE_OK && pConfig->eDetail==FTS5_DETAIL_NONE ){",
          "917:           rc = sqlite3Fts5TermsetNew(&ctx.pTermset);",
          "919:         for(i=0; rc==SQLITE_OK && i<pConfig->nCol; i++){",
          "920:           if( pConfig->abUnindexed[i] ) continue;",
          "921:           ctx.iCol = i;",
          "922:           ctx.szCol = 0;",
          "923:           if( pConfig->eDetail==FTS5_DETAIL_COLUMNS ){",
          "924:             rc = sqlite3Fts5TermsetNew(&ctx.pTermset);",
          "925:           }",
          "926:           if( rc==SQLITE_OK ){",
          "927:             const char *zText = (const char*)sqlite3_column_text(pScan, i+1);",
          "928:             int nText = sqlite3_column_bytes(pScan, i+1);",
          "929:             rc = sqlite3Fts5Tokenize(pConfig,",
          "930:                 FTS5_TOKENIZE_DOCUMENT,",
          "931:                 zText, nText,",
          "932:                 (void*)&ctx,",
          "933:                 fts5StorageIntegrityCallback",
          "934:             );",
          "935:           }",
          "936:           if( rc==SQLITE_OK && pConfig->bColumnsize && ctx.szCol!=aColSize[i] ){",
          "937:             rc = FTS5_CORRUPT;",
          "938:           }",
          "939:           aTotalSize[i] += ctx.szCol;",
          "940:           if( pConfig->eDetail==FTS5_DETAIL_COLUMNS ){",
          "941:             sqlite3Fts5TermsetFree(ctx.pTermset);",
          "942:             ctx.pTermset = 0;",
          "943:           }",
          "945:         sqlite3Fts5TermsetFree(ctx.pTermset);",
          "946:         ctx.pTermset = 0;",
          "948:         if( rc!=SQLITE_OK ) break;",
          "950:       rc2 = sqlite3_reset(pScan);",
          "951:       if( rc==SQLITE_OK ) rc = rc2;",
          "955:     if( rc==SQLITE_OK ){",
          "956:       int i;",
          "957:       rc = fts5StorageLoadTotals(p, 0);",
          "958:       for(i=0; rc==SQLITE_OK && i<pConfig->nCol; i++){",
          "959:         if( p->aTotalSize[i]!=aTotalSize[i] ) rc = FTS5_CORRUPT;",
          "960:       }",
          "965:     if( rc==SQLITE_OK && pConfig->eContent==FTS5_CONTENT_NORMAL ){",
          "966:       i64 nRow = 0;",
          "967:       rc = fts5StorageCount(p, \"content\", &nRow);",
          "968:       if( rc==SQLITE_OK && nRow!=p->nTotalRow ) rc = FTS5_CORRUPT;",
          "969:     }",
          "970:     if( rc==SQLITE_OK && pConfig->bColumnsize ){",
          "971:       i64 nRow = 0;",
          "972:       rc = fts5StorageCount(p, \"docsize\", &nRow);",
          "973:       if( rc==SQLITE_OK && nRow!=p->nTotalRow ) rc = FTS5_CORRUPT;",
          "974:     }",
          "981:     rc = sqlite3Fts5IndexIntegrityCheck(p->pIndex, ctx.cksum, bUseCksum);",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5integrity.test||ext/fts5/test/fts5integrity.test": [
          "File: ext/fts5/test/fts5integrity.test -> ext/fts5/test/fts5integrity.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "273:   SELECT quote(x'37');",
          "274: } {X'37'}",
          "277: do_execsql_test 9.2 {",
          "278:   INSERT INTO vt0 VALUES (SUBSTR(x'37', 0));",
          "279: --  INSERT INTO vt0 VALUES (x'37');",
          "",
          "[Removed Lines]",
          "276: breakpoint",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "282:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "283: }",
          "285: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284: #-------------------------------------------------------------------------",
          "285: reset_db",
          "286: do_execsql_test 10.0 {",
          "287:   CREATE TABLE t1(i INTEGER PRIMARY KEY, a, b);",
          "288:   CREATE VIRTUAL TABLE vt0 USING fts5(a, b, content=t1);",
          "289:   INSERT INTO vt0(rowid, a, b) VALUES(1, 'abc', 'def');",
          "290: }",
          "291: do_catchsql_test 10.1 {",
          "292:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "293: } {0 {}}",
          "294: do_catchsql_test 10.2 {",
          "295:   INSERT INTO vt0(vt0, rank) VALUES('integrity-check', 0);",
          "296: } {0 {}}",
          "297: do_catchsql_test 10.3 {",
          "298:   INSERT INTO vt0(vt0, rank) VALUES('integrity-check', 1);",
          "299: } {1 {database disk image is malformed}}",
          "300: do_catchsql_test 10.3 {",
          "301:   INSERT INTO t1 VALUES(1, 'abc', 'def');",
          "302:   INSERT INTO vt0(vt0, rank) VALUES('integrity-check', 1);",
          "303: } {0 {}}",
          "305: do_execsql_test 10.4 {",
          "306:   CREATE VIRTUAL TABLE vt1 USING fts5(a, b, content=);",
          "307:   INSERT INTO vt1(rowid, a, b) VALUES(1, 'abc', 'def');",
          "308: }",
          "310: do_catchsql_test 10.5.1 {",
          "311:   INSERT INTO vt0(vt0, rank) VALUES('integrity-check', 0);",
          "312: } {0 {}}",
          "313: do_catchsql_test 10.5.2 {",
          "314:   INSERT INTO vt0(vt0, rank) VALUES('integrity-check', 1);",
          "315: } {0 {}}",
          "316: do_catchsql_test 10.5.3 {",
          "317:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "318: } {0 {}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8bbaee238593741da107b92b254cb5f0cf8b6bcc760bf2b25d20e46c8edee2a9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "74e0d966952b140f9732be351b04cb755d713cbf",
      "candidate_info": {
        "commit_hash": "74e0d966952b140f9732be351b04cb755d713cbf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/74e0d966952b140f9732be351b04cb755d713cbf",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/istrue.test"
        ],
        "message": "Identifiers \"TRUE\" and \"FALSE\" cannot take on their boolean constant values if they are operands of the \".\" operator.\n\nFossilOrigin-Name: ad738286e2441b5e84d05366db3fcafabe66be766f21fe6c17f43a8fabab16fb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/istrue.test||test/istrue.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 14a5cbddc887e23a684fabab1a213cce261bd6cffa0663d4f138b92d0b65b9c2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2049:     case TK_IF_NULL_ROW:",
          "2050:     case TK_REGISTER:",
          "2051:       testcase( pExpr->op==TK_REGISTER );",
          "2052:       testcase( pExpr->op==TK_IF_NULL_ROW );",
          "2053:       pWalker->eCode = 0;",
          "2054:       return WRC_Abort;",
          "2055:     case TK_VARIABLE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2051:     case TK_DOT:",
          "2054:       testcase( pExpr->op==TK_DOT );",
          "",
          "---------------"
        ],
        "test/istrue.test||test/istrue.test": [
          "File: test/istrue.test -> test/istrue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:   SELECT 0.0 IS FALSE COLLATE BINARY;",
          "173: } {1 1 1   1 1 1  1 1 1}",
          "175: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175: # 2020-06-12 bug report from Chromium",
          "176: # https://bugs.chromium.org/p/chromium/issues/detail?id=1094247",
          "177: do_catchsql_test istrue-800 {",
          "178:   SELECT 9 IN (false.false);",
          "179: } {1 {no such column: false.false}}",
          "180: do_execsql_test istrue-810 {",
          "181:   CREATE TABLE t8(a INT, true INT, false INT, d INT);",
          "182:   INSERT INTO t8(a,true,false,d) VALUES(5,6,7,8),(4,3,2,1),('a','b','c','d');",
          "183:   SELECT * FROM t8 ORDER BY false;",
          "184: } {4 3 2 1 5 6 7 8 a b c d}",
          "185: do_catchsql_test istrue-820 {",
          "186:   SELECT 9 IN (false.false) FROM t8;",
          "187: } {1 {no such column: false.false}}",
          "188: do_execsql_test istrue-830 {",
          "189:   CREATE TABLE false(true INT, false INT, x INT CHECK (5 IN (false.false)));",
          "190: } {}",
          "191: do_execsql_test istrue-840 {",
          "192:   INSERT INTO False VALUES(4,5,6);",
          "193: } {}",
          "194: do_catchsql_test istrue-841 {",
          "195:   INSERT INTO False VALUES(5,6,7);",
          "196: } {1 {CHECK constraint failed: false}}",
          "197: do_execsql_test istrue-850 {",
          "198:   SELECT 9 IN (false.false) FROM false;",
          "199: } {0}",
          "200: do_execsql_test istrue-851 {",
          "201:   SELECT 5 IN (false.false) FROM false;",
          "202: } {1}",
          "",
          "---------------"
        ]
      }
    }
  ]
}