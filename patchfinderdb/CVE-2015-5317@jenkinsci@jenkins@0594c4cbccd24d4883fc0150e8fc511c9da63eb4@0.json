{
  "cve_id": "CVE-2015-5317",
  "cve_desc": "The Fingerprints pages in Jenkins before 1.638 and LTS before 1.625.2 might allow remote attackers to obtain sensitive job and build name information via a direct request.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "0594c4cbccd24d4883fc0150e8fc511c9da63eb4",
  "patch_info": {
    "commit_hash": "0594c4cbccd24d4883fc0150e8fc511c9da63eb4",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/0594c4cbccd24d4883fc0150e8fc511c9da63eb4",
    "files": [
      "core/src/main/java/hudson/model/Fingerprint.java",
      "core/src/main/resources/hudson/model/Fingerprint/index.jelly",
      "test/src/main/java/org/jvnet/hudson/test/CreateFileBuilder.java",
      "test/src/main/java/org/jvnet/hudson/test/MockFolder.java",
      "test/src/main/java/org/jvnet/hudson/test/SecuredMockFolder.java",
      "test/src/main/java/org/jvnet/hudson/test/WorkspaceCopyFileBuilder.java",
      "test/src/test/java/hudson/model/FingerprintTest.java"
    ],
    "message": "[SECURITY-153] Hide references to inaccessible jobs in fingerprints.",
    "before_after_code_files": [
      "core/src/main/java/hudson/model/Fingerprint.java||core/src/main/java/hudson/model/Fingerprint.java",
      "core/src/main/resources/hudson/model/Fingerprint/index.jelly||core/src/main/resources/hudson/model/Fingerprint/index.jelly",
      "test/src/main/java/org/jvnet/hudson/test/CreateFileBuilder.java||test/src/main/java/org/jvnet/hudson/test/CreateFileBuilder.java",
      "test/src/main/java/org/jvnet/hudson/test/MockFolder.java||test/src/main/java/org/jvnet/hudson/test/MockFolder.java",
      "test/src/main/java/org/jvnet/hudson/test/SecuredMockFolder.java||test/src/main/java/org/jvnet/hudson/test/SecuredMockFolder.java",
      "test/src/main/java/org/jvnet/hudson/test/WorkspaceCopyFileBuilder.java||test/src/main/java/org/jvnet/hudson/test/WorkspaceCopyFileBuilder.java",
      "test/src/test/java/hudson/model/FingerprintTest.java||test/src/test/java/hudson/model/FingerprintTest.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/model/Fingerprint.java||core/src/main/java/hudson/model/Fingerprint.java": [
      "File: core/src/main/java/hudson/model/Fingerprint.java -> core/src/main/java/hudson/model/Fingerprint.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "39: import hudson.Extension;",
      "40: import hudson.model.listeners.ItemListener;",
      "41: import hudson.model.listeners.SaveableListener;",
      "42: import hudson.security.ACL;",
      "43: import hudson.util.AtomicFileWriter;",
      "44: import hudson.util.HexBinaryConverter;",
      "45: import hudson.util.Iterators;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "42: import hudson.remoting.Callable;",
      "44: import hudson.security.Permission;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "71: import java.util.logging.Level;",
      "72: import java.util.logging.Logger;",
      "73: import javax.annotation.CheckForNull;",
      "74: import org.xmlpull.v1.XmlPullParserException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "76: import javax.annotation.Nonnull;",
      "77: import org.acegisecurity.AccessDeniedException;",
      "78: import org.acegisecurity.Authentication;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "111:         @Exported",
      "112:         public String getName() {",
      "113:             return name;",
      "114:         }",
      "116:         void setName(String newName) {",
      "117:             name = newName;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "116:         @Nonnull",
      "130:         private boolean hasPermissionToDiscoverBuild() {",
      "133:             final Jenkins instance = Jenkins.getInstance();",
      "134:             if (instance != null && instance.hasPermission(Jenkins.ADMINISTER)) {",
      "135:                 return true;",
      "136:             }",
      "138:             return canDiscoverItem(name);",
      "139:         }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "135:         @Exported",
      "136:         public int getNumber() {",
      "137:             return number;",
      "138:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "163:         @Nonnull",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "811:     @Exported",
      "812:     public BuildPtr getOriginal() {",
      "814:     }",
      "816:     public String getDisplayName() {",
      "",
      "[Removed Lines]",
      "813:         return original;",
      "",
      "[Added Lines]",
      "842:         if (original != null && original.hasPermissionToDiscoverBuild()) {",
      "843:             return original;",
      "844:         }",
      "845:         return null;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "899:     @Exported(name=\"usage\")",
      "900:     public List<RangeItem> _getUsages() {",
      "901:         List<RangeItem> r = new ArrayList<RangeItem>();",
      "904:         return r;",
      "905:     }",
      "",
      "[Removed Lines]",
      "902:         for (Entry<String, RangeSet> e : usages.entrySet())",
      "903:             r.add(new RangeItem(e.getKey(),e.getValue()));",
      "",
      "[Added Lines]",
      "934:         final Jenkins instance = Jenkins.getInstance();",
      "935:         if (instance == null) {",
      "936:             return r;",
      "937:         }",
      "939:         for (Entry<String, RangeSet> e : usages.entrySet()) {",
      "940:             final String itemName = e.getKey();",
      "941:             if (instance.hasPermission(Jenkins.ADMINISTER) || canDiscoverItem(itemName)) {",
      "942:                 r.add(new RangeItem(itemName, e.getValue()));",
      "943:             }",
      "944:         }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1292:     @Override public String toString() {",
      "1293:         return \"Fingerprint[original=\" + original + \",hash=\" + getHashString() + \",fileName=\" + fileName + \",timestamp=\" + DATE_CONVERTER.toString(timestamp) + \",usages=\" + new TreeMap<String,RangeSet>(usages) + \",facets=\" + facets + \"]\";",
      "1294:     }",
      "1296:     private static final XStream XSTREAM = new XStream2();",
      "1297:     static {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1343:     private static boolean canDiscoverItem(@Nonnull final String fullName) {",
      "1344:         final Jenkins jenkins = Jenkins.getInstance();",
      "1345:         if (jenkins == null) {",
      "1346:             return false;",
      "1347:         }",
      "1350:         Item item = null;",
      "1351:         try {",
      "1352:             item = jenkins.getItemByFullName(fullName);",
      "1353:         } catch (AccessDeniedException ex) {",
      "1355:         }",
      "1356:         if (item != null) {",
      "1357:             return true;",
      "1358:         }",
      "1362:         final Authentication userAuth = Jenkins.getAuthentication();",
      "1363:         final boolean[] res = new boolean[] {false};",
      "1364:         ACL.impersonate(ACL.SYSTEM, new Runnable() {",
      "1365:             @Override",
      "1366:             public void run() {",
      "1367:                 final Item itemBySystemUser = jenkins.getItemByFullName(fullName);",
      "1368:                 if (itemBySystemUser == null) {",
      "1369:                     return;",
      "1370:                 }",
      "1374:                 boolean canDiscoverTheItem = itemBySystemUser.getACL().hasPermission(userAuth, Item.DISCOVER);",
      "1375:                 if (canDiscoverTheItem) {",
      "1376:                     ItemGroup<?> current = itemBySystemUser.getParent();",
      "1377:                     do {",
      "1378:                         if (current instanceof Item) {",
      "1379:                             final Item item = (Item) current;",
      "1380:                             current = item.getParent();",
      "1381:                             if (!item.getACL().hasPermission(userAuth, Item.READ)) {",
      "1382:                                 canDiscoverTheItem = false;",
      "1383:                             }",
      "1384:                         } else {",
      "1385:                             current = null;",
      "1386:                         }",
      "1387:                     } while (canDiscoverTheItem && current != null);",
      "1388:                 }",
      "1389:                 res[0] = canDiscoverTheItem;",
      "1390:             }",
      "1391:         });",
      "1392:         return res[0];",
      "1393:     }",
      "",
      "---------------"
    ],
    "core/src/main/resources/hudson/model/Fingerprint/index.jelly||core/src/main/resources/hudson/model/Fingerprint/index.jelly": [
      "File: core/src/main/resources/hudson/model/Fingerprint/index.jelly -> core/src/main/resources/hudson/model/Fingerprint/index.jelly",
      "--- Hunk 1 ---",
      "[Context before]",
      "66:             ${%This file has been used in the following places}:",
      "67:           </p>",
      "68:           <table class=\"fingerprint-summary\">",
      "69:             <j:forEach var=\"j\" items=\"${it.jobs}\">",
      "70:               <j:set var=\"job\" value=\"${app.getItemByFullName(j)}\" />",
      "87:             </j:forEach>",
      "88:           </table>",
      "89:         </j:otherwise>",
      "",
      "[Removed Lines]",
      "71:               <j:set var=\"range\" value=\"${it.usages[j]}\" />",
      "72:               <tr>",
      "73:                 <td class=\"fingerprint-summary-header\">",
      "74:                   <j:choose>",
      "75:                     <j:when test=\"${job!=null}\">",
      "76:                       <a href=\"${rootURL}/${job.url}\" class=\"model-link inside\">${j}</a>",
      "77:                     </j:when>",
      "78:                     <j:otherwise>",
      "79:                       ${j}",
      "80:                     </j:otherwise>",
      "81:                   </j:choose>",
      "82:                 </td>",
      "83:                 <td>",
      "84:                   <t:buildRangeLink job=\"${job}\" range=\"${range}\" />",
      "85:                 </td>",
      "86:               </tr>",
      "",
      "[Added Lines]",
      "69:             <j:set var=\"usages\" value=\"${it.usages}\"/>",
      "72:               <j:set var=\"range\" value=\"${usages[j]}\" />",
      "73:               <j:if test=\"${job!=null}\"> <!--Otherwise we don't display links at all-->",
      "74:                 <tr>",
      "75:                   <td class=\"fingerprint-summary-header\">",
      "76:                     <a href=\"${rootURL}/${job.url}\" class=\"model-link inside\">${j}</a>",
      "77:                     <td>",
      "78:                       <t:buildRangeLink job=\"${job}\" range=\"${range}\" />",
      "79:                     </td>",
      "80:                   </td>",
      "81:                 </tr>",
      "82:               </j:if>",
      "",
      "---------------"
    ],
    "test/src/main/java/org/jvnet/hudson/test/CreateFileBuilder.java||test/src/main/java/org/jvnet/hudson/test/CreateFileBuilder.java": [
      "File: test/src/main/java/org/jvnet/hudson/test/CreateFileBuilder.java -> test/src/main/java/org/jvnet/hudson/test/CreateFileBuilder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: package org.jvnet.hudson.test;",
      "26: import hudson.AbortException;",
      "27: import hudson.Extension;",
      "28: import hudson.FilePath;",
      "29: import hudson.Launcher;",
      "30: import hudson.model.AbstractBuild;",
      "31: import hudson.model.BuildListener;",
      "32: import hudson.model.Descriptor;",
      "33: import hudson.tasks.Builder;",
      "34: import java.io.IOException;",
      "35: import javax.annotation.Nonnull;",
      "36: import net.sf.json.JSONObject;",
      "37: import org.kohsuke.stapler.StaplerRequest;",
      "44: public class CreateFileBuilder extends Builder {",
      "46:     @Nonnull",
      "47:     private final String fileName;",
      "49:     @Nonnull",
      "50:     private final String fileContent;",
      "52:     public CreateFileBuilder(@Nonnull String fileName, @Nonnull String fileContent) {",
      "53:         this.fileName = fileName;",
      "54:         this.fileContent = fileContent;",
      "55:     }",
      "57:     @Nonnull",
      "58:     public String getFileName() {",
      "59:         return fileName;",
      "60:     }",
      "62:     @Nonnull",
      "63:     public String getFileContent() {",
      "64:         return fileContent;",
      "65:     }",
      "67:     @Override",
      "68:     public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {",
      "69:         listener.getLogger().println(\"Creating a file \" + fileName);",
      "71:         FilePath workspace = build.getWorkspace();",
      "72:         if (workspace == null) {",
      "73:             throw new AbortException(\"Cannot get the workspace of the build\");",
      "74:         }",
      "75:         workspace.child(fileName).write(fileContent, \"UTF-8\");",
      "77:         return true;",
      "78:     }",
      "80:     @Override",
      "81:     public Descriptor<Builder> getDescriptor() {",
      "82:         return new DescriptorImpl();",
      "83:     }",
      "85:     @Extension",
      "86:     public static final class DescriptorImpl extends Descriptor<Builder> {",
      "88:         @Override",
      "89:         public Builder newInstance(StaplerRequest req, JSONObject data) {",
      "90:             throw new UnsupportedOperationException(\"This is a temporarytest class, \"",
      "91:                     + \"which should not be configured from UI\");",
      "92:         }",
      "94:         @Override",
      "95:         public String getDisplayName() {",
      "96:             return \"Create a file\";",
      "97:         }",
      "98:     }",
      "99: }",
      "",
      "---------------"
    ],
    "test/src/main/java/org/jvnet/hudson/test/MockFolder.java||test/src/main/java/org/jvnet/hudson/test/MockFolder.java": [
      "File: test/src/main/java/org/jvnet/hudson/test/MockFolder.java -> test/src/main/java/org/jvnet/hudson/test/MockFolder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "77:     private String primaryView;",
      "78:     private ViewsTabBar viewsTabBar;",
      "81:         super(parent, name);",
      "82:     }",
      "",
      "[Removed Lines]",
      "80:     private MockFolder(ItemGroup parent, String name) {",
      "",
      "[Added Lines]",
      "80:     protected MockFolder(ItemGroup parent, String name) {",
      "",
      "---------------"
    ],
    "test/src/main/java/org/jvnet/hudson/test/SecuredMockFolder.java||test/src/main/java/org/jvnet/hudson/test/SecuredMockFolder.java": [
      "File: test/src/main/java/org/jvnet/hudson/test/SecuredMockFolder.java -> test/src/main/java/org/jvnet/hudson/test/SecuredMockFolder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: package org.jvnet.hudson.test;",
      "26: import hudson.Extension;",
      "27: import hudson.model.Item;",
      "28: import hudson.model.ItemGroup;",
      "29: import hudson.model.TopLevelItem;",
      "30: import hudson.model.TopLevelItemDescriptor;",
      "31: import hudson.security.ACL;",
      "32: import hudson.security.Permission;",
      "33: import hudson.security.SidACL;",
      "34: import hudson.security.SparseACL;",
      "35: import java.util.HashSet;",
      "36: import java.util.Set;",
      "37: import javax.annotation.Nonnull;",
      "38: import jenkins.model.Jenkins;",
      "39: import org.acegisecurity.Authentication;",
      "40: import org.acegisecurity.acls.sid.Sid;",
      "41: import org.kohsuke.accmod.Restricted;",
      "42: import org.kohsuke.accmod.restrictions.NoExternalUse;",
      "50: @Restricted(NoExternalUse.class) // Unrestrict after integrating into Jenkins trunk",
      "51: public class SecuredMockFolder extends MockFolder {",
      "53:     private String grantedUser;",
      "54:     private Set<String> grantedPermissions;",
      "56:     private SecuredMockFolder(ItemGroup parent, String name) {",
      "57:         super(parent, name);",
      "58:     }",
      "60:     @Override",
      "61:     public TopLevelItem getItem(String name) {",
      "62:         final TopLevelItem item = super.getItem(name);",
      "63:         if (item != null && item.hasPermission(Item.READ)) {",
      "64:             return item;",
      "65:         }",
      "66:         return null;",
      "67:     }",
      "69:     @Override",
      "70:     public boolean hasPermission(Permission p) {",
      "71:         if (super.hasPermission(p)) {",
      "72:             return true;",
      "73:         }",
      "74:         return hasPermissionInField(Jenkins.getAuthentication().getName(), p);",
      "75:     }",
      "77:     private boolean hasPermissionInField(String sid, @Nonnull Permission p) {",
      "78:         if (sid.equals(grantedUser)) {",
      "79:             if (grantedPermissions != null && grantedPermissions.contains(p.getId())) {",
      "80:                 return true;",
      "81:             }",
      "82:         }",
      "83:         return false;",
      "84:     }",
      "86:     @Override",
      "87:     public ACL getACL() {",
      "88:         return new ACLWrapper();",
      "89:     }",
      "91:     public void setPermissions(String username, Permission... permissions) {",
      "92:         this.grantedUser = username;",
      "93:         if (grantedPermissions == null) {",
      "94:             grantedPermissions = new HashSet<String>();",
      "95:         } else {",
      "96:             grantedPermissions.clear();",
      "97:         }",
      "98:         for (Permission p : permissions) {",
      "99:             grantedPermissions.add(p.getId());",
      "100:         }",
      "101:     }",
      "103:     @Extension",
      "104:     public static class DescriptorImpl extends TopLevelItemDescriptor {",
      "106:         @Override",
      "107:         public String getDisplayName() {",
      "108:             return \"MockFolder with security control\";",
      "109:         }",
      "111:         @Override",
      "112:         public TopLevelItem newInstance(ItemGroup parent, String name) {",
      "113:             return new SecuredMockFolder(parent, name);",
      "114:         }",
      "115:     }",
      "117:     private class ACLWrapper extends SidACL {",
      "119:         @Override",
      "120:         protected Boolean hasPermission(Sid p, Permission permission) {",
      "122:             return SecuredMockFolder.this.hasPermissionInField(toString(p), permission);",
      "123:         }",
      "124:     }",
      "125: }",
      "",
      "---------------"
    ],
    "test/src/main/java/org/jvnet/hudson/test/WorkspaceCopyFileBuilder.java||test/src/main/java/org/jvnet/hudson/test/WorkspaceCopyFileBuilder.java": [
      "File: test/src/main/java/org/jvnet/hudson/test/WorkspaceCopyFileBuilder.java -> test/src/main/java/org/jvnet/hudson/test/WorkspaceCopyFileBuilder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: package org.jvnet.hudson.test;",
      "26: import hudson.AbortException;",
      "27: import hudson.Extension;",
      "28: import hudson.FilePath;",
      "29: import hudson.Launcher;",
      "30: import hudson.model.AbstractBuild;",
      "31: import hudson.model.AbstractProject;",
      "32: import hudson.model.BuildListener;",
      "33: import hudson.model.Descriptor;",
      "34: import hudson.tasks.Builder;",
      "35: import java.io.IOException;",
      "36: import jenkins.model.Jenkins;",
      "37: import net.sf.json.JSONObject;",
      "38: import org.kohsuke.stapler.StaplerRequest;",
      "45: public class WorkspaceCopyFileBuilder extends Builder {",
      "47:     private final String fileName;",
      "48:     private final String jobName;",
      "49:     private final int buildNumber;",
      "51:     public WorkspaceCopyFileBuilder(String fileName, String jobName, int buildNumber) {",
      "52:         this.fileName = fileName;",
      "53:         this.jobName = jobName;",
      "54:         this.buildNumber = buildNumber;",
      "55:     }",
      "57:     public int getBuildNumber() {",
      "58:         return buildNumber;",
      "59:     }",
      "61:     public String getFileName() {",
      "62:         return fileName;",
      "63:     }",
      "65:     public String getJobName() {",
      "66:         return jobName;",
      "67:     }",
      "69:     @Override",
      "70:     public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {",
      "71:         listener.getLogger().println(\"Copying a \" + fileName + \" from \" + jobName + \"#\" + buildNumber);",
      "73:         Jenkins inst = Jenkins.getInstance();",
      "74:         AbstractProject<?,?> item = inst.getItemByFullName(jobName, AbstractProject.class);",
      "75:         if (item == null) {",
      "76:             throw new AbortException(\"Cannot find a source job: \" + jobName);",
      "77:         }",
      "79:         AbstractBuild<?,?> sourceBuild = item.getBuildByNumber(buildNumber);",
      "80:         if (sourceBuild == null) {",
      "81:             throw new AbortException(\"Cannot find a source build: \" + jobName + \"#\" + buildNumber);",
      "82:         }",
      "84:         FilePath sourceWorkspace = sourceBuild.getWorkspace();",
      "85:         if (sourceWorkspace == null) {",
      "86:             throw new AbortException(\"Cannot get the source workspace from \" + sourceBuild.getDisplayName());",
      "87:         }",
      "89:         FilePath workspace = build.getWorkspace();",
      "90:         if (workspace == null) {",
      "91:             throw new IOException(\"Cannot get the workspace of the build\");",
      "92:         }",
      "93:         workspace.child(fileName).copyFrom(sourceWorkspace.child(fileName));",
      "95:         return true;",
      "96:     }",
      "98:     @Override",
      "99:     public Descriptor<Builder> getDescriptor() {",
      "100:         return new DescriptorImpl();",
      "101:     }",
      "103:     @Extension",
      "104:     public static final class DescriptorImpl extends Descriptor<Builder> {",
      "106:         @Override",
      "107:         public Builder newInstance(StaplerRequest req, JSONObject data) {",
      "108:             throw new UnsupportedOperationException();",
      "109:         }",
      "111:         @Override",
      "112:         public String getDisplayName() {",
      "113:             return \"Copy a file from the workspace of another build\";",
      "114:         }",
      "115:     }",
      "116: }",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/model/FingerprintTest.java||test/src/test/java/hudson/model/FingerprintTest.java": [
      "File: test/src/test/java/hudson/model/FingerprintTest.java -> test/src/test/java/hudson/model/FingerprintTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: package hudson.model;",
      "26: import hudson.security.ACL;",
      "27: import hudson.security.AuthorizationMatrixProperty;",
      "28: import hudson.security.Permission;",
      "29: import hudson.security.ProjectMatrixAuthorizationStrategy;",
      "30: import hudson.tasks.ArtifactArchiver;",
      "31: import hudson.tasks.Fingerprinter;",
      "32: import java.io.IOException;",
      "33: import java.util.Arrays;",
      "34: import java.util.HashMap;",
      "35: import java.util.HashSet;",
      "36: import java.util.Hashtable;",
      "37: import java.util.Map;",
      "38: import java.util.Set;",
      "39: import javax.annotation.CheckForNull;",
      "40: import javax.annotation.Nonnull;",
      "41: import jenkins.model.Jenkins;",
      "42: import org.junit.Rule;",
      "43: import org.junit.Test;",
      "44: import org.junit.Before;",
      "45: import org.jvnet.hudson.test.CreateFileBuilder;",
      "46: import org.jvnet.hudson.test.JenkinsRule;",
      "47: import org.jvnet.hudson.test.Issue;",
      "48: import org.jvnet.hudson.test.MockFolder;",
      "49: import org.jvnet.hudson.test.SecuredMockFolder;",
      "50: import org.jvnet.hudson.test.WorkspaceCopyFileBuilder;",
      "52: import static org.junit.Assert.*;",
      "53: import static org.hamcrest.Matchers.notNullValue;",
      "54: import static org.hamcrest.Matchers.nullValue;",
      "62: public class FingerprintTest {",
      "64:     @Rule",
      "65:     public JenkinsRule rule = new JenkinsRule();",
      "67:     @Before",
      "68:     public void setupRealm() {",
      "69:         rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());",
      "70:     }",
      "72:     @Test",
      "73:     public void shouldCreateFingerprintsForWorkspace() throws Exception {",
      "74:         FreeStyleProject project = rule.createFreeStyleProject();",
      "75:         project.getBuildersList().add(new CreateFileBuilder(\"test.txt\", \"Hello, world!\"));",
      "76:         project.getPublishersList().add(new Fingerprinter(\"test.txt\", false));",
      "77:         FreeStyleBuild build = rule.buildAndAssertSuccess(project);",
      "79:         Fingerprint fp = getFingerprint(build, \"test.txt\");",
      "80:     }",
      "82:     @Test",
      "83:     public void shouldCreateFingerprintsForArtifacts() throws Exception {",
      "84:         FreeStyleProject project = rule.createFreeStyleProject();",
      "85:         project.getBuildersList().add(new CreateFileBuilder(\"test.txt\", \"Hello, world!\"));",
      "86:         ArtifactArchiver archiver = new ArtifactArchiver(\"test.txt\");",
      "87:         archiver.setFingerprint(true);",
      "88:         project.getPublishersList().add(archiver);",
      "89:         FreeStyleBuild build = rule.buildAndAssertSuccess(project);",
      "91:         Fingerprint fp = getFingerprint(build, \"test.txt\");",
      "92:     }",
      "94:     @Test",
      "95:     public void shouldCreateUsageLinks() throws Exception {",
      "97:         FreeStyleProject project = createAndRunProjectWithPublisher(\"fpProducer\", \"test.txt\");",
      "98:         final FreeStyleBuild build = project.getLastBuild();",
      "101:         FreeStyleProject project2 = rule.createFreeStyleProject();",
      "102:         project2.getBuildersList().add(new WorkspaceCopyFileBuilder(\"test.txt\", project.getName(), build.getNumber()));",
      "103:         project2.getPublishersList().add(new Fingerprinter(\"test.txt\"));",
      "104:         FreeStyleBuild build2 = rule.buildAndAssertSuccess(project2);",
      "106:         Fingerprint fp = getFingerprint(build, \"test.txt\");",
      "109:         Fingerprint.BuildPtr original = fp.getOriginal();",
      "110:         assertEquals(\"Original reference contains a wrong job name\", project.getName(), original.getName());",
      "111:         assertEquals(\"Original reference contains a wrong build number\", build.getNumber(), original.getNumber());",
      "113:         Hashtable<String, Fingerprint.RangeSet> usages = fp.getUsages();",
      "114:         assertTrue(\"Usages do not have a reference to \" + project, usages.containsKey(project.getName()));",
      "115:         assertTrue(\"Usages do not have a reference to \" + project2, usages.containsKey(project2.getName()));",
      "116:     }",
      "118:     @Test",
      "119:     @Issue(\"SECURITY-153\")",
      "120:     public void shouldBeUnableToSeeJobsIfNoPermissions() throws Exception {",
      "122:         final FreeStyleProject project1 = createAndRunProjectWithPublisher(\"fpProducer\", \"test.txt\");",
      "123:         final FreeStyleBuild build = project1.getLastBuild();",
      "126:         final FreeStyleProject project2 = rule.createFreeStyleProject(\"project2\");",
      "127:         project2.getBuildersList().add(new WorkspaceCopyFileBuilder(\"test.txt\", project1.getName(), build.getNumber()));",
      "128:         project2.getPublishersList().add(new Fingerprinter(\"test.txt\"));",
      "129:         final FreeStyleBuild build2 = rule.buildAndAssertSuccess(project2);",
      "132:         final Fingerprint fp = getFingerprint(build, \"test.txt\");",
      "135:         User user1 = User.get(\"user1\"); // can access project1",
      "136:         User user2 = User.get(\"user2\"); // can access project2",
      "137:         User user3 = User.get(\"user3\"); // cannot access anything",
      "140:         setupProjectMatrixAuthStrategy(Jenkins.READ);",
      "141:         setJobPermissionsOnce(project1, \"user1\", Item.READ, Item.DISCOVER);",
      "142:         setJobPermissionsOnce(project2, \"user2\", Item.READ, Item.DISCOVER);",
      "144:         ACL.impersonate(user1.impersonate(), new Runnable() {",
      "145:             @Override",
      "146:             public void run() {",
      "147:                 Fingerprint.BuildPtr original = fp.getOriginal();",
      "148:                 assertThat(\"user1 should be able to see the origin\", fp.getOriginal(), notNullValue());",
      "149:                 assertEquals(\"user1 should be able to see the origin's project name\", project1.getName(), original.getName());",
      "150:                 assertEquals(\"user1 should be able to see the origin's build number\", build.getNumber(), original.getNumber());",
      "151:                 assertEquals(\"Only one usage should be visible to user1\", 1, fp._getUsages().size());",
      "152:                 assertEquals(\"Only project1 should be visible to user1\", project1.getFullName(), fp._getUsages().get(0).name);",
      "153:             }",
      "154:         });",
      "156:         ACL.impersonate(user2.impersonate(), new Runnable() {",
      "157:             @Override",
      "158:             public void run() {",
      "159:                 assertThat(\"user2 should be unable to see the origin\", fp.getOriginal(), nullValue());",
      "160:                 assertEquals(\"Only one usage should be visible to user2\", 1, fp._getUsages().size());",
      "161:                 assertEquals(\"Only project2 should be visible to user2\", project2.getFullName(), fp._getUsages().get(0).name);",
      "162:             }",
      "163:         });",
      "165:         ACL.impersonate(user3.impersonate(), new Runnable() {",
      "166:             @Override",
      "167:             public void run() {",
      "168:                 Fingerprint.BuildPtr original = fp.getOriginal();",
      "169:                 assertThat(\"user3 should be unable to see the origin\", fp.getOriginal(), nullValue());",
      "170:                 assertEquals(\"All usages should be invisible for user3\", 0, fp._getUsages().size());",
      "171:             }",
      "172:         });",
      "173:     }",
      "175:     @Test",
      "176:     public void shouldBeAbleToSeeOriginalWithDiscoverPermissionOnly() throws Exception {",
      "178:         final FreeStyleProject project = createAndRunProjectWithPublisher(\"project\", \"test.txt\");",
      "179:         final FreeStyleBuild build = project.getLastBuild();",
      "180:         final Fingerprint fingerprint = getFingerprint(build, \"test.txt\");",
      "183:         User user1 = User.get(\"user1\");",
      "184:         setupProjectMatrixAuthStrategy(Jenkins.READ, Item.DISCOVER);",
      "186:         ACL.impersonate(user1.impersonate(), new Runnable() {",
      "187:             @Override",
      "188:             public void run() {",
      "189:                 Fingerprint.BuildPtr original = fingerprint.getOriginal();",
      "190:                 assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());",
      "191:                 assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());",
      "192:                 assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());",
      "193:                 assertEquals(\"Usage ref in fingerprint should be visible to user1\", 1, fingerprint._getUsages().size());",
      "194:             }",
      "195:         });",
      "196:     }",
      "198:     @Test",
      "199:     public void shouldBeAbleToSeeFingerprintsInReadableFolder() throws Exception {",
      "200:         final SecuredMockFolder folder = rule.jenkins.createProject(SecuredMockFolder.class, \"folder\");",
      "201:         final FreeStyleProject project = createAndRunProjectWithPublisher(folder, \"project\", \"test.txt\");",
      "202:         final FreeStyleBuild build = project.getLastBuild();",
      "203:         final Fingerprint fingerprint = getFingerprint(build, \"test.txt\");",
      "206:         User user1 = User.get(\"user1\");",
      "207:         setupProjectMatrixAuthStrategy(false, Jenkins.READ, Item.DISCOVER);",
      "208:         setJobPermissionsOnce(project, \"user1\", Item.DISCOVER); // Prevents the fallback to the folder ACL",
      "209:         folder.setPermissions(\"user1\", Item.READ);",
      "212:         ACL.impersonate(user1.impersonate(), new Runnable() {",
      "213:             @Override",
      "214:             public void run() {",
      "215:                 assertTrue(\"Test framework issue: User1 should be able to read the folder\", folder.hasPermission(Item.READ));",
      "217:                 Fingerprint.BuildPtr original = fingerprint.getOriginal();",
      "218:                 assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());",
      "219:                 assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());",
      "220:                 assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());",
      "221:                 assertEquals(\"user1 should be able to see the job\", 1, fingerprint._getUsages().size());",
      "223:                 assertThat(\"User should be unable do retrieve the job due to the missing read\", original.getJob(), nullValue());",
      "224:             }",
      "225:         });",
      "226:     }",
      "228:     @Test",
      "229:     public void shouldBeUnableToSeeFingerprintsInUnreadableFolder() throws Exception {",
      "230:         final SecuredMockFolder folder = rule.jenkins.createProject(SecuredMockFolder.class, \"folder\");",
      "231:         final FreeStyleProject project = createAndRunProjectWithPublisher(folder, \"project\", \"test.txt\");",
      "232:         final FreeStyleBuild build = project.getLastBuild();",
      "233:         final Fingerprint fingerprint = getFingerprint(build, \"test.txt\");",
      "236:         User user1 = User.get(\"user1\"); // can access project1",
      "237:         setupProjectMatrixAuthStrategy(Jenkins.READ, Item.DISCOVER);",
      "240:         ACL.impersonate(user1.impersonate(), new Runnable() {",
      "241:             @Override",
      "242:             public void run() {",
      "243:                 assertFalse(\"Test framework issue: User1 should be unable to read the folder\", folder.hasPermission(Item.READ));",
      "244:                 assertThat(\"user1 should be unable to see the origin\", fingerprint.getOriginal(), nullValue());",
      "245:                 assertEquals(\"No jobs should be visible to user1\", 0, fingerprint._getUsages().size());",
      "246:             }",
      "247:         });",
      "248:     }",
      "255:     @Test",
      "256:     @Issue(\"SECURITY-153\")",
      "257:     public void commonUserShouldBeUnableToSeeReferencesOfDeletedJobs() throws Exception {",
      "259:         FreeStyleProject project = createAndRunProjectWithPublisher(\"project\", \"test.txt\");",
      "260:         FreeStyleBuild build = project.getLastBuild();",
      "261:         final Fingerprint fp = getFingerprint(build, \"test.txt\");",
      "264:         User user1 = User.get(\"user1\");",
      "265:         setupProjectMatrixAuthStrategy(Jenkins.READ, Item.READ, Item.DISCOVER);",
      "266:         project.delete();",
      "268:         ACL.impersonate(user1.impersonate(), new Runnable() {",
      "269:             @Override",
      "270:             public void run() {",
      "271:                 assertThat(\"user1 should be unable to see the origin\", fp.getOriginal(), nullValue());",
      "272:                 assertEquals(\"No jobs should be visible to user1\", 0, fp._getUsages().size());",
      "273:             }",
      "274:         });",
      "275:     }",
      "277:     @Test",
      "278:     public void adminShouldBeAbleToSeeReferencesOfDeletedJobs() throws Exception {",
      "280:         final FreeStyleProject project = createAndRunProjectWithPublisher(\"project\", \"test.txt\");",
      "281:         final FreeStyleBuild build = project.getLastBuild();",
      "282:         final Fingerprint fingerprint = getFingerprint(build, \"test.txt\");",
      "285:         User user1 = User.get(\"user1\");",
      "286:         setupProjectMatrixAuthStrategy(Jenkins.ADMINISTER);",
      "287:         project.delete();",
      "289:         ACL.impersonate(user1.impersonate(), new Runnable() {",
      "290:             @Override",
      "291:             public void run() {",
      "292:                 Fingerprint.BuildPtr original = fingerprint.getOriginal();",
      "293:                 assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());",
      "294:                 assertThat(\"Job has been deleted, so Job reference shoud return null\", fingerprint.getOriginal().getJob(), nullValue());",
      "295:                 assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());",
      "296:                 assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());",
      "297:                 assertEquals(\"user1 should be able to see the job in usages\", 1, fingerprint._getUsages().size());",
      "298:             }",
      "299:         });",
      "300:     }",
      "302:     @Nonnull",
      "303:     private Fingerprint getFingerprint(@CheckForNull Run<?, ?> run, @Nonnull String filename) {",
      "304:         assertNotNull(\"Input run is null\", run);",
      "305:         Fingerprinter.FingerprintAction action = run.getAction(Fingerprinter.FingerprintAction.class);",
      "306:         assertNotNull(\"Fingerprint action has not been created in \" + run, action);",
      "307:         Map<String, Fingerprint> fingerprints = action.getFingerprints();",
      "308:         final Fingerprint fp = fingerprints.get(filename);",
      "309:         assertNotNull(\"No reference to '\" + filename + \"' from the Fingerprint action\", fp);",
      "310:         return fp;",
      "311:     }",
      "313:     @Nonnull",
      "314:     private FreeStyleProject createAndRunProjectWithPublisher(String projectName, String fpFileName)",
      "315:             throws Exception {",
      "316:         return createAndRunProjectWithPublisher(null, projectName, fpFileName);",
      "317:     }",
      "319:     @Nonnull",
      "320:     private FreeStyleProject createAndRunProjectWithPublisher(@CheckForNull MockFolder folder,",
      "321:             String projectName, String fpFileName) throws Exception {",
      "322:         final FreeStyleProject project;",
      "323:         if (folder == null) {",
      "324:             project = rule.createFreeStyleProject(projectName);",
      "325:         } else {",
      "326:             project = folder.createProject(FreeStyleProject.class, projectName);",
      "327:         }",
      "328:         project.getBuildersList().add(new CreateFileBuilder(fpFileName, \"Hello, world!\"));",
      "329:         ArtifactArchiver archiver = new ArtifactArchiver(fpFileName);",
      "330:         archiver.setFingerprint(true);",
      "331:         project.getPublishersList().add(archiver);",
      "332:         rule.buildAndAssertSuccess(project);",
      "333:         return project;",
      "334:     }",
      "336:     private void setupProjectMatrixAuthStrategy(@Nonnull Permission ... permissions) {",
      "337:         setupProjectMatrixAuthStrategy(true, permissions);",
      "338:     }",
      "340:     private void setupProjectMatrixAuthStrategy(boolean inheritFromFolders, @Nonnull Permission ... permissions) {",
      "341:         ProjectMatrixAuthorizationStrategy str = inheritFromFolders",
      "342:                 ? new ProjectMatrixAuthorizationStrategy()",
      "343:                 : new NoInheritanceProjectMatrixAuthorizationStrategy();",
      "344:         for (Permission p : permissions) {",
      "345:             str.add(p, \"anonymous\");",
      "346:         }",
      "347:         rule.jenkins.setAuthorizationStrategy(str);",
      "348:     }",
      "350:     private void setJobPermissionsOnce(Job<?,?> job, String username, @Nonnull Permission ... s)",
      "351:             throws IOException {",
      "352:         assertThat(\"Cannot assign the property twice\", job.getProperty(AuthorizationMatrixProperty.class), nullValue());",
      "354:         Map<Permission, Set<String>> permissions = new HashMap<Permission, Set<String>>();",
      "355:         HashSet<String> userSpec = new HashSet<String>(Arrays.asList(username));",
      "357:         for (Permission p : s) {",
      "358:             permissions.put(p, userSpec);",
      "359:         }",
      "360:         AuthorizationMatrixProperty property = new AuthorizationMatrixProperty(permissions);",
      "361:         job.addProperty(property);",
      "362:     }",
      "367:     private static class NoInheritanceProjectMatrixAuthorizationStrategy extends ProjectMatrixAuthorizationStrategy {",
      "369:         @Override",
      "370:         public ACL getACL(Job<?, ?> project) {",
      "371:             AuthorizationMatrixProperty amp = project.getProperty(AuthorizationMatrixProperty.class);",
      "372:             if (amp != null) {",
      "373:                 return amp.getACL().newInheritingACL(getRootACL());",
      "374:             } else {",
      "375:                 return getRootACL();",
      "376:             }",
      "377:         }",
      "378:     }",
      "379: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f82e5fa9491f8210c44ee7b6bac423689810ae1d",
      "candidate_info": {
        "commit_hash": "f82e5fa9491f8210c44ee7b6bac423689810ae1d",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/f82e5fa9491f8210c44ee7b6bac423689810ae1d",
        "files": [
          "core/src/main/java/hudson/model/Fingerprint.java"
        ],
        "message": "Jenkins.getInstance() is safe to assume non-null\n\n- Only ever called after extensions are on the classpath and before termination",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/Fingerprint.java||core/src/main/java/hudson/model/Fingerprint.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/model/Fingerprint.java||core/src/main/java/hudson/model/Fingerprint.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/model/Fingerprint.java||core/src/main/java/hudson/model/Fingerprint.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/Fingerprint.java||core/src/main/java/hudson/model/Fingerprint.java": [
          "File: core/src/main/java/hudson/model/Fingerprint.java -> core/src/main/java/hudson/model/Fingerprint.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:         private boolean hasPermissionToDiscoverBuild() {",
          "133:                 return true;",
          "134:             }",
          "",
          "[Removed Lines]",
          "131:             final Jenkins instance = Jenkins.getInstanceOrNull();",
          "132:             if (instance != null && instance.hasPermission(Jenkins.ADMINISTER)) {",
          "",
          "[Added Lines]",
          "131:             final Jenkins instance = Jenkins.getInstance();",
          "132:             if (instance.hasPermission(Jenkins.ADMINISTER)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "941:     @Exported(name=\"usage\")",
          "942:     public @Nonnull List<RangeItem> _getUsages() {",
          "943:         List<RangeItem> r = new ArrayList<RangeItem>();",
          "949:         for (Entry<String, RangeSet> e : usages.entrySet()) {",
          "950:             final String itemName = e.getKey();",
          "951:             if (instance.hasPermission(Jenkins.ADMINISTER) || canDiscoverItem(itemName)) {",
          "",
          "[Removed Lines]",
          "944:         final Jenkins instance = Jenkins.getInstanceOrNull();",
          "945:         if (instance == null) {",
          "946:             return r;",
          "947:         }",
          "",
          "[Added Lines]",
          "944:         final Jenkins instance = Jenkins.getInstance();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1370:     private static boolean canDiscoverItem(@Nonnull final String fullName) {",
          "1377:         Item item = null;",
          "1378:         try {",
          "",
          "[Removed Lines]",
          "1371:         final Jenkins jenkins = Jenkins.getInstanceOrNull();",
          "1372:         if (jenkins == null) {",
          "1373:             return false;",
          "1374:         }",
          "",
          "[Added Lines]",
          "1367:         final Jenkins jenkins = Jenkins.getInstance();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0203504a2cc39b5c1b92495c5f7aefe6ad403c22",
      "candidate_info": {
        "commit_hash": "0203504a2cc39b5c1b92495c5f7aefe6ad403c22",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/0203504a2cc39b5c1b92495c5f7aefe6ad403c22",
        "files": [
          "core/src/main/java/hudson/PluginManager.java",
          "core/src/main/java/hudson/WebAppMain.java",
          "core/src/main/java/hudson/cli/handlers/GenericItemOptionHandler.java",
          "core/src/main/java/hudson/model/Fingerprint.java",
          "core/src/main/java/hudson/model/ListView.java",
          "core/src/main/java/hudson/security/ACL.java",
          "core/src/main/java/hudson/security/ACLContext.java",
          "core/src/main/java/hudson/tasks/BuildTrigger.java",
          "core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java",
          "test/src/test/java/hudson/model/FingerprintTest.java",
          "test/src/test/java/hudson/model/ListViewTest.java",
          "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
        ],
        "message": "[FIXED JENKINS-36494] Switch to a try with resources form of impersonation",
        "before_after_code_files": [
          "core/src/main/java/hudson/PluginManager.java||core/src/main/java/hudson/PluginManager.java",
          "core/src/main/java/hudson/WebAppMain.java||core/src/main/java/hudson/WebAppMain.java",
          "core/src/main/java/hudson/cli/handlers/GenericItemOptionHandler.java||core/src/main/java/hudson/cli/handlers/GenericItemOptionHandler.java",
          "core/src/main/java/hudson/model/Fingerprint.java||core/src/main/java/hudson/model/Fingerprint.java",
          "core/src/main/java/hudson/model/ListView.java||core/src/main/java/hudson/model/ListView.java",
          "core/src/main/java/hudson/security/ACL.java||core/src/main/java/hudson/security/ACL.java",
          "core/src/main/java/hudson/security/ACLContext.java||core/src/main/java/hudson/security/ACLContext.java",
          "core/src/main/java/hudson/tasks/BuildTrigger.java||core/src/main/java/hudson/tasks/BuildTrigger.java",
          "core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java||core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java",
          "test/src/test/java/hudson/model/FingerprintTest.java||test/src/test/java/hudson/model/FingerprintTest.java",
          "test/src/test/java/hudson/model/ListViewTest.java||test/src/test/java/hudson/model/ListViewTest.java",
          "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/model/Fingerprint.java||core/src/main/java/hudson/model/Fingerprint.java",
            "test/src/test/java/hudson/model/FingerprintTest.java||test/src/test/java/hudson/model/FingerprintTest.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/model/Fingerprint.java||core/src/main/java/hudson/model/Fingerprint.java",
            "test/src/test/java/hudson/model/FingerprintTest.java||test/src/test/java/hudson/model/FingerprintTest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/PluginManager.java||core/src/main/java/hudson/PluginManager.java": [
          "File: core/src/main/java/hudson/PluginManager.java -> core/src/main/java/hudson/PluginManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package hudson;",
          "26: import edu.umd.cs.findbugs.annotations.NonNull;",
          "27: import jenkins.util.SystemProperties;",
          "28: import hudson.PluginWrapper.Dependency;",
          "29: import hudson.init.InitMilestone;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import hudson.security.ACLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1352:                     }",
          "1353:                     updateCenter.persistInstallStatus();",
          "1354:                     if(!failures) {",
          "1361:                     }",
          "1362:                 }",
          "1363:             }.start();",
          "",
          "[Removed Lines]",
          "1355:                         ACL.impersonate(currentAuth, new Runnable() {",
          "1356:                             @Override",
          "1357:                             public void run() {",
          "1358:                                 InstallUtil.proceedToNextStateFrom(InstallState.INITIAL_PLUGINS_INSTALLING);",
          "1359:                             }",
          "1360:                         });",
          "",
          "[Added Lines]",
          "1356:                         try (ACLContext _ = ACL.as(currentAuth)) {",
          "1357:                             InstallUtil.proceedToNextStateFrom(InstallState.INITIAL_PLUGINS_INSTALLING);",
          "1358:                         }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/WebAppMain.java||core/src/main/java/hudson/WebAppMain.java": [
          "File: core/src/main/java/hudson/WebAppMain.java -> core/src/main/java/hudson/WebAppMain.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package hudson;",
          "26: import jenkins.util.SystemProperties;",
          "27: import com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider;",
          "28: import com.thoughtworks.xstream.core.JVM;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import hudson.security.ACLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59: import java.io.File;",
          "60: import java.io.FileOutputStream;",
          "61: import java.io.IOException;",
          "63: import java.net.URL;",
          "64: import java.net.URLClassLoader;",
          "65: import java.util.Date;",
          "",
          "[Removed Lines]",
          "62: import java.lang.reflect.Method;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "370:     }",
          "372:     public void contextDestroyed(ServletContextEvent event) {",
          "392:         } finally {",
          "393:             JenkinsJVMAccess._setJenkinsJVM(false);",
          "394:         }",
          "",
          "[Removed Lines]",
          "373:         try {",
          "374:             ACL.impersonate(ACL.SYSTEM, new Runnable() {",
          "375:                 @Override",
          "376:                 public void run() {",
          "377:                     terminated = true;",
          "378:                     Jenkins instance = Jenkins.getInstanceOrNull();",
          "379:                     if (instance != null)",
          "380:                         instance.cleanUp();",
          "381:                     Thread t = initThread;",
          "382:                     if (t != null && t.isAlive()) {",
          "383:                         LOGGER.log(Level.INFO, \"Shutting down a Jenkins instance that was still starting up\", new Throwable(\"reason\"));",
          "384:                         t.interrupt();",
          "385:                     }",
          "389:                     Logger.getLogger(\"\").removeHandler(handler);",
          "390:                 }",
          "391:             });",
          "",
          "[Added Lines]",
          "373:         try (ACLContext old = ACL.as(ACL.SYSTEM)) {",
          "374:             terminated = true;",
          "375:             Jenkins instance = Jenkins.getInstanceOrNull();",
          "376:             if (instance != null)",
          "377:                 instance.cleanUp();",
          "378:             Thread t = initThread;",
          "379:             if (t != null && t.isAlive()) {",
          "380:                 LOGGER.log(Level.INFO, \"Shutting down a Jenkins instance that was still starting up\", new Throwable(\"reason\"));",
          "381:                 t.interrupt();",
          "382:             }",
          "386:             Logger.getLogger(\"\").removeHandler(handler);",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/cli/handlers/GenericItemOptionHandler.java||core/src/main/java/hudson/cli/handlers/GenericItemOptionHandler.java": [
          "File: core/src/main/java/hudson/cli/handlers/GenericItemOptionHandler.java -> core/src/main/java/hudson/cli/handlers/GenericItemOptionHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import hudson.model.Item;",
          "28: import hudson.model.Items;",
          "29: import hudson.security.ACL;",
          "30: import java.util.logging.Level;",
          "31: import java.util.logging.Logger;",
          "32: import jenkins.model.Jenkins;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import hudson.security.ACLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:         T s = j.getItemByFullName(src, type());",
          "62:         if (s == null) {",
          "63:             final Authentication who = Jenkins.getAuthentication();",
          "72:                 }",
          "74:             T nearest = Items.findNearest(type(), src, j);",
          "75:             if (nearest != null) {",
          "76:                 throw new IllegalArgumentException(\"No such job '\" + src + \"'; perhaps you meant '\" + nearest.getFullName() + \"'?\");",
          "",
          "[Removed Lines]",
          "64:             ACL.impersonate(ACL.SYSTEM, new Runnable() {",
          "65:                 @Override public void run() {",
          "66:                     Item actual = j.getItemByFullName(src);",
          "67:                     if (actual == null) {",
          "68:                         LOGGER.log(Level.FINE, \"really no item exists named {0}\", src);",
          "69:                     } else {",
          "70:                         LOGGER.log(Level.WARNING, \"running as {0} could not find {1} of {2}\", new Object[] {who.getPrincipal(), actual, type()});",
          "71:                     }",
          "73:             });",
          "",
          "[Added Lines]",
          "65:             try (ACLContext _ = ACL.as(ACL.SYSTEM)) {",
          "66:                 Item actual = j.getItemByFullName(src);",
          "67:                 if (actual == null) {",
          "68:                     LOGGER.log(Level.FINE, \"really no item exists named {0}\", src);",
          "69:                 } else {",
          "70:                     LOGGER.log(Level.WARNING, \"running as {0} could not find {1} of {2}\", new Object[] {who.getPrincipal(), actual, type()});",
          "72:             }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/Fingerprint.java||core/src/main/java/hudson/model/Fingerprint.java": [
          "File: core/src/main/java/hudson/model/Fingerprint.java -> core/src/main/java/hudson/model/Fingerprint.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import com.google.common.collect.ImmutableList;",
          "27: import com.infradna.tool.bridge_method_injector.WithBridgeMethods;",
          "29: import com.thoughtworks.xstream.converters.Converter;",
          "30: import com.thoughtworks.xstream.converters.MarshallingContext;",
          "31: import com.thoughtworks.xstream.converters.UnmarshallingContext;",
          "",
          "[Removed Lines]",
          "28: import com.thoughtworks.xstream.XStream;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: import hudson.model.listeners.ItemListener;",
          "41: import hudson.model.listeners.SaveableListener;",
          "42: import hudson.security.ACL;",
          "43: import hudson.util.AtomicFileWriter;",
          "44: import hudson.util.HexBinaryConverter;",
          "45: import hudson.util.Iterators;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: import hudson.security.ACLContext;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "822:     public static final class ProjectRenameListener extends ItemListener {",
          "823:         @Override",
          "824:         public void onLocationChanged(final Item item, final String oldName, final String newName) {",
          "830:         }",
          "831:         private void locationChanged(Item item, String oldName, String newName) {",
          "832:             if (item instanceof AbstractProject) {",
          "",
          "[Removed Lines]",
          "825:             ACL.impersonate(ACL.SYSTEM, new Runnable() {",
          "826:                 @Override public void run() {",
          "827:                     locationChanged(item, oldName, newName);",
          "828:                 }",
          "829:             });",
          "",
          "[Added Lines]",
          "825:             try (ACLContext _ = ACL.as(ACL.SYSTEM)) {",
          "826:                 locationChanged(item, oldName, newName);",
          "827:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1439:         final Authentication userAuth = Jenkins.getAuthentication();",
          "1463:                         }",
          "1467:             }",
          "1470:     }",
          "1472:     private static final XStream2 XSTREAM = new XStream2();",
          "",
          "[Removed Lines]",
          "1440:         final boolean[] res = new boolean[] {false};",
          "1441:         ACL.impersonate(ACL.SYSTEM, new Runnable() {",
          "1442:             @Override",
          "1443:             public void run() {",
          "1444:                 final Item itemBySystemUser = jenkins.getItemByFullName(fullName);",
          "1445:                 if (itemBySystemUser == null) {",
          "1446:                     return;",
          "1447:                 }",
          "1451:                 boolean canDiscoverTheItem = itemBySystemUser.getACL().hasPermission(userAuth, Item.DISCOVER);",
          "1452:                 if (canDiscoverTheItem) {",
          "1453:                     ItemGroup<?> current = itemBySystemUser.getParent();",
          "1454:                     do {",
          "1455:                         if (current instanceof Item) {",
          "1456:                             final Item item = (Item) current;",
          "1457:                             current = item.getParent();",
          "1458:                             if (!item.getACL().hasPermission(userAuth, Item.READ)) {",
          "1459:                                 canDiscoverTheItem = false;",
          "1460:                             }",
          "1461:                         } else {",
          "1462:                             current = null;",
          "1464:                     } while (canDiscoverTheItem && current != null);",
          "1465:                 }",
          "1466:                 res[0] = canDiscoverTheItem;",
          "1468:         });",
          "1469:         return res[0];",
          "",
          "[Added Lines]",
          "1438:         try (ACLContext _ = ACL.as(ACL.SYSTEM)) {",
          "1439:             final Item itemBySystemUser = jenkins.getItemByFullName(fullName);",
          "1440:             if (itemBySystemUser == null) {",
          "1441:                 return false;",
          "1442:             }",
          "1446:             boolean canDiscoverTheItem = itemBySystemUser.getACL().hasPermission(userAuth, Item.DISCOVER);",
          "1447:             if (canDiscoverTheItem) {",
          "1448:                 ItemGroup<?> current = itemBySystemUser.getParent();",
          "1449:                 do {",
          "1450:                     if (current instanceof Item) {",
          "1451:                         final Item i = (Item) current;",
          "1452:                         current = i.getParent();",
          "1453:                         if (!i.getACL().hasPermission(userAuth, Item.READ)) {",
          "1454:                             canDiscoverTheItem = false;",
          "1456:                     } else {",
          "1457:                         current = null;",
          "1458:                     }",
          "1459:                 } while (canDiscoverTheItem && current != null);",
          "1461:             return canDiscoverTheItem;",
          "1462:         }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/ListView.java||core/src/main/java/hudson/model/ListView.java": [
          "File: core/src/main/java/hudson/model/ListView.java -> core/src/main/java/hudson/model/ListView.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import hudson.model.Descriptor.FormException;",
          "31: import hudson.model.listeners.ItemListener;",
          "32: import hudson.security.ACL;",
          "33: import hudson.util.CaseInsensitiveComparator;",
          "34: import hudson.util.DescribableList;",
          "35: import hudson.util.FormValidation;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import hudson.security.ACLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "441:     }",
          "443:     @Restricted(NoExternalUse.class)",
          "451:         }",
          "452:         private void locationChanged(Item item, String oldFullName, String newFullName) {",
          "453:             final Jenkins jenkins = Jenkins.getInstance();",
          "",
          "[Removed Lines]",
          "444:     @Extension public static final class Listener extends ItemListener {",
          "445:         @Override public void onLocationChanged(final Item item, final String oldFullName, final String newFullName) {",
          "446:             ACL.impersonate(ACL.SYSTEM, new Runnable() {",
          "447:                 @Override public void run() {",
          "448:                     locationChanged(item, oldFullName, newFullName);",
          "449:                 }",
          "450:             });",
          "",
          "[Added Lines]",
          "445:     @Extension",
          "446:     public static final class Listener extends ItemListener {",
          "447:         @Override",
          "448:         public void onLocationChanged(final Item item, final String oldFullName, final String newFullName) {",
          "449:             try (ACLContext _ = ACL.as(ACL.SYSTEM)) {",
          "450:                 locationChanged(item, oldFullName, newFullName);",
          "451:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "487:             }",
          "488:         }",
          "496:         }",
          "497:         private void deleted(Item item) {",
          "498:             final Jenkins jenkins = Jenkins.getInstance();",
          "",
          "[Removed Lines]",
          "490:         @Override public void onDeleted(final Item item) {",
          "491:             ACL.impersonate(ACL.SYSTEM, new Runnable() {",
          "492:                 @Override public void run() {",
          "493:                     deleted(item);",
          "494:                 }",
          "495:             });",
          "",
          "[Added Lines]",
          "491:         @Override",
          "492:         public void onDeleted(final Item item) {",
          "493:             try (ACLContext _ = ACL.as(ACL.SYSTEM)) {",
          "494:                 deleted(item);",
          "495:             }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/security/ACL.java||core/src/main/java/hudson/security/ACL.java": [
          "File: core/src/main/java/hudson/security/ACL.java -> core/src/main/java/hudson/security/ACL.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package hudson.security;",
          "26: import javax.annotation.Nonnull;",
          "28: import hudson.model.Item;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import hudson.model.User;",
          "27: import javax.annotation.CheckForNull;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183:     public static @Nonnull SecurityContext impersonate(@Nonnull Authentication auth) {",
          "184:         SecurityContext old = SecurityContextHolder.getContext();",
          "185:         SecurityContextHolder.setContext(new NonSerializableSecurityContext(auth));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:     @Deprecated",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195:     public static void impersonate(@Nonnull Authentication auth, @Nonnull Runnable body) {",
          "196:         SecurityContext old = impersonate(auth);",
          "197:         try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200:     @Deprecated",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "210:     public static <V,T extends Exception> V impersonate(Authentication auth, Callable<V,T> body) throws T {",
          "211:         SecurityContext old = impersonate(auth);",
          "212:         try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:     @Deprecated",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "216:         }",
          "217:     }",
          "219: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:     @Nonnull",
          "243:     public static ACLContext as(@Nonnull Authentication auth) {",
          "244:         final ACLContext context = new ACLContext(SecurityContextHolder.getContext());",
          "245:         SecurityContextHolder.setContext(new NonSerializableSecurityContext(auth));",
          "246:         return context;",
          "247:     }",
          "265:     @Nonnull",
          "266:     public static ACLContext as(@CheckForNull User user) {",
          "267:         return as(user == null ? Jenkins.ANONYMOUS : user.impersonate());",
          "268:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/security/ACLContext.java||core/src/main/java/hudson/security/ACLContext.java": [
          "File: core/src/main/java/hudson/security/ACLContext.java -> core/src/main/java/hudson/security/ACLContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: package hudson.security;",
          "26: import javax.annotation.CheckForNull;",
          "27: import org.acegisecurity.Authentication;",
          "28: import org.acegisecurity.context.SecurityContext;",
          "29: import org.acegisecurity.context.SecurityContextHolder;",
          "36: public class ACLContext implements AutoCloseable {",
          "41:     private final SecurityContext previousContext;",
          "47:     ACLContext(SecurityContext previousContext) {",
          "48:         this.previousContext = previousContext;",
          "49:     }",
          "55:     @CheckForNull",
          "56:     public SecurityContext getPreviousContext() {",
          "57:         return previousContext;",
          "58:     }",
          "61:     @Override",
          "62:     public void close() {",
          "63:         SecurityContextHolder.setContext(previousContext);",
          "64:     }",
          "65: }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/tasks/BuildTrigger.java||core/src/main/java/hudson/tasks/BuildTrigger.java": [
          "File: core/src/main/java/hudson/tasks/BuildTrigger.java -> core/src/main/java/hudson/tasks/BuildTrigger.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: import hudson.model.listeners.ItemListener;",
          "47: import hudson.model.queue.Tasks;",
          "48: import hudson.security.ACL;",
          "49: import hudson.util.FormValidation;",
          "50: import java.io.IOException;",
          "51: import java.io.PrintStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: import hudson.security.ACLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "412:         public static class ItemListenerImpl extends ItemListener {",
          "413:             @Override",
          "414:             public void onLocationChanged(final Item item, final String oldFullName, final String newFullName) {",
          "420:             }",
          "421:             private void locationChanged(Item item, String oldFullName, String newFullName) {",
          "",
          "[Removed Lines]",
          "415:                 ACL.impersonate(ACL.SYSTEM, new Runnable() {",
          "416:                     @Override public void run() {",
          "417:                         locationChanged(item, oldFullName, newFullName);",
          "418:                     }",
          "419:                 });",
          "",
          "[Added Lines]",
          "416:                 try (ACLContext _ = ACL.as(ACL.SYSTEM)) {",
          "417:                     locationChanged(item, oldFullName, newFullName);",
          "418:                 }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java||core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java": [
          "File: core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java -> core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: import hudson.model.listeners.RunListener;",
          "48: import hudson.model.queue.Tasks;",
          "49: import hudson.security.ACL;",
          "50: import hudson.tasks.BuildTrigger;",
          "51: import hudson.triggers.Trigger;",
          "52: import hudson.triggers.TriggerDescriptor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: import hudson.security.ACLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213:         }",
          "215:         private Map<Job,Collection<ReverseBuildTrigger>> calculateCache() {",
          "224:                         }",
          "238:                         }",
          "239:                     }",
          "240:                 }",
          "243:         }",
          "245:         @Override public void onCompleted(@Nonnull Run r, @Nonnull TaskListener listener) {",
          "",
          "[Removed Lines]",
          "216:             final Map<Job,Collection<ReverseBuildTrigger>> result = new WeakHashMap<>();",
          "217:             ACL.impersonate(ACL.SYSTEM, new Runnable() {",
          "218:                 @Override",
          "219:                 public void run() {",
          "220:                     for (Job<?, ?> downstream : Jenkins.getInstance().getAllItems(Job.class)) {",
          "221:                         ReverseBuildTrigger trigger = ParameterizedJobMixIn.getTrigger(downstream, ReverseBuildTrigger.class);",
          "222:                         if (trigger == null) {",
          "223:                             continue;",
          "225:                         List<Job> upstreams = Items.fromNameList(downstream.getParent(), trigger.upstreamProjects, Job.class);",
          "226:                         LOGGER.log(Level.FINE, \"from {0} see upstreams {1}\", new Object[] {downstream, upstreams});",
          "227:                         for (Job upstream : upstreams) {",
          "228:                             if (upstream instanceof AbstractProject && downstream instanceof AbstractProject) {",
          "229:                                 continue; // handled specially",
          "230:                             }",
          "231:                             Collection<ReverseBuildTrigger> triggers = result.get(upstream);",
          "232:                             if (triggers == null) {",
          "233:                                 triggers = new LinkedList<>();",
          "234:                                 result.put(upstream, triggers);",
          "235:                             }",
          "236:                             triggers.remove(trigger);",
          "237:                             triggers.add(trigger);",
          "241:             });",
          "242:             return result;",
          "",
          "[Added Lines]",
          "217:             try (ACLContext _ = ACL.as(ACL.SYSTEM)) {",
          "218:                 final Map<Job, Collection<ReverseBuildTrigger>> result = new WeakHashMap<>();",
          "219:                 for (Job<?, ?> downstream : Jenkins.getInstance().getAllItems(Job.class)) {",
          "220:                     ReverseBuildTrigger trigger =",
          "221:                             ParameterizedJobMixIn.getTrigger(downstream, ReverseBuildTrigger.class);",
          "222:                     if (trigger == null) {",
          "223:                         continue;",
          "224:                     }",
          "225:                     List<Job> upstreams =",
          "226:                             Items.fromNameList(downstream.getParent(), trigger.upstreamProjects, Job.class);",
          "227:                     LOGGER.log(Level.FINE, \"from {0} see upstreams {1}\", new Object[]{downstream, upstreams});",
          "228:                     for (Job upstream : upstreams) {",
          "229:                         if (upstream instanceof AbstractProject && downstream instanceof AbstractProject) {",
          "230:                             continue; // handled specially",
          "232:                         Collection<ReverseBuildTrigger> triggers = result.get(upstream);",
          "233:                         if (triggers == null) {",
          "234:                             triggers = new LinkedList<>();",
          "235:                             result.put(upstream, triggers);",
          "237:                         triggers.remove(trigger);",
          "238:                         triggers.add(trigger);",
          "241:                 return result;",
          "242:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "271:         }",
          "272:     }",
          "290:                             }",
          "291:                         }",
          "292:                     }",
          "293:                 }",
          "295:         }",
          "296:     }",
          "297: }",
          "",
          "[Removed Lines]",
          "274:     @Extension public static class ItemListenerImpl extends ItemListener {",
          "275:         @Override public void onLocationChanged(Item item, final String oldFullName, final String newFullName) {",
          "276:             ACL.impersonate(ACL.SYSTEM, new Runnable() {",
          "277:                 @Override",
          "278:                 public void run() {",
          "279:                     for (Job<?, ?> p : Jenkins.getInstance().getAllItems(Job.class)) {",
          "280:                         ReverseBuildTrigger t = ParameterizedJobMixIn.getTrigger(p, ReverseBuildTrigger.class);",
          "281:                         if (t != null) {",
          "282:                             String revised = Items.computeRelativeNamesAfterRenaming(oldFullName, newFullName, t.upstreamProjects, p.getParent());",
          "283:                             if (!revised.equals(t.upstreamProjects)) {",
          "284:                                 t.upstreamProjects = revised;",
          "285:                                 try {",
          "286:                                     p.save();",
          "287:                                 } catch (IOException e) {",
          "288:                                     LOGGER.log(Level.WARNING, \"Failed to persist project setting during rename from \" + oldFullName + \" to \" + newFullName, e);",
          "289:                                 }",
          "294:             });",
          "",
          "[Added Lines]",
          "274:     @Extension",
          "275:     public static class ItemListenerImpl extends ItemListener {",
          "276:         @Override",
          "277:         public void onLocationChanged(Item item, final String oldFullName, final String newFullName) {",
          "278:             try (ACLContext _ = ACL.as(ACL.SYSTEM)) {",
          "279:                 for (Job<?, ?> p : Jenkins.getInstance().getAllItems(Job.class)) {",
          "280:                     ReverseBuildTrigger t = ParameterizedJobMixIn.getTrigger(p, ReverseBuildTrigger.class);",
          "281:                     if (t != null) {",
          "282:                         String revised =",
          "283:                                 Items.computeRelativeNamesAfterRenaming(oldFullName, newFullName, t.upstreamProjects,",
          "284:                                         p.getParent());",
          "285:                         if (!revised.equals(t.upstreamProjects)) {",
          "286:                             t.upstreamProjects = revised;",
          "287:                             try {",
          "288:                                 p.save();",
          "289:                             } catch (IOException e) {",
          "290:                                 LOGGER.log(Level.WARNING,",
          "291:                                         \"Failed to persist project setting during rename from \" + oldFullName + \" to \"",
          "292:                                                 + newFullName, e);",
          "297:             }",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/FingerprintTest.java||test/src/test/java/hudson/model/FingerprintTest.java": [
          "File: test/src/test/java/hudson/model/FingerprintTest.java -> test/src/test/java/hudson/model/FingerprintTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package hudson.model;",
          "26: import hudson.security.ACL;",
          "27: import hudson.security.AuthorizationMatrixProperty;",
          "28: import hudson.security.Permission;",
          "29: import hudson.security.ProjectMatrixAuthorizationStrategy;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import hudson.security.ACLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:         setupProjectMatrixAuthStrategy(Jenkins.READ);",
          "141:         setJobPermissionsOnce(project1, \"user1\", Item.READ, Item.DISCOVER);",
          "142:         setJobPermissionsOnce(project2, \"user2\", Item.READ, Item.DISCOVER);",
          "173:     }",
          "175:     @Test",
          "",
          "[Removed Lines]",
          "144:         ACL.impersonate(user1.impersonate(), new Runnable() {",
          "145:             @Override",
          "146:             public void run() {",
          "147:                 Fingerprint.BuildPtr original = fp.getOriginal();",
          "148:                 assertThat(\"user1 should be able to see the origin\", fp.getOriginal(), notNullValue());",
          "149:                 assertEquals(\"user1 should be able to see the origin's project name\", project1.getName(), original.getName());",
          "150:                 assertEquals(\"user1 should be able to see the origin's build number\", build.getNumber(), original.getNumber());",
          "151:                 assertEquals(\"Only one usage should be visible to user1\", 1, fp._getUsages().size());",
          "152:                 assertEquals(\"Only project1 should be visible to user1\", project1.getFullName(), fp._getUsages().get(0).name);",
          "153:             }",
          "154:         });",
          "156:         ACL.impersonate(user2.impersonate(), new Runnable() {",
          "157:             @Override",
          "158:             public void run() {",
          "159:                 assertThat(\"user2 should be unable to see the origin\", fp.getOriginal(), nullValue());",
          "160:                 assertEquals(\"Only one usage should be visible to user2\", 1, fp._getUsages().size());",
          "161:                 assertEquals(\"Only project2 should be visible to user2\", project2.getFullName(), fp._getUsages().get(0).name);",
          "162:             }",
          "163:         });",
          "165:         ACL.impersonate(user3.impersonate(), new Runnable() {",
          "166:             @Override",
          "167:             public void run() {",
          "168:                 Fingerprint.BuildPtr original = fp.getOriginal();",
          "169:                 assertThat(\"user3 should be unable to see the origin\", fp.getOriginal(), nullValue());",
          "170:                 assertEquals(\"All usages should be invisible for user3\", 0, fp._getUsages().size());",
          "171:             }",
          "172:         });",
          "",
          "[Added Lines]",
          "145:         try (ACLContext _ = ACL.as(user1)) {",
          "146:             Fingerprint.BuildPtr original = fp.getOriginal();",
          "147:             assertThat(\"user1 should be able to see the origin\", fp.getOriginal(), notNullValue());",
          "148:             assertEquals(\"user1 should be able to see the origin's project name\", project1.getName(), original.getName());",
          "149:             assertEquals(\"user1 should be able to see the origin's build number\", build.getNumber(), original.getNumber());",
          "150:             assertEquals(\"Only one usage should be visible to user1\", 1, fp._getUsages().size());",
          "151:             assertEquals(\"Only project1 should be visible to user1\", project1.getFullName(), fp._getUsages().get(0).name);",
          "152:         }",
          "154:         try (ACLContext _ = ACL.as(user2)) {",
          "155:             assertThat(\"user2 should be unable to see the origin\", fp.getOriginal(), nullValue());",
          "156:             assertEquals(\"Only one usage should be visible to user2\", 1, fp._getUsages().size());",
          "157:             assertEquals(\"Only project2 should be visible to user2\", project2.getFullName(), fp._getUsages().get(0).name);",
          "158:         }",
          "160:         try (ACLContext _ = ACL.as(user3)) {",
          "161:             Fingerprint.BuildPtr original = fp.getOriginal();",
          "162:             assertThat(\"user3 should be unable to see the origin\", fp.getOriginal(), nullValue());",
          "163:             assertEquals(\"All usages should be invisible for user3\", 0, fp._getUsages().size());",
          "164:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "183:         User user1 = User.get(\"user1\");",
          "184:         setupProjectMatrixAuthStrategy(Jenkins.READ, Item.DISCOVER);",
          "196:     }",
          "198:     @Test",
          "",
          "[Removed Lines]",
          "186:         ACL.impersonate(user1.impersonate(), new Runnable() {",
          "187:             @Override",
          "188:             public void run() {",
          "189:                 Fingerprint.BuildPtr original = fingerprint.getOriginal();",
          "190:                 assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());",
          "191:                 assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());",
          "192:                 assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());",
          "193:                 assertEquals(\"Usage ref in fingerprint should be visible to user1\", 1, fingerprint._getUsages().size());",
          "194:             }",
          "195:         });",
          "",
          "[Added Lines]",
          "178:         try (ACLContext _ = ACL.as(user1)) {",
          "179:             Fingerprint.BuildPtr original = fingerprint.getOriginal();",
          "180:             assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());",
          "181:             assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());",
          "182:             assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());",
          "183:             assertEquals(\"Usage ref in fingerprint should be visible to user1\", 1, fingerprint._getUsages().size());",
          "184:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "209:         folder.setPermissions(\"user1\", Item.READ);",
          "226:     }",
          "228:     @Test",
          "",
          "[Removed Lines]",
          "212:         ACL.impersonate(user1.impersonate(), new Runnable() {",
          "213:             @Override",
          "214:             public void run() {",
          "215:                 assertTrue(\"Test framework issue: User1 should be able to read the folder\", folder.hasPermission(Item.READ));",
          "217:                 Fingerprint.BuildPtr original = fingerprint.getOriginal();",
          "218:                 assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());",
          "219:                 assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());",
          "220:                 assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());",
          "221:                 assertEquals(\"user1 should be able to see the job\", 1, fingerprint._getUsages().size());",
          "223:                 assertThat(\"User should be unable do retrieve the job due to the missing read\", original.getJob(), nullValue());",
          "224:             }",
          "225:         });",
          "",
          "[Added Lines]",
          "201:         try (ACLContext _ = ACL.as(user1)) {",
          "202:             assertTrue(\"Test framework issue: User1 should be able to read the folder\", folder.hasPermission(Item.READ));",
          "204:             Fingerprint.BuildPtr original = fingerprint.getOriginal();",
          "205:             assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());",
          "206:             assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());",
          "207:             assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());",
          "208:             assertEquals(\"user1 should be able to see the job\", 1, fingerprint._getUsages().size());",
          "210:             assertThat(\"User should be unable do retrieve the job due to the missing read\", original.getJob(), nullValue());",
          "211:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "237:         setupProjectMatrixAuthStrategy(Jenkins.READ, Item.DISCOVER);",
          "248:     }",
          "",
          "[Removed Lines]",
          "240:         ACL.impersonate(user1.impersonate(), new Runnable() {",
          "241:             @Override",
          "242:             public void run() {",
          "243:                 assertFalse(\"Test framework issue: User1 should be unable to read the folder\", folder.hasPermission(Item.READ));",
          "244:                 assertThat(\"user1 should be unable to see the origin\", fingerprint.getOriginal(), nullValue());",
          "245:                 assertEquals(\"No jobs should be visible to user1\", 0, fingerprint._getUsages().size());",
          "246:             }",
          "247:         });",
          "",
          "[Added Lines]",
          "226:         try (ACLContext _ = ACL.as(user1)) {",
          "227:             assertFalse(\"Test framework issue: User1 should be unable to read the folder\", folder.hasPermission(Item.READ));",
          "228:             assertThat(\"user1 should be unable to see the origin\", fingerprint.getOriginal(), nullValue());",
          "229:             assertEquals(\"No jobs should be visible to user1\", 0, fingerprint._getUsages().size());",
          "230:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "264:         User user1 = User.get(\"user1\");",
          "265:         setupProjectMatrixAuthStrategy(Jenkins.READ, Item.READ, Item.DISCOVER);",
          "266:         project.delete();",
          "275:     }",
          "277:     @Test",
          "",
          "[Removed Lines]",
          "268:         ACL.impersonate(user1.impersonate(), new Runnable() {",
          "269:             @Override",
          "270:             public void run() {",
          "271:                 assertThat(\"user1 should be unable to see the origin\", fp.getOriginal(), nullValue());",
          "272:                 assertEquals(\"No jobs should be visible to user1\", 0, fp._getUsages().size());",
          "273:             }",
          "274:         });",
          "",
          "[Added Lines]",
          "251:         try (ACLContext _ = ACL.as(user1)) {",
          "252:             assertThat(\"user1 should be unable to see the origin\", fp.getOriginal(), nullValue());",
          "253:             assertEquals(\"No jobs should be visible to user1\", 0, fp._getUsages().size());",
          "254:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "285:         User user1 = User.get(\"user1\");",
          "286:         setupProjectMatrixAuthStrategy(Jenkins.ADMINISTER);",
          "287:         project.delete();",
          "300:     }",
          "302:     @Nonnull",
          "",
          "[Removed Lines]",
          "289:         ACL.impersonate(user1.impersonate(), new Runnable() {",
          "290:             @Override",
          "291:             public void run() {",
          "292:                 Fingerprint.BuildPtr original = fingerprint.getOriginal();",
          "293:                 assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());",
          "294:                 assertThat(\"Job has been deleted, so Job reference shoud return null\", fingerprint.getOriginal().getJob(), nullValue());",
          "295:                 assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());",
          "296:                 assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());",
          "297:                 assertEquals(\"user1 should be able to see the job in usages\", 1, fingerprint._getUsages().size());",
          "298:             }",
          "299:         });",
          "",
          "[Added Lines]",
          "269:         try (ACLContext _ = ACL.as(user1)) {",
          "270:             Fingerprint.BuildPtr original = fingerprint.getOriginal();",
          "271:             assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());",
          "272:             assertThat(\"Job has been deleted, so Job reference shoud return null\", fingerprint.getOriginal().getJob(), nullValue());",
          "273:             assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());",
          "274:             assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());",
          "275:             assertEquals(\"user1 should be able to see the job in usages\", 1, fingerprint._getUsages().size());",
          "276:         }",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/ListViewTest.java||test/src/test/java/hudson/model/ListViewTest.java": [
          "File: test/src/test/java/hudson/model/ListViewTest.java -> test/src/test/java/hudson/model/ListViewTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import hudson.matrix.MatrixProject;",
          "33: import hudson.matrix.TextAxis;",
          "34: import hudson.security.ACL;",
          "35: import hudson.security.AuthorizationStrategy;",
          "36: import hudson.security.Permission;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import hudson.security.ACLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:         ListView v = new ListView(\"v\", j.jenkins);",
          "220:         v.add(p);",
          "221:         j.jenkins.addView(v);",
          "231:         assertEquals(Collections.singletonList(p), v.getItems());",
          "232:     }",
          "233:     private static class AllButViewsAuthorizationStrategy extends AuthorizationStrategy {",
          "",
          "[Removed Lines]",
          "222:         ACL.impersonate(User.get(\"alice\").impersonate(), new Runnable() {",
          "223:             @Override public void run() {",
          "224:                 try {",
          "225:                     p.renameTo(\"p2\");",
          "226:                 } catch (IOException x) {",
          "227:                     throw new RuntimeException(x);",
          "228:                 }",
          "229:             }",
          "230:         });",
          "",
          "[Added Lines]",
          "223:         try (ACLContext _ = ACL.as(User.get(\"alice\"))) {",
          "224:             p.renameTo(\"p2\");",
          "225:         }",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java": [
          "File: test/src/test/java/jenkins/security/ApiTokenPropertyTest.java -> test/src/test/java/jenkins/security/ApiTokenPropertyTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import hudson.Util;",
          "19: import hudson.model.User;",
          "20: import hudson.security.ACL;",
          "21: import jenkins.model.Jenkins;",
          "22: import org.apache.http.Header;",
          "23: import org.apache.http.HttpEntity;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import hudson.security.ACLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:         final String token = t.getApiToken();",
          "79:         WebClient wc = createClientForUser(\"foo\");",
          "",
          "[Removed Lines]",
          "71:         ACL.impersonate(u.impersonate(), new Runnable() {",
          "72:             @Override",
          "73:             public void run() {",
          "74:                 assertEquals(\"User is unable to get its own token\", token, t.getApiToken());",
          "75:             }",
          "76:         });",
          "",
          "[Added Lines]",
          "72:         try (ACLContext _ = ACL.as(u)) {",
          "73:             assertEquals(\"User is unable to get its own token\", token, t.getApiToken());",
          "74:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "247:             }",
          "248:         });",
          "249:     }",
          "",
          "[Removed Lines]",
          "250: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}