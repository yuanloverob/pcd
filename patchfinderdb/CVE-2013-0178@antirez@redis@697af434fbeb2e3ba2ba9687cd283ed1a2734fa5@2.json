{
  "cve_id": "CVE-2013-0178",
  "cve_desc": "Insecure temporary file vulnerability in Redis before 2.6 related to /tmp/redis-%p.vm.",
  "repo": "antirez/redis",
  "patch_hash": "697af434fbeb2e3ba2ba9687cd283ed1a2734fa5",
  "patch_info": {
    "commit_hash": "697af434fbeb2e3ba2ba9687cd283ed1a2734fa5",
    "repo": "antirez/redis",
    "commit_url": "https://github.com/antirez/redis/commit/697af434fbeb2e3ba2ba9687cd283ed1a2734fa5",
    "files": [
      "src/diskstore.c",
      "src/networking.c",
      "src/redis.c",
      "src/redis.h"
    ],
    "message": "initial changes needed to turn the current VM code into a cache system. Tons of work to do still.",
    "before_after_code_files": [
      "src/diskstore.c||src/diskstore.c",
      "src/networking.c||src/networking.c",
      "src/redis.c||src/redis.c",
      "src/redis.h||src/redis.h"
    ]
  },
  "patch_diff": {
    "src/diskstore.c||src/diskstore.c": [
      "File: src/diskstore.c -> src/diskstore.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "68: int dsOpen(void) {",
      "69:     struct stat sb;",
      "70:     int retval;",
      "73:     if ((retval = stat(path,&sb) == -1) && errno != ENOENT) {",
      "74:         redisLog(REDIS_WARNING, \"Error opening disk store at %s: %s\",",
      "",
      "[Removed Lines]",
      "71:     char *path = server.diskstore_path;",
      "",
      "[Added Lines]",
      "80:     char *path = server.ds_path;",
      "",
      "---------------"
    ],
    "src/networking.c||src/networking.c": [
      "File: src/networking.c -> src/networking.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "168: void addReply(redisClient *c, robj *obj) {",
      "169:     if (_installWriteEvent(c) != REDIS_OK) return;",
      "",
      "[Removed Lines]",
      "170:     redisAssert(!server.vm_enabled || obj->storage == REDIS_VM_MEMORY);",
      "",
      "[Added Lines]",
      "170:     redisAssert(!server.ds_enabled || obj->storage == REDIS_VM_MEMORY);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "462:     if (c->flags & REDIS_IO_WAIT) {",
      "464:         if (listLength(c->io_keys) == 0) {",
      "465:             ln = listSearchKey(server.io_ready_clients,c);",
      "",
      "[Removed Lines]",
      "463:         redisAssert(server.vm_enabled);",
      "",
      "[Added Lines]",
      "463:         redisAssert(server.ds_enabled);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "474:                 dontWaitForSwappedKey(c,ln->value);",
      "475:             }",
      "476:         }",
      "478:     }",
      "479:     listRelease(c->io_keys);",
      "",
      "[Removed Lines]",
      "477:         server.vm_blocked_clients--;",
      "",
      "[Added Lines]",
      "477:         server.cache_blocked_clients--;",
      "",
      "---------------"
    ],
    "src/redis.c||src/redis.c": [
      "File: src/redis.c -> src/redis.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "619:     if (server.masterhost == NULL) activeExpireCycle();",
      "642:     }",
      "",
      "[Removed Lines]",
      "623:     if (vmCanSwapOut()) {",
      "624:         while (server.vm_enabled && zmalloc_used_memory() >",
      "625:                 server.vm_max_memory)",
      "626:         {",
      "627:             int retval = (server.vm_max_threads == 0) ?",
      "628:                         vmSwapOneObjectBlocking() :",
      "629:                         vmSwapOneObjectThreaded();",
      "630:             if (retval == REDIS_ERR && !(loops % 300) &&",
      "631:                 zmalloc_used_memory() >",
      "632:                 (server.vm_max_memory+server.vm_max_memory/10))",
      "633:             {",
      "634:                 redisLog(REDIS_WARNING,\"WARNING: vm-max-memory limit exceeded by more than 10%% but unable to swap more objects out!\");",
      "635:             }",
      "640:             if (retval == REDIS_ERR || server.vm_max_threads > 0) break;",
      "641:         }",
      "",
      "[Added Lines]",
      "623:     while (server.ds_enabled && zmalloc_used_memory() >",
      "624:             server.cache_max_memory)",
      "625:     {",
      "626:         cacheFreeOneEntry();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "656:     listNode *ln;",
      "657:     redisClient *c;",
      "661:         listIter li;",
      "663:         listRewind(server.io_ready_clients,&li);",
      "",
      "[Removed Lines]",
      "660:     if (server.vm_enabled && listLength(server.io_ready_clients)) {",
      "",
      "[Added Lines]",
      "645:     if (server.ds_enabled && listLength(server.io_ready_clients)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "669:             listDelNode(server.io_ready_clients,ln);",
      "670:             c->flags &= (~REDIS_IO_WAIT);",
      "672:             aeCreateFileEvent(server.el, c->fd, AE_READABLE,",
      "673:                 readQueryFromClient, c);",
      "674:             cmd = lookupCommand(c->argv[0]->ptr);",
      "",
      "[Removed Lines]",
      "671:             server.vm_blocked_clients--;",
      "",
      "[Added Lines]",
      "656:             server.cache_blocked_clients--;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "787:     server.maxmemory = 0;",
      "788:     server.maxmemory_policy = REDIS_MAXMEMORY_VOLATILE_LRU;",
      "789:     server.maxmemory_samples = 3;",
      "797:     server.hash_max_zipmap_entries = REDIS_HASH_MAX_ZIPMAP_ENTRIES;",
      "798:     server.hash_max_zipmap_value = REDIS_HASH_MAX_ZIPMAP_VALUE;",
      "799:     server.list_max_ziplist_entries = REDIS_LIST_MAX_ZIPLIST_ENTRIES;",
      "",
      "[Removed Lines]",
      "790:     server.vm_enabled = 0;",
      "791:     server.vm_swap_file = zstrdup(\"/tmp/redis-%p.vm\");",
      "795:     server.vm_max_threads = 4;",
      "796:     server.vm_blocked_clients = 0;",
      "",
      "[Added Lines]",
      "775:     server.ds_enabled = 0;",
      "776:     server.ds_path = zstrdup(\"/tmp/redis.ds\");",
      "778:     server.cache_blocked_clients = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "873:         server.db[j].expires = dictCreate(&keyptrDictType,NULL);",
      "874:         server.db[j].blocking_keys = dictCreate(&keylistDictType,NULL);",
      "875:         server.db[j].watched_keys = dictCreate(&keylistDictType,NULL);",
      "877:             server.db[j].io_keys = dictCreate(&keylistDictType,NULL);",
      "878:         server.db[j].id = j;",
      "879:     }",
      "",
      "[Removed Lines]",
      "876:         if (server.vm_enabled)",
      "",
      "[Added Lines]",
      "858:         if (server.ds_enabled)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "911:         }",
      "912:     }",
      "915: }",
      "",
      "[Removed Lines]",
      "914:     if (server.vm_enabled) vmInit();",
      "",
      "[Added Lines]",
      "896:     if (server.ds_enabled) dsInit();",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1050:         queueMultiCommand(c,cmd);",
      "1051:         addReply(c,shared.queued);",
      "1052:     } else {",
      "1055:         call(c,cmd);",
      "1056:     }",
      "1057:     return REDIS_OK;",
      "",
      "[Removed Lines]",
      "1053:         if (server.vm_enabled && server.vm_max_threads > 0 &&",
      "1054:             blockClientOnSwappedKeys(c,cmd)) return REDIS_ERR;",
      "",
      "[Added Lines]",
      "1035:         if (server.ds_enabled && blockClientOnSwappedKeys(c,cmd))",
      "1036:             return REDIS_ERR;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1072:     if (server.appendonly) {",
      "1074:         aof_fsync(server.appendfd);",
      "1076:     } else if (server.saveparamslen > 0) {",
      "1078:         if (rdbSave(server.dbfilename) != REDIS_OK) {",
      "",
      "[Removed Lines]",
      "1075:         if (server.vm_enabled) unlink(server.vm_swap_file);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1185:         \"hash_max_zipmap_value:%zu\\r\\n\"",
      "1186:         \"pubsub_channels:%ld\\r\\n\"",
      "1187:         \"pubsub_patterns:%u\\r\\n\"",
      "1189:         \"role:%s\\r\\n\"",
      "1190:         ,REDIS_VERSION,",
      "1191:         redisGitSHA1(),",
      "",
      "[Removed Lines]",
      "1188:         \"vm_enabled:%d\\r\\n\"",
      "",
      "[Added Lines]",
      "1169:         \"ds_enabled:%d\\r\\n\"",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1228:         server.hash_max_zipmap_value,",
      "1229:         dictSize(server.pubsub_channels),",
      "1230:         listLength(server.pubsub_patterns),",
      "1232:         server.masterhost == NULL ? \"master\" : \"slave\"",
      "1233:     );",
      "1234:     if (server.masterhost) {",
      "",
      "[Removed Lines]",
      "1231:         server.vm_enabled != 0,",
      "",
      "[Added Lines]",
      "1212:         server.ds_enabled != 0,",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1255:             );",
      "1256:         }",
      "1257:     }",
      "1259:         lockThreadedIO();",
      "1260:         info = sdscatprintf(info,",
      "1285:         );",
      "1286:         unlockThreadedIO();",
      "1287:     }",
      "",
      "[Removed Lines]",
      "1258:     if (server.vm_enabled) {",
      "1261:             \"vm_conf_max_memory:%llu\\r\\n\"",
      "1262:             \"vm_conf_page_size:%llu\\r\\n\"",
      "1263:             \"vm_conf_pages:%llu\\r\\n\"",
      "1264:             \"vm_stats_used_pages:%llu\\r\\n\"",
      "1265:             \"vm_stats_swapped_objects:%llu\\r\\n\"",
      "1266:             \"vm_stats_swappin_count:%llu\\r\\n\"",
      "1267:             \"vm_stats_swappout_count:%llu\\r\\n\"",
      "1268:             \"vm_stats_io_newjobs_len:%lu\\r\\n\"",
      "1269:             \"vm_stats_io_processing_len:%lu\\r\\n\"",
      "1270:             \"vm_stats_io_processed_len:%lu\\r\\n\"",
      "1271:             \"vm_stats_io_active_threads:%lu\\r\\n\"",
      "1272:             \"vm_stats_blocked_clients:%lu\\r\\n\"",
      "1273:             ,(unsigned long long) server.vm_max_memory,",
      "1274:             (unsigned long long) server.vm_page_size,",
      "1275:             (unsigned long long) server.vm_pages,",
      "1276:             (unsigned long long) server.vm_stats_used_pages,",
      "1277:             (unsigned long long) server.vm_stats_swapped_objects,",
      "1278:             (unsigned long long) server.vm_stats_swapins,",
      "1279:             (unsigned long long) server.vm_stats_swapouts,",
      "1280:             (unsigned long) listLength(server.io_newjobs),",
      "1281:             (unsigned long) listLength(server.io_processing),",
      "1282:             (unsigned long) listLength(server.io_processed),",
      "1283:             (unsigned long) server.io_active_threads,",
      "1284:             (unsigned long) server.vm_blocked_clients",
      "",
      "[Added Lines]",
      "1239:     if (server.ds_enabled) {",
      "1242:             \"cache_max_memory:%llu\\r\\n\"",
      "1243:             \"cache_blocked_clients:%lu\\r\\n\"",
      "1244:             ,(unsigned long long) server.cache_max_memory,",
      "1245:             (unsigned long) server.cache_blocked_clients",
      "",
      "---------------"
    ],
    "src/redis.h||src/redis.h": [
      "File: src/redis.h -> src/redis.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "440:     int maxmemory_samples;",
      "442:     unsigned int bpop_blocked_clients;",
      "444:     list *unblocked_clients;",
      "",
      "[Removed Lines]",
      "443:     unsigned int vm_blocked_clients;",
      "",
      "[Added Lines]",
      "443:     unsigned int cache_blocked_clients;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "448:     int sort_alpha;",
      "449:     int sort_bypattern;",
      "457:     size_t hash_max_zipmap_entries;",
      "458:     size_t hash_max_zipmap_value;",
      "",
      "[Removed Lines]",
      "451:     int vm_enabled;",
      "452:     char *vm_swap_file;",
      "453:     off_t vm_page_size;",
      "454:     off_t vm_pages;",
      "455:     unsigned long long vm_max_memory;",
      "",
      "[Added Lines]",
      "453:     unsigned long long cache_max_memory;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a4ce7581553b1f4e29a7ed2141add788e56142c5",
      "candidate_info": {
        "commit_hash": "a4ce7581553b1f4e29a7ed2141add788e56142c5",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/a4ce7581553b1f4e29a7ed2141add788e56142c5",
        "files": [
          "src/redis.c",
          "src/redis.h",
          "src/t_list.c"
        ],
        "message": "Don't execute commands for clients when they are unblocked",
        "before_after_code_files": [
          "src/redis.c||src/redis.c",
          "src/redis.h||src/redis.h",
          "src/t_list.c||src/t_list.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ],
          "candidate": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ]
        }
      },
      "candidate_diff": {
        "src/redis.c||src/redis.c": [
          "File: src/redis.c -> src/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "647: void beforeSleep(struct aeEventLoop *eventLoop) {",
          "648:     REDIS_NOTUSED(eventLoop);",
          "651:     if (server.vm_enabled && listLength(server.io_ready_clients)) {",
          "652:         listIter li;",
          "655:         listRewind(server.io_ready_clients,&li);",
          "656:         while((ln = listNext(&li))) {",
          "658:             struct redisCommand *cmd;",
          "",
          "[Removed Lines]",
          "653:         listNode *ln;",
          "657:             redisClient *c = ln->value;",
          "",
          "[Added Lines]",
          "649:     listNode *ln;",
          "650:     redisClient *c;",
          "658:             c = ln->value;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "672:                 processInputBuffer(c);",
          "673:         }",
          "674:     }",
          "676:     flushAppendOnlyFile();",
          "677: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "678:     while (listLength(server.unblocked_clients)) {",
          "679:         ln = listFirst(server.unblocked_clients);",
          "680:         redisAssert(ln != NULL);",
          "681:         c = ln->value;",
          "682:         listDelNode(server.unblocked_clients,ln);",
          "685:         if (c->querybuf && sdslen(c->querybuf) > 0)",
          "686:             processInputBuffer(c);",
          "687:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "818:     server.clients = listCreate();",
          "819:     server.slaves = listCreate();",
          "820:     server.monitors = listCreate();",
          "821:     createSharedObjects();",
          "822:     server.el = aeCreateEventLoop();",
          "823:     server.db = zmalloc(sizeof(redisDb)*server.dbnum);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "835:     server.unblocked_clients = listCreate();",
          "",
          "---------------"
        ],
        "src/redis.h||src/redis.h": [
          "File: src/redis.h -> src/redis.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:     unsigned int bpop_blocked_clients;",
          "437:     unsigned int vm_blocked_clients;",
          "440:     int sort_desc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "438:     list *unblocked_clients;",
          "",
          "---------------"
        ],
        "src/t_list.c||src/t_list.c": [
          "File: src/t_list.c -> src/t_list.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "759:     c->bpop.target = NULL;",
          "760:     c->flags &= (~REDIS_BLOCKED);",
          "761:     server.bpop_blocked_clients--;",
          "768: }",
          "",
          "[Removed Lines]",
          "767:     if (c->querybuf && sdslen(c->querybuf) > 0) processInputBuffer(c);",
          "",
          "[Added Lines]",
          "762:     listAddNodeTail(server.unblocked_clients,c);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f21779ff36947fe22e6fc3f00d4bd73185557190",
      "candidate_info": {
        "commit_hash": "f21779ff36947fe22e6fc3f00d4bd73185557190",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/f21779ff36947fe22e6fc3f00d4bd73185557190",
        "files": [
          "src/redis.c",
          "src/redis.h"
        ],
        "message": "removed some dead code, added evicted keys counter separated from expired keys.",
        "before_after_code_files": [
          "src/redis.c||src/redis.c",
          "src/redis.h||src/redis.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ],
          "candidate": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ]
        }
      },
      "candidate_diff": {
        "src/redis.c||src/redis.c": [
          "File: src/redis.c -> src/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "891:     server.stat_numcommands = 0;",
          "892:     server.stat_numconnections = 0;",
          "893:     server.stat_expiredkeys = 0;",
          "894:     server.stat_starttime = time(NULL);",
          "895:     server.stat_keyspace_misses = 0;",
          "896:     server.stat_keyspace_hits = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "894:     server.stat_evictedkeys = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1177:         \"total_connections_received:%lld\\r\\n\"",
          "1178:         \"total_commands_processed:%lld\\r\\n\"",
          "1179:         \"expired_keys:%lld\\r\\n\"",
          "1180:         \"keyspace_hits:%lld\\r\\n\"",
          "1181:         \"keyspace_misses:%lld\\r\\n\"",
          "1182:         \"hash_max_zipmap_entries:%zu\\r\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1181:         \"evicted_keys:%lld\\r\\n\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1219:         server.stat_numconnections,",
          "1220:         server.stat_numcommands,",
          "1221:         server.stat_expiredkeys,",
          "1222:         server.stat_keyspace_hits,",
          "1223:         server.stat_keyspace_misses,",
          "1224:         server.hash_max_zipmap_entries,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1224:         server.stat_evictedkeys,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1436:             if (bestkey) {",
          "1437:                 robj *keyobj = createStringObject(bestkey,sdslen(bestkey));",
          "1438:                 dbDelete(db,keyobj);",
          "1440:                 decrRefCount(keyobj);",
          "1441:                 freed++;",
          "1442:             }",
          "1443:         }",
          "1445:     }",
          "1477: }",
          "",
          "[Removed Lines]",
          "1439:                 server.stat_expiredkeys++;",
          "1447:     while(0) {",
          "1448:         int j, k, freed = 0;",
          "1449:         for (j = 0; j < server.dbnum; j++) {",
          "1450:             int minttl = -1;",
          "1451:             sds minkey = NULL;",
          "1452:             robj *keyobj = NULL;",
          "1453:             struct dictEntry *de;",
          "1455:             if (dictSize(server.db[j].expires)) {",
          "1456:                 freed = 1;",
          "1459:                 for (k = 0; k < 3; k++) {",
          "1460:                     time_t t;",
          "1462:                     de = dictGetRandomKey(server.db[j].expires);",
          "1463:                     t = (time_t) dictGetEntryVal(de);",
          "1464:                     if (minttl == -1 || t < minttl) {",
          "1465:                         minkey = dictGetEntryKey(de);",
          "1466:                         minttl = t;",
          "1467:                     }",
          "1468:                 }",
          "1469:                 keyobj = createStringObject(minkey,sdslen(minkey));",
          "1470:                 dbDelete(server.db+j,keyobj);",
          "1471:                 server.stat_expiredkeys++;",
          "1472:                 decrRefCount(keyobj);",
          "1473:             }",
          "1474:         }",
          "1476:     }",
          "",
          "[Added Lines]",
          "1442:                 server.stat_evictedkeys++;",
          "",
          "---------------"
        ],
        "src/redis.h||src/redis.h": [
          "File: src/redis.h -> src/redis.h"
        ]
      }
    },
    {
      "candidate_hash": "f4aa600b996c605b4e2109d0f80cb14a0c14513b",
      "candidate_info": {
        "commit_hash": "f4aa600b996c605b4e2109d0f80cb14a0c14513b",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/f4aa600b996c605b4e2109d0f80cb14a0c14513b",
        "files": [
          "src/networking.c",
          "src/redis.c",
          "src/redis.h",
          "src/replication.c"
        ],
        "message": "first attempt to non blocking implementation of slave replication and SYNC bulk data download. Never compiled so far...",
        "before_after_code_files": [
          "src/networking.c||src/networking.c",
          "src/redis.c||src/redis.c",
          "src/redis.h||src/redis.h",
          "src/replication.c||src/replication.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/networking.c||src/networking.c",
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ],
          "candidate": [
            "src/networking.c||src/networking.c",
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ]
        }
      },
      "candidate_diff": {
        "src/networking.c||src/networking.c": [
          "File: src/networking.c -> src/networking.c"
        ],
        "src/redis.c||src/redis.c": [
          "File: src/redis.c -> src/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:         }",
          "634:     }",
          "644:     return 100;",
          "645: }",
          "",
          "[Removed Lines]",
          "637:     if (server.replstate == REDIS_REPL_CONNECT && !(loops % 10)) {",
          "638:         redisLog(REDIS_NOTICE,\"Connecting to MASTER...\");",
          "639:         if (syncWithMaster() == REDIS_OK) {",
          "640:             redisLog(REDIS_NOTICE,\"MASTER <-> SLAVE sync succeeded\");",
          "641:             if (server.appendonly) rewriteAppendOnlyFileBackground();",
          "642:         }",
          "643:     }",
          "",
          "[Added Lines]",
          "638:     if (!(loops % 10)) replicationCron(void);",
          "",
          "---------------"
        ],
        "src/redis.h||src/redis.h": [
          "File: src/redis.h -> src/redis.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "401:     int activerehashing;",
          "403:     int isslave;",
          "404:     char *masterauth;",
          "405:     char *masterhost;",
          "406:     int masterport;",
          "409:     unsigned int maxclients;",
          "410:     unsigned long long maxmemory;",
          "411:     int maxmemory_policy;",
          "412:     int maxmemory_samples;",
          "413:     unsigned int blpop_blocked_clients;",
          "414:     unsigned int vm_blocked_clients;",
          "",
          "[Removed Lines]",
          "408:     int replstate;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "713: void replicationFeedMonitors(list *monitors, int dictid, robj **argv, int argc);",
          "714: int syncWithMaster(void);",
          "715: void updateSlavesWaitingBgsave(int bgsaveerr);",
          "718: int rdbLoad(char *filename);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "725: void replicationCron(void);",
          "",
          "---------------"
        ],
        "src/replication.c||src/replication.c": [
          "File: src/replication.c -> src/replication.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "288:     }",
          "289: }",
          "291: int syncWithMaster(void) {",
          "292:     char buf[1024], tmpfile[256], authcmd[1024];",
          "294:     int fd = anetTcpConnect(NULL,server.masterhost,server.masterport);",
          "295:     int dfd, maxtries = 5;",
          "",
          "[Removed Lines]",
          "293:     long dumpsize;",
          "",
          "[Added Lines]",
          "296: void replicationAbortSyncTransfer(void) {",
          "297:     redisAssert(server.replstate == REDIS_REPL_TRANSFER);",
          "299:     aeDeleteFileEvent(server.el,server.repl_transfer_s,AE_READABLE);",
          "300:     close(server.repl_transfer_s);",
          "301:     close(server.repl_transfer_fd);",
          "302:     unlink(server.repl_transfer_tmpfile);",
          "303:     zfree(server.repl_transfer_tmpfile);",
          "304:     server.replstate = REDIS_REPL_CONNECT;",
          "305: }",
          "308: void readSyncBulkPayload(aeEventLoop *el, int fd, void *privdata, int mask) {",
          "309:     unsigned char buf[4096]",
          "310:     size_t nread, readlen;",
          "312:     readlen = (server.repl_transfer_left < sizeof(buf)) ?",
          "313:         server.repl_transfer_left : sizeof(buf);",
          "314:     nread = read(fd,buf,readlen);",
          "315:     if (nread <= 0) {",
          "316:         redisLog(REDIS_WARNING,\"I/O error trying to sync with MASTER: %s\",",
          "317:             (nread == -1) ? strerror(errno) : \"connection lost\");",
          "318:         replicationAbortSyncTransfer();",
          "319:         return;",
          "320:     }",
          "321:     server.repl_transfer_lastio = time(NULL);",
          "322:     if (write(server.repl_transfer_fd,buf,nread) != nread) {",
          "323:         redisLog(REDIS_WARNING,\"Write error or short write writing to the DB dump file needed for MASTER <-> SLAVE synchrnonization: %s\", strerror(errno));",
          "324:         replicationAbortSyncTransfer();",
          "325:         return;",
          "326:     }",
          "327:     server.repl_transfer_left -= nread;",
          "329:     if (server.repl_transfer_left == 0) {",
          "330:         if (rename(server.repl_transfer_tmpfile,server.dbfilename) == -1) {",
          "331:             redisLog(REDIS_WARNING,\"Failed trying to rename the temp DB into dump.rdb in MASTER <-> SLAVE synchronization: %s\", strerror(errno));",
          "332:             replicationAbortSyncTransfer();",
          "333:             return;",
          "334:         }",
          "335:         emptyDb();",
          "336:         if (rdbLoad(server.dbfilename) != REDIS_OK) {",
          "337:             redisLog(REDIS_WARNING,\"Failed trying to load the MASTER synchronization DB from disk\");",
          "338:             replicationAbortSyncTransfer();",
          "339:             return;",
          "340:         }",
          "342:         aeDeleteFileEvent(server.el,server.repl_transfer_s,AE_READABLE);",
          "343:         zfree(server.repl_transfer_tmpfile);",
          "344:         close(server.repl_transfer_fd);",
          "345:         server.master = createClient(server.repl_transfer_s);",
          "346:         server.master->flags |= REDIS_MASTER;",
          "347:         server.master->authenticated = 1;",
          "348:         server.replstate = REDIS_REPL_CONNECTED;",
          "349:     }",
          "350: }",
          "354:     off_t dumpsize;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362:         redisLog(REDIS_WARNING,\"Opening the temp file needed for MASTER <-> SLAVE synchronization: %s\",strerror(errno));",
          "363:         return REDIS_ERR;",
          "364:     }",
          "395:         close(fd);",
          "396:         return REDIS_ERR;",
          "397:     }",
          "402:     return REDIS_OK;",
          "403: }",
          "",
          "[Removed Lines]",
          "365:     while(dumpsize) {",
          "366:         int nread, nwritten;",
          "368:         nread = read(fd,buf,(dumpsize < 1024)?dumpsize:1024);",
          "369:         if (nread <= 0) {",
          "370:             redisLog(REDIS_WARNING,\"I/O error trying to sync with MASTER: %s\",",
          "371:                 (nread == -1) ? strerror(errno) : \"connection lost\");",
          "372:             close(fd);",
          "373:             close(dfd);",
          "374:             return REDIS_ERR;",
          "375:         }",
          "376:         nwritten = write(dfd,buf,nread);",
          "377:         if (nwritten == -1) {",
          "378:             redisLog(REDIS_WARNING,\"Write error writing to the DB dump file needed for MASTER <-> SLAVE synchrnonization: %s\", strerror(errno));",
          "379:             close(fd);",
          "380:             close(dfd);",
          "381:             return REDIS_ERR;",
          "382:         }",
          "383:         dumpsize -= nread;",
          "384:     }",
          "385:     close(dfd);",
          "386:     if (rename(tmpfile,server.dbfilename) == -1) {",
          "387:         redisLog(REDIS_WARNING,\"Failed trying to rename the temp DB into dump.rdb in MASTER <-> SLAVE synchronization: %s\", strerror(errno));",
          "388:         unlink(tmpfile);",
          "389:         close(fd);",
          "390:         return REDIS_ERR;",
          "391:     }",
          "392:     emptyDb();",
          "393:     if (rdbLoad(server.dbfilename) != REDIS_OK) {",
          "394:         redisLog(REDIS_WARNING,\"Failed trying to load the MASTER synchronization DB from disk\");",
          "398:     server.master = createClient(fd);",
          "399:     server.master->flags |= REDIS_MASTER;",
          "400:     server.master->authenticated = 1;",
          "401:     server.replstate = REDIS_REPL_CONNECTED;",
          "",
          "[Added Lines]",
          "428:     if (aeCreateFileEvent(server.el, fd, AE_READABLE,readSyncBulkPayload) ==",
          "429:         AE_ERR)",
          "430:     {",
          "432:         redisLog(REDIS_WARNING,\"Can't create readable event for SYNC\");",
          "435:     server.replstate = REDIS_REPL_TRANSFER;",
          "436:     server.repl_transfer_left = dumpsize;",
          "437:     server.repl_transfer_s = fd;",
          "438:     server.repl_transfer_fd = dfd;",
          "439:     server.repl_transfer_lastio = time(NULL);",
          "440:     server.repl_transfer_tmpfile = zstrdup(tmpfile);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "409:             sdsfree(server.masterhost);",
          "410:             server.masterhost = NULL;",
          "411:             if (server.master) freeClient(server.master);",
          "412:             server.replstate = REDIS_REPL_NONE;",
          "413:             redisLog(REDIS_NOTICE,\"MASTER MODE enabled (user request)\");",
          "414:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451:             if (server.replstate == REDIS_REPL_TRANSFER)",
          "452:                 replicationAbortSyncTransfer();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "417:         server.masterhost = sdsdup(c->argv[1]->ptr);",
          "418:         server.masterport = atoi(c->argv[2]->ptr);",
          "419:         if (server.master) freeClient(server.master);",
          "420:         server.replstate = REDIS_REPL_CONNECT;",
          "421:         redisLog(REDIS_NOTICE,\"SLAVE OF %s:%d enabled (user request)\",",
          "422:             server.masterhost, server.masterport);",
          "423:     }",
          "424:     addReply(c,shared.ok);",
          "425: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "461:         if (server.replstate == REDIS_REPL_TRANSFER)",
          "462:             replicationAbortSyncTransfer();",
          "472: #define REDIS_REPL_TRANSFER_TIMEOUT 60",
          "474: void replicationCron(void) {",
          "476:     if (server.masterhost && server.replstate == REDIS_REPL_TRANSFER &&",
          "477:         (time(NULL)-server.repl_transfer_lastio) > REDIS_REPL_TRANSFER_TIMEOUT)",
          "478:     {",
          "479:         redisLog(REDIS_WARNING,\"Timeout receiving bulk data from MASTER...\");",
          "480:         replicationAbortSyncTransfer();",
          "481:     }",
          "484:     if (server.replstate == REDIS_REPL_CONNECT && !(loops % 10)) {",
          "485:         redisLog(REDIS_NOTICE,\"Connecting to MASTER...\");",
          "486:         if (syncWithMaster() == REDIS_OK) {",
          "487:             redisLog(REDIS_NOTICE,\"MASTER <-> SLAVE sync succeeded\");",
          "488:             if (server.appendonly) rewriteAppendOnlyFileBackground();",
          "489:         }",
          "490:     }",
          "491: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12ebe2ac17a26ecf263f90b2acdf03db29b00223",
      "candidate_info": {
        "commit_hash": "12ebe2ac17a26ecf263f90b2acdf03db29b00223",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/12ebe2ac17a26ecf263f90b2acdf03db29b00223",
        "files": [
          "src/redis.c"
        ],
        "message": "replication asynchronous SYNC information in INFO output",
        "before_after_code_files": [
          "src/redis.c||src/redis.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/redis.c||src/redis.c"
          ],
          "candidate": [
            "src/redis.c||src/redis.c"
          ]
        }
      },
      "candidate_diff": {
        "src/redis.c||src/redis.c": [
          "File: src/redis.c -> src/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1183:             \"master_port:%d\\r\\n\"",
          "1184:             \"master_link_status:%s\\r\\n\"",
          "1185:             \"master_last_io_seconds_ago:%d\\r\\n\"",
          "1186:             ,server.masterhost,",
          "1187:             server.masterport,",
          "1188:             (server.replstate == REDIS_REPL_CONNECTED) ?",
          "1189:                 \"up\" : \"down\",",
          "1191:         );",
          "1192:     }",
          "1193:     if (server.vm_enabled) {",
          "1194:         lockThreadedIO();",
          "",
          "[Removed Lines]",
          "1190:             server.master ? ((int)(time(NULL)-server.master->lastinteraction)) : -1",
          "",
          "[Added Lines]",
          "1186:             \"master_sync_in_progress:%d\\r\\n\"",
          "1191:             server.master ? ((int)(time(NULL)-server.master->lastinteraction)) : -1,",
          "1192:             server.replstate == REDIS_REPL_TRANSFER",
          "1195:         if (server.replstate == REDIS_REPL_TRANSFER) {",
          "1196:             info = sdscatprintf(info,",
          "1197:                 \"master_sync_left_bytes:%ld\\r\\n\"",
          "1198:                 \"master_sync_last_io_seconds_ago:%d\\r\\n\"",
          "1199:                 ,(long)server.repl_transfer_left,",
          "1200:                 (int)(time(NULL)-server.repl_transfer_lastio)",
          "1201:             );",
          "1202:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f48cd4b90cc298a74ded3f7adc45740a4dd1a9c1",
      "candidate_info": {
        "commit_hash": "f48cd4b90cc298a74ded3f7adc45740a4dd1a9c1",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/f48cd4b90cc298a74ded3f7adc45740a4dd1a9c1",
        "files": [
          "src/aof.c",
          "src/config.c",
          "src/db.c",
          "src/debug.c",
          "src/rdb.c",
          "src/redis.c",
          "src/redis.h",
          "src/replication.c"
        ],
        "message": "some RDB server struct fields renamed.",
        "before_after_code_files": [
          "src/aof.c||src/aof.c",
          "src/config.c||src/config.c",
          "src/db.c||src/db.c",
          "src/debug.c||src/debug.c",
          "src/rdb.c||src/rdb.c",
          "src/redis.c||src/redis.c",
          "src/redis.h||src/redis.h",
          "src/replication.c||src/replication.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ],
          "candidate": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ]
        }
      },
      "candidate_diff": {
        "src/aof.c||src/aof.c": [
          "File: src/aof.c -> src/aof.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:     if (server.aof_no_fsync_on_rewrite &&",
          "148:             return;",
          "",
          "[Removed Lines]",
          "147:         (server.aof_child_pid != -1 || server.bgsavechildpid != -1))",
          "",
          "[Added Lines]",
          "147:         (server.aof_child_pid != -1 || server.rdb_child_pid != -1))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "815: void bgrewriteaofCommand(redisClient *c) {",
          "816:     if (server.aof_child_pid != -1) {",
          "817:         addReplyError(c,\"Background append only file rewriting already in progress\");",
          "819:         server.aof_rewrite_scheduled = 1;",
          "820:         addReplyStatus(c,\"Background append only file rewriting scheduled\");",
          "821:     } else if (rewriteAppendOnlyFileBackground() == REDIS_OK) {",
          "",
          "[Removed Lines]",
          "818:     } else if (server.bgsavechildpid != -1) {",
          "",
          "[Added Lines]",
          "818:     } else if (server.rdb_child_pid != -1) {",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:         } else if (!strcasecmp(argv[0],\"glueoutputbuf\")) {",
          "202:             redisLog(REDIS_WARNING, \"Deprecated configuration directive: \\\"%s\\\"\", argv[0]);",
          "203:         } else if (!strcasecmp(argv[0],\"rdbcompression\") && argc == 2) {",
          "205:                 err = \"argument must be 'yes' or 'no'\"; goto loaderr;",
          "206:             }",
          "207:         } else if (!strcasecmp(argv[0],\"activerehashing\") && argc == 2) {",
          "",
          "[Removed Lines]",
          "204:             if ((server.rdbcompression = yesnotoi(argv[1])) == -1) {",
          "",
          "[Added Lines]",
          "204:             if ((server.rdb_compression = yesnotoi(argv[1])) == -1) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "256:             zfree(server.pidfile);",
          "257:             server.pidfile = zstrdup(argv[1]);",
          "258:         } else if (!strcasecmp(argv[0],\"dbfilename\") && argc == 2) {",
          "261:         } else if (!strcasecmp(argv[0],\"hash-max-zipmap-entries\") && argc == 2) {",
          "262:             server.hash_max_zipmap_entries = memtoll(argv[1], NULL);",
          "263:         } else if (!strcasecmp(argv[0],\"hash-max-zipmap-value\") && argc == 2) {",
          "",
          "[Removed Lines]",
          "259:             zfree(server.dbfilename);",
          "260:             server.dbfilename = zstrdup(argv[1]);",
          "",
          "[Added Lines]",
          "259:             zfree(server.rdb_filename);",
          "260:             server.rdb_filename = zstrdup(argv[1]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "376:     o = c->argv[3];",
          "378:     if (!strcasecmp(c->argv[2]->ptr,\"dbfilename\")) {",
          "381:     } else if (!strcasecmp(c->argv[2]->ptr,\"requirepass\")) {",
          "382:         zfree(server.requirepass);",
          "383:         server.requirepass = ((char*)o->ptr)[0] ? zstrdup(o->ptr) : NULL;",
          "",
          "[Removed Lines]",
          "379:         zfree(server.dbfilename);",
          "380:         server.dbfilename = zstrdup(o->ptr);",
          "",
          "[Added Lines]",
          "379:         zfree(server.rdb_filename);",
          "380:         server.rdb_filename = zstrdup(o->ptr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "567:     }",
          "568:     if (stringmatch(pattern,\"dbfilename\",0)) {",
          "569:         addReplyBulkCString(c,\"dbfilename\");",
          "571:         matches++;",
          "572:     }",
          "573:     if (stringmatch(pattern,\"requirepass\",0)) {",
          "",
          "[Removed Lines]",
          "570:         addReplyBulkCString(c,server.dbfilename);",
          "",
          "[Added Lines]",
          "570:         addReplyBulkCString(c,server.rdb_filename);",
          "",
          "---------------"
        ],
        "src/db.c||src/db.c": [
          "File: src/db.c -> src/db.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:             val->lru = server.lruclock;",
          "45:         server.stat_keyspace_hits++;",
          "46:         return val;",
          "",
          "[Removed Lines]",
          "43:         if (server.bgsavechildpid == -1 && server.aof_child_pid == -1)",
          "",
          "[Added Lines]",
          "43:         if (server.rdb_child_pid == -1 && server.aof_child_pid == -1)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210:     signalFlushedDb(-1);",
          "211:     server.dirty += emptyDb();",
          "212:     addReply(c,shared.ok);",
          "216:     }",
          "217:     if (server.saveparamslen > 0) {",
          "220:         int saved_dirty = server.dirty;",
          "222:         server.dirty = saved_dirty;",
          "223:     }",
          "224:     server.dirty++;",
          "",
          "[Removed Lines]",
          "213:     if (server.bgsavechildpid != -1) {",
          "214:         kill(server.bgsavechildpid,SIGKILL);",
          "215:         rdbRemoveTempFile(server.bgsavechildpid);",
          "221:         rdbSave(server.dbfilename);",
          "",
          "[Added Lines]",
          "213:     if (server.rdb_child_pid != -1) {",
          "214:         kill(server.rdb_child_pid,SIGKILL);",
          "215:         rdbRemoveTempFile(server.rdb_child_pid);",
          "221:         rdbSave(server.rdb_filename);",
          "",
          "---------------"
        ],
        "src/debug.c||src/debug.c": [
          "File: src/debug.c -> src/debug.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:         if (c->argc >= 3) c->argv[2] = tryObjectEncoding(c->argv[2]);",
          "217:         redisAssertWithInfo(c,c->argv[0],1 == 2);",
          "218:     } else if (!strcasecmp(c->argv[1]->ptr,\"reload\")) {",
          "220:             addReply(c,shared.err);",
          "221:             return;",
          "222:         }",
          "223:         emptyDb();",
          "225:             addReplyError(c,\"Error trying to load the RDB dump\");",
          "226:             return;",
          "227:         }",
          "",
          "[Removed Lines]",
          "219:         if (rdbSave(server.dbfilename) != REDIS_OK) {",
          "224:         if (rdbLoad(server.dbfilename) != REDIS_OK) {",
          "",
          "[Added Lines]",
          "219:         if (rdbSave(server.rdb_filename) != REDIS_OK) {",
          "224:         if (rdbLoad(server.rdb_filename) != REDIS_OK) {",
          "",
          "---------------"
        ],
        "src/rdb.c||src/rdb.c": [
          "File: src/rdb.c -> src/rdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:         n = rdbSaveLzfStringObject(rdb,s,len);",
          "258:         if (n == -1) return -1;",
          "259:         if (n > 0) return n;",
          "",
          "[Removed Lines]",
          "256:     if (server.rdbcompression && len > 20) {",
          "",
          "[Added Lines]",
          "256:     if (server.rdb_compression && len > 20) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "670:     pid_t childpid;",
          "671:     long long start;",
          "675:     server.dirty_before_bgsave = server.dirty;",
          "",
          "[Removed Lines]",
          "673:     if (server.bgsavechildpid != -1) return REDIS_ERR;",
          "",
          "[Added Lines]",
          "673:     if (server.rdb_child_pid != -1) return REDIS_ERR;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "692:             return REDIS_ERR;",
          "693:         }",
          "694:         redisLog(REDIS_NOTICE,\"Background saving started by pid %d\",childpid);",
          "696:         updateDictResizePolicy();",
          "697:         return REDIS_OK;",
          "698:     }",
          "",
          "[Removed Lines]",
          "695:         server.bgsavechildpid = childpid;",
          "",
          "[Added Lines]",
          "695:         server.rdb_child_pid = childpid;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1062:     } else {",
          "1063:         redisLog(REDIS_WARNING,",
          "1064:             \"Background saving terminated by signal %d\", bysignal);",
          "1066:     }",
          "1070:     updateSlavesWaitingBgsave(exitcode == 0 ? REDIS_OK : REDIS_ERR);",
          "1071: }",
          "1073: void saveCommand(redisClient *c) {",
          "1075:         addReplyError(c,\"Background save already in progress\");",
          "1076:         return;",
          "1077:     }",
          "1079:         addReply(c,shared.ok);",
          "1080:     } else {",
          "1081:         addReply(c,shared.err);",
          "",
          "[Removed Lines]",
          "1065:         rdbRemoveTempFile(server.bgsavechildpid);",
          "1067:     server.bgsavechildpid = -1;",
          "1074:     if (server.bgsavechildpid != -1) {",
          "1078:     if (rdbSave(server.dbfilename) == REDIS_OK) {",
          "",
          "[Added Lines]",
          "1065:         rdbRemoveTempFile(server.rdb_child_pid);",
          "1067:     server.rdb_child_pid = -1;",
          "1074:     if (server.rdb_child_pid != -1) {",
          "1078:     if (rdbSave(server.rdb_filename) == REDIS_OK) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1083: }",
          "1085: void bgsaveCommand(redisClient *c) {",
          "1087:         addReplyError(c,\"Background save already in progress\");",
          "1088:     } else if (server.aof_child_pid != -1) {",
          "1089:         addReplyError(c,\"Can't BGSAVE while AOF log rewriting is in progress\");",
          "1091:         addReplyStatus(c,\"Background saving started\");",
          "1092:     } else {",
          "1093:         addReply(c,shared.err);",
          "",
          "[Removed Lines]",
          "1086:     if (server.bgsavechildpid != -1) {",
          "1090:     } else if (rdbSaveBackground(server.dbfilename) == REDIS_OK) {",
          "",
          "[Added Lines]",
          "1086:     if (server.rdb_child_pid != -1) {",
          "1090:     } else if (rdbSaveBackground(server.rdb_filename) == REDIS_OK) {",
          "",
          "---------------"
        ],
        "src/redis.c||src/redis.c": [
          "File: src/redis.c -> src/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "565: void updateDictResizePolicy(void) {",
          "567:         dictEnableResize();",
          "568:     else",
          "569:         dictDisableResize();",
          "",
          "[Removed Lines]",
          "566:     if (server.bgsavechildpid == -1 && server.aof_child_pid == -1)",
          "",
          "[Added Lines]",
          "566:     if (server.rdb_child_pid == -1 && server.aof_child_pid == -1)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "677:         if (!(loops % 10)) tryResizeHashTables();",
          "678:         if (server.activerehashing) incrementallyRehash();",
          "679:     }",
          "",
          "[Removed Lines]",
          "676:     if (server.bgsavechildpid == -1 && server.aof_child_pid == -1) {",
          "",
          "[Added Lines]",
          "676:     if (server.rdb_child_pid == -1 && server.aof_child_pid == -1) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "696:         server.aof_rewrite_scheduled)",
          "697:     {",
          "698:         rewriteAppendOnlyFileBackground();",
          "699:     }",
          "703:         int statloc;",
          "704:         pid_t pid;",
          "",
          "[Removed Lines]",
          "695:     if (server.bgsavechildpid == -1 && server.aof_child_pid == -1 &&",
          "702:     if (server.bgsavechildpid != -1 || server.aof_child_pid != -1) {",
          "",
          "[Added Lines]",
          "695:     if (server.rdb_child_pid == -1 && server.aof_child_pid == -1 &&",
          "702:     if (server.rdb_child_pid != -1 || server.aof_child_pid != -1) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "710:             if (WIFSIGNALED(statloc)) bysignal = WTERMSIG(statloc);",
          "713:                 backgroundSaveDoneHandler(exitcode,bysignal);",
          "714:             } else {",
          "715:                 backgroundRewriteDoneHandler(exitcode,bysignal);",
          "",
          "[Removed Lines]",
          "712:             if (pid == server.bgsavechildpid) {",
          "",
          "[Added Lines]",
          "712:             if (pid == server.rdb_child_pid) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "728:                 now-server.lastsave > sp->seconds) {",
          "729:                 redisLog(REDIS_NOTICE,\"%d changes in %d seconds. Saving...\",",
          "730:                     sp->changes, sp->seconds);",
          "732:                 break;",
          "733:             }",
          "734:          }",
          "738:              server.aof_child_pid == -1 &&",
          "739:              server.aof_rewrite_perc &&",
          "740:              server.aof_current_size > server.aof_rewrite_min_size)",
          "",
          "[Removed Lines]",
          "731:                 rdbSaveBackground(server.dbfilename);",
          "737:          if (server.bgsavechildpid == -1 &&",
          "",
          "[Added Lines]",
          "731:                 rdbSaveBackground(server.rdb_filename);",
          "737:          if (server.rdb_child_pid == -1 &&",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "886:     server.aof_flush_postponed_start = 0;",
          "887:     server.pidfile = zstrdup(\"/var/run/redis.pid\");",
          "889:     server.aof_filename = zstrdup(\"appendonly.aof\");",
          "890:     server.requirepass = NULL;",
          "892:     server.activerehashing = 1;",
          "893:     server.maxclients = REDIS_MAX_CLIENTS;",
          "894:     server.bpop_blocked_clients = 0;",
          "",
          "[Removed Lines]",
          "888:     server.dbfilename = zstrdup(\"dump.rdb\");",
          "891:     server.rdbcompression = 1;",
          "",
          "[Added Lines]",
          "888:     server.rdb_filename = zstrdup(\"dump.rdb\");",
          "891:     server.rdb_compression = 1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1044:     listSetFreeMethod(server.pubsub_patterns,freePubsubPattern);",
          "1045:     listSetMatchMethod(server.pubsub_patterns,listMatchPubsubPattern);",
          "1046:     server.cronloops = 0;",
          "1048:     server.aof_child_pid = -1;",
          "1049:     server.aof_rewrite_buf = sdsempty();",
          "1050:     server.aof_buf = sdsempty();",
          "",
          "[Removed Lines]",
          "1047:     server.bgsavechildpid = -1;",
          "",
          "[Added Lines]",
          "1047:     server.rdb_child_pid = -1;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1306:        We want to avoid race conditions, for instance our saving child may",
          "1309:         redisLog(REDIS_WARNING,\"There is a child saving an .rdb. Killing it!\");",
          "1312:     }",
          "1313:     if (server.aof_state != REDIS_AOF_OFF) {",
          "",
          "[Removed Lines]",
          "1308:     if (server.bgsavechildpid != -1) {",
          "1310:         kill(server.bgsavechildpid,SIGKILL);",
          "1311:         rdbRemoveTempFile(server.bgsavechildpid);",
          "",
          "[Added Lines]",
          "1308:     if (server.rdb_child_pid != -1) {",
          "1310:         kill(server.rdb_child_pid,SIGKILL);",
          "1311:         rdbRemoveTempFile(server.rdb_child_pid);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1325:     if ((server.saveparamslen > 0 && !nosave) || save) {",
          "1326:         redisLog(REDIS_NOTICE,\"Saving the final RDB snapshot before exiting.\");",
          "",
          "[Removed Lines]",
          "1328:         if (rdbSave(server.dbfilename) != REDIS_OK) {",
          "",
          "[Added Lines]",
          "1328:         if (rdbSave(server.rdb_filename) != REDIS_OK) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1499:             server.loading,",
          "1500:             server.aof_state != REDIS_AOF_OFF,",
          "1501:             server.dirty,",
          "1503:             server.lastsave,",
          "1504:             server.aof_child_pid != -1);",
          "",
          "[Removed Lines]",
          "1502:             server.bgsavechildpid != -1,",
          "",
          "[Added Lines]",
          "1502:             server.rdb_child_pid != -1,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2102:         if (loadAppendOnlyFile(server.aof_filename) == REDIS_OK)",
          "2103:             redisLog(REDIS_NOTICE,\"DB loaded from append only file: %.3f seconds\",(float)(ustime()-start)/1000000);",
          "2104:     } else {",
          "2106:             redisLog(REDIS_NOTICE,\"DB loaded from disk: %.3f seconds\",",
          "2107:                 (float)(ustime()-start)/1000000);",
          "2108:         } else if (errno != ENOENT) {",
          "",
          "[Removed Lines]",
          "2105:         if (rdbLoad(server.dbfilename) == REDIS_OK) {",
          "",
          "[Added Lines]",
          "2105:         if (rdbLoad(server.rdb_filename) == REDIS_OK) {",
          "",
          "---------------"
        ],
        "src/redis.h||src/redis.h": [
          "File: src/redis.h -> src/redis.h"
        ],
        "src/replication.c||src/replication.c": [
          "File: src/replication.c -> src/replication.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:     redisLog(REDIS_NOTICE,\"Slave ask for synchronization\");",
          "",
          "[Removed Lines]",
          "109:     if (server.bgsavechildpid != -1) {",
          "",
          "[Added Lines]",
          "109:     if (server.rdb_child_pid != -1) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:     } else {",
          "137:         redisLog(REDIS_NOTICE,\"Starting BGSAVE for SYNC\");",
          "139:             redisLog(REDIS_NOTICE,\"Replication failed, can't BGSAVE\");",
          "140:             addReplyError(c,\"Unable to perform background save\");",
          "141:             return;",
          "",
          "[Removed Lines]",
          "138:         if (rdbSaveBackground(server.dbfilename) != REDIS_OK) {",
          "",
          "[Added Lines]",
          "138:         if (rdbSaveBackground(server.rdb_filename) != REDIS_OK) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "229:                 redisLog(REDIS_WARNING,\"SYNC failed. BGSAVE child returned an error\");",
          "230:                 continue;",
          "231:             }",
          "233:                 redis_fstat(slave->repldbfd,&buf) == -1) {",
          "234:                 freeClient(slave);",
          "235:                 redisLog(REDIS_WARNING,\"SYNC failed. Can't open/stat DB after BGSAVE: %s\", strerror(errno));",
          "",
          "[Removed Lines]",
          "232:             if ((slave->repldbfd = open(server.dbfilename,O_RDONLY)) == -1 ||",
          "",
          "[Added Lines]",
          "232:             if ((slave->repldbfd = open(server.rdb_filename,O_RDONLY)) == -1 ||",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "246:         }",
          "247:     }",
          "248:     if (startbgsave) {",
          "250:             listIter li;",
          "252:             listRewind(server.slaves,&li);",
          "",
          "[Removed Lines]",
          "249:         if (rdbSaveBackground(server.dbfilename) != REDIS_OK) {",
          "",
          "[Added Lines]",
          "249:         if (rdbSaveBackground(server.rdb_filename) != REDIS_OK) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "333:     server.repl_transfer_left -= nread;",
          "335:     if (server.repl_transfer_left == 0) {",
          "337:             redisLog(REDIS_WARNING,\"Failed trying to rename the temp DB into dump.rdb in MASTER <-> SLAVE synchronization: %s\", strerror(errno));",
          "338:             replicationAbortSyncTransfer();",
          "339:             return;",
          "",
          "[Removed Lines]",
          "336:         if (rename(server.repl_transfer_tmpfile,server.dbfilename) == -1) {",
          "",
          "[Added Lines]",
          "336:         if (rename(server.repl_transfer_tmpfile,server.rdb_filename) == -1) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "347:         aeDeleteFileEvent(server.el,server.repl_transfer_s,AE_READABLE);",
          "349:             redisLog(REDIS_WARNING,\"Failed trying to load the MASTER synchronization DB from disk\");",
          "350:             replicationAbortSyncTransfer();",
          "351:             return;",
          "",
          "[Removed Lines]",
          "348:         if (rdbLoad(server.dbfilename) != REDIS_OK) {",
          "",
          "[Added Lines]",
          "348:         if (rdbLoad(server.rdb_filename) != REDIS_OK) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}