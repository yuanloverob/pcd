{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ffd3fd0c30d7b096adb54ccd8b0c8b907c86e803",
      "candidate_info": {
        "commit_hash": "ffd3fd0c30d7b096adb54ccd8b0c8b907c86e803",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ffd3fd0c30d7b096adb54ccd8b0c8b907c86e803",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/mutex.c",
          "test/speedtest1.c"
        ],
        "message": "Add new memory barriers during initialization.\n\nFossilOrigin-Name: a9b2adc5d61790abd86839d12e7ecb98a85d7e4cde5f94558530e32449d9e483",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/mutex.c||src/mutex.c",
          "test/speedtest1.c||test/speedtest1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b20503aaf5b6595afafee6aa2bc6276354a62b0f583f6d94e31fedfdfc130347",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "164:   if( sqlite3GlobalConfig.isInit ) return SQLITE_OK;",
          "",
          "[Added Lines]",
          "164:   if( sqlite3GlobalConfig.isInit ){",
          "165:     sqlite3MemoryBarrier();",
          "166:     return SQLITE_OK;",
          "167:   }",
          "",
          "---------------"
        ],
        "src/mutex.c||src/mutex.c": [
          "File: src/mutex.c -> src/mutex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "254:   GLOBAL(int, mutexIsInit) = 1;",
          "255: #endif",
          "257:   return rc;",
          "258: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "257:   sqlite3MemoryBarrier();",
          "",
          "---------------"
        ],
        "test/speedtest1.c||test/speedtest1.c": [
          "File: test/speedtest1.c -> test/speedtest1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2148:     sqlite3_config(SQLITE_CONFIG_LOOKASIDE, 0, 0);",
          "2149:   }",
          "2150: #endif",
          "2153:   if( sqlite3_open(zDbName, &g.db) ){",
          "2154:     fatal_error(\"Cannot open database file: %s\\n\", zDbName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2151:   sqlite3_initialize();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "47eb561c4066be1b92f54dde5aaeae87ab630b04",
      "candidate_info": {
        "commit_hash": "47eb561c4066be1b92f54dde5aaeae87ab630b04",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/47eb561c4066be1b92f54dde5aaeae87ab630b04",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/build.c",
          "src/sqliteInt.h"
        ],
        "message": "Simplify #ifdefs associated with Parse.eParseMode.  Fix an #ifdef error associated with SQLITE_OMIT_AUTOVACUUM.\n\nFossilOrigin-Name: 5bbd4bddd3b9fa64d134ed62bce3eb4a09456bf24dec2474b5d764a3a3775964",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/build.c||src/build.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 680bdc6524ad6af0e74401e96e3a576145042fb865c1582bfaffc11d4ff76a4f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10262:          (PTRMAP_PAGENO(pBt, i)==i && pBt->autoVacuum) ){",
          "10263:         checkAppendMsg(&sCheck, \"Pointer map page %d is referenced\", i);",
          "10264:       }",
          "10266: #endif",
          "10267:   }",
          "",
          "[Removed Lines]",
          "10265:     }",
          "",
          "[Added Lines]",
          "10266:     }",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2703:   assert( pTable->pSelect );",
          "2704:   pSel = sqlite3SelectDup(db, pTable->pSelect, 0);",
          "2705:   if( pSel ){",
          "2707:     u8 eParseMode = pParse->eParseMode;",
          "2708:     pParse->eParseMode = PARSE_MODE_NORMAL;",
          "2710:     n = pParse->nTab;",
          "2711:     sqlite3SrcListAssignCursors(pParse, pSel->pSrc);",
          "2712:     pTable->nCol = -1;",
          "",
          "[Removed Lines]",
          "2706: #ifndef SQLITE_OMIT_ALTERTABLE",
          "2709: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2754:     sqlite3DeleteTable(db, pSelTab);",
          "2755:     sqlite3SelectDelete(db, pSel);",
          "2756:     EnableLookaside;",
          "2758:     pParse->eParseMode = eParseMode;",
          "2760:   } else {",
          "2761:     nErr++;",
          "2762:   }",
          "",
          "[Removed Lines]",
          "2757: #ifndef SQLITE_OMIT_ALTERTABLE",
          "2759: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3401: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "3403: #endif",
          "",
          "[Removed Lines]",
          "3398: #if !(defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_OMIT_ALTERTABLE))",
          "3400: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22e95fbd741dd492471db39450a149cc1e23a12c",
      "candidate_info": {
        "commit_hash": "22e95fbd741dd492471db39450a149cc1e23a12c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/22e95fbd741dd492471db39450a149cc1e23a12c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbemem.c"
        ],
        "message": "Enhancements to aid testing and debugging: In PRAGMA vdbe_trace=on output, show pScopyFrom dependencies on register values.  Add the sqlite3VdbeRegisterDump() procedure, callable from a debugger, that shows the values of all registers.  Pass the VDBE pointer into test_trace_breakpoint() so that sqlite3VdbeRegisterDump() is callable from the breakpoint.\n\nFossilOrigin-Name: 9886cb4b7987f720aa9d701222ab0987caa0ab8c5d216cb6e523c4a45366dfe5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 49a6368c384178653cb3ccb58cc8eff93327c16929bf79eeefeb13a4ce897153",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:   static int n = 0;",
          "136:   n++;",
          "137: }",
          "",
          "[Removed Lines]",
          "134: static void test_trace_breakpoint(int pc, Op *pOp){",
          "",
          "[Added Lines]",
          "134: static void test_trace_breakpoint(int pc, Op *pOp, Vdbe *v){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "586:   if( p->flags & MEM_Subtype ) printf(\" subtype=0x%02x\", p->eSubtype);",
          "587: }",
          "588: static void registerTrace(int iReg, Mem *p){",
          "590:   memTracePrint(p);",
          "591:   printf(\"\\n\");",
          "592:   sqlite3VdbeCheckMemInvariants(p);",
          "593: }",
          "594: #endif",
          "596: #ifdef SQLITE_DEBUG",
          "597: #  define REGISTER_TRACE(R,M) if(db->flags&SQLITE_VdbeTrace)registerTrace(R,M)",
          "598: #else",
          "",
          "[Removed Lines]",
          "589:   printf(\"REG[%d] = \", iReg);",
          "",
          "[Added Lines]",
          "589:   printf(\"R[%d] = \", iReg);",
          "591:   if( p->pScopyFrom ){",
          "592:     printf(\" <== R[%d]\", (int)(p->pScopyFrom - &p[-iReg]));",
          "593:   }",
          "599: #ifdef SQLITE_DEBUG",
          "604: void sqlite3VdbeRegisterDump(Vdbe *v){",
          "605:   int i;",
          "606:   for(i=1; i<v->nMem; i++) registerTrace(i, v->aMem+i);",
          "607: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "758: #ifdef SQLITE_DEBUG",
          "759:     if( db->flags & SQLITE_VdbeTrace ){",
          "760:       sqlite3VdbePrintOp(stdout, (int)(pOp - aOp), pOp);",
          "762:     }",
          "763: #endif",
          "",
          "[Removed Lines]",
          "761:       test_trace_breakpoint((int)(pOp - aOp),pOp);",
          "",
          "[Added Lines]",
          "776:       test_trace_breakpoint((int)(pOp - aOp),pOp,p);",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "956:   Mem *pX;",
          "957:   for(i=0, pX=pVdbe->aMem; i<pVdbe->nMem; i++, pX++){",
          "958:     if( pX->pScopyFrom==pMem ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "959:       if( pVdbe->db->flags & SQLITE_VdbeTrace ){",
          "960:         sqlite3DebugPrintf(\"Invalidate R[%d] due to change in R[%d]\\n\",",
          "961:           (int)(pX - pVdbe->aMem), (int)(pMem - pVdbe->aMem));",
          "962:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "61cb4ed7f10f9363572a73c1d087bdb10410835b",
      "candidate_info": {
        "commit_hash": "61cb4ed7f10f9363572a73c1d087bdb10410835b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/61cb4ed7f10f9363572a73c1d087bdb10410835b",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "Add comments in the parse.sql file to help demonstrate how rules are encoded.\n\nFossilOrigin-Name: 2c4f714892327a1a9a303267b1f9685e310cca5dcea9c61287d95e26291b0506",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3a82c554c3bde4640df6865686f8f70e2c1e07c581fed4772b6b0a8ec1b10bb6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4224:     );",
          "4225:     for(i=0, rp=lemp->rule; rp; rp=rp->next, i++){",
          "4226:       assert( i==rp->iRule );",
          "4227:       fprintf(sql,",
          "4228:         \"INSERT INTO rule(ruleid,lhs)VALUES(%d,%d);\\n\",",
          "4229:         rp->iRule, rp->lhs->index",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4227:       fprintf(sql, \"-- \");",
          "4228:       writeRuleText(sql, rp);",
          "4229:       fprintf(sql, \"\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29368eabc54a16b4029e391988539027738e3284",
      "candidate_info": {
        "commit_hash": "29368eabc54a16b4029e391988539027738e3284",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/29368eabc54a16b4029e391988539027738e3284",
        "files": [
          "autoconf/configure.ac",
          "configure",
          "configure.ac",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add the --enable-all option to the main configure script as a short-hand to enable FTS4, FTS5, Geopoly/Rtree, JSON, and Sessions.  In the amalgamation-autoconf, the --enable-rtree option (which is enabled by default) also now activates Geopoly.\n\nFossilOrigin-Name: 52ea0672d7494346c636cd7b05ca42161eb3b07d9378fa9959be9a11de87dbbb",
        "before_after_code_files": [
          "autoconf/configure.ac||autoconf/configure.ac",
          "configure.ac||configure.ac",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "autoconf/configure.ac||autoconf/configure.ac": [
          "File: autoconf/configure.ac -> autoconf/configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:   [--enable-rtree], [include rtree support [default=yes]])],",
          "162:   [], [enable_rtree=yes])",
          "163: if test x\"$enable_rtree\" = \"xyes\"; then",
          "165: fi",
          "166: #-----------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "164:   BUILD_CFLAGS=\"$BUILD_CFLAGS -DSQLITE_ENABLE_RTREE\"",
          "",
          "[Added Lines]",
          "164:   BUILD_CFLAGS=\"$BUILD_CFLAGS -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_GEOPOLY\"",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "613:   AC_MSG_RESULT([no])",
          "614: fi",
          "616: #########",
          "617: # See whether we should enable Full Text Search extensions",
          "618: AC_ARG_ENABLE(fts3, AC_HELP_STRING([--enable-fts3],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "616: ########",
          "617: # The --enable-extensions argument is short-hand to enable",
          "618: # multiple extensions.",
          "619: AC_ARG_ENABLE(all, AC_HELP_STRING([--enable-all],",
          "620:       [Enable FTS4, FTS5, Geopoly, JSON, RTree, Sessions]))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "622: fi",
          "623: AC_ARG_ENABLE(fts4, AC_HELP_STRING([--enable-fts4],",
          "624:       [Enable the FTS4 extension]))",
          "626:   OPT_FEATURE_FLAGS=\"${OPT_FEATURE_FLAGS} -DSQLITE_ENABLE_FTS4\"",
          "627:   AC_SEARCH_LIBS([log],[m])",
          "628: fi",
          "629: AC_ARG_ENABLE(fts5, AC_HELP_STRING([--enable-fts5],",
          "630:       [Enable the FTS5 extension]))",
          "632:   OPT_FEATURE_FLAGS=\"${OPT_FEATURE_FLAGS} -DSQLITE_ENABLE_FTS5\"",
          "633:   AC_SEARCH_LIBS([log],[m])",
          "634: fi",
          "",
          "[Removed Lines]",
          "625: if test \"${enable_fts4}\" = \"yes\" ; then",
          "631: if test \"${enable_fts5}\" = \"yes\" ; then",
          "",
          "[Added Lines]",
          "631: if test \"${enable_fts4}\" = \"yes\" -o \"${enable_all}\" = \"yes\" ; then",
          "637: if test \"${enable_fts5}\" = \"yes\" -o \"${enable_all}\" = \"yes\" ; then",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "636: #########",
          "637: # See whether we should enable JSON1",
          "638: AC_ARG_ENABLE(json1, AC_HELP_STRING([--enable-json1],[Enable the JSON1 extension]))",
          "640:   OPT_FEATURE_FLAGS=\"${OPT_FEATURE_FLAGS} -DSQLITE_ENABLE_JSON1\"",
          "641: fi",
          "",
          "[Removed Lines]",
          "639: if test \"${enable_json1}\" = \"yes\" ; then",
          "",
          "[Added Lines]",
          "645: if test \"${enable_json1}\" = \"yes\" -o \"${enable_all}\" = \"yes\" ; then",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "654: AC_ARG_ENABLE(geopoly, AC_HELP_STRING([--enable-geopoly],",
          "655:       [Enable the GEOPOLY extension]),",
          "656:       [enable_geopoly=yes],[enable_geopoly=no])",
          "658:   OPT_FEATURE_FLAGS=\"${OPT_FEATURE_FLAGS} -DSQLITE_ENABLE_GEOPOLY\"",
          "659:   enable_rtree=yes",
          "660: fi",
          "",
          "[Removed Lines]",
          "657: if test \"${enable_geopoly}\" = \"yes\" ; then",
          "",
          "[Added Lines]",
          "663: if test \"${enable_geopoly}\" = \"yes\" -o \"${enable_all}\" = \"yes\" ; then",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "671: # See whether we should enable the SESSION extension",
          "672: AC_ARG_ENABLE(session, AC_HELP_STRING([--enable-session],",
          "673:       [Enable the SESSION extension]))",
          "675:   OPT_FEATURE_FLAGS=\"${OPT_FEATURE_FLAGS} -DSQLITE_ENABLE_SESSION\"",
          "676:   OPT_FEATURE_FLAGS=\"${OPT_FEATURE_FLAGS} -DSQLITE_ENABLE_PREUPDATE_HOOK\"",
          "677: fi",
          "",
          "[Removed Lines]",
          "674: if test \"${enable_session}\" = \"yes\" ; then",
          "",
          "[Added Lines]",
          "680: if test \"${enable_session}\" = \"yes\" -o \"${enable_all}\" = \"yes\" ; then",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5e6357fc953a955d8ebb5c1fcd72e04e4ae5e8bf5941810015c2fbc50de70535",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}