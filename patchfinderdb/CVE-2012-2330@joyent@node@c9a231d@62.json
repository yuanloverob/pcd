{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "20ba454ef9e8ff2bb19abb26f9b95265beb98e11",
      "candidate_info": {
        "commit_hash": "20ba454ef9e8ff2bb19abb26f9b95265beb98e11",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/20ba454ef9e8ff2bb19abb26f9b95265beb98e11",
        "files": [
          "src/cares_wrap.cc",
          "src/fs_event_wrap.cc",
          "src/handle_wrap.cc",
          "src/node.cc",
          "src/node.h",
          "src/node_crypto.cc",
          "src/node_file.cc",
          "src/node_zlib.cc",
          "src/pipe_wrap.cc",
          "src/process_wrap.cc",
          "src/stream_wrap.cc",
          "src/tcp_wrap.cc",
          "src/timer_wrap.cc",
          "src/tty_wrap.cc",
          "src/udp_wrap.cc"
        ],
        "message": "Add node::Loop() and don't inc node_isolate.h in *.cc\n\nnode::Loop() replaces the NODE_LOOP macro. This avoids hitting\nv8::Isolate::GetCurrent() for each loop lookup when HAVE_ISOLATE==0",
        "before_after_code_files": [
          "src/cares_wrap.cc||src/cares_wrap.cc",
          "src/fs_event_wrap.cc||src/fs_event_wrap.cc",
          "src/handle_wrap.cc||src/handle_wrap.cc",
          "src/node.cc||src/node.cc",
          "src/node.h||src/node.h",
          "src/node_crypto.cc||src/node_crypto.cc",
          "src/node_file.cc||src/node_file.cc",
          "src/node_zlib.cc||src/node_zlib.cc",
          "src/pipe_wrap.cc||src/pipe_wrap.cc",
          "src/process_wrap.cc||src/process_wrap.cc",
          "src/stream_wrap.cc||src/stream_wrap.cc",
          "src/tcp_wrap.cc||src/tcp_wrap.cc",
          "src/timer_wrap.cc||src/timer_wrap.cc",
          "src/tty_wrap.cc||src/tty_wrap.cc",
          "src/udp_wrap.cc||src/udp_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/cares_wrap.cc||src/cares_wrap.cc": [
          "File: src/cares_wrap.cc -> src/cares_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <assert.h>",
          "23: #include <node.h>",
          "24: #include <req_wrap.h>",
          "26: #include <uv.h>",
          "28: #include <string.h>",
          "",
          "[Removed Lines]",
          "25: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "25: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "609:   if (status) {",
          "612:     argv[0] = Local<Value>::New(Null());",
          "613:   } else {",
          "",
          "[Removed Lines]",
          "611:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "611:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "711:   hints.ai_family = fam;",
          "712:   hints.ai_socktype = SOCK_STREAM;",
          "715:                          &req_wrap->req_,",
          "716:                          AfterGetAddrInfo,",
          "",
          "[Removed Lines]",
          "714:   int r = uv_getaddrinfo(NODE_LOOP(),",
          "",
          "[Added Lines]",
          "714:   int r = uv_getaddrinfo(Loop(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "720:   req_wrap->Dispatched();",
          "722:   if (r) {",
          "724:     delete req_wrap;",
          "725:     return scope.Close(v8::Null());",
          "726:   } else {",
          "",
          "[Removed Lines]",
          "723:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "723:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "737:   assert(r == ARES_SUCCESS);",
          "739:   struct ares_options options;",
          "741:   assert(r == 0);",
          "743:   NODE_SET_METHOD(target, \"queryA\", Query<QueryAWrap>);",
          "",
          "[Removed Lines]",
          "740:   uv_ares_init_options(NODE_LOOP(), &ares_channel, &options, 0);",
          "",
          "[Added Lines]",
          "740:   uv_ares_init_options(Loop(), &ares_channel, &options, 0);",
          "",
          "---------------"
        ],
        "src/fs_event_wrap.cc||src/fs_event_wrap.cc": [
          "File: src/fs_event_wrap.cc -> src/fs_event_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <node.h>",
          "23: #include <handle_wrap.h>",
          "26: #include <stdlib.h>",
          "",
          "[Removed Lines]",
          "24: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "24: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:   String::Utf8Value path(args[0]->ToString());",
          "114:   if (r == 0) {",
          "116:     if (!args[1]->IsTrue()) {",
          "118:     }",
          "119:     wrap->initialized_ = true;",
          "120:   } else {",
          "122:   }",
          "124:   return scope.Close(Integer::New(r));",
          "",
          "[Removed Lines]",
          "113:   int r = uv_fs_event_init(NODE_LOOP(), &wrap->handle_, *path, OnEvent, 0);",
          "117:       uv_unref(NODE_LOOP());",
          "121:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "113:   int r = uv_fs_event_init(Loop(), &wrap->handle_, *path, OnEvent, 0);",
          "117:       uv_unref(Loop());",
          "121:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "148:   if (status) {",
          "150:     eventStr = String::Empty();",
          "151:   }",
          "152:   else if (events & UV_RENAME) {",
          "",
          "[Removed Lines]",
          "149:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "149:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------"
        ],
        "src/handle_wrap.cc||src/handle_wrap.cc": [
          "File: src/handle_wrap.cc -> src/handle_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <node.h>",
          "23: #include <handle_wrap.h>",
          "26: namespace node {",
          "",
          "[Removed Lines]",
          "24: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "24: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:   }",
          "73:   wrap->unref = true;",
          "76:   return v8::Undefined();",
          "77: }",
          "",
          "[Removed Lines]",
          "74:   uv_unref(NODE_LOOP());",
          "",
          "[Added Lines]",
          "74:   uv_unref(Loop());",
          "",
          "---------------"
        ],
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:                  char** argv);",
          "150: static void StartGCTimer () {",
          "151:   if (!uv_is_active((uv_handle_t*) &gc_timer)) {",
          "152:     uv_timer_start(&gc_timer, node::CheckStatus, 5000, 5000);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150: uv_loop_t* Loop() {",
          "151: #if defined(HAVE_ISOLATES) && HAVE_ISOLATES",
          "152:   return Isolate::GetCurrent()->GetLoop();",
          "153: #else",
          "154:   return uv_default_loop();",
          "155: #endif",
          "156: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173: static void Check(uv_check_t* watcher, int status) {",
          "174:   assert(watcher == &gc_check);",
          "177:   tick_time_head = (tick_time_head + 1) % RPM_SAMPLES;",
          "179:   StartGCTimer();",
          "",
          "[Removed Lines]",
          "176:   tick_times[tick_time_head] = uv_now(NODE_LOOP());",
          "",
          "[Added Lines]",
          "185:   tick_times[tick_time_head] = uv_now(Loop());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203:   need_tick_cb = false;",
          "204:   if (uv_is_active((uv_handle_t*) &tick_spinner)) {",
          "205:     uv_idle_stop(&tick_spinner);",
          "207:   }",
          "209:   HandleScope scope;",
          "",
          "[Removed Lines]",
          "206:     uv_unref(NODE_LOOP());",
          "",
          "[Added Lines]",
          "215:     uv_unref(Loop());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "246:   if (!uv_is_active((uv_handle_t*) &tick_spinner)) {",
          "247:     uv_idle_start(&tick_spinner, Spin);",
          "249:   }",
          "250:   return Undefined();",
          "251: }",
          "",
          "[Removed Lines]",
          "248:     uv_ref(NODE_LOOP());",
          "",
          "[Added Lines]",
          "257:     uv_ref(Loop());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1497:     }",
          "1498:   }",
          "",
          "[Removed Lines]",
          "1500:   double d = uv_now(NODE_LOOP()) - TICK_TIME(3);",
          "",
          "[Added Lines]",
          "1509:   double d = uv_now(Loop()) - TICK_TIME(3);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1526: v8::Handle<v8::Value> UVCounters(const v8::Arguments& args) {",
          "1527:   HandleScope scope;",
          "1531:   Local<Object> obj = Object::New();",
          "",
          "[Removed Lines]",
          "1529:   uv_counters_t* c = &NODE_LOOP()->counters;",
          "",
          "[Added Lines]",
          "1538:   uv_counters_t* c = &Loop()->counters;",
          "",
          "---------------"
        ],
        "src/node.h||src/node.h": [
          "File: src/node.h -> src/node.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: #define NODE_STRINGIFY_HELPER(n) #n",
          "76: #endif",
          "80: namespace node {",
          "82: int Start(int argc, char *argv[]);",
          "",
          "[Removed Lines]",
          "78: #define NODE_LOOP() (node::Isolate::GetCurrent()->GetLoop())",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86: void Load(v8::Handle<v8::Object> process);",
          "87: void EmitExit(v8::Handle<v8::Object> process);",
          "89: #define NODE_PSYMBOL(s) \\",
          "90:   v8::Persistent<v8::String>::New(v8::String::NewSymbol(s))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: uv_loop_t* Loop();",
          "",
          "---------------"
        ],
        "src/node_crypto.cc||src/node_crypto.cc": [
          "File: src/node_crypto.cc -> src/node_crypto.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <node.h>",
          "26: #include <node_buffer.h>",
          "28: #include <node_root_certs.h>",
          "30: #include <string.h>",
          "",
          "[Removed Lines]",
          "27: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "27: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4119:   req = new uv_work_t();",
          "4120:   req->data = request;",
          "4123:   return Undefined();",
          "",
          "[Removed Lines]",
          "4121:   uv_queue_work(NODE_LOOP(), req, EIO_PBKDF2, EIO_PBKDF2After);",
          "",
          "[Added Lines]",
          "4121:   uv_queue_work(Loop(), req, EIO_PBKDF2, EIO_PBKDF2After);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4241:     Local<Function> callback_v = Local<Function>(Function::Cast(*args[1]));",
          "4242:     req->callback_ = Persistent<Function>::New(callback_v);",
          "4245:                   &req->work_req_,",
          "4246:                   RandomBytesWork<generator>,",
          "4247:                   RandomBytesAfter<generator>);",
          "",
          "[Removed Lines]",
          "4244:     uv_queue_work(NODE_LOOP(),",
          "",
          "[Added Lines]",
          "4244:     uv_queue_work(Loop(),",
          "",
          "---------------"
        ],
        "src/node_file.cc||src/node_file.cc": [
          "File: src/node_file.cc -> src/node_file.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"node.h\"",
          "23: #include \"node_file.h\"",
          "24: #include \"node_buffer.h\"",
          "26: #ifdef __POSIX__",
          "27: # include \"node_stat_watcher.h\"",
          "28: #endif",
          "",
          "[Removed Lines]",
          "25: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "25: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227: #define ASYNC_CALL(func, callback, ...)                           \\",
          "228:   FSReqWrap* req_wrap = new FSReqWrap();                          \\",
          "230:       __VA_ARGS__, After);                                        \\",
          "231:   assert(r == 0);                                                 \\",
          "232:   req_wrap->object_->Set(oncomplete_sym, callback);               \\",
          "",
          "[Removed Lines]",
          "229:   int r = uv_fs_##func(NODE_LOOP(), &req_wrap->req_,              \\",
          "",
          "[Added Lines]",
          "229:   int r = uv_fs_##func(Loop(), &req_wrap->req_,              \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "236: #define SYNC_CALL(func, path, ...)                                \\",
          "237:   fs_req_wrap req_wrap;                                           \\",
          "239:   if (result < 0) {                                               \\",
          "241:     return ThrowException(UVException(code, #func, \"\", path));    \\",
          "242:   }",
          "",
          "[Removed Lines]",
          "238:   int result = uv_fs_##func(NODE_LOOP(), &req_wrap.req, __VA_ARGS__, NULL); \\",
          "240:     int code = uv_last_error(NODE_LOOP()).code;             \\",
          "",
          "[Added Lines]",
          "238:   int result = uv_fs_##func(Loop(), &req_wrap.req, __VA_ARGS__, NULL); \\",
          "240:     int code = uv_last_error(Loop()).code;             \\",
          "",
          "---------------"
        ],
        "src/node_zlib.cc||src/node_zlib.cc": [
          "File: src/node_zlib.cc -> src/node_zlib.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <node.h>",
          "31: #include <node_buffer.h>",
          "33: #include <req_wrap.h>",
          "35: #include <node_vars.h>",
          "",
          "[Removed Lines]",
          "32: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "32: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:     uv_work_t* work_req = new uv_work_t();",
          "135:     work_req->data = req_wrap;",
          "138:                   work_req,",
          "139:                   ZCtx<mode>::Process,",
          "140:                   ZCtx<mode>::After);",
          "",
          "[Removed Lines]",
          "137:     uv_queue_work(NODE_LOOP(),",
          "",
          "[Added Lines]",
          "137:     uv_queue_work(Loop(),",
          "",
          "---------------"
        ],
        "src/pipe_wrap.cc||src/pipe_wrap.cc": [
          "File: src/pipe_wrap.cc -> src/pipe_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <node.h>",
          "23: #include <node_buffer.h>",
          "25: #include <req_wrap.h>",
          "26: #include <handle_wrap.h>",
          "27: #include <stream_wrap.h>",
          "",
          "[Removed Lines]",
          "24: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "24: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125: PipeWrap::PipeWrap(Handle<Object> object, bool ipc)",
          "126:     : StreamWrap(object, (uv_stream_t*) &handle_) {",
          "128:   assert(r == 0); // How do we proxy this error up to javascript?",
          "130:   handle_.data = reinterpret_cast<void*>(this);",
          "",
          "[Removed Lines]",
          "127:   int r = uv_pipe_init(NODE_LOOP(), &handle_, ipc);",
          "",
          "[Added Lines]",
          "127:   int r = uv_pipe_init(Loop(), &handle_, ipc);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "142:   int r = uv_pipe_bind(&wrap->handle_, *name);",
          "147:   return scope.Close(Integer::New(r));",
          "148: }",
          "",
          "[Removed Lines]",
          "145:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "145:   if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "173:   int r = uv_listen((uv_stream_t*)&wrap->handle_, backlog, OnConnection);",
          "178:   return scope.Close(Integer::New(r));",
          "179: }",
          "",
          "[Removed Lines]",
          "176:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "176:   if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "226:   assert(wrap->object_.IsEmpty() == false);",
          "228:   if (status) {",
          "230:   }",
          "232:   Local<Value> argv[3] = {",
          "",
          "[Removed Lines]",
          "229:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "229:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------"
        ],
        "src/process_wrap.cc||src/process_wrap.cc": [
          "File: src/process_wrap.cc -> src/process_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <node.h>",
          "23: #include <handle_wrap.h>",
          "25: #include <pipe_wrap.h>",
          "26: #include <string.h>",
          "27: #include <stdlib.h>",
          "",
          "[Removed Lines]",
          "24: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "24: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:         Get(String::NewSymbol(\"windowsVerbatimArguments\"))->IsTrue();",
          "177: #endif",
          "181:     wrap->SetHandle((uv_handle_t*)&wrap->process_);",
          "182:     assert(wrap->process_.data == wrap);",
          "",
          "[Removed Lines]",
          "179:     int r = uv_spawn(NODE_LOOP(), &wrap->process_, options);",
          "",
          "[Added Lines]",
          "179:     int r = uv_spawn(Loop(), &wrap->process_, options);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:       delete [] options.env;",
          "197:     }",
          "201:     return scope.Close(Integer::New(r));",
          "202:   }",
          "",
          "[Removed Lines]",
          "199:     if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "199:     if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "211:     int r = uv_process_kill(&wrap->process_, signal);",
          "215:     return scope.Close(Integer::New(r));",
          "216:   }",
          "",
          "[Removed Lines]",
          "213:     if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "213:     if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------"
        ],
        "src/stream_wrap.cc||src/stream_wrap.cc": [
          "File: src/stream_wrap.cc -> src/stream_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <node.h>",
          "23: #include <node_buffer.h>",
          "25: #include <handle_wrap.h>",
          "26: #include <stream_wrap.h>",
          "27: #include <tcp_wrap.h>",
          "",
          "[Removed Lines]",
          "24: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "24: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:   }",
          "138:   return scope.Close(Integer::New(r));",
          "139: }",
          "",
          "[Removed Lines]",
          "136:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "136:   if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147:   int r = uv_read_stop(wrap->stream_);",
          "152:   return scope.Close(Integer::New(r));",
          "153: }",
          "",
          "[Removed Lines]",
          "150:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "150:   if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "226:       slab_used -= buf.len;",
          "227:     }",
          "230:     MakeCallback(wrap->object_, \"onread\", 0, NULL);",
          "231:     return;",
          "232:   }",
          "",
          "[Removed Lines]",
          "229:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "229:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "339:   wrap->UpdateWriteQueueSize();",
          "341:   if (r) {",
          "343:     delete req_wrap;",
          "344:     return scope.Close(v8::Null());",
          "345:   } else {",
          "",
          "[Removed Lines]",
          "342:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "342:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "359:   assert(wrap->object_.IsEmpty() == false);",
          "361:   if (status) {",
          "363:   }",
          "365:   wrap->UpdateWriteQueueSize();",
          "",
          "[Removed Lines]",
          "362:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "362:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "389:   req_wrap->Dispatched();",
          "391:   if (r) {",
          "393:     delete req_wrap;",
          "394:     return scope.Close(v8::Null());",
          "395:   } else {",
          "",
          "[Removed Lines]",
          "392:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "392:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "409:   HandleScope scope;",
          "411:   if (status) {",
          "413:   }",
          "415:   Local<Value> argv[3] = {",
          "",
          "[Removed Lines]",
          "412:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "412:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------"
        ],
        "src/tcp_wrap.cc||src/tcp_wrap.cc": [
          "File: src/tcp_wrap.cc -> src/tcp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <node.h>",
          "23: #include <node_buffer.h>",
          "25: #include <req_wrap.h>",
          "26: #include <handle_wrap.h>",
          "27: #include <stream_wrap.h>",
          "",
          "[Removed Lines]",
          "24: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "24: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156: TCPWrap::TCPWrap(Handle<Object> object)",
          "157:     : StreamWrap(object, (uv_stream_t*) &handle_) {",
          "159:   assert(r == 0); // How do we proxy this error up to javascript?",
          "161:   UpdateWriteQueueSize();",
          "",
          "[Removed Lines]",
          "158:   int r = uv_tcp_init(NODE_LOOP(), &handle_);",
          "",
          "[Added Lines]",
          "158:   int r = uv_tcp_init(Loop(), &handle_);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "184:   Local<Object> sockname = Object::New();",
          "185:   if (r != 0) {",
          "187:   } else {",
          "188:     family = address.ss_family;",
          "",
          "[Removed Lines]",
          "186:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "186:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "226:   Local<Object> sockname = Object::New();",
          "227:   if (r != 0) {",
          "229:   } else {",
          "230:     family = address.ss_family;",
          "",
          "[Removed Lines]",
          "228:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "228:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "259:   int r = uv_tcp_nodelay(&wrap->handle_, 1);",
          "260:   if (r)",
          "263:   return Undefined();",
          "264: }",
          "",
          "[Removed Lines]",
          "261:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "261:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "275:   int r = uv_tcp_keepalive(&wrap->handle_, enable, delay);",
          "276:   if (r)",
          "279:   return Undefined();",
          "280: }",
          "",
          "[Removed Lines]",
          "277:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "277:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "291:   int r = uv_tcp_simultaneous_accepts(&wrap->handle_, enable ? 1 : 0);",
          "292:   if (r)",
          "295:   return Undefined();",
          "296: }",
          "",
          "[Removed Lines]",
          "293:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "293:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "309:   int r = uv_tcp_bind(&wrap->handle_, address);",
          "314:   return scope.Close(Integer::New(r));",
          "315: }",
          "",
          "[Removed Lines]",
          "312:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "312:   if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "327:   int r = uv_tcp_bind6(&wrap->handle_, address);",
          "332:   return scope.Close(Integer::New(r));",
          "333: }",
          "",
          "[Removed Lines]",
          "330:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "330:   if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "343:   int r = uv_listen((uv_stream_t*)&wrap->handle_, backlog, OnConnection);",
          "348:   return scope.Close(Integer::New(r));",
          "349: }",
          "",
          "[Removed Lines]",
          "346:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "346:   if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "379:     argv[0] = client_obj;",
          "380:   } else {",
          "382:     argv[0] = v8::Null();",
          "383:   }",
          "",
          "[Removed Lines]",
          "381:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "381:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "397:   assert(wrap->object_.IsEmpty() == false);",
          "399:   if (status) {",
          "401:   }",
          "403:   Local<Value> argv[3] = {",
          "",
          "[Removed Lines]",
          "400:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "400:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "433:   req_wrap->Dispatched();",
          "435:   if (r) {",
          "437:     delete req_wrap;",
          "438:     return scope.Close(v8::Null());",
          "439:   } else {",
          "",
          "[Removed Lines]",
          "436:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "436:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "460:   req_wrap->Dispatched();",
          "462:   if (r) {",
          "464:     delete req_wrap;",
          "465:     return scope.Close(v8::Null());",
          "466:   } else {",
          "",
          "[Removed Lines]",
          "463:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "463:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------"
        ],
        "src/timer_wrap.cc||src/timer_wrap.cc": [
          "File: src/timer_wrap.cc -> src/timer_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <node.h>",
          "23: #include <handle_wrap.h>",
          "26: #define UNWRAP \\",
          "27:   assert(!args.Holder().IsEmpty()); \\",
          "",
          "[Removed Lines]",
          "24: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "24: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:       : HandleWrap(object, (uv_handle_t*) &handle_) {",
          "93:     active_ = false;",
          "96:     assert(r == 0);",
          "98:     handle_.data = this;",
          "",
          "[Removed Lines]",
          "95:     int r = uv_timer_init(NODE_LOOP(), &handle_);",
          "",
          "[Added Lines]",
          "95:     int r = uv_timer_init(Loop(), &handle_);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:   }",
          "106:   ~TimerWrap() {",
          "108:   }",
          "110:   void StateChange() {",
          "",
          "[Removed Lines]",
          "103:     uv_unref(NODE_LOOP());",
          "107:     if (!active_) uv_ref(NODE_LOOP());",
          "",
          "[Added Lines]",
          "103:     uv_unref(Loop());",
          "107:     if (!active_) uv_ref(Loop());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "114:     if (!was_active && active_) {",
          "118:     } else if (was_active && !active_) {",
          "122:     }",
          "123:   }",
          "",
          "[Removed Lines]",
          "117:       uv_ref(NODE_LOOP());",
          "121:       uv_unref(NODE_LOOP());",
          "",
          "[Added Lines]",
          "117:       uv_ref(Loop());",
          "121:       uv_unref(Loop());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "133:     int r = uv_timer_start(&wrap->handle_, OnTimeout, timeout, repeat);",
          "138:     wrap->StateChange();",
          "",
          "[Removed Lines]",
          "136:     if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "136:     if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "148:     int r = uv_timer_stop(&wrap->handle_);",
          "152:     wrap->StateChange();",
          "",
          "[Removed Lines]",
          "150:     if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "150:     if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "162:     int r = uv_timer_again(&wrap->handle_);",
          "166:     wrap->StateChange();",
          "",
          "[Removed Lines]",
          "164:     if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "164:     if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "188:     int64_t repeat = uv_timer_get_repeat(&wrap->handle_);",
          "192:     return scope.Close(Integer::New(repeat));",
          "193:   }",
          "",
          "[Removed Lines]",
          "190:     if (repeat < 0) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "190:     if (repeat < 0) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------"
        ],
        "src/tty_wrap.cc||src/tty_wrap.cc": [
          "File: src/tty_wrap.cc -> src/tty_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <node.h>",
          "23: #include <node_buffer.h>",
          "25: #include <req_wrap.h>",
          "26: #include <handle_wrap.h>",
          "27: #include <stream_wrap.h>",
          "",
          "[Removed Lines]",
          "24: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "24: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:     int r = uv_tty_get_winsize(&wrap->handle_, &width, &height);",
          "127:     if (r) {",
          "129:       return v8::Undefined();",
          "130:     }",
          "",
          "[Removed Lines]",
          "128:       SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "128:       SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:     int r = uv_tty_set_mode(&wrap->handle_, args[0]->IsTrue());",
          "146:     if (r) {",
          "148:     }",
          "150:     return scope.Close(Integer::New(r));",
          "",
          "[Removed Lines]",
          "147:       SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "147:       SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "171:   TTYWrap(Handle<Object> object, int fd, bool readable)",
          "172:       : StreamWrap(object, (uv_stream_t*)&handle_) {",
          "174:   }",
          "176:   uv_tty_t handle_;",
          "",
          "[Removed Lines]",
          "173:     uv_tty_init(NODE_LOOP(), &handle_, fd, readable);",
          "",
          "[Added Lines]",
          "173:     uv_tty_init(Loop(), &handle_, fd, readable);",
          "",
          "---------------"
        ],
        "src/udp_wrap.cc||src/udp_wrap.cc": [
          "File: src/udp_wrap.cc -> src/udp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <node.h>",
          "23: #include <node_buffer.h>",
          "26: #include <req_wrap.h>",
          "27: #include <handle_wrap.h>",
          "",
          "[Removed Lines]",
          "24: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "24: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105: UDPWrap::UDPWrap(Handle<Object> object): HandleWrap(object,",
          "106:                                                     (uv_handle_t*)&handle_) {",
          "108:   assert(r == 0); // can't fail anyway",
          "109:   handle_.data = reinterpret_cast<void*>(this);",
          "110: }",
          "",
          "[Removed Lines]",
          "107:   int r = uv_udp_init(NODE_LOOP(), &handle_);",
          "",
          "[Added Lines]",
          "107:   int r = uv_udp_init(Loop(), &handle_);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:   }",
          "179:   if (r)",
          "182:   return scope.Close(Integer::New(r));",
          "183: }",
          "",
          "[Removed Lines]",
          "180:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "180:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "234:   req_wrap->Dispatched();",
          "236:   if (r) {",
          "238:     delete req_wrap;",
          "239:     return Null();",
          "240:   }",
          "",
          "[Removed Lines]",
          "237:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "237:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "263:   int r = uv_udp_recv_start(&wrap->handle_, OnAlloc, OnRecv);",
          "266:     return False();",
          "267:   }",
          "",
          "[Removed Lines]",
          "264:   if (r && uv_last_error(NODE_LOOP()).code != UV_EALREADY) {",
          "265:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "264:   if (r && uv_last_error(Loop()).code != UV_EALREADY) {",
          "265:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "298:     return scope.Close(sockname);",
          "299:   }",
          "300:   else {",
          "302:     return Null();",
          "303:   }",
          "304: }",
          "",
          "[Removed Lines]",
          "301:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "301:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "317:   assert(wrap->object_.IsEmpty() == false);",
          "319:   if (status) {",
          "321:   }",
          "323:   Local<Value> argv[4] = {",
          "",
          "[Removed Lines]",
          "320:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "320:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "365:   };",
          "367:   if (nread == -1) {",
          "369:   }",
          "370:   else {",
          "371:     Local<Object> rinfo = Object::New();",
          "",
          "[Removed Lines]",
          "368:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "368:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7b8073afc018901a106564aaf6819b170a9538a",
      "candidate_info": {
        "commit_hash": "c7b8073afc018901a106564aaf6819b170a9538a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c7b8073afc018901a106564aaf6819b170a9538a",
        "files": [
          "lib/child_process.js",
          "test/simple/test-child-process-buffering.js",
          "test/simple/test-child-process-cwd.js",
          "test/simple/test-child-process-stdin.js"
        ],
        "message": "child_process: Separate 'close' event from 'exit'\n\nCurrently, a child process does not emit the 'exit' event until 'close' events\nhave been received on all three of the child's stdio streams.  This change makes\nthe child object emit 'exit' when the child exits, and a new 'close' event when\nall stdio streams are closed.",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js",
          "test/simple/test-child-process-buffering.js||test/simple/test-child-process-buffering.js",
          "test/simple/test-child-process-cwd.js||test/simple/test-child-process-cwd.js",
          "test/simple/test-child-process-stdin.js||test/simple/test-child-process-stdin.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "341:     }",
          "342:   });",
          "346:   return child;",
          "347: };",
          "",
          "[Removed Lines]",
          "344:   child.addListener('exit', exithandler);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "373: };",
          "377:   subprocess._closesGot++;",
          "379:   if (subprocess._closesGot == subprocess._closesNeeded) {",
          "381:   }",
          "382: }",
          "",
          "[Removed Lines]",
          "376: function maybeExit(subprocess) {",
          "380:     subprocess.emit('exit', subprocess.exitCode, subprocess.signalCode);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "413:     self._internal.close();",
          "414:     self._internal = null;",
          "417:   };",
          "418: }",
          "419: util.inherits(ChildProcess, EventEmitter);",
          "",
          "[Removed Lines]",
          "416:     maybeExit(self);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "474:     this.stdout = createSocket(options.stdoutStream, true);",
          "475:     this._closesNeeded++;",
          "476:     this.stdout.on('close', function() {",
          "478:     });",
          "479:   }",
          "",
          "[Removed Lines]",
          "477:       maybeExit(self);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "482:     this.stderr = createSocket(options.stderrStream, true);",
          "483:     this._closesNeeded++;",
          "484:     this.stderr.on('close', function() {",
          "486:     });",
          "487:   }",
          "",
          "[Removed Lines]",
          "485:       maybeExit(self);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-child-process-buffering.js||test/simple/test-child-process-buffering.js": [
          "File: test/simple/test-child-process-buffering.js -> test/simple/test-child-process-buffering.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: var spawn = require('child_process').spawn;",
          "27: var pwd_called = false;",
          "29: function pwd(callback) {",
          "30:   var output = '';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: var childClosed = false;",
          "29: var childExited = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:   child.on('exit', function(c) {",
          "40:     console.log('exit: ' + c);",
          "41:     assert.equal(0, c);",
          "42:     callback(output);",
          "43:     pwd_called = true;",
          "44:   });",
          "45: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:     childExited = true;",
          "45:   });",
          "47:   child.on('close', function () {",
          "50:     childClosed = true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: process.on('exit', function() {",
          "55:   assert.equal(true, pwd_called);",
          "56: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:   assert.equal(true, childExited);",
          "64:   assert.equal(true, childClosed);",
          "",
          "---------------"
        ],
        "test/simple/test-child-process-cwd.js||test/simple/test-child-process-cwd.js": [
          "File: test/simple/test-child-process-cwd.js -> test/simple/test-child-process-cwd.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   });",
          "46:   child.on('exit', function(code, signal) {",
          "48:     assert.strictEqual(forCode, code);",
          "49:     returns--;",
          "50:   });",
          "",
          "[Removed Lines]",
          "47:     forData && assert.strictEqual(forData, data.replace(/[\\s\\r\\n]+$/, ''));",
          "",
          "[Added Lines]",
          "48:   });",
          "50:   child.on('close', function () {",
          "51:     forData && assert.strictEqual(forData, data.replace(/[\\s\\r\\n]+$/, ''));",
          "",
          "---------------"
        ],
        "test/simple/test-child-process-stdin.js||test/simple/test-child-process-stdin.js": [
          "File: test/simple/test-child-process-stdin.js -> test/simple/test-child-process-stdin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: var response = '';",
          "39: var exitStatus = -1;",
          "41: var gotStdoutEOF = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: var closed = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66: cat.on('exit', function(status) {",
          "67:   console.log('exit event');",
          "68:   exitStatus = status;",
          "69:   if (is_windows) {",
          "70:     assert.equal('hello world\\r\\n', response);",
          "71:   } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: });",
          "72: cat.on('close', function () {",
          "73:   closed = true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76: process.on('exit', function() {",
          "77:   assert.equal(0, exitStatus);",
          "78:   if (is_windows) {",
          "79:     assert.equal('hello world\\r\\n', response);",
          "80:   } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:   assert(closed);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bda08bfa044705c1563080cd83cf4c1e5cbda899",
      "candidate_info": {
        "commit_hash": "bda08bfa044705c1563080cd83cf4c1e5cbda899",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/bda08bfa044705c1563080cd83cf4c1e5cbda899",
        "files": [
          "src/node_version.h"
        ],
        "message": "Now working on 0.7.7",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NODE_MAJOR_VERSION 0",
          "30: #define NODE_MINOR_VERSION 7",
          "34: #ifndef NODE_STRINGIFY",
          "35: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "31: #define NODE_PATCH_VERSION 6",
          "32: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "31: #define NODE_PATCH_VERSION 7",
          "32: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75f23655581d6f0ac28bfaa864c1a578b94ffcd7",
      "candidate_info": {
        "commit_hash": "75f23655581d6f0ac28bfaa864c1a578b94ffcd7",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/75f23655581d6f0ac28bfaa864c1a578b94ffcd7",
        "files": [
          "lib/http.js"
        ],
        "message": "Fix #3179 HTTP memory leak using ClientRequest.",
        "before_after_code_files": [
          "lib/http.js||lihttp.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1014:   var method = self.method = (options.method || 'GET').toUpperCase();",
          "1015:   self.path = options.path || '/';",
          "1016:   if (cb) {",
          "1018:   }",
          "1020:   if (!Array.isArray(options.headers)) {",
          "",
          "[Removed Lines]",
          "1017:     self.on('response', cb);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cdb5864fc329b53a2b28fe404679ae72021757b1",
      "candidate_info": {
        "commit_hash": "cdb5864fc329b53a2b28fe404679ae72021757b1",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/cdb5864fc329b53a2b28fe404679ae72021757b1",
        "files": [
          "vcbuild.bat"
        ],
        "message": "Make msbuild run in parallel.",
        "before_after_code_files": [
          "vcbuild.bat||vcbuild.bat"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "vcbuild.bat||vcbuild.bat": [
          "File: vcbuild.bat -> vcbuild.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: :msbuild-found",
          "78: @rem Build the sln with msbuild.",
          "80: if errorlevel 1 goto exit",
          "82: if defined nosign goto msi",
          "",
          "[Removed Lines]",
          "79: msbuild node.sln /t:%target% /p:Configuration=%config% /clp:NoSummary;NoItemAndPropertyList;Verbosity=minimal /nologo",
          "",
          "[Added Lines]",
          "79: msbuild node.sln /m /t:%target% /p:Configuration=%config% /clp:NoSummary;NoItemAndPropertyList;Verbosity=minimal /nologo",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89: if not errorlevel 0 echo Cannot determine current version of node.js & goto exit",
          "90: for /F \"tokens=*\" %%i in (%temp%\\node_version.txt) do set NODE_VERSION=%%i",
          "91: heat dir deps\\npm -var var.NPMSourceDir -dr NodeModulesFolder -cg NPMFiles -gg -template fragment -nologo -out npm.wxs",
          "93: if errorlevel 1 goto exit",
          "95: if defined nosign goto run",
          "",
          "[Removed Lines]",
          "92: msbuild \"%~dp0tools\\msvs\\msi\\nodemsi.sln\" /t:Clean,Build /p:Configuration=%config% /p:NodeVersion=%NODE_VERSION% /clp:NoSummary;NoItemAndPropertyList;Verbosity=minimal /nologo",
          "",
          "[Added Lines]",
          "92: msbuild \"%~dp0tools\\msvs\\msi\\nodemsi.sln\" /m /t:Clean,Build /p:Configuration=%config% /p:NodeVersion=%NODE_VERSION% /clp:NoSummary;NoItemAndPropertyList;Verbosity=minimal /nologo",
          "",
          "---------------"
        ]
      }
    }
  ]
}