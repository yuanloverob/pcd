{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1d2a18ec34fb9f2fbdaa1a28e89f1eff1654a45f",
      "candidate_info": {
        "commit_hash": "1d2a18ec34fb9f2fbdaa1a28e89f1eff1654a45f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1d2a18ec34fb9f2fbdaa1a28e89f1eff1654a45f",
        "files": [
          "crypto/evp/evp_enc.c"
        ],
        "message": "Restore EVP_CIPH_FLAG_LENGTH_BITS working properly\n\nEVP_CIPH_FLAG_LENGTH_BITS flag for CFB1 has been broken with the\nintroduction of the is_partially_overlapping() check that did not take\nit into the account (treating number of bits passed as bytes). This\nremedies that and allows this flag to work as intended.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1942)\n(cherry picked from commit 64846096b18340b9a39ddd29a7a0e23c56f22959)",
        "before_after_code_files": [
          "crypto/evp/evp_enc.c||crypto/evp/evp_enc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/evp/evp_enc.c||crypto/evp/evp_enc.c": [
          "File: crypto/evp/evp_enc.c -> crypto/evp/evp_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "295: int EVP_EncryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl,",
          "296:                       const unsigned char *in, int inl)",
          "297: {",
          "300:     bl = ctx->cipher->block_size;",
          "302:     if (ctx->cipher->flags & EVP_CIPH_FLAG_CUSTOM_CIPHER) {",
          "305:             EVPerr(EVP_F_EVP_ENCRYPTUPDATE, EVP_R_PARTIALLY_OVERLAPPING);",
          "306:             return 0;",
          "307:         }",
          "",
          "[Removed Lines]",
          "298:     int i, j, bl;",
          "304:         if (bl == 1 && is_partially_overlapping(out, in, inl)) {",
          "",
          "[Added Lines]",
          "298:     int i, j, bl, cmpl = inl;",
          "300:     if (EVP_CIPHER_CTX_test_flags(ctx, EVP_CIPH_FLAG_LENGTH_BITS))",
          "301:         cmpl = (cmpl + 7) / 8;",
          "307:         if (bl == 1 && is_partially_overlapping(out, in, cmpl)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "319:         return inl == 0;",
          "320:     }",
          "322:         EVPerr(EVP_F_EVP_ENCRYPTUPDATE, EVP_R_PARTIALLY_OVERLAPPING);",
          "323:         return 0;",
          "324:     }",
          "",
          "[Removed Lines]",
          "321:     if (is_partially_overlapping(out + ctx->buf_len, in, inl)) {",
          "",
          "[Added Lines]",
          "324:     if (is_partially_overlapping(out + ctx->buf_len, in, cmpl)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "418: int EVP_DecryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl,",
          "419:                       const unsigned char *in, int inl)",
          "420: {",
          "422:     unsigned int b;",
          "424:     b = ctx->cipher->block_size;",
          "426:     if (ctx->cipher->flags & EVP_CIPH_FLAG_CUSTOM_CIPHER) {",
          "428:             EVPerr(EVP_F_EVP_DECRYPTUPDATE, EVP_R_PARTIALLY_OVERLAPPING);",
          "429:             return 0;",
          "430:         }",
          "",
          "[Removed Lines]",
          "421:     int fix_len;",
          "427:         if (b == 1 && is_partially_overlapping(out, in, inl)) {",
          "",
          "[Added Lines]",
          "424:     int fix_len, cmpl = inl;",
          "429:     if (EVP_CIPHER_CTX_test_flags(ctx, EVP_CIPH_FLAG_LENGTH_BITS))",
          "430:         cmpl = (cmpl + 7) / 8;",
          "433:         if (b == 1 && is_partially_overlapping(out, in, cmpl)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a05053cdf45e30d34161d5a1ab68fa6f757bbc27",
      "candidate_info": {
        "commit_hash": "a05053cdf45e30d34161d5a1ab68fa6f757bbc27",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a05053cdf45e30d34161d5a1ab68fa6f757bbc27",
        "files": [
          "engines/e_capi.c"
        ],
        "message": "engines/e_capi.c: slip in PROV_RSA_AES for interchangable CSP only.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3034)\n\n(cherry picked from commit 8ab9af5e28032478dd130467751b2e241eaee719)",
        "before_after_code_files": [
          "engines/e_capi.c||engines/e_capi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "engines/e_capi.c||engines/e_capi.c": [
          "File: engines/e_capi.c -> engines/e_capi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "398: # endif",
          "400: static int use_aes_csp = 0;",
          "402: static int capi_init(ENGINE *e)",
          "403: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "401: static const WCHAR rsa_aes_cspname[] =",
          "402:     L\"Microsoft Enhanced RSA and AES Cryptographic Provider\";",
          "403: static const WCHAR rsa_enh_cspname[] =",
          "404:     L\"Microsoft Enhanced Cryptographic Provider v1.0\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "472:     }",
          "473: # endif",
          "478:                              CRYPT_VERIFYCONTEXT)) {",
          "479:         use_aes_csp = 1;",
          "480:         CryptReleaseContext(hprov, 0);",
          "",
          "[Removed Lines]",
          "477:     if (CryptAcquireContextW(&hprov, NULL, NULL, PROV_RSA_AES,",
          "",
          "[Added Lines]",
          "480:     if (CryptAcquireContextW(&hprov, NULL, rsa_aes_cspname, PROV_RSA_AES,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1459: }",
          "1461: static CAPI_KEY *capi_get_key(CAPI_CTX *ctx, const WCHAR *contname,",
          "1463: {",
          "1464:     DWORD dwFlags = 0;",
          "1465:     CAPI_KEY *key = OPENSSL_malloc(sizeof(*key));",
          "",
          "[Removed Lines]",
          "1462:                               WCHAR *provname, DWORD ptype, DWORD keyspec)",
          "",
          "[Added Lines]",
          "1465:                               const WCHAR *provname, DWORD ptype,",
          "1466:                               DWORD keyspec)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1467:     if (key == NULL)",
          "1468:         return NULL;",
          "1472:         ptype = PROV_RSA_AES;",
          "1479:         char *_contname = wide_to_asc(contname);",
          "1480:         char *_provname = wide_to_asc(provname);",
          "",
          "[Removed Lines]",
          "1470:     if (ptype == PROV_RSA_FULL && use_aes_csp) {",
          "1471:         provname = NULL;",
          "1473:         CAPI_trace(ctx, \"capi_get_key, contname=%s, RSA_AES_CSP\\n\", contname);",
          "1474:     } else if (sizeof(TCHAR) == sizeof(char)) {",
          "1475:         CAPI_trace(ctx, \"capi_get_key, contname=%s, provname=%s, type=%d\\n\",",
          "1476:                    contname, provname, ptype);",
          "1477:     } else if (ctx && ctx->debug_level >= CAPI_DBG_TRACE && ctx->debug_file) {",
          "",
          "[Added Lines]",
          "1474:     if (ptype == PROV_RSA_FULL && use_aes_csp &&",
          "1475:         wcscmp(provname, rsa_enh_cspname) == 0) {",
          "1476:         provname = rsa_aes_cspname;",
          "1478:     }",
          "1479:     if (ctx && ctx->debug_level >= CAPI_DBG_TRACE && ctx->debug_file) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a39aa18644d3338087a827c6555b18bc857346fe",
      "candidate_info": {
        "commit_hash": "a39aa18644d3338087a827c6555b18bc857346fe",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a39aa18644d3338087a827c6555b18bc857346fe",
        "files": [
          "crypto/dh/dh_check.c",
          "include/openssl/dh.h",
          "ssl/statem/statem_clnt.c",
          "util/libcrypto.num"
        ],
        "message": "Better check of DH parameters in TLS data\n\nWhen the client reads DH parameters from the TLS stream, we only\nchecked that they all are non-zero.  This change updates the check to\nuse DH_check_params()\n\nDH_check_params() is a new function for light weight checking of the p\nand g parameters:\n\n    check that p is odd\n    check that 1 < g < p - 1\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>",
        "before_after_code_files": [
          "crypto/dh/dh_check.c||crypto/dh/dh_check.c",
          "include/openssl/dh.h||include/openssl/dh.h",
          "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c",
          "util/libcrypto.num||util/libcrypto.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/dh/dh_check.c||crypto/dh/dh_check.c": [
          "File: crypto/dh/dh_check.c -> crypto/dh/dh_check.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include <openssl/bn.h>",
          "13: #include \"dh_locl.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: int DH_check_params(const DH *dh, int *ret)",
          "23: {",
          "24:     int ok = 0;",
          "25:     BIGNUM *tmp = NULL;",
          "26:     BN_CTX *ctx = NULL;",
          "29:     ctx = BN_CTX_new();",
          "30:     if (ctx == NULL)",
          "31:         goto err;",
          "32:     BN_CTX_start(ctx);",
          "33:     tmp = BN_CTX_get(ctx);",
          "34:     if (tmp == NULL)",
          "35:         goto err;",
          "37:     if (!BN_is_odd(dh->p))",
          "39:     if (BN_is_negative(dh->g) || BN_is_zero(dh->g) || BN_is_one(dh->g))",
          "41:     if (BN_copy(tmp, dh->p) == NULL || !BN_sub_word(tmp, 1))",
          "42:         goto err;",
          "43:     if (BN_cmp(dh->g, tmp) >= 0)",
          "46:     ok = 1;",
          "47:  err:",
          "48:     if (ctx != NULL) {",
          "49:         BN_CTX_end(ctx);",
          "50:         BN_CTX_free(ctx);",
          "51:     }",
          "52:     return (ok);",
          "53: }",
          "",
          "---------------"
        ],
        "include/openssl/dh.h||include/openssl/dh.h": [
          "File: include/openssl/dh.h -> include/openssl/dh.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "124: int DH_generate_parameters_ex(DH *dh, int prime_len, int generator,",
          "125:                               BN_GENCB *cb);",
          "127: int DH_check(const DH *dh, int *codes);",
          "128: int DH_check_pub_key(const DH *dh, const BIGNUM *pub_key, int *codes);",
          "129: int DH_generate_key(DH *dh);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127: int DH_check_params(const DH *dh, int *ret);",
          "",
          "---------------"
        ],
        "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
          "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1414:     DH *dh = NULL;",
          "1415:     BIGNUM *p = NULL, *g = NULL, *bnpub_key = NULL;",
          "1417:     if (!PACKET_get_length_prefixed_2(pkt, &prime)",
          "1418:         || !PACKET_get_length_prefixed_2(pkt, &generator)",
          "1419:         || !PACKET_get_length_prefixed_2(pkt, &pub_key)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1417:     int check_bits = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1441:         goto err;",
          "1442:     }",
          "1446:         SSLerr(SSL_F_TLS_PROCESS_SKE_DHE, SSL_R_BAD_DH_VALUE);",
          "1447:         goto err;",
          "",
          "[Removed Lines]",
          "1444:     if (BN_is_zero(p) || BN_is_zero(g) || BN_is_zero(bnpub_key)) {",
          "",
          "[Added Lines]",
          "1447:     if (BN_is_zero(bnpub_key)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1454:     }",
          "1455:     p = g = NULL;",
          "1457:     if (!DH_set0_key(dh, bnpub_key, NULL)) {",
          "1459:         SSLerr(SSL_F_TLS_PROCESS_SKE_DHE, ERR_R_BN_LIB);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1460:     if (DH_check_params(dh, &check_bits) == 0 || check_bits != 0) {",
          "1462:         SSLerr(SSL_F_TLS_PROCESS_SKE_DHE, SSL_R_BAD_DH_VALUE);",
          "1463:         goto err;",
          "1464:     }",
          "",
          "---------------"
        ],
        "util/libcrypto.num||util/libcrypto.num": [
          "File: util/libcrypto.num -> util/libcrypto.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4213: X509_VERIFY_PARAM_set_inh_flags         4174 1_1_0d EXIST::FUNCTION:",
          "4214: X509_VERIFY_PARAM_get_inh_flags         4175 1_1_0d EXIST::FUNCTION:",
          "4215: X509_VERIFY_PARAM_get_time              4181 1_1_0d EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4216: DH_check_params                         4183 1_1_0d EXIST::FUNCTION:DH",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dfb109c522a450af7f387d66ad32afeee87f9805",
      "candidate_info": {
        "commit_hash": "dfb109c522a450af7f387d66ad32afeee87f9805",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/dfb109c522a450af7f387d66ad32afeee87f9805",
        "files": [
          "crypto/bn/bn_shift.c"
        ],
        "message": "bn: fix occurance of negative zero in BN_rshift1()\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit 0a2dcb6990dacc94337f746f4f4a6dfac1fbeac4)",
        "before_after_code_files": [
          "crypto/bn/bn_shift.c||crypto/bn/bn_shift.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/bn/bn_shift.c||crypto/bn/bn_shift.c": [
          "File: crypto/bn/bn_shift.c -> crypto/bn/bn_shift.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:         c = (t & 1) ? BN_TBIT : 0;",
          "75:     }",
          "76:     r->top = j;",
          "77:     bn_check_top(r);",
          "78:     return (1);",
          "79: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     if (!r->top)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1d2ea3a54527996e9425de807143b061206e0ab",
      "candidate_info": {
        "commit_hash": "e1d2ea3a54527996e9425de807143b061206e0ab",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e1d2ea3a54527996e9425de807143b061206e0ab",
        "files": [
          "crypto/x509v3/v3_purp.c"
        ],
        "message": "Fix for #2730. Add CRLDP extension to list of supported extensions\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3087)\n(cherry picked from commit e6f648fd880369e186039501c960809b17f96e88)",
        "before_after_code_files": [
          "crypto/x509v3/v3_purp.c||crypto/x509v3/v3_purp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x509v3/v3_purp.c||crypto/x509v3/v3_purp.c": [
          "File: crypto/x509v3/v3_purp.c -> crypto/x509v3/v3_purp.c"
        ]
      }
    }
  ]
}