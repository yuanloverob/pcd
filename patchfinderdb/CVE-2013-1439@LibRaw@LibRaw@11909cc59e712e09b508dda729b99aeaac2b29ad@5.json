{
  "cve_id": "CVE-2013-1439",
  "cve_desc": "The \"faster LJPEG decoder\" in libraw 0.13.x, 0.14.x, and 0.15.x before 0.15.4 allows context-dependent attackers to cause a denial of service (NULL pointer dereference) via a crafted photo file.",
  "repo": "LibRaw/LibRaw",
  "patch_hash": "11909cc59e712e09b508dda729b99aeaac2b29ad",
  "patch_info": {
    "commit_hash": "11909cc59e712e09b508dda729b99aeaac2b29ad",
    "repo": "LibRaw/LibRaw",
    "commit_url": "https://github.com/LibRaw/LibRaw/commit/11909cc59e712e09b508dda729b99aeaac2b29ad",
    "files": [
      "Changelog.txt",
      "Makefile.devel",
      "dcraw/dcraw.c",
      "internal/dcraw_common.cpp",
      "internal/dcraw_fileio.cpp",
      "libraw/libraw_version.h",
      "src/libraw_datastream.cpp"
    ],
    "message": "cumulated data checks patch",
    "before_after_code_files": [
      "Makefile.devel||Makefile.devel",
      "dcraw/dcraw.c||dcraw/dcraw.c",
      "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
      "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp",
      "libraw/libraw_version.h||libraw/libraw_version.h",
      "src/libraw_datastream.cpp||src/libraw_datastream.cpp"
    ]
  },
  "patch_diff": {
    "Makefile.devel||Makefile.devel": [
      "File: Makefile.devel -> Makefile.devel",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: CC=gcc",
      "6: CXX=g++",
      "8: # RawSpeed Support",
      "19: # LCMS support",
      "",
      "[Removed Lines]",
      "9: CFLAGS+=-DUSE_RAWSPEED -I../RawSpeed -I/usr/local/include/libxml2",
      "10: LDADD+=-L../RawSpeed/RawSpeed/release -lrawspeed -L/usr/local/include -ljpeg -lxml2",
      "11: RAWSPEED_DATA=../RawSpeed/data/cameras.xml",
      "14: CC=gcc48",
      "15: CXX=g++48",
      "16: CFLAGS+= -O4 -g -march=corei7 -mtune=corei7 -I. -pedantic  -Wno-long-long -Wno-overflow -msse4.2 -mfpmath=sse  -fopenmp",
      "",
      "[Added Lines]",
      "7: CFLAGS+= -O -g -I.",
      "10: #CFLAGS+=-DUSE_RAWSPEED -I../RawSpeed -I/usr/local/include/libxml2",
      "11: #LDADD+=-L../RawSpeed/RawSpeed/release -lrawspeed -L/usr/local/include -ljpeg -lxml2",
      "12: #RAWSPEED_DATA=../RawSpeed/data/cameras.xml",
      "15: #CC=gcc48",
      "16: #CXX=g++48",
      "17: #CFLAGS+= -O -g -I. -march=corei7 -mtune=corei7 -I. -pedantic  -Wno-long-long -Wno-overflow -msse4.2 -mfpmath=sse  -fopenmp",
      "",
      "---------------"
    ],
    "dcraw/dcraw.c||dcraw/dcraw.c": [
      "File: dcraw/dcraw.c -> dcraw/dcraw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "877: {",
      "878:   int len, diff;",
      "880:   len = gethuff(huff);",
      "881:   if (len == 16 && (!dng_version || dng_version >= 0x1010000))",
      "882:     return -32768;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "880: #ifdef LIBRAW_LIBRARY_BUILD",
      "881:   if(!huff)",
      "882:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "883: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "891: {",
      "892:   int len, diff;",
      "894:   len = bits._gethuff_lj(buf,*huff,huff+1);",
      "895:   if (len == 16 && (!dng_version || dng_version >= 0x1010000))",
      "896:     return -32768;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "899:   if(!huff || !buf)",
      "900:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1010:   }",
      "1011: #endif",
      "1014:   if (!ljpeg_start (&jh, 0)) return;",
      "1015:   jwide = jh.wide * jh.clrs;",
      "1017: #ifdef LIBRAW_LIBRARY_BUILD",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1022: #ifdef LIBRAW_LIBRARY_BUILD",
      "1023:   if(jh.wide<1 || jh.high<1 || jh.clrs<1 || jh.bits <1)",
      "1024:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "1025: #endif",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1028:       }",
      "1030:   slices = slicesWcnt * jh.high;",
      "1031:   offset = (unsigned*)calloc(slices+1,sizeof(offset[0]));",
      "1033:   for(slice=0;slice<slices;slice++)",
      "1034:       {",
      "1035:           offset[slice] = (t_x + t_y * raw_width)| (t_s<<28);",
      "1036:           if((offset[slice] & 0x0fffffff) >= raw_width * raw_height)",
      "1037:               throw LIBRAW_EXCEPTION_IO_BADFILE;",
      "1038:           t_y++;",
      "1039:           if(t_y == jh.high)",
      "1040:               {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if(!slices)",
      "1043:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "1051:             {",
      "1052:               free(offset);",
      "1054:             }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1087:               pixno++;",
      "1088:               if (0 == --pixelsInSlice)",
      "1089:                   {",
      "1090:                       unsigned o = offset[slice++];",
      "1091:                       pixno = o & 0x0fffffff;",
      "1092:                       pixelsInSlice = slicesW[o>>28];",
      "1093:                   }",
      "1094:           }",
      "1095: #endif",
      "1096:       if (raw_width == 3984 && (col -= 2) < 0)",
      "1097:  col += (row--,raw_width);",
      "1098:       if (row >= 0) RAW(row,col) = val;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1107:                     if(slice > slices)",
      "1108:                       {",
      "1109:                         free(offset);",
      "1110:                         throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "1111:                       }",
      "1119:       if(row>raw_height)",
      "1120: #ifdef LIBRAW_LIBRARY_BUILD",
      "1121:       {",
      "1122:         free(offset);",
      "1123:         throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "1124:       }",
      "1125: #else",
      "1126:         longjmp (failure, 3);",
      "1127: #endif",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "6513:  break;",
      "6517:    num += getreal(type);",
      "6518:  black += num/len + 0.5;",
      "6519:  break;",
      "",
      "[Removed Lines]",
      "6516:  for (num=i=0; i < len; i++)",
      "",
      "[Added Lines]",
      "6549:  for (num=i=0; i < len && i < 65536; i++)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "6646:   if (thumb_offset) {",
      "6647:     fseek (ifp, thumb_offset, SEEK_SET);",
      "6648:     if (ljpeg_start (&jh, 1)) {",
      "6652:     }",
      "6653:   }",
      "6654:   for (i=0; i < tiff_nifds; i++) {",
      "",
      "[Removed Lines]",
      "6649:       thumb_misc   = jh.bits;",
      "6650:       thumb_width  = jh.wide;",
      "6651:       thumb_height = jh.high;",
      "",
      "[Added Lines]",
      "6682:       if((unsigned)jh.bits<17 && (unsigned)jh.wide < 0x10000 && (unsigned)jh.high < 0x10000)",
      "6683:         {",
      "6684:           thumb_misc   = jh.bits;",
      "6685:           thumb_width  = jh.wide;",
      "6686:           thumb_height = jh.high;",
      "6687:         }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "6656:  max_samp = tiff_ifd[i].samples;",
      "6657:     if (max_samp > 3) max_samp = 3;",
      "6658:     if ((tiff_ifd[i].comp != 6 || tiff_ifd[i].samples != 3) &&",
      "6660:  tiff_ifd[i].t_width*tiff_ifd[i].t_height > raw_width*raw_height) {",
      "6661:       raw_width     = tiff_ifd[i].t_width;",
      "6662:       raw_height    = tiff_ifd[i].t_height;",
      "",
      "[Removed Lines]",
      "6659:  (tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
      "",
      "[Added Lines]",
      "6695:         unsigned(tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
      "6696:         (unsigned)tiff_ifd[i].bps < 33 && (unsigned)tiff_ifd[i].samples < 13 &&",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "6743:       is_raw = 0;",
      "6744:   for (i=0; i < tiff_nifds; i++)",
      "6745:     if (i != raw && tiff_ifd[i].samples == max_samp &&",
      "6746:  tiff_ifd[i].t_width * tiff_ifd[i].t_height / SQR(tiff_ifd[i].bps+1) >",
      "6747:        thumb_width *       thumb_height / SQR(thumb_misc+1)",
      "6748:  && tiff_ifd[i].comp != 34892) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6783:         tiff_ifd[i].bps>0 && tiff_ifd[i].bps < 33 &&",
      "6784:        unsigned(tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
      "",
      "---------------"
    ],
    "internal/dcraw_common.cpp||internal/dcraw_common.cpp": [
      "File: internal/dcraw_common.cpp -> internal/dcraw_common.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "611: {",
      "612:   int len, diff;",
      "614:   len = gethuff(huff);",
      "615:   if (len == 16 && (!dng_version || dng_version >= 0x1010000))",
      "616:     return -32768;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "614: #ifdef LIBRAW_LIBRARY_BUILD",
      "615:   if(!huff)",
      "616:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "617: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "625: {",
      "626:   int len, diff;",
      "628:   len = bits._gethuff_lj(buf,*huff,huff+1);",
      "629:   if (len == 16 && (!dng_version || dng_version >= 0x1010000))",
      "630:     return -32768;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "633:   if(!huff || !buf)",
      "634:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "744:   }",
      "745: #endif",
      "748:   if (!ljpeg_start (&jh, 0)) return;",
      "749:   jwide = jh.wide * jh.clrs;",
      "751: #ifdef LIBRAW_LIBRARY_BUILD",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "756: #ifdef LIBRAW_LIBRARY_BUILD",
      "757:   if(jh.wide<1 || jh.high<1 || jh.clrs<1 || jh.bits <1)",
      "758:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "759: #endif",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "762:       }",
      "764:   slices = slicesWcnt * jh.high;",
      "765:   offset = (unsigned*)calloc(slices+1,sizeof(offset[0]));",
      "767:   for(slice=0;slice<slices;slice++)",
      "768:       {",
      "769:           offset[slice] = (t_x + t_y * raw_width)| (t_s<<28);",
      "770:           if((offset[slice] & 0x0fffffff) >= raw_width * raw_height)",
      "771:               throw LIBRAW_EXCEPTION_IO_BADFILE;",
      "772:           t_y++;",
      "773:           if(t_y == jh.high)",
      "774:               {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "776:   if(!slices)",
      "777:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "785:             {",
      "786:               free(offset);",
      "788:             }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "821:               pixno++;",
      "822:               if (0 == --pixelsInSlice)",
      "823:                   {",
      "824:                       unsigned o = offset[slice++];",
      "825:                       pixno = o & 0x0fffffff;",
      "826:                       pixelsInSlice = slicesW[o>>28];",
      "827:                   }",
      "828:           }",
      "829: #endif",
      "830:       if (raw_width == 3984 && (col -= 2) < 0)",
      "831:  col += (row--,raw_width);",
      "832:       if (row >= 0) RAW(row,col) = val;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "841:                     if(slice > slices)",
      "842:                       {",
      "843:                         free(offset);",
      "844:                         throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "845:                       }",
      "853:       if(row>raw_height)",
      "854: #ifdef LIBRAW_LIBRARY_BUILD",
      "855:       {",
      "856:         free(offset);",
      "857:         throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "858:       }",
      "859: #else",
      "860:         longjmp (failure, 3);",
      "861: #endif",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1283:     if (tail[i]) nz++;",
      "1284:   return nz > 20;",
      "1285: }",
      "1287: void CLASS ppm_thumb()",
      "1288: {",
      "1289:   char *thumb;",
      "",
      "[Removed Lines]",
      "1286: #line 1557 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "1318: #line 1589 \"dcraw/dcraw.c\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2865:   jas_stream_close (in);",
      "2866: #endif",
      "2867: }",
      "2869: void CLASS crop_masked_pixels()",
      "2870: {",
      "2871:   int row, col;",
      "",
      "[Removed Lines]",
      "2868: #line 3846 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "2900: #line 3878 \"dcraw/dcraw.c\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2965:   RUN_CALLBACK(LIBRAW_PROGRESS_REMOVE_ZEROES,1,2);",
      "2966: #endif",
      "2967: }",
      "2969: void CLASS gamma_curve (double pwr, double ts, int mode, int imax)",
      "2970: {",
      "2971:   int i;",
      "",
      "[Removed Lines]",
      "2968: #line 4111 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "3000: #line 4143 \"dcraw/dcraw.c\"",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "4460:     fseek (ifp, save, SEEK_SET);",
      "4461:   }",
      "4462: }",
      "4464: void CLASS parse_makernote (int base, int uptag)",
      "4465: {",
      "4466:   static const uchar xlat[2][256] = {",
      "",
      "[Removed Lines]",
      "4463: #line 5610 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "4495: #line 5642 \"dcraw/dcraw.c\"",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "4975:     fseek (ifp, save, SEEK_SET);",
      "4976:   }",
      "4977: }",
      "4979: int CLASS parse_tiff_ifd (int base)",
      "4980: {",
      "4981:   unsigned entries, tag, type, len, plen=16, save;",
      "",
      "[Removed Lines]",
      "4978: #line 6130 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "5010: #line 6162 \"dcraw/dcraw.c\"",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "5362:  break;",
      "5366:    num += getreal(type);",
      "5367:  black += num/len + 0.5;",
      "5368:  break;",
      "",
      "[Removed Lines]",
      "5365:  for (num=i=0; i < len; i++)",
      "",
      "[Added Lines]",
      "5398:  for (num=i=0; i < len && i < 65536; i++)",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "5495:   if (thumb_offset) {",
      "5496:     fseek (ifp, thumb_offset, SEEK_SET);",
      "5497:     if (ljpeg_start (&jh, 1)) {",
      "5501:     }",
      "5502:   }",
      "5503:   for (i=0; i < tiff_nifds; i++) {",
      "",
      "[Removed Lines]",
      "5498:       thumb_misc   = jh.bits;",
      "5499:       thumb_width  = jh.wide;",
      "5500:       thumb_height = jh.high;",
      "",
      "[Added Lines]",
      "5531:       if((unsigned)jh.bits<17 && (unsigned)jh.wide < 0x10000 && (unsigned)jh.high < 0x10000)",
      "5532:         {",
      "5533:           thumb_misc   = jh.bits;",
      "5534:           thumb_width  = jh.wide;",
      "5535:           thumb_height = jh.high;",
      "5536:         }",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "5505:  max_samp = tiff_ifd[i].samples;",
      "5506:     if (max_samp > 3) max_samp = 3;",
      "5507:     if ((tiff_ifd[i].comp != 6 || tiff_ifd[i].samples != 3) &&",
      "5509:  tiff_ifd[i].t_width*tiff_ifd[i].t_height > raw_width*raw_height) {",
      "5510:       raw_width     = tiff_ifd[i].t_width;",
      "5511:       raw_height    = tiff_ifd[i].t_height;",
      "",
      "[Removed Lines]",
      "5508:  (tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
      "",
      "[Added Lines]",
      "5544:         unsigned(tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
      "5545:         (unsigned)tiff_ifd[i].bps < 33 && (unsigned)tiff_ifd[i].samples < 13 &&",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "5592:       is_raw = 0;",
      "5593:   for (i=0; i < tiff_nifds; i++)",
      "5594:     if (i != raw && tiff_ifd[i].samples == max_samp &&",
      "5595:  tiff_ifd[i].t_width * tiff_ifd[i].t_height / SQR(tiff_ifd[i].bps+1) >",
      "5596:        thumb_width *       thumb_height / SQR(thumb_misc+1)",
      "5597:  && tiff_ifd[i].comp != 34892) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5632:         tiff_ifd[i].bps>0 && tiff_ifd[i].bps < 33 &&",
      "5633:        unsigned(tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "6233:     data_offset = get4();",
      "6234:   }",
      "6235: }",
      "6237: char * CLASS foveon_gets (int offset, char *str, int len)",
      "6238: {",
      "6239:   int i;",
      "",
      "[Removed Lines]",
      "6236: #line 7390 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "6275: #line 7429 \"dcraw/dcraw.c\"",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "6334:   }",
      "6335:   is_foveon = 1;",
      "6336: }",
      "6339:    All matrices are from Adobe DNG Converter unless otherwise noted.",
      "",
      "[Removed Lines]",
      "6337: #line 7493 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "6376: #line 7532 \"dcraw/dcraw.c\"",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "8981: }",
      "8985: void CLASS convert_to_rgb()",
      "8986: {",
      "8987: #ifndef LIBRAW_LIBRARY_BUILD",
      "",
      "[Removed Lines]",
      "8984: #line 10231 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "9023: #line 10270 \"dcraw/dcraw.c\"",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "9212:   if (flip & 1) col = iwidth  - 1 - col;",
      "9213:   return row * iwidth + col;",
      "9214: }",
      "9216: void CLASS tiff_set (ushort *ntag,",
      "9217:  ushort tag, ushort type, int count, int val)",
      "9218: {",
      "",
      "[Removed Lines]",
      "9215: #line 10487 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "9254: #line 10526 \"dcraw/dcraw.c\"",
      "",
      "---------------"
    ],
    "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp": [
      "File: internal/dcraw_fileio.cpp -> internal/dcraw_fileio.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "21:    for more information",
      "25: #include <math.h>",
      "26: #define CLASS LibRaw::",
      "27: #include \"libraw/libraw_types.h\"",
      "",
      "[Removed Lines]",
      "24: #line 3948 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "24: #line 3980 \"dcraw/dcraw.c\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "29: #include \"libraw/libraw.h\"",
      "30: #include \"internal/defines.h\"",
      "31: #include \"internal/var_defines.h\"",
      "34:    Seach from the current directory up to the root looking for",
      "35:    a \".badpixels\" file, and fix those pixels now.",
      "",
      "[Removed Lines]",
      "32: #line 3959 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "32: #line 3991 \"dcraw/dcraw.c\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "54: #endif",
      "55:   if (cfname)",
      "56:     fp = fopen (cfname, \"r\");",
      "58:   if (!fp)",
      "59:       {",
      "60: #ifdef LIBRAW_LIBRARY_BUILD",
      "",
      "[Removed Lines]",
      "57: #line 4009 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "57: #line 4041 \"dcraw/dcraw.c\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "154:   RUN_CALLBACK(LIBRAW_PROGRESS_DARK_FRAME,1,2);",
      "155: #endif",
      "156: }",
      "158: #ifndef NO_LCMS",
      "159: void CLASS apply_profile (const char *input, const char *output)",
      "160: {",
      "",
      "[Removed Lines]",
      "157: #line 10142 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "157: #line 10181 \"dcraw/dcraw.c\"",
      "",
      "---------------"
    ],
    "libraw/libraw_version.h||libraw/libraw_version.h": [
      "File: libraw/libraw_version.h -> libraw/libraw_version.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #define LIBRAW_MAJOR_VERSION  0",
      "27: #define LIBRAW_MINOR_VERSION  15",
      "29: #define LIBRAW_VERSION_TAIL   Release",
      "31: #define LIBRAW_SHLIB_CURRENT   9",
      "",
      "[Removed Lines]",
      "28: #define LIBRAW_PATCH_VERSION  3",
      "",
      "[Added Lines]",
      "28: #define LIBRAW_PATCH_VERSION  4",
      "",
      "---------------"
    ],
    "src/libraw_datastream.cpp||src/libraw_datastream.cpp": [
      "File: src/libraw_datastream.cpp -> src/libraw_datastream.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "65: LibRaw_byte_buffer *LibRaw_abstract_datastream::make_byte_buffer(unsigned int sz)",
      "66: {",
      "67:     LibRaw_byte_buffer *ret = new LibRaw_byte_buffer(sz);",
      "68:     read(ret->get_buffer(),sz,1);",
      "69:     return ret;",
      "70: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67:   if(INT64(sz)>size())",
      "68:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "71:     if(!ret) // failed new should throw std::exception",
      "72:       throw LIBRAW_EXCEPTION_ALLOC;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "442: LibRaw_byte_buffer *LibRaw_buffer_datastream::make_byte_buffer(unsigned int sz)",
      "443: {",
      "444:     LibRaw_byte_buffer *ret = new LibRaw_byte_buffer(0);",
      "445:     if(streampos + sz > streamsize)",
      "446:         sz = streamsize - streampos;",
      "447:     ret->set_buffer(buf+streampos,sz);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "449:   if(INT64(sz)>size())",
      "450:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "453:     if(!ret) // failed new should throw std::exception",
      "454:       throw LIBRAW_EXCEPTION_ALLOC;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c6cdb10dc50daade3ee0fa73164e7257d1b961af",
      "candidate_info": {
        "commit_hash": "c6cdb10dc50daade3ee0fa73164e7257d1b961af",
        "repo": "LibRaw/LibRaw",
        "commit_url": "https://github.com/LibRaw/LibRaw/commit/c6cdb10dc50daade3ee0fa73164e7257d1b961af",
        "files": [
          "Makefile.devel",
          "RawSpeed/rawspeed_xmldata.cpp"
        ],
        "message": "rawspeed xml updated",
        "before_after_code_files": [
          "Makefile.devel||Makefile.devel",
          "RawSpeed/rawspeed_xmldata.cpp||RawSpeed/rawspeed_xmldata.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Makefile.devel||Makefile.devel"
          ],
          "candidate": [
            "Makefile.devel||Makefile.devel"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.devel||Makefile.devel": [
          "File: Makefile.devel -> Makefile.devel",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: # RawSpeed Support",
          "9: #CFLAGS+=-DUSE_RAWSPEED -I../RawSpeed -I/usr/local/include/libxml2",
          "10: #LDADD+=-L../RawSpeed/RawSpeed/release -lrawspeed -L/usr/local/include -ljpeg -lxml2",
          "14: CC=gcc46",
          "",
          "[Removed Lines]",
          "11: #RAWSPEED_DATA=../RawSpeed/data/cameras.xml",
          "",
          "[Added Lines]",
          "11: RAWSPEED_DATA=../RawSpeed/data/cameras.xml",
          "",
          "---------------"
        ],
        "RawSpeed/rawspeed_xmldata.cpp||RawSpeed/rawspeed_xmldata.cpp": [
          "File: RawSpeed/rawspeed_xmldata.cpp -> RawSpeed/rawspeed_xmldata.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "982: \"\\t\\t<Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"4310\\\" height=\\\"2868\\\"/>\\n\",",
          "983: \"\\t\\t<Sensor black=\\\"0\\\" white=\\\"4096\\\"/>\\n\",",
          "984: \"\\t</Camera>\\n\",",
          "985: \"\\t<Camera make=\\\"NIKON CORPORATION\\\" model=\\\"NIKON D60\\\">\\n\",",
          "986: \"\\t\\t<CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "987: \"\\t\\t\\t<Color x=\\\"0\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "985: \"\\t<Camera make=\\\"NIKON CORPORATION\\\" model=\\\"NIKON D5200\\\">\\n\",",
          "986: \"\\t\\t<CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "987: \"\\t\\t\\t<Color x=\\\"0\\\" y=\\\"0\\\">RED</Color>\\n\",",
          "988: \"\\t\\t\\t<Color x=\\\"1\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "989: \"\\t\\t\\t<Color x=\\\"0\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "990: \"\\t\\t\\t<Color x=\\\"1\\\" y=\\\"1\\\">BLUE</Color>\\n\",",
          "991: \"\\t\\t</CFA>\\n\",",
          "992: \"\\t\\t<Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"0\\\" height=\\\"0\\\"/>\\n\",",
          "993: \"\\t\\t<Sensor black=\\\"0\\\" white=\\\"4096\\\"/>\\n\",",
          "994: \"\\t</Camera>\\n\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1980: \"\\t <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"-154\\\" height=\\\"0\\\"/>\\n\",",
          "1981: \"\\t <Sensor black=\\\"150\\\" white=\\\"4096\\\"/>\\n\",",
          "1982: \" </Camera>\\n\",",
          "1983: \" <Camera make=\\\"Panasonic\\\" model = \\\"DMC-LX3\\\">\\n\",",
          "1984: \"\\t\\t<CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "1985: \"\\t\\t\\t<Color x=\\\"0\\\" y=\\\"0\\\">BLUE</Color><Color x=\\\"1\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1993: \" <Camera make=\\\"Panasonic\\\" model = \\\"DMC-GX1\\\" mode = \\\"4:3\\\">\\n\",",
          "1994: \"\\t <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "1995: \"\\t\\t <Color x=\\\"0\\\" y=\\\"0\\\">GREEN</Color><Color x=\\\"1\\\" y=\\\"0\\\">RED</Color>\\n\",",
          "1996: \"\\t\\t <Color x=\\\"0\\\" y=\\\"1\\\">BLUE</Color><Color x=\\\"1\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "1997: \"\\t </CFA>\\n\",",
          "1998: \"\\t <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"-154\\\" height=\\\"0\\\"/>\\n\",",
          "1999: \"\\t <Sensor black=\\\"150\\\" white=\\\"4096\\\"/>\\n\",",
          "2000: \" </Camera>\\n\",",
          "2001: \" <Camera make=\\\"Panasonic\\\" model = \\\"DMC-GX1\\\" mode = \\\"3:2\\\">\\n\",",
          "2002: \"\\t <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "2003: \"\\t\\t <Color x=\\\"0\\\" y=\\\"0\\\">GREEN</Color><Color x=\\\"1\\\" y=\\\"0\\\">RED</Color>\\n\",",
          "2004: \"\\t\\t <Color x=\\\"0\\\" y=\\\"1\\\">BLUE</Color><Color x=\\\"1\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "2005: \"\\t </CFA>\\n\",",
          "2006: \"\\t <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"-170\\\" height=\\\"0\\\"/>\\n\",",
          "2007: \"\\t <Sensor black=\\\"150\\\" white=\\\"4096\\\"/>\\n\",",
          "2008: \" </Camera>\\n\",",
          "2009: \" <Camera make=\\\"Panasonic\\\" model = \\\"DMC-GX1\\\" mode = \\\"16:9\\\">\\n\",",
          "2010: \"\\t <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "2011: \"\\t\\t <Color x=\\\"0\\\" y=\\\"0\\\">GREEN</Color><Color x=\\\"1\\\" y=\\\"0\\\">RED</Color>\\n\",",
          "2012: \"\\t\\t <Color x=\\\"0\\\" y=\\\"1\\\">BLUE</Color><Color x=\\\"1\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "2013: \"\\t </CFA>\\n\",",
          "2014: \"\\t <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"-170\\\" height=\\\"0\\\"/>\\n\",",
          "2015: \"\\t <Sensor black=\\\"150\\\" white=\\\"4096\\\"/>\\n\",",
          "2016: \" </Camera>\\n\",",
          "2017: \" <Camera make=\\\"Panasonic\\\" model = \\\"DMC-GX1\\\" mode = \\\"1:1\\\">\\n\",",
          "2018: \"\\t <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "2019: \"\\t\\t <Color x=\\\"0\\\" y=\\\"0\\\">GREEN</Color><Color x=\\\"1\\\" y=\\\"0\\\">RED</Color>\\n\",",
          "2020: \"\\t\\t <Color x=\\\"0\\\" y=\\\"1\\\">BLUE</Color><Color x=\\\"1\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "2021: \"\\t </CFA>\\n\",",
          "2022: \"\\t <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"-198\\\" height=\\\"0\\\"/>\\n\",",
          "2023: \"\\t <Sensor black=\\\"150\\\" white=\\\"4096\\\"/>\\n\",",
          "2024: \" </Camera> \\n\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2202: \" \\t\\t<Vertical x=\\\"0\\\" width=\\\"8\\\"/>\\n\",",
          "2203: \" </BlackAreas>\\n\",",
          "2204: \"\\t</Camera>\\n\",",
          "2205: \"\\t<Camera make=\\\"PENTAX\\\" model=\\\"PENTAX K-7\\\">\\n\",",
          "2206: \"\\t\\t<CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "2207: \"\\t\\t\\t<Color x=\\\"0\\\" y=\\\"0\\\">BLUE</Color>\\n\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2247: \"\\t<Camera make=\\\"PENTAX\\\" model=\\\"PENTAX K-5 II\\\" decoder_version=\\\"2\\\">\\n\",",
          "2248: \"\\t\\t<CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "2249: \"\\t\\t\\t<Color x=\\\"0\\\" y=\\\"0\\\">BLUE</Color>\\n\",",
          "2250: \"\\t\\t\\t<Color x=\\\"1\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "2251: \"\\t\\t\\t<Color x=\\\"0\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "2252: \"\\t\\t\\t<Color x=\\\"1\\\" y=\\\"1\\\">RED</Color>\\n\",",
          "2253: \"\\t\\t</CFA>\\n\",",
          "2254: \"\\t\\t<Crop x=\\\"12\\\" y=\\\"0\\\" width=\\\"-34\\\" height=\\\"0\\\"/>\\n\",",
          "2255: \"\\t\\t<Sensor black=\\\"512\\\" white=\\\"16383\\\"/>\\n\",",
          "2256: \" <BlackAreas>\\n\",",
          "2257: \" \\t\\t<Vertical x=\\\"0\\\" width=\\\"8\\\"/>\\n\",",
          "2258: \" </BlackAreas>\\n\",",
          "2259: \"\\t</Camera>\\n\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2618: \"\\t\\t\\t<Color x=\\\"1\\\" y=\\\"1\\\">BLUE</Color>\\n\",",
          "2619: \"\\t\\t</CFA>\\n\",",
          "2620: \"\\t\\t<Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"0\\\" height=\\\"0\\\"/>\\n\",",
          "2622: \"\\t</Camera>\\t \\n\",",
          "2623: \"\\t<Camera make=\\\"SONY\\\" model=\\\"NEX-F3\\\" supported=\\\"yes\\\">\\n\",",
          "2624: \"\\t\\t<CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "",
          "[Removed Lines]",
          "2621: \"\\t\\t<Sensor black=\\\"545\\\" white=\\\"16596\\\"/>\\n\",",
          "",
          "[Added Lines]",
          "2676: \"\\t\\t<Sensor black=\\\"520\\\" white=\\\"16596\\\"/>\\n\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2630: \"\\t\\t<Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"0\\\" height=\\\"0\\\"/>\\n\",",
          "2631: \"\\t\\t<Sensor black=\\\"520\\\" white=\\\"16360\\\"/>\\n\",",
          "2632: \"\\t</Camera>\\t\\n\",",
          "2633: \"\\t<Camera make=\\\"SONY\\\" model=\\\"SLT-A33\\\">\\n\",",
          "2634: \"\\t\\t<CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "2635: \"\\t\\t\\t<Color x=\\\"0\\\" y=\\\"0\\\">RED</Color>\\n\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2688: \"\\t<Camera make=\\\"SONY\\\" model=\\\"DSC-RX1\\\">\\n\",",
          "2689: \"\\t\\t<CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "2690: \"\\t\\t\\t<Color x=\\\"0\\\" y=\\\"0\\\">RED</Color>\\n\",",
          "2691: \"\\t\\t\\t<Color x=\\\"1\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "2692: \"\\t\\t\\t<Color x=\\\"0\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "2693: \"\\t\\t\\t<Color x=\\\"1\\\" y=\\\"1\\\">BLUE</Color>\\n\",",
          "2694: \"\\t\\t</CFA>\\n\",",
          "2695: \"\\t\\t<Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"-18\\\" height=\\\"0\\\"/>\\n\",",
          "2696: \"\\t\\t<Sensor black=\\\"520\\\" white=\\\"16628\\\"/>\\n\",",
          "2697: \"\\t</Camera>\\n\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ac71a2b303674cc8bbe37fe55cf3962ff6776fa",
      "candidate_info": {
        "commit_hash": "7ac71a2b303674cc8bbe37fe55cf3962ff6776fa",
        "repo": "LibRaw/LibRaw",
        "commit_url": "https://github.com/LibRaw/LibRaw/commit/7ac71a2b303674cc8bbe37fe55cf3962ff6776fa",
        "files": [
          "Changelog.rus",
          "Changelog.txt",
          "Makefile.msvc",
          "dcraw/dcraw.c",
          "internal/dcraw_common.cpp",
          "internal/dcraw_fileio.cpp",
          "libraw/libraw.h",
          "libraw/libraw_datastream.h",
          "libraw/libraw_version.h",
          "src/libraw_cxx.cpp"
        ],
        "message": "LibRaw 0.15 Alpha3",
        "before_after_code_files": [
          "Changelog.rus||Changelog.rus",
          "Makefile.msvc||Makefile.msvc",
          "dcraw/dcraw.c||dcraw/dcraw.c",
          "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
          "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp",
          "libraw/libraw.h||libraw/libraw.h",
          "libraw/libraw_datastream.h||libraw/libraw_datastream.h",
          "libraw/libraw_version.h||libraw/libraw_version.h",
          "src/libraw_cxx.cpp||src/libraw_cxx.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "dcraw/dcraw.c||dcraw/dcraw.c",
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
            "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp",
            "libraw/libraw_version.h||libraw/libraw_version.h"
          ],
          "candidate": [
            "dcraw/dcraw.c||dcraw/dcraw.c",
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
            "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp",
            "libraw/libraw_version.h||libraw/libraw_version.h"
          ]
        }
      },
      "candidate_diff": {
        "Changelog.rus||Changelog.rus": [
          "File: Changelog.rus -> Changelog.rus",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: \ufeff2012-08-24 Alex Tutubalin <lexa@lexa.ru>",
          "",
          "[Added Lines]",
          "1: \ufeff2012-09-04 Alex Tutubalin <lexa@lexa.ru>",
          "3:      - \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0434\u0435\u043a\u043e\u0434\u0435\u0440 LJPEG",
          "4:      - OpenMP \u0432 AHD/PPG-\u0438\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0442\u043e\u0440\u0430\u0445 \u0438 \u0432 Wavelet Denoise",
          "5:      - OpenMP \u0432 \u0432\u044b\u0437\u043e\u0432\u0435 raw2image_ex()",
          "6:      - \u041f\u0430\u0442\u0447\u0438 \u0434\u043b\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u0438 \u0441 LCMS1",
          "7:      - \u041c\u0435\u043b\u043a\u0438\u0435 \u043f\u0440\u0430\u0432\u043a\u0438 \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0444\u043b\u0430\u0433\u043e\u0432 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438",
          "8:        \u0432 Makefile.msvc",
          "10:      \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u0441\u043e\u0431\u0440\u0430\u043d\u044b.",
          "13: 2012-08-24 Alex Tutubalin <lexa@lexa.ru>",
          "",
          "---------------"
        ],
        "Makefile.msvc||Makefile.msvc": [
          "File: Makefile.msvc -> Makefile.msvc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Additional compiler flags (OpenMP, SSEx, AVX, ...)",
          "4: # Demosaic Pack GPL2:",
          "5: #CFLAGS_DP2=/I\"..\\\\LibRaw-demosaic-pack-GPL2\"",
          "",
          "[Removed Lines]",
          "2: #COPT=/openmp /arch:SSE2 /arch:AVX",
          "",
          "[Added Lines]",
          "2: #COPT_OPT=/openmp /arch:SSE2 /arch:AVX",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: DLL_OBJECTS=object\\dcraw_common.obj object\\dcraw_fileio.obj  object\\libraw_cxx.obj object\\libraw_datastream.obj object\\libraw_c_api.obj  object\\demosaic_packs.obj",
          "38: CC=cl.exe",
          "41: LINKLIB=$(LIBDLL)",
          "",
          "[Removed Lines]",
          "39: COPT=/EHsc /MP /MT /I. /DWIN32 /O2 /W0 /nologo $(COPT) $(CFLAGSG2) $(CFLAGSG3) $(LCMS_DEF) $(JPEG_DEF)",
          "",
          "[Added Lines]",
          "39: COPT=/EHsc /MP /MT /I. /DWIN32 /O2 /W0 /nologo $(COPT_OPT) $(CFLAGSG2) $(CFLAGSG3) $(LCMS_DEF) $(JPEG_DEF)",
          "",
          "---------------"
        ],
        "dcraw/dcraw.c||dcraw/dcraw.c": [
          "File: dcraw/dcraw.c -> dcraw/dcraw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "885:   return diff;",
          "886: }",
          "888: ushort * CLASS ljpeg_row (int jrow, struct jhead *jh)",
          "889: {",
          "890:   int col, c, diff, pred, spred=0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "888: #ifdef LIBRAW_LIBRARY_BUILD",
          "889: int CLASS ljpeg_diff_new (LibRaw_bit_buffer& bits, LibRaw_byte_buffer* buf,ushort *huff)",
          "890: {",
          "891:   int len, diff;",
          "893:   len = bits._gethuff_lj(buf,*huff,huff+1);",
          "894:   if (len == 16 && (!dng_version || dng_version >= 0x1010000))",
          "895:     return -32768;",
          "896:   diff = bits._getbits_lj(buf,len);",
          "897:   if ((diff & (1 << (len-1))) == 0)",
          "898:     diff -= (1 << len) - 1;",
          "899:   return diff;",
          "900: }",
          "902: int CLASS ljpeg_diff_pef (LibRaw_bit_buffer& bits, LibRaw_byte_buffer* buf,ushort *huff)",
          "903: {",
          "904:   int len, diff;",
          "906:   len = bits._gethuff(buf,*huff,huff+1,zero_after_ff);",
          "907:   if (len == 16 && (!dng_version || dng_version >= 0x1010000))",
          "908:     return -32768;",
          "909:   diff = bits._getbits(buf,len,zero_after_ff);",
          "910:   if ((diff & (1 << (len-1))) == 0)",
          "911:     diff -= (1 << len) - 1;",
          "912:   return diff;",
          "913: }",
          "915: ushort * CLASS ljpeg_row_new (int jrow, struct jhead *jh, LibRaw_bit_buffer& bits,LibRaw_byte_buffer* bytes)",
          "916: {",
          "917:   int col, c, diff, pred, spred=0;",
          "918:   ushort mark=0, *row[3];",
          "920:   if (jrow * jh->wide % jh->restart == 0) {",
          "921:     FORC(6) jh->vpred[c] = 1 << (jh->bits-1);",
          "922:     if (jrow) {",
          "923:         bytes->unseek2();",
          "924:         do mark = (mark << 8) + (c = bytes->get_byte());",
          "925:         while (c != EOF && mark >> 4 != 0xffd);",
          "926:     }",
          "927:     bits.reset();",
          "928:   }",
          "929:   FORC3 row[c] = jh->row + jh->wide*jh->clrs*((jrow+c) & 1);",
          "930:   for (col=0; col < jh->wide; col++)",
          "931:     FORC(jh->clrs) {",
          "932:         diff = ljpeg_diff_new (bits,bytes,jh->huff[c]);",
          "933:       if (jh->sraw && c <= jh->sraw && (col | c))",
          "934:       pred = spred;",
          "935:       else if (col) pred = row[0][-jh->clrs];",
          "936:       else     pred = (jh->vpred[c] += diff) - diff;",
          "937:       if (jrow && col) switch (jh->psv) {",
          "938:  case 1: break;",
          "939:  case 2: pred = row[1][0];     break;",
          "940:  case 3: pred = row[1][-jh->clrs];    break;",
          "941:  case 4: pred = pred +   row[1][0] - row[1][-jh->clrs];  break;",
          "942:  case 5: pred = pred + ((row[1][0] - row[1][-jh->clrs]) >> 1); break;",
          "943:  case 6: pred = row[1][0] + ((pred - row[1][-jh->clrs]) >> 1); break;",
          "944:  case 7: pred = (pred + row[1][0]) >> 1;    break;",
          "945:  default: pred = 0;",
          "946:       }",
          "947:       if ((**row = pred + diff) >> jh->bits) derror();",
          "948:       if (c <= jh->sraw) spred = **row;",
          "949:       row[0]++; row[1]++;",
          "950:     }",
          "951:   return row[2];",
          "952: }",
          "954: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "927: void CLASS lossless_jpeg_load_raw()",
          "928: {",
          "930:   struct jhead jh;",
          "931:   ushort *rp;",
          "933:   if (!ljpeg_start (&jh, 0)) return;",
          "934:   jwide = jh.wide * jh.clrs;",
          "936:   for (jrow=0; jrow < jh.high; jrow++) {",
          "937:     rp = ljpeg_row (jrow, &jh);",
          "938:     if (load_flags & 1)",
          "939:       row = jrow & 1 ? height-1-jrow/2 : jrow/2;",
          "940:     for (jcol=0; jcol < jwide; jcol++) {",
          "941:       val = curve[*rp++];",
          "942:       if (cr2_slice[0]) {",
          "943:  jidx = jrow*jwide + jcol;",
          "944:  i = jidx / (cr2_slice[1]*jh.high);",
          "",
          "[Removed Lines]",
          "929:   int jwide, jrow, jcol, val, jidx, i, j, row=0, col=0;",
          "",
          "[Added Lines]",
          "998:   int jwide, jrow, jcol, val, i, row=0, col=0;",
          "999: #ifndef LIBRAW_LIBRARY_BUILD",
          "1000:   int jidx,j;",
          "1001: #endif",
          "1005: #ifdef LIBRAW_LIBRARY_BUILD",
          "1006:   int save_min = 0;",
          "1007:   unsigned slicesW[16],slicesWcnt=0,slices;",
          "1008:   unsigned *offset;",
          "1009:   unsigned t_y=0,t_x=0,t_s=0,slice=0,pixelsInSlice,pixno;",
          "1010:   if (!strcasecmp(make,\"KODAK\"))",
          "1011:       save_min = 1;",
          "1012: #endif",
          "1014: #ifdef LIBRAW_LIBRARY_BUILD",
          "1015:   if (cr2_slice[0]>15)",
          "1016:       throw LIBRAW_EXCEPTION_IO_EOF; // change many slices",
          "1017: #else",
          "1018:   if (cr2_slice[0]>15)",
          "1019:   {",
          "1020:       fprintf(stderr,\"Too many CR2 slices: %d\\n\",cr2_slice[0]+1);",
          "1021:       return;",
          "1022:   }",
          "1023: #endif",
          "1029: #ifdef LIBRAW_LIBRARY_BUILD",
          "1030:   if(cr2_slice[0])",
          "1031:       {",
          "1032:           for(i=0;i<cr2_slice[0];i++)",
          "1033:               slicesW[slicesWcnt++] = cr2_slice[1];",
          "1034:           slicesW[slicesWcnt++] = cr2_slice[2];",
          "1035:       }",
          "1036:   else",
          "1037:       {",
          "1039:           slicesW[slicesWcnt++] = raw_width; // safe fallback",
          "1040:       }",
          "1042:   slices = slicesWcnt * jh.high;",
          "1043:   offset = (unsigned*)calloc(slices+1,sizeof(offset[0]));",
          "1045:   for(slice=0;slice<slices;slice++)",
          "1046:       {",
          "1047:           offset[slice] = (t_x + t_y * raw_width)| (t_s<<28);",
          "1048:           if((offset[slice] & 0x0fffffff) >= raw_width * raw_height)",
          "1049:               throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "1050:           t_y++;",
          "1051:           if(t_y == jh.high)",
          "1052:               {",
          "1053:                   t_y = 0;",
          "1054:                   t_x += slicesW[t_s++];",
          "1055:               }",
          "1056:       }",
          "1057:   offset[slices] = offset[slices-1];",
          "1058:   slice = 1; // next slice",
          "1059:   pixno = offset[0];",
          "1060:   pixelsInSlice = slicesW[0];",
          "1061: #endif",
          "1063: #ifdef LIBRAW_LIBRARY_BUILD",
          "1064:   LibRaw_byte_buffer *buf=NULL;",
          "1065:   if(data_size)",
          "1066:       buf = ifp->make_byte_buffer(data_size);",
          "1067:   LibRaw_bit_buffer bits;",
          "1068: #endif",
          "1071: #ifdef LIBRAW_LIBRARY_BUILD",
          "1072:       if (buf)",
          "1073:           rp = ljpeg_row_new (jrow, &jh,bits,buf);",
          "1074:       else",
          "1075: #endif",
          "1081: #ifndef LIBRAW_LIBRARY_BUILD",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "948:  row = jidx / cr2_slice[1+j];",
          "949:  col = jidx % cr2_slice[1+j] + i*cr2_slice[1];",
          "950:       }",
          "951:       if (raw_width == 3984 && (col -= 2) < 0)",
          "952:  col += (row--,raw_width);",
          "953:       if (row >= 0) RAW(row,col) = val;",
          "954:       if (++col >= raw_width)",
          "955:  col = (row++,0);",
          "956:     }",
          "957:   }",
          "958:   ljpeg_end (&jh);",
          "959: }",
          "961: void CLASS canon_sraw_load_raw()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1092: #else",
          "1094:       if(buf)",
          "1095:           {",
          "1096:               if(!(load_flags & 1))",
          "1097:                   row = pixno/raw_width;",
          "1098:               col = pixno % raw_width;",
          "1099:               pixno++;",
          "1100:               if (0 == --pixelsInSlice)",
          "1101:                   {",
          "1102:                       unsigned o = offset[slice++];",
          "1103:                       pixno = o & 0x0fffffff;",
          "1104:                       pixelsInSlice = slicesW[o>>28];",
          "1105:                   }",
          "1106:           }",
          "1107: #endif",
          "1111: #ifndef LIBRAW_LIBRARY_BUILD",
          "1114: #else",
          "1115:       if(!buf) // 1D or 1Ds case",
          "1116:          if (++col >= raw_width)",
          "1117:             col = (row++,0);",
          "1118: #endif",
          "1122: #ifdef LIBRAW_LIBRARY_BUILD",
          "1123:   if(buf)",
          "1124:       delete buf;",
          "1125:   free(offset);",
          "1126: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "969:   if (!ljpeg_start (&jh, 0)) return;",
          "970:   jwide = (jh.wide >>= 1) * jh.clrs;",
          "972:   for (ecol=slice=0; slice <= cr2_slice[0]; slice++) {",
          "973:     scol = ecol;",
          "974:     ecol += cr2_slice[1] * 2 / jh.clrs;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1140: #ifdef LIBRAW_LIBRARY_BUILD",
          "1141:   if(!data_size)",
          "1142:       throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "1143:   LibRaw_byte_buffer *buf = ifp->make_byte_buffer(data_size);",
          "1144:   LibRaw_bit_buffer bits;",
          "1145: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "977:       ip = (short (*)[4]) image + row*width;",
          "978:       for (col=scol; col < ecol; col+=2, jcol+=jh.clrs) {",
          "979:  if ((jcol %= jwide) == 0)",
          "981:  if (col >= width) continue;",
          "982:  FORC (jh.clrs-2)",
          "983:    ip[col + (c >> 1)*width + (c & 1)][0] = rp[jcol+c];",
          "",
          "[Removed Lines]",
          "980:    rp = (short *) ljpeg_row (jrow++, &jh);",
          "",
          "[Added Lines]",
          "1155: #ifdef LIBRAW_LIBRARY_BUILD",
          "1156:             rp = (short*) ljpeg_row_new (jrow++, &jh,bits,buf);",
          "1157: #else",
          "1158:             rp = (short *) ljpeg_row (jrow++, &jh);",
          "1159: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1024:     }",
          "1025:     FORC3 rp[c] = CLIP(pix[c] * sraw_mul[c] >> 10);",
          "1026:   }",
          "1027:   ljpeg_end (&jh);",
          "1028:   maximum = 0x3fff;",
          "1029: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1206: #ifdef LIBRAW_LIBRARY_BUILD",
          "1207:   delete buf;",
          "1208: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1083:     jwide = jh.wide;",
          "1084:     if (filters) jwide *= jh.clrs;",
          "1085:     jwide /= is_raw;",
          "1086: #ifndef LIBRAW_LIBRARY_BUILD",
          "1087:     for (row=col=jrow=0; jrow < jh.high; jrow++) {",
          "1088:       rp = ljpeg_row (jrow, &jh);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1268: #ifdef LIBRAW_LIBRARY_BUILD",
          "1269:     if(!data_size)",
          "1270:         throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "1271:     LibRaw_byte_buffer *buf = ifp->make_byte_buffer(data_size);",
          "1272:     LibRaw_bit_buffer bits;",
          "1273: #endif",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1096:     if(raw_image)",
          "1097:       {",
          "1098:         for (row=col=jrow=0; jrow < jh.high; jrow++) {",
          "1099:           rp = ljpeg_row (jrow, &jh);",
          "1100:           for (jcol=0; jcol < jwide; jcol++) {",
          "1101:             adobe_copy_pixel_raw (trow+row, tcol+col, &rp);",
          "1102:             if (++col >= tile_width || col >= raw_width)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1288: #ifdef LIBRAW_LIBRARY_BUILD",
          "1289:           rp = ljpeg_row_new (jrow, &jh,bits,buf);",
          "1290: #else",
          "1292: #endif",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1107:     else",
          "1108:       {",
          "1109:         for (row=col=jrow=0; jrow < jh.high; jrow++) {",
          "1110:           rp = ljpeg_row (jrow, &jh);",
          "1111:           for (jcol=0; jcol < jwide; jcol++) {",
          "1112:             adobe_copy_pixel_color (trow+row, tcol+col, &rp);",
          "1113:             if (++col >= tile_width || col >= raw_width)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1303: #ifdef LIBRAW_LIBRARY_BUILD",
          "1304:           rp = ljpeg_row_new (jrow, &jh,bits,buf);",
          "1305: #else",
          "1307: #endif",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1120:     if ((tcol += tile_width) >= raw_width)",
          "1121:       trow += tile_length + (tcol = 0);",
          "1122:     ljpeg_end (&jh);",
          "1123:   }",
          "1124: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1320: #ifdef LIBRAW_LIBRARY_BUILD",
          "1321:     delete buf;",
          "1322: #endif",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1131:   pixel = (ushort *) calloc (raw_width * tiff_samples, sizeof *pixel);",
          "1132:   merror (pixel, \"packed_dng_load_raw()\");",
          "1133:   for (row=0; row < raw_height; row++) {",
          "1134:     if (tiff_bps == 16)",
          "1135:       read_shorts (pixel, raw_width * tiff_samples);",
          "1136:     else {",
          "1137:       getbits(-1);",
          "1138:       for (col=0; col < raw_width * tiff_samples; col++)",
          "1139:  pixel[col] = getbits(tiff_bps);",
          "1140:     }",
          "1141: #ifndef LIBRAW_LIBRARY_BUILD",
          "1142:     for (rp=pixel, col=0; col < raw_width; col++)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1334: #ifdef LIBRAW_LIBRARY_BUILD",
          "1335:   int dsz= raw_height*raw_width * tiff_samples * tiff_bps/8;",
          "1336:   LibRaw_byte_buffer *buf = NULL;",
          "1337:   if (tiff_bps != 16)",
          "1338:       {",
          "1339:           buf = ifp->make_byte_buffer(dsz);",
          "1340:       }",
          "1341:   LibRaw_bit_buffer bits;",
          "1342: #endif",
          "1348: #ifdef LIBRAW_LIBRARY_BUILD",
          "1349:         bits.reset();",
          "1350:         for (col=0; col < raw_width * tiff_samples; col++)",
          "1351:             pixel[col] = bits._getbits(buf,tiff_bps,zero_after_ff);",
          "1353: #else",
          "1357: #endif",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1151: #endif",
          "1152:   }",
          "1153:   free (pixel);",
          "1154: }",
          "1156: void CLASS pentax_load_raw()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1372: #ifdef LIBRAW_LIBRARY_BUILD",
          "1373:     if(buf)",
          "1374:         delete buf;",
          "1375: #endif",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1169:       huff[++i] = bit[1][c] << 8 | c;",
          "1170:   huff[0] = 12;",
          "1171:   fseek (ifp, data_offset, SEEK_SET);",
          "1172:   getbits(-1);",
          "1173:   for (row=0; row < raw_height; row++)",
          "1174:     for (col=0; col < raw_width; col++) {",
          "1175:       diff = ljpeg_diff (huff);",
          "1176:       if (col < 2) hpred[col] = vpred[row & 1][col] += diff;",
          "1177:       else    hpred[col & 1] += diff;",
          "1178:       RAW(row,col) = hpred[col & 1];",
          "1179:       if (hpred[col & 1] >> tiff_bps) derror();",
          "1180:     }",
          "1181: }",
          "1183: void CLASS nikon_load_raw()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1394: #ifdef LIBRAW_LIBRARY_BUILD",
          "1395:   if(!data_size)",
          "1396:       throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "1397:   LibRaw_byte_buffer *buf = ifp->make_byte_buffer(data_size);",
          "1398:   LibRaw_bit_buffer bits;",
          "1399:   bits.reset();",
          "1400: #else",
          "1402: #endif",
          "1405: #ifdef LIBRAW_LIBRARY_BUILD",
          "1406:       diff = ljpeg_diff_pef(bits,buf,huff);",
          "1407: #else",
          "1409: #endif",
          "1415: #ifdef LIBRAW_LIBRARY_BUILD",
          "1416:   delete buf;",
          "1417: #endif",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1222:   while (curve[max-2] == curve[max-1]) max--;",
          "1223:   huff = make_decoder (nikon_tree[tree]);",
          "1224:   fseek (ifp, data_offset, SEEK_SET);",
          "1225:   getbits(-1);",
          "1226:   for (min=row=0; row < height; row++) {",
          "1227:     if (split && row == split) {",
          "1228:       free (huff);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1462: #ifdef LIBRAW_LIBRARY_BUILD",
          "1463:   if(!data_size)",
          "1464:       throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "1465:   LibRaw_byte_buffer *buf = ifp->make_byte_buffer(data_size);",
          "1466:   LibRaw_bit_buffer bits;",
          "1467:   bits.reset();",
          "1468: #else",
          "1470: #endif",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1230:       max += (min = 16) << 1;",
          "1231:     }",
          "1232:     for (col=0; col < raw_width; col++) {",
          "1233:       i = gethuff(huff);",
          "1234:       len = i & 15;",
          "1235:       shl = i >> 4;",
          "1236:       diff = ((getbits(len-shl) << 1) + 1) << shl >> 1;",
          "1237:       if ((diff & (1 << (len-1))) == 0)",
          "1238:  diff -= (1 << len) - !shl;",
          "1239:       if (col < 2) hpred[col] = vpred[row & 1][col] += diff;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1478: #ifdef LIBRAW_LIBRARY_BUILD",
          "1479:         i = bits._gethuff(buf,*huff,huff+1,zero_after_ff);",
          "1480: #else",
          "1482: #endif",
          "1485: #ifdef LIBRAW_LIBRARY_BUILD",
          "1486:       diff = ((bits._getbits(buf,len-shl,zero_after_ff) << 1) + 1) << shl >> 1;",
          "1487: #else",
          "1489: #endif",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1242:       RAW(row,col) = curve[LIM((short)hpred[col & 1],0,0x3fff)];",
          "1243:     }",
          "1244:   }",
          "1245:   free (huff);",
          "1246: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1498: #ifdef LIBRAW_LIBRARY_BUILD",
          "1499:   delete buf;",
          "1500: #endif",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1943:   for (i=12; i--; )",
          "1944:     FORC(2048 >> i) huff[++n] = (i+1) << 8 | i;",
          "1945:   fseek (ifp, 7, SEEK_CUR);",
          "1946:   getbits(-1);",
          "1947:   for (row=0; row < height; row++) {",
          "1948:     memset (acarry, 0, sizeof acarry);",
          "1949:     for (col=0; col < raw_width; col++) {",
          "1950:       carry = acarry[col & 1];",
          "1951:       i = 2 * (carry[2] < 3);",
          "1952:       for (nbits=2+i; (ushort) carry[0] >> (nbits+i); nbits++);",
          "1953:       low = (sign = getbits(3)) & 3;",
          "1954:       sign = sign << 29 >> 31;",
          "1955:       if ((high = getbithuff(12,huff)) == 12)",
          "1956:  high = getbits(16-nbits) >> 1;",
          "1957:       carry[0] = (high << nbits) | getbits(nbits);",
          "1958:       diff = (carry[0] ^ sign) + carry[1];",
          "1959:       carry[1] = (diff*3 + carry[1]) >> 5;",
          "1960:       carry[2] = carry[0] > 16 ? 0 : carry[2]+1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2202: #ifdef LIBRAW_LIBRARY_BUILD",
          "2203:   if(!data_size)",
          "2204:       throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "2205:   LibRaw_byte_buffer *buf = ifp->make_byte_buffer(data_size);",
          "2206:   LibRaw_bit_buffer bits;",
          "2207:   bits.reset();",
          "2208: #else",
          "2210: #endif",
          "2217: #ifdef LIBRAW_LIBRARY_BUILD",
          "2218:       low = (sign = bits._getbits(buf,3,zero_after_ff)) & 3;",
          "2219:       sign = sign << 29 >> 31;",
          "2220:       if ((high = bits._gethuff(buf,12,huff,zero_after_ff)) == 12)",
          "2221:           high = bits._getbits(buf,16-nbits,zero_after_ff) >> 1;",
          "2222:       carry[0] = (high << nbits) | bits._getbits(buf,nbits,zero_after_ff);",
          "2223: #else",
          "2229: #endif",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1975:       if ((RAW(row,col) = pred + ((diff << 2) | low)) >> 12) derror();",
          "1976:     }",
          "1977:   }",
          "1978: }",
          "1980: void CLASS minolta_rd175_load_raw()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2250: #ifdef LIBRAW_LIBRARY_BUILD",
          "2251:   delete buf;",
          "2252: #endif",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2600:   for (n=i=0; i < 18; i++)",
          "2601:     FORC(32768 >> (tab[i] >> 8)) huff[n++] = tab[i];",
          "2602:   getbits(-1);",
          "2603:   for (col = raw_width; col--; )",
          "2604:     for (row=0; row < raw_height+1; row+=2) {",
          "2605:       if (row == raw_height) row = 1;",
          "2606:       len = getbithuff(15,huff);",
          "2607:       diff = getbits(len);",
          "2608:       if ((diff & (1 << (len-1))) == 0)",
          "2609:  diff -= (1 << len) - 1;",
          "2610:       if ((sum += diff) >> 12) derror();",
          "2611:       if (row < height) RAW(row,col) = sum;",
          "2612:     }",
          "2613: }",
          "2615: void CLASS sony_arw2_load_raw()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2877: #ifdef LIBRAW_LIBRARY_BUILD",
          "2878:   LibRaw_byte_buffer *buf=NULL;",
          "2879:   if(data_size)",
          "2880:       buf = ifp->make_byte_buffer(data_size);",
          "2881:   else",
          "2882:       getbits(-1);",
          "2884:   LibRaw_bit_buffer bits;",
          "2885:   bits.reset();",
          "2886: #else",
          "2888: #endif",
          "2892: #ifdef LIBRAW_LIBRARY_BUILD",
          "2893:       if(data_size)",
          "2894:           {",
          "2895:               len = bits._gethuff(buf,15,huff,zero_after_ff);",
          "2896:               diff = bits._getbits(buf,len,zero_after_ff);",
          "2897:           }",
          "2898:       else",
          "2899:           {",
          "2900:               len = getbithuff(15,huff);",
          "2901:               diff = getbits(len);",
          "2902:           }",
          "2903: #else",
          "2906: #endif",
          "2912: #ifdef LIBRAW_LIBRARY_BUILD",
          "2913:   if(buf) delete buf;",
          "2914: #endif",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "4006:     temp[i] = 2*base[st*i] + base[st*(i-sc)] + base[st*(2*size-2-(i+sc))];",
          "4007: }",
          "4009: void CLASS wavelet_denoise()",
          "4010: {",
          "4011:   float *fimg=0, *temp, thold, mul[2], avg, diff;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4311: #if !defined(LIBRAW_USE_OPENMP)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "4085:   }",
          "4086:   free (fimg);",
          "4087: }",
          "4090: void CLASS green_matching()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4392: void CLASS wavelet_denoise()",
          "4393: {",
          "4394:   float *fimg=0, *temp, thold, mul[2], avg, diff;",
          "4395:    int scale=1, size, lev, hpass, lpass, row, col, nc, c, i, wlast, blk[2];",
          "4396:   ushort *window[4];",
          "4397:   static const float noise[] =",
          "4398:   { 0.8002,0.2735,0.1202,0.0585,0.0291,0.0152,0.0080,0.0044 };",
          "4400: #ifdef DCRAW_VERBOSE",
          "4401:   if (verbose) fprintf (stderr,_(\"Wavelet denoising...\\n\"));",
          "4402: #endif",
          "4404:   while (maximum << scale < 0x10000) scale++;",
          "4405:   maximum <<= --scale;",
          "4406:   black <<= scale;",
          "4407:   FORC4 cblack[c] <<= scale;",
          "4408:   if ((size = iheight*iwidth) < 0x15550000)",
          "4409:     fimg = (float *) malloc ((size*3 + iheight + iwidth) * sizeof *fimg);",
          "4410:   merror (fimg, \"wavelet_denoise()\");",
          "4411:   temp = fimg + size*3;",
          "4412:   if ((nc = colors) == 3 && filters) nc++;",
          "4413: #ifdef LIBRAW_LIBRARY_BUILD",
          "4414: #pragma omp parallel default(shared) private(i,col,row,thold,lev,lpass,hpass,temp,c) firstprivate(scale,size)",
          "4415: #endif",
          "4416:   {",
          "4417:       temp = (float*)malloc( (iheight + iwidth) * sizeof *fimg);",
          "4419: #ifdef LIBRAW_LIBRARY_BUILD",
          "4420: #pragma omp for",
          "4421: #endif",
          "4422:       for (i=0; i < size; i++)",
          "4423:         fimg[i] = 256 * sqrt((double)(image[i][c] << scale));",
          "4424:       for (hpass=lev=0; lev < 5; lev++) {",
          "4425:  lpass = size*((lev & 1)+1);",
          "4426: #ifdef LIBRAW_LIBRARY_BUILD",
          "4427: #pragma omp for",
          "4428: #endif",
          "4429:  for (row=0; row < iheight; row++) {",
          "4430:    hat_transform (temp, fimg+hpass+row*iwidth, 1, iwidth, 1 << lev);",
          "4431:    for (col=0; col < iwidth; col++)",
          "4432:      fimg[lpass + row*iwidth + col] = temp[col] * 0.25;",
          "4433:  }",
          "4434: #ifdef LIBRAW_LIBRARY_BUILD",
          "4435: #pragma omp for",
          "4436: #endif",
          "4437:  for (col=0; col < iwidth; col++) {",
          "4438:    hat_transform (temp, fimg+lpass+col, iwidth, iheight, 1 << lev);",
          "4439:    for (row=0; row < iheight; row++)",
          "4440:      fimg[lpass + row*iwidth + col] = temp[row] * 0.25;",
          "4441:  }",
          "4442:  thold = threshold * noise[lev];",
          "4443: #ifdef LIBRAW_LIBRARY_BUILD",
          "4444: #pragma omp for",
          "4445: #endif",
          "4446:  for (i=0; i < size; i++) {",
          "4447:    fimg[hpass+i] -= fimg[lpass+i];",
          "4448:    if (fimg[hpass+i] < -thold) fimg[hpass+i] += thold;",
          "4449:    else if (fimg[hpass+i] >  thold) fimg[hpass+i] -= thold;",
          "4450:    else  fimg[hpass+i] = 0;",
          "4451:    if (hpass) fimg[i] += fimg[hpass+i];",
          "4452:  }",
          "4453:  hpass = lpass;",
          "4454:       }",
          "4455: #ifdef LIBRAW_LIBRARY_BUILD",
          "4456: #pragma omp for",
          "4457: #endif",
          "4458:       for (i=0; i < size; i++)",
          "4459:  image[i][c] = CLIP(SQR(fimg[i]+fimg[lpass+i])/0x10000);",
          "4460:     }",
          "4461:     free(temp);",
          "4468:    for (row=0; row < 2; row++){",
          "4469:       mul[row] = 0.125 * pre_mul[FC(row+1,0) | 1] / pre_mul[FC(row,0) | 1];",
          "4470:       blk[row] = cblack[FC(row,0) | 1];",
          "4471:    }",
          "4472:     for (i=0; i < 4; i++)",
          "4473:       window[i] = (ushort *) fimg + width*i;",
          "4474:     for (wlast=-1, row=1; row < height-1; row++) {",
          "4475:       while (wlast < row+1) {",
          "4476:  for (wlast++, i=0; i < 4; i++)",
          "4477:    window[(i+3) & 3] = window[i];",
          "4478:  for (col = FC(wlast,1) & 1; col < width; col+=2)",
          "4479:    window[2][col] = BAYER(wlast,col);",
          "4480:       }",
          "4481:       thold = threshold/512;",
          "4482:       for (col = (FC(row,0) & 1)+1; col < width-1; col+=2) {",
          "4483:  avg = ( window[0][col-1] + window[0][col+1] +",
          "4484:   window[2][col-1] + window[2][col+1] - blk[~row & 1]*4 )",
          "4486:  avg = avg < 0 ? 0 : sqrt(avg);",
          "4487:  diff = sqrt((double)BAYER(row,col)) - avg;",
          "4488:  if      (diff < -thold) diff += thold;",
          "4489:  else if (diff >  thold) diff -= thold;",
          "4490:  else diff = 0;",
          "4491:  BAYER(row,col) = CLIP(SQR(avg+diff) + 0.5);",
          "4492:       }",
          "4493:     }",
          "4494:   }",
          "4495:   free (fimg);",
          "4496: }",
          "4498: #endif",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "4538: #ifdef LIBRAW_LIBRARY_BUILD",
          "4539:   RUN_CALLBACK(LIBRAW_PROGRESS_INTERPOLATE,0,3);",
          "4540: #endif",
          "4541:   for (row=3; row < height-3; row++)",
          "4542:     for (col=3+(FC(row,3) & 1), c=FC(row,col); col < width-3; col+=2) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4951: #ifdef LIBRAW_USE_OPENMP",
          "4952: #pragma omp parallel for default(shared) private(guess, diff, row, col, d, c, i, pix) schedule(static)",
          "4953: #endif",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "4557: #ifdef LIBRAW_LIBRARY_BUILD",
          "4558:   RUN_CALLBACK(LIBRAW_PROGRESS_INTERPOLATE,1,3);",
          "4559: #endif",
          "4560:   for (row=1; row < height-1; row++)",
          "4561:     for (col=1+(FC(row,2) & 1), c=FC(row,col+1); col < width-1; col+=2) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4973: #ifdef LIBRAW_USE_OPENMP",
          "4974: #pragma omp parallel for default(shared) private(guess, diff, row, col, d, c, i, pix) schedule(static)",
          "4975: #endif",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "4568: #ifdef LIBRAW_LIBRARY_BUILD",
          "4569:   RUN_CALLBACK(LIBRAW_PROGRESS_INTERPOLATE,2,3);",
          "4570: #endif",
          "4571:   for (row=1; row < height-1; row++)",
          "4572:     for (col=1+(FC(row,1) & 1), c=2-FC(row,col); col < width-1; col+=2) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4987: #ifdef LIBRAW_USE_OPENMP",
          "4988: #pragma omp parallel for default(shared) private(guess, diff, row, col, d, c, i, pix) schedule(static)",
          "4989: #endif",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "4585:     }",
          "4586: }",
          "4589:    Adaptive Homogeneity-Directed interpolation is based on",
          "4590:    the work of Keigo Hirakawa, Thomas Parks, and Paul Lee.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5008: #ifdef LIBRAW_LIBRARY_BUILD",
          "5010:    Adaptive Homogeneity-Directed interpolation is based on",
          "5011:    the work of Keigo Hirakawa, Thomas Parks, and Paul Lee.",
          "5014: static float dcraw_cbrt[0x10000] = {-1.0f};",
          "5016: static inline float calc_64cbrt(float f)",
          "5017: {",
          "5018:   unsigned u;",
          "5019:   static float lower = dcraw_cbrt[0];",
          "5020:   static float upper = dcraw_cbrt[0xffff];",
          "5022:   if (f <= 0) {",
          "5023:     return lower;",
          "5024:   }",
          "5026:   u = (unsigned) f;",
          "5027:   if (u >= 0xffff) {",
          "5028:     return upper;",
          "5029:   }",
          "5030:   return dcraw_cbrt[u];",
          "5031: }",
          "5032: void CLASS ahd_interpolate_green_h_and_v(int top, int left, ushort (*out_rgb)[TS][TS][3])",
          "5033: {",
          "5034:   int row, col;",
          "5035:   int c, val;",
          "5036:   ushort (*pix)[4];",
          "5037:   const int rowlimit = MIN(top+TS, height-2);",
          "5038:   const int collimit = MIN(left+TS, width-2);",
          "5040:   for (row = top; row < rowlimit; row++) {",
          "5041:     col = left + (FC(row,left) & 1);",
          "5042:     for (c = FC(row,col); col < collimit; col+=2) {",
          "5043:       pix = image + row*width+col;",
          "5044:       val = ((pix[-1][1] + pix[0][c] + pix[1][1]) * 2",
          "5045:             - pix[-2][c] - pix[2][c]) >> 2;",
          "5046:       out_rgb[0][row-top][col-left][1] = ULIM(val,pix[-1][1],pix[1][1]);",
          "5047:       val = ((pix[-width][1] + pix[0][c] + pix[width][1]) * 2",
          "5048:             - pix[-2*width][c] - pix[2*width][c]) >> 2;",
          "5049:       out_rgb[1][row-top][col-left][1] = ULIM(val,pix[-width][1],pix[width][1]);",
          "5050:     }",
          "5051:   }",
          "5052: }",
          "5053: void CLASS ahd_interpolate_r_and_b_in_rgb_and_convert_to_cielab(int top, int left, ushort (*inout_rgb)[TS][3], short (*out_lab)[TS][3], const float (&xyz_cam)[3][4])",
          "5054: {",
          "5055:   unsigned row, col;",
          "5056:   int c, val;",
          "5057:   ushort (*pix)[4];",
          "5058:   ushort (*rix)[3];",
          "5059:   short (*lix)[3];",
          "5060:   float xyz[3];",
          "5061:   const unsigned num_pix_per_row = 4*width;",
          "5062:   const unsigned rowlimit = MIN(top+TS-1, height-3);",
          "5063:   const unsigned collimit = MIN(left+TS-1, width-3);",
          "5064:   ushort *pix_above;",
          "5065:   ushort *pix_below;",
          "5066:   int t1, t2;",
          "5068:   for (row = top+1; row < rowlimit; row++) {",
          "5069:     pix = image + row*width + left;",
          "5070:     rix = &inout_rgb[row-top][0];",
          "5071:     lix = &out_lab[row-top][0];",
          "5073:     for (col = left+1; col < collimit; col++) {",
          "5074:       pix++;",
          "5075:       pix_above = &pix[0][0] - num_pix_per_row;",
          "5076:       pix_below = &pix[0][0] + num_pix_per_row;",
          "5077:       rix++;",
          "5078:       lix++;",
          "5080:       c = 2 - FC(row, col);",
          "5082:       if (c == 1) {",
          "5083:         c = FC(row+1,col);",
          "5084:  t1 = 2-c;",
          "5085:         val = pix[0][1] + (( pix[-1][t1] + pix[1][t1]",
          "5086:               - rix[-1][1] - rix[1][1] ) >> 1);",
          "5087:         rix[0][t1] = CLIP(val);",
          "5088:         val = pix[0][1] + (( pix_above[c] + pix_below[c]",
          "5089:               - rix[-TS][1] - rix[TS][1] ) >> 1);",
          "5090:       } else {",
          "5093:         val = rix[0][1] + (( pix_above[t1] + pix_above[t2]",
          "5094:               + pix_below[t1] + pix_below[t2]",
          "5095:               - rix[-TS-1][1] - rix[-TS+1][1]",
          "5096:               - rix[+TS-1][1] - rix[+TS+1][1] + 1) >> 2);",
          "5097:       }",
          "5098:       rix[0][c] = CLIP(val);",
          "5099:       c = FC(row,col);",
          "5100:       rix[0][c] = pix[0][c];",
          "5101:       xyz[0] = xyz[1] = xyz[2] = 0.5;",
          "5102:       FORC3 {",
          "5107:         xyz[0] += xyz_cam[0][c] * rix[0][c];",
          "5108:         xyz[1] += xyz_cam[1][c] * rix[0][c];",
          "5109:         xyz[2] += xyz_cam[2][c] * rix[0][c];",
          "5110:       }",
          "5111:       FORC3 {",
          "5112:  xyz[c] = calc_64cbrt(xyz[c]);",
          "5113:       }",
          "5114:       lix[0][0] = (116 * xyz[1] - 16);",
          "5115:       lix[0][1] = 500 * (xyz[0] - xyz[1]);",
          "5116:       lix[0][2] = 200 * (xyz[1] - xyz[2]);",
          "5117:     }",
          "5118:   }",
          "5119: }",
          "5120: void CLASS ahd_interpolate_r_and_b_and_convert_to_cielab(int top, int left, ushort (*inout_rgb)[TS][TS][3], short (*out_lab)[TS][TS][3], const float (&xyz_cam)[3][4])",
          "5121: {",
          "5122:   int direction;",
          "5123:   for (direction = 0; direction < 2; direction++) {",
          "5124:     ahd_interpolate_r_and_b_in_rgb_and_convert_to_cielab(top, left, inout_rgb[direction], out_lab[direction], xyz_cam);",
          "5125:   }",
          "5126: }",
          "5127: void CLASS ahd_interpolate_build_homogeneity_map(int top, int left, short (*lab)[TS][TS][3], char (*out_homogeneity_map)[TS][2])",
          "5128: {",
          "5129:   int row, col;",
          "5130:   int tr, tc;",
          "5131:   int direction;",
          "5132:   int i;",
          "5133:   short (*lix)[3];",
          "5134:   short (*lixs[2])[3];",
          "5135:   short *adjacent_lix;",
          "5136:   unsigned ldiff[2][4], abdiff[2][4], leps, abeps;",
          "5137:   static const int dir[4] = { -1, 1, -TS, TS };",
          "5138:   const int rowlimit = MIN(top+TS-2, height-4);",
          "5139:   const int collimit = MIN(left+TS-2, width-4);",
          "5140:   int homogeneity;",
          "5141:   char (*homogeneity_map_p)[2];",
          "5143:   memset (out_homogeneity_map, 0, 2*TS*TS);",
          "5145:   for (row=top+2; row < rowlimit; row++) {",
          "5146:     tr = row-top;",
          "5147:     homogeneity_map_p = &out_homogeneity_map[tr][1];",
          "5148:     for (direction=0; direction < 2; direction++) {",
          "5149:       lixs[direction] = &lab[direction][tr][1];",
          "5150:     }",
          "5152:     for (col=left+2; col < collimit; col++) {",
          "5153:       tc = col-left;",
          "5154:       homogeneity_map_p++;",
          "5156:       for (direction=0; direction < 2; direction++) {",
          "5157:         lix = ++lixs[direction];",
          "5158:         for (i=0; i < 4; i++) {",
          "5159:    adjacent_lix = lix[dir[i]];",
          "5160:           ldiff[direction][i] = ABS(lix[0][0]-adjacent_lix[0]);",
          "5161:           abdiff[direction][i] = SQR(lix[0][1]-adjacent_lix[1])",
          "5162:             + SQR(lix[0][2]-adjacent_lix[2]);",
          "5163:         }",
          "5164:       }",
          "5165:       leps = MIN(MAX(ldiff[0][0],ldiff[0][1]),",
          "5166:           MAX(ldiff[1][2],ldiff[1][3]));",
          "5167:       abeps = MIN(MAX(abdiff[0][0],abdiff[0][1]),",
          "5168:           MAX(abdiff[1][2],abdiff[1][3]));",
          "5169:       for (direction=0; direction < 2; direction++) {",
          "5170:  homogeneity = 0;",
          "5171:         for (i=0; i < 4; i++) {",
          "5172:           if (ldiff[direction][i] <= leps && abdiff[direction][i] <= abeps) {",
          "5173:      homogeneity++;",
          "5174:    }",
          "5175:  }",
          "5176:  homogeneity_map_p[0][direction] = homogeneity;",
          "5177:       }",
          "5178:     }",
          "5179:   }",
          "5180: }",
          "5181: void CLASS ahd_interpolate_combine_homogeneous_pixels(int top, int left, ushort (*rgb)[TS][TS][3], char (*homogeneity_map)[TS][2])",
          "5182: {",
          "5183:   int row, col;",
          "5184:   int tr, tc;",
          "5185:   int i, j;",
          "5186:   int direction;",
          "5187:   int hm[2];",
          "5188:   int c;",
          "5189:   const int rowlimit = MIN(top+TS-3, height-5);",
          "5190:   const int collimit = MIN(left+TS-3, width-5);",
          "5192:   ushort (*pix)[4];",
          "5193:   ushort (*rix[2])[3];",
          "5195:   for (row=top+3; row < rowlimit; row++) {",
          "5196:     tr = row-top;",
          "5197:     pix = &image[row*width+left+2];",
          "5198:     for (direction = 0; direction < 2; direction++) {",
          "5199:       rix[direction] = &rgb[direction][tr][2];",
          "5200:     }",
          "5202:     for (col=left+3; col < collimit; col++) {",
          "5203:       tc = col-left;",
          "5204:       pix++;",
          "5205:       for (direction = 0; direction < 2; direction++) {",
          "5206:         rix[direction]++;",
          "5207:       }",
          "5209:       for (direction=0; direction < 2; direction++) {",
          "5210:         hm[direction] = 0;",
          "5211:         for (i=tr-1; i <= tr+1; i++) {",
          "5212:           for (j=tc-1; j <= tc+1; j++) {",
          "5213:             hm[direction] += homogeneity_map[i][j][direction];",
          "5214:           }",
          "5215:         }",
          "5216:       }",
          "5217:       if (hm[0] != hm[1]) {",
          "5218:         memcpy(pix[0], rix[hm[1] > hm[0]][0], 3 * sizeof(ushort));",
          "5219:       } else {",
          "5220:         FORC3 {",
          "5221:           pix[0][c] = (rix[0][0][c] + rix[1][0][c]) >> 1;",
          "5222:         }",
          "5223:       }",
          "5224:     }",
          "5225:   }",
          "5226: }",
          "5227: void CLASS ahd_interpolate()",
          "5228: {",
          "5229:   int i, j, k, top, left;",
          "5230:   float xyz_cam[3][4],r;",
          "5231:   char *buffer;",
          "5232:   ushort (*rgb)[TS][TS][3];",
          "5233:   short (*lab)[TS][TS][3];",
          "5234:   char (*homo)[TS][2];",
          "5235:   int terminate_flag = 0;",
          "5237:   if(dcraw_cbrt[0]<-0.1){",
          "5238:       for (i=0x10000-1; i >=0; i--) {",
          "5239:           r = i / 65535.0;",
          "5240:           dcraw_cbrt[i] = 64.0*(r > 0.008856 ? pow((double)r,1/3.0) : 7.787*r + 16/116.0);",
          "5241:       }",
          "5242:   }",
          "5244: #ifdef DCRAW_VERBOSE",
          "5245:   if (verbose) fprintf (stderr,_(\"AHD interpolation...\\n\"));",
          "5246: #endif",
          "5248:   for (i=0; i < 3; i++) {",
          "5249:     for (j=0; j < colors; j++) {",
          "5250:       xyz_cam[i][j] = 0;",
          "5251:       for (k=0; k < 3; k++) {",
          "5252:         xyz_cam[i][j] += xyz_rgb[i][k] * rgb_cam[k][j] / d65_white[i];",
          "5253:       }",
          "5254:     }",
          "5255:   }",
          "5257:   border_interpolate(5);",
          "5259: #ifdef LIBRAW_LIBRARY_BUILD",
          "5260: #ifdef LIBRAW_USE_OPENMP",
          "5261: #pragma omp parallel private(buffer,rgb,lab,homo,top,left,i,j,k) shared(xyz_cam,terminate_flag)",
          "5262: #endif",
          "5263: #endif",
          "5264:   {",
          "5266:     merror (buffer, \"ahd_interpolate()\");",
          "5267:     rgb  = (ushort(*)[TS][TS][3]) buffer;",
          "5268:     lab  = (short (*)[TS][TS][3])(buffer + 12*TS*TS);",
          "5269:     homo = (char  (*)[TS][2])    (buffer + 24*TS*TS);",
          "5271: #ifdef LIBRAW_LIBRARY_BUILD",
          "5272: #ifdef LIBRAW_USE_OPENMP",
          "5273: #pragma omp for schedule(dynamic)",
          "5274: #endif",
          "5275: #endif",
          "5276:     for (top=2; top < height-5; top += TS-6){",
          "5277: #ifdef LIBRAW_LIBRARY_BUILD",
          "5278: #ifdef LIBRAW_USE_OPENMP",
          "5279:         if(0== omp_get_thread_num())",
          "5280: #endif",
          "5281:            if(callbacks.progress_cb) {",
          "5282:                int rr = (*callbacks.progress_cb)(callbacks.progresscb_data,LIBRAW_PROGRESS_INTERPOLATE,top-2,height-7);",
          "5283:                if(rr)",
          "5284:                    terminate_flag = 1;",
          "5285:            }",
          "5286: #endif",
          "5287:         for (left=2; !terminate_flag && (left < width-5); left += TS-6) {",
          "5288:             ahd_interpolate_green_h_and_v(top, left, rgb);",
          "5289:             ahd_interpolate_r_and_b_and_convert_to_cielab(top, left, rgb, lab, xyz_cam);",
          "5290:             ahd_interpolate_build_homogeneity_map(top, left, lab, homo);",
          "5291:             ahd_interpolate_combine_homogeneous_pixels(top, left, rgb, homo);",
          "5292:       }",
          "5293:     }",
          "5294:     free (buffer);",
          "5295:   }",
          "5296: #ifdef LIBRAW_LIBRARY_BUILD",
          "5297:   if(terminate_flag)",
          "5298:       throw LIBRAW_EXCEPTION_CANCELLED_BY_CALLBACK;",
          "5299: #endif",
          "5300: }",
          "5304: #undef TS",
          "5306: #else",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "4717:   free (buffer);",
          "4718: }",
          "4719: #undef TS",
          "4721: void CLASS median_filter()",
          "4722: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5439: #endif",
          "",
          "---------------"
        ],
        "internal/dcraw_common.cpp||internal/dcraw_common.cpp": [
          "File: internal/dcraw_common.cpp -> internal/dcraw_common.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "620:   return diff;",
          "621: }",
          "623: ushort * CLASS ljpeg_row (int jrow, struct jhead *jh)",
          "624: {",
          "625:   int col, c, diff, pred, spred=0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "623: #ifdef LIBRAW_LIBRARY_BUILD",
          "624: int CLASS ljpeg_diff_new (LibRaw_bit_buffer& bits, LibRaw_byte_buffer* buf,ushort *huff)",
          "625: {",
          "626:   int len, diff;",
          "628:   len = bits._gethuff_lj(buf,*huff,huff+1);",
          "629:   if (len == 16 && (!dng_version || dng_version >= 0x1010000))",
          "630:     return -32768;",
          "631:   diff = bits._getbits_lj(buf,len);",
          "632:   if ((diff & (1 << (len-1))) == 0)",
          "633:     diff -= (1 << len) - 1;",
          "634:   return diff;",
          "635: }",
          "637: int CLASS ljpeg_diff_pef (LibRaw_bit_buffer& bits, LibRaw_byte_buffer* buf,ushort *huff)",
          "638: {",
          "639:   int len, diff;",
          "641:   len = bits._gethuff(buf,*huff,huff+1,zero_after_ff);",
          "642:   if (len == 16 && (!dng_version || dng_version >= 0x1010000))",
          "643:     return -32768;",
          "644:   diff = bits._getbits(buf,len,zero_after_ff);",
          "645:   if ((diff & (1 << (len-1))) == 0)",
          "646:     diff -= (1 << len) - 1;",
          "647:   return diff;",
          "648: }",
          "650: ushort * CLASS ljpeg_row_new (int jrow, struct jhead *jh, LibRaw_bit_buffer& bits,LibRaw_byte_buffer* bytes)",
          "651: {",
          "652:   int col, c, diff, pred, spred=0;",
          "653:   ushort mark=0, *row[3];",
          "655:   if (jrow * jh->wide % jh->restart == 0) {",
          "656:     FORC(6) jh->vpred[c] = 1 << (jh->bits-1);",
          "657:     if (jrow) {",
          "658:         bytes->unseek2();",
          "659:         do mark = (mark << 8) + (c = bytes->get_byte());",
          "660:         while (c != EOF && mark >> 4 != 0xffd);",
          "661:     }",
          "662:     bits.reset();",
          "663:   }",
          "664:   FORC3 row[c] = jh->row + jh->wide*jh->clrs*((jrow+c) & 1);",
          "665:   for (col=0; col < jh->wide; col++)",
          "666:     FORC(jh->clrs) {",
          "667:         diff = ljpeg_diff_new (bits,bytes,jh->huff[c]);",
          "668:       if (jh->sraw && c <= jh->sraw && (col | c))",
          "669:       pred = spred;",
          "670:       else if (col) pred = row[0][-jh->clrs];",
          "671:       else     pred = (jh->vpred[c] += diff) - diff;",
          "672:       if (jrow && col) switch (jh->psv) {",
          "673:  case 1: break;",
          "674:  case 2: pred = row[1][0];     break;",
          "675:  case 3: pred = row[1][-jh->clrs];    break;",
          "676:  case 4: pred = pred +   row[1][0] - row[1][-jh->clrs];  break;",
          "677:  case 5: pred = pred + ((row[1][0] - row[1][-jh->clrs]) >> 1); break;",
          "678:  case 6: pred = row[1][0] + ((pred - row[1][-jh->clrs]) >> 1); break;",
          "679:  case 7: pred = (pred + row[1][0]) >> 1;    break;",
          "680:  default: pred = 0;",
          "681:       }",
          "682:       if ((**row = pred + diff) >> jh->bits) derror();",
          "683:       if (c <= jh->sraw) spred = **row;",
          "684:       row[0]++; row[1]++;",
          "685:     }",
          "686:   return row[2];",
          "687: }",
          "689: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "662: void CLASS lossless_jpeg_load_raw()",
          "663: {",
          "665:   struct jhead jh;",
          "666:   ushort *rp;",
          "668:   if (!ljpeg_start (&jh, 0)) return;",
          "669:   jwide = jh.wide * jh.clrs;",
          "671:   for (jrow=0; jrow < jh.high; jrow++) {",
          "672:     rp = ljpeg_row (jrow, &jh);",
          "673:     if (load_flags & 1)",
          "674:       row = jrow & 1 ? height-1-jrow/2 : jrow/2;",
          "675:     for (jcol=0; jcol < jwide; jcol++) {",
          "676:       val = curve[*rp++];",
          "677:       if (cr2_slice[0]) {",
          "678:  jidx = jrow*jwide + jcol;",
          "679:  i = jidx / (cr2_slice[1]*jh.high);",
          "",
          "[Removed Lines]",
          "664:   int jwide, jrow, jcol, val, jidx, i, j, row=0, col=0;",
          "",
          "[Added Lines]",
          "733:   int jwide, jrow, jcol, val, i, row=0, col=0;",
          "734: #ifndef LIBRAW_LIBRARY_BUILD",
          "735:   int jidx,j;",
          "736: #endif",
          "740: #ifdef LIBRAW_LIBRARY_BUILD",
          "741:   int save_min = 0;",
          "742:   unsigned slicesW[16],slicesWcnt=0,slices;",
          "743:   unsigned *offset;",
          "744:   unsigned t_y=0,t_x=0,t_s=0,slice=0,pixelsInSlice,pixno;",
          "745:   if (!strcasecmp(make,\"KODAK\"))",
          "746:       save_min = 1;",
          "747: #endif",
          "749: #ifdef LIBRAW_LIBRARY_BUILD",
          "750:   if (cr2_slice[0]>15)",
          "751:       throw LIBRAW_EXCEPTION_IO_EOF; // change many slices",
          "752: #else",
          "753:   if (cr2_slice[0]>15)",
          "754:   {",
          "755:       fprintf(stderr,\"Too many CR2 slices: %d\\n\",cr2_slice[0]+1);",
          "756:       return;",
          "757:   }",
          "758: #endif",
          "764: #ifdef LIBRAW_LIBRARY_BUILD",
          "765:   if(cr2_slice[0])",
          "766:       {",
          "767:           for(i=0;i<cr2_slice[0];i++)",
          "768:               slicesW[slicesWcnt++] = cr2_slice[1];",
          "769:           slicesW[slicesWcnt++] = cr2_slice[2];",
          "770:       }",
          "771:   else",
          "772:       {",
          "774:           slicesW[slicesWcnt++] = raw_width; // safe fallback",
          "775:       }",
          "777:   slices = slicesWcnt * jh.high;",
          "778:   offset = (unsigned*)calloc(slices+1,sizeof(offset[0]));",
          "780:   for(slice=0;slice<slices;slice++)",
          "781:       {",
          "782:           offset[slice] = (t_x + t_y * raw_width)| (t_s<<28);",
          "783:           if((offset[slice] & 0x0fffffff) >= raw_width * raw_height)",
          "784:               throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "785:           t_y++;",
          "786:           if(t_y == jh.high)",
          "787:               {",
          "788:                   t_y = 0;",
          "789:                   t_x += slicesW[t_s++];",
          "790:               }",
          "791:       }",
          "792:   offset[slices] = offset[slices-1];",
          "793:   slice = 1; // next slice",
          "794:   pixno = offset[0];",
          "795:   pixelsInSlice = slicesW[0];",
          "796: #endif",
          "798: #ifdef LIBRAW_LIBRARY_BUILD",
          "799:   LibRaw_byte_buffer *buf=NULL;",
          "800:   if(data_size)",
          "801:       buf = ifp->make_byte_buffer(data_size);",
          "802:   LibRaw_bit_buffer bits;",
          "803: #endif",
          "806: #ifdef LIBRAW_LIBRARY_BUILD",
          "807:       if (buf)",
          "808:           rp = ljpeg_row_new (jrow, &jh,bits,buf);",
          "809:       else",
          "810: #endif",
          "816: #ifndef LIBRAW_LIBRARY_BUILD",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "683:  row = jidx / cr2_slice[1+j];",
          "684:  col = jidx % cr2_slice[1+j] + i*cr2_slice[1];",
          "685:       }",
          "686:       if (raw_width == 3984 && (col -= 2) < 0)",
          "687:  col += (row--,raw_width);",
          "688:       if (row >= 0) RAW(row,col) = val;",
          "689:       if (++col >= raw_width)",
          "690:  col = (row++,0);",
          "691:     }",
          "692:   }",
          "693:   ljpeg_end (&jh);",
          "694: }",
          "696: void CLASS canon_sraw_load_raw()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "827: #else",
          "829:       if(buf)",
          "830:           {",
          "831:               if(!(load_flags & 1))",
          "832:                   row = pixno/raw_width;",
          "833:               col = pixno % raw_width;",
          "834:               pixno++;",
          "835:               if (0 == --pixelsInSlice)",
          "836:                   {",
          "837:                       unsigned o = offset[slice++];",
          "838:                       pixno = o & 0x0fffffff;",
          "839:                       pixelsInSlice = slicesW[o>>28];",
          "840:                   }",
          "841:           }",
          "842: #endif",
          "846: #ifndef LIBRAW_LIBRARY_BUILD",
          "849: #else",
          "850:       if(!buf) // 1D or 1Ds case",
          "851:          if (++col >= raw_width)",
          "852:             col = (row++,0);",
          "853: #endif",
          "857: #ifdef LIBRAW_LIBRARY_BUILD",
          "858:   if(buf)",
          "859:       delete buf;",
          "860:   free(offset);",
          "861: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "704:   if (!ljpeg_start (&jh, 0)) return;",
          "705:   jwide = (jh.wide >>= 1) * jh.clrs;",
          "707:   for (ecol=slice=0; slice <= cr2_slice[0]; slice++) {",
          "708:     scol = ecol;",
          "709:     ecol += cr2_slice[1] * 2 / jh.clrs;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "875: #ifdef LIBRAW_LIBRARY_BUILD",
          "876:   if(!data_size)",
          "877:       throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "878:   LibRaw_byte_buffer *buf = ifp->make_byte_buffer(data_size);",
          "879:   LibRaw_bit_buffer bits;",
          "880: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "712:       ip = (short (*)[4]) image + row*width;",
          "713:       for (col=scol; col < ecol; col+=2, jcol+=jh.clrs) {",
          "714:  if ((jcol %= jwide) == 0)",
          "716:  if (col >= width) continue;",
          "717:  FORC (jh.clrs-2)",
          "718:    ip[col + (c >> 1)*width + (c & 1)][0] = rp[jcol+c];",
          "",
          "[Removed Lines]",
          "715:    rp = (short *) ljpeg_row (jrow++, &jh);",
          "",
          "[Added Lines]",
          "890: #ifdef LIBRAW_LIBRARY_BUILD",
          "891:             rp = (short*) ljpeg_row_new (jrow++, &jh,bits,buf);",
          "892: #else",
          "893:             rp = (short *) ljpeg_row (jrow++, &jh);",
          "894: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "759:     }",
          "760:     FORC3 rp[c] = CLIP(pix[c] * sraw_mul[c] >> 10);",
          "761:   }",
          "762:   ljpeg_end (&jh);",
          "763:   maximum = 0x3fff;",
          "764: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "941: #ifdef LIBRAW_LIBRARY_BUILD",
          "942:   delete buf;",
          "943: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "818:     jwide = jh.wide;",
          "819:     if (filters) jwide *= jh.clrs;",
          "820:     jwide /= is_raw;",
          "821: #ifndef LIBRAW_LIBRARY_BUILD",
          "822:     for (row=col=jrow=0; jrow < jh.high; jrow++) {",
          "823:       rp = ljpeg_row (jrow, &jh);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1003: #ifdef LIBRAW_LIBRARY_BUILD",
          "1004:     if(!data_size)",
          "1005:         throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "1006:     LibRaw_byte_buffer *buf = ifp->make_byte_buffer(data_size);",
          "1007:     LibRaw_bit_buffer bits;",
          "1008: #endif",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "831:     if(raw_image)",
          "832:       {",
          "833:         for (row=col=jrow=0; jrow < jh.high; jrow++) {",
          "834:           rp = ljpeg_row (jrow, &jh);",
          "835:           for (jcol=0; jcol < jwide; jcol++) {",
          "836:             adobe_copy_pixel_raw (trow+row, tcol+col, &rp);",
          "837:             if (++col >= tile_width || col >= raw_width)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1023: #ifdef LIBRAW_LIBRARY_BUILD",
          "1024:           rp = ljpeg_row_new (jrow, &jh,bits,buf);",
          "1025: #else",
          "1027: #endif",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "842:     else",
          "843:       {",
          "844:         for (row=col=jrow=0; jrow < jh.high; jrow++) {",
          "845:           rp = ljpeg_row (jrow, &jh);",
          "846:           for (jcol=0; jcol < jwide; jcol++) {",
          "847:             adobe_copy_pixel_color (trow+row, tcol+col, &rp);",
          "848:             if (++col >= tile_width || col >= raw_width)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1038: #ifdef LIBRAW_LIBRARY_BUILD",
          "1039:           rp = ljpeg_row_new (jrow, &jh,bits,buf);",
          "1040: #else",
          "1042: #endif",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "855:     if ((tcol += tile_width) >= raw_width)",
          "856:       trow += tile_length + (tcol = 0);",
          "857:     ljpeg_end (&jh);",
          "858:   }",
          "859: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1055: #ifdef LIBRAW_LIBRARY_BUILD",
          "1056:     delete buf;",
          "1057: #endif",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "866:   pixel = (ushort *) calloc (raw_width * tiff_samples, sizeof *pixel);",
          "867:   merror (pixel, \"packed_dng_load_raw()\");",
          "868:   for (row=0; row < raw_height; row++) {",
          "869:     if (tiff_bps == 16)",
          "870:       read_shorts (pixel, raw_width * tiff_samples);",
          "871:     else {",
          "872:       getbits(-1);",
          "873:       for (col=0; col < raw_width * tiff_samples; col++)",
          "874:  pixel[col] = getbits(tiff_bps);",
          "875:     }",
          "876: #ifndef LIBRAW_LIBRARY_BUILD",
          "877:     for (rp=pixel, col=0; col < raw_width; col++)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1069: #ifdef LIBRAW_LIBRARY_BUILD",
          "1070:   int dsz= raw_height*raw_width * tiff_samples * tiff_bps/8;",
          "1071:   LibRaw_byte_buffer *buf = NULL;",
          "1072:   if (tiff_bps != 16)",
          "1073:       {",
          "1074:           buf = ifp->make_byte_buffer(dsz);",
          "1075:       }",
          "1076:   LibRaw_bit_buffer bits;",
          "1077: #endif",
          "1083: #ifdef LIBRAW_LIBRARY_BUILD",
          "1084:         bits.reset();",
          "1085:         for (col=0; col < raw_width * tiff_samples; col++)",
          "1086:             pixel[col] = bits._getbits(buf,tiff_bps,zero_after_ff);",
          "1088: #else",
          "1092: #endif",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "886: #endif",
          "887:   }",
          "888:   free (pixel);",
          "889: }",
          "891: void CLASS pentax_load_raw()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1107: #ifdef LIBRAW_LIBRARY_BUILD",
          "1108:     if(buf)",
          "1109:         delete buf;",
          "1110: #endif",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "904:       huff[++i] = bit[1][c] << 8 | c;",
          "905:   huff[0] = 12;",
          "906:   fseek (ifp, data_offset, SEEK_SET);",
          "907:   getbits(-1);",
          "908:   for (row=0; row < raw_height; row++)",
          "909:     for (col=0; col < raw_width; col++) {",
          "910:       diff = ljpeg_diff (huff);",
          "911:       if (col < 2) hpred[col] = vpred[row & 1][col] += diff;",
          "912:       else    hpred[col & 1] += diff;",
          "913:       RAW(row,col) = hpred[col & 1];",
          "914:       if (hpred[col & 1] >> tiff_bps) derror();",
          "915:     }",
          "916: }",
          "918: void CLASS nikon_load_raw()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1129: #ifdef LIBRAW_LIBRARY_BUILD",
          "1130:   if(!data_size)",
          "1131:       throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "1132:   LibRaw_byte_buffer *buf = ifp->make_byte_buffer(data_size);",
          "1133:   LibRaw_bit_buffer bits;",
          "1134:   bits.reset();",
          "1135: #else",
          "1137: #endif",
          "1140: #ifdef LIBRAW_LIBRARY_BUILD",
          "1141:       diff = ljpeg_diff_pef(bits,buf,huff);",
          "1142: #else",
          "1144: #endif",
          "1150: #ifdef LIBRAW_LIBRARY_BUILD",
          "1151:   delete buf;",
          "1152: #endif",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "957:   while (curve[max-2] == curve[max-1]) max--;",
          "958:   huff = make_decoder (nikon_tree[tree]);",
          "959:   fseek (ifp, data_offset, SEEK_SET);",
          "960:   getbits(-1);",
          "961:   for (min=row=0; row < height; row++) {",
          "962:     if (split && row == split) {",
          "963:       free (huff);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1197: #ifdef LIBRAW_LIBRARY_BUILD",
          "1198:   if(!data_size)",
          "1199:       throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "1200:   LibRaw_byte_buffer *buf = ifp->make_byte_buffer(data_size);",
          "1201:   LibRaw_bit_buffer bits;",
          "1202:   bits.reset();",
          "1203: #else",
          "1205: #endif",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "965:       max += (min = 16) << 1;",
          "966:     }",
          "967:     for (col=0; col < raw_width; col++) {",
          "968:       i = gethuff(huff);",
          "969:       len = i & 15;",
          "970:       shl = i >> 4;",
          "971:       diff = ((getbits(len-shl) << 1) + 1) << shl >> 1;",
          "972:       if ((diff & (1 << (len-1))) == 0)",
          "973:  diff -= (1 << len) - !shl;",
          "974:       if (col < 2) hpred[col] = vpred[row & 1][col] += diff;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1213: #ifdef LIBRAW_LIBRARY_BUILD",
          "1214:         i = bits._gethuff(buf,*huff,huff+1,zero_after_ff);",
          "1215: #else",
          "1217: #endif",
          "1220: #ifdef LIBRAW_LIBRARY_BUILD",
          "1221:       diff = ((bits._getbits(buf,len-shl,zero_after_ff) << 1) + 1) << shl >> 1;",
          "1222: #else",
          "1224: #endif",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "977:       RAW(row,col) = curve[LIM((short)hpred[col & 1],0,0x3fff)];",
          "978:     }",
          "979:   }",
          "980:   free (huff);",
          "981: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1233: #ifdef LIBRAW_LIBRARY_BUILD",
          "1234:   delete buf;",
          "1235: #endif",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1070:     if (tail[i]) nz++;",
          "1071:   return nz > 20;",
          "1072: }",
          "1074: void CLASS ppm_thumb()",
          "1075: {",
          "1076:   char *thumb;",
          "",
          "[Removed Lines]",
          "1073: #line 1343 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "1329: #line 1599 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1674:   for (i=12; i--; )",
          "1675:     FORC(2048 >> i) huff[++n] = (i+1) << 8 | i;",
          "1676:   fseek (ifp, 7, SEEK_CUR);",
          "1677:   getbits(-1);",
          "1678:   for (row=0; row < height; row++) {",
          "1679:     memset (acarry, 0, sizeof acarry);",
          "1680:     for (col=0; col < raw_width; col++) {",
          "1681:       carry = acarry[col & 1];",
          "1682:       i = 2 * (carry[2] < 3);",
          "1683:       for (nbits=2+i; (ushort) carry[0] >> (nbits+i); nbits++);",
          "1684:       low = (sign = getbits(3)) & 3;",
          "1685:       sign = sign << 29 >> 31;",
          "1686:       if ((high = getbithuff(12,huff)) == 12)",
          "1687:  high = getbits(16-nbits) >> 1;",
          "1688:       carry[0] = (high << nbits) | getbits(nbits);",
          "1689:       diff = (carry[0] ^ sign) + carry[1];",
          "1690:       carry[1] = (diff*3 + carry[1]) >> 5;",
          "1691:       carry[2] = carry[0] > 16 ? 0 : carry[2]+1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1933: #ifdef LIBRAW_LIBRARY_BUILD",
          "1934:   if(!data_size)",
          "1935:       throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "1936:   LibRaw_byte_buffer *buf = ifp->make_byte_buffer(data_size);",
          "1937:   LibRaw_bit_buffer bits;",
          "1938:   bits.reset();",
          "1939: #else",
          "1941: #endif",
          "1948: #ifdef LIBRAW_LIBRARY_BUILD",
          "1949:       low = (sign = bits._getbits(buf,3,zero_after_ff)) & 3;",
          "1950:       sign = sign << 29 >> 31;",
          "1951:       if ((high = bits._gethuff(buf,12,huff,zero_after_ff)) == 12)",
          "1952:           high = bits._getbits(buf,16-nbits,zero_after_ff) >> 1;",
          "1953:       carry[0] = (high << nbits) | bits._getbits(buf,nbits,zero_after_ff);",
          "1954: #else",
          "1960: #endif",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1706:       if ((RAW(row,col) = pred + ((diff << 2) | low)) >> 12) derror();",
          "1707:     }",
          "1708:   }",
          "1709: }",
          "1711: void CLASS minolta_rd175_load_raw()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1981: #ifdef LIBRAW_LIBRARY_BUILD",
          "1982:   delete buf;",
          "1983: #endif",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2331:   for (n=i=0; i < 18; i++)",
          "2332:     FORC(32768 >> (tab[i] >> 8)) huff[n++] = tab[i];",
          "2333:   getbits(-1);",
          "2334:   for (col = raw_width; col--; )",
          "2335:     for (row=0; row < raw_height+1; row+=2) {",
          "2336:       if (row == raw_height) row = 1;",
          "2337:       len = getbithuff(15,huff);",
          "2338:       diff = getbits(len);",
          "2339:       if ((diff & (1 << (len-1))) == 0)",
          "2340:  diff -= (1 << len) - 1;",
          "2341:       if ((sum += diff) >> 12) derror();",
          "2342:       if (row < height) RAW(row,col) = sum;",
          "2343:     }",
          "2344: }",
          "2346: void CLASS sony_arw2_load_raw()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2608: #ifdef LIBRAW_LIBRARY_BUILD",
          "2609:   LibRaw_byte_buffer *buf=NULL;",
          "2610:   if(data_size)",
          "2611:       buf = ifp->make_byte_buffer(data_size);",
          "2612:   else",
          "2613:       getbits(-1);",
          "2615:   LibRaw_bit_buffer bits;",
          "2616:   bits.reset();",
          "2617: #else",
          "2619: #endif",
          "2623: #ifdef LIBRAW_LIBRARY_BUILD",
          "2624:       if(data_size)",
          "2625:           {",
          "2626:               len = bits._gethuff(buf,15,huff,zero_after_ff);",
          "2627:               diff = bits._getbits(buf,len,zero_after_ff);",
          "2628:           }",
          "2629:       else",
          "2630:           {",
          "2631:               len = getbithuff(15,huff);",
          "2632:               diff = getbits(len);",
          "2633:           }",
          "2634: #else",
          "2637: #endif",
          "2643: #ifdef LIBRAW_LIBRARY_BUILD",
          "2644:   if(buf) delete buf;",
          "2645: #endif",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2595:   jas_stream_close (in);",
          "2596: #endif",
          "2597: }",
          "2599: void CLASS crop_masked_pixels()",
          "2600: {",
          "2601:   int row, col;",
          "",
          "[Removed Lines]",
          "2598: #line 3575 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "2900: #line 3877 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2696:   RUN_CALLBACK(LIBRAW_PROGRESS_REMOVE_ZEROES,1,2);",
          "2697: #endif",
          "2698: }",
          "2700: void CLASS gamma_curve (double pwr, double ts, int mode, int imax)",
          "2701: {",
          "2702:   int i;",
          "",
          "[Removed Lines]",
          "2699: #line 3841 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "3001: #line 4143 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2865:     temp[i] = 2*base[st*i] + base[st*(i-sc)] + base[st*(2*size-2-(i+sc))];",
          "2866: }",
          "2868: void CLASS wavelet_denoise()",
          "2869: {",
          "2870:   float *fimg=0, *temp, thold, mul[2], avg, diff;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3170: #if !defined(LIBRAW_USE_OPENMP)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2944:   }",
          "2945:   free (fimg);",
          "2946: }",
          "2949: void CLASS green_matching()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3251: void CLASS wavelet_denoise()",
          "3252: {",
          "3253:   float *fimg=0, *temp, thold, mul[2], avg, diff;",
          "3254:    int scale=1, size, lev, hpass, lpass, row, col, nc, c, i, wlast, blk[2];",
          "3255:   ushort *window[4];",
          "3256:   static const float noise[] =",
          "3257:   { 0.8002,0.2735,0.1202,0.0585,0.0291,0.0152,0.0080,0.0044 };",
          "3259: #ifdef DCRAW_VERBOSE",
          "3260:   if (verbose) fprintf (stderr,_(\"Wavelet denoising...\\n\"));",
          "3261: #endif",
          "3263:   while (maximum << scale < 0x10000) scale++;",
          "3264:   maximum <<= --scale;",
          "3265:   black <<= scale;",
          "3266:   FORC4 cblack[c] <<= scale;",
          "3267:   if ((size = iheight*iwidth) < 0x15550000)",
          "3268:     fimg = (float *) malloc ((size*3 + iheight + iwidth) * sizeof *fimg);",
          "3269:   merror (fimg, \"wavelet_denoise()\");",
          "3270:   temp = fimg + size*3;",
          "3271:   if ((nc = colors) == 3 && filters) nc++;",
          "3272: #ifdef LIBRAW_LIBRARY_BUILD",
          "3273: #pragma omp parallel default(shared) private(i,col,row,thold,lev,lpass,hpass,temp,c) firstprivate(scale,size)",
          "3274: #endif",
          "3275:   {",
          "3276:       temp = (float*)malloc( (iheight + iwidth) * sizeof *fimg);",
          "3278: #ifdef LIBRAW_LIBRARY_BUILD",
          "3279: #pragma omp for",
          "3280: #endif",
          "3281:       for (i=0; i < size; i++)",
          "3282:         fimg[i] = 256 * sqrt((double)(image[i][c] << scale));",
          "3283:       for (hpass=lev=0; lev < 5; lev++) {",
          "3284:  lpass = size*((lev & 1)+1);",
          "3285: #ifdef LIBRAW_LIBRARY_BUILD",
          "3286: #pragma omp for",
          "3287: #endif",
          "3288:  for (row=0; row < iheight; row++) {",
          "3289:    hat_transform (temp, fimg+hpass+row*iwidth, 1, iwidth, 1 << lev);",
          "3290:    for (col=0; col < iwidth; col++)",
          "3291:      fimg[lpass + row*iwidth + col] = temp[col] * 0.25;",
          "3292:  }",
          "3293: #ifdef LIBRAW_LIBRARY_BUILD",
          "3294: #pragma omp for",
          "3295: #endif",
          "3296:  for (col=0; col < iwidth; col++) {",
          "3297:    hat_transform (temp, fimg+lpass+col, iwidth, iheight, 1 << lev);",
          "3298:    for (row=0; row < iheight; row++)",
          "3299:      fimg[lpass + row*iwidth + col] = temp[row] * 0.25;",
          "3300:  }",
          "3301:  thold = threshold * noise[lev];",
          "3302: #ifdef LIBRAW_LIBRARY_BUILD",
          "3303: #pragma omp for",
          "3304: #endif",
          "3305:  for (i=0; i < size; i++) {",
          "3306:    fimg[hpass+i] -= fimg[lpass+i];",
          "3307:    if (fimg[hpass+i] < -thold) fimg[hpass+i] += thold;",
          "3308:    else if (fimg[hpass+i] >  thold) fimg[hpass+i] -= thold;",
          "3309:    else  fimg[hpass+i] = 0;",
          "3310:    if (hpass) fimg[i] += fimg[hpass+i];",
          "3311:  }",
          "3312:  hpass = lpass;",
          "3313:       }",
          "3314: #ifdef LIBRAW_LIBRARY_BUILD",
          "3315: #pragma omp for",
          "3316: #endif",
          "3317:       for (i=0; i < size; i++)",
          "3318:  image[i][c] = CLIP(SQR(fimg[i]+fimg[lpass+i])/0x10000);",
          "3319:     }",
          "3320:     free(temp);",
          "3327:    for (row=0; row < 2; row++){",
          "3328:       mul[row] = 0.125 * pre_mul[FC(row+1,0) | 1] / pre_mul[FC(row,0) | 1];",
          "3329:       blk[row] = cblack[FC(row,0) | 1];",
          "3330:    }",
          "3331:     for (i=0; i < 4; i++)",
          "3332:       window[i] = (ushort *) fimg + width*i;",
          "3333:     for (wlast=-1, row=1; row < height-1; row++) {",
          "3334:       while (wlast < row+1) {",
          "3335:  for (wlast++, i=0; i < 4; i++)",
          "3336:    window[(i+3) & 3] = window[i];",
          "3337:  for (col = FC(wlast,1) & 1; col < width; col+=2)",
          "3338:    window[2][col] = BAYER(wlast,col);",
          "3339:       }",
          "3340:       thold = threshold/512;",
          "3341:       for (col = (FC(row,0) & 1)+1; col < width-1; col+=2) {",
          "3342:  avg = ( window[0][col-1] + window[0][col+1] +",
          "3343:   window[2][col-1] + window[2][col+1] - blk[~row & 1]*4 )",
          "3345:  avg = avg < 0 ? 0 : sqrt(avg);",
          "3346:  diff = sqrt((double)BAYER(row,col)) - avg;",
          "3347:  if      (diff < -thold) diff += thold;",
          "3348:  else if (diff >  thold) diff -= thold;",
          "3349:  else diff = 0;",
          "3350:  BAYER(row,col) = CLIP(SQR(avg+diff) + 0.5);",
          "3351:       }",
          "3352:     }",
          "3353:   }",
          "3354:   free (fimg);",
          "3355: }",
          "3357: #endif",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3397: #ifdef LIBRAW_LIBRARY_BUILD",
          "3398:   RUN_CALLBACK(LIBRAW_PROGRESS_INTERPOLATE,0,3);",
          "3399: #endif",
          "3400:   for (row=3; row < height-3; row++)",
          "3401:     for (col=3+(FC(row,3) & 1), c=FC(row,col); col < width-3; col+=2) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3810: #ifdef LIBRAW_USE_OPENMP",
          "3811: #pragma omp parallel for default(shared) private(guess, diff, row, col, d, c, i, pix) schedule(static)",
          "3812: #endif",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3416: #ifdef LIBRAW_LIBRARY_BUILD",
          "3417:   RUN_CALLBACK(LIBRAW_PROGRESS_INTERPOLATE,1,3);",
          "3418: #endif",
          "3419:   for (row=1; row < height-1; row++)",
          "3420:     for (col=1+(FC(row,2) & 1), c=FC(row,col+1); col < width-1; col+=2) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3832: #ifdef LIBRAW_USE_OPENMP",
          "3833: #pragma omp parallel for default(shared) private(guess, diff, row, col, d, c, i, pix) schedule(static)",
          "3834: #endif",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "3427: #ifdef LIBRAW_LIBRARY_BUILD",
          "3428:   RUN_CALLBACK(LIBRAW_PROGRESS_INTERPOLATE,2,3);",
          "3429: #endif",
          "3430:   for (row=1; row < height-1; row++)",
          "3431:     for (col=1+(FC(row,1) & 1), c=2-FC(row,col); col < width-1; col+=2) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3846: #ifdef LIBRAW_USE_OPENMP",
          "3847: #pragma omp parallel for default(shared) private(guess, diff, row, col, d, c, i, pix) schedule(static)",
          "3848: #endif",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "3444:     }",
          "3445: }",
          "3448:    Adaptive Homogeneity-Directed interpolation is based on",
          "3449:    the work of Keigo Hirakawa, Thomas Parks, and Paul Lee.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3867: #ifdef LIBRAW_LIBRARY_BUILD",
          "3869:    Adaptive Homogeneity-Directed interpolation is based on",
          "3870:    the work of Keigo Hirakawa, Thomas Parks, and Paul Lee.",
          "3873: static float dcraw_cbrt[0x10000] = {-1.0f};",
          "3875: static inline float calc_64cbrt(float f)",
          "3876: {",
          "3877:   unsigned u;",
          "3878:   static float lower = dcraw_cbrt[0];",
          "3879:   static float upper = dcraw_cbrt[0xffff];",
          "3881:   if (f <= 0) {",
          "3882:     return lower;",
          "3883:   }",
          "3885:   u = (unsigned) f;",
          "3886:   if (u >= 0xffff) {",
          "3887:     return upper;",
          "3888:   }",
          "3889:   return dcraw_cbrt[u];",
          "3890: }",
          "3891: void CLASS ahd_interpolate_green_h_and_v(int top, int left, ushort (*out_rgb)[TS][TS][3])",
          "3892: {",
          "3893:   int row, col;",
          "3894:   int c, val;",
          "3895:   ushort (*pix)[4];",
          "3896:   const int rowlimit = MIN(top+TS, height-2);",
          "3897:   const int collimit = MIN(left+TS, width-2);",
          "3899:   for (row = top; row < rowlimit; row++) {",
          "3900:     col = left + (FC(row,left) & 1);",
          "3901:     for (c = FC(row,col); col < collimit; col+=2) {",
          "3902:       pix = image + row*width+col;",
          "3903:       val = ((pix[-1][1] + pix[0][c] + pix[1][1]) * 2",
          "3904:             - pix[-2][c] - pix[2][c]) >> 2;",
          "3905:       out_rgb[0][row-top][col-left][1] = ULIM(val,pix[-1][1],pix[1][1]);",
          "3906:       val = ((pix[-width][1] + pix[0][c] + pix[width][1]) * 2",
          "3907:             - pix[-2*width][c] - pix[2*width][c]) >> 2;",
          "3908:       out_rgb[1][row-top][col-left][1] = ULIM(val,pix[-width][1],pix[width][1]);",
          "3909:     }",
          "3910:   }",
          "3911: }",
          "3912: void CLASS ahd_interpolate_r_and_b_in_rgb_and_convert_to_cielab(int top, int left, ushort (*inout_rgb)[TS][3], short (*out_lab)[TS][3], const float (&xyz_cam)[3][4])",
          "3913: {",
          "3914:   unsigned row, col;",
          "3915:   int c, val;",
          "3916:   ushort (*pix)[4];",
          "3917:   ushort (*rix)[3];",
          "3918:   short (*lix)[3];",
          "3919:   float xyz[3];",
          "3920:   const unsigned num_pix_per_row = 4*width;",
          "3921:   const unsigned rowlimit = MIN(top+TS-1, height-3);",
          "3922:   const unsigned collimit = MIN(left+TS-1, width-3);",
          "3923:   ushort *pix_above;",
          "3924:   ushort *pix_below;",
          "3925:   int t1, t2;",
          "3927:   for (row = top+1; row < rowlimit; row++) {",
          "3928:     pix = image + row*width + left;",
          "3929:     rix = &inout_rgb[row-top][0];",
          "3930:     lix = &out_lab[row-top][0];",
          "3932:     for (col = left+1; col < collimit; col++) {",
          "3933:       pix++;",
          "3934:       pix_above = &pix[0][0] - num_pix_per_row;",
          "3935:       pix_below = &pix[0][0] + num_pix_per_row;",
          "3936:       rix++;",
          "3937:       lix++;",
          "3939:       c = 2 - FC(row, col);",
          "3941:       if (c == 1) {",
          "3942:         c = FC(row+1,col);",
          "3943:  t1 = 2-c;",
          "3944:         val = pix[0][1] + (( pix[-1][t1] + pix[1][t1]",
          "3945:               - rix[-1][1] - rix[1][1] ) >> 1);",
          "3946:         rix[0][t1] = CLIP(val);",
          "3947:         val = pix[0][1] + (( pix_above[c] + pix_below[c]",
          "3948:               - rix[-TS][1] - rix[TS][1] ) >> 1);",
          "3949:       } else {",
          "3952:         val = rix[0][1] + (( pix_above[t1] + pix_above[t2]",
          "3953:               + pix_below[t1] + pix_below[t2]",
          "3954:               - rix[-TS-1][1] - rix[-TS+1][1]",
          "3955:               - rix[+TS-1][1] - rix[+TS+1][1] + 1) >> 2);",
          "3956:       }",
          "3957:       rix[0][c] = CLIP(val);",
          "3958:       c = FC(row,col);",
          "3959:       rix[0][c] = pix[0][c];",
          "3960:       xyz[0] = xyz[1] = xyz[2] = 0.5;",
          "3961:       FORC3 {",
          "3966:         xyz[0] += xyz_cam[0][c] * rix[0][c];",
          "3967:         xyz[1] += xyz_cam[1][c] * rix[0][c];",
          "3968:         xyz[2] += xyz_cam[2][c] * rix[0][c];",
          "3969:       }",
          "3970:       FORC3 {",
          "3971:  xyz[c] = calc_64cbrt(xyz[c]);",
          "3972:       }",
          "3973:       lix[0][0] = (116 * xyz[1] - 16);",
          "3974:       lix[0][1] = 500 * (xyz[0] - xyz[1]);",
          "3975:       lix[0][2] = 200 * (xyz[1] - xyz[2]);",
          "3976:     }",
          "3977:   }",
          "3978: }",
          "3979: void CLASS ahd_interpolate_r_and_b_and_convert_to_cielab(int top, int left, ushort (*inout_rgb)[TS][TS][3], short (*out_lab)[TS][TS][3], const float (&xyz_cam)[3][4])",
          "3980: {",
          "3981:   int direction;",
          "3982:   for (direction = 0; direction < 2; direction++) {",
          "3983:     ahd_interpolate_r_and_b_in_rgb_and_convert_to_cielab(top, left, inout_rgb[direction], out_lab[direction], xyz_cam);",
          "3984:   }",
          "3985: }",
          "3986: void CLASS ahd_interpolate_build_homogeneity_map(int top, int left, short (*lab)[TS][TS][3], char (*out_homogeneity_map)[TS][2])",
          "3987: {",
          "3988:   int row, col;",
          "3989:   int tr, tc;",
          "3990:   int direction;",
          "3991:   int i;",
          "3992:   short (*lix)[3];",
          "3993:   short (*lixs[2])[3];",
          "3994:   short *adjacent_lix;",
          "3995:   unsigned ldiff[2][4], abdiff[2][4], leps, abeps;",
          "3996:   static const int dir[4] = { -1, 1, -TS, TS };",
          "3997:   const int rowlimit = MIN(top+TS-2, height-4);",
          "3998:   const int collimit = MIN(left+TS-2, width-4);",
          "3999:   int homogeneity;",
          "4000:   char (*homogeneity_map_p)[2];",
          "4002:   memset (out_homogeneity_map, 0, 2*TS*TS);",
          "4004:   for (row=top+2; row < rowlimit; row++) {",
          "4005:     tr = row-top;",
          "4006:     homogeneity_map_p = &out_homogeneity_map[tr][1];",
          "4007:     for (direction=0; direction < 2; direction++) {",
          "4008:       lixs[direction] = &lab[direction][tr][1];",
          "4009:     }",
          "4011:     for (col=left+2; col < collimit; col++) {",
          "4012:       tc = col-left;",
          "4013:       homogeneity_map_p++;",
          "4015:       for (direction=0; direction < 2; direction++) {",
          "4016:         lix = ++lixs[direction];",
          "4017:         for (i=0; i < 4; i++) {",
          "4018:    adjacent_lix = lix[dir[i]];",
          "4019:           ldiff[direction][i] = ABS(lix[0][0]-adjacent_lix[0]);",
          "4020:           abdiff[direction][i] = SQR(lix[0][1]-adjacent_lix[1])",
          "4021:             + SQR(lix[0][2]-adjacent_lix[2]);",
          "4022:         }",
          "4023:       }",
          "4024:       leps = MIN(MAX(ldiff[0][0],ldiff[0][1]),",
          "4025:           MAX(ldiff[1][2],ldiff[1][3]));",
          "4026:       abeps = MIN(MAX(abdiff[0][0],abdiff[0][1]),",
          "4027:           MAX(abdiff[1][2],abdiff[1][3]));",
          "4028:       for (direction=0; direction < 2; direction++) {",
          "4029:  homogeneity = 0;",
          "4030:         for (i=0; i < 4; i++) {",
          "4031:           if (ldiff[direction][i] <= leps && abdiff[direction][i] <= abeps) {",
          "4032:      homogeneity++;",
          "4033:    }",
          "4034:  }",
          "4035:  homogeneity_map_p[0][direction] = homogeneity;",
          "4036:       }",
          "4037:     }",
          "4038:   }",
          "4039: }",
          "4040: void CLASS ahd_interpolate_combine_homogeneous_pixels(int top, int left, ushort (*rgb)[TS][TS][3], char (*homogeneity_map)[TS][2])",
          "4041: {",
          "4042:   int row, col;",
          "4043:   int tr, tc;",
          "4044:   int i, j;",
          "4045:   int direction;",
          "4046:   int hm[2];",
          "4047:   int c;",
          "4048:   const int rowlimit = MIN(top+TS-3, height-5);",
          "4049:   const int collimit = MIN(left+TS-3, width-5);",
          "4051:   ushort (*pix)[4];",
          "4052:   ushort (*rix[2])[3];",
          "4054:   for (row=top+3; row < rowlimit; row++) {",
          "4055:     tr = row-top;",
          "4056:     pix = &image[row*width+left+2];",
          "4057:     for (direction = 0; direction < 2; direction++) {",
          "4058:       rix[direction] = &rgb[direction][tr][2];",
          "4059:     }",
          "4061:     for (col=left+3; col < collimit; col++) {",
          "4062:       tc = col-left;",
          "4063:       pix++;",
          "4064:       for (direction = 0; direction < 2; direction++) {",
          "4065:         rix[direction]++;",
          "4066:       }",
          "4068:       for (direction=0; direction < 2; direction++) {",
          "4069:         hm[direction] = 0;",
          "4070:         for (i=tr-1; i <= tr+1; i++) {",
          "4071:           for (j=tc-1; j <= tc+1; j++) {",
          "4072:             hm[direction] += homogeneity_map[i][j][direction];",
          "4073:           }",
          "4074:         }",
          "4075:       }",
          "4076:       if (hm[0] != hm[1]) {",
          "4077:         memcpy(pix[0], rix[hm[1] > hm[0]][0], 3 * sizeof(ushort));",
          "4078:       } else {",
          "4079:         FORC3 {",
          "4080:           pix[0][c] = (rix[0][0][c] + rix[1][0][c]) >> 1;",
          "4081:         }",
          "4082:       }",
          "4083:     }",
          "4084:   }",
          "4085: }",
          "4086: void CLASS ahd_interpolate()",
          "4087: {",
          "4088:   int i, j, k, top, left;",
          "4089:   float xyz_cam[3][4],r;",
          "4090:   char *buffer;",
          "4091:   ushort (*rgb)[TS][TS][3];",
          "4092:   short (*lab)[TS][TS][3];",
          "4093:   char (*homo)[TS][2];",
          "4094:   int terminate_flag = 0;",
          "4096:   if(dcraw_cbrt[0]<-0.1){",
          "4097:       for (i=0x10000-1; i >=0; i--) {",
          "4098:           r = i / 65535.0;",
          "4099:           dcraw_cbrt[i] = 64.0*(r > 0.008856 ? pow((double)r,1/3.0) : 7.787*r + 16/116.0);",
          "4100:       }",
          "4101:   }",
          "4103: #ifdef DCRAW_VERBOSE",
          "4104:   if (verbose) fprintf (stderr,_(\"AHD interpolation...\\n\"));",
          "4105: #endif",
          "4107:   for (i=0; i < 3; i++) {",
          "4108:     for (j=0; j < colors; j++) {",
          "4109:       xyz_cam[i][j] = 0;",
          "4110:       for (k=0; k < 3; k++) {",
          "4111:         xyz_cam[i][j] += xyz_rgb[i][k] * rgb_cam[k][j] / d65_white[i];",
          "4112:       }",
          "4113:     }",
          "4114:   }",
          "4116:   border_interpolate(5);",
          "4118: #ifdef LIBRAW_LIBRARY_BUILD",
          "4119: #ifdef LIBRAW_USE_OPENMP",
          "4120: #pragma omp parallel private(buffer,rgb,lab,homo,top,left,i,j,k) shared(xyz_cam,terminate_flag)",
          "4121: #endif",
          "4122: #endif",
          "4123:   {",
          "4125:     merror (buffer, \"ahd_interpolate()\");",
          "4126:     rgb  = (ushort(*)[TS][TS][3]) buffer;",
          "4127:     lab  = (short (*)[TS][TS][3])(buffer + 12*TS*TS);",
          "4128:     homo = (char  (*)[TS][2])    (buffer + 24*TS*TS);",
          "4130: #ifdef LIBRAW_LIBRARY_BUILD",
          "4131: #ifdef LIBRAW_USE_OPENMP",
          "4132: #pragma omp for schedule(dynamic)",
          "4133: #endif",
          "4134: #endif",
          "4135:     for (top=2; top < height-5; top += TS-6){",
          "4136: #ifdef LIBRAW_LIBRARY_BUILD",
          "4137: #ifdef LIBRAW_USE_OPENMP",
          "4138:         if(0== omp_get_thread_num())",
          "4139: #endif",
          "4140:            if(callbacks.progress_cb) {",
          "4141:                int rr = (*callbacks.progress_cb)(callbacks.progresscb_data,LIBRAW_PROGRESS_INTERPOLATE,top-2,height-7);",
          "4142:                if(rr)",
          "4143:                    terminate_flag = 1;",
          "4144:            }",
          "4145: #endif",
          "4146:         for (left=2; !terminate_flag && (left < width-5); left += TS-6) {",
          "4147:             ahd_interpolate_green_h_and_v(top, left, rgb);",
          "4148:             ahd_interpolate_r_and_b_and_convert_to_cielab(top, left, rgb, lab, xyz_cam);",
          "4149:             ahd_interpolate_build_homogeneity_map(top, left, lab, homo);",
          "4150:             ahd_interpolate_combine_homogeneous_pixels(top, left, rgb, homo);",
          "4151:       }",
          "4152:     }",
          "4153:     free (buffer);",
          "4154:   }",
          "4155: #ifdef LIBRAW_LIBRARY_BUILD",
          "4156:   if(terminate_flag)",
          "4157:       throw LIBRAW_EXCEPTION_CANCELLED_BY_CALLBACK;",
          "4158: #endif",
          "4159: }",
          "4163: #undef TS",
          "4165: #else",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "3576:   free (buffer);",
          "3577: }",
          "3578: #undef TS",
          "3580: void CLASS median_filter()",
          "3581: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4298: #endif",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "3761:     fseek (ifp, save, SEEK_SET);",
          "3762:   }",
          "3763: }",
          "3765: void CLASS parse_makernote (int base, int uptag)",
          "3766: {",
          "3767:   static const uchar xlat[2][256] = {",
          "",
          "[Removed Lines]",
          "3764: #line 4910 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "4484: #line 5630 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "4276:     fseek (ifp, save, SEEK_SET);",
          "4277:   }",
          "4278: }",
          "4280: int CLASS parse_tiff_ifd (int base)",
          "4281: {",
          "4282:   unsigned entries, tag, type, len, plen=16, save;",
          "",
          "[Removed Lines]",
          "4279: #line 5430 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "4999: #line 6150 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "5520:     data_offset = get4();",
          "5521:   }",
          "5522: }",
          "5524: char * CLASS foveon_gets (int offset, char *str, int len)",
          "5525: {",
          "5526:   int i;",
          "",
          "[Removed Lines]",
          "5523: #line 6676 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "6243: #line 7396 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "5621:   }",
          "5622:   is_foveon = 1;",
          "5623: }",
          "5626:    All matrices are from Adobe DNG Converter unless otherwise noted.",
          "",
          "[Removed Lines]",
          "5624: #line 6779 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "6344: #line 7499 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "8064: }",
          "8068: void CLASS convert_to_rgb()",
          "8069: {",
          "8070: #ifndef LIBRAW_LIBRARY_BUILD",
          "",
          "[Removed Lines]",
          "8067: #line 9311 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "8787: #line 10033 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "8294:   if (flip & 1) col = iwidth  - 1 - col;",
          "8295:   return row * iwidth + col;",
          "8296: }",
          "8298: void CLASS tiff_set (ushort *ntag,",
          "8299:  ushort tag, ushort type, int count, int val)",
          "8300: {",
          "",
          "[Removed Lines]",
          "8297: #line 9566 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "9018: #line 10289 \"dcraw/dcraw.c\"",
          "",
          "---------------"
        ],
        "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp": [
          "File: internal/dcraw_fileio.cpp -> internal/dcraw_fileio.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:    for more information",
          "25: #include <math.h>",
          "26: #define CLASS LibRaw::",
          "27: #include \"libraw/libraw_types.h\"",
          "",
          "[Removed Lines]",
          "24: #line 3678 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "24: #line 3980 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: #include \"libraw/libraw.h\"",
          "30: #include \"internal/defines.h\"",
          "31: #include \"internal/var_defines.h\"",
          "34:    Seach from the current directory up to the root looking for",
          "35:    a \".badpixels\" file, and fix those pixels now.",
          "",
          "[Removed Lines]",
          "32: #line 3689 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "32: #line 3991 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: #endif",
          "55:   if (cfname)",
          "56:     fp = fopen (cfname, \"r\");",
          "58:   if (!fp)",
          "59:       {",
          "60: #ifdef LIBRAW_LIBRARY_BUILD",
          "",
          "[Removed Lines]",
          "57: #line 3739 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "57: #line 4041 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154:   RUN_CALLBACK(LIBRAW_PROGRESS_DARK_FRAME,1,2);",
          "155: #endif",
          "156: }",
          "158: #ifndef NO_LCMS",
          "159: void CLASS apply_profile (const char *input, const char *output)",
          "160: {",
          "",
          "[Removed Lines]",
          "157: #line 9224 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "157: #line 9944 \"dcraw/dcraw.c\"",
          "",
          "---------------"
        ],
        "libraw/libraw.h||libraw/libraw.h": [
          "File: libraw/libraw.h -> libraw/libraw.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:     void         recycle();",
          "145:     int COLOR(int row, int col) { return libraw_internal_data.internal_output_params.fuji_width? FCF(row,col):FC(row,col);}",
          "",
          "[Removed Lines]",
          "143:     ~LibRaw(void) { recycle(); delete tls; }",
          "",
          "[Added Lines]",
          "143:     virtual ~LibRaw(void) { recycle(); delete tls; }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:         return FC(rr,cc);",
          "170:     }",
          "172:     void*        malloc(size_t t);",
          "173:     void*        calloc(size_t n,size_t t);",
          "174:     void*        realloc(void *p, size_t s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:     virtual void copy_fuji_uncropped();",
          "173:     virtual void copy_bayer();",
          "",
          "---------------"
        ],
        "libraw/libraw_datastream.h||libraw/libraw_datastream.h": [
          "File: libraw/libraw_datastream.h -> libraw/libraw_datastream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     virtual int         scanf_one(const char *, void *) = 0;",
          "67:     virtual int         eof() = 0;",
          "68:     virtual void *      make_jas_stream() = 0;",
          "71:     virtual LibRaw_byte_buffer *make_byte_buffer(unsigned int sz);",
          "",
          "[Removed Lines]",
          "69:     virtual int         jpeg_src(void *jpegdata) { return -1; }",
          "",
          "[Added Lines]",
          "69:     virtual int         jpeg_src(void *) { return -1; }",
          "",
          "---------------"
        ],
        "libraw/libraw_version.h||libraw/libraw_version.h": [
          "File: libraw/libraw_version.h -> libraw/libraw_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #define LIBRAW_MAJOR_VERSION  0",
          "27: #define LIBRAW_MINOR_VERSION  15",
          "28: #define LIBRAW_PATCH_VERSION  0",
          "31: #define LIBRAW_SHLIB_CURRENT   6",
          "32: #define LIBRAW_SHLIB_REVISION  0",
          "",
          "[Removed Lines]",
          "29: #define LIBRAW_VERSION_TAIL   Alpha2",
          "",
          "[Added Lines]",
          "29: #define LIBRAW_VERSION_TAIL   Alpha3",
          "",
          "---------------"
        ],
        "src/libraw_cxx.cpp||src/libraw_cxx.cpp": [
          "File: src/libraw_cxx.cpp -> src/libraw_cxx.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1006:     }",
          "1007: }",
          "1009: int LibRaw::raw2image_ex(void)",
          "1010: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1009: void LibRaw::copy_fuji_uncropped(void)",
          "1010: {",
          "1011:                 int row;",
          "1012: #if defined(LIBRAW_USE_OPENMP)",
          "1013: #pragma omp parallel for default(shared)",
          "1014: #endif",
          "1015:                 for (row=0; row < S.raw_height-S.top_margin*2; row++)",
          "1016:                   {",
          "1017:                     int col;",
          "1018:                     for (col=0; col < IO.fuji_width << !libraw_internal_data.unpacker_data.fuji_layout; col++)",
          "1019:                       {",
          "1020:                         unsigned r,c;",
          "1021:                         if (libraw_internal_data.unpacker_data.fuji_layout) {",
          "1022:                           r = IO.fuji_width - 1 - col + (row >> 1);",
          "1023:                           c = col + ((row+1) >> 1);",
          "1024:                         } else {",
          "1025:                           r = IO.fuji_width - 1 + row - (col >> 1);",
          "1026:                           c = row + ((col+1) >> 1);",
          "1027:                         }",
          "1028:                         if (r < S.height && c < S.width)",
          "1029:                           {",
          "1030:                             imgdata.image[((r)>>IO.shrink)*S.iwidth+((c)>>IO.shrink)][FC(r,c)]",
          "1031:                               = imgdata.rawdata.raw_image[(row+S.top_margin)*S.raw_width+(col+S.left_margin)];",
          "1032:                           }",
          "1033:                       }",
          "1034:                   }",
          "1035: }",
          "1037: void LibRaw::copy_bayer(void)",
          "1038: {",
          "1040:   int row;",
          "1041: #if defined(LIBRAW_USE_OPENMP)",
          "1042: #pragma omp parallel for default(shared)",
          "1043: #endif",
          "1044:   for (row=0; row < S.height; row++)",
          "1045:     {",
          "1046:       int col;",
          "1047:       for (col=0; col < S.width; col++)",
          "1048:         imgdata.image[((row) >> IO.shrink)*S.iwidth + ((col) >> IO.shrink)][fcol(row,col)]",
          "1049:           = imgdata.rawdata.raw_image[(row+S.top_margin)*S.raw_width+(col+S.left_margin)];",
          "1050:     }",
          "1051: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1144:               }",
          "1145:             else",
          "1146:               {",
          "1167:               }",
          "1168:           } // end Fuji",
          "1169:         else",
          "1170:           {",
          "1177:           }",
          "1178:       }",
          "1179:     else if(decoder_info.decoder_flags & LIBRAW_DECODER_LEGACY)",
          "",
          "[Removed Lines]",
          "1147:                 unsigned r,c;",
          "1148:                 int row,col;",
          "1149:                 for (row=0; row < S.raw_height-S.top_margin*2; row++)",
          "1150:                   {",
          "1151:                     for (col=0; col < IO.fuji_width << !libraw_internal_data.unpacker_data.fuji_layout; col++)",
          "1152:                       {",
          "1153:                         if (libraw_internal_data.unpacker_data.fuji_layout) {",
          "1154:                           r = IO.fuji_width - 1 - col + (row >> 1);",
          "1155:                           c = col + ((row+1) >> 1);",
          "1156:                         } else {",
          "1157:                           r = IO.fuji_width - 1 + row - (col >> 1);",
          "1158:                           c = row + ((col+1) >> 1);",
          "1159:                         }",
          "1160:                         if (r < S.height && c < S.width)",
          "1161:                           {",
          "1162:                             imgdata.image[((r)>>IO.shrink)*S.iwidth+((c)>>IO.shrink)][FC(r,c)]",
          "1163:                               = imgdata.rawdata.raw_image[(row+S.top_margin)*S.raw_width+(col+S.left_margin)];",
          "1164:                           }",
          "1165:                       }",
          "1166:                   }",
          "1172:             int row,col;",
          "1173:             for (row=0; row < S.height; row++)",
          "1174:               for (col=0; col < S.width; col++)",
          "1175:                 imgdata.image[((row) >> IO.shrink)*S.iwidth + ((col) >> IO.shrink)][fcol(row,col)]",
          "1176:                   = imgdata.rawdata.raw_image[(row+S.top_margin)*S.raw_width+(col+S.left_margin)];",
          "",
          "[Added Lines]",
          "1192:                 copy_fuji_uncropped();",
          "1197:             copy_bayer();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c4e374ea6c979a7d1d968f5082b7d0ea8cd27202",
      "candidate_info": {
        "commit_hash": "c4e374ea6c979a7d1d968f5082b7d0ea8cd27202",
        "repo": "LibRaw/LibRaw",
        "commit_url": "https://github.com/LibRaw/LibRaw/commit/c4e374ea6c979a7d1d968f5082b7d0ea8cd27202",
        "files": [
          "Changelog.rus",
          "Changelog.txt",
          "dcraw/dcraw.c",
          "internal/dcraw_common.cpp",
          "internal/dcraw_fileio.cpp",
          "src/libraw_datastream.cpp"
        ],
        "message": "additional data checks backported from 0.15.4",
        "before_after_code_files": [
          "Changelog.rus||Changelog.rus",
          "dcraw/dcraw.c||dcraw/dcraw.c",
          "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
          "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp",
          "src/libraw_datastream.cpp||src/libraw_datastream.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "dcraw/dcraw.c||dcraw/dcraw.c",
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
            "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp",
            "src/libraw_datastream.cpp||src/libraw_datastream.cpp"
          ],
          "candidate": [
            "dcraw/dcraw.c||dcraw/dcraw.c",
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
            "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp",
            "src/libraw_datastream.cpp||src/libraw_datastream.cpp"
          ]
        }
      },
      "candidate_diff": {
        "Changelog.rus||Changelog.rus": [
          "File: Changelog.rus -> Changelog.rus",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:    \u0444\u0430\u0439\u043b\u043e\u0432 (sRAW, Foveon)",
          "",
          "[Removed Lines]",
          "1: \ufeff2013-05-31 Alex Tutubalin <lexa@lexa.ru>",
          "",
          "[Added Lines]",
          "1: \ufeff2013-08-29 Alex Tutubalin <lexa@lexa.ru>",
          "3: 2013-05-31 Alex Tutubalin <lexa@lexa.ru>",
          "",
          "---------------"
        ],
        "dcraw/dcraw.c||dcraw/dcraw.c": [
          "File: dcraw/dcraw.c -> dcraw/dcraw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "992: int CLASS ljpeg_diff (ushort *huff)",
          "993: {",
          "994:   int len, diff;",
          "996:   len = gethuff(huff);",
          "997:   if (len == 16 && (!dng_version || dng_version >= 0x1010000))",
          "998:     return -32768;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "995: #ifdef LIBRAW_LIBRARY_BUILD",
          "996:   if(!huff)",
          "997:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "998: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1006: int CLASS ljpeg_diff_new (LibRaw_bit_buffer& bits, LibRaw_byte_buffer* buf,ushort *huff)",
          "1007: {",
          "1008:   int len, diff;",
          "1010:   len = bits._gethuff_lj(buf,*huff,huff+1);",
          "1011:   if (len == 16 && (!dng_version || dng_version >= 0x1010000))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1012:   if(!huff || !buf)",
          "1013:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1147:   if (!ljpeg_start (&jh, 0)) return;",
          "1148:   jwide = jh.wide * jh.clrs;",
          "1150: #ifdef LIBRAW_LIBRARY_BUILD",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1153: #ifdef LIBRAW_LIBRARY_BUILD",
          "1154:   if(jh.wide<1 || jh.high<1 || jh.clrs<1 || jh.bits <1)",
          "1155:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "1156: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1161:       }",
          "1163:   slices = slicesWcnt * jh.high;",
          "1164:   offset = (unsigned*)calloc(slices+1,sizeof(offset[0]));",
          "1166:   for(slice=0;slice<slices;slice++)",
          "1167:       {",
          "1168:           offset[slice] = (t_x + t_y * raw_width)| (t_s<<28);",
          "1169:           if((offset[slice] & 0x0fffffff) >= raw_width * raw_height)",
          "1170:               throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "1171:           t_y++;",
          "1172:           if(t_y == jh.high)",
          "1173:               {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1173:   if(!slices)",
          "1174:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "1181:             {",
          "1182:               free(offset);",
          "1184:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1222:               pixno++;",
          "1223:               if (0 == --pixelsInSlice)",
          "1224:                   {",
          "1225:                       unsigned o = offset[slice++];",
          "1226:                       pixno = o & 0x0fffffff;",
          "1227:                       pixelsInSlice = slicesW[o>>28];",
          "1228:                   }",
          "1229:           }",
          "1230: #endif",
          "1231: #ifndef LIBRAW_LIBRARY_BUILD",
          "1233:       if (raw_width == 3984 && (col -= 2) < 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1239:                     if(slice > slices)",
          "1240:                       {",
          "1241:                         free(offset);",
          "1242:                         throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "1243:                       }",
          "1251:       if(row>raw_height)",
          "1252: #ifdef LIBRAW_LIBRARY_BUILD",
          "1253:       {",
          "1254:         free(offset);",
          "1255:         throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "1256:       }",
          "1257: #else",
          "1258:         longjmp (failure, 3);",
          "1259: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6122:  break;",
          "6126:    num += getreal(type);",
          "6127:  black += num/len + 0.5;",
          "6128:  break;",
          "",
          "[Removed Lines]",
          "6125:  for (num=i=0; i < len; i++)",
          "",
          "[Added Lines]",
          "6155:  for (num=i=0; i < len && i < 65536; i++)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6261:   if (thumb_offset) {",
          "6262:     fseek (ifp, thumb_offset, SEEK_SET);",
          "6263:     if (ljpeg_start (&jh, 1)) {",
          "6267:     }",
          "6268:   }",
          "6269:   for (i=0; i < tiff_nifds; i++) {",
          "",
          "[Removed Lines]",
          "6264:       thumb_misc   = jh.bits;",
          "6265:       thumb_width  = jh.wide;",
          "6266:       thumb_height = jh.high;",
          "",
          "[Added Lines]",
          "6294:       if((unsigned)jh.bits<17 && (unsigned)jh.wide < 0x10000 && (unsigned)jh.high < 0x10000)",
          "6295:         {",
          "6296:           thumb_misc   = jh.bits;",
          "6297:           thumb_width  = jh.wide;",
          "6298:           thumb_height = jh.high;",
          "6299:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6273:     if (max_bps < tiff_ifd[i].bps)",
          "6274:         max_bps = tiff_ifd[i].bps;",
          "6275:     if ((tiff_ifd[i].comp != 6 || tiff_ifd[i].samples != 3) &&",
          "6277:  tiff_ifd[i].t_width*tiff_ifd[i].t_height > raw_width*raw_height) {",
          "6278:       raw_width     = tiff_ifd[i].t_width;",
          "6279:       raw_height    = tiff_ifd[i].t_height;",
          "",
          "[Removed Lines]",
          "6276:  (tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
          "",
          "[Added Lines]",
          "6309:         unsigned(tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
          "6310:         (unsigned)tiff_ifd[i].bps < 33 && (unsigned)tiff_ifd[i].samples < 13 &&",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6404:   if(dng_version && max_bps > 16)",
          "6405:       is_raw = 0;",
          "6406:   for (i=0; i < tiff_nifds; i++)",
          "6410:          && tiff_ifd[i].comp != 34892) {",
          "6417:     }",
          "6418:   if (thm >= 0) {",
          "6419:     thumb_misc |= tiff_ifd[thm].samples << 5;",
          "",
          "[Removed Lines]",
          "6407:     if (i != raw && tiff_ifd[i].samples == max_samp && tiff_ifd[i].offset && tiff_ifd[i].bytes &&",
          "6408:  tiff_ifd[i].t_width * tiff_ifd[i].t_height / SQR(tiff_ifd[i].bps+1) >",
          "6409:        thumb_width *       thumb_height / SQR(thumb_misc+1)",
          "6411:       thumb_width  = tiff_ifd[i].t_width;",
          "6412:       thumb_height = tiff_ifd[i].t_height;",
          "6413:       thumb_offset = tiff_ifd[i].offset;",
          "6414:       thumb_length = tiff_ifd[i].bytes;",
          "6415:       thumb_misc   = tiff_ifd[i].bps;",
          "6416:       thm = i;",
          "",
          "[Added Lines]",
          "6441:      if (i != raw && tiff_ifd[i].samples == max_samp &&",
          "6442:          tiff_ifd[i].bps>0 && tiff_ifd[i].bps < 33 &&",
          "6443:          unsigned(tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
          "6444:          tiff_ifd[i].t_width * tiff_ifd[i].t_height / SQR(tiff_ifd[i].bps+1) >",
          "6445:          thumb_width *       thumb_height / SQR(thumb_misc+1)",
          "6447:        thumb_width  = tiff_ifd[i].t_width;",
          "6448:        thumb_height = tiff_ifd[i].t_height;",
          "6449:        thumb_offset = tiff_ifd[i].offset;",
          "6450:        thumb_length = tiff_ifd[i].bytes;",
          "6451:        thumb_misc   = tiff_ifd[i].bps;",
          "6452:        thm = i;",
          "",
          "---------------"
        ],
        "internal/dcraw_common.cpp||internal/dcraw_common.cpp": [
          "File: internal/dcraw_common.cpp -> internal/dcraw_common.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "694: int CLASS ljpeg_diff (ushort *huff)",
          "695: {",
          "696:   int len, diff;",
          "698:   len = gethuff(huff);",
          "699:   if (len == 16 && (!dng_version || dng_version >= 0x1010000))",
          "700:     return -32768;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "697: #ifdef LIBRAW_LIBRARY_BUILD",
          "698:   if(!huff)",
          "699:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "700: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "708: int CLASS ljpeg_diff_new (LibRaw_bit_buffer& bits, LibRaw_byte_buffer* buf,ushort *huff)",
          "709: {",
          "710:   int len, diff;",
          "712:   len = bits._gethuff_lj(buf,*huff,huff+1);",
          "713:   if (len == 16 && (!dng_version || dng_version >= 0x1010000))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "714:   if(!huff || !buf)",
          "715:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "849:   if (!ljpeg_start (&jh, 0)) return;",
          "850:   jwide = jh.wide * jh.clrs;",
          "852: #ifdef LIBRAW_LIBRARY_BUILD",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "855: #ifdef LIBRAW_LIBRARY_BUILD",
          "856:   if(jh.wide<1 || jh.high<1 || jh.clrs<1 || jh.bits <1)",
          "857:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "858: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "863:       }",
          "865:   slices = slicesWcnt * jh.high;",
          "866:   offset = (unsigned*)calloc(slices+1,sizeof(offset[0]));",
          "868:   for(slice=0;slice<slices;slice++)",
          "869:       {",
          "870:           offset[slice] = (t_x + t_y * raw_width)| (t_s<<28);",
          "871:           if((offset[slice] & 0x0fffffff) >= raw_width * raw_height)",
          "872:               throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "873:           t_y++;",
          "874:           if(t_y == jh.high)",
          "875:               {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "875:   if(!slices)",
          "876:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "883:             {",
          "884:               free(offset);",
          "886:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "924:               pixno++;",
          "925:               if (0 == --pixelsInSlice)",
          "926:                   {",
          "927:                       unsigned o = offset[slice++];",
          "928:                       pixno = o & 0x0fffffff;",
          "929:                       pixelsInSlice = slicesW[o>>28];",
          "930:                   }",
          "931:           }",
          "932: #endif",
          "933: #ifndef LIBRAW_LIBRARY_BUILD",
          "935:       if (raw_width == 3984 && (col -= 2) < 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "941:                     if(slice > slices)",
          "942:                       {",
          "943:                         free(offset);",
          "944:                         throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "945:                       }",
          "953:       if(row>raw_height)",
          "954: #ifdef LIBRAW_LIBRARY_BUILD",
          "955:       {",
          "956:         free(offset);",
          "957:         throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "958:       }",
          "959: #else",
          "960:         longjmp (failure, 3);",
          "961: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1493:   read_shorts(raw_image,raw_width*raw_height);",
          "1494: #endif",
          "1495: }",
          "1497: void CLASS ppm_thumb()",
          "1498: {",
          "1499:   char *thumb;",
          "",
          "[Removed Lines]",
          "1496: #line 1799 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "1525: #line 1828 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1981:   }",
          "1982: }",
          "1985: void CLASS sinar_4shot_load_raw()",
          "1986: {",
          "1987:   ushort *pixel;",
          "",
          "[Removed Lines]",
          "1984: #line 2290 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "2013: #line 2319 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3271:   jas_stream_close (in);",
          "3272: #endif",
          "3273: }",
          "3277: void CLASS gamma_curve (double pwr, double ts, int mode, int imax)",
          "",
          "[Removed Lines]",
          "3274: #line 3745 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "3303: #line 3774 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4640:   }",
          "4641: }",
          "4644: void CLASS parse_makernote (int base, int uptag)",
          "4645: {",
          "4646:   static const uchar xlat[2][256] = {",
          "",
          "[Removed Lines]",
          "4643: #line 5117 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "4672: #line 5146 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5224:   }",
          "5225: }",
          "5228: int CLASS parse_tiff_ifd (int base)",
          "5229: {",
          "5230:   unsigned entries, tag, type, len, plen=16, save;",
          "",
          "[Removed Lines]",
          "5227: #line 5705 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "5256: #line 5734 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "5645:  break;",
          "5649:    num += getreal(type);",
          "5650:  black += num/len + 0.5;",
          "5651:  break;",
          "",
          "[Removed Lines]",
          "5648:  for (num=i=0; i < len; i++)",
          "",
          "[Added Lines]",
          "5678:  for (num=i=0; i < len && i < 65536; i++)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "5784:   if (thumb_offset) {",
          "5785:     fseek (ifp, thumb_offset, SEEK_SET);",
          "5786:     if (ljpeg_start (&jh, 1)) {",
          "5790:     }",
          "5791:   }",
          "5792:   for (i=0; i < tiff_nifds; i++) {",
          "",
          "[Removed Lines]",
          "5787:       thumb_misc   = jh.bits;",
          "5788:       thumb_width  = jh.wide;",
          "5789:       thumb_height = jh.high;",
          "",
          "[Added Lines]",
          "5817:       if((unsigned)jh.bits<17 && (unsigned)jh.wide < 0x10000 && (unsigned)jh.high < 0x10000)",
          "5818:         {",
          "5819:           thumb_misc   = jh.bits;",
          "5820:           thumb_width  = jh.wide;",
          "5821:           thumb_height = jh.high;",
          "5822:         }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5796:     if (max_bps < tiff_ifd[i].bps)",
          "5797:         max_bps = tiff_ifd[i].bps;",
          "5798:     if ((tiff_ifd[i].comp != 6 || tiff_ifd[i].samples != 3) &&",
          "5800:  tiff_ifd[i].t_width*tiff_ifd[i].t_height > raw_width*raw_height) {",
          "5801:       raw_width     = tiff_ifd[i].t_width;",
          "5802:       raw_height    = tiff_ifd[i].t_height;",
          "",
          "[Removed Lines]",
          "5799:  (tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
          "",
          "[Added Lines]",
          "5832:         unsigned(tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
          "5833:         (unsigned)tiff_ifd[i].bps < 33 && (unsigned)tiff_ifd[i].samples < 13 &&",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5927:   if(dng_version && max_bps > 16)",
          "5928:       is_raw = 0;",
          "5929:   for (i=0; i < tiff_nifds; i++)",
          "5933:          && tiff_ifd[i].comp != 34892) {",
          "5940:     }",
          "5941:   if (thm >= 0) {",
          "5942:     thumb_misc |= tiff_ifd[thm].samples << 5;",
          "",
          "[Removed Lines]",
          "5930:     if (i != raw && tiff_ifd[i].samples == max_samp && tiff_ifd[i].offset && tiff_ifd[i].bytes &&",
          "5931:  tiff_ifd[i].t_width * tiff_ifd[i].t_height / SQR(tiff_ifd[i].bps+1) >",
          "5932:        thumb_width *       thumb_height / SQR(thumb_misc+1)",
          "5934:       thumb_width  = tiff_ifd[i].t_width;",
          "5935:       thumb_height = tiff_ifd[i].t_height;",
          "5936:       thumb_offset = tiff_ifd[i].offset;",
          "5937:       thumb_length = tiff_ifd[i].bytes;",
          "5938:       thumb_misc   = tiff_ifd[i].bps;",
          "5939:       thm = i;",
          "",
          "[Added Lines]",
          "5964:      if (i != raw && tiff_ifd[i].samples == max_samp &&",
          "5965:          tiff_ifd[i].bps>0 && tiff_ifd[i].bps < 33 &&",
          "5966:          unsigned(tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
          "5967:          tiff_ifd[i].t_width * tiff_ifd[i].t_height / SQR(tiff_ifd[i].bps+1) >",
          "5968:          thumb_width *       thumb_height / SQR(thumb_misc+1)",
          "5970:        thumb_width  = tiff_ifd[i].t_width;",
          "5971:        thumb_height = tiff_ifd[i].t_height;",
          "5972:        thumb_offset = tiff_ifd[i].offset;",
          "5973:        thumb_length = tiff_ifd[i].bytes;",
          "5974:        thumb_misc   = tiff_ifd[i].bps;",
          "5975:        thm = i;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "6584:     data_offset = get4();",
          "6585:   }",
          "6586: }",
          "6588: void CLASS adobe_coeff (const char *p_make, const char *p_model)",
          "6589: {",
          "6590:   static const struct {",
          "",
          "[Removed Lines]",
          "6587: #line 7071 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "6623: #line 7107 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "7351:   return sum[0] < sum[1] ? 0x4d4d : 0x4949;",
          "7352: }",
          "7356: float CLASS find_green (int bps, int bite, int off0, int off1)",
          "7357: {",
          "",
          "[Removed Lines]",
          "7354: #line 7841 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "7390: #line 7877 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "9075:   }",
          "9076: }",
          "9079: void CLASS convert_to_rgb()",
          "9080: {",
          "9081:   int row, col, c, i, j, k;",
          "",
          "[Removed Lines]",
          "9078: #line 9658 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "9114: #line 9694 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "9294:   return row * iwidth + col;",
          "9295: }",
          "9298: void CLASS tiff_set (ushort *ntag,",
          "9299:  ushort tag, ushort type, int count, int val)",
          "9300: {",
          "",
          "[Removed Lines]",
          "9297: #line 9901 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "9333: #line 9937 \"dcraw/dcraw.c\"",
          "",
          "---------------"
        ],
        "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp": [
          "File: internal/dcraw_fileio.cpp -> internal/dcraw_fileio.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:    for more information",
          "25: #include <math.h>",
          "26: #define CLASS LibRaw::",
          "27: #include \"libraw/libraw_types.h\"",
          "",
          "[Removed Lines]",
          "24: #line 3583 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "24: #line 3612 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: #include \"libraw/libraw.h\"",
          "30: #include \"internal/defines.h\"",
          "31: #include \"internal/var_defines.h\"",
          "35:    Seach from the current directory up to the root looking for",
          "",
          "[Removed Lines]",
          "32: #line 3594 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "32: #line 3623 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55: #endif",
          "56:   if (cfname)",
          "57:     fp = fopen (cfname, \"r\");",
          "59:   if (!fp)",
          "60:       {",
          "61: #ifdef LIBRAW_LIBRARY_BUILD",
          "",
          "[Removed Lines]",
          "58: #line 3645 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "58: #line 3674 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "153:   RUN_CALLBACK(LIBRAW_PROGRESS_DARK_FRAME,1,2);",
          "154: #endif",
          "155: }",
          "158: #ifndef NO_LCMS",
          "159: void CLASS apply_profile (const char *input, const char *output)",
          "",
          "[Removed Lines]",
          "156: #line 9567 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "156: #line 9603 \"dcraw/dcraw.c\"",
          "",
          "---------------"
        ],
        "src/libraw_datastream.cpp||src/libraw_datastream.cpp": [
          "File: src/libraw_datastream.cpp -> src/libraw_datastream.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: LibRaw_byte_buffer *LibRaw_abstract_datastream::make_byte_buffer(unsigned int sz)",
          "40: {",
          "41:     LibRaw_byte_buffer *ret = new LibRaw_byte_buffer(sz);",
          "42:     read(ret->get_buffer(),sz,1);",
          "43:     return ret;",
          "44: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:   if(sz> 2*1024*1024*1024) // 2GB is enough",
          "42:       throw LIBRAW_EXCEPTION_ALLOC;",
          "45:     if(!ret) // failed new should throw std::exception",
          "46:       throw LIBRAW_EXCEPTION_ALLOC;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "317: LibRaw_byte_buffer *LibRaw_buffer_datastream::make_byte_buffer(unsigned int sz)",
          "318: {",
          "319:     LibRaw_byte_buffer *ret = new LibRaw_byte_buffer(0);",
          "320:     if(streampos + sz > streamsize)",
          "321:         sz = streamsize - streampos;",
          "322:     ret->set_buffer(buf+streampos,sz);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "326:     if(!ret) // failed new should throw std::exception",
          "327:       throw LIBRAW_EXCEPTION_ALLOC;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ae25d8c3a6bfb40c582538193264f74c9b93bc0",
      "candidate_info": {
        "commit_hash": "9ae25d8c3a6bfb40c582538193264f74c9b93bc0",
        "repo": "LibRaw/LibRaw",
        "commit_url": "https://github.com/LibRaw/LibRaw/commit/9ae25d8c3a6bfb40c582538193264f74c9b93bc0",
        "files": [
          "Makefile.devel",
          "dcraw/dcraw.c",
          "internal/dcraw_common.cpp",
          "internal/dcraw_fileio.cpp"
        ],
        "message": "backported 0.15.4 datachecks",
        "before_after_code_files": [
          "Makefile.devel||Makefile.devel",
          "dcraw/dcraw.c||dcraw/dcraw.c",
          "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
          "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "Makefile.devel||Makefile.devel",
            "dcraw/dcraw.c||dcraw/dcraw.c",
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
            "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp"
          ],
          "candidate": [
            "Makefile.devel||Makefile.devel",
            "dcraw/dcraw.c||dcraw/dcraw.c",
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
            "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.devel||Makefile.devel": [
          "File: Makefile.devel -> Makefile.devel",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: CXX=g++48",
          "18: CFLAGS+= -g -I. -pedantic  -Wno-long-long -Wno-overflow  -O4 -fopenmp",
          "19: # Haswell:",
          "23: # LCMS support",
          "",
          "[Removed Lines]",
          "20: CFLAGS+=-march=core-avx2 -mtune=core-avx2 -mavx2",
          "",
          "[Added Lines]",
          "20: #CFLAGS+=-march=core-avx2 -mtune=core-avx2 -mavx2",
          "",
          "---------------"
        ],
        "dcraw/dcraw.c||dcraw/dcraw.c": [
          "File: dcraw/dcraw.c -> dcraw/dcraw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "896: int CLASS ljpeg_diff (ushort *huff)",
          "897: {",
          "898:   int len, diff;",
          "900:   len = gethuff(huff);",
          "901:   if (len == 16 && (!dng_version || dng_version >= 0x1010000))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "899:   if(!huff)",
          "900: #ifdef LIBRAW_LIBRARY_BUILD",
          "901:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "902: #else",
          "903:     longjmp (failure, 2);",
          "904: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "952:   ushort *rp;",
          "954:   if (!ljpeg_start (&jh, 0)) return;",
          "955:   jwide = jh.wide * jh.clrs;",
          "957: #ifdef LIBRAW_LIBRARY_BUILD",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "963:   if(jh.wide<1 || jh.high<1 || jh.clrs<1 || jh.bits <1)",
          "964: #ifdef LIBRAW_LIBRARY_BUILD",
          "965:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "966: #else",
          "967:     longjmp (failure, 2);",
          "968: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "977:       }",
          "978:       if (raw_width == 3984 && (col -= 2) < 0)",
          "979:  col += (row--,raw_width);",
          "980:       if ((unsigned) row < raw_height) RAW(row,col) = val;",
          "981:       if (++col >= raw_width)",
          "982:  col = (row++,0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "994:       if(row>raw_height)",
          "995: #ifdef LIBRAW_LIBRARY_BUILD",
          "996:         throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "997: #else",
          "998:         longjmp (failure, 3);",
          "999: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6833:  break;",
          "6837:    num += getreal(type);",
          "6838:  black += num/len + 0.5;",
          "6839:  break;",
          "",
          "[Removed Lines]",
          "6836:  for (num=i=0; i < len; i++)",
          "",
          "[Added Lines]",
          "6857:  for (num=i=0; i < len && i < 65536; i++)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6966:   if (thumb_offset) {",
          "6967:     fseek (ifp, thumb_offset, SEEK_SET);",
          "6968:     if (ljpeg_start (&jh, 1)) {",
          "6972:     }",
          "6973:   }",
          "6974:   for (i=0; i < tiff_nifds; i++) {",
          "",
          "[Removed Lines]",
          "6969:       thumb_misc   = jh.bits;",
          "6970:       thumb_width  = jh.wide;",
          "6971:       thumb_height = jh.high;",
          "",
          "[Added Lines]",
          "6990:       if((unsigned)jh.bits<17 && (unsigned)jh.wide < 0x10000 && (unsigned)jh.high < 0x10000)",
          "6991:         {",
          "6992:           thumb_misc   = jh.bits;",
          "6993:           thumb_width  = jh.wide;",
          "6994:           thumb_height = jh.high;",
          "6995:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6976:  max_samp = tiff_ifd[i].samples;",
          "6977:     if (max_samp > 3) max_samp = 3;",
          "6978:     if ((tiff_ifd[i].comp != 6 || tiff_ifd[i].samples != 3) &&",
          "6980:  tiff_ifd[i].t_width*tiff_ifd[i].t_height > raw_width*raw_height) {",
          "6981:       raw_width     = tiff_ifd[i].t_width;",
          "6982:       raw_height    = tiff_ifd[i].t_height;",
          "",
          "[Removed Lines]",
          "6979:  (tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
          "",
          "[Added Lines]",
          "7003:         unsigned(tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
          "7004:         (unsigned)tiff_ifd[i].bps < 33 && (unsigned)tiff_ifd[i].samples < 13 &&",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7066:       is_raw = 0;",
          "7067:   for (i=0; i < tiff_nifds; i++)",
          "7068:     if (i != raw && tiff_ifd[i].samples == max_samp &&",
          "7069:  tiff_ifd[i].t_width * tiff_ifd[i].t_height / (SQR(tiff_ifd[i].bps)+1) >",
          "7070:        thumb_width *       thumb_height / (SQR(thumb_misc)+1)",
          "7071:  && tiff_ifd[i].comp != 34892) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7094:         tiff_ifd[i].bps>0 && tiff_ifd[i].bps < 33 &&",
          "7095:         unsigned(tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
          "",
          "---------------"
        ],
        "internal/dcraw_common.cpp||internal/dcraw_common.cpp": [
          "File: internal/dcraw_common.cpp -> internal/dcraw_common.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "626: int CLASS ljpeg_diff (ushort *huff)",
          "627: {",
          "628:   int len, diff;",
          "630:   len = gethuff(huff);",
          "631:   if (len == 16 && (!dng_version || dng_version >= 0x1010000))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "629:   if(!huff)",
          "630: #ifdef LIBRAW_LIBRARY_BUILD",
          "631:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "632: #else",
          "633:     longjmp (failure, 2);",
          "634: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "682:   ushort *rp;",
          "684:   if (!ljpeg_start (&jh, 0)) return;",
          "685:   jwide = jh.wide * jh.clrs;",
          "687: #ifdef LIBRAW_LIBRARY_BUILD",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "693:   if(jh.wide<1 || jh.high<1 || jh.clrs<1 || jh.bits <1)",
          "694: #ifdef LIBRAW_LIBRARY_BUILD",
          "695:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "696: #else",
          "697:     longjmp (failure, 2);",
          "698: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "707:       }",
          "708:       if (raw_width == 3984 && (col -= 2) < 0)",
          "709:  col += (row--,raw_width);",
          "710:       if ((unsigned) row < raw_height) RAW(row,col) = val;",
          "711:       if (++col >= raw_width)",
          "712:  col = (row++,0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "724:       if(row>raw_height)",
          "725: #ifdef LIBRAW_LIBRARY_BUILD",
          "726:         throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "727: #else",
          "728:         longjmp (failure, 3);",
          "729: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5657:  break;",
          "5661:    num += getreal(type);",
          "5662:  black += num/len + 0.5;",
          "5663:  break;",
          "",
          "[Removed Lines]",
          "5660:  for (num=i=0; i < len; i++)",
          "",
          "[Added Lines]",
          "5681:  for (num=i=0; i < len && i < 65536; i++)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5790:   if (thumb_offset) {",
          "5791:     fseek (ifp, thumb_offset, SEEK_SET);",
          "5792:     if (ljpeg_start (&jh, 1)) {",
          "5796:     }",
          "5797:   }",
          "5798:   for (i=0; i < tiff_nifds; i++) {",
          "",
          "[Removed Lines]",
          "5793:       thumb_misc   = jh.bits;",
          "5794:       thumb_width  = jh.wide;",
          "5795:       thumb_height = jh.high;",
          "",
          "[Added Lines]",
          "5814:       if((unsigned)jh.bits<17 && (unsigned)jh.wide < 0x10000 && (unsigned)jh.high < 0x10000)",
          "5815:         {",
          "5816:           thumb_misc   = jh.bits;",
          "5817:           thumb_width  = jh.wide;",
          "5818:           thumb_height = jh.high;",
          "5819:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5800:  max_samp = tiff_ifd[i].samples;",
          "5801:     if (max_samp > 3) max_samp = 3;",
          "5802:     if ((tiff_ifd[i].comp != 6 || tiff_ifd[i].samples != 3) &&",
          "5804:  tiff_ifd[i].t_width*tiff_ifd[i].t_height > raw_width*raw_height) {",
          "5805:       raw_width     = tiff_ifd[i].t_width;",
          "5806:       raw_height    = tiff_ifd[i].t_height;",
          "",
          "[Removed Lines]",
          "5803:  (tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
          "",
          "[Added Lines]",
          "5827:         unsigned(tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
          "5828:         (unsigned)tiff_ifd[i].bps < 33 && (unsigned)tiff_ifd[i].samples < 13 &&",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5890:       is_raw = 0;",
          "5891:   for (i=0; i < tiff_nifds; i++)",
          "5892:     if (i != raw && tiff_ifd[i].samples == max_samp &&",
          "5893:  tiff_ifd[i].t_width * tiff_ifd[i].t_height / (SQR(tiff_ifd[i].bps)+1) >",
          "5894:        thumb_width *       thumb_height / (SQR(thumb_misc)+1)",
          "5895:  && tiff_ifd[i].comp != 34892) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5918:         tiff_ifd[i].bps>0 && tiff_ifd[i].bps < 33 &&",
          "5919:         unsigned(tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
          "",
          "---------------"
        ],
        "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp": [
          "File: internal/dcraw_fileio.cpp -> internal/dcraw_fileio.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:    for more information",
          "25: #include <math.h>",
          "26: #define CLASS LibRaw::",
          "27: #include \"libraw/libraw_types.h\"",
          "",
          "[Removed Lines]",
          "24: #line 4060 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "24: #line 4080 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: #include \"libraw/libraw.h\"",
          "30: #include \"internal/defines.h\"",
          "31: #include \"internal/var_defines.h\"",
          "34:    Seach from the current directory up to the root looking for",
          "35:    a \".badpixels\" file, and fix those pixels now.",
          "",
          "[Removed Lines]",
          "32: #line 4071 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "32: #line 4091 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: #endif",
          "55:   if (cfname)",
          "56:     fp = fopen (cfname, \"r\");",
          "58:   if (!fp)",
          "59:       {",
          "60: #ifdef LIBRAW_LIBRARY_BUILD",
          "",
          "[Removed Lines]",
          "57: #line 4121 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "57: #line 4141 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154:   RUN_CALLBACK(LIBRAW_PROGRESS_DARK_FRAME,1,2);",
          "155: #endif",
          "156: }",
          "158: #ifndef NO_LCMS",
          "159: void CLASS apply_profile (const char *input, const char *output)",
          "160: {",
          "",
          "[Removed Lines]",
          "157: #line 9909 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "157: #line 9936 \"dcraw/dcraw.c\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}