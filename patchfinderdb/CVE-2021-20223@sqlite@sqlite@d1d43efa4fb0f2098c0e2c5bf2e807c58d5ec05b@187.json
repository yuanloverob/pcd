{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f4658b68fa906229797f6411e92a4cf15598528b",
      "candidate_info": {
        "commit_hash": "f4658b68fa906229797f6411e92a4cf15598528b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f4658b68fa906229797f6411e92a4cf15598528b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Tighten the generated column requirement such that every table must have at least one non-generated column.  Ticket [166347c6fc994155].\n\nFossilOrigin-Name: 4fba090e678ef184736277c9ec9a9374c8bd4df4d41f51a3dc6818e2efcc103b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 361ea81ae8a13e7d2ec4c2412f30e049bb6ee320980d502c86bedc315cdd3bc0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2243: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "2244:   if( p->tabFlags & TF_HasGenerated ){",
          "2246:     testcase( p->tabFlags & TF_HasVirtual );",
          "2247:     testcase( p->tabFlags & TF_HasStored );",
          "2248:     for(ii=0; ii<p->nCol; ii++){",
          "",
          "[Removed Lines]",
          "2245:     int ii, nNV = 0;",
          "",
          "[Added Lines]",
          "2245:     int ii, nNG = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2252:         testcase( colFlags & COLFLAG_STORED );",
          "2253:         sqlite3ResolveSelfReference(pParse, p, NC_GenCol,",
          "2254:                                     p->aCol[ii].pDflt, 0);",
          "2255:       }",
          "2257:     }",
          "2260:       return;",
          "2261:     }",
          "2262:   }",
          "",
          "[Removed Lines]",
          "2256:       if( (colFlags & COLFLAG_VIRTUAL)==0 ) nNV++;",
          "2258:     if( nNV==0 ){",
          "2259:       sqlite3ErrorMsg(pParse, \"must have at least one non-VIRTUAL column\");",
          "",
          "[Added Lines]",
          "2255:       }else{",
          "2256:         nNG++;",
          "2259:     if( nNG==0 ){",
          "2260:       sqlite3ErrorMsg(pParse, \"must have at least one non-generated column\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a4b2df5ce277b5bfb28ceeb1e8d9d052e870b367",
      "candidate_info": {
        "commit_hash": "a4b2df5ce277b5bfb28ceeb1e8d9d052e870b367",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a4b2df5ce277b5bfb28ceeb1e8d9d052e870b367",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Disable early coding of transitive constraints at the end of each loop in the WHERE clause processing if the loop being coded is for a LEFT JOIN, even if the loop is part of an OR-clause optimization for virtual tables. Test cases in TH3.\n\nFossilOrigin-Name: 9421b442cad9858ec21050c106aa935a1c0723ab08ef9a867a79638b040b6e68",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f4bed1d7af8a94c6facd567dec5afae8865a5ad76b8834493099e5e30bed1132",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1286:   VdbeModuleComment((v, \"Begin WHERE-loop%d: %s\",iLevel,pTabItem->pTab->zName));",
          "1288:   if( sqlite3WhereTrace & 0x800 ){",
          "1291:     sqlite3WhereLoopPrint(pLoop, pWC);",
          "1292:   }",
          "1293:   if( sqlite3WhereTrace & 0x20000 ){",
          "",
          "[Removed Lines]",
          "1289:     sqlite3DebugPrintf(\"Coding level %d of %d:  notReady=%llx\\n\",",
          "1290:        iLevel, pWInfo->nLevel, (u64)notReady);",
          "",
          "[Added Lines]",
          "1289:     sqlite3DebugPrintf(\"Coding level %d of %d:  notReady=%llx  iFrom=%d\\n\",",
          "1290:        iLevel, pWInfo->nLevel, (u64)notReady, pLevel->iFrom);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2381:     if( (pTerm->eOperator & (WO_EQ|WO_IS))==0 ) continue;",
          "2382:     if( (pTerm->eOperator & WO_EQUIV)==0 ) continue;",
          "2383:     if( pTerm->leftCursor!=iCur ) continue;",
          "2385:     pE = pTerm->pExpr;",
          "2387:     if( sqlite3WhereTrace & 0x800 ){",
          "",
          "[Removed Lines]",
          "2384:     if( pLevel->iLeftJoin ) continue;",
          "",
          "[Added Lines]",
          "2384:     if( pTabItem->fg.jointype & JT_LEFT ) continue;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f4076223d248f0cbe6bfc5769f7574f1b0033e5",
      "candidate_info": {
        "commit_hash": "8f4076223d248f0cbe6bfc5769f7574f1b0033e5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8f4076223d248f0cbe6bfc5769f7574f1b0033e5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "test/altertab3.test"
        ],
        "message": "Fix an assert() failure that could occur in ALTER TABLE code when the schema contains a view that uses a CTE.\n\nFossilOrigin-Name: 75b04a4b0d2e65bfcd02cf4e0b6d8f1954957c590814a9b8f9a9ee2adc2ec022",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e01fdbf9f700e1bd9dd5283c65547d10d26ce4f4506d3cfef9e1087aecdc2305",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "733:   return WRC_Continue;",
          "734: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "740: static void renameWalkWith(Walker *pWalker, Select *pSelect){",
          "741:   if( pSelect->pWith ){",
          "742:     int i;",
          "743:     for(i=0; i<pSelect->pWith->nCte; i++){",
          "744:       Select *p = pSelect->pWith->a[i].pSelect;",
          "745:       NameContext sNC;",
          "746:       memset(&sNC, 0, sizeof(sNC));",
          "747:       sNC.pParse = pWalker->pParse;",
          "748:       sqlite3SelectPrep(sNC.pParse, p, &sNC);",
          "749:       sqlite3WalkSelect(pWalker, p);",
          "750:     }",
          "751:   }",
          "752: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "753:       sqlite3RenameTokenRemap(pParse, 0, (void*)pSrc->a[i].zName);",
          "754:     }",
          "755:   }",
          "756:   return WRC_Continue;",
          "757: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "775:   renameWalkWith(pWalker, p);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "819:   }",
          "820: }",
          "",
          "[Removed Lines]",
          "826: static void renameWalkWith(Walker *pWalker, Select *pSelect){",
          "827:   if( pSelect->pWith ){",
          "828:     int i;",
          "829:     for(i=0; i<pSelect->pWith->nCte; i++){",
          "830:       Select *p = pSelect->pWith->a[i].pSelect;",
          "831:       NameContext sNC;",
          "832:       memset(&sNC, 0, sizeof(sNC));",
          "833:       sNC.pParse = pWalker->pParse;",
          "834:       sqlite3SelectPrep(sNC.pParse, p, &sNC);",
          "835:       sqlite3WalkSelect(pWalker, p);",
          "836:     }",
          "837:   }",
          "838: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "411:   ALTER TABLE t1 RENAME TO t1x;",
          "412: } {1 {error in trigger r1: 1st ORDER BY term does not match any column in the result set}}",
          "415: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "414: #-------------------------------------------------------------------------",
          "415: reset_db",
          "416: do_execsql_test 19.0 {",
          "417:   CREATE TABLE a(a,h CONSTRAINT a UNIQUE ON CONFLICT FAIL,CONSTRAINT a);",
          "418: }",
          "420: foreach {tn v res} {",
          "421:   1 {",
          "422:     CREATE VIEW q AS SELECT 123",
          "424:       WINDOW x AS (",
          "425:         RANGE BETWEEN UNBOUNDED PRECEDING AND INDEXED() OVER(",
          "426:           PARTITION BY ( WITH x AS(VALUES(col1)) VALUES(453) )",
          "427:         )",
          "428:       FOLLOWING",
          "429:     )",
          "430:   } {1 {error in view q: no such column: col1}}",
          "432:   2 {",
          "433:     CREATE VIEW q AS SELECT",
          "434:     CAST(CAST(CAST(CAST(CAST(CAST(CAST(CAST(CAST(CAST(CAST(RIGHT",
          "435:     AS)AS)AS)AS)AS)AS)AS)AS)AS)AS)AS)WINDOW x AS(RANGE BETWEEN UNBOUNDED",
          "436:     PRECEDING AND INDEXED(*)OVER(PARTITION BY",
          "437:     CROSS,CROSS,NATURAL,sqlite_master(*)OVER a,(WITH a AS(VALUES(LEFT)UNION",
          "438:     VALUES(LEFT)UNION VALUES(LEFT)UNION VALUES(LEFT)UNION VALUES(LEFT)UNION",
          "439:     VALUES(LEFT)UNION VALUES(LEFT))VALUES(LEFT))IN",
          "440:     STORED,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT)*LEFT FOLLOWING)ORDER BY",
          "441:     LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT LIMIT",
          "442:     LEFT,INDEXED(*)OVER(PARTITION BY",
          "443:     CROSS,CROSS,CROSS,LEFT,INDEXED(*)OVER(PARTITION BY",
          "444:     CROSS,CROSS,CROSS),INDEXED(*)OVER(PARTITION BY",
          "445:     LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT),",
          "446:     LEFT,LEFT,INNER,CROSS,CROSS,CROSS,INNER,NATURAL ORDER BY",
          "447:     OUTER,NATURAL,NATURAL,NATURAL,NATURAL,NATURAL,NATURAL,NATURAL,INNER,",
          "448:     INNER,INNER NULLS LAST GROUPS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED",
          "449:     FOLLOWING);",
          "450:   } {1 {error in view q: no such column: LEFT}}",
          "452:   3 {",
          "453:     CREATE VIEW q AS SELECT 99 WINDOW x AS (RANGE BETWEEN UNBOUNDED PRECEDING",
          "454:     AND count(*)OVER(PARTITION BY (WITH a AS(VALUES(2),(x3))VALUES(0)))",
          "455:     FOLLOWING)ORDER BY x2,sum(1)OVER(PARTITION BY avg(5)OVER(PARTITION BY x1));",
          "456:   } {1 {error in view q: no such column: x3}}",
          "457: } {",
          "458:   do_execsql_test 19.$tn.1 \"",
          "459:     DROP VIEW IF EXISTS q;",
          "460:     $v",
          "461:   \" {}",
          "463:   do_catchsql_test 19.$tn.2 {",
          "464:     ALTER TABLE a RENAME TO g;",
          "465:   } $res",
          "466: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "34ab941e5bae10894b3c0653248c6636edc5e9f8",
      "candidate_info": {
        "commit_hash": "34ab941e5bae10894b3c0653248c6636edc5e9f8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/34ab941e5bae10894b3c0653248c6636edc5e9f8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/nulls1.test"
        ],
        "message": "Detect the invalid use of NULLS LAST on an INTEGER PRIMARY KEY definition of a WITHOUT ROWID table.\n\nFossilOrigin-Name: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/nulls1.test||test/nulls1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1547:     assert( autoInc==0 || autoInc==1 );",
          "1548:     pTab->tabFlags |= autoInc*TF_Autoincrement;",
          "1549:     if( pList ) pParse->iPkSortOrder = pList->a[0].sortFlags;",
          "1550:   }else if( autoInc ){",
          "1551: #ifndef SQLITE_OMIT_AUTOINCREMENT",
          "1552:     sqlite3ErrorMsg(pParse, \"AUTOINCREMENT is only allowed on an \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1550:     (void)sqlite3HasExplicitNulls(pParse, pList);",
          "",
          "---------------"
        ],
        "test/nulls1.test||test/nulls1.test": [
          "File: test/nulls1.test -> test/nulls1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:   SELECT * FROM t71 ORDER BY a DESC NULLS FIRST;",
          "249: }",
          "251: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251: # 2019-12-18 gramfuzz1 find",
          "252: # NULLS LAST not allows on an INTEGER PRIMARY KEY.",
          "253: #",
          "254: do_catchsql_test 8.0 {",
          "255:   CREATE TABLE t80(a, b INTEGER, PRIMARY KEY(b NULLS LAST)) WITHOUT ROWID;",
          "256: } {1 {unsupported use of NULLS LAST}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "877859f2d36990bc06b4a37b82c9739e916c10d5",
      "candidate_info": {
        "commit_hash": "877859f2d36990bc06b4a37b82c9739e916c10d5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/877859f2d36990bc06b4a37b82c9739e916c10d5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/corruptL.test"
        ],
        "message": "Fix an assert() that could fail when operating on a database with a corrupt schema.\n\nFossilOrigin-Name: 4a340c9bc7d939efc947e3b17ca79314482f74368b15567dd089d40e4270890e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "test/corruptL.test||test/corruptL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4adc0a1b0d84c2df6d6bf0d5d9d3fa9f7d048af8d232c4beb77518727890f212",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:   if( isIndex ){",
          "202:     HashElem *p;",
          "203:     for(p=sqliteHashFirst(&pSchema->idxHash); p; p=sqliteHashNext(p)){",
          "204:       Index *pIdx = (Index *)sqliteHashData(p);",
          "205:       if( pIdx->tnum==(int)iRoot ){",
          "210:           return 1;",
          "211:         }",
          "212:         iTab = pIdx->pTable->tnum;",
          "213:       }",
          "214:     }",
          "215:   }else{",
          "",
          "[Removed Lines]",
          "206:         if( iTab ){",
          "",
          "[Added Lines]",
          "203:     int bSeen = 0;",
          "207:         if( bSeen ){",
          "214:         bSeen = 1;",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1182:   ALTER TABLE t1 RENAME TO alkjalkjdfiiiwuer987lkjwer82mx97sf98788s9789s;",
          "1183: } {1 {database disk image is malformed}}",
          "1185: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1185: #-------------------------------------------------------------------------",
          "1186: reset_db",
          "1187: do_test 15.0 {",
          "1188:   sqlite3 db {}",
          "1189:   db deserialize [decode_hexdb {",
          "1190: | size 28672 pagesize 4096 filename crash-3afa1ca9e9c1bd.db",
          "1191: | page 1 offset 0",
          "1192: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "1193: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 07   .....@  ........",
          "1194: |     32: 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00 04   ................",
          "1195: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "1196: |     96: 00 00 00 00 0d 00 00 00 06 0e 88 00 0f b8 0f 6d   ...............m",
          "1197: |    112: 0f 3a 0f 0b 0e d5 0e 88 01 00 00 00 00 00 00 00   .:..............",
          "1198: |   3712: 00 00 00 00 00 00 00 00 4b 06 06 17 25 25 01 5b   ........K...%%.[",
          "1199: |   3728: 74 61 62 6c 65 73 71 6c 69 74 65 5f 73 74 61 74   tablesqlite_stat",
          "1200: |   3744: 31 73 71 6c 69 74 65 5f 73 74 61 74 31 07 43 52   1sqlite_stat1.CR",
          "1201: |   3760: 45 41 54 45 20 54 41 42 4c 45 20 73 71 6c 69 74   EATE TABLE sqlit",
          "1202: |   3776: 65 5f 73 74 61 74 31 28 74 62 6c 2c 69 64 78 2c   e_stat1(tbl,idx,",
          "1203: |   3792: 73 74 61 74 29 34 05 06 17 13 11 01 53 69 6e 64   stat)4......Sind",
          "1204: |   3808: 65 78 63 31 63 63 31 06 43 52 45 41 54 45 20 55   exc1cc1.CREATE U",
          "1205: |   3824: 4e 49 51 55 45 20 49 4e 44 45 58 20 63 31 63 20   NIQUE INDEX c1c",
          "1206: |   3840: 4f 4e 20 63 31 28 63 2c 20 62 29 2d 04 06 17 13   ON c1(c, b)-....",
          "1207: |   3856: 11 01 45 69 6e 64 65 78 63 31 64 63 31 05 43 52   ..Eindexc1dc1.CR",
          "1208: |   3872: 45 41 54 45 20 49 4e 44 45 58 20 63 31 64 20 4f   EATE INDEX c1d O",
          "1209: |   3888: 4e 20 63 31 28 64 2c 20 62 29 31 03 06 17 13 11   N c1(d, b)1.....",
          "1210: |   3904: 01 4d 69 6e 64 65 78 62 31 63 62 31 05 43 52 45   .Mindexb1cb1.CRE",
          "1211: |   3920: 41 54 45 20 55 4e 49 51 55 45 20 49 4e 44 45 58   ATE UNIQUE INDEX",
          "1212: |   3936: 20 62 31 63 20 4f 4e 20 62 31 28 63 29 49 02 06    b1c ON b1(c)I..",
          "1213: |   3952: 17 11 11 0f 7f 74 61 62 6c 65 63 31 63 31 03 43   .....tablec1c1.C",
          "1214: |   3968: 52 45 41 54 45 20 54 41 42 4c 45 20 63 31 28 61   REATE TABLE c1(a",
          "1215: |   3984: 20 49 4e 54 20 50 52 49 4d 41 52 59 20 4b 45 59    INT PRIMARY KEY",
          "1216: |   4000: 2c 20 62 2c 20 63 2c 20 64 29 20 57 49 54 48 4f   , b, c, d) WITHO",
          "1217: |   4016: 55 54 20 52 4f 57 49 44 46 01 06 17 11 11 01 79   UT ROWIDF......y",
          "1218: |   4032: 74 61 62 6c 65 62 31 62 31 02 43 52 45 41 54 45   tableb1b1.CREATE",
          "1219: |   4048: 20 54 41 42 4c 45 20 62 31 28 61 20 49 4e 54 20    TABLE b1(a INT",
          "1220: |   4064: 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 62 2c 20   PRIMARY KEY, b,",
          "1221: |   4080: 63 29 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44   c) WITHOUT ROWID",
          "1222: | page 2 offset 4096",
          "1223: |      0: 0a 00 00 00 07 0f ca 00 0f fa 0f f2 0f ea 0f e2   ................",
          "1224: |     16: 0f da 00 00 00 01 00 00 00 00 00 00 00 00 00 00   ................",
          "1225: |   4032: 00 00 00 00 00 00 00 00 00 00 07 04 01 0f 01 06   ................",
          "1226: |   4048: 67 07 07 04 01 0f 01 06 66 06 07 04 01 0f 01 05   g.......f.......",
          "1227: |   4064: 65 05 07 04 01 0f 01 04 64 04 07 04 01 0f 01 03   e.......d.......",
          "1228: |   4080: 63 03 07 04 01 0f 01 02 62 0f 05 04 09 0f 09 61   c.......b......a",
          "1229: | page 3 offset 8192",
          "1230: |      0: 0a 00 00 00 07 0f bd 00 0f f9 0f ef 0f e5 0f db   ................",
          "1231: |     16: 0f d1 0f c7 0f bd 00 00 00 00 01 00 00 00 00 00   ................",
          "1232: |   4016: 00 00 00 00 00 00 00 00 00 00 00 00 00 09 05 01   ................",
          "1233: |   4032: 0f 01 01 07 61 07 07 09 05 01 0f 01 01 06 61 06   ....a.........a.",
          "1234: |   4048: 06 09 05 01 0f 01 01 05 61 05 05 09 05 01 0f 01   ........a.......",
          "1235: |   4064: 01 04 61 04 04 09 05 01 0f 01 01 03 61 03 03 09   ..a.........a...",
          "1236: |   4080: 05 01 0f 01 01 02 61 0f 02 06 05 09 0f 09 09 61   ......a........a",
          "1237: | page 4 offset 12288",
          "1238: |      0: 0a 00 00 00 07 0f d8 00 0f fc 0f f0 0f ea 0f e4   ................",
          "1239: |     16: 0f de 0f d8 0f f6 00 00 00 00 00 00 00 00 00 00   ................",
          "1240: |   4048: 00 00 00 00 00 00 00 00 05 03 01 01 07 07 05 03   ................",
          "1241: |   4064: 01 01 06 06 05 03 01 01 05 05 05 03 01 01 04 04   ................",
          "1242: |   4080: 05 03 01 01 03 03 05 03 01 01 0f 02 03 03 09 09   ................",
          "1243: | page 5 offset 16384",
          "1244: |      0: 0a 00 00 00 07 0f ca 00 0f fa 0f f2 0f ea 0f 00   ................",
          "1245: |   4032: 00 00 00 00 00 00 00 00 00 00 07 04 01 0f 01 07   ................",
          "1246: |   4048: 61 07 07 04 01 0f 01 06 61 06 07 04 01 0f 01 05   a.......a.......",
          "1247: |   4064: 61 05 07 04 01 1f 01 04 61 04 07 04 01 0f 01 03   a.......a.......",
          "1248: |   4080: 61 03 07 04 01 0f 01 02 61 02 05 04 09 0f 09 61   a.......a......a",
          "1249: | page 6 offset 20480",
          "1250: |      0: 0a 00 00 00 07 0f ca 00 0f fa 0f ea 0f e2 00 00   ................",
          "1251: |   4032: 00 00 00 00 00 00 00 00 00 00 07 04 01 0f 01 07   ................",
          "1252: |   4048: 61 07 07 04 01 0f 01 06 61 06 07 04 01 0f 01 05   a.......a.......",
          "1253: |   4064: 61 05 07 04 01 0f 01 04 61 04 07 04 01 0f 01 03   a.......a.......",
          "1254: |   4080: 61 03 07 04 01 0f 01 0f 61 02 05 04 09 0f 09 61   a.......a......a",
          "1255: | page 7 offset 24576",
          "1256: |      0: 0d 00 00 00 05 0f 1c 00 0f f0 0f e0 0f d3 0f c5   ................",
          "1257: |     16: 0f b8 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "1258: |   4016: 00 00 00 00 00 00 00 00 0b 05 04 11 11 13 62 31   ..............b1",
          "1259: |   4032: 62 31 37 20 31 0c 04 04 11 13 13 62 31 62 31 63   b17 1......b1b1c",
          "1260: |   4048: 37 20 31 0b 03 04 11 11 13 63 31 63 31 37 20 31   7 1......c1c17 1",
          "1261: |   4064: 0e 02 04 11 13 07 63 31 63 31 64 37 20 31 20 31   ......c1c1d7 1 1",
          "1262: |   4080: 0e 01 04 11 13 17 63 31 63 31 63 37 20 31 00 00   ......c1c1c7 1..",
          "1263: | end crash-3afa1ca9e9c1bd.db",
          "1264: }]} {}",
          "1266: do_execsql_test 15.1 {",
          "1267:   UPDATE c1 SET c= NOT EXISTS(SELECT 1 FROM c1 ORDER BY (SELECT 1 FROM c1 ORDER BY a)) +10 WHERE d BETWEEN 4 AND 7;",
          "1268: } {}",
          "",
          "---------------"
        ]
      }
    }
  ]
}