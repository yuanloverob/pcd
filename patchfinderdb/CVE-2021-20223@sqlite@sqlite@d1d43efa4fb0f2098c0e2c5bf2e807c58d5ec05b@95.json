{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1a7feefac5c1729394bc70f22e652e0097c55747",
      "candidate_info": {
        "commit_hash": "1a7feefac5c1729394bc70f22e652e0097c55747",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1a7feefac5c1729394bc70f22e652e0097c55747",
        "files": [
          "ext/icu/README.txt",
          "manifest",
          "manifest.uuid"
        ],
        "message": "User-suggested improvement to the README.txt for the ICU extension.\n\nFossilOrigin-Name: 1d1293c25abdd4b0fca64e5b1d0a118e2f339635dbc89422c0c2463fbf9ee27f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4bf566feca3a8fbe5e386533aac30e0ac25836cfc820a3abd91e156bd6198b4a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c68d7592faa8cc59d5f81f3ba4d506ea4db71ca",
      "candidate_info": {
        "commit_hash": "6c68d7592faa8cc59d5f81f3ba4d506ea4db71ca",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6c68d7592faa8cc59d5f81f3ba4d506ea4db71ca",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/rowvalue.test"
        ],
        "message": "Fix a false-postive in the sqlite3ExprImpliesNonNullRow() decision routine, that resulted in an incorrect LEFT JOIN strength reduction when the WHERE clause contained a row-value comparison. Ticket [02aa2bd02f97d0f2]\n\nFossilOrigin-Name: ea20068e6d97c9349ebcc7d0a01e99ebf08c6f44363f71a0218a1abea209adc5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/rowvalue.test||test/rowvalue.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3be19e1151af1850b65991edb82420f9412a7798dd756c86eaa9ffdde573263a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5230:     case TK_NOTNULL:",
          "5231:     case TK_IS:",
          "5232:     case TK_OR:",
          "5233:     case TK_CASE:",
          "5234:     case TK_IN:",
          "5235:     case TK_FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5233:     case TK_VECTOR:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5239:       testcase( pExpr->op==TK_NOTNULL );",
          "5240:       testcase( pExpr->op==TK_IS );",
          "5241:       testcase( pExpr->op==TK_OR );",
          "5242:       testcase( pExpr->op==TK_CASE );",
          "5243:       testcase( pExpr->op==TK_IN );",
          "5244:       testcase( pExpr->op==TK_FUNCTION );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5243:       testcase( pExpr->op==TK_VECTOR );",
          "",
          "---------------"
        ],
        "test/rowvalue.test||test/rowvalue.test": [
          "File: test/rowvalue.test -> test/rowvalue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "616:   SELECT 2 FROM t0 WHERE (t0.c0 COLLATE nocase, 0) < ('B', 0);",
          "617: } {1 2}",
          "620: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "619: # 2019-11-04 Ticket 02aa2bd02f97d0f2",
          "620: # The TK_VECTOR operator messes up sqlite3ExprImpliesNonNull() which",
          "621: # causes incorrect LEFT JOIN strength reduction.  TK_VECTOR should be",
          "622: # treated the same as TK_OR.",
          "623: #",
          "624: db close",
          "625: sqlite3 db :memory:",
          "626: do_execsql_test 26.10 {",
          "627:   CREATE TABLE t0(c0);",
          "628:   CREATE TABLE t1(c1);",
          "629:   INSERT INTO t1(c1) VALUES (0);",
          "630:   SELECT (c0, x'') != (NULL, 0) FROM t1 LEFT JOIN t0;",
          "631: } {1}",
          "632: do_execsql_test 26.20 {",
          "633:   SELECT 2 FROM t1 LEFT JOIN t0 ON (c0, x'') != (NULL, 0);",
          "634: } {2}",
          "635: do_execsql_test 26.30 {",
          "636:   SELECT 3 FROM t1 LEFT JOIN t0 WHERE (c0, x'') != (NULL, 0);",
          "637: } {3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a957e22fa4d54628b6ee991c44cce1f129ee26cd",
      "candidate_info": {
        "commit_hash": "a957e22fa4d54628b6ee991c44cce1f129ee26cd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a957e22fa4d54628b6ee991c44cce1f129ee26cd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Add an sqlite3FaultSim() call to btreeNext() to make it easier to simulate I/O errors in calls to sqlite3BtreeNext(), and in OP_SeekScan.\n\nFossilOrigin-Name: 29cca775d3f5411624f0a8d55d34a038a24f1009d25b097315adb64e70c4b299",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 61fbe7aa7cc0e8fe3e6b1c5aec277183d8cd7c86b1e835c38e0b37a9b8063343",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5751:   pPage = pCur->pPage;",
          "5752:   idx = ++pCur->ix;",
          "",
          "[Removed Lines]",
          "5753:   if( !pPage->isInit ){",
          "",
          "[Added Lines]",
          "5753:   if( !pPage->isInit || sqlite3FaultSim(412) ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c72afaf33c8e3fd86999a3f56a382cdf2845caf",
      "candidate_info": {
        "commit_hash": "8c72afaf33c8e3fd86999a3f56a382cdf2845caf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8c72afaf33c8e3fd86999a3f56a382cdf2845caf",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/window1.test"
        ],
        "message": "Add a test case for fix in check-in [1ca0bd982ab1183b]\n\nFossilOrigin-Name: 519864da8bb671941a64bf333c2086ad9a068b5f85759e7abd368f0706d3aefd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a96d02b4ab8c70cc20b322e4fa3a4b8814f05c51f5d8b071ec9d69e7379f3ea5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1314:   VALUES(2),(3),(count(*)OVER()),(4),(5);",
          "1315: } {2 3 1 4 5}",
          "1318: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1317: # 2019-12-17 crash test case found by Yongheng and Rui",
          "1318: # See check-in 1ca0bd982ab1183b",
          "1319: #",
          "1320: reset_db",
          "1321: do_execsql_test 37.10 {",
          "1322:   CREATE TABLE t0(a UNIQUE, b PRIMARY KEY);",
          "1323:   CREATE VIEW v0(c) AS SELECT max((SELECT count(a)OVER(ORDER BY 1))) FROM t0;",
          "1324:   SELECT c FROM v0 WHERE c BETWEEN 10 AND 20;",
          "1325: } {}",
          "1326: do_execsql_test 37.20 {",
          "1327:   DROP VIEW v0;",
          "1328:   CREATE VIEW v0(c) AS SELECT max((SELECT count(a)OVER(ORDER BY 1234))) FROM t0;",
          "1329:   SELECT c FROM v0 WHERE c BETWEEN -10 AND 20;",
          "1330: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c75921ac4ed3804b68b0c7ef5672c258e1558d83",
      "candidate_info": {
        "commit_hash": "c75921ac4ed3804b68b0c7ef5672c258e1558d83",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c75921ac4ed3804b68b0c7ef5672c258e1558d83",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/ctime.c",
          "src/main.c",
          "src/shell.c.in",
          "src/vdbe.h",
          "src/vdbeInt.h",
          "src/vdbeaux.c",
          "src/vdbevtab.c",
          "test/distinct.test",
          "tool/mksqlite3c.tcl"
        ],
        "message": "Merge the bytecode and tables_used table-valued functions.  Requires -DSQLITE_ENABLE_BYTECODE_VTAB at compile-time.\n\nFossilOrigin-Name: d09bcce37f1eaf084e3b07eb4a23653ea1f370cdd290ce3875408186adf87022",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/ctime.c||src/ctime.c",
          "src/main.c||src/main.c",
          "src/shell.c.in||src/shell.c.in",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbevtab.c||src/vdbevtab.c",
          "test/distinct.test||test/distinct.test",
          "tool/mksqlite3c.tcl||tool/mksqlite3c.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:          table.lo threads.lo tokenize.lo treeview.lo trigger.lo \\",
          "191:          update.lo userauth.lo upsert.lo util.lo vacuum.lo \\",
          "192:          vdbe.lo vdbeapi.lo vdbeaux.lo vdbeblob.lo vdbemem.lo vdbesort.lo \\",
          "194:          window.lo utf.lo vtab.lo",
          "196: # Object files for the amalgamation.",
          "",
          "[Removed Lines]",
          "193:          vdbetrace.lo wal.lo walker.lo where.lo wherecode.lo whereexpr.lo \\",
          "",
          "[Added Lines]",
          "193:          vdbetrace.lo vdbevtab.lo \\",
          "194:          wal.lo walker.lo where.lo wherecode.lo whereexpr.lo \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296:   $(TOP)/src/vdbemem.c \\",
          "297:   $(TOP)/src/vdbesort.c \\",
          "298:   $(TOP)/src/vdbetrace.c \\",
          "299:   $(TOP)/src/vdbeInt.h \\",
          "300:   $(TOP)/src/vtab.c \\",
          "301:   $(TOP)/src/vxworks.h \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "300:   $(TOP)/src/vdbevtab.c \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "502:   $(TOP)/src/vdbe.c \\",
          "503:   $(TOP)/src/vdbemem.c \\",
          "504:   $(TOP)/src/vdbetrace.c \\",
          "505:   $(TOP)/src/where.c \\",
          "506:   $(TOP)/src/wherecode.c \\",
          "507:   $(TOP)/src/whereexpr.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "507:   $(TOP)/src/vdbevtab.c \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "607: SHELL_OPT += -DSQLITE_ENABLE_STMTVTAB",
          "608: SHELL_OPT += -DSQLITE_ENABLE_DBPAGE_VTAB",
          "609: SHELL_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB",
          "610: SHELL_OPT += -DSQLITE_ENABLE_OFFSET_SQL_FUNC",
          "611: SHELL_OPT += -DSQLITE_ENABLE_DESERIALIZE",
          "612: FUZZERSHELL_OPT = -DSQLITE_ENABLE_JSON1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "613: SHELL_OPT += -DSQLITE_ENABLE_BYTECODE_VTAB",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "619: FUZZCHECK_OPT += -DSQLITE_ENABLE_RTREE",
          "620: FUZZCHECK_OPT += -DSQLITE_ENABLE_GEOPOLY",
          "621: FUZZCHECK_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB",
          "622: FUZZCHECK_SRC = $(TOP)/test/fuzzcheck.c $(TOP)/test/ossfuzz.c",
          "623: DBFUZZ_OPT =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "626: FUZZCHECK_OPT += -DSQLITE_ENABLE_BYTECODE_VTAB",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "688:   -DSQLITE_ENABLE_DESERIALIZE \\",
          "689:   -DSQLITE_DEBUG \\",
          "690:   -DSQLITE_ENABLE_DBSTAT_VTAB \\",
          "691:   -DSQLITE_ENABLE_RTREE \\",
          "692:   -DSQLITE_ENABLE_FTS4 \\",
          "693:   -DSQLITE_ENABLE_FTS5",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "696:   -DSQLITE_ENABLE_BYTECODE_VTAB \\",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1004: vdbetrace.lo: $(TOP)/src/vdbetrace.c $(HDR)",
          "1005:  $(LTCOMPILE) $(TEMP_STORE) -c $(TOP)/src/vdbetrace.c",
          "1007: vtab.lo: $(TOP)/src/vtab.c $(HDR)",
          "1008:  $(LTCOMPILE) $(TEMP_STORE) -c $(TOP)/src/vtab.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1013: vdbevtab.lo: $(TOP)/src/vdbevtab.c $(HDR)",
          "1014:  $(LTCOMPILE) $(TEMP_STORE) -c $(TOP)/src/vdbevtab.c",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1211: TESTFIXTURE_FLAGS += -DSQLITE_DEFAULT_PAGE_SIZE=1024",
          "1212: TESTFIXTURE_FLAGS += -DSQLITE_ENABLE_STMTVTAB",
          "1213: TESTFIXTURE_FLAGS += -DSQLITE_ENABLE_DBPAGE_VTAB",
          "1214: TESTFIXTURE_FLAGS += -DSQLITE_ENABLE_DESERIALIZE",
          "1216: TESTFIXTURE_SRC0 = $(TESTSRC2) libsqlite3.la",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1223: TESTFIXTURE_FLAGS += -DSQLITE_ENABLE_BYTECODE_VTAB",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "357: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_STMTVTAB=1",
          "358: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_DBPAGE_VTAB=1",
          "359: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_DBSTAT_VTAB=1",
          "360: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_DESERIALIZE=1",
          "361: !ENDIF",
          "362: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_COLUMN_METADATA=1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "360: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_BYTECODE_VTAB=1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1353:   $(TOP)\\src\\vdbemem.c \\",
          "1354:   $(TOP)\\src\\vdbesort.c \\",
          "1355:   $(TOP)\\src\\vdbetrace.c \\",
          "1356:   $(TOP)\\src\\vtab.c \\",
          "1357:   $(TOP)\\src\\wal.c \\",
          "1358:   $(TOP)\\src\\walker.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1357:   $(TOP)\\src\\vdbevtab.c \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1684: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_RTREE",
          "1685: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_GEOPOLY",
          "1686: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_DBSTAT_VTAB",
          "1688: FUZZCHECK_SRC = $(TOP)\\test\\fuzzcheck.c $(TOP)\\test\\ossfuzz.c",
          "1689: OSSSHELL_SRC = $(TOP)\\test\\ossshell.c $(TOP)\\test\\ossfuzz.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1689: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_BYTECODE_VTAB",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2109: vdbetrace.lo: $(TOP)\\src\\vdbetrace.c $(HDR)",
          "2110:  $(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\vdbetrace.c",
          "2112: vtab.lo: $(TOP)\\src\\vtab.c $(HDR)",
          "2113:  $(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\vtab.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2115: vdbevtab.lo: $(TOP)\\src\\vdbevtab.c $(HDR)",
          "2116:  $(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\vdbevtab.c",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2353: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_DEFAULT_PAGE_SIZE=1024",
          "2354: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_ENABLE_STMTVTAB=1",
          "2355: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_ENABLE_DBPAGE_VTAB=1",
          "2356: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_ENABLE_JSON1=1",
          "2357: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_ENABLE_DESERIALIZE=1",
          "2358: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) $(TEST_CCONV_OPTS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2362: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_ENABLE_BYTECODE_VTAB=1",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:          table.o threads.o tokenize.o treeview.o trigger.o \\",
          "75:          update.o upsert.o userauth.o util.o vacuum.o \\",
          "76:          vdbeapi.o vdbeaux.o vdbeblob.o vdbemem.o vdbesort.o \\",
          "78:          utf.o vtab.o window.o",
          "80: LIBOBJ += sqlite3session.o",
          "",
          "[Removed Lines]",
          "77:   vdbetrace.o wal.o walker.o where.o wherecode.o whereexpr.o \\",
          "",
          "[Added Lines]",
          "77:   vdbetrace.o vdbevtab.o \\",
          "78:          wal.o walker.o where.o wherecode.o whereexpr.o \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173:   $(TOP)/src/vdbemem.c \\",
          "174:   $(TOP)/src/vdbesort.c \\",
          "175:   $(TOP)/src/vdbetrace.c \\",
          "176:   $(TOP)/src/vdbeInt.h \\",
          "177:   $(TOP)/src/vtab.c \\",
          "178:   $(TOP)/src/vxworks.h \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:   $(TOP)/src/vdbevtab.c \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "526: SHELL_OPT += -DSQLITE_ENABLE_STMTVTAB",
          "527: SHELL_OPT += -DSQLITE_ENABLE_DBPAGE_VTAB",
          "528: SHELL_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB",
          "529: SHELL_OPT += -DSQLITE_ENABLE_OFFSET_SQL_FUNC",
          "530: FUZZERSHELL_OPT = -DSQLITE_ENABLE_JSON1",
          "531: FUZZCHECK_OPT = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "531: SHELL_OPT += -DSQLITE_ENABLE_BYTECODE_VTAB",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "536: FUZZCHECK_OPT += -DSQLITE_ENABLE_RTREE",
          "537: FUZZCHECK_OPT += -DSQLITE_ENABLE_GEOPOLY",
          "538: FUZZCHECK_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB",
          "539: DBFUZZ_OPT =",
          "540: KV_OPT = -DSQLITE_THREADSAFE=0 -DSQLITE_DIRECT_OVERFLOW_READ",
          "541: ST_OPT = -DSQLITE_THREADSAFE=0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "542: FUZZCHECK_OPT += -DSQLITE_ENABLE_BYTECODE_VTAB",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "586:   -DSQLITE_ENABLE_DESERIALIZE \\",
          "587:   -DSQLITE_DEBUG \\",
          "588:   -DSQLITE_ENABLE_DBSTAT_VTAB \\",
          "589:   -DSQLITE_ENABLE_RTREE \\",
          "590:   -DSQLITE_ENABLE_FTS4 \\",
          "591:   -DSQLITE_ENABLE_FTS5",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593:   -DSQLITE_ENABLE_BYTECODE_VTAB \\",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "895: TESTFIXTURE_FLAGS += -DSQLITE_DEFAULT_PAGE_SIZE=1024",
          "896: TESTFIXTURE_FLAGS += -DSQLITE_ENABLE_STMTVTAB",
          "897: TESTFIXTURE_FLAGS += -DSQLITE_ENABLE_DBPAGE_VTAB",
          "898: TESTFIXTURE_FLAGS += -DTCLSH_INIT_PROC=sqlite3TestInit",
          "900: testfixture$(EXE): $(TESTSRC2) libsqlite3.a $(TESTSRC) $(TOP)/src/tclsqlite.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "903: TESTFIXTURE_FLAGS += -DSQLITE_ENABLE_BYTECODE_VTAB",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 853703cd6d44d6dd48ef5eda6523e374b8ebdf7c338ddaad31c15a40a8b3fd9b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/ctime.c||src/ctime.c": [
          "File: src/ctime.c -> src/ctime.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "193: #if SQLITE_ENABLE_BATCH_ATOMIC_WRITE",
          "194:   \"ENABLE_BATCH_ATOMIC_WRITE\",",
          "195: #endif",
          "196: #if SQLITE_ENABLE_CEROD",
          "197:   \"ENABLE_CEROD=\" CTIMEOPT_VAL(SQLITE_ENABLE_CEROD),",
          "198: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196: #if SQLITE_ENABLE_BYTECODE_VTAB",
          "197:   \"ENABLE_BYTECODE_VTAB\",",
          "198: #endif",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3358:   }",
          "3359: #endif",
          "3361: #ifdef SQLITE_ENABLE_INTERNAL_FUNCTIONS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3361: #ifdef SQLITE_ENABLE_BYTECODE_VTAB",
          "3362:   if( !db->mallocFailed && rc==SQLITE_OK){",
          "3363:     rc = sqlite3VdbeBytecodeVtabInit(db);",
          "3364:   }",
          "3365: #endif",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3158:             const char *zEQPLine = (const char*)sqlite3_column_text(pExplain,3);",
          "3159:             int iEqpId = sqlite3_column_int(pExplain, 0);",
          "3160:             int iParentId = sqlite3_column_int(pExplain, 1);",
          "3161:             if( zEQPLine[0]=='-' ) eqp_render(pArg);",
          "3162:             eqp_append(pArg, iEqpId, iParentId, zEQPLine);",
          "3163:           }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3161:             if( zEQPLine==0 ) zEQPLine = \"\";",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "290: int sqlite3VdbeHasSubProgram(Vdbe*);",
          "292: int sqlite3NotPureFunc(sqlite3_context*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293: #ifdef SQLITE_ENABLE_BYTECODE_VTAB",
          "294: int sqlite3VdbeBytecodeVtabInit(sqlite3*);",
          "295: #endif",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #if !defined(SQLITE_OMIT_EXPLAIN) || !defined(NDEBUG) \\",
          "35: # define VDBE_DISPLAY_P4 1",
          "36: #else",
          "37: # define VDBE_DISPLAY_P4 0",
          "",
          "[Removed Lines]",
          "34:      || defined(VDBE_PROFILE) || defined(SQLITE_DEBUG)",
          "",
          "[Added Lines]",
          "34:      || defined(VDBE_PROFILE) || defined(SQLITE_DEBUG) \\",
          "35:      || defined(SQLITE_ENABLE_BYTECODE_VTAB)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "496: int sqlite3VdbeIdxKeyCompare(sqlite3*,VdbeCursor*,UnpackedRecord*,int*);",
          "497: int sqlite3VdbeIdxRowid(sqlite3*, BtCursor*, i64*);",
          "498: int sqlite3VdbeExec(Vdbe*);",
          "500: int sqlite3VdbeList(Vdbe*);",
          "501: #endif",
          "502: int sqlite3VdbeHalt(Vdbe*);",
          "",
          "[Removed Lines]",
          "499: #ifndef SQLITE_OMIT_EXPLAIN",
          "",
          "[Added Lines]",
          "500: #if !defined(SQLITE_OMIT_EXPLAIN) || defined(SQLITE_ENABLE_BYTECODE_VTAB)",
          "501: int sqlite3VdbeNextOpcode(Vdbe*,Mem*,int,int*,int*,Op**);",
          "502: char *sqlite3VdbeDisplayP4(sqlite3*,Op*);",
          "503: #endif",
          "504: #if defined(SQLITE_ENABLE_EXPLAIN_COMMENTS)",
          "505: char *sqlite3VdbeDisplayComment(sqlite3*,const Op*,const char*);",
          "506: #endif",
          "507: #if !defined(SQLITE_OMIT_EXPLAIN)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "538: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "539: int sqlite3VdbeMemAggValue(Mem*, Mem*, FuncDef*);",
          "540: #endif",
          "542: const char *sqlite3OpcodeName(int);",
          "543: #endif",
          "544: int sqlite3VdbeMemGrow(Mem *pMem, int n, int preserve);",
          "",
          "[Removed Lines]",
          "541: #ifndef SQLITE_OMIT_EXPLAIN",
          "",
          "[Added Lines]",
          "549: #if !defined(SQLITE_OMIT_EXPLAIN) || defined(SQLITE_ENABLE_BYTECODE_VTAB)",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1472: ){",
          "1473:   const char *zOpName;",
          "1474:   const char *zSynopsis;",
          "",
          "[Removed Lines]",
          "1467: static int displayComment(",
          "",
          "[Added Lines]",
          "1467: char *sqlite3VdbeDisplayComment(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1476:   int ii;",
          "1477:   char zAlt[50];",
          "1478:   StrAccum x;",
          "1481:   zOpName = sqlite3OpcodeName(pOp->opcode);",
          "1482:   nOpName = sqlite3Strlen30(zOpName);",
          "1483:   if( zOpName[nOpName+1] ){",
          "",
          "[Removed Lines]",
          "1479:   sqlite3StrAccumInit(&x, 0, zTemp, nTemp, 0);",
          "",
          "[Added Lines]",
          "1479:   sqlite3StrAccumInit(&x, 0, 0, 0, SQLITE_MAX_LENGTH);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1544:   }else if( pOp->zComment ){",
          "1545:     sqlite3_str_appendall(&x, pOp->zComment);",
          "1546:   }",
          "1549: }",
          "1552: #if VDBE_DISPLAY_P4 && defined(SQLITE_ENABLE_CURSOR_HINTS)",
          "",
          "[Removed Lines]",
          "1547:   sqlite3StrAccumFinish(&x);",
          "1548:   return x.nChar;",
          "",
          "[Added Lines]",
          "1546:   if( (x.accError & SQLITE_NOMEM)!=0 && db!=0 ){",
          "1547:     sqlite3OomFault(db);",
          "1548:   }",
          "1549:   return sqlite3StrAccumFinish(&x);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1633:   StrAccum x;",
          "1636:   switch( pOp->p4type ){",
          "1637:     case P4_KEYINFO: {",
          "1638:       int j;",
          "",
          "[Removed Lines]",
          "1631: static char *displayP4(Op *pOp, char *zTemp, int nTemp){",
          "1632:   char *zP4 = zTemp;",
          "1634:   assert( nTemp>=20 );",
          "1635:   sqlite3StrAccumInit(&x, 0, zTemp, nTemp, 0);",
          "",
          "[Added Lines]",
          "1632: char *sqlite3VdbeDisplayP4(sqlite3 *db, Op *pOp){",
          "1633:   char *zP4 = 0;",
          "1636:   sqlite3StrAccumInit(&x, 0, 0, 0, SQLITE_MAX_LENGTH);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1716:       int n = ai[0];   /* The first element of an INTARRAY is always the",
          "1718:       for(i=1; i<=n; i++){",
          "1720:       }",
          "1722:       sqlite3_str_append(&x, \"]\", 1);",
          "1723:       break;",
          "1724:     }",
          "1725:     case P4_SUBPROGRAM: {",
          "1727:       break;",
          "1728:     }",
          "1729:     case P4_DYNBLOB:",
          "1730:     case P4_ADVANCE: {",
          "1732:       break;",
          "1733:     }",
          "1734:     case P4_TABLE: {",
          "1736:       break;",
          "1737:     }",
          "1738:     default: {",
          "1739:       zP4 = pOp->p4.z;",
          "1744:     }",
          "1745:   }",
          "1749: }",
          "",
          "[Removed Lines]",
          "1719:         sqlite3_str_appendf(&x, \",%d\", ai[i]);",
          "1721:       zTemp[0] = '[';",
          "1726:       sqlite3_str_appendf(&x, \"program\");",
          "1731:       zTemp[0] = 0;",
          "1735:       sqlite3_str_appendf(&x, \"%s\", pOp->p4.pTab->zName);",
          "1740:       if( zP4==0 ){",
          "1741:         zP4 = zTemp;",
          "1742:         zTemp[0] = 0;",
          "1743:       }",
          "1746:   sqlite3StrAccumFinish(&x);",
          "1747:   assert( zP4!=0 );",
          "1748:   return zP4;",
          "",
          "[Added Lines]",
          "1720:         sqlite3_str_appendf(&x, \"%c%d\", (i==1 ? '[' : ','), ai[i]);",
          "1726:       zP4 = \"program\";",
          "1734:       zP4 = pOp->p4.pTab->zName;",
          "1741:   if( zP4 ) sqlite3_str_appendall(&x, zP4);",
          "1742:   if( (x.accError & SQLITE_NOMEM)!=0 ){",
          "1743:     sqlite3OomFault(db);",
          "1744:   }",
          "1745:   return sqlite3StrAccumFinish(&x);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1836: void sqlite3VdbePrintOp(FILE *pOut, int pc, VdbeOp *pOp){",
          "1837:   char *zP4;",
          "1840:   static const char *zFormat1 = \"%4d %-13s %4d %4d %4d %-13s %.2X %s\\n\";",
          "1841:   if( pOut==0 ) pOut = stdout;",
          "1843: #ifdef SQLITE_ENABLE_EXPLAIN_COMMENTS",
          "1845: #else",
          "1847: #endif",
          "1851:   fprintf(pOut, zFormat1, pc,",
          "1854:   );",
          "1855:   fflush(pOut);",
          "1856: }",
          "1857: #endif",
          "",
          "[Removed Lines]",
          "1838:   char zPtr[50];",
          "1839:   char zCom[100];",
          "1842:   zP4 = displayP4(pOp, zPtr, sizeof(zPtr));",
          "1844:   displayComment(pOp, zP4, zCom, sizeof(zCom));",
          "1846:   zCom[0] = 0;",
          "1852:       sqlite3OpcodeName(pOp->opcode), pOp->p1, pOp->p2, pOp->p3, zP4, pOp->p5,",
          "1853:       zCom",
          "",
          "[Added Lines]",
          "1835:   char *zCom;",
          "1836:   sqlite3 dummyDb;",
          "1839:   dummyDb.mallocFailed = 1;",
          "1840:   zP4 = sqlite3VdbeDisplayP4(&dummyDb, pOp);",
          "1842:   zCom = sqlite3VdbeDisplayComment(0, pOp, zP4);",
          "1844:   zCom = 0;",
          "1850:       sqlite3OpcodeName(pOp->opcode), pOp->p1, pOp->p2, pOp->p3,",
          "1851:       zP4 ? zP4 : \"\", pOp->p5,",
          "1852:       zCom ? zCom : \"\"",
          "1855:   sqlite3_free(zP4);",
          "1856:   sqlite3_free(zCom);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1943:   pFrame->v->pDelFrame = pFrame;",
          "1944: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1947: #if defined(SQLITE_ENABLE_BYTECODE_VTAB) || !defined(SQLITE_OMIT_EXPLAIN)",
          "1955: int sqlite3VdbeNextOpcode(",
          "1962: ){",
          "1978:   nRow = p->nOp;",
          "1979:   if( pSub!=0 ){",
          "1980:     if( pSub->flags&MEM_Blob ){",
          "1983:       nSub = pSub->n/sizeof(Vdbe*);",
          "1984:       apSub = (SubProgram **)pSub->z;",
          "1985:     }",
          "1986:     for(i=0; i<nSub; i++){",
          "1987:       nRow += apSub[i]->nOp;",
          "1988:     }",
          "1989:   }",
          "1990:   iPc = *piPc;",
          "1992:     i = iPc++;",
          "1993:     if( i>=nRow ){",
          "1994:       p->rc = SQLITE_OK;",
          "1995:       rc = SQLITE_DONE;",
          "1996:       break;",
          "1997:     }",
          "1998:     if( i<p->nOp ){",
          "2001:       aOp = p->aOp;",
          "2002:     }else{",
          "2005:       int j;",
          "2006:       i -= p->nOp;",
          "2007:       assert( apSub!=0 );",
          "2008:       assert( nSub>0 );",
          "2009:       for(j=0; i>=apSub[j]->nOp; j++){",
          "2010:         i -= apSub[j]->nOp;",
          "2011:         assert( i<apSub[j]->nOp || j+1<nSub );",
          "2012:       }",
          "2013:       aOp = apSub[j]->aOp;",
          "2014:     }",
          "2021:     if( pSub!=0 && aOp[i].p4type==P4_SUBPROGRAM ){",
          "2022:       int nByte = (nSub+1)*sizeof(SubProgram*);",
          "2023:       int j;",
          "2024:       for(j=0; j<nSub; j++){",
          "2025:         if( apSub[j]==aOp[i].p4.pProgram ) break;",
          "2026:       }",
          "2027:       if( j==nSub ){",
          "2028:         p->rc = sqlite3VdbeMemGrow(pSub, nByte, nSub!=0);",
          "2029:         if( p->rc!=SQLITE_OK ){",
          "2030:           rc = SQLITE_ERROR;",
          "2031:           break;",
          "2032:         }",
          "2033:         apSub = (SubProgram **)pSub->z;",
          "2034:         apSub[nSub++] = aOp[i].p4.pProgram;",
          "2035:         MemSetTypeFlag(pSub, MEM_Blob);",
          "2036:         pSub->n = nSub*sizeof(SubProgram*);",
          "2037:         nRow += aOp[i].p4.pProgram->nOp;",
          "2038:       }",
          "2039:     }",
          "2040:     if( eMode==0 ) break;",
          "2041: #ifdef SQLITE_ENABLE_BYTECODE_VTAB",
          "2042:     if( eMode==2 ){",
          "2043:       Op *pOp = aOp + i;",
          "2044:       if( pOp->opcode==OP_OpenRead ) break;",
          "2045:       if( pOp->opcode==OP_OpenWrite && (pOp->p5 & OPFLAG_P2ISREG)==0 ) break;",
          "2046:       if( pOp->opcode==OP_ReopenIdx ) break;",
          "2047:     }else",
          "2048: #endif",
          "2049:     {",
          "2050:       assert( eMode==1 );",
          "2051:       if( aOp[i].opcode==OP_Explain ) break;",
          "2052:       if( aOp[i].opcode==OP_Init && iPc>1 ) break;",
          "2053:     }",
          "2054:   }",
          "2058:   return rc;",
          "2059: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1983: int sqlite3VdbeList(",
          "1985: ){",
          "1994:   int bListSubprogs = (p->explain==1 || (db->flags & SQLITE_TriggerEQP)!=0);",
          "1997:   assert( p->explain );",
          "1998:   assert( p->magic==VDBE_MAGIC_RUN );",
          "",
          "[Removed Lines]",
          "1995:   Op *pOp = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2012:     return SQLITE_ERROR;",
          "2013:   }",
          "2023:   if( bListSubprogs ){",
          "",
          "[Removed Lines]",
          "2022:   nRow = p->nOp;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2028:     assert( p->nMem>9 );",
          "2029:     pSub = &p->aMem[9];",
          "2039:   }",
          "2095:   if( rc==SQLITE_OK ){",
          "2096:     if( AtomicLoad(&db->u1.isInterrupted) ){",
          "2097:       p->rc = SQLITE_INTERRUPT;",
          "2098:       rc = SQLITE_ERROR;",
          "2099:       sqlite3VdbeError(p, sqlite3ErrStr(p->rc));",
          "2100:     }else{",
          "2136:       }else{",
          "2154: #ifdef SQLITE_ENABLE_EXPLAIN_COMMENTS",
          "2158:         }",
          "2162: #else",
          "2164: #endif",
          "2165:       }",
          "2171:     }",
          "2172:   }",
          "2173:   return rc;",
          "",
          "[Removed Lines]",
          "2030:     if( pSub->flags&MEM_Blob ){",
          "2033:       nSub = pSub->n/sizeof(Vdbe*);",
          "2034:       apSub = (SubProgram **)pSub->z;",
          "2035:     }",
          "2036:     for(i=0; i<nSub; i++){",
          "2037:       nRow += apSub[i]->nOp;",
          "2038:     }",
          "2042:     i = p->pc++;",
          "2043:     if( i>=nRow ){",
          "2044:       p->rc = SQLITE_OK;",
          "2045:       rc = SQLITE_DONE;",
          "2046:       break;",
          "2047:     }",
          "2048:     if( i<p->nOp ){",
          "2051:       pOp = &p->aOp[i];",
          "2052:     }else{",
          "2055:       int j;",
          "2056:       i -= p->nOp;",
          "2057:       assert( apSub!=0 );",
          "2058:       assert( nSub>0 );",
          "2059:       for(j=0; i>=apSub[j]->nOp; j++){",
          "2060:         i -= apSub[j]->nOp;",
          "2061:         assert( i<apSub[j]->nOp || j+1<nSub );",
          "2062:       }",
          "2063:       pOp = &apSub[j]->aOp[i];",
          "2064:     }",
          "2071:     if( bListSubprogs && pOp->p4type==P4_SUBPROGRAM ){",
          "2072:       int nByte = (nSub+1)*sizeof(SubProgram*);",
          "2073:       int j;",
          "2074:       for(j=0; j<nSub; j++){",
          "2075:         if( apSub[j]==pOp->p4.pProgram ) break;",
          "2076:       }",
          "2077:       if( j==nSub ){",
          "2078:         p->rc = sqlite3VdbeMemGrow(pSub, nByte, nSub!=0);",
          "2079:         if( p->rc!=SQLITE_OK ){",
          "2080:           rc = SQLITE_ERROR;",
          "2081:           break;",
          "2082:         }",
          "2083:         apSub = (SubProgram **)pSub->z;",
          "2084:         apSub[nSub++] = pOp->p4.pProgram;",
          "2085:         pSub->flags |= MEM_Blob;",
          "2086:         pSub->n = nSub*sizeof(SubProgram*);",
          "2087:         nRow += pOp->p4.pProgram->nOp;",
          "2088:       }",
          "2089:     }",
          "2090:     if( p->explain<2 ) break;",
          "2091:     if( pOp->opcode==OP_Explain ) break;",
          "2092:     if( pOp->opcode==OP_Init && p->pc>1 ) break;",
          "2093:   }",
          "2101:       char *zP4;",
          "2102:       if( p->explain==1 ){",
          "2103:         pMem->flags = MEM_Int;",
          "2105:         pMem++;",
          "2107:         pMem->flags = MEM_Static|MEM_Str|MEM_Term;",
          "2109:         assert( pMem->z!=0 );",
          "2110:         pMem->n = sqlite3Strlen30(pMem->z);",
          "2111:         pMem->enc = SQLITE_UTF8;",
          "2112:         pMem++;",
          "2113:       }",
          "2115:       pMem->flags = MEM_Int;",
          "2117:       pMem++;",
          "2119:       pMem->flags = MEM_Int;",
          "2121:       pMem++;",
          "2123:       pMem->flags = MEM_Int;",
          "2125:       pMem++;",
          "2128:         assert( p->db->mallocFailed );",
          "2129:         return SQLITE_ERROR;",
          "2130:       }",
          "2131:       pMem->flags = MEM_Str|MEM_Term;",
          "2132:       zP4 = displayP4(pOp, pMem->z, pMem->szMalloc);",
          "2133:       if( zP4!=pMem->z ){",
          "2134:         pMem->n = 0;",
          "2135:         sqlite3VdbeMemSetStr(pMem, zP4, -1, SQLITE_UTF8, 0);",
          "2137:         assert( pMem->z!=0 );",
          "2138:         pMem->n = sqlite3Strlen30(pMem->z);",
          "2139:         pMem->enc = SQLITE_UTF8;",
          "2140:       }",
          "2141:       pMem++;",
          "2143:       if( p->explain==1 ){",
          "2144:         if( sqlite3VdbeMemClearAndResize(pMem, 4) ){",
          "2145:           assert( p->db->mallocFailed );",
          "2146:           return SQLITE_ERROR;",
          "2147:         }",
          "2148:         pMem->flags = MEM_Str|MEM_Term;",
          "2149:         pMem->n = 2;",
          "2151:         pMem->enc = SQLITE_UTF8;",
          "2152:         pMem++;",
          "2155:         if( sqlite3VdbeMemClearAndResize(pMem, 500) ){",
          "2156:           assert( p->db->mallocFailed );",
          "2157:           return SQLITE_ERROR;",
          "2159:         pMem->flags = MEM_Str|MEM_Term;",
          "2160:         pMem->n = displayComment(pOp, zP4, pMem->z, 500);",
          "2161:         pMem->enc = SQLITE_UTF8;",
          "2167:       p->nResColumn = 8 - 4*(p->explain-1);",
          "2168:       p->pResultSet = &p->aMem[1];",
          "2169:       p->rc = SQLITE_OK;",
          "2170:       rc = SQLITE_ROW;",
          "",
          "[Added Lines]",
          "2136:   }else{",
          "2137:     pSub = 0;",
          "2141:   rc = sqlite3VdbeNextOpcode(p, pSub, p->explain==2, &p->pc, &i, &aOp);",
          "2144:     pOp = aOp + i;",
          "2150:       char *zP4 = sqlite3VdbeDisplayP4(db, pOp);",
          "2151:       if( p->explain==2 ){",
          "2152:         sqlite3VdbeMemSetInt64(pMem, pOp->p1);",
          "2153:         sqlite3VdbeMemSetInt64(pMem+1, pOp->p2);",
          "2154:         sqlite3VdbeMemSetInt64(pMem+2, pOp->p3);",
          "2155:         sqlite3VdbeMemSetStr(pMem+3, zP4, -1, SQLITE_UTF8, sqlite3_free);",
          "2156:         p->nResColumn = 4;",
          "2158:         sqlite3VdbeMemSetInt64(pMem+0, i);",
          "2159:         sqlite3VdbeMemSetStr(pMem+1, (char*)sqlite3OpcodeName(pOp->opcode),",
          "2160:                              -1, SQLITE_UTF8, SQLITE_STATIC);",
          "2161:         sqlite3VdbeMemSetInt64(pMem+2, pOp->p1);",
          "2162:         sqlite3VdbeMemSetInt64(pMem+3, pOp->p2);",
          "2163:         sqlite3VdbeMemSetInt64(pMem+4, pOp->p3);",
          "2165:         sqlite3VdbeMemSetInt64(pMem+6, pOp->p5);",
          "2167:         {",
          "2168:           char *zCom = sqlite3VdbeDisplayComment(db, pOp, zP4);",
          "2169:           sqlite3VdbeMemSetStr(pMem+7, zCom, -1, SQLITE_UTF8, sqlite3_free);",
          "2172:         sqlite3VdbeMemSetNull(pMem+7);",
          "2174:         sqlite3VdbeMemSetStr(pMem+5, zP4, -1, SQLITE_UTF8, sqlite3_free);",
          "2175:         p->nResColumn = 8;",
          "2176:       }",
          "2177:       p->pResultSet = pMem;",
          "2178:       if( db->mallocFailed ){",
          "2179:         p->rc = SQLITE_NOMEM;",
          "2180:         rc = SQLITE_ERROR;",
          "2181:       }else{",
          "2182:         p->rc = SQLITE_OK;",
          "2183:         rc = SQLITE_ROW;",
          "",
          "---------------"
        ],
        "src/vdbevtab.c||src/vdbevtab.c": [
          "File: src/vdbevtab.c -> src/vdbevtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #ifdef SQLITE_ENABLE_BYTECODE_VTAB",
          "17: #include \"sqliteInt.h\"",
          "18: #include \"vdbeInt.h\"",
          "22: typedef struct bytecodevtab bytecodevtab;",
          "23: struct bytecodevtab {",
          "27: };",
          "31: typedef struct bytecodevtab_cursor bytecodevtab_cursor;",
          "32: struct bytecodevtab_cursor {",
          "45: };",
          "50: static int bytecodevtabConnect(",
          "51:   sqlite3 *db,",
          "52:   void *pAux,",
          "53:   int argc, const char *const*argv,",
          "54:   sqlite3_vtab **ppVtab,",
          "55:   char **pzErr",
          "56: ){",
          "57:   bytecodevtab *pNew;",
          "58:   int rc;",
          "59:   int isTabUsed = pAux!=0;",
          "60:   const char *azSchema[2] = {",
          "62:     \"CREATE TABLE x(\"",
          "63:       \"addr INT,\"",
          "64:       \"opcode TEXT,\"",
          "65:       \"p1 INT,\"",
          "66:       \"p2 INT,\"",
          "67:       \"p3 INT,\"",
          "68:       \"p4 TEXT,\"",
          "69:       \"p5 INT,\"",
          "70:       \"comment TEXT,\"",
          "71:       \"subprog TEXT,\"",
          "72:       \"stmt HIDDEN\"",
          "73:     \");\",",
          "76:     \"CREATE TABLE x(\"",
          "77:       \"type TEXT,\"",
          "78:       \"schema TEXT,\"",
          "79:       \"name TEXT,\"",
          "80:       \"wr INT,\"",
          "81:       \"subprog TEXT,\"",
          "82:       \"stmt HIDDEN\"",
          "83:    \");\"",
          "84:   };",
          "86:   rc = sqlite3_declare_vtab(db, azSchema[isTabUsed]);",
          "87:   if( rc==SQLITE_OK ){",
          "88:     pNew = sqlite3_malloc( sizeof(*pNew) );",
          "90:     if( pNew==0 ) return SQLITE_NOMEM;",
          "91:     memset(pNew, 0, sizeof(*pNew));",
          "92:     pNew->db = db;",
          "93:     pNew->bTablesUsed = isTabUsed*2;",
          "94:   }",
          "95:   return rc;",
          "96: }",
          "101: static int bytecodevtabDisconnect(sqlite3_vtab *pVtab){",
          "102:   bytecodevtab *p = (bytecodevtab*)pVtab;",
          "103:   sqlite3_free(p);",
          "104:   return SQLITE_OK;",
          "105: }",
          "110: static int bytecodevtabOpen(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCursor){",
          "111:   bytecodevtab *pVTab = (bytecodevtab*)p;",
          "112:   bytecodevtab_cursor *pCur;",
          "113:   pCur = sqlite3_malloc( sizeof(*pCur) );",
          "114:   if( pCur==0 ) return SQLITE_NOMEM;",
          "115:   memset(pCur, 0, sizeof(*pCur));",
          "116:   sqlite3VdbeMemInit(&pCur->sub, pVTab->db, 1);",
          "118:   return SQLITE_OK;",
          "119: }",
          "124: static void bytecodevtabCursorClear(bytecodevtab_cursor *pCur){",
          "125:   sqlite3_free(pCur->zP4);",
          "126:   pCur->zP4 = 0;",
          "127:   sqlite3VdbeMemRelease(&pCur->sub);",
          "128:   sqlite3VdbeMemSetNull(&pCur->sub);",
          "129:   if( pCur->needFinalize ){",
          "130:     sqlite3_finalize(pCur->pStmt);",
          "131:   }",
          "132:   pCur->pStmt = 0;",
          "133:   pCur->needFinalize = 0;",
          "134:   pCur->zType = 0;",
          "135:   pCur->zSchema = 0;",
          "136:   pCur->zName = 0;",
          "137: }",
          "142: static int bytecodevtabClose(sqlite3_vtab_cursor *cur){",
          "143:   bytecodevtab_cursor *pCur = (bytecodevtab_cursor*)cur;",
          "144:   bytecodevtabCursorClear(pCur);",
          "145:   sqlite3_free(pCur);",
          "146:   return SQLITE_OK;",
          "147: }",
          "153: static int bytecodevtabNext(sqlite3_vtab_cursor *cur){",
          "154:   bytecodevtab_cursor *pCur = (bytecodevtab_cursor*)cur;",
          "155:   bytecodevtab *pTab = (bytecodevtab*)cur->pVtab;",
          "156:   int rc;",
          "157:   if( pCur->zP4 ){",
          "158:     sqlite3_free(pCur->zP4);",
          "159:     pCur->zP4 = 0;",
          "160:   }",
          "161:   if( pCur->zName ){",
          "162:     pCur->zName = 0;",
          "163:     pCur->zType = 0;",
          "164:     pCur->zSchema = 0;",
          "165:   }",
          "166:   rc = sqlite3VdbeNextOpcode(",
          "167:            (Vdbe*)pCur->pStmt,",
          "168:            pCur->showSubprograms ? &pCur->sub : 0,",
          "169:            pTab->bTablesUsed,",
          "170:            &pCur->iRowid,",
          "171:            &pCur->iAddr,",
          "172:            &pCur->aOp);",
          "173:   if( rc!=SQLITE_OK ){",
          "174:     sqlite3VdbeMemSetNull(&pCur->sub);",
          "175:     pCur->aOp = 0;",
          "176:   }",
          "177:   return SQLITE_OK;",
          "178: }",
          "184: static int bytecodevtabEof(sqlite3_vtab_cursor *cur){",
          "185:   bytecodevtab_cursor *pCur = (bytecodevtab_cursor*)cur;",
          "186:   return pCur->aOp==0;",
          "187: }",
          "193: static int bytecodevtabColumn(",
          "197: ){",
          "198:   bytecodevtab_cursor *pCur = (bytecodevtab_cursor*)cur;",
          "199:   bytecodevtab *pVTab = (bytecodevtab*)cur->pVtab;",
          "200:   Op *pOp = pCur->aOp + pCur->iAddr;",
          "201:   if( pVTab->bTablesUsed ){",
          "202:     if( i==4 ){",
          "203:       i = 8;",
          "204:     }else{",
          "205:       if( i<=2 && pCur->zType==0 ){",
          "206:         Schema *pSchema;",
          "207:         HashElem *k;",
          "208:         int iDb = pOp->p3;",
          "209:         int iRoot = pOp->p2;",
          "210:         sqlite3 *db = pVTab->db;",
          "211:         pSchema = db->aDb[iDb].pSchema;",
          "212:         pCur->zSchema = db->aDb[iDb].zDbSName;",
          "213:         for(k=sqliteHashFirst(&pSchema->tblHash); k; k=sqliteHashNext(k)){",
          "214:           Table *pTab = (Table*)sqliteHashData(k);",
          "215:           if( !IsVirtual(pTab) && pTab->tnum==iRoot ){",
          "216:             pCur->zName = pTab->zName;",
          "217:             pCur->zType = \"table\";",
          "218:             break;",
          "219:           }",
          "220:         }",
          "221:         if( pCur->zName==0 ){",
          "222:           for(k=sqliteHashFirst(&pSchema->idxHash); k; k=sqliteHashNext(k)){",
          "223:             Index *pIdx = (Index*)sqliteHashData(k);",
          "224:             if( pIdx->tnum==iRoot ){",
          "225:               pCur->zName = pIdx->zName;",
          "226:               pCur->zType = \"index\";",
          "227:             }",
          "228:           }",
          "229:         }",
          "230:       }",
          "231:       i += 10;",
          "232:     }",
          "233:   }",
          "234:   switch( i ){",
          "236:       sqlite3_result_int(ctx, pCur->iAddr);",
          "237:       break;",
          "239:       sqlite3_result_text(ctx, (char*)sqlite3OpcodeName(pOp->opcode),",
          "240:                           -1, SQLITE_STATIC);",
          "241:       break;",
          "243:       sqlite3_result_int(ctx, pOp->p1);",
          "244:       break;",
          "246:       sqlite3_result_int(ctx, pOp->p2);",
          "247:       break;",
          "249:       sqlite3_result_int(ctx, pOp->p3);",
          "250:       break;",
          "253:       if( pCur->zP4==0 ){",
          "254:         pCur->zP4 = sqlite3VdbeDisplayP4(pVTab->db, pOp);",
          "255:       }",
          "256:       if( i==5 ){",
          "257:         sqlite3_result_text(ctx, pCur->zP4, -1, SQLITE_STATIC);",
          "258:       }else{",
          "259: #ifdef SQLITE_ENABLE_EXPLAIN_COMMENTS",
          "260:         char *zCom = sqlite3VdbeDisplayComment(pVTab->db, pOp, pCur->zP4);",
          "261:         sqlite3_result_text(ctx, zCom, -1, sqlite3_free);",
          "262: #endif",
          "263:       }",
          "264:       break;",
          "266:       sqlite3_result_int(ctx, pOp->p5);",
          "267:       break;",
          "269:       Op *aOp = pCur->aOp;",
          "270:       assert( aOp[0].opcode==OP_Init );",
          "271:       assert( aOp[0].p4.z==0 || strncmp(aOp[0].p4.z,\"-\" \"- \",3)==0 );",
          "272:       if( pCur->iRowid==pCur->iAddr+1 ){",
          "274:       }else if( aOp[0].p4.z!=0 ){",
          "275:          sqlite3_result_text(ctx, aOp[0].p4.z+3, -1, SQLITE_STATIC);",
          "276:       }else{",
          "277:          sqlite3_result_text(ctx, \"(FK)\", 4, SQLITE_STATIC);",
          "278:       }",
          "279:       break;",
          "280:     }",
          "282:       sqlite3_result_text(ctx, pCur->zType, -1, SQLITE_STATIC);",
          "283:       break;",
          "285:       sqlite3_result_text(ctx, pCur->zSchema, -1, SQLITE_STATIC);",
          "286:       break;",
          "288:       sqlite3_result_text(ctx, pCur->zName, -1, SQLITE_STATIC);",
          "289:       break;",
          "291:       sqlite3_result_int(ctx, pOp->opcode==OP_OpenWrite);",
          "292:       break;",
          "293:   }",
          "294:   return SQLITE_OK;",
          "295: }",
          "301: static int bytecodevtabRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){",
          "302:   bytecodevtab_cursor *pCur = (bytecodevtab_cursor*)cur;",
          "304:   return SQLITE_OK;",
          "305: }",
          "313: static int bytecodevtabFilter(",
          "314:   sqlite3_vtab_cursor *pVtabCursor,",
          "315:   int idxNum, const char *idxStr,",
          "316:   int argc, sqlite3_value **argv",
          "317: ){",
          "318:   bytecodevtab_cursor *pCur = (bytecodevtab_cursor *)pVtabCursor;",
          "319:   bytecodevtab *pVTab = (bytecodevtab *)pVtabCursor->pVtab;",
          "320:   int rc = SQLITE_OK;",
          "322:   bytecodevtabCursorClear(pCur);",
          "323:   pCur->iRowid = 0;",
          "324:   pCur->iAddr = 0;",
          "325:   pCur->showSubprograms = idxNum==0;",
          "326:   assert( argc==1 );",
          "327:   if( sqlite3_value_type(argv[0])==SQLITE_TEXT ){",
          "328:     const char *zSql = (const char*)sqlite3_value_text(argv[0]);",
          "329:     if( zSql==0 ){",
          "330:       rc = SQLITE_NOMEM;",
          "331:     }else{",
          "332:       rc = sqlite3_prepare_v2(pVTab->db, zSql, -1, &pCur->pStmt, 0);",
          "333:       pCur->needFinalize = 1;",
          "334:     }",
          "335:   }else{",
          "336:     pCur->pStmt = (sqlite3_stmt*)sqlite3_value_pointer(argv[0],\"stmt-pointer\");",
          "337:   }",
          "338:   if( pCur->pStmt==0 ){",
          "339:     pVTab->base.zErrMsg = sqlite3_mprintf(",
          "340:        \"argument to %s() is not a valid SQL statement\",",
          "341:        pVTab->bTablesUsed ? \"tables_used\" : \"bytecode\"",
          "342:     );",
          "343:     rc = SQLITE_ERROR;",
          "344:   }else{",
          "345:     bytecodevtabNext(pVtabCursor);",
          "346:   }",
          "347:   return rc;",
          "348: }",
          "355: static int bytecodevtabBestIndex(",
          "356:   sqlite3_vtab *tab,",
          "357:   sqlite3_index_info *pIdxInfo",
          "358: ){",
          "359:   int i;",
          "360:   int rc = SQLITE_CONSTRAINT;",
          "361:   struct sqlite3_index_constraint *p;",
          "362:   bytecodevtab *pVTab = (bytecodevtab*)tab;",
          "363:   int iBaseCol = pVTab->bTablesUsed ? 4 : 8;",
          "364:   pIdxInfo->estimatedCost = (double)100;",
          "365:   pIdxInfo->estimatedRows = 100;",
          "366:   pIdxInfo->idxNum = 0;",
          "367:   for(i=0, p=pIdxInfo->aConstraint; i<pIdxInfo->nConstraint; i++, p++){",
          "368:     if( p->usable==0 ) continue;",
          "369:     if( p->op==SQLITE_INDEX_CONSTRAINT_EQ && p->iColumn==iBaseCol+1 ){",
          "370:       rc = SQLITE_OK;",
          "371:       pIdxInfo->aConstraintUsage[i].omit = 1;",
          "372:       pIdxInfo->aConstraintUsage[i].argvIndex = 1;",
          "373:     }",
          "374:     if( p->op==SQLITE_INDEX_CONSTRAINT_ISNULL && p->iColumn==iBaseCol ){",
          "375:       pIdxInfo->aConstraintUsage[i].omit = 1;",
          "376:       pIdxInfo->idxNum = 1;",
          "377:     }",
          "378:   }",
          "379:   return rc;",
          "380: }",
          "386: static sqlite3_module bytecodevtabModule = {",
          "411: };",
          "414: int sqlite3VdbeBytecodeVtabInit(sqlite3 *db){",
          "415:   int rc;",
          "416:   rc = sqlite3_create_module(db, \"bytecode\", &bytecodevtabModule, 0);",
          "417:   if( rc==SQLITE_OK ){",
          "418:     rc = sqlite3_create_module(db, \"tables_used\", &bytecodevtabModule, &db);",
          "419:   }",
          "420:   return rc;",
          "421: }",
          "",
          "---------------"
        ],
        "test/distinct.test||test/distinct.test": [
          "File: test/distinct.test -> test/distinct.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     set ret \"\"",
          "52:     db eval \"EXPLAIN [set sql]\" {",
          "53:       if {$opcode == \"OpenEphemeral\" || $opcode == \"SorterOpen\"} {",
          "56:           lappend ret hash",
          "57:         } else {",
          "58:           lappend ret btree",
          "",
          "[Removed Lines]",
          "54:         if {$p5 != \"08\" && $p5!=\"00\"} { error \"p5 = $p5\" }",
          "55:         if {$p5 == \"08\"} {",
          "",
          "[Added Lines]",
          "54:         if {$p5!=8 && $p5!=0} { error \"p5 = $p5\" }",
          "55:         if {$p5==8} {",
          "",
          "---------------"
        ],
        "tool/mksqlite3c.tcl||tool/mksqlite3c.tcl": [
          "File: tool/mksqlite3c.tcl -> tool/mksqlite3c.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "341:    vdbe.c",
          "342:    vdbeblob.c",
          "343:    vdbesort.c",
          "344:    memjournal.c",
          "346:    walker.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344:    vdbevtab.c",
          "",
          "---------------"
        ]
      }
    }
  ]
}