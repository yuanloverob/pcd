{
  "cve_id": "CVE-2015-8838",
  "cve_desc": "ext/mysqlnd/mysqlnd.c in PHP before 5.4.43, 5.5.x before 5.5.27, and 5.6.x before 5.6.11 uses a client SSL option to mean that SSL is optional, which allows man-in-the-middle attackers to spoof servers via a cleartext-downgrade attack, a related issue to CVE-2015-3152.",
  "repo": "php/php-src",
  "patch_hash": "97aa752fee61fccdec361279adbfb17a3c60f3f4",
  "patch_info": {
    "commit_hash": "97aa752fee61fccdec361279adbfb17a3c60f3f4",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/97aa752fee61fccdec361279adbfb17a3c60f3f4",
    "files": [
      "ext/mysqlnd/mysqlnd.c"
    ],
    "message": "Fix bug #69669 (mysqlnd is vulnerable to BACKRONYM)",
    "before_after_code_files": [
      "ext/mysqlnd/mysqlnd.c||ext/mysqlnd/mysqlnd.c"
    ]
  },
  "patch_diff": {
    "ext/mysqlnd/mysqlnd.c||ext/mysqlnd/mysqlnd.c": [
      "File: ext/mysqlnd/mysqlnd.c -> ext/mysqlnd/mysqlnd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "446:  }",
      "448: #ifdef MYSQLND_SSL_SUPPORTED",
      "462:   }",
      "463:  }",
      "464: #endif",
      "465:  ret = PASS;",
      "466: end:",
      "467:  PACKET_FREE(auth_packet);",
      "468:  DBG_RETURN(ret);",
      "469: }",
      "",
      "[Removed Lines]",
      "449:  if ((greet_packet->server_capabilities & CLIENT_SSL) && (mysql_flags & CLIENT_SSL)) {",
      "450:   zend_bool verify = mysql_flags & CLIENT_SSL_VERIFY_SERVER_CERT? TRUE:FALSE;",
      "451:   DBG_INF(\"Switching to SSL\");",
      "452:   if (!PACKET_WRITE(auth_packet, conn)) {",
      "453:    CONN_SET_STATE(conn, CONN_QUIT_SENT);",
      "454:    SET_CLIENT_ERROR(*conn->error_info, CR_SERVER_GONE_ERROR, UNKNOWN_SQLSTATE, mysqlnd_server_gone);",
      "455:    goto end;",
      "456:   }",
      "458:   conn->net->m.set_client_option(conn->net, MYSQL_OPT_SSL_VERIFY_SERVER_CERT, (const char *) &verify TSRMLS_CC);",
      "460:   if (FAIL == conn->net->m.enable_ssl(conn->net TSRMLS_CC)) {",
      "461:    goto end;",
      "",
      "[Added Lines]",
      "449:  if (mysql_flags & CLIENT_SSL) {",
      "450:   zend_bool server_has_ssl = (greet_packet->server_capabilities & CLIENT_SSL)? TRUE:FALSE;",
      "451:   if (server_has_ssl == FALSE) {",
      "452:    goto close_conn;",
      "453:   } else {",
      "454:    zend_bool verify = mysql_flags & CLIENT_SSL_VERIFY_SERVER_CERT? TRUE:FALSE;",
      "455:    DBG_INF(\"Switching to SSL\");",
      "456:    if (!PACKET_WRITE(auth_packet, conn)) {",
      "457:     goto close_conn;",
      "458:    }",
      "460:    conn->net->m.set_client_option(conn->net, MYSQL_OPT_SSL_VERIFY_SERVER_CERT, (const char *) &verify TSRMLS_CC);",
      "462:    if (FAIL == conn->net->m.enable_ssl(conn->net TSRMLS_CC)) {",
      "463:     goto end;",
      "464:    }",
      "467: #else",
      "468:  auth_packet->client_flags &= ~CLIENT_SSL;",
      "469:  if (!PACKET_WRITE(auth_packet, conn)) {",
      "470:   goto close_conn;",
      "471:  }",
      "478: close_conn:",
      "479:  CONN_SET_STATE(conn, CONN_QUIT_SENT);",
      "480:  conn->m->send_close(conn TSRMLS_CC);",
      "481:  SET_CLIENT_ERROR(*conn->error_info, CR_SERVER_GONE_ERROR, UNKNOWN_SQLSTATE, mysqlnd_server_gone);",
      "482:  PACKET_FREE(auth_packet);",
      "483:  DBG_RETURN(ret);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1442: mysqlnd_old_escape_string(char * newstr, const char * escapestr, size_t escapestr_len TSRMLS_DC)",
      "1443: {",
      "1444:  DBG_ENTER(\"mysqlnd_old_escape_string\");",
      "",
      "[Removed Lines]",
      "1441: PHPAPI ulong",
      "",
      "[Added Lines]",
      "1456: PHPAPI ulong",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1725:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
      "1726:  }",
      "1728: }",
      "",
      "[Removed Lines]",
      "1727:  DBG_RETURN(ret);",
      "",
      "[Added Lines]",
      "1742:  DBG_RETURN(ret);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2244: end:",
      "2245:  if (TRUE == local_tx_started) {",
      "2247:  }",
      "2248:  DBG_INF(ret == PASS? \"PASS\":\"FAIL\");",
      "2249:  DBG_RETURN(ret);",
      "",
      "[Removed Lines]",
      "2246:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
      "",
      "[Added Lines]",
      "2261:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2401:   default:",
      "2402:    ret = FAIL;",
      "2403:  }",
      "2405:  DBG_RETURN(ret);",
      "2406: oom:",
      "2407:  SET_OOM_ERROR(*conn->error_info);",
      "2409: end:",
      "2410:  DBG_RETURN(FAIL);",
      "2411: }",
      "",
      "[Removed Lines]",
      "2404:  conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
      "2408:  conn->m->local_tx_end(conn, this_func, FAIL TSRMLS_CC);",
      "",
      "[Added Lines]",
      "2419:  conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
      "2423:  conn->m->local_tx_end(conn, this_func, FAIL TSRMLS_CC);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2446:    conn->current_result = NULL;",
      "2447:   } while (0);",
      "2450:  }",
      "2452:  DBG_RETURN(result);",
      "",
      "[Removed Lines]",
      "2449:   conn->m->local_tx_end(conn, this_func, result == NULL? FAIL:PASS TSRMLS_CC);",
      "",
      "[Added Lines]",
      "2464:   conn->m->local_tx_end(conn, this_func, result == NULL? FAIL:PASS TSRMLS_CC);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2486:    conn->current_result = NULL;",
      "2487:   } while (0);",
      "2490:  }",
      "2491:  DBG_RETURN(result);",
      "2492: }",
      "",
      "[Removed Lines]",
      "2489:   conn->m->local_tx_end(conn, this_func, result == NULL? FAIL:PASS TSRMLS_CC);",
      "",
      "[Added Lines]",
      "2504:   conn->m->local_tx_end(conn, this_func, result == NULL? FAIL:PASS TSRMLS_CC);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2516:  if (PASS == conn->m->local_tx_start(conn, this_func TSRMLS_CC)) {",
      "2517:   ret = conn->m->query(conn, (mode) ? \"SET AUTOCOMMIT=1\":\"SET AUTOCOMMIT=0\", sizeof(\"SET AUTOCOMMIT=1\") - 1 TSRMLS_CC);",
      "2519:  }",
      "2521:  DBG_RETURN(ret);",
      "",
      "[Removed Lines]",
      "2518:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
      "",
      "[Added Lines]",
      "2533:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2534:  if (PASS == conn->m->local_tx_start(conn, this_func TSRMLS_CC)) {",
      "2535:   ret = conn->m->query(conn, \"COMMIT\", sizeof(\"COMMIT\") - 1 TSRMLS_CC);",
      "2537:  }",
      "2539:  DBG_RETURN(ret);",
      "",
      "[Removed Lines]",
      "2536:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
      "",
      "[Added Lines]",
      "2551:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2552:  if (PASS == conn->m->local_tx_start(conn, this_func TSRMLS_CC)) {",
      "2553:   ret = conn->m->query(conn, \"ROLLBACK\", sizeof(\"ROLLBACK\") - 1 TSRMLS_CC);",
      "2555:  }",
      "2557:  DBG_RETURN(ret);",
      "",
      "[Removed Lines]",
      "2554:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
      "",
      "[Added Lines]",
      "2569:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d8aa5675ad2ead0469c15fad167ecbdd60051716",
      "candidate_info": {
        "commit_hash": "d8aa5675ad2ead0469c15fad167ecbdd60051716",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/d8aa5675ad2ead0469c15fad167ecbdd60051716",
        "files": [
          "ext/mysqlnd/mysqlnd.c"
        ],
        "message": "Fix bug #69669 (mysqlnd is vulnerable to BACKRONYM)",
        "before_after_code_files": [
          "ext/mysqlnd/mysqlnd.c||ext/mysqlnd/mysqlnd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "ext/mysqlnd/mysqlnd.c||ext/mysqlnd/mysqlnd.c"
          ],
          "candidate": [
            "ext/mysqlnd/mysqlnd.c||ext/mysqlnd/mysqlnd.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/mysqlnd/mysqlnd.c||ext/mysqlnd/mysqlnd.c": [
          "File: ext/mysqlnd/mysqlnd.c -> ext/mysqlnd/mysqlnd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "487:  }",
          "489: #ifdef MYSQLND_SSL_SUPPORTED",
          "504:   }",
          "505:  }",
          "506: #endif",
          "507:  ret = PASS;",
          "508: end:",
          "509:  PACKET_FREE(auth_packet);",
          "510:  DBG_RETURN(ret);",
          "511: }",
          "",
          "[Removed Lines]",
          "490:  if ((greet_packet->server_capabilities & CLIENT_SSL) && (mysql_flags & CLIENT_SSL)) {",
          "491:   zend_bool verify = mysql_flags & CLIENT_SSL_VERIFY_SERVER_CERT? TRUE:FALSE;",
          "492:   DBG_INF(\"Switching to SSL\");",
          "493:   if (!PACKET_WRITE(auth_packet, conn)) {",
          "494:    CONN_SET_STATE(conn, CONN_QUIT_SENT);",
          "495:    conn->m->send_close(conn);",
          "496:    SET_CLIENT_ERROR(*conn->error_info, CR_SERVER_GONE_ERROR, UNKNOWN_SQLSTATE, mysqlnd_server_gone);",
          "497:    goto end;",
          "498:   }",
          "500:   conn->net->data->m.set_client_option(conn->net, MYSQL_OPT_SSL_VERIFY_SERVER_CERT, (const char *) &verify);",
          "502:   if (FAIL == conn->net->data->m.enable_ssl(conn->net)) {",
          "503:    goto end;",
          "",
          "[Added Lines]",
          "490:  if (mysql_flags & CLIENT_SSL) {",
          "491:   zend_bool server_has_ssl = (greet_packet->server_capabilities & CLIENT_SSL)? TRUE:FALSE;",
          "492:   if (server_has_ssl == FALSE) {",
          "493:    goto close_conn;",
          "494:   } else {",
          "495:    zend_bool verify = mysql_flags & CLIENT_SSL_VERIFY_SERVER_CERT? TRUE:FALSE;",
          "496:    DBG_INF(\"Switching to SSL\");",
          "497:    if (!PACKET_WRITE(auth_packet, conn)) {",
          "498:     goto close_conn;",
          "499:    }",
          "501:    conn->net->data->m.set_client_option(conn->net, MYSQL_OPT_SSL_VERIFY_SERVER_CERT, (const char *) &verify);",
          "503:    if (FAIL == conn->net->data->m.enable_ssl(conn->net)) {",
          "504:     goto end;",
          "505:    }",
          "508: #else",
          "509:  auth_packet->client_flags &= ~CLIENT_SSL;",
          "510:  if (!PACKET_WRITE(auth_packet, conn)) {",
          "511:   goto close_conn;",
          "512:  }",
          "519: close_conn:",
          "520:  CONN_SET_STATE(conn, CONN_QUIT_SENT);",
          "521:  conn->m->send_close(conn TSRMLS_CC);",
          "522:  SET_CLIENT_ERROR(*conn->error_info, CR_SERVER_GONE_ERROR, UNKNOWN_SQLSTATE, mysqlnd_server_gone);",
          "523:  PACKET_FREE(auth_packet);",
          "524:  DBG_RETURN(ret);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a46bae2df257ec9bbc601204c73a8f7b103edee1",
      "candidate_info": {
        "commit_hash": "a46bae2df257ec9bbc601204c73a8f7b103edee1",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/a46bae2df257ec9bbc601204c73a8f7b103edee1",
        "files": [
          "ext/mysqlnd/mysqlnd.c"
        ],
        "message": "Fix bug #69669 (mysqlnd is vulnerable to BACKRONYM)",
        "before_after_code_files": [
          "ext/mysqlnd/mysqlnd.c||ext/mysqlnd/mysqlnd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "ext/mysqlnd/mysqlnd.c||ext/mysqlnd/mysqlnd.c"
          ],
          "candidate": [
            "ext/mysqlnd/mysqlnd.c||ext/mysqlnd/mysqlnd.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/mysqlnd/mysqlnd.c||ext/mysqlnd/mysqlnd.c": [
          "File: ext/mysqlnd/mysqlnd.c -> ext/mysqlnd/mysqlnd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "446:  }",
          "448: #ifdef MYSQLND_SSL_SUPPORTED",
          "462:   }",
          "463:  }",
          "464: #endif",
          "465:  ret = PASS;",
          "466: end:",
          "467:  PACKET_FREE(auth_packet);",
          "468:  DBG_RETURN(ret);",
          "469: }",
          "",
          "[Removed Lines]",
          "449:  if ((greet_packet->server_capabilities & CLIENT_SSL) && (mysql_flags & CLIENT_SSL)) {",
          "450:   zend_bool verify = mysql_flags & CLIENT_SSL_VERIFY_SERVER_CERT? TRUE:FALSE;",
          "451:   DBG_INF(\"Switching to SSL\");",
          "452:   if (!PACKET_WRITE(auth_packet, conn)) {",
          "453:    CONN_SET_STATE(conn, CONN_QUIT_SENT);",
          "454:    SET_CLIENT_ERROR(*conn->error_info, CR_SERVER_GONE_ERROR, UNKNOWN_SQLSTATE, mysqlnd_server_gone);",
          "455:    goto end;",
          "456:   }",
          "458:   conn->net->m.set_client_option(conn->net, MYSQL_OPT_SSL_VERIFY_SERVER_CERT, (const char *) &verify TSRMLS_CC);",
          "460:   if (FAIL == conn->net->m.enable_ssl(conn->net TSRMLS_CC)) {",
          "461:    goto end;",
          "",
          "[Added Lines]",
          "449:  if (mysql_flags & CLIENT_SSL) {",
          "450:   zend_bool server_has_ssl = (greet_packet->server_capabilities & CLIENT_SSL)? TRUE:FALSE;",
          "451:   if (server_has_ssl == FALSE) {",
          "452:    goto close_conn;",
          "453:   } else {",
          "454:    zend_bool verify = mysql_flags & CLIENT_SSL_VERIFY_SERVER_CERT? TRUE:FALSE;",
          "455:    DBG_INF(\"Switching to SSL\");",
          "456:    if (!PACKET_WRITE(auth_packet, conn)) {",
          "457:     CONN_SET_STATE(conn, CONN_QUIT_SENT);",
          "458:     SET_CLIENT_ERROR(*conn->error_info, CR_SERVER_GONE_ERROR, UNKNOWN_SQLSTATE, mysqlnd_server_gone);",
          "459:     goto end;",
          "460:    }",
          "462:    conn->net->m.set_client_option(conn->net, MYSQL_OPT_SSL_VERIFY_SERVER_CERT, (const char *) &verify TSRMLS_CC);",
          "464:    if (FAIL == conn->net->m.enable_ssl(conn->net TSRMLS_CC)) {",
          "465:     goto end;",
          "466:    }",
          "469: #else",
          "470:  auth_packet->client_flags &= ~CLIENT_SSL;",
          "471:  if (!PACKET_WRITE(auth_packet, conn)) {",
          "472:   goto close_conn;",
          "473:  }",
          "480: close_conn:",
          "481:  CONN_SET_STATE(conn, CONN_QUIT_SENT);",
          "482:  conn->m->send_close(conn);",
          "483:  SET_CLIENT_ERROR(*conn->error_info, CR_SERVER_GONE_ERROR, UNKNOWN_SQLSTATE, mysqlnd_server_gone);",
          "484:  PACKET_FREE(auth_packet);",
          "485:  DBG_RETURN(ret);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1442: mysqlnd_old_escape_string(char * newstr, const char * escapestr, size_t escapestr_len TSRMLS_DC)",
          "1443: {",
          "1444:  DBG_ENTER(\"mysqlnd_old_escape_string\");",
          "",
          "[Removed Lines]",
          "1441: PHPAPI ulong",
          "",
          "[Added Lines]",
          "1458: PHPAPI ulong",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1725:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "1726:  }",
          "1728: }",
          "",
          "[Removed Lines]",
          "1727:  DBG_RETURN(ret);",
          "",
          "[Added Lines]",
          "1744:  DBG_RETURN(ret);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2244: end:",
          "2245:  if (TRUE == local_tx_started) {",
          "2247:  }",
          "2248:  DBG_INF(ret == PASS? \"PASS\":\"FAIL\");",
          "2249:  DBG_RETURN(ret);",
          "",
          "[Removed Lines]",
          "2246:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2263:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2401:   default:",
          "2402:    ret = FAIL;",
          "2403:  }",
          "2405:  DBG_RETURN(ret);",
          "2406: oom:",
          "2407:  SET_OOM_ERROR(*conn->error_info);",
          "2409: end:",
          "2410:  DBG_RETURN(FAIL);",
          "2411: }",
          "",
          "[Removed Lines]",
          "2404:  conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "2408:  conn->m->local_tx_end(conn, this_func, FAIL TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2421:  conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "2425:  conn->m->local_tx_end(conn, this_func, FAIL TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2446:    conn->current_result = NULL;",
          "2447:   } while (0);",
          "2450:  }",
          "2452:  DBG_RETURN(result);",
          "",
          "[Removed Lines]",
          "2449:   conn->m->local_tx_end(conn, this_func, result == NULL? FAIL:PASS TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2466:   conn->m->local_tx_end(conn, this_func, result == NULL? FAIL:PASS TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2486:    conn->current_result = NULL;",
          "2487:   } while (0);",
          "2490:  }",
          "2491:  DBG_RETURN(result);",
          "2492: }",
          "",
          "[Removed Lines]",
          "2489:   conn->m->local_tx_end(conn, this_func, result == NULL? FAIL:PASS TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2506:   conn->m->local_tx_end(conn, this_func, result == NULL? FAIL:PASS TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2516:  if (PASS == conn->m->local_tx_start(conn, this_func TSRMLS_CC)) {",
          "2517:   ret = conn->m->query(conn, (mode) ? \"SET AUTOCOMMIT=1\":\"SET AUTOCOMMIT=0\", sizeof(\"SET AUTOCOMMIT=1\") - 1 TSRMLS_CC);",
          "2519:  }",
          "2521:  DBG_RETURN(ret);",
          "",
          "[Removed Lines]",
          "2518:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2535:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2534:  if (PASS == conn->m->local_tx_start(conn, this_func TSRMLS_CC)) {",
          "2535:   ret = conn->m->query(conn, \"COMMIT\", sizeof(\"COMMIT\") - 1 TSRMLS_CC);",
          "2537:  }",
          "2539:  DBG_RETURN(ret);",
          "",
          "[Removed Lines]",
          "2536:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2553:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2552:  if (PASS == conn->m->local_tx_start(conn, this_func TSRMLS_CC)) {",
          "2553:   ret = conn->m->query(conn, \"ROLLBACK\", sizeof(\"ROLLBACK\") - 1 TSRMLS_CC);",
          "2555:  }",
          "2557:  DBG_RETURN(ret);",
          "",
          "[Removed Lines]",
          "2554:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2571:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d2f147d80bd02d4d1ccaa0fa530d9d4846b3c75",
      "candidate_info": {
        "commit_hash": "0d2f147d80bd02d4d1ccaa0fa530d9d4846b3c75",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/0d2f147d80bd02d4d1ccaa0fa530d9d4846b3c75",
        "files": [
          "ext/mysqlnd/mysqlnd.c"
        ],
        "message": "Fix bug #69669 (mysqlnd is vulnerable to BACKRONYM)",
        "before_after_code_files": [
          "ext/mysqlnd/mysqlnd.c||ext/mysqlnd/mysqlnd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "ext/mysqlnd/mysqlnd.c||ext/mysqlnd/mysqlnd.c"
          ],
          "candidate": [
            "ext/mysqlnd/mysqlnd.c||ext/mysqlnd/mysqlnd.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/mysqlnd/mysqlnd.c||ext/mysqlnd/mysqlnd.c": [
          "File: ext/mysqlnd/mysqlnd.c -> ext/mysqlnd/mysqlnd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "446:  }",
          "448: #ifdef MYSQLND_SSL_SUPPORTED",
          "462:   }",
          "463:  }",
          "464: #endif",
          "465:  ret = PASS;",
          "466: end:",
          "467:  PACKET_FREE(auth_packet);",
          "468:  DBG_RETURN(ret);",
          "469: }",
          "",
          "[Removed Lines]",
          "449:  if ((greet_packet->server_capabilities & CLIENT_SSL) && (mysql_flags & CLIENT_SSL)) {",
          "450:   zend_bool verify = mysql_flags & CLIENT_SSL_VERIFY_SERVER_CERT? TRUE:FALSE;",
          "451:   DBG_INF(\"Switching to SSL\");",
          "452:   if (!PACKET_WRITE(auth_packet, conn)) {",
          "453:    CONN_SET_STATE(conn, CONN_QUIT_SENT);",
          "454:    SET_CLIENT_ERROR(*conn->error_info, CR_SERVER_GONE_ERROR, UNKNOWN_SQLSTATE, mysqlnd_server_gone);",
          "455:    goto end;",
          "456:   }",
          "458:   conn->net->m.set_client_option(conn->net, MYSQL_OPT_SSL_VERIFY_SERVER_CERT, (const char *) &verify TSRMLS_CC);",
          "460:   if (FAIL == conn->net->m.enable_ssl(conn->net TSRMLS_CC)) {",
          "461:    goto end;",
          "",
          "[Added Lines]",
          "449:  if (mysql_flags & CLIENT_SSL) {",
          "450:   zend_bool server_has_ssl = (greet_packet->server_capabilities & CLIENT_SSL)? TRUE:FALSE;",
          "451:   if (server_has_ssl == FALSE) {",
          "452:    goto close_conn;",
          "453:   } else {",
          "454:    zend_bool verify = mysql_flags & CLIENT_SSL_VERIFY_SERVER_CERT? TRUE:FALSE;",
          "455:    DBG_INF(\"Switching to SSL\");",
          "456:    if (!PACKET_WRITE(auth_packet, conn)) {",
          "457:     goto close_conn;",
          "458:    }",
          "460:    conn->net->m.set_client_option(conn->net, MYSQL_OPT_SSL_VERIFY_SERVER_CERT, (const char *) &verify TSRMLS_CC);",
          "462:    if (FAIL == conn->net->m.enable_ssl(conn->net TSRMLS_CC)) {",
          "463:     goto end;",
          "464:    }",
          "467: #else",
          "468:  auth_packet->client_flags &= ~CLIENT_SSL;",
          "469:  if (!PACKET_WRITE(auth_packet, conn)) {",
          "470:   goto close_conn;",
          "471:  }",
          "478: close_conn:",
          "479:  CONN_SET_STATE(conn, CONN_QUIT_SENT);",
          "480:  conn->m->send_close(conn TSRMLS_CC);",
          "481:  SET_CLIENT_ERROR(*conn->error_info, CR_SERVER_GONE_ERROR, UNKNOWN_SQLSTATE, mysqlnd_server_gone);",
          "482:  PACKET_FREE(auth_packet);",
          "483:  DBG_RETURN(ret);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1442: mysqlnd_old_escape_string(char * newstr, const char * escapestr, size_t escapestr_len TSRMLS_DC)",
          "1443: {",
          "1444:  DBG_ENTER(\"mysqlnd_old_escape_string\");",
          "",
          "[Removed Lines]",
          "1441: PHPAPI ulong",
          "",
          "[Added Lines]",
          "1456: PHPAPI ulong",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1725:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "1726:  }",
          "1728: }",
          "",
          "[Removed Lines]",
          "1727:  DBG_RETURN(ret);",
          "",
          "[Added Lines]",
          "1742:  DBG_RETURN(ret);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2244: end:",
          "2245:  if (TRUE == local_tx_started) {",
          "2247:  }",
          "2248:  DBG_INF(ret == PASS? \"PASS\":\"FAIL\");",
          "2249:  DBG_RETURN(ret);",
          "",
          "[Removed Lines]",
          "2246:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2261:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2401:   default:",
          "2402:    ret = FAIL;",
          "2403:  }",
          "2405:  DBG_RETURN(ret);",
          "2406: oom:",
          "2407:  SET_OOM_ERROR(*conn->error_info);",
          "2409: end:",
          "2410:  DBG_RETURN(FAIL);",
          "2411: }",
          "",
          "[Removed Lines]",
          "2404:  conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "2408:  conn->m->local_tx_end(conn, this_func, FAIL TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2419:  conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "2423:  conn->m->local_tx_end(conn, this_func, FAIL TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2446:    conn->current_result = NULL;",
          "2447:   } while (0);",
          "2450:  }",
          "2452:  DBG_RETURN(result);",
          "",
          "[Removed Lines]",
          "2449:   conn->m->local_tx_end(conn, this_func, result == NULL? FAIL:PASS TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2464:   conn->m->local_tx_end(conn, this_func, result == NULL? FAIL:PASS TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2486:    conn->current_result = NULL;",
          "2487:   } while (0);",
          "2490:  }",
          "2491:  DBG_RETURN(result);",
          "2492: }",
          "",
          "[Removed Lines]",
          "2489:   conn->m->local_tx_end(conn, this_func, result == NULL? FAIL:PASS TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2504:   conn->m->local_tx_end(conn, this_func, result == NULL? FAIL:PASS TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2516:  if (PASS == conn->m->local_tx_start(conn, this_func TSRMLS_CC)) {",
          "2517:   ret = conn->m->query(conn, (mode) ? \"SET AUTOCOMMIT=1\":\"SET AUTOCOMMIT=0\", sizeof(\"SET AUTOCOMMIT=1\") - 1 TSRMLS_CC);",
          "2519:  }",
          "2521:  DBG_RETURN(ret);",
          "",
          "[Removed Lines]",
          "2518:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2533:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2534:  if (PASS == conn->m->local_tx_start(conn, this_func TSRMLS_CC)) {",
          "2535:   ret = conn->m->query(conn, \"COMMIT\", sizeof(\"COMMIT\") - 1 TSRMLS_CC);",
          "2537:  }",
          "2539:  DBG_RETURN(ret);",
          "",
          "[Removed Lines]",
          "2536:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2551:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2552:  if (PASS == conn->m->local_tx_start(conn, this_func TSRMLS_CC)) {",
          "2553:   ret = conn->m->query(conn, \"ROLLBACK\", sizeof(\"ROLLBACK\") - 1 TSRMLS_CC);",
          "2555:  }",
          "2557:  DBG_RETURN(ret);",
          "",
          "[Removed Lines]",
          "2554:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2569:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "",
          "---------------"
        ]
      }
    }
  ]
}