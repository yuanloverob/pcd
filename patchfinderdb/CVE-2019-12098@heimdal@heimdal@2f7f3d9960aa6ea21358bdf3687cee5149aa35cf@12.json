{
  "cve_id": "CVE-2019-12098",
  "cve_desc": "In the client side of Heimdal before 7.6.0, failure to verify anonymous PKINIT PA-PKINIT-KX key exchange permits a man-in-the-middle attack. This issue is in krb5_init_creds_step in lib/krb5/init_creds_pw.c.",
  "repo": "heimdal/heimdal",
  "patch_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
  "patch_info": {
    "commit_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "repo": "heimdal/heimdal",
    "commit_url": "https://github.com/heimdal/heimdal/commit/2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "files": [
      "lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c"
    ],
    "message": "CVE-2019-12098: krb5: always confirm PA-PKINIT-KX for anon PKINIT\n\nRFC8062 Section 7 requires verification of the PA-PKINIT-KX key excahnge\nwhen anonymous PKINIT is used.  Failure to do so can permit an active\nattacker to become a man-in-the-middle.\n\nIntroduced by a1ef548600c5bb51cf52a9a9ea12676506ede19f.  First tagged\nrelease Heimdal 1.4.0.\n\nCVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N (4.8)\n\nChange-Id: I6cc1c0c24985936468af08693839ac6c3edda133\nSigned-off-by: Jeffrey Altman <jaltman@auristor.com>\nApproved-by: Jeffrey Altman <jaltman@auritor.com>\n(cherry picked from commit 38c797e1ae9b9c8f99ae4aa2e73957679031fd2b)",
    "before_after_code_files": [
      "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
    ]
  },
  "patch_diff": {
    "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c": [
      "File: lib/krb5/init_creds_pw.c -> lib/krb5/init_creds_pw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2267:            &ctx->req_buffer,",
      "2268:            NULL,",
      "2269:            NULL);",
      "2270:      if (ret == 0)",
      "2271:   ret = copy_EncKDCRepPart(&rep.enc_part, &ctx->enc_part);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2270:      if (ret == 0 && ctx->pk_init_ctx) {",
      "2271:   PA_DATA *pa_pkinit_kx;",
      "2272:   int idx = 0;",
      "2274:   pa_pkinit_kx =",
      "2275:       krb5_find_padata(rep.kdc_rep.padata->val,",
      "2276:          rep.kdc_rep.padata->len,",
      "2277:          KRB5_PADATA_PKINIT_KX,",
      "2278:          &idx);",
      "2280:   ret = _krb5_pk_kx_confirm(context, ctx->pk_init_ctx,",
      "2281:        ctx->fast_state.reply_key,",
      "2282:        &ctx->cred.session,",
      "2283:        pa_pkinit_kx);",
      "2284:   if (ret)",
      "2285:       krb5_set_error_message(context, ret,",
      "2286:         N_(\"Failed to confirm PA-PKINIT-KX\", \"\"));",
      "2287:   else if (pa_pkinit_kx != NULL)",
      "2288:       ctx->ic_flags |= KRB5_INIT_CREDS_PKINIT_KX_VALID;",
      "2289:      }",
      "",
      "---------------"
    ],
    "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h": [
      "File: lib/krb5/krb5_locl.h -> lib/krb5/krb5_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "208: #define KRB5_INIT_CREDS_CANONICALIZE  1",
      "209: #define KRB5_INIT_CREDS_NO_C_CANON_CHECK 2",
      "210: #define KRB5_INIT_CREDS_NO_C_NO_EKU_CHECK 4",
      "211:     struct {",
      "212:         krb5_gic_process_last_req func;",
      "213:         void *ctx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "211: #define KRB5_INIT_CREDS_PKINIT_KX_VALID  32",
      "",
      "---------------"
    ],
    "lib/krb5/pkinit.c||lib/krb5/pkinit.c": [
      "File: lib/krb5/pkinit.c -> lib/krb5/pkinit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1220:     return ret;",
      "1221: }",
      "1223: static krb5_error_code",
      "1224: pk_rd_pa_reply_dh(krb5_context context,",
      "1225:     const heim_octet_string *indata,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1230: KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL",
      "1231: _krb5_pk_kx_confirm(krb5_context context,",
      "1232:       krb5_pk_init_ctx ctx,",
      "1233:       krb5_keyblock *reply_key,",
      "1234:       krb5_keyblock *session_key,",
      "1235:       PA_DATA *pa_pkinit_kx)",
      "1236: {",
      "1237:     krb5_error_code ret;",
      "1238:     EncryptedData ed;",
      "1239:     krb5_keyblock ck, sk_verify;",
      "1240:     krb5_crypto ck_crypto = NULL;",
      "1241:     krb5_crypto rk_crypto = NULL;",
      "1242:     size_t len;",
      "1243:     krb5_data data;",
      "1244:     krb5_data p1 = { sizeof(\"PKINIT\") - 1, \"PKINIT\" };",
      "1245:     krb5_data p2 = { sizeof(\"KEYEXCHANGE\") - 1, \"KEYEXCHANGE\" };",
      "1247:     heim_assert(ctx != NULL, \"PKINIT context is non-NULL\");",
      "1248:     heim_assert(reply_key != NULL, \"reply key is non-NULL\");",
      "1249:     heim_assert(session_key != NULL, \"session key is non-NULL\");",
      "1252:     if (pa_pkinit_kx == NULL)",
      "1253:  return ctx->anonymous ? KRB5_KDCREP_MODIFIED : 0;",
      "1255:     memset(&ed, 0, sizeof(ed));",
      "1256:     krb5_keyblock_zero(&ck);",
      "1257:     krb5_keyblock_zero(&sk_verify);",
      "1258:     krb5_data_zero(&data);",
      "1260:     ret = decode_EncryptedData(pa_pkinit_kx->padata_value.data,",
      "1261:           pa_pkinit_kx->padata_value.length,",
      "1262:           &ed, &len);",
      "1263:     if (ret)",
      "1264:  goto out;",
      "1266:     if (len != pa_pkinit_kx->padata_value.length) {",
      "1267:  ret = KRB5_KDCREP_MODIFIED;",
      "1268:  goto out;",
      "1269:     }",
      "1271:     ret = krb5_crypto_init(context, reply_key, 0, &rk_crypto);",
      "1272:     if (ret)",
      "1273:  goto out;",
      "1275:     ret = krb5_decrypt_EncryptedData(context, rk_crypto,",
      "1276:          KRB5_KU_PA_PKINIT_KX,",
      "1277:          &ed, &data);",
      "1278:     if (ret)",
      "1279:  goto out;",
      "1281:     ret = decode_EncryptionKey(data.data, data.length,",
      "1282:           &ck, &len);",
      "1283:     if (ret)",
      "1284:  goto out;",
      "1286:     ret = krb5_crypto_init(context, &ck, 0, &ck_crypto);",
      "1287:     if (ret)",
      "1288:  goto out;",
      "1290:     ret = krb5_crypto_fx_cf2(context, ck_crypto, rk_crypto,",
      "1291:         &p1, &p2, session_key->keytype,",
      "1292:         &sk_verify);",
      "1293:     if (ret)",
      "1294:  goto out;",
      "1296:     if (sk_verify.keytype != session_key->keytype ||",
      "1297:  krb5_data_ct_cmp(&sk_verify.keyvalue, &session_key->keyvalue) != 0) {",
      "1298:  ret = KRB5_KDCREP_MODIFIED;",
      "1299:  goto out;",
      "1300:     }",
      "1302: out:",
      "1303:     free_EncryptedData(&ed);",
      "1304:     krb5_free_keyblock_contents(context, &ck);",
      "1305:     krb5_free_keyblock_contents(context, &sk_verify);",
      "1306:     if (ck_crypto)",
      "1307:  krb5_crypto_destroy(context, ck_crypto);",
      "1308:     if (rk_crypto)",
      "1309:  krb5_crypto_destroy(context, rk_crypto);",
      "1310:     krb5_data_free(&data);",
      "1312:     return ret;",
      "1313: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b8bc1235a52272ff7dda570e5ffc924913816c63",
      "candidate_info": {
        "commit_hash": "b8bc1235a52272ff7dda570e5ffc924913816c63",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/b8bc1235a52272ff7dda570e5ffc924913816c63",
        "files": [
          "kadmin/kadmind.8"
        ],
        "message": "Fixes #532 - Note that all does not include get-keys\n\nUpdate the kadmind(8) man page to note that the \"all\" option for ACLs\ndoes not include the \"get-keys\" option.\n\n(cherry picked from commit 9de4da0dcc0a4a135e87c228b555500b2623c201)",
        "before_after_code_files": [
          "kadmin/kadmind.8||kadmin/kadmind.8"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kadmin/kadmind.8||kadmin/kadmind.8": [
          "File: kadmin/kadmind.8 -> kadmin/kadmind.8",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: .It",
          "110: get-keys",
          "111: .It",
          "113: .El",
          "114: .Pp",
          "115: And the optional",
          "",
          "[Removed Lines]",
          "112: all",
          "",
          "[Added Lines]",
          "112: all (everything except get-keys)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fdfa1f225eb843ca2a40f2da71292f4d11c60811",
      "candidate_info": {
        "commit_hash": "fdfa1f225eb843ca2a40f2da71292f4d11c60811",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/fdfa1f225eb843ca2a40f2da71292f4d11c60811",
        "files": [
          "lib/hcrypto/evp-pkcs11.c"
        ],
        "message": "hcrypto PKCS#11 backend: allow digest update with NULL (#378)\n\nIn the PKCS#11 backend, add an assertion check to p11_md_update()\nto validate that the data length is zero if the data is NULL.\n\n(cherry picked from commit 6a1bb953230a2095a9ef7b9f1e979cf519ac616b)",
        "before_after_code_files": [
          "lib/hcrypto/evp-pkcs11.c||lib/hcrypto/evp-pkcs11.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/hcrypto/evp-pkcs11.c||lib/hcrypto/evp-pkcs11.c": [
          "File: lib/hcrypto/evp-pkcs11.c -> lib/hcrypto/evp-pkcs11.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "389:     CK_RV rv;",
          "391:     assert(p11_module != NULL);",
          "393:     rv = p11_module->C_DigestUpdate(p11ctx->hSession,",
          "394:                                     data ? (CK_BYTE_PTR)data : (CK_BYTE_PTR)\"\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "392:     assert(data != NULL || length == 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef210453f8045607891ebcf7780b4167364e5453",
      "candidate_info": {
        "commit_hash": "ef210453f8045607891ebcf7780b4167364e5453",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/ef210453f8045607891ebcf7780b4167364e5453",
        "files": [
          "kdc/kerberos5.c",
          "lib/asn1/krb5.asn1",
          "lib/krb5/get_cred.c"
        ],
        "message": "krb5: rename constrained-delegatiom to cname-in-addl-tkt\n\nFor consistency with [MS-SFU] rename the constrained-delegation KDC option to\ncname-in-addl-tkt (client name in additional ticket).\n\n(cherry picked from commit cf940e15f4eac71d7b739bbb6672d7be9f9b98cb)",
        "before_after_code_files": [
          "kdc/kerberos5.c||kdc/kerberos5.c",
          "lib/asn1/krb5.asn1||lib/asn1/krb5.asn1",
          "lib/krb5/get_cred.c||lib/krb5/get_cred.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kdc/kerberos5.c||kdc/kerberos5.c": [
          "File: kdc/kerberos5.c -> kdc/kerberos5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2362:     version 11. Bit 14 is assigned to S4U2Proxy, but all S4U2Proxy",
          "2364:  return (b->kdc_options.request_anonymous ||",
          "2366: }",
          "",
          "[Removed Lines]",
          "2365:   (b->kdc_options.constrained_delegation && !b->additional_tickets));",
          "",
          "[Added Lines]",
          "2365:   (b->kdc_options.cname_in_addl_tkt && !b->additional_tickets));",
          "",
          "---------------"
        ],
        "lib/asn1/krb5.asn1||lib/asn1/krb5.asn1": [
          "File: lib/asn1/krb5.asn1 -> lib/asn1/krb5.asn1",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:  allow-postdate(5),",
          "356:  postdated(6),",
          "357:  renewable(8),",
          "359:  canonicalize(15),",
          "360:  request-anonymous(16),",
          "361:  disable-transited-check(26),",
          "",
          "[Removed Lines]",
          "358:  constrained-delegation(14), -- ms extension (aka cname-in-addl-tkt)",
          "",
          "[Added Lines]",
          "358:  cname-in-addl-tkt(14), -- ms extension",
          "",
          "---------------"
        ],
        "lib/krb5/get_cred.c||lib/krb5/get_cred.c": [
          "File: lib/krb5/get_cred.c -> lib/krb5/get_cred.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "558:  out_creds->times.endtime = in_creds->times.endtime;",
          "562:      eflags |= EXTRACT_TICKET_ALLOW_CNAME_MISMATCH;",
          "563:  if (flags.b.request_anonymous)",
          "564:      eflags |= EXTRACT_TICKET_MATCH_ANON;",
          "",
          "[Removed Lines]",
          "561:  if (flags.b.constrained_delegation || impersonate_principal)",
          "",
          "[Added Lines]",
          "561:  if (flags.b.cname_in_addl_tkt || impersonate_principal)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1035:  char *referral_realm;",
          "1039:      krb5_cc_clear_mcred(&mcreds);",
          "1040:      mcreds.server = referral.server;",
          "1041:      krb5_timeofday(context, &mcreds.times.endtime);",
          "",
          "[Removed Lines]",
          "1038:  if (impersonate_principal == NULL || flags.b.constrained_delegation) {",
          "",
          "[Added Lines]",
          "1038:  if (impersonate_principal == NULL || flags.b.cname_in_addl_tkt) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1588:     if (options & KRB5_GC_NO_TRANSIT_CHECK)",
          "1589:  flags.b.disable_transited_check = 1;",
          "1590:     if (options & KRB5_GC_CONSTRAINED_DELEGATION)",
          "1592:     if (options & KRB5_GC_ANONYMOUS)",
          "1593:  flags.b.request_anonymous = 1;",
          "",
          "[Removed Lines]",
          "1591:  flags.b.constrained_delegation = 1;",
          "",
          "[Added Lines]",
          "1591:  flags.b.cname_in_addl_tkt = 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c84781cd2525aaaad5285eb09c86c7f1b82ac7c",
      "candidate_info": {
        "commit_hash": "7c84781cd2525aaaad5285eb09c86c7f1b82ac7c",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/7c84781cd2525aaaad5285eb09c86c7f1b82ac7c",
        "files": [
          "kdc/krb5tgs.c"
        ],
        "message": "kdc: check for cname-in-addl-tkt flag in constrained delegation\n\nBefore accepting an additional ticket for use with constrained delegation,\nverify the cname-in-addl-tkt flag was set. If not, ignore the request.\n\n(cherry picked from commit 7381a280c82e29d7c56fad938175e70b7ef85a9f)",
        "before_after_code_files": [
          "kdc/krb5tgs.c||kdc/krb5tgs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kdc/krb5tgs.c||kdc/krb5tgs.c": [
          "File: kdc/krb5tgs.c -> kdc/krb5tgs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2172:     if (client != NULL",
          "2173:  && b->additional_tickets != NULL",
          "2174:  && b->additional_tickets->len != 0",
          "2175:  && b->kdc_options.enc_tkt_in_skey == 0)",
          "2176:     {",
          "2177:  int ad_signedpath = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2175:  && b->kdc_options.cname_in_addl_tkt",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f2943750b106b5f0131a39f167d45d35d44044c",
      "candidate_info": {
        "commit_hash": "9f2943750b106b5f0131a39f167d45d35d44044c",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/9f2943750b106b5f0131a39f167d45d35d44044c",
        "files": [
          "kdc/krb5tgs.c"
        ],
        "message": "CVE-2018-16860 Heimdal KDC: Reject PA-S4U2Self with unkeyed checksum\n\nS4U2Self is an extension to Kerberos used in Active Directory to allow\na service to request a kerberos ticket to itself from the Kerberos Key\nDistribution Center (KDC) for a non-Kerberos authenticated user\n(principal in Kerboros parlance). This is useful to allow internal\ncode paths to be standardized around Kerberos.\n\nS4U2Proxy (constrained-delegation) is an extension of this mechanism\nallowing this impersonation to a second service over the network. It\nallows a privileged server that obtained a S4U2Self ticket to itself\nto then assert the identity of that principal to a second service and\npresent itself as that principal to get services from the second\nservice.\n\nThere is a flaw in Samba's AD DC in the Heimdal KDC. When the Heimdal\nKDC checks the checksum that is placed on the S4U2Self packet by the\nserver to protect the requested principal against modification, it\ndoes not confirm that the checksum algorithm that protects the user\nname (principal) in the request is keyed.  This allows a\nman-in-the-middle attacker who can intercept the request to the KDC to\nmodify the packet by replacing the user name (principal) in the\nrequest with any desired user name (principal) that exists in the KDC\nand replace the checksum protecting that name with a CRC32 checksum\n(which requires no prior knowledge to compute).\n\nThis would allow a S4U2Self ticket requested on behalf of user name\n(principal) user@EXAMPLE.COM to any service to be changed to a\nS4U2Self ticket with a user name (principal) of\nAdministrator@EXAMPLE.COM. This ticket would then contain the PAC of\nthe modified user name (principal).\n\n==================\nCVSSv3 calculation\n==================\n\nCVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H (7.5)\n\n=========================\nWorkaround and Mitigation\n=========================\n\nIf server does not take privileged actions based on Kerberos tickets\nobtained by S4U2Self nor obtains Kerberos tickets via further\nS4U2Proxy requests then this issue cannot be exploited.\n\nNote that the path to an exploit is not generic, the KDC is not harmed\nby the malicious checksum, it is the client service requesting the\nticket being mislead, because it trusted the KDC to return the correct\nticket and PAC.\n\nIt is out of scope for Samba to describe all of the possible tool\nchains that might be vulnerable. Here are two examples of possible\nexploits in order to explain the issue more clearly.\n\n1). SFU2Self might be used by a web service authenticating an end user\nvia OAuth, Shibboleth, or other protocols to obtain a S4U2Self\nKerberos service ticket for use by any Kerberos service principal the\nweb service has a keytab for.  One example is acquiring an AFS token\nby requesting an afs/cell@REALM service ticket for a client via\nSFU2Self.  With this exploit an organization that deploys a KDC built\nfrom Heimdal (be it Heimdal directly or vendor versions such as found\nin Samba) is vulnerable to privilege escalation attacks.\n\n2). If a server authenticates users using X509 certificates, and then\nuses S4U2Self to obtain a Kerberos service ticket on behalf of the\nuser (principal) in order to authorize access to local resources, a\nman-in-the-middle attacker could allow a non-privilaged user to access\nprivilaged resources being protected by the server, or privilaged\nresources being protected by a second server, if the first server uses\nthe S4U2Proxy extension in order to get a new Kerberos service ticket\nto obtain access to the second server.\n\nIn both these scenarios under conditions allowing man-in-the-middle\nactive network protocol manipulation, a malicious user could\nauthenticate using the non-Kerborized credentials of an unprivileged\nuser, and then elevate its privileges by intercepting the packet from\nthe server to the KDC and changing the requested user name (principal).\n\nThe only Samba clients that use S4U2Self are:\n\n- the \"net ads kerberos pac dump\" (debugging) tool.\n\n- the CIFS proxy in the deprecated/developer-only NTVFS file\nserver. Note this code is not compiled or enabled by default.\n\nIn particular, winbindd does *not* use S4U2Self.\n\nFinally, MIT Kerberos and so therefore the experimental MIT KDC backend\nfor Samba AD is understood not to be impacted.\n\n===============\nFurther Reading\n===============\n\nThere is more detail on and a description of the protocols in\n\n[MS-SFU]: Kerberos Protocol Extensions: Service for User and Constrained\nDelegation Protocol\nhttps://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-sfu/\n\n=======\nCredits\n=======\n\nOriginally reported by Isaac Boukris and Andrew Bartlett of the Samba\nTeam and Catalyst.\n\nPatches provided by Isaac Boukris.\n\nAdvisory written by Andrew Bartlett of the Samba Team and Catalyst,\nwith contributions from Isaac Boukris, Jeffrey Altman and Jeremy\nAllison.\n\nBUG: https://bugzilla.samba.org/show_bug.cgi?id=13685\nChange-Id: I4ac69ebf0503eb999a7d497a2c30fe4d293a8cc8\nSigned-off-by: Isaac Boukris <iboukris@gmail.com>\nReviewed-by: Andrew Bartlett <abartlet@samba.org>\nSigned-off-by: Andrew Bartlett <abartlet@samba.org>\nReviewed-by: Jeffrey Altman <jaltman@auristor.com>\nSigned-off-by: Jeffrey Altman <jaltman@auristor.com>\n(cherry picked from commit c6257cc2c842c0faaeb4ef34e33890ee88c4cbba)",
        "before_after_code_files": [
          "kdc/krb5tgs.c||kdc/krb5tgs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041",
          "https://github.com/heimdal/heimdal/pull/556"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kdc/krb5tgs.c||kdc/krb5tgs.c": [
          "File: kdc/krb5tgs.c -> kdc/krb5tgs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2025:   goto out;",
          "2026:      }",
          "2028:      ret = _krb5_s4u2self_to_checksumdata(context, &self, &datack);",
          "2029:      if (ret)",
          "2030:   goto out;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2028:      if (!krb5_checksum_is_keyed(context, self.cksum.cksumtype)) {",
          "2029:   free_PA_S4U2Self(&self);",
          "2030:   kdc_log(context, config, 0, \"Reject PA-S4U2Self with unkeyed checksum\");",
          "2031:   ret = KRB5KRB_AP_ERR_INAPP_CKSUM;",
          "2032:   goto out;",
          "2033:      }",
          "",
          "---------------"
        ]
      }
    }
  ]
}