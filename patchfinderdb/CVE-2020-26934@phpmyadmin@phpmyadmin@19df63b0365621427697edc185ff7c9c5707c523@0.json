{
  "cve_id": "CVE-2020-26934",
  "cve_desc": "phpMyAdmin before 4.9.6 and 5.x before 5.0.3 allows XSS through the transformation feature via a crafted link.",
  "repo": "phpmyadmin/phpmyadmin",
  "patch_hash": "19df63b0365621427697edc185ff7c9c5707c523",
  "patch_info": {
    "commit_hash": "19df63b0365621427697edc185ff7c9c5707c523",
    "repo": "phpmyadmin/phpmyadmin",
    "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/19df63b0365621427697edc185ff7c9c5707c523",
    "files": [
      "libraries/classes/Display/Results.php",
      "libraries/classes/InsertEdit.php",
      "transformation_wrapper.php"
    ],
    "message": "Fix #314 - make sure where_clause is not modified\n\nSigned-off-by: William Desportes <williamdes@wdes.fr>",
    "before_after_code_files": [
      "libraries/classes/Display/Results.php||libraries/classes/Display/Results.php",
      "libraries/classes/InsertEdit.php||libraries/classes/InsertEdit.php",
      "transformation_wrapper.php||transformation_wrapper.php"
    ]
  },
  "patch_diff": {
    "libraries/classes/Display/Results.php||libraries/classes/Display/Results.php": [
      "File: libraries/classes/Display/Results.php -> libraries/classes/Display/Results.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "3001:             $_url_params = array(",
      "3002:                 'db'            => $this->__get('db'),",
      "3003:                 'table'         => $meta->orgtable,",
      "3004:                 'where_clause'  => $whereClauseMap[$row_no][$meta->orgtable],",
      "3005:                 'transform_key' => $meta->orgname",
      "3006:             );",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3004:                 'where_clause_sign' => Core::signSqlQuery($whereClauseMap[$row_no][$meta->orgtable]),",
      "",
      "---------------"
    ],
    "libraries/classes/InsertEdit.php||libraries/classes/InsertEdit.php": [
      "File: libraries/classes/InsertEdit.php -> libraries/classes/InsertEdit.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: use PhpMyAdmin\\Transformations;",
      "19: use PhpMyAdmin\\Url;",
      "20: use PhpMyAdmin\\Util;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: use PhpMyAdmin\\Core;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2480:             $_url_params = array(",
      "2481:                 'db'            => $db,",
      "2482:                 'table'         => $table,",
      "2483:                 'where_clause'  => $_POST['where_clause'],",
      "2484:                 'transform_key' => $column_name",
      "2485:             );",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2484:                 'where_clause_sign' => Core::signSqlQuery($_POST['where_clause']),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3275:                         'db'            => $db,",
      "3276:                         'table'         => $table,",
      "3277:                         'transform_key' => $column['Field'],",
      "3278:                         'where_clause'  => $where_clause",
      "3279:                     );",
      "3280:                     $transformation_options['wrapper_link']",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3280:                         'where_clause_sign' => Core::signSqlQuery($where_clause),",
      "",
      "---------------"
    ],
    "transformation_wrapper.php||transformation_wrapper.php": [
      "File: transformation_wrapper.php -> transformation_wrapper.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "64: $GLOBALS['dbi']->selectDb($db);",
      "65: if (isset($where_clause)) {",
      "66:     $result = $GLOBALS['dbi']->query(",
      "67:         'SELECT * FROM ' . PhpMyAdmin\\Util::backquote($table)",
      "68:         . ' WHERE ' . $where_clause . ';',",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67:     if (! Core::checkSqlQuerySignature($where_clause, isset($_GET['where_clause_sign']) ? $_GET['where_clause_sign'] : '')) {",
      "69:         Core::fatalError(__('There is an issue with your request.'));",
      "70:         exit;",
      "71:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "86b6fb5817d61660a80cb8b23b7eee4e95dd3a70",
      "candidate_info": {
        "commit_hash": "86b6fb5817d61660a80cb8b23b7eee4e95dd3a70",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/86b6fb5817d61660a80cb8b23b7eee4e95dd3a70",
        "files": [
          "libraries/classes/Display/Results.php",
          "libraries/classes/Html/Generator.php",
          "libraries/classes/ReplicationGui.php",
          "libraries/classes/Scripts.php",
          "libraries/classes/TwoFactor.php",
          "phpstan-baseline.neon",
          "psalm-baseline.xml"
        ],
        "message": "Rename variables to use the camel case format\n\nSigned-off-by: Maur\u00edcio Meneghini Fauth <mauricio@fauth.dev>",
        "before_after_code_files": [
          "libraries/classes/Display/Results.php||libraries/classes/Display/Results.php",
          "libraries/classes/Html/Generator.php||libraries/classes/Html/Generator.php",
          "libraries/classes/ReplicationGui.php||libraries/classes/ReplicationGui.php",
          "libraries/classes/Scripts.php||libraries/classes/Scripts.php",
          "libraries/classes/TwoFactor.php||libraries/classes/TwoFactor.php",
          "phpstan-baseline.neon||phpstan-baseline.neon"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libraries/classes/Display/Results.php||libraries/classes/Display/Results.php"
          ],
          "candidate": [
            "libraries/classes/Display/Results.php||libraries/classes/Display/Results.php"
          ]
        }
      },
      "candidate_diff": {
        "libraries/classes/Display/Results.php||libraries/classes/Display/Results.php": [
          "File: libraries/classes/Display/Results.php -> libraries/classes/Display/Results.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:     public $template;",
          "235:     {",
          "236:         global $dbi;",
          "",
          "[Removed Lines]",
          "234:     public function __construct($db, $table, $server, $goto, $sql_query)",
          "",
          "[Added Lines]",
          "234:     public function __construct($db, $table, $server, $goto, $sqlQuery)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "245:         $this->properties['table'] = $table;",
          "246:         $this->properties['server'] = $server;",
          "247:         $this->properties['goto'] = $goto;",
          "249:         $this->properties['unique_id'] = mt_rand();",
          "250:     }",
          "",
          "[Removed Lines]",
          "248:         $this->properties['sql_query'] = $sql_query;",
          "",
          "[Added Lines]",
          "248:         $this->properties['sql_query'] = $sqlQuery;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "257:     private function setDefaultTransformations()",
          "258:     {",
          "260:             'libraries/classes/Plugins/Transformations/Output/Text_Plain_Json.php',",
          "261:             Text_Plain_Json::class,",
          "262:             'Text_Plain',",
          "263:         ];",
          "265:             'libraries/classes/Plugins/Transformations/Output/Text_Plain_Sql.php',",
          "266:             Text_Plain_Sql::class,",
          "267:             'Text_Plain',",
          "268:         ];",
          "270:             'libraries/classes/Plugins/Transformations/Output/Text_Octetstream_Sql.php',",
          "271:             Text_Octetstream_Sql::class,",
          "272:             'Text_Octetstream',",
          "273:         ];",
          "275:             'libraries/classes/Plugins/Transformations/Text_Plain_Link.php',",
          "276:             Text_Plain_Link::class,",
          "277:             'Text_Plain',",
          "278:         ];",
          "279:         $this->transformationInfo = [",
          "280:             'information_schema' => [",
          "286:             ],",
          "287:             'mysql' => [",
          "288:                 'event' => [",
          "291:                 ],",
          "294:                 'help_topic' => [",
          "297:                 ],",
          "298:                 'proc' => [",
          "303:                 ],",
          "305:             ],",
          "306:         ];",
          "",
          "[Removed Lines]",
          "259:         $json_highlighting_data = [",
          "264:         $sql_highlighting_data = [",
          "269:         $blob_sql_highlighting_data = [",
          "274:         $link_data = [",
          "281:                 'events' => ['event_definition' => $sql_highlighting_data],",
          "282:                 'processlist' => ['info' => $sql_highlighting_data],",
          "283:                 'routines' => ['routine_definition' => $sql_highlighting_data],",
          "284:                 'triggers' => ['action_statement' => $sql_highlighting_data],",
          "285:                 'views' => ['view_definition' => $sql_highlighting_data],",
          "289:                     'body' => $blob_sql_highlighting_data,",
          "290:                     'body_utf8' => $blob_sql_highlighting_data,",
          "292:                 'general_log' => ['argument' => $sql_highlighting_data],",
          "293:                 'help_category' => ['url' => $link_data],",
          "295:                     'example' => $sql_highlighting_data,",
          "296:                     'url' => $link_data,",
          "299:                     'param_list' => $blob_sql_highlighting_data,",
          "300:                     'returns' => $blob_sql_highlighting_data,",
          "301:                     'body' => $blob_sql_highlighting_data,",
          "302:                     'body_utf8' => $blob_sql_highlighting_data,",
          "304:                 'slow_log' => ['sql_text' => $sql_highlighting_data],",
          "",
          "[Added Lines]",
          "259:         $jsonHighlightingData = [",
          "264:         $sqlHighlightingData = [",
          "269:         $blobSqlHighlightingData = [",
          "274:         $linkData = [",
          "281:                 'events' => ['event_definition' => $sqlHighlightingData],",
          "282:                 'processlist' => ['info' => $sqlHighlightingData],",
          "283:                 'routines' => ['routine_definition' => $sqlHighlightingData],",
          "284:                 'triggers' => ['action_statement' => $sqlHighlightingData],",
          "285:                 'views' => ['view_definition' => $sqlHighlightingData],",
          "289:                     'body' => $blobSqlHighlightingData,",
          "290:                     'body_utf8' => $blobSqlHighlightingData,",
          "292:                 'general_log' => ['argument' => $sqlHighlightingData],",
          "293:                 'help_category' => ['url' => $linkData],",
          "295:                     'example' => $sqlHighlightingData,",
          "296:                     'url' => $linkData,",
          "299:                     'param_list' => $blobSqlHighlightingData,",
          "300:                     'returns' => $blobSqlHighlightingData,",
          "301:                     'body' => $blobSqlHighlightingData,",
          "302:                     'body_utf8' => $blobSqlHighlightingData,",
          "304:                 'slow_log' => ['sql_text' => $sqlHighlightingData],",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "313:         $this->transformationInfo[$cfgRelation['db']] = [];",
          "314:         $relDb = &$this->transformationInfo[$cfgRelation['db']];",
          "315:         if (! empty($cfgRelation['history'])) {",
          "317:         }",
          "319:         if (! empty($cfgRelation['bookmark'])) {",
          "321:         }",
          "323:         if (! empty($cfgRelation['tracking'])) {",
          "324:             $relDb[$cfgRelation['tracking']] = [",
          "327:             ];",
          "328:         }",
          "330:         if (! empty($cfgRelation['favorite'])) {",
          "332:         }",
          "334:         if (! empty($cfgRelation['recent'])) {",
          "336:         }",
          "338:         if (! empty($cfgRelation['savedsearches'])) {",
          "340:         }",
          "342:         if (! empty($cfgRelation['designer_settings'])) {",
          "344:         }",
          "346:         if (! empty($cfgRelation['table_uiprefs'])) {",
          "348:         }",
          "350:         if (! empty($cfgRelation['userconfig'])) {",
          "352:         }",
          "354:         if (empty($cfgRelation['export_templates'])) {",
          "355:             return;",
          "356:         }",
          "359:     }",
          "386:     public function setProperties(",
          "402:         $editable,",
          "404:     ) {",
          "420:         $this->properties['editable'] = $editable;",
          "422:     }",
          "",
          "[Removed Lines]",
          "316:             $relDb[$cfgRelation['history']] = ['sqlquery' => $sql_highlighting_data];",
          "320:             $relDb[$cfgRelation['bookmark']] = ['query' => $sql_highlighting_data];",
          "325:                 'schema_sql' => $sql_highlighting_data,",
          "326:                 'data_sql' => $sql_highlighting_data,",
          "331:             $relDb[$cfgRelation['favorite']] = ['tables' => $json_highlighting_data];",
          "335:             $relDb[$cfgRelation['recent']] = ['tables' => $json_highlighting_data];",
          "339:             $relDb[$cfgRelation['savedsearches']] = ['search_data' => $json_highlighting_data];",
          "343:             $relDb[$cfgRelation['designer_settings']] = ['settings_data' => $json_highlighting_data];",
          "347:             $relDb[$cfgRelation['table_uiprefs']] = ['prefs' => $json_highlighting_data];",
          "351:             $relDb[$cfgRelation['userconfig']] = ['config_data' => $json_highlighting_data];",
          "358:         $relDb[$cfgRelation['export_templates']] = ['template_data' => $json_highlighting_data];",
          "387:         $unlim_num_rows,",
          "388:         array $fields_meta,",
          "389:         $is_count,",
          "390:         $is_export,",
          "391:         $is_func,",
          "392:         $is_analyse,",
          "393:         $num_rows,",
          "394:         $fields_cnt,",
          "395:         $querytime,",
          "396:         $text_dir,",
          "397:         $is_maint,",
          "398:         $is_explain,",
          "399:         $is_show,",
          "400:         $showtable,",
          "401:         $printview,",
          "403:         $is_browse_dist",
          "405:         $this->properties['unlim_num_rows'] = $unlim_num_rows;",
          "406:         $this->properties['fields_meta'] = $fields_meta;",
          "407:         $this->properties['is_count'] = $is_count;",
          "408:         $this->properties['is_export'] = $is_export;",
          "409:         $this->properties['is_func'] = $is_func;",
          "410:         $this->properties['is_analyse'] = $is_analyse;",
          "411:         $this->properties['num_rows'] = $num_rows;",
          "412:         $this->properties['fields_cnt'] = $fields_cnt;",
          "413:         $this->properties['querytime'] = $querytime;",
          "414:         $this->properties['text_dir'] = $text_dir;",
          "415:         $this->properties['is_maint'] = $is_maint;",
          "416:         $this->properties['is_explain'] = $is_explain;",
          "417:         $this->properties['is_show'] = $is_show;",
          "418:         $this->properties['showtable'] = $showtable;",
          "419:         $this->properties['printview'] = $printview;",
          "421:         $this->properties['is_browse_distinct'] = $is_browse_dist;",
          "",
          "[Added Lines]",
          "316:             $relDb[$cfgRelation['history']] = ['sqlquery' => $sqlHighlightingData];",
          "320:             $relDb[$cfgRelation['bookmark']] = ['query' => $sqlHighlightingData];",
          "325:                 'schema_sql' => $sqlHighlightingData,",
          "326:                 'data_sql' => $sqlHighlightingData,",
          "331:             $relDb[$cfgRelation['favorite']] = ['tables' => $jsonHighlightingData];",
          "335:             $relDb[$cfgRelation['recent']] = ['tables' => $jsonHighlightingData];",
          "339:             $relDb[$cfgRelation['savedsearches']] = ['search_data' => $jsonHighlightingData];",
          "343:             $relDb[$cfgRelation['designer_settings']] = ['settings_data' => $jsonHighlightingData];",
          "347:             $relDb[$cfgRelation['table_uiprefs']] = ['prefs' => $jsonHighlightingData];",
          "351:             $relDb[$cfgRelation['userconfig']] = ['config_data' => $jsonHighlightingData];",
          "358:         $relDb[$cfgRelation['export_templates']] = ['template_data' => $jsonHighlightingData];",
          "387:         $unlimNumRows,",
          "388:         array $fieldsMeta,",
          "389:         $isCount,",
          "390:         $isExport,",
          "391:         $isFunction,",
          "392:         $isAnalyse,",
          "393:         $numRows,",
          "394:         $fieldsCount,",
          "395:         $queryTime,",
          "396:         $textDirection,",
          "397:         $isMaintenance,",
          "398:         $isExplain,",
          "399:         $isShow,",
          "400:         $showTable,",
          "401:         $printView,",
          "403:         $isBrowseDistinct",
          "405:         $this->properties['unlim_num_rows'] = $unlimNumRows;",
          "406:         $this->properties['fields_meta'] = $fieldsMeta;",
          "407:         $this->properties['is_count'] = $isCount;",
          "408:         $this->properties['is_export'] = $isExport;",
          "409:         $this->properties['is_func'] = $isFunction;",
          "410:         $this->properties['is_analyse'] = $isAnalyse;",
          "411:         $this->properties['num_rows'] = $numRows;",
          "412:         $this->properties['fields_cnt'] = $fieldsCount;",
          "413:         $this->properties['querytime'] = $queryTime;",
          "414:         $this->properties['text_dir'] = $textDirection;",
          "415:         $this->properties['is_maint'] = $isMaintenance;",
          "416:         $this->properties['is_explain'] = $isExplain;",
          "417:         $this->properties['is_show'] = $isShow;",
          "418:         $this->properties['showtable'] = $showTable;",
          "419:         $this->properties['printview'] = $printView;",
          "421:         $this->properties['is_browse_distinct'] = $isBrowseDistinct;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "545:         $displayParts['text_btn']  = (string) '1';",
          "550:                 || ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE)",
          "551:                 || ($displayParts['sort_lnk'] != '0');",
          "554:             if (",
          "559:             ) {",
          "561:                 $displayParts['edit_lnk'] = self::NO_EDIT_OR_DELETE;",
          "",
          "[Removed Lines]",
          "543:         $fields_meta = $this->properties['fields_meta'];",
          "544:         $prev_table = '';",
          "546:         $number_of_columns = $this->properties['fields_cnt'];",
          "548:         for ($i = 0; $i < $number_of_columns; $i++) {",
          "549:             $is_link = ($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)",
          "555:                 $is_link",
          "556:                 && $prev_table != ''",
          "557:                 && $fields_meta[$i]->table != ''",
          "558:                 && $fields_meta[$i]->table != $prev_table",
          "",
          "[Added Lines]",
          "543:         $fieldsMeta = $this->properties['fields_meta'];",
          "544:         $previousTable = '';",
          "546:         $numberOfColumns = $this->properties['fields_cnt'];",
          "548:         for ($i = 0; $i < $numberOfColumns; $i++) {",
          "549:             $isLink = ($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)",
          "555:                 $isLink",
          "556:                 && $previousTable != ''",
          "557:                 && $fieldsMeta[$i]->table != ''",
          "558:                 && $fieldsMeta[$i]->table != $previousTable",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "574:             $displayParts['pview_lnk'] = (string) '1';",
          "576:                 continue;",
          "577:             }",
          "580:         }",
          "584:             $displayParts['edit_lnk'] = self::NO_EDIT_OR_DELETE;",
          "585:             $displayParts['del_lnk']  = self::NO_EDIT_OR_DELETE;",
          "",
          "[Removed Lines]",
          "575:             if ($fields_meta[$i]->table == '') {",
          "579:             $prev_table = $fields_meta[$i]->table;",
          "582:         if ($prev_table == '') { // no table for any of the columns",
          "",
          "[Added Lines]",
          "575:             if ($fieldsMeta[$i]->table == '') {",
          "579:             $previousTable = $fieldsMeta[$i]->table;",
          "582:         if ($previousTable == '') { // no table for any of the columns",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "610:     {",
          "611:         global $dbi;",
          "617:         $db = $this->properties['db'];",
          "618:         $table = $this->properties['table'];",
          "625:             $displayParts = $this->setDisplayPartsForPrintView($displayParts);",
          "626:         } elseif (",
          "627:             $this->properties['is_count'] || $this->properties['is_analyse']",
          "",
          "[Removed Lines]",
          "613:         $the_total = 0;",
          "619:         $unlim_num_rows = $this->properties['unlim_num_rows'];",
          "620:         $num_rows = $this->properties['num_rows'];",
          "621:         $printview = $this->properties['printview'];",
          "624:         if ($printview == '1') {",
          "",
          "[Added Lines]",
          "613:         $theTotal = 0;",
          "619:         $unlimNumRows = $this->properties['unlim_num_rows'];",
          "620:         $numRows = $this->properties['num_rows'];",
          "621:         $printView = $this->properties['printview'];",
          "624:         if ($printView == '1') {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "635:         }",
          "640:         } elseif (",
          "641:             ($displayParts['nav_bar'] == '1')",
          "642:             || ($displayParts['sort_lnk'] == '1')",
          "643:             && (strlen($db) > 0 && strlen($table) > 0)",
          "644:         ) {",
          "646:         }",
          "651:             $displayParts['nav_bar']   = (string) '1';",
          "652:             $displayParts['sort_lnk']  = (string) '1';",
          "653:         }",
          "",
          "[Removed Lines]",
          "638:         if (isset($unlim_num_rows) && $unlim_num_rows != '') {",
          "639:             $the_total = $unlim_num_rows;",
          "645:             $the_total = $dbi->getTable($db, $table)->countRecords();",
          "650:         if ($this->properties['is_count'] && isset($num_rows) && $num_rows > 1) {",
          "",
          "[Added Lines]",
          "638:         if (isset($unlimNumRows) && $unlimNumRows != '') {",
          "639:             $theTotal = $unlimNumRows;",
          "645:             $theTotal = $dbi->getTable($db, $table)->countRecords();",
          "650:         if ($this->properties['is_count'] && isset($numRows) && $numRows > 1) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "664:             if (",
          "668:             ) {",
          "669:                 $displayParts['sort_lnk'] = (string) '0';",
          "670:             }",
          "",
          "[Removed Lines]",
          "663:             $_table = new Table($table, $db);",
          "665:                 isset($unlim_num_rows)",
          "666:                 && ($unlim_num_rows < 2)",
          "667:                 && ! $_table->isView()",
          "",
          "[Added Lines]",
          "663:             $tableObject = new Table($table, $db);",
          "665:                 isset($unlimNumRows)",
          "666:                 && ($unlimNumRows < 2)",
          "667:                 && ! $tableObject->isView()",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "673:         return [",
          "674:             $displayParts,",
          "676:         ];",
          "677:     }",
          "",
          "[Removed Lines]",
          "675:             $the_total,",
          "",
          "[Added Lines]",
          "675:             $theTotal,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "692:     {",
          "693:         return ! ($this->properties['is_count']",
          "694:                 || $this->properties['is_export']",
          "695:                 || $this->properties['is_func']",
          "696:                 || $this->properties['is_analyse'])",
          "701:     }",
          "",
          "[Removed Lines]",
          "691:     private function isSelect(array $analyzed_sql_results)",
          "697:             && ! empty($analyzed_sql_results['select_from'])",
          "698:             && ! empty($analyzed_sql_results['statement']->from)",
          "699:             && (count($analyzed_sql_results['statement']->from) === 1)",
          "700:             && ! empty($analyzed_sql_results['statement']->from[0]->table);",
          "",
          "[Added Lines]",
          "691:     private function isSelect(array $analyzedSqlResults)",
          "697:             && ! empty($analyzedSqlResults['select_from'])",
          "698:             && ! empty($analyzedSqlResults['statement']->from)",
          "699:             && (count($analyzedSqlResults['statement']->from) === 1)",
          "700:             && ! empty($analyzedSqlResults['statement']->from[0]->table);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "723:         $caption,",
          "724:         $title,",
          "725:         $pos,",
          "727:         $back,",
          "728:         $onsubmit = '',",
          "730:         $onclick = ''",
          "731:     ) {",
          "733:         if ($back) {",
          "734:             if (Util::showIcons('TableNavigationLinksMode')) {",
          "736:             }",
          "738:             if (Util::showText('TableNavigationLinksMode')) {",
          "740:             }",
          "741:         } else {",
          "742:             if (Util::showText('TableNavigationLinksMode')) {",
          "744:             }",
          "746:             if (Util::showIcons('TableNavigationLinksMode')) {",
          "748:             }",
          "749:         }",
          "751:         return $this->template->render('display/results/table_navigation_button', [",
          "752:             'db' => $this->properties['db'],",
          "753:             'table' => $this->properties['table'],",
          "755:             'pos' => $pos,",
          "756:             'is_browse_distinct' => $this->properties['is_browse_distinct'],",
          "757:             'goto' => $this->properties['goto'],",
          "760:             'title' => $title,",
          "761:             'onsubmit' => $onsubmit,",
          "762:             'onclick' => $onclick,",
          "",
          "[Removed Lines]",
          "726:         $html_sql_query,",
          "729:         $input_for_real_end = '',",
          "732:         $caption_output = '';",
          "735:                 $caption_output .= $caption;",
          "739:                 $caption_output .= '&nbsp;' . $title;",
          "743:                 $caption_output .= $title;",
          "747:                 $caption_output .= '&nbsp;' . $caption;",
          "754:             'sql_query' => $html_sql_query,",
          "758:             'input_for_real_end' => $input_for_real_end,",
          "759:             'caption_output' => $caption_output,",
          "",
          "[Added Lines]",
          "726:         $htmlSqlQuery,",
          "729:         $inputForRealEnd = '',",
          "732:         $captionOutput = '';",
          "735:                 $captionOutput .= $caption;",
          "739:                 $captionOutput .= '&nbsp;' . $title;",
          "743:                 $captionOutput .= $title;",
          "747:                 $captionOutput .= '&nbsp;' . $caption;",
          "754:             'sql_query' => $htmlSqlQuery,",
          "758:             'input_for_real_end' => $inputForRealEnd,",
          "759:             'caption_output' => $captionOutput,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "785:         $output = '';",
          "786:         if ($nbTotalPage > 1) {",
          "788:                 'db'                 => $this->properties['db'],",
          "789:                 'table'              => $this->properties['table'],",
          "790:                 'sql_query'          => $this->properties['sql_query'],",
          "",
          "[Removed Lines]",
          "787:             $_url_params = [",
          "",
          "[Added Lines]",
          "787:             $urlParams = [",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "793:             ];",
          "795:             $output = $this->template->render('display/results/page_selector', [",
          "797:                 'page_selector' => Util::pageselector(",
          "798:                     'pos',",
          "799:                     $_SESSION['tmpval']['max_rows'],",
          "",
          "[Removed Lines]",
          "796:                 'url_params' => $_url_params,",
          "",
          "[Added Lines]",
          "796:                 'url_params' => $urlParams,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "906:     private function getMoveBackwardButtonsForTableNavigation(",
          "909:     ) {",
          "910:         return $this->getTableNavigationButton(",
          "911:             '&lt;&lt;',",
          "912:             _pgettext('First page', 'Begin'),",
          "913:             0,",
          "915:             true",
          "916:         )",
          "917:         . $this->getTableNavigationButton(",
          "918:             '&lt;',",
          "919:             _pgettext('Previous page', 'Previous'),",
          "922:             true",
          "923:         );",
          "924:     }",
          "",
          "[Removed Lines]",
          "907:         $html_sql_query,",
          "908:         $pos_prev",
          "914:             $html_sql_query,",
          "920:             $pos_prev,",
          "921:             $html_sql_query,",
          "",
          "[Added Lines]",
          "907:         $htmlSqlQuery,",
          "908:         $posPrev",
          "914:             $htmlSqlQuery,",
          "920:             $posPrev,",
          "921:             $htmlSqlQuery,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "939:     private function getMoveForwardButtonsForTableNavigation(",
          "943:     ) {",
          "946:             '&gt;',",
          "947:             _pgettext('Next page', 'Next'),",
          "950:             false",
          "951:         );",
          "954:         if (",
          "956:             && $this->properties['unlim_num_rows'] > $GLOBALS['cfg']['MaxExactCount']",
          "957:         ) {",
          "959:                 . 'name=\"find_real_end\" value=\"1\">';",
          "961:             $onclick = '';",
          "962:         } else {",
          "964:         }",
          "966:         $maxRows = $_SESSION['tmpval']['max_rows'];",
          "",
          "[Removed Lines]",
          "940:         $html_sql_query,",
          "941:         $pos_next,",
          "942:         $is_innodb",
          "945:         $buttons_html = $this->getTableNavigationButton(",
          "948:             $pos_next,",
          "949:             $html_sql_query,",
          "955:             $is_innodb",
          "958:             $input_for_real_end = '<input id=\"real_end_input\" type=\"hidden\" '",
          "963:             $input_for_real_end = $onclick = '';",
          "",
          "[Added Lines]",
          "940:         $htmlSqlQuery,",
          "941:         $posNext,",
          "942:         $isInnodb",
          "945:         $buttonsHtml = $this->getTableNavigationButton(",
          "948:             $posNext,",
          "949:             $htmlSqlQuery,",
          "955:             $isInnodb",
          "958:             $inputForRealEnd = '<input id=\"real_end_input\" type=\"hidden\" '",
          "963:             $inputForRealEnd = $onclick = '';",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "973:             : 'false') . '\"';",
          "977:             '&gt;&gt;',",
          "978:             _pgettext('Last page', 'End'),",
          "979:             @((int) ceil(",
          "980:                 $this->properties['unlim_num_rows']",
          "981:                 / $_SESSION['tmpval']['max_rows']",
          "982:             ) - 1) * $maxRows,",
          "984:             false,",
          "985:             $onsubmit,",
          "987:             $onclick",
          "988:         );",
          "989:     }",
          "",
          "[Removed Lines]",
          "976:         return $buttons_html . $this->getTableNavigationButton(",
          "983:             $html_sql_query,",
          "986:             $input_for_real_end,",
          "",
          "[Added Lines]",
          "976:         return $buttonsHtml . $this->getTableNavigationButton(",
          "983:             $htmlSqlQuery,",
          "986:             $inputForRealEnd,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1010:     private function getTableHeadersForColumns(",
          "1011:         array $displayParts,",
          "1018:     ) {",
          "1019:         $html = '';",
          "1025:             ? 0",
          "1040:         );",
          "1064:                     = $this->getOrderLinkAndSortedHeaderHtml(",
          "1068:                         $i,",
          "1071:                         $comments,",
          "1075:                     );",
          "1080:                     . 'class=\"draggable'",
          "1084:             } else {",
          "1086:                 $html",
          "1087:                     .= $this->getDraggableClassForNonSortableColumns(",
          "1092:                         $comments",
          "1093:                     );",
          "1096:                     . 'class=\"draggable'",
          "1099:                     . '\">        '",
          "1101:                     . $comments . '    </th>';",
          "1102:             }",
          "1105:         }",
          "1107:         return $html;",
          "",
          "[Removed Lines]",
          "1012:         array $analyzed_sql_results,",
          "1013:         array $sort_expression,",
          "1014:         array $sort_expression_nodirection,",
          "1015:         array $sort_direction,",
          "1016:         $is_limited_display,",
          "1017:         $unsorted_sql_query",
          "1023:         $sql_md5 = md5($this->properties['sql_query']);",
          "1024:         $session_max_rows = $is_limited_display",
          "1026:             : $_SESSION['tmpval']['query'][$sql_md5]['max_rows'];",
          "1030:         $highlight_columns = $this->properties['highlight_columns'];",
          "1032:         $fields_meta = $this->properties['fields_meta'];",
          "1036:         $comments_map = $this->getTableCommentsArray($analyzed_sql_results);",
          "1038:         [$col_order, $col_visib] = $this->getColumnParams(",
          "1039:             $analyzed_sql_results",
          "1043:         $number_of_columns = $this->properties['fields_cnt'];",
          "1045:         for ($j = 0; $j < $number_of_columns; $j++) {",
          "1047:             $col_visib_current = is_array($col_visib) && isset($col_visib[$j]) ? $col_visib[$j] : null;",
          "1050:             $i = $col_order ? $col_order[$j] : $j;",
          "1054:             $name = $fields_meta[$i]->name;",
          "1055:             $condition_field = isset($highlight_columns[$name])",
          "1056:                 || isset($highlight_columns[Util::backquote($name)]);",
          "1059:             $comments = $this->getCommentForRow($comments_map, $fields_meta[$i]);",
          "1060:             $display_params = $this->properties['display_params'];",
          "1062:             if (($displayParts['sort_lnk'] == '1') && ! $is_limited_display) {",
          "1063:                 [$order_link, $sorted_header_html]",
          "1065:                         $fields_meta[$i],",
          "1066:                         $sort_expression,",
          "1067:                         $sort_expression_nodirection,",
          "1069:                         $unsorted_sql_query,",
          "1070:                         $session_max_rows,",
          "1072:                         $sort_direction,",
          "1073:                         $col_visib,",
          "1074:                         $col_visib_current",
          "1077:                 $html .= $sorted_header_html;",
          "1079:                 $display_params['desc'][] = '    <th '",
          "1081:                     . ($condition_field ? ' condition' : '')",
          "1082:                     . '\" data-column=\"' . htmlspecialchars($fields_meta[$i]->name)",
          "1083:                     . '\">' . \"\\n\" . $order_link . $comments . '    </th>' . \"\\n\";",
          "1088:                         $col_visib,",
          "1089:                         $col_visib_current,",
          "1090:                         $condition_field,",
          "1091:                         $fields_meta[$i],",
          "1095:                 $display_params['desc'][] = '    <th '",
          "1097:                     . ($condition_field ? ' condition\"' : '')",
          "1098:                     . '\" data-column=\"' . htmlspecialchars((string) $fields_meta[$i]->name)",
          "1100:                     . htmlspecialchars((string) $fields_meta[$i]->name)",
          "1104:             $this->properties['display_params'] = $display_params;",
          "",
          "[Added Lines]",
          "1012:         array $analyzedSqlResults,",
          "1013:         array $sortExpression,",
          "1014:         array $sortExpressionNoDirection,",
          "1015:         array $sortDirection,",
          "1016:         $isLimitedDisplay,",
          "1017:         $unsortedSqlQuery",
          "1023:         $sqlMd5 = md5($this->properties['sql_query']);",
          "1024:         $sessionMaxRows = $isLimitedDisplay",
          "1026:             : $_SESSION['tmpval']['query'][$sqlMd5]['max_rows'];",
          "1030:         $highlightColumns = $this->properties['highlight_columns'];",
          "1032:         $fieldsMeta = $this->properties['fields_meta'];",
          "1036:         $commentsMap = $this->getTableCommentsArray($analyzedSqlResults);",
          "1038:         [$colOrder, $colVisib] = $this->getColumnParams(",
          "1039:             $analyzedSqlResults",
          "1043:         $numberOfColumns = $this->properties['fields_cnt'];",
          "1045:         for ($j = 0; $j < $numberOfColumns; $j++) {",
          "1047:             $colVisibCurrent = is_array($colVisib) && isset($colVisib[$j]) ? $colVisib[$j] : null;",
          "1050:             $i = $colOrder ? $colOrder[$j] : $j;",
          "1054:             $name = $fieldsMeta[$i]->name;",
          "1055:             $conditionField = isset($highlightColumns[$name])",
          "1056:                 || isset($highlightColumns[Util::backquote($name)]);",
          "1059:             $comments = $this->getCommentForRow($commentsMap, $fieldsMeta[$i]);",
          "1060:             $displayParams = $this->properties['display_params'];",
          "1062:             if (($displayParts['sort_lnk'] == '1') && ! $isLimitedDisplay) {",
          "1063:                 [$orderLink, $sortedHeaderHtml]",
          "1065:                         $fieldsMeta[$i],",
          "1066:                         $sortExpression,",
          "1067:                         $sortExpressionNoDirection,",
          "1069:                         $unsortedSqlQuery,",
          "1070:                         $sessionMaxRows,",
          "1072:                         $sortDirection,",
          "1073:                         $colVisib,",
          "1074:                         $colVisibCurrent",
          "1077:                 $html .= $sortedHeaderHtml;",
          "1079:                 $displayParams['desc'][] = '    <th '",
          "1081:                     . ($conditionField ? ' condition' : '')",
          "1082:                     . '\" data-column=\"' . htmlspecialchars($fieldsMeta[$i]->name)",
          "1083:                     . '\">' . \"\\n\" . $orderLink . $comments . '    </th>' . \"\\n\";",
          "1088:                         $colVisib,",
          "1089:                         $colVisibCurrent,",
          "1090:                         $conditionField,",
          "1091:                         $fieldsMeta[$i],",
          "1095:                 $displayParams['desc'][] = '    <th '",
          "1097:                     . ($conditionField ? ' condition\"' : '')",
          "1098:                     . '\" data-column=\"' . htmlspecialchars((string) $fieldsMeta[$i]->name)",
          "1100:                     . htmlspecialchars((string) $fieldsMeta[$i]->name)",
          "1104:             $this->properties['display_params'] = $displayParams;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1217:     private function getUnsortedSqlAndSortByKeyDropDown(",
          "1220:     ) {",
          "1226:             'ORDER BY',",
          "1227:             ''",
          "1228:         );",
          "1233:             $indexes = Index::getFromTable(",
          "1234:                 $this->properties['table'],",
          "",
          "[Removed Lines]",
          "1218:         array $analyzed_sql_results,",
          "1219:         ?array $sort_expression",
          "1221:         $drop_down_html = '';",
          "1223:         $unsorted_sql_query = Query::replaceClause(",
          "1224:             $analyzed_sql_results['statement'],",
          "1225:             $analyzed_sql_results['parser']->list,",
          "1231:         if ($this->isSelect($analyzed_sql_results)) {",
          "",
          "[Added Lines]",
          "1218:         array $analyzedSqlResults,",
          "1219:         ?array $sortExpression",
          "1221:         $dropDownHtml = '';",
          "1223:         $unsortedSqlQuery = Query::replaceClause(",
          "1224:             $analyzedSqlResults['statement'],",
          "1225:             $analyzedSqlResults['parser']->list,",
          "1231:         if ($this->isSelect($analyzedSqlResults)) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1239:             if (! empty($indexes)) {",
          "1241:                     $indexes,",
          "1244:                 );",
          "1245:             }",
          "1246:         }",
          "1248:         return [",
          "1251:         ];",
          "1252:     }",
          "",
          "[Removed Lines]",
          "1240:                 $drop_down_html = $this->getSortByKeyDropDown(",
          "1242:                     $sort_expression,",
          "1243:                     $unsorted_sql_query",
          "1249:             $unsorted_sql_query,",
          "1250:             $drop_down_html,",
          "",
          "[Added Lines]",
          "1240:                 $dropDownHtml = $this->getSortByKeyDropDown(",
          "1242:                     $sortExpression,",
          "1243:                     $unsortedSqlQuery",
          "1249:             $unsortedSqlQuery,",
          "1250:             $dropDownHtml,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1349:     private function getFieldVisibilityParams(",
          "1350:         array &$displayParts,",
          "1352:     ) {",
          "1359:         $emptyPreCondition = $displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE",
          "1360:                            && $displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE;",
          "",
          "[Removed Lines]",
          "1351:         $full_or_partial_text_link",
          "1353:         $button_html = '';",
          "1354:         $display_params = $this->properties['display_params'];",
          "1357:         $button_html .= '<thead class=\"table-light\"><tr>' . \"\\n\";",
          "",
          "[Added Lines]",
          "1351:         $fullOrPartialTextLink",
          "1353:         $buttonHtml = '';",
          "1354:         $displayParams = $this->properties['display_params'];",
          "1357:         $buttonHtml .= '<thead class=\"table-light\"><tr>' . \"\\n\";",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1371:             && ($displayParts['del_lnk'] === self::NO_EDIT_OR_DELETE)",
          "1372:             && ($displayParts['text_btn'] == '1')",
          "1373:         ) {",
          "1375:         } elseif (",
          "1376:             $leftOrBoth && ($displayParts['text_btn'] == '1')",
          "1377:         ) {",
          "1385:         } elseif (",
          "1386:             $leftOrBoth",
          "1387:             && (($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)",
          "",
          "[Removed Lines]",
          "1374:             $display_params['emptypre'] = $emptyPreCondition ? 4 : 0;",
          "1381:             $display_params['emptypre'] = $emptyPreCondition ? 4 : 0;",
          "1383:             $button_html .= '<th class=\"column_action sticky print_ignore\" ' . $colspan",
          "1384:                 . '>' . $full_or_partial_text_link . '</th>';",
          "",
          "[Added Lines]",
          "1374:             $displayParams['emptypre'] = $emptyPreCondition ? 4 : 0;",
          "1381:             $displayParams['emptypre'] = $emptyPreCondition ? 4 : 0;",
          "1383:             $buttonHtml .= '<th class=\"column_action sticky print_ignore\" ' . $colspan",
          "1384:                 . '>' . $fullOrPartialTextLink . '</th>';",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1389:         ) {",
          "1395:         } elseif ($GLOBALS['cfg']['RowActionLinks'] === self::POSITION_NONE) {",
          "1399:         }",
          "1403:         return [",
          "1404:             $colspan,",
          "1406:         ];",
          "1407:     }",
          "",
          "[Removed Lines]",
          "1392:             $display_params['emptypre'] = $emptyPreCondition ? 4 : 0;",
          "1394:             $button_html .= '<td ' . $colspan . '></td>';",
          "1398:             $button_html .= '<th class=\"column_action sticky\"></th>';",
          "1401:         $this->properties['display_params'] = $display_params;",
          "1405:             $button_html,",
          "",
          "[Added Lines]",
          "1392:             $displayParams['emptypre'] = $emptyPreCondition ? 4 : 0;",
          "1394:             $buttonHtml .= '<td ' . $colspan . '></td>';",
          "1398:             $buttonHtml .= '<th class=\"column_action sticky\"></th>';",
          "1401:         $this->properties['display_params'] = $displayParams;",
          "1405:             $buttonHtml,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1421:     {",
          "1422:         if (",
          "1423:             ! $GLOBALS['cfg']['ShowBrowseComments']",
          "1425:         ) {",
          "1426:             return [];",
          "1427:         }",
          "1429:         $ret = [];",
          "1431:             if (empty($field->table)) {",
          "1432:                 continue;",
          "1433:             }",
          "",
          "[Removed Lines]",
          "1420:     private function getTableCommentsArray(array $analyzed_sql_results)",
          "1424:             || empty($analyzed_sql_results['statement']->from)",
          "1430:         foreach ($analyzed_sql_results['statement']->from as $field) {",
          "",
          "[Added Lines]",
          "1420:     private function getTableCommentsArray(array $analyzedSqlResults)",
          "1424:             || empty($analyzedSqlResults['statement']->from)",
          "1430:         foreach ($analyzedSqlResults['statement']->from as $field) {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1456:     {",
          "1461:                 foreach ($expr->identifiers as $identifier) {",
          "1463:                 }",
          "1464:             }",
          "1465:         }",
          "1468:     }",
          "",
          "[Removed Lines]",
          "1455:     private function setHighlightedColumnGlobalField(array $analyzed_sql_results)",
          "1457:         $highlight_columns = [];",
          "1459:         if (! empty($analyzed_sql_results['statement']->where)) {",
          "1460:             foreach ($analyzed_sql_results['statement']->where as $expr) {",
          "1462:                     $highlight_columns[$identifier] = 'true';",
          "1467:         $this->properties['highlight_columns'] = $highlight_columns;",
          "",
          "[Added Lines]",
          "1455:     private function setHighlightedColumnGlobalField(array $analyzedSqlResults)",
          "1457:         $highlightColumns = [];",
          "1459:         if (! empty($analyzedSqlResults['statement']->where)) {",
          "1460:             foreach ($analyzedSqlResults['statement']->where as $expr) {",
          "1462:                     $highlightColumns[$identifier] = 'true';",
          "1467:         $this->properties['highlight_columns'] = $highlightColumns;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1547:     {",
          "1548:         global $PMA_Theme;",
          "1551:             'db' => $this->properties['db'],",
          "1552:             'table' => $this->properties['table'],",
          "1553:             'sql_query' => $this->properties['sql_query'],",
          "",
          "[Removed Lines]",
          "1550:         $url_params_full_text = [",
          "",
          "[Added Lines]",
          "1550:         $urlParamsFullText = [",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1558:         if ($_SESSION['tmpval']['pftext'] === self::DISPLAY_FULL_TEXT) {",
          "1563:         } else {",
          "1567:         }",
          "1575:     }",
          "",
          "[Removed Lines]",
          "1560:             $tmp_image_file = 's_partialtext.png';",
          "1561:             $tmp_txt = __('Partial texts');",
          "1562:             $url_params_full_text['pftext'] = self::DISPLAY_PARTIAL_TEXT;",
          "1564:             $tmp_image_file = 's_fulltext.png';",
          "1565:             $tmp_txt = __('Full texts');",
          "1566:             $url_params_full_text['pftext'] = self::DISPLAY_FULL_TEXT;",
          "1569:         $tmp_image = '<img class=\"fulltext\" src=\"'",
          "1570:             . ($PMA_Theme instanceof Theme ? $PMA_Theme->getImgPath($tmp_image_file) : '')",
          "1571:             . '\" alt=\"' . $tmp_txt . '\" title=\"' . $tmp_txt . '\">';",
          "1572:         $tmp_url = Url::getFromRoute('/sql', $url_params_full_text);",
          "1574:         return Generator::linkOrButton($tmp_url, $tmp_image);",
          "",
          "[Added Lines]",
          "1560:             $tmpImageFile = 's_partialtext.png';",
          "1561:             $tmpTxt = __('Partial texts');",
          "1562:             $urlParamsFullText['pftext'] = self::DISPLAY_PARTIAL_TEXT;",
          "1564:             $tmpImageFile = 's_fulltext.png';",
          "1565:             $tmpTxt = __('Full texts');",
          "1566:             $urlParamsFullText['pftext'] = self::DISPLAY_FULL_TEXT;",
          "1569:         $tmpImage = '<img class=\"fulltext\" src=\"'",
          "1570:             . ($PMA_Theme instanceof Theme ? $PMA_Theme->getImgPath($tmpImageFile) : '')",
          "1571:             . '\" alt=\"' . $tmpTxt . '\" title=\"' . $tmpTxt . '\">';",
          "1572:         $tmpUrl = Url::getFromRoute('/sql', $urlParamsFullText);",
          "1574:         return Generator::linkOrButton($tmpUrl, $tmpImage);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1619:     private function getOrderLinkAndSortedHeaderHtml(",
          "1626:         $comments,",
          "1630:     ) {",
          "",
          "[Removed Lines]",
          "1620:         FieldMetadata $fields_meta,",
          "1621:         array $sort_expression,",
          "1622:         array $sort_expression_nodirection,",
          "1623:         $column_index,",
          "1624:         $unsorted_sql_query,",
          "1625:         $session_max_rows,",
          "1627:         array $sort_direction,",
          "1628:         $col_visib,",
          "1629:         $col_visib_j",
          "1631:         $sorted_header_html = '';",
          "",
          "[Added Lines]",
          "1620:         FieldMetadata $fieldsMeta,",
          "1621:         array $sortExpression,",
          "1622:         array $sortExpressionNoDirection,",
          "1623:         $columnIndex,",
          "1624:         $unsortedSqlQuery,",
          "1625:         $sessionMaxRows,",
          "1627:         array $sortDirection,",
          "1628:         $colVisib,",
          "1629:         $colVisibElement",
          "1631:         $sortedHeaderHtml = '';",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1642:             ? Util::backquote(",
          "1644:             ) . '.'",
          "1645:             : '';",
          "1652:             = $this->getSingleAndMultiSortUrls(",
          "1659:             );",
          "1661:         if (",
          "1662:             preg_match(",
          "1663:                 '@(.*)([[:space:]](LIMIT (.*)|PROCEDURE (.*)|FOR UPDATE|'",
          "1664:                 . 'LOCK IN SHARE MODE))@is',",
          "1666:                 $regs3",
          "1667:             )",
          "1668:         ) {",
          "1671:         } else {",
          "1674:         }",
          "1677:             'db'                 => $this->properties['db'],",
          "1678:             'table'              => $this->properties['table'],",
          "1682:             'is_browse_distinct' => $this->properties['is_browse_distinct'],",
          "1683:         ];",
          "1686:             'db'                 => $this->properties['db'],",
          "1687:             'table'              => $this->properties['table'],",
          "1691:             'is_browse_distinct' => $this->properties['is_browse_distinct'],",
          "1692:         ];",
          "1703:         );",
          "1710:             $comments",
          "1711:         );",
          "1713:         return [",
          "1716:         ];",
          "1717:     }",
          "",
          "[Removed Lines]",
          "1639:         $sort_tbl = isset($fields_meta->table)",
          "1640:             && strlen($fields_meta->table) > 0",
          "1641:             && $fields_meta->orgname == $fields_meta->name",
          "1643:                 $fields_meta->table",
          "1647:         $name_to_use_in_sort = $fields_meta->name;",
          "1651:         [$single_sort_order, $multi_sort_order, $order_img]",
          "1653:                 $sort_expression,",
          "1654:                 $sort_expression_nodirection,",
          "1655:                 $sort_tbl,",
          "1656:                 $name_to_use_in_sort,",
          "1657:                 $sort_direction,",
          "1658:                 $fields_meta",
          "1665:                 $unsorted_sql_query,",
          "1669:             $single_sorted_sql_query = $regs3[1] . $single_sort_order . $regs3[2];",
          "1670:             $multi_sorted_sql_query = $regs3[1] . $multi_sort_order . $regs3[2];",
          "1672:             $single_sorted_sql_query = $unsorted_sql_query . $single_sort_order;",
          "1673:             $multi_sorted_sql_query = $unsorted_sql_query . $multi_sort_order;",
          "1676:         $_single_url_params = [",
          "1679:             'sql_query'          => $single_sorted_sql_query,",
          "1680:             'sql_signature'      => Core::signSqlQuery($single_sorted_sql_query),",
          "1681:             'session_max_rows'   => $session_max_rows,",
          "1685:         $_multi_url_params = [",
          "1688:             'sql_query'          => $multi_sorted_sql_query,",
          "1689:             'sql_signature'      => Core::signSqlQuery($multi_sorted_sql_query),",
          "1690:             'session_max_rows'   => $session_max_rows,",
          "1693:         $single_order_url = Url::getFromRoute('/sql', $_single_url_params);",
          "1694:         $multi_order_url = Url::getFromRoute('/sql', $_multi_url_params);",
          "1698:         $order_link = $this->getSortOrderLink(",
          "1699:             $order_img,",
          "1700:             $fields_meta,",
          "1701:             $single_order_url,",
          "1702:             $multi_order_url",
          "1705:         $sorted_header_html .= $this->getDraggableClassForSortableColumns(",
          "1706:             $col_visib,",
          "1707:             $col_visib_j,",
          "1708:             $fields_meta,",
          "1709:             $order_link,",
          "1714:             $order_link,",
          "1715:             $sorted_header_html,",
          "",
          "[Added Lines]",
          "1639:         $sortTable = isset($fieldsMeta->table)",
          "1640:             && strlen($fieldsMeta->table) > 0",
          "1641:             && $fieldsMeta->orgname == $fieldsMeta->name",
          "1643:                 $fieldsMeta->table",
          "1647:         $nameToUseInSort = $fieldsMeta->name;",
          "1651:         [$singleSortOrder, $multiSortOrder, $orderImg]",
          "1653:                 $sortExpression,",
          "1654:                 $sortExpressionNoDirection,",
          "1655:                 $sortTable,",
          "1656:                 $nameToUseInSort,",
          "1657:                 $sortDirection,",
          "1658:                 $fieldsMeta",
          "1665:                 $unsortedSqlQuery,",
          "1669:             $singleSortedSqlQuery = $regs3[1] . $singleSortOrder . $regs3[2];",
          "1670:             $multiSortedSqlQuery = $regs3[1] . $multiSortOrder . $regs3[2];",
          "1672:             $singleSortedSqlQuery = $unsortedSqlQuery . $singleSortOrder;",
          "1673:             $multiSortedSqlQuery = $unsortedSqlQuery . $multiSortOrder;",
          "1676:         $singleUrlParams = [",
          "1679:             'sql_query'          => $singleSortedSqlQuery,",
          "1680:             'sql_signature'      => Core::signSqlQuery($singleSortedSqlQuery),",
          "1681:             'session_max_rows'   => $sessionMaxRows,",
          "1685:         $multiUrlParams = [",
          "1688:             'sql_query'          => $multiSortedSqlQuery,",
          "1689:             'sql_signature'      => Core::signSqlQuery($multiSortedSqlQuery),",
          "1690:             'session_max_rows'   => $sessionMaxRows,",
          "1693:         $singleOrderUrl = Url::getFromRoute('/sql', $singleUrlParams);",
          "1694:         $multiOrderUrl = Url::getFromRoute('/sql', $multiUrlParams);",
          "1698:         $orderLink = $this->getSortOrderLink(",
          "1699:             $orderImg,",
          "1700:             $fieldsMeta,",
          "1701:             $singleOrderUrl,",
          "1702:             $multiOrderUrl",
          "1705:         $sortedHeaderHtml .= $this->getDraggableClassForSortableColumns(",
          "1706:             $colVisib,",
          "1707:             $colVisibElement,",
          "1708:             $fieldsMeta,",
          "1709:             $orderLink,",
          "1714:             $orderLink,",
          "1715:             $sortedHeaderHtml,",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1737:     private function getSingleAndMultiSortUrls(",
          "1744:     ) {",
          "1752:         );",
          "1756:                 ? 0",
          "1759:                 = Util::backquote(",
          "1761:                 );",
          "1767:         }",
          "1785:             }",
          "1799:             } else {",
          "1802:                 }",
          "1805:                   . Util::backquote(",
          "1807:                   ) . ' ';",
          "1808:             }",
          "1817:                 } else {",
          "1819:                         . Util::backquote(",
          "1821:                         ) . ' ';",
          "1822:                 }",
          "1826:                         = $this->getSortingUrlParams(",
          "1829:                             $index",
          "1830:                         );",
          "1831:                 } else {",
          "1833:                 }",
          "1834:             }",
          "1841:                     $index",
          "1842:                 );",
          "1844:             } else {",
          "1846:             }",
          "1850:         }",
          "1856:             0,",
          "1858:         );",
          "1861:         }",
          "1863:         return [",
          "1867:         ];",
          "1868:     }",
          "",
          "[Removed Lines]",
          "1738:         array $sort_expression,",
          "1739:         array $sort_expression_nodirection,",
          "1740:         $sort_tbl,",
          "1741:         $name_to_use_in_sort,",
          "1742:         array $sort_direction,",
          "1743:         FieldMetadata $fields_meta",
          "1745:         $sort_order = '';",
          "1747:         $is_in_sort = $this->isInSorted(",
          "1748:             $sort_expression,",
          "1749:             $sort_expression_nodirection,",
          "1750:             $sort_tbl,",
          "1751:             $name_to_use_in_sort",
          "1753:         $current_name = $name_to_use_in_sort;",
          "1754:         if ($sort_expression_nodirection[0] == '' || ! $is_in_sort) {",
          "1755:             $special_index = $sort_expression_nodirection[0] == ''",
          "1757:                 : count($sort_expression_nodirection);",
          "1758:             $sort_expression_nodirection[$special_index]",
          "1760:                     $current_name",
          "1762:             $isTimeOrDate = $fields_meta->isType(FieldMetadata::TYPE_TIME)",
          "1763:                 || $fields_meta->isType(FieldMetadata::TYPE_DATE)",
          "1764:                 || $fields_meta->isType(FieldMetadata::TYPE_DATETIME)",
          "1765:                 || $fields_meta->isType(FieldMetadata::TYPE_TIMESTAMP);",
          "1766:             $sort_direction[$special_index] = $isTimeOrDate ? self::DESCENDING_SORT_DIR : self::ASCENDING_SORT_DIR;",
          "1769:         $sort_expression_nodirection = array_filter($sort_expression_nodirection);",
          "1770:         $single_sort_order = null;",
          "1771:         foreach ($sort_expression_nodirection as $index => $expression) {",
          "1774:             $is_first_clause = ($index == 0);",
          "1775:             $name_to_use_in_sort = $expression;",
          "1776:             $sort_tbl_new = $sort_tbl;",
          "1779:             if (mb_strpos($name_to_use_in_sort, '.') !== false) {",
          "1780:                 $matches = explode('.', $name_to_use_in_sort);",
          "1783:                 $name_to_use_in_sort = $matches[1];",
          "1784:                 $sort_tbl_new = $matches[0];",
          "1790:             $name_to_use_in_sort = str_replace([' )', '``'], [')', '`'], $name_to_use_in_sort);",
          "1791:             $name_to_use_in_sort = trim($name_to_use_in_sort, '`');",
          "1795:             $query_head = $is_first_clause ? \"\\nORDER BY \" : '';",
          "1797:             if (mb_strpos($name_to_use_in_sort, '(') !== false) {",
          "1798:                 $sort_order .=  $query_head . $name_to_use_in_sort . ' ';",
          "1800:                 if (strlen($sort_tbl_new) > 0) {",
          "1801:                     $sort_tbl_new .= '.';",
          "1804:                 $sort_order .=  $query_head . $sort_tbl_new",
          "1806:                       $name_to_use_in_sort",
          "1812:             $sort_order = preg_replace('/\\.\\./', '.', $sort_order);",
          "1814:             if ($current_name == $name_to_use_in_sort) {",
          "1815:                 if (mb_strpos($current_name, '(') !== false) {",
          "1816:                     $single_sort_order = \"\\n\" . 'ORDER BY ' . Util::backquote($current_name) . ' ';",
          "1818:                     $single_sort_order = \"\\n\" . 'ORDER BY ' . $sort_tbl",
          "1820:                             $current_name",
          "1824:                 if ($is_in_sort) {",
          "1825:                     [$single_sort_order, $order_img]",
          "1827:                             $sort_direction,",
          "1828:                             $single_sort_order,",
          "1832:                     $single_sort_order .= strtoupper($sort_direction[$index]);",
          "1836:             if ($current_name == $name_to_use_in_sort && $is_in_sort) {",
          "1838:                 [$sort_order, $order_img] = $this->getSortingUrlParams(",
          "1839:                     $sort_direction,",
          "1840:                     $sort_order,",
          "1843:                 $order_img .= ' <small>' . ($index + 1) . '</small>';",
          "1845:                 $sort_order .= strtoupper($sort_direction[$index]);",
          "1849:             $sort_order .= ', ';",
          "1854:         $sort_order = mb_substr(",
          "1855:             $sort_order,",
          "1857:             mb_strlen($sort_order) - 2",
          "1859:         if (empty($order_img)) {",
          "1860:             $order_img = '';",
          "1864:             $single_sort_order,",
          "1865:             $sort_order,",
          "1866:             $order_img,",
          "",
          "[Added Lines]",
          "1738:         array $sortExpression,",
          "1739:         array $sortExpressionNoDirection,",
          "1740:         $sortTable,",
          "1741:         $nameToUseInSort,",
          "1742:         array $sortDirection,",
          "1743:         FieldMetadata $fieldsMeta",
          "1745:         $sortOrder = '';",
          "1747:         $isInSort = $this->isInSorted(",
          "1748:             $sortExpression,",
          "1749:             $sortExpressionNoDirection,",
          "1750:             $sortTable,",
          "1751:             $nameToUseInSort",
          "1753:         $currentName = $nameToUseInSort;",
          "1754:         if ($sortExpressionNoDirection[0] == '' || ! $isInSort) {",
          "1755:             $specialIndex = $sortExpressionNoDirection[0] == ''",
          "1757:                 : count($sortExpressionNoDirection);",
          "1758:             $sortExpressionNoDirection[$specialIndex]",
          "1760:                     $currentName",
          "1762:             $isTimeOrDate = $fieldsMeta->isType(FieldMetadata::TYPE_TIME)",
          "1763:                 || $fieldsMeta->isType(FieldMetadata::TYPE_DATE)",
          "1764:                 || $fieldsMeta->isType(FieldMetadata::TYPE_DATETIME)",
          "1765:                 || $fieldsMeta->isType(FieldMetadata::TYPE_TIMESTAMP);",
          "1766:             $sortDirection[$specialIndex] = $isTimeOrDate ? self::DESCENDING_SORT_DIR : self::ASCENDING_SORT_DIR;",
          "1769:         $sortExpressionNoDirection = array_filter($sortExpressionNoDirection);",
          "1770:         $singleSortOrder = null;",
          "1771:         foreach ($sortExpressionNoDirection as $index => $expression) {",
          "1774:             $isFirstClause = ($index == 0);",
          "1775:             $nameToUseInSort = $expression;",
          "1776:             $sortTableNew = $sortTable;",
          "1779:             if (mb_strpos($nameToUseInSort, '.') !== false) {",
          "1780:                 $matches = explode('.', $nameToUseInSort);",
          "1783:                 $nameToUseInSort = $matches[1];",
          "1784:                 $sortTableNew = $matches[0];",
          "1790:             $nameToUseInSort = str_replace([' )', '``'], [')', '`'], $nameToUseInSort);",
          "1791:             $nameToUseInSort = trim($nameToUseInSort, '`');",
          "1795:             $queryHead = $isFirstClause ? \"\\nORDER BY \" : '';",
          "1797:             if (mb_strpos($nameToUseInSort, '(') !== false) {",
          "1798:                 $sortOrder .=  $queryHead . $nameToUseInSort . ' ';",
          "1800:                 if (strlen($sortTableNew) > 0) {",
          "1801:                     $sortTableNew .= '.';",
          "1804:                 $sortOrder .=  $queryHead . $sortTableNew",
          "1806:                       $nameToUseInSort",
          "1812:             $sortOrder = preg_replace('/\\.\\./', '.', $sortOrder);",
          "1814:             if ($currentName == $nameToUseInSort) {",
          "1815:                 if (mb_strpos($currentName, '(') !== false) {",
          "1816:                     $singleSortOrder = \"\\n\" . 'ORDER BY ' . Util::backquote($currentName) . ' ';",
          "1818:                     $singleSortOrder = \"\\n\" . 'ORDER BY ' . $sortTable",
          "1820:                             $currentName",
          "1824:                 if ($isInSort) {",
          "1825:                     [$singleSortOrder, $orderImg]",
          "1827:                             $sortDirection,",
          "1828:                             $singleSortOrder,",
          "1832:                     $singleSortOrder .= strtoupper($sortDirection[$index]);",
          "1836:             if ($currentName == $nameToUseInSort && $isInSort) {",
          "1838:                 [$sortOrder, $orderImg] = $this->getSortingUrlParams(",
          "1839:                     $sortDirection,",
          "1840:                     $sortOrder,",
          "1843:                 $orderImg .= ' <small>' . ($index + 1) . '</small>';",
          "1845:                 $sortOrder .= strtoupper($sortDirection[$index]);",
          "1849:             $sortOrder .= ', ';",
          "1854:         $sortOrder = mb_substr(",
          "1855:             $sortOrder,",
          "1857:             mb_strlen($sortOrder) - 2",
          "1859:         if (empty($orderImg)) {",
          "1860:             $orderImg = '';",
          "1864:             $singleSortOrder,",
          "1865:             $sortOrder,",
          "1866:             $orderImg,",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1884:     private function isInSorted(",
          "1889:     ) {",
          "1893:             if (mb_strpos($clause, '.') !== false) {",
          "1894:                 $fragments = explode('.', $clause);",
          "1895:                 $clause2 = $fragments[0] . '.' . str_replace('`', '', $fragments[1]);",
          "1896:             } else {",
          "1898:             }",
          "1902:                 break;",
          "1903:             }",
          "1904:         }",
          "1908:         } else {",
          "",
          "[Removed Lines]",
          "1885:         array $sort_expression,",
          "1886:         array $sort_expression_nodirection,",
          "1887:         $sort_tbl,",
          "1888:         $name_to_use_in_sort",
          "1890:         $index_in_expression = 0;",
          "1892:         foreach ($sort_expression_nodirection as $index => $clause) {",
          "1897:                 $clause2 = $sort_tbl . str_replace('`', '', $clause);",
          "1900:             if ($clause2 === $sort_tbl . $name_to_use_in_sort) {",
          "1901:                 $index_in_expression = $index;",
          "1906:         if (empty($sort_expression[$index_in_expression])) {",
          "1907:             $is_in_sort = false;",
          "",
          "[Added Lines]",
          "1885:         array $sortExpression,",
          "1886:         array $sortExpressionNoDirection,",
          "1887:         $sortTable,",
          "1888:         $nameToUseInSort",
          "1890:         $indexInExpression = 0;",
          "1892:         foreach ($sortExpressionNoDirection as $index => $clause) {",
          "1897:                 $clause2 = $sortTable . str_replace('`', '', $clause);",
          "1900:             if ($clause2 === $sortTable . $nameToUseInSort) {",
          "1901:                 $indexInExpression = $index;",
          "1906:         if (empty($sortExpression[$indexInExpression])) {",
          "1907:             $isInSort = false;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1921:             ) === false;",
          "1922:             $noOpenParenthesis = mb_strpos(",
          "1924:                 '('",
          "1925:             ) === false;",
          "1929:             } else {",
          "1932:             }",
          "1941:             if (",
          "1944:             ) {",
          "1946:             }",
          "1947:         }",
          "1950:     }",
          "",
          "[Removed Lines]",
          "1918:             $noSortTable = empty($sort_tbl) || mb_strpos(",
          "1919:                 $sort_expression_nodirection[$index_in_expression],",
          "1920:                 $sort_tbl",
          "1923:                 $sort_expression_nodirection[$index_in_expression],",
          "1926:             if (! empty($sort_tbl) && $noSortTable && $noOpenParenthesis) {",
          "1927:                 $new_sort_expression_nodirection = $sort_tbl",
          "1928:                     . $sort_expression_nodirection[$index_in_expression];",
          "1930:                 $new_sort_expression_nodirection",
          "1931:                     = $sort_expression_nodirection[$index_in_expression];",
          "1936:             $name_to_use_in_sort = str_replace('`', '', $name_to_use_in_sort);",
          "1938:             $is_in_sort = false;",
          "1939:             $sort_name = str_replace('`', '', $sort_tbl) . $name_to_use_in_sort;",
          "1942:                 $sort_name == str_replace('`', '', $new_sort_expression_nodirection)",
          "1943:                 || $sort_name == str_replace('`', '', $sort_expression_nodirection[$index_in_expression])",
          "1945:                 $is_in_sort = true;",
          "1949:         return $is_in_sort;",
          "",
          "[Added Lines]",
          "1918:             $noSortTable = empty($sortTable) || mb_strpos(",
          "1919:                 $sortExpressionNoDirection[$indexInExpression],",
          "1920:                 $sortTable",
          "1923:                 $sortExpressionNoDirection[$indexInExpression],",
          "1926:             if (! empty($sortTable) && $noSortTable && $noOpenParenthesis) {",
          "1927:                 $newSortExpressionNoDirection = $sortTable",
          "1928:                     . $sortExpressionNoDirection[$indexInExpression];",
          "1930:                 $newSortExpressionNoDirection = $sortExpressionNoDirection[$indexInExpression];",
          "1935:             $nameToUseInSort = str_replace('`', '', $nameToUseInSort);",
          "1937:             $isInSort = false;",
          "1938:             $sortName = str_replace('`', '', $sortTable) . $nameToUseInSort;",
          "1941:                 $sortName == str_replace('`', '', $newSortExpressionNoDirection)",
          "1942:                 || $sortName == str_replace('`', '', $sortExpressionNoDirection[$indexInExpression])",
          "1944:                 $isInSort = true;",
          "1948:         return $isInSort;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1966:     {",
          "1970:                 's_desc',",
          "1971:                 __('Descending'),",
          "1972:                 [",
          "",
          "[Removed Lines]",
          "1965:     private function getSortingUrlParams(array $sort_direction, $sort_order, $index)",
          "1967:         if (strtoupper(trim($sort_direction[$index])) === self::DESCENDING_SORT_DIR) {",
          "1968:             $sort_order .= ' ASC';",
          "1969:             $order_img   = ' ' . Generator::getImage(",
          "",
          "[Added Lines]",
          "1964:     private function getSortingUrlParams(array $sortDirection, $sortOrder, $index)",
          "1966:         if (strtoupper(trim($sortDirection[$index])) === self::DESCENDING_SORT_DIR) {",
          "1967:             $sortOrder .= ' ASC';",
          "1968:             $orderImg   = ' ' . Generator::getImage(",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1974:                     'title' => '',",
          "1975:                 ]",
          "1976:             );",
          "1978:                 's_asc',",
          "1979:                 __('Ascending'),",
          "1980:                 [",
          "",
          "[Removed Lines]",
          "1977:             $order_img  .= ' ' . Generator::getImage(",
          "",
          "[Added Lines]",
          "1976:             $orderImg  .= ' ' . Generator::getImage(",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1983:                 ]",
          "1984:             );",
          "1985:         } else {",
          "1988:                 's_asc',",
          "1989:                 __('Ascending'),",
          "1990:                 [",
          "",
          "[Removed Lines]",
          "1986:             $sort_order .= ' DESC';",
          "1987:             $order_img   = ' ' . Generator::getImage(",
          "",
          "[Added Lines]",
          "1985:             $sortOrder .= ' DESC';",
          "1986:             $orderImg   = ' ' . Generator::getImage(",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1992:                     'title' => '',",
          "1993:                 ]",
          "1994:             );",
          "1996:                 's_desc',",
          "1997:                 __('Descending'),",
          "1998:                 [",
          "",
          "[Removed Lines]",
          "1995:             $order_img  .=  ' ' . Generator::getImage(",
          "",
          "[Added Lines]",
          "1994:             $orderImg  .=  ' ' . Generator::getImage(",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2003:         }",
          "2005:         return [",
          "2008:         ];",
          "2009:     }",
          "",
          "[Removed Lines]",
          "2006:             $sort_order,",
          "2007:             $order_img,",
          "",
          "[Added Lines]",
          "2005:             $sortOrder,",
          "2006:             $orderImg,",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2025:     private function getSortOrderLink(",
          "2030:     ) {",
          "2037:         return Generator::linkOrButton(",
          "2041:         );",
          "2042:     }",
          "",
          "[Removed Lines]",
          "2026:         $order_img,",
          "2027:         FieldMetadata $fields_meta,",
          "2028:         $order_url,",
          "2029:         $multi_order_url",
          "2031:         $order_link_params = ['class' => 'sortlink'];",
          "2033:         $order_link_content = htmlspecialchars($fields_meta->name);",
          "2034:         $inner_link_content = $order_link_content . $order_img",
          "2035:             . '<input type=\"hidden\" value=\"' . $multi_order_url . '\">';",
          "2038:             $order_url,",
          "2039:             $inner_link_content,",
          "2040:             $order_link_params",
          "",
          "[Added Lines]",
          "2025:         $orderImg,",
          "2026:         FieldMetadata $fieldsMeta,",
          "2027:         $orderUrl,",
          "2028:         $multiOrderUrl",
          "2030:         $orderLinkParams = ['class' => 'sortlink'];",
          "2032:         $orderLinkContent = htmlspecialchars($fieldsMeta->name);",
          "2033:         $innerLinkContent = $orderLinkContent . $orderImg",
          "2034:             . '<input type=\"hidden\" value=\"' . $multiOrderUrl . '\">';",
          "2037:             $orderUrl,",
          "2038:             $innerLinkContent,",
          "2039:             $orderLinkParams",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2056:     {",
          "2059:         if (",
          "2063:         ) {",
          "2064:             return;",
          "2065:         }",
          "2068:     }",
          "",
          "[Removed Lines]",
          "2055:     private function getClassForNumericColumnType(FieldMetadata $fields_meta, array &$th_class)",
          "2060:             ! $fields_meta->isType(FieldMetadata::TYPE_REAL)",
          "2061:             && ! $fields_meta->isMappedTypeBit",
          "2062:             && ! $fields_meta->isType(FieldMetadata::TYPE_INT)",
          "2067:             $th_class[] = 'text-end';",
          "",
          "[Added Lines]",
          "2054:     private function getClassForNumericColumnType(FieldMetadata $fieldsMeta, array &$thClass)",
          "2059:             ! $fieldsMeta->isType(FieldMetadata::TYPE_REAL)",
          "2060:             && ! $fieldsMeta->isMappedTypeBit",
          "2061:             && ! $fieldsMeta->isType(FieldMetadata::TYPE_INT)",
          "2066:         $thClass[] = 'text-end';",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2086:     private function getDraggableClassForSortableColumns(",
          "2091:         $comments",
          "2092:     ) {",
          "2099:         }",
          "2103:         if ($GLOBALS['cfg']['BrowsePointerEnable'] == true) {",
          "2105:         }",
          "2107:         if ($GLOBALS['cfg']['BrowseMarkerEnable'] == true) {",
          "2109:         }",
          "2117:     }",
          "",
          "[Removed Lines]",
          "2087:         $col_visib,",
          "2088:         $col_visib_j,",
          "2089:         FieldMetadata $fields_meta,",
          "2090:         $order_link,",
          "2093:         $draggable_html = '<th';",
          "2094:         $th_class = [];",
          "2095:         $th_class[] = 'draggable';",
          "2096:         $this->getClassForNumericColumnType($fields_meta, $th_class);",
          "2097:         if ($col_visib && ! $col_visib_j) {",
          "2098:             $th_class[] = 'hide';",
          "2101:         $th_class[] = 'column_heading';",
          "2102:         $th_class[] = 'sticky';",
          "2104:             $th_class[] = 'pointer';",
          "2108:             $th_class[] = 'marker';",
          "2111:         $draggable_html .= ' class=\"' . implode(' ', $th_class) . '\"';",
          "2113:         $draggable_html .= ' data-column=\"' . htmlspecialchars((string) $fields_meta->name)",
          "2114:             . '\">' . $order_link . $comments . '</th>';",
          "2116:         return $draggable_html;",
          "",
          "[Added Lines]",
          "2086:         $colVisib,",
          "2087:         $colVisibElement,",
          "2088:         FieldMetadata $fieldsMeta,",
          "2089:         $orderLink,",
          "2092:         $draggableHtml = '<th';",
          "2093:         $thClass = [];",
          "2094:         $thClass[] = 'draggable';",
          "2095:         $this->getClassForNumericColumnType($fieldsMeta, $thClass);",
          "2096:         if ($colVisib && ! $colVisibElement) {",
          "2097:             $thClass[] = 'hide';",
          "2100:         $thClass[] = 'column_heading';",
          "2101:         $thClass[] = 'sticky';",
          "2103:             $thClass[] = 'pointer';",
          "2107:             $thClass[] = 'marker';",
          "2110:         $draggableHtml .= ' class=\"' . implode(' ', $thClass) . '\"';",
          "2112:         $draggableHtml .= ' data-column=\"' . htmlspecialchars((string) $fieldsMeta->name)",
          "2113:             . '\">' . $orderLink . $comments . '</th>';",
          "2115:         return $draggableHtml;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2135:     private function getDraggableClassForNonSortableColumns(",
          "2140:         $comments",
          "2141:     ) {",
          "2149:         }",
          "2153:         }",
          "2165:     }",
          "",
          "[Removed Lines]",
          "2136:         $col_visib,",
          "2137:         $col_visib_j,",
          "2138:         $condition_field,",
          "2139:         FieldMetadata $fields_meta,",
          "2142:         $draggable_html = '<th';",
          "2143:         $th_class = [];",
          "2144:         $th_class[] = 'draggable';",
          "2145:         $th_class[] = 'sticky';",
          "2146:         $this->getClassForNumericColumnType($fields_meta, $th_class);",
          "2147:         if ($col_visib && ! $col_visib_j) {",
          "2148:             $th_class[] = 'hide';",
          "2151:         if ($condition_field) {",
          "2152:             $th_class[] = 'condition';",
          "2155:         $draggable_html .= ' class=\"' . implode(' ', $th_class) . '\"';",
          "2157:         $draggable_html .= ' data-column=\"'",
          "2158:             . htmlspecialchars((string) $fields_meta->name) . '\">';",
          "2160:         $draggable_html .= htmlspecialchars((string) $fields_meta->name);",
          "2162:         $draggable_html .= \"\\n\" . $comments . '</th>';",
          "2164:         return $draggable_html;",
          "",
          "[Added Lines]",
          "2135:         $colVisib,",
          "2136:         $colVisibElement,",
          "2137:         $conditionField,",
          "2138:         FieldMetadata $fieldsMeta,",
          "2141:         $draggableHtml = '<th';",
          "2142:         $thClass = [];",
          "2143:         $thClass[] = 'draggable';",
          "2144:         $thClass[] = 'sticky';",
          "2145:         $this->getClassForNumericColumnType($fieldsMeta, $thClass);",
          "2146:         if ($colVisib && ! $colVisibElement) {",
          "2147:             $thClass[] = 'hide';",
          "2150:         if ($conditionField) {",
          "2151:             $thClass[] = 'condition';",
          "2154:         $draggableHtml .= ' class=\"' . implode(' ', $thClass) . '\"';",
          "2156:         $draggableHtml .= ' data-column=\"'",
          "2157:             . htmlspecialchars((string) $fieldsMeta->name) . '\">';",
          "2159:         $draggableHtml .= htmlspecialchars((string) $fieldsMeta->name);",
          "2161:         $draggableHtml .= \"\\n\" . $comments . '</th>';",
          "2163:         return $draggableHtml;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2180:     private function getColumnAtRightSide(",
          "2181:         array &$displayParts,",
          "2183:         $colspan",
          "2184:     ) {",
          "",
          "[Removed Lines]",
          "2182:         $full_or_partial_text_link,",
          "2185:         $right_column_html = '';",
          "2186:         $display_params = $this->properties['display_params'];",
          "",
          "[Added Lines]",
          "2181:         $fullOrPartialTextLink,",
          "2184:         $rightColumnHtml = '';",
          "2185:         $displayParams = $this->properties['display_params'];",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2194:             || ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE))",
          "2195:             && ($displayParts['text_btn'] == '1')",
          "2196:         ) {",
          "2199:                 && ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE) ? 4 : 1;",
          "2202:                 . '<th class=\"column_action print_ignore\" ' . $colspan . '>'",
          "2204:                 . '</th>';",
          "2205:         } elseif (",
          "2206:             ($GLOBALS['cfg']['RowActionLinks'] === self::POSITION_LEFT)",
          "",
          "[Removed Lines]",
          "2197:             $display_params['emptyafter']",
          "2198:                 = ($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)",
          "2201:             $right_column_html .= \"\\n\"",
          "2203:                 . $full_or_partial_text_link",
          "",
          "[Added Lines]",
          "2196:             $displayParams['emptyafter'] = ($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)",
          "2199:             $rightColumnHtml .= \"\\n\"",
          "2201:                 . $fullOrPartialTextLink",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2216:                 = ($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)",
          "2217:                 && ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE) ? 4 : 1;",
          "2220:                 . '></td>';",
          "2221:         }",
          "2226:     }",
          "",
          "[Removed Lines]",
          "2215:             $display_params['emptyafter']",
          "2219:             $right_column_html .= \"\\n\" . '<td class=\"print_ignore\" ' . $colspan",
          "2223:         $this->properties['display_params'] = $display_params;",
          "2225:         return $right_column_html;",
          "",
          "[Added Lines]",
          "2213:             $displayParams['emptyafter']",
          "2217:             $rightColumnHtml .= \"\\n\" . '<td class=\"print_ignore\" ' . $colspan",
          "2221:         $this->properties['display_params'] = $displayParams;",
          "2223:         return $rightColumnHtml;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2326:     private function addClass(",
          "2327:         $class,",
          "2329:         FieldMetadata $meta,",
          "2330:         $nowrap,",
          "2334:     ) {",
          "2335:         $classes = [",
          "2336:             $class,",
          "",
          "[Removed Lines]",
          "2328:         $condition_field,",
          "2331:         $is_field_truncated = false,",
          "2332:         $transformation_plugin = '',",
          "2333:         $default_function = ''",
          "",
          "[Added Lines]",
          "2326:         $conditionField,",
          "2329:         $isFieldTruncated = false,",
          "2330:         $transformationPlugin = '',",
          "2331:         $defaultFunction = ''",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2341:             $classes[] = preg_replace('/\\//', '_', $meta->internalMediaType);",
          "2342:         }",
          "2345:             $classes[] = 'condition';",
          "2346:         }",
          "2349:             $classes[] = 'truncated';",
          "2350:         }",
          "2353:         $orgFullColName = $this->properties['db'] . '.' . $meta->orgtable",
          "2354:             . '.' . $meta->orgname;",
          "2355:         if (",
          "2358:         ) {",
          "2359:             $classes[] = 'transformed';",
          "2360:         }",
          "",
          "[Removed Lines]",
          "2344:         if ($condition_field) {",
          "2348:         if ($is_field_truncated) {",
          "2352:         $mime_map = $this->properties['mime_map'];",
          "2356:             $transformation_plugin != $default_function",
          "2357:             || ! empty($mime_map[$orgFullColName]['input_transformation'])",
          "",
          "[Added Lines]",
          "2342:         if ($conditionField) {",
          "2346:         if ($isFieldTruncated) {",
          "2350:         $mediaTypeMap = $this->properties['mime_map'];",
          "2354:             $transformationPlugin != $defaultFunction",
          "2355:             || ! empty($mediaTypeMap[$orgFullColName]['input_transformation'])",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2400:     private function getTableBody(",
          "2402:         array &$displayParts,",
          "2403:         array $map,",
          "2406:     ) {",
          "2407:         global $dbi;",
          "2410:         global $row;",
          "2420:         if (! is_array($map)) {",
          "2421:             $map = [];",
          "2422:         }",
          "2437:         } else {",
          "2438:             switch ($GLOBALS['cfg']['GridEditing']) {",
          "2439:                 case 'double-click':",
          "2443:                     break;",
          "2444:                 case 'click':",
          "2446:                     break;",
          "2447:                 default: // 'disabled'",
          "2449:                     break;",
          "2450:             }",
          "2451:         }",
          "2456:         );",
          "",
          "[Removed Lines]",
          "2401:         &$dt_result,",
          "2404:         array $analyzed_sql_results,",
          "2405:         $is_limited_display = false",
          "2412:         $table_body_html = '';",
          "2416:         $url_sql_query = $this->getUrlSqlQuery($analyzed_sql_results);",
          "2418:         $display_params = $this->properties['display_params'];",
          "2424:         $row_no                       = 0;",
          "2425:         $display_params['edit']       = [];",
          "2426:         $display_params['copy']       = [];",
          "2427:         $display_params['delete']     = [];",
          "2428:         $display_params['data']       = [];",
          "2429:         $display_params['row_delete'] = [];",
          "2430:         $this->properties['display_params'] = $display_params;",
          "2435:         if ($is_limited_display || ! $this->properties['editable']) {",
          "2436:             $grid_edit_class = '';",
          "2442:                     $grid_edit_class = 'grid_edit click2';",
          "2445:                     $grid_edit_class = 'grid_edit click1';",
          "2448:                     $grid_edit_class = '';",
          "2454:         [$col_order, $col_visib] = $this->getColumnParams(",
          "2455:             $analyzed_sql_results",
          "",
          "[Added Lines]",
          "2399:         &$dtResult,",
          "2402:         array $analyzedSqlResults,",
          "2403:         $isLimitedDisplay = false",
          "2410:         $tableBodyHtml = '';",
          "2414:         $urlSqlQuery = $this->getUrlSqlQuery($analyzedSqlResults);",
          "2416:         $displayParams = $this->properties['display_params'];",
          "2422:         $rowNumber = 0;",
          "2423:         $displayParams['edit']       = [];",
          "2424:         $displayParams['copy']       = [];",
          "2425:         $displayParams['delete']     = [];",
          "2426:         $displayParams['data']       = [];",
          "2427:         $displayParams['row_delete'] = [];",
          "2428:         $this->properties['display_params'] = $displayParams;",
          "2433:         if ($isLimitedDisplay || ! $this->properties['editable']) {",
          "2434:             $gridEditClass = '';",
          "2440:                     $gridEditClass = 'grid_edit click2';",
          "2443:                     $gridEditClass = 'grid_edit click1';",
          "2446:                     $gridEditClass = '';",
          "2452:         [$colOrder, $colVisib] = $this->getColumnParams(",
          "2453:             $analyzedSqlResults",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2470:         $whereClauseMap = $this->properties['whereClauseMap'];",
          "2473:             if (",
          "2476:             ) {",
          "2479:                 );",
          "2480:             }",
          "2483:             if ($GLOBALS['cfg']['BrowsePointerEnable'] != true) {",
          "2485:             }",
          "2487:             if ($GLOBALS['cfg']['BrowseMarkerEnable'] != true) {",
          "2489:             }",
          "",
          "[Removed Lines]",
          "2471:         while ($row = $dbi->fetchRow($dt_result)) {",
          "2474:                 ($row_no != 0) && ($_SESSION['tmpval']['repeat_cells'] != 0)",
          "2475:                 && ! $row_no % $_SESSION['tmpval']['repeat_cells']",
          "2477:                 $table_body_html .= $this->getRepeatingHeaders(",
          "2478:                     $display_params",
          "2482:             $tr_class = [];",
          "2484:                 $tr_class[] = 'nopointer';",
          "2488:                 $tr_class[] = 'nomarker';",
          "2492:             $classes = (empty($tr_class) ? ' ' : 'class=\"' . implode(' ', $tr_class) . '\"');",
          "2493:             $table_body_html .= '<tr ' . $classes . ' >';",
          "2498:             $del_url = null;",
          "2499:             $del_str = null;",
          "2500:             $edit_str = null;",
          "2501:             $js_conf = null;",
          "2502:             $copy_url = null;",
          "2503:             $copy_str = null;",
          "2504:             $edit_url = null;",
          "",
          "[Added Lines]",
          "2469:         while ($row = $dbi->fetchRow($dtResult)) {",
          "2472:                 ($rowNumber != 0) && ($_SESSION['tmpval']['repeat_cells'] != 0)",
          "2473:                 && ! $rowNumber % $_SESSION['tmpval']['repeat_cells']",
          "2475:                 $tableBodyHtml .= $this->getRepeatingHeaders(",
          "2476:                     $displayParams",
          "2480:             $trClass = [];",
          "2482:                 $trClass[] = 'nopointer';",
          "2486:                 $trClass[] = 'nomarker';",
          "2490:             $classes = (empty($trClass) ? ' ' : 'class=\"' . implode(' ', $trClass) . '\"');",
          "2491:             $tableBodyHtml .= '<tr ' . $classes . ' >';",
          "2496:             $deleteUrl = null;",
          "2497:             $deleteString = null;",
          "2498:             $editString = null;",
          "2499:             $jsConf = null;",
          "2500:             $copyUrl = null;",
          "2501:             $copyString = null;",
          "2502:             $editUrl = null;",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2512:                 $expressions = [];",
          "2514:                 if (",
          "2517:                 ) {",
          "2519:                 }",
          "",
          "[Removed Lines]",
          "2515:                     isset($analyzed_sql_results['statement'])",
          "2516:                     && $analyzed_sql_results['statement'] instanceof SelectStatement",
          "2518:                     $expressions = $analyzed_sql_results['statement']->expr;",
          "",
          "[Added Lines]",
          "2513:                     isset($analyzedSqlResults['statement'])",
          "2514:                     && $analyzedSqlResults['statement'] instanceof SelectStatement",
          "2516:                     $expressions = $analyzedSqlResults['statement']->expr;",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2530:                     $this->properties['fields_cnt'],",
          "2531:                     $this->properties['fields_meta'],",
          "2532:                     $row,",
          "",
          "[Removed Lines]",
          "2528:                 [$where_clause, $clause_is_unique, $condition_array] = Util::getUniqueCondition(",
          "2529:                     $dt_result,",
          "",
          "[Added Lines]",
          "2526:                 [$whereClause, $clauseIsUnique, $conditionArray] = Util::getUniqueCondition(",
          "2527:                     $dtResult,",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2534:                     $this->properties['table'],",
          "2535:                     $expressions",
          "2536:                 );",
          "2538:                 $this->properties['whereClauseMap'] = $whereClauseMap;",
          "2541:                 if ($displayParts['edit_lnk'] === self::UPDATE_ROW) {",
          "2542:                     [",
          "2553:                 }",
          "2566:                 if (",
          "2567:                     ($GLOBALS['cfg']['RowActionLinks'] === self::POSITION_LEFT)",
          "2568:                     || ($GLOBALS['cfg']['RowActionLinks'] === self::POSITION_BOTH)",
          "2569:                 ) {",
          "2571:                         'position' => self::POSITION_LEFT,",
          "2579:                         'is_ajax' => Response::getInstance()->isAjax(),",
          "2581:                     ]);",
          "2582:                 } elseif ($GLOBALS['cfg']['RowActionLinks'] === self::POSITION_NONE) {",
          "2584:                         'position' => self::POSITION_NONE,",
          "2592:                         'is_ajax' => Response::getInstance()->isAjax(),",
          "2594:                     ]);",
          "2595:                 }",
          "2596:             }",
          "",
          "[Removed Lines]",
          "2537:                 $whereClauseMap[$row_no][$this->properties['table']] = $where_clause;",
          "2543:                         $edit_url,",
          "2544:                         $copy_url,",
          "2545:                         $edit_str,",
          "2546:                         $copy_str,",
          "2547:                     ]",
          "2548:                             = $this->getModifiedLinks(",
          "2549:                                 $where_clause,",
          "2550:                                 $clause_is_unique,",
          "2551:                                 $url_sql_query",
          "2552:                             );",
          "2556:                 [$del_url, $del_str, $js_conf]",
          "2557:                     = $this->getDeleteAndKillLinks(",
          "2558:                         $where_clause,",
          "2559:                         $clause_is_unique,",
          "2560:                         $url_sql_query,",
          "2561:                         $displayParts['del_lnk'],",
          "2562:                         $row",
          "2563:                     );",
          "2570:                     $table_body_html .= $this->template->render('display/results/checkbox_and_links', [",
          "2572:                         'has_checkbox' => ! empty($del_url) && $displayParts['del_lnk'] !== self::KILL_PROCESS,",
          "2573:                         'edit' => ['url' => $edit_url, 'string' => $edit_str, 'clause_is_unique' => $clause_is_unique],",
          "2574:                         'copy' => ['url' => $copy_url, 'string' => $copy_str],",
          "2575:                         'delete' => ['url' => $del_url, 'string' => $del_str],",
          "2576:                         'row_number' => $row_no,",
          "2577:                         'where_clause' => $where_clause,",
          "2578:                         'condition' => json_encode($condition_array),",
          "2580:                         'js_conf' => $js_conf ?? '',",
          "2583:                     $table_body_html .= $this->template->render('display/results/checkbox_and_links', [",
          "2585:                         'has_checkbox' => ! empty($del_url) && $displayParts['del_lnk'] !== self::KILL_PROCESS,",
          "2586:                         'edit' => ['url' => $edit_url, 'string' => $edit_str, 'clause_is_unique' => $clause_is_unique],",
          "2587:                         'copy' => ['url' => $copy_url, 'string' => $copy_str],",
          "2588:                         'delete' => ['url' => $del_url, 'string' => $del_str],",
          "2589:                         'row_number' => $row_no,",
          "2590:                         'where_clause' => $where_clause,",
          "2591:                         'condition' => json_encode($condition_array),",
          "2593:                         'js_conf' => $js_conf ?? '',",
          "",
          "[Added Lines]",
          "2535:                 $whereClauseMap[$rowNumber][$this->properties['table']] = $whereClause;",
          "2541:                         $editUrl,",
          "2542:                         $copyUrl,",
          "2543:                         $editString,",
          "2544:                         $copyString,",
          "2545:                     ] = $this->getModifiedLinks(",
          "2546:                         $whereClause,",
          "2547:                         $clauseIsUnique,",
          "2548:                         $urlSqlQuery",
          "2549:                     );",
          "2553:                 [$deleteUrl, $deleteString, $jsConf] = $this->getDeleteAndKillLinks(",
          "2554:                     $whereClause,",
          "2555:                     $clauseIsUnique,",
          "2556:                     $urlSqlQuery,",
          "2557:                     $displayParts['del_lnk'],",
          "2558:                     $row",
          "2559:                 );",
          "2566:                     $tableBodyHtml .= $this->template->render('display/results/checkbox_and_links', [",
          "2568:                         'has_checkbox' => ! empty($deleteUrl) && $displayParts['del_lnk'] !== self::KILL_PROCESS,",
          "2569:                         'edit' => ['url' => $editUrl, 'string' => $editString, 'clause_is_unique' => $clauseIsUnique],",
          "2570:                         'copy' => ['url' => $copyUrl, 'string' => $copyString],",
          "2571:                         'delete' => ['url' => $deleteUrl, 'string' => $deleteString],",
          "2572:                         'row_number' => $rowNumber,",
          "2573:                         'where_clause' => $whereClause,",
          "2574:                         'condition' => json_encode($conditionArray),",
          "2576:                         'js_conf' => $jsConf ?? '',",
          "2579:                     $tableBodyHtml .= $this->template->render('display/results/checkbox_and_links', [",
          "2581:                         'has_checkbox' => ! empty($deleteUrl) && $displayParts['del_lnk'] !== self::KILL_PROCESS,",
          "2582:                         'edit' => ['url' => $editUrl, 'string' => $editString, 'clause_is_unique' => $clauseIsUnique],",
          "2583:                         'copy' => ['url' => $copyUrl, 'string' => $copyString],",
          "2584:                         'delete' => ['url' => $deleteUrl, 'string' => $deleteString],",
          "2585:                         'row_number' => $rowNumber,",
          "2586:                         'where_clause' => $whereClause,",
          "2587:                         'condition' => json_encode($conditionArray),",
          "2589:                         'js_conf' => $jsConf ?? '',",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2600:                 $this->setMimeMap();",
          "2601:             }",
          "2605:                 $row,",
          "2608:                 $map,",
          "2613:             );",
          "",
          "[Removed Lines]",
          "2603:             $table_body_html .= $this->getRowValues(",
          "2604:                 $dt_result,",
          "2606:                 $row_no,",
          "2607:                 $col_order,",
          "2609:                 $grid_edit_class,",
          "2610:                 $col_visib,",
          "2611:                 $url_sql_query,",
          "2612:                 $analyzed_sql_results",
          "",
          "[Added Lines]",
          "2599:             $tableBodyHtml .= $this->getRowValues(",
          "2600:                 $dtResult,",
          "2602:                 $rowNumber,",
          "2603:                 $colOrder,",
          "2605:                 $gridEditClass,",
          "2606:                 $colVisib,",
          "2607:                 $urlSqlQuery,",
          "2608:                 $analyzedSqlResults",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2621:                     ($GLOBALS['cfg']['RowActionLinks'] === self::POSITION_RIGHT)",
          "2622:                     || ($GLOBALS['cfg']['RowActionLinks'] === self::POSITION_BOTH)",
          "2623:                 ) {",
          "2625:                         'position' => self::POSITION_RIGHT,",
          "2627:                         'edit' => [",
          "2631:                         ],",
          "2637:                         'is_ajax' => Response::getInstance()->isAjax(),",
          "2639:                     ]);",
          "2640:                 }",
          "2641:             }",
          "2646:         }",
          "2649:     }",
          "",
          "[Removed Lines]",
          "2624:                     $table_body_html .= $this->template->render('display/results/checkbox_and_links', [",
          "2626:                         'has_checkbox' => ! empty($del_url) && $displayParts['del_lnk'] !== self::KILL_PROCESS,",
          "2628:                             'url' => $edit_url,",
          "2629:                             'string' => $edit_str,",
          "2630:                             'clause_is_unique' => $clause_is_unique ?? true,",
          "2632:                         'copy' => ['url' => $copy_url, 'string' => $copy_str],",
          "2633:                         'delete' => ['url' => $del_url, 'string' => $del_str],",
          "2634:                         'row_number' => $row_no,",
          "2635:                         'where_clause' => $where_clause ?? '',",
          "2636:                         'condition' => json_encode($condition_array ?? []),",
          "2638:                         'js_conf' => $js_conf ?? '',",
          "2643:             $table_body_html .= '</tr>';",
          "2644:             $table_body_html .= \"\\n\";",
          "2645:             $row_no++;",
          "2648:         return $table_body_html;",
          "",
          "[Added Lines]",
          "2620:                     $tableBodyHtml .= $this->template->render('display/results/checkbox_and_links', [",
          "2622:                         'has_checkbox' => ! empty($deleteUrl) && $displayParts['del_lnk'] !== self::KILL_PROCESS,",
          "2624:                             'url' => $editUrl,",
          "2625:                             'string' => $editString,",
          "2626:                             'clause_is_unique' => $clauseIsUnique ?? true,",
          "2628:                         'copy' => ['url' => $copyUrl, 'string' => $copyString],",
          "2629:                         'delete' => ['url' => $deleteUrl, 'string' => $deleteString],",
          "2630:                         'row_number' => $rowNumber,",
          "2631:                         'where_clause' => $whereClause ?? '',",
          "2632:                         'condition' => json_encode($conditionArray ?? []),",
          "2634:                         'js_conf' => $jsConf ?? '',",
          "2639:             $tableBodyHtml .= '</tr>';",
          "2640:             $tableBodyHtml .= \"\\n\";",
          "2641:             $rowNumber++;",
          "2644:         return $tableBodyHtml;",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2656:     private function setMimeMap()",
          "2657:     {",
          "2661:         $added = [];",
          "2663:         for ($currentColumn = 0; $currentColumn < $this->properties['fields_cnt']; ++$currentColumn) {",
          "2665:             $orgFullTableName = $this->properties['db'] . '.' . $meta->orgtable;",
          "2667:             if (",
          "",
          "[Removed Lines]",
          "2659:         $fields_meta = $this->properties['fields_meta'];",
          "2660:         $mimeMap = [];",
          "2664:             $meta = $fields_meta[$currentColumn];",
          "",
          "[Added Lines]",
          "2655:         $fieldsMeta = $this->properties['fields_meta'];",
          "2656:         $mediaTypeMap = [];",
          "2660:             $meta = $fieldsMeta[$currentColumn];",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2674:                 continue;",
          "2675:             }",
          "2679:                 $this->transformations->getMime($this->properties['db'], $meta->orgtable, false, true) ?? []",
          "2680:             );",
          "2681:             $added[$orgFullTableName] = true;",
          "",
          "[Removed Lines]",
          "2677:             $mimeMap = array_merge(",
          "2678:                 $mimeMap,",
          "",
          "[Added Lines]",
          "2673:             $mediaTypeMap = array_merge(",
          "2674:                 $mediaTypeMap,",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2698:                 $str = ' ' . strtoupper($which[1]);",
          "2699:                 $isShowProcessList = strpos($str, 'PROCESSLIST') > 0;",
          "2700:                 if ($isShowProcessList) {",
          "2702:                         'mimetype' => 'Text_Plain',",
          "2703:                         'transformation' => 'output/Text_Plain_Sql.php',",
          "2704:                     ];",
          "",
          "[Removed Lines]",
          "2701:                     $mimeMap['..Info'] = [",
          "",
          "[Added Lines]",
          "2697:                     $mediaTypeMap['..Info'] = [",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2709:                     $this->properties['sql_query']",
          "2710:                 );",
          "2711:                 if ($isShowCreateTable) {",
          "2713:                         'mimetype' => 'Text_Plain',",
          "2714:                         'transformation' => 'output/Text_Plain_Sql.php',",
          "2715:                     ];",
          "",
          "[Removed Lines]",
          "2712:                     $mimeMap['..Create Table'] = [",
          "",
          "[Added Lines]",
          "2708:                     $mediaTypeMap['..Create Table'] = [",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2717:             }",
          "2718:         }",
          "2721:     }",
          "",
          "[Removed Lines]",
          "2720:         $this->properties['mime_map'] = $mimeMap;",
          "",
          "[Added Lines]",
          "2716:         $this->properties['mime_map'] = $mediaTypeMap;",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2748:     private function getRowValues(",
          "2750:         array $row,",
          "2753:         array $map,",
          "2758:     ) {",
          "2771:         $whereClauseMap = $this->properties['whereClauseMap'];",
          "",
          "[Removed Lines]",
          "2749:         &$dt_result,",
          "2751:         $row_no,",
          "2752:         $col_order,",
          "2754:         $grid_edit_class,",
          "2755:         $col_visib,",
          "2756:         $url_sql_query,",
          "2757:         array $analyzed_sql_results",
          "2759:         $row_values_html = '';",
          "2763:         $sql_query = $this->properties['sql_query'];",
          "2765:         $fields_meta = $this->properties['fields_meta'];",
          "2766:         $highlight_columns = $this->properties['highlight_columns'];",
          "2767:         $mime_map = $this->properties['mime_map'];",
          "2769:         $row_info = $this->getRowInfoForSpecialLinks($row, $col_order);",
          "",
          "[Added Lines]",
          "2745:         &$dtResult,",
          "2747:         $rowNumber,",
          "2748:         $colOrder,",
          "2750:         $gridEditClass,",
          "2751:         $colVisib,",
          "2752:         $urlSqlQuery,",
          "2753:         array $analyzedSqlResults",
          "2755:         $rowValuesHtml = '';",
          "2759:         $sqlQuery = $this->properties['sql_query'];",
          "2761:         $fieldsMeta = $this->properties['fields_meta'];",
          "2762:         $highlightColumns = $this->properties['highlight_columns'];",
          "2763:         $mediaTypeMap = $this->properties['mime_map'];",
          "2765:         $rowInfo = $this->getRowInfoForSpecialLinks($row, $colOrder);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2778:         for ($currentColumn = 0; $currentColumn < $columnCount; ++$currentColumn) {",
          "2789:                 ? 'hide'",
          "2790:                 : '';",
          "2799:             $class = $this->getClassesForColumn(",
          "2805:             );",
          "2815:                 Core::class,",
          "2816:                 'mimeDefaultFunction',",
          "2817:             ]; // default_function",
          "2821:             if (",
          "2822:                 $GLOBALS['cfgRelation']['mimework']",
          "2823:                 && $GLOBALS['cfg']['BrowseMIME']",
          "2824:             ) {",
          "2825:                 if (",
          "2828:                 ) {",
          "2839:                             );",
          "2843:                             );",
          "2845:                             $meta->internalMediaType = str_replace(",
          "2846:                                 '_',",
          "2847:                                 '/',",
          "2849:                             );",
          "2850:                         }",
          "2851:                     }",
          "",
          "[Removed Lines]",
          "2780:             $i = is_array($col_order) ? $col_order[$currentColumn] : $currentColumn;",
          "2782:             $meta    = $fields_meta[$i];",
          "2783:             $orgFullColName",
          "2784:                 = $this->properties['db'] . '.' . $meta->orgtable . '.' . $meta->orgname;",
          "2786:             $not_null_class = $meta->isNotNull() ? 'not_null' : '';",
          "2787:             $relation_class = isset($map[$meta->name]) ? 'relation' : '';",
          "2788:             $hide_class = is_array($col_visib) && isset($col_visib[$currentColumn]) && ! $col_visib[$currentColumn]",
          "2791:             $grid_edit = $meta->orgtable != '' ? $grid_edit_class : '';",
          "2794:             $field_type_class",
          "2795:                 = $this->getClassForDateTimeRelatedFields($meta);",
          "2797:             $is_field_truncated = false;",
          "2800:                 $grid_edit,",
          "2801:                 $not_null_class,",
          "2802:                 $relation_class,",
          "2803:                 $hide_class,",
          "2804:                 $field_type_class",
          "2809:             $condition_field = isset($highlight_columns)",
          "2810:                 && (isset($highlight_columns[$meta->name])",
          "2811:                 || isset($highlight_columns[Util::backquote($meta->name)]));",
          "2814:             $default_function = [",
          "2818:             $transformation_plugin = $default_function;",
          "2819:             $transform_options = [];",
          "2826:                     isset($mime_map[$orgFullColName]['mimetype'])",
          "2827:                     && ! empty($mime_map[$orgFullColName]['transformation'])",
          "2829:                     $file = $mime_map[$orgFullColName]['transformation'];",
          "2830:                     $include_file = 'libraries/classes/Plugins/Transformations/' . $file;",
          "2832:                     if (@file_exists($include_file)) {",
          "2833:                         $class_name = $this->transformations->getClassName($include_file);",
          "2834:                         if (class_exists($class_name)) {",
          "2836:                             $plugin_manager = null;",
          "2837:                             $transformation_plugin = new $class_name(",
          "2838:                                 $plugin_manager",
          "2841:                             $transform_options = $this->transformations->getOptions(",
          "2842:                                 $mime_map[$orgFullColName]['transformation_options'] ?? ''",
          "2848:                                 $mime_map[$orgFullColName]['mimetype']",
          "",
          "[Added Lines]",
          "2776:             $i = is_array($colOrder) ? $colOrder[$currentColumn] : $currentColumn;",
          "2778:             $meta = $fieldsMeta[$i];",
          "2779:             $orgFullColName = $this->properties['db'] . '.' . $meta->orgtable . '.' . $meta->orgname;",
          "2781:             $notNullClass = $meta->isNotNull() ? 'not_null' : '';",
          "2782:             $relationClass = isset($map[$meta->name]) ? 'relation' : '';",
          "2783:             $hideClass = is_array($colVisib) && isset($colVisib[$currentColumn]) && ! $colVisib[$currentColumn]",
          "2786:             $gridEdit = $meta->orgtable != '' ? $gridEditClass : '';",
          "2789:             $fieldTypeClass = $this->getClassForDateTimeRelatedFields($meta);",
          "2791:             $isFieldTruncated = false;",
          "2794:                 $gridEdit,",
          "2795:                 $notNullClass,",
          "2796:                 $relationClass,",
          "2797:                 $hideClass,",
          "2798:                 $fieldTypeClass",
          "2803:             $conditionField = isset($highlightColumns)",
          "2804:                 && (isset($highlightColumns[$meta->name])",
          "2805:                 || isset($highlightColumns[Util::backquote($meta->name)]));",
          "2808:             $defaultFunction = [",
          "2812:             $transformationPlugin = $defaultFunction;",
          "2813:             $transformOptions = [];",
          "2820:                     isset($mediaTypeMap[$orgFullColName]['mimetype'])",
          "2821:                     && ! empty($mediaTypeMap[$orgFullColName]['transformation'])",
          "2823:                     $file = $mediaTypeMap[$orgFullColName]['transformation'];",
          "2824:                     $includeFile = 'libraries/classes/Plugins/Transformations/' . $file;",
          "2826:                     if (@file_exists($includeFile)) {",
          "2827:                         $className = $this->transformations->getClassName($includeFile);",
          "2828:                         if (class_exists($className)) {",
          "2830:                             $pluginManager = null;",
          "2831:                             $transformationPlugin = new $className(",
          "2832:                                 $pluginManager",
          "2835:                             $transformOptions = $this->transformations->getOptions(",
          "2836:                                 $mediaTypeMap[$orgFullColName]['transformation_options'] ?? ''",
          "2842:                                 $mediaTypeMap[$orgFullColName]['mimetype']",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2864:                 && ! $_SESSION['tmpval']['hide_transformation']",
          "2865:             ) {",
          "2866:                 include_once $this->transformationInfo[$dbLower][$tblLower][$nameLower][0];",
          "2871:                 );",
          "2873:                 $orgTable = mb_strtolower($meta->orgtable);",
          "",
          "[Removed Lines]",
          "2867:                 $transformation_plugin = new $this->transformationInfo[$dbLower][$tblLower][$nameLower][1](null);",
          "2869:                 $transform_options = $this->transformations->getOptions(",
          "2870:                     $mime_map[$orgFullColName]['transformation_options'] ?? ''",
          "",
          "[Added Lines]",
          "2861:                 $transformationPlugin = new $this->transformationInfo[$dbLower][$tblLower][$nameLower][1](null);",
          "2863:                 $transformOptions = $this->transformations->getOptions(",
          "2864:                     $mediaTypeMap[$orgFullColName]['transformation_options'] ?? ''",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2884:             if (! empty($specialSchemaLinks[$dbLower][$tblLower][$nameLower])) {",
          "2886:                     $specialSchemaLinks,",
          "2887:                     $row[$i],",
          "2889:                     mb_strtolower($meta->orgname)",
          "2890:                 );",
          "2895:                     2 => true,",
          "2896:                 ];",
          "",
          "[Removed Lines]",
          "2885:                 $linking_url = $this->getSpecialLinkUrl(",
          "2888:                     $row_info,",
          "2891:                 $transformation_plugin = new Text_Plain_Link();",
          "2893:                 $transform_options  = [",
          "2894:                     0 => $linking_url,",
          "",
          "[Added Lines]",
          "2879:                 $linkingUrl = $this->getSpecialLinkUrl(",
          "2882:                     $rowInfo,",
          "2885:                 $transformationPlugin = new Text_Plain_Link();",
          "2887:                 $transformOptions  = [",
          "2888:                     0 => $linkingUrl,",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2905:             $expressions = [];",
          "2907:             if (",
          "2910:             ) {",
          "2912:             }",
          "",
          "[Removed Lines]",
          "2908:                 isset($analyzed_sql_results['statement'])",
          "2909:                 && $analyzed_sql_results['statement'] instanceof SelectStatement",
          "2911:                 $expressions = $analyzed_sql_results['statement']->expr;",
          "",
          "[Added Lines]",
          "2902:                 isset($analyzedSqlResults['statement'])",
          "2903:                 && $analyzedSqlResults['statement'] instanceof SelectStatement",
          "2905:                 $expressions = $analyzedSqlResults['statement']->expr;",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2924:                     $this->properties['fields_cnt'],",
          "2925:                     $this->properties['fields_meta'],",
          "2926:                     $row,",
          "",
          "[Removed Lines]",
          "2921:             if (! isset($whereClauseMap[$row_no][$meta->orgtable])) {",
          "2922:                 $unique_conditions = Util::getUniqueCondition(",
          "2923:                     $dt_result,",
          "",
          "[Added Lines]",
          "2915:             if (! isset($whereClauseMap[$rowNumber][$meta->orgtable])) {",
          "2916:                 $uniqueConditions = Util::getUniqueCondition(",
          "2917:                     $dtResult,",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2928:                     $meta->orgtable,",
          "2929:                     $expressions",
          "2930:                 );",
          "2932:             }",
          "2935:                 'db'            => $this->properties['db'],",
          "2936:                 'table'         => $meta->orgtable,",
          "2939:                 'transform_key' => $meta->orgname,",
          "2940:             ];",
          "2944:             }",
          "",
          "[Removed Lines]",
          "2931:                 $whereClauseMap[$row_no][$meta->orgtable] = $unique_conditions[0];",
          "2934:             $_url_params = [",
          "2937:                 'where_clause_sign' => Core::signSqlQuery($whereClauseMap[$row_no][$meta->orgtable]),",
          "2938:                 'where_clause'  => $whereClauseMap[$row_no][$meta->orgtable],",
          "2942:             if (! empty($sql_query)) {",
          "2943:                 $_url_params['sql_query'] = $url_sql_query;",
          "2946:             $transform_options['wrapper_link'] = Url::getCommon($_url_params);",
          "2947:             $transform_options['wrapper_params'] = $_url_params;",
          "2949:             $display_params = $this->properties['display_params'];",
          "",
          "[Added Lines]",
          "2925:                 $whereClauseMap[$rowNumber][$meta->orgtable] = $uniqueConditions[0];",
          "2928:             $urlParams = [",
          "2931:                 'where_clause_sign' => Core::signSqlQuery($whereClauseMap[$rowNumber][$meta->orgtable]),",
          "2932:                 'where_clause'  => $whereClauseMap[$rowNumber][$meta->orgtable],",
          "2936:             if (! empty($sqlQuery)) {",
          "2937:                 $urlParams['sql_query'] = $urlSqlQuery;",
          "2940:             $transformOptions['wrapper_link'] = Url::getCommon($urlParams);",
          "2941:             $transformOptions['wrapper_params'] = $urlParams;",
          "2943:             $displayParams = $this->properties['display_params'];",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2958:             ) {",
          "2974:             } elseif ($meta->isMappedTypeGeometry) {",
          "",
          "[Removed Lines]",
          "2961:                 $display_params['data'][$row_no][$i]",
          "2962:                     = $this->getDataCellForNumericColumns(",
          "2963:                         $row[$i] === null ? null : (string) $row[$i],",
          "2964:                         $class,",
          "2965:                         $condition_field,",
          "2966:                         $meta,",
          "2967:                         $map,",
          "2968:                         $is_field_truncated,",
          "2969:                         $analyzed_sql_results,",
          "2970:                         $transformation_plugin,",
          "2971:                         $default_function,",
          "2972:                         $transform_options",
          "2973:                     );",
          "",
          "[Added Lines]",
          "2955:                 $displayParams['data'][$rowNumber][$i] = $this->getDataCellForNumericColumns(",
          "2956:                     $row[$i] === null ? null : (string) $row[$i],",
          "2957:                     $class,",
          "2958:                     $conditionField,",
          "2959:                     $meta,",
          "2960:                     $map,",
          "2961:                     $isFieldTruncated,",
          "2962:                     $analyzedSqlResults,",
          "2963:                     $transformationPlugin,",
          "2964:                     $defaultFunction,",
          "2965:                     $transformOptions",
          "2966:                 );",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2979:                 $class = str_replace('grid_edit', '', $class);",
          "2994:             } else {",
          "3013:             }",
          "3021:             } else {",
          "3024:             }",
          "3027:         }",
          "3030:     }",
          "3042:     private function getSpecialLinkUrl(",
          "3043:         array $specialSchemaLinks,",
          "3047:     ) {",
          "3049:         $db = mb_strtolower($this->properties['db']);",
          "3050:         $table = mb_strtolower($this->properties['table']);",
          "3055:         } else {",
          "3062:         }",
          "3068:         }",
          "3076:                 continue;",
          "3077:             }",
          "3085:                 continue;",
          "3086:             }",
          "3087:         }",
          "3091:     }",
          "3102:     {",
          "3107:         for ($n = 0; $n < $this->properties['fields_cnt']; ++$n) {",
          "3111:         }",
          "3114:     }",
          "",
          "[Removed Lines]",
          "2981:                 $display_params['data'][$row_no][$i]",
          "2982:                     = $this->getDataCellForGeometryColumns(",
          "2983:                         $row[$i],",
          "2984:                         $class,",
          "2985:                         $meta,",
          "2986:                         $map,",
          "2987:                         $_url_params,",
          "2988:                         $condition_field,",
          "2989:                         $transformation_plugin,",
          "2990:                         $default_function,",
          "2991:                         $transform_options,",
          "2992:                         $analyzed_sql_results",
          "2993:                     );",
          "2997:                 $display_params['data'][$row_no][$i]",
          "2998:                     = $this->getDataCellForNonNumericColumns(",
          "2999:                         $row[$i],",
          "3000:                         $class,",
          "3001:                         $meta,",
          "3002:                         $map,",
          "3003:                         $_url_params,",
          "3004:                         $condition_field,",
          "3005:                         $transformation_plugin,",
          "3006:                         $default_function,",
          "3007:                         $transform_options,",
          "3008:                         $is_field_truncated,",
          "3009:                         $analyzed_sql_results,",
          "3010:                         $dt_result,",
          "3011:                         $i",
          "3012:                     );",
          "3016:             $row_values_html .= $display_params['data'][$row_no][$i];",
          "3018:             if (isset($display_params['rowdata'][$i][$row_no])) {",
          "3019:                 $display_params['rowdata'][$i][$row_no]",
          "3020:                     .= $display_params['data'][$row_no][$i];",
          "3022:                 $display_params['rowdata'][$i][$row_no]",
          "3023:                     = $display_params['data'][$row_no][$i];",
          "3026:             $this->properties['display_params'] = $display_params;",
          "3029:         return $row_values_html;",
          "3044:         $column_value,",
          "3045:         array $row_info,",
          "3046:         string $field_name",
          "3048:         $linking_url_params = [];",
          "3051:         $link_relations = $specialSchemaLinks[$db][$table][$field_name];",
          "3053:         if (! is_array($link_relations['link_param'])) {",
          "3054:             $linking_url_params[$link_relations['link_param']] = $column_value;",
          "3058:             $sql = 'SELECT `' . $column_value . '` FROM `'",
          "3059:                 . $row_info[$link_relations['link_param'][1]] . '`.`'",
          "3060:                 . $row_info[$link_relations['link_param'][2]] . '`';",
          "3061:             $linking_url_params[$link_relations['link_param'][0]] = $sql;",
          "3064:         $divider = strpos($link_relations['default_page'], '?') ? '&' : '?';",
          "3065:         if (empty($link_relations['link_dependancy_params'])) {",
          "3066:             return $link_relations['default_page']",
          "3067:                 . Url::getCommonRaw($linking_url_params, $divider);",
          "3070:         foreach ($link_relations['link_dependancy_params'] as $new_param) {",
          "3073:             if (is_array($new_param['param_info'])) {",
          "3074:                 $linking_url_params[$new_param['param_info'][0]]",
          "3075:                     = $new_param['param_info'][1];",
          "3079:             $linking_url_params[$new_param['param_info']]",
          "3080:                 = $row_info[mb_strtolower($new_param['column_name'])];",
          "3084:             if (empty($row_info['routine_type'])) {",
          "3089:         return $link_relations['default_page']",
          "3090:             . Url::getCommonRaw($linking_url_params, $divider);",
          "3101:     private function getRowInfoForSpecialLinks(array $row, $col_order)",
          "3103:         $row_info = [];",
          "3105:         $fields_meta = $this->properties['fields_meta'];",
          "3108:             $m = is_array($col_order) ? $col_order[$n] : $n;",
          "3109:             $row_info[mb_strtolower($fields_meta[$m]->orgname)]",
          "3110:                 = $row[$m];",
          "3113:         return $row_info;",
          "",
          "[Added Lines]",
          "2974:                 $displayParams['data'][$rowNumber][$i] = $this->getDataCellForGeometryColumns(",
          "2975:                     $row[$i],",
          "2976:                     $class,",
          "2977:                     $meta,",
          "2978:                     $map,",
          "2979:                     $urlParams,",
          "2980:                     $conditionField,",
          "2981:                     $transformationPlugin,",
          "2982:                     $defaultFunction,",
          "2983:                     $transformOptions,",
          "2984:                     $analyzedSqlResults",
          "2985:                 );",
          "2989:                 $displayParams['data'][$rowNumber][$i] = $this->getDataCellForNonNumericColumns(",
          "2990:                     $row[$i],",
          "2991:                     $class,",
          "2992:                     $meta,",
          "2993:                     $map,",
          "2994:                     $urlParams,",
          "2995:                     $conditionField,",
          "2996:                     $transformationPlugin,",
          "2997:                     $defaultFunction,",
          "2998:                     $transformOptions,",
          "2999:                     $isFieldTruncated,",
          "3000:                     $analyzedSqlResults,",
          "3001:                     $dtResult,",
          "3002:                     $i",
          "3003:                 );",
          "3007:             $rowValuesHtml .= $displayParams['data'][$rowNumber][$i];",
          "3009:             if (isset($displayParams['rowdata'][$i][$rowNumber])) {",
          "3010:                 $displayParams['rowdata'][$i][$rowNumber]",
          "3011:                     .= $displayParams['data'][$rowNumber][$i];",
          "3013:                 $displayParams['rowdata'][$i][$rowNumber]",
          "3014:                     = $displayParams['data'][$rowNumber][$i];",
          "3017:             $this->properties['display_params'] = $displayParams;",
          "3020:         return $rowValuesHtml;",
          "3035:         $columnValue,",
          "3036:         array $rowInfo,",
          "3037:         string $fieldName",
          "3039:         $linkingUrlParams = [];",
          "3042:         $linkRelations = $specialSchemaLinks[$db][$table][$fieldName];",
          "3044:         if (! is_array($linkRelations['link_param'])) {",
          "3045:             $linkingUrlParams[$linkRelations['link_param']] = $columnValue;",
          "3049:             $sql = 'SELECT `' . $columnValue . '` FROM `'",
          "3050:                 . $rowInfo[$linkRelations['link_param'][1]] . '`.`'",
          "3051:                 . $rowInfo[$linkRelations['link_param'][2]] . '`';",
          "3052:             $linkingUrlParams[$linkRelations['link_param'][0]] = $sql;",
          "3055:         $divider = strpos($linkRelations['default_page'], '?') ? '&' : '?';",
          "3056:         if (empty($linkRelations['link_dependancy_params'])) {",
          "3057:             return $linkRelations['default_page']",
          "3058:                 . Url::getCommonRaw($linkingUrlParams, $divider);",
          "3061:         foreach ($linkRelations['link_dependancy_params'] as $newParam) {",
          "3064:             if (is_array($newParam['param_info'])) {",
          "3065:                 $linkingUrlParams[$newParam['param_info'][0]] = $newParam['param_info'][1];",
          "3069:             $linkingUrlParams[$newParam['param_info']] = $rowInfo[mb_strtolower($newParam['column_name'])];",
          "3073:             if (empty($rowInfo['routine_type'])) {",
          "3078:         return $linkRelations['default_page']",
          "3079:             . Url::getCommonRaw($linkingUrlParams, $divider);",
          "3090:     private function getRowInfoForSpecialLinks(array $row, $colOrder)",
          "3092:         $rowInfo = [];",
          "3094:         $fieldsMeta = $this->properties['fields_meta'];",
          "3097:             $m = is_array($colOrder) ? $colOrder[$n] : $n;",
          "3098:             $rowInfo[mb_strtolower($fieldsMeta[$m]->orgname)] = $row[$m];",
          "3101:         return $rowInfo;",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "3128:     {",
          "3129:         if (",
          "3131:             || (mb_strlen($this->properties['sql_query']) < 200)",
          "3132:         ) {",
          "3133:             return $this->properties['sql_query'];",
          "3134:         }",
          "3136:         $query = 'SELECT ' . Query::getClause(",
          "3139:             'SELECT'",
          "3140:         );",
          "3145:             'FROM'",
          "3146:         );",
          "3150:         }",
          "3152:         return $query;",
          "",
          "[Removed Lines]",
          "3127:     private function getUrlSqlQuery(array $analyzed_sql_results)",
          "3130:             ($analyzed_sql_results['querytype'] !== 'SELECT')",
          "3137:             $analyzed_sql_results['statement'],",
          "3138:             $analyzed_sql_results['parser']->list,",
          "3142:         $from_clause = Query::getClause(",
          "3143:             $analyzed_sql_results['statement'],",
          "3144:             $analyzed_sql_results['parser']->list,",
          "3148:         if (! empty($from_clause)) {",
          "3149:             $query .= ' FROM ' . $from_clause;",
          "",
          "[Added Lines]",
          "3115:     private function getUrlSqlQuery(array $analyzedSqlResults)",
          "3118:             ($analyzedSqlResults['querytype'] !== 'SELECT')",
          "3125:             $analyzedSqlResults['statement'],",
          "3126:             $analyzedSqlResults['parser']->list,",
          "3130:         $fromClause = Query::getClause(",
          "3131:             $analyzedSqlResults['statement'],",
          "3132:             $analyzedSqlResults['parser']->list,",
          "3136:         if (! empty($fromClause)) {",
          "3137:             $query .= ' FROM ' . $fromClause;",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "3167:     {",
          "3169:             $pmatable = new Table($this->properties['table'], $this->properties['db']);",
          "3176:                         continue;",
          "3177:                     }",
          "3179:                     $pmatable->removeUiProp(Table::PROP_COLUMN_ORDER);",
          "3181:                 }",
          "3182:             }",
          "3185:         } else {",
          "3188:         }",
          "3190:         return [",
          "3193:         ];",
          "3194:     }",
          "",
          "[Removed Lines]",
          "3166:     private function getColumnParams(array $analyzed_sql_results)",
          "3168:         if ($this->isSelect($analyzed_sql_results)) {",
          "3170:             $col_order = $pmatable->getUiProp(Table::PROP_COLUMN_ORDER);",
          "3172:             if ($col_order !== false) {",
          "3173:                 $fields_cnt = $this->properties['fields_cnt'];",
          "3174:                 foreach ($col_order as $value) {",
          "3175:                     if ($value < $fields_cnt) {",
          "3180:                     $fields_cnt = false;",
          "3184:             $col_visib = $pmatable->getUiProp(Table::PROP_COLUMN_VISIB);",
          "3186:             $col_order = false;",
          "3187:             $col_visib = false;",
          "3191:             $col_order,",
          "3192:             $col_visib,",
          "",
          "[Added Lines]",
          "3154:     private function getColumnParams(array $analyzedSqlResults)",
          "3156:         if ($this->isSelect($analyzedSqlResults)) {",
          "3158:             $colOrder = $pmatable->getUiProp(Table::PROP_COLUMN_ORDER);",
          "3160:             if ($colOrder !== false) {",
          "3161:                 $fieldsCount = $this->properties['fields_cnt'];",
          "3162:                 foreach ($colOrder as $value) {",
          "3163:                     if ($value < $fieldsCount) {",
          "3168:                     $fieldsCount = false;",
          "3172:             $colVisib = $pmatable->getUiProp(Table::PROP_COLUMN_VISIB);",
          "3174:             $colOrder = false;",
          "3175:             $colVisib = false;",
          "3179:             $colOrder,",
          "3180:             $colVisib,",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "3207:     private function getRepeatingHeaders(",
          "3209:     ) {",
          "3215:                 . \"\\n\" . '        &nbsp;</th>' . \"\\n\";",
          "3216:         } elseif ($GLOBALS['cfg']['RowActionLinks'] === self::POSITION_NONE) {",
          "3218:         }",
          "3222:         }",
          "3227:                 . '\">'",
          "3228:                 . \"\\n\" . '        &nbsp;</th>' . \"\\n\";",
          "3229:         }",
          "3234:     }",
          "",
          "[Removed Lines]",
          "3208:         array $display_params",
          "3210:         $header_html = '<tr>' . \"\\n\";",
          "3212:         if ($display_params['emptypre'] > 0) {",
          "3213:             $header_html .= '    <th colspan=\"'",
          "3214:                 . $display_params['emptypre'] . '\">'",
          "3217:             $header_html .= '    <th></th>' . \"\\n\";",
          "3220:         foreach ($display_params['desc'] as $val) {",
          "3221:             $header_html .= $val;",
          "3224:         if ($display_params['emptyafter'] > 0) {",
          "3225:             $header_html",
          "3226:                 .= '    <th colspan=\"' . $display_params['emptyafter']",
          "3231:         $header_html .= '</tr>' . \"\\n\";",
          "3233:         return $header_html;",
          "",
          "[Added Lines]",
          "3196:         array $displayParams",
          "3198:         $headerHtml = '<tr>' . \"\\n\";",
          "3200:         if ($displayParams['emptypre'] > 0) {",
          "3201:             $headerHtml .= '    <th colspan=\"'",
          "3202:                 . $displayParams['emptypre'] . '\">'",
          "3205:             $headerHtml .= '    <th></th>' . \"\\n\";",
          "3208:         foreach ($displayParams['desc'] as $val) {",
          "3209:             $headerHtml .= $val;",
          "3212:         if ($displayParams['emptyafter'] > 0) {",
          "3213:             $headerHtml .= '    <th colspan=\"' . $displayParams['emptyafter']",
          "3218:         $headerHtml .= '</tr>' . \"\\n\";",
          "3220:         return $headerHtml;",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "3250:     private function getModifiedLinks(",
          "3254:     ) {",
          "3256:             'db'               => $this->properties['db'],",
          "3257:             'table'            => $this->properties['table'],",
          "3261:             'goto'             => Url::getFromRoute('/sql'),",
          "3262:         ];",
          "3265:             '/table/change',",
          "3267:         );",
          "3270:             '/table/change',",
          "3272:         );",
          "3275:             'b_edit',",
          "3276:             __('Edit')",
          "3277:         );",
          "3279:             'b_insrow',",
          "3280:             __('Copy')",
          "3281:         );",
          "3283:         return [",
          "3288:         ];",
          "3289:     }",
          "",
          "[Removed Lines]",
          "3251:         $where_clause,",
          "3252:         $clause_is_unique,",
          "3253:         $url_sql_query",
          "3255:         $_url_params = [",
          "3258:             'where_clause'     => $where_clause,",
          "3259:             'clause_is_unique' => $clause_is_unique,",
          "3260:             'sql_query'        => $url_sql_query,",
          "3264:         $edit_url = Url::getFromRoute(",
          "3266:             $_url_params + ['default_action' => 'update']",
          "3269:         $copy_url = Url::getFromRoute(",
          "3271:             $_url_params + ['default_action' => 'insert']",
          "3274:         $edit_str = $this->getActionLinkContent(",
          "3278:         $copy_str = $this->getActionLinkContent(",
          "3284:             $edit_url,",
          "3285:             $copy_url,",
          "3286:             $edit_str,",
          "3287:             $copy_str,",
          "",
          "[Added Lines]",
          "3238:         $whereClause,",
          "3239:         $clauseIsUnique,",
          "3240:         $urlSqlQuery",
          "3242:         $urlParams = [",
          "3245:             'where_clause'     => $whereClause,",
          "3246:             'clause_is_unique' => $clauseIsUnique,",
          "3247:             'sql_query'        => $urlSqlQuery,",
          "3251:         $editUrl = Url::getFromRoute(",
          "3253:             $urlParams + ['default_action' => 'update']",
          "3256:         $copyUrl = Url::getFromRoute(",
          "3258:             $urlParams + ['default_action' => 'insert']",
          "3261:         $editStr = $this->getActionLinkContent(",
          "3265:         $copyStr = $this->getActionLinkContent(",
          "3271:             $editUrl,",
          "3272:             $copyUrl,",
          "3273:             $editStr,",
          "3274:             $copyStr,",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "3307:     private function getDeleteAndKillLinks(",
          "3312:         array $row",
          "3313:     ) {",
          "3314:         global $dbi;",
          "3316:         $goto = $this->properties['goto'];",
          "3320:                 'db'        => $this->properties['db'],",
          "3321:                 'table'     => $this->properties['table'],",
          "3323:                 'message_to_show' => __('The row has been deleted.'),",
          "3324:                 'goto'      => empty($goto) ? Url::getFromRoute('/table/sql') : $goto,",
          "3325:             ];",
          "3330:                 . Util::backquote($this->properties['table'])",
          "3335:                 'db'        => $this->properties['db'],",
          "3336:                 'table'     => $this->properties['table'],",
          "3338:                 'message_to_show' => __('The row has been deleted.'),",
          "3340:             ];",
          "3350:                 'db'        => $this->properties['db'],",
          "3351:                 'table'     => $this->properties['table'],",
          "3353:                 'goto'      => Url::getFromRoute('/'),",
          "3354:             ];",
          "3358:             $kill = $dbi->getKillQuery((int) $row[0]);",
          "3361:                 'db'        => 'mysql',",
          "3362:                 'sql_query' => $kill,",
          "3364:             ];",
          "3369:                 'b_drop',",
          "3370:                 __('Kill')",
          "3371:             );",
          "3372:         } else {",
          "3374:         }",
          "3376:         return [",
          "3380:         ];",
          "3381:     }",
          "",
          "[Removed Lines]",
          "3308:         $where_clause,",
          "3309:         $clause_is_unique,",
          "3310:         $url_sql_query,",
          "3311:         $del_lnk,",
          "3318:         if ($del_lnk === self::DELETE_ROW) { // delete row case",
          "3319:             $_url_params = [",
          "3322:                 'sql_query' => $url_sql_query,",
          "3327:             $lnk_goto = Url::getFromRoute('/sql', $_url_params);",
          "3329:             $del_query = 'DELETE FROM '",
          "3331:                 . ' WHERE ' . $where_clause .",
          "3332:                 ($clause_is_unique ? '' : ' LIMIT 1');",
          "3334:             $_url_params = [",
          "3337:                 'sql_query' => $del_query,",
          "3339:                 'goto'      => $lnk_goto,",
          "3341:             $del_url  = Url::getFromRoute('/sql', $_url_params);",
          "3343:             $js_conf  = 'DELETE FROM ' . Sanitize::jsFormat($this->properties['table'])",
          "3344:                 . ' WHERE ' . Sanitize::jsFormat($where_clause, false)",
          "3345:                 . ($clause_is_unique ? '' : ' LIMIT 1');",
          "3347:             $del_str = $this->getActionLinkContent('b_drop', __('Delete'));",
          "3348:         } elseif ($del_lnk === self::KILL_PROCESS) { // kill process case",
          "3349:             $_url_params = [",
          "3352:                 'sql_query' => $url_sql_query,",
          "3356:             $lnk_goto = Url::getFromRoute('/sql', $_url_params);",
          "3360:             $_url_params = [",
          "3363:                 'goto'      => $lnk_goto,",
          "3366:             $del_url = Url::getFromRoute('/sql', $_url_params);",
          "3367:             $js_conf = $kill;",
          "3368:             $del_str = Generator::getIcon(",
          "3373:             $del_url = $del_str = $js_conf = null;",
          "3377:             $del_url,",
          "3378:             $del_str,",
          "3379:             $js_conf,",
          "",
          "[Added Lines]",
          "3295:         $whereClause,",
          "3296:         $clauseIsUnique,",
          "3297:         $urlSqlQuery,",
          "3298:         $deleteLink,",
          "3305:         if ($deleteLink === self::DELETE_ROW) { // delete row case",
          "3306:             $urlParams = [",
          "3309:                 'sql_query' => $urlSqlQuery,",
          "3314:             $linkGoto = Url::getFromRoute('/sql', $urlParams);",
          "3316:             $deleteQuery = 'DELETE FROM '",
          "3318:                 . ' WHERE ' . $whereClause .",
          "3319:                 ($clauseIsUnique ? '' : ' LIMIT 1');",
          "3321:             $urlParams = [",
          "3324:                 'sql_query' => $deleteQuery,",
          "3326:                 'goto'      => $linkGoto,",
          "3328:             $deleteUrl  = Url::getFromRoute('/sql', $urlParams);",
          "3330:             $jsConf  = 'DELETE FROM ' . Sanitize::jsFormat($this->properties['table'])",
          "3331:                 . ' WHERE ' . Sanitize::jsFormat($whereClause, false)",
          "3332:                 . ($clauseIsUnique ? '' : ' LIMIT 1');",
          "3334:             $deleteString = $this->getActionLinkContent('b_drop', __('Delete'));",
          "3335:         } elseif ($deleteLink === self::KILL_PROCESS) { // kill process case",
          "3336:             $urlParams = [",
          "3339:                 'sql_query' => $urlSqlQuery,",
          "3343:             $linkGoto = Url::getFromRoute('/sql', $urlParams);",
          "3347:             $urlParams = [",
          "3350:                 'goto'      => $linkGoto,",
          "3353:             $deleteUrl = Url::getFromRoute('/sql', $urlParams);",
          "3354:             $jsConf = $kill;",
          "3355:             $deleteString = Generator::getIcon(",
          "3360:             $deleteUrl = $deleteString = $jsConf = null;",
          "3364:             $deleteUrl,",
          "3365:             $deleteString,",
          "3366:             $jsConf,",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "3396:     {",
          "3397:         $linkContent = '';",
          "",
          "[Removed Lines]",
          "3395:     private function getActionLinkContent($icon, $display_text)",
          "",
          "[Added Lines]",
          "3382:     private function getActionLinkContent($icon, $displayText)",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "3403:             $linkContent .= '<span class=\"text-nowrap\">'",
          "3404:                 . Generator::getImage(",
          "3405:                     $icon,",
          "3407:                 )",
          "3408:                 . '</span>';",
          "3409:         } elseif (",
          "3410:             isset($GLOBALS['cfg']['RowActionType'])",
          "3411:             && $GLOBALS['cfg']['RowActionType'] === self::ACTION_LINK_CONTENT_TEXT",
          "3412:         ) {",
          "3414:         } else {",
          "3415:             $linkContent .= Generator::getIcon(",
          "3416:                 $icon,",
          "3418:             );",
          "3419:         }",
          "",
          "[Removed Lines]",
          "3406:                     $display_text",
          "3413:             $linkContent .= '<span class=\"text-nowrap\">' . $display_text . '</span>';",
          "3417:                 $display_text",
          "",
          "[Added Lines]",
          "3393:                     $displayText",
          "3400:             $linkContent .= '<span class=\"text-nowrap\">' . $displayText . '</span>';",
          "3404:                 $displayText",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "3505:     private function getDataCellForNumericColumns(",
          "3506:         ?string $column,",
          "3507:         $class,",
          "3509:         FieldMetadata $meta,",
          "3510:         array $map,",
          "3516:     ) {",
          "3517:         if (! isset($column) || $column === null) {",
          "3518:             $cell = $this->buildNullDisplay(",
          "3519:                 'text-end ' . $class,",
          "3521:                 $meta,",
          "3522:                 ''",
          "3523:             );",
          "3524:         } elseif ($column != '') {",
          "3525:             $nowrap = ' text-nowrap';",
          "3528:             $cell = $this->getRowData(",
          "3529:                 'text-end ' . $class,",
          "3532:                 $meta,",
          "3533:                 $map,",
          "3534:                 $column,",
          "3535:                 $column,",
          "3538:                 $nowrap,",
          "3542:                 ''",
          "3543:             );",
          "3544:         } else {",
          "3545:             $cell = $this->buildEmptyDisplay(",
          "3546:                 'text-end ' . $class,",
          "3548:                 $meta,",
          "3549:                 ''",
          "3550:             );",
          "",
          "[Removed Lines]",
          "3508:         $condition_field,",
          "3511:         $is_field_truncated,",
          "3512:         array $analyzed_sql_results,",
          "3513:         $transformation_plugin,",
          "3514:         $default_function,",
          "3515:         array $transform_options",
          "3520:                 $condition_field,",
          "3526:             $where_comparison = ' = ' . $column;",
          "3530:                 $condition_field,",
          "3531:                 $analyzed_sql_results,",
          "3536:                 $transformation_plugin,",
          "3537:                 $default_function,",
          "3539:                 $where_comparison,",
          "3540:                 $transform_options,",
          "3541:                 $is_field_truncated,",
          "3547:                 $condition_field,",
          "",
          "[Added Lines]",
          "3495:         $conditionField,",
          "3498:         $isFieldTruncated,",
          "3499:         array $analyzedSqlResults,",
          "3500:         $transformationPlugin,",
          "3501:         $defaultFunction,",
          "3502:         array $transformOptions",
          "3507:                 $conditionField,",
          "3513:             $whereComparison = ' = ' . $column;",
          "3517:                 $conditionField,",
          "3518:                 $analyzedSqlResults,",
          "3523:                 $transformationPlugin,",
          "3524:                 $defaultFunction,",
          "3526:                 $whereComparison,",
          "3527:                 $transformOptions,",
          "3528:                 $isFieldTruncated,",
          "3534:                 $conditionField,",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "3582:         $class,",
          "3583:         FieldMetadata $meta,",
          "3584:         array $map,",
          "3591:     ) {",
          "3592:         if (! isset($column) || $column === null) {",
          "3594:         }",
          "3596:         if ($column == '') {",
          "3598:         }",
          "3601:         if ($_SESSION['tmpval']['geoOption'] === self::GEOMETRY_DISP_GEOM) {",
          "3603:                 'GEOMETRY',",
          "3604:                 $column,",
          "3608:                 $meta,",
          "3610:             );",
          "3612:             return $this->buildValueDisplay(",
          "3613:                 $class,",
          "3616:             );",
          "3617:         }",
          "3619:         if ($_SESSION['tmpval']['geoOption'] === self::GEOMETRY_DISP_WKT) {",
          "3624:             $wktval = Util::asWKT($column);",
          "3625:             [",
          "3627:                 $displayedColumn,",
          "3629:             ] = $this->getPartialText($wktval);",
          "3631:             return $this->getRowData(",
          "3632:                 $class,",
          "3635:                 $meta,",
          "3636:                 $map,",
          "3637:                 $wktval,",
          "3638:                 $displayedColumn,",
          "3641:                 '',",
          "3645:                 ''",
          "3646:             );",
          "3647:         }",
          "",
          "[Removed Lines]",
          "3585:         array $_url_params,",
          "3586:         $condition_field,",
          "3587:         $transformation_plugin,",
          "3588:         $default_function,",
          "3589:         $transform_options,",
          "3590:         array $analyzed_sql_results",
          "3593:             return $this->buildNullDisplay($class, $condition_field, $meta);",
          "3597:             return $this->buildEmptyDisplay($class, $condition_field, $meta);",
          "3602:             $geometry_text = $this->handleNonPrintableContents(",
          "3605:                 $transformation_plugin,",
          "3606:                 $transform_options,",
          "3607:                 $default_function,",
          "3609:                 $_url_params",
          "3614:                 $condition_field,",
          "3615:                 $geometry_text",
          "3621:             $where_comparison = ' = ' . $column;",
          "3626:                 $is_field_truncated,",
          "3633:                 $condition_field,",
          "3634:                 $analyzed_sql_results,",
          "3639:                 $transformation_plugin,",
          "3640:                 $default_function,",
          "3642:                 $where_comparison,",
          "3643:                 $transform_options,",
          "3644:                 $is_field_truncated,",
          "",
          "[Added Lines]",
          "3572:         array $urlParams,",
          "3573:         $conditionField,",
          "3574:         $transformationPlugin,",
          "3575:         $defaultFunction,",
          "3576:         $transformOptions,",
          "3577:         array $analyzedSqlResults",
          "3580:             return $this->buildNullDisplay($class, $conditionField, $meta);",
          "3584:             return $this->buildEmptyDisplay($class, $conditionField, $meta);",
          "3589:             $geometryText = $this->handleNonPrintableContents(",
          "3592:                 $transformationPlugin,",
          "3593:                 $transformOptions,",
          "3594:                 $defaultFunction,",
          "3596:                 $urlParams",
          "3601:                 $conditionField,",
          "3602:                 $geometryText",
          "3608:             $whereComparison = ' = ' . $column;",
          "3613:                 $isFieldTruncated,",
          "3620:                 $conditionField,",
          "3621:                 $analyzedSqlResults,",
          "3626:                 $transformationPlugin,",
          "3627:                 $defaultFunction,",
          "3629:                 $whereComparison,",
          "3630:                 $transformOptions,",
          "3631:                 $isFieldTruncated,",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "3651:         if ($_SESSION['tmpval']['display_binary']) {",
          "3654:             $wkbval = substr(bin2hex($column), 8);",
          "3655:             [",
          "3657:                 $displayedColumn,",
          "3659:             ] = $this->getPartialText($wkbval);",
          "3661:             return $this->getRowData(",
          "3662:                 $class,",
          "3665:                 $meta,",
          "3666:                 $map,",
          "3667:                 $wkbval,",
          "3668:                 $displayedColumn,",
          "3671:                 '',",
          "3675:                 ''",
          "3676:             );",
          "3677:         }",
          "",
          "[Removed Lines]",
          "3652:             $where_comparison = ' = ' . $column;",
          "3656:                 $is_field_truncated,",
          "3663:                 $condition_field,",
          "3664:                 $analyzed_sql_results,",
          "3669:                 $transformation_plugin,",
          "3670:                 $default_function,",
          "3672:                 $where_comparison,",
          "3673:                 $transform_options,",
          "3674:                 $is_field_truncated,",
          "",
          "[Added Lines]",
          "3639:             $whereComparison = ' = ' . $column;",
          "3643:                 $isFieldTruncated,",
          "3650:                 $conditionField,",
          "3651:                 $analyzedSqlResults,",
          "3656:                 $transformationPlugin,",
          "3657:                 $defaultFunction,",
          "3659:                 $whereComparison,",
          "3660:                 $transformOptions,",
          "3661:                 $isFieldTruncated,",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "3679:         $wkbval = $this->handleNonPrintableContents(",
          "3680:             'BINARY',",
          "3681:             $column,",
          "3685:             $meta,",
          "3687:         );",
          "3689:         return $this->buildValueDisplay(",
          "3690:             $class,",
          "3692:             $wkbval",
          "3693:         );",
          "3694:     }",
          "",
          "[Removed Lines]",
          "3682:             $transformation_plugin,",
          "3683:             $transform_options,",
          "3684:             $default_function,",
          "3686:             $_url_params",
          "3691:             $condition_field,",
          "",
          "[Added Lines]",
          "3669:             $transformationPlugin,",
          "3670:             $transformOptions,",
          "3671:             $defaultFunction,",
          "3673:             $urlParams",
          "3678:             $conditionField,",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "3729:         $class,",
          "3730:         FieldMetadata $meta,",
          "3731:         array $map,",
          "3741:     ) {",
          "3742:         global $dbi;",
          "",
          "[Removed Lines]",
          "3732:         array $_url_params,",
          "3733:         $condition_field,",
          "3734:         $transformation_plugin,",
          "3735:         $default_function,",
          "3736:         $transform_options,",
          "3737:         $is_field_truncated,",
          "3738:         array $analyzed_sql_results,",
          "3739:         &$dt_result,",
          "3740:         $col_index",
          "3744:         $original_length = 0;",
          "3746:         $is_analyse = $this->properties['is_analyse'];",
          "3748:         $bIsText = is_object($transformation_plugin)",
          "3749:             && strpos($transformation_plugin->getMIMEType(), 'Text')",
          "3750:             === false;",
          "",
          "[Added Lines]",
          "3719:         array $urlParams,",
          "3720:         $conditionField,",
          "3721:         $transformationPlugin,",
          "3722:         $defaultFunction,",
          "3723:         $transformOptions,",
          "3724:         $isFieldTruncated,",
          "3725:         array $analyzedSqlResults,",
          "3726:         &$dtResult,",
          "3727:         $colIndex",
          "3731:         $originalLength = 0;",
          "3733:         $isAnalyse = $this->properties['is_analyse'];",
          "3735:         $bIsText = is_object($transformationPlugin)",
          "3736:             && strpos($transformationPlugin->getMIMEType(), 'Text') === false;",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "3768:         }",
          "3770:         if (! isset($column) || $column === null) {",
          "3772:         }",
          "3774:         if ($column == '') {",
          "3776:         }",
          "3780:         $displayedColumn = $column;",
          "3781:         if (",
          "3784:             && ! $meta->isBinary()",
          "3785:         ) {",
          "3786:             [",
          "3788:                 $column,",
          "3790:             ] = $this->getPartialText($column);",
          "3791:         }",
          "",
          "[Removed Lines]",
          "3771:             return $this->buildNullDisplay($class, $condition_field, $meta);",
          "3775:             return $this->buildEmptyDisplay($class, $condition_field, $meta);",
          "3782:             ! (is_object($transformation_plugin)",
          "3783:             && strpos($transformation_plugin->getName(), 'Link') !== false)",
          "3787:                 $is_field_truncated,",
          "3789:                 $original_length,",
          "",
          "[Added Lines]",
          "3757:             return $this->buildNullDisplay($class, $conditionField, $meta);",
          "3761:             return $this->buildEmptyDisplay($class, $conditionField, $meta);",
          "3768:             ! (is_object($transformationPlugin)",
          "3769:             && strpos($transformationPlugin->getName(), 'Link') !== false)",
          "3773:                 $isFieldTruncated,",
          "3775:                 $originalLength,",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "3803:         } elseif (",
          "3804:             $meta->isBinary()",
          "3806:         ) {",
          "3810:             if ($meta->isType(FieldMetadata::TYPE_STRING)) {",
          "3812:             }",
          "3814:             $displayedColumn = $this->handleNonPrintableContents(",
          "3816:                 $displayedColumn,",
          "3820:                 $meta,",
          "3823:             );",
          "3824:             $class = $this->addClass(",
          "3825:                 $class,",
          "3827:                 $meta,",
          "3828:                 '',",
          "3832:             );",
          "3833:             $result = strip_tags($column);",
          "3837:                 $class = str_replace('grid_edit', '', $class);",
          "3838:             }",
          "",
          "[Removed Lines]",
          "3805:             && ! (isset($is_analyse) && $is_analyse)",
          "3809:             $binary_or_blob = 'BLOB';",
          "3811:                 $binary_or_blob = 'BINARY';",
          "3815:                 $binary_or_blob,",
          "3817:                 $transformation_plugin,",
          "3818:                 $transform_options,",
          "3819:                 $default_function,",
          "3821:                 $_url_params,",
          "3822:                 $is_field_truncated",
          "3826:                 $condition_field,",
          "3829:                 $is_field_truncated,",
          "3830:                 $transformation_plugin,",
          "3831:                 $default_function",
          "3836:             if (stripos($result, $binary_or_blob) !== false) {",
          "",
          "[Added Lines]",
          "3791:             && ! (isset($isAnalyse) && $isAnalyse)",
          "3795:             $binaryOrBlob = 'BLOB';",
          "3797:                 $binaryOrBlob = 'BINARY';",
          "3801:                 $binaryOrBlob,",
          "3803:                 $transformationPlugin,",
          "3804:                 $transformOptions,",
          "3805:                 $defaultFunction,",
          "3807:                 $urlParams,",
          "3808:                 $isFieldTruncated",
          "3812:                 $conditionField,",
          "3815:                 $isFieldTruncated,",
          "3816:                 $transformationPlugin,",
          "3817:                 $defaultFunction",
          "3822:             if (stripos($result, $binaryOrBlob) !== false) {",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "3843:         if ($formatted) {",
          "3844:             return $this->buildValueDisplay(",
          "3845:                 $class,",
          "3847:                 $displayedColumn",
          "3848:             );",
          "3849:         }",
          "3857:             : false;",
          "3864:             . $dbi->escapeString($column)",
          "3865:             . '\\'';",
          "3867:         return $this->getRowData(",
          "3868:             $class,",
          "3871:             $meta,",
          "3872:             $map,",
          "3873:             $column,",
          "3874:             $displayedColumn,",
          "3877:             $nowrap,",
          "3882:         );",
          "3883:     }",
          "",
          "[Removed Lines]",
          "3846:                 $condition_field,",
          "3852:         $function_nowrap = 'applyTransformationNoWrap';",
          "3854:         $bool_nowrap = ($default_function != $transformation_plugin)",
          "3855:             && method_exists($transformation_plugin, $function_nowrap)",
          "3856:             ? $transformation_plugin->$function_nowrap($transform_options)",
          "3861:         $nowrap = $meta->isDateTimeType() || $bool_nowrap ? 'text-nowrap' : 'pre_wrap';",
          "3863:         $where_comparison = ' = \\''",
          "3869:             $condition_field,",
          "3870:             $analyzed_sql_results,",
          "3875:             $transformation_plugin,",
          "3876:             $default_function,",
          "3878:             $where_comparison,",
          "3879:             $transform_options,",
          "3880:             $is_field_truncated,",
          "3881:             $original_length",
          "",
          "[Added Lines]",
          "3832:                 $conditionField,",
          "3838:         $functionNoWrap = 'applyTransformationNoWrap';",
          "3840:         $boolNoWrap = ($defaultFunction != $transformationPlugin)",
          "3841:             && method_exists($transformationPlugin, $functionNoWrap)",
          "3842:             ? $transformationPlugin->$functionNoWrap($transformOptions)",
          "3847:         $nowrap = $meta->isDateTimeType() || $boolNoWrap ? 'text-nowrap' : 'pre_wrap';",
          "3849:         $whereComparison = ' = \\''",
          "3855:             $conditionField,",
          "3856:             $analyzedSqlResults,",
          "3861:             $transformationPlugin,",
          "3862:             $defaultFunction,",
          "3864:             $whereComparison,",
          "3865:             $transformOptions,",
          "3866:             $isFieldTruncated,",
          "3867:             $originalLength",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "3897:     public function setConfigParamsForDisplayTable()",
          "3898:     {",
          "3900:         $query = [];",
          "3903:         }",
          "3905:         $query['sql'] = $this->properties['sql_query'];",
          "",
          "[Removed Lines]",
          "3899:         $sql_md5 = md5($this->properties['sql_query']);",
          "3901:         if (isset($_SESSION['tmpval']['query'][$sql_md5])) {",
          "3902:             $query = $_SESSION['tmpval']['query'][$sql_md5];",
          "",
          "[Added Lines]",
          "3885:         $sqlMd5 = md5($this->properties['sql_query']);",
          "3887:         if (isset($_SESSION['tmpval']['query'][$sqlMd5])) {",
          "3888:             $query = $_SESSION['tmpval']['query'][$sqlMd5];",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "4018:         if (count($_SESSION['tmpval']['query']) > 10) {",
          "",
          "[Removed Lines]",
          "4014:         unset($_SESSION['tmpval']['query'][$sql_md5]);",
          "4015:         $_SESSION['tmpval']['query'][$sql_md5] = $query;",
          "",
          "[Added Lines]",
          "4000:         unset($_SESSION['tmpval']['query'][$sqlMd5]);",
          "4001:         $_SESSION['tmpval']['query'][$sqlMd5] = $query;",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "4021:         }",
          "4045:     }",
          "4060:     public function getTable(",
          "4062:         array &$displayParts,",
          "4065:     ) {",
          "4070:         } else {",
          "4071:             $statement = null;",
          "4072:         }",
          "4091:                 Sanitize::sanitizeMessage(",
          "4092:                     __('May be approximate. See [doc@faq3-11]FAQ 3.11[/doc].')",
          "4093:                 )",
          "4094:             );",
          "4095:         } else {",
          "4098:         }",
          "",
          "[Removed Lines]",
          "4024:         $_SESSION['tmpval']['pftext']",
          "4025:             = $query['pftext'];",
          "4026:         $_SESSION['tmpval']['relational_display']",
          "4027:             = $query['relational_display'];",
          "4028:         $_SESSION['tmpval']['geoOption']",
          "4029:             = $query['geoOption'];",
          "4030:         $_SESSION['tmpval']['display_binary'] = isset(",
          "4031:             $query['display_binary']",
          "4032:         );",
          "4033:         $_SESSION['tmpval']['display_blob'] = isset(",
          "4034:             $query['display_blob']",
          "4035:         );",
          "4036:         $_SESSION['tmpval']['hide_transformation'] = isset(",
          "4037:             $query['hide_transformation']",
          "4038:         );",
          "4039:         $_SESSION['tmpval']['pos']",
          "4040:             = $query['pos'];",
          "4041:         $_SESSION['tmpval']['max_rows']",
          "4042:             = $query['max_rows'];",
          "4043:         $_SESSION['tmpval']['repeat_cells']",
          "4044:             = $query['repeat_cells'];",
          "4061:         &$dt_result,",
          "4063:         array $analyzed_sql_results,",
          "4064:         $is_limited_display = false",
          "4067:         if (isset($analyzed_sql_results['statement'])) {",
          "4069:             $statement = $analyzed_sql_results['statement'];",
          "4077:         $fields_meta = $this->properties['fields_meta'];",
          "4078:         $showtable = $this->properties['showtable'];",
          "4079:         $printview = $this->properties['printview'];",
          "4085:         $is_innodb = (isset($showtable['Type'])",
          "4086:             && $showtable['Type'] === self::TABLE_TYPE_INNO_DB);",
          "4088:         if ($is_innodb && Sql::isJustBrowsing($analyzed_sql_results, true)) {",
          "4089:             $pre_count = '~';",
          "4090:             $after_count = Generator::showHint(",
          "4096:             $pre_count = '';",
          "4097:             $after_count = '';",
          "",
          "[Added Lines]",
          "4010:         $_SESSION['tmpval']['pftext'] = $query['pftext'];",
          "4011:         $_SESSION['tmpval']['relational_display'] = $query['relational_display'];",
          "4012:         $_SESSION['tmpval']['geoOption'] = $query['geoOption'];",
          "4013:         $_SESSION['tmpval']['display_binary'] = isset($query['display_binary']);",
          "4014:         $_SESSION['tmpval']['display_blob'] = isset($query['display_blob']);",
          "4015:         $_SESSION['tmpval']['hide_transformation'] = isset($query['hide_transformation']);",
          "4016:         $_SESSION['tmpval']['pos'] = $query['pos'];",
          "4017:         $_SESSION['tmpval']['max_rows'] = $query['max_rows'];",
          "4018:         $_SESSION['tmpval']['repeat_cells'] = $query['repeat_cells'];",
          "4035:         &$dtResult,",
          "4037:         array $analyzedSqlResults,",
          "4038:         $isLimitedDisplay = false",
          "4041:         if (isset($analyzedSqlResults['statement'])) {",
          "4043:             $statement = $analyzedSqlResults['statement'];",
          "4051:         $fieldsMeta = $this->properties['fields_meta'];",
          "4052:         $showTable = $this->properties['showtable'];",
          "4053:         $printView = $this->properties['printview'];",
          "4059:         $isInnodb = (isset($showTable['Type'])",
          "4060:             && $showTable['Type'] === self::TABLE_TYPE_INNO_DB);",
          "4062:         if ($isInnodb && Sql::isJustBrowsing($analyzedSqlResults, true)) {",
          "4063:             $preCount = '~';",
          "4064:             $afterCount = Generator::showHint(",
          "4070:             $preCount = '';",
          "4071:             $afterCount = '';",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "4108:         ]  = $this->setDisplayPartsAndTotal($displayParts);",
          "4113:         if ($displayParts['nav_bar'] == '1') {",
          "4115:         }",
          "4124:         if ($statement !== null && ! empty($statement->order)) {",
          "4125:             foreach ($statement->order as $o) {",
          "4129:             }",
          "4130:         } else {",
          "4134:         }",
          "4144:             );",
          "4145:         }",
          "",
          "[Removed Lines]",
          "4111:         $pos_next = 0;",
          "4112:         $pos_prev = 0;",
          "4114:             [$pos_next, $pos_prev] = $this->getOffsets();",
          "4120:         $sort_expression = [];",
          "4121:         $sort_expression_nodirection = [];",
          "4122:         $sort_direction = [];",
          "4126:                 $sort_expression[] = $o->expr->expr . ' ' . $o->type;",
          "4127:                 $sort_expression_nodirection[] = $o->expr->expr;",
          "4128:                 $sort_direction[] = $o->type;",
          "4131:             $sort_expression[] = '';",
          "4132:             $sort_expression_nodirection[] = '';",
          "4133:             $sort_direction[] = '';",
          "4136:         $number_of_columns = count($sort_expression_nodirection);",
          "4139:         $sorted_column_message = '';",
          "4140:         for ($i = 0; $i < $number_of_columns; $i++) {",
          "4141:             $sorted_column_message .= $this->getSortedColumnMessage(",
          "4142:                 $dt_result,",
          "4143:                 $sort_expression_nodirection[$i]",
          "",
          "[Added Lines]",
          "4085:         $posNext = 0;",
          "4086:         $posPrev = 0;",
          "4088:             [$posNext, $posPrev] = $this->getOffsets();",
          "4094:         $sortExpression = [];",
          "4095:         $sortExpressionNoDirection = [];",
          "4096:         $sortDirection = [];",
          "4100:                 $sortExpression[] = $o->expr->expr . ' ' . $o->type;",
          "4101:                 $sortExpressionNoDirection[] = $o->expr->expr;",
          "4102:                 $sortDirection[] = $o->type;",
          "4105:             $sortExpression[] = '';",
          "4106:             $sortExpressionNoDirection[] = '';",
          "4107:             $sortDirection[] = '';",
          "4110:         $numberOfColumns = count($sortExpressionNoDirection);",
          "4113:         $sortedColumnMessage = '';",
          "4114:         for ($i = 0; $i < $numberOfColumns; $i++) {",
          "4115:             $sortedColumnMessage .= $this->getSortedColumnMessage(",
          "4116:                 $dtResult,",
          "4117:                 $sortExpressionNoDirection[$i]",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "4150:         $sqlQueryMessage = '';",
          "4152:             $message = $this->setMessageInformation(",
          "4155:                 $total,",
          "4159:             );",
          "4161:             $sqlQueryMessage = Generator::getMessage(",
          "",
          "[Removed Lines]",
          "4151:         if (($displayParts['nav_bar'] == '1') && $pos_next !== null) {",
          "4153:                 $sorted_column_message,",
          "4154:                 $analyzed_sql_results,",
          "4156:                 $pos_next,",
          "4157:                 $pre_count,",
          "4158:                 $after_count",
          "",
          "[Added Lines]",
          "4125:         if (($displayParts['nav_bar'] == '1') && $posNext !== null) {",
          "4127:                 $sortedColumnMessage,",
          "4128:                 $analyzedSqlResults,",
          "4130:                 $posNext,",
          "4131:                 $preCount,",
          "4132:                 $afterCount",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "4163:                 $this->properties['sql_query'],",
          "4164:                 'success'",
          "4165:             );",
          "4167:             $sqlQueryMessage = Generator::getMessage(",
          "4168:                 __('Your SQL query has been executed successfully.'),",
          "4169:                 $this->properties['sql_query'],",
          "",
          "[Removed Lines]",
          "4166:         } elseif ((! isset($printview) || ($printview != '1')) && ! $is_limited_display) {",
          "",
          "[Added Lines]",
          "4140:         } elseif ((! isset($printView) || ($printView != '1')) && ! $isLimitedDisplay) {",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "4175:         if (strlen($this->properties['table']) === 0) {",
          "4181:             } else {",
          "4182:                 $this->properties['table'] = '';",
          "4183:             }",
          "4184:         }",
          "4190:                 = $this->getUnsortedSqlAndSortByKeyDropDown(",
          "4193:                 );",
          "4194:         } else {",
          "4196:         }",
          "4198:         $navigation = [];",
          "4199:         if ($displayParts['nav_bar'] == '1' && $statement !== null && empty($statement->limit)) {",
          "4200:             $navigation = $this->getTableNavigation(",
          "4205:             );",
          "4206:         }",
          "",
          "[Removed Lines]",
          "4176:             if ($analyzed_sql_results['querytype'] === 'SELECT') {",
          "4180:                 $this->properties['table'] = $fields_meta[0]->table;",
          "4187:         if ($displayParts['sort_lnk'] == '1' && $analyzed_sql_results['statement'] !== null) {",
          "4189:             [$unsorted_sql_query, $sort_by_key_html]",
          "4191:                     $analyzed_sql_results,",
          "4192:                     $sort_expression",
          "4195:             $sort_by_key_html = $unsorted_sql_query = '';",
          "4201:                 $pos_next,",
          "4202:                 $pos_prev,",
          "4203:                 $is_innodb,",
          "4204:                 $sort_by_key_html",
          "",
          "[Added Lines]",
          "4150:             if ($analyzedSqlResults['querytype'] === 'SELECT') {",
          "4154:                 $this->properties['table'] = $fieldsMeta[0]->table;",
          "4161:         if ($displayParts['sort_lnk'] == '1' && $analyzedSqlResults['statement'] !== null) {",
          "4163:             [$unsortedSqlQuery, $sortByKeyHtml]",
          "4165:                     $analyzedSqlResults,",
          "4166:                     $sortExpression",
          "4169:             $sortByKeyHtml = $unsortedSqlQuery = '';",
          "4175:                 $posNext,",
          "4176:                 $posPrev,",
          "4177:                 $isInnodb,",
          "4178:                 $sortByKeyHtml",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "4220:             if ($this->properties['is_browse_distinct']) {",
          "4222:                     $this->properties['table'],",
          "4224:                     '',",
          "4225:                     $this->properties['db'],",
          "4226:                 ];",
          "",
          "[Removed Lines]",
          "4221:                 $map[$fields_meta[1]->name] = [",
          "4223:                     $fields_meta[1]->name,",
          "",
          "[Added Lines]",
          "4195:                 $map[$fieldsMeta[1]->name] = [",
          "4197:                     $fieldsMeta[1]->name,",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "4233:         $headers = $this->getTableHeaders(",
          "4234:             $displayParts,",
          "4241:         );",
          "4243:         $body = $this->getTableBody(",
          "4245:             $displayParts,",
          "4246:             $map,",
          "4249:         );",
          "4251:         $this->properties['display_params'] = null;",
          "4254:         $bulkLinks = $this->getBulkLinks(",
          "4257:             $displayParts['del_lnk']",
          "4258:         );",
          "4261:         $operations = [];",
          "4263:             $operations = $this->getResultsOperations(",
          "4264:                 $displayParts,",
          "4266:             );",
          "4267:         }",
          "",
          "[Removed Lines]",
          "4235:             $analyzed_sql_results,",
          "4236:             $unsorted_sql_query,",
          "4237:             $sort_expression,",
          "4238:             $sort_expression_nodirection,",
          "4239:             $sort_direction,",
          "4240:             $is_limited_display",
          "4244:             $dt_result,",
          "4247:             $analyzed_sql_results,",
          "4248:             $is_limited_display",
          "4255:             $dt_result,",
          "4256:             $analyzed_sql_results,",
          "4262:         if ((! isset($printview) || ($printview != '1')) && ! $is_limited_display) {",
          "4265:                 $analyzed_sql_results",
          "",
          "[Added Lines]",
          "4209:             $analyzedSqlResults,",
          "4210:             $unsortedSqlQuery,",
          "4211:             $sortExpression,",
          "4212:             $sortExpressionNoDirection,",
          "4213:             $sortDirection,",
          "4214:             $isLimitedDisplay",
          "4218:             $dtResult,",
          "4221:             $analyzedSqlResults,",
          "4222:             $isLimitedDisplay",
          "4229:             $dtResult,",
          "4230:             $analyzedSqlResults,",
          "4236:         if ((! isset($printView) || ($printView != '1')) && ! $isLimitedDisplay) {",
          "4239:                 $analyzedSqlResults",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "4299:     private function getOffsets()",
          "4300:     {",
          "4301:         if ($_SESSION['tmpval']['max_rows'] === self::ALL_ROWS) {",
          "4304:         } else {",
          "4313:             }",
          "4314:         }",
          "4316:         return [",
          "4319:         ];",
          "4320:     }",
          "",
          "[Removed Lines]",
          "4302:             $pos_next     = 0;",
          "4303:             $pos_prev     = 0;",
          "4305:             $pos_next     = $_SESSION['tmpval']['pos']",
          "4306:                             + $_SESSION['tmpval']['max_rows'];",
          "4308:             $pos_prev     = $_SESSION['tmpval']['pos']",
          "4309:                             - $_SESSION['tmpval']['max_rows'];",
          "4311:             if ($pos_prev < 0) {",
          "4312:                 $pos_prev = 0;",
          "4317:             $pos_next,",
          "4318:             $pos_prev,",
          "",
          "[Added Lines]",
          "4276:             $posNext = 0;",
          "4277:             $posPrev = 0;",
          "4279:             $posNext = $_SESSION['tmpval']['pos'] + $_SESSION['tmpval']['max_rows'];",
          "4280:             $posPrev = $_SESSION['tmpval']['pos'] - $_SESSION['tmpval']['max_rows'];",
          "4282:             if ($posPrev < 0) {",
          "4283:                 $posPrev = 0;",
          "4288:             $posNext,",
          "4289:             $posPrev,",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "4336:     private function getSortedColumnMessage(",
          "4339:     ) {",
          "4340:         global $dbi;",
          "4346:             return null;",
          "4347:         }",
          "4352:         } else {",
          "4355:         }",
          "4367:                 break;",
          "4368:             }",
          "4369:         }",
          "4372:             return null;",
          "4373:         }",
          "4380:             Core::class,",
          "4381:             'mimeDefaultFunction',",
          "4382:         ];",
          "4392:         if ($isBlobOrGeometry) {",
          "4394:                 $meta->getMappedType(),",
          "4399:                 $meta",
          "4400:             );",
          "4401:         } else {",
          "4403:         }",
          "4406:             mb_substr(",
          "4408:                 0,",
          "4409:                 (int) $GLOBALS['cfg']['LimitChars']",
          "4410:             ) . '...'",
          "",
          "[Removed Lines]",
          "4337:         &$dt_result,",
          "4338:         $sort_expression_nodirection",
          "4343:         $fields_meta = $this->properties['fields_meta']; // To use array indexes",
          "4345:         if (empty($sort_expression_nodirection)) {",
          "4349:         if (mb_strpos($sort_expression_nodirection, '.') === false) {",
          "4350:             $sort_table = $this->properties['table'];",
          "4351:             $sort_column = $sort_expression_nodirection;",
          "4353:             [$sort_table, $sort_column]",
          "4354:                 = explode('.', $sort_expression_nodirection);",
          "4357:         $sort_table = Util::unQuote($sort_table);",
          "4358:         $sort_column = Util::unQuote($sort_column);",
          "4362:         $sorted_column_index = false;",
          "4364:         foreach ($fields_meta as $key => $meta) {",
          "4365:             if (($meta->table == $sort_table) && ($meta->name == $sort_column)) {",
          "4366:                 $sorted_column_index = $key;",
          "4371:         if ($sorted_column_index === false) {",
          "4376:         $row = $dbi->fetchRow($dt_result);",
          "4379:         $default_function = [",
          "4383:         $transformation_plugin = $default_function;",
          "4384:         $transform_options = [];",
          "4387:         $meta = $fields_meta[$sorted_column_index];",
          "4389:         $isBlobOrGeometry = $meta->isType(FieldMetadata::TYPE_BLOB)",
          "4390:                     || $meta->isMappedTypeGeometry;",
          "4393:             $column_for_first_row = $this->handleNonPrintableContents(",
          "4395:                 $row[$sorted_column_index],",
          "4396:                 $transformation_plugin,",
          "4397:                 $transform_options,",
          "4398:                 $default_function,",
          "4402:             $column_for_first_row = $row !== null ? $row[$sorted_column_index] : '';",
          "4405:         $column_for_first_row = mb_strtoupper(",
          "4407:                 (string) $column_for_first_row,",
          "",
          "[Added Lines]",
          "4308:         &$dtResult,",
          "4309:         $sortExpressionNoDirection",
          "4314:         $fieldsMeta = $this->properties['fields_meta']; // To use array indexes",
          "4316:         if (empty($sortExpressionNoDirection)) {",
          "4320:         if (mb_strpos($sortExpressionNoDirection, '.') === false) {",
          "4321:             $sortTable = $this->properties['table'];",
          "4322:             $sortColumn = $sortExpressionNoDirection;",
          "4324:             [$sortTable, $sortColumn] = explode('.', $sortExpressionNoDirection);",
          "4327:         $sortTable = Util::unQuote($sortTable);",
          "4328:         $sortColumn = Util::unQuote($sortColumn);",
          "4332:         $sortedColumnIndex = false;",
          "4334:         foreach ($fieldsMeta as $key => $meta) {",
          "4335:             if (($meta->table == $sortTable) && ($meta->name == $sortColumn)) {",
          "4336:                 $sortedColumnIndex = $key;",
          "4341:         if ($sortedColumnIndex === false) {",
          "4346:         $row = $dbi->fetchRow($dtResult);",
          "4349:         $defaultFunction = [",
          "4353:         $transformationPlugin = $defaultFunction;",
          "4354:         $transformOptions = [];",
          "4357:         $meta = $fieldsMeta[$sortedColumnIndex];",
          "4359:         $isBlobOrGeometry = $meta->isType(FieldMetadata::TYPE_BLOB) || $meta->isMappedTypeGeometry;",
          "4362:             $columnForFirstRow = $this->handleNonPrintableContents(",
          "4364:                 $row[$sortedColumnIndex],",
          "4365:                 $transformationPlugin,",
          "4366:                 $transformOptions,",
          "4367:                 $defaultFunction,",
          "4371:             $columnForFirstRow = $row !== null ? $row[$sortedColumnIndex] : '';",
          "4374:         $columnForFirstRow = mb_strtoupper(",
          "4376:                 (string) $columnForFirstRow,",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "4414:         $dbi->dataSeek(",
          "4416:             $this->properties['num_rows'] > 0 ? $this->properties['num_rows'] - 1 : 0",
          "4417:         );",
          "4422:         if ($isBlobOrGeometry) {",
          "4424:                 $meta->getMappedType(),",
          "4429:                 $meta",
          "4430:             );",
          "4431:         } else {",
          "4433:         }",
          "4436:             mb_substr(",
          "4438:                 0,",
          "4439:                 (int) $GLOBALS['cfg']['LimitChars']",
          "4440:             ) . '...'",
          "4441:         );",
          "4450:     }",
          "",
          "[Removed Lines]",
          "4415:             $dt_result,",
          "4418:         $row = $dbi->fetchRow($dt_result);",
          "4421:         $meta = $fields_meta[$sorted_column_index];",
          "4423:             $column_for_last_row = $this->handleNonPrintableContents(",
          "4425:                 $row[$sorted_column_index],",
          "4426:                 $transformation_plugin,",
          "4427:                 $transform_options,",
          "4428:                 $default_function,",
          "4432:             $column_for_last_row = $row !== null ? $row[$sorted_column_index] : '';",
          "4435:         $column_for_last_row = mb_strtoupper(",
          "4437:                 (string) $column_for_last_row,",
          "4444:         $dbi->dataSeek($dt_result, 0);",
          "4447:         return ' [' . htmlspecialchars($sort_column)",
          "4448:             . ': <strong>' . htmlspecialchars($column_for_first_row) . ' - '",
          "4449:             . htmlspecialchars($column_for_last_row) . '</strong>]';",
          "",
          "[Added Lines]",
          "4384:             $dtResult,",
          "4387:         $row = $dbi->fetchRow($dtResult);",
          "4390:         $meta = $fieldsMeta[$sortedColumnIndex];",
          "4392:             $columnForLastRow = $this->handleNonPrintableContents(",
          "4394:                 $row[$sortedColumnIndex],",
          "4395:                 $transformationPlugin,",
          "4396:                 $transformOptions,",
          "4397:                 $defaultFunction,",
          "4401:             $columnForLastRow = $row !== null ? $row[$sortedColumnIndex] : '';",
          "4404:         $columnForLastRow = mb_strtoupper(",
          "4406:                 (string) $columnForLastRow,",
          "4413:         $dbi->dataSeek($dtResult, 0);",
          "4416:         return ' [' . htmlspecialchars($sortColumn)",
          "4417:             . ': <strong>' . htmlspecialchars($columnForFirstRow) . ' - '",
          "4418:             . htmlspecialchars($columnForLastRow) . '</strong>]';",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "4470:     private function setMessageInformation(",
          "4473:         $total,",
          "4477:     ) {",
          "4486:             } else {",
          "4488:             }",
          "4489:         } elseif (",
          "4490:             ($_SESSION['tmpval']['max_rows'] === self::ALL_ROWS)",
          "4492:         ) {",
          "4495:         } else {",
          "4498:         }",
          "4500:         $table = new Table($this->properties['table'], $this->properties['db']);",
          "",
          "[Removed Lines]",
          "4471:         $sorted_column_message,",
          "4472:         array $analyzed_sql_results,",
          "4474:         $pos_next,",
          "4475:         $pre_count,",
          "4476:         $after_count",
          "4478:         $unlim_num_rows = $this->properties['unlim_num_rows']; // To use in isset()",
          "4480:         if (! empty($analyzed_sql_results['statement']->limit)) {",
          "4481:             $first_shown_rec = $analyzed_sql_results['statement']->limit->offset;",
          "4482:             $row_count = $analyzed_sql_results['statement']->limit->rowCount;",
          "4484:             if ($row_count < $total) {",
          "4485:                 $last_shown_rec = $first_shown_rec + $row_count - 1;",
          "4487:                 $last_shown_rec = $first_shown_rec + $total - 1;",
          "4491:             || ($pos_next > $total)",
          "4493:             $first_shown_rec = $_SESSION['tmpval']['pos'];",
          "4494:             $last_shown_rec  = $total - 1;",
          "4496:             $first_shown_rec = $_SESSION['tmpval']['pos'];",
          "4497:             $last_shown_rec  = $pos_next - 1;",
          "",
          "[Added Lines]",
          "4440:         $sortedColumnMessage,",
          "4441:         array $analyzedSqlResults,",
          "4443:         $posNext,",
          "4444:         $preCount,",
          "4445:         $afterCount",
          "4447:         $unlimNumRows = $this->properties['unlim_num_rows']; // To use in isset()",
          "4449:         if (! empty($analyzedSqlResults['statement']->limit)) {",
          "4450:             $firstShownRec = $analyzedSqlResults['statement']->limit->offset;",
          "4451:             $rowCount = $analyzedSqlResults['statement']->limit->rowCount;",
          "4453:             if ($rowCount < $total) {",
          "4454:                 $lastShownRec = $firstShownRec + $rowCount - 1;",
          "4456:                 $lastShownRec = $firstShownRec + $total - 1;",
          "4460:             || ($posNext > $total)",
          "4462:             $firstShownRec = $_SESSION['tmpval']['pos'];",
          "4463:             $lastShownRec  = $total - 1;",
          "4465:             $firstShownRec = $_SESSION['tmpval']['pos'];",
          "4466:             $lastShownRec  = $posNext - 1;",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "4512:             $message->addParam('[doc@cfg_MaxExactCount]');",
          "4513:             $message->addParam('[/doc]');",
          "4515:         } else {",
          "4517:         }",
          "4519:         $message = Message::success(__('Showing rows %1s - %2s'));",
          "4524:         } else {",
          "4526:         }",
          "4528:         $message->addText('(');",
          "4534:                 );",
          "4537:             } else {",
          "4540:             }",
          "4544:             }",
          "4548:             $message->addText(', ', '');",
          "4549:         }",
          "4557:         }",
          "4559:         return $message;",
          "",
          "[Removed Lines]",
          "4514:             $message_view_warning = Generator::showHint($message);",
          "4516:             $message_view_warning = false;",
          "4520:         $message->addParam($first_shown_rec);",
          "4522:         if ($message_view_warning !== false) {",
          "4523:             $message->addParamHtml('... ' . $message_view_warning);",
          "4525:             $message->addParam($last_shown_rec);",
          "4530:         if ($message_view_warning === false) {",
          "4531:             if (isset($unlim_num_rows) && ($unlim_num_rows != $total)) {",
          "4532:                 $message_total = Message::notice(",
          "4533:                     $pre_count . __('%1$d total, %2$d in query')",
          "4535:                 $message_total->addParam($total);",
          "4536:                 $message_total->addParam($unlim_num_rows);",
          "4538:                 $message_total = Message::notice($pre_count . __('%d total'));",
          "4539:                 $message_total->addParam($total);",
          "4542:             if (! empty($after_count)) {",
          "4543:                 $message_total->addHtml($after_count);",
          "4546:             $message->addMessage($message_total, '');",
          "4551:         $message_qt = Message::notice(__('Query took %01.4f seconds.') . ')');",
          "4552:         $message_qt->addParam($this->properties['querytime']);",
          "4554:         $message->addMessage($message_qt, '');",
          "4555:         if ($sorted_column_message !== null) {",
          "4556:             $message->addHtml($sorted_column_message, '');",
          "",
          "[Added Lines]",
          "4483:             $messageViewWarning = Generator::showHint($message);",
          "4485:             $messageViewWarning = false;",
          "4489:         $message->addParam($firstShownRec);",
          "4491:         if ($messageViewWarning !== false) {",
          "4492:             $message->addParamHtml('... ' . $messageViewWarning);",
          "4494:             $message->addParam($lastShownRec);",
          "4499:         if ($messageViewWarning === false) {",
          "4500:             if (isset($unlimNumRows) && ($unlimNumRows != $total)) {",
          "4501:                 $messageTotal = Message::notice(",
          "4502:                     $preCount . __('%1$d total, %2$d in query')",
          "4504:                 $messageTotal->addParam($total);",
          "4505:                 $messageTotal->addParam($unlimNumRows);",
          "4507:                 $messageTotal = Message::notice($preCount . __('%d total'));",
          "4508:                 $messageTotal->addParam($total);",
          "4511:             if (! empty($afterCount)) {",
          "4512:                 $messageTotal->addHtml($afterCount);",
          "4515:             $message->addMessage($messageTotal, '');",
          "4520:         $messageQueryTime = Message::notice(__('Query took %01.4f seconds.') . ')');",
          "4521:         $messageQueryTime->addParam($this->properties['querytime']);",
          "4523:         $message->addMessage($messageQueryTime, '');",
          "4524:         if ($sortedColumnMessage !== null) {",
          "4525:             $message->addHtml($sortedColumnMessage, '');",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "4582:             $this->properties['db'],",
          "4583:             $this->properties['table'],",
          "4584:             '',",
          "4585:             self::POSITION_BOTH",
          "4586:         );",
          "4589:             return;",
          "4590:         }",
          "4595:                     $rel['foreign_db'],",
          "4596:                     $rel['foreign_table']",
          "4597:                 );",
          "4599:                     $rel['foreign_table'],",
          "4600:                     $rel['foreign_field'],",
          "4602:                     $rel['foreign_db'],",
          "4603:                 ];",
          "4604:             } else {",
          "4610:                         );",
          "4617:                         ];",
          "4618:                     }",
          "4619:                 }",
          "",
          "[Removed Lines]",
          "4581:         $exist_rel = $this->relation->getForeigners(",
          "4588:         if (empty($exist_rel)) {",
          "4592:         foreach ($exist_rel as $master_field => $rel) {",
          "4593:             if ($master_field !== 'foreign_keys_data') {",
          "4594:                 $display_field = $this->relation->getDisplayField(",
          "4598:                 $map[$master_field] = [",
          "4601:                     $display_field,",
          "4605:                 foreach ($rel as $key => $one_key) {",
          "4606:                     foreach ($one_key['index_list'] as $index => $one_field) {",
          "4607:                         $display_field = $this->relation->getDisplayField(",
          "4608:                             $one_key['ref_db_name'] ?? $GLOBALS['db'],",
          "4609:                             $one_key['ref_table_name']",
          "4612:                         $map[$one_field] = [",
          "4613:                             $one_key['ref_table_name'],",
          "4614:                             $one_key['ref_index_list'][$index],",
          "4615:                             $display_field,",
          "4616:                             $one_key['ref_db_name'] ?? $GLOBALS['db'],",
          "",
          "[Added Lines]",
          "4550:         $existRel = $this->relation->getForeigners(",
          "4557:         if (empty($existRel)) {",
          "4561:         foreach ($existRel as $masterField => $rel) {",
          "4562:             if ($masterField !== 'foreign_keys_data') {",
          "4563:                 $displayField = $this->relation->getDisplayField(",
          "4567:                 $map[$masterField] = [",
          "4570:                     $displayField,",
          "4574:                 foreach ($rel as $key => $oneKey) {",
          "4575:                     foreach ($oneKey['index_list'] as $index => $oneField) {",
          "4576:                         $displayField = $this->relation->getDisplayField(",
          "4577:                             $oneKey['ref_db_name'] ?? $GLOBALS['db'],",
          "4578:                             $oneKey['ref_table_name']",
          "4581:                         $map[$oneField] = [",
          "4582:                             $oneKey['ref_table_name'],",
          "4583:                             $oneKey['ref_index_list'][$index],",
          "4584:                             $displayField,",
          "4585:                             $oneKey['ref_db_name'] ?? $GLOBALS['db'],",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "4636:     private function getBulkLinks(",
          "4640:     ): array {",
          "4641:         global $dbi;",
          "4644:             return [];",
          "4645:         }",
          "4648:         $dbi->dataSeek(",
          "4650:             $this->properties['num_rows'] > 0 ? $this->properties['num_rows'] - 1 : 0",
          "4651:         );",
          "4655:         if (! is_array($row)) {",
          "",
          "[Removed Lines]",
          "4637:         &$dt_result,",
          "4638:         array $analyzed_sql_results,",
          "4639:         $del_link",
          "4643:         if ($del_link !== self::DELETE_ROW) {",
          "4649:             $dt_result,",
          "4652:         $row = $dbi->fetchRow($dt_result);",
          "",
          "[Added Lines]",
          "4606:         &$dtResult,",
          "4607:         array $analyzedSqlResults,",
          "4608:         $deleteLink",
          "4612:         if ($deleteLink !== self::DELETE_ROW) {",
          "4618:             $dtResult,",
          "4621:         $row = $dbi->fetchRow($dtResult);",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "4659:         $expressions = [];",
          "4661:         if (",
          "4664:         ) {",
          "4666:         }",
          "4674:             $this->properties['fields_cnt'],",
          "4675:             $this->properties['fields_meta'],",
          "4676:             $row,",
          "",
          "[Removed Lines]",
          "4662:             isset($analyzed_sql_results['statement'])",
          "4663:             && $analyzed_sql_results['statement'] instanceof SelectStatement",
          "4665:             $expressions = $analyzed_sql_results['statement']->expr;",
          "4672:         [, $clause_is_unique] = Util::getUniqueCondition(",
          "4673:             $dt_result,",
          "",
          "[Added Lines]",
          "4631:             isset($analyzedSqlResults['statement'])",
          "4632:             && $analyzedSqlResults['statement'] instanceof SelectStatement",
          "4634:             $expressions = $analyzedSqlResults['statement']->expr;",
          "4641:         [, $clauseIsUnique] = Util::getUniqueCondition(",
          "4642:             $dtResult,",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "4680:         );",
          "4685:         return [",
          "4688:         ];",
          "4689:     }",
          "",
          "[Removed Lines]",
          "4683:         $dbi->dataSeek($dt_result, 0);",
          "4686:             'has_export_button' => $analyzed_sql_results['querytype'] === 'SELECT',",
          "4687:             'clause_is_unique' => $clause_is_unique,",
          "",
          "[Added Lines]",
          "4652:         $dbi->dataSeek($dtResult, 0);",
          "4655:             'has_export_button' => $analyzedSqlResults['querytype'] === 'SELECT',",
          "4656:             'clause_is_unique' => $clauseIsUnique,",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "4701:     private function getResultsOperations(",
          "4702:         array $displayParts,",
          "4704:     ): array {",
          "4705:         global $printview, $dbi;",
          "4708:             'db'        => $this->properties['db'],",
          "4709:             'table'     => $this->properties['table'],",
          "4710:             'printview' => '1',",
          "4711:             'sql_query' => $this->properties['sql_query'],",
          "4712:         ];",
          "",
          "[Removed Lines]",
          "4703:         array $analyzed_sql_results",
          "4707:         $_url_params = [",
          "4714:         $geometry_found = false;",
          "",
          "[Added Lines]",
          "4672:         array $analyzedSqlResults",
          "4676:         $urlParams = [",
          "4683:         $geometryFound = false;",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "4722:         if (",
          "4724:             && ! isset($printview)",
          "4726:         ) {",
          "4729:             }",
          "4735:             }",
          "",
          "[Removed Lines]",
          "4723:             ($analyzed_sql_results['querytype'] === self::QUERY_TYPE_SELECT)",
          "4725:             && empty($analyzed_sql_results['procedure'])",
          "4727:             if (count($analyzed_sql_results['select_tables']) === 1) {",
          "4728:                 $_url_params['single_table'] = 'true';",
          "4733:             if (! $analyzed_sql_results['select_tables']) {",
          "4734:                 $_url_params['raw_query'] = 'true';",
          "4737:             $_url_params['unlim_num_rows'] = $this->properties['unlim_num_rows'];",
          "",
          "[Added Lines]",
          "4692:             ($analyzedSqlResults['querytype'] === self::QUERY_TYPE_SELECT)",
          "4694:             && empty($analyzedSqlResults['procedure'])",
          "4696:             if (count($analyzedSqlResults['select_tables']) === 1) {",
          "4697:                 $urlParams['single_table'] = 'true';",
          "4702:             if (! $analyzedSqlResults['select_tables']) {",
          "4703:                 $urlParams['raw_query'] = 'true';",
          "4706:             $urlParams['unlim_num_rows'] = $this->properties['unlim_num_rows'];",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "4752:                 }",
          "4753:             }",
          "4758:                 if ($meta->isMappedTypeGeometry) {",
          "4760:                     break;",
          "4761:                 }",
          "4762:             }",
          "4763:         }",
          "4765:         return [",
          "4768:             'has_print_link' => $displayParts['pview_lnk'] == '1',",
          "4771:         ];",
          "4772:     }",
          "",
          "[Removed Lines]",
          "4747:             if (empty($_url_params['table']) && ! empty($_url_params['db'])) {",
          "4748:                 $_url_params['table'] = $dbi->fetchValue('SHOW TABLES');",
          "4750:                 if ($_url_params['table'] === false) {",
          "4751:                     unset($_url_params['table']);",
          "4756:             $fields_meta = $this->properties['fields_meta'];",
          "4757:             foreach ($fields_meta as $meta) {",
          "4759:                     $geometry_found = true;",
          "4766:             'has_procedure' => ! empty($analyzed_sql_results['procedure']),",
          "4767:             'has_geometry' => $geometry_found,",
          "4769:             'has_export_link' => $analyzed_sql_results['querytype'] === self::QUERY_TYPE_SELECT && ! isset($printview),",
          "4770:             'url_params' => $_url_params,",
          "",
          "[Added Lines]",
          "4716:             if (empty($urlParams['table']) && ! empty($urlParams['db'])) {",
          "4717:                 $urlParams['table'] = $dbi->fetchValue('SHOW TABLES');",
          "4719:                 if ($urlParams['table'] === false) {",
          "4720:                     unset($urlParams['table']);",
          "4725:             $fieldsMeta = $this->properties['fields_meta'];",
          "4726:             foreach ($fieldsMeta as $meta) {",
          "4728:                     $geometryFound = true;",
          "4735:             'has_procedure' => ! empty($analyzedSqlResults['procedure']),",
          "4736:             'has_geometry' => $geometryFound,",
          "4738:             'has_export_link' => $analyzedSqlResults['querytype'] === self::QUERY_TYPE_SELECT && ! isset($printview),",
          "4739:             'url_params' => $urlParams,",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "4797:     private function handleNonPrintableContents(",
          "4798:         $category,",
          "4799:         ?string $content,",
          "4803:         FieldMetadata $meta,",
          "4806:     ) {",
          "4808:         $result = '[' . $category;",
          "4810:         if ($content !== null) {",
          "4811:             $size = strlen($content);",
          "4814:         } else {",
          "4815:             $result .= ' - NULL';",
          "4816:             $size = 0;",
          "",
          "[Removed Lines]",
          "4800:         $transformation_plugin,",
          "4801:         $transform_options,",
          "4802:         $default_function,",
          "4804:         array $url_params = [],",
          "4805:         &$is_truncated = null",
          "4807:         $is_truncated = false;",
          "4812:             $display_size = Util::formatByteDown($size, 3, 1);",
          "4813:             $result .= ' - ' . $display_size[0] . ' ' . $display_size[1];",
          "",
          "[Added Lines]",
          "4769:         $transformationPlugin,",
          "4770:         $transformOptions,",
          "4771:         $defaultFunction,",
          "4773:         array $urlParams = [],",
          "4774:         &$isTruncated = null",
          "4776:         $isTruncated = false;",
          "4781:             $displaySize = Util::formatByteDown($size, 3, 1);",
          "4782:             $result .= ' - ' . $displaySize[0] . ' ' . $displaySize[1];",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "4820:         $result .= ']';",
          "4824:             $posMimeOctetstream = strpos(",
          "4826:                 'Octetstream'",
          "4827:             );",
          "4829:             if (",
          "4830:                 $posMimeOctetstream",
          "4831:                 || $posMimeText !== false",
          "",
          "[Removed Lines]",
          "4823:         if (is_object($transformation_plugin)) {",
          "4825:                 $transformation_plugin->getMIMESubtype(),",
          "4828:             $posMimeText = strpos($transformation_plugin->getMIMEtype(), 'Text');",
          "",
          "[Added Lines]",
          "4792:         if (is_object($transformationPlugin)) {",
          "4794:                 $transformationPlugin->getMIMESubtype(),",
          "4797:             $posMimeText = strpos($transformationPlugin->getMIMEtype(), 'Text');",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "4840:             return $result;",
          "4841:         }",
          "4845:                 $result,",
          "4847:                 $meta",
          "4848:             );",
          "4850:             return $result;",
          "4851:         }",
          "4854:         if (",
          "4855:             ($_SESSION['tmpval']['display_binary']",
          "4856:             && $meta->isType(FieldMetadata::TYPE_STRING))",
          "",
          "[Removed Lines]",
          "4843:         if ($default_function != $transformation_plugin) {",
          "4844:             $result = $transformation_plugin->applyTransformation(",
          "4846:                 $transform_options,",
          "4853:         $result = $default_function($result, [], $meta);",
          "",
          "[Added Lines]",
          "4812:         if ($defaultFunction != $transformationPlugin) {",
          "4813:             $result = $transformationPlugin->applyTransformation(",
          "4815:                 $transformOptions,",
          "4822:         $result = $defaultFunction($result, [], $meta);",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "4869:             }",
          "4871:             [",
          "4873:                 $result,",
          "4875:             ] = $this->getPartialText($result);",
          "",
          "[Removed Lines]",
          "4872:                 $is_truncated,",
          "",
          "[Added Lines]",
          "4841:                 $isTruncated,",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "4881:         $tmpdb = $this->properties['db'];",
          "4882:         if (",
          "4884:             && (! empty($tmpdb) && ! empty($meta->orgtable))",
          "4885:         ) {",
          "4887:             $result = '<a href=\"'",
          "4889:                 . '\" class=\"disableAjax\">'",
          "4890:                 . $result . '</a>';",
          "4891:         }",
          "",
          "[Removed Lines]",
          "4883:             count($url_params) > 0",
          "4886:             $url_params['where_clause_sign'] = Core::signSqlQuery($url_params['where_clause']);",
          "4888:                 . Url::getFromRoute('/table/get-field', $url_params)",
          "",
          "[Added Lines]",
          "4852:             count($urlParams) > 0",
          "4855:             $urlParams['where_clause_sign'] = Core::signSqlQuery($urlParams['where_clause']);",
          "4857:                 . Url::getFromRoute('/table/get-field', $urlParams)",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "4908:     {",
          "4909:         global $dbi;",
          "",
          "[Removed Lines]",
          "4907:     private function getFromForeign(array $map, FieldMetadata $meta, $where_comparison)",
          "",
          "[Added Lines]",
          "4876:     private function getFromForeign(array $map, FieldMetadata $meta, $whereComparison)",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "4916:             . Util::backquote($map[$meta->name][0])",
          "4917:             . ' WHERE '",
          "4918:             . Util::backquote($map[$meta->name][1])",
          "4921:         $dispresult = $dbi->tryQuery(",
          "4922:             $dispsql,",
          "",
          "[Removed Lines]",
          "4919:             . $where_comparison;",
          "",
          "[Added Lines]",
          "4888:             . $whereComparison;",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "4969:     private function getRowData(",
          "4970:         $class,",
          "4973:         FieldMetadata $meta,",
          "4974:         array $map,",
          "4975:         $data,",
          "4976:         $displayedData,",
          "4979:         $nowrap,",
          "4984:     ) {",
          "4987:         $decimals = $meta->decimals ?? '-1';",
          "4988:         $result = '<td data-decimals=\"' . $decimals . '\"'",
          "4989:             . ' data-type=\"' . $meta->getMappedType() . '\"';",
          "4994:         }",
          "5010:                 if (empty($expr->alias) || empty($expr->column)) {",
          "5011:                     continue;",
          "5012:                 }",
          "",
          "[Removed Lines]",
          "4971:         $condition_field,",
          "4972:         array $analyzed_sql_results,",
          "4977:         $transformation_plugin,",
          "4978:         $default_function,",
          "4980:         $where_comparison,",
          "4981:         array $transform_options,",
          "4982:         $is_field_truncated,",
          "4983:         $original_length = ''",
          "4985:         $relational_display = $_SESSION['tmpval']['relational_display'];",
          "4986:         $printview = $this->properties['printview'];",
          "4991:         if (! empty($original_length)) {",
          "4993:             $result .= ' data-originallength=\"' . $original_length . '\"';",
          "4996:         $result .= ' class=\"'",
          "4997:             . $this->addClass(",
          "4998:                 $class,",
          "4999:                 $condition_field,",
          "5000:                 $meta,",
          "5001:                 $nowrap,",
          "5002:                 $is_field_truncated,",
          "5003:                 $transformation_plugin,",
          "5004:                 $default_function",
          "5005:             )",
          "5006:             . '\">';",
          "5008:         if (! empty($analyzed_sql_results['statement']->expr)) {",
          "5009:             foreach ($analyzed_sql_results['statement']->expr as $expr) {",
          "",
          "[Added Lines]",
          "4940:         $conditionField,",
          "4941:         array $analyzedSqlResults,",
          "4946:         $transformationPlugin,",
          "4947:         $defaultFunction,",
          "4949:         $whereComparison,",
          "4950:         array $transformOptions,",
          "4951:         $isFieldTruncated,",
          "4952:         $originalLength = ''",
          "4954:         $relationalDisplay = $_SESSION['tmpval']['relational_display'];",
          "4955:         $printView = $this->properties['printview'];",
          "4960:         if (! empty($originalLength)) {",
          "4962:             $result .= ' data-originallength=\"' . $originalLength . '\"';",
          "4965:         $result .= ' class=\"' . $this->addClass(",
          "4966:             $class,",
          "4967:             $conditionField,",
          "4968:             $meta,",
          "4969:             $nowrap,",
          "4970:             $isFieldTruncated,",
          "4971:             $transformationPlugin,",
          "4972:             $defaultFunction",
          "4973:         ) . '\">';",
          "4975:         if (! empty($analyzedSqlResults['statement']->expr)) {",
          "4976:             foreach ($analyzedSqlResults['statement']->expr as $expr) {",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "5028:                 $dispval = $this->getFromForeign(",
          "5029:                     $map,",
          "5030:                     $meta,",
          "5032:                 );",
          "5033:             } else {",
          "5034:                 $dispval = '';",
          "5035:             }",
          "5040:                         $data,",
          "5042:                         $meta",
          "5043:                     )",
          "5045:                 )",
          "5046:                 . ' <code>[-&gt;' . $dispval . ']</code>';",
          "5047:             } else {",
          "5051:                     $title = ! empty($dispval)",
          "",
          "[Removed Lines]",
          "5031:                     $where_comparison",
          "5037:             if (isset($printview) && ($printview == '1')) {",
          "5038:                 $result .= ($transformation_plugin != $default_function",
          "5039:                     ? $transformation_plugin->applyTransformation(",
          "5041:                         $transform_options,",
          "5044:                     : $default_function($data)",
          "5048:                 if ($relational_display === self::RELATIONAL_KEY) {",
          "",
          "[Added Lines]",
          "4998:                     $whereComparison",
          "5004:             if (isset($printView) && ($printView == '1')) {",
          "5005:                 $result .= ($transformationPlugin != $defaultFunction",
          "5006:                     ? $transformationPlugin->applyTransformation(",
          "5008:                         $transformOptions,",
          "5011:                     : $defaultFunction($data)",
          "5015:                 if ($relationalDisplay === self::RELATIONAL_KEY) {",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "5060:                     . Util::backquote($map[$meta->name][0])",
          "5061:                     . ' WHERE '",
          "5062:                     . Util::backquote($map[$meta->name][1])",
          "5066:                     'db'    => $map[$meta->name][3],",
          "5067:                     'table' => $map[$meta->name][0],",
          "5068:                     'pos'   => '0',",
          "",
          "[Removed Lines]",
          "5063:                     . $where_comparison;",
          "5065:                 $_url_params = [",
          "",
          "[Added Lines]",
          "5030:                     . $whereComparison;",
          "5032:                 $urlParams = [",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "5070:                     'sql_query' => $sqlQuery,",
          "5071:                 ];",
          "5077:                         $data,",
          "5079:                         $meta",
          "5080:                     );",
          "5081:                 } else {",
          "5082:                     if (",
          "5084:                         && ! empty($map[$meta->name][2])",
          "5085:                     ) {",
          "5089:                     } else {",
          "5092:                     }",
          "5093:                 }",
          "5096:                 if (strpos($class, 'grid_edit') !== false) {",
          "5098:                 }",
          "5100:                 $result .= Generator::linkOrButton(",
          "5102:                     $displayedData,",
          "5104:                 );",
          "5105:             }",
          "5106:         } else {",
          "5109:                     $data,",
          "5111:                     $meta",
          "5112:                 )",
          "5114:             );",
          "5115:         }",
          "",
          "[Removed Lines]",
          "5073:                 if ($transformation_plugin != $default_function) {",
          "5076:                     $displayedData = $transformation_plugin->applyTransformation(",
          "5078:                         $transform_options,",
          "5083:                         $relational_display === self::RELATIONAL_DISPLAY_COLUMN",
          "5088:                         $displayedData = $dispval === null ? '<em>NULL</em>' : $default_function($dispval);",
          "5091:                         $displayedData = $default_function($displayedData);",
          "5095:                 $tag_params = ['title' => $title];",
          "5097:                     $tag_params['class'] = 'ajax';",
          "5101:                     Url::getFromRoute('/sql', $_url_params),",
          "5103:                     $tag_params",
          "5107:             $result .= ($transformation_plugin != $default_function",
          "5108:                 ? $transformation_plugin->applyTransformation(",
          "5110:                     $transform_options,",
          "5113:                 : $default_function($data)",
          "",
          "[Added Lines]",
          "5040:                 if ($transformationPlugin != $defaultFunction) {",
          "5043:                     $displayedData = $transformationPlugin->applyTransformation(",
          "5045:                         $transformOptions,",
          "5050:                         $relationalDisplay === self::RELATIONAL_DISPLAY_COLUMN",
          "5055:                         $displayedData = $dispval === null ? '<em>NULL</em>' : $defaultFunction($dispval);",
          "5058:                         $displayedData = $defaultFunction($displayedData);",
          "5062:                 $tagParams = ['title' => $title];",
          "5064:                     $tagParams['class'] = 'ajax';",
          "5068:                     Url::getFromRoute('/sql', $urlParams),",
          "5070:                     $tagParams",
          "5074:             $result .= ($transformationPlugin != $defaultFunction",
          "5075:                 ? $transformationPlugin->applyTransformation(",
          "5077:                     $transformOptions,",
          "5080:                 : $defaultFunction($data)",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "5135:     private function getPartialText($str): array",
          "5136:     {",
          "5138:         if (",
          "5140:             && $_SESSION['tmpval']['pftext'] === self::DISPLAY_PARTIAL_TEXT",
          "5141:         ) {",
          "5142:             $str = mb_substr(",
          "",
          "[Removed Lines]",
          "5137:         $original_length = mb_strlen($str);",
          "5139:             $original_length > $GLOBALS['cfg']['LimitChars']",
          "",
          "[Added Lines]",
          "5104:         $originalLength = mb_strlen($str);",
          "5106:             $originalLength > $GLOBALS['cfg']['LimitChars']",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "5152:         return [",
          "5153:             $truncated,",
          "5154:             $str,",
          "5156:         ];",
          "5157:     }",
          "5158: }",
          "",
          "[Removed Lines]",
          "5155:             $original_length,",
          "",
          "[Added Lines]",
          "5122:             $originalLength,",
          "",
          "---------------"
        ],
        "libraries/classes/Html/Generator.php||libraries/classes/Html/Generator.php": [
          "File: libraries/classes/Html/Generator.php -> libraries/classes/Html/Generator.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:     public static function getExternalBug(",
          "171:         $functionality,",
          "172:         $component,",
          "175:     ): string {",
          "176:         global $dbi;",
          "181:                 sprintf(",
          "182:                     __('The %s functionality is affected by a known bug, see %s'),",
          "183:                     $functionality,",
          "185:                 )",
          "186:             );",
          "187:         }",
          "190:     }",
          "",
          "[Removed Lines]",
          "173:         $minimum_version,",
          "174:         $bugref",
          "178:         $ext_but_html = '';",
          "179:         if (($component === 'mysql') && ($dbi->getVersion() < $minimum_version)) {",
          "180:             $ext_but_html .= self::showHint(",
          "184:                     Core::linkURL('https://bugs.mysql.com/') . $bugref",
          "189:         return $ext_but_html;",
          "",
          "[Added Lines]",
          "173:         $minimumVersion,",
          "174:         $bugReference",
          "178:         $return = '';",
          "179:         if (($component === 'mysql') && ($dbi->getVersion() < $minimumVersion)) {",
          "180:             $return .= self::showHint(",
          "184:                     Core::linkURL('https://bugs.mysql.com/') . $bugReference",
          "189:         return $return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:     public static function getIcon(",
          "207:         $icon,",
          "208:         $alternate = '',",
          "212:     ): string {",
          "216:         }",
          "218:         if (",
          "221:         ) {",
          "223:         }",
          "229:             $button .= self::getImage($icon, $alternate);",
          "230:         }",
          "233:             $button .= '&nbsp;';",
          "234:         }",
          "237:             $button .= $alternate;",
          "238:         }",
          "242:         return $button;",
          "243:     }",
          "",
          "[Removed Lines]",
          "209:         $force_text = false,",
          "210:         $menu_icon = false,",
          "211:         $control_param = 'ActionLinksMode'",
          "213:         $include_icon = $include_text = false;",
          "214:         if (Util::showIcons($control_param)) {",
          "215:             $include_icon = true;",
          "219:             $force_text",
          "220:             || Util::showText($control_param)",
          "222:             $include_text = true;",
          "227:         $button = $menu_icon ? '' : '<span class=\"text-nowrap\">';",
          "228:         if ($include_icon) {",
          "232:         if ($include_icon && $include_text) {",
          "236:         if ($include_text) {",
          "240:         $button .= $menu_icon ? '' : '</span>';",
          "",
          "[Added Lines]",
          "209:         $forceText = false,",
          "210:         $menuIcon = false,",
          "211:         $controlParam = 'ActionLinksMode'",
          "213:         $includeIcon = $includeText = false;",
          "214:         if (Util::showIcons($controlParam)) {",
          "215:             $includeIcon = true;",
          "219:             $forceText",
          "220:             || Util::showText($controlParam)",
          "222:             $includeText = true;",
          "227:         $button = $menuIcon ? '' : '<span class=\"text-nowrap\">';",
          "228:         if ($includeIcon) {",
          "232:         if ($includeIcon && $includeText) {",
          "236:         if ($includeText) {",
          "240:         $button .= $menuIcon ? '' : '</span>';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "287:     {",
          "288:         global $cfg, $data, $dbi;",
          "296:         }",
          "",
          "[Removed Lines]",
          "286:     public static function getDefaultFunctionForField(array $field, $insert_mode): string",
          "290:         $default_function = '';",
          "293:         $current_class = $dbi->types->getTypeClass($field['True_Type']);",
          "294:         if (! empty($current_class) && isset($cfg['DefaultFunctions']['FUNC_' . $current_class])) {",
          "295:             $default_function = $cfg['DefaultFunctions']['FUNC_' . $current_class];",
          "",
          "[Added Lines]",
          "286:     public static function getDefaultFunctionForField(array $field, $insertMode): string",
          "290:         $defaultFunction = '';",
          "293:         $currentClass = $dbi->types->getTypeClass($field['True_Type']);",
          "294:         if (! empty($currentClass) && isset($cfg['DefaultFunctions']['FUNC_' . $currentClass])) {",
          "295:             $defaultFunction = $cfg['DefaultFunctions']['FUNC_' . $currentClass];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "309:             && $field['Extra'] !== 'on update CURRENT_TIMESTAMP'",
          "310:             && $field['Null'] === 'NO'",
          "311:         ) {",
          "313:         }",
          "318:         if (",
          "320:             && $field['Key'] === 'PRI'",
          "321:             && ($field['Type'] === 'char(36)' || $field['Type'] === 'varchar(36)')",
          "322:         ) {",
          "324:         }",
          "327:     }",
          "341:     {",
          "342:         global $dbi;",
          "348:         $retval = '<option></option>' . \"\\n\";",
          "",
          "[Removed Lines]",
          "312:             $default_function = $cfg['DefaultFunctions']['first_timestamp'];",
          "319:             $insert_mode",
          "323:             $default_function = $cfg['DefaultFunctions']['FUNC_UUID'];",
          "326:         return $default_function;",
          "340:     public static function getFunctionsForField(array $field, $insert_mode, array $foreignData): string",
          "344:         $default_function = self::getDefaultFunctionForField($field, $insert_mode);",
          "345:         $dropdown_built = [];",
          "",
          "[Added Lines]",
          "312:             $defaultFunction = $cfg['DefaultFunctions']['first_timestamp'];",
          "319:             $insertMode",
          "323:             $defaultFunction = $cfg['DefaultFunctions']['FUNC_UUID'];",
          "326:         return $defaultFunction;",
          "338:     public static function getFunctionsForField(array $field, $insertMode, array $foreignData): string",
          "342:         $defaultFunction = self::getDefaultFunctionForField($field, $insertMode);",
          "343:         $dropdownBuilt = [];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "353:             $retval .= '<option';",
          "354:             if (",
          "355:                 isset($foreignData['foreign_link']) && $foreignData['foreign_link'] !== false",
          "357:             ) {",
          "358:                 $retval .= ' selected=\"selected\"';",
          "359:             }",
          "361:             $retval .= '>' . $function . '</option>' . \"\\n\";",
          "363:         }",
          "365:         $retval .= '<option value=\"PHP_PASSWORD_HASH\" title=\"';",
          "",
          "[Removed Lines]",
          "356:                 && $default_function === $function",
          "362:             $dropdown_built[$function] = true;",
          "",
          "[Added Lines]",
          "354:                 && $defaultFunction === $function",
          "360:             $dropdownBuilt[$function] = true;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "449:     {",
          "450:         $template = new Template();",
          "",
          "[Removed Lines]",
          "448:     public static function getStartAndNumberOfRowsPanel($sql_query): string",
          "",
          "[Added Lines]",
          "446:     public static function getStartAndNumberOfRowsPanel($sqlQuery): string",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "466:         } elseif (isset($_SESSION['tmpval']['pos'])) {",
          "467:             $pos = $_SESSION['tmpval']['pos'];",
          "468:         } else {",
          "471:             $_SESSION['tmpval']['pos'] = $pos;",
          "472:         }",
          "",
          "[Removed Lines]",
          "469:             $number_of_line = (int) $_REQUEST['unlim_num_rows'];",
          "470:             $pos = (ceil($number_of_line / $rows) - 1) * $rows;",
          "",
          "[Added Lines]",
          "467:             $numberOfLine = (int) $_REQUEST['unlim_num_rows'];",
          "468:             $pos = (ceil($numberOfLine / $rows) - 1) * $rows;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "477:                 'pos' => $pos,",
          "478:                 'unlim_num_rows' => (int) $_REQUEST['unlim_num_rows'],",
          "479:                 'rows' => $rows,",
          "481:             ]",
          "482:         );",
          "483:     }",
          "",
          "[Removed Lines]",
          "480:                 'sql_query' => $sql_query,",
          "",
          "[Added Lines]",
          "478:                 'sql_query' => $sqlQuery,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "545:     public static function getMessage(",
          "546:         $message,",
          "548:         $type = 'notice'",
          "549:     ): string {",
          "550:         global $cfg, $dbi;",
          "552:         $retval = '';",
          "555:             if (! empty($GLOBALS['display_query'])) {",
          "557:             } elseif (! empty($GLOBALS['unparsed_sql'])) {",
          "559:             } elseif (! empty($GLOBALS['sql_query'])) {",
          "561:             } else {",
          "563:             }",
          "564:         }",
          "568:         if (isset($GLOBALS['using_bookmark_message'])) {",
          "569:             $retval .= $GLOBALS['using_bookmark_message']->getDisplay();",
          "570:             unset($GLOBALS['using_bookmark_message']);",
          "571:         }",
          "574:             $retval .= '<div class=\"result_query\">' . \"\\n\";",
          "575:         }",
          "",
          "[Removed Lines]",
          "547:         $sql_query = null,",
          "554:         if ($sql_query === null) {",
          "556:                 $sql_query = $GLOBALS['display_query'];",
          "558:                 $sql_query = $GLOBALS['unparsed_sql'];",
          "560:                 $sql_query = $GLOBALS['sql_query'];",
          "562:                 $sql_query = '';",
          "566:         $render_sql = $cfg['ShowSQL'] == true && ! empty($sql_query) && $sql_query !== ';';",
          "573:         if ($render_sql) {",
          "",
          "[Added Lines]",
          "545:         $sqlQuery = null,",
          "552:         if ($sqlQuery === null) {",
          "554:                 $sqlQuery = $GLOBALS['display_query'];",
          "556:                 $sqlQuery = $GLOBALS['unparsed_sql'];",
          "558:                 $sqlQuery = $GLOBALS['sql_query'];",
          "560:                 $sqlQuery = '';",
          "564:         $renderSql = $cfg['ShowSQL'] == true && ! empty($sqlQuery) && $sqlQuery !== ';';",
          "571:         if ($renderSql) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "599:             $retval .= '</div>';",
          "600:         }",
          "606:             if ($queryLength > $cfg['MaxCharactersInDisplayedSQL']) {",
          "612:                     0,",
          "613:                     $cfg['MaxCharactersInDisplayedSQL']",
          "614:                 ) . '[...]';",
          "615:             } else {",
          "617:             }",
          "",
          "[Removed Lines]",
          "602:         if ($render_sql) {",
          "603:             $query_too_big = false;",
          "605:             $queryLength = mb_strlen($sql_query);",
          "609:                 $query_too_big = true;",
          "610:                 $query_base = mb_substr(",
          "611:                     $sql_query,",
          "616:                 $query_base = $sql_query;",
          "",
          "[Added Lines]",
          "600:         if ($renderSql) {",
          "601:             $queryTooBig = false;",
          "603:             $queryLength = mb_strlen($sqlQuery);",
          "607:                 $queryTooBig = true;",
          "608:                 $queryBase = mb_substr(",
          "609:                     $sqlQuery,",
          "614:                 $queryBase = $sqlQuery;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "623:             if (! empty($GLOBALS['show_as_php'])) {",
          "627:                     '/((\\015\\012)|(\\015)|(\\012))/',",
          "630:                 );",
          "633:                     . '</pre></code>';",
          "637:                     '</pre></code>';",
          "638:             } else {",
          "640:             }",
          "",
          "[Removed Lines]",
          "624:                 $new_line = '\\\\n\"<br>' . \"\\n\" . '&nbsp;&nbsp;&nbsp;&nbsp;. \"';",
          "625:                 $query_base = htmlspecialchars(addslashes($query_base));",
          "626:                 $query_base = preg_replace(",
          "628:                     $new_line,",
          "629:                     $query_base",
          "631:                 $query_base = '<code class=\"php\"><pre>' . \"\\n\"",
          "632:                     . '$sql = \"' . $query_base . '\";' . \"\\n\"",
          "634:             } elseif ($query_too_big) {",
          "635:                 $query_base = '<code class=\"sql\"><pre>' . \"\\n\" .",
          "636:                     htmlspecialchars($query_base) .",
          "639:                 $query_base = self::formatSql($query_base);",
          "",
          "[Added Lines]",
          "622:                 $newLine = '\\\\n\"<br>' . \"\\n\" . '&nbsp;&nbsp;&nbsp;&nbsp;. \"';",
          "623:                 $queryBase = htmlspecialchars(addslashes($queryBase));",
          "624:                 $queryBase = preg_replace(",
          "626:                     $newLine,",
          "627:                     $queryBase",
          "629:                 $queryBase = '<code class=\"php\"><pre>' . \"\\n\"",
          "630:                     . '$sql = \"' . $queryBase . '\";' . \"\\n\"",
          "632:             } elseif ($queryTooBig) {",
          "633:                 $queryBase = '<code class=\"sql\"><pre>' . \"\\n\" .",
          "634:                     htmlspecialchars($queryBase) .",
          "637:                 $queryBase = self::formatSql($queryBase);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "648:             if (! isset($GLOBALS['db'])) {",
          "649:                 $GLOBALS['db'] = '';",
          "650:             }",
          "652:             if (strlen($GLOBALS['db']) > 0) {",
          "654:                 if (strlen($GLOBALS['table']) > 0) {",
          "657:                 } else {",
          "659:                 }",
          "660:             } else {",
          "662:             }",
          "674:                         . self::linkOrButton(",
          "676:                             __('Explain SQL')",
          "677:                         ) . '&nbsp;]';",
          "678:                 } elseif (",
          "679:                     preg_match(",
          "680:                         '@^EXPLAIN[[:space:]]+SELECT[[:space:]]+@i',",
          "682:                     )",
          "683:                 ) {",
          "687:                         . self::linkOrButton(",
          "689:                             __('Skip Explain SQL')",
          "690:                         ) . ']';",
          "691:                     $url = 'https://mariadb.org/explain_analyzer/analyze/'",
          "692:                         . '?client=phpMyAdmin&raw_explain='",
          "695:                         . self::linkOrButton(",
          "696:                             htmlspecialchars('url.php?url=' . urlencode($url)),",
          "697:                             sprintf(__('Analyze Explain at %s'), 'mariadb.org'),",
          "",
          "[Removed Lines]",
          "647:             $url_params = [];",
          "653:                 $url_params['db'] = $GLOBALS['db'];",
          "655:                     $url_params['table'] = $GLOBALS['table'];",
          "656:                     $edit_link = Url::getFromRoute('/table/sql');",
          "658:                     $edit_link = Url::getFromRoute('/database/sql');",
          "661:                 $edit_link = Url::getFromRoute('/server/sql');",
          "667:             $explain_link = '';",
          "668:             $is_select = preg_match('@^SELECT[[:space:]]+@i', $sql_query);",
          "669:             if (! empty($cfg['SQLQuery']['Explain']) && ! $query_too_big) {",
          "670:                 $explain_params = $url_params;",
          "671:                 if ($is_select) {",
          "672:                     $explain_params['sql_query'] = 'EXPLAIN ' . $sql_query;",
          "673:                     $explain_link = ' [&nbsp;'",
          "675:                             Url::getFromRoute('/import', $explain_params),",
          "681:                         $sql_query",
          "684:                     $explain_params['sql_query']",
          "685:                         = mb_substr($sql_query, 8);",
          "686:                     $explain_link = ' [&nbsp;'",
          "688:                             Url::getFromRoute('/import', $explain_params),",
          "693:                         . urlencode(self::generateRowQueryOutput($sql_query));",
          "694:                     $explain_link .= ' ['",
          "",
          "[Added Lines]",
          "645:             $urlParams = [];",
          "651:                 $urlParams['db'] = $GLOBALS['db'];",
          "653:                     $urlParams['table'] = $GLOBALS['table'];",
          "654:                     $editLink = Url::getFromRoute('/table/sql');",
          "656:                     $editLink = Url::getFromRoute('/database/sql');",
          "659:                 $editLink = Url::getFromRoute('/server/sql');",
          "665:             $explainLink = '';",
          "666:             $isSelect = preg_match('@^SELECT[[:space:]]+@i', $sqlQuery);",
          "667:             if (! empty($cfg['SQLQuery']['Explain']) && ! $queryTooBig) {",
          "668:                 $explainParams = $urlParams;",
          "669:                 if ($isSelect) {",
          "670:                     $explainParams['sql_query'] = 'EXPLAIN ' . $sqlQuery;",
          "671:                     $explainLink = ' [&nbsp;'",
          "673:                             Url::getFromRoute('/import', $explainParams),",
          "679:                         $sqlQuery",
          "682:                     $explainParams['sql_query']",
          "683:                         = mb_substr($sqlQuery, 8);",
          "684:                     $explainLink = ' [&nbsp;'",
          "686:                             Url::getFromRoute('/import', $explainParams),",
          "691:                         . urlencode(self::generateRowQueryOutput($sqlQuery));",
          "692:                     $explainLink .= ' ['",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "701:                 }",
          "702:             }",
          "",
          "[Removed Lines]",
          "704:             $url_params['sql_query'] = $sql_query;",
          "705:             $url_params['show_query'] = 1;",
          "",
          "[Added Lines]",
          "702:             $urlParams['sql_query'] = $sqlQuery;",
          "703:             $urlParams['show_query'] = 1;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "710:                 ! empty($cfg['SQLQuery']['Edit'])",
          "711:                 && empty($GLOBALS['show_as_php'])",
          "712:             ) {",
          "716:                     . '&nbsp;]';",
          "717:             } else {",
          "719:             }",
          "724:                 if (! empty($GLOBALS['show_as_php'])) {",
          "726:                         . self::linkOrButton(",
          "728:                             __('Without PHP code')",
          "729:                         )",
          "730:                         . '&nbsp;]';",
          "733:                         . self::linkOrButton(",
          "735:                             __('Submit query')",
          "736:                         )",
          "737:                         . '&nbsp;]';",
          "738:                 } else {",
          "742:                         . self::linkOrButton(",
          "744:                             __('Create PHP code')",
          "745:                         )",
          "746:                         . '&nbsp;]';",
          "747:                 }",
          "748:             } else {",
          "750:             }",
          "753:             if (",
          "754:                 ! empty($cfg['SQLQuery']['Refresh'])",
          "755:                 && ! isset($GLOBALS['show_as_php']) // 'Submit query' does the same",
          "757:             ) {",
          "761:             } else {",
          "763:             }",
          "765:             $retval .= '<div class=\"sqlOuter\">';",
          "767:             $retval .= '</div>';",
          "769:             $retval .= '<div class=\"tools print_ignore\">';",
          "770:             $retval .= '<form action=\"' . Url::getFromRoute('/sql') . '\" method=\"post\">';",
          "771:             $retval .= Url::getHiddenInputs($GLOBALS['db'], $GLOBALS['table']);",
          "772:             $retval .= '<input type=\"hidden\" name=\"sql_query\" value=\"'",
          "778:                 $retval .= '<input type=\"hidden\" name=\"profiling_form\" value=\"1\">';",
          "779:                 $retval .= '<input type=\"checkbox\" name=\"profiling\" id=\"profilingCheckbox\" class=\"autosubmit\"';",
          "780:                 $retval .= isset($_SESSION['profiling']) ? ' checked' : '';",
          "",
          "[Removed Lines]",
          "713:                 $edit_link .= Url::getCommon($url_params, '&');",
          "714:                 $edit_link = ' [&nbsp;'",
          "715:                     . self::linkOrButton($edit_link, __('Edit'))",
          "718:                 $edit_link = '';",
          "723:             if (! empty($cfg['SQLQuery']['ShowAsPHP']) && ! $query_too_big) {",
          "725:                     $php_link = ' [&nbsp;'",
          "727:                             Url::getFromRoute('/import', $url_params),",
          "732:                     $php_link .= ' [&nbsp;'",
          "734:                             Url::getFromRoute('/import', $url_params),",
          "739:                     $php_params = $url_params;",
          "740:                     $php_params['show_as_php'] = 1;",
          "741:                     $php_link = ' [&nbsp;'",
          "743:                             Url::getFromRoute('/import', $php_params),",
          "749:                 $php_link = '';",
          "756:                 && preg_match('@^(SELECT|SHOW)[[:space:]]+@i', $sql_query)",
          "758:                 $refresh_link = Url::getFromRoute('/sql', $url_params);",
          "759:                 $refresh_link = ' [&nbsp;'",
          "760:                     . self::linkOrButton($refresh_link, __('Refresh')) . '&nbsp;]';",
          "762:                 $refresh_link = '';",
          "766:             $retval .= $query_base;",
          "773:                 . htmlspecialchars($sql_query) . '\">';",
          "777:             if (! empty($refresh_link) && Profiling::isSupported($dbi)) {",
          "",
          "[Added Lines]",
          "711:                 $editLink .= Url::getCommon($urlParams, '&');",
          "712:                 $editLink = ' [&nbsp;'",
          "713:                     . self::linkOrButton($editLink, __('Edit'))",
          "716:                 $editLink = '';",
          "721:             if (! empty($cfg['SQLQuery']['ShowAsPHP']) && ! $queryTooBig) {",
          "723:                     $phpLink = ' [&nbsp;'",
          "725:                             Url::getFromRoute('/import', $urlParams),",
          "730:                     $phpLink .= ' [&nbsp;'",
          "732:                             Url::getFromRoute('/import', $urlParams),",
          "737:                     $phpParams = $urlParams;",
          "738:                     $phpParams['show_as_php'] = 1;",
          "739:                     $phpLink = ' [&nbsp;'",
          "741:                             Url::getFromRoute('/import', $phpParams),",
          "747:                 $phpLink = '';",
          "754:                 && preg_match('@^(SELECT|SHOW)[[:space:]]+@i', $sqlQuery)",
          "756:                 $refreshLink = Url::getFromRoute('/sql', $urlParams);",
          "757:                 $refreshLink = ' [&nbsp;'",
          "758:                     . self::linkOrButton($refreshLink, __('Refresh')) . '&nbsp;]';",
          "760:                 $refreshLink = '';",
          "764:             $retval .= $queryBase;",
          "771:                 . htmlspecialchars($sqlQuery) . '\">';",
          "775:             if (! empty($refreshLink) && Profiling::isSupported($dbi)) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "789:             if (",
          "790:                 ! empty($cfg['SQLQuery']['Edit'])",
          "792:                 && empty($GLOBALS['show_as_php'])",
          "793:             ) {",
          "795:                     . self::linkOrButton(",
          "796:                         '#',",
          "797:                         _pgettext('Inline edit query', 'Edit inline'),",
          "",
          "[Removed Lines]",
          "791:                 && ! $query_too_big",
          "794:                 $inline_edit_link = ' [&nbsp;'",
          "",
          "[Added Lines]",
          "789:                 && ! $queryTooBig",
          "792:                 $inlineEditLink = ' [&nbsp;'",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "799:                     )",
          "800:                     . '&nbsp;]';",
          "801:             } else {",
          "803:             }",
          "807:             $retval .= '</div>';",
          "809:             $retval .= '</div>';",
          "",
          "[Removed Lines]",
          "802:                 $inline_edit_link = '';",
          "805:             $retval .= $inline_edit_link . $edit_link . $explain_link . $php_link",
          "806:                 . $refresh_link;",
          "",
          "[Added Lines]",
          "800:                 $inlineEditLink = '';",
          "803:             $retval .= $inlineEditLink . $editLink . $explainLink . $phpLink",
          "804:                 . $refreshLink;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "868:     public static function mysqlDie(",
          "873:         $exit = true",
          "874:     ): ?string {",
          "875:         global $table, $db, $dbi;",
          "",
          "[Removed Lines]",
          "869:         $server_msg = '',",
          "870:         $sql_query = '',",
          "871:         $is_modify_link = true,",
          "872:         $back_url = '',",
          "",
          "[Added Lines]",
          "867:         $serverMessage = '',",
          "868:         $sqlQuery = '',",
          "869:         $isModifyLink = true,",
          "870:         $backUrl = '',",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "887:         }",
          "892:         }",
          "",
          "[Removed Lines]",
          "882:         $error_msg = '';",
          "885:         if (empty($server_msg)) {",
          "886:             $server_msg = (string) $dbi->getError();",
          "890:         if (empty($sql_query) && ! empty($GLOBALS['sql_query'])) {",
          "891:             $sql_query = $GLOBALS['sql_query'];",
          "894:         $sql_query = trim($sql_query);",
          "901:         $lexer = new Lexer($sql_query);",
          "",
          "[Added Lines]",
          "880:         $errorMessage = '';",
          "883:         if (empty($serverMessage)) {",
          "884:             $serverMessage = (string) $dbi->getError();",
          "888:         if (empty($sqlQuery) && ! empty($GLOBALS['sql_query'])) {",
          "889:             $sqlQuery = $GLOBALS['sql_query'];",
          "892:         $sqlQuery = trim($sqlQuery);",
          "899:         $lexer = new Lexer($sqlQuery);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "919:             ]",
          "920:         );",
          "924:         } elseif (count($errors)) {",
          "926:         } else {",
          "928:         }",
          "936:             if (! empty($errors)) {",
          "938:                     . '</strong></p>';",
          "940:                     __('%d errors were found during analysis.'),",
          "941:                     count($errors)",
          "942:                 ) . '</p>';",
          "945:                     ParserError::format(",
          "946:                         $errors,",
          "947:                         '<li>%2$s (near \"%4$s\" at position %5$d)</li>'",
          "948:                     )",
          "949:                 );",
          "951:             }",
          "956:             ) . \"\\n\";",
          "960:             if (mb_strstr($formattedSqlToLower, 'select')) {",
          "963:             }",
          "968:                     'show_query' => 1,",
          "969:                 ];",
          "970:                 if (strlen($table) > 0) {",
          "974:                 } elseif (strlen($db) > 0) {",
          "977:                 } else {",
          "979:                 }",
          "982:                     . self::getIcon('b_edit', __('Edit'))",
          "983:                     . '</a>';",
          "984:             }",
          "987:                 . '<p>' . \"\\n\"",
          "989:                 . '</p>' . \"\\n\";",
          "990:         }",
          "995:                 \"@((\\015\\012)|(\\015)|(\\012)){3,}@\",",
          "996:                 \"\\n\\n\",",
          "998:             );",
          "1002:                 . '    <strong>' . __('MySQL said: ') . '</strong>'",
          "1003:                 . MySQLDocumentation::show('server-error-reference')",
          "1004:                 . \"\\n\"",
          "",
          "[Removed Lines]",
          "922:         if (empty($sql_query)) {",
          "923:             $formatted_sql = '';",
          "925:             $formatted_sql = htmlspecialchars($sql_query);",
          "927:             $formatted_sql = self::formatSql($sql_query, true);",
          "930:         $error_msg .= '<div class=\"alert alert-danger\" role=\"alert\"><h1>' . __('Error') . '</h1>';",
          "934:         if (! empty($sql_query) && ! mb_strstr($sql_query, 'connect')) {",
          "937:                 $error_msg .= '<p><strong>' . __('Static analysis:')",
          "939:                 $error_msg .= '<p>' . sprintf(",
          "943:                 $error_msg .= '<p><ol>';",
          "944:                 $error_msg .= implode(",
          "950:                 $error_msg .= '</ol></p>';",
          "954:             $error_msg .= '<p><strong>' . __('SQL query:') . '</strong>' . self::showCopyToClipboard(",
          "955:                 $sql_query",
          "957:             $formattedSqlToLower = mb_strtolower($formatted_sql);",
          "962:                 $error_msg .= MySQLDocumentation::show('SELECT');",
          "965:             if ($is_modify_link) {",
          "966:                 $_url_params = [",
          "967:                     'sql_query' => $sql_query,",
          "971:                     $_url_params['db'] = $db;",
          "972:                     $_url_params['table'] = $table;",
          "973:                     $doedit_goto = '<a href=\"' . Url::getFromRoute('/table/sql', $_url_params) . '\">';",
          "975:                     $_url_params['db'] = $db;",
          "976:                     $doedit_goto = '<a href=\"' . Url::getFromRoute('/database/sql', $_url_params) . '\">';",
          "978:                     $doedit_goto = '<a href=\"' . Url::getFromRoute('/server/sql', $_url_params) . '\">';",
          "981:                 $error_msg .= $doedit_goto",
          "986:             $error_msg .= '    </p>' . \"\\n\"",
          "988:                 . $formatted_sql . \"\\n\"",
          "993:         if (! empty($server_msg)) {",
          "994:             $server_msg = (string) preg_replace(",
          "997:                 (string) $server_msg",
          "1001:             $error_msg .= '<p>' . \"\\n\"",
          "",
          "[Added Lines]",
          "920:         if (empty($sqlQuery)) {",
          "921:             $formattedSql = '';",
          "923:             $formattedSql = htmlspecialchars($sqlQuery);",
          "925:             $formattedSql = self::formatSql($sqlQuery, true);",
          "928:         $errorMessage .= '<div class=\"alert alert-danger\" role=\"alert\"><h1>' . __('Error') . '</h1>';",
          "932:         if (! empty($sqlQuery) && ! mb_strstr($sqlQuery, 'connect')) {",
          "935:                 $errorMessage .= '<p><strong>' . __('Static analysis:')",
          "937:                 $errorMessage .= '<p>' . sprintf(",
          "941:                 $errorMessage .= '<p><ol>';",
          "942:                 $errorMessage .= implode(",
          "948:                 $errorMessage .= '</ol></p>';",
          "952:             $errorMessage .= '<p><strong>' . __('SQL query:') . '</strong>' . self::showCopyToClipboard(",
          "953:                 $sqlQuery",
          "955:             $formattedSqlToLower = mb_strtolower($formattedSql);",
          "960:                 $errorMessage .= MySQLDocumentation::show('SELECT');",
          "963:             if ($isModifyLink) {",
          "964:                 $urlParams = [",
          "965:                     'sql_query' => $sqlQuery,",
          "969:                     $urlParams['db'] = $db;",
          "970:                     $urlParams['table'] = $table;",
          "971:                     $doEditGoto = '<a href=\"' . Url::getFromRoute('/table/sql', $urlParams) . '\">';",
          "973:                     $urlParams['db'] = $db;",
          "974:                     $doEditGoto = '<a href=\"' . Url::getFromRoute('/database/sql', $urlParams) . '\">';",
          "976:                     $doEditGoto = '<a href=\"' . Url::getFromRoute('/server/sql', $urlParams) . '\">';",
          "979:                 $errorMessage .= $doEditGoto",
          "984:             $errorMessage .= '    </p>' . \"\\n\"",
          "986:                 . $formattedSql . \"\\n\"",
          "991:         if (! empty($serverMessage)) {",
          "992:             $serverMessage = (string) preg_replace(",
          "995:                 (string) $serverMessage",
          "999:             $errorMessage .= '<p>' . \"\\n\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1013:                 [",
          "1014:                     '  ',",
          "1015:                     \"\\t\",",
          "",
          "[Removed Lines]",
          "1012:             $server_msg = str_replace(",
          "",
          "[Added Lines]",
          "1010:             $serverMessage = str_replace(",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1018:                     '&nbsp;&nbsp;',",
          "1019:                     '&nbsp;&nbsp;&nbsp;&nbsp;',",
          "1020:                 ],",
          "1022:             );",
          "1028:         }",
          "1033:         if (! $exit) {",
          "1035:         }",
          "",
          "[Removed Lines]",
          "1021:                 $server_msg",
          "1025:             $server_msg = nl2br($server_msg);",
          "1027:             $error_msg .= '<code>' . $server_msg . '</code><br>';",
          "1030:         $error_msg .= '</div>';",
          "1031:         $_SESSION['Import_message']['message'] = $error_msg;",
          "1034:             return $error_msg;",
          "",
          "[Added Lines]",
          "1019:                 $serverMessage",
          "1023:             $serverMessage = nl2br($serverMessage);",
          "1025:             $errorMessage .= '<code>' . $serverMessage . '</code><br>';",
          "1028:         $errorMessage .= '</div>';",
          "1029:         $_SESSION['Import_message']['message'] = $errorMessage;",
          "1032:             return $errorMessage;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1041:         $response = Response::getInstance();",
          "1042:         if ($response->isAjax()) {",
          "1043:             $response->setRequestStatus(false);",
          "1045:             exit;",
          "1046:         }",
          "1051:             } else {",
          "1053:             }",
          "1059:                 . '</fieldset>' . \"\\n\\n\";",
          "1060:         }",
          "1063:     }",
          "",
          "[Removed Lines]",
          "1044:             $response->addJSON('message', $error_msg);",
          "1048:         if (! empty($back_url)) {",
          "1049:             if (mb_strstr($back_url, '?')) {",
          "1050:                 $back_url .= '&amp;no_history=true';",
          "1052:                 $back_url .= '?no_history=true';",
          "1055:             $_SESSION['Import_message']['go_back_url'] = $back_url;",
          "1057:             $error_msg .= '<fieldset class=\"pma-fieldset tblFooters\">'",
          "1058:                 . '[ <a href=\"' . $back_url . '\">' . __('Back') . '</a> ]'",
          "1062:         exit($error_msg);",
          "",
          "[Added Lines]",
          "1042:             $response->addJSON('message', $errorMessage);",
          "1046:         if (! empty($backUrl)) {",
          "1047:             if (mb_strstr($backUrl, '?')) {",
          "1048:                 $backUrl .= '&amp;no_history=true';",
          "1050:                 $backUrl .= '?no_history=true';",
          "1053:             $_SESSION['Import_message']['go_back_url'] = $backUrl;",
          "1055:             $errorMessage .= '<fieldset class=\"pma-fieldset tblFooters\">'",
          "1056:                 . '[ <a href=\"' . $backUrl . '\">' . __('Back') . '</a> ]'",
          "1060:         exit($errorMessage);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1085:         }",
          "1089:         foreach ($attributes as $key => $value) {",
          "1090:             if (in_array($key, ['alt', 'title'])) {",
          "1091:                 continue;",
          "1092:             }",
          "1095:         }",
          "",
          "[Removed Lines]",
          "1088:         $attr_str = '';",
          "1094:             $attr_str .= ' ' . $key . '=\"' . $value . '\"';",
          "",
          "[Added Lines]",
          "1086:         $attributeString = '';",
          "1092:             $attributeString .= ' ' . $key . '=\"' . $value . '\"';",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1104:         $template = '<img src=\"themes/dot.gif\" title=\"%s\" alt=\"%s\"%s>';",
          "1107:     }",
          "",
          "[Removed Lines]",
          "1106:         return sprintf($template, $title, $alt, $attr_str);",
          "",
          "[Added Lines]",
          "1104:         return sprintf($template, $title, $alt, $attributeString);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1126:     public static function linkOrButton(",
          "1127:         $url,",
          "1128:         $message,",
          "1130:         $target = ''",
          "1131:     ): string {",
          "1137:             if (! empty($tmp)) {",
          "1139:                     . Sanitize::escapeJsString($tmp) . '\\')';",
          "1140:             }",
          "",
          "[Removed Lines]",
          "1129:         $tag_params = [],",
          "1132:         $url_length = strlen($url);",
          "1134:         if (! is_array($tag_params)) {",
          "1135:             $tmp = $tag_params;",
          "1136:             $tag_params = [];",
          "1138:                 $tag_params['onclick'] = 'return Functions.confirmLink(this, \\''",
          "",
          "[Added Lines]",
          "1127:         $tagParams = [],",
          "1130:         $urlLength = strlen($url);",
          "1132:         if (! is_array($tagParams)) {",
          "1133:             $tmp = $tagParams;",
          "1134:             $tagParams = [];",
          "1136:                 $tagParams['onclick'] = 'return Functions.confirmLink(this, \\''",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1143:         }",
          "1145:         if (! empty($target)) {",
          "1147:             if ($target === '_blank' && strncmp($url, 'url.php?', 8) == 0) {",
          "1149:             }",
          "1150:         }",
          "1160:                         continue;",
          "1161:                     }",
          "1166:                         break;",
          "1167:                     }",
          "1168:                 }",
          "1169:             }",
          "1170:         }",
          "1173:         if (",
          "1177:             || (strpos($url, 'sql_query=') !== false && strpos($url, 'sql_signature=') === false)",
          "1178:             || strpos($url, 'view[as]=') !== false",
          "",
          "[Removed Lines]",
          "1146:             $tag_params['target'] = $target;",
          "1148:                 $tag_params['rel'] = 'noopener noreferrer';",
          "1153:         $in_suhosin_limits = true;",
          "1154:         if ($url_length <= $GLOBALS['cfg']['LinkLengthLimit']) {",
          "1155:             $suhosin_get_MaxValueLength = ini_get('suhosin.get.max_value_length');",
          "1156:             if ($suhosin_get_MaxValueLength) {",
          "1157:                 $query_parts = Util::splitURLQuery($url);",
          "1158:                 foreach ($query_parts as $query_pair) {",
          "1159:                     if (strpos($query_pair, '=') === false) {",
          "1163:                     [, $eachval] = explode('=', $query_pair);",
          "1164:                     if (strlen($eachval) > $suhosin_get_MaxValueLength) {",
          "1165:                         $in_suhosin_limits = false;",
          "1172:         $tag_params_strings = [];",
          "1174:             ($url_length > $GLOBALS['cfg']['LinkLengthLimit'])",
          "1175:             || ! $in_suhosin_limits",
          "",
          "[Added Lines]",
          "1144:             $tagParams['target'] = $target;",
          "1146:                 $tagParams['rel'] = 'noopener noreferrer';",
          "1151:         $inSuhosinLimits = true;",
          "1152:         if ($urlLength <= $GLOBALS['cfg']['LinkLengthLimit']) {",
          "1153:             $suhosinGetMaxValueLength = ini_get('suhosin.get.max_value_length');",
          "1154:             if ($suhosinGetMaxValueLength) {",
          "1155:                 $queryParts = Util::splitURLQuery($url);",
          "1156:                 foreach ($queryParts as $queryPair) {",
          "1157:                     if (strpos($queryPair, '=') === false) {",
          "1161:                     [, $eachValue] = explode('=', $queryPair);",
          "1162:                     if (strlen($eachValue) > $suhosinGetMaxValueLength) {",
          "1163:                         $inSuhosinLimits = false;",
          "1170:         $tagParamsStrings = [];",
          "1172:             ($urlLength > $GLOBALS['cfg']['LinkLengthLimit'])",
          "1173:             || ! $inSuhosinLimits",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1186:             $url = $parts[0];",
          "1187:             if (",
          "1190:             ) {",
          "1191:                 $url .= '?' . explode('&', $parts[1], 2)[0];",
          "1192:             }",
          "1193:         }",
          "1197:         }",
          "1200:         return '<a href=\"' . $url . '\" '",
          "1202:             . $message . '</a>';",
          "1203:     }",
          "",
          "[Removed Lines]",
          "1185:             $tag_params_strings[] = 'data-post=\"' . ($parts[1] ?? '') . '\"';",
          "1188:                 array_key_exists('class', $tag_params)",
          "1189:                 && strpos($tag_params['class'], 'create_view') !== false",
          "1195:         foreach ($tag_params as $par_name => $par_value) {",
          "1196:             $tag_params_strings[] = $par_name . '=\"' . htmlspecialchars($par_value) . '\"';",
          "1201:             . implode(' ', $tag_params_strings) . '>'",
          "",
          "[Added Lines]",
          "1183:             $tagParamsStrings[] = 'data-post=\"' . ($parts[1] ?? '') . '\"';",
          "1186:                 array_key_exists('class', $tagParams)",
          "1187:                 && strpos($tagParams['class'], 'create_view') !== false",
          "1193:         foreach ($tagParams as $paramName => $paramValue) {",
          "1194:             $tagParamsStrings[] = $paramName . '=\"' . htmlspecialchars($paramValue) . '\"';",
          "1199:             . implode(' ', $tagParamsStrings) . '>'",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1224:     public static function getListNavigator(",
          "1225:         $count,",
          "1226:         $pos,",
          "1228:         $script,",
          "1229:         $frame,",
          "1231:         $name = 'pos',",
          "1232:         $classes = []",
          "1233:     ): string {",
          "1239:         }",
          "1241:         $class = $frame === 'frame_navigation' ? ' class=\"ajax\"' : '';",
          "1246:             $classes[] = 'pageselector';",
          "1249:             if ($frame !== 'frame_navigation') {",
          "1251:             }",
          "",
          "[Removed Lines]",
          "1227:         array $_url_params,",
          "1230:         $max_count,",
          "1236:         $max_count = intval($max_count);",
          "1237:         if ($max_count <= 0) {",
          "1238:             $max_count = 250;",
          "1243:         $list_navigator_html = '';",
          "1245:         if ($max_count < $count) {",
          "1247:             $list_navigator_html .= '<div class=\"' . implode(' ', $classes) . '\">';",
          "1250:                 $list_navigator_html .= __('Page number:');",
          "",
          "[Added Lines]",
          "1225:         array $urlParams,",
          "1228:         $maxCount,",
          "1234:         $maxCount = intval($maxCount);",
          "1235:         if ($maxCount <= 0) {",
          "1236:             $maxCount = 250;",
          "1241:         $listNavigatorHtml = '';",
          "1243:         if ($maxCount < $count) {",
          "1245:             $listNavigatorHtml .= '<div class=\"' . implode(' ', $classes) . '\">';",
          "1248:                 $listNavigatorHtml .= __('Page number:');",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1267:                 $title1 = ' title=\"' . _pgettext('First page', 'Begin') . '\"';",
          "1268:                 $title2 = ' title=\"' . _pgettext('Previous page', 'Previous') . '\"';",
          "1273:                     . '</a>';",
          "1278:                     . $caption2 . '</a>';",
          "1279:             }",
          "1282:                 . '\" method=\"post\">';",
          "1286:                 $name,",
          "1290:             );",
          "1294:                 $caption3 = '';",
          "1295:                 $caption4 = '';",
          "1296:                 if (Util::showText('TableNavigationLinksMode')) {",
          "",
          "[Removed Lines]",
          "1270:                 $_url_params[$name] = 0;",
          "1271:                 $list_navigator_html .= '<a' . $class . $title1 . ' href=\"' . $script",
          "1272:                     . Url::getCommon($_url_params, '&') . '\">' . $caption1",
          "1275:                 $_url_params[$name] = $pos - $max_count;",
          "1276:                 $list_navigator_html .= ' <a' . $class . $title2",
          "1277:                     . ' href=\"' . $script . Url::getCommon($_url_params, '&') . '\">'",
          "1281:             $list_navigator_html .= '<form action=\"' . $script",
          "1284:             $list_navigator_html .= Url::getHiddenInputs($_url_params);",
          "1285:             $list_navigator_html .= Util::pageselector(",
          "1287:                 $max_count,",
          "1288:                 Util::getPageFromPosition($pos, $max_count),",
          "1289:                 (int) ceil($count / $max_count)",
          "1291:             $list_navigator_html .= '</form>';",
          "1293:             if ($pos + $max_count < $count) {",
          "",
          "[Added Lines]",
          "1268:                 $urlParams[$name] = 0;",
          "1269:                 $listNavigatorHtml .= '<a' . $class . $title1 . ' href=\"' . $script",
          "1270:                     . Url::getCommon($urlParams, '&') . '\">' . $caption1",
          "1273:                 $urlParams[$name] = $pos - $maxCount;",
          "1274:                 $listNavigatorHtml .= ' <a' . $class . $title2",
          "1275:                     . ' href=\"' . $script . Url::getCommon($urlParams, '&') . '\">'",
          "1279:             $listNavigatorHtml .= '<form action=\"' . $script",
          "1282:             $listNavigatorHtml .= Url::getHiddenInputs($urlParams);",
          "1283:             $listNavigatorHtml .= Util::pageselector(",
          "1285:                 $maxCount,",
          "1286:                 Util::getPageFromPosition($pos, $maxCount),",
          "1287:                 (int) ceil($count / $maxCount)",
          "1289:             $listNavigatorHtml .= '</form>';",
          "1291:             if ($pos + $maxCount < $count) {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1306:                 $title3 = ' title=\"' . _pgettext('Next page', 'Next') . '\"';",
          "1307:                 $title4 = ' title=\"' . _pgettext('Last page', 'End') . '\"';",
          "1312:                     . '</a>';",
          "1317:                 }",
          "1321:                     . $caption4 . '</a>';",
          "1322:             }",
          "1325:         }",
          "1328:     }",
          "",
          "[Removed Lines]",
          "1309:                 $_url_params[$name] = $pos + $max_count;",
          "1310:                 $list_navigator_html .= '<a' . $class . $title3 . ' href=\"' . $script",
          "1311:                     . Url::getCommon($_url_params, '&') . '\" >' . $caption3",
          "1314:                 $_url_params[$name] = floor($count / $max_count) * $max_count;",
          "1315:                 if ($_url_params[$name] == $count) {",
          "1316:                     $_url_params[$name] = $count - $max_count;",
          "1319:                 $list_navigator_html .= ' <a' . $class . $title4",
          "1320:                     . ' href=\"' . $script . Url::getCommon($_url_params, '&') . '\" >'",
          "1324:             $list_navigator_html .= '</div>' . \"\\n\";",
          "1327:         return $list_navigator_html;",
          "",
          "[Added Lines]",
          "1307:                 $urlParams[$name] = $pos + $maxCount;",
          "1308:                 $listNavigatorHtml .= '<a' . $class . $title3 . ' href=\"' . $script",
          "1309:                     . Url::getCommon($urlParams, '&') . '\" >' . $caption3",
          "1312:                 $urlParams[$name] = floor($count / $maxCount) * $maxCount;",
          "1313:                 if ($urlParams[$name] == $count) {",
          "1314:                     $urlParams[$name] = $count - $maxCount;",
          "1317:                 $listNavigatorHtml .= ' <a' . $class . $title4",
          "1318:                     . ' href=\"' . $script . Url::getCommon($urlParams, '&') . '\" >'",
          "1322:             $listNavigatorHtml .= '</div>' . \"\\n\";",
          "1325:         return $listNavigatorHtml;",
          "",
          "---------------"
        ],
        "libraries/classes/ReplicationGui.php||libraries/classes/ReplicationGui.php": [
          "File: libraries/classes/ReplicationGui.php -> libraries/classes/ReplicationGui.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         $html = '';",
          "53:         if (isset($_SESSION['replication']['sr_action_status'], $_SESSION['replication']['sr_action_info'])) {",
          "54:             if ($_SESSION['replication']['sr_action_status'] === 'error') {",
          "57:                 $_SESSION['replication']['sr_action_status'] = 'unknown';",
          "58:             } elseif ($_SESSION['replication']['sr_action_status'] === 'success') {",
          "61:                 $_SESSION['replication']['sr_action_status'] = 'unknown';",
          "62:             }",
          "63:         }",
          "",
          "[Removed Lines]",
          "55:                 $error_message = $_SESSION['replication']['sr_action_info'];",
          "56:                 $html .= Message::error($error_message)->getDisplay();",
          "59:                 $success_message = $_SESSION['replication']['sr_action_info'];",
          "60:                 $html .= Message::success($success_message)->getDisplay();",
          "",
          "[Added Lines]",
          "55:                 $errorMessage = $_SESSION['replication']['sr_action_info'];",
          "56:                 $html .= Message::error($errorMessage)->getDisplay();",
          "59:                 $successMessage = $_SESSION['replication']['sr_action_info'];",
          "60:                 $html .= Message::success($successMessage)->getDisplay();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "340:     {",
          "341:         global $dbi;",
          "347:             if ($val['Field'] === 'User') {",
          "348:                 strtok($val['Type'], '()');",
          "349:                 $v = strtok('()');",
          "350:                 if (Util::isInteger($v)) {",
          "352:                 }",
          "353:             } elseif ($val['Field'] === 'Host') {",
          "354:                 strtok($val['Type'], '()');",
          "355:                 $v = strtok('()');",
          "356:                 if (Util::isInteger($v)) {",
          "358:                 }",
          "359:             }",
          "360:         }",
          "362:         return [",
          "365:         ];",
          "366:     }",
          "",
          "[Removed Lines]",
          "343:         $fields_info = $dbi->getColumns('mysql', 'user');",
          "344:         $username_length = 16;",
          "345:         $hostname_length = 41;",
          "346:         foreach ($fields_info as $val) {",
          "351:                     $username_length = (int) $v;",
          "357:                     $hostname_length = (int) $v;",
          "363:             $username_length,",
          "364:             $hostname_length,",
          "",
          "[Added Lines]",
          "343:         $fieldsInfo = $dbi->getColumns('mysql', 'user');",
          "344:         $usernameLength = 16;",
          "345:         $hostnameLength = 41;",
          "346:         foreach ($fieldsInfo as $val) {",
          "351:                     $usernameLength = (int) $v;",
          "357:                     $hostnameLength = (int) $v;",
          "363:             $usernameLength,",
          "364:             $hostnameLength,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "528:         $_SESSION['replication']['sr_action_info'] = __('Unknown error');",
          "532:             $sr['username'],",
          "533:             $sr['pma_pw'],",
          "534:             $sr['hostname'],",
          "535:             $sr['port']",
          "536:         );",
          "539:             $_SESSION['replication']['sr_action_status'] = 'error';",
          "540:             $_SESSION['replication']['sr_action_info'] = sprintf(",
          "541:                 __('Unable to connect to master %s.'),",
          "",
          "[Removed Lines]",
          "531:         $link_to_master = $this->replication->connectToMaster(",
          "538:         if (! $link_to_master) {",
          "",
          "[Added Lines]",
          "531:         $linkToMaster = $this->replication->connectToMaster(",
          "538:         if (! $linkToMaster) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "543:             );",
          "544:         } else {",
          "548:             if (empty($position)) {",
          "549:                 $_SESSION['replication']['sr_action_status'] = 'error';",
          "",
          "[Removed Lines]",
          "546:             $position = $this->replication->slaveBinLogMaster($link_to_master);",
          "",
          "[Added Lines]",
          "546:             $position = $this->replication->slaveBinLogMaster($linkToMaster);",
          "",
          "---------------"
        ],
        "libraries/classes/Scripts.php||libraries/classes/Scripts.php": [
          "File: libraries/classes/Scripts.php -> libraries/classes/Scripts.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:             return;",
          "64:         }",
          "67:         $this->files[$hash] = [",
          "69:             'filename' => $filename,",
          "70:             'params' => $params,",
          "71:         ];",
          "",
          "[Removed Lines]",
          "66:         $has_onload = $this->hasOnloadEvent($filename);",
          "68:             'has_onload' => $has_onload,",
          "",
          "[Added Lines]",
          "66:         $hasOnload = $this->hasOnloadEvent($filename);",
          "68:             'has_onload' => $hasOnload,",
          "",
          "---------------"
        ],
        "libraries/classes/TwoFactor.php||libraries/classes/TwoFactor.php": [
          "File: libraries/classes/TwoFactor.php -> libraries/classes/TwoFactor.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "208:     {",
          "210:             return $this->backend->check();",
          "211:         }",
          "",
          "[Removed Lines]",
          "207:     public function check($skip_session = false)",
          "209:         if ($skip_session) {",
          "",
          "[Added Lines]",
          "207:     public function check($skipSession = false)",
          "209:         if ($skipSession) {",
          "",
          "---------------"
        ],
        "phpstan-baseline.neon||phpstan-baseline.neon": [
          "File: phpstan-baseline.neon -> phpstan-baseline.neon",
          "--- Hunk 1 ---",
          "[Context before]",
          "416:    path: libraries/classes/Display/Results.php",
          "418:   -",
          "420:    count: 1",
          "421:    path: libraries/classes/Display/Results.php",
          "423:   -",
          "425:    count: 1",
          "426:    path: libraries/classes/Display/Results.php",
          "428:   -",
          "430:    count: 1",
          "431:    path: libraries/classes/Display/Results.php",
          "433:   -",
          "435:    count: 1",
          "436:    path: libraries/classes/Display/Results.php",
          "438:   -",
          "440:    count: 1",
          "441:    path: libraries/classes/Display/Results.php",
          "443:   -",
          "445:    count: 1",
          "446:    path: libraries/classes/Display/Results.php",
          "448:   -",
          "450:    count: 1",
          "451:    path: libraries/classes/Display/Results.php",
          "",
          "[Removed Lines]",
          "419:    message: \"#^Parameter \\\\#4 \\\\$sort_expression_nodirection of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:getTableHeadersForColumns\\\\(\\\\) expects array, array\\\\|string given\\\\.$#\"",
          "424:    message: \"#^Parameter \\\\#2 \\\\$sort_order of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:getSortingUrlParams\\\\(\\\\) expects string, string\\\\|null given\\\\.$#\"",
          "429:    message: \"#^Parameter \\\\#9 \\\\$default_function of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:getDataCellForNumericColumns\\\\(\\\\) expects string, array\\\\<int, string\\\\> given\\\\.$#\"",
          "434:    message: \"#^Parameter \\\\#8 \\\\$default_function of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:getDataCellForGeometryColumns\\\\(\\\\) expects string, array\\\\<int, string\\\\> given\\\\.$#\"",
          "439:    message: \"#^Parameter \\\\#9 \\\\$transform_options of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:getDataCellForGeometryColumns\\\\(\\\\) expects string, array given\\\\.$#\"",
          "444:    message: \"#^Parameter \\\\#8 \\\\$default_function of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:getDataCellForNonNumericColumns\\\\(\\\\) expects string, array\\\\<int, string\\\\> given\\\\.$#\"",
          "449:    message: \"#^Parameter \\\\#9 \\\\$transform_options of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:getDataCellForNonNumericColumns\\\\(\\\\) expects string, array given\\\\.$#\"",
          "",
          "[Added Lines]",
          "419:    message: \"#^Parameter \\\\#4 \\\\$sortExpressionNoDirection of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:getTableHeadersForColumns\\\\(\\\\) expects array, array\\\\|string given\\\\.$#\"",
          "424:    message: \"#^Parameter \\\\#2 \\\\$sortOrder of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:getSortingUrlParams\\\\(\\\\) expects string, string\\\\|null given\\\\.$#\"",
          "429:    message: \"#^Parameter \\\\#9 \\\\$defaultFunction of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:getDataCellForNumericColumns\\\\(\\\\) expects string, array\\\\<int, string\\\\> given\\\\.$#\"",
          "434:    message: \"#^Parameter \\\\#8 \\\\$defaultFunction of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:getDataCellForGeometryColumns\\\\(\\\\) expects string, array\\\\<int, string\\\\> given\\\\.$#\"",
          "439:    message: \"#^Parameter \\\\#9 \\\\$transformOptions of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:getDataCellForGeometryColumns\\\\(\\\\) expects string, array given\\\\.$#\"",
          "444:    message: \"#^Parameter \\\\#8 \\\\$defaultFunction of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:getDataCellForNonNumericColumns\\\\(\\\\) expects string, array\\\\<int, string\\\\> given\\\\.$#\"",
          "449:    message: \"#^Parameter \\\\#9 \\\\$transformOptions of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:getDataCellForNonNumericColumns\\\\(\\\\) expects string, array given\\\\.$#\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "456:    path: libraries/classes/Display/Results.php",
          "458:   -",
          "460:    count: 3",
          "461:    path: libraries/classes/Display/Results.php",
          "463:   -",
          "465:    count: 2",
          "466:    path: libraries/classes/Display/Results.php",
          "468:   -",
          "470:    count: 2",
          "471:    path: libraries/classes/Display/Results.php",
          "",
          "[Removed Lines]",
          "459:    message: \"#^Parameter \\\\#12 \\\\$transform_options of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:getRowData\\\\(\\\\) expects array, string given\\\\.$#\"",
          "464:    message: \"#^Parameter \\\\#4 \\\\$transform_options of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:handleNonPrintableContents\\\\(\\\\) expects string, array given\\\\.$#\"",
          "469:    message: \"#^Parameter \\\\#5 \\\\$default_function of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:handleNonPrintableContents\\\\(\\\\) expects string, array\\\\<int, string\\\\> given\\\\.$#\"",
          "",
          "[Added Lines]",
          "459:    message: \"#^Parameter \\\\#12 \\\\$transformOptions of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:getRowData\\\\(\\\\) expects array, string given\\\\.$#\"",
          "464:    message: \"#^Parameter \\\\#4 \\\\$transformOptions of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:handleNonPrintableContents\\\\(\\\\) expects string, array given\\\\.$#\"",
          "469:    message: \"#^Parameter \\\\#5 \\\\$defaultFunction of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:handleNonPrintableContents\\\\(\\\\) expects string, array\\\\<int, string\\\\> given\\\\.$#\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1991:    path: libraries/classes/Setup/ConfigGenerator.php",
          "1993:   -",
          "1995:    count: 1",
          "1996:    path: libraries/classes/Sql.php",
          "",
          "[Removed Lines]",
          "1994:    message: \"#^Parameter \\\\#3 \\\\$is_modify_link of static method PhpMyAdmin\\\\\\\\Html\\\\\\\\Generator\\\\:\\\\:mysqlDie\\\\(\\\\) expects bool, string given\\\\.$#\"",
          "",
          "[Added Lines]",
          "1994:    message: \"#^Parameter \\\\#3 \\\\$isModifyLink of static method PhpMyAdmin\\\\\\\\Html\\\\\\\\Generator\\\\:\\\\:mysqlDie\\\\(\\\\) expects bool, string given\\\\.$#\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2041:    path: libraries/classes/Sql.php",
          "2043:   -",
          "2045:    count: 1",
          "2046:    path: libraries/classes/Sql.php",
          "2048:   -",
          "2050:    count: 1",
          "2051:    path: libraries/classes/Sql.php",
          "2053:   -",
          "2055:    count: 2",
          "2056:    path: libraries/classes/Sql.php",
          "2058:   -",
          "2060:    count: 2",
          "2061:    path: libraries/classes/Sql.php",
          "",
          "[Removed Lines]",
          "2044:    message: \"#^Parameter \\\\#1 \\\\$unlim_num_rows of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:setProperties\\\\(\\\\) expects int, int\\\\<1, max\\\\>\\\\|string given\\\\.$#\"",
          "2049:    message: \"#^Parameter \\\\#7 \\\\$num_rows of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:setProperties\\\\(\\\\) expects int, int\\\\<1, max\\\\>\\\\|string given\\\\.$#\"",
          "2054:    message: \"#^Parameter \\\\#14 \\\\$showtable of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:setProperties\\\\(\\\\) expects array, bool given\\\\.$#\"",
          "2059:    message: \"#^Parameter \\\\#15 \\\\$printview of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:setProperties\\\\(\\\\) expects string, string\\\\|null given\\\\.$#\"",
          "",
          "[Added Lines]",
          "2044:    message: \"#^Parameter \\\\#1 \\\\$unlimNumRows of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:setProperties\\\\(\\\\) expects int, int\\\\<1, max\\\\>\\\\|string given\\\\.$#\"",
          "2049:    message: \"#^Parameter \\\\#7 \\\\$numRows of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:setProperties\\\\(\\\\) expects int, int\\\\<1, max\\\\>\\\\|string given\\\\.$#\"",
          "2054:    message: \"#^Parameter \\\\#14 \\\\$showTable of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:setProperties\\\\(\\\\) expects array, bool given\\\\.$#\"",
          "2059:    message: \"#^Parameter \\\\#15 \\\\$printView of method PhpMyAdmin\\\\\\\\Display\\\\\\\\Results\\\\:\\\\:setProperties\\\\(\\\\) expects string, string\\\\|null given\\\\.$#\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8311785a484d71ea11002a9deaed08cede69291e",
      "candidate_info": {
        "commit_hash": "8311785a484d71ea11002a9deaed08cede69291e",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/8311785a484d71ea11002a9deaed08cede69291e",
        "files": [
          "libraries/classes/InsertEdit.php"
        ],
        "message": "Fix #16708 - Only consider the first where clause\n\nSigned-off-by: William Desportes <williamdes@wdes.fr>",
        "before_after_code_files": [
          "libraries/classes/InsertEdit.php||libraries/classes/InsertEdit.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libraries/classes/InsertEdit.php||libraries/classes/InsertEdit.php"
          ],
          "candidate": [
            "libraries/classes/InsertEdit.php||libraries/classes/InsertEdit.php"
          ]
        }
      },
      "candidate_diff": {
        "libraries/classes/InsertEdit.php||libraries/classes/InsertEdit.php": [
          "File: libraries/classes/InsertEdit.php -> libraries/classes/InsertEdit.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2600:     ) {",
          "2601:         $include_file = 'libraries/classes/Plugins/Transformations/' . $file;",
          "2602:         if (is_file($include_file)) {",
          "2603:             $_url_params = [",
          "2604:                 'db'            => $db,",
          "2605:                 'table'         => $table,",
          "2608:                 'transform_key' => $column_name,",
          "2609:             ];",
          "2610:             $transform_options = $this->transformations->getOptions(",
          "",
          "[Removed Lines]",
          "2606:                 'where_clause_sign' => Core::signSqlQuery($_POST['where_clause']),",
          "2607:                 'where_clause'  => $_POST['where_clause'],",
          "",
          "[Added Lines]",
          "2604:             $whereClause = is_array($_POST['where_clause']) ? $_POST['where_clause'][0] : $_POST['where_clause'];",
          "2608:                 'where_clause_sign' => Core::signSqlQuery($whereClause),",
          "2609:                 'where_clause'  => $whereClause,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "405b6277e7ca1ba81e30d52f47e90446b0363be5",
      "candidate_info": {
        "commit_hash": "405b6277e7ca1ba81e30d52f47e90446b0363be5",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/405b6277e7ca1ba81e30d52f47e90446b0363be5",
        "files": [
          "ChangeLog",
          "js/src/table/zoom_plot_jqplot.js",
          "libraries/classes/Controllers/Table/SearchController.php",
          "libraries/classes/Controllers/Table/ZoomSearchController.php",
          "libraries/classes/Controllers/TransformationWrapperController.php",
          "libraries/classes/Display/Results.php",
          "libraries/classes/InsertEdit.php",
          "test/classes/Controllers/Table/SearchControllerTest.php",
          "test/classes/InsertEditTest.php"
        ],
        "message": "Merge branch 'QA_5_0'\n\nSigned-off-by: Maur\u00edcio Meneghini Fauth <mauricio@fauth.dev>",
        "before_after_code_files": [
          "js/src/table/zoom_plot_jqplot.js||js/src/table/zoom_plot_jqplot.js",
          "libraries/classes/Controllers/Table/SearchController.php||libraries/classes/Controllers/Table/SearchController.php",
          "libraries/classes/Controllers/Table/ZoomSearchController.php||libraries/classes/Controllers/Table/ZoomSearchController.php",
          "libraries/classes/Controllers/TransformationWrapperController.php||libraries/classes/Controllers/TransformationWrapperController.php",
          "libraries/classes/Display/Results.php||libraries/classes/Display/Results.php",
          "libraries/classes/InsertEdit.php||libraries/classes/InsertEdit.php",
          "test/classes/Controllers/Table/SearchControllerTest.php||test/classes/Controllers/Table/SearchControllerTest.php",
          "test/classes/InsertEditTest.php||test/classes/InsertEditTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libraries/classes/Display/Results.php||libraries/classes/Display/Results.php",
            "libraries/classes/InsertEdit.php||libraries/classes/InsertEdit.php"
          ],
          "candidate": [
            "libraries/classes/Display/Results.php||libraries/classes/Display/Results.php",
            "libraries/classes/InsertEdit.php||libraries/classes/InsertEdit.php"
          ]
        }
      },
      "candidate_diff": {
        "js/src/table/zoom_plot_jqplot.js||js/src/table/zoom_plot_jqplot.js": [
          "File: js/src/table/zoom_plot_jqplot.js -> js/src/table/zoom_plot_jqplot.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "550:                 value[dataLabel], // for highlighter",
          "552:                 value.where_clause, // for click on point",
          "554:             ]);",
          "555:         });",
          "",
          "[Removed Lines]",
          "553:                 key               // key from searchedData",
          "",
          "[Added Lines]",
          "553:                 key,               // key from searchedData",
          "554:                 value.where_clause_sign",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "583:                     'server' : CommonParams.get('server'),",
          "584:                     'db' : CommonParams.get('db'),",
          "585:                     'table' : CommonParams.get('table'),",
          "587:                 };",
          "589:                 $.post('index.php?route=/table/zoom-search', postParams, function (data) {",
          "",
          "[Removed Lines]",
          "586:                     'where_clause' : data[3]",
          "",
          "[Added Lines]",
          "587:                     'where_clause' : data[3],",
          "588:                     'where_clause_sign' : data[5]",
          "",
          "---------------"
        ],
        "libraries/classes/Controllers/Table/SearchController.php||libraries/classes/Controllers/Table/SearchController.php": [
          "File: libraries/classes/Controllers/Table/SearchController.php -> libraries/classes/Controllers/Table/SearchController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: namespace PhpMyAdmin\\Controllers\\Table;",
          "7: use PhpMyAdmin\\Common;",
          "8: use PhpMyAdmin\\DatabaseInterface;",
          "9: use PhpMyAdmin\\Operations;",
          "10: use PhpMyAdmin\\Relation;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: use PhpMyAdmin\\Core;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:     public function getDataRowAction()",
          "222:     {",
          "223:         $extra_data = [];",
          "224:         $row_info_query = 'SELECT * FROM ' . Util::backquote($_POST['db']) . '.'",
          "225:             . Util::backquote($_POST['table']) . ' WHERE ' . $_POST['where_clause'];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224:         if (! Core::checkSqlQuerySignature($_POST['where_clause'], $_POST['where_clause_sign'])) {",
          "225:             return;",
          "226:         }",
          "",
          "---------------"
        ],
        "libraries/classes/Controllers/Table/ZoomSearchController.php||libraries/classes/Controllers/Table/ZoomSearchController.php": [
          "File: libraries/classes/Controllers/Table/ZoomSearchController.php -> libraries/classes/Controllers/Table/ZoomSearchController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: namespace PhpMyAdmin\\Controllers\\Table;",
          "7: use PhpMyAdmin\\Common;",
          "8: use PhpMyAdmin\\DatabaseInterface;",
          "9: use PhpMyAdmin\\Relation;",
          "10: use PhpMyAdmin\\Response;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: use PhpMyAdmin\\Core;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "273:     public function getDataRowAction()",
          "274:     {",
          "275:         $extra_data = [];",
          "276:         $row_info_query = 'SELECT * FROM ' . Util::backquote($_POST['db']) . '.'",
          "277:             . Util::backquote($_POST['table']) . ' WHERE ' . $_POST['where_clause'];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276:         if (! Core::checkSqlQuerySignature($_POST['where_clause'], $_POST['where_clause_sign'])) {",
          "277:             return;",
          "278:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "368:             );",
          "370:             $row['where_clause'] = $uniqueCondition[0];",
          "372:             $tmpData = [",
          "373:                 $_POST['criteriaColumnNames'][0] =>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "376:             $row['where_clause_sign'] = Core::signSqlQuery($uniqueCondition[0]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "375:                 $_POST['criteriaColumnNames'][1] =>",
          "376:                     $row[$_POST['criteriaColumnNames'][1]],",
          "377:                 'where_clause' => $uniqueCondition[0],",
          "378:             ];",
          "379:             $tmpData[$dataLabel] = $dataLabel ? $row[$dataLabel] : '';",
          "380:             $data[] = $tmpData;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "384:                 'where_clause_sign' => Core::signSqlQuery($uniqueCondition[0]),",
          "",
          "---------------"
        ],
        "libraries/classes/Controllers/TransformationWrapperController.php||libraries/classes/Controllers/TransformationWrapperController.php": [
          "File: libraries/classes/Controllers/TransformationWrapperController.php -> libraries/classes/Controllers/TransformationWrapperController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:         $this->dbi->selectDb($db);",
          "106:         if (isset($where_clause)) {",
          "107:             $result = $this->dbi->query(",
          "108:                 'SELECT * FROM ' . Util::backquote($table)",
          "109:                 . ' WHERE ' . $where_clause . ';',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:             if (! Core::checkSqlQuerySignature($where_clause, $_GET['where_clause_sign'] ?? '')) {",
          "109:                 Core::fatalError(__('There is an issue with your request.'));",
          "111:                 return;",
          "112:             }",
          "",
          "---------------"
        ],
        "libraries/classes/Display/Results.php||libraries/classes/Display/Results.php": [
          "File: libraries/classes/Display/Results.php -> libraries/classes/Display/Results.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2873:             $_url_params = [",
          "2874:                 'db'            => $this->properties['db'],",
          "2875:                 'table'         => $meta->orgtable,",
          "2876:                 'where_clause'  => $whereClauseMap[$row_no][$meta->orgtable],",
          "2877:                 'transform_key' => $meta->orgname,",
          "2878:             ];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2876:                 'where_clause_sign' => Core::signSqlQuery($whereClauseMap[$row_no][$meta->orgtable]),",
          "",
          "---------------"
        ],
        "libraries/classes/InsertEdit.php||libraries/classes/InsertEdit.php": [
          "File: libraries/classes/InsertEdit.php -> libraries/classes/InsertEdit.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2603:             $_url_params = [",
          "2604:                 'db'            => $db,",
          "2605:                 'table'         => $table,",
          "2606:                 'where_clause'  => $_POST['where_clause'],",
          "2607:                 'transform_key' => $column_name,",
          "2608:             ];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2606:                 'where_clause_sign' => Core::signSqlQuery($_POST['where_clause']),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3430:                         'db'            => $db,",
          "3431:                         'table'         => $table,",
          "3432:                         'transform_key' => $column['Field'],",
          "3433:                         'where_clause'  => $where_clause,",
          "3434:                     ];",
          "3435:                     $transformation_options['wrapper_link'] = Url::getCommon($_url_params);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3434:                         'where_clause_sign' => Core::signSqlQuery($where_clause),",
          "",
          "---------------"
        ],
        "test/classes/Controllers/Table/SearchControllerTest.php||test/classes/Controllers/Table/SearchControllerTest.php": [
          "File: test/classes/Controllers/Table/SearchControllerTest.php -> test/classes/Controllers/Table/SearchControllerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: namespace PhpMyAdmin\\Tests\\Controllers\\Table;",
          "10: use PhpMyAdmin\\Controllers\\Table\\SearchController;",
          "11: use PhpMyAdmin\\DatabaseInterface;",
          "12: use PhpMyAdmin\\Relation;",
          "13: use PhpMyAdmin\\Table\\Search;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: use PhpMyAdmin\\Core;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181:         $_POST['db'] = 'PMA';",
          "182:         $_POST['table'] = 'PMA_BookMark';",
          "183:         $_POST['where_clause'] = '`col1` = 1';",
          "184:         $expected = [",
          "185:             'col1' => 1,",
          "186:             'col2' => 2,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:         $_POST['where_clause_sign'] = Core::signSqlQuery('`col1` = 1');",
          "",
          "---------------"
        ],
        "test/classes/InsertEditTest.php||test/classes/InsertEditTest.php": [
          "File: test/classes/InsertEditTest.php -> test/classes/InsertEditTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3253:             '',",
          "3254:         ];",
          "3255:         $GLOBALS['cfg']['ServerDefault'] = 1;",
          "3257:         $transformation = ['transformation_options' => \"'','option ,, quoted',abd\"];",
          "3258:         $result = $this->insertEdit->transformEditedValues(",
          "3259:             'db',",
          "",
          "[Removed Lines]",
          "3256:         $_POST['where_clause'] = 1;",
          "",
          "[Added Lines]",
          "3256:         $_POST['where_clause'] = '1';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "54e360bb9f852460b3b4d626b4394097148bb9d0",
      "candidate_info": {
        "commit_hash": "54e360bb9f852460b3b4d626b4394097148bb9d0",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/54e360bb9f852460b3b4d626b4394097148bb9d0",
        "files": [
          "libraries/classes/InsertEdit.php",
          "phpstan-baseline.neon",
          "psalm-baseline.xml"
        ],
        "message": "Rename variables to use camelCase in InsertEdit\n\nSigned-off-by: Maur\u00edcio Meneghini Fauth <mauricio@fauth.dev>",
        "before_after_code_files": [
          "libraries/classes/InsertEdit.php||libraries/classes/InsertEdit.php",
          "phpstan-baseline.neon||phpstan-baseline.neon"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libraries/classes/InsertEdit.php||libraries/classes/InsertEdit.php"
          ],
          "candidate": [
            "libraries/classes/InsertEdit.php||libraries/classes/InsertEdit.php"
          ]
        }
      },
      "candidate_diff": {
        "libraries/classes/InsertEdit.php||libraries/classes/InsertEdit.php": [
          "File: libraries/classes/InsertEdit.php -> libraries/classes/InsertEdit.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     public function getFormParametersForInsertForm(",
          "105:         $db,",
          "106:         $table,",
          "110:     ) {",
          "112:             'db'        => $db,",
          "113:             'table'     => $table,",
          "114:             'goto'      => $GLOBALS['goto'],",
          "116:             'sql_query' => $_POST['sql_query'],",
          "117:         ];",
          "121:             }",
          "122:         }",
          "124:         if (isset($_POST['clause_is_unique'])) {",
          "126:         }",
          "129:     }",
          "139:     {",
          "141:             return [];",
          "142:         }",
          "146:         }",
          "149:     }",
          "160:     private function analyzeWhereClauses(",
          "162:         $table,",
          "163:         $db",
          "164:     ) {",
          "165:         $rows               = [];",
          "166:         $result             = [];",
          "171:                 . Util::backquote($db) . '.'",
          "172:                 . Util::backquote($table)",
          "176:                 DatabaseInterface::CONNECT_USER,",
          "177:                 DatabaseInterface::QUERY_STORE",
          "178:             );",
          "183:                 $rows,",
          "187:                 $result",
          "188:             );",
          "190:                 continue;",
          "191:             }",
          "194:         }",
          "196:         return [",
          "198:             $result,",
          "199:             $rows,",
          "201:         ];",
          "202:     }",
          "215:     private function showEmptyResultMessageOrSetUniqueCondition(",
          "216:         array $rows,",
          "220:         array $result",
          "221:     ) {",
          "227:             Response::getInstance()->addHTML(",
          "228:                 Generator::getMessage(",
          "229:                     __('MySQL returned an empty result set (i.e. zero rows).'),",
          "231:                 )",
          "232:             );",
          "",
          "[Removed Lines]",
          "107:         ?array $where_clauses,",
          "108:         array $where_clause_array,",
          "109:         $err_url",
          "111:         $_form_params = [",
          "115:             'err_url'   => $err_url,",
          "118:         if (isset($where_clauses)) {",
          "119:             foreach ($where_clause_array as $key_id => $where_clause) {",
          "120:                 $_form_params['where_clause[' . $key_id . ']'] = trim($where_clause);",
          "125:             $_form_params['clause_is_unique'] = $_POST['clause_is_unique'];",
          "128:         return $_form_params;",
          "138:     private function getWhereClauseArray($where_clause)",
          "140:         if (! isset($where_clause)) {",
          "144:         if (is_array($where_clause)) {",
          "145:             return $where_clause;",
          "148:         return [0 => $where_clause];",
          "161:         array $where_clause_array,",
          "167:         $where_clauses      = [];",
          "168:         $found_unique_key   = false;",
          "169:         foreach ($where_clause_array as $key_id => $where_clause) {",
          "170:             $local_query     = 'SELECT * FROM '",
          "173:                 . ' WHERE ' . $where_clause . ';';",
          "174:             $result[$key_id] = $this->dbi->query(",
          "175:                 $local_query,",
          "179:             $rows[$key_id] = $this->dbi->fetchAssoc($result[$key_id]);",
          "181:             $where_clauses[$key_id] = str_replace('\\\\', '\\\\\\\\', $where_clause);",
          "182:             $has_unique_condition = $this->showEmptyResultMessageOrSetUniqueCondition(",
          "184:                 $key_id,",
          "185:                 $where_clause_array,",
          "186:                 $local_query,",
          "189:             if (! $has_unique_condition) {",
          "193:             $found_unique_key = true;",
          "197:             $where_clauses,",
          "200:             $found_unique_key,",
          "217:         $key_id,",
          "218:         array $where_clause_array,",
          "219:         $local_query,",
          "222:         $has_unique_condition = false;",
          "225:         if (! $rows[$key_id]) {",
          "226:             unset($rows[$key_id], $where_clause_array[$key_id]);",
          "230:                     $local_query",
          "",
          "[Added Lines]",
          "107:         ?array $whereClauses,",
          "108:         array $whereClauseArray,",
          "109:         $errorUrl",
          "111:         $formParams = [",
          "115:             'err_url'   => $errorUrl,",
          "118:         if (isset($whereClauses)) {",
          "119:             foreach ($whereClauseArray as $keyId => $whereClause) {",
          "120:                 $formParams['where_clause[' . $keyId . ']'] = trim($whereClause);",
          "125:             $formParams['clause_is_unique'] = $_POST['clause_is_unique'];",
          "128:         return $formParams;",
          "138:     private function getWhereClauseArray($whereClause)",
          "140:         if (! isset($whereClause)) {",
          "144:         if (is_array($whereClause)) {",
          "145:             return $whereClause;",
          "148:         return [0 => $whereClause];",
          "161:         array $whereClauseArray,",
          "167:         $whereClauses      = [];",
          "168:         $foundUniqueKey   = false;",
          "169:         foreach ($whereClauseArray as $keyId => $whereClause) {",
          "170:             $localQuery     = 'SELECT * FROM '",
          "173:                 . ' WHERE ' . $whereClause . ';';",
          "174:             $result[$keyId] = $this->dbi->query(",
          "175:                 $localQuery,",
          "179:             $rows[$keyId] = $this->dbi->fetchAssoc($result[$keyId]);",
          "181:             $whereClauses[$keyId] = str_replace('\\\\', '\\\\\\\\', $whereClause);",
          "182:             $hasUniqueCondition = $this->showEmptyResultMessageOrSetUniqueCondition(",
          "184:                 $keyId,",
          "185:                 $whereClauseArray,",
          "186:                 $localQuery,",
          "189:             if (! $hasUniqueCondition) {",
          "193:             $foundUniqueKey = true;",
          "197:             $whereClauses,",
          "200:             $foundUniqueKey,",
          "217:         $keyId,",
          "218:         array $whereClauseArray,",
          "219:         $localQuery,",
          "222:         $hasUniqueCondition = false;",
          "225:         if (! $rows[$keyId]) {",
          "226:             unset($rows[$keyId], $whereClauseArray[$keyId]);",
          "230:                     $localQuery",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:         } else {// end if (no row returned)",
          "242:                 count($meta),",
          "243:                 $meta,",
          "245:                 true",
          "246:             );",
          "250:             }",
          "253:         }",
          "256:     }",
          "",
          "[Removed Lines]",
          "238:             $meta = $this->dbi->getFieldsMeta($result[$key_id]) ?? [];",
          "240:             [$unique_condition, $tmp_clause_is_unique] = Util::getUniqueCondition(",
          "241:                 $result[$key_id],",
          "244:                 $rows[$key_id],",
          "248:             if (! empty($unique_condition)) {",
          "249:                 $has_unique_condition = true;",
          "252:             unset($unique_condition, $tmp_clause_is_unique);",
          "255:         return $has_unique_condition;",
          "",
          "[Added Lines]",
          "238:             $meta = $this->dbi->getFieldsMeta($result[$keyId]) ?? [];",
          "240:             [$uniqueCondition, $tmpClauseIsUnique] = Util::getUniqueCondition(",
          "241:                 $result[$keyId],",
          "244:                 $rows[$keyId],",
          "248:             if (! empty($uniqueCondition)) {",
          "249:                 $hasUniqueCondition = true;",
          "252:             unset($uniqueCondition, $tmpClauseIsUnique);",
          "255:         return $hasUniqueCondition;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "290:     public function urlParamsInEditMode(",
          "293:     ): array {",
          "296:         }",
          "298:         if (! empty($_POST['sql_query'])) {",
          "300:         }",
          "303:     }",
          "315:     {",
          "316:         $params = [];",
          "318:         switch ($which) {",
          "319:             case 'function':",
          "321:                 $params['ShowFieldTypesInDataEditView']",
          "322:                 = $GLOBALS['cfg']['ShowFieldTypesInDataEditView'];",
          "323:                 break;",
          "324:             case 'type':",
          "326:                 $params['ShowFunctionFields']",
          "327:                 = $GLOBALS['cfg']['ShowFunctionFields'];",
          "328:                 break;",
          "329:         }",
          "331:         $params['goto'] = Url::getFromRoute('/sql');",
          "335:             return ' : <a href=\"' . Url::getFromRoute('/table/change') . '\" data-post=\"'",
          "337:                 . $this->showTypeOrFunctionLabel($which)",
          "338:                 . '</a>';",
          "339:         }",
          "341:         return '<th><a href=\"' . Url::getFromRoute('/table/change') . '\" data-post=\"'",
          "343:             . '\" title=\"' . __('Hide') . '\">'",
          "344:             . $this->showTypeOrFunctionLabel($which)",
          "345:             . '</a></th>';",
          "",
          "[Removed Lines]",
          "291:         array $url_params,",
          "292:         array $where_clause_array",
          "294:         foreach ($where_clause_array as $where_clause) {",
          "295:             $url_params['where_clause'] = trim($where_clause);",
          "299:             $url_params['sql_query'] = $_POST['sql_query'];",
          "302:         return $url_params;",
          "314:     public function showTypeOrFunction($which, array $url_params, $is_show)",
          "320:                 $params['ShowFunctionFields'] = ($is_show ? 0 : 1);",
          "325:                 $params['ShowFieldTypesInDataEditView'] = ($is_show ? 0 : 1);",
          "332:         $this_url_params = array_merge($url_params, $params);",
          "334:         if (! $is_show) {",
          "336:                 . Url::getCommon($this_url_params, '') . '\">'",
          "342:             . Url::getCommon($this_url_params, '')",
          "",
          "[Added Lines]",
          "291:         array $urlParams,",
          "292:         array $whereClauseArray",
          "294:         foreach ($whereClauseArray as $whereClause) {",
          "295:             $urlParams['where_clause'] = trim($whereClause);",
          "299:             $urlParams['sql_query'] = $_POST['sql_query'];",
          "302:         return $urlParams;",
          "314:     public function showTypeOrFunction($which, array $urlParams, $isShow)",
          "320:                 $params['ShowFunctionFields'] = ($isShow ? 0 : 1);",
          "325:                 $params['ShowFieldTypesInDataEditView'] = ($isShow ? 0 : 1);",
          "332:         $thisUrlParams = array_merge($urlParams, $params);",
          "334:         if (! $isShow) {",
          "336:                 . Url::getCommon($thisUrlParams, '') . '\">'",
          "342:             . Url::getCommon($thisUrlParams, '')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "377:     private function analyzeTableColumnsArray(",
          "378:         array $column,",
          "381:     ) {",
          "382:         $column['Field_html']    = htmlspecialchars($column['Field']);",
          "383:         $column['Field_md5']     = md5($column['Field']);",
          "385:         $column['True_Type']     = preg_replace('@\\(.*@s', '', $column['Type']);",
          "386:         $column['len'] = preg_match('@float|double@', $column['Type']) ? 100 : -1;",
          "388:         $column['is_binary']     = $this->isColumn(",
          "389:             $column,",
          "390:             [",
          "",
          "[Removed Lines]",
          "379:         array $comments_map,",
          "380:         $timestamp_seen",
          "387:         $column['Field_title']   = $this->getColumnTitle($column, $comments_map);",
          "",
          "[Added Lines]",
          "379:         array $commentsMap,",
          "380:         $timestampSeen",
          "387:         $column['Field_title']   = $this->getColumnTitle($column, $commentsMap);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "410:         );",
          "412:         [$column['pma_type'], $column['wrap'], $column['first_timestamp']]",
          "415:         return $column;",
          "416:     }",
          "",
          "[Removed Lines]",
          "413:             = $this->getEnumSetAndTimestampColumns($column, $timestamp_seen);",
          "",
          "[Added Lines]",
          "413:             = $this->getEnumSetAndTimestampColumns($column, $timestampSeen);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "427:     {",
          "429:             return '<span style=\"border-bottom: 1px dashed black;\" title=\"'",
          "431:                 . $column['Field_html'] . '</span>';",
          "432:         }",
          "",
          "[Removed Lines]",
          "426:     private function getColumnTitle(array $column, array $comments_map)",
          "428:         if (isset($comments_map[$column['Field']])) {",
          "430:                 . htmlspecialchars($comments_map[$column['Field']]) . '\">'",
          "",
          "[Added Lines]",
          "426:     private function getColumnTitle(array $column, array $commentsMap)",
          "428:         if (isset($commentsMap[$column['Field']])) {",
          "430:                 . htmlspecialchars($commentsMap[$column['Field']]) . '\">'",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "447:     public function isColumn(array $column, array $types)",
          "448:     {",
          "451:                 return true;",
          "452:             }",
          "453:         }",
          "",
          "[Removed Lines]",
          "449:         foreach ($types as $one_type) {",
          "450:             if (mb_stripos($column['Type'], $one_type) === 0) {",
          "",
          "[Added Lines]",
          "449:         foreach ($types as $oneType) {",
          "450:             if (mb_stripos($column['Type'], $oneType) === 0) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "467:     {",
          "468:         $column['first_timestamp'] = false;",
          "469:         switch ($column['True_Type']) {",
          "",
          "[Removed Lines]",
          "466:     private function getEnumSetAndTimestampColumns(array $column, $timestamp_seen)",
          "",
          "[Added Lines]",
          "466:     private function getEnumSetAndTimestampColumns(array $column, $timestampSeen)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "476:                 $column['wrap']  = '';",
          "477:                 break;",
          "478:             case 'timestamp':",
          "480:                     $column['first_timestamp'] = true;",
          "481:                 }",
          "",
          "[Removed Lines]",
          "479:                 if (! $timestamp_seen) {   // can only occur once per table",
          "",
          "[Added Lines]",
          "479:                 if (! $timestampSeen) {   // can only occur once per table",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "521:     private function getFunctionColumn(",
          "522:         array $column,",
          "525:         $onChangeClause,",
          "528:         $tabindex,",
          "529:         $idindex,",
          "531:         $readOnly,",
          "532:         array $foreignData",
          "533:     ): string {",
          "535:         if (",
          "536:             ($GLOBALS['cfg']['ProtectBinary'] === 'blob'",
          "538:             || ($GLOBALS['cfg']['ProtectBinary'] === 'all'",
          "539:             && $column['is_binary'])",
          "540:             || ($GLOBALS['cfg']['ProtectBinary'] === 'noblob'",
          "541:             && $column['is_binary'])",
          "542:         ) {",
          "544:         } elseif (",
          "545:             $readOnly",
          "546:             || mb_strstr($column['True_Type'], 'enum')",
          "547:             || mb_strstr($column['True_Type'], 'set')",
          "549:         ) {",
          "551:         } else {",
          "555:                 . ' ' . $onChangeClause",
          "557:                 . ' id=\"field_' . $idindex . '_1\">';",
          "559:                 $column,",
          "561:                 $foreignData",
          "562:             ) . \"\\n\";",
          "566:         }",
          "569:     }",
          "587:     private function getNullColumn(",
          "588:         array $column,",
          "591:         $tabindex,",
          "593:         $idindex,",
          "594:         $vkey,",
          "595:         array $foreigners,",
          "",
          "[Removed Lines]",
          "523:         $is_upload,",
          "524:         $column_name_appendix,",
          "526:         array $no_support_types,",
          "527:         $tabindex_for_function,",
          "530:         $insert_mode,",
          "534:         $html_output = '';",
          "537:             && $column['is_blob'] && ! $is_upload)",
          "543:             $html_output .= '<td class=\"text-center\">' . __('Binary') . '</td>' . \"\\n\";",
          "548:             || in_array($column['pma_type'], $no_support_types)",
          "550:             $html_output .= '<td class=\"text-center\">--</td>' . \"\\n\";",
          "552:             $html_output .= '<td>' . \"\\n\";",
          "554:             $html_output .= '<select name=\"funcs' . $column_name_appendix . '\"'",
          "556:                 . ' tabindex=\"' . ($tabindex + $tabindex_for_function) . '\"'",
          "558:             $html_output .= Generator::getFunctionsForField(",
          "560:                 $insert_mode,",
          "564:             $html_output .= '</select>' . \"\\n\";",
          "565:             $html_output .= '</td>' . \"\\n\";",
          "568:         return $html_output;",
          "589:         $column_name_appendix,",
          "590:         $real_null_value,",
          "592:         $tabindex_for_null,",
          "",
          "[Added Lines]",
          "523:         $isUpload,",
          "524:         $columnNameAppendix,",
          "526:         array $noSupportTypes,",
          "527:         $tabindexForFunction,",
          "530:         $insertMode,",
          "534:         $htmlOutput = '';",
          "537:             && $column['is_blob'] && ! $isUpload)",
          "543:             $htmlOutput .= '<td class=\"text-center\">' . __('Binary') . '</td>' . \"\\n\";",
          "548:             || in_array($column['pma_type'], $noSupportTypes)",
          "550:             $htmlOutput .= '<td class=\"text-center\">--</td>' . \"\\n\";",
          "552:             $htmlOutput .= '<td>' . \"\\n\";",
          "554:             $htmlOutput .= '<select name=\"funcs' . $columnNameAppendix . '\"'",
          "556:                 . ' tabindex=\"' . ($tabindex + $tabindexForFunction) . '\"'",
          "558:             $htmlOutput .= Generator::getFunctionsForField(",
          "560:                 $insertMode,",
          "564:             $htmlOutput .= '</select>' . \"\\n\";",
          "565:             $htmlOutput .= '</td>' . \"\\n\";",
          "568:         return $htmlOutput;",
          "589:         $columnNameAppendix,",
          "590:         $realNullValue,",
          "592:         $tabindexForNull,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "600:             return \"<td></td>\\n\";",
          "601:         }",
          "609:         }",
          "618:         }",
          "624:             $column,",
          "625:             $foreigners,",
          "626:             $foreignData",
          "627:         );",
          "638:     }",
          "",
          "[Removed Lines]",
          "603:         $html_output = '';",
          "604:         $html_output .= '<td>' . \"\\n\";",
          "605:         $html_output .= '<input type=\"hidden\" name=\"fields_null_prev'",
          "606:             . $column_name_appendix . '\"';",
          "607:         if ($real_null_value && ! $column['first_timestamp']) {",
          "608:             $html_output .= ' value=\"on\"';",
          "611:         $html_output .= '>' . \"\\n\";",
          "613:         $html_output .= '<input type=\"checkbox\" class=\"checkbox_null\" tabindex=\"'",
          "614:             . ($tabindex + $tabindex_for_null) . '\"'",
          "615:             . ' name=\"fields_null' . $column_name_appendix . '\"';",
          "616:         if ($real_null_value) {",
          "617:             $html_output .= ' checked=\"checked\"';",
          "620:         $html_output .= ' id=\"field_' . $idindex . '_2\">';",
          "623:         $nullify_code = $this->getNullifyCodeForNullColumn(",
          "629:         $html_output .= '<input type=\"hidden\" class=\"nullify_code\" name=\"nullify_code'",
          "630:             . $column_name_appendix . '\" value=\"' . $nullify_code . '\">';",
          "631:         $html_output .= '<input type=\"hidden\" class=\"hashed_field\" name=\"hashed_field'",
          "632:             . $column_name_appendix . '\" value=\"' . $column['Field_md5'] . '\">';",
          "633:         $html_output .= '<input type=\"hidden\" class=\"multi_edit\" name=\"multi_edit'",
          "634:             . $column_name_appendix . '\" value=\"' . Sanitize::escapeJsString($vkey) . '\">';",
          "635:         $html_output .= '</td>' . \"\\n\";",
          "637:         return $html_output;",
          "",
          "[Added Lines]",
          "603:         $htmlOutput = '';",
          "604:         $htmlOutput .= '<td>' . \"\\n\";",
          "605:         $htmlOutput .= '<input type=\"hidden\" name=\"fields_null_prev'",
          "606:             . $columnNameAppendix . '\"';",
          "607:         if ($realNullValue && ! $column['first_timestamp']) {",
          "608:             $htmlOutput .= ' value=\"on\"';",
          "611:         $htmlOutput .= '>' . \"\\n\";",
          "613:         $htmlOutput .= '<input type=\"checkbox\" class=\"checkbox_null\" tabindex=\"'",
          "614:             . ($tabindex + $tabindexForNull) . '\"'",
          "615:             . ' name=\"fields_null' . $columnNameAppendix . '\"';",
          "616:         if ($realNullValue) {",
          "617:             $htmlOutput .= ' checked=\"checked\"';",
          "620:         $htmlOutput .= ' id=\"field_' . $idindex . '_2\">';",
          "623:         $nullifyCode = $this->getNullifyCodeForNullColumn(",
          "629:         $htmlOutput .= '<input type=\"hidden\" class=\"nullify_code\" name=\"nullify_code'",
          "630:             . $columnNameAppendix . '\" value=\"' . $nullifyCode . '\">';",
          "631:         $htmlOutput .= '<input type=\"hidden\" class=\"hashed_field\" name=\"hashed_field'",
          "632:             . $columnNameAppendix . '\" value=\"' . $column['Field_md5'] . '\">';",
          "633:         $htmlOutput .= '<input type=\"hidden\" class=\"multi_edit\" name=\"multi_edit'",
          "634:             . $columnNameAppendix . '\" value=\"' . Sanitize::escapeJsString($vkey) . '\">';",
          "635:         $htmlOutput .= '</td>' . \"\\n\";",
          "637:         return $htmlOutput;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "652:         $foreigner = $this->relation->searchColumnInForeigners($foreigners, $column['Field']);",
          "653:         if (mb_strstr($column['True_Type'], 'enum')) {",
          "654:             if (mb_strlen((string) $column['Type']) > 20) {",
          "656:             } else {",
          "658:             }",
          "659:         } elseif (mb_strstr($column['True_Type'], 'set')) {",
          "661:         } elseif (",
          "662:             ! empty($foreigners)",
          "663:             && ! empty($foreigner)",
          "664:             && $foreignData['foreign_link'] == false",
          "665:         ) {",
          "668:         } elseif (",
          "669:             ! empty($foreigners)",
          "670:             && ! empty($foreigner)",
          "671:             && $foreignData['foreign_link'] == true",
          "672:         ) {",
          "675:         } else {",
          "677:         }",
          "680:     }",
          "716:     private function getValueColumn(",
          "717:         array $column,",
          "720:         $onChangeClause,",
          "721:         $tabindex,",
          "723:         $idindex,",
          "724:         $data,",
          "726:         array $foreignData,",
          "727:         array $paramTableDbArray,",
          "728:         $rownumber,",
          "731:         $vkey,",
          "738:         $readOnly",
          "739:     ) {",
          "744:         if ($foreignData['foreign_link'] == true) {",
          "746:                 $column,",
          "749:                 $onChangeClause,",
          "750:                 $tabindex,",
          "752:                 $idindex,",
          "753:                 $data,",
          "754:                 $paramTableDbArray,",
          "",
          "[Removed Lines]",
          "655:                 $nullify_code = '1';",
          "657:                 $nullify_code = '2';",
          "660:             $nullify_code = '3';",
          "667:             $nullify_code = '4';",
          "674:             $nullify_code = '6';",
          "676:             $nullify_code = '5';",
          "679:         return $nullify_code;",
          "718:         $backup_field,",
          "719:         $column_name_appendix,",
          "722:         $tabindex_for_value,",
          "725:         $special_chars,",
          "729:         $text_dir,",
          "730:         $special_chars_encoded,",
          "732:         $is_upload,",
          "733:         $biggest_max_file_size,",
          "734:         $default_char_editing,",
          "735:         array $no_support_types,",
          "736:         array $gis_data_types,",
          "737:         array $extracted_columnspec,",
          "741:         $data_type = $this->dbi->types->getTypeClass($column['True_Type']);",
          "742:         $html_output = '';",
          "745:             $html_output .= $this->getForeignLink(",
          "747:                 $backup_field,",
          "748:                 $column_name_appendix,",
          "751:                 $tabindex_for_value,",
          "",
          "[Added Lines]",
          "655:                 $nullifyCode = '1';",
          "657:                 $nullifyCode = '2';",
          "660:             $nullifyCode = '3';",
          "667:             $nullifyCode = '4';",
          "674:             $nullifyCode = '6';",
          "676:             $nullifyCode = '5';",
          "679:         return $nullifyCode;",
          "718:         $backupField,",
          "719:         $columnNameAppendix,",
          "722:         $tabindexForValue,",
          "725:         $specialChars,",
          "729:         $textDir,",
          "730:         $specialCharsEncoded,",
          "732:         $isUpload,",
          "733:         $biggestMaxFileSize,",
          "734:         $defaultCharEditing,",
          "735:         array $noSupportTypes,",
          "736:         array $gisDataTypes,",
          "737:         array $extractedColumnspec,",
          "741:         $dataType = $this->dbi->types->getTypeClass($column['True_Type']);",
          "742:         $htmlOutput = '';",
          "745:             $htmlOutput .= $this->getForeignLink(",
          "747:                 $backupField,",
          "748:                 $columnNameAppendix,",
          "751:                 $tabindexForValue,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "756:                 $readOnly",
          "757:             );",
          "758:         } elseif (is_array($foreignData['disp_row'])) {",
          "760:                 $column,",
          "763:                 $onChangeClause,",
          "764:                 $tabindex,",
          "766:                 $idindex,",
          "767:                 $data,",
          "768:                 $foreignData,",
          "",
          "[Removed Lines]",
          "759:             $html_output .= $this->dispRowForeignData(",
          "761:                 $backup_field,",
          "762:                 $column_name_appendix,",
          "765:                 $tabindex_for_value,",
          "",
          "[Added Lines]",
          "759:             $htmlOutput .= $this->dispRowForeignData(",
          "761:                 $backupField,",
          "762:                 $columnNameAppendix,",
          "765:                 $tabindexForValue,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "774:                 && mb_strstr($column['pma_type'], 'longtext'))",
          "775:             || mb_strstr($column['pma_type'], 'json')",
          "776:         ) {",
          "778:                 $column,",
          "781:                 $onChangeClause,",
          "782:                 $tabindex,",
          "784:                 $idindex,",
          "788:                 $readOnly",
          "789:             );",
          "790:         } elseif (mb_strstr($column['pma_type'], 'text')) {",
          "792:                 $column,",
          "795:                 $onChangeClause,",
          "796:                 $tabindex,",
          "798:                 $idindex,",
          "802:                 $readOnly",
          "803:             );",
          "808:                     'Because of its length,<br> this column might not be editable.'",
          "809:                 );",
          "810:             }",
          "811:         } elseif ($column['pma_type'] === 'enum') {",
          "813:                 $column,",
          "817:                 $onChangeClause,",
          "818:                 $tabindex,",
          "820:                 $idindex,",
          "821:                 $data,",
          "822:                 $readOnly",
          "823:             );",
          "824:         } elseif ($column['pma_type'] === 'set') {",
          "826:                 $column,",
          "830:                 $onChangeClause,",
          "831:                 $tabindex,",
          "833:                 $idindex,",
          "834:                 $data,",
          "835:                 $readOnly",
          "836:             );",
          "837:         } elseif ($column['is_binary'] || $column['is_blob']) {",
          "839:                 $column,",
          "840:                 $data,",
          "845:                 $onChangeClause,",
          "846:                 $tabindex,",
          "848:                 $idindex,",
          "851:                 $vkey,",
          "853:                 $readOnly",
          "854:             );",
          "857:                 $column,",
          "861:                 $onChangeClause,",
          "862:                 $tabindex,",
          "865:                 $idindex,",
          "868:                 $data,",
          "870:                 $readOnly",
          "871:             );",
          "872:         }",
          "876:         }",
          "879:     }",
          "898:     private function getForeignLink(",
          "899:         array $column,",
          "902:         $onChangeClause,",
          "903:         $tabindex,",
          "905:         $idindex,",
          "906:         $data,",
          "907:         array $paramTableDbArray,",
          "",
          "[Removed Lines]",
          "777:             $html_output .= $this->getTextarea(",
          "779:                 $backup_field,",
          "780:                 $column_name_appendix,",
          "783:                 $tabindex_for_value,",
          "785:                 $text_dir,",
          "786:                 $special_chars_encoded,",
          "787:                 $data_type,",
          "791:             $html_output .= $this->getTextarea(",
          "793:                 $backup_field,",
          "794:                 $column_name_appendix,",
          "797:                 $tabindex_for_value,",
          "799:                 $text_dir,",
          "800:                 $special_chars_encoded,",
          "801:                 $data_type,",
          "804:             $html_output .= \"\\n\";",
          "805:             if (mb_strlen($special_chars) > 32000) {",
          "806:                 $html_output .= \"</td>\\n\";",
          "807:                 $html_output .= '<td>' . __(",
          "812:             $html_output .= $this->getPmaTypeEnum(",
          "814:                 $backup_field,",
          "815:                 $column_name_appendix,",
          "816:                 $extracted_columnspec,",
          "819:                 $tabindex_for_value,",
          "825:             $html_output .= $this->getPmaTypeSet(",
          "827:                 $extracted_columnspec,",
          "828:                 $backup_field,",
          "829:                 $column_name_appendix,",
          "832:                 $tabindex_for_value,",
          "838:             $html_output .= $this->getBinaryAndBlobColumn(",
          "841:                 $special_chars,",
          "842:                 $biggest_max_file_size,",
          "843:                 $backup_field,",
          "844:                 $column_name_appendix,",
          "847:                 $tabindex_for_value,",
          "849:                 $text_dir,",
          "850:                 $special_chars_encoded,",
          "852:                 $is_upload,",
          "855:         } elseif (! in_array($column['pma_type'], $no_support_types)) {",
          "856:             $html_output .= $this->getValueColumnForOtherDatatypes(",
          "858:                 $default_char_editing,",
          "859:                 $backup_field,",
          "860:                 $column_name_appendix,",
          "863:                 $special_chars,",
          "864:                 $tabindex_for_value,",
          "866:                 $text_dir,",
          "867:                 $special_chars_encoded,",
          "869:                 $extracted_columnspec,",
          "874:         if (in_array($column['pma_type'], $gis_data_types)) {",
          "875:             $html_output .= $this->getHtmlForGisDataTypes();",
          "878:         return $html_output;",
          "900:         $backup_field,",
          "901:         $column_name_appendix,",
          "904:         $tabindex_for_value,",
          "",
          "[Added Lines]",
          "777:             $htmlOutput .= $this->getTextarea(",
          "779:                 $backupField,",
          "780:                 $columnNameAppendix,",
          "783:                 $tabindexForValue,",
          "785:                 $textDir,",
          "786:                 $specialCharsEncoded,",
          "787:                 $dataType,",
          "791:             $htmlOutput .= $this->getTextarea(",
          "793:                 $backupField,",
          "794:                 $columnNameAppendix,",
          "797:                 $tabindexForValue,",
          "799:                 $textDir,",
          "800:                 $specialCharsEncoded,",
          "801:                 $dataType,",
          "804:             $htmlOutput .= \"\\n\";",
          "805:             if (mb_strlen($specialChars) > 32000) {",
          "806:                 $htmlOutput .= \"</td>\\n\";",
          "807:                 $htmlOutput .= '<td>' . __(",
          "812:             $htmlOutput .= $this->getPmaTypeEnum(",
          "814:                 $backupField,",
          "815:                 $columnNameAppendix,",
          "816:                 $extractedColumnspec,",
          "819:                 $tabindexForValue,",
          "825:             $htmlOutput .= $this->getPmaTypeSet(",
          "827:                 $extractedColumnspec,",
          "828:                 $backupField,",
          "829:                 $columnNameAppendix,",
          "832:                 $tabindexForValue,",
          "838:             $htmlOutput .= $this->getBinaryAndBlobColumn(",
          "841:                 $specialChars,",
          "842:                 $biggestMaxFileSize,",
          "843:                 $backupField,",
          "844:                 $columnNameAppendix,",
          "847:                 $tabindexForValue,",
          "849:                 $textDir,",
          "850:                 $specialCharsEncoded,",
          "852:                 $isUpload,",
          "855:         } elseif (! in_array($column['pma_type'], $noSupportTypes)) {",
          "856:             $htmlOutput .= $this->getValueColumnForOtherDatatypes(",
          "858:                 $defaultCharEditing,",
          "859:                 $backupField,",
          "860:                 $columnNameAppendix,",
          "863:                 $specialChars,",
          "864:                 $tabindexForValue,",
          "866:                 $textDir,",
          "867:                 $specialCharsEncoded,",
          "869:                 $extractedColumnspec,",
          "874:         if (in_array($column['pma_type'], $gisDataTypes)) {",
          "875:             $htmlOutput .= $this->getHtmlForGisDataTypes();",
          "878:         return $htmlOutput;",
          "900:         $backupField,",
          "901:         $columnNameAppendix,",
          "904:         $tabindexForValue,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "909:         $readOnly",
          "910:     ) {",
          "911:         [$table, $db] = $paramTableDbArray;",
          "919:             . 'class=\"textfield\" '",
          "920:             . $onChangeClause . ' '",
          "921:             . ($readOnly ? 'readonly=\"readonly\" ' : '')",
          "923:             . 'id=\"field_' . $idindex . '_3\" '",
          "924:             . 'value=\"' . htmlspecialchars($data) . '\">';",
          "927:             . Url::getFromRoute('/browse-foreigners')",
          "928:             . '\" data-post=\"'",
          "929:             . Url::getCommon(",
          "",
          "[Removed Lines]",
          "912:         $html_output = '';",
          "913:         $html_output .= $backup_field . \"\\n\";",
          "915:         $html_output .= '<input type=\"hidden\" name=\"fields_type'",
          "916:             . $column_name_appendix . '\" value=\"foreign\">';",
          "918:         $html_output .= '<input type=\"text\" name=\"fields' . $column_name_appendix . '\" '",
          "922:             . 'tabindex=\"' . ($tabindex + $tabindex_for_value) . '\" '",
          "926:         $html_output .= '<a class=\"ajax browse_foreign\" href=\"'",
          "",
          "[Added Lines]",
          "912:         $htmlOutput = '';",
          "913:         $htmlOutput .= $backupField . \"\\n\";",
          "915:         $htmlOutput .= '<input type=\"hidden\" name=\"fields_type'",
          "916:             . $columnNameAppendix . '\" value=\"foreign\">';",
          "918:         $htmlOutput .= '<input type=\"text\" name=\"fields' . $columnNameAppendix . '\" '",
          "922:             . 'tabindex=\"' . ($tabindex + $tabindexForValue) . '\" '",
          "926:         $htmlOutput .= '<a class=\"ajax browse_foreign\" href=\"'",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "938:             ) . '\">'",
          "939:             . Generator::getIcon('b_browse', __('Browse foreign values')) . '</a>';",
          "942:     }",
          "960:     private function dispRowForeignData(",
          "961:         $column,",
          "964:         $onChangeClause,",
          "965:         $tabindex,",
          "967:         $idindex,",
          "968:         $data,",
          "969:         array $foreignData,",
          "970:         $readOnly",
          "971:     ) {",
          "976:         if ($column['is_binary']) {",
          "978:         } else {",
          "980:         }",
          "983:             . ' ' . $onChangeClause",
          "984:             . ' class=\"textfield\"'",
          "985:             . ($readOnly ? ' disabled' : '')",
          "987:             . ' id=\"field_' . $idindex . '_3\">';",
          "989:             $foreignData['disp_row'],",
          "990:             $foreignData['foreign_field'],",
          "991:             $foreignData['foreign_display'],",
          "992:             $data,",
          "993:             $GLOBALS['cfg']['ForeignKeyMaxLimit']",
          "994:         );",
          "998:         if ($readOnly) {",
          "1000:                 . ' type=\"hidden\" value=\"' . htmlspecialchars($data) . '\">';",
          "1001:         }",
          "1004:     }",
          "1024:     private function getTextarea(",
          "1025:         array $column,",
          "1028:         $onChangeClause,",
          "1029:         $tabindex,",
          "1031:         $idindex,",
          "1035:         $readOnly",
          "1036:     ) {",
          "1038:         $textAreaRows = $GLOBALS['cfg']['TextareaRows'];",
          "1039:         $textareaCols = $GLOBALS['cfg']['TextareaCols'];",
          "",
          "[Removed Lines]",
          "941:         return $html_output;",
          "962:         $backup_field,",
          "963:         $column_name_appendix,",
          "966:         $tabindex_for_value,",
          "972:         $html_output = '';",
          "973:         $html_output .= $backup_field . \"\\n\";",
          "974:         $html_output .= '<input type=\"hidden\"'",
          "975:             . ' name=\"fields_type' . $column_name_appendix . '\"';",
          "977:             $html_output .= ' value=\"hex\">';",
          "979:             $html_output .= ' value=\"foreign\">';",
          "982:         $html_output .= '<select name=\"fields' . $column_name_appendix . '\"'",
          "986:             . ' tabindex=\"' . ($tabindex + $tabindex_for_value) . '\"'",
          "988:         $html_output .= $this->relation->foreignDropdown(",
          "995:         $html_output .= '</select>';",
          "999:             $html_output .= '<input name=\"fields' . $column_name_appendix . '\"'",
          "1003:         return $html_output;",
          "1026:         $backup_field,",
          "1027:         $column_name_appendix,",
          "1030:         $tabindex_for_value,",
          "1032:         $text_dir,",
          "1033:         $special_chars_encoded,",
          "1034:         $data_type,",
          "1037:         $the_class = '';",
          "",
          "[Added Lines]",
          "941:         return $htmlOutput;",
          "962:         $backupField,",
          "963:         $columnNameAppendix,",
          "966:         $tabindexForValue,",
          "972:         $htmlOutput = '';",
          "973:         $htmlOutput .= $backupField . \"\\n\";",
          "974:         $htmlOutput .= '<input type=\"hidden\"'",
          "975:             . ' name=\"fields_type' . $columnNameAppendix . '\"';",
          "977:             $htmlOutput .= ' value=\"hex\">';",
          "979:             $htmlOutput .= ' value=\"foreign\">';",
          "982:         $htmlOutput .= '<select name=\"fields' . $columnNameAppendix . '\"'",
          "986:             . ' tabindex=\"' . ($tabindex + $tabindexForValue) . '\"'",
          "988:         $htmlOutput .= $this->relation->foreignDropdown(",
          "995:         $htmlOutput .= '</select>';",
          "999:             $htmlOutput .= '<input name=\"fields' . $columnNameAppendix . '\"'",
          "1003:         return $htmlOutput;",
          "1026:         $backupField,",
          "1027:         $columnNameAppendix,",
          "1030:         $tabindexForValue,",
          "1032:         $textDir,",
          "1033:         $specialCharsEncoded,",
          "1034:         $dataType,",
          "1037:         $theClass = '';",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1047:             $textAreaRows = max($GLOBALS['cfg']['CharTextareaRows'], 7);",
          "1048:             $textareaCols = $GLOBALS['cfg']['CharTextareaCols'];",
          "1050:                 $column['Type']",
          "1051:             );",
          "1053:         } elseif (",
          "1054:             $GLOBALS['cfg']['LongtextDoubleTextarea']",
          "1055:             && mb_strstr($column['pma_type'], 'longtext')",
          "",
          "[Removed Lines]",
          "1046:             $the_class = 'char charField';",
          "1049:             $extracted_columnspec = Util::extractColumnSpec(",
          "1052:             $maxlength = $extracted_columnspec['spec_in_brackets'];",
          "",
          "[Added Lines]",
          "1046:             $theClass = 'char charField';",
          "1049:             $extractedColumnspec = Util::extractColumnSpec(",
          "1052:             $maxlength = $extractedColumnspec['spec_in_brackets'];",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1058:             $textareaCols = $GLOBALS['cfg']['TextareaCols'] * 2;",
          "1059:         }",
          "1064:             . ($readOnly ? ' readonly=\"readonly\"' : '')",
          "1065:             . (isset($maxlength) ? ' data-maxlength=\"' . $maxlength . '\"' : '')",
          "1066:             . ' rows=\"' . $textAreaRows . '\"'",
          "1067:             . ' cols=\"' . $textareaCols . '\"'",
          "1069:             . ' id=\"field_' . $idindex . '_3\"'",
          "1070:             . (! empty($onChangeClause) ? ' ' . $onChangeClause : '')",
          "1074:             . '</textarea>';",
          "1075:     }",
          "1095:     private function getPmaTypeEnum(",
          "1096:         array $column,",
          "1100:         $onChangeClause,",
          "1101:         $tabindex,",
          "1103:         $idindex,",
          "1104:         $data,",
          "1105:         $readOnly",
          "1106:     ) {",
          "1108:         if (! isset($column['values'])) {",
          "1109:             $column['values'] = $this->getColumnEnumValues(",
          "1110:                 $column,",
          "1112:             );",
          "1113:         }",
          "1119:         if (mb_strlen($column['Type']) > 20) {",
          "1121:                 $column,",
          "1123:                 $onChangeClause,",
          "1124:                 $tabindex,",
          "1126:                 $idindex,",
          "1127:                 $data,",
          "1129:                 $readOnly",
          "1130:             );",
          "1131:         } else {",
          "1134:                 $onChangeClause,",
          "1135:                 $tabindex,",
          "1136:                 $column,",
          "1138:                 $idindex,",
          "1139:                 $data,",
          "1141:                 $readOnly",
          "1142:             );",
          "1143:         }",
          "1146:     }",
          "1159:     {",
          "1160:         $column['values'] = [];",
          "1162:             $column['values'][] = [",
          "1163:                 'plain' => $val,",
          "1164:                 'html'  => htmlspecialchars($val),",
          "",
          "[Removed Lines]",
          "1061:         return $backup_field . \"\\n\"",
          "1062:             . '<textarea name=\"fields' . $column_name_appendix . '\"'",
          "1063:             . ' class=\"' . $the_class . '\"'",
          "1068:             . ' dir=\"' . $text_dir . '\"'",
          "1071:             . ' tabindex=\"' . ($tabindex + $tabindex_for_value) . '\"'",
          "1072:             . ' data-type=\"' . $data_type . '\">'",
          "1073:             . $special_chars_encoded",
          "1097:         $backup_field,",
          "1098:         $column_name_appendix,",
          "1099:         array $extracted_columnspec,",
          "1102:         $tabindex_for_value,",
          "1107:         $html_output = '';",
          "1111:                 $extracted_columnspec",
          "1115:         $column_enum_values = $column['values'];",
          "1116:         $html_output .= '<input type=\"hidden\" name=\"fields_type'",
          "1117:             . $column_name_appendix . '\" value=\"enum\">';",
          "1118:         $html_output .= \"\\n\" . '            ' . $backup_field . \"\\n\";",
          "1120:             $html_output .= $this->getDropDownDependingOnLength(",
          "1122:                 $column_name_appendix,",
          "1125:                 $tabindex_for_value,",
          "1128:                 $column_enum_values,",
          "1132:             $html_output .= $this->getRadioButtonDependingOnLength(",
          "1133:                 $column_name_appendix,",
          "1137:                 $tabindex_for_value,",
          "1140:                 $column_enum_values,",
          "1145:         return $html_output;",
          "1158:     private function getColumnEnumValues(array $column, array $extracted_columnspec)",
          "1161:         foreach ($extracted_columnspec['enum_set_values'] as $val) {",
          "",
          "[Added Lines]",
          "1061:         return $backupField . \"\\n\"",
          "1062:             . '<textarea name=\"fields' . $columnNameAppendix . '\"'",
          "1063:             . ' class=\"' . $theClass . '\"'",
          "1068:             . ' dir=\"' . $textDir . '\"'",
          "1071:             . ' tabindex=\"' . ($tabindex + $tabindexForValue) . '\"'",
          "1072:             . ' data-type=\"' . $dataType . '\">'",
          "1073:             . $specialCharsEncoded",
          "1097:         $backupField,",
          "1098:         $columnNameAppendix,",
          "1099:         array $extractedColumnspec,",
          "1102:         $tabindexForValue,",
          "1107:         $htmlOutput = '';",
          "1111:                 $extractedColumnspec",
          "1115:         $columnEnumValues = $column['values'];",
          "1116:         $htmlOutput .= '<input type=\"hidden\" name=\"fields_type'",
          "1117:             . $columnNameAppendix . '\" value=\"enum\">';",
          "1118:         $htmlOutput .= \"\\n\" . '            ' . $backupField . \"\\n\";",
          "1120:             $htmlOutput .= $this->getDropDownDependingOnLength(",
          "1122:                 $columnNameAppendix,",
          "1125:                 $tabindexForValue,",
          "1128:                 $columnEnumValues,",
          "1132:             $htmlOutput .= $this->getRadioButtonDependingOnLength(",
          "1133:                 $columnNameAppendix,",
          "1137:                 $tabindexForValue,",
          "1140:                 $columnEnumValues,",
          "1145:         return $htmlOutput;",
          "1158:     private function getColumnEnumValues(array $column, array $extractedColumnspec)",
          "1161:         foreach ($extractedColumnspec['enum_set_values'] as $val) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1186:     private function getDropDownDependingOnLength(",
          "1187:         array $column,",
          "1189:         $onChangeClause,",
          "1190:         $tabindex,",
          "1192:         $idindex,",
          "1193:         $data,",
          "1195:         $readOnly",
          "1196:     ) {",
          "1198:             . ' ' . $onChangeClause",
          "1199:             . ' class=\"textfield\"'",
          "1201:             . ($readOnly ? ' disabled' : '')",
          "1202:             . ' id=\"field_' . $idindex . '_3\">';",
          "1208:             if (",
          "1210:                 || ($data == ''",
          "1211:                 && (! isset($_POST['where_clause']) || $column['Null'] !== 'YES')",
          "1212:                 && isset($column['Default'])",
          "1214:             ) {",
          "1217:             }",
          "1220:         }",
          "1225:         if ($readOnly) {",
          "1228:         }",
          "1231:     }",
          "1248:     private function getRadioButtonDependingOnLength(",
          "1250:         $onChangeClause,",
          "1251:         $tabindex,",
          "1252:         array $column,",
          "1254:         $idindex,",
          "1255:         $data,",
          "1257:         $readOnly",
          "1258:     ) {",
          "1259:         $j = 0;",
          "1264:                 . ' class=\"textfield\"'",
          "1266:                 . ' id=\"field_' . $idindex . '_3_' . $j . '\"'",
          "1267:                 . ' ' . $onChangeClause;",
          "1268:             if (",
          "1270:                 || ($data == ''",
          "1271:                 && (! isset($_POST['where_clause']) || $column['Null'] !== 'YES')",
          "1272:                 && isset($column['Default'])",
          "1274:             ) {",
          "1276:             } elseif ($readOnly) {",
          "1278:             }",
          "1283:             $j++;",
          "1284:         }",
          "1287:     }",
          "1307:     private function getPmaTypeSet(",
          "1308:         array $column,",
          "1312:         $onChangeClause,",
          "1313:         $tabindex,",
          "1315:         $idindex,",
          "1316:         $data,",
          "1317:         $readOnly",
          "1318:     ) {",
          "1320:             $column,",
          "1322:         );",
          "1323:         $vset = array_flip(explode(',', $data));",
          "1328:             . ' class=\"textfield\"'",
          "1329:             . ($readOnly ? ' disabled' : '')",
          "1331:             . ' multiple=\"multiple\"'",
          "1332:             . ' ' . $onChangeClause",
          "1334:             . ' id=\"field_' . $idindex . '_3\">';",
          "1342:             }",
          "1345:         }",
          "1350:         if ($readOnly) {",
          "1353:         }",
          "1356:     }",
          "",
          "[Removed Lines]",
          "1188:         $column_name_appendix,",
          "1191:         $tabindex_for_value,",
          "1194:         array $column_enum_values,",
          "1197:         $html_output = '<select name=\"fields' . $column_name_appendix . '\"'",
          "1200:             . ' tabindex=\"' . ($tabindex + $tabindex_for_value) . '\"'",
          "1203:         $html_output .= '<option value=\"\">&nbsp;</option>' . \"\\n\";",
          "1205:         $selected_html = '';",
          "1206:         foreach ($column_enum_values as $enum_value) {",
          "1207:             $html_output .= '<option value=\"' . $enum_value['html'] . '\"';",
          "1209:                 $data == $enum_value['plain']",
          "1213:                 && $enum_value['plain'] == $column['Default'])",
          "1215:                 $html_output .= ' selected=\"selected\"';",
          "1216:                 $selected_html = $enum_value['html'];",
          "1219:             $html_output .= '>' . $enum_value['html'] . '</option>' . \"\\n\";",
          "1222:         $html_output .= '</select>';",
          "1226:             $html_output .= '<input name=\"fields' . $column_name_appendix . '\"'",
          "1227:                 . ' type=\"hidden\" value=\"' . $selected_html . '\">';",
          "1230:         return $html_output;",
          "1249:         $column_name_appendix,",
          "1253:         $tabindex_for_value,",
          "1256:         array $column_enum_values,",
          "1260:         $html_output = '';",
          "1261:         foreach ($column_enum_values as $enum_value) {",
          "1262:             $html_output .= '            '",
          "1263:                 . '<input type=\"radio\" name=\"fields' . $column_name_appendix . '\"'",
          "1265:                 . ' value=\"' . $enum_value['html'] . '\"'",
          "1269:                 $data == $enum_value['plain']",
          "1273:                 && $enum_value['plain'] == $column['Default'])",
          "1275:                 $html_output .= ' checked=\"checked\"';",
          "1277:                 $html_output .= ' disabled';",
          "1280:             $html_output .= ' tabindex=\"' . ($tabindex + $tabindex_for_value) . '\">';",
          "1281:             $html_output .= '<label for=\"field_' . $idindex . '_3_' . $j . '\">'",
          "1282:                 . $enum_value['html'] . '</label>' . \"\\n\";",
          "1286:         return $html_output;",
          "1309:         array $extracted_columnspec,",
          "1310:         $backup_field,",
          "1311:         $column_name_appendix,",
          "1314:         $tabindex_for_value,",
          "1319:         [$column_set_values, $select_size] = $this->getColumnSetValueAndSelectSize(",
          "1321:             $extracted_columnspec",
          "1324:         $html_output = $backup_field . \"\\n\";",
          "1325:         $html_output .= '<input type=\"hidden\" name=\"fields_type'",
          "1326:             . $column_name_appendix . '\" value=\"set\">';",
          "1327:         $html_output .= '<select name=\"fields' . $column_name_appendix . '[]\"'",
          "1330:             . ' size=\"' . $select_size . '\"'",
          "1333:             . ' tabindex=\"' . ($tabindex + $tabindex_for_value) . '\"'",
          "1336:         $selected_html = '';",
          "1337:         foreach ($column_set_values as $column_set_value) {",
          "1338:             $html_output .= '<option value=\"' . $column_set_value['html'] . '\"';",
          "1339:             if (isset($vset[$column_set_value['plain']])) {",
          "1340:                 $html_output .= ' selected=\"selected\"';",
          "1341:                 $selected_html = $column_set_value['html'];",
          "1344:             $html_output .= '>' . $column_set_value['html'] . '</option>' . \"\\n\";",
          "1347:         $html_output .= '</select>';",
          "1351:             $html_output .= '<input name=\"fields' . $column_name_appendix . '[]\"'",
          "1352:                 . ' type=\"hidden\" value=\"' . $selected_html . '\">';",
          "1355:         return $html_output;",
          "",
          "[Added Lines]",
          "1188:         $columnNameAppendix,",
          "1191:         $tabindexForValue,",
          "1194:         array $columnEnumValues,",
          "1197:         $htmlOutput = '<select name=\"fields' . $columnNameAppendix . '\"'",
          "1200:             . ' tabindex=\"' . ($tabindex + $tabindexForValue) . '\"'",
          "1203:         $htmlOutput .= '<option value=\"\">&nbsp;</option>' . \"\\n\";",
          "1205:         $selectedHtml = '';",
          "1206:         foreach ($columnEnumValues as $enumValue) {",
          "1207:             $htmlOutput .= '<option value=\"' . $enumValue['html'] . '\"';",
          "1209:                 $data == $enumValue['plain']",
          "1213:                 && $enumValue['plain'] == $column['Default'])",
          "1215:                 $htmlOutput .= ' selected=\"selected\"';",
          "1216:                 $selectedHtml = $enumValue['html'];",
          "1219:             $htmlOutput .= '>' . $enumValue['html'] . '</option>' . \"\\n\";",
          "1222:         $htmlOutput .= '</select>';",
          "1226:             $htmlOutput .= '<input name=\"fields' . $columnNameAppendix . '\"'",
          "1227:                 . ' type=\"hidden\" value=\"' . $selectedHtml . '\">';",
          "1230:         return $htmlOutput;",
          "1249:         $columnNameAppendix,",
          "1253:         $tabindexForValue,",
          "1256:         array $columnEnumValues,",
          "1260:         $htmlOutput = '';",
          "1261:         foreach ($columnEnumValues as $enumValue) {",
          "1262:             $htmlOutput .= '            '",
          "1263:                 . '<input type=\"radio\" name=\"fields' . $columnNameAppendix . '\"'",
          "1265:                 . ' value=\"' . $enumValue['html'] . '\"'",
          "1269:                 $data == $enumValue['plain']",
          "1273:                 && $enumValue['plain'] == $column['Default'])",
          "1275:                 $htmlOutput .= ' checked=\"checked\"';",
          "1277:                 $htmlOutput .= ' disabled';",
          "1280:             $htmlOutput .= ' tabindex=\"' . ($tabindex + $tabindexForValue) . '\">';",
          "1281:             $htmlOutput .= '<label for=\"field_' . $idindex . '_3_' . $j . '\">'",
          "1282:                 . $enumValue['html'] . '</label>' . \"\\n\";",
          "1286:         return $htmlOutput;",
          "1309:         array $extractedColumnspec,",
          "1310:         $backupField,",
          "1311:         $columnNameAppendix,",
          "1314:         $tabindexForValue,",
          "1319:         [$columnSetValues, $selectSize] = $this->getColumnSetValueAndSelectSize(",
          "1321:             $extractedColumnspec",
          "1324:         $htmlOutput = $backupField . \"\\n\";",
          "1325:         $htmlOutput .= '<input type=\"hidden\" name=\"fields_type'",
          "1326:             . $columnNameAppendix . '\" value=\"set\">';",
          "1327:         $htmlOutput .= '<select name=\"fields' . $columnNameAppendix . '[]\"'",
          "1330:             . ' size=\"' . $selectSize . '\"'",
          "1333:             . ' tabindex=\"' . ($tabindex + $tabindexForValue) . '\"'",
          "1336:         $selectedHtml = '';",
          "1337:         foreach ($columnSetValues as $columnSetValue) {",
          "1338:             $htmlOutput .= '<option value=\"' . $columnSetValue['html'] . '\"';",
          "1339:             if (isset($vset[$columnSetValue['plain']])) {",
          "1340:                 $htmlOutput .= ' selected=\"selected\"';",
          "1341:                 $selectedHtml = $columnSetValue['html'];",
          "1344:             $htmlOutput .= '>' . $columnSetValue['html'] . '</option>' . \"\\n\";",
          "1347:         $htmlOutput .= '</select>';",
          "1351:             $htmlOutput .= '<input name=\"fields' . $columnNameAppendix . '[]\"'",
          "1352:                 . ' type=\"hidden\" value=\"' . $selectedHtml . '\">';",
          "1355:         return $htmlOutput;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1368:     private function getColumnSetValueAndSelectSize(",
          "1369:         array $column,",
          "1371:     ) {",
          "1372:         if (! isset($column['values'])) {",
          "1373:             $column['values'] = [];",
          "1375:                 $column['values'][] = [",
          "1376:                     'plain' => $val,",
          "1377:                     'html'  => htmlspecialchars($val),",
          "",
          "[Removed Lines]",
          "1370:         array $extracted_columnspec",
          "1374:             foreach ($extracted_columnspec['enum_set_values'] as $val) {",
          "",
          "[Added Lines]",
          "1370:         array $extractedColumnspec",
          "1374:             foreach ($extractedColumnspec['enum_set_values'] as $val) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1413:     private function getBinaryAndBlobColumn(",
          "1414:         array $column,",
          "1415:         ?string $data,",
          "1420:         $onChangeClause,",
          "1421:         $tabindex,",
          "1423:         $idindex,",
          "1426:         $vkey,",
          "1428:         $readOnly",
          "1429:     ) {",
          "1436:         if (",
          "1437:             ($GLOBALS['cfg']['ProtectBinary'] === 'blob' && $column['is_blob'])",
          "1438:             || ($GLOBALS['cfg']['ProtectBinary'] === 'all')",
          "1439:             || ($GLOBALS['cfg']['ProtectBinary'] === 'noblob' && ! $column['is_blob'])",
          "1440:         ) {",
          "1442:             if (isset($data)) {",
          "1444:                     mb_strlen(stripslashes($data)),",
          "1445:                     3,",
          "1446:                     1",
          "1447:                 );",
          "1450:             }",
          "1455:         } elseif (",
          "1456:             $column['is_blob']",
          "1457:             || ($column['len'] > $GLOBALS['cfg']['LimitChars'])",
          "1458:         ) {",
          "1460:                 $column,",
          "1463:                 $onChangeClause,",
          "1464:                 $tabindex,",
          "1466:                 $idindex,",
          "1469:                 'HEX',",
          "1470:                 $readOnly",
          "1471:             );",
          "1472:         } else {",
          "1474:             $fieldsize = min(max($column['len'], 4), $GLOBALS['cfg']['LimitChars']);",
          "1476:                 $column,",
          "1479:                 $fieldsize,",
          "1480:                 $onChangeClause,",
          "1481:                 $tabindex,",
          "1483:                 $idindex,",
          "1484:                 'HEX',",
          "1485:                 $readOnly",
          "1486:             );",
          "1487:         }",
          "1496:                 . '<input type=\"file\"'",
          "1497:                 . ' name=\"fields_upload' . $vkey . '[' . $column['Field_md5'] . ']\"'",
          "1498:                 . ' class=\"textfield noDragDrop\" id=\"field_' . $idindex . '_3\" size=\"10\"'",
          "1499:                 . ' ' . $onChangeClause . '>&nbsp;';",
          "1501:                 $column,",
          "1503:             );",
          "1505:         }",
          "1507:         if (! empty($GLOBALS['cfg']['UploadDir']) && ! $readOnly) {",
          "1509:         }",
          "1512:     }",
          "1530:     private function getHtmlInput(",
          "1531:         array $column,",
          "1534:         $fieldsize,",
          "1535:         $onChangeClause,",
          "1536:         $tabindex,",
          "1538:         $idindex,",
          "1540:         $readOnly",
          "1541:     ) {",
          "1548:         if (! $readOnly) {",
          "1549:             if ($column['True_Type'] === 'date') {",
          "1551:             } elseif ($column['True_Type'] === 'time') {",
          "1553:             } elseif (",
          "1554:                 $column['True_Type'] === 'datetime'",
          "1555:                 || $column['True_Type'] === 'timestamp'",
          "1556:             ) {",
          "1558:             }",
          "1559:         }",
          "1562:         if (in_array($column['True_Type'], $this->dbi->types->getIntegerTypes())) {",
          "1564:                 $column['Type']",
          "1565:             );",
          "1568:                 $column['True_Type'],",
          "1570:             );",
          "1574:         }",
          "1579:             . (isset($column['is_char']) && $column['is_char']",
          "1580:             ? ' data-maxlength=\"' . $fieldsize . '\"'",
          "1581:             : '')",
          "1582:             . ($readOnly ? ' readonly=\"readonly\"' : '')",
          "1588:             . ' id=\"field_' . $idindex . '_3\">';",
          "1589:     }",
          "",
          "[Removed Lines]",
          "1416:         $special_chars,",
          "1417:         $biggest_max_file_size,",
          "1418:         $backup_field,",
          "1419:         $column_name_appendix,",
          "1422:         $tabindex_for_value,",
          "1424:         $text_dir,",
          "1425:         $special_chars_encoded,",
          "1427:         $is_upload,",
          "1430:         $html_output = '';",
          "1432:         $fields_type_html = '<input type=\"hidden\" name=\"fields_type'",
          "1433:             . $column_name_appendix . '\" value=\"%s\">';",
          "1435:         $fields_type_val = 'hex';",
          "1441:             $html_output .= __('Binary - do not edit');",
          "1443:                 $data_size = Util::formatByteDown(",
          "1448:                 $html_output .= ' (' . $data_size[0] . ' ' . $data_size[1] . ')';",
          "1449:                 unset($data_size);",
          "1452:             $fields_type_val = 'protected';",
          "1453:             $html_output .= '<input type=\"hidden\" name=\"fields'",
          "1454:                 . $column_name_appendix . '\" value=\"\">';",
          "1459:             $html_output .= \"\\n\" . $this->getTextarea(",
          "1461:                 $backup_field,",
          "1462:                 $column_name_appendix,",
          "1465:                 $tabindex_for_value,",
          "1467:                 $text_dir,",
          "1468:                 $special_chars_encoded,",
          "1475:             $html_output .= \"\\n\" . $backup_field . \"\\n\" . $this->getHtmlInput(",
          "1477:                 $column_name_appendix,",
          "1478:                 $special_chars,",
          "1482:                 $tabindex_for_value,",
          "1489:         $html_output .= sprintf($fields_type_html, $fields_type_val);",
          "1491:         if ($is_upload && $column['is_blob'] && ! $readOnly) {",
          "1495:             $html_output .= '<br>'",
          "1500:             [$html_out] = $this->getMaxUploadSize(",
          "1502:                 $biggest_max_file_size",
          "1504:             $html_output .= $html_out;",
          "1508:             $html_output .= $this->getSelectOptionForUpload($vkey, $column);",
          "1511:         return $html_output;",
          "1532:         $column_name_appendix,",
          "1533:         $special_chars,",
          "1537:         $tabindex_for_value,",
          "1539:         $data_type,",
          "1542:         $input_type = 'text';",
          "1546:         $the_class = 'textfield';",
          "1550:                 $the_class .= ' datefield';",
          "1552:                 $the_class .= ' timefield';",
          "1557:                 $the_class .= ' datetimefield';",
          "1561:         $input_min_max = false;",
          "1563:             $extracted_columnspec = Util::extractColumnSpec(",
          "1566:             $is_unsigned = $extracted_columnspec['unsigned'];",
          "1567:             $min_max_values = $this->dbi->types->getIntegerRange(",
          "1569:                 ! $is_unsigned",
          "1571:             $input_min_max = 'min=\"' . $min_max_values[0] . '\" '",
          "1572:                 . 'max=\"' . $min_max_values[1] . '\"';",
          "1573:             $data_type = 'INT';",
          "1576:         return '<input type=\"' . $input_type . '\"'",
          "1577:             . ' name=\"fields' . $column_name_appendix . '\"'",
          "1578:             . ' value=\"' . $special_chars . '\" size=\"' . $fieldsize . '\"'",
          "1583:             . ($input_min_max !== false ? ' ' . $input_min_max : '')",
          "1584:             . ' data-type=\"' . $data_type . '\"'",
          "1585:             . ($input_type === 'time' ? ' step=\"1\"' : '')",
          "1586:             . ' class=\"' . $the_class . '\" ' . $onChangeClause",
          "1587:             . ' tabindex=\"' . ($tabindex + $tabindex_for_value) . '\"'",
          "",
          "[Added Lines]",
          "1416:         $specialChars,",
          "1417:         $biggestMaxFileSize,",
          "1418:         $backupField,",
          "1419:         $columnNameAppendix,",
          "1422:         $tabindexForValue,",
          "1424:         $textDir,",
          "1425:         $specialCharsEncoded,",
          "1427:         $isUpload,",
          "1430:         $htmlOutput = '';",
          "1432:         $fieldsTypeHtml = '<input type=\"hidden\" name=\"fields_type'",
          "1433:             . $columnNameAppendix . '\" value=\"%s\">';",
          "1435:         $fieldsTypeVal = 'hex';",
          "1441:             $htmlOutput .= __('Binary - do not edit');",
          "1443:                 $dataSize = Util::formatByteDown(",
          "1448:                 $htmlOutput .= ' (' . $dataSize[0] . ' ' . $dataSize[1] . ')';",
          "1449:                 unset($dataSize);",
          "1452:             $fieldsTypeVal = 'protected';",
          "1453:             $htmlOutput .= '<input type=\"hidden\" name=\"fields'",
          "1454:                 . $columnNameAppendix . '\" value=\"\">';",
          "1459:             $htmlOutput .= \"\\n\" . $this->getTextarea(",
          "1461:                 $backupField,",
          "1462:                 $columnNameAppendix,",
          "1465:                 $tabindexForValue,",
          "1467:                 $textDir,",
          "1468:                 $specialCharsEncoded,",
          "1475:             $htmlOutput .= \"\\n\" . $backupField . \"\\n\" . $this->getHtmlInput(",
          "1477:                 $columnNameAppendix,",
          "1478:                 $specialChars,",
          "1482:                 $tabindexForValue,",
          "1489:         $htmlOutput .= sprintf($fieldsTypeHtml, $fieldsTypeVal);",
          "1491:         if ($isUpload && $column['is_blob'] && ! $readOnly) {",
          "1495:             $htmlOutput .= '<br>'",
          "1500:             [$htmlOut] = $this->getMaxUploadSize(",
          "1502:                 $biggestMaxFileSize",
          "1504:             $htmlOutput .= $htmlOut;",
          "1508:             $htmlOutput .= $this->getSelectOptionForUpload($vkey, $column);",
          "1511:         return $htmlOutput;",
          "1532:         $columnNameAppendix,",
          "1533:         $specialChars,",
          "1537:         $tabindexForValue,",
          "1539:         $dataType,",
          "1542:         $inputType = 'text';",
          "1546:         $theClass = 'textfield';",
          "1550:                 $theClass .= ' datefield';",
          "1552:                 $theClass .= ' timefield';",
          "1557:                 $theClass .= ' datetimefield';",
          "1561:         $inputMinMax = false;",
          "1563:             $extractedColumnspec = Util::extractColumnSpec(",
          "1566:             $isUnsigned = $extractedColumnspec['unsigned'];",
          "1567:             $minMaxValues = $this->dbi->types->getIntegerRange(",
          "1569:                 ! $isUnsigned",
          "1571:             $inputMinMax = 'min=\"' . $minMaxValues[0] . '\" '",
          "1572:                 . 'max=\"' . $minMaxValues[1] . '\"';",
          "1573:             $dataType = 'INT';",
          "1576:         return '<input type=\"' . $inputType . '\"'",
          "1577:             . ' name=\"fields' . $columnNameAppendix . '\"'",
          "1578:             . ' value=\"' . $specialChars . '\" size=\"' . $fieldsize . '\"'",
          "1583:             . ($inputMinMax !== false ? ' ' . $inputMinMax : '')",
          "1584:             . ' data-type=\"' . $dataType . '\"'",
          "1585:             . ($inputType === 'time' ? ' step=\"1\"' : '')",
          "1586:             . ' class=\"' . $theClass . '\" ' . $onChangeClause",
          "1587:             . ' tabindex=\"' . ($tabindex + $tabindexForValue) . '\"'",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1633:     {",
          "",
          "[Removed Lines]",
          "1632:     private function getMaxUploadSize(array $column, $biggest_max_file_size)",
          "",
          "[Added Lines]",
          "1632:     private function getMaxUploadSize(array $column, $biggestMaxFileSize)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1639:         global $max_upload_size;",
          "1641:             'tinyblob'   =>        '256',",
          "1642:             'blob'       =>      '65536',",
          "1643:             'mediumblob' =>   '16777216',",
          "1644:             'longblob'   => '4294967296',// yeah, really",
          "1645:         ];",
          "1650:         }",
          "1653:             = Util::getFormattedMaximumUploadSize(",
          "1655:             ) . \"\\n\";",
          "1660:         }",
          "1662:         return [",
          "1665:         ];",
          "1666:     }",
          "",
          "[Removed Lines]",
          "1640:         $max_field_sizes = [",
          "1647:         $this_field_max_size = $max_upload_size; // from PHP max",
          "1648:         if ($this_field_max_size > $max_field_sizes[$column['pma_type']]) {",
          "1649:             $this_field_max_size = $max_field_sizes[$column['pma_type']];",
          "1652:         $html_output",
          "1654:                 $this_field_max_size",
          "1658:         if ($this_field_max_size > $biggest_max_file_size) {",
          "1659:             $biggest_max_file_size = $this_field_max_size;",
          "1663:             $html_output,",
          "1664:             $biggest_max_file_size,",
          "",
          "[Added Lines]",
          "1640:         $maxFieldSizes = [",
          "1647:         $thisFieldMaxSize = $max_upload_size; // from PHP max",
          "1648:         if ($thisFieldMaxSize > $maxFieldSizes[$column['pma_type']]) {",
          "1649:             $thisFieldMaxSize = $maxFieldSizes[$column['pma_type']];",
          "1652:         $htmlOutput",
          "1654:                 $thisFieldMaxSize",
          "1658:         if ($thisFieldMaxSize > $biggestMaxFileSize) {",
          "1659:             $biggestMaxFileSize = $thisFieldMaxSize;",
          "1663:             $htmlOutput,",
          "1664:             $biggestMaxFileSize,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1693:     private function getValueColumnForOtherDatatypes(",
          "1694:         array $column,",
          "1698:         $onChangeClause,",
          "1699:         $tabindex,",
          "1702:         $idindex,",
          "1705:         $data,",
          "1707:         $readOnly",
          "1708:     ) {",
          "1713:         if (",
          "1714:             $column['is_char']",
          "1715:             && ($GLOBALS['cfg']['CharEditing'] === 'textarea'",
          "1716:             || mb_strpos($data, \"\\n\") !== false)",
          "1717:         ) {",
          "1721:                 $column,",
          "1724:                 $onChangeClause,",
          "1725:                 $tabindex,",
          "1727:                 $idindex,",
          "1731:                 $readOnly",
          "1732:             );",
          "1733:         } else {",
          "1735:                 $column,",
          "1738:                 $fieldsize,",
          "1739:                 $onChangeClause,",
          "1740:                 $tabindex,",
          "1742:                 $idindex,",
          "1744:                 $readOnly",
          "1745:             );",
          "",
          "[Removed Lines]",
          "1695:         $default_char_editing,",
          "1696:         $backup_field,",
          "1697:         $column_name_appendix,",
          "1700:         $special_chars,",
          "1701:         $tabindex_for_value,",
          "1703:         $text_dir,",
          "1704:         $special_chars_encoded,",
          "1706:         array $extracted_columnspec,",
          "1710:         $data_type = $this->dbi->types->getTypeClass($column['True_Type']);",
          "1711:         $fieldsize = $this->getColumnSize($column, $extracted_columnspec);",
          "1712:         $html_output = $backup_field . \"\\n\";",
          "1718:             $html_output .= \"\\n\";",
          "1719:             $GLOBALS['cfg']['CharEditing'] = $default_char_editing;",
          "1720:             $html_output .= $this->getTextarea(",
          "1722:                 $backup_field,",
          "1723:                 $column_name_appendix,",
          "1726:                 $tabindex_for_value,",
          "1728:                 $text_dir,",
          "1729:                 $special_chars_encoded,",
          "1730:                 $data_type,",
          "1734:             $html_output .= $this->getHtmlInput(",
          "1736:                 $column_name_appendix,",
          "1737:                 $special_chars,",
          "1741:                 $tabindex_for_value,",
          "1743:                 $data_type,",
          "",
          "[Added Lines]",
          "1695:         $defaultCharEditing,",
          "1696:         $backupField,",
          "1697:         $columnNameAppendix,",
          "1700:         $specialChars,",
          "1701:         $tabindexForValue,",
          "1703:         $textDir,",
          "1704:         $specialCharsEncoded,",
          "1706:         array $extractedColumnspec,",
          "1710:         $dataType = $this->dbi->types->getTypeClass($column['True_Type']);",
          "1711:         $fieldsize = $this->getColumnSize($column, $extractedColumnspec);",
          "1712:         $htmlOutput = $backupField . \"\\n\";",
          "1718:             $htmlOutput .= \"\\n\";",
          "1719:             $GLOBALS['cfg']['CharEditing'] = $defaultCharEditing;",
          "1720:             $htmlOutput .= $this->getTextarea(",
          "1722:                 $backupField,",
          "1723:                 $columnNameAppendix,",
          "1726:                 $tabindexForValue,",
          "1728:                 $textDir,",
          "1729:                 $specialCharsEncoded,",
          "1730:                 $dataType,",
          "1734:             $htmlOutput .= $this->getHtmlInput(",
          "1736:                 $columnNameAppendix,",
          "1737:                 $specialChars,",
          "1741:                 $tabindexForValue,",
          "1743:                 $dataType,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1748:                 preg_match('/(VIRTUAL|PERSISTENT|GENERATED)/', $column['Extra'])",
          "1749:                 && strpos($column['Extra'], 'DEFAULT_GENERATED') === false",
          "1750:             ) {",
          "1753:             }",
          "1755:             if ($column['Extra'] === 'auto_increment') {",
          "1758:             }",
          "1760:             if (substr($column['pma_type'], 0, 9) === 'timestamp') {",
          "1763:             }",
          "1765:             if (substr($column['pma_type'], 0, 8) === 'datetime') {",
          "1768:             }",
          "1770:             if ($column['True_Type'] === 'bit') {",
          "1773:             }",
          "1774:         }",
          "1777:     }",
          "1790:     {",
          "1791:         if ($column['is_char']) {",
          "1793:             if ($fieldsize > $GLOBALS['cfg']['MaxSizeForInputField']) {",
          "",
          "[Removed Lines]",
          "1751:                 $html_output .= '<input type=\"hidden\" name=\"virtual'",
          "1752:                     . $column_name_appendix . '\" value=\"1\">';",
          "1756:                 $html_output .= '<input type=\"hidden\" name=\"auto_increment'",
          "1757:                     . $column_name_appendix . '\" value=\"1\">';",
          "1761:                 $html_output .= '<input type=\"hidden\" name=\"fields_type'",
          "1762:                     . $column_name_appendix . '\" value=\"timestamp\">';",
          "1766:                 $html_output .= '<input type=\"hidden\" name=\"fields_type'",
          "1767:                     . $column_name_appendix . '\" value=\"datetime\">';",
          "1771:                 $html_output .= '<input type=\"hidden\" name=\"fields_type'",
          "1772:                     . $column_name_appendix . '\" value=\"bit\">';",
          "1776:         return $html_output;",
          "1789:     private function getColumnSize(array $column, array $extracted_columnspec)",
          "1792:             $fieldsize = $extracted_columnspec['spec_in_brackets'];",
          "",
          "[Added Lines]",
          "1751:                 $htmlOutput .= '<input type=\"hidden\" name=\"virtual'",
          "1752:                     . $columnNameAppendix . '\" value=\"1\">';",
          "1756:                 $htmlOutput .= '<input type=\"hidden\" name=\"auto_increment'",
          "1757:                     . $columnNameAppendix . '\" value=\"1\">';",
          "1761:                 $htmlOutput .= '<input type=\"hidden\" name=\"fields_type'",
          "1762:                     . $columnNameAppendix . '\" value=\"timestamp\">';",
          "1766:                 $htmlOutput .= '<input type=\"hidden\" name=\"fields_type'",
          "1767:                     . $columnNameAppendix . '\" value=\"datetime\">';",
          "1771:                 $htmlOutput .= '<input type=\"hidden\" name=\"fields_type'",
          "1772:                     . $columnNameAppendix . '\" value=\"bit\">';",
          "1776:         return $htmlOutput;",
          "1789:     private function getColumnSize(array $column, array $extractedColumnspec)",
          "1792:             $fieldsize = $extractedColumnspec['spec_in_brackets'];",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1820:     private function getHtmlForGisDataTypes()",
          "1821:     {",
          "1824:         return '<span class=\"open_gis_editor\">'",
          "1825:             . Generator::linkOrButton(",
          "1826:                 '#',",
          "1828:                 [],",
          "1829:                 '_blank'",
          "1830:             )",
          "",
          "[Removed Lines]",
          "1822:         $edit_str = Generator::getIcon('b_edit', __('Edit/Insert'));",
          "1827:                 $edit_str,",
          "",
          "[Added Lines]",
          "1822:         $editStr = Generator::getIcon('b_edit', __('Edit/Insert'));",
          "1827:                 $editStr,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1844:     public function getContinueInsertionForm(",
          "1845:         $table,",
          "1846:         $db,",
          "1849:     ) {",
          "1850:         return $this->template->render('table/insert/continue_insertion_form', [",
          "1851:             'db' => $db,",
          "1852:             'table' => $table,",
          "1855:             'goto' => $GLOBALS['goto'],",
          "1856:             'sql_query' => $_POST['sql_query'] ?? null,",
          "1857:             'has_where_clause' => isset($_POST['where_clause']),",
          "",
          "[Removed Lines]",
          "1847:         array $where_clause_array,",
          "1848:         $err_url",
          "1853:             'where_clause_array' => $where_clause_array,",
          "1854:             'err_url' => $err_url,",
          "",
          "[Added Lines]",
          "1847:         array $whereClauseArray,",
          "1848:         $errorUrl",
          "1853:             'where_clause_array' => $whereClauseArray,",
          "1854:             'err_url' => $errorUrl,",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1873:     public function getActionsPanel(",
          "1876:         $tabindex,",
          "1879:     ) {",
          "1881:             . '<table cellpadding=\"5\" cellspacing=\"0\" class=\"pma-table tdblock w-100\">'",
          "1882:             . '<tr>'",
          "1883:             . '<td class=\"text-nowrap align-middle\">'",
          "1885:             . \"\\n\";",
          "1888:             . '<td class=\"align-middle\">'",
          "1889:             . '&nbsp;&nbsp;&nbsp;<strong>'",
          "1890:             . __('and then') . '</strong>&nbsp;&nbsp;&nbsp;'",
          "1891:             . '</td>'",
          "1892:             . '<td class=\"text-nowrap align-middle\">'",
          "1893:             . $this->getAfterInsertDropDown(",
          "1897:             )",
          "1898:             . '</td>'",
          "1899:             . '</tr>';",
          "1902:             . '</tr>'",
          "1903:             . '</table>'",
          "1904:             . '</fieldset>';",
          "1907:     }",
          "1918:     private function getSubmitTypeDropDown(",
          "1920:         $tabindex,",
          "1922:     ) {",
          "1927:         }",
          "1930:             . __('Insert as new row')",
          "1931:             . '</option>'",
          "1932:             . '<option value=\"insertignore\">'",
          "",
          "[Removed Lines]",
          "1874:         $where_clause,",
          "1875:         $after_insert,",
          "1877:         $tabindex_for_value,",
          "1878:         $found_unique_key",
          "1880:         $html_output = '<fieldset class=\"pma-fieldset\" id=\"actions_panel\">'",
          "1884:             . $this->getSubmitTypeDropDown($where_clause, $tabindex, $tabindex_for_value)",
          "1887:         $html_output .= '</td>'",
          "1894:                 $where_clause,",
          "1895:                 $after_insert,",
          "1896:                 $found_unique_key",
          "1900:         $html_output .= '<tr>'",
          "1901:             . $this->getSubmitAndResetButtonForActionsPanel($tabindex, $tabindex_for_value)",
          "1906:         return $html_output;",
          "1919:         $where_clause,",
          "1921:         $tabindex_for_value",
          "1923:         $html_output = '<select name=\"submit_type\" class=\"control_at_footer\" tabindex=\"'",
          "1924:             . ($tabindex + $tabindex_for_value + 1) . '\">';",
          "1925:         if (isset($where_clause)) {",
          "1926:             $html_output .= '<option value=\"save\">' . __('Save') . '</option>';",
          "1929:         $html_output .= '<option value=\"insert\">'",
          "",
          "[Added Lines]",
          "1874:         $whereClause,",
          "1875:         $afterInsert,",
          "1877:         $tabindexForValue,",
          "1878:         $foundUniqueKey",
          "1880:         $htmlOutput = '<fieldset class=\"pma-fieldset\" id=\"actions_panel\">'",
          "1884:             . $this->getSubmitTypeDropDown($whereClause, $tabindex, $tabindexForValue)",
          "1887:         $htmlOutput .= '</td>'",
          "1894:                 $whereClause,",
          "1895:                 $afterInsert,",
          "1896:                 $foundUniqueKey",
          "1900:         $htmlOutput .= '<tr>'",
          "1901:             . $this->getSubmitAndResetButtonForActionsPanel($tabindex, $tabindexForValue)",
          "1906:         return $htmlOutput;",
          "1919:         $whereClause,",
          "1921:         $tabindexForValue",
          "1923:         $htmlOutput = '<select name=\"submit_type\" class=\"control_at_footer\" tabindex=\"'",
          "1924:             . ($tabindex + $tabindexForValue + 1) . '\">';",
          "1925:         if (isset($whereClause)) {",
          "1926:             $htmlOutput .= '<option value=\"save\">' . __('Save') . '</option>';",
          "1929:         $htmlOutput .= '<option value=\"insert\">'",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1937:             . '</option>'",
          "1938:             . '</select>';",
          "1941:     }",
          "1953:     {",
          "1955:             . '<option value=\"back\" '",
          "1957:             . __('Go back to previous page') . '</option>'",
          "1958:             . '<option value=\"new_insert\" '",
          "1960:             . __('Insert another new row') . '</option>';",
          "1965:                 . __('Go back to this page') . '</option>';",
          "1974:             }",
          "1979:                     '@^[\\s]*`[^`]*`[\\.]`[^`]*` = [0-9]+@',",
          "1981:                 ) == 1);",
          "1983:                     break;",
          "1984:                 }",
          "1985:             }",
          "1990:                     . __('Edit next row') . '</option>';",
          "1991:             }",
          "1992:         }",
          "1995:     }",
          "2006:     {",
          "2007:         return '<td>'",
          "2008:             . Generator::showHint(",
          "",
          "[Removed Lines]",
          "1940:         return $html_output;",
          "1952:     private function getAfterInsertDropDown($where_clause, $after_insert, $found_unique_key)",
          "1954:         $html_output = '<select name=\"after_insert\" class=\"control_at_footer\">'",
          "1956:             . ($after_insert === 'back' ? 'selected=\"selected\"' : '') . '>'",
          "1959:             . ($after_insert === 'new_insert' ? 'selected=\"selected\"' : '') . '>'",
          "1962:         if (isset($where_clause)) {",
          "1963:             $html_output .= '<option value=\"same_insert\" '",
          "1964:                 . ($after_insert === 'same_insert' ? 'selected=\"selected\"' : '') . '>'",
          "1971:             $is_numeric = false;",
          "1972:             if (! is_array($where_clause)) {",
          "1973:                 $where_clause = [$where_clause];",
          "1976:             for ($i = 0, $nb = count($where_clause); $i < $nb; $i++) {",
          "1978:                 $is_numeric = (preg_match(",
          "1980:                     $where_clause[$i]",
          "1982:                 if ($is_numeric === true) {",
          "1987:             if ($found_unique_key && $is_numeric) {",
          "1988:                 $html_output .= '<option value=\"edit_next\" '",
          "1989:                     . ($after_insert === 'edit_next' ? 'selected=\"selected\"' : '') . '>'",
          "1994:         return $html_output . '</select>';",
          "2005:     private function getSubmitAndResetButtonForActionsPanel($tabindex, $tabindex_for_value)",
          "",
          "[Added Lines]",
          "1940:         return $htmlOutput;",
          "1952:     private function getAfterInsertDropDown($whereClause, $afterInsert, $foundUniqueKey)",
          "1954:         $htmlOutput = '<select name=\"after_insert\" class=\"control_at_footer\">'",
          "1956:             . ($afterInsert === 'back' ? 'selected=\"selected\"' : '') . '>'",
          "1959:             . ($afterInsert === 'new_insert' ? 'selected=\"selected\"' : '') . '>'",
          "1962:         if (isset($whereClause)) {",
          "1963:             $htmlOutput .= '<option value=\"same_insert\" '",
          "1964:                 . ($afterInsert === 'same_insert' ? 'selected=\"selected\"' : '') . '>'",
          "1971:             $isNumeric = false;",
          "1972:             if (! is_array($whereClause)) {",
          "1973:                 $whereClause = [$whereClause];",
          "1976:             for ($i = 0, $nb = count($whereClause); $i < $nb; $i++) {",
          "1978:                 $isNumeric = (preg_match(",
          "1980:                     $whereClause[$i]",
          "1982:                 if ($isNumeric === true) {",
          "1987:             if ($foundUniqueKey && $isNumeric) {",
          "1988:                 $htmlOutput .= '<option value=\"edit_next\" '",
          "1989:                     . ($afterInsert === 'edit_next' ? 'selected=\"selected\"' : '') . '>'",
          "1994:         return $htmlOutput . '</select>';",
          "2005:     private function getSubmitAndResetButtonForActionsPanel($tabindex, $tabindexForValue)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2014:             . '</td>'",
          "2015:             . '<td colspan=\"3\" class=\"text-end align-middle\">'",
          "2016:             . '<input type=\"button\" class=\"btn btn-secondary preview_sql\" value=\"' . __('Preview SQL') . '\"'",
          "2018:             . '<input type=\"reset\" class=\"btn btn-secondary control_at_footer\" value=\"' . __('Reset') . '\"'",
          "2020:             . '<input type=\"submit\" class=\"btn btn-primary control_at_footer\" value=\"' . __('Go') . '\"'",
          "2022:             . '</td>';",
          "2023:     }",
          "2033:     {",
          "2035:             . '<table class=\"pma-table insertRowTable topmargin\">'",
          "2036:             . '<thead>'",
          "2037:             . '<tr>'",
          "2038:             . '<th>' . __('Column') . '</th>';",
          "2040:         if ($GLOBALS['cfg']['ShowFieldTypesInDataEditView']) {",
          "2042:         }",
          "2044:         if ($GLOBALS['cfg']['ShowFunctionFields']) {",
          "2046:         }",
          "2049:             . '<th class=\"fillPage\">' . __('Value') . '</th>'",
          "2050:             . '</tr>'",
          "2051:             . '</thead>'",
          "",
          "[Removed Lines]",
          "2017:             . ' tabindex=\"' . ($tabindex + $tabindex_for_value + 6) . '\">'",
          "2019:             . ' tabindex=\"' . ($tabindex + $tabindex_for_value + 7) . '\">'",
          "2021:             . ' tabindex=\"' . ($tabindex + $tabindex_for_value + 8) . '\" id=\"buttonYes\">'",
          "2032:     private function getHeadAndFootOfInsertRowTable(array $url_params)",
          "2034:         $html_output = '<div class=\"responsivetable\">'",
          "2041:             $html_output .= $this->showTypeOrFunction('type', $url_params, true);",
          "2045:             $html_output .= $this->showTypeOrFunction('function', $url_params, true);",
          "2048:         $html_output .= '<th>' . __('Null') . '</th>'",
          "",
          "[Added Lines]",
          "2017:             . ' tabindex=\"' . ($tabindex + $tabindexForValue + 6) . '\">'",
          "2019:             . ' tabindex=\"' . ($tabindex + $tabindexForValue + 7) . '\">'",
          "2021:             . ' tabindex=\"' . ($tabindex + $tabindexForValue + 8) . '\" id=\"buttonYes\">'",
          "2032:     private function getHeadAndFootOfInsertRowTable(array $urlParams)",
          "2034:         $htmlOutput = '<div class=\"responsivetable\">'",
          "2041:             $htmlOutput .= $this->showTypeOrFunction('type', $urlParams, true);",
          "2045:             $htmlOutput .= $this->showTypeOrFunction('function', $urlParams, true);",
          "2048:         $htmlOutput .= '<th>' . __('Null') . '</th>'",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2057:             . '</tr>'",
          "2058:             . '</tfoot>';",
          "2061:     }",
          "2079:     private function getSpecialCharsAndBackupFieldForExistingRow(",
          "2081:         array $column,",
          "2087:     ) {",
          "2089:         $data = null;",
          "2096:         } elseif ($column['True_Type'] === 'bit') {",
          "2099:                 : Util::printableBitValue(",
          "2102:                 );",
          "2103:         } elseif (",
          "2104:             (substr($column['True_Type'], 0, 9) === 'timestamp'",
          "2105:             || $column['True_Type'] === 'datetime'",
          "2106:             || $column['True_Type'] === 'time')",
          "2108:         ) {",
          "2111:                 : Util::addMicroseconds(",
          "2113:                 );",
          "2119:                 : Gis::convertToWellKnownText(",
          "2121:                     true",
          "2122:                 );",
          "2124:         } else {",
          "2126:             if (",
          "2127:                 $column['is_binary']",
          "2128:                 || ($column['is_blob'] && $GLOBALS['cfg']['ProtectBinary'] !== 'all')",
          "2129:             ) {",
          "2132:                     : bin2hex(",
          "2134:                     );",
          "2135:             }",
          "2145:         }",
          "",
          "[Removed Lines]",
          "2060:         return $html_output;",
          "2080:         array $current_row,",
          "2082:         array $extracted_columnspec,",
          "2083:         $real_null_value,",
          "2084:         array $gis_data_types,",
          "2085:         $column_name_appendix,",
          "2086:         $as_is",
          "2088:         $special_chars_encoded = '';",
          "2091:         if (! isset($current_row[$column['Field']])) {",
          "2092:             $real_null_value = true;",
          "2093:             $current_row[$column['Field']] = '';",
          "2094:             $special_chars = '';",
          "2095:             $data = $current_row[$column['Field']];",
          "2097:             $special_chars = $as_is",
          "2098:                 ? $current_row[$column['Field']]",
          "2100:                     (int) $current_row[$column['Field']],",
          "2101:                     (int) $extracted_columnspec['spec_in_brackets']",
          "2107:             && (mb_strpos($current_row[$column['Field']], '.') !== false)",
          "2109:             $current_row[$column['Field']] = $as_is",
          "2110:                 ? $current_row[$column['Field']]",
          "2112:                     $current_row[$column['Field']]",
          "2114:             $special_chars = htmlspecialchars($current_row[$column['Field']]);",
          "2115:         } elseif (in_array($column['True_Type'], $gis_data_types)) {",
          "2117:             $current_row[$column['Field']] = $as_is",
          "2118:                 ? $current_row[$column['Field']]",
          "2120:                     $current_row[$column['Field']],",
          "2123:             $special_chars = htmlspecialchars($current_row[$column['Field']]);",
          "2130:                 $current_row[$column['Field']] = $as_is",
          "2131:                     ? $current_row[$column['Field']]",
          "2133:                         $current_row[$column['Field']]",
          "2137:             $special_chars = htmlspecialchars($current_row[$column['Field']]);",
          "2141:             $special_chars_encoded",
          "2142:                 = Util::duplicateFirstNewline($special_chars);",
          "2144:             $data = $current_row[$column['Field']];",
          "",
          "[Added Lines]",
          "2060:         return $htmlOutput;",
          "2080:         array $currentRow,",
          "2082:         array $extractedColumnspec,",
          "2083:         $realNullValue,",
          "2084:         array $gisDataTypes,",
          "2085:         $columnNameAppendix,",
          "2086:         $asIs",
          "2088:         $specialCharsEncoded = '';",
          "2091:         if (! isset($currentRow[$column['Field']])) {",
          "2092:             $realNullValue = true;",
          "2093:             $currentRow[$column['Field']] = '';",
          "2094:             $specialChars = '';",
          "2095:             $data = $currentRow[$column['Field']];",
          "2097:             $specialChars = $asIs",
          "2098:                 ? $currentRow[$column['Field']]",
          "2100:                     (int) $currentRow[$column['Field']],",
          "2101:                     (int) $extractedColumnspec['spec_in_brackets']",
          "2107:             && (mb_strpos($currentRow[$column['Field']], '.') !== false)",
          "2109:             $currentRow[$column['Field']] = $asIs",
          "2110:                 ? $currentRow[$column['Field']]",
          "2112:                     $currentRow[$column['Field']]",
          "2114:             $specialChars = htmlspecialchars($currentRow[$column['Field']]);",
          "2115:         } elseif (in_array($column['True_Type'], $gisDataTypes)) {",
          "2117:             $currentRow[$column['Field']] = $asIs",
          "2118:                 ? $currentRow[$column['Field']]",
          "2120:                     $currentRow[$column['Field']],",
          "2123:             $specialChars = htmlspecialchars($currentRow[$column['Field']]);",
          "2130:                 $currentRow[$column['Field']] = $asIs",
          "2131:                     ? $currentRow[$column['Field']]",
          "2133:                         $currentRow[$column['Field']]",
          "2137:             $specialChars = htmlspecialchars($currentRow[$column['Field']]);",
          "2141:             $specialCharsEncoded",
          "2142:                 = Util::duplicateFirstNewline($specialChars);",
          "2144:             $data = $currentRow[$column['Field']];",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2154:                 $column['Key'] === 'PRI'",
          "2155:                 && mb_strpos($column['Extra'], 'auto_increment') !== false",
          "2156:             ) {",
          "2158:             }",
          "2159:         }",
          "",
          "[Removed Lines]",
          "2157:                 $data = $special_chars_encoded = $special_chars = null;",
          "",
          "[Added Lines]",
          "2157:                 $data = $specialCharsEncoded = $specialChars = null;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2169:         return [",
          "2173:             $data,",
          "2175:         ];",
          "2176:     }",
          "2187:     private function getSpecialCharsAndBackupFieldForInsertingMode(",
          "2188:         array $column,",
          "2190:     ) {",
          "2191:         if (! isset($column['Default'])) {",
          "2192:             $column['Default']    = '';",
          "2194:             $data                     = '';",
          "2195:         } else {",
          "2196:             $data                     = $column['Default'];",
          "",
          "[Removed Lines]",
          "2165:         $backup_field = '<input type=\"hidden\" name=\"fields_prev'",
          "2166:             . $column_name_appendix . '\" value=\"'",
          "2167:             . htmlspecialchars($current_row[$column['Field']]) . '\">';",
          "2170:             $real_null_value,",
          "2171:             $special_chars_encoded,",
          "2172:             $special_chars,",
          "2174:             $backup_field,",
          "2189:         $real_null_value",
          "2193:             $real_null_value          = true;",
          "",
          "[Added Lines]",
          "2165:         $backupField = '<input type=\"hidden\" name=\"fields_prev'",
          "2166:             . $columnNameAppendix . '\" value=\"'",
          "2167:             . htmlspecialchars($currentRow[$column['Field']]) . '\">';",
          "2170:             $realNullValue,",
          "2171:             $specialCharsEncoded,",
          "2172:             $specialChars,",
          "2174:             $backupField,",
          "2189:         $realNullValue",
          "2193:             $realNullValue          = true;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2199:         $trueType = $column['True_Type'];",
          "2201:         if ($trueType === 'bit') {",
          "2203:                 $column['Default']",
          "2204:             );",
          "2205:         } elseif (",
          "",
          "[Removed Lines]",
          "2202:             $special_chars = Util::convertBitDefaultValue(",
          "",
          "[Added Lines]",
          "2202:             $specialChars = Util::convertBitDefaultValue(",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2207:             || $trueType === 'datetime'",
          "2208:             || $trueType === 'time'",
          "2209:         ) {",
          "2211:         } elseif ($trueType === 'binary' || $trueType === 'varbinary') {",
          "2213:         } elseif (substr($trueType, -4) === 'text') {",
          "2214:             $textDefault = substr($column['Default'], 1, -1);",
          "2216:         } else {",
          "2218:         }",
          "2223:         );",
          "2225:         return [",
          "2227:             $data,",
          "2231:         ];",
          "2232:     }",
          "",
          "[Removed Lines]",
          "2210:             $special_chars = Util::addMicroseconds($column['Default']);",
          "2212:             $special_chars = bin2hex($column['Default']);",
          "2215:             $special_chars = stripcslashes($textDefault !== false ? $textDefault : $column['Default']);",
          "2217:             $special_chars = htmlspecialchars($column['Default']);",
          "2220:         $backup_field = '';",
          "2221:         $special_chars_encoded = Util::duplicateFirstNewline(",
          "2222:             $special_chars",
          "2226:             $real_null_value,",
          "2228:             $special_chars,",
          "2229:             $backup_field,",
          "2230:             $special_chars_encoded,",
          "",
          "[Added Lines]",
          "2210:             $specialChars = Util::addMicroseconds($column['Default']);",
          "2212:             $specialChars = bin2hex($column['Default']);",
          "2215:             $specialChars = stripcslashes($textDefault !== false ? $textDefault : $column['Default']);",
          "2217:             $specialChars = htmlspecialchars($column['Default']);",
          "2220:         $backupField = '';",
          "2221:         $specialCharsEncoded = Util::duplicateFirstNewline(",
          "2222:             $specialChars",
          "2226:             $realNullValue,",
          "2228:             $specialChars,",
          "2229:             $backupField,",
          "2230:             $specialCharsEncoded,",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2240:     {",
          "2241:         if (isset($_POST['where_clause'])) {",
          "2244:                 ? $_POST['where_clause']",
          "2245:                 : [$_POST['where_clause']];",
          "2248:                           && ($_POST['submit_type'] === 'insert'",
          "2249:                           || $_POST['submit_type'] === 'showinsert'",
          "2250:                           || $_POST['submit_type'] === 'insertignore');",
          "2251:         } else {",
          "2254:             if (! empty($_POST['fields'])) {",
          "2255:                 foreach ($_POST['fields']['multi_edit'] as $key => $dummy) {",
          "2257:                 }",
          "2258:             }",
          "2262:         }",
          "2265:             && $_POST['submit_type'] === 'insertignore';",
          "2267:         return [",
          "2272:         ];",
          "2273:     }",
          "",
          "[Removed Lines]",
          "2243:             $loop_array = is_array($_POST['where_clause'])",
          "2246:             $using_key  = true;",
          "2247:             $is_insert  = isset($_POST['submit_type'])",
          "2253:             $loop_array = [];",
          "2256:                     $loop_array[] = $key;",
          "2260:             $using_key  = false;",
          "2261:             $is_insert  = true;",
          "2264:         $is_insertignore  = isset($_POST['submit_type'])",
          "2268:             $loop_array,",
          "2269:             $using_key,",
          "2270:             $is_insert,",
          "2271:             $is_insertignore,",
          "",
          "[Added Lines]",
          "2243:             $loopArray = is_array($_POST['where_clause'])",
          "2246:             $usingKey  = true;",
          "2247:             $isInsert  = isset($_POST['submit_type'])",
          "2253:             $loopArray = [];",
          "2256:                     $loopArray[] = $key;",
          "2260:             $usingKey  = false;",
          "2261:             $isInsert  = true;",
          "2264:         $isInsertIgnore  = isset($_POST['submit_type'])",
          "2268:             $loopArray,",
          "2269:             $usingKey,",
          "2270:             $isInsert,",
          "2271:             $isInsertIgnore,",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2315:     {",
          "2317:             . '.' . Util::backquote($GLOBALS['table']) . ' WHERE '",
          "2321:         $row = $this->dbi->fetchRow($res);",
          "2322:         $meta = $this->dbi->getFieldsMeta($res) ?? [];",
          "2326:             $res,",
          "2327:             count($meta),",
          "2328:             $meta,",
          "2329:             $row ?? [],",
          "2330:             true",
          "2331:         );",
          "2334:         }",
          "2337:     }",
          "",
          "[Removed Lines]",
          "2314:     public function setSessionForEditNext($one_where_clause)",
          "2316:         $local_query = 'SELECT * FROM ' . Util::backquote($GLOBALS['db'])",
          "2318:             . str_replace('` =', '` >', $one_where_clause) . ' LIMIT 1;';",
          "2320:         $res = $this->dbi->query($local_query);",
          "2325:         [$unique_condition, $clause_is_unique] = Util::getUniqueCondition(",
          "2332:         if (! empty($unique_condition)) {",
          "2333:             $_SESSION['edit_next'] = $unique_condition;",
          "2336:         unset($unique_condition, $clause_is_unique);",
          "",
          "[Added Lines]",
          "2314:     public function setSessionForEditNext($oneWhereClause)",
          "2316:         $localQuery = 'SELECT * FROM ' . Util::backquote($GLOBALS['db'])",
          "2318:             . str_replace('` =', '` >', $oneWhereClause) . ' LIMIT 1;';",
          "2320:         $res = $this->dbi->query($localQuery);",
          "2325:         [$uniqueCondition, $clauseIsUnique] = Util::getUniqueCondition(",
          "2332:         if (! empty($uniqueCondition)) {",
          "2333:             $_SESSION['edit_next'] = $uniqueCondition;",
          "2336:         unset($uniqueCondition, $clauseIsUnique);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2350:     {",
          "2352:             'new_insert',",
          "2353:             'same_insert',",
          "2354:             'edit_next',",
          "2355:         ];",
          "2356:         if (",
          "2357:             isset($_POST['after_insert'])",
          "2359:         ) {",
          "2361:         } elseif (! empty($GLOBALS['goto'])) {",
          "2362:             if (! preg_match('@^[a-z_]+\\.php$@', $GLOBALS['goto'])) {",
          "2365:                 if ($GLOBALS['goto'] === 'index.php?route=/sql') {",
          "2367:                 } else {",
          "2369:                 }",
          "2370:             } else {",
          "2372:             }",
          "2374:             if ($GLOBALS['goto'] === 'index.php?route=/database/sql' && strlen($GLOBALS['table']) > 0) {",
          "",
          "[Removed Lines]",
          "2349:     public function getGotoInclude($goto_include)",
          "2351:         $valid_options = [",
          "2358:             && in_array($_POST['after_insert'], $valid_options)",
          "2360:             $goto_include = '/table/change';",
          "2366:                     $goto_include = '/sql';",
          "2368:                     $goto_include = false;",
          "2371:                 $goto_include = $GLOBALS['goto'];",
          "",
          "[Added Lines]",
          "2349:     public function getGotoInclude($gotoInclude)",
          "2351:         $validOptions = [",
          "2358:             && in_array($_POST['after_insert'], $validOptions)",
          "2360:             $gotoInclude = '/table/change';",
          "2366:                     $gotoInclude = '/sql';",
          "2368:                     $gotoInclude = false;",
          "2371:                 $gotoInclude = $GLOBALS['goto'];",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2376:             }",
          "2377:         }",
          "2380:             if (strlen($GLOBALS['table']) === 0) {",
          "2382:             } else {",
          "2384:             }",
          "2385:         }",
          "2388:     }",
          "2398:     {",
          "2399:         if (isset($_POST['err_url'])) {",
          "2400:             return $_POST['err_url'];",
          "2401:         }",
          "2404:     }",
          "2416:     {",
          "2419:         } else {",
          "2421:         }",
          "2423:         return [",
          "2425:             . Util::backquote($GLOBALS['table'])",
          "2428:         ];",
          "2429:     }",
          "2441:     {",
          "2443:         if (! empty($GLOBALS['sql_query'])) {",
          "2446:         }",
          "2448:         $GLOBALS['sql_query'] = implode('; ', $query) . ';';",
          "",
          "[Removed Lines]",
          "2379:         if (! $goto_include) {",
          "2381:                 $goto_include = '/database/sql';",
          "2383:                 $goto_include = '/table/sql';",
          "2387:         return $goto_include;",
          "2397:     public function getErrorUrl(array $url_params)",
          "2403:         return Url::getFromRoute('/table/change', $url_params);",
          "2415:     public function buildSqlQuery($is_insertignore, array $query_fields, array $value_sets)",
          "2417:         if ($is_insertignore) {",
          "2418:             $insert_command = 'INSERT IGNORE ';",
          "2420:             $insert_command = 'INSERT ';",
          "2424:             $insert_command . 'INTO '",
          "2426:             . ' (' . implode(', ', $query_fields) . ') VALUES ('",
          "2427:             . implode('), (', $value_sets) . ')',",
          "2440:     public function executeSqlQuery(array $url_params, array $query)",
          "2442:         $return_to_sql_query = '';",
          "2444:             $url_params['sql_query'] = $GLOBALS['sql_query'];",
          "2445:             $return_to_sql_query = $GLOBALS['sql_query'];",
          "",
          "[Added Lines]",
          "2379:         if (! $gotoInclude) {",
          "2381:                 $gotoInclude = '/database/sql';",
          "2383:                 $gotoInclude = '/table/sql';",
          "2387:         return $gotoInclude;",
          "2397:     public function getErrorUrl(array $urlParams)",
          "2403:         return Url::getFromRoute('/table/change', $urlParams);",
          "2415:     public function buildSqlQuery($isInsertIgnore, array $queryFields, array $valueSets)",
          "2417:         if ($isInsertIgnore) {",
          "2418:             $insertCommand = 'INSERT IGNORE ';",
          "2420:             $insertCommand = 'INSERT ';",
          "2424:             $insertCommand . 'INTO '",
          "2426:             . ' (' . implode(', ', $queryFields) . ') VALUES ('",
          "2427:             . implode('), (', $valueSets) . ')',",
          "2440:     public function executeSqlQuery(array $urlParams, array $query)",
          "2442:         $returnToSqlQuery = '';",
          "2444:             $urlParams['sql_query'] = $GLOBALS['sql_query'];",
          "2445:             $returnToSqlQuery = $GLOBALS['sql_query'];",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2451:         $GLOBALS['display_query'] = $GLOBALS['sql_query'];",
          "2459:             if ($_POST['submit_type'] === 'showinsert') {",
          "2461:                 continue;",
          "2462:             }",
          "2464:             if ($GLOBALS['cfg']['IgnoreMultiSubmitErrors']) {",
          "2466:             } else {",
          "2468:             }",
          "2470:             if (! $result) {",
          "2472:             } else {",
          "2473:                 $tmp = @$this->dbi->affectedRows();",
          "2475:                 if ($tmp) {",
          "2477:                 }",
          "2479:                 unset($tmp);",
          "2488:                     }",
          "2493:                 }",
          "2495:                 $this->dbi->freeResult($result);",
          "2496:             }",
          "2499:         }",
          "2501:         return [",
          "2508:         ];",
          "2509:     }",
          "",
          "[Removed Lines]",
          "2453:         $total_affected_rows = 0;",
          "2454:         $last_messages = [];",
          "2455:         $warning_messages = [];",
          "2456:         $error_messages = [];",
          "2458:         foreach ($query as $single_query) {",
          "2460:                 $last_messages[] = Message::notice(__('Showing SQL query'));",
          "2465:                 $result = $this->dbi->tryQuery($single_query);",
          "2467:                 $result = $this->dbi->query($single_query);",
          "2471:                 $error_messages[] = $this->dbi->getError();",
          "2476:                     $total_affected_rows += $tmp;",
          "2481:                 $insert_id = $this->dbi->insertId();",
          "2482:                 if ($insert_id != 0) {",
          "2486:                     if ($total_affected_rows > 0) {",
          "2487:                         $insert_id += $total_affected_rows - 1;",
          "2490:                     $last_message = Message::notice(__('Inserted row id: %1$d'));",
          "2491:                     $last_message->addParam($insert_id);",
          "2492:                     $last_messages[] = $last_message;",
          "2498:             $warning_messages = $this->getWarningMessages();",
          "2502:             $url_params,",
          "2503:             $total_affected_rows,",
          "2504:             $last_messages,",
          "2505:             $warning_messages,",
          "2506:             $error_messages,",
          "2507:             $return_to_sql_query,",
          "",
          "[Added Lines]",
          "2453:         $totalAffectedRows = 0;",
          "2454:         $lastMessages = [];",
          "2455:         $warningMessages = [];",
          "2456:         $errorMessages = [];",
          "2458:         foreach ($query as $singleQuery) {",
          "2460:                 $lastMessages[] = Message::notice(__('Showing SQL query'));",
          "2465:                 $result = $this->dbi->tryQuery($singleQuery);",
          "2467:                 $result = $this->dbi->query($singleQuery);",
          "2471:                 $errorMessages[] = $this->dbi->getError();",
          "2476:                     $totalAffectedRows += $tmp;",
          "2481:                 $insertId = $this->dbi->insertId();",
          "2482:                 if ($insertId != 0) {",
          "2486:                     if ($totalAffectedRows > 0) {",
          "2487:                         $insertId += $totalAffectedRows - 1;",
          "2490:                     $lastMessage = Message::notice(__('Inserted row id: %1$d'));",
          "2491:                     $lastMessage->addParam($insertId);",
          "2492:                     $lastMessages[] = $lastMessage;",
          "2498:             $warningMessages = $this->getWarningMessages();",
          "2502:             $urlParams,",
          "2503:             $totalAffectedRows,",
          "2504:             $lastMessages,",
          "2505:             $warningMessages,",
          "2506:             $errorMessages,",
          "2507:             $returnToSqlQuery,",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2516:     private function getWarningMessages()",
          "2517:     {",
          "2519:         foreach ($this->dbi->getWarnings() as $warning) {",
          "2521:                 $warning['Level'] . ': #' . $warning['Code'] . ' ' . $warning['Message']",
          "2522:             );",
          "2523:         }",
          "2526:     }",
          "2538:     public function getDisplayValueForForeignTableColumn(",
          "2540:         array $map,",
          "2542:     ) {",
          "2545:         if (! is_array($foreigner)) {",
          "2546:             return '';",
          "2547:         }",
          "2550:             $foreigner['foreign_db'],",
          "2551:             $foreigner['foreign_table']",
          "2552:         );",
          "2556:                 . ' FROM ' . Util::backquote($foreigner['foreign_db'])",
          "2557:                 . '.' . Util::backquote($foreigner['foreign_table'])",
          "2558:                 . ' WHERE ' . Util::backquote($foreigner['foreign_field'])",
          "2560:             $dispresult = $this->dbi->tryQuery(",
          "2561:                 $dispsql,",
          "2562:                 DatabaseInterface::CONNECT_USER,",
          "",
          "[Removed Lines]",
          "2518:         $warning_essages = [];",
          "2520:             $warning_essages[] = Message::sanitize(",
          "2525:         return $warning_essages;",
          "2539:         $where_comparison,",
          "2541:         $relation_field",
          "2543:         $foreigner = $this->relation->searchColumnInForeigners($map, $relation_field);",
          "2549:         $display_field = $this->relation->getDisplayField(",
          "2554:         if (is_string($display_field) && strlen($display_field) > 0) {",
          "2555:             $dispsql = 'SELECT ' . Util::backquote($display_field)",
          "2559:                 . $where_comparison;",
          "",
          "[Added Lines]",
          "2518:         $warningMessages = [];",
          "2520:             $warningMessages[] = Message::sanitize(",
          "2525:         return $warningMessages;",
          "2539:         $whereComparison,",
          "2541:         $relationField",
          "2543:         $foreigner = $this->relation->searchColumnInForeigners($map, $relationField);",
          "2549:         $displayField = $this->relation->getDisplayField(",
          "2554:         if (is_string($displayField) && strlen($displayField) > 0) {",
          "2555:             $dispsql = 'SELECT ' . Util::backquote($displayField)",
          "2559:                 . $whereComparison;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2593:     public function getLinkForRelationalDisplayField(",
          "2594:         array $map,",
          "2597:         $dispval,",
          "2599:     ) {",
          "2602:         if (! is_array($foreigner)) {",
          "2603:             return '';",
          "",
          "[Removed Lines]",
          "2595:         $relation_field,",
          "2596:         $where_comparison,",
          "2598:         $relation_field_value",
          "2600:         $foreigner = $this->relation->searchColumnInForeigners($map, $relation_field);",
          "",
          "[Added Lines]",
          "2595:         $relationField,",
          "2596:         $whereComparison,",
          "2598:         $relationFieldValue",
          "2600:         $foreigner = $this->relation->searchColumnInForeigners($map, $relationField);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2610:                 ? ' title=\"' . htmlspecialchars($dispval) . '\"'",
          "2611:                 : '';",
          "2612:         } else {",
          "2614:         }",
          "2616:         $sqlQuery = 'SELECT * FROM '",
          "2617:             . Util::backquote($foreigner['foreign_db'])",
          "2618:             . '.' . Util::backquote($foreigner['foreign_table'])",
          "2619:             . ' WHERE ' . Util::backquote($foreigner['foreign_field'])",
          "2622:             'db'    => $foreigner['foreign_db'],",
          "2623:             'table' => $foreigner['foreign_table'],",
          "2624:             'pos'   => '0',",
          "2625:             'sql_signature' => Core::signSqlQuery($sqlQuery),",
          "2626:             'sql_query' => $sqlQuery,",
          "2627:         ];",
          "2630:         if ($_SESSION['tmpval']['relational_display'] === 'D') {",
          "",
          "[Removed Lines]",
          "2613:             $title = ' title=\"' . htmlspecialchars($relation_field_value) . '\"';",
          "2620:             . $where_comparison;",
          "2621:         $_url_params = [",
          "2628:         $output = '<a href=\"' . Url::getFromRoute('/sql', $_url_params) . '\"' . $title . '>';",
          "",
          "[Added Lines]",
          "2613:             $title = ' title=\"' . htmlspecialchars($relationFieldValue) . '\"';",
          "2620:             . $whereComparison;",
          "2621:         $urlParams = [",
          "2628:         $output = '<a href=\"' . Url::getFromRoute('/sql', $urlParams) . '\"' . $title . '>';",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2633:             $output .= ! empty($dispval) ? htmlspecialchars($dispval) : '';",
          "2634:         } else {",
          "2637:         }",
          "2639:         $output .= '</a>';",
          "",
          "[Removed Lines]",
          "2636:             $output .= htmlspecialchars($relation_field_value);",
          "",
          "[Added Lines]",
          "2636:             $output .= htmlspecialchars($relationFieldValue);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2660:         $db,",
          "2661:         $table,",
          "2662:         array $transformation,",
          "2664:         $file,",
          "2667:         $type",
          "2668:     ) {",
          "2672:             $whereClause = is_array($_POST['where_clause']) ? $_POST['where_clause'][0] : $_POST['where_clause'];",
          "2674:                 'db'            => $db,",
          "2675:                 'table'         => $table,",
          "2676:                 'where_clause_sign' => Core::signSqlQuery($whereClause),",
          "2677:                 'where_clause'  => $whereClause,",
          "2679:             ];",
          "2681:                 $transformation[$type . '_options'] ?? ''",
          "2682:             );",
          "2692:                         continue;",
          "2693:                     }",
          "2700:                             );",
          "2701:                 }",
          "2702:             }",
          "2703:         }",
          "2706:     }",
          "2722:     public function getCurrentValueAsAnArrayForMultipleEdit(",
          "2730:         $key",
          "2731:     ) {",
          "2734:         }",
          "2744:             return \"'\" . $hash . \"'\";",
          "2745:         }",
          "2749:             $uuid = $this->dbi->fetchValue('SELECT UUID()');",
          "",
          "[Removed Lines]",
          "2663:         array &$edited_values,",
          "2665:         $column_name,",
          "2666:         array $extra_data,",
          "2669:         $include_file = 'libraries/classes/Plugins/Transformations/' . $file;",
          "2670:         if (is_file($include_file)) {",
          "2673:             $_url_params = [",
          "2678:                 'transform_key' => $column_name,",
          "2680:             $transform_options = $this->transformations->getOptions(",
          "2683:             $transform_options['wrapper_link'] = Url::getCommon($_url_params);",
          "2684:             $transform_options['wrapper_params'] = $_url_params;",
          "2685:             $class_name = $this->transformations->getClassName($include_file);",
          "2686:             if (class_exists($class_name)) {",
          "2688:                 $transformation_plugin = new $class_name();",
          "2690:                 foreach ($edited_values as $cell_index => $curr_cell_edited_values) {",
          "2691:                     if (! isset($curr_cell_edited_values[$column_name])) {",
          "2695:                     $edited_values[$cell_index][$column_name]",
          "2696:                         = $extra_data['transformations'][$cell_index]",
          "2697:                             = $transformation_plugin->applyTransformation(",
          "2698:                                 $curr_cell_edited_values[$column_name],",
          "2699:                                 $transform_options",
          "2705:         return $extra_data;",
          "2723:         $multi_edit_funcs,",
          "2724:         $multi_edit_salt,",
          "2725:         $gis_from_text_functions,",
          "2726:         $current_value,",
          "2727:         $gis_from_wkb_functions,",
          "2728:         $func_optional_param,",
          "2729:         $func_no_param,",
          "2732:         if (empty($multi_edit_funcs[$key])) {",
          "2733:             return $current_value;",
          "2736:         if ($multi_edit_funcs[$key] === 'PHP_PASSWORD_HASH') {",
          "2742:             $hash = password_hash($current_value, PASSWORD_DEFAULT);",
          "2747:         if ($multi_edit_funcs[$key] === 'UUID') {",
          "",
          "[Added Lines]",
          "2663:         array &$editedValues,",
          "2665:         $columnName,",
          "2666:         array $extraData,",
          "2669:         $includeFile = 'libraries/classes/Plugins/Transformations/' . $file;",
          "2670:         if (is_file($includeFile)) {",
          "2673:             $urlParams = [",
          "2678:                 'transform_key' => $columnName,",
          "2680:             $transformOptions = $this->transformations->getOptions(",
          "2683:             $transformOptions['wrapper_link'] = Url::getCommon($urlParams);",
          "2684:             $transformOptions['wrapper_params'] = $urlParams;",
          "2685:             $className = $this->transformations->getClassName($includeFile);",
          "2686:             if (class_exists($className)) {",
          "2688:                 $transformationPlugin = new $className();",
          "2690:                 foreach ($editedValues as $cellIndex => $currCellEditedValues) {",
          "2691:                     if (! isset($currCellEditedValues[$columnName])) {",
          "2695:                     $editedValues[$cellIndex][$columnName]",
          "2696:                         = $extraData['transformations'][$cellIndex]",
          "2697:                             = $transformationPlugin->applyTransformation(",
          "2698:                                 $currCellEditedValues[$columnName],",
          "2699:                                 $transformOptions",
          "2705:         return $extraData;",
          "2723:         $multiEditFuncs,",
          "2724:         $multiEditSalt,",
          "2725:         $gisFromTextFunctions,",
          "2726:         $currentValue,",
          "2727:         $gisFromWkbFunctions,",
          "2728:         $funcOptionalParam,",
          "2729:         $funcNoParam,",
          "2732:         if (empty($multiEditFuncs[$key])) {",
          "2733:             return $currentValue;",
          "2736:         if ($multiEditFuncs[$key] === 'PHP_PASSWORD_HASH') {",
          "2742:             $hash = password_hash($currentValue, PASSWORD_DEFAULT);",
          "2747:         if ($multiEditFuncs[$key] === 'UUID') {",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2752:         }",
          "2754:         if (",
          "2758:         ) {",
          "2767:         }",
          "2769:         if (",
          "2773:         ) {",
          "2774:             if (",
          "2782:             ) {",
          "2785:             }",
          "2788:         }",
          "2791:     }",
          "2813:     public function getQueryValuesForInsertAndUpdateInMultipleEdit(",
          "2824:         $key,",
          "2826:     ) {",
          "2836:                     );",
          "2837:                 }",
          "2838:             }",
          "2839:         } elseif (",
          "2842:         ) {",
          "2850:         } elseif (",
          "2856:         ) {",
          "2860:             if (",
          "2863:             ) {",
          "2867:             }",
          "2868:         }",
          "2870:         return [",
          "2873:         ];",
          "2874:     }",
          "2896:     public function getCurrentValueForDifferentTypes(",
          "2898:         $key,",
          "2902:         $rownumber,",
          "2909:         $table,",
          "2911:     ) {",
          "2913:         if (",
          "2917:         ) {",
          "2919:                 'SELECT * FROM ' . Util::backquote($table)",
          "2921:             );",
          "2922:         }",
          "2928:                 . \"'\";",
          "2929:         } else {",
          "2933:             } else {",
          "2934:                 $type = '';",
          "2935:             }",
          "2942:                 } else {",
          "2944:                 }",
          "2945:             } elseif ($type === 'set') {",
          "2946:                 if (! empty($_POST['fields']['multi_edit'][$rownumber][$key])) {",
          "2948:                         ',',",
          "2949:                         $_POST['fields']['multi_edit'][$rownumber][$key]",
          "2950:                     );",
          "2953:                 } else {",
          "2955:                 }",
          "2956:             } elseif ($type === 'protected') {",
          "",
          "[Removed Lines]",
          "2755:             (in_array($multi_edit_funcs[$key], $gis_from_text_functions)",
          "2756:             && substr($current_value, 0, 3) == \"'''\")",
          "2757:             || in_array($multi_edit_funcs[$key], $gis_from_wkb_functions)",
          "2760:             $current_value = mb_substr($current_value, 1, -1);",
          "2762:             $current_value = str_replace(\"''\", \"'\", $current_value);",
          "2764:             $current_value = str_replace(\"\\'\", \"'\", $current_value);",
          "2766:             return $multi_edit_funcs[$key] . '(' . $current_value . ')';",
          "2770:             ! in_array($multi_edit_funcs[$key], $func_no_param)",
          "2771:             || ($current_value != \"''\"",
          "2772:             && in_array($multi_edit_funcs[$key], $func_optional_param))",
          "2775:                 (isset($multi_edit_salt[$key])",
          "2776:                 && ($multi_edit_funcs[$key] === 'AES_ENCRYPT'",
          "2777:                 || $multi_edit_funcs[$key] === 'AES_DECRYPT'))",
          "2778:                 || (! empty($multi_edit_salt[$key])",
          "2779:                 && ($multi_edit_funcs[$key] === 'DES_ENCRYPT'",
          "2780:                 || $multi_edit_funcs[$key] === 'DES_DECRYPT'",
          "2781:                 || $multi_edit_funcs[$key] === 'ENCRYPT'))",
          "2783:                 return $multi_edit_funcs[$key] . '(' . $current_value . \",'\"",
          "2784:                     . $this->dbi->escapeString($multi_edit_salt[$key]) . \"')\";",
          "2787:             return $multi_edit_funcs[$key] . '(' . $current_value . ')';",
          "2790:         return $multi_edit_funcs[$key] . '()';",
          "2814:         $multi_edit_columns_name,",
          "2815:         $multi_edit_columns_null,",
          "2816:         $current_value,",
          "2817:         $multi_edit_columns_prev,",
          "2818:         $multi_edit_funcs,",
          "2819:         $is_insert,",
          "2820:         $query_values,",
          "2821:         $query_fields,",
          "2822:         $current_value_as_an_array,",
          "2823:         $value_sets,",
          "2825:         $multi_edit_columns_null_prev",
          "2828:         if ($is_insert) {",
          "2830:             if (strlen($current_value_as_an_array) > 0) {",
          "2831:                 $query_values[] = $current_value_as_an_array;",
          "2833:                 if (empty($value_sets)) {",
          "2834:                     $query_fields[] = Util::backquote(",
          "2835:                         $multi_edit_columns_name[$key]",
          "2840:             ! empty($multi_edit_columns_null_prev[$key])",
          "2841:             && ! isset($multi_edit_columns_null[$key])",
          "2847:             $query_values[]",
          "2848:                 = Util::backquote($multi_edit_columns_name[$key])",
          "2849:                 . ' = ' . $current_value_as_an_array;",
          "2851:             ! (empty($multi_edit_funcs[$key])",
          "2852:             && isset($multi_edit_columns_prev[$key])",
          "2853:             && (($current_value === \"'\" . $this->dbi->escapeString($multi_edit_columns_prev[$key]) . \"'\")",
          "2854:             || ($current_value === '0x' . $multi_edit_columns_prev[$key])))",
          "2855:             && ! empty($current_value)",
          "2861:                 empty($multi_edit_columns_null_prev[$key])",
          "2862:                 || empty($multi_edit_columns_null[$key])",
          "2864:                  $query_values[]",
          "2865:                      = Util::backquote($multi_edit_columns_name[$key])",
          "2866:                     . ' = ' . $current_value_as_an_array;",
          "2871:             $query_values,",
          "2872:             $query_fields,",
          "2897:         $possibly_uploaded_val,",
          "2899:         ?array $multi_edit_columns_type,",
          "2900:         $current_value,",
          "2901:         ?array $multi_edit_auto_increment,",
          "2903:         $multi_edit_columns_name,",
          "2904:         $multi_edit_columns_null,",
          "2905:         $multi_edit_columns_null_prev,",
          "2906:         $is_insert,",
          "2907:         $using_key,",
          "2908:         $where_clause,",
          "2910:         $multi_edit_funcs",
          "2914:             $is_insert",
          "2915:             && $using_key && isset($multi_edit_columns_type)",
          "2916:             && is_array($multi_edit_columns_type) && ! empty($where_clause)",
          "2918:             $protected_row = $this->dbi->fetchSingleRow(",
          "2920:                 . ' WHERE ' . $where_clause . ';'",
          "2924:         if ($possibly_uploaded_val !== false) {",
          "2925:             $current_value = $possibly_uploaded_val;",
          "2926:         } elseif (! empty($multi_edit_funcs[$key])) {",
          "2927:             $current_value = \"'\" . $this->dbi->escapeString($current_value)",
          "2931:             if (isset($multi_edit_columns_type[$key])) {",
          "2932:                 $type = $multi_edit_columns_type[$key];",
          "2937:             if ($type !== 'protected' && $type !== 'set' && strlen($current_value) === 0) {",
          "2940:                 if (isset($multi_edit_auto_increment, $multi_edit_auto_increment[$key])) {",
          "2941:                     $current_value = 'NULL';",
          "2943:                     $current_value = \"''\";",
          "2947:                     $current_value = implode(",
          "2951:                     $current_value = \"'\"",
          "2952:                         . $this->dbi->escapeString($current_value) . \"'\";",
          "2954:                      $current_value = \"''\";",
          "",
          "[Added Lines]",
          "2755:             (in_array($multiEditFuncs[$key], $gisFromTextFunctions)",
          "2756:             && substr($currentValue, 0, 3) == \"'''\")",
          "2757:             || in_array($multiEditFuncs[$key], $gisFromWkbFunctions)",
          "2760:             $currentValue = mb_substr($currentValue, 1, -1);",
          "2762:             $currentValue = str_replace(\"''\", \"'\", $currentValue);",
          "2764:             $currentValue = str_replace(\"\\'\", \"'\", $currentValue);",
          "2766:             return $multiEditFuncs[$key] . '(' . $currentValue . ')';",
          "2770:             ! in_array($multiEditFuncs[$key], $funcNoParam)",
          "2771:             || ($currentValue != \"''\"",
          "2772:             && in_array($multiEditFuncs[$key], $funcOptionalParam))",
          "2775:                 (isset($multiEditSalt[$key])",
          "2776:                 && ($multiEditFuncs[$key] === 'AES_ENCRYPT'",
          "2777:                 || $multiEditFuncs[$key] === 'AES_DECRYPT'))",
          "2778:                 || (! empty($multiEditSalt[$key])",
          "2779:                 && ($multiEditFuncs[$key] === 'DES_ENCRYPT'",
          "2780:                 || $multiEditFuncs[$key] === 'DES_DECRYPT'",
          "2781:                 || $multiEditFuncs[$key] === 'ENCRYPT'))",
          "2783:                 return $multiEditFuncs[$key] . '(' . $currentValue . \",'\"",
          "2784:                     . $this->dbi->escapeString($multiEditSalt[$key]) . \"')\";",
          "2787:             return $multiEditFuncs[$key] . '(' . $currentValue . ')';",
          "2790:         return $multiEditFuncs[$key] . '()';",
          "2814:         $multiEditColumnsName,",
          "2815:         $multiEditColumnsNull,",
          "2816:         $currentValue,",
          "2817:         $multiEditColumnsPrev,",
          "2818:         $multiEditFuncs,",
          "2819:         $isInsert,",
          "2820:         $queryValues,",
          "2821:         $queryFields,",
          "2822:         $currentValueAsAnArray,",
          "2823:         $valueSets,",
          "2825:         $multiEditColumnsNullPrev",
          "2828:         if ($isInsert) {",
          "2830:             if (strlen($currentValueAsAnArray) > 0) {",
          "2831:                 $queryValues[] = $currentValueAsAnArray;",
          "2833:                 if (empty($valueSets)) {",
          "2834:                     $queryFields[] = Util::backquote(",
          "2835:                         $multiEditColumnsName[$key]",
          "2840:             ! empty($multiEditColumnsNullPrev[$key])",
          "2841:             && ! isset($multiEditColumnsNull[$key])",
          "2847:             $queryValues[]",
          "2848:                 = Util::backquote($multiEditColumnsName[$key])",
          "2849:                 . ' = ' . $currentValueAsAnArray;",
          "2851:             ! (empty($multiEditFuncs[$key])",
          "2852:             && isset($multiEditColumnsPrev[$key])",
          "2853:             && (($currentValue === \"'\" . $this->dbi->escapeString($multiEditColumnsPrev[$key]) . \"'\")",
          "2854:             || ($currentValue === '0x' . $multiEditColumnsPrev[$key])))",
          "2855:             && ! empty($currentValue)",
          "2861:                 empty($multiEditColumnsNullPrev[$key])",
          "2862:                 || empty($multiEditColumnsNull[$key])",
          "2864:                  $queryValues[]",
          "2865:                      = Util::backquote($multiEditColumnsName[$key])",
          "2866:                     . ' = ' . $currentValueAsAnArray;",
          "2871:             $queryValues,",
          "2872:             $queryFields,",
          "2897:         $possiblyUploadedVal,",
          "2899:         ?array $multiEditColumnsType,",
          "2900:         $currentValue,",
          "2901:         ?array $multiEditAutoIncrement,",
          "2903:         $multiEditColumnsName,",
          "2904:         $multiEditColumnsNull,",
          "2905:         $multiEditColumnsNullPrev,",
          "2906:         $isInsert,",
          "2907:         $usingKey,",
          "2908:         $whereClause,",
          "2910:         $multiEditFuncs",
          "2914:             $isInsert",
          "2915:             && $usingKey && isset($multiEditColumnsType)",
          "2916:             && is_array($multiEditColumnsType) && ! empty($whereClause)",
          "2918:             $protectedRow = $this->dbi->fetchSingleRow(",
          "2920:                 . ' WHERE ' . $whereClause . ';'",
          "2924:         if ($possiblyUploadedVal !== false) {",
          "2925:             $currentValue = $possiblyUploadedVal;",
          "2926:         } elseif (! empty($multiEditFuncs[$key])) {",
          "2927:             $currentValue = \"'\" . $this->dbi->escapeString($currentValue)",
          "2931:             if (isset($multiEditColumnsType[$key])) {",
          "2932:                 $type = $multiEditColumnsType[$key];",
          "2937:             if ($type !== 'protected' && $type !== 'set' && strlen($currentValue) === 0) {",
          "2940:                 if (isset($multiEditAutoIncrement, $multiEditAutoIncrement[$key])) {",
          "2941:                     $currentValue = 'NULL';",
          "2943:                     $currentValue = \"''\";",
          "2947:                     $currentValue = implode(",
          "2951:                     $currentValue = \"'\"",
          "2952:                         . $this->dbi->escapeString($currentValue) . \"'\";",
          "2954:                      $currentValue = \"''\";",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2968:                 } else {",
          "2970:                 }",
          "2971:             } elseif ($type === 'hex') {",
          "2974:                 }",
          "2975:             } elseif ($type === 'bit') {",
          "2978:             } elseif (",
          "2979:                 ! ($type === 'datetime' || $type === 'timestamp')",
          "2982:             ) {",
          "2984:                     . \"'\";",
          "2985:             }",
          "",
          "[Removed Lines]",
          "2965:                 if (! empty($protected_row[$multi_edit_columns_name[$key]])) {",
          "2966:                     $current_value = '0x'",
          "2967:                         . bin2hex($protected_row[$multi_edit_columns_name[$key]]);",
          "2969:                     $current_value = '';",
          "2972:                 if (substr($current_value, 0, 2) != '0x') {",
          "2973:                     $current_value = '0x' . $current_value;",
          "2976:                 $current_value = (string) preg_replace('/[^01]/', '0', $current_value);",
          "2977:                 $current_value = \"b'\" . $this->dbi->escapeString($current_value) . \"'\";",
          "2980:                 || ($current_value !== 'CURRENT_TIMESTAMP'",
          "2981:                     && $current_value !== 'current_timestamp()')",
          "2983:                 $current_value = \"'\" . $this->dbi->escapeString($current_value)",
          "",
          "[Added Lines]",
          "2965:                 if (! empty($protectedRow[$multiEditColumnsName[$key]])) {",
          "2966:                     $currentValue = '0x'",
          "2967:                         . bin2hex($protectedRow[$multiEditColumnsName[$key]]);",
          "2969:                     $currentValue = '';",
          "2972:                 if (substr($currentValue, 0, 2) != '0x') {",
          "2973:                     $currentValue = '0x' . $currentValue;",
          "2976:                 $currentValue = (string) preg_replace('/[^01]/', '0', $currentValue);",
          "2977:                 $currentValue = \"b'\" . $this->dbi->escapeString($currentValue) . \"'\";",
          "2980:                 || ($currentValue !== 'CURRENT_TIMESTAMP'",
          "2981:                     && $currentValue !== 'current_timestamp()')",
          "2983:                 $currentValue = \"'\" . $this->dbi->escapeString($currentValue)",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2990:             if (",
          "2993:             ) {",
          "2995:             }",
          "2998:             if (",
          "3002:             ) {",
          "3004:             }",
          "3005:         }",
          "3008:     }",
          "3021:     public function verifyWhetherValueCanBeTruncatedAndAppendExtraData(",
          "3022:         $db,",
          "3023:         $table,",
          "3026:     ) {",
          "3031:             . ' FROM ' . Util::backquote($db) . '.'",
          "3032:             . Util::backquote($table)",
          "3033:             . ' WHERE ' . $_POST['where_clause'][0];",
          "3039:         $row = $this->dbi->fetchRow($result);",
          "3041:         if ($row) {",
          "3043:             if ($meta->isTimeType()) {",
          "3045:             } elseif ($meta->isBinary()) {",
          "3047:             }",
          "3051:         }",
          "3053:         $this->dbi->freeResult($result);",
          "",
          "[Removed Lines]",
          "2991:                 ! empty($multi_edit_columns_null[$key])",
          "2992:                 && ($current_value == \"''\" || $current_value == '')",
          "2994:                 $current_value = 'NULL';",
          "2999:                 empty($current_value)",
          "3000:                 && ! empty($multi_edit_columns_null_prev[$key])",
          "3001:                 && ! isset($multi_edit_columns_null[$key])",
          "3003:                 $current_value = \"''\";",
          "3007:         return $current_value;",
          "3024:         $column_name,",
          "3025:         array &$extra_data",
          "3027:         $extra_data['isNeedToRecheck'] = false;",
          "3029:         $sql_for_real_value = 'SELECT ' . Util::backquote($table) . '.'",
          "3030:             . Util::backquote($column_name)",
          "3035:         $result = $this->dbi->tryQuery($sql_for_real_value);",
          "3036:         $fields_meta = $this->dbi->getFieldsMeta($result) ?? [];",
          "3038:         $meta = $fields_meta[0];",
          "3042:             $new_value = $row[0];",
          "3044:                 $new_value = Util::addMicroseconds($new_value);",
          "3046:                 $new_value = '0x' . bin2hex($new_value);",
          "3049:             $extra_data['isNeedToRecheck'] = true;",
          "3050:             $extra_data['truncatableFieldValue'] = $new_value;",
          "",
          "[Added Lines]",
          "2991:                 ! empty($multiEditColumnsNull[$key])",
          "2992:                 && ($currentValue == \"''\" || $currentValue == '')",
          "2994:                 $currentValue = 'NULL';",
          "2999:                 empty($currentValue)",
          "3000:                 && ! empty($multiEditColumnsNullPrev[$key])",
          "3001:                 && ! isset($multiEditColumnsNull[$key])",
          "3003:                 $currentValue = \"''\";",
          "3007:         return $currentValue;",
          "3024:         $columnName,",
          "3025:         array &$extraData",
          "3027:         $extraData['isNeedToRecheck'] = false;",
          "3029:         $sqlForRealValue = 'SELECT ' . Util::backquote($table) . '.'",
          "3030:             . Util::backquote($columnName)",
          "3035:         $result = $this->dbi->tryQuery($sqlForRealValue);",
          "3036:         $fieldsMeta = $this->dbi->getFieldsMeta($result) ?? [];",
          "3038:         $meta = $fieldsMeta[0];",
          "3042:             $newValue = $row[0];",
          "3044:                 $newValue = Util::addMicroseconds($newValue);",
          "3046:                 $newValue = '0x' . bin2hex($newValue);",
          "3049:             $extraData['isNeedToRecheck'] = true;",
          "3050:             $extraData['truncatableFieldValue'] = $newValue;",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3081:     {",
          "3082:         if (isset($_POST['where_clause'])) {",
          "3084:         }",
          "3086:         if (isset($_SESSION['edit_next'])) {",
          "3088:             unset($_SESSION['edit_next']);",
          "3090:         }",
          "3092:         if (isset($_POST['ShowFunctionFields'])) {",
          "",
          "[Removed Lines]",
          "3080:     public function determineInsertOrEdit($where_clause, $db, $table): array",
          "3083:             $where_clause = $_POST['where_clause'];",
          "3087:             $where_clause = $_SESSION['edit_next'];",
          "3089:             $after_insert = 'edit_next';",
          "",
          "[Added Lines]",
          "3080:     public function determineInsertOrEdit($whereClause, $db, $table): array",
          "3083:             $whereClause = $_POST['where_clause'];",
          "3087:             $whereClause = $_SESSION['edit_next'];",
          "3089:             $afterInsert = 'edit_next';",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3099:         }",
          "3101:         if (isset($_POST['after_insert'])) {",
          "3103:         }",
          "3110:                 = $this->analyzeWhereClauses(",
          "3112:                     $table,",
          "3113:                     $db",
          "3114:                 );",
          "3115:         } else {",
          "3119:             [$result, $rows] = $this->loadFirstRow($table, $db);",
          "3123:         }",
          "",
          "[Removed Lines]",
          "3102:             $after_insert = $_POST['after_insert'];",
          "3105:         if (isset($where_clause)) {",
          "3107:             $insert_mode = false;",
          "3108:             $where_clause_array = $this->getWhereClauseArray($where_clause);",
          "3109:             [$where_clauses, $result, $rows, $found_unique_key]",
          "3111:                     $where_clause_array,",
          "3117:             $insert_mode = true;",
          "3118:             $where_clause = null;",
          "3120:             $where_clauses = null;",
          "3121:             $where_clause_array = [];",
          "3122:             $found_unique_key = false;",
          "",
          "[Added Lines]",
          "3102:             $afterInsert = $_POST['after_insert'];",
          "3105:         if (isset($whereClause)) {",
          "3107:             $insertMode = false;",
          "3108:             $whereClauseArray = $this->getWhereClauseArray($whereClause);",
          "3109:             [$whereClauses, $result, $rows, $foundUniqueKey]",
          "3111:                     $whereClauseArray,",
          "3117:             $insertMode = true;",
          "3118:             $whereClause = null;",
          "3120:             $whereClauses = null;",
          "3121:             $whereClauseArray = [];",
          "3122:             $foundUniqueKey = false;",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "3128:             isset($_POST['default_action'])",
          "3129:             && $_POST['default_action'] === 'insert'",
          "3130:         ) {",
          "3132:         }",
          "3134:         return [",
          "3139:             $result,",
          "3140:             $rows,",
          "3143:         ];",
          "3144:     }",
          "",
          "[Removed Lines]",
          "3131:             $where_clause = $where_clauses = null;",
          "3135:             $insert_mode,",
          "3136:             $where_clause,",
          "3137:             $where_clause_array,",
          "3138:             $where_clauses,",
          "3141:             $found_unique_key,",
          "3142:             $after_insert ?? null,",
          "",
          "[Added Lines]",
          "3131:             $whereClause = $whereClauses = null;",
          "3135:             $insertMode,",
          "3136:             $whereClause,",
          "3137:             $whereClauseArray,",
          "3138:             $whereClauses,",
          "3141:             $foundUniqueKey,",
          "3142:             $afterInsert ?? null,",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "3154:     public function getCommentsMap($db, $table)",
          "3155:     {",
          "3158:         if ($GLOBALS['cfg']['ShowPropertyComments']) {",
          "3160:         }",
          "3163:     }",
          "",
          "[Removed Lines]",
          "3156:         $comments_map = [];",
          "3159:             $comments_map = $this->relation->getComments($db, $table);",
          "3162:         return $comments_map;",
          "",
          "[Added Lines]",
          "3156:         $commentsMap = [];",
          "3159:             $commentsMap = $this->relation->getComments($db, $table);",
          "3162:         return $commentsMap;",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "3180:             'db' => $db,",
          "3181:             'sql_query' => $_POST['sql_query'],",
          "3182:         ];",
          "3184:         if (strpos($goto, 'tbl_') === 0 || strpos($goto, 'index.php?route=/table') === 0) {",
          "3186:         }",
          "3189:     }",
          "",
          "[Removed Lines]",
          "3179:         $url_params = [",
          "3185:             $url_params['table'] = $table;",
          "3188:         return $url_params;",
          "",
          "[Added Lines]",
          "3179:         $urlParams = [",
          "3185:             $urlParams['table'] = $table;",
          "3188:         return $urlParams;",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "3212:     {",
          "3213:         return '<input type=\"checkbox\"'",
          "3214:                 . ($checked ? ' checked=\"checked\"' : '')",
          "3218:                 . __('Ignore')",
          "3219:                 . '</label><br>' . \"\\n\";",
          "3220:     }",
          "",
          "[Removed Lines]",
          "3211:     public function getHtmlForIgnoreOption($row_id, $checked = true)",
          "3215:                 . ' name=\"insert_ignore_' . $row_id . '\"'",
          "3216:                 . ' id=\"insert_ignore_' . $row_id . '\">'",
          "3217:                 . '<label for=\"insert_ignore_' . $row_id . '\">'",
          "",
          "[Added Lines]",
          "3211:     public function getHtmlForIgnoreOption($rowId, $checked = true)",
          "3215:                 . ' name=\"insert_ignore_' . $rowId . '\"'",
          "3216:                 . ' id=\"insert_ignore_' . $rowId . '\">'",
          "3217:                 . '<label for=\"insert_ignore_' . $rowId . '\">'",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "3229:     {",
          "3230:         return '<tr class=\"noclick\">'",
          "3231:             . '<td '",
          "3232:             . 'class=\"text-center\">'",
          "3233:             . $column['Field_title']",
          "3235:             . '\" value=\"' . $column['Field_html'] . '\">'",
          "3236:             . '</td>';",
          "3237:     }",
          "",
          "[Removed Lines]",
          "3228:     private function getHtmlForFunctionOption(array $column, $column_name_appendix): string",
          "3234:             . '<input type=\"hidden\" name=\"fields_name' . $column_name_appendix",
          "",
          "[Added Lines]",
          "3228:     private function getHtmlForFunctionOption(array $column, $columnNameAppendix): string",
          "3234:             . '<input type=\"hidden\" name=\"fields_name' . $columnNameAppendix",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "3262:     {",
          "3266:         }",
          "3271:         }",
          "3276:     }",
          "3312:     private function getHtmlForInsertEditFormColumn(",
          "3319:         $jsvkey,",
          "3320:         $vkey,",
          "3324:         &$tabindex,",
          "3328:         array $foreigners,",
          "3331:         $table,",
          "3332:         $db,",
          "3337:         array $repopulate,",
          "3340:     ) {",
          "3342:         $readOnly = false;",
          "3344:         if (! isset($column['processed'])) {",
          "3345:             $column = $this->analyzeTableColumnsArray(",
          "3346:                 $column,",
          "3349:             );",
          "3350:         }",
          "3356:         }",
          "3359:             = Util::extractColumnSpec($column['Type']);",
          "3361:         if ($column['len'] === -1) {",
          "3362:             $column['len'] = $this->dbi->fieldLen(",
          "3365:             );",
          "",
          "[Removed Lines]",
          "3261:     public function getHtmlForInsertEditFormHeader($has_blob_field, $is_upload)",
          "3263:         $html_output = '<form id=\"insertForm\" class=\"lock-page ';",
          "3264:         if ($has_blob_field && $is_upload) {",
          "3265:             $html_output .= 'disableAjax';",
          "3268:         $html_output .= '\" method=\"post\" action=\"' . Url::getFromRoute('/table/replace') . '\" name=\"insertForm\" ';",
          "3269:         if ($is_upload) {",
          "3270:             $html_output .= ' enctype=\"multipart/form-data\"';",
          "3273:         $html_output .= '>';",
          "3275:         return $html_output;",
          "3313:         array $table_columns,",
          "3314:         $column_number,",
          "3315:         array $comments_map,",
          "3316:         $timestamp_seen,",
          "3317:         $current_result,",
          "3318:         $chg_evt_handler,",
          "3321:         $insert_mode,",
          "3322:         array $current_row,",
          "3323:         &$o_rows,",
          "3325:         $columns_cnt,",
          "3326:         $is_upload,",
          "3327:         $tabindex_for_function,",
          "3329:         $tabindex_for_null,",
          "3330:         $tabindex_for_value,",
          "3333:         $row_id,",
          "3334:         $biggest_max_file_size,",
          "3335:         $default_char_editing,",
          "3336:         $text_dir,",
          "3338:         array $column_mime,",
          "3339:         $where_clause",
          "3341:         $column = $table_columns[$column_number];",
          "3347:                 $comments_map,",
          "3348:                 $timestamp_seen",
          "3352:         $as_is = false;",
          "3353:         if (! empty($repopulate) && ! empty($current_row)) {",
          "3354:             $current_row[$column['Field']] = $repopulate[$column['Field_md5']];",
          "3355:             $as_is = true;",
          "3358:         $extracted_columnspec",
          "3363:                 $current_result,",
          "3364:                 $column_number",
          "",
          "[Added Lines]",
          "3261:     public function getHtmlForInsertEditFormHeader($hasBlobField, $isUpload)",
          "3263:         $htmlOutput = '<form id=\"insertForm\" class=\"lock-page ';",
          "3264:         if ($hasBlobField && $isUpload) {",
          "3265:             $htmlOutput .= 'disableAjax';",
          "3268:         $htmlOutput .= '\" method=\"post\" action=\"' . Url::getFromRoute('/table/replace') . '\" name=\"insertForm\" ';",
          "3269:         if ($isUpload) {",
          "3270:             $htmlOutput .= ' enctype=\"multipart/form-data\"';",
          "3273:         $htmlOutput .= '>';",
          "3275:         return $htmlOutput;",
          "3313:         array $tableColumns,",
          "3314:         $columnNumber,",
          "3315:         array $commentsMap,",
          "3316:         $timestampSeen,",
          "3317:         $currentResult,",
          "3318:         $chgEvtHandler,",
          "3321:         $insertMode,",
          "3322:         array $currentRow,",
          "3323:         &$oRows,",
          "3325:         $columnsCnt,",
          "3326:         $isUpload,",
          "3327:         $tabindexForFunction,",
          "3329:         $tabindexForNull,",
          "3330:         $tabindexForValue,",
          "3333:         $rowId,",
          "3334:         $biggestMaxFileSize,",
          "3335:         $defaultCharEditing,",
          "3336:         $textDir,",
          "3338:         array $columnMime,",
          "3339:         $whereClause",
          "3341:         $column = $tableColumns[$columnNumber];",
          "3347:                 $commentsMap,",
          "3348:                 $timestampSeen",
          "3352:         $asIs = false;",
          "3353:         if (! empty($repopulate) && ! empty($currentRow)) {",
          "3354:             $currentRow[$column['Field']] = $repopulate[$column['Field_md5']];",
          "3355:             $asIs = true;",
          "3358:         $extractedColumnspec",
          "3363:                 $currentResult,",
          "3364:                 $columnNumber",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "3371:         }",
          "3375:             . \"=\\\"return verificationsAfterFieldChange('\"",
          "3376:             . Sanitize::escapeJsString($column['Field_md5']) . \"', '\"",
          "3377:             . Sanitize::escapeJsString($jsvkey) . \"','\" . $column['pma_type'] . \"')\\\"\";",
          "3384:             $column['Default'] = date('Y-m-d H:i:s', time());",
          "3385:         }",
          "3388:             $column,",
          "3390:         );",
          "3392:         if ($GLOBALS['cfg']['ShowFieldTypesInDataEditView']) {",
          "3394:         }",
          "3404:             [",
          "3408:                 $data,",
          "3410:             ]",
          "3411:                 = $this->getSpecialCharsAndBackupFieldForExistingRow(",
          "3413:                     $column,",
          "3419:                 );",
          "3420:         } else {",
          "",
          "[Removed Lines]",
          "3374:         $onChangeClause = $chg_evt_handler",
          "3381:         $column_name_appendix = $vkey . '[' . $column['Field_md5'] . ']';",
          "3383:         if ($column['Type'] === 'datetime' && ! isset($column['Default']) && $insert_mode) {",
          "3387:         $html_output = $this->getHtmlForFunctionOption(",
          "3389:             $column_name_appendix",
          "3393:             $html_output .= $this->getHtmlForInsertEditColumnType($column);",
          "3397:         $gis_data_types = Gis::getDataTypes();",
          "3400:         $real_null_value = false;",
          "3401:         $special_chars_encoded = '';",
          "3402:         if (! empty($current_row)) {",
          "3405:                 $real_null_value,",
          "3406:                 $special_chars_encoded,",
          "3407:                 $special_chars,",
          "3409:                 $backup_field,",
          "3412:                     $current_row,",
          "3414:                     $extracted_columnspec,",
          "3415:                     $real_null_value,",
          "3416:                     $gis_data_types,",
          "3417:                     $column_name_appendix,",
          "3418:                     $as_is",
          "",
          "[Added Lines]",
          "3374:         $onChangeClause = $chgEvtHandler",
          "3381:         $columnNameAppendix = $vkey . '[' . $column['Field_md5'] . ']';",
          "3383:         if ($column['Type'] === 'datetime' && ! isset($column['Default']) && $insertMode) {",
          "3387:         $htmlOutput = $this->getHtmlForFunctionOption(",
          "3389:             $columnNameAppendix",
          "3393:             $htmlOutput .= $this->getHtmlForInsertEditColumnType($column);",
          "3397:         $gisDataTypes = Gis::getDataTypes();",
          "3400:         $realNullValue = false;",
          "3401:         $specialCharsEncoded = '';",
          "3402:         if (! empty($currentRow)) {",
          "3405:                 $realNullValue,",
          "3406:                 $specialCharsEncoded,",
          "3407:                 $specialChars,",
          "3409:                 $backupField,",
          "3412:                     $currentRow,",
          "3414:                     $extractedColumnspec,",
          "3415:                     $realNullValue,",
          "3416:                     $gisDataTypes,",
          "3417:                     $columnNameAppendix,",
          "3418:                     $asIs",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "3426:             }",
          "3428:             [",
          "3430:                 $data,",
          "3434:             ]",
          "3435:                 = $this->getSpecialCharsAndBackupFieldForInsertingMode(",
          "3436:                     $tmp,",
          "3438:                 );",
          "3439:             unset($tmp);",
          "3440:         }",
          "3443:         $tabindex = $idindex;",
          "",
          "[Removed Lines]",
          "3429:                 $real_null_value,",
          "3431:                 $special_chars,",
          "3432:                 $backup_field,",
          "3433:                 $special_chars_encoded,",
          "3437:                     $real_null_value",
          "3442:         $idindex = ($o_rows * $columns_cnt) + $column_number + 1;",
          "3446:         $no_support_types = Util::unsupportedDatatypes();",
          "",
          "[Added Lines]",
          "3429:                 $realNullValue,",
          "3431:                 $specialChars,",
          "3432:                 $backupField,",
          "3433:                 $specialCharsEncoded,",
          "3437:                     $realNullValue",
          "3442:         $idindex = ($oRows * $columnsCnt) + $columnNumber + 1;",
          "3446:         $noSupportTypes = Util::unsupportedDatatypes();",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "3455:             ''",
          "3456:         );",
          "3457:         if ($GLOBALS['cfg']['ShowFunctionFields']) {",
          "3459:                 $column,",
          "3462:                 $onChangeClause,",
          "3465:                 $tabindex,",
          "3466:                 $idindex,",
          "3468:                 $readOnly,",
          "3469:                 $foreignData",
          "3470:             );",
          "",
          "[Removed Lines]",
          "3458:             $html_output .= $this->getFunctionColumn(",
          "3460:                 $is_upload,",
          "3461:                 $column_name_appendix,",
          "3463:                 $no_support_types,",
          "3464:                 $tabindex_for_function,",
          "3467:                 $insert_mode,",
          "",
          "[Added Lines]",
          "3458:             $htmlOutput .= $this->getFunctionColumn(",
          "3460:                 $isUpload,",
          "3461:                 $columnNameAppendix,",
          "3463:                 $noSupportTypes,",
          "3464:                 $tabindexForFunction,",
          "3467:                 $insertMode,",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "3476:             $column,",
          "3479:             $tabindex,",
          "3481:             $idindex,",
          "3482:             $vkey,",
          "3483:             $foreigners,",
          "",
          "[Removed Lines]",
          "3475:         $html_output .= $this->getNullColumn(",
          "3477:             $column_name_appendix,",
          "3478:             $real_null_value,",
          "3480:             $tabindex_for_null,",
          "",
          "[Added Lines]",
          "3475:         $htmlOutput .= $this->getNullColumn(",
          "3477:             $columnNameAppendix,",
          "3478:             $realNullValue,",
          "3480:             $tabindexForNull,",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "3495:         $type = current(explode('(', $column['pma_type']));",
          "3496:         if (preg_match('/\\(([^()]+)\\)/', $column['pma_type'], $match)) {",
          "3497:             $match[0] = trim($match[0], '()');",
          "3499:         }",
          "3519:                     );",
          "3521:                         'db'            => $db,",
          "3522:                         'table'         => $table,",
          "3523:                         'transform_key' => $column['Field'],",
          "3526:                     ];",
          "3532:                     }",
          "3536:                             $column,",
          "3542:                             $tabindex,",
          "3544:                             $idindex",
          "3545:                         );",
          "3546:                     }",
          "3549:                         $GLOBALS['plugin_scripts'] = array_merge(",
          "3550:                             $GLOBALS['plugin_scripts'],",
          "3552:                         );",
          "3553:                     }",
          "3554:                 }",
          "3555:             }",
          "3556:         }",
          "3560:         } else {",
          "3562:                 $column,",
          "3565:                 $onChangeClause,",
          "3566:                 $tabindex,",
          "3568:                 $idindex,",
          "3569:                 $data,",
          "3571:                 $foreignData,",
          "3572:                 [",
          "3573:                     $table,",
          "3574:                     $db,",
          "3575:                 ],",
          "3579:                 $vkey,",
          "3586:                 $readOnly",
          "3587:             );",
          "3588:         }",
          "3591:     }",
          "3624:     public function getHtmlForInsertEditRow(",
          "3631:         $jsvkey,",
          "3632:         $vkey,",
          "3636:         &$tabindex,",
          "3640:         array $foreigners,",
          "3643:         $table,",
          "3644:         $db,",
          "3648:         array $repopulate,",
          "3650:     ) {",
          "3652:             . '<tbody>';",
          "3667:             }",
          "3669:             $virtual = [",
          "",
          "[Removed Lines]",
          "3494:         $no_decimals = 0;",
          "3498:             $no_decimals = $match[0];",
          "3501:         $html_output .= '<td data-type=\"' . $type . '\" data-decimals=\"'",
          "3502:             . $no_decimals . '\">' . \"\\n\";",
          "3505:         $html_output .= '<span class=\"default_value hide\">'",
          "3506:             . $special_chars . '</span>';",
          "3509:         $transformed_html = '';",
          "3510:         if (! empty($column_mime['input_transformation'])) {",
          "3511:             $file = $column_mime['input_transformation'];",
          "3512:             $include_file = 'libraries/classes/Plugins/Transformations/' . $file;",
          "3513:             if (is_file($include_file)) {",
          "3514:                 $class_name = $this->transformations->getClassName($include_file);",
          "3515:                 if (class_exists($class_name)) {",
          "3516:                     $transformation_plugin = new $class_name();",
          "3517:                     $transformation_options = $this->transformations->getOptions(",
          "3518:                         $column_mime['input_transformation_options']",
          "3520:                     $_url_params = [",
          "3524:                         'where_clause_sign' => Core::signSqlQuery($where_clause),",
          "3525:                         'where_clause'  => $where_clause,",
          "3527:                     $transformation_options['wrapper_link'] = Url::getCommon($_url_params);",
          "3528:                     $transformation_options['wrapper_params'] = $_url_params;",
          "3529:                     $current_value = '';",
          "3530:                     if (isset($current_row[$column['Field']])) {",
          "3531:                         $current_value = $current_row[$column['Field']];",
          "3534:                     if (method_exists($transformation_plugin, 'getInputHtml')) {",
          "3535:                         $transformed_html = $transformation_plugin->getInputHtml(",
          "3537:                             $row_id,",
          "3538:                             $column_name_appendix,",
          "3539:                             $transformation_options,",
          "3540:                             $current_value,",
          "3541:                             $text_dir,",
          "3543:                             $tabindex_for_value,",
          "3548:                     if (method_exists($transformation_plugin, 'getScripts')) {",
          "3551:                             $transformation_plugin->getScripts()",
          "3558:         if (! empty($transformed_html)) {",
          "3559:             $html_output .= $transformed_html;",
          "3561:             $html_output .= $this->getValueColumn(",
          "3563:                 $backup_field,",
          "3564:                 $column_name_appendix,",
          "3567:                 $tabindex_for_value,",
          "3570:                 $special_chars,",
          "3576:                 $row_id,",
          "3577:                 $text_dir,",
          "3578:                 $special_chars_encoded,",
          "3580:                 $is_upload,",
          "3581:                 $biggest_max_file_size,",
          "3582:                 $default_char_editing,",
          "3583:                 $no_support_types,",
          "3584:                 $gis_data_types,",
          "3585:                 $extracted_columnspec,",
          "3590:         return $html_output;",
          "3625:         array $url_params,",
          "3626:         array $table_columns,",
          "3627:         array $comments_map,",
          "3628:         $timestamp_seen,",
          "3629:         $current_result,",
          "3630:         $chg_evt_handler,",
          "3633:         $insert_mode,",
          "3634:         array $current_row,",
          "3635:         &$o_rows,",
          "3637:         $columns_cnt,",
          "3638:         $is_upload,",
          "3639:         $tabindex_for_function,",
          "3641:         $tabindex_for_null,",
          "3642:         $tabindex_for_value,",
          "3645:         $row_id,",
          "3646:         $biggest_max_file_size,",
          "3647:         $text_dir,",
          "3649:         array $where_clause_array",
          "3651:         $html_output = $this->getHeadAndFootOfInsertRowTable($url_params)",
          "3655:         $default_char_editing = $GLOBALS['cfg']['CharEditing'];",
          "3656:         $mime_map = $this->transformations->getMime($db, $table);",
          "3657:         $where_clause = '';",
          "3658:         if (isset($where_clause_array[$row_id])) {",
          "3659:             $where_clause = $where_clause_array[$row_id];",
          "3660:         }",
          "3662:         for ($column_number = 0; $column_number < $columns_cnt; $column_number++) {",
          "3663:             $table_column = $table_columns[$column_number];",
          "3664:             $column_mime = [];",
          "3665:             if (isset($mime_map[$table_column['Field']])) {",
          "3666:                 $column_mime = $mime_map[$table_column['Field']];",
          "",
          "[Added Lines]",
          "3494:         $noDecimals = 0;",
          "3498:             $noDecimals = $match[0];",
          "3501:         $htmlOutput .= '<td data-type=\"' . $type . '\" data-decimals=\"'",
          "3502:             . $noDecimals . '\">' . \"\\n\";",
          "3505:         $htmlOutput .= '<span class=\"default_value hide\">'",
          "3506:             . $specialChars . '</span>';",
          "3509:         $transformedHtml = '';",
          "3510:         if (! empty($columnMime['input_transformation'])) {",
          "3511:             $file = $columnMime['input_transformation'];",
          "3512:             $includeFile = 'libraries/classes/Plugins/Transformations/' . $file;",
          "3513:             if (is_file($includeFile)) {",
          "3514:                 $className = $this->transformations->getClassName($includeFile);",
          "3515:                 if (class_exists($className)) {",
          "3516:                     $transformationPlugin = new $className();",
          "3517:                     $transformationOptions = $this->transformations->getOptions(",
          "3518:                         $columnMime['input_transformation_options']",
          "3520:                     $urlParams = [",
          "3524:                         'where_clause_sign' => Core::signSqlQuery($whereClause),",
          "3525:                         'where_clause'  => $whereClause,",
          "3527:                     $transformationOptions['wrapper_link'] = Url::getCommon($urlParams);",
          "3528:                     $transformationOptions['wrapper_params'] = $urlParams;",
          "3529:                     $currentValue = '';",
          "3530:                     if (isset($currentRow[$column['Field']])) {",
          "3531:                         $currentValue = $currentRow[$column['Field']];",
          "3534:                     if (method_exists($transformationPlugin, 'getInputHtml')) {",
          "3535:                         $transformedHtml = $transformationPlugin->getInputHtml(",
          "3537:                             $rowId,",
          "3538:                             $columnNameAppendix,",
          "3539:                             $transformationOptions,",
          "3540:                             $currentValue,",
          "3541:                             $textDir,",
          "3543:                             $tabindexForValue,",
          "3548:                     if (method_exists($transformationPlugin, 'getScripts')) {",
          "3551:                             $transformationPlugin->getScripts()",
          "3558:         if (! empty($transformedHtml)) {",
          "3559:             $htmlOutput .= $transformedHtml;",
          "3561:             $htmlOutput .= $this->getValueColumn(",
          "3563:                 $backupField,",
          "3564:                 $columnNameAppendix,",
          "3567:                 $tabindexForValue,",
          "3570:                 $specialChars,",
          "3576:                 $rowId,",
          "3577:                 $textDir,",
          "3578:                 $specialCharsEncoded,",
          "3580:                 $isUpload,",
          "3581:                 $biggestMaxFileSize,",
          "3582:                 $defaultCharEditing,",
          "3583:                 $noSupportTypes,",
          "3584:                 $gisDataTypes,",
          "3585:                 $extractedColumnspec,",
          "3590:         return $htmlOutput;",
          "3625:         array $urlParams,",
          "3626:         array $tableColumns,",
          "3627:         array $commentsMap,",
          "3628:         $timestampSeen,",
          "3629:         $currentResult,",
          "3630:         $chgEvtHandler,",
          "3633:         $insertMode,",
          "3634:         array $currentRow,",
          "3635:         &$oRows,",
          "3637:         $columnsCnt,",
          "3638:         $isUpload,",
          "3639:         $tabindexForFunction,",
          "3641:         $tabindexForNull,",
          "3642:         $tabindexForValue,",
          "3645:         $rowId,",
          "3646:         $biggestMaxFileSize,",
          "3647:         $textDir,",
          "3649:         array $whereClauseArray",
          "3651:         $htmlOutput = $this->getHeadAndFootOfInsertRowTable($urlParams)",
          "3655:         $defaultCharEditing = $GLOBALS['cfg']['CharEditing'];",
          "3656:         $mimeMap = $this->transformations->getMime($db, $table);",
          "3657:         $whereClause = '';",
          "3658:         if (isset($whereClauseArray[$rowId])) {",
          "3659:             $whereClause = $whereClauseArray[$rowId];",
          "3660:         }",
          "3662:         for ($columnNumber = 0; $columnNumber < $columnsCnt; $columnNumber++) {",
          "3663:             $tableColumn = $tableColumns[$columnNumber];",
          "3664:             $columnMime = [];",
          "3665:             if (isset($mimeMap[$tableColumn['Field']])) {",
          "3666:                 $columnMime = $mimeMap[$tableColumn['Field']];",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "3672:                 'VIRTUAL GENERATED',",
          "3673:                 'STORED GENERATED',",
          "3674:             ];",
          "3676:                 continue;",
          "3677:             }",
          "3686:                 $jsvkey,",
          "3687:                 $vkey,",
          "3691:                 $tabindex,",
          "3695:                 $foreigners,",
          "3698:                 $table,",
          "3699:                 $db,",
          "3704:                 $repopulate,",
          "3707:             );",
          "3708:         }",
          "3713:             . '</table></div><br>'",
          "3714:             . '<div class=\"clearfloat\"></div>';",
          "3715:     }",
          "",
          "[Removed Lines]",
          "3675:             if (in_array($table_column['Extra'], $virtual)) {",
          "3679:             $html_output .= $this->getHtmlForInsertEditFormColumn(",
          "3680:                 $table_columns,",
          "3681:                 $column_number,",
          "3682:                 $comments_map,",
          "3683:                 $timestamp_seen,",
          "3684:                 $current_result,",
          "3685:                 $chg_evt_handler,",
          "3688:                 $insert_mode,",
          "3689:                 $current_row,",
          "3690:                 $o_rows,",
          "3692:                 $columns_cnt,",
          "3693:                 $is_upload,",
          "3694:                 $tabindex_for_function,",
          "3696:                 $tabindex_for_null,",
          "3697:                 $tabindex_for_value,",
          "3700:                 $row_id,",
          "3701:                 $biggest_max_file_size,",
          "3702:                 $default_char_editing,",
          "3703:                 $text_dir,",
          "3705:                 $column_mime,",
          "3706:                 $where_clause",
          "3710:         $o_rows++;",
          "3712:         return $html_output . '  </tbody>'",
          "",
          "[Added Lines]",
          "3675:             if (in_array($tableColumn['Extra'], $virtual)) {",
          "3679:             $htmlOutput .= $this->getHtmlForInsertEditFormColumn(",
          "3680:                 $tableColumns,",
          "3681:                 $columnNumber,",
          "3682:                 $commentsMap,",
          "3683:                 $timestampSeen,",
          "3684:                 $currentResult,",
          "3685:                 $chgEvtHandler,",
          "3688:                 $insertMode,",
          "3689:                 $currentRow,",
          "3690:                 $oRows,",
          "3692:                 $columnsCnt,",
          "3693:                 $isUpload,",
          "3694:                 $tabindexForFunction,",
          "3696:                 $tabindexForNull,",
          "3697:                 $tabindexForValue,",
          "3700:                 $rowId,",
          "3701:                 $biggestMaxFileSize,",
          "3702:                 $defaultCharEditing,",
          "3703:                 $textDir,",
          "3705:                 $columnMime,",
          "3706:                 $whereClause",
          "3710:         $oRows++;",
          "3712:         return $htmlOutput . '  </tbody>'",
          "",
          "---------------"
        ],
        "phpstan-baseline.neon||phpstan-baseline.neon": [
          "File: phpstan-baseline.neon -> phpstan-baseline.neon",
          "--- Hunk 1 ---",
          "[Context before]",
          "2196:    path: test/classes/InsertEditTest.php",
          "2198:   -",
          "2200:    count: 1",
          "2201:    path: test/classes/InsertEditTest.php",
          "",
          "[Removed Lines]",
          "2199:    message: \"#^Parameter \\\\#1 \\\\$where_clause of method PhpMyAdmin\\\\\\\\InsertEdit\\\\:\\\\:determineInsertOrEdit\\\\(\\\\) expects string, null given\\\\.$#\"",
          "",
          "[Added Lines]",
          "2199:    message: \"#^Parameter \\\\#1 \\\\$whereClause of method PhpMyAdmin\\\\\\\\InsertEdit\\\\:\\\\:determineInsertOrEdit\\\\(\\\\) expects string, null given\\\\.$#\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}