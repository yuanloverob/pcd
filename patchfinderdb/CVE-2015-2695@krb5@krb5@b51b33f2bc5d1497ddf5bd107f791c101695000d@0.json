{
  "cve_id": "CVE-2015-2695",
  "cve_desc": "lib/gssapi/spnego/spnego_mech.c in MIT Kerberos 5 (aka krb5) before 1.14 relies on an inappropriate context handle, which allows remote attackers to cause a denial of service (incorrect pointer read and process crash) via a crafted SPNEGO packet that is mishandled during a gss_inquire_context call.",
  "repo": "krb5/krb5",
  "patch_hash": "b51b33f2bc5d1497ddf5bd107f791c101695000d",
  "patch_info": {
    "commit_hash": "b51b33f2bc5d1497ddf5bd107f791c101695000d",
    "repo": "krb5/krb5",
    "commit_url": "https://github.com/krb5/krb5/commit/b51b33f2bc5d1497ddf5bd107f791c101695000d",
    "files": [
      "src/lib/gssapi/spnego/gssapiP_spnego.h",
      "src/lib/gssapi/spnego/spnego_mech.c"
    ],
    "message": "Fix SPNEGO context aliasing bugs [CVE-2015-2695]\n\nThe SPNEGO mechanism currently replaces its context handle with the\nmechanism context handle upon establishment, under the assumption that\nmost GSS functions are only called after context establishment.  This\nassumption is incorrect, and can lead to aliasing violations for some\nprograms.  Maintain the SPNEGO context structure after context\nestablishment and refer to it in all GSS methods.  Add initiate and\nopened flags to the SPNEGO context structure for use in\ngss_inquire_context() prior to context establishment.\n\nCVE-2015-2695:\n\nIn MIT krb5 1.5 and later, applications which call\ngss_inquire_context() on a partially-established SPNEGO context can\ncause the GSS-API library to read from a pointer using the wrong type,\ngenerally causing a process crash.  This bug may go unnoticed, because\nthe most common SPNEGO authentication scenario establishes the context\nafter just one call to gss_accept_sec_context().  Java server\napplications using the native JGSS provider are vulnerable to this\nbug.  A carefully crafted SPNEGO packet might allow the\ngss_inquire_context() call to succeed with attacker-determined\nresults, but applications should not make access control decisions\nbased on gss_inquire_context() results prior to context establishment.\n\n    CVSSv2 Vector: AV:N/AC:M/Au:N/C:N/I:N/A:C/E:POC/RL:OF/RC:C\n\n[ghudson@mit.edu: several bugfixes, style changes, and edge-case\nbehavior changes; commit message and CVE description]\n\nticket: 8244\ntarget_version: 1.14\ntags: pullup",
    "before_after_code_files": [
      "src/lib/gssapi/spnego/gssapiP_spnego.h||src/lib/gssapi/spnego/gssapiP_spnego.h",
      "src/lib/gssapi/spnego/spnego_mech.c||src/lib/gssapi/spnego/spnego_mech.c"
    ]
  },
  "patch_diff": {
    "src/lib/gssapi/spnego/gssapiP_spnego.h||src/lib/gssapi/spnego/gssapiP_spnego.h": [
      "File: src/lib/gssapi/spnego/gssapiP_spnego.h -> src/lib/gssapi/spnego/gssapiP_spnego.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "103:  int firstpass;",
      "104:  int mech_complete;",
      "105:  int nego_done;",
      "106:  OM_uint32 ctx_flags;",
      "107:  gss_name_t internal_name;",
      "108:  gss_OID actual_mech;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:  int initiate;",
      "107:  int opened;",
      "",
      "---------------"
    ],
    "src/lib/gssapi/spnego/spnego_mech.c||src/lib/gssapi/spnego/spnego_mech.c": [
      "File: src/lib/gssapi/spnego/spnego_mech.c -> src/lib/gssapi/spnego/spnego_mech.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "102:           gss_cred_usage_t, gss_OID_set *);",
      "103: static void release_spnego_ctx(spnego_gss_ctx_id_t *);",
      "104: static void check_spnego_options(spnego_gss_ctx_id_t);",
      "106: static int put_mech_set(gss_OID_set mechSet, gss_buffer_t buf);",
      "107: static int put_input_token(unsigned char **, gss_buffer_t, unsigned int);",
      "108: static int put_mech_oid(unsigned char **, gss_OID_const, unsigned int);",
      "",
      "[Removed Lines]",
      "105: static spnego_gss_ctx_id_t create_spnego_ctx(void);",
      "",
      "[Added Lines]",
      "105: static spnego_gss_ctx_id_t create_spnego_ctx(int);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "454: }",
      "456: static spnego_gss_ctx_id_t",
      "458: {",
      "459:  spnego_gss_ctx_id_t spnego_ctx = NULL;",
      "460:  spnego_ctx = (spnego_gss_ctx_id_t)",
      "",
      "[Removed Lines]",
      "457: create_spnego_ctx(void)",
      "",
      "[Added Lines]",
      "457: create_spnego_ctx(int initiate)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "477:  spnego_ctx->mic_rcvd = 0;",
      "478:  spnego_ctx->mech_complete = 0;",
      "479:  spnego_ctx->nego_done = 0;",
      "480:  spnego_ctx->internal_name = GSS_C_NO_NAME;",
      "481:  spnego_ctx->actual_mech = GSS_C_NO_OID;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "480:  spnego_ctx->opened = 0;",
      "481:  spnego_ctx->initiate = initiate;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "642:  OM_uint32 ret;",
      "643:  spnego_gss_ctx_id_t sc = NULL;",
      "646:  if (sc == NULL)",
      "647:   return GSS_S_FAILURE;",
      "",
      "[Removed Lines]",
      "645:  sc = create_spnego_ctx();",
      "",
      "[Added Lines]",
      "647:  sc = create_spnego_ctx(1);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1108:  }",
      "1109:  gss_release_buffer(&tmpmin, &mechtok_out);",
      "1110:  if (ret == GSS_S_COMPLETE) {",
      "1116:   if (actual_mech != NULL)",
      "1118:   if (ret_flags != NULL)",
      "1121:  } else if (ret != GSS_S_CONTINUE_NEEDED) {",
      "1122:   if (spnego_ctx != NULL) {",
      "1123:    gss_delete_sec_context(&tmpmin,",
      "",
      "[Removed Lines]",
      "1120:   release_spnego_ctx(&spnego_ctx);",
      "",
      "[Added Lines]",
      "1110:   spnego_ctx->opened = 1;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1285:  if (ret != GSS_S_COMPLETE)",
      "1286:   goto cleanup;",
      "1289:  if (sc == NULL) {",
      "1290:   ret = GSS_S_FAILURE;",
      "1291:   goto cleanup;",
      "",
      "[Removed Lines]",
      "1288:  sc = create_spnego_ctx();",
      "",
      "[Added Lines]",
      "1282:  sc = create_spnego_ctx(0);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1367:   gss_release_buffer(&tmpmin, &sc->DER_mechTypes);",
      "1368:   assert(mech_wanted != GSS_C_NO_OID);",
      "1369:  } else",
      "1371:  if (sc == NULL) {",
      "1372:   ret = GSS_S_FAILURE;",
      "",
      "[Removed Lines]",
      "1370:   sc = create_spnego_ctx();",
      "",
      "[Added Lines]",
      "1364:   sc = create_spnego_ctx(0);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1750:    ret = GSS_S_FAILURE;",
      "1751:  }",
      "1752:  if (ret == GSS_S_COMPLETE) {",
      "1754:   if (sc->internal_name != GSS_C_NO_NAME &&",
      "1755:       src_name != NULL) {",
      "1757:    sc->internal_name = GSS_C_NO_NAME;",
      "1758:   }",
      "1760:  } else if (ret != GSS_S_CONTINUE_NEEDED) {",
      "1761:   if (sc != NULL) {",
      "1762:    gss_delete_sec_context(&tmpmin, &sc->ctx_handle,",
      "",
      "[Removed Lines]",
      "1759:   release_spnego_ctx(&sc);",
      "",
      "[Added Lines]",
      "1747:   sc->opened = 1;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2069:   gss_qop_t *qop_state)",
      "2070: {",
      "2071:  OM_uint32 ret;",
      "2072:  ret = gss_unwrap(minor_status,",
      "2074:    input_message_buffer,",
      "2075:    output_message_buffer,",
      "2076:    conf_state,",
      "",
      "[Removed Lines]",
      "2073:    context_handle,",
      "",
      "[Added Lines]",
      "2065:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
      "2067:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
      "2068:   return (GSS_S_NO_CONTEXT);",
      "2071:    sc->ctx_handle,",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2090:   gss_buffer_t output_message_buffer)",
      "2091: {",
      "2092:  OM_uint32 ret;",
      "2093:  ret = gss_wrap(minor_status,",
      "2095:       conf_req_flag,",
      "2096:       qop_req,",
      "2097:       input_message_buffer,",
      "",
      "[Removed Lines]",
      "2094:       context_handle,",
      "",
      "[Added Lines]",
      "2091:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
      "2093:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
      "2094:   return (GSS_S_NO_CONTEXT);",
      "2097:       sc->ctx_handle,",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "2108:     const gss_buffer_t token_buffer)",
      "2109: {",
      "2110:  OM_uint32 ret;",
      "2111:  ret = gss_process_context_token(minor_status,",
      "2113:      token_buffer);",
      "2115:  return (ret);",
      "",
      "[Removed Lines]",
      "2112:      context_handle,",
      "",
      "[Added Lines]",
      "2114:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
      "2117:  if (!sc->opened)",
      "2118:   return (GSS_S_DEFECTIVE_TOKEN);",
      "2121:      sc->ctx_handle,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "2133:  if (*ctx == NULL)",
      "2134:   return (GSS_S_COMPLETE);",
      "2150:  return (ret);",
      "2151: }",
      "",
      "[Removed Lines]",
      "2139:  if ((*ctx)->magic_num == SPNEGO_MAGIC_ID) {",
      "2140:   (void) gss_delete_sec_context(minor_status,",
      "2141:         &(*ctx)->ctx_handle,",
      "2142:         output_token);",
      "2143:   (void) release_spnego_ctx(ctx);",
      "2144:  } else {",
      "2145:   ret = gss_delete_sec_context(minor_status,",
      "2146:         context_handle,",
      "2147:         output_token);",
      "2148:  }",
      "",
      "[Added Lines]",
      "2145:  (void) gss_delete_sec_context(minor_status, &(*ctx)->ctx_handle,",
      "2146:           output_token);",
      "2147:  (void) release_spnego_ctx(ctx);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "2157:    OM_uint32 *time_rec)",
      "2158: {",
      "2159:  OM_uint32 ret;",
      "2160:  ret = gss_context_time(minor_status,",
      "2162:        time_rec);",
      "2163:  return (ret);",
      "2164: }",
      "",
      "[Removed Lines]",
      "2161:        context_handle,",
      "",
      "[Added Lines]",
      "2159:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
      "2161:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
      "2162:   return (GSS_S_NO_CONTEXT);",
      "2165:        sc->ctx_handle,",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "2170:        gss_buffer_t interprocess_token)",
      "2171: {",
      "2172:  OM_uint32 ret;",
      "2173:  ret = gss_export_sec_context(minor_status,",
      "2175:         interprocess_token);",
      "2176:  return (ret);",
      "2177: }",
      "",
      "[Removed Lines]",
      "2174:         context_handle,",
      "",
      "[Added Lines]",
      "2177:  spnego_gss_ctx_id_t sc = *(spnego_gss_ctx_id_t *)context_handle;",
      "2181:  if (!sc->opened)",
      "2182:   return GSS_S_UNAVAILABLE;",
      "2185:         &sc->ctx_handle,",
      "2187:  if (sc->ctx_handle == GSS_C_NO_CONTEXT) {",
      "2188:   release_spnego_ctx(&sc);",
      "2190:  }",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "2182:  const gss_buffer_t interprocess_token,",
      "2183:  gss_ctx_id_t  *context_handle)",
      "2184: {",
      "2190: }",
      "",
      "[Removed Lines]",
      "2185:  OM_uint32 ret;",
      "2186:  ret = gss_import_sec_context(minor_status,",
      "2187:         interprocess_token,",
      "2188:         context_handle);",
      "2189:  return (ret);",
      "",
      "[Added Lines]",
      "2205:  return GSS_S_UNAVAILABLE;",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "2203:    int  *opened)",
      "2204: {",
      "2205:  OM_uint32 ret = GSS_S_COMPLETE;",
      "2217:  return (ret);",
      "2218: }",
      "",
      "[Removed Lines]",
      "2207:  ret = gss_inquire_context(minor_status,",
      "2208:     context_handle,",
      "2209:     src_name,",
      "2210:     targ_name,",
      "2211:     lifetime_rec,",
      "2212:     mech_type,",
      "2213:     ctx_flags,",
      "2214:     locally_initiated,",
      "2215:     opened);",
      "",
      "[Added Lines]",
      "2222:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
      "2224:  if (src_name != NULL)",
      "2226:  if (targ_name != NULL)",
      "2228:  if (lifetime_rec != NULL)",
      "2230:  if (mech_type != NULL)",
      "2232:  if (ctx_flags != NULL)",
      "2234:  if (locally_initiated != NULL)",
      "2236:  if (opened != NULL)",
      "2239:  if (sc->ctx_handle != GSS_C_NO_CONTEXT) {",
      "2240:   ret = gss_inquire_context(minor_status, sc->ctx_handle,",
      "2241:        src_name, targ_name, lifetime_rec,",
      "2242:        mech_type, ctx_flags, NULL, NULL);",
      "2243:  }",
      "2245:  if (!sc->opened) {",
      "2251:   if (mech_type != NULL)",
      "2259:   if (ctx_flags != NULL) {",
      "2262:   }",
      "2263:  }",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "2227:  OM_uint32 *max_input_size)",
      "2228: {",
      "2229:  OM_uint32 ret;",
      "2230:  ret = gss_wrap_size_limit(minor_status,",
      "2232:     conf_req_flag,",
      "2233:     qop_req,",
      "2234:     req_output_size,",
      "",
      "[Removed Lines]",
      "2231:     context_handle,",
      "",
      "[Added Lines]",
      "2278:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
      "2280:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
      "2281:   return (GSS_S_NO_CONTEXT);",
      "2284:     sc->ctx_handle,",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "2245:   gss_buffer_t message_token)",
      "2246: {",
      "2247:  OM_uint32 ret;",
      "2248:  ret = gss_get_mic(minor_status,",
      "2250:       qop_req,",
      "2251:       message_buffer,",
      "2252:       message_token);",
      "",
      "[Removed Lines]",
      "2249:       context_handle,",
      "",
      "[Added Lines]",
      "2301:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
      "2303:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
      "2304:   return (GSS_S_NO_CONTEXT);",
      "2307:       sc->ctx_handle,",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "2262:   gss_qop_t *qop_state)",
      "2263: {",
      "2264:  OM_uint32 ret;",
      "2265:  ret = gss_verify_mic(minor_status,",
      "2267:        msg_buffer,",
      "2268:        token_buffer,",
      "2269:        qop_state);",
      "",
      "[Removed Lines]",
      "2266:        context_handle,",
      "",
      "[Added Lines]",
      "2323:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
      "2325:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
      "2326:   return (GSS_S_NO_CONTEXT);",
      "2329:        sc->ctx_handle,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "2278:   gss_buffer_set_t *data_set)",
      "2279: {",
      "2280:  OM_uint32 ret;",
      "2281:  ret = gss_inquire_sec_context_by_oid(minor_status,",
      "2283:        desired_object,",
      "2284:        data_set);",
      "2285:  return (ret);",
      "",
      "[Removed Lines]",
      "2282:        context_handle,",
      "",
      "[Added Lines]",
      "2344:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
      "2347:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
      "2348:   return (GSS_S_UNAVAILABLE);",
      "2351:        sc->ctx_handle,",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "2359:   const gss_buffer_t value)",
      "2360: {",
      "2361:  OM_uint32 ret;",
      "2362:  ret = gss_set_sec_context_option(minor_status,",
      "2364:        desired_object,",
      "2365:        value);",
      "2366:  return (ret);",
      "",
      "[Removed Lines]",
      "2363:        context_handle,",
      "",
      "[Added Lines]",
      "2431:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)*context_handle;",
      "2435:  if (sc == NULL || sc->ctx_handle == GSS_C_NO_CONTEXT)",
      "2436:   return (GSS_S_UNAVAILABLE);",
      "2439:        &sc->ctx_handle,",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "2377:        gss_buffer_t output_message_buffer)",
      "2378: {",
      "2379:  OM_uint32 ret;",
      "2380:  ret = gss_wrap_aead(minor_status,",
      "2382:        conf_req_flag,",
      "2383:        qop_req,",
      "2384:        input_assoc_buffer,",
      "",
      "[Removed Lines]",
      "2381:        context_handle,",
      "",
      "[Added Lines]",
      "2456:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
      "2458:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
      "2459:   return (GSS_S_NO_CONTEXT);",
      "2462:        sc->ctx_handle,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "2399:          gss_qop_t *qop_state)",
      "2400: {",
      "2401:  OM_uint32 ret;",
      "2402:  ret = gss_unwrap_aead(minor_status,",
      "2404:          input_message_buffer,",
      "2405:          input_assoc_buffer,",
      "2406:          output_payload_buffer,",
      "",
      "[Removed Lines]",
      "2403:          context_handle,",
      "",
      "[Added Lines]",
      "2483:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
      "2485:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
      "2486:   return (GSS_S_NO_CONTEXT);",
      "2489:          sc->ctx_handle,",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "2419:       int iov_count)",
      "2420: {",
      "2421:  OM_uint32 ret;",
      "2422:  ret = gss_wrap_iov(minor_status,",
      "2424:       conf_req_flag,",
      "2425:       qop_req,",
      "2426:       conf_state,",
      "",
      "[Removed Lines]",
      "2423:       context_handle,",
      "",
      "[Added Lines]",
      "2508:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
      "2510:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
      "2511:   return (GSS_S_NO_CONTEXT);",
      "2514:       sc->ctx_handle,",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "2438:         int iov_count)",
      "2439: {",
      "2440:  OM_uint32 ret;",
      "2441:  ret = gss_unwrap_iov(minor_status,",
      "2443:         conf_state,",
      "2444:         qop_state,",
      "2445:         iov,",
      "",
      "[Removed Lines]",
      "2442:         context_handle,",
      "",
      "[Added Lines]",
      "2532:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
      "2534:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
      "2535:   return (GSS_S_NO_CONTEXT);",
      "2538:         sc->ctx_handle,",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "2457:       int iov_count)",
      "2458: {",
      "2459:  OM_uint32 ret;",
      "2460:  ret = gss_wrap_iov_length(minor_status,",
      "2462:       conf_req_flag,",
      "2463:       qop_req,",
      "2464:       conf_state,",
      "",
      "[Removed Lines]",
      "2461:       context_handle,",
      "",
      "[Added Lines]",
      "2556:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
      "2558:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
      "2559:   return (GSS_S_NO_CONTEXT);",
      "2562:       sc->ctx_handle,",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "2475:   gss_buffer_t input_message_buffer)",
      "2476: {",
      "2477:  OM_uint32 ret;",
      "2478:  ret = gss_complete_auth_token(minor_status,",
      "2480:           input_message_buffer);",
      "2481:  return (ret);",
      "2482: }",
      "",
      "[Removed Lines]",
      "2479:           context_handle,",
      "",
      "[Added Lines]",
      "2579:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
      "2581:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
      "2582:   return (GSS_S_UNAVAILABLE);",
      "2585:           sc->ctx_handle,",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "2721:     gss_buffer_t prf_out)",
      "2722: {",
      "2723:  OM_uint32 ret;",
      "2724:  ret = gss_pseudo_random(minor_status,",
      "2726:     prf_key,",
      "2727:     prf_in,",
      "2728:     desired_output_len,",
      "",
      "[Removed Lines]",
      "2725:     context,",
      "",
      "[Added Lines]",
      "2830:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context;",
      "2832:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
      "2833:   return (GSS_S_NO_CONTEXT);",
      "2836:     sc->ctx_handle,",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "2863:          gss_qop_t qop_req, gss_iov_buffer_desc *iov,",
      "2864:          int iov_count)",
      "2865: {",
      "2867:       iov_count);",
      "2868: }",
      "",
      "[Removed Lines]",
      "2866:     return gss_get_mic_iov(minor_status, context_handle, qop_req, iov,",
      "",
      "[Added Lines]",
      "2977:     spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
      "2979:     if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
      "2980:      return (GSS_S_NO_CONTEXT);",
      "2982:     return gss_get_mic_iov(minor_status, sc->ctx_handle, qop_req, iov,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "2872:      gss_qop_t *qop_state, gss_iov_buffer_desc *iov,",
      "2873:      int iov_count)",
      "2874: {",
      "2876:          iov_count);",
      "2877: }",
      "",
      "[Removed Lines]",
      "2875:     return gss_verify_mic_iov(minor_status, context_handle, qop_state, iov,",
      "",
      "[Added Lines]",
      "2991:     spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
      "2993:     if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
      "2994:      return (GSS_S_NO_CONTEXT);",
      "2996:     return gss_verify_mic_iov(minor_status, sc->ctx_handle, qop_state, iov,",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "2881:          gss_ctx_id_t context_handle, gss_qop_t qop_req,",
      "2882:          gss_iov_buffer_desc *iov, int iov_count)",
      "2883: {",
      "2885:       iov_count);",
      "2886: }",
      "",
      "[Removed Lines]",
      "2884:     return gss_get_mic_iov_length(minor_status, context_handle, qop_req, iov,",
      "",
      "[Added Lines]",
      "3005:     spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
      "3007:     if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
      "3008:      return (GSS_S_NO_CONTEXT);",
      "3010:     return gss_get_mic_iov_length(minor_status, sc->ctx_handle, qop_req, iov,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1ff9a2ee449b194c48b8e40e329293a442e4c55c",
      "candidate_info": {
        "commit_hash": "1ff9a2ee449b194c48b8e40e329293a442e4c55c",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/1ff9a2ee449b194c48b8e40e329293a442e4c55c",
        "files": [
          "src/lib/gssapi/spnego/gssapiP_spnego.h",
          "src/lib/gssapi/spnego/spnego_mech.c"
        ],
        "message": "Fix SPNEGO context aliasing bugs [CVE-2015-2695]\n\nThe SPNEGO mechanism currently replaces its context handle with the\nmechanism context handle upon establishment, under the assumption that\nmost GSS functions are only called after context establishment.  This\nassumption is incorrect, and can lead to aliasing violations for some\nprograms.  Maintain the SPNEGO context structure after context\nestablishment and refer to it in all GSS methods.  Add initiate and\nopened flags to the SPNEGO context structure for use in\ngss_inquire_context() prior to context establishment.\n\nCVE-2015-2695:\n\nIn MIT krb5 1.5 and later, applications which call\ngss_inquire_context() on a partially-established SPNEGO context can\ncause the GSS-API library to read from a pointer using the wrong type,\ngenerally causing a process crash.  This bug may go unnoticed, because\nthe most common SPNEGO authentication scenario establishes the context\nafter just one call to gss_accept_sec_context().  Java server\napplications using the native JGSS provider are vulnerable to this\nbug.  A carefully crafted SPNEGO packet might allow the\ngss_inquire_context() call to succeed with attacker-determined\nresults, but applications should not make access control decisions\nbased on gss_inquire_context() results prior to context establishment.\n\n    CVSSv2 Vector: AV:N/AC:M/Au:N/C:N/I:N/A:C/E:POC/RL:OF/RC:C\n\n[ghudson@mit.edu: several bugfixes, style changes, and edge-case\nbehavior changes; commit message and CVE description]\n\n(cherry picked from commit b51b33f2bc5d1497ddf5bd107f791c101695000d)\n(cherry picked from commit 31fb730f1ad708f230e4387e02ed2f89b93c3607)\n\nticket: 8282 (new)\nsubject: SPNEGO and IAKERB context aliasing bugs [CVE-2015-2695][CVE-2015-2696]\nversion_fixed: 1.13.3",
        "before_after_code_files": [
          "src/lib/gssapi/spnego/gssapiP_spnego.h||src/lib/gssapi/spnego/gssapiP_spnego.h",
          "src/lib/gssapi/spnego/spnego_mech.c||src/lib/gssapi/spnego/spnego_mech.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/gssapi/spnego/gssapiP_spnego.h||src/lib/gssapi/spnego/gssapiP_spnego.h",
            "src/lib/gssapi/spnego/spnego_mech.c||src/lib/gssapi/spnego/spnego_mech.c"
          ],
          "candidate": [
            "src/lib/gssapi/spnego/gssapiP_spnego.h||src/lib/gssapi/spnego/gssapiP_spnego.h",
            "src/lib/gssapi/spnego/spnego_mech.c||src/lib/gssapi/spnego/spnego_mech.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/gssapi/spnego/gssapiP_spnego.h||src/lib/gssapi/spnego/gssapiP_spnego.h": [
          "File: src/lib/gssapi/spnego/gssapiP_spnego.h -> src/lib/gssapi/spnego/gssapiP_spnego.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:  int firstpass;",
          "103:  int mech_complete;",
          "104:  int nego_done;",
          "105:  OM_uint32 ctx_flags;",
          "106:  gss_name_t internal_name;",
          "107:  gss_OID actual_mech;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:  int initiate;",
          "106:  int opened;",
          "",
          "---------------"
        ],
        "src/lib/gssapi/spnego/spnego_mech.c||src/lib/gssapi/spnego/spnego_mech.c": [
          "File: src/lib/gssapi/spnego/spnego_mech.c -> src/lib/gssapi/spnego/spnego_mech.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:           gss_cred_usage_t, gss_OID_set *);",
          "102: static void release_spnego_ctx(spnego_gss_ctx_id_t *);",
          "103: static void check_spnego_options(spnego_gss_ctx_id_t);",
          "105: static int put_mech_set(gss_OID_set mechSet, gss_buffer_t buf);",
          "106: static int put_input_token(unsigned char **, gss_buffer_t, unsigned int);",
          "107: static int put_mech_oid(unsigned char **, gss_OID_const, unsigned int);",
          "",
          "[Removed Lines]",
          "104: static spnego_gss_ctx_id_t create_spnego_ctx(void);",
          "",
          "[Added Lines]",
          "104: static spnego_gss_ctx_id_t create_spnego_ctx(int);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "439: }",
          "441: static spnego_gss_ctx_id_t",
          "443: {",
          "444:  spnego_gss_ctx_id_t spnego_ctx = NULL;",
          "445:  spnego_ctx = (spnego_gss_ctx_id_t)",
          "",
          "[Removed Lines]",
          "442: create_spnego_ctx(void)",
          "",
          "[Added Lines]",
          "442: create_spnego_ctx(int initiate)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "462:  spnego_ctx->mic_rcvd = 0;",
          "463:  spnego_ctx->mech_complete = 0;",
          "464:  spnego_ctx->nego_done = 0;",
          "465:  spnego_ctx->internal_name = GSS_C_NO_NAME;",
          "466:  spnego_ctx->actual_mech = GSS_C_NO_OID;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "465:  spnego_ctx->opened = 0;",
          "466:  spnego_ctx->initiate = initiate;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "627:  OM_uint32 ret;",
          "628:  spnego_gss_ctx_id_t sc = NULL;",
          "631:  if (sc == NULL)",
          "632:   return GSS_S_FAILURE;",
          "",
          "[Removed Lines]",
          "630:  sc = create_spnego_ctx();",
          "",
          "[Added Lines]",
          "632:  sc = create_spnego_ctx(1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1088:  }",
          "1089:  gss_release_buffer(&tmpmin, &mechtok_out);",
          "1090:  if (ret == GSS_S_COMPLETE) {",
          "1096:   if (actual_mech != NULL)",
          "1098:   if (ret_flags != NULL)",
          "1101:  } else if (ret != GSS_S_CONTINUE_NEEDED) {",
          "1102:   if (spnego_ctx != NULL) {",
          "1103:    gss_delete_sec_context(&tmpmin,",
          "",
          "[Removed Lines]",
          "1100:   release_spnego_ctx(&spnego_ctx);",
          "",
          "[Added Lines]",
          "1090:   spnego_ctx->opened = 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1341:  if (ret != GSS_S_COMPLETE)",
          "1342:   goto cleanup;",
          "1345:  if (sc == NULL) {",
          "1346:   ret = GSS_S_FAILURE;",
          "1347:   goto cleanup;",
          "",
          "[Removed Lines]",
          "1344:  sc = create_spnego_ctx();",
          "",
          "[Added Lines]",
          "1338:  sc = create_spnego_ctx(0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1423:   gss_release_buffer(&tmpmin, &sc->DER_mechTypes);",
          "1424:   assert(mech_wanted != GSS_C_NO_OID);",
          "1425:  } else",
          "1427:  if (sc == NULL) {",
          "1428:   ret = GSS_S_FAILURE;",
          "",
          "[Removed Lines]",
          "1426:   sc = create_spnego_ctx();",
          "",
          "[Added Lines]",
          "1420:   sc = create_spnego_ctx(0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1806:    ret = GSS_S_FAILURE;",
          "1807:  }",
          "1808:  if (ret == GSS_S_COMPLETE) {",
          "1810:   if (sc->internal_name != GSS_C_NO_NAME &&",
          "1811:       src_name != NULL) {",
          "1813:    sc->internal_name = GSS_C_NO_NAME;",
          "1814:   }",
          "1816:  } else if (ret != GSS_S_CONTINUE_NEEDED) {",
          "1817:   if (sc != NULL) {",
          "1818:    gss_delete_sec_context(&tmpmin, &sc->ctx_handle,",
          "",
          "[Removed Lines]",
          "1815:   release_spnego_ctx(&sc);",
          "",
          "[Added Lines]",
          "1803:   sc->opened = 1;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2125:   gss_qop_t *qop_state)",
          "2126: {",
          "2127:  OM_uint32 ret;",
          "2128:  ret = gss_unwrap(minor_status,",
          "2130:    input_message_buffer,",
          "2131:    output_message_buffer,",
          "2132:    conf_state,",
          "",
          "[Removed Lines]",
          "2129:    context_handle,",
          "",
          "[Added Lines]",
          "2121:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2123:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2124:   return (GSS_S_NO_CONTEXT);",
          "2127:    sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2146:   gss_buffer_t output_message_buffer)",
          "2147: {",
          "2148:  OM_uint32 ret;",
          "2149:  ret = gss_wrap(minor_status,",
          "2151:       conf_req_flag,",
          "2152:       qop_req,",
          "2153:       input_message_buffer,",
          "",
          "[Removed Lines]",
          "2150:       context_handle,",
          "",
          "[Added Lines]",
          "2147:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2149:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2150:   return (GSS_S_NO_CONTEXT);",
          "2153:       sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2164:     const gss_buffer_t token_buffer)",
          "2165: {",
          "2166:  OM_uint32 ret;",
          "2167:  ret = gss_process_context_token(minor_status,",
          "2169:      token_buffer);",
          "2171:  return (ret);",
          "",
          "[Removed Lines]",
          "2168:      context_handle,",
          "",
          "[Added Lines]",
          "2170:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2173:  if (!sc->opened)",
          "2174:   return (GSS_S_DEFECTIVE_TOKEN);",
          "2177:      sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2189:  if (*ctx == NULL)",
          "2190:   return (GSS_S_COMPLETE);",
          "2206:  return (ret);",
          "2207: }",
          "",
          "[Removed Lines]",
          "2195:  if ((*ctx)->magic_num == SPNEGO_MAGIC_ID) {",
          "2196:   (void) gss_delete_sec_context(minor_status,",
          "2197:         &(*ctx)->ctx_handle,",
          "2198:         output_token);",
          "2199:   (void) release_spnego_ctx(ctx);",
          "2200:  } else {",
          "2201:   ret = gss_delete_sec_context(minor_status,",
          "2202:         context_handle,",
          "2203:         output_token);",
          "2204:  }",
          "",
          "[Added Lines]",
          "2201:  (void) gss_delete_sec_context(minor_status, &(*ctx)->ctx_handle,",
          "2202:           output_token);",
          "2203:  (void) release_spnego_ctx(ctx);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2213:    OM_uint32 *time_rec)",
          "2214: {",
          "2215:  OM_uint32 ret;",
          "2216:  ret = gss_context_time(minor_status,",
          "2218:        time_rec);",
          "2219:  return (ret);",
          "2220: }",
          "",
          "[Removed Lines]",
          "2217:        context_handle,",
          "",
          "[Added Lines]",
          "2215:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2217:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2218:   return (GSS_S_NO_CONTEXT);",
          "2221:        sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2226:        gss_buffer_t interprocess_token)",
          "2227: {",
          "2228:  OM_uint32 ret;",
          "2229:  ret = gss_export_sec_context(minor_status,",
          "2231:         interprocess_token);",
          "2232:  return (ret);",
          "2233: }",
          "",
          "[Removed Lines]",
          "2230:         context_handle,",
          "",
          "[Added Lines]",
          "2233:  spnego_gss_ctx_id_t sc = *(spnego_gss_ctx_id_t *)context_handle;",
          "2237:  if (!sc->opened)",
          "2238:   return GSS_S_UNAVAILABLE;",
          "2241:         &sc->ctx_handle,",
          "2243:  if (sc->ctx_handle == GSS_C_NO_CONTEXT) {",
          "2244:   release_spnego_ctx(&sc);",
          "2246:  }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2238:  const gss_buffer_t interprocess_token,",
          "2239:  gss_ctx_id_t  *context_handle)",
          "2240: {",
          "2246: }",
          "",
          "[Removed Lines]",
          "2241:  OM_uint32 ret;",
          "2242:  ret = gss_import_sec_context(minor_status,",
          "2243:         interprocess_token,",
          "2244:         context_handle);",
          "2245:  return (ret);",
          "",
          "[Added Lines]",
          "2261:  return GSS_S_UNAVAILABLE;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2259:    int  *opened)",
          "2260: {",
          "2261:  OM_uint32 ret = GSS_S_COMPLETE;",
          "2273:  return (ret);",
          "2274: }",
          "",
          "[Removed Lines]",
          "2263:  ret = gss_inquire_context(minor_status,",
          "2264:     context_handle,",
          "2265:     src_name,",
          "2266:     targ_name,",
          "2267:     lifetime_rec,",
          "2268:     mech_type,",
          "2269:     ctx_flags,",
          "2270:     locally_initiated,",
          "2271:     opened);",
          "",
          "[Added Lines]",
          "2278:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2280:  if (src_name != NULL)",
          "2282:  if (targ_name != NULL)",
          "2284:  if (lifetime_rec != NULL)",
          "2286:  if (mech_type != NULL)",
          "2288:  if (ctx_flags != NULL)",
          "2290:  if (locally_initiated != NULL)",
          "2292:  if (opened != NULL)",
          "2295:  if (sc->ctx_handle != GSS_C_NO_CONTEXT) {",
          "2296:   ret = gss_inquire_context(minor_status, sc->ctx_handle,",
          "2297:        src_name, targ_name, lifetime_rec,",
          "2298:        mech_type, ctx_flags, NULL, NULL);",
          "2299:  }",
          "2301:  if (!sc->opened) {",
          "2307:   if (mech_type != NULL)",
          "2315:   if (ctx_flags != NULL) {",
          "2318:   }",
          "2319:  }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2283:  OM_uint32 *max_input_size)",
          "2284: {",
          "2285:  OM_uint32 ret;",
          "2286:  ret = gss_wrap_size_limit(minor_status,",
          "2288:     conf_req_flag,",
          "2289:     qop_req,",
          "2290:     req_output_size,",
          "",
          "[Removed Lines]",
          "2287:     context_handle,",
          "",
          "[Added Lines]",
          "2334:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2336:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2337:   return (GSS_S_NO_CONTEXT);",
          "2340:     sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2301:   gss_buffer_t message_token)",
          "2302: {",
          "2303:  OM_uint32 ret;",
          "2304:  ret = gss_get_mic(minor_status,",
          "2306:       qop_req,",
          "2307:       message_buffer,",
          "2308:       message_token);",
          "",
          "[Removed Lines]",
          "2305:       context_handle,",
          "",
          "[Added Lines]",
          "2357:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2359:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2360:   return (GSS_S_NO_CONTEXT);",
          "2363:       sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2318:   gss_qop_t *qop_state)",
          "2319: {",
          "2320:  OM_uint32 ret;",
          "2321:  ret = gss_verify_mic(minor_status,",
          "2323:        msg_buffer,",
          "2324:        token_buffer,",
          "2325:        qop_state);",
          "",
          "[Removed Lines]",
          "2322:        context_handle,",
          "",
          "[Added Lines]",
          "2379:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2381:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2382:   return (GSS_S_NO_CONTEXT);",
          "2385:        sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2334:   gss_buffer_set_t *data_set)",
          "2335: {",
          "2336:  OM_uint32 ret;",
          "2337:  ret = gss_inquire_sec_context_by_oid(minor_status,",
          "2339:        desired_object,",
          "2340:        data_set);",
          "2341:  return (ret);",
          "",
          "[Removed Lines]",
          "2338:        context_handle,",
          "",
          "[Added Lines]",
          "2400:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2403:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2404:   return (GSS_S_UNAVAILABLE);",
          "2407:        sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2404:   const gss_buffer_t value)",
          "2405: {",
          "2406:  OM_uint32 ret;",
          "2407:  ret = gss_set_sec_context_option(minor_status,",
          "2409:        desired_object,",
          "2410:        value);",
          "2411:  return (ret);",
          "",
          "[Removed Lines]",
          "2408:        context_handle,",
          "",
          "[Added Lines]",
          "2476:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)*context_handle;",
          "2480:  if (sc == NULL || sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2481:   return (GSS_S_UNAVAILABLE);",
          "2484:        &sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2422:        gss_buffer_t output_message_buffer)",
          "2423: {",
          "2424:  OM_uint32 ret;",
          "2425:  ret = gss_wrap_aead(minor_status,",
          "2427:        conf_req_flag,",
          "2428:        qop_req,",
          "2429:        input_assoc_buffer,",
          "",
          "[Removed Lines]",
          "2426:        context_handle,",
          "",
          "[Added Lines]",
          "2501:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2503:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2504:   return (GSS_S_NO_CONTEXT);",
          "2507:        sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2444:          gss_qop_t *qop_state)",
          "2445: {",
          "2446:  OM_uint32 ret;",
          "2447:  ret = gss_unwrap_aead(minor_status,",
          "2449:          input_message_buffer,",
          "2450:          input_assoc_buffer,",
          "2451:          output_payload_buffer,",
          "",
          "[Removed Lines]",
          "2448:          context_handle,",
          "",
          "[Added Lines]",
          "2528:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2530:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2531:   return (GSS_S_NO_CONTEXT);",
          "2534:          sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2464:       int iov_count)",
          "2465: {",
          "2466:  OM_uint32 ret;",
          "2467:  ret = gss_wrap_iov(minor_status,",
          "2469:       conf_req_flag,",
          "2470:       qop_req,",
          "2471:       conf_state,",
          "",
          "[Removed Lines]",
          "2468:       context_handle,",
          "",
          "[Added Lines]",
          "2553:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2555:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2556:   return (GSS_S_NO_CONTEXT);",
          "2559:       sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2483:         int iov_count)",
          "2484: {",
          "2485:  OM_uint32 ret;",
          "2486:  ret = gss_unwrap_iov(minor_status,",
          "2488:         conf_state,",
          "2489:         qop_state,",
          "2490:         iov,",
          "",
          "[Removed Lines]",
          "2487:         context_handle,",
          "",
          "[Added Lines]",
          "2577:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2579:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2580:   return (GSS_S_NO_CONTEXT);",
          "2583:         sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2502:       int iov_count)",
          "2503: {",
          "2504:  OM_uint32 ret;",
          "2505:  ret = gss_wrap_iov_length(minor_status,",
          "2507:       conf_req_flag,",
          "2508:       qop_req,",
          "2509:       conf_state,",
          "",
          "[Removed Lines]",
          "2506:       context_handle,",
          "",
          "[Added Lines]",
          "2601:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2603:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2604:   return (GSS_S_NO_CONTEXT);",
          "2607:       sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2520:   gss_buffer_t input_message_buffer)",
          "2521: {",
          "2522:  OM_uint32 ret;",
          "2523:  ret = gss_complete_auth_token(minor_status,",
          "2525:           input_message_buffer);",
          "2526:  return (ret);",
          "2527: }",
          "",
          "[Removed Lines]",
          "2524:           context_handle,",
          "",
          "[Added Lines]",
          "2624:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2626:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2627:   return (GSS_S_UNAVAILABLE);",
          "2630:           sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2773:     gss_buffer_t prf_out)",
          "2774: {",
          "2775:  OM_uint32 ret;",
          "2776:  ret = gss_pseudo_random(minor_status,",
          "2778:     prf_key,",
          "2779:     prf_in,",
          "2780:     desired_output_len,",
          "",
          "[Removed Lines]",
          "2777:     context,",
          "",
          "[Added Lines]",
          "2882:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context;",
          "2884:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2885:   return (GSS_S_NO_CONTEXT);",
          "2888:     sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2915:          gss_qop_t qop_req, gss_iov_buffer_desc *iov,",
          "2916:          int iov_count)",
          "2917: {",
          "2919:       iov_count);",
          "2920: }",
          "",
          "[Removed Lines]",
          "2918:     return gss_get_mic_iov(minor_status, context_handle, qop_req, iov,",
          "",
          "[Added Lines]",
          "3029:     spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "3031:     if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "3032:      return (GSS_S_NO_CONTEXT);",
          "3034:     return gss_get_mic_iov(minor_status, sc->ctx_handle, qop_req, iov,",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2924:      gss_qop_t *qop_state, gss_iov_buffer_desc *iov,",
          "2925:      int iov_count)",
          "2926: {",
          "2928:          iov_count);",
          "2929: }",
          "",
          "[Removed Lines]",
          "2927:     return gss_verify_mic_iov(minor_status, context_handle, qop_state, iov,",
          "",
          "[Added Lines]",
          "3043:     spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "3045:     if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "3046:      return (GSS_S_NO_CONTEXT);",
          "3048:     return gss_verify_mic_iov(minor_status, sc->ctx_handle, qop_state, iov,",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2933:          gss_ctx_id_t context_handle, gss_qop_t qop_req,",
          "2934:          gss_iov_buffer_desc *iov, int iov_count)",
          "2935: {",
          "2937:       iov_count);",
          "2938: }",
          "",
          "[Removed Lines]",
          "2936:     return gss_get_mic_iov_length(minor_status, context_handle, qop_req, iov,",
          "",
          "[Added Lines]",
          "3057:     spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "3059:     if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "3060:      return (GSS_S_NO_CONTEXT);",
          "3062:     return gss_get_mic_iov_length(minor_status, sc->ctx_handle, qop_req, iov,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b92d828a1e74252a04cb11c1b3040e52d352812",
      "candidate_info": {
        "commit_hash": "7b92d828a1e74252a04cb11c1b3040e52d352812",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/7b92d828a1e74252a04cb11c1b3040e52d352812",
        "files": [
          "src/lib/gssapi/spnego/gssapiP_spnego.h",
          "src/lib/gssapi/spnego/spnego_mech.c"
        ],
        "message": "Fix SPNEGO context aliasing bugs [CVE-2015-2695]\n\nThe SPNEGO mechanism currently replaces its context handle with the\nmechanism context handle upon establishment, under the assumption that\nmost GSS functions are only called after context establishment.  This\nassumption is incorrect, and can lead to aliasing violations for some\nprograms.  Maintain the SPNEGO context structure after context\nestablishment and refer to it in all GSS methods.  Add initiate and\nopened flags to the SPNEGO context structure for use in\ngss_inquire_context() prior to context establishment.\n\nCVE-2015-2695:\n\nIn MIT krb5 1.5 and later, applications which call\ngss_inquire_context() on a partially-established SPNEGO context can\ncause the GSS-API library to read from a pointer using the wrong type,\ngenerally causing a process crash.  This bug may go unnoticed, because\nthe most common SPNEGO authentication scenario establishes the context\nafter just one call to gss_accept_sec_context().  Java server\napplications using the native JGSS provider are vulnerable to this\nbug.  A carefully crafted SPNEGO packet might allow the\ngss_inquire_context() call to succeed with attacker-determined\nresults, but applications should not make access control decisions\nbased on gss_inquire_context() results prior to context establishment.\n\n    CVSSv2 Vector: AV:N/AC:M/Au:N/C:N/I:N/A:C/E:POC/RL:OF/RC:C\n\n[ghudson@mit.edu: several bugfixes, style changes, and edge-case\nbehavior changes; commit message and CVE description]\n\n(cherry picked from commit b51b33f2bc5d1497ddf5bd107f791c101695000d)\n\nticket: 8313 (new)\nversion_fixed: 1.12.5\nstatus: resolved",
        "before_after_code_files": [
          "src/lib/gssapi/spnego/gssapiP_spnego.h||src/lib/gssapi/spnego/gssapiP_spnego.h",
          "src/lib/gssapi/spnego/spnego_mech.c||src/lib/gssapi/spnego/spnego_mech.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/gssapi/spnego/gssapiP_spnego.h||src/lib/gssapi/spnego/gssapiP_spnego.h",
            "src/lib/gssapi/spnego/spnego_mech.c||src/lib/gssapi/spnego/spnego_mech.c"
          ],
          "candidate": [
            "src/lib/gssapi/spnego/gssapiP_spnego.h||src/lib/gssapi/spnego/gssapiP_spnego.h",
            "src/lib/gssapi/spnego/spnego_mech.c||src/lib/gssapi/spnego/spnego_mech.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/gssapi/spnego/gssapiP_spnego.h||src/lib/gssapi/spnego/gssapiP_spnego.h": [
          "File: src/lib/gssapi/spnego/gssapiP_spnego.h -> src/lib/gssapi/spnego/gssapiP_spnego.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:  int firstpass;",
          "103:  int mech_complete;",
          "104:  int nego_done;",
          "105:  OM_uint32 ctx_flags;",
          "106:  gss_name_t internal_name;",
          "107:  gss_OID actual_mech;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:  int initiate;",
          "106:  int opened;",
          "",
          "---------------"
        ],
        "src/lib/gssapi/spnego/spnego_mech.c||src/lib/gssapi/spnego/spnego_mech.c": [
          "File: src/lib/gssapi/spnego/spnego_mech.c -> src/lib/gssapi/spnego/spnego_mech.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:           gss_cred_usage_t, gss_OID_set *);",
          "106: static void release_spnego_ctx(spnego_gss_ctx_id_t *);",
          "107: static void check_spnego_options(spnego_gss_ctx_id_t);",
          "109: static int put_mech_set(gss_OID_set mechSet, gss_buffer_t buf);",
          "110: static int put_input_token(unsigned char **, gss_buffer_t, unsigned int);",
          "111: static int put_mech_oid(unsigned char **, gss_OID_const, unsigned int);",
          "",
          "[Removed Lines]",
          "108: static spnego_gss_ctx_id_t create_spnego_ctx(void);",
          "",
          "[Added Lines]",
          "108: static spnego_gss_ctx_id_t create_spnego_ctx(int);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "443: }",
          "445: static spnego_gss_ctx_id_t",
          "447: {",
          "448:  spnego_gss_ctx_id_t spnego_ctx = NULL;",
          "449:  spnego_ctx = (spnego_gss_ctx_id_t)",
          "",
          "[Removed Lines]",
          "446: create_spnego_ctx(void)",
          "",
          "[Added Lines]",
          "446: create_spnego_ctx(int initiate)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "466:  spnego_ctx->mic_rcvd = 0;",
          "467:  spnego_ctx->mech_complete = 0;",
          "468:  spnego_ctx->nego_done = 0;",
          "469:  spnego_ctx->internal_name = GSS_C_NO_NAME;",
          "470:  spnego_ctx->actual_mech = GSS_C_NO_OID;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "469:  spnego_ctx->opened = 0;",
          "470:  spnego_ctx->initiate = initiate;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "598:  OM_uint32 ret;",
          "599:  spnego_gss_ctx_id_t sc = NULL;",
          "602:  if (sc == NULL)",
          "603:   return GSS_S_FAILURE;",
          "",
          "[Removed Lines]",
          "601:  sc = create_spnego_ctx();",
          "",
          "[Added Lines]",
          "603:  sc = create_spnego_ctx(1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1053:  }",
          "1054:  gss_release_buffer(&tmpmin, &mechtok_out);",
          "1055:  if (ret == GSS_S_COMPLETE) {",
          "1061:   if (actual_mech != NULL)",
          "1063:   if (ret_flags != NULL)",
          "1066:  } else if (ret != GSS_S_CONTINUE_NEEDED) {",
          "1067:   if (spnego_ctx != NULL) {",
          "1068:    gss_delete_sec_context(&tmpmin,",
          "",
          "[Removed Lines]",
          "1065:   release_spnego_ctx(&spnego_ctx);",
          "",
          "[Added Lines]",
          "1055:   spnego_ctx->opened = 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1306:  if (ret != GSS_S_COMPLETE)",
          "1307:   goto cleanup;",
          "1310:  if (sc == NULL) {",
          "1311:   ret = GSS_S_FAILURE;",
          "1312:   goto cleanup;",
          "",
          "[Removed Lines]",
          "1309:  sc = create_spnego_ctx();",
          "",
          "[Added Lines]",
          "1303:  sc = create_spnego_ctx(0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1388:   gss_release_buffer(&tmpmin, &sc->DER_mechTypes);",
          "1389:   assert(mech_wanted != GSS_C_NO_OID);",
          "1390:  } else",
          "1392:  if (sc == NULL) {",
          "1393:   ret = GSS_S_FAILURE;",
          "",
          "[Removed Lines]",
          "1391:   sc = create_spnego_ctx();",
          "",
          "[Added Lines]",
          "1385:   sc = create_spnego_ctx(0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1771:    ret = GSS_S_FAILURE;",
          "1772:  }",
          "1773:  if (ret == GSS_S_COMPLETE) {",
          "1775:   if (sc->internal_name != GSS_C_NO_NAME &&",
          "1776:       src_name != NULL) {",
          "1778:    sc->internal_name = GSS_C_NO_NAME;",
          "1779:   }",
          "1781:  } else if (ret != GSS_S_CONTINUE_NEEDED) {",
          "1782:   if (sc != NULL) {",
          "1783:    gss_delete_sec_context(&tmpmin, &sc->ctx_handle,",
          "",
          "[Removed Lines]",
          "1780:   release_spnego_ctx(&sc);",
          "",
          "[Added Lines]",
          "1768:   sc->opened = 1;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2090:   gss_qop_t *qop_state)",
          "2091: {",
          "2092:  OM_uint32 ret;",
          "2093:  ret = gss_unwrap(minor_status,",
          "2095:    input_message_buffer,",
          "2096:    output_message_buffer,",
          "2097:    conf_state,",
          "",
          "[Removed Lines]",
          "2094:    context_handle,",
          "",
          "[Added Lines]",
          "2086:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2088:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2089:   return (GSS_S_NO_CONTEXT);",
          "2092:    sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2111:   gss_buffer_t output_message_buffer)",
          "2112: {",
          "2113:  OM_uint32 ret;",
          "2114:  ret = gss_wrap(minor_status,",
          "2116:       conf_req_flag,",
          "2117:       qop_req,",
          "2118:       input_message_buffer,",
          "",
          "[Removed Lines]",
          "2115:       context_handle,",
          "",
          "[Added Lines]",
          "2112:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2114:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2115:   return (GSS_S_NO_CONTEXT);",
          "2118:       sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2129:     const gss_buffer_t token_buffer)",
          "2130: {",
          "2131:  OM_uint32 ret;",
          "2132:  ret = gss_process_context_token(minor_status,",
          "2134:      token_buffer);",
          "2136:  return (ret);",
          "",
          "[Removed Lines]",
          "2133:      context_handle,",
          "",
          "[Added Lines]",
          "2135:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2138:  if (!sc->opened)",
          "2139:   return (GSS_S_DEFECTIVE_TOKEN);",
          "2142:      sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2154:  if (*ctx == NULL)",
          "2155:   return (GSS_S_COMPLETE);",
          "2171:  return (ret);",
          "2172: }",
          "",
          "[Removed Lines]",
          "2160:  if ((*ctx)->magic_num == SPNEGO_MAGIC_ID) {",
          "2161:   (void) gss_delete_sec_context(minor_status,",
          "2162:         &(*ctx)->ctx_handle,",
          "2163:         output_token);",
          "2164:   (void) release_spnego_ctx(ctx);",
          "2165:  } else {",
          "2166:   ret = gss_delete_sec_context(minor_status,",
          "2167:         context_handle,",
          "2168:         output_token);",
          "2169:  }",
          "",
          "[Added Lines]",
          "2166:  (void) gss_delete_sec_context(minor_status, &(*ctx)->ctx_handle,",
          "2167:           output_token);",
          "2168:  (void) release_spnego_ctx(ctx);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2178:    OM_uint32 *time_rec)",
          "2179: {",
          "2180:  OM_uint32 ret;",
          "2181:  ret = gss_context_time(minor_status,",
          "2183:        time_rec);",
          "2184:  return (ret);",
          "2185: }",
          "",
          "[Removed Lines]",
          "2182:        context_handle,",
          "",
          "[Added Lines]",
          "2180:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2182:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2183:   return (GSS_S_NO_CONTEXT);",
          "2186:        sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2191:        gss_buffer_t interprocess_token)",
          "2192: {",
          "2193:  OM_uint32 ret;",
          "2194:  ret = gss_export_sec_context(minor_status,",
          "2196:         interprocess_token);",
          "2197:  return (ret);",
          "2198: }",
          "",
          "[Removed Lines]",
          "2195:         context_handle,",
          "",
          "[Added Lines]",
          "2198:  spnego_gss_ctx_id_t sc = *(spnego_gss_ctx_id_t *)context_handle;",
          "2202:  if (!sc->opened)",
          "2203:   return GSS_S_UNAVAILABLE;",
          "2206:         &sc->ctx_handle,",
          "2208:  if (sc->ctx_handle == GSS_C_NO_CONTEXT) {",
          "2209:   release_spnego_ctx(&sc);",
          "2211:  }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2203:  const gss_buffer_t interprocess_token,",
          "2204:  gss_ctx_id_t  *context_handle)",
          "2205: {",
          "2211: }",
          "",
          "[Removed Lines]",
          "2206:  OM_uint32 ret;",
          "2207:  ret = gss_import_sec_context(minor_status,",
          "2208:         interprocess_token,",
          "2209:         context_handle);",
          "2210:  return (ret);",
          "",
          "[Added Lines]",
          "2226:  return GSS_S_UNAVAILABLE;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2224:    int  *opened)",
          "2225: {",
          "2226:  OM_uint32 ret = GSS_S_COMPLETE;",
          "2238:  return (ret);",
          "2239: }",
          "",
          "[Removed Lines]",
          "2228:  ret = gss_inquire_context(minor_status,",
          "2229:     context_handle,",
          "2230:     src_name,",
          "2231:     targ_name,",
          "2232:     lifetime_rec,",
          "2233:     mech_type,",
          "2234:     ctx_flags,",
          "2235:     locally_initiated,",
          "2236:     opened);",
          "",
          "[Added Lines]",
          "2243:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2245:  if (src_name != NULL)",
          "2247:  if (targ_name != NULL)",
          "2249:  if (lifetime_rec != NULL)",
          "2251:  if (mech_type != NULL)",
          "2253:  if (ctx_flags != NULL)",
          "2255:  if (locally_initiated != NULL)",
          "2257:  if (opened != NULL)",
          "2260:  if (sc->ctx_handle != GSS_C_NO_CONTEXT) {",
          "2261:   ret = gss_inquire_context(minor_status, sc->ctx_handle,",
          "2262:        src_name, targ_name, lifetime_rec,",
          "2263:        mech_type, ctx_flags, NULL, NULL);",
          "2264:  }",
          "2266:  if (!sc->opened) {",
          "2272:   if (mech_type != NULL)",
          "2280:   if (ctx_flags != NULL) {",
          "2283:   }",
          "2284:  }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2248:  OM_uint32 *max_input_size)",
          "2249: {",
          "2250:  OM_uint32 ret;",
          "2251:  ret = gss_wrap_size_limit(minor_status,",
          "2253:     conf_req_flag,",
          "2254:     qop_req,",
          "2255:     req_output_size,",
          "",
          "[Removed Lines]",
          "2252:     context_handle,",
          "",
          "[Added Lines]",
          "2299:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2301:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2302:   return (GSS_S_NO_CONTEXT);",
          "2305:     sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2266:   gss_buffer_t message_token)",
          "2267: {",
          "2268:  OM_uint32 ret;",
          "2269:  ret = gss_get_mic(minor_status,",
          "2271:       qop_req,",
          "2272:       message_buffer,",
          "2273:       message_token);",
          "",
          "[Removed Lines]",
          "2270:       context_handle,",
          "",
          "[Added Lines]",
          "2322:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2324:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2325:   return (GSS_S_NO_CONTEXT);",
          "2328:       sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2283:   gss_qop_t *qop_state)",
          "2284: {",
          "2285:  OM_uint32 ret;",
          "2286:  ret = gss_verify_mic(minor_status,",
          "2288:        msg_buffer,",
          "2289:        token_buffer,",
          "2290:        qop_state);",
          "",
          "[Removed Lines]",
          "2287:        context_handle,",
          "",
          "[Added Lines]",
          "2344:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2346:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2347:   return (GSS_S_NO_CONTEXT);",
          "2350:        sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2299:   gss_buffer_set_t *data_set)",
          "2300: {",
          "2301:  OM_uint32 ret;",
          "2302:  ret = gss_inquire_sec_context_by_oid(minor_status,",
          "2304:        desired_object,",
          "2305:        data_set);",
          "2306:  return (ret);",
          "",
          "[Removed Lines]",
          "2303:        context_handle,",
          "",
          "[Added Lines]",
          "2365:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2368:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2369:   return (GSS_S_UNAVAILABLE);",
          "2372:        sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2369:   const gss_buffer_t value)",
          "2370: {",
          "2371:  OM_uint32 ret;",
          "2372:  ret = gss_set_sec_context_option(minor_status,",
          "2374:        desired_object,",
          "2375:        value);",
          "2376:  return (ret);",
          "",
          "[Removed Lines]",
          "2373:        context_handle,",
          "",
          "[Added Lines]",
          "2441:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)*context_handle;",
          "2445:  if (sc == NULL || sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2446:   return (GSS_S_UNAVAILABLE);",
          "2449:        &sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2387:        gss_buffer_t output_message_buffer)",
          "2388: {",
          "2389:  OM_uint32 ret;",
          "2390:  ret = gss_wrap_aead(minor_status,",
          "2392:        conf_req_flag,",
          "2393:        qop_req,",
          "2394:        input_assoc_buffer,",
          "",
          "[Removed Lines]",
          "2391:        context_handle,",
          "",
          "[Added Lines]",
          "2466:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2468:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2469:   return (GSS_S_NO_CONTEXT);",
          "2472:        sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2409:          gss_qop_t *qop_state)",
          "2410: {",
          "2411:  OM_uint32 ret;",
          "2412:  ret = gss_unwrap_aead(minor_status,",
          "2414:          input_message_buffer,",
          "2415:          input_assoc_buffer,",
          "2416:          output_payload_buffer,",
          "",
          "[Removed Lines]",
          "2413:          context_handle,",
          "",
          "[Added Lines]",
          "2493:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2495:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2496:   return (GSS_S_NO_CONTEXT);",
          "2499:          sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2429:       int iov_count)",
          "2430: {",
          "2431:  OM_uint32 ret;",
          "2432:  ret = gss_wrap_iov(minor_status,",
          "2434:       conf_req_flag,",
          "2435:       qop_req,",
          "2436:       conf_state,",
          "",
          "[Removed Lines]",
          "2433:       context_handle,",
          "",
          "[Added Lines]",
          "2518:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2520:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2521:   return (GSS_S_NO_CONTEXT);",
          "2524:       sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2448:         int iov_count)",
          "2449: {",
          "2450:  OM_uint32 ret;",
          "2451:  ret = gss_unwrap_iov(minor_status,",
          "2453:         conf_state,",
          "2454:         qop_state,",
          "2455:         iov,",
          "",
          "[Removed Lines]",
          "2452:         context_handle,",
          "",
          "[Added Lines]",
          "2542:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2544:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2545:   return (GSS_S_NO_CONTEXT);",
          "2548:         sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2467:       int iov_count)",
          "2468: {",
          "2469:  OM_uint32 ret;",
          "2470:  ret = gss_wrap_iov_length(minor_status,",
          "2472:       conf_req_flag,",
          "2473:       qop_req,",
          "2474:       conf_state,",
          "",
          "[Removed Lines]",
          "2471:       context_handle,",
          "",
          "[Added Lines]",
          "2566:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2568:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2569:   return (GSS_S_NO_CONTEXT);",
          "2572:       sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2485:   gss_buffer_t input_message_buffer)",
          "2486: {",
          "2487:  OM_uint32 ret;",
          "2488:  ret = gss_complete_auth_token(minor_status,",
          "2490:           input_message_buffer);",
          "2491:  return (ret);",
          "2492: }",
          "",
          "[Removed Lines]",
          "2489:           context_handle,",
          "",
          "[Added Lines]",
          "2589:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2591:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2592:   return (GSS_S_UNAVAILABLE);",
          "2595:           sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2738:     gss_buffer_t prf_out)",
          "2739: {",
          "2740:  OM_uint32 ret;",
          "2741:  ret = gss_pseudo_random(minor_status,",
          "2743:     prf_key,",
          "2744:     prf_in,",
          "2745:     desired_output_len,",
          "",
          "[Removed Lines]",
          "2742:     context,",
          "",
          "[Added Lines]",
          "2847:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context;",
          "2849:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2850:   return (GSS_S_NO_CONTEXT);",
          "2853:     sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2880:          gss_qop_t qop_req, gss_iov_buffer_desc *iov,",
          "2881:          int iov_count)",
          "2882: {",
          "2884:       iov_count);",
          "2885: }",
          "",
          "[Removed Lines]",
          "2883:     return gss_get_mic_iov(minor_status, context_handle, qop_req, iov,",
          "",
          "[Added Lines]",
          "2994:     spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2996:     if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2997:      return (GSS_S_NO_CONTEXT);",
          "2999:     return gss_get_mic_iov(minor_status, sc->ctx_handle, qop_req, iov,",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2889:      gss_qop_t *qop_state, gss_iov_buffer_desc *iov,",
          "2890:      int iov_count)",
          "2891: {",
          "2893:          iov_count);",
          "2894: }",
          "",
          "[Removed Lines]",
          "2892:     return gss_verify_mic_iov(minor_status, context_handle, qop_state, iov,",
          "",
          "[Added Lines]",
          "3008:     spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "3010:     if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "3011:      return (GSS_S_NO_CONTEXT);",
          "3013:     return gss_verify_mic_iov(minor_status, sc->ctx_handle, qop_state, iov,",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2898:          gss_ctx_id_t context_handle, gss_qop_t qop_req,",
          "2899:          gss_iov_buffer_desc *iov, int iov_count)",
          "2900: {",
          "2902:       iov_count);",
          "2903: }",
          "",
          "[Removed Lines]",
          "2901:     return gss_get_mic_iov_length(minor_status, context_handle, qop_req, iov,",
          "",
          "[Added Lines]",
          "3022:     spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "3024:     if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "3025:      return (GSS_S_NO_CONTEXT);",
          "3027:     return gss_get_mic_iov_length(minor_status, sc->ctx_handle, qop_req, iov,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31fb730f1ad708f230e4387e02ed2f89b93c3607",
      "candidate_info": {
        "commit_hash": "31fb730f1ad708f230e4387e02ed2f89b93c3607",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/31fb730f1ad708f230e4387e02ed2f89b93c3607",
        "files": [
          "src/lib/gssapi/spnego/gssapiP_spnego.h",
          "src/lib/gssapi/spnego/spnego_mech.c"
        ],
        "message": "Fix SPNEGO context aliasing bugs [CVE-2015-2695]\n\nThe SPNEGO mechanism currently replaces its context handle with the\nmechanism context handle upon establishment, under the assumption that\nmost GSS functions are only called after context establishment.  This\nassumption is incorrect, and can lead to aliasing violations for some\nprograms.  Maintain the SPNEGO context structure after context\nestablishment and refer to it in all GSS methods.  Add initiate and\nopened flags to the SPNEGO context structure for use in\ngss_inquire_context() prior to context establishment.\n\nCVE-2015-2695:\n\nIn MIT krb5 1.5 and later, applications which call\ngss_inquire_context() on a partially-established SPNEGO context can\ncause the GSS-API library to read from a pointer using the wrong type,\ngenerally causing a process crash.  This bug may go unnoticed, because\nthe most common SPNEGO authentication scenario establishes the context\nafter just one call to gss_accept_sec_context().  Java server\napplications using the native JGSS provider are vulnerable to this\nbug.  A carefully crafted SPNEGO packet might allow the\ngss_inquire_context() call to succeed with attacker-determined\nresults, but applications should not make access control decisions\nbased on gss_inquire_context() results prior to context establishment.\n\n    CVSSv2 Vector: AV:N/AC:M/Au:N/C:N/I:N/A:C/E:POC/RL:OF/RC:C\n\n[ghudson@mit.edu: several bugfixes, style changes, and edge-case\nbehavior changes; commit message and CVE description]\n\n(cherry picked from commit b51b33f2bc5d1497ddf5bd107f791c101695000d)\n\nticket: 8244\nversion_fixed: 1.14",
        "before_after_code_files": [
          "src/lib/gssapi/spnego/gssapiP_spnego.h||src/lib/gssapi/spnego/gssapiP_spnego.h",
          "src/lib/gssapi/spnego/spnego_mech.c||src/lib/gssapi/spnego/spnego_mech.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/gssapi/spnego/gssapiP_spnego.h||src/lib/gssapi/spnego/gssapiP_spnego.h",
            "src/lib/gssapi/spnego/spnego_mech.c||src/lib/gssapi/spnego/spnego_mech.c"
          ],
          "candidate": [
            "src/lib/gssapi/spnego/gssapiP_spnego.h||src/lib/gssapi/spnego/gssapiP_spnego.h",
            "src/lib/gssapi/spnego/spnego_mech.c||src/lib/gssapi/spnego/spnego_mech.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/gssapi/spnego/gssapiP_spnego.h||src/lib/gssapi/spnego/gssapiP_spnego.h": [
          "File: src/lib/gssapi/spnego/gssapiP_spnego.h -> src/lib/gssapi/spnego/gssapiP_spnego.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:  int firstpass;",
          "104:  int mech_complete;",
          "105:  int nego_done;",
          "106:  OM_uint32 ctx_flags;",
          "107:  gss_name_t internal_name;",
          "108:  gss_OID actual_mech;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:  int initiate;",
          "107:  int opened;",
          "",
          "---------------"
        ],
        "src/lib/gssapi/spnego/spnego_mech.c||src/lib/gssapi/spnego/spnego_mech.c": [
          "File: src/lib/gssapi/spnego/spnego_mech.c -> src/lib/gssapi/spnego/spnego_mech.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:           gss_cred_usage_t, gss_OID_set *);",
          "103: static void release_spnego_ctx(spnego_gss_ctx_id_t *);",
          "104: static void check_spnego_options(spnego_gss_ctx_id_t);",
          "106: static int put_mech_set(gss_OID_set mechSet, gss_buffer_t buf);",
          "107: static int put_input_token(unsigned char **, gss_buffer_t, unsigned int);",
          "108: static int put_mech_oid(unsigned char **, gss_OID_const, unsigned int);",
          "",
          "[Removed Lines]",
          "105: static spnego_gss_ctx_id_t create_spnego_ctx(void);",
          "",
          "[Added Lines]",
          "105: static spnego_gss_ctx_id_t create_spnego_ctx(int);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "454: }",
          "456: static spnego_gss_ctx_id_t",
          "458: {",
          "459:  spnego_gss_ctx_id_t spnego_ctx = NULL;",
          "460:  spnego_ctx = (spnego_gss_ctx_id_t)",
          "",
          "[Removed Lines]",
          "457: create_spnego_ctx(void)",
          "",
          "[Added Lines]",
          "457: create_spnego_ctx(int initiate)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "477:  spnego_ctx->mic_rcvd = 0;",
          "478:  spnego_ctx->mech_complete = 0;",
          "479:  spnego_ctx->nego_done = 0;",
          "480:  spnego_ctx->internal_name = GSS_C_NO_NAME;",
          "481:  spnego_ctx->actual_mech = GSS_C_NO_OID;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "480:  spnego_ctx->opened = 0;",
          "481:  spnego_ctx->initiate = initiate;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "642:  OM_uint32 ret;",
          "643:  spnego_gss_ctx_id_t sc = NULL;",
          "646:  if (sc == NULL)",
          "647:   return GSS_S_FAILURE;",
          "",
          "[Removed Lines]",
          "645:  sc = create_spnego_ctx();",
          "",
          "[Added Lines]",
          "647:  sc = create_spnego_ctx(1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1108:  }",
          "1109:  gss_release_buffer(&tmpmin, &mechtok_out);",
          "1110:  if (ret == GSS_S_COMPLETE) {",
          "1116:   if (actual_mech != NULL)",
          "1118:   if (ret_flags != NULL)",
          "1121:  } else if (ret != GSS_S_CONTINUE_NEEDED) {",
          "1122:   if (spnego_ctx != NULL) {",
          "1123:    gss_delete_sec_context(&tmpmin,",
          "",
          "[Removed Lines]",
          "1120:   release_spnego_ctx(&spnego_ctx);",
          "",
          "[Added Lines]",
          "1110:   spnego_ctx->opened = 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1285:  if (ret != GSS_S_COMPLETE)",
          "1286:   goto cleanup;",
          "1289:  if (sc == NULL) {",
          "1290:   ret = GSS_S_FAILURE;",
          "1291:   goto cleanup;",
          "",
          "[Removed Lines]",
          "1288:  sc = create_spnego_ctx();",
          "",
          "[Added Lines]",
          "1282:  sc = create_spnego_ctx(0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1367:   gss_release_buffer(&tmpmin, &sc->DER_mechTypes);",
          "1368:   assert(mech_wanted != GSS_C_NO_OID);",
          "1369:  } else",
          "1371:  if (sc == NULL) {",
          "1372:   ret = GSS_S_FAILURE;",
          "",
          "[Removed Lines]",
          "1370:   sc = create_spnego_ctx();",
          "",
          "[Added Lines]",
          "1364:   sc = create_spnego_ctx(0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1750:    ret = GSS_S_FAILURE;",
          "1751:  }",
          "1752:  if (ret == GSS_S_COMPLETE) {",
          "1754:   if (sc->internal_name != GSS_C_NO_NAME &&",
          "1755:       src_name != NULL) {",
          "1757:    sc->internal_name = GSS_C_NO_NAME;",
          "1758:   }",
          "1760:  } else if (ret != GSS_S_CONTINUE_NEEDED) {",
          "1761:   if (sc != NULL) {",
          "1762:    gss_delete_sec_context(&tmpmin, &sc->ctx_handle,",
          "",
          "[Removed Lines]",
          "1759:   release_spnego_ctx(&sc);",
          "",
          "[Added Lines]",
          "1747:   sc->opened = 1;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2069:   gss_qop_t *qop_state)",
          "2070: {",
          "2071:  OM_uint32 ret;",
          "2072:  ret = gss_unwrap(minor_status,",
          "2074:    input_message_buffer,",
          "2075:    output_message_buffer,",
          "2076:    conf_state,",
          "",
          "[Removed Lines]",
          "2073:    context_handle,",
          "",
          "[Added Lines]",
          "2065:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2067:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2068:   return (GSS_S_NO_CONTEXT);",
          "2071:    sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2090:   gss_buffer_t output_message_buffer)",
          "2091: {",
          "2092:  OM_uint32 ret;",
          "2093:  ret = gss_wrap(minor_status,",
          "2095:       conf_req_flag,",
          "2096:       qop_req,",
          "2097:       input_message_buffer,",
          "",
          "[Removed Lines]",
          "2094:       context_handle,",
          "",
          "[Added Lines]",
          "2091:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2093:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2094:   return (GSS_S_NO_CONTEXT);",
          "2097:       sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2108:     const gss_buffer_t token_buffer)",
          "2109: {",
          "2110:  OM_uint32 ret;",
          "2111:  ret = gss_process_context_token(minor_status,",
          "2113:      token_buffer);",
          "2115:  return (ret);",
          "",
          "[Removed Lines]",
          "2112:      context_handle,",
          "",
          "[Added Lines]",
          "2114:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2117:  if (!sc->opened)",
          "2118:   return (GSS_S_DEFECTIVE_TOKEN);",
          "2121:      sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2133:  if (*ctx == NULL)",
          "2134:   return (GSS_S_COMPLETE);",
          "2150:  return (ret);",
          "2151: }",
          "",
          "[Removed Lines]",
          "2139:  if ((*ctx)->magic_num == SPNEGO_MAGIC_ID) {",
          "2140:   (void) gss_delete_sec_context(minor_status,",
          "2141:         &(*ctx)->ctx_handle,",
          "2142:         output_token);",
          "2143:   (void) release_spnego_ctx(ctx);",
          "2144:  } else {",
          "2145:   ret = gss_delete_sec_context(minor_status,",
          "2146:         context_handle,",
          "2147:         output_token);",
          "2148:  }",
          "",
          "[Added Lines]",
          "2145:  (void) gss_delete_sec_context(minor_status, &(*ctx)->ctx_handle,",
          "2146:           output_token);",
          "2147:  (void) release_spnego_ctx(ctx);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2157:    OM_uint32 *time_rec)",
          "2158: {",
          "2159:  OM_uint32 ret;",
          "2160:  ret = gss_context_time(minor_status,",
          "2162:        time_rec);",
          "2163:  return (ret);",
          "2164: }",
          "",
          "[Removed Lines]",
          "2161:        context_handle,",
          "",
          "[Added Lines]",
          "2159:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2161:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2162:   return (GSS_S_NO_CONTEXT);",
          "2165:        sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2170:        gss_buffer_t interprocess_token)",
          "2171: {",
          "2172:  OM_uint32 ret;",
          "2173:  ret = gss_export_sec_context(minor_status,",
          "2175:         interprocess_token);",
          "2176:  return (ret);",
          "2177: }",
          "",
          "[Removed Lines]",
          "2174:         context_handle,",
          "",
          "[Added Lines]",
          "2177:  spnego_gss_ctx_id_t sc = *(spnego_gss_ctx_id_t *)context_handle;",
          "2181:  if (!sc->opened)",
          "2182:   return GSS_S_UNAVAILABLE;",
          "2185:         &sc->ctx_handle,",
          "2187:  if (sc->ctx_handle == GSS_C_NO_CONTEXT) {",
          "2188:   release_spnego_ctx(&sc);",
          "2190:  }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2182:  const gss_buffer_t interprocess_token,",
          "2183:  gss_ctx_id_t  *context_handle)",
          "2184: {",
          "2190: }",
          "",
          "[Removed Lines]",
          "2185:  OM_uint32 ret;",
          "2186:  ret = gss_import_sec_context(minor_status,",
          "2187:         interprocess_token,",
          "2188:         context_handle);",
          "2189:  return (ret);",
          "",
          "[Added Lines]",
          "2205:  return GSS_S_UNAVAILABLE;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2203:    int  *opened)",
          "2204: {",
          "2205:  OM_uint32 ret = GSS_S_COMPLETE;",
          "2217:  return (ret);",
          "2218: }",
          "",
          "[Removed Lines]",
          "2207:  ret = gss_inquire_context(minor_status,",
          "2208:     context_handle,",
          "2209:     src_name,",
          "2210:     targ_name,",
          "2211:     lifetime_rec,",
          "2212:     mech_type,",
          "2213:     ctx_flags,",
          "2214:     locally_initiated,",
          "2215:     opened);",
          "",
          "[Added Lines]",
          "2222:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2224:  if (src_name != NULL)",
          "2226:  if (targ_name != NULL)",
          "2228:  if (lifetime_rec != NULL)",
          "2230:  if (mech_type != NULL)",
          "2232:  if (ctx_flags != NULL)",
          "2234:  if (locally_initiated != NULL)",
          "2236:  if (opened != NULL)",
          "2239:  if (sc->ctx_handle != GSS_C_NO_CONTEXT) {",
          "2240:   ret = gss_inquire_context(minor_status, sc->ctx_handle,",
          "2241:        src_name, targ_name, lifetime_rec,",
          "2242:        mech_type, ctx_flags, NULL, NULL);",
          "2243:  }",
          "2245:  if (!sc->opened) {",
          "2251:   if (mech_type != NULL)",
          "2259:   if (ctx_flags != NULL) {",
          "2262:   }",
          "2263:  }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2227:  OM_uint32 *max_input_size)",
          "2228: {",
          "2229:  OM_uint32 ret;",
          "2230:  ret = gss_wrap_size_limit(minor_status,",
          "2232:     conf_req_flag,",
          "2233:     qop_req,",
          "2234:     req_output_size,",
          "",
          "[Removed Lines]",
          "2231:     context_handle,",
          "",
          "[Added Lines]",
          "2278:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2280:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2281:   return (GSS_S_NO_CONTEXT);",
          "2284:     sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2245:   gss_buffer_t message_token)",
          "2246: {",
          "2247:  OM_uint32 ret;",
          "2248:  ret = gss_get_mic(minor_status,",
          "2250:       qop_req,",
          "2251:       message_buffer,",
          "2252:       message_token);",
          "",
          "[Removed Lines]",
          "2249:       context_handle,",
          "",
          "[Added Lines]",
          "2301:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2303:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2304:   return (GSS_S_NO_CONTEXT);",
          "2307:       sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2262:   gss_qop_t *qop_state)",
          "2263: {",
          "2264:  OM_uint32 ret;",
          "2265:  ret = gss_verify_mic(minor_status,",
          "2267:        msg_buffer,",
          "2268:        token_buffer,",
          "2269:        qop_state);",
          "",
          "[Removed Lines]",
          "2266:        context_handle,",
          "",
          "[Added Lines]",
          "2323:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2325:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2326:   return (GSS_S_NO_CONTEXT);",
          "2329:        sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2278:   gss_buffer_set_t *data_set)",
          "2279: {",
          "2280:  OM_uint32 ret;",
          "2281:  ret = gss_inquire_sec_context_by_oid(minor_status,",
          "2283:        desired_object,",
          "2284:        data_set);",
          "2285:  return (ret);",
          "",
          "[Removed Lines]",
          "2282:        context_handle,",
          "",
          "[Added Lines]",
          "2344:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2347:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2348:   return (GSS_S_UNAVAILABLE);",
          "2351:        sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2359:   const gss_buffer_t value)",
          "2360: {",
          "2361:  OM_uint32 ret;",
          "2362:  ret = gss_set_sec_context_option(minor_status,",
          "2364:        desired_object,",
          "2365:        value);",
          "2366:  return (ret);",
          "",
          "[Removed Lines]",
          "2363:        context_handle,",
          "",
          "[Added Lines]",
          "2431:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)*context_handle;",
          "2435:  if (sc == NULL || sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2436:   return (GSS_S_UNAVAILABLE);",
          "2439:        &sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2377:        gss_buffer_t output_message_buffer)",
          "2378: {",
          "2379:  OM_uint32 ret;",
          "2380:  ret = gss_wrap_aead(minor_status,",
          "2382:        conf_req_flag,",
          "2383:        qop_req,",
          "2384:        input_assoc_buffer,",
          "",
          "[Removed Lines]",
          "2381:        context_handle,",
          "",
          "[Added Lines]",
          "2456:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2458:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2459:   return (GSS_S_NO_CONTEXT);",
          "2462:        sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2399:          gss_qop_t *qop_state)",
          "2400: {",
          "2401:  OM_uint32 ret;",
          "2402:  ret = gss_unwrap_aead(minor_status,",
          "2404:          input_message_buffer,",
          "2405:          input_assoc_buffer,",
          "2406:          output_payload_buffer,",
          "",
          "[Removed Lines]",
          "2403:          context_handle,",
          "",
          "[Added Lines]",
          "2483:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2485:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2486:   return (GSS_S_NO_CONTEXT);",
          "2489:          sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2419:       int iov_count)",
          "2420: {",
          "2421:  OM_uint32 ret;",
          "2422:  ret = gss_wrap_iov(minor_status,",
          "2424:       conf_req_flag,",
          "2425:       qop_req,",
          "2426:       conf_state,",
          "",
          "[Removed Lines]",
          "2423:       context_handle,",
          "",
          "[Added Lines]",
          "2508:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2510:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2511:   return (GSS_S_NO_CONTEXT);",
          "2514:       sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2438:         int iov_count)",
          "2439: {",
          "2440:  OM_uint32 ret;",
          "2441:  ret = gss_unwrap_iov(minor_status,",
          "2443:         conf_state,",
          "2444:         qop_state,",
          "2445:         iov,",
          "",
          "[Removed Lines]",
          "2442:         context_handle,",
          "",
          "[Added Lines]",
          "2532:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2534:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2535:   return (GSS_S_NO_CONTEXT);",
          "2538:         sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2457:       int iov_count)",
          "2458: {",
          "2459:  OM_uint32 ret;",
          "2460:  ret = gss_wrap_iov_length(minor_status,",
          "2462:       conf_req_flag,",
          "2463:       qop_req,",
          "2464:       conf_state,",
          "",
          "[Removed Lines]",
          "2461:       context_handle,",
          "",
          "[Added Lines]",
          "2556:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2558:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2559:   return (GSS_S_NO_CONTEXT);",
          "2562:       sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2475:   gss_buffer_t input_message_buffer)",
          "2476: {",
          "2477:  OM_uint32 ret;",
          "2478:  ret = gss_complete_auth_token(minor_status,",
          "2480:           input_message_buffer);",
          "2481:  return (ret);",
          "2482: }",
          "",
          "[Removed Lines]",
          "2479:           context_handle,",
          "",
          "[Added Lines]",
          "2579:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2581:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2582:   return (GSS_S_UNAVAILABLE);",
          "2585:           sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2721:     gss_buffer_t prf_out)",
          "2722: {",
          "2723:  OM_uint32 ret;",
          "2724:  ret = gss_pseudo_random(minor_status,",
          "2726:     prf_key,",
          "2727:     prf_in,",
          "2728:     desired_output_len,",
          "",
          "[Removed Lines]",
          "2725:     context,",
          "",
          "[Added Lines]",
          "2830:  spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context;",
          "2832:  if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2833:   return (GSS_S_NO_CONTEXT);",
          "2836:     sc->ctx_handle,",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2863:          gss_qop_t qop_req, gss_iov_buffer_desc *iov,",
          "2864:          int iov_count)",
          "2865: {",
          "2867:       iov_count);",
          "2868: }",
          "",
          "[Removed Lines]",
          "2866:     return gss_get_mic_iov(minor_status, context_handle, qop_req, iov,",
          "",
          "[Added Lines]",
          "2977:     spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2979:     if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2980:      return (GSS_S_NO_CONTEXT);",
          "2982:     return gss_get_mic_iov(minor_status, sc->ctx_handle, qop_req, iov,",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2872:      gss_qop_t *qop_state, gss_iov_buffer_desc *iov,",
          "2873:      int iov_count)",
          "2874: {",
          "2876:          iov_count);",
          "2877: }",
          "",
          "[Removed Lines]",
          "2875:     return gss_verify_mic_iov(minor_status, context_handle, qop_state, iov,",
          "",
          "[Added Lines]",
          "2991:     spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "2993:     if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "2994:      return (GSS_S_NO_CONTEXT);",
          "2996:     return gss_verify_mic_iov(minor_status, sc->ctx_handle, qop_state, iov,",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2881:          gss_ctx_id_t context_handle, gss_qop_t qop_req,",
          "2882:          gss_iov_buffer_desc *iov, int iov_count)",
          "2883: {",
          "2885:       iov_count);",
          "2886: }",
          "",
          "[Removed Lines]",
          "2884:     return gss_get_mic_iov_length(minor_status, context_handle, qop_req, iov,",
          "",
          "[Added Lines]",
          "3005:     spnego_gss_ctx_id_t sc = (spnego_gss_ctx_id_t)context_handle;",
          "3007:     if (sc->ctx_handle == GSS_C_NO_CONTEXT)",
          "3008:      return (GSS_S_NO_CONTEXT);",
          "3010:     return gss_get_mic_iov_length(minor_status, sc->ctx_handle, qop_req, iov,",
          "",
          "---------------"
        ]
      }
    }
  ]
}