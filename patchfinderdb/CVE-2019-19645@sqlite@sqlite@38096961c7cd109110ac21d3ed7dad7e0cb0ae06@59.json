{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a42325e7313c3391fc045d084653000871c9f347",
      "candidate_info": {
        "commit_hash": "a42325e7313c3391fc045d084653000871c9f347",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a42325e7313c3391fc045d084653000871c9f347",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "The OP_Eq and OP_Ne operators have a special P5 value SQLITE_NOTNULL that asserts that the values are not null.  Except that is not always true for a corrupt database.  Adjust the assert() and add a testcase() to make this point clear.\n\nFossilOrigin-Name: a3fdb2c78d23b94d68dc08126b22d03152ac6068496a42402cdfb336cd4a7e33",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 48438bb35b48955a1df83ef90f0ef6c9cfed0b16d2e938f36d74ad9d53b4b5b4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1926:       assert( pOp->opcode==OP_Eq || pOp->opcode==OP_Ne );",
          "1927:       assert( (flags1 & MEM_Cleared)==0 );",
          "1929:       if( (flags1&flags3&MEM_Null)!=0",
          "1930:        && (flags3&MEM_Cleared)==0",
          "1931:       ){",
          "",
          "[Removed Lines]",
          "1928:       assert( (pOp->p5 & SQLITE_JUMPIFNULL)==0 );",
          "",
          "[Added Lines]",
          "1928:       assert( (pOp->p5 & SQLITE_JUMPIFNULL)==0 || CORRUPT_DB );",
          "1929:       testcase( (pOp->p5 & SQLITE_JUMPIFNULL)!=0 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5860a61d59e78da7d3bb24346c4791343568a5c6",
      "candidate_info": {
        "commit_hash": "5860a61d59e78da7d3bb24346c4791343568a5c6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5860a61d59e78da7d3bb24346c4791343568a5c6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Further performance improvements to btreeInitPage().\n\nFossilOrigin-Name: 93ae382e97c23c90312739481e47ef7f9bc475a8382c063a2de2986c950c0aec",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6eb38c59a81d27b7c1f3edad84b27a1114df6f1607282b2be1b5de9c7decc512",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1929:   return SQLITE_OK;",
          "1930: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1936: static SQLITE_NOINLINE int btreeCellSizeCheck(MemPage *pPage){",
          "1946:   iCellFirst = pPage->cellOffset + 2*pPage->nCell;",
          "1947:   usableSize = pPage->pBt->usableSize;",
          "1948:   iCellLast = usableSize - 4;",
          "1949:   data = pPage->aData;",
          "1950:   cellOffset = pPage->cellOffset;",
          "1951:   if( !pPage->leaf ) iCellLast--;",
          "1952:   for(i=0; i<pPage->nCell; i++){",
          "1953:     pc = get2byteAligned(&data[cellOffset+i*2]);",
          "1954:     testcase( pc==iCellFirst );",
          "1955:     testcase( pc==iCellLast );",
          "1956:     if( pc<iCellFirst || pc>iCellLast ){",
          "1957:       return SQLITE_CORRUPT_PAGE(pPage);",
          "1958:     }",
          "1959:     sz = pPage->xCellSize(pPage, &data[pc]);",
          "1960:     testcase( pc+sz==usableSize );",
          "1961:     if( pc+sz>usableSize ){",
          "1962:       return SQLITE_CORRUPT_PAGE(pPage);",
          "1963:     }",
          "1964:   }",
          "1965:   return SQLITE_OK;",
          "1966: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1957:   assert( pPage->isInit==0 );",
          "1959:   pBt = pPage->pBt;",
          "1965:     return SQLITE_CORRUPT_PAGE(pPage);",
          "1966:   }",
          "1967:   assert( pBt->pageSize>=512 && pBt->pageSize<=65536 );",
          "1968:   pPage->maskPage = (u16)(pBt->pageSize - 1);",
          "1969:   pPage->nOverflow = 0;",
          "1978:   if( pPage->nCell>MX_CELL(pBt) ){",
          "1980:     return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "[Removed Lines]",
          "1960:   hdr = pPage->hdrOffset;",
          "1961:   data = pPage->aData;",
          "1964:   if( decodeFlags(pPage, data[hdr]) ){",
          "1970:   usableSize = pBt->usableSize;",
          "1971:   pPage->cellOffset = cellOffset = hdr + 8 + pPage->childPtrSize;",
          "1972:   pPage->aDataEnd = &data[usableSize];",
          "1973:   pPage->aCellIdx = &data[cellOffset];",
          "1974:   pPage->aDataOfst = &data[pPage->childPtrSize];",
          "1977:   pPage->nCell = get2byte(&data[hdr+3]);",
          "",
          "[Added Lines]",
          "1990:   data = pPage->aData + pPage->hdrOffset;",
          "1993:   if( decodeFlags(pPage, data[0]) ){",
          "1999:   pPage->cellOffset = pPage->hdrOffset + 8 + pPage->childPtrSize;",
          "2000:   pPage->aCellIdx = data + pPage->childPtrSize + 8;",
          "2001:   pPage->aDataEnd = pPage->aData + pBt->usableSize;",
          "2002:   pPage->aDataOfst = pPage->aData + pPage->childPtrSize;",
          "2005:   pPage->nCell = get2byte(&data[3]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1987:   assert( pPage->nCell>0",
          "1989:        || CORRUPT_DB );",
          "2021:   pPage->isInit = 1;",
          "2022:   return SQLITE_OK;",
          "2023: }",
          "",
          "[Removed Lines]",
          "1988:        || get2byteNotZero(&data[hdr+5])==usableSize",
          "1998:   iCellFirst = cellOffset + 2*pPage->nCell;",
          "1999:   iCellLast = usableSize - 4;",
          "2000:   if( pBt->db->flags & SQLITE_CellSizeCk ){",
          "2004:     if( !pPage->leaf ) iCellLast--;",
          "2005:     for(i=0; i<pPage->nCell; i++){",
          "2006:       pc = get2byteAligned(&data[cellOffset+i*2]);",
          "2007:       testcase( pc==iCellFirst );",
          "2008:       testcase( pc==iCellLast );",
          "2009:       if( pc<iCellFirst || pc>iCellLast ){",
          "2010:         return SQLITE_CORRUPT_PAGE(pPage);",
          "2011:       }",
          "2012:       sz = pPage->xCellSize(pPage, &data[pc]);",
          "2013:       testcase( pc+sz==usableSize );",
          "2014:       if( pc+sz>usableSize ){",
          "2015:         return SQLITE_CORRUPT_PAGE(pPage);",
          "2016:       }",
          "2017:     }",
          "2018:     if( !pPage->leaf ) iCellLast++;",
          "2019:   }",
          "",
          "[Added Lines]",
          "2016:        || get2byteNotZero(&data[5])==pBt->usableSize",
          "2020:   if( pBt->db->flags & SQLITE_CellSizeCk ){",
          "2021:     return btreeCellSizeCheck(pPage);",
          "2022:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4eb4e4fe7e1e60bbcb5009a43bb6278e0a81edff",
      "candidate_info": {
        "commit_hash": "4eb4e4fe7e1e60bbcb5009a43bb6278e0a81edff",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4eb4e4fe7e1e60bbcb5009a43bb6278e0a81edff",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/ctime.c"
        ],
        "message": "Add a new requirement mark on the ctime.c code.\n\nFossilOrigin-Name: c4b405687b010ee20ec02c42913a0540909d0155c88a4a56194fda99c704279e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/ctime.c||src/ctime.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f8696b60eec0dcacfe92d9a31cbf1436d674140e5447de0cd1c2f52bff6c2be4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/ctime.c||src/ctime.c": [
          "File: src/ctime.c -> src/ctime.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "17: #ifndef SQLITE_OMIT_COMPILEOPTION_DIAGS",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c161e07afd4805202319f02de3ab903f4413c65",
      "candidate_info": {
        "commit_hash": "3c161e07afd4805202319f02de3ab903f4413c65",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3c161e07afd4805202319f02de3ab903f4413c65",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/os_win.c",
          "test/symlink2.test"
        ],
        "message": "Add support for the SQLITE_ACCESS_SYMLINK flag in the Win32 VFS.\n\nFossilOrigin-Name: 175c15008e9f19b8f6762c2fe4a545735128765081980eed01d5e46ca4acb500",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/os_win.c||src/os_win.c",
          "test/symlink2.test||test/symlink2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 251230cf43c591cf49cf9d2f392581c57d334b791bc3407814d216b5999c32f4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1390:       case SQLITE_CANTOPEN_ISDIR:     zName = \"SQLITE_CANTOPEN_ISDIR\";    break;",
          "1391:       case SQLITE_CANTOPEN_FULLPATH:  zName = \"SQLITE_CANTOPEN_FULLPATH\"; break;",
          "1392:       case SQLITE_CANTOPEN_CONVPATH:  zName = \"SQLITE_CANTOPEN_CONVPATH\"; break;",
          "1393:       case SQLITE_PROTOCOL:           zName = \"SQLITE_PROTOCOL\";          break;",
          "1394:       case SQLITE_EMPTY:              zName = \"SQLITE_EMPTY\";             break;",
          "1395:       case SQLITE_SCHEMA:             zName = \"SQLITE_SCHEMA\";            break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1393:       case SQLITE_CANTOPEN_SYMLINK:   zName = \"SQLITE_CANTOPEN_SYMLINK\";  break;",
          "",
          "---------------"
        ],
        "src/os_win.c||src/os_win.c": [
          "File: src/os_win.c -> src/os_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: #  define NTDDI_WINTHRESHOLD                0x06040000",
          "81: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: #ifndef FILE_ATTRIBUTE_REPARSE_POINT",
          "88: #  define FILE_ATTRIBUTE_REPARSE_POINT      0x00000400",
          "89: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5473:              (attr & FILE_ATTRIBUTE_READONLY)==0;",
          "5474:       break;",
          "5475:     case SQLITE_ACCESS_SYMLINK:",
          "5477:       break;",
          "5478:     default:",
          "5479:       assert(!\"Invalid flags argument\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5484:       rc = attr!=INVALID_FILE_ATTRIBUTES &&",
          "5485:              (attr & FILE_ATTRIBUTE_REPARSE_POINT)!=0;",
          "",
          "---------------"
        ],
        "test/symlink2.test||test/symlink2.test": [
          "File: test/symlink2.test -> test/symlink2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 November 18",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing that SQLite can follow symbolic links.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix symlink2",
          "19: # This only runs on Windows.",
          "20: if {$::tcl_platform(platform)!=\"windows\"} {",
          "21:   finish_test",
          "22:   return",
          "23: }",
          "25: proc createWin32Symlink { link target } {",
          "26:   exec -- $::env(ComSpec) /c mklink \\",
          "27:       [file nativename $link] [file nativename $target]",
          "28:   return \"\"",
          "29: }",
          "31: proc deleteWin32Symlink { link } {",
          "32:   exec -- $::env(ComSpec) /c del [file nativename $link]",
          "33:   return \"\"",
          "34: }",
          "36: proc canCreateWin32Symlink {} {",
          "37:   set link [file join $::testdir lnk[pid].sym]",
          "38:   if {[file exists $link]} { return 0 }",
          "39:   set target [info nameofexecutable]",
          "40:   if {[catch {createWin32Symlink $link $target}] == 0} {",
          "41:     deleteWin32Symlink $link",
          "42:     return 1",
          "43:   }",
          "44:   return 0",
          "45: }",
          "47: # Creating symlinks may require administrator privileges on Windows.",
          "48: if {![canCreateWin32Symlink]} {",
          "49:   finish_test",
          "50:   return",
          "51: }",
          "53: # Ensure that test.db has been created.",
          "54: #",
          "55: do_execsql_test 1.0 {",
          "56:   CREATE TABLE t1(x, y);",
          "57:   INSERT INTO t1 VALUES(1,9999);",
          "58: }",
          "60: do_test 2.0 {",
          "61:   createWin32Symlink link.db test.db",
          "62: } {}",
          "64: do_test 2.1 {",
          "65:   file exists test.db",
          "66: } {1}",
          "68: do_test 2.2 {",
          "69:   file exists link.db",
          "70: } {1}",
          "72: do_test 3.1 {",
          "73:   execsql { SELECT x, y FROM t1; } db",
          "74: } {1 9999}",
          "76: do_test 3.2 {",
          "77:   sqlite3 db2 link.db",
          "78:   execsql { SELECT x, y FROM t1; } db2",
          "79: } {1 9999}",
          "81: do_test 3.3 {",
          "82:   sqlite3 db3 test.db -nofollow true",
          "83:   execsql { SELECT x, y FROM t1; } db3",
          "84: } {1 9999}",
          "86: do_test 3.4 {",
          "87:   db3 close",
          "88: } {}",
          "90: do_test 3.5 {",
          "91:   list [catch {",
          "92:     sqlite3 db4 link.db -nofollow true",
          "93:     execsql { SELECT x, y FROM t1; } db4",
          "94:   } res] $res",
          "95: } {1 {unable to open database file}}",
          "97: catch {db4 close}",
          "99: do_test 4.0 {",
          "100:   db2 close",
          "101:   deleteWin32Symlink link.db",
          "102: } {}",
          "104: do_test 4.1 {",
          "105:   file exists test.db",
          "106: } {1}",
          "108: do_test 4.2 {",
          "109:   file exists link.db",
          "110: } {0}",
          "112: do_test 5.1 {",
          "113:   execsql { SELECT x, y FROM t1; } db",
          "114: } {1 9999}",
          "116: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7a5e498400ae8c533c53aa37a62194bd734b422",
      "candidate_info": {
        "commit_hash": "d7a5e498400ae8c533c53aa37a62194bd734b422",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d7a5e498400ae8c533c53aa37a62194bd734b422",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/pcache1.c"
        ],
        "message": "Back out the expansion of the temporary buffer size from [32754ca6f86da816] and replace it with an explicit test for buffer overreads.\n\nFossilOrigin-Name: 8ba3d9f38090c4bbbcffba1930e5c26f69ff61f49b72a4a5a59253d37341380f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/pcache1.c||src/pcache1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f8b781cf41800e9f61a1c5376404a97e76a2bbbcaa17396d42be62f731363947",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6762:   for(i=0; i<nCell; i++){",
          "6763:     u8 *pCell = apCell[i];",
          "6764:     if( SQLITE_WITHIN(pCell,aData,pEnd) ){",
          "6765:       pCell = &pTmp[pCell - aData];",
          "6766:     }",
          "6767:     pData -= szCell[i];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6765:       if( ((uptr)(pCell+szCell[i]))>(uptr)pEnd ) return SQLITE_CORRUPT_BKPT;",
          "",
          "---------------"
        ],
        "src/pcache1.c||src/pcache1.c": [
          "File: src/pcache1.c -> src/pcache1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "484: }",
          "",
          "[Removed Lines]",
          "483:   return pcache1Alloc(sz + 32);",
          "",
          "[Added Lines]",
          "483:   return pcache1Alloc(sz);",
          "",
          "---------------"
        ]
      }
    }
  ]
}