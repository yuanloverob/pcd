{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e7e4f2f3aa2622d67136b4c9ed3983cb90f6619a",
      "candidate_info": {
        "commit_hash": "e7e4f2f3aa2622d67136b4c9ed3983cb90f6619a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/e7e4f2f3aa2622d67136b4c9ed3983cb90f6619a",
        "files": [
          "deps/v8/src/objects.cc"
        ],
        "message": "Fix linker error on some gcc version on osx\n\n* See: http://codereview.chromium.org/9382033/",
        "before_after_code_files": [
          "deps/v8/src/objects.cc||deps/v8/src/objects.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/src/objects.cc||deps/v8/src/objects.cc": [
          "File: deps/v8/src/objects.cc -> deps/v8/src/objects.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "11278: template MaybeObject* Dictionary<UnseededNumberDictionaryShape, uint32_t>::",
          "11279:     AtPut(uint32_t, Object*);",
          "11281: template Object* Dictionary<UnseededNumberDictionaryShape, uint32_t>::",
          "11282:     SlowReverseLookup(Object* value);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11281: template Object* Dictionary<SeededNumberDictionaryShape, uint32_t>::",
          "11282:     SlowReverseLookup(Object* value);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b95d88bf2dc1ac713cad527ff7780af2253d4d5",
      "candidate_info": {
        "commit_hash": "3b95d88bf2dc1ac713cad527ff7780af2253d4d5",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3b95d88bf2dc1ac713cad527ff7780af2253d4d5",
        "files": [
          "deps/v8/build/common.gypi"
        ],
        "message": "v8: s/echo -n/echo/. Not all sh's are bash.",
        "before_after_code_files": [
          "deps/v8/build/common.gypi||deps/v8/build/common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/build/common.gypi||deps/v8/build/common.gypi": [
          "File: deps/v8/build/common.gypi -> deps/v8/build/common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:           [ 'v8_target_arch!=\"x64\"', {",
          "294:             # Pass -m32 to the compiler iff it understands the flag.",
          "295:             'variables': {",
          "297:             },",
          "298:             'cflags': [ '<(m32flag)' ],",
          "299:             'ldflags': [ '<(m32flag)' ],",
          "",
          "[Removed Lines]",
          "296:               'm32flag': '<!((echo | $(echo ${CXX:-$(which g++)}) -m32 -E - > /dev/null 2>&1) && echo -n \"-m32\" || true)',",
          "",
          "[Added Lines]",
          "296:               'm32flag': '<!((echo | $(echo ${CXX:-$(which g++)}) -m32 -E - > /dev/null 2>&1) && echo \"-m32\" || true)',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cacd3ae004d9796c746472433b83252cf5edb7e7",
      "candidate_info": {
        "commit_hash": "cacd3ae004d9796c746472433b83252cf5edb7e7",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/cacd3ae004d9796c746472433b83252cf5edb7e7",
        "files": [
          "test/simple/test-cluster-bind-twice.js"
        ],
        "message": "test: add cluster 'bind twice' test\n\nThis test starts two clustered HTTP servers on the same port. It expects the\nfirst cluster to succeed and the second cluster to fail with EADDRINUSE.",
        "before_after_code_files": [
          "test/simple/test-cluster-bind-twice.js||test/simple/test-cluster-bind-twice.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-cluster-bind-twice.js||test/simple/test-cluster-bind-twice.js": [
          "File: test/simple/test-cluster-bind-twice.js -> test/simple/test-cluster-bind-twice.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: var common = require('../common');",
          "26: var assert = require('assert');",
          "27: var cluster = require('cluster');",
          "28: var fork = require('child_process').fork;",
          "29: var http = require('http');",
          "31: var id = process.argv[2];",
          "33: if (!id) {",
          "34:   var a = fork(__filename, ['one']);",
          "35:   var b = fork(__filename, ['two']);",
          "37:   a.on('message', function(m) {",
          "38:     assert.equal(m, 'READY');",
          "39:     b.send('START');",
          "40:   });",
          "42:   var ok = false;",
          "44:   b.on('message', function(m) {",
          "45:     assert.equal(m, 'EADDRINUSE');",
          "46:     a.kill();",
          "47:     b.kill();",
          "48:     ok = true;",
          "49:   });",
          "51:   process.on('exit', function() {",
          "52:     a.kill();",
          "53:     b.kill();",
          "54:     assert(ok);",
          "55:   });",
          "56: }",
          "57: else if (id === 'one') {",
          "58:   if (cluster.isMaster) cluster.fork();",
          "59:   http.createServer(assert.fail).listen(common.PORT, function() {",
          "60:     process.send('READY');",
          "61:   });",
          "62: }",
          "63: else if (id === 'two') {",
          "64:   if (cluster.isMaster) cluster.fork();",
          "65:   process.on('message', function(m) {",
          "66:     assert.equal(m, 'START');",
          "67:     var server = http.createServer(assert.fail);",
          "68:     server.listen(common.PORT, assert.fail);",
          "69:     server.on('error', function(e) {",
          "70:       assert.equal(e.code, 'EADDRINUSE');",
          "71:       process.send(e.code);",
          "72:     });",
          "73:   });",
          "74: }",
          "75: else {",
          "76:   assert(0); // bad command line argument",
          "77: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "76104f3414f10bd5df1aa8cdc69cff9f73e64b9d",
      "candidate_info": {
        "commit_hash": "76104f3414f10bd5df1aa8cdc69cff9f73e64b9d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/76104f3414f10bd5df1aa8cdc69cff9f73e64b9d",
        "files": [
          "lib/timers.js"
        ],
        "message": "timer: change new Date to Date.now for performance\n\nSpeeds up benchmark/settimeout.js by about 30%.",
        "before_after_code_files": [
          "lib/timers.js||litimers.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/timers.js||litimers.js": [
          "File: lib/timers.js -> litimers.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: function insert(item, msecs) {",
          "55:   item._idleTimeout = msecs;",
          "57:   if (msecs < 0) return;",
          "",
          "[Removed Lines]",
          "54:   item._idleStart = new Date();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:     list.ontimeout = function() {",
          "72:       debug('timeout callback ' + msecs);",
          "77:       var first;",
          "78:       while (first = L.peek(list)) {",
          "",
          "[Removed Lines]",
          "74:       var now = new Date();",
          "75:       debug('now: ' + now);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:     if (!list || L.isEmpty(list)) {",
          "156:       insert(item, msecs);",
          "157:     } else {",
          "159:       L.append(list, item);",
          "160:     }",
          "161:   }",
          "",
          "[Removed Lines]",
          "158:       item._idleStart = new Date();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c9a1b5d162d40235ac7ec5479059c66a33f5c1a1",
      "candidate_info": {
        "commit_hash": "c9a1b5d162d40235ac7ec5479059c66a33f5c1a1",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c9a1b5d162d40235ac7ec5479059c66a33f5c1a1",
        "files": [
          "lib/events.js",
          "test/simple/test-event-emitter-remove-all-listeners.js"
        ],
        "message": "Fix #3425: removeAllListeners should delete array\n\nWhen removeAllListeners is called, the listeners array\nis deleted to maintain compatibility with v0.6.\n\nReverts \"events: don't delete the listeners array\"\n\nThis reverts commit 78dc13fbf97e2e3003e6f3baacdd5ff60e8de3f7.\n\nConflicts:\n\n\ttest/simple/test-event-emitter-remove-all-listeners.js",
        "before_after_code_files": [
          "lib/events.js||lievents.js",
          "test/simple/test-event-emitter-remove-all-listeners.js||test/simple/test-event-emitter-remove-all-listeners.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/events.js||lievents.js": [
          "File: lib/events.js -> lievents.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:     return this;",
          "229:   }",
          "240:   return this;",
          "241: };",
          "",
          "[Removed Lines]",
          "231:   var events = this._events && this._events[type];",
          "232:   if (!events) return this;",
          "234:   if (isArray(events)) {",
          "235:     events.splice(0);",
          "236:   } else {",
          "237:     this._events[type] = null;",
          "238:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-event-emitter-remove-all-listeners.js||test/simple/test-event-emitter-remove-all-listeners.js": [
          "File: test/simple/test-event-emitter-remove-all-listeners.js -> test/simple/test-event-emitter-remove-all-listeners.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: assert.deepEqual(e1.listeners('foo'), [listener]);",
          "40: assert.deepEqual(e1.listeners('bar'), []);",
          "41: assert.deepEqual(e1.listeners('baz'), []);",
          "47: var e2 = new events.EventEmitter();",
          "48: e2.on('foo', listener);",
          "",
          "[Removed Lines]",
          "43: assert.equal(e1.listeners('foo'), fooListeners);",
          "44: assert.equal(e1.listeners('bar'), barListeners);",
          "45: assert.equal(e1.listeners('baz'), bazListeners);",
          "",
          "[Added Lines]",
          "44: assert.deepEqual(fooListeners, [listener]);",
          "45: assert.deepEqual(barListeners, [listener]);",
          "46: assert.deepEqual(bazListeners, [listener, listener]);",
          "49: assert.notEqual(e1.listeners('bar'), barListeners);",
          "50: assert.notEqual(e1.listeners('baz'), bazListeners);",
          "",
          "---------------"
        ]
      }
    }
  ]
}