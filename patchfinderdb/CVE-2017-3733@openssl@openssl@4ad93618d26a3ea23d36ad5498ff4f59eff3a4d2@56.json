{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "16db345c47cbf97ea01e655d4eb00f9c4c52f361",
      "candidate_info": {
        "commit_hash": "16db345c47cbf97ea01e655d4eb00f9c4c52f361",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/16db345c47cbf97ea01e655d4eb00f9c4c52f361",
        "files": [
          "util/process_docs.pl"
        ],
        "message": "Small fixup of util/process_docs.pl\n\nApparently, pod2html doesn't add \".html\" at the end of links, making\nthem useless, so we need to fix that\n\nWith thanks for the report to Michel <michel.sales@free.fr>\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1897)",
        "before_after_code_files": [
          "util/process_docs.pl||util/process_docs.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "util/process_docs.pl||util/process_docs.pl": [
          "File: util/process_docs.pl -> util/process_docs.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:                 if $options{debug};",
          "106:             unless ($options{\"dry-run\"}) {",
          "107:                 @output = `$generate`;",
          "109:                     if $options{type} eq \"html\";",
          "110:             }",
          "111:             print STDERR \"DEBUG: Done processing\\n\" if $options{debug};",
          "",
          "[Removed Lines]",
          "108:                 map { s|href=\"http://man\\.he\\.net/man|href=\"../man|g; } @output",
          "",
          "[Added Lines]",
          "108:                 map { s|href=\"http://man\\.he\\.net/(man\\d/[^\"]+)(?:\\.html)?\"|href=\"../$1.html|g; } @output",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d5936e478194798a287e165b81d27a1bcceaae8",
      "candidate_info": {
        "commit_hash": "1d5936e478194798a287e165b81d27a1bcceaae8",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1d5936e478194798a287e165b81d27a1bcceaae8",
        "files": [
          "apps/ca.c",
          "crypto/txt_db/txt_db.c"
        ],
        "message": "Fix a few memleaks in TXT_DB.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2684)\n(cherry picked from commit 9ad52c562a93c9a57ae3024e54c575430753244c)",
        "before_after_code_files": [
          "apps/ca.c||apps/ca.c",
          "crypto/txt_db/txt_db.c||crypto/txt_dtxt_db.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/ca.c||apps/ca.c": [
          "File: apps/ca.c -> apps/ca.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1838:     }",
          "1840:     irow = app_malloc(sizeof(*irow) * (DB_NUMBER + 1), \"row space\");",
          "1842:         irow[i] = row[i];",
          "1845:     irow[DB_NUMBER] = NULL;",
          "1847:     if (!TXT_DB_insert(db->db, irow)) {",
          "",
          "[Removed Lines]",
          "1841:     for (i = 0; i < DB_NUMBER; i++) {",
          "1843:         row[i] = NULL;",
          "1844:     }",
          "",
          "[Added Lines]",
          "1841:     for (i = 0; i < DB_NUMBER; i++)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1849:         BIO_printf(bio_err, \"TXT_DB error number %ld\\n\", db->db->error);",
          "1850:         goto end;",
          "1851:     }",
          "1852:     ok = 1;",
          "1853:  end:",
          "1857:     X509_NAME_free(CAname);",
          "1858:     X509_NAME_free(subject);",
          "",
          "[Removed Lines]",
          "1854:     for (i = 0; i < DB_NUMBER; i++)",
          "1855:         OPENSSL_free(row[i]);",
          "",
          "[Added Lines]",
          "1850:     irow = NULL;",
          "1853:     if (irow != NULL) {",
          "1854:         for (i = 0; i < DB_NUMBER; i++)",
          "1855:             OPENSSL_free(row[i]);",
          "1856:         OPENSSL_free(irow);",
          "1857:     }",
          "",
          "---------------"
        ],
        "crypto/txt_db/txt_db.c||crypto/txt_dtxt_db.c": [
          "File: crypto/txt_db/txt_db.c -> crypto/txt_dtxt_db.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:         }",
          "106:         if ((n != num) || (*f != '\\0')) {",
          "107:             ret->error = DB_ERROR_WRONG_NUM_FIELDS;",
          "108:             goto err;",
          "109:         }",
          "110:         pp[n] = p;",
          "112:             goto err;",
          "113:     }",
          "114:     BUF_MEM_free(buf);",
          "115:     return ret;",
          "",
          "[Removed Lines]",
          "111:         if (!sk_OPENSSL_PSTRING_push(ret->data, pp))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:                         OPENSSL_LH_HASHFUNC hash, OPENSSL_LH_COMPFUNC cmp)",
          "149: {",
          "150:     LHASH_OF(OPENSSL_STRING) *idx;",
          "152:     int i, n;",
          "154:     if (field >= db->num_fields) {",
          "",
          "[Removed Lines]",
          "151:     OPENSSL_STRING *r;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "165:         r = sk_OPENSSL_PSTRING_value(db->data, i);",
          "166:         if ((qual != NULL) && (qual(r) == 0))",
          "167:             continue;",
          "169:             db->error = DB_ERROR_INDEX_CLASH;",
          "171:             db->arg2 = i;",
          "172:             lh_OPENSSL_STRING_free(idx);",
          "173:             return (0);",
          "174:         }",
          "175:     }",
          "176:     lh_OPENSSL_STRING_free(db->index[field]);",
          "177:     db->index[field] = idx;",
          "",
          "[Removed Lines]",
          "168:         if ((r = lh_OPENSSL_STRING_insert(idx, r)) != NULL) {",
          "170:             db->arg1 = sk_OPENSSL_PSTRING_find(db->data, r);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "244:             }",
          "245:         }",
          "246:     }",
          "253:     for (i = 0; i < db->num_fields; i++) {",
          "254:         if (db->index[i] != NULL) {",
          "255:             if ((db->qual[i] != NULL) && (db->qual[i] (row) == 0))",
          "256:                 continue;",
          "257:             (void)lh_OPENSSL_STRING_insert(db->index[i], row);",
          "258:         }",
          "259:     }",
          "260:     return (1);",
          "261:  err:",
          "262:     return (0);",
          "263: }",
          "",
          "[Removed Lines]",
          "248:     if (!sk_OPENSSL_PSTRING_push(db->data, row)) {",
          "249:         db->error = DB_ERROR_MALLOC;",
          "250:         goto err;",
          "251:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d2a18ec34fb9f2fbdaa1a28e89f1eff1654a45f",
      "candidate_info": {
        "commit_hash": "1d2a18ec34fb9f2fbdaa1a28e89f1eff1654a45f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1d2a18ec34fb9f2fbdaa1a28e89f1eff1654a45f",
        "files": [
          "crypto/evp/evp_enc.c"
        ],
        "message": "Restore EVP_CIPH_FLAG_LENGTH_BITS working properly\n\nEVP_CIPH_FLAG_LENGTH_BITS flag for CFB1 has been broken with the\nintroduction of the is_partially_overlapping() check that did not take\nit into the account (treating number of bits passed as bytes). This\nremedies that and allows this flag to work as intended.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1942)\n(cherry picked from commit 64846096b18340b9a39ddd29a7a0e23c56f22959)",
        "before_after_code_files": [
          "crypto/evp/evp_enc.c||crypto/evp/evp_enc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/evp/evp_enc.c||crypto/evp/evp_enc.c": [
          "File: crypto/evp/evp_enc.c -> crypto/evp/evp_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "295: int EVP_EncryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl,",
          "296:                       const unsigned char *in, int inl)",
          "297: {",
          "300:     bl = ctx->cipher->block_size;",
          "302:     if (ctx->cipher->flags & EVP_CIPH_FLAG_CUSTOM_CIPHER) {",
          "305:             EVPerr(EVP_F_EVP_ENCRYPTUPDATE, EVP_R_PARTIALLY_OVERLAPPING);",
          "306:             return 0;",
          "307:         }",
          "",
          "[Removed Lines]",
          "298:     int i, j, bl;",
          "304:         if (bl == 1 && is_partially_overlapping(out, in, inl)) {",
          "",
          "[Added Lines]",
          "298:     int i, j, bl, cmpl = inl;",
          "300:     if (EVP_CIPHER_CTX_test_flags(ctx, EVP_CIPH_FLAG_LENGTH_BITS))",
          "301:         cmpl = (cmpl + 7) / 8;",
          "307:         if (bl == 1 && is_partially_overlapping(out, in, cmpl)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "319:         return inl == 0;",
          "320:     }",
          "322:         EVPerr(EVP_F_EVP_ENCRYPTUPDATE, EVP_R_PARTIALLY_OVERLAPPING);",
          "323:         return 0;",
          "324:     }",
          "",
          "[Removed Lines]",
          "321:     if (is_partially_overlapping(out + ctx->buf_len, in, inl)) {",
          "",
          "[Added Lines]",
          "324:     if (is_partially_overlapping(out + ctx->buf_len, in, cmpl)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "418: int EVP_DecryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl,",
          "419:                       const unsigned char *in, int inl)",
          "420: {",
          "422:     unsigned int b;",
          "424:     b = ctx->cipher->block_size;",
          "426:     if (ctx->cipher->flags & EVP_CIPH_FLAG_CUSTOM_CIPHER) {",
          "428:             EVPerr(EVP_F_EVP_DECRYPTUPDATE, EVP_R_PARTIALLY_OVERLAPPING);",
          "429:             return 0;",
          "430:         }",
          "",
          "[Removed Lines]",
          "421:     int fix_len;",
          "427:         if (b == 1 && is_partially_overlapping(out, in, inl)) {",
          "",
          "[Added Lines]",
          "424:     int fix_len, cmpl = inl;",
          "429:     if (EVP_CIPHER_CTX_test_flags(ctx, EVP_CIPH_FLAG_LENGTH_BITS))",
          "430:         cmpl = (cmpl + 7) / 8;",
          "433:         if (b == 1 && is_partially_overlapping(out, in, cmpl)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a05053cdf45e30d34161d5a1ab68fa6f757bbc27",
      "candidate_info": {
        "commit_hash": "a05053cdf45e30d34161d5a1ab68fa6f757bbc27",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a05053cdf45e30d34161d5a1ab68fa6f757bbc27",
        "files": [
          "engines/e_capi.c"
        ],
        "message": "engines/e_capi.c: slip in PROV_RSA_AES for interchangable CSP only.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3034)\n\n(cherry picked from commit 8ab9af5e28032478dd130467751b2e241eaee719)",
        "before_after_code_files": [
          "engines/e_capi.c||engines/e_capi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "engines/e_capi.c||engines/e_capi.c": [
          "File: engines/e_capi.c -> engines/e_capi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "398: # endif",
          "400: static int use_aes_csp = 0;",
          "402: static int capi_init(ENGINE *e)",
          "403: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "401: static const WCHAR rsa_aes_cspname[] =",
          "402:     L\"Microsoft Enhanced RSA and AES Cryptographic Provider\";",
          "403: static const WCHAR rsa_enh_cspname[] =",
          "404:     L\"Microsoft Enhanced Cryptographic Provider v1.0\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "472:     }",
          "473: # endif",
          "478:                              CRYPT_VERIFYCONTEXT)) {",
          "479:         use_aes_csp = 1;",
          "480:         CryptReleaseContext(hprov, 0);",
          "",
          "[Removed Lines]",
          "477:     if (CryptAcquireContextW(&hprov, NULL, NULL, PROV_RSA_AES,",
          "",
          "[Added Lines]",
          "480:     if (CryptAcquireContextW(&hprov, NULL, rsa_aes_cspname, PROV_RSA_AES,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1459: }",
          "1461: static CAPI_KEY *capi_get_key(CAPI_CTX *ctx, const WCHAR *contname,",
          "1463: {",
          "1464:     DWORD dwFlags = 0;",
          "1465:     CAPI_KEY *key = OPENSSL_malloc(sizeof(*key));",
          "",
          "[Removed Lines]",
          "1462:                               WCHAR *provname, DWORD ptype, DWORD keyspec)",
          "",
          "[Added Lines]",
          "1465:                               const WCHAR *provname, DWORD ptype,",
          "1466:                               DWORD keyspec)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1467:     if (key == NULL)",
          "1468:         return NULL;",
          "1472:         ptype = PROV_RSA_AES;",
          "1479:         char *_contname = wide_to_asc(contname);",
          "1480:         char *_provname = wide_to_asc(provname);",
          "",
          "[Removed Lines]",
          "1470:     if (ptype == PROV_RSA_FULL && use_aes_csp) {",
          "1471:         provname = NULL;",
          "1473:         CAPI_trace(ctx, \"capi_get_key, contname=%s, RSA_AES_CSP\\n\", contname);",
          "1474:     } else if (sizeof(TCHAR) == sizeof(char)) {",
          "1475:         CAPI_trace(ctx, \"capi_get_key, contname=%s, provname=%s, type=%d\\n\",",
          "1476:                    contname, provname, ptype);",
          "1477:     } else if (ctx && ctx->debug_level >= CAPI_DBG_TRACE && ctx->debug_file) {",
          "",
          "[Added Lines]",
          "1474:     if (ptype == PROV_RSA_FULL && use_aes_csp &&",
          "1475:         wcscmp(provname, rsa_enh_cspname) == 0) {",
          "1476:         provname = rsa_aes_cspname;",
          "1478:     }",
          "1479:     if (ctx && ctx->debug_level >= CAPI_DBG_TRACE && ctx->debug_file) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a39aa18644d3338087a827c6555b18bc857346fe",
      "candidate_info": {
        "commit_hash": "a39aa18644d3338087a827c6555b18bc857346fe",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a39aa18644d3338087a827c6555b18bc857346fe",
        "files": [
          "crypto/dh/dh_check.c",
          "include/openssl/dh.h",
          "ssl/statem/statem_clnt.c",
          "util/libcrypto.num"
        ],
        "message": "Better check of DH parameters in TLS data\n\nWhen the client reads DH parameters from the TLS stream, we only\nchecked that they all are non-zero.  This change updates the check to\nuse DH_check_params()\n\nDH_check_params() is a new function for light weight checking of the p\nand g parameters:\n\n    check that p is odd\n    check that 1 < g < p - 1\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>",
        "before_after_code_files": [
          "crypto/dh/dh_check.c||crypto/dh/dh_check.c",
          "include/openssl/dh.h||include/openssl/dh.h",
          "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c",
          "util/libcrypto.num||util/libcrypto.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/dh/dh_check.c||crypto/dh/dh_check.c": [
          "File: crypto/dh/dh_check.c -> crypto/dh/dh_check.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include <openssl/bn.h>",
          "13: #include \"dh_locl.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: int DH_check_params(const DH *dh, int *ret)",
          "23: {",
          "24:     int ok = 0;",
          "25:     BIGNUM *tmp = NULL;",
          "26:     BN_CTX *ctx = NULL;",
          "29:     ctx = BN_CTX_new();",
          "30:     if (ctx == NULL)",
          "31:         goto err;",
          "32:     BN_CTX_start(ctx);",
          "33:     tmp = BN_CTX_get(ctx);",
          "34:     if (tmp == NULL)",
          "35:         goto err;",
          "37:     if (!BN_is_odd(dh->p))",
          "39:     if (BN_is_negative(dh->g) || BN_is_zero(dh->g) || BN_is_one(dh->g))",
          "41:     if (BN_copy(tmp, dh->p) == NULL || !BN_sub_word(tmp, 1))",
          "42:         goto err;",
          "43:     if (BN_cmp(dh->g, tmp) >= 0)",
          "46:     ok = 1;",
          "47:  err:",
          "48:     if (ctx != NULL) {",
          "49:         BN_CTX_end(ctx);",
          "50:         BN_CTX_free(ctx);",
          "51:     }",
          "52:     return (ok);",
          "53: }",
          "",
          "---------------"
        ],
        "include/openssl/dh.h||include/openssl/dh.h": [
          "File: include/openssl/dh.h -> include/openssl/dh.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "124: int DH_generate_parameters_ex(DH *dh, int prime_len, int generator,",
          "125:                               BN_GENCB *cb);",
          "127: int DH_check(const DH *dh, int *codes);",
          "128: int DH_check_pub_key(const DH *dh, const BIGNUM *pub_key, int *codes);",
          "129: int DH_generate_key(DH *dh);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127: int DH_check_params(const DH *dh, int *ret);",
          "",
          "---------------"
        ],
        "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
          "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1414:     DH *dh = NULL;",
          "1415:     BIGNUM *p = NULL, *g = NULL, *bnpub_key = NULL;",
          "1417:     if (!PACKET_get_length_prefixed_2(pkt, &prime)",
          "1418:         || !PACKET_get_length_prefixed_2(pkt, &generator)",
          "1419:         || !PACKET_get_length_prefixed_2(pkt, &pub_key)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1417:     int check_bits = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1441:         goto err;",
          "1442:     }",
          "1446:         SSLerr(SSL_F_TLS_PROCESS_SKE_DHE, SSL_R_BAD_DH_VALUE);",
          "1447:         goto err;",
          "",
          "[Removed Lines]",
          "1444:     if (BN_is_zero(p) || BN_is_zero(g) || BN_is_zero(bnpub_key)) {",
          "",
          "[Added Lines]",
          "1447:     if (BN_is_zero(bnpub_key)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1454:     }",
          "1455:     p = g = NULL;",
          "1457:     if (!DH_set0_key(dh, bnpub_key, NULL)) {",
          "1459:         SSLerr(SSL_F_TLS_PROCESS_SKE_DHE, ERR_R_BN_LIB);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1460:     if (DH_check_params(dh, &check_bits) == 0 || check_bits != 0) {",
          "1462:         SSLerr(SSL_F_TLS_PROCESS_SKE_DHE, SSL_R_BAD_DH_VALUE);",
          "1463:         goto err;",
          "1464:     }",
          "",
          "---------------"
        ],
        "util/libcrypto.num||util/libcrypto.num": [
          "File: util/libcrypto.num -> util/libcrypto.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4213: X509_VERIFY_PARAM_set_inh_flags         4174 1_1_0d EXIST::FUNCTION:",
          "4214: X509_VERIFY_PARAM_get_inh_flags         4175 1_1_0d EXIST::FUNCTION:",
          "4215: X509_VERIFY_PARAM_get_time              4181 1_1_0d EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4216: DH_check_params                         4183 1_1_0d EXIST::FUNCTION:DH",
          "",
          "---------------"
        ]
      }
    }
  ]
}