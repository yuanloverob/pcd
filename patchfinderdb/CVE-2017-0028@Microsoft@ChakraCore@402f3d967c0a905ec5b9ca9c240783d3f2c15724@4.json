{
  "cve_id": "CVE-2017-0028",
  "cve_desc": "A remote code execution vulnerability exists when Microsoft scripting engine improperly accesses objects in memory. The vulnerability could corrupt memory in a way that enables an attacker to execute arbitrary code in the context of the current user. An attacker who successfully exploited the vulnerability could gain the same user rights as the current user, aka \"Scripting Engine Memory Corruption Vulnerability.\"",
  "repo": "Microsoft/ChakraCore",
  "patch_hash": "402f3d967c0a905ec5b9ca9c240783d3f2c15724",
  "patch_info": {
    "commit_hash": "402f3d967c0a905ec5b9ca9c240783d3f2c15724",
    "repo": "Microsoft/ChakraCore",
    "commit_url": "https://github.com/Microsoft/ChakraCore/commit/402f3d967c0a905ec5b9ca9c240783d3f2c15724",
    "files": [
      "lib/Parser/Parse.cpp",
      "test/es6/lambda-params-shadow.js"
    ],
    "message": "[CVE-2017-0028] Fix binding of 'async' identifier in the presence of async arrow function.",
    "before_after_code_files": [
      "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp",
      "test/es6/lambda-params-shadow.js||test/es6/lambda-params-shadow.js"
    ]
  },
  "patch_diff": {
    "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp": [
      "File: lib/Parser/Parse.cpp -> lib/Parser/Parse.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "2863:     _Inout_opt_ charcount_t *plastRParen /*= nullptr*/)",
      "2864: {",
      "2865:     ParseNodePtr pnode = nullptr;",
      "2866:     charcount_t ichMin = 0;",
      "2867:     size_t iecpMin = 0;",
      "2868:     size_t iuMin;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2866:     PidRefStack *savedTopAsyncRef = nullptr;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2915:                 isLambdaExpr = true;",
      "2916:                 goto LFunction;",
      "2917:             }",
      "2918:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2919:             else if (m_token.tk == tkLParen)",
      "2920:             {",
      "2924:                 savedTopAsyncRef = pid->GetTopRef();",
      "2925:             }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3270:     pnode = ParsePostfixOperators<buildAST>(pnode, fAllowCall, fInNew, isAsyncExpr, &fCanAssign, &term, pfIsDotOrIndex);",
      "3273:     if (pToken && term.tk == tkID)",
      "3274:     {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3280:     if (savedTopAsyncRef != nullptr &&",
      "3281:         this->m_token.tk == tkDArrow)",
      "3282:     {",
      "3285:         for (IdentPtr pid = wellKnownPropertyPids.async; pid->GetTopRef() != savedTopAsyncRef;)",
      "3286:         {",
      "3287:             Assert(pid->GetTopRef() != nullptr);",
      "3288:             pid->RemovePrevPidRef(nullptr);",
      "3289:         }",
      "3290:     }",
      "",
      "---------------"
    ],
    "test/es6/lambda-params-shadow.js||test/es6/lambda-params-shadow.js": [
      "File: test/es6/lambda-params-shadow.js -> test/es6/lambda-params-shadow.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "18:     }",
      "19: }",
      "20: let b = new B();",
      "22:     WScript.Echo('fail');",
      "23: }",
      "",
      "[Removed Lines]",
      "21: if (count !== 3) {",
      "",
      "[Added Lines]",
      "21: class async extends A {",
      "22:     constructor() {",
      "23:         super();",
      "24:         let Q = async A => { A };",
      "25:     }",
      "26: }",
      "27: let a = new async();",
      "28: if (count !== 4) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dd61e049dee473351541d54261c32cb4c2c02263",
      "candidate_info": {
        "commit_hash": "dd61e049dee473351541d54261c32cb4c2c02263",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/dd61e049dee473351541d54261c32cb4c2c02263",
        "files": [
          "lib/Runtime/ByteCode/FuncInfo.cpp",
          "lib/Runtime/ByteCode/FuncInfo.h",
          "lib/Runtime/Language/AsmJsByteCodeGenerator.cpp",
          "lib/Runtime/Language/InterpreterStackFrame.cpp"
        ],
        "message": "[CVE-2017-0150] DeferDeserialize is not working properly with asm.js ChangeHeap",
        "before_after_code_files": [
          "lib/Runtime/ByteCode/FuncInfo.cpp||lib/Runtime/ByteCode/FuncInfo.cpp",
          "lib/Runtime/ByteCode/FuncInfo.h||lib/Runtime/ByteCode/FuncInfo.h",
          "lib/Runtime/Language/AsmJsByteCodeGenerator.cpp||lib/Runtime/Language/AsmJsByteCodeGenerator.cpp",
          "lib/Runtime/Language/InterpreterStackFrame.cpp||lib/Runtime/Language/InterpreterStackFrame.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Runtime/ByteCode/FuncInfo.cpp||lib/Runtime/ByteCode/FuncInfo.cpp": [
          "File: lib/Runtime/ByteCode/FuncInfo.cpp -> lib/Runtime/ByteCode/FuncInfo.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     Js::ParseableFunctionInfo* byteCodeFunction)",
          "14:     : alloc(alloc),",
          "15:     varRegsCount(0),",
          "17:     inArgsCount(0),",
          "18:     innerScopeCount(0),",
          "19:     currentInnerScopeIndex((uint)-1),",
          "",
          "[Removed Lines]",
          "16:     constRegsCount(2),",
          "",
          "[Added Lines]",
          "16:     constRegsCount(InitialConstRegsCount),",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/FuncInfo.h||lib/Runtime/ByteCode/FuncInfo.h": [
          "File: lib/Runtime/ByteCode/FuncInfo.h -> lib/Runtime/ByteCode/FuncInfo.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     uint        nextForInLoopLevel;",
          "84:     uint        maxForInLoopLevel;",
          "85: public:",
          "86:     ArenaAllocator *alloc;",
          "88:     Js::RegSlot varRegsCount; // number of registers used for non-constants",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:     static const Js::RegSlot InitialConstRegsCount = 2; // constRegsCount is set to 2 because R0 is the return register, and R1 is the root object",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/AsmJsByteCodeGenerator.cpp||lib/Runtime/Language/AsmJsByteCodeGenerator.cpp": [
          "File: lib/Runtime/Language/AsmJsByteCodeGenerator.cpp -> lib/Runtime/Language/AsmJsByteCodeGenerator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3324:         byteCodeGen->Writer()->EndStatement(functionNode);",
          "3325:         byteCodeGen->Writer()->End();",
          "3327:         autoCleanup.Done();",
          "3328:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3327:         functionBody->CheckAndSetConstantCount(FuncInfo::InitialConstRegsCount);",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/InterpreterStackFrame.cpp||lib/Runtime/Language/InterpreterStackFrame.cpp": [
          "File: lib/Runtime/Language/InterpreterStackFrame.cpp -> lib/Runtime/Language/InterpreterStackFrame.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2773:                 AsmJsScriptFunction* scriptFuncObj = (AsmJsScriptFunction*)ScriptFunction::OP_NewScFunc(pDisplay, functionInfo);",
          "2774:                 localModuleFunctions[modFunc.location] = scriptFuncObj;",
          "2775:                 if (i == 0 && info->GetUsesChangeHeap())",
          "2776:                 {",
          "2777:                     scriptFuncObj->GetDynamicType()->SetEntryPoint(AsmJsChangeHeapBuffer);",
          "2778:                 }",
          "2779:                 else",
          "2780:                 {",
          "2785:                     scriptFuncObj->GetDynamicType()->SetEntryPoint(AsmJsExternalEntryPoint);",
          "2786:                     scriptFuncObj->GetFunctionBody()->GetAsmJsFunctionInfo()->SetModuleFunctionBody(asmJsModuleFunctionBody);",
          "2787:                 }",
          "",
          "[Removed Lines]",
          "2781:                     if (scriptFuncObj->GetDynamicType()->GetEntryPoint() == DefaultDeferredDeserializeThunk)",
          "2782:                     {",
          "2783:                         JavascriptFunction::DeferredDeserialize(scriptFuncObj);",
          "2784:                     }",
          "",
          "[Added Lines]",
          "2776:                 if (scriptFuncObj->GetDynamicType()->GetEntryPoint() == DefaultDeferredDeserializeThunk)",
          "2777:                 {",
          "2778:                     JavascriptFunction::DeferredDeserialize(scriptFuncObj);",
          "2779:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "80cfdbb9c697ea5b5691fc10e87bce6da8886dc0",
      "candidate_info": {
        "commit_hash": "80cfdbb9c697ea5b5691fc10e87bce6da8886dc0",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/80cfdbb9c697ea5b5691fc10e87bce6da8886dc0",
        "files": [
          "lib/Runtime/Base/FunctionBody.cpp",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/Library/GlobalObject.cpp",
          "test/AsmJs/nested.baseline",
          "test/AsmJs/nested.js",
          "test/AsmJs/qmarkbug.baseline",
          "test/AsmJs/qmarkbug.js",
          "test/AsmJs/rlexe.xml",
          "test/AsmJs/shadowingBug.baseline",
          "test/AsmJs/shadowingBug.js"
        ],
        "message": "[CVE-2017-0067] prevent parser from getting into inconsistent state when asm.js parse fails",
        "before_after_code_files": [
          "lib/Runtime/Base/FunctionBody.cpp||lib/Runtime/Base/FunctionBody.cpp",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/Library/GlobalObject.cpp||lib/Runtime/Library/GlobalObject.cpp",
          "test/AsmJs/nested.baseline||test/AsmJs/nested.baseline",
          "test/AsmJs/nested.js||test/AsmJs/nested.js",
          "test/AsmJs/qmarkbug.baseline||test/AsmJs/qmarkbug.baseline",
          "test/AsmJs/qmarkbug.js||test/AsmJs/qmarkbug.js",
          "test/AsmJs/shadowingBug.baseline||test/AsmJs/shadowingBug.baseline",
          "test/AsmJs/shadowingBug.js||test/AsmJs/shadowingBug.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Runtime/Base/FunctionBody.cpp||lib/Runtime/Base/FunctionBody.cpp": [
          "File: lib/Runtime/Base/FunctionBody.cpp -> lib/Runtime/Base/FunctionBody.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2134:             return GetFunctionBody();",
          "2135:         }",
          "2137:         BOOL fParsed = FALSE;",
          "2138:         FunctionBody* returnFunctionBody = nullptr;",
          "2139:         ENTER_PINNED_SCOPE(Js::PropertyRecordList, propertyRecordList);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2137:         bool asmjsParseFailed = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2143:         bool isDebugOrAsmJsReparse = false;",
          "2144:         FunctionBody* funcBody = nullptr;",
          "2154:         {",
          "2155:             this->GetUtf8SourceInfo()->StopTrackingDeferredFunction(this->GetLocalFunctionId());",
          "2156:             funcBody = FunctionBody::NewFromParseableFunctionInfo(this, propertyRecordList);",
          "2175:                 {",
          "2180:                     {",
          "2194:                         {",
          "2197:                             {",
          "2199:                             }",
          "2200:                         }",
          "2205:             }",
          "2230:                 {",
          "2235:             }",
          "2243: #if ENABLE_PROFILE_INFO",
          "2245: #endif",
          "2267:                 {",
          "2300:                     {",
          "2303:                     }",
          "2305:                     {",
          "2323:                         {",
          "2325:                         }",
          "2326:                         else",
          "2327:                         {",
          "2330:                         }",
          "2331:                     }",
          "2332:                 }",
          "2342:             {",
          "2344:             }",
          "2346:             {",
          "2356:             }",
          "2357:         }",
          "2365:         if (fParsed == TRUE)",
          "2366:         {",
          "",
          "[Removed Lines]",
          "2146:         AutoRestoreFunctionInfo autoRestoreFunctionInfo(this, DefaultEntryThunk);",
          "2153:         if (!this->m_hasBeenParsed)",
          "2157:             autoRestoreFunctionInfo.funcBody = funcBody;",
          "2159:             PERF_COUNTER_DEC(Code, DeferredFunction);",
          "2161:             if (!this->GetSourceContextInfo()->IsDynamic())",
          "2162:             {",
          "2163:                 PHASE_PRINT_TESTTRACE1(Js::DeferParsePhase, _u(\"TestTrace: Deferred function parsed - ID: %d; Display Name: %s; Length: %d; Nested Function Count: %d; Utf8SourceInfo: %d; Source Length: %d; Is Top Level: %s; Source Url: %s\\n\"), m_functionNumber, m_displayName, this->m_cchLength, this->GetNestedCount(), this->m_utf8SourceInfo->GetSourceInfoId(), this->m_utf8SourceInfo->GetCchLength(), this->GetIsTopLevel() ? _u(\"True\") : _u(\"False\"), this->GetSourceContextInfo()->url);",
          "2164:             }",
          "2165:             else",
          "2166:             {",
          "2167:                 PHASE_PRINT_TESTTRACE1(Js::DeferParsePhase, _u(\"TestTrace: Deferred function parsed - ID: %d; Display Name: %s; Length: %d; Nested Function Count: %d; Utf8SourceInfo: %d; Source Length: %d\\n; Is Top Level: %s;\"), m_functionNumber, m_displayName, this->m_cchLength, this->GetNestedCount(),  this->m_utf8SourceInfo->GetSourceInfoId(), this->m_utf8SourceInfo->GetCchLength(), this->GetIsTopLevel() ? _u(\"True\") : _u(\"False\"));",
          "2168:             }",
          "2170:             if (!this->GetIsTopLevel() &&",
          "2171:                 !this->GetSourceContextInfo()->IsDynamic() &&",
          "2172:                 this->m_scriptContext->DoUndeferGlobalFunctions())",
          "2173:             {",
          "2174:                 this->GetUtf8SourceInfo()->UndeferGlobalFunctions([this](JsUtil::SimpleDictionaryEntry<Js::LocalFunctionId, Js::ParseableFunctionInfo*> func)",
          "2176:                     Js::ParseableFunctionInfo *nextFunc = func.Value();",
          "2177:                     JavascriptExceptionObject* pExceptionObject = nullptr;",
          "2179:                     if (nextFunc != nullptr && this != nextFunc)",
          "2181:                         try",
          "2182:                         {",
          "2183:                             nextFunc->Parse();",
          "2184:                         }",
          "2185:                         catch (OutOfMemoryException) {}",
          "2186:                         catch (StackOverflowException) {}",
          "2187:                         catch (const Js::JavascriptException& err)",
          "2188:                         {",
          "2189:                             pExceptionObject = err.GetAndClear();",
          "2190:                         }",
          "2193:                         if(pExceptionObject)",
          "2195:                             if(pExceptionObject != ThreadContext::GetContextForCurrentThread()->GetPendingOOMErrorObject() &&",
          "2196:                                 pExceptionObject != ThreadContext::GetContextForCurrentThread()->GetPendingSOErrorObject())",
          "2198:                                 JavascriptExceptionOperators::DoThrow(pExceptionObject, /*scriptContext*/nullptr);",
          "2201:                     }",
          "2203:                     return true;",
          "2204:                 });",
          "2206:         }",
          "2207:         else",
          "2208:         {",
          "2209:             bool isDebugReparse = m_scriptContext->IsScriptContextInSourceRundownOrDebugMode() && !this->GetUtf8SourceInfo()->GetIsLibraryCode();",
          "2210:             bool isAsmJsReparse = m_isAsmjsMode && !isDebugReparse;",
          "2212:             isDebugOrAsmJsReparse = isAsmJsReparse || isDebugReparse;",
          "2214:             funcBody = this->GetFunctionBody();",
          "2216:             if (isDebugOrAsmJsReparse)",
          "2217:             {",
          "2218:     #if ENABLE_DEBUG_CONFIG_OPTIONS",
          "2219:                 char16 debugStringBuffer[MAX_FUNCTION_BODY_DEBUG_STRING_SIZE];",
          "2220:     #endif",
          "2221:     #if DBG",
          "2222:                 Assert(",
          "2223:                     funcBody->IsReparsed()",
          "2224:                     || m_scriptContext->IsScriptContextInSourceRundownOrDebugMode()",
          "2225:                     || m_isAsmjsMode);",
          "2226:     #endif",
          "2227:                 OUTPUT_TRACE(Js::DebuggerPhase, _u(\"Full nested reparse of function: %s (%s)\\n\"), funcBody->GetDisplayName(), funcBody->GetDebugNumberSet(debugStringBuffer));",
          "2229:                 if (funcBody->GetByteCode())",
          "2232:                     funcBody->CleanupToReparse();",
          "2233:                 }",
          "2236:         }",
          "2241:         if (funcBody->GetByteCode() == nullptr)",
          "2242:         {",
          "2244:             Assert(!funcBody->HasExecutionDynamicProfileInfo());",
          "2247:             AssertMsg(isDebugOrAsmJsReparse || funcBody->GetGrfscr() & fscrGlobalCode || CONFIG_FLAG(DeferNested), \"Deferred parsing of non-global procedure?\");",
          "2249:             HRESULT hr = NO_ERROR;",
          "2250:             HRESULT hrParser = NO_ERROR;",
          "2251:             HRESULT hrParseCodeGen = NO_ERROR;",
          "2253:             BEGIN_LEAVE_SCRIPT_INTERNAL(m_scriptContext)",
          "2254:             {",
          "2255:                 bool isCesu8 = m_scriptContext->GetSource(funcBody->GetSourceIndex())->IsCesu8();",
          "2257:                 size_t offset = this->StartOffset();",
          "2258:                 charcount_t charOffset = this->StartInDocument();",
          "2259:                 size_t length = this->LengthInBytes();",
          "2261:                 LPCUTF8 pszStart = this->GetStartOfDocument();",
          "2263:                 uint32 grfscr = funcBody->GetGrfscr() | fscrDeferredFnc;",
          "2266:                 if (!funcBody->GetIsGlobalFunc())",
          "2268:                     grfscr &= ~fscrGlobalCode;",
          "2269:                 }",
          "2271:                 if (!funcBody->GetIsDeclaration() && !funcBody->GetIsGlobalFunc()) // No refresh may reparse global function (e.g. eval code)",
          "2272:                 {",
          "2275:                     grfscr |= fscrDeferredFncExpression;",
          "2276:                 }",
          "2277:                 if (!CONFIG_FLAG(DeferNested) || isDebugOrAsmJsReparse)",
          "2278:                 {",
          "2279:                     grfscr &= ~fscrDeferFncParse; // Disable deferred parsing if not DeferNested, or doing a debug/asm.js re-parse",
          "2280:                 }",
          "2282:                 if (isDebugOrAsmJsReparse)",
          "2283:                 {",
          "2284:                     grfscr |= fscrNoAsmJs; // Disable asm.js when debugging or if linking failed",
          "2285:                 }",
          "2287:                 BEGIN_TRANSLATE_EXCEPTION_TO_HRESULT",
          "2288:                 {",
          "2289:                     CompileScriptException se;",
          "2290:                     Parser ps(m_scriptContext, funcBody->GetIsStrictMode() ? TRUE : FALSE);",
          "2291:                     ParseNodePtr parseTree;",
          "2293:                     uint nextFunctionId = funcBody->GetLocalFunctionId();",
          "2294:                     hrParser = ps.ParseSourceWithOffset(&parseTree, pszStart, offset, length, charOffset, isCesu8, grfscr, &se,",
          "2295:                         &nextFunctionId, funcBody->GetRelativeLineNumber(), funcBody->GetSourceContextInfo(),",
          "2296:                         funcBody);",
          "2299:                     if (FAILED(hrParser))",
          "2301:                         hrParseCodeGen = MapDeferredReparseError(hrParser, se); // Map certain errors like OOM/SOE",
          "2302:                         AssertMsg(FAILED(hrParseCodeGen) && SUCCEEDED(hrParser), \"Syntax errors should never be detected on deferred re-parse\");",
          "2304:                     else",
          "2306:                         TRACE_BYTECODE(_u(\"\\nDeferred parse %s\\n\"), funcBody->GetDisplayName());",
          "2307:                         Js::AutoDynamicCodeReference dynamicFunctionReference(m_scriptContext);",
          "2309:                         bool forceNoNative = isDebugOrAsmJsReparse ? this->GetScriptContext()->IsInterpreted() : false;",
          "2310:                         hrParseCodeGen = GenerateByteCode(parseTree, grfscr, m_scriptContext,",
          "2311:                             funcBody->GetParseableFunctionInfoRef(), funcBody->GetSourceIndex(),",
          "2312:                             forceNoNative, &ps, &se, funcBody->GetScopeInfo(), functionRef);",
          "2314:                         if (se.ei.scode == JSERR_AsmJsCompileError)",
          "2315:                         {",
          "2317:                             m_grfscr |= fscrNoAsmJs;",
          "2318:                             se.Clear();",
          "2319:                             return Parse(functionRef, isByteCodeDeserialization);",
          "2320:                         }",
          "2322:                         if (SUCCEEDED(hrParseCodeGen))",
          "2324:                             fParsed = TRUE;",
          "2328:                             Assert(hrParseCodeGen == SCRIPT_E_RECORDED);",
          "2329:                             hrParseCodeGen = se.ei.scode;",
          "2333:                 END_TRANSLATE_EXCEPTION_TO_HRESULT(hr);",
          "2334:             }",
          "2335:             END_LEAVE_SCRIPT_INTERNAL(m_scriptContext);",
          "2337:             THROW_KNOWN_HRESULT_EXCEPTIONS(hr, m_scriptContext);",
          "2339:             Assert(hr == NO_ERROR);",
          "2341:             if (!SUCCEEDED(hrParser))",
          "2343:                 JavascriptError::ThrowError(m_scriptContext, VBSERR_InternalError);",
          "2345:             else if (!SUCCEEDED(hrParseCodeGen))",
          "2351:                 if (hrParseCodeGen == VBSERR_OutOfStack)",
          "2352:                 {",
          "2353:                     JavascriptError::ThrowStackOverflowError(m_scriptContext);",
          "2354:                 }",
          "2355:                 JavascriptError::MapAndThrowError(m_scriptContext, hrParseCodeGen);",
          "2358:         else",
          "2359:         {",
          "2360:             fParsed = FALSE;",
          "2361:         }",
          "2363:         autoRestoreFunctionInfo.Clear();",
          "",
          "[Added Lines]",
          "2148:             AutoRestoreFunctionInfo autoRestoreFunctionInfo(this, DefaultEntryThunk);",
          "2156:             if (!this->m_hasBeenParsed)",
          "2157:             {",
          "2160:                 autoRestoreFunctionInfo.funcBody = funcBody;",
          "2162:                 PERF_COUNTER_DEC(Code, DeferredFunction);",
          "2164:                 if (!this->GetSourceContextInfo()->IsDynamic())",
          "2166:                     PHASE_PRINT_TESTTRACE1(Js::DeferParsePhase, _u(\"TestTrace: Deferred function parsed - ID: %d; Display Name: %s; Length: %d; Nested Function Count: %d; Utf8SourceInfo: %d; Source Length: %d; Is Top Level: %s; Source Url: %s\\n\"), m_functionNumber, m_displayName, this->m_cchLength, this->GetNestedCount(), this->m_utf8SourceInfo->GetSourceInfoId(), this->m_utf8SourceInfo->GetCchLength(), this->GetIsTopLevel() ? _u(\"True\") : _u(\"False\"), this->GetSourceContextInfo()->url);",
          "2167:                 }",
          "2168:                 else",
          "2169:                 {",
          "2170:                     PHASE_PRINT_TESTTRACE1(Js::DeferParsePhase, _u(\"TestTrace: Deferred function parsed - ID: %d; Display Name: %s; Length: %d; Nested Function Count: %d; Utf8SourceInfo: %d; Source Length: %d\\n; Is Top Level: %s;\"), m_functionNumber, m_displayName, this->m_cchLength, this->GetNestedCount(), this->m_utf8SourceInfo->GetSourceInfoId(), this->m_utf8SourceInfo->GetCchLength(), this->GetIsTopLevel() ? _u(\"True\") : _u(\"False\"));",
          "2171:                 }",
          "2173:                 if (!this->GetIsTopLevel() &&",
          "2174:                     !this->GetSourceContextInfo()->IsDynamic() &&",
          "2175:                     this->m_scriptContext->DoUndeferGlobalFunctions())",
          "2176:                 {",
          "2177:                     this->GetUtf8SourceInfo()->UndeferGlobalFunctions([this](JsUtil::SimpleDictionaryEntry<Js::LocalFunctionId, Js::ParseableFunctionInfo*> func)",
          "2179:                         Js::ParseableFunctionInfo *nextFunc = func.Value();",
          "2180:                         JavascriptExceptionObject* pExceptionObject = nullptr;",
          "2182:                         if (nextFunc != nullptr && this != nextFunc)",
          "2184:                             try",
          "2185:                             {",
          "2186:                                 nextFunc->Parse();",
          "2187:                             }",
          "2188:                             catch (OutOfMemoryException) {}",
          "2189:                             catch (StackOverflowException) {}",
          "2190:                             catch (const Js::JavascriptException& err)",
          "2192:                                 pExceptionObject = err.GetAndClear();",
          "2193:                             }",
          "2196:                             if (pExceptionObject)",
          "2197:                             {",
          "2198:                                 if (pExceptionObject != ThreadContext::GetContextForCurrentThread()->GetPendingOOMErrorObject() &&",
          "2199:                                     pExceptionObject != ThreadContext::GetContextForCurrentThread()->GetPendingSOErrorObject())",
          "2200:                                 {",
          "2201:                                     JavascriptExceptionOperators::DoThrow(pExceptionObject, /*scriptContext*/nullptr);",
          "2202:                                 }",
          "2206:                         return true;",
          "2207:                     });",
          "2208:                 }",
          "2210:             else",
          "2211:             {",
          "2212:                 bool isDebugReparse = m_scriptContext->IsScriptContextInSourceRundownOrDebugMode() && !this->GetUtf8SourceInfo()->GetIsLibraryCode();",
          "2213:                 bool isAsmJsReparse = m_isAsmjsMode && !isDebugReparse;",
          "2215:                 isDebugOrAsmJsReparse = isAsmJsReparse || isDebugReparse;",
          "2217:                 funcBody = this->GetFunctionBody();",
          "2219:                 if (isDebugOrAsmJsReparse)",
          "2221: #if ENABLE_DEBUG_CONFIG_OPTIONS",
          "2222:                     char16 debugStringBuffer[MAX_FUNCTION_BODY_DEBUG_STRING_SIZE];",
          "2223: #endif",
          "2224: #if DBG",
          "2225:                     Assert(",
          "2226:                         funcBody->IsReparsed()",
          "2227:                         || m_scriptContext->IsScriptContextInSourceRundownOrDebugMode()",
          "2228:                         || m_isAsmjsMode);",
          "2229: #endif",
          "2230:                     OUTPUT_TRACE(Js::DebuggerPhase, _u(\"Full nested reparse of function: %s (%s)\\n\"), funcBody->GetDisplayName(), funcBody->GetDebugNumberSet(debugStringBuffer));",
          "2232:                     if (funcBody->GetByteCode())",
          "2233:                     {",
          "2235:                         funcBody->CleanupToReparse();",
          "2236:                     }",
          "2238:                 }",
          "2244:             if (funcBody->GetByteCode() == nullptr)",
          "2245:             {",
          "2247:                 Assert(!funcBody->HasExecutionDynamicProfileInfo());",
          "2250:                 AssertMsg(isDebugOrAsmJsReparse || funcBody->GetGrfscr() & fscrGlobalCode || CONFIG_FLAG(DeferNested), \"Deferred parsing of non-global procedure?\");",
          "2252:                 HRESULT hr = NO_ERROR;",
          "2253:                 HRESULT hrParser = NO_ERROR;",
          "2254:                 HRESULT hrParseCodeGen = NO_ERROR;",
          "2256:                 BEGIN_LEAVE_SCRIPT_INTERNAL(m_scriptContext)",
          "2258:                     bool isCesu8 = m_scriptContext->GetSource(funcBody->GetSourceIndex())->IsCesu8();",
          "2260:                     size_t offset = this->StartOffset();",
          "2261:                     charcount_t charOffset = this->StartInDocument();",
          "2262:                     size_t length = this->LengthInBytes();",
          "2264:                     LPCUTF8 pszStart = this->GetStartOfDocument();",
          "2266:                     uint32 grfscr = funcBody->GetGrfscr() | fscrDeferredFnc;",
          "2269:                     if (!funcBody->GetIsGlobalFunc())",
          "2270:                     {",
          "2271:                         grfscr &= ~fscrGlobalCode;",
          "2272:                     }",
          "2274:                     if (!funcBody->GetIsDeclaration() && !funcBody->GetIsGlobalFunc()) // No refresh may reparse global function (e.g. eval code)",
          "2278:                         grfscr |= fscrDeferredFncExpression;",
          "2280:                     if (!CONFIG_FLAG(DeferNested) || isDebugOrAsmJsReparse)",
          "2282:                         grfscr &= ~fscrDeferFncParse; // Disable deferred parsing if not DeferNested, or doing a debug/asm.js re-parse",
          "2283:                     }",
          "2285:                     if (isDebugOrAsmJsReparse)",
          "2286:                     {",
          "2287:                         grfscr |= fscrNoAsmJs; // Disable asm.js when debugging or if linking failed",
          "2288:                     }",
          "2290:                     BEGIN_TRANSLATE_EXCEPTION_TO_HRESULT",
          "2291:                     {",
          "2292:                         CompileScriptException se;",
          "2293:                         Parser ps(m_scriptContext, funcBody->GetIsStrictMode() ? TRUE : FALSE);",
          "2294:                         ParseNodePtr parseTree;",
          "2296:                         uint nextFunctionId = funcBody->GetLocalFunctionId();",
          "2297:                         hrParser = ps.ParseSourceWithOffset(&parseTree, pszStart, offset, length, charOffset, isCesu8, grfscr, &se,",
          "2298:                             &nextFunctionId, funcBody->GetRelativeLineNumber(), funcBody->GetSourceContextInfo(),",
          "2299:                             funcBody);",
          "2302:                         if (FAILED(hrParser))",
          "2304:                             hrParseCodeGen = MapDeferredReparseError(hrParser, se); // Map certain errors like OOM/SOE",
          "2305:                             AssertMsg(FAILED(hrParseCodeGen) && SUCCEEDED(hrParser), \"Syntax errors should never be detected on deferred re-parse\");",
          "2309:                             TRACE_BYTECODE(_u(\"\\nDeferred parse %s\\n\"), funcBody->GetDisplayName());",
          "2310:                             Js::AutoDynamicCodeReference dynamicFunctionReference(m_scriptContext);",
          "2312:                             bool forceNoNative = isDebugOrAsmJsReparse ? this->GetScriptContext()->IsInterpreted() : false;",
          "2313:                             hrParseCodeGen = GenerateByteCode(parseTree, grfscr, m_scriptContext,",
          "2314:                                 funcBody->GetParseableFunctionInfoRef(), funcBody->GetSourceIndex(),",
          "2315:                                 forceNoNative, &ps, &se, funcBody->GetScopeInfo(), functionRef);",
          "2317:                             if (SUCCEEDED(hrParseCodeGen))",
          "2318:                             {",
          "2319:                                 fParsed = TRUE;",
          "2320:                             }",
          "2321:                             else",
          "2322:                             {",
          "2323:                                 Assert(hrParseCodeGen == SCRIPT_E_RECORDED);",
          "2324:                                 hrParseCodeGen = se.ei.scode;",
          "2325:                             }",
          "2328:                     END_TRANSLATE_EXCEPTION_TO_HRESULT(hr);",
          "2330:                 END_LEAVE_SCRIPT_INTERNAL(m_scriptContext);",
          "2332:                 THROW_KNOWN_HRESULT_EXCEPTIONS(hr, m_scriptContext);",
          "2334:                 Assert(hr == NO_ERROR);",
          "2336:                 if (!SUCCEEDED(hrParser))",
          "2337:                 {",
          "2338:                     JavascriptError::ThrowError(m_scriptContext, VBSERR_InternalError);",
          "2339:                 }",
          "2340:                 else if (!SUCCEEDED(hrParseCodeGen))",
          "2341:                 {",
          "2346:                     if (hrParseCodeGen == VBSERR_OutOfStack)",
          "2347:                     {",
          "2348:                         JavascriptError::ThrowStackOverflowError(m_scriptContext);",
          "2349:                     }",
          "2350:                     else if (hrParseCodeGen == JSERR_AsmJsCompileError)",
          "2351:                     {",
          "2352:                         asmjsParseFailed = true;",
          "2353:                     }",
          "2354:                     else",
          "2355:                     {",
          "2356:                         JavascriptError::MapAndThrowError(m_scriptContext, hrParseCodeGen);",
          "2357:                     }",
          "2358:                 }",
          "2359:             }",
          "2360:             else",
          "2362:                 fParsed = FALSE;",
          "2365:             if (!asmjsParseFailed)",
          "2367:                 autoRestoreFunctionInfo.Clear();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2370:             this->m_hasBeenParsed = true;",
          "2371:             returnFunctionBody = funcBody;",
          "2372:         }",
          "2374:         {",
          "2375:             returnFunctionBody = this->GetFunctionBody();",
          "2376:         }",
          "2378:         LEAVE_PINNED_SCOPE();",
          "2380:         return returnFunctionBody;",
          "2381:     }",
          "",
          "[Removed Lines]",
          "2373:         else",
          "",
          "[Added Lines]",
          "2379:         else if(!asmjsParseFailed)",
          "2386:         if (asmjsParseFailed)",
          "2387:         {",
          "2389:             m_grfscr |= fscrNoAsmJs;",
          "2390:             return Parse(functionRef, isByteCodeDeserialization);",
          "2391:         }",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp": [
          "File: lib/Runtime/ByteCode/ByteCodeEmitter.cpp -> lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3633:                 {",
          "3634:                     exit(JSERR_AsmJsCompileError);",
          "3635:                 }",
          "3637:                 {",
          "3639:                     throw Js::AsmJsParseException();",
          "3640:                 }",
          "3641:             }",
          "",
          "[Removed Lines]",
          "3636:                 else if (!(flags & fscrDeferFncParse))",
          "",
          "[Added Lines]",
          "3636:                 else",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/GlobalObject.cpp||lib/Runtime/Library/GlobalObject.cpp": [
          "File: lib/Runtime/Library/GlobalObject.cpp -> lib/Runtime/Library/GlobalObject.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "944:             {",
          "945:                 JavascriptError::ThrowStackOverflowError(scriptContext);",
          "946:             }",
          "952:             {",
          "954:                 grfscr |= fscrNoAsmJs;",
          "956:                 return DefaultEvalHelper(scriptContext, source, sourceLength, moduleID, grfscr, pszTitle, registerDocument, isIndirect, strictMode);",
          "957:             }",
          "959:             Assert(funcBody != nullptr);",
          "960:             funcBody->SetDisplayName(pszTitle);",
          "",
          "[Removed Lines]",
          "947:             JavascriptError::MapAndThrowError(scriptContext, hrCodeGen);",
          "948:         }",
          "949:         else",
          "950:         {",
          "951:             if (se.ei.scode == JSERR_AsmJsCompileError)",
          "955:                 se.Clear();",
          "",
          "[Added Lines]",
          "947:             else if (hrCodeGen == JSERR_AsmJsCompileError)",
          "953:             JavascriptError::MapAndThrowError(scriptContext, hrCodeGen);",
          "954:         }",
          "955:         else",
          "956:         {",
          "",
          "---------------"
        ],
        "test/AsmJs/nested.baseline||test/AsmJs/nested.baseline": [
          "File: test/AsmJs/nested.baseline -> test/AsmJs/nested.baseline",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: closure functions are not allowed",
          "2: Asm.js compilation failed.",
          "",
          "---------------"
        ],
        "test/AsmJs/nested.js||test/AsmJs/nested.js": [
          "File: test/AsmJs/nested.js -> test/AsmJs/nested.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: function AsmModule() {",
          "7:     \"use asm\";",
          "8:     function f() {",
          "9:         function g() { }",
          "10:     }",
          "11: }",
          "12: AsmModule();",
          "",
          "---------------"
        ],
        "test/AsmJs/qmarkbug.baseline||test/AsmJs/qmarkbug.baseline": [
          "File: test/AsmJs/qmarkbug.baseline -> test/AsmJs/qmarkbug.baseline",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:  Asm.js Compilation Error function : None::f",
          "4:  Conditional expressions must be of type int, double, or float",
          "6: Asm.js compilation failed.",
          "9:  Asm.js Compilation Error function : None::f",
          "10:  Conditional expressions must be of type int, double, or float",
          "",
          "[Removed Lines]",
          "2: qmarkbug.js(9, 3)",
          "8: qmarkbug.js(25, 3)",
          "",
          "[Added Lines]",
          "2: qmarkbug.js(6, 5)",
          "8: qmarkbug.js(6, 5)",
          "",
          "---------------"
        ],
        "test/AsmJs/qmarkbug.js||test/AsmJs/qmarkbug.js": [
          "File: test/AsmJs/qmarkbug.js -> test/AsmJs/qmarkbug.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "6: var asmModule =",
          "7: (function(stdlib, foreign, heap) { 'use asm';   var Uint8ArrayView = new stdlib.Uint8Array(heap);",
          "8:   var Int16ArrayView = new stdlib.Int16Array(heap);",
          "9:   function f(d0, i1)",
          "10:   {",
          "11:     d0 = +d0;",
          "12:     i1 = i1|0;",
          "13:     var i4 = 0;",
          "14:     i4 = ((0) ? 0 : ((Uint8ArrayView[0])));",
          "15:     return +((-7.555786372591432e+22));",
          "16:   }",
          "17:   return f; })",
          "19:   var asmHeap = new ArrayBuffer(1<<24);",
          "20:   var asmFun = asmModule(this, {}, asmHeap);",
          "21:   asmFun();",
          "22:   var asmModule =",
          "23: (function(stdlib, foreign, heap) { 'use asm';   var Uint8ArrayView = new stdlib.Uint8Array(heap);",
          "24:   var Int16ArrayView = new stdlib.Int16Array(heap);",
          "25:   function f(d0, i1)",
          "26:   {",
          "27:     d0 = +d0;",
          "28:     i1 = i1|0;",
          "29:     var i4 = 0;",
          "30:     i4 = ((0) ? ((Uint8ArrayView[0])): 0 );",
          "31:     return +((-7.555786372591432e+22));",
          "32:   }",
          "33:   return f; })",
          "35:   var asmFun = asmModule(this, {}, asmHeap);",
          "36:   asmFun();",
          "",
          "[Added Lines]",
          "6: eval(`",
          "7: (function(stdlib, foreign, heap) {",
          "8:     'use asm';",
          "9:     var Uint8ArrayView = new stdlib.Uint8Array(heap);",
          "10:     var Int16ArrayView = new stdlib.Int16Array(heap);",
          "11:     function f(d0, i1)",
          "12:     {",
          "13:         d0 = +d0;",
          "14:         i1 = i1|0;",
          "15:         var i4 = 0;",
          "16:         i4 = ((0) ? 0 : ((Uint8ArrayView[0])));",
          "17:         return +((-7.555786372591432e+22));",
          "18:     }",
          "19:     return f;",
          "20: })(this, {}, new ArrayBuffer(1<<24));",
          "21: `);",
          "23: eval(`",
          "24: (function(stdlib, foreign, heap) {",
          "25:     'use asm';",
          "26:     var Uint8ArrayView = new stdlib.Uint8Array(heap);",
          "27:     var Int16ArrayView = new stdlib.Int16Array(heap);",
          "28:     function f(d0, i1)",
          "29:     {",
          "30:         d0 = +d0;",
          "31:         i1 = i1|0;",
          "32:         var i4 = 0;",
          "33:         i4 = ((0) ? ((Uint8ArrayView[0])): 0 );",
          "34:         return +((-7.555786372591432e+22));",
          "35:     }",
          "36:     return f;",
          "37: })(this, {}, new ArrayBuffer(1<<24));",
          "38: `);",
          "",
          "---------------"
        ],
        "test/AsmJs/shadowingBug.baseline||test/AsmJs/shadowingBug.baseline": [
          "File: test/AsmJs/shadowingBug.baseline -> test/AsmJs/shadowingBug.baseline",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:  Asm.js Compilation Error function : None::f1",
          "4:  Invalid identifier f64",
          "6: Asm.js compilation failed.",
          "9:  Asm.js Compilation Error function : None::f1",
          "10:  Invalid identifier f64",
          "12: Asm.js compilation failed.",
          "13: Var declaration with non-constant",
          "14: Asm.js compilation failed.",
          "15: 0",
          "18: 0",
          "",
          "[Removed Lines]",
          "2: shadowingBug.js(7, 97)",
          "8: shadowingBug.js(8, 97)",
          "16: NaN",
          "17: 0",
          "",
          "[Added Lines]",
          "2: shadowingBug.js(1, 97)",
          "7: 0",
          "9: shadowingBug.js(1, 97)",
          "14: NaN",
          "",
          "---------------"
        ],
        "test/AsmJs/shadowingBug.js||test/AsmJs/shadowingBug.js": [
          "File: test/AsmJs/shadowingBug.js -> test/AsmJs/shadowingBug.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: var buffer = new ArrayBuffer(1<<20);",
          "11: var f64Arr = new Float64Array(buffer);",
          "12: print(f64Arr[0]);",
          "",
          "[Removed Lines]",
          "7: print((function (stdlib,foreign,buffer) { \"use asm\"; var f64 = new stdlib.Float64Array(buffer); function f1(){ var f64 = 1.; f64[0] = 0.0;return +0.0;} return f1;})(this,{},buffer)());",
          "8: print((function (stdlib,foreign,buffer) { \"use asm\"; var f64 = new stdlib.Float64Array(buffer); function f1(){ var f64 = 1.; return +f64[0];} return f1;})(this,{},buffer)());",
          "9: print((function (stdlib,foreign,buffer) { \"use asm\"; const a = 10; function f1(){ var a =0; var b = a; return b|0;} return f1;})(this,{},buffer)());",
          "",
          "[Added Lines]",
          "7: eval('print((function (stdlib,foreign,buffer) { \"use asm\"; var f64 = new stdlib.Float64Array(buffer); function f1(){ var f64 = 1.; f64[0] = 0.0;return +0.0;} return f1;})(this,{},buffer)())');",
          "8: eval('print((function (stdlib,foreign,buffer) { \"use asm\"; var f64 = new stdlib.Float64Array(buffer); function f1(){ var f64 = 1.; return +f64[0];} return f1;})(this,{},buffer)())');",
          "9: eval('print((function (stdlib,foreign,buffer) { \"use asm\"; const a = 10; function f1(){ var a =0; var b = a; return b|0;} return f1;})(this,{},buffer)())');",
          "",
          "---------------"
        ]
      }
    }
  ]
}