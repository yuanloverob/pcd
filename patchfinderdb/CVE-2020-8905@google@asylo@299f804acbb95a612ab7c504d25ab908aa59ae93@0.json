{
  "cve_id": "CVE-2020-8905",
  "cve_desc": "A buffer length validation vulnerability in Asylo versions prior to 0.6.0 allows an attacker to read data they should not have access to. The 'enc_untrusted_recvfrom' function generates a return value which is deserialized by 'MessageReader', and copied into three different 'extents'. The length of the third 'extents' is controlled by the outside world, and not verified on copy, allowing the attacker to force Asylo to copy trusted memory data into an untrusted buffer of significantly small length.. We recommend updating Asylo to version 0.6.0 or later.",
  "repo": "google/asylo",
  "patch_hash": "299f804acbb95a612ab7c504d25ab908aa59ae93",
  "patch_info": {
    "commit_hash": "299f804acbb95a612ab7c504d25ab908aa59ae93",
    "repo": "google/asylo",
    "commit_url": "https://github.com/google/asylo/commit/299f804acbb95a612ab7c504d25ab908aa59ae93",
    "files": [
      "asylo/platform/host_call/trusted/host_calls.cc"
    ],
    "message": "Fix vulnerability in enc_untrusted_recvfrom\n\nChange recvfrom memcpy to check for received_buffer size to avoid\ncopying extra buffer.\n\nThis issue was reported by Qinkun Bao, Zhaofeng Chen, Mingshen Sun, and\nKang Li from Baidu Security.\n\nPiperOrigin-RevId: 322476299\nChange-Id: I3606ff9ec51ec7cc4312c7555c645a2fc6e09b21",
    "before_after_code_files": [
      "asylo/platform/host_call/trusted/host_calls.cc||asylo/platform/host_call/trusted/host_calls.cc"
    ]
  },
  "patch_diff": {
    "asylo/platform/host_call/trusted/host_calls.cc||asylo/platform/host_call/trusted/host_calls.cc": [
      "File: asylo/platform/host_call/trusted/host_calls.cc -> asylo/platform/host_call/trusted/host_calls.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "982:   }",
      "984:   auto buffer_received = output.next();",
      "",
      "[Removed Lines]",
      "985:   memcpy(buf, buffer_received.data(), len);",
      "",
      "[Added Lines]",
      "985:   memcpy(buf, buffer_received.data(), std::min(len, buffer_received.size()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "48d54526ba807a09e8eacb1c453fd25ab95d5987",
      "candidate_info": {
        "commit_hash": "48d54526ba807a09e8eacb1c453fd25ab95d5987",
        "repo": "google/asylo",
        "commit_url": "https://github.com/google/asylo/commit/48d54526ba807a09e8eacb1c453fd25ab95d5987",
        "files": [
          "asylo/platform/arch/include/trusted/host_calls.h",
          "asylo/platform/arch/sgx/bridge.edl",
          "asylo/platform/arch/sgx/trusted/host_calls.cc",
          "asylo/platform/arch/sgx/untrusted/ocalls.cc",
          "asylo/platform/common/bridge_proto_serializer.cc",
          "asylo/platform/common/bridge_proto_serializer.h",
          "asylo/platform/common/bridge_proto_types.proto",
          "asylo/platform/host_call/exit_handler_constants.h",
          "asylo/platform/host_call/trusted/host_calls.cc",
          "asylo/platform/host_call/trusted/host_calls.h",
          "asylo/platform/host_call/untrusted/host_call_handlers.cc",
          "asylo/platform/host_call/untrusted/host_call_handlers.h",
          "asylo/platform/host_call/untrusted/host_call_handlers_initializer.cc",
          "asylo/platform/host_call/untrusted/host_call_handlers_initializer_test.cc",
          "asylo/platform/system_call/type_conversions/define_types.py"
        ],
        "message": "Implement enc_untrusted_recvfrom()\n\nThis implements enc_untrusted_recvfrom() in the host call library.\nSince the function uses sockaddr and *addrlen as output parameters,\nit cannot be implemented by the system_call library.\n\nAlso defines RecvSendFlag enums for generating the conversion\nfunctions required by recvfrom.\n\nPiperOrigin-RevId: 265765015\nChange-Id: I5b00bccf3f5358a9eeb5f62ca036dd67723151b8",
        "before_after_code_files": [
          "asylo/platform/arch/include/trusted/host_calls.h||asylo/platform/arch/include/trusted/host_calls.h",
          "asylo/platform/arch/sgx/bridge.edl||asylo/platform/arch/sgx/bridge.edl",
          "asylo/platform/arch/sgx/trusted/host_calls.cc||asylo/platform/arch/sgx/trusted/host_calls.cc",
          "asylo/platform/arch/sgx/untrusted/ocalls.cc||asylo/platform/arch/sgx/untrusted/ocalls.cc",
          "asylo/platform/common/bridge_proto_serializer.cc||asylo/platform/common/bridge_proto_serializer.cc",
          "asylo/platform/common/bridge_proto_serializer.h||asylo/platform/common/bridge_proto_serializer.h",
          "asylo/platform/common/bridge_proto_types.proto||asylo/platform/common/bridge_proto_types.proto",
          "asylo/platform/host_call/exit_handler_constants.h||asylo/platform/host_call/exit_handler_constants.h",
          "asylo/platform/host_call/trusted/host_calls.cc||asylo/platform/host_call/trusted/host_calls.cc",
          "asylo/platform/host_call/trusted/host_calls.h||asylo/platform/host_call/trusted/host_calls.h",
          "asylo/platform/host_call/untrusted/host_call_handlers.cc||asylo/platform/host_call/untrusted/host_call_handlers.cc",
          "asylo/platform/host_call/untrusted/host_call_handlers.h||asylo/platform/host_call/untrusted/host_call_handlers.h",
          "asylo/platform/host_call/untrusted/host_call_handlers_initializer.cc||asylo/platform/host_call/untrusted/host_call_handlers_initializer.cc",
          "asylo/platform/host_call/untrusted/host_call_handlers_initializer_test.cc||asylo/platform/host_call/untrusted/host_call_handlers_initializer_test.cc",
          "asylo/platform/system_call/type_conversions/define_types.py||asylo/platform/system_call/type_conversions/define_types.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "asylo/platform/host_call/trusted/host_calls.cc||asylo/platform/host_call/trusted/host_calls.cc"
          ],
          "candidate": [
            "asylo/platform/host_call/trusted/host_calls.cc||asylo/platform/host_call/trusted/host_calls.cc"
          ]
        }
      },
      "candidate_diff": {
        "asylo/platform/arch/include/trusted/host_calls.h||asylo/platform/arch/include/trusted/host_calls.h": [
          "File: asylo/platform/arch/include/trusted/host_calls.h -> asylo/platform/arch/include/trusted/host_calls.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: void enc_untrusted_freeaddrinfo(struct addrinfo *res);",
          "87: int enc_untrusted_getsockopt(int sockfd, int level, int optname, void *optval,",
          "88:                              socklen_t *optlen);",
          "",
          "[Removed Lines]",
          "89: ssize_t enc_untrusted_recvfrom(int sockfd, void *buf, size_t len, int flags,",
          "90:                                struct sockaddr *src_addr, socklen_t *addrlen);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "asylo/platform/arch/sgx/bridge.edl||asylo/platform/arch/sgx/bridge.edl": [
          "File: asylo/platform/arch/sgx/bridge.edl -> asylo/platform/arch/sgx/bridge.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:                                        [out] unsigned int *optlen_out)",
          "84:                                        propagate_errno;",
          "",
          "[Removed Lines]",
          "86:     ssize_t ocall_enc_untrusted_recvfrom(",
          "87:         [in, size=serialized_args_len] const char *serialized_args,",
          "88:         bridge_ssize_t serialized_args_len,",
          "89:         [out] char **serialized_buffer,",
          "90:         [out] char **serialized_output,",
          "91:         [out] bridge_ssize_t *serialized_output_len) propagate_errno;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "asylo/platform/arch/sgx/trusted/host_calls.cc||asylo/platform/arch/sgx/trusted/host_calls.cc": [
          "File: asylo/platform/arch/sgx/trusted/host_calls.cc -> asylo/platform/arch/sgx/trusted/host_calls.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:   return ret;",
          "216: }",
          "",
          "[Removed Lines]",
          "218: ssize_t enc_untrusted_recvfrom(int sockfd, void *buf, size_t len, int flags,",
          "219:                                struct sockaddr *src_addr, socklen_t *addrlen) {",
          "220:   ssize_t ret = 0;",
          "221:   char *serialized_args = nullptr;",
          "222:   size_t serialized_len = 0;",
          "223:   if (!asylo::SerializeRecvFromArgs(sockfd, len, flags, &serialized_args,",
          "224:                                     &serialized_len)) {",
          "225:     errno = EINVAL;",
          "226:     return -1;",
          "227:   }",
          "228:   asylo::MallocUniquePtr<char[]> args_ptr(serialized_args);",
          "229:   char *serialized_output = nullptr;",
          "230:   char **serialized_output_ptr = src_addr ? &serialized_output : nullptr;",
          "231:   char *output_buf = nullptr;",
          "232:   bridge_ssize_t output_len = 0;",
          "233:   CHECK_OCALL(ocall_enc_untrusted_recvfrom(&ret, serialized_args,",
          "234:                                            serialized_len, &output_buf,",
          "235:                                            serialized_output_ptr, &output_len));",
          "236:   asylo::UntrustedUniquePtr<char[]> output_buf_ptr(output_buf);",
          "237:   if (ret < 0) {",
          "239:     return -1;",
          "240:   }",
          "241:   if (!sgx_is_outside_enclave(output_buf, ret)) {",
          "242:     abort();",
          "243:   }",
          "244:   memcpy(buf, output_buf, ret);",
          "245:   if (src_addr) {",
          "246:     struct sockaddr *src_addr_copy = nullptr;",
          "247:     asylo::UntrustedUniquePtr<char[]> output_unique_ptr(serialized_output);",
          "248:     if (!sgx_is_outside_enclave(serialized_output, output_len)) {",
          "249:       abort();",
          "250:     }",
          "251:     std::string serialized_output_str(serialized_output, output_len);",
          "252:     if (!addrlen || !asylo::DeserializeRecvFromSrcAddr(serialized_output_str,",
          "253:                                                        &src_addr_copy)) {",
          "254:       errno = EINVAL;",
          "255:       return -1;",
          "256:     }",
          "257:     asylo::MallocUniquePtr<struct sockaddr> src_addr_ptr(src_addr_copy);",
          "258:     if (src_addr_copy->sa_family == AF_INET) {",
          "259:       memcpy(",
          "260:           src_addr, src_addr_copy,",
          "261:           std::min(static_cast<size_t>(*addrlen), sizeof(struct sockaddr_in)));",
          "263:     } else if (src_addr_copy->sa_family == AF_INET6) {",
          "264:       memcpy(",
          "265:           src_addr, src_addr_copy,",
          "266:           std::min(static_cast<size_t>(*addrlen), sizeof(struct sockaddr_in6)));",
          "268:     } else {",
          "269:       errno = EINVAL;",
          "270:       return -1;",
          "271:     }",
          "272:   }",
          "273:   return ret;",
          "274: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "asylo/platform/arch/sgx/untrusted/ocalls.cc||asylo/platform/arch/sgx/untrusted/ocalls.cc": [
          "File: asylo/platform/arch/sgx/untrusted/ocalls.cc -> asylo/platform/arch/sgx/untrusted/ocalls.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:   return ret;",
          "279: }",
          "",
          "[Removed Lines]",
          "281: ssize_t ocall_enc_untrusted_recvfrom(const char *serialized_args,",
          "282:                                      bridge_ssize_t serialized_args_len,",
          "283:                                      char **buf_ptr, char **serialized_output,",
          "284:                                      bridge_ssize_t *serialized_output_len) {",
          "285:   std::string serialized_args_str(serialized_args, serialized_args_len);",
          "286:   int sockfd = 0;",
          "287:   size_t len = 0;",
          "288:   int flags = 0;",
          "289:   if (!asylo::DeserializeRecvFromArgs(serialized_args, &sockfd, &len, &flags) ||",
          "290:       !buf_ptr) {",
          "291:     errno = EINVAL;",
          "292:     return -1;",
          "293:   }",
          "295:   if (serialized_output) {",
          "296:     struct sockaddr_storage src_addr;",
          "297:     struct sockaddr *src_addr_ptr =",
          "298:         reinterpret_cast<struct sockaddr *>(&src_addr);",
          "299:     socklen_t addrlen;",
          "300:     int ret = recvfrom(sockfd, *buf_ptr, len, flags, src_addr_ptr, &addrlen);",
          "301:     size_t src_addr_len = 0;",
          "305:     int error_code;",
          "308:     if (!asylo::SerializeRecvFromSrcAddr(src_addr_ptr, serialized_output,",
          "309:                                          &src_addr_len, &error_code)) {",
          "310:       errno = EINVAL;",
          "311:       return -1;",
          "312:     }",
          "314:     return ret;",
          "315:   } else {",
          "316:     return recvfrom(sockfd, *buf_ptr, len, flags, nullptr, nullptr);",
          "317:   }",
          "318: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "asylo/platform/common/bridge_proto_serializer.cc||asylo/platform/common/bridge_proto_serializer.cc": [
          "File: asylo/platform/common/bridge_proto_serializer.cc -> asylo/platform/common/bridge_proto_serializer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "559:   }",
          "560: }",
          "629: }  // namespace",
          "631: bool SerializeAddrinfo(const struct addrinfo *in, std::string *out,",
          "",
          "[Removed Lines]",
          "563: bool ConvertToRecvFromArgs(int sockfd, size_t len, int flags,",
          "564:                            RecvFromArgs *args) {",
          "565:   if (!args) {",
          "566:     return false;",
          "567:   }",
          "568:   args->set_sockfd(sockfd);",
          "569:   args->set_len(len);",
          "570:   if (flags & MSG_OOB) args->add_flags(RecvSendFlags::PROTO_OOB);",
          "571:   if (flags & MSG_PEEK) args->add_flags(RecvSendFlags::PROTO_PEEK);",
          "572:   if (flags & MSG_DONTROUTE) args->add_flags(RecvSendFlags::PROTO_DONTROUTE);",
          "573:   if (flags & MSG_CTRUNC) args->add_flags(RecvSendFlags::PROTO_CTRUNC);",
          "574:   if (flags & MSG_PROXY) args->add_flags(RecvSendFlags::PROTO_PROXY);",
          "575:   if (flags & MSG_TRUNC) args->add_flags(RecvSendFlags::PROTO_TRUNC);",
          "576:   if (flags & MSG_DONTWAIT) args->add_flags(RecvSendFlags::PROTO_DONTWAIT);",
          "577:   if (flags & MSG_EOR) args->add_flags(RecvSendFlags::PROTO_EOR);",
          "578:   if (flags & MSG_WAITALL) args->add_flags(RecvSendFlags::PROTO_WAITALL);",
          "579:   if (flags & MSG_FIN) args->add_flags(RecvSendFlags::PROTO_FIN);",
          "580:   if (flags & MSG_SYN) args->add_flags(RecvSendFlags::PROTO_SYN);",
          "581:   if (flags & MSG_CONFIRM) args->add_flags(RecvSendFlags::PROTO_CONFIRM);",
          "582:   if (flags & MSG_RST) args->add_flags(RecvSendFlags::PROTO_RST);",
          "583:   if (flags & MSG_ERRQUEUE) args->add_flags(RecvSendFlags::PROTO_ERRQUEUE);",
          "584:   if (flags & MSG_NOSIGNAL) args->add_flags(RecvSendFlags::PROTO_NOSIGNAL);",
          "585:   if (flags & MSG_MORE) args->add_flags(RecvSendFlags::PROTO_MORE);",
          "586:   if (flags & MSG_WAITFORONE) args->add_flags(RecvSendFlags::PROTO_WAITFORONE);",
          "587:   if (flags & MSG_FASTOPEN) args->add_flags(RecvSendFlags::PROTO_FASTOPEN);",
          "588:   if (flags & MSG_CMSG_CLOEXEC) {",
          "589:     args->add_flags(RecvSendFlags::PROTO_CMSG_CLOEXEC);",
          "590:   }",
          "591:   return true;",
          "592: }",
          "594: bool ConvertFromRecvFromArgsProto(const RecvFromArgs &args, int *sockfd,",
          "595:                                   size_t *len, int *flags) {",
          "596:   if (!sockfd || !len || !flags) {",
          "597:     return false;",
          "598:   }",
          "602:   for (int i = 0; i < args.flags().size(); ++i) {",
          "603:     int curr_flag = args.flags(i);",
          "604:     if (curr_flag == RecvSendFlags::PROTO_OOB) *flags |= MSG_OOB;",
          "605:     if (curr_flag == RecvSendFlags::PROTO_PEEK) *flags |= MSG_PEEK;",
          "606:     if (curr_flag == RecvSendFlags::PROTO_DONTROUTE) *flags |= MSG_DONTROUTE;",
          "607:     if (curr_flag == RecvSendFlags::PROTO_CTRUNC) *flags |= MSG_CTRUNC;",
          "608:     if (curr_flag == RecvSendFlags::PROTO_PROXY) *flags |= MSG_PROXY;",
          "609:     if (curr_flag == RecvSendFlags::PROTO_TRUNC) *flags |= MSG_TRUNC;",
          "610:     if (curr_flag == RecvSendFlags::PROTO_DONTWAIT) *flags |= MSG_DONTWAIT;",
          "611:     if (curr_flag == RecvSendFlags::PROTO_EOR) *flags |= MSG_EOR;",
          "612:     if (curr_flag == RecvSendFlags::PROTO_WAITALL) *flags |= MSG_WAITALL;",
          "613:     if (curr_flag == RecvSendFlags::PROTO_FIN) *flags |= MSG_FIN;",
          "614:     if (curr_flag == RecvSendFlags::PROTO_SYN) *flags |= MSG_SYN;",
          "615:     if (curr_flag == RecvSendFlags::PROTO_CONFIRM) *flags |= MSG_CONFIRM;",
          "616:     if (curr_flag == RecvSendFlags::PROTO_RST) *flags |= MSG_RST;",
          "617:     if (curr_flag == RecvSendFlags::PROTO_ERRQUEUE) *flags |= MSG_ERRQUEUE;",
          "618:     if (curr_flag == RecvSendFlags::PROTO_NOSIGNAL) *flags |= MSG_NOSIGNAL;",
          "619:     if (curr_flag == RecvSendFlags::PROTO_MORE) *flags |= MSG_MORE;",
          "620:     if (curr_flag == RecvSendFlags::PROTO_WAITFORONE) *flags |= MSG_WAITFORONE;",
          "621:     if (curr_flag == RecvSendFlags::PROTO_FASTOPEN) *flags |= MSG_FASTOPEN;",
          "622:     if (curr_flag == RecvSendFlags::PROTO_CMSG_CLOEXEC) {",
          "624:     }",
          "625:   }",
          "626:   return true;",
          "627: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "837:   return true;",
          "838: }",
          "890: }  // namespace asylo",
          "",
          "[Removed Lines]",
          "840: bool SerializeRecvFromArgs(int sockfd, size_t len, int flags, char **out,",
          "841:                            size_t *out_len) {",
          "842:   if (!out || !out_len) {",
          "843:     return false;",
          "844:   }",
          "845:   RecvFromArgs args_proto;",
          "846:   if (ConvertToRecvFromArgs(sockfd, len, flags, &args_proto)) {",
          "850:     return args_proto.SerializeToArray(*out, *out_len);",
          "851:   }",
          "852:   return false;",
          "853: }",
          "855: bool DeserializeRecvFromArgs(absl::string_view in, int *sockfd, size_t *len,",
          "856:                              int *flags) {",
          "857:   RecvFromArgs args;",
          "858:   if (!args.ParseFromArray(in.data(), in.length())) {",
          "859:     return false;",
          "860:   }",
          "861:   return ConvertFromRecvFromArgsProto(args, sockfd, len, flags);",
          "862: }",
          "864: bool SerializeRecvFromSrcAddr(struct sockaddr *src_addr, char **out,",
          "865:                               size_t *out_len, int *bridge_error_code) {",
          "866:   RecvFromSrcAddr addr_proto;",
          "867:   if (!src_addr || !out || !out_len ||",
          "868:       !ConvertToSockaddrProtobuf(src_addr, addr_proto.mutable_src_addr(),",
          "869:                                  bridge_error_code)) {",
          "870:     return false;",
          "871:   }",
          "875:   return addr_proto.SerializeToArray(*out, *out_len);",
          "876: }",
          "878: bool DeserializeRecvFromSrcAddr(absl::string_view in,",
          "879:                                 struct sockaddr **src_addr) {",
          "880:   RecvFromSrcAddr addr_proto;",
          "881:   if (!src_addr || !addr_proto.ParseFromArray(in.data(), in.length())) {",
          "882:     return false;",
          "883:   }",
          "886:   return ConvertToSockaddr(addr_proto.src_addr(), src_addr,",
          "888: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "asylo/platform/common/bridge_proto_serializer.h||asylo/platform/common/bridge_proto_serializer.h": [
          "File: asylo/platform/common/bridge_proto_serializer.h -> asylo/platform/common/bridge_proto_serializer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: void FreeDeserializedIfAddrs(struct ifaddrs *ifa);",
          "",
          "[Removed Lines]",
          "47: bool SerializeRecvFromArgs(int sockfd, size_t len, int flags, char **out,",
          "48:                            size_t *out_len);",
          "50: bool DeserializeRecvFromArgs(absl::string_view in, int *sockfd, size_t *len,",
          "51:                              int *flags);",
          "53: bool SerializeRecvFromSrcAddr(struct sockaddr *src_addr, char **out,",
          "54:                               size_t *out_len, int *bridge_error_code);",
          "56: bool DeserializeRecvFromSrcAddr(absl::string_view in,",
          "57:                                 struct sockaddr **src_addr);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "asylo/platform/common/bridge_proto_types.proto||asylo/platform/common/bridge_proto_types.proto": [
          "File: asylo/platform/common/bridge_proto_types.proto -> asylo/platform/common/bridge_proto_types.proto",
          "--- Hunk 1 ---",
          "[Context before]",
          "166: message InotifyEventList {",
          "167:   repeated InotifyEvent events = 1;",
          "168: }",
          "",
          "[Removed Lines]",
          "170: enum RecvSendFlags {",
          "171:   PROTO_DEFAULT = 0;",
          "172:   PROTO_OOB = 1;",
          "173:   PROTO_PEEK = 2;",
          "174:   PROTO_DONTROUTE = 3;",
          "175:   PROTO_CTRUNC = 4;",
          "176:   PROTO_PROXY = 5;",
          "177:   PROTO_TRUNC = 6;",
          "178:   PROTO_DONTWAIT = 7;",
          "179:   PROTO_EOR = 8;",
          "180:   PROTO_WAITALL = 9;",
          "181:   PROTO_FIN = 10;",
          "182:   PROTO_SYN = 11;",
          "183:   PROTO_CONFIRM = 12;",
          "184:   PROTO_RST = 13;",
          "185:   PROTO_ERRQUEUE = 14;",
          "186:   PROTO_NOSIGNAL = 15;",
          "187:   PROTO_MORE = 16;",
          "188:   PROTO_WAITFORONE = 17;",
          "189:   PROTO_FASTOPEN = 18;",
          "190:   PROTO_CMSG_CLOEXEC = 19;",
          "191: }",
          "192: message RecvFromArgs {",
          "193:   optional int32 sockfd = 1;",
          "194:   optional uint64 len = 2;",
          "195:   repeated RecvSendFlags flags = 3;",
          "196: }",
          "198: message RecvFromSrcAddr {",
          "199:   optional SockaddrProto src_addr = 1;",
          "200: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "asylo/platform/host_call/exit_handler_constants.h||asylo/platform/host_call/exit_handler_constants.h": [
          "File: asylo/platform/host_call/exit_handler_constants.h -> asylo/platform/host_call/exit_handler_constants.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: static constexpr uint64_t kGetPeernameHandler =",
          "71:     primitives::kSelectorHostCall + 11;",
          "73: }  // namespace host_call",
          "74: }  // namespace asylo",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: static constexpr uint64_t kRecvFromHandler = primitives::kSelectorHostCall + 12;",
          "",
          "---------------"
        ],
        "asylo/platform/host_call/trusted/host_calls.cc||asylo/platform/host_call/trusted/host_calls.cc": [
          "File: asylo/platform/host_call/trusted/host_calls.cc -> asylo/platform/host_call/trusted/host_calls.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "851:   return result;",
          "852: }",
          "854: }  // extern \"C\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "854: ssize_t enc_untrusted_recvfrom(int sockfd, void *buf, size_t len, int flags,",
          "855:                                struct sockaddr *src_addr, socklen_t *addrlen) {",
          "856:   int klinux_flags = 0;",
          "857:   TokLinuxRecvSendFlag(&flags, &klinux_flags);",
          "858:   if (flags != 0 && klinux_flags == 0) {",
          "859:     errno = EINVAL;",
          "860:     return -1;",
          "861:   }",
          "863:   ::asylo::primitives::MessageWriter input;",
          "864:   input.Push<int>(sockfd);",
          "865:   input.Push<uint64_t>(len);",
          "866:   input.Push<int>(klinux_flags);",
          "867:   ::asylo::primitives::MessageReader output;",
          "868:   const auto status = ::asylo::host_call::NonSystemCallDispatcher(",
          "869:       ::asylo::host_call::kRecvFromHandler, &input, &output);",
          "871:   if (!status.ok()) {",
          "872:     ::asylo::primitives::TrustedPrimitives::BestEffortAbort(",
          "873:         \"recvfrom host call failed. Aborting\");",
          "874:   }",
          "875:   if (output.size() != 4) {",
          "876:     ::asylo::primitives::TrustedPrimitives::BestEffortAbort(",
          "877:         \"Expected 4 arguments in output for recvfrom host call. Aborting\");",
          "878:   }",
          "880:   int result = output.next<int>();",
          "881:   int klinux_errno = output.next<int>();",
          "884:   if (result == -1) {",
          "885:     int enclave_errno;",
          "886:     FromkLinuxErrorNumber(&klinux_errno, &enclave_errno);",
          "887:     errno = enclave_errno;",
          "888:     return result;",
          "889:   }",
          "891:   auto buffer_received = output.next();",
          "892:   memcpy(buf, buffer_received.data(), len);",
          "897:   if (src_addr != nullptr && addrlen != nullptr) {",
          "898:     auto klinux_sockaddr_ext = output.next();",
          "899:     const struct klinux_sockaddr *klinux_addr =",
          "900:         klinux_sockaddr_ext.As<struct klinux_sockaddr>();",
          "901:     FromkLinuxSockAddr(klinux_addr, klinux_sockaddr_ext.size(), src_addr,",
          "902:                        addrlen,",
          "903:                        asylo::primitives::TrustedPrimitives::BestEffortAbort);",
          "904:   }",
          "906:   return result;",
          "907: }",
          "",
          "---------------"
        ],
        "asylo/platform/host_call/trusted/host_calls.h||asylo/platform/host_call/trusted/host_calls.h": [
          "File: asylo/platform/host_call/trusted/host_calls.h -> asylo/platform/host_call/trusted/host_calls.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "114: int enc_untrusted_accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);",
          "115: int enc_untrusted_getpeername(int sockfd, struct sockaddr *addr,",
          "116:                               socklen_t *addrlen);",
          "118: #ifdef __cplusplus",
          "119: }  // extern \"C\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117: ssize_t enc_untrusted_recvfrom(int sockfd, void *buf, size_t len, int flags,",
          "118:                                struct sockaddr *src_addr, socklen_t *addrlen);",
          "",
          "---------------"
        ],
        "asylo/platform/host_call/untrusted/host_call_handlers.cc||asylo/platform/host_call/untrusted/host_call_handlers.cc": [
          "File: asylo/platform/host_call/untrusted/host_call_handlers.cc -> asylo/platform/host_call/untrusted/host_call_handlers.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "258:   return Status::OkStatus();",
          "259: }",
          "261: }  // namespace host_call",
          "262: }  // namespace asylo",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261: Status RecvFromHandler(const std::shared_ptr<primitives::Client> &client,",
          "262:                        void *context, primitives::MessageReader *input,",
          "263:                        primitives::MessageWriter *output) {",
          "264:   ASYLO_RETURN_IF_INCORRECT_READER_ARGUMENTS(*input, 3);",
          "265:   int sockfd = input->next<int>();",
          "266:   size_t len = input->next<size_t>();",
          "267:   int klinux_flags = input->next<int>();",
          "268:   struct sockaddr_storage sock_addr;",
          "269:   socklen_t sock_len = sizeof(sock_addr);",
          "271:   auto buffer = absl::make_unique<char[]>(len);",
          "272:   ssize_t ret = recvfrom(",
          "273:       sockfd, reinterpret_cast<void *>(buffer.get()), len, klinux_flags,",
          "274:       reinterpret_cast<struct sockaddr *>(&sock_addr), &sock_len);",
          "276:   LOG_IF(FATAL, sock_len > sizeof(sock_addr))",
          "277:       << \"Insufficient sockaddr buf space encountered for recvfrom host call.\";",
          "279:   output->Push<int>(ret);",
          "280:   output->Push<int>(errno);",
          "281:   output->PushByCopy(primitives::Extent{buffer.get(), len});",
          "282:   output->Push<struct sockaddr_storage>(sock_addr);",
          "284:   return Status::OkStatus();",
          "285: }",
          "",
          "---------------"
        ],
        "asylo/platform/host_call/untrusted/host_call_handlers.h||asylo/platform/host_call/untrusted/host_call_handlers.h": [
          "File: asylo/platform/host_call/untrusted/host_call_handlers.h -> asylo/platform/host_call/untrusted/host_call_handlers.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:                           void *context, primitives::MessageReader *input,",
          "97:                           primitives::MessageWriter *output);",
          "99: }  // namespace host_call",
          "100: }  // namespace asylo",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102: Status RecvFromHandler(const std::shared_ptr<primitives::Client> &client,",
          "103:                        void *context, primitives::MessageReader *input,",
          "104:                        primitives::MessageWriter *output);",
          "",
          "---------------"
        ],
        "asylo/platform/host_call/untrusted/host_call_handlers_initializer.cc||asylo/platform/host_call/untrusted/host_call_handlers_initializer.cc": [
          "File: asylo/platform/host_call/untrusted/host_call_handlers_initializer.cc -> asylo/platform/host_call/untrusted/host_call_handlers_initializer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:   ASYLO_RETURN_IF_ERROR(exit_call_provider->RegisterExitHandler(",
          "62:       kGetPeernameHandler, primitives::ExitHandler{GetPeernameHandler}));",
          "64:   return Status::OkStatus();",
          "65: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:   ASYLO_RETURN_IF_ERROR(exit_call_provider->RegisterExitHandler(",
          "65:       kRecvFromHandler, primitives::ExitHandler{RecvFromHandler}));",
          "",
          "---------------"
        ],
        "asylo/platform/host_call/untrusted/host_call_handlers_initializer_test.cc||asylo/platform/host_call/untrusted/host_call_handlers_initializer_test.cc": [
          "File: asylo/platform/host_call/untrusted/host_call_handlers_initializer_test.cc -> asylo/platform/host_call/untrusted/host_call_handlers_initializer_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:   EXPECT_THAT(client->exit_call_provider()->InvokeExitHandler(",
          "129:                   kGetPeernameHandler, &input, &output, client.get()),",
          "130:               StatusIs(error::GoogleError::INVALID_ARGUMENT));",
          "131: }",
          "133: }  // namespace host_call",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:   EXPECT_THAT(client->exit_call_provider()->RegisterExitHandler(",
          "132:                   kRecvFromHandler, primitives::ExitHandler{nullptr}),",
          "133:               StatusIs(error::GoogleError::ALREADY_EXISTS));",
          "134:   EXPECT_THAT(client->exit_call_provider()->InvokeExitHandler(",
          "135:                   kRecvFromHandler, &input, &output, client.get()),",
          "136:               StatusIs(error::GoogleError::INVALID_ARGUMENT));",
          "",
          "---------------"
        ],
        "asylo/platform/system_call/type_conversions/define_types.py||asylo/platform/system_call/type_conversions/define_types.py": [
          "File: asylo/platform/system_call/type_conversions/define_types.py -> asylo/platform/system_call/type_conversions/define_types.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:     default_value_host=-1,",
          "187:     default_value_newlib=-1)",
          "189: define_struct(",
          "190:     name=\"timespec\",",
          "191:     values=[",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189: define_enum(",
          "190:     name=\"RecvSendFlag\",",
          "191:     values=[",
          "192:         \"MSG_OOB\", \"MSG_PEEK\", \"MSG_DONTROUTE\", \"MSG_CTRUNC\", \"MSG_PROXY\",",
          "193:         \"MSG_TRUNC\", \"MSG_DONTWAIT\", \"MSG_EOR\", \"MSG_WAITALL\", \"MSG_FIN\",",
          "194:         \"MSG_SYN\", \"MSG_CONFIRM\", \"MSG_RST\", \"MSG_ERRQUEUE\", \"MSG_NOSIGNAL\",",
          "195:         \"MSG_MORE\", \"MSG_WAITFORONE\", \"MSG_FASTOPEN\", \"MSG_CMSG_CLOEXEC\"",
          "196:     ],",
          "197:     multi_valued=True,",
          "198: )",
          "",
          "---------------"
        ]
      }
    }
  ]
}