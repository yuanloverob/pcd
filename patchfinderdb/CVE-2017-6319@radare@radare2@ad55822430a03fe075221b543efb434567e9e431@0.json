{
  "cve_id": "CVE-2017-6319",
  "cve_desc": "The dex_parse_debug_item function in libr/bin/p/bin_dex.c in radare2 1.2.1 allows remote attackers to cause a denial of service (buffer overflow and application crash) or possibly have unspecified other impact via a crafted DEX file.",
  "repo": "radare/radare2",
  "patch_hash": "ad55822430a03fe075221b543efb434567e9e431",
  "patch_info": {
    "commit_hash": "ad55822430a03fe075221b543efb434567e9e431",
    "repo": "radare/radare2",
    "commit_url": "https://github.com/radare/radare2/commit/ad55822430a03fe075221b543efb434567e9e431",
    "files": [
      "libr/bin/p/bin_dex.c"
    ],
    "message": "Fix #6836 - oob write in dex",
    "before_after_code_files": [
      "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c"
    ]
  },
  "patch_diff": {
    "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c": [
      "File: libr/bin/p/bin_dex.c -> libr/bin/p/bin_dex.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "309:  ut64 source_file_idx = c->source_file;",
      "310:  RList *params, *debug_positions, *emitted_debug_locals = NULL;",
      "311:  bool keep = true;",
      "314:  }",
      "315:  p4 = r_uleb128 (p4, p4_end - p4, &line_start);",
      "316:  p4 = r_uleb128 (p4, p4_end - p4, &parameters_size);",
      "",
      "[Removed Lines]",
      "312:  if (argReg >= regsz) {",
      "",
      "[Added Lines]",
      "312:  if (argReg > regsz) {",
      "313:   return; // this return breaks tests",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5321299adb6939a4412b59eca542d5d41c25e2b8",
      "candidate_info": {
        "commit_hash": "5321299adb6939a4412b59eca542d5d41c25e2b8",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/5321299adb6939a4412b59eca542d5d41c25e2b8",
        "files": [
          "libr/bin/p/bin_dex.c"
        ],
        "message": "Fix minor issues in dex parsing (#6385)",
        "before_after_code_files": [
          "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c"
          ],
          "candidate": [
            "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c": [
          "File: libr/bin/p/bin_dex.c -> libr/bin/p/bin_dex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:  return str;",
          "172: }",
          "174: static char *dex_method_signature(RBinDexObj *bin, int method_idx) {",
          "175:  ut32 proto_id, params_off, type_id, list_size;",
          "176:  char *r, *return_type = NULL, *signature = NULL, *buff = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174: static char *dex_type_descriptor(RBinDexObj *bin, int type_idx) {",
          "175:  if (type_idx < 0 || type_idx >= bin->header.types_size) {",
          "176:   return NULL;",
          "177:  }",
          "178:  return getstr (bin, bin->types[type_idx].descriptor_id);",
          "179: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300:  RList *params, *debug_positions, *emitted_debug_locals = NULL;",
          "301:  bool keep = true;",
          "302:  if (argReg >= regsz) {",
          "304:  }",
          "305:  p4 = r_uleb128 (p4, p4_end - p4, &line_start);",
          "306:  p4 = r_uleb128 (p4, p4_end - p4, &parameters_size);",
          "",
          "[Removed Lines]",
          "303:   return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "315:   r_list_free (debug_positions);",
          "316:   return;",
          "317:  }",
          "318:  struct dex_debug_local_t debug_locals[regsz];",
          "319:  memset (debug_locals, 0, sizeof (struct dex_debug_local_t) * regsz);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "326:  class_name = r_str_newf(\"%s;\", class_name);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "420:     r_list_append (emitted_debug_locals, local);",
          "421:    }",
          "422:    debug_locals[register_num].name = getstr (bin, name_idx);",
          "424:    debug_locals[register_num].startAddress = address;",
          "425:    debug_locals[register_num].signature = NULL;",
          "426:    debug_locals[register_num].live = true;",
          "",
          "[Removed Lines]",
          "423:    debug_locals[register_num].descriptor = getstr (bin, bin->types[type_idx].descriptor_id);",
          "",
          "[Added Lines]",
          "433:    debug_locals[register_num].descriptor = dex_type_descriptor (bin, type_idx);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "466:    }",
          "468:    debug_locals[register_num].name = getstr (bin, name_idx);",
          "471:    debug_locals[register_num].startAddress = address;",
          "472:    debug_locals[register_num].signature = getstr (bin, sig_idx);",
          "473:    debug_locals[register_num].live = true;",
          "",
          "[Removed Lines]",
          "469:    debug_locals[register_num].descriptor = getstr (",
          "470:     bin, bin->types[type_idx].descriptor_id);",
          "",
          "[Added Lines]",
          "479:    debug_locals[register_num].descriptor = dex_type_descriptor (bin, type_idx);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "496:    }",
          "497:    debug_locals[register_num].live = false;",
          "498:    }",
          "500:   case 0x6: // DBG_RESTART_LOCAL",
          "501:    {",
          "502:    ut64 register_num;",
          "",
          "[Removed Lines]",
          "499:    break;",
          "",
          "[Added Lines]",
          "508:    break;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "510:   case 0x7: //DBG_SET_PROLOGUE_END",
          "511:    break;",
          "512:   case 0x8: //DBG_SET_PROLOGUE_BEGIN",
          "514:   case 0x9:",
          "515:    {",
          "516:    ut64 name_idx;",
          "517:    p4 = r_uleb128 (p4, p4_end - p4, &name_idx);",
          "518:    name_idx -= 1;",
          "519:    }",
          "521:   default:",
          "522:    {",
          "523:    int adjusted_opcode = opcode - 0x0a;",
          "",
          "[Removed Lines]",
          "513:    break;",
          "520:    break;",
          "",
          "[Added Lines]",
          "522:    break;",
          "529:    break;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "533:    position->line = line;",
          "534:    r_list_append (debug_positions, position);",
          "535:    }",
          "537:   }",
          "538:   opcode = *(p4++) & 0xff;",
          "539:  }",
          "",
          "[Removed Lines]",
          "536:    break;",
          "",
          "[Added Lines]",
          "545:    break;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "560:  r_list_foreach (emitted_debug_locals, iter3, local) {",
          "561:   if (local->signature) {",
          "562:    rbin->cb_printf (",
          "564:     local->startAddress, local->endAddress,",
          "565:     local->reg, local->name, local->descriptor,",
          "566:     local->signature);",
          "567:   } else {",
          "568:    rbin->cb_printf (",
          "570:     local->startAddress, local->endAddress,",
          "571:     local->reg, local->name, local->descriptor);",
          "572:   }",
          "",
          "[Removed Lines]",
          "563:     \"        0x%04x - 0x%04x reg=%d %s %s; %s\\n\",",
          "569:     \"        0x%04x - 0x%04x reg=%d %s %s;\\n\",",
          "",
          "[Added Lines]",
          "572:     \"        0x%04x - 0x%04x reg=%d %s %s %s\\n\",",
          "578:     \"        0x%04x - 0x%04x reg=%d %s %s\\n\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "576:   if (debug_locals[reg].live) {",
          "577:    if (debug_locals[reg].signature) {",
          "578:     rbin->cb_printf (",
          "580:      \"%s\\n\",",
          "581:      debug_locals[reg].startAddress,",
          "582:      insns_size, reg, debug_locals[reg].name,",
          "",
          "[Removed Lines]",
          "579:      \"        0x%04x - 0x%04x reg=%d %s %s; \"",
          "",
          "[Added Lines]",
          "588:      \"        0x%04x - 0x%04x reg=%d %s %s \"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "584:      debug_locals[reg].signature);",
          "585:    } else {",
          "586:     rbin->cb_printf (",
          "588:      \"\\n\",",
          "589:      debug_locals[reg].startAddress,",
          "590:      insns_size, reg, debug_locals[reg].name,",
          "",
          "[Removed Lines]",
          "587:      \"        0x%04x - 0x%04x reg=%d %s %s;\"",
          "",
          "[Added Lines]",
          "596:      \"        0x%04x - 0x%04x reg=%d %s %s\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1105:       p3 = r_uleb128 (p3, p3_end - p3, &handler_type);",
          "1106:       p3 = r_uleb128 (p3, p3_end - p3, &handler_addr);",
          "1110:           handler_type <",
          "1111:            bin->header.types_size) {",
          "1112:        s = getstr (bin, bin->types[handler_type].descriptor_id);",
          "1118:       } else {",
          "1124:       }",
          "1125:      }",
          "",
          "[Removed Lines]",
          "1108:       if (dexdump &&",
          "1109:           handler_type > 0 &&",
          "1113:        rbin->cb_printf (",
          "1114:         \"          %s \"",
          "1115:         \"-> 0x%04llx\\n\",",
          "1116:         s,",
          "1117:         handler_addr);",
          "1119:        rbin->cb_printf (",
          "1120:         \"          \"",
          "1121:         \"(error) -> \"",
          "1122:         \"0x%04llx\\n\",",
          "1123:         handler_addr);",
          "",
          "[Added Lines]",
          "1117:       if (handler_type > 0 &&",
          "1121:        if (dexdump) {",
          "1122:         rbin->cb_printf (",
          "1123:          \"          %s \"",
          "1124:          \"-> 0x%04llx\\n\",",
          "1125:          s,",
          "1126:          handler_addr);",
          "1127:        }",
          "1129:        if (dexdump) {",
          "1130:         rbin->cb_printf (",
          "1131:          \"          \"",
          "1132:          \"(error) -> \"",
          "1133:          \"0x%04llx\\n\",",
          "1134:          handler_addr);",
          "1135:        }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1158:     insns_size, cls->name, regsz, debug_info_off);",
          "1159:   } else if (MC > 0) {",
          "1160:    if (dexdump) {",
          "1163:    }",
          "1164:   }",
          "",
          "[Removed Lines]",
          "1161:     rbin->cb_printf (\"      positions     : \\n\");",
          "1162:     rbin->cb_printf (\"      locals        : \\n\");",
          "",
          "[Added Lines]",
          "1173:     rbin->cb_printf (\"      positions     :\\n\");",
          "1174:     rbin->cb_printf (\"      locals        :\\n\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1279:  }",
          "1280:  r_list_append (bin->classes_list, cls);",
          "1281:  if (dexdump) {",
          "1284:   rbin->cb_printf (",
          "1285:    \"  Access flags      : 0x%04x (%s)\\n\", c->access_flags,",
          "1286:    createAccessFlagStr (c->access_flags, kAccessForClass));",
          "",
          "[Removed Lines]",
          "1282:   rbin->cb_printf (\"  Class descriptor  : '%s'\\n\",",
          "1283:      dex_class_name (bin, c));",
          "",
          "[Added Lines]",
          "1294:   rbin->cb_printf (\"  Class descriptor  : '%s;'\\n\", class_name);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85052941cfe088fa381152aba519aaa458e222c3",
      "candidate_info": {
        "commit_hash": "85052941cfe088fa381152aba519aaa458e222c3",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/85052941cfe088fa381152aba519aaa458e222c3",
        "files": [
          "libr/bin/p/bin_dex.c",
          "libr/include/r_util/r_uleb128.h"
        ],
        "message": "fix some coverity issues for dex format",
        "before_after_code_files": [
          "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c",
          "libr/include/r_util/r_uleb128.h||libr/include/r_util/r_uleb128.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c"
          ],
          "candidate": [
            "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c": [
          "File: libr/bin/p/bin_dex.c -> libr/bin/p/bin_dex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:  RList *params = r_list_new();",
          "235:  if (method_idx < 0 || method_idx >= bin->header.method_size) {",
          "236:   return NULL;",
          "237:  }",
          "238:  proto_id = bin->methods[method_idx].proto_id;",
          "239:  if (proto_id >= bin->header.prototypes_size) {",
          "240:   return NULL;",
          "241:  }",
          "242:  params_off = bin->protos[proto_id].parameters_off;",
          "243:  if (params_off  >= bin->size) {",
          "244:   return NULL;",
          "245:  }",
          "246:  if (!params_off) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236:   free (params);",
          "241:   free (params);",
          "246:   free (params);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "255:    continue;",
          "256:   }",
          "257:   type_idx = r_read_le16 (bufptr + params_off + 4 + (i*2));",
          "259:    continue;",
          "260:   }",
          "261:   buff = getstr (bin, bin->types[type_idx].descriptor_id);",
          "",
          "[Removed Lines]",
          "258:   if (type_idx < 0 || type_idx >= bin->header.types_size) {",
          "",
          "[Added Lines]",
          "261:   if (type_idx >= bin->header.types_size) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "279:  ut64 param_type_idx;",
          "280:  ut16 argReg = regsz - ins_size; // ins_size or insns_size",
          "282:  p4 = r_uleb128 (p4, p4_end - p4, &line_start);",
          "283:  p4 = r_uleb128 (p4, p4_end - p4, &parameters_size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "285:  if (argReg >= regsz) {",
          "286:   return;",
          "287:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "308:  RList *params = dex_method_signature2 (bin, MI);",
          "311:   return;",
          "312:  }",
          "",
          "[Removed Lines]",
          "310:  if (!params || r_list_empty (params)) {",
          "",
          "[Added Lines]",
          "317:  if (!params) {",
          "318:   free (debug_positions);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "315:  char *name;",
          "316:  char *type;",
          "317:  int reg;",
          "322:    return;",
          "323:   }",
          "",
          "[Removed Lines]",
          "318:  while (parameters_size-- != 0) {",
          "319:   type = (char *) r_list_iter_get (iter);",
          "321:   if ((argReg >= regsz) || !type || r_list_empty (params)) {",
          "",
          "[Added Lines]",
          "328:  r_list_foreach (params, iter, type) {",
          "329:   if ((argReg >= regsz) || !type || parameters_size <= 0) {",
          "330:    free (debug_positions);",
          "332:    free (params);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "344:    debug_locals[reg].live = true;",
          "345:   }",
          "348:  }",
          "350:  ut8 opcode = *(p4++) & 0xff;",
          "",
          "[Removed Lines]",
          "347:   r_list_iter_next (iter);",
          "",
          "[Added Lines]",
          "358:   --parameters_size;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "357:    p4 = r_uleb128 (p4, p4_end - p4, &addr_diff);",
          "358:    address += addr_diff;",
          "359:   } else if (opcode == 0x2) { // DBG_ADVANCE_LINE",
          "361:    line += line_diff;",
          "362:   } else if (opcode == 0x3) { // DBG_START_LOCAL",
          "363:    ut64 register_num;",
          "",
          "[Removed Lines]",
          "360:    st64 line_diff = gum_read_sleb128 ((const ut8**)&p4, p4_end - p4);",
          "",
          "[Added Lines]",
          "371:    st64 line_diff = gum_read_sleb128 (&p4, p4_end);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "367:    p4 = r_uleb128 (p4, p4_end - p4, &name_idx); name_idx -= 1;",
          "368:    p4 = r_uleb128 (p4, p4_end - p4, &type_idx); type_idx -= 1;",
          "371:     return;",
          "372:    }",
          "",
          "[Removed Lines]",
          "370:    if (register_num > regsz) {",
          "",
          "[Added Lines]",
          "381:    if (register_num >= regsz) {",
          "382:     free (debug_positions);",
          "383:     free (debug_locals);",
          "384:     free (params);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "401:    p4 = r_uleb128 (p4, p4_end - p4, &type_idx); type_idx -= 1;",
          "402:    p4 = r_uleb128 (p4, p4_end - p4, &sig_idx); sig_idx -= 1;",
          "405:     return;",
          "406:    }",
          "",
          "[Removed Lines]",
          "404:    if (register_num > regsz) {",
          "",
          "[Added Lines]",
          "418:    if (register_num >= regsz) {",
          "419:     free (debug_positions);",
          "420:     free (debug_locals);",
          "421:     free (params);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "471:   opcode = *(p4++) & 0xff;",
          "472:  }",
          "474:  if (!dexdump) {",
          "475:   return;",
          "476:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "491:  free (params);",
          "493:   free (debug_positions);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "504:    }",
          "505:   }",
          "506:  }",
          "507: }",
          "509: static int check (RBinFile *arch);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "528:  free (debug_positions);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "805:   field.name_id = r_read_le32 (ff + 4);",
          "806:   char *fieldName = getstr (bin, field.name_id);",
          "809:    break;",
          "810:   }",
          "811:   tid = bin->types[field.type_id].descriptor_id;",
          "",
          "[Removed Lines]",
          "808:   if (field.type_id < 0 || field.type_id >= bin->header.types_size) {",
          "",
          "[Added Lines]",
          "831:   if (field.type_id >= bin->header.types_size) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "842: }",
          "846:  struct r_bin_t *rbin = binfile->rbin;",
          "847:  ut8 ff2[16] = {0};",
          "848:  ut8 ff3[8] = {0};",
          "",
          "[Removed Lines]",
          "845: static ut8* parse_dex_class_method(RBinFile *binfile, RBinDexObj *bin, RBinDexClass *c, RBinClass *cls, const ut8 *p, const ut8 *p_end, int *sym_count, ut64 DM, int *methods, bool is_direct) {",
          "",
          "[Added Lines]",
          "868: static const ut8* parse_dex_class_method(RBinFile *binfile, RBinDexObj *bin, RBinDexClass *c, RBinClass *cls, const ut8 *p, const ut8 *p_end, int *sym_count, ut64 DM, int *methods, bool is_direct) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "887:   flag_name = r_str_newf (\"%s.method.%s%s\", cls->name, method_name, signature);",
          "889:   if (!flag_name) {",
          "890:    continue;",
          "891:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "913:    free (method_name);",
          "914:    free (signature);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "898:   if (MC > 0) {",
          "900:    if (r_buf_read_at (binfile->buf, binfile->buf->base + MC, ff2, 16) < 1) {",
          "901:     continue;",
          "902:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "926:     free (method_name);",
          "927:     free (flag_name);",
          "928:     free (signature);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "936:     int j, m = 0;",
          "937:     for (j=0; j < tries_size; ++j) {",
          "938:      if (r_buf_read_at (binfile->buf, binfile->buf->base + MC + t + j*8, ff3, 8) < 1) {",
          "939:       continue;",
          "940:      }",
          "941:      start_addr = r_read_le32 (ff3);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "968:       free (signature);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1020:     if (r_buf_read_at (binfile->buf, binfile->buf->base + MC, ff2, 16) < 1) {",
          "1021:      free (sym);",
          "1022:      continue;",
          "1023:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1052:      free (signature);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1073:   } else {",
          "1074:    free (flag_name);",
          "1075:   }",
          "1076:   free (method_name);",
          "1077:  }",
          "1078:  return p;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1107:   free (signature);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1116:   && c->interfaces_offset < bin->header.data_offset + bin->header.data_size) {",
          "1117:   p = r_buf_get_at (binfile->buf, c->interfaces_offset, NULL);",
          "1118:   int types_list_size = r_read_le32(p);",
          "1119:   for (z = 0; z < types_list_size; z++) {",
          "1120:    int t = r_read_le16 (p + 4 + z * 2);",
          "1124:    }",
          "1125:   }",
          "1126:  }",
          "",
          "[Removed Lines]",
          "1121:    int tid = bin->types[t].descriptor_id;",
          "1122:    if (dexdump) {",
          "1123:     rbin->cb_printf (\"    #%d              : '%s'\\n\", z, getstr (bin, tid));",
          "",
          "[Added Lines]",
          "1151:   if (types_list_size < 0 || types_list_size >= bin->header.types_size ) {",
          "1152:    return;",
          "1153:   }",
          "1156:    if (t > 0 && t < bin->header.types_size ) {",
          "1157:     int tid = bin->types[t].descriptor_id;",
          "1158:     if (dexdump) {",
          "1159:      rbin->cb_printf (\"    #%d              : '%s'\\n\", z, getstr (bin, tid));",
          "1160:     }",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1384:  return (ut64) off;",
          "1385: }",
          "1388:  struct r_bin_dex_obj_t *dex = arch->o->bin_obj;",
          "1389:  switch (type) {",
          "1390:  case 'm': // methods",
          "",
          "[Removed Lines]",
          "1387: static ut64 getoffset(RBinFile *arch, int type, int idx) {",
          "",
          "[Added Lines]",
          "1425: static int getoffset(RBinFile *arch, int type, int idx) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1494:  return ret;",
          "1495: }",
          "1498:  struct r_bin_dex_obj_t *bin = arch->o->bin_obj;",
          "1499:  struct r_bin_t *rbin = arch->rbin;",
          "",
          "[Removed Lines]",
          "1497: static void *header(RBinFile *arch) {",
          "",
          "[Added Lines]",
          "1535: static void header(RBinFile *arch) {",
          "",
          "---------------"
        ],
        "libr/include/r_util/r_uleb128.h||libr/include/r_util/r_uleb128.h": [
          "File: libr/include/r_util/r_uleb128.h -> libr/include/r_util/r_uleb128.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: R_API const ut8 *r_uleb128_decode(const ut8 *data, int *datalen, ut64 *v);",
          "10: R_API const ut8 *r_uleb128_encode(const ut64 s, int *len);",
          "11: R_API const ut8 *r_leb128(const ut8 *data, st64 *v);",
          "13: #endif //  R_ULEB128_H",
          "",
          "[Removed Lines]",
          "12: R_API st64 gum_read_sleb128 (const ut8 **data, const ut8 *end);",
          "",
          "[Added Lines]",
          "12: R_API st64 gum_read_sleb128(const ut8 **data, const ut8 *end);",
          "",
          "---------------"
        ]
      }
    }
  ]
}