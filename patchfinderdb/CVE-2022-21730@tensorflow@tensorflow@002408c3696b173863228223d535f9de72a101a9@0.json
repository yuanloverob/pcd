{
  "cve_id": "CVE-2022-21730",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `FractionalAvgPoolGrad` does not consider cases where the input tensors are invalid allowing an attacker to read from outside of bounds of heap. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "002408c3696b173863228223d535f9de72a101a9",
  "patch_info": {
    "commit_hash": "002408c3696b173863228223d535f9de72a101a9",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/002408c3696b173863228223d535f9de72a101a9",
    "files": [
      "tensorflow/core/kernels/fractional_avg_pool_op.cc",
      "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py"
    ],
    "message": "Add negative bound check for row and column pooling_sequence in FractionalAvgPoolGrad op to avoid out of bound heap access\n\nPiperOrigin-RevId: 413837346\nChange-Id: I2b86034101df31bee161abcb781755e236c7bccd",
    "before_after_code_files": [
      "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
      "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc": [
      "File: tensorflow/core/kernels/fractional_avg_pool_op.cc -> tensorflow/core/kernels/fractional_avg_pool_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "311:     for (int64_t b = 0; b < out_batch; ++b) {",
      "312:       for (int64_t r = 0; r < out_rows; ++r) {",
      "313:         const int64_t in_row_start = row_seq_tensor_flat(r);",
      "314:         int64_t in_row_end = overlapping_ ? row_seq_tensor_flat(r + 1)",
      "315:                                           : row_seq_tensor_flat(r + 1) - 1;",
      "316:         in_row_end = std::min(in_row_end, in_max_row_index);",
      "317:         for (int64_t c = 0; c < out_cols; ++c) {",
      "318:           const int64_t in_col_start = col_seq_tensor_flat(c);",
      "319:           int64_t in_col_end = overlapping_ ? col_seq_tensor_flat(c + 1)",
      "320:                                             : col_seq_tensor_flat(c + 1) - 1;",
      "321:           in_col_end = std::min(in_col_end, in_max_col_index);",
      "323:           const int64_t num_elements_in_pooling_cell =",
      "324:               (in_row_end - in_row_start + 1) * (in_col_end - in_col_start + 1);",
      "325:           const int64_t out_index = (b * out_rows + r) * out_cols + c;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "318:         OP_REQUIRES(context, in_row_start >= 0 && in_row_end >= 0,",
      "319:                     errors::InvalidArgument(",
      "320:                         \"Row sequence tensor values must not be negative, got \",",
      "321:                         row_seq_tensor_flat));",
      "329:           OP_REQUIRES(",
      "330:               context, in_col_start >= 0 && in_col_end >= 0,",
      "331:               errors::InvalidArgument(",
      "332:                   \"Column sequence tensor values must not be negative, got \",",
      "333:                   col_seq_tensor_flat));",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py": [
      "File: tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: from tensorflow.python.framework import constant_op",
      "22: from tensorflow.python.framework import dtypes",
      "23: from tensorflow.python.framework import test_util",
      "24: from tensorflow.python.ops import array_ops",
      "25: from tensorflow.python.ops import gen_nn_ops",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23: from tensorflow.python.framework import errors",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "306:           input_b, row_seq, col_seq, overlapping)",
      "307:       self.assertSequenceEqual(expected.shape, actual.shape)",
      "310: class FractionalAvgPoolGradTest(test.TestCase):",
      "311:   \"\"\"Tests for FractionalAvgPoolGrad.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "310:   def testNegativeSeqValuesForGradOp(self):",
      "311:     with self.assertRaisesRegex(",
      "312:         errors.InvalidArgumentError,",
      "313:         r\"Row sequence tensor values must not be negative.*\"):",
      "314:       y = nn_ops.gen_nn_ops.fractional_avg_pool_grad(",
      "315:           orig_input_tensor_shape=[2, 2, 2, 2],",
      "316:           out_backprop=[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11,",
      "317:                                                                       12]]]],",
      "318:           row_pooling_sequence=[-10, 1, 2, 3],",
      "319:           col_pooling_sequence=[1, 2, 3, 4],",
      "320:           overlapping=True)",
      "322:       self.evaluate(y)",
      "323:       with self.assertRaisesRegex(",
      "324:           errors.InvalidArgumentError,",
      "325:           r\"Column sequence tensor values must not be negative.*\"):",
      "326:         z = nn_ops.gen_nn_ops.fractional_avg_pool_grad(",
      "327:             orig_input_tensor_shape=[2, 2, 2, 2],",
      "328:             out_backprop=[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11,",
      "329:                                                                         12]]]],",
      "330:             row_pooling_sequence=[10, 1, 2, 3],",
      "331:             col_pooling_sequence=[1, 2, -3, 4],",
      "332:             overlapping=True)",
      "334:         self.evaluate(z)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0decb501ca66323cc7c7626c024cb2dcaeed3e12",
      "candidate_info": {
        "commit_hash": "0decb501ca66323cc7c7626c024cb2dcaeed3e12",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/0decb501ca66323cc7c7626c024cb2dcaeed3e12",
        "files": [
          "tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py"
        ],
        "message": "Add negative bound check for row and column pooling_sequence in FractionalAvgPoolGrad op to avoid out of bound heap access\n\nPiperOrigin-RevId: 413837346\nChange-Id: I2b86034101df31bee161abcb781755e236c7bccd",
        "before_after_code_files": [
          "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_avg_pool_op.cc -> tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:         int64 in_row_end = overlapping_ ? row_seq_tensor_flat(r + 1)",
          "315:                                         : row_seq_tensor_flat(r + 1) - 1;",
          "316:         in_row_end = std::min(in_row_end, in_max_row_index);",
          "317:         for (int64 c = 0; c < out_cols; ++c) {",
          "318:           const int64 in_col_start = col_seq_tensor_flat(c);",
          "319:           int64 in_col_end = overlapping_ ? col_seq_tensor_flat(c + 1)",
          "320:                                           : col_seq_tensor_flat(c + 1) - 1;",
          "321:           in_col_end = std::min(in_col_end, in_max_col_index);",
          "323:           const int64 num_elements_in_pooling_cell =",
          "324:               (in_row_end - in_row_start + 1) * (in_col_end - in_col_start + 1);",
          "325:           const int64 out_index = (b * out_rows + r) * out_cols + c;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317:         OP_REQUIRES(context, in_row_start >= 0 && in_row_end >= 0,",
          "318:                     errors::InvalidArgument(",
          "319:                         \"Row sequence tensor values must not be negative, got \",",
          "320:                         row_seq_tensor_flat));",
          "328:           OP_REQUIRES(",
          "329:               context, in_col_start >= 0 && in_col_end >= 0,",
          "330:               errors::InvalidArgument(",
          "331:                   \"Column sequence tensor values must not be negative, got \",",
          "332:                   col_seq_tensor_flat));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py -> tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: from tensorflow.python.framework import constant_op",
          "26: from tensorflow.python.framework import dtypes",
          "27: from tensorflow.python.framework import test_util",
          "28: from tensorflow.python.ops import array_ops",
          "29: from tensorflow.python.ops import gen_nn_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "310:           input_b, row_seq, col_seq, overlapping)",
          "311:       self.assertSequenceEqual(expected.shape, actual.shape)",
          "314: class FractionalAvgPoolGradTest(test.TestCase):",
          "315:   \"\"\"Tests for FractionalAvgPoolGrad.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:   def testNegativeSeqValuesForGradOp(self):",
          "315:     with self.assertRaisesRegex(",
          "316:         errors.InvalidArgumentError,",
          "317:         r\"Row sequence tensor values must not be negative.*\"):",
          "318:       y = nn_ops.gen_nn_ops.fractional_avg_pool_grad(",
          "319:           orig_input_tensor_shape=[2, 2, 2, 2],",
          "320:           out_backprop=[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11,",
          "321:                                                                       12]]]],",
          "322:           row_pooling_sequence=[-10, 1, 2, 3],",
          "323:           col_pooling_sequence=[1, 2, 3, 4],",
          "324:           overlapping=True)",
          "326:       self.evaluate(y)",
          "327:       with self.assertRaisesRegex(",
          "328:           errors.InvalidArgumentError,",
          "329:           r\"Column sequence tensor values must not be negative.*\"):",
          "330:         z = nn_ops.gen_nn_ops.fractional_avg_pool_grad(",
          "331:             orig_input_tensor_shape=[2, 2, 2, 2],",
          "332:             out_backprop=[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11,",
          "333:                                                                         12]]]],",
          "334:             row_pooling_sequence=[10, 1, 2, 3],",
          "335:             col_pooling_sequence=[1, 2, -3, 4],",
          "336:             overlapping=True)",
          "338:         self.evaluate(z)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "53cb532bb4da86f013ac4db919b90b7302eea091",
      "candidate_info": {
        "commit_hash": "53cb532bb4da86f013ac4db919b90b7302eea091",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/53cb532bb4da86f013ac4db919b90b7302eea091",
        "files": [
          "tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py"
        ],
        "message": "Add negative bound check for row and column pooling_sequence in FractionalAvgPoolGrad op to avoid out of bound heap access\n\nPiperOrigin-RevId: 413837346\nChange-Id: I2b86034101df31bee161abcb781755e236c7bccd",
        "before_after_code_files": [
          "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_avg_pool_op.cc -> tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "311:     for (int64_t b = 0; b < out_batch; ++b) {",
          "312:       for (int64_t r = 0; r < out_rows; ++r) {",
          "313:         const int64_t in_row_start = row_seq_tensor_flat(r);",
          "314:         int64_t in_row_end = overlapping_ ? row_seq_tensor_flat(r + 1)",
          "315:                                           : row_seq_tensor_flat(r + 1) - 1;",
          "316:         in_row_end = std::min(in_row_end, in_max_row_index);",
          "317:         for (int64_t c = 0; c < out_cols; ++c) {",
          "318:           const int64_t in_col_start = col_seq_tensor_flat(c);",
          "319:           int64_t in_col_end = overlapping_ ? col_seq_tensor_flat(c + 1)",
          "320:                                             : col_seq_tensor_flat(c + 1) - 1;",
          "321:           in_col_end = std::min(in_col_end, in_max_col_index);",
          "323:           const int64_t num_elements_in_pooling_cell =",
          "324:               (in_row_end - in_row_start + 1) * (in_col_end - in_col_start + 1);",
          "325:           const int64_t out_index = (b * out_rows + r) * out_cols + c;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318:         OP_REQUIRES(context, in_row_start >= 0 && in_row_end >= 0,",
          "319:                     errors::InvalidArgument(",
          "320:                         \"Row sequence tensor values must not be negative, got \",",
          "321:                         row_seq_tensor_flat));",
          "329:           OP_REQUIRES(",
          "330:               context, in_col_start >= 0 && in_col_end >= 0,",
          "331:               errors::InvalidArgument(",
          "332:                   \"Column sequence tensor values must not be negative, got \",",
          "333:                   col_seq_tensor_flat));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py -> tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: from tensorflow.python.framework import constant_op",
          "26: from tensorflow.python.framework import dtypes",
          "27: from tensorflow.python.framework import test_util",
          "28: from tensorflow.python.ops import array_ops",
          "29: from tensorflow.python.ops import gen_nn_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "310:           input_b, row_seq, col_seq, overlapping)",
          "311:       self.assertSequenceEqual(expected.shape, actual.shape)",
          "314: class FractionalAvgPoolGradTest(test.TestCase):",
          "315:   \"\"\"Tests for FractionalAvgPoolGrad.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:   def testNegativeSeqValuesForGradOp(self):",
          "315:     with self.assertRaisesRegex(",
          "316:         errors.InvalidArgumentError,",
          "317:         r\"Row sequence tensor values must not be negative.*\"):",
          "318:       y = nn_ops.gen_nn_ops.fractional_avg_pool_grad(",
          "319:           orig_input_tensor_shape=[2, 2, 2, 2],",
          "320:           out_backprop=[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11,",
          "321:                                                                       12]]]],",
          "322:           row_pooling_sequence=[-10, 1, 2, 3],",
          "323:           col_pooling_sequence=[1, 2, 3, 4],",
          "324:           overlapping=True)",
          "326:       self.evaluate(y)",
          "327:       with self.assertRaisesRegex(",
          "328:           errors.InvalidArgumentError,",
          "329:           r\"Column sequence tensor values must not be negative.*\"):",
          "330:         z = nn_ops.gen_nn_ops.fractional_avg_pool_grad(",
          "331:             orig_input_tensor_shape=[2, 2, 2, 2],",
          "332:             out_backprop=[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11,",
          "333:                                                                         12]]]],",
          "334:             row_pooling_sequence=[10, 1, 2, 3],",
          "335:             col_pooling_sequence=[1, 2, -3, 4],",
          "336:             overlapping=True)",
          "338:         self.evaluate(z)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5bc6d47d2df9a9726db757c963fcd71936439378",
      "candidate_info": {
        "commit_hash": "5bc6d47d2df9a9726db757c963fcd71936439378",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/5bc6d47d2df9a9726db757c963fcd71936439378",
        "files": [
          "tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py"
        ],
        "message": "Add negative bound check for row and column pooling_sequence in FractionalAvgPoolGrad op to avoid out of bound heap access\n\nPiperOrigin-RevId: 413837346\nChange-Id: I2b86034101df31bee161abcb781755e236c7bccd",
        "before_after_code_files": [
          "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_avg_pool_op.cc -> tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:         int64 in_row_end = overlapping_ ? row_seq_tensor_flat(r + 1)",
          "315:                                         : row_seq_tensor_flat(r + 1) - 1;",
          "316:         in_row_end = std::min(in_row_end, in_max_row_index);",
          "317:         for (int64 c = 0; c < out_cols; ++c) {",
          "318:           const int64 in_col_start = col_seq_tensor_flat(c);",
          "319:           int64 in_col_end = overlapping_ ? col_seq_tensor_flat(c + 1)",
          "320:                                           : col_seq_tensor_flat(c + 1) - 1;",
          "321:           in_col_end = std::min(in_col_end, in_max_col_index);",
          "323:           const int64 num_elements_in_pooling_cell =",
          "324:               (in_row_end - in_row_start + 1) * (in_col_end - in_col_start + 1);",
          "325:           const int64 out_index = (b * out_rows + r) * out_cols + c;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317:         OP_REQUIRES(context, in_row_start >= 0 && in_row_end >= 0,",
          "318:                     errors::InvalidArgument(",
          "319:                         \"Row sequence tensor values must not be negative, got \",",
          "320:                         row_seq_tensor_flat));",
          "328:           OP_REQUIRES(",
          "329:               context, in_col_start >= 0 && in_col_end >= 0,",
          "330:               errors::InvalidArgument(",
          "331:                   \"Column sequence tensor values must not be negative, got \",",
          "332:                   col_seq_tensor_flat));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py -> tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: from tensorflow.python.framework import constant_op",
          "26: from tensorflow.python.framework import dtypes",
          "27: from tensorflow.python.framework import test_util",
          "28: from tensorflow.python.ops import array_ops",
          "29: from tensorflow.python.ops import gen_nn_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "310:           input_b, row_seq, col_seq, overlapping)",
          "311:       self.assertSequenceEqual(expected.shape, actual.shape)",
          "314: class FractionalAvgPoolGradTest(test.TestCase):",
          "315:   \"\"\"Tests for FractionalAvgPoolGrad.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:   def testNegativeSeqValuesForGradOp(self):",
          "315:     with self.assertRaisesRegex(",
          "316:         errors.InvalidArgumentError,",
          "317:         r\"Row sequence tensor values must not be negative.*\"):",
          "318:       y = nn_ops.gen_nn_ops.fractional_avg_pool_grad(",
          "319:           orig_input_tensor_shape=[2, 2, 2, 2],",
          "320:           out_backprop=[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11,",
          "321:                                                                       12]]]],",
          "322:           row_pooling_sequence=[-10, 1, 2, 3],",
          "323:           col_pooling_sequence=[1, 2, 3, 4],",
          "324:           overlapping=True)",
          "326:       self.evaluate(y)",
          "327:       with self.assertRaisesRegex(",
          "328:           errors.InvalidArgumentError,",
          "329:           r\"Column sequence tensor values must not be negative.*\"):",
          "330:         z = nn_ops.gen_nn_ops.fractional_avg_pool_grad(",
          "331:             orig_input_tensor_shape=[2, 2, 2, 2],",
          "332:             out_backprop=[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11,",
          "333:                                                                         12]]]],",
          "334:             row_pooling_sequence=[10, 1, 2, 3],",
          "335:             col_pooling_sequence=[1, 2, -3, 4],",
          "336:             overlapping=True)",
          "338:         self.evaluate(z)",
          "",
          "---------------"
        ]
      }
    }
  ]
}