{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "600a6468dc9067a358893f26ff46f1cd865f3c97",
      "candidate_info": {
        "commit_hash": "600a6468dc9067a358893f26ff46f1cd865f3c97",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/600a6468dc9067a358893f26ff46f1cd865f3c97",
        "files": [
          "node.gyp",
          "src/node.cc",
          "src/node.js",
          "src/node_constants.cc",
          "src/node_extensions.h",
          "src/signal_wrap.cc"
        ],
        "message": "process: use uv_signal instead of ev_signal",
        "before_after_code_files": [
          "node.gyp||node.gyp",
          "src/node.cc||src/node.cc",
          "src/node.js||src/node.js",
          "src/node_constants.cc||src/node_constants.cc",
          "src/node_extensions.h||src/node_extensions.h",
          "src/signal_wrap.cc||src/signal_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "node.gyp||node.gyp": [
          "File: node.gyp -> node.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:         'src/node_string.cc',",
          "88:         'src/node_zlib.cc',",
          "89:         'src/pipe_wrap.cc',",
          "90:         'src/stream_wrap.cc',",
          "91:         'src/slab_allocator.cc',",
          "92:         'src/tcp_wrap.cc',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:         'src/signal_wrap.cc',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205:         }, { # POSIX",
          "206:           'defines': [ '__POSIX__' ],",
          "207:           'sources': [",
          "209:             'src/node_io_watcher.cc',",
          "210:           ],",
          "211:         }],",
          "",
          "[Removed Lines]",
          "208:             'src/node_signal_watcher.cc',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "694:   SIGNO_CASE(SIGTSTP);",
          "695: #endif",
          "697: #ifdef SIGTTIN",
          "698:   SIGNO_CASE(SIGTTIN);",
          "699: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "697: #ifdef SIGBREAK",
          "698:   SIGNO_CASE(SIGBREAK);",
          "699: #endif",
          "",
          "---------------"
        ],
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "562:   startup.processSignalHandlers = function() {",
          "566:     var addListener = process.addListener;",
          "567:     var removeListener = process.removeListener;",
          "569:     function isSignal(event) {",
          "571:     }",
          "574:     process.on = process.addListener = function(type, listener) {",
          "586:         }",
          "587:       }",
          "590:     };",
          "592:     process.removeListener = function(type, listener) {",
          "593:       var ret = removeListener.apply(this, arguments);",
          "594:       if (isSignal(type)) {",
          "597:         if (this.listeners(type).length === 0) {",
          "599:         }",
          "600:       }",
          "",
          "[Removed Lines]",
          "565:     var signalWatchers = {};",
          "570:       return event.slice(0, 3) === 'SIG' && startup.lazyConstants()[event];",
          "575:       var ret = addListener.apply(this, arguments);",
          "576:       if (isSignal(type)) {",
          "577:         if (!signalWatchers.hasOwnProperty(type)) {",
          "578:           var b = process.binding('signal_watcher');",
          "579:           var w = new b.SignalWatcher(startup.lazyConstants()[type]);",
          "580:           w.callback = function() { process.emit(type); };",
          "581:           signalWatchers[type] = w;",
          "582:           w.start();",
          "584:         } else if (this.listeners(type).length === 1) {",
          "585:           signalWatchers[type].start();",
          "589:       return ret;",
          "595:         assert(signalWatchers.hasOwnProperty(type));",
          "598:           signalWatchers[type].stop();",
          "",
          "[Added Lines]",
          "565:     var signalWraps = {};",
          "570:       return event.slice(0, 3) === 'SIG' &&",
          "571:              startup.lazyConstants().hasOwnProperty(event);",
          "576:       if (isSignal(type) &&",
          "577:           !signalWraps.hasOwnProperty(type)) {",
          "578:         var Signal = process.binding('signal_wrap').Signal;",
          "579:         var wrap = new Signal();",
          "581:         wrap.unref();",
          "583:         wrap.onsignal = function () { process.emit(type); };",
          "585:         var signum = startup.lazyConstants()[type];",
          "586:         var r = wrap.start(signum);",
          "587:         if (r) {",
          "588:           wrap.close();",
          "589:           throw errnoException(errno, \"uv_signal_start\");",
          "592:         signalWraps[type] = wrap;",
          "595:       return addListener.apply(this, arguments);",
          "601:         assert(signalWraps.hasOwnProperty(type));",
          "604:           signalWraps[type].close();",
          "605:           delete signalWraps[type];",
          "",
          "---------------"
        ],
        "src/node_constants.cc||src/node_constants.cc": [
          "File: src/node_constants.cc -> src/node_constants.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "791:   NODE_DEFINE_CONSTANT(target, SIGTSTP);",
          "792: #endif",
          "794: #ifdef SIGTTIN",
          "795:   NODE_DEFINE_CONSTANT(target, SIGTTIN);",
          "796: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "794: #ifdef SIGBREAK",
          "795:   NODE_DEFINE_CONSTANT(target, SIGBREAK);",
          "796: #endif",
          "",
          "---------------"
        ],
        "src/node_extensions.h||src/node_extensions.h": [
          "File: src/node_extensions.h -> src/node_extensions.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: NODE_EXT_LIST_ITEM(node_evals)",
          "30: NODE_EXT_LIST_ITEM(node_fs)",
          "31: NODE_EXT_LIST_ITEM(node_http_parser)",
          "35: NODE_EXT_LIST_ITEM(node_os)",
          "36: NODE_EXT_LIST_ITEM(node_zlib)",
          "",
          "[Removed Lines]",
          "32: #ifdef __POSIX__",
          "33: NODE_EXT_LIST_ITEM(node_signal_watcher)",
          "34: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: NODE_EXT_LIST_ITEM(node_tty_wrap)",
          "45: NODE_EXT_LIST_ITEM(node_process_wrap)",
          "46: NODE_EXT_LIST_ITEM(node_fs_event_wrap)",
          "48: NODE_EXT_LIST_END",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: NODE_EXT_LIST_ITEM(node_signal_wrap)",
          "",
          "---------------"
        ],
        "src/signal_wrap.cc||src/signal_wrap.cc": [
          "File: src/signal_wrap.cc -> src/signal_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"node.h\"",
          "23: #include \"handle_wrap.h\"",
          "26: namespace node {",
          "28: using v8::Object;",
          "29: using v8::Handle;",
          "30: using v8::Local;",
          "31: using v8::Persistent;",
          "32: using v8::Value;",
          "33: using v8::HandleScope;",
          "34: using v8::FunctionTemplate;",
          "35: using v8::String;",
          "36: using v8::Function;",
          "37: using v8::TryCatch;",
          "38: using v8::Context;",
          "39: using v8::Arguments;",
          "40: using v8::Integer;",
          "42: static Persistent<String> onsignal_sym;",
          "45: class SignalWrap : public HandleWrap {",
          "46:  public:",
          "47:   static void Initialize(Handle<Object> target) {",
          "48:     HandleScope scope;",
          "50:     HandleWrap::Initialize(target);",
          "52:     Local<FunctionTemplate> constructor = FunctionTemplate::New(New);",
          "53:     constructor->InstanceTemplate()->SetInternalFieldCount(1);",
          "54:     constructor->SetClassName(String::NewSymbol(\"Signal\"));",
          "56:     NODE_SET_PROTOTYPE_METHOD(constructor, \"close\", HandleWrap::Close);",
          "57:     NODE_SET_PROTOTYPE_METHOD(constructor, \"ref\", HandleWrap::Ref);",
          "58:     NODE_SET_PROTOTYPE_METHOD(constructor, \"unref\", HandleWrap::Unref);",
          "59:     NODE_SET_PROTOTYPE_METHOD(constructor, \"start\", Start);",
          "60:     NODE_SET_PROTOTYPE_METHOD(constructor, \"stop\", Stop);",
          "62:     onsignal_sym = NODE_PSYMBOL(\"onsignal\");",
          "64:     target->Set(String::NewSymbol(\"Signal\"), constructor->GetFunction());",
          "65:   }",
          "67:  private:",
          "68:   static Handle<Value> New(const Arguments& args) {",
          "72:     assert(args.IsConstructCall());",
          "74:     HandleScope scope;",
          "75:     SignalWrap* wrap = new SignalWrap(args.This());",
          "77:     return scope.Close(args.This());",
          "78:   }",
          "80:   SignalWrap(Handle<Object> object)",
          "81:       : HandleWrap(object, reinterpret_cast<uv_handle_t*>(&handle_)) {",
          "82:     int r = uv_signal_init(uv_default_loop(), &handle_);",
          "83:     assert(r == 0);",
          "84:   }",
          "86:   ~SignalWrap() {",
          "87:   }",
          "89:   static Handle<Value> Start(const Arguments& args) {",
          "90:     HandleScope scope;",
          "92:     UNWRAP(SignalWrap)",
          "94:     int signum = args[0]->Int32Value();",
          "96:     int r = uv_signal_start(&wrap->handle_, OnSignal, signum);",
          "98:     if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "100:     return scope.Close(Integer::New(r));",
          "101:   }",
          "103:   static Handle<Value> Stop(const Arguments& args) {",
          "104:     HandleScope scope;",
          "106:     UNWRAP(SignalWrap)",
          "108:     int r = uv_signal_stop(&wrap->handle_);",
          "110:     if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "112:     return scope.Close(Integer::New(r));",
          "113:   }",
          "115:   static void OnSignal(uv_signal_t* handle, int signum) {",
          "116:     HandleScope scope;",
          "118:     SignalWrap* wrap = container_of(handle, SignalWrap, handle_);",
          "119:     assert(wrap);",
          "121:     Local<Value> argv[1] = { Integer::New(signum) };",
          "122:     MakeCallback(wrap->object_, onsignal_sym, ARRAY_SIZE(argv), argv);",
          "123:   }",
          "125:   uv_signal_t handle_;",
          "126: };",
          "129: }  // namespace node",
          "132: NODE_MODULE(node_signal_wrap, node::SignalWrap::Initialize)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09dc57793147cf6c56de1cb783c29053ef46e93a",
      "candidate_info": {
        "commit_hash": "09dc57793147cf6c56de1cb783c29053ef46e93a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/09dc57793147cf6c56de1cb783c29053ef46e93a",
        "files": [
          "node.gyp",
          "src/node.h",
          "src/node_internals.h"
        ],
        "message": "build: move internals to separate header file",
        "before_after_code_files": [
          "node.gyp||node.gyp",
          "src/node.h||src/node.h",
          "src/node_internals.h||src/node_internals.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "node.gyp||node.gyp": [
          "File: node.gyp -> node.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:       ],",
          "127:       'defines': [",
          "128:         'ARCH=\"<(target_arch)\"',",
          "129:         'PLATFORM=\"<(OS)\"',",
          "130:       ],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:         'NODE_WANT_INTERNALS=1',",
          "",
          "---------------"
        ],
        "src/node.h||src/node.h": [
          "File: src/node.h -> src/node.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: #include <node_isolate.h>",
          "68: #include <node_object_wrap.h>",
          "84: #endif",
          "86: #ifndef NODE_STRINGIFY",
          "",
          "[Removed Lines]",
          "70: #ifndef offset_of",
          "73: #define offset_of(type, member) \\",
          "74:   ((intptr_t) ((char *) &(((type *) 8)->member) - 8))",
          "75: #endif",
          "77: #ifndef container_of",
          "78: #define container_of(ptr, type, member) \\",
          "79:   ((type *) ((char *) (ptr) - offset_of(type, member)))",
          "80: #endif",
          "82: #ifndef ARRAY_SIZE",
          "83: #define ARRAY_SIZE(a) (sizeof((a)) / sizeof((a)[0]))",
          "",
          "[Added Lines]",
          "70: #if NODE_WANT_INTERNALS",
          "71: # include \"node_internals.h\"",
          "",
          "---------------"
        ],
        "src/node_internals.h||src/node_internals.h": [
          "File: src/node_internals.h -> src/node_internals.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifndef SRC_NODE_INTERNALS_H_",
          "23: #define SRC_NODE_INTERNALS_H_",
          "25: namespace node {",
          "27: #ifndef offset_of",
          "30: #define offset_of(type, member) \\",
          "31:   ((intptr_t) ((char *) &(((type *) 8)->member) - 8))",
          "32: #endif",
          "34: #ifndef container_of",
          "35: #define container_of(ptr, type, member) \\",
          "36:   ((type *) ((char *) (ptr) - offset_of(type, member)))",
          "37: #endif",
          "39: #ifndef ARRAY_SIZE",
          "40: #define ARRAY_SIZE(a) (sizeof((a)) / sizeof((a)[0]))",
          "41: #endif",
          "46: #if HAVE_ISOLATES",
          "48: # if _WIN32",
          "49: #  define THREAD __declspec(thread)",
          "50: # else",
          "51: #  define THREAD __thread",
          "52: # endif",
          "54: # define TLS(type, name)      THREAD type* __tls_##name",
          "55: # define VAR(name)            (*__tls_##name)",
          "56: # define EMPTY(name)          (__tls_##name == NULL)",
          "57: # define ASSIGN(name, val)    ((__tls_##name) = P(val))",
          "59: # define LAZY_ASSIGN(name, val) \\",
          "60:   do if (!__tls_##name) ((__tls_##name) = P(val)); while (0)",
          "62: template <class T> inline v8::Persistent<T>* P(v8::Handle<T> v)",
          "63: {",
          "64:   return new v8::Persistent<T>(v8::Persistent<T>::New(v));",
          "65: }",
          "67: inline v8::Persistent<v8::String>* P(const char* symbol)",
          "68: {",
          "69:   return new v8::Persistent<v8::String>(",
          "70:     v8::Persistent<v8::String>::New(",
          "71:       v8::String::NewSymbol(symbol)));",
          "72: }",
          "74: #else // !HAVE_ISOLATES",
          "77: # define TLS(type, name)    type name",
          "78: # define VAR(name)          (name)",
          "79: # define EMPTY(name)        ((name).IsEmpty())",
          "80: # define ASSIGN(name, val)  ((name) = P(val))",
          "82: # define LAZY_ASSIGN(name, val) \\",
          "83:   do if ((name).IsEmpty()) (name) = P(val); while (0)",
          "85: template <class T> inline v8::Persistent<T> P(v8::Handle<T> v)",
          "86: {",
          "87:   return v8::Persistent<T>(v);",
          "88: }",
          "90: inline v8::Persistent<v8::String> P(const char* symbol)",
          "91: {",
          "92:   return v8::Persistent<v8::String>::New(",
          "93:     v8::String::NewSymbol(symbol));",
          "94: }",
          "95: #endif // HAVE_ISOLATES",
          "97: } // namespace node",
          "99: #endif // SRC_NODE_INTERNALS_H_",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a475e62a3e6bcec3be6ff03f1c4bdbf5b188065c",
      "candidate_info": {
        "commit_hash": "a475e62a3e6bcec3be6ff03f1c4bdbf5b188065c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/a475e62a3e6bcec3be6ff03f1c4bdbf5b188065c",
        "files": [
          "test/simple/test-path.js"
        ],
        "message": "Windows: add test for path.normalize with UNC paths",
        "before_after_code_files": [
          "test/simple/test-path.js||test/simple/test-path.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-path.js||test/simple/test-path.js": [
          "File: test/simple/test-path.js -> test/simple/test-path.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:   assert.equal(path.normalize('a//b//../b'), 'a\\\\b');",
          "198:   assert.equal(path.normalize('a//b//./c'), 'a\\\\b\\\\c');",
          "199:   assert.equal(path.normalize('a//b//.'), 'a\\\\b');",
          "200: } else {",
          "201:   assert.equal(path.normalize('./fixtures///b/../b/c.js'),",
          "202:                'fixtures/b/c.js');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200:   assert.equal(path.normalize('//server/share/dir/file.ext'),",
          "201:                '\\\\\\\\server\\\\share\\\\dir\\\\file.ext');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15101163377a3baa26f97db15735d794daa9cd4d",
      "candidate_info": {
        "commit_hash": "15101163377a3baa26f97db15735d794daa9cd4d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/15101163377a3baa26f97db15735d794daa9cd4d",
        "files": [
          "test/simple/test-fs-watch.js"
        ],
        "message": "test: fs.watch filename support on Darwin",
        "before_after_code_files": [
          "test/simple/test-fs-watch.js||test/simple/test-fs-watch.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-fs-watch.js||test/simple/test-fs-watch.js": [
          "File: test/simple/test-fs-watch.js -> test/simple/test-fs-watch.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: var path = require('path');",
          "25: var fs = require('fs');",
          "29: var watchSeenOne = 0;",
          "30: var watchSeenTwo = 0;",
          "",
          "[Removed Lines]",
          "27: var expectFilePath = process.platform == 'win32' || process.platform == 'linux';",
          "",
          "[Added Lines]",
          "27: var expectFilePath = process.platform === 'win32' ||",
          "28:                      process.platform === 'linux' ||",
          "29:                      process.platform === 'darwin';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:       var watcher = fs.watch(filepathOne)",
          "64:       watcher.on('change', function(event, filename) {",
          "65:         assert.equal('change', event);",
          "67:           assert.equal('watch.txt', filename);",
          "68:         } else {",
          "69:           assert.equal(null, filename);",
          "",
          "[Removed Lines]",
          "66:         if (expectFilePath) {",
          "",
          "[Added Lines]",
          "71:         if (expectFilePath && process.platform !== 'darwin') {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:     function() {",
          "88:       var watcher = fs.watch(filepathTwo, function(event, filename) {",
          "89:         assert.equal('change', event);",
          "91:           assert.equal('hasOwnProperty', filename);",
          "92:         } else {",
          "93:           assert.equal(null, filename);",
          "",
          "[Removed Lines]",
          "90:         if (expectFilePath) {",
          "",
          "[Added Lines]",
          "98:         if (expectFilePath && process.platform !== 'darwin') {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "761a82bc9a35f6bac1308115eca1961ffcaec1d8",
      "candidate_info": {
        "commit_hash": "761a82bc9a35f6bac1308115eca1961ffcaec1d8",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/761a82bc9a35f6bac1308115eca1961ffcaec1d8",
        "files": [
          "test/simple/test-event-emitter-remove-all-listeners.js"
        ],
        "message": "test: make .removeAllListeners() test more exhaustive\n\nAlso test removal of multiple listeners, it's a separate code path.",
        "before_after_code_files": [
          "test/simple/test-event-emitter-remove-all-listeners.js||test/simple/test-event-emitter-remove-all-listeners.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-event-emitter-remove-all-listeners.js||test/simple/test-event-emitter-remove-all-listeners.js": [
          "File: test/simple/test-event-emitter-remove-all-listeners.js -> test/simple/test-event-emitter-remove-all-listeners.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: var e1 = new events.EventEmitter();",
          "30: e1.on('foo', listener);",
          "31: e1.on('bar', listener);",
          "32: var fooListeners = e1.listeners('foo');",
          "33: var barListeners = e1.listeners('bar');",
          "38: assert.equal(e1.listeners('foo'), fooListeners);",
          "39: assert.equal(e1.listeners('bar'), barListeners);",
          "41: var e2 = new events.EventEmitter();",
          "42: e2.on('foo', listener);",
          "",
          "[Removed Lines]",
          "34: e1.removeAllListeners('foo');",
          "35: assert.deepEqual(e1.listeners('foo'), []);",
          "36: assert.deepEqual(e1.listeners('bar'), [listener]);",
          "",
          "[Added Lines]",
          "32: e1.on('baz', listener);",
          "33: e1.on('baz', listener);",
          "36: var bazListeners = e1.listeners('baz');",
          "37: e1.removeAllListeners('bar');",
          "38: e1.removeAllListeners('baz');",
          "39: assert.deepEqual(e1.listeners('foo'), [listener]);",
          "40: assert.deepEqual(e1.listeners('bar'), []);",
          "41: assert.deepEqual(e1.listeners('baz'), []);",
          "45: assert.equal(e1.listeners('baz'), bazListeners);",
          "",
          "---------------"
        ]
      }
    }
  ]
}